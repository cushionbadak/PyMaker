<div class="post-text" itemprop="text">
<p>I am looking for minimum and maximum values for integers in python. For eg., in Java, we have <code>Integer.MIN_VALUE</code> and <code>Integer.MAX_VALUE</code>. Is there something like this in python?</p>
</div>
<div class="post-text" itemprop="text">
<h3>Python 3</h3>
<p>In Python 3, this question doesn't apply. The plain <code>int</code> type is unbounded.</p>
<p>However, you might actually be looking for the machine's <em><a href="http://en.wikipedia.org/wiki/Word_(computer_architecture)#Table_of_word_sizes" rel="noreferrer">word size</a></em>. That's still available in Python 3 as <code>sys.maxsize</code>. </p>
<h3>Python 2</h3>
<p>In Python 2, the maximum value for plain <code>int</code> values is available as <code>sys.maxint</code>:</p>
<pre><code>&gt;&gt;&gt; sys.maxint
9223372036854775807
</code></pre>
<p>You can calculate the minimum value with <code>-sys.maxint - 1</code> as shown <a href="https://docs.python.org/2/library/sys.html#sys.maxint" rel="noreferrer">here</a>. </p>
<p>Python seamlessly switches from plain to long integers once you exceed this value. So most of the time, you won't need to know it.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>sys.maxint</strong> constant has been removed from Python 3.0 onward, instead use <strong>sys.maxsize</strong></p>
<blockquote>
<p>Integers</p>
<ul>
<li>PEP 237: Essentially, long renamed to int. That is, there is only one built-in integral type, named int; but it behaves mostly like the
  old long type.</li>
<li>PEP 238: An expression like 1/2 returns a float. Use 1//2 to get the truncating behavior. (The latter syntax has existed for years, at
  least since Python 2.2.)</li>
<li>The sys.maxint constant was removed, since there is no longer a limit to the value of integers. However, sys.maxsize can be used as an
  integer larger than any practical list or string index. It conforms to
  the implementation’s “natural” integer size and is typically the same
  as sys.maxint in previous releases on the same platform (assuming the
  same build options).</li>
<li>The repr() of a long integer doesn’t include the trailing L anymore, so code that unconditionally strips that character will chop off the
  last digit instead. (Use str() instead.)</li>
<li>Octal literals are no longer of the form 0720; use 0o720 instead.</li>
</ul>
</blockquote>
<p>Refer : <a href="https://docs.python.org/3/whatsnew/3.0.html">https://docs.python.org/3/whatsnew/3.0.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you just need a number that's bigger than all others, you can use</p>
<pre><code>float('inf')
</code></pre>
<p>in similar fashion, a number smaller than all others:</p>
<pre><code>float('-inf')
</code></pre>
<p>This works in both python 2 and 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python integers will automatically switch from a fixed-size <code>int</code> representation into a variable width <a href="http://docs.python.org/library/sys.html#sys.long_info" rel="noreferrer"><code>long</code></a> representation once you pass the value <a href="http://docs.python.org/library/sys.html#sys.maxint" rel="noreferrer"><code>sys.maxint</code></a>, which is either 2<sup>31</sup> - 1 or 2<sup>63</sup> - 1 depending on your platform. Notice the <code>L</code> that gets appended here:</p>
<pre><code>&gt;&gt;&gt; 9223372036854775807
9223372036854775807
&gt;&gt;&gt; 9223372036854775808
9223372036854775808L
</code></pre>
<p>From the <a href="http://docs.python.org/library/stdtypes.html#typesnumeric" rel="noreferrer">Python manual</a>:</p>
<blockquote>
<p>Numbers are created by numeric literals or as the result of built-in functions and operators. Unadorned integer literals (including binary, hex, and octal numbers) yield plain integers unless the value they denote is too large to be represented as a plain integer, in which case they yield a long integer. Integer literals with an <code>'L'</code> or <code>'l'</code> suffix yield long integers (<code>'L'</code> is preferred because <code>1l</code> looks too much like eleven!).</p>
</blockquote>
<p>Python tries very hard to pretend its integers are mathematical integers and are unbounded. It can, for instance, calculate a <a href="http://mathworld.wolfram.com/Googol.html" rel="noreferrer">googol</a> with ease:</p>
<pre><code>&gt;&gt;&gt; 10**100
10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000L
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3, it is</p>
<pre><code>import sys
max = sys.maxsize
min = -sys.maxsize -1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want the max for array or list indices (equivalent to <code>size_t</code> in C/C++), you can use numpy:</p>
<pre><code>np.iinfo(np.intp).max
</code></pre>
<p>This is same as <code>sys.maxsize</code> however advantage is that you don't need import sys just for this.</p>
<p>If you want max for native int on the machine:</p>
<pre><code>np.iinfo(np.intc).max
</code></pre>
<p>You can look at other available types in <a href="https://jakevdp.github.io/PythonDataScienceHandbook/02.01-understanding-data-types.html" rel="nofollow noreferrer">doc</a>.</p>
<p>For floats you can also use <code>sys.float_info.max</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I rely heavily on commands like this.</p>
<pre><code>python -c 'import sys; print(sys.maxsize)'
</code></pre>
<p>Max int returned: <strong>9223372036854775807</strong></p>
<p>For more references for 'sys' you should access</p>
<p><a href="https://docs.python.org/3/library/sys.html" rel="nofollow noreferrer">https://docs.python.org/3/library/sys.html</a></p>
<p><a href="https://docs.python.org/3/library/sys.html#sys.maxsize" rel="nofollow noreferrer">https://docs.python.org/3/library/sys.html#sys.maxsize</a></p>
</div>
<div class="post-text" itemprop="text">
<p>By using <code>sys</code> module (python 3)</p>
<pre><code>import sys

INT_MAX = sys.maxsize  

INT_MIN = -sys.maxsize-1


print(INT_MAX,INT_MIN)
</code></pre>
</div>
<span class="comment-copy">Note that in Python 3 the <code>int</code> type is basically the same as the <code>long</code> type in Python 2, so the idea of a maximum or minimum <code>int</code> disappears completely. It's basically irrelevant even on Python 2.</span>
<span class="comment-copy">@agf: it can be relevant in various way. For instance in any algorithm that require to save the min value found (like a sorting algorithm). The min value could be initialized at sys.maxint so it guarantees that any first value found is taken as min</span>
<span class="comment-copy">@Toaster except that you can have a list where all values are greater than <code>sys.maxint</code> since it's only the maximum for the <code>int</code> type on Python 2, which Python will silently promote to a <code>long</code>.</span>
<span class="comment-copy">If you need to use "a very large value" in an algorithm, e.g. finding minimum or maximum of a generic collection, <code>float('inf')</code> or <code>float('-inf')</code> can be quite helpful.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/4581842/python-integer-ranges">Python integer ranges</a></span>
<span class="comment-copy">This number may appear to be arbitrary, but it isn't. 9223372036854775807 is exactly <code>2^63 - 1</code>, so you've got a 64-bit int. In general, an n-bit integer has values ranging from <code>-2^(n-1)</code> to <code>2^(n-1) - 1</code>.</span>
<span class="comment-copy">Note that if you're using a 32-bit Python runtime, sys.maxint will return <code>2^31 - 1</code>, even though Python will jump to 64-bit seamlessly with the <code>long</code> datatype.</span>
<span class="comment-copy">Use <code>sys.maxsize</code> instead, as suggested by @Akash Rana. It is present also in Python 2, <a href="https://docs.python.org/2/library/sys.html#sys.maxsize" rel="nofollow noreferrer">as <code>sys</code> docs</a> say. This will make the code more compatible with both Python versions.</span>
<span class="comment-copy">You and I have different interpretations of that line from the docs. The replacement in <code>2to3</code> is a fine quick-and-dirty heuristic that won't break anything most of the time -- but the difference between these two values matters. The best practice is to use the value you actually mean to use. If you <i>truly need</i> <code>sys.maxint</code> in Python 2, you won't need it anymore in Python 3, and it should really be removed entirely, not changed to <code>sys.maxsize</code>.</span>
<span class="comment-copy">minsize - Multiplying with Bitwise min operator gives minsize  ~sys.maxsize</span>
<span class="comment-copy">Just a note tho (as irrelevant it is, but still): float('inf') &gt; float('inf') results in 'false'. Infinite number should be bigger than another infinite number :-D ... <i>mind snaps</i></span>
<span class="comment-copy">@Scre What else would you expect?  <code>x &gt; x</code> is usually <code>False</code>, and infinity should be no exception. (<code>float('NaN)</code>, on the other hand...)</span>
<span class="comment-copy">This actually doesn't apply for <code>int</code> cauze <code>cannot convert infinite float to int</code>...but works for most cases</span>
<span class="comment-copy">@Scre "In comparison operations, positive infinity is larger than all values except itself and NaN, and negative infinity is smaller than all values except itself and NaN."  <a href="http://www.gnu.org/software/libc/manual/html_node/Infinity-and-NaN.html" rel="nofollow noreferrer">gnu.org/software/libc/manual/html_node/Infinity-and-NaN.html</a></span>
<span class="comment-copy">Note that <code>int('inf')</code> doesn't work.</span>
<span class="comment-copy">To add to the confusion, Python's <code>long</code> isn't like Java's <code>long</code> - it's rather closer to <code>BigInteger</code>.</span>
<span class="comment-copy">The min should be <code>-sys.maxint - 1</code></span>
<span class="comment-copy">python 3 does not exist. see <a href="http://stackoverflow.com/questions/13795758/what-is-sys-maxint-in-python-3" title="what is sys maxint in python 3">stackoverflow.com/questions/13795758/…</a></span>
<span class="comment-copy">well, python 3 does <i>exist</i> , thankfully(!); but <code>sys.maxint</code> doesn't exist in python 3 (tl;dr:  <i>"<code>sys.maxint</code> constant was removed (in python3), since there is no longer a limit to the value of integers. However, <code>sys.maxsize</code> can be used as an integer larger than any practical list or string index."</i> )</span>
<span class="comment-copy">lol, that is a typo. I'm not sure what I was thinking at the time. In python 3, -sys.maxinit does not exist or perhaps, that does not exist in python 3.  I'm glad you knew what I meant. 8-)</span>
<span class="comment-copy">Why create variables that shadow builtins such as <code>min()</code> and <code>max()</code>?</span>
