<div class="post-text" itemprop="text">
<p>This piece of code, test.py:</p>
<pre><code>if 1:
   print "foo"
print "bar"
</code></pre>
<p>can be succesfully executed with <code>execfile("test.py")</code> or <code>python test.py</code>, but when one tries to copy-paste it into python interpreter:</p>
<pre><code>File "&lt;stdin&gt;", line 3
print "bar"
        ^
SyntaxError: invalid syntax
</code></pre>
<p>Why is it so? Can interpreter by configured in such a way that it would read copy-pasted text succesfully? I guess that may affect typing in the interpreter, but that's ok for me.</p>
</div>
<div class="post-text" itemprop="text">
<p>Indentation is probably lost or broken. </p>
<p>Have a look at <a href="http://ipython.org/" rel="noreferrer">IPython</a> -- it's enhanced python interpreter with many convenient features. One of them is a magic function <code>%paste</code> that allows you to paste multiple lines of code.</p>
<p>It also has tab-completion, auto-indentation.. and many more. Have a look at their site.</p>
<hr/>
<p>Using <code>%paste</code> in ipython:</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/o3cUg.png"/></p>
<p>And copy-and-paste stuff is one of the things fixed in the qt console, here's using a plain old copy-and-paste of your code block "just works" in the new <code>ipython qtconsole</code>:</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/Zh6mG.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know any trick for the standard command prompt, but I can suggest you a more advanced interpreter like <a href="http://ipython.org/">IPython</a> that has a special syntax for multi-line paste:</p>
<pre><code>In [1]: %cpaste
Pasting code; enter '--' alone on the line to stop.
:for c in range(3):
:    print c
:
:--
0
1
2
</code></pre>
<p>Another option is the <a href="http://bpython-interpreter.org/">bpython</a> interpreter that has an automatic paste mode (if you are typing too fast to be an human):</p>
<pre><code>&gt;&gt;&gt; for c in range(3):
...     print c
... 
0
1
2
&gt;&gt;&gt; 
 &lt;C-r&gt; Rewind  &lt;C-s&gt; Save  &lt;F8&gt; Pastebin  &lt;F9&gt; Pager  &lt;F2&gt; Show Source 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do <code>%autoindent</code> to Automatic indentation OFF. after that you can past your code in IPython.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Continuation lines are needed when entering a multi-line construct.
  --<a href="https://docs.python.org/2/tutorial/interpreter.html#interactive-mode" rel="noreferrer">Interactive mode</a>, <a href="https://docs.python.org/2/tutorial" rel="noreferrer">The Python Tutorial</a> (v2) (<a href="https://docs.python.org/3/tutorial/interpreter.html#interactive-mode" rel="noreferrer">v3</a>)</p>
</blockquote>
<p>So you need to enter:</p>
<pre><code>if 1:
   print "foo"

print "bar"
</code></pre>
<p>I've yet to find a suitable explanation as to why it's different to a non-interactive session, alas.</p>
</div>
<div class="post-text" itemprop="text">
<p>All of the current answers suggest you change to IPython. For a python-only solution, you can use <a href="https://docs.python.org/2/library/textwrap.html" rel="nofollow noreferrer">textwrap</a> to remove leading whitespace from lines.</p>
<p>e.g.</p>
<pre><code>&gt;&gt;&gt; code="""    x='your pasted code'
                y='with common indentation'"""
&gt;&gt;&gt; formatted=textwrap.dedent(code)
&gt;&gt;&gt; exec(formatted)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One other solution I recently found for similar problem:</p>
<pre><code>$ python &lt;&lt; EOF
if 1:
   print "foo"
print "bar"

EOF
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are like me and use Notepad++ (to copy and paste from), <strong>try to replace tabs by spaces</strong> by going to settings&gt;preferences&gt;language and check the replace by spaces.<br/><br/>
I had this problem myself for so long and I found out that python.exe recognizes spaces.</p>
</div>
<span class="comment-copy">+1: I've been caught out by missing the line break after a block many times and never found a satisfactory explanation as to why it's different to a non-interactive session.</span>
<span class="comment-copy">that's the thing, actually this is my style of working with python right now, and because of this i need to put empty lines in the source files which i'm working on (and testing via copy-paste)... that's irritating</span>
<span class="comment-copy"><code>ipython</code>, good as it is, barfs on this sample too: <code>SyntaxError: invalid syntax</code>. Try it!</span>
<span class="comment-copy">@Johnsyweb I'm at windows ATM and <code>%paste</code> doesn't seem to work at all (something with tkinter_clipboard). So I can't really try it. But the <code>%cpaste</code> mentioned in @naufraghi's answer works fine even with this example.</span>
<span class="comment-copy">@Johnsyweb Works for me, see examples added in my edit.  However, I have a pretty recent build of ipython and I'm aware this is something that was definitely b0rked in the past.</span>
<span class="comment-copy">Please note that this does not "allow you to paste", this is apparently supposed to grab code from the selection (or maybe the clipboard) and run it <i>automagically</i>, while <code>%cpaste</code>, suggested in another answer, effectively <i>allows</i> you to paste manually.</span>
<span class="comment-copy">For multi-line paste, there is also <a href="http://www.dreampie.org/index.html" rel="nofollow noreferrer">DreamPie</a> for Linux and Windows.</span>
<span class="comment-copy">+1: I did not know about <code>%cpaste</code>!</span>
<span class="comment-copy">Does not work for the example above, perhaps for the reason pointed by @Johnsyweb</span>
<span class="comment-copy">This one works on headless machines!  +1</span>
<span class="comment-copy">yes, i've noticed this, but copy-paste testing of my sources is my python work-style right now and this thing imposes on me to put redundant empty lines everywhere...</span>
<span class="comment-copy">Have you considered unit testing instead?</span>
<span class="comment-copy">It's curious, as — IMHO — one would expect text run using shebang lines to run sligthlty in the same way as if it were sent to the stdin of the interpreter.</span>
<span class="comment-copy">@Johnsyweb - unit tests are a way to go, but sometimes you work with legacy systems that are hard to unit test, or with infrastructure that runs on older Python versions without unit test support (like wlst scripts that run on jython 2.2.)</span>
<span class="comment-copy">This is the solution without using any tool like IPython (although I think that's a very good tool)</span>
