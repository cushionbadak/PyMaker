<div class="post-text" itemprop="text">
<p>For a project in one of my classes we have to output numbers up to five decimal places.It is possible that the output will be a complex number and I am unable to figure out how to output a complex number with five decimal places. For floats I know it is just:</p>
<p><code>print "%0.5f"%variable_name</code></p>
<p>Is there something similar for complex numbers?</p>
</div>
<div class="post-text" itemprop="text">
<p>For questions like this, the <a href="http://docs.python.org/library/" rel="nofollow">Python documentation</a> should be your first stop. Specifically, have a look at the section on <a href="http://docs.python.org/library/stdtypes.html#string-formatting-operations" rel="nofollow">string formatting</a>. It lists all the string format codes; there isn't one for complex numbers.</p>
<p>What you can do is format the real and imaginary parts of the number separately, using <code>x.real</code> and <code>x.imag</code>, and print it out in <code>a + bi</code> form.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do it as is shown below using the <code>str.format()</code> method:</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; n = 3.4+2.3j
&gt;&gt;&gt; n
(3.4+2.3j)
&gt;&gt;&gt; '({0.real:.2f} + {0.imag:.2f}i)'.format(n)
'(3.40 + 2.30i)'
&gt;&gt;&gt; '({c.real:.2f} + {c.imag:.2f}i)'.format(c=n)
'(3.40 + 2.30i)'
</code></pre>
<p>To make it handle both positive and negative imaginary portions properly, you would need a (even more) complicated formatting operation:</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; n = 3.4-2.3j
&gt;&gt;&gt; n
(3.4-2.3j)
&gt;&gt;&gt; '({0:.2f} {1} {2:.2f}i)'.format(n.real, '+-'[n.imag &lt; 0], abs(n.imag))
'(3.40 - 2.30i)'
</code></pre>
<p><strong>Update - Easier Way</strong></p>
<p>Although you <strong>cannot</strong> use <code>f</code> as a presentation type for complex numbers using the string formatting operator <code>%</code>:</p>
<pre><code>n1 = 3.4+2.3j
n2 = 3.4-2.3j

try:
    print('test: %.2f' % n1)
except Exception as exc:
    print('{}: {}'.format(type(exc).__name__, exc))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>TypeError: float argument required, not complex
</code></pre>
<p>You <strong>can</strong> however use it with complex numbers via the <code>str.format()</code> method. This isn't explicitly documented, but is implied by the <a href="https://docs.python.org/3/library/string.html?highlight=formatting#format-specification-mini-language" rel="nofollow noreferrer">Format Specification Mini-Language</a> documentation which just says:</p>
<blockquote>
<p><code>'f'</code>  Fixed point. Displays the number as a fixed-point number. The default precision is <code>6</code>.</p>
</blockquote>
<p>. . .so it's easy to overlook.
In concrete terms, the following works in both Python 2.7.14 and 3.4.6:</p>
<pre><code>print('n1: {:.2f}'.format(n1))
print('n2: {:.2f}'.format(n2))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>n1: 3.10+4.20j
n2: 3.10-4.20j
</code></pre>
<p>This doesn't give you quite the control the code in my original answer does, but it's certainly much more concise (and handles both positive and negative imaginary parts automatically).</p>
<p><strong>Update 2 - <em>f-strings</em></strong></p>
<p><a href="https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals" rel="nofollow noreferrer">Formatted string literals</a> (aka <em>f-strings</em>) where added in Python 3.6, which means it could do also be done like this that version or later:</p>
<pre><code>print(f'n1: {n1:.2f}')  # -&gt; n1: 3.40+2.30j
print(f'n2: {n2:.3f}')  # -&gt; n2: 3.400-2.300j
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; n = 3.4 + 2.3j
&gt;&gt;&gt; print '%05f %05fi' % (n.real, n.imag)
3.400000 2.300000i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Neither <a href="http://docs.python.org/2/library/stdtypes.html#string-formatting-operations" rel="nofollow">String Formatting Operations</a> - i.e. the modulo (<code>%</code>) operator) -
nor the newer <code>str.format()</code> <a href="http://docs.python.org/2/library/string.html#formatstrings" rel="nofollow">Format String Syntax</a> support complex types.
However it is possible to call the <code>__format__</code> method of all built in numeric types directly.
Here is an example:</p>
<pre><code>&gt;&gt;&gt; i = -3 # int
&gt;&gt;&gt; l = -33L # long (only Python 2.X)
&gt;&gt;&gt; f = -10./3 # float
&gt;&gt;&gt; c = - 1./9 - 2.j/9 # complex
&gt;&gt;&gt; [ x.__format__('.3f') for x in (i, l, f, c)]
['-3.000', '-33.000', '-3.333', '-0.111-0.222j']
</code></pre>
<p>Note, that this works well with negative imaginary parts too.</p>
</div>
<div class="post-text" itemprop="text">
<p>As of Python 2.6 you can define how objects of your own classes respond to format strings.  So, you can define a subclass of <code>complex</code> that can be formatted.  Here's an example:</p>
<pre><code>&gt;&gt;&gt; class Complex_formatted(complex):
...     def __format__(self, fmt):
...         cfmt = "({:" + fmt + "}{:+" + fmt + "}j)"
...         return cfmt.format(self.real, self.imag)
... 
&gt;&gt;&gt; z1 = Complex_formatted(.123456789 + 123.456789j)
&gt;&gt;&gt; z2 = Complex_formatted(.123456789 - 123.456789j)
&gt;&gt;&gt; "My complex numbers are {:0.5f} and {:0.5f}.".format(z1, z2)
'My complex numbers are (0.12346+123.45679j) and (0.12346-123.45679j).'
&gt;&gt;&gt; "My complex numbers are {:0.6f} and {:0.6f}.".format(z1, z2)
'My complex numbers are (0.123457+123.456789j) and (0.123457-123.456789j).'
</code></pre>
<p>Objects of this class behave exactly like <code>complex</code> numbers except they take more space and operate more slowly; reader beware.</p>
</div>
<span class="comment-copy">Just to note, in Python the imaginary part uses <code>j</code>.</span>
<span class="comment-copy">What if the imaginary part is negative?</span>
<span class="comment-copy">@Peter: To handle both positive and negative imaginary portions you could use <code>'({0.real:.2f} {0.imag:+.2f}j)'.format(n)</code>.</span>
<span class="comment-copy">That would produce, for example, <code>(3.40 -2.30j)</code>. What if you want <code>(3.40 - 2.30j)</code>?</span>
<span class="comment-copy">Sorry, I was trying to help you correct and improve your answer. With a negative imaginary part it will print, for example, <code>(3.49 + -2.30j)</code>.</span>
<span class="comment-copy">Thank you for posting this answer.  It's frustrating to come to a difficult string formatting thread and have everyone link the docs (which are super unhelpful really), even after admitting that there's no way shown in the docs.  I really don't get why python doesn't have something like:  '0.2cf' to mean complex float, that would work just like a normal float...</span>
<span class="comment-copy">Changed to <code>'%05f %+05fi' % (n.real, n.imag)</code> it always shows the imaginary part's sign which looks mathematically nice in both cases: <code>3.400000 +2.300000i</code> and <code>3.400000 -2.300000i</code>.</span>
