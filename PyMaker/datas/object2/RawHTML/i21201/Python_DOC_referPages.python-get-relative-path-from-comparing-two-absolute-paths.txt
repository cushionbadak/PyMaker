<div class="post-text" itemprop="text">
<p>Say, I have two absolute paths. I need to check if the location referring to by one of the paths is a descendant of the other. If true, I need to find out the relative path of the descendant from the ancestor. What's a good way to implement this in Python? Any library that I can benefit from?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/os.path.html#os.path.commonprefix" rel="noreferrer">os.path.commonprefix()</a> and <a href="http://docs.python.org/library/os.path.html#os.path.relpath" rel="noreferrer">os.path.relpath()</a> are your friends:</p>
<pre><code>&gt;&gt;&gt; print os.path.commonprefix(['/usr/var/log', '/usr/var/security'])
'/usr/var'
&gt;&gt;&gt; print os.path.commonprefix(['/tmp', '/usr/var'])  # No common prefix: the root is the common prefix
'/'
</code></pre>
<p>You can thus test whether the common prefix is one of the paths, i.e. if one of the paths is a common ancestor:</p>
<pre><code>paths = […, …, …]
common_prefix = os.path.commonprefix(list_of_paths)
if common_prefix in paths:
    …
</code></pre>
<p>You can then find the relative paths:</p>
<pre><code>relative_paths = [os.path.relpath(path, common_prefix) for path in paths]
</code></pre>
<p>You can even handle more than two paths, with this method, and test whether all the paths are all below one of them.</p>
<p><strong>PS</strong>: depending on how your paths look like, you might want to perform some normalization first (this is useful in situations where one does not know whether they always end with '/' or not, or if some of the paths are relative).  Relevant functions include <a href="http://docs.python.org/library/os.path.html#os.path.abspath" rel="noreferrer">os.path.abspath()</a> and <a href="http://docs.python.org/library/os.path.html#os.path.normpath" rel="noreferrer">os.path.normpath()</a>.</p>
<p><strong>PPS</strong>: as Peter Briggs mentioned in the comments, the simple approach described above can fail:</p>
<pre><code>&gt;&gt;&gt; os.path.commonprefix(['/usr/var', '/usr/var2/log'])
'/usr/var'
</code></pre>
<p>even though <code>/usr/var</code> is <em>not</em> a common prefix of the paths.  Forcing all paths to end with '/' before calling <code>commonprefix()</code> solves this (specific) problem.</p>
<p><strong>PPPS</strong>: as bluenote10 mentioned, adding a slash does not solve the general problem. Here is his followup question: <a href="https://stackoverflow.com/questions/21498939/how-to-circumvent-the-fallacy-of-pythons-os-path-commonprefix">How to circumvent the fallacy of Python's os.path.commonprefix?</a></p>
<p><strong>PPPPS</strong>: starting with Python 3.4, we have <a href="https://docs.python.org/3/library/pathlib.html#" rel="noreferrer">pathlib</a>, a module that provides a saner path manipulation environment. I guess that the common prefix of a set of paths can be obtained by getting all the prefixes of each path (with <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.parents" rel="noreferrer"><code>PurePath.parents()</code></a>), taking the intersection of all these parent sets, and selecting the longest common prefix.</p>
<p><strong>PPPPPS</strong>: Python 3.5 introduced a proper solution to this question: <a href="https://docs.python.org/3/library/os.path.html#os.path.commonpath" rel="noreferrer"><code>os.path.commonpath()</code></a>, which returns a valid path.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/os.path.html#os.path.relpath" rel="noreferrer"><code>os.path.relpath</code></a>:</p>
<blockquote>
<p>Return a relative filepath to path either from the current directory or from an optional start point.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; from os.path import relpath
&gt;&gt;&gt; relpath('/usr/var/log/', '/usr/var')
'log'
&gt;&gt;&gt; relpath('/usr/var/log/', '/usr/var/sad/')
'../log'
</code></pre>
<p>So, if relative path starts with <code>'..'</code> - it means that the second path is not descendant of the first path.</p>
<p>In Python3 you can use <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.relative_to" rel="noreferrer"><code>PurePath.relative_to</code></a>:</p>
<pre><code>Python 3.5.1 (default, Jan 22 2016, 08:54:32)
&gt;&gt;&gt; from pathlib import Path

&gt;&gt;&gt; Path('/usr/var/log').relative_to('/usr/var/log/')
PosixPath('.')

&gt;&gt;&gt; Path('/usr/var/log').relative_to('/usr/var/')
PosixPath('log')

&gt;&gt;&gt; Path('/usr/var/log').relative_to('/etc/')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/pathlib.py", line 851, in relative_to
    .format(str(self), str(formatted)))
ValueError: '/usr/var/log' does not start with '/etc'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another option is</p>
<pre><code>&gt;&gt;&gt; print os.path.relpath('/usr/var/log/', '/usr/var')
log
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I looked for a solution with python2 and w/o any external dependency. Didn't find anything matching my needs. And while commonprefix, does only compare strings and not path elems, I wrote this: </p>
<pre><code>def _relpath(cwd, path):
    # Create a relative path for path from cwd, if possible
    if sys.platform == "win32":
        cwd = cwd.lower()
        path = path.lower()

    _cwd = os.path.abspath(cwd).split(os.path.sep)
    _path = os.path.abspath(path).split(os.path.sep)
    equal_until_pos = None
    for i in xrange(min(len(_cwd), len(_path))):
        if _cwd[i] != _path[i]:
            break
        else:
            equal_until_pos = i
    if equal_until_pos is None:
        return path
    newpath = [".." for i in xrange(len(_cwd[equal_until_pos + 1:]))]
    newpath.extend(_path[equal_until_pos + 1:])
    if newpath:
        return os.path.join(*newpath)
    return "."
</code></pre>
<p>Any comments welcome!</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Edit :</strong> See jme's answer for the best way with Python3.</p>
<p>Using pathlib, you have the following solution :</p>
<p>Let's say we want to check if <code>son</code> is a descendant of <code>parent</code>, and both are <code>Path</code> objects.
We can get a list of the <em>parts</em> in the path with <code>list(parent.parts)</code>.
Then, we just check that the begining of the son is equal to the list of segments of the parent.</p>
<pre><code>&gt;&gt;&gt; lparent = list(parent.parts)
&gt;&gt;&gt; lson = list(son.parts)
&gt;&gt;&gt; if lson[:len(lparent)] == lparent:
&gt;&gt;&gt; ... #parent is a parent of son :)
</code></pre>
<p>If you want to get the remaining part, you can just do</p>
<pre><code>&gt;&gt;&gt; ''.join(lson[len(lparent):])
</code></pre>
<p>It's a string, but you can of course use it as a constructor of an other Path object.</p>
</div>
<span class="comment-copy">Exactly what I need. Thanks for your prompt answer. Will accept your answer once the time restriction is lifted.</span>
<span class="comment-copy">Take care with <code>commonprefix</code>, as e.g. the common prefix for <code>/usr/var/log</code> and <code>/usr/var2/log</code> is returned as <code>/usr/var</code> - which is probably not what you'd expect. (It's also possible for it to return paths that are not valid directories.)</span>
<span class="comment-copy">@PeterBriggs: Thanks, this caveat is important.  I added a PPS.</span>
<span class="comment-copy">@EOL: I don't really see how to fix the problem by appending a slash :(. What if we have <code>['/usr/var1/log/', '/usr/var2/log/']</code>?</span>
<span class="comment-copy">@EOL: Since I failed to find an appealing solution for this problem I though it might be okay to discuss this sub-issue in a <a href="http://stackoverflow.com/questions/21498939/how-to-circumvent-the-fallacy-of-pythons-os-path-commonprefix">separate question</a>.</span>
<span class="comment-copy">Checking for the presence of <code>os.pardir</code> is more robust than checking for <code>..</code> (agreed, there are not many other conventions, though).</span>
<span class="comment-copy">Am I wrong or is <code>os.relpath</code> more powerful since it handles <code>..</code> and <code>PurePath.relative_to()</code> does not?   Am I missing something?</span>
<span class="comment-copy">This always return a relative path; this does not directly indicate whether one of the paths is above the other (one can check for the presence of <code>os.pardir</code> in front of the two possible resulting relative paths, though).</span>
<span class="comment-copy">This one looks good, but, as I stumble upon, there is an issue when <code>cwd</code> and <code>path</code> are the same. it should check first if those two are the same and return either <code>""</code> or <code>"."</code></span>
<span class="comment-copy">Thanks, I updated the code to fix the issue!</span>
<span class="comment-copy">It's even easier than that: simply <code>parent in son.parents</code>, and if it is, getting the remainder with <code>son.relative_to(parent)</code>.</span>
<span class="comment-copy">@jme You answer is even better, why don't you post it?</span>
