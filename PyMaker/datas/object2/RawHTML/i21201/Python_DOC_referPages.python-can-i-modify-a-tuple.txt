<div class="post-text" itemprop="text">
<p>I have a 2 D tuple (Actually I thought, it was a list.. but the error says its a tuple)
But anyways.. 
The tuple is of form:
(floatnumber_val, prod_id)
now I have a dictionary which contains key-&gt; prod_id and value prod_name
now.. i want to change the prod_id in tuple to prod_name
So this is waht I did</p>
<pre><code>#if prodName is the tuple
# prodDict is the dictionary
for i in range(len(prodName)):
    key = prodName[i][1] # get the prodid
    if prodDict.has_key(key):
        value = prodDict[key]
         prodName[i][1] = value
</code></pre>
<p>umm pretty straightforward
but i get an error that TypeError: 'tuple' object does not support item assignment</p>
<p>Thanks!!</p>
</div>
<div class="post-text" itemprop="text">
<p>If prodName is a list of tuples and you want to create a new list of tuples like you explained, you have to create new tuples since a tuple is immutable (i.e. it can not be changed).</p>
<p>Example:</p>
<pre><code>for i,(floatnumber_val, prod_id) in enumerate(prodName):
  prodName[i] = (floatnumber_val, prodDict.get(prod_id,prod_id))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Tuples are not mutable, you cannot change them. </p>
<p>The thing to do is probably to find out why you are creating tuples instead of the list you expected.</p>
</div>
<div class="post-text" itemprop="text">
<p>Short answer: you cannot. </p>
<p>Tuples are immutable. Lists are mutable. That's really the key distinction. </p>
<p>If you want to mutate an ordered collection of items in Python it's going to have to be a list. If you want to stick to tuples you're going to have to make a new one. If I've understood you correctly you are starting with:</p>
<pre><code>prodName = [(1.0, 1), (1.1, 2), (1.2, 3)]
prodDict = {1: 'name_1', 2: 'name_2', 3: 'name_3'}
</code></pre>
<p>So, you can get the list you want with:</p>
<pre><code>new_prodName = [(f, prodDict[id]) for f, id in prodName)]
</code></pre>
<p>This will fail if the <code>id</code> isn't found in the <code>prodDict</code> dict. If you want it to fail early that's great. If not, you can set a default (ex: <code>None</code>) using <code>.get()</code>: </p>
<pre><code>new_prodName = [(f, prodDict.get(id, None)) for f, id in prodName)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unfortunately, you can't modify the tuple. Use lists instead.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>prodName[i] = tuple(prodName[i][0], value)
</code></pre>
</div>
<span class="comment-copy">a tuple in python is immutable</span>
<span class="comment-copy">If you came here looking to obtain modified <code>namedtuple</code>s, look into: <a href="https://docs.python.org/3/library/collections.html?highlight=namedtuple#collections.somenamedtuple._replace" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
