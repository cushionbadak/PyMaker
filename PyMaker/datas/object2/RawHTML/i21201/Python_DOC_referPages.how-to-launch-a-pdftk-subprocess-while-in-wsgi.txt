<div class="post-text" itemprop="text">
<p>I need to launch a pdftk process while serving a web request in Django, and wait for it to finish.  My current pdftk code looks like this:</p>
<pre><code>proc = subprocess.Popen(["/usr/bin/pdftk", 
                         "/tmp/infile1.pdf", 
                         "/tmp/infile2.pdf", 
                         "cat", "output", "/tmp/outfile.pdf"])    
proc.communicate()
</code></pre>
<p>This works fine, as long as I'm executing under the dev server (running as user <code>www-data</code>).  But as soon as I switch to mod_wsgi, changing nothing else, the code hangs at <code>proc.communicate()</code>, and "outfile.pdf" is left as an open file handle of zero length.</p>
<p>I've tried a several variants of the subprocess invocation (as well as plain old os.system) -- setting stdin/stdout/stderr to PIPE or to various file handles changes nothing.  Using "shell=True" prevents <code>proc.communicate()</code> from hanging, but then pdftk fails to create the output file, both under the devserver or mod_wsgi.  <a href="https://groups.google.com/group/modwsgi/browse_thread/thread/c29ad9fa9f516a93?fwc=1" rel="noreferrer">This discussion</a> seems to indicate there might be some deeper voodoo going on with OS signals and pdftk that I don't understand.</p>
<p>Are there any workarounds to get a subprocess call like this to work properly under wsgi?  I'm avoiding using PyPDF to combine pdf files, because I have to combine large enough numbers of files (several hundred) that it runs out of memory (PyPDF needs to keep every source pdf file open in memory while combining them).</p>
<p>I'm doing this under recent Ubuntu, pythons 2.6 and 2.7.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try with absolute file system paths to input and output files. The current working directory under Apache will not be same directory as run server and could be anything.</p>
<hr/>
<p>Second attempt after eliminating the obvious.</p>
<p>The pdftk program is a Java program which is relying on being able to generate/receive SIGPWR signal to trigger garbage collection or perform other actions. Problem is that under Apache/mod_wsgi in daemon mode, signals are blocked within the request handler threads to ensure that they are only received by the main thread looking for process shutdown trigger events. When you are forking the process to run pdftk, it is unfortunately inheriting the blocked sigmask from the request handler thread. The consequence of this is that it impedes the operation of the Java garbage collection process and causes pdftk to fail in strange ways.</p>
<p>The only solution for this is to use Celery and have the front end submit a job to the Celery queue for celeryd to then fork and execute pdftk. Because this is then done from a process created distinct from Apache, you will not have this issue.</p>
<p>For more gory details Google for mod_wsgi and pdftk, in particular in Google Groups.</p>
<p><a href="http://groups.google.com/group/modwsgi/search?group=modwsgi&amp;q=pdftk&amp;qt_g=Search+this+group" rel="noreferrer">http://groups.google.com/group/modwsgi/search?group=modwsgi&amp;q=pdftk&amp;qt_g=Search+this+group</a></p>
</div>
<div class="post-text" itemprop="text">
<h1>Update: Merging Two Pdfs Together Using Pdftk on Python 3:</h1>
<p>It's been several years since this question was posted. (2011).
The original poster said that <strong>os.system</strong> didn't work for them when they were running older versions of python:</p>
<ul>
<li><strong>Python 2.6</strong> and </li>
<li><strong>Python 2.7</strong></li>
</ul>
<p>On <strong>Python 3.4</strong>,  <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer">os.system</a> worked for me:</p>
<ul>
<li>import os</li>
<li>os.system("pdftk " + <em>template_file</em> + " fill_form " + <em>data_file</em> + " output " + <em>export_file</em>)</li>
</ul>
<p><strong>Python 3.5</strong> adds <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess.run</a></p>
<ul>
<li><p>subprocess.run("pdftk " + <em>template_file</em> + " fill_form " + <em>data_file</em> + " output " + <em>export_file</em>)</p></li>
<li><p>I used absolute paths for my files:</p>
<ul>
<li>template_file = "/var/www/myproject/static/"</li>
</ul></li>
</ul>
<p>I ran this with Django 1.10, with the resulting output being saved to <em>export_file</em>.</p>
<h2>How to Merge Two PDFs and Display PDF Output:</h2>
<pre><code>from django.http import HttpResponse, HttpResponseNotFound
from django.core.files.storage import FileSystemStorage
from fdfgen import forge_fdf
import os

template_file = = "/var/www/myproject/template.pdf"
data_file = "/var/www/myproject/data.fdf"
export_file ="/var/www/myproject/pdf_output.pdf"

fields = {}
fields['organization_name'] = organization_name
fields['address_line_1'] = address_line_1
fields['request_date'] = request_date
fields['amount'] = amount
field_list = [(field, fields[field]) for field in fields]

fdf = forge_fdf("",field_list,[],[],[])
fdf_file = open(data_file,"wb")
fdf_file.write(fdf)
fdf_file.close()

os.system("pdftk " + template_file + " fill_form " + data_file + " output " + export_file)
time.sleep(1)

fs = FileSystemStorage()
if fs.exists(export_file):
  with fs.open(export_file) as pdf:
    return HttpResponse(pdf, content_type='application/pdf; charset=utf-8')
else:
    return HttpResponseNotFound('The requested pdf was not found in our server.')
</code></pre>
<p><strong>Libraries:</strong></p>
<ul>
<li><a href="https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/" rel="nofollow noreferrer">pdftk</a></li>
<li><a href="https://github.com/ccnmtl/fdfgen/" rel="nofollow noreferrer">fdfgen</a></li>
</ul>
</div>
<span class="comment-copy">I am in fact using absolute paths, thanks.  I've updated the example code to reflect this.  The issue remains, unfortunately.</span>
<span class="comment-copy">Thanks, forking to celery worked.  I executed the celery task synchronously (using <code>task.delay().get()</code> so that it could happen within a single response cycle, which gets me the desired result.</span>
<span class="comment-copy">Wow, I couldn't find this solution anywhere else, but this is exactly what I had to do to get PDFTK to work. THANKS SO MUCH!</span>
