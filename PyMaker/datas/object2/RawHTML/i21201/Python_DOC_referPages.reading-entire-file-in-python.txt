<div class="post-text" itemprop="text">
<p>If you read an entire file with <code>content = open('Path/to/file', 'r').read()</code> is the file handle left open until the script exits?  Is there a more concise method to read a whole file? </p>
</div>
<div class="post-text" itemprop="text">
<p>the answer to that question depends somewhat on the particular python implementation.  </p>
<p>To understand what this is all about, pay particular attention to the actual <code>file</code> object.  In your code, that object is mentioned only once, in an expression, and becomes inaccessible immediatly after the <code>read()</code> call returns.</p>
<p>This means that the file object is garbage.  The only remaining question is "When will the garbage collecter collect the file object?".</p>
<p>in CPython, which uses a reference counter, this kind of garbage is noticed immediately, and so it will be collected immediately.  This is not generally true of other python implementations.</p>
<p>A better solution, to make sure that the file is closed, is this pattern:</p>
<pre><code>with open('Path/to/file', 'r') as content_file:
    content = content_file.read()
</code></pre>
<p>which will always close the file immediately after the block ends; even if an exception occurs.</p>
<p>Edit:  To put a finer point on it:</p>
<p>Other than <code>file.__exit__()</code>, which is "automatically" called in a <code>with</code> context manager setting, the only other way that <code>file.close()</code> is automatically called (that is, other than explicitly calling it yourself,) is via <code>file.__del__()</code>.  This leads us to the question of when does <code>__del__()</code> get called?</p>
<blockquote>
<p>A correctly-written program cannot assume that finalizers will ever run at any point prior to program termination.</p>
</blockquote>
<p>-- <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/08/09/10047586.aspx" rel="noreferrer">http://blogs.msdn.com/b/oldnewthing/archive/2010/08/09/10047586.aspx</a></p>
<p>In particular:</p>
<blockquote>
<p>Objects are never explicitly destroyed; however, when they become unreachable they may be garbage-collected. <strong>An implementation is allowed to postpone garbage collection or omit it altogether</strong> â€” it is a matter of implementation quality how garbage collection is implemented, as long as no objects are collected that are still reachable.</p>
<p>[...]</p>
<p>CPython currently uses a reference-counting scheme with (optional) delayed detection of cyclically linked garbage, which collects most objects as soon as they become unreachable, but is not guaranteed to collect garbage containing circular references.</p>
</blockquote>
<p>-- <a href="https://docs.python.org/3.5/reference/datamodel.html#objects-values-and-types" rel="noreferrer">https://docs.python.org/3.5/reference/datamodel.html#objects-values-and-types</a></p>
<p>(Emphasis mine)</p>
<p>but as it suggests, other implementations may have other behavior.  As an example, PyPy <a href="https://pypy.readthedocs.org/en/release-2.4.x/garbage_collection.html" rel="noreferrer">has <em>6</em> different garbage collection implementations</a>!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.read_text" rel="noreferrer">pathlib</a>.</p>
<p>For Python 3.5 and above:</p>
<pre><code>from pathlib import Path
contents = Path(file_path).read_text()
</code></pre>
<p>For lower versions of Python use <a href="https://pypi.python.org/pypi/pathlib2" rel="noreferrer">pathlib2</a>:</p>
<pre><code>$ pip install pathlib2
</code></pre>
<p>Then:</p>
<pre><code>from pathlib2 import Path
contents = Path(file_path).read_text()
</code></pre>
<hr/>
<p>This is the actual <code>read_text</code> <a href="https://github.com/python/cpython/blob/3.5/Lib/pathlib.py#L1160" rel="noreferrer">implementation</a>:</p>
<pre><code>def read_text(self, encoding=None, errors=None):
    """
    Open the file in text mode, read it, and close the file.
    """
    with self.open(mode='r', encoding=encoding, errors=errors) as f:
        return f.read()
</code></pre>
</div>
<span class="comment-copy">For a while, there weren't really other Python implementations; but relying on implementation details is not really Pythonic.</span>
<span class="comment-copy">Is it still implementation-specific, or was it standardized already? Not calling <code>__exit__()</code> in such cases sounds like a design flaw.</span>
<span class="comment-copy">@rr: see my edits; but in the off chance I missunderstood you, <code>__exit__()</code> <i>is</i> guarnateed to be called before executing the the next statement after a <code>with</code> clause,  it's <code>object.__del__()</code> (which, for <code>file</code> also calls <code>close()</code>) that is not guaranteed.</span>
<span class="comment-copy">@jgmjgm It's precisely because of those 3 issues, GC being unpredictable, <code>try</code>/<code>finally</code> being fiddly and the highly common usefulless of cleanup handlers that <code>with</code> solves.  The difference between "explicitly closing" and "managing with <code>with</code>" is that the exit handler is called even if an exception is thrown.  You could put the <code>close()</code> in a <code>finally</code> clause, but that is not much different from using <code>with</code> instead, a bit messier (3 extra lines instead of 1), and a little harder to get just right.</span>
<span class="comment-copy">What I don't get about that is why 'with' would be anymore reliable since it's not explicit either. Is it because the spec says it has to do that its always implemented like that?</span>
<span class="comment-copy">... instead of rolling my own "implementation" (and eventually suffering from it), today I learned that <code>pathlib</code> offers a lot of great helpers. Thanks for the additional answer.</span>
