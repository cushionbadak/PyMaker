<div class="post-text" itemprop="text">
<p>I know that the parameters can be any object but for the documentation it is quite important to specify what you would expect.</p>
<p>First is how to specify a parameter types like these below?</p>
<ul>
<li><code>str</code> (or use <code>String</code> or <code>string</code>?)</li>
<li><code>int</code></li>
<li><code>list</code></li>
<li><code>dict</code></li>
<li>function()</li>
<li><code>tuple</code></li>
<li>object instance of class <code>MyClass</code></li>
</ul>
<p>Second, how to specify params that can be of multiple types like a function that can handle a single parameter than can be <code>int</code> or <code>str</code>?</p>
<p>Please use the below example to demonstrate the syntax needed for documenting this with your proposed solution. Mind that it is desired to be able to hyperlink reference to the "Image" class from inside the documentation. </p>
<pre><code>def myMethod(self, name, image):
    """
    Does something ...

    name String: name of the image
    image Image: instance of Image Class or a string indicating the filename.

    Return True if operation succeeded or False.
    """
    return True
</code></pre>
<p>Note, you are welcome to suggest the usage of any documentation tool (sphinx, oxygen, ...) as long it is able to deal with the requirements. </p>
<h2>Update:</h2>
<p>It seams that there is some kind of support for documenting parameter types in doxygen in. general. The code below works but adds an annoying $ to the param name (because it was initially made for php).</p>
<pre><code>    @param str $arg description
    @param str|int $arg description
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a better way. We use</p>
<pre><code>def my_method(x, y):
    """
    my_method description

    @type x: int
    @param x: An integer

    @type y: int|string
    @param y: An integer or string

    @rtype: string
    @return: Returns a sentence with your variables in it
    """

    return "Hello World! %s, %s" % (x,y)
</code></pre>
<p>That's it. In the PyCharm IDE this helps a lot. It works like a charm ;-)</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to add an exclamation mark at the start of the Python docstring for Doxygen to parse it correctly.</p>
<pre><code>def myMethod(self, name, image):
    """!
    Does something ...

    @param name String: name of the image
    @param image Image: instance of Image Class or a string indicating the filename.

    @return Return True if operation succeeded or False.
    """
    return True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If using Python 3, you can use the function annotations described in <a href="http://www.python.org/dev/peps/pep-3107/" rel="nofollow">PEP 3107</a>.</p>
<pre><code>def compile(
   source: "something compilable",
   filename: "where the compilable thing comes from",
   mode: "is this a single statement or a suite?"):
</code></pre>
<p>See also <a href="http://docs.python.org/release/3.1.3/reference/compound_stmts.html#function-definitions" rel="nofollow">function definitions</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Doxygen is great for C++, but if you are working with mostly python code you should give <a href="http://sphinx.pocoo.org/" rel="nofollow">sphinx</a> a try. If you choose sphinx then all you need to do is follow <a href="http://www.python.org/dev/peps/pep-0008/" rel="nofollow">pep8</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Yup, @docu is right - this is the (IMHO best) way to combine both documentation schemes more or less seamlessly.  If, on the other hand, you also want to do something like putting text on the doxygen-generated index page, you would add</p>
<pre><code>##
# @mainpage (Sub)Heading for the doxygen-generated index page
# Text that goes right onto the doxygen-generated index page
</code></pre>
<p>somewhere at the beginning of your Python code.  </p>
<p>In other words, where doxygen does not expect Python comments, use <code>##</code> to alert it that there are tags for it.  Where it expects Python comments (e.g. at the beginning of functions or classes), use <code>"""!</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Figured I'd post this little tidbit here since IDEA showed me this was possible, and I was never told nor read about this.</p>
<pre><code>&gt;&gt;&gt; def test( arg: bool = False ) -&gt; None: print( arg )

&gt;&gt;&gt; test(10)
10
</code></pre>
<p>When you type <code>test(</code>, IDLE's doc-tip appears with <code>(arg: bool=False) -&gt; None</code> Which was something I thought only Visual Studio did.</p>
<p>It's not exactly doxygen material, but it's good for documenting parameter-types for those using your code.</p>
</div>
<span class="comment-copy">This seems to be what you're looking for: <a href="http://www.stack.nl/~dimitri/doxygen/docblocks.html#pythonblocks" rel="nofollow noreferrer">stack.nl/~dimitri/doxygen/docblocks.html#pythonblocks</a>.  Is it not enough information?  What more would you like?</span>
<span class="comment-copy">The best documentation you can provide for inputs and outputs is a suite of passing unit tests, using the <a href="http://www.python.org/doc//current/library/unittest.html" rel="nofollow noreferrer"><code>unittest</code> framework</a>.</span>
<span class="comment-copy">@Johnsyweb your link is sadly broken <a href="https://docs.python.org/2/library/unittest.html" rel="nofollow noreferrer">docs.python.org/2/library/unittest.html</a></span>
<span class="comment-copy">7+ years later <a href="https://docs.python.org/2/library/unittest.html" rel="nofollow noreferrer">docs.python.org/2/library/unittest.html</a> or <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">docs.python.org/3/library/unittest.html</a> should work.</span>
<span class="comment-copy">This doesn't appear to work. When I added an '!' after the opening quotes, it worked.</span>
<span class="comment-copy">1) To create function documentation press alt+Enter in function header and select "insert documentation string stub" <a href="https://www.jetbrains.com/pycharm/webhelp/creating-documentation-comments.html" rel="nofollow noreferrer">jetbrains.com/pycharm/webhelp/â€¦</a>  2) The default format of docstrings in PyCharm is "restructured text". You can change it to Epytext (as in above Tony Melony listing) at File-&gt;Settings-&gt;Python Integrate Tools-&gt;Dostring Format . See epydoc reference <a href="http://epydoc.sourceforge.net/epytext.html" rel="nofollow noreferrer">epydoc.sourceforge.net/epytext.html</a></span>
<span class="comment-copy">But are there aren't any documentation processors that support this yet, are there? Seems like <a href="http://stackoverflow.com/questions/2194777/in-sphinx-is-there-a-way-to-document-parameters-along-with-declaring-them">sphinx doesn't</a>, and I can't find anything about doxygen support either.</span>
<span class="comment-copy">Three years ago I thought it would have been by now.</span>
<span class="comment-copy">The main reason is because the project already uses doxygen and second, sphinx is not able to document parameter types.</span>
