<div class="post-text" itemprop="text">
<p>I'm trying to translate some python code to scala code. So I'm a total noob in Python. </p>
<p>But why do some classes have object as a parameter but never explicitly use it? What's the reasoning for having it as a parameter in the first place?</p>
<p>Example:</p>
<pre><code>class Table(object)
</code></pre>
<p>Thank you for your time.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python2 this declares <code>Table</code> to be a <a href="http://www.python.org/doc/newstyle/" rel="noreferrer">new-style class</a> (as opposed to "classic" class).
In Python3 all classes are new-style classes, so this is no longer necessary.</p>
<p>New style classes have a few special attributes that classic classes lack.</p>
<pre><code>class Classic: pass
class NewStyle(object): pass

print(dir(Classic))
# ['__doc__', '__module__']

print(dir(NewStyle))
# ['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']
</code></pre>
<p>Also, <a href="http://www.python.org/download/releases/2.2.3/descrintro/#property" rel="noreferrer">properties</a> and <a href="http://docs.python.org/library/functions.html#super" rel="noreferrer">super</a> do not work with classic classes.</p>
<p>In Python2 it is a good idea to make all classes new-style classes. (Though a lot of classes in the standard library are still classic classes, for the sake of backward-compatibility.)</p>
<p>In general, in a statement such as</p>
<pre><code>class Foo(Base1, Base2):
</code></pre>
<p><code>Foo</code> is being declared as a class inheriting from base classes <code>Base1</code> and <code>Base2</code>.</p>
<p><code>object</code> is the mother of all classes in Python. It is a new-style class, so inheriting from <code>object</code> makes <code>Table</code> a new-style class.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>Table</code> class is extending a class called <code>object</code>. It's not an argument. The reason you may want to extend <code>object</code> explicitly is it turns the class into a new-style class. If you don't explicitly specify it extends <code>object</code>, until Python 3, it will default to being an old-style class. (Since Python 3, all classes are new-style, whether you explicitly extend <code>object</code> or not.)</p>
<p>For more information on new-style and old-style classes, please <a href="https://stackoverflow.com/questions/54867/">see this question</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just a note that the “new-style" vs “old-style” class distinction is specific to Python 2.x; in 3.x, all classes are “new-style”.</p>
</div>
<div class="post-text" itemprop="text">
<p>class Table and class Table(object) are no different for Python.</p>
<p>It's not a parameter, its extending from object (which is base Class like many other languages).</p>
<p>All it says is that it inherits whatever is defined in "object". This is the default behaviour.</p>
</div>
<div class="post-text" itemprop="text">
<p>object is the most base type of class object defined in python.
Attributes of object can be seen as below</p>
<p>**&gt;&gt;&gt; dir(object)</p>
<p>['<strong>class</strong>', '<strong>delattr</strong>', '<strong>doc</strong>', '<strong>format</strong>', '<strong>getattribute</strong>', '<strong>hash</strong>', '<strong>init</strong>', '<strong>new</strong>', '<strong>reduce</strong>', '<strong>reduce_ex</strong>', '<strong>repr</strong>', '<strong>setattr</strong>', '<strong>sizeof</strong>', '<strong>str</strong>', '<strong>subclasshook</strong>']**</p>
<p>So Table(object)  is just inheritance.!</p>
</div>
<div class="post-text" itemprop="text">
<p>1)Class name (object):                                  2) class name:
They both are same but first one quite better in terms of writing,it look better while inheriting other classes to another,i t looks homogeneous.</p>
<p>How same ?
So,every thing in Python is come under object means every thing in Python has property of object,if write or don't it will understand it.
In first we explicitly tell it in second we didn't.</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python">Old style and new style classes in Python</a></span>
<span class="comment-copy">can you redirect me to a source that mentions object is not necessary as parameter in Python3? I cannot seem to find it. Thank you</span>
<span class="comment-copy">It's been mentioned many times on StackOverflow (<a href="https://stackoverflow.com/a/16193572/190597">here, for instance</a>), but I haven't been able to find a simple declaration of this in the docs. It is shown implicitly (by the omission of <code>object</code> from the list of class bases) <a href="https://docs.python.org/3/tutorial/classes.html#class-definition-syntax" rel="nofollow noreferrer">in the tutorial</a>.</span>
<span class="comment-copy">The <a href="https://docs.python.org/3/glossary.html#term-new-style-class" rel="nofollow noreferrer">Python3 docs</a> also state that a "new-style class" is the "old name for the flavor of classes <b>now used for all class objects</b>" (my emphasis). And <a href="https://docs.python.org/2/glossary.html#term-new-style-class" rel="nofollow noreferrer">the Python2 docs state</a> that a "new-style class" is any class which inherits from <code>object</code>. The two statements put together imply that you don't need to include <code>object</code> in the list of class bases in Python3 since all classes are new-style classes in Python3.</span>
<span class="comment-copy">This is the more straightforward and succinct answer.  Thanks.</span>
<span class="comment-copy">Classes automatically extending <code>object</code> is default behaviour in Python 3 only. In python 2, a class extending object has attributes that a class that doesn't extend object will not have.</span>
<span class="comment-copy">This is not the case in Python 2, see accepted answer for the details.</span>
