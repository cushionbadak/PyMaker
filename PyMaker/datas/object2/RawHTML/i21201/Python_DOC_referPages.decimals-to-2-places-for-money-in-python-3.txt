<div class="post-text" itemprop="text">
<p>How do I get my decimals to stay at 2 places for representing money using the <code>decimal</code> module?</p>
<p>I've setting the precision, and damn near everything else, and met with failure.</p>
</div>
<div class="post-text" itemprop="text">
<p>When working with money you usually want to limit precision as late as possible so things like multiplication don't aggregate rounding errors. In python 2 and 3 you can <code>.quantize()</code> a <code>Decimal</code> to any precision you want:</p>
<pre><code>unit_price = decimal.Decimal('8.0107')
quantity = decimal.Decimal('0.056')
price = unit_price * quantity
cents = decimal.Decimal('.01')
money = price.quantize(cents, decimal.ROUND_HALF_UP)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The accepted answer is mostly correct, except for the constant to use for the rounding operation. You should use <code>ROUND_HALF_UP</code> instead of <code>ROUND_05UP</code> for currency operations. According to the <a href="https://docs.python.org/3/library/decimal.html#decimal.ROUND_HALF_UP" rel="noreferrer">docs</a>:</p>
<blockquote>
<p>decimal.<strong>ROUND_HALF_UP</strong></p>
<p>    Round to nearest with ties going away from zero.</p>
<p>decimal.<strong>ROUND_05UP</strong></p>
<p>    Round away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise round towards zero.</p>
</blockquote>
<p>Using <code>ROUND_05UP</code> would only round up (for positive numbers) if the number in the hundredths place was a 5 or 0, which isn't correct for currency math.</p>
<p>Here are some examples:</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal, ROUND_05UP, ROUND_HALF_UP
&gt;&gt;&gt; cents = Decimal('0.01')
&gt;&gt;&gt; Decimal('1.995').quantize(cents, ROUND_HALF_UP)
Decimal('2.00')  # Correct
&gt;&gt;&gt; Decimal('1.995').quantize(cents, ROUND_05UP)
Decimal('1.99')  # Incorrect
&gt;&gt;&gt; Decimal('1.001').quantize(cents, ROUND_HALF_UP)
Decimal('1.00')  # Correct
&gt;&gt;&gt; Decimal('1.001').quantize(cents, ROUND_05UP)
Decimal('1.01')  # Incorrect
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Falsehoods programmers believe about money:</p>
<ul>
<li>Monetary values can be stored or represented as a floating point.</li>
<li>All currencies have a decimal precision of 2.</li>
<li>All ISO 4217 defined currencies have a decimal precision.</li>
<li>All currencies are defined in ISO 4217.</li>
<li>Gold is not a currency.</li>
<li>My system will never have to handle obscure currencies with more than 2 decimal places.</li>
<li>Floating point values are OK if the monetary value of transactions is "small".</li>
<li>A system will always handle the same currency (therefore we do not persist the currency, only the monetary value).</li>
<li><strong>Storing monetary values as signed long integers will make them easier to work with, just multiply them by 100 after all arithmetic is done.</strong></li>
<li>Customers will never complain about my rounding methods.</li>
<li>When I convert my application from language X to language Y, I don't have to verify if the rounding behavior is the same.</li>
<li>On exchanging currency A for currency B, the exchange rate becomes irrelevant after the transaction.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>One way to solve this is to store money values in <em>cents</em> as integers, and only convert to decimal representation when printing values. This is called <a href="http://en.wikipedia.org/wiki/Fixed-point_arithmetic" rel="nofollow">fixed point arithmetic</a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; decimal.getcontext().prec = 2
&gt;&gt;&gt; d = decimal.Decimal('2.40')
&gt;&gt;&gt; d/17
Decimal('0.14')
</code></pre>
<p>You just have to set the precision to 2 (the first line) and them everything will use no more than 2 decimal places</p>
<p>Just for comparison:</p>
<pre><code>&gt;&gt;&gt; 2.4 / 17
0.1411764705882353
</code></pre>
</div>
<span class="comment-copy">Also I should add that local laws usually provide you with explicit points to quantize at.</span>
<span class="comment-copy">+1 This is the best advice. Setting precision globally to 2 decimal places is a nonsense. Next step: "given a unit price (4 decimal places) and an amount of money (2 dp), determine how many units (3 dp) that will buy". Also consider that you might be working on a software package which you hope will be used by multiple customers in multiple jurisdictions -- the number of dp in a unit price and a qty of units had better be configurable.</span>
<span class="comment-copy">I'm working on an accounting script. I'm prolly not using Decimal at all the right spots, but I discovered testing the sum of multiple lines of Debits and Credits in a single transaction (which must always equal zero) rounding ridiculous small numbers (1.8474111129762605e-13), ROUND_05UP always gives you a penny.</span>
<span class="comment-copy">"All currencies have a decimal precision of 2" &lt; example Bitcoin</span>
<span class="comment-copy">While this is no doubt accurate, it doesn't exactly answer the question.</span>
<span class="comment-copy">Even it is not really an answer to the question I like it very much!</span>
<span class="comment-copy">Voted up because it's something nice to have in mind. I know for sure that SO is not like a wiki but it certainly centers much info in the question's subject context. Witch is damn useful ;)</span>
<span class="comment-copy">So you just reinvented what Decimal does...</span>
<span class="comment-copy">There is value in understanding the concepts behind the Decimal module.</span>
<span class="comment-copy">I will not down-vote but will mention instead that this leads to various other problems. For example sooner or later you will have to multiply your prices by other fractions like quantities or exchange rates. That will result in having to truncate extra trailing digits to move the decimal point back to its proper position.</span>
<span class="comment-copy">@patrys: That's a good point. Of course, one would have the same problems with the Decimal module if the precision were set to exactly two places.</span>
<span class="comment-copy">what happens if the original number is just 2 and i want to be displayed as 2.00?</span>
<span class="comment-copy">@Musaab For printing, you should use <a href="http://docs.python.org/library/string.html#format-string-syntax" rel="nofollow noreferrer">string formatting</a></span>
<span class="comment-copy">You should not globally change the behavior of <code>Decimal</code> unless you understand the possible outcome and have tools to measure it (write a lot of unit tests, unit tests are always good!). Fiddling with global settings of a library on one end of your application can easily break a seemingly unrelated thing in another part of the project. If you are lucky enough, you might also change the behavior of third-party modules that you use and that happen to use <code>Decimal</code> internally.</span>
<span class="comment-copy">There will be unexpected behaviours that are not very "currency-like" if the precision is changed to 2. Precision does not mean "decimal places". Try <code>decimal.Decimal('9.99') + decimal.Decimal(0) == 10</code> with context <code>prec</code> set to 2.</span>
