<div class="post-text" itemprop="text">
<p>In Python 2.7.1 I can create a named tuple:</p>
<pre><code>from collections import namedtuple
Test = namedtuple('Test', ['this', 'that'])
</code></pre>
<p>I can populate it:</p>
<pre><code>my_test = Test(this=1, that=2)
</code></pre>
<p>And I can print it like this:</p>
<pre><code>print(my_test)
</code></pre>
<blockquote>
<blockquote>
<p>Test(this=1, that=2)</p>
</blockquote>
</blockquote>
<p>but why can't I print it like this?</p>
<pre><code>print("my_test = %r" % my_test)
</code></pre>
<blockquote>
<blockquote>
<blockquote>
<p>TypeError: not all arguments converted during string formatting</p>
</blockquote>
</blockquote>
</blockquote>
<p><strong>Edit:</strong>
I should have known to look at <a href="https://stackoverflow.com/questions/1455602/printing-tuple-with-string-formatting-in-python">Printing tuple with string formatting in Python</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Since <code>my_test</code> is a tuple, it will look for a <code>%</code> format for each item in the tuple.  To get around this wrap it in another tuple where the only element is <code>my_test</code>:</p>
<pre><code>print("my_test = %r" % (my_test,))
</code></pre>
<p>Don't forget the comma.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this:</p>
<pre><code>&gt;&gt;&gt; print("my_test = %r" % str(my_test))
my_test = 'Test(this=1, that=2)'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's unpacking it as 2 arguments. Compare with:</p>
<pre><code>print("dummy1 = %s, dummy2 = %s" % ("one","two"))
</code></pre>
<p>In your case, try putting it in a tuple.</p>
<pre><code>print("my_test = %r" % (my_test,))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The earlier answers are valid but here's an option if you don't care to print the name. It's a one-liner devised to pretty print only the contents of a named tuple of arbitrary length. Given a named tuple assigned to "named_tuple" the below yields a comma-delineated string of key=value pairs:</p>
<pre><code>', '.join(['{0}={1}'.format(k, getattr(named_tuple, k)) for k in named_tuple._fields])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As now documented at <a href="https://docs.python.org/3/library/stdtypes.html#old-string-formatting" rel="nofollow noreferrer">4.7.2. printf-style String Formatting</a>, the <code>%</code> string formatting or interpolation operator is problematic:</p>
<blockquote>
<p>The [printf-style string formatting operations] exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly).  Using the newer formatted string literals or the str.format() interface helps avoid these errors</p>
</blockquote>
<p>So for example you can now do:</p>
<pre><code>from collections import namedtuple
Test = namedtuple('Test', ['this', 'that'])
my_test = Test(this=1, that=2)
print("my_test = {0!r}".format(my_test))
</code></pre>
</div>
<span class="comment-copy">because it's a tuple...</span>
<span class="comment-copy">Duplicate of <a href="http://stackoverflow.com/questions/1455602/printing-tuple-with-string-formatting-in-python">Printing tuple with string formatting in Python</a>. If you realize your question is a duplicate, flag it "it doesn't belong here -&gt; exact duplicate", don't just add a link to the question.</span>
<span class="comment-copy">Can't believe I got bit by this one... again.  Thanks!</span>
<span class="comment-copy">Another good option.  Thanks for the tip!</span>
