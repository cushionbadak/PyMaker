<div class="post-text" itemprop="text">
<p>I have some small utility scripts written in Python that I want to be usable on both Windows and Linux.  I want to avoid having to explicitly invoke the Python interpreter.  Is there an easy way to point shebang notation to the correct locations on both Windows and Linux?  If not, is there another way to allow implicit invocation of the Python interpreter on both Windows and Linux without having to modify the script when transferring between operating systems?</p>
<p>Edit:  The shebang support on Windows is provided Cygwin, but I want to use the native Windows Python interpreter on Windows, not the Cygwin one. </p>
<p>Edit # 2:  It appears that shebang notation overrides file associations in Cygwin terminals.  I guess I could just uninstall Cygwin Python and symlink /usr/bin/python to Windows-native Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>Unless you are using cygwin, windows has no shebang support. However, when you install python, it add as file association for .py files. If you put just the name of your script on the command line, or double click it in windows explorer, then it will run through python.</p>
<p>What I do is include a <code>#!/usr/bin/env python</code> shebang in my scripts. This allows for shebang support on linux. If you run it on a windows machine with python installed, then the file association should be there, and it will run as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>Read up on the <a href="https://docs.python.org/3/using/windows.html#python-launcher-for-windows" rel="noreferrer">Python Launcher for Windows</a> in the docs, which was initially described in <a href="https://www.python.org/dev/peps/pep-0397" rel="noreferrer">PEP 397</a>. It lets
you define custom shebang configurations in an ini (e.g. to use pypy),
but out of the box you can use virtual shebangs such as <code>#!/usr/bin/env python3</code>, or shebangs with real paths such as <code>#!"C:\Python33\python.exe"</code> (quoting is required for paths containing spaces). You can also add command-line options to a shebang. For example, the following shebang adds the option to enter interactive mode after the script terminates: <code>#!/usr/bin/python3 -i</code>.</p>
<p>Python 3.3 associates .py (console) and .pyw (GUI) script file types with the respectively named launchers, py.exe and pyw.exe, to enable shebang support for scripts on Windows. The new launchers are installed to the root Windows folder (i.e. <code>%SystemRoot%</code>) when installing for all users. Otherwise you'll want to add the installation directory to <code>PATH</code> in order to use py.exe in the shell. Then from the command line you can run <code>py -2</code>, <code>py -3</code>, <code>py -2.6</code>, <code>py -3.3-32</code> (32-bit), and so on. The launcher is handy when combined with <code>-m</code> to run a module as a script, e.g. <code>py -3 -m pip install</code>. </p>
<p>There's also a version of <a href="https://bitbucket.org/vinay.sajip/pylauncher" rel="noreferrer">pylauncher</a> that can be installed separately if you only use Python 2.</p>
</div>
<div class="post-text" itemprop="text">
<p>Install pywin32. One of the nice thing is it setups the file association of *.py to the python interpreter.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not with shebang ... but you might be able to set up a file association, see <a href="https://stackoverflow.com/questions/1286873/perl-on-windows-file-associations-and-i-o-redirection/">this SO question</a> which deals with Perl and the associated answers which will also be pertinent as there's known problems with Windows and stdin/out redirection...</p>
</div>
<span class="comment-copy">I don't think windows has any sort of shebang support. You could try creating a file association with the python interpreter for .py files.</span>
<span class="comment-copy">Following up Nic ODell's comment:  Anytime I've installed Python on a Windows box the installation process took care of creating the file association for .py files.  This has always been using the Python installer for Windows from the python.org site.</span>
<span class="comment-copy">@eryksun Thanks.</span>
<span class="comment-copy">See the now current documentation about <a href="https://docs.python.org/3/using/windows.html?#shebang-lines" rel="nofollow noreferrer">Shebang Lines</a> on Windows. Note that you need to run the script using the <code>py</code> command for it to have any effect.</span>
<span class="comment-copy">It's nice to include the python version number. "python" does not link to "python2.7" in every distro.</span>
<span class="comment-copy">@mid_kid that's why I used env to get the version of python the user has specified as their default.</span>
<span class="comment-copy">My point is that that one isn't always the right one. Especially when distributing your script.</span>
<span class="comment-copy">The problem starts when your script is incompatible with said python version. Some distro's (For example: ArchLinux) link python with python3. It's generally a good idea to at least specify the major version number: ´#!/usr/bin/env python2´. And maybe your script only works with 2.7, because you use something that only exists in said version.</span>
<span class="comment-copy">Downvoted because this is answer is outdated: Windows now recognizes shebang lines for Python files.</span>
<span class="comment-copy">e.g.                      #!"C:\Program Files\Python37\python.exe"</span>
<span class="comment-copy">@tryptofan, yes, quoting is required in general to avoid a security hole, such as the case if "C:\program.exe" exists. "C:\Python33\python.exe" doesn't require quotes, but to be clear I'll update my example to quote the path.</span>
