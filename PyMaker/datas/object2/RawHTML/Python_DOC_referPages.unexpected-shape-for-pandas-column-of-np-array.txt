<div class="post-text" itemprop="text">
<p>My dataframe has two columns (l_cats and r_cats) of type np array.  Here is sample data</p>
<pre><code>l_name,l_cats,l_gh,r_name,r_cats,r_gh,score
piggly wiggly,1|2|4|0|0,1,piggly wiggly,1|2|4|3|0,1,1
piggly wiggly,1|2|4|0|0,1,piggly wiggly,1|2|4|3|0,1,1
piggly wiggly,1|2|4|0|0,1,piggly wiggly,1|2|4|3|0,1,1
piggly wiggly,1|2|4|0|0,1,piggly wiggly,1|2|4|3|0,1,1
.................
.................
&lt;79 rows&gt;
</code></pre>
<p>Below is how I read the data into these two columns</p>
<pre><code> data = pd.read_csv(self.path, converters={'l_cats': lambda x: np.array([y for y in x.split('|')]),
                                                  'r_cats': lambda x: np.array([y for y in x.split('|')])})
flat = data['l_cats'].values
print(str(flat.shape))
# Output: (79,)
print(str(flat[0].shape))
# Output: (5,)
print(str(type(flat[0])))
# Output: &lt;class 'numpy.ndarray'&gt;
</code></pre>
<p>Shouldn't the output of <code>print(str(flat.shape))</code> be (79, 5) ?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, it shouldn't.<br/>
If you just do <code>print(flat)</code> you should understand why. This is <code>flat</code>:</p>
<pre><code>[array(['1', '2', '4', '0', '0'], dtype='&lt;U1')
 array(['1', '2', '4', '0', '0'], dtype='&lt;U1')
 array(['1', '2', '4', '0', '0'], dtype='&lt;U1')
 array(['1', '2', '4', '0', '0'], dtype='&lt;U1')]
</code></pre>
<p>As you see, it's not a 2D matrix, but a 1D array or 1D arrays. To convert it to a 2D matrix you could do:</p>
<pre><code>mtx = np.stack(flat)
</code></pre>
</div>
<span class="comment-copy">Hello! What is <code>X_train</code>? How is it different from <code>data</code>?</span>
<span class="comment-copy">sorry, it's the same data. I will edit the question to reflect this</span>
<span class="comment-copy">Yes, I thought that. I'll also edit my answer for consistency.</span>
<span class="comment-copy">Thank you. This worked !</span>
