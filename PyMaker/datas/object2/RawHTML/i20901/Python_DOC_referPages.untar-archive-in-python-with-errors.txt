<div class="post-text" itemprop="text">
<p>I download a bz2 file using Python. Then I want to unpack the archive using:</p>
<pre><code>def unpack_file(dir, file):
    cwd = os.getcwd()
    os.chdir(dir)
    print "Unpacking file %s" % file
    cmd = "tar -jxf %s" % file
    print cmd
    os.system(cmd)
    os.chdir(cwd)
</code></pre>
<p>Unfortunately this ends with error:</p>
<pre><code>bzip2: Compressed file ends unexpectedly;
    perhaps it is corrupted?  *Possible* reason follows.
bzip2: Inappropriate ioctl for device
    Input file = (stdin), output file = (stdout)

It is possible that the compressed file(s) have become corrupted.
You can use the -tvv option to test integrity of such files.

You can use the `bzip2recover' program to attempt to recover
data from undamaged sections of corrupted files.

tar: Nieoczekiwany EOF w archiwum
tar: Nieoczekiwany EOF w archiwum
tar: Error is not recoverable: exiting now
</code></pre>
<p>However I can unpack the archive from the shell without any problem.</p>
<p>Do you have any ideas what I do wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>For the record, python standard library ships with the <a href="http://docs.python.org/library/tarfile.html">tarfile</a> module which automatically handles tar, tar.bz2, and tar.gz formats.</p>
<p>Additionally, you can do nifty things like get file lists, extract subsets of files or directories or chunk the archive so that you process it in a streaming form (i.e. you don't have to decompress the whole file then untar it.. it does everything in small chunks)</p>
<pre><code>import tarfile
tar = tarfile.open("sample.tar.gz")
tar.extractall()
tar.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would do it like this:</p>
<pre><code>import tarfile
target_folder = '.'
with tarfile.open("sample.tar.gz") as tar:
    tar.extractall(target_folder)
</code></pre>
<p>That's it. <a href="https://docs.python.org/3/library/tarfile.html" rel="nofollow noreferrer"><code>tar</code></a> / <a href="https://stackoverflow.com/q/3012488/562769"><code>with</code></a> takes care of the rest.</p>
<p>When you want to have the path to all the files:</p>
<pre><code>import os
filepaths = []
for (dirpath, dirnames, filenames) in walk(target_folder):
    filepaths.extend([os.path.join(dirpath, f) for f in filenames])
</code></pre>
</div>
<span class="comment-copy">Could you show us the exact command you run in the shell, and the exact command (including the filename) that you pass to <code>os.system()</code>?</span>
<span class="comment-copy">Please use <a href="http://docs.python.org/library/subprocess.html#replacing-os-system" rel="nofollow noreferrer"><code>subprocess.Popen</code></a> instead of <code>os.system</code>.</span>
<span class="comment-copy">How are you downloading the file?  If you put in a sleep(15) before calling unpack, does that still have the same error?</span>
<span class="comment-copy">Thanks, didn't know about the tarfile module. However I still want to know why there is error.</span>
<span class="comment-copy">What does the output of 'bzcat foo.tar.bz2 &gt;foo;echo $?' say? And whats the actual name of the tar file?</span>
