<div class="post-text" itemprop="text">
<p>I wrote a simple HTTP client and server in Python for experimenting. The first code snippet below shows how I send an HTTP GET request with a parameter named imsi. In the second code snippet I show my do_Get function implementation in the server side. My question is how I can extract the imsi parameter in the server code and send a response back to the client in order to signal the client that imsi is valid.<br/>
Thanks.</p>
<p>P.S.: I verified that the client sends the request successfully.</p>
<p><strong>CLIENT code snippet</strong></p>
<pre><code>    params = urllib.urlencode({'imsi': str(imsi)})
    conn = httplib.HTTPConnection(host + ':' + str(port))
    #conn.set_debuglevel(1)
    conn.request("GET", "/index.htm", 'imsi=' + str(imsi))
    r = conn.getresponse()
</code></pre>
<p><strong>SERVER code snippet</strong></p>
<pre><code>import sys, string, cStringIO, cgi, time, datetime
from os import curdir, sep
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer

class MyHandler(BaseHTTPRequestHandler):

# I want to extract the imsi parameter here and send a success response to 
# back to the client.
def do_GET(self):
    try:
        if self.path.endswith(".html"):
            #self.path has /index.htm
            f = open(curdir + sep + self.path)
            self.send_response(200)
            self.send_header('Content-type','text/html')
            self.end_headers()
            self.wfile.write("&lt;h1&gt;Device Static Content&lt;/h1&gt;")
            self.wfile.write(f.read())
            f.close()
            return
        if self.path.endswith(".esp"):   #our dynamic content
            self.send_response(200)
            self.send_header('Content-type','text/html')
            self.end_headers()
            self.wfile.write("&lt;h1&gt;Dynamic Dynamic Content&lt;/h1&gt;")
            self.wfile.write("Today is the " + str(time.localtime()[7]))
            self.wfile.write(" day in the year " + str(time.localtime()[0]))
            return

        # The root
        self.send_response(200)
        self.send_header('Content-type','text/html')
        self.end_headers()

        lst = list(sys.argv[1])
        n = lst[len(lst) - 1]
        now = datetime.datetime.now()

        output = cStringIO.StringIO()
        output.write("&lt;html&gt;&lt;head&gt;")
        output.write("&lt;style type=\"text/css\"&gt;")
        output.write("h1 {color:blue;}")
        output.write("h2 {color:red;}")
        output.write("&lt;/style&gt;")
        output.write("&lt;h1&gt;Device #" + n + " Root Content&lt;/h1&gt;")
        output.write("&lt;h2&gt;Device Addr: " + sys.argv[1] + ":" + sys.argv[2] + "&lt;/h1&gt;")
        output.write("&lt;h2&gt;Device Time: " + now.strftime("%Y-%m-%d %H:%M:%S") + "&lt;/h2&gt;")
        output.write("&lt;/body&gt;")
        output.write("&lt;/html&gt;")

        self.wfile.write(output.getvalue())

        return

    except IOError:
        self.send_error(404,'File Not Found: %s' % self.path)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can parse the query of a GET request using urlparse, then split the query string.</p>
<pre><code>from urlparse import urlparse
query = urlparse(self.path).query
query_components = dict(qc.split("=") for qc in query.split("&amp;"))
imsi = query_components["imsi"]
# query_components = { "imsi" : "Hello" }

# Or use the parse_qs method
from urlparse import urlparse, parse_qs
query_components = parse_qs(urlparse(self.path).query)
imsi = query_components["imsi"] 
# query_components = { "imsi" : ["Hello"] }
</code></pre>
<p>You can confirm this by using </p>
<pre><code> curl http://your.host/?imsi=Hello
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>BaseHTTPServer is a pretty low-level server. Generally you want to use a real web framework that does this kind of grunt work for you, but since you asked...</p>
<p>First import a url parsing library. In Python 2,x it's <a href="http://docs.python.org/library/urlparse.html" rel="noreferrer">urlparse</a>. (In Python3, you'd use <a href="https://docs.python.org/3/library/urllib.parse.html" rel="noreferrer">urllib.parse</a>)</p>
<pre><code>import urlparse
</code></pre>
<p>Then, in your do_get method, parse the query string.</p>
<pre><code>imsi = urlparse.parse_qs(urlparse.urlparse(self.path).query).get('imsi', None)
print imsi  # Prints None or the string value of imsi
</code></pre>
<p>Also, you could be using <a href="http://docs.python.org/library/urllib.html" rel="noreferrer">urllib</a> in your client code and it would probably be a lot easier.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>cgi</code> module contains <code>FieldStorage</code> class which is supposed to be used in CGI context, but seems to be easily used in your context as well.</p>
</div>
<span class="comment-copy">don't you get the <code>args</code> sent with the <code>GET</code> request?</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/questions/2490162/parse-http-get-and-post-parameters-from-basehttphandler" title="parse http get and post parameters from basehttphandler">stackoverflow.com/questions/2490162/â€¦</a></span>
<span class="comment-copy">&amp; is a shell special character ... Needs to be escaped so your curl command passes both params</span>
<span class="comment-copy">Ah of course, thanks for spotting that =)</span>
<span class="comment-copy">With Python 3, use <code>from urllib.parse import urlparse</code> source: <a href="https://stackoverflow.com/a/5239594/4669135">stackoverflow.com/a/5239594/4669135</a></span>
