<div class="post-text" itemprop="text">
<p>I've created a system where users upload videos to my server's filesystem and I need a way to generate unique filenames for the video files. Should I be using random.getrandbits? Is there a way to do this with a combination of letters and numbers?</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at <a href="http://en.wikipedia.org/wiki/Universally_unique_identifier" rel="nofollow"><code>Universally unique identifiers (UUID)</code></a> and Python's module <a href="http://docs.python.org/library/uuid.html" rel="nofollow"><code>uuid</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what I use:</p>
<pre><code>import base64
import uuid

base64.urlsafe_b64encode(uuid.uuid4().bytes)
</code></pre>
<p>I generate a uuid, but I use the bytes instead of larger hex version or one with dashes.  Then I encode it into a URL-safe base-64 string.  This is a shorter length string than using hex, but using base64 makes it so that the characters in the string are safe for files, urls and most other things.</p>
<p>One problem is that even with the urlsafe_b64encode, it always wants to '='s signs onto the end which are not so url-safe.  The '='s signs are for decoding the base-64 encoded information, so if you are only trying to generate random strings, then you can probably safey remove them with:</p>
<pre><code>str.replace('=', '')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use, in Python 3.6, the secrets module.</p>
<pre><code>&gt;&gt;&gt; import secrets
&gt;&gt;&gt; secrets.token_urlsafe(8)
'Pxym7N2zJRs'
</code></pre>
<p>Further documentation is here: <a href="https://docs.python.org/3/library/secrets.html" rel="nofollow noreferrer">https://docs.python.org/3/library/secrets.html</a></p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/2257441/python-random-string-generation-with-upper-case-letters-and-digits" title="python random string generation with upper case letters and digits">stackoverflow.com/questions/2257441/â€¦</a></span>
<span class="comment-copy">What framework are you using?  Often this is handled for you.  What's wrong with the existing <a href="http://docs.python.org/library/tempfile.html" rel="nofollow noreferrer">docs.python.org/library/tempfile.html</a> library?</span>
<span class="comment-copy">@S.Lott I don't think he wants to store the videos temporarily.</span>
<span class="comment-copy">There's nothing "temporary" about the file names.  They can be outside the <code>/tmp</code> filesystem.</span>
<span class="comment-copy">I actually do want to store the videos temporarily...they should be able to be previewed (played back), then uploaded to youtube, then the original video should be deleted.</span>
<span class="comment-copy">This is EXACTLY what I needed right now; thanks! Just thought you'd want to know that your answer to a low-scoring question still helped a random guy on the Internet.</span>
<span class="comment-copy">Thanks for the feedback. For us, its held up to the test of time so far, its almost a year later we still use this little snippit of code to generate primary keys throughout our entire application.</span>
<span class="comment-copy">Noting that on Python 3 I had to include <code>.decode('utf-8')</code> to get a string to do replacement on: <code>base64.urlsafe_b64encode(uuid.uuid4().bytes).decode('utf-8').replace('=', '')</code></span>
