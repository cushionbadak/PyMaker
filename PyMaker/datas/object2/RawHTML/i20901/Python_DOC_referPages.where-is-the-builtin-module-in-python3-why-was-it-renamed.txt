<div class="post-text" itemprop="text">
<p>I was curious about the <code>__builtin__</code> module and how it's used, but I can't find it in Python3!  Why was it moved?</p>
<p>Python 2.7</p>
<pre><code>&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt;
</code></pre>
<p>Python 3.2</p>
<pre><code>&gt;&gt;&gt; import __builtin__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: No module named __builtin__
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>__builtin__</code> module was renamed to <code>builtins</code> in Python3.</p>
<p>This change solves 2 sources of confusion for the average Python developer.</p>
<ul>
<li>Is it <code>'__builtins__'</code> or <code>'__builtin__'</code> that is in the global namespace?
Darn s! </li>
<li>Is <code>__builtin__</code> a <a href="http://docs.python.org/reference/datamodel.html#specialnames" rel="noreferrer">special method name</a> or a module?  I can't
tell.</li>
</ul>
<p>This confusion mainly arises because of the violation of <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">pep8</a> convention.  Also, the lack of pluralization on the module hinders communication as well.  Both of these are greatly illustrated by the lengths Guido must go to explain the following from <a href="http://mail.python.org/pipermail/python-ideas/2009-March/003821.html" rel="noreferrer">http://mail.python.org/pipermail/python-ideas/2009-March/003821.html</a>:</p>
<blockquote>
<p>[CPython] looks at the globals, which contain a special magic entry
  <code>__builtins__</code> (with an 's') which is the dict where built-in functions are looked up. When this dict is the same object as the <em>default</em>
  built-in dict (which is <code>__builtin__.__dict__</code> where <code>__builtin__</code> --
  without 's' -- is the module defining the built-in functions) it gives
  you supervisor privileges;â€¦</p>
</blockquote>
<p>For example,</p>
<p>Python2.7</p>
<pre><code>&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt; vars(globals()['__builtins__']) is vars(__builtin__)
True
&gt;&gt;&gt; 
</code></pre>
<p>Python3.2</p>
<pre><code>&gt;&gt;&gt; import builtins
&gt;&gt;&gt; vars(globals()['__builtins__']) is vars(builtins)
True
&gt;&gt;&gt;
</code></pre>
<p><strong>Related resources</strong>:</p>
<p>Other name changes - <a href="http://docs.pythonsprints.com/python3_porting/py-porting.html#name-changes" rel="noreferrer">http://docs.pythonsprints.com/python3_porting/py-porting.html#name-changes</a></p>
<p>For a succinct explanation of how <code>__builtins__</code> is used in name resolution - <a href="https://stackoverflow.com/questions/5325021/builtin-module-in-python">__builtin__ module in Python</a></p>
</div>
<span class="comment-copy">How does it solve the builtin vs bultins problem? I can still get it wrong if I'm not sure if there is an s or not</span>
<span class="comment-copy">@blues If you try <code>import builtin</code>, an error <code>ImportError: No module named 'builtin' </code> will show up, which is very easy to understand. Moreover, the module is now <a href="https://docs.python.org/3/library/builtins.html" rel="nofollow noreferrer">well documented</a>.</span>
