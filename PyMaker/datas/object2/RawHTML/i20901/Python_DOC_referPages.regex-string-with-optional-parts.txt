<div class="post-text" itemprop="text">
<p>I am trying to parse some docstrings. </p>
<p>An example docstrings is:</p>
<pre><code>Test if a column field is larger than a given value
    This function can also be called as an operator using the '&gt;' syntax

    Arguments:
        - DbColumn self
        - string or float value: the value to compare to
            in case of string: lexicographic comparison
            in case of float: numeric comparison
    Returns:
        DbWhere object
</code></pre>
<p>Both the <code>Arguments</code> and <code>Returns</code> parts are optional. I want my regex to return as groups the description (first lines), the <code>Arguments</code> part (if present) and the <code>Returns</code> part (if present).</p>
<p>The regex I have now is:</p>
<pre><code>m = re.search('(.*)(Arguments:.*)(Returns:.*)', s, re.DOTALL)
</code></pre>
<p>and works in case all three parts are present but fails as soon as <code>Arguments</code> or the <code>Returns</code>parts are not available. I have tried several variations with the non-greedy modifiers like <code>??</code>but to no avail.</p>
<p><strong>Edit:</strong>  When the <code>Arguments</code> and <code>Returns</code> parts are present, I actually would only like to match the text after <code>Arguments:</code> and <code>Returns:</code> respectively.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Try with:</p>
<pre><code>re.search('^(.*?)(Arguments:.*?)?(Returns:.*)?$', s, re.DOTALL)
</code></pre>
<p>Just making the second and third groups <em>optional</em> by appending a <code>?</code>, and making the qualifiers of the first two groups <em>non-greedy</em> by (again) appending a <code>?</code> on them (yes, confusing).</p>
<p>Also, if you use the non-greedy modifier on the first group of the pattern, it'll match the shortest possible substring, which for <code>.*</code> is the empty string. You can overcome this by adding the end-of-line character (<code>$</code>) at the end of the pattern, which forces the first group to match as few characters as possible to satisfy the pattern, i.e. the whole string when there's no <code>Arguments</code> and no <code>Returns</code> sections, and everything before those sections, when present.</p>
<p><strong>Edit:</strong> OK, if you just want to capture the text <em>after</em> the <code>Arguments:</code> and <code>Returns:</code> tokens, you'll have to tuck in a couple more groups. We're not going to use all of the groups, so naming them —with the <code>&lt;?P&lt;name&gt;</code> notation (<em>another</em> question mark, argh!)— is starting to make sense:</p>
<pre><code>&gt;&gt;&gt; m = re.search('^(?P&lt;description&gt;.*?)(Arguments:(?P&lt;arguments&gt;.*?))?(Returns:(?P&lt;returns&gt;.*))?$', s, re.DOTALL)
&gt;&gt;&gt; m.groupdict()['description']
"Test if a column field is larger than a given value\n    This function can also be called as an operator using the '&gt;' syntax\n\n    "
&gt;&gt;&gt; m.groupdict()['arguments']
'\n        - DbColumn self\n        - string or float value: the value to compare to\n            in case of string: lexicographic comparison\n            in case of float: numeric comparison\n    '
&gt;&gt;&gt; m.groupdict()['returns']
'\n        DbWhere object'
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to match the text after optional <code>Arguments:</code> and <code>Returns:</code> sections, <em>AND</em> you don't want to use <code>(?P&lt;name&gt;...)</code> to name your capture groups, you can also use, <code>(?:...)</code>, the non-capturing version of regular parentheses.</p>
<p>The regex would look like this:</p>
<pre><code>m = re.search('^(.*?)(?:Arguments:(.*?))?(?:Returns:(.*?))?$', doc, re.DOTALL)
#                     ^^                  ^^
</code></pre>
<p>According to the Python3 <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p><code>(?:...)</code></p>
<p>A non-capturing version of regular parentheses. Matches whatever regular expression is inside the parentheses, but the substring matched by the group cannot be retrieved after performing a match or referenced later in the pattern.</p>
</blockquote>
</div>
<span class="comment-copy">Is the order always fixed? I. e., is <code>Arguments</code> always after the standard text and before <code>Returns</code>?</span>
<span class="comment-copy">Yes, the order is always fixed.</span>
<span class="comment-copy">Works like a charm! How would you modify the regex if, for the optional parts, I only want to match the text after <code>Arguments</code> and <code>Returns</code>?</span>
<span class="comment-copy">Something like <code>re.search('^(.*?)(Arguments:(.*?))?(Returns:(.*))?$', doc, re.DOTALL)</code> works, but I don't care for the second and fourth group it returns.</span>
<span class="comment-copy">I've edited my answer. Just name the groups and forget about <code>groups()</code>, use <code>groupdict()</code> instead.</span>
<span class="comment-copy">Perfect! Thanks :-)</span>
