<div class="post-text" itemprop="text">
<p><strong>How to document methods with parameters using Python's documentation strings?</strong></p>
<p><strong>EDIT:</strong>
<a href="http://www.python.org/dev/peps/pep-0257/" rel="noreferrer">PEP 257</a> gives this example:</p>
<pre><code>def complex(real=0.0, imag=0.0):
    """Form a complex number.

    Keyword arguments:
    real -- the real part (default 0.0)
    imag -- the imaginary part (default 0.0)

    """
    if imag == 0.0 and real == 0.0: return complex_zero
    ...
</code></pre>
<p>Is this the convention used by most Python developers ?</p>
<pre><code>Keyword arguments:
&lt;parameter name&gt; -- Definition (default value if any)
</code></pre>
<p>I was expecting something a little bit more formal such as </p>
<pre><code>def complex(real=0.0, imag=0.0):
    """Form a complex number.

    @param: real The real part (default 0.0)
    @param: imag The imaginary part (default 0.0)

    """
    if imag == 0.0 and real == 0.0: return complex_zero
    ...
</code></pre>
<p><strong>Environement</strong>: Python 2.7.1</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on my experience, the <a href="https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt" rel="noreferrer">numpy docstring conventions</a> (PEP257 superset) are the most widely-spread <em>followed</em> conventions that are also supported by tools, such as <a href="http://sphinx.pocoo.org/" rel="noreferrer">Sphinx</a>. </p>
<p>One example:</p>
<pre><code>Parameters
----------
x : type
    Description of parameter `x`.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since docstrings are free-form, it really depends on what you use to parse code to generate API documentation.</p>
<p>I would recommend getting familiar with the <a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#python-signatures" rel="nofollow noreferrer">Sphinx markup</a>, since it is widely used and is becoming the de-facto standard for documenting Python projects, in part because of the excellent <a href="https://readthedocs.org" rel="nofollow noreferrer">readthedocs.org</a> service. To <a href="http://www.sphinx-doc.org/en/stable/domains.html#info-field-lists" rel="nofollow noreferrer">paraphrase an example</a> from the Sphinx documentation as a Python snippet:</p>
<pre><code>def send_message(sender, recipient, message_body, priority=1):
   '''
   Send a message to a recipient

   :param str sender: The person sending the message
   :param str recipient: The recipient of the message
   :param str message_body: The body of the message
   :param priority: The priority of the message, can be a number 1-5
   :type priority: integer or None
   :return: the message id
   :rtype: int
   :raises ValueError: if the message_body exceeds 160 characters
   :raises TypeError: if the message_body is not a basestring
   '''
</code></pre>
<p>This markup supports <a href="http://www.sphinx-doc.org/en/1.4.8/domains.html#cross-referencing-python-objects" rel="nofollow noreferrer">cross-referencing</a> between documents and more. Note that the Sphinx documentation uses (e.g.) <code>:py:attr:</code> whereas you can just use <code>:attr:</code> when documenting from the source code.</p>
<p>Naturally, there are other tools to document APIs. There's the more classic <a href="http://www.doxygen.nl/" rel="nofollow noreferrer">Doxygen</a> which uses <code>\param</code> <a href="http://www.doxygen.nl/manual/commands.html" rel="nofollow noreferrer">commands</a> but those are not specifically designed to document Python code like Sphinx is.</p>
<p>Note that there is a <a href="https://stackoverflow.com/questions/5334531/using-javadoc-for-python-documentation">similar question</a> with a <a href="https://stackoverflow.com/a/5339352/1174784">similar answer</a> in here...</p>
</div>
<div class="post-text" itemprop="text">
<p>Conventions:</p>
<ul>
<li><a href="http://www.python.org/dev/peps/pep-0257/" rel="noreferrer">PEP 257 Docstring Conventions</a></li>
<li><a href="http://www.python.org/dev/peps/pep-0287/" rel="noreferrer">PEP 287 reStructuredText Docstring Format</a></li>
</ul>
<p>Tools:</p>
<ul>
<li><a href="http://epydoc.sourceforge.net/" rel="noreferrer">Epydoc: Automatic API Documentation Generation for Python</a></li>
<li><a href="http://sphinx.pocoo.org/ext/autodoc.html" rel="noreferrer">sphinx.ext.autodoc – Include documentation from docstrings</a></li>
<li><a href="http://www.jetbrains.com/pycharm/webhelp/generating-reference-documentation.html" rel="noreferrer">PyCharm has some nice support for docstrings</a></li>
</ul>
<hr/>
<p>Update: Since Python 3.5 you can use <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer">type hints</a> which is a compact, machine-readable syntax:</p>
<pre><code>from typing import Dict, Union

def foo(i: int, d: Dict[str, Union[str, int]]) -&gt; int:
    """
    Explanation: this function takes two arguments: `i` and `d`.
    `i` is annotated simply as `int`. `d` is a dictionary with `str` keys
    and values that can be either `str` or `int`.

    The return type is `int`.

    """
</code></pre>
<p>The main advantage of this syntax is that it is defined by the language and that it's unambiguous, so tools like PyCharm can easily take advantage from it.</p>
</div>
<div class="post-text" itemprop="text">
<p>python doc strings are <strong>free-form</strong>, you can document it in any way you like.</p>
<p>Examples:</p>
<pre><code>def mymethod(self, foo, bars):
    """
    Does neat stuff!
    Parameters:
      foo - a foo of type FooType to bar with.
      bars - The list of bars
    """
</code></pre>
<p>Now, there are some conventions, but python doesn't enforce any of them. Some projects have their own conventions. Some tools to work with docstrings also follow specific conventions.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you plan to use Sphinx to document your code, it is capable of producing nicely formatted HTML docs for your parameters with their 'signatures' feature.  <a href="http://sphinx-doc.org/domains.html#signatures" rel="noreferrer">http://sphinx-doc.org/domains.html#signatures</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The mainstream is, as other answers here already pointed out, probably going with the <a href="http://www.sphinx-doc.org/en/stable/domains.html#signatures" rel="nofollow noreferrer">Sphinx way</a> so that you can use Sphinx to generate those fancy documents later.</p>
<p>That being said, I personally go with inline comment style occasionally.</p>
<pre><code>def complex(  # Form a complex number
        real=0.0,  # the real part (default 0.0)
        imag=0.0  # the imaginary part (default 0.0)
        ):  # Returns a complex number.
    """Form a complex number.

    I may still use the mainstream docstring notation,
    if I foresee a need to use some other tools
    to generate an HTML online doc later
    """
    if imag == 0.0 and real == 0.0:
        return complex_zero
    other_code()
</code></pre>
<p>One more example here, with some tiny details documented inline:</p>
<pre><code>def foo(  # Note that how I use the parenthesis rather than backslash "\"
          # to natually break the function definition into multiple lines.
        a_very_long_parameter_name,
            # The "inline" text does not really have to be at same line,
            # when your parameter name is very long.
            # Besides, you can use this way to have multiple lines doc too.
            # The one extra level indentation here natually matches the
            # original Python indentation style.
            #
            # This parameter represents blah blah
            # blah blah
            # blah blah
        param_b,  # Some description about parameter B.
            # Some more description about parameter B.
            # As you probably noticed, the vertical alignment of pound sign
            # is less a concern IMHO, as long as your docs are intuitively
            # readable.
        last_param,  # As a side note, you can use an optional comma for
                     # your last parameter, as you can do in multi-line list
                     # or dict declaration.
        ):  # So this ending parenthesis occupying its own line provides a
            # perfect chance to use inline doc to document the return value,
            # despite of its unhappy face appearance. :)
    pass
</code></pre>
<p>The benefits (as @mark-horvath already pointed out in another comment) are:</p>
<ul>
<li>Most importantly, parameters and their doc always stay together, which brings the following benefits:</li>
<li>Less typing (no need to repeat variable name)</li>
<li>Easier maintenance upon changing/removing variable. There will never be some orphan parameter doc paragraph after you rename some parameter.</li>
<li>and easier to find missing comment. </li>
</ul>
<p>Now, some may think this style looks "ugly". But I would say "ugly" is a subjective word. A more neutual way is to say, this style is not mainstream so it may look less familiar to you, thus less comfortable. Again, "comfortable" is also a subjective word. But the point is, all the benefits described above are objective. You can not achieve them if you follow the standard way.</p>
<p>Hopefully some day in the future, there will be a doc generator tool which can also consume such inline style. That will drive the adoption.</p>
<p>PS: This answer is derived from my own preference of using inline comments whenever I see fit. I use the <a href="https://stackoverflow.com/a/13761377/728675">same inline style to document a dictionary</a> too.</p>
</div>
<div class="post-text" itemprop="text">
<p>Docstrings are only useful within interactive environments, e.g. the Python shell. When documenting objects that are not going to be used interactively (e.g. internal objects, framework callbacks), you might as well use regular comments. Here’s a style I use for hanging indented comments off items, each on their own line, so you know that the comment is applying to:</p>
<pre><code>def Recomputate \
  (
    TheRotaryGyrator,
      # the rotary gyrator to operate on
    Computrons,
      # the computrons to perform the recomputation with
    Forthwith,
      # whether to recomputate forthwith or at one's leisure
  ) :
  # recomputates the specified rotary gyrator with
  # the desired computrons.
  ...
#end Recomputate
</code></pre>
<p>You can’t do this sort of thing with docstrings.</p>
</div>
<span class="comment-copy">Have you read PEP 257? <a href="http://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">python.org/dev/peps/pep-0257</a></span>
<span class="comment-copy">There are several 'standards' out there but on a practical approach and especially if you like something formal, I would recommend <a href="http://pythonhosted.org/an_example_pypi_project/sphinx.html" rel="nofollow noreferrer">sphinx</a>. Its integration in <a href="https://www.jetbrains.com/pycharm/" rel="nofollow noreferrer">Pycharm</a> makes generating well structured docstrings rather painless. IMHO</span>
<span class="comment-copy">This is closer to what I expected. Unfortunately, I picked plain PEP 257 and added my own convention (at the cost of loosing autogenerated HTML/PDF documentation).  However, next time, I will pick this solution. Thanks.</span>
<span class="comment-copy">When I attempt processing your suggested docstring, Sphinx complains <code>SEVERE: Unexpected section title</code> — do you know any way to make Sphinx happier about it?</span>
<span class="comment-copy">@BrandonRhodes this links talks about using these conventions with Sphinx: <a href="https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt" rel="nofollow noreferrer">github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt</a></span>
<span class="comment-copy">Actually there is a space missing before <code>Description</code>. I checked the numpy documentation, because I immediately noticed and thought <i>"Wait a second, why is it <b>three</b> spaces? That's odd. Who'd use three spaces?"</i></span>
<span class="comment-copy">This may have been the best answer at the time the question was asked, but I think as of now (late 2017), Sphinx has emerged victorious.</span>
<span class="comment-copy">This is the style used by PyCharm's comment autogeneration by default</span>
<span class="comment-copy">What about the syntax of composite types like lists of stuff?</span>
<span class="comment-copy">then it's a <code>list</code>.</span>
<span class="comment-copy">Although this answer is now the most upvoted, neither of the PEPs above provides a convention to specify the types of arguments of a method.</span>
<span class="comment-copy">+1 for pep287 link</span>
<span class="comment-copy">Oh, this one looks ugly.</span>
<span class="comment-copy">Ugly yes?  Interesting idea... also yes.</span>
<span class="comment-copy">Inline comments for the variables is very sensible, less typing (no need to repeat variable name), easier maintenance upon changing/removing variable... easier to find missing comment. Would combine it with proper docstring below the signature. +1</span>
<span class="comment-copy">That doesn't work as documentation. If you comment your package like this and a PyCharm user downloads it, they won't be able to check what each param does without accessing your documentation - which you won't be able to generate  with any software. Unless you make your own. That's why OP asks for specifying it in docstring. Sorry so late.</span>
<span class="comment-copy">This is just awful.</span>
