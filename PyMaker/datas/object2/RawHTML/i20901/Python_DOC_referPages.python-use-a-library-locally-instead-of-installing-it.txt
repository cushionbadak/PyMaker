<div class="post-text" itemprop="text">
<p><strong>Script:</strong><br/>
I've written a script in python that occasionally sends tweets to twitter<br/>
It only uses one library called: <a href="https://github.com/tweepy/tweepy" rel="noreferrer">tweepy</a><br/>
after installing the library it works, great.  </p>
<p><strong>Problem:</strong><br/>
I would like to host the script on a server where I do not have privileges to install anything<br/>
It would be great if I can just include it locally from the folder I've got it in.<br/>
As of right now, all I need to include at the top of my file is:  </p>
<pre><code>import tweepy
</code></pre>
<p>the <a href="https://github.com/tweepy/tweepy/tree/master/tweepy" rel="noreferrer">tweepy folder</a> (DOES have a <code>__init__.py</code> file which I believe is important.  </p>
<p><strong>Question:</strong><br/>
How can I use this library without installing it?<br/>
basically I want to replace: <code>import tweepy</code> with <code>import local_folder/tweepy/*</code> </p>
<p>this might just be python common sense, but I'm stuck!</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>EDIT:</strong> This answer is outdated. You should be using <a href="https://virtualenv.pypa.io/en/stable/" rel="noreferrer">VirtualEnv</a>. If you are allergic to third-party software for some reason (in which case, why are you installing libraries?), there is something called <a href="https://docs.python.org/3/library/venv.html" rel="noreferrer">venv</a>, that is literally built into python3, so there is no excuse not to use some kind of virtualization. (Most people active in the community prefer VirtualEnv, however. See <a href="https://stackoverflow.com/a/41573588/410889">https://stackoverflow.com/a/41573588/410889</a>.)</p>
<p>VirtualEnv installs a local python interpreter, with a local packages folder and everything. In addition to this entirely solving the issue of administrative privileges, the most important feature of VirtualEnv is that it allows you to keep your environments separate. If you have one project that needs Foo version 2.3 and another that needs Foo version 1.5, you can't have them share the same environment; you have to keep their environments separate with VirtualEnv.</p>
<hr/>
<p>There are a few possibilities:</p>
<p>If you already know how to install Python modules, the default <code>distutils</code> setup already includes a per-user installation option. Just run <code>python setup.py install --user</code> instead of <code>python setup.py install</code>. This is the easiest, since this does not necessitate the addition of any source code.</p>
<p>You could also run the script with the directory of <code>tweepy</code> as the current working directory.</p>
<p>You could add an environment variable named PYTHONPATH to whatever environment (e.g., the shell) you use to run your script, and make it contain the path to <code>tweepy</code>.</p>
<p>If all else fails, and you really do want to edit your source code, you'll need to edit <code>sys.path</code>. <code>sys.path</code> is a list of locations where Python will look for code.</p>
<p>In your code, write:</p>
<pre><code>import sys
sys.path.append("/path/to/your/tweepy/directory")

import tweepy
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you should install a <a href="http://pypi.python.org/pypi/virtualenv">virtual python environment</a> so you don't have to ever worry about having admin privileges, and you can install whatever you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>Also if you want to use it frequently like in script . 
Easy way to export "PYTHONPATH" in bashrc/zshrc file and give path to the directory containing your code .</p>
<p>For example:</p>
<pre><code>export PYTHONPATH=$PYTHONPATH:$HOME/path/to/module
</code></pre>
<p>This way you don't need to do sys.path everytime you restart .</p>
<p>Happy Coding</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple and clean solution:</p>
<pre><code>import sys
sys.path.insert(0, '/absolute/path/to/package')
import some.cool.package

some.cool.package.doCoolStuff()
</code></pre>
<p>answer above with 'append' doesn't work with packages which are installed as well</p>
</div>
<span class="comment-copy">I think all you need is for tweepy folder to be visible in the <code>sys.path</code>, and then you use <code>import tweepy</code> as usual.  The presence of <code>__init__.py</code> file will make the directory appear to be a module, and code inside that file would be run (once) at import time.</span>
<span class="comment-copy">What if you want to force using a local library instead of a default library? Based on module search path, python will not look for local modules if the module is already installed on the system. <a href="https://docs.python.org/2/tutorial/modules.html" rel="nofollow noreferrer">docs.python.org/2/tutorial/modules.html</a></span>
<span class="comment-copy">@JeffTsui Well, by default, the first entry in sys.path is the current directory, so by running from the same directory as your module, it'll always load. You can also perform any arbitrary modifications to sys.path; it's just a list. From the wording of the link, I don't think there's any way to use a local library that has the same name as a built-in module, though.</span>
<span class="comment-copy">@JeffTsui Also, in the couple years of experience I've had since posting this answer, I would say your answer to any path-related issues is that you should be using virtualenv, as one of the other answerers suggested below. VirtualEnv is basically the One True Wayâ„¢ of managing your python environment these days.</span>
<span class="comment-copy">Where do you get the "allergic" from?</span>
<span class="comment-copy">That may not be an option on all builds at all times.  Consider if someone were deploying their libraries to a different platform; would you mandate that they also have this installed?</span>
<span class="comment-copy">+1 Not a complete solution, but a great one for most use cases.</span>
