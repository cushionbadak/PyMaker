<div class="post-text" itemprop="text">
<p>How do I format a floating number to a fixed width with the following requirements:</p>
<ol>
<li>Leading zero if n &lt; 1</li>
<li>Add trailing decimal zero(s) to fill up fixed width</li>
<li>Truncate decimal digits past fixed width</li>
<li>Align all decimal points</li>
</ol>
<p>For example:</p>
<pre><code>% formatter something like '{:06}'
numbers = [23.23, 0.123334987, 1, 4.223, 9887.2]

for number in numbers:
    print formatter.format(number)
</code></pre>
<p>The output would be like</p>
<pre><code>  23.2300
   0.1233
   1.0000
   4.2230
9887.2000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for x in numbers:
    print "{:10.4f}".format(x)
</code></pre>
<p>prints</p>
<pre><code>   23.2300
    0.1233
    1.0000
    4.2230
 9887.2000
</code></pre>
<p>The format specifier inside the curly braces follows the <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="noreferrer">Python format string syntax</a>. Specifically, in this case, it consists of the following parts:</p>
<ul>
<li>The <em>empty string</em> before the colon means "take the next provided argument to <code>format()</code>" â€“ in this case the <code>x</code> as the only argument.</li>
<li>The <code>10.4f</code> part after the colon is the <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="noreferrer">format specification</a>.</li>
<li>The <code>f</code> denotes fixed-point notation.</li>
<li>The <code>10</code> is the total width of the field being printed, lefted-padded by spaces.</li>
<li>The <code>4</code> is the number of digits after the decimal point.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>In python3 the following works:</p>
<pre><code>&gt;&gt;&gt; v=10.4
&gt;&gt;&gt; print('% 6.2f' % v)
  10.40
&gt;&gt;&gt; print('% 12.1f' % v)
        10.4
&gt;&gt;&gt; print('%012.1f' % v)
0000000010.4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It has been a few years since this was answered, but as of Python 3.6 (<a href="https://www.python.org/dev/peps/pep-0498/" rel="noreferrer">PEP498</a>) you could use the new <code>f-strings</code>:</p>
<pre><code>numbers = [23.23, 0.123334987, 1, 4.223, 9887.2]

for number in numbers:
    print(f'{number:9.4f}')
</code></pre>
<p><strong>Prints:</strong></p>
<pre><code>  23.2300
   0.1233
   1.0000
   4.2230
9887.2000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>See Python 3.x <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="noreferrer">format string syntax</a>:</p>
<pre><code>IDLE 3.5.1   
numbers = ['23.23', '.1233', '1', '4.223', '9887.2']

for x in numbers:  
    print('{0: &gt;#016.4f}'. format(float(x)))  

     23.2300
      0.1233
      1.0000
      4.2230
   9887.2000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.</p>
<pre><code>GPA = 2.5
print(" %6.1f " % GPA)
</code></pre>
<p><code>6.1f</code> means after the dots 1 digits show if you print 2 digits after the dots you should only <code>%6.2f</code> such that <code>%6.3f</code> 3 digits print after the point.</p>
</div>
<span class="comment-copy">So I understand that the 4f represents limiting the decimals to 4 (with trailing zeros), but what does the 10 mean? Does that mean this formatting won't work with integers greater than 9999999999 (ten 9's)? Just curious.</span>
<span class="comment-copy"><code>10.4</code> means a width of 10 characters and a precision of 4 decimal places.</span>
<span class="comment-copy">@hobbes3: <code>10</code> is the minimum field width, i.e. the minimum length of the printed string.  Numbers are by default right-aligned and padded with spaces -- see <a href="http://docs.python.org/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">the documentation</a> for more details.</span>
<span class="comment-copy">For Pythons prior to 2.7: <code>("%0.4f" % x).rjust(10)</code></span>
<span class="comment-copy">@StevenRumbalski: Or simply <code>"%10.4f" % x</code>.  In Python 2.6, you can also use <code>"{0:10.4f}".format(x)</code>.</span>
<span class="comment-copy">This works in both Python 2 and 3.</span>
