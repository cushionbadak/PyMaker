<div class="post-text" itemprop="text">
<p>I want to write Python code to send a file from client to server. server needs to save the file sent from the client. But my code have some bugs which I cannot fix. Below is my server code:</p>
<pre><code># server.py
from SimpleXMLRPCServer import SimpleXMLRPCServer
import os

server = SimpleXMLRPCServer(('localhost', 9000))

def save_data(data):
    handle = open("x123.dat", "wb")
    handle.write(data)
    handle.close()

server.register_function(save_data, 'save_data')
server.serve_forever()
</code></pre>
<p>And the client code:</p>
<pre><code># client.py
import sys, xmlrpclib

proxy = xmlrpclib.Server('http://localhost:9000')
handle = open(sys.argv[1], "rb")
proxy.save_data(handle.read())
handle.close()
</code></pre>
<p>But then I run my code, the client returns the following error (this is on Windows):</p>
<pre><code>Traceback (most recent call last):
File "client.py", line 6, in &lt;module&gt; proxy.save_data(handle.read())
File "c:\python27\lib\xmlrpclib.py", line 1224, in __call__
  return self.__send(self.__name, args)
File "c:\python27\lib\xmlrpclib.py", line 1575, in __request
  verbose=self.__verbose
File "c:\python27\lib\xmlrpclib.py", line 1264, in request
  return self.single_request(host, handler, request_body, verbose)
File "c:\python27\lib\xmlrpclib.py", line 1297, in single_request
  return self.parse_response(response)
File "c:\python27\lib\xmlrpclib.py", line 1473, in parse_response
  return u.close()
File "c:\python27\lib\xmlrpclib.py", line 793, in close
  raise Fault(**self._stack[0])
xmlrpclib.Fault: &lt;Fault 1: "&lt;class 'xml.parsers.expat.ExpatError'&gt;:not well-formed (invalid token): line 7, column 1"&gt;
</code></pre>
<p>I have some questions:</p>
<ol>
<li><p>How to fix the above bug?</p></li>
<li><p>My code needs to transfer some big files sometimes. Since my method is so simple, I doubt that it is efficient for moving big data. Could anybody please suggest a better method to move big files? (Of course it is better to use XMLRPC on Python)</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><strong>Server side:</strong></p>
<pre><code>def server_receive_file(self,arg):
        with open("path/to/save/filename", "wb") as handle:
            handle.write(arg.data)
            return True
</code></pre>
<p><strong>Client side:</strong></p>
<pre><code>with open("path/to/filename", "rb") as handle:
    binary_data = xmlrpclib.Binary(handle.read())
client.server_receive_file(binary_data)
</code></pre>
<p>This worked for me.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to look into the xmlrpclib <a href="https://docs.python.org/3/library/xmlrpc.client.html#binary-objects" rel="nofollow noreferrer">Binary object</a>. With this class you can encode and decode to/from a base64 string.</p>
</div>
<div class="post-text" itemprop="text">
<h3>Here is how you do it:</h3>
<pre><code>#!/usr/bin/env python3.7

# rpc_server.py

# Fix missing module issue: ModuleNotFoundError: No module named 'SimpleXMLRPCServer'
#from SimpleXMLRPCServer import SimpleXMLRPCServer
from xmlrpc.server import SimpleXMLRPCServer

import os

# Put in your server IP here
IP='10.198.16.73'
PORT=64001

server = SimpleXMLRPCServer((IP, PORT))

def server_receive_file(arg, filename):
    curDir = os.path.dirname(os.path.realpath(__file__))
    output_file_path = curDir + '/' + filename
    print('output_file_path -&gt; ({})'.format(output_file_path))
    with open(output_file_path, "wb") as handle:
        handle.write(arg.data)
        print('Output file: {}'.format(output_file_path))
        return True

server.register_function(server_receive_file, 'server_receive_file')
print('Control-c to quit')
server.serve_forever()

### rpc_client.py
#!/usr/bin/env python3.7

import os


# client.py
import sys

# The answer is that the module xmlrpc is part of python3

import xmlrpc.client

#Put your server IP here
IP='10.198.16.73'
PORT=64001


url = 'http://{}:{}'.format(IP, PORT)
###server_proxy = xmlrpclib.Server(url)
client_server_proxy = xmlrpc.client.ServerProxy(url)

curDir = os.path.dirname(os.path.realpath(__file__))
filename = sys.argv[1]
fpn = curDir + '/' + filename
print(' filename -&gt; ({})'.format(filename))
print(' fpn -&gt; ({})'.format(fpn))
if not os.path.exists(fpn):
    print('Missing file -&gt; ({})'.format(fpn))
    sys.exit(1)

with open(fpn, "rb") as handle:
    binary_data = xmlrpc.client.Binary(handle.read())
    client_server_proxy.server_receive_file(binary_data, filename)
</code></pre>
</div>
