<div class="post-text" itemprop="text">
<p>I have a Pandas Dataframe of 1's and 0's converted to an array :
[0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]</p>
<p>I'm using the following function to amend the array:</p>
<pre><code>def regressor(x, param):
    new_array = x
    for i in range(len(new_array)):

        length = len(new_array)
        current = new_array[(length-i)-1]
        previous = new_array[(length-i)-2]

        if current != 0:
            if previous == 0:
                new_array[(length-i)-2] = current*param

    return new_array
</code></pre>
<p>However, my array is still unchanged. new_array[(length-i)-2] does not seem to actually amend that element of the array.</p>
<p>Could someone tell me what I'm missing?
Thanks</p>
<p>UPDATE: My problem was solved by converting the DataFrame to a pandas.Series and then converting this to a list within the function.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I run your code I get this (for param=2):</p>
<pre><code>x = [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]

def regressor(x, param):
    new_array = x
    for i in range(len(new_array)):

        length = len(new_array)
        current = new_array[(length-i)-1]
        previous = new_array[(length-i)-2]

        if current != 0:
            if previous == 0:
                new_array[(length-i)-2] = current * param

    return new_array

new_array = regressor(x, 2)
print(new_array)
# Output:
# [8, 4, 2, 1, 2097152, 1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]
</code></pre>
<p>Why do you not see changes in your <code>new_array</code>? Do you actually call the regressor function to update your array?
Also, copying <code>x</code> to <code>new_array</code> at the beginning of the function is redundant.</p>
<p>Just re-posting your function with some edits for better readability:</p>
<pre><code>def regressor(arr, param):
    for i in range(len(arr)):

        length = len(arr)
        current = arr[(length-i)-1]
        previous = arr[(length-i)-2]

        if (current != 0) and (previous == 0):
                arr[(length-i)-2] = current * param

    return arr
</code></pre>
</div>
<span class="comment-copy">Maybe your "param" is 0? i've tested your code, the list does change for param != 0. If you print(new_array) inside the function you can see that. Or maybe you are doing something wrong outside the function</span>
<span class="comment-copy">No, it works fine for a normal python array, but remains unchanged when using a Numpy array</span>
<span class="comment-copy">You have to show us the code where the function is called. What is the numpy array? is it x? why would you need new_array = x? Inside the function there is nothing straight up wrong, probably the problem is where you call it.</span>
<span class="comment-copy">new_array = regressor(current_array, 0.9)  I just named it new_array in the function for my own readability</span>
<span class="comment-copy">There is really nothing wrong with that. If you do new_array = regressor(current_array, 0.9) and print(new_array) it will give you the changed array, doesn't matter if it is numpy.array or not. How are you defining the variables new_array and current_array?</span>
<span class="comment-copy">Yes this works for a list or normal python array, but it is unchanged when using a Numpy array</span>
<span class="comment-copy">It's the same also with a numpy array: For <code>x = np.array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])</code>  it returns  <code>array([      8,       4,       2,       1, 2097152, 1048576,  524288,         262144,  131072,   65536,   32768,   16384,    8192,    4096,           2048,    1024,     512,     256,     128,      64,      32,             16,       8,       4,       2,       1])</code></span>
<span class="comment-copy">I wonder if the copy of <code>x</code> to <code>new_array</code> at the beginning was a failed attempt to preserve the input array <code>x</code> instead of modifying it in place.  Otherwise you don't even really need to return it.   I almost bet that @Ferrari_M is saying the array is unchanged because <code>new_arr</code> == <code>x</code> ... which is true because they are the same object that is getting modified in place.</span>
<span class="comment-copy">I'm converting a Pandas dataframe to a Numpy array first and then applying the function to it. The array comes back unchanged.  If I create a regular array and apply the function, it works fine. Could this be a DataFrame conversion issue?</span>
<span class="comment-copy">UPDATE: My problem was solved by converting the DataFrame to a pandas.Series and then converting this to a list within the function.</span>
