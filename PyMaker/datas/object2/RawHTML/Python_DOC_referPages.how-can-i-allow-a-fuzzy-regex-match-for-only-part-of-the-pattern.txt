<div class="post-text" itemprop="text">
<p>I have a <code>pattern_string = 'ATAG/GAGAAGATGATG/TATA'</code> and a <code>query_string = 'ATAG/AGCAAGATGATG/TATA'</code>. This works for the following regex match:</p>
<pre><code>r = regex.compile('(%s){e&lt;=2}' % pattern_string)

r.match(query_string)
</code></pre>
<p>Here, the only change is between the two <code>/</code> characters. However, I want to restrict the fuzziness of the match to only be allowed between these characters, while the characters outside of the <code>/</code> bounds remain an exact match.</p>
<p>For example, <code>pattern_string = 'ATGG/GAGAAGATGATG/TATA'</code> and <code>query_string = 'ATAG/AGCAAGATGATG/TATA'</code> is <em>not</em> a match, because the first part of the string (<code>ATGG</code> vs <code>ATAG</code>) does not match. Similarly, <code>pattern_string = 'ATAG/GAGAAGATGATG/TATG'</code> and <code>query_string = 'ATAG/AGCAAGATGATG/TATA'</code> is also not a match, because the last part of the string (<code>TATG</code> vs <code>TATA</code>) does not match.</p>
<p>In summary, the portion of the string within the <code>/</code> (or any delimiter character) should be allowed a fuzzy match according to what is specified to the regex (<code>{e&lt;=2}</code> in this case), but the string outside must be an exact match.</p>
<p>How can this be achieved?</p>
<p>I am imagining a function like the following</p>
<pre><code>ideal_function(pattern_string, query_string)
</code></pre>
<p>Where </p>
<p><code>ideal_function(pattern_string = 'ATAG/GAGAAGATGATG/TATA', query_string = 'ATAG/AGCAAGATGATG/TATA')</code> returns <code>True</code>
<code>ideal_function(pattern_string = 'ATGG/GAGAAGATGATG/TATA', query_string = 'ATAG/AGCAAGATGATG/TATA')</code> returns <code>False</code></p>
<p>The most efficient method for this would be appreciated, I have to do this on over 20,000 pattern strings with a combination of over 5 million query strings, so it needs to be as efficient as possible. It does not necessarily have to be a regex solution, though it must support the option of allowing for fuzzy match for both substitution count (as in <code>{s&lt;=2}</code>) and error count (as in <code>{e&lt;=2}</code>) specified. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can limit fuzziness to the section of the pattern between slashes using the following implementation of your desired <code>ideal_function()</code>:</p>
<pre><code>def ideal_function(pattern_string, query_string, fuzzy='e&lt;=2'):
    prefix, body, suffix = pattern_string.split('/')
    r = regex.compile('%s/(%s){%s}/%s' % (prefix, body, fuzzy, suffix))
    return r.match(query_string) is not None
</code></pre>
<p>Here it is in action:</p>
<pre><code>&gt;&gt;&gt; ideal_function('ATAG/GAGAAGATGATG/TATA', 'ATAG/AGCAAGATGATG/TATA')
True
</code></pre>
<p></p>
<pre><code>&gt;&gt;&gt; ideal_function('ATGG/GAGAAGATGATG/TATA', 'ATAG/AGCAAGATGATG/TATA')
False
</code></pre>
<p></p>
<pre><code>&gt;&gt;&gt; ideal_function('ATAG/GAGAAGATGATG/TATA', 'ATAG/AGCAAGATGATG/TATA', 'e&lt;=1')
False
</code></pre>
<p></p>
<pre><code>&gt;&gt;&gt; ideal_function('ATAG/GAGAAGATGATG/TATA', 'ATAG/AGCAAGATGATG/TATA', 'e&lt;=2')
True
</code></pre>
<p></p>
<pre><code>&gt;&gt;&gt; ideal_function('ATAG/GAGAAGATGATG/TATA', 'ATAG/AGCAAGATGATG/TATA', 's&lt;=2')
False
</code></pre>
<p></p>
<pre><code>&gt;&gt;&gt; ideal_function('ATAG/GAGAAGATGATG/TATA', 'ATAG/AGCAAGATGATG/TATA', 's&lt;=3')
True
</code></pre>
<p>This relies on your always having exactly three slash-delimited sections in the pattern, but since anything more generalised would also require specifying which sections are fuzzy and which are non-fuzzy somehow, I assume this straightforward approach fits your use case.</p>
<p>Any version of <code>ideal_function()</code> which has to create the appropriate regular expression every time it's called probably isn't going to be the most efficient approach, by the way (although you'd have to do some profiling to establish how much difference it actually makes in your particular case).</p>
<p>Depending on the kind of output you need, something like this <em>might</em> make more sense:</p>
<pre><code>def ideal_generator(pattern_string, all_query_strings, fuzzy='e&lt;=2'):
    prefix, body, suffix = pattern_string.split('/')
    r = regex.compile('%s/(%s){%s}/%s' % (prefix, body, fuzzy, suffix))
    for query_string in all_query_strings:
        if r.match(query_string) is not None:
            yield query_string
</code></pre>
<p>â€¦ which would yield all query strings matching <code>pattern_string</code>.</p>
</div>
<span class="comment-copy">Will there always be only two slashes in the query string? Can there be one? No slashes at all?</span>
