<div class="post-text" itemprop="text">
<p>I defined these global variables:</p>
<pre><code>value1 = ""
value = ""
</code></pre>
<p>Both variables are being used in two different functions:</p>
<pre><code>def function1():
  ...
  value1 = widget.get(selection1[0])

def function2():
  ...
  value = widget.get(selection0[0])
</code></pre>
<p>However when i try to use these variables in a third function:</p>
<pre><code>def function1():
  if value1 != "":
    if value != "":
      print(value1 + " | " + value
  else:
      print("Bar")
</code></pre>
<p>I only get a <code>|</code> instead of the variables, which should be filled instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>As jasonharper's comment mentions, you need to use the <code>global</code> keyword to reference the global variable, otherwise you make a new scoped variable.</p>
<h2>Without global:</h2>
<pre><code>x = 3

def setToFour():
    x = 4
    print(x)

print(x)
setToFour()
print(x)
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt; 3
&gt;&gt; 4
&gt;&gt; 3
</code></pre>
<p>The function makes its own <code>x</code>, sets it to 4, and prints it. The global <code>x</code> is left unchanged.</p>
<h2>With global:</h2>
<pre><code>x = 3

def setToFour():
    global x
    x = 4
    print(x)

print(x)
setToFour()
print(x)
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt; 3
&gt;&gt; 4
&gt;&gt; 4
</code></pre>
<p>The function is told to use the global <code>x</code> rather than making its own <code>x</code>, sets it to 4, then prints it. The global <code>x</code> was directly modified, and maintains its new value.</p>
</div>
<div class="post-text" itemprop="text">
<p>premising that I believe you are using tkinter, you don't need any global assignment.</p>
<p>You need a object oriented approach and the right tool, such as as StringVar(), or IntVar() depends on nature of your variable.</p>
<p>see below, def callback(self), is your function1</p>
<pre><code>import tkinter as tk

class App(tk.Frame):

    def __init__(self,):

        super().__init__()

        self.master.title("Hello World")

        self.value = tk.StringVar()
        self.value1 = tk.StringVar()

        self.init_ui()

    def init_ui(self):

        self.pack(fill=tk.BOTH, expand=1,)

        f = tk.Frame()

        tk.Label(f, text = "Value").pack()
        tk.Entry(f, bg='white', textvariable=self.value).pack()

        tk.Label(f, text = "Value1").pack()
        tk.Entry(f, bg='white', textvariable=self.value1).pack()

        w = tk.Frame()

        tk.Button(w, text="Print", command=self.callback).pack()
        tk.Button(w, text="Reset", command=self.on_reset).pack()
        tk.Button(w, text="Close", command=self.on_close).pack()

        f.pack(side=tk.LEFT, fill=tk.BOTH, expand=0)
        w.pack(side=tk.RIGHT, fill=tk.BOTH, expand=0)


    def callback(self):

        if self.value1.get():
            if self.value.get():
                print(self.value1.get() + " | " + self.value.get())
        else:
            print("Foo")

    def on_reset(self):
        self.value1.set('')
        self.value.set('')

    def on_close(self):
        self.master.destroy()

if __name__ == '__main__':
app = App()
app.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With assignment operator the variable is created locally in python function.
One need to declare a variable global explicitly.
eg.</p>
<pre><code>value1 = "Hello"
value = "World"
def function1():
    global value1
    global value
    print(value1, value1)
</code></pre>
</div>
<span class="comment-copy">If a function contains an assignment to a variable, that variable is local by default.  You need an explicit <code>global</code> statement in the function to change that.</span>
<span class="comment-copy"><code>def function1(): global value1; global value</code></span>
<span class="comment-copy">note: you don't need to use global if all you're doing is reading the value of a variable. global is only needed when modifying a global variable. The use of <code>global</code> in your example is unnecessary.</span>
