<div class="post-text" itemprop="text">
<p>I would like to ask for your help on renaming multiple files with date. I have netcdf files "wrfoutput_d01_2016-08-01_00:00:00" until "wrfoutput_d01_2016-08-31_00:00:00" which windows do not read since output is from Linux. I wanted to change the file name to "wrfoutput_d01_2016-08-01_00" until "wrfoutput_d01_2016-08-31_00". How do I do that using python?</p>
<p>Edit:</p>
<p>The containing folder has two set of files. One for domain 1 as denoted by d01, wrfoutput_<strong>d01</strong>_2016-08-31_00:00:00, and the other set is denoted by d02, wrfoutput_<strong>d02</strong>_2016-08-31_00:00:00. Total files for d01 is 744 since time step output is hourly same as with d02. </p>
<p>I wanted to rename for each day on an hourly basis. Say, wrfoutput_d01_2016-08-01_00:00:00, wrfoutput_d01_2016-08-01_01:00:00,... to wrfoutput_d01_2016-08-01_00, wrfoutput_d01_2016-08-01_01,...</p>
<p>I saw a code which allows me to access the specific file, e.g. d01 or d02. </p>
<pre><code>import os
from netCDF4 import Dataset
from wrf import getvar

filedir = "/home/gil/WRF/Output/August/"
wrfin = [Dataset(f) for f in os.listdir(filedir)
        if f.startswith("wrfout_d02_")]
</code></pre>
<p>After this code I get stuck. </p>
</div>
<div class="post-text" itemprop="text">
<p>First get the filenames, giving the folder path (<code>'/home/user/myfolder...'</code>), then rename them.</p>
<pre><code>import os
import re
filenames = os.listdir(folder_path)

for fn in filenames:
    os.rename(fn, re.sub(':','-',fn))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The other answer converts the colons to hyphens. If you wish to truncate the time from the file name, you can use this. </p>
<p>This assumes the files are in the same directory as the python script. If not, change '.' to 'path/to/dir/'. It also only looks at files that have the name format 'wrfoutput...' when it renames them.</p>
<pre><code>from os import listdir, rename
from os.path import isfile, join

only_files = [f for f in listdir('.') if isfile(join('.', f))]

for f in only_files:
    # Get the relevant files
    if 'wrfoutput' in f:
        # Remove _HH:MM:SS from end of file name
        rename(f, f[:-9])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Open the Terminal</p>
<p>cd into your directory (<code>cd /home/myfolder</code>)</p>
<p>Start python (<code>python</code>)</p>
<p>Now, a simple rename.</p>
<pre><code>import os
AllFiles=os.listdir('.')
for eachfile in AllFiles:
    os.rename(eachfile,eachfile.replace(':','_'))
</code></pre>
</div>
<span class="comment-copy">Why do you think that renaming the file will help with reading it?</span>
<span class="comment-copy">The colon makes invalid filenames in windows, and it would normally strip those out when transferring, so he's replacing them with underscores.</span>
<span class="comment-copy">Could you, please clarify a couple of questions here.  # Are there other files/folders in that directory that we need to exclude from renaming? # What is the logic behind keeping '00', but not '00_00_00'. Wouldn't removing it entirely or keeping everything a better approach? # Do you need to only rename files in the given date range? I posted an answer, but it will change based on your answers to these questions.</span>
<span class="comment-copy">Hi. Sorry if the question is confusing. The first two zeros indicate hours only as my files do not include minutes and seconds. for a given day there are 24 hours or 24 files say wrfoutput_d01_2016-08-01_00 until wrfoutput_d01_2016-08-01_23. I wanted to rename each day in the same way until day 31 and yes there are other files in the folder. One set of wrfoutput_d01_2016-08-01 until wrfoutput_d01_2016-08-31 and wrfoutput_d02_2016-08-01 until wrfoutput_d02_2016-08-31.</span>
<span class="comment-copy">the poster wanted underscores, not hyphens to replace colons. You also don't need 're' module here. A simple replace would do. I also don't think os.rename would work if you don't give the full path. Best way would be to first change to the directory, and execute the os.rename there.</span>
<span class="comment-copy">yes you are right I didn't read well the question. Actually not even a replace, it's enough to cut the string. However, this is what I would do, the fact thate you don't need <code>re</code> doesn't mean it's bad using it, there is always the possibility that the poster or someone else will like this approach more, as I do, and will look into <code>re.sub()</code> to learn something new.</span>
