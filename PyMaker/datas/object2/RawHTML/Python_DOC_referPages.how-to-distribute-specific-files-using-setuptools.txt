<div class="post-text" itemprop="text">
<p>I would to like to distribute a python package using my setup.py, where the user is able to choose which modules will be installed.</p>
<p>In my case, I have the test module, where It's useful in only few cases, so it doesn't make sense distribute that module.</p>
<p>I can exclude the module easily by  <code>packages=find_packages(exclude=("conans.test*",))</code>. However, I can't distribute it dynamically.</p>
<p>My idea is, package all files, but only install according the pip command. I would like to install the test module, only when the extra is configured:</p>
<pre><code>pip install package[test]
</code></pre>
<p>Otherwise, it will not install the test module.</p>
<p>When I say test module, it means a folder with all those tests, not the requirements_test.txt file.</p>
<p>Is it possible using setuptools?</p>
<p>Regards!</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to <a href="https://stackoverflow.com/users/2650249/hoefling">hoefling</a>!</p>
<p>Since it's possible create a dynamic package, the best that I found is run a script after install the package:</p>
<p><a href="https://github.com/uilianries/conan-ldap-authentication/blob/master/setup.py#L40" rel="nofollow noreferrer">https://github.com/uilianries/conan-ldap-authentication/blob/master/setup.py#L40</a> </p>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/3779915/why-does-python-setup-py-sdist-create-unwanted-project-egg-info-in-project-r">solution</a> follow this solution , by jathanism , create a class which do the thing you want and for that taskk create a cli argument in cmdclass</span>
<span class="comment-copy">A package is atomic and can't be reduced any further. Split your project into two dists, <code>conans</code> and <code>conans_tests</code> (optionally with <code>conans</code> being a namespace package). Extras are for reducing only the set of dependencies, not the codebase to install.</span>
