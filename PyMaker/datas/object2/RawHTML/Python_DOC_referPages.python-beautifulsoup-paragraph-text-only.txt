<div class="post-text" itemprop="text">
<p>I am very new to anything webscraping related and as I understand Requests and BeautifulSoup are the way to go in that. 
I want to write a program which emails me only one paragraph of a given link every couple of hours (trying a new way to read blogs through the day)
Say this particular link '<a href="https://fs.blog/mental-models/" rel="nofollow noreferrer">https://fs.blog/mental-models/</a>' has a a paragraph each on different models. </p>
<pre><code>from bs4 import BeautifulSoup
import re
import requests


url = 'https://fs.blog/mental-models/'

r = requests.get(url)
soup = BeautifulSoup(r.content, 'html.parser')
</code></pre>
<p>now soup has a wall of bits before the paragraph text begins: <code>&lt;p&gt; this is what I want to read &lt;/p&gt;</code></p>
<p><code>soup.title.string</code> working perfectly fine, but I don't know how to move ahead from here pls.. any directions?</p>
<p>thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Loop over the <code>soup.findAll('p')</code> to find all the <code>p</code> tags and then use <code>.text</code> to get their text:</p>
<p>Furthermore, do all that under a <code>div</code> with the class <code>rte</code> since you don't want the footer paragraphs.</p>
<pre><code>from bs4 import BeautifulSoup
import requests

url = 'https://fs.blog/mental-models/'    
r = requests.get(url)
soup = BeautifulSoup(r.content, 'html.parser')

divTag = soup.find_all("div", {"class": "rte"})    
for tag in divTag:
    pTags = tag.find_all('p')
    for tag in pTags[:-2]:  # to trim the last two irrelevant looking lines
        print(tag.text)
</code></pre>
<p><strong>OUTPUT</strong>:</p>
<pre><code>Mental models are how we understand the world. Not only do they shape what we think and how we understand but they shape the connections and opportunities that we see.
.
.
.
5. Mutually Assured Destruction
Somewhat paradoxically, the stronger two opponents become, the less likely they may be to destroy one another. This process of mutually assured destruction occurs not just in warfare, as with the development of global nuclear warheads, but also in business, as with the avoidance of destructive price wars between competitors. However, in a fat-tailed world, it is also possible that mutually assured destruction scenarios simply make destruction more severe in the event of a mistake (pushing destruction into the “tails” of the distribution).
</code></pre>
<p> </p>
</div>
<div class="post-text" itemprop="text">
<p>If you want the text of all the <code>p</code> tag, you can just loop on them using the <code>find_all</code> method:</p>
<pre><code>from bs4 import BeautifulSoup
import re
import requests


url = 'https://fs.blog/mental-models/'

r = requests.get(url)
soup = BeautifulSoup(r.content, 'html.parser')
print(soup)

data = soup.find_all('p')
for p in data:
    text = p.get_text()
    print(text)
</code></pre>
<p><strong>EDIT:</strong></p>
<p>Here is the code in order to have them separatly in a list. You can them apply a loop on the result list to remove empty string, unused characters like<code>\n</code> etc...</p>
<pre><code>from bs4 import BeautifulSoup
import re
import requests


url = 'https://fs.blog/mental-models/'

r = requests.get(url)
soup = BeautifulSoup(r.content, 'html.parser')

data = soup.find_all('p')
result = []
for p in data:
    result.append(p.get_text())

print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is the solution:</p>
<pre><code>from bs4 import BeautifulSoup
import requests
import Clock

url = 'https://fs.blog/mental-models/'  
r = requests.get(url)
soup = BeautifulSoup(r.content, 'html.parser')
data = soup.find_all('p')

result = []

for p in data:
    result.append(p.get_text())

Clock.schedule_interval(print(result), 60)
</code></pre>
</div>
<span class="comment-copy">if I could just have a list of paragraphs as output, then I can loop through it and read each paragraph (this paragraph could well be the next sub-heading too)</span>
<span class="comment-copy">All the paragraphs from that page?</span>
<span class="comment-copy">Have you looked at the <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" rel="nofollow noreferrer">documentation</a>? It's very good and thorough - and it shouldn't take much searching in there to find what you need.</span>
<span class="comment-copy">@DirtyBit Indeed, just for a given link (it will always be blogs)</span>
<span class="comment-copy">@spiff, see if the answer posted below helps?</span>
<span class="comment-copy">Nice answer clean and elegant</span>
<span class="comment-copy">this is beautiful - thanks vm! Just to close this out - if I only want to see one paragraph - so say I put each paragraph/ subheading in a list? so I can call only one of them at a time?</span>
<span class="comment-copy">@spiff Indeed, depends on how you want it. you could put a check with <code>\n</code> new line to get separated paragraphs.</span>
<span class="comment-copy">sweet - so am just appending pTags[n].text to a list and that will be used to separate each line.. thanks again!</span>
<span class="comment-copy">hey @Maaz thanks vm! this works too, just need to get rid of the tags right?</span>
<span class="comment-copy">Here you have only the text, not the tag, you can put the text in a list if you want to get them separatly. See my edit</span>
<span class="comment-copy">yup! thats what I will do - thank you very much!</span>
<span class="comment-copy">ah - thank you so much @elvis ... didnt know about clock.. now trying to connect python to my email. my actual plan was to instead make a Telegram bot, which would send me these paragraphs.. but will start with email for now.. thanks again!</span>
