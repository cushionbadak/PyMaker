<div class="post-text" itemprop="text">
<p>I have a function:</p>
<pre><code>def f(a):
    return 100 in a
</code></pre>
<p>I want to annotate the argument <code>a</code>, for example</p>
<pre><code>from typing import List
def f(a: List[int]):
    return 100 in a
</code></pre>
<p>But types which support <code>in</code> operator is not only <code>list</code> but also <code>set</code> or <code>tuple</code> (or maybe <code>dict</code> or <code>keyview</code> or something).</p>
<p>My question is:</p>
<p>What type is the best for <code>a</code>, which support <code>in</code> operator?<br/>
As in, which is the <em>simplest</em> type which provides this particular functionality?</p>
<p>It seems that <code>typing.Container</code> or <code>typing.Collection</code> is ok, but I have no idea about which type is the <em>best</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would choose <code>Union[Container, Iterable]</code>. The python documentation for membership testing<a href="https://docs.python.org/3/reference/expressions.html#membership-test-operations" rel="nofollow noreferrer">1</a> states that it first tries <code>__contains__</code> then it tries <code>__iter__</code> to determine membership. It also states that it tries <code>__getitem__</code> failing both but only for old style iteration. To be honest I'm not sure what that means but I think we're safe here to ignore it.</p>
<p>Your arguments should be as generic as possible. If you chose <code>Collection</code> that would prohibit generators since they don't implement <code>len</code> for example, yet generators support the <code>in</code> keyword.</p>
<p><a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Container" rel="nofollow noreferrer">https://docs.python.org/3/library/collections.abc.html#collections.abc.Container</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You should use the generic <a href="https://docs.python.org/3/library/typing.html#typing.Container" rel="nofollow noreferrer"><code>typing.Container</code></a> class, i.e. <code>typing.Container[int]</code>.</p>
<p>This corresponds to <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Container" rel="nofollow noreferrer"><code>collections.abc.Container</code></a>, for which the documentation is:</p>
<blockquote>
<p><strong>class collections.abc.Container</strong></p>
<p>ABCs for classes that provide respectively the methods <code>__contains__()</code> [...]</p>
</blockquote>
</div>
<span class="comment-copy">You may want <a href="https://docs.python.org/3/library/typing.html#typing.Iterable" rel="nofollow noreferrer"><code>typing.Iterable</code></a>.</span>
<span class="comment-copy">If one type was universally and objectively the best, why would the others exist? Voting to close as opinion-based and/or too broad.</span>
<span class="comment-copy">@tripleee My question is: what is necessary and sufficient type which supports <code>in</code> operator. I used the term "best" as "necessary and sufficient".</span>
<span class="comment-copy">I have updated your question with my best understanding of what you are trying to ask, and retracted my close vote. This might still not be clear enough, or exactly what you want; please review and if necessary <a href="https://stackoverflow.com/posts/48899062/edit">edit</a> some more.</span>
