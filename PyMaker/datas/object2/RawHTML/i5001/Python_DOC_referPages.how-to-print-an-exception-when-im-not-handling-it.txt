<div class="post-text" itemprop="text">
<p>I have the following code:</p>
<pre><code># exc is a local variable of type Exception
# This is not inside an except block
if isinstance(exc, ClientError):
    logging.debug("ClientError raised while loading %s:\n%s", package.id, traceback.format_exc())
    continue
</code></pre>
<p>When this code is run and <code>exc</code> is of type <code>ClientError</code>, <code>format_exc()</code> just prints out <code>NoneType: None</code> because no exception is currently being handled (the code is not inside an <code>except</code> block). Luckily there appears to be the <code>format_exception</code> method on <code>traceback</code> that isn't coupled to whatever the current exception being handled is, but in order to call it I need to extract the type, values, and tb from my exception variable. How do I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>How is <code>exc</code> being produced? If it is being returned from some function without the corresponding stack then it is not possible to produce the correct frames anyway.  On top of that, it is not possible to generate a <code>Traceback</code> object without <a href="https://stackoverflow.com/questions/27138440/how-to-create-a-traceback-object">going deep into <code>ctypes</code></a>, so this is likely not what is desired.</p>
<p>If what you are after is actually the stack at where the exception was logged, making use of <a href="https://docs.python.org/3/library/inspect.html#inspect.currentframe" rel="nofollow noreferrer"><code>inspect.currentframe</code></a> and <a href="https://docs.python.org/3.6/library/traceback.html#traceback.format_stack" rel="nofollow noreferrer"><code>traceback.format_stack</code></a> may produce what you might be after.  However, as mentioned, you will need to get the frames as close to where the error occurred.  Consider this example:</p>
<pre><code>import traceback
import inspect
import logging


class Client:
    pass


class ClientError(Exception):
    pass


def get_client(name):
    if name is None:
        return ClientError('client must have a name')
    return Client()


def connect(target, name=None):
    exc = get_client(name)
    if isinstance(exc, ClientError):
        frames = inspect.currentframe()
        logging.debug("ClientError raised while loading %s:\n%s",
            target, ''.join(traceback.format_stack(frames)))


def main():
    connect('somewhere')


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)
    main()
</code></pre>
<p>Executing this will produce the following output:</p>
<pre><code>DEBUG:root:ClientError raised while loading somewhere:
  File "foo.py", line 34, in &lt;module&gt;
    main()
  File "foo.py", line 30, in main
    connect('somewhere')
  File "foo.py", line 26, in connect
    target, ''.join(traceback.format_stack(frames)))
</code></pre>
<p>Note that the stack ends exactly where the call is done, as the return value of the <code>current_frame</code> is bounded to <code>frames</code>.  This is why the stack should be generated and formatted at where it was produced, and step back one level.  Consider these updated functions:</p>
<pre><code>def get_client(name):
    if name is None:
        return (
            ClientError('client must have a name'),
            traceback.format_stack(inspect.currentframe().f_back),
        )
    return Client(), None


def connect(target, name=None):
    exc, frames = get_client(name)
    if isinstance(exc, ClientError):
        stack = ''.join(frames)
        logging.debug("ClientError raised while loading %s:\n%s",
            target, stack)
</code></pre>
<p>Execution</p>
<pre><code>$ python foo.py 
DEBUG:root:ClientError raised while loading somewhere:
  File "foo.py", line 37, in &lt;module&gt;
    main()
  File "foo.py", line 33, in main
    connect('somewhere')
  File "foo.py", line 25, in connect
    exc, frames = get_client(name)
</code></pre>
<p>Note how the trace ends at the function that produced the exception.</p>
</div>
<span class="comment-copy">Is <code>exc</code> an instance of an exception class, or just a class? If the latter, then <code>isinstance</code> won't work.</span>
<span class="comment-copy"><code>exc</code> is an instance of an exception class.</span>
