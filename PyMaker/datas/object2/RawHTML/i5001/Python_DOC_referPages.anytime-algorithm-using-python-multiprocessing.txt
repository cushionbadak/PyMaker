<div class="post-text" itemprop="text">
<p>I want to write in Python a class that can run a certain algorithm for a given period of time, then stop and return the most uptodate value it found until the timeout.</p>
<p>As an example, I wrote a simple class for finding finds a maximum in a vector:</p>
<pre><code>import time, multiprocessing

class AnytimeAlgorithm:
    def __init__(self, vector):
        self.vector = vector
        self.result = 0

    def update_forever(self):
        while True:
            i = random.randint(0, len(self.vector) - 1)
            if self.vector[i] &gt; self.result:
                self.result = self.vector[i]
                print("self", self, "result", self.result)

    def result_after(self, seconds):
        p = multiprocessing.Process(target=self.update_forever, name="update_forever", args=())
        p.start()
        p.join(seconds)
        if p.is_alive():
            p.terminate()
        p.join()
        print("self", self, "final result", self.result)
        return self.result


if __name__ == "__main__":
    import random, numpy as np
    vector = np.random.rand(10000000)
    maximizer = AnytimeAlgorithm(vector)
    print(maximizer.result_after(0.01))
</code></pre>
<p>When I run this class, it shows that, as expected, the result increases with time. However, the return value is always 0! Here is a typical output:</p>
<pre><code>self &lt;__main__.AnytimeAlgorithm object at 0x7f8e94de1cf8&gt; result 0.420804014071
self &lt;__main__.AnytimeAlgorithm object at 0x7f8e94de1cf8&gt; result 0.444555804935
self &lt;__main__.AnytimeAlgorithm object at 0x7f8e94de1cf8&gt; result 0.852844624467
self &lt;__main__.AnytimeAlgorithm object at 0x7f8e94de1cf8&gt; result 0.915336332491
self &lt;__main__.AnytimeAlgorithm object at 0x7f8e94de1cf8&gt; result 0.964438367823
self &lt;__main__.AnytimeAlgorithm object at 0x7f8e94de1cf8&gt; result 0.975029317702
self &lt;__main__.AnytimeAlgorithm object at 0x7f8e94de1cf8&gt; result 0.975906346116
self &lt;__main__.AnytimeAlgorithm object at 0x7f8e94de1cf8&gt; result 0.987784181209
self &lt;__main__.AnytimeAlgorithm object at 0x7f8e94de1cf8&gt; result 0.996998726143
self &lt;__main__.AnytimeAlgorithm object at 0x7f8e94de1cf8&gt; result 0.999480015562
self &lt;__main__.AnytimeAlgorithm object at 0x7f8e94de1cf8&gt; result 0.999798469992
self &lt;__main__.AnytimeAlgorithm object at 0x7f8e94de1cf8&gt; final result 0
</code></pre>
<p>What is my mistake?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you use <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">multiprocessing</a> in Python it literally creates a new independent Python process and runs whatever you ask it to. The fact that the API is simplified so it <em>looks</em> like <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">multithreading</a> should not confuse you. In the main process, you create an <code>AnytimeAlgorithm</code> object. Then, you create a <code>Process</code> that runs a function; this creates a new process and copies the state of the interpreter, so you have a copy of your <code>AnytimeAlgorithm</code> in the new process too that you can use. However, the two objects are not the same, they do not even live in the same process, so they cannot (directly) share any information. The changes you make to the object in the new process only affect to the object copy in that process, not the original one.</p>
<p>You can check the documentation on how to share information between the main process and the spawned one, for example with <a href="https://docs.python.org/3/library/multiprocessing.html#exchanging-objects-between-processes" rel="nofollow noreferrer">pipes, queues</a> or <a href="https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow noreferrer">shared memory</a>, which may be a good option here:</p>
<pre><code>import multiprocessing
import random
import numpy as np

class AnytimeAlgorithm:
    def __init__(self, vector):
        self.vector = vector
        self.result = multiprocessing.Value('d', 0.0)

    def update_forever(self):
        while True:
            i = random.randint(0, len(self.vector) - 1)
            if self.vector[i] &gt; self.result.value:
                self.result.value = self.vector[i]
                print("self", self, "result", self.result.value)

    def result_after(self, seconds):
        p = multiprocessing.Process(target=self.update_forever, name="update_forever", args=())
        p.start()
        p.join(seconds)
        if p.is_alive():
            p.terminate()
        p.join()
        print("self", self, "final result", self.result.value)
        return self.result.value


if __name__ == "__main__":
    import random, numpy as np
    vector = np.random.rand(10000000)
    maximizer = AnytimeAlgorithm(vector)
    print(maximizer.result_after(0.1))
</code></pre>
<p>Output:</p>
<pre><code>self &lt;__mp_main__.AnytimeAlgorithm object at 0x0000017D26AB7898&gt; result 0.01491873361800522
self &lt;__mp_main__.AnytimeAlgorithm object at 0x0000017D26AB7898&gt; result 0.060776471658675835
self &lt;__mp_main__.AnytimeAlgorithm object at 0x0000017D26AB7898&gt; result 0.7476611733129928
self &lt;__mp_main__.AnytimeAlgorithm object at 0x0000017D26AB7898&gt; result 0.9468162088782311
self &lt;__mp_main__.AnytimeAlgorithm object at 0x0000017D26AB7898&gt; result 0.9531978645650057
self &lt;__mp_main__.AnytimeAlgorithm object at 0x0000017D26AB7898&gt; result 0.9992671080742871
self &lt;__mp_main__.AnytimeAlgorithm object at 0x0000017D26AB7898&gt; result 0.999293465561661
self &lt;__mp_main__.AnytimeAlgorithm object at 0x0000017D26AB7898&gt; result 0.9996894825552965
self &lt;__mp_main__.AnytimeAlgorithm object at 0x0000017D26AB7898&gt; result 0.9998511378366163
self &lt;__mp_main__.AnytimeAlgorithm object at 0x0000017D26AB7898&gt; result 0.999933119926922
self &lt;__main__.AnytimeAlgorithm object at 0x00000195FBDC7908&gt; final result 0.999933119926922
0.999933119926922
</code></pre>
<p>Note that using <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Value" rel="nofollow noreferrer"><code>Value</code></a> has an additional overhead due to inter-process synchronized access. Read the documentation to understand how locking works for this class and consider writing your algorithm in a way that access to shared resources is minimized (e.g. using temporal local variables that you write at the end of each computation).</p>
</div>
<span class="comment-copy">I think that <code>multiprocessing</code> is making a full copy of your <code>AnytimeAlgorithm</code> instance and running the <code>update_forever</code> method on that instance. Meanwhile your local thread and local instance never gets modified.</span>
<span class="comment-copy">This makes sense. Is there a way to tell the process to update my variable?</span>
<span class="comment-copy">how about using a class instance rather than using instance variable for result like AnytimeAlgorithm.result ?</span>
<span class="comment-copy">You should investigate the <code>Manager</code> which can create shared objects for you: <a href="https://docs.python.org/2/library/multiprocessing.html#managers" rel="nofollow noreferrer">docs.python.org/2/library/multiprocessing.html#managers</a></span>
