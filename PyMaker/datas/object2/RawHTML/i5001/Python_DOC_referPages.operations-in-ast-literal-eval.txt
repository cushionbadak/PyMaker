<div class="post-text" itemprop="text">
<p>Why does the literal evaluation of <code>5 * 7</code> fail, while <code>5 + 7</code> doesn't?</p>
<pre><code>import ast

print(ast.literal_eval('5 + 7'))
# -&gt; 12

print(ast.literal_eval('5 * 7'))
# -&gt; 
Traceback (most recent call last):
  ...
ValueError: malformed node or string: &lt;_ast.BinOp object at ...&gt;
</code></pre>
<p>The <a href="https://docs.python.org/3/library/ast.html?highlight=ast#ast.literal_eval" rel="nofollow noreferrer">documentation</a> doesn't explain this.</p>
<p>I found that problem after answering this question on SO: <a href="https://stackoverflow.com/a/40578561/1513933">Getting the result of a string</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>ast.literal_eval()</code> accepts <code>+</code> in the evaluated data because <code>5+2j</code> (complex number<sup>*</sup>) are valid literals. The same applies to <code>-</code>. To keep the code simple, no attempt is made to exclude <code>+</code> or <code>-</code> as a binary operators. </p>
<p>No other operators are allowed; the function is <em>supposed</em> to only accept literals, not expressions.</p>
<p>In other words, that <code>5 + 7</code> works is a bug, but one that is hard to fix without breaking support for constructing complex numbers. The <a href="https://hg.python.org/cpython/file/3.5/Lib/ast.py#l38" rel="noreferrer">implementation</a> limits the use to operands that are numbers, unary <code>+</code> and <code>-</code>, or other binary operators (so you can't use these to concatenate lists or produce a set difference).</p>
<p>Also see several related Python bugtracker entries: <a href="http://bugs.python.org/issue25335" rel="noreferrer">#25335 <em>ast.literal_eval fails to parse numbers with leading "+"</em></a>, <a href="http://bugs.python.org/issue22525" rel="noreferrer">#22525 <em>ast.literal_eval() doesn't do what the documentation says</em></a> and <a href="http://bugs.python.org/issue4907" rel="noreferrer">#4907 <em>ast.literal_eval does not properly handled complex numbers</em></a></p>
<hr/>
<p><sup>*</sup> Technically speaking, <code>2j</code> is a valid literal; Python parses <code>5+2j</code> as <code>int(5) binop(+) complex(0, 2)</code>, and only later produces a <code>complex(5, 2)</code> object from the result, when actually executing the addition.</p>
</div>
<div class="post-text" itemprop="text">
<p>The question is not "why is <code>*</code> not accepted" but rather "why is <code>+</code> accepted at all".</p>
<p><code>ast.literal_eval</code> can parse literals, but not expressions. However, in Python, complex numbers are not expressed as a single literal value; instead they consist of the real part and imaginary part added together; the imaginary part is signalled with <code>j</code>. <code>literal_eval</code> thus needs to support binary <code>+</code> and <code>-</code> to support complex number constants such as <code>1 + 2j</code> or <code>-3.4e-5 - 1.72e9j</code>.</p>
<p>In many versions, including Python 3.5, <code>literal_eval</code> is much more lax than it <em>needs</em> to be - it accepts any chain of additions and subtractions for as long as both the left and right-hand sides evaluate to <em>any</em> number, thus <code>(1 + 3) + 2 + (4 - 5)</code> is still parsed, even if it is not complex constant consisting of real + 
imaginary part.</p>
<hr/>
<p><code>+</code> and <code>-</code> are not accepted unconditionally: if you try to add 2 lists together, it will fail, even though it can parse list literals, and addition is defined for lists:</p>
<pre><code>&gt;&gt;&gt; ast.literal_eval('[1] + [2]')
Traceback (most recent call last):
...
ValueError: malformed node or string: &lt;_ast.BinOp object at 0x7fdddbe785f8&gt;
&gt;&gt;&gt; ast.literal_eval('[1, 2]')
[1, 2]
&gt;&gt;&gt; [1] + [2]
[1, 2]
</code></pre>
</div>
<span class="comment-copy"><code>ast.literal_eval</code> is less powerful and therefore less dangerous than plain <code>eval</code>. I guess that makes it the lesser of two evals... :)</span>
<span class="comment-copy"><code>-</code> is also allowed.</span>
<span class="comment-copy">Thank you Martjn, I suspected something like this. Does it means that the AST is the result of the evaluation? I hope it is not.</span>
<span class="comment-copy">@AnttiHaapala: yeah, I was waiting for my train to arrive; connectivity in the London tunnels suxors.</span>
<span class="comment-copy">@LaurentLAPORTE: the function builds an AST from the string, then uses the AST to build the result. So the string is <i>parsed only</i>, not directly executed. See the <a href="https://hg.python.org/cpython/file/3.5/Lib/ast.py#l38" rel="nofollow noreferrer">source code</a>.</span>
