<div class="post-text" itemprop="text">
<p>Can someone explain how to use re.find all to separate only dates from the following strings? When the date can be either of the format- 1.1.2001 or 11.11.2001. There is volatile number of digits in the string representing days and months- </p>
<pre><code>import re 
str = "This is my date: 1.1.2001 fooo bla bla bla"
str2 = "This is my date: 11.11.2001 bla bla foo bla"
</code></pre>
<p>I know i should use re.findall(pattern, string) but to be honest I am completely confused about those patterns. I don't know how to assemble the pattern to fit in my case. </p>
<p>I have found something like this but I absolutely don't know why there is the r letter before the pattern ... \ means start of string? d means digit? and number in {} means how many? </p>
<pre><code>match = re.search(r'\d{2}.\d{2}.\d{4}', text)
</code></pre>
<p>Thanks a lot! </p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>r</code> prefix to the strings tells the Python Interpreter it is a <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">raw string</a>, which essentially means backslashes <code>\</code> are no longer treated as escape characters and are literal backslashes.  For <code>re</code> module it's useful because backslashes are used a lot, so to avoid a lot of <code>\\</code> (escaping the backslash) most would use a raw string instead.</p>
<p>What you're looking for is this:</p>
<pre><code>match = re.search(r'\d{1,2}\.\d{1,2}\.\d{4}', text)
</code></pre>
<p>The <code>{}</code> tells regex how many occurrences of the preceding set you wanted.  <code>{1,2}</code> means a minimum of 1 and a maxmium of 2 <code>\d</code>, and <code>{4}</code> means an exact match of 4 occurrences.</p>
<p>Note that the <code>.</code> is also escaped by <code>\.</code>, since in regex <code>.</code> means <em>any character</em>, but in this case you are looking for the literal <code>.</code> so you escape it to tell regex to look for the literal character.</p>
<p>See this for more explanation: <a href="https://regex101.com/r/v2QScR/1" rel="nofollow noreferrer">https://regex101.com/r/v2QScR/1</a></p>
</div>
<div class="post-text" itemprop="text">
<p>So there are 2 things going on here</p>
<p>1) When you enter some text <code>"..."</code> it first needs to be interpreted by the python interpreter<br/>
2) Then the python interpreter passes the result <code>result("...")</code> to its own internal regex interpreter</p>
<p>In order to match a special character like a digit, python's internal regex interpreter supports special characters like <code>\d</code>. So the regex interpreter is expecting to get <code>\d</code>. Unfortunately, the character <code>\</code> is also an escape character for the python interpreter. </p>
<p>In order to avoid the python interpreter eating up <code>\</code> and only passing <code>d</code> to the regex interpreter. We put <code>r"..."</code> in front of our strings to indicate a "raw string" - which means "Hey python interpreter, don't touch my <code>\</code> characters!"</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>r</code> is a <a href="https://stackoverflow.com/questions/33729045/what-does-an-r-represent-before-a-string-in-python">raw string</a> which means it will not get escaped or altered by <code>\</code> in a string </p>
<p>Python describes <code>\</code> as this:</p>
<blockquote>
<p>Either escapes special characters (permitting you to match characters like '*', '?', and so forth), or signals a special sequence;</p>
</blockquote>
<p>Basically meaning that if you use a character that would normally be a special character to regex it ignores this.</p>
<p><code>{}</code> are used for repetitions:</p>
<blockquote>
<p>Causes the resulting RE to match from m to n repetitions of the preceding RE, attempting to match as few repetitions as possible. This is the non-greedy version of the previous qualifier. For example, on the 6-character string 'aaaaaa', a{3,5} will match 5 'a' characters, while a{3,5}? will only match 3 characters.</p>
</blockquote>
<p>Meaning that it will repeat the previous character the number you specified in <code>{}</code></p>
<p><code>\d</code> is a special character that matches any digit from 0 to 9.</p>
<p>I highly recommend you <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">this tutorial</a></p>
<p><code>re.findall()</code> returns a list of everything it matches using that regex.</p>
</div>
<span class="comment-copy">You should have a look at <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">the doc for re</a>, and you can have a look at <a href="https://regex101.com/" rel="nofollow noreferrer">regex101.com</a> to test regular expressions interactively.</span>
<span class="comment-copy">This is just perfect ... this online regular expression tester! Thanks!</span>
<span class="comment-copy">Thanks friend! You taught me a lot! and your solution is working!</span>
<span class="comment-copy">Many thanks. All of you guys helped me and i have learned something new.</span>
<span class="comment-copy">Many thanks. All of you guys helped me and i have learned something new.</span>
