<div class="post-text" itemprop="text">
<p>I'm trying to write a Python function (without the use of modules) that will iterate through a list of coordinates and find the euclidean distance between two subsequent points (for example, the distance between points a and b, b and c, c and d etc.). After a few hours of searching I came across <a href="https://stackoverflow.com/questions/23086078/how-to-iterate-through-a-list-of-coordinates-and-calculate-distance-between-them">this post</a> which I thought solved my problem, so I wrote this:</p>
<pre><code>myList = [[2, 3], [3,4], [4,5], [5,6], [6,7]]

def distance(pointOne,pointTwo):
    eucDist = ((pointOne[0] - pointTwo[0])**2 + (pointOne[1] - pointTwo[1])**2)**0.5
    return eucDist

def totalDistance(inputPoints):
    dist = []
    for item in inputPoints[1:]:
        coordDist = distance(inputPoints[0],item)
        dist.append(coordDist)
    return sum(dist)

print totalDistance(myList)
</code></pre>
<p>However, this retrieves the distance between the first point and every other point. I've been trying to figure out how to define a variable for the next point in the sequence, but I'm pretty new to Python and just don't quite understand how to get there. I'm currently writing the <code>totalDistance</code> function like this:</p>
<pre><code>def totalDistance(inputPoints):
    dist = []
    for item in inputPoints:
        pOne = item
        pTwo = 
        coordDist = distance(pOne,pTwo)
        dist.append(coordDist)
    return sum(dist)
</code></pre>
<p>but can't figure out how I would go about defining pTwo.</p>
</div>
<div class="post-text" itemprop="text">
<p>One way of doing this would be:</p>
<pre><code>def totalDistance(inputPoints):
    dist = []
    pTwo = inputPoints[0]
    for item in inputPoints[1:]:
        pOne = pTwo
        pTwo = item
        coordDist = distance(pOne,pTwo)
        dist.append(coordDist)
    return sum(dist)
</code></pre>
<p>Basically, record the first item, and iterate from the second item in the list. It's probably better to swap <code>pOne</code> and <code>pTwo</code> around for easier understanding, or to be clearer and use more Pythonic names:</p>
<pre><code>def totalDistance(input_points):
    dist = []
    this_item = input_points[0]
    for item in input_points[1:]:
        prev_item = this_item
        this_item = item
        coord_dist = distance(prev_item, this_item)
        dist.append(coord_dist)
    return sum(dist)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> and <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a> this can be done like:</p>
<h3>Code:</h3>
<pre><code>def distance(point_one, point_two):
    return ((point_one[0] - point_two[0]) ** 2 +
            (point_one[1] - point_two[1]) ** 2) ** 0.5

def total_distance(points):
    return sum(distance(p1, p2) for p1, p2 in zip(points, points[1:]))
</code></pre>
<p>Or alternatively for Python 3 (from comments) using <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>:</p>
<pre><code>def total_distance(points):
    return sum(map(distance, points, points[1:]))
</code></pre>
<h3>Test Code</h3>
<pre><code>my_points = [[2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]
print(total_distance(my_points))
</code></pre>
<h3>Results:</h3>
<pre><code>5.656854249492381
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With itertools and NumPy:</p>
<pre><code>from itertools import tee
import numpy as np

def pairwise(iterable):
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)

def total_dist(points):
    return np.sum(np.sqrt(np.sum(np.square(
                  np.diff(tuple(pairwise(points)))), axis=-2)))

total_dist(myList)
# 5.656854249492381
</code></pre>
</div>
<span class="comment-copy">The key is to loop over pairs of points with: <code>for p1, p2 in zip(points[:-1], points[1:]): ...</code>.</span>
<span class="comment-copy">@RaymondHettinger Hmm, I'm surprised. Do you actually prefer that over <code>zip(points, points[1:])</code>?</span>
<span class="comment-copy">@StefanPochmann No, I prefer your version.  That said, it is easier to explain zipping together two equal length lists.</span>
<span class="comment-copy">note, <code>map</code> actually takes <code>*args</code> after the callable, and it works exactly like zip!, so you can do: <code>sum(map(distance, data, data[1:]))</code></span>
<span class="comment-copy">Thank you! This is a much simpler and more elegant way of approaching the problem than I did initially, super helpful.</span>
<span class="comment-copy">@juanpa.arrivillaga, thanks a bunch. That is very slick.</span>
<span class="comment-copy">@juanpa.arrivillaga Nah, that doesn't work, it crashes. map <i>doesn't</i> work exactly like zip in Python 2, which the question is tagged as.</span>
