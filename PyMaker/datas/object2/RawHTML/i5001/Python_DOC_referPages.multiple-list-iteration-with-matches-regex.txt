<div class="post-text" itemprop="text">
<p>I have a problem trying to automate a data processing activity that I do frequently at work and the current part that I am stuck at is processing the names in the data set from a third party naming system to our own naming system.</p>
<p>I have two lists, the third party list:</p>
<pre><code>thirdPartyList = ('NWM-A fun game [1 - 1234567890 - 9876]', 
                  'NWM(M)- A funner game! [2 - 1234567899 - 9877]', 
                  'NWM-Best funner-er game [3 - 0987654321 - 9878]',   
                   ...)
</code></pre>
<p>And my own list, comprised of a manually-entered name of every game we have:</p>
<pre><code>ourGameList = ('A fun game', 'A funner game!', 'Best funner-er game', ...) 
</code></pre>
<p>The third party naming system is:</p>
<pre><code>3 letter word for game manafacturer-Name of a Game! [Floor position number - serial number - third party specific tracking number]
</code></pre>
<p>But it can also change to, for example:</p>
<pre><code>Game man(A letter in brackets indicating cabinet)-Name of a Game!
</code></pre>
<p>I've tried using simple string replace and then comparing each indexed element, but the problem with that is, the numbers and some characters that I would like to replace also show up in the actual games name. </p>
<p>Is this a problem that is regexable? I've been looking for the past hour or so at regex examples with lists, but I don't know if you can use regex to iterate in one list, using the contents of another list, like:</p>
<pre><code>for i,j in ourList, thirdPartyList:
    if ourList[i].*some regex stuff* == thirdPartyList[i]:
        thirdPartyList[i] = ourList[i]
</code></pre>
<p>I'll also note that there can only be 17 characters before the first square bracket, so game names will regularly be cut off mid-way through.</p>
<p>Let me know if there's anything I haven't been able to explain properly and thanks for the read through.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can definitely use regex for something like this:</p>
<pre><code>import re

thirdPartyList = ('NWM-A fun game [1 - 1234567890 - 9876]', 
                  'NWM(M)- A funner game! [2 - 1234567899 - 9877]', 
                  'NWM-Best funner-er game [3 - 0987654321 - 9878]',   
                   )

def name_game(name_str):
    match_str = r'(?P&lt;mfg&gt;[A-Z]{3})(\((?P&lt;cabinet&gt;[A-Z])\))?-(?P&lt;name&gt;.*?)\[(?P&lt;floor&gt;[0-9]+) - (?P&lt;serial&gt;[0-9]+) - (?P&lt;track&gt;[0-9]+)\]'
    match = re.match(match_str, name_str)
    return match.groupdict()

for name_str in thirdPartyList:
    print(name_game(name_str))
</code></pre>
<p>Output on this is:</p>
<pre><code>{'mfg': 'NWM', 'cabinet': None, 'name': 'A fun game ', 'floor': '1', 'serial': '1234567890', 'track': '9876'}
{'mfg': 'NWM', 'cabinet': 'M', 'name': ' A funner game! ', 'floor': '2', 'serial': '1234567899', 'track': '9877'}
{'mfg': 'NWM', 'cabinet': None, 'name': 'Best funner-er game ', 'floor': '3', 'serial': '0987654321', 'track': '9878'}
</code></pre>
<p>For each part of the string you want to match, the pattern has a <code>(?P&lt;tag&gt;...)</code> with its own pattern inside it. The 'cabinet' is not always there so it has a <code>?</code> after it, to denote 0 or 1 matches. That one is actually a bit more complicated as it's enclosed in () which is not always there, so the entire thing is in an unnamed group: <code>(\((?P&lt;cabinet&gt;[A-Z])\))?</code>. The leading and trailing whitespace on the names can be stripped out later or you could put a <code>\s*</code> before and after the <code>name</code> group.</p>
<p>Much more info <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">here</a></p>
</div>
<span class="comment-copy">Can you give example input of the second example? <code>Game man(A letter in brackets indicating cabinet)-Name of a Game!</code></span>
<span class="comment-copy">AGT(M)MultiPlay B [ XX - XXXXXXXXXX - XXXXXX ] The game name here would be "MultiPlay Big Time 2" but due to the character limit it gets cut off.</span>
<span class="comment-copy">I very much appreciate you taking the time to make this up for me, unfortunately when I put my file in as the variable, it tells me that "NoneType object has no attribute groupdict".</span>
<span class="comment-copy">It means that there are other formatting possibilities that the regex isn't quite working on, so the <code>match</code> ends up as <code>None</code>. Add a test in the function for the match and if its <code>None</code> then print the string so you can see what's happening.</span>
<span class="comment-copy">I believe it might have something to do with there being a space after the tracking number (the last number between the square brackets) but I dont know enough about regex to be sure. There's also differences between the amount of numbers I gave and the actual amount of numbers in the list. SFL-Dancing In Ri [ 1 - 1111111111 - 111111 ] There is an example with the right amount of numbers in each slot and the space at the end. Just after I said this, it's actually because of both the spaces at the start and end inside of the square brackets.</span>
