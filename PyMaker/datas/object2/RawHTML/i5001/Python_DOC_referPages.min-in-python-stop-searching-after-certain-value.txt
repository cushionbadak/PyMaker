<div class="post-text" itemprop="text">
<p>I am trying to find the minimum of three values which are provided by three functions. What I've done so far looks something like this:</p>
<pre><code>value = min(function1(), function2(), function3())
</code></pre>
<p>The functions are recursive and need quite some time to process. However, the smallest output possible is always 0. Which is why I'd like to know if there is a build-in function where I can specify a certain value after which min() will stop searching. Surely I could write my own min-function but maybe there's another way?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a generator function that stops yielding if <code>0</code> has been seen, or some other condition is met:</p>
<pre><code>def takeuntil(predicate, iterable):
    for x in iterable:
        yield x
        if predicate(x):
            return
</code></pre>
<p>This is modelled on the <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow noreferrer"><code>itertools.takewhile()</code> function</a>, but yields that last value that matched the predicate.</p>
<p>Combined with a <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer">generator expression</a> you can then take the minimum value of the output, and anything beyond <code>0</code> is ignored:</p>
<pre><code>values = (f() for f in (function1, function2, function3))
result = min(takeuntil(lambda x: x == 0, values))
</code></pre>
<p>I used a generator expression to call each function in series, that way you don't even call later functions if one of the first functions produces <code>0</code>.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; def function1():
...     print('Function 1 called')
...     return 42
...
&gt;&gt;&gt; def function2():
...     print('Function 2 called')
...     return 0
...
&gt;&gt;&gt; def function3():
...     print('Function 3 called')
...     return 18
...
&gt;&gt;&gt; values = (f() for f in (function1, function2, function3))
&gt;&gt;&gt; min(takeuntil(lambda x: x == 0, values))
Function 1 called
Function 2 called
0
</code></pre>
<p><code>function3</code> is never called because <code>function2()</code> produced <code>0</code>.</p>
</div>
<span class="comment-copy">Are your functions generators?</span>
<span class="comment-copy">@MartijnPieters No..</span>
<span class="comment-copy">@MartijnPieters Could they be? I just tried this with the functions being generators and as expected got <code>TypeError: '&lt;' not supported between instances of 'generator' and 'generator'</code>.</span>
<span class="comment-copy">@StefanPochmann: you'd have to chain them.</span>
<span class="comment-copy">@MartijnPieters That's not what their current code is doing, though.</span>
<span class="comment-copy">I'd love to hear what is not helpful or wrong about my answer, to deserve a downvote. That way I can improve my answer!</span>
