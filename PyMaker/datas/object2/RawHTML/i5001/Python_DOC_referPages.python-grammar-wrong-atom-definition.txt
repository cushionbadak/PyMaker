<div class="post-text" itemprop="text">
<p>While checking python grammar at <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow noreferrer">official documentation</a>, here is what it reads</p>
<pre><code>atom_expr: ['await'] atom trailer*
atom: ('(' [yield_expr|testlist_comp] ')' |
       '[' [testlist_comp] ']' |
       '{' [dictorsetmaker] '}' |
       NAME | NUMBER | STRING+ | '...' | 'None' | 'True' | 'False')
testlist_comp: (test|star_expr) ( comp_for | (',' (test|star_expr))* [','] )
trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
</code></pre>
<p>Then, <code>10.bit_length()</code> is a valid syntax according to that definition but not according to the python interpreter. Instead, <code>n=10;n.bit_length()</code> is valid syntax for both the specifications and the interpreter.</p>
<p>Where should I find the <em>real</em> definition of <code>atom</code> and <code>atom_expr</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to juanpa's comment and the answers in the related question, it appears that the problem comes from <code>10.</code>. The definition of NUMBER includes the dot such that <code>10.bit_length()</code> is of kind <code>NUMBER NAME trailer</code> and not <code>NUMBER '.' NAME trailer</code>.</p>
<p>In order to obtain an atom_expr, one must separate the dot: both <code>10 .bit_length()</code> and <code>(10).bit_length()</code> give the correct answer.</p>
</div>
<span class="comment-copy">interesting. a related question: <a href="https://stackoverflow.com/questions/33054229/accessing-attributes-on-literals-work-on-all-types-but-not-int-why" title="accessing attributes on literals work on all types but not int why">stackoverflow.com/questions/33054229/â€¦</a></span>
<span class="comment-copy">Also somewhat related: <a href="https://stackoverflow.com/q/31037609/1639625">stackoverflow.com/q/31037609/1639625</a></span>
