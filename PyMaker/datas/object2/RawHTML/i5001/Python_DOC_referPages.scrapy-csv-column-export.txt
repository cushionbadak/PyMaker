<div class="post-text" itemprop="text">
<p>I´d like to export data to several columns in csv but I always obtain this kind of file:</p>
<p><a href="https://i.stack.imgur.com/vBA4U.png" rel="nofollow noreferrer">csv</a></p>
<p>I´d like to obtain two columns one "articulo" and another one "price"</p>
<p>My pipelines:</p>
<pre><code>import scrapy
from scrapy import signals
from scrapy.contrib.exporter import CsvItemExporter
import csv

class MercadoPipeline(object):
    def __init__(self):
        self.files = {}

    @classmethod
    def from_crawler(cls, crawler):
        pipeline = cls()
        crawler.signals.connect(pipeline.spider_opened, signals.spider_opened)
        crawler.signals.connect(pipeline.spider_closed, signals.spider_closed)
        return pipeline

        def spider_opened(self, spider):
            file = open('%s_items.csv' % spider.name, 'w+b')
            self.files[spider] = file 
            self.exporter = CsvItemexporter(file)
            self.exporter.fields_to_export = ['articulo','precio']
            self.exporter.start_exporting()


        def spider_closed(self, spider):
            self.exporter.finish_exporting()
            file = self.files.pop(spider)
            file.closed()

        def process_item(self, item, spider):
            self.exporter.export_item(item)
            return item
</code></pre>
<p>Can you help me please?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here you are:</p>
<pre><code>import scrapy
from scrapy.spiders import CrawlSpider, Rule
from scrapy.linkextractors import LinkExtractor
from scrapy.exceptions import CloseSpider
from mercado.items import MercadoItem


class MercadoSpider(CrawlSpider):
name = 'mercado'
item_count = 0
allowed_domain = ['www.autodoc.es']
start_urls = ['https://www.autodoc.es/search?brandNo%5B0%5D=101']

rules = {

    Rule(LinkExtractor(allow =(), restrict_xpaths = ('//span[@class="next"]/a'))),
    Rule(LinkExtractor(allow =(), restrict_xpaths = ('//a[@class="ga-click"]')),
                    callback = 'parse_item', follow = False)
}


def parse_item(self, response):
    ml_item = MercadoItem()

    #info de producto
    ml_item['articulo'] = response.xpath('normalize-space(//*[@id="content"]/div[4]/div[2]/div[1]/div[1]/div/span[1]/span/text())').extract()
    ml_item['precio'] = response.xpath('normalize-space(//*[@id="content"]/div[4]/div[3]/div[2]/p[2]/text())').extract()
    self.item_count += 1
    if self.item_count &gt; 20:
        raise CloseSpider('item_exceeded')
    yield ml_item   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is nothing wrong with the output of your code.<br/>
You <em>are</em> getting the two csv columns you want, but the program you are using to view the data is not interpreting it correctly.</p>
<p>By default, <code>CsvItemExporter</code> uses <code>,</code> as the delimiter, and the program seems to expect something else (and possibly even different quoting).<br/>
There are two possibilities to solve your problem:</p>
<ul>
<li>Change the program's settings so it reads the file correctly</li>
<li>Change the way <code>CsvItemExporter</code> exports data (it will pass any additional keyword arguments to the underlying <a href="https://docs.python.org/3/library/csv.html#csv.writer" rel="nofollow noreferrer"><code>csv.writer</code></a> object)</li>
</ul>
</div>
<span class="comment-copy">It's not about your pipeline but spider instead. Something is wrong with your <code>items</code>. Please show target page and your spider's code</span>
<span class="comment-copy">Hi!! Thank you for your answer, here you are, I´m going to copy it as an answer of my question because is too long.</span>
