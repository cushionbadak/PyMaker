<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/30104047/how-can-i-decorate-an-instance-method-with-a-decorator-class">How can I decorate an instance method with a decorator class?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I recently came across a technique in the Python decorator library's <a href="https://wiki.python.org/moin/PythonDecoratorLibrary#Memoize" rel="nofollow noreferrer"><code>memoized</code></a> decorator which allows it to support instance methods:</p>
<pre><code>import collections
import functools


class memoized(object):
    '''Decorator. Caches a function's return value each time it is called.
    If called later with the same arguments, the cached value is returned
    (not reevaluated).
    '''
    def __init__(self, func):
        self.func = func
        self.cache = {}

    def __call__(self, *args):
        if not isinstance(args, collections.Hashable):
        # uncacheable. a list, for instance.
        # better to not cache than blow up.
            return self.func(*args)
        if args in self.cache:
            return self.cache[args]
        else:
            value = self.func(*args)
            self.cache[args] = value
            return value

    def __repr__(self):
        '''Return the function's docstring.'''
        return self.func.__doc__

    def __get__(self, obj, objtype):
        '''Support instance methods.'''
        return functools.partial(self.__call__, obj)
</code></pre>
<p>The <code>__get__</code> method is, as explained in the doc string, where the 'magic happens' to make the decorator support instance methods. Here are some tests showing that it works:</p>
<pre><code>import pytest

def test_memoized_function():
    @memoized
    def fibonacci(n):
        "Return the nth fibonacci number."
        if n in (0, 1):
            return n
        return fibonacci(n-1) + fibonacci(n-2)

    assert fibonacci(12) == 144

def test_memoized_instance_method():
    class Dummy(object):
        @memoized
        def fibonacci(self, n):
            "Return the nth fibonacci number."
            if n in (0, 1):
                return n
            return self.fibonacci(n-1) + self.fibonacci(n-2)            

    assert Dummy().fibonacci(12) == 144

if __name__ == "__main__":
    pytest.main([__file__])
</code></pre>
<p>What I'm trying to understand is: how does this technique work exactly? It seems to be quite generally applicable to class-based decorators, and I applied it in my answer to <a href="https://stackoverflow.com/questions/48981501/is-it-possible-to-numpy-vectorize-an-instance-method">Is it possible to numpy.vectorize an instance method?</a>. </p>
<p>So far I've investigated this by commenting out the <code>__get__</code> method and dropping into the debugger after the <code>else</code> clause. It seems that the <code>self.func</code> is such that it raises a <code>TypeError</code> whenever you try to call it with a number as input:</p>
<pre><code>&gt; /Users/kurtpeek/Documents/Scratch/memoize_fibonacci.py(24)__call__()
     23                         import ipdb; ipdb.set_trace()
---&gt; 24                         value = self.func(*args)
     25                         self.cache[args] = value

ipdb&gt; self.func
&lt;function Dummy.fibonacci at 0x10426f7b8&gt;
ipdb&gt; self.func(0)
*** TypeError: fibonacci() missing 1 required positional argument: 'n'
</code></pre>
<p>As I understand from <a href="https://docs.python.org/3/reference/datamodel.html#object.__get__" rel="nofollow noreferrer">https://docs.python.org/3/reference/datamodel.html#object.<strong>get</strong></a>, defining your own <code>__get__</code> method somehow overrides what happens when you (in this case) call <code>self.func</code>, but I'm struggling to relate the abstract documentation to this example. Can anyone explain this step by step?</p>
</div>
<div class="post-text" itemprop="text">
<p>As far as I can tell, When you use a descriptor to decorate an instance method(actually, an attribute), it defines the behavior of how to <code>set</code>, <code>get</code> and <code>delete</code> this attribute. There is a <a href="https://docs.python.org/3.6/howto/descriptor.html#id6" rel="nofollow noreferrer">ref</a>.</p>
<p>So in your example, <code>memoized</code>'s <code>__get__</code> defines how to get attribute <code>fibonacci</code>. In <code>__get__</code>, it pass <code>obj</code> to <code>self.__call__</code> which <code>obj</code> is the instance. And the key to support instance method is to fill in argument <code>self</code>.</p>
<p>So the process is:</p>
<p>Assume there is an instance <code>dummy</code> of <code>Dummy</code>. When you access to <code>dummy</code>'s attribute <code>fibonacci</code>, as it has been decorated by <code>memoized</code>. The value of attribute <code>fibonacci</code> is returned by <code>memoized.__get__</code>. <code>__get__</code> accept two arguments, one is the calling instance(here is <code>dummy</code>) and another is its type. <code>memoized.__get__</code> fill instance into <code>self.__call__</code> in order to fill in <code>self</code> argument inside original method <code>fibonacci</code>.</p>
<p>To understand descriptor well, there is an <a href="https://docs.python.org/3.6/howto/descriptor.html#descriptor-example" rel="nofollow noreferrer">example</a>:</p>
<pre><code>class RevealAccess(object):
    """A data descriptor that sets and returns values
       normally and prints a message logging their access.
    """

    def __init__(self, initval=None, name='var'):
        self.val = initval
        self.name = name

    def __get__(self, obj, objtype):
        print('Retrieving', self.name)
        return self.val

    def __set__(self, obj, val):
        print('Updating', self.name)
        self.val = val

&gt;&gt;&gt; class MyClass(object):
...     x = RevealAccess(10, 'var "x"')
...     y = 5
...
&gt;&gt;&gt; m = MyClass()
&gt;&gt;&gt; m.x
Retrieving var "x"
10
&gt;&gt;&gt; m.x = 20
Updating var "x"
&gt;&gt;&gt; m.x
Retrieving var "x"
20
&gt;&gt;&gt; m.y
5
</code></pre>
</div>
