<div class="post-text" itemprop="text">
<p>If I have an expression of <code>1/0</code>, obviously, it gets error:</p>
<pre><code>try:
    1/0
except ZeroDivisionError as err:
    print(err)                      # this prints: division by zero
</code></pre>
<p>And the second try, replacing <code>1/0</code> by <code>raise ZeroDivisionError</code>...</p>
<pre><code>try:
    raise ZeroDivisionError
except ZeroDivisionError as err:
    print(err)                      # this prints: (nothing)
</code></pre>
<p>It prints nothing. Isn't an exception came from <code>raise</code>, same as the a general expression?</p>
<p>Also, how to understand this difference more clearly?</p>
</div>
<div class="post-text" itemprop="text">
<p>All exceptions are a subclass of <code>BaseException</code>, therefore all built-in exceptions should have an <code>args</code> attribute. </p>
<blockquote>
<p><a href="https://docs.python.org/3/library/exceptions.html#bltin-exceptions" rel="nofollow noreferrer"><strong><code>args</code></strong></a>:</p>
<p>The tuple of arguments given to the exception constructor. Some
  built-in exceptions (like <code>OSError</code>) expect a certain number of
  arguments and assign a special meaning to the elements of this tuple,
  while others are usually called only with a single string giving an
  error message.</p>
</blockquote>
<p>The <code>args</code> tuple or string can be provided as the first argument when you raise the exception. </p>
<pre><code>try:
    raise ZeroDivisionError("error")
except ZeroDivisionError as err:
    print(err)  # prints "error"
</code></pre>
<p>The <code>err</code> from <code>except Exception as err:</code> is the Exception instance, when you <code>print(err)</code>, you're actually calling the <code>__str__</code> method of the Exception. Most <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer"><em>Exception class's <code>__str__</code> return's <code>args</code></em></a>, since it's the default behaviour of BaseException; <code>__str__</code> will return otherwise if the exception class override BaseException's <code>__str__</code>. </p>
<p>When you raised a plain <code>ZeroDivisionError</code>, you provided no <code>args</code>, and <code>ZeroDivisionError</code> does not have a custom <code>__str__</code> method, therefore it printed <code>args</code> by default, a.k.a <code>args = None</code>.</p>
<hr/>
<p>As for your question:</p>
<blockquote>
<p>Isn't an exception came from <code>raise</code>, same as the a general expression?</p>
</blockquote>
<p>Yes. They are the same. </p>
<pre><code>try:
    raise ZeroDivisionError("division by zero")
except ZeroDivisionError as err:
    print(err)       
</code></pre>
<p>This will output the same as <code>1/0</code>.</p>
<hr/>
<p>I went ahead and dig through the <a href="https://github.com/python/cpython/blob/dd431b32f4a599fff9c9cddfe9d48cc66b347481/Objects/longobject.c" rel="nofollow noreferrer">source code</a>.  <code>//</code> (integer division) and <code>/</code> (true division) have a slightly different error message. But basically they are defined as such:</p>
<pre><code>if (size_b == 0) {
        PyErr_SetString(PyExc_ZeroDivisionError,
                        "division by zero");
        return -1;
    }
</code></pre>
<p>Whereas <code>size_b</code> is the divisor. As you can see, <code>1/0</code> or any division by zero raises a <code>ZeroDivsionError</code> with <code>args</code> set as <code>"division by zero"</code> or <code>"integer division or modulo by zero"</code> depending how you divide.</p>
</div>
<span class="comment-copy">Here are some <a href="https://stackoverflow.com/questions/2052390/manually-raising-throwing-an-exception-in-python">examples</a>.</span>
<span class="comment-copy">OK. Thanks. But why it can't catch <code>raise</code>?</span>
<span class="comment-copy">It is catching it, you just didn't tell if to print anything. If you changed <code>raise ZeroDivisionError</code> to <code>raise ZeroDivisionError("ErrorText")</code>, it would print <code>"ErrorText"</code>. It is usually used to describe the error that has been thrown.</span>
<span class="comment-copy">OK. Thanks. This also reminds me of the first time I saw "division by zero" showed. It seems that itâ€˜s the default statement of <code>ZeroDivisionError</code>.</span>
