<div class="post-text" itemprop="text">
<p>i am trying to write a program which takes strings and width as input and gives an input: </p>
<p>ABCDEFGHIJKLIMNOQRSTUVWXYZ
4
and gives an output as(in newline):
ABCD \n
EFGH \n
IJKL \n
IMNO \n
QRST \n
UVWX \n
YZ</p>
<p>I wrote this code:</p>
<pre><code>def wrap(string, max_width):
    while 0 &lt; len(string) &lt; 1000 and 0 &lt; max_width &lt; len(string):
        print (textwrap.fill(string,max_width))

while True:
    try:
        string = input()
        max_width = int(input())
    except EOFError:
        print("EOFError")
        break
</code></pre>
<p>What can i do to solve this problem, I am still new to programming. The error message which i got was:</p>
<pre><code>Original exception was:
Traceback (most recent call last):
  File "try2.py", line 8, in &lt;module&gt;
    max_width = int(input())
ValueError: invalid literal for int() with base 10: ''
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Each <code>input()</code> "consumes" the whole line. You need to split it in 2 <em>or</em> input it as two lines. Your error comes if you input all in 1 line and hit return twice, the <code>int(input())</code> becomes an empty string literal to convert which raises a <code>ValueError</code> - not a <code>EOFerror</code> (<a href="https://docs.python.org/3/library/exceptions.html" rel="nofollow noreferrer">https://docs.python.org/3/library/exceptions.html</a>)</p>
<p>I added handling for both of them, wrong parsing outputs a "helptext", empty line quits it </p>
<p>Splitting version: <code>'ABCDEFGHIJKLIMNOQRSTUVWXYZ 4'</code></p>
<pre><code>def wrap(string, max_width):
    print('\n'.join( [ string[i:i+max_width] for i in range(0,len(string),max_width) ]) )

while True:
    try:
        s = input()               #   ABCDEFGHIJKLIMNOQRSTUVWXYZ 4 + return
        if not s:
            print("Empty input quits program.")
            break
        spl = s.split()    

        string, max_width = spl[0], int(spl[1])
    except ValueError: 
        print("ValueError: place text and spacing into 1 line, separated by space")
        continue
    except IndexError:
        print("ValueError: place text and spacing into 1 line, separated by space")
        continue
    wrap(string,max_width)
</code></pre>
<p>should work. The list expression creates slices from your input starting at <code>[0:0+max_width]</code> and increases it by <code>max_width</code> concattenating them with <code>'\n'</code> for printout.</p>
<p>Two inputs version: <code>'ABCDEFGHIJKLIMNOQRSTUVWXYZ'</code> and <code>'4'</code> in different lines:</p>
<pre><code>def wrap(string, max_width):
    print('\n'.join( [ string[i:i+max_width] for i in range(0,len(string),max_width) ]) )

while True:
    try:
        string = input()             #   ABCDEFGHIJKLIMNOQRSTUVWXYZ + return
        if not string:
            print("Empty input quits program.")
            break
        max_width = int(input())     #   4 + return
    except ValueError:
        print("ValueError: place text into 1 line, number into next line")
        continue
    wrap(string,max_width)
</code></pre>
</div>
<span class="comment-copy">I think the second input() is still waiting for something. Try printing the results of that. If all your input is going into string, use string.split(‘ ‘) to get the individual values.</span>
<span class="comment-copy">It's taking both the inputs and string.split('') is giving another indentation error</span>
<span class="comment-copy">I took input in different lines. It did help in getting the answer but after i get the answer, I've to keep hitting Enter for it to stop. The it shows: :Traceback (most recent call last):   File "try2.py", line 7, in &lt;module&gt;     max_width = int(input())     #   4 + return ValueError: invalid literal for int() with base 10: ''</span>
<span class="comment-copy">@Divan_Cyph  if you input an empty line into an <code>int('')</code> it will raise the ValueError. I changed both codes to handle empty input as "I want to quit" and handled the int()-parsing for your case as well as the "not enough elements for split and parsing error" for the 1 line input - so that the user can carry on.</span>
<span class="comment-copy">@PeterSmith it did help, thank you</span>
