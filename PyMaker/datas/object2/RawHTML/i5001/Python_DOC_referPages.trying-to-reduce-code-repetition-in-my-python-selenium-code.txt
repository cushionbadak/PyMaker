<div class="post-text" itemprop="text">
<p>I'm new to the selenium/python field. I have been trying to make test cases using python with selenium to test the login form of a particular webpage. I have 10 test cases testing various scenarios so far. What I want to do is reduce the amount of repetition that's in the code.</p>
<p>this is the login_form_base I use as a module for the testcases:</p>
<pre><code>from expects import expect, contain
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


class Login():

    def __init__(self, driver):
        self.driver = driver

    def Username(self, user_name):
        self.driver.find_element_by_name('email').send_keys(user_name)

    def Password(self, password):
        self.driver.find_element_by_name('password').send_keys(password)

    def Submit_wait_confirm_error(self):
        driver = self.driver
        self.driver.find_element_by_class_name('fw-button').click()
        WebDriverWait(driver, 5).until(
            EC.presence_of_all_elements_located(('id', 'body-wrapper-full')))
        error_signing_in = self.driver.find_element_by_id("body-wrapper-full")
        expect(error_signing_in.text).to(contain("Invalid username/password"))

    def Confirm_signed_in(self):
        error_signing_in = self.driver.find_element_by_id("body-wrapper-full")
        expect(error_signing_in.text).not_to(contain(
            "Invalid username/password"))
</code></pre>
<p>And this is the code with the testcases:</p>
<pre><code>from unittest import main, TestCase

from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from login_form_base import Login


class SomePageLoginTest(TestCase):

    def setUp(self):
        self.driver = webdriver.Chrome()

    def tearDown(self):
        self.driver.quit()

    def test_strings(self):
        driver = self.driver
        self.driver.get("some url")
        login = Login(driver)
        login.Username("wrong username")
        login.Password("wrong password")
        login.Submit_wait_confirm_error() 


    def test_long_strings(self):
        driver = self.driver
        self.driver.get("some url")
        login = Login(driver)
        login.Username("abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz")
        login.Password("abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz")
        login.Submit_wait_confirm_error()

    def test_negative_numbers(self):
        driver = self.driver
        self.driver.get("some url")
        login = Login(driver)
        login.Username("-123456789")
        login.Password("-123456789")
        login.Submit_wait_confirm_error()

    def test_special_characters(self):
        driver = self.driver
        self.driver.get("some url")
        login = Login(driver)
        login.Username("~!@$%^&amp;*()_+:&gt;&lt;?||\=-][;/.,]")
        login.Password("~!@$%^&amp;*()_+:&gt;&lt;?||\=-][;/.,]")
        login.Submit_wait_confirm_error()

    def test_long_number(self):
        driver = self.driver
        self.driver.get("some url")
        login = Login(driver)
        login.Username("1234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567")
        login.Password("1234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567891234567893456789123456789123456789123456789123456789123456789")
        login.Submit_wait_confirm_error()

    def test_only_email(self):
        driver = self.driver
        self.driver.get("some url")
        login = Login(driver)
        login.Username("an_email@gmail.com")
        login.Password("password@gmail.com")
        login.Submit_wait_confirm_error()

    def test_no_email(self):
        driver = self.driver
        self.driver.get("some url")
        login = Login(driver)
        login.Username("")
        login.Password("pass")
        login.Submit_wait_confirm_error()

    def test_no_password(self):
        driver = self.driver
        self.driver.get("some url")
        login = Login(driver)
        login.Username("email@email.com")
        login.Password("")
        login.Submit_wait_confirm_error()

    def test_empty_password_username(self):
        driver = self.driver
        self.driver.get("some url")
        login = Login(driver)
        login.Username("")
        login.Password("")
        login.Submit_wait_confirm_error()

    def test_correct_username_password(self):
        driver = self.driver
        self.driver.get("some url")
        login = Login(driver)
        login.Username("actual_username")
        login.Password("actual_password")
        self.driver.find_element_by_class_name('fw-button').click()
        WebDriverWait(driver, 5).until(
            EC.presence_of_all_elements_located(('id', 'body-wrapper-full')))
        directory_image_visible = self.driver.find_element_by_class_name(
            "webs-image-crop")
        login.Confirm_signed_in()
        #  above finds the image labeled "directory"
        #  it is only visible when logged in
        directory_image_visible.is_displayed()
</code></pre>
<p>The login_form_base module is fine in my opinion. But the test case look like they can be condensed without taking away from their simplicity. I've done my best so far from 150+ lines of code to this but I'm just not sure how I can simplify from here. </p>
<p>By the way, the code is functioning just fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure if you are able to use <a href="https://docs.pytest.org/en/latest/" rel="nofollow noreferrer"><code>pytest</code></a> but if so, the <a href="https://docs.pytest.org/en/latest/parametrize.html" rel="nofollow noreferrer"><code>parametrize</code></a> option seems like a good fit. Here is a rough example (be warned though, I haven't run it!).</p>
<pre><code>from string import ascii_letters as az, digits

import pytest
from selenium import webdriver

from login_form_base import Login


@pytest.fixture
def driver():
    driver = webdriver.Chrome()
    yield driver
    driver.quit()


@pytest.mark.parametrize('username, password', (
    ('wrong username', 'wrong password'),
    (az + az, az + az),
    ('-123456789', '-123456789'),
    ('~!@$%^&amp;*()_+:&gt;&lt;?||\=-][;/.,]', '~!@$%^&amp;*()_+:&gt;&lt;?||\=-][;/.,]'),
    (digits * 20, digits * 20),
    ('an_email@gmail.com', 'password@gmail.com'),
    ('', 'pass'),
    ('email@email.com', ''),
    ('', '')
))
def test_login_form(driver, username, password):
    driver.get("some url")
    login = Login(driver)
    login.Username(username)
    login.Password(password)
    login.Submit_wait_confirm_error()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>EDIT</strong>: Lettuce is right, it's better if you make a separate unit test for each User.</p>
<p>Yet you can forget about defining so many tests if you define a User class with <code>.Username</code>and <code>.Password</code> attributes, as in</p>
<pre><code>class User:
    def __init__(self, name, pwd, desc):
        self.Username = name
        self.Password = pwd
        self.Description = desc
</code></pre>
<p>Then you can store them in a binary file with pickle dump.
In the end, you only need one function to test all these cases.</p>
<pre><code>class SomePageLoginTest(TestCase):

    def setUp(self):
        self.driver = webdriver.Chrome()

    def tearDown(self):
        self.driver.quit()

    def test_login(self, user):
        driver = self.driver
        login = Login(driver)
        self.driver.get("some url")
        print("Testing " + user.Description)
        login.Username(user.Username)
        login.Password(user.Password)
        login.Submit_wait_confirm_error()

for user in storage:
    SomePageLoginTest.test_login(user)
</code></pre>
</div>
<span class="comment-copy">He'll probably have to rewrite a big part of the code if he changes from the <code>unittest</code> module to <code>pytest</code> and it might be confusing for someone that's already having an issue with a module that he does know how to use.</span>
<span class="comment-copy">@FranRoura Not really. <code>pytest</code> can be swapped in as the test runner with all the same tests. He can then simply add parts like this to get rid of duplicated code, problem solved.</span>
<span class="comment-copy">Yeah but my answer is cooler cause it's mine</span>
<span class="comment-copy">Pytest with parameterized tuples of login info with expected results is the cleanest, easiest way to achieve the desired functionality IMO as well. The duplicated code and maintenance time you will save more than makes up for the hour it would to implement some basic pytest and parameterization logic.</span>
<span class="comment-copy">Thank you @DeliriousLettuce this was really helpful to guide me in the right direction. I wanted to stick with unittest so I didn't want to use pytest but the parameterization concept was a new idea to me. And it turns out pypi.python.org/pypi/parameterized works for pytest, unittest +. All I had to do was use 'at' parameterize.expand instead.</span>
<span class="comment-copy">If you do it this way and the first test raises an error, none of the other tests will run. That's an advantage of using <code>pytest.mark.parametrize</code> since they will all run, no matter what happens in any particular test.</span>
<span class="comment-copy">Yeah, that's another downside, but it does shorten the code indeed.</span>
<span class="comment-copy">Shortening + less functionality really doesn't seem that good though? Using <code>pickle</code> can also be a bit dangerous, <a href="https://docs.python.org/3/library/pickle.html#module-pickle" rel="nofollow noreferrer"><code>"The pickle module is not secure against erroneous or maliciously constructed data."</code></a>.</span>
<span class="comment-copy">He's not letting users input data into his pickle, he will only want to save his user objects somewhere so that he doesn't need to recreate them every time the script runs. You're right on the less functionality part though, I'll edit this.</span>
