<div class="post-text" itemprop="text">
<p>I am no expert in how Python lists are implemented but from what I understand, they are implemented as dynamic arrays rather than linked lists. My question is therefore, if python lists are implemented as arrays, why are they called 'lists' and not 'arrays'. </p>
<p>Is this just a semantic issue or is there some deeper technical reason behind this. Is the dynamic array implementation in Python close to a list implementation? Or is it because the dynamic array implementation makes its behaviour closer to a list's behaviour than an array? Or some other reason I do not understand?</p>
<p>To be clear, I am not asking specifically how or why Python lists are implemented as dynamic arrays, although that might be relevant to the answer. </p>
</div>
<div class="post-text" itemprop="text">
<p>They're named after the <a href="https://en.wikipedia.org/wiki/List_(abstract_data_type)" rel="noreferrer">list abstract data type</a>, not linked lists. This is similar to the naming of Java's <a href="https://docs.oracle.com/javase/9/docs/api/java/util/List.html" rel="noreferrer">List</a> interface and C#'s <a href="https://msdn.microsoft.com/en-us/library/6sh2ey19(v=vs.110).aspx" rel="noreferrer"><code>List&lt;T&gt;</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To further elaborate on <a href="https://stackoverflow.com/a/48966732/5588196">user2357112's answer</a>, as pointed out in the wikipedia article:</p>
<blockquote>
<p>In computer science, a list or sequence is an abstract data type that
  represents a countable number of ordered values, where the same value
  may occur more than once.</p>
</blockquote>
<p>Further,</p>
<blockquote>
<p>List data types are often implemented using array data structures or linked lists of some sort, but other data structures may be more appropriate for some applications. </p>
</blockquote>
<p>In  CPython, lists are implemented as dynamic arrays of pointers, and their behaviour is much closer to the List abstract data type than the <a href="https://en.wikipedia.org/wiki/Array_data_type#Abstract_arrays" rel="nofollow noreferrer">Array abstract data type</a>. From this perspective, the naming of 'List' is accurate.</p>
</div>
<div class="post-text" itemprop="text">
<p>At the end of the day when implementing a list what you want is constant(O(1)) access(a[i]), insert(a.append(i)) and delete(a.remove(i)) times. With a linked list some of this operations could be as slow as O(n), i.e. deleting the last element of linked lists if you don't have a pointer to the tail.</p>
<p>With dynamic arrays you get constant delete and access times but what about deleting? Here we get amortized constant time. What is that? If the array is full of N elements, the insert will take O(N) and you'll end up with an array of size 2N. This is a rare event, thus we say we have amortized O(1).</p>
<p>Hope it helps.</p>
<p>Sources:
<a href="https://docs.python.org/2/faq/design.html" rel="nofollow noreferrer">https://docs.python.org/2/faq/design.html</a></p>
</div>
<span class="comment-copy">It's indeed an array. But my educated guess for the naming is that <code>array</code> will usually imply <i>all of the same type</i> in many languages. It is not the case in Python.</span>
<span class="comment-copy"><code>arrays</code> in Python (as in <code>array.array</code> for instance) is a homogeneous container of a certain type. <code>list</code>s contain <i>any</i> object. Also - arrays because they're normally used for immutable types, can share "views" of sliced ranges such that no copying is made. See: <a href="https://docs.python.org/3/library/stdtypes.html#memoryview" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#memoryview</a> for instance or even <code>numpy.array</code>s</span>
<span class="comment-copy">arrays generally contain elements of the same datatype. But, lists, on the other hand, can contain elements of all datatypes.</span>
<span class="comment-copy">They're named after the <a href="https://en.wikipedia.org/wiki/List_(abstract_data_type)" rel="nofollow noreferrer">list abstract data type</a>, not linked lists.</span>
<span class="comment-copy">You have the question backward. It's not "why are they implemented with arrays if they're called lists"; it's "why are they called lists if they're implemented with arrays".</span>
<span class="comment-copy">Also your answer is pretty garbled where it talks about deletion. You say deletion is constant time, and then you say it's amortized constant time, but neither of those things are true.</span>
<span class="comment-copy">How would you describe the time of deleting an element from an list then? If I'm wrong, you should provide some proof to help me understand.</span>
<span class="comment-copy">Deletion by index takes time proportional to the number of elements that have to be shifted to close the gap; deletion by value takes time proportional to the size of the list, because in addition to shifting elements, Python also needs to find the element to remove.</span>
