<div class="post-text" itemprop="text">
<p>I'm looking for a Pythonic way to validate arguments when their validation logically depends on the value(s) parsed from other argument(s).  </p>
<p>Here's a simple example:</p>
<pre><code>parser.add_argument(
    '--animal', 
    choices=['raccoon', 'giraffe', 'snake'], 
    default='raccoon',
)
parser.add_argument(
    '--with-shoes', 
    action='store_true',
)
</code></pre>
<p>In this case, parsing this command should cause an error:</p>
<pre><code>my_script.py --animal snake --with-shoes
</code></pre>
<p>Adding a <a href="https://docs.python.org/3/library/argparse.html#mutual-exclusion" rel="nofollow noreferrer">mutually exclusive group</a> doesn't seem to help here, as the other combos are OK:</p>
<pre><code>my_script.py --animal raccoon --with-shoes
my_script.py --animal raccoon
my_script.py --animal snake
my_script.py --animal giraffe --with-shoes
my_script.py --animal giraffe
</code></pre>
<p>The validation error should ideally not be tied to <code>--animal</code> argument nor to <code>--with-shoes</code> argument, since the interface can not tell you <em>which</em> value needs to change here.  Each value is valid, yet they can't be used in combination.</p>
<p>We can do this with post-processing the <code>args</code> namespace, but I'm looking for a solution which would cause the <code>parser.parse_args()</code> call to fail, i.e. we actually fail <em>during</em> argument parsing, not afterwards.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Checking values after parsing is simplest.  You can even use <code>parser.error('...')</code> to produce an error message in the standard <code>argparse</code> format.</p>
<p><code>argparse</code> handles each argument independently, and tries to do so in a way that doesn't care about the order (except for <code>positionals</code>).  Each input value is added to the <code>args</code> namespace by the corresponding <code>Action</code> object (its <code>__call__</code> method).  A default <code>store</code> action simply uses <code>setattr(args, dest, value)</code>; a <code>store_true</code> does <code>setattr(args, dest, True)</code>.</p>
<p>Mutually exclusive groups are handled by keeping a <code>set</code> of <code>seen_actions</code>, and checking that against the group's own list of Actions.  I've explored generalizing the groups to allow for other logical combinations of actions.  As complicated as that has gotten (especially when displaying the <code>usage</code>), I didn't envisage testing for values as well as occurrence.</p>
<p>It would be possible to write custom <code>Action</code> classes, that check for co-occurrence, but that gets more complicated.</p>
<p>We could give <code>with-shoes</code> an Action class that checks the values of the <code>args.animal</code> attribute, and raises an error if that value is <code>snake</code>.  But what if the user provides the <code>with-shoes</code> option first?  We'd have to give <code>animal</code> a custom class that checks the <code>args.with_shoes</code> value, and raise an error if that is <code>True</code>, etc.  So <code>shoes</code> has to know about <code>animals</code> and <code>animals</code> has to know about <code>shoes</code>.  Testing after parsing allows you to put the logic in one place.</p>
<p>One of the big advantages to using a parser like <code>argparse</code> is it generates the usage, help, and error messages for you.  But validation logic like this is hard to express automatically.  As it is, the usage formatting for the relatively simple mutually-exclusive logic is brittle and easily broken.</p>
<p>An earlier attempt at answering this kind  of question:</p>
<p><a href="https://stackoverflow.com/questions/39437461/parameter-dependencies-in-python-cant-make-it-work">Parameter dependencies in Python - can't make it work</a></p>
</div>
<span class="comment-copy">Doesn't directly answer you question, but I prefer to use Click as it is more amenable to this sort of thing: <a href="https://stackoverflow.com/a/44349292/7311767">stackoverflow.com/a/44349292/7311767</a></span>
<span class="comment-copy">Thanks, but I prefer not to use click because I don't like my argument parsing code to be in a jumble of decorators above the function.  It makes the CLI hard to test and the code hard to read.  Looking for an <code>argparse</code> solution.</span>
