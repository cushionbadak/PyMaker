<div class="post-text" itemprop="text">
<p>I have a numpy array of dimension <code>(i, j)</code> in which I would like to add up the first dimension to receive a array of shape <code>(j,)</code>. Normally, I'd use NumPy's own <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html" rel="nofollow noreferrer"><code>sum</code></a></p>
<pre><code>import numpy

a = numpy.random.rand(100, 77)
numpy.sum(a, axis=0)
</code></pre>
<p>but in my case it doesn't cut it: Some of the sums are <em>very</em> ill-conditioned, so the computed results only have a few correct digits.</p>
<p><a href="https://docs.python.org/3/library/math.html#math.fsum" rel="nofollow noreferrer"><code>math.fsum</code></a> is fantastic at keeping the errors at bay, but it only applies to iterables of one dimension. <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.vectorize.html" rel="nofollow noreferrer"><code>numpy.vectorize</code></a> doesn't do the job either.</p>
<p>How to efficiently apply <code>math.fsum</code> to an array of multiply dimensions?</p>
</div>
<div class="post-text" itemprop="text">
<p>This one works fast enough for me.</p>
<pre><code>import numpy
import math

a = numpy.random.rand(100, 77)
a = numpy.swapaxes(a, 0, 1)
a = numpy.array([math.fsum(row) for row in a])
</code></pre>
<p>Hopefully it's the axis you are looking for (returns 77 sums).</p>
</div>
<div class="post-text" itemprop="text">
<p>Check out the <code>signature</code> keyword to <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.vectorize.html" rel="nofollow noreferrer"><code>vectorize</code></a>. </p>
<pre><code>_math_fsum_vec = numpy.vectorize(math.fsum, signature='(m)-&gt;()')
</code></pre>
<p>Unfortunately, it's slower than the <code>for</code> solution:</p>
<p><a href="https://i.stack.imgur.com/KkCW0.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/KkCW0.png"/></a></p>
<p>Code to reproduce the plot:</p>
<pre><code>import math
import numpy
import perfplot


_math_fsum_vec = numpy.vectorize(math.fsum, signature='(m)-&gt;()')


def fsum_vectorize(a):
    return _math_fsum_vec(a.T).T


def fsum_for(a):
    return numpy.array([math.fsum(row) for row in a.T])


perfplot.save(
    'fsum.png',
    setup=lambda n: numpy.random.rand(n, 100),
    kernels=[fsum_vectorize, fsum_for],
    n_range=[2**k for k in range(12)],
    logx=True,
    logy=True,
    )
</code></pre>
</div>
<span class="comment-copy">not sure if i have understood the question , but have you looked at this?<a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.apply_along_axis.html" rel="nofollow noreferrer">docs.scipy.org/doc/numpy/reference/generated/â€¦</a></span>
<span class="comment-copy">@EspoirMurhabazi Doesn't help: I need summation over a dimension.</span>
<span class="comment-copy"><code>np.apply_along_axis(math.fsum, 0, a)</code> also works, but has more overhead.</span>
