<div class="post-text" itemprop="text">
<p>I use software at work that has python scripting built in. The only downside is it doesn't carry many of the useful modules out there today. Looking at the forum and support for the software the knowledge base had instructions on how to add new modules. All was well for a few things but when trying to install Pandas I kept getting a failed dependency for Numpy, even though Numpy was in fact in the site-packages for that python version. </p>
<p>I made several other attempts and then came across this line of code.</p>
<pre><code>python -m pip install --user numpy scipy matplotlib ipython jupyter pandas sympy nose
</code></pre>
<p>I replaced the <code>python</code> with the path to that version of Python and the install went through. But now that Python version is broken. When I open the script editor in the software and try to run ANY code I get an error that says </p>
<pre><code>Cannot initialize the script system: Error in line 1:PyEval_EvalFramesEx returned NULL without setting an error.
</code></pre>
<p>Even when I try to run that version of Python in the console the cursor just moves down a line and nothing happens. I can't even type any more.</p>
<p>The older version of the software still works fine, I believe this is due to it using Python 3.4 while this newer version is running Python 3.5. I have even tried to uninstall and reinstall the software for a clean install and I still get the same error, even if I reinstall in a new location. I fear its something system wide specific to that software version of Python 3.5. I have an external Python 3.5 I installed just to check and it runs fine. It's just the software version of Python that is now broken. </p>
</div>
<div class="post-text" itemprop="text">
<p>You have installed Python projects with compiled components that are loaded into the Python binary. Those components are conflicting with the embedded Python version of your software package (which may not be able to load them).</p>
<p>Because you used the <code>--user</code> switch to install these packages there is still a way out to recover your installation. The packages were all installed into the <a href="https://docs.python.org/3/library/site.html#site.USER_SITE" rel="nofollow noreferrer"><code>site.USER_SITE</code> location</a>, which means you can remove them again, manually.</p>
<p>First, you need to run Python with a switch that disables loading code from that location. You can try to do this with either the <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-s" rel="nofollow noreferrer"><code>-s</code> switch</a> (which disables the <code>USER_SITE</code> option) or the <a href="https://docs.python.org/3/using/cmdline.html#id2" rel="nofollow noreferrer"><code>-I</code> switch</a> (enabling isolated mode, ignoring environment variables and the <code>USER_SITE</code> option), to verify that disabling these options actually gives you a working Python prompt:</p>
<pre><code>path/to/software/python -s   # or -I
</code></pre>
<p>When this works, you can run the <code>site</code> module as a script, to print out where the <code>USER_SITE</code> directory is:</p>
<pre><code>path/to/software/python -s -m site   # or -I -m site
</code></pre>
<p>Look for the <code>USER_SITE: &lt;path&gt;</code> line, it should end in <code>site-packages</code>. Then, move the <em>contents</em> of that directory somewhere else (to keep as a backup). Then try to run Python without the <code>-s</code> / <code>-I</code> switch again.</p>
</div>
<span class="comment-copy">Learn about virtualenv in <a href="https://virtualenv.pypa.io/en/stable/" rel="nofollow noreferrer">virtualenv.pypa.io/en/stable</a> and use it to isolate apps with different requirements for libs and python versions.</span>
<span class="comment-copy">@progmatico: I suspect the OP wanted access to updated packages <i>in the software package that embeds Python</i>, at which point a virtualenv would not help. The <code>--user</code> switch did help here to isolate the installed packages, which is helpful.</span>
<span class="comment-copy">What software package is this, exactly? Perhaps there are some options to make your additional packages work anyway (a separate step from first getting your installation fixed).</span>
<span class="comment-copy">@MartijnPieters Thanks for pointing. I read it wrong, I thought OP had broken a Python app by installing updated libraries in system Python. I understand now that the app has Python scripting. Can't help here.</span>
<span class="comment-copy">You......have......saved....me! lol I really cant thank you enough. I was at my whits ends trying to fix my mistake. Im only about 2 years into python and its my first scripting language. While ive come a long way in those 2 years there is still so much i don't know. I will be exceedingly more careful trying new things. Someone suggested either using virtualenv or a virtual machine. Im not sure if my work will purchase virtual machine software but if there are any other suggestions or tips on testing package installation they would not go unnoticed. Thank you so much.</span>
<span class="comment-copy">@Scolli03: A virtual machine is as easily installed: <a href="http://www.lifehacker.co.uk/2010/12/19/five-best-virtual-machine-applications" rel="nofollow noreferrer">lifehacker.co.uk/2010/12/19/â€¦</a>.  If the software is not a GUI but aimed at a server environment, consider using containers (specifically, <a href="https://www.docker.com/" rel="nofollow noreferrer">docker.com</a>) to create isolated installations. Either way, it is then easier to experiment and undo mistakes.</span>
<span class="comment-copy">@Scolli03: for Python external packages, a <a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/" rel="nofollow noreferrer">virtual environment</a> is great.</span>
