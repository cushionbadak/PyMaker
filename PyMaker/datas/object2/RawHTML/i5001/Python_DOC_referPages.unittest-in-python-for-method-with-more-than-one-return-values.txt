<div class="post-text" itemprop="text">
<p>I would like to create a unittest in Python for a method that has more than one return values. For example let's say I want to test the following method:</p>
<pre><code>def example(x, y):
    sum = x + y
    dif = x - y
    return sum, dif
</code></pre>
<p>Is there any way to have a unittest for this method?
(I know that I can split the above in 2 different methods, but this is just a naive example)</p>
</div>
<div class="post-text" itemprop="text">
<p>Capture all the return values, then test them individually.</p>
<pre><code>...
    numsum,dif = example(5,3)
    self.assertEqual(numsum,8)
    self.assertEqual(dif,2)
</code></pre>
<p>or, as @sleigh_bells points out compare a tuple to the returned tuple:</p>
<pre><code>self.assertEqual(example(5,3),(8,2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do </p>
<pre><code>assertEqual([sum, dif], [expected_sum, expected_dif])
</code></pre>
<p>According to the Python documentation, this will actually run assertListEqual because two lists are being passed in.</p>
<p><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertListEqual" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertListEqual</a></p>
</div>
<span class="comment-copy">How does this function cause a problem for unit testing?</span>
<span class="comment-copy">Maybe you are not aware that in Python what you call "returning two values" is actually the return of a tuple object (with two values inside). And you can <code>assertEqual</code> with another object like usual. You can also unpack the values first as shown by Alan.</span>
<span class="comment-copy">Thanks. I am new in Python and I did not know that you can run the method before the assert one (finding everywhere things like self.assertEqual('foo'.upper(), 'FOO'))</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> is a bad variable name to use in Python.</span>
<span class="comment-copy">@DeliriousLettuce Good point.  I had just used the example names from OP.  Updated.</span>
<span class="comment-copy">@AlanHoover No problem, it just seemed like this should be the accepted answer so I thought I'd mention it here.</span>
