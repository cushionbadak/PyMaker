<div class="post-text" itemprop="text">
<p>I have several python functions that I am trying to create into a package. Each function exists in its own python file, and uses global variables to return some objects back to the global environment , some of which get used by the other python functions. </p>
<p>When these functions are standalone functions that have been defined in the python console, they work just fine, but when I put them all together into a python package, the global variables are not being returned as a global variable any longer. </p>
<p>Why do functions that are defined with a package file not return global variables / how can I bypass this?</p>
<p>A very simple example:</p>
<p>python_function1.py</p>
<pre><code>def function1(x):
    global new_table
    new_table = x
</code></pre>
<p>python_function2.py</p>
<pre><code>def function2(new_table):
    global new_table2
    new_table2 = new_table
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As per documentation states:</p>
<blockquote>
<p>The canonical way to share information across modules within a single
  program is to create a <strong>special module</strong> (often <strong>called config or cfg</strong>).
  Just <strong>import the</strong> config <strong>module in all modules of your application</strong>; 
  the module then becomes available as a global name. 
  Because there is only one instance of each module, any changes made to the 
  module object get reflected everywhere.</p>
</blockquote>
<p>You can check this documentation for example code:</p>
<p><a href="https://docs.python.org/3/faq/programming.html#how-do-i-share-global-variables-across-modules" rel="nofollow noreferrer">https://docs.python.org/3/faq/programming.html#how-do-i-share-global-variables-across-modules</a></p>
</div>
<span class="comment-copy">Perhaps you could update your question with example code, showing a simple case where multiple functions use global variables.</span>
<span class="comment-copy">You might check out this question.  <a href="https://stackoverflow.com/questions/19158339/why-are-global-variables-evil">Why Globals are evil</a></span>
<span class="comment-copy">Are you under the impression that when a function like <code>def func(): x = 3; return x</code> is called, it will create a global variable named <code>x</code>?</span>
<span class="comment-copy">Please post a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. It's hard to say why your code doesn't work without being able to look at it.</span>
<span class="comment-copy">Python doesn't have "global" variables in that sense. There's no reason to use them, anyway.</span>
<span class="comment-copy">To add, "global" variables in Python are global to a module.  When any Python code executes it executes within some namespace for global variables, and that is, in almost all cases, the module in which that code was run (in the interpreter prompt that's a special module called <code>__main__</code>).</span>
