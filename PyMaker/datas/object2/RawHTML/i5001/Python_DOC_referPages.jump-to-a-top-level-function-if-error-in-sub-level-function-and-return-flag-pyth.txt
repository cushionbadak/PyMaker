<div class="post-text" itemprop="text">
<p>I have a function "main_func" , from which i am calling another function and so on.</p>
<pre><code>class Error(Exception):
   """Base class for other exceptions"""
   pass

def main_func():
    return sub_func()

def sub_func():
    return sub_sub_func()

def sub_sub_func():
    return sub_sub_sub_func()

def sub_sub_sub_func():
    try:
        x = len(10)
        res = 'b'
    except:
        raise Error
    return res

main_func()
</code></pre>
<p>If you see in <code>sub_sub_sub_func()</code> i have added a line <code>x = len(10)</code> which will cause exception.</p>
<p>What i want is, if this happens, i should directly jump to main_func() and return a <code>flag(str) as 'fail'</code></p>
<p>I looked into defining custom exceptions , but it didn't helped me.</p>
<p>I want to return after i raise.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>len(10)</code> will raise a <code>TypeError</code> you can catch this specific exception in your <code>main_func</code> and do the thing that needs to happen then.</p>
<p>Please note that you need to create an instance of your error class when raising. <code>Error()</code></p>
<pre><code>class Error(Exception):
    """Base class for other exceptions"""
    pass

def main_func():
    try:
        return sub_func()
    except (Error as e):
        # The raised error will be cought here.
        # Do the stuff that needs to happen here.
        return 'fail'

def sub_func():
    return sub_sub_func()

def sub_sub_func():
    return sub_sub_sub_func()

def sub_sub_sub_func():
    try:
        x = len(10) # Will raise a `TypeError`
        res = 'b'
    except:
        # `TypeError` that is raised will get here
        raise Error()
    return res

main_func()
</code></pre>
<p>Note: Your custom <code>Error</code> hides a lot of information that can come in handy later. What happened what raised this error. Best is to put the original <code>TypeError</code> as an inner exception to <code>Error</code>.</p>
<pre><code>try:
    x = len(10)
except Throwable as e:
    raise Error(e)
</code></pre>
<p>In theory in your code a potential out of memory exception will be converted to your Error without knowing what happened.</p>
</div>
<span class="comment-copy">Did you mean add a <code>try-except</code> in <code>main_func()</code>?</span>
<span class="comment-copy">@endless no not using try except, using raise</span>
<span class="comment-copy">It's unclear what you mean by "jump". Currently, your raising the exception will make you code "jump" for none of the intermediate "sub" functions implement any form of exception handling.</span>
<span class="comment-copy">What is <code>flag(str)</code>? If you want go to <code>main_func</code>, maybe you have to use <code>return</code> or idk, <a href="https://docs.python.org/3/reference/expressions.html?#yield-expressions" rel="nofollow noreferrer"><code>yield</code></a>?</span>
