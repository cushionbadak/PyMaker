<div class="post-text" itemprop="text">
<p>I'm currently working with Automate the boring stuff with Python and I'm dealing with project where I must display data from tableData in changed order and then justify each element to the right based on length of longest element in each list so it will display something like this:</p>
<pre><code>jabłka Alicja psy

pomarańcze Bob koty
</code></pre>
<p>and so on..</p>
<p>I know that I must get the first element of each nested list, then the second etc but I'm really struggling to to this and I'm hoping that you can help me with that.</p>
<p>PS Don't worry about that strange letters in list items, it's my native language :)</p>
<pre><code>  tableData = [
    ['jabłka', 'pomarańcze', 'wiśnie', 'banany'],
    ['Alicja', 'Bob', 'Karol', 'Dawid'],
    ['psy', 'koty', 'łosie', 'gęsi']
]

def printTable():
    colWidth = [0] * len(tableData)

    for i in range(len(tableData)):
        for j in range(len(tableData[i])):
                if colWidth[i] &lt; len(tableData[i][j]):
                    colWidth[i] = len(tableData[i][j])



printTable()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To iterate over the "columns" of a nested list, use the Python idiom <code>zip(*tableData)</code>:</p>
<pre><code>for col in zip(*tableData):
    print(col)
# ('jabłka', 'Alicja', 'psy')
# ('pomarańcze', 'Bob', 'koty')
# ('wiśnie', 'Karol', 'łosie')
# ('banany', 'Dawid', 'gęsi')
</code></pre>
<p>This way you can get the length of the longest entry for each column:</p>
<pre><code>max_lens = [len(max(col, key=len)) for col in zip(*tableData)]
print(max_lens)
# [6, 10, 6, 6]
</code></pre>
<p>Printing the text actually right-justified is then just an exercise of applying the right widths to the right elements and using <a href="https://docs.python.org/3/library/stdtypes.html#str.rjust" rel="nofollow noreferrer"><code>str.rjust</code></a>:</p>
<pre><code>for row in tableData:
    print('|'.join(item.rjust(width) for item, width in zip(row, max_lens)))
# jabłka|pomarańcze|wiśnie|banany
# Alicja|       Bob| Karol| Dawid
#    psy|      koty| łosie|  gęsi
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def print_table(arr):
    for col in zip(*arr):
        print(' '.join(col))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>tableData = [
    ['jabłka', 'pomarańcze', 'wiśnie', 'banany'],
    ['Alicja', 'Bob', 'Karol', 'Dawid'],
    ['psy', 'koty', 'łosie', 'gęsi']
]

outputTable = []

for table in tableData:
    tempTable = [[len(ele),ele] for ele in table]
    tempTable = sorted(tempTable)
    tempTable = [ele[1] for ele in tempTable]
    outputTable.append(tempTable)
print(outputTable)
</code></pre>
<p>This will have inner elements sorted as per the length. Ascending order assumed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another option, not as good as the one using <code>zip</code>, is to transpose the table and then print each list separately:</p>
<pre><code>def printTable():

    # Transpose table
    result = [[elem[i] for elem in tableData] for i in range(len(tableData[0]))]

    #Print results
    for r in result:
        print(" ".join(r))

printTable()
</code></pre>
</div>
<span class="comment-copy">what is your expected output?</span>
<span class="comment-copy">Please clarify what you mean by "justify each element to the right based on length of longest element in each list." Your example display does not look right-aligned in any sense.</span>
<span class="comment-copy">You could create a pandas dataframe and transpose it ? <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.transpose.html" rel="nofollow noreferrer">pandas.pydata.org/pandas-docs/stable/generated/…</a></span>
<span class="comment-copy">It works for making the columns but it must be displayed as strings, and not as the lists. I know that i'm doing this only for practice but im trying to make it work as they said in book always. Anyway, thank.</span>
<span class="comment-copy">@Szakins See edit.</span>
<span class="comment-copy">It is simple and it works just as I needed, great!</span>
<span class="comment-copy">Yeah, but then i must get the second, third etc based on length of the inner lists.</span>
<span class="comment-copy">@Szakins updated. Can you please check?</span>
