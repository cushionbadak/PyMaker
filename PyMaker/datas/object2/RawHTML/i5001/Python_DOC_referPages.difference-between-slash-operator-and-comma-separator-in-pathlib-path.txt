<div class="post-text" itemprop="text">
<p>I <a href="https://docs.python.org/3/library/pathlib.html#operators" rel="nofollow noreferrer">read</a> that in <code>pathlib</code> we can create a child path by using <code>/</code> between two paths, where a comma would also work. However, I can't find out if there is a difference between the two cases. In the following example, the output is the same:</p>
<pre><code>from pathlib import Path

p = Path('/hello', 'world')
s = Path(p, 'how', 'are', 'you')
ns = Path(p / 'how', 'are', 'you')

print(s)
print(ns)
</code></pre>
<p>But considering that <code>pathlib</code> is heavily object-oriented, I guess there might be something different behind the scenes. Is there a difference between using <code>/</code> in Path in contrast with a comma?</p>
</div>
<div class="post-text" itemprop="text">
<p>The whole point of using the <code>/</code> operator between <code>pathlib.Path</code> objects or a <code>Path</code> object with a <code>str</code> object is so you can <em>avoid</em> wrapping everything in calls to <code>Path</code>. </p>
<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; p = Path('/hello', 'world')
&gt;&gt;&gt; p / 'how'
PosixPath('/hello/world/how')
&gt;&gt;&gt; p / 'how' / 'are' / 'you'
PosixPath('/hello/world/how/are/you')
</code></pre>
<p>The distinction isn't between using "a comma" and a <code>/</code>, it's between using <code>/</code> and the constructor, <code>Path</code>.</p>
<p>I suppose, <code>/</code> is supposed to be similar to <code>joinpath</code>:</p>
<pre><code>&gt;&gt;&gt; p.joinpath('how','are','you')
PosixPath('/hello/world/how/are/you')
</code></pre>
<p>But somewhere under the hood you are creating a new <code>Path</code> instance, so <code>Path</code> is called anyway.</p>
<p>Note, from the <a href="https://docs.python.org/3/library/pathlib.html#pure-paths" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>When several absolute paths are given, the last is taken as an anchor
  (mimicking os.path.join()â€™s behaviour):</p>
</blockquote>
<p>So they both have this behavior as well:</p>
<pre><code>&gt;&gt;&gt; '/etc' / p / '/usr'
PosixPath('/usr')
&gt;&gt;&gt; Path('/etc', p, '/usr')
PosixPath('/usr')
</code></pre>
</div>
