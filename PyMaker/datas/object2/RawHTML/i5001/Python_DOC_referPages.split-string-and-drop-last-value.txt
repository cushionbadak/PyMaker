<div class="post-text" itemprop="text">
<p>I have string:</p>
<pre><code> x = "/ls/ps/ts/00" 
</code></pre>
<p>How to split and cut last value</p>
<p>Actual output:</p>
<pre><code> y = x.split("/")
 output = ['ls', 'ps', 'ts', '00']
</code></pre>
<p>Expected Output:</p>
<pre><code>  output = /ls/ps/ts/
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>os.path</code> path manipulations to great effect here:</p>
<pre><code>import os

x = "/ls/ps/ts/00"
output = os.path.dirname(x)

print output  # prints "/ls/ps/ts"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is probably the shortest possible solution:</p>
<pre><code>x.rsplit("/", 1)[0] + "/"
#'/ls/ps/ts/'
</code></pre>
<p>And a regex-based:</p>
<pre><code>import re
re.findall("(.+/)[^/]+", x)[0]
#'/ls/ps/ts/'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use <code>split</code>, you can re-<code>join</code> the components. Since you want to maintain a trailing separator, you can add it back in later, or better yet, set the last element of the components to empty:</p>
<pre><code>y = x.split('/')
y[-1] = ''
output = '/'.join(y)
</code></pre>
<p>As a one-liner:</p>
<pre><code>output = '/'.join(s if i else '' for i, s in enumerate(x.split('/'), -x.count('/')))
</code></pre>
</div>
<span class="comment-copy">Don't you know about <i>slicing</i>? If you don't, you'd better read about it ASAP.</span>
<span class="comment-copy">use slicing like <code>x[1:-3].split("/")</code> will output <code>['ls', 'ps', 'ts']</code> as per your question string.</span>
<span class="comment-copy">meteor23, please read the <a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow noreferrer">Python tutorial chapter on strings</a></span>
<span class="comment-copy">sorry, expected output is /ls/ps/ts..edited question</span>
<span class="comment-copy">@meteor23: Updated my answer</span>
<span class="comment-copy">Maybe more explicit is to use <code>posixpath</code>  (<code>path</code> isn't <i>guaranteed</i> to split on <code>/</code>) ... also its effect on <code>/a/b/c//d</code> differs from a straight <code>.split("/")</code>)</span>
