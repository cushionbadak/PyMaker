<div class="post-text" itemprop="text">
<p>I am new to Python. I am trying to transfer data from a text file to a csv file. I have included a short description of the data of my text file and csv file. Can someone point me to the right direction of what to read up to get this done?</p>
<pre><code>**Input Text file**
01/20/18 12:19:35#
TARGET_CENTER_COLUMN=0
TARGET_CENTER_ROW=0
TARGET_COLUMN=0
BASELINE_AVERAGE=0
#
01/21/18 12:19:35#
TARGET_CENTER_COLUMN=0
TARGET_CENTER_ROW=13
TARGET_COLUMN=13
BASELINE_AVERAGE=26
#
01/23/18 12:19:36#
TARGET_COLUMN=340
TARGET_CENTER_COLUMN=223
TARGET_CENTER_ROW=3608, 3609, 3610
BASELINE_AVERAGE=28
#
01/24/18 12:19:37#
TARGET_CENTER_COLUMN=224
TARGET_CENTER_ROW=388
TARGET_COLUMN=348
BASELINE_AVERAGE=26
#
01/25/18 12:19:37#
TARGET_CENTER_COLUMN=224
TARGET_CENTER_ROW=388
TARGET_COLUMN=348
BASELINE_AVERAGE=26
#
01/27/18 12:19:37#
TARGET_CENTER_COLUMN=223
TARGET_COLUMN=3444
TARGET_CENTER_ROW=354
BASELINE_AVERAGE=25
#

**Output CSV file**
Date,Time,BASELINE_AVERAGE,TARGET_CENTER_COLUMN,TARGET_CENTER_ROW,TARGET_COLUMN
01/20/18,9:37:16 PM,0,0,0,0
01/21/18,9:37:16 PM,26,0,13,13
01/23/18,9:37:16 PM,28,223,3608,340
                    0,0,3609,0
                    0,0,3610,0
01/24/18,9:37:16 PM,26,224,388,348
01/25/18,9:37:16 PM,26,224,388,348
01/27/18,9:37:16 PM,25,223,354,344
</code></pre>
<p>Reading up online I've been able to implement this.</p>
<pre><code>import csv

txt_file = r"DebugLog15test.txt"
csv_file = r"15test.csv"
mylist = ['Date','Time','BASELINE_AVERAGE' ,'TARGET_CENTER_COLUMN', 'TARGET_CENTER_ROW','TARGET_COLUMN']
in_txt = csv.reader(open(txt_file, "r"))

with open(csv_file, 'w') as myfile:
    wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)
    wr.writerow(mylist)
</code></pre>
<p>Beyond this I was planning to start a for loop and read data till # as this would be 1 row, and then use the delimiter to find each '=' and insert the data into the appropriate location in a row list(do this by comparing the column header with the string prior to the delimiter) and populate the row accordingly. Do you think this approach is correct?</p>
<p>Thanks for your help!</p>
</div>
<div class="post-text" itemprop="text">
<p>Check out <a href="https://docs.python.org/3/library/csv.html#csv.DictWriter" rel="nofollow noreferrer">csv.DictWriter</a> for a nicer approach. You give it a list of headers and then you can give it data dictionaries which it will write for you. The writing portion would look like this:</p>
<pre><code>import csv

csv_file = "15test.csv"
headers = ['Date','Time','BASELINE_AVERAGE' ,'TARGET_CENTER_COLUMN', 'TARGET_CENTER_ROW','TARGET_COLUMN']

with open(csv_file, 'w') as myfile:
    wr = csv.DictWriter(myfile, quoting=csv.QUOTE_ALL, headers = headers)
    # data_dicts is a list of dictionaries looking like so:
    # {'Date': '01/20/18', 'Time': '12:19:35', 'TARGET_CENTER_COLUMN': '0', ...}
    wr.writerows(data_dicts)
</code></pre>
<p>As for reading your input, <code>csv.reader</code> won't be of much help: your input file isn't really anything like a csv file. You'd probably be better off writing your own parsing, although it'll be a bit messy because of the inconsistency of the input format. Here's how I would approach that. First, make a function to interpret each line:</p>
<pre><code>def get_data_from_line(line):
    line = line.strip()
    if line == '#':
        # We're between data sections; None will signal that
        return None 
    if '=' in line:
        # this is a "KEY=VALUE" line
        key, value = line.split('=', 1)
        return {key: value}
    if ' ' in line:
        # this is a "Date time" line
        date, time = line.split(' ', 1)
        return {'Date': date, 'Time': time}
    # if we get here, either we've missed something or there's bad data
    raise ValueError("Couldn't parse line: {}".format(line))
</code></pre>
<p>Then build the list of data dictionaries from the input file:</p>
<pre><code>data_dicts = []
with open(txt_file) as infh:
    data_dict = {}
    for line in infh:
        update = get_data_from_line(line)
        if update is None:
            # we're between sections; add our current data to the list,
            # if we have data.
            if data_dict:
                data_dicts.append(data_dict)
            data_dict = {}
        else:
            # this line had some data; this incorporates it into data_dict
            data_dict.update(update)
    # finally, if we don't have a section marker at the end,
    # we need to append the last section's data
    if data_dict:
        data_dicts.append(data_dict)
</code></pre>
</div>
<span class="comment-copy">You should try it and see what happens.</span>
