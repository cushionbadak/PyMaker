<div class="post-text" itemprop="text">
<p>For example, I have two numbers ranging from 0 to 15. And I wonder if there is any way to encode these two numbers in just 4-bit binary string (or possibly 5-bit)? It is known that 4 bits are needed to represent any single number from 0 to 15, but maybe you could think of your own operation on binary strings, and then recover the input numbers back from the result. For example, if I add <code>0010 + 1011</code> as standard, I get<code>1101</code>. But with the result of adding it is impossible to predict the components of the sum completely and unambiguously. Cases would have to be considered. But maybe some other own defined action? Was anyone wondering about something like that?</p>
<p>I know that the above question may not meet some portal conditions, but treat this question purely abstractly :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You need at least 8 bits to encode two numbers from 0 to 15. This is because you have (2^4)*(2^4) = 2^8 possible inputs (or 2^7 if order does not matter), and by the <a href="https://en.wikipedia.org/wiki/Pigeonhole_principle" rel="nofollow noreferrer">pigeonhole principle</a> any encoding you use that is less than 8 (or 7) bits will result in a collision, making it impossible to reconstruct your inputs in all cases.</p>
<p>To encode two 4-bit numbers into 8-bits just concatenate them:</p>
<pre><code>def encode(x,y):
    return (x &lt;&lt; 4) + y
</code></pre>
<p>And to decode just read the appropriate bits:</p>
<pre><code>def decode(z):
    return z &gt;&gt; 4, z &amp; 0xF
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; encode(11,12)
188
&gt;&gt;&gt; decode(188)
(11, 12)
&gt;&gt;&gt; 
</code></pre>
<p>And if you want to convert to and from a binary string in between you can do:</p>
<pre><code>&gt;&gt;&gt; bin(188)
'0b10111100'
&gt;&gt;&gt; int('0b10111100', 2)
188
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>(...) maybe you could think of your own operation on binary strings, and then recover the input numbers back from the result.</p>
</blockquote>
<p>No, that is not possible if you are using the same number of bits for both the operands and the result. See, for example, with 4 bits, like you say, you have 16 possible values, from 0 to 15. If you define a binary operation, assuming it is commutative (otherwise it would be even harder), the number of 2-<a href="https://en.wikipedia.org/wiki/Combination" rel="nofollow noreferrer">combinations</a> of those 16 elements (the number of possible pairs of inputs) is 120, and that is without even counting the 16 extra possibilities of using the same input twice. Hence, if you only have 16 possible values in your result, on average every possible result will correspond to between 7 and 8 possible pairs of inputs. No matter what operation you define, you would need at least 7 bits in your result to be able to reconstruct the input.</p>
<p>Another question is whether you can determine the set of <em>potential</em> inputs that produced some results. That corresponds to the concepts of <a href="https://en.wikipedia.org/wiki/Partition_(number_theory)" rel="nofollow noreferrer">number partitioning</a> for addition or <a href="https://en.wikipedia.org/wiki/Integer_factorization" rel="nofollow noreferrer">integer factorization</a> for multiplication, for example.</p>
</div>
<span class="comment-copy">are you looking for <a href="https://docs.python.org/3/library/functions.html#bin" rel="nofollow noreferrer"><code>bin()</code></a>?</span>
<span class="comment-copy">There are 2^7 possibilities and you want to represent all of them in 2^4 states?</span>
<span class="comment-copy">2^4 &lt; 16 + 16, it's impossible to fit the information into 4 bits. 2^5 bits have the required range, you just need to decide on the right encoding.</span>
<span class="comment-copy">Use a predefined mapping. Then you can define 16 different pairs of numbers, each one in the range of <code>(0..15,0..15)</code>. For reasons mentioned above, you cannot encode all <i>possible</i> ranges. What you ask is quite like "I can write on one side of a page and on the other. Is there a third side?"</span>
<span class="comment-copy">@deceze how to represent two 4-bit binary numbers by just 5 bit? for example (0101 and 1100), considering there are 16*16/2 unique pairs?</span>
<span class="comment-copy">Or, in other words, you are basically trying to encode more than 4 bits within 4 bits, which obviously is not gonna work.</span>
