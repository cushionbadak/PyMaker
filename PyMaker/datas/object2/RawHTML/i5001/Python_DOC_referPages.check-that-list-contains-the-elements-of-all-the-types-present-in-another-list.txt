<div class="post-text" itemprop="text">
<p>I have two Python lists: <em>components</em> and <em>signature</em>. I want to check whether all the <strong>types</strong> listed in <em>signature</em> match at least one of the elements in the component list.</p>
<p>Here, the signature <strong>matches</strong> the component list, because there is both a string and a float in <em>components</em>:</p>
<pre><code>signature = [float, str]
components = [1.0, [], 'hello', 1]
</code></pre>
<p>Here, <em>signature</em> <strong>does not match</strong> <em>components</em>, because there is no list type.</p>
<pre><code>signature = [float, list]
components = ['apple', 1.0]
</code></pre>
<p>How can I express this condition in Python 3?</p>
</div>
<div class="post-text" itemprop="text">
<p>You may use combination of <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><strong><code>all()</code></strong></a> and <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><strong><code>any()</code></strong></a> with nested <em>generator expression</em> to achieve this. Here I am using <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer"><strong><code>isinstance()</code></strong></a> to check for each <code>type</code> in your <code>signature</code> list matches with the object in <code>components</code> list. Using this, your custom function will be as:</p>
<pre><code>def check_match(signature, components):
    return all(any(isinstance(c, s) for c in components) for s in signature)
</code></pre>
<p>Sample Run:</p>
<pre><code># Example 1: Condition is matched - returns `True`
&gt;&gt;&gt; signature = [str, int]
&gt;&gt;&gt; components = [1, 'hello', []]
&gt;&gt;&gt; check_match(signature, components)
True

# Example 2: Condition is not matched - returns `False`
&gt;&gt;&gt; signature = [float, list]
&gt;&gt;&gt; components = ['apple', 1.0]
&gt;&gt;&gt; check_match(signature, components)
False
</code></pre>
<hr/>
<p><strong>Explanation:</strong> Above nested generator expression is comprised of two parts. First part is:</p>
<pre><code>all(...`any()` call... for s in signature)
</code></pre>
<p>Here, I am iterating <code>signature</code> list to get each element <code>s</code> present in it. <code>all()</code> will return <code>True</code> only when all the <em><code>...any() call...</code></em> logic will return <code>True</code>. Else it will return <code>False</code>.</p>
<p>Second is the <em><code>...any() call...</code></em> generator expression as:</p>
<pre><code>any(isinstance(c, s) for c in components)
</code></pre>
<p>Here, for each element <code>c</code> in <code>components</code> list, I am checking whether the type of <code>c</code> is <code>s</code> from the external generator comprehension. If any of the type matches, <code>any(..)</code> will return <code>True</code>. If none of <code>c</code> matches the condition, <code>any(...)</code> will return <code>False</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Another approach is to calculate the difference between the set of types used in components and those you have in signature.</p>
<pre><code>unique_signatures = set(signature)
components_type = set(map(type, components))

types_not_used = unique_signatures.difference(components_type)

if len(types_not_used)==0:
    print('All types used')
else:
    print('Types not used:', types_not_used)
</code></pre>
<p>I believe there are two main advantages with this solution:</p>
<ol>
<li>More efficient if your components list was long with many duplicate types, as you reduce the number of comparisons</li>
<li>How precise do you want to be in matching the class? Should subclasses pass the test? For example, <code>isinstance(1, object)</code> is <code>True</code>: is this behavior desirable to you?   </li>
</ol>
<p>Using the function provided by the (very good) answer of @Moinuddin, you have the following: </p>
<pre><code>check_match([object], [1, 2.0, 'hello'])
Out[20]: True
</code></pre>
<p>while my answer would check <code>object</code> versus ['int', 'float', 'str'] finding no match.</p>
</div>
<span class="comment-copy">Fantastic - thank you very much. I knew it would have something to do with any() and all(), but I haven't used them much in practice.</span>
