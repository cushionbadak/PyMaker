<div class="post-text" itemprop="text">
<p>I'm trying to make an iterator that prints the repeating sequence</p>
<pre><code>0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, ...
</code></pre>
<p>I want an iterator so I can use .next(), and I want it to loop around to 0 when .next() is called while the iterator is at 9.
But the thing is that I'll probably have a lot of these, so I don't just want to do <code>itertools.cycle([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code>. </p>
<p>I don't want to have that many repeated lists of the same sequence in memory. I'd rather have the function x + 1 % 10 in each of the iterators and just have the iterator increment x every time next is called. I can't seem to figure out how to do this though with itertools. Is there a pythonic way of doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can write an generator that uses <code>range</code></p>
<pre><code>def my_cycle(start, stop, step=1):
    while True:
        for x in range(start, stop, step):
            yield x

c = my_cycle(0, 10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use your own custom generator:</p>
<pre><code>def cycle_range(xr):
    while True:
        for x in xr:
            yield x
</code></pre>
<p>Assuming you are on Python 2, use:</p>
<pre><code>r = xrange(9)
it1 = cycle_range(xr)
it2 = cycle_range(xr)
</code></pre>
<p>For memory efficiency.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is one way via <code>itertools</code>:</p>
<pre><code>import itertools

def counter():
    for i in itertools.count(1):
        yield i%10

g = counter()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a custom generator like this:</p>
<pre><code>def single_digit_ints():
    i = 0
    while True:
        yield i
        i = (i + 1) % 10

for i in single_digit_ints():
    # ...
</code></pre>
</div>
<span class="comment-copy">I don't understand why you don't want to use <code>itertools.cycle</code>...</span>
<span class="comment-copy">@juanpa.arrivillaga Its not that I don't want to use it, I just dont want to use it with the list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) As I said I'll probably have a lot of these iterators, and I don't want each iterator to have its own copy of the same list of digits since that seems really wasteful.</span>
<span class="comment-copy">I believe the implementation of <code>cycle</code> effectively materializes the iterable and keeps it around, at least, that is implied by the sample implementation in the <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer">docs</a> and the warning about auxiliary storage.</span>
<span class="comment-copy">You are right. Corrected.</span>
<span class="comment-copy">Actually it is exactly that warning that made me ask this question instead of going with cycle</span>
