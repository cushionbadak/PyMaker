<div class="post-text" itemprop="text">
<p>How do I mock python method using python <code>unittest.mock</code> which will return same value passed as argument,</p>
<p>I tried,</p>
<pre><code>from unittest.mock import MagicMock

def dummy_function(value):
    "Will return same value as value passed to the function"
    return value

# To moke gettext function used in template
# Then I pass this mock method to Jinja2 template to moke gettext string
_ = MagicMock(return_value=dummy_function)
</code></pre>
<p>When I print the jinja template it displays test something like below,</p>
<pre><code>&lt;div class="order_details"&gt;\n                
&lt;legend class="badge"&gt;&amp;lt;function dummy_function at 0x10887f730&amp;gt;&lt;/legend&gt;\n            
&lt;/div&gt;\n 
</code></pre>
<p>Orignal Jinja2 template has</p>
<pre><code>&lt;div class="order_details"&gt;             
&lt;legend class="badge"&gt;_('Details')&lt;/legend&gt;           
&lt;/div&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>return_value</code> is only ever a <em>fixed object</em> to return, and you just told the mock that the result of a call is a function object.</p>
<p>You want to use the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow noreferrer"><code>side_effect</code> attribute</a> instead:</p>
<pre><code>_ = MagicMock(side_effect=dummy_function)
</code></pre>
<p>Setting <code>side_effect</code> to a function causes it to be called <em>with the same arguments as the mock</em>. See the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>If you pass in a function it will be called with same arguments as the mock and unless the function returns the <code>DEFAULT</code> singleton the call to the mock will then return whatever the function returns.</p>
</blockquote>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from unittest.mock import MagicMock
&gt;&gt;&gt; identity = lambda a: a
&gt;&gt;&gt; MagicMock(return_value=identity)('called')  # returns the function object, it won't call it
&lt;function &lt;lambda&gt; at 0x10fa61620&gt;
&gt;&gt;&gt; MagicMock(side_effect=identity)('called')   # will call the function
'called'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You directly passed the function object as return value, that's why it prints the function's <code>repr</code>(name and memory address). You need to pass the actual value you want as return, so:</p>
<pre><code>_ = MagicMock(return_value=dummy_function(somevalue))
</code></pre>
<p>But if the function always return the value passed it is useless, creating a mock is already enough so may be just do:</p>
<pre><code>_ = MagicMock(return_value=somevalue)
</code></pre>
<p>Then call your mock as you would.</p>
<p><em>Sidenote: What is the purpose of the <code>_</code> usage instead of a name? Are you mocking gettext ? If not or would be cleaner to give the mock a name, the best IMO is to name the mock like the real function you are mocking for explicitness.</em></p>
</div>
<span class="comment-copy">You rock, it worked like charm :)</span>
