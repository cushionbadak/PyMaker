<div class="post-text" itemprop="text">
<p>This is kind of hard to explain, so I thank you for your patience. This is what I get for wandering into a debug logging API. I want to get values from all over a 444 line long program. The problem is, they are all over so I can't just go:<br/>
<code>def func(foo, goo, hoo, joo):</code><br/>
I need to get a dictionary, two integers, and a string into a function called strlogger(). One of the integers I need to get from a other function called ifelogger(). How would I do this? Example:  </p>
<pre><code>import random
def strlogger():
    # Get Dictionary, int1, int2, and string
    print('Dict: ' + dict,
          'int1: ' + int1,
          'int2: ' + int2,
          'str : ' + string)
def ifelogger():
    random.randint(0, 999999999)
</code></pre>
<p>The function is called like so: <code>ifelogger()</code>. If there is any easy (or hard, I dont care, as long as it works) solutions to this problem I am having, it would be much appreciated. If you have any question, just comment. Thanks! </p>
<hr/>
</div>
<div class="post-text" itemprop="text">
<p>Make the interesting variables have file-level scope, instead of hidden inside function-level scopes ...</p>
<pre><code>dict = {}
int1 = 1
int2 = 2
string = 'foo'

def strlogger():
    # Get Dictionary, int1, int2, and string
    print('Dict: ' + dict,
          'int1: ' + int1,
          'int2: ' + int2,
          'str : ' + string)

def ifelogger():
    global int1
    int1 = random.randint(0, 999999999)
</code></pre>
<p>Note that if you change a value of a global variable within a function (not just read it), you must declare it as <code>global</code> otherwise Python will create a variable local to the function.</p>
<p>In <code>ifelogger</code>, when <code>int1</code> is set, it is the <code>int1</code> variable at file-level scope.  This is the same <code>int1</code> that <code>strlogger</code> will see when it prints the values out.</p>
</div>
<span class="comment-copy"><code>...they are all over ...</code> - What <a href="https://docs.python.org/3/reference/executionmodel.html#resolution-of-names" rel="nofollow noreferrer">scope</a> are those objects in? How is the function called?</span>
<span class="comment-copy">If I understand correctly, you may benefit from learning about and using the python standard logging library rather than using print statements to print them out to the screen. And Why not just add logging to each location rather than trying to aggregate them in a single location when they're already all over. <a href="https://docs.python.org/2/howto/logging.html" rel="nofollow noreferrer">docs.python.org/2/howto/logging.html</a></span>
<span class="comment-copy">Keep them in a module level dictionary then go through the code and replace all references to their names with <code>dict[name]</code>.?</span>
<span class="comment-copy">This is terrible advice. Making variable global for the sake of debugging is an antipattern if I ever saw one. Use logging, that's what its for.</span>
<span class="comment-copy">I agree but OP says "I don't care, as long as it works".  It would be really hard to answer questions on SO if only best practices could be given.  I assume OP has a valid reason for quick &amp; dirty.  He's trying to get values from "all over" so he "can't just go" logging.debug(a,b,c,d)</span>
<span class="comment-copy">You make a good point. But logging might be the easier solution in the long term for OP. I think OP should still know that they shouldn't be doing things like this.</span>
