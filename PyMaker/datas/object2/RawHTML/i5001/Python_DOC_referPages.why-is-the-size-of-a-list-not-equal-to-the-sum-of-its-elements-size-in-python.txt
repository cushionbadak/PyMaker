<div class="post-text" itemprop="text">
<p><strong>Problem</strong>: In Python program, the size of the list in bytes is less than the size of all its elements. 
Here is my code to test. I use <em>sys.getsizeof()</em> to get the size of variables as bytes.</p>
<pre><code>import sys
l = range(10)
for i in range(0,10):
    print(sys.getsizeof(l[i]))
    i = i + 1
#and it returns 12 bytes for  each element
print(sys.getsizeof(l))
#and it returns 76 , not 120
</code></pre>
<p>What is the reason?</p>
</div>
<div class="post-text" itemprop="text">
<p>As per the <a href="https://docs.python.org/3/library/sys.html#sys.getsizeof" rel="nofollow noreferrer">documentation</a> for <code>sys.getsizeof</code>: </p>
<blockquote>
<p>"Only the memory consumption directly attributed to the object is accounted for, not the memory consumption of objects it refers to."</p>
</blockquote>
<p>This means that the storage needs for each element will not be part of the number of bytes of the data structure (<code>list</code>) need. Thus, you will have to add the size of the list and the individual elements to get the total memory needed to store the structure.</p>
<p>But the memory will still (normally) increase with an increasing list. This is because the <code>list</code> needs memory to hold the references to the elements. But, due to the underlying implementation, the list may request, or hold on to, more memory than is actually needed to keep its references. This is typically seen when executing a <code>pop</code> operation on the list. This typically does not reduce the memory footprint of the <code>list</code> (your mileage may vary):</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; l = [0,1,2]
&gt;&gt;&gt; sys.getsizeof(l)
88
&gt;&gt;&gt; l.pop()
2
&gt;&gt;&gt; l
[0, 1]
&gt;&gt;&gt; sys.getsizeof(l)
88
&gt;&gt;&gt; l.append(2)
&gt;&gt;&gt; l
[0, 1, 2]
&gt;&gt;&gt; sys.getsizeof(l)
88
&gt;&gt;&gt; l.append(3)
&gt;&gt;&gt; l
[0, 1, 2, 3]
&gt;&gt;&gt; sys.getsizeof(l)
120
&gt;&gt;&gt; l.pop()
3
&gt;&gt;&gt; l
[0, 1, 2]
&gt;&gt;&gt; sys.getsizeof(l)
120
</code></pre>
<p>Thus, typically when adding a new element, the <code>list</code> memory footprint will increase, but it will not decrease again once the element is popped. However, once an element <em>is</em> popped, there will be a "spare" position in the list that can be re-used for a new element (reference), which allows the list to increase its length without increasing its memory footprint.</p>
</div>
<span class="comment-copy">Please fix your indentation</span>
<span class="comment-copy">Have you read the documentation for sys.getsizeof?</span>
<span class="comment-copy">yes , i do , it will return the size of an object in bytes</span>
<span class="comment-copy">so i think it will give me the bytes of list and its element , am i wrong?</span>
<span class="comment-copy">+1. This <i>overcommit</i> behavior is only notable in mutable objects, immutable objects does not have this property for obvious reasons.</span>
<span class="comment-copy">great answer , thanks , wish i can give a +1</span>
