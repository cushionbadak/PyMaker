<div class="post-text" itemprop="text">
<p>I want to read two different files from sys.stdin, I can read and write file but there is no separation from first and second file.</p>
<p>When I run below code on cmd win 10 and python 3.6:</p>
<pre><code>D:\digit&gt;cat s.csv s2.csv
</code></pre>
<p>Result is:</p>
<pre>
1
2
3
4
5
1
2
3
4
5
6
7
</pre>
<p>I can print both files.</p>
<p>My python code is:</p>
<pre><code>import sys 
import numpy as np

train=[]
test=[]

#Assume below code is function 1 which just and must read s.csv
reader = sys.stdin.readlines()
for row in reader:          
    train.append(int(row[0]))
train = np.array(train)

print(train)

#I need some thing here to make separation
#sys.stdin.close()
#sys.stdin = sys.__stdin__ 
#sys.stdout.flush() 

#Assume below code is function 2 which just and must read s2.csv
reader = sys.stdin.readlines()
for row in reader:          
    test.append(int(row[0]))
test = np.array(test)

print(test)
</code></pre>
<p>I run below command on cmd prompt:</p>
<pre><code>D:\digit&gt;cat s.csv s2.csv | python pytest.py
</code></pre>
<p>Result is:</p>
<pre><code>[1 2 3 4 5 1 2 3 4 5 6 7]
[]
</code></pre>
<p>Do I need reset sys.stdin for next file?
I used below ones but none of them was answer:</p>
<pre><code>sys.stdin.close()
sys.stdin = sys.__stdin__ 
sys.stdout.flush() 
</code></pre>
<p>Thank you in advanced for any help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let me try to explain.</p>
<pre><code>d:\digit&gt;cat s.csv s2.csv
</code></pre>
<p>has only 1 output, not 2. What it does it 'streams' the content of <code>file1</code> to <code>stdout</code> and then 'streams' the content of <code>file2</code> to <code>stdout</code>, <em>wihtout any pause or seperator!!</em></p>
<p>so only 1 'stream' of outputs, which then you redirect using the | to your pyton script:</p>
<pre><code>| pytest.py
</code></pre>
<p>So <code>pytest.py</code> will receive 1 'stream' of inputs, it doesn't know any better or more.</p>
<p>If you want to process the files seperately by <code>pytest.py</code>, you can do the following</p>
<pre><code>D:\digit&gt;cat s.csv | python pytest.py # process the first file
D:\digit&gt;cat s2.csv | python pytest.py # process the second file
</code></pre>
<p>or on a one liner:</p>
<pre><code>D:\digit&gt;cat s.csv | python pytest.py &amp;&amp; cat s2.csv | python pytest.py
</code></pre>
<p>Just remember that the <code>pytest.py</code> is actually running <strong><em>twice</em></strong>. So you need to adapt your python script for this.</p>
<p>But while you are editing your python script...</p>
<p><strong><em>What you should do:</em></strong>
If you want both file in your <code>pytest.py</code>, then you should write some code to read both files in your python script. If it is csv structured data, then have a look at the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv module for reading and writing csv files</a></p>
<p><strong>[EDIT based on comment:]</strong></p>
<blockquote>
<p>I could read multiple files it by pandas "pd.read_csv" , but my
  problem is how can I do it by sys.stdin?</p>
</blockquote>
<p>You should really question why you are so focused on using <code>stdin</code>. Reading it from within the python script is likely to be much more effective.</p>
<p>If you must use <code>stdin</code> then you can deploy various, but external to python, headers, footers, separators. Once you have this defined and able to do so, then you can change the code in python to do various functions depending on what header/footer/separator is received from <code>stdin</code>. </p>
<p>This all sounds a bit complex and open for error. I would strongly advice you to reconsider the use of stdin as input for your script. Alternatively please update your question with the technical requirements and limitations you are facing which limits you to use stdin.</p>
<p><strong>[EDIT based on comment:]</strong></p>
<blockquote>
<p>I want to load these files I Hadoop ecosystem and I am using Hadoop
  streaming for that</p>
</blockquote>
<p>Somehow, you need to "signal" your python script that it is processing a new file, with new information. </p>
<p>Suppose you have 2 files, the first line need to be some sort of "header" indicating the file, and which function needs to execute on the remainder of the data, until a new "header" is received.</p>
<p>so lets say that your "train" data is prefixed with the line <code>@is_train@</code> and your "test" data is prefixed with the line <code>@is_test@</code></p>
<p><em>How you do that in your environment, is not part of the scope of this question</em></p>
<p>Now the redirection to stdin will send these two headers before the data. And you can have python to check for those, example:</p>
<pre><code>import sys 
import numpy as np

train=[]
test=[]

is_train = False
is_test = False

while True:
    line = sys.stdin.readline()
    if '@stop@' in line:
        break
    if '@is_train@' in line:
        is_train = True
        is_test = False
        continue
    if '@is_test@' in line:
        is_train = False
        is_test = True
        continue
    #if this is csv data, you might want to split on ,
    line = line.split(',')
    if is_train:
        train.append(int(line[0]))
    if is_test:
        test.append(int(line[0]))

test = np.array(test)
train = np.array(train)

print(train)
print(test)
</code></pre>
<p>As you see at the code, you also need a "footer" to determine when the data has come to an end, in this example <code>@stop@</code> is chosen. </p>
<p>One way of sending header/footers, could be:</p>
<pre><code>D:\digit&gt;cat is_train.txt s.csv is_test.txt s2.csv stop.txt | python pytest.py
</code></pre>
<p>and the three extra files, just contain the appropriate header or footer</p>
</div>
<div class="post-text" itemprop="text">
<p>Another solution is:</p>
<pre><code>import sys

train=[]

args = sys.stdin.readlines()[0].replace("\"", "").split()

for arg in args:
    arg=arg.strip()
    with open(arg, "r") as f:
        train=[]
        for line in f:
            train.append(int(line))   
        print(train)    
</code></pre>
<p>s.txt is:</p>
<pre><code>1
2
3
</code></pre>
<p>s2.txt is:</p>
<pre><code>7
8
9

D:\digit&gt;echo s.txt s2.txt | python argpy.py
[1, 2, 3]
[7, 8, 9]
</code></pre>
<p>The key is two points:</p>
<ol>
<li><p>Using echo instead of cat in order to prevent concatenation
The link to study more: <a href="https://unix.stackexchange.com/questions/363534/difference-between-cat-file-txt-and-echo-file-txt">Difference between 'cat &lt; file.txt' and 'echo &lt; file.txt'</a></p></li>
<li><p>Try to read in for loop for each new file by splitting each file and store in args.
<a href="https://stackoverflow.com/questions/43554363/how-to-run-code-with-sys-stdin-as-input-on-multiple-text-files">How to run code with sys.stdin as input on multiple text files</a></p></li>
</ol>
<p>Happy bc I`ve done it :)</p>
</div>
<span class="comment-copy">What are the contents of the two files?</span>
<span class="comment-copy">When you use <code>cat</code>, you send both the given files to <code>stdout</code>, and then you pipe that to <code>stdin</code> in your Python script. They are not separate: you are getting them both, concatenated. Your list <code>[1 2 3 4 5 1 2 3 4 5 6 7]</code> contains the contents of <i>both</i> files.</span>
<span class="comment-copy">@FlyingTeller they are two files as s.csv and s2.csv , as I`ve shown. s.csv one column [1 2 3 4 5] and s2.csv [1 2 3 4 5 6 7].</span>
<span class="comment-copy">@khelwood I did not understand what you meant !?</span>
<span class="comment-copy">You can't. If you want the files separate, then don't concatenate them. You can read files inside your Python script. They don't need to go through stdin.</span>
<span class="comment-copy">Thank you for answer, it seems better, but if I run any of commands, both different files will go inside same fuction, if I assume that each readin and print are different function. There is important problem that how I conduct each file should go through its own function. Is there any other way such as args = sys.stdin.readlines()[0] to distinguish between reading from I/O?</span>
<span class="comment-copy">I could read multiple files it by pandas "pd.read_csv" , but my problem is how can I do it by sys.stdin?</span>
<span class="comment-copy">I thought that have mentioned sys.stdin explicitly in different sentence and title.</span>
<span class="comment-copy">Ahhha ok I found out confusion. I wanted to summarize and make my question simple to understand. I want to load these files I Hadoop ecosystem and I am using Hadoop streaming for that (I know I can also use pig, hive or Kafka) but I want to test map reducing with one python file which is only map and two files as train and test data for distribution across multiple machines in a Hadoop cluster. For more clarification please look at: <a href="https://stackoverflow.com/questions/48916243/python-hadoop-streaming-on-windows-script-not-a-valid-win32-application" title="python hadoop streaming on windows script not a valid win32 application">stackoverflow.com/questions/48916243/â€¦</a></span>
<span class="comment-copy">Although I think and I am sure in order to ask one question is better that everyone confine problem to specific domain for avoiding to judge about cons pros. This way can help who asks and answers to do more effectively if and only if they try to read better question. Otherwise I have to tag so many skills (such as Hadoop, map reduce and etc) which prevent to someone answer my question.</span>
<span class="comment-copy">nice one, good find. but this comes back to reading from within python, which I would prefer anyway... :-)</span>
<span class="comment-copy">You are not using "Hadoop streaming" here, and I thought that was your limiting requirement.</span>
