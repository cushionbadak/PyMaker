<div class="post-text" itemprop="text">
<p>I have a string like this,</p>
<pre><code>my_str ='·in this match, dated may 1, 2013 (the "the match") is between brooklyn centenniel, resident of detroit, michigan ("champion") and kamil kubaru, the challenger from alexandria, virginia ("underdog").'
</code></pre>
<p>Now, I want to extract the current <code>champion</code> and the <code>underdog</code> using keywords <code>champion</code> and <code>underdog</code> . </p>
<p>What is really challenging here is both contender's names appear before the keyword inside parenthesis. I want to use regular expression and extract information. </p>
<p>Following is what I did,</p>
<pre><code>champion = re.findall(r'("champion"[^.]*.)', my_str)
print(champion)

&gt;&gt; ['"champion") and kamil kubaru, the challenger from alexandria, virginia ("underdog").']


underdog = re.findall(r'("underdog"[^.]*.)', my_str)
print(underdog)

&gt;&gt;['"underdog").']
</code></pre>
<p>However, I need the results, <code>champion as</code>:</p>
<pre><code>brooklyn centenniel, resident of detroit, michigan
</code></pre>
<p>and the <code>underdog</code> as:</p>
<p><code>kamil kubaru, the challenger from alexandria, virginia</code></p>
<p>How can I do this using regular expression? (I have been searching, if I could go back couple or words from the keyword to get the result I want, but no luck yet) Any help or suggestion would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use named captured group to capture the desired results:</p>
<pre><code>between\s+(?P&lt;champion&gt;.*?)\s+\("champion"\)\s+and\s+(?P&lt;underdog&gt;.*?)\s+\("underdog"\)
</code></pre>
<ul>
<li><p><code>between\s+(?P&lt;champion&gt;.*?)\s+\("champion"\)</code> matches the chunk from <code>between</code> to <code>("champion")</code> and put the desired portion in between as the named captured group <code>champion</code></p></li>
<li><p>After that, <code>\s+and\s+(?P&lt;underdog&gt;.*?)\s+\("underdog"\)</code> matches the chunk upto <code>("underdog")</code> and again get the desired portion from here as named captured group <code>underdog</code></p></li>
</ul>
<p><strong>Example:</strong></p>
<pre><code>In [26]: my_str ='·in this match, dated may 1, 2013 (the "the match") is between brooklyn centenniel, resident of detroit, michigan ("champion") and kamil kubaru, the challenger from alexandria, virginia 
    ...: ("underdog").'

In [27]: out = re.search(r'between\s+(?P&lt;champion&gt;.*?)\s+\("champion"\)\s+and\s+(?P&lt;underdog&gt;.*?)\s+\("underdog"\)', my_str)

In [28]: out.groupdict()
Out[28]: 
{'champion': 'brooklyn centenniel, resident of detroit, michigan',
 'underdog': 'kamil kubaru, the challenger from alexandria, virginia'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There will be a better answer than this, and I don't know regex at all, but I'm bored, so here's my 2 cents.  </p>
<p>Here's how I would go about it: </p>
<pre><code>words = my_str.split()
index = words.index('("champion")')
champion = words[index - 6:index]
champion = " ".join(champion)
</code></pre>
<p>for the underdog, you will have to change the 6 to a 7, and <code>'("champion")'</code> to <code>'("underdog").'</code></p>
<p>Not sure if this will solve your problem, but for this particular string, this worked when I tested it.  </p>
<p>You could also use <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">str.strip()</a> to remove punctuation if that trailing period on underdog is a problem.  </p>
</div>
<span class="comment-copy">What output is it giving you?</span>
<span class="comment-copy"><code>print(champion)</code> gives me <code>'ch, da'</code></span>
<span class="comment-copy">oops.  See my edit.  One instance of <code>my_str</code> has been replaced by <code>words</code></span>
