<div class="post-text" itemprop="text">
<p>How can I read the header of an XML document in Python 3?</p>
<p>Ideally, I would use the defusedxml module as the <a href="https://docs.python.org/3/library/xml.html" rel="nofollow noreferrer">documentation states that it's safer</a>, but at this point (after hours of trying to figure this out), I'd settle for any parser.</p>
<p>For example, I have a document (this is actually from an exercise) that looks like this:</p>
<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt; &lt;!-- this is root --&gt;
    &lt;!-- CONTENTS --&gt;
&lt;/plist&gt;
</code></pre>
<p>I'm wondering how to access everything before the root node.</p>
<p>This seems like such a general question that I thought I would easily find an answer online, but I guess I was wrong. The closest thing I found was <a href="https://stackoverflow.com/questions/16155102/how-to-read-in-xml-header-version-using-python">this question on Stack Overflow</a>, which didn't really help (I looked into <a href="https://docs.python.org/3/library/xml.sax.html" rel="nofollow noreferrer">xml.sax</a>, but couldn't find anything relevant).</p>
</div>
<div class="post-text" itemprop="text">
<p>I tried <a href="https://docs.python.org/3.6/library/xml.dom.minidom.html" rel="nofollow noreferrer"><code>minidom</code></a> which is vulnerable to billion laughs and quadratic blowup attacks according to <a href="https://docs.python.org/3/library/xml.html" rel="nofollow noreferrer">link</a> you provided. Here is my code:</p>
<pre><code>from xml.dom.minidom import parse

dom = parse('file.xml')
print('&lt;?xml version="{}" encoding="{}"?&gt;'.format(dom.version, dom.encoding))
print(dom.doctype.toxml())
#or
print(dom.getElementsByTagName('plist')[0].previousSibling.toxml())
#or
print(dom.childNodes[0].toxml())
</code></pre>
<p>Output:</p>
<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist  PUBLIC '-//Apple Computer//DTD PLIST 1.0//EN'  'http://www.apple.com/DTDs/PropertyList-1.0.dtd'&gt;
&lt;!DOCTYPE plist  PUBLIC '-//Apple Computer//DTD PLIST 1.0//EN'  'http://www.apple.com/DTDs/PropertyList-1.0.dtd'&gt;
&lt;!DOCTYPE plist  PUBLIC '-//Apple Computer//DTD PLIST 1.0//EN'  'http://www.apple.com/DTDs/PropertyList-1.0.dtd'&gt;
</code></pre>
<p>You can use <code>minidom</code> from <code>defusedxml</code>. I downloaded that package and just replaced import with <code>from defusedxml.minidom import parse</code> and code worked with same output.</p>
</div>
<div class="post-text" itemprop="text">
<p>With the <a href="http://lxml.de" rel="nofollow noreferrer">lxml</a> library, you can access document properties via a <a href="http://lxml.de/api/lxml.etree.DocInfo-class.html" rel="nofollow noreferrer"><code>DocInfo</code></a> object.</p>
<pre><code>from lxml import etree

tree = etree.parse('input.xml')
info = tree.docinfo
v, e, d = info.xml_version, info.encoding, info.doctype

print('&lt;?xml version="{}" encoding="{}"?&gt;'.format(v, e))
print(d)
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this code !
I am assuming the temporary xml in variable 's' .</p>
<p>I am declare a class of MyParser having a function of XmlDecl to print the XML header &amp; the purpose of second function is to parse the XML header .so first create the parser by using the ParserCreate() function defined in xml.parsers .</p>
<p>Now create the object of MyParser class 'parser' &amp; call the parse function with the object reference.</p>
<pre><code>from xml.parsers import expat

s = """&lt;?xml version='1.0' encoding='iso-8859-1'?&gt;
       &lt;book&gt;
           &lt;title&gt;Title&lt;/title&gt;
           &lt;chapter&gt;Chapter 1&lt;/chapter&gt;
       &lt;/book&gt;"""

class MyParser(object):
    def XmlDecl(self, version, encoding, standalone):
        print ("XmlDecl", version, encoding, standalone)

    def Parse(self, data):
        Parser = expat.ParserCreate()
        Parser.XmlDeclHandler = self.XmlDecl
        Parser.Parse(data, 1)

parser = MyParser()
parser.Parse(s)
</code></pre>
</div>
<span class="comment-copy">Brilliant! That's exactly what I was looking for. The third option (childNodes[0]) seems to be the most generic for getting all headers.</span>
<span class="comment-copy">I'm glad I helped :-)</span>
<span class="comment-copy">Thanks! This works perfectly well, but I've accepted @mike-kaskun's answer because (a) of defusedxml and (b) minidom seems to be a default package (at least on my system) vs lxml which I had to install.</span>
<span class="comment-copy">Thanks, but see clarification in question. Also, I find it difficult to follow your code; maybe some comments or simplifications would help.</span>
<span class="comment-copy">yes sure ! I am updating the description above in a while @Ratler</span>
<span class="comment-copy">@Ratler done the updates .Plz check it !</span>
<span class="comment-copy">that doesn't really help actually. And it's still not getting the full headers before the root node.</span>
