<div class="post-text" itemprop="text">
<p>How do I multiply a Linear expression with a constant? I have written the code but it always returns <code>0.0</code>. </p>
<p>Need help in multiplying a constant with a linear expression.</p>
<pre><code>from gurobipy import LinExpr , GRB, Model, quicksum

TimePeriod = [1]
model = Model()
Vars = dict()

def creatingvarriables():
    for t in TimePeriod:
        Vars["y_" + str(t)] = model.addVar(vtype=GRB.BINARY,name="y_" + str(t))
        lhs = Vars["y_" + str(t)]
        lhs = LinExpr()
        model.update()                

        #expr1 = LinExpr(2.0*x)
        expr = LinExpr(2.0)
        model.update()


        #print lhs
        #print type(lhs1)

        Vars["y_" + str(t)] = lhs*expr            

        model.update()

        #print lhs
        #print lhs1                
        #print (Vars["y_"+ str(t)]*expr)
        print (Vars["y_"+ str(t)])


creatingvarriables()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>TL;DR - This is not the way gurobi is used, see code example at the bottom</h2>
<p>Let's first go over some code lines -  </p>
<pre><code>Vars["y_" + str(t)] = model.addVar(vtype=GRB.BINARY,name="y_" + str(t))
</code></pre>
<p>The <code>model.addVar</code> method adds a new variable named y_1, which you store in the dictionary <code>Vars</code>.</p>
<pre><code>lhs = Vars["y_" + str(t)]
</code></pre>
<p>This creates a new (python) variable, <code>lhs</code>, and points it to the gurobi variable you created before (y_0). Note that since you didn't call <code>model.update()</code> yet, y_1 can not be used in any expression at this point.</p>
<pre><code>lhs = LinExpr()
</code></pre>
<p>I assume you wanted to create the linear expression <code>1*y_1 + 0</code>, but this line doesn't do it.</p>
<p><code>LinExpr()</code> creates a new <strong>empty</strong> linear expression, equivalent to<code>0*y_1 + 0</code>. That's because you didn't supply any argument to the constructor of the LinExpr object (documentation for the constructor <a href="http://www.gurobi.com/documentation/8.0/refman/py_linexpr2.html" rel="nofollow noreferrer">here</a>), so gurobi does not know <strong>which</strong> expression you want, and defaults to zero .</p>
<p>Instead, you can call <code>LinExp(lhs)</code>, which will create the expression you wanted. You can then multiply it by 2 by typing <code>lhs = 2 * lhs</code>, or even create the end expression directly using <code>LinExp([2], [Vars["y_" + str(t)]])</code> - here the first argument is a list of coefficients, and the second one is a list of gurobi variables.</p>
<p>However, gurobi has a very convenient syntax for creating expressions (using <a href="https://docs.python.org/3/reference/datamodel.html#specialnames" rel="nofollow noreferrer">operator overloading</a>), so you usually shouldn't explicitly call the constructor of LinExpr yourself, but rather use the gurobi variables directly in mathematical expressions.</p>
<p>Here's a simple working code -</p>
<pre><code>from gurobipy import Model
model = Model()
var = model.addVar(name="x")
model.update()
print 2 * var
</code></pre>
<p>Which prints</p>
<pre><code>&lt;gurobi.LinExpr: 2.0 x&gt;
</code></pre>
</div>
<span class="comment-copy">As an aside, take a look at <a href="https://www.python.org/dev/peps/pep-0008/?" rel="nofollow noreferrer">Python's style guide</a> for conventions on choosing variable and function names.</span>
