<div class="post-text" itemprop="text">
<p>I am new to coding and still trying to learn python coding.
I am trying to write a program that generates 5 random numbers and stores in a list. My output should end up like this: [2, 34, 23, 5, 22] </p>
<p>I am trying to find the average, lowest, and highest number from the list. I tried a few other ways to find the answers but I get the final number in the list as my highest, lowest, and average number. Can anyone help me solve this issue? </p>
<pre><code>import random

def main():
    num = []
    for n in range(5):
        num = [(random.randint(1,100))]
    print(num)

    lowest = min(num)
    print("The lowest number is: ", lowest)

    highest = max(num)
    print("The highest number is: ", highest)

    total = 0.0
    for value in num:
        total += value

    average = total / len(num)
    print("The average is: " , average)


main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use <a href="https://docs.python.org/2/library/random.html#random.randint" rel="nofollow noreferrer"><code>random.randint</code></a> to get your random list using a <em>list comprehension</em> as:</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; range_start, range_end = 1, 100
&gt;&gt;&gt; rand_list = [random.randint(range_start, range_end) for i in range(5)]
#                                       range(5) to generate 5 numbers ^
</code></pre>
<p>Here, <code>random.randint(range_start, range_end)</code>  will returned a random integer between <code>range_start</code> and <code>range_end</code>, which in this case is <code>1</code> and <code>100</code> respectively. For example, my list is as:</p>
<pre><code>&gt;&gt;&gt; rand_list
[18, 18, 2, 3, 0]
</code></pre>
<p>For <strong>finding average</strong>, do:</p>
<pre><code>&gt;&gt;&gt; sum(rand_list)/(len(rand_list)*1.0)
8.2                           #    ^ Needed in Python 2.x because
                              #      division of two `int` returns a integer value
                              #      in Python 2.x . Not needed in Python 3.x   
</code></pre>
<p>For <strong>finding max value use <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max</code></a></strong> on the list:</p>
<pre><code>&gt;&gt;&gt; max(rand_list)
18
</code></pre>
<p>For <strong>finding min value use <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer"><code>min</code></a></strong> on the list:</p>
<pre><code>&gt;&gt;&gt; min(rand_list)
0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is in the definition of <code>num</code>. Define <code>num</code> as the following list comprehension and your script works:</p>
<pre><code>num = [random.randint(1,100) for _ in range(5)]
</code></pre>
<p>The reason your definition fails is because <code>num = [(random.randint(1,100))]</code> just creates a list of a single integer. If you wish to perform this in a loop, you can do so as follows:</p>
<pre><code>for n in range(5):
    num.append(random.randint(1,100))
</code></pre>
<p>However, a pythonic idiom would be to use the list comprehension as mentioned earlier.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for n in range(5):
        num = [(random.randint(1,100))]
    print(num)
</code></pre>
<p>For each n, you're replacing the whole <code>num</code> list with a list containing only <code>random.randint(1,100)</code>.</p>
</div>
<span class="comment-copy">Note that when you <code>print(num)</code> there's only one value in it; <code>num = [(random.randint(1,100))]</code> is <i>replacing</i> the existing list and any values in it.</span>
<span class="comment-copy">ive been doing some test, because i did not know if this method would be more efficient than using just a loop or even reduce the list. seems all 3 of them are returning weird results, ones being faster sometimes other other executions, all of them in almost the same numbers. So since this is the sortest code and more redeable this should the way to go :D</span>
<span class="comment-copy">@Netwave You should be using <a href="https://docs.python.org/2/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code></a> module to measure the performance. And as far as I know, these are best <i>(most performance efficient)</i> ways to achieve there respective tasks.</span>
<span class="comment-copy">yeah, I know I should use timeit, either way those are the most eficient for <b>each</b> task, but for me makes sense that iterating just once and doing the operations should be more efficient....but is not or at least wasnt when i tried</span>
