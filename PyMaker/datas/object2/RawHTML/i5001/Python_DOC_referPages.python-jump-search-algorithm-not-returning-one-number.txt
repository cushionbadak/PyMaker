<div class="post-text" itemprop="text">
<p>I'm trying to implement a jump search algorithm. However, in this example below, I cannot find the number of 72, even though it is clearly in the list that I defined. Here is the code, can someone explain to me why the rest of the numbers can be returned, but not 72 which is at position index 0 on the list?</p>
<pre><code>def jumpSearch(list, number, constant) :
    i = 0
    counter = 0
    while (list[i] &lt; number and i + constant &lt; len(list) and list[i + constant] &lt; number) :
        i = i + constant

    for j in range (i, i + constant, 1) :
        if (list[j] == number) :
            return list[j]
    return None

mylist = [72, 56, 93, 8, 22, 41, 88, 23, 60]
mylist.sort()
print(jumpSearch(mylist, 72, 3))
</code></pre>
<p>I have seen other examples on the net, however, I really wanted to test my own abilities at writing code and logic from scratch in order to get the result. </p>
<p>So my rudimentary understanding of jump search is preventing me from knowing whether or not this is a 'correct' way of doing a jump search. Any evaluation or improvements to the code or even a sample of the 'optimal and right' way of writing a jump search would be valuable to my learning!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you look at your <code>while</code> loop you'll see that what happens when <code>list[i + constant]</code> is no longer smaller than 72:</p>
<pre><code>while (... list[i + constant] &lt; number):
</code></pre>
<p>You increment when <code>list[i + constant]</code> is smaller, not when equal or larger. </p>
<p>So we know that the value is between <code>list[i]</code> and <code>list[i + constant]</code> <em>inclusive</em>. However, <code>range()</code> produces numbers <em>exclusive</em> the end value. From the <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow noreferrer"><code>range()</code> documentation</a>:</p>
<blockquote>
<p>For a positive <em>step</em>, the contents of a range <code>r</code> are determined by the formula <code>r[i] = start + step*i</code> where <code>i &gt;= 0</code> <strong>and <code>r[i] &lt; stop</code></strong>.</p>
</blockquote>
<p>(Bold emphasis mine).</p>
<p>So you have an off-by-one error. The last value produced by the <code>range()</code> is <code>i + constant - 1</code>, and <code>72</code> is found at <code>i + constant</code> instead.</p>
<p>You need to add one to your end value and search through <code>range(i, i + constant + 1)</code>:</p>
<pre><code>for j in range (i, i + constant + 1):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The index of 72 is <strong>exactly</strong> on one of the steps (6 in your case, and your steps are 3), and you miss it because you used a <code>&lt;</code> instead of <code>&lt;=</code> sign.</p>
<p>Change <code>list[i + constant] &lt; number</code> to <code>list[i + constant] &lt;= number</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I added some debugging output to your function, so that you can see what's going on:</p>
<pre><code>def jumpSearch(mylist, number, constant):
    i = 0
    counter = 0

    while (mylist[i] &lt; number 
          and i + constant &lt; len(mylist)
          and mylist[i + constant] &lt; number):

        format_str= "In while:\n\t mylist[{}]={},number={},i+constant={},len(mylist)={},mylist[i+constant]={}"

        print( 
            format_str.format(
                i,
                mylist[i], 
                number,
                constant,
                len(mylist),
                mylist[i+constant]
            )
        )


        i = i + constant
        print("\t i={},mylist[{}+3]={},number={}".format(i,i,mylist[i+3],number))


    for j in range (i, i + constant, 1):

        f_string =  "In for:\n\t j={},i={},i+constant={},mylist[{}]={},number={}"
        print( f_string.format(j, i, i+constant, j, mylist[j], number))

        if (mylist[j] == number) :
            return mylist[j]

    return None

mylist = [72, 56, 93, 8, 22, 41, 88, 23, 60]
mylist.sort() #=&gt; [8, 22, 23, 41, 56, 60, 72, 88, 93]
print(jumpSearch(mylist, 72, 3))

--output:--
In while:
     mylist[0]=8,number=72,i+constant=3,len(mylist)=9,mylist[i+constant]=41
     i=3,mylist[3+3]=72,number=72
In for:
     j=3,i=3,i+constant=6,mylist[3]=41,number=72
In for:
     j=4,i=3,i+constant=6,mylist[4]=56,number=72
In for:
     j=5,i=3,i+constant=6,mylist[5]=60,number=72
None
</code></pre>
<p>You can see that the while loop only executes once.  The second line of output for the while loop shows that <code>mylist[3+3]</code> is equal to <code>number</code> and the next iteration of the while loop tests whether <code>mylist[6] &lt; number</code>, which is false.  So, execution jumps down to the for-loop, and the output shows that the for loop never finds a <code>mylist[j]</code> that is equal to 72</p>
</div>
<span class="comment-copy">Never name a variable list, str, dict, iter, etc.</span>
<span class="comment-copy">you can never find  number 72, under your while, you add constant which makes i start from i+constant, in this case, constant its 3, so i will start from 4,i suppose the j will run only once! change i to 0 in for j in range(0,i</span>
<span class="comment-copy">Your solution is correct, however it appears my solution takes better advantage of the jumps because it does the last move by jumping rather than stepping (not that it matters for small values), If I didn't miss anything.</span>
<span class="comment-copy">@Rockybilly: You simply cause an extra increment so the searched-for value is seen as the first value of the next block instead of the last value of the current block. It's a different way of addressing the off-by-one error, neither has an advantage over the other.</span>
<span class="comment-copy">I see. With your debugging codes and Martijn's solution, I managed to fully understand what was wrong. Thank you.</span>
