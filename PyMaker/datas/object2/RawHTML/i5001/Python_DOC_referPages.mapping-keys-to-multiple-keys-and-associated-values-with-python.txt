<div class="post-text" itemprop="text">
<p>Here is the following test code:</p>
<pre><code>dict1 = {'k1': '{v1}', 'k2':'{v2}', 'k3':'{v3}' , 'k3':'{v4}'}
list1 = ['k1_1', 'k2_2', 'k3_3', 'k3_4']

newdict = {}
for items in list1:
    val = items.split('_')[0]
    if val in dict1.keys():
        newdict[items] = dict1[val]
</code></pre>
<p>This yields:</p>
<pre><code>{'k1_1': '{v1}', 'k2_2': '{v2}', 'k3_3': '{v4}', 'k3_4': '{v4}'}
</code></pre>
<p>What I really want is:</p>
<pre><code>{'k1_1': '{v1}', 'k2_2': '{v2}', 'k3_3': '{v3}', 'k3_4': '{v4}'}
</code></pre>
<p>The above code works like a charm when there is only one-one mapping from the list and keys in dictionary.
What modification can I make to ensure that the values are preserved after the exchange in keys takes place?</p>
</div>
<div class="post-text" itemprop="text">
<p>As others have pointed out, your dictionary is attempting to store multiple keys of the same value, which will only add the final stored key's value. Instead, you can use a list of tuples:</p>
<pre><code>d = [('k1', '{v1}'), ('k2', '{v2}'), ('k3', '{v3}') , ('k3', '{v4}')]
list1 = ['k1_1', 'k2_2', 'k3_3', 'k3_4']
list1 = iter(list1)
new_d = [(next(list1), b) for _, b in d]
</code></pre>
<p>Output:</p>
<pre><code>[('k1_1', '{v1}'), ('k2_2', '{v2}'), ('k3_3', '{v3}'), ('k3_4', '{v4}')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This wont work because <code>dict1</code> is not a valid <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer"><code>dict()</code></a>.</p>
<p>Per the docs:</p>
<blockquote>
<p>It is best to think of a dictionary as an unordered set of key: value pairs, <strong>with the requirement that the keys are unique (within one dictionary)</strong>. A pair of braces creates an empty dictionary: <code>{}</code>. Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary; this is also the way dictionaries are written on output.</p>
</blockquote>
<p>How do you expect Python to know which <code>'k3'</code> you are referring to?</p>
</div>
<div class="post-text" itemprop="text">
<p>By definition, dictionaries do not allow you to store duplicate keys, so you have to follow a different approach. One is to trick your dictionary into seeing your keys not as <code>strings</code>, but instances of a class, sharing the same name. The following is an example with your sample case:</p>
<pre><code># Create a class that overrides the 'repr' method in order to print the actual key.
class Key:

   def __init__(self, name):
      self.name = name

   def __repr__(self):
      return self.name

# Create instances of the 'Key' class as keys.
dict1 = {Key('k1'): '{v1}', Key('k2'):'{v2}', Key('k3'):'{v3}' , Key('k3'):'{v4}'}
list1 = ['k1_1', 'k2_2', 'k3_3', 'k3_4']

print(dict1.keys())

dict1 = dict(zip(list1, dict1.values()))

print(dict1)
</code></pre>
<p>Output:</p>
<pre><code>dict_keys([k1, k2, k3, k3])
{'k1_1': '{v1}', 'k2_2': '{v2}', 'k3_3': '{v3}', 'k3_4': '{v4}'}
</code></pre>
<p>Credits go <a href="http://www.wellho.net/mouth/3934_Multiple-identical-keys-in-a-Python-dict-yes-you-can-.html" rel="nofollow noreferrer">here</a> for the initial idea.  </p>
</div>
<span class="comment-copy">No, if you notice, the value for key 'k3_3' is not the same. I would like the value to remain the same in the output, currently it takes the latest value and assigns it to all keys 'k3_*'</span>
<span class="comment-copy">@heemayl I thought that too, but the desired one has <code>’k3_3’: ‘v3’</code> instead of <code>’k3_3’: ‘v4’</code></span>
<span class="comment-copy"><code>dict1</code> is incorrectly defined. You can not have duplicate keys. Try printing it after you define it and you will see that the value for <code>'k3'</code> is <code>'{v4}'</code>.</span>
<span class="comment-copy">Yes, look at your <code>dict1</code> directly after you define it. You overwrote <code>{v3}</code> immediately. <a href="https://repl.it/repls/MonumentalCoralSubversion" rel="nofollow noreferrer">repl.it/repls/MonumentalCoralSubversion</a></span>
<span class="comment-copy">do you know you <b>can not</b> have <code>'k3'</code> as key twice in your dict? Key are unique in dictionary. Even though you can declare it , but last value with that key  will override all the previous values</span>
<span class="comment-copy">The statement <b>is not a valid</b> looks incorrect to me. The dictionary in question is having a correct structure but doesn't behaves the way OP expects it to be.</span>
<span class="comment-copy">@MoinuddinQuadri No, it is not valid, the documentation specifies the requirements for a validly <i>defined</i> dictionary.</span>
