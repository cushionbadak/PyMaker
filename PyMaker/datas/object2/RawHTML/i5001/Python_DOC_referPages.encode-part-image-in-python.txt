<div class="post-text" itemprop="text">
<p>Now I want to encode part image in base64 and I did do it. For example, here is an image 1080x1920, but part of this image is needed. </p>
<blockquote>
<p>Top:160, left:340, right:1024, bottom:650.</p>
</blockquote>
<pre><code># first crop
im = Image.open(original)
region = im.crop((160, 340, 1024, 650))
clip_image = os.path.join(screenshot_dir, 'clip.png')
region.save(clip_image)
// then read
f = open(clip_image, 'rb')
ls_f = base64.b64encode(f.read())
f.close()
s = bytes.decode(ls_f)
</code></pre>
<p>In my opinion, maybe I do not have to save resized image and I can read part of this image directly. If so, the program can run faster because there is no extra <code>IO</code> operation.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://pillow.readthedocs.io/en/latest/reference/Image.html#PIL.Image.Image.tobytes" rel="nofollow noreferrer"><code>tobytes</code></a> for a raw image</p>
<blockquote>
<p>This method returns the raw image data from the internal storage. For
  compressed image data (e.g. PNG, JPEG) use save(), with a BytesIO
  parameter for in-memory data.</p>
</blockquote>
<pre><code>im = Image.open(original)
region = im.crop((160, 340, 1024, 650))

ls_f = base64.b64encode(region.tobytes())
s = bytes.decode(ls_f)
</code></pre>
<p>If it is a png or jpg, you need to use <a href="https://docs.python.org/3/library/io.html#io.BytesIO" rel="nofollow noreferrer">BytesIO</a>, perhaps like this:</p>
<pre><code>im = Image.open(original)
region = im.crop((160, 340, 1024, 650))
with io.BytesIO() as temp_file:
    region.save(temp_file)
    ls_f = base64.b64encode(temp_file.getvalue())

s = bytes.decode(ls_f)
</code></pre>
<p>it depends on the format of the input image. If it is not compressed, like a bitmap bmp, it's raw. Examples of compressed formats are png, jpeg, gif. Easiest way is to look at the extension, or to try it out. If you try the first approach on a compressed image, it'll probably raise an Exception, or return a distorted image</p>
</div>
