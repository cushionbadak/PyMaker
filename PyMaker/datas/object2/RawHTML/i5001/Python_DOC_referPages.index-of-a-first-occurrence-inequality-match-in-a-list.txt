<div class="post-text" itemprop="text">
<pre><code>A=[2,3,5,7,11,13]
print(A.index(5))
</code></pre>
<p>The answer is 2,
But what I need is the first one which is bigger than 4 (the answer will be the same - 2).
I can apply a while loop, but is there a more elegant or a builtin way to do it?
In my problem the list is sorted in an ascending order (no duplication),
and my target is to split it into two lists: lower or equal to 4, and bigger than 4; and given the list is sorted it would be redundant to scan it twice (or even once).</p>
</div>
<div class="post-text" itemprop="text">
<p>As @DanD.mentioned, you can use the <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow noreferrer"><code>bisect</code></a> module for this, in you example you can use <a href="https://docs.python.org/3/library/bisect.html#bisect.bisect_left" rel="nofollow noreferrer"><code>bisect_left</code></a></p>
<pre><code>&gt;&gt;&gt; import bisect
&gt;&gt;&gt; bisect.bisect_left(A, 5)
2
</code></pre>
<p>This will use a binary search since your data is sorted, which will be faster than a linear search (<code>O(logN)</code> instead of <code>O(N)</code>).</p>
<p>If you want the index of the first value greater than <code>4</code>, then you can switch to <a href="https://docs.python.org/3/library/bisect.html#bisect.bisect_right" rel="nofollow noreferrer"><code>bisect_right</code></a></p>
<pre><code>&gt;&gt;&gt; bisect.bisect_right(A, 4)
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're totally correct about efficiency - if you have <em>already sorted</em> list, do not iterate linearly, its waste of time</p>
<p>There's built-in <code>bisect</code> module - exactly for binary search in sorted containers.</p>
<p>You're probably looking for <a href="https://docs.python.org/3.6/library/bisect.html#bisect.bisect_right" rel="nofollow noreferrer"><code>bisect_right</code></a> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks everybody, the answer using your kind help is:</p>
<pre><code>import bisect
A=[2,3,5,7,11,13]
N=bisect.bisect_right(A,4)
print(A[:N]) #[2,3]
print(A[N:]) #[5,7,11,13]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next</code></a> with a default argument:</p>
<pre><code>val = next((i for i, x in enumerate(A) if x &gt; 4), len(A))
</code></pre>
<p>Given the above result, you can then do:</p>
<pre><code>left, right = A[:val], A[val:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>List comprehension can do the trick if you want the first occurrence:</p>
<pre><code>A=[2,3,5,7,11,13]
[x &gt; 4 for x in A].index(True)

Out[341]: 2
</code></pre>
<p>And to split:</p>
<pre><code>[x for x in A if x &gt; 4]
Out[345]: [5, 7, 11, 13]
</code></pre>
</div>
<span class="comment-copy">Use the bisect module.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2236906/first-python-list-index-greater-than-x">First Python list index greater than x?</a></span>
<span class="comment-copy">@J.Bergmann Nope, that's not sorted.</span>
<span class="comment-copy">For splitting the list into "lower or equal" and "bigger", on the other hand, <code>bisect_right</code> should be used.</span>
<span class="comment-copy">Is <code>False</code> a good default here? When not explicitly checked with <code>is</code>, it will be interpreted as <code>0</code>. IMHO better use <code>-1</code> (also has to be checked, but more standard), <code>None</code>, or just no default.</span>
<span class="comment-copy">@tobias_k It might be not intuitive <b>but</b> <code>[2, 3, 4][False:]</code> returns <code>[2, 3, 4]</code> which is what you want to have. That would not happen with <code>-1</code> (<code>[4]</code>). <code>0</code> would also work just fine.</span>
<span class="comment-copy">Actually, no, because <code>A[False:]</code> should return the elements that are <i>larger</i> than <code>4</code>, i.e. <code>[]</code> in your example. So, for the slicing case <i>only</i>, <code>len(A)</code> would be a better default.</span>
<span class="comment-copy">@tobias_k Oh, yeah. Thanks for noticing. Then how about <code>len(A)</code> as a default?</span>
