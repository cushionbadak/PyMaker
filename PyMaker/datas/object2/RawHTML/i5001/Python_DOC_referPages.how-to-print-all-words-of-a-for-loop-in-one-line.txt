<div class="post-text" itemprop="text">
<p>I have following set of data. </p>
<pre><code>set = [('john', 'm', 23), ('maria', 'f', 17), ('john', 'm', 45), 
       ('stacy', 'f', 19), ('stacy', 'f', 21), ('mary', 'f', 32)]
</code></pre>
<p>I want my output to look like: </p>
<pre><code>John: m(23) m(45)
Maria: f(17)
Stacy: f(19) f(21)
</code></pre>
<p>Right now my output looks like this with the following code.</p>
<p>Output:</p>
<pre><code>John:   m (23) 
Maria:   f (17) 
John:   m (45) 
Stacy:   f (19) 
Stacy:   f (21)
</code></pre>
<p>Code:</p>
<pre><code>for ind in set:
    i = ind[0]
    if i == "john":
        print("John:"," ", str(ind[1]), "({0}) ".format(str(ind[2])))
    elif  i == "maria":
        print("Maria:"," ", str(ind[1]), "({0}) ".format(str(ind[2])))
    elif i == "stacy":
        print("Stacy:", " ", str(ind[1]), "({0}) ".format(str(ind[2])))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this <em>(it only prints for john, maria and stacy)</em>:</p>
<pre><code>data = [('john', 'm', 23), ('maria', 'f', 17), ('john', 'm', 45),
        ('stacy', 'f', 19), ('stacy', 'f', 21), ('mary', 'f', 32)]

permitted_names = ['john', 'maria', 'stacy']
output = {}
for name, gender, age in data:
    if name not in permitted_names:
        pass
    elif name not in output:
        output[name] = '{0}({1})'.format(gender, age)
    else:
        output[name] += ' {0}({1})'.format(gender, age)

for name, value in output.items():
    print("{0}: {1}".format(name, value))
</code></pre>
<p>Output:</p>
<pre><code>john: m(23) m(45)
maria: f(17)
stacy: f(19) f(21)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should first collect the data for each person, and then you can print for each person, one at a time like:</p>
<h3>Code:</h3>
<pre><code>data = [('john', 'm', 23), ('maria', 'f', 17), ('john', 'm', 45),
       ('stacy', 'f', 19), ('stacy', 'f', 21), ('mary', 'f', 32)]

# collect per person, except Mary.  We don't like Mary
as_dict = {}
for datum in data:
    as_dict.setdefault(datum[0], []).append(datum)

# print each person, except Mary.  We don't like Mary.
for name, items in as_dict.items():
    if name in set('john stacy maria'.split()):
        msg = '{}: '.format(name) + ' '.join('{} ({})'.format(i[1], i[2])
                                             for i in items)
        print(msg)
</code></pre>
<h3>Results:</h3>
<pre><code>john: m (23) m (45)
mary: f (32)
stacy: f (19) f (21)
maria: f (17)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use python's <code>defaultdict</code> for this:</p>
<pre><code>In [37]: from collections import defaultdict

In [38]: data = [('john', 'm', 23), ('maria', 'f', 17), ('john', 'm', 45),
    ...:        ('stacy', 'f', 19), ('stacy', 'f', 21), ('mary', 'f', 32)]

In [39]: d = defaultdict(list)
In [40]: for name, *rest in data:
    ...:     d[name].append(rest)

In [41]: for name, value in d.items():
    ...:     if name in ('john', 'maria', 'stacy'):
    ...:         strvalues = (' {}({})'.format(a, b) for a, b in value)
    ...:         print('{}: {}'.format(name, ''.join(strvalues)))
john:  m(23) m(45)
maria:  f(17)
stacy:  f(19) f(21)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a different approach in which you collect the names of all person from your input list, then you collect and combine all information associated with each person and finally you print these information:</p>
<pre><code>inSet = [('john', 'm', 23), ('maria', 'f', 17), ('john', 'm', 45), 
       ('stacy', 'f', 19), ('stacy', 'f', 21), ('mary', 'f', 32)]

# Get names of people
nameSet = sorted(set([info[0] for info in inSet]))

# Get all info associated with each of these people
displayInfo = [ " ".join(["".join([info[1], '(' + str(info[2]) + ')']) for info in inSet if name==info[0]]) for name in nameSet]

# Print these information, after capitalizing first letter of each name.
for info in zip(map(str.title,nameSet),displayInfo):
print(": ".join(info))
</code></pre>
<p>Output:</p>
<pre><code>John: m(23) m(45)
Maria: f(17)
Mary: f(32)
Stacy: f(19) f(21)
</code></pre>
</div>
<span class="comment-copy">Your <code>set</code> is a list of tuples. And you shouldn't give variables names of <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">built-in functions</a>.</span>
<span class="comment-copy">I need to compare if the first index of my data matches with given name, ie, i = datum[0], if i == "john" then do this... as seen in the output i don't want mary to be printed</span>
<span class="comment-copy">Then simply exclude <code>mary</code>.  <code>if name != 'mary'</code></span>
<span class="comment-copy">I have very large data. Among them I only I want John, Stacy, Maria to be printed.</span>
<span class="comment-copy">Do you expect me to be chasing changing requirements?  I answered the question as presented.  I frankly saw your stacked if as a naive implementation, not a requirement.</span>
<span class="comment-copy">I am not allowed to import any library.</span>
