<div class="post-text" itemprop="text">
<p>I'm trying to concatenate multiple files in a directory to a single file. So far I've been trying to use cat with subprocess with poor results.</p>
<p>My original code was:</p>
<pre><code>source = ['folder01/*', 'folder02/*']
target = ['/output/File1', '/output/File2']

for f1, f2, in zip(source, target):
    subprocess.call(['cat', f1, '&gt;&gt;', f2])
</code></pre>
<p>I've tried handing it shell=True:</p>
<pre><code>..., f2], shell=True)
</code></pre>
<p>And in conjunction with subprocess.Popen instead of call in a number of permutations, but with no joy. </p>
<p>As I've understood from other similar questions,  with shell=True the command will need to be provided as a string. How can I go about calling cat on all items in my list whilst executing as a string?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need <code>subprocess</code> here and you must always avoid <code>subprocess</code> when you can (that means: 99.99% of time).</p>
<p>As <a href="https://stackoverflow.com/users/1142167/joel-cornett">Joel</a> pointed out in comments, maybe I should take a few minutes and bullet points to explain you why:</p>
<ol>
<li>Using <code>subprocess</code> (or similar) assume your code will always run on the exact same environment, that means same OS, version, shell, tools installed, etc.. This is really not fitted for a production grade code.</li>
<li>These kind of libraries will prevent you to make "pythonic Python code", you will have to handle errors by parsing string instead of <code>try</code> / <code>except</code>, etc..</li>
<li>Tim Peters wrote the Zen of Python and I encourage you to follow it, at least 3 points are relevant here: "<em>Beautiful is better than ugly.</em>", "<em>Readability counts.</em>" and "<em>Simple is better than complex.</em>".</li>
</ol>
<p>In other words: <code>subprocess</code> will only make your code less robust, force you to handle non-Python issues, force you to perform tricky computing where you could just write clean and powerful Python code. </p>
<p>There are way more good reasons to not use <code>subprocess</code>, but I think you got the point.</p>
<hr/>
<p>Just open files with <code>open</code>, here is a basic example you will need to adapt:</p>
<pre><code>import os

for filename in os.listdir('./'):
    with open(filename, 'r') as fileh:
        with open('output.txt', 'a') as outputh:
            outputh.write(fileh.read())
</code></pre>
<hr/>
<p>Implementation example for your specific needs:</p>
<pre><code>import os

sources = ['/tmp/folder01/', '/tmp/folder02/']
targets = ['/tmp/output/File1', '/tmp/output/File2']

# Loop in `sources`
for index, directory in enumerate(sources):
    # Match `sources` file with expected `targets` directory
    output_file = targets[index]
    # Loop in files within `directory`
    for filename in os.listdir(directory):
        # Compute absolute path of file
        filepath = os.path.join(directory, filename)
        # Open source file in read mode
        with open(filepath, 'r') as fileh:
            # Open output file in append mode
            with open(output_file, 'a') as outputh:
                # Write content into output
                outputh.write(fileh.read())
</code></pre>
<p><em>Be careful, I changed your source and target values (<code>/tmp/</code>)</em></p>
</div>
<span class="comment-copy">You would do <code>string = "cat {} &gt;&gt; {}".format(f1, f2)</code></span>
<span class="comment-copy">Gave you some help here :)</span>
<span class="comment-copy">Been trying to integrate this solution. So far I have:      <code>for f1, f2 in in zip(source, target):          for filename in os.listdir(f1):              with open(filename, 'r') as fileh:                  with open(f2, 'a') as outputh:                      outputh.write(fileh.read())</code>  Which seems like it would be working, but it's looking for the files in the wrong place. I've not used os.listdir before - how can I get it to write the full path to the list instead of just file names?  Nevermind, you anticipated my question and beat me to it! Thank you so much.</span>
<span class="comment-copy">:), you can use <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk</code></a> too, but I prefer <code>os.listdir()</code>. I may be wrong on that specific point, so takes some docs and make your choice.</span>
<span class="comment-copy">@JoelCornett "<i>long life to Joel</i>" <a href="https://stackoverflow.com/posts/48867114/revisions">stackoverflow.com/posts/48867114/revisions</a></span>
<span class="comment-copy">@Arount haha. Good edit.</span>
