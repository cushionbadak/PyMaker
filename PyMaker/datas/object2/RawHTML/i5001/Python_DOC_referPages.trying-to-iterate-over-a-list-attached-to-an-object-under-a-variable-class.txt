<div class="post-text" itemprop="text">
<p>Full code is at the end.</p>
<p>I've written a program that reads in data from a csv file.  It creates a class of variable called "Facility".  Each facility can have multiple water sources, so there is another class called "WaterSource" which appends a list of attributes for an individual water source to each Facility.  If I call :
<code>data['00312']</code> </p>
<p>I get output:</p>
<pre><code>Facility 00312 US Aggregates Inc IN
</code></pre>
<p>If I ask for <code>data['00312'].records</code>:</p>
<pre><code>[ WaterSource 00312 WELL Willshire 80  683175 4511625,
WaterSource 00312 WELL Willshire 80  682550 4511750,
WaterSource 00312 INTAKE Willshire 1200 Unnamed Quarry 683225 4512075,
WaterSource 00312 INTAKE Willshire 1200 Unnamed Quarry 683225 4512050]
</code></pre>
<p>I need to create a report that iterates over every variable in the class and returns a list of Facilities that have multiple water sources.  Thus the final output would a list of [RegNo, Facility Name, No. of WaterSources] such as:</p>
<p>[Facility 00312 US Aggregates Inc 4]</p>
<p>The issue I'm having is understanding how to iterate over the Facilities to count the records of the water sources appended to each Facilities object.  I think I could add a method into the class somewhere, but I can't quite figure out where.  I'm a python beginner, so please forgive me if this isn't quite  the right vocabulary.  I'm not even sure where to start, so any suggestions you could offer would be helpful.</p>
<pre><code>class Facilities:

    def __init__(self, regno, name, mwu):  ##creates facility attributes
        self.regno = regno
        self.name = name
        self.mwu = mwu
        self.records = []

    def add_record(self,record):
        self.records.append(record)

    def __repr__(self):
        '''Makes a string representation'''
        return 'Facility {0} {1} {2}'.format(self.regno, self.name, self.mwu)

class WaterSource(Facility):
    '''holds info about the water source'''
    def __init__(self, regno, source, quad, cap, body, utmE, utmN):  ##creates water source attributes 
        self.regno = regno
        self.source = source
        self.quad = quad
        self.cap = cap
        self.body = body
        self.utmE = utmE
        self.utmN = utmN
        self.records = []

    def source_data(self):
        regnos = []
        sources = []
        quads = []
        caps = [] 
        bodies = []
        utmEs = []
        utmNs = []
        for record in self.records:
            regnos.append(record.regno)
            sources.append(record.source)
            quads.append(record.quad)
            caps.append(record.cap)
            bodies.append(record.body)
            utmEs.append(record.utmE)
            utmNs.append(record.utmN)
        return (regnos,sources,quads,caps,bodies,utmEs,utmNs)

    def __repr__(self):
        return ' WaterSource {0} {1} {2} {3} {4} {5} {6}'.format(self.regno, \
                                        self.source, self.quad, self.cap, self.body, self.utmE, self.utmN)

def read_data(filename):
    rv = {}
    for r in csv.DictReader(open(filename, 'r', encoding='UTF-8')):
        regno = r['RegNo']
        if r['RegNo'] not in rv:
            rv[regno] = Facilities(r['RegNo'],r['Facility'], r['MWU Code'])
        rv[regno].add_record(WaterSource(regno, r['Source Code'], r['Quadrangle'], \
                                    r['Capacity (GPM)'], r['Water Body Name'], r['UTM East'], r['UTM North']))

    return rv
data = read_data('Fac-2013-2016.csv')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>[Facility 00312 US Aggregates Inc 4]</p>
<p>The issue I'm having is understanding how to iterate over the
  Facilities to count the records of the water sources appended to each
  Facilities object.</p>
</blockquote>
<p>From my understanding, simply add a method and return a count of the objects or straight up count the records using <strong>len</strong> unless there is something more to what you are asking for?</p>
<pre><code>class Facilities:
  def __init__(self, regno, name, mwu):  ##creates facility attributes
      self.regno = regno
      self.name = name
      self.mwu = mwu
      self.records = []

  def add_record(self,record):
      self.records.append(record)

  def __repr__(self):
      '''Makes a string representation'''
      return 'Facility {0} {1} {2} {3}'.format(self.regno, self.name, self.mwu , len(self.records))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>All of your Facilities are stored as values in the dictionary <code>data</code> using the facility's <em>RegNo</em> for the keys.  You can iterate over all the data using the <a href="https://docs.python.org/3/library/stdtypes.html#dict.items" rel="nofollow noreferrer">dictionary items method</a>.  The length of each facility's <code>records</code> attribute is the number of water sources.  You can build a format string to use the information you need.</p>
<pre><code>for reg_no, facility in data.items():
    no_of_sources = len(facility.records)
    print(f'Facility {facility.regno} {facility.name} {no_of_sources}')    #Python v3.6+
    #print('Facility {} {} {}'.format(facility.regno, facility.name, no_of_sources))    #Python versions &lt;3.6
</code></pre>
</div>
<span class="comment-copy">You can make your <code>Facility</code> objects iterable directly, but you can just iterate over <code>my_facility_object.records</code> as well</span>
<span class="comment-copy">Thanks!  This worked great.  I guess I just didn't think about being able to ask for the len(facility.records).  I appreciate your help!  Also the dict items method link was really helpful as well!</span>
