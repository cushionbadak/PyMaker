<div class="post-text" itemprop="text">
<p>I understand that there are magic methods in python that can be overwritten by classes to control the way certain built in functions treat the members of these classes. For example, the behavior of <code>len()</code> and <code>str()</code> can be overwritten via magic methods <code>__len__()</code> and <code>__str__()</code>:</p>
<pre><code>class EmptySet(object):
    def __len__(self):
        return 0

    def __str__(self):
        return '[]'

&gt;&gt;&gt; e = EmptySet()
&gt;&gt;&gt; str(e)
[]

&gt;&gt;&gt; len(e)
0
</code></pre>
<p>There are also <code>__cmp__()</code> and <code>__ge__()</code>, <code>__le__()</code> etc methods to control how these objects can be compared and how a list of them should be ordered by <code>list.sort()</code>. My question is not about customizing the ordering of objects in a list but about sorting the object itself. Suppose the set weren't empty and I want to use <code>sorted()</code> to sort it:</p>
<pre><code>class SetOfTwo(object):
    def __init__(self, a , b):
        el_0 = a
        el_1 = b

    def __len__(self):
        return 2

    def __str__(self):
        return '[{}, {}]'.format(el_0, el_1)
</code></pre>
<p>Is there a magic method I can implement to have <code>sorted()</code> flip the elements if they aren't in order? I'm picturing the following behavior:</p>
<pre><code>&gt;&gt;&gt; s = SetOfTwo(2, 1)
&gt;&gt;&gt; str(s)
[2, 1]

&gt;&gt;&gt; t = sorted(s)
&gt;&gt;&gt; str(t)
[1, 2]

&gt;&gt;&gt; type(t)
&gt;&gt;&gt; SetOfTwo
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should definitely read <a href="https://docs.python.org/3/reference/datamodel.html#emulating-container-types" rel="nofollow noreferrer">the official documentation</a> of how to emulate container types. Basically a class supposed to work as a container (list, dict etc.) needs to implement methods to set or get members <code>__getitem__()</code>, <code>__setitem__()</code> and iterate over items <code>__iter__()</code> and to get the number of items - method <code>__len__()</code>. <em>This is the minimum. But you can also add the ability to delete items and other operations.</em></p>
<p>The behaviour of <code>sorted()</code> built-in function is to iterate over elements of your container and compare them using methods you mentioned <code>__cmp__(), __ge__(), __le__()</code> which should be defined for items and not the container as you know already. Then a new <code>list</code> instance is created with items sorted and this new instance is returned. You can pass it to the constructor of your custom container then or you can wriap <code>sorted()</code> with a custom function which will return the desired class instance.</p>
</div>
<div class="post-text" itemprop="text">
<p>As some have said in the comments, sets are unordered but I don't think your question is really about sets.</p>
<p>Python uses the data model methods you mentioned, <strong>ge</strong>, <strong>le</strong>, and <strong>cmp</strong> to determine how a class behaves when sorted() is called on it. You can see how I try to call it here, but Python objects and asks me to implement &lt;. </p>
<pre><code>&gt;&gt;&gt; class a(object):
...   pass
...
&gt;&gt;&gt; b = a()
&gt;&gt;&gt; c = a()
&gt;&gt;&gt; d = [b, c]
&gt;&gt;&gt; sorted(d)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: '&lt;' not supported between instances of 'a' and 'a'
</code></pre>
<p>Hope this helps. Aslo, as other people said, it's a good idea to subclass something in collections.abc. I'd read Item 28 in <em>effective python</em> that talks about this to get a good idea.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>len()</code> and <code>str()</code> are functions who take an object as parameter and return an integer (resp. string). The object can personalize the way the len is calculated, or the string is generated, via the <code>__len__()</code> and <code>__str__()</code> magic methods.</p>
<p>Similarly, <code>sorted()</code> is a function that takes a list (or any iterable) of objects and returns <strong>a list of the sorted objects</strong>. The objects can personalize the way they get compared through the <code>__lt__()</code> magic method.</p>
<p>Some confusion arises when we think of `sorted(my_list) as a function that "sorts the list", rather than "sorts <strong>the elements</strong> of the list".</p>
<p>You don't want to sort your objects (i.e. make an ordered list of objects), but only sort <strong>some data in their internal representation</strong>. So you need an instance method on your object that will update that internal representation. You can name it as you wish, <code>.sort()</code> if you'd like, but you will have to call it on your one object, and it will not be involved in comparing objects.</p>
</div>
<span class="comment-copy">Sets are inherently unordered. See <a href="https://stackoverflow.com/questions/9792664/set-changes-element-order">this question</a>. As for your actual question (nomenclature aside) just define your own sort method on the class and use that instead. Or pass in a lamda.</span>
<span class="comment-copy">@JaredSmith I don't think this question is really about sets.</span>
<span class="comment-copy">you can try OrderedSet</span>
<span class="comment-copy">I apologize for using an inherently unordered collection in my toy example. Hopefully the question which is about whether there is a magic method for sorted() in python is still clear.</span>
<span class="comment-copy">Pythonâ€™s <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted()</code></a> function takes an iterable and returns a list. So if your collection supports iteration it can be passed to <code>sorted()</code>.  The ordering of the elements is based on their natural ordering or on the key function passed to <code>sorted()</code>.  You will get back a list, not your custom type.</span>
<span class="comment-copy">That link to emulating container types is helpful. Basically, if there were a magic method for <code>sorted()</code>, it would appear there in official documentation as <code>__sorted__()</code>. I almost asked this question about <code>reversed()</code> instead and that page does list a <code>__reversed__()</code> magic method. So there is a magic method to implement your own behavior of <code>reversed()</code> but not <code>sorted()</code>. That's not obvious until you read the right part of the docs.</span>
<span class="comment-copy">This is because reversing a collection doesn't care about values of items but sorting it depends on these values.</span>
<span class="comment-copy">it seems to me the only important difference is that <code>reversed()</code> looks for a <code>__reversed__()</code> method in the container its reversing whereas <code>sorted()</code> doesn't look for a <code>__sorted__()</code> method.</span>
<span class="comment-copy">This is the technical difference - you are correct. But the reason for developers of Python to implement it this way, I explained in my last comment. One can imagine a class which orders items somehow without comparing them but it couldn't be called "sorting".</span>
<span class="comment-copy">There are other reasons to want to override sorting. For instance I might want to add an issorted flag that skips the sorting algorithm and returns a copy of the object if the object were known to have been sorted previously.</span>
<span class="comment-copy">Can you explain how to sort anything without comaparing?</span>
<span class="comment-copy">@ElmoVanKielmo Maybe what I meant is more clearly explained with an example: in the question, the OP wanted to sort the <code>el_0</code> and <code>el_1</code> attributes inside a <code>SetOfTwo</code> object (which he expressed as 'sort the object itself'). He can have a method that does it, and he will of course need to compare <code>el_0</code> and <code>el_1</code> in it. But all of this is totally unrelated to the sorting of a bunch of <code>SetOfTwo</code> objects (as by <code>sorted()</code>), which involves comparing a <code>SetOfTwo</code> with another <code>SetOfTwo</code>. This (also necessary) comparison between objects can be done through the <code>__lt__</code> method of the object.</span>
