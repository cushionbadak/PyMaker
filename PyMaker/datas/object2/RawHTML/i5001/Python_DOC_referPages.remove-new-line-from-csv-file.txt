<div class="post-text" itemprop="text">
<p>I want to remove the new line character in CSV file field's data. The same question is asked by multiple people in SO/other places. However the provided solutions are in scripting. I'm looking for a solution in programming languages like PYTHON or in Spark(not only these two) as I have pretty big files.</p>
<p><strong>Previously asked questions on the same topic:</strong></p>
<ul>
<li><p><a href="https://stackoverflow.com/questions/18619939/remove-new-line-character-from-csv-files-string-column">Remove New Line Character from CSV file's string column</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/26406281/replace-new-line-character-between-double-quotes-with-space">Replace new line character between double quotes with space</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/48861331/remove-new-line-from-csv-files-string-column">Remove New Line from CSV file's string column</a></p></li>
<li><p><a href="https://unix.stackexchange.com/questions/222049/how-to-detect-and-remove-newline-character-within-a-column-in-a-csv-file">https://unix.stackexchange.com/questions/222049/how-to-detect-and-remove-newline-character-within-a-column-in-a-csv-file</a></p></li>
</ul>
<p>I have a CSV file of size ~1GB and want to remove the new line characters in field's data. The schema of the CSV file varies dynamically, so I can't hard code the schema. The line break doesn't always appear before a comma, it appears randomly even within a field.</p>
<p><strong>Sample Data:</strong></p>
<pre><code>playerID,yearID,gameNum,gameName,teamName,lgID,GP,startingPos
gomezle01,1933,1,Cricket,Team1,NYA,AL,1
ferreri01,1933,2,Hockey,"This is 
Team2",BOS,AL,1
gehrilo01,1933,3,"Game name is 
Cricket" 
,Team3,NYA,AL,1
gehrich01,1933,4,Hockey,"Here it is 
Team4",DET,AL,1
dykesji01,1933,5,"Game name is 
Hockey"
,"Team name 
Team5",CHA,AL,1
</code></pre>
<p><strong>Expected Output:</strong></p>
<pre><code>playerID,yearID,gameNum,gameName,teamName,lgID,GP,startingPos
gomezle01,1933,1,Cricket,Team1,NYA,AL,1
ferreri01,1933,2,Hockey,"This is Team2",BOS,AL,1
gehrilo01,1933,3,"Game name is Cricket" ,Team3,NYA,AL,1
gehrich01,1933,4,Hockey,"Here it is Team4",DET,AL,1
dykesji01,1933,5,"Game name is Hockey","Team name Team5",CHA,AL,1
</code></pre>
<p>Newline character can be in any field's data.</p>
<p><strong>Edit:</strong>
Screenshot as per the code:</p>
<p><a href="https://i.stack.imgur.com/uJ1mz.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/uJ1mz.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using <em>pyspark</em> then I would suggest you to go with <em>sparkContext</em>'s <code>wholeTextFiles</code> function to read the file, <strong>since your file needs to be read as whole text for parsing appropriately</strong>.</p>
<p>After reading it using <code>wholeTextFiles</code>, you should parse by replacing end of line characters by , and do some additional formattings so that whole text can be broken down into groups of eight strings. </p>
<pre><code>import re
rdd = sc.wholeTextFiles("path to your csv file")\
    .map(lambda x: re.sub(r'(?!(([^"]*"){2})*[^"]*$),', ' ', x[1].replace("\r\n", ",").replace(",,", ",")).split(","))\
    .flatMap(lambda x: [x[k:k+8] for k in range(0, len(x), 8)])
</code></pre>
<p>You should get output as </p>
<pre><code>[u'playerID', u'yearID', u'gameNum', u'gameName', u'teamName', u'lgID', u'GP', u'startingPos']
[u'gomezle01', u'1933', u'1', u'Cricket', u'Team1', u'NYA', u'AL', u'1']
[u'ferreri01', u'1933', u'2', u'Hockey', u'"This is Team2"', u'BOS', u'AL', u'1']
[u'gehrilo01', u'1933', u'3', u'"Game name is Cricket"', u'Team3', u'NYA', u'AL', u'1']
[u'gehrich01', u'1933', u'4', u'Hockey', u'"Here it is Team4"', u'DET', u'AL', u'1']
[u'dykesji01', u'1933', u'5', u'"Game name is Hockey"', u'"Team name Team5"', u'CHA', u'AL', u'1']
</code></pre>
<p>If you would like to convert all the array rdd rows into strings of rows then you can add</p>
<pre><code>.map(lambda x: ", ".join(x))
</code></pre>
<p>and you should get </p>
<pre><code>playerID, yearID, gameNum, gameName, teamName, lgID, GP, startingPos
gomezle01, 1933, 1, Cricket, Team1, NYA, AL, 1
ferreri01, 1933, 2, Hockey, "This is Team2", BOS, AL, 1
gehrilo01, 1933, 3, "Game name is Cricket", Team3, NYA, AL, 1
gehrich01, 1933, 4, Hockey, "Here it is Team4", DET, AL, 1
dykesji01, 1933, 5, "Game name is Hockey", "Team name Team5", CHA, AL, 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>re</code>, <code>pandas</code> and <code>io</code> modules as follows:</p>
<pre><code>import re
import io
import pandas as pd

with open('data.csv','r') as f:
    data = f.read()
df = pd.read_csv(io.StringIO(re.sub('"\s*\n','"',data)))

for col in df.columns: #To replace all line breaks in all textual columns
    if df[col].dtype == np.object_:
        df[col] = df[col].str.replace('\n','');

In [78]: df
Out[78]:
    playerID    yearID  gameNum gameName               teamName        lgID GP  startingPos
0   gomezle01   1933    1       Cricket                Team1           NYA  AL  1
1   ferreri01   1933    2       Hockey                 This is Team2   BOS  AL  1
2   gehrilo01   1933    3       Game name is Cricket   Team3           NYA  AL  1
3   gehrich01   1933    4       Hockey  Here it is     Team4           DET  AL  1
4   dykesji01   1933    5       Game name is Hockey    Team name Team5 CHA  AL  1
</code></pre>
<p>If you want this <code>DataFrame</code> as an output <code>CSV</code> file use:</p>
<pre><code>df.to_csv('./output.csv')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It could use a bit cleaning but here is some code that would do what you want. Works for line breaks within a field and before a comma. If more requirements needed, some tweaking could be done:</p>
<pre><code>import csv

with open('data.csv', 'r') as csvfile:
    reader = csv.reader(csvfile, delimiter=',', quotechar='"')
    actual_rows = [next(reader)]
    length = len(actual_rows[0])
    real_row = []
    for row in reader:
        if len(row) &lt; length:
            if real_row:
                real_row[-1] += row[0]
                real_row += row[1:]
            else:
                real_row = row
        else:
            real_row = row
        if len(real_row) == length:
            real_row = map(lambda s: s.replace('\n', ' '), real_row)
            # store real_row or use it as needed
            actual_rows.append(list(real_row))
            real_row = []

    print(actual_rows)
</code></pre>
<p>I'm storing the corrected rows in <code>actual_rows</code> but if you don't want to load into memory, just use the <code>real_row</code> variable in every loop were pointed out in the comment</p>
</div>
<div class="post-text" itemprop="text">
<p>This one is a basic one with simple preprocessing before reading it through csv. </p>
<pre><code>import csv

def simple_sanitize(data):
    result = []
    for i, a in enumerate(data):
        if i + 1 != len(data) and data[i + 1][0] == ',':
            a = a.replace('\n', '')
            result.append(a + data[i + 1])
        elif a[0] != ',':
            result.append(a)
    return result

data = [line for line in open('test.csv', 'r')]
sdata = simple_sanitize(data)

with open('out.csv','w') as f:
    for row in sdata:
        f.write(row)

result = [list(val.replace('\n', '') for val in line) for line in csv.reader(open('out.csv', 'r'))]

print(result)
</code></pre>
<p>Result :</p>
<pre><code>[['playerID', 'yearID', 'gameNum', 'gameName', 'teamName', 'lgID', 'GP', 'startingPos'], 
['gomezle01', '1933', '1', 'Cricket', 'Team1', 'NYA', 'AL', '1'], 
['ferreri01', '1933', '2', 'Hockey', 'This is Team2', 'BOS', 'AL', '1'], 
['gehrilo01', '1933', '3', 'Game name is Cricket ', 'Team3', 'NYA', 'AL', '1'], 
['gehrich01', '1933', '4', 'Hockey', 'Here it is Team4', 'DET', 'AL', '1'], 
['dykesji01', '1933', '5', 'Game name is Hockey', 'Team name Team5', 'CHA', 'AL', '1']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The basic idea in this solution is to get fixed length chunks (of length equal to the number of columns in the first row) using the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">grouper recipe</a>. Since it doesn't read the entire file at once, it wouldn't blow up your memory usage with large files.</p>
<pre><code>$ cat a.py
import csv,itertools as it,operator as op

def grouper(iterable,n):return it.zip_longest(*[iter(iterable)]*n)

with open('in.csv') as inf,open('out.csv','w',newline='') as outf:
 r,w=csv.reader(inf),csv.writer(outf)
 hdr=next(r)
 w.writerow(hdr)
 for row in grouper(filter(bool,map(op.methodcaller('replace','\n',''),it.chain.from_iterable(r))),len(hdr)):
  w.writerow(row)

$ python3 a.py
$ cat out.csv
playerID,yearID,gameNum,gameName,teamName,lgID,GP,startingPos
gomezle01,1933,1,Cricket,Team1,NYA,AL,1
ferreri01,1933,2,Hockey,This is Team2,BOS,AL,1
gehrilo01,1933,3,Game name is Cricket ,Team3,NYA,AL,1
gehrich01,1933,4,Hockey,Here it is Team4,DET,AL,1
dykesji01,1933,5,Game name is Hockey,Team name Team5,CHA,AL,1
</code></pre>
<p>One assumption being made here is the absence of empty cells in the input csv.</p>
</div>
<span class="comment-copy">I see that mostly you have newline character in strings.In python, while iterating through lines try to replace newline character. a = "Here it is \n Team4" print(a) b = a.replace('\n','') print(b)</span>
<span class="comment-copy">@SunnysinhSolanki, I tried and replace function didn't worked here.</span>
<span class="comment-copy">Thanks a lot for the response. Is it possible to group them without mentioning the number of columns. As schema changes dynamicallu, number of columns may vary.p</span>
<span class="comment-copy">Could you please explain what exactly <code>map(lambda x: re.sub(r'(?!(([^"]*"){2})*[^"]*$),', ' ', x[1]</code> will do. Just want to make sure, we didn't hardcoded the for specific column.</span>
<span class="comment-copy">for your first question you can read the file and get the length of the first line which is schema ( i guess its never broken in the middle with line delimiter as other lines) and use that length instead of 8</span>
<span class="comment-copy">for your second question : when we replace <code>\r\n</code> with <code>,</code> then <code>,</code> is added in between the strings inside <code>"</code> . So <code>re.sub(r'(?!(([^"]*"){2})*[^"]*$),', ' '</code> replaces the <code>,</code> added with a space.</span>
<span class="comment-copy">I got output in different format which is not as expected(attached the screenshot in question). Could you please help.</span>
<span class="comment-copy">I can't hardcode the name of the column as schema changes dynamically and line break can happen in any column. Is it possible to apply to all the columns without mentioning the column name?</span>
<span class="comment-copy">@user805 You can do that using a <code>for</code> loop, I have updated my code and now it should eliminate all the line breaks from your <code>string</code>s</span>
<span class="comment-copy">there can be line breaks in any place(not before comma), any possible solution please.</span>
<span class="comment-copy">Edited my answer, should work for every case now</span>
<span class="comment-copy">look at your output, do you think they are correct? does each array have 8 strings?</span>
<span class="comment-copy">Yeah noticed it now.</span>
<span class="comment-copy">@Reck, Do you have any other possible solution as the output of the code provided by you is not as expected?</span>
<span class="comment-copy">Other possible solution is to sanitize the csv before using csv.reader. Sanitizing is a tricky one here.</span>
