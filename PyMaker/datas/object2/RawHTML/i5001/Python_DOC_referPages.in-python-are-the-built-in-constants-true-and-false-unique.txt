<div class="post-text" itemprop="text">
<p>In Python the built in constant None is guaranteed to be singular. There is only one instance of it. </p>
<p>This is not the case for other built in types. Strings or numbers with the same contents are not unique. Two strings "a" and "a" are not unique but have different instances. The same goes for two numbers with identical internal values, say 1.0 and 1.0.</p>
<p>Are the built in Boolean constants True and False unique like None, or do they have different instances? </p>
<p>A specific example is:</p>
<pre><code>value = 1 == 1
</code></pre>
<p>in this case is <code>value</code> the same instance as <code>True</code>? </p>
</div>
<div class="post-text" itemprop="text">
<p>The constants <code>True</code> and <code>False</code> are unique, as the specification <a href="https://docs.python.org/3/library/functions.html#bool" rel="nofollow noreferrer">guarantees they are the only instances of <code>bool</code></a>.  That is, if you have two variables which were both initialized with <code>True</code> or a true boolean expression such as <code>1 == 1</code>,* then they will compare identical with <code>is</code>.  The same is true for <code>False</code>.</p>
<p>However, <code>True == 1 and True is not 1</code>.  This is because booleans are a subclass of <code>int</code>.  Boolean values will never compare identical to "regular" integers with <code>is</code>, but the type difference is ignored for comparison with integers, floating point values, and other numeric types, as is standard behavior for the <a href="https://docs.python.org/3/library/numbers.html" rel="nofollow noreferrer">numeric hierarchy</a>.</p>
<p>* Be careful with more elaborate boolean expressions.  In particular, <code>and</code> and <code>or</code> always return one of their operands, and do not coerce to boolean (unless their operands are already booleans).</p>
<p>(Incidentally, Python contains exactly two other singletons in addition to <code>True</code>, <code>False</code>, and <code>None</code>, namely <a href="https://docs.python.org/3.8/library/stdtypes.html#the-ellipsis-object" rel="nofollow noreferrer"><code>Ellipsis</code> and <code>NotImplemented</code></a>.  Each type object is also more or less unique; if you write <code>x = int; y = int</code>, then <code>x</code> and <code>y</code> will compare identical with <code>is</code>, because there is only one object which represents the <code>int</code> type.  This can be used if you are creating your own type hierarchy and want to avoid having objects compare equal to their subclasses like booleans do with integers.  In other cases, it is of marginal benefit compared to <code>isinstance()</code> or <code>issubclass()</code>, which better respect the <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle" rel="nofollow noreferrer">Liskov substitution principle</a>.)</p>
</div>
<span class="comment-copy">"The values False and True will be singletons, like None." <a href="https://www.python.org/dev/peps/pep-0285/#specification" rel="nofollow noreferrer">PEP 285 ยง Specification</a></span>
<span class="comment-copy">You can use <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer"><code>id</code></a> to satisfy these questions.  Look at <code>id(True)</code> and <code>id(1 == 1)</code></span>
<span class="comment-copy">@PatrickHaugh that's never sufficient to answer a question like this. You don't want to know if they <i>can</i> be the same, you want to know if they're <i>guaranteed</i> to be the same.</span>
<span class="comment-copy">They aren't <i>implicitly converted</i>, they actually <i>are</i> integers since <code>bool</code> is a subclass of <code>int</code>.</span>
<span class="comment-copy">@MarkRansom: That's not what it says in <a href="https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy" rel="nofollow noreferrer">the spec</a>.  Granted, I think that used to be true in 2.7.</span>
<span class="comment-copy">From your link: "The Boolean type is a subtype of the integer type".</span>
<span class="comment-copy">@MarkRansom: Edited, their indentation in the type hierarchy is confusing.</span>
<span class="comment-copy">And <code>issubclass(bool,int)</code> returns <code>True</code> in Python 3.6.</span>
