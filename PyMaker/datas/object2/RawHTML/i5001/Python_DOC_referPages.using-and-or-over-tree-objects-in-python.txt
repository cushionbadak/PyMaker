<div class="post-text" itemprop="text">
<p>I as going through some Python notes and I saw this example and its working find but i am trying to understand what is happening.</p>
<pre><code> class TreeNode(object):
 def __init__(self, x):
     self.val = x
     self.left = None
      self.right = None



 T= TreeNode(5)
 T.left = TreeNode(2)
 T.right = TreeNode(7)

 ans = T and T.left   #===&gt; This returns T.left, &lt;--------- how?
 ans2 = T or T.left   #===&gt; This returns T .  &lt;-------------?

 ans3 = T.left and T.right #====&gt; T.right &lt;----- mind blows away :(, how , how ??
</code></pre>
<p>How and/or operator works here? I tried looking up on google but it just showed me basic and/or stuff :(.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>and</code> and <code>or</code> operators deal with the <a href="https://docs.python.org/2.4/lib/truth.html" rel="nofollow noreferrer"><em>truthiness</em></a> of their operands. So </p>
<pre><code>X and Y and Z and ...
</code></pre>
<p>returns the first falsey operand, or the last operand if they're all truthy, while</p>
<pre><code>X or Y or Z or ...
</code></pre>
<p>returns the first truthy operand, or the last operand if they're all falsey.</p>
<p>The link above explains what's considered truthy and falsey. Objects are always truthy, so </p>
<pre><code>T and T.left
</code></pre>
<p>will always return <code>T.left</code> since <code>T</code> can never be the first falsey operand. Conversely</p>
<pre><code>T or T.left
</code></pre>
<p>will always return <code>T</code> because it's the first truthy operand.</p>
<pre><code>T.left and T.right
</code></pre>
<p>returns <code>T.right</code> because <code>T.left</code> is not falsey.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to fundamentally grok truth value testing and boolean operators. </p>
<p><a href="https://docs.python.org/3.6/library/stdtypes.html" rel="nofollow noreferrer">https://docs.python.org/3.6/library/stdtypes.html</a></p>
<p>Note, the <code>or</code> operator returns one of it's two arguments:</p>
<blockquote>
<p><code>x or y</code> If x is false, then y, else x</p>
</blockquote>
<p>It is an idiom that is frequently used to check if something is falsey, usually <code>None</code> or an empty container.</p>
<p>e.g. use <code>x</code> if x  is not <code>None</code> else use something else... So a shortcut for:</p>
<pre><code>if not T:
    ans = T.left
else:
    ans = T
</code></pre>
<p>I prefer the full if-else, or if you want something that can fit on one line, use a <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">conditional expression</a></p>
<pre><code>ans = T.left if not T else T
</code></pre>
<p>Or </p>
<pre><code>ans = T if T else T.left
</code></pre>
<p>The and operator also returns one of it's arguments:</p>
<blockquote>
<p><code>x and y</code> if x is false, then x, else y</p>
</blockquote>
<pre><code>if not T:
    ans = T
else:
    ans = T.left
</code></pre>
</div>
<span class="comment-copy">thanks that explains... is it goofy idea to always use T and T.left instead of T.left ( may be to make sure T is not None ).</span>
<span class="comment-copy">It depends on the application. Sometimes you know that the variable should always contain an object, so you should get an exception if something goes wrong. Other times the object is optional, and that's a good way to handle it not existing.</span>
