<div class="post-text" itemprop="text">
<p>I created a dict in python 3, its type is dict as expected,</p>
<pre><code>dict = {'Name': 'Tom', 'Age': 7, 'Class': 'First'}
type(dict)
</code></pre>
<p>then I deleted it with <code>del</code>, but it still exists and type is changed to "type"</p>
<pre><code>del dict       # delete entire dictionary
type(dict)
</code></pre>
<p>Why does del not work on the dict? Why is type changed?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you name your dictionary <code>dict</code> there is a problem.</p>
<p><code>dict</code> is a built-in function.</p>
<p>Rename the dictionary and try again:</p>
<pre><code>dict1 = {'Name': 'Tom', 'Age': 7, 'Class': 'First'}
type(dict1)
del dict1
dict1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really want to "abuse" the word <strong>"<em>dict</em> "</strong> in your scripts then you can use the word <strong>"<em>dict</em> "</strong> only like this <strong>"<em>dict_</em>"</strong> by using <strong>"<em>_</em> "</strong> behind it.</p>
<p><a href="https://docs.python.org/2/library/functions.html" rel="nofollow noreferrer">&gt;&gt; Here &lt;&lt;</a> is pythons build-in list of words reserved for your scripts functionality by python.</p>
<p>In semantics context: </p>
<p>The word <strong>"<em>reserved</em>"</strong> means <strong>"<em>to keep or set apart for some particular use or purpose in its functional/semantic context.</em>"</strong>. </p>
<p>Thus if your change those reserved words your script/code/program comes tumbling down like a house of cards and python starts spitting <strong>"traceback errors"</strong> when you run your code. Regardless of your free choice to change the wording of them into other lingo, you have to correct <strong>all</strong> those words written in your scripts/code to maintain its functionality in place by these "reserved" words. If not you have a bright "debugging" future ahead for all you scripts where you changed these "reserved" python wordings/ built-in functions.</p>
</div>
<span class="comment-copy">Don't call your dictionary <code>dict</code>. This is a reserved name for a <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">built-in function</a>, which you overwrite with your script.</span>
<span class="comment-copy">It's exactly like @MrT says. Change the name and all will work as expected.</span>
<span class="comment-copy"><code>del dict</code> removes the global (assuming you've defined it as such) name, exposing the shadowed builtin. Don't use names of builtins, as noted by others.</span>
<span class="comment-copy">Those aren't actually reserved words, as the OP's problem demonstrates; built-in functions and classes are <i>provided</i>, but not <i>reserved</i>. Python provides them, but you're allowed to use them for your own variable names, it's just a terrible, terrible idea. The keyword list is available from <a href="https://docs.python.org/3/library/keyword.html#keyword.kwlist" rel="nofollow noreferrer"><code>keyword.kwlist</code></a>, and <a href="https://docs.python.org/3/library/keyword.html#keyword.kwlist" rel="nofollow noreferrer">the language spec also describes both keywords and reserved names</a>.</span>
<span class="comment-copy">Totally agree with you ShadowRanger.</span>
