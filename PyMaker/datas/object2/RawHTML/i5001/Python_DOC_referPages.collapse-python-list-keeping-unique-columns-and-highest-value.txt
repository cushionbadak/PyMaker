<div class="post-text" itemprop="text">
<p>I have a list of lists</p>
<pre><code>data = [ ['fruit', 'apple', 'v1', 'data 1'],
         ['fruit', 'apple', 'v2', 'data 2'],
         ['fruit', 'apple', 'v3', 'data 3'],
         ['fruit', 'banana', 'v1', 'data 4'],
         ['fruit', 'banana', 'v2', 'data 5'],
         ['animal', 'dog', 'v1', 'data 6'] ]
</code></pre>
<p>How can I collapse based on the first 2 column and using the data from the highest v ?</p>
<pre><code>result = [ ['fruit', 'apple', 'v3', 'data 3'],
           ['fruit', 'banana', 'v2', 'data 5'],
           ['animal', 'dog', 'v1', 'data 6'] ]
</code></pre>
<p>The list was sorted in the first column, but second column is not. My solution was based on assumption that both column were sorted so it does not work and I have no idea where to go from here.</p>
<pre><code>previous = []
result = []
for a, b, c, d in data:
    if not all(x in previous for x in [a, b]):
        final.append([a, b, c, d])
        previous = [a, b, c, d]
    else:
        if previous[2] &lt; c:
            final[-1][2] = c
            final[-1][3] = d
            previous = [a, b, c, d]
print result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is one way.</p>
<pre><code>import pandas as pd

data = [ ['fruit', 'apple', 'v1', 'data 1'],
         ['fruit', 'apple', 'v2', 'data 2'],
         ['fruit', 'apple', 'v3', 'data 3'],
         ['fruit', 'banana', 'v1', 'data 4'],
         ['fruit', 'banana', 'v2', 'data 5'],
         ['animal', 'dog', 'v1', 'data 6'] ]

df = pd.DataFrame(data, columns=['Col1', 'Col2', 'Col3', 'Col4'])
df['Grouper'] = df['Col1'] + df['Col2']
df['Order'] = df['Col3'].map(lambda x: int(x[-1]))

df = df.sort_values(['Grouper', 'Order'], ascending=[True, False])\
       .drop_duplicates('Grouper')\
       .drop(['Grouper', 'Order'], 1)

lst = df.values.tolist()

# [['animal', 'dog', 'v1', 'data 6'],
#  ['fruit', 'apple', 'v3', 'data 3'],
#  ['fruit', 'banana', 'v2', 'data 5']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><p>You could use:</p>
<ul>
<li><a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">[Python]: itertools.<strong>groupby</strong>(<em>iterable, key=None</em>)</a> - to group (outer) list elements based on their 1<sup>st</sup> 2 values (e.g. <code>("fruit", "banana")</code>)</li>
<li><a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer">[Python]: <strong>max</strong>(<em>iterable, *[, key, default]</em>)</a> - to get the maximum value of one such group, based on their 3<sup>rd</sup> element (the 1<sup>st</sup> letter("v") + the number that comes after it (fixed it, to work with numbers with more than one digit))</li>
<li><a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer">[Python]: Lambda Expressions</a> - to specify the grouping criteria</li>
</ul>
<blockquote>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt;
&gt;&gt;&gt; data = [['fruit', 'apple', 'v1', 'some data'],
...          ['fruit', 'apple', 'v2', 'some data'],
...          ['fruit', 'apple', 'v3', 'some data'],
...          ['fruit', 'banana', 'v1', 'some data'],
...          ['fruit', 'banana', 'v2', 'some data'],
...          ['animal', 'dog', 'v1', 'some data']]
&gt;&gt;&gt;
&gt;&gt;&gt; [max(item[1], key=lambda x: (x[2][0], int(x[2][1:]))) for item in itertools.groupby(data, key=lambda x: (x[0], x[1]))]
[['fruit', 'apple', 'v3', 'some data'], ['fruit', 'banana', 'v2', 'some data'], ['animal', 'dog', 'v1', 'some data']]
</code></pre>
</blockquote></li>
<li><p>Or you could go the (old fashioned) manual way (e.g. using a helper dictionary):</p>
<blockquote>
<pre><code>&gt;&gt;&gt; helper_dict = dict()
&gt;&gt;&gt; for item in data:
...    item_v = helper_dict.get((item[0], item[1]), (None, None, "v0"))[2]
...    if (item_v[0], int(item_v[1:])) &lt; (item[2][0], int(item[2][1:])):
...             helper_dict[(item[0], item[1])] = item
...
&gt;&gt;&gt; print(list(helper_dict.values()))
[['fruit', 'apple', 'v3', 'some data'], ['animal', 'dog', 'v1', 'some data'], ['fruit', 'banana', 'v2', 'some data']]
</code></pre>
</blockquote></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><strong>Another possible approach:</strong></p>
<p>(1) Create a dictionary which maps indices of the first and second columns, and maps the most recent index for each pair. This allows the data to be correctly sorted at the end.</p>
<p>(2) Create a <a href="https://docs.python.org/3.6/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> of all the different groupings of the first and second columns. </p>
<p>(3) Find each of the groupings maximum v value from (2) and combine it with the rest of the elements. This gets returned as the collapsed list. </p>
<p>(4) Sort the collapsed lists based on (1).</p>
<p><strong>Example code:</strong></p>
<pre><code>from collections import defaultdict

data = [['fruit', 'apple', 'v1', 'data 1'],
        ['fruit', 'apple', 'v2', 'data 2'],
        ['fruit', 'apple', 'v3', 'data 3'],
        ['fruit', 'banana', 'v1', 'data 4'],
        ['fruit', 'banana', 'v2', 'data 5'],
        ['animal', 'dog', 'v1', 'data 6']]

groups = defaultdict(list)
sort_map = {}
for i, (fst, snd, *rest) in enumerate(data):
    sort_map[(fst, snd)] = i
    groups[(fst, snd)].append(rest)

result = sorted((list(k) + max(v) for k, v in groups.items()), 
                                      key=lambda x: sort_map[(x[0], x[1])])

print(result)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[['fruit', 'apple', 'v3', 'data 3'], 
 ['fruit', 'banana', 'v2', 'data 5'], 
 ['animal', 'dog', 'v1', 'data 6']]
</code></pre>
</div>
<span class="comment-copy">Is the list sorted? Also, what have you tried? Please show your attempt at solving the problem.</span>
<span class="comment-copy">The list was sorted on column 0, but column 1 is not. At first I thought both would be sorted so I came up with this solution. Editing it in.</span>
<span class="comment-copy">Now that the second column is not sorted, I really have no idea where to go from here.</span>
<span class="comment-copy">Thank you! I forgot to mention that data in col2 repeats with different col1 too, and your code works perfect still.  May I ask what lambda x: int(x[-1]) do?</span>
<span class="comment-copy"><code>lambda</code> is an anonymous function. This one takes a value, gets the last character of the string, then converts it to an integer.</span>
