<div class="post-text" itemprop="text">
<p>I'm just a bit confused on how to make my items in a list see several characters as one.  So far, the entire thing looks like:</p>
<pre><code>classes=input("Enter your classes: " )
     def printsched(classes):
          for n in classes:
               print(n)
          return len(classes)
printsched(classes)
print(printsched(classes))
</code></pre>
<p>When I enter classes in the form of something like <code>["GE0 101", "PSY 101", "GER 104"]</code> I want it to print back out:</p>
<pre><code>GEO 101
PSY 101
GER 104
</code></pre>
<p>See below to see what it gives me.  It sees each character as one item on the list.  I also need it to return the value of all the characters in the list, so in this example, I want it to be 21, but instead it gives me 34.  How can I fix it so GEO 101 and all the rest would be one item?</p>
<pre><code>[
"
G
E
0
1
0
1
"
,

"
P
S
Y

1
0
1
"
,

"
G
E
R

1
0
4
"
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>input</code> always result in a single <code>str</code>. If you want to parse this string as being JSON-like you can use the <code>json</code> module.</p>
<pre><code>import json

classes=json.loads(input("Enter your classes: " ))
def printsched(classes):
    for n in classes:
        print(n)
    return len("".join(classes))
printsched(classes)
</code></pre>
<p>For more user friendly input you can use the split function and trim function.</p>
<pre><code>classes=[x.trim() for x in input("Enter your classes: " ).split(",")]
def printsched(classes):
    for n in classes:
        print(n)
    return len("".join(classes))
printsched(classes)
</code></pre>
<p>Note: do not add multiple things in a single method. The method will become cluttered and unclear. What is the single responsibility of this method, (printing or calculating the length of the input string)</p>
<pre><code>classes=[x.trim() for x in input("Enter your classes: " ).split(",")]

def print_classes(classes):
    for n in classes:
        print(n)

def calc_length(classes
    return len("".join(classes))

print_classes(classes)
print(calc_length(classes))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>classes = input("Enter your classes: ").strip('[""]').split('","')</code></p>
<p>This should work</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>[Update]</strong></p>
<p>Use <code>ast.literal_eval()</code> instead of dangerous <code>eval()</code> (as Francis Colas pointed out in the comment)</p>
<pre><code>import ast

classes=input("Enter your classes: " )

def printsched(classes):
    classes = ast.literal_eval(classes)
    for n in classes:
        print(n)
    return len(classes)

printsched(classes)
</code></pre>
<p><strong>[Original]</strong></p>
<p><strike>I suggest simply using <code>eval()</code> as follows:</strike></p>
<pre><code>classes=input("Enter your classes: " )

def printsched(classes):
    classes = eval(classes)
    for n in classes:
        print(n)
    return len(classes)

printsched(classes)
</code></pre>
</div>
<span class="comment-copy">I've taken the liberty of adding a <code>python-3.x</code> tag because you wouldn't be having this issue with Python 2.</span>
<span class="comment-copy">Please don't suggest <code>eval</code> as a solution for, well, anything really.</span>
<span class="comment-copy"><code>eval</code> is indeed a dangerous proposition. However, in some cases, <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> can do the job.</span>
<span class="comment-copy">Thanks @Francis Colas for your comment. I know <code>eval()</code> is dangerous, but I simply thought that OP is novice for Python. That was my fault.</span>
