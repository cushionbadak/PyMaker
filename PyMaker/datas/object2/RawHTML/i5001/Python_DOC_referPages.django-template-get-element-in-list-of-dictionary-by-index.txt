<div class="post-text" itemprop="text">
<p>I have the following:</p>
<pre><code>item0 = [{'itemCode': 'AZ001', 'price': 15.52}, {'itemCode': 'AB01', 'price': 31.2}, {'itemCode': 'AP01', 'price': 1.2}]
item1 = [{'itemCode': 'BZ001', 'price': 12.55}, {'itemCode': 'BB01', 'price': 34.1}]
</code></pre>
<p>In django template I would like to display the price of the elements of each list by index: 15.52, 12.55 then 31.2, 34.1 then 1.2</p>
<p>List sizes might not be equal, so I am sending the size of the largest list.</p>
<p>Iterating over the max list size:</p>
<p><code>{{i.item|index:forloop.counter0}}</code> gets me <code>{'itemCode': 'AZ001', 'price': 15.52}</code></p>
<p>If I want price, what can I do?</p>
<p>Doing <code>{{i.item|index:forloop.counter0.price}}</code> is giving me invalid key price at index 0.</p>
<p>In other words, I am sending elements in column order and would like to display them in row order without doing list comprehension using zip on the server.</p>
<p>Any solution?</p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if I get your question right, but this is the code what you are asking for.</p>
<p><code>views.py</code>:</p>
<pre><code>def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['item'] = [{'itemCode': 'AZ001', 'price': 15.52}, {'itemCode': 'AB01', 'price': 31.2}]
        return context
</code></pre>
<p><code>template.html</code>:</p>
<pre><code>{{ item.0.price }}
</code></pre>
<p>Results in 15.52</p>
<hr/>
<p>If you want to loop over it you can do it like so:</p>
<pre><code>{% for i in item %}
    {{ i.price }}
{% endfor %}
</code></pre>
<hr/>
<p>After you have updated the question, I would do the following:</p>
<pre><code>def get_context_data(self, **kwargs):
    context = super().get_context_data(**kwargs)
    item0 = [{'itemCode': 'AZ001', 'price': 15.52}, {'itemCode': 'AB01', 'price': 31.2}, {'itemCode': 'AP01', 'price': 1.2}]
    item1 = [{'itemCode': 'BZ001', 'price': 12.55}, {'itemCode': 'BB01', 'price': 34.1}]
    import itertools
    context['zip_longest'] = itertools.zip_longest(item0, item1)
    return context
</code></pre>
<p><code>template.html</code>:</p>
<pre><code>{% for element in zip_longest %}
    {% for item in element %}
        {% if item %}
            {{ item.price }} &lt;br&gt;
        {% endif %}
    {% endfor %}
{% endfor %}
</code></pre>
<p>Results in:</p>
<pre><code>15.52 
12.55 
31.2 
34.1 
1.2 
</code></pre>
<p>In my opinion, it's nothing wrong with using <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>zip_longest</code></a>, since it yields the values from a generator.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&lt;ul&gt;
     {% for key, value in dictionary.items %}
     &lt;li&gt;&lt;a href="{{key}}"&gt;{{value}}&lt;/a&gt;&lt;/li&gt;
     {% endfor %}
&lt;/ul&gt;
</code></pre>
<p>try using this, <a href="https://www.gun.io/blog/how-to-list-items-in-a-dictionary-in-a-django-template" rel="nofollow noreferrer">reference</a></p>
</div>
<span class="comment-copy">You probably need to give more context. Normally instead of using a template tag to get an index based on forloop.counter0, you would iterate directly through item: <code>{% for elem in i.item %}... {{ elem.price }}</code>. Why can't you do that?</span>
<span class="comment-copy">I have multiple lists that I am comparing next to each other. so I need to display them in row based, when I am sending them column based. I can do zip on the server, but I am trying other ways before going to zip.</span>
<span class="comment-copy">Also if you trying to access first element of list then you can do: <code>item.0.price</code>.</span>
<span class="comment-copy">You could write a <a href="https://stackoverflow.com/a/29664945/113962">custom template tag</a>. However using <code>zip</code> (or <code>zip_longest</code> for lists with different lengths) seems like a better approach to me.</span>
<span class="comment-copy">Edited the questions to explain more</span>
