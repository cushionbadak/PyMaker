<div class="post-text" itemprop="text">
<p>I have got into an issue or might quite possibly feature in turn! Not sure, wondering!! In python's datetime library, to get difference in time, as in below snippet.</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.now() - datetime.datetime.now()
datetime.timedelta(-1, 86399, 999958)
&gt;&gt;&gt; tnow = datetime.datetime.now()
&gt;&gt;&gt; datetime.datetime.now() - tnow
datetime.timedelta(0, 4, 327859)
</code></pre>
<p>I would like to understand why <code>datetime.datetime.now() - datetime.datetime.now()</code> is producing output as <strong>-1 days, 86399 seconds</strong> whereas assigning current time to some variable and computing difference gives desired output <strong>0 days, 4 seconds</strong>.</p>
<p>The results seems to be bit confusing, it would be helpful if someone could decode whats going behind</p>
<p>Note: I'm using Python 2.7</p>
</div>
<div class="post-text" itemprop="text">
<p>As per the documentation of <a href="https://docs.python.org/3/library/datetime.html#timedelta-objects" rel="nofollow noreferrer">timedelta object</a> </p>
<blockquote>
<p>If the normalized value of days lies outside the indicated range,
  OverflowError is raised.</p>
<p>Note that normalization of negative values may be surprising at first.
  For example:</p>
</blockquote>
<pre><code>&gt;&gt;&gt; from datetime import timedelta
&gt;&gt;&gt; d = timedelta(microseconds=-1)
&gt;&gt;&gt; (d.days, d.seconds, d.microseconds)
(-1, 86399, 999999)
</code></pre>
<p>This is valid for python 2.7 and 3 both.</p>
<p>Why this is happening is simple:</p>
<pre><code>a , b = datetime.datetime.now(), datetime.datetime.now()
# here datetime.now() in a will be &lt;= b.
# That is because they will be executed separately at different CPU clock cycle.

a - b
# datetime.timedelta(-1, 86399, 999973)

b - a
# datetime.timedelta(0, 0, 27)
</code></pre>
<p>To get the proper time difference:</p>
<pre><code>(tnow - datetime.datetime.now()).total_seconds()
# output: -1.751166
</code></pre>
<p>This Answer gives more information on how to use time delta safely (handle negative values) <a href="https://stackoverflow.com/questions/8408397/python-timedelta-issue-with-negative-values">Link</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You are encountering a "corner case" situation.</p>
<ul>
<li>Every <code>datetime.datetime.now()</code> produces a <code>datetime.datetime</code> object (<a href="https://docs.python.org/3/library/datetime.html#datetime.datetime" rel="nofollow noreferrer">[Python]: https://docs.python.org/3/library/datetime.html#datetime-objects</a>), which is the current date &amp; time <strong>at the moment</strong> the call was made</li>
<li>You have 2 such calls (even if they are on the same line). Since the <em>CPU</em> speeds are very high nowadays, every such call takes a very small amount of time (much less than microseconds, I presume)</li>
<li>But, when the 1<sup>st</sup> call is at the very end of a (microsecond?) period, and the 2<sup>nd</sup> one is at the beginning of the next one, you'd get this behavior:</li>
</ul>
<blockquote>
<pre><code>&gt;&gt;&gt; import datetime

&gt;&gt;&gt; now0 = datetime.datetime.now()
&gt;&gt;&gt; now0
datetime.datetime(2018, 2, 20, 12, 23, 23, 1000)
&gt;&gt;&gt; delta = datetime.timedelta(microseconds=1)
&gt;&gt;&gt; now1 = now0 + delta
&gt;&gt;&gt; now0 - now1
datetime.timedelta(-1, 86399, 999999)
</code></pre>
</blockquote>
<p><strong>Explanation</strong>:</p>
<ul>
<li>Let <code>now0</code> to be the result of the 1<sup>st</sup> call made to <code>datetime.datetime.now()</code></li>
<li>Let's say that the 2<sup>nd</sup> <code>datetime.datetime.now()</code> call happens one microsecond later (I am reproducing the behavior using the <code>delta</code> object, as the times involved here are waaay too small for me to be able to to run the line at the <strong>exact</strong> time when this behavior is encountered). That is placed into <code>now1</code></li>
<li>When subtracting them you get the negative value (in my case is <code>-delta</code>), since <code>now0</code> happened earlier than <code>now1</code> (check <a href="https://docs.python.org/3/library/datetime.html#timedelta-objects" rel="nofollow noreferrer">[Python]:  timedelta Objects</a> for more details)</li>
</ul>
</div>
<span class="comment-copy">the first statement gives datetime.now - datetime.now which is like 15:55 - 15:55. I don't know what it should return but it isn't what you want I assume. the second one records the time of when a variable is set then gets the time  now vs that time. not sure why it would return 4 seconds though... 4 seconds to go through datetime.now - tnow?</span>
<span class="comment-copy"><code>datetime.datetime.now() - datetime.datetime.now()</code> returns <code>datetime.timedelta(0)</code>. I can think of an explanation... how slow is your machine? I'd bet you can't reproduce it every time you want.</span>
<span class="comment-copy">Looks like it only happens in python 2. In python 3, I get <code>datetime.timedelta(0)</code></span>
<span class="comment-copy">problem solved: its the python versioning. python 2.x gives bad output for datetime.now - datetime.now but python 3.x is fine</span>
<span class="comment-copy">Awesome thanks..</span>
<span class="comment-copy">You're welcome!</span>
