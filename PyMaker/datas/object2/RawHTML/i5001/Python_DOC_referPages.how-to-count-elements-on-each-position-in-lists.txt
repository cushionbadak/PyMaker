<div class="post-text" itemprop="text">
<p>I have a lot of lists like:</p>
<pre><code>SI821lzc1n4
MCap1kr01lv
</code></pre>
<p>All of them have the same length. I need to count how many times each symbol appears on each position. Example:</p>
<pre><code>abcd
a5c1
b51d
</code></pre>
<p>Here it'll be <code>a5cd</code></p>
</div>
<div class="post-text" itemprop="text">
<p>One way is to use <code>zip</code> to associate characters in the same position. We can then send all of the characters from each position to a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>, then use <code>Counter.most_common</code> to get the most common character</p>
<pre><code>from collections import Counter

l = ['abcd', 'a5c1', 'b51d']

print(''.join([Counter(z).most_common(1)[0][0] for z in zip(*l)]))
# a5cd
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from statistics import mode

[mode([x[i] for x in y]) for i in xrange(len(y[0]))]
</code></pre>
<p>where y is your list.</p>
<p>Python 3.4 and up</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use combination of <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow noreferrer">zip</a> and <a href="https://docs.python.org/2/library/collections.html" rel="nofollow noreferrer">Counter</a></p>
<pre><code>a = ("abcd")
b = ("a5c1")
c = ("b51d")

from collections import Counter

zippedList = list(zip(a,b,c))
print("zipped: {}".format(zippedList))


final = ""
for x in zippedList:
    countLetters = Counter(x)
    print(countLetters)
    final += countLetters.most_common(3)[0][0]

print("output: {}".format(final))
</code></pre>
<p>output:</p>
<pre><code>zipped: [('a', 'a', 'b'), ('b', '5', '5'), ('c', 'c', '1'), ('d', '1', 'd')]
Counter({'a': 2, 'b': 1})
Counter({'5': 2, 'b': 1})
Counter({'c': 2, '1': 1})
Counter({'d': 2, '1': 1})
output: a5cd
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This all depends on where your list is. Is your list coming from another file or is it an actual array? At the end of the day, the best way to do this simply is going to be to use a dictionary and a for loop.</p>
<pre><code>new_dict = {}
for i in range(len(line)):
    if i in new_dict:
        new_dict[i].append(line[i])
    else:
        new_dict[i] = [line[i]]
</code></pre>
<p>Then after that I'm assuming that you'd like to output the four most common element appearances. For that I'd recommend importing statistics and using the mode method...</p>
<pre><code>from statistics import mode
new_line = ""
for key in new_dict:
    x = mode(new_dict[key])
    new_line = new_line + x
</code></pre>
<p>However, your question is quite vague, please elaborate more next time.
P.s. I'm a newbie so all you experienced programmers plz don't hate :)</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use a combination of <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><em>defaultdict</em></a>, <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><em>enumerate</em></a>, and <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><em>Counter</em></a>:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter, defaultdict
&gt;&gt;&gt; data = '''abcd
a5c1
b51d
'''

&gt;&gt;&gt; poscount = defaultdict(Counter)
&gt;&gt;&gt; for line in data.split():
        for i, character in enumerate(line):
            poscount[i][character] += 1

&gt;&gt;&gt; ''.join([poscount[i].most_common(1)[0][0] for i in sorted(poscount)])
'a5cd'
</code></pre>
<p>Here's how it works:</p>
<ul>
<li>The <em>defaultdict()</em> creates new entries when it sees a new key.</li>
<li>The <em>enumerate()</em> function returns both the character and its position in the line.</li>
<li>The <em>Counter</em> counts the occurences of individual characters</li>
<li>Combining the three makes a defaultdict whose keys are the column positions and whose values are character counters.  That gives you one character counter per column.</li>
<li>The <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow noreferrer"><em>most_common()</em></a> method returns the highest frequency (character, count) pair for that counter.</li>
<li>The <code>[0][0]</code> extracts the character from the list of (character, count) tuples.</li>
<li>The <em>str.join()</em> method combines the results back together.</li>
</ul>
</div>
<span class="comment-copy">How is this a count?</span>
<span class="comment-copy">I assume you want to find the most frequent symbol in a column and put it into the result string, right?</span>
<span class="comment-copy">FWIW, using <code>zip(*m)</code> to transpose only works well for small number of inputs.  This is because the star fully unpacks the iterable so that it passed in each of the OP's "lots of lists" in as separate arguments to the <i>zip()</i> function.</span>
<span class="comment-copy">@RaymondHettinger I have trouble believing that's going to be a limiting factor. What would you use instead?  I took the liberty of <a href="https://repl.it/@Haugh/CoordinatedImaginaryOrder" rel="nofollow noreferrer">running some tests using the solutions here</a> and the approaches using <code>zip(*l)</code> seem to be the fastest.</span>
<span class="comment-copy">This will raise <code>StatisticsError</code> if there is not exactly one most common letter for each index.</span>
