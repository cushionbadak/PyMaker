<div class="post-text" itemprop="text">
<p>Is there an easy way in python to create a ring-bufferwith "named" elements?
With that I mean a ring-buffer in that you can easily jump to any position to start stepping through the ring-buffer in either (!) direction. And the ring-buffershould return different values depending on the direction the buffer is stepped through. </p>
<p>The elements should therefore contain the following information:</p>
<pre><code>(value_in_ccw_direction, value_in_cw_direction)
</code></pre>
<p>Ideally you should also be able to tell the length of the ring-buffer so you know when you have read every element.</p>
<p>I thought about <code>OrderedDict</code>, since you can step into each element quickly and the order stays the same. However, you cannot access the previous element in an <code>OrderedDict</code>. So I would need a mixture of dict and list (and the first and last elements should be fused)...</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use two <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a> with a maxlen arg inside a CircularBuffer class as follows:</p>
<pre><code>from collections import deque

class CircularBuffer(object):

    def __init__(self, max_length=10):
        self.value_deque = deque(maxlen=max_length)
        self.key_deque = deque(maxlen=max_length)

##  According to your needs
##    def __getitem__(self, key):
##        return self.value_deque[self.key_deque[key]]
##
##    def __setitem__(self, key, value):
##        self.value_deque

    def __len__(self):
        # Called to implement the built-in function len()
        return len(self.value_deque)


    def append(self, key, value):
        # add a new entry to the right side
        self.value_deque.append(value)
        self.key_deque.append(key)

    def appendleft(self, key, value):
        # add a new entry to the left side
        self.value_deque.appendleft(value)
        self.key_deque.appendleft(key)

    def pop(self):
        # return and remove the rightmost item
        return {self.value_deque.pop(): self.key_deque.pop()}

    def popleft(self):
        # return and remove the leftmost item
        return {self.value_deque.popleft(): self.key_deque.popleft()}

    def reverse(self):
        # reverse the contents of a deque in place
        self.value_deque.reverse()
        self.key_deque.reverse()

    def __contains__(self, item):
        pass

    def __str__(self):
        # Called by str(object) and the built-in functions format() and print()
        return_dict = {}
        for key, value in zip(self.key_deque, self.value_deque):
            return_dict[key] = value
        return str(return_dict)
</code></pre>
<p>And in your console:</p>
<pre><code>&gt;&gt;&gt; a = CircularBuffer()
&gt;&gt;&gt; a.append("test", 1)
&gt;&gt;&gt; print(a.pop())
{1: 'test'}
&gt;&gt;&gt; a.append("test", 1)
&gt;&gt;&gt; a.append("key", "value")
&gt;&gt;&gt; a.append("foo", "bar")
&gt;&gt;&gt; print(len(a))
3
&gt;&gt;&gt; print(a)
{'test': 1, 'key': 'value', 'foo': 'bar'}
&gt;&gt;&gt; a.reverse()
&gt;&gt;&gt; print(a)
{'foo': 'bar', 'key': 'value', 'test': 1}
</code></pre>
<p>Change according to your requirements. Cheers!!</p>
</div>
<span class="comment-copy">Thank you for the answer. I now realize that I might have used the word buffer misleadingly: I do not want to be able to pop or append items but instead just want to read a fixed structure again and again....</span>
<span class="comment-copy">Can you provide an example on how you want to achieve this?</span>
