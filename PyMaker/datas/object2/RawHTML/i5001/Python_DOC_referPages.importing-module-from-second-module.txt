<div class="post-text" itemprop="text">
<p>I am developing small app with few submodules:</p>
<pre><code>src/
    setup.py
    myapp/
        myGuiapp.py
        modules/
            __init__.py
            editorGui.py
            fileParser.py
</code></pre>
<p>modules/__ init __.py</p>
<pre><code>from editorGui import editorWindow
from fileParser import parseMyFile
</code></pre>
<p>myGuiapp.py</p>
<pre><code>from modules import editorWindow
from modules import parseMyFile
parseMyFile(parms)
editorWindow(self)
</code></pre>
<p>EditorGui.py</p>
<pre><code>from fileParser import parseMyFile
# from .fileParser import parseMyFile
# from modules.fileParser import parseMyFile
fileParser(parms)
</code></pre>
<p>I would like to have my EditorGui.py to be called from myGuiapp.py but also to be able to run it by itself.
How should i setup relative importing in such case ?</p>
<p>If in EditorGui.py I will set :</p>
<pre><code>from modules.fileParser import parseMyFile
&gt;python editorGui.py
ModuleNotFoundError: No module named 'modules'
</code></pre>
<p>but from main app</p>
<pre><code>&gt;python myGuiapp.py
</code></pre>
<p>OK !</p>
<p>If in EditorGui.py I will set :</p>
<pre><code>from .fileParser import parseMyFile
&gt;python EditorGui.py
ModuleNotFoundError: No module named '__main__.fileParser'; '__main__' is not a package
</code></pre>
<p>If in EditorGui.py I will set :</p>
<pre><code>from fileParser import parseMyFile
&gt;python editorGui.py
</code></pre>
<p>OK !</p>
<pre><code>&gt;python myGuiapp.py
ModuleNotFoundError: No module named 'fileParser'
</code></pre>
<p>How can I make both work and what i am doing wrong here? I would like to avoid setting up ABSOLETE paths to this dev directory.
What would be most pythonic and clean way to structure such app ?</p>
<p><strong>EDIT:</strong>
After @Diego Trazzi post, I've decided to move my EditorGui.py up the level:</p>
<pre><code>src/
    setup.py
    myapp/
        myGuiapp.py
        editorGui.py
        modules/
            __init__.py
            fileParser.py
</code></pre>
<p>This solves many issues but for curiosity, my question still stands. How can I import module from same level while being imported by code from parent directory? </p>
</div>
<div class="post-text" itemprop="text">
<p>To avoid specifying the relative path to the modules You could append to your file the path:</p>
<pre><code># yourfile.py
import sys
sys.path.insert(0, '/path/to/application/app/folder')
</code></pre>
<p>You could also specify it in the shell from which you run the command: </p>
<pre><code>python [-bBdEiOQsRStuUvVWxX3?] [-c command | -m module-name | script | - ] [args]
</code></pre>
<p><a href="https://docs.python.org/2/using/cmdline.html" rel="nofollow noreferrer">https://docs.python.org/2/using/cmdline.html</a></p>
<h3>Better solution</h3>
<p>Ideally your project should be structured in such way so all the </p>
<pre><code>package_name/
  /* setup.py and other misc files */
  package_name/
    __init__.py
    /* module files go here */
  test/
    /* tests go here */
</code></pre>
<p>So that your executables reside in the top level and when you distribute your project users will not have to dig into sub folders. I have found this answer very helpful: </p>
<p><a href="https://stackoverflow.com/questions/32362570/python-nesting-modules">Python Nesting Modules</a></p>
</div>
<span class="comment-copy">Use <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-m" rel="nofollow noreferrer">python's <code>-m</code> option</a>.</span>
<span class="comment-copy">it does not sound like pythonic way of cleaning up code. It's rather a workaround, similar to direct, absolete path to module.</span>
<span class="comment-copy">Thanks Diego! I would really prefer to avoid adding any kind of paths to my code as it is not procedural way i would prefer to have. As for the structure, maybe you're right, maybe i should decide to move my EditorGui.py up  to be in the same level as main myGuiapp.py it may solve some issues.</span>
