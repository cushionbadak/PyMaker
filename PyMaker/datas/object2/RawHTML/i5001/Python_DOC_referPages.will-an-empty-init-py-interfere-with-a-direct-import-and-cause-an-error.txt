<div class="post-text" itemprop="text">
<p>Some code has been refactored to make imports direct and there is a bit of a mess with reverted commits etc.. I am getting an <code>ImportError</code> and don't understand the Python import system well enough to know why. Have spent a long time looking at comparisons between branches etc but just can't find what it is..</p>
<p>Given the following directory structure, </p>
<pre><code>our_project/
    __init__.py
    directory1/
        __init__.py
        file1.py
        file2.py
        file3.py
    directory2/
        __init__.py
        file3.py
        file4.py
        file5.py
    directory3/
        __init__.py
        file6.py
        file7.py
        file8.py
</code></pre>
<p>All the <code>__init__.py</code> 's are empty except the one in the <code>our_project/</code> directory which has some code in it. </p>
<p>Would the following at the top of <code>directory3/file7.py</code> work, and not cause an <code>ImportError</code>:</p>
<pre><code>from out_project.directory1.file1 import my_function
</code></pre>
<p>Or do you need to write </p>
<p><code>from our_project.directory1 import my_function</code> ?</p>
<p>It just feels as if this empty <code>__init__.py</code> is somehow interfering with things..</p>
</div>
<div class="post-text" itemprop="text">
<p>The top-level package suggested by your folder layout is <code>our_project</code>. That means the folder containing it should be in the Python search path.</p>
<p>Then you can do absolute imports from anywhere with <code>from our_project.directory1.file1 import my_function</code>.</p>
<p>From the <code>my_project.directory3.file7</code> module, you could instead use a relative import, <code>from ..directory1.file1 import my_function</code>.</p>
<p>The relative import might not work though if you're running <code>file7.py</code> as a script (with e.g. <code>python file7.py</code> on the command line). It's generally a bad idea to run scripts that are in a package by filename, as the interpreter won't be able to tell where they're supposed to be put in the package hierarchy. Instead, use <code>python -m our_project.directory4.file7</code> to run the module by its absolute name.</p>
<p>Here is an link to the <a href="https://docs.python.org/3/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">python docs</a> which has a nice tutorial where all of it is explained.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <strong>init</strong>.py files are just there to tell python to treat that directory as a python package so i believe how you would import depends on which packages is installed on the system (it searches you PYTHONPATH to find installed packages/modules). If just the our_project package in your example is installed you would need to import like</p>
<pre><code> from our_package.directory1.file1 import my_function
</code></pre>
<p>You could also use an relative import which would work regardless of what is installed</p>
<pre><code>  from .directory1.file1 import my_function
</code></pre>
<p>The documentation on packages is here: <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html#packages</a></p>
<p>Info on the module search path is here:
<a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html#the-module-search-path</a></p>
</div>
<span class="comment-copy">you don't have a <code>directory1</code> in the directory where you have <code>file7.py</code>. Try <code>from ..directory1.file1 import my_function</code></span>
<span class="comment-copy">This should work fine. If you see unexpected behaviour, you'll need to mention that behaviour. That is, show the full traceback of the <code>ImportError</code>.</span>
<span class="comment-copy">Sorry, you are right about the dots. Fixed the paths</span>
<span class="comment-copy">You've changed the question. <code>from ..directory1.file1 import my_function</code> was perfectly fine.</span>
<span class="comment-copy">Really? I thought I just wrote the full path rather than an abbreviated path as you might write` /home/folder1/folder2` in Linux rather than <code>../folder2</code> if you were sitting in a different folder within folder1 next to folder2</span>
<span class="comment-copy">Thanks, well your answer alleviates my main concern, which was that the <code>__init__.py</code> in <code>directory3/</code> somehow forces you to import from the directory rather than directly from the file</span>
