<div class="post-text" itemprop="text">
<p>I'm writing a function that should take an integer <code>w</code> and a string <code>text</code> and return a string where the following are true</p>
<p>1) lines are of length w (the last line may be shorter as needed)</p>
<p>2) if a word is bigger than a line, the word will be wrapped to the next line</p>
<p>3) if there are consecutive spaces we will not output the extra spaces </p>
<h2>Examples</h2>
<p>My function works as it should if it were written grammatically right but I have to account for things like the 2nd example. </p>
<p>Example 1</p>
<pre><code>    &gt;&gt;&gt; w = 17
    &gt;&gt;&gt; text = "Hi my name is bob I like to go to the park"
    &gt;&gt;&gt; bend(w, text)
    Hi my name is bob
    I like to go to
    the park  
</code></pre>
<p>Example 2</p>
<pre><code>w = 2
text = "a    b c"
bend(w, text)
</code></pre>
<p>This fails because of multiple consecutive spaces and prints</p>
<pre><code>a 

 b
 c
</code></pre>
<p>When it should print</p>
<pre><code>a
b
c
</code></pre>
<p><strong>"However, it will break long lines at a space rather than center of a word in text"</strong></p>
<p>Example 3</p>
<p>Stuck at this part. Is there an easier way to know if a word can be spelled out with the given integer w ?</p>
<pre><code>w = 4
text = "ab bob"
</code></pre>
<p><code>bend(w,text)</code> should print</p>
<pre><code>ab
bob 
</code></pre>
<p>instead of</p>
<pre><code>abbo
ob
</code></pre>
<p>This is my code so far</p>
<pre><code>def bend(w, text):
    '''(int, str) -&gt; NoneType
    Takes an integer w as the character length of each line.
    However, it will break long lines at a space rather than 
    center of a word in text.


    a = ""

    i = 0
    line_count = 0
    occur = True
    while (i &lt; len(text)):
        if(text[i] == " "):
            word_full = True
            j = i + 1
            no_space = True
            line_test = line_count + 1
            while (j &lt; len(text) and no_space == True):
                if(text[j] == " " or (j+1) == len(text)):
                    word_full = False
                    no_space = False
                elif (line_test % w == 0):
                    no_space = False
                else:
                    j = j + 1
                    line_test += 1
            if(word_full == True):
                print(a)
                a = ""        
                a += text[i+1]
                line_count = 0
                i = i + 2
            else:
                if(line_count != 0):
                    a += text[i]
                    i = i + 1
                else:
                    a += text[i+1]
                    i = i + 2               

                line_count += 1
        elif((line_count+1) % w == 0 and line_count != 0):
            a += text[i]
            print(a)
            a = ""
            i = i + 1
            line_count = 0
        else:
            a += text[i]
            i = i + 1
            line_count += 1

    print(a)

text = "Hi my name is bob I like to go to the park"
w = 17
bend(w, text)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following steps are necessary to create a function that will create lines with at most w characters by joining the words from the original string:</p>
<p>1) remove duplicate spaces. We do this by abusing <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>.split()</code></a> which will insert an empty string into a list when a delimeter appears multiple times, then using <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a> to remove those empty strings.</p>
<p>2)Create a new list that joins words that can create a line of <code>length &lt;= w</code>
  Handle edge case of words being larger than lines by wrapping words on next line.</p>
<p>3)Join lines by newline characters and return the string</p>
<pre><code>def bend(w, s):
    s = s.split(" ") #creates list of all the words (any sequence between characters)
    lst = filter(None, s) # removes the repeated spaces from list
    new_lst = [""]
    i = 0
    for word in lst:
        line = new_lst[i] + " " + word #possible line
        if(new_lst[i] == ""): #first time is different
            line = word
        if(len(word)  &gt; w): #splits words that are too large
            while(len(word)  &gt; w):
                new_lst.append(word[:w])
                i += 1
                word = word[w:]
            i += 1
            new_lst.append(word)
        elif(len(line) &gt; w):
           new_lst.append(word) #line length reached, start new line
           i += 1        
        else:
            new_lst[i] = line
    return "\n".join(new_lst) #insert new line characters
</code></pre>
<p>Now for the three examples, we obtain the following:           </p>
<pre><code>print("test 1")
w = 4
text = "ab bob"
print(bend(w, text))
w = 2
text = "a    b c"
print("test 2")
print(bend(w, text))
print("test 3")
w= 17
text = "Hi my name is bob I like to go to the park"
print(bend(w, text))
print("test 4")
w= 5
text = "Hello 555555 word"
print(bend(w, text))

&gt;&gt;&gt;
test 1
ab
bob
test 2
a
b
c
test 3
Hi my name is bob
I like to go to
the park
test 4
Hello
55555
5
word
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The basic idea is to not look for whitespaces but split the string into single words and work with those. That also avoids possible complications with potential multiple whitespaces.
The code might seem long, but that's only because of all the comments...</p>
<p>And please keep the code documentation as you did in your example, thats a very good habit!:)</p>
<pre><code>def bend(width, string)-&gt;str:
    """Bend single string to lines with maximum width.

    The string is splitted into single words, which are then put back together in
    a line until the maximum line width is reached.
    This process is repeated until the whole string is bent to the given width.
    """

    string = string.split()

    #handle exception: input only one word
    if len(string) == 1:
        string = list(string[0])
        text,cntr = "",0

        for letter in string:
            cntr += 1
            text += letter
            if cntr == width:
                text += "\n"
                cntr = 0
        return text

    #usual procedure:
    length,line,lines = 0,[],[]

    for word in string:

        #add word to line:
        line.append(word)
        #calculate length of words
        length += len(word) 
        #calculate length of whitespaces
        spaces = len(line)-1

        if length+spaces &gt; width:
        #line is too long, therefor add every word in line but the last one to lines:
            lines.append(line[:-1])
            #reset line and length (and leave only the last spared word):
            last_word = line[-1]
            line = [last_word]
            length = len(last_word)
            #added takes care of the very last iteration (last line might not be added to lines)
            added = True
        added = False

    #add last line if necessary:
    if not added:
        lines.append(line)

    #produce end result:
    text = []

    for line in lines:
        #unite every word in line, sperated by one whitespace:
        text.append(" ".join(line))

    #if you want one single string, otherwise text will be a list of "bent" lines
    text = "\n".join(text)

    return text
</code></pre>
<hr/>
<pre><code>&gt;&gt;test_text = "Hi my name is bob I like to go to the park"
&gt;&gt;print(bend(17, test_text))
Hi my name is bob
I like to go to
the park
</code></pre>
</div>
<span class="comment-copy">Summarize your question before your code snippet</span>
<span class="comment-copy">So, if I'm reading this correctly, the behavior you want, is to insert a new line after the wth character of the string, but you don't want to include spaces in that count. If so I can provide you a simpler method.</span>
<span class="comment-copy">Actually, I think I follow you now. For every space, insert a new line. Additionally, insert a newline w characters in. However, does the w characters in newline include spaces in the count?</span>
<span class="comment-copy">Yes @MatthewCiaramitaro. The w character does include space but not as a word. I've been on this for a while and got completely stumped after thinking of edge cases. Really hoping for a simpler way.</span>
<span class="comment-copy">Do you want to achieve this on your own? Otherwise just use this simple built in module: <a href="https://docs.python.org/3/library/textwrap.html" rel="nofollow noreferrer">textwrap</a></span>
<span class="comment-copy">"Hi my name is bob" is 17 characters, so it should be on line one. My example one was correct</span>
<span class="comment-copy">sorry for that, now it works fine...</span>
<span class="comment-copy">print(bend(5, "555555")) -&gt; 555555, should be "55555\n 5"</span>
<span class="comment-copy">now you want to break a single word, thats something else... and can easily be caught at the top of the function.</span>
<span class="comment-copy">@et  So with example 3 we want to wrap the word because the lines must be less than length w, <code>ab b\nob</code> but if there is a word larger than the line length, you want us to make it into multiple words?</span>
