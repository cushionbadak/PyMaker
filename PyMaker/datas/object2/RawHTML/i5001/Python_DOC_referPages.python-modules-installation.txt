<div class="post-text" itemprop="text">
<p>I am new to <strong>python</strong>. I have installed <strong>python 3.7</strong> and created some <strong>basic applications</strong>. In order to achieve many things, I am required to <strong>install</strong> that <strong>module</strong> for example to call a Rest API, I installed <strong>requests</strong> module. My question is, why doesn't <strong>python</strong> come with <strong>everything already installed</strong>? What <strong>benefits</strong> we are getting with this <strong>python's approach</strong>? Also, if I <strong>deploy</strong> my python application on few PCs, do we need to <strong>install</strong> those <strong>modules</strong> <strong>again</strong> on <strong>all</strong> of these PCs?</p>
</div>
<div class="post-text" itemprop="text">
<p>These modules don't come with the default Python distribution because they could easily fill up your hard drive up with less useful modules, like <a href="https://stackoverflow.com/users/2357112/user2357112">user2357112</a> already pointed out in the comment (on PyPI only are <a href="https://pypi.python.org/simple" rel="nofollow noreferrer">130.265 packages</a> at the time of this writing, Imagine how fast a server drive can be filled with that).</p>
<p>But if you don't want to download the dependencies every time, you have two options to work around this:</p>
<h2>Option 1: Create your own PyPI module (harder)</h2>
<p>The process of how to create, package and distribute your own project is already well <a href="https://packaging.python.org/tutorials/distributing-packages/" rel="nofollow noreferrer">documented in the official Python docs</a>.<br/>
In your <code>setup.py</code> file you call the setup constructor (after importing <code>setuptools</code> with <code>from setuptools import setup, find_packages</code>)</p>
<pre><code>setup(
    #Define your project properties here
)
</code></pre>
<p>In that constructor you can also set a property called <a href="https://packaging.python.org/tutorials/distributing-packages/#install-requires" rel="nofollow noreferrer"><code>install_requires</code></a>. This property allows you to define dependent packages to yours. Let's take for example you need Requests and Beautiful Soup 4, you'd set the <code>install_requires</code> variable like this:</p>
<p>install_requires = ['requests', 'beautifulsoup4']</p>
<p>On this way you can also add more packages if you need to.</p>
<h2>Option 2: Use git submodules (easier)</h2>
<p>This option would require you to download the packages locally and save them together with your framework in a seperate repository (let's assume we have created a repo called rock for that):</p>
<pre><code>git submodule add https://github.com/example/rock rock
</code></pre>
<p>With this command you create a new empty folder called rock and register it as the container for this submodule. To get the files in the repo after that, you need to run the update command for submodules:</p>
<pre><code>git submodule update --init --recursive
</code></pre>
<p>And then you have all needed files to work again. <a href="https://github.com/blog/2104-working-with-submodules" rel="nofollow noreferrer">See also the more detailed introduction to git submodules by GitHub</a>.<br/>
As a side note: If you don't use a version control system yet, I highly recommend you'll already need to have a git command line client installed in order to properly use submodules</p>
</div>
<span class="comment-copy">Why would it come with everything already installed? How would it come with everything already installed? Everything is a lot of things. Do you <i>want</i> Python to be bigger than your hard drive and come with every insecure, pointless piece of crap anyone has ever created, ever?</span>
<span class="comment-copy">Yes, if you talk about MS Visual Studio, it comes we most the assemblies already there. I could be because it is owned by a commercial company.</span>
<span class="comment-copy">No it doesn't. If you install a Visual Studio C# environment, it comes with the C# standard library. It doesn't come with any third-party libraries I can see, and it certainly makes no attempt to bundle every third-party library ever. Are you aware that <code>requests</code> is not something developed by the core Python development team?</span>
<span class="comment-copy">the thing that confused me was that with MS VS, it comes with most of the stuff which is sufficient to do most of the things. But with python, in order to call REST Api, I had to install requests. So, is anything like requests module  there which comes with python basic installation?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/urllib.html" rel="nofollow noreferrer"><code>urllib</code></a>. It's kind of unwieldy, which is why Kenneth Reitz bothered with writing the Requests package instead of using the standard library.</span>
