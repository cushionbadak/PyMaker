<div class="post-text" itemprop="text">
<p>I have a dictionary where the keys are tuples. I'm looking for a comprehension list to decompose the tuples in a list</p>
<pre><code>dicto={(1,2):1, (3,4):1, (5,6):3}
expected outcome: [1,2,3,4,5,6] (order doesnt matter)
</code></pre>
<p>The best I came up so far is :</p>
<pre><code>[x for x, y in dicto.keys()] ### [x, y for x, y in dicto.keys()] doesnt work :-(
</code></pre>
<p>Is there a nice and elegant way to achieve that in a single line ?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You flatten <code>dicto.keys()</code> by using a single comprehension:</p>
<pre><code>dicto={(1,2):1, (3,4):1, (5,6):3}
final_result = [i for b in dicto.keys() for i in b]
</code></pre>
<p>Output:</p>
<pre><code>[1, 2, 5, 6, 3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can fetch all keys of your <code>dict</code>, flatten it with <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a>to get your desired result</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; dicto={(1,2):1, (3,4):1, (5,6):3}
&gt;&gt;&gt; list(itertools.chain(*dicto.keys()))
&gt;&gt;&gt; [1, 2, 5, 6, 3, 4]
</code></pre>
<p>Alternatively you can also use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a> to flatten your nested list of tuples (dict keys)</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; dicto={(1,2):1, (3,4):1, (5,6):3}
&gt;&gt;&gt; list(itertools.chain.from_iterable(dicto.keys()))
&gt;&gt;&gt; [1, 2, 5, 6, 3, 4] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the reduce function to combine the lists:</p>
<pre><code>dicto = {(1,2):1, (3,4):1, (5,6):3}
your_list = list(reduce(lambda a, b: a + b, dicto.keys()))
</code></pre>
</div>
<span class="comment-copy">Good answer. There's <code>list(itertools.chain.from_iterable(dicto.keys()))</code> too.</span>
