<div class="post-text" itemprop="text">
<p>I'm embedding Python 3.6 in my application, and I want to disable import command in the scripts to prevent users to import any python built-in libraries. I'd like to use only the language itself and my own C++ defined modules.</p>
<pre class="lang-cpp prettyprint-override"><code>Py_SetProgramName (L"Example");
Py_Initialize ();
PyObject* mainModule = PyImport_AddModule ("__main__");
PyObject* globals = PyModule_GetDict (mainModule);

// This should work
std::string script1 = "print ('example')";
PyRun_String (script1.c_str (), Py_file_input, globals, nullptr);

// This should not work
std::string script2 = "import random\n"
                      "print (random.randint (1, 10))\n";
PyRun_String (script2.c_str (), Py_file_input, globals, nullptr);

Py_Finalize ();
</code></pre>
<p>Do you know any way to achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has a long history of being impossible to create a secure sandbox (see <a href="https://stackoverflow.com/questions/3068139/how-can-i-sandbox-python-in-pure-python">How can I sandbox Python in pure Python?</a> as a starting point, then dive into an old <a href="https://mail.python.org/pipermail/python-dev/2013-November/thread.html#130132" rel="nofollow noreferrer">python-dev discussion</a> if you feel like it). Here are what I consider to be your best two options.</p>
<h1>Pre-scan the code</h1>
<p>Before executing anything, scan the code. You could do this in Python with the <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer">AST module</a> and then walk the tree, or can likely get far enough with simpler text searches. This likely works in your scenario because you have restricted use cases - it doesn't generalize to truly arbitrary code.</p>
<p>What you are looking for in your case will be any <code>import</code> statements (easy), and any top-level variables (e.g., in <code>a.b.c</code> you care about <code>a</code> and likely <code>a.b</code> for a given <code>a</code>) that are not "approved". This will enable you to fail on any code that isn't clean before running it.</p>
<p>The challenge here is that even trivally obfuscated code will bypass your checks. For example, here are some ways to import modules given other modules or globals that a basic scan for <code>import</code> won't find. You would likely want to restrict direct access to <code>__builtins__</code>, <code>globals</code>, some/most/all names with <code>__double_underscores__</code> and members of certain types. In an AST, these will unavoidably show up as top-level variable reads or attribute accesses.</p>
<pre><code>getattr(__builtins__, '__imp'+'ort__')('other_module')

globals()['__imp'+'ort__']('other_module')

module.__loader__.__class__(
    "other_module",
    module.__loader__.path + '/../other_module.py'
).load_module()
</code></pre>
<p>(I hope it goes somewhat without saying, this is an impossible challenge, and why this approach to sandboxing has never fully succeeded. But it may be good enough, depending on your specific threat model.)</p>
<h1>Runtime auditing</h1>
<p>If you are in a position to compile your own Python runtime, you might consider using the (currently draft) <a href="https://www.python.org/dev/peps/pep-0551/" rel="nofollow noreferrer">PEP 551</a> hooks. (Disclaimer: I am the author of this PEP.) There are draft implementations against the latest <a href="https://github.com/zooba/cpython/tree/pep551" rel="nofollow noreferrer">3.7</a> and <a href="https://github.com/zooba/cpython/tree/pep551_36" rel="nofollow noreferrer">3.6</a> releases.</p>
<p>In essence, this would let you add hooks for a range of events within Python and determine how to respond. For example, you can listen to all <code>import</code> events and determine whether to allow or fail them at runtime based on exactly which module is being imported, or listen to <code>compile</code> events to manage <em>all</em> runtime compilation. You can do this from Python code (with <code>sys.addaudithook</code>) or C code (with <code>PySys_AddAuditHook</code>).</p>
<p>The <a href="https://github.com/zooba/cpython/blob/pep551/Programs/spython.c" rel="nofollow noreferrer">Programs/spython.c</a> file in the repo is a fairly thorough example of auditing from C, while doing it from Python looks more like this (taken from <a href="https://www.youtube.com/watch?v=K7qUVyeh10U" rel="nofollow noreferrer">my talk</a> about this PEP):</p>
<pre><code>import sys

def prevent_bitly(event, args):
    if event == 'urllib.Request' and '://bit.ly/' in args[0]:
        print(f'WARNING: urlopen({args[0]}) blocked')
        raise RuntimeError('access to bit.ly is not allowed')

sys.addaudithook(prevent_bitly)
</code></pre>
<p>The downside of this approach is you need to build and distribute your own version of Python, rather than relying on a system install. However, in general this is a good idea if your application is dependent on embedding as it means you won't have to force users into a specific system configuration.</p>
</div>
<span class="comment-copy">Just from a glimpse: remove <code>eval</code>, <code>exec</code>, <code>sys</code> and <code>os</code> too.</span>
<span class="comment-copy">Of course I'd like to disable everything except my own module.</span>
<span class="comment-copy">Note that you can control all the <code>import</code> statements by overwriting the <code>builtins.__import__</code> attribute with a custom function.  (This doesn't make Python robust against malicious users, but works in your simple examples.)</span>
<span class="comment-copy">Very detailed answer, thank you, I think this is a very good starting point. One question: Why do I have to check top-level variables? What kind of variables can cause trouble in this case?</span>
<span class="comment-copy">@kovacsv My comment started getting long, so I added to the answer instead.</span>
<span class="comment-copy">Thank you very much, now I understand the complexity of the problem.</span>
