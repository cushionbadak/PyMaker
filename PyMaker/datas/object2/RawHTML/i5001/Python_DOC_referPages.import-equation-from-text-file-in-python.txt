<div class="post-text" itemprop="text">
<p>I have a complex equation which is generated into a <code>.txt</code> file. I would like to import this equation (which is all the text in the <code>.txt</code> file) and make a function from it, which can be subsequently fit.</p>
<p>Does anybody know how I might go about this? The equation to be fitted is at the the very bottom. My feeble attempt to import is below...</p>
<pre><code>myfile1= open("dummyfile.txt", 'r') 
def fcn(J1,J2,T,k,g):
    return myfile1.read()
</code></pre>
<p>"dummyfile.txt" contents:</p>
<p><code>B**2*N*(12.0*g**2*sp.exp(2.0*J2/(T*k)) + 60.0*g**2*sp.exp(6.0*J2/(T*k)) + 168.0*g**2*sp.exp(12.0*J2/(T*k)) + 360.0*g**2*sp.exp(20.0*J2/(T*k)) + 30.0*g**2*sp.exp((2.0*J1 + 4.0*J2)/(T*k)) + 168.0*g**2*sp.exp((4.0*J1 + 8.0*J2)/(T*k)) + 360.0*g**2*sp.exp((6.0*J1 + 14.0*J2)/(T*k)) + 180.0*g**2*sp.exp((8.0*J1 + 12.0*J2)/(T*k)) + 660.0*g**2*sp.exp((8.0*J1 + 22.0*J2)/(T*k)) + 660.0*g**2*sp.exp((12.0*J1 + 18.0*J2)/(T*k)) + 1092.0*g**2*sp.exp((16.0*J1 + 26.0*J2)/(T*k)) + 546.0*g**2*sp.exp((18.0*J1 + 24.0*J2)/(T*k)) + 1680.0*g**2*sp.exp((24.0*J1 + 32.0*J2)/(T*k)) + 1224.0*g**2*sp.exp((32.0*J1 + 40.0*J2)/(T*k)))/(3*T*k*(6*sp.exp(2.0*J2/(T*k)) + 10*sp.exp(6.0*J2/(T*k)) + 14*sp.exp(12.0*J2/(T*k)) + 18*sp.exp(20.0*J2/(T*k)) + 5*sp.exp((2.0*J1 + 4.0*J2)/(T*k)) + 14*sp.exp((4.0*J1 + 8.0*J2)/(T*k)) + 18*sp.exp((6.0*J1 + 14.0*J2)/(T*k)) + 9*sp.exp((8.0*J1 + 12.0*J2)/(T*k)) + 22*sp.exp((8.0*J1 + 22.0*J2)/(T*k)) + 22*sp.exp((12.0*J1 + 18.0*J2)/(T*k)) + 26*sp.exp((16.0*J1 + 26.0*J2)/(T*k)) + 13*sp.exp((18.0*J1 + 24.0*J2)/(T*k)) + 30*sp.exp((24.0*J1 + 32.0*J2)/(T*k)) + 17*sp.exp((32.0*J1 + 40.0*J2)/(T*k)) + 1))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can do that with <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer"><code>exec()</code></a>.  </p>
<h3>Code:</h3>
<pre><code>def build_function(filename):
    with open(filename, 'rU') as f:
        eqn = f.read().strip()
        exec("def fcn(J1, J2, T, k, g):\n return ({})".format(eqn))
        return locals()['fcn']
</code></pre>
<h3>Test Code:</h3>
<pre><code>fcn = build_function('file1')
print(fcn(1, 2, 3, 4, 5))
</code></pre>
<h3>File1:</h3>
<pre><code>J2 + T*k
</code></pre>
<h3>Results:</h3>
<pre><code>14
</code></pre>
</div>
<span class="comment-copy">You should look at <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval</code></a>, then you should reconsider this.</span>
<span class="comment-copy">For the sake of sanity, do <i>not</i> use <code>eval</code>. But SymPy is worth exploring: <a href="http://docs.sympy.org/latest/modules/parsing.html" rel="nofollow noreferrer">docs.sympy.org/latest/modules/parsing.html</a></span>
<span class="comment-copy">If you already can <i>read</i> it as plain text, you don't need to 'read' it inside a program; just copy it into the source! Providing the syntax is correct, that is.</span>
<span class="comment-copy">Hello. It certainly does work to just copy and paste the text, but  the equations are generated above and vary based on what i tell the program about my system. Therefore it is much more appealing to skip this step and have the program do it directly</span>
