<div class="post-text" itemprop="text">
<p>After trying for a long time to get this Python code to work:</p>
<pre><code>#!/usr/bin/python3
import sqlite3

conn = sqlite3.connect("testdb.sqlite")
cur = conn.cursor()

#This doesn't work
cur.execute("DROP TABLE IF EXISTS :table_name", {"table_name": "Table1"})
</code></pre>
<p>I came across <a href="https://stackoverflow.com/a/3247553/">this</a> and other posts that simply say parameter substitution cannot be used with tables. However, I haven't been able to find any explanations or details (nothing is mentioned in the <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute" rel="nofollow noreferrer">relevant documentation</a> either).</p>
<p>So my question is: is there a fundamental reason for this exception? If it's arbitrary, are tables the <strong>only</strong> exception? (This is so that we know what we can and cannot use.)</p>
</div>
<div class="post-text" itemprop="text">
<p>The SQL standards define parameters only for values; from the ISO/IEC 9075:1992 grammar:</p>
<blockquote>
<h3>6.2 &lt;value specification&gt; and &lt;target specification&gt;</h3>
<p>Function<br/>
  Specify one or more values, parameters, or variables.</p>
<p>Format</p>
<pre class="lang-none prettyprint-override"><code>&lt;value specification&gt; ::=
       &lt;literal&gt;
     | &lt;general value specification&gt;

&lt;general value specification&gt; ::=
       &lt;parameter specification&gt;
     | &lt;dynamic parameter specification&gt;
     | &lt;variable specification&gt;
     ...

&lt;parameter specification&gt; ::=
     &lt;parameter name&gt; [ &lt;indicator parameter&gt; ]
</code></pre>
</blockquote>
<p>But table/column/etc. names use different rules, which end up requiring the actual characters of the name:</p>
<blockquote>
<h3>5.4  Names and identifiers</h3>
<p>Function<br/>
  Specify names.</p>
<p>Format</p>
<pre class="lang-none prettyprint-override"><code>&lt;table name&gt; ::=
       &lt;qualified name&gt;
     | &lt;qualified local table name&gt;

&lt;qualified name&gt; ::=
     [ &lt;schema name&gt; &lt;period&gt; ] &lt;qualified identifier&gt;

&lt;qualified identifier&gt; ::= &lt;identifier&gt;

&lt;identifier&gt; ::=
     [ &lt;introducer&gt;&lt;character set specification&gt; ] &lt;actual identifier&gt;

&lt;actual identifier&gt; ::=
       &lt;regular identifier&gt;
     | &lt;delimited identifier&gt;

&lt;regular identifier&gt; ::= &lt;identifier body&gt;

&lt;identifier body&gt; ::=
     &lt;identifier start&gt; [ { &lt;underscore&gt; | &lt;identifier part&gt; }... ]
</code></pre>
</blockquote>
<p>In theory, it might be possible for a database to change its grammar to allow parameters in other places. However, SQL statements can be compiled before the actual parameter values are known, so this would require more changes in the database's API and in how the database manages SQL execution. And it is already possible to execute dynamic SQL without parameters, so no database designer has deemed it worth the effort to make these changes.</p>
</div>
<span class="comment-copy">Great answer! So I was under the impression it was related to the Python library, but in fact, it has to do with the SQL specification.</span>
