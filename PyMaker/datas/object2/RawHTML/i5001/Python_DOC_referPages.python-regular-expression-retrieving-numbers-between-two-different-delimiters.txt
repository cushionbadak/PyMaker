<div class="post-text" itemprop="text">
<p>I have the following string </p>
<pre><code>"h=56,7,1,d=88,9,1,h=58,8,1,d=45,h=100,d=,"
</code></pre>
<p>I would like to use regular expressions to extract the groups:</p>
<ul>
<li>group1 56,7,1</li>
<li>group2 88,9,1</li>
<li>group3 58,8,1</li>
<li>group4 45</li>
<li>group5 100</li>
<li>group6 null</li>
</ul>
<p>My ultimate goal is to have tuples such as (group1, group2), (group3, group4), (group5, group6). I am not sure if this all can be accomplished with regular expressions.</p>
<p>I have the following regular expression with gives me partial results</p>
<pre><code>(?&lt;=h=|d=)(.*?)(?=h=|d=)
</code></pre>
<p>The matches have an extra comma at the end like <code>56,7,1,</code> which I would like to remove and <code>d=,</code> is not returning a null.</p>
</div>
<div class="post-text" itemprop="text">
<p>You likely do not need to use regex.  A <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>.split()</code></a> can likely do what you need like:</p>
<h3>Code:</h3>
<pre><code>def split_it(a_string):
    if not a_string.endswith(','):
        a_string += ','
    return [x.split(',')[:-1] for x in a_string.split('=') if len(x)][1:]
</code></pre>
<h3>Test Code:</h3>
<pre><code>tests = (
    "h=56,7,1,d=88,9,1,h=58,8,1,d=45,h=100,d=,",
    "h=56,7,1,d=88,9,1,d=,h=58,8,1,d=45,h=100",
)

for test in tests:
    print(split_it(test))
</code></pre>
<h3>Results:</h3>
<pre><code>[['56', '7', '1'], ['88', '9', '1'], ['58', '8', '1'], ['45'], ['100'], ['']]
[['56', '7', '1'], ['88', '9', '1'], [''], ['58', '8', '1'], ['45'], ['100']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could <em>match</em> rather than <em>split</em> using the expression</p>
<pre><code>[dh]=([\d,]*),
</code></pre>
<p>and grab the first group, see <a href="https://regex101.com/r/tSpUaG/1" rel="nofollow noreferrer"><strong>a demo on regex101.com</strong></a>.<br/>
<hr/>
That is</p>
<pre><code>[dh]=     # d or h, followed by =
([\d,]*)  # capture d and s 0+ times
,         # require a comma afterwards
</code></pre>
<p><hr/>
In <code>Python</code>:</p>
<pre><code>import re

rx = re.compile(r'[dh]=([\d,]*),')

string = "h=56,7,1,d=88,9,1,h=58,8,1,d=45,h=100,d=,"

numbers = [m.group(1) for m in rx.finditer(string)]
print(numbers)
</code></pre>
<p>Which yields</p>
<pre><code>['56,7,1', '88,9,1', '58,8,1', '45', '100', '']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>([a-z]=)([0-9,]+)(,)?</code> </p>
<p><a href="https://regex101.com/r/x8W4Sz/1/" rel="nofollow noreferrer">Online demo</a></p>
<p>just you need add index to group</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>$</code> in positive lookahead to match against the end of the string:</p>
<pre><code>import re

input_str = "h=56,7,1,d=88,9,1,h=58,8,1,d=45,h=100,d=,"
groups = []
for x in re.findall('(?&lt;=h=|d=)(.*?)(?=d=|h=|$)', input_str):
    m = x.strip(',')
    if m:
        groups.append(m.split(','))
    else:
        groups.append(None)

print(groups)
</code></pre>
<p>Output:</p>
<pre><code>[['56', '7', '1'], ['88', '9', '1'], ['58', '8', '1'], ['45'], ['100'], None]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here, I have assumed that parameters will only have numerical values. If it is so, then you can try this.
(?&lt;=h=|d=)([0-9,]*)</p>
<p>Hope it helps.</p>
</div>
<span class="comment-copy">Why do you insist that these be extracted with regular expressions?  What if you were to split on = and then take the RHS of each of those and split them on commas.  Iterate over enumerate() to skip the first one and work with [:-1] of each to discard the (apparently unwanted) 'd' and 'h' labels.</span>
<span class="comment-copy">I'm guessing it's because they have 11 reputation which suggests unfamiliarity with python and they needs to use it just for this specific task.</span>
<span class="comment-copy">+1 for not using regex, however maybe the letter without a number is not the last entry (i.e. <code>h=56,7,1,d=88,9,1,d=,h=58,8,1,d=45,h=100</code>)</span>
<span class="comment-copy">Probably violates the basic structure, but sure why not?</span>
