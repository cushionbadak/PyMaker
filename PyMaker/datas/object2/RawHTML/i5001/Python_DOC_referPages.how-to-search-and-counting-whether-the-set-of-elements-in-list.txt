<div class="post-text" itemprop="text">
<p>Below is the code that I search and count the <em>pos_xist</em> named list that holds the crawled element of en.wiktionary.org. The list holds the possible Part of Speech tag (with something not pos too) of wiktionary, and I search that list only to count how many of them in the list.
How can I shorten this code below in a more concise way?</p>
<pre><code>count = 0
        for i in range(0,10): #assumed maximum count of possible POS is 10
            try:
                if 'Noun' in pos_xist[i]:
                    count +=1
                elif 'Verb' in pos_xist[i]:
                    count +=1
                elif 'Pronoun' in pos_xist[i]:
                    count +=1
                elif 'Adjective' in pos_xist[i]:
                    count +=1
                elif '' in pos_xist[i]:
                    count +=1
                elif 'Pronoun' in pos_xist[i]:
                    count +=1
                elif 'Adverb' in pos_xist[i]:
                    count +=1
                elif 'Particle' in pos_xist[i]:
                    count +=1
                elif 'Conjunction' in pos_xist[i]:
                    count +=1
                elif 'Interjection' in pos_xist[i]:
                    count +=1
                elif 'Prepoisition' in pos_xist[i]:
                    count +=1
                elif 'Determiner' in pos_xist[i]:
                    count +=1
                elif 'Article' in pos_xist[i]:
                    count +=1
                else:
                    pass
            except:
                pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could create a list of words to search for, and iterate over each item in <code>pos_xist</code> with a a generator expression:</p>
<pre><code>words = ['Noun', 'Verb', 'Pronoun']
count = sum(any(word in item for word in words) for item in pos_xist)
</code></pre>
<p>If you want to limit to the first ten items use slicing <code>pos_xist[:10]</code>.</p>
<p>No exception handling should be necessary.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>postaglist=['Noun','Verb'...]
for item in pos_xist:
    if item in postaglist:
        count=count+1
</code></pre>
<p>form a list of all possible pos tags and search in them.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code> builtin</a> coupled with just going through the list per item rather than waiting until an error is thrown.</p>
<p>It would look something like this</p>
<pre><code>count = 0
words = ["Noun", "Verb", "Pronoun", ...]
for pos in pos_xist:
    if any(word in pos for word in words):
        count += 1
</code></pre>
</div>
<span class="comment-copy">Wouldn't using a set improve complexity? i know the question doesn't ask that - just wondering :)</span>
<span class="comment-copy">@PYA Making <code>words</code> a set? No because the <code>in</code> test is against <code>item</code> and iterating over lists and sets is similar in speed. Making <code>item</code> a set? Not as written, you'd have to build the set too many times</span>
<span class="comment-copy">ah, i think i misunderstood your solution, thanks</span>
<span class="comment-copy"><code>count = sum(any(word in pos for word in words) for pos in pos_xist)</code></span>
