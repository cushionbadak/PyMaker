<div class="post-text" itemprop="text">
<p>Could you please help me to optimize my first python program, I am trying to define a random generator, but somehow when I put a big number it hangs...</p>
<pre><code>def rand(seed, x):
    if x == 1:
        return seed
    elif x == 2:
        return 1237
    elif x == 3:
        return 345892
    else:
        return ((31 * rand(seed, (x - 3))) + (103 * rand(seed, (x - 2))) + (7 * rand(seed, (x - 1))) + 500003) % 1000001
</code></pre>
<p>please try with:</p>
<pre><code>print(rand(5, 5)), the result is : 506860
</code></pre>
<p>but when you use a bigger number its a problem, example:</p>
<pre><code>print(rand(50, 50))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://en.wikipedia.org/wiki/Dynamic_programming" rel="nofollow noreferrer">dynamic programming</a>:</p>
<pre><code>def rand(seed, x):
  table = [seed, 1237, 345892]
  for _ in range(x - 3):
    next_num = table[-3] * 31 + table[-2] * 103 + table[-1] * 7 
    next_num += 500003
    next_num %= 1000001
    table.append(next_num)
  return table[-1]
</code></pre>
<p>The reason this is faster is that it only calculates each value once, while your code calculates things exponentially.</p>
<p>This algorithm is <code>O(n)</code> (for loop of length <code>x - 3</code>), while your algorithm was <code>O(1.83...^n)</code> (<code>1.83^3=1+1.83+1.83^2</code>).</p>
<p>Alternately, as suggested in the comments, you can use <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>functools.lru_cache</code></a>:</p>
<pre><code>import functools

@functools.lru_cache()
def rand(seed, x):
  # insert your code here
</code></pre>
<p>This works in almost the same way as the previous code, but uses a decorator to memoize results instead of storing them in a list.</p>
</div>
<span class="comment-copy">I'd look into dynamic programming. In this case, it would be <code>O(n)</code> instead of <code>O(1.83..^n)</code>.</span>
<span class="comment-copy"><code>@functools.lru_cache</code> could help a little</span>
