<div class="post-text" itemprop="text">
<p>I am having a hard time understanding the code below.. Especially the last line.</p>
<pre><code>string = "abcdcdc"

sub_string = "cdc"

print(sum([1 for i in range(0, len(string) - len(sub_string) + 1) if (string[i:(len(sub_string) + i)] == sub_string)]))
</code></pre>
<p>Output of the code is <code>'2'</code>. </p>
<p>This code write the times of number the substring found in the string given above.</p>
<p>Any explanation would be appreciated .</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>[1 for i in range(0, len(string) - len(sub_string) + 1) if (string[i:(len(sub_string) + i)] == sub_string)]
</code></pre>
<p>means <strong>loop</strong> <code>i</code> in range from <code>0</code> upto <code>len(string) - len(sub_string) + 1</code> (not including) and <strong>if</strong> a substring of <code>string</code> at index <code>i</code> and with length of <code>sub_string</code> (i.e. upto index <code>(len(sub_string) + i)</code>) is equal to <code>sub_string</code> <strong>then take</strong> <code>1</code> and <strong>collect them</strong> as list, i.e. the result is <code>[1, 1]</code> because <code>substring</code> is a substring of <code>string</code> two times.</p>
<p>See <a href="https://www.programiz.com/python-programming/list-comprehension" rel="nofollow noreferrer">Python List Comprehension</a> for more details.</p>
<hr/>
<p><code>sum([1 for i in range(0, len(string) - len(sub_string) + 1) if (string[i:(len(sub_string) + i)] == sub_string)])</code></p>
<p>It just sums the list described above, <code>sum([1, 1])</code> equals to <code>2</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you view the list of values generated by the for loop you will find it creates the list below:</p>
<pre><code>print([string[i:(len(sub_string) + i)] for i in range(0, len(string) - len(sub_string) + 1)])
['abc', 'bcd', 'cdc', 'dcd', 'cdc']
</code></pre>
<p>The list contains the substring you are searching for twice which is the result you obtain.</p>
</div>
<div class="post-text" itemprop="text">
<p>The code loops over the string indices from the start of "string" to the end minus the number of elements in subsring. </p>
<p>The [] crates a list and 1 is wrtitten in there if the next 3 elements of the string are the same as sub_string. </p>
<p>sum() returns the sum of the list. Since you included a 1 everytime you found sub_string, this counts the number of occurances of sub_string in string</p>
</div>
<div class="post-text" itemprop="text">
<p>its python so you have to read it backwards, 'if string contains substring, try to find number of substring occurrences.'  I'd write it this way:</p>
<pre><code> 'abcdcdc'.count('cdc')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is a so called <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer"><strong>list comprehension</strong></a>, which has this syntax, that is why it may look like an <code>if</code> without visible outcome placed in a <code>for</code> loop.</p>
<p>The steps are not complicated otherwise:</p>
<ul>
<li>we need all 3-character subsequences from the big string, the <code>range(0, len(string) - len(sub_string) + 1)</code> part prepares the starting indices for those, 7-3+1=5, so the range will run from 0...4. You can check it in the interactive shell, it will say <code>range(0,5)</code></li>
<li>then the <code>[]</code> thing creates a list, you can check that too: <code>[1 for i in range(0,5)]</code> will create <code>[1,1,1,1,1]</code></li>
<li>but you want to compare things, with the <code>if</code> part. First you could check the substrings, instead of <code>1</code>, write the substring thing: <code>[string[i:(len(sub_string) + i)] for i in range(0,5)]</code>, as Karl Graham suggests and resulting in <code>['abc', 'bcd', 'cdc', 'dcd', 'cdc']</code>, then you could use the full comparison, <code>[string[i:(len(sub_string) + i)]==sub_string for i in range(0,5)]</code>, which produces <code>[False, False, True, False, True]</code></li>
<li>in fact you can <code>sum</code> this already, <code>sum([string[i:(len(sub_string) + i)]==sub_string for i in range(0,5)])</code> will output 2, because <code>True</code> is counted as 1 and <code>False</code> as 0. Just here whoever created this code, decided to output actual numbers and used the optional <code>if</code> clause for the list comprehension, creating a list of 1-s, but only for the two matching positions: <code>[1 for i in range(0, len(string) - len(sub_string) + 1) if (string[i:(len(sub_string) + i)] == sub_string)]</code> displays <code>[1,1]</code></li>
<li>and <code>sum</code> adds those 1-s together, resulting in 2.</li>
</ul>
<p>Summary code for running as Python snippet or in a notebook (like <a href="https://try.jupyter.org/" rel="nofollow noreferrer">here</a>):</p>
<pre><code>string = "abcdcdc"
sub_string = "cdc"
print(len(string))
print(len(sub_string))
print(range(0,len(string)-len(sub_string)+1))
print([1 for i in range(0,5)])
print([string[i:(len(sub_string) + i)] for i in range(0,5)])
print([string[i:(len(sub_string) + i)]==sub_string for i in range(0,5)])
print(sum([string[i:(len(sub_string) + i)]==sub_string for i in range(0,5)]))
print([1 for i in range(0, len(string) - len(sub_string) + 1) if (string[i:(len(sub_string) + i)] == sub_string)])
print(sum([1 for i in range(0, len(string) - len(sub_string) + 1) if (string[i:(len(sub_string) + i)] == sub_string)]))
</code></pre>
</div>
<span class="comment-copy">because <code>'cdc'</code> appears in <code>'abcdcdc'</code> 2 times?</span>
<span class="comment-copy">Can you explain please. Because thats what i am searching for.</span>
<span class="comment-copy">@Farhan.K, please stop the condescension. The question is very clear: the user wants an explanation of the code, not the result. It's a good question +1.</span>
<span class="comment-copy">@jpp it wasn't before the edit</span>
<span class="comment-copy">Thank you for the answer. It really helped me understanding the code.</span>
