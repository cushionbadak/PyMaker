<div class="post-text" itemprop="text">
<p>I have a generator function <code>generate</code> which yields 5 random numbers one at a time. I need to be able to generate the numbers in two ways: </p>
<ol>
<li>Single generation, which means a single output of <code>generate</code> function</li>
<li>Multiple generation, which means multiple execution of <code>generate</code> and yielding all the results together as a single (merged) flow</li>
</ol>
<p>For that I wrote another function <code>get_resource</code>, which calls <code>generate</code> either once or using <code>itertools.chain</code> to run the generators one after another, but transparently to the caller.</p>
<p>My goal is to use <code>get_resource</code> function and produce the results in the same format (one list of numbers), regardless of single/multiple generations.</p>
<pre><code>import itertools
import random


def get_resource(values=None):
    def resource_generator():
        if values:
            # run a generator for every value
            return itertools.chain(generate(value) for value in values)
        else:
            return generate('meh')

    return resource_generator()


def generate(value):
    for _ in range(5):
        yield random.randint(1, 101)


if __name__ == '__main__':
    # list() is used for convenience only, 
    # I still need the values one by one
    print list(get_resource())
    print list(get_resource([1, 2, 3]))
</code></pre>
<p>It prints:</p>
<pre><code>[63, 22, 87, 2, 54]
[&lt;generator object generate at 0x1089f7640&gt;, &lt;generator object generate at 0x1089f7690&gt;, &lt;generator object generate at 0x1089f76e0&gt;]
</code></pre>
<p>While I need it to print:</p>
<pre><code>[63, 22, 87, 2, 54]
[63, 22, 87, 2, 54, 1, 58, 79, 89, 77, 94, 99, 30, 30, 4]
</code></pre>
<p><em>I use python2.7</em></p>
</div>
<div class="post-text" itemprop="text">
<p>you should use <a href="https://docs.python.org/2.7/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a></p>
<pre><code>return itertools.chain.from_iterable(generate(value) for value in values)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can specify generator delegation using <code>yield from</code> starting with python-3.3+.</p>
<pre><code>def get_resource(values=None):
    def resource_generator():
        if values:
            for value in values:
                yield from generate(value)
        else:
            yield from generate(None)

    return resource_generator()
</code></pre>
<p>Now,</p>
<pre><code>&gt;&gt;&gt; list(get_resource([1, 2, 3]))
[46, 99, 97, 1, 42, 79, 69, 9, 45, 25, 77, 56, 54, 7, 41]
</code></pre>
</div>
<span class="comment-copy">Why do you define <code>resource_generator()</code> instead of just putting its code directly inside <code>get_resource()</code> ?</span>
<span class="comment-copy">@khelwood, it is a simplified and minimal version of my code, which has some more things going on around. In this example it is redundant, while I still need it in my code</span>
<span class="comment-copy">For 2.7, you will need a nested loop with yield, I've edited my answer accordingly. Although I'd recommend just upgrading, if you can.</span>
<span class="comment-copy">I tried something similar to your python2 code, but this syntax is not supported before python3.3: <code>SyntaxError: 'return' with argument inside generator</code></span>
<span class="comment-copy">@YuryFedorov Hmm, my bad, I didn't test it on python3.7, and assumed it would work as is. I've removed that part of my answer. :)</span>
<span class="comment-copy">shouldn't the <code>return generate(None)</code> be <code>yield from generate(None)</code>? a return in a generator triggers a <code>StopIteration</code></span>
<span class="comment-copy">@MaartenFabré this is okay with 3.6. I'm not sure when it starts to break. I would need to test some more.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/simple_stmts.html#the-return-statement" rel="nofollow noreferrer">docs.python.org/3/reference/…</a> <code>In a generator function, the return statement indicates that the generator is done and will cause StopIteration to be raised. The returned value (if any) is used as an argument to construct StopIteration and becomes the StopIteration.value attribute.</code></span>
