<div class="post-text" itemprop="text">
<p>I have been trying to format live JSON data coming from an API to be read in Django views. However, data coming is little complicated. </p>
<p>I have incoming JSON data in format </p>
<pre><code>    { Time1:
         {'A':'Value',
          'B':'Value',
          }
     Time2:
         {'A':'Value',
          'B':'Value',
          }
there are multiple time records....
}
</code></pre>
<p>I need to convert it into </p>
<pre><code>{
  'Time': Time1
  'A'   : 'Value'
  'B'   : 'Value'
},
{
  'Time': Time2
  'A'   : 'Value'
  'B'   : 'Value'
},
{
  'Time': Time3
  'A'   : 'Value'
  'B'   : 'Value'
},
{
  'Time': Time4
  'A'   : 'Value'
  'B'   : 'Value'
},...and so on
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> structure, (the code below has been tested using <em>Python3.6</em>):</p>
<pre><code># Given your JSON has successfully been parsed into a dictionary
&gt; input={'Time1': {'A':'Value1A', 'B':'Value1B'}, 'Time2': {'A','Value2A', 'B', 'Value2B'}}

# Iterate over the dictionary and build a new item out of each key/value couple
&gt; transformed=[(v.update({'Time': k}) or v) for (k, v) in input.items()]

&gt; print(transformed)
[
  {
    'A'   : 'Value1A'
    'B'   : 'Value1B'
    'Time': 'Time1'
  },{
    'A'   : 'Value2A'
    'B'   : 'Value2B'
    'Time': 'Time2'
  }, …
]
</code></pre>
<p>What happens with <code>(v.update({'Time': k}) or v)</code> ?<br/>
Given <code>v</code> is a dictionary, <code>v.update(...)</code> will add a new entry to the instance (in other words, it mutates the instance). This method doesn't return the instance though but <code>None</code>, fortunately wrapping the call between parenthesis gives the opportunity to build an expression that will ultimately return the <code>v</code> instance. <code>v</code> being a dict object (given it is not empty) it will be evaluated truthfully in a Boolean context, hence the <code>(… or v)</code> construct.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming your data is in a proper <code>dict</code> format incoming. You can do this</p>
<pre><code>in_json = { 2014: {'A':'Value', 'B':'Value'}, 2015: {'A':'Value', 'B':'Value'}}
newl = list()

for k in in_json:
    x = dict({'Time':k})
    x.update(in_json[2014])
    newl.append(x)
</code></pre>
<p>Basically just adding the <code>key</code> from the original dict as a value to a dict and appending it to the list</p>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in comments, indicated output format is a list. 
In this case you'll just add the new entry for "Time" for each nested dict:</p>
<pre><code>final_list = []
 for key, subdict in in_dict.iteritems():
     subdict["Time"] = key 
     final_list.append(subdict)
</code></pre>
<p>Or if you prefer inline:</p>
<pre><code>final_list = [dict([("Time", key)] + sub.items()) for key, sub in in_dict.iteritems()]
</code></pre>
</div>
<span class="comment-copy">what have you tried so far? this seems similar to <a href="https://stackoverflow.com/questions/6027558/flatten-nested-python-dictionaries-compressing-keys">this type of question</a>. Although not the same, it seems it may be very similar</span>
<span class="comment-copy">It's not json. There's no list <code>[...]</code> that wraps all the dictionaries, no commas between elements etc.</span>
<span class="comment-copy">Python 2.7 or Python3+ ?</span>
<span class="comment-copy">@MattR This is certainly not i desire. currently, i am trying to initialize an new dict with just time values and then later create a another new dict {dict1+existing dict }</span>
<span class="comment-copy">@Stphane python 3+</span>
<span class="comment-copy">This was really helpful.</span>
<span class="comment-copy">Useful answer on merging dictonaries in case you need it: <a href="https://stackoverflow.com/questions/38987/how-to-merge-two-dictionaries-in-a-single-expression#answer-26853961">merge-two-dictionaries-in-a-single-expression</a></span>
<span class="comment-copy">@shivamsinghal please consider set your question as solved by ticking the answer that helped you the most.</span>
