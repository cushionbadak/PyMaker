<div class="post-text" itemprop="text">
<p>I’m trying to speed up directory bruteforcing by using multithreading.</p>
<pre><code>def enumerate_http(hostname, wordlist='/root/common.txt'):
    directory_list = []

    with open(wordlist, 'r') as wordlist_file:
        [directory_list.append(directory) for directory in wordlist_file.read lines()]

    with Pool(thread_count) as p:
        results = p.map(check_directory, directory_list)
</code></pre>
<p>The problem is that the <code>check_directory(hostname, directory)</code> function needs to take the directory_list’s current element as a parameter in addition to another parameter. How can I explicitly pass the first parameter, and implicitly pass the current element to the function’s parameter?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a partial function specific to your host name:</p>
<pre><code>from functools import partial

check_directory_host = partial(check_directory, hostname=hostname)

with Pool(thread_count) as p:
    results = p.map(check_directory_host, directory_list)
</code></pre>
<p><a href="http://%20https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer">partial</a> creates a new function with the argument <code>hostname</code> "fixed":</p>
<blockquote>
<p><code>partial(func, *args, **keywords)</code> - new function with partial application
  of the given arguments and keywords.</p>
</blockquote>
<p>Here an example:</p>
<pre><code>def add(a, b):
    return a + b

add_10 = partial(add, b=10)
</code></pre>
<p>Now the second argument <code>b</code> is fixed and you can (and must) call the function only with a value for <code>a</code>:</p>
<pre><code>&gt;&gt;&gt; add_10(5)
15
</code></pre>
</div>
<span class="comment-copy">why are you using a list comprehension as a side effect product? Please don't do that...</span>
<span class="comment-copy">@MooingRawr Would you mind elaborating on as to why a list comprehension is bad in this context to add elements to a list?</span>
<span class="comment-copy">It is frowned upon to use a list comprehension or generator expression just for the side effects - it what you do when you are not assigning the expression for later use or iterating over it: you are interested only in the side effects and not in the result for the l.c. or g.e. Make it a plain <code>for</code> instead</span>
