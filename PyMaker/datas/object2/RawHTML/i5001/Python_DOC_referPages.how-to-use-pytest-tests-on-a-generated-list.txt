<div class="post-text" itemprop="text">
<p>I have code that takes a path as a command line argument, opens a text file at that location and reads it into a variable.</p>
<pre><code>def main():
    arg_parser.add_argument('-p','--path', action='store')
    args = arg_parser.parse_args()
    path = args.path
    list_from_file = fill_list(path)

def fill_list(path):
    fn = os.path.join(os.path.dirname(__file__), path)
    with open(fn) as f:
        pass_list = f.readlines()
    return pass_list
</code></pre>
<p>How do I get my pytests to look at list_from_file ?</p>
<p>for example</p>
<pre><code>def test_something():
    assert any("something" in d for d in list_from_file)
</code></pre>
<p>I've tried various fixture stuff without success; I find the pytest documentation unclear and confusing for something that should be straight-forward.  A best practice approach is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>I find the pytest docs on fixtures pretty clear. Create a fixture for the path, create a fixture for the list, done.</p>
<pre><code>@fixture
def file_path(config):
    return config.getoption("--path")
@fixture
def my_list(file_path):
    # read from the file into a list
    # return that list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a good opportunity to become familiar with the pytest built-in fixture called <a href="https://docs.pytest.org/en/latest/tmpdir.html" rel="nofollow noreferrer"><code>tmpdir</code></a>.</p>
<p>Here is an example for your function, where I have two files, <code>module.py</code> and <code>test_module.py</code>:</p>
<pre><code># module.py
import os


def fill_list(path):
    fn = os.path.join(os.path.dirname(__file__), path)
    with open(fn) as f:
        pass_list = f.readlines()
    return pass_list
</code></pre>
<p>and</p>
<pre><code># test_module.py
from module import fill_list


def test_fill_list(tmpdir):
    f = tmpdir.mkdir("testdata").join("testfile.txt")
    f.write("line1\nline2\nline3")
    assert fill_list(f) == ["line1\n", "line2\n", "line3"]
</code></pre>
<p>When I run <code>pytest test_module.py</code> from the directory with the source code, I get:</p>
<pre><code>(py36-keras) ely@eschaton:~/pytesttest$ pytest test_module.py 
============================================================= test session starts ==============================================================
platform linux -- Python 3.6.2, pytest-3.2.1, py-1.4.34, pluggy-0.4.0
rootdir: /home/ely/pytesttest, inifile:
collected 1 item                                                                                                                                

test_module.py .

=========================================================== 1 passed in 0.01 seconds ===========================================================
</code></pre>
<p>Here is some explanation. First off <code>tmpdir</code> is an automatically-provided special fixture of pytest, so you can include it as an argument in the test function as I did, without importing it or otherwise having any definition for it. When pytest executes the test function, it will see that a <code>tmpdir</code> argument is named, and it will automatically pass in its own <code>tmpdir</code> fixture object.</p>
<p>Next, <code>tmpdir</code> can be used directly to create a new directory and a new file. In this case, I just put some random names in there for a directory and a file and then write some toy data to it. It doesn't matter too much what these are, as long as we set up the test to look for the proper successfully computed result.</p>
<p>Note that I pass the value <code>f</code> into the function <code>fill_list</code>. That function will treat it like a file path when running the code from the function <code>fill_list</code>, because the <code>tmpdir</code> objects are implemented in such a way as to let them be treated like paths.</p>
<p>One special behavior I am relying on is noted at the bottom of the <a href="https://docs.python.org/3/library/os.path.html#os.path.join" rel="nofollow noreferrer">documentation for <code>os.path.join</code></a>:</p>
<blockquote>
<p>If a component is an absolute path, all previous components are thrown away and joining continues from the absolute path component.</p>
</blockquote>
<p>So, even though <code>fill_list</code> tries to perform the operation <code>os.path.join(os.path.dirname(__file__), path)</code>, when <code>path</code> is coming from <code>tmpdir</code>, it will be an absolute path, so the first part will be ignored (which is what we would want for a test anyway).</p>
<p>(Note, this also suggests your design of <code>fill_list</code> can be improved if you don't hard-code the assumption that <code>os.path.dirname(__file__)</code> must be prepended to the file name. Instead, just let <code>fill_list</code> work with any path the caller provides, and when you set up paths to call it, then <em>you</em> can be sure to prepend <code>os.path.dirname(__file__)</code> only when you need to. It's not necessary, but usually a good idea.)</p>
<p>When pytest finishes, it knows to automatically destroy the files and directory that were created by <code>tmpdir</code>, so you don't have to worry about that.</p>
</div>
<span class="comment-copy">what exactly do you want to test? If it is the <code>fill_list()</code> function, then <a href="https://stackoverflow.com/a/48891696/2650249">the answer given</a> is the correct one (mocking the third party app behaviour). If it is the <code>main()</code> function, <code>fill_list</code> should be mocked and return some predefined values anyway.</span>
<span class="comment-copy">A third party dumps a file in a directory (which is newly created) and passes the path.  The tests know what to look for in that file.  So I can't create a test version of the file.  With those constraints I don't see how the tmpdir feature can work for me; though your answer is quite useful in general!</span>
<span class="comment-copy">Your tests should not check the contents of that third-party file. The tests should create (temporary as with <code>tmpdir</code> or permanent with some permanent fixture file) their own separate data that is unique solely to testing. This is a very important part of testing.</span>
