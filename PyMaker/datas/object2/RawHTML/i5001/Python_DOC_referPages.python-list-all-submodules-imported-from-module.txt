<div class="post-text" itemprop="text">
<p>My code starts with the following:</p>
<pre><code>from module import *
</code></pre>
<p>How can I get a list of all <code>submodules</code> imported from this module.</p>
<p>For example module has:</p>
<pre><code>module.submodule
module.submodule2
module.anothersubmodule
</code></pre>
<p>I want to get after <code>from module import *</code>:</p>
<pre><code>[submodule, submodule2, anothersubmodule]
</code></pre>
<p>(not strings with name of <code>submodules</code>, but a list with all <code>submodules</code> themselves)</p>
<p>UPD: I understood that I asked about XY problem.
So here's what i'm trying to achieve:
I have a folder called <code>modules</code> that will have a bunch of scripts following the same pattern. They will all have a function like <code>main()</code>. In my main script i want to import them all and iterate like that:</p>
<pre><code>for i in modules:
    i.main(*some_args)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>pkgutil</code> module. For example:</p>
<pre><code>import pkgutil
import module

modualList = []
for importer, modname, ispkg in pkgutil.iter_modules(module.__path__):
    modualList.append(modname)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer"><code>importlib</code></a>?</p>
<pre><code>import importlib
import os

directory = './module'

for filename in os.listdir(directory):
    filepath = os.path.join(directory, filename)
    if not os.path.isfile(filepath):
        continue

    modulename = os.path.splitext(filename)[0]

    args = [filename, filepath]

    module = importlib.import_module('module.{}'.format(modulename))
    module.main(*args)
</code></pre>
<p>With 3 differents Python files in <code>./modules</code>, all like:</p>
<pre><code>def main(*args):
    print('module one: {}'.format(', '.join(args)))
</code></pre>
<p>It gives:</p>
<pre><code>module three: three.py, ./module/three.py
module two: two.py, ./module/two.py
module one: one.py, ./module/one.py
</code></pre>
</div>
<span class="comment-copy">All information about imported modules can be found in <code>sys.modules</code>. Also don't use wildcard imports, they can be hard to debug and can cause one or the other surprise.</span>
<span class="comment-copy">That somehow sounds like an <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY problem</a>. What's the higher level goal you are trying to achieve?</span>
<span class="comment-copy">I <code>import *</code> because i want my script to have pluggable modules, so that i can just edit <code>__all__</code> in <code>__init__.py</code> and add submodules to modules folder. Then my script will handle all modules using that list.</span>
