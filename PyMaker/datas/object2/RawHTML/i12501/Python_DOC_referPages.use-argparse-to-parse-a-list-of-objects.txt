<div class="post-text" itemprop="text">
<p>I have a program with a function that takes a class initializer and list of objects. Each object consists of 3 variables id, value, and tag.</p>
<pre><code>class Package():

    def __init__(self, id, value, name):
        if (value &lt;= 0):
            raise ValueError("Amount must be greater than 0")
        self.id = id
        self.value = value
        self.tag = tag


 class Purchase():

    def submit(some_list):
        //Do stuff

def main():
    //Help here!
    parser = argparse.ArgumentParser()
    parser.add_argument("id", help="ID")
    parser.add_argument("value", help="Value")
    parser.add_argument("tag", help="Tag")
    args = parser.parse_args()
    some_list = [args.id, args.value, args.tag]
    submit(some_list)
</code></pre>
<p>I'm trying to implement argparse in main() so I can run the program by doing something like: <code>python foo.py "int0 [(int1, float1, int2), (int3, float2, int4) ....]"</code>.  The number of objects in the list is variable and depends on the user input.  </p>
<pre><code>initializer = num0

//First package object
package.id = num1
package.value = num2
package.tag = num3

//Second package object
package.id = num4
package.value = num5
package.tag = num6  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can make a <em>custom <a href="https://docs.python.org/2/library/argparse.html#type" rel="nofollow">argument type</a></em> and use <a href="https://docs.python.org/2/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval()</code></a> to parse the value.</p>
<p>Working sample:</p>
<pre><code>import argparse
from ast import literal_eval


class Package():
    def __init__(self, id, value, tag):
        if (value &lt;= 0):
            raise ValueError("Amount must be greater than 0")
        self.id = id
        self.value = value
        self.tag = tag


def packages(s):
    try:
        data = literal_eval(s)
    except:  # TODO: avoid bare except and handle more specific errors
        raise argparse.ArgumentTypeError("Invalid 'packages' format.")

    return [Package(*item) for item in data]


parser = argparse.ArgumentParser()
parser.add_argument('--packages', dest="packages", type=packages, nargs=1)
args = parser.parse_args()
print(args.packages)
</code></pre>
<p>Now if you would run the script, you would get a list of <code>Package</code> class instances printed:</p>
<pre><code>$ python test.py --packages="[(1, 1.02, 3), (40, 2.32, 11)]"
[[&lt;__main__.Package instance at 0x10a20d368&gt;, &lt;__main__.Package instance at 0x10a20d4d0&gt;]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would prefer to be a bit more explicit and use a custom action:</p>
<pre><code>import argparse

class PackageAction(argparse.Action):
    def __init__(self, *args, **kwargs):
        super(PackageAction, self).__init__(*args, **kwargs)
        self.nargs = 3

    def __call__(self, parser, namespace, values, option_string):
        lst = getattr(namespace, self.dest, []) or []
        a, b, c = values
        lst.append(Package(int(a), float(b), int(c)))
        setattr(namespace, self.dest, lst)

class Package(object):
    def __init__(self, foo, bar, baz):
        self.foo = foo
        self.bar = bar
        self.baz = baz

    def __repr__(self):
        return 'Package(%r, %r, %r)' % (self.foo, self.bar, self.baz)

parser = argparse.ArgumentParser()
parser.add_argument('--package', action=PackageAction)

print(parser.parse_args())
</code></pre>
<p>The usage here would look something like:</p>
<pre><code>$ python packager.py --package 1 2 3 --package 4 5 6
Namespace(package=[Package(1, 2.0, 3), Package(4, 5.0, 6)])
</code></pre>
<p>One benefit is that you get slightly better default error handling ... e.g.:</p>
<pre><code>$ python ~/sandbox/test.py --package 1 2 3 --package 4 5
usage: test.py [-h] [--package PACKAGE PACKAGE PACKAGE]
test.py: error: argument --package: expected 3 argument(s)
</code></pre>
<p>Of course, you can modify to suit your purposes -- specifically it would probably be good to provide a little extra <a href="https://docs.python.org/3/library/argparse.html#exiting-methods" rel="nofollow">error handling</a> to <code>__call__</code>.  e.g. you could do something like</p>
<pre><code>parser.error('--package requires an int float and int')
</code></pre>
<p>if the user passed bad strings.  You could also provide better variable names :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's my nomination; it uses a plain parser, and puts the customization in the <code>Package</code> class.</p>
<p>It would be called with something like:</p>
<pre><code>python prog.py -p 0 1 2 --package 2 3 4
</code></pre>
<p>where <code>-p</code> or <code>--package</code> is followed by 3 values, and may be repeated (<code>action</code> is 'append').  <code>nargs=3</code> ensures that each <code>-p</code> is followed by 3 values (otherwise the parser raises an error).  Converting those values to numbers (and raising errors) is the responsibility of the <code>Package</code> class.  The class already has a check on non-negative <code>value</code>.</p>
<pre><code>import argparse
class Package():
    def __init__(self, id, value, tag):
        # 3 inputs - numbers, but equivalent strings are accepted
        # may add more value validation
        self.id = int(id)
        self.value = float(value)
        if self.value &lt;= 0:
            raise ValueError("Amount must be greater than 0")
        self.tag = int(tag)
    def __repr__(self):
        return 'Package (%s, %s, %s)'%(self.id, self.value, self.tag)

def main(argv):
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--package', nargs=3, action='append', default=[],
        metavar=('ID','Value','tag'), help='package parameters; may repeat')
    args = parser.parse_args(argv)
    print args
    packages = [Package(*v) for v in args.package]
    return packages
    # alt
    # args.package = packages; return args

if __name__ == '__main__':
    import sys
    if sys.argv[1:]:
        print main(sys.argv[1:])
    else:
        # test cases
        print main([]) # nothing
        print main('-p 1 2 3'.split())
        print main('-p 0 1 2 --pack 2 3 4'.split())
        print main(['-h']) # help
</code></pre>
<p>A sample run of the test cases is:</p>
<pre><code>2030:~/mypy$ python stack34823075.py 
Namespace(package=[])
[]
Namespace(package=[['1', '2', '3']])
[Package (1, 2.0, 3)]
Namespace(package=[['0', '1', '2'], ['2', '3', '4']])
[Package (0, 1.0, 2), Package (2, 3.0, 4)]

usage: stack34823075.py [-h] [-p ID Value tag]

optional arguments:
  -h, --help            show this help message and exit
  -p ID Value tag, --package ID Value tag
                        package parameters; may repeat
</code></pre>
<p>Note how the <code>metavar</code> affects the help display.  The <code>Package</code> <code>__repr__</code> method produces a nice list display.</p>
<hr/>
<p>Example of a run with non-numeric <code>tag</code>:</p>
<pre><code>2038:~/mypy$ python stack34823075.py -p 1 2.3 tag
Namespace(package=[['1', '2.3', 'tag']])
Traceback (most recent call last):
  File "stack34823075.py", line 31, in &lt;module&gt;
    print main(sys.argv[1:])
  File "stack34823075.py", line 20, in main
    packages = [Package(*v) for v in args.package if v is not None]
  File "stack34823075.py", line 10, in __init__
    self.tag = int(tag)
ValueError: invalid literal for int() with base 10: 'tag'
</code></pre>
<p>A special <code>type</code> function does not work well here.  It would be applied to each of the 3 strings, individually, not as a group.  </p>
<p>A custom <code>Action</code> class could handle the 3 values, converting each to <code>int</code>,<code>float</code>,<code>int</code>.  But even there I'd prefer to pass them to <code>Package</code>, e.g. </p>
<pre><code>def __call__(self, namespace, dest, values):
    # store_action style
    new_value = Package(*values)
    setattr(namespace, dest, new_value) # store action
</code></pre>
<p>But since <code>packages = [Package(*v) for v in args.package]</code> is so simple, I don't see much point in customizing the parser or its actions.</p>
</div>
<span class="comment-copy">Cool!  I've never used <code>ast.literal_eval()</code>.  When <code>return [Package(*item) for item in data]</code> is called, will all the arguments be stored in the right package variable (package.id, package.value, package.tag)?</span>
<span class="comment-copy">@Brosef yup, these are <code>Package</code> instances in the list with all of the 3 fields initialized. Hope this is close to what you were looking for.</span>
<span class="comment-copy">So do i leave my Package class initializer as it is?</span>
<span class="comment-copy">@Brosef for this particular sample to work, yes.</span>
<span class="comment-copy">should type = Packages? I get an unresolved reference warning when I use lower case packages</span>
<span class="comment-copy">Honestly, I like your answer better than mine :)</span>
