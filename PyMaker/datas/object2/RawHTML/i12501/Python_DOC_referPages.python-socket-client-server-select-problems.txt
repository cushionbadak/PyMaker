<div class="post-text" itemprop="text">
<p>We are attempting to make our python messenger system more efficient. Currently both the client and the server use ridiculous amounts of the CPU while running and communicating. We suspect this is due to the receiving/connecting loop trying constantly to receive a message or user/password.
the message receiving loop follows:</p>
<pre><code>def recvmsg():
    global decrypted_text
    while not shutdown:
            response = s.recv(4096).decode('utf-8')
            response = decrypt(response)

            if response.startswith("dict_keys(['"):
                    formatted = response.replace("dict_keys(['", "")
                    formatted = formatted.replace("'])", "")
                    formatted = formatted.replace("'", "")

                    output_field.configure(state = "normal")
                    output_field.insert(END, "Connected users: " + formatted + "\n")
                    output_field.see(END)
                    output_field.configure(state = "disabled")                         
            else:
                    output_field.configure(state = "normal")
                    output_field.insert(END, response + "\n")
                    output_field.see(END)
                    output_field.configure(state = "disabled")
</code></pre>
<p>we are attempting to utilize the select module to have the loops wait for incoming traffic instead of looping and failing into infinity.
we have looked here: <a href="http://ilab.cs.byu.edu/python/select/echoserver.html" rel="nofollow">http://ilab.cs.byu.edu/python/select/echoserver.html</a> for help but we didn't get very far because we got this error: <em>[WinError 10022] An invalid argument was supplied</em>. we also looked in the python documentation here: <a href="https://docs.python.org/3/library/select.html?highlight=select#module-select" rel="nofollow">https://docs.python.org/3/library/select.html?highlight=select#module-select</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You may find <a href="https://stackoverflow.com/a/30225485/216356">this answer</a> to be helpful in implementing your server. If you wish for a more complete server implementation, that can be provided as well. In developing the complex version of the server, a variety of features were developed including friend lists, private messaging, and individual communication channels.</p>
<hr/>
<p><strong>Simple_Server.py</strong></p>
<pre><code>#! /usr/bin/env python3
import socket, select

def main():
    a = [socket.socket(socket.AF_INET, socket.SOCK_STREAM)]     # socket array
    a[0].bind(('', 8989))
    a[0].listen(5)
    while True:
        for b in select.select(a, [], [])[0]:                   # ready socket
            if b is a[0]:
                a.append(b.accept()[0])
            else:
                try:
                    c = b.recv(1 &lt;&lt; 12)                         # sent message
                except socket.error:
                    b.shutdown(socket.SHUT_RDWR)
                    b.close()
                    a.remove(b)
                else:
                    for d in (d for d in a[1:] if d is not b):  # message sink
                        d.sendall(c)

if __name__ == '__main__':
    main()
</code></pre>
<hr/>
<p><strong>MultichatClient.py</strong></p>
<pre><code>#! /usr/bin/env python3
from safetkinter import *
from tkinter.constants import *
import socket
import sys

class MultichatClient(Frame):

    after_handle = None

    def __init__(self, master, remote_host):
        super().__init__(master)
        self.message_area = ScrolledText(self, width=81, height=21,
                                         wrap=WORD, state=DISABLED)
        self.message_area.grid(sticky=NSEW, columnspan=2)
        self.send_area = Entry(self)
        self.send_area.bind('&lt;Return&gt;', self.keyPressed)
        self.send_area.grid(sticky=EW)
        b = Button(self, text='Send', command=self.mouseClicked)
        b.grid(row=1, column=1)
        self.send_area.focus_set()
        try:
            self.remote = socket.create_connection((remote_host, 8989))
        except socket.gaierror:
            print('Could not find host {}.'.format(remote_host))
        except socket.error:
            print('Could not connect to host {}.'.format(remote_host))
        else:
            self.remote.setblocking(False)
            self.after_handle = self.after_idle(self.dataready)
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)

    @classmethod
    def main(cls, args):
        root = Tk()
        root.title('MultichatClient version 1.0')
        m = cls(root, args[0])
        m.grid(sticky=NSEW)
        root.grid_rowconfigure(0, weight=1)
        root.grid_columnconfigure(0, weight=1)
        root.mainloop()
        return 1

    def dataready(self):
        try:
            s = self.remote.recv(1 &lt;&lt; 12).decode()
        except socket.error:
            pass
        else:
            self.message_area['state'] = NORMAL
            self.message_area.insert(END, s)
            self.message_area['state'] = DISABLED
            self.message_area.see(END)
        self.after_handle = self.after(100, self.dataready)

    def destroy(self):
        if self.after_handle:
            self.after_cancel(self.after_handle)
        super().destroy()

    def mouseClicked(self, e=None):
        self.remote.sendall(self.send_area.get().encode() + b'\r\n')
        self.send_area.delete(0, END)

    keyPressed = mouseClicked

if __name__ == '__main__':
    sys.exit(MultichatClient.main(sys.argv[1:]))
</code></pre>
</div>
