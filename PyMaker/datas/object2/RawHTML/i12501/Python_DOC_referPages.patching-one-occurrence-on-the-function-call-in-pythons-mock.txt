<div class="post-text" itemprop="text">
<p>Suppose I patch and mock certain function foo() which implements reading multiple files. So we have multiple <code>open()</code> calls:</p>
<pre><code>def foo():
    a=open("stuff.txt")
    b=open("another_thing.txt")
    c=open("last_one.txt")
</code></pre>
<p>If I do <code>mock.patch("__builtin__.open", return_value='kaboom')</code>, the first occurrence of <code>open()</code> will be patched, the one reading file named "stuff.txt".</p>
<p>What if I need to patch second(any other) <code>open()</code> calls in <code>foo()</code> to mock return_value from reading, say <code>another_thing.txt</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because you don't like the best answer (the Daniel's one) I can tell how you can do it by <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow"><code>side_effect</code></a>:</p>
<pre><code>&gt;&gt;&gt; import mock
&gt;&gt;&gt; with mock.patch("__builtin__.open", side_effect = ["kaboom", "more","moremore"]):
...     assert "kaboom" == open("stuff.txt")
...     assert "more" == open("another_thing.txt")
...     assert "moremore" == open("last_one.txt")
</code></pre>
<p>Or better</p>
<pre><code>&gt;&gt;&gt; with mock.patch("__builtin__.open", side_effect = lambda name, *args: name):
...     assert "stuff.txt" == open("stuff.txt")
...     assert "another_thing.txt" == open("another_thing.txt")
...     assert "last_one.txt" == open("last_one.txt")
</code></pre>
<hr/>
<p>I wrote a comment that I think is important in this answer context: this is a wrong way to do these kind of tests. In this test you are writing wires that tangle tests and production code.</p>
<p>If you cannot refactor your code to write it in a more modular and testable way you should use this test to check the behavior and immediately after use it to refactor your code without change the behavior. Last step will be rewrite your test by use refactored code and then remove old test.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is possible to do this via the <code>side_effect</code> parameter to Mock, but I wouldn't advise it. Instead, refactor your code so that each of those open calls happens in a separate function, which you can individually patch.</p>
<pre><code>a = open_stuff()
b = open_another_thing()
c = open_last_one()
</code></pre>
</div>
<span class="comment-copy">This is the best answer to my question. Daniel's one is good, but completely useless in my circumstances. I simply cannot change the code which needs to be tested.</span>
<span class="comment-copy">So, write your test and then change the code and finally change your test. This test will be here to check you behavior but it is the wrong way to do it because it tangle your production code to your tests: so you should remove it ASAP.</span>
<span class="comment-copy">What is bad about using side_effects apart from the fact I write tests to fix code, not vice versa?</span>
<span class="comment-copy"><code>side_effect</code> is not wrong as itself, what is wrong is writing tests that introduce a protocol that doesn't really mater. By the first version of <code>side_effect</code> you should take care of the order of how you open the file. If this order doesn't mater you are introducing something that will make your test less flexible.</span>
<span class="comment-copy">I'll take my chances with the side effect. How do I use it to assign return values?</span>
