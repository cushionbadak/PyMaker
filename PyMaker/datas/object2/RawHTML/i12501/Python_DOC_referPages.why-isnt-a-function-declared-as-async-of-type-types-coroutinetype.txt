<div class="post-text" itemprop="text">
<p>Quote from <a href="https://docs.python.org/3/library/types.html" rel="nofollow">here</a>:</p>
<blockquote>
<p><code>types.CoroutineType</code></p>
<p>The type of coroutine objects, created by async def functions.</p>
</blockquote>
<p>Quote from <a href="https://docs.python.org/3/reference/compound_stmts.html#async-def" rel="nofollow">here</a>:</p>
<blockquote>
<p>Functions defined with async def syntax are always coroutine functions, even if they do not contain await or async keywords.</p>
</blockquote>
<p>Python console session:</p>
<pre><code>Python 3.5.1 (v3.5.1:37a07cee5969, Dec  6 2015, 01:38:48) [MSC v.1900 32
bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import types
&gt;&gt;&gt; def f(): pass
...
&gt;&gt;&gt; async def g(): pass
...
&gt;&gt;&gt; isinstance(f, types.FunctionType)
True
&gt;&gt;&gt; isinstance(g, types.FunctionType)
True
&gt;&gt;&gt; isinstance(g, types.CoroutineType)
False
&gt;&gt;&gt;
</code></pre>
<p>Why doesn't <code>isinstance(g, types.CoroutineType)</code> evaluate to <code>True</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>There's a difference between coroutine and coroutine function. The same way as there is a difference between generator and generator function:</p>
<p>Calling the function <code>g</code> returns a coroutine, e.g.:</p>
<pre><code>&gt;&gt;&gt; isinstance(g(), types.CoroutineType)
True
</code></pre>
<p>If you need to tell if <code>g</code> is a coroutine function (i.e. would return a coroutine) you can check with:</p>
<pre><code>&gt;&gt;&gt; from asyncio import iscoroutinefunction
&gt;&gt;&gt; iscoroutinefunction(g)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>g</code> by itself is not a valid Coroutine function when used that way:</p>
<pre><code>isinstance(g, types.CoroutineType)
</code></pre>
<p>This is similar to the difference between a generator and a generator function. Instead, use <code>g()</code> to compare:</p>
<pre><code>isinstance(g(), types.CoroutineType)
</code></pre>
<p>You could also try <code>iscoroutinefunction(g)</code> instead, much more shorter and neater:</p>
<pre><code>from asyncio import iscoroutinefunction
iscoroutinefunction(g)   #Return true
</code></pre>
<p>Read more here: <a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow">https://docs.python.org/3/library/asyncio-task.html</a></p>
</div>
<span class="comment-copy">Ooh, I'm a little late</span>
