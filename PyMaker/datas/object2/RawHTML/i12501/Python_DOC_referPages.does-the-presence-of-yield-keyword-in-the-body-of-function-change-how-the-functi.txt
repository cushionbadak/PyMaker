<div class="post-text" itemprop="text">
<p>It seems that if there is at least one yield anywhere in the function body, then it will return an empty generator instead of nothing by default even if yield is not reached.</p>
<pre><code>def foo(l):
    for elem in l:
        yield elem

x = foo([])  # &lt;generator object foo at 0x7f7393a0ae58&gt;
</code></pre>
<p>How exactly does this work?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the documentation (<a href="https://docs.python.org/3/reference/expressions.html#yield-expressions" rel="nofollow">https://docs.python.org/3/reference/expressions.html#yield-expressions</a>)</p>
<blockquote>
<p>Using a yield expression in a function’s body causes that function to
  be a generator.</p>
</blockquote>
<p>Perhaps you mean to <code>yield elem</code> rather than <code>yield l</code>?</p>
<pre><code>def foo(l):
    for elem in l:
        yield elem        

for t in foo([1,2,3]):
     print(t)
1
2
3
</code></pre>
</div>
<span class="comment-copy">Yes, using a <code>yield</code> always convert function to generator. <a href="https://docs.python.org/3/reference/expressions.html#yield-expressions" rel="nofollow noreferrer"><i>The yield expression is only used when defining a generator function and thus can only be used in the body of a function definition. Using a yield expression in a function’s body causes that function to be a generator.</i></a></span>
<span class="comment-copy">Yeah, it doesn't matter what I yield. It was just to demonstrate this behaviour.</span>
