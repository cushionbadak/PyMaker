<div class="post-text" itemprop="text">
<p>I write simple udp client program, but it cannot receive datagram correctly.<br/>
My code is below.</p>
<pre><code>import asyncio

class EchoClientProtocol:
    def __init__(self, message, loop):
        self.message = message
        self.loop = loop
        self.transport = None

    def connection_made(self, transport):
        self.transport = transport
        print('Send:', self.message)
        self.transport.sendto(self.message.encode())

    def datagram_received(self, data, addr):
        print('Received:', data.decode())

async def sendChar(transport, msg):
    print('send: ', msg)
    transport.sendto(msg.encode())

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    message = 'Hello World!'
    connect = loop.create_datagram_endpoint(
            lambda: EchoClientProtocol(message, loop),
            remote_addr=('127.0.0.1', 9999)
            )
    transport, protocol = loop.run_until_complete(connect)
    while (True):
        try:
            ch = input()
        except KeyboardInterrupt:
            break
        loop.run_until_complete(sendChar(transport, ch))
    loop.run_forever()
    transport.close()
    loop.close()
</code></pre>
<p>And I write UDP echo server protocol program posted in asyncio document.<br/>
(<a href="https://docs.python.org/3/library/asyncio-protocol.html#udp-echo-server-protocol" rel="nofollow">https://docs.python.org/3/library/asyncio-protocol.html#udp-echo-server-protocol</a>)</p>
<p>Running these programs, I think result is like this.</p>
<pre><code>Send: Hello World!
Received: Hello World!
1
send: 1
Received: 1
2
send: 2
Received: 2
</code></pre>
<p>But result is this.</p>
<pre><code>Send: Hello World!
1
send: 1
Received: Hello World!
2
send: 2
Received: 1
</code></pre>
<p>Why is result shifted?<br/>
I search about asyncio module, but I cannot solve this problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is because <code>while True</code> loop does not give back control to ioloop until next send call - <code>input</code> is blocking. Simply add some async sleep, so ioloop could handle events to receive data</p>
<pre><code>while (True):
    try:
        loop.run_until_complete(asyncio.sleep(0.001))
        ch = input()
    except KeyboardInterrupt:
        break
    loop.run_until_complete(sendChar(transport, ch))
</code></pre>
<p>And since <code>input</code> will block here as well, afaik it is the best to move it to separate thread:</p>
<pre><code>import threading
import asyncio

class EchoClientProtocol:
    def __init__(self, message, loop):
        self.message = message
        self.loop = loop
        self.transport = None

    def connection_made(self, transport):
        self.transport = transport
        print('Send:', self.message)
        self.transport.sendto(self.message.encode())

    def datagram_received(self, data, addr):
        print('Received:', data.decode())

    def error_received(self, data, addr=None):
        raise data

async def sendChar(transport, msg):
    print('send: ', msg)
    transport.sendto(msg.encode())

user_input = [None]

# spawn a new thread to wait for input 
def get_user_input(user_input_ref):
    while True:
        user_input_ref[0] = input()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    message = 'Hello World!'
    connect = loop.create_datagram_endpoint(
            lambda: EchoClientProtocol(message, loop),
            remote_addr=('127.0.0.1', 9999)
            )
    transport, protocol = loop.run_until_complete(connect)
    input_thread = threading.Thread(target=get_user_input, args=(user_input,))
    input_thread.daemon = True
    input_thread.start()
    while (True):
        if user_input[0] is not None:
            loop.run_until_complete(sendChar(transport, user_input[0]))
            user_input[0] = None
        loop.run_until_complete(asyncio.sleep(1))
    loop.run_forever()
    transport.close()
    loop.close()
</code></pre>
<p>I have mixed your code with <a href="https://stackoverflow.com/questions/12078363/waiting-for-user-input-in-separate-thread">waiting for user input in separate thread</a>, of course to refactor :)</p>
</div>
<span class="comment-copy">Thank you for your answer. I tried to run your code and can get correct result!  I haven't use threading module, so I didn't come up with it. I'll study about threading module.</span>
