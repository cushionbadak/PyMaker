<div class="post-text" itemprop="text">
<p>I have Anaconda 3 installed in <code>/opt/anaconda3/</code> and the Gurobi optimising software installed in <code>/opt/gurobi650/</code>. I want to be able to load the Gurobi libraries after having started <code>/opt/anaconda3/bin/python</code> (i.e. the Anaconda python - not the system python) with the <code>import gurobipy</code> command. Currently, anaconda python does not search there as the code</p>
<pre><code>import sys
sys.path
</code></pre>
<p>suggests - it returns a list of libraries in the anaconda directory. The command <code>import gurobipy</code> works with <code>/usr/bin/python</code> however - as this uses the PATH environment variable.</p>
<p>I realise that I could append the Gurobi directory to <code>sys.path</code>, but I want to alter the root <code>sys.path</code> of Anaconda because the library should be accessible by default.</p>
<p>In the normal system environment, this is a simple matter of altering the PATH and LD_LIBRARY_PATH environment variables with files in <code>/etc/profile.d/</code>. What would be the analogous solution for using Anaconda python?</p>
<p>EDIT: To import gurobipy, it's actually <code>/usr/local/lib/python3.4/dist-packages</code> that needs to be added to <code>sys.path</code>, not anything in the <code>/opt/gurobi650</code> directory.</p>
<p>EDIT: This is on Linux (Ubuntu 14.04).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can always add it to the environment variable <a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path" rel="nofollow"><code>PYTHONPATH</code></a>, which will be prepended to <code>sys.path</code>:</p>
<pre><code>export PYTHONPATH=/opt/gurobi650/
</code></pre>
<p>It's a hack to add <code>/usr/local/lib/python3.4/dist-packages</code> to your <code>sys.path</code> when using Anaconda's Python. The Anaconda distribution is different from the OS version, possibly in ways that can cause you some headaches.</p>
</div>
<span class="comment-copy">So you didn't install this extension into this custom Python and you want to fake it?</span>
<span class="comment-copy">Assuming that what you mean by 'installing the extension into the custom python' is installing the gurobi anaconda package through the channels, then the answer is no I didn't do that and yes I do want to fake it. I did try the conda gurobi package, but I ran into problems and considering that this seems like a fairly simple problem I expected that there would be a fairly simply answer (which unfortunately google hasn't provided :( )</span>
<span class="comment-copy">I think you want to install a package that was compiled against whatever custom python you want to use. So that means find out everything about how the conda gurobi environment is built, including installing it from sources, and all the tools used in building it, you don't state if you're on Linux, but your path /usr tells me that you're not on Windows.  If you're a C developer, you should build the gurobi stuff from source. If you're not, you probably can't do this.  Simple depends on your C/unix skill level.</span>
<span class="comment-copy">tagged question Linux since your question would make no sense on anaconda on windows.</span>
<span class="comment-copy">This assumes that whatever python extensions are in /opt/gurobi650 are binary compatible with that custom python, which it might not be.  Let's assume both are python3.4. Let's hope they're ABI compatible, but maybe they aren't.  Chances are about 90% they're NOT binary compatible.</span>
<span class="comment-copy">related question where they're definitely not binary compatible on Windows. Not sure about Linux.  <a href="http://stackoverflow.com/questions/25228687/how-to-use-mysql-with-anacondas-python-ide" title="how to use mysql with anacondas python ide">stackoverflow.com/questions/25228687/â€¦</a></span>
<span class="comment-copy">Thanks - this solution works on linux apparently :)</span>
