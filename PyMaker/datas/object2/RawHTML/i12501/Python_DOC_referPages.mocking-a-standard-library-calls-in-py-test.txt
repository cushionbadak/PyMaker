<div class="post-text" itemprop="text">
<p>I'm learning how to write tests with py.test, but I can't get idea how to mock external calls.</p>
<p>Let say I have a code for testing:</p>
<p>app.py:</p>
<pre><code>import random

def trade_robot(stock, price):
    return ' '.join((random.choice(('buy', 'sell', 'keep')), stock))
</code></pre>
<p>And I want to be sure I check case for random.choice deciding I need to buy (and I want to check it properly join strings for 'buy' case).</p>
<p>my test code should look like this:</p>
<pre><code>import pytest
from app import trade_robot
import sys

def test_buy_case():
    # some mock magic here
    assert trade_robot('AAPL', 500) == 'buy AAPL'

if __name__ == "__main__":
    pytest.main("-v %s" % sys.argv[0])
</code></pre>
<p>What should be in 'some mock magic' to make this test passing every time? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>That can be done with the library <a href="http://www.voidspace.org.uk/python/mock/" rel="nofollow"><code>mock</code></a>, which is included into <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow">standard library</a> since Python 3.3.</p>
<p>First, with a context manager:</p>
<pre><code>import random
with mock.patch.object(random, 'choice') as m:
    m.return_value = 'buy'
    print random.choice(['anything'])  # prints 'buy' regardless of the arguments
</code></pre>
<p>The same with a decorator:</p>
<pre><code>@mock.patch.object(random, 'choice')
def test_buy(m):
    m.return_value = 'buy'
    print random.choice(['anything'])
</code></pre>
<p>The library also allows making assertions regarding mock calls and irreplaceable for unit testing. Alternatively, some people prefer explicit dependency inversion, which means passing the function <code>random.choice</code> into your code as a function/method/constructor argument and replacing it with a mock in a test.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the 'patch' decorator to mock external calls:</p>
<p><a href="http://www.voidspace.org.uk/python/mock/patch.html" rel="nofollow">http://www.voidspace.org.uk/python/mock/patch.html</a></p>
<p>E.g. you could mock the 'random.choice' with</p>
<pre><code>@patch('random.choice')
def test_foo(choice):
    choice.return_value = some value 
</code></pre>
<p>The key is where to patch:
<a href="http://www.voidspace.org.uk/python/mock/patch.html#id1" rel="nofollow">http://www.voidspace.org.uk/python/mock/patch.html#id1</a></p>
</div>
<span class="comment-copy">Thank you! I've tested this code, and I can use context manager in the test function:     with mock.patch.object(random, 'choice') as m:    m.return_value = 'buy'  assert trade_robot('AAPL', 500) == 'buy AAPL'. And it works!</span>
