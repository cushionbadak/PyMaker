<div class="post-text" itemprop="text">
<p>For some time now I have been trying to wrap my head around scripting for Cellebrite's Physical Analyzer, Python shell. The documentation for PA's shell is incomplete, and I believe that a comprehensive documentation of the API would make coding for it much easier. A few weeks ago, I realized that I the builtin <code>help()</code> function would give me most of the info I needed, but it is limited by its tether to the shell, among other things. </p>
<p>I recently completed a script which saves every help entry (as well as some additional information) to a txt file in a directory on my desktop. I want to turn these files into class stubs, I can use these to create clearer documentation and facilitate type-hinting in an IDE.</p>
<p><strong>Here's the problem:</strong>
I don't know how to parse the help files. I can write a series of complicated regular expressions, but my program is already confusing enough.</p>
<p>Does anyone know an easy way to translate help documentation into a stub?</p>
<p>P.S.</p>
<p>by stub I mean something like this:</p>
<p>Help:</p>
<pre><code> |      C(Stream baseStream, long offset, long length)
 |      
 |      
 |  Data and other attributes defined here:
 |  
 |      Equals(...)
 |              bool Equals(self, C other)
</code></pre>
<p>Stub:
    </p>
<pre><code>class C(object):
    """
    No Documentation
    """

    def __init__(self, baseStream, offset, length):
        """
        No Documentation

        :type baseStream: Stream
        :type offset: long
        :type length: long
        :rtype: C
        """
        pass

    def Equals(self, other):
        """
        No Documentation

        :type other: C
        :rtype: bool
        """
        pass
</code></pre>
<p>python's not really my language, so please excuse any syntax errors above.</p>
<p><strong>EDIT:</strong>
I really want to drive home the fact that python <em>is not</em> my language and if you see this question and think "well, he must have tried that", I probably haven't</p>
<p><strong>EDIT2:</strong>
this is the script I have so far:</p>
<p><a href="https://drive.google.com/file/d/0B-5Y1OoryQYuczE4REpDR1FiRWc/view?usp=sharing" rel="nofollow">https://drive.google.com/file/d/0B-5Y1OoryQYuczE4REpDR1FiRWc/view?usp=sharing</a>
forgive the horrible syntax. The whole thing is nested in <code>if True:</code> because unless it is indented the shell will break on the second line, and I needed to begin the block somehow. And the reason I am writing to the file in binary mode is that the thing keeps erroring if I try to do text. The rest is probably just on me. </p>
<p><strong>EDIT3:</strong>
Help example: <a href="https://drive.google.com/file/d/0B-5Y1OoryQYuSjJrOGFLeVU3RWc/view?usp=sharing" rel="nofollow">https://drive.google.com/file/d/0B-5Y1OoryQYuSjJrOGFLeVU3RWc/view?usp=sharing</a></p>
<p>If this is too broad, I don't understand what has not been sufficiently explained. I would appreciate any pointers as to where it is too vague.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to parse the help data to do what you want.</p>
<p>Instead, you can introspect the class directly with the standard python library.</p>
<p>For example, try this:</p>
<pre><code>import inspect
print inspect.getmembers(C)
</code></pre>
<p>You should be able to easily recreate the stubs without having to parse the help text.</p>
</div>
<span class="comment-copy">Is there a reason why you don't want to parse the existing classes themselves?</span>
<span class="comment-copy">If you will forgive my ignorance, I have no idea what that means.</span>
<span class="comment-copy">How is your IDE going to know that it should draw type-hint info about <code>somelib.Class</code> objects from your <code>chrisgotter.somelib.Class</code>?  Also, if the type info already in the module itself isn't enough, how is your copy of that info going to help?  Or did you intend to manually annotate your stub classes as you learn more about them?  If so, you might be better off ignoring the <code>help</code> system and just copying and editing the *.py files (either by hand if there's only a few, or maybe using the <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer"><code>ast</code> module</a>)... which is probably what Ignacio was saying.</span>
<span class="comment-copy">Also, what language is that library written in?  Python modules don't typically have C-style types declarations in their parameter lists.  (Python's optional <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a> look nothing like that.)  The <code>__doc__</code> string could be literally anything, though... including C-style parameter lists or anything else the author felt like.</span>
<span class="comment-copy">I was going to suggest you try <a href="https://docs.python.org/3/library/typing.html#typing.get_type_hints" rel="nofollow noreferrer"><code>typing.get_type_hints</code></a> to make use of any optional type hints in the package you're using.  But I just noticed that <code>typing</code> wasn't introduced until Python 3.5 (see <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">PEP-484</a>), so unless that package is <i>very</i> recent, <code>typing</code> won't help you.</span>
<span class="comment-copy">I'll be sure to try that the next time i get a chance</span>
