<div class="post-text" itemprop="text">
<pre><code>class A:
    def __init__(self):
        print("world")

class B(A):
    def __init__(self):
       print("hello")

B()  # output: hello
</code></pre>
<p>In all other languages I've worked with the super constructor is invoked implicitly. How does one invoke it in Python? I would expect <code>super(self)</code> but this doesn't work.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>super()</code> returns a parent-like object <em>in new-style classes</em>:</p>
<pre><code>class A(object):
    def __init__(self):
        print "world"

class B(A):
    def __init__(self):
        print "hello"
        super(B, self).__init__()

B()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In line with the other answers, there are multiple ways to call super class methods (including the constructor), however in Python-3.x the process has been simplified:</p>
<p><strong>Python-2.x</strong></p>
<pre><code>class A(object):
 def __init__(self):
   print "world"

class B(A):
 def __init__(self):
   print "hello"
   super(B, self).__init__()
</code></pre>
<p><strong>Python-3.x</strong></p>
<pre><code>class A(object):
 def __init__(self):
   print("world")

class B(A):
 def __init__(self):
   print("hello")
   super().__init__()
</code></pre>
<p><code>super()</code> is now equivalent to <code>super(&lt;containing classname&gt;, self)</code> as per <a href="https://docs.python.org/3.5/library/functions.html#super" rel="noreferrer">the docs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>With Python 2.x old-style classes it would be this:</p>
<pre><code>class A: 
 def __init__(self): 
   print "world" 

class B(A): 
 def __init__(self): 
   print "hello" 
   A.__init__(self)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way is to call A's constructor and pass <code>self</code> as an argument, like so:</p>
<pre><code>class B(A):
    def __init__(self):
        A.__init__(self)
        print "hello"
</code></pre>
<p>The advantage of this style is that it's very clear.  It call A's constructor.  The downside is that it doesn't handle diamond-shaped inheritance very well, since you may end up calling the shared base class's constructor twice.</p>
<p>Another way is to use super(), as others have shown.  For single-inheritance, it does basically the same thing as letting you call the parent's constructor.</p>
<p>However, super() is quite a bit more complicated under-the-hood and can sometimes be counter-intuitive in multiple inheritance situations.  On the plus side, super() can be used to handle diamond-shaped inheritance.  If you want to know the nitty-gritty of what super() does, the best explanation I've found for how super() works is <a href="http://fuhm.net/super-harmful/" rel="noreferrer">here</a> (though I'm not necessarily endorsing that article's opinions).</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Short Answer</strong></p>
<pre><code>super(DerivedClass, self).__init__()
</code></pre>
<p><strong>Long Answer</strong></p>
<p><em>What does <code>super()</code> do?</em></p>
<p>It takes specified class name, finds its base classes (Python allows multiple inheritance) and looks for the method (<code>__init__</code> in this case) in each of them from left to right. As soon as it finds method available, it will call it and end the search.</p>
<p><em>How do I call init of all base classes?</em></p>
<p>Above works if you have only one base class. But Python does allow multiple inheritance and you might want to make sure all base classes are initialized properly. To do that, you should have each base class call init:</p>
<pre><code>class Base1:
  def __init__():
    super(Base1, self).__init__()

class Base2:
  def __init__():
    super(Base2, self).__init__()

class Derived(Base1, Base2):
  def __init__():
    super(Derived, self).__init__()
</code></pre>
<p><em>What if I forget to call init for super?</em></p>
<p>The <code>__init__</code> for base class is not called. There is no implicit constructor calls like in C++ and Java.</p>
</div>
<div class="post-text" itemprop="text">
<p>I use the following formula that extends previous answers:</p>
<pre><code>class A(object):
 def __init__(self):
   print "world"

class B(A):
 def __init__(self):
   print "hello"
   super(self.__class__, self).__init__()

B()
</code></pre>
<p>This way you don't have to repeat the name of the class in the call to <em>super</em>. It can come handy if you are coding a large number of classes, and want to make your code in the constructor methods independent of the class name.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/904036/chain-calling-parent-constructors-in-python">Chain-calling parent constructors in python</a></span>
<span class="comment-copy">just of curiosity why does <code>super(B,self)</code> require both B and self to be mentioned? isn't this redundant? shouldn't self contain a reference to B already?</span>
<span class="comment-copy">No, because <code>self</code> might actually be an instance of <code>C</code>, a child of <code>B</code>.</span>
<span class="comment-copy">@Luc: That's because the class was declared incorrectly. See my answer.</span>
<span class="comment-copy">With respect to the <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">documentation of <code>super()</code></a>, you should be able to write <code>super().__init__()</code> wothout arguments.</span>
<span class="comment-copy">@JojOatXGME: In 3.x, yes. 2.x still needs the arguments.</span>
<span class="comment-copy">This won't work for new style classes?</span>
<span class="comment-copy">@kdbanman: This will work with new-style classes, but one of the reasons to use new-style classes is to not have to do it this way. You can use <code>super</code> and not have to directly name the class you're inheriting from.</span>
<span class="comment-copy">Is there any need to call A's constructor like this when it doesn't take any variable(ignoring self) as an argument? I mean the code works fine without <code>A.__init__(self)</code> line.</span>
<span class="comment-copy">But you will get infinitive recursion if decide to extend <code>B</code> with <code>C</code>, and <code>self.__class__</code> points to <code>C(B)</code> instead of <code>B(A)</code>, so <code>super(self.__class__, self)</code> points back to <code>B</code> instead of <code>A</code>.</span>
<span class="comment-copy">This will lead to infinite recursion errors when you subclass <code>B</code>. Do <b>not</b> use <code>self.__class__</code> or <code>type(self)</code>, either pass in an explicit class (<code>B</code> here) or, in Python 3, use <code>super()</code> without arguments.</span>
