<div class="post-text" itemprop="text">
<p>I want a thread to wait for a message from another script.</p>
<p>I don't want to use <code>time.sleep()</code> as it creates time gaps and if I need my thread to wake up and continue running, it might delay too much and I'm aiming for fastest performance. I don't won't to use <code>while(NOT_BEING_CALLED_BY_THE_OTHER_THREAD)</code> because it will eat up my CPU and I'm also aiming to keep my CPU usage as low as possible (as there will be more thread doing the same at the same time).</p>
<p>In Pseudo-code it should look like this:</p>
<pre><code>do_stuff()
wait_for_being_called() #Rise immediately after being called (or as soon as possible)
do_more_stuff()
</code></pre>
<p>The purpose of this is to use data that wasn't available before being called, there is a script that checks for the data availability (a single thread running) and many which await for the data they need to be available (the single script checks it, and should call them if the data is available). It's kind of like <code>std::condition_variable</code> in c++, only I want my other, external script to be able to wake the awaiting script.</p>
<p>How can I achieve something like this? What should <code>check_for_events.py</code> contain?</p>
<pre><code>#check_for_events.py
for data_node in data_list:
        """
        What do I do here, assuming I have the thread id?
        """
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have two different scripts, probably the best thing to use is <a href="https://docs.python.org/3/library/select.html#select.select" rel="nofollow"><code>select</code></a>. Here's an example of what I mean:</p>
<pre><code>from __future__ import print_function
import select
import socket
import sys
import time
from random import randint


def serve():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    port = randint(10000, 50000)
    with open('.test_port', 'w') as f:
        f.write('{}'.format(port))
    sock.bind(('127.0.0.1', port))
    sock.listen(1)

    not_finished = True
    while not_finished:
        try:
            print('*'*40)
            print('Waiting for connection...')
            conn, addr = sock.accept()
            print('Waiting forever for data')
            select.select([conn], [], [])

            data = conn.recv(2048)
            print('got some data, so now I can go to work!')

            print('-'*40)
            print('Doing some work, doo da doo...')
            print('Counting to 20!')
            for x in range(20):
                print(x, end='\r')
                time.sleep(0.5)
            print('** Done with work! **')
            print('-'*40)

            conn.close()
        except KeyboardInterrupt:
            print('^C caught, quitting!')
            not_finished = False


def call():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print('Connecting')
    with open('.test_port') as f:
        port = int(f.read())
    sock.connect(('127.0.0.1', port))
    sock.sendall(b'This is a message')
    sock.close()
    print('Done')


if __name__ == '__main__':
    if 'serve' in sys.argv:
        serve()
    elif 'call' in sys.argv:
        call()
</code></pre>
<p>This allows the caller to actually communicate information with the runner. You could also set it up to listen for multiple incoming connections and toss them in the pool to <code>select</code> from, if that's something that you need.</p>
<p>But if you really just want to block until another program calls you, then you could make this even more simple by removing the parts between <code>conn, add = sock.accept()</code> and <code>conn.close()</code> (other than your own work, of course).</p>
</div>
<span class="comment-copy">This sounds like a job for <code>lock.acquire</code>.</span>
<span class="comment-copy">@MorganThrapp I understand. But how do I access the lock from both ends? The other threads are basically programs called using <code>os.system("python other_script.py [some args i have here]")</code>.</span>
<span class="comment-copy">Oh, I misunderstood. You should look into lock files, or possibly IPC. This isn't something I've worked with, so I'm not sure.</span>
<span class="comment-copy">A nice one. But still, I got '0.7%' on my CPU usage. It is nice but it still doesn't compare with <code>std::condition_variable</code>'s performance. I'd wait for other suggestions which maybe will show better performance.</span>
<span class="comment-copy">That's interesting! I was under the impression that waiting for a socket to connect left control over to the OS for an interrupt. Guess not?</span>
<span class="comment-copy">*** I did follow your tip, I just waited for select to return and closed the socket, CPU usage was smaller than 0.1% (was showing 0%), probably an interrupt. As effective as locks. Thank you so very much.</span>
