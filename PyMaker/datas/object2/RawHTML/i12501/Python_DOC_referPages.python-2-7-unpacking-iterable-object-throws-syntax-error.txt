<div class="post-text" itemprop="text">
<p>I am learning python and I have as simple list as this</p>
<pre><code>z = [1,2,3,4,5,6,7,8,9]
</code></pre>
<p>and I am just trying to unpack it, which throws me syntax error.</p>
<pre><code>a,*b,c = z
&gt;&gt;&gt; a,*b,c = z
  File "&lt;stdin&gt;", line 1
    a,*b,c = z
      ^
SyntaxError: invalid syntax
</code></pre>
<p>I tried changing the order of variable as well but same error. Any suggestion pls.</p>
</div>
<div class="post-text" itemprop="text">
<p>What your are trying to do does not work in Python2 because it does not have support for extended tuple unpacking - you pretty much have to use slicing. </p>
<pre><code>&gt;&gt;&gt; z = [1,2,3,4,5,6,7,8,9]
&gt;&gt;&gt; a, b, c = z[0], z[1:-1], z[-1]
&gt;&gt;&gt; a
1
&gt;&gt;&gt; b
[2, 3, 4, 5, 6, 7, 8]
&gt;&gt;&gt; c
9
</code></pre>
<p>Using Python3, you are allowed <a href="https://www.python.org/dev/peps/pep-3132/" rel="nofollow">one wildcard</a>:</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; z = [1,2,3,4,5,6,7,8,9]
&gt;&gt;&gt; a, *b, c = z
&gt;&gt;&gt; a
1
&gt;&gt;&gt; b
[2, 3, 4, 5, 6, 7, 8]
&gt;&gt;&gt; c
9
&gt;&gt;&gt; *a, b, c = z
&gt;&gt;&gt; a
[1, 2, 3, 4, 5, 6, 7]
&gt;&gt;&gt; b
8
&gt;&gt;&gt; c
9
&gt;&gt;&gt; *a, *b, c = z
  File "&lt;stdin&gt;", line 1
SyntaxError: two starred expressions in assignment
</code></pre>
<p>Python3.5 comes with some <a href="https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-448" rel="nofollow">additional unpacking generalizations</a></p>
<pre><code>&gt;&gt;&gt; [1, 2, *[3, 4]]
[1, 2, 3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a quote from <a href="https://www.python.org/dev/peps/pep-3132/#id6" rel="nofollow">PEP-3132</a></p>
<blockquote>
<p>For example, if seq is a slicable sequence, all the following
  assignments are equivalent if seq has at least three elements:</p>
<pre><code>a, b, c = seq[0], list(seq[1:-1]), seq[-1]
a, *b, c = seq
[a, *b, c] = seq
</code></pre>
</blockquote>
<p>In Python2.7, only the first version is legal syntax.</p>
<p>Since you already know <code>z</code> is a list, you can just write</p>
<pre><code>a, b, c = z[0], z[1:-1], z[-1]
</code></pre>
<p>This will work for Python2.7 and Python3.x</p>
</div>
<span class="comment-copy"><code>*b</code> is not a valid name for a variable</span>
<span class="comment-copy">What were you try to get with <code>*b</code>? Were you trying to separate the first and last element from the middle of the list?</span>
<span class="comment-copy">Extended unpacking is only implemented/possible in python 3 - your question is tagged as python 2.7 and 3.x. What version are you using?</span>
<span class="comment-copy">Ref <a href="https://www.python.org/dev/peps/pep-3132/" rel="nofollow noreferrer">python.org/dev/peps/pep-3132</a> and <a href="https://docs.python.org/3/whatsnew/3.0.html#new-syntax" rel="nofollow noreferrer">docs.python.org/3/whatsnew/3.0.html#new-syntax</a></span>
<span class="comment-copy">@TomDalton I am using 2.7 as mentioned in title of question but I guessed that it might be due to version so I want to reach out wider audience for their suggestion</span>
<span class="comment-copy">And it's a damn shame that the new generalizations don't work in comprehensions, or we could write <code>[*sublist for sublist in nested_list]</code> in 3.5 to flatten a list of lists.</span>
<span class="comment-copy">Eh. Works with generator expressions, so: <code>[*itertools.chain(*nested_list)]</code> works. Not too bad; shortens if you import <code>chain</code> into global namespace directly.</span>
<span class="comment-copy">If <code>seq</code> is a generator this won't work, better to do <code>lst = list(seq)</code> then slice <code>lst</code>.</span>
<span class="comment-copy">A generator is neither slicable nor a sequence.</span>
