<div class="post-text" itemprop="text">
<p>Given the following:</p>
<pre><code>class toTest(object)
    def createObject(self):
        self.created = toCreate()

class toCreate(object):
    def __init__(self):
        pass

# testFile.py
import unittest
class TestThing(unittest.TestCase):
    def testCreated(self):
        creator = toTest()
        toTest.createObject()
        # -- Assert that the 'toCreate' object was in fact instantiated
</code></pre>
<p>...how can I ensure that <code>toCreate</code> was in fact created? I have tried the following:</p>
<pre><code>def testCreated(self):
    created = MagicMock(spec=toCreate)
    toTest.createObject()
    created.__init__.assert_called_once_with()
</code></pre>
<p>But I get the following error: <code>AttributeError: Mock object has no attribute 'init'</code>. Am I misusing the MagicMock class, and if so how?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow"><code>unitetest.mock</code></a> have two main duties:</p>
<ul>
<li>Define <code>Mock</code> objects: object designed to follow your screenplay and record every access to your mocked object</li>
<li>patching references and recover the original state</li>
</ul>
<p>In your example you need both functionalities: Patching <code>toCreate</code> class reference by a mock where you can have a complete behavior control. There are a lot of ways to use <a href="https://docs.python.org/3/library/unittest.mock.html#the-patchers" rel="nofollow"><code>patch</code></a>, some <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow">details to take care on how use it</a> and <a href="https://docs.python.org/3/library/unittest.mock.html#autospeccing" rel="nofollow">cavelets to know</a>.</p>
<p>In your case you should <code>patch</code> <code>toCreate</code> class instance and check if you call the <code>Mock</code> that <code>patch</code> used to replace the constructor:</p>
<pre><code>class TestThing(unittest.TestCase):
    @patch("module_where_toCreate_is.toCreate")
    def testCreated(self, mock_toCreate):
        creator = toTest()
        toTest.createObject()
        mock_toCreate.assert_called_with()
</code></pre>
</div>
