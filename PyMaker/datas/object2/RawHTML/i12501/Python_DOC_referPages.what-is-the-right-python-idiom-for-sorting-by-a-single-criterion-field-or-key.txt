<div class="post-text" itemprop="text">
<p>As in title, how can I sort objects by single criterion?</p>
<p>I've heard about <code>key</code> parameter, <code>cmp</code> parameter, and Decorate-Sort-Undecorate pattern.<br/>
Which one should I use in modern Python, and how?</p>
</div>
<div class="post-text" itemprop="text">
<p>In modern Python, the best way is to use <code>list.sort</code> or <code>sorted</code> with <code>key</code> argument.</p>
<p>When you pass <code>key</code> argument, sorting function, instead of comparing elements directly, compares whatever <code>key</code> returned for them.</p>
<p>So, you can pass as <code>key</code> any callable that takes element to be sorted as single positional argument, and returns what the element should be sorted by.<br/>
The callable will be called once for each element.</p>
<p>Some simple examples:</p>
<pre><code>   list_ = ['B', 'aaa', 'CC']

   sorted(list_)
=&gt; ['B', 'CC', 'aaa']

   # case-insensitive sorting
   sorted(list_, key=str.lower)
=&gt; ['aaa', 'B', 'CC']

   # sorting by length
   sorted(list_, key=len)
=&gt; ['B', 'CC', 'aaa']
</code></pre>
<p>Sorting with <code>key</code> is roughly equivalent to <a href="https://wiki.python.org/moin/HowTo/Sorting#The_Old_Way_Using_Decorate-Sort-Undecorate" rel="nofollow noreferrer">Decorate-Sort-Undecorate pattern</a>:</p>
<pre><code>def decorate_sort_undecorate(iterable, key):
    # 1: decorate:
    decorated = [(key(elem), index, elem) for index, elem in enumerate(iterable)]

    # 2: sort:
    decorated.sort()

    # 3: undecorate: 
    return [elem for key_, index, elem in decorated]
</code></pre>
<p>This creates temporary list (<code>decorated</code>) of 3-element tuples,<br/>
which have form: <code>(key_, index, elem)</code>, where <code>key_ = key(elem)</code>. Then, <code>decorated</code> list is sorted.<br/>
Tuples are compared by first non-equal element. This is <code>key_</code>, or if <code>key_</code>s are equal, <code>index</code>. Because there are no equal indexes, elements are never directly compared.<br/>
At the end, elements are extracted from <code>decorated</code> into new list, which is returned.</p>
<h3>Random thoughts:</h3>
<ul>
<li>Order of sorted elements can be reversed using <code>reverse=True</code>,</li>
<li><a href="https://stackoverflow.com/q/8966538/3821804"><code>lambda</code>s</a> and functions from <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer"><code>operator</code> module</a> are often passed as <code>key</code>,</li>
<li>before 2.4, there were no <code>key</code> parameter. There were only <a href="https://wiki.python.org/moin/HowTo/Sorting#The_Old_Way_Using_Decorate-Sort-Undecorate" rel="nofollow noreferrer">Decorate-Sort-Undecorate pattern</a> and slow <code>cmp</code> parameter,</li>
<li><a href="https://stackoverflow.com/q/5212870/3821804">Sorting a Python list by two criteria</a>.</li>
</ul>
</div>
<span class="comment-copy">This is my attempt to create <a href="http://meta.stackoverflow.com/q/314445/3821804">canonical question for sorting with key argument in Python</a>.</span>
<span class="comment-copy">Please note that even self-answered questions should meet the site's quality requirements; see <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a>. <i>"How to"</i> questions aren't a good for for SO, consider writing this up on a blog or something.</span>
<span class="comment-copy">@jonrsharpe: at the moment, I really have no idea how I could improve the question, while keeping it case-agnostic; I'll think about it again tomorrow. What do you mean by <i>writing this up on a blog</i>? (English is not my first language)</span>
<span class="comment-copy">I mean post this as an article on a blog, rather than trying to shoe-horn it onto SO.</span>
<span class="comment-copy">Thanks for advice.</span>
