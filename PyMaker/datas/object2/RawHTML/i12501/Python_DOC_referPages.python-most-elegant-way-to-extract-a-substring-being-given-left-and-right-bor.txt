<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4666973/how-to-extract-the-substring-between-two-markers">How to extract the substring between two markers?</a>
<span class="question-originals-answer-count">
                    15 answers
                </span>
</li>
</ul>
</div>
<p>I have a string - Python :</p>
<pre><code>string = "/foo13546897/bar/Atlantis-GPS-coordinates/bar457822368/foo/"
</code></pre>
<p>Expected output is :</p>
<pre><code>"Atlantis-GPS-coordinates"
</code></pre>
<p>I know that the expected output is ALWAYS surrounded by "/bar/" on the left and "/" on the right :</p>
<pre><code>"/bar/Atlantis-GPS-coordinates/"
</code></pre>
<p>Proposed solution would look like :</p>
<pre><code>a = string.find("/bar/")
b = string.find("/",a+5)
output=string[a+5,b]
</code></pre>
<p>This works, but I don't like it.
Does someone know a beautiful function or tip ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/stdtypes.html#str.split" rel="noreferrer">split</a>:</p>
<pre><code>&gt;&gt;&gt; string.split("/bar/")[1].split("/")[0]
'Atlantis-GPS-coordinates'
</code></pre>
<p>Some efficiency from adding a max split of <code>1</code> I suppose:</p>
<pre><code>&gt;&gt;&gt; string.split("/bar/", 1)[1].split("/", 1)[0]
'Atlantis-GPS-coordinates'
</code></pre>
<p>Or use <a href="https://docs.python.org/2/library/stdtypes.html#str.partition" rel="noreferrer">partition</a>:</p>
<pre><code>&gt;&gt;&gt; string.partition("/bar/")[2].partition("/")[0]
'Atlantis-GPS-coordinates'
</code></pre>
<p>Or a regex:</p>
<pre><code>&gt;&gt;&gt; re.search(r'/bar/([^/]+)', string).group(1)
'Atlantis-GPS-coordinates'
</code></pre>
<p>Depends on what speaks to you and your data.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you haven't isn't all that bad.  I'd write it as:</p>
<pre><code>start = string.find('/bar/') + 5
end = string.find('/', start)
output = string[start:end]
</code></pre>
<p>as long as you know that <code>/bar/WHAT-YOU-WANT/</code> is always going to be present.  Otherwise, I would reach for the <a href="https://docs.python.org/3/library/re.html#module-re" rel="nofollow">regular expression knife</a>:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; PATTERN = re.compile('^.*/bar/([^/]*)/.*$')
&gt;&gt;&gt; s = '/foo13546897/bar/Atlantis-GPS-coordinates/bar457822368/foo/'
&gt;&gt;&gt; match = PATTERN.match(s)
&gt;&gt;&gt; match.group(1)
'Atlantis-GPS-coordinates'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re

pattern = '(?&lt;=/bar/).+?/'
string = "/foo13546897/bar/Atlantis-GPS-coordinates/bar457822368/foo/"

result = re.search(pattern, string)
print string[result.start():result.end() - 1]
# "Atlantis-GPS-coordinates" 
</code></pre>
<p>That is a Python 2.x example. What it does first is: 
1. (?&lt;=/bar/) means only process the following regex if this precedes it (so that /bar/ must be before it)
2. '.+?/' means any amount of characters up until the next '/' char</p>
<p>Hope that helps some.</p>
<p>If you need to do this kind of search a bunch it is better to 'compile' this search for performance, but if you only need to do it once don't bother.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>re</code> (slower than other solutions):</p>
<pre class="lang-sh prettyprint-override"><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; string = "/foo13546897/bar/Atlantis-GPS-coordinates/bar457822368/foo/"
&gt;&gt;&gt; re.search(r'(?&lt;=/bar/)[^/]+(?=/)', string).group()
'Atlantis-GPS-coordinates'
</code></pre>
</div>
<span class="comment-copy"><code>string.split("/bar/")[1].split("/")[0]</code></span>
<span class="comment-copy">Love your answer.  I will validate it. What are the advantages / drawbacks of split and partition ?</span>
<span class="comment-copy">The main difference is how each handles the split if <code>/bar/</code> is not present. <code>partition</code> always produces a three element tuple with empty strings of the partition element is not found. <code>split</code> changes the number of elements in the list produced. It is easier to test whether <code>partition</code> did what it was supposed to do. I would use <code>split</code> if I knew the string would successfully split; <code>partition</code> or a regex if I needed to test.</span>
<span class="comment-copy">Your regex group is missing a closing parentheses</span>
<span class="comment-copy">@MartinKonecny indeed.  thx</span>
