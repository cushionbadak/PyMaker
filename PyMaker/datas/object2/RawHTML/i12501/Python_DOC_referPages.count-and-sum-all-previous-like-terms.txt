<div class="post-text" itemprop="text">
<p>Suppose we have a list of terms:</p>
<p><code>termList = ["A", "A", "B", "C", "C", "C", "E"]</code></p>
<hr/>
<p>Now, suppose we have another list, containing more lists:</p>
<p><code>otherList = [["A, "E"], ["A", "B", "C", "C"], ["B", "B"], ["A", "C"]]</code></p>
<hr/>
<p>What I would like to do is for each index of <code>otherList</code>, check the sum of each of its terms plus those of all previous indices to see that the total amount of each term has not exceeded that in <code>termList</code>.</p>
<p>For example:</p>
<ul>
<li>Iteration 1: A (1), E (1)</li>
<li>Iteration 2: A (2), B (1), C (2), E (1)</li>
<li>Iteration 3: Finds that there are three instances of B. This is more than the one instance that is present in <code>termList</code> so the loop ends.</li>
</ul>
<hr/>
<p>I am stuck on how to do this without nesting a million loops. I'm thinking we can use a combination of a generator expression, <code>all</code>, and <code>sum</code> but can't quite figure out how to add all the previous terms and also check that all sums are valid.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Counter</code>s would work for you and you can add them together:</p>
<pre><code>from collections import Counter
termList = ["A", "A", "B", "C", "C", "C", "E"]
otherList = [["A", "E"], ["A", "B", "C", "C"], ["B", "B"], ["A", "C"]]

term_count = Counter(termList)
c = Counter()
for lst in otherList:
    c += Counter(lst)
    if any(c[v] &gt; term_count[v] for v in c):
        break
    print(c)
else:
    print('Exhausted')
</code></pre>
<p>Output:</p>
<pre><code>Counter({'A': 1, 'E': 1})
Counter({'C': 2, 'A': 2, 'B': 1, 'E': 1})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Is this homework?  One way to do this would involve two dictionaries.  Iterate over the first list and increment the dictionary value by 1 for each instance.  Output for your example would be:  <code>{ 'A' : 2, 'B' : 1, 'C': 3, 'E' : 1 }</code>.  Next iterate over each list inside other list and do the same thing with a separate dictionary.  Output would be:  <code>{ 'A' : 3, 'E' : 1, 'B' : 3, 'C' : 3 }</code></p>
<p>Now compare your lists (or do it while you iterate over the second list).  You'll probably also want to use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow">defaultdict</a> for your dictionaries to return 0 as the default value.  This saves you the annoyance of having to account for key errors.</p>
<p>Also it's not exactly clear what you mean by previous in this sentence.</p>
<blockquote>
<p>check the sum of each of its terms plus those of all <strong>previous</strong> indices to see that the total amount of each term has not exceeded that in <code>termList</code>.</p>
</blockquote>
</div>
<span class="comment-copy">I see here only 3 loops - to count termlist element, to get otherList element( sublist), to count sublist elements (and add result to global sum). maybe with "collections.Counter()" it could be one loop.</span>
<span class="comment-copy">Basically you wst to have the count of each value in a flat andca nested list and compate them?</span>
<span class="comment-copy">Ah, I think this is what I was looking for. Is your output correct or would the third line actually read "Exhausted"?</span>
<span class="comment-copy">The <code>else</code> clause of a for loop only executes if the loop doesn't <code>break</code>, so <code>Exhausted</code> would only print if it gets to the end of <code>otherList</code>. Moved the <code>print(c)</code> after the condition so only outputs required details.</span>
<span class="comment-copy">I read it quickly, sorry. I meant to ask if it should break instead but then saw you had your print statement before the check. The edit is better; thanks</span>
