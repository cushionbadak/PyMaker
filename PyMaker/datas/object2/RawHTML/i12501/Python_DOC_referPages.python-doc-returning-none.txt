<div class="post-text" itemprop="text">
<p>Just recently I have been getting very a bizarre issue, which I have found no resolve to. For example, if I run the following code in the interpreter</p>
<pre><code>&gt;&gt;&gt; def test():
...     'docstring'
...     ...
... 
&gt;&gt;&gt; print(test.__doc__)
</code></pre>
<p>I get 'docstring,' no surprise there. Now if I run this in a *.py file, I get None.</p>
<p>I have tried multiple files with the same results; but why does the interpreter return the docstring and not any files? Any help would most certainly be appreciated.</p>
<p>Note: I have tried triple quotes, double and single, and any other variation I can muster, with no luck.</p>
<p><strong>Solved</strong>:
Not sure how exactly, but the command I was using was 'broken' in that shell instance. Working fine now</p>
</div>
<div class="post-text" itemprop="text">
<p>The docstrings are stripped if you run the interpreter with the <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-OO" rel="noreferrer"><code>-OO</code></a> switch:</p>
<blockquote>
<p><code>-OO</code>    Discard docstrings in addition to the <code>-O</code> optimizations.</p>
</blockquote>
<p>This can be also controlled by the <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONOPTIMIZE" rel="noreferrer"><code>PYTHONOPTIMIZE</code></a> environment variable:</p>
<blockquote>
<p><code>PYTHONOPTIMIZE</code></p>
<p>If this is set to a non-empty string it is equivalent to specifying the <code>-O</code> option. If set to an integer, it is equivalent to
  specifying <code>-O</code> multiple times.</p>
</blockquote>
<p>Thus you could get this effect if you had a Python wrapper that specified <code>-OO</code>, or <code>PYTHONOPTIMIZE</code> was set to say <code>2</code>.</p>
<hr/>
<p>However, this setting <em>should</em> also apply to the interactive interpreter:</p>
<pre><code>% PYTHONOPTIMIZE=2 python3
Python 3.4.3 (default, Oct 14 2015, 20:28:29) 
[GCC 4.8.4] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def foo():
...     'bar'
... 
&gt;&gt;&gt; foo.__doc__
&gt;&gt;&gt; 
</code></pre>
<hr/>
<p>You can test the optimization settings at runtime via <a href="https://docs.python.org/3/library/sys.html#sys.flags" rel="noreferrer"><code>sys.flags</code></a>:</p>
<pre><code>% PYTHONOPTIMIZE=2 python3
Python 3.4.3 (default, Oct 14 2015, 20:28:29) 
[GCC 4.8.4] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.flags.optimize
2
</code></pre>
<p>If this number is greater than or equal to 2, then that is why your docstrings are gone.</p>
</div>
<span class="comment-copy">@AvinashRaj I have, this is just a quick synopsis of my problem.</span>
<span class="comment-copy">If you print <code>__file__</code> do you get the value you expect?</span>
<span class="comment-copy">@IgnacioVazquez-Abrams Yes.</span>
<span class="comment-copy">How are you running the file? please include your command line.</span>
<span class="comment-copy">It works fine for me (as a *.py file) in both Python 2.7.10 and 3.5.1 -- it also works when I change the print statement to help(test).  What does the '...' on your third line standing in for?  (I.e. give us more code.)</span>
