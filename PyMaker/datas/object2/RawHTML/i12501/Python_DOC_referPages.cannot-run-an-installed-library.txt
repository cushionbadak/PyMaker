<div class="post-text" itemprop="text">
<p>When I do:</p>
<pre><code>import XYZ
XYZ.boo(xyz)
</code></pre>
<p>Where XYZ is a library and <code>boo</code> is function on that library, and xyz are the arguments I pass to the function.<br/>
I recieve an error ending with</p>
<pre><code>AttributeError: module 'XYZ' has no attribute 'boo'
</code></pre>
<p>What is happening?</p>
<hr/>
<p>Note: this is intended to be the <a href="https://meta.stackoverflow.com/questions/314500/canon-questionanswer-for-undesired-import-in-python?noredirect=1#comment293765_314500">canonical answer</a> for several questions about the same topic but with different libraries implied </p>
</div>
<div class="post-text" itemprop="text">
<h2>Name your source files carefully</h2>
<p>Make sure no Python scripts, modules, or packages in the current directory have the same name as a built-in or third-party module that you intend to import. Really it's best to avoid name conflicts altogether.</p>
<p>Say you want to experiment with Python's <a href="https://docs.python.org/3/library/turtle.html" rel="nofollow">turtle</a> module. You decided to name your script <em>turtle.py</em>, and write:</p>
<pre><code># turtle.py
import turtle

def move_turtle(num):
    turtle.forward(num)

move_turtle(1)
</code></pre>
<p>When you run it, you receive the error:</p>
<pre><code>Traceback (most recent call last):
  File "./turtle.py", line 2, in &lt;module&gt;
    import turtle
  File "/path/to/your/directory/turtle.py", line 7, in &lt;module&gt;
    move_turtle(1)
  File "/path/to/your/directory/turtle.py", line 5, in move_turtle
    turtle.forward(num)
AttributeError: module 'turtle' has no attribute 'forward'
</code></pre>
<p>The problem is your <em>turtle.py</em> is interfering with the import of the built-in <em>turtle</em> module. The statement <code>import turtle</code> actually imports your local <em>turtle.py</em> script instead of the built-in one.</p>
<p>There is a simple way to verify this is the problem. In the traceback, the very last file mentioned is <code>/path/to/your/directory/turtle.py"</code> which indicates you did not import the built-in <em>turtle</em> module. The built-in turtle should be located somewhere similar to <code>/usr/lib/pythonX.Y/turtle.py</code> on Linux, or <code>C:\PythonXY\Lib\turtle.py</code> on Windows.</p>
<p>To fix this problem rename your script to something else such as <code>myturtle.py</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Make sure you use the version of the library with such attribute.
If correctly imported you can explore the attributes with <code>dir(XYZ)</code> 
Otherwise this error is due to an undesired import.</p>
<p>The module python is importing
<code>XYZ</code> is one you created in the same folder or in the <code>%PATH</code> as <code>XYZ.py</code> and not the desired library. Or it is the same file where you are calling the library.</p>
<p>You should <strong>rename</strong> that module to avoid any conflict with existing packages and remove the <code>*.pyc</code> files. You could rename as <code>XYZ_test.py</code> or any other name avoiding conflicts with installed libraries. </p>
<p>Then you should be able to do:</p>
<pre><code>import XYZ
foo = XYZ.boo
</code></pre>
</div>
<span class="comment-copy">What would happen in this case if there was a function that mimics the turtle forward action? (This is a better answer than mine, let's see if we can make it canonical)</span>
<span class="comment-copy">@Llopis If the local function was named <code>forward()</code> and its arguments were similar to the actual turtle's <code>forward()</code>, you'd receive a <code>RecursionError</code>.</span>
<span class="comment-copy">This is a very generic question, and a very generic answer (that not always is the correct answer). A quick counter-example: if an user tries to import a library <code>XYZ</code> installed through pip (version 0.1) to call a function <code>boo</code> (only available from version 0.2). They will have the same error that you mention in the question, and the solution would be to <i>update the library <code>X</code></i>, not the one you mention.</span>
