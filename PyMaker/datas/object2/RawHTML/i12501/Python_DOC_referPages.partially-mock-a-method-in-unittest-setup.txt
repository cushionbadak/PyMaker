<div class="post-text" itemprop="text">
<p>I am trying to understand the mock/patch framework, but have a problem. Here are my simplified codes:</p>
<pre><code>file_a.py
class A:
  def f(self): 
    b = B()
    b.g()
    b.h()

file_b.py
class B:
  def g(self):
    return network_requests(...)

  def h(self):
    return "This is should not be mocked."

file_test.py
class SomeTests:
  def setUp(self):
    with patch('file_b.B', autospec=True) as mock:
      mock.g.return_value = "Mocked value"
      mock.side_effect = lambda : B()
    self.a = A()

  def test(self):
    self.a.f()
</code></pre>
<p>Essentially I want to mock only <code>B.g</code> inside the test, but not <code>B.h</code>. I got some idea from <a href="https://docs.python.org/3/library/unittest.mock-examples.html#partial-mocking" rel="nofollow">https://docs.python.org/3/library/unittest.mock-examples.html#partial-mocking</a>, but <code>B.g</code> is still not mocked. </p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>In the example that you linked the key problem is </p>
<blockquote>
<p>Unfortunately <code>datetime.date</code> is written in C</p>
</blockquote>
<p>That is why you need to mock the module and wrap what you don't want to mock (You cannot patch C methods directly).</p>
<p>Is all other cases (patch python objects) you can use just :</p>
<pre><code>with patch('file_b.B.g', autospec=True) as mock_g:
  mock_g.return_value = "Mocked value"
</code></pre>
<p>Anyway take care that your patch will be active just in the <code>with</code> context, out of it you will find the original reference. To have a better control of the context it you can use also decorators, <code>start()</code> and <code>stop()</code>.</p>
<p>I strongly encourage you read carefully <a href="https://docs.python.org/3/library/unittest.mock.html#the-patchers" rel="nofollow"><code>patch</code></a> and <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow">where to patch</a>.</p>
</div>
