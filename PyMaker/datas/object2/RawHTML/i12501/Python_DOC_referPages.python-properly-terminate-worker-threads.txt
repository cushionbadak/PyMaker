<div class="post-text" itemprop="text">
<p>In the Python <a href="https://docs.python.org/2/library/queue.html#Queue.Queue.join" rel="nofollow">Queue documentation</a>, there is the following example:</p>
<pre><code>def worker():
    while True:
        item = q.get()
        do_work(item)
        q.task_done()

q = Queue()
for i in range(num_worker_threads):
     t = Thread(target=worker)
     t.daemon = True
     t.start()

for item in source():
    q.put(item)

q.join()       # block until all tasks are done
</code></pre>
<p>I'm just wondering if this is the right approach, since it seems that the worker threads will never terminate. I think they'll become zombies in the end. Is it an issue that Python doc overlooked? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>It depends on what exactly your threads are doing and if they should be allowed to be terminated in the middle of doing one of their jobs.</p>
<p>Since you're using <code>daemon = True</code> the child threads should be killed when your parent ends. (More info <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.daemon" rel="nofollow noreferrer">in the docs here</a>)</p>
<p>On the other hand, if you want to do a bit cleaner of a cleanup, you should probably not use <code>while True</code> and instead use <code>while not parent_said_stop</code>, removing the <code>daemon = True</code>. Then depending on how you stop the parent (whether it be through some key click, an interrupt, or whatever else not), you can catch the fact that the parent is stopping and have the message be sent to the children. (Ways of doing things when the process ends can be seen <a href="https://stackoverflow.com/questions/3850261/doing-something-before-program-exit">here</a>)</p>
</div>
<span class="comment-copy">The above example is using multithreading, but you're talking about multiprocessing here. A daemon thread will not exit even if its parent exits, which is different from a daemon process.</span>
<span class="comment-copy">@JFreebird, I think the same thing applies to threads from what I can tell from the <a href="https://docs.python.org/3/library/threading.html#thread-objects" rel="nofollow noreferrer">docs</a>. If only daemon threads are left, they are all abruptly terminated. And so both the approaches I described should still be valid... At least, I think.</span>
