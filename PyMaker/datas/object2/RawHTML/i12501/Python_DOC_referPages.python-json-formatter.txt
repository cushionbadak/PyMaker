<div class="post-text" itemprop="text">
<p>I am new to python. Just starting to experiment it with small programs. I saw this question where :</p>
<p>Input will be of json can be of this format :</p>
<pre><code>'[ ["a","b","c"], [1,2,null], [null,3,4], [5,null,6] ]' 
</code></pre>
<p>or :</p>
<pre><code>'[ { "a":1, "b":2 }, { "b":3, "c":4 }, { "c":6, "a":5 } ]'
</code></pre>
<p>We should convert it into :</p>
<pre><code>output = '{ "a": [1,null,5], "b": [2,3,null], "c": [null,4,6] }'
</code></pre>
<p>So far I can think of is checking each element and appending to the result. Is there any easy or better way to do this in python. Please enlighten me.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this with <code>Python 3</code>:</p>
<pre><code>def get_elements(json_txt):
import json
arr = json.loads(json_txt)
new = {}
list_of_keys = []
list_of_keys_from_dicts = [list(elem.keys()) for elem in arr]
# getting keys from json
for keys in list_of_keys_from_dicts:
    for key in keys:
        if key not in list_of_keys:
            list_of_keys.append(key)
for key in list_of_keys:
    new[key] = []
for element in arr:
    for key in list_of_keys:
        if key in element:
            new[key].append(element[key])
        else:
            new[key].append(None)
return json.dumps(new)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/collections.html?highlight=defaultdict#collections.defaultdict" rel="nofollow"><code>defaultdict</code></a> from <code>collections module</code>, this way:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; s = '[ { "a":1, "b":2 }, { "b":3, "c":4 }, { "c":6, "a":5 } ]'
&gt;&gt;&gt; 
&gt;&gt;&gt; dic = json.loads(s)
&gt;&gt;&gt; dic
[{'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'a': 5, 'c': 6}]
&gt;&gt;&gt; kys = set(k for sub_d in d for k in sub_d) #creates uniques keys of dictionary d
&gt;&gt;&gt; kys
{'a', 'b', 'c'}
&gt;&gt;&gt;
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; my_dict = defaultdict(list)
&gt;&gt;&gt; for d in dic:
        for k in kys:
            my_dict[k].append(d.get(k, None))
&gt;&gt;&gt; my_dict
defaultdict(&lt;class 'list'&gt;, {'a': [1, None, 5], 'b': [2, 3, None], 'c': [None, 4, 6]})
</code></pre>
<p>As for the other situation:</p>
<pre><code>&gt;&gt;&gt; s = '[ ["a","b","c"], [1,2,null], [null,3,4], [5,null,6] ]'
&gt;&gt;&gt; d = json.loads(s)
&gt;&gt;&gt; d
[['a', 'b', 'c'], [1, 2, None], [None, 3, 4], [5, None, 6]]
&gt;&gt;&gt; my_dict = dict(zip(d[0], zip(*d[1:])))
&gt;&gt;&gt; my_dict
{'a': (1, None, 5), 'b': (2, 3, None), 'c': (None, 4, 6)}
</code></pre>
<p>If you don't want tuples as values, then:</p>
<pre><code>&gt;&gt;&gt; my_dict = defaultdict(list)
&gt;&gt;&gt; for k,v in zip(d[0], zip(*d[1:])):
        my_dict[k].extend(v)
</code></pre>
<p>Finally, to group both cases into one function:</p>
<pre><code>import json
from collections import defaultdict

def parse_data(data):
    data = json.loads(data) 
    my_dict = defaultdict(list)
    if isinstance(data[0], list):
        for k,v in zip(data[0], zip(*data[1:])):
            my_dict[k].extend(v)
    elif isinstance(data[0], dict):
        kys = set(k for sub_d in data for k in sub_d)
        for d in data:
            for k in kys:
                my_dict[k].append(d.get(k, None))
    return my_dict

s1 = '[ ["a","b","c"], [1,2,null], [null,3,4], [5,null,6] ]' 
d1 = parse_data(s1)
s2 = '[ { "a":1, "b":2 }, { "b":3, "c":4 }, { "c":6, "a":5 } ]'
d2 = parse_data(s2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It will works for both formates</p>
<pre><code>import json


def convert_format(json_data):
    convert_to_py_obj = json.loads(json_data)
    new_format = dict()
    if isinstance(convert_to_py_obj, list) and len(convert_to_py_obj) &gt; 1:
        index_0_keys = convert_to_py_obj[0]
        if isinstance(index_0_keys, list):
            for i, key in enumerate(index_0_keys):
                new_format[key] = []
                for sub_list in convert_to_py_obj[1:]:
                    new_format[key].append(sub_list[i])
        elif isinstance(index_0_keys, dict):
            for sub_dict in convert_to_py_obj:
                for key, val in sub_dict.iteritems():
                    if key in new_format:
                        new_format[key].append(val)
                    else:
                        new_format[key] = [val]
                none_keys = set(new_format.keys()) - set(sub_dict.keys())
                for key in none_keys:
                    new_format[key].append(None)
    return json.dumps(new_format)
</code></pre>
</div>
<span class="comment-copy">You mean <code>None</code> instead of <code>null</code> right?</span>
<span class="comment-copy">@IronFist seems like <code>null</code> is valid in json. If you call <code>json.loads</code> on that string it converts it to <code>None</code>. Presumably it also works the other way round.</span>
<span class="comment-copy">@PaulRooney sure it does: <code>json.dumps(None) == 'null'</code></span>
<span class="comment-copy">@PaulRooney .. correct .. :) ..thought it was in the dictionary not in the json output...didn't pay attention to that</span>
<span class="comment-copy">There are two tasks involved here: Firstly, read the JSON. Secondly, change the structure of the resulting data to resemble the desired output. Which task is giving you problems?</span>
<span class="comment-copy">Can you explain this line : set(k for sub_d in d for k in sub_d) What is sub_d here ?</span>
<span class="comment-copy"><code>set</code> will return unique element from any collections or list and because <code>d</code> is list of dictionaries, I had to use <code>set comprehension</code> for that, as if to say: for every <code>sub_d</code> (every dictionary in list) then for every <code>k</code> in that <code>sub_d</code> ...</span>
<span class="comment-copy">@Sarah .. Check my edit as I've grouped both situations into one function.</span>
