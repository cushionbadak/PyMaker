<div class="post-text" itemprop="text">
<p>Despite my obviously beginning Python skills, Iâ€™ve got a script that pulls a line of data from a 2,000-row CSV file, reads key parameters, and outputs a buffer CSV file organized as an N-by-2 rectangle, and uses the subprocess module to call the external program POVCALLC.EXE, which takes a CSV file organized that way as input.  The relevant portion of the code is shown below. I THINK that subprocess or one of its methods should allow me to interact with the external program, but am not quite sure how - or indeed whether this is the module I need.  </p>
<p>In particular, when POVCALLC.EXE starts it first asks for the input file, which in this case is buffer.csv.  It then asks for several additional parameters including the name of an output file, which come from outside the snippet below.  It then starts computing results, and then ask for further user input, including several carriage returns . Obviously, I would prefer to automate this interaction for the 2,000 rows in the original CSV. </p>
<p>Am I on the right track with subprocess, or should I be looking elsewhere to automate this interaction with the external executable?</p>
<p>Many thanks in advance!</p>
<pre><code># Begin inner loop to fetch Lorenz curve data for each survey
    for i in range(int(L_points_number)):
        index = 3 * i
        line = []
        P = L_points[index]
        line.append(P)
        L = L_points[index + 1]
        line.append(L)
        with open('buffer.csv', 'a', newline='') as buffer:
            writer = csv.writer(buffer, delimiter=',')
            P=1
            line.append(P)
            L=1
            line.append(L)
            writer.writerow(line)
            subprocess.call('povcallc.exe')
            # TODO:   CALL povcallc and compute results
            # TODO:   USE Regex to interpret results and append them to 
            #           output file
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your program expects these arguments on the standard input (e.g. after running POVCALLC you type csv filenames into the console), you could use <code>subprocess.Popen()</code> [see <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow">https://docs.python.org/3/library/subprocess.html#subprocess.Popen</a> ] with stdin redirection (stdin=PIPE), and use the returned object to send data to stdin.</p>
<p>It would looks something like this:</p>
<pre><code>my_proc = subprocess.Popen('povcallc.exe', stdin=subprocess.PIPE)
my_proc.communicate(input="my_filename_which_is_expected_by_the_program.csv")
</code></pre>
<p>You can also use the tuple returned by <code>communicate</code> to automatically check the programs stdout and stderr (see the link to docs for more).</p>
</div>
<span class="comment-copy">Could you check if POVCALLC has a command line interface?</span>
<span class="comment-copy">Using <code>subprocess</code> may not answer to your need, as what you need seems to be to simulate user entries in a terminal. As far as I know, <code>subprocess</code> only knows about standard input, output, and output error :-/</span>
<span class="comment-copy">Thanks, Mailerdaimon -- Meaning can it be run from the Windows command prompt?  Yes, it does.</span>
<span class="comment-copy">Thanks, Joel -- any ideas?  I've seen PyAutoGUI but that doesn't seem what's needed.</span>
<span class="comment-copy">Great  - thanks -- I'll try that.  But for the remaining interactions, I may have found the answer in pexpect.</span>
<span class="comment-copy">I didn't know pexpect, but it seems useful. Well, I learned something too :)</span>
