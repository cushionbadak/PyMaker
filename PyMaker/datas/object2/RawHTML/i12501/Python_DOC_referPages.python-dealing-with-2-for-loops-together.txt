<div class="post-text" itemprop="text">
<p>Ok. below is the compeletly code. I want to loop two different datasets, each for one year. get get the hailindx value percentile at each hail prob value and plot them. Since i need to loop these two datasets of 1 year, But it is super slow. </p>
<pre><code>from matplotlib import pyplot as plt
from matplotlib import mlab
import netCDF4 as net
import numpy as np
import itertools    days=["01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31"]
months=["01","02","03","04","05","06","07","08","09","10","11","12"]
hp_values=range(0,100)
for value in hp_values:
    value1=[]
    print value
    for month,day in itertools.product(months,days):
        print month,day
        try:
            hailindx1="/Trunk/2015HailIndx/HailIndx2015%s%sL0S_CONUS.nc"%(month,day)
            hailprob1="/Trunk/2015/aerHailProb2015%s%s.nc" %(month,day)
            hailindx=net.Dataset(hailindx1)
            hailprob=net.Dataset(hailprob1)
            hp=hailprob.variables['HailProb'][:]
            hs=hailindx.variables['HailIndx'][:]
            p=[0.05,0.1,0.2]
            hp=np.array(hp)
            hs=np.array(hs)
            mask=(hp&gt;0) &amp; (hs&gt;0)
            hs=hs[mask]
            hp=hp[mask]
            value2=hs[hp==value]
            if len(value2)&gt;0:
                value1.append(value2)
            else:
                continue 
        except:
            continue
    value_list=[value,value,value]
    print value_list
    if len(value1)&gt;0:
        perc=np.percentile(value1,p)
        plt.plot(value_list,perc,marker='o',color='r')
    else:
        continue

plt.xlabel('HailProb')
plt.ylabel('HailIndx')
plt.show()
</code></pre>
<p>if someone knows how to make the loop faster. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product</code></a> to get all of the combinations. Like this: </p>
<pre><code>for month, day in itertools.product(months, days):
    ...do something...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <code>product()</code> function from <code>itertools</code>:</p>
<pre><code>from itertools import product

months=["01","02","03","04","05","06","07","08","09","10","11","12"]
days=["01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31"]

answer = list(product(months, days))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[('01', '01'),
 ('01', '02'),
 ('01', '03'),
 ('01', '04'),
 ('01', '05'),
 ...
 ('12', '28'),
 ('12', '29'),
 ('12', '30'),
 ('12', '31')]
</code></pre>
<p>You can then iterate over the <code>answer</code> variable as desired.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note that your loops will return impossible dates like 2015/02/31. It might be better to work with dates directly.</p>
<p>Also note that you are loading and filtering each data file 100 times; you really only need to load it once, and you can probably filter it in one pass if you are clever.</p>
<p>Also your <code>hp_values</code> should probably be <code>range(0, 101)</code> ie 100 is a possible value?</p>
<p>Something like</p>
<pre><code>from datetime import date, timedelta
import numpy as np

YEAR = 2015
# using datetime.strftime format codes
INDEX_FILE = "/Trunk/%YHailIndx/HailIndx%Y%m%dL0S_CONUS.nc"
PROB_FILE  = "/Trunk/%Y/aerHailProb%Y%m%d.nc"

def date_range(start_date, end_date, step=timedelta(1)):
    day = start_date
    while day &lt; end_date:
        yield day
        day += step

def main():
    start = date(YEAR,     1, 1)
    end   = date(YEAR + 1, 1, 1)
    for day in date_range(start, end):
        # load index file
        try:
            index_file = day.strftime(INDEX_FILE)
            index_data = net.Dataset(index_file)
        except RuntimeError as re:
            print(re)
            print("Failed to load index file:", index_file)
            continue                
        # load probability file
        try:
            prob_file = day.strftime(PROB_FILE)
            prob_data = net.Dataset(prob_file)
        except RuntimeError as re:
            print(re)
            print("Failed to load probability file:", prob_file)
            continue                
        # start calculating
        index = np.array(index_data.variables['HailIndx'])
        prob  = np.array(prob_data .variables['HailProb'])
        #
        # Here I started to get a bit lost trying to follow what
        # you are doing; a sample index file and probability file
        # would probably help in debugging, as would a better
        # description of exactly what you are trying to do to
        # the numbers ;-)
        #

if __name__ == "__main__":
    main()
</code></pre>
</div>
<span class="comment-copy">Is it slow because of the loop or because of what you're doing inside of the loop?</span>
<span class="comment-copy">itertools.product will provide no speedup... just fyi</span>
<span class="comment-copy">You are right, just tried, it is the same .....   :(</span>
<span class="comment-copy">its slow because of what you do with the month/day ... iterating this is almost instant</span>
<span class="comment-copy">What are you trying to do with months and days to say it's too slow?</span>
<span class="comment-copy">this isnt going to give him a speedup ... and worse its much less legible and clear what hes doing (even if it is what OP asked for :P)</span>
