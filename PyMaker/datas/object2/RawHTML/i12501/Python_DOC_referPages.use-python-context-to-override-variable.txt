<div class="post-text" itemprop="text">
<p>I'm pretty sure I've seen this, but I can't get the syntax right.  I want to override a module "constant" during testing.  I can write the code like this:</p>
<pre><code>import mymodule

try:
   hold = mymodule.FOO
   mymodule.FOO = 'test value'
   do_something()
finally:
   mymodule.FOO = hold
</code></pre>
<p>it seems to me that there should be a way to do this with a "with" statement, something like:</p>
<pre><code>with mymodule.FOO = 'test value':
    do_something()
</code></pre>
<p>Is my mind deceiving me?  Is there a simple syntax to do what I want?</p>
</div>
<div class="post-text" itemprop="text">
<p>Sounds like you want <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch"><code>unittest.mock.patch</code></a>:</p>
<pre><code>from unittest.mock import patch

with patch('mymodule.Foo', 'test value'):
    do_whatever()
</code></pre>
<p>If you're on a Python version prior to 3.3, <code>unittest.mock</code> doesn't exist, but there's a <a href="https://pypi.python.org/pypi/mock">backport</a> available on PyPI. You could also write your own context manager to do this. However, there is nothing to do this built into the syntax.</p>
</div>
<div class="post-text" itemprop="text">
<p>Generally this is called monkeypatching.</p>
<p><code>unittest.mock</code> provides helper methods for this (as seen in another answer), but outside of the Python stdlib, I'd recommend looking at <a href="https://pytest.org/latest/monkeypatch.html" rel="nofollow"><code>py.test</code>'s monkeypatching fixture</a>:</p>
<pre><code>def test_foo(monkeypatch):
    monkeypatch.setattr('mymodule.FOO', 'test value')
    # more code here
    # ...

    # the monkeypatch is automatically reverted at the end of the test
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/1369526/what-is-the-python-keyword-with-used-for">What is the python keyword "with" used for?</a></span>
<span class="comment-copy">I know, not "duplicate", but the assignment operator of <code>=</code> for the variable definition you want does not know how to reassign the constant after it is finished</span>
