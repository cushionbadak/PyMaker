<div class="post-text" itemprop="text">
<p>I have a relatively simple class which just changes the values of variables depending on the state.</p>
<pre><code>class SetStates:

    def LM_State1():
        global p_LM1, p_LM2, p_LM3, p_RR1, p_RR2, p_RR3, p_RF1, p_RF2, p_RF3
        p_LM1 = Ra_L*P_j1_s1
        p_LM2 = P_j2_s1
        p_LM3 = P_j3_s1
        p_RR1 = Ra_R*(-1)*P_j1_s1
        p_RR2 = (-1)*P_j2_s1
        p_RR3 = (-1)*P_j3_s1
        p_RF1 = Ra_R*(-1)*P_j1_s1
        p_RF2 = (-1)*P_j2_s1
        p_RF3 = (-1)*P_j3_s1
</code></pre>
<p>Initially I was calling the function within the class like so:</p>
<pre><code> if LM_state == 1:
    SetStates.LM_State1()
</code></pre>
<p>After realizing I need to initialize it now looks like this.</p>
<pre><code>s=SetStates()

if LM_state == 1:
       s.LM_State1()
</code></pre>
<p>But am now receiving an error specifying that it has been given 1 argument but expected 0. I am almost certain I am missing something very trivial. If someone could clear this up it would be great, thanks </p>
</div>
<div class="post-text" itemprop="text">
<p>Class methods (that is to say: any <code>def</code> block defined inside a class definition) automatically get passed the instance caller as their first argument (unless it's defined as a <a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="nofollow"><code>staticmethod</code></a> but let's not muddy the waters). Since your function definition for <code>LM_State1()</code> doesn't include <strong><em>any</em></strong> arguments, Python complains that you gave it an argument (<code>s</code>) that it doesn't know what to do with.</p>
<p>As @BrenBarn mentions in the comments, your class doesn't make a whole lot of sense from a design perspective if it's just modifying global state, but that's the reason for the error anyway. If you really need this (hint: <em>you don't</em>) you should consider wrapping it in a module, importing the module, and defining all your <code>set_state</code> functions at the top-level of that module.</p>
<pre><code># stateful.py

def set_state_1():
    ...
</code></pre>
<p>Â </p>
<pre><code># main.py

import stateful

stateful.set_state_1()  # set the state!
</code></pre>
</div>
<span class="comment-copy">You don't have a <code>self</code> argument for your method.  But your method is also strange because all it does is modify a bunch of global variables.  There isn't much point to having a class for that.</span>
<span class="comment-copy">Are you coming from Java? You don't need to wrap everything in a class in Python. If you need to do a thing, you can just write a <code>do_thing()</code> function instead of <code>ThingDoer().do_it()</code>.</span>
<span class="comment-copy">Yeah I am coming from Java but that makes more sense</span>
<span class="comment-copy">Thanks, I'm new to python so just merely trying to experiment to be honest :) thanks</span>
<span class="comment-copy">no problem with experimenting! Classes are created to keep state and their methods are there to work within the context of that state. If your class's only job is to modify some other <i>global</i> state, then it should just be a set of top level functions instead.</span>
