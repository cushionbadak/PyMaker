<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/collections.html#collections-abstract-base-classes" rel="nofollow">This list</a> shows what methods you need to implement for your class to be "regarded" as Sequence: <code>__getitem__</code>, <code>__len__</code>, <code>__contains__</code>, <code>__iter__</code>, <code>__reversed__</code>, <code>index</code>, and <code>count</code>. So why does this minimal implementation does not work, i.e. why <code>issubclass(S, Sequence) is False</code>?</p>
<pre><code>from collections import *


class S(object):
    def __getitem__(self, item):
        raise IndexError

    def __len__(self):
        return 0

    def __contains__(self, item):
        return False

    def __iter__(self):
        return iter(())

    def __reversed__(self):
        return self

    def index(self, item):
        raise IndexError

    def count(self, item):
        return 0


issubclass(S, Iterable)   # True  :-)
issubclass(S, Sized)      # True  :-)
issubclass(S, Container)  # True  :-)
issubclass(S, Sequence)   # False :-(
</code></pre>
<p>Is there an additional method I need to implement that I overlooked? Did I misunderstand abstract base classes? Subclassing <code>Sequence</code> makes <code>issubclass</code> return <code>True</code> of course, but that kinda defeats the idea behind abc, doesn't it?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://hg.python.org/cpython/file/2.7/Lib/_abcoll.py" rel="noreferrer"><em>Use the source, Luke!</em></a></p>
<p><code>Sequence</code> does not implement its own <code>__subclasshook__</code>, and all the implementations of <code>__subclasshook__</code> from the parents of <code>Sequence</code> have checks like this:</p>
<pre><code>class Iterable:
    ...

    @classmethod
    def __subclasshook__(cls, C):
        if cls is Iterable:  # &lt;&lt;&lt;&lt;
            if _hasattr(C, "__iter__"):
                return True
        return NotImplemented
</code></pre>
<p>You can however explicitly <a href="https://docs.python.org/3/library/abc.html#abc.ABCMeta.register" rel="noreferrer"><code>register()</code></a> your class as a <code>Sequence</code>:</p>
<pre><code>Sequence.register(S)
</code></pre>
<p>As for the reason why <code>Sequence</code> does not implement <code>__subclasshook__</code>, see <a href="http://bugs.python.org/issue16728" rel="noreferrer">issue 16728</a> (which title was initially <em>"collections.abc.Sequence shoud provide __subclasshook__"</em>). The issue can be summarized by saying that a sequence can be many things, depending on the needs of who uses it:</p>
<blockquote>
<p>Many algorithms that require a sequence only need <code>__len__</code> and <code>__getitem__</code>. [...] <code>collections.abc.Sequence</code> is a much richer interface.</p>
</blockquote>
</div>
<span class="comment-copy">Just because a class implements the sequence interface does not make it a subclass of Sequence.</span>
<span class="comment-copy">I think OP already knows that. See <a href="https://docs.python.org/2/library/abc.html#module-abc" rel="nofollow noreferrer">abc</a>.</span>
<span class="comment-copy">To me there seems to be a disconnect here between what's colloquially considered a sequence in Python (<code>__len__</code> and <code>__getitem__</code> with ints) and what's formally considered a Sequence by the language (per <code>insinstance</code>). As it stands, you cannot look at an object's methods and decide whether it is formally considered a sequence, which is weird to me.</span>
<span class="comment-copy">In other words collections.Sequence is pointless (/incomplete) unless used as a mixin?</span>
<span class="comment-copy">@Kay: it give you the features of many other abstract base classes: you get an exception if you try to inherit without defining all the required methods, and you can explicit <code>register()</code> arbitrary subclasses</span>
<span class="comment-copy">Hm, seems like an blatant oversight by the Python hackers to my to be honest. Do you know a reason why <code>Sequence.__subclasshook__</code> is not implemented?</span>
<span class="comment-copy">@Kay: <code>__subclasshook__</code> is a bit pointless. Example: having an attribute <code>__iter__</code> does not imply that an instance has correctly implemented an iterable.</span>
<span class="comment-copy">Thank you! Now I understand the problem.</span>
