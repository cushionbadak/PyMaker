<div class="post-text" itemprop="text">
<p>Here is a program I wrote when I was first learning python a few weeks ago that simply solves the quadratic formula, checks if the solutions are extraneous, and finds a few key features of the quadratic graph including vertex, Line of symmetry, and I even got it to factor the radicals. This is all fine and dandy but it only worked in the console.</p>
<p>When I began bringing it to the flask application and modifying it to accept user input it would only work with numbers that worked out to be perfect and not decimals. Such as A=1 B=4 C=4. Whenever something like A=2 b=1 C=4 is entered, it gives me this: HTTP 405 Error. </p>
<p>main.py:</p>
<pre><code>from flask import Flask, render_template, request
import math

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def quadratic():
    if request.method == 'POST':
        a = float(request.form['a'])
        b = float(request.form['b'])
        c = float(request.form['c'])
        outside = b * -1
        bsquared = b ** 2
        four_a_c = 4 * a * c
        discriminant = bsquared - four_a_c
        bottom = 2 * a
        discriminant_sqrt = math.sqrt(discriminant)
        top = outside + discriminant_sqrt
        top2 = outside - discriminant_sqrt
        root = top/bottom
        root2 = top2/bottom
        equation = a * root ** 2 + b * root + c
        equation2 = a * root2 ** 2 + b * root + c
        if equation &lt; 1 and equation &gt; -1:
            Ex = "Not Extraneous"
        else:
            Ex = "Extraneous"
        if equation2 &lt; 1 and equation2 &gt; -1:
            Ex2 = "Not Extraneous"
        else:
            Ex2 = "Extraneous"

        return render_template('form.html', discriminant=discriminant, a=a, b=b, c=c, outside=outside, bsquared=bsquared, bottom=bottom, root=root, root2=root2, ex=Ex, ex2=Ex2)

    if request.method == 'GET':
        return render_template('form.html')

if __name__ == '__main__':
    app.run()
</code></pre>
<p>form.html:</p>
<pre><code>&lt;html&gt;
&lt;body&gt;

&lt;form method="POST" action="."&gt;
  A &lt;input id="post_form_id" name="a" value="" /&gt;
    B&lt;input id ="post_form_id" name="b" value="" /&gt;
    C &lt;input id ="post_form_id" name="c" value="" /&gt;
   &lt;input type="submit" /&gt;
&lt;/form&gt;
    &lt;br /&gt;
    {% if a %}
    A: {{ a }} &lt;br /&gt;
    B: {{ b }} &lt;br /&gt;
    C: {{ c }} &lt;br /&gt;
    Roots: &lt;br /&gt;

    {{ outside }} + √{{ discriminant }} &lt;br/&gt;
    --------- &lt;br/&gt;
       {{ bottom }}&lt;br/&gt;

    {{ outside }} - √{{ discriminant }} &lt;br/&gt;
    --------- &lt;br/&gt;
       {{ bottom }}&lt;br/&gt;

    Approxomated Roots: &lt;br/&gt;
    {{ root }} &lt;br/&gt;
    {{ ex }}   &lt;br/&gt;
    {{ root2}} &lt;br/&gt;
    {{ ex2 }}  &lt;br/&gt;

    {% endif %}
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your form's <code>action</code> attribute should be <code>/</code> and not <code>.</code>. If this is just a single-page Flask application, you could even remove the <code>action</code> attribute altogether to <code>POST</code> to the same URL that the form came from.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you receive HTTP status error codes, the best thing to do is to run your application in debug mode. Since you are hopefully running your application behind a WSGI server, the simplest way to do that is to change your last line to</p>
<pre><code>app.run(debug=True)
</code></pre>
<p>Once you do this, you will see the actual error. In this case, it's</p>
<pre><code># snip
    discriminant_sqrt = math.sqrt(discriminant)
ValueError: math domain error
</code></pre>
<p>Using the interactive debugger, we can check why.</p>
<pre><code>&gt;&gt;&gt; discriminant
-31
</code></pre>
<p>That's the root of your problem. According to the <a href="https://docs.python.org/3/library/math.html" rel="nofollow">documentation for the <code>math</code> module</a> (bolding added for emphasis):</p>
<blockquote>
<p>CPython implementation detail: The math module consists mostly of thin wrappers around the platform C math library functions. Behavior in exceptional cases follows Annex F of the C99 standard where appropriate. <strong>The current implementation will raise ValueError for invalid operations like sqrt(-1.0)</strong> or log(0.0) (where C99 Annex F recommends signaling invalid operation or divide-by-zero), and OverflowError for results that overflow (for example, exp(1000.0)).</p>
</blockquote>
<p><code>math.sqrt(a_negative_number)</code> will raise a <code>ValueError</code>. Your given input don't have a solution (or have a complex solution, depending on how you look at it). The best thing you can do is check for this case and present better feedback to the user.</p>
<pre><code>try:
    discriminant_sqrt = math.sqrt(discriminant)
except ValueError:
    flash('There is no solution for the given inputs.', 'error')
else
    # continue with calculations
</code></pre>
</div>
<span class="comment-copy">Please don't put up a wall of code that isn't necessary. Please see <a href="http://stackoverflow.com/help/mcve">this section</a> in the help.</span>
<span class="comment-copy">So I did that but I have a whole lot more errors. <a href="http://pastebin.com/R3q5iLmu" rel="nofollow noreferrer">pastebin.com/R3q5iLmu</a></span>
<span class="comment-copy">That error doesn't match the code in the question. Views need to return something response-like, which <code>quadraric</code> does.</span>
