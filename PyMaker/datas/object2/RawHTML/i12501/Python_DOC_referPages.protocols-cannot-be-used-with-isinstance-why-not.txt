<div class="post-text" itemprop="text">
<p>The new <code>typing</code> module contains several objects with names like "SupportsInt" (-Float, -Bytes, etc.). The name, and the descriptions on <a href="https://docs.python.org/3/library/typing.html">the documentation page for the module</a>, might be read to suggest that you can test whether an object is of a type that "supports <code>__int__()</code>". But if you try to use <code>isinstance()</code>, it gives a response that makes it clear that that isn't something you are meant to do:</p>
<pre><code>&gt;&gt;&gt; isinstance(5, typing.SupportsInt)
(Traceback omitted)
TypeError: Protocols cannot be used with isinstance().
</code></pre>
<p>On the other hand, you can use <code>issubclass()</code>:</p>
<pre><code>&gt;&gt;&gt; issubclass((5).__class__, typing.SupportsInt)
True
&gt;&gt;&gt; issubclass(type(5), typing.SupportsInt)
True
</code></pre>
<p>What is a "protocol" in this context? Why does it disallow the use of <code>isinstance()</code> in this way?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is all of the reasoning given in <code>PEP 484</code>, the PEP for the <code>typing</code> module:</p>
<blockquote>
<p>Because typing.Callable does double-duty as a replacement for collections.abc.Callable , isinstance(x, typing.Callable) is implemented by deferring to `isinstance(x, collections.abc.Callable) . However, isinstance(x, typing.Callable[...]) is not supported.</p>
</blockquote>
<p>A protocol is also known as a <code>magic method</code>. These are most of the python protocols (full list <a href="https://docs.python.org/3/reference/datamodel.html#specialnames" rel="nofollow noreferrer">here</a>):</p>
<pre><code>&gt;&gt;&gt; dir(object)
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__',
'__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', 
'__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', 
'__setattr__', '__sizeof__', '__str__', '__subclasshook__']
</code></pre>
<p>I have not found any clear reason for why <code>typing</code> does not support <code>isinstance</code>. The reason that <code>issubclass</code> works is that <code>isinstance</code> uses the <code>__class_</code> protocol which is not allowed in <code>typing</code>, while <code>issubclass</code> uses the <code>__subclasshook__</code> protocol which is allowed. I believe the reason is that the functionality was already coded in <code>collections.abc.Callable</code> and they did not want to recode it in the <code>typing</code> module.</p>
</div>
<div class="post-text" itemprop="text">
<p>As the documentation says: <code>At runtime, isinstance(x, T) will raise TypeError. In general, isinstance() and issubclass() should not be used with types.</code> ( <a href="https://docs.python.org/3/library/typing.html?highlight=typing#typing.TypeVar" rel="nofollow noreferrer">https://docs.python.org/3/library/typing.html?highlight=typing#typing.TypeVar</a> )</p>
</div>
<span class="comment-copy">The purpose of the <code>typing</code> module is <b>not</b> to provide a way to perform those checks. It's meant to provide a common way to provide the types of functions etc. in their annotations. Duck-typing is still preferred, you can use those types to tell your user how the function is intended to be called.</span>
<span class="comment-copy">@Bakuriu, but the typing module is provided in part to allow static type-checking, and so it is reasonable to suppose that it will provide the machinery for identifying (say) whether a particular object is of a particular type. If I invoke a function passing 5 as a parameter that is annotated as being of type typing.SupportsInt, then how will a static type checker know that this is valid?</span>
<span class="comment-copy">This is a description of what happens. The question asks why this is the behaviour. You have answered a different question to the one that was asked.</span>
