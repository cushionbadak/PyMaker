<div class="post-text" itemprop="text">
<p>I would like to derive from dict and overwrite the method missing. I would like to do some stuff and then still call its super function. Something like this:</p>
<pre><code>class Foo(dict):
    def __missing__(self, key):
        print('missing {}'.format(key))
        return super().__missing__(key)
</code></pre>
<p>Which however produces: </p>
<pre><code>AttributeError: 'super' object has no attribute '__missing__'
</code></pre>
<p>Of course I could still make a working program using:</p>
<pre><code>raise KeyError(key)
</code></pre>
<p>But I would much rather call the super function. Because code could (or maybe at a future version of python will be) executed in <code>super().__missing__</code> other than raising the KeyError.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no <code>dict.__missing__</code>; just drop the call to <code>super().__missing__</code> (and raise a <code>KeyError</code>). The method is <em>optional</em> and has no default implementation.</p>
<p>Alternatively, if you want to support multiple inheritance properly, you could catch the <code>AttributeError</code> exception:</p>
<pre><code>class Foo(dict):
    def __missing__(self, key):
        print('missing {}'.format(key))
        try:
            return super().__missing__(key)
        except AttributeError:
            raise KeyError(key)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>subclass from <code>collections.defaultdict</code> which already features a <strong>missing</strong> method.</p>
<p><a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow">https://docs.python.org/3/library/collections.html#collections.defaultdict</a></p>
<blockquote>
<h1><code>__missing__</code>(<em>key</em>)</h1>
<p><strong>If the <code>default_factory</code> attribute is <code>None</code>, this raises a <code>KeyError</code> exception with the <em>key</em> as argument.</strong></p>
<p>If default_factory is not <code>None</code>, it is called without arguments to
  provide a default value for the given <em>key</em>, this value is inserted in
  the dictionary for the <em>key</em>, and returned.</p>
<p>If calling <code>default_factory</code> raises an exception this exception is
  propagated unchanged.</p>
<p>This method is called by the <code>__getitem__()</code> method of the dict class
  when the requested <em>key</em> is not found; whatever it returns or raises is
  then returned or raised by <code>__getitem__()</code>.</p>
<p>Note that <code>__missing__()</code> is <em>not</em> called for any operations besides
  <code>__getitem__()</code>. This means that <code>get()</code> will, like normal dictionaries, return <code>None</code> as a default rather than using <code>default_factory</code>.</p>
</blockquote>
</div>
<span class="comment-copy">There's no <code>dict.__missing__</code> method; if you supply a <code>__missing__</code> for your dict subclass, you're supposed to return a value or raise an error on your own instead of trying to delegate it back to <code>dict</code>.</span>
<span class="comment-copy">Dropping the super call on its own wouldn't be enough, since then you'd get <code>None</code> for all missing keys.</span>
<span class="comment-copy">@user2357112: the idea being that you raise <code>KeyError</code> instead, I'll clarify.</span>
<span class="comment-copy">Sorry Martin, wrong tree. I wish I also got a comment (or 2 now). The answer may not be spot on like yours, but imho it could also be an alternative for the OP. On Saturday someone had a 6 line rant against an answer of mine because it was selected as the answer and he also downvoted it ...</span>
<span class="comment-copy">Thank you for the answer. I guess your right and this is just a language construct I have to live with. I'll accept your answer.</span>
<span class="comment-copy">@mementum: glad my suspicion was unfounded! :-) It happens, people get rather too attached to their points sometimes.</span>
<span class="comment-copy">Thank you for answering. But I would actually much rather subclass from <code>dict</code>.</span>
<span class="comment-copy">Always your choice, just wanted to offer an alternative</span>
