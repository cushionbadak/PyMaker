<div class="post-text" itemprop="text">
<pre><code>try:
    guess = str(int(input("Please enter your guess: ")))
    assert len(guess) == 4
except ValueError or AssertionError:
    print("Please enter a 4 digit number as your guess not a word or a different digit number. ")
</code></pre>
<p>Assertion Error Received when I type a number that is not 4 digits.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>except ValueError or AssertionError:</code> should be <code>except (ValueError, AssertionError):</code></p>
<p>When you do <code>or</code> you are not catching the exception <code>AssertionError</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Let's analyze a code structure. I've added parenthesis to denote how Python 
interpreter groups statements.</p>
<pre><code>try:
    do_something()
except (ValueError or AssertionError):
    handle_error()
</code></pre>
<p>Let's check what happens to definition of exception to catch. Quoting <a href="https://docs.python.org/2/reference/expressions.html?highlight=conditional#boolean-operations" rel="nofollow">official docs</a>:</p>
<blockquote>
<p>The expression <code>x or y</code> first evaluates <code>x</code>; if <code>x</code> is true, its value is returned; otherwise, <code>y</code> is evaluated and the resulting value is returned.</p>
</blockquote>
<p>"If <code>x</code> is true" actually refers to <code>x</code> being true in boolean context (value of <code>x.</code><a href="https://docs.python.org/2/reference/datamodel.html#object.__nonzero__" rel="nofollow"><code>__nonzero__</code></a><code>()</code> in Python 2, <code>x.</code><a href="https://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="nofollow"><code>__bool__</code></a><code>()</code> in Python 3). All objects (including classes) are implicitly truthy, unless implemented otherwise.</p>
<pre><code># No exception is raised in either case
assert ValueError
assert AssertionError
# both values after conversion are True
assert bool(ValueError) is True
assert bool(AssertionError) is True
</code></pre>
<p>After taking in consideration boolean context of classes and quoted docs about boolean operations, we may safely asssume that <code>(ValueError or AssertionError)</code> evaluates to <code>ValueError</code>.</p>
<p>To catch multiple exception you need to put them in tuple:</p>
<pre><code>try:
    do_something()
except (ValueError, AssertionError):
    handle_error()
</code></pre>
</div>
