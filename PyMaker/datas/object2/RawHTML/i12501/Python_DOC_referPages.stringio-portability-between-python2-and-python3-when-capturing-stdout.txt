<div class="post-text" itemprop="text">
<p>I have written a python package which I have managed to make fully compatible with both python 2.7 and python 3.4, with one exception that is stumping me so far. The package includes a command line script, and in my unit tests I use this code to run the script's main routine while overriding sys.argv to pass command line arguments for argparse, and capturing the script's stdout for comparison:</p>
<pre><code>@contextlib.contextmanager
def runmain(mainfunction, arglist):
    """Run mainfunction with arglist in sys.srgv, and capture stdout."""

    origargv, sys.argv   = sys.argv,   arglist
    origout,  sys.stdout = sys.stdout, io.StringIO()

    rtn = mainfunction()

    sys.stdout.seek(0)
    yield (rtn, sys.stdout.read())

    sys.stdout = origout
    sys.argv   = origargv

class test_imdutil_main(unittest.TestCase):

    def test_help(self):
        """Test -h option."""

        with runmain(imdutil_main, ['imdutil.py', '-h']) as (rtn, capture):
            # do stuff with rtn and capture...
</code></pre>
<p>This works well in python 3.4, but in python 2.7 it generates an error:</p>
<pre><code>TypeError: unicode argument expected, got 'str'
</code></pre>
<p>I haven't managed to figure out a way to capture stdout from arbitrary functions which is portable between python 2.7 and python 3.4.</p>
<p>As an aside, I have to admit that I don't understand decorations, context managers or the "yield" keyword very well at all. The inspiration for my runmain() function came from:</p>
<p><a href="http://schinckel.net/2013/04/15/capture-and-test-sys.stdout-sys.stderr-in-unittest.testcase/" rel="nofollow">http://schinckel.net/2013/04/15/capture-and-test-sys.stdout-sys.stderr-in-unittest.testcase/</a></p>
<p>Incidentally, my complete package where this code comes from is here:</p>
<p><a href="https://github.com/NF6X/pyImageDisk" rel="nofollow">https://github.com/NF6X/pyImageDisk</a></p>
<p>At the moment, its unit tests are partially broken under python 2.7 because of this issue. Can anybody help me figure out how to solve this stdout redirection problem in a portable, pythonic manner, preferably without adding any more external dependencies?</p>
</div>
<div class="post-text" itemprop="text">
<p>You replaced the Python 2 bytes-only <code>sys.stdout</code> with one that only takes Unicode. You'll have to adjust your strategy on the Python version here, and use a different object:</p>
<pre><code>try:
    # Python 2
    from cStringIO import StringIO
except ImportError:
    # Python 3
    from io import StringIO
</code></pre>
<p>and remove the <code>io.</code> prefix in your context manager:</p>
<pre><code>origout,  sys.stdout = sys.stdout, StringIO()
</code></pre>
<p>The <code>cStringIO.StringIO</code> object is the Python 2 equivalent of <code>io.BytesIO</code>; it requires that you write plain bytestrings, not a<code>unicode</code> objects.</p>
<p>You can also use <code>io.BytesIO</code> in Python 2, but then you want to test if <code>sys.stdout</code> is a <a href="https://docs.python.org/3/library/io.html#io.TextIOBase" rel="nofollow noreferrer"><code>io.TextIOBase</code> subclass</a>; if it is not, replace the object with a binary <code>BytesIO</code>, object, otherwise use a <code>StringIO</code> object:</p>
<pre><code>import io

if isinstance(sys.stdout, io.TextIOBase):
    # Python 3
    origout, sys.stdout = sys.stdout, io.StringIO()
else:
    # Python 2 or an unorthodox binary stdout setup
    origout, sys.stdout = sys.stdout, io.BytesIO()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Have your tried? (Can be left in your code under Python 3.x)</p>
<pre><code>from __future__ import unicode_literals
</code></pre>
<p>Else what I have in my code to make it compatible when using <code>io.StringIO</code>:</p>
<pre><code>f = io.StringIO(datafile.read().decode('utf-8'), newline=None)
</code></pre>
<p>Looking at your code then:</p>
<pre><code>yield (rtn, sys.stdout.read())
</code></pre>
<p>Could be changed to:</p>
<pre><code>yield (rtn, sys.stdout.read().decode('utf-8'))
</code></pre>
</div>
<span class="comment-copy">As a little aside here, I'm pretty sure one could drop the <code>origout</code> and use the <code>sys.__stdout__</code> default backup which is also present in both Pythons.</span>
<span class="comment-copy">Thanks, that fixed it! Next, I found that python 2.7 doesn't include unittest.assertRegex(), while unittest.assertRegexpMatches() generates a deprecation warning in 3.4. Getting closer...</span>
<span class="comment-copy">@Jim no, because that'd ignored any previous stdout capturing.</span>
<span class="comment-copy">I tried that based on your suggestion, but it did not change the behavior under 2.7. But thank you for a very prompt reply anyway!</span>
<span class="comment-copy">See edit with <code>decode('utf-8')</code></span>
<span class="comment-copy">At issue is that in Python 2 <code>sys.stdout</code> <i>must</i> be a an object that accepts <code>str</code> (bytes), not <code>unicode</code>.</span>
