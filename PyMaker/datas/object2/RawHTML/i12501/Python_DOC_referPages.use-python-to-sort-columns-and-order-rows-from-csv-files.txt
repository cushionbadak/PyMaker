<div class="post-text" itemprop="text">
<p>I am currently on Python 3.4.1, but I don't have access to any modules like Pandas or Numpy on my work pc.</p>
<p>I originally wrote a VBA program in excel where the original data is on Sheet1, the new data in on Sheet2, and the difference between the two sheets is on Sheet3. My program did the following three things:</p>
<ol>
<li>Sort the data based upon the values in the first column (they can be integers or alphanumeric).</li>
<li>Sequentially order the horizontal rows so the items in the first columns match each other; if they don't match then an extra blank row is added so the rows align with each other.</li>
<li>Create a new result tab and compare the rows. If anything is different between them then it copies over the entire row information from the original CSV file.</li>
</ol>
<p>Since it was excruciatingly slow, I decided to try and learn Python. In Python I'm able to compare the data but am now wanting to be able to sort the columns and order the rows.</p>
<p>For example:<br/>
Original CSV #1<br/>
Column1,Column2,Column3,Column4,Column5<br/>
1,b1,c11111,d1,e1<br/>
2,b2,c2,d2,e2<br/>
5,b5,c5,d5,e5,<br/>
25,b25,c25,d2555,e25<br/>
7,b7,c7,d7,e7<br/></p>
<p>Original CSV #2<br/>
Column1,Column2,Column3,Column4,Column5<br/>
2,b2,c2,d2,e2<br/>
1,b1,c1,d1,e1<br/>
3,b3,c3,d3,e3<br/>
7,b7,c7,d7,e777<br/>
25,b25,c25,d25,e25<br/></p>
<p>Since the values in Row 2 are the same in both files, that data is not copied into the results for either file.</p>
<p>Results CSV #1<br/>
Column1,Column2,Column3,Column4,Column5<br/>
1,b1,c11111,d1,e1<br/>
<br/>
5,b5,c5,d5,e5<br/>
7,b7,c7,d7,e7<br/>
25,b25,c25,d2555,e25<br/></p>
<p>Results CSV #2<br/>
Column1,Column2,Column3,Column4,Column5<br/>
1, b1,c1,d1,e1<br/>
3,b3,c3,d3,e3<br/>
<br/>
7,b7,c7,d7,e777<br/>
25,b25,c25,d25,e25<br/></p>
<p>With the code below, I can accomplish step #3.</p>
<pre><code> strpath = 'C://Users//User//Desktop//compare//'
 strFileNameA = 'File1'
 strFileNameB = 'File2'

 testfile1 = open(strpath + strFileNameA + '.csv', 'r')
 testfile2 = open(strpath + strFileNameB + '.csv', 'r')

 testresult1 = open(strpath + strFileNameA + '-Results' + '.csv', 'w')
 testresult2 = open(strpath + strFileNameB + '-Results' + '.csv', 'w')

 testlist1 = testfile1.readlines()
 testlist2 = testfile2.readlines()

 k=1
 z=0


 for i,j in zip(testlist1,testlist2):
     if k==1:
         testresult1.write(i.rstrip('\n') + ('n'))
     if i!=j:
         testresult1.write(i.rstrip('\n') + ('n'))
         testresult2.write(j.rstrip('\n') + ('n'))
         z = z+1
     k =int(k)
     k = k+1

 if z ==0:
     testresult1.write('Exact match for ' + str(k) + ' rows')
     testresult1.write('Exact match for ' + str(k) + ' rows')

 testfile1.close()
 testfile2.close()                           
 testresult1.close()
 testresult2.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is an excellent exercise to introduce you to programming in Python.
There are many string functions that will make many data processing tasks much simpler.
You can check the docs for more string functions <a href="https://docs.python.org/3/library/string.html" rel="nofollow">https://docs.python.org/3/library/string.html</a>.</p>
<p>Firstly, I suggest using os.path.join() to create path strings.
Second, I recommend using the builtin method sorted() to sort the lines of the file. Note that you must be careful when you sort because sorting strings is not the same as sorting integers.</p>
<p>Step 1 uses the builtin sorted function to sort every line by column 1.
This is accomplished by passing a lambda function as the key parameter.
Since Python uses zero based indexing, the reference x[0] uses the first column.
So this particular lambda function simply returns the first column of each row.</p>
<p>Step 2 goes through all the rows of each file. If they both match, then they both get paired together.
Otherwise, a row is matched to a blank row.</p>
<pre><code>import os

strpath = '.'
strFileNameA = 'file1'
strFileNameB = 'file2'

testfile1 = open(os.path.join(strpath, '%s.csv'%(strFileNameA)), 'r')
testfile2 = open(os.path.join(strpath, '%s.csv'%(strFileNameB)), 'r')

testlist1 = testfile1.readlines()
testlist1 = [eachLine.rstrip("\n").split(",") for eachLine in testlist1]
testlist2 = testfile2.readlines()
testlist2 = [eachLine.rstrip("\n").split(",") for eachLine in testlist2]

#step 1
testlist1 = sorted(testlist1,key=lambda x: x[0])
testlist2 = sorted(testlist2,key=lambda x: x[0])

#step 2
def look_for_match(i,list1,j,list2):
    if i == len(list1):
        return i,j+1, ([],list2[j])
    elif j == len(list2):
        return i+1,j,(list1[i],[])
    elif list1[i][0] == list2[j][0]:
        return i+1, j+1,(list1[i],list2[j])
    elif list1[i][0] &lt; list2[j][0]:
        return i+1,j,(list1[i],[])
    else:
        return i,j+1, ([],list2[j])

matched_rows = []
i=0
j=0
while i&lt;len(testlist1) or j&lt;len(testlist2):
    i, j, matched_row = look_for_match(i,testlist1,j,testlist2)
    if matched_row[0] == [] or matched_row[1] == []:
        matched_rows.append(matched_row)


for row_file_1, row_file_2 in matched_rows:
    print(row_file_1, row_file_2)

for row_file_1, row_file_2 in matched_rows:
    print(row_file_1, row_file_2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd suggest either looking at namedtuple: <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow">https://docs.python.org/3/library/collections.html#collections.namedtuple</a></p>
<p>or sqlite:
<a href="https://docs.python.org/3/library/sqlite3.html#module-sqlite3" rel="nofollow">https://docs.python.org/3/library/sqlite3.html#module-sqlite3</a></p>
<p>Both are available in 3.4.1.</p>
<p>If these aren't suitable (i.e. they are relatively small model point files), you could use the built in set object to compare the two sets of data, and use set operations to filter:</p>
<pre><code>with open('csv1.csv','r') as csv_file1:
    header1 = next(csv_file1)   #skip header
    set1 = set(line for line in csv_file1)

with open('csv2.csv','r') as csv_file2:
    header2 = next(csv_file2)   #skip header
    set2 = set(line for line in csv_file2)

print((set1 - set2) |(set2 - set1))
</code></pre>
<p>Once you've finalised the set, you can convert it to a list, sort it, and write out.</p>
</div>
<span class="comment-copy">Take a close look for a pandas: <a href="http://pandas.pydata.org" rel="nofollow noreferrer">pandas.pydata.org</a></span>
<span class="comment-copy">I just wanted to say thanks! I've spent the better part of 3 hours going through it and trying learning some of the terms. Now if I can just figure out why "sorted" sorts items like 1, 100, 2, 2000, 3, 5.. instead of 1, 2, 3, 100, 2000. I've seen a lot of different topics on it, but am still trying to get it to implement.</span>
<span class="comment-copy">Ahh, thats is an annoying detail.It doing a string comparison using ascii values. You want to sort by integer values.</span>
<span class="comment-copy">I've tried several different methods to get only write the lines where there is no match; I don't want to search through 10,000 rows to find 3 mismatches...  Failure#1 - list1[i][0] == list2[j][0]: return i+1,j,([],[]) - this printed empty lines where both lines matched Failure#2 - I hoped I could add i=i+1 but that failed when appending the rows to the matched_rows Failure#3 - I tried a Try Continue around Failure#2, but that didn't write anything.  So far I've learned a lot about python and even more of ways of what not do :)</span>
<span class="comment-copy">I have edited the code to handle a large number of  mismatches</span>
