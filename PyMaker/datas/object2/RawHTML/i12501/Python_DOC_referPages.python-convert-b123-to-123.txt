<div class="post-text" itemprop="text">
<p>I'm using this code to get standard output from an external program:</p>
<pre><code>&gt;&gt;&gt; from subprocess import *
&gt;&gt;&gt; command_stdout = Popen(['ls', '-l'], stdout=PIPE).communicate()[0]
</code></pre>
<p>The communicate() method returns an array of bytes:</p>
<pre><code>&gt;&gt;&gt; command_stdout
b'total 0\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2\n'
</code></pre>
<p>However, I'd like to work with the output as a normal Python string. So that I could print it like this:</p>
<pre><code>&gt;&gt;&gt; print(command_stdout)
-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1
-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2
</code></pre>
<p>I thought that's what the <a href="http://docs.python.org/3.0/library/binascii.html?highlight=b2a#binascii.b2a_qp" rel="noreferrer">binascii.b2a_qp()</a> method is for, but when I tried it, I got the same byte array again:</p>
<pre><code>&gt;&gt;&gt; binascii.b2a_qp(command_stdout)
b'total 0\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2\n'
</code></pre>
<p>Does anybody know how to convert the bytes value back to string? I mean, using the "batteries" instead of doing it manually. And I'd like it to be ok with Python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to decode the bytes object to produce a string:</p>
<pre><code>&gt;&gt;&gt; b"abcde"
b'abcde'

# utf-8 is used here because it is a very common encoding, but you
# need to use the encoding your data is actually in.
&gt;&gt;&gt; b"abcde".decode("utf-8") 
'abcde'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this way is easy:</p>
<pre><code>bytes = [112, 52, 52]
"".join(map(chr, bytes))
&gt;&gt; p44
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to decode the byte string and turn it in to a character (unicode) string. </p>
<pre><code>b'hello'.decode(encoding)
</code></pre>
<p>or on Python 3</p>
<pre><code>str(b'hello', encoding)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't know the encoding, then to read binary input into string in Python 3 and Python 2 compatible way, use ancient MS-DOS <a href="https://en.wikipedia.org/wiki/Code_page_437" rel="noreferrer">cp437</a> encoding:</p>
<pre><code>PY3K = sys.version_info &gt;= (3, 0)

lines = []
for line in stream:
    if not PY3K:
        lines.append(line)
    else:
        lines.append(line.decode('cp437'))
</code></pre>
<p>Because encoding is unknown, expect non-English symbols to translate to characters of <code>cp437</code> (English chars are not translated, because they match in most single byte encodings and UTF-8).</p>
<p>Decoding arbitrary binary input to UTF-8 is unsafe, because you may get this:</p>
<pre><code>&gt;&gt;&gt; b'\x00\x01\xffsd'.decode('utf-8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 2: invalid
start byte
</code></pre>
<p>The same applies to <code>latin-1</code>, which was popular (default?) for Python 2. See the missing points in <a href="https://en.wikipedia.org/wiki/ISO/IEC_8859-1#Codepage_layout" rel="noreferrer">Codepage Layout</a> - it is where Python chokes with infamous <code>ordinal not in range</code>.</p>
<p><strong>UPDATE 20150604</strong>: There are rumors that Python 3 has <code>surrogateescape</code> error strategy for encoding stuff into binary data without data loss and crashes, but it needs conversion tests <code>[binary] -&gt; [str] -&gt; [binary]</code> to validate both performance and reliability.</p>
<p><strong>UPDATE 20170116</strong>: Thanks to comment by Nearoo - there is also a possibility to slash escape all unknown bytes with <code>backslashreplace</code> error handler. That works only for Python 3, so even with this workaround you will still get inconsistent output from different Python versions:</p>
<pre><code>PY3K = sys.version_info &gt;= (3, 0)

lines = []
for line in stream:
    if not PY3K:
        lines.append(line)
    else:
        lines.append(line.decode('utf-8', 'backslashreplace'))
</code></pre>
<p>See <a href="https://docs.python.org/3/howto/unicode.html#python-s-unicode-support" rel="noreferrer">https://docs.python.org/3/howto/unicode.html#python-s-unicode-support</a> for details.</p>
<p><strong>UPDATE 20170119</strong>: I decided to implement slash escaping decode that works for both Python 2 and Python 3. It should be slower that <code>cp437</code> solution, but it should produce <strong>identical results</strong> on every Python version.</p>
<pre><code># --- preparation

import codecs

def slashescape(err):
    """ codecs error handler. err is UnicodeDecode instance. return
    a tuple with a replacement for the unencodable part of the input
    and a position where encoding should continue"""
    #print err, dir(err), err.start, err.end, err.object[:err.start]
    thebyte = err.object[err.start:err.end]
    repl = u'\\x'+hex(ord(thebyte))[2:]
    return (repl, err.end)

codecs.register_error('slashescape', slashescape)

# --- processing

stream = [b'\x80abc']

lines = []
for line in stream:
    lines.append(line.decode('utf-8', 'slashescape'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="noreferrer">In Python 3</a>, the default encoding is <code>"utf-8"</code>, so you can use directly:</p>
<pre><code>b'hello'.decode()
</code></pre>
<p>which is equivalent to</p>
<pre><code>b'hello'.decode(encoding="utf-8")
</code></pre>
<p>On the other hand, <a href="https://docs.python.org/2.7/library/stdtypes.html#str.decode" rel="noreferrer">in Python 2</a>, encoding defaults to the default string encoding. Thus, you should use:</p>
<pre><code>b'hello'.decode(encoding)
</code></pre>
<p>where <code>encoding</code> is the encoding you want.</p>
<p><a href="https://docs.python.org/2.7/library/stdtypes.html#str.decode" rel="noreferrer"><strong>Note:</strong></a> support for keyword arguments was added in Python 2.7.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think what you actually want is this:</p>
<pre><code>&gt;&gt;&gt; from subprocess import *
&gt;&gt;&gt; command_stdout = Popen(['ls', '-l'], stdout=PIPE).communicate()[0]
&gt;&gt;&gt; command_text = command_stdout.decode(encoding='windows-1252')
</code></pre>
<p>Aaron's answer was correct, except that you need to know WHICH encoding to use. And I believe that Windows uses 'windows-1252'. It will only matter if you have some unusual (non-ascii) characters in your content, but then it will make a difference.</p>
<p>By the way, the fact that it DOES matter is the reason that Python moved to using two different types for binary and text data: it can't convert magically between them because it doesn't know the encoding unless you tell it! The only way YOU would know is to read the Windows documentation (or read it here).</p>
</div>
<div class="post-text" itemprop="text">
<p>Set universal_newlines to True, i.e.</p>
<pre><code>command_stdout = Popen(['ls', '-l'], stdout=PIPE, universal_newlines=True).communicate()[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While <a href="https://stackoverflow.com/a/33688948/1587329">@Aaron Maenpaa's answer</a> just works, a user <a href="https://stackoverflow.com/questions/33688837/urllib-for-python-3/33688948#comment55151210_33688948">recently asked</a></p>
<blockquote>
<p>Is there any more simply way? 'fhand.read().decode("ASCII")' [...] It's so long!</p>
</blockquote>
<p>You can use</p>
<pre><code>command_stdout.decode()
</code></pre>
<p><code>decode()</code> has a <a href="https://docs.python.org/3/library/stdtypes.html#bytes-and-bytearray-operations" rel="noreferrer">standard argument</a></p>
<blockquote>
<p><code>codecs.decode(obj, encoding='utf-8', errors='strict')</code></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>To interpret a byte sequence as a text, you have to know the
corresponding character encoding:</p>
<pre><code>unicode_text = bytestring.decode(character_encoding)
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; b'\xc2\xb5'.decode('utf-8')
'µ'
</code></pre>
<p><code>ls</code> command may produce output that can't be interpreted as text. File names
on Unix may be any sequence of bytes except slash <code>b'/'</code> and zero
<code>b'\0'</code>:</p>
<pre><code>&gt;&gt;&gt; open(bytes(range(0x100)).translate(None, b'\0/'), 'w').close()
</code></pre>
<p>Trying to decode such byte soup using utf-8 encoding raises <code>UnicodeDecodeError</code>.</p>
<p>It can be worse. The decoding may fail silently and produce <a href="https://en.wikipedia.org/wiki/Mojibake" rel="noreferrer">mojibake</a>
if you use a wrong incompatible encoding:</p>
<pre><code>&gt;&gt;&gt; '—'.encode('utf-8').decode('cp1252')
'â€”'
</code></pre>
<p>The data is corrupted but your program remains unaware that a failure
has occurred.</p>
<p>In general, what character encoding to use is not embedded in the byte sequence itself. You have to communicate this info out-of-band. Some outcomes are more likely than others and therefore <code>chardet</code> module exists that can <em>guess</em> the character encoding. A single Python script may use multiple character encodings in different places.</p>
<hr/>
<p><code>ls</code> output can be converted to a Python string using <code>os.fsdecode()</code>
function that succeeds even for <a href="https://www.python.org/dev/peps/pep-0383/" rel="noreferrer">undecodable
filenames</a> (it uses
<code>sys.getfilesystemencoding()</code> and <code>surrogateescape</code> error handler on
Unix):</p>
<pre><code>import os
import subprocess

output = os.fsdecode(subprocess.check_output('ls'))
</code></pre>
<p>To get the original bytes, you could use <code>os.fsencode()</code>.</p>
<p>If you pass <code>universal_newlines=True</code> parameter then <code>subprocess</code> uses
<code>locale.getpreferredencoding(False)</code> to decode bytes e.g., it can be
<code>cp1252</code> on Windows.</p>
<p>To decode the byte stream on-the-fly,
<a href="https://docs.python.org/3/library/io.html#io.TextIOWrapper" rel="noreferrer"><code>io.TextIOWrapper()</code></a>
could be used: <a href="https://stackoverflow.com/a/25945031/4279">example</a>.</p>
<p>Different commands may use different character encodings for their
output e.g., <code>dir</code> internal command (<code>cmd</code>) may use cp437. To decode its
output, you could pass the encoding explicitly (Python 3.6+):</p>
<pre><code>output = subprocess.check_output('dir', shell=True, encoding='cp437')
</code></pre>
<p>The filenames may differ from <code>os.listdir()</code> (which uses Windows
Unicode API) e.g., <code>'\xb6'</code> can be substituted with <code>'\x14'</code>—Python's
cp437 codec maps <code>b'\x14'</code> to control character U+0014 instead of
U+00B6 (¶). To support filenames with arbitrary Unicode characters, see  <a href="https://stackoverflow.com/q/33936074/4279">Decode poweshell output possibly containing non-ascii unicode characters into a python string</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Since this question is actually asking about <code>subprocess</code> output, you have a more direct approach available since <code>Popen</code> accepts an <a href="https://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="noreferrer"><em>encoding</em></a> keyword (in Python 3.6+):</p>
<pre><code>&gt;&gt;&gt; from subprocess import Popen, PIPE
&gt;&gt;&gt; text = Popen(['ls', '-l'], stdout=PIPE, encoding='utf-8').communicate()[0]
&gt;&gt;&gt; type(text)
str
&gt;&gt;&gt; print(text)
total 0
-rw-r--r-- 1 wim badger 0 May 31 12:45 some_file.txt
</code></pre>
<p>The general answer for other users is to <em>decode</em> bytes to text:</p>
<pre><code>&gt;&gt;&gt; b'abcde'.decode()
'abcde'
</code></pre>
<p>With no argument, <a href="https://docs.python.org/3/library/sys.html#sys.getdefaultencoding" rel="noreferrer"><code>sys.getdefaultencoding()</code></a> will be used.  If your data is not <code>sys.getdefaultencoding()</code>, then you must specify the encoding explicitly in the <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="noreferrer"><code>decode</code></a> call:</p>
<pre><code>&gt;&gt;&gt; b'caf\xe9'.decode('cp1250')
'café'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you should get the following by trying <code>decode()</code>:</p>
<p><code>AttributeError: 'str' object has no attribute 'decode'</code></p>
<p>You can also specify the encoding type straight in a cast:</p>
<pre><code>&gt;&gt;&gt; my_byte_str
b'Hello World'

&gt;&gt;&gt; str(my_byte_str, 'utf-8')
'Hello World'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I made a function to clean a list</p>
<pre><code>def cleanLists(self, lista):
    lista = [x.strip() for x in lista]
    lista = [x.replace('\n', '') for x in lista]
    lista = [x.replace('\b', '') for x in lista]
    lista = [x.encode('utf8') for x in lista]
    lista = [x.decode('utf8') for x in lista]

    return lista
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When working with data from Windows systems (with <code>\r\n</code> line endings), my answer is</p>
<pre><code>String = Bytes.decode("utf-8").replace("\r\n", "\n")
</code></pre>
<p>Why? Try this with a multiline Input.txt:</p>
<pre><code>Bytes = open("Input.txt", "rb").read()
String = Bytes.decode("utf-8")
open("Output.txt", "w").write(String)
</code></pre>
<p>All your line endings will be doubled (to <code>\r\r\n</code>), leading to extra empty lines. Python's text-read functions usually normalize line endings so that strings use only <code>\n</code>. If you receive binary data from a Windows system, Python does not have a chance to do that. Thus,</p>
<pre><code>Bytes = open("Input.txt", "rb").read()
String = Bytes.decode("utf-8").replace("\r\n", "\n")
open("Output.txt", "w").write(String)
</code></pre>
<p>will replicate your original file.</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3,this is a much safer and <em>Pythonic</em> approach to convert from <code>byte</code> to <code>string</code>:</p>
<pre><code>def byte_to_str(bytes_or_str):
    if isinstance(bytes_or_str, bytes): #check if its in bytes
        print(bytes_or_str.decode('utf-8'))
    else:
        print("Object not of byte type")

byte_to_str(b'total 0\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2\n')
</code></pre>
<p>Output:</p>
<pre><code>total 0
-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1
-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def toString(string):    
    try:
        return v.decode("utf-8")
    except ValueError:
        return string

b = b'97.080.500'
s = '97.080.500'
print(toString(b))
print(toString(s))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="http://docs.python.org/3/library/sys.html" rel="nofollow">http://docs.python.org/3/library/sys.html</a>,</p>
<p>To write or read binary data from/to the standard streams, use the underlying binary buffer. For example, to write bytes to stdout, use sys.stdout.buffer.write(b'abc').</p>
</div>
<span class="comment-copy">why doesn't <code>str(text_bytes)</code> work? This seems bizarre to me.</span>
<span class="comment-copy">@CharlieParker Because <code>str(text_bytes)</code> can't specify the encoding. Depending on what's in text_bytes, <code>text_bytes.decode('cp1250</code>)` might result in a very different string to <code>text_bytes.decode('utf-8')</code>.</span>
<span class="comment-copy">Using <code>"windows-1252"</code> is not reliable either (e.g., for other language versions of Windows), wouldn't it be best to use <code>sys.stdout.encoding</code>?</span>
<span class="comment-copy">Maybe this will help somebody further: Sometimes you use byte array for e.x. TCP communication. If you want to convert byte array to string cutting off trailing '\x00' characters the following answer is not enough. Use b'example\x00\x00'.decode('utf-8').strip('\x00') then.</span>
<span class="comment-copy">I've filled a bug about documenting it at <a href="http://bugs.python.org/issue17860" rel="nofollow noreferrer">bugs.python.org/issue17860</a> - feel free to propose a patch. If it is hard to contribute - comments how to improve that are welcome.</span>
<span class="comment-copy">In Python 2.7.6 doesn't handle <code>b"\x80\x02\x03".decode("utf-8")</code> -&gt; <code>UnicodeDecodeError: 'utf8' codec can't decode byte 0x80 in position 0: invalid start byte</code>.</span>
<span class="comment-copy">If the content is random binary values, the <code>utf-8</code> conversion is likely to fail.  Instead see @techtonik answer (below) <a href="http://stackoverflow.com/a/27527728/198536">stackoverflow.com/a/27527728/198536</a></span>
<span class="comment-copy">Thank you, your method worked for me when none other did. I had a non-encoded byte array that I needed turned into a string. Was trying to find a way to re-encode it so I could decode it into a string. This method works perfectly!</span>
<span class="comment-copy">@leetNightshade: yet it is terribly inefficient. If you have a byte array you only need to decode.</span>
<span class="comment-copy">@Martijn Pieters I just did a simple benchmark with these other answers, running multiple 10,000 runs <a href="http://stackoverflow.com/a/3646405/353094">stackoverflow.com/a/3646405/353094</a> And the above solution was actually much faster every single time.  For 10,000 runs in Python 2.7.7 it takes 8ms, versus the others at 12ms and 18ms.   Granted there could be some variation depending on input, Python version, etc.  Doesn't seem too slow to me.</span>
<span class="comment-copy">@Martijn Pieters Yes.  So with that point, this isn't the best answer for the body of the question that was asked.  And the title is misleading, isn't it?  He/she wants to convert a byte string to a regular string, not a byte array to a string.  This answer works okay for the title of the question that was asked.</span>
<span class="comment-copy">For python 3 this should be equivalent to <a href="https://stackoverflow.com/a/35219695/281545"><code>bytes([112, 52, 52])</code></a> - btw bytes is a bad name for a local variable exactly because it's a p3 builtin</span>
<span class="comment-copy">Note that the <code>str</code> function in Python 2 (at least 2.7.5 I'm running) doesn't support the second encoding parameter, so it's better to go with the <code>decode</code> method if you want your code to work on Python 2 and 3.</span>
<span class="comment-copy"><code>NameError: name 'encoding' is not defined</code></span>
<span class="comment-copy">@HarshaBiyani you should use an encoding from <a href="https://docs.python.org/2.4/lib/standard-encodings.html" rel="nofollow noreferrer">docs.python.org/2.4/lib/standard-encodings.html</a> , for example: <code>str(b'hello', 'utf-8')</code></span>
<span class="comment-copy">I really feel like Python should provide a mechanism to replace missing symbols and continue.</span>
<span class="comment-copy">Brilliant!  This is much faster than @Sisso's method for a 256 MB file!</span>
<span class="comment-copy">@techtonik : This won’t work on an array like it worked in python2.</span>
<span class="comment-copy">@user2284570 do you mean list? And why it should work on arrays? Especially arrays of floats..</span>
<span class="comment-copy">@anatolytechtonik There is the possibility to leave the escape sequence in the string and move on: <code>b'\x80abc'.decode("utf-8", "backslashreplace")</code> will result in <code>'\\x80abc'</code>. This information was taken from the <a href="https://docs.python.org/3/howto/unicode.html#python-s-unicode-support" rel="nofollow noreferrer">unicode documentation page</a> which seems to have been updated since the writing of this answer.</span>
<span class="comment-copy"><code>open()</code> function for text streams or <code>Popen()</code> if you pass it <code>universal_newlines=True</code> do magically decide character encoding for you (<code>locale.getpreferredencoding(False)</code> in Python 3.3+).</span>
<span class="comment-copy"><code>'latin-1'</code> is a verbatim encoding with all code points set, so you can use that to effectively read a byte string into whichever type of string your Python supports (so verbatim on Python 2, into Unicode for Python 3).</span>
<span class="comment-copy">I've been using this method and it works. Although, it's just guessing at the encoding based on user preferences on your system, so it's not as robust as some other options. This is what it's doing, referencing docs.python.org/3.4/library/subprocess.html: "If universal_newlines is True, [stdin, stdout and stderr] will be opened as text streams in universal newlines mode using the encoding returned by locale.getpreferredencoding(False)."</span>
<span class="comment-copy"><a href="https://docs.python.org/3/whatsnew/3.7.html#subprocess" rel="nofollow noreferrer">On 3.7</a> you can (and should) do <code>text=True</code> instead of <code>universal_newlines=True</code>.</span>
<span class="comment-copy">Or with Python 3.7 you can pass <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer"><code>text=True</code></a> to decode stdin, stdout and stderr using the given encoding (if set) or the system default otherwise. <code>Popen(['ls', '-l'], stdout=PIPE, text=True)</code>.</span>
<span class="comment-copy">You can actually chain all of the <code>.strip</code>, <code>.replace</code>, <code>.encode</code>, etc calls in one list comprehension and only iterate over the list once instead of iterating over it five times.</span>
<span class="comment-copy">@TaylorEdmiston Maybe it saves on allocation but the number of operations would remain the same.</span>
<span class="comment-copy">I was looking for <code>.replace("\r\n", "\n")</code> addition so long. This is the answer if you want to render HTML properly.</span>
<span class="comment-copy">Checking types is one of the least Pythonic things I can imagine...</span>
<span class="comment-copy">1) As @bodangly said, type checking is not pythonic at all.  2) The function you wrote is named "<code>byte_to_str</code>" which implies it will return a str, but it only prints the converted value, <i>and</i> it prints an error message if it fails (but doesn't raise an exception). This approach is also unpythonic and obfuscates the <code>bytes.decode</code> solution you provided.</span>
<span class="comment-copy">While this code may answer the question, providing additional <a href="https://meta.stackexchange.com/q/114762">context</a> regarding <i>how</i> and/or <i>why</i> it solves the problem would improve the answer's long-term value. Remember that you are answering the question for readers in the future, not just the person asking now! Please <a href="https://stackoverflow.com/posts/50671646/edit">edit</a> your answer to add an explanation, and give an indication of what limitations and assumptions apply. It also doesn't hurt to mention why this answer is more appropriate than others.</span>
<span class="comment-copy">The pipe to the subprocess is <i>already</i> a binary buffer. Your answer fails to address how to get a string value from the resulting <code>bytes</code> value.</span>
