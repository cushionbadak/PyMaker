<div class="post-text" itemprop="text">
<p>In Python 2.7, 3.4 and 3.5, <code>grp.getgrgid</code> is capable of accepting a string:</p>
<pre><code>from grp import getgrgid
print(getgrgid('0'))
</code></pre>
<p>However, <code>pwd.getpwuid</code> can't do the same:</p>
<pre><code>from pwd import getpwuid
print(getpwuid('0'))

Traceback (most recent call last):
  File "getpwuid_test.py", line 2, in &lt;module&gt;
    print(getpwuid('0'))
TypeError: an integer is required
</code></pre>
<p>This is because inside <code>Modules/pwdmodule.c</code>, <code>getpwuid</code> uses <code>PyNumber_ParseTuple</code> with a converter that uses <code>PyNumber_Index</code> to get a Python integer, and that raises an exception on failure. </p>
<p>However, in <code>Modules/grpmodule.c</code>, <code>grp_getgrgid</code> uses <code>PyNumber_Long</code>  (Or <code>PyNumber_Int</code> for an old enough Python) as a conversion first, and as the documentation says at <a href="https://docs.python.org/3/c-api/number.html">https://docs.python.org/3/c-api/number.html</a>, this is the equivalent of running <code>int(o)</code>, which can convert a string to an integer. Only then is it given to <code>PyNumber_Index</code>, by way of a helper function <code>_Py_Gid_Converter</code></p>
<p>What is the reason for this difference? Is it a deliberate choice based on some history?</p>
<p>The behaviour of <code>getgrgid</code> seems more helpful, and it's odd that it doesn't apply to both functions. Is this undesirable behaviour in <code>getgrgid</code> or <code>getpwuid</code>? </p>
</div>
<div class="post-text" itemprop="text">
<p>The short answer is because humans are fallible and mistakes happen.  Some are <a href="https://www.google.com/?gws_rd=ssl#safe=off&amp;q=definition+doozy" rel="nofollow">doozies</a> and <a href="https://www.python.org/dev/peps/pep-0409/" rel="nofollow">get noticed quickly</a>, others are minor and can go years without detection.</p>
<p>Thank you for helping make Python better!</p>
</div>
<span class="comment-copy">This is a good question. I think it might get a more official answer on <a href="https://www.python.org/community/lists/" rel="nofollow noreferrer">one of the official Python mailing lists</a>. Doing so may eventually lead to getting one of the two modules patched. The mailing list for development of the core python code is <a href="https://mail.python.org/mailman/listinfo/python-dev" rel="nofollow noreferrer">python-dev</a> (the core developers are on there, including Guido).</span>
<span class="comment-copy">Good plan. I raised a 'behaviour' class issue at <a href="https://bugs.python.org/issue26129" rel="nofollow noreferrer">bugs.python.org/issue26129</a> just after posting this, but you're right that I should ask the python-dev list.</span>
<span class="comment-copy">If I were you, I would just write a patch with the more relaxed behavior for <code>pwd</code> and attach it to the ticket. It is more likely to get changed if the patched code is already ready to merge in. Also, I doubt they would make it more strict for <code>grp</code> since there may already be code in the wild that depends on the relaxed behavior. You should probably add regression tests with the patch as well (for both the <a href="https://hg.python.org/cpython/file/default/Lib/test/test_pwd.py" rel="nofollow noreferrer"><code>pwd</code></a> and <a href="https://hg.python.org/cpython/file/default/Lib/test/test_grp.py" rel="nofollow noreferrer"><code>grp</code></a> modules).</span>
<span class="comment-copy">Going by <a href="https://bugs.python.org/issue26129" rel="nofollow noreferrer">bugs.python.org/issue26129</a> the developers decided <code>getgrgid</code>'s behaviour was undesirable, and it will be deprecated in the next release.</span>
<span class="comment-copy">After reading their rationale on the bug report, I agree with them. Python is a strongly typed language; letting it behave like anything else can only cause problems down the line.</span>
