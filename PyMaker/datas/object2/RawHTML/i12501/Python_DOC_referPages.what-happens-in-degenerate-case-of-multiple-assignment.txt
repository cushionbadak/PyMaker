<div class="post-text" itemprop="text">
<p>I'm <a href="http://rosalind.info/problems/list-view/?location=algorithmic-heights" rel="nofollow noreferrer">teaching myself algorithms</a>. I needed to swap two items in a list. Python makes all things easy:</p>
<pre><code>def swap(A, i, j):
    A[i], A[j] = A[j], A[i]
</code></pre>
<p>This works a treat:</p>
<pre><code>&gt;&gt;&gt; A = list(range(5))
&gt;&gt;&gt; A
[0, 1, 2, 3, 4]
&gt;&gt;&gt; swap(A, 0, 1)
&gt;&gt;&gt; A
[1, 0, 2, 3, 4]
</code></pre>
<p>Note the function is resilient to the degenerate case <code>i = j</code>. As you'd expect, it simply leaves the list unchanged:</p>
<pre><code>&gt;&gt;&gt; A = list(range(5))
&gt;&gt;&gt; swap(A, 0, 0)
&gt;&gt;&gt; A
[0, 1, 2, 3, 4]
</code></pre>
<p>Later I wanted to permute three items in a list. I wrote a function to permute them in a 3-cycle:</p>
<pre><code>def cycle(A, i, j, k):
    A[i], A[j], A[k] = A[j], A[k], A[i]
</code></pre>
<p>This worked well:</p>
<pre><code>&gt;&gt;&gt; A = list("tap")
&gt;&gt;&gt; A
['t', 'a', 'p']
&gt;&gt;&gt; cycle(A, 0, 1, 2)
&gt;&gt;&gt; A
['a', 'p', 't']
</code></pre>
<p>However I (eventually) discovered it goes wrong in degenerate cases. I assumed a degenerate 3-cycle would be a swap. So it is when <code>i = j</code>, <code>cycle(i, i, k) ≡ swap(i, k)</code>:</p>
<pre><code>&gt;&gt;&gt; A = list(range(5))
&gt;&gt;&gt; cycle(A, 0, 0, 1)
&gt;&gt;&gt; A
[1, 0, 2, 3, 4]
</code></pre>
<p>But when <code>i = k</code> something else happens:</p>
<pre><code>&gt;&gt;&gt; A = list(range(5))
&gt;&gt;&gt; sum(A)
10
&gt;&gt;&gt; cycle(A, 1, 0, 1)
&gt;&gt;&gt; A
[1, 1, 2, 3, 4]
&gt;&gt;&gt; sum(A)
11
</code></pre>
<p>What's going on? <code>sum</code> should be invariant under any permutation! Why does this case <code>i = k</code> degenerate differently?</p>
<p>How can I achieve what I want? That is a 3-cycle function that degenerates to a swap if only 2 indices are distinct <code>cycle(i, i, j) ≡ cycle(i, j, i) ≡ cycle(i, j, j) ≡ swap(i, j)</code></p>
</div>
<div class="post-text" itemprop="text">
<p><code>cycle</code> is doing exactly what you ask it to: assigning to the left hand values the right hand values.</p>
<pre><code>def cycle(A, i, j, k):
    A[i], A[j], A[k] = A[j], A[k], A[i]
</code></pre>
<p>is functionally equivalent to </p>
<pre><code>def cycle(A, i, j, k):
    new_values = A[j], A[k], A[i]
    A[i], A[j], A[k] = new_values
</code></pre>
<p>So when you do <code>cycle(A, 1, 0, 1)</code> what you are saying is that you want</p>
<pre><code>A[1] = previous_A[0]
A[0] = previous_A[1]
A[1] = previous_A[1]
</code></pre>
<p>If you want cycle to work sequentially then you must write it sequentially, otherwise python evaluates the right hand and then expands that to the arguments on the left hand.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well it seems <em>you are re-assigning to the same target</em> <code>A[1]</code>, to get a visualization of the call:</p>
<pre><code>A[1], A[0], A[1] = A[0], A[1], A[1]
</code></pre>
<p>Remember, from the documentation on <strong><a href="https://docs.python.org/3.5/reference/simple_stmts.html#assignment-statements" rel="nofollow">assignment statements</a></strong>:</p>
<blockquote>
<p>An assignment statement <em>evaluates the expression list</em> (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and <em>assigns the single resulting object to each of the target lists, from left to right.</em></p>
</blockquote>
<p>So your evaluation goes something like dis: </p>
<ul>
<li>Create tuple with values <code>A[0], A[1], A[1]</code> translating to <code>(0, 1, 1)</code></li>
<li>Assign these to the target list <code>A[1], A[0], A[1]</code> <em>from left to right.</em></li>
</ul>
<p>Assignment from left to right takes place:</p>
<ol>
<li><code>A[1] = 0</code> </li>
<li><code>A[0] = 1</code></li>
<li><code>A[1] = 1</code> </li>
</ol>
<p>So the first assignment made is <code>A[1]</code> with the first element of the tuple <code>0</code>, then the second assignment <code>A[0]</code> with the second element <code>1</code>  and, finally, at the end, <code>A[1]</code> <em>is overriden with the third element in the tuple</em> <code>1</code>. </p>
<hr/>
<p>You can get a more <em>convoluted</em> view of this with <strong><a href="https://docs.python.org/3/library/dis.html#dis.dis" rel="nofollow"><code>dis.dis</code></a></strong>; notice how all elements in the right hand of the assignment statement are loaded first and then they are assigned to their values:</p>
<pre><code>dis.dis(cycle)
  2           0 LOAD_FAST                0 (A)
              3 LOAD_FAST                2 (j)
              6 BINARY_SUBSCR
              7 LOAD_FAST                0 (A)
             10 LOAD_FAST                3 (k)
             13 BINARY_SUBSCR
             14 LOAD_FAST                0 (A)
             17 LOAD_FAST                1 (i)
             20 BINARY_SUBSCR                   # Loading Done
             21 ROT_THREE
             22 ROT_TWO
             23 LOAD_FAST                0 (A)  # Assign first
             26 LOAD_FAST                1 (i)
             29 STORE_SUBSCR
             30 LOAD_FAST                0 (A)  # Assign second
             33 LOAD_FAST                2 (j)
             36 STORE_SUBSCR
             37 LOAD_FAST                0 (A)  # Assing third
             40 LOAD_FAST                3 (k)
             43 STORE_SUBSCR
             44 LOAD_CONST               0 (None)
             47 RETURN_VALUE
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>cycle(A, 1, 0, 1)</code> becomes <code>A[1], A[0], A[1] = A[0], A[1], A[1]</code>, resulting in both <code>A[0]</code> and <code>A[1]</code> ending up with the old value of <code>A[1]</code>. <code>cycle(0, 0, 1)</code> works because it becomes <code>A[0], A[0], A[1] = A[0], A[1], A[0]</code>, which is equivalent to <code>swap(A, k, j)</code>.</p>
</div>
<span class="comment-copy">Can you clarify exactly what behavior you're expecting out of the degeneration? Also note there's <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer"><code>itertools.permutations</code></a> that would shuffle the values - though you can't specify how it's going to shuffle them, only that it will eventually permute through all possible pairings. e.g. what about <code>cycle(A, 0, 0, 0)</code>?</span>
<span class="comment-copy">@WayneWerner "a 3-cycle function that degenerates to a swap if only 2 indices are distinct" eg. <code>cycle(i, j, i) ≡ swap(i, j)</code></span>
<span class="comment-copy">I'm not sure that's well defined. That's enough to write a function for when <code>i=k</code>, but what if <code>j=k</code>? or <code>i=j</code>? Are those cases ignored?</span>
<span class="comment-copy">Precisely: <code>cycle(i, i, j) ≡ cycle(i, j, i) ≡ cycle(i, j, j) ≡ swap(i, j)</code>. And of course <code>cycle(i, i, i)</code> should be the identity function.</span>
<span class="comment-copy">Great explanation. It would be nice to also add an actual solution to the problem!</span>
<span class="comment-copy">@DanielDarabos it would, if it was actually a problem.</span>
