<div class="post-text" itemprop="text">
<p>In pdb (or ipdb) we can execute statements and evaluate expressions with the <a href="https://docs.python.org/2/library/pdb.html" rel="nofollow"><code>!</code> or <code>p</code> commands</a>:</p>
<blockquote>
<p>p expression<br/>
       Evaluate the expression in the current context and print its value.</p>
<p>[!]statement</p>
<p>     Execute the (one-line) statement in the context of the current stack frame. The exclamation point can be omitted unless the first word of the statement resembles a debugger command. To set a global variable, you can prefix the assignment command with a global command on the same line</p>
</blockquote>
<p>So, for example, I can type <code>p reddit.get_subreddits()</code> while debugging in ipdb and the code will be executed in the current context and I will see the return value.</p>
<p>Is there a way I can debug the execution of such "manually typed" expressions?</p>
<p>Basically I would like to do is <code>s reddit.get_subreddits()</code>, but that just executes the <code>step</code> command and ignores the expression.</p>
<p><strong>EDIT: A trivial example</strong></p>
<p>Take this simple function:</p>
<pre><code>import random

def get_value_for_weekday(weekday_index=None):
    values = [10, 20, 20, 10, 30, 30, 30]
    if not weekday_index:
        # If no weekday provided, return the average of all weekdays
        return sum(values) / 7
    return averages[weekday_index]

if __name__ == '__main__':
    while True:
        import ipdb; ipdb.set_trace()  # enter ipbd for debug
        get_value_for_weekday(random.randint(0, 7))
</code></pre>
<p>Which is bugged because of the <code>if not weekday_index</code> (it should check <code>weekday_index is not None</code>.) </p>
<p>Let's assume I notice I get <code>10</code> half the number of times I was expecting. So I added a <code>import ipdb; ipdb.set_trace()</code> before the call to the function to try and debug the code.</p>
<p>So I'm in the ipdb console and I suddenly get the idea that maybe the problem is when I pass 0 as weekday_index.
I can test my hypothesis directly in  ipdb:</p>
<pre><code>ipdb&gt; p get_value_for_weekday(0)
22
</code></pre>
<p>Ok, so I realize there's something wrong when <code>weekday_index=0</code>.<br/>
What I would like to do now is debug step by step the call to <code>get_value_for_weekday(0)</code>, so that I could see that I erranously enter the if block.</p>
<p>Obviously I could exit ipdb, stop the script, change the code to always pass 0, relaunch the script and when I enter ipdb, debug the call with the ipdb <code>step</code> (<code>s</code>) command.<br/>
But wouldn't it be easier if I could just do <code>s get_value_for_weekday(0)</code> much the same way I was able to do <code>p get_value_for_weekday(0)</code>?</p>
<p>Is there a way do something like this?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you're looking for the <code>(d)ebug</code> command which, for some reason, is not specified in the <a href="https://docs.python.org/3/library/pdb.html#debugger-commands" rel="noreferrer"><em>Debugger Commands</em></a>. Just for future reference, <code>pdb</code> has a nice set of commands specified (which you can see by typing <code>help</code> in the interactive prompt). On to the <code>debug</code> command:</p>
<pre><code>(Pdb) help debug
debug code
        Enter a recursive debugger that steps through the code
        argument (which is an arbitrary expression or statement to be
        executed in the current environment).
</code></pre>
<p>Which seems to do what you're after. Using your sample script from the terminal:</p>
<pre><code>python -m pdb pdbscript.py
</code></pre>
<p>After issuing two <code>n</code> commands in order for the function to get parsed (I believe this is how <code>pdb</code> works). You can issue a <code>debug get_value_for_weekday(0)</code> command to recursively step in the function:</p>
<pre><code>(Pdb) debug get_value_for_weekday(0)
ENTERING RECURSIVE DEBUGGER
&gt; &lt;string&gt;(1)&lt;module&gt;()
((Pdb)) s
--Call--
&gt; /home/jim/Desktop/pdbscript.py(3)get_value_for_weekday()
-&gt; def get_value_for_weekday(weekday_index=None):
((Pdb)) n
&gt; /home/jim/Desktop/pdbscript.py(4)get_value_for_weekday()
-&gt; values = [10, 20, 20, 10, 30, 30, 30]
((Pdb)) n 
&gt; /home/jim/Desktop/pdbscript.py(5)get_value_for_weekday()
-&gt; if not weekday_index:
((Pdb)) p weekday_index
0
((Pdb)) n
&gt; /home/jim/Desktop/pdbscript.py(7)get_value_for_weekday()
-&gt; return sum(values) / 7
</code></pre>
<p>Do note, <em>I feel really sketchy about this form of meta-debugging</em> but it seems to be what you're after. </p>
</div>
<div class="post-text" itemprop="text">
<p>With regards to your example, 
you don't need to exit pdb and change the code.
You can step into the function (with 's') and set weekday_index=0 inside.</p>
<p>One solution to your original problem is to use the debugger's jump command as follows: </p>
<ol>
<li>jump before the function call using 'j #line-number' </li>
<li>step in the function with 's' </li>
<li>set the input params, and continue debugging.</li>
</ol>
<p>This worked when I tried it, but the debugger complained when I tried to do step 3 before step 2 for some reason.</p>
</div>
<span class="comment-copy">Could you give a more tangible examble which I could reproduce? I'm having a bit of a hard time understanding what exactly you're looking for.</span>
<span class="comment-copy">Added an example, I hope it makes thing clearer.</span>
<span class="comment-copy">This seems to be exactly what I was looking for!</span>
<span class="comment-copy">@LeartS I'm glad! Like I noted though, I really feel weird about embedded debuggers; thinking about them makes my head hurt a bit.</span>
<span class="comment-copy">I don't necessarily want to debug a function call I will step into it later, maybe another function call (one I will not step into but could have side effects or help me understand the code in some way). I guess my example was not that good.</span>
<span class="comment-copy">I see. I'm not sure if this is possible with ipdb.</span>
<span class="comment-copy">A different solution to your problem is to use the debugger's jump command as follows: (1) jump before the function call using 'j #line-number' (2) step in the function with 's'  (3) set the input params and continue debugging.</span>
<span class="comment-copy">Can you add that to the answer?</span>
<span class="comment-copy">No problem. Added.</span>
