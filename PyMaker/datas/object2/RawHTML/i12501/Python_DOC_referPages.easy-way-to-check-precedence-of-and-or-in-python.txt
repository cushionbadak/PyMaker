<div class="post-text" itemprop="text">
<p>I have a python list like this </p>
<pre><code>[True, "and", False, "or", False, "or", True ....]
</code></pre>
<p>How to operate them and find the boolean value (True and False or False or True ...) efficiently ?</p>
<p>I know and has more precedence than or. So I know about the way where we break the list about every or and take or of booleans computed from each list.</p>
<p>I want to know is there a more easy way to do so ?</p>
<pre><code>if my_list = [True, "and", False, "or", False, "or", True ] this will output
True as (True and False) or False or True = False or False or True which is True. 

if my_list = [True, "and", True, "or", False, "or", False ] this will output 
True as (True and True) or False or False = True or False or False which is True

if my_list = [False, "or", False, "and", False, "and", True ] = False or False which is False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if this will be faster, but:</p>
<pre><code>l = [True, "and", False, "or", False, "or", False, "or", True, "and", False, "or", False, "or", False]
eval(' '.join([ str(z) for z in l]))
</code></pre>
<p>result:</p>
<pre><code>False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to do operator precedence is through the <a href="https://en.wikipedia.org/wiki/Shunting-yard_algorithm" rel="nofollow">shunting-yard algorithm</a>, which requires a stack:</p>
<pre><code>def evaluate(e):
    ops = {'and': 1, 'or': 0} 
    op_stack = []
    output = []
    for i in e:
        if i in ops:
            while op_stack and ops[op_stack[-1]] &gt; ops[i]:
                output.append(op_stack.pop())
            op_stack.append(i)
        else:
            output.append(i)
    op_stack.reverse()
    output.extend(op_stack)

    stack = []
    for i in output:
        #print(stack, i)
        if i in ops:
            a, b = stack.pop(), stack.pop()
            if i == 'and':
                i = a and b
            else:
                i = a or b
        stack.append(i)
    return stack[0]

&gt;&gt;&gt; evaluate([True, "and", False, "or", False, "or", True])
True
&gt;&gt;&gt; evaluate([True, 'or', True, 'and', False])
True
</code></pre>
<p>The other way to do operator precedence is a recursive <a href="https://en.wikipedia.org/wiki/Operator-precedence_parser" rel="nofollow">precedence climbing</a> algorithm:</p>
<pre><code>ops = {'and': 1, 'or': 0}

def tokenizer(l):
    for i in l:
        o = yield i
        while o:
            yield None
            o = yield o

def evaluate(token, prec=0):
    lhs = next(token)

    while True:
        op = next(token, None)
        if op is None or ops[op] &lt; prec:
            if op: token.send(op)
            break

        rhs = evaluate(token, ops[op]+1)
        #print(lhs, op, rhs)
        lhs = lhs and rhs if op == 'and' else lhs or rhs
    return lhs

&gt;&gt;&gt; evaluate(tokenizer([True, 'or', True, 'and', False]))
True
&gt;&gt;&gt; evaluate(tokenizer([True, "and", False, "or", False, "or", False, "or",
...                     True, "and", False, "or", False, "or", False]))
False
</code></pre>
<p>With the prints:</p>
<pre><code>&gt;&gt;&gt; evaluate(tokenizer([True, "and", False, "or", False, "or", False, "or",
...                     True, "and", False, "or", False, "or", False]))
True and False
False or False
False or False
True and False
False or False
False or False
False or False
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>IIUC you could use <code>map</code>, <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow"><code>isinstance</code></a>:</p>
<pre><code>l = [True, "and", False, "or", False, "or", True]
res = list(map(lambda x: isinstance(x, bool), l))

print(res)
[True, False, True, False, True, False, True]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly this should be the simplest (less elegant) solution</p>
<pre><code>expression = [True, "and", False, "or", False, "or", True]


def eval_expr( value1, operator, value2):
    if operator == 'and':
        return value1 and value2

    else:
        return value1 or value2


result = None

while len(expression) != 1:
    v1 = expression.pop()
    op =  expression.pop()
    v2 = expression.pop()
    partial_result = eval_expr(v1, op, v2)
    expression.insert(0, partial_result)
    result = partial_result

print result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>@Iliyan 's answer is correct. Less hacky than me.</p>
<p>I came up with a trick to do so.</p>
<p>my_list = [True, "and", False, "or", False, "or", True]</p>
<ol>
<li>I created a file temp.py</li>
<li>Entered all values in list of my_list in order space separated in temp.py</li>
<li>Executed temp.py</li>
<li>Deleted temp.py</li>
</ol>
<p>Kind of a hack ;)</p>
</div>
<span class="comment-copy">I am having hard time in figuring out what you're trying to do. Could you please add the expected output and your attempted solution?</span>
<span class="comment-copy">I'm not sure what are you expecting to get? Could you show your code or any your tries?</span>
<span class="comment-copy">If the only possible array elements are True, False, and &amp; or -- there's probably a pretty simple evaluator that simply recurses with the remainder of the array when it finds an <code>or</code>.</span>
<span class="comment-copy">if my_list = [True, "and", False, "or", False, "or", True ]  this will output True as (True and False) or False or True = False or False or True which is True.  and if my_list = [True, "and", True, "or", False, "or", False ]  this will output True as (True and True) or False or False = True or False or False which is True  if my_list = [False, "or", False, "and", False, "and", True ] = False or False which is False</span>
<span class="comment-copy">The way to do this is to use the shunting-yard algorithm and effectively turn this into reverse polish notation.</span>
<span class="comment-copy">Assuming that the input comes from a trusted source, the above is probably the least hacky and most Pythonic way to do this.</span>
<span class="comment-copy">@TigerhawkT3 Using <code>eval</code> the most Pythonic way to solve this, seriously?</span>
<span class="comment-copy">The OP wants to evaluate some logical operators. <code>eval()</code> evaluates. <code>ast.literal_eval()</code> wouldn't work, because <code>and</code> and <code>or</code> aren't literals. Do you know of anything in <code>ast</code> (or elsewhere) with parsing that focuses on this particular kind of expression?</span>
<span class="comment-copy">For extra assurance you could <code>assert all(x in {True, False, "and", "or"} for x in lst)</code> before running <code>eval</code></span>
<span class="comment-copy">@Daenyth - Assertions can be turned off. It's better to use <code>if...: raise...</code>.</span>
<span class="comment-copy">Doesn't take into account operator precedence, e.g. <code>True or True and False</code>, should evaluate to <code>True</code> if <code>and</code> has higher precedence and <code>False</code> if <code>or</code> has higher (or equal) precedence.</span>
<span class="comment-copy">Yeah, u're right it missing. Thank you for notice me it :)</span>
<span class="comment-copy">@Iliyan's answer does pretty much this, only without needing to create a file first.</span>
