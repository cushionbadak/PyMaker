<div class="post-text" itemprop="text">
<p>In C# I can use <a href="https://github.com/Moq/moq4" rel="nofollow">Moq</a> to create mock objects, which I can use to check if something got called. In this example, I will check if the <code>MyModelClass.Bar()</code> function calls <code>IMyInterface.Foo()</code> at least once:</p>
<pre class="lang-cs prettyprint-override"><code>[TestMethod]
public void TestBar() {
    var mock = new Mock&lt;IMyInterface&gt;();
    var systemUnderTest = new MyModelClass(mock.Object);
    systemUnderTest.Bar();

    // Let the test fail, if Foo() was not called at least once
    mock.Verify(x =&gt; x.Foo(), Times.AtLeastOnce());
}
</code></pre>
<p>Programming in Python using <a href="https://pytest.org/" rel="nofollow">pytest</a>, what is the best way to achieve the same? Or should I use other testing frameworks for things like that?</p>
</div>
<div class="post-text" itemprop="text">
<p>I just discovered <a href="https://github.com/testing-cabal/mock" rel="nofollow">Mock</a>, a testing library which does what I want:</p>
<pre class="lang-py prettyprint-override"><code>from mock import Mock

def test_bar():
    mock = Mock()
    system_under_test = MyModelClass(mock)
    system_under_test.bar()
    mock.foo.assert_called_once_with()
</code></pre>
</div>
<span class="comment-copy">... and you can take a look to <a href="https://docs.python.org/3/library/unittest.mock.html#autospeccing" rel="nofollow noreferrer">docs.python.org/3/library/unittest.mock.html#autospeccing</a> to mimic the interface. By the same framework you can either patch exist implementation by mocks. You can find tons of QA on SO about this topic :)</span>
<span class="comment-copy">Note there is also <a href="https://github.com/pytest-dev/pytest-mock" rel="nofollow noreferrer">pytest-mock</a> which makes it easier to use mocks and e.g. takes care of resetting them after each test.</span>
