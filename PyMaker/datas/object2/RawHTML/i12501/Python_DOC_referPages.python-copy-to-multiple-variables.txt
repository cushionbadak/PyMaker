<div class="post-text" itemprop="text">
<p>I iterate results from SQL</p>
<pre><code>for row in results:
    name = row[0]
    email = row[1]
    lastlogon = row[2]
    # do somthing with the parameters
</code></pre>
<p>The row has more than three elements.
Is there a way to do that in a single line:</p>
<pre><code>for row in results:
    name, email, lastlogon = row
    # do somthing with the parameters
</code></pre>
<p>?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want your row with a "readable" mapping, you could map the results using a mapping list and the function <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow">zip</a>. The mapping specifies how the n-th entry in row is labeled.</p>
<pre><code>mapping = ['name', 'email', 'lastlogon', 'more_fields', 'again_more_fields', 'and_so_on']
for row in results:
   readable_row = dict(zip(mapping, row))
   print(readable_row)
   # will print something like {'name': '...', 'email': '...', ...}
</code></pre>
<p>That way you can map as many items as you want to a dict and use it</p>
<pre><code>if row['and_so_on'] == 'peter pan':
   do_some_funny_stuff()
</code></pre>
<p>As a guess, I would bet that the SQL framework you are using also provides some methods to return the resulting rows as dicts with their corresponding field names as keys. Which framework are you using?</p>
<p>Also if you want your values in variables, you can slice the row. This allows you to only assign the first n values.</p>
<pre><code>name, email, lastlogon = row[0:3]
</code></pre>
</div>
<span class="comment-copy">Is that the whole of the row? Which versions of Python? <i>What have you tried?</i></span>
<span class="comment-copy">You allerady have done that in a single line! , did you try what you expected that works?</span>
<span class="comment-copy">How many fields or elements are in <code>row</code>?...only 3?</span>
<span class="comment-copy">the row has more than just these three elements</span>
