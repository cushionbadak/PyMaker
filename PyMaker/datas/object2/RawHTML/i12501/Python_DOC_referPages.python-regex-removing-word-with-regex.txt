<div class="post-text" itemprop="text">
<p>I'm new to Python and I want to remove and replace the <code>({ / / })</code> with space, the sample below</p>
<p>The original sentence:</p>
<pre><code>NULL ({ / / }) Regina ({ 4 p1 p2 / / }) Shueller ({ 5 p1 p2 / / }) works ({ / / }) for ({ / / }) Italy ({ 14 / / }) 's ({ 15 / / }) La ({ 16 / / }) Repubblica ({ 17 / / }) newspaper ({ 18 / / }) . ({ 38 / / })
</code></pre>
<p>Transform to this:</p>
<pre><code>Regina Shueller works for Italy 's La Repubblica newspaper.
</code></pre>
<p>I've tried this code but that was not what I expected</p>
<pre><code>Sentence = re.sub(r'[({ / / })]',' ', sentence)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use</p>
<pre><code>r'\s*(?:\(\{[^/]*/\s*/\s*}\)|NULL)\s*'
</code></pre>
<p>See <a href="https://regex101.com/r/nJ4yY8/1" rel="nofollow">regex demo</a></p>
<p><strong>Regex explanation</strong>:</p>
<ul>
<li><code>\s*</code> - zero or more whitespaces</li>
<li><code>(?:\(\{[^/]*/\s*/\s*}\)|NULL)</code> - two alternatives, <code>NULL</code> or <code>\(\{[^/]*/\s*/\s*}\)</code> matching...

<ul>
<li><code>\(</code> - opening round bracket</li>
<li><code>\{</code> - opening brace</li>
<li><code>[^/]*</code> - zero or more characters other than <code>/</code></li>
<li><code>/</code> - a literal <code>/</code></li>
<li><code>\s*</code> - zero or more whitespaces </li>
<li><code>/\s*</code> - ibid.</li>
<li><code>}</code> - a closing brace</li>
<li><code>\)</code> - a closing round bracket </li>
</ul></li>
<li><code>\s*</code> - zero or more whitespaces </li>
</ul>
<p>Note that the spaces in between words and punctuation should be handled separately.</p>
<p><a href="https://ideone.com/o8CxY6" rel="nofollow">Python demo</a>:</p>
<pre><code>import re
p = r'\s*(?:\(\{[^/]*/\s*/\s*}\)|NULL)\s*'
test_str = "NULL ({ / / }) Regina ({ 4 p1 p2 / / }) Shueller ({ 5 p1 p2 / / }) works ({ / / }) for ({ / / }) Italy ({ 14 / / }) 's ({ 15 / / }) La ({ 16 / / }) Repubblica ({ 17 / / }) newspaper ({ 18 / / }) . ({ 38 / / })"
result = re.sub(p, " ", test_str)
print(result.strip())
# =&gt; Regina Shueller works for Italy 's La Repubblica newspaper .
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The pattern you tried: <code>r'[({ / / })]'</code> means:</p>
<blockquote>
<p>Match any single character that is one of <code>(</code>, <code>{</code>, <code></code>, <code>/</code>, <code>}</code>, or <code>)</code></p>
</blockquote>
<p>The key to this is understanding the <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow">regular expression language</a>.  Each of those characters has a special meaning in that language.</p>
<p>A pattern such as <code>r' \({ [^/]*/ / }\) '</code> would match each of the different sections in your example.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can go with this:</p>
<pre><code>r'(\([^(]*\))'
</code></pre>
<p>With <kbd><a href="https://regex101.com/r/hS3sV5/1" rel="nofollow">live demo</a></kbd></p>
</div>
<div class="post-text" itemprop="text">
<p>If the format is always the same you could try keeping alpha's after stripping punctuation:</p>
<pre><code>from string import punctuation
print(" ".join([w for w in s.split() if w.strip(punctuation).isalpha()]))
</code></pre>
<p>Or using a regex:</p>
<pre><code>print(re.sub(r'\({.*?}\)',"",s))
</code></pre>
<p>You are removing everything that has <code>({})</code> regardless of what is inside in your expected output. </p>
</div>
<span class="comment-copy">What about NULL?</span>
<span class="comment-copy">The best I came up with is <a href="https://regex101.com/r/nJ4yY8/1" rel="nofollow noreferrer"><code>r'\s*(?:\(\{[^/]*/\s*/\s*}\)|NULL)\s*'</code></a> (to be replaced with space). But the space between the last word and the <code>.</code> cannot be removed like this. And the value must be trimmed from spaces.</span>
<span class="comment-copy">Your transformed string does not match what you say you want</span>
<span class="comment-copy">Try <a href="https://regex101.com/r/wF4nS6/2" rel="nofollow noreferrer">like this</a> with <a href="https://pypi.python.org/pypi/regex" rel="nofollow noreferrer">Python regex module</a> (pattern uses backreference <code>(?1)</code>). Or with <code>re</code> <a href="https://regex101.com/r/tC1sJ0/1" rel="nofollow noreferrer">this pattern</a>: <code>\({[^}]*}\)|NULL|\s+(?!\w)</code> and trim leading space.</span>
<span class="comment-copy">Thank you so much @WiktorStribiżew for your answer, that regex works well.</span>
<span class="comment-copy">As a bonus :), try removing the space before non-opening punctuation and symbols with <code>re.sub(r"\s+([~`!@#$%^&amp;*)_+=}\]\\|;:.&gt;,-])", r"\1", result.strip())</code></span>
<span class="comment-copy">Well, no idea what is wrong with this answer.</span>
<span class="comment-copy">Guys who downvote - really, what is wrong?</span>
<span class="comment-copy">I can't see a -1 here, so.. +1</span>
<span class="comment-copy">That's right! I should have to learn the regular expression deeply. Thanks for your response!</span>
<span class="comment-copy">I think this regex is rather unsafe for this task.</span>
<span class="comment-copy">@WiktorStribiżew well... It fits the need, given the provided input. I've simplified it as far as I could, which might be bad if the input provided doesn't reflect the reality.</span>
<span class="comment-copy">The lazy dot matching regex <a href="https://regex101.com/r/dQ4zT0/1" rel="nofollow noreferrer">may play a bad joke on you</a>. Do not use lazy dot matching where you do not have to.</span>
<span class="comment-copy">@WiktorStribiżew, I do need it, I meant to remove the / / from the pattern as it is not what the OP i looking to match based on their expected output. What is inside is irrelevant</span>
