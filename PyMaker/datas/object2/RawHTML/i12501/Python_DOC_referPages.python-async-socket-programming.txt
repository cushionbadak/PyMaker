<div class="post-text" itemprop="text">
<p>Now I have two threads, thread 1 is main thread and thread 2 is a task thread.I need thread 2 to do all the network issues, so I put all the sockets in thread 2 and set them to no-blocking. Thread 1 is used to push request to thread 2 to do the job.</p>
<p>At first i write something like this:</p>
<pre><code>request_queue = Queue.Queue()
tasks = []
sockets = []

**thread 1:**

while True:

    get_user_input()
    #...
    request_queue.put(request_task)

**thread 2:**

while True:

    if have_requests(request_queue):

        t = create_task()

        tasks.append(t)

        sockets.append(t.socket())

    select(sockets,timeout=0) #no blocking select

    update_tasks()
    #...
</code></pre>
<p>Obviously,when there are no requests and tasks,thread 2 will waste cpu.I don't want use sleep(),because when thread 2 is sleeping,it can't handle requests in time.Then I think maybe I should change the request_queue to a local host socket,like this:</p>
<pre><code>request_queue = sock.sock()
request_queue.bind(local_host,some_port)
request_queue.listen()

**thread 1**

while True:

    get_user_input()

    request_queue.send(new_request)


**thread 2**

while True:

    select(sockets) # blocking select

    if request_queue is active:
        t = request_queue.recv()
        t = create_task(t)
        tasks.append(t)
        sockets.append(t.socket())

    #check other sockets
    #update tasks...
</code></pre>
<p>But this looks like a little tricky,I don't know whether this is a good way or not.All I want is thread 2 can handle request in time, don not waste cpu time and process socket events in the same time. Anyone can help?</p>
</div>
<div class="post-text" itemprop="text">
<p>For async networking look to <a href="https://github.com/tornadoweb/tornado" rel="nofollow">Tornado</a>, <a href="https://twistedmatrix.com/trac/" rel="nofollow">Twisted</a> or <a href="https://github.com/gevent/gevent" rel="nofollow">Gevent</a>. Also <a href="http://nichol.as/asynchronous-servers-in-python" rel="nofollow">this article</a> may be usefull for you.
Example with Gevent:</p>
<pre><code>def handle_socket(sock):
    sock.sendall("payload")
    sock.close()

server = socket.socket()
server.bind(('0.0.0.0', 9999))
server.listen(500) # max connections
while True:
    try:
        new_sock, address = server.accept()
    except KeyboardInterrupt:
        break
    # handle every new connection with a new handler
    gevent.spawn(handle_socket, new_sock)
</code></pre>
<p>And <a href="http://www.celeryproject.org/" rel="nofollow">Celery</a> is most appropriate for background job execution.</p>
</div>
<span class="comment-copy">why isn't Thread2 simply <a href="https://docs.python.org/3/library/queue.html#queue.Queue.get" rel="nofollow noreferrer">consuming items</a> from the queue? (blocking)</span>
<span class="comment-copy">Because it create task items from queue and then it will handle the socket events too.</span>
<span class="comment-copy">What i want to do is more like a thread pool waiting for request, not a server. I'll read that later.</span>
<span class="comment-copy">.... or just <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer">docs.python.org/3/library/asyncio.html</a>?</span>
<span class="comment-copy">Yes, if I am writing a server, then this is good. But now , I need the server to handle both new requests from other thread and async socket events in the same time.By the way, I am using Python 2.7 .</span>
