<div class="post-text" itemprop="text">
<p>I have a list:</p>
<pre><code>list = [['John','Barnes'], ['Bob','Marley'], ['Chris','Brown']]
</code></pre>
<p>I would like to use x as a variable for the first element and the result will be the second element of that list.</p>
<pre><code>x = input("Type the first name")
</code></pre>
<p>Then print the second element. Can anyone help me on this?</p>
</div>
<div class="post-text" itemprop="text">
<p>That list is easily convertible to <a href="https://docs.python.org/3/library/functions.html#func-dict" rel="nofollow"><code>dict</code></a>. The simplest approach I can think of:</p>
<pre><code>In [14]: names = dict(list) # first name -&gt; second name

In [15]: x = input('Type the first name: ')
Type the first name: Bob

In [16]: names[x] # search the `names` dictionary and return the second name
Out[16]: 'Marley'
</code></pre>
<hr/>
<p>If you don't want to convert <code>list</code> to dictionary, a simple loop would look like</p>
<pre><code>x = input('Type the first name: ')
for first, second in list:
    if first == x:
        print(second)
        break
</code></pre>
<p>It can also be written as a <a href="https://docs.python.org/3/glossary.html#term-generator-expression" rel="nofollow"><em>generator expression</em></a>:</p>
<pre><code>In [19]: x = input('Type the first name: ')
Type the first name: Bob

In [20]: next(second for first, second in list if first == x)
Out[20]: 'Marley'
</code></pre>
<p>Dictionary lookups are usually faster than this and you should use the first solution if you can.</p>
<p>Also, try not to use names of built-in types (e.g. <code>list</code>) and functions as variable names.</p>
</div>
<div class="post-text" itemprop="text">
<p>If that's what you wanted:</p>
<pre><code>x= raw_input("Type the first name\n")
print ''.join([i[1] for i in list if i[0] == x ])
</code></pre>
<p>Input:</p>
<blockquote>
<p>John</p>
</blockquote>
<p>Output:</p>
<blockquote>
<p>Barnes</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>IIUC you could do it with <code>re</code> module and <code>list comprehension</code>:</p>
<pre><code>import re

l = [['John', 'Barnes'], ['Bob', 'Marley'], ['Chris', 'Brown']]
x = 'Bob'

result = [l1[1] for l1 in l if re.findall(x, l1[0])]
print(result)
['Marley']
</code></pre>
<p>Or you could just compare it with x:</p>
<pre><code>result = [l1[1] for l1 in l if l1[0] == x]
['Marley']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simplistic way to do this would be :</p>
<pre><code># It would not be correct to name the list of names as 'list'
l = [['John','Barnes'], ['Bob','Marley'], ['Chris','Brown']]

#get the input and convert it into lowercase
x = input("Type the first name").lower()

#A function that prints the last name , if there is a match , Note : This would also print the last names for all first name matches.
def get_last_names_for_first_names(x):
      for first_name,last_name in l:
         if (first_name.lower() == x):
             print (last_name)
</code></pre>
<p>That's about it .</p>
</div>
<span class="comment-copy">I suggest using <code>raw_input</code> instead of <code>input</code>, Python 2.X will call <code>eval</code> on the result of your input and you may get unexpected NameErrors.</span>
<span class="comment-copy">@jacob: not Python 3.</span>
<span class="comment-copy">@vaultah Thank you for making it clear that it is different depending on the Python version.</span>
<span class="comment-copy">Please don't name a variable <code>list</code> since it will shadow the <code>in-built list object</code></span>
<span class="comment-copy">Thanks a lot. The list to dict works really well!</span>
