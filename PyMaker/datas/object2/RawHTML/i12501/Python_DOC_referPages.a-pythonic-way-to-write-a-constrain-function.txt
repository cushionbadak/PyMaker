<div class="post-text" itemprop="text">
<p>What's the best way of writing a constrain function? or is there already a builtin python function that does this?</p>
<p><strong>Option 1:</strong> </p>
<pre><code>def constrain(val, min_val, max_val):

    if val &lt; min_val: return min_val
    if val &gt; max_val: return max_val
    return val
</code></pre>
<p><strong>Option 2:</strong></p>
<pre><code>def constrain(val, min_val, max_val):

    if val &lt; min_val: 
        val = min_val

    elif val &gt; max_val: 
        val = max_val

    return val
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I do not know if this is the more "pythonic", but you can use built-in <a href="https://docs.python.org/3/library/functions.html#min"><code>min()</code></a> and <a href="https://docs.python.org/3/library/functions.html#max"><code>max()</code></a> like this:</p>
<pre><code>def constrain(val, min_val, max_val):
    return min(max_val, max(min_val, val))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case you need to do this for a lot of numbers (arrays full of them), you should probably be using Numpy, which has a built-in <a href="http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.clip.html" rel="nofollow noreferrer">clip</a> function. For simple Python programs, go with Delgan's <a href="https://stackoverflow.com/a/34837691/2647279">answer</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you can process a bunch of values at a time, you might try a list comprehension:</p>
<pre><code>a = [1,1,5,1,1]
b = [7,2,8,5,3]
c = [3,3,3,3,3]
[min(y,max(x,z)) for x,y,z in zip(a, b, c)]

[3, 2, 5, 3, 3]
</code></pre>
<p>or even NumPy:</p>
<pre><code>import numpy as np

a = np.array(a)
b = np.array(b)
c = np.array(c)

np.minimum(b, np.maximum(a, c))
np.minimum(b, np.maximum(a, 3))  # just use 3 if they are all the same

c.clip(a, b)    # or just use NumPy's clip method
np.clip(c, a, b)

array([3, 2, 5, 3, 3])
array([3, 2, 5, 3, 3])
array([3, 2, 5, 3, 3])
array([3, 2, 5, 3, 3])
</code></pre>
</div>
<span class="comment-copy">Please, explain downvote.</span>
<span class="comment-copy">"For simple Python programs, go with Delgan's answer." - Why not use  <code>clip()</code> always?</span>
<span class="comment-copy">@Fermiparadox because you typically don't want to have the enormous Numpy library as a dependency for a simple script, it is not part of the standard library. Also the return type will be a Numpy scalar, which should normally work as expected, but this might not be what you want when working with Python decimals or fractions.</span>
<span class="comment-copy">Oh @BasSwinckels got there first!</span>
