<div class="post-text" itemprop="text">
<p>I can use <code>inspect.getargspec</code> to get the parameter names of any function, including bound methods:</p>
<pre><code>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; class C(object):
...     def f(self, a, b):
...             pass
...
&gt;&gt;&gt; c = C()
&gt;&gt;&gt; inspect.getargspec(c.f)
ArgSpec(args=['self', 'a', 'b'], varargs=None, keywords=None, defaults=None)
&gt;&gt;&gt;
</code></pre>
<p>However, <code>getargspec</code> includes <code>self</code> in the argument list.</p>
<p>Is there a universal way to get the parameter list of any function (and preferably, any callable at all), excluding <code>self</code> if it's a method?</p>
<p>EDIT: Please note, I would like a solution which would on both Python 2 and 3.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/inspect.html#inspect.Signature" rel="nofollow"><code>inspect.signature</code></a> excludes the first argument of methods:</p>
<pre><code>&gt;&gt;&gt; from inspect import signature
&gt;&gt;&gt; list(signature(c.f).parameters)
['a', 'b']
</code></pre>
<p>You could also delete the first element of <code>args</code> manually:</p>
<pre><code>from inspect import ismethod, getargspec

def exclude_self(func):
    args = getargspec(func)
    if ismethod(func):
        args[0].pop(0)
    return args

exclude_self(c.f) # ArgSpec(args=['a', 'b'], ...)
</code></pre>
</div>
<span class="comment-copy">@Flippy Nope :) These answers don't talk about methods.</span>
<span class="comment-copy">Why must it be excluded? <code>self</code> <i>is</i> a parameter of those methods. Why should that be treated specially?</span>
<span class="comment-copy">@JeffMercado Because I'm going to be invoking that function by itself, and <code>self</code> will already be passed into it implicitly anyway, being a bound method.</span>
<span class="comment-copy">Is there a solution which works both on Python 2 and 3?</span>
<span class="comment-copy">@AvivCohn: I just posted it. Note that <code>getargspec</code> is gone in Python 3.6.</span>
<span class="comment-copy">To support both Python 2 and 3, I think I'll combine both yours and @Flippy's suggestions: get the arguments using <code>f.func_code.co_varnames[:f.func_code.co_argcount]</code> if it's a function or <code>f.func_code.co_varnames[1:f.func_code.co_argcount]</code> if it's a method. Thanks</span>
<span class="comment-copy">@AvivCohn: what's stopping you from using the second solution from my answer?</span>
