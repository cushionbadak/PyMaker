<div class="post-text" itemprop="text">
<p>ISO 8601?
For example django is good with this format:</p>
<pre><code>ValidationError at /locations/new_tracks/1351320785
["'1351320785' value has an invalid format. It must be in YYYY-MM-DD  HH:MM[:ss[.uuuuuu]][TZ] format."]
</code></pre>
<p>Or unixtime? 
It is important for me to have a timezone.
Asking because I don't have experience dealing with server-client systems written in two different frameworks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Django almost always internally stores dates in UTC time using a database field of appropriate date/time type for the underlying database. You cannot access this directly - when reading/writing the database it will be converted to/from a Python "datetime" object, described in detail <a href="https://docs.python.org/2/library/datetime.html#datetime.datetime" rel="nofollow noreferrer">in the Python docs</a>. Converting between Unix time (specifically POSIX time which is specified in terms of UTC) and Python datetimes in UTC time is straightforward using <a href="https://docs.python.org/2/library/datetime.html#datetime.datetime.utcfromtimestamp" rel="nofollow noreferrer">datetime.datetime.utcfromtimestamp</a> and <a href="https://stackoverflow.com/a/6999787/5343732">time.mktime(t.timetuple())</a>. Converting between Python datetimes and ISO 8601 can be done with <a href="https://pypi.python.org/pypi/iso8601" rel="nofollow noreferrer">the iso8601 package</a>.</p>
<p>If you need to support local time zone date/times, even if it's just one local time zone, you should enable time zone support as detailed in <a href="https://docs.djangoproject.com/en/1.9/topics/i18n/timezones/" rel="nofollow noreferrer">the Django time zones documentation</a>. This will add complexity, but as the documentation notes, "This shields you from subtle and unreproducible bugs around Daylight Saving Time (DST) transitions."</p>
</div>
<div class="post-text" itemprop="text">
<p>The error message says explicitly what format should you use:</p>
<blockquote>
<p>It must be in YYYY-MM-DD  HH:MM[:ss[.uuuuuu]][TZ] format.</p>
</blockquote>
<p>If all you have is a Unix time then convert it to UTC time (represented by a <code>datetime</code> object) and serialize it using <a href="https://tools.ietf.org/html/rfc3339#section-5.6" rel="nofollow">RFC 3339 time format (a profile of ISO 8601)</a>:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.utcfromtimestamp(1351320785).isoformat() + 'Z'
'2012-10-27T06:53:05Z'
</code></pre>
<p>If your android client doesn't understand rfc 3339, try variations:</p>
<pre><code>&gt;&gt;&gt; datetime.utcfromtimestamp(1351320785).isoformat(' ') + '+00:00'
'2012-10-27 06:53:05+00:00'
&gt;&gt;&gt; datetime.utcfromtimestamp(1351320785).isoformat(' ') + '+0000'
'2012-10-27 06:53:05+0000'
</code></pre>
<p><a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow"><code>.strftime()</code> method provides even more flexibility</a>.</p>
</div>
<span class="comment-copy">I don't understand why you present <code>ValidationError</code> as the evidence of: <i>"django is good with this format"</i>. (it indicates the opposite that the code does not understand the format)</span>
<span class="comment-copy">I fed him unixtime and he refused by saying It must be in YYYY-MM-DD  HH:MM[:ss[.uuuuuu]][TZ] format."] which is 8601</span>
<span class="comment-copy">Unix time is not in UTC. It is not in any timezone. Though, you can convert "seconds since the Epoch" to UTC time on POSIX easily (<code>utc_time = datetime(1970, 1, 1) + timedelta(seconds=timestamp)</code>).</span>
<span class="comment-copy">POSIX.1-2008 <a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_15" rel="nofollow noreferrer">specifies</a> that epoch time is in terms of UTC, not counting leap seconds - that's what I was referring to by Unix time here, although some systems may use slightly different semantics.</span>
<span class="comment-copy">do you understand the difference between "is always UTC" and "convert .. easily"? The fact that you can't represent some valid UTC time as "epoch time" unambiguously hints that "is" is not appropriate here. See <a href="http://stackoverflow.com/a/20035913/4279">Does Python's time.time() return the local or UTC timestamp?</a></span>
<span class="comment-copy">Sorry, I misunderstood you - I thought you meant that Unix time was a naive timestamp (with its interpretation determined by context rather than standardized). Of course Unix time is not literally UTC, just specified in terms of UTC. I edited the answer slightly to clarify.</span>
<span class="comment-copy">If "right" timezone is used then Unix time is NOT specified in terms of UTC (it uses TAI time scale in this case (1970-01-01 00:00:10 TAI epoch and you can convert to/from any <i>past</i> UTC time unambiguously (the relation for <i>future</i> (+6m) timestamps is unknown)). You can <a href="http://stackoverflow.com/a/33426779/4279">use <code>utcfromtimestamp()</code>, to get UTC time from the timestamp</a>). In general (C standard), <i>"The <code>time()</code> function returns the implementationâ€™s best approximation to the current calendar time."</i> (i.e., it is not limited to UTC, TAI or any other time scale, timezone)</span>
