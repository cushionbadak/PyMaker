<div class="post-text" itemprop="text">
<p>I have looked through several topics about calculating checksums of files in Python but none of them answered the question about one sum from multiple files. I have several files in sub directories and would like to determine if there was any change in one or more of them.
Is there a way to generate one sum from multiple files?</p>
<p>EDIT:
This is the way I do it to get a list of sums:</p>
<pre><code>checksums = [(fname, hashlib.md5(open(fname, 'rb').read()).digest()) for fname in flist]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So I made it :) This way one hash sum is generated for a file list.</p>
<pre><code>hash_obj = hashlib.md5(open(flist[0], 'rb').read())
for fname in flist[1:]:
    hash_obj.update(open(fname, 'rb').read())
checksum = hash_obj.digest()
</code></pre>
<p>Thank you PM 2Ring for your input!</p>
<p>Note that md5 has been cracked so use it only for non security critical purposes.</p>
</div>
<div class="post-text" itemprop="text">
<p>Slightly cleaner than Artur's answer. There's no need to treat the first element specially.</p>
<pre><code>def calculate_checksum(filenames):
    hash = hashlib.md5()
    for fn in filenames:
        if os.path.isfile(fn):
            hash.update(open(fn, "rb").read())
    return hash.digest()
</code></pre>
<p>(You can remove the <code>os.path.isfile()</code> if you like.)</p>
</div>
<span class="comment-copy">Sure! Using <a href="https://docs.python.org/3/library/hashlib.html" rel="nofollow noreferrer">hashlib</a>, simply call the hash object's <code>.update</code> method with the bytes of each file. But why bother? Simply hash each file separately, and see if any of the hashes have changed. That way, you also get the identity of which file(s) changed. But if you really want a multi-file hashing program, try writing it and if you get stuck <b>post your code</b> and I'll be happy to help.</span>
<span class="comment-copy">FWIW, <a href="http://unix.stackexchange.com/a/163769/88378">here</a>'s some Python 2 code I wrote for U&amp;L that does simultaneous MD5 and SHA-256 digests of a file. It process the file in blocks so it can handle files that are too big to fit in memory.</span>
<span class="comment-copy">Thank for your input! I put the code for multiple lines. I assume I can use <code>.update()</code> instead of <code>.digest()</code> but I am not sure how. Do you mean calc hash for the first file like this: <code>hash_obj = hashlib.md5(open(fname, 'rb').read())</code> and after that do <code>hash_obj.update(fname)</code>? Will it calc hash from file contents or just filename string?</span>
<span class="comment-copy">Yes, you need to use the <code>.update</code> method to supply extra data to the hashlib object. The <code>.digest </code> and <code>.hexdigest</code> methods are simply output methods that give the digest of the data that's been fed so far to the hashlib object. I don't have time write now to go into further details or write any code.  But I recommend that you <i>don't</i> try to do this all in a one-line list comprehension: it might save a tiny bit of time but it makes the code hard to work with and hard to read.</span>
