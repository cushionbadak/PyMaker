<div class="post-text" itemprop="text">
<p>I have many python packages, wrote by my colleagues and I want to write a tool to check which third packages they rely on. </p>
<p>Like this </p>
<pre><code> #it is my package, need to check,call it example.py
 #We have more than one way to import a package, It is a problem need to consider too

 from third_party_packages import third_party_function

 def my_function(arg):
    return third_party_function(arg)
</code></pre>
<p>and the tool should work like this </p>
<pre><code>result = tool(example.py)
#this result should be a dict like this structure
#{"third_party_function":["my_function",]}
#Means "my_function" relies on "third_party_function"
</code></pre>
<p>I have no idea how to do that, all I can come up implementation of this tool is read a Python file line by one line as string, and use regex to compare it.
Could you give me some advises?</p>
<p>If you don't know what I mean, please comment
 your question, I will fix it as soon as possible.
 Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can parse your files with the <a href="https://docs.python.org/3/library/ast.html" rel="nofollow"><code>ast</code></a> module and check all <code>Import</code> and <code>ImportFrom</code> statements.</p>
<p>To give you an idea, here's an example:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; tree = ast.parse('import a; from b import c')
&gt;&gt;&gt; tree.body
[&lt;_ast.Import object at 0x7f3041263860&gt;, &lt;_ast.ImportFrom object at 0x7f3041262c18&gt;]
&gt;&gt;&gt; tree.body[0].names[0].name
'a'
&gt;&gt;&gt; tree.body[1].module
'b'
&gt;&gt;&gt; tree.body[1].names[0].name
'c'
</code></pre>
<p>Your script could work like this:</p>
<ol>
<li>Parse the source file via <a href="https://docs.python.org/3/library/ast.html#ast.parse" rel="nofollow"><code>ast.parse</code></a></li>
<li>Visit each node using <a href="https://docs.python.org/3/library/ast.html#ast.walk" rel="nofollow"><code>ast.walk()</code></a></li>
<li>If a node is an <code>Import</code> or <code>ImportFrom</code> object, then inspect the names and do what you have to do.</li>
</ol>
<p>Using <code>ast</code> is way much easier and more robust than regular expressions or a custom parser.</p>
</div>
<span class="comment-copy">If you have a working environment i.e. all the packages installed in your python installation you can use <code>pip</code> like <code>pip freeze &gt; requirements.pip</code> to create file <code>requirements.pip</code> listing all the packages installed (indirectly the packages need to run your project)</span>
<span class="comment-copy">This is not an easy question to answer.</span>
<span class="comment-copy">Thank for your advise, unfortunately, not all package installed by pip, some packages wrote by ourselves. I need to deal them to.</span>
<span class="comment-copy">Using a line by line search would probably be the best, the alternative I can think of would involve running each script and then checking what's imported to the namespace. But that would likely be more unwieldy and less reliable anyway.</span>
<span class="comment-copy">You could use some recursion and reflection to accomplish this. Use __import__() to dynamically import a Python file which I think exposes things like what other modules it loads. I'm not sure how well that would work with local imports, though.</span>
<span class="comment-copy">Thank you so much, and it looks like work for me~ I will test it tomorrow we I arrive the office immediately~ And I will post the result~</span>
<span class="comment-copy">It works for me ! Thank you soooooooooooooooooo much !</span>
