<div class="post-text" itemprop="text">
<p>How do I get the numbers after a decimal point?</p>
<p>For example, if I have <code>5.55</code>, how do i get <code>.55</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>An easy approach for you:</p>
<pre><code>number_dec = str(number-int(number))[1:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>5.55 % 1
</code></pre>
<p>Keep in mind this won't help you with floating point rounding problems. I.e., you may get:</p>
<pre><code>0.550000000001
</code></pre>
<p>Or otherwise a little off the 0.55 you are expecting.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/math.html#math.modf" rel="noreferrer">modf</a>:</p>
<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; frac, whole = math.modf(2.5)
&gt;&gt;&gt; frac
0.5
&gt;&gt;&gt; whole
2.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about:</p>
<pre><code>a = 1.3927278749291
b = a - int(a)

b
&gt;&gt; 0.39272787492910011
</code></pre>
<p>Or, using numpy:</p>
<pre><code>import numpy
a = 1.3927278749291
b = a - numpy.fix(a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using the <a href="http://docs.python.org/library/decimal.html" rel="noreferrer"><code>decimal</code></a> module from the standard library, you can retain the original precision and avoid floating point rounding issues:</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal('4.20') % 1
Decimal('0.20')
</code></pre>
<p>As <a href="https://stackoverflow.com/users/416467/kindall">kindall</a> <a href="https://stackoverflow.com/questions/3886402/python-how-to-get-numbers-after-decimal-point/3886439#comment-4138283">notes</a> in the comments, you'll have to convert native <code>float</code>s to strings first.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try Modulo:</p>
<pre><code>5.55%1 = 0.54999999999999982
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import math
orig = 5.55
whole = math.floor(orig)    # whole = 5.0
frac = orig - whole         # frac = 0.55
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>similar to the accepted answer, even easier approach using strings would be</p>
<pre><code>if "." in str(number): # quick check if it is decimal
    number_dec = str(number).split(".")[1]

if 'e-' in str(number): # scientific notation
    number_dec = format(float(number_dec), '.%df'%(len(number_dec.split(".")[1].split("e-")[0])+int(number_dec.split('e-')[1])))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; n=5.55
&gt;&gt;&gt; if "." in str(n):
...     print "."+str(n).split(".")[-1]
...
.55
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use floor and subtract the result from the original number:</p>
<pre><code>&gt;&gt; import math #gives you floor.
&gt;&gt; t = 5.55 #Give a variable 5.55
&gt;&gt; x = math.floor(t) #floor returns t rounded down to 5..
&gt;&gt; z = t - x #z = 5.55 - 5 = 0.55
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a solution I tried:</p>
<pre><code>num = 45.7234
(whole, frac) = (int(num), int(str(num)[(len(str(int(num)))+1):]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Float numbers are not stored in decimal (base10) format. Have a read through the <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">python documentation</a> on this to satisfy yourself why. Therefore, to get a base10 representation from a float is not advisable.</p>
<p>Now there are tools which allow storage of numeric data in decimal format. Below is an example using the <code>Decimal</code> library.</p>
<pre><code>from decimal import *

x = Decimal('0.341343214124443151466')
str(x)[-2:] == '66'  # True

y = 0.341343214124443151466
str(y)[-2:] == '66'  # False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Example:</p>
<pre><code>import math
x = 5.55
print((math.floor(x*100)%100))
</code></pre>
<p>This is will give you two numbers after the decimal point, 55 from that example. If you need one number you reduce by 10 the above calculations or increase depending on how many numbers you want after the decimal.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sometimes trailing zeros matter</p>
<pre><code>In [4]: def split_float(x):
   ...:     '''split float into parts before and after the decimal'''
   ...:     before, after = str(x).split('.')
   ...:     return int(before), (int(after)*10 if len(after)==1 else int(after))
   ...: 
   ...: 

In [5]: split_float(105.10)
Out[5]: (105, 10)

In [6]: split_float(105.01)
Out[6]: (105, 1)

In [7]: split_float(105.12)
Out[7]: (105, 12)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import math

x = 1245342664.6
print( (math.floor(x*1000)%1000) //100 )
</code></pre>
<p>It definitely worked</p>
</div>
<div class="post-text" itemprop="text">
<p>What about:</p>
<pre><code>a = 1.234
b = a - int(a)
length = len(str(a))

round(b, length-2)
</code></pre>
<p>Output:<br/>
<code>print(b)</code><br/>
<code>0.23399999999999999</code><br/>
<code>round(b, length-2)</code><br/>
<code>0.234</code> </p>
<p>Since the round is sent to a the length of the string of decimals ('0.234'), we can just minus 2 to not count the '0.', and figure out the desired number of decimal points. This should work most times, unless you have lots of decimal places and the rounding error when calculating b interferes with the second parameter of round.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another crazy solution is (without converting in a string):</p>
<pre><code>number = 123.456
temp = 1

while (number*temp)%10 != 0:
    temp = temp *10
    print temp
    print number

temp = temp /10
number = number*temp
number_final = number%temp
print number_final
</code></pre>
</div>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/questions/3454085/in-python-how-do-i-split-a-number-by-the-decimal-point">In Python how do I split a number by the decimal point?</a></span>
<span class="comment-copy">Exercise for the reader: make it work for numbers larger than or equal to 10</span>
<span class="comment-copy"><code>number_dec = str(number-int(number)).split('.')[1]</code></span>
<span class="comment-copy">Downvote because this is an unnecessarily complicated approach. The answer I sought was the next answer, <code>5.55 % 1</code>, which is also a more generally useful answer--one can use the modulo division approach in multiple languages, whereas the above answer is Python-specific.</span>
<span class="comment-copy">String based solutions are horrible if performance is important for your app.</span>
<span class="comment-copy"><code>str(5.55 - int(5.55))[1:]</code> returns <code>.5499999999999998</code> instead of the <code>.55</code> mentioned in the question.</span>
<span class="comment-copy">As for <code>modf</code>, it can screw the precision as well: <code>math.modf(5.55)</code> will return (0.5499999999999998, 5.0).</span>
<span class="comment-copy">does anyone know which would be the faster operation,  this method described above,  or: float b = a - int(a)  ?  i suspect the later, but wanted to see if there was confirmation</span>
<span class="comment-copy">@hokkuk Measure it?</span>
<span class="comment-copy">this does not work for negative numbers</span>
<span class="comment-copy">On a Raspberry Pi this method <code>x%1</code> was almost twice as fast as the <code>x-int(x)</code> and <code>modf(x)[0]</code> methods (the timings were 980ns, 1.39us, and 1.47us averaged over 1000000 runs). My value for <code>x</code> was always positive so I did not have to worry about that.</span>
<span class="comment-copy">This should be the accepted answer @l--''''''---------''''''''''''</span>
<span class="comment-copy">Good solution, but, <code>math.modf(2.53) = (0.5299999999999998, 2.0)</code> expected answer is 0.53</span>
<span class="comment-copy">@LordLoh. that's because of floating point rounding, and will happen with any method.</span>
<span class="comment-copy">For the benefit of the original question-asker: floats must be converted to a strings before they can be converted to Decimals.  So if you have <code>n = 5.55</code>, n is a float, and you should do <code>Decimal(str(n)) % 1</code> to get the fractional part. (This isn't necessary if you have an integer, but it doesn't hurt.)</span>
<span class="comment-copy">@kindall: Aye, good point.</span>
<span class="comment-copy">@intuited: It doesn't need to be decimal, it works also for float: <code>10.0/3 % 1</code> at least on my system</span>
<span class="comment-copy">You can use from_float instead of using a string. d = Decimal.from_float(1.2)</span>
<span class="comment-copy">@intuited How does one obtain the decimal part as an integer? I have tried to_integer() methods but the type is still Decimal.</span>
<span class="comment-copy">&gt;&gt;&gt; frac 0.5499999999999998</span>
<span class="comment-copy"><code>number = 5.55; "." in number</code> gives <code>TypeError: argument of type 'float' is not iterable</code>. And what would you do if <code>number = 1e-5</code>?</span>
<span class="comment-copy">@mark the question is How do I get the numbers after a decimal point? so user is expecting float in decimal notation (not scientific notation), I've added a block for scientific notation too</span>
<span class="comment-copy">A number is a number; it's only <i>representations</i> of a number that might be in scientific notation. So "float in decimal notation" doesn't make much sense here; by the time Python sees it, it's just a <code>float</code>; Python doesn't keep any knowledge of what format it was originally expressed in. My <code>number = 1e-5</code> example applies equally well to <code>number = 0.00001</code>: the <code>str</code> representation of the number is in scientific notation. You'll want to deal with <code>e+</code> as well as <code>e-</code>, by the way.</span>
<span class="comment-copy">This is OK for garden-variety numbers, but doesn't work so well for numbers large (or small) enough to require scientific notation.</span>
<span class="comment-copy">If you're going to <code>import math</code>, why not just use <code>math.modf()</code>?</span>
<span class="comment-copy">@ire_and_curses: I am providing an alternative solution to the problem.</span>
<span class="comment-copy">floor does the same as casting to a int so could replace math.floor(t) with int(t)</span>
<span class="comment-copy">@QuantumKarl No, they are different. <code>math.floor(-1.1) == -2</code> but <code>int(-1.1) == -1</code>. Though for this question using <code>int</code> is more correct.</span>
<span class="comment-copy">This is nice because it return a non-fractional value, but will break on negative numbers</span>
<span class="comment-copy">Unfortunately it doesn't work most of the time. @Meow</span>
<span class="comment-copy">what does the operator // mean?</span>
<span class="comment-copy"><a href="https://stackoverflow.com/a/183870/2146239">// vs /</a></span>
<span class="comment-copy">Any explanation?</span>
