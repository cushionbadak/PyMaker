<div class="post-text" itemprop="text">
<p>I have an example:</p>
<pre><code>import requests
with requests.Session() as s:
  s.get('http://python.su/')
</code></pre>
<p>Does <code>requests.get</code> use the same structure as this example?</p>
<p>Can you give me examples where <code>with</code> statement is required?</p>
</div>
<div class="post-text" itemprop="text">
<p>As explained in the <a href="http://docs.python-requests.org/en/latest/user/advanced/#session-objects" rel="nofollow">documentation</a>, the <code>Session()</code> can be used as a <em>context manager</em> to be able to close it and all the underlying used adapters <em>in a clean fashion</em>:</p>
<blockquote>
<p>Sessions can also be used as context managers:</p>
<pre><code>with requests.Session() as s:
    s.get('http://httpbin.org/cookies/set/sessioncookie/123456789') 
</code></pre>
<p>This will make sure the session is closed as soon as the with block is
  exited, even if unhandled exceptions occurred.</p>
</blockquote>
<p>The <code>Session</code> can and is supposed to be shared across multiple requests persisting cookies and other parameters and reusing the same TCP connection, but the <code>requests.get()</code> on the other hand is just a single call that would produce a single <code>Response</code> instance - there is no point in context manager for it.</p>
<p>Please read the following to get a better understanding of Context Managers:</p>
<ul>
<li><a href="https://www.python.org/dev/peps/pep-0343/" rel="nofollow">PEP 343</a></li>
<li><a href="http://eigenhombre.com/2013/04/20/introduction-to-context-managers/" rel="nofollow">Introduction to Context Managers in Python</a></li>
<li><a href="https://docs.python.org/2/reference/datamodel.html#context-managers" rel="nofollow">With Statement Context Managers</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If you read the documentation for <a href="http://docs.python-requests.org/en/latest/user/advanced/" rel="nofollow"><code>requests.Session</code></a></p>
<blockquote>
<p>Sessions can also be used as context managers:</p>
<pre><code>with requests.Session() as s:
    s.get('http://httpbin.org/cookies/set/sessioncookie/123456789')
</code></pre>
<p><strong>This will make sure the session is closed as soon as the with block is exited</strong>, even if unhandled exceptions occurred.</p>
</blockquote>
<p>Making use of the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow"><code>with</code></a> statement is a common idiom in Python to handle context management:</p>
<blockquote>
<p>The <code>with</code> statement is used to wrap the execution of a block with methods defined by a context manager (see section With Statement Context Managers). This allows common <code>try</code>...<code>except</code>...<code>finally</code> usage patterns to be encapsulated for convenient reuse.</p>
</blockquote>
</div>
<span class="comment-copy">You should read up on context managers</span>
<span class="comment-copy">It appears to be a mechanism to shorten code.</span>
<span class="comment-copy">Think about it in simplistic terms. A session, according to its English definition, is a period of reserved, allocated time which of course must begin and end. In very much the same way, Python context managers initially open and are then closed following the execution of the code block in the <code>with</code> statement.</span>
