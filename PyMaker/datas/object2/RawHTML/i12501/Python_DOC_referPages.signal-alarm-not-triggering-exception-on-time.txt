<div class="post-text" itemprop="text">
<p>I've slightly modified the signal example from the <a href="https://docs.python.org/2/library/signal.html#signal.alarm" rel="noreferrer">official docs</a> (bottom of page).</p>
<p>I'm calling <code>sleep 10</code> but I would like an alarm to be raised after 1 second. When I run the following snippet it takes way more than 1 second to trigger the exception (I think it runs the full 10 seconds).</p>
<pre><code>import signal, os

def handler(signum, frame):
    print 'Interrupted', signum
    raise IOError("Should after 1 second")

signal.signal(signal.SIGALRM, handler)
signal.alarm(1)

os.system('sleep 10')

signal.alarm(0)
</code></pre>
<p>How can I be sure to terminate a function after a timeout in a single-threaded application?</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/signal.html" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>A Python signal handler does not get executed inside the low-level (C)
  signal handler. Instead, the low-level signal handler sets a flag
  which tells the virtual machine to execute the corresponding Python
  signal handler at a later point(for example at the next bytecode
  instruction).</p>
</blockquote>
<p>Therefore, a signal such as that generated by <code>signal.alarm()</code> can't terminate a function after a timeout in some cases. Either <a href="https://stackoverflow.com/a/16778026/4279">the function should cooperate by allowing other Python code to run (e.g., by calling <code>PyErr_CheckSignals()</code> periodically in C code)</a> or you should <a href="https://stackoverflow.com/a/26664130/4279">use a separate process, to terminate the function in time</a>.</p>
<p>Your case can be fixed if you use <code>subprocess.check_call('sleep 10'.split())</code> instead of <code>os.system('sleep 10')</code>.</p>
</div>
<span class="comment-copy">Doesn't your call to the system <code>sleep</code> suspend everything, including the signal timer? The alarm doesn't go off because it's asleep too. You probably have to push that <code>sleep</code> call into a separate process with the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a> module.</span>
