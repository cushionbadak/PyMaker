<div class="post-text" itemprop="text">
<p>The sphinx-doc napoleon Google style docstrings example <a href="http://www.sphinx-doc.org/en/1.3.4/ext/example_google.html#example-google" rel="nofollow">here</a> for version 1.3.4 shows that optional arguments for a function/method should be documented as follows:</p>
<pre><code>param2 (str, optional): The second parameter. Defaults to None.
  Second line of description should be indented.
</code></pre>
<p>But the same page for version 1.4a0 <a href="http://www.sphinx-doc.org/en/master/ext/example_google.html#example-google" rel="nofollow">here</a> shows the following way to do the same thing:</p>
<pre><code>param2 (Optional[str]): The second parameter. Defaults to None.
    Second line of description should be indented.
</code></pre>
<p>But I don't see any explanation of this new syntax in <a href="http://www.sphinx-doc.org/en/master/ext/napoleon.html#confval-napoleon_use_param" rel="nofollow">the documentation</a>. Where can I find more information about new syntax supported in Google style docstrings with the napoleon extension of sphinx-doc?</p>
</div>
<div class="post-text" itemprop="text">
<h3>In a tl;dr fashion:</h3>
<p>Looking at the documentation in the beginning of <a href="http://www.sphinx-doc.org/en/master/ext/example_google.html#example-google" rel="nofollow">function <code>module_level_function</code> that you linked</a>, one can see that: </p>
<pre><code>def module_level_function(param1, param2=None, *args, **kwargs):
    """This is an example of a module level function.

    Function parameters should be documented in the ``Args`` section. The name
    of each parameter is required. The type and description of each parameter
    is optional, but should be included if not obvious.

    Parameter types -- if given -- should be specified according to
    `PEP 484`_, though `PEP 484`_ conformance isn't required or enforced.

    # ^^^^^ this! ^^^^
</code></pre>
<p>The final line contains a hint. Apparently, the notation introduced in <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow"><code>PEP 484</code></a> assisted by the <strong><a href="https://docs.python.org/3/library/typing.html" rel="nofollow"><code>typing</code></a></strong> module is what you're seeing.</p>
<hr/>
<h3>A small intro on the notation:</h3>
<p><code>PEP 484</code> is based on function annotations as described in <a href="https://www.python.org/dev/peps/pep-3107/" rel="nofollow"><code>PEP 3107</code></a>; essentially each function parameter can have an optional type specifier after its name. So, for a function like:</p>
<pre><code>def foo(a, b): 
    pass
</code></pre>
<p>You could annotate their types in the following way:</p>
<pre><code>def foo(a: int, b: str) -&gt; None:
    pass
</code></pre>
<p>The introduction of type hinting brought with it <em>a need to formalize the way types will be indicated</em>; this is where the <code>typing</code> module comes in.</p>
<p>The <code>typing</code> module contains a good set of abstract types (and, generally, type theory mumbo-jumbo) for you to specify additional types other than standard built-ins like <code>int</code>, <code>str</code> et al. For example, the <strong><a href="https://docs.python.org/3/library/typing.html#typing.Optional" rel="nofollow"><code>Optional[str]</code></a></strong> notation indicates that the parameter can take either a <code>str</code> type or a 'type' of <code>None</code> i.e it's optionally a string. </p>
<p>So in a nutshell, they're using the notation defined with the introduction of type hints for documenting the type of the parameters. This means that if you have a function that takes an argument that is a <em>List of integers</em>:</p>
<pre><code> def func(param1)
</code></pre>
<p>The documentation for it should look something like this:</p>
<pre><code>param1 (List[int]): The first parameter containing a list of ints
</code></pre>
<p>Where <a href="https://docs.python.org/3/library/typing.html#typing.List" rel="nofollow"><code>List[int]</code></a> comes from the notation in the typing module.</p>
<hr/>
<h3>Some more examples:</h3>
<p>Some examples where this specific notation is defined and furthe explained can be found in the <a href="http://mypy-lang.org/examples.html" rel="nofollow">documentation of <code>mypy</code></a> (a static checker that inspired <code>PEP 484</code>). Common cases that one might need to document in their code are contained in the <a href="http://mypy.readthedocs.org/en/latest/builtin_types.html#built-in-types" rel="nofollow">table of built-in types</a>:</p>
<pre><code>Type                Description
----                -----------

int                 integer of arbitrary size
float               floating point number
bool                boolean value
str                 unicode string
bytes               8-bit string
object              an arbitrary object (object is the common base class)
List[str]           list of str objects
Dict[str, int]      dictionary from str keys to int values
Iterable[int]       iterable object containing ints
Sequence[bool]      sequence of booleans
Any                 dynamically typed value with an arbitrary type
</code></pre>
<p>Others, like <a href="http://mypy.readthedocs.org/en/latest/kinds_of_types.html" rel="nofollow"><code>Any, Union</code> are defined here</a> while generic notation described <a href="http://mypy.readthedocs.org/en/latest/generics.html" rel="nofollow">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>Optional[X]</code> syntax isn't specific to sphinx-doc, as far as I understand. It's from the <code>typing</code> module for type hints: <a href="https://docs.python.org/3/library/typing.html" rel="nofollow">https://docs.python.org/3/library/typing.html</a></p>
</div>
