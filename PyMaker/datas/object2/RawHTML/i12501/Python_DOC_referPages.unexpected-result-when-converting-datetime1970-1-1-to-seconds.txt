<div class="post-text" itemprop="text">
<p>In Python 3.5, when I convert POSIX origin <code>1970-01-01</code> to timestamp (in seconds) instead of <code>0</code> I get the following result:</p>
<pre><code>import datetime as dt
t = dt.datetime(1970,1,1)
t.timestamp()
-10800.0
</code></pre>
<p>Expected <code>0</code> is produced by:</p>
<pre><code>t = dt.datetime(1970,1,1,3)
t.timestamp()
0.0
</code></pre>
<p>Both results are quite unexpected to me. What could be a reason for such a behaviour?</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the docs: <em>Naive datetime instances are assumed to represent local time</em></p>
<ul>
<li><p><a href="https://docs.python.org/3/library/datetime.html" rel="nofollow">https://docs.python.org/3/library/datetime.html</a></p></li>
<li><p>timestamp: <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp" rel="nofollow">https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp</a></p></li>
</ul>
<p>You get a negative count so I guess you happen to be at UTC-3 (10800 / 60 / 60) (and you get a 0 when adding 3 hours)</p>
<p>Make a timezone aware date and you should be back at 0.</p>
</div>
<span class="comment-copy">Hint: timezone.</span>
<span class="comment-copy">Thanks, would you post it as answer?</span>
<span class="comment-copy">you need UTC timezone, to get zero here: <a href="http://stackoverflow.com/a/8778548/4279"><code>t.replace(tzinfo=timezone.utc).timestamp()</code></a></span>
<span class="comment-copy">@J.F.Sebastian That's cool, thanks!</span>
<span class="comment-copy">I suspect a timezone aware date should be of UTC timezone to be back to 0...</span>
<span class="comment-copy">Indeed. I meant the timezone of your current local time</span>
