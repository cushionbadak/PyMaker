<div class="post-text" itemprop="text">
<p>I have a program that models kingdoms and other groups (called 'factions' in my code).</p>
<pre><code>class Faction:
    def __init__(self, name, allies=[]):
        self.name = name
        self.allies = allies

    def is_ally_of(self, other_faction):
        if self in other_faction.allies:
            return True
        else:
            return False

    def become_ally(self, other_faction, both_ally=True):
        """ If both_ally is false, this does *not* also 
            add self to other_faction's ally list """
        if self.is_ally_of(other_faction):
            print("They're already allies!")
        else:
            self.allies.append(other_faction)
            if both_ally == True:
                other_faction.become_ally(self, False)

RezlaGovt = Faction("Kingdom of Rezla")
AzosGovt = Faction("Azos Ascendancy")
</code></pre>
<p>I want to be able to call a factions become_ally() method to add factions to the ally lists, like this:</p>
<pre><code>RezlaGovt.become_ally(AzosGovt) # Now AzosGovt should be in RezlaGovt.allies,
                                # and RezlaGovt in AzosGovt.allies
</code></pre>
<p>What actually happens is this:</p>
<pre><code>RezlaGovt.become_ally(AzosGovt)
# prints "They're already allies!"
# now AzosGovt is in the allies list of both AzosGovt and RezlaGovt, 
# but RezlaGovt isn't in any allies list at all.
</code></pre>
<p>Whenever I try to call become_ally(), the code should check to make sure they aren't already allies. This is the part that isn't working. Every time I call become_ally(), it prints "They're already allies!", regardless of if they actually are.</p>
<p>I also tried to use <code>if self in other_faction.allies:</code>, but that had the same problem.</p>
<p>I strongly suspect that the problem is with my use of <code>self</code>, but I don't know what terms to Google for more information. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/faq/programming.html#why-are-default-values-shared-between-objects" rel="nofollow">You can't use mutable arguments as the default argument to a function.</a></p>
<pre><code>def __init__(self, name, allies=[]):
</code></pre>
<p>When the default is used, it's the <em>same</em> <code>list</code> each time, so they have the same <code>allies</code>; mutating one changes the other because they're actually the same thing.</p>
<p>Change to:</p>
<pre><code>def __init__(self, name, allies=None):
   if allies is None:
       allies = []
</code></pre>
<p>Alternatively, copy the <code>allies</code> argument unconditionally (so you're not worried about a reference to it surviving outside the class and getting mutated under the class):</p>
<pre><code>def __init__(self, name, allies=[]):
    self.allies = list(allies)  # Which also guarantees a tuple argument becomes list
                                # and non-iterable args are rejected
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Change this function.  </p>
<pre><code>def is_ally_of(self, other_faction):
        if other_faction in self.allies:
            return True
        else:
            return False
</code></pre>
<p>Check your own data not that of the passed in object.</p>
<p>Also</p>
<pre><code>def __init__(self, name, allies=[]):
</code></pre>
<p>Is a bug waiting to happen. Your <code>allies</code> list will be a static list shared between all instances. Instead use</p>
<pre><code>def __init__(self, name, allies=None):
        self.name = name
        self.allies = allies or []
</code></pre>
</div>
<span class="comment-copy">As a side note <code>if x in y: return True else: return False</code> can be simplified as <code>return x in y</code></span>
<span class="comment-copy">And <code>if x == True:</code> is <i>usually</i> best expressed as <code>if x:</code> (which accepts anything truthy, but Pythonic code isn't usually hung up on using <code>bool</code> specifically.</span>
<span class="comment-copy">The first suggestion is not actually a problem depending on precise design goals (the phrasing is problematic; usually, allies is a mutual thing so it can't be one way, but this code allows one way alliances).</span>
<span class="comment-copy">Yes, I did design it to allow one-way alliances, in case one nation secretly declares war without the other nation knowing, or some other strange situation that might require it.</span>
<span class="comment-copy">The function is probably better named <code>is_ally</code>. There is a mixing up of intent in your <code>become_ally</code> function. It has logic saying if I'm not an ally of X then add X to my ally list, whereas it should probably be more like, if X is not my ally add X to my list of allies.</span>
