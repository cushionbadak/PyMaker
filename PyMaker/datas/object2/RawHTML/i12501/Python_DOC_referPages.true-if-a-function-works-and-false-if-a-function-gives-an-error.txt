<div class="post-text" itemprop="text">
<p>Is there any way in python (built-in function or something) to check if a function execution fails due to an error or works? And return either true or false depending on the case it is</p>
<p>Example of what I would expect to happen:</p>
<p>Builtin method example: <code>iserror</code></p>
<pre><code>iserror(float('123')) #returns False, as no error on float('123') occurs
iserror(float('as1f')) #returns True, as it is not possible to convert to float the string ('as1f')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no such function. You couldn't build a function that does what you ask for, because by the time Python calls <code>iserror()</code>, the <code>float('123')</code> or <code>float('as1f')</code> expression has <em>already</em> been executed; if an exception is raised there, <code>iserror()</code> is never executed.</p>
<p>You'd have to delegate calling to the function:</p>
<pre><code>def iserror(func, *args, **kw):
    try:
        func(*args, **kw)
        return False
    except Exception:
        return True
</code></pre>
<p>then use it like this:</p>
<pre><code>iserror(float, '123')   # False
iserror(float, 'as1f')  # True
</code></pre>
<p>Catching all errors is not that great an idea however. Although the above function tries to do the right thing by catching <code>Exception</code> (and thus avoids catching <code>SystemExit</code> or <code>KeyboardInterrupt</code>), it <em>will</em> catch <code>MemoryError</code>, which indicates you ran out of memory, not that the arguments to the function you tested were wrong!</p>
<p>Always try to catch <em>specific</em> exceptions; you could extend <code>iserror()</code> to take a specific exception:</p>
<pre><code>def iserror(func, *args, **kw):
    exception = kw.pop('exception', Exception)
    try:
        func(*args, **kw)
        return False
    except exception:
        return True
</code></pre>
<p>then only catch <code>ValueError</code> to test your <code>float()</code> calls:</p>
<pre><code>iserror(float, '123', exception=ValueError)   # False
iserror(float, 'as1f', exception=ValueError)  # True
</code></pre>
<p>This is no longer all that readable. I'd just stick with a simple inline <code>try..except</code> wherever you want to use a function call that could raise an exception, because then you can tailor your response to the specific exception without having to repeat yourself to handle the result after you determined there won't be an error:</p>
<pre><code>while True:
    value = raw_input('Please give a number: ')
    try:
         value = int(value)
         break
    except ValueError:
         print "Sorry, {} is not a valid number, try again".format(value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While there is no such function for the general case, there is one that solves your particular problem:</p>
<pre><code>x = '123'
x.isnumeric()
</code></pre>
<p>returns <code>True</code></p>
<p>while </p>
<pre><code>x = 'as1f'
x.isnumeric()
</code></pre>
<p>returns <code>False</code></p>
</div>
<span class="comment-copy">how about <code>try: function(); out = True; except: out = False</code>?</span>
<span class="comment-copy">That's kind of what a try-catch block is for, will that not work for your use case? To get something like this to work, you'd have to wrap the function call in a Lamda, anyway.</span>
<span class="comment-copy">Sounds like you want to read up a bit on exception handling.  Python 2: <a href="https://docs.python.org/2/tutorial/errors.html" rel="nofollow noreferrer">docs.python.org/2/tutorial/errors.html</a>  Python 3: <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/errors.html</a></span>
<span class="comment-copy">Python <a href="https://docs.python.org/2/tutorial/errors.html#errors-and-exceptions" rel="nofollow noreferrer">error handling</a></span>
