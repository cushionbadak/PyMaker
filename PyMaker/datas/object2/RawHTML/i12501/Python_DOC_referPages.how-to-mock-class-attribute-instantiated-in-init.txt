<div class="post-text" itemprop="text">
<p>I'm trying to mock the "self.api.friends.get" method in VKAuth class:</p>
<pre><code>import vk

class VKAuth(object):
    def __init__(self, access_token, user):
        self.session = vk.Session(access_token = access_token)
        self.api = vk.API(self.session)

    def follow(self):
        vk_friends = self.api.friends.get()
</code></pre>
<p>from the test module test_views.py:</p>
<pre><code>from mock import patch
from ..auth_backends.vk_backend import VKAuth

class AddUsersToList(TestCase):
    def test_auth_vk(self, mock_get):
         ... etc ...
        auth_token = 'ceeecdfe0eb4bf68ceeecdfe0eb4bf68ceeecdfe0eb4bf68652530774ced6cbc8cba0'
        token = user.auth_token.key
        self.client.defaults['HTTP_AUTHORIZATION'] = 'Token {}'.format(token)
        with patch.object(accounts.auth_backends.vk_backend.VKAuth, 'api'): #point where we're mocking
            response = self.client.post(reverse('auth-social', kwargs=dict(backend='vk')), dict(access_token=auth_token), follow=True)
</code></pre>
<p>having created instance of VKAuth class during the post call to 'auth-social' above in SNView class-based view:</p>
<pre><code>class SNView(generics.GenericAPIView):
    serializer_class = serializers.AuthSocialSerializer
    permission_classes = (rest_permissions.IsAuthenticated)

    def post(self, request, backend, *args, **kwargs):
        s = self.get_serializer(data=request.DATA)

        if s.is_valid():
            auth_backends = {
                'vk': VKAuth,
                'facebook': FBAuth
            }

            if backend in auth_backends:
                auth_backend = auth_backends[backend](access_token=s.data['access_token'], user=self.request.user)
</code></pre>
<p>And I get an error:</p>
<pre><code>AttributeError: &lt;class 'accounts.auth_backends.vk_backend.VKAuth' doens't have the attribute 'api'
</code></pre>
<p><strong>What should I write istead of the current patch.object to reach api.friends.get and mock it?</strong> </p>
<p><strong>UPD:</strong></p>
<p>To be more precise, I want some equivalent of:</p>
<pre><code>    auth_token = 'ceeecdfe0eb4bf68ceeecdfe0eb4bf68ceeecdfe0eb4bf68652530774ced6cbc8cba0'
    user = User.objects.get(id = 2)
    vk_auth = VKAuth(auth_token, user)

    vk_ids=[111111,2222222,3333333,44444444]
    vk_auth.authenticate()
    vk_auth.api.friends = MagicMock(name='get', return_value=None)
    vk_auth.api.friends.get = MagicMock(name='get', return_value=vk_ids)
    data = vk_auth.follow()
</code></pre>
<p>but mock it the moment before we make request to the django-rest-framework api via self.client.post().</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>You are patching the wrong thing. In <code>VKAuth</code>:</p>
<pre><code>self.api = vk.API(self.session)
</code></pre>
<p>add <code>api</code> attribute to <code>VKAuth</code> <code>self</code> <strong>object</strong>. When you call</p>
<pre><code>patch.object(accounts.auth_backends.vk_backend.VKAuth, 'api')
</code></pre>
<p>you are patching the <code>api</code> static attribute of <code>VKAuth</code> class and not the object attribute.</p>
<p>You should patch <code>vk.API</code> instead. </p>
<pre><code>with patch('vk.API', autospec=True) as mock_api:
    response = self.client.post(reverse('auth-social', kwargs=dict(backend='vk')), dict(access_token=auth_token), follow=True)
</code></pre>
<p>Notes :</p>
<ol>
<li>Use <a href="https://docs.python.org/3/library/unittest.mock.html#patch-object" rel="nofollow"><code>patch.object</code></a> only if you really know why you need it instead simple <code>patch</code>.</li>
<li><code>autospec=True</code> is not mandatory but <a href="https://docs.python.org/3/library/unittest.mock.html#autospeccing" rel="nofollow">I strongly encourage to use it</a>.</li>
<li>In the <code>patch</code> context <code>self.api</code> will be equal to <code>mock_api.return_value</code> because call <code>vk.API(self.session)</code> is like call <code>mock_api()</code>; in other words <code>mock_api</code> is the mock object used to replace the <code>vk.API</code> reference.</li>
<li>Take a look to <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow">where to patch</a>, you can find it very useful.</li>
</ol>
<p>Now if you want fill your <code>mock_api.return_value</code> by some behavior you can configure it in <code>with</code> context:</p>
<pre><code>with patch('vk.API', autospec=True) as mock_api:
    m_api = mock_api.return_value
    m_api.friends.return_value = None
    m_api.friends.get.return_value = vk_ids
    .... Your test
</code></pre>
</div>
<span class="comment-copy">In my case it returns: AttributeError: Mock object has no attribute 'friends'</span>
<span class="comment-copy">Remove autospec=true</span>
<span class="comment-copy">Inside of the vk.API I see:  class API(object): ...     def <b>getattr__(self, method_name):         return Request(self, method_name)  class Request(object):     __slots</b> = ('_api', '_method_name', '_method_args')      def __init__(self, api, method_name):         self._api = api         self._method_name = method_name      def __getattr__(self, method_name):         return Request(self._api, self._method_name + '.' + method_name)      def __call__(self, **method_args):         self._method_args = method_args         return self._api._session.make_request(self)</span>
<span class="comment-copy">As I removed autospec=True from patch, it outputs: ValueError: need more than 0 values to unpack  Traceback (most recent call last):   File "/home/pavel/api/accounts/tests/test_views.py", line 266, in test_auth_vk     response = self.client.post(reverse('auth-social', kwargs=dict(backend='vk')), dict(access_token=auth_token), follow=True)</span>
<span class="comment-copy">I cannot help you now. I will come back to it later</span>
