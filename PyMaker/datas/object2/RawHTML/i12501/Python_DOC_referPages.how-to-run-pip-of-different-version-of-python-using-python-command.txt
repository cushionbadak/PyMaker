<div class="post-text" itemprop="text">
<p>I'm now currently using Python on ubuntu 15.10</p>
<p>But in my OS, I have many different python version installed:</p>
<ul>
<li>Python (2.7.9) </li>
<li>Python3 (3.4.3)</li>
<li>Python3.5</li>
<li>PyPy</li>
</ul>
<p>So, I got mess about the version of their package environment, for example, if I run:</p>
<pre><code>pip3 install django
</code></pre>
<p>In fact I cannot import django inside <code>python3.5</code>.</p>
<p>Is there any efficiently way to call the relating version of <code>pip</code>?</p>
<p><em>PS: Don't suggest that I use virtualenv, I know about it and am seeking another solution.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Finally I found the solution myself, see the Docs:</p>
<p><a href="https://docs.python.org/3/installing/index.html?highlight=pip#work-with-multiple-versions-of-python-installed-in-parallel">https://docs.python.org/3/installing/index.html?highlight=pip#work-with-multiple-versions-of-python-installed-in-parallel</a></p>
<p>Just call:</p>
<pre><code>pythonXX -m pip install SomePackage
</code></pre>
<p>That would work separately for each version of installed python.</p>
<p>Also, according to the docs, if we want to do the same thing in windows, the command is a bit different:</p>
<pre><code>py -2   -m pip install SomePackage  # default Python 2
py -2.7 -m pip install SomePackage  # specifically Python 2.7
py -3   -m pip install SomePackage  # default Python 3
py -3.4 -m pip install SomePackage  # specifically Python 3.4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about using <a href="https://github.com/yyuu/pyenv" rel="nofollow">pyenv</a>?</p>
<p>You can switch the version.</p>
<pre><code>$ pyenv install 2.7.X
$ pyenv install 3.5.X
$ pyenv local 2.7.X
$ pyenv global 3.5.X
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This solution worked for me:</p>
<pre><code>sudo python2.7 -m pip install [package name]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not using anaconda?</p>
<p>If you use <code>conda</code>, you can easily create/manage virtual env. For example, if you have <code>root</code> env python 3.4 and <code>py27</code> env for python 2.7, you can easily switch between them use command <code>source activate [env]</code></p>
<pre><code>source activate py27
conda install SomePackage
</code></pre>
</div>
<span class="comment-copy">Why are you not using virtualenv? It was made to solve this exact problem.</span>
<span class="comment-copy">Run <code>pip3 -V</code> and see where it points to. You should also have a <code>pip3.5</code> for <code>Py3.5</code>.</span>
<span class="comment-copy">@OdraEncoded: Thank you, I've got the answer myself.</span>
<span class="comment-copy">Didn't, you might want to fix the link in your answer though.</span>
<span class="comment-copy">Thank you, I've change the link to a properer section.</span>
<span class="comment-copy">windows: <code>py -3 -m pip install SomePackage</code> install the latest 3 version in 64 <code>py -3.6-32 -m pip install SomePackage</code> install the module on the 32 bytes version</span>
<span class="comment-copy">Actually, because pip is python script, it is interpreted by python, so it also works well without option '-m', like <code>pythonXX /usr/bin/pip install &lt;somepackage&gt;</code>, if you don't know the path of <code>pip</code>, use <code>which</code> to find it, like this <code>pythonXX `which pip` install &lt;somepackage&gt;</code></span>
<span class="comment-copy">@Bruce that defeats the whole point of not having to remember different pip versions and automatically matching pip to python by using <code>-m pip</code> in a call to the desired python version</span>
<span class="comment-copy">@Bananach No it doesn't. Because you also don't need to remember the pip version. What you are using is <code>/usr/bin/pip</code> or <code>which pip</code>. There is no version within it.</span>
<span class="comment-copy">Worked for me too. Thanks so much</span>
<span class="comment-copy">It's not good practice to <code>sudo pip install</code> as this clobbers your distribution's Python dependencies on Linux.</span>
<span class="comment-copy">Clobbers? Otherwise agree use of sudo should be limited.</span>
