<div class="post-text" itemprop="text">
<p>I am writing the contents of a dictionary to a csv file. The k,v pairs of my dictionary are {int: list of ints}. I am seeing a funny thing when it is written to the file  =&gt; when the size of the list is one, it prints as a list. When the size of the list is greater, it prints as a string (in double-quotes). Here is an example output (as seen in the output csv file):</p>
<pre><code>24,[-12345]
25,[-1962956450172838896]
26,"[-125, -12323459939, -2323445, -345425]"
27,[-730881498578617677]
20,[4001623946089138114]
21,[-12345]
</code></pre>
<p>I use the following code to write to a file:</p>
<pre><code>def dictToCsv(dictionary, csvfile):
    writer = csv.writer(open(csvfile, 'wb'))
    for key, value in dictionary.items():
        writer.writerow([key, value])
</code></pre>
<p>I am positive that all values are list of integers.</p>
<p>I create the dictionary this way (for brevity, I have shortened the code):</p>
<pre><code>memberList = []
d = {}

with open(inputCsvFile) as f_in:
   for line in f_in:
   pair = line.split(',')
   cid = pair[0]
   member = pair[1]
   value = member.strip()
   memberList.append(int(value))
   d[cid] = memberList
</code></pre>
<p>What could be going wrong? I tried to print the dict values at all stages...and they are just lists. Not sure how they are being transformed to strings. I just do not want the double-quotes in my output csvfile.</p>
<p>Any help is appreciated. </p>
</div>
<div class="post-text" itemprop="text">
<p>The lists being sent to the csv file as string representations of lists.  When there is more than one item in a list it needs to be quoted in the csv file so the commas that delimit the items in the list are not mistaken for the commas that delimit the fields in the csv file.  </p>
<p>The only datatype in a csv file is string.  If you reread that csv file back into python using the csv module, you will get back <code>["25", "[-1962956450172838896]"]</code> as the value for row 2 and <code>["26", "[-125, -12323459939, -2323445, -345425]"]</code> for row 3.</p>
<p>If you would like to avoid having your lists quoted you could use a different delimiter by setting the <code>delimiter</code> argument when creating your csv file.  Tab delimited (<code>\t</code>) might work nicely here.</p>
</div>
<div class="post-text" itemprop="text">
<p>the dictToCsv need to be fixed this way </p>
<pre><code>def dictToCsv(dictionary, csvfile):
    writer = csv.writer(open(csvfile, 'wb'))
    for key, value in dictionary.items():
       # writer.writerow([key, value]) &lt;&lt; wrong
       writer.writerow([key] +  value)
</code></pre>
<p>this will produce a csv file that looks like:</p>
<pre><code>20,4001623946089138114
21,-12345
24,-12345
25,-1962956450172838896
26,-125,-12323459939,-2323445,-345425
27,-730881498578617677
</code></pre>
<p>First element of each line is the key, subsequent elements are the associated list values </p>
</div>
<span class="comment-copy">They're all being sent to the csv file as string representations of lists.  When there is more than one item in a list it needs to be quoted in the csv file so the commas that separate the items in the list are not mistaken for the commas that separate the fields in the csv file.  If you reread that csv file back into python using the csv module.  You will get back <code>["25", "[-1962956450172838896]"]</code> as the value for row 2 and <code>["26", "[-125, -12323459939, -2323445, -345425]"]</code> for row 3.  The only type in a csv fle is string.</span>
<span class="comment-copy">There are different flavors of csv. As Steven noted, the comma-containing list representations need to be quoted because of ambiguity  of the comma. You could change to a csv flavor that uses semicolon as an item separator, or use quotes even if not necessary, to get similar output for single-itemed and multi-itemed lists. For details, see the python documentation of the csv module, and especially the Dialect section: (<a href="https://docs.python.org/3/library/csv.html#csv.Dialect" rel="nofollow noreferrer">docs.python.org/3/library/csv.html#csv.Dialect</a>)</span>
<span class="comment-copy">without the quotes, your csv file would not work, and would not be readable...</span>
<span class="comment-copy">This should be bolded, highlighted, and underlined: The only type in a csv file is string.</span>
<span class="comment-copy">Many thanks for the explanation. I have started using tab-delimiter.</span>
