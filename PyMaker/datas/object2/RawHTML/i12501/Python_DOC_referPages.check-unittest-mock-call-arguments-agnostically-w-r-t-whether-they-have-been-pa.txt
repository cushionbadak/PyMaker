<div class="post-text" itemprop="text">
<p>When a <code>unittest.mock.Mock</code> object has been called, I can check for the argument values with the exact signature of the call:</p>
<pre><code>from unittest.mock import Mock

m = Mock()  # creation of mock
m('foo', bar='baz')  # call to the mock
m.assert_called_once_with('foo', bar='baz')  # check call arguments
</code></pre>
<p>Checking for a different signature with the same values will fail. E.g., if we check with <code>'baz'</code> as a positional argument instead of a named argument, the assertion will fail:</p>
<pre><code>m.assert_called_once_with('foo', 'baz')
# AssertionError: Expected call: mock('foo', 'baz')
# Actual call: mock('foo', bar='baz')
</code></pre>
<p>It has to. If the function replaced by <code>m</code> was</p>
<pre><code>def actual_fu(foo, bar):
    # do something
</code></pre>
<p>then the calls would be equivalent, but if it was</p>
<pre><code>def a_different_actual_fu(foo, *args, bar='some default'):
    # do something
</code></pre>
<p>then the calls would not be equivalent. <code>Mock</code> doesn't know the actual function's signature, so it can't rely on the equivalence we would have in the first case.</p>
<p>Is there a way of checking the call argument values that is <strong>agnostic about whether they were passed positionally or as keyword arguments</strong>, by letting the Mock (or an assertion helper function or similar) know about the actual function replaced by the mock?</p>
<p>The <code>Mock</code> object can be made aware of the object it replaces (which can be a function or method) with the optional <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock" rel="nofollow"><code>spec</code> argument</a> or with <a href="https://docs.python.org/3/library/unittest.mock.html#auto-speccing" rel="nofollow">autospeccing</a>, but those serve a different purpose (limiting what calls to allow on the mock) and don't affect after-the-fact checking.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>The Mock object can be made aware of the object it replaces (which can be a function or method) with the optional spec argument or with <code>autospeccing</code>, but those serve a different purpose.. </p>
</blockquote>
<p>This is exactly what <a href="https://bugs.python.org/issue17015" rel="nofollow">Issue 17015: mock could be smarter and inspect the spec's signature</a> improvement issue was about. The <code>spec</code> actually is very much related and now makes the mock function-signature-aware.</p>
<p>See how mock fails when we assert mock was called with a keyword argument  - without letting it know about the actual function signature:</p>
<pre><code>&gt;&gt;&gt; from unittest.mock import Mock
&gt;&gt;&gt;
&gt;&gt;&gt; def actual_fu(foo, bar):
...     pass
&gt;&gt;&gt;
&gt;&gt;&gt; m = Mock()
&gt;&gt;&gt; m('foo', bar='baz')
&lt;Mock name='mock()' id='4356741496'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; m.assert_called_once_with(foo='foo', bar='baz')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/mock.py", line 803, in assert_called_once_with
    return self.assert_called_with(*args, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/mock.py", line 792, in assert_called_with
    raise AssertionError(_error_message()) from cause
AssertionError: Expected call: mock(bar='baz', foo='foo')
Actual call: mock('foo', bar='baz')
</code></pre>
<p>And now, see how it all passes if we provide a <code>spec</code>:</p>
<pre><code>&gt;&gt;&gt; m = Mock(spec=actual_fu)
&gt;&gt;&gt; m('foo', bar='baz')
&lt;Mock name='mock()' id='4356249528'&gt;
&gt;&gt;&gt; 
&gt;&gt;&gt; m.assert_called_once_with(foo='foo', bar='baz')
&gt;&gt;&gt; m.assert_called_once_with('foo', bar='baz')
&gt;&gt;&gt; m.assert_called_once_with(bar='baz', foo='foo')
&gt;&gt;&gt; m.assert_called_once_with('foo', 'baz')
&gt;&gt;&gt;
</code></pre>
<p>(Used Python 3.5.1)</p>
</div>
<span class="comment-copy">AFAIK Is not possible to do it in mock 1.3. But... IMHO it is not a mock duty try to understand the call semantic but just recording how you do the call. <code>assert_called_once_with(...)</code> is just what the method say and not <code>assert_called_with_something_that_is_equivalent_to(...)</code>: it sounds like more a stub's duty instead. Anyway maybe can be very useful in some cases.... I meet something that is related to this one some days ago <a href="http://stackoverflow.com/a/34811786/4101725">stackoverflow.com/a/34811786/4101725</a></span>
<span class="comment-copy">Oh, wow. I had actually tried something like that, but probably with Python 3.2 where it didn't work. Re-tried with Python 3.4 just now and it works! :-)</span>
