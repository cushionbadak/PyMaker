<div class="post-text" itemprop="text">
<p>I'm getting into Python, and though of writing my own script which allows me to check arguments provided when a program is run. An example below of what I'm trying to achieve:</p>
<p><code>python file.py -v -h anotherfile.py</code><br/>
or<br/>
<code>./file.py -v -h anotherfile.py</code></p>
<p>In these two cases, the <code>-v</code> and <code>-h</code> arguments, print out the module version, and a basic help file. I already have the code to differentiate between arguments and files, except I want to create a generalised module on the matter.</p>
<p>The following code written in Java-</p>
<pre><code>// Somewhere.
public static HashMap&lt;String, Runnable&gt; args = new HashMap&lt;String, Runnable&gt;();
public void addArgument(String argument, Runnable command) {
    if (argument.length() &gt; 0) {
        if (args.get(argument) == null) {
            args.put(argument, command);
        } else {
            System.err.println("Cannot add argument: " + argument + " to HashMap as the mapping already exists.");
            // Recover.
        }
    }
}

// Somewhere else.
foo.addArgument("-v", () -&gt; {System.out.println("version 1.0");});
foo.args.get("-v").run();
</code></pre>
<p>-will run the Lambda Expressions <em>(atleast that's what I read they were when researching the topic)</em> successfully. I have no idea how Lambda Expressions work however, and have only basic knowledge of using them.</p>
<p><strong>The point of this question, is how can I implement something like the Java example, in Python, storing any type of code inside of an array?</strong></p>
<p>The thing is with the Java example though, if I have <code>int i = 0;</code> defined in the class which executes <code>addArgument</code> and uses <code>i</code> somehow or rather, the class containing <code>addArgument</code> knows to use <code>i</code> from the one that invoked it. I'm worried that this may not be the same case for Python...</p>
<p>I want to be able to store them in dictionaries, or some other sort of key-based array, so I can store them in the following manner:</p>
<pre><code># Very rough example on the latter argument, showing what I'm after.
addoption("-v", print("version 1.0"))
</code></pre>
<p><strong>EDIT: Example of what I want: (not working as is) (please ignore the ;'s)</strong></p>
<pre><code>args = {};

def add(argument, command):
    args[argument] = lambda: command;  # Same problem when removing 'lambda:'

def run():
    for arg in args:
        arg();  # Causing problems.

def prnt():
    print("test");

add("-v", prnt);
run();
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>EDIT: to correct your most recent code, iterating over a dictionary yields its keys not its values, so you need:</p>
<pre><code>args = {};

def add(argument, command):
    args[argument] = command;

def run():
    for arg in args:
        args[arg]()     # &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;

def prnt():
    print("test");

add("-v", prnt);
run();
</code></pre>
<p>For the example you give, a dictionary of functions, although possible, isn't really the natural way to go about things in Python. The standard library has a module, <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow"><code>argparse</code></a> specifically for dealing with all things commmand-line argument related, and rather than using keys to a dictionary you can parse the command line arguments and refer to their stored constants.</p>
<pre><code>import argparse

def output_version():
    print('Version 1.0!')

parser = argparse.ArgumentParser(description="A program to do something.")
parser.add_argument('-v', help='Output version number.', action='store_true')

args = parser.parse_args()
if args.v:
    output_version()
</code></pre>
<p>(In fact outputting a version string is also handled natively by <code>argparse</code>: see <a href="https://docs.python.org/3/library/argparse.html#action" rel="nofollow">here</a>).</p>
<p>To print out the contents of a text file, <code>myfile.txt</code> when the <code>-p</code> switch is given:</p>
<pre><code>import argparse

def print_file(filename):
    with open(filename) as fi:
        print(fi.read())

parser = argparse.ArgumentParser(description="A program to do something.")
parser.add_argument('-p', help='Print a plain file.', action='store')

args = parser.parse_args()

if args.p:
    print_file(args.p)
</code></pre>
<p>Use with e.g.</p>
<pre><code>$ prog.py -p the_filename.txt
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python, you can simply use the reference to a function as a value in a data structure. E.g., consider the following code:</p>
<pre><code>def spam():
    print('Ham!')

eggs = [spam, spam, spam]
for x in eggs:
    x()
</code></pre>
<p>This would call three instances of the function <code>spam</code>.</p>
<p>The <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow">lambda expressions</a> you are referring to are simply another way to define functions, without explicitly having to bind them to a name. Consider the following:</p>
<pre><code>eggs = [lambda : print('ham'), lambda : print('spam')]
for x in eggs:
    x()
</code></pre>
<p>This gets much more powerful when you're using arguments, though:</p>
<pre><code>fn = [lambda x: return x + 3, lambda x: return x * 2]
for f in fn:
    print(f(4))
</code></pre>
<p>Once you have a reference to a function, you can then pass <em>that</em> to another function.</p>
<pre><code>def foo(x):
    return x + 2

bar = lambda x: return x * 2

def h(g, f, x):
    return g(f(x))

print(h(foo, bar, 37))
</code></pre>
<p>In your scenario, however, you could simply pass <code>lambda : print("version 1.0")</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since in Python functions are first-class objects, you may create dictionary of <code>{string: callable}</code> pairs.</p>
<pre><code>def help():
    print("Usage: xyz")


d = {
    'help': help,
    'version': lambda: print("1.0"), # lambda is also callable
}
</code></pre>
<p>After definition like that usage would be following:</p>
<pre><code>my_function = d["help"]  # retrieves function stored under key 'help' in dict
my_function()  # calls function

# or obviously you may drop explainatory variable
d['help']()
</code></pre>
<p>It'll work for your custom solution with problem defined like that.</p>
<p>For standardized way of creating command line interfaces you may want to get familiar with <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow">argparse module</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has a function called <a href="https://stackoverflow.com/questions/9383740/what-does-pythons-eval-do"><code>eval()</code></a> that takes strings and tries to evaluate them as code.</p>
<pre><code>&gt;&gt;&gt; eval("2+3")
5
</code></pre>
<p>Then you can store your code as multi-line strings using 3 quotation marks</p>
<pre><code>x = """the quick brown fox
jumps over the
lazy dogs"""
</code></pre>
<p>If you want to store the functions themselves, no reason why they can't also be placed in a dictionary.  Even without lambdas.</p>
<pre><code>def f():
    return 1

def g(x):
    return x + 1

def h(x):
    return 2*x

F = [f,g,h]
G = {"a": f, "b": g, "c": h}

(F[0](), G["a"]())
</code></pre>
<p>The value of the tuple is <code>(1,1)</code>.  Otherwise I don't know what you are asking for.</p>
</div>
<span class="comment-copy">How would I print the contents of a plain file as an action for an argument?</span>
<span class="comment-copy">You can define a function to do that and then call it when the argument parser contains the corresponding switch. Do you want to specify the filename on the command line too?</span>
<span class="comment-copy">Definitely. I'm creating a generic module, in which I can <b>specify any</b> actions for <b>any and all</b> arguments <b>and files</b>.</span>
<span class="comment-copy">You can certainly specify which filename to pass to the print function (see my edit)... but perhaps I don't understand: do you want to pass code to be executed on the command line?</span>
<span class="comment-copy">OH MY GOD I LOVE YOU (<b>'nuff said</b>)</span>
<span class="comment-copy">That first example! Is there a way I can give <code>spam()</code> as an argument to a <code>def</code>?</span>
<span class="comment-copy">Something like, <code>def foo(boo): boo()</code></span>
<span class="comment-copy">Sure (assuming I understood correctly). I'll update my answer. EDIT: Yes, precisely that.</span>
<span class="comment-copy">I appreciate it.</span>
<span class="comment-copy">Uhhh.. I'm sorta lost in the edit? How does that work?</span>
<span class="comment-copy">Could I modify this to something like: <code>addargument(arg, function)</code>, host the function in a different module and call it with <code>addargument("-v", argnamegoeshere)</code>?</span>
<span class="comment-copy">Yes. This definitely works! Except I want raw code storage...</span>
<span class="comment-copy">@frayment Python doesn't really do that.  You can store <i>functions</i> or you can store the <i>code</i> as strings and evaluate them.</span>
<span class="comment-copy">Well the former is what I'm trying to achieve.</span>
<span class="comment-copy">@frayment my example now includes a <i>list</i> of functions and a <i>dictionary</i> of functions.  does that work?</span>
<span class="comment-copy">That last example is <b>partially</b> what I'm looking for. The problem is, is that you have hard-coded those values into place. I want to be able to call a function, which specifies my method to be run <b>as an argument</b>, and then dynamically store that argument in the dictionary.</span>
