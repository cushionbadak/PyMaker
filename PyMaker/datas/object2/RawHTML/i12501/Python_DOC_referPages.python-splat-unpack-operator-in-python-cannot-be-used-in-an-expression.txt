<div class="post-text" itemprop="text">
<p>Does anybody know the reasoning as to why the unary (<code>*</code>) operator cannot be used in an expression involving iterators/lists/tuples?</p>
<p>Why is it only limited to function unpacking? or am I wrong in thinking that?</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; [1,2,3, *[4,5,6]]
File "&lt;stdin&gt;", line 1
[1,2,3, *[4,5,6]]
        ^
SyntaxError: invalid syntax
</code></pre>
<p>Why doesn't the <code>*</code> operator:</p>
<pre><code>[1, 2, 3, *[4, 5, 6]] give [1, 2, 3, 4, 5, 6]
</code></pre>
<p>whereas when the <code>*</code> operator is used with a function call it does expand:</p>
<pre><code>f(*[4, 5, 6]) is equivalent to f(4, 5, 6)
</code></pre>
<p>There is a similarity between the <code>+</code> and the <code>*</code> when using lists but not when extending a list with another type.</p>
<p>For example:</p>
<pre><code># This works
gen = (x for x in range(10))

def hello(*args):
    print args    
hello(*gen)

# but this does not work
[] + gen
TypeError: can only concatenate list (not "generator") to list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unpacking in list, dict, set, and tuple literals has been added in Python <code>3.5</code>, as described in <strong><a href="https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-448" rel="nofollow noreferrer">PEP 448</a></strong>:</p>
<pre><code>Python 3.5.0 (v3.5.0:374f501f4567, Sep 13 2015, 02:27:37) on Windows (64 bits).

&gt;&gt;&gt; [1, 2, 3, *[4, 5, 6]]
[1, 2, 3, 4, 5, 6]
</code></pre>
<p><a href="https://www.python.org/dev/peps/pep-0448/#disadvantages" rel="nofollow noreferrer">Here</a> are some explanations for the rationale behind this change. Note that this does not make <code>*[1, 2, 3]</code> equivalent to <code>1, 2, 3</code> in all contexts. Python's syntax is not intended to work that way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Asterix <code>*</code> <strong>isn't simply</strong> unary operator, it's  <strong>argument-unpacking operator</strong> for <a href="https://docs.python.org/2.7/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">functions definitions</a> and <a href="https://docs.python.org/2.7/reference/expressions.html#calls" rel="nofollow noreferrer">functions calls</a>.</p>
<p>So <code>*</code> supposed to be used <strong>only</strong> to work with function params and <strong>not with</strong> lists, tuples etc.</p>
<p><strong>NOTE:</strong> starting from python3.5,  <code>*</code> could be used not only with functions params, <a href="https://stackoverflow.com/a/34767282/355230">@B. M</a>'s answer greatly describes that change in python.</p>
<p>If you need to concat lists use concatenation instead <code>list1 + list2</code> to get desired result.
To concatenate list and <strong>generator</strong> simply pass <code>generator</code> to <code>list</code> type object, prior concatenating with another list:</p>
<pre><code>gen = (x for x in range(10))
[] + list(gen)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is not supported. Python 3 gives a better message (though Python 2 does not support <code>*</code> in the left part of an assignment, afaik):</p>
<pre><code>Python 3.4.3+ (default, Oct 14 2015, 16:03:50) 
&gt;&gt;&gt; [1,2,3, *[4,5,6]]
  File "&lt;stdin&gt;", line 1
SyntaxError: can use starred expression only as assignment target
&gt;&gt;&gt; 
</code></pre>
<blockquote>
<p><code>f(*[4,5,6])</code> is equivalent to <code>f(4,5,6)</code></p>
</blockquote>
<p>Function argument unfolding is a special case.</p>
</div>
<span class="comment-copy">What are you expecting from that usage? I mean, why would you want to do that?</span>
<span class="comment-copy">ok ill update my question</span>
<span class="comment-copy">It looks like two separate question: the first is more syntax related, the second is just the behaviour of <code>list.__add__</code></span>
<span class="comment-copy">use full info, but we discussing <code>python-2.7</code> ( see tags in question)</span>
<span class="comment-copy">Seems like they hadn't considered the use of the * within a container when making python 2.7?</span>
<span class="comment-copy">@AndriyIvaneyko this answers the question as asked. The OP wants to know the reasoning, not how to do it in another way in Py2.7.</span>
<span class="comment-copy">It works in function calls as well as function definitions. It seems a bit like you're implying it only works in the latter case, so you might wnat to edit wording.</span>
<span class="comment-copy">@SuperBiasedMan Thanks, for correction i've updated answer.</span>
<span class="comment-copy">Thank you for pointing out python 3, I have just tried it out and it does work in python 3.5.1  &gt;&gt;&gt; [*[1,2,3,4]] =&gt; [1, 2, 3, 4] I wasnt aware of that. It even works with generators :) very cool [1,2,3, (x for x in range(10))]</span>
