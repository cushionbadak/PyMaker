<div class="post-text" itemprop="text">
<p>Suppose I have the following dataframe</p>
<pre><code>df = pd.DataFrame({'col1': ['one','one', 'one', 'one', 'two'],
                   'col2': ['two','two','four','four','two'],
                   'col3': [['alpha', 'beta'],
                            ['alpha', 'beta'],
                            ['alpha', 'beta'],
                            ['alpha', 'beta'],
                            ['alpha', 'nodata', 'beta', 'gamma']]})
</code></pre>
<p>I know I can subset with:</p>
<pre><code>df[df['col2']=='four']
</code></pre>
<p>How do I subset so that it matches a string INSIDE of a list? in this example, subset the rows that don't contain 'nodata' in col3?</p>
<pre><code>df[~df['col3'].str.contains('nodata') 
</code></pre>
<p>doesn't seem to work and I can't properly seem to access the 'right' item inside of the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Rather than converting data types you can use <code>apply</code> with a <code>lambda</code> function which will be a bit faster. </p>
<pre><code>df[~df.col3.apply(lambda x: 'nodata' in x)]
</code></pre>
<p>Testing it on a larger dataset:</p>
<pre><code>In [86]: df.shape
Out[86]: (5000, 3)   
</code></pre>
<p>My solution:</p>
<pre><code>In [88]: %timeit df[~df.col3.apply(lambda x: 'nodata' in x)]
         1000 loops, best of 3: 1.68 ms per loop
</code></pre>
<p>Previous solution:</p>
<pre><code>In [87]: %timeit df[~df['col3'].astype(str).str.contains('nodata')]
         100 loops, best of 3: 7.8 ms per loop
</code></pre>
<p>Arguably the first answer may be more readable though. </p>
</div>
<div class="post-text" itemprop="text">
<p>Your code should work if you convert the column's datatype to string:</p>
<pre><code>df[~df['col3'].astype(str).str.contains('nodata')]
</code></pre>
</div>
<span class="comment-copy">Are you trying to get the row that does contain "nodata" or all rows that do not?  You say that you want to get that row, but your example code is negating on the condition, implying that you want the rows that do not contain that.</span>
<span class="comment-copy">@matthew - fixed</span>
<span class="comment-copy">agreed. lambdas are quite useful. might you know a place where i can drill python lambdas and learn them once and for all?</span>
<span class="comment-copy">I would probably start with the <a href="https://docs.python.org/3/reference/expressions.html#lambda" rel="nofollow noreferrer">Python docs</a> and then maybe google a bit for a <a href="http://www.secnetix.de/olli/Python/lambda_functions.hawk" rel="nofollow noreferrer">tutorial</a>. The key to how it is being used here is that it is a function that is being applied to every cell value in <code>df.col3</code> Good luck!</span>
<span class="comment-copy">it's even faster (and you can lose the lambda) if you use a list comprehension instead: <code>df[['nodata' not in x for x in df.col3]]</code></span>
<span class="comment-copy">yes this is it!</span>
