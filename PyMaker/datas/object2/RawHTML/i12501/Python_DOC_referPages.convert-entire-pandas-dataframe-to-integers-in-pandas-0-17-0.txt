<div class="post-text" itemprop="text">
<p>My question is very similar to <a href="https://stackoverflow.com/questions/33126477/pandas-convert-objectsconvert-numeric-true-deprecated">this one</a>, but I need to convert my entire dataframe instead of just a series. The <code>to_numeric</code> function only works on one series at a time and is not a good replacement for the deprecated <code>convert_objects</code> command. Is there a way to get similar results to the <code>convert_objects(convert_numeric=True)</code> command in the new pandas release?</p>
<p>Thank you Mike MÃ¼ller for your example. <code>df.apply(pd.to_numeric)</code> works very well if the values can all be converted to integers. What if in my dataframe I had strings that could not be converted into integers? 
Example: </p>
<pre><code>df = pd.DataFrame({'ints': ['3', '5'], 'Words': ['Kobe', 'Bryant']})
df.dtypes
Out[59]: 
Words    object
ints     object
dtype: object
</code></pre>
<p>Then I could run the deprecated function and get:</p>
<pre><code>df = df.convert_objects(convert_numeric=True)
df.dtypes
Out[60]: 
Words    object
ints      int64
dtype: object
</code></pre>
<p>Running the <code>apply</code> command gives me errors, even with try and except handling.</p>
</div>
<div class="post-text" itemprop="text">
<h2>All columns convertible</h2>
<p>You can apply the function to all columns:</p>
<pre><code>df.apply(pd.to_numeric)
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'a': ['1', '2'], 
                       'b': ['45.8', '73.9'],
                       'c': [10.5, 3.7]})

&gt;&gt;&gt; df.info()
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 2 entries, 0 to 1
Data columns (total 3 columns):
a    2 non-null object
b    2 non-null object
c    2 non-null float64
dtypes: float64(1), object(2)
memory usage: 64.0+ bytes

&gt;&gt;&gt; df.apply(pd.to_numeric).info()
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 2 entries, 0 to 1
Data columns (total 3 columns):
a    2 non-null int64
b    2 non-null float64
c    2 non-null float64
dtypes: float64(2), int64(1)
memory usage: 64.0 bytes
</code></pre>
<h2>Not all columns convertible</h2>
<p><code>pd.to_numeric</code> has the keyword argument <code>errors</code>:</p>
<blockquote>
<pre><code>  Signature: pd.to_numeric(arg, errors='raise')
  Docstring:
  Convert argument to a numeric type.

Parameters
----------
arg : list, tuple or array of objects, or Series
errors : {'ignore', 'raise', 'coerce'}, default 'raise'
    - If 'raise', then invalid parsing will raise an exception
    - If 'coerce', then invalid parsing will be set as NaN
    - If 'ignore', then invalid parsing will return the input
</code></pre>
</blockquote>
<p>Setting it to <code>ignore</code> will return the column unchanged if it cannot be converted into a numeric type.</p>
<p>As pointed out by  Anton Protopopov, the most elegant way is to supply <code>ignore</code> as keyword argument to <code>apply()</code>:</p>
<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'ints': ['3', '5'], 'Words': ['Kobe', 'Bryant']})
&gt;&gt;&gt; df.apply(pd.to_numeric, errors='ignore').info()
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 2 entries, 0 to 1
Data columns (total 2 columns):
Words    2 non-null object
ints     2 non-null int64
dtypes: int64(1), object(1)
memory usage: 48.0+ bytes
</code></pre>
<p>My previously suggested way, using <a href="https://docs.python.org/3/library/functools.html?highlight=partial#functools.partial" rel="noreferrer">partial</a> from the module <code>functools</code>, is more verbose:</p>
<pre><code>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; df = pd.DataFrame({'ints': ['3', '5'], 
                       'Words': ['Kobe', 'Bryant']})
&gt;&gt;&gt; df.apply(partial(pd.to_numeric, errors='ignore')).info()
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 2 entries, 0 to 1
Data columns (total 2 columns):
Words    2 non-null object
ints     2 non-null int64
dtypes: int64(1), object(1)
memory usage: 48.0+ bytes
</code></pre>
</div>
<span class="comment-copy">I think, the most elegant way to set this argument in the <code>apply</code> as keywarg: <code>df.apply(pd.to_numeric, errors='ignore')</code> should work fine.</span>
