<div class="post-text" itemprop="text">
<p>I am trying to connect to an ActiveMQ message broker which uses SSL. I am getting the error: </p>
<pre><code>invalid uri: ssl://myserver.com:61613 [invalid broker(s): 'NoneType' object has no attribute 'groupdict']
</code></pre>
<p>Example code taken from stompest documentation: I only changed server, user and pass:</p>
<pre><code>import time
from stompest.config import StompConfig
from stompest.sync import Stomp

while True:
    try:
        client = Stomp(StompConfig("ssl://myserver.com:61613", login = 'me', passcode = 'me', version = "1.2" ))
        client.connect(versions = ["1.2"], host = vhost, heartBeats = (0, 60000))   #CONNECT
        subscription = client.subscribe(destination, {"ack": "client", "id": "0"})  #SUBSCRIBE
        while True:
            frame = client.receiveFrame()
            try:
                print frame.body
                client.ack(frame)   #ACK
            except:
                print "Error: Can't handle message received, NACKing"
                client.nack(frame)  #NACK
    except Exception, e:
        # Reconnect on exception
        print "Exception handled, reconnecting...\nDetail:\n%s" % e
        try:
            client.disconnect()
        except:
            pass
        time.sleep(5)
</code></pre>
<p>I believe Stompest can handle SSL, but I can't find any reference in the documentation.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>StompConfig</code> has to be provided with an <a href="https://docs.python.org/3/library/ssl.html#ssl.SSLContext" rel="nofollow noreferrer"><code>SSLContext</code></a> with a configuration of the SSL connection. Exactly how this one should look will depend on the specifics of your setup, so let us have a look at some of the options.</p>
<p>For more information on how to set up ActiveMQ to use SSL in general, see <a href="https://activemq.apache.org/how-do-i-use-ssl.html" rel="nofollow noreferrer">this Apache guide</a>, and <a href="https://stackoverflow.com/questions/46770328/activemq-stompssl-with-python-stomp-client/">this StackOverflow question</a> which addresses the same issue but for <a href="https://github.com/jasonrbriggs/stomp.py" rel="nofollow noreferrer"><code>stomp.py</code></a>.</p>
<h1>No validation</h1>
<p>If all you need is a quick and dirty connection with no validation of broker or client -- that is, a connection which would be susceptible to MITM attacks from an active attacker -- then you can supply an <code>SSLContext</code> with validation disabled:</p>
<pre><code>import ssl
sslContext = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
# Let's at least disable some of the older SSL protocols
sslContext.options |= ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1 | ssl.OP_NO_SSLv3
sslContext.check_hostname = False
sslContext.verify_mode = ssl.CERT_NONE
</code></pre>
<p>With this, all you need to do is to provide <code>sslContext</code> to your <code>StompConfig</code>:</p>
<pre><code>client = Stomp(StompConfig('ssl://myserver.com:61613', login='me', passcode='me', version='1.2', sslContext=sslContext))
</code></pre>
<h1>Broker certificate validation</h1>
<p>The first improvement over this would be to verify the certificate provided by the server. Assuming that you are using a self-signed certificate (as opposed to one signed by a certificate authority), you can simply provide your <code>SSLContext</code> with the certificate directly:</p>
<p>First, on the broker, export the certificate from its keystore, which we will assume is stored in a file called <code>broker.ks</code> by using the Java <code>keytool</code> through</p>
<pre><code>keytool -exportcert -rfc -alias broker -keystore broker.ks -file broker.pem
</code></pre>
<p>Now, move <code>broker.pem</code> to the Python client and change the <code>sslContext</code> configuration as follows:</p>
<pre><code>sslContext = ssl.create_default_context(cafile='broker.pem')
sslContext.check_hostname = True
sslContext.verify_mode = ssl.CERT_REQUIRED
</code></pre>
<h1>Client certificate validation</h1>
<p>ActiveMQ servers can also be set up to only allow connections from clients with predefined certificates. Assuming that you have a PEM encoded client certificate in <code>client.pem</code>, have stored the private key in <code>client.key</code> (cf. e.g. the first part of <a href="https://stackoverflow.com/a/50774783/5085211">this answer</a>), and set up ApacheMQ to validate that certificate (cf. the third part of the same answer), then all you need to do to have <code>stompest</code> use that pair for the connection is to call</p>
<pre><code>sslContext.load_cert_chain('client.pem', 'client.key')
</code></pre>
<p>as part of the configuration.</p>
</div>
