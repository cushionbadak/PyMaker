<div class="post-text" itemprop="text">
<p>I'm pretty new to python and I'm trying to create loops that are capable of doing all the work that I did by hand. Essentially creating all the <strong>line'#'</strong> variables and assigning them the particular line of text from the file <em>'game_catch.txt'</em> which reads something like this:</p>
<pre><code>Curving                 10
Dodgeball               15
Keep Away               5
Kin-Ball                7
Prisoner Ball           21
Quidditch               30
Rundown (aka Pickle)    12
Yukigassen              18
Handball                25
</code></pre>
<p>(With the spaces being Tabs, if that makes any difference)</p>
<p>Then creating another loop that assigns the value of the <strong>line'#'</strong> variables to <strong>str'#'</strong> variables while splitting all the spacing away. (I cannot modify the file because in other computers it will be the same as the one I posted above, so I have to do this step)</p>
<p>Then, and more importantly because this is where I'm completely stuck, making a loop for doing all the nitty gritty work of turning the <strong>str'#'</strong> variables into something the sports dictionary can pick up and then read as <strong>{'Curving': 10}</strong></p>
<p>Here I provided the code I'm currently using and trying to simplify:</p>
<pre><code>file = open('game_catch.txt','r')
line1 = file.readline()
line2 = file.readline()
line3 = file.readline()
line4 = file.readline()
line5 = file.readline()
line6 = file.readline()
line7 = file.readline()
line8 = file.readline()
line9 = file.readline()

str1 = line1.split()
str2 = line2.split()
str3 = line3.split()
str4 = line4.split()
str5 = line5.split()
str6 = line6.split()
str7 = line7.split()
str8 = line8.split()
str9 = line9.split()

sports = {}

key = ''
for i in str1[0:-1] :
    key += i + ' '

key = key[0:-1]

sports[key] = int(str1[-1])
</code></pre>
<p>Sorry for the long post, I just wanted to provide as much detail as possible. Feel free to let me know if there are more efficient ways of doing this. Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>The following will turn you txt file into a dictionary, taking into consideration that some of the sports names are comprised of multiple words:</p>
<pre><code>lines = [line.rstrip('\n').split() for line in open('C:/Users/Simon/Desktop/test.txt')]

sports = {}

for el in lines:
    number = el.pop()
    curItem = ' '.join(el)

    sports[curItem] = int(number)

print sports
</code></pre>
<p>That will give something like this:</p>
<pre><code>{'Curving': 10, 'Keep Away': 5, 'Dodgeball': 15}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can get a basic structure (which will keep the scores as strings) by iterating over the file, splitting each line, and sending the pairs in that generator to <code>dict()</code>:</p>
<pre><code>with open('game_catch.txt') as f:
    d = dict(line.rsplit(maxsplit=1) for line in f)
</code></pre>
<p>You can cast the scores as integers by creating a generator to split each line, then unpacking each line and using the <code>int()</code> function:</p>
<pre><code>with open('game_catch.txt') as f:
    d = dict((name, int(score)) for name, score in (line.rsplit(maxsplit=1) for line in f))
</code></pre>
<p>You can use the literal comprehension syntax instead of the <code>dict()</code> function:</p>
<pre><code>with open('game_catch.txt') as f:
    d = {name:int(score) for name, score in (line.rsplit(maxsplit=1) for line in f)}
</code></pre>
<p>The most important part is, of course, to check out a tutorial so that you can understand what these code snippets are doing and make sense of the explanations. Loops and data structures are particularly important.</p>
</div>
<div class="post-text" itemprop="text">
<p>Example Here </p>
<p>trans_dict = {'one':'wahed', 'two':'itnen', 'three':'talata'}</p>
<pre><code>       print "ITER ITEMS", trans_dict.iteritems()

       for key, val in trans_dict.iteritems():

                   print "KEY", key

                   print "VAL", val
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>file = 'game_catch.txt'
sports = {}

with open(file) as f:
 for line in f:
  parts = line.split()
  sports[parts[0]] = int(parts[-1])
</code></pre>
<p>hope this helps.     </p>
</div>
<span class="comment-copy">You might want to take a look at the <a href="https://docs.python.org/3.4/tutorial/index.html" rel="nofollow noreferrer">official Python tutorial</a>, specifically the section on <a href="https://docs.python.org/3.4/tutorial/controlflow.html" rel="nofollow noreferrer">control flow</a>.</span>
<span class="comment-copy">Can you provide an example of whats in the txt file so we can copy and paste it to test?</span>
<span class="comment-copy">Why do you need all lines to be read into separate variables?</span>
<span class="comment-copy">And I don't know where you picked up the habit of doing <code>sequence[0:-1]</code>, but it doesn't do what you probably think it does. Also read about <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">the <code>str.join()</code> method</a>.</span>
<span class="comment-copy">@Simon <a href="http://pastebin.com/n2qXp48E" rel="nofollow noreferrer">Text Example</a></span>
<span class="comment-copy">Good catch on the multi-word names; I didn't read the entire sample input and missed it. I'd suggest <code>sports[curItem] = int(number)</code> to get an integer value as requested.</span>
<span class="comment-copy">I like the use of the generator. I usually create a single element list to iterate over so I can do processing and get named variables. The generator's a lot neater.</span>
<span class="comment-copy">This doesn't seem to do anything other than print a sample dictionary. How does this help?</span>
<span class="comment-copy">You don't need <code>lines = f.readlines()</code>, by the way - just do <code>for line in f:</code> and put that part inside the <code>with</code> block.</span>
<span class="comment-copy">Thanks for the comment, I edited my answer.</span>
