<div class="post-text" itemprop="text">
<p>In python, <a href="https://docs.python.org/2/library/random.html#random.shuffle" rel="nofollow"><code>random.shuffle</code></a> shuffles the element of a list in place.</p>
<p>I was wondering if it's guaranteed that the elements will be in a different order after the shuffle or if it is truly random, in which case I would expect the elements to be in the same order as before the shuffle about on average 1 time out of <code>N!</code> shuffles.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is possible for the list to be in the same order afterwards.</p>
<p>Note that if you shuffle a large list, not <em>all</em> permutations will be possible, due to the limited number of states in a pseudorandom number generator.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an experiment which confirms that, as expected, roughly 1 out of n! of the times <code>random.shuffle()</code> fixes the elements. For each number, n, in the range 1 to 9, I compare the theoretical probability of getting the identity permutation, 1/n!, with the observed proportion obtained by running <code>random.shuffle</code> 1 million times:</p>
<pre><code>import random, math

def trialShuffles(n,k):
    #shuffles [1,2,...,n] k times
    #returns number of times original order results

    fixedPoints = 0
    nums = list(range(1,n+1))
    for i in range(k):
        copy = nums[:]
        random.shuffle(copy)
        if copy == nums: fixedPoints += 1
    return fixedPoints

test = [(n,1.0/math.factorial(n),trialShuffles(n,1000000)/1000000.0) for n in range(1,10)]
print("n  theoretical  observed")
print("------------------------")
for (n,x,y) in test:
    print("%i   %f   %f"%(n,x,y))
</code></pre>
<p>The result of one run:</p>
<pre><code>n  theoretical  observed
------------------------
1   1.000000   1.000000
2   0.500000   0.499393
3   0.166667   0.166490
4   0.041667   0.041898
5   0.008333   0.008347
6   0.001389   0.001448
7   0.000198   0.000165
8   0.000025   0.000022
9   0.000003   0.000002
</code></pre>
<p>Obviously including <code>n=1</code> is pointless but it makes the output look nicer. If I went up to <code>n = 10</code>, more likely than not I wouldn't see any shuffles that left the elements fixed, unless I increased the number of trials.</p>
</div>
<span class="comment-copy"><code>random.shuffle</code> is based on the random number generator in <code>random.random</code> which is uniformly generating. So yes, it is possible for the list to stay in the same order.</span>
<span class="comment-copy">If it guaranteed the element to be in a different order, it would no longer be random.</span>
<span class="comment-copy">This is trivially easy to test, you could just <i>try</i> it with a two element <code>list</code>. Eventually, it's going to end up in the same order twice in a row.</span>
<span class="comment-copy">@ShadowRanger you are right, I should've just tested it.</span>
<span class="comment-copy">Do you have a reference for that second bit? In particular, how <i>large</i> is "large"?</span>
<span class="comment-copy">@tobias_k: That's just how PRNGs work (pigeonhole argument).  For the MT19937 generator often used in Python, if your list has 2081 or more elements, not all permutations can be generated.  In practice, depending on the implementation of <code>shuffle()</code>, this may also be true for smaller lists.  <a href="https://en.wikipedia.org/wiki/Pseudorandom_number_generator" rel="nofollow noreferrer">en.wikipedia.org/wiki/Pseudorandom_number_generator</a></span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/random.html#random.shuffle" rel="nofollow noreferrer">The docs mention this</a> (without clarifying how large is large, because they don't want to limit their choice of implementation): "Note that for even rather small <code>len(x)</code>, the total number of permutations of <i>x</i> is larger than the period of most random number generators; this implies that most permutations of a long sequence can never be generated."</span>
