<div class="post-text" itemprop="text">
<p>What is the best way to read in a line of numbers from a file when they are presented in a format like this:</p>
<pre><code>[1, 2, 3 , -4, 5]
[10, 11, -12, 13, 14 ]
</code></pre>
<p>Annoyingly, as I depicted, sometimes there are extra spaces between the numbers, sometimes not. I've attempted to use <code>CSV</code> to work around the commas, but the brackets and the random spaces are proving difficult to remove as well. Ideally I would append each number between the brackets as an <code>int</code> to a <code>list</code>, but of course the brackets are causing <code>int()</code> to fail.</p>
<p>I've already looked into similar solutions suggested with <a href="https://stackoverflow.com/questions/2780904/removing-unwanted-characters-from-a-string-in-python/" title="this">Removing unwanted characters from a string in Python</a> and <a href="https://stackoverflow.com/questions/19201575/python-read-file-look-up-a-string-and-remove-characters">Python Read File, Look up a String and Remove Characters</a>, but unfortunately I keep falling short when I try to combine everything.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use regular expression to remove any unwanted characters from strings</p>
<pre><code>import re
text_ = re.sub("[0-9]+", " ", text);
</code></pre>
<p>Second Method: </p>
<pre><code>str = "h3110 23 cat 444.4 rabbit 11 2 dog"
&gt;&gt;&gt; [int(s) for s in str.split() if s.isdigit()]
[23, 11, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using the <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval()</code></a> is another option:</p>
<pre><code>from ast import literal_eval

with open("your_file.txt") as file_obj:
    for line in file_obj:
        lst = literal_eval(line)
        do_stuff(lst)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since each line already seems a literal python list you can use <a href="https://docs.python.org/2.7/library/ast.html" rel="nofollow">ast</a> module:</p>
<pre><code>import ast

with open('myfile.txt') as fh:
    for line in fh:
        numbers_list = ast.literal_eval(line)
</code></pre>
<p>Note that you could have obtained the same result using the builtin function <a href="https://docs.python.org/2.7/library/functions.html#eval" rel="nofollow">eval()</a> but using ast is more secure against malicious input.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/json.html#json.loads" rel="nofollow"><code>json</code></a> module to parse each line as a <a href="http://json.org/" rel="nofollow">JSON</a> array.</p>
<pre><code>import json

list_of_ints = []
for line in open("/tmp/so.txt").readlines():
    a = json.loads(line)
    list_of_ints.extend(a)
print(list_of_ints)
</code></pre>
<p>This collects all integers from all lines into <code>list_of_ints</code>. Output:</p>
<pre><code>[1, 2, 3, -4, 5, 10, 11, -12, 13, 14]
</code></pre>
</div>
<span class="comment-copy">To solve the problem I ended up combining @Muhammad 's Method 2 and @Zac 's answer; <code>[int(s) for s in str.split() if s.isdigit()]</code> to clean up the string itself, then <code>eval()</code> to convert it into a list of ints for use by the rest of my program.</span>
<span class="comment-copy">The input is 'a line of numbers', it is <i>not</i> a line with random strings.</span>
<span class="comment-copy">Then use regular expressions. You can learn more about expressions here &lt;<a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer">docs.python.org/2/library/re.html</a>&gt; and &lt;<a href="http://www.tutorialspoint.com/python/python_reg_expressions.htm" rel="nofollow noreferrer">tutorialspoint.com/python/python_reg_expressions.htm</a>&gt;</span>
<span class="comment-copy">I know regular expressions. But your answer does not answer the question which is about a line of integers written as a list.</span>
<span class="comment-copy">Dear it will work, you can try (:</span>
<span class="comment-copy">If there are extra spaces that means the line is made of strings, even if the non numeric characters in it are just blanks. Regex is perfectly suited for this kind of operation.</span>
<span class="comment-copy">That's a solution, but that using JSON conversion here seems am overhead</span>
<span class="comment-copy">I doubt that for the input provided this overhead is even measureable.</span>
<span class="comment-copy">I guess the input presented is just a sample of a bigger file. Measuring the eventual overhead could be interesting.</span>
<span class="comment-copy">I had considered this as a possible option, but I thought JSON objects were more for dictionaries. Good to know though</span>
