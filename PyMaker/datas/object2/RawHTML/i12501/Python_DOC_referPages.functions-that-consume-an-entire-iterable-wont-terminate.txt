<div class="post-text" itemprop="text">
<p>In <a href="http://www.dabeaz.com/generators/Generators.pdf" rel="nofollow">David Beazley's talk on generators</a>, he states, as a caveat:</p>
<blockquote>
<p>Functions that consume an entire iterable won't terminate(min, max,
  sum, set etc.)</p>
</blockquote>
<p>What is meant here?</p>
<pre><code>gen = (x*2 for x in [1,2,3,4,5])
</code></pre>
<p><code>sum(gen)</code> terminates just fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>An endless generator won't terminate when consumed:</p>
<pre><code>def gen():
    while True:
        yield 1

sum(gen())
</code></pre>
<p><strong>Note</strong>: Don't actually execute the last line.</p>
</div>
<div class="post-text" itemprop="text">
<p>He's refering to that within the concept of <em>infinite sequences</em>, if you provide an infinite sequence to <code>max</code> et al, they simply won't be able to return a value.</p>
<p><em>Want to replicate?</em> Aside from building a custom infinite sequence, Python has a <em>built-in</em> set of these in <strong><a href="https://docs.python.org/3/library/itertools.html" rel="nofollow"><code>itertools</code></a></strong> (namely <strong><a href="https://docs.python.org/3/library/itertools.html#itertools.repeat" rel="nofollow"><code>repeat</code></a></strong>, <strong><a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow"><code>count</code></a></strong>, <strong><a href="https://docs.python.org/3/library/itertools.html#itertools.repeat" rel="nofollow"><code>cycle</code></a></strong>). Try and do:</p>
<pre><code>from itertools import repeat

max(repeat(20))
</code></pre>
<p><em>and see what happens</em>. Actually, <strong>don't do that</strong>, <code>max</code> will keep on munching away as <code>repeat</code> keeps on giving numbers<sup>1</sup>. It's a love afair that lasts the challenge of time and <strong>never terminates</strong> :-)</p>
<hr/>
<p><sub>1 -- Imagine Pac-Man in a never ending straight-line; constantly eating those little yellow thingies. Pac-Man = <code>max</code>, yellow thingies generated by <code>repeat</code>.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>If you pay attention, you'll note that he writes that in Part 5 of the presentation, "Processing Infinite Data". Since infinite generators yield an infinite number of items, functions that attempt to consume the entire generator will never return.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the provided document the comment is directed towards the <code>follow</code> function on page 39 which is designed to lock up the program until the file is added to, any infinite generator will not terminate when used with functions that use an iterable.</p>
</div>
<div class="post-text" itemprop="text">
<p>He is talking about infinite itertors many of which can be found in itertools for Python. If you use an infinite iterator with them they won't return.</p>
</div>
