<div class="post-text" itemprop="text">
<p>Ok, this might be a very stupid question and it might not be possible, or I am thinking in a twisted way. So, consider this:</p>
<pre><code>class MyClass:
    def __init__(self, x):
        self.x = x
        self.y = self.x ** 2


class MyList:
    def __init__(self, list):
        self.list = list

    def __iter__(self):
        return iter(self.list)

foo = [MyClass(x=1), MyClass(x=2)]
bar = MyList(list=foo)

for i in bar:
    print(i.x, i.y)
</code></pre>
<p>Ok, here we have two classes: <code>MyClass</code> is just something very ordinary and nothing special. It has two instance attributes: <code>x</code> and <code>y</code>.
<code>MyList</code>, on the other hand, should be a class which defines an iterator which should only contain elements from the first class <code>MyClass</code>!</p>
<p>Then I create two instances of <code>MyClass</code>, put them in a list <code>foo</code>, and use this list to create an instance of <code>MyList</code> (<code>bar</code>).</p>
<p>Now, again, the list passed to <code>MyList</code> should only contain <code>MyClass</code> elements! What I want is Python to be aware of this fact! When I write a loop where I iterate over the contents of <code>bar</code>, I would like that Python knows that the elements in <code>bar</code> are <code>MyClass</code> objects. </p>
<p>A major inconvenience in my program for now is that Python is not aware of this and the autocompletion does not work. In other words: In the loop, when I write <code>i.</code>, I would like all the possible arguments to pop up (in this case <code>x</code> and <code>y</code>). Can I define some magic method in Python for <code>MyList</code> which makes Python aware of the contents of this list?</p>
</div>
<div class="post-text" itemprop="text">
<h1>PEPÂ 484</h1>
<p>In Python â‰¥ 3.0, you can use function annotations (<a href="https://www.python.org/dev/peps/pep-3107/" rel="nofollow">PEPÂ 3107</a>) with the type hinting semantics of <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow">PEPÂ 0484</a>. Although the latter proposal was only accepted in PythonÂ 3.5 and <a href="https://www.python.org/dev/peps/pep-0484/#what-about-existing-uses-of-annotations" rel="nofollow">will be provisional until the release of 3.6</a>, it's syntactically backwards compatible to all Python versions supporting PEPÂ 3107, so using type hint annotations in any 3.x version of Python should <a href="https://en.wikipedia.org/wiki/Primum_non_nocere" rel="nofollow"><em>at least</em> not hurt</a>.<sup>[1]</sup></p>
<p>Whether it <em>helps</em> your IDE or interactive interpreter (REPL) to do better autocompletion <strong>is up to that IDE or interpreter</strong>, and maybe its settings, even for Python â‰¥ 3.5.</p>
<p>For PythonÂ 2, an <a href="https://www.python.org/dev/peps/pep-0484/#suggested-syntax-for-python-2-7-and-straddling-code" rel="nofollow">alternative notation using comments</a> is available, that tools supporting PEPÂ 0484 might or might not respect.</p>
<h1>Add the type hints you care about</h1>
<p>Let's look how the annotation-based hinting (PythonÂ 3.x) would look for your code. (Comment based, Python-2.x-compatible hinting is left as an exercise for the reader.)</p>
<p>To indicate that iterating over <code>MyList</code> instances yields <code>MyClass</code> objects, we hint the return type of <code>__iter__()</code> by appending a <code>-&gt;</code> (Arrow made of a minus and a greater-than sign) after the function definition's colon, followed by the type of the return value. <code>__iter__()</code> itself doesn't return a <code>MyClass</code>, it returns an iterator. To indicate that it shall be an iterator over <code>MyClass</code>, we use the <a href="https://www.python.org/dev/peps/pep-0484/#generics" rel="nofollow">generic</a> <a href="https://docs.python.org/3/library/typing.html#typing.Iterator" rel="nofollow"><code>Iterator</code> abstract base class</a> from the <a href="https://www.python.org/dev/peps/pep-0484/#the-typing-module" rel="nofollow"><code>typing</code> module</a><sup>[2]</sup>:</p>
<pre><code>from typing import Iterator

class MyClass:
    # ...

class MyList:
    # ...

    def __iter__(self): -&gt; Iterator[MyClass]
        return iter(self.list)
</code></pre>
<p>To be able to hold this promise, <code>self.list</code> must contain only <code>MyClass</code> instances. So let's kindly ask our callers to provide such, by type-hinting the <code>__init__()</code> argument:</p>
<pre><code>from typing import Iterator, Iterable

# ...

class MyList:
    def __init__(self, list: Iterable[MyClass]):
        self.list = list

    def __iter__(self): -&gt; Iterator[MyClass]
        return iter(self.list)
</code></pre>
<p>Note that I chose the <code>Iterable</code> generic abstract base class, not the more specific <a href="https://docs.python.org/3/library/typing.html#typing.List" rel="nofollow"><code>List</code> generic abstract base class</a> (nor <code>Mapping</code>, <code>Sequence</code>, or <code>AbstractSet</code>), as your implementation only relies on <code>iter(...)</code>.</p>
<hr/>
<p><sup>[1]</sup> except maybe readability when overused. So <a href="https://mail.python.org/pipermail/python-dev/2015-May/140104.html" rel="nofollow">as Mark writes</a>, "please use type-hints responsibly" if you do use them.</p>
<p><sup>[2]</sup> included in Python â‰¥ 3.5. For lower versions, use the <a href="https://pypi.python.org/pypi/backports.typing" rel="nofollow">backport</a> installable with <code>pip install typing</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using the PyCharm IDE, then you can do this:</p>
<pre><code>for i in bar:
    assert isinstance(i, MyClass)
</code></pre>
<p>or this:</p>
<pre><code>for i in bar: # type: MyClass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python is not aware of any types until you actually run your code. That is when types are checked and actions based on the type occur. </p>
<p>What you are looking for is an IDE/<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" rel="nofollow">REPL</a> feature while developing code. In the default Python REPL this sort of look-up might not be available. In more sophisticated enviroments this does actually happen and you can see the attributes for a given class.</p>
<p>For example, in the <a href="http://ipython.org/" rel="nofollow"><code>IPython</code></a> REPL I often use, when inside the loop:</p>
<pre><code>for i in bar:
</code></pre>
<p>I press <code>i.</code> and hit <code>tab</code> both elements <code>i.x  i.y</code> are presented. This is because the <code>REPL</code> has been developed to allow for greater introspection while developing code. </p>
<p>I'm pretty sure most well known IDEs provide this; Pythons default REPL is rather simplistic (<code>3.5</code>'s has some autocomplete, though! :D) and doesn't offer way too much.</p>
</div>
<span class="comment-copy">I think there are two separate questions: how to enforce MyList to contain only instances of MyClass (note: I'd make MyList a subclass of <code>list</code> and overwrite append, init, etc.) and how to make the autocompletion work (note: <code>__dict__</code>).</span>
<span class="comment-copy">autocompletion is not part of python but IDE.</span>
<span class="comment-copy">FWIW, the usual Python philosophy is for code to be <a href="https://en.wikipedia.org/wiki/Robustness_principle" rel="nofollow noreferrer">generous in what it accepts and strict in what it produces</a>; imposing unnecessary restrictions on the data that your classes / functions accept makes them less flexible &amp; re-usable, so it should only be done when you have a good reason to do so.</span>
<span class="comment-copy">BTW, <code>list</code> is a bad variable name since it shadows the built-in <code>list</code> type, which can lead to mysterious bugs. Also, <code>self.y = x * x</code> is simpler than <code>self.y = self.x ** 2</code>.</span>
<span class="comment-copy">Python generally uses "duck typing", it is not considered a typed language but rather a dynamic one. However, your desire to offer some guarantees on parameters and returnvalues is not new and there are approaches to improve python: <a href="https://duckduckgo.com/?q=python+type+hints" rel="nofollow noreferrer">duckduckgo.com/?q=python+type+hints</a></span>
<span class="comment-copy">A very thorough explanation, thanks a lot for that! I will try to include all of this in my code ðŸ˜Š</span>
<span class="comment-copy">This might also work with other IDEs.</span>
<span class="comment-copy">Yes, I am using PyCharm and even though this is not a solution that will work in all environments, it at least works for me at the moment! ðŸ˜Š Thanks a lot for this hint! One note here: I not quite the fan of assert statements since it is ignored in some conditions.</span>
<span class="comment-copy">You are welcome.</span>
<span class="comment-copy">A follow up question: I guess it is not possible to add this to the <b>iter</b> magic method, so the IDE automatically knows that without having to mention that next to the loop all the time...!?</span>
<span class="comment-copy">Just for anyone wondering about the above question: in PyCharm, all this is possible when one writes in the MyList class <code>self.list = list  # type: list[MyClass]</code></span>
<span class="comment-copy">Actually, even Python 2's REPL can do some autocompletion (at least, on *nix systems), but you have to enable it. The easiest way to do that is with an appropriate PYTHONSTARTUP script, as shown in the <a href="https://docs.python.org/2/library/rlcompleter.html" rel="nofollow noreferrer">rlcompleter docs</a>.</span>
<span class="comment-copy">Thanks for the clarification of that. I was not aware that the REPL feature depends on the IDE. ðŸ˜Š</span>
