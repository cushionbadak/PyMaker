<div class="post-text" itemprop="text">
<p>I am mocking (using python Mock) a function where I want to return a list of values, but in some of the items in the list I want a side effect to also occur (at the point where the mocked function is called).  How is this most easily done?  I'm trying something like this:</p>
<pre><code>import mock
import socket

def oddConnect():
  result = mock.MagicMock()  # this is where the return value would go
  raise socket.error  # I want it assigned but also this raised

socket.create_connection = mock(spec=socket.create_connection,
  side_effect=[oddConnect, oddConnect, mock.MagicMock(),])
# what I want: call my function twice, and on the third time return normally
# what I get: two function objects returned and then the normal return

for _ in xrange(3):
  result = None
  try:
    # this is the context in which I want the oddConnect function call
    # to be called (not above when creating the list)
    result = socket.create_connection()
  except socket.error:
    if result is not None:
      # I should get here twice
      result.close()
      result = None
  if result is not None:
    # happy days we have a connection
    # I should get here the third time
    pass
</code></pre>
<p>The except clause (and it's internal if) I copied from the internals of socket and want to verify that I "test" that path through my copy of the code.  (I don't understand how socket can get to that code (setting the target while still raising an exception, but that isn't my concern, only the I verify that I can replicate that code path.)  That's why I want the side effect to happen when the mock is called and not when I build the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow"><code>unittest.mock</code> documentation for <code>side_effect</code></a>:</p>
<blockquote>
<p>If you pass in an iterable, it is used to retrieve an iterator which must
  yield a value on every call. This value can either be an exception 
  instance to be raised, or a value to be returned from the call to the
  mock (<code>DEFAULT</code> handling is identical to the function case).</p>
</blockquote>
<p>Therefore, your <code>socket.create_connection</code> mock will <em>return</em> the <em>function</em> <code>oddConnect</code> for the first two calls, then <em>return</em> the <code>Mock</code> object for the last call. From what I understand, you want to mock <code>create_connection</code> object to actually call those functions as side effects rather than returning them.</p>
<p>I find this behavior rather odd, since you'd expect <code>side_effect</code>, to mean <code>side_effect</code> in every case, <em>not</em> <code>return_value</code>. I suppose the reason this is so lies in the fact that the value of the <code>return_value</code> property must be interpreted as-is. For instance, if your Mock had <code>return_value=[1, 2, 3]</code>, would your Mock return <code>[1, 2, 3]</code> for <em>every</em> call, or would it return <code>1</code> for the first call?</p>
<h2>Solution</h2>
<p>Fortunately, there is a solution to this problem. According to the docs, if you pass a single function to <code>side_effect</code>, then that function will be <em>called</em> (not returned) <em>every time</em> the mock is called.</p>
<blockquote>
<p>If you pass in a function it will be called with same arguments as the
  mock and unless the function returns the <code>DEFAULT</code> singleton the call to
  the mock will then return whatever the function returns. If the function
  returns <code>DEFAULT</code> then the mock will return its normal value (from the
  <code>return_value</code>).</p>
</blockquote>
<p>Therefore, in order to achieve the desired effect, your <code>side_effect</code> function must do something different every time it is called. You can easily achieve this with a counter and some conditional logic in your function. Note that in order for this to work, your counter must exist outside the scope of the function, so the counter isn't reset when the function exits.</p>
<pre><code>import mock
import socket

# You may wish to encapsulate times_called and oddConnect in a class
times_called = 0
def oddConnect():
  times_called += 1
  # We only do something special the first two times oddConnect is called
  if times_called &lt;= 2:
    result = mock.MagicMock()  # this is where the return value would go
    raise socket.error  # I want it assigned but also this raised  

socket.create_connection = mock(spec=socket.create_connection,
  side_effect=oddConnect)
# what I want: call my function twice, and on the third time return normally
# what I get: two function objects returned and then the normal return

for _ in xrange(3):
  result = None
  try:
    # this is the context in which I want the oddConnect function call
    # to be called (not above when creating the list)
    result = socket.create_connection()
  except socket.error:
    if result is not None:
      # I should get here twice
      result.close()
      result = None
  if result is not None:
    # happy days we have a connection
    # I should get here the third time
    pass
</code></pre>
</div>
<span class="comment-copy">Thank you.  Ok, if there is just a single function passed to side_effect it calls it.  I can then compute and tweak whatever I want.  I found that I can also get the same effect by just assigning to the appropriate name and skipping the outer Mock.  <code>socket.create_connection = oddConnect</code> but then for the case where you don't want to raise something you must return the result, which is sensible.  Oh, and you don't get the other Mock functionality like counting calls.</span>
<span class="comment-copy">Great. Also, I recommend you use the mock library's patch function to ensure that the real <code>socket.create_connection</code> is restored after your test runs. See <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
