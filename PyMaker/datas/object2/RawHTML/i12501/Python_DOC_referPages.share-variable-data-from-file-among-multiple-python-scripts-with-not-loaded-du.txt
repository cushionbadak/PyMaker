<div class="post-text" itemprop="text">
<p>I would like to load a big matrix contained in the <code>matrix_file.mtx</code>. This load must be made once. Once the variable <code>matrix</code> is loaded into the memory, I would like many python scripts to share it with not duplicates in order to have a memory efficient multiscript program in bash (or python itself). I can imagine some pseudocode like this:</p>
<pre><code># Loading and sharing script:
import share
matrix = open("matrix_file.mtx","r")
share.send_to_shared_ram(matrix, as_variable('matrix'))

# Shared matrix variable processing script_1
import share
pointer_to_matrix = share.share_variable_from_ram('matrix')
type(pointer_to_matrix)
# output: &lt;type 'numpy.ndarray'&gt;

# Shared matrix variable processing script_2
import share
pointer_to_matrix = share.share_variable_from_ram('matrix')
type(pointer_to_matrix)
# output: &lt;type 'numpy.ndarray'&gt;
...
</code></pre>
<p>The idea is <code>pointer_to_matrix</code> to point to <code>matrix</code> in RAM, which is only once loaded by the n scripts (not n times). They are separately called from a bash script (or if possible form a python main):</p>
<pre><code>$ python Load_and_share.py
$ python script_1.py -args string &amp;
$ python script_2.py -args string &amp;
$ ...
$ python script_n.py -args string &amp;
</code></pre>
<p>I'd also be interested in solutions via hard disk, i.e. <code>matrix</code> could be stored at disk while the <code>share</code> object access to it as being required. Nonetheless, the object (a kind of pointer) in RAM can be seen as the whole matrix.</p>
<p>Thank you for your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Between the <a href="https://docs.python.org/3/library/mmap.html" rel="nofollow"><code>mmap</code> module</a> and <a href="http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.frombuffer.html#numpy.frombuffer" rel="nofollow"><code>numpy.frombuffer</code></a>, this is fairly easy:</p>
<pre><code>import mmap
import numpy as np

with open("matrix_file.mtx","rb") as matfile:
    mm = mmap.mmap(matfile.fileno(), 0, access=mmap.ACCESS_READ)
    # Optionally, on UNIX-like systems in Py3.3+, add:
    # os.posix_fadvise(matfile.fileno(), 0, len(mm), os.POSIX_FADV_WILLNEED)
    # to trigger background read in of the file to the system cache,
    # minimizing page faults when you use it

matrix = np.frombuffer(mm, np.uint8)
</code></pre>
<p>Each process would perform this work separately, and get a read only view of the same memory. You'd change the <code>dtype</code> to something other than <code>uint8</code> as needed. Switching to <code>ACCESS_WRITE</code> would allow modifications to shared data, though it would require synchronization and possibly explicit calls to <code>mm.flush</code> to actually ensure the data was reflected in other processes.</p>
<p>A more complex solution that follows your initial design more closely might be to uses <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager" rel="nofollow"><code>multiprocessing.SyncManager</code></a> to create a connectable shared "server" for data, allowing a single common store of data to be registered with the manager and returned to as many users as desired; creating an <code>Array</code> (based on <code>ctypes</code> types) with the correct type on the manager, then <code>register</code>-ing a function that returns the same shared <code>Array</code> to all callers would work too (each caller would then convert the returned <code>Array</code> via <code>numpy.frombuffer</code> as before). It's much more involved (it would be easier to have a single Python process initialize an <code>Array</code>, then launch <code>Process</code>es that would share it automatically thanks to <code>fork</code> semantics), but it's the closest to the concept you describe.</p>
</div>
<span class="comment-copy">Which OS do your scripts run under?</span>
<span class="comment-copy">They are running in Ubuntu 14.04, my scripts are written in Python2.7 I found this <a href="http://stackoverflow.com/questions/19289171/importing-a-variable-from-one-python-script-to-another" title="importing a variable from one python script to another">stackoverflow.com/questions/19289171/â€¦</a>, but I dont know if the serialized variable is really shared or is actually loaded n times.</span>
<span class="comment-copy">Lookup mmap -- memory mapped file support. You can open the saved <code>matrix</code> file in separate python scripts as necessary. If you can open read only (PROT_READ but not PROT_WRITE), copying will be minimized or eliminated.</span>
