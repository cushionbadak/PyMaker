<div class="post-text" itemprop="text">
<p>How do I pass variable from one function to another? like:</p>
<pre><code>def test_url(self):
    current_url = "xyz"
def check_url(self):
    #call current_url here.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def get_url(self):
    current_url = 'xyz'
    return current_url

def test_check_url(self):
    url = get_url()
    # write more lines
</code></pre>
<p>A better way to do this, is to overload the <code>setUp()</code> function that comes with unittest. <code>setUp()</code> does the work of initializing variables and tests for you.</p>
<pre><code>class YourTestCase(unittest.TestCase):
    def setUp(self):
        self.current_url = 'xyz'

    def test_check_url(self):
        self.assertEqual(self.current_url, 'xyz')
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3.5/library/unittest.html#unittest.TestCase.setUp" rel="nofollow noreferrer"><code>setUp()</code></a></span>
<span class="comment-copy">@user3100115, do you mean lieo def setUp(self): self.current_url = "none"?</span>
<span class="comment-copy">Can you give an example for the code that would call these two functions?  Could you use methods rather than functions (and then store the url as a class member)?</span>
<span class="comment-copy">Those tests in the <code>YourTestCase</code> will not run. test function must start with <code>test_</code> unless you create an instance of <a href="https://docs.python.org/3/library/unittest.html#unittest.TestLoader" rel="nofollow noreferrer"><code>TestLoader</code></a> and overwrite <a href="https://docs.python.org/3/library/unittest.html#unittest.TestLoader.testMethodPrefix" rel="nofollow noreferrer"><code>testMethodPrefix</code></a></span>
<span class="comment-copy">Correct! missed out on that. changed it.</span>
<span class="comment-copy">@DruhinBala thank you. Maybe stupid question but why is the second solution better than first one?</span>
<span class="comment-copy">Think of it like this. 1. As your class grows in complexity so will your variables and dependencies. setup() is great because it automates and provides these variables to your functions without you having to specifically make a point and tax yourself to write it out explicitly. Makes things simpler and easier.</span>
