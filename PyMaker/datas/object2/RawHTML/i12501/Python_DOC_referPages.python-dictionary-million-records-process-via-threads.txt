<div class="post-text" itemprop="text">
<p>There is Python dictionary with millions records incremental order that need to be processed by threads.</p>
<pre><code>data = {}
data[number] = name
</code></pre>
<p>The numbers are in incremental order, they go from 1 to 1 million</p>
<p>The threards are called tested via</p>
<p>First option backfires as it only processes certain threads defined by max_tries.</p>
<pre><code>for i in xrange(1, max_tries + 1):
    name = data.get(str(i))

    current = MainThread(name)
    check_results.append(current)
    current.start()
</code></pre>
<p>Second one executes a million records at a time.</p>
<pre><code>for item in data:
    name = data[item]

    current = MainThread(name)
    check_results.append(current)
    current.start()
</code></pre>
<p>How would you solve it.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use a <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor" rel="nofollow"><code>ThreadPoolExecutor</code></a>. I haven't tested the following codes, so please treat them as pseudo codes. </p>
<pre><code>import concurrent.futures

def my_processing_function():
    pass

with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:

    future_objects = []
    for item in data:
        name = data[item]
        future_objects.append(executor.submit(my_processing_function, name, 60))

    for future in concurrent.futures.as_completed(future_objects):
        try:
            res = future.result()
        except Exception as exc:
            print('exception: {}'.format(exc))
        else:
            print("Result: {}".format(res))
</code></pre>
</div>
<span class="comment-copy">Why are you using a dictionary instead of a list? Are some indexes missing? Also, is your code CPU bound or IO bound? Threads in python don't add performance to CPU bound processing. Also, check the <code>concurrent.futures</code> module. It works on Python 3 but has a backport on PyPI</span>
<span class="comment-copy">The incremental number in the dictionary are later used.</span>
<span class="comment-copy">How about using a <code>multiprocessing.pool.ThreadPool</code> to create a sane number of threads and use its <code>ThreadPool.map</code> method for processing.</span>
<span class="comment-copy">As with @JBernardo, I'm still not sure why you use a <code>dict</code>. If the keys really are 1 through 1000000, then a list would be much more efficient. "they are later used" is still a head-scratcher because a list index can be used later also.</span>
<span class="comment-copy">The incremental numbers from dict are later logged into csv file along with name</span>
