<div class="post-text" itemprop="text">
<p>I've noticed some strange behavior on Python 3's implementation of <code>json.dumps</code>, namely the key order changes every time I dump the same object from execution to execution. Googling wasn't working since I don't care about sorting the keys, I just want them to remain the same! Here is an example script:</p>
<pre><code>import json

data = {
    'number': 42,
    'name': 'John Doe',
    'email': 'john.doe@example.com',
    'balance': 235.03,
    'isadmin': False,
    'groceries': [
        'apples',
        'bananas',
        'pears',
    ],
    'nested': {
        'complex': True,
        'value': 2153.23412
    }
}

print(json.dumps(data, indent=2))
</code></pre>
<p>When I run this script I get different outputs every time, for example:</p>
<pre><code>$ python print_data.py 
{
  "groceries": [
    "apples",
    "bananas",
    "pears"
  ],
  "isadmin": false,
  "nested": {
    "value": 2153.23412,
    "complex": true
  },
  "email": "john.doe@example.com",
  "number": 42,
  "name": "John Doe",
  "balance": 235.03
}
</code></pre>
<p>But then I run it again and I get:</p>
<pre><code>$ python print_data.py 
{
  "email": "john.doe@example.com",
  "balance": 235.03,
  "name": "John Doe",
  "nested": {
    "value": 2153.23412,
    "complex": true
  },
  "isadmin": false,
  "groceries": [
    "apples",
    "bananas",
    "pears"
  ],
  "number": 42
}
</code></pre>
<p>I understand that dictionaries are unordered collections and that the order is based on a hash function; however in Python 2 - the order (whatever it is) is fixed and doesn't change on a per-execution basis. The difficulty here is that it's making my tests difficult to run because I need to compare the JSON output of two different modules! </p>
<p>Any idea what is going on? How to fix it? Note that I would like to avoid using an OrderedDict or performing any sorting and what matters is that the string representation remains the same between executions. Also this is for testing purposes only and doesn't have any effect on the implementation of my module. </p>
</div>
<div class="post-text" itemprop="text">
<p>Python dictionaries and JSON objects are <em>unordered</em>. You <em>can</em> ask <code>json.dumps()</code> to sort the keys in the output; this is meant to ease testing. Use the <code>sort_keys</code> parameter to <code>True</code>:</p>
<pre><code>print(json.dumps(data, indent=2, sort_keys=True))
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/15479928/why-is-the-order-in-python-dictionaries-and-sets-arbitrary/15479974#15479974">Why is the order in Python dictionaries and sets arbitrary?</a> as to why you see a different order each time.</p>
<p>You can set the <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED" rel="noreferrer"><code>PYTHONHASHSEED</code> environment variable</a> to an integer value to 'lock' the dictionary order; use this only to run tests and not in production, as the whole point of hash randomisation is to prevent an attacker from trivially DOS-ing your program.</p>
</div>
<div class="post-text" itemprop="text">
<p>The story behind this behavior is <a href="http://www.securityweek.com/hash-table-collision-attacks-could-trigger-ddos-massive-scale" rel="nofollow noreferrer">this</a> vulnerability. To prevent it, same hash codes on one PC should be different on another one. </p>
<p>Python 2 has probably disabled this behavior (hash randomizing) by default because of compatibility, as this would for example break doctests. Python 3 probably (an assumption) has not needed the compability.</p>
</div>
<span class="comment-copy">I can guarantee that the only reason the order is fixed on Python 2 is accidental, unless <code>sort_keys=True</code></span>
<span class="comment-copy">@WayneWerner it's not accidental; hash functions are deterministic -- see the comments below, order changes after Python 3.3 because of the inclusion of a random hash seed.</span>
<span class="comment-copy">Well, I stand corrected! Very interesting.</span>
<span class="comment-copy">Yep, learning lots about how Python 3 implements dictionaries today!</span>
<span class="comment-copy">Any day when you're learning is a good day :)</span>
<span class="comment-copy">From the post you linked, this is what I was looking for: "Note that as of Python 3.3, a random hash seed is used as well, making hash collisions unpredictable to prevent certain types of denial of service (where an attacker renders a Python server unresponsive by causing mass hash collisions). This means that the order of a given dictionary is then also dependent on the random hash seed for the current Python invocation."</span>
<span class="comment-copy">Do you know how to fix the hash seed for testing purposes? My tests require that I don't pass extra arguments into the json.dumps function.</span>
<span class="comment-copy">@bbengfort: You can set the <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED" rel="nofollow noreferrer"><code>PYTHONHASHSEED</code> environment variable</a> to an integer value.</span>
<span class="comment-copy">Might be useful if you include the PYTHONHASHSEED environment variable response in your answer -- as that was what I was really looking for. I'm happy to edit my question to make that more obvious if you think that's a good idea.</span>
<span class="comment-copy">@bbengfort: done.</span>
