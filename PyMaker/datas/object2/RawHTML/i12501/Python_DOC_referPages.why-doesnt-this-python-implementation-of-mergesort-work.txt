<div class="post-text" itemprop="text">
<p>When I input <code>[8,7,6,5,4,3,2,1]</code> the output is =&gt; <code>[4, 3, 2, 1, 8, 7, 6, 5]</code>.</p>
<p>It seems like the only thing different from a working solution (comparing <a href="http://interactivepython.org/runestone/static/pythonds/SortSearch/TheMergeSort.html" rel="nofollow">here</a>) is that instead of a <code>sorted</code> list, I have a <code>k</code> variable that I am incrementing, and update <code>arr[k]</code> in place of <code>sorted</code>. </p>
<p>Why doesn't this work? And how does updating <code>arr[k]</code> work? It seems like you would be losing data by updating the original input array.</p>
<pre><code>def mergesort(arr):
    if len(arr) == 1:
        return

    else:
        mid = len(arr)/2
        left = arr[0:mid]
        right = arr[mid:len(arr)]

        sorted = []
        i = 0
        j = 0
        mergesort(left)
        mergesort(right)

        while i &lt; len(left) and j &lt; len(right):
            if left[i] &lt; right[j]:
                sorted.append(left[i])
                i += 1
            else:
                sorted.append(right[j])
                j += 1

        while i &lt; len(left):
            sorted.append(left[i])
            i += 1

        while j &lt; len(right):
            sorted.append(right[j])
            j += 1

        return sorted
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should just assign to left and right variable as you function return the sorted list after sorting also in the base case you should return a list and use <code>//</code> for integer division check this code</p>
<pre><code>def mergesort(arr):
    if len(arr) == 1:
        return arr

    else:
        mid = len(arr)//2
        left = arr[0:mid]
        right = arr[mid:len(arr)]

        sorted = []
        i = 0
        j = 0
        left = mergesort(left) #left is now sorted
        right = mergesort(right)

        while i &lt; len(left) and j &lt; len(right):
            if left[i] &lt; right[j]:
                sorted.append(left[i])
                i += 1
            else:
                sorted.append(right[j])
                j += 1

        while i &lt; len(left):
            sorted.append(left[i])
            i += 1

        while j &lt; len(right):
            sorted.append(right[j])
            j += 1

        return sorted

print (mergesort([8,7,6,5,4,3,2,1,3]))
</code></pre>
</div>
<span class="comment-copy">Side-note: <code>arr[0:mid]</code> and particularly <code>arr[mid:len(arr)]</code> are just slower ways to say <code>arr[:mid]</code> and <code>arr[mid:]</code> respectively. If you want to use the end points in a slice, just omit them. Also, don't name variables <code>sorted</code>; you're shadowing the <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">built-in <code>sorted</code> function</a>.</span>
<span class="comment-copy">Also, this can't possibly be your real code. You're returning <code>lst</code>, a variable that doesn't even exist anywhere else in the function...</span>
<span class="comment-copy">I haven't analyzed fully, but the reason updating <code>arr[k]</code> is fine is that <code>left</code> and <code>right</code> are shallow copies of their segments of the original list, not views. Once you've sliced, the slices are independent; reassigning elements of the <code>list</code> they came from doesn't change the slice results.</span>
<span class="comment-copy">What version of Python are you using? <code>mid = len(arr)/2</code> would fail in Python 3.</span>
<span class="comment-copy">But sorted is the name of a built in function. And it returns nothing if the length is 1. And whatever it returns, when you call mergesort(left) and mergesort(right) you don't capture the return values anywhere or do anything with them...?</span>
<span class="comment-copy">Hrmm that appears to return an error <code>while i &lt; len(left) and j &lt; len(right): TypeError: object of type 'NoneType' has no len()</code></span>
<span class="comment-copy">what input did you use to test ?</span>
<span class="comment-copy">Actually, it works!!! YES! Forgot to change a variable.</span>
<span class="comment-copy">@Aspen the other code uses the fact that the slice operator copies the list so left and right are each their own list and arr could be used to hold the merge as you only access right and left arrays and compare them not the main array</span>
<span class="comment-copy">@Aspen yes it's copied into left and right and you are free to do what you like with it</span>
