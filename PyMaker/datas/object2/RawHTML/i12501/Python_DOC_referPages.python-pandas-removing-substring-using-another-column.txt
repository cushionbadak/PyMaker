<div class="post-text" itemprop="text">
<p>I've tried searching around and can't figure out an easy way to do this, so I'm hoping your expertise can help.</p>
<p>I have a pandas data frame with two columns</p>
<pre><code>import numpy as np
import pandas as pd

pd.options.display.width = 1000
testing = pd.DataFrame({'NAME':[
    'FIRST', np.nan, 'NAME2', 'NAME3', 
    'NAME4', 'NAME5', 'NAME6'], 'FULL_NAME':['FIRST LAST', np.nan, 'FIRST LAST', 'FIRST NAME3', 'FIRST NAME4 LAST', 'ANOTHER NAME', 'LAST NAME']})
</code></pre>
<p>which gives me</p>
<pre><code>          FULL_NAME   NAME
0        FIRST LAST  FIRST
1               NaN    NaN
2        FIRST LAST  NAME2
3       FIRST NAME3  NAME3
4  FIRST NAME4 LAST  NAME4
5      ANOTHER NAME  NAME5
6         LAST NAME  NAME6
</code></pre>
<p>what I'd like to do is take the values from the 'NAME' column and remove then from the 'FULL NAME' column if it's there. So the function would then return</p>
<pre><code>          FULL_NAME   NAME           NEW
0        FIRST LAST  FIRST          LAST
1               NaN    NaN           NaN
2        FIRST LAST  NAME2    FIRST LAST
3       FIRST NAME3  NAME3         FIRST
4  FIRST NAME4 LAST  NAME4    FIRST LAST
5      ANOTHER NAME  NAME5  ANOTHER NAME
6         LAST NAME  NAME6     LAST NAME
</code></pre>
<p>So far, I've defined a function below and am using the apply method. This runs rather slow on my large data set though and I'm hoping there's a more efficient way to do it. Thanks!</p>
<pre><code>def address_remove(x):
    try:
        newADDR1 = re.sub(x['NAME'], '', x[-1])
        newADDR1 = newADDR1.rstrip()
        newADDR1 = newADDR1.lstrip()
        return newADDR1
    except:
        return x[-1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is one solution that is quite a bit faster than your current solution, I'm not convinced that there wouldn't be something faster though</p>
<pre><code>In [13]: import numpy as np
         import pandas as pd
         n = 1000
         testing  = pd.DataFrame({'NAME':[
         'FIRST', np.nan, 'NAME2', 'NAME3', 
         'NAME4', 'NAME5', 'NAME6']*n, 'FULL_NAME':['FIRST LAST', np.nan, 'FIRST  LAST', 'FIRST NAME3', 'FIRST NAME4 LAST', 'ANOTHER NAME', 'LAST NAME']*n})
</code></pre>
<p>This is kind of a long one liner but it should do what you need</p>
<p>Fasted solution I can come up with is using <code>replace</code> as mentioned in another answer:</p>
<pre><code>In [37]: %timeit testing ['NEW2'] = [e.replace(k, '') for e, k in zip(testing.FULL_NAME.astype('str'), testing.NAME.astype('str'))]
100 loops, best of 3: 4.67 ms per loop
</code></pre>
<p>Original answer:</p>
<pre><code>In [14]: %timeit testing ['NEW'] = [''.join(str(e).split(k)) for e, k in zip(testing.FULL_NAME.astype('str'), testing.NAME.astype('str'))]
100 loops, best of 3: 7.24 ms per loop
</code></pre>
<p>compared to your current solution:</p>
<pre><code>In [16]: %timeit testing['NEW1'] = testing.apply(address_remove, axis=1)
10 loops, best of 3: 166 ms per loop
</code></pre>
<p>These get you the same answer as your current solution</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do it with <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.replace.html" rel="nofollow"><code>replace</code></a> method and <code>regex</code> argument and then use <code>str.strip</code>:</p>
<pre><code>In [605]: testing.FULL_NAME.replace(testing.NAME[testing.NAME.notnull()], '', regex = True).str.strip()
Out[605]: 
0            LAST
1             NaN
2      FIRST LAST
3           FIRST
4     FIRST  LAST
5    ANOTHER NAME
6       LAST NAME
Name: FULL_NAME, dtype: object
</code></pre>
<p><em>Note</em> You need to pass <code>notnull</code> to <code>testing.NAME</code> because without it <code>NaN</code> values also will be replaced to empty string</p>
<p><strong>Benchmarking</strong> is slower then fastest @johnchase solution but I think it's more readable and use all pandas methods of DataFrames and Series:</p>
<pre><code>In [607]: %timeit testing['NEW'] = testing.FULL_NAME.replace(testing.NAME[testing.NAME.notnull()], '', regex = True).str.strip()
100 loops, best of 3: 4.56 ms per loop

In [661]: %timeit testing ['NEW'] = [e.replace(k, '') for e, k in zip(testing.FULL_NAME.astype('str'), testing.NAME.astype('str'))]
1000 loops, best of 3: 450 µs per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you want to use the replace() method that strings have, it's orders of magnitude faster than using regular expressions (I just checked quickly in IPython):</p>
<pre><code>%timeit mystr.replace("ello", "")
The slowest run took 7.64 times longer than the fastest. This could mean that an intermediate result is being cached 
1000000 loops, best of 3: 250 ns per loop

%timeit re.sub("ello","", "e")
The slowest run took 21.03 times longer than the fastest. This could mean that an intermediate result is being cached 
1000000 loops, best of 3: 4.7 µs per loop
</code></pre>
<p>If you need further speed improvements after that, you should look into numpy's vectorize function (but I think the speed up from using replace instead of regular expressions should be pretty substantial).</p>
</div>
<span class="comment-copy">great! I was trying to come up with the 2nd solution, but the third one is even better! Would you mind telling me what the "zip" command is doing though?</span>
<span class="comment-copy">Glad that worked! <code>zip</code> takes multiple iterables and returns an iterator of the aggregate from the original iterables. In more lay terms it allows you to loop through two or more iterables simultaneously. <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#zip</a></span>
<span class="comment-copy">pure pandas solution. good work. definitely easier to read, even if it wasn't faster.</span>
<span class="comment-copy">Should <code>df</code> be <code>testing</code> in your code?</span>
<span class="comment-copy">@johnchase yes, sorry. It's for less typing in console</span>
<span class="comment-copy">Yep, I did the exact same thing at first too. Also what size is the dataframe for your test? I'm getting pretty different timing results running your code, though I'm wondering if it's something I'm doing...</span>
<span class="comment-copy">@johnchase Yes, your solution is almost 10 times faster. I have a more powerfull PC :)</span>
