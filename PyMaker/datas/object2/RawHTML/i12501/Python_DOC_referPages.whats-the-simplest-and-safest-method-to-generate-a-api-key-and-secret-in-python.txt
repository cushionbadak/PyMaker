<div class="post-text" itemprop="text">
<p>I need to generate a API key and Secret that would be stored in a Redis server. What would be the best way to generate a key and secret?</p>
<p>I am develop a Django-tastypie framework based app.</p>
</div>
<div class="post-text" itemprop="text">
<p>EDIT: for a very secure way of generating random number, you should use urandom:</p>
<pre><code>from binascii import hexlify

key = hexlify(os.urandom(length))
</code></pre>
<p>this will produce bytes, call <code>key.decode()</code> if you need a string </p>
<p>You can just generate keys of your desired length the python way:</p>
<pre><code>import random
import string

def generate_key(length):
    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))
</code></pre>
<p>And then you can just call it with your desired length <code>key = generate_key(40)</code>.<br/>
You can specify what alphabet you want to use, for example using only <code>string.ascii_lowercase</code> for key consisting of only lowercase letters etc.</p>
<p>There is also Model for Api authentication in tastypie, might be worth checking out <a href="https://django-tastypie.readthedocs.org/en/latest/authentication.html#apikeyauthentication" rel="nofollow noreferrer">https://django-tastypie.readthedocs.org/en/latest/authentication.html#apikeyauthentication</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you're on Python 3.6 or later, the <a href="https://docs.python.org/3/library/secrets.html" rel="noreferrer">secrets</a> module is the way to go:  </p>
<blockquote>
<p>The secrets module is used for generating cryptographically strong random numbers suitable for managing data such as passwords, account authentication, security tokens, and related secrets.</p>
<p>In particular, secrets should be used in preference to the default pseudo-random number generator in the random module, which is designed for modelling and simulation, not security or cryptography.</p>
</blockquote>
<p>e.g. to generate a 16 byte token:</p>
<pre><code>&gt;&gt;&gt; import secrets
&gt;&gt;&gt; secrets.token_urlsafe(16)
'zs9XYCbTPKvux46UJckflw'
&gt;&gt;&gt; secrets.token_hex(16)
'6bef18936ac12a9096e9fe7a8fe1f777'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adding answer as I can't comment on T. Opletals answer.</p>
<p>You should not use random.choice as random isn't cryptographically secure. A better option would be random.SystemRandom() which uses the system source of randomness, on linux this would be urandom.</p>
<pre><code>def generate_key(length):
    char_set = string.ascii_letters + string.punctuation                    
    urand = random.SystemRandom()                                           
    return ''.join([urand.choice(char_set) for _ in range(length)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can also use following module to generate random string </p>
<pre><code> 1 - os.urandom(64).encode('hex') #from os module
 2 - uuid.uuid4()                 # from uuid module
 3 - get_random_string(length=32) #from django
 4 - secrets.token_hex(64)         #from secrets &gt; python 3.6 
</code></pre>
</div>
<span class="comment-copy">There's <code>get_random_string</code> in <code>django.utils.crypto</code>, see <a href="http://stackoverflow.com/questions/25943850/django-package-to-generate-random-alphanumeric-string" title="django package to generate random alphanumeric string">stackoverflow.com/questions/25943850/â€¦</a></span>
<span class="comment-copy">Not sure why this was downvoted, os.urandom() is both easy and the safest.</span>
<span class="comment-copy">Thank you will try it out</span>
<span class="comment-copy">Scroll down if you're using Python 3.6+. There is much simpler solution proposed by Moby Duck.</span>
<span class="comment-copy">Thanks! Here's a version to invoke straight from the terminal: <code>python -c 'import secrets; print(secrets.token_urlsafe(16))'</code></span>
