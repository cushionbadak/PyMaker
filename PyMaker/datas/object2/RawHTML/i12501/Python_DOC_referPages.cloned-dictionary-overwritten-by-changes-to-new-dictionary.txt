<div class="post-text" itemprop="text">
<p>I feel like this must have asked before but I have been unable to find the solution I'm looking for:</p>
<p>I have a simple dictionary <code>a</code> that contains one key and a list. I wanted to copy that dictionary for future use, but any changes I make to <code>a</code> effect my copy, <code>b</code>.:</p>
<pre><code>&gt;&gt;&gt; a
{'kn': [8, 9, 10, 11, 12]}
&gt;&gt;&gt; b = a.copy()
&gt;&gt;&gt; b
{'kn': [8, 9, 10, 11, 12]}

&gt;&gt;&gt; for l in range(len(a['kn'])):
...     a['kn'][l] = a['kn'][l] + 10

&gt;&gt;&gt; a
{'kn': [18, 19, 20, 21, 22]}
&gt;&gt;&gt; b
{'kn': [18, 19, 20, 21, 22]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yup, <code>dict.copy</code> returns a <em>shallow copy</em> of the dictionary:</p>
<pre><code>a.copy??
Docstring: D.copy() -&gt; a shallow copy of D
Type:      builtin_function_or_method
</code></pre>
<blockquote>
<p>A shallow copy constructs a new compound object and then (to the extent possible) <strong><em>inserts references</em></strong> into it to the objects found in the original.</p>
</blockquote>
<p>Instead, use <strong><a href="https://docs.python.org/3/library/copy.html#copy.deepcopy" rel="nofollow"><code>copy.deepcopy</code></a></strong> which performs a deep copy:</p>
<blockquote>
<p>A deep copy constructs a new compound object and then, recursively, <strong><em>inserts copies</em></strong> into it of the objects found in the original.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; import copy
&gt;&gt;&gt; b = copy.deepcopy(a)
&gt;&gt;&gt; for l in range(len(a['kn'])):
...     a['kn'][l] = a['kn'][l] + 10
&gt;&gt;&gt; a
{'kn': [18, 19, 20, 21, 22]}
&gt;&gt;&gt; b
{'kn': [8, 9, 10, 11, 12]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's because you're not making a deep copy of the dictionary.</p>
<p>This should point you in the right direction: <a href="https://docs.python.org/2/library/copy.html" rel="nofollow">https://docs.python.org/2/library/copy.html</a></p>
<p>In short, when you <code>copy()</code> a dictionary, you're only copying the <strong>pointers</strong> to the items in the dictionary. Thus when you change the values in one dictionary, since the pointers are the same in both, the change shows up immediately in the other.</p>
<p>By performing a <code>deepcopy()</code>, you're copying the <strong>values</strong> from one dictionary to another. Now you have two separate copies.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly, .copy() does a shallow copy, so the list inside your dictionary is still passed as a reference. You need to use deep copy.</p>
<pre>
import copy
a = {'kn': [8, 9, 10, 11, 12]}
b = copy.deepcopy(a)
</pre>
</div>
<div class="post-text" itemprop="text">
<p>You have used the shallow version of .copy(), i.e. you have created two copies to the dictionary, but both of them still contain the same reference of list. You need to use copy.deepcopy() as described <a href="https://docs.python.org/2/library/copy.html" rel="nofollow">here</a>, the difference is:</p>
<blockquote>
<p>A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.</p>
<p>A deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original.</p>
</blockquote>
</div>
