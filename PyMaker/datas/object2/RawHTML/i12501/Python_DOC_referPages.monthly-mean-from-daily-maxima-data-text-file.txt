<div class="post-text" itemprop="text">
<p>I am writing Python scripts which should help me plot some results. In one of these scripts I read in a text file with hourly data of ozone measurements.
From this I managed to get the daily maxima already, but when I try to get monthly mean concentrations, I get the monthly maximum value instead.</p>
<p>How do I get the monthly mean ozone concentrations from these daily maximum values?</p>
<p>It's the part "for j in range" etc.</p>
<pre><code># Reading in the ASCII file with observations
f = open(sfile, 'r')
header1 = f.readline()
station = []
for line in f:
  line = line.strip()
  columns = line.split()
  data = float(columns[4])
  station.append(data)

# Getting daily maximum from observational data
# Momentarily it is still hourly data
xmax = np.zeros(366)
day=1
hh=0

for i in range(0, len(station)):
  if station[i]&gt;xmax[day]:
    xmax[day]=station[i]
  hh = hh+1
  if (hh&gt;23):
    day = day+1
    hh = 0
# Getting monthly mean from observational data
ymax = np.zeros(13)
month=1
day=0
for j in range(0, len(xmax)):   
  if xmax[j]&gt;ymax[month]:
    ymax[month]=xmax[j]
day = day+1
  if (day&gt;30):
    month = month+1
    day = 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have repeated the logic for taking max instead of calculating mean.</p>
<pre><code>ymax = np.zeros(13)
month=1
day=0
for j in range(0, len(xmax)):   
    if xmax[j]&gt;ymax[month]:
        ymax[month]=xmax[j]
    day = day+1
    if (day&gt;30):
        month = month+1
        day = 0
</code></pre>
<p>You have to add up the daily maximums and then divide it by number of days (30) to get the mean. You can achieve it by doing this,</p>
<pre><code>ymax = np.zeros(13)
month=1
day=0
ymax[month] = 0
for j in range(0, len(xmax)):   
    if xmax[j]&gt;ymax[month]:
        ymax[month] += xmax[j]
    day = day+1
    if (day&gt;30):
        month = month+1
        day = 0
        ymax[month] = 0
# then divide it by number of days
ymax = ymax / 30.0
</code></pre>
<p>By the way, python is very user friendly, you can do max of an array by just doing max(array). You don't need to write the whole logic yourself. Same applies for mean calculations.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, you realise that computing a maximum is not the same than computing a mean, yet you use exactly the same algorithm for both (loop through the list and save the value if it is greater than the stored value).</p>
<p>You should get familiar with the <a href="https://docs.python.org/3/library/functions.html?highlight=min#min" rel="nofollow noreferrer"><code>min()</code></a>, <a href="https://docs.python.org/3/library/functions.html?highlight=max#max" rel="nofollow noreferrer"><code>max()</code></a> and <a href="https://docs.python.org/3/library/functions.html?highlight=sum#sum" rel="nofollow noreferrer"><code>sum()</code></a> functions that would enable you to write the same thing in a lot less code.</p>
<p>For instance you can grab the yearly maximum and average in one line each:</p>
<pre><code>&gt;&gt;&gt; year_max = max(stations)
&gt;&gt;&gt; year_av = sum(stations)/len(stations) #Be careful about divisions if you are using python 2 !
</code></pre>
<p>If you want to get monthly (= every 24*30) or daily (= every 24 record) you can try to play with <a href="http://effbot.org/zone/python-list.htm" rel="nofollow noreferrer">list indexing</a>:</p>
<pre><code>&gt;&gt;&gt; jan_max = max(stations[:30]) # for the first 30 days 
&gt;&gt;&gt; jan_av = sum(stations[:30])/len(stations[:30]) 
</code></pre>
<p>Put this in a loop (such as in <a href="https://stackoverflow.com/a/34924714/1219073">MIE</a>'s answer) and you should be good to go.</p>
<p>Finally if you need to do a lot of this kind of operations, I recommend you learn to use a library such as <a href="http://pandas.pydata.org/" rel="nofollow noreferrer">pandas</a> which ease the process a lot. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to get the mean of the monthly data, not the mean of the daily maximum over an entire month, you can do this:</p>
<pre><code>[1.0*sum(station[i:i+23*30])/23*30 for i in range(0,len(station),23*30)]
</code></pre>
<p>But if you want the mean of the maximum:</p>
<pre><code>ymax = np.zeros(13)
month=1
day=0
for j in range(0, len(xmax)):
        ymax[month]+=xmax[j]
    day = day+1
    if (day&gt;30):
        ymax[month] /= 30.0
        month = month+1
        day = 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to what you say, I think that it would be a great use case for the Pandas library (and you already have a numpy dependancy). </p>
<p>Once you have loaded your data in a <a href="http://pandas.pydata.org/pandas-docs/stable/timeseries.html" rel="nofollow">Pandas dataframe as a timeseries</a>, you can use the <a href="http://pandas.pydata.org/pandas-docs/stable/timeseries.html#resampling" rel="nofollow"><code>resample</code> method</a>. </p>
<pre><code>ts.resample('M', how='mean')
</code></pre>
<p>Adding Pandas can be heavy but you also get a lot of data analysis methods for free (plotting, data description, data selection...)</p>
</div>
<span class="comment-copy">Thank you very much, this works perfectly!</span>
