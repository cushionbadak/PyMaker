<div class="post-text" itemprop="text">
<p>I'm making a polynomial class but can't get the add and scale function to work properly. </p>
<p>The scale function should work by multiplying the coefficients of the polynomial by a given x. For example if <code>y=2x^3+4x^2</code> and <code>x=2</code>, then <code>y=4x^3+8x^2</code></p>
<p>The add function should just add like terms of two polynomials.</p>
<p>I've added comments to the code to hopefully explain how I was trying to get the functions to work</p>
<pre><code>class Polynomial:

def __init__(self, coefficients):
    self.coeffs=coefficients

def scale(self, x):
    return Polynomial(self.coeffs*x)

def add(self, other):
    #getting the highest degree to add from
    self.degree=len(self.coeffs)-1
    other.degree=len(other.coeffs)-1

    maxcoeff=max(self.degree,other.degree)+1
    #adding 0's to the end of the shortest one to make adding easiers (pairwise)
    self_temp = self.coeffs + [0]*(maxcoeff-self.degree-1)
    other_temp = other.coeffs + [0]*(maxcoeff-other.degree-1)
    #adding elementwise
    coeffs = [self_temp[i] + other_temp[i] for i in range(len(other_temp))]
    return Polynomial(coeffs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is not what you are looking for:</p>
<pre><code>def scale(self, x):
    return Polynomial(self.coeffs*x)
</code></pre>
<p>With that multiplication you are growing/shrinking the list.</p>
<p>Because your <code>coeffs</code> is an iterable. This is what you want:</p>
<pre><code>def scale(self, x):
    return Polynomial([c * x for c in self.coeffs])
</code></pre>
<p>And this:</p>
<pre><code>self_temp = self.coeffs + [0]*(maxcoeff-self.degree-1)
other_temp = other.coeffs + [0]*(maxcoeff-other.degree-1)
coeffs = [self_temp[i] + other_temp[i] for i in range(len(other_temp))
</code></pre>
<p>Can possibly better be expressed as:</p>
<pre><code>coeffs = [x + y for x, y in itertools.izip_longest(self.coeffs, other.coeffs, fillvalue=0)]
</code></pre>
</div>
<span class="comment-copy">For a better question, please edit to include what it <i>is</i> doing.</span>
<span class="comment-copy">For added interest, you may also want to look into <a href="https://github.com/numpy/numpy/blob/master/numpy/lib/polynomial.py" rel="nofollow noreferrer"><code>numpy.poly1d()</code></a>.</span>
<span class="comment-copy">Your <code>add</code> method looks ok (assuming that <code>.coeffs</code> is ordered sensibly, so that <code>.coeffs[0]</code> contains the constant term), but you should read about <a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" rel="nofollow noreferrer">Special method names</a>.</span>
<span class="comment-copy">thx .................</span>
