<div class="post-text" itemprop="text">
<p>How can I call the custom-defined function in a python script from a bash shell?</p>
<p>I tried to use sys.argv[1], but not working properly.</p>
<p>for example,</p>
<pre><code>import sys

if __name__=='__main__':
    try:
        func = sys.argv[1]
    except: func = None

def function1():
~~~~~~~~
return a

def function2():
~~~~~~~~
return b
</code></pre>
<p>here, I want to call the function 1 or function 2 by typing like</p>
<p>$ script.py function1</p>
<p>$ script.py function2</p>
</div>
<div class="post-text" itemprop="text">
<p>You are getting the name of function , but you are not running it. You should check first if the func name is one of your functions than execute it:</p>
<pre><code>if __name__=='__main__':
    try:
        func = sys.argv[1]
    except: 
        func = None

functions = {    
              "function1": function1,
              "function2": function2
              }

if func in functions:
    functions[func]()
</code></pre>
<hr/>
<p>A simpler solution:</p>
<pre><code> if func == "function1":
     function1()
 elif func == "function2":
     function2()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suggest to use argparse module: <a href="https://docs.python.org/3/library/argparse.html#module-argparse" rel="nofollow">https://docs.python.org/3/library/argparse.html#module-argparse</a></p>
<p>You will thank yourself later.</p>
<p>For your case - since you need to call only 1 function at the time - you can use positional arguments:</p>
<pre><code>import argparse

def function1():
    print("1")

def function2():
    print("2")

parser = argparse.ArgumentParser()

F_MAP = {'function1': function1,
         'function2': function2}

parser.add_argument('function', choices=F_MAP.keys())

args = parser.parse_args()

F_MAP[args.function]()
</code></pre>
<p>As a bonus you get a nice help page when calling with -h argument :)</p>
</div>
<div class="post-text" itemprop="text">
<p>@bigOTHER's answer is good and correct, but if you're looking to build a relatively complex text UI, maybe have a look at something like <a href="http://click.pocoo.org/" rel="nofollow">Click</a>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can refer <a href="https://stackoverflow.com/questions/6315496/display-a-list-of-user-defined-functions-in-the-python-idle-session">Display a list of user defined functions in the Python IDLE session</a></p>
<pre><code>import types
list_function = [f for f in globals().values() if type(f) == types.FunctionType]
</code></pre>
<p>This will return list of available functions, Then you can check if any of these contain sys.argv[1], If yes then you can call your function as </p>
<pre><code>list_function[index]()
</code></pre>
</div>
<span class="comment-copy">Wouldn't a <code>dict</code> of functions be even better?</span>
<span class="comment-copy">@art-solopov you are right, updating</span>
<span class="comment-copy">@art-solopov updated, thanks</span>
<span class="comment-copy">It works perfectly when the command line does not requires additional input arguments. But when running function has something like def func1():     input_data = input("please input 1 or 2")     if input_data == "1":         print("1")     if input_data == "2":         print("2") then it gives a SyntaxError: unexpected EOF while parsing. How can I handle this?</span>
<span class="comment-copy">@jin890 that's another problem,  use <code>raw_input()</code> instead  of <code>input()</code> . Please conisder to upvote the answer and mark it as accepted.</span>
