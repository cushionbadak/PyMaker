<div class="post-text" itemprop="text">
<p>I am trying to create a generator that prints the next number on the list. This is a racket version:</p>
<pre><code>  (require racket/generator)

  (define my-gen
    (generator
     (_)
     (for ([x (list 1 2 3))])
       (yield x)))
</code></pre>
<p>)</p>
<p>How it should work: </p>
<pre><code>(my-gen) -&gt; 1
(my-gen) -&gt; 2
</code></pre>
<p>I also want to be able to use the function directly without having to initialize it at a specific point, so having the generator be the function that actually returns the result, as opposed to something like this:</p>
<pre><code>l = [1, 2, 3]
def myGen():
    for element in l:
        yield element

g = myGen()
print(next(g))
</code></pre>
<p>What is the best way to go about this in python? </p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial</code></a>:</p>
<pre><code>&gt;&gt;&gt; import functools
&gt;&gt;&gt; l = [1, 2, 3]
&gt;&gt;&gt; my_gen = functools.partial(next, iter(l))
&gt;&gt;&gt; my_gen()
1
&gt;&gt;&gt; my_gen()
2
&gt;&gt;&gt; my_gen()
3
&gt;&gt;&gt; my_gen()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code># Generator expression
(exp for x in iter)

# List comprehension
[exp for x in iter]
</code></pre>
<p>Iterating over the generator expression or the list comprehension will do the same thing. However, the list comprehension will create the entire list in memory first while the generator expression will create the items on the fly, so you are able to use it for very large.</p>
<p>In above generator will create generator object, to get data you have iterate or filter over it. It may be help you</p>
</div>
<div class="post-text" itemprop="text">
<p>Is this what you are looking for?</p>
<pre><code>number = 1
while(number&lt;500 +1):
    print('(my-gen) -&gt;', number)
    number +=1
</code></pre>
</div>
<span class="comment-copy">What do you mean without initialising it? You could just use a generator expression - <code>my_gen = (element for element in l)</code> but this really isn't necessary as <code>my_gen = iter(l)</code> would be sufficient in your example.</span>
<span class="comment-copy">That's exactly what I meant actually, since I'm reading from a specific file, and I was trying to have the generator return the next item on the list throughout the whole program.</span>
