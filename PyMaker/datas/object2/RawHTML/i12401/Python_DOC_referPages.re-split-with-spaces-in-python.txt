<div class="post-text" itemprop="text">
<p>I have a string of text that looks like this:</p>
<pre><code>'                     19,301         14,856        18,554'
</code></pre>
<p>Where   is a space.</p>
<p>I'm trying to split it on the white space, but I need to retain all of the white space as an item in the new list. Like this:</p>
<pre><code>['                     ', '19,301','        ', '14,856', '        ', '18,554']
</code></pre>
<p>I have been using the following code:</p>
<pre><code>re.split(r'( +)(?=[0-9])', item)
</code></pre>
<p>and it returns:    </p>
<pre><code>['', '                     ', '19,301', '        ', '14,856', '        ', '18,554']
</code></pre>
<p>Notice that it always <strong>adds an empty element to the beginning of my list</strong>.  It's easy enough to drop it, but I'm really looking to understand what is going on here, so I can get the code to treat things consistently.  Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>When using the <code>re.split</code> method, if the capture group is matched at the start of a string, the "<a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow">result will start with an empty string</a>". The reason for this is so that <code>join</code> method can behave as the inverse of the <code>split</code> method.</p>
<p>It might not make a lot of sense for your case, where the separator matches are of varying sizes, but if you think about the case where the separators were a <code>|</code> character and you wanted to perform a join on them, with the extra empty string it would work:</p>
<pre><code>&gt;&gt; item = '|19,301|14,856|18,554'
&gt;&gt; items = re.split(r'\|', item)
&gt;&gt; print items
['', '19,301', '14,856', '18,554']
&gt;&gt; '|'.join(items)
'|19,301|14,856|18,554'
</code></pre>
<p>But without it, the initial pipe would be missing:</p>
<pre><code>&gt;&gt; items = ['19,301', '14,856', '18,554']
&gt;&gt; '|'.join(items)
'19,301|14,856|18,554'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it with <code>re.findall()</code>:</p>
<pre><code>&gt;&gt;&gt; s = '\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s\s19,301\s\s\s\s\s\s\s\s\s14,856\s\s\s\s\s\s\s\s18,554'.replace('\\s',' ')
&gt;&gt;&gt; re.findall(r' +|[^ ]+', s)
['                     ', '19,301', '         ', '14,856', '        ', '18,554']
</code></pre>
<p>You said "space" in the question, so the pattern works with space. For matching runs of any whitespace character you can use:</p>
<pre><code>&gt;&gt;&gt; re.findall(r'\s+|\S+', s)
['                     ', '19,301', '         ', '14,856', '        ', '18,554']
</code></pre>
<p>The pattern matches one or more whitespace characters <em>or</em> one or more non-whitespace character, for example:</p>
<pre><code>&gt;&gt;&gt; s='  \t\t  ab\ncd\tef   g '
&gt;&gt;&gt; re.findall(r'\s+|\S+', s)
['  \t\t  ', 'ab', '\n', 'cd', '\t', 'ef', '   ', 'g', ' ']
</code></pre>
</div>
<span class="comment-copy">show desired output</span>
<span class="comment-copy">imho, using <code>\s</code> makes it <b>less</b> clear and just annoying if anyone here wanted to actually try it.</span>
<span class="comment-copy">@StefanPochmann agreed. this is harder to try to deal with</span>
