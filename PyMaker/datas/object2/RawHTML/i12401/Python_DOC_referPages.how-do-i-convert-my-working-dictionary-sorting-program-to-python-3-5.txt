<div class="post-text" itemprop="text">
<p>I am new to Python (4 weeks in) and I have a problem with my python program that should sort my dictionary. I have IDs in my dict and some of them are connected to each other (via the sets). Out of this example, I should get an array consisting of two arrays [[1,3,4,7,8,9],[2,5,6,50,70,80]] to mark my two different groups.
This program worked on an older python version, but now I have problems converting it to Python 3.5, because the sets work differently and I can't seem to get it running. What do I have to change to make it work on Python 3.5? (I am using WinPython 3.5 with the Spyder environment)</p>
<pre><code>from sets import Set
dict = {1:Set([3,4]), 2:Set([5,6]), 3:Set([1,4,7,8]), 4:Set([1,3,8,9]), 5:Set([2,6,50,80]), 6:Set([2,5,70,80]), 7:Set([3,8]), 8:Set([3,4,7,9]), 9:Set([4,8]), 50:Set([5,80]), 70:Set([6,80]), 80:Set([5,6,50,70])}

def recursion(number):
    if number not in tmp_array:
        tmp_array.append(number)
        if number in dict:
            tmp = dict[number]
            del dict[number]
            for i in tmp:
                recursion(i)

def startRecursion(number):
    global tmp_array
    tmp_array = []
    recursion(number)
    return tmp_array

def getResults():
    results = []
    tmp_array = []
    while dict:
        results.append(startRecursion(dict.keys()[0]))
    return results

print (getResults())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python replaced the <code>sets</code> module with <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow">a built-in <code>set</code> type</a> in version 2.4.  To switch to the new type, just get rid of the <code>from sets import Set</code> line and change each occurrence of <code>Set</code> to <code>set</code>.  Also note that <code>set([3,4])</code> can now be equivalently written <code>{3,4}</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a version of your code that should work on recent versions of Python 2 and on Python 3.</p>
<p>I've eliminated the use of the <code>global</code> <code>tmp_array</code> list with a <code>temp_result</code> set which is passed as an argument to the recursive function. It's more efficient to test sets for membership than to test lists. The speed difference is hardly noticeable for small sets, but quite noticeable for large sets.</p>
<pre><code>my_dict = {
    1: set([3, 4]),
    2: set([5, 6]),
    3: set([1, 4, 7, 8]),
    4: set([1, 3, 8, 9]),
    5: set([2, 6, 50, 80]),
    6: set([2, 5, 70, 80]),
    7: set([3, 8]),
    8: set([3, 4, 7, 9]),
    9: set([4, 8]),
    50: set([5, 80]),
    70: set([6, 80]),
    80: set([5, 6, 50, 70]),
}

def recursion(number, temp_result):
    if number not in temp_result:
        temp_result.add(number)
        tmp = my_dict[number]
        del my_dict[number]
        for i in tmp:
            recursion(i, temp_result)

def startRecursion(number):
    temp_result = set()
    recursion(number, temp_result)
    return list(temp_result)

def getResults():
    results = []
    while my_dict:
        first_key = list(my_dict.keys())[0]
        results.append(startRecursion(first_key))
    return results

print(getResults())
</code></pre>
<p><strong>output</strong></p>
<pre><code>[[1, 3, 4, 7, 8, 9], [2, 5, 6, 80, 50, 70]]
</code></pre>
</div>
<span class="comment-copy">Try to avoid using <code>dict</code> as a variable name; it overwrites the builtin type/function. Also, global variables make for difficult to read/maintain code.</span>
<span class="comment-copy">do you get error message ? then add full error message.</span>
<span class="comment-copy">Your expected output isn't consistent with your input data: the input data has <code>70</code> where the output data has <code>90</code>.</span>
<span class="comment-copy">my bad, i fxed it</span>
<span class="comment-copy">okay, I changed every Set to set and it worked out for the dictionary, but now I get the following error message: "TypeError: 'dict_keys' object does not support indexing" for this code line: "results.append(startRecursion(dict.keys()[0]))"</span>
<span class="comment-copy">@Idontcare: <a href="https://docs.python.org/3/library/stdtypes.html#dict.keys" rel="nofollow noreferrer"><code>dict.keys()</code></a> returns a special iterable instead of a list in Python 3.  The simplest fix would be to change <code>dict.keys()[0]</code> to <code>next(dict.keys())</code>.</span>
<span class="comment-copy">Thanks a lot. With "list(my_dict.keys())[0]" instead of "dict.keys()[0]" it workes now.</span>
