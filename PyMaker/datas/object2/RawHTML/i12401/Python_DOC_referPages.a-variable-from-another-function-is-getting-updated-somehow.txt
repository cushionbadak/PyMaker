<div class="post-text" itemprop="text">
<p>I'm trying to understand Python's approach to variable scope. In this example, why is <code>f()</code> able to alter the value of <code>x</code>, as perceived within <code>main()</code>, but not the value of <code>n</code>?</p>
<pre><code>def f(n, x):
    n = 2
    x.append(4)
    print('In f():', n, x)

def main():
    n = 1
    x = [0,1,2,3]
    print('Before:', n, x)
    f(n, x)
    print('After: ', n, x)

main()
</code></pre>
<p>Output:</p>
<pre><code>Before: 1 [0, 1, 2, 3]
In f(): 2 [0, 1, 2, 3, 4]
After:  1 [0, 1, 2, 3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Some answers contain the word "copy" in a context of a function call. I find it confusing.</p>
<p><strong>Python doesn't copy <em>objects</em> you pass during a function call <em>ever</em>.</strong></p>
<p>Function parameters are <em>names</em>. When you call a function Python binds these parameters to whatever objects you pass (via names in a caller scope).</p>
<p>Objects can be mutable (like lists) or immutable (like integers, strings in Python). Mutable object you can change. You can't change a name, you just can bind it to another object.</p>
<p>Your example is not about <a href="https://docs.python.org/2/tutorial/classes.html#python-scopes-and-namespaces" rel="noreferrer">scopes or namespaces</a>, it is about <a href="http://docs.python.org/reference/executionmodel.html#naming-and-binding" rel="noreferrer">naming and binding</a> and <a href="http://docs.python.org/reference/datamodel.html#objects-values-and-types" rel="noreferrer">mutability of an object</a> in Python. </p>
<pre><code>def f(n, x): # these `n`, `x` have nothing to do with `n` and `x` from main()
    n = 2    # put `n` label on `2` balloon
    x.append(4) # call `append` method of whatever object `x` is referring to.
    print('In f():', n, x)
    x = []   # put `x` label on `[]` ballon
    # x = [] has no effect on the original list that is passed into the function
</code></pre>
<p>Here are nice pictures on <a href="https://web.archive.org/web/20180121150727/http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#other-languages-have-variables" rel="noreferrer">the difference between variables in other languages and names in Python</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You've got a number of answers already, and I broadly agree with J.F. Sebastian, but you might find this useful as a shortcut:</p>
<p>Any time you see <strong><code>varname =</code></strong>, you're creating a <em>new</em> name binding within the function's scope.  Whatever value <code>varname</code> was bound to before is lost <em>within this scope</em>.</p>
<p>Any time you see <strong><code>varname.foo()</code></strong> you're calling a method on <code>varname</code>.  The method may alter varname (e.g. <code>list.append</code>).  <code>varname</code> (or, rather, the object that <code>varname</code> names) may exist in more than one scope, and since it's the same object, any changes will be visible in all scopes.</p>
<p>[note that the <code>global</code> keyword creates an exception to the first case]</p>
</div>
<div class="post-text" itemprop="text">
<p><code>f</code> doesn't actually alter the value of <code>x</code> (which is always the same reference to an instance of a list). Rather, it alters the <em>contents</em> of this list.</p>
<p>In both cases, a <em>copy of a reference</em> is passed to the function. Inside the function,</p>
<ul>
<li><code>n</code> gets assigned a new value. Only the reference inside the function is modified, not the one outside it.</li>
<li><code>x</code> does not get assigned a new value: neither the reference inside nor outside the function are modified. Instead, <code>x</code>’s <em>value</em> is modified.</li>
</ul>
<p>Since both the <code>x</code> inside the function and outside it refer to the same value, both see the modification. By contrast, the <code>n</code> inside the function and outside it refer to <em>different</em> values after <code>n</code> was reassigned inside the function.</p>
</div>
<div class="post-text" itemprop="text">
<p>I will rename variables to reduce confusion.  <em>n</em> -&gt; <em>nf</em> or <em>nmain</em>.  <em>x</em> -&gt; <em>xf</em> or <em>xmain</em>:</p>
<pre><code>def f(nf, xf):
    nf = 2
    xf.append(4)
    print 'In f():', nf, xf

def main():
    nmain = 1
    xmain = [0,1,2,3]
    print 'Before:', nmain, xmain
    f(nmain, xmain)
    print 'After: ', nmain, xmain

main()
</code></pre>
<p>When you call the function <em>f</em>, the Python runtime makes a copy of <em>xmain</em> and assigns it to <em>xf</em>, and similarly assigns a copy of  <em>nmain</em> to <em>nf</em>.</p>
<p>In the case of <em>n</em>, the value that is copied is 1.</p>
<p>In the case of <em>x</em> the value that is copied is <strong>not</strong> the literal list <em>[0, 1, 2, 3]</em>.  It is a <strong>reference</strong> to that list.  <em>xf</em> and <em>xmain</em> are pointing at the same list, so when you modify <em>xf</em> you are also modifying <em>xmain</em>.</p>
<p>If, however, you were to write something like:</p>
<pre><code>    xf = ["foo", "bar"]
    xf.append(4)
</code></pre>
<p>you would find that <em>xmain</em> has not changed.  This is because, in the line <em>xf = ["foo", "bar"]</em> you have change <em>xf</em> to point to a <strong>new</strong> list.  Any changes you make to this new list will have no effects on the list that <em>xmain</em> still points to.</p>
<p>Hope that helps.  :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>It´s because a list is a mutable object. You´re not setting x to the value of [0,1,2,3], you´re defining a label to the object [0,1,2,3].</p>
<p>You should declare your function f() like this:</p>
<pre><code>def f(n, x=None):
    if x is None:
        x = []
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>n is an int (immutable), and a copy is passed to the function, so in the function you are changing the copy.</p>
<p>X is a list (mutable), and a copy of <em>the pointer</em> is passed o the function so x.append(4) changes the contents of the list.  However, you you said x = [0,1,2,3,4] in your function, you would not change the contents of x in main().</p>
</div>
<div class="post-text" itemprop="text">
<p>If the functions are re-written with completely different variables and we call <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer">id</a> on them, it then illustrates the point well. I didn't get this at first and read jfs' post with the <a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#other-languages-have-variables" rel="nofollow noreferrer">great explanation</a>, so I tried to understand/convince myself:</p>
<pre><code>def f(y, z):
    y = 2
    z.append(4)
    print ('In f():             ', id(y), id(z))

def main():
    n = 1
    x = [0,1,2,3]
    print ('Before in main:', n, x,id(n),id(x))
    f(n, x)
    print ('After in main:', n, x,id(n),id(x))

main()
Before in main: 1 [0, 1, 2, 3]   94635800628352 139808499830024
In f():                          94635800628384 139808499830024
After in main: 1 [0, 1, 2, 3, 4] 94635800628352 139808499830024
</code></pre>
<p>z and x have the same id. Just  different tags for the same underlying structure as the article says.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is a pure pass-by-value language if you think about it the right way.  A python variable stores the location of an object in memory.  The Python variable does not store the object itself.  When you pass a variable to a function, you are passing a <em>copy</em> of the address of the object being pointed to by the variable.  </p>
<p>Contrasst these two functions</p>
<pre><code>def foo(x):
    x[0] = 5

def goo(x):
    x = []
</code></pre>
<p>Now, when you type into the shell</p>
<pre><code>&gt;&gt;&gt; cow = [3,4,5]
&gt;&gt;&gt; foo(cow)
&gt;&gt;&gt; cow
[5,4,5]
</code></pre>
<p>Compare this to goo.</p>
<pre><code>&gt;&gt;&gt; cow = [3,4,5]
&gt;&gt;&gt; goo(cow)
&gt;&gt;&gt; goo
[3,4,5]
</code></pre>
<p>In the first case, we pass a copy the address of cow to foo and foo modified the state of the object residing there.  The object gets modified.</p>
<p>In the second case you pass a copy of the address of cow to goo. Then goo proceeds to change that copy. Effect: none.</p>
<p>I call this the <em>pink house principle</em>.  If you make a copy of your address and tell a 
painter to paint the house at that address pink, you will wind up with a pink house.
If you give the painter a copy of your address and tell him to change it to a new address,
the address of your house does not change.</p>
<p>The explanation eliminates a lot of confusion.  Python passes the addresses variables store by value.   </p>
</div>
<div class="post-text" itemprop="text">
<p>Python is copy by value of reference.  An object occupies a field in memory, and a reference is associated with that object, but itself occupies a field in memory. And name/value is associated with a reference. In python function, it always copy the value of the reference, so in your code, n is copied to be a new name, when you assign that, it has a new space in caller stack. But for the list, the name also got copied, but it refer to the same memory(since you never assign the list a new value). That is a magic in python!</p>
</div>
<div class="post-text" itemprop="text">
<p>My general understanding is that any object variable (such as a list or a dict, among others) can be modified through its functions. What I believe you are not able to do is reassign the parameter - i.e., assign it by reference within a callable function.</p>
<p>That is consistent with many other languages.</p>
<p>Run the following short script to see how it works:</p>
<p><pre><code>
    def func1(x, l1):
    x = 5
    l1.append("nonsense")</code></pre></p>
<p>y = 10
list1 = ["meaning"]
func1(y, list1)
print(y)
print(list1)
</p></div>
<span class="comment-copy">well explained here <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">nedbatchelder.com/text/names.html</a></span>
<span class="comment-copy">This article helped me to understand the problem better and it suggests a workaround and some advanced uses: <a href="http://effbot.org/zone/default-values.htm" rel="nofollow noreferrer">Default Parameter Values in Python</a></span>
<span class="comment-copy">@Gfy, I've seen similar examples before but to me it doesn't describe a real-world situation. If you're modifying something that's passed in it doesn't make sense to give it a default.</span>
<span class="comment-copy">@MarkRansom, I think it does make sense if you want to provide optional output destination as in: <code>def foo(x, l=None): l=l or []; l.append(x**2); return l[-1]</code>.</span>
<span class="comment-copy">For the last line of Sebastian's code, it said "# the above has no effect on the original list ". But in my opinion, it only has no effect on "n", but changed the "x" in the main() function. Am I correct?</span>
<span class="comment-copy">@user17670: <code>x = []</code> in <code>f()</code> has no effect on the list <code>x</code> in the main function. I've updated the comment, to make it more specific.</span>
<span class="comment-copy">"copy" is misleading. Python doesn't have variables like C. All names in Python are references. You can't modify name, you just can bind it to another object, that's all. It only makes sense to talk about mutable and immutable <i>object</i> in Python not they are names.</span>
<span class="comment-copy">@J.F. Sebastian: Your statement is misleading at best.  It is not useful to think of numbers as being references.</span>
<span class="comment-copy">@dysfunctor: numbers are references to immutable objects.  If you'd rather think of them some other way, you have a bunch of odd special cases to explain.  If you think of them as immutable, there are no special cases.</span>
<span class="comment-copy">@S.Lott: Regardless of what's going on under the hood, Guido van Rossum put a lot of effort into designing Python so that the programmer can thing of numbers as being just ... numbers.</span>
<span class="comment-copy">@J.F., the reference is copied.</span>
<span class="comment-copy">"In the case of n, the value that is copied..." -- This is wrong, there is no copying done here (unless you count references).  Instead, python uses 'names' which point to the actual objects.  nf and xf point to nmain and xmain, until <code>nf = 2</code>, where the name <code>nf</code> is changed to point to <code>2</code>.  Numbers are immutable, lists are mutable.</span>
<span class="comment-copy">It has nothing to do with mutability. If you would do <code>x = x + [4]</code> instead of <code>x.append(4)</code>, you'd see no change in the caller as well although a list is mutable. It has to do with <i>if</i> it is indeed mutated.</span>
<span class="comment-copy">OTOH, if you do <code>x += [4]</code> then <code>x</code> is mutated, just like what happens with <code>x.append(4)</code>, so the caller will see the change.</span>
<span class="comment-copy">Watch the "copy of the pointer" phrasing.  Both places get references to the objects.  n is a reference to an immutable object; x is a reference to a mutable object.</span>
<span class="comment-copy">A pure pass by pointer value is not very different from a pass by reference if you think about it the right way...</span>
<span class="comment-copy">Look at goo.  Were you pure pass by reference, it would have changed its argument.  No, Python is not a pure pass-by-reference language.  It passes references by value.</span>
