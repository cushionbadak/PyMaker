<div class="post-text" itemprop="text">
<p>When checking if a floor is an int, the recommend method would be <code>is_integer</code>:</p>
<p>However, I get a weird behaviour with the results of the <code>log</code> function:</p>
<pre><code>print(log(9,3));                        #2.0
print((log(9,3)).is_integer());         #True

print((log(243,3)));                    #5.0
print((log(243,3)).is_integer());       #False
</code></pre>
<p>Furthermore:</p>
<pre><code>print((int) (log(9,3)));    #2
print((int) (log(243,3)));  #4
</code></pre>
<p>Is this normal?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>log(243,3)</code> simply doesn't give you exactly 5:</p>
<pre><code>&gt;&gt;&gt; '%.60f' % log(243,3)
'4.999999999999999111821580299874767661094665527343750000000000'
</code></pre>
<p>As <a href="https://docs.python.org/3/library/math.html#math.log" rel="nofollow">the docs</a> say, <code>log(x, base)</code> is <em>"calculated as log(x)/log(base)"</em>. And neither <code>log(243)</code> nor <code>log(3)</code> can be represented exactly, and you get rounding errors. Sometimes you're lucky, sometimes you're not. Don't count on it.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you want to compare float numbers, use <a href="https://docs.python.org/3/library/math.html#math.isclose" rel="nofollow"><code>math.isclose()</code></a>.</p>
<p>When you want to convert a float number that is close to an integer, use <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow"><code>round()</code></a>.</p>
<p>Float numbers are too subject to error for "conventional" methods to be used. Their precision (and the precision of functions like <code>log</code>) is too limited, unfortunately. What looks like a 5 may not be an exact 5.</p>
<p>And yes: it is normal. This is not a problem with Python, but with every language I'm aware of (they all use the same underlying representation). Python offers some ways to work around float problems: <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow"><code>decimal</code></a> and <a href="https://docs.python.org/3/library/fractions.html" rel="nofollow"><code>fractions</code></a>. Both have their own drawbacks, but sometimes they help. For example, with <code>fractions</code>, you can represent 1/3 without loss of precision. Similarly, with <code>decimal</code>, you can represent 0.1 exactly. However, you'll still have problems with <code>log</code>, <code>sqrt</code>, irrational numbers, numbers that require many digits to be represented and so on.</p>
</div>
<span class="comment-copy">You are not writing c, print(int(log(243,3))), also you should read <a href="http://stackoverflow.com/questions/588004/is-floating-point-math-broken" title="is floating point math broken">stackoverflow.com/questions/588004/â€¦</a></span>
<span class="comment-copy">Why i shouldn't write it like this?</span>
