<div class="post-text" itemprop="text">
<p>I am currently working on a server + client combo on python and I'm using TCP sockets. From networking classes I know, that TCP connection should be closed step by step, first one side sends the signal, that it wants to close the connection and waits for confirmation, then the other side does the same. After that, socket can be safely closed.<br/>
I've seen in python documentation function <code>socket.shutdown(flag)</code>, but I don't see how it could be used in this standard method, theoretical of closing TCP socket. As far as I know, it just blocks either reading, writing or both.<br/>
What is the best, most correct way to close TCP socket in python? Are there standard functions for closing signals or do I need to implement them myself?</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the python <a href="https://docs.python.org/3/howto/sockets.html" rel="nofollow">documentation</a> which says:</p>
<blockquote>
<p>Strictly speaking, you’re supposed to use shutdown on a socket before
  you close it. The shutdown is an advisory to the socket at the other
  end. Depending on the argument you pass it, it can mean “I’m not going
  to send anymore, but I’ll still listen”, or “I’m not listening, good
  riddance!”. Most socket libraries, however, are so used to programmers
  neglecting to use this piece of etiquette that normally a close is the
  same as shutdown(); close(). So in most situations, an explicit
  shutdown is not needed.</p>
</blockquote>
<p>I think the most correct way to close a TCP connection would be to use shutdown before closing a connection, because <code>close</code> is not atomic! This can make some bugs. Suppose you're using <code>close</code> function without <code>shutdown</code> and the data didn't send to the server correctly, at the same time python closes the connection and server can't reply to client, now the socket at the other end may hang indefinitely.</p>
</div>
<div class="post-text" itemprop="text">
<p>shutdown is useful when you have to signal the remote client that no more data is being sent. You can specify in the shutdown() parameter which half-channel you want to close.</p>
<p>Most commonly, you want to close the TX half-channel, by calling shutdown(1). In TCP level, it sends a FIN packet, and the remote end will receive 0 bytes if blocking on read(), but the remote end can still send data back, because the RX half-channel is still open.</p>
<p>Some application protocols use this to signal the end of the message. Some other protocols find the EOM based on data itself. For example, in an interactive protocol (where messages are exchanged many times) there may be no opportunity, or need, to close a half-channel.</p>
<p>In HTTP, shutdown(1) is one method that a client can use to signal that a HTTP request is complete. But the HTTP protocol itself embeds data that allows to detect where a request ends, so multiple-request HTTP connections are still possible.</p>
<p>I don't think that calling shutdown() before close() is always necessary, unless you need to explicitly close a half-channel. If you want to cease all communication, close() does that too. Calling shutdown() and forgetting to call close() is worse because the file descriptor resources are not freed.</p>
<p>From Wikipedia: "On SVR4 systems use of close() may discard data. The use of shutdown() or SO_LINGER may be required on these systems to guarantee delivery of all data." This means that, if you have outstanding data in the output buffer, a close() could discard this data immediately on a SVR4 system. Linux, BSD and BSD-based systems like Apple are not SVR4 and <em>will</em> try to send the output buffer in full after close(). I am not sure if any major commercial UNIX is still SVR4 these days.</p>
<p>Again using HTTP as an example, an HTTP client running on SVR4 would not lose data using close() because it will keep the connection open after request to get the response. An HTTP server under SVR would have to be more careful, calling shutdown(2) before close() after sending the whole response, because the response would be partly in the output buffer. </p>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/409783/socket-shutdown-vs-socket-close" title="socket shutdown vs socket close">stackoverflow.com/questions/409783/…</a></span>
