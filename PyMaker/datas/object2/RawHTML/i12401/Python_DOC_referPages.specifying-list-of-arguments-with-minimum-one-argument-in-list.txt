<div class="post-text" itemprop="text">
<p>So, I have some function that takes a list of arguments with minimum one argument, but potentially an entire list of arguments. I know a couple ways of defining this method, but I'm trying to determine what the various alternatives are at my disposal and what the various advantages of each approach are.</p>
<p>I'm trying to figure out what possible prototypes I can use to define this argument. I've considered the following:</p>
<pre><code>def func(arg_1, *args):
    arg_list = (arg_1,) + args
    # do stuff with arg_list
</code></pre>
<p>as well as</p>
<pre><code>def func(*args):
    if len(args) == 0: raise Exception("Not enough arguments specified")
    # do stuff with args
</code></pre>
<p>Are there alternative ways to specify a function that takes an argument list with minimum one argument? </p>
</div>
<div class="post-text" itemprop="text">
<p>In <strong><a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow">Python 3.5</a></strong> you can (it has been present since <code>3.0</code> I believe, when <strong><a href="https://www.python.org/dev/peps/pep-3102/" rel="nofollow"><code>PEP 3102</code></a></strong> came out) but with the restrictions that <em>the extra arguments are defined without a default value</em> <strong>and</strong> <em>supplied in a keyword form when calling the defined function</em>. </p>
<p>This is done by adding <code>*</code> as a separator and the required argument(s) after it:</p>
<pre><code>def foo(*, must_specify, **kwargs): pass
</code></pre>
<p>Calling <code>foo()</code> without supplying the a keyword argument of the form <code>must_specify = 'specified'</code> will result in a <code>TypeError</code> hinting the requirement for that specific argument:</p>
<pre><code>foo()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-45-624891b0d01a&gt; in &lt;module&gt;()
----&gt; 1 foo()

TypeError: foo() missing 1 required keyword-only argument: 'must_specify'
</code></pre>
<p>Positional arguments on their own can be supplied, but, the positional grouping parameter of the form <code>*args</code> cannot i.e:</p>
<pre><code>def foo(pos_arg, *, must_specify, **kwargs): pass
</code></pre>
<p>is fine, but: </p>
<pre><code>def foo(pos_arg, *args, *, must_specify, **kwargs): pass
</code></pre>
<p>is a <code>SyntaxError</code>. This is done because <code>*</code> is essentially the same as a 'throw-away' form of <code>*args</code>.</p>
<p>Either way, there is no other <em>syntactic</em> way (that I'm aware of) which can satisfy the restriction you wish. If working with <code>kwargs</code> is too much of a hassle for you or if you're working with <code>Py2</code> and are adamant to switch, solutions as those suggested in the comments are your best bet. </p>
</div>
<span class="comment-copy">There is also <code>assert len(args) &gt; 0</code> that will throw an <code>AssertionError</code></span>
<span class="comment-copy">Ah, yes. Definitely another viable alternative.</span>
<span class="comment-copy"><code>if not args</code> is more idiomatic than explicitly checking its length.</span>
