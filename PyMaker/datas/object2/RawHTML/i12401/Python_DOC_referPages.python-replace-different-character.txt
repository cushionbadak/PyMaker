<div class="post-text" itemprop="text">
<p>I have different strings like these : </p>
<pre><code>"/table[1]/tr/td[2]/table[2]/tr/td[2]/p/b/text()"
"/table[1]/tr/td[2]/table[3]/tr/td[2]/p/b/text()"
</code></pre>
<p>I'd like to change the substring <code>"/table[" + some number + "]"</code> with <code>"/table[" + the same number + "]/tbody"</code>.</p>
<p>For example this string</p>
<pre><code>"/table[1]/tr/td[2]/table[2]/tr/td[2]/p/b/text()"
</code></pre>
<p>should change in</p>
<pre><code>"/table[1]/tbody/tr/td[2]/table[2]/tbody/tr/td[2]/p/b/text()"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow">symbolic group naming</a>, this way:</p>
<pre><code>&gt;&gt;&gt; s
'/table[1]/tr/td[2]/table[2]/tr/td[2]/p/b/text()'
&gt;&gt;&gt;
&gt;&gt;&gt; re.sub(r'(?P&lt;table&gt;/table\[\d+\])', r'\g&lt;table&gt;/tbody', s)
'/table[1]/tbody/tr/td[2]/table[2]/tbody/tr/td[2]/p/b/text()'
&gt;&gt;&gt;
&gt;&gt;&gt; #similarly you can also reference by group number
&gt;&gt;&gt; re.sub(r'(?P&lt;table&gt;/table\[\d+\])', r'\g&lt;1&gt;/tbody', s) 
'/table[1]/tbody/tr/td[2]/table[2]/tbody/tr/td[2]/p/b/text()'
</code></pre>
<p>Quoting from <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow">Python Doc</a>:</p>
<blockquote>
<p><code>(?P&lt;name&gt;...)</code> <br/>
  Similar to regular parentheses, but the substring
  matched by the group is accessible via the symbolic group name name.
  Group names must be valid Python identifiers, and each group name must
  be defined only once within a regular expression. A symbolic group is
  also a numbered group, just as if the group were not named.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>This is the solution :</p>
<pre><code>import re

s = "/table[1]/tr/td[2]/table[2]/tr/td[2]/p/b/text()"
sl = s.split("/")

new_str = []
for n in sl :
    match = re.search(r'table\[(?P&lt;num&gt;\d+)\]$', n)
    if match != None :
        #if you want to get the num
        #num = match.group('num')
        new_str.append("{}/tbody".format(n))  
    else :
        new_str.append(n)

print "/".join(new_str)
</code></pre>
</div>
<span class="comment-copy">have you tried anything?</span>
<span class="comment-copy">pretty soon SO will be the place where we can see questions like this - "I need this and that and you MUST provide me with the best solution"</span>
<span class="comment-copy">sorry it's my first question, I had already tried a few things, haven't wrote them here since they were not working</span>
