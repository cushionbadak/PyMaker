<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5715414/passing-n-new-line-on-stdout-throught-sys-argument">passing \n (new line) on stdout throught sys argument</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I have a problem with passing special characters to python from the command line. This is my script:</p>
<pre><code># -*- coding: utf-8 -*-
import sys

if __name__ =="__main__":

    if len(sys.argv) == 2 :
        str = sys.argv[1]
    else :
        str = '\r\nte st'
    print (str)
</code></pre>
<p>And these are my test cases:</p>
<pre><code>D:\&gt;testArgv.py "\r\nt est"
\r\nt est

D:\&gt;testArgv.py

te st
</code></pre>
<p>I want to know how to pass arguments to python from the command line to archieve a goal like the latter case. Or how I should change my script.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <strong><a href="https://docs.python.org/3/library/codecs.html#codecs.decode" rel="nofollow"><code>decode</code></a></strong> with the <a href="https://docs.python.org/3/library/codecs.html#text-encodings" rel="nofollow"><code>'unicode_escape'</code> text encoding</a> from the <strong><a href="https://docs.python.org/3/library/codecs.html#module-codecs" rel="nofollow"><code>codecs</code></a></strong> module to transform a raw string into a typical ol' string:</p>
<pre><code># -*- coding: utf-8 -*-
import sys
from codecs import decode

if __name__ =="__main__":

    if len(sys.argv) == 2:
        my_str = decode(sys.argv[1], 'unicode_escape')
        # alternatively you transform it to a bytes obj and
        # then call decode with:
        # my_str = bytes(sys.argv[1], 'utf-8').decode('unicode_escape')
    else :
        my_str = '\r\nte st'
    print (my_str)
</code></pre>
<p>The end result is:</p>
<pre><code>im@jim: python3 tt.py "\r\nt est"

t est
</code></pre>
<p>This applies to Python 3. <em><a href="https://www.python.org/dev/peps/pep-0358/" rel="nofollow">In Python 2 <code>str</code> types are pretty ambiguous as to what they represent</a></em>; as such, they have a <code>decode</code> method of their own which you can use instead. As a result, you could drop the <code>from codecs import decode</code> and just change the line to:</p>
<pre><code>my_str.decode('string_escape')
</code></pre>
<p>To get a similar result.</p>
<hr/>
<p><strong>Addendum</strong>: <em>Don't use names like <code>str</code> for your variables, they mask names for the built-in types Python has.</em></p>
</div>
<span class="comment-copy">Why do you have a check for <code>main</code> when there isn't a main function? And have you tried to print what you're actually getting in your sys.argv?</span>
<span class="comment-copy">Try this <code>python testArgv.py \\r\\nt est</code></span>
<span class="comment-copy">@ishaan I'm sorry, i'm new to python, that <code>main</code> function is just from another code template.</span>
<span class="comment-copy">@ishaan: <code>__main__</code> has nothing to do with the existence (or lack thereof) of a <code>main()</code> function. Please see <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer"><code>__main__</code> â€” Top-level script environment</a> in the official Python docs.</span>
<span class="comment-copy">FWIW, in a Bash-like shell you can put escape sequences into an argument by prepending a <code>$</code> to the <i>single</i>-quoted argument string: <code>testArgv.py $'\r\nt est'</code></span>
<span class="comment-copy">Why the <code>if __name__ =="__main__":</code> ? I don't see a main method.</span>
<span class="comment-copy">When Python executes the module directly and not via import lets say, it assigns the <code>module.__name__</code> attribute to be equal to <code>__main__</code>. So the <code>if</code> clause is only True when you execute this module directly; you don't need a <code>main</code> method defined.</span>
<span class="comment-copy">@ShenmeYiwei the addendum is something you should keep in mind, it can lead to subtle little bugs; here's a list of the <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">built-in functions</a> you must be careful <i>not</i> to override.</span>
