<div class="post-text" itemprop="text">
<p>I have a list of lists, I don't know the length of the main list but each 'sublist' contains necessarily 6 floats. I need to compare each float of each sublist and keep the smaller one for the first three floats and the higher one for the last three and finally, I need to return all these values in a 6-float list in the same order.</p>
<p>Here is an example:</p>
<pre><code>list1 = [[-2.0, 0.0, -2.0, 2.0, 10.0, 2.0], [-1.0, 0.0, 2.0, 1.0, 5.0, 4.0]]
# Compare list1[0][0] with list1[1][0]
# Will return -2.0 (because the index is between 0 and 2 so it returns the lower float)
# Compare list1[0][4] with list1[1][4]
# Will return 10.0 (because the index is between 3 and 5 so it returns the higher float)
# The final result which should be returned is:
# [-2.0, 0.0, -2.0, 2.0, 10.0, 4.0]

list2 = [[-2.0, 0.0, -2.0, 2.0, 10.0, 2.0], [-1.0, 0.0, 2.0, 1.0, 5.0, 4.0], [3.0, 0.0, -1.0, 4.0, 1.0, 0.0]]
# Compare list2[0][2] with list2[1][2] with list2[2][2]
# Will return -2.0 (because the index is between 0 and 2 so it returns the lower float)
# The final result which should be returned is:
# [-2.0, 0.0, -2.0, 4.0, 10.0, 4.0]
</code></pre>
<p>I read about <code>zip()</code>, sets, list comprehension and different topics on this site but I couldn't achieve what I want.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you do <code>zip(*list2)</code>, you'll create a list of the first element of each sublist together, the second elements together, etc. So you want to get the minimum value of the first 3 and the maximum value of the next 3.</p>
<pre><code>zipped = zip(*list2)
result = [min(zipped[i]) for i in range(3)] + [max(zipped[i]) for i in range(3, 6)]
</code></pre>
<p>In Python 3 <code>zip()</code> will fetch the zipped sublists lazily like an iterator, while in Python 2 it will create the whole list in advance. This is similar to <code>range()</code> between the two version. If you want a lazy generation in Python 2, you can use the iterator version from the itertools module.</p>
<pre><code>import itertools

zipped = itertools.izip(*list2)
result = [min(zipped.next()) for _ in range(3)] + [max(zipped.next()) for _ in range(3)]
</code></pre>
<p><strong>Edit</strong>: Visual example of what <a href="https://docs.python.org/3/library/functions.html#zip" rel="noreferrer"><code>zip()</code></a> achieves.</p>
<pre><code>&gt;&gt;&gt; a = [[1, 2, 3], [4, 5, 6]]
&gt;&gt;&gt; zip(*a) # you need `list(zip(*a))` in Python 3
[(1, 4), (2, 5), (3, 6)]
</code></pre>
<p>The star syntax unpacks the list in several arguments, so that <code>zip(*[[1, 2, 3], [4, 5, 6]])</code> becomes <code>zip([1, 2, 3], [4, 5, 6])</code>, which is what you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it "manually" using 2 nested for loops</p>
<pre><code>list1 = [[-2.0, 0.0, -2.0, 2.0, 10.0, 2.0], [-1.0, 0.0, 2.0, 1.0, 5.0, 4.0]]
output = [0 for x in range(6)]
# iterate over the 6 numbers
for i in range(6):
    value = list1[0][i] # pick the first number
    #iterate over all the lists, if we find a bigger/smaller one our current one then save it
    for j in range(len(list1)):
        if i &gt;= 3 and list1[j][i] &gt; value:
                value = list1[j][i]
        elif i &lt; 3 and list1[j][i] &lt; value:
                value = list1[j][i]
    #put the biggest/smallest value in the correct place in the output array
    output[i] = value
print output
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>NumPy solution</h2>
<p>You can use NumPy:</p>
<pre><code>np.concatenate((np.min(a[:,:3], axis=0), np.max(a[:,3:], axis=0)))
</code></pre>
<h2>Full example</h2>
<pre><code>import numpy as np

list1 = [[-2.0, 0.0, -2.0, 2.0, 10.0, 2.0], [-1.0, 0.0, 2.0, 1.0, 5.0, 4.0]]
list2 = [[-2.0, 0.0, -2.0, 2.0, 10.0, 2.0], [-1.0, 0.0, 2.0, 1.0, 5.0, 4.0],
         [3.0, 0.0, -1.0, 4.0, 1.0, 0.0]]

a1 = np.array(list1)
a2 = np.array(list2)

for a in [a1, a2]:
    print(list(np.concatenate((np.min(a[:,:3], axis=0), np.max(a[:,3:], axis=0)))))
</code></pre>
<p>Prints:</p>
<pre><code>[-2.0, 0.0, -2.0, 2.0, 10.0, 4.0]
[-2.0, 0.0, -2.0, 4.0, 10.0, 4.0]
</code></pre>
</div>
<span class="comment-copy">1. Add your attempts. 2. Add the <i>final</i> expected output</span>
<span class="comment-copy">@ Bhargav Rao - Sorry, I added the result I expected to be returned. But I admit I gave up before having any convincing attempts...</span>
<span class="comment-copy">Thank you! The first one is perfect, more understandable for me now. But I'll also take a look at you second solution. :)</span>
<span class="comment-copy">@UKDP I've updated my answer to mention that <code>zip()</code> in Python 3 behaves somewhat different. In order to understand that and <code>itertools.izip()</code>, you want to look into <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">iterators and generators</a>.</span>
