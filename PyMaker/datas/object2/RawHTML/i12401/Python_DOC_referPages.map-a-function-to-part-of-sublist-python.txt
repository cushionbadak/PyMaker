<div class="post-text" itemprop="text">
<p>I am working in python and I have a list of lists (or could be also an numpy array) like this: </p>
<pre><code>list = [[0, 0, -1], [1, 1, -2], [1, 2, -3], [2, 2, -4]]
</code></pre>
<p>I have a function that takes for every sublist the first two elements and gives a result. Let's assume that the function I am taking about is sum()
so what I want to do is </p>
<pre><code>list1 = [[sum(0, 0), -1], [sum(1, 1), -2], [sum(1, 2), -3], [sum(2, 2), -4]]
</code></pre>
<p>and output is</p>
<pre><code>list1 = [[0, -1], [2, -2], [3, -3], [4, -4]]
</code></pre>
<p>Is there a way to this with <code>map</code> or <code>numpy.vectorize</code>? I can already do it as a loop but it is too expensive for my real data.</p>
<p>Any help, advice?</p>
</div>
<div class="post-text" itemprop="text">
<p>In case of numpy array you should have the fastest results using vectorization:</p>
<pre><code>In [128]: arr = np.asarray(list)
#Out[128]:
#array([[ 0,  0, -1],
#       [ 1,  1, -2],
#       [ 1,  2, -3],
#       [ 2,  2, -4]])

In [129]: np.vstack((arr[:,0]+arr[:,1], arr[:,2])).T
#Out[129]:
#array([[ 0, -1],
#       [ 2, -2],
#       [ 3, -3],
#       [ 4, -4]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Could that be</p>
<pre><code>[(sum(x, y), z) for x, y, z in list]
</code></pre>
<p>Or if you insist on using <code>map</code> use <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow"><code>itertools.starmap</code></a>:</p>
<pre><code>starmap( lambda x, y, z: (x+y, z), list)
</code></pre>
<p>?</p>
</div>
<div class="post-text" itemprop="text">
<p>For your specific example, you could use a list comprehension as follows:</p>
<pre><code>my_list = [[0, 0, -1], [1, 1, -2], [1, 2, -3], [2, 2, -4]]

answer = [[x + y, z] for x, y, z in my_list]
print(answer)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[[0, -1], [2, -2], [3, -3], [4, -4]]
</code></pre>
<p>To apply a more complex generic function to each item in your list, use <code>map</code>:</p>
<pre><code>def func(sublist):
    return [sum(sublist[:2]), sublist[-1]]

my_list = [[0, 0, -1], [1, 1, -2], [1, 2, -3], [2, 2, -4]]

answer = map(func, my_list)
</code></pre>
<p>By using the function <code>func</code> you can customise your function as desired.</p>
</div>
<span class="comment-copy">For actual performance improvement, it would help to know about the implementation of the actual function in context.</span>
<span class="comment-copy">or if you really want to use map, <code>map(lambda x: [sum(x[0:1]),x[2]], list)</code></span>
<span class="comment-copy">The function just takes the 2 coordinates, the first two values and performs a bitwise interleaving to create a sort of hash (morton code <a href="https://en.wikipedia.org/wiki/Z-order_curve" rel="nofollow noreferrer">en.wikipedia.org/wiki/Z-order_curve</a>) out of the coordinates. I think if it works for the sum I will be able to apply it to my actual function.</span>
<span class="comment-copy">I am using the answer on the comments. For this specific one I need to use <a href="http://docs.scipy.org/doc/numpy-1.10.1/reference/generated/numpy.vectorize.html" rel="nofollow noreferrer">numpy.vectorize</a> to be able to apply a function to (arr[:,0], arr[:,1]) ? The sum was just an example. My function is more complicated.</span>
<span class="comment-copy">you should add the function you want to use if you want vectorization!</span>
