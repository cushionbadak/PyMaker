<div class="post-text" itemprop="text">
<p>I don't quite understand how iterators have memory in Python.</p>
<pre><code>&gt;&gt;&gt; l1 = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; l2 = [2, 3, 4, 5, 6, 7]
&gt;&gt;&gt; iz = izip(l1, l2)
</code></pre>
<p>We still require <code>O(min(l1, l2))</code> memory as we need to load the lists <code>l1</code> and <code>l2</code> in memory.</p>
<p>I thought one of the main uses of iterators was to save memory - yet it does not seem to be useful here. </p>
<p>Similarly, the code below is unclear to me:</p>
<pre><code>&gt;&gt;&gt; l1 = ( n for n in [1, 2, 3, 4, 5, 6] )
&gt;&gt;&gt; l2 = ( n for n in [2, 3, 4, 5, 6, 7] )
&gt;&gt;&gt; iz = izip(l1, l2)
</code></pre>
<p>We need to load the lists before converting them into generators, right? This means we'll waste memory. So - what is the point of generators here as well. </p>
<p>This is the only case that makes sense to me:</p>
<pre><code>def build_l1():
    for n in xrange(1, 6):
       yield n

def build_l2:
    for n in xrange(2, 7):
       yield n

l1 = build_l1()
l2 = build_l2()
iz = izip(l1, l2)
</code></pre>
<p>None of the arrays is being loaded into memory. Hence we're in <code>O(1)</code> memory.</p>
<p>How does the memory usage of the iterator functions in Python work? The first two cases seem to use <code>O(min(l1, l2))</code> memory. I thought the main point of iterators was to save memory, which makes the first two cases seem useless.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your examples are too simplistic. Consider this:</p>
<pre><code>nums = [1, 2, 3, 4, 5, 6]
nums_it = (n for n in nums)
</code></pre>
<p><code>nums_it</code> is a generator that returns all items unmodified from <code>nums</code>. Clearly you do not have any advantage. But consider this:</p>
<pre><code>squares_it = (n ** 2 for n in nums)
</code></pre>
<p>and compare it with:</p>
<pre><code>squares_lst = [n ** 2 for n in nums]
</code></pre>
<p>With <code>squares_it</code>, we are generating the squares of <code>nums</code> on the fly only when requested. With <code>squares_lst</code>, we are generating all of them at once and storing them in a new list.</p>
<p>So, when you do:</p>
<pre><code>for n in squares_it:
    print(n)
</code></pre>
<p>it's like if you were doing:</p>
<pre><code>for n in nums:
    print(n ** 2)
</code></pre>
<p>But when you do:</p>
<pre><code>for n in squares_lst:
    print(n)
</code></pre>
<p>it's like if you were doing:</p>
<pre><code>squares_lst = []
for n in nums:
    squares_lst.append(n ** 2)
for n in squares_lst:
    print(n)
</code></pre>
<p>If you don't need (or don't have) the list <code>nums</code>, then you can save even more space by using:</p>
<pre><code>squares_it = (n ** 2 for n in xrange(1, 7))
</code></pre>
<p>Generators and iterators also provide another significant advantage (which may actually be a disadvantage, depending on the situation): they are evaluated lazily.</p>
<p>Also, generators and iterators may yield an infinite number of elements. An example is <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow"><code>itertools.count()</code></a> that yields 0, 1, 2, 3, ... without never ending.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; l1 = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; l2 = [2, 3, 4, 5, 6, 7]
&gt;&gt;&gt; iz = izip(l1, l2)
</code></pre>
<blockquote>
<p>We still require O(min(l1, l2)) memory as we need to load the lists l1 and l2 in memory.</p>
</blockquote>
<p>With <code>zip</code> you need storage for the two original lists plus the zipped list. With <code>izip</code> you don't store the zipped list.</p>
<p>Big O notation isn't particularly helpful here if you have to work with a real physical machine instead of some abstract concept of a machine. There's a hidden constant multiplier on your O(n) calculations that could influence the practicality of the code well before n tends to infinity.</p>
<pre><code>&gt;&gt;&gt; l1 = ( n for n in [1, 2, 3, 4, 5, 6] )
&gt;&gt;&gt; l2 = ( n for n in [2, 3, 4, 5, 6, 7] )
&gt;&gt;&gt; iz = izip(l1, l2)
</code></pre>
<blockquote>
<p>We need to load the lists before converting them into generators, right? This means we'll waste memory. So - what is the point of generators here as well.</p>
</blockquote>
<p>No point to generators here. Any time you see <code>n for n in &lt;expr&gt;</code> without either a more complex expression before the <code>for</code> or an <code>if &lt;expr&gt;</code> filter after it, that's a code smell as you could just have used the original sequence directly. The generators only become useful when you transform the input values into something else or filter them.</p>
</div>
<span class="comment-copy">If you iterate over a list, it doesn't save memory. The point is, often you can avoid creating that list in the first place. Also, it doesn't only make sense to save memory when you can save it asymptotically.</span>
<span class="comment-copy">Your <code>build_l1</code> and <code>build_l2</code> don't make much sense, <code>xrange</code> already stores just <code>(from, to, step)</code></span>
<span class="comment-copy">Thanks for the reply. The generator version of <code>squares_lst</code> is <code>O(n)</code> in memory though. I do agree that the constant factor is minimized though.  Is there a way to achieve <code>O(1)</code> memory using iterators and a pre-defined list?</span>
<span class="comment-copy">@zero: <code>squares_it</code> is <code>O(1)</code> memory. Or are you considering the memory for <code>nums</code> too?</span>
<span class="comment-copy">The entire algorithm to square those numbers would be <code>O(n)</code>, if I am correct?</span>
<span class="comment-copy">@zero: yes. But change it to <code>(n ** 2 for n in xrange(1, 7))</code> and then you have a <code>O(1)</code> space algorithm</span>
<span class="comment-copy">@zero: When considering space complexity, you <i>only</i> consider memory <i>in addition to</i> the input.</span>
<span class="comment-copy">I should note that I'm practising for coding interviews and am tryingt o get solutions with O(1) memory using iterators.</span>
<span class="comment-copy">A generator can also filter items, so <code>n for n in sequence if predicate(n)</code> may be useful without modifying any individual input value.</span>
<span class="comment-copy">@chepner, good point, answer updated.</span>
