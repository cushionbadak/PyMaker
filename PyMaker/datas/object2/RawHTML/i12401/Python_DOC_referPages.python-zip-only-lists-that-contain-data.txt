<div class="post-text" itemprop="text">
<p>I have a script that converts data from one type to another.
The source file can have one, two or all of: position, rotation and scale data.</p>
<p>My script zips the 3 together after conversions have taken place for the output file.</p>
<p>In this case, my source file only contains position data.
So the lists returned at the end are:</p>
<pre><code>pData = [['-300.2', '600.5'],['150.12', '280.7'],['19.19', '286.56']]
rData = []
sData = []

translationData = list(zip(pData, rData, sData))
</code></pre>
<p>If I try this, it will return <code>[]</code> because the shortest list is <code>[]</code>.
If I try:  </p>
<p><code>translationData = list(zip_longest(pData, rData, sData))</code> </p>
<p>I get:  </p>
<pre><code>`[(['-300.2', '600.5'], None, None), (['150.12', '280.7'], None, None), (['19.19', '286.56'], None, None)]`
</code></pre>
<p>Is there any way to only zip lists that contain data, or remove the <code>None</code>'s from within the tuples within the list?</p>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow"><code>filter</code></a> builtin embedded in a list-comp.</p>
<blockquote>
<p>Note: In Python 3 <code>filter</code> returns an iterator, so you will need to call <code>tuple()</code> on it. (unlike in py2)</p>
</blockquote>
<pre><code>pData = [['-300.2', '600.5'],['150.12', '280.7'],['19.19', '286.56']]
rData = []
sData = []

from itertools import zip_longest  # izip_longest for python 2
[tuple(filter(None, col)) for col in zip_longest(pData, rData, sData)]
</code></pre>
<p>Result:</p>
<pre><code>[(['-300.2', '600.5'],), (['150.12', '280.7'],), (['19.19', '286.56'],)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can modify the pure Python version of <code>zip_longest</code> given the <a href="https://docs.python.org/3/library/itertools.html?#itertools.zip_longest" rel="nofollow">documentation</a> and create a version to do what you want:</p>
<pre><code>from itertools import chain, repeat

class ZipExhausted(Exception):
    pass

def zip_longest(*args, **kwds):
    # zip_longest('ABCD', 'xy', fillvalue='-') --&gt; Ax By C- D-
    fillvalue = kwds.get('fillvalue')
    counter = len(args) - 1
    def sentinel():
        nonlocal counter
        if not counter:
            raise ZipExhausted
        counter -= 1
        yield fillvalue
    fillers = repeat(fillvalue)
    iterators = [chain(it, sentinel(), fillers) for it in args]
    try:
        while iterators:
            res = []
            for it in iterators:
                value = next(it)
                if value != fillvalue:
                    res.append(value)
            yield tuple(res)
    except ZipExhausted:
        pass

pData = [['-300.2', '600.5'],['150.12', '280.7'],['19.19', '286.56']]
rData = []
sData = []

translationData = list(zip_longest(pData, rData, sData))
print(translationData)
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>[(['-300.2', '600.5'],), (['150.12', '280.7'],), (['19.19', '286.56'],)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to import or use list comprehensions etc for some reason:</p>
<ol>
<li>Make a grouping of the lists you want to zip (allLists)</li>
<li>Then loop through the grouping to check if anything is in each</li>
<li>Append together a grouping of those with data in them (zippable)</li>
<li><p>Finally, *pass zip that filtered grouping (*zippable)</p>
<pre><code>alist = ['hoop','joop','goop','loop']
blist = ['homp','jomp','gomp','lomp']
clist = []
dlist = []

allLists = [alist,blist,clist,dlist]

zippable = []

for fullList in allLists:
    if fullList:
        zippable.append(fullList)

finalList = list(zip(*zippable))

print(finalList)
</code></pre></li>
</ol>
<p>Just another possible solution</p>
</div>
<div class="post-text" itemprop="text">
<p>If the lists are either totally empty or totally full this would work:</p>
<pre><code>&gt;&gt;&gt; list(zip(*(x for x in (pData, rData, sData) if x)))
[(['-300.2', '600.5'],), (['150.12', '280.7'],), (['19.19', '286.56'],)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I will try to add more variation-<code>bool</code>,<code>None</code>,<code>lambda</code>.</p>
<pre><code>import itertools
from itertools import zip_longest
pData = [['-300.2', '600.5'],['150.12', '280.7'],['19.19', '286.56']]
rData = []
sData = []


print ([list(filter(bool, col)) for col in zip_longest(pData, rData, sData)])
print ([list(filter(None, col)) for col in zip_longest(pData, rData, sData)])
print ([list(filter(lambda x: x, col)) for col in zip_longest(pData, rData, sData)])
</code></pre>
<p>Output-</p>
<pre><code>[[['-300.2', '600.5']], [['150.12', '280.7']], [['19.19', '286.56']]]
[[['-300.2', '600.5']], [['150.12', '280.7']], [['19.19', '286.56']]]
[[['-300.2', '600.5']], [['150.12', '280.7']], [['19.19', '286.56']]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you don't want the <code>None</code> you can use the key-word argument <code>fillvalue</code> of <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow"><code>zip_longest</code></a> to put anything you want instead so you can have uniform result as pointed out by @Ale </p>
<pre><code>&gt;&gt;&gt; translationData = list(zip_longest(pData, rData, sData, fillvalue=tuple()))
&gt;&gt;&gt; translationData
[(['-300.2', '600.5'], (), ()), (['150.12', '280.7'], (), ()), (['19.19', '286.56'], (), ())]
&gt;&gt;&gt; 
</code></pre>
<p>beware if you use a mutable object as a fill value, because if you change one, all of them change because they all are a reference to the same object </p>
<pre><code>&gt;&gt;&gt; translationData = list(zip_longest(pData, rData, sData,fillvalue=list()))
&gt;&gt;&gt; translationData
[(['-300.2', '600.5'], [], []), (['150.12', '280.7'], [], []), (['19.19', '286.56'], [], [])]
&gt;&gt;&gt; translationData[0][1].append(23)
&gt;&gt;&gt; translationData
[(['-300.2', '600.5'], [23], [23]), (['150.12', '280.7'], [23], [23]), (['19.19', '286.56'], [23], [23])]
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">What output are you trying to get?  Can you edit your question to include this.</span>
<span class="comment-copy">This is a good question, but I feel you are also missing something. It is generally preferred in Python to have uniform objects in a list. IE: All items in the list should be the same. So having a list of tuples of varying lengths is a bit counter-intuitive. It seems to me that perhaps you should check out that you aren't falling into the <a href="http://meta.stackexchange.com/q/66377/192545">XY problem</a>. Or perhaps you should handle these missing values elsewhere (like with the code that deals with them)</span>
<span class="comment-copy">What do you do later with the data? What happens when you have different lenghts in the lists? What's the problem with the <code>None</code>s?  Suppose you have to iterate through the translationData, a nice way of know that you don't have any data is <code>None</code>. It's easier to iterate through.. <code>for p, r, s in translationData: if p is None: ...</code></span>
<span class="comment-copy">This isn't right in the general case, and somewhat worse in Python 3 specifically; <code>filter(None</code> will drop all "falsy" values, not just <code>None</code>, and in Python 3, <code>filter</code> returns a generator; you'd need to wrap in <code>tuple</code> constructor to make it run out the generator to get the expected result.</span>
<span class="comment-copy">@ShadowRanger You are right, sorry. I edited my answer. Good catch!</span>
<span class="comment-copy">You are too swift to write a script in no time!</span>
<span class="comment-copy">Answer should be for Python3.</span>
<span class="comment-copy">Why even offer <code>filter(bool,</code> and <code>filter(lambda x: x,</code>, both of which are identical in behavior (and slightly lower performance) than <code>filter(None,</code>?</span>
<span class="comment-copy"><code>bool</code> is faster than <code>None</code>.</span>
<span class="comment-copy">@Sislam: That seems highly unlikely; I suspect you're seeing timing jitter. At least in Python 3.5, <a href="https://hg.python.org/cpython/file/dec734dfe2fe/Python/bltinmodule.c#l479" rel="nofollow noreferrer">both <code>None</code> and <code>bool</code> use the <i>exact</i> same code path</a> (excluding the actual load of the argument, where <code>LOAD_CONST</code> for <code>None</code> would usually beat <code>LOAD_GLOBAL</code> for <code>bool</code>, but have no effect on algorithmic overhead as iterables get larger); <code>None</code> would run trivially faster (the test for <code>None</code> comes first, short-circuiting the test for <code>bool</code>), but the difference is so meaningless that jitter would outweigh it.</span>
<span class="comment-copy">@ShadowRanger Sorry,I deemed it for 2.7 as the <a href="http://stackoverflow.com/questions/3845423/remove-empty-strings-from-a-list-of-strings" title="remove empty strings from a list of strings">stackoverflow.com/questions/3845423/â€¦</a> shows</span>
