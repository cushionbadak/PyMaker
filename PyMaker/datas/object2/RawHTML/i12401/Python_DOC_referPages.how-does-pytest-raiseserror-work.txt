<div class="post-text" itemprop="text">
<p>New-ish to Python but I'm trying to understand this slice of code:</p>
<pre><code>with pytest.raises(ValueError):
    group_adjust(vals, [grps_1, grps_2], weights)
</code></pre>
<p>After reading <a href="http://effbot.org/zone/python-with-statement.htm" rel="nofollow">this tutorial on with</a>, I understand <code>pytest.raises()</code> returns a context manager that sets up and cleans up things before and after <code>group_adjust()</code> is called. I also understand that <code>group_adjust()</code> should raise a <code>ValueError</code> if something goes wrong.</p>
<p>How does pytest "react" when a ValueError is raised? AFAIK, there's only setting up and cleaning up so I'm not sure how it catches the exception. The end goal for this is to understand the benefits of having pytest as a context manager.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__exit__" rel="nofollow"><code>__exit__</code></a> magic function accepts <code>exception_type</code>, <code>exception_value</code> and <code>traceback</code> parameters:</p>
<pre><code>In [5]: class RaisesContext:
   ...:     def __enter__(self):
   ...:         return self
   ...:     def __exit__(self, exception_type, exception_value, traceback):
   ...:         print('Exception type:', exception_type)
   ...:         print('Exception value:', exception_value)
   ...:         print('Traceback:', traceback)
   ...:         return True
   ...:     

In [6]: with RaisesContext():
   ...:     raise ValueError('Something went wrong')
   ...: 
Exception type: &lt;class 'ValueError'&gt;
Exception value: Something went wrong
Traceback: &lt;traceback object at 0x7fd92f4a2c48&gt;
</code></pre>
<p>They are <code>None</code>, if the <code>with</code> block ends normally:</p>
<pre><code>In [7]: with RaisesContext():
   ...:     pass
   ...: 
Exception type: None
Exception value: None
Traceback: None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not completely sure about pytest but any context manager is passed 3 arguments on its exit, the exc_type, Excepton and Traceback, if no exception was raise all three are none and if the <strong>exit</strong> returns True then the exception is suppressed as well,</p>
<p>better explained here: <a href="https://docs.python.org/2/reference/datamodel.html#object.__exit__" rel="nofollow">https://docs.python.org/2/reference/datamodel.html#object.<strong>exit</strong></a></p>
<p>so if I want to make a simple handler that will show the traceback without stopping the program I could do this:</p>
<pre><code>import traceback
class VerboseTry:
    def __enter__(self):
        pass
    def __exit__(self,exc_type,error,trace):
        if exc_type:
            traceback.print_exception(exc_type,error,trace)
            return True

def f(depth=4):
    """this will (needlessly) raise an error with several iterations to the traceback"""
    if depth==0:
        int("this is going to fail")
    else:
        return f(depth-1)

print("starting")
with VerboseTry():
    f()
print("got to end")
</code></pre>
<p>to see the error that was raised without halting the program.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>with</code> construct calls two "magic" methods, <code>__enter__</code> and <code>__exit__</code> at the beginning and end of the code block, respectively. Thus,</p>
<pre><code>with foo:
    x = 1
</code></pre>
<p>Can be read as:</p>
<pre><code>foo.__enter__()
x = 1
foo.__exit__()
</code></pre>
<p>Except that, as soon mentioned in hir answer, <code>__exit__</code> is called with details on <em>why</em> the code block is exiting: if an exception, what kind, otherwise <code>None</code>.</p>
<p>So the object returned by <code>pytest.raises(TYPE)</code> has been configured to <em>expect</em> an exception of TYPE. The <code>__exit__</code> method compares the parameter it receives declaring the actual (if any) exception with the internal data member it has storing the expected exception type, and then decides to pass or fail the test.</p>
</div>
<span class="comment-copy">Does this mean a <code>raise</code> statement calls the __exit__() magic function?</span>
<span class="comment-copy">@joshualan, not exactly so. Actually, <code>raise</code> does not call anything. When the interpreter evaluates <code>RAISE_VARARGS</code> opcode, it unwinds the stack in order to find an  <code>except</code> or <code>finally</code> blocks. <code>with</code> statement creates <code>finally</code> block behind the scenes with call to <code>__exit__</code> method. So, <code>raise</code> <i>calls</i> <code>__exit__</code>, but indirectly.</span>
