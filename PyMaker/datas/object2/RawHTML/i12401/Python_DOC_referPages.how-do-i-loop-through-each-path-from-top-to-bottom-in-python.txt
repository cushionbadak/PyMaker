<div class="post-text" itemprop="text">
<p>given a string of this</p>
<pre><code>s='MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Custom'
</code></pre>
<p>what is the simplest way to get a list like this in python 2.7?</p>
<pre><code>['MayaWindow','MayaWindow|toolBar2','MayaWindow|toolBar2|MainShelfLayout','MayaWindow|toolBar2|MainShelfLayout|formLayout14','MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout','MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Custom']
</code></pre>
<p>such as:</p>
<pre><code>import re
for t in s.split('|'):
    print re.search(r'.*%s'%t,s).group()
</code></pre>
<p>but it will break if the some folder names in the path are not unique, eg </p>
<pre><code>s='MayaWindow|toolBar2|MainShelfLayout|formLayout14|formLayout14|Custom'

import re
for t in s.split('|'):
    print re.search(r'.*%s'%t,s).group()

MayaWindow
MayaWindow|toolBar2
MayaWindow|toolBar2|MainShelfLayout
MayaWindow|toolBar2|MainShelfLayout|formLayout14|formLayout14
MayaWindow|toolBar2|MainShelfLayout|formLayout14|formLayout14
MayaWindow|toolBar2|MainShelfLayout|formLayout14|formLayout14|Custom
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A one-liner:</p>
<pre><code>&gt;&gt;&gt; [s.rsplit("|", i)[0] for i in range(s.count("|"), -1, -1)]
['MayaWindow',
 'MayaWindow|toolBar2',
 'MayaWindow|toolBar2|MainShelfLayout',
 'MayaWindow|toolBar2|MainShelfLayout|formLayout14',
 'MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout',
 'MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Custom']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>from Python 3.2, <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow">itertools.accumulate</a> allows us to avoid using indexing</p>
<pre><code>from itertools import accumulate
s = 'MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Custom'

new_list = list(accumulate(s.split('|'), lambda x,y: '|'.join((x,y))))

print(new_list)
</code></pre>
<p>produces</p>
<pre><code>['MayaWindow', 'MayaWindow|toolBar2', 'MayaWindow|toolBar2|MainShelfLayout', 'MayaWindow|toolBar2|MainShelfLayout|formLayout14', 'MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout', 'MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Custom']
</code></pre>
<p>On the other hand, in Python 2 you can do something along the line</p>
<pre><code>elements = iter(s.split('|'))
acc = next(elements)
new_list = [acc, ]
for el in elements:
    acc += '|'+el
    new_list.append(acc)

print(new_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Split it on the delimiter of interest and then loop through each slice size:</p>
<pre><code>s = 'MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Custom'
l = s.split('|')
new_list = [l[:idx] for idx in range(1, len(l)+1)]
</code></pre>
<p>Result:</p>
<pre><code>&gt;&gt;&gt; for item in new_list:
...     print(*item)
...
MayaWindow
MayaWindow toolBar2
MayaWindow toolBar2 MainShelfLayout
MayaWindow toolBar2 MainShelfLayout formLayout14
MayaWindow toolBar2 MainShelfLayout formLayout14 ShelfLayout
MayaWindow toolBar2 MainShelfLayout formLayout14 ShelfLayout Custom
</code></pre>
<p>Or if you want strings rather than <code>list</code>s, <code>join()</code> them back on the delimiter:</p>
<pre><code>new_list = ['|'.join(l[:idx]) for idx in range(1, len(l)+1)]
</code></pre>
<p>Result:</p>
<pre><code>&gt;&gt;&gt; for item in new_list:
...     print(item)
...
MayaWindow
MayaWindow|toolBar2
MayaWindow|toolBar2|MainShelfLayout
MayaWindow|toolBar2|MainShelfLayout|formLayout14
MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout
MayaWindow|toolBar2|MainShelfLayout|formLayout14|ShelfLayout|Custom
</code></pre>
</div>
<span class="comment-copy">Thanks ! But how could I do this in python 2.7?</span>
<span class="comment-copy">please see my edit for one way to do it</span>
