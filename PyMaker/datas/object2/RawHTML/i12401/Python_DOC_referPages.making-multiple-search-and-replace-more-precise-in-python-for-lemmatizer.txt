<div class="post-text" itemprop="text">
<p>I am trying to make my own lemmatizer for Spanish in <code>Python2.7</code> using a lemmatization dictionary.</p>
<p>I would like to replace all of the words in a certain text with their lemma form. This is the code that I have been working on so far.</p>
<pre><code>def replace_all(text, dic):
    for i, j in dic.iteritems():
        text = text.replace(i, j)
    return text


my_text = 'Flojo y cargantes. Decepcionantes. Decenté decentó'
my_text_lower= my_text.lower()

lemmatize_list = 'ExampleDictionary'
lemmatize_word_dict = {}
with open(lemmatize_list) as f:
    for line in f:
        depurated_line = line.rstrip()
        (val, key) = depurated_line.split("\t")
        lemmatize_word_dict[key] = val

txt = replace_all(my_text_lower, lemmatize_word_dict)
print txt
</code></pre>
<p>Here is an example <code>dictionary</code> file which contains the lemmatized forms used to replace the words in the <code>input</code>, or <code>my_tyext_lower</code>. The example dictionary is a tab-separated 2-column file in which Col. 1 Represented the values and Col 2 represents the keys to match.</p>
<p><strong>ExampleDictionary</strong></p>
<pre><code>flojo   floja
flojo   flojas
flojo   flojos
cargamento  cargamentos
cargante    cargantes
decepción   decepciones
decepcionante   decepcionantes
decentar    decenté
decentar    decentéis
decentar    decentemos
decentar    decentó
</code></pre>
<p>My desired output is as follows:</p>
<pre><code>flojo y cargante. decepcionante. decentar decentar
</code></pre>
<p>Using these inputs (and the example phrase, as listed in <code>my_text</code>within the code). My actual output currently is:</p>
<pre><code>felitrojo y cargramarramarrartserargramarramarrunirdo. decepáginacionarrtícolitroargramarramarrunirdo. decentar decentar
</code></pre>
<p>Currently, I can't seem to understand what it going wrong with the code.</p>
<p>It seems that it is replacing letters or chunks of each word, instead of recognizing the word, finding it in the <code>lemma dictionary</code> and then replace that instead.</p>
<p>For instance, this is the result that I am getting when I use the entire dictionary (more than 50.000 entries). This problem does not happen with my small example dictionary. Only when I use the complete dictionary which makes me think that prehaps it is double "replacing" at some point?</p>
<p>Is there a pythonic technique that I am missing and can incorporate into this code to make my search and replace function more precise, to identify the full words for replacement rather than chunks and/or NOT make any double replacements?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because you use text.replace there's a chance that you'll still be matching a sub-string, and the text will get processed again.  It's better to process one input word at a time and build the output string word-by-word.</p>
<p>I've switched your key-value the other way around (because you want to look up the right and find the word on the left), and I mainly changed the replace_all:</p>
<pre><code>import re

def replace_all(text, dic):
    result = ""
    input = re.findall(r"[\w']+|[.,!?;]", text)
    for word in input:
        changed = dic.get(word,word)
        result = result + " " + changed
    return result

my_text = 'Flojo y cargantes. Decepcionantes. Decenté decentó'
my_text_lower= my_text.lower()

lemmatize_list = 'ExampleDictionary'
lemmatize_word_dict = {}
with open(lemmatize_list) as f:
    for line in f:
        kv = line.split()
        lemmatize_word_dict[kv[1]] =kv[0]

    txt = replace_all(my_text_lower, lemmatize_word_dict)
    print txt
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I see two problems with your code:</p>
<ul>
<li>it will also replace words if they appear as part of a bigger word</li>
<li>by replacing words one after the other, you could replace (parts of) words that have already been replaced</li>
</ul>
<p>Instead of that loop, I suggest using <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow"><code>re.sub</code></a> with word boundaries <code>\b</code> to make sure that you replace complete words only. This way, you can also pass a callable as a replacement function.</p>
<pre><code>import re
def replace_all(text, dic):
    return re.sub(r"\b\w+\b", lambda m: dic.get(m.group(), m.group()), text)
</code></pre>
</div>
<span class="comment-copy">When I run your example, I get your desired output. However, there could be a problem in case one of the words contains another words from the dict.</span>
<span class="comment-copy">This is the issue. There are words that will defintiely contain parts of smaller words, for instance, in the dictionary. This is why I need to try to make the "search/replace" for a whole word, rather than a word particle...</span>
<span class="comment-copy">I just tried out your example and I am still having problems with the words with special characters using Python2.7. Using this solution my result is: ` flojo y cargante . decepcionante . decent decent` instead of  flojo y cargante . decepcionante . decentar decentar`.</span>
<span class="comment-copy">ETA. I have tried this solution by hard-coding in the regular expressions the accented leters (i.e. <code>input = re.findall(r"[\wáÁéÉíÍóÓúÚüÜñÑçÇ']+|[.,!?;]", text)</code>) and it seems to work. Just don't know if this is the best method to achieve that result.</span>
<span class="comment-copy">This solution seems to work for words with regular characters, but not for words with special characters. For instance, when testing it. The result that I obtained was <code>flojo y cargante. decepcionante. decenté decentó</code>, instead of the desired <code>flojo y cargante. decepcionante. decentar decentar</code></span>
<span class="comment-copy">@owwoow14 Hm, it works with Python 3... maybe some encoding problem?</span>
<span class="comment-copy">Oops. I am using Python 2.7 I will edit my question to specify.</span>
