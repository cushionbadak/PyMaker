<div class="post-text" itemprop="text">
<p>Consider the following hierarchy</p>
<pre><code>MusicEditor (package)
        Converters (subpackage)
            ...
        Transformations (subpackage)
            ...
        Utility (subpackage)
            ...
</code></pre>
<p>what is the proper way to import a file/module from the utility subpackage into a file in the converters subpackage?</p>
<p>e.g. import Utility/string.py into the file Converters/wav.py</p>
<p>how would I go about doing this?</p>
<hr/>
<h2>EDIT in response to Ismael Infante</h2>
<p>Would the following be correct?</p>
<p>Suppose that MusicEditor resided in /usr/something/MusicEditor. Then I would edit python path as follows?</p>
<pre><code>PYTHONPATH = PYTHONPATH + /usr/something/
</code></pre>
<p>I would then add the init files to each directory as follows:</p>
<pre><code>MusicEditor (package)
        __init__.py
        Converters (subpackage)
            __init__.py
            ...
        Transformations (subpackage)
            __init__.py
            ...
        Utility (subpackage)
            __init__.py
            ...
</code></pre>
<p>and then to include something from utilities into a file located in converters, I would simply go:</p>
<pre><code>(MusicEditor/Converters/wav.py)

import MusicEditor.Utility.string
</code></pre>
<p>Is this correct? But I could also use the following relative path</p>
<pre><code>(MusicEditor/Converters/wav.py)

import ..Utility.string
</code></pre>
<p>yes?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to put an <code>__init__.py</code> empty file inside of each directory. In this ways, your directories will become packages.</p>
<p>After that, you have to set up you PYTHONPATH variable. This variable must point to the parent directory of MusicEditor. It's through this variable that the Python interpreter can reach your packages.</p>
</div>
<span class="comment-copy">I have adjusted my original question, would you take a look at it and make any necessary changes, corrections if I am wrong? Since I am not exactly sure what you meant as I am a rookie. Thank you @Ismael Infante</span>
<span class="comment-copy">To set up the PYTHONPATH variable, <code>export PYTHONPATH=${PYTHONPATH};/usr/something</code>.  To import the string module, in wav.py, use this import line: <code>from MusicEditor.Utility import string</code>. And, to call any function of string module: <code>string.function_name()</code>.</span>
<span class="comment-copy">For versions 3.3+, cant I just entirely omit <code>__init__.py</code> due to namespace packages?</span>
<span class="comment-copy">I'm running python 2.7. I know little about the new features of python 3. But it seems that you can omit the <code>__init__.py</code>. <a href="https://docs.python.org/3/whatsnew/3.3.html" rel="nofollow noreferrer">what's new python 3.3</a>.</span>
