<div class="post-text" itemprop="text">
<p>Is there a better way to apply a function to a variable over and over again, without having to use a for loop (ideally in standard lib too)? Example of what I have now:</p>
<pre><code>def simulation():
    wealth = 0
    for i in range(1000):
       wealth = gamble(wealth)
    return wealth
</code></pre>
<p>What I would love is something <em>like</em></p>
<pre><code>def simulation()
    return reduce_(gamble, 1000, 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One alternative I could think of is using <strong><a href="https://docs.python.org/3/library/itertools.html#itertools.repeat" rel="nofollow"><code>itertools.repeat</code></a></strong> with <strong><a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a></strong>:</p>
<pre><code>from itertools import repeat
wealth = 0

# dummy gable function
def gamble(wealth): 
    return wealth

z = map(gamble, repeat(wealth, times=1000))
</code></pre>
<p>You'd still need to iterate through it (or call <code>list()</code> on it) to get it to execute. </p>
<p>This is if the function should act on the same value. If you need it to call itself many times you could also use a decorator (or <code>reduce</code> but there's no point in adding this since @Austin did):</p>
<pre><code>def apply(f, times=10):
    def func(*args, **kwargs):
        nonlocal times
        times -= 1
        if times:
            return func(f(*args, **kwargs))
    return func

@apply
def foo(val): 
    val += 1
    print(val, end = " ")
    return val

foo(10)
11 12 13 14 15 16 17 18 19
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code># python 3
from functools import reduce
return reduce(lambda w,i: gamble(w), range(1000), 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unfortunately, there's no builtin or standard library function that does quite what you want.</p>
<p>While you can contort an existing function to make it work, a <code>for</code> loop is probably more readable than the code that would require. I, for one, would greately prefer to read your current code than <a href="https://stackoverflow.com/users/4029014/austin-hastings">Austin Hasting</a>'s very clever version. I can understand the <code>for</code> loop immediately, the <code>reduce</code> call and the <code>lambda</code> that ignores its second argument both require quite a bit more thought.</p>
<p>So, think carefully before you "simplify" your code and make sure your simplification doesn't actually make the code harder to understand.</p>
</div>
<span class="comment-copy">Since you're doing something over and over, there's always going to be a loop somewhere. Why do you want to hide it?</span>
<span class="comment-copy">@Blckknght because sometimes the loop is not the "most important" or "most descriptive" part of the code. The names 'reduce' and 'map' and 'grep' and 'zip' are looping constructs, but they do more than just loop, and convey what they do.</span>
<span class="comment-copy">This gives you a list of identical return values, not <code>gamble(gamble(...(gamble(wealth)..)))</code></span>
<span class="comment-copy">@chepner Right, I did get confused about that. I added a decorator solution that does the trick if I'm not mistaken.</span>
