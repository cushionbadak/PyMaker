<div class="post-text" itemprop="text">
<p>I work mostly in IPython's interactive shell. Sometimes I copy-paste code from the Internet to test it out and work with examples.</p>
<p>If I paste the following code from <a href="http://stackabuse.com/python-async-await-tutorial/" rel="noreferrer">this tutorial</a>:</p>
<pre><code>import asyncio

async def speak_async():  
    print('OMG asynchronicity!')

loop = asyncio.get_event_loop()  
loop.run_until_complete(speak_async())  
loop.close()  
</code></pre>
<p>I will close the loop. The <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.close" rel="noreferrer">documentation</a> says not to use any methods on an event loop after it's been closed. And <code>async.get_event_loop()</code> will still return that closed loop.</p>
<p>What should I do if I accidentally close an event loop? I would rather not restart the interpreter.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just <a href="https://docs.python.org/3/library/asyncio-eventloop.html" rel="nofollow noreferrer">create and set a new event loop for the current context</a>;</p>
<pre><code>asyncio.set_event_loop(asyncio.new_event_loop())
</code></pre>
</div>
<span class="comment-copy">that is a good idea ;)</span>
<span class="comment-copy">Do I have to set it, or can I use it directly? I figure there's some magic going on that makes me want to set it.</span>
<span class="comment-copy">@leewangzhong Once you set it, the next call to <code>asyncio.get_event_loop()</code> will return the new loop and your code will work again without exiting the interpreter.</span>
<span class="comment-copy">I found the answer to the question I meant to ask: The various asyncio functions like <code>ensure_future</code> take an optional <code>loop</code> parameter, and if that's not provided, it will use the loop in <code>get_event_loop()</code>.</span>
