<div class="post-text" itemprop="text">
<p>I was looking for a regular expression to validate e-mails when I found this:</p>
<pre><code>[^@]+@[^@]+\.[^@]+
</code></pre>
<p>The <code>[^@]</code> expression seems not to work like the documention says it should.</p>
<pre><code>s = 'test'

match = re.match("[^@]", s)

print(match.group())
</code></pre>
<p>This for example prints the first character of the string that is <code>t</code>.
If i use regular expression <code>[^]</code> I get an error: <code>unexpected end of regular expression</code>. The documentation says that:</p>
<blockquote>
<p>Special characters lose their special meaning inside sets.</p>
</blockquote>
<p><code>[]</code> is a set and <code>^</code> is a special character.</p>
</div>
<div class="post-text" itemprop="text">
<p>The statement "special characters lose their special meaning inside sets" is true because the caret character has <em>two</em> special meanings; at the logical start of a regular expression (where it is an anchor), and at the start of a character class (<a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow">or 'character set' where it forms a 'complementing set of characters'</a>).</p>
<p>The reported error comes from the <code>[^]</code> construct which is invalid since the character class is not closed: the <code>^</code> affects the next character(s).</p>
<p>In this case the effect is the <code>]</code> does <em>not</em> close the character class and the entire regular expression is "not ended", resulting in the regular expression syntax error.</p>
<hr/>
<p>Anyway, the error reported about <code>[^]</code> has nothing to do with <code>[^@]</code> which is a character class that will match any character <em>except</em> <code>@</code>. This, coupled with the incorrectly focused title, probably explains some of the downvotes..</p>
<pre><code>re.match("[^]",  "anything")  # =&gt; regex error, as explained above
re.match("[^]]", "z")         # =&gt; match; z is not ]
re.match("[^@]", "z")         # =&gt; match; z is not @
re.match("[^@]", "@")         # =&gt; no match
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>[^]</code> is a special case. It means "match a single character that is not in the brackets." Have a look at <a href="https://en.wikipedia.org/wiki/Regular_expression#Standards" rel="nofollow">the wiki page</a> for more detail. </p>
</div>
<div class="post-text" itemprop="text">
<p>The character <code>^</code> is a special character.</p>
<pre><code>^Test ... matches a string that starts with Test
   \^ ... matches the character ^
 [\^] ... matches the character ^
 [^^] ... matches a character that is not a ^
 [-^] ... matches a - or a ^
 [^-] ... matches a character that is not a -
[\^-] ... matches a - or a ^
</code></pre>
</div>
<span class="comment-copy">Make sure to appropriately title questions. The <code>[^@]</code> expressions works <i>exactly</i> as it is documented to, and a case has not been made otherwise; it is the <code>[^]</code> expression that throws the error.</span>
<span class="comment-copy">This question is more about <i>why</i> the caret behaves the way it does, rather than what the expression means.</span>
