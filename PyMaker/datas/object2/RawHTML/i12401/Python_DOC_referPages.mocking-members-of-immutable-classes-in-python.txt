<div class="post-text" itemprop="text">
<p>I have a class which uses a sqlite3 database and want to write a test suite for it. In particular, I want to check that <code>sqlite3.Cursor.execute</code> is called with the correct SQL command. However, I have run into trouble with mocking this method since <code>sqlite3.Cursor</code> seems to be written in C and thus the class is immutable. This means I can't just patch the execute method, but if I try to patch the whole class, the assert fails, saying that execute was never called.</p>
<p>Below is my best attempt so far, but the assert fails, saying that there was no call. I would appreciate some suggestions as to what I'm doing wrong. Thanks.</p>
<h2>myclass.py</h2>
<pre><code>import sqlite3
class MyClass:
    def __init__(self):
        self.db = sqlite3.connect('somedb.db')

    def query(self, sql_squery):
        c = self.db.cursor()
        c.execute(sql_query)
</code></pre>
<h2>test_myclass.py</h2>
<pre><code>import unittest
import mock
import myclass

class MyClassTestCase(unittest.TestCase):
    @patch('myclass.sqlite3.Cursor')
    def test_query(self, mock_sql_cursor):
        mc = myclass.MyClass()
        mc.query('test')
        mock_sql_cursor.execute.assert_called_with('test')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here goes another approach</p>
<p>You could patch out <code>myclass.sqlite3</code> and mock the and then mock the return value of <code>connect().cursor().execute</code>.</p>
<pre><code>import unittest
from mock import patch
from myclass import MyClass


class MyClassTestCase(unittest.TestCase):
    def test_query(self, mock_sql_cursor):
        with patch('uploads.myclass.sqlite3') as mocksql:
            mc = MyClass()
            mc.query('test')
            mock_sql_cursor.connect().cursor().execute.assert_called_with('test')
</code></pre>
<p>Answer inspired in <a href="https://stackoverflow.com/questions/20536594/how-can-i-mock-sqlite3-cursor">this answer</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>sqlite3</code> is a C extension and you cannot patch C calls. Any way you should not to test <code>sqlite3</code> behavior but just your how code the call <code>sqlite3</code> module.</p>
<p>What you can do is to patch <code>sqlite3.connect()</code> method and check if your code call the API in the correct way:</p>
<pre><code>class MyClassTestCase(unittest.TestCase):
    @patch('sqlite3.connect', autospec=True)
    def test_query(self, mock_connect):
        mock_cursor = mock_connect.return_value.cursor.return_value
        mc = myclass.MyClass()
        mc.query('test')
        mock_cursor.execute.assert_called_with('test')
</code></pre>
<p>Note:</p>
<ol>
<li>I patch <code>sqlite3.connect</code> absolute path and not <code>myclass....</code> do the same thing but it is more clear (<code>sqlite3.connect</code> and <code>myclass.sqlite3.connect</code> are exactly the same reference)</li>
<li>I'm using <code>autospec=True</code> to avoid strange errors like explained in <a href="https://docs.python.org/3/library/unittest.mock.html#autospeccing" rel="nofollow">Autospeccing</a></li>
<li>Consider to write your own wrapper and mock it in your test: your code will be more testable and less coupled to <code>sqlite3</code> module</li>
</ol>
</div>
<span class="comment-copy">Take a look at <a href="http://stackoverflow.com/questions/18077247/how-to-mock-sqlite3-connect-in-python">this answer</a></span>
<span class="comment-copy">Thanks. This worked and seems to be the most concise solution.</span>
<span class="comment-copy">Pay attention to use mock's call instead of <code>return_value</code> in test code. Mock <code>()</code> calls are reserved to production code and <code>return_value</code> is useful in test to have the same value without change the mock state.</span>
<span class="comment-copy">Thanks this worked great. Just one question -- why are <code>sqlite3</code> and <code>membership.sqlite3</code> the same namespace?  I did also consider writing a wrapper class, but it seemed silly to add unnecessary abstraction just to fit my code to the test suite.</span>
<span class="comment-copy">There's no namespace in python. By <code>import sqlite3</code> you copy the <code>sqlite3</code> module reference in your module and call it <code>sqlite3</code>. That means by <code>myclass.sqlite3.connect</code> you are pointing the same reference as <code>sqlite3.connect</code></span>
<span class="comment-copy">Everywhere seems to stress the importance of patching something where it is used rather than where the call to patch is. Why is that necessary if all references to a module are the same?</span>
<span class="comment-copy">Because you should patch the reference where you use it but not browse it. Patch the reference where you use is a good rule to make the changes locally but you should know exactly what you are doing. I love to make it explicit by use the absolute path where it is the same.</span>
