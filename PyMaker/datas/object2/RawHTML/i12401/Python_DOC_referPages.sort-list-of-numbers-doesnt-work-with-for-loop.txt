<div class="post-text" itemprop="text">
<p>I have a list of numbers:</p>
<pre><code>list = [2, 5, 4, 1, 3]
</code></pre>
<p>I want to sort it and iterate sorted list using for loop:</p>
<pre><code>print list
list.sort()
print list
for n in list:
    print list
    print n
    list.pop(0)
</code></pre>
<p>But the output doesn't look as expected:</p>
<pre><code># before sort:
[2, 5, 4, 1, 3]
# after sort:
[1, 2, 3, 4, 5]
## still everything ok
# for loop:
[1, 2, 3, 4, 5]
1
[2, 3, 4, 5]
3
[3, 4, 5]
5
## what?
</code></pre>
<p>Why the for loop doesn't accept sorted list and works with the state before even though it returns the sorted list? Is there any hidden indexing, which <code>sort()</code> can't change? I'm new in Python and this is really weird behavior. What am I doing wrong?</p>
<p>What I want to achieve:</p>
<pre><code># before sort:
[2, 5, 4, 1, 3]
# after sort:
[1, 2, 3, 4, 5]
# for loop:
[1, 2, 3, 4, 5]
1
[1, 2, 3, 4, 5]
2
[1, 2, 3, 4, 5]
3
[1, 2, 3, 4, 5]
4
[1, 2, 3, 4, 5]
5
</code></pre>
<p><strong>Update:</strong> I need that pop there. My full code of this function:</p>
<pre><code>inTemplate = [False]
inLink = [False]
regexNeeded = [False, True]
# ...some if elif else skipped there
            # finds positions of brackets and sorts them
            brackets = [m.start() for m in re.finditer("}}",text)]
            brackets += [m.start() for m in re.finditer("{{",text)]
            brackets += [m.start() for m in re.finditer("]]",text)]
            brackets += [m.start() for m in re.finditer(r"\[{2}",text)]
            brackets.sort(key=int)
            # if any bracket in text
            if not brackets == []:
                # for every bracket
                for n in brackets:
                    # what bracket and what starts/ends with it
                    if text[n] == '{':
                        inTemplate.append(True)
                    elif text[n] == '[':
                        inLink.append(True)
                    elif text[n] == ']':
                        inLink.pop()
                    else:
                        if inTemplate[-1]:
                            inTemplate.pop()
                        # if ends template which doesn't started, then there is no need to regex
                        elif regexNeeded[-1]:
                            regexNeeded.pop()
                        # break if out of regexNeeded area
                        else:
                            break
                    brackets.pop(0)
                # if for loop breaked
                if not brackets == []:
                    # do some regex on that bracket, where for loop breaked
                    where = brackets[0]
                    before = text[:where]
                    before = re.sub(r'\s*$', r'\n', before)
                    after = text[where:]
                    if not regexNeeded[-1]:
                        after = re.sub(r'^}}\s*', r'}}\n', after)
                    text = before + after
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <em>pop</em> deletes an element in the list entirely. Therefore the reference is removed and we can only iterate over the amount of remaining items. The code is in Python 3, but I guess it shouldn't be too hard to change the print statements.</p>
<pre><code>list = [2, 5, 4, 1, 3]

print(list)
list.sort()
print(list)
for n in range(len(list)):
    print(list)
    print(list.pop(0))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The function <code>pop()</code> will <strong>remove</strong> and return the <em>last</em> item you have in the list, in index <code>len(list)-1</code>. Calling <code>pop(0)</code> <strong>removes</strong> the <em>first</em> item, so if you repeatedly call it then your list will be printed <em>in-order</em>, meaning <code>1, 2, 3, 4 ,5</code> since you sorted it first.</p>
<p>Read the <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow">documentation</a> please:</p>
<pre><code>list.pop([i])
</code></pre>
<blockquote>
<p>Remove the item at the given position in the list, and return it.</p>
</blockquote>
<p>If you <em>don't</em> want the items of the list to be removed, but just print them, you can use <code>print (list[index])</code> instead of <code>pop()</code>. And in your loop, since it's sorted and started from 1, you can actually use <code>print(list[n-1])</code> even.</p>
</div>
<span class="comment-copy">Not-reproducible.</span>
<span class="comment-copy">I think you just missed something in the output. It should work fine.</span>
<span class="comment-copy">@cad Interesting to know what?</span>
<span class="comment-copy">@aleskva then remove list.pop(0)</span>
<span class="comment-copy">Why do you think you have a problem with sorting?</span>
<span class="comment-copy">Looks as a good solution, but what if I want some <code>if listItem == 21:</code> inside for loop? (if the list would be bigger)</span>
<span class="comment-copy">just use list[n] == 21 @aleskva</span>
<span class="comment-copy">I know, what it does, but I need it there. I have more complex code. See my comment under question. Do you know, how to solve this with pop still there?</span>
<span class="comment-copy">What is the problem exactly? you can use pop(0) and it will work as you want it to.</span>
<span class="comment-copy">I need to pop, because I have some complex if elif else inside the for loop, which processes the smaller lists and compares them with some predefined lists. So I need to compare smaller list, but still iterate the original one.</span>
<span class="comment-copy">You will have to attach a <i>complete</i> example (also minimal and verifiable). Please edit your question with <b>all</b> the details, and then you might get it re-opened with enough votes (I will vote if it's clear). And then I could help you further :)</span>
<span class="comment-copy">Added my full code</span>
