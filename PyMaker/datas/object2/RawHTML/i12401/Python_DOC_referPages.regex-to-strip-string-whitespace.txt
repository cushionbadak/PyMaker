<div class="post-text" itemprop="text">
<p>I need to remove the spaces from beginning and end of a string without using the <code>strip</code>, <code>join</code>, or <code>split</code> methods.</p>
<p>I have searched many similar questions and found similar answers as below. </p>
<p>The point I could not understand is '|' operator is used to match either A or B for A|B but here, it works as 'and' operator. </p>
<p>What I want to learn is that this use is normal for | operator or it has another functionality here!</p>
<p>To make it a little bit clearer, I have replaced spaces as 'xxx'</p>
<pre><code>&gt;&gt;&gt; pattern = re.compile(r'^\s+|\s+$')
&gt;&gt;&gt; mo = re.sub(pattern,'xxx','   life is beautiful   ')
&gt;&gt;&gt; mo
'xxxlife is beautifulxxx'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The thing is to understand that the given pattern will be matched more than once in the input string. <strong>For each possible match it will decide</strong> either to have <strong>leading or trailing</strong> whitespace. <strong>Altogether it will consider both; leading and trailing</strong> whitespace.</p>
<p>This is probably where the confusion arises from.</p>
<h1>Explanations on the example</h1>
<p>To clarify this, let's have a look at the documentation of the <strong><a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow">re.sub Method Documentation</a></strong></p>
<p><code>re.sub(pattern, repl, string, count=0, flags=0)</code></p>
<blockquote>
<p>The optional argument count is the maximum number of pattern occurrences to be replaced; count must be a non-negative integer. If omitted or zero, all occurrences will be replaced. Empty matches for the pattern are replaced only when not adjacent to a previous match, so sub('x*', '-', 'abc') returns '-a-b-c-'.</p>
</blockquote>
<p>With <code>count</code> set to <code>1</code> it is easier to describe what is really going on inside the <code>sub</code> method. Take a look at the following snippet:</p>
<pre><code>&gt;&gt;&gt; pattern = re.compile(r'^\s+|\s+$')
&gt;&gt;&gt; mo0 = '   life is beautiful   '
&gt;&gt;&gt; mo1 = re.sub(pattern, 'xxx', mo0, 1)
&gt;&gt;&gt; mo2 = re.sub(pattern, 'xxx', mo1, 1)
&gt;&gt;&gt; mo0
'   life is beautiful   '
&gt;&gt;&gt; mo1
'xxxlife is beautiful   '
&gt;&gt;&gt; mo2
'xxxlife is beautifulxxx'
</code></pre>
<p>Here the <code>sub</code> method just replaces a single occurrence of the matched pattern. In this case <code>mo0</code> is processed and the result is put into <code>mo1</code>, where the given pattern is replaced only once - more precisely matching leading whitespace. Afterwards <code>mo1</code> is processed in the same way and the result is put into <code>mo2</code>, where the given pattern is replaced only once again - more precisely matching trailing whitespace. <code>m2</code> is in the end the same result as the previously defined <code>mo</code> in the opening example. So in the end <code>mo</code> equals the string where both; the leading and the trailing whitespace are processed as in <code>mo2</code>. Although, in each of the steps the selection which part of the pattern to match is being done using a logical <code>OR</code>.</p>
<h1>Less technical explanation</h1>
<p>I might have another clue why this is so confusing. Let's take closer look at the <a href="https://en.wikipedia.org/wiki/And/or" rel="nofollow">And/Or Wikipedia article</a>:</p>
<blockquote>
<p>And/or (also and or) is a grammatical conjunction used to indicate that one or more of the cases it connects may occur. <strong>For example, the sentence "He will eat cake, pie, and/or brownies" indicates that although the person may eat any of the three listed desserts, the choices are not exclusive; the person may eat one, two, or all three of the choices.</strong></p>
</blockquote>
<p>So believing Wikipedia and my own experience with people leads me to the conclusion, that it is not always clear what the precise meaning might be, when using and/or in informal communication. In the formal world of science like mathematics it is pretty clear what an <code>OR</code> has to mean. Therefore Wikipedia states further:</p>
<blockquote>
<p>It is used to describe the precise "or" in logic and mathematics, while an "or" in spoken language might indicate inclusive or or exclusive or.</p>
</blockquote>
<p>Some authors of legal texts define best practices by abandoning those ambiguity drivers from legal texts (<a href="http://www.slaw.ca/2011/07/27/grammar-legal-writing/" rel="nofollow">e.g. here</a>).</p>
<p>However, wikipedia further states:</p>
<blockquote>
<p>And/or has been used in official, legal and business documents since the mid-19th century, and evidence of broader use appears in the 20th century.</p>
</blockquote>
<p>This tells me that it appears growing, even though it's use is discouraged in precise environments.</p>
<h1>Sum Up</h1>
<p>I guess the context of the statement is not clear. If one would take the context <em>within a single match</em> into the sentence there would be no space for any confusion anymore. </p>
</div>
<div class="post-text" itemprop="text">
<p>It is looking for instances of <code>'^\s+'</code> (beginning of string, one or more whitespace) or <code>'\s+$'</code> (one or more whitespace, end of string) and replacing matches with <code>'xxx'</code>. It finds the former at the beginning of the passed string, replacing it. It then finds the latter at the end, and replaces that as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>When using <code>r'^\s+|\s+$'</code> with <code>sub()</code>, it's working in <strong>OR</strong> mode.</p>
<p>It's saying: match whitespace at the start of the string (<code>^</code>) or whitespace at the end of the string (<code>$</code>)</p>
<p><code>sub()</code> will replace all matches.</p>
</div>
<span class="comment-copy"><code>|</code> is an OR operator, when the first alternation fails, the second is tested. <code>re.sub</code> tests the string several times for each position in the string. It can't be and AND operator since you only need that one alternation succeeds.</span>
<span class="comment-copy">Could you please give a little bit more detail why altogether it will consider both? is it a property of re.sub()?</span>
<span class="comment-copy">Thank you for the detailed explanation! When count is not zero, all clear. However, if count = 0 and '|' operator comes together, ambiguity starts. I ll try to figure it out anyway.</span>
<span class="comment-copy">'sub(pattern, repl, string, count=0, flags=0)' "The optional argument count is the maximum number of pattern occurrences to be replaced; count must be a non-negative integer. If omitted or zero, all occurrences will be replaced." from the python documentation. I understood that. Since | means OR, how is that possible after replacing the spaces at the start to look for the end of string again. If there is no spaces at the start, yes it is clear but since there are spaces at the start , i really did not understand yet.</span>
