<div class="post-text" itemprop="text">
<p>So say I have a script that declares the following import:</p>
<pre><code>import some_library
</code></pre>
<p>Later in the code I have the following:</p>
<pre><code>def foobar():
    import foo
    foo.bar()
</code></pre>
<p>However, <code>foo</code> also imports <code>some_library</code> (and is dependant on it) how would I go about optimizing this situation? Should I write the <code>bar()</code> code directly in the class that imports the <code>foo</code> code? Or is there any other way of not having to import the <code>some_library</code> code in the <code>foo</code> snippet, since it is already in the "outer class"? Can I send a reference to the library in the constructor?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is already done by the Python runtime - the command <code>import</code> first checks if the requried module is not already present (they can all be listed in the  <code>sys.modules</code> dictionary) - and only if it is not there, the actual importing is triggered.</p>
<p>After that the name you asked is made available on the namespace where the import command is placed.</p>
<p>From <a href="https://docs.python.org/3/reference/import.html" rel="nofollow">the docs</a>: "The import statement combines two operations; it searches for the named module, then it binds the results of that search to a name in the local scope."</p>
</div>
<span class="comment-copy">It might be that the python compiler already optimizes this?</span>
<span class="comment-copy">It only gets imported once, after that it's a lookup. If you're having performance issues, look elsewhere.</span>
<span class="comment-copy">Please not ehat you can have a module name with an hifen ( <code>-</code> )  module names have to be valid Python variable names (and a - between variable names mean "subtraction")</span>
<span class="comment-copy">The compiler doesn't do much. It was not designed to be so smart mainly because it can't be so smart (information during compilation isn't as plentyfull as in static languages). Really don't try and 'optimize imports' though, you're barking up the wrong tree doing that.</span>
