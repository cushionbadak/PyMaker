<div class="post-text" itemprop="text">
<p>I have some test.py file:</p>
<pre><code>class A:
    def __init__(self):
        print("A init")

    def __del__(self):
        print("A del")

a = A()
</code></pre>
<p>When I run it 10 times (<code>python3 test.py</code>) it always produces next output:</p>
<pre><code>A init
A del
</code></pre>
<p>But if I add <code>sys.exit</code> call to end of script:</p>
<pre><code>import sys

class A:
    def __init__(self):
        print("A init")

    def __del__(self):
        print("A del")

a = A()

sys.exit(-1)
</code></pre>
<p>in 5 of 10 cases (randomly) i have</p>
<pre><code>A init
</code></pre>
<p>and in second half of cases:</p>
<pre><code>A init
A del    
</code></pre>
<p>I use Python3.4.3 [MSC v.1600 32 bit] on Windows 7 x64.
So why <code>__del__</code> method called not every time? Do I need to use some other exit method to pass return code of script and have all destructors guaranteed executed? And one more related question: is it possible to execute destructors on receive SIGTERM or SIGKILL from OS?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/reference/datamodel.html#object.__del__" rel="nofollow">documentation</a>:</p>
<blockquote>
<p>It is not guaranteed that <code>__del__()</code> methods are called for objects that still exist when the interpreter exits.</p>
</blockquote>
<p>If you want to ensure that <code>a.__del__</code> is invoked, you'll have to explicitly delete the instance:</p>
<pre><code>a = A()
del a   # Assuming this is the final reference to the object
</code></pre>
</div>
<span class="comment-copy">If you want to guarantee the clean-up method gets called, consider a context manager.</span>
<span class="comment-copy">You should almost never use <code>__del__</code>. You can catch signals with the <code>signal</code> module, except for SIGKILL, which can't be caught.</span>
<span class="comment-copy">Also, use <code>sys.exit(0);</code>, which means that the code worked properly.</span>
<span class="comment-copy">2L3viathan The thing why I want to use <b>del</b>, because I am writing wrapper to some .so library, which works with some OS audio resourses and it clearly says that I must call some deinit method on exit, or it may cause troubles when working with library on next launch which will be fixed only after reboot). So I want to call wrapper class in <code>__del__</code>. May be better decision to separate deinit in some other method and completely rely on users of wrapper?</span>
<span class="comment-copy">2AMACB I want to pass -1 as return code, only for example</span>
<span class="comment-copy">It might be worth noting that calling <code>del a</code> doesn't necessarily mean that the object's <code>__del__</code> method gets called. That's only <i>sure</i> if you're using CPython and there are no other references to the object. In other situations, it may be subject to the whims of the garbage collector.</span>
