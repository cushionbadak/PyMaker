<div class="post-text" itemprop="text">
<p>To load a json, I use the <code>json.loads()</code> method with a <code>try/except</code> block to get where the error has been occured if it fail.</p>
<p>I am getting errors, in the form:</p>
<pre class="lang-sh prettyprint-override"><code>Expecting object: line 1 column 14117248 (char 14117247)
</code></pre>
<p>I am asking if there is a way to get the line/char pointed by this error.</p>
<p>Is there a way in python that return the <code>line X column Y</code> from a string?</p>
</div>
<div class="post-text" itemprop="text">
<p>From Python 3.5 onwards, decoding can raise an <a href="https://docs.python.org/3/library/json.html#json.JSONDecodeError" rel="nofollow"><code>JSONDecodeError</code> exception</a>. This exception contains a few extra attributes, use those to print out some context. I'd limit this to a small string. Your sample input string has at least 14117247 characters on the first line, probably because your input contains no line separators at all; it is probably not all that helpful to print <em>all</em> those characters:</p>
<pre><code>import json

try:
    json.loads(some_string)
except json.JSONDecodeError as err:
    # grab a reasonable section, say 40 characters.
    start, stop = max(0, err.pos - 20), err.pos + 20
    snippet = err.doc[start, stop]
    if err.pos &lt; 20:
        snippet = '... ' + snippet
    if err.pos + 20 &lt; len(err.doc):
        snippet += ' ...'
    print(err)
    print(snippet)
</code></pre>
<p>In Python 3.4 and earlier, a <code>ValueError</code> exception is raised. You can parse the  <em>message</em> (the <code>exception.args[0]</code> value) for clues, but this requires manual string parsing. See the <a href="https://hg.python.org/cpython/file/3.4/Lib/json/decoder.py#l33" rel="nofollow"><code>errmsg()</code> function</a>; reverse its formatting when parsing.</p>
<p>For this specific case however (where a value is expected), you'll need 3.4 or newer to get a line and column indicator; before 3.4 the best the module could do was give you the unhelpful message <a href="https://hg.python.org/cpython/file/2.7/Lib/json/decoder.py#l382" rel="nofollow"><em>No JSON object could be decoded</em></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Most likely, no. At least in Python 2.7. <code>loads</code> does not provide any means for customizing how it behaves on errors. </p>
<pre><code>try:
    value, end = scan_once(s, end)
except StopIteration:
    raise ValueError(errmsg("Expecting object", s, end))
</code></pre>
<p>But you can parse the location from the error message to read the line from your input. The error format can be either <code>{0}: line {1} column {2} (char {3})</code> or <code>{0}: line {1} column {2} - line {3} column {4} (char {5} - {6})</code>.</p>
</div>
<span class="comment-copy">That is a <b>very long line</b>. Of course you can print this; you have the coordinates in the exception message; parse it, then split out the string. But it sounds as if your string contains a trailing comma.</span>
<span class="comment-copy">ah! ok, can you explain to me what <code>line 1 column 14117248</code> mean?</span>
<span class="comment-copy">And, what is a wrong with a ` trailing comma`? Thanks</span>
<span class="comment-copy">Your input string contains lines (delimited by <code>\n</code>). The first line has at least 14117247 characters. The parser expected the start of another object after that, at column 14117248.</span>
<span class="comment-copy">A common way for that error to occur for there to be a comma before that position, but not the start of a new object after it. <code>[0,]</code> would give you that error at column 4 for example, because <code>]</code> is not a new object, but the end of the list instead.</span>
<span class="comment-copy">The exception shows that they are using the Python 3 <code>json</code> module, which <i>does</i> carry this context.</span>
<span class="comment-copy">@MartijnPieters, it's not obvious for me. The exception class is not given, but the message is nearly the same.</span>
<span class="comment-copy">The Python 2 error message is simply <i>No JSON object could be decoded</i>. Compare that to the error given in the OP, and you'll see that that message obviously gives more detailed information.</span>
<span class="comment-copy">You don't need to read the message from the input. Just catch the exception and parse <code>exception.args[0]</code>; but you'll need Python 3.4 for that message to contain anything useful. Or upgrade to 3.5 and pull the information from the extra attributes.</span>
<span class="comment-copy">That is not true for 2.7. Take a look at the source code here: <a href="https://github.com/python/cpython/blob/2.7/Lib/json/decoder.py" rel="nofollow noreferrer">github.com/python/cpython/blob/2.7/Lib/json/decoder.py</a></span>
