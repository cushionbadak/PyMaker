<div class="post-text" itemprop="text">
<p>Suppose I have a empty string, it will be split:</p>
<pre><code>&gt;&gt;&gt;''.split(',')
['']
</code></pre>
<p>The result of the split is <code>['']</code>. I use <code>bool</code> to check it whether or not it's empty. It will return <code>True</code>.</p>
<pre><code>&gt;&gt;&gt;bool([''])
True
</code></pre>
<p>How do I check the split result is empty?</p>
</div>
<div class="post-text" itemprop="text">
<p>With <code>bool([''])</code> you're checking if the list <code>['']</code> has any contents, <em>which it does</em>, the contents just happen to be the empty string <code>''</code>. </p>
<p>If you want to check whether <em>all</em> the elements in the list aren't 'empty' (so if the list contains the string <code>''</code> it will return <code>False</code>) you can use the built-in function <strong><a href="https://docs.python.org/2.7/library/functions.html#all" rel="nofollow noreferrer"><code>all()</code></a></strong>:</p>
<pre><code>all(v for v in l)
</code></pre>
<p>This takes every element <code>v</code> in list <code>l</code> and checks if it has a <code>True</code> value; if <strong>all</strong> elements do it returns <code>True</code> if at least one doesn't it returns <code>False</code>. As an example:</p>
<pre><code>l = ''.split(',')

all(v for v in l)
Out[75]: False
</code></pre>
<p>You can substitute this with <strong><a href="https://docs.python.org/2.7/library/functions.html#any" rel="nofollow noreferrer"><code>any()</code></a></strong> to perform a partial check and  see if <em>any of the items</em> in the list <code>l</code> have a value of <code>True</code>.</p>
<p>A more comprehensive example* with both uses:</p>
<pre><code>l = [1, 2, 3, '']

all(l)
# '' doesn't have a True value
Out[82]: False

# 1, 2, 3 have a True value
any(l)
Out[83]: True
</code></pre>
<hr/>
<p>*As <em><a href="https://stackoverflow.com/users/364696/shadowranger">@ShadowRanger</a></em> pointed out in the comments, the same exact thing can be done with <code>all(l)</code> or <code>any(l)</code> since they both just accept an iterable in the end. </p>
</div>
<div class="post-text" itemprop="text">
<p>If emptiness is the important result, probably best to test the original string first:</p>
<pre><code>x = ''
if x:
    # Original string was non-empty, split it
    splitx = x.split(',')
    if any(splitx):
        # There was at least one character in the original string that wasn't a comma
</code></pre>
<p>The first test rules out empty initial strings, the second one using <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow"><code>any</code></a> rules out strings that were nothing but the split character, and therefore returned a whole bunch of empty strings, but no non-empty strings. As long as you got one non-empty string, it passes.</p>
<p>Note: In case you're trying to parse CSV files, don't use <code>.split(',')</code>; there is a <a href="https://docs.python.org/3/library/csv.html" rel="nofollow"><code>csv</code> module</a> that handles this correctly (including escapes, quoting, etc.), and should <em>ALWAYS</em> be used for parsing CSV, never roll your own parser. Added bonus: <code>csv</code> will convert <code>''</code> inputs to <code>[]</code> rows, which you can test for truthiness directly, not to <code>['']</code> like <code>str.split</code> does. Example:</p>
<pre><code>&gt;&gt;&gt; import csv, io

&gt;&gt;&gt; f = io.StringIO('\n\na,b,c\n1,2,3\n\n')
&gt;&gt;&gt; [row for row in csv.reader(f) if row]  # Stripping easily
[['a', 'b', 'c'], ['1', '2', '3']]
</code></pre>
<p>vs. the same approach with <code>str.split(',')</code> which still doesn't handle quoting, escaping, etc.:</p>
<pre><code>&gt;&gt;&gt; f = io.StringIO('\n\na,b,c\n1,2,3\n\n')
&gt;&gt;&gt; stripped = (line.rstrip('\r\n') for line in f)  # Must manually strip line endings first
&gt;&gt;&gt; [line.split(',') for line in stripped if line]
[['a', 'b', 'c'], ['1', '2', '3']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your case it truly isnt empty</p>
<p>If you want to check if the element within that list is empty you can do:</p>
<pre><code>string = ''.split(',')

if not string[0]:
    print "empty"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The split result isn't empty. The sense of "emptiness" you're looking for is best checked by looking at the original, unsplit string:</p>
<pre><code>if not original_string:
    # It's empty.
</code></pre>
<p>But if you really want to look at the split result for this:</p>
<pre><code>if len(split_result) == 1 and not split_result[0]:
    # It's "empty".
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to the <a href="https://docs.python.org/2.7/library/stdtypes.html?highlight=split#str.split" rel="nofollow"><code>str.split()</code> documentation,</a> <em>"Splitting an empty string with a specified separator returns ['']."</em></p>
<p>To check for this case, when you are using an explicit delimiter (like your use of <code>split(",")</code>), do something like this:</p>
<pre><code>l = s.split(",")

if len(l) == 1 and l[0] == '':
    print("string was empty")
</code></pre>
</div>
<span class="comment-copy">I see. it's not a empty list. I hope I would exclude the situation. I am thinking how to do.</span>
<span class="comment-copy">Ultimately, what are you trying to do? There's no point in trying to split an empty list in the first place, you could gate this code with an if-statement or if-expression in a list comprehension: <code>if s1: s2 = s1.split(',') ...</code></span>
<span class="comment-copy">Simplification: Change <code>all(v for v in l)</code> to just <code>all(l)</code>; no need to make a special generator expression when <code>all</code> can process the <code>list</code> directly.</span>
<span class="comment-copy">Also, you inverted <code>all</code> and <code>any</code>; <code>all</code> tells you if all the results were non-empty, not if it has non-empty elements,and <code>any</code> says if it has non-empty elements (it could still have empty, but if <code>any</code> returns <code>True</code>, at least one was non-empty). <code>any</code> is probably more useful here.</span>
<span class="comment-copy">It does not work if the elements contains value <code>False</code>, sample <code>all([1, 2, 3, False])</code>, False returns as result.</span>
<span class="comment-copy">@Ivan that does what it is supposed to do. Since they <i>all</i> don't have a Truthy value it returns <code>False</code>.</span>
