<div class="post-text" itemprop="text">
<p>Say, I have a dictionary <code>D</code>: </p>
<pre><code>D = {'A': {1, 2, 3}, 'B': {2, 4, 5}, 'C': {1, 2, 7}}
</code></pre>
<p>Now I want to have all common items from <code>D</code>'s values, which would be 2.
I tried to use <code>set.intersection</code> but it did not work out.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply, use <a href="https://docs.python.org/3/library/stdtypes.html?highlight=set#set.intersection" rel="nofollow"><code>intersection</code></a> method of <code>set</code>:</p>
<pre><code>&gt;&gt;&gt; set.intersection(*D.values())
{2}
</code></pre>
<p><code>D.values()</code> will return a list of your dictionary values which are already sets, then <code>*D.values()</code> will unpack this list and pass it to <code>intersection</code> method of <code>set</code> class</p>
</div>
<div class="post-text" itemprop="text">
<p>For the sake of variety, you could also use <code>reduce()</code>:</p>
<pre><code>&gt;&gt;&gt; D = {'A': {1, 2, 3}, 'B': {2 ,4, 5}, 'C': {1, 2, 7}}
&gt;&gt;&gt; reduce(lambda x, y: x &amp; y, D.values())  # or use operator.and_ instead of lambda
{2}
</code></pre>
<p><a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow"><code>reduce()</code></a> is a built-in function in Python 2.x, but needs to be imported from the <a href="https://docs.python.org/3.5/library/functools.html" rel="nofollow"><code>functools</code></a> module in Python 3.x.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are only looking for common values in each dictionary and not looking for a value that is in each dict then the following code will work! Not saying that this is the fastest or the best approach, but it works!
Returns a list of all duplicate values across the embedded dicts!</p>
<pre><code>def findCommon(data):

    flipped = {}
    out = []

    for i in data:
        for value in data[i]:
            if value not in flipped:
                flipped[value] = [i]
            else:
                flipped[value].append(i)
    for i in flipped:
        if len(flipped[i]) &gt; 1:
            out.append(i)
    return out
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you go with <code>reduce</code> the most efficient way is to use <code>operator.and_</code></p>
<pre><code>from functools import reduce
from operator import and_

D = {'A': {1, 2, 3}, 'B': {2, 4, 5}, 'C': {1, 2, 7}}

print(reduce(and_, D.values()))
</code></pre>
<p>But <code>set.intersection</code> will be hard to beat:</p>
<pre><code>In [89]: from functools import reduce

In [90]: from operator import and_

In [91]: timeit reduce(lambda x, y: x &amp; y, D.values())
1000 loops, best of 3: 221 µs per loop

In [92]: timeit reduce(and_,D. values())
10000 loops, best of 3: 170 µs per loop

In [93]: timeit set.intersection(*D.values())
10000 loops, best of 3: 155 µs per loop
</code></pre>
</div>
<span class="comment-copy">Is <code>reduce</code> available in Python3+ ?</span>
<span class="comment-copy">@Iron Fist: in Python 3.x you need to say <code>from functools import reduce</code>.</span>
<span class="comment-copy">If you want to work through it yourself!</span>
