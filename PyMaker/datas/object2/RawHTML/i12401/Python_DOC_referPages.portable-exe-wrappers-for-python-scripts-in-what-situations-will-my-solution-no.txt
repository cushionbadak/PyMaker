<div class="post-text" itemprop="text">
<p>I have these wrappers for Python 2 and 3 scripts:</p>
<p>for Unix-like systems:</p>
<pre><code>#!/bin/sh
SCRIPTDIR="$(cd "$(dirname "$0")" &amp;&amp; pwd)"
/usr/bin/env python2.7 "$SCRIPTDIR/program27.py" "$@"

#!/bin/sh
SCRIPTDIR="$(cd "$(dirname "$0")" &amp;&amp; pwd)"
/usr/bin/env python3 "$SCRIPTDIR/program34.py" "$@"
</code></pre>
<p>for Windows:</p>
<pre><code>@py -2 "%~dp0\program27.py" %*

@py -3 "%~dp0\program34.py" %*
</code></pre>
<p>The scripts are strictly command-line tools, and they are always placed in the same directory as the wrappers.  There are also version checks inside the scripts.  I'm basically trying to make sure they are invoked using the correct Python, and that they run on as many systems and Python distributions as possible.</p>
<p>The wrappers above are the only ones I've found to work with the standard Python distribution on Windows, Linux and Cygwin, and Darwin (and presumably BSD).</p>
<p>I'm a beginner with these things, and I understand there's no perfect solution, so I'm wondering if anyone can point out in what situations the above won't work, and help me improve on it.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Please see <a href="https://www.python.org/dev/peps/pep-0397/" rel="nofollow">PEP 397</a> for information on how to handle executing code in the correct Python interpreter on Windows. On the other hand, <a href="https://www.python.org/dev/peps/pep-0394/" rel="nofollow">PEP 394</a> covers a similar topic when running on Unix-like platforms. The recent changes were made in <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-397-python-launcher-for-windows" rel="nofollow">Python 3.3</a> to allow defined behavior for where code should be executed.</p>
<blockquote>
<p>PEP 397: Python Launcher for Windows</p>
<p>The Python 3.3 Windows installer
  now includes a py launcher application that can be used to launch
  Python applications in a version independent fashion.</p>
<p>This launcher is invoked implicitly when double-clicking *.py files.
  If only a single Python version is installed on the system, that
  version will be used to run the file. If multiple versions are
  installed, the most recent version is used by default, but this can be
  overridden by including a Unix-style “shebang line” in the Python
  script.</p>
<p>The launcher can also be used explicitly from the command line as the
  py application. Running py follows the same version selection rules as
  implicitly launching scripts, but a more specific version can be
  selected by passing appropriate arguments (such as -3 to request
  Python 3 when Python 2 is also installed, or -2.6 to specifclly
  request an earlier Python version when a more recent version is
  installed).</p>
<p>In addition to the launcher, the Windows installer now includes an
  option to add the newly installed Python to the system PATH.
  (Contributed by Brian Curtin in issue 3561.)</p>
</blockquote>
<p>In short, preface your code with the following lines:</p>
<ul>
<li><code>#! /usr/bin/env python2</code> for Python 2.x</li>
<li><code>#! /usr/bin/env python3</code> for Python 3.x</li>
</ul>
</div>
<span class="comment-copy">Thanks. Do you have any comments on the wrappers? I'm still interested in the best work-around when systems are either missing <code>python2</code>, or when <code>python</code> refers to Python 3.</span>
