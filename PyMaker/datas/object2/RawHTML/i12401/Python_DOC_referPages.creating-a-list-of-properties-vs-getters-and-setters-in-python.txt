<div class="post-text" itemprop="text">
<pre><code>class OurAtt():
    def __init__(self):
        pass

class OurClass:

    def __init__(self):
        self.__OurAtt = OurAtt()

    @property
    def OurAtt(self):
        return self.__OurAtt

    @OurAtt.setter
    def OurAtt(self, val):
        if val &lt; 0:
            self.__OurAtt = 0
        elif val &gt; 1000:
            self.__OurAtt = 1000
        else:
            self.__OurAtt = val


x = OurClass()
x.OurAtt.Var1 = 1
print x.OurAtt.Var1
</code></pre>
<p>Questions:</p>
<ol>
<li><p>How to create a list of 100 variables like x.OurAtt.Var1, x.OurAtt.Var2 .. x.OurAtt.Var100 and assign them initial value 1,2 ....100.</p></li>
<li><p>Is it possible do to something like this x.OurAtt.Var[1..100] = [1..100]? Basically need List with properties.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Don't create individual <code>varX</code> properties, no. You can create a new object with <a href="https://docs.python.org/2/reference/datamodel.html#object.__getitem__" rel="nofollow"><code>__getitem__</code></a> and <a href="https://docs.python.org/2/reference/datamodel.html#object.__setitem__" rel="nofollow"><code>__setitem__</code></a> methods instead, and use <code>x.your_attr[X]</code> subscription notation instead:</p>
<pre><code>class ListLike(object):
    def __init__(self):
        self._values = list(range(101))

    def __len__(self):
        return len(self._values)

    def __getitem__(self, index):
        return self._values[index]

    def __setitem__(self, index, value):
        if not 0 &lt;= index &lt; len(self):
            raise IndexError(index)
        self._values[index] = max(0, min(1000, val))
</code></pre>
<p>then use this as your attribute:</p>
<pre><code>class Foo(object):
    def __init__(self):
        self.bar = ListLike()
</code></pre>
</div>
<span class="comment-copy">You could achieve that with the built-in method <code>exec</code>: <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#exec</a> I would however advise against it. What is exactly your user story? Eventually you could create a dictionary, so instead of variables you would have keys and values.</span>
<span class="comment-copy">@cezar Thanks a lot. Conditon is to use only scalor or list or tuple not a dictionary. Could you please help on this?</span>
<span class="comment-copy">You can do something like: <code>for i in range(1, 101): exec('OurAtt.Var{0} = {0}'.format(i))</code>. This will give you variables from OurAtt.Var1 to OurAtt.Var100 with initial value of 1 to 100. I still don't think it is a good idea.</span>
<span class="comment-copy">@Martijin, Thanks a lot. Why can't use properties? Could you please let me know pro's and con's of using?</span>
<span class="comment-copy">@Sana: you can use properties, but creating 100 properties with numbered variables limits you greatly in what you can do with them. Try to access all 100 and do a calculation on them, for example. Using a list-like object is just far more flexible here.</span>
