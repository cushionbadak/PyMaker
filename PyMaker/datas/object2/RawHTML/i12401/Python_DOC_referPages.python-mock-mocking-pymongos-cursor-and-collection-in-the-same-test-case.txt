<div class="post-text" itemprop="text">
<p>I want to make a mock test for some mongo queries, but I had a problem when I tried to mock two diferent mongo objects (Cursor and Collection) in the same scope.
I can't put the original code here, but I made a generic with the same problem.</p>
<p>This is the function I want to test (using find and distinct):</p>
<pre><code>def get_some_info(date1, date2):
    data = collection.find({"timestamp": {"$lt": date1, "$gt": date2})
    id_list = data.distinct("id")

    for id in id_list :
       collection.find({"id" : id})
</code></pre>
<p>This is the test code:</p>
<pre><code>@mock.patch.object(Collection, "find")
@mock.patch.object(Cursor, "distinct")
def test_get_some_info(self, mock_distinct, mock_find):
    date1 = datetime.datetime()
    date2 = datetime.datetime()
    mock_distinct.return_value = ["id1", "id2"]
    find_parameters1 = {"timestamp": {"$lt": date1, "$gt": date2}
    find_parameters2 = {"id" : "id1"}
    self.my_class.get_some_info(date1, date2)
    mock_find.assert_called_with(find_parameters1)
    mock_find.assert_any_call(find_parameters2)
</code></pre>
<p>When I run the test, I have this error message:</p>
<blockquote>
<p>'%s call not found' % expected_string AssertionError: find({"id" :
  "id1"}) call not found</p>
</blockquote>
<p>So I printed the value of id_list:</p>
<pre><code>def get_some_info(date1, date2):
    data = collection.find({"timestamp": {"$lt": date1, "$gt": date2})
    id_list = data.distinct("id")
    print id_list

    for id in id_list :
        collection.find({"id" : id})
</code></pre>
<p>This is the value of id_list:</p>
<blockquote>
<p>MagicMock name='find().distinct()' id='139719585597776'</p>
</blockquote>
<p>But the expected is: ["id1", "id2"]</p>
<p>When I comment the Cursor's mock, the value of id_list is the same as before:</p>
<pre><code>#@mock.patch.object(collection, "distinct")
@mock.patch.object(Cursor, "find")
def test_get_some_info(self, mock_find):
    date1 = datetime.datetime()
    date2 = datetime.datetime()
    mock_distinct.return_value = ["id1", "id2"]
    find_parameters1 = {"timestamp": {"$lt": date1, "$gt": date2}
    find_parameters2 = {"id" : "id1"}
    self.my_class.get_some_info(date1, date2)
    mock_find.assert_called_with(find_parameters1)
    mock_find.assert_any_call(find_parameters2)

&lt;MagicMock name='find().distinct()' id='140089689306448'&gt;
</code></pre>
<p>I think the code is always catching the "distinct" value from Collection, not from Cursor.
Does anybody had the same problem?</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>mocks objects in test arguments should be in the reverse order (take a look to <a href="https://docs.python.org/3/library/unittest.mock.html#nesting-patch-decorators" rel="nofollow">Nesting Patch Decorators</a> for details)</li>
<li>What you called <code>mock_collection</code> should be <code>mock_find</code></li>
</ol>
<p>Your test code should be this:</p>
<pre><code>@mock.patch.object(Cursor, "distinct")
@mock.patch.object(Collection, "find")
def test_get_some_info(self, mock_find, mock_distinct):
    date1 = datetime.datetime()
    date2 = datetime.datetime()
    mock_distinct.return_value = ["id1", "id2"]
    find_parameters1 = {"timestamp": {"$lt": date1, "$gt": date2}
    find_parameters2 = {"id" : "id1"}
    self.my_class.get_some_info(date1, date2)
    mock_find.assert_called_with(find_parameters1)
    mock_find.assert_any_call(find_parameters2)
</code></pre>
</div>
<span class="comment-copy">Thank you, for your answer, it was my mistake. In my original code, the decorators' order are correct. I changed the parameters now</span>
<span class="comment-copy">@DiegoPereira please explain what <code>mock_connection</code> is in your example</span>
<span class="comment-copy">Take a look to your log: <code>connection</code> is a mock and you call <code>find</code>'s mock method</span>
<span class="comment-copy">It was my mistake again, mock_collection is the mock_find in the original source code. I fixed it. I think the problem is more related to "distinct" is both method of Cursor and Collection. Thank you again for the answer.</span>
<span class="comment-copy">Your log say <code>data.distinct("id")</code> is a mock where name is <code>find().distinct()</code> that means <code>data</code> is <code>find()</code>'s return value on a mock -&gt; in <code>get_some_info()</code> <code>collection</code> <b>IS</b> a mock. Now in your posted code I cannot understand what <code>collection</code> is and why it is a mock. That is why we should avoid to post toy code in our questions.</span>
