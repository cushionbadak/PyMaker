<div class="post-text" itemprop="text">
<p>I am trying to run shell code from a python file to submit another python file to a computing cluster. The shell code is as follows:</p>
<pre><code>#BSUB -J Proc[1]
#BSUB -e ~/logs/proc.%I.%J.err
#BSUB -o ~/logs/proc.%I.%J.out
#BSUB -R "span[hosts=1]"
#BSUB -n 1
python main.py
</code></pre>
<p>But when I run it from python like the following I can't get it to work:</p>
<pre><code>from os import system
system('bsub -n 1 &lt; #BSUB -J Proc[1];#BSUB -e ~/logs/proc.%I.%J.err;#BSUB -o ~/logs/proc.%I.%J.out;#BSUB -R "span[hosts=1]";#BSUB -n 1;python main.py')
</code></pre>
<p>Is there something I'm doing wrong here?</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly, all the <code>#BSUB</code> stuff is text that should be fed to the <code>bsub</code> command as input; <code>bsub</code> is run locally, then runs those commands for you on the compute node.</p>
<p>In that case, you can't just do:</p>
<pre><code>bsub -n 1 &lt; #BSUB -J Proc[1];#BSUB -e ~/logs/proc.%I.%J.err;#BSUB -o ~/logs/proc.%I.%J.out;#BSUB -R "span[hosts=1]";#BSUB -n 1;python main.py
</code></pre>
<p>That's interpreted by the shell as "run <code>bsub -n 1</code> and read from a file named OH CRAP A COMMENT STARTED AND NOW WE DON'T HAVE A FILE TO READ!"</p>
<p>You could fix this with MOAR HACKERY (using <code>echo</code> or here strings taking further unnecessary dependencies on shell execution). But if you want to feed <code>stdin</code> input, the best solution is to use a more powerful tool for the task, <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow">the <code>subprocess</code> module</a>:</p>
<pre><code># Open a process (no shell wrapper) that we can feed stdin to
proc = subprocess.Popen(['bsub', '-n', '1'], stdin=subprocess.PIPE)

# Feed the command series you needed to stdin, then wait for process to complete
# Per Michael Closson, can't use semi-colons, bsub requires newlines
proc.communicate(b'''#BSUB -J Proc[1]
#BSUB -e ~/logs/proc.%I.%J.err
#BSUB -o ~/logs/proc.%I.%J.out
#BSUB -R "span[hosts=1]"
#BSUB -n 1
python main.py
''')

# Assuming the exit code is meaningful, check it here
if proc.returncode != 0:
    # Handle a failed process launch here
</code></pre>
<p>This avoids a shell launch entirely (removing the issue with needing to deal with comment characters at all, along with all the other issues with handling shell metacharacters), and is significantly more explicit about what is being run locally (<code>bsub -n 1</code>) and what is commands being run in the <code>bsub</code> session (the <code>stdin</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>#BSUB</code> directives are parsed by the <code>bsub</code> binary, which doesn't support <code>;</code> as a delimiter.  You need to use newlines.  This worked for me.</p>
<pre><code>#!/usr/bin/python
import subprocess;

# Open a process (no shell wrapper) that we can feed stdin to
proc = subprocess.Popen(['bsub', '-n', '1'], stdin=subprocess.PIPE)

# Feed the command series you needed to stdin, then wait for process to complete
input="""#!/bin/sh
#BSUB -J mysleep
sleep 101
"""
proc.communicate(input);
</code></pre>
<p>*** So obviously I got the python code from @ShadowRanger.  +1 his answer.  I would have posted this as a comment to his answer if SO supported python code in a comment.</p>
</div>
<span class="comment-copy">You have a command named <code>#BSUB</code>? Shouldn't that be <code>BSUB</code>? Otherwise your command is only a shell comment.</span>
<span class="comment-copy">Yeah they are commented like that so they are only processed by the compute node. As is, the shell code when in a separate script works fine. But then does not run properly when used in python.</span>
<span class="comment-copy">In a computational cluster i was working, the format was quite similar, but we need to run the script using an external command, and not by running the script right away. Maybe you should store the text in a script and execute it using <code>system('command script_name')</code></span>
<span class="comment-copy">Have you tried replacing every occurence of <code>;</code> with <code>\n</code>?</span>
<span class="comment-copy">Just did, and doesn't help.</span>
<span class="comment-copy">I incorporated the newlines into my answer (I've never used <code>bsub</code>, so I assumed the semicolons were legit). Minor note: To make sure it works with both Py2 and Py3, the input should be prefixed with <code>b</code> to make it explicitly <code>bytes</code> on Py3 (on Py2, <code>b</code> does nothing but document the intent to use binary data, which aids in converting to 2to3 later, but it doesn't hurt either, so the code runs on both Py2 and Py3 without modification).</span>
