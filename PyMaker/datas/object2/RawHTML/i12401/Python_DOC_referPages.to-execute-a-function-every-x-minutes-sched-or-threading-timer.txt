<div class="post-text" itemprop="text">
<p>I need to program the execution of a give method every x minutes.</p>
<p>I found two ways to do it: the first is using the <code>sched</code> module, and the second is using <code>Threading.Timer</code>.</p>
<p><strong>First method</strong>:</p>
<pre><code>import sched, time
s = sched.scheduler(time.time, time.sleep)
def do_something(sc): 
    print "Doing stuff..."
    # do your stuff
    sc.enter(60, 1, do_something, (sc,))

s.enter(60, 1, do_something, (s,))
s.run()
</code></pre>
<p><strong>The second</strong>:</p>
<pre><code>import threading

def do_something(sc): 
    print "Doing stuff..."
    # do your stuff
   t = threading.Timer(0.5,do_something).start()

do_something(sc)
</code></pre>
<p>What's the difference and if there is one better than the other, which one?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not safe in Python 2 - Python 3.2:</p>
<p>From <a href="https://docs.python.org/2/library/sched.html" rel="nofollow noreferrer">the Python 2.7 <strong><code>sched</code></strong> documentation</a>:</p>
<blockquote>
<p>In multi-threaded environments, the <a href="https://docs.python.org/2/library/sched.html#sched.scheduler" rel="nofollow noreferrer"><code>scheduler</code></a> class has limitations with respect to thread-safety, inability to insert a new task before the one currently pending in a running scheduler, and holding up the main thread until the event queue is empty. Instead, the preferred approach is to use the <a href="https://docs.python.org/2/library/threading.html#threading.Timer" rel="nofollow noreferrer"><code>threading.Timer</code></a> class instead.</p>
</blockquote>
<p>From <a href="https://docs.python.org/3/library/sched.html" rel="nofollow noreferrer">the latest Python 3 <strong><code>sched</code></strong> documentation</a></p>
<blockquote>
<p><em>Changed in version 3.3:</em> <a href="https://docs.python.org/3/library/sched.html#sched.scheduler" rel="nofollow noreferrer"><code>scheduler</code></a> class can be safely used in multi-threaded environments.</p>
</blockquote>
</div>
<span class="comment-copy">I think this can also be done by <code>asyncio</code>, but I'm not good (yet) with that module.</span>
<span class="comment-copy">Python 3.3 implementation of <code>sched</code> claims to be thread-safe in a multiprocessing environment. Perhaps edit you should edit your answer accordingly?</span>
