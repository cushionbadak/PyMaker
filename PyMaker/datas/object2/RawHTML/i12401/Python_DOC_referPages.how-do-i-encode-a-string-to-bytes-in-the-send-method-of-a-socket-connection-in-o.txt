<div class="post-text" itemprop="text">
<p>In Python 3.5, using sockets, I have:</p>
<pre><code>message = 'HTTP/1.1 200 OK\nContent-Type: text/html\n\n'
s.send(message.encode())
</code></pre>
<p>How can I do that in one line?  I ask because I had:</p>
<pre><code>s.send('HTTP/1.1 200 OK\nContent-Type: text/html\n\n')
</code></pre>
<p>but in Python 3.5 bytes are required, not a string, so this gives the error:</p>
<pre><code>builtins.TypeError: a bytes-like object is required, not 'str'
</code></pre>
<p>Should I not be using send?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>str</code>, the type of <em>text</em>, is not the same as <code>bytes</code>, the type of <em>sequences of eight-bit words</em>. To concisely convert from one to the other, you could inline the call to <code>encode</code> (just as you could with any function call)...</p>
<pre><code>s.send('HTTP/1.1 200 OK\nContent-Type: text/html\n\n'.encode())
</code></pre>
<p>.. bearing in mind that it's often a good idea to specify the encoding you want to use...</p>
<pre><code>s.send('HTTP/1.1 200 OK\nContent-Type: text/html\n\n'.encode('ascii'))
</code></pre>
<p>... but it's simpler to use a <a href="https://www.python.org/dev/peps/pep-3112/" rel="nofollow">bytes literal</a>. Prefix your string with a <code>b</code>:</p>
<pre><code>s.send(b'HTTP/1.1 200 OK\nContent-Type: text/html\n\n')
</code></pre>
<p>But you know what's even simpler? Letting someone else do HTTP for you. Have you thought about using a server such as <a href="http://flask.pocoo.org/" rel="nofollow">Flask</a>, or even <a href="https://docs.python.org/3/library/http.server.html" rel="nofollow">the standard library</a>, to build your app?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use this:</p>
<pre><code>s.send(b'your text')
</code></pre>
<p>Adding <code>b</code> in front of a string will convert it to <code>bytes</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Putting a <code>b</code> or <code>B</code> before an opening quote will change a <code>str</code> literal to a <code>bytes</code> literal:</p>
<pre><code>s.send(b'HTTP/1.1 200 OK\nContent-Type: text/html\n\n')
</code></pre>
</div>
<span class="comment-copy">You could have combined the string literal with the <code>str.encode()</code> call too, you know: <code>s.send('HTTP/1.1 200 OK\nContent-Type: text/html\n\n'.encode('ascii'))</code>.  Not that you need to, what with <code>b'...'</code> byte literals.</span>
<span class="comment-copy">@MartijnPieters I had tried s.send('mystring').encode('utf-8') so the encode was in the wrong place.</span>
<span class="comment-copy">Because that tries to call <code>.encode()</code> on the <i>return value</i> of <code>s.send()</code>. Look closely at the parentheses; <code>message.encode()</code> is entirely contained <i>inside</i> <code>s.send()</code>. So is my version with <code>s.send('....'.encode('utf8'))</code>.</span>
<span class="comment-copy">Is there a difference between <code>b</code> and <code>B</code>?</span>
<span class="comment-copy">@Holloway: Yes, one usually requires the shift key to type, and the other doesn't.</span>
<span class="comment-copy">well, ask a stupid question I suppose...</span>
<span class="comment-copy">@jwodder bUT WHAT IF i HAVE A BROKEN cAPS lOCK KEY?</span>
