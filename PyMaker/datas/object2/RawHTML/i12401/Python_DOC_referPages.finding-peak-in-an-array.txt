<div class="post-text" itemprop="text">
<p>I'm completely new to Python, thus the question.
I'm trying to solve a standard interview question, which is finding a peak in an array
A peak is defined as a number which is greater than it's left and right neighbor. I'm trying to find the largest such peak.</p>
<p>This is my code</p>
<pre><code>#!/usr/bin/python3

def main():
    arr = [7, 12, 13, 8, 2, 16, 24, 11, 5, 1]
    num = find_peak(arr)
    print(num)

def find_peak(arr):
    return find_peak(arr, 0, len(arr))

def find_peak(arr, start, stop):

    mid = (start + stop)/2

    if(arr[mid] &gt; arr[mid-1] and arr[mid] &gt; arr[mid+1]):
        return arr[mid]
    elif (arr[mid] &lt; arr[mid -1]):
        find_peak(arr, 0, mid-1)
    elif (arr[mid] &lt; arr[mid+1]):
        find_peak(arr, mid+1, stop)

if __name__ == '__main__':
    main()
</code></pre>
<p>This is the error that I'm getting </p>
<pre><code>Traceback (most recent call last):
  File "peak.py", line 23, in &lt;module&gt;
    main()
  File "peak.py", line 5, in main
    num = find_peak(arr)
TypeError: find_peak() missing 2 required positional arguments: 'start' and 'stop'
</code></pre>
<p>Any help appreciated</p>
</div>
<div class="post-text" itemprop="text">
<p>You've got two function definitions for <code>find_peak</code>, one with one argument <code>arr</code> and the other with three arguments <code>arr</code>, <code>start</code>, and <code>stop</code>. The second one overwrites the first one.</p>
<p>Use two different names for two different functions</p>
</div>
<div class="post-text" itemprop="text">
<p>You are calling this:</p>
<pre><code>num = find_peak(arr)
</code></pre>
<p>But <code>find_peak</code> takes 3 arguments, as the error states. You have only supplied one.</p>
<p>Unlike C++ or other languages, you cannot have a function with the same name that takes different arguments (also known as function overloading). You can, however, define optional arguments in the function declaration.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def main():
    arr = [7, 12, 13, 8, 2, 16, 24, 11, 5, 1]
    num = find_peak(arr)
    print(num)

def find_peak(arr):
    return find_peaks(arr, 0, len(arr))

def find_peaks(arr, start, stop):

    mid = (start + stop)/2

    if(arr[mid] &gt; arr[mid-1] and arr[mid] &gt; arr[mid+1]):
        return arr[mid]
    elif (arr[mid] &lt; arr[mid -1]):
        find_peaks(arr, 0, mid-1)
    elif (arr[mid] &lt; arr[mid+1]):
        find_peaks(arr, mid+1, stop)

    if __name__ == '__main__':
       main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Overloading is not allowed in Python, my suggestion is to use default values instead of two functions</p>
<pre><code>def find_peak(arr, start = 0, stop = 0):
    if stop == 0:
        stop = len(arr)

    mid = (start + stop)/2

    if(arr[mid] &gt; arr[mid-1] and arr[mid] &gt; arr[mid+1]):
        return arr[mid]
    elif (arr[mid] &lt; arr[mid -1]):
        find_peak(arr, 0, mid-1)
    elif (arr[mid] &lt; arr[mid+1]):
        find_peak(arr, mid+1, stop)
</code></pre>
</div>
<span class="comment-copy">Don't understand the down vote. If everyone knew everything, what's the point of stackoverflow</span>
<span class="comment-copy">Does that mean I can't do function overloading in python</span>
<span class="comment-copy">That's what it means.</span>
<span class="comment-copy">Once you've changed the function definition, you lose access to the original, which is garbage collected</span>
<span class="comment-copy">So private helper functions in python need to have names separate from the caller functions, right?</span>
<span class="comment-copy">@Zeus: If you want to overload a function in Python based on the number of arguments, the usual way would be to define optional arguments. <code>*args</code> arguments also work. If you want to overload a function in Python based on argument types, that's mostly unsupported due to the dynamic nature of python, though <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer"><code>functools.singledispatch</code></a> can get you some of that functionality.</span>
<span class="comment-copy">Well there's a find_peak with one argument also.</span>
