<div class="post-text" itemprop="text">
<p>I have an area codes file I put in a tuple</p>
<pre><code>for line1 in area_codes_file.readlines():
    if area_code_extract.search(line1):
        area_codes.append(area_code_extract.search(line1).group())
area_codes = tuple(area_codes)
</code></pre>
<p>and a file I read into Python full of phone numbers.
If a phone number starts with one of the area codes in the tuple, I need to do to things:
1 is to keep the number
2 is to know which area code did it match, as need to put area codes in brackets.</p>
<p>So far, I was only able to do 1:</p>
<pre><code>for line in txt.readlines():
is_number = phonenumbers.parse(line,"GB")
if phonenumbers.is_valid_number(is_number):
    if line.startswith(area_codes):
        print (line)
</code></pre>
<p>How do I do the second part?</p>
</div>
<div class="post-text" itemprop="text">
<p>The simple (if not necessarily highest performance) approach is to check each prefix individually, and keep the first match:</p>
<pre><code>for line in txt:
    is_number = phonenumbers.parse(line,"GB")
    if phonenumbers.is_valid_number(is_number):
        if line.startswith(area_codes):
            print(line, next(filter(line.startswith, area_codes)))
</code></pre>
<p>Since we know <code>filter(line.startswith, area_codes)</code> will get exactly one hit, we just pull the hit using <code>next</code>.</p>
<p>Note: On Python 2, you should start the file with <code>from future_builtins import filter</code> to get the generator based <code>filter</code> (which will also save work by stopping the search when you get a hit). Python 3's <code>filter</code> already behaves like this.</p>
<p>For potentially higher performance, the way to both test all prefixes at once and figure out which value hit is to use <a href="https://docs.python.org/3/library/re.html" rel="nofollow">regular expressions</a>:</p>
<pre><code>import re

# Function that will match any of the given prefixes returning a match obj on hit
area_code_matcher = re.compile(r'|'.join(map(re.escape, area_codes))).match
for line in txt:
    is_number = phonenumbers.parse(line,"GB")
    if phonenumbers.is_valid_number(is_number):
        # Returns None on miss, match object on hit
        m = area_code_matcher(line)
        if m is not None:
            # Whatever matched is in the 0th grouping
            print(line, m.group())
</code></pre>
<p>Lastly, one final approach you can use if the area codes are of fixed length. Rather than using <code>startswith</code>, you can slice directly; you know the hit because you sliced it off yourself:</p>
<pre><code># If there are a lot of area codes, using a set/frozenset will allow much faster lookup
area_codes_set = frozenset(area_codes)
for line in txt:
    is_number = phonenumbers.parse(line,"GB")
    if phonenumbers.is_valid_number(is_number):
        # Assuming lines that match always start with ###
        if line[:3] in area_codes_set:
            print(line, line[:3])
</code></pre>
</div>
<span class="comment-copy">Side-note: You almost never want to use <code>fileobj.readlines()</code>; it slurps the whole file up front into a <code>list</code>, then iterates the <code>list</code>; file-like objects iterate lazily directly by line, and in cases like this (where most lines are filtered out and not stored) using <code>readlines</code> means storing the whole file in memory at once, when you might only care about a tiny fraction of the contents. Iterating directly means at any given time, you're only storing the current line being processed and the hits so far, not the whole file.</span>
<span class="comment-copy">Oh that's brilliant thanks @ShadowRanger!</span>
<span class="comment-copy">@user2518751: I just added a second, test-and-store in one solution; it's likely to be faster, at the expense of added complexity (regular expressions are always finicky; as a rule you should avoid them if normal <code>str</code> operations work for you particularly).</span>
