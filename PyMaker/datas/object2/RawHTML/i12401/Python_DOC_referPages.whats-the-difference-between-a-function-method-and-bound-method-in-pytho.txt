<div class="post-text" itemprop="text">
<p>I've observed at least 3 types related to functions in Python 3:</p>
<pre><code>&gt;&gt;&gt; class A():
...  def f(): pass
...
&gt;&gt;&gt; A.f
&lt;function A.f at 0x7fcaef304268&gt;
&gt;&gt;&gt; A().f
&lt;bound method A.f of &lt;__main__.A object at 0x7fcaef2fae80  
&gt;&gt;&gt; set.union
&lt;method 'union' of 'set' objects&gt;
</code></pre>
<p>I'm wondering what's the difference between 'function', 'method' and 'bound method'? Is 'method' a type equivalent to 'unbound method' in Python 2?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is 'method' a type equivalent to 'unbound method' in Python 2?</p>
</blockquote>
<p>Kind-a-sort-a. But not really. It is a <code>method_descriptor</code> object defined in C code. It is an unbound method, but not the kind you found in Python 2.</p>
<p>For Python types written C, all 'methods' are really C functions. The <code>&lt;method 'name' of 'type' objects&gt;</code> object you found is a special object you can use to call that function given an instance and further arguments, just like the <code>function</code> object does for custom Python classes. The object is defined in C in the <a href="https://hg.python.org/cpython/file/3.5/Objects/descrobject.c#l493" rel="nofollow"><code>PyMethodDescr_Type</code> structure</a>. It implements the <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow">descriptor protocol</a>, just like functions do.</p>
<p>Python defines several other such descriptor types; if you use <a href="https://docs.python.org/3/reference/datamodel.html#slots" rel="nofollow"><code>__slots__</code></a>, each attribute is a dsescriptor of type <code>member_descriptor</code> (see the <a href="https://hg.python.org/cpython/file/3.5/Objects/descrobject.c#l568" rel="nofollow"><code>PyMemberDescr_Type</code> structure</a>), while <code>classmethod</code>, <code>property</code> and <code>staticmethod</code> are perhaps better known descriptor objects.</p>
<p>In Python 2, bound and unbound methods are really just <em>one</em> type, <code>instancemethod</code> (defined by the <a href="https://hg.python.org/cpython/file/2.7/Objects/classobject.c#l2633" rel="nofollow"><code>PyMethod_Type</code> structure</a>); it'll report as bound if the <code>__self__</code> (<code>im_self</code>) attribute is set. In Python 3 using a function as a descriptor simply doesn't produce method objects without <code>__self__</code> set; instead calling <code>function.__get__()</code> with no instance just returns the function again.</p>
<p>The only reason Python 2 returns unbound methods is to <em>enforce a type check</em>; the first argument must be an instance of the class (or a subclass thereof). This didn't make all that much sense for Python code that supports duck-typing, so in Python 3 the restriction was removed. However, with C code you can't use duck-typing, you still have to restrict the type, and that's why <em>C-types</em> still return a <code>method_descriptor</code> object that enforces this restriction.</p>
</div>
