<div class="post-text" itemprop="text">
<p>I have created an algorithm whose purpose should be of, given two nodes A and B in a BST, it switches the roles (or positions in the tree) of the two by simply moving pointers. In my representation of a BST, I am using a double linked connection (i.e. A.parent == B and (B.left == A) or (B.right == A)). I am not sure if it's completely correct or not. I have divided the algorithm in two situations. </p>
<ol>
<li><p>A and B are directly connected (either A is the parent of B or B the parent of A)</p></li>
<li><p>All the other cases</p></li>
</ol>
<p>For each of the previous cases I have created a nested function. I would like to have your opinion on the first the correctness of the algorithms and if I can somehow then improve it. Here's the code:</p>
<pre><code>def switch(self, x: BSTNode, y: BSTNode, search_first=False):
    if not x:
        raise ValueError("x cannot be None.")
    if not y:
        raise ValueError("y cannot be None.")
    if x == y:
        raise ValueError("x cannot be equal to y")

    if search_first:
        if not self.search(x.key) or not self.search(y.key):
            raise LookupError("x or y not found.")

    def switch_1(p, s):
        """Switches the roles of p and s,
        where p (parent) is the direct parent of s (son)."""
        assert s.parent == p

        if s.is_left_child():
            p.left = s.left
            if s.left:
                s.left.parent = p

            s.left = p

            s.right, p.right = p.right, s.right
            if s.right:
                s.right.parent = s
            if p.right:
                p.right.parent = p
        else:
            p.right = s.right
            if s.right:
                s.right.parent = p

            s.right = p

            s.left, p.left = p.left, s.left
            if s.left:
                s.left.parent = s
            if p.left:
                p.left.parent = p

        if p.parent:
            if p.is_left_child():
                p.parent.left = s 
            else:
                p.parent.right = s
        else:  # p is the root
            self.root = s

        s.parent = p.parent
        p.parent = s

    def switch_2(u, v):
        """u and v are nodes in the tree
        that are not related by a parent-son
        or a grandparent-son relantionships."""
        if not u.parent:
            self.root = v
            if v.is_left_child():
                v.parent.left = u
            else:
                v.parent.right = u
        elif not v.parent:
            self.root = u
            if u.is_left_child():
                u.parent.left = v
            else:
                u.parent.right = v
        else:  # neither u nor v is the root                
            if u.is_left_child():
                if v.is_left_child():                   
                    v.parent.left, u.parent.left = u, v
                else:
                    v.parent.right, u.parent.left = u, v
            else:
                if v.is_left_child():                   
                    v.parent.left, u.parent.right = u, v
                else:
                    v.parent.right, u.parent.right = u, v                    

        v.parent, u.parent = u.parent, v.parent
        u.left, v.left = v.left, u.left
        u.right, v.right = v.right, u.right

        if u.left:
            u.left.parent = u
        if u.right:
            u.right.parent = u
        if v.left:
            v.left.parent = v
        if v.right:
            v.right.parent = v

    if x.parent == y:
        switch_1(y, x)            
    elif y.parent == x:
        switch_1(x, y)
    else:
        switch_2(x, y)
</code></pre>
<p>I really need that <code>switch</code> works in all cases no matter which nodes <code>x</code> or <code>y</code> we choose. I have already done some tests, and it seems to work, but I am still not sure.</p>
<p><strong>EDIT</strong></p>
<p>Eventually, if it's helpful somehow, here you have the complete implementation of my BST (<em>with the tests I am doing</em>):</p>
<blockquote>
<p><a href="https://github.com/dossan/ands/blob/master/ands/ds/BST.py">https://github.com/dossan/ands/blob/master/ands/ds/BST.py</a></p>
</blockquote>
<p><strong>EDIT 2 (just a curiosity)</strong></p>
<p>@Rishav commented:</p>
<blockquote>
<p>I do not understand the intention behind this function.. if it is to swap two nodes in the BST, is it not sufficient to swap their data instead of manipulating pointers?</p>
</blockquote>
<p>I answered:</p>
<blockquote>
<p>Ok, maybe I should have added a little bit more about the reason behind all this "monster" function. I can insert <code>BSTNode</code> objects or any comparable objects in my BST. When the user decides to insert any comparable object, the responsibility of creating the <code>BSTNode</code> is mine, therefore the user has no access to a initial <code>BSTNode</code> reference, unless they search for the key. But a <code>BSTNode</code> would only be returned after the insertion of the key, or there's already another <code>BSTNode</code> object in the tree with the same key (or value), but this latter case is irrelevant.</p>
<p>The user can also insert a <code>BSTNode</code> object in the tree which has an initial (and should remain constant) key (or value). Nevertheless, if I just exchanged the values or keys of the nodes, the user would have a reference to a node with a different key then the key of the node he inserted. Of course, I want to avoid this.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>you need proper unit testing. I recommend <a href="http://pythontesting.net" rel="nofollow">python-nose</a> - very easy to use.</p>
<p>As for the test vectors I'd recommend using every potential combination of two nodes <em>a</em> and <em>b</em>:</p>
<p>In the case of BSP trees you have 3 types of nodes:</p>
<ol>
<li>leaf node,</li>
<li>1-child node,</li>
<li>2-children node.</li>
</ol>
<p>in combination with the following additional cases:</p>
<ol>
<li><em>a</em> is <em>root</em>, or</li>
<li><em>a</em> is the parent of <em>b</em>,</li>
<li><em>a</em> is <em>not</em> the parent of <em>b</em>.</li>
</ol>
<p>and their combinations as well (also in the symmetric situation).</p>
<p>then after swapping you'll need to check all the nodes involved i.e.:
a,b, children of a and b, parents of a and b if everything went as planned.</p>
<p>I'd do that using a small tree that contains all the types of nodes.
Then go through all possible combinations of the nodes and swap the nodes and check against the expected outcome, and then swap again to bring the tree back to its original state.</p>
<p>[ EDIT ]</p>
<p>If your question was how to avoid all the tedious work. You may consider looking for some well established BSP implementation and compare results with your function. Vectors can be created automatically by using a prepared tree and generating all possible pairs of nodes of this tree.</p>
<p>[/EDIT]</p>
<p>As for the unwanted input to the function. You'll need to use your imagination although in my opinion you have most of the cases covered. Except the one that Austin Hastings mentions where at least on of the input nodes does not belong to the tree.</p>
<p>I found an old version of the same function written for one of my private projects, maybe you can find it useful:</p>
<pre><code>def swap( a, b ):
    if a == b: return
    if a is None or b is None: return
    #if a not in self or b not in self: return

    if b.parent == a:
        a, b = b, a

    #swap connections naively
    a.parent, b.parent = b.parent, a.parent
    a.left, b.left = b.left, a.left
    a.right, b.right = b.right, a.right

    if b.parent == b: #b was the p of a
        b.parent = a

    if a.parent is not None:
        if a.parent.left == b: a.parent.left = a
        else: a.parent.right = a
    else:
        self.root = a

    if b.parent is not None:
        if b.parent.left == a: b.parent.left = b
        else: b.parent.right = b
    else:
        self.root = b

    if a.right is not None: a.right.parent = a
    if a.left is not None: a.left.parent = a
    if b.right is not None: b.right.parent = b
    if b.left is not None: b.left.parent = b
</code></pre>
<p>and performance optimised version:</p>
<pre><code>def swap_opt( a, b ):
    if a == b: return
    if a is None or b is None: return
    #if a not in self or b not in self: return

    if b.p == a:
        a, b = b, a

    #swap connections naively
    a.p, b.p = b.p, a.p
    a.l, b.l = b.l, a.l
    a.r, b.r = b.r, a.r

    if b.p == b: #b was the p of a
        b.p = a
        if a.l == a:
            a.l = b
            if a.r is not None: a.r.p = a
        else:
            a.r = b
            if a.l is not None: a.l.p = a

        if b.r is not None: b.r.p = b
        if b.l is not None: b.l.p = b
        if a.p is not None:
            if a.p.l == b: a.p.l = a
            else: a.p.r = a
        else:
            #set new root to a
            pass

    else:
        if a.r is not None: a.r.p = a
        if a.l is not None: a.l.p = a
        if b.r is not None: b.r.p = b
        if b.l is not None: b.l.p = b

        if a.p is not None:
            if a.p.l == b: a.p.l = a
            else: a.p.r = a
        else:
            #set new root to a
            pass
        if b.p is not None:
            if b.p.l == a: b.p.l = b
            else: b.p.r = b
        else:
            #set new root to b
            pass
</code></pre>
<p>I haven't done proper unit tests for this code - it worked as I expected it to. I was more interested in performance differences between the implementations. 
<code>swap_opt</code> handles neighbouring nodes a bit faster giving it around 5% of speed increase over the compact implementation of <code>swap</code>. [EDIT2] But that depends on the tree used for testing and hardware [/EDIT2]</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>BST.py</code> defines <code>class BST</code>. Members of that class have an element, <code>self.root</code> that can point to a node. <s>Your code, as shown, does not account for this.</s></p>
<p>I believe you need to handle these cases:</p>
<ol>
<li>Swap the root node with one of its children.</li>
<li>Swap the root node with a non-child.</li>
<li>Swap a non-root node with one of its children.</li>
<li>Swap a non-root node with a non-child non-root node.</li>
</ol>
<p><strong>Edit:</strong> After re-examining switch_1, I think you do handle all the cases.</p>
<p>Also, there is the possibility that a caller could request you swap a node that is not a member of the tree for a node that is a member. Or swap two nodes that are both not members of the current tree. It would cost some code to detect these cases, but you could probably get by with a <code>dict</code> or <code>set</code> to trace tree membership. I don't know if you want to consider "swap-ins" as a valid operation or not.</p>
<p>In several places you compare nodes using <code>==.</code> That is an operation that can be overridden. You should use <code>is</code> and <code>is not</code> for identity comparisons and comparisons against <code>None.</code></p>
<p>Finally, please consider <em>Pythonifying</em> your <code>BST</code> class. It is a mutable iterable container, so it should support the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=container#sequence-types-list-tuple-range" rel="nofollow">standard operations</a> as much as possible.</p>
</div>
<span class="comment-copy">What are you trying to do with the line of code <code>s.right, p.right = p.right, s.right</code>? I am not sure if it is actually doing what you think it is, take a look at <a href="http://stackoverflow.com/questions/11502268/how-does-pythons-comma-operator-works-during-assignment" title="how does pythons comma operator works during assignment">stackoverflow.com/questions/11502268/…</a></span>
<span class="comment-copy">If I get it correctly you want to exchange two nodes in a binary search tree while preserving all the rest of the tree untouched. Could you explain the reason to make such operation? BST has quite strong ordering property; once you exchange any two, arbitrarily chosen nodes in it, it is <i>no longer a BST</i>. As a result you might be unable to do another such swap, because <code>self.search(x.key)</code> or <code>self.search(y.key)</code> will <i>fail to find existing nodes</i>!</span>
<span class="comment-copy">@kyle I am exchanging the values of the right child of <code>s</code> and <code>p</code>, i.e. the right child of <code>s</code> becomes the right child of <code>p</code>, and vice-versa.</span>
<span class="comment-copy">Also are you trying to do a tree rotation? Because you can't ensure that the BST remains balanced by just swapping nodes? See <a href="https://en.wikipedia.org/wiki/Tree_rotation" rel="nofollow noreferrer">en.wikipedia.org/wiki/Tree_rotation</a></span>
<span class="comment-copy">@CiaPan I know very well the properties of a BST. When I created the my delete function, I needed a "swap" (or "switch") function for swapping a node and it's successor. Now, I just decided to make that function work for all cases of swapping nodes. The previous one just worked for that specific case, but I would like to have a function that works in all cases, because I could eventually change the implementation of my delete function, etc.</span>
<span class="comment-copy">My code takes <code>self.root</code> into account (maybe not completely correct, but it takes). Have a closer look.</span>
<span class="comment-copy">Regarding the use of <code>==</code>, I have indeed overridden <code>the __hash__</code> function in the  <a href="https://github.com/dossan/ands/blob/master/ands/ds/BaseNode.py" rel="nofollow noreferrer"><code>BaseNode</code></a> class, but not <code>__eq__</code>... If you want you can have a look at the implementations. In general, I have made the comparisons against <code>None</code> always using <code>is</code> or <code>is not</code>, as you are suggesting. Regarding your last suggestion, probably I will do it when I'm pretty sure that all the operations do not contain bugs.</span>
<span class="comment-copy">Anyway, I didn't want to override <code>__eq__</code> (and all the similar methods) because in my case I don't want to consider two nodes with the same key necessarily the same, but only if they are actually pointing to the same object.</span>
<span class="comment-copy">Ah! I missed it in switch_1. My bad.</span>
<span class="comment-copy">If you want you can download the whole repository and try the tests by running <code>./BST.py</code>. You need first to install the <i>package</i>. If you read the <code>README.md</code>... If you have a look at the tests at the end of the script for <code>switch</code>, I'm also testing switches of nodes where the <code>self.root</code> is involved...</span>
