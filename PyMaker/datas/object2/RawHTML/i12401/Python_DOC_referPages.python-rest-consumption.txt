<div class="post-text" itemprop="text">
<p>I'm beginning to expand my python knowledge and am attempting to consume (e.g. update and receive data from a database with http POST requests with XML payloads) a REST API. I'm well aware of how to consume a REST API, but am a bit unsure what libraries to use with regards to Python specifically.</p>
<p>Is <code>urllib</code> the way to go? the <code>requests</code> module? <code>django</code> (of which I'm entirely naïve to)? </p>
<p>This is not intended to be a subjective answer filled with opinions, but a simple introduction and a point in the right direction on how to use <code>urllib</code> (or others) in conjunction with REST API. </p>
<p><strong>How do you consume a REST Service with Python?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>There are many python libraries that You can use to make REST call, famous among them is Requests.</p>
<p>Sample GET call</p>
<pre><code>import requests

def consumeGETRequestSync():
 params = {'test1':'param1','test2':'param2'}
 url = 'http://httpbin.org/get'
 headers = {"Accept": "application/json"}
 # call get service with headers and params
 response = requests.get(url, headers = headers,data = params)
 print "code:"+ str(response.status_code)
 print "******************"
 print "headers:"+ str(response.headers)
 print "******************"
 print "content:"+ str(response.text)

consumeGETRequestSync()
</code></pre>
<p>Sample POST call</p>
<pre><code>import requests


def consumePOSTRequestSync():
 params = {'test1':'param1','test2':'param2'}
 url = 'http://httpbin.org/post'
 headers = {"Accept": "application/json"}
 # call post service with headers and params
 response = requests.post(url,headers= headers,data = params)
 print "code:"+ str(response.status_code)
 print "******************"
 print "headers:"+ str(response.headers)
 print "******************"
 print "content:"+ str(response.text)

# call 
consumePOSTRequestSync()
</code></pre>
<p>You can check out this link <a href="http://stackandqueue.com/?p=75" rel="nofollow">http://stackandqueue.com/?p=75</a> for more details</p>
</div>
<div class="post-text" itemprop="text">
<p>Hi I am assuming that by stating <code>REST Consumption</code> you meant to use a REST api as a client ( doing GET requests or PUSH ) </p>
<p>This might be my personal preference, but I always use the <a href="https://pypi.python.org/pypi/requests" rel="nofollow">requests</a> library to do my http calls </p>
<p>Once I get a respond, depending on the type of results, I will parse it with either the built-in <a href="https://docs.python.org/3/library/json.html" rel="nofollow">json library</a> or with <a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/" rel="nofollow">beautifulsoup</a></p>
<p>Consuming a REST API that returns JSON results is great because a json can be decoded ( loaded ) into a python dictionary easily. ( a python dictionary has the same structure as json - sort of ) </p>
<p>I am going to give you an example with a <code>GET</code> request with a JSON response because it is easier but you can find example of <code>POST</code> request get easily as well</p>
<pre><code>import requests 
import json 

dest = 'https://github.com/timeline.json' 
## make the get request and store response
res = requests.get(dest)
## you might want to check if respond code is correct by accessing attribute status_code 


## Get the body of the respond as text 
body = res.text 
## load json string ( text ) into dictionary 
res_dict = json.loads(body) 

## json is now a dict
assert 'messages' in res_dict
assert 'documentation_url' in res_dict 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Both urllib2 and requests will do the work. If it's just a web service API, simply make a http call. </p>
<p>requests module is the better choice for JSON responses since urllib2 doesn't come with a native JSON serializer which requests has. For XML responses, you will have to use a external XML parser(such as minidom). Regarding making http calls, requests and urllib2 are really not that different. A comparison is here(<a href="https://stackoverflow.com/questions/2018026/should-i-use-urllib-urllib2-or-requests">What are the differences between the urllib, urllib2, and requests module?</a>) but actually they are quite exchangable.</p>
<p>Django is a web service framework and is on an entirely different level. Django applications can be both service provider and client of REST APIs but Django doesn't come with it natively. You will still have to build the functionalities with other tools. You can use django-rest-framework to build your own REST APIs or call 3rd-party the same way with request.</p>
</div>
<div class="post-text" itemprop="text">
<p>For a REST Client I would also recommend requests, I would have just made this a comment on biobirdman's answer but don't have enough rep.</p>
<p>If you are working with json you don't need to import the json module, and you can send a straight dict object and parse the json response back into a dict like this: eg.</p>
<pre><code>import requests

uri = 'https://myendpoint/get_details_from_id'
json_body={'id' : '123', 'attribute' : 'first_name'}

resp = requests.post(uri,
                     json=json_body)

response_as_dict=resp.json()
</code></pre>
<p>Hope that helps.</p>
</div>
<span class="comment-copy">Does this <a href="http://stackoverflow.com/questions/4355997/is-there-a-generic-python-library-to-consume-rest-based-services" title="is there a generic python library to consume rest based services">stackoverflow.com/questions/4355997/…</a> help at all?</span>
<span class="comment-copy">@PaulRooney not particularly because i'm still unsure how to consume it with the use of the library.</span>
<span class="comment-copy">what do you mean "consume"? can you be more specific about you're trying to do? you should be able to use <code>requests.get</code>, <code>requests.post</code> etc.</span>
<span class="comment-copy">What do you need? Making a http call and handle the response or something more?</span>
