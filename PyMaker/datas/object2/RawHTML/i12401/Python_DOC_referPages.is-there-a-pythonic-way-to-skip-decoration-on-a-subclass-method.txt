<div class="post-text" itemprop="text">
<p>I have an class which decorates some methods using a decorator from another library. Specifically, the class subclasses flask-restful resources, decorates the http methods with <code>httpauth.HTTPBasicAuth().login_required()</code>, and does some sensible defaults on a model service. </p>
<p>On most subclasses I want the decorator applied; therefore I'd rather remove it than add it in the subclasses.</p>
<p>My thought is to have a private method which does the operations and a public method which is decorated. The effects of decoration can be avoided by overriding the public method to call the private one and not decorating this override. Mocked example below.</p>
<p>I am curious to know if there's a better way to do this. Is there a shortcut for 'cancelling decorators' in python that gives this effect? </p>
<p>Or can you recommend a better approach?</p>
<p>Some other questions have suitable answers for this, e.g. <a href="https://stackoverflow.com/questions/1545178/is-there-a-way-to-get-the-function-a-decorator-has-wrapped">Is there a way to get the function a decorator has wrapped?</a>. But my question is about broader design - i am interested in <em>any</em> pythonic way to run the operations in decorated methods without the effects of decoration. E.g. my example is one such way but there may be others. </p>
<pre><code>def auth_required(fn):
    def new_fn(*args, **kwargs):
        print('Auth required for this resource...')
        fn(*args, **kwargs)
    return new_fn

class Resource:
    name = None

    @auth_required
    def get(self):
        self._get()

    def _get(self):
        print('Getting %s' %self.name)

class Eggs(Resource):
    name = 'Eggs'

class Spam(Resource):
    name = 'Spam'

    def get(self):
        self._get()
        # super(Spam, self)._get()

eggs = Eggs()
spam = Spam()

eggs.get()
# Auth required for this resource...
# Getting Eggs

spam.get()
# Getting Spam
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://github.com/miguelgrinberg/Flask-HTTPAuth/blob/master/flask_httpauth.py#L47" rel="nofollow noreferrer">Flask-HTTPAuth</a> uses <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer"><code>functools.wraps</code></a> in the <code>login_required</code> decorator:</p>
<pre><code>def login_required(self, f):
    @wraps(f)
    def decorated(*args, **kwargs):
        ...
</code></pre>
<p>From Python 3.2, as this calls <a href="https://docs.python.org/3/library/functools.html#functools.update_wrapper" rel="nofollow noreferrer"><code>update_wrapper</code></a>, you can access the original function via <code>__wrapped__</code>:</p>
<blockquote>
<p>To allow access to the original function for introspection and other
  purposes (e.g. bypassing a caching decorator such as <code>lru_cache()</code>),
  this function automatically adds a <code>__wrapped__</code> attribute to the
  wrapper that refers to the function being wrapped.</p>
</blockquote>
<p>If you're writing your own decorators, as in your example, you can also use <code>@wraps</code> to get the same functionality (as well as keeping the docstrings, etc.).</p>
<p>See also <a href="https://stackoverflow.com/q/1545178/3001761">Is there a way to get the function a decorator has wrapped?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Another common option is to have the decorated function keep a copy of the original function that can be accessed:</p>
<pre><code>def auth_required(fn):
    def new_fn(*args, **kwargs):
        print('Auth required for this resource...')
        fn(*args, **kwargs)
    new_fn.original_fn = fn
    return new_fn
</code></pre>
<p>Now, for any function that has been decorated, you can access its <code>original_fn</code> attribute to get a handle to the original, un-decorated function.</p>
<p>In that case, you could define some type of dispatcher that either makes plain function calls (when you are happy with the decorator behavior) or makes calls to <code>thing.original_fn</code> when you prefer to avoid the decorator behavior.</p>
<p>Your proposed method is also a valid way to structure it, and whether my suggestion is "better" depends on the rest of the code you're dealing with, who needs to read it, and other kinds of trade-offs.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I am curious to know if there's a better way to do this. Is there a
  shortcut for 'cancelling decorators' in python that gives this effect?</p>
</blockquote>
<p>Use the <a href="https://pypi.python.org/pypi/undecorated" rel="nofollow">undecorated</a> library. It digs through all the decorators and returns just the original function. The docs should be self-explanatory, basically you just call: <code>undecorated(your_decorated_function)</code></p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/1545178/is-there-a-way-to-get-the-function-a-decorator-has-wrapped">Is there a way to get the function a decorator has wrapped?</a></span>
<span class="comment-copy">That works nicely - though I may need an alternative when there's more decoration.  Answer accepted and question updated with usage</span>
<span class="comment-copy">@JothamApaloo as long as they're all <code>@wraps</code>, you can just keep going until you reach something that doesn't have that attribute! Note that you shouldn't put answers in the question.</span>
<span class="comment-copy">Thanks @jonrsharpe. I was thinking along the lines of canceling only <code>@with_required</code> but letting other ones persist. I'll deal with it when need comes and maybe update this. Also, I wanted to put the answer in a comment but it didn't format correctly. Is the protocol to just add it as an answer, then? I guess that's obvious, since its an 'answer', bear with me and verify :)</span>
