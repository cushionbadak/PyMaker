<div class="post-text" itemprop="text">
<p>This is a convoluted example, but it shows what I'm attempting to do. Say I have a string:</p>
<pre><code>from string import ascii_uppercase, ascii_lowercase, digits
s = "Testing123"
</code></pre>
<p>I would like to replace all values in <code>s</code> that appear in <code>ascii_uppercase</code> with "L" for capital letter, all values that appear in <code>ascii_lowercase</code> with "l" for lowercase letter, and those in <code>digits</code> with "n" for a number.</p>
<p>I'm currently doing:</p>
<pre><code>def getpattern(data):
    pattern = ""
    for c in data:
        if c in ascii_uppercase: pattern += "L"; continue
        if c in ascii_lowercase: pattern += "l"; continue
        if c in digits: pattern += "n"; continue
        pattern += "?"
</code></pre>
<p>However, this is tedious with several more lists to replace. I'm usually better at finding map-type algorithms for things like this, but I'm stumped. I can't have it replace anything that was already replaced. For example, if I run the digits one and replace it with "n", the next iteration might replace that with "l" because "n" is a lowercase letter.</p>
<pre><code>getpattern("Testing123") == "Lllllllnnn"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a translation table that maps all upper case letters to <code>'L'</code>, all lower case letters to <code>'l'</code> and all digits to <code>'n'</code>. Once you have such a map, you can pass it to <code>str.translate()</code>.</p>
<pre><code>from string import ascii_uppercase, ascii_lowercase, digits, maketrans
s = "Testing123"

intab = ascii_uppercase + ascii_lowercase + digits
outtab = ('L' * 26) + ('l' * 26) + ('n' * 10)
trantab = maketrans(intab, outtab)

print s.translate(trantab)
</code></pre>
<p>Note that in Python 3 there is no <code>string.maketrans</code> function. Instead, you get the method from the str object <code>str.maketrans()</code>. Read more about this <a href="https://stackoverflow.com/questions/17020661/why-doesnt-str-translate-work-in-python-3">here</a> and the documentation <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer">here</a></p>
<p>I'm not exactly certain of the internals of <code>str.translate()</code>, but my educated guess is the mapping creates a length 256 string for each string character. So as it passes over your string, it'll translate <code>\x00</code> to <code>\x00</code>, <code>\x01</code> to <code>\x01</code>, etc, but <code>A</code> to <code>L</code>. That way you don't have to check whether each character is in your translation dictionary. I presume blindly translating all characters with no branches would result to better performance. Print <code>''.join(chr(i) for i in range(256))</code> in comparison to see this.</p>
</div>
<div class="post-text" itemprop="text">
<p>They're in different 32-blocks of ASCII, so you can do this:</p>
<pre><code>&gt;&gt;&gt; ''.join(' nLl'[ord(c) // 32] for c in s)
'Lllllllnnn'
</code></pre>
<p>Your example suggests that you don't have other characters, but if you do, this should work:</p>
<pre><code>&gt;&gt;&gt; s = "Testing123 and .?#!-+ äöüß"
&gt;&gt;&gt; ''.join(' nLl'[ord(c) // 32] if c &lt;= 'z' and c.isalnum() else '?' for c in s)
'Lllllllnnn?lll????????????'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just in case you need to process unicode data:</p>
<pre><code>import unicodedata

cat = {'Lu':'L', 'Ll':'l', 'Nd':'n'}

def getpattern(data):
    return ''.join(cat.get(unicodedata.category(c),c) for c in data)
</code></pre>
</div>
<span class="comment-copy">Can you provide an actual example of what you're trying to achieve exactly?  There are numerous ways to map a simple string to another, but your real case may be more constricted. Control characters, like NULL or ACK are well within the ordinal range of 0-255, even though not printable, but if you're dealing with Unicode characters, you may need a different approach.</span>
<span class="comment-copy">The selected answer is ideal. I do not believe I need Unicode, but if I do, I believe I can make it work. Thank you!</span>
<span class="comment-copy">Interesting, I've never used <code>maketrans</code> before. The  trantab variable is 256 bytes long whereas the intab+outtab length is only 124. Is there a method to this madness? It doesn't seem very efficient.</span>
<span class="comment-copy">Also, would I be able to have a default value like I have in the example? I don't mind typing it all out. I could just create a dict with { ascii_uppercase : 'L'  .... etc} and iterate through that. But that is good to know.</span>
<span class="comment-copy">@Goodies I don't understand what you mean by default value. I see no example of this in you question.</span>
<span class="comment-copy">+1 for creativity. They are strings, but I can't be certain that they are all printable characters. Also, I can't set them to an ord value because they may not all be in that range. I should have specified in OP, though.</span>
<span class="comment-copy">I just added a version that should work for other characters as well.</span>
