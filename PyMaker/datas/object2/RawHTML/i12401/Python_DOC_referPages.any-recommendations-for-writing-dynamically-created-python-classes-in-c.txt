<div class="post-text" itemprop="text">
<p>I'm working on a project where I need to create Python classes in C. As far as I have read, I've only seen examples where they write the classes statically, for example</p>
<pre><code>static PyTypeObject myclassType = {
    PyVarObject_HEAD_INIT(NULL, 0)
    "mymodule.myclass",             /* tp_name */
    sizeof(myclass),                /* tp_basicsize */
    // etc.
}
</code></pre>
<p>But in the project, I need to create classes dynamically. E.g.</p>
<pre><code>someclass = calloc(sizeof(PyTypeObject));
someclass.tp_methods = malloc(...);
</code></pre>
<p>The members and methods all depend on runtime.</p>
<p>Is there good examples out there about how to do it? I have concerns on issues such as, when do I have to deallocate tp_members or tp_name, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should provide more context. What problem are you trying to solve, in particular?</p>
<p>For example, if you are creating classes to attach behavior, there is already <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow">support in Python</a> for loading and calling C code. You could use that, and create the class interface in python and load the C libraries as part of the module init code.</p>
<p>Alternatively, if you are generating code based on a specification, it might be easier to parse the specification in python and generate the appropriate code directly. (Python is a <a href="http://effbot.org/zone/simple-top-down-parsing.htm" rel="nofollow">pretty good parsing language</a>. ;-)</p>
<p>If you are trying to embed C in your Python, you might consider <a href="https://docs.python.org/2/extending/embedding.html" rel="nofollow">embedding a Python interpreter into your C</a>. That would give you the ability to set up your C code, then run python scripts, and call back to C.</p>
</div>
<span class="comment-copy">I think you'll need to create the C equivalent of a Python metaclass (the class of the dynamically created classes). The default predefined on would be built-in <code>class 'type'</code> unless you have defined/derived your own metaclasses for the dynamically created classes.</span>
