<div class="post-text" itemprop="text">
<p>I'm trying to find a code to select a random winner from all generated raffles and is there a faster way Python can generate more raffles quicker and generate millions if so how. Here's my code so far.</p>
<pre><code>import random 

def genNumber(n = 4):
    return "".join([str(random.randint(0,9)) for i in range(n)])

for i in range(12365):
    word = random.choice(['blue', 'aqua', 'jade','plum', 'gold', 'navy', 'pink', 'grey', 'ruby', 'rose', 'teal',"lime",]) 
    print("{} {} {}".format(word.title(), genNumber(4), genNumber(4)))
random.choice(word)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your current raffle ticket generation algorithm has a problem: it <em>may</em> produce the same ticket more than once. A simple way to prevent that is to just generate the tickets in order. If you want to generate the tickets randomly, that's possible too, but you'll need to keep track of all the tickets generated to prevent duplicates.</p>
<p>The code below creates a list of all valid ticket numbers, shuffles that list, and then converts each number to a color + number string. My code only generates simple number strings, but that can be easily fixed to create numbers of the form xxxx xxxx if you want.</p>
<p>First, I'll illustrate the function that does the conversion.</p>
<pre><code>    colors = ['Blue', 'Aqua', 'Jade',]
    num_colors = len(colors)

    def num_to_ticket(n):
        return '{0} {1}'.format(colors[n % num_colors], n // num_colors)

    num_tickets = 15
    for n in range(num_tickets):
        print(num_to_ticket(n))
</code></pre>
<p><strong>output</strong></p>
<pre><code>Blue 0
Aqua 0
Jade 0
Blue 1
Aqua 1
Jade 1
Blue 2
Aqua 2
Jade 2
Blue 3
Aqua 3
Jade 3
Blue 4
Aqua 4
Jade 4
</code></pre>
<p>Now here's the code that shuffles the tickets and selects one at random. This code uses the <code>random.seed</code> function so that the results are reproducible. If you don't call <code>random.seed</code>, or if you call it with an argument of <code>None</code> (i.e. <code>random.seed(None)</code>), then the pseudo-random sequence will be seeded with a random number provided by the OS, so the results will vary each time you run the program.</p>
<p>From the <a href="https://docs.python.org/3/library/random.html#random.seed" rel="nofollow"><code>random</code> module docs</a>:</p>
<blockquote>
<p><code>random.seed(a=None, version=2)</code></p>
<p>Initialize the random number generator.</p>
<p>If <code>a</code> is omitted or <code>None</code>, the current system time is used. If
  randomness sources are provided by the operating system, they are used
  instead of the system time (see the <a href="https://docs.python.org/2/library/os.html#os.urandom" rel="nofollow"><code>os.urandom()</code></a> function for
  details on availability).</p>
</blockquote>
<pre><code>from random import seed, randrange, shuffle

colors = [
    'Blue', 'Aqua', 'Jade', 
    #'Plum', 'Gold', 'Navy',
    #'Pink', 'Grey', 'Ruby', 
    #'Rose', 'Teal', 'Lime',
]
num_colors = len(colors)

def num_to_ticket(n):
    return '{0} {1}'.format(colors[n % num_colors], n // num_colors) 

seed(1234)

num_tickets = 15

tickets = range(num_tickets)
shuffle(tickets)
for n in tickets:
    print(num_to_ticket(n))

winner = randrange(num_tickets)
print('\nWinner:', num_to_ticket(winner))
</code></pre>
<p><strong>output</strong></p>
<pre><code>Aqua 1
Jade 0
Jade 2
Blue 1
Aqua 2
Aqua 0
Blue 3
Blue 4
Aqua 4
Jade 1
Jade 3
Aqua 3
Blue 0
Blue 2
Jade 4

Winner: Blue 3
</code></pre>
<p>If you're using Python 3 you need to change this line:</p>
<pre><code>tickets = range(num_tickets)
</code></pre>
<p>to this:</p>
<pre><code>tickets = list(range(num_tickets))
</code></pre>
<p>On my old 2 GHz machine with 2GB of RAM I can shuffle 10000000 tickets in about 30 seconds.</p>
<hr/>
<p>Here's a modified version that prints the tickets in the form <code>Jade 0038 0763</code>. It also allows you to specify the number of winners to generate. If you want the numbers to be different each time simply supply a new argument to <code>seed</code> each time, or just delete the <code>seed</code> call altogether.</p>
<pre><code>from __future__ import print_function
from random import seed, randrange, shuffle, sample

colors = [
    'Blue', 'Aqua', 'Jade', 
    #'Plum', 'Gold', 'Navy',
    #'Pink', 'Grey', 'Ruby', 
    #'Rose', 'Teal', 'Lime',
]
num_colors = len(colors)

def num_to_ticket(n):
    color = colors[n % num_colors]
    num = str(n // num_colors).zfill(8)
    return '{0} {1} {2}'.format(color, num[:4], num[4:])

seed(1234)

num_tickets = 15
num_winners = 4

tickets = range(num_tickets)
shuffle(tickets)
for n in tickets:
    print(num_to_ticket(n))

#Select winners
winners = sample(tickets, num_winners)
for i, num in enumerate(winners):
    print('Winner #{0}: {1}'.format(i, num_to_ticket(num)))
</code></pre>
<p><strong>output</strong></p>
<pre><code>Aqua 0000 0001
Jade 0000 0000
Jade 0000 0002
Blue 0000 0001
Aqua 0000 0002
Aqua 0000 0000
Blue 0000 0003
Blue 0000 0004
Aqua 0000 0004
Jade 0000 0001
Jade 0000 0003
Aqua 0000 0003
Blue 0000 0000
Blue 0000 0002
Jade 0000 0004
Winner #0: Jade 0000 0001
Winner #1: Jade 0000 0002
Winner #2: Blue 0000 0002
Winner #3: Jade 0000 0000
</code></pre>
<p>And here's the output of the "winners" section of the code when I change  <code>num_tickets</code> to 1500000</p>
<pre><code>Winner #0: Jade 0038 0763
Winner #1: Jade 0033 4760
Winner #2: Aqua 0034 9232
Winner #3: Jade 0046 6305
</code></pre>
<p>That takes around 5 seconds on my machine.</p>
<hr/>
<p>Here's yet another version that should be more to your liking... However, it does run slower: generating 1,500,000 tickets (without printing them) takes around 12 seconds on my machine.</p>
<pre><code>''' Generate random raffle tickets, and select winners

    See http://stackoverflow.com/q/35113113/4014959

    Written by PM 2Ring 2016.02.01
'''

from __future__ import print_function
from random import seed, randrange, shuffle, sample

colors = [
    'Blue', 'Aqua', 'Jade', 
    'Plum', 'Gold', 'Navy',
    'Pink', 'Grey', 'Ruby', 
    'Rose', 'Teal', 'Lime',
]
num_colors = len(colors)

def num_to_ticket(n):
    color = colors[n % num_colors]
    num = str(n // num_colors).zfill(8)
    return '{0} {1} {2}'.format(color, num[:4], num[4:])

seed(1234)

num_tickets = 15
num_winners = 4

tickets = set()
while len(tickets) &lt; num_tickets:
    ticket = randrange(1200000000)
    tickets.add(ticket)

for n in tickets:
    print(num_to_ticket(n))

#Select winners
winners = sample(tickets, num_winners)
for i, num in enumerate(winners, 1):
    print('Winner #{0}: {1}'.format(i, num_to_ticket(num)))
</code></pre>
<p><strong>output</strong></p>
<pre class="lang-none prettyprint-override"><code>Pink 6158 1569
Blue 0074 9147
Pink 3460 8896
Pink 6232 8147
Ruby 9392 6899
Jade 9109 7596
Lime 4407 3259
Ruby 0839 3822
Aqua 6715 6348
Pink 9664 5353
Pink 2368 0977
Jade 0308 1402
Plum 7664 8093
Ruby 7887 7271
Plum 5822 2757
Winner #1: Pink 3460 8896
Winner #2: Plum 5822 2757
Winner #3: Blue 0074 9147
Winner #4: Pink 6158 1569
</code></pre>
</div>
<span class="comment-copy">Please don't self-delete your own questions when you feel that you're done with them. This website isn't just for you to get your answer, but also to provide possible answers to others in the future. When you self-delete you rob them of that chance, and are also extremely ungracious to people (like PM 2Ring) who are willing to help you.</span>
<span class="comment-copy">Also see <a href="http://stackoverflow.com/questions/35101083/code-to-randomly-select-raffle-generate-millions" title="code to randomly select raffle generate millions">stackoverflow.com/questions/35101083/…</a></span>
<span class="comment-copy"><code>random.seed(None)</code> only uses system time as a fallback seed if there's no randomness source provided by the operating system. <a href="https://docs.python.org/2/library/os.html#os.urandom" rel="nofollow noreferrer">docs.python.org/2/library/os.html#os.urandom</a></span>
<span class="comment-copy">@HåkenLid: Oops! I'd forgotten about that. Thanks. I'll update my answer. I should know better than to post stuff like that without checking the docs first...</span>
<span class="comment-copy">Here's an interesting story showing why system time is not a good seed. It also might have some relevance for OP. <a href="https://www.cigital.com/papers/download/developer_gambling.php" rel="nofollow noreferrer">cigital.com/papers/download/developer_gambling.php</a> (tl:dr: in the 1990s you could cheat in online poker by brute force prediction of the seed used for shuffling the cards.)</span>
<span class="comment-copy">@HåkenLid: I agree that my code is not a great way to generate or select raffle tickets, and it certainly shouldn't be used for any purpose involving serious amounts of money. And it wouldn't be practical to use if you wanted to generate large numbers of tickets since they'd all have to be generated in one go. A better design would save state so the program could be restarted. Or just not bother with randomizing the tickets produced, and use a decent cryptographic-standard randomizer for selecting the winner(s).</span>
<span class="comment-copy">Can u modify the code so it comes like this Blue 0642 3223</span>
