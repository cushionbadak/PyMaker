<div class="post-text" itemprop="text">
<p>I'm trying to set up a "processing pipeline" for data that I'm reading in from a data source, and applying a sequence of operators (using generators) to each item as it is read. </p>
<p>Some sample code that demonstrates the same issue. </p>
<pre><code>def reader():
    yield 1
    yield 2
    yield 3

def add_1(val):
    return val + 1

def add_5(val):
    return val + 5

def add_10(val):
    return val + 10

operators = [add_1, add_5, add_10]

def main():
    vals = reader()

    for op in operators:
        vals = (op(val) for val in vals)

    return vals

print(list(main()))
</code></pre>
<p><strong>Desired</strong> : <code>[17, 18, 19]</code><br/>
<strong>Actual</strong>: <code>[31, 32, 33]</code></p>
<p>Python seems to not be saving the value of <code>op</code> each time through the for loop, so it instead applies the third function each time. <strong>Is there a way to "bind" the actual operator function to the generator expression each time through the for loop?</strong></p>
<p>I could get around this trivially by changing the generator expression in the for loop to a list comprehension, but since the actual data is much larger, I don't want to be storing it all in memory at any one point.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can force a variable to be bound by creating the generator in a new function. eg.</p>
<pre><code>def map_operator(operator, iterable):
    # closure value of operator is now separate for each generator created
    return (operator(item) for item in iterable)

def main():
    vals = reader()
    for op in operators:
        vals = map_operator(op, vals)   
    return vals
</code></pre>
<p>However, <code>map_operator</code> is pretty much identical to the <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a> builtin (in python 3.x). So just use that instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can define a little helper which composes the functions <em>but in reverse order</em>:</p>
<pre><code>import functools

def compose(*fns):
    return functools.reduce(lambda f, g: lambda x: g(f(x)), fns)
</code></pre>
<p>I.e. you can use <code>compose(f,g,h)</code> to generate a lambda expression equivalent to <code>lambda x: h(g(f(x)))</code>. This order is uncommon, but ensures that your functions are applied left-to-right (which is probably what you expect):</p>
<p>Using this, your <code>main</code> becomes just</p>
<pre><code>def main():
    vals = reader()
    f = compose(add_1, add_5, add_10)
    return (f(v) for v in vals)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This may be what you want - create a composite function:</p>
<pre><code>import functools

def compose(functions):
    return functools.reduce(lambda f, g: lambda x: g(f(x)), functions, lambda x: x)

def reader():
    yield 1
    yield 2
    yield 3

def add_1(val):
    return val + 1

def add_5(val):
    return val + 5

def add_10(val):
    return val + 10

operators = [add_1, add_5, add_10]

def main():
    vals = map(compose(operators), reader())
    return vals

print(list(main()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason for this problem is that you are creating a deeply nested generator of generators and evaluate the whole thing <em>after</em> the loop, when <code>op</code> has been bound to the last element in the list -- similar to the quite common <a href="https://stackoverflow.com/q/19837486/1639625">"lambda in a loop"</a> problem.</p>
<p>In a sense, your code is roughly equivalent to this:</p>
<pre><code>for op in operators:
    pass

print(list((op(val) for val in (op(val) for val in (op(val) for val in (x for x in [1, 2, 3])))))
</code></pre>
<p>One (not very pretty) way to fix this would be to <code>zip</code> the values with <em>another</em> generator, repeating the same operation:</p>
<pre><code>def add(n):
    def add_n(val):
        return val + n
    return add_n
operators = [add(n) for n in [1, 5, 10]]

import itertools
def main():
    vals = (x for x in [1, 2, 3])

    for op in operators:
        vals = (op(val) for (val, op) in zip(vals, itertools.repeat(op)))

    return vals

print(list(main()))
</code></pre>
</div>
<span class="comment-copy">Thanks, everyone! The <code>map</code> solution worked best for me, since there are other things I want to do in the for loop as well (related to logging, additional checks, etc.). In my real program, each <code>operator</code> is actually a class with <code>__call__</code>, and has some other functions and attributes I need to deal with.    The <code>reduce</code> solution would also work well, but loses the ability to do that without wrapping each operator in a function to perform those extra actions.</span>
<span class="comment-copy">Wow, I really wonder why I did not think of just using <code>vals = map(op, vals)</code>...</span>
<span class="comment-copy">In Python 2, make sure to use <a href="https://docs.python.org/2.7/library/itertools.html#itertools.imap" rel="nofollow noreferrer"><code>itertools.imap</code></a>. I learned this the hard way.</span>
<span class="comment-copy">Good point on the order, I didn't think about that. I've fixed my answer.</span>
<span class="comment-copy">Note that this changes the order of operations: I.e., OP's code first calculates <code>op_1</code> for all the values, then <code>op_5</code>, etc., while yours first applies all the operations to <code>val_1</code>, then to <code>val_2</code>, etc. Depending on the application, this might be perfectly okay or a problem. (Just wanted to point out)</span>
<span class="comment-copy"><a href="https://mathieularose.com/function-composition-in-python/" rel="nofollow noreferrer">mathieularose.com/function-composition-in-python</a></span>
