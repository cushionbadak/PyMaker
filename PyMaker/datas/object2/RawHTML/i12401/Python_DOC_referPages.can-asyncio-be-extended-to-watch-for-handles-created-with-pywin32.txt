<div class="post-text" itemprop="text">
<p>I have a Windows Python (3.4.x) program in which I wish to wait for user actions coming from a queuing.Queue and from filesystem changed notifications (Win32 FindFirstChangeNotification, etc.). My current plan is to associate a Win32 event object (created with CreateEvent) with the queue, and when an action is queued, signal the event object. The thread would then loop on the Win32 WaitForMultipleObjects call and dispatch the events. I would use pywin32 for calling into the Win32 API.</p>
<p>I take this approach on a different project and it works fine. However, I am wondering if there's any way to implement this behavior on top of the asyncio module.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using the pywin32 extensions, it is possible to wait for a Windows event using the win32event API. However waiting is a blocking operation.</p>
<p>Until pywin32 event waiting has direct asyncio support, asyncio makes it possible to wait for the events using a so-called <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.run_in_executor" rel="nofollow">thread pool executor</a>, which basically just runs the blocking wait in a separate thread. There's also a process executor to delegate blocking operations to a process rather than thread.</p>
</div>
