<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/8217650/change-some-lowercase-letters-to-uppercase-in-string">change some lowercase letters to uppercase in string</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I'm rank new in Python, thus the question,</p>
<p>I'm trying to solve a simple problem, where the program takes in a simple string and swaps all the cases. Thus if we enter</p>
<pre><code>SimPLE
</code></pre>
<p>We should get</p>
<pre><code>sIMple
</code></pre>
<p>This is my code</p>
<pre><code>def main():
    oldStr = input()
    for s in oldStr:
        if s.islower():
            s.upper()
        elif s.isupper():
            s.lower()
    print(oldStr)
if __name__ == "__main__" : main()
</code></pre>
<p>It just returns the same string. Any help appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>As a generator expression:</p>
<pre><code>mystr = "SimPLE"
print("".join(c.upper() if c.islower() else c.lower() for c in mystr))
</code></pre>
<p>The breakdown of the above is:</p>
<pre><code>c.upper() if c.islower() else c.lower()
</code></pre>
<p>is an conditional expression that will convert a character from upper to lower case and vice versa.</p>
<p>Then,</p>
<pre><code>(... for c in mystr)
</code></pre>
<p>is a generator expression, which is somewhat like a list that is generated on-the-fly.</p>
<p>Finally:</p>
<pre><code>".join(...)
</code></pre>
<p>will join any sequence of strings together with nothing ("") between them.</p>
</div>
<div class="post-text" itemprop="text">
<p>Do this in one fell swoop with a string join on a list comprehension of individual characters:</p>
<pre><code>outstr = ''.join([s.upper() if s.islower() else s.lower() for s in oldStr])
print(outstr)
</code></pre>
<p>Input &amp; Output:</p>
<pre><code>sIMple
SimPLE
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Strings are immutable. What this means is that when you use the function <code>s.upper()</code>, it is not setting that letter in <code>str</code> to be uppercase, it simply returns that letter in uppercase. </p>
<p>Here is some code that works:</p>
<pre><code>def main():
    oldStr = input()
    newStr = ""
    for s in oldStr:
        if s.islower():
            newStr+=s.upper()
        elif s.isupper():
            newStr+=s.lower()
    print(newStr)
</code></pre>
<p>Notice now that we are creating a new string and simply adding the letters at each point in the forloop as opposed to changing those letters in <code>str</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are running each character through <code>lower()</code> and <code>upper()</code>, but these functions do not <em>change</em> the character.</p>
<p>Instead, they <strong>return</strong> the modified version of the character. The original character <code>s</code> will stay as it is.</p>
<p>You should build a new string based off the <em>return values</em> of <code>lower()</code> and <code>upper()</code>, and return that string.</p>
</div>
<div class="post-text" itemprop="text">
<p>1) you need to put the <code>main()</code> call on  new line, as python relies on whitespace heavily for program structure</p>
<p>2) s is a temporary variable created for the purpose of the for statement. It doesn't actually reference the character in the string</p>
<p>Essentially what is going on is that <code>s</code> has the same value as the character in the string, but it <strong>IS NOT ACTUALLY</strong> the character in the string.</p>
</div>
<span class="comment-copy">I know the OP used <code>str</code> as a variable name, but you should change it in an answer.</span>
<span class="comment-copy">@Brian got the str part. Could you explain the code a little more.</span>
<span class="comment-copy">@Zeus updated with explanation - hope that helps!</span>
<span class="comment-copy">Could you explain the code a bit, as stated earlier, I've a Java background and is generally used to more verbose code.</span>
<span class="comment-copy">I know the OP used <code>str</code> as a variable name, but you should change it in an answer.</span>
<span class="comment-copy">@TigerhawkT3 why can't I use the name str? Is it some pythonic convention?</span>
<span class="comment-copy">@Zeus - see my answer (@Brian) above.</span>
<span class="comment-copy">I know the OP used <code>str</code> as a variable name, but you should change it in an answer.</span>
<span class="comment-copy">The <code>main()</code> call does not need to be on a new line.</span>
<span class="comment-copy">It doesn't? Whenever I don't put stuff on a new line, all it does is error. Also when I don't indent.</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/reference/simple_stmts.html" rel="nofollow noreferrer">here</a> and <a href="https://docs.python.org/3/reference/compound_stmts.html" rel="nofollow noreferrer">here</a>.</span>
