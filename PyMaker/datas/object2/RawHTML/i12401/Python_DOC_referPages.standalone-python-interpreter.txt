<div class="post-text" itemprop="text">
<p>I want to run a python program without any underlying OS. </p>
<p>I have read articles on running python on small microcontrollers, but i want it on a bigger processor (Intel, ARM).</p>
<p>My criteria is:</p>
<ol>
<li>It could be directly run as binary.</li>
<li>The Python interpreter could be loaded, onto which I can run my program.</li>
<li>At worst, tell me an extremely small, basic OS i can run it on.</li>
</ol>
<p>Note: I want to use my program like a minimalistic operating system. I should be able to load it like any other OS, and it should be able to access memory and have basic I/O.</p>
<p>Note 2: Will there be limitations in terms of python's functions?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Note:</strong> this post describes x86 exclusively, as, next to ARM, requested by the OP.</p>
<blockquote>
<p>It could be directly run as binary.</p>
</blockquote>
<p>Binary? Python is not compiled, so no binary is produced. I think you mean just "run a Python program directly" here.<br/>
You could implement an additional compilation step, so that Python source files are compiled to <a href="https://docs.python.org/3/library/dis.html" rel="nofollow">bytecode</a> prior to being executed, of course.</p>
<blockquote>
<p>The Python interpreter could be loaded, onto which I can run my program.</p>
</blockquote>
<p>"loaded" is a problem here. You need software to load the interpreter, displaying a chicken-egg problem. Intel x86 solves the problem by using a so-called <a href="https://en.wikipedia.org/wiki/BIOS" rel="nofollow">BIOS</a> (Basic I/O System), which starts further, user-defined programs. This "user-defined" program would be your Python interpreter then.<br/>
On more modern machines, <a href="https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface" rel="nofollow">UEFI</a> is used instead of the legacy BIOS.</p>
<blockquote>
<p>I want to use my program like a minimalistic operating system. I
  should be able to load it like any other OS, and it should be able to
  access memory and have basic I/O.</p>
</blockquote>
<p>The aforementioned BIOS provides, as the acronym says, basic I/O functionality like reading/writing from/to disks, reading/writing from/to the screen, etc. Either use these basic routines and abstract from these or circumvent them and rewrite them all from scratch. That includes graphics drivers (a basic VGA driver will suffice), disk drivers (for loading Python files from disk), and filesystem (a simple FAT-16 is sufficient).<br/>
After all, you not only need to write a Python interpreter but a whole development environment from scratch.</p>
<blockquote>
<p>Will there be limitations in terms of python's functions?</p>
</blockquote>
<p>It depends on what you implement. For networking you need the appropriate drivers, for file stuff a filesystem + secondary storage driver. You are the ultimate master of your system you create, so it is up to you how un/limited your Python environment will be. </p>
</div>
<span class="comment-copy">See <a href="https://wiki.python.org/moin/EmbeddedPython" rel="nofollow noreferrer">wiki.python.org/moin/EmbeddedPython</a>.</span>
<span class="comment-copy">I know that python is interpreted not compiled. What i meant by 'run as binary' was if compilers were available for python. I have seaerched, haven't found much.</span>
<span class="comment-copy">@UditDey I don't know one either. I only know about Python bytecode.</span>
<span class="comment-copy">Even if i compile my code to Python bytecode, i can't run it directly, can I? Because the Python bytecode instruction set is not the same as x86's. So it won't be helpful</span>
<span class="comment-copy">@UditDey That's where the interpreter comes into play and interprets the bytecode and executes it in native x86 instructions. The actual interpreter only converts between bytecode and x86 instructions on your implementation. Some Python "compiler" reduces the source code to bytecode. You can cut out this detour, of course.</span>
<span class="comment-copy">So i will nevertheless have to run the interpreter directly</span>
