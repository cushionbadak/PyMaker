<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15978781/how-to-find-integer-nth-roots">How to find integer nth roots?</a>
<span class="question-originals-answer-count">
                    11 answers
                </span>
</li>
</ul>
</div>
<p>Recently I encountered a problem:</p>
<p>I want to calculate various roots of various numbers like this:</p>
<pre><code>x = x ** 1/y+1
</code></pre>
<p>None of the methods I know result in a working code.</p>
<p>Method 1:</p>
<pre><code>x = 54
y = 2
x = x ** 1/y+1
print(x)
</code></pre>
<p>Printed value is 28.0 instead of 3.7798</p>
<p>Method 2:</p>
<pre><code>x = 54
y = 2
x = x ** 1/(y+1)
print(x)
</code></pre>
<p>Printed value is 18.0 istead of 3.7798</p>
<p>Method 3:</p>
<pre><code>x = 216
y = 2
x = x ** (1/(y+1))
print(x)
</code></pre>
<p>Printed value is 5.99 instead of 6</p>
<p>Is there a way that would work with y being up to 20?</p>
<p>Edit: </p>
<p>Another suggested method:</p>
<pre><code>def nth_root(val, n):
    ret = int(val**(1./n))
    return ret + 1 if (ret + 1) ** n == val else ret

y = 1
print(nth_root(19, (y+1)))
</code></pre>
<p>prints 4</p>
</div>
<div class="post-text" itemprop="text">
<p>Since everyone else has already told you why your Method 3 is correct, I'll stick to getting you an accurate answer. <a href="http://docs.sympy.org/dev/tutorial/intro.html" rel="nofollow">You can read more about why you're not getting exactly 6</a>, but basically it's because your computer doesn't represent the 1/3 exactly when doing the calculation and makes the final answer off.</p>
<p>So, the easiest solution is to use sympy:</p>
<pre><code>import sympy

y = 216
x = 2
x = sympy.root(y,x+1)
print(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't seem to understand (yet) order of operations in a programming language.  You need parentheses to make sure you add 1 to y, <em>then</em> take the reciprocal, and <em>then</em> use that as an exponent.  The "natural" order is the opposite.</p>
<pre><code>x = x ** (1.0/(y+1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you want is this (assuming you are using Python 3):</p>
<pre><code>x = x ** (1/(y+1))
</code></pre>
<p>For Python 2, either of the following will work:</p>
<pre><code>from __future__ import division
x = x ** (1/(y+1))
</code></pre>
<p>or (also fine on Python 3):</p>
<pre><code>x = x ** (1.0/(y+1))
</code></pre>
<p>The issue is you need to apply the parentheses in the correct locations to get the order of operations right.</p>
<p>Method 3 is to do with floating point arithmetic. See: <a href="https://docs.python.org/3.5/tutorial/floatingpoint.html" rel="nofollow noreferrer">https://docs.python.org/3.5/tutorial/floatingpoint.html</a></p>
<p>For more info on Python 2 vs. Python 3 division:
<a href="https://stackoverflow.com/questions/21316968/division-in-python-2-7-and-3-3">Division in Python 2.7. and 3.3</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Only your last code works because <code>**</code> has higher precedence than <code>/</code> (and <code>/</code> has higher precendence than <code>+</code>).</p>
<p>The value is not exactly 6, because floating point numbers are not perfectly accurate. A third can not be represented as a float.</p>
</div>
<div class="post-text" itemprop="text">
<p>All your values are just as expected. According to the  <a href="https://docs.python.org/2/reference/expressions.html#operator-precedence" rel="nofollow">python operator precedence</a>:</p>
<p><code>x ** 1/y+1</code> is parsed as <code>((x ** 1) / y) + 1</code>, and</p>
<p><code>x ** 1/(y+1)</code> is actually <code>(x ** 1) / (y + 1)</code>.</p>
<p>What you probably want is <code>x ** (1. / (y + 1))</code>.  Note, that <code>1.</code> is a floating point number, causing the whole expression to be evaluated as floats.  This also means that you will work with finite precision, e.g., getting <code>5.99999</code> instead fo <code>6</code> is to be expected.</p>
</div>
<span class="comment-copy">for starters, <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a></span>
<span class="comment-copy">You should look up "operator precedence" for Python, which would indicate that you need the parentheses as shown in your 3rd attempt. As far as the 5.99 answer is concerned, I did not get that when I tried your example. I suspect there's more context to your scenario than you've described.</span>
<span class="comment-copy">also, third example gives 6.0.</span>
<span class="comment-copy">@njzk2 I get <code>5.999999999999999</code> in 3.4.</span>
<span class="comment-copy"><code>5.999999999999999</code> in 3.5 too. I thought 3.x had the intelligent repr thing?</span>
<span class="comment-copy">Well, no ... it must have been Python 3, in which division is floating point by default. Or the result would have been different.</span>
<span class="comment-copy">x = 216     y = 2     x = x ** (1.0/(y+1))     print(x)  still prints 5.9999</span>
<span class="comment-copy">@Tom Zych: thanks; I've updated the answer.</span>
<span class="comment-copy">There has to be something I'm missing... My last method looks exactly like yours just with .0 added. Even if I add the .0, I still get 5.99 printed. So is it that ,,I don't seem to understand'' or your way doesn't solve my problem either?</span>
<span class="comment-copy">@MantasKandratavicius use <a href="http://stackoverflow.com/a/15978862/645956">this method</a>.</span>
<span class="comment-copy">if the OP were using python 2, their 3rd example would ouptut 1, not 5.99</span>
<span class="comment-copy">Correct. My solutions take that in to account. I will update the solution to clarify the logic errors in the OP's code too.</span>
<span class="comment-copy">my point being that the op is not using python 2, which your solution assumes</span>
<span class="comment-copy">Point taken. I'll edit the Python 2 part as reference only.</span>
