<div class="post-text" itemprop="text">
<p>I tried to write a code that can execute python codes easily.</p>
<p>but when I used <code>subprocess</code> library such:</p>
<pre><code>import subprocess
print(subprocess.Popen("py setup.py install", shell = True, stdout = subprocess.PIPE).stdout.read())
print(subprocess.Popen("py setup.py py2exe", shell = True, stdout = subprocess.PIPE).stdout.read())
</code></pre>
<p>I saw just this result</p>
<pre><code>b''
</code></pre>
<p>please help me please</p>
</div>
<div class="post-text" itemprop="text">
<p>Most likely the commands you are trying to run are producing a <code>stderr</code>, which your code does not display. It is possible to send the <code>stderr</code> messages to <code>stdout</code> if you don't want to handle it separately.</p>
<p>I'll use a different command in the subprocess that is relatively safe. And I will break it up a little instead of having one long line.</p>
<pre><code>import subprocess

p = subprocess.Popen("python filedoesntexist",
                     shell=True,
                     stdout=subprocess.PIPE,
                     stderr=subprocess.STDOUT)
print(p.stdout.read())
</code></pre>
<p>See that I added the parameter <code>stderr=subprocess.STDOUT</code>, this sends all the error messages to <code>stdout</code>. The <code>subprocess</code> tries to run <code>"python filedoesntexist"</code> and since <code>filedoesntexist</code> is a file that doesn't exists, it will <code>print</code> this message:</p>
<pre><code>b"python: can't open file 'filedoesntexist': [Errno 2] No such file or directory\n"
</code></pre>
<p>But you might just want to get the <code>string</code> instead of <code>bytes</code>, and you can add the parameter <code>universal_newlines=True</code> like this:</p>
<pre><code>p = subprocess.Popen("python filedoesntexist",
                     shell=True,
                     stdout=subprocess.PIPE,
                     stderr=subprocess.STDOUT,
                     universal_newlines=True)
print(p.stdout.read())
</code></pre>
<p>Now it prints just the <code>string</code> like this:</p>
<pre><code>python: can't open file 'filedoesntexist': [Errno 2] No such file or directory
</code></pre>
<p>For additional information, visit the <a href="https://docs.python.org/3/library/subprocess.html#module-subprocess" rel="nofollow">python documentation</a></p>
<hr/>
<p><em>Edit</em></p>
<p>The documentation recommends using <code>run()</code>, which can be done like this (<em>updated after comments from J.F. Sebastian</em>) :</p>
<pre><code>subprocess.run(["python", "filedoesntexist"])
</code></pre>
<p>If you need to handle <code>stdout</code> in some way, add parameters described earlier in the <code>Popen</code> examples.</p>
</div>
<span class="comment-copy">Why are you printing the subprocesses? Suggest taking a look at the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">python documentation</a></span>
<span class="comment-copy">@oystein-hr I printing <code>subprocess.Popen(...).stdout.read()</code> I saw the page many many time but I still can't use <code>subprocess</code> for my project :(</span>
<span class="comment-copy">(1) there is no reason to use <code>shell=True</code> here. (2) OP probably wants <code>subprocess.check_call([sys.executable, 'setup.py', 'py2exe'])</code> (the output is not used).</span>
<span class="comment-copy">(1) If I don't have <code>shell=True</code>, it won't run. (2) <code>subprocess.check_call()</code> has been replaced by <code>subprocess.run()</code> in 3.5 according to the documentation. (3) If I edit the <code>subprocess.run()</code> example a little I can remove <code>shell=True</code> :)</span>
<span class="comment-copy">(1) the code example in my comment shows how to avoid <code>shell=True</code> (2) <code>subprocess.run()</code> is recommended on Python 3.5+. It doesn't mean that <code>check_call()</code> is deprecated (replaced). Anyway, the point is that you don't need to capture the output at all (if all you do is print it back)</span>
<span class="comment-copy">Cool. Updated the <code>run()</code> example. Not sure if the OP wants to handle <code>stdout</code>, assumed OP wanted to since OP was printing them.</span>
