<div class="post-text" itemprop="text">
<p>In <a href="https://github.com/mitsuhiko/werkzeug/blob/master/werkzeug/datastructures.py" rel="nofollow">datatstructures.py</a>, there is a method <code>values()</code>:</p>
<pre><code>def values(self):
    """Iterate over all values."""
    for item in self:
        yield item[0]
</code></pre>
<p><code>self</code> is an instance of the class; how can it be iterated over?</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple, it has to implement <code>__iter__</code> method, e.g.</p>
<pre><code>class Test:
    def __iter__(self):
        yield 1
        yield 2

&gt;&gt;&gt; instance = Test()
&gt;&gt;&gt; for val in instance:
...     print val
...
1
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The class which the given method belongs to extends <code>ImmutableList</code> which is iterable, thus the method can iterate on the class. </p>
</div>
<div class="post-text" itemprop="text">
<p>If the object in question is <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow">Iterable</a> it can be iterated. This is how lists, dicts, and other sequences are designed.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>My question is not How to but rather How can (as in: how can it be possible)</p>
</blockquote>
<p><code>self</code> refers to the actual tangible object you deal with, <code>classes</code> are more like their interface (don't interpret this too strictly); if an instances' class defines a <code>__iter__</code> (or <code>__getitem__</code>) method they can be iterated over in a <code>for</code> loop. <strong><a href="https://www.python.org/dev/peps/pep-0234/" rel="nofollow">PEP 234</a></strong> deals with the semantics and implementation of iterators.</p>
<p>In your specific case the <em>function</em> is a <strong>generator</strong> which <em>has nothing to do with the <code>__iter__</code> method</em>, it simply transforms the <code>values</code> function to a generator in order to support iteration of the form:</p>
<pre><code>for i in instance.values(): # do stuff
</code></pre>
<p>If the object doesn't define an <code>__iter__</code> it won't be able to be iterated over, as an example:</p>
<pre><code>class myfoo:
    def func(self):
        for i in range(10): yield i

f = myfoo()
</code></pre>
<p>The instance <code>f</code> is now <strong>not</strong> iterable:</p>
<pre><code>for i in f: print(i) # TypeError
</code></pre>
<p>On the other hand, we can use <code>func</code> in a <code>for</code> loop:</p>
<pre><code>for i in f.func(): print(i, end=" ")
0 1 2 3 4 5 6 7 8 9
</code></pre>
<p>Changing <code>func</code> to <code>__iter__</code> changes the picture, now the instance <code>f</code> <strong>is</strong> iterable:</p>
<pre><code>class myfoo:
    def __iter__(self):
        for i in range(10): yield i

f = myfoo()
</code></pre>
<p>Iterating through <code>f</code> is done intuitively with:</p>
<pre><code>for i in f: print(i, end=" ")
0 1 2 3 4 5 6 7 8 9
</code></pre>
<hr/>
<p>Asking why, as in, how can this be possible is like asking why can strings be multiplied with <code>"s" * 4</code>. This is the way things were implemented because it just made sense as a way of handling the common case of looping through the contents of a container. Don't overthink things, it isn't necessary.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/25150955/python-iterating-through-object-attributes">Python iterating through object attributes</a></span>
<span class="comment-copy">Not a duplicate. My question is not <i>How to</i> but rather <i>How can</i> (as in: how can it be possible).</span>
<span class="comment-copy">What defines <code>ImmutableList</code> as iterable? I see now <code>__iter__</code> method.</span>
<span class="comment-copy">@Pyderman, it derives from <code>list</code></span>
<span class="comment-copy">One heck of an answer Jim, thanks.</span>
<span class="comment-copy">@Pyderman You're welcome, good for you for digging in the source code of projects and trying to understand how they work.</span>
