<div class="post-text" itemprop="text">
<p>I've been trying for the last three days (yeah) to make a image/short video tagging system for my own use but this has proven a challenge beyond me.</p>
<p>These are the strings:</p>
<pre><code>d:\images\tagging 1\GIFs\kung fu panda, fight.webm
d:\images\tagging 1\GIFs\kung fu panda, fight (2).webm
d:\images\tagging 1\GIFs\kung fu panda 2, fight.webm
d:\images\tagging 1\GIFs\kung fu panda 2, fight (2).webm
d:\images\tagging 1\GIFs\pulp fiction, samuel l. jackson, angry, funny.webm
</code></pre>
<p>I have four things that I've tried modifying to achieve what I want with no success:</p>
<pre><code>(?&lt;=d:\\images\\tagging\s1\\GIFs\\)([\w\s])+

([a-z0-9]\s?)+

(?&lt;=\\)[^\\]*?(?=\..*$)

[^\\/:*?"&lt;&gt;|\r\n]+$
</code></pre>
<p>1 Almost there, but it doesn't extend past the first comma.</p>
<p>2 This does almost everything, but I haven't found a way to exclude the directory, the (#) and the extension.</p>
<p>3 Taken from the internet, captures the "l." and stops there, whole filename, can't use commas as I want, captures (#).</p>
<p>4 Taken from regexbuddy (yes I actually bought it in my desperation), captures (#) and extension.</p>
<p>@timgeb</p>
<p>The intention is to get the filenames without the commas, the (#) and extension, so:</p>
<pre><code>"kung fu panda" "fight"
"kung fu panda" "fight"
"kung fu panda 2" "fight"
"kung fu panda 2" "fight"
"pulp fiction" "samuel l. jackson" "angry" "funny"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your question isn't very clear, but I <em>think</em> you want to parse filenames. If that's the case, I wouldn't recommend using <code>re</code> as your primary tool.</p>
<p>Instead, have a look at <a href="https://docs.python.org/3/library/os.path.html#module-os.path" rel="nofollow"><code>os.path</code></a>:</p>
<pre><code>import os.path  # Or `import ntpath` for Windows paths on non-Windows systems

dir, file_name = os.path.split('d:\images\tagging 1\GIFs\kung fu panda, fight (2).webm')
# dir = 'd:\images\tagging 1\GIFs'
# file_name = 'kung fu panda, fight (2).webm'

root, ext = os.path.splitext(file_name)
# root = 'kung fu panda, fight (2)'
# ext = '.webm'
</code></pre>
<p>Now you have a much simpler problem: removing the numbers in parentheses.</p>
</div>
<div class="post-text" itemprop="text">
<p>Get the basename, substitute integers in parentheses and the extension with the empty string and strip off the whitespace.</p>
<pre><code>from ntpath import basename
import re
map(str.strip, re.sub('\(\d+\)|\.\w+$', '', basename(s)).split(','))
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; s = 'd:\images\tagging 1\GIFs\kung fu panda, fight.webm'
&gt;&gt;&gt; map(str.strip, re.sub('\(\d+\)|\.\w+$', '', basename(s)).split(','))
['kung fu panda', 'fight']
&gt;&gt;&gt; s = 'd:\images\tagging 1\GIFs\kung fu panda, fight (2).webm'
&gt;&gt;&gt; map(str.strip, re.sub('\(\d+\)|\.\w+$', '', basename(s)).split(','))
['kung fu panda', 'fight']
&gt;&gt;&gt; s = 'd:\images\tagging 1\GIFs\kung fu panda 2, fight.webm'
&gt;&gt;&gt; map(str.strip, re.sub('\(\d+\)|\.\w+$', '', basename(s)).split(','))
['kung fu panda 2', 'fight']
&gt;&gt;&gt; s = 'd:\images\tagging 1\GIFs\kung fu panda 2, fight (2).webm'
&gt;&gt;&gt; map(str.strip, re.sub('\(\d+\)|\.\w+$', '', basename(s)).split(','))
['kung fu panda 2', 'fight']
&gt;&gt;&gt; s = 'd:\images\tagging 1\GIFs\pulp fiction, samuel l. jackson, angry, funny.webm'
&gt;&gt;&gt; map(str.strip, re.sub('\(\d+\)|\.\w+$', '', basename(s)).split(','))
['pulp fiction', 'samuel l. jackson', 'angry', 'funny']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I got you, you want last tags (kung fu panda, fight.webm) that is after <code>1\GIFs\</code>- If you add more content-string then I can normalize code for you.
 This code just extracts tags and generates a regular list.
    import re</p>
<pre><code>s="""d:\images\tagging 1\GIFs\kung fu panda, fight.webm
d:\images\tagging 1\GIFs\kung fu panda, fight (2).webm
d:\images\tagging 1\GIFs\kung fu panda 2, fight.webm
d:\images\tagging 1\GIFs\kung fu panda 2, fight (2).webm
d:\images\tagging 1\GIFs\pulp fiction, samuel l. jackson, angry, funny.webm"""

lines = s.split('\n')# Just generate a list of lines
for t in lines:
    data = re.search(r'1\\GIFs\\(.+$)',t)
    print data.group(1).split(',')
</code></pre>
<p>Output-</p>
<pre><code>['kung fu panda', ' fight.webm']
['kung fu panda', ' fight (2).webm']
['kung fu panda 2', ' fight.webm']
['kung fu panda 2', ' fight (2).webm']
['pulp fiction', ' samuel l. jackson', ' angry', ' funny.webm']
</code></pre>
<p>Expression <code>1\\GIFs\\(.+$)</code> will capture last tags that is after <code>1\\GIFs</code></p>
<h2><strong>SEE <kbd><a href="https://regex101.com/r/sX4xN4/1" rel="nofollow">LIVE-DEMO</a></kbd></strong></h2>
</div>
<span class="comment-copy">for your examples. please include what the output/result is supposed to look like</span>
<span class="comment-copy">See <a href="https://regex101.com/r/zG3vG9/1" rel="nofollow noreferrer"><code>^d:\\images\\tagging\s1\\GIFs\\([^\\.\n]+\.[^\\.\n]+)$</code></a></span>
<span class="comment-copy">@WiktorStribi≈ºew, that pattern fails while matching such string: "d:\images\tagging 1\GIFs\pulp fiction, samuel l. jackson, angry, funny(3).webm"</span>
<span class="comment-copy">Then <a href="https://regex101.com/r/zG3vG9/2" rel="nofollow noreferrer"><code>^d:\\images\\tagging\s1\\GIFs\\([^\\]+\.[^\\.]+)$</code></a></span>
<span class="comment-copy">note that on my linux machine, this does not work. <code>ntpath.basename</code> might be the more reliable choice... depending on what the question is :)</span>
<span class="comment-copy">@timgeb, thanks for the suggestion. It doesn't work on my Linux machine either. But it should work on the OP's machine, assuming it's a Windows box, which I think is reasonable considering the input. I've added a comment to my code snippet mentioning <code>ntpath</code> since it's a useful addition.</span>
