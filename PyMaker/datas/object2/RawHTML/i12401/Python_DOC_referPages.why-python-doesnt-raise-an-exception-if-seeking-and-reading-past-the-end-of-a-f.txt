<div class="post-text" itemprop="text">
<p>I was writing unit tests to see what would happen if my code was seeking and reading past the end of a binary file opened in read only and binary mode (<code>rb</code> mode).</p>
<p>I was pretty sure an exception would be raised in that case, but it is not (tested on Python 3.x):</p>
<pre><code>&gt;&gt;&gt; fname = r"c:\tmp\test.bin"
&gt;&gt;&gt; os.path.getsize(fname)
60
&gt;&gt;&gt; f = open(fname, "rb")
&gt;&gt;&gt; f.seek(100)
100
&gt;&gt;&gt; f.tell()
100
&gt;&gt;&gt; f.read()
b''
&gt;&gt;&gt;
</code></pre>
<p>Questions:</p>
<ul>
<li>Why is this behavior allowed (inherited from C?)? I understand the behavior for files in write mode, but not in read-only mode.</li>
<li>Is reading past the end of a file considered an undefined behavior? Does it return always an empty <code>bytes</code>? Is it implementation defined?</li>
</ul>
<p><strong>Edit</strong>: changed mode from <code>r+b</code> to <code>rb</code> where the behavior is still the same.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your question asks about read mode, but your code demonstrates read-write mode. It is not an error to seek past the end of a writable file, since performing a subsequent write will result in a <a href="https://en.wikipedia.org/wiki/Sparse_file" rel="nofollow"><strong>sparse file</strong></a> on filesystems that support it (and zero-fill until the new write on filesystems that don't).</p>
</div>
<span class="comment-copy">@Alik: Those docs are not correct for Py3; they describe it wrapping <code>fread</code>, when in Py3, <a href="https://docs.python.org/3/library/io.html#io.RawIOBase" rel="nofollow noreferrer">they moved to using the raw OS I/O interfaces, not the C standard buffered I/O interfaces</a>, with all buffering implemented in Python directly.</span>
<span class="comment-copy">@ShadowRanger oops, I didn't pay attention to python version OP uses.</span>
<span class="comment-copy"><code>+</code> added to any of <code>r</code>, <code>w</code>, <code>a</code> file mode specifies, that the file will be opened in read-write mode. Binary read-only mode is <code>rb</code>, not <code>r+b</code>. A nice table with filemodes on this page:  <a href="http://www.tutorialspoint.com/python/python_files_io.htm" rel="nofollow noreferrer">tutorialspoint.com/python/python_files_io.htm</a></span>
<span class="comment-copy">@Nikita: Ok ,thank you for your comment, I didn't know. I edited the question with <code>rb</code> mode rather than <code>r+b</code>. The behavior is still the same.</span>
<span class="comment-copy">Could you elaborate on "read-write mode"? I really thought that <code>r+b</code> meant "read <b>only</b> and binary mode" (I also tried with <code>rb</code> to be sure). Am I wrong? Trying to write to the file raise a <code>io.UnsupportedOperation: write</code> exception.</span>
<span class="comment-copy">@Neitsa: Python follows C's <code>fopen(3)</code> flags where possible. <code>"r+"</code> opens an existing file in read-write mode. Read-only and binary is just <code>"rb"</code>.</span>
<span class="comment-copy">oh ok, damn... thank you for the precision. I also tried with <code>rb</code> then, but the behavior is still the same, I still can go past the end of the file and read which is quite nonsensical to me.</span>
