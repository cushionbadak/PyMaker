<div class="post-text" itemprop="text">
<p>I have a lists of integers that I would like to use as keys in python dictionaries.  I'm caching results from a function(s) that takes a list of ints as input.  My current solution:</p>
<pre><code>list_of_ints = [1,20,3,4]
key = str(sorted(list_of_ints))[1:-1].replace(' ','')
</code></pre>
<p>which generates the key '1,3,4,20'.  Seems like there should be a faster/prettier/more-pythonic way to do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use a tuple as a key. Tuples are immutable and hashable, so they're useful as dictionary keys.</p>
<pre><code>list_of_ints = [1, 20, 3, 4]
# tuple(list_of_ints) == (1, 20, 3, 4)

some_dict = {tuple(list_of_ints): "some value", ...}
</code></pre>
<p>Notably they DO care about order, so <code>[1, 20, 3, 4]</code> won't produce the same value as <code>[1, 3, 20, 4]</code></p>
<p>You could even create a container that does this for you.</p>
<pre><code>class MyDict(dict):
    def __getitem__(self, key):
        key = tuple(sorted(key))
        return super().__getitem__(key)
    # similar for pop, get, setdefault, update....

&gt;&gt;&gt; d = MyDict()
&gt;&gt;&gt; d[1,2,3] = 4
&gt;&gt;&gt; d[3,2,1]
4
</code></pre>
<p>Don't try to serialize it yourself. If you do, don't use string manipulation -- it's too ugly. If you are sincerely memory starved or you have hundreds of thousands of these records, you could save insignificant space by serializing like:</p>
<pre><code>def my_serialize(key_nums: list):
    key_nums = sorted(key_nums)
    base = max(key_nums)
    sum_ = 0
    for power, num in enumerate(key_nums):
        sum_ += base**power * num
    return sum_
</code></pre>
<p>which should give you a unique (incredibly large!) integer to store that will be smaller in memory than the tuple. Don't do this if you can avoid it -- it's very opaque.</p>
<hr/>
<p>In the comments you mention you will not have duplicate values in the key, so <code>frozenset</code> is definitely what you're looking for.</p>
<pre><code>d = {}
list_of_ints = [1, 20, 3, 4]
d[frozenset(list_of_ints)] = "some value"
</code></pre>
<p><a href="https://docs.python.org/3/library/stdtypes.html#frozenset" rel="nofollow"><code>frozenset</code></a> objects are immutable hashable <code>set</code>-like objects. They are order-agnostic and ignore duplicates.</p>
</div>
<span class="comment-copy">If the lists don't have duplicate elements, you can <a href="https://stackoverflow.com/questions/28566797/is-it-safe-to-use-frozen-set-as-dict-key">use <code>frozenset</code> keys</a>.</span>
<span class="comment-copy">I guess I should add that the order of the ints doesn't matter, so I think I still want the sorted in there, but:      key=tuple(sorted(list_of_ints))  is a lot prettier.</span>
<span class="comment-copy">@I.P.Freeley are there always 4 ints?</span>
<span class="comment-copy">No, variable length.</span>
<span class="comment-copy">The "container" that is order agnostic would probably be better if implemented as a <code>frozenset(...)</code> rather than <code>tuple(sorted(...))</code>.  With that said, your container is still missing a bunch of methods -- <code>.pop</code>, <code>.get</code>, <code>.setdefault</code> and probably others that I'm not remembering at the moment. . .</span>
<span class="comment-copy">Yes, I should not have repeat values, so I think <code>frozenset</code> is the answer I'm looking for.</span>
