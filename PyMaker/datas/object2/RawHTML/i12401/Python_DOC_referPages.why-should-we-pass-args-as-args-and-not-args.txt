<div class="post-text" itemprop="text">
<p>As I'm reading the Django documentation, I see this in the example:</p>
<pre><code>from django.db import models

class HandField(models.Field):

    description = "A hand of cards (bridge style)"

    def __init__(self, *args, **kwargs):
        kwargs['max_length'] = 104
        super(HandField, self).__init__(*args, **kwargs)
</code></pre>
<p>I dont understand why the call to super is:</p>
<pre><code>super(HandField, self).__init__(*args, **kwargs)
</code></pre>
<p>whereas (coming from C programming) I thought it should be:</p>
<pre><code>super(HandField, self).__init__(args, kwargs)
</code></pre>
<p>How comes?</p>
<p>Yes. And I'm not asking what mean "<code>*</code>" and "<code>**</code>" (link marked as a duplicate), I'm asking <strong>why</strong> it's not re-sent <strong>without</strong> the star = why it's re-sent to parent <strong>with the stars</strong>, which means to me: "dictionary of a dictionary". And my question is different from the duplicate link, and the duplicate link doesnt answer to my question.</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason you use <code>*</code>/<code>**</code> is to unpack the packed values you were given. When your class is initialized, it might be initialized with:</p>
<pre><code>HandField(1, 2, 3, abc=4, xyz=5)
</code></pre>
<p>Because it receives the arguments using variable length positional (<code>*</code>) and dynamic keyword (<code>**</code>) arguments (to avoid needing to remember and deal with the specifics of what its parent class constructor receives), <code>args</code> is received as <code>(1, 2, 3)</code> and <code>kwargs</code> is <code>{'abc': 4, 'xyz': 5}</code>. If the parent class is defined with a <code>__init__</code> of:</p>
<pre><code>def __init__(self, a1, a2, a3, spam=6, eggs=7, abc=None, xyz=None):
</code></pre>
<p>then calling <code>super(HandField, self).__init__(args, kwargs)</code> would pass the <code>args</code> <code>tuple</code> as <code>a1</code>, the <code>kwargs</code> <code>dict</code> as <code>a2</code>, and pass nothing at all for <code>a3</code> or other arguments. By <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow">unpacking <code>args</code> and <code>kwargs</code></a>, you convert back to individual positional and keyword arguments, so <code>a1</code> would get <code>1</code>, <code>a2</code> <code>2</code>, <code>a3</code> <code>3</code>, <code>abc</code> <code>4</code> and <code>xyz</code> <code>5</code>.</p>
<p>Basically, they're inverse operations; if you accept <code>*</code>, then the caller passes positional arguments one by one and they are "packed" into a single <code>tuple</code>, accepting <code>**</code> accepts individual keyword arguments "packed" as a single <code>dict</code>. If you want to pass them along the same way, you "unpack" them to make them individual arguments, not collections of arguments.</p>
</div>
<span class="comment-copy">Are you thinking that the <code>*</code> here idicates a pointer?</span>
<span class="comment-copy">@OlivierPons: Why would you think it means "dictionary of a dictionary"? The answers in the duplicate explain exactly what calling a function with <code>*</code> and <code>**</code> arguments does, and it doesn't do what you're saying.</span>
<span class="comment-copy">You call <code>foo(*args, **kwargs)</code> and not <code>foo(args, kwargs)</code> because <code>foo</code> accepts <i>some positional and keyword args</i> and <b>not</b> <i>tuple and dict</i>, because <code>args</code> is <i>just</i> tuple and <code>kwargs</code> is <i>just</i> dict</span>
<span class="comment-copy">In a function definition they map  many parameters to single variables. Positional parameters to a tuple, named parameters to a dictionary. In a function call, they go backwards, they expand single variables out to multiple parameters.  A tuple -&gt; positional parameters, a dictionary -&gt; named parameters.</span>
<span class="comment-copy">@OlivierPons: The duplicate does answer your question if you read a little further. The accepted answer first covers receiving <code>*</code> and <code>**</code>, then near the end covers <i>passing</i> using <code>*</code> and <code>**</code>.</span>
