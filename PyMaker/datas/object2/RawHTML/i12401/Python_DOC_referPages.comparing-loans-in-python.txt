<div class="post-text" itemprop="text">
<p>I am doing an assignment for my Python class. I almost figured it out but my output is just a little bit different with the one showed in the original problem. When interest rate is 5.125%, I have a Monthly Payment for 189.29, but the output from the problem is 188.28. The original number without format is 189.286. I guess maybe in the finance system, they just simply cut the decimals instead of using "round". I am not sure if there is any way to do that in Python.  Here is the problem.</p>
<p>Write a program that lets the user enter the loan amount and loan period in number of years and displays the monthly and total payments for each interest rate starting from 5% to 8%, with an increment of 1/8. </p>
<p>Input:</p>
<pre><code>Loan Amount: 10000
Number of Years: 5
</code></pre>
<p>Output:</p>
<pre><code>Interest Rate   Monthly Payment Total Payment
5.000%          188.71          11322.74
5.125%          189.29          11357.13
...    
7.875%          202.17          12129.97
8.000%          202.76          12165.84
</code></pre>
<p>Code:</p>
<pre><code>LoanAmount = float(input("Loan Amount:"))
NumOfYears = float(input("Number of Years:"))
AnnualRate = float(5.0)
print("\nInterest Rate\t" + "Monthly Payment\t" + "Total Payment")
while (AnnualRate &lt;= 8.0):
    MonthlyRate = float(AnnualRate/1200)
    MonthlyPayment = float(LoanAmount * MonthlyRate / (1- 1/ pow(1+MonthlyRate, NumOfYears *12)))
    TotalPayment = format(MonthlyPayment * NumOfYears * 12, ".2f")
    print (format(AnnualRate, ".3f"), end = "%\t\t")
    print (format(MonthlyPayment, ".2f"), end = "\t\t")
    print(TotalPayment, end = "\n")
    AnnualRate += 1.0/8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you work with money use the <a href="https://docs.python.org/3/library/decimal.html?highlight=decimal#module-decimal" rel="nofollow">decimal</a> module. This allows many different <a href="https://docs.python.org/3/library/decimal.html?highlight=decimal#rounding-modes" rel="nofollow">rounding modes</a>. For example, round down:</p>
<pre><code>import decimal

payment = decimal.Decimal('189.286')
with decimal.localcontext() as ctx:
    ctx.rounding = decimal.ROUND_DOWN
    print(round(payment, 2))
</code></pre>
<p>Prints:</p>
<pre><code>189.28
</code></pre>
<p><a href="https://blogs.msdn.microsoft.com/ericlippert/2003/09/26/bankers-rounding/" rel="nofollow">Bankers' rounding</a> would be:</p>
<blockquote>
<pre><code>decimal.ROUND_HALF_EVEN
</code></pre>
<p>Round to nearest with ties going to nearest even integer.</p>
</blockquote>
<pre><code>with decimal.localcontext() as ctx:
    ctx.rounding = decimal.ROUND_HALF_EVEN
    print(round(payment, 2))
</code></pre>
</div>
<span class="comment-copy">You might want to read about <a href="https://blogs.msdn.microsoft.com/ericlippert/2003/09/26/bankers-rounding/" rel="nofollow noreferrer">Banker's Rounding</a> which is not the same as always rounding up, always rounding down <i>or</i> always truncating.</span>
<span class="comment-copy">Note that choice of rounding depends on accounting rules in your locale, for example quoting Wikipedia" <code>To the contrary, section 2 of the European Commission report The Introduction of the Euro and the Rounding of Currency Amounts [19] suggests that there had previously been no standard approach to rounding in banking; and it specifies that "half-way" amounts should be rounded up.</code></span>
<span class="comment-copy">Bankers' rounding is already there.</span>
<span class="comment-copy">Does it solve your problem?</span>
