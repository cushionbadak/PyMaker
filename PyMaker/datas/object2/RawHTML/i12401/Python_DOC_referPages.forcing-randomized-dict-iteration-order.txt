<div class="post-text" itemprop="text">
<p>I have a fairly complex set of data (dict of keys-to-list-of-dicts of etc.) that passes through a fairly complex set of transformation functions to arrive at a final structure.</p>
<p>Very rarely during testing, the unit tests I have fail with an error due to one of the lists coming back with the items in an unexpected order. </p>
<p>I believe this is due to iterating over a dict without sorting the keys, but I cannot find a case where that happens by code review, and trying to inspect the intermediate values is difficult because the failures only happen on our CI server.</p>
<p>Is it possible to instruct python to randomize the order of all dict iteration? I'm pretty sure that doing so would make it easy to debug locally (or rule out my hunch entirely).</p>
<p>I'm open to doing hacky things like messing with the metaclass of dict or w/e, just for local testing. I cannot easily do things like "manually wrap all dicts with this function call" since I've already tried similar with <code>sorted</code> and it didn't fix things.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you have to use a <code>dict</code> (and can't use an <code>OrderedDict</code> as @Oscar Loper is suggesting), use <code>sorted(your_dict.keys())</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 2.7.3 (among others) supports hash randomization (off by default in the 2.x series at least), which can be turned on via <code>env PYTHONHASHSEED=random</code> or the <code>-R</code> CLI argument. </p>
<p>Thanks @jonrsharpe for pointing out that such exists.</p>
<p>See: <a href="https://mail.python.org/pipermail/python-dev/2012-April/118676.html" rel="nofollow">https://mail.python.org/pipermail/python-dev/2012-April/118676.html</a></p>
</div>
<span class="comment-copy">I think you're approaching this from the wrong direction. If your test is expecting a certain order but you're not explicitly sorting anything or using an OrderedDict, your test is wrong.</span>
<span class="comment-copy">Note that in 3.3 and up hash randomisation (and therefore dict order randomisation) is the default - <a href="https://docs.python.org/3/whatsnew/3.3.html" rel="nofollow noreferrer">docs.python.org/3/whatsnew/3.3.html</a></span>
<span class="comment-copy">I've already tried wrapping all of the iteration points I can find with <code>sorted</code>, but the problem persists. I'm trying to determine conclusively if the issue is dict iteration or not, without having to make a ton of edits to my code.</span>
<span class="comment-copy">Agree with @dtanders, it sounds like your tests are overzealous. Consider what you actually want to test in the output, rather than throwing <code>sorted</code> around until the problem disappears. For example, if you just want to see that the expected and actual outputs have the same items, compare sets instead of lists.</span>
