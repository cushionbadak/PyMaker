<div class="post-text" itemprop="text">
<p>I want to calculate the distance between all elements of tensor1 and tensor2. tensor1 and tensor 2 are of various sizes. Is there an existing method for this, also, what is the most efficient way to do this?</p>
<pre><code>tensor1   tensor2
[1 2 3]   [11 12]
[4 5 6]   [13 14]
[7 8 9]   [15 16]
</code></pre>
<p>I want to find the distance between tensor1[0,0] and all elements of tensor2, and the same for all indices.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this does what you want:</p>
<pre><code>import tensorflow as tf

def all_distances(a, b):
    dists = tf.expand_dims(tf.reshape(a, [-1]), 1) - tf.reshape(b, [-1])
    return tf.reshape(dists, tf.concat([tf.shape(a), tf.shape(b)], axis=0))

with tf.Graph().as_default(), tf.Session() as sess:
    a = tf.constant([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
    b = tf.constant([[11, 12], [13, 14], [15, 16]])
    dists = all_distances(a, b)
    print(sess.run(dists))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>[[[[-10 -11]
   [-12 -13]
   [-14 -15]]

  [[ -9 -10]
   [-11 -12]
   [-13 -14]]

  [[ -8  -9]
   [-10 -11]
   [-12 -13]]]


 [[[ -7  -8]
   [ -9 -10]
   [-11 -12]]

  [[ -6  -7]
   [ -8  -9]
   [-10 -11]]

  [[ -5  -6]
   [ -7  -8]
   [ -9 -10]]]


 [[[ -4  -5]
   [ -6  -7]
   [ -8  -9]]

  [[ -3  -4]
   [ -5  -6]
   [ -7  -8]]

  [[ -2  -3]
   [ -4  -5]
   [ -6  -7]]]]
</code></pre>
<p>The result is a tensor such that <code>dists[i1, .., in, j1, .., jm]</code> is <code>a[i1, .., in] - b[j1, .., jm]</code>, with <code>n</code> and <code>m</code> being the number of dimensions of <code>a</code> and <code>b</code> respectively.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <code>tf.meshgrid</code> to achieve it.</p>
<pre><code>import tensorflow as tf
import numpy as np

a = np.array([[1,2,3],[4,5,6],[7,8,9]])
b = np.array([[11,12],[13,14],[15,16]])

a_tf = tf.placeholder(shape=(None,None),dtype=tf.float32)
b_tf = tf.placeholder(shape=(None,None),dtype=tf.float32)

A,B = tf.meshgrid(a_tf,b_tf)
result = tf.transpose(A-B) # two dimension
result = tf.reshape(result,shape=(-1,tf.shape(b_tf)[0],tf.shape(b_tf)[1]))  # three dimension

with tf.Session() as sess:
    print(sess.run(result, feed_dict={a_tf: a, b_tf: b}))

[[[-10. -11.]
  [-12. -13.]
  [-14. -15.]]

 [[ -9. -10.]
  [-11. -12.]
  [-13. -14.]]

 [[ -8.  -9.]
  [-10. -11.]
  [-12. -13.]]

 [[ -7.  -8.]
  [ -9. -10.]
  [-11. -12.]]

 [[ -6.  -7.]
  [ -8.  -9.]
  [-10. -11.]]

 [[ -5.  -6.]
  [ -7.  -8.]
  [ -9. -10.]]

 [[ -4.  -5.]
  [ -6.  -7.]
  [ -8.  -9.]]

 [[ -3.  -4.]
  [ -5.  -6.]
  [ -7.  -8.]]

 [[ -2.  -3.]
  [ -4.  -5.]
  [ -6.  -7.]]]
</code></pre>
</div>
<span class="comment-copy">What output do you expect? Can you give a example ?</span>
<span class="comment-copy">Aren't tensors supposed to be 3-dimensional? Yours look like matrices</span>
<span class="comment-copy">[[dist(1,11),dist(1,12),dist(1,13),dist(1,14),dist(1,15),dist(1,16)], [dist(2,11),dist(2,12),dist(2,3),dist(2,14),dist(2,15),dist(2,16)],....]</span>
<span class="comment-copy">@Albert yes, I'm just demonstrating the idea, naturally they will be 3 dimensional...</span>
