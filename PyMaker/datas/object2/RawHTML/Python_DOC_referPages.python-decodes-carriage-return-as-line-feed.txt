<div class="post-text" itemprop="text">
<p>I am struggling to find an explanation on why python decodes carriage return as line feed.</p>
<p>I have here for the example a text file of one line containing a Carriage Return character (\r).
If I open it as a text file specifying the encoding, I do not find the same string that if open the file in binary mode and the decode it with this same encoding.</p>
<p>Indeed when I open the file in text mode, the CR character is replaced with a Line Feed one (\n).</p>
<p>Why ?</p>
<pre><code>with open("text.txt", encoding="utf-8", mode="r") as f:
    txt = f.read()
txt
&gt;&gt;&gt;'4312;"blabla";";\n";"blabla2"\n'

with open("text.txt", mode="rb") as f:
    txt2 = f.read()
txt2.decode("utf-8")
&gt;&gt;&gt;'4312;"blabla";";\r";"blabla2"\n'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This has nothing to do with encoding.</p>
<p>When you open the file in "r" (text) mode, then universal newline support applies unless you specify something else. That works as follows:</p>
<blockquote>
<p>When reading input from the stream, if newline is None, universal
  newlines mode is enabled. Lines in the input can end in '\n', '\r', or
  '\r\n', and these are translated into '\n' before being returned to
  the caller.</p>
</blockquote>
<p>At <a href="https://docs.python.org/3/library/io.html" rel="nofollow noreferrer">https://docs.python.org/3/library/io.html</a> under class <code>io.TextIOWrapper</code>.</p>
<p>When you open the file in "rb" (binary) mode, then you get exactly what is in the file. </p>
<p>It looks like your file has <code>\r</code> in it and when you read it in text mode, you are getting it normalized to <code>\n</code>. But in binary mode it is (of course) not normalized, so you get the inconsistent EOLs that are actually in the file.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because the <code>open</code> function's universal newline mode, enabled by default, automatically normalizes <code>'\r'</code> and <code>'\r\n'</code> into <code>'\n'</code>. You can use the <code>newline=''</code> argument if you prefer that the original line endings be preserved instead:</p>
<pre><code>with open("text.txt", encoding="utf-8", mode="r", newline='') as f:
</code></pre>
<p>Excerpt from the <a href="https://docs.python.org/release/3.2/library/functions.html#open" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p><code>newline</code> controls how universal newlines works (it only applies to text
  mode). It can be None, <code>''</code>, <code>'\n'</code>, <code>'\r'</code>, and <code>'\r\n'</code>. It works as
  follows:</p>
<ul>
<li>On input, if <code>newline</code> is <code>None</code>, universal newlines mode is enabled. Lines in the input can end in <code>'\n'</code>, <code>'\r'</code>, or <code>'\r\n'</code>, and these are
  translated into <code>'\n'</code> before being returned to the caller. If it is <code>''</code>,
  universal newline mode is enabled, but line endings are returned to
  the caller untranslated. If it has any of the other legal values,
  input lines are only terminated by the given string, and the line
  ending is returned to the caller untranslated.</li>
<li>On output, if <code>newline</code> is <code>None</code>, any <code>'\n'</code> characters written are translated to the system default line separator, <code>os.linesep</code>. If
  newline is <code>''</code>, no translation takes place. If <code>newline</code> is any of the
  other legal values, any <code>'\n'</code> characters written are translated to the
  given string.</li>
</ul>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The full list of default parameter of open are:</p>
<pre><code>open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True)
</code></pre>
<p>The <code>newline=None</code> parameter is behind the behavior that you noticed. This parameter when not specified (a.k.a newline=None) results on activating "Universal newline mode". As stated in the documentation, <a href="https://docs.python.org/release/3.2/library/functions.html#open" rel="nofollow noreferrer">here</a>, this means that <code>\r\n</code> will be translated to <code>\n</code> automatically:</p>
<blockquote>
<p>On input, if newline is None, universal newlines mode is enabled.
  Lines in the input can end in '\n', '\r', or '\r\n', and these are
  translated into '\n' before being returned to the caller.</p>
</blockquote>
<p>When you open the file with <code>mode=rb</code>, the data is loaded as bytes and won't be decoded, thus the automtic translation of <code>\r</code> to <code>\n</code> won't be done.</p>
<blockquote>
<p>Files opened in binary mode (including 'b' in the mode argument)
  return contents as bytes objects without any decoding</p>
</blockquote>
<hr/>
<p>More on universal newline support in <a href="https://www.python.org/dev/peps/pep-0278/" rel="nofollow noreferrer">PEP 278 -- Universal Newline Support</a>. </p>
</div>
