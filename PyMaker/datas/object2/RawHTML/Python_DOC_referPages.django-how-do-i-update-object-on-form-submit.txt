<div class="post-text" itemprop="text">
<p>Possibly a newbie question, so please bear with me.</p>
<p>I have a Django form that edits a certain instance of a Model. In order to know which object is being edited, I have a hidden field containing the id of the object, along with the URL containing the id. </p>
<p><strong>First question</strong>: Is having the id of the object in a hidden field the right way of doing it?</p>
<p>My (possibly unfounded) concern with having it only as part of the url is that someone could then open the page of one object id, submit the form to another, and that object will then be overwritten. That's why I'm trying to use a hidden field.</p>
<p>The problem with storing the id in a hidden field is that, on validation of the form, Django complains that the object does not have an unique id (obviously). </p>
<p><strong>Second question</strong>: If a unique field is part of a form, how does one tell Django to ignore the fact that that key already exists, in order to update the object?</p>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you just use ModelForm?</p>
<pre><code># forms.py
# ...
class MyForm(forms.ModelForm):
    class Meta:
        model = MyModel

# views.py
# ...    
def my_view(request, id): 
    instance = get_object_or_404(MyModel, id=id)
    form = MyForm(request.POST or None, instance=instance)
    if form.is_valid():
        form.save()
        return redirect('next_view')
    return render(request, 'my_template.html', {'form': form}) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Update for Django 1.6 and further version</p>
<pre><code># forms.py
# ...
class MyForm(forms.ModelForm):

     class Meta:
     model = MyModel

# views.py  

def my_view(request, id): 
    instance = MyModel.objects.get(id=id)
    form = MyForm(request.POST or None, instance=instance)
    if form.is_valid():
          form.save()
          return redirect('next_view')
return direct_to_template(request, 'my_template.html', {'form': form})  
</code></pre>
</div>
<span class="comment-copy">Can you show me your form? PS: Yes, without safeguards in place (permissions), <code>/edit/{{ id }}/</code> would be accessible by anybody and dangerous.</span>
<span class="comment-copy">Well, I do have safeguards, such as checking that the object belongs to the signed in user - but even then that user (for some reason unknown to me) could go edit an unintended object.</span>
<span class="comment-copy">Fantastic - it's that <code>instance</code> parameter that I was missing. The great world wide web does seem to have quite a lack of tutorials regarding editing objects with forms in Django.</span>
<span class="comment-copy">That's the right way, but it does not answer : How did your view got this "id" argument ? the url mapping or an hidden field are the only ways ?</span>
<span class="comment-copy">Yes, and there is nothing wrong with it. You can probably juggle with sessions but I really don't see a point. If id is passed to view then the view can determine whether user has permission to update the object or not and developer should enforce this check regardless of the way the view gets object's id.</span>
<span class="comment-copy">If the view contains a file or picture what would be the views description?</span>
<span class="comment-copy">Leonardo MyForm(request.POST or None, request.FILES or None, ...)</span>
<span class="comment-copy">How do I pass an argument from the template to the my_view function?  I mean with {% url 'my_view' %}</span>
<span class="comment-copy">whats the difference between the accepted answer and this one?</span>
