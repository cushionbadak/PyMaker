<div class="post-text" itemprop="text">
<p>I'm working on a game in Pygame that includes a player class and an enemy class. Each class has multiple variables within it. I'm trying to figure out how I can save the data of these sprites by using Python's built-in <code>pickle</code> module. I thought of doing something similar to this:</p>
<pre><code>data_file = open_file("save.dat","wb")
for i in enemyList:
    pickle.dump(i.health)
    pickle.dump(i.rect.x)
    pickle.dump(i.rect.y)
    pickle.dump(i.image)
</code></pre>
<p>and so on for each variable. How can I save the data and retrieve it in the same state it was in previously?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Answer</strong></p>
<p>Since pickle is object serialization, you should just be able to dump your whole object. The <code>b</code> in <code>wb</code> is for binary. This is because you don't have to know how an object is represented in binary, you can just dump it like so:</p>
<pre><code>data_file = open_file("save.dat","wb")
for i in enemyList:
  pickle.dump(i, data_file)
</code></pre>
<p>Then when you load it back in you will have the whole object.</p>
<p>To open it:</p>
<pre><code>with open('save.dat', 'rb') as fp:
  i = pickle.load(fp)
</code></pre>
<p>I havn't used pickle before, but since it is all binary you should just be able to dump your enemyList if it an object:</p>
<pre><code>data_file = open_file("save.dat","wb")
pickle.dump(enemyList, data_file)

with open('save.dat', 'rb') as fp:
  enemyList = pickle.load(fp)
</code></pre>
<p><strong>Excluding/Including Additional State</strong></p>
<p>Pickle uses the <code>__getstate__</code> and <code>__setstate__</code> methods to alter state before reading and writing pickle serialized data. If you wish to omit un-serialization data you must override these methods. Here is the documentation to help you in doing so:</p>
<p><a href="https://docs.python.org/3/library/pickle.html#example" rel="nofollow">Pickle State</a></p>
<p><strong>Consideration</strong></p>
<p>Serialization (and therefor python pickle) is seen as an alternative to creating your own file format. Which often times, I find to be easier depending on the data types. If you are not in control of your object hierarchy, sometimes you don't want to create your own inherited object to try and gain control of all the data. Sometimes it is just easier to write your own file format. </p>
</div>
<span class="comment-copy">It's giving me <code>TypeError: can't pickle Surface objects</code> which I believe is because my enemyList has an image stored as one of its variables. I'm not sure how I could get around this..</span>
<span class="comment-copy">I've added instructions for resolving your issue with some data not being able to be serialized.</span>
