<div class="post-text" itemprop="text">
<p>Sometimes an argument to a function I write can be of any type as long as it is a <a href="https://docs.python.org/3/glossary.html#term-hashable" rel="nofollow">hashable</a> - for instance, because my function adds it to a set or uses it as a dictionary key.</p>
<p>Is there a way to type-hint this fact using the PEP 484 type hints introduced in Python 3.5? The <a href="https://docs.python.org/3/library/typing.html" rel="nofollow"><code>typing</code></a> module doesn't seem to include a hashable type, but is there some other way?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>typing</code> module <em>does</em> in fact contain a <a href="https://docs.python.org/3/library/typing.html#typing.Hashable" rel="nofollow noreferrer"><code>Hashable</code></a> type (now documented). It's an alias for <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Hashable" rel="nofollow noreferrer"><code>collections.abc.Hashable</code></a>.</p>
<pre><code>&gt;&gt;&gt; import typing
&gt;&gt;&gt; typing.Hashable
&lt;class 'collections.abc.Hashable'&gt;
</code></pre>
</div>
<span class="comment-copy">I was just going to post the exact same answer. If an ABC will do, <code>typing</code> re-exports it. There is <code>typing.Generator</code> and <code>typing.Sized</code> too.</span>
<span class="comment-copy">I think that's the case becaus hashable doesn't need to be generic so there is no gain in "reimplementing" it in <code>typing</code> whereas a list (or collection) needs the generic information for type safety.</span>
