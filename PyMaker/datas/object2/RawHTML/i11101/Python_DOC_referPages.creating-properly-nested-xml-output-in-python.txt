<div class="post-text" itemprop="text">
<p>I'm attempting to save data from several lists in XML format, but I cannot understand how to make the XML display properly. An example of my code right now is as follows:</p>
<pre><code>from lxml import etree

#Create XML Root
articles = etree.Element('root')

#Create Lists &amp; Data
t_list = ['title1', 'title2', 'title3', 'title4', 'title5']
c_list = ['content1', 'content2', 'content3', 'content4', 'content5']
sum_list = ['summary1', 'summary2', 'summary3', 'summary4', 'summary5']
s_list = ['source1', 'source2', 'source3', 'source4', 'source5']

i = 0
for t in t_list:
    for i in range(len(t_list)):
        #Create SubElements of XML Root
        article = etree.SubElement(articles, 'Article')
        titles = etree.SubElement(article, 'Title')
        summary = etree.SubElement(article, 'Summary')
        source = etree.SubElement(article, 'Source')
        content = etree.SubElement(article, 'Content')

        #Add List Data to SubElements
        titles.text = t_list[i]
        summary.text = sum_list[i]
        source.text = s_list[i]
        content.text = c_list[i]

print(etree.tostring(articles, pretty_print=True))
</code></pre>
<p>My Current Output is written in one very jumbled fashion, all on a single line as follows:</p>
<pre><code>b'&lt;root&gt;\n  &lt;Article&gt;\n    &lt;Title&gt;title1&lt;/Title&gt;\n    &lt;Summary&gt;summary1&lt;/Summary&gt;\n    &lt;Source&gt;source1&lt;/Source&gt;\n    &lt;Content&gt;content1&lt;/Content&gt;\n  &lt;/Article&gt;\n
</code></pre>
<p>It looks like the <code>pretty_print</code> function within <code>lxml</code> is adding proper indentation, as well as <code>\n</code> breaks as I would want, but it doesn't seem to be getting interpreted correctly during output; it write on a single line.</p>
<p>The output I'm trying to get is as follows:</p>
<pre><code>&lt;root&gt;
  &lt;Article&gt;
    &lt;Title&gt;title1&lt;/Title&gt;
    &lt;Summary&gt;summary1&lt;/Summary&gt;
    &lt;Source&gt;source1&lt;/Source&gt;
    &lt;Content&gt;content1&lt;/Content&gt;
  &lt;/Article&gt;
</code></pre>
<p>Ideally, I'd like for my output to be viewed as a valid XML document, and display in proper nested format.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your "Current Output" is the <em>representation</em> (internal python representation) of the bytestring generated by <code>etree.tostring()</code>, and seems that in Python3 <code>print(somebytestring)</code> prints the representation instead of the actual string.</p>
<p>Hopefully the solution is quite simple: just pass the <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring" rel="nofollow">desired encoding</a> to <code>etree.tostring()</code>, ie:</p>
<pre><code>xml = etree.tostring(articles, encoding="unicode", pretty_print=True) 
print(xml)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've only used the base ET module in Python and can't find an lxml download for python 3.5 (which I'm on) in order to test it, but the <em>b</em> before the line indicates bytes and a quick glance at the documentation indicates that tostring() has an encoding keyword, so you should just need to set that to unicode or utf-8.</p>
<p>I'll also mention that you don't need to set "i" before your for-loop (python will create the "i" it needs for the for-loop), though I- personally- would <em>zip</em> the lists and iterate the items in the lists themselves (though that's not going to have any real impact on the code in this situation).</p>
</div>
<span class="comment-copy">the <code>encoding="unicode"</code> did  exactly what I was wanting</span>
<span class="comment-copy">Thanks, I'm new to Python and regardless of impact on output, I appreciate the advice.</span>
