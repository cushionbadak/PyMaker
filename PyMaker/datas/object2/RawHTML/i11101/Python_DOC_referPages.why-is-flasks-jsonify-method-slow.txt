<div class="post-text" itemprop="text">
<p>I'm writing an API in flask that returns json.  Each flask function is of the form</p>
<pre><code>from flask import jsonify
@app.route('/getdata')
def get_data():
    data = load_data_as_dict()
    return jsonify(data)
</code></pre>
<p>If I return a large amount of data, a call to this function takes around 1.7 seconds.  However, if I do this:</p>
<pre><code>from flask import Response
@app.route('/getdata')
def get_data():
    data = load_data_as_dict()
    data_as_str = json.dumps(data)
    return Response(response=data_as_str, status=200, mimetype="application/json"
</code></pre>
<p>...the function completes in around .05 seconds.  </p>
<p>Can anyone tell me why <code>jsonify</code> is so much slower?  Is there anything wrong with returning a raw Flask response instead?</p>
</div>
<div class="post-text" itemprop="text">
<p>My guess is: it has a lot to do with indentation and making a <code>pretty</code> json dump. Here's the method definition (I stripped the comments to save space, full code can be found <a href="https://github.com/pallets/flask/blob/master/flask/json.py" rel="nofollow noreferrer">here</a>) :</p>
<pre><code>def jsonify(*args, **kwargs):
    indent = None
    separators = (',', ':')

    if current_app.config['JSONIFY_PRETTYPRINT_REGULAR'] and not request.is_xhr:
        indent = 2
        separators = (', ', ': ')

    if args and kwargs:
        raise TypeError('jsonify() behavior undefined when passed both args and kwargs')
    elif len(args) == 1:  # single args are passed directly to dumps()
        data = args[0]
    else:
        data = args or kwargs

    return current_app.response_class(
        (dumps(data, indent=indent, separators=separators), '\n'),
        mimetype=current_app.config['JSONIFY_MIMETYPE']
    )
</code></pre>
<p><code>dumps</code> wraps <code>simplejson.dumps</code> if the module is available, otherwise it uses <code>json.dumps</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>jsonify()</code> just wraps <code>json.dumps()</code>. However, depending upon the config of your Flask app and the Flask version that you're using, it may pass <code>indent=2</code> and <code>separators=(', ', ': ')</code> to <code>json.dumps</code>. (See the docs on pretty-printing at <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">https://docs.python.org/3/library/json.html</a> if you're unfamiliar with these arguments).</p>
<p>Passing these arguments slows down <code>json.dumps</code> dramatically. Using the 181MB <code>citylots.json</code> file from <a href="https://github.com/zemirco/sf-city-lots-json" rel="nofollow noreferrer">https://github.com/zemirco/sf-city-lots-json</a> as sample data, these pretty-printing arguments increase <code>json.dumps()</code>'s runtime from 7 seconds to 31 seconds on my MacBook Pro:</p>
<pre><code>&gt;&gt;&gt; import time 
&gt;&gt;&gt; import json
&gt;&gt;&gt; citylots = json.load(open('citylots.json'))
&gt;&gt;&gt; start = time.time(); x = json.dumps(citylots); print(time.time() - start)
7.165302753448486
&gt;&gt;&gt; x = None
&gt;&gt;&gt; start = time.time(); x = json.dumps(citylots, indent=2, separators=(', ', ': ')); print(time.time() - start)
31.19125771522522
</code></pre>
<p>As of Flask 1.0, this costly pretty-printing will happen if <em>either</em>:</p>
<ul>
<li>You've explicitly set <code>JSONIFY_PRETTYPRINT_REGULAR</code> to <code>True</code> in your app's config (it's <code>False</code> by default), OR</li>
<li>You're running your app in debug mode</li>
</ul>
<p>(You can see these conditions in the Flask 1.0.2 code at <a href="https://github.com/pallets/flask/blob/1.0.2/flask/json/__init__.py#L309" rel="nofollow noreferrer">https://github.com/pallets/flask/blob/1.0.2/flask/json/__init__.py#L309</a>.)</p>
<p>If you are using Flask &gt;=1.0 and have the (probably unusual) need to disable the pretty-printing <em>even in debug</em> mode, you can always implement your own <code>jsonify</code> by copying and pasting the built-in <code>jsonify</code>'s definition and deleting all the pretty-printing logic:</p>
<pre><code>from flask import current_app
from json import dumps

def jsonify(*args, **kwargs):
    if args and kwargs:
        raise TypeError('jsonify() behavior undefined when passed both args and kwargs')
    elif len(args) == 1:  # single args are passed directly to dumps()
        data = args[0]
    else:
        data = args or kwargs

    return current_app.response_class(
        dumps(data) + '\n',
        mimetype=current_app.config['JSONIFY_MIMETYPE']
    )
</code></pre>
<p>If you're in a version Flask <em>prior</em> to 1.0, then pretty-printing instead happens if both:</p>
<ul>
<li>You <em>haven't</em> explicitly set <code>JSONIFY_PRETTYPRINT_REGULAR</code> to <code>False</code> in you app's config (it's <code>True</code> by default), AND</li>
<li>The current request is not an XHR request</li>
</ul>
<p>In those older versions, there is never any need to redefine <code>jsonify</code> to eliminate the pretty-printing, since you can just do:</p>
<pre><code>app.config['JSONIFY_PRETTYPRINT_REGULAR'] = False
</code></pre>
<p>(Alternatively, if you're using a pre-1.0 version of Flask and only want to disable the pretty-printing in production, then there's no need to change your code; instead, just upgrade to the latest version of Flask.)</p>
</div>
<div class="post-text" itemprop="text">
<p>It took me a while to figure out,  but Flask <code>jsonify</code> sets the <code>sort_keys</code> argument on the encoder and it seems it defaults to <code>True</code>. </p>
<p>Adding:</p>
<pre><code>JSON_SORT_KEYS = False
</code></pre>
<p>To the configuration gave me a factor 7 speed up for larger JSON structures.</p>
</div>
<span class="comment-copy">Its true, i tried it. If you redefine jsonify and jsut remove indent, it will work way faster. In my test time changed from 17s to 0.1s, 170 times!</span>
<span class="comment-copy">Oh, wow, that's a pretty big deal that I totally missed in my answer! I might update mine accordingly.</span>
