<div class="post-text" itemprop="text">
<p>For python 3 I want to convert a float to a string, with possibly different length (i.e. number of digits) but with full precision.</p>
<p>Also I need to have a decimal point in any case:</p>
<pre><code>1    -&gt; '1.'
1/10 -&gt; '0.1000000000000000055511151231257827021181583404541015625'
</code></pre>
<p>currently my code is this:</p>
<pre><code>from decimal import Decimal
def formatMostSignificantDigits(x):
    out = str(Decimal(x))
    if out.find('.') &lt; 0:
        out += '.'
    return out
</code></pre>
<p>can this be done more elegantly? (<code>e</code> notation would be possible, too)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use Pythons <a href="https://docs.python.org/3/library/string.html#format-examples" rel="nofollow">string formatting functions</a>:</p>
<pre><code>&gt;&gt;&gt; x = 1.0; '{:.55f}'.format(x)
'1.0000000000000000000000000000000000000000000000000000000'
&gt;&gt;&gt; x = 1/10; '{:.55f}'.format(x)
'0.1000000000000000055511151231257827021181583404541015625'
</code></pre>
<p>If you want to be able to feed it integers (such as <code>1</code>) as well, use <code>'{:.55f}'.format(float(x))</code>.</p>
<p>If you want to strip any trailing zeroes, use <code>'{:.55f}'.format(x).rstrip('0')</code>.</p>
<p>Note that 55 decimals after the point is way overkill (but it's what you showed in your question); 16 digits should suffice to express the full precision of double-precision IEEE 754 floats (20 digits for the 80-bit extended-precision you might encounter).</p>
</div>
<div class="post-text" itemprop="text">
<p>why do you use Decimal, you can just use:</p>
<pre><code>x = 0.1
s = str(x)
print(s)   # this prints '0.1'
</code></pre>
<p>but if you use Decimal for something else than instead of this:</p>
<pre><code>out = str(Decimal(x))
if out.find('.') &lt; 0:
    out += '.'
return out
</code></pre>
<p>you can just use:</p>
<pre><code>return Decimal(x).__str__()
</code></pre>
<p>Edit 1:</p>
<p>also good module for float precision is bigfloat:</p>
<pre><code>from bigfloat import BigFloat
x = 0.1
print(BigFloat(x, precision(300)).__str__())
# thsi will print'0.10000000000000000555111512312578270211815834045410156250000000000000000000000000000000000000'
# but if you use this:
print(BigFloat(x.__str__(), precision(300)).__str__())
# it can be precise as much as you want
print(BigFloat(x.__str__(), precision(100000)).__str__()) # try this
</code></pre>
</div>
<span class="comment-copy">I mean, I would use <code>endswith</code> instead of <code>.find &lt; 0</code>, but other than that it looks fine. This would probably be better for codereview, as "more elegantly" isn't really something objective that we can give you.</span>
<span class="comment-copy">@MorganThrapp How would <code>endswith</code> help with this problem?</span>
<span class="comment-copy">@Selcuk Oh, you're right. Sorry, it's early.</span>
<span class="comment-copy">I would have used <code>'.' in out</code></span>
<span class="comment-copy">55 digits is <i>not</i> overkill, if you want to print out the exact value of the float. 54 digits is not enough for <code>0.1</code>. Smaller numbers will need even more digits. The smallest positive Python <code>float</code> needs over 1000 digits (1074, to be precise) after the point to give the exact value.</span>
<span class="comment-copy">this is the kind of solution I personally was looking for, a one-liner which is easy to understand</span>
<span class="comment-copy">@MarkDickinson a double-precision float has 53 bits of precision (about 16 decimal digits' worth), so if you know the number originated as a float 16 digits is enough to represent the mantissa; anything more is effectively noise, as evidenced by <code>0.38410446334154735661295788101073491302710874766231638 == 0.38410446334154735 =&gt; True</code>. You're right about smaller values requiring more digit after the point though, I did not consider those. That could be fixed by using something like <code>{:.20e}</code>. Ultimately, which exact solution is appropriate depends on the <i>exact</i> needs of the OP.</span>
<span class="comment-copy">@marcelm: Yep. I read the OP's request as wanting enough digits to give the <i>exact</i> value of the float (which is also what conversion to <code>Decimal</code> achieves), in which case you need many digits after the point.</span>
<span class="comment-copy">Also note that 16 <i>significant digits</i> (rather than places after the point) is in general not enough to distinguish two distinct IEEE 754 binary64 floats: you need 17 digits for that (which is why Python's <code>repr</code> in versions prior to Python 2.7 computed 17 significant digits and returned an output based on that computation).</span>
<span class="comment-copy">when you vote down please say what is the reason you are doing it.</span>
<span class="comment-copy">I appreciate your solution, especially the <code>BigFloat</code> hint, thanks</span>
