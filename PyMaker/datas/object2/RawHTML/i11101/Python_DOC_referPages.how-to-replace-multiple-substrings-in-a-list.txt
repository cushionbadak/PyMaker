<div class="post-text" itemprop="text">
<p>I need to turn the input_string into the comment below using a for loop. First I sliced it using the <code>split()</code> function, but now I need to somehow turn the input string into <code>['result1', 'result2', 'result3', 'result5']</code>. I tried replacing the <code>.xls</code> and the dash for nothing (<code>''</code>), but the string output is unchanged.  Please don't import anything, I'm trying to do this with functions and loops only.</p>
<pre><code>input_string = "01-result.xls,2-result.xls,03-result.xls,05-result.xls" 
# Must be turned into ['result1','result2', 'result3', 'result5']

splitted = input_string.split(',')

for c in ['.xls', '-', '0']:
    if c in splitted:
        splitted = splitted.replace(splitted, 'c', '')
</code></pre>
<p>When I type <code>splitted</code>, the output is <code>['01-result.xls', '2-result.xls', '03-result.xls', '05-result.xls']</code> therefore nothing is happening.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">re module's <code>sub</code></a> function and <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>split</code></a>.</p>
<pre><code>&gt;&gt;&gt; input_string = "01-result.xls,2-result.xls,03-result.xls,05-result.xls" 
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'(\d+)-(\w+)\.xls',r'\2\1',input_string)
'result01,result2,result03,result05'
&gt;&gt;&gt; re.sub(r'(\d+)-(\w+)\.xls',r'\2\1',input_string).split(',')
['result01', 'result2', 'result03', 'result05']
</code></pre>
<p>Using no imports, you can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a></p>
<pre><code>&gt;&gt;&gt; [''.join(x.split('.')[0].split('-')[::-1]) for x in input_string.split(',')]
['result01', 'result2', 'result03', 'result05']
</code></pre>
<p>The algo here is, we loop through the string after splitting it on <code>,</code>. Now we split the individual words on <code>.</code> and the first element of these on <code>-</code>. We now have the number and the words, which we can easily <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>join</code>.</a></p>
<hr/>
<p>Complete explanation of the list comp answer -</p>
<p>To understand what a list comprehension is, Read <a href="https://stackoverflow.com/q/34835951/4099593">What does "list comprehension" mean? How does it work and how can I use it?</a></p>
<p>Coming to the answer,</p>
<p>Splitting the input list on <code>,</code>, gives us the list of individual file names</p>
<pre><code>&gt;&gt;&gt; input_string.split(',')
['01-result.xls', '2-result.xls', '03-result.xls', '05-result.xls']
</code></pre>
<p>Now using the list comprehension construct, we can iterate through this,</p>
<pre><code>&gt;&gt;&gt; [i for i in input_string.split(',')]
['01-result.xls', '2-result.xls', '03-result.xls', '05-result.xls']
</code></pre>
<p>As we need only the file name and not the extension, we <code>split</code> by using <code>.</code> and take the first value.</p>
<pre><code>&gt;&gt;&gt; [i.split('.')[0] for i in input_string.split(',')]
['01-result', '2-result', '03-result', '05-result']
</code></pre>
<p>Now again, what we need is the number and the name as two parts. So we again split by <code>-</code></p>
<pre><code>&gt;&gt;&gt; [i.split('.')[0].split('-') for i in input_string.split(',')]
[['01', 'result'], ['2', 'result'], ['03', 'result'], ['05', 'result']]
</code></pre>
<p>Now we have the [number, name] in a list, However the format that we need is <code>"namenumber"</code>. Hence we have two options</p>
<ul>
<li>Concat them like <code>i.split('.')[0].split('-')[1]+i.split('.')[0].split('-')[0]</code>. This is an unnecessarily long way</li>
<li>Reverse them and join. We can use slices to reverse a list (See <a href="https://stackoverflow.com/questions/3940128/how-can-i-reverse-a-list-in-python">How can I reverse a list in python?</a>) and <code>str.join</code> to join like <code>''.join(x.split('.')[0].split('-')[::-1])</code>.</li>
</ul>
<p>So we get our final list comprehension</p>
<pre><code>&gt;&gt;&gt; [''.join(x.split('.')[0].split('-')[::-1]) for x in input_string.split(',')]
['result01', 'result2', 'result03', 'result05']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a solution using list comprehension and string manipulation if you don't want to use re.</p>
<pre><code>input_string = "01-result.xls,2-result.xls,03-result.xls,05-result.xls"
 # Must be turned into ['result1','result2', 'result3', 'result5']

splitted = input_string.split(',')

#Remove extension, then split by hyphen, switch the two values,
#and combine them into the result string
print ["".join(i.split(".")[0].split("-")[::-1]) for i in splitted]

#Output
#['result01', 'result2', 'result03', 'result05']
</code></pre>
<p>The way this list comprehension works is:</p>
<ol>
<li>Take the list of results and remove the ".xls". <code>i.split(".)[0]</code></li>
<li>Split on the <code>-</code> and switch positions of the number and "result". <code>.split("-")[::-1]</code></li>
<li>For every item in the list, join the list into a string. <code>"".join()</code></li>
</ol>
</div>
<span class="comment-copy">I also need this for a general case, not specifically for this case.</span>
<span class="comment-copy">you can use regular expressions</span>
<span class="comment-copy">@BenjaGarrido Yes, They are the easiest to understand but unfortunately they are slower.</span>
<span class="comment-copy">haha I didn't see your list comprehension before I submitted my answer. +1 for the two solutions.</span>
<span class="comment-copy">@Jeremy Thanks, I would not have edited if I saw your answer. :)</span>
<span class="comment-copy">can someone explain exactly what is happening in Rao's list comprehension answer. he's joining then splitting at '-' and '.' ?</span>
<span class="comment-copy">@mariano Done, Please take a look and inform me if you still have any queries</span>
<span class="comment-copy">You are amazing !</span>
<span class="comment-copy">Pro-tip, Always explain outside the code blocks. The CSS for comments is too faded to meet the eye.</span>
