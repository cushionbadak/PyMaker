<div class="post-text" itemprop="text">
<p>What I want to achieve : a list of posible combinations of n coin flips</p>
<p>What I get when I run this code : a list that contains letters from the 2 posible outcomes "heads" and "tails" . Why? I could not figure out .</p>
<pre><code>def randomlist(n):
l = []
for i in range(n):
    a = random.randint(1,2)
    if a == 1:
        l[len(l):] = ("heads")
    else:
        l[len(l):] = ("tails")
return l


listy = randomlist(20)

print(listy)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try using <code>append</code> instead of slice assignment.</p>
<pre><code>def randomlist(n):

    l = []
    for i in range(n):
        a = random.randint(1,2)
        if a == 1:
            l.append("heads")
        else:
            l.append("tails")
    return l
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To generate a random list of <code>n</code> coin flips, you can also use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> to express the same logic in a more concise way:</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; 
&gt;&gt;&gt; def randomlist(n):
...     return ["heads" if random.randint(0, 1) else "tails"
...             for _ in range(n)]
... 
&gt;&gt;&gt; randomlist(10)
['tails', 'tails', 'tails', 'tails', 'heads', 'heads', 'heads', 'tails', 'tails', 'heads']
&gt;&gt;&gt; randomlist(6)
['heads', 'tails', 'heads', 'heads', 'heads', 'heads']
</code></pre>
<p>In the code above, random integers 0 or 1 (as opposed to 1 or 2) are generated to handily use them when deciding between <code>"heads"</code> or <code>"tails"</code> - using the fact that 0 evaluates to <code>False</code>, and 1 to <code>True</code>.</p>
<p>Now, if your intent is to generate <em>all possible</em> outcomes of flipping a coin <code>n</code> times, you can use <a href="https://docs.python.org/3.5/library/itertools.html#itertools.product" rel="nofollow">itertools.product</a>. An example for <code>n=3</code> (the final output shortened for readability):</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; all_outcomes = product(("heads", "tails"), repeat=3)
&gt;&gt;&gt; list(all_outcomes)
[('heads', 'heads', 'heads'), ('heads', 'heads', 'tails'), ...]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use the <code>itertools</code> library. It becomes really simple like that.</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; product(['heads','tails'], repeat=3) # change the repeat parameter to set the length 
&lt;itertools.product object at 0x0000000003B715A0&gt;
&gt;&gt;&gt; import random
&gt;&gt;&gt; list(_)[random.randint(0,len(_))] # get a random sequence
('heads', 'tails', 'heads')
</code></pre>
<p>This comes in handy if you need to quickly generate large number of sequences. Just save the <code>product</code> result in a variable, and retrieve a random index from it.</p>
</div>
<span class="comment-copy">Are they asking this kind of assignment somewhere?, Saw another slice assignment <a href="http://stackoverflow.com/q/37927386/4099593">a few minutes back</a>.</span>
<span class="comment-copy">note that <code>("heads")</code> is not a tuple but a string, that slice assignment would be equivalent to <code>l.extend("heads")</code> which separates the individual characters.</span>
<span class="comment-copy">It worked , thank you !</span>
