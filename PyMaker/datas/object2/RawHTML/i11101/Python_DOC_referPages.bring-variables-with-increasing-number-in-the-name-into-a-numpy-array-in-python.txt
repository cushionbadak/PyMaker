<div class="post-text" itemprop="text">
<p>I have a big number of variables that have an increasing number in their name:</p>
<pre><code>var0 = 2
var1 = 6
...
var999 = 19
</code></pre>
<p>Is there an easy way (maybe with a loop) to create a numpy array that contains the values of the variables as elements?</p>
<pre><code>list[0] = 2
list[1] = 6
...
list[999] = 19
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Variables in Python are always available through your <code>locals</code> (or <code>globals</code>, if in a narrower scope than their definition) dictionary:</p>
<pre><code>&gt;&gt;&gt; x = 2
&gt;&gt;&gt; y = 'Hello !'
&gt;&gt;&gt; 'x' in locals()
True
&gt;&gt;&gt; locals()['x']
2
&gt;&gt;&gt; locals()['y']
'Hello !'
</code></pre>
<p>Using this, it would be simple to iterate through your variables:</p>
<pre><code>i = 0
values = []
while 'var{}'.format(i) in locals():
    values.append(locals()['var{}'.format(i)])
    i += 1
arr = np.array(values)
</code></pre>
<p>(There might be much more elegant ways of doing that, but you get the idea)</p>
<p>As mentionned in comments though, this is a very <em>brittle</em> way of going about it: I mentionned <code>locals</code> vs <code>globals</code>, but know that getting your hands dirty with 'internals' dictionaries is <em>very</em> messy and unreliable. Never use that in production ! If you have a file of variables in the format <code>varXXX = YYYY</code>, you can easily parse that:</p>
<pre><code>values = []
with open('./myfile.xyz', 'r') as f:
    for line in f:
        values.append(float(line.split('=')[1].strip()))
</code></pre>
<p>If the format is more complex (maybe containing other things, or potentially invalid data), you still have a lot of parsing options: the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow">csv</a> module might be a good way to start.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you have a file, say <code>test.txt</code> that looks like that:</p>
<pre><code>var0 = 1
var1 = 2
var3 = 15
</code></pre>
<p>you can do:</p>
<pre><code>t = open('test.txt',r)
data = t.readlines()
t.close()
for line in data:
    name,value = line.split('=')
    name.strip()
    value = int(value.strip())
</code></pre>
<p>and then do whatever you want with those pairs. Put them in a list, process further etc...</p>
</div>
<div class="post-text" itemprop="text">
<p>This should work, using <code>vars()</code> and assuming that no other variable name in the environment starts with "var":</p>
<pre><code>{int(x[0][3:]) : x[1] for x in vars().items() if x[0].startswith('var')}
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; var1 = 8
&gt;&gt;&gt; var2 = 98
&gt;&gt;&gt; {int(x[0][3:]) : x[1] for x in vars().items() if x[0].startswith('var')}
{1: 8, 2: 98}
</code></pre>
<p>You can also use <code>locals()</code>: <a href="https://stackoverflow.com/questions/7969949/whats-the-difference-between-globals-locals-and-vars">What's the difference between globals(), locals(), and vars()?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>you can use the globals or locals function like below:</p>
<p><code>a1 = 5
a2 = 6
alist = []
for i in range(1,3,1):
    alist.append(globals()['a'+str(i)])</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Is it a python file (<code>.py</code>)? You can try this workaround:</p>
<p>Add the following lines to the end of where you have the variables:</p>
<pre><code>from operator import itemgetter # this should go up

d = {k[3:]:v for k, v in locals().items() if k.startswith('var')}
sorted_d = sorted(d.items(), key=itemgetter(0))
lst = [i[1] for i in sorted_d]
# [2, 6, ..., 19]
</code></pre>
<p>Provided no other variables start with <code>var</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If the variables are in a file in valid Python syntax, they can be imported and parsed from there. </p>
<pre><code>from file.py import *
</code></pre>
<p>puts them into the local name space.  But if we don't use <code>*</code> we can isolate them</p>
<pre><code>In [1313]: import stack3797 as varN

In [1314]: values = {i:v for i,v in  vars(varN).items() if i.startswith('var')}

In [1315]: values
Out[1315]: 
{'var8': 19,
 'var2': 7,
 'var7': 17,
 'var0': 3,
 'var6': 15,
 'var3': 9,
 'var9': 21,
 'var1': 5,
 'var5': 13,
 'var4': 11}
</code></pre>
<p>Then any other the other answers that work from <code>locals()</code> can be used to convert this dictionary to an array.</p>
<p>If the <code>varN</code> labeling is consecutive, we can figure out the size of the resulting array from the size of this dictionary.  Otherwise we might have to find the maximum value first.</p>
<p>or we can make a list of lists right away:</p>
<pre><code>values = [[int(i[3:]),v] for i,v in  vars(varN).items() if i.startswith('var')]
</code></pre>
<p>and turn it into a array with</p>
<pre><code>In [1328]: np.array(values).T
Out[1328]: 
array([[ 8,  6,  0,  1,  3,  5,  2,  7,  9,  4],
       [19, 15,  3,  5,  9, 13,  7, 17, 21, 11]])
</code></pre>
<p>That still needs a <code>x[i] = value</code> mapping.</p>
</div>
<span class="comment-copy">Why do you have all these variables in the first place ?</span>
<span class="comment-copy">Just to check if it's an x-y problem: Where do these variables come from?</span>
<span class="comment-copy">I got a file containing these variable definitions. Of course, I know it's not a clever way to store them like that :-). What do you mean by x-y-problem?</span>
<span class="comment-copy">Can you show the file, or at least the structure of the file? PArsing from a file would be a lot easier.</span>
<span class="comment-copy">If you have acces to the code that produces the variables in the first place, it would also be a good idea, to save them in an easier format (e.g. pickle a dictionary)</span>
