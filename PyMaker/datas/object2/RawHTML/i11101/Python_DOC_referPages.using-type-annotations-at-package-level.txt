<div class="post-text" itemprop="text">
<p>I want to use annotations to have better auto-completion in IDEs, and maybe later type testing in automated tests. But how can you add type annotations to many methods without introducing a lot of extra code?</p>
<p>For example, imagine that you have a big code base which uses the Django framework, including about 200 methods with a <code>request</code> argument; adding the type annotations 200 times would bloat the code. </p>
<p>My current idea is to include type annotations at the package level: in <code>setup.py</code> (or somewhere else). I define a rule that says <em>"every time the variable <code>request</code> gets used, it is of type <code>django.http.HttpRequest</code>"</em>. For edge cases where the variable with the name <code>request</code> points to a different type, explicit annotations should be done, but there are very few of these.</p>
<p>How can this be implemented? Are there other ways to achieve the overall goal?</p>
</div>
<div class="post-text" itemprop="text">
<p>If my understanding is correct, this sounds like a use-case for <em>stub files</em> which, as described in <a href="https://www.python.org/dev/peps/pep-0484/#stub-files" rel="nofollow"><strong><code>PEP 484</code></strong></a>: </p>
<blockquote>
<p>Stub files are files containing type hints that are only for use by the type checker, not at runtime.</p>
</blockquote>
<p>Stub files pretty much fulfill your requirement of separating code from type annotations thereby avoiding the bloating and obfuscating effect of complex type hints. They have a prefix of <code>.pyi</code> and, if a type checker implemented by an <code>IDE</code> that wants to conform to <code>PEP 484</code>, must always be examined by the type checker if they exist. </p>
<p>They essentially consist of the annotated function signatures with a body containing a single ellipsis <code>...</code></p>
<hr/>
<p>One way you could go about this is using a helper function to write out your <code>.pyi</code>, or, at least, the bulk of it. There's probably many ways to do this and which is the best is probably another question altogether. </p>
<p>As an example of a way to do this, I'll write out a way to annotate every function in the <code>inspect</code> module that has a parameter named <code>object</code> and doesn't start with an underscore. I'm typing this specific module since I'll also be using it for identifying functions and grabbing their signatures.  </p>
<p>From the <code>inspect</code> module, I'll be using the <a href="https://docs.python.org/3/library/inspect.html#inspect.getmembers" rel="nofollow"><strong><code>getmembers</code></strong></a>, <a href="https://docs.python.org/3/library/inspect.html#inspect.isfunction" rel="nofollow"><strong><code>isfunction</code></strong></a> and <a href="https://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object" rel="nofollow"><strong><code>signature</code></strong></a> functions.</p>
<pre><code># gets members of inspect module {member_name: member_type} dict.
members = getmembers(inspect)  

# loop through members
for name, type in members:

    # grab functions that don't start with an underscore  
    if isfunction(type) and not name.startswith('_'):

        # grab its signature and
        # check if it has a parameter named object
        sig = signature(type)  
        if 'object' in sig.parameters:

            # add the annotation to the object parameter
            param = sig.parameter['object']
            s = sig.replace(parameters = [param.replace(annotation="object")])

            # here you normally write to .pyi file
            print('def {0} {1}: ...'.format(name, s))  
</code></pre>
<p>This logic could be extended to <code>method</code>s, other parameter types and so on. 
Also, <strong>an important note</strong>, the <code>.pyi</code> file should have the same name as the module you're annotating, so in this case it should be <code>inspect.pyi</code>.</p>
<p>For now, this simply prints out all functions which have a parameter named <code>object</code> with the 'annotation' (<code>object</code>) we supplied:</p>
<pre><code>def findsource(object:'object'): ...
def formatannotationrelativeto(object:'object'): ...
def getabsfile(object:'object'): ...
def getcomments(object:'object'): ...
def getdoc(object:'object'): ...
def getfile(object:'object'): ...
def getmembers(object:'object'): ...
def getmodule(object:'object'): ...
def getsource(object:'object'): ...
# .. and so on..
</code></pre>
<p>most production ready checkers will read this <code>.pyi</code> file and provide the functionality you need.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a custom <a href="https://docs.djangoproject.com/en/dev/topics/http/middleware/" rel="nofollow">middleware</a> (untested):</p>
<pre><code>from django.http import HttpRequest

class RequireHttpRequest():
    def process_view(request, view_func, view_args, view_kwargs):
        require_http_request = view_kwargs.get('require_http_request', True)
        if require_http_request and type(h) != HttpRequest:
            raise SomeException
        return None
</code></pre>
<p>By default, this middleware would affect all URLs. For the few URLs for which you do not want to check the type of <code>request</code>, add a parameter in the corresponding lines of urls.py:</p>
<pre><code>url(r'^foo/$', views.your_view, require_http_request=False)
</code></pre>
<p>and put the specific annotations in the definition of <code>my_view()</code>.</p>
</div>
<span class="comment-copy">Thank you very much for this detailed answer. You get the bounty!</span>
<span class="comment-copy">I guess my question was too vague. I added this: I want annotations to have better auto completion in IDEs. Maybe (later) type testing in automated tests.</span>
