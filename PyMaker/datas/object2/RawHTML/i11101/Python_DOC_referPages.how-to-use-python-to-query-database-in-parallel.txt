<div class="post-text" itemprop="text">
<p>I have two functions which I use to query database. Assuming two separate queries, how to run these in parallel to query same database, and also wait for both results to return before continuing the execution of the rest of the code?</p>
<pre><code>def query1(param1, param2):
    result = None
    logging.info("Connecting to database...")
    try:
        conn = connect(host=host, port=port, database=db)
        curs = conn.cursor()
        curs.execute(query)
        result = curs
        curs.close()
        conn.close()
    except Exception as e:
        logging.error("Unable to access database %s" % str(e))
    return result


def query2(param1, param2):
    result = None 
    logging.info("Connecting to database...")
    try:
        conn = connect(host=host, port=port, database=db)
        curs = conn.cursor()
        curs.execute(query)
        result = curs
        curs.close()
        conn.close()  
    except Exception as e:
        logging.error("Unable to access database %s" % str(e))    
    return result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a multi-threaded code that does what you're trying to accomplish:</p>
<pre><code>from threading import Thread, Lock

class DatabaseWorker(Thread):
    __lock = Lock()

    def __init__(self, db, query, result_queue):
        Thread.__init__(self)
        self.db = db
        self.query = query
        self.result_queue = result_queue

    def run(self):
        result = None
        logging.info("Connecting to database...")
        try:
            conn = connect(host=host, port=port, database=self.db)
            curs = conn.cursor()
            curs.execute(self.query)
            result = curs
            curs.close()
            conn.close()
        except Exception as e:
            logging.error("Unable to access database %s" % str(e))
        self.result_queue.append(result)

delay = 1
result_queue = []
worker1 = DatabaseWorker("db1", "select something from sometable",
        result_queue)
worker2 = DatabaseWorker("db1", "select something from othertable",
        result_queue)
worker1.start()
worker2.start()

# Wait for the job to be done
while len(result_queue) &lt; 2:
    sleep(delay)
job_done = True
worker1.join()
worker2.join()
</code></pre>
</div>
<span class="comment-copy">I guess you can take a look to the <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer"><code>threading</code></a> library from the standard collection. Their is some good posts here explaining how to use python threads (and gathering their return values) like <a href="http://stackoverflow.com/questions/6893968/how-to-get-the-return-value-from-a-thread-in-python" title="how to get the return value from a thread in python">stackoverflow.com/questions/6893968/â€¦</a> (it's not really <i>parallelism</i> on python side, but both requests will be made almost simultaneously).</span>
<span class="comment-copy">thank you @th3an0maly but what is q1 and q2?</span>
<span class="comment-copy">Oops, sorry. Edited them to be <code>worker1</code> and <code>worker2</code>. I had written my test using those variables names first, and later changed them to match your code :)</span>
<span class="comment-copy">Thank you! by the way I got error on <code>result_queue.size&lt;2</code>. that <code>list has no attribute size</code> so I changed <code>while result_queue.size &lt; 2</code> to <code>len(result_queue)&lt;2</code>. And how do I access individual result from both workers?</span>
<span class="comment-copy">got it, <code>result_queue</code></span>
<span class="comment-copy">@user1128088 Good find again. I've corrected it. Thanks.  You can assign identifiers to the result while queueing them. e.g. a <code>job_id</code>. Later, you can look it up in the results. If there are too many parallel queries being run at a time, I would suggest making <code>result_queue</code> a dictionary with keys being the <code>job_id</code>s and values being the actual results.</span>
