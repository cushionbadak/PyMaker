<div class="post-text" itemprop="text">
<p>I know that this question is asked many times on this website. But I found that they missed an important point: only file extension with one period was taken into consider like <code>*.png *.mp3</code>, but how do I deal with these filename with two period like <code>.tar.gz</code>.</p>
<p>The basic code is:</p>
<pre><code>filename = '/home/lancaster/Downloads/a.ppt'
extention = filename.split('/')[-1]
</code></pre>
<p>But obviously, this code do not work with the file like <code>a.tar.gz</code>.
How to deal with it? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>The role of a file extension is to tell the viewer (and sometimes the computer) which application to use to handle the file.</p>
<p>Taking your worst-case example in your comments (<code>a.ppt.tar.gz</code>), this is a PowerPoint file that has been tar-balled and then gzipped. So you need to use a gzip-handling program to open it. Using PowerPoint or a tarball-handling program wouldn't work. OK, a clever program that knew how to handle both <code>.tar</code> and <code>.gz</code> files could understand both operations and work with a <code>.tar.gz</code> file - but note that it would do that <em>even if the extension was simply <code>.gz</code></em>.</p>
<p>The fact that both <code>tar</code> and <code>gzip</code> add their extensions to the original filename, rather than replace them (as <code>zip</code> does) is a convenience. But the base name of the gzip file is still <code>a.ppt.tar</code>.</p>
</div>
<div class="post-text" itemprop="text">
<h1><strong>Python 3.4</strong></h1>
<p>You can now use <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer"><code>Path</code></a> from pathlib. It has many features, one of them is <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.suffix" rel="noreferrer"><code>suffix</code></a>:</p>
<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; Path('my/library/setup.py').suffix
'.py'
&gt;&gt;&gt; Path('my/library.tar.gz').suffix
'.gz'
&gt;&gt;&gt; Path('my/library').suffix
''
</code></pre>
<p>If you want to get more than one suffix, use <code>suffixes</code>:</p>
<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; Path('my/library.tar.gar').suffixes
['.tar', '.gar']
&gt;&gt;&gt; Path('my/library.tar.gz').suffixes
['.tar', '.gz']
&gt;&gt;&gt; Path('my/library').suffixes
[]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a in build module in <code>os</code>. More about <a href="https://docs.python.org/2/library/os.path.html#os.path.splitext" rel="noreferrer"><code>os.path.splitext</code></a>.</p>
<pre><code>In [1]: from os.path import splitext
In [2]: file_name,extension = splitext('/home/lancaster/Downloads/a.ppt')
In [3]: extension
Out[1]: '.ppt'
</code></pre>
<p>If you have to fine the extension of <code>.tar.gz</code>,<code>.tar.bz2</code> you have to write a function like this</p>
<pre><code>from os.path import splitext
def splitext_(path):
    for ext in ['.tar.gz', '.tar.bz2']:
        if path.endswith(ext):
            return path[:-len(ext)], path[-len(ext):]
    return splitext(path)
</code></pre>
<p><strong>Result</strong></p>
<pre><code>In [4]: file_name,ext = splitext_('/home/lancaster/Downloads/a.tar.gz')
In [5]: ext
Out[2]: '.tar.gz'
</code></pre>
<p><strong>Edit</strong></p>
<p>Generally you can use this function</p>
<pre><code>from os.path import splitext
def splitext_(path):
    if len(path.split('.')) &gt; 2:
        return path.split('.')[0],'.'.join(path.split('.')[-2:])
    return splitext(path)
</code></pre>
<p>It will work for all extensions.</p>
<p><strong>Working on all files</strong>.</p>
<pre><code>In [6]: inputs = ['a.tar.gz', 'b.tar.lzma', 'a.tar.lz', 'a.tar.lzo', 'a.tar.xz','a.png']
In [7]: for file_ in inputs:                                                                    
    file_name,extension = splitext_(file_)
    print extension
   ....:     
tar.gz
tar.lzma
tar.lz
tar.lzo
tar.xz
.png
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One possible way is:</p>
<ol>
<li>Slice at "." =&gt; <code>tmp_ext = filename.split('.')[1:]</code></li>
</ol>
<p>Result is a list = <code>['tar', 'gz']</code></p>
<ol start="2">
<li>Join them together =&gt; <code>extention = ".".join(tmp_ext)</code></li>
</ol>
<p>Result is your extension as string = <code>'tar.gz'</code></p>
<p>Update: Example:</p>
<pre><code>&gt;&gt;&gt; test = "/test/test/test.tar.gz"
&gt;&gt;&gt; t2 = test.split(".")[1:]
&gt;&gt;&gt; t2
['tar', 'gz']
&gt;&gt;&gt; ".".join(t2)
'tar.gz'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Simplest One:</strong></p>
<pre><code>import os.path
print os.path.splitext("/home/lancaster/Downloads/a.ppt")[1]
# '.ppt'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; import re

&gt;&gt;&gt; filename = os.path.basename('/home/lancaster/Downloads/a.ppt')  
&gt;&gt;&gt; extensions = re.findall(r'\.([^.]+)', basename)
['ppt']


&gt;&gt;&gt; filename = os.path.basename('/home/lancaster/Downloads/a.ppt.tar.gz')  
&gt;&gt;&gt; extensions = re.findall(r'\.([^.]+)', basename)
['ppt','tar','gz']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>filename = '/home/lancaster/Downloads/a.tar.gz'
extention = filename.split('/')[-1]

if '.' in extention:
  extention = extention.split('.')[-1]
  if len(extention) &gt; 0:
    extention = '.'+extention
    print extention
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>with re.findall and python 3.6

filename = '/home/Downloads/abc.ppt.tar.gz'

ext = r'\.\w{1,6}'

re.findall(f'{ext}\\b | {ext}$', filename,  re.X)

['.ppt', '.tar', '.gz']
</code></pre>
</div>
<span class="comment-copy">By the way in your code, the variable <code>extension</code> is actually storing the complete filename, it does the same thing regardless of the type of extension.</span>
<span class="comment-copy">your code is a wrong example: it's giving you the " basename " of the path, not the extension, which is equivalent to <code>import os;os.path.basename('/home/lancaster/Downloads/a.ppt')</code></span>
<span class="comment-copy">a.tar.gz is a "gzip-compressed" tar file. So the extension of this file is  <code>gz</code> and not <code>tar.gz</code>. So this question comes down to finding substrings ".tar.gz" etc, in the file names. If you see Rahul's edit, you will find that this is true.</span>
<span class="comment-copy">Hey guys, I found an more interesting thing that if I compress <code>a.ppt</code> the default filename will be <code>a.ppt.tar.gz</code>, so there will be more disturbances. Please take this into consider.</span>
<span class="comment-copy">@SilentMonk But if I rename <code>a.tar.gz</code> to <code>a.tar(2).gz</code>, I cannot open it properly, so the extension is <code>tar.gz</code>.</span>
<span class="comment-copy">@David, this is what I tried to convey in the comment.</span>
<span class="comment-copy">Thanks for your explain, based on this idea, I think @no11 's code is simple and good enough for me, but I still think you have got the best answer.</span>
<span class="comment-copy">@Rahul 's answer is the better way. i.e using <code>os.path.splitext('/path/to/your/file')</code> If you need a one line code you can use something like <code>(os.path.splitext('path/to/file.ext')[1]).split('.')[1]</code></span>
<span class="comment-copy">That's really a nice way, thanks.</span>
<span class="comment-copy">Something that frustrated me: I googled for <code>Path</code> from pathlib documentation, and it told me to use .ext .  This kept failing and eventually I learned of .suffix.  Not sure if the first documentation was for an older version of the Path() library?</span>
<span class="comment-copy">@Starman <code>pathlib</code> introduced in Python 3.4, make sure you're not looking at Python 2 docs.</span>
<span class="comment-copy">This is the correct answer. Thank you! âœ…</span>
<span class="comment-copy">I tried it ,this not work for <code>/home/lancaster/Downloads/a.tar.gz</code></span>
<span class="comment-copy">So I need to write <code>['tar.gz', 'tar.lzma', 'tar.lz', 'tar.lzo', 'tar.xz', etc...]</code> into my code? There must be many extension like this.</span>
<span class="comment-copy">@DavidPage Updated my answer again.</span>
<span class="comment-copy">I think @no11 's solution is better because you used more <code>split</code> then him, and his code works well.</span>
<span class="comment-copy">@Tharanga Solution according the OP's requirement. :)</span>
<span class="comment-copy">Please tell me what's wrong in this answer?</span>
<span class="comment-copy">this will crash for filenames without a dot but except for that it will give what the OP asked for</span>
<span class="comment-copy">Ok. But for that case he already has a solution. So the core-question would be solved with my solution. But okay...</span>
<span class="comment-copy">But this don't work with <code>a.tar.gz</code>, dose it?</span>
<span class="comment-copy">what's problem in this?</span>
<span class="comment-copy">While this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.</span>
