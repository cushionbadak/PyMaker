<div class="post-text" itemprop="text">
<p>How can I set the variable I want to change as a function argument? I want to define only one function, and not set_a(value), set_b(value), set_c(value), ...</p>
<pre><code>class MyVarClass:
    def __init__(self):
        self.a = 1
        self.b = 2
        self.c = 3

# this works, but I don't want to write n functions
def set_a(myvar_object, value):
    myvar_object.a = value

# this is what I actually want:
def set_vars(myvar_object, var_name, value):
    myvar_object.var_name = value

myvar = MyVarClass()
# I want to do the same as  myvar.a = 4
set_a(myvar, 4) # works as intended, now myvar.a is 4
set_vars(myvar, a, 4)  # error, a is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you usually do is to create a method to the class like this:</p>
<pre><code>class MyVarClass:
    def __init__(self):
        self.a = 1
        self.b = 2
        self.c = 3

    def set_a(self, value):
        self.a = value
</code></pre>
<p>If, for some reason, can't do it like this and you only have the name of the attribute as string, then you can use setattr:</p>
<pre><code>setattr(myvar_object, 'a', value)
</code></pre>
<p>But usually what you do is just this line:</p>
<pre><code>myvar_object.a = 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is done with setattr.  </p>
<pre><code>def set_vars(myvar_object, var_name, value):
    setattr(myvar_object, var_name, value)
</code></pre>
<p>This isn't necessarily the best way of doing this.  It often suggests a different data structure would be better, but in case that isn't the case here.</p>
<p>You'll note if you go this route, there isn't much reason to have a def rather than just call setattr directly, unless you think you'll change things in the future.</p>
</div>
<div class="post-text" itemprop="text">
<p>what about using a <code>dict</code>:</p>
<pre><code>class MyVarClass:
    def __init__(self):
        self.vars = {"a": 1, "b": 2, "c": 3}

def set_vars(myvar_object, var_name, value):
    myvar_object.vars[var_name] = value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>**

var_name = ''
class MyVarClass:
    def __init__(self):
        self.a = 1
        self.b = 2
        self.c = 3

# this is what I actually want:
def set_vars(myvar, var_name, value):
    myvar.var_name = value
    print (myvar.var_name)

myvar = MyVarClass()

set_vars(myvar, "b", 6)  

**  
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer"><code>setattr(obj, name, value)</code></a>.</span>
<span class="comment-copy">The setattr() looks like what I was looking for.</span>
<span class="comment-copy">Guess I have to look at dicts again. I'm not so familiar with them yet and mixed it up with variables, which didn't work.</span>
<span class="comment-copy">&gt;&gt;&gt; myvar.b     2     &gt;&gt;&gt; myvar.__dict__     {'c': 3, 'b': 2, 'var_name': 6, 'a': 1}     &gt;&gt;&gt; myvar.var_name     6 is not quite what I want</span>
<span class="comment-copy">What you want brother</span>
