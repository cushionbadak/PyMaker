<div class="post-text" itemprop="text">
<p>I would like to parallelize the following python loop using a Mac Pro with 2 Quad-Core processors. </p>
<pre><code>result_list = []
for a in a_range:
    for b in b_range:
        for c in c_range:
            result = call_fortran_program(a, b, c)
            result_list.append(result)
</code></pre>
<p>In my searches I've run across terms like Cython and GIL but it's still not clear to me on how to proceed. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import product
from multiprocessing import Pool

with Pool(processes=4) as pool:  # assuming Python 3
    pool.starmap(print, product(range(2), range(3), range(4)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor" rel="nofollow">ProcessPoolExecutor</a></p>
<p>This can circumvent GIL lock by creating multiple processes.</p>
<p>An example from the website:</p>
<pre><code>import concurrent.futures
import math

PRIMES = [
    112272535095293,
    112582705942171,
    112272535095293,
    115280095190773,
    115797848077099,
    1099726899285419]

def is_prime(n):
    if n % 2 == 0:
        return False

    sqrt_n = int(math.floor(math.sqrt(n)))
    for i in range(3, sqrt_n + 1, 2):
        if n % i == 0:
            return False
    return True

def main():
    with concurrent.futures.ProcessPoolExecutor() as executor:
        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):
            print('%d is prime: %s' % (number, prime))

if __name__ == '__main__':
    main()
</code></pre>
</div>
<span class="comment-copy">Shouldn't <code>result_list.append(result)</code> follow your <code>result =</code> statement? Otherwise there would be only one result.</span>
