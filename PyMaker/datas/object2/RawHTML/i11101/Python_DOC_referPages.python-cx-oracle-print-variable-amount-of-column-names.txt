<div class="post-text" itemprop="text">
<p>Based on a given SQL-Statement, I extract from a database to CSV with thefollowing function:</p>
<pre><code>def extract_from_db():
    with open('myfile.csv','w') as outfile:
        for row in cursor:
            outfile.write(str(row[0])+";"+str(row[1])+";"+str(row[2])+";"+str(row[3])+";"+str(row[4])+";"+str(row[5])
               +";"+str(row[6])+";"+str(row[7])+";"+str(row[8])+";"+str(row[9])+";"+str(row[10])+";"+str(row[11])+";"+str(row[12])
               +";"+str(row[13])+";"+str(row[14])+"\n")
</code></pre>
<p>How can I write in the beginning of the file the column names for a variable amount of columns, so that I don't have to hardcode it? Also the hardcoded concatenation is pretty ugly.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <a href="http://cx-oracle.readthedocs.io/en/latest/cursor.html#Cursor.description" rel="nofollow">description</a></p>
<pre><code>desc = cursor.description 
</code></pre>
<p>function.  It returns a sequence of 7 item sequences and you can get the column names from</p>
<pre><code>for seq in desc:
    print seq[0]
</code></pre>
<p>I would also recommend using pandas to do your writing to csv.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ebrahim Jackoet has already mentioned that you can use cursor.description to get the column names from your query. If you don't have a very large number of rows to process, though, the <a href="https://docs.python.org/3/library/csv.html%20csv" rel="nofollow">csv module</a> is built in and makes writing rows simple. It also handles all of the necessary quoting</p>
<p>An example follows:</p>
<pre><code>import csv

with open("myfile.csv", "w") as outfile:
    writer = csv.writer(outfile, delimiter = ";")
    for row in cursor:
        writer.writerow(row)
</code></pre>
</div>
