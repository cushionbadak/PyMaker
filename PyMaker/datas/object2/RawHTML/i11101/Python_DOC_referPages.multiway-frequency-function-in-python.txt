<div class="post-text" itemprop="text">
<p>This is my function:</p>
<pre><code>def freq(*var):
    from functools import reduce
    from operator import getitem
    for c,i in enumerate(reversed(var)): 
        d={k:0 for k in set(i)} if c==0 else {k:d for k in set(i)}
    for row in zip(*var):
        *k,last_k=row
        reduce(getitem,k,d)[last_k]+=1

    return d
</code></pre>
<p><code>var</code> argument would look like <code>(['a','b','b','c'],['one','two','two','two'])</code></p>
<p>I am trying to return a nested dictionary that holds a frequency count. So result <code>d</code> should look like:</p>
<pre><code>{'a':{'one':1, 'two':0}, 'b':{'one':0, 'two':2}, 'c':{'one':0, 'two':1}}
</code></pre>
<p>However my function returns, which is wrong:</p>
<pre><code>{'a': {'one': 1, 'two': 3}, 'b': {'one': 1, 'two': 3}, 'c': {'one': 1, 'two': 3}}
</code></pre>
<p>Any idea why? </p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that all nested dicts in <code>d</code> dict is the same object. Use <a href="https://docs.python.org/3/library/stdtypes.html?highlight=dict.copy#dict.copy" rel="nofollow noreferrer">dict.copy()</a> method to fix problem, so changing line:</p>
<pre><code>d={k:0 for k in set(i)} if c==0 else {k:d for k in set(i)}
</code></pre>
<p>to </p>
<pre><code>d={k:0 for k in set(i)} if c==0 else {k:d.copy() for k in set(i)}
</code></pre>
<p>Would fix your problem. See more on <a href="https://stackoverflow.com/questions/8056130/immutable-vs-mutable-types">Immutable vs Mutable types</a> and <a href="https://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference">How do I pass a variable by reference?</a> </p>
<p>Good Luck!</p>
</div>
<div class="post-text" itemprop="text">
<p>You've somehow initialized <strong>d</strong>'s values to the same dictionary.  I can't fix this confidently, since I don't have Python3 installed here (blush).  However, I think the problem is that <strong>k:d</strong> value in the middle line: I think it plugs the identical default dictionary into each value.  Try creating a <em>new</em> empty dictionary for each pass through this iteration.</p>
</div>
<div class="post-text" itemprop="text">
<p>Apparently, the inner dict is referencing the same object and everything gets updated simultenously, as seen from the <code>enumerate</code> loop:</p>
<pre><code>for c,i in enumerate(reversed(var)): 
     d={k:0 for k in set(i)} if c==0 else {k:d for k in set(i)}
#                                            ^
</code></pre>
<p>The inner dictionary <code>d</code> used in the second iteration of the loop is the same object. You can use <code>d.copy()</code> in place of <code>d</code> to create multiple copies for each key.</p>
<hr/>
<p>But why go through all the trouble of using <code>reduce</code> on <code>getitem</code>. That part of your code is quite hard to debug. </p>
<p>You can achieve the same thing by using a <code>Counter</code> object on your <em>zipped</em> items:</p>
<pre><code>from collections import Counter

var = ['a','b','b','c'],['one','two','two','two']

c = Counter(zip(*var))
d = {k[0]: {j: v if j in k else 0 for j in set(var[1])} for k,v in c.items()}
print(d)
# {'b': {'two': 2, 'one': 0}, 'c': {'two': 1, 'one': 0}, 'a': {'two': 0, 'one': 1}}
</code></pre>
</div>
<span class="comment-copy">Every dict at a given nesting level is the same dict here.</span>
<span class="comment-copy">@LMc does it answers your question ?</span>
<span class="comment-copy"><code>var</code> may have one or more elements. Here I used two, but it could have more or less.</span>
<span class="comment-copy">The code can be extended by creating deeper nests in the dict comprehension. You can make this dynamic by refactoring it into a loop that takes cognizance to the number of elements in <code>var</code></span>
