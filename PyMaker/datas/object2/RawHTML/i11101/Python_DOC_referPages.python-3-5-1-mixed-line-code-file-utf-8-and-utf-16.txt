<div class="post-text" itemprop="text">
<p>I have successfully been parsing data files that I recieve with a simple python script I wrote.  The files I get are like this:</p>
<p>file.txt, ~50 columns of data, x 1000s of rows</p>
<pre><code>abcd1,1234a,efgh1,5678a,ijkl1 ...etc 
abcd2,1234b,efgh2,5678b,ijkl2 ...etc
...
</code></pre>
<p>Unfortunatly, sometimes some of the lines contain UTF-16 symbols, and look like this</p>
<pre><code>abcd1,12341,efgh1,UTF-16 symbols here,ijkl1 ...etc
abcd2,1234b,efgh2,5678b,ijkl2 ...etc
...
</code></pre>
<p>I have been able to implement the "latin-1" coding for commands in my script like:</p>
<pre><code>open('file fixed.txt', 'w', encoding="latin-1").writelines([line for line in open('file.txt', 'r', encoding="latin-1"])
</code></pre>
<p>My problem lies in code such as:</p>
<pre><code>for line in fileinput.Fileinput('file fixed.txt', inplace=1):
  line = line.replace(":",",")
  print (line, ",")
</code></pre>
<p>I am unable to get past the encoding errors for the last command.  I have tried enforcing the coding of:</p>
<pre><code># -*- coding: latin-1 -*-
</code></pre>
<p>At the top of the document as well as before the last mentioned command (find and replace).  How can I get mixed encoded files to process for the above command?  I would like to preserve the UTF-16 (unicode) symbols as they appear in the new file.  Thanks in advance.</p>
<p>EDIT: Thanks to Alexis I was able to determine that filinput would not work for setting another encoding method.  I used the below to resolve my issue.</p>
<pre><code>f = open(filein,'r', encoding="latin-1")
filedata = f.read()
f.close()

newdata = filedata.replace("old data","new data")

f = open(fileout,'w', encoding="latin-1")
f.write(newdata)
f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can tell <code>fileinput</code> how to open your files. As <a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow">the documentation</a> says:</p>
<blockquote>
<p>You can control how files are opened by providing an opening hook via the openhook parameter to fileinput.input() or FileInput(). The hook must be a function that takes two arguments, filename and mode, and returns an accordingly opened file-like object. Two useful hooks are already provided by this module.</p>
</blockquote>
<p>So you'd do it like this:</p>
<pre><code>def open_utf16(name, m):
    return open(name, m, encoding="utf-16")

for line in fileinput.FileInput("file fixed.txt", openhook=open_utf16):
    ...
</code></pre>
<p>I use <code>"utf-16"</code> as the encoding since this is your file's encoding, not <code>"latin-1"</code>. 8-bit encodings don't have error checking so Latin1 will read the bytes without noticing there's anything wrong, but you're likely to have problems down the line. If this gives you errors, your file is not in utf-16.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your file has mixed encoding, you need to read it as binary and then decode different parts as necessary, or just process the whole thing as binary instead. The <code>latin-1</code> solution in the question works by accident really.</p>
<p>In your example that would be something like:</p>
<pre><code>with open('the/path', 'rb') as fi:
    data = fi.read().replace(b'old data', b'new data')
with open('other/path', 'wb') as fo:
    fo.write(data)
</code></pre>
<p>This is the closest to what you ask for - as far as I understand you don't even care about that field with potentially different encoding - you just want to change some content and copy the rest of the file as is. Binary mode allows you to do that.</p>
</div>
<span class="comment-copy">It doesn't make sense to have a file that has data in multiple different encodings.  Is your file <i>all</i> in UTF-8?  If not, you probably need to do some "surgery" on it to get all of it into a single encoding.  Also note that there is no such thing as "a UTF-16 symbol".  You can encode unicode symbols using whatever unicode encoding you like.</span>
<span class="comment-copy">(Incidentally, the <code># -*- coding</code> thing is a red herring here.  That only specifies the encoding of your Python source file; it won't affect what happens with data files you read in.)</span>
<span class="comment-copy">So what do those "UTF-16 symbols" look like? How did you figure out that was UTF-16?</span>
<span class="comment-copy">Alexis, your solution works for me, except you cannot use in place and open hook together.  I need the file input to either write in place or save to another file. Thanks again.</span>
<span class="comment-copy">Hmm, I'd go with writing to another file if it were me. But do you really need to be using <code>fileinput</code>? You're pushing it kind of hard. If you do your own file management, life is a lot easier.</span>
<span class="comment-copy">@james If this works for you, I'd recheck exactly what's in your files. Opening a file with mixed encodings as utf-16 can lead to very unexpected results. But if you can read it correctly this way, maybe all of it is simply utf-16.</span>
<span class="comment-copy">@viraptor, I'm assuming that all data in the files is either ascii or UTF-16. If there's really a mix of encodings in the files, it's probably best to read them in in binary mode (which is besically what the OP's "latin1" approach does.) My guess is it's a single encoding, but not utf8/16 (since "it didn't work").</span>
<span class="comment-copy">i'm pretty sure it's a mix; when i set the file for either utf-8 or utf-16 it would give me decoding errors.  when i use the "latin-1" encoding no errors, and my data remains intact.</span>
