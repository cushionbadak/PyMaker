<div class="post-text" itemprop="text">
<p>I have already got my url and access this url on the browser. It will give you json data format, however, when I use build-in function of python3 it also gives me an error and the <code>get_report</code> gives me <code>&lt;function get_report at 0x103362840&gt;</code>. How could I use build-in function of python3 to return the json data?</p>
<p>Here is my code</p>
<pre><code>  def get_report(report,api_key):
     uri = urllib.parse.urljoin(API_ENDPOINT, report)
     uri += "?api_key = %s" % API_KEY

     request = urllib.request.Request(uri)
     response = urllib.request.urlopen(request)
     data = response.read().decode('utf-8')
     print (data)
   return data
try:
    data = get_report("azure_cost", API_KEY)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Before anything else, please, when you put raw code on the page, use the {} button, or put 4 spaces before each line of your code. It helps clarifying the overall.</p>
<p>If you receive a string containing formatted and valid JSON, you can parse it using the builtin <code><a href="https://docs.python.org/3/library/json.html" rel="nofollow">json</a></code> module.</p>
<p>A simple code snippet that can be used to parse a json string using this module can be that:</p>
<pre><code>to_parse = "{'foo': 'bar', 'test': 'result'}"

from json import loads
parsed = loads(to_parse)
print(parsed['foo']) # will print "bar", the value stored below the 'foo' key.
</code></pre>
<p>It will store the loaded list/dictionary in a variable, that you'll be able to use later.</p>
<p>EDIT: </p>
<p>By looking at your recent update, I must precise that, if you didn't know yet, if you try to print something and it gives you this result:</p>
<pre><code>&lt;function "any_function" at 0x103362840&gt;
</code></pre>
<p>It means that the thing you just printed is a function, actually stored on the address <code>0x103362840</code> in memory (you don't have to worry about this part), which means you can actually call this function using this syntax (following the example just a bit higher): </p>
<pre><code>&gt;&gt;&gt; variable.any_function()  # Notice the add of the (), which means it will be considered and called as a function, and not a variable.
</code></pre>
<p>Now, if you try to do something like:</p>
<pre><code>&gt;&gt;&gt; print(variable.any_function())
</code></pre>
<p>instead of:</p>
<pre><code>&gt;&gt;&gt; print(variable.any_function)
</code></pre>
<p>you will print the result that the function returned. So here, it will execute the function get_report, then return the result, and since we are printing the result in the console, if the get_report returns the actual needed content, it will print it in the console.</p>
</div>
<span class="comment-copy">When you say it gives you an error, please give us the actual error returned. It'll be easier to clarify the problem and threat it.</span>
