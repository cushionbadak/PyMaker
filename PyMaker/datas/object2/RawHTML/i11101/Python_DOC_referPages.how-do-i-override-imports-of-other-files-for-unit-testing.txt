<div class="post-text" itemprop="text">
<p>I am currently attempting to write unit tests for my Main.py's <code>main()</code> function</p>
<p>Here is a simplified version of my Main.py:</p>
<pre><code>from Configuration import Configuration # Configuration.py is a file in the same dir

def main():
  try:
    Configuration('settings.ini')
  except:
    sys.exit(1) # Test path1
  sys.exit(0) # Test path2

if __name__ == '__main__':
    main()
</code></pre>
<p>In my <code>Unit Tests\MainUnitTests.py</code> I want to import <code>..\Main.py</code> and fake the <code>Configuration</code> class in such a way that I can hit <code>Test path1</code> and <code>Test path2</code></p>
<p>I found that i can assert <code>sys.exit()</code> with the following:</p>
<pre><code>with self.assertRaises(SystemExit) as cm:
  main()
self.assertEqual(cm.exception.code, 1)
</code></pre>
<p>but I am having trouble overriding the <code>from Configuration import Configuration</code></p>
<p>Thoughts?</p>
<p>So far I have tried the following within <code>Unit Tests\MainUnitTests.py</code>:</p>
<pre><code>class FakeFactory(object):
  def __init__(self, *a):
    pass

sys.modules['Configuration'] = __import__('FakeFactory')

class Configuration(FakeFactory):
  pass
</code></pre>
<p>Another example for demonstration:</p>
<p>foo.py:</p>
<pre><code>from bar import a,b

x = a()

class a(object):
  def __init__(self):
    self.q = 2

y = a()

print x.q, y.q # prints '1 2' as intended

b() # I want this to print 2 without modifying bar.py
</code></pre>
<p>bar.py:</p>
<pre><code>class a(object):
  def __init__(self):
    self.q = 1

def b():
  t = a()
  print t.q
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>when you use the import</p>
<pre><code>from bar import a
</code></pre>
<p>it import the name directly into the module, so monkeypatching <code>bar</code> won't help, you need to override <code>a</code> directly in the main file:</p>
<pre><code>def fake_a():
    print("OVERRIDEN!")

main.a = fake_a 
</code></pre>
<p>Do know that unittest has helper functions for this in <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow">the <code>mock</code> subpackage</a>, I believe you could do something like:</p>
<pre><code>from unittest.mock import patch

...
with patch("main.a", fake_a) as mock_obj: #there are additional things you can do with the mock_obj
    do_stuff()
</code></pre>
<p>This would work in your first example with <code>configuration</code> since the class that needs to be patched is not used in the global scope although <code>foo</code> uses <code>bar.a</code> as soon as it is loaded so you would need to patch it <em>before</em> even loading <code>foo</code>:</p>
<pre><code>from unittest.mock import patch

...
with patch("bar.a", fake_a) as mock_obj: #there are additional things you can do with the mock_obj
    import foo #now when it loads it will be loaded with the patched name
</code></pre>
<p>However in this case <code>foo.a</code> would not be reverted at the end of the <code>with</code> block because it can't be caught by unittest... I really hope your actual use case doesn't use the stuff to be patched at module level.</p>
</div>
<span class="comment-copy">look at <a href="http://stackoverflow.com/questions/5626193/what-is-a-monkey-patch" title="what is a monkey patch">stackoverflow.com/questions/5626193/what-is-a-monkey-patch</a>  In fact it's answer to your question including examples</span>
<span class="comment-copy">@farincz monkey patching doesn't seem to be working.  In the MainUnitTest.py I am importing <code>Configuration.py</code> and then creating a <code>class Configuration(FakeFactory)</code> after it ... however <code>Main.py's main()</code> is still using the Configuration class in <code>Configuration.py</code>  it seems like the two files are not sharing the same global name space</span>
<span class="comment-copy">you must import Configuration and patch Configuration attribute on it and you must do it before main is first importet! than it should work</span>
<span class="comment-copy">@farincz still not working ... see <code>Another example for demonstration</code> in my question</span>
<span class="comment-copy">When you use the import <code>from bar import a</code> it imports <code>a</code> directly into the namespace so monkeypatching <code>bar</code> won't help, you need to override <code>main.a</code> instead.</span>
