<div class="post-text" itemprop="text">
<p>I have a simple script which is having the structure of:  </p>
<pre><code>if __name__ =='main':
    #do some logic
    #print to console the result
</code></pre>
<p>Now, I ran the script via the code using <code>subprocess.Popen()</code> method like this:   </p>
<pre><code>p = subprocess.Popen(
  ["python", path_of_script_to_run] + arguments_list, 
  stdout=subprocess.PIPE,
  stderr=subprocess.PIPE)
</code></pre>
<p>My question is how can I return a value from the running script to the calling script using return value, or other method.  </p>
<p>I cannot use return under the context of <code>if __name__ =='main':</code>
So does it mean I cannot pass a return value to be assigned in the calling script to the <code>p</code> variable?<br/>
I'm also want to try avoiding parsing the prints of the script run to the console..</p>
</div>
<div class="post-text" itemprop="text">
<p>You can capture the output in the calling script using  <a href="https://docs.python.org/2/library/subprocess.html#subprocess.check_output" rel="nofollow"><code>subprocess.check_output()</code></a>:</p>
<pre><code>from subprocess import check_output
result = check_output(args).decode()
</code></pre>
<p>To also capture standard error in the result, use <code>stderr=subprocess.STDOUT</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow"><code>communicate()</code></a> to retrieve output of your script. And <a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.returncode" rel="nofollow"><code>returncode</code></a> to get the exit code.</p>
<pre><code>p = subprocess.Popen(
  ["python", path_of_script_to_run] + arguments_list, 
  stdout=subprocess.PIPE,
  stderr=subprocess.PIPE)

(stdoutdata, stderrdata) = p.communicate()
exit_code = p.returncode
</code></pre>
<p>For your other script to return an exit code, you should use <a href="https://docs.python.org/3/library/sys.html#sys.exit" rel="nofollow"><code>sys.exit(code)</code></a>.</p>
<pre><code>import sys
if __name__ =='main':
    try:
        # do stuff
        sys.exit(0)
    except Exception as err:
        print(err)
        sys.exit(1)
</code></pre>
</div>
<span class="comment-copy">Yes its working</span>
<span class="comment-copy">list + list in python is a list concatenated</span>
<span class="comment-copy">You can use <code>exit</code> to set the return code. Suppose for instance that you want to return 2, just do <code>exit(2)</code>.</span>
<span class="comment-copy">I want to pass something like a tuple of integers for example (1,5)</span>
<span class="comment-copy">The best way to do this is to import the script to be run and call a method that returns the required data. Please see the answer by JF Sebastian <a href="http://stackoverflow.com/questions/30664263/return-value-from-one-python-script-to-another" title="return value from one python script to another">stackoverflow.com/questions/30664263/â€¦</a></span>
<span class="comment-copy">but how do I pass the return code from the context of the running script, trying to write return [something], cannot work as you get syntax error- 'return' out side of function</span>
<span class="comment-copy">@JavaSa just <code>print</code> it?</span>
<span class="comment-copy">thats exactly what I wanted to avoid, prints and parsing the prints are more weak that returning a value</span>
<span class="comment-copy">But I guess I can't</span>
<span class="comment-copy">@JavaSa, it's more that you aren't explaining what you mean by "returning" very clearly. If you want the Python interpreter to exit with that status that's easy, but it's not obvious that that's what you're asking for.</span>
<span class="comment-copy">but how do I pass the return code from the context of the running script, trying to write return [something], cannot work as you get syntax error- 'return' out side of function</span>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/sys.html#sys.exit" rel="nofollow noreferrer"><code>sys.exit(code)</code></a> in your script</span>
