<div class="post-text" itemprop="text">
<p>I have a CSV file structured like this:</p>
<pre><code># Samples 1
1,58
2,995
3,585

# Samples 2
15,87
16,952
17,256

# Samples 1
4,89
5,63
6,27
</code></pre>
<p>Is there any way in Python 3.x, how to parse a file structured like this without having to manually go through it line-by-line?</p>
<p>I'd like to have some function, which will automatically parse it considering the labels, like this:</p>
<pre><code>&gt;&gt; parseLabeledCSV(['# Samples 1', '# Samples 2'], fileName)
[{1:58,2:995,3:585,4:89,5:63,6:27}, {15:57, 16:952, 17:256}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>groupby will do all the iterating and grouping for you. In this case, you only care about those contiguous groups of lines that contain a ',' (or are composed only of ',' and digits, or whatever other filter predicate you care to define):</p>
<pre><code>input="""# Samples 1
1,58
2,995
3,585

# Samples 2
15,87
16,952
17,256

# Samples 1
4,89
5,63
6,27""".splitlines()

from itertools import groupby
import csv

results = []
for has_comma, data_lines in groupby(input, key=lambda s: ',' in s):
    if has_comma:
        results.append(dict(csv.reader(data_lines)))
</code></pre>
<p>This can even be collapsed to a single Python list comprehension statement:</p>
<pre><code>results = [dict(csv.reader(data_lines)) 
            for has_comma, data_lines in groupby(input, key=lambda s: ',' in s) 
                if has_comma]
</code></pre>
<p>In both cases, print the results using:</p>
<pre><code>for dd in results:
    print(dd)
</code></pre>
<p>to get:</p>
<pre><code>{'1': '58', '3': '585', '2': '995'}
{'15': '87', '17': '256', '16': '952'}
{'5': '63', '4': '89', '6': '27'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like this?</p>
<pre><code>input="""# Samples 1
1,58
2,995
3,585

# Samples 2
15,87
16,952
17,256

# Samples 1
4,89
5,63
6,27"""


def parse(input):
    parsed = {}
    lines = input.split("\n")
    key = "# Unknown"
    for line in lines:
        if line is None or line == "": #  ignore empty line
            continue
        if line.startswith("#") :
            if not parsed.has_key(line):
                parsed[line] = {}
            key = line
            continue
        left, right = line.split(",")
        parsed[key][left] = right
    return parsed


if __name__ == '__main__':
    output = parse(input)
    print(output)
</code></pre>
<p>will output to:</p>
<pre><code>{'# Samples 1': {'1': '58', '3': '585', '2': '995', '5': '63', '4': '89', '6': '27'}, '# Samples 2': {'15': '87', '17': '256', '16': '952'}}
</code></pre>
</div>
<span class="comment-copy">What do you mean <code>parse</code>, split into columns? There are many python packages specialising in reading in csv data.</span>
<span class="comment-copy">What did you mean by non-homogeneous? The rows look homogeneous to me: each has two integers. Please update your post with what the expected output are. Have you looked into the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv</a> library module?</span>
<span class="comment-copy">The edit significantly changes the meaning of the question. It was absolutely unclear these were key-value pairs initially.</span>
<span class="comment-copy">@Kupiakos I'm sorry, I hope its clearer now.</span>
<span class="comment-copy">@Eenoku Considering this seems to be a custom format, I'd say the safest bet is to just go line-by-line.</span>
