<div class="post-text" itemprop="text">
<p>Is there some more convenient way to write into python files than using read/write for any file (like txt files etc).</p>
<p>I mean python knows what actually is the structure of python file, so if I need to write into it, maybe there is some more convenient way to do it?</p>
<p><strong>If there is no such way</strong> (or it is too complicated), then what would best way to normally modify python file just using normal <code>write</code> (example below)?</p>
<p>I have lots of these files in my subdirectories called:</p>
<p><code>__config__.py</code></p>
<p>These files are used as configuration. And they have unassigned python dictionary, like this:</p>
<pre><code>{
  'name': 'Hello',
  'version': '0.4.1'
}
</code></pre>
<p>So what I need to do, is write to all those <code>__config__.py</code> files new version (for example <code>'version': '1.0.0'</code>).</p>
<p><strong>Update</strong></p>
<p>To be more specific, given that there is a python file with a content like this:</p>
<pre><code># Some important comment
# Some other important comment
{
'name': 'Hello',
'version': '0.4.1'
}
# Some yet another important comment
</code></pre>
<p>Now running some python script, it should write into python file modifying given dictionary and after writing, output should be like this:</p>
<pre><code># Some important comment
# Some other important comment
{
'name': 'Hello',
'version': '1.0.0'
}
# Some yet another important comment
</code></pre>
<p>So in other words, write should only modify <code>version</code> key value, and everything else should be kept like it was before writing.</p>
</div>
<div class="post-text" itemprop="text">
<p>I came up with solution. It is not very clean, but it works. If someone has a better answer, please write it.</p>
<pre><code>content = ''
file = '__config__.py'
with open(file, 'r') as f:
    content = f.readlines()
    for i, line in enumerate(content):
        # Could use regex too here
        if "'version'" in line or '"version"' in line:
            key, val = line.split(':')
            val = val.replace("'", '').replace(',', '')
            version_digits = val.split('.')
            major_version = float(version_digits[0])
            if major_version &lt; 1:
                # compensate for actual 'version' substring
                key_end_index = line.index('version') + 8
                content[i] = line[:key_end_index] + ": '1.0.0',\n"
with open(file, 'w') as f:
    if content:
        f.writelines(content)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In order to modify the config file, you can simply do sth like this:</p>
<pre><code>import fileinput

lines = fileinput.input("__config__.py", inplace=True)
nameTag="\'name\'"
versionTag="\'version\'"
name=""
newVersion="\'1.0.0\'" 
for line in lines:
    if line[0] != "'":
        print(line)
    else:
        if line.startswith(nameTag):
            print(line)
            name=line[line.index(':')+1:line.index(',')]
        if line.startswith(versionTag):
            new_line = versionTag + ": " + newVersion
            print(new_line)
</code></pre>
<p>Notice that the print function here actually writes to a file.
for more details on how the print function do the writing for you, see <a href="https://stackoverflow.com/questions/39086/search-and-replace-a-line-in-a-file-in-python">here</a></p>
<p>I hope it helps.</p>
</div>
<span class="comment-copy">since the content is a dictionary, maybe you could turn it into a json and do <code>json.dump()</code>?</span>
<span class="comment-copy">Well you can <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>literal_eval()</code></a> python literals, which your file contains. Writing back in pretty format is another thing though. Maybe <a href="https://docs.python.org/3/library/pprint.html" rel="nofollow noreferrer">pprint</a> could help.</span>
<span class="comment-copy">Perhaps this could be helpful? <a href="http://stackoverflow.com/questions/768634/parse-a-py-file-read-the-ast-modify-it-then-write-back-the-modified-source-c" title="parse a py file read the ast modify it then write back the modified source c">stackoverflow.com/questions/768634/â€¦</a></span>
<span class="comment-copy">If its only <code>dict</code>s like your example, you could use <code>json</code> for that, it has arguments to control indentation etc. Also, you example is missing a <code>,</code></span>
<span class="comment-copy">@C14L sorry, it was a typo.</span>
<span class="comment-copy">why no <code>sed</code>? ;)</span>
<span class="comment-copy">What is sed? :-)</span>
<span class="comment-copy"><code>sed</code> is a *nix utility that can be used for text transformations, but more popularly known for find and replace. <a href="http://www.brunolinux.com/02-The_Terminal/Find_and%20Replace_with_Sed.html" rel="nofollow noreferrer">brunolinux.com/02-The_Terminal/Find_and%20Replace_with_Sed.html</a>. If you just want to replace version numbers here is the command to do that  <code>sed -e "s/'version': '0.4.1'/'version': '1.0.0'/g" test.cnf &gt; new.cnf</code></span>
<span class="comment-copy"><code>fileinput</code> is very dangerous to use with <code>inplace</code>, you're not using it in a context manager, thus potentially standard output is redirected to that file if an exception happens in the for loop. Additionally by <code>.strip()</code>ing lines you're also removing any indentation which will break the python code on those lines. Also, the slice is very dependent on the exact phrasing</span>
<span class="comment-copy">well, I didn't actually notice stripping might break python indentation in the first place.thus, +1 for your comment !</span>
<span class="comment-copy">Though, if the code contains <i>only</i> a dictionary and some comments, then there is no indentation to break.</span>
