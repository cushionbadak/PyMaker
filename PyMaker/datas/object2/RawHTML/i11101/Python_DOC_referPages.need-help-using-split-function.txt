<div class="post-text" itemprop="text">
<p>This function adds up the numbers between zero in a string.  For example ('25025') becomes 25+25.  However, if I have a 0 at start and/or end of the string of the string argument being sent to test_string, it creates a space in the at the start/end of the list and won't compute.  What can I add to this function to make it filter out both 0s and blank spaces?</p>
<pre><code>def test_one(test_string):
      test = test_string.split("0")
      numbers=[int(x) for x in test]
      print(sum(numbers))

test_one('2022022022')
test_one('02022020')
test_one('25025')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're ok with keeping your current approach, then this should do:</p>
<pre><code>test = test_string.strip('0').split("0")
numbers = [int(x) for x in test]
</code></pre>
<p>Otherwise, you could use a comprehension in a generator expression altogether:</p>
<pre><code>sum(int(x) for x in test_string.strip('0').split("0"))
#                                 ^
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use string one of methods <em>strip()/rstrip()/lstrip()</em>.</p>
<pre><code>&gt;&gt;&gt; s = '0138076023'
&gt;&gt;&gt; s.lstrip('0')
'138076023'
&gt;&gt;&gt; s.strip('0')
'138076023'
&gt;&gt;&gt; s = '   asasd   '
&gt;&gt;&gt; s.strip()
'asasd'
&gt;&gt;&gt;   
</code></pre>
<p>Docs about these methods can be found <a href="https://docs.python.org/3/library/stdtypes.html?highlight=strip#str.lstrip" rel="nofollow">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Replace this:</p>
<pre><code>numbers=[int(x) for x in test]
</code></pre>
<p>With this:</p>
<pre><code>numbers=[int(x) for x in test if x]
</code></pre>
<p>This code is self-explanatory: convert <code>x</code> to integer and append it to the list <code>if</code> <code>bool(x)</code> is <code>True</code>, thus <em>skipping all the empty strings</em>.</p>
<p><code>str.split("0")</code> treats <code>"0"</code> as a delimiter and <em>doesn't</em> include any occurrences of it in the result. Check <a href="https://docs.python.org/2/library/stdtypes.html#str.split" rel="nofollow">the docs</a> for some examples and more explanation.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code>def test_one(test_string):
    test = test_string.split("0")
    print(test)
    if test[0] != '':
        numbers=[int(x) for x in test]
    else:
        test = test[1:]
        numbers=[int(x) for x in test]
    print(sum(numbers))

test_one('2022022022')
test_one('02022022022')
</code></pre>
<p>both  <code>test_one('2022022022')</code> and <code>test_one('02022022022')</code> will return the same</p>
<p>There've been a mistake on my side regarding case when string ends in zero. Made a correction.</p>
</div>
<span class="comment-copy"><code>numbers = [int(x) for x in test if x not in "0 "]</code></span>
<span class="comment-copy">Wow, awesome!  That was really helpful and it makes sense.</span>
<span class="comment-copy">This isn't quite right, it will break on a '00' or multiple repeated '0' sequence.  @ForceBru has the right answer below.</span>
<span class="comment-copy">This won't work because <code>"0"</code> is a non-empty string, making it <code>True</code>.</span>
<span class="comment-copy">Touche, my bad, you are correct.</span>
<span class="comment-copy">@joelgoldstick, fix what?</span>
<span class="comment-copy">This is the correct answer, there won't be any '0' @joelgoldstick because he split on '0'</span>
<span class="comment-copy">@joelgoldstick, you <b>split using <code>"0"</code> as a separator</b>, there won't be any zeros in the result</span>
<span class="comment-copy">that is based on how <code>split('0')</code> works - your test list gets <code>''</code> if your first digit is 0. So you just have to add a check in your function if the first element is zero in your string, or (which is same) check if the first element of <code>test</code> list is an emty string and kick it out if it is and then proceed as normal with your summation.</span>
<span class="comment-copy">Why downvote? is there a mistake? Please show it to me then</span>
<span class="comment-copy">unfortunately, there is one. If the input string will end on a zero, it'll get to the <code>else</code> part, and the first element of <code>test</code> will get cut regardless of its contents. For example, if <code>test_string=="2022020"</code>, the result will be <code>['22', '2', '']</code></span>
<span class="comment-copy">@ForceBru You're right, thank you! I ve corrected.</span>
<span class="comment-copy">Better now. You can also do <code>test = test[1:]</code> (i.e. remove that <code>len(test)</code> which doesn't do anything useful here and may be time-consuming) and move <code>print(numbers); print(sum(numbers))</code> outside the <code>if/else</code> clauses for more code clarity, if you wish.</span>
