<div class="post-text" itemprop="text">
<p>I have the list of strings: </p>
<pre><code>['[12 9 15]','[98 12 18]','[56 45 45]']   
</code></pre>
<p>and I want to convert it to </p>
<pre><code>[[12,9,15],[98,12,18],[56,45,45]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>split</code></a> inside a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to do this. </p>
<p>As <code>[1 2 3]</code> is not the proper representation of a python list in a string, we can remove the brackets to get <code>'1 2 3'</code> which on splitting becomes <code>['1', '2', '3']</code>. This can be easily converted to a integer nested list by casting it to an int using the <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer"><code>int</code></a> callable. </p>
<pre><code>&gt;&gt;&gt; l = ['[12 9 15]','[98 12 18]','[56 45 45]']   
&gt;&gt;&gt; [[int(j) for j in i[1:-1].split()] for i in l]
[[12, 9, 15], [98, 12, 18], [56, 45, 45]]
</code></pre>
<p>For further reading <a href="https://stackoverflow.com/q/34835951/4099593">What does "list comprehension" mean? How does it work and how can I use it?</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>Your strings <code>[12 9 15]</code> aren't formatted like python lists (commas are missing).  You've got a couple options depending on how robust your parser needs to be:</p>
<pre><code>import ast
out_list = []
for string_list in list_of_strings:
    list_repr = ','.join(string_list.split())
    out_list.append(ast.literal_eval(list_repr))
</code></pre>
<p>This will work so long as you don't have any inner strings formatted like:</p>
<p><code>'[ 12 9, 5]</code>  (the leading space will mess it up)</p>
<p>I think that probably the most robust parser that I can think of is to remove the <code>[</code> and <code>]</code> and them parse it yourself:</p>
<pre><code>out_list = []
for string_list in list_of_strings:
    str_items = string_list.replace('[', '').replace(']', '')
    out_list.append([int(item) for item in str_items.split()])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As long as the strings are fairly regular, this should work:</p>
<pre><code>&gt;&gt;&gt; x = ['[12 9 15]','[98 12 18]','[56 45 45]']   
&gt;&gt;&gt; x = [[int(i) for i in string.strip('[]').split()] for string in x]
&gt;&gt;&gt; x
[[12, 9, 15], [98, 12, 18], [56, 45, 45]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a regular expression</p>
<pre><code>[map(int, re.findall('\d+', item)) for item in x]
</code></pre>
<p>In case it is not always well-formated. </p>
<hr/>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; [map(int, re.findall('\d+', item)) for item in x]
[[12, 9, 15], [98, 12, 18], [56, 45, 45]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simpler the solution, the better it is for others to understand.</p>
<p>Well here is my solution:</p>
<pre><code>list_of_strings =  ['[12 9 15]','[98 12 18]','[56 45 45]']  
list_of_lists = [map(int, x[1:-1].split()) for x in list_of_strings]
</code></pre>
<p>So I using list-comprehension here. The 'map' function returns a list. The code <code>x[1:-1].split()</code> will split each string on space character(s) and the each string token would then be converted to 'int' which is the function I've passed to the map function.</p>
<p>Need more explanation over my code?</p>
</div>
<div class="post-text" itemprop="text">
<p>Please check if this is helpful.</p>
<pre><code>&gt;&gt;&gt; x = ['[12 9 15]','[98 12 18]','[56 45 45]']
&gt;&gt;&gt; print eval(str([ item.replace(" ",",") for item in x ]).replace("'", ''))
[[12, 9, 15], [98, 12, 18], [56, 45, 45]]
</code></pre>
</div>
<span class="comment-copy">How did you end up with <code>['[12 9 15]','[98 12 18]','[56 45 45]'] </code>?</span>
<span class="comment-copy">do it work with float variable as well  ?</span>
<span class="comment-copy">@henshalom Yes, Use the <code>float</code> buitin. <code>[[float(j) for j in i[1:-1].split()] for i in l]</code></span>
<span class="comment-copy">It works, but when I run it on my list i get [12, enter 15, enter 455 enter ...      it skips lines</span>
<span class="comment-copy">@henshalom Does your string input contain newlines? If yes, then <a href="https://docs.python.org/2/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>strip</code></a> them out. If you can provide a example input with the newlines, I can certainly help you out.</span>
<span class="comment-copy">the code that i use is this <a href="http://pastebin.com/aPWBsy21" rel="nofollow noreferrer">pastebin.com/aPWBsy21</a>  and the file is <a href="https://www.dropbox.com/s/a1bhvywfrx76xio/Lin%20%281%29.txt?dl=0" rel="nofollow noreferrer">dropbox.com/s/a1bhvywfrx76xio/Lin%20%281%29.txt?dl=0</a></span>
<span class="comment-copy">Why aren't you going by the <code>replace</code> way? <code>string_list.replace(' ',',')</code>. Apologies, If I am missing something there.</span>
<span class="comment-copy">@BhargavRao -- If there are more than one space in a row in the <code>string_list</code>, that'll fail.  We want to replace consecutive runs of spaces with a single comma and <code>str.replace</code> doesn't do that well.  It's a pretty easy <code>re.sub</code> if we wanted to go that route, but I thought I'd save OP from having to learn some regular expressions for this simple task.</span>
<span class="comment-copy">And <code>list(map(...))</code> on python3.x ... but I guess that's irrelevant since it's tagged <code>python2.7</code>.</span>
