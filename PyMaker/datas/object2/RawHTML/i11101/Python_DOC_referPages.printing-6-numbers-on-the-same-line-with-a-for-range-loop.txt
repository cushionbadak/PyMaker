<div class="post-text" itemprop="text">
<p>I am having an issue printing random numbers to the same line, then printing the total of the 6 random numbers on the second print statement. Here is what i have so far.</p>
<pre><code>import random
def main():

    randnums()

def randnums():
    for num in range(0, 6):
        num1 = random.randint(1,9) 
        print(str(num1))
        print(" The total is: ")

main()
</code></pre>
<p>Should look like this</p>
<pre><code>  2 4 8 9 9 3 
  The total is 35
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure what is wrong with your code because of its poor indentation but here are some things to take note of:</p>
<ol>
<li>You need to have a variable which stores the total</li>
<li>Python print function defaults all strings to print out with a newline.</li>
</ol>
<h1>Store total</h1>
<p>This is simple, just add a variable outside of the for loop which adds the number:</p>
<pre><code>def randnums():
    # Add this new variable
    total = 0
    for num in range(0, 6):
        num1 = random.randint(1, 9)
        total += num1
    # Print it out
    print("The total is:", total)
</code></pre>
<h1>Remove newline</h1>
<p>For <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow">Python 3</a>, it is simple to remove the newline. Just supply a new keyword argument to the print function and it will work:</p>
<pre><code>def randnums():
    total = 0
    for num in range(0, 6):
        num1 = random.randint(1, 9)
        total += num1
        # End the string with a space. Also removes newline
        print(num1, end=" ")
    # Add a newline before printing again.
    print("\nThe total is:", total)
</code></pre>
<p>If you are using Python 2 in the future, you could do it two ways: Either import <code>print_function</code> from <a href="https://docs.python.org/2/library/__future__.html" rel="nofollow"><code>__future__</code></a> or <a href="https://docs.python.org/2.7/reference/simple_stmts.html#print" rel="nofollow"><code>print</code></a> with a comma:</p>
<p>Import from <code>__future__</code>:</p>
<pre><code># Note that this import must come first
from __future__ import print_function
import random

def main():
    randnums()

def randnums():
    total = 0
    for num in range(0, 6):
        num1 = random.randint(1, 9)
        total += num1
        print(num1, end=" ")
    print("\nThe total is:", total)

main()
</code></pre>
<p>Or use a comma:</p>
<pre><code>import random

def main():
    randnums()

def randnums():
    total = 0
    for num in range(0, 6):
        num1 = random.randint(1, 9)
        total += num1
        # The comma is put after what you want to print. It also adds a space
        print num1,
    print "\nThe total is:", total

main()
</code></pre>
<p>The output:</p>
<pre><code>3 9 8 2 4 1
The total is: 27
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You will have better luck if you indent your code correctly.</p>
<pre><code>def randnums():
    for num in range(0, 6):
        num1 = random.randint(1,9) 
        print(str(num1), end=" ")
    print()
    print(" The total is: ")
</code></pre>
<p>And to you need to actually accumulate the total in a variable which is trivial because summing is very basic and everything basic is very well documented.</p>
</div>
<div class="post-text" itemprop="text">
<p>The correct code is as follows:</p>
<pre><code>import sys
def randnums():
    sum = 0
    for num in range(0, 6):
        num1 = random.randint(1,9) 
        sum += num1
        sys.stdout.write(str(num1)+" ")
    print("\nThe total is: "+str(sum))
</code></pre>
<p>OR (if Python 3)</p>
<pre><code>def randnums():
    sum=0
    for num in range(0, 6):
        num1 = random.randint(1,9) 
        sum += num1
        print(str(num1), end=' ')
    print("\nThe total is: "+str(sum))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>See this: <a href="https://stackoverflow.com/questions/12032214/python-3-print-new-output-on-same-line">Print new output on same line</a></p>
<p>In addition:</p>
<ol>
<li><p>Make sure to fix your indentation; python is very strict about it.</p></li>
<li><p>You need to either save the numbers in a list or accumulate the sum in a variable. Otherwise after you print num1, it's gone.</p>
<pre><code>import random

total = 0
for num in range(0, 6):
  num1 = random.randint(1,9)
  total += num1
  print(num1, end=' ')
print('\nThe total is:', total)
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>In python 2.7</p>
<pre><code> import random
    def main():

        randnums()

    def randnums():
        sum=0
        for num in range(0, 6):
            num1 = random.randint(1,9) 
            print(str(num1))
            sum+=num1,
        print
        print(" The total is: %d" % sum)

    main()
</code></pre>
<p>In python 3</p>
<pre><code>def randnums():
        sum=0
        for num in range(0, 6):
            num1 = random.randint(1,9) 
            print("{}".format(num1)),
            sum+=num1
        print
        print("{}{}".format(" The total is: " , sum))
</code></pre>
</div>
<span class="comment-copy">+1 These are all excellent solutions, the only other one I would suggest would be to store them in a list, then print the whole list, which I would expect to be faster than six separate calls to print individual characters, but it's less pythonic and in this basic case wholly unnecessary.</span>
<span class="comment-copy">@TemporalWolf Just tested some code. Using a list is actually slower. I am guessing it's because lists are more expensive compared to ints due to its expandability.</span>
<span class="comment-copy">PyCharm agrees with you, in the naive case. With list comprehension, it's much, much faster: 100000 elements (in sec)  Time for print 0.906000  Time for list 0.994000 (0.011000 to build list, 0.983000 to print)  Time for list comp 0.024000</span>
<span class="comment-copy">Try <code>print ''.join([repr(random.randint(1,9)) + " " for num in xrange(count)])</code> :)</span>
