<div class="post-text" itemprop="text">
<p>Per <a href="https://www.python.org/dev/peps/pep-0492/#asynchronous-iterators-and-async-for" rel="noreferrer">PEP-492</a> I am trying to implement an asynchronous iterator, such that I can do e.g. </p>
<pre><code>async for foo in bar:
    ...
</code></pre>
<p>Here is a trivial example, similar to the one in the docs, with a very basic test of instantiation and async iteration:</p>
<pre><code>import pytest

class TestImplementation:
    def __aiter__(self):
        return self
    async def __anext__(self):
        raise StopAsyncIteration


@pytest.mark.asyncio  # note use of pytest-asyncio marker
async def test_async_for():
    async for _ in TestImplementation():
        pass
</code></pre>
<p>However, when I execute my test suite, I see:</p>
<pre><code>=================================== FAILURES ===================================
________________________________ test_async_for ________________________________

    @pytest.mark.asyncio
    async def test_async_for():
&gt;       async for _ in TestImplementation():
E       TypeError: 'async for' received an invalid object from __aiter__: TestImplementation

...: TypeError
===================== 1 failed, ... passed in 2.89 seconds ======================
</code></pre>
<p>Why does my <code>TestImplementation</code> appear to be invalid? As far as I can tell it meets the protocol:</p>
<blockquote>
<ol>
<li>An object must implement an <code>__aiter__</code> method ... returning an asynchronous iterator object.</li>
<li>An asynchronous iterator object must implement an <code>__anext__</code> method ... returning an awaitable.</li>
<li>To stop iteration <code>__anext__</code> must raise a <code>StopAsyncIteration</code> exception.</li>
</ol>
</blockquote>
<p>This is failing with the latest released versions of Python (3.5.1), <code>py.test</code> (2.9.2) and <code>pytest-asyncio</code> (0.4.1).</p>
</div>
<div class="post-text" itemprop="text">
<p>If you read <a href="https://www.python.org/dev/peps/pep-0492/#why-aiter-does-not-return-an-awaitable">a little further down the documentation</a> it mentions that (emphasis mine):</p>
<blockquote>
<p>PEP 492 was accepted in CPython 3.5.0 with <code>__aiter__</code> defined as a
  method, that was expected to return <strong>an awaitable resolving to an
  asynchronous iterator</strong>.</p>
<p>In 3.5.2 (as PEP 492 was accepted on a provisional basis) the
  <code>__aiter__</code> protocol was updated to return asynchronous iterators directly.</p>
</blockquote>
<p>Therefore for versions prior to 3.5.2 (released 2016/6/27) the documentation is slightly out of step with how to write a working asynchronous iterator. The fixed version for 3.5.0 and 3.5.1 looks like:</p>
<pre><code>class TestImplementation:
    async def __aiter__(self):
  # ^ note
        return self
    async def __anext__(self):
        raise StopAsyncIteration
</code></pre>
<p>This was introduced on closing <a href="http://bugs.python.org/issue27243">bug #27243</a> and is a little clearer in the <a href="https://docs.python.org/3/reference/datamodel.html#asynchronous-iterators">data model documentation</a>, which also suggests a way of writing backwards compatible code.</p>
</div>
<span class="comment-copy">After nearly 3 years, You finally <a href="http://stackoverflow.com/users/3001761/jonrsharpe?tab=questions">asked a question</a>. Kudos</span>
<span class="comment-copy">@BhargavRao I felt like 2,076:1 was about right ;o)</span>
<span class="comment-copy">Works for me with pytest 2.9.2. What version are you using?</span>
<span class="comment-copy">Thanks both, will see if the bump to 3.5.1/2 or 3.6.0a2 fixes it</span>
<span class="comment-copy">@PadraicCunningham the above will start to work in 3.5.2 (tomorrow!) and 3.6.x, it's only the first two patch releases of 3.5.x that fail...</span>
<span class="comment-copy">After 3 years you then had to answer your own question :)</span>
<span class="comment-copy">@PadraicCunningham some habits are hard to break...</span>
<span class="comment-copy">@Padraic <a href="https://www.youtube.com/watch?v=4F4qzPbcFiA" rel="nofollow noreferrer">The next time jon asks a question, stay away from it</a> ;)</span>
