<div class="post-text" itemprop="text">
<p>Given:</p>
<h1><code>tree</code></h1>
<pre><code>~/dir                                                                          
▶ tree
.
├── a
│   ├── __init__.py
│   ├── c.py
└── b.py

1 directory, 3 files
</code></pre>
<h1><code>*.py</code> files</h1>
<pre><code>~/dir                                                                          
▶ tail -n +1 **/*.py                                                  
==&gt; a/__init__.py &lt;==
print(__name__)
import a.c

==&gt; a/c.py &lt;==
print(__name__)

==&gt; b.py &lt;==
print(__name__)
import a
</code></pre>
<h1>I/O</h1>
<pre><code>~/dir                                                                          
▶ python3 -m a.c
a
a.c
__main__
</code></pre>
<p>Module <code>a.c</code> has no dependencies on module <code>a</code>. So, why does Python run module <code>a</code> as if it were importing it? To me this is surprising behavior. I didn't expect running a script without imports would cause the script itself to be imported and evaluated twice. Wouldn't this be dangerous for the scripts that don't use the protection of <code>if __name__ == "__main__"</code>?</p>
<p>What is the justification for this behavior? Why does Python need to evaluate the containing module upon running its submodule?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Module a.c has no dependencies on module a. So, why does Python run module a as if it were importing it</p>
</blockquote>
<p><a href="https://docs.python.org/3/reference/import.html#regular-packages" rel="nofollow">From the documentation</a>:</p>
<blockquote>
<blockquote>
<p>Importing parent.one will implicitly execute <code>parent/__init__.py</code> and <code>parent/one/__init__.py</code>. Subsequent imports of <code>parent.two</code> or <code>parent.three</code> will execute <code>parent/two/__init__.py</code> and <code>parent/three/__init__.py</code> respectively.</p>
</blockquote>
</blockquote>
<hr/>
<blockquote>
<p>To me this is surprising behavior. I didn't expect running a script without imports would cause the script itself to be imported and evaluated twice.</p>
</blockquote>
<p>No, this isn't suprising. Think about this: whatever objects are exposed by package <code>a</code> in your example is controlled by <code>a/__init__.py</code>. The interpreter now has to evaluate <code>a/__init__.py</code> to find out if <code>a.c</code> exists at all. And in the process, the print statement is executed. Further, no module is imported twice. It is imported only once -- although you could technically write import statements multiple times.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Module a.c has no dependencies on module a</p>
</blockquote>
<p>You are confusing a package with a module. </p>
<pre><code>`a` is a package
`c` is a module within package `a`
</code></pre>
<p>There is a dependency: <code>a.c</code> is a member of package <code>a</code>.</p>
<p>Questions about this are common</p>
<p><a href="https://stackoverflow.com/questions/7948494/whats-the-difference-between-a-python-module-and-a-python-package">What's the difference between a Python module and a Python package?</a></p>
<p><a href="https://softwareengineering.stackexchange.com/questions/111871/module-vs-package">Module vs. Package?</a></p>
<blockquote>
<p>So, why does Python run module a as if it were importing it? To me this is surprising behavior</p>
</blockquote>
<p>When you import module <code>a.c</code>, python processes package <code>a</code> which includes executing code in the <code>a/__init__.py</code> and then module <code>c.py</code></p>
<p>Q: Why?</p>
<p>A: Because that is what the language states it will do. :) (I know, that isn't really the <em>why</em> you meant.)</p>
<p>Q: Why? As in, "why would it do that, what good can that be?"</p>
<p>A: The package level init might do something useful.</p>
<p>The package init can provide things, and the members can count on the package being execute before the member module starts.</p>
<p>You put <code>c</code> into package <code>a</code> for a reason.  </p>
<p>People can use packages simply for structural organization.  If you have Java experience you may see the dots as just how you organize classes.  If you are only using the <code>a</code> for this reason, leave the <code>__init__.py</code> empty and all will be as you expect.</p>
<p>But the package <code>a/__init__.py</code> allows other abilities.  It does require a care to use correctly, but is available when you need it.  </p>
<blockquote>
<p>Wouldn't this be dangerous for the scripts that don't use the protection of <code>if __name__ == "__main__":</code>?</p>
</blockquote>
<p>Yes, you need to clearly know what are scripts meant to be run (for example <code>python b.py</code>) and what are modules meant as containers for classes and functions.</p>
<p>In general, modules are not mean to be executed as stand alone scripts.   The common exception is during test and development.  Then you will regularly see bits of test code</p>
<pre><code>if __name__ == "__main__":
    x = somefunction()
    print(x)
    a = SomeClass()
    y = a.foo()
    print(y)
</code></pre>
</div>
<span class="comment-copy">I didn't think about objects exposed by <code>__init__.py</code>.</span>
