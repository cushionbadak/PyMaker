<div class="post-text" itemprop="text">
<p>I have a dictionary:</p>
<pre><code>d = {'time': {36.0: 'mo'}, 'amount': {200.0: '$'}}
</code></pre>
<p>Each key (e.g. 'time') only ever has one value (e.g. {36.0 'mo'})</p>
<p>I'd like to access the 36.0 by doing</p>
<pre><code>result = d.time
</code></pre>
<p>And the 200.0 by doing</p>
<pre><code>result = d.amount
</code></pre>
<p>How do I do this? So far I have:</p>
<pre><code>class Bunch(object):
  def __init__(self, adict):
    self.__dict__.update(adict)

x = Bunch(d)
print x.time
</code></pre>
<p>Which produces {36.0: 'mo'} not 36.0. </p>
</div>
<div class="post-text" itemprop="text">
<p>I'd subclass <code>dict</code> and override <code>__getattr__</code>, after having enshured that there is no name clash between the data keys and <code>dict</code> methods.</p>
<pre><code>d = {'time': {36.0: 'mo'}, 'amount': {200.0: '$'}}

class Bunch(dict):
    def __getattr__(self, attr):
        try:
            val = self[attr]
            return next(iter(val))
        except KeyError:
            raise AttributeError(attr)

x =  Bunch(d)
x.time # 36.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Below snippet hijacks the attribute access, and returns the first key of the dict instead of the dict itself. It does this for all attributes except <code>__dict__</code>, so use accordingly and be aware of what this implies.</p>
<pre><code>from __future__ import print_function                              

d = {'time': {36.0: 'mo'}, 'amount': {200.0: '$'}}

class Bunch(object):
  def __init__(self, adict):
    self.__dict__.update(adict)

  def __getattribute__(self, attr):
      if attr == '__dict__':
          return super(Bunch, self).__getattribute__(attr)

      return next(iter(self.__dict__[attr]))

x = Bunch(d)
print(x.time)
print(x.amount)
</code></pre>
<p>Testing it</p>
<pre><code>➜  ~ python3 keys.py                                              
36.0
200.0
➜  ~ python2 keys.py                                              
36.0
200.0
</code></pre>
</div>
<span class="comment-copy">recursively change all <code>dict</code> values in <code>adict</code> to <code>Bunch</code> objects?  Although I don't see how you expect to get <code>'mo'</code> part if <code>d.time</code> just gives a key of a dictionary value that may (legally) have more then one pair.</span>
<span class="comment-copy">You want to store <i>two</i> values in a variable/dictionary, yet get one "by default" when evaluating the variable? Sounds like you want a custom class and implement its <code>__str__</code> method or such.</span>
<span class="comment-copy">And how would you like to access "mo" and "$"? Note that it can't be something like <code>d.time.unit</code>, because <code>d.time</code> evaluates to a float and floats don't have a <code>unit</code> attribute.</span>
<span class="comment-copy">Why are the values structured as <code>{36.0: 'mo'}</code> instead of something like <code>(36.0, 'mo')</code>? They don't seem to be key-value associations.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>collections.namedtuple</code></a> could be useful here.</span>
<span class="comment-copy">@TadhgMcDonald-Jensen I've mentioned that in the answer</span>
<span class="comment-copy">Was it there when I commented? Wow I am not paying enough attention today....</span>
<span class="comment-copy">this assumes python2, you can't do <code>.keys()[0]</code> in python 3</span>
<span class="comment-copy">@TadhgMcDonald-Jensen A possible edit could be <code>next(iter(self.__dict__['time']))</code>.</span>
<span class="comment-copy">As a note, <code>next(iter(self.__dict__['time']))</code> should work in Python 2 and 3.</span>
<span class="comment-copy">Thanks. However there are a LOT of these 'time', 'amount' keys. Hard-coding one line for each one is not practical or future-proof. I'm hoping there is a way to just do x.time (for example), without having to hard-code 'time' in my method. Any ideas?</span>
<span class="comment-copy">@bakkal because you are updating <code>self.__dict__</code> you are placing those keys in the instance variables, so <code>__getattr__</code> would never be called.  You would need to override <code>__getattribute__</code> if you are going down that route. (or store the dict some other way)</span>
