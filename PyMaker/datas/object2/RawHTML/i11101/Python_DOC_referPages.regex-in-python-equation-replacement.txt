<div class="post-text" itemprop="text">
<p>I'm somewhat new to regex and Python and am in the following situation. I'd like to take an equation string, like <code>"A + B + C + 4D"</code>, and place the number 1 in front of all variables that have no number in front of them. So something like:</p>
<pre><code>&gt;&gt;&gt; foo_eqn = "A + B + C + 4D"
&gt;&gt;&gt; bar_eqn = fill_in_ones(foo_eqn)
&gt;&gt;&gt; bar_eqn
"1A + 1B + 1C + 4D"
</code></pre>
<p>After some research and asking, I came up with </p>
<pre><code>def fill_in_ones(in_eqn):
    out_eqn = re.sub(r"(\b[A-Z]\b)", "1"+ r"\1", in_eqn, re.I)
    return(out_eqn)
</code></pre>
<p>However, it looks like this only works for the first two variables:</p>
<pre><code>&gt;&gt;&gt; fill_in_ones("A + B")
1A + 1B
&gt;&gt;&gt; fill_in_ones("A + B + E")
1A + 1B + E
&gt;&gt;&gt; fill_in_ones("2A + B + C + D")
2A + 1B + 1C + D
</code></pre>
<p>Anything really obvious I'm missing? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like the <code>re.I</code> (ignore case flag) is the culprit:</p>
<pre><code>&gt;&gt;&gt; def fill_in_ones(in_eqn):
...     out_eqn = re.sub(r"(\b[A-Z]\b)", "1"+ r"\1", in_eqn)
...     return(out_eqn)
...
&gt;&gt;&gt;
&gt;&gt;&gt; fill_in_ones("A + 3B + C + 2D + E")
'1A + 3B + 1C + 2D + 1E'
</code></pre>
<p>This is because the next positional argument to <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow">re.sub</a> is <code>count</code>, not <code>flags</code>. You'll need:</p>
<pre><code>def fill_in_ones(in_eqn):
    out_eqn = re.sub(r"(\b[A-Z]\b)", "1"+ r"\1", in_eqn, flags=re.I)
    return(out_eqn)
</code></pre>
<p>Unfortunately, the <code>re.I</code> flag happens to be <code>2</code>:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.I
2
</code></pre>
</div>
<span class="comment-copy">Short tip, use <code>r"1\1"</code> instead of <code>"1"+ r"\1"</code>.</span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer">Syntax</a>: <code>re.sub(pattern, repl, string, count=0, flags=0)</code>. And it's because <code>re.I == 2</code></span>
<span class="comment-copy">Awesome, thanks so much!</span>
