<div class="post-text" itemprop="text">
<p>I have a regex that searches for <code>this</code> or <code>that</code>.  If it finds <code>this</code>, it replaces it with <code>ONE</code>.  If it finds <code>that</code>, it replaces it with <code>TWO</code>.</p>
<p>Here is what it looks like in Perl: 
</p>
<pre><code>m =~ s/(this)|(that)/ "ONE" x!! $1 . "TWO" x!! $2 /eg
</code></pre>
<p><code>e</code> is the <em>eval</em> option.  <code>.</code> is a concatenation.  <code>x!!</code> acts as an if statement.</p>
<p>How can I do the same thing in Python 3?  I'm looking for something like:
</p>
<pre><code>m = re.sub(r"(this)|(that)", ("ONE" * bool(match.group(1))) + ("TWO" * bool(match.group(2))), m, flags=re.EVAL)
</code></pre>
<p>I guess I have two main roadblocks.  Firstly, I don't know how to obtain the <code>match</code> object <em>within</em> a regex substitution.  Secondly, I don't know if eval is supported by python or what the best alternative is.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has no strange language syntax related to regular expressions - they are performed in well-behaved function calls.</p>
<p>So instead of a part of the call arguments that are executed on match, what you have is a callback function: all you have to do is to put a callable object as the second argument, instead of the substitution string. The callable receives the match object as its sole argument.</p>
<p>In this case, all you need is an inline <code>if</code> - so you can even define the callable as a lambda expression:</p>
<pre><code>t = "this this that"
m = re.sub(r"(this)|(that)", lambda x: "ONE" if x.group() == "this" else "TWO", t   )
</code></pre>
</div>
<span class="comment-copy">Did you check the <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">documentation</a>?</span>
<span class="comment-copy"><i>"Python has no strange language syntax related to regular expressions"</i>. No, but is <i>does</i> have "strange language syntax" related to other things, and your tribalism isn't welcome</span>
<span class="comment-copy">I tried to clarify your answer, but cannot make head nor tail of this: <i>"So instead of a part of the call arguments that are executed on match, what you have is a callback function: all you have to do is to put a callable object as the second argument, instead of the substitution string. The callable receives the match object as its sole argument"</i>. Please break it up and explain</span>
<span class="comment-copy"><i>"so you can even define the callable as a lambda expression"</i> No <i>"strange language syntax"</i> here then! In Perl, a <i>lambda</i> is a subroutine without a name, and Python could be the same if <code>def</code> were more flexible</span>
