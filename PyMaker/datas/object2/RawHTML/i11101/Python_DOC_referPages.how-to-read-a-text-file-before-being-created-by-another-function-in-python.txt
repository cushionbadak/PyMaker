<div class="post-text" itemprop="text">
<p>In my python code, I call a function written in FreeFem++ and then I save the output from FreeFem++ code in a text file and I want to read this in python.</p>
<pre><code>def f(x):
    os.system("Here the FreeFem++ code will be called and the result will be saved as out.txt")
    myfile=open("out.txt")
    return myfile.read()
</code></pre>
<p>The problem is that, when I run the python code, as the out.txt has not been created, it gives me an error saying the out.txt doesn't exist!</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow"><code>subprocess.run()</code></a> to call your freefem++ program, and make sure that your call actually generates the file before it exists. You could check that by adding a breakpoint just before the <code>open</code>.</p>
<p>So change to subprocess:</p>
<pre><code>def f(x):
    cp = subprocess.run(['freefem++', '--argument', '--other_argument'])
    if cp.returncode != 0:
        print('Oops… failure running freefem++!')
        sys.exit(cp.returncode) # actually you should be raising an exception as you're in a function
    if not os.path.exists('out.txt'):
        print('Oops… freefem++ failed to create the file!')
        sys.exit(1) # same you'd better be raising an exception as you're in a function
    with open('out.txt', 'r') as ff_out:
        return ff_out # it is better to return the file object so you can iterate over it
</code></pre>
<p>To check that your file is indeed created before opening it:</p>
<pre><code>def f(x):
    cp = subprocess.run(['freefem++', '--argument', '--other_argument'])
    if cp.returncode != 0:
        print('Oops… failure running freefem++!')
        sys.exit(cp.returncode)

    # XXX Here we make a breakpoint, when it's stopping open a shell and check for the file!
    # if you do not find the file at this point, then your freefem++ call is buggy and your issue is not in the python code, but in the freefem++ code.
    import pdb;pdb.set_trace()

    with open('out.txt', 'r') as ff_out:
        return ff_out # it is better to return the file object so you can iterate over it
</code></pre>
<p>Finally, the most elegant solution would be for you to make that the freefem++ program outputs everything to stdout, and that you take that output through a pipe within python, using <a href="https://docs.python.org/3/library/subprocess.html#popen-objects" rel="nofollow"><code>subprocess.popen()</code></a>:</p>
<pre><code>def f(x):
    p = subprocess.popen(['freefem++'…], stdout=subprocess.PIPE)
    out, _ = p.communicate()
    if p.returncode != 0:
        raise Exception('Oops, freefem++ failed!')
    return out
</code></pre>
</div>
<span class="comment-copy"><code>os.system</code> is rather crude. <a href="https://docs.python.org/3/library/subprocess.html#module-subprocess" rel="nofollow noreferrer">subprocess</a> gives you <i>far</i> more control, although it does have a bit of a learning curve.</span>
<span class="comment-copy">Are you sure that the file is saved in the same folder as your script?</span>
<span class="comment-copy">Thanks for your responses. Actually my text file is in the following format(when it is without my parameters, it works fine!)</span>
<span class="comment-copy">@jonrsharpe                                                                          myfile = open("Data_"+str(x[0,0]/3600)+"<i>"+str(x[0,1])+"</i>"+str(x[0,2])+".txt")                   I have saved the txt file with same format in FreeFem++</span>
<span class="comment-copy">Thank you very much for your explanation, with my previous method of calling, it works fine when I save the txt file with a simple name.txt   the problem is that I use the string of my variables to save my file and that causes the error.    I want to read my txt file in this format:                                                                                                myfile=open("Data_"+str(x[0,0]/3600)+"<i>"+str(x[0,1])+"</i>"+str(x[0,2])+".txt")</span>
<span class="comment-copy">Well, use format strings to better control the filename generation (<code>data_{}{}{}.txt".format(x,y,z)</code>) also set it up as a variable so you can print it before using it to make sure you do it right, and even check for the file existence using <code>os.path.exists</code>. Oh and also use context managers to open a file (<code>with open(...) as f</code>) to avoid leaking file descriptors.</span>
<span class="comment-copy">And use <code>subprocess</code> and not <code>os.system()</code>, as it is considered deprecated in modern python.</span>
