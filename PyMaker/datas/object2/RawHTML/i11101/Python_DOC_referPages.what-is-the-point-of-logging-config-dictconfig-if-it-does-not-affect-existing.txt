<div class="post-text" itemprop="text">
<p>Configuring a logger using the APIs provided by <code>logging.Logger</code> as shown in <code>b.py</code> configures existing loggers. Configuring logging with <code>logging.config.dictConfig()</code> does not configure existing loggers as shown by <code>a.py</code>.</p>
<h1><code>*.py</code> files</h1>
<pre><code>~/bar                                                                                    
▶ tail -n +1 *.py
==&gt; a.py &lt;==
import logging
from logging.config import dictConfig

logger = logging.getLogger(__name__)

logging_config = dict(
    version = 1,
    handlers = {
        'h': {'class': 'logging.StreamHandler'}
    },
    root = {
        'handlers': ['h'],
        'level': logging.DEBUG
    }
)

dictConfig(logging_config)

logger.debug("This is a test")

==&gt; b.py &lt;==
import logging

logger = logging.getLogger(__name__)

logging.getLogger().setLevel(logging.DEBUG)
logging.getLogger().addHandler(logging.StreamHandler())

logger.debug("This is a test")
</code></pre>
<h1>I/O</h1>
<pre><code>~/bar                                                                                    
▶ python -m a

~/bar                                                                                    
▶ python -m b
This is a test
</code></pre>
<p>If a library creates a logger before <code>logging.config.dictConfig()</code> is set up, the logger will not be configured properly. How do libraries handle this? Do they expect a logging configuration be passed to them? Do they simply avoid creating loggers during import?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>logging.config.dictConfig()</code> does affect the configuration of existing loggers. However, <code>dictConfig()</code> will disable existing loggers by default unless <code>disable_existing_loggers = False</code> is defined in the dictionary passed to <code>dictConfig()</code> according to <a href="https://docs.python.org/3/library/logging.config.html#dictionary-schema-details" rel="nofollow"><code>16.7.2.1. Dictionary Schema Details</code></a>.</p>
</div>
<span class="comment-copy">Then I don't really get it. By default, <code>disable_existing_loggers = True</code>. To be sure I forced it to True and each time I have the same result. I make sure to import logging after all the modules that create loggers. I define the root logger so that no DEBUG or INFO are displayed on screen. But it doesn't work, I still have INFO on screen.   My dict have: <code>"loggers":     {     "root":         {         "level":"NOTSET",         "handlers":["console", "file"],         },     }, "disable_existing_loggers":True,</code></span>
