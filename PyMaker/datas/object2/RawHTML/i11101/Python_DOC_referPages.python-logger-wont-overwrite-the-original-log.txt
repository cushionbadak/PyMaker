<div class="post-text" itemprop="text">
<p>So, when I copy paste the following x times  to the python prompt, 
 it add the log x times to the end of the designated file. </p>
<p>How can I change the code so that each time I copy paste this to the prompt, 
I simply overwrite the existing file (the code seems to not accept the 
<code>mode = 'w'</code> option or I do not seem to understand its meaning)</p>
<pre><code>def MinimalLogginf():
    import logging
    import os
    paths = {'work': ''}
    logger = logging.getLogger('oneDayFileLoader')
    LogHandler = logging.FileHandler(os.path.join(paths["work"] , "oneDayFileLoader.log"), mode='w')
    formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
    LogHandler.setFormatter(formatter)
    logger.addHandler(LogHandler) 
    logger.setLevel(logging.DEBUG)
    #Let's say this is an error:
    if(1 == 1):
        logger.error('overwrite')
</code></pre>
<p>So I run it once:
    MinmalLoggingf()</p>
<p>Now, I want the new log file to overwrite the log file created on the previous run:</p>
<pre><code>MinmalLoggingf()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly, you're running a certain Python process for days at a time, and want to rotate the log every day. I'd recommend you go a different route, using a handler that automatically rotates the log file, e.g. <a href="http://www.blog.pythonlibrary.org/2014/02/11/python-how-to-create-rotating-logs/" rel="nofollow">http://www.blog.pythonlibrary.org/2014/02/11/python-how-to-create-rotating-logs/</a></p>
<p>But, if you want to control the log using the process in the same method you're comfortable with (Python console, pasting in code.. extremely unpretty and error prone, but sometimes quick-n-dirty is sufficient for the task at hand), well... </p>
<p>Your issue is that you create a new FileHandler each time you paste in the code, and you add it to the Logger object. You end up with a logger that has X FileHandlers attached to it, all of them writing to the same file. Try this:</p>
<pre><code>import logging
paths = {'work': ''}
logger = logging.getLogger('oneDayFileLoader')
if logger.handlers:
   logger.handlers[0].close()
   logger.handlers = []
logHandler = logging.FileHandler(os.path.join(paths["work"] , "oneDayFileLoader.log"), mode='w')
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
logHandler.setFormatter(formatter)
logger.addHandler(logHandler) 
logger.setLevel(logging.DEBUG)
logger.error('overwrite')
</code></pre>
<p>Based on your request, I've also added an example using TimedRotatingFileHandler. Note I haven't tested it locally, so if you have issues ping back.</p>
<pre><code>import logging
from logging.handlers import TimedRotatingFileHandler

logPath = os.path.join('', "fileLoaderLog")
logger = logging.getLogger('oneDayFileLoader')
logHandler = TimedRotatingFileHandler(logPath,
                                   when="midnight",
                                   interval=1)
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
logHandler.setFormatter(formatter)
logger.addHandler(logHandler) 
logger.setLevel(logging.DEBUG)
logger.error('overwrite')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your log messages are being duplicated because you call <code>addHandler</code> more than once.  Each call to <code>addHandler</code> adds an <em>additional</em> log handler.</p>
<p>If you want to make sure the file is created from scratch, add an extra line of code to remove it:</p>
<pre><code>os.remove(os.path.join(paths["work"], "oneDayFileLoader.log"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The mode is specified as part of logging.basicConfig and is passed through using filemode.</p>
<pre><code>logging.basicConfig(
    level = logging.DEBUG,
    format = '%(asctime)s %(levelname)s %(message)s',
    filename = 'oneDayFileLoader.log,
    filemode = 'w'
)
</code></pre>
<p><a href="https://docs.python.org/3/library/logging.html#simple-examples" rel="nofollow">https://docs.python.org/3/library/logging.html#simple-examples</a></p>
</div>
<span class="comment-copy">The rotating log solution looks better, but how do you use it?</span>
<span class="comment-copy">As I don't know how your code base is actually executed, or really anything about your use case, it's a bit of a guess.. but, let me edit and add an example that might work.</span>
<span class="comment-copy">I'm really trying to learn this stuff. I will add a more fleshed out example to the question (also for future readers)</span>
<span class="comment-copy">There, added an example that might work. Make sure you test it before relying on it.. and if there are any syntax errors, let me know. Not you only have to execute this code once, and it should create a new log file every night at midnight.</span>
<span class="comment-copy">Just like I do it in the code above. I make a "leap of faith" (don't even check it, really, since it's just qnd code) and assume that the first current handler is of that type, and then I close it:   <code>logger.handlers[0].close()</code>. Only you'd know it is the correct handler since you'll keep it in a different context.</span>
<span class="comment-copy">Wait, what part of the code in the question does this replace?</span>
