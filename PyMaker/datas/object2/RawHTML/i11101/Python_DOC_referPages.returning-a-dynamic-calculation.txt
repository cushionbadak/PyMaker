<div class="post-text" itemprop="text">
<p>I am pretty sure this is the easiest mistake i can ever overlook. had a similar problem once but cant remember how i solved it for the love of god...</p>
<pre><code>import random

enemy_hp = 100
player_hp = 100
enemy_hit = random.randint(1, 10)
enemy_meteor = 8
enemy_heal = 3
player_hit = random.randint(1,10)
player_fireball = 5
player_heal = 7

def eHit(enemy_hit):
    player_hp = 100-enemy_hit
    print (player_hp)

eHit(enemy_hit)
</code></pre>
<p>ok i edited it and its working as intented, but even with that tutorial i struggle with something else. </p>
<blockquote>
<p>How do i save the new value after the calulation so it doesnt always start at 100? </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>As you have edited the original question, and you are now asking</p>
<blockquote>
<p>How do i save the new value after the calulation so it doesnt always
  start at 100?</p>
</blockquote>
<p>you need to <code>return</code> the new value and assign to the <code>player_hp</code> variable and move the randomisation of <code>enemy_hit</code> so it actually takes a new value before you call <code>eHit()</code>, like this</p>
<pre><code>import random

enemy_hp = 100
player_hp = 100
enemy_meteor = 8
enemy_heal = 3
player_hit = random.randint(1,10)
player_fireball = 5
player_heal = 7

def eHit(enemy_hit, player_hp):
    player_hp = player_hp - enemy_hit
    return player_hp

while player_hp &gt; 0:
    enemy_hit = random.randint(1, 10)
    player_hp = eHit(enemy_hit, player_hp)
    print (player_hp)
</code></pre>
<p>I have put a <code>while player_hp &gt; 0</code> in there for testing purposes</p>
<p>Thinking about this, I would do it even a little different again, the following code so you can try this yourself:</p>
<pre><code>import random


player_hp = 100

def random_hit(start = 1, stop = 10):
    return random.randint(start, stop)

def enemy_hit(player_hp):
    return player_hp - random_hit()

while player_hp &gt; 0:
    player_hp = enemy_hit(player_hp)
    print (player_hp)
</code></pre>
<p>now you can call <code>random_hit()</code> with default, or with changed parameters for "bigger" hits like <code>random_hit(20, 30)</code>, you can also call <code>random_hit()</code> from other functions, no need to double assign.</p>
<p>And you can take is further, as a hit is a hit, no matter who is hitting who, so no double functions, something like this:</p>
<pre><code>import random


player_hp = 100
enemy_hp = 100

def hit(hp, start = 1, stop = 10):
    return hp - random.randint(start, stop)

while player_hp &gt; 0:  ## while loop only for testing purposes
    # for a enemy hitting a player with normal force, call this:
    player_hp = hit(player_hp)
    print (player_hp)

while enemy_hp &gt; 0:  ## while loop only for testing purposes
    # for a player hitting an enemy with extra force, call this:
    enemy_hp = hit(enemy_hp, 10, 20)
    print (enemy_hp)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>print(eHit)</code> is wrong; <code>eHit</code> is a function not a variable. You should call it like <code>print(eHit(somthing))</code></p>
<p>Purely based on the names of the variable declarations at the start, I guess you meant <code>print(eHit(enemy_hit))</code></p>
<p>Then you run into the problem that <code>player_hp</code> is a local variable, and used before assignment, so now you need to change <code>eHit()</code></p>
<pre><code>def eHit(enemy_hit, player_hp):
    player_hp -= enemy_hit
    return player_hp - enemy_hit
</code></pre>
<p>and your print statement is now</p>
<p><code>print(eHit(enemy_hit, player_hp))</code></p>
<p>The same goes for other functions you have defined.</p>
</div>
<span class="comment-copy">I have no idea what the problem is. I would rather not guess. Would you care to tell us what problem you are having with the code?</span>
<span class="comment-copy">my bad, quick finger, edit it</span>
<span class="comment-copy">I would think you've misunderstood the nature of functions. <code>def eHit(enemy_hit)</code> defines a function that takes an argument named <code>enemy_hit</code> instead of using the variable in the larger scope with the same name. Within the function body, the variable named <code>enemy_hit</code> will have the value of whatever has been passed into the function. For more information on this, read: <a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow noreferrer">docs.python.org/3/tutorial/controlflow.html#defining-functions</a></span>
<span class="comment-copy">You need to <i>call</i> functions. <code>print(eHit)</code> doesn't call the function. Also -- note that the <code>int</code> in <code>enemy_hp = int(100)</code> is pointless.</span>
<span class="comment-copy">ye the <code>=int</code> was an attempt to find a fix for myself. i guess imma re-read that tutorial and comeback if it still doesnt work.</span>
<span class="comment-copy">worked, even added text telling him how much he got hit for and how much hp he still has.  thanks mate, at least youre nice :P</span>
