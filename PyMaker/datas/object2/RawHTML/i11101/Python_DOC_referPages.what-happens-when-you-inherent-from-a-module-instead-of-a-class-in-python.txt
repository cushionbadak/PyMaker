<div class="post-text" itemprop="text">
<p>I recently came across <a href="https://stackoverflow.com/questions/14583761/typeerror-module-init-takes-at-most-2-arguments-3-given">this question</a>.</p>
<blockquote>
<pre><code>import Object

class Visitor(Object):

    def __init__(self):
        super(Visitor,self).__init__()
    def visit(self, obj):
        pass
    def getIsDone(self):
        return False
    isDone = property(fget =lambda self:self.getIsDone())
</code></pre>
<p>I get this error: </p>
<pre><code>TypeError: module.__init__() takes at most 2 arguments (3 given)
</code></pre>
</blockquote>
<p>and its answer:</p>
<blockquote>
<pre><code>class A:pass
print(A)              #outputs &lt;class '__main__.A'&gt;
import urllib
print(urllib)         #outputs &lt;module 'urllib' from '/usr/lib/python3.2/urllib/__init__.py'&gt;
</code></pre>
<p>Your error is happening because Object is a module, not a class. So
  your inheritance is screwy.</p>
<p>Change your import statement to:</p>
<pre><code>from Object import ClassName
</code></pre>
<p>and your class definition to:</p>
<pre><code>class Visitor(ClassName):
</code></pre>
<p>or</p>
<p>change your class definition to:</p>
<pre><code>class Visitor(Object.ClassName):
   etc
</code></pre>
</blockquote>
<p>I'm not really satisfied with this answer as I'm not really sure how I get from that error message to the conclusion that I am accidentally inheriting from a module instead of a class. I was wondering if somebody could elaborate on why this error is occurring and what exactly the arguments being given are? When the python interpreter comes across code like this: 
<code>class Employee(Person)</code> what is happening? What exactly does the answerer mean by my inheritance is screwy? Thanks for any explanations or references to resources.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you put an object called <code>BaseClass</code> in the inheritance list, then the interpreter will call this internally:</p>
<pre><code>type(BaseClass).__init__(cls, name_of_subclass, (BaseClass,), dict_of_subclass)
# or simpler
type(BaseClass)(name_of_subclass, (BaseClass,), dict_of_subclass)
</code></pre>
<p>You can create a dummy BaseClass to test it</p>
<pre><code>class Meta(object):
   def __init__(self, name,   base,  subcls):
      print (self, name,   base,  subcls)

Base = Meta('','','')

class Test(Base):
    prop1="hello"
</code></pre>
<p>which outputs:</p>
<pre><code>&lt;__main__.Meta object at 0x7f7471666bd0&gt;
&lt;__main__.Meta object at 0x7f7471666c50&gt; Test (&lt;__main__.Meta object at 0x7f7471666bd0&gt;,) {'__module__': '__main__', 'prop1': 'hello'}
</code></pre>
<p>To answer your question: When the interpreter sees <code>class Employee(Person): pass</code>, the following will happen:</p>
<pre><code>type(Person).__init__(cls, 'Employee', (Person,), {'__module__': '__main__'})
</code></pre>
<p>If <code>Person</code> is a normal class, <code>type(person)</code> will return <code>type</code> itself. Then <code>type.__init__</code> will get called.</p>
<p>If <code>Person</code> is a module, <code>type(person)</code> will return the object <code>module</code>, which has a method <code>__init__</code>. But this method only takes 2 argument, there you get an error.</p>
<pre><code>import sys
type(sys).__init__(sys,2,3,4)
#Traceback (most recent call last):
#  File "testClassInheritance.py", line 11, in &lt;module&gt;
#    type(sys).__init__(sys,2,3,4)
#TypeError: module.__init__() takes at most 2 arguments (3 given)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To find out where you've gone wrong, you don't really need to look at the error message in this case, it's pretty clear from the code itself.</p>
<p><code>import foo</code></p>
<p>Always means that foo is a module (as opposed to <code>from foo import bar</code> where <code>bar</code> can be a module, class, function a variable and so on). This is where naming conventions help us, if <code>PEP8</code> is followed, then one can easily differentiate between classes and module. The code in your question doesn't follow which is clearly not good for others to understand.</p>
<p>Once you get that you've tried to subclass/inherit a <code>module</code> the rest is not that tricky.</p>
<p>Most of the modules don't define <code>__init__</code> which means when you try to access it, it simply tries to find it up in the inheritance chain (if you're really interested in that, you can read upon python inheritance, mro etc, but I suspect that's not what has confused you here.) and finds the builtin class <code>module</code> which (do <code>import Object;type(Object)</code> or <code>import os; type(os)</code>) has a <code>__init__</code> expecting different arguments than your overridden method. This would have been more tricky to debug if your method has exactly same number of arguments as the above.</p>
<p>The error message does not seem helpful to you because there is no way for python to understand whether you intentionally want to override the <code>module.__init__</code> or some class's <code>__init__</code>. Try </p>
<pre><code>import os
help(type(os))
</code></pre>
</div>
<span class="comment-copy">python language is so dynamic you can pass any entity that exists. It's only when executed that problems are reported. Had you passed an integer variable as parent, it would have tried to call init() for the int too.</span>
<span class="comment-copy">For an overview, see <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer"><i>The Python Tutorial</i></a>, <a href="https://docs.python.org/3/tutorial/classes.html#inheritance" rel="nofollow noreferrer">9.5.  Inheritance</a>.  Use of the <code>import</code> statement is covered in <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">6.  Modules</a>.</span>
<span class="comment-copy">Thank you, this is exactly what I was looking for</span>
<span class="comment-copy">Actually, <code>type(BaseClass)(...)</code> is called. That means <code>type(BaseClass).__init__</code> is called if there is a <code>type(BaseClass).__new__</code> that invokes it.</span>
