<div class="post-text" itemprop="text">
<p>I'm writing a script and running it with the -i argument in order to keep the repl open after it finishes in order to be able to see info about the objects that I'm using while debugging.</p>
<p>In order to avoid having to quit and re-run the script I figured out that I can modify and save the script and then import [script-name] and then call my main method with [script-name].[main-method] ().</p>
<p>Now I want to write a single-character method (for convenience) that does:</p>
<pre><code>def x():
    import [this script]
    [this script].[main-method]()
</code></pre>
<p>but to also be able to change the script's file name and retain the easy-reloading functionality without having to alter the code.</p>
<p>I've tried using importlib (see below) to no avail.</p>
<pre><code>def y():
   import importlib
   this = importlib.import_module("".join(sys.argv[0].split(".py"))) # sys.argv[0] gives [module-name].py and the rest of the code inside the parentheses removes the ".py"
   this.[main-method]()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>import</code>, in any of it's incarnations, only reloads the script once. You are looking for the <a href="https://docs.python.org/3/library/imp.html#imp.reload" rel="nofollow noreferrer"><code>reload</code></a> function:</p>
<pre><code>from importlib import reload
import sys

def main():
    pass

def x():
    reload(sys.modules[__name__])
    main()
</code></pre>
<p>This code will reload the module you are currently in (probably <code>__main__</code>) and rerun a method from it. If you want to reload a script from within the interpreter, do the following instead:</p>
<pre><code>&gt;&gt;&gt; from importlib import reload
&gt;&gt;&gt; def x():
...     reload(mymodule)
...     mymodule.main()
...
&gt;&gt;&gt; import mymodule
&gt;&gt;&gt; mymodule.main()
&gt;&gt;&gt; # Do some stuff with mymodule
&gt;&gt;&gt; x()
</code></pre>
<p>You may have to replace <code>import mymodule</code> with <code>mymodule = importlib.import_module("".join(sys.argv[0].split(".py")))</code> if the script is in a weird location.</p>
<p>Sources:</p>
<ul>
<li><a href="https://stackoverflow.com/a/1676860/2988730">https://stackoverflow.com/a/1676860/2988730</a></li>
<li><a href="https://stackoverflow.com/a/1547978/2988730">https://stackoverflow.com/a/1547978/2988730</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I did it!</p>
<pre><code>def x(): # make what I'm doing now at this very moment easier
   main()
   print("It works!")

def y(): # calls x() after loading most recent version
   import importlib
   from imp import reload
   this = importlib.import_module("".join(sys.argv[0].split(".py"))) # sys.argv gives [module-name].py and the rest of the code inside the brackets removes the ".py"
   this = reload(this)
   this.x()
</code></pre>
</div>
<span class="comment-copy">That gives me "ImportError: Cannot re-init internal module <b>main</b>". Could reloading the main module be the one exception?</span>
<span class="comment-copy">Yes. Do not try this from the command line. __main__ is the "module" that contains all the stuff you type. It makes sense that you can not reload that.</span>
<span class="comment-copy">Fun fact, you can use backslashes in front of every underscore to remove its special meaning. Try this: \_\_main\_\_</span>
<span class="comment-copy">But...I want to reload it. Is it merely not advisable or indeed impossible?</span>
<span class="comment-copy">It is not possible to reload the main module itself. Since you typed out the other stuff, you can just copy and past in the updated version.</span>
<span class="comment-copy"><code>this = importlib.import_module</code> only needs to be done once. Make <code>this</code> a global, then do <code>this = reload(this)</code> to reload. Also <code>this.main()</code>.</span>
<span class="comment-copy">Got it - thanks @MadPhysicist</span>
<span class="comment-copy">FYI, <code>imp</code> is, for whatever reason, deprecated as of 3.4. But many of its methods exist in <code>importlib</code>, including <code>reload</code>, so on 3.4 and higher, you can just import <code>importlib</code> to get both <code>import_module</code> and <code>reload</code>.</span>
