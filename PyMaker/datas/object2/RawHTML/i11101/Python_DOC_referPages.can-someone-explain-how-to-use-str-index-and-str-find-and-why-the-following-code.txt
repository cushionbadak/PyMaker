<div class="post-text" itemprop="text">
<p>I'm very new to python and have been trying out codewars. Some problems pretty difficult for me. What I'm trying to accomplish is,"to know the index of the vowels in a given word, for example, there are two vowels in the word super (the second and fourth letters)." I don't really understand how to use index and/or find. I need to know I can edit this code to find the positions of the vowels in any given word.</p>
<pre><code>def vowel_indices(word):
    word.index("a","i","o","u","e","y")
    word.find("a","i","o","u","e","y")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Check the documentation</p>
<ul>
<li><a href="https://docs.python.org/3/library/stdtypes.html#string-methods" rel="nofollow">https://docs.python.org/3/library/stdtypes.html#string-methods</a></li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#str.index" rel="nofollow">https://docs.python.org/3/library/stdtypes.html#str.index</a></li>
</ul>
<p>Build your code around the method:</p>
<pre><code># characters to look for in a list (string would work as well)
vowels = ["a","i","o","u","e","y"]

# a function (method)
def vowel_indices(word):
    # prepare empty list to collect the positions in
    hits = []

    # test every of your vowels
    for vowel in vowels:
        # the function returns the index of vowel in word or -1 if it's not there
        pos = word.find(vowel)

        # test for match
        if pos&gt;0:
            # collect match in list
            hits.append( pos )

    # done, return the list
    return hits

# the string to analyse
word = "super"

# pass the string to the method and get its return value
results = vowel_indices(word)

# output the return value 
print(results)
</code></pre>
<p>Output:</p>
<pre><code>[1, 3]
</code></pre>
<p>This is really a list object, but Python prints its elements.</p>
<hr/>
<p>As pointed out by @PM 2Ring, this only finds the first occurence of the vowel in the string. This is for two reasons:</p>
<ol>
<li>Each vowel is only tested once</li>
<li><p><code>str.find()</code> only finds the leftmost match (see also rfind()):</p>
<blockquote>
<p>Return the lowest index in the string where substring sub is found within the slice s[start:end].</p>
</blockquote></li>
</ol>
<p>So I pointlessly complicated the code as follows to make it work:</p>
<pre><code># characters to look for in a list (string would work as well)
vowels = ["a","i","o","u","e","y"]

# a function (method)
def vowel_indices(word):
    # prepare empty list to collect the positions in
    hits = []
    # test every of your vowels
    for vowel in vowels:
        # work on a copy
        temp = word
        # look first, give up later
        while True:
            # the function returns the index of vowel in word or -1 if it's not there
            pos = temp.lower().find(vowel)
            # test for match
            if pos&gt;0:
                # collect match in list
                hits.append( pos )
                # remove matched vowel from
                temp = temp[:pos] + " " + temp[pos+1:]
                print(temp)
            else:
                break

    # done, return the list
    return hits

# the string to analyse
word = "Banana!"

# pass the string to the method and get its return value
results = vowel_indices(word)

# output the return value
print(results)
</code></pre>
<p>Output</p>
<pre><code>B nana!
B n na!
B n n !
[1, 3, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't call <a href="https://docs.python.org/3/library/stdtypes.html#str.find" rel="nofollow"><code>str.find</code></a> or <a href="https://docs.python.org/3/library/stdtypes.html#str.find" rel="nofollow"><code>str.index</code></a> like that. They both take arguments of the form</p>
<pre><code>(sub[, start[, end]])
</code></pre>
<p>which means they take a <em>single</em> substring to search for, possibly followed by a start index to specify where in the target string to start searching from, possibly followed by an (exclusive) end index to specify where to stop searching.</p>
<p>However, this isn't really a job for <code>.find</code> or <code>.index</code>. Both of those methods have to do a linear scan over the string they search, and to find all vowels you have to loop over all the vowels, so you effectively have a double loop.</p>
<p>Fortunately, Python provides a more efficient way: put the vowels into a set and then loop over the letters in the word and test if each letter is in the vowel set. Testing set membership is very efficient and it doesn't involve a linear scan over the set. To catch all vowels we need to put both the upper-case &amp; lower-case vowels into our set. To keep track of the position of each vowel in the word we can use the <code>enumerate</code> function. </p>
<pre><code>vowels = set("AEIOUYaeiouy")
def vowel_indices(word):
    return [i for i, c in enumerate(word) if c in vowels]

# Test
for word in ("super", "AMAZING"):
    print(word, vowel_indices(word))
</code></pre>
<p><strong>output</strong></p>
<pre><code>super [1, 3]
AMAZING [0, 2, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>str.index:</strong></p>
<blockquote>
<p>Like <strong>S.find()</strong> but raise ValueError when the substring is not found.</p>
</blockquote>
<p>To find the vowels in a given word you need to take one note as you already mentioned in your question, some words can have more than one vowel (i.e.,"enumerate"), so this is one way to deal with them: </p>
<pre><code>def vowel_indices(word):
    v = ["a","e","u",...]
    for index, letter in enumerate(word):
        if letter in v:
           print("Vowel letter %s, index of [%s]" % (letter, index))
</code></pre>
<p>Also refer to the documentation <a href="https://docs.python.org/3.5/library/string.html" rel="nofollow noreferrer">Common string operations</a></p>
<p><a href="https://stackoverflow.com/questions/674764/examples-for-string-find-in-python">Examples for string find in Python</a></p>
<p><a href="http://www.tutorialspoint.com/python/string_index.htm" rel="nofollow noreferrer">Python String index() Method</a></p>
<p><a href="https://stackoverflow.com/questions/2294493/how-to-get-the-position-of-a-character-in-python">How to get the position of a character in Python?</a></p>
</div>
<span class="comment-copy">This code does not run. What do you expect it to do (print, return)?</span>
<span class="comment-copy">I was trying to get it to return the position of the vowels. I know it's not complete I just am confused about what to do next.</span>
<span class="comment-copy">Yes, but your code would produce error messages. You don't state those messages or ask about them. They give much more information than "wrong" to help you solve your problem. You use the functions incorrectly. The documentation tells you exactly what the do and how to use them. They just take one argument to look for in <code>word</code>. You do not use their output. See my answer and please accept it..</span>
<span class="comment-copy">Never mind, PM 2Ring's later solution is the fastest.</span>
<span class="comment-copy">Ok thanks. I will try to post better questions.</span>
<span class="comment-copy">This works, but it is rather inefficient.</span>
<span class="comment-copy">Yes, but easy to understand. However I failed to account for uppercase, so it should use <code>word.lower().find(vowel)</code></span>
<span class="comment-copy">1.35 s vs. 0.93 s</span>
<span class="comment-copy">On second thoughts, this doesn't work properly if the word contains multiples of the same vowel: it will only find the first occurrence of each vowel.</span>
<span class="comment-copy">There, I fixed it!</span>
<span class="comment-copy">Using <code>set</code> instead of string seems about 10% faster (function renamed and used with <a href="https://docs.python.org/3/library/timeit.html#examples" rel="nofollow noreferrer">timeit</a> like <code>print(timeit.timeit("test('Banana!')", setup="from __main__ import test"))</code></span>
<span class="comment-copy">The <code>in</code> test also works on a string <code>if letter in "aeiouy":</code>, but it would be a little faster to test against a set of vowels.</span>
