<div class="post-text" itemprop="text">
<p>What is the meaning of <code>_</code> after <code>for</code> in this code?</p>
<pre><code>if tbh.bag:
   n = 0
   for _ in tbh.bag.atom_set():
      n += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>_</code> has 3 main conventional uses in Python:</p>
<ol>
<li>To hold the result of the last executed expression(/statement) in an interactive
interpreter session. This precedent was set by the standard CPython
interpreter, and other interpreters have followed suit</li>
<li>For translation lookup in i18n (see the
<a href="https://docs.python.org/3/library/gettext.html#localizing-your-module" rel="noreferrer">gettext</a>
documentation for example), as in code like:
<code>raise forms.ValidationError(_("Please enter a correct username"))</code></li>
<li>As a general purpose "throwaway" variable name to indicate that part
of a function result is being deliberately ignored, as in code like:
<code>label, has_label, _ = text.partition(':')</code></li>
</ol>
<p>The latter two purposes can conflict, so it is necessary to avoid using <code>_</code> as a throwaway variable in any code block that also uses it for i18n translation (many folks prefer a double-underscore, <code>__</code>, as their throwaway variable for exactly this reason).</p>
</div>
<div class="post-text" itemprop="text">
<p>It's just a variable name, and it's conventional in python to use <code>_</code> for throwaway variables.  It just indicates that the loop variable isn't actually used.</p>
</div>
<div class="post-text" itemprop="text">
<p>Underscore <code>_</code> is considered as "<strong>I don't Care</strong>" or "<strong>Throwaway</strong>" variable in Python</p>
<ul>
<li><p><strong>The python interpreter stores the last expression value to the special variable called <code>_</code>.</strong></p>
<pre><code>&gt;&gt;&gt; 10 
10

&gt;&gt;&gt; _ 
10

&gt;&gt;&gt; _ * 3 
30
</code></pre></li>
<li><p><strong>The underscore <code>_</code> is also used for ignoring the specific values. If you don’t need the specific values or the values are not used, just assign the values to underscore.</strong></p>
<p><em>Ignore a value when unpacking</em></p>
<pre><code>x, _, y = (1, 2, 3)

&gt;&gt;&gt; x
1

&gt;&gt;&gt; y 
3
</code></pre>
<p><em>Ignore the index</em></p>
<pre><code>for _ in range(10):     
    do_something()
</code></pre></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>There are 5 cases for using the underscore in Python.</p>
<ol>
<li><p>For storing the value of last expression in interpreter.</p></li>
<li><p>For ignoring the specific values. (so-called “I don’t care”)</p></li>
<li><p>To give special meanings and functions to name of vartiables or functions.</p></li>
<li><p>To use as ‘Internationalization(i18n)’ or ‘Localization(l10n)’ functions.</p></li>
<li><p>To separate the digits of number literal value.</p></li>
</ol>
<p><a href="https://hackernoon.com/understanding-the-underscore-of-python-309d1a029edc" rel="noreferrer">Here</a> is a nice article with examples by <a href="https://hackernoon.com/@mingrammer" rel="noreferrer">mingrammer</a>.</p>
</div>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/1739514/as-variable-name-in-python" title="as variable name in python">stackoverflow.com/questions/1739514/as-variable-name-in-python</a></span>
<span class="comment-copy">While this question is marked as a duplicate, it and it's answers are a much better discussion of the problem than the question it allegedly duplicates.</span>
<span class="comment-copy">For your case, it would be cleaner to either <code>len(tbh.bag.atom_set())</code> (if the returned value has a <code>__len__</code> method) or <code>sum(1 for _ in tbh.bag.atom_set())</code></span>
<span class="comment-copy">In <code>pylint</code> another option for dummy variable names is a prefix of <code>dummy_</code> for the variable name. Using this prefix with <code>pylint</code>, makes <code>pylint</code> not emit a warning. Also you can configure the dummy variable pattern for <code>pylint</code> to accomodate things like <code>__</code>.</span>
<span class="comment-copy">Could you explain how it works in a function call, for example: <b>raise forms.ValidationError(_("Please enter a correct username"))</b>. I've seen this in Django code, and it's not clear what's going on.</span>
<span class="comment-copy">That is usage 2 - by convention, <code>_</code> is the name used for the function that does internationalisation and localisation string translation lookups. I'm pretty sure it is the C <code>gettext</code> library that established that convention.</span>
<span class="comment-copy">FWIW, I've personally started using <code>__</code> (a double underscore) as my general purpose throwaway variable to avoid conflicting with either of the first two use cases.</span>
<span class="comment-copy">Emergent community conventions don't tend to have authoritative sources - just observations of the practices that have appeared over time. FWIW, I'm one of the co-authors of more recent PEP 8 updates, and my answer is based on the 3 different ways I've seen <code>_</code> used as a variable name since I started using Python professionally in 2002.</span>
<span class="comment-copy">The convention is mainly for tuple unpacking: <code>a, __, c = iterable</code> tells the reader immediately that we're unpacking a 3-tuple, but only using the first and last values. If we instead write <code>a, b, c = iterable</code>, the reader (or an automated code linter) can reasonably expect all of <code>a</code>, <code>b</code>, and <code>c</code> to be used later (and if they're not, it may be a sign of a bug somewhere).</span>
<span class="comment-copy">you mean it doesn't represent the last returned value?</span>
<span class="comment-copy">@steve only in a python <i>shell</i></span>
<span class="comment-copy">similar to the use of _ in Prolog</span>
<span class="comment-copy">similar to the use of ~ in Matlab</span>
<span class="comment-copy">There's a third usage, which is for the internationalization function <code>_("Hello world!")</code>.</span>
<span class="comment-copy">At the processor level, is there actually difference between "for _ in range" and "for x in range" and then not using x? Or is it just for human readability?</span>
<span class="comment-copy">@iammax Using the <code>dis</code> module I found there was no difference in the bytecode. The benefits of human readability are obvious, however.</span>
<span class="comment-copy">Thanks for 5 - I didn't know about it.</span>
<span class="comment-copy">In fact it's pretty new  <a href="https://www.blog.pythonlibrary.org/2017/01/11/new-in-python-underscores-in-numeric-literals/" rel="nofollow noreferrer">blog.pythonlibrary.org/2017/01/11/…</a></span>
