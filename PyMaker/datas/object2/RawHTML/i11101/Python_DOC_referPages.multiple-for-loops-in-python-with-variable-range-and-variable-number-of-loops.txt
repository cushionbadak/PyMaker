<div class="post-text" itemprop="text">
<p>With this code:</p>
<pre><code>from itertools import product

for a, b, c, d in product(range(low, high), repeat=4):
    print (a, b, c, d)
</code></pre>
<p>I have an output like this:</p>
<pre><code>0 0 0 0
0 0 0 1
0 0 0 2
0 0 1 0
0 0 1 1
0 0 1 2
0 0 2 0
0 0 2 1
0 0 2 2
</code></pre>
<p>but how I can create an algorithm capable of this:</p>
<pre><code>0 0 0 0
0 0 0 1
0 0 0 2
0 0 0 3
0 0 0 4
0 0 1 1
0 0 1 2
0 0 1 3
0 0 1 4
0 0 2 2
0 0 2 3
0 0 2 4
0 0 3 3
0 0 3 4
0 0 4 4
</code></pre>
<p>More important: every column of output must have different ranges, for example: first column: 0-4 second column: 0-10 etc. 
And the number of columns ( a,b,c,d ) isn't fixed; depending on other parts of the program, can be in a range from 2 to 200. </p>
<p>UPDATE: to be more comprehensible and clear</p>
<p>what I need is something like that:</p>
<pre><code>for a in range (0,10):
    for b in range (a,10):
        for c in range (b,10):
             for d in range (c,10):
                 print(a,b,c,d)
</code></pre>
<p>the question is been partially resolved but still had problems on how to change the <code>range</code> parameters such like the above example.
Excuse me for the mess ! :)</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product</code></a> can already do exactly what you are looking for, simply by passing it multiple iterables (in this case the ranges you want). It will collect one element from each iterable passed. For example:</p>
<pre><code>for a,b,c in product(range(2), range(3), range(4)):
    print (a,b,c)
</code></pre>
<p><strong>Outputs</strong>:</p>
<pre><code>0 0 0
0 0 1
0 0 2
0 0 3
0 1 0
0 1 1
0 1 2
0 1 3
0 2 0
0 2 1
0 2 2
0 2 3
1 0 0
1 0 1
1 0 2
1 0 3
1 1 0
1 1 1
1 1 2
1 1 3
1 2 0
1 2 1
1 2 2
1 2 3
</code></pre>
<p>If your input ranges are variable, just place the loop in a function and call it with different parameters. You can also use something along the lines of</p>
<pre><code>for elements in product(*(range(i) for i in [1,2,3,4])):
    print(*elements)
</code></pre>
<p>if you have a large number of input iterables. </p>
<hr/>
<p>With your updated request for the variable ranges, a nice short-circuiting approach with <code>itertools.product</code> is not as clear, although you can always just check that each iterable is sorted in ascending order (as this is essentially what your variable ranges ensures). As per your example:</p>
<pre><code>for elements in product(*(range(i) for i in [10,10,10,10])):
    if all(elements[i] &lt;= elements[i+1] for i in range(len(elements)-1)):
        print(*elements)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You looking for something like this?</p>
<pre><code># the program would modify these variables below
column1_max = 2
column2_max = 3
column3_max = 4
column4_max = 5

# now generate the list
for a in range(column1_max+1):
    for b in range(column2_max+1):
        for c in range(column3_max+1):
            for d in range(column4_max+1):
                if c&gt;d or b&gt;c or a&gt;b:
                    pass
                else:
                    print a,b,c,d
</code></pre>
<p>Output:</p>
<pre><code>0 0 0 0
0 0 0 1
0 0 0 2
0 0 0 3
0 0 0 4
0 0 0 5
0 0 1 1
0 0 1 2
0 0 1 3
0 0 1 4
0 0 1 5
0 0 2 2
0 0 2 3
0 0 2 4
0 0 2 5
0 0 3 3
0 0 3 4
0 0 3 5
0 0 4 4
0 0 4 5
0 1 1 1
0 1 1 2
...
</code></pre>
</div>
<span class="comment-copy">It's unclear to me what you want here. Is your example desired output all of the output you want for that case? If so, wouldn't that entail just using two fill values of <code>0</code> with <code>product(range(5), repeat=2)</code>?</span>
<span class="comment-copy">If you read the doc for itertools.product, you'd see that it can take several iterables and do exactly what you want.</span>
<span class="comment-copy">the example is only a simple example. I need an algorithm that creates "n" columns ( the "n" is variable, depending on other calculations of the program). each column must iterate in variable ranges ( 0-10, 5-9, 2,23 etc.) and the range must change such like the example above.</span>
<span class="comment-copy">BTW, do you realize that 200 columns, even with only range(2), would give you 2**200 possibilities ? (That's a 61-digit number for those wondering).</span>
<span class="comment-copy">200 is for example, not a number used in the program</span>
<span class="comment-copy">yes it is, but a,b,c,d are fixed. suppose my program needs to change it; one time they are only 4, other time they can be 10, or another number</span>
<span class="comment-copy">Right, then the program would modify the column_max variables, right?</span>
<span class="comment-copy">in your example you define a,b,c,d. and use it to create 4 "for" cycles. but in my program the number of "for" cycles is variable, not fixed.</span>
