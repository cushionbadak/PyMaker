<div class="post-text" itemprop="text">
<p>I'm trying to understand the following about dealing with functions and their arguments:</p>
<pre><code>def print_my_arg(func, *args, **kwargs):
    func(*args, **kwargs)
    if 'my_arg' in kwargs: 
        print('  my_arg = {}'.format(kwargs['my_arg']))

def foo(call_no, my_arg='Default Value'):
    print('call_no = {}'.format(call_no) )

print_my_arg(foo, 0, my_arg='My Value 1')
print_my_arg(foo, 1, 'My Value 2')
print_my_arg(foo, 2)
</code></pre>
<p>Output:</p>
<pre><code>call_no = 0
  my_arg = My Value 1
call_no = 1 # I'd like to see 'My Value 2' here
call_no = 2 # I'd like to see 'Default Value' here
</code></pre>
<p>Obviously people are free to invoke functions in either of the ways shown above, which makes me wonder: why <code>my_arg</code> doesn't go to <code>kwargs</code> anyway? Isn't there a uniform way to access parameters by name (and not by position), which doesn't depend on the way the function was invoked? </p>
<p>Please note that:</p>
<ol>
<li><p>I'm not interested in <code>print_my_args(func, call_no, my_arg)</code>, because I'm talking about the case where I don't know the signature of <code>func</code> in advance and yet I want to know if a particular parameter exists (by name).</p></li>
<li><p>Clearly that's related to decorators, but I've written the example in a simpler way (or I hope so).</p></li>
</ol>
<p><strong>EDIT</strong></p>
<p>Many thanks for the answers about inspect.signature. Using that, my new version of <code>print_my_arg()</code> is:</p>
<pre><code>from inspect import signature

def print_my_arg ( func, *args, **kwargs ):
  func ( *args, **kwargs )
  sig = signature ( func )
  if 'my_arg' not in sig.parameters: return

  binding = sig.bind ( *args, **kwargs )
  binding.apply_defaults ()

  print ( "  my_arg = {}".format ( binding.arguments [ 'my_arg' ] ) )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Isn't there a uniform way to access parameters by name (and not by
  position), which doesn't depend on the way the function was invoked?</p>
</blockquote>
<p>Yes by <code>inspect</code>ing the <a href="https://docs.python.org/3/library/inspect.html?highlight=signature#introspecting-callables-with-the-signature-object" rel="nofollow"><code>signature</code></a>:</p>
<pre><code>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; sig = inspect.signature(foo)
&gt;&gt;&gt; print(sig)
(call_no, my_arg='Default Value')
&gt;&gt;&gt; args = sig.bind(1, "my_value")
&gt;&gt;&gt; args.arguments["my_arg"]
'my_value'
</code></pre>
<p>Note that trying to bind the signature to an invalid call will raise similar/same TypeError that would be raised when calling the function with invalid arguments.  Also arguments that use the default will not be present in <code>args.arguments</code> unless you call <code>args.apply_defaults()</code></p>
<p>Also note that keyword only arguments will be in <code>args.kwargs</code> dictionary instead of <code>args.arguments</code>:</p>
<pre><code>import inspect

def bar(a,*, b=None):
    pass

sig = inspect.signature(bar)

binding = sig.bind(1, b=5)

assert "a" in binding.arguments
assert "b" in binding.kwargs
</code></pre>
</div>
<span class="comment-copy">Positional arguments don't <i>"go to"</i> <code>**kwargs</code>, because <i>they're not keyword arguments</i>. If you want to pass the second positional argument to the function, you'll have to do that explicitly, it's not at all clear why you expected different behaviour. You could force keyword arguments if you really wanted to, see e.g. <a href="http://stackoverflow.com/a/37829651/3001761">stackoverflow.com/a/37829651/3001761</a></span>
<span class="comment-copy">do you want to inspect the <a href="https://docs.python.org/3/library/inspect.html?highlight=signature#inspect.Signature.bind" rel="nofollow noreferrer"><code>signature</code></a> of the function to check the argument name in <code>print_my_args</code>? then you could do <code>passed_args  = inspect.signature(func).bind(*args,**kwargs)</code> then check if <code>my_arg</code> is in <code>passed_args</code>.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/3394835/args-and-kwargs">stackoverflow.com/questions/3394835/args-and-kwargs</a></span>
