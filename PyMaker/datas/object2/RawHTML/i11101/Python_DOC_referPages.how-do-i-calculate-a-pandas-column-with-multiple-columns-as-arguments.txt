<div class="post-text" itemprop="text">
<p>I was using a wind speed calculation function from lon and lat components:</p>
<pre><code>def wind_speed(u, v):
    return np.sqrt(u ** 2 + v ** 2)
</code></pre>
<p>and calling it to calculate a new pandas column from two existing ones:</p>
<pre><code>df['wspeed'] = map(wind_speed, df['lonwind'], df['latwind'])
</code></pre>
<p>Since I changed from Python 2.7 to Python 3.5 the function is not working anymore. Could the change be the cause?</p>
<p>In a single argument (column) function:</p>
<pre><code>def celsius(T):
    return round(T - 273, 1)
</code></pre>
<p>I am now using:</p>
<pre><code>df['temp'] = df['t2m'].map(celsius)
</code></pre>
<p>And it works fine.</p>
<p>Could you help me?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would try to stick to existing numpy/scipy functions as they are extremely fast and optimized (<a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.hypot.html" rel="nofollow">numpy.hypot</a>):</p>
<pre><code>df['wspeed'] = np.hypot(df.latwind, df.lonwind)
</code></pre>
<p><strong>Timing:</strong> against 300K rows DF:</p>
<pre><code>In [47]: df = pd.concat([df] * 10**5, ignore_index=True)

In [48]: df.shape
Out[48]: (300000, 2)

In [49]: %paste
def wind_speed(u, v):
    return np.sqrt(u ** 2 + v ** 2)

## -- End pasted text --

In [50]: %timeit list(map(wind_speed, df['lonwind'], df['latwind']))
1 loop, best of 3: 922 ms per loop

In [51]: %timeit np.hypot(df.latwind, df.lonwind)
100 loops, best of 3: 4.08 ms per loop
</code></pre>
<p><strong>Conclusion:</strong> vectorized approach was 230 times faster</p>
<p>If you have to write your own one, try to use vectorized math (working with vectors / columns instead of scalars): </p>
<pre><code>def wind_speed(u, v):
    # using vectorized approach - column's math instead of scalar 
    return np.sqrt(u * u + v * v)

df['wspeed'] = wind_speed(df['lonwind'] , df['latwind'])
</code></pre>
<p>demo:</p>
<pre><code>In [39]: df['wspeed'] = wind_speed(df['lonwind'] , df['latwind'])

In [40]: df
Out[40]:
   latwind  lonwind    wspeed
0        4        1  4.123106
1        5        2  5.385165
2        6        3  6.708204
</code></pre>
<p>same vectorized approach with <code>celsius()</code> function:</p>
<pre><code>def celsius(T):
    # using vectorized function: np.round()
    return np.round(T - 273, 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If want to use <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a>, add <code>list</code>:</p>
<pre><code>df = pd.DataFrame({'lonwind':[1,2,3],
                   'latwind':[4,5,6]})

print (df)
   latwind  lonwind
0        4        1
1        5        2
2        6        3

def wind_speed(u, v):
    return np.sqrt(u ** 2 + v ** 2)

df['wspeed'] = list(map(wind_speed, df['lonwind'], df['latwind']))

print (df)
   latwind  lonwind    wspeed
0        4        1  4.123106
1        5        2  5.385165
2        6        3  6.708204
</code></pre>
<p>Without <code>list</code>:</p>
<pre><code>df['wspeed'] = (map(wind_speed, df['lonwind'], df['latwind']))
print (df)
   latwind  lonwind                              wspeed
0        4        1  &lt;map object at 0x000000000AC42DA0&gt;
1        5        2  &lt;map object at 0x000000000AC42DA0&gt;
2        6        3  &lt;map object at 0x000000000AC42DA0&gt;
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><strong>map(function, iterable, ...)</strong></a></p>
<blockquote>
<p>Return an iterator that applies function to every item of iterable, yielding the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. With multiple iterables, the iterator stops when the shortest iterable is exhausted. For cases where the function inputs are already arranged into argument tuples, see itertools.starmap().</p>
</blockquote>
<p>Another solution:</p>
<pre><code>df['wspeed'] = (df['lonwind'] ** 2 + df['latwind'] ** 2) **0.5
print (df)
   latwind  lonwind    wspeed
0        4        1  4.123106
1        5        2  5.385165
2        6        3  6.708204
</code></pre>
</div>
<span class="comment-copy">But was the function <code>map</code> changed?</span>
