<div class="post-text" itemprop="text">
<p>i get many json strings from a mysql DB an should combine them.</p>
<p>For example:</p>
<pre><code>{
  "type": "device",
  "name": "Lampe",
  "controls": [
    {
      "type": "switch",
      "name": "Betrieb",
      "topic": "/lampe/schalter"
    }
  ]
}
</code></pre>
<p>in combination this devices should get into a array of a json file</p>
<pre><code>{
 "name": "Test-System",
 "devices": [
 {
  "type": "device",
  "name": "Lampe",
  "controls": [
    {
      "type": "switch",
      "name": "Betrieb",
      "topic": "/lampe/schalter"
    }
  ]
},
{
  other Device

}
]
}
</code></pre>
<p>i do not understand how to do this in python </p>
<p>does someone have a idea how to do it ?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two ways you could do this - by working on strings, or by working with Python-JSON data structures. The former would be something like</p>
<pre><code># untested code
s = '''{
 "name": "Test-System",
 "devices": [  '''
while True:
    j = get_json_from_DB()
    if not j: break # null string or None
    s = s + j + ',\n'
s = s[:-2] + ']\n}\n' #[:-2 loses the last ',\n' from the loop
</code></pre>
<p>Or if you want to work with Python loaded-JSON then</p>
<pre><code>import json

# untested code
s = { 
     "name": "Test-System",
     "devices": []
    }
 while True:
    j = get_json_from_DB()
    if not j: break # null string or None
    s['devices'].append( json.loads(j) ) 

 # str = json.dumps(s) # ought to be valid  
</code></pre>
<p>This latter will validate all your incoming json-strings (<code>json.loads()</code> will throw an exception for any bad JSON) and will be more efficient for large numbers of devices. It's therefore to be preferred unless you are working in a RAM-constrained embedded system with small numbers of devices, where the greater memory footprint of the latter is a problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/json.html" rel="nofollow"><code>json</code></a> module can be used.</p>
<pre><code>#!/usr/bin/env python3.5

import json

# Parse each device JSON file.
device1 = json.load(open("device-switch-Lampe.json"))
device2 = json.load(open("device-sensor-Wert.json"))
# more devices ...

obj = {"name": "Test-System", "devices": [device1, device2]}
print(json.dumps(obj))
</code></pre>
<p>Output (prettified):</p>
<pre><code>{
    "devices": [{
        "type": "device",
        "controls": [{
            "type": "switch",
            "topic": "/lampe/schalter",
            "name": "Betrieb"
        }],
        "name": "Lampe"
    }, {
        "type": "device",
        "controls": [{
            "type": "sensor",
            "topic": "/sensor/wert",
            "name": "Wert"
        }],
        "name": "Sensor"
    }],
    "name": "Test-System"
}
</code></pre>
</div>
