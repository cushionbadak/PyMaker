<div class="post-text" itemprop="text">
<p>I am reading the <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">typing</a> module code and also looking into <a href="https://github.com/python/mypy" rel="nofollow noreferrer">mypy</a> to understand how it does type checking. Unfortunately for me, <code>mypy</code> builds a very smart tree with typed expressions that I still don't understand, and it's all based on static analysis.</p>
<p>I would like to implement a type check system that is dynamic (no static analysis) in Python. Assuming the function that performs type checks is called <code>check_type</code>, I want to accomplish the following:</p>
<pre><code>&gt;&gt;&gt; import typing
&gt;&gt;&gt;
&gt;&gt;&gt; check_type(1, int)
True
&gt;&gt;&gt; check_type(1, float)
False
&gt;&gt;&gt; check_type([1], typing.List[int])
True
&gt;&gt;&gt; check_type([1], typing.List[float])
False
&gt;&gt;&gt; check_type([1], typing.List[typing.Any])
True
&gt;&gt;&gt; check_type((1,), typing.Tuple[int])
True
</code></pre>
<p>I thought about recreating the object type from its value, such as:</p>
<pre><code>&gt;&gt;&gt; get_type([1])
typing.List&lt;~T&gt;[int]
</code></pre>
<p>But this doesn't work with <code>issubclass</code>:</p>
<pre><code>&gt;&gt;&gt; issubclass(typing.List[int], typing.List[typing.Any])
False
</code></pre>
<p>I don't see a simple way to check types in Python without assuming a lot of things about <a href="https://github.com/python/mypy/blob/master/lib-typing/2.7/typing.py" rel="nofollow noreferrer">the internals of the <code>typing</code> stdlib module</a> (e.g., accessing <code>__args__</code> or <code>__tuple_params__</code>).</p>
<p>How can I properly implement a <code>check_type</code> function that work for the cases previously listed? I am using Python 2.7.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can easily get the very limited functionality that works correctly for the simple examples provided in your question:</p>
<pre><code>import mypy.api

def check_type(value, typ):
    program_text = 'from typing import *; v: {} = {}'.format(typ, repr(value))
    normal_report, error_report, exit_code = mypy.api.run(['-c', program_text])
    return exit_code == 0

int_ = 1
str_ = 'a'
list_str_ = ['a']
list_int_ = [1]
tuple_int_ = (1,)

assert check_type(int_, 'int')
assert not check_type(str_, 'int')
assert check_type(list_int_, 'List[int]')
assert not check_type(list_str_, 'List[int]')
assert check_type(list_int_, 'List[Any]')
assert check_type(tuple_int_, 'Tuple[int]')
</code></pre>
<p>You can even do some more advanced stuff (for example, refer to the types that correspond to classes you defined in your program) by extending this code a bit, so that mypy gets to parse your entire source code as opposed to just the current line.</p>
<p>Alternatively, you might want to look at <a href="https://github.com/RussBaz/enforce" rel="nofollow noreferrer">enforce</a> or <a href="https://github.com/agronholm/typeguard" rel="nofollow noreferrer">typeguard</a>.</p>
</div>
<span class="comment-copy">Isn't this just <code>isinstance</code>?</span>
<span class="comment-copy">No, @user2357112. <code>isinstance</code> doesn't check the type completely. For example: <code>isinstance(['string'], typing.List[int]) is True</code> when that's not exactly what I am looking for.</span>
<span class="comment-copy">@freakish: Check out <a href="http://mypy-lang.org/" rel="nofollow noreferrer">mypy</a>, a static type analysis tool for Python and one of the big drivers behind type hints.</span>
<span class="comment-copy">Not really an answer but the pythonic way to check types is to use a <code>try/except</code> statement and treat the value you want to test as the value you expect and if a <code>TypeError</code> exception is raised do something else or just pass</span>
<span class="comment-copy">@freakish: <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">PEP-484</a> (accepted). Although it doesn't quite apply to Python 2.7.</span>
