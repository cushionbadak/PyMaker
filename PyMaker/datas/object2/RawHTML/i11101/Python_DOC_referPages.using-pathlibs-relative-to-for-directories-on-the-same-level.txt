<div class="post-text" itemprop="text">
<p>The python library <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer"><code>pathlib</code></a> provides <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.relative_to" rel="noreferrer"><code>Path.relative_to</code></a>. This function works fine if one path is a subpath of the other one, like this:</p>
<pre><code>In [12]: from pathlib import Path
In [13]: foo = Path("C:\\foo")
In [14]: bar = Path("C:\\foo\\bar")
In [15]: bar.relative_to(foo)
Out[15]: WindowsPath('bar')
</code></pre>
<p>However, if two paths are on the <em>same level</em>, <code>relative_to</code> does not work.</p>
<pre><code>In [16]: baz = Path("C:\\baz")
In [17]: foo.relative_to(baz)
--------------------------------------------------------------------------
ValueError: 'C:\\foo' does not start with 'C:\\baz'
</code></pre>
<p>I would expect the result to be</p>
<pre><code>WindowsPath("..\\baz")
</code></pre>
<p>The function <a href="https://docs.python.org/3.5/library/os.path.html#os.path.relpath" rel="noreferrer"><code>os.path.relpath</code></a> does this correctly:</p>
<pre><code>In [18]: import os
In [19]: foo = "C:\\foo"
In [20]: bar = "C:\\bar"
In [21]: os.path.relpath(foo, bar)
Out[21]: '..\\foo'
</code></pre>
<p>Is there a way to achieve the functionality of <code>os.path.relpath</code> using <code>pathlib.Path</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>The first section solves the OP's problem, though if like me, he really wanted the solution relative to a common root then the second section solves it for him. The third section describes how I originally approached it and is kept for interest sake.</p>
<h2>Relative Paths</h2>
<p>Recently, as in Python 3.4-6, the <code>os.path</code> module has been extended to accept <code>pathlib.Path</code> objects. In the following case however it does not return a Path object and one is forced to wrap the result.</p>
<pre><code>foo = Path("C:\\foo")
baz = Path("C:\\baz")
Path(os.path.relpath(foo, baz))

&gt; Path("..\\foo")
</code></pre>
<h2>Common Path</h2>
<p>My suspicion is that you're really looking a path relative to a common root. If that is the case the following, from <a href="https://stackoverflow.com/a/7288019">EOL</a>, is more useful </p>
<pre><code>Path(os.path.commonpath([foo, baz]))

&gt; Path('c:/root')
</code></pre>
<h2>Common Prefix</h2>
<p>Before I'd struck upon <code>os.path.commonpath</code> I'd used <code>os.path.comonprefix</code>.</p>
<pre><code>foo = Path("C:\\foo")
baz = Path("C:\\baz")
baz.relative_to(os.path.commonprefix([baz,foo]))

&gt; Path('baz')
</code></pre>
<p>But be forewarned you are not supposed to use it in this context (See <a href="http://grokbase.com/t/python/python-ideas/153nyg6qt1/os-path-commonprefix-yes-that-old-chestnut" rel="noreferrer">commonprefix : Yes, that old chestnut</a>)</p>
<pre><code>foo = Path("C:\\route66\\foo")
baz = Path("C:\\route44\\baz")
baz.relative_to(os.path.commonprefix([baz,foo]))

&gt; ...
&gt; ValueError : `c:\\route44\baz` does not start with `C:\\route`
</code></pre>
<p>but rather the following one from <a href="https://stackoverflow.com/a/27885797">J. F. Sebastian</a>.</p>
<pre><code>Path(*os.path.commonprefix([foo.parts, baz.parts]))

&gt; Path('c:/root')
</code></pre>
<p>... or if you're feeling verbose ...</p>
<pre><code>from itertools import takewhile
Path(*[set(i).pop() for i in (takewhile(lambda x : x[0]==x[1], zip(foo.parts, baz.parts)))])
</code></pre>
</div>
<span class="comment-copy">Did you ever solve this? I have run into the same problem. I would like to standardize on using pathlib over os.path whenever I can, but this problem has me stumped.</span>
<span class="comment-copy">@Phil it appears in this case you're forced to get back to <code>os.path.relpath</code> :( ... It seems the <code>pathlib</code> module was not thought of as a replacement of <code>os.path</code> :(. Or have you found a <code>pathlib</code>-only solution?</span>
<span class="comment-copy">No, I have not found a <code>pathlib</code>-only solution.</span>
