<div class="post-text" itemprop="text">
<p>I have a function in python which I need to execute it multiple times and at the same time (to save computational cost).
The following is a simple example and I don't know how to call my function at the same time!</p>
<pre><code>def f(x):
    return x

y1=f(x1)
y2=f(x2)
</code></pre>
<p>I need to execute y1 and y2 at the same time and wait until both finish and save the results.
Thank you all in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another solution that might help you:</p>
<pre><code>import Queue
import threading

# your function with a slight change:
def f(q,x):
    q.put(x)

inputs = [1,2,3,4]

# aggregate to a queue:
q = Queue.Queue()

for x in inputs:
    t = threading.Thread(target=f, args=(q,x))
    t.daemon = True
    t.start()

outputs = q.get()
print outputs
</code></pre>
<blockquote>
<p>output: 1</p>
</blockquote>
<p>Here <code>q</code> holds the return value of <code>f</code>.</p>
<p>In any case I suggest you try and read <a href="https://docs.python.org/2/library/threading.html" rel="nofollow">this</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would encourage you to read the <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow">https://docs.python.org/3/library/multiprocessing.html</a> documentation, which has a great example. If you're using Python 3.x</p>
<pre><code>from multiprocessing import Pool
def f(x):
    return x*x

if __name__ == '__main__':
    with Pool(5) as p:
        print(p.map(f, [1, 2, 3]))
</code></pre>
<p>If you're using python 2.7: <a href="https://docs.python.org/2.7/library/multiprocessing.html" rel="nofollow">https://docs.python.org/2.7/library/multiprocessing.html</a></p>
<pre><code>from multiprocessing import Pool

def f(x):
    return x*x

if __name__ == '__main__':
    p = Pool(5)
    print(p.map(f, [1, 2, 3]))
</code></pre>
</div>
<span class="comment-copy">See the accepted answer here: <a href="http://stackoverflow.com/questions/7207309/python-how-can-i-run-python-functions-in-parallel">running python functions in parallel</a></span>
<span class="comment-copy">Thanks for your response. As I'm new to python, I don't know how to execute the file! As I understood, it should calls the f, 4 times in parallel and we should have 4 results in the output?</span>
<span class="comment-copy">For every <code>q.get()</code> the return value is the output.</span>
<span class="comment-copy">multiprocessing Pools are definitely the way to go, but PLEASE read all the warning notes in the docs!</span>
<span class="comment-copy">Thank you very much for your response. I'm new to python and when I run this code in IDLE, I get this error, while I should print out [1,4,9]                      Traceback (most recent call last):   File "C:/Users/mohammad/Desktop/r.py", line 8, in &lt;module&gt;     with Pool(5) as p: AttributeError: <b>exit</b></span>
<span class="comment-copy">If you're using python 2.x (like python 2.7), use the instructions here: <a href="https://docs.python.org/2.7/library/multiprocessing.html" rel="nofollow noreferrer">docs.python.org/2.7/library/multiprocessing.html</a>  I've added this to the answer.</span>
<span class="comment-copy">Thank you very much @AbrahamB  I'm wondering if number 5 shows the parallelization? all the 3 inputs will be executed at the same time? if one of them returns longer than the others, it doesnt crash?</span>
<span class="comment-copy">@Mohammad, per: <a href="https://docs.python.org/2/library/multiprocessing.html#module-multiprocessing.pool" rel="nofollow noreferrer">docs.python.org/2/library/â€¦</a>:   <code>processes is the number of worker processes to use.</code></span>
