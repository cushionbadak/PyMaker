<div class="post-text" itemprop="text">
<p>As noob in python I struggle with a multidimensional array
I have this part </p>
<pre><code>def listMembers(Members):               
    for name in Names:
        age=Ages[name]
        print (name,age)

Names = ["John","William","Sarah"] 
Ages = [22,33,44]
Members=[Names,Ages]
listMembers(Members)
</code></pre>
<p>And expect as result: </p>
<pre><code>John, 22
Willem, 33
Sarah, 44
</code></pre>
<p>What must i change to get this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>enumerate</code> to do the task...    </p>
<pre><code>def listMembers():               
        for i,name in enumerate(Names):
            age=Ages[i]
            print (name,age)
</code></pre>
<p>Output - </p>
<pre><code>John 22
William 33
Sarah 44
</code></pre>
<p>But as said in the comments its better to use a dictionary here</p>
<p>Another way to do this is to use <code>zip</code>- </p>
<pre><code>def listMembers():               
    for i,j in zip(Names, Ages):
        print (i,j)
</code></pre>
<p>Edit : </p>
<p>As said in the comment you can do it without making direct references, as in real world, the function will be encapsulated within another class so you won't have direct access to data.- </p>
<pre><code>def listMembers(Members):
    names = Members[0]
    ages = Members[1]
    for i, j in zip(names, ages):
        print (i, ", ", j)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>zip</code> built-in function:</p>
<pre><code>Names = ["John", "William", "Sarah"]
Ages = [22, 33, 44]

for name, age in zip(Names, Ages):
    print name, ',', age
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the the built-in function <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow">zip()</a></p>
<p>This will get you a list of tuples.</p>
<pre><code>zipped = zip(Names, Ages)
tup_list = (list(zipped))
print (tup_list)
[('John', 22), ('William', 33), ('Sarah', 44)]
</code></pre>
<p>You can turn <code>tup_list</code> into a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow">dictionary</a></p>
<pre><code>dict(tup_list)
{'John': 22, 'Sarah': 44, 'William': 33}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The other answers show the cool in-built shortcuts in Python. However, IMHO you should really re-visit the basics the first and take the long route.</p>
<p>The following code uses basic functionality to create a list of integers (<code>[0,1,2]</code> in your case), which are iterated over to slice the arrays accordingly. This code assumes that names and ages has the same number of indexes.</p>
<pre><code>def listMembers(Members):
    names = Members[0] # slice off the first dimension
    ages = Members[1] # slice off the first dimension

    names_len = len(names) # get the length of names 

    for i in xrange(names_len): # xrange builds a list from 0 to given length.
        print (names[i], ages[i]) # print off the second dimension


Names = ["John","William","Sarah"]
Ages = [22,33,44]
Members=[Names,Ages]
listMembers(Members)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's the solution you're looking for.  It gets all the information it needs from the <code>Members</code> argument, which may cointain any number of lists.  The list elements are grouped, converted to strings, joined with <code>", "</code>, and printed.  There are no global references to <code>Names</code> or <code>Ages</code>:</p>
<pre><code>def listMembers(Members):               
    for t in zip(*Members):
        print(", ".join(map(str, t)))

Names = ["John","William","Sarah"] 
Ages = [22,33,44]
Members=[Names,Ages]

listMembers(Members)
</code></pre>
<p>Here's the output:</p>
<pre><code>John, 22
William, 33
Sarah, 44
</code></pre>
</div>
<span class="comment-copy">You should really use a <a href="http://www.tutorialspoint.com/python/python_dictionary.htm" rel="nofollow noreferrer">dictionary</a> for this. Names will be keys, ages will be values.</span>
<span class="comment-copy">This has the same problem OP's version has:  It's ignoring the <code>Members</code> argument, and is making hard-wired references to <code>Names</code> and <code>Ages</code>.</span>
<span class="comment-copy">Thank you, the 'zip method'  looks the most what I used to use and will do the work for me</span>
<span class="comment-copy">thank you, this methode works perfect for me</span>
<span class="comment-copy">Glad it helped!</span>
