<div class="post-text" itemprop="text">
<p>Here's my program:</p>
<pre><code>class member:
    name = ""
    phone = ""
    number = 0


    def init(self, name, phone, number):
        self.name = name
        self.phone = phone
        self.number = number


    def setName(self, name):
        self.name = name


    def setPhone(self, phone):
        self.phone = phone


    def setNumber(self, number):
        self.number = number


    def getName(self):
        return self.name


    def getPhone(self):
        return self.phone


    def getNumber(self):
        return self.number


    def displayData(self):
        print("")
        print("Name:", self.name)
        print("Phone:", self.phone)
        print("Jersey Number:", self.number)



def displayMenu():
    print("")
    print("==========Main Menu==========")
    print("1. Display Team Roster.")
    print("2. Add Member.")
    print("3. Remove Member.")
    print("4. Edit Member.")
    print("5. Save Data.")
    print("6. Load Data.")
    print("9. Exit Program.")
    print("")
    return int(input("Selection&gt;  "))

def printMembers(memberList):
    if len(memberList) == 0:
        print("No Current Members in Memory.")
    else:
        for x in memberList.keys():
            memberList[x].displayData()


def addMember(memberList):
    newName = input("Enter new member's name: ")
    newPhone = input("Contact phone number: ")
    newNumber = int(input("Jersey number: "))
    memberList[newName] = member(newName,newPhone,newNumber)
    #An updated list is returned.
    return memberList


def removeMember(memberList):
    removeName = input("Enter member name to be Removed: ")
    #First, check to see if the name given, already exists in the list.
    if removeName in memberList:
        #Use the del key to delete the entry at the given name.
        del memberList[removeName]
    else:
        print("Member not found in list.")
    #An updated list is returned.
    return memberList


def editMember(memberList):
    #get the name of the member to be edited.
    oldName = input("Enter the name of the member yopu want to edit. ")
    #See if name is already in the list, if yes, get the index of the.
    #given name, accept the new one, and replace the name in the list.
    #with the new name.
    #An updated list is returned.
    if oldName in memberList:
        newName = input("Enter the member's new name: ")
        newPhone = input("Contact phone number: ")
        newNumber = int(input("Jersey number: "))
        memberList[oldName] = member(newName, newPhone, newNumber)
    return memberList

def saveData(memberList):
    filename = input("File name to be saved: ")
    print("Saving Data...")
    outFile = open(filename, "wt")
    for x in memberList.keys():
        name = memberList[x].getName()
        phone = memberList[x].getPhone()
        number = str(memberList[x].getNumber())
        outFile.write(name+","+phone+","+number+"\n")
        print("Data saved.")
        outFile.close()

def loadData():
    memberList ={}
    filename = input("Filename to Load: ")
    inFile = open(filename, "rt")
    print("Loading Data...")
    while True:
        #Read in a line of text from the text file.
        inLine = inFile.readline()
        #If the line is empty, stop loading data.
        if not inLine:
            break
        inLine = inLine[:-1]
        name, phone, number = inLine.split(",")
        memberList[name] = member(name, phone, int(number))
    print("Data Loaded Successfully")
    inFile.close()
    return memberList



print("Welcome to the Team Manager")
#Create an empty dictionary by changing tthe [] to {}
memberList = {}
#Get the first menu selection from the user and store it in a control value variable.
menuSelection = displayMenu()


#The main program loop will detect the correct entry from the user and call the appropriate.
#method from the user's selection.
while menuSelection != 9:
    if menuSelection == 1:
        printMembers(memberList)

    elif menuSelection == 2:
        memberList = addMember(memberList)

    elif menuSelection == 3:
        memberList = removeMember(memberList)

    elif menuSelection == 4:
        memberList = editMember(memberList)

    elif menuSelection == 5:
        memberList = saveData(memberList)

    elif menuSelection  == 6:
        memberList = loadData()

    menuSelection = displayMenu()
print ("Exiting Program...")
</code></pre>
<p>Here's my error: </p>
<pre><code>C:\Users\Patrick\AppData\Local\Programs\Python\Python36-32\python.exe C:/Users/Patrick/PycharmProjects/Week_6_assignment.py/Week_6_assignment.py
Welcome to the Team Manager

==========Main Menu==========
1. Display Team Roster.
2. Add Member.
3. Remove Member.
4. Edit Member.
5. Save Data.
6. Load Data.
9. Exit Program.

Selection&gt;  2
Enter new member's name: margie
Contact phone number: 3134562252
Jersey number: 88
Traceback (most recent call last):
  File "C:/Users/Patrick/PycharmProjects/Week_6_assignment.py/Week_6_assignment.py", line 151, in &lt;module&gt;
    memberList = addMember(memberList)
  File "C:/Users/Patrick/PycharmProjects/Week_6_assignment.py/Week_6_assignment.py", line 74, in addMember
    memberList[newName] = member(newName,newPhone,newNumber)
TypeError: object() takes no parameters

Process finished with exit code 1
</code></pre>
<p>Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>You named your initializer method <code>init</code>; the correct name is <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__init__#object.__init__" rel="nofollow"><code>__init__</code></a>. The double underscores are how Python indicates names reserved for Python "special" use. By not using the correct name, the superclass (<code>object</code>'s) <code>__init__</code> was invoked, but it takes no arguments, so you get the error.</p>
<p>Sidenotes: You've got another error in <code>saveData</code>; the final <code>print</code> and <code>close</code> calls should almost certainly be dedented, so you write all the data, not just a single item.</p>
<p>In addition:</p>
<pre><code>while True:
    #Read in a line of text from the text file.
    inLine = inFile.readline()
    #If the line is empty, stop loading data.
    if not inLine:
        break
    inLine = inLine[:-1]
    name, phone, number = inLine.split(",")
    memberList[name] = member(name, phone, int(number))
</code></pre>
<p>should almost certainly become (importing <code>csv</code> at the top of the file):</p>
<pre><code>for name, phone, number in csv.reader(inFile):
    memberList[name] = member(name, phone, int(number))
</code></pre>
<p>which handles newlines and splitting on commas for you, and doesn't involve the anti-pattern of an infinite loop calling <code>.readline()</code> over and over (even if this wasn't CSV, the correct way to iterate by line is <code>for inLine in inFile:</code>, which avoids the <code>while</code>, <code>readline</code> and <code>if not inLine: break</code>; <code>for inLine in map(str.rstrip, inFile):</code> avoids the need to explicitly slice off the trailing newline too).</p>
</div>
<div class="post-text" itemprop="text">
<p>You're missing __. Your</p>
<pre><code> def init(self, name, phone, number):
      self.name = name
      self.phone = phone
      self.number = number
</code></pre>
<p>has  to be</p>
<pre><code>def __init__(self, name, phone, number):
      self.name = name
      self.phone = phone
      self.number = number
</code></pre>
</div>
<span class="comment-copy">You don't give us an introduction to the code and don't try debugging or show your debugging attempts. On top of that, we don't spoonfeed or just fix assignments without effort on your part</span>
<span class="comment-copy">one of the cool thing about python is that you don't really need to write setter and getter, you only really need to write those if you want to control what is set or get from your class</span>
<span class="comment-copy">Who says Gods do not dwell among us mere Mortals!!!!!</span>
<span class="comment-copy">I did that, my new error: C:\Users\Patrick\AppData\Local\Programs\Python\Python36-32\python.exe C:/Users/Patrick/PycharmProjects/Week_6_assignment.py/Week_6_assignment.py Welcome to the Team Manager  ==========Main Menu========== 1. Display Team Roster. 2. Add Member. 3. Remove Member. 4. Edit Member. 5. Save Data. 6. Load Data. 9. Exit Program.  Selection&gt;  2 Traceback (most recent call last):   File "C:/Users/Patrick/PycharmProjects/Week_6_assignment.py/Week_6_assignment.py", line 151, in &lt;module&gt;     memberList = addMember(memberList) NameError: name 'addMember' is not dfnd</span>
<span class="comment-copy">My bad. Traceback (most recent call last):   File "C:/Users/Patrick/PycharmProjects/Week_6_assignment.py/Week_6_assignment.py", line 151, in &lt;module&gt;     memberList = addMember(memberList) NameError: name 'addMember' is not defined  Process finished with exit code 1</span>
<span class="comment-copy">You're passing each function memberList which is not declared on a way that would make it have a global scope and be visible, so you're passing None object. If you use memberList globally than declare it at the top.</span>
