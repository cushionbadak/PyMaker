<div class="post-text" itemprop="text">
<p>How would one test the <code>os</code> module methods provided in python. For example how would you test the use of <code>os.mkdir</code>?</p>
<pre><code>def create_folder(self):
    os.mkdir("/parentFolder/newFolder")
</code></pre>
<p>What can be used to test this method?</p>
<p>This method would have test cases such as </p>
<ul>
<li><p>Verifying the folder was created</p></li>
<li><p>Insufficient permissions to create folder</p></li>
<li><p>Insufficient space to create folder</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>When unit-testing <code>create_folder</code>, you <em>don't</em> test <code>os.mkdir</code>. This is for two reasons:</p>
<ol>
<li><p>It is part of an external library (in this case the standard library, but the same would be the case for third-party libraries), so should be covered by the test suites for that library; and</p></li>
<li><p>Even if it was part of your codebase, it's a different unit to the one under test.</p></li>
</ol>
<p>Additionally, it's worth noting that your testing of this, as demonstrated by <a href="https://stackoverflow.com/a/38057268/3001761">user2393256's answer</a>, would likely be using other functionality from the same external library - if the test fails, do you conclude that <code>os.mkdir</code> didn't work or that <code>os.path.isdir</code> didn't work?</p>
<p>From the perspective of testing <code>create_folder</code>, what really matters is that it <em>interacts</em> with that function correctly. I would mock <code>os.mkdir</code> out (using e.g. <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer"><code>unittest.mock</code></a>) and check that it is being called with the appropriate path. You can also change the return value and side effects of the mock, allowing you to simulate things like insufficient permissions or space, and test your app's response to that, without having to somehow set up that environment for real. When testing other units of functionality that call <code>create_folder</code> I would then mock out <code>create_folder</code> entirely, as it's a tested and trusted unit.</p>
<p>Beyond the unit testing, you would have a level of <em>integration testing</em>, which makes sure that all parts of your application work together correctly. At this point you would test overall functionality, e.g. that you can save a file then later load it back in, rather than specifics like <em>"is the folder created?"</em></p>
<p>Finally, and specifically for standard library functionality, you have to have a certain amount of trust that the language itself is tested (even if not directly, at least by the thousands of programs out there using this already!) and working.</p>
</div>
<div class="post-text" itemprop="text">
<p>To check if the directory was created you can use </p>
<pre><code>os.path.isdir()
</code></pre>
<p>As for the permission: there is a python idiom which says</p>
<blockquote>
<p>It's easier to ask for forgiveness than for permission</p>
</blockquote>
<p>In that case i would try to create the folder and catch the exception that could be thrown.</p>
</div>
<span class="comment-copy">You don't test it, you test <i>your program's interaction with it</i>. Just mock out <code>os.mkdir</code> and ensure it's called appropriately.</span>
<span class="comment-copy">@jonrsharpe How would you do that? Would you just assume in the rest of the tests the function worked or would you do something like the suggested answer with a mock object?</span>
<span class="comment-copy">From a unit testing perspective, yes. There's no point testing whether <code>os.mkdir</code> itself works, because you can only check that (as the answer posted suggests) with other <code>os</code> methods, at which point how do you decide which ones you trust? Elsewhere in your unit tests you would mock out <code>create_folder</code> entirely, as that's a tested and trusted unit. You would also have higher-level integration testing, where you don't care whether a specific folder has been created so much that the overall functionality works (e.g. if you're saving a game, that you can load the game again afterwards).</span>
