<div class="post-text" itemprop="text">
<p>Related to a earlier question of mine: <a href="https://stackoverflow.com/questions/38076616/how-to-unit-test-a-method-that-calculates-the-size-of-a-dir?noredirect=1#comment63591038_38076616">How to unit test a method that calculates the size of a dir?</a>
I want to unit test this function:   </p>
<pre><code>def get_dir_size(dir_path):
    """Determine the size of a dir.

    This function also takes into account the allocated size of
    directories (4096 bytes).

    Note: The function may crash on symlinks with something like:
    OSError: [Errno 40] Too many levels of symbolic links

    :param dir_path (str): path to the directory
    :return: size in bytes.
    """
    tot_size = 0
    for (root_path, dirnames, filenames) in os.walk(dir_path):
        for f in filenames:
            fpath = os.path.join(root_path, f)
            tot_size += os.path.getsize(fpath)
        tot_size += os.path.getsize(root_path)
    return tot_size
</code></pre>
<p>So from what I understood I have to mock the <code>os.walk</code> function </p>
<pre><code>import threedi_utils

@mock.patch('threedi_utils.files.os.walk')
def test_get_dir_size_can_get_dir_size(self, mock_walk):
    mock_walk.return_value(5000)
    size = threedi_utils.files.get_dir_size(self.test_path)
    self.assertEqual(size, 5000)
</code></pre>
<p>But <code>mock_walk.return_value(5000)</code> goes without effect as my test fails </p>
<pre><code>Traceback (most recent call last):
  File "/home/vagrant/.buildout/eggs/mock-1.3.0-py2.7.egg/mock/mock.py", line 1305, in patched
    return func(*args, **keywargs)
  File "/srv/lib/threedi_utils/tests/test_files.py", line 55, in test_get_dir_size_can_get_dir_size
    self.assertEqual(size, 5000)
AssertionError: 0 != 5000
</code></pre>
<p>What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok, I was heading down the wrong path. Should have mocked the <code>os.path.getsize()</code> method. Plus, the return value needs to be provided like this <code>.return_value = 5000</code></p>
<pre><code>@mock.patch('threedi_utils.files.os.path.getsize')
def test_get_dir_size_can_get_dir_size(self, mock_size):
    mock_size.return_value = 50
    size = threedi_utils.files.get_dir_size(self.test_path)
    self.assertEqual(size, 750)
    self.tearDown()
</code></pre>
</div>
<span class="comment-copy">That makes absolutely no sense. If you mock out the whole of <code>get_dir_size</code>, <b>what exactly are you testing?!</b> All you're testing here is that your mock returns the value you just told it to. If you want to mock out <code>os.walk</code>, you need the mock to return what that function actually would, so that you can see whether your function does the right thing with it.</span>
<span class="comment-copy">Haha, I see! You want to transform your comment into an answer that can guide me into the right direction?</span>
<span class="comment-copy">Instead, I'd suggest you <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer">read the docs</a> (or just <i>run the function you're mocking</i>) and write a <code>return_value</code> that actually represents what you're expecting to get back. That's the very basis of mocking. The <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer"><code>unittest.mock</code></a> docs also have plenty of examples.</span>
<span class="comment-copy">I just wanted to be able to grant you some credit for it.</span>
