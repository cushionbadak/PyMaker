<div class="post-text" itemprop="text">
<p>I have been trying to use the output of a system command to use it as a part of the command in the next portion. However, I cannot seem to join it up properly and hence not being able to run the second command properly. The OS used is KALI LINUX and python 2.7</p>
<pre><code>#IMPORTS
import commands, os, subprocess

os.system('mkdir -p ~/Desktop/TOOLS')
checkdir = commands.getoutput('ls ~/Desktop')

if 'TOOLS' in checkdir:
    currentwd = subprocess.check_output('pwd', shell=True)
    cmd = 'cp -R {}/RAW ~/Desktop/TOOLS/'.format(currentwd)
    os.system(cmd)
    os.system('cd ~/Desktop/TOOLS')
    os.system('pwd')
</code></pre>
<p>The errors are:</p>
<pre><code>cp: missing destination file operand after ‘/media/root/ARSENAL’
Try 'cp --help' for more information.
sh: 2: /RAW: not found
/media/root/ARSENAL
</code></pre>
<p>It seems that the reading of the first command is alright but it can't join with the RAW portion. I have read many other solutions, but they seem to be for shell scripting instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you haven't called <code>os.chdir()</code> anywhere prior to the <code>cp -R</code>, then you can use a relative path. Changing the code to...</p>
<pre><code>if 'TOOLS' in checkdir:
    cmd = 'cp -R RAW ~/Desktop/TOOLS'
    os.system(cmd)
</code></pre>
<p>...should do the trick.</p>
<p>Note that the line...</p>
<pre><code>os.system('cd ~/Desktop/TOOLS')
</code></pre>
<p>...will not do what you expect. <code>os.system()</code> spawns a subshell, so it will just change the working directory for that process and then exit. The calling process's working directory will remain unchanged.</p>
<p>If you want to change the working directory for the calling process, use...</p>
<pre><code>os.chdir(os.path.expanduser('~/Desktop/TOOLS'))
</code></pre>
<hr/>
<p>However, Python has all this functionality built-in, so you can do it without spawning any subshells...</p>
<pre><code>import os, shutil


# Specify your path constants once only, so it's easier to change
# them later
SOURCE_PATH = 'RAW'
DEST_PATH = os.path.expanduser('~/Desktop/TOOLS/RAW')

# Recursively copy the files, creating the destination path if necessary.
shutil.copytree(SOURCE_PATH, DEST_PATH)

# Change to the new directory
os.chdir(DEST_PATH)

# Print the current working directory
print os.getcwd()
</code></pre>
</div>
<span class="comment-copy">Is there some reason you're averse to using Python's <code>os.mkdir()</code>, <code>os.listdir()</code>, <code>os.getcwd()</code> and <code>shutil.copytree()</code>?</span>
<span class="comment-copy">@Aya Not really but the the copying part has a folder no? since the RAW folder is in the cwd. I need to join it up somehow. I also cannot use os.listdir as I need to check if the folder TOOLS is created</span>
<span class="comment-copy">@Kode.Error404&gt; Aya's point is, given all file manipulations are easily doable directly in python, trying to invoke external tools to do them is silly. And less performant. And more error-prone. And less portable.</span>
<span class="comment-copy">@Kode.Error404&gt; For instance, you could just <code>shutil.copytree('./RAW', '/home/some_user/Desktop/TOOLS')</code> and be done with it.</span>
<span class="comment-copy">You may want to have a look at the <a href="https://docs.python.org/3/library/shutil.html" rel="nofollow noreferrer">shutil</a> module documentation then. It's full of functions useful for manipulating files. It's much easier than messing with external tools.</span>
<span class="comment-copy">The code is working fine with your answer. Even though everything is working now, there is this error though. Traceback (most recent call last):   File "install.py", line 14, in &lt;module&gt;     os.chdir('~/Desktop/TOOLS') OSError: [Errno 2] No such file or directory: '~/Desktop/TOOLS'</span>
<span class="comment-copy">…because there is no directory named <code>~</code>.</span>
<span class="comment-copy">Do i have to specify it as /root? Even though its the same?</span>
<span class="comment-copy">What do you mean it is the same? <code>/root</code> is not the same as <code>~</code>. Try <code>touch '~'</code> in your shell, you'll see it creates a file named <code>~</code>.</span>
<span class="comment-copy">@Kode.Error404&gt; If you meant to expand ~ as an alias for user's home directory as per the commonly used convention, you may do so with <code>os.path.expanduser(path)</code>.</span>
