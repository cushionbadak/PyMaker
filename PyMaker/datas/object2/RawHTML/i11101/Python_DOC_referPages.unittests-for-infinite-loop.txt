<div class="post-text" itemprop="text">
<p>I am stucked at this code for creating unittest for infinite loop.</p>
<pre><code>try:
  while True:
    time.sleep(60)
except:
  fun()
</code></pre>
<p>Please let me know how can we create unittests for infinite loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>What behaviour are you testing? There doesn't appear to be any side effects or return value here. There isn't really anything to test. If it's just that <code>fun</code> is called after the loop then that sounds like over-specification. If it's just that some invariant is maintained after the loop ends then you can patch <code>sleep</code> to throw an exception, and then examine the state after the function has run.</p>
<pre><code>from unittest import TestCase, main
from unittest.mock import patch

import module_under_test

class TestLoop(TestCase):
    # patch sleep to allow loop to exit
    @patch("time.sleep", side_effect=InterruptedError)
    def test_state_reset(self, mocked_sleep):
        # given
        obj = module_under_test.SomeClass()

        # when
        obj.infinite_loop()

        # then assert that state is maintained
        self.assertFalse(obj.running)

if __name__ == "__main__":
    main()
</code></pre>
<p><strong>module_under_test.py</strong></p>
<pre><code>import time

class SomeClass:
    def __init__(self):
        self.running = False

    def fun(self):
        self.running = False

    def infinite_loop(self):
        self.running = True
        try:
            while True:
                time.sleep(60)
        except:
            self.fun()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could code the infinite loop using the <a href="https://docs.python.org/3.5/library/itertools.html#itertools.count" rel="nofollow"><code>itertools.count</code></a> fun—Åtion instead of <code>while True: ...</code>. This might make the code slightly less efficient, but it makes it possible to <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow">mock</a> the infinite loop:</p>
<pre><code>import itertools

try:
    for _ in itertools.count():
        time.sleep(60)
except:
    fun()
</code></pre>
<p>Then in your test do:</p>
<pre><code>from unittest.mock import patch

with patch("itertools.count") as mock_count:
    # tests go here
</code></pre>
</div>
<span class="comment-copy">You could <code>unittest.mock</code> out <code>time.sleep</code> to have various <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow noreferrer"><code>side_effect</code>s</a>.</span>
<span class="comment-copy">but it will stick go into infinite loop as While True is used. how can we resolve the same?</span>
<span class="comment-copy">Please <i>actually read</i> the documentation - the side effect can be <i>"an exception (class or instance) to be raised"</i>, allowing you to end the loop when you choose.</span>
