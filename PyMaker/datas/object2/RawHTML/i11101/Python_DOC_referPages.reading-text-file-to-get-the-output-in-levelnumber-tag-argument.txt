<div class="post-text" itemprop="text">
<p>I am reading data from text file. the data in the file has a structure</p>
<pre><code>&lt;level number&gt; &lt;tag&gt; &lt;argument&gt;
 0 @I5@ INDI
 1 NAME Rosy /Huleknberg/
 2 GIVN Rosy
 2 SURN Huleknberg
 2 _MARNM Vettle
 1 SEX F
 1 BIRT
 2 DATE 15 SEP 1928
 1 DEAT Y
 2 DATE 10 MAR 2010
 1 FAMS @F3@
 0 @I6@ INDI
 1 NAME Roger /Rsoberg/
 2 GIVN Roger
 2 SURN Rsoberg
 2 _MARNM Rsoberg
 1 SEX M
 1 BIRT
 2 DATE 23 JAN 1928
 1 FAMS @F2@
</code></pre>
<p>I want to read this data and store respective values in 3 variables 'levelnumber' , 'tag' and 'argument'</p>
<p>I wrote a following code to do this operation </p>
<pre><code>              testfile = open ('test.dat')
               for line in gedcom_file:
              lines = line.strip() 

              a = lines[:1]
              data.append(a)
              b = lines [1]
              data.append(b)
              c =lines [2:] 
              data.append(c) 
</code></pre>
<p>and got the following output( showing few lines of output)</p>
<pre><code>             0

             @I5@ INDI
             1

             NAME Rosy /Huleknberg/
             2

             GIVN Rosy
             2

             SURN Huleknberg
             2

             _MARNM Vettle
             1

             SEX F
             1
</code></pre>
<p>my output is in the form </p>
<pre><code>             &lt;levelnumber&gt;
             &lt;tag&gt; &lt;argument&gt;
</code></pre>
<p>and I want  all of them on the same line</p>
<pre><code>             &lt;levelnumber&gt; &lt;tag&gt; &lt;argument&gt;
</code></pre>
<p>How can i correct my code? Is there any other method to do this task in better way?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem isn't described clearly, but I hope this will help:</p>
<p>You should use <code>line.split()</code> method instead of <code>line.strip()</code></p>
<pre><code>testfile = open('test.dat')
for line in gedcom_file:
    # I suppose that data is a list
    data += line.split()
</code></pre>
<p>And remember that <code>print('string')</code> will add newline character at the end of output. <code>print('string', end='')</code> output hasn't newline char.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Part 1. Parsing the file</strong></p>
<p>This part of your code isn't doing what you intended it to do:</p>
<blockquote>
<pre><code>lines = line.strip() 
a = lines[:1]
b = lines[1]
c = lines[2:]
</code></pre>
</blockquote>
<p><code>lines</code> is a string. So <code>lines[:1]</code> is the first character of the string, <code>lines[1]</code> is the second character of the string, and <code>lines[2:]</code> is the rest of the string.</p>
<p>Instead, after stripping your string, you want to split it into words with <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow"><code>split(' ', 2)</code></a>. The second argument tells it to split at only the first two spaces, so that the third element of the resulting list is allowed to contain spaces:</p>
<pre><code>lines = line.strip().split(' ', 2)
a = lines[0]
b = lines[1]
c = lines[2]
</code></pre>
<p>Or more succinctly:</p>
<pre><code>a, b, c = line.strip().split(' ', 2)
</code></pre>
<p><strong>Part 2. Printing a list</strong></p>
<p>Once you're done processing and have a list you want to print, you can use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>join()</code></a> to assemble it into a space-separated string. For example:</p>
<pre><code>my_list = ['a', 'b', 'c']
print(' '.join(my_list))
# a b c
</code></pre>
</div>
<span class="comment-copy">Your code has broken indentation. <code>gedcom_file</code> is not defined. Your code doesn't produce any output.</span>
<span class="comment-copy">If you're looking for inspiration or test cases or existing working code libraries, there's a page here <a href="http://www.tamurajones.net/OpenSourceGEDCOMParsers.xhtml" rel="nofollow noreferrer">tamurajones.net/OpenSourceGEDCOMParsers.xhtml</a> with open source GEDCOM parsers. It warns that "Creating a GEDCOM file from your own application is fairly straightforward, reading a random ostensible GEDCOM file created by another application considerably less so" because of inconsistencies in the format.</span>
