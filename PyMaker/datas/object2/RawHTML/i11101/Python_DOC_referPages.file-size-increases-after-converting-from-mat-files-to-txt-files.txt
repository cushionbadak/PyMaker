<div class="post-text" itemprop="text">
<p>I have a lot of .mat files which contain the information about the radial part of some different wavefunctions and some other information about an atom. Now I successfully extracted the wavefunction part and using numpy.savetxt() to save it into .txt file. But the size of the file increases so much:
After I ran </p>
<pre><code>    du -ch wfkt_X_rb87_n=40_L=11_J=0_step=0.001.mat
    440K    wfkt_X_rb87_n=40_L=11_J=0_step=0.001.mat
    du -ch wfkt_X_rb87_n=40_L=12_J=0_step=0.001.txt
    2,9M    wfkt_X_rb87_n=40_L=12_J=0_step=0.001.txt
</code></pre>
<p>Ignore the L=11 and L=12 difference, the size of the wavefunctions are almost the same, but the file size increased by more than 6 times. I want to know the reason why and probably a way to decrease the size of the .txt files. 
Here is the code how I covert the files:</p>
<pre><code>    import scipy.io as sio
    import os
    import pickle
    import numpy as np
    import glob as gb
    files=gb.glob('wfkt_X_rb*.mat')
    for filet in files:
            print filet
            mat=sio.loadmat(filet)
            wave=mat['wavefunction'][0]
            J=mat['J']
            L=mat['L']
            n=mat['n']
            xmax=mat['xmax'][0][0]
            xmin=mat['xmin'][0][0]
            xstep=mat['xstep'][0][0]
            energy=mat['energy'][0][0]
            name=filet.replace('.mat','.txt')
            name=name.replace('rb','Rb')
            x=np.linspace(xmin, xmax, num=len(wave), endpoint=False)
            Data=np.transpose([x,wave])
            np.savetxt(name,Data)
            os.remove(filet)
            with open(name, "a") as f:
                    f.write(str(energy)+" "+str(xstep)+"\n")
                    f.write(str(xmin)+" "+str(xmax))
</code></pre>
<p>and the format of the data file needed is :</p>
<pre><code>    2.700000000000000000e+01 6.226655250941872093e-04
    2.700099997457605738e+01 6.232789496263042460e-04
    2.700199994915211121e+01 6.238928333406641843e-04
    2.700299992372816860e+01 6.245071764542571872e-04
    2.700399989830422243e+01 6.251219791839867897e-04
    2.700499987288027981e+01 6.257372417466700075e-04
    2.700599984745633364e+01 6.263529643590372287e-04
</code></pre>
<p>If you need more information, feel free to ask! Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>.mat</code> is a binary format whereas <code>numpy.savetxt()</code> writes a plain text file. The binary representation of a double precision number (IEEE 754 double precision) takes 8 bytes. By default, numpy saves this as plain text in the format <code>0.000000000000000000e+00</code> resulting in 24 bytes.</p>
<p>There are number of additional effects which affect the resulting file size. E.g. structural overhead of the file format, compression, the format you use for writting the plain text (number of decimal digits). However in your case, i suspect that the main effect is just the difference between a binary and a plain text representation of the numbers.</p>
<p>If you want to decrease the file size, you should use a different output format. Possible options are:</p>
<ul>
<li><p>write a zipped text file:</p>
<pre><code>import gzip
with open('data.txt.gz', 'wb') as f:
    numpy.savetxt(f, myarray)
</code></pre></li>
<li><p>Save as <code>.mat</code> again. See <a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.io.savemat.html" rel="nofollow">scipy.io.savemat()</a></p></li>
<li>Write a proprietary binary numpy format (<code>.npy</code>). See <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.save.html#numpy.save" rel="nofollow">numpy.save()</a></li>
<li>Write a proprietary binary compressed numpy format  (<code>.npz</code>). See <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.savez_compressed.html#numpy.savez_compressed" rel="nofollow">numpy.savez_compressed()</a></li>
<li>If you have very large amounts of structured data, consider usering the <a href="http://www.h5py.org/" rel="nofollow">HDF5 file format</a>.</li>
<li>If you need to write your own binary format use <a href="https://docs.python.org/3/library/struct.html#struct.pack" rel="nofollow">struct.pack()</a> and write the resulting bytes to a file.</li>
</ul>
<p>Which option to choose depends on your situation: Who will have to read the data afterwards? How important is the compression factor? Is your data just one single array or is the structure more complex?</p>
</div>
<span class="comment-copy">Depends on how you saved them, could just be a change in data type. Can you add the code used to read/save them?</span>
<span class="comment-copy">mat-Files are binary, and compressed, and  txt files are, ohm, text, so a factor of 3 to 6 is quite normal. If size matters, use a binary format like .mat.</span>
<span class="comment-copy">It is to be expected.  Text files convert numbers that are represented in binary to characters.  A trivial simplistic example:  the number 2 can be represented by two bits <code>10</code> in binary, The character "2" is hex. 32, that's eight binary bits (in ASCII), so 4 times larger (in Unicode it would be 16 bits).  One way to reduce is to zip (compress) the txt file - there are a number of python modules available for that, but you have to unzip to use the file.  The reduction in size will be data dependant.</span>
<span class="comment-copy">@Benjamin, Do you know how to save the data in binary form? I can use for example .dat files for my calculation.</span>
<span class="comment-copy">Do you know how to save the data also in binary format?</span>
<span class="comment-copy">What exactly do you mean? Options 2-5 (<code>.mat</code>, <code>.npy</code>, <code>.npz</code>, <code>.hdf5</code>) are all binary formats. They just differ in structuring of the data and compression.</span>
<span class="comment-copy">Thanks for the answer. After processing the files, they will be read by a C++ programme to do further calculations. In the C++ programme, the data should be in the format of a 2 by N array (of course the data files themselves are saved in the format of two columns). I want to know if it is possible by saving the data in, for example, .mat again to reduce the size of the files?</span>
<span class="comment-copy">All of the above options store the data in a file with reduced size. The basic question is then, which capabilities you have for reading on the C++ side. If you already have a library for reading <code>.mat</code>, go for this solution. If not, but you have a library for unzipping, you can use option 1 with the zipped txt file. Alternatively, use <code>.npy</code> and implement a C++ reader for that format, which is relatively simple (<a href="http://docs.scipy.org/doc/numpy/neps/npy-format.html" rel="nofollow noreferrer">docs.scipy.org/doc/numpy/neps/npy-format.html</a>).</span>
