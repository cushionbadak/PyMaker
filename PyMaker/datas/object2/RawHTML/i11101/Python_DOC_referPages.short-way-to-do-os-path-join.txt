<div class="post-text" itemprop="text">
<p>I'm really tired of typing <code>os.path.join()</code> each time I have to construct a path and I was thinking of defining a shortcut like this one:</p>
<pre><code>def pj(*args):
    from os.path import join
    return join(args)
</code></pre>
<p>But it throws <code>TypeError: join() argument must be str or bytes, not 'tuple'</code></p>
<p>So I wonder what is the correct way to pass arguments to <code>os.path.join()</code> and all in all, am I trying to reinvent the wheel? </p>
</div>
<div class="post-text" itemprop="text">
<p>You should <em>unpack</em> the arguments to <code>.join</code>:</p>
<pre><code>join(*args)
#    ^
</code></pre>
<p>Like so:</p>
<pre><code>&gt;&gt;&gt; import os.path.join
&gt;&gt;&gt; args = ('/usr/main/', 'etc/negate/')
&gt;&gt;&gt; os.path.join(*args)
'/usr/main/etc/negate/'
</code></pre>
<p>P.S.: Using <code>import</code> in your function isn't a very good idea. Move it to the top of your module.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Python 3.4, you could give <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow">pathlib</a> a try.</p>
<p>From the doc:</p>
<pre><code>&gt;&gt;&gt; p = Path('/etc')
&gt;&gt;&gt; q = p / 'init.d' / 'reboot'
&gt;&gt;&gt; q
PosixPath('/etc/init.d/reboot')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can rename it in the import statement:</p>
<pre><code>from os.path import join as pj # or whatever other name you pick 
                               # to distinguish it from str.join
</code></pre>
</div>
<span class="comment-copy">You shouldn't <code>import</code> inside the function. Why not just <code>from os.path import join</code> wherever you're using it? Then you don't have to type <code>os.path.</code> and it's only two letters longer (not to mention more readable, and more likely to be something anyone reading your code already knows about).</span>
<span class="comment-copy">I would put the import outside of the function. It will get executed none the less when you import your helper function.</span>
<span class="comment-copy">from os.path import join as pj might be a good alternative.</span>
<span class="comment-copy">@MatthiasSchreiber Yes it could. Depends on how familiar people can get with such short form: <code>numpy -&gt; np</code>, <code>pandas -&gt; pd</code>, why not.</span>
