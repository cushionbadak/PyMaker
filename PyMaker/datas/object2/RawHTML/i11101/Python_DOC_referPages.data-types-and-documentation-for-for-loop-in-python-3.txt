<div class="post-text" itemprop="text">
<p>I am very confused about the data types and UTF-8 encoding. What is actually happening under the hood? I am reading a messy JSON data without delimiters in Python 3 (data has Japanese/Chinese characters time to time).</p>
<p>I am reading in the data:</p>
<pre><code>url = "http://localhost:8001"
data = urllib.request.urlopen(url).read()
type(data)
</code></pre>
<p>And it returns <em>bytes</em> at the moment</p>
<p>Then I want to read it letter by letter</p>
<pre><code>for letter in data:
    type(letter)
</code></pre>
<p>It returns me that letter is an <em>integer</em> right now. Why it was a byte and now it is an integer?
P.S. I understand that the integer that I am getting represents a decimal representation of the character. But this jumping back and forth makes me confused.</p>
<p>P.S. I also couldn't find official documentation for for-loop. Is there one?</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Decoding the data as Padraic Cunningham suggested should work:</p>
<pre><code>data = urllib.request.urlopen(url).read().decode("utf-8")
</code></pre>
<p>You also asked for the official documentatio for the for-loop. I'm not sure if you refer to <a href="https://docs.python.org/3/reference/compound_stmts.html#for" rel="nofollow">this</a> or you are talking about the iteration behaviour of <code>data</code>.</p>
<p>The iteration behaviour of a <code>bytes</code> is as stated <a href="https://docs.python.org/3/library/stdtypes.html#bytes.hex" rel="nofollow">here</a>:</p>
<blockquote>
<p>Since bytes objects are sequences of integers (akin to a tuple), for a bytes object b, b[0] will be an integer, while b[0:1] will be a bytes object of length 1. (This contrasts with text strings, where both indexing and slicing will produce a string of length 1)</p>
</blockquote>
<p>Not enough rep to post it as a comment to the previous answer, I'm sorry.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to decode the <a href="https://docs.python.org/3.6/library/stdtypes.html#bytes" rel="nofollow"><em>bytes</em></a> to <em>str</em>:</p>
<pre><code>In [12]: data = urllib.request.urlopen("http://stackoverflow.com/questions/38014233/data-types-and-documentation-for-for-loop-in-python-3/38014292#38014292").read()

In [13]: type(data)
Out[13]: bytes

In [14]: type(data.decode("utf-8"))
Out[14]: str

In [15]: data[0]
Out[15]: 60

In [16]: data.decode("utf-8")[0]
Out[16]: '&lt;'
</code></pre>
<p>After decoding you will get see the characters when you loop and print. <em><code>urllib.request.urlopen(url).read()</code></em> returns <em>bytes</em>, it is up to you to decode the bytes into a str.</p>
</div>
<span class="comment-copy"><i>"Why it was a byte and now it is an integer?</i>" What is "it" here? <code>letter</code>? But <code>letter</code> was never a byte. <code>data</code>? But <code>data</code> is never an integer. This seems equivalent to the question "Why does <code>x = [1,2,3]; print(type(x)); print(type(x[0]))</code> print 'list' and then 'int'?</span>
<span class="comment-copy">Adirio, thanks for the documentation. Yes, I was looking for that. Can you also share about the iteration behavior of data please? I am not quite sure what you mean :) I'll read it later.</span>
<span class="comment-copy">Edited my asnwer to include the info you asked for.</span>
<span class="comment-copy">Thank you, that actually helps a lot. My main concern, why for-loop returns integer instead of the byte?</span>
<span class="comment-copy">@Cooper, that is shown in my answer, <code>data[0] -&gt; 60</code> as it has not be decoded to a str, after decoding <code>data.decode("utf-8")[0]  -&gt; "&lt;"</code>. The for loop iterates over each byte so all you see are the int/byte values, what do you not understand? Have you decoded and run your for loop?</span>
<span class="comment-copy">@Cooper: Because <code>bytes</code> object iterate over the numeric value of each individual byte. Nothing to do with a <code>for</code> loop specifically, it's just how <code>bytes</code> implements the iterator protocol. If you did <code>list(data)</code>, you'd get a <code>list</code> of <code>int</code>.</span>
