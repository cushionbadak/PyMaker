<div class="post-text" itemprop="text">
<p>Assume a string of 5 chars. The title, I think, is clear, but here are some examples:</p>
<pre><code>'716-0' --&gt; '716'
'77820' --&gt; '77820'
</code></pre>
<p>Regex works fine</p>
<pre><code>import re
re.findall(r'\d+', '716-0')[0]
</code></pre>
<p>but how about a good non-regex way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Regex is probably the best way to do it, but if for whatever reason you want to avoid it, you can make use of <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow"><code>str.isdigit()</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow"><code>itertools.takewhile()</code></a>:</p>
<pre><code>from itertools import takewhile

string = "716-0"
number = "".join(takewhile(str.isdigit, string))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def trim(x):
    output=[]
    for digit in x:
        if digit in [str(x) for x in range(10)]:
            output.append(digit)
        else:
            break
    return ''.join(output)
</code></pre>
</div>
<span class="comment-copy">"after" would usually imply "not including" but you seem to be including the non-digit character when you remove it.</span>
<span class="comment-copy">What's the problem you're trying to solve? Why not use the regex and spend this time on actual functionality?</span>
<span class="comment-copy">@TadhgMcDonald-Jensen good catch, thanks, I meant "including", will fix now</span>
<span class="comment-copy">also the regex <code>r'\d+'</code> will only "remove all characters after the first non-digit" when the first character <b>is</b> a digit, <code>re.findall(r'\d+', 'a716b')[0]</code> would give <code>'716'</code>.</span>
<span class="comment-copy">@jonrsharpe cause I'm nerd</span>
<span class="comment-copy">Care explaining the downvote?</span>
