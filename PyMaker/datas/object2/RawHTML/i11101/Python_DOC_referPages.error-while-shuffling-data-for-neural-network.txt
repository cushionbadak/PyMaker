<div class="post-text" itemprop="text">
<p>I'm following a tutorial on neural nets<a href="http://neuralnetworksanddeeplearning.com/chap1.html">1</a></p>
<p>It's in Python 2.7. I'm using 3.4. This is the line that troubles me:</p>
<p><code>if test_data: n_test = len(test_data)</code></p>
<p>I get: <code>TypeError: object of type 'zip' has no len()</code>.</p>
<p>Is there a way to rewrite it so that it works in 3.4?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you know that the iterator is finite:</p>
<pre><code>#NOTE: `sum()` consumes the iterator
n_test = sum(1 for _ in test_data) # find len(iterator)
</code></pre>
<p>Or if you know that <code>test_data</code> is always small <em>and</em> a profiler says that the code is the bottleneck in your application then here's code that might be more efficient for small <code>n_test</code>:</p>
<pre><code>test_data = list(test_data)
n_test = len(test_data)
</code></pre>
<p>Unfortunately, <a href="https://docs.python.org/3/library/operator.html#operator.length_hint"><code>operator.length_hint()</code></a> (Python 3.4+) returns zero for a <code>zip()</code> object. See <a href="https://www.python.org/dev/peps/pep-0424/">PEP 0424 -- A method for exposing a length hint</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A bit late now to answer, but in case anyone else stumbles on it: for that same neural net example tutorial, it turned out I had to wrap the 3 zip calls in the mnist_loader with a list(zip(...)) construct:</p>
<pre><code>training_data = list(zip(training_inputs, training_results))
(...)
validation_data = list(zip(validation_inputs, va_d[1]))
(...)
test_data = list(zip(test_inputs, te_d[1]))
</code></pre>
<p>And then it worked.</p>
</div>
<div class="post-text" itemprop="text">
<p>Force the <code>zip()</code> to evaluate.</p>
<pre><code>foo = list(zip(...))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Some Info</h1>
<p>This is because in the Python 3.x, <code>zip</code> returns a generator object. This object is not a list (it's better) but it behaves like one. You can try iterating through it like this:</p>
<pre><code>for i in zip([1,2,3,4], ['a','b','c','d']):
    print i
</code></pre>
<h1>The Quick Answer</h1>
<p>Please show us the code surrounding where the error happened.
But I think I can still give you a quick (and not necessarily good) solution.</p>
<p>turn this</p>
<pre><code>for i in reversed(range(1, len(x))):
</code></pre>
<p>into this:</p>
<pre><code>for i in reversed(range(1, len(list(x))):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In mnist_loader wrap your zip results in <code>list()</code> constructs like below</p>
<pre><code>def load_data_wrapper():    
    tr_d, va_d, te_d = load_data()
    training_inputs = [np.reshape(x, (784,1)) for x in tr_d[0]]
    training_results = [vectorized_result(y) for y in tr_d[1]]
    training_data = list(zip(training_inputs, training_results))
    validation_inputs = [np.reshape(x,(784, 1))for x in va_d[0]]
    validation_data = list(zip(validation_inputs, va_d[1]))
    test_inputs = [np.reshape(x, (784, 1)) for x in te_d[0]]
    test_data = list(zip(test_inputs, te_d[1]))
    return(training_data, validation_data, test_data)
</code></pre>
</div>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/18014437/4279">Length of a finite generator</a></span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/3345785/4279">Getting number of elements in an iterator in Python</a></span>
<span class="comment-copy">If you have access to the two iterables that have been zipped, just compute the length of both and take whichever is smaller. The length of the zip is not going to be any different from that.</span>
<span class="comment-copy">Try using <code>list(zip(...)</code> where you have <code>zip(...)</code></span>
<span class="comment-copy">same problem, the program is trying to do something like <code>zip(...)[i]</code>. Best would be to define a new variable <code>new_var = list(zip(...))</code> and replacing <code>zip(...)</code> with <code>new_var</code>.</span>
<span class="comment-copy">You should do <code>test_data = list(test_data)</code> before the <code>if</code> check, otherwise <code>if test_data</code> will always be true, even for an empty <code>zip</code>. Also might be worth pointing out that <code>sum(...)</code> will consume the <code>zip</code></span>
<span class="comment-copy">@tobias_k: wrong. What if <code>test_data</code> is <code>None</code>?</span>
<span class="comment-copy">I see you point... in fact, the <code>if</code> check would not be needed if it were just an empty list (then <code>n_test</code> would just be 0). Still, might be worth pointing out, just in case.</span>
<span class="comment-copy">Working through your suggestions now, thanks a lot. It's someone else's code and I admit it's stretching my ability. Cheers!</span>
<span class="comment-copy">late but welcome for those who arrive even later, ty</span>
<span class="comment-copy">All three in <code>load_data_wrapper()</code>.</span>
<span class="comment-copy">they are talking about this tutorial: <a href="http://neuralnetworksanddeeplearning.com/chap1.html" rel="nofollow noreferrer">neuralnetworksanddeeplearning.com/chap1.html</a></span>
<span class="comment-copy">Even better for performance is if you can keep using generators, so that you do not build huge lists in memory. This will probably require more thorough refactoring, which is not possible with the code fragments in the question alone.</span>
<span class="comment-copy">FYI: merged from <a href="https://stackoverflow.com/questions/38045628/error-while-shuffling-data-for-neural-network" title="error while shuffling data for neural network">stackoverflow.com/questions/38045628/â€¦</a></span>
