<div class="post-text" itemprop="text">
<p>I have some strings like:</p>
<pre><code>\i{}Agrostis\i0{} &lt;L.&gt;
</code></pre>
<p>I would like to get rid of the '\i{}', '\io{}' characters, so that I could get just:</p>
<pre><code>Agrostis &lt;L.&gt;
</code></pre>
<p>I've tried the following code (adapted from <a href="https://stackoverflow.com/questions/4666973/how-to-extract-a-substring-from-inside-a-string-in-python">here</a>):</p>
<pre><code>m = re.search('\i{}(.+?)\i0', item_name)
if m:
   name = m.group(1).strip('\\')
else:
   name = item_name
</code></pre>
<p>It works in part, because when I run it I get just:</p>
<pre><code>Agrostis
</code></pre>
<p>without the </p>
<pre><code>&lt;L.&gt;
</code></pre>
<p>part (which I want to keep).</p>
<p>Any hints?</p>
<p>Thanks in advance for any assistance you can provide!</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>s.replace('\i{}', '')</code> and <code>s.replace('\io{}', '')</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You ca do this in different ways.</p>
<p>The simplest one is to use str.replace</p>
<pre><code>s = '''\i{}Agrostis\i0{} &lt;L.&gt;'''
s2 = s.replace('''\i{}''', '').replace('''\i0{}''', '')
</code></pre>
<p>Another way is to use <code>re.sub()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use the <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow"><code>re.sub</code></a> function.</p>
<pre><code>In [34]: import re

In [35]: s = "\i{}Agrostis\i0{} &lt;L.&gt;"

In [36]: re.sub(r'\\i\d*{}', '', s)
Out[36]: 'Agrostis &lt;L.&gt;'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <em>character class</em> along with <code>re.sub()</code></p>
<pre><code>import re
regex = r'\\i[\d{}]+'
string = "\i{}Agrostis\i0{} &lt;L.&gt;"

string = re.sub(regex, '', string)
print string
</code></pre>
<p>See <a href="http://ideone.com/6Nwctc" rel="nofollow"><strong>a demo on ideone.com</strong></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can either use <code>s.replace('\i{}', '')</code> and <code>s.replace('\io{}', '')</code>, as Julien said, or, continuing with the regex approach, change your pattern to:</p>
<p><code>re.search('\i{}(.+?)\i0(.++)', item_name)</code></p>
<p>And use <code>m.group(1).strip('\\') + m.group(2).strip('\\')</code> as the result.</p>
</div>
<span class="comment-copy">Are you sure the <code>\i{}</code> and <code>\io{}</code> substrings occur exactly once in the string, with the first always coming before the second?</span>
<span class="comment-copy">Yes, they all have the very same format.</span>
