<div class="post-text" itemprop="text">
<p>I've come to an end with my assignment, I don't know where I go from where I am right now, the code is currently looking like this:</p>
<pre><code>def radixsorting1(n,m):
    div=1
    mod=10
    bin_list=[]
    alist=[]
    r=[]
    s=[]
    for bins in range(0,10):
        bin_list.append(Queue())
    for k in range(0,m):
        r.append(random.randint(1,10**n))
    if not len(r)==0:
        o=max(r)
        y=len(str(o))
    for p in range(y):
        for num in r:
            minsta_tal=num%mod
            minsta_tal=int(minsta_tal//div)
            bin_list[minsta_tal].put(num)
        new_list=[]
        for bins in bin_list:
            while not bins.isempty():
                new_list.append(bins.dequeue())
            alist=new_list
        return alist
</code></pre>
<p>What I've been trying to do is to create 10 queues in put them in a list, then random m numbers from 1 to 10^n. Lets say I get 66 and 72, then I first sort them by the "small number", that is 6 and 2 in my numbers, then put them in a lost, and then do the process all over again but for the number 6 and 7 (the bigger number). In its current shape I get the error "Queue" object is not iterable.</p>
<p>My Queue class is looking like this, I think this one is okay.</p>
<pre><code>class Queue:
    def __init__(self):
        self.lista=[]

    def put(self,x):
        self.lista.append(x)

    def get(self):
        if not len(self.lista)==0:
            return self.lista.pop(0)

    def isempty(self):
        if len(self.lista)==0:
            return True
        else:
            False

    def length(self):
        return len(self.lista)


    def dequeue(self):
        if not len(self.lista)==0:
            n=self.lista.pop(0)
            return n
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to add a bit more code to make it an iterable. <code>__iter__</code> should return an iterator. The iterator should have a <code>next</code> method.</p>
<p>Take a look at this:</p>
<p><a href="https://stackoverflow.com/questions/19151/how-to-make-class-iterable">Build a Basic Python Iterator</a></p>
<p>So it is my understanding that the thing you want to iterate over is the contents of <code>self.lista</code>... Why not just return <code>lista</code>'s iterator.</p>
<p>Here is the easiest way to do that:</p>
<pre><code>class Queue:
    ...
    def __iter__(self):
        return self.lista.__iter__()
</code></pre>
<p>It's a bit hard to see what exactly it is that you want.. If what you are trying to do is empty <code>lista</code>as you iterate over it (Queue is a fifo kinda deal) it then rather do this:</p>
<pre><code>class Queue:
    ...
    def __iter__(self):
        return self
    def next(self):
        if self.lista: #since empty lists are Falsey
            return self.lista.pop(0)
        raise StopIteration
</code></pre>
</div>
<span class="comment-copy">Yes, that's not <a href="http://stackoverflow.com/q/9884132/3001761">iterable</a>; you don't define <code>__iter__</code> or <code>__getitem__</code>. Also, per <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">the data model</a>, you should rename the existing methods</span>
<span class="comment-copy">Cant say Im sure what Ive done but i did put  def __iter__(self): 		return self  in my class function but now I get the error: iter() returned non-iterator of typ "Queue", and I think my ending of the code is wrong as well...</span>
<span class="comment-copy">Please <a href="https://stackoverflow.com/posts/38011331/edit">edit</a> the question, code (particularly Python) is all but unreadable in comments.</span>
<span class="comment-copy">sorry, this is what I meant: As you can say in the code over, I did put a little bit of new code in my Class Queue. I still get the error Iter() returned non-iterator of type "Queue". Also I have a feeling the end of my radixsorting1 code is wrong, but Im unsure how to do the ending of it....</span>
<span class="comment-copy">If you <code>return self</code> from <code>__iter__</code> you also need to implement <code>__next__</code>.</span>
<span class="comment-copy">Thank you for your comment, this is pretty new to me, didn't realize my task would be this complicated.</span>
<span class="comment-copy">Is there like a lot easier way to solve the problem with radixsorting, I cant say I understand even though I did read what you posted, Im new to this and I dont understand how I can solve the problem when I only have the self-reference in my <b>init</b> and he got low and high as well....</span>
<span class="comment-copy">Thank you so much for taking time!</span>
<span class="comment-copy">You are welcome :)</span>
<span class="comment-copy">Im calling the function right now, but nothing is happening pretty much, calling it through labb73.radixsorting1(5,5)...Nothing is happening tho, Where did I mess up?</span>
