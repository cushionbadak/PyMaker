<div class="post-text" itemprop="text">
<p>How can I convert a ipv4 subnet mask to cidr notation using <code>netaddr</code> library?<br/>
Example:  <code>255.255.255.0 to /24</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://netaddr.readthedocs.io/en/latest/index.html" rel="nofollow noreferrer"><code>netaddr</code></a>:</p>
<pre><code>&gt;&gt;&gt; from netaddr import IPAddress
&gt;&gt;&gt; IPAddress('255.255.255.0').netmask_bits()
24
</code></pre>
<p>Using <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow noreferrer"><code>ipaddress</code></a> from stdlib:</p>
<pre><code>&gt;&gt;&gt; from ipaddress import IPv4Network
&gt;&gt;&gt; IPv4Network('0.0.0.0/255.255.255.0').prefixlen
24
</code></pre>
<p>You can also do it without using any libraries: just count 1-bits in the binary representation of the netmask:</p>
<pre><code>&gt;&gt;&gt; netmask = '255.255.255.0'
&gt;&gt;&gt; sum(bin(int(x)).count('1') for x in netmask.split('.'))
24
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; IPNetwork('0.0.0.0/255.255.255.0').prefixlen
24
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the following function. it is fast, reliable, and don't use any library.</p>
<pre><code># code to convert netmask ip to cidr number
def netmask_to_cidr(netmask):
    '''
    :param netmask: netmask ip addr (eg: 255.255.255.0)
    :return: equivalent cidr number to given netmask ip (eg: 24)
    '''
    return sum([bin(int(x)).count('1') for x in netmask.split('.')])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this one? It does not need any additional library as well.</p>
<pre><code>def translate_netmask_cidr(netmask):
    """
    Translate IP netmask to CIDR notation.
    :param netmask:
    :return: CIDR netmask as string
    """
    netmask_octets = netmask.split('.')
    negative_offset = 0

    for octet in reversed(netmask_octets):
        binary = format(int(octet), '08b')
        for char in reversed(binary):
            if char == '1':
                break
            negative_offset += 1

    return '/{0}'.format(32-negative_offset)
</code></pre>
<p>It is in some ways similar to IAmSurajBobade's approach but instead does the lookup reversed. It represents the way I would do the conversion manually by pen and paper.</p>
</div>
<div class="post-text" itemprop="text">
<p>As of Python 3.5:</p>
<pre><code>ip4 = ipaddress.IPv4Network((0,'255.255.255.0'))
print(ip4.prefixlen)
print(ip4.with_prefixlen)
</code></pre>
<p>will print:</p>
<blockquote>
<p>24<br/>
  0.0.0.0/24</p>
</blockquote>
</div>
<span class="comment-copy">Give it a try and show us what you've done/attempted.</span>
<span class="comment-copy">Could the reverse i.e. cidr to netmask be done in a one liner?</span>
<span class="comment-copy">@Bilal check this <a href="https://stackoverflow.com/q/23352028/244297">post</a>. TLDR: <code>netmask = '.'.join([str((0xffffffff &lt;&lt; (32 - prefix) &gt;&gt; i) &amp; 0xff) for i in [24, 16, 8, 0]])</code></span>
