<div class="post-text" itemprop="text">
<p>I'm trying to delete specific lines in a text file the way I need to go about it is by prompting the user to input a string (a phrase that should exist in the file) the file is then searched and if the string is there the data on that line and the number line number are both  stored. </p>
<p>After the phrase has been found it and the five following lines are printed out. Now I have to figure out how to delete those six lines without changing any other text in the file which is my issue lol.</p>
<p>Any Ideas as to how I can delete those six lines?</p>
<p>This was my latest attempt to delete the lines</p>
<pre><code>file = open('C:\\test\\example.txt', 'a')
locate = "example string"
for i, line in enumerate(file):
    if locate in line:
        line[i] = line.strip()
        i = i+1

        line[i] = line.strip()
        i = i+1

        line[i] = line.strip()
        i = i+1

        line[i] = line.strip()
        i = i + 1

        line[i] = line.strip()
        i = i+1

        line[i] = line.strip()
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Usually I would not think it's desirable to overwrite the source file - what if the user does something by mistake?  If your project allows, I would write the changes out to a new file.</p>
<pre><code>with open('source.txt', 'r') as ifile:
    with open('output.txt', 'w') as ofile:
        locate = "example string"
        skip_next = 0
        for line in ifile:
            if locate in line:
                skip_next = 6
                print(line.rstrip('\n'))
            elif skip_next &gt; 0:
                print(line.rstrip('\n'))
                skip_next -= 1
            else:
                ofile.write(line)
</code></pre>
<p>This is also robust to finding the phrase multiple times - it will just start counting lines to remove again.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can find the occurrences, copy the list items between the occurrences to a new list and then save the new list into the file.</p>
<pre><code>_newData = []
_linesToSkip = 3

with open('data.txt', 'r') as _file:
    data = _file.read().splitlines()
    occurrences = [i for i, x in enumerate(data) if "example string" in x]

    _lastOcurrence = 0
    for ocurrence in occurrences:
        _newData.extend(data[_lastOcurrence : ocurrence])
        _lastOcurrence = ocurrence + _linesToSkip 
    _newData.extend(data[_lastOcurrence:])

    # Save new data into the file
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a couple of points that you clearly misunderstand here:</p>
<h1><code>.strip()</code> removes whitespace or given characters:</h1>
<pre><code>&gt;&gt;&gt; print(str.strip.__doc__)
S.strip([chars]) -&gt; str

Return a copy of the string S with leading and trailing
whitespace removed.
If chars is given and not None, remove characters in chars instead.
</code></pre>
<h1>incrementing <code>i</code> doesn't actually do anything:</h1>
<pre><code>&gt;&gt;&gt; for i, _ in enumerate('ignore me'):
...  print(i)
...  i += 10
... 
0
1
2
3
4
5
6
7
8
</code></pre>
<h1>You're assigning to the <code>i</code>th element of the line, which should raise an exception <sub><sup>(that you neglected to tell us about)</sup></sub></h1>
<pre><code>&gt;&gt;&gt; line = 'some text'
&gt;&gt;&gt; line[i] = line.strip()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'str' object does not support item assignment
</code></pre>
<h1>Ultimately...</h1>
<p>You have to <em>write</em> to a file if you want to change its contents. Writing to a file that you're reading from is tricky business. Writing to an alternative file, or just storing the file in memory if it's small enough is a much healthier approach.</p>
<pre><code>search_string = 'example'
lines = []
with open('/tmp/fnord.txt', 'r+') as f:  #`r+` so we can read *and* write to the file
    for line in f:
        line = line.strip()
        if search_string in line:
            print(line)
            for _ in range(5):
                print(next(f).strip())
        else:
            lines.append(line)
    f.seek(0)     # back to the beginning!
    f.truncate()  # goodbye, original lines
    for line in lines:
        print(line, file=f)  # python2 requires `from __future__ import print_function`
</code></pre>
<p>There is a fatal flaw in this approach, though - if the sought after line is any closer than the 6th line from the end, it's going to have problems. I'll leave that as an exercise for the reader.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are appending to your file by using <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow"><code>open</code></a> with 'a'. Also, you are not closing your file (bad habit). <code>str.strip()</code> does not delete the line, it removes whitespace by default. Also, this would usually be done in a loop.</p>
<p>This to get started:</p>
<pre><code>locate = "example string"
n=0
with open('example.txt', 'r+') as f:
    for i,line in enumerate(f):
        if locate in line:
            n = 6
        if n:
            print( line, end='' )
            n-=1

print( "done" )
</code></pre>
<p>Edit:</p>
<p>Read-modify-write solution:</p>
<pre><code>locate = "example string"
filename='example.txt'
removelines=5
with open(filename) as f:
    lines = f.readlines()
with open(filename, 'w') as f:
    n=0
    for line in lines:
        if locate in line:
            n = removelines+1
        if n:
            n-=1
        else:
            f.write(line)
</code></pre>
</div>
<span class="comment-copy">Don't try to modify the original file. Just copy the stuff you want to keep to a new file.</span>
<span class="comment-copy">You haven't run that code, have you? :-)</span>
<span class="comment-copy">I have run the code that's why I came here, I know it doesn't work that was an example of what I was trying to achieve and failing at :)</span>
<span class="comment-copy">Save the lines! <code>with open() as ifile, open() as ofile:</code></span>
