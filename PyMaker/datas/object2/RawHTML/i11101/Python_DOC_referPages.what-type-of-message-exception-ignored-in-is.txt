<div class="post-text" itemprop="text">
<p>Here's code:</p>
<pre><code>def g():
    try:
        yield 1
        yield 2
        yield 3
    except GeneratorExit:
        yield 4

gen = g()
print(gen.__next__())
</code></pre>
<p>If you run it you'll see:</p>
<pre><code>1
Exception ignored in: &lt;generator object g at 0x00000216BB546A98&gt;
RuntimeError: generator ignored GeneratorExit
</code></pre>
<p>I understand what happened, but I can't find what type of message this warning is.</p>
<p>Looks like it's not <code>logging</code> warning (I can't remove it setting logging level). It's also not <code>warnings</code> warning (It doesn't look like what we get when call <code>warnings.warn</code>).</p>
<p>I thought it can be associated with exception, but I can't catch it with <code>sys.excepthook</code>, while msg itself disappears:</p>
<pre><code>import sys

def hook(exc_type, exc_val, tb):
    print(exc_type, exc_val, tb)  # Nothing prints, while msg disappear

sys.excepthook = hook
</code></pre>
<p>How can I catch this warning?</p>
<p>How can I manually create this type of warning?</p>
</div>
<div class="post-text" itemprop="text">
<p>As some have noted, not everyone always gets the behaviour that you describe. For instance, you won't get this behaviour at the REPL. To reproduce this behaviour on the REPL you have to add <code>del gen</code> at the end. This lets us know where the warning is coming. The warning is coming from the clean up function of the generator object, which has noticed that the generator has not exited cleanly. </p>
<p>What specifically has happened is that the generator has raised an exception whilst the interpreter is trying clean up the generator and release its resources. The interpreter has no way to propagate this exception back, so instead it logs this state and carries on. Specifically, <a href="https://docs.python.org/3/c-api/exceptions.html#c.PyErr_WriteUnraisable" rel="nofollow noreferrer">PyErr_WriteUnraisable</a> is is being called. And <a href="https://github.com/python/cpython/blob/fb2c3465f09e1f720cdae7eca87d62125a327fd9/Objects/genobject.c#L90" rel="nofollow noreferrer">here</a> is how it is being called (comments mine).</p>
<pre class="lang-c prettyprint-override"><code>void
_PyGen_Finalize(PyObject *self)
{
    ...

    if (gen is a coroutine) {
        // special error detecting logic for coroutines
    }
    else {
        res = gen_close(gen, NULL); // &lt;- raises GeneratorExit
    }

    if (res == NULL) {
        if (PyErr_Occurred()) {
            PyErr_WriteUnraisable(self);
        }
    }
    else {
        Py_DECREF(res);
    }

    ...
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>when i run your code i just get:</p>
<pre><code>1
&gt;&gt;&gt;
</code></pre>
<p>without error (I also use Python 3.5.1 on windows 10),
but you can use following code to determine error in your code:</p>
<pre><code>try:
    a = int('a')            # here you can put your code
except Exception as e:
    print(e)                # this prints error message   
    print(type(e).__name__) # this prints name of your error
</code></pre>
<p>in this case you get this output:</p>
<pre><code>invalid literal for int() with base 10: 'a'
ValueError
&gt;&gt;&gt;
</code></pre>
<p>so to catch error now you can use:</p>
<pre><code>to_convert = 'a'
try:
    a = int(to_convert)           
except ValueError:
    print(to_convert, 'can\'t be converted to string.')
</code></pre>
<p>by looking at your error message I think you have problem with <code>RuntimeError</code> and not with <code>GeneratorExit</code>.</p>
<p>Hope it helps.</p>
<p>Edit:</p>
<p>As @interjay has said in comments when I ran your code generator object wasn't destroyed at the end so there was no error.</p>
<p>The problem is when python destroys generator object, <code>generator.close()</code> is called which produces your error, when you execute this code:</p>
<pre><code>def g():
    try:
        yield 1
        yield 2
        yield 3
    except GeneratorExit:
        yield 4

gen = g()
print(gen.__next__())
gen.close()
</code></pre>
<p>you get:</p>
<pre><code>RuntimeError: generator ignored GeneratorExit
&gt;&gt;&gt;
</code></pre>
<p>but when generator object is destroyed (deleted) than the exception is in ignored.</p>
<p>To avoid this warning you can call <code>generator.close()</code> in your code and then catch error, so your code should look something like this:</p>
<pre><code>def g():
    try:
        yield 1
        yield 2
        yield 3
    except GeneratorExit:
        yield 4

gen = g()
print(gen.__next__())
try:
    gen.close()
except RuntimeError:
    pass
</code></pre>
</div>
<span class="comment-copy">Which version of Python do you use? I use 3.5.1 and I didn't get that message.</span>
<span class="comment-copy">@thefourtheye Python 3.5.1, windows 10</span>
<span class="comment-copy">See if this thread helps you : <a href="http://stackoverflow.com/questions/18637048/avoid-exception-ignored-in-python-enhanced-generator" title="avoid exception ignored in python enhanced generator">stackoverflow.com/questions/18637048/â€¦</a></span>
<span class="comment-copy">I also get just a <code>1</code>.  It must be the IDE you are using.</span>
<span class="comment-copy">People saying they didn't get the error need to run this as a script so that <code>gen</code> gets destroyed at the end.</span>
<span class="comment-copy">You didn't get the error because you ran the code in the interactive terminal, and therefore the generator object wasn't destroyed at the end. You'd get it if you run this as a script, or add something like <code>del gen</code>.</span>
