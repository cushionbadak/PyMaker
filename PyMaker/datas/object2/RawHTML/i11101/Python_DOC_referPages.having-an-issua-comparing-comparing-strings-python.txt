<div class="post-text" itemprop="text">
<p>Probably there is an easier way to do this, but i read there is no Switch/case in Python. I wanted to ask the user, to introduce a name of a color, and after calling the function that should take care of that, it should return the color code in RGB. My if statements should also accept when the first letter or the whole word is in capital.</p>
<p>The wierd thing that is happening to me is, i keep geting results on my console that makes no sence, i am SURE that there is (somewhere) a mystake from me!</p>
<p>After puting the same input, exacly the same word, the results on the console are not the same.</p>
<p>AT the moment this is my exact code.</p>
<pre><code>import pygame
import sys

from pygame.locals import *

White =(255, 0, 0)
Black = (0, 0, 0)

Red = (255, 0, 0)
Green = (0, 255, 0)
Blue = (0, 0, 255)

Yellow = (255, 255, 0)
Cyan = (0, 255, 255)
Purple = (255, 0, 255)


def set_display():
    pygame.init()
    Display = pygame.display.set_mode((400, 300))
    pygame.display.set_caption('Seda\'s drawing game')


def get_color():
    print('Please introduce one of the following colors')
    print(' \n White \n Black \n Red \n Green \n Blue \n Yellow \n Cyan \n Purple')
    color = input()
    print (color)
    if (color == 'Black') or (color == 'BLACK') or (color == 'black'):
        return Black
    elif (color == 'White') or (color == 'WHITE') or (color == 'white'):
        return White
    elif (color == 'Red') or (color == 'RED') or (color == 'red'):
        return Red
    elif (color == 'Green') or (color == 'GREEN') or (color == 'green'):
        return Green
    elif (color == 'Blue') or (color == 'BLUE') or (color == 'blue'):
        return Blue
    elif (color == 'Yellow') or (color == 'YELLOW') or (color == 'yellow'):
        return Yellow
    elif (color == 'Purple') or (color == 'PURPLE') or (color == 'purple'):
        return Purple
    elif (color == 'Cyan') or (color == 'CYAN') or (color == 'cyan'):
        return Cyan





while True:

#    set_display()
#    for event in pygame.event.get():
#       if event.type == QUIT:
#           pygame.quit()
#           sys.exit()


    final_color = get_color()
    print ( get_color())
    print (final_color)
</code></pre>
<p>Console output:</p>
<pre><code>Please introduce one of the following colors

 White 
 Black 
 Red 
 Green 
 Blue 
 Yellow 
 Cyan 
 Purple
white
white
Please introduce one of the following colors

 White 
 Black 
 Red 
 Green 
 Blue 
 Yellow 
 Cyan 
 Purple
white
white
(255, 0, 0)
(255, 0, 0)
Please introduce one of the following colors

 White 
 Black 
 Red 
 Green 
 Blue 
 Yellow 
 Cyan 
 Purple
White
White
Please introduce one of the following colors

 White 
 Black 
 Red 
 Green 
 Blue 
 Yellow 
 Cyan 
 Purple
White
White
(255, 0, 0)
(255, 0, 0)
Please introduce one of the following colors

 White 
 Black 
 Red 
 Green 
 Blue 
 Yellow 
 Cyan 
 Purple
WHITE
WHITE
Please introduce one of the following colors

 White 
 Black 
 Red 
 Green 
 Blue 
 Yellow 
 Cyan 
 Purple
WHITE
WHITE
(255, 0, 0)
(255, 0, 0)
Please introduce one of the following colors

 White 
 Black 
 Red 
 Green 
 Blue 
 Yellow 
 Cyan 
 Purple
</code></pre>
<p>it seems every 2 times i write something, if gives me back the color RGB code.</p>
<p>what i keep finding hard to understand, is why this:</p>
<pre><code>    final_color = get_color()
    print ( get_color())
    print (final_color)
</code></pre>
<p>is not showing the exact same thing.</p>
<p>Thanks for the help guys</p>
<p>EDDIT1: i found out using extras on those prints, that he is not getting to those 2 last prints. Still to know why..</p>
<p>EDDIT2: i notice my own error.. saying white is (255,0,0) :D</p>
</div>
<div class="post-text" itemprop="text">
<p>The way you return the color could be simplified a lot by doing this. It also fixes your bug.</p>
<pre><code>White =(255, 0, 0)
Black = (0, 0, 0)

Red = (255, 0, 0)
Green = (0, 255, 0)
Blue = (0, 0, 255)

Yellow = (255, 255, 0)
Cyan = (0, 255, 255)
Purple = (255, 0, 255)

colours = {
    'white' : White,
    'black' : Black,
    'red' : Red,
    'green' : Green,
    'blue' : Blue,
    'yellow' : Yellow,
    'cyan' : Cyan,
    'purple' : Purple
}

def get_colour():
    print('Please introduce one of the following colours')
    for key in sorted(colours):
        print(key.capitalize())
    colour = input()
    return colours[colour.lower()]

if __name__ == '__main__': #just added for preference
    while True:
        final_colour = get_colour()
        print(final_colour)
</code></pre>
<p>You should familiarize yourself with <code>lists</code>, <code>dictionaries</code>, and some basic Python functions. They make life a lot easier!</p>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow">https://docs.python.org/3/tutorial/datastructures.html</a></p>
<p>P.S. Your <code>Red</code> and <code>White</code> rgb values are the same.</p>
</div>
<div class="post-text" itemprop="text">
<p>first i'd rewrite the get_color function to something more like this</p>
<pre><code>def get_color():
    print('Please introduce one of the following colors')
    print(' \n White \n Black \n Red \n Green \n Blue \n Yellow \n Cyan \n Purple')
    color = input().lower()
    print (color)
    if color == 'black': return Black
    elif color == 'white': return White
    elif color == 'red': return Red
    elif color == 'green': return Green
    elif color == 'blue': return Blue
    elif color == 'yellow': return Yellow
    elif color == 'purple': return Purple
    elif color == 'cyan': return Cyan
    else: return "Color not found!"
</code></pre>
</div>
<span class="comment-copy">you have lots of print statements but few of them are prefixed with any kind of indication of which print statement is triggering it, try adding information as well like <code>print("get_color()", get_color())</code> for example.</span>
<span class="comment-copy">you call <code>get_color()</code> twice, once to assign to <code>final_color</code> and once in the print statement, so it runs the function twice per loop.</span>
<span class="comment-copy">upvoted, but note that the OP is using Python 3, which means: no <code>raw_input</code></span>
<span class="comment-copy">And by the way, the <code>print('\n White ...')</code> can be rewritten using a for loop over the dictionary keys</span>
<span class="comment-copy">@AndreaCorbellini thanks for pointing that out. Will update the answer</span>
<span class="comment-copy">thanks @ IshanM and @AndreaCorbellini, i just started with pythong some days ago, and between work and normal time wasting, i end up having like 1-2 hours per day. Thanks for the tips. What does this do exacly? "'white' : White" in your colours variable. why the " "? and : ?</span>
<span class="comment-copy">@Fleep it's how Python <code>dictionary</code> syntax works. As I suggested in the answer, you should read up on Python's data structures and in-built functions. I've added a link to such information in the answer.</span>
