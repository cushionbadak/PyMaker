<div class="post-text" itemprop="text">
<p>I have a module with two module variables. I want to path them out for all tests in my file. Initially I did monkey patching but this turned out to be a problem for tests in other files, that require those variables to be intact.
This is something I came up with currently. It's horrible but it works. I'd like to do something that's more "by the book" though (i.e. something that will keep a single indent for all the variables I patch):</p>
<pre><code>@pytest.yield_fixture(autouse=True)
def stub_module_variables():
    with patch.object(my_module, 'old_first_variable', new=new_first_variable):
        with patch.object(my_module, 'old_second_variable', new=new_second_variable):
            yield
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>but I feel like the proper way to do that would be something that keeps a single indent.</p>
</blockquote>
<p><strong>With statement with multiple contexts</strong></p>
<p>You can put several statements into a single <code>with</code></p>
<pre><code>with patch.object(my_module, 'old_first_variable', new=new_first_variable), patch.object(my_module, 'old_second_variable', new=new_second_variable):
    # your code here, single indent
</code></pre>
<p><strong>With statement with multiple context, spanning multiple lines</strong></p>
<p>Obviously your lines can get very long, here's a way to break them down that still complies with PEP8</p>
<pre><code>with patch.object(my_module, 'old_first_variable', new=new_first_variable), \
     patch.object(my_module, 'old_second_variable', new=new_second_variable), \
     patch.object(my_module, 'old_third_variable', new=new_third_variable):
    # Your code here, single indent
    pass
</code></pre>
<p>I ran <code>pep8</code> on a file with above snippet, it passes.</p>
</div>
<span class="comment-copy">why do you that this is horrible?</span>
<span class="comment-copy">I assume you want a pytest specific answer?  (e.g. <i>not</i> a <code>unittest</code> answer?)  If that's the case, we should probably add the <code>pytest</code> tag if there is one ...)</span>
<span class="comment-copy">It indents with every variable I patch. "Horrible" is maybe a wrong word here, but I feel like the proper way to do that would be something that keeps a single indent.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer">with-statement</a> accepts multiple with items.</span>
<span class="comment-copy">I tried this but I get <code>AttributeError: __exit__</code> on the line with second patch</span>
<span class="comment-copy">Hmm that works, but I'm not sure why. Could you explain a bit? Also the syntax makes the indentation a little weird but I'll have to live with it I guess.</span>
<span class="comment-copy">It's explained in the PEP8 link, PEP8 defines style guidelines, and part of it is to have an extra indent to distinguish it from the body of the block.</span>
<span class="comment-copy">@iknownothing Can you use Python 3? There's another way you may like better.</span>
<span class="comment-copy">I didn't mean the indent explanation (I'll live with it). I just don't understad why it doesn't work without the "as" part, but it worked without it when I used nested with statments. I cannot use Python 3 sadly.</span>
