<div class="post-text" itemprop="text">
<p>Honestly, I just don't understand the lingo of "non-zero" status to really interpret what's going on or what that means (it wasn't even defined) on help pages. What are some examples of using python to call other scripts in which these processes of </p>
<p><code>subprocess.call
subprocess.check_output
subprocess.popen</code></p>
<p>really differ from each other?
When would you use either of those, and what are the disambiguated details of these methods? Should I be using os.system instead if I wanted simple OS calls?</p>
</div>
<div class="post-text" itemprop="text">
<p>The main difference is that, while <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="noreferrer"><code>popen</code></a> is a <strong>non-blocking</strong> function (meaning you can continue the execution of the program without waiting the call to finish), both <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="noreferrer"><code>call</code></a> and <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="noreferrer"><code>check_output</code></a> are <strong>blocking</strong>.</p>
<p>The other difference is in what they return:</p>
<ul>
<li><a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="noreferrer"><code>popen</code></a> returns a <code>Popen object</code>.</li>
<li><a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="noreferrer"><code>call</code></a> returns the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.returncode" rel="noreferrer"><code>returncode</code></a> attribute.</li>
<li><a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="noreferrer"><code>check_output</code></a> returns the output of the command execution.</li>
</ul>
<p>The methods <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="noreferrer"><code>call</code></a> and <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="noreferrer"><code>check_output</code></a> are, in fact, <em>blocking</em> wrappers of <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="noreferrer"><code>popen</code></a>, using a <code>Popen object</code>.
For example, you can get the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.returncode" rel="noreferrer"><code>returncode</code></a> attribute by calling <code>Popen.returncode()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To expand on @otorrillas's answer with some examples.</p>
<p>Say you have a short script that you only care whether it succeeds or not*, and you just want to do it now and wait for the result. Say, for example, you want to send a single ping to a remote machine. <code>call</code> is the one for you:</p>
<pre><code>res = call(['ping', '127.0.0.1', '-c', '1', '-W', '1'])
# res is 0 if the ping succeeded, non-zero if it failed. 
</code></pre>
<p>Now say that you have a command you want to assume is going to succeed, and is going to give you some output you want to use for something. <code>check_output</code> is for you. Perhaps a subversion command:</p>
<pre><code>svn_output = check_output(['svn', 'info', path_to_my_working_copy])
# svn_output now contains the svn info output. If it failed, an 
# exception is thrown which more easily allows you to give 
# responsibility of that failure to whoever passed us the wrong 
# path_to_my_working_copy.
</code></pre>
<p>In general, if your use case does not simply fall under one of those categories, you are probably going to wind up using <code>Popen</code>.</p>
<p>One simple use case might be, say you have a daemon process that you want to start, but then run alongside of your python process. Now you use <code>Popen</code>:</p>
<pre><code>my_proc = Popen(['my-daemon'])

# We're going to go and do something else now, but want to make sure
# my_proc dies when we do.
import atexit
atexit.register(my_proc.kill)
</code></pre>
<p><strong>NB:</strong> If you use <code>Popen</code> raw, you must make sure you terminate the process, possibly using an <code>atexit</code> as I have illustrated.    </p>
<p>* "non-zero" exit status just means the process failed. A famous computer science quote attributed to <a href="http://literature.org/authors/tolstoy-leo/anna-karenina/part-01/chapter-01.html" rel="nofollow noreferrer">Tolstoy</a> is "Happy processes are all alike; every unhappy process is unhappy in its own way", i.e. there's only one way for a process to be happy: to return 0. Everything else is unhappy, but there are lots of ways to be unhappy.</p>
</div>
<span class="comment-copy">The following post partially answers your question.  <a href="http://stackoverflow.com/questions/7681715/whats-the-difference-between-subprocess-popen-and-call-how-can-i-use-them" title="whats the difference between subprocess popen and call how can i use them">stackoverflow.com/questions/7681715/â€¦</a></span>
<span class="comment-copy">Did you probably meant call_output in second example ? check_call is not providing an output, only return code I believe.</span>
<span class="comment-copy">thanks @taiko I've fixed that! Although I think the correct function is check_output not call_output. Amazing it took two years for someone to spot it :-)</span>
