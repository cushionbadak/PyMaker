<div class="post-text" itemprop="text">
<p>Is there a general rule that all modules follow?</p>
<p><a href="https://stackoverflow.com/questions/38003030/python-write-xml-without-any-tags-for-empty-deleted-elements">In my case</a>, I'm using <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#reference" rel="nofollow noreferrer">Python xml.etree library</a></p>
<p>Let's say I do this:</p>
<pre><code>for el in root.iter('*'):
    for subel in el:
        el.remove(subel)
</code></pre>
<p>Does that break the <code>el</code> iterator?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are lots of cases where modifying an iterable while iterating over it cause problems.  <a href="https://stackoverflow.com/questions/37702011/removing-an-element-from-a-parsed-xml-tree-disrupts-iteration/37779451#37779451">Here's</a> an example where an XML tree's iteration is messed up when an element is removed during iteration.  There are plenty of questions on stackoverflow where you get surprising results when iterating over a list:</p>
<pre><code>&gt;&gt;&gt; lst = [1, 1, 2, 3]
&gt;&gt;&gt; for item in lst:
...     if item == 1:
...         lst.remove(item)
... 
&gt;&gt;&gt; print(lst)
[1, 2, 3]
</code></pre>
<p>(Note that there is still a <code>1</code> in the output list).</p>
<p>So <strong>the <em>general</em> rule is that you probably shouldn't do anything that would add or remove items while an iterator is doing it's thing.</strong>  If you don't know how the iterator is implemented, this is by far the safest tack.  However, some iterators are documented to work in specific ways.  e.g. take the list example above, it turns out that we <em>can</em> remove the current (or elements at lower indices) if we iterate the list in reverse:</p>
<pre><code>&gt;&gt;&gt; lst = [1, 1, 2, 3]
&gt;&gt;&gt; for item in reversed(lst):
...     if item == 1:
...         lst.remove(item)
... 
&gt;&gt;&gt; print(lst)
[2, 3]
</code></pre>
<p>This is due to certain guarantees that are made by the list iterator.  Note that due to the the general rule I listed above, I wouldn't advise doing this (It'll probably cause your code readers to scratch their heads to try to figure out why you're iterating over it backwards).</p>
<p>For the list case, you'll see people iterating over a copy of a list if they're planning on removing/adding elements, but it's harder to give advice for the general iterator case without knowing more about the constraints of the problem.</p>
</div>
<span class="comment-copy">no ... anyone can implement their own iter that does anything really ... as long as what it returns is iterable</span>
<span class="comment-copy">The rule of thumb is "don't modify anything you're iterating over". It's rare for anyone to provide explicit C++-style iterator invalidation rules.</span>
<span class="comment-copy">@mgilson yes oops.</span>
<span class="comment-copy">@user2357112 how can I test what the specific implementation for any given Python module is? I'm not sure I could since only valid test is "did it fail" cause if nothing failed in this instance doesn't mean it won't fail in some other instance.</span>
<span class="comment-copy">Yes, it is bad <a href="http://stackoverflow.com/questions/37702011/removing-an-element-from-a-parsed-xml-tree-disrupts-iteration/37779451#37779451" title="removing an element from a parsed xml tree disrupts iteration">stackoverflow.com/questions/37702011/â€¦</a> in general</span>
