<div class="post-text" itemprop="text">
<p>I'm mainly a C# developer, but I'm currently working on a project in Python.</p>
<p>How can I represent the equivalent of an Enum in Python?  </p>
</div>
<div class="post-text" itemprop="text">
<p>Enums have been added to Python 3.4 as described in <a href="http://www.python.org/dev/peps/pep-0435/" rel="noreferrer">PEP 435</a>.  It has also been <a href="https://pypi.python.org/pypi/enum34" rel="noreferrer">backported to 3.3, 3.2, 3.1, 2.7, 2.6, 2.5, and 2.4</a> on pypi.  </p>
<p>For more advanced Enum techniques try the <a href="https://pypi.python.org/pypi/aenum" rel="noreferrer">aenum library</a> (2.7, 3.3+, same author as <code>enum34</code>. Code is not perfectly compatible between py2 and py3, e.g. you'll need <a href="https://stackoverflow.com/a/25982264/57461"><code>__order__</code> in python 2</a>).</p>
<ul>
<li>To use <code>enum34</code>, do <code>$ pip install enum34</code></li>
<li>To use <code>aenum</code>, do <code>$ pip install aenum</code></li>
</ul>
<p>Installing <code>enum</code> (no numbers) will install a completely different and incompatible version.</p>
<hr/>
<pre><code>from enum import Enum     # for enum34, or the stdlib version
# from aenum import Enum  # for the aenum version
Animal = Enum('Animal', 'ant bee cat dog')

Animal.ant  # returns &lt;Animal.ant: 1&gt;
Animal['ant']  # returns &lt;Animal.ant: 1&gt; (string lookup)
Animal.ant.name  # returns 'ant' (inverse lookup)
</code></pre>
<p>or equivalently:</p>
<pre><code>class Animal(Enum):
    ant = 1
    bee = 2
    cat = 3
    dog = 4
</code></pre>
<hr/>
<p>In earlier versions, one way of accomplishing enums is:</p>
<pre><code>def enum(**enums):
    return type('Enum', (), enums)
</code></pre>
<p>which is used like so:</p>
<pre><code>&gt;&gt;&gt; Numbers = enum(ONE=1, TWO=2, THREE='three')
&gt;&gt;&gt; Numbers.ONE
1
&gt;&gt;&gt; Numbers.TWO
2
&gt;&gt;&gt; Numbers.THREE
'three'
</code></pre>
<p>You can also easily support automatic enumeration with something like this:</p>
<pre><code>def enum(*sequential, **named):
    enums = dict(zip(sequential, range(len(sequential))), **named)
    return type('Enum', (), enums)
</code></pre>
<p>and used like so:</p>
<pre><code>&gt;&gt;&gt; Numbers = enum('ZERO', 'ONE', 'TWO')
&gt;&gt;&gt; Numbers.ZERO
0
&gt;&gt;&gt; Numbers.ONE
1
</code></pre>
<p>Support for converting the values back to names can be added this way:</p>
<pre><code>def enum(*sequential, **named):
    enums = dict(zip(sequential, range(len(sequential))), **named)
    reverse = dict((value, key) for key, value in enums.iteritems())
    enums['reverse_mapping'] = reverse
    return type('Enum', (), enums)
</code></pre>
<p>This overwrites anything with that name, but it is useful for rendering your enums in output.  It will throw KeyError if the reverse mapping doesn't exist.  With the first example:</p>
<pre><code>&gt;&gt;&gt; Numbers.reverse_mapping['three']
'THREE'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Before PEP 435, Python didn't have an equivalent but you could implement your own.</p>
<p>Myself, I like keeping it simple (I've seen some horribly complex examples on the net), something like this ...</p>
<pre><code>class Animal:
    DOG = 1
    CAT = 2

x = Animal.DOG
</code></pre>
<hr/>
<p>In Python 3.4 (<a href="http://www.python.org/dev/peps/pep-0435/" rel="noreferrer">PEP 435</a>), you can make <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer">Enum</a> the base class.  This gets you a little bit of extra functionality, described in the PEP.  For example, enum members are distinct from integers, and they are composed of a <code>name</code> and a <code>value</code>. </p>
<pre><code>class Animal(Enum):
    DOG = 1
    CAT = 2

print(Animal.DOG)
# &lt;Animal.DOG: 1&gt;

print(Animal.DOG.value)
# 1

print(Animal.DOG.name)
# "DOG"
</code></pre>
<hr/>
<p>If you don't want to type the values, use the following shortcut:</p>
<pre><code>class Animal(Enum):
    DOG, CAT = range(2)
</code></pre>
<hr/>
<p><code>Enum</code> implementations <a href="https://docs.python.org/3/library/enum.html#how-are-enums-different" rel="noreferrer">can be converted to lists and are iterable</a>. The order of its members is the declaration order and has nothing to do with their values. For example: </p>
<pre><code>class Animal(Enum):
    DOG = 1
    CAT = 2
    COW = 0

list(Animal)
# [&lt;Animal.DOG: 1&gt;, &lt;Animal.CAT: 2&gt;, &lt;Animal.COW: 0&gt;]

[animal.value for animal in Animal]
# [1, 2, 0]

Animal.CAT in Animal
# True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is one implementation:</p>
<pre><code>class Enum(set):
    def __getattr__(self, name):
        if name in self:
            return name
        raise AttributeError
</code></pre>
<p>Here is its usage:</p>
<pre><code>Animals = Enum(["DOG", "CAT", "HORSE"])

print(Animals.DOG)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you need the numeric values, here's the quickest way:</p>
<pre><code>dog, cat, rabbit = range(3)
</code></pre>
<p>In Python 3.x you can also add a starred placeholder at the end, which will soak up all the remaining values of the range in case you don't mind wasting memory and cannot count:</p>
<pre><code>dog, cat, rabbit, horse, *_ = range(100)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The best solution for you would depend on what you require from your <em>fake</em> <strong><code>enum</code></strong>.</p>
<p><strong>Simple enum:</strong></p>
<p>If you need the <strong><code>enum</code></strong> as only a list of <em>names</em> identifying different <em>items</em>, the solution by <strong>Mark Harrison</strong> (above) is great:</p>
<pre><code>Pen, Pencil, Eraser = range(0, 3)
</code></pre>
<p>Using a <strong><code>range</code></strong> also allows you to set any <em>starting value</em>:</p>
<pre><code>Pen, Pencil, Eraser = range(9, 12)
</code></pre>
<p>In addition to the above, if you also require that the items belong to a <em>container</em> of some sort, then embed them in a class:</p>
<pre><code>class Stationery:
    Pen, Pencil, Eraser = range(0, 3)
</code></pre>
<p>To use the enum item, you would now need to use the container name and the item name:</p>
<pre><code>stype = Stationery.Pen
</code></pre>
<p><strong>Complex enum:</strong></p>
<p>For long lists of enum or more complicated uses of enum, these solutions will not suffice. You could look to the recipe by Will Ware for <em>Simulating Enumerations in Python</em> published in the <em>Python Cookbook</em>. An online version of that is available <a href="http://code.activestate.com/recipes/67107/" rel="noreferrer">here</a>.</p>
<p><strong>More info:</strong></p>
<p><a href="http://www.python.org/dev/peps/pep-0354/" rel="noreferrer"><em>PEP 354: Enumerations in Python</em></a> has the interesting details of a proposal for enum in Python and why it was rejected.</p>
</div>
<div class="post-text" itemprop="text">
<p>The typesafe enum pattern which was used in Java pre-JDK 5 has a
number of advantages. Much like in Alexandru's answer, you create a
class and class level fields are the enum values; however, the enum
values are instances of the class rather than small integers. This has
the advantage that your enum values don't inadvertently compare equal
to small integers, you can control how they're printed, add arbitrary
methods if that's useful and make assertions using isinstance:</p>
<pre><code>class Animal:
   def __init__(self, name):
       self.name = name

   def __str__(self):
       return self.name

   def __repr__(self):
       return "&lt;Animal: %s&gt;" % self

Animal.DOG = Animal("dog")
Animal.CAT = Animal("cat")

&gt;&gt;&gt; x = Animal.DOG
&gt;&gt;&gt; x
&lt;Animal: dog&gt;
&gt;&gt;&gt; x == 1
False
</code></pre>
<hr/>
<p>A recent <a href="http://mail.python.org/pipermail/python-dev/2010-November/105873.html" rel="noreferrer">thread on python-dev</a> pointed out there are a couple of enum libraries in the wild, including:</p>
<ul>
<li><a href="http://packages.python.org/flufl.enum/docs/using.html" rel="noreferrer">flufl.enum</a></li>
<li><a href="http://pypi.python.org/pypi/lazr.enum" rel="noreferrer">lazr.enum</a></li>
<li>... and the imaginatively named <a href="http://pypi.python.org/pypi/enum/" rel="noreferrer">enum</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>An Enum class can be a one-liner.</p>
<pre><code>class Enum(tuple): __getattr__ = tuple.index
</code></pre>
<p>How to use it (forward and reverse lookup, keys, values, items, etc.)</p>
<pre><code>&gt;&gt;&gt; State = Enum(['Unclaimed', 'Claimed'])
&gt;&gt;&gt; State.Claimed
1
&gt;&gt;&gt; State[1]
'Claimed'
&gt;&gt;&gt; State
('Unclaimed', 'Claimed')
&gt;&gt;&gt; range(len(State))
[0, 1]
&gt;&gt;&gt; [(k, State[k]) for k in range(len(State))]
[(0, 'Unclaimed'), (1, 'Claimed')]
&gt;&gt;&gt; [(k, getattr(State, k)) for k in State]
[('Unclaimed', 0), ('Claimed', 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't have a built-in equivalent to <code>enum</code>, and other answers have ideas for implementing your own (you may also be interested in the <a href="http://code.activestate.com/recipes/67107/" rel="noreferrer">over the top version</a> in the Python cookbook).</p>
<p>However, in situations where an <code>enum</code> would be called for in C, I usually end up <strong><em>just using simple strings</em></strong>: because of the way objects/attributes are implemented, (C)Python is optimized to work very fast with short strings anyway, so there wouldn't really be any performance benefit to using integers. To guard against typos / invalid values you can insert checks in selected places.</p>
<pre><code>ANIMALS = ['cat', 'dog', 'python']

def take_for_a_walk(animal):
    assert animal in ANIMALS
    ...
</code></pre>
<p>(One disadvantage compared to using a class is that you lose the benefit of autocomplete)</p>
</div>
<div class="post-text" itemprop="text">
<p>So, I agree. Let's not enforce type safety in Python, but I would like to protect myself from silly mistakes. So what do we think about this?</p>
<pre><code>class Animal(object):
    values = ['Horse','Dog','Cat']

    class __metaclass__(type):
        def __getattr__(self, name):
            return self.values.index(name)
</code></pre>
<p>It keeps me from value-collision in defining my enums.</p>
<pre><code>&gt;&gt;&gt; Animal.Cat
2
</code></pre>
<p>There's another handy advantage: really fast reverse lookups:</p>
<pre><code>def name_of(self, i):
    return self.values[i]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On 2013-05-10, Guido agreed to accept <a href="http://www.python.org/dev/peps/pep-0435/">PEP 435</a> into the Python 3.4 standard library. This means that Python finally has builtin support for enumerations!</p>
<p>There is a backport available for Python 3.3, 3.2, 3.1, 2.7, 2.6, 2.5, and 2.4.  It's on Pypi as <a href="https://pypi.python.org/pypi/enum34">enum34</a>.</p>
<p>Declaration:</p>
<pre><code>&gt;&gt;&gt; from enum import Enum
&gt;&gt;&gt; class Color(Enum):
...     red = 1
...     green = 2
...     blue = 3
</code></pre>
<p>Representation:</p>
<pre><code>&gt;&gt;&gt; print(Color.red)
Color.red
&gt;&gt;&gt; print(repr(Color.red))
&lt;Color.red: 1&gt;
</code></pre>
<p>Iteration:</p>
<pre><code>&gt;&gt;&gt; for color in Color:
...   print(color)
...
Color.red
Color.green
Color.blue
</code></pre>
<p>Programmatic access:</p>
<pre><code>&gt;&gt;&gt; Color(1)
Color.red
&gt;&gt;&gt; Color['blue']
Color.blue
</code></pre>
<p>For more information, refer to <a href="http://www.python.org/dev/peps/pep-0435/">the proposal</a>. Official documentation will probably follow soon.</p>
</div>
<div class="post-text" itemprop="text">
<p>I prefer to define enums in Python like so:</p>
<pre><code>class Animal:
  class Dog: pass
  class Cat: pass

x = Animal.Dog
</code></pre>
<p>It's more bug-proof than using integers since you don't have to worry about ensuring that the integers are unique (e.g. if you said Dog = 1 and Cat = 1 you'd be screwed).</p>
<p>It's more bug-proof than using strings since you don't have to worry about typos (e.g.
x == "catt" fails silently, but x == Animal.Catt is a runtime exception).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def M_add_class_attribs(attribs):
    def foo(name, bases, dict_):
        for v, k in attribs:
            dict_[k] = v
        return type(name, bases, dict_)
    return foo

def enum(*names):
    class Foo(object):
        __metaclass__ = M_add_class_attribs(enumerate(names))
        def __setattr__(self, name, value):  # this makes it read-only
            raise NotImplementedError
    return Foo()
</code></pre>
<p>Use it like this:  </p>
<pre><code>Animal = enum('DOG', 'CAT')
Animal.DOG # returns 0
Animal.CAT # returns 1
Animal.DOG = 2 # raises NotImplementedError
</code></pre>
<p>if you just want unique symbols and don't care about the values, replace this line:  </p>
<pre><code>__metaclass__ = M_add_class_attribs(enumerate(names))
</code></pre>
<p>with this:</p>
<pre><code>__metaclass__ = M_add_class_attribs((object(), name) for name in names)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Hmmm... I suppose the closest thing to an enum would be a dictionary, defined either like this:</p>
<pre><code>months = {
    'January': 1,
    'February': 2,
    ...
}
</code></pre>
<p>or</p>
<pre><code>months = dict(
    January=1,
    February=2,
    ...
)
</code></pre>
<p>Then, you can use the symbolic name for the constants like this:</p>
<pre><code>mymonth = months['January']
</code></pre>
<p>There are other options, like a list of tuples, or a tuple of tuples, but the dictionary is the only one that provides you with a "symbolic" (constant string) way to access the 
value.</p>
<p>Edit: I like Alexandru's answer too!</p>
</div>
<div class="post-text" itemprop="text">
<p>Another, very simple, implementation of an enum in Python, using <code>namedtuple</code>:</p>
<pre><code>from collections import namedtuple

def enum(*keys):
    return namedtuple('Enum', keys)(*keys)

MyEnum = enum('FOO', 'BAR', 'BAZ')
</code></pre>
<p>or, alternatively,</p>
<pre><code># With sequential number values
def enum(*keys):
    return namedtuple('Enum', keys)(*range(len(keys)))

# From a dict / keyword args
def enum(**kwargs):
    return namedtuple('Enum', kwargs.keys())(*kwargs.values())
</code></pre>
<p>Like the method above that subclasses <code>set</code>, this allows:</p>
<pre><code>'FOO' in MyEnum
other = MyEnum.FOO
assert other == MyEnum.FOO
</code></pre>
<p>But has more flexibility as it can have different keys and values. This allows</p>
<pre><code>MyEnum.FOO &lt; MyEnum.BAR
</code></pre>
<p>to act as is expected if you use the version that fills in sequential number values.</p>
</div>
<div class="post-text" itemprop="text">
<p>What I use:</p>
<pre><code>class Enum(object):
    def __init__(self, names, separator=None):
        self.names = names.split(separator)
        for value, name in enumerate(self.names):
            setattr(self, name.upper(), value)
    def tuples(self):
        return tuple(enumerate(self.names))
</code></pre>
<p>How to use:</p>
<pre><code>&gt;&gt;&gt; state = Enum('draft published retracted')
&gt;&gt;&gt; state.DRAFT
0
&gt;&gt;&gt; state.RETRACTED
2
&gt;&gt;&gt; state.FOO
Traceback (most recent call last):
   File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'Enum' object has no attribute 'FOO'
&gt;&gt;&gt; state.tuples()
((0, 'draft'), (1, 'published'), (2, 'retracted'))
</code></pre>
<p>So this gives you integer constants like state.PUBLISHED and the two-tuples to use as choices in Django models.</p>
</div>
<div class="post-text" itemprop="text">
<p>From Python 3.4 there will be official support for enums. You can find documentation and examples <a href="http://docs.python.org/3.4/library/enum.html" rel="noreferrer">here on Python 3.4 documentation page</a>.</p>
<blockquote>
<p>Enumerations are created using the class syntax, which makes them easy
  to read and write. An alternative creation method is described in
  Functional API. To define an enumeration, subclass Enum as follows:</p>
</blockquote>
<pre><code>from enum import Enum
class Color(Enum):
     red = 1
     green = 2
     blue = 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>davidg recommends using dicts.  I'd go one step further and use sets:</p>
<pre><code>months = set('January', 'February', ..., 'December')
</code></pre>
<p>Now you can test whether a value matches one of the values in the set like this:</p>
<pre><code>if m in months:
</code></pre>
<p>like dF, though, I usually just use string constants in place of enums.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is the best one I have seen: "First Class Enums in Python"</p>
<p><a href="http://code.activestate.com/recipes/413486/" rel="noreferrer"><a href="http://code.activestate.com/recipes/413486/" rel="noreferrer">http://code.activestate.com/recipes/413486/</a></a></p>
<p>It gives you a class, and the class contains all the enums. The enums can be compared to each other, but don't have any particular value; you can't use them as an integer value. (I resisted this at first because I am used to C enums, which are integer values. But if you can't use it as an integer, you can't use it as an integer by mistake so overall I think it is a win.) Each enum is a unique value. You can print enums, you can iterate over them, you can test that an enum value is "in" the enum. It's pretty complete and slick.</p>
<p>Edit (cfi): The above link is not Python 3 compatible. Here's my port of enum.py to Python 3:</p>
<pre><code>def cmp(a,b):
   if a &lt; b: return -1
   if b &lt; a: return 1
   return 0


def Enum(*names):
   ##assert names, "Empty enums are not supported" # &lt;- Don't like empty enums? Uncomment!

   class EnumClass(object):
      __slots__ = names
      def __iter__(self):        return iter(constants)
      def __len__(self):         return len(constants)
      def __getitem__(self, i):  return constants[i]
      def __repr__(self):        return 'Enum' + str(names)
      def __str__(self):         return 'enum ' + str(constants)

   class EnumValue(object):
      __slots__ = ('__value')
      def __init__(self, value): self.__value = value
      Value = property(lambda self: self.__value)
      EnumType = property(lambda self: EnumType)
      def __hash__(self):        return hash(self.__value)
      def __cmp__(self, other):
         # C fans might want to remove the following assertion
         # to make all enums comparable by ordinal value {;))
         assert self.EnumType is other.EnumType, "Only values from the same enum are comparable"
         return cmp(self.__value, other.__value)
      def __lt__(self, other):   return self.__cmp__(other) &lt; 0
      def __eq__(self, other):   return self.__cmp__(other) == 0
      def __invert__(self):      return constants[maximum - self.__value]
      def __nonzero__(self):     return bool(self.__value)
      def __repr__(self):        return str(names[self.__value])

   maximum = len(names) - 1
   constants = [None] * len(names)
   for i, each in enumerate(names):
      val = EnumValue(i)
      setattr(EnumClass, each, val)
      constants[i] = val
   constants = tuple(constants)
   EnumType = EnumClass()
   return EnumType


if __name__ == '__main__':
   print( '\n*** Enum Demo ***')
   print( '--- Days of week ---')
   Days = Enum('Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su')
   print( Days)
   print( Days.Mo)
   print( Days.Fr)
   print( Days.Mo &lt; Days.Fr)
   print( list(Days))
   for each in Days:
      print( 'Day:', each)
   print( '--- Yes/No ---')
   Confirmation = Enum('No', 'Yes')
   answer = Confirmation.No
   print( 'Your answer is not', ~answer)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Keep it simple:</p>
<pre><code>class Enum(object): 
    def __init__(self, tupleList):
            self.tupleList = tupleList

    def __getattr__(self, name):
            return self.tupleList.index(name)
</code></pre>
<p>Then:</p>
<pre><code>DIRECTION = Enum(('UP', 'DOWN', 'LEFT', 'RIGHT'))
DIRECTION.DOWN
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have had occasion to need of an Enum class, for the purpose of decoding a binary file format. The features I happened to want is concise enum definition, the ability to freely create instances of the enum by either integer value or string, and a useful <code>repr</code>esentation.  Here's what I ended up with:</p>
<pre><code>&gt;&gt;&gt; class Enum(int):
...     def __new__(cls, value):
...         if isinstance(value, str):
...             return getattr(cls, value)
...         elif isinstance(value, int):
...             return cls.__index[value]
...     def __str__(self): return self.__name
...     def __repr__(self): return "%s.%s" % (type(self).__name__, self.__name)
...     class __metaclass__(type):
...         def __new__(mcls, name, bases, attrs):
...             attrs['__slots__'] = ['_Enum__name']
...             cls = type.__new__(mcls, name, bases, attrs)
...             cls._Enum__index = _index = {}
...             for base in reversed(bases):
...                 if hasattr(base, '_Enum__index'):
...                     _index.update(base._Enum__index)
...             # create all of the instances of the new class
...             for attr in attrs.keys():
...                 value = attrs[attr]
...                 if isinstance(value, int):
...                     evalue = int.__new__(cls, value)
...                     evalue._Enum__name = attr
...                     _index[value] = evalue
...                     setattr(cls, attr, evalue)
...             return cls
... 
</code></pre>
<p>A whimsical example of using it:</p>
<pre><code>&gt;&gt;&gt; class Citrus(Enum):
...     Lemon = 1
...     Lime = 2
... 
&gt;&gt;&gt; Citrus.Lemon
Citrus.Lemon
&gt;&gt;&gt; 
&gt;&gt;&gt; Citrus(1)
Citrus.Lemon
&gt;&gt;&gt; Citrus(5)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 6, in __new__
KeyError: 5
&gt;&gt;&gt; class Fruit(Citrus):
...     Apple = 3
...     Banana = 4
... 
&gt;&gt;&gt; Fruit.Apple
Fruit.Apple
&gt;&gt;&gt; Fruit.Lemon
Citrus.Lemon
&gt;&gt;&gt; Fruit(1)
Citrus.Lemon
&gt;&gt;&gt; Fruit(3)
Fruit.Apple
&gt;&gt;&gt; "%d %s %r" % ((Fruit.Apple,)*3)
'3 Apple Fruit.Apple'
&gt;&gt;&gt; Fruit(1) is Citrus.Lemon
True
</code></pre>
<p>Key features:</p>
<ul>
<li><code>str()</code>, <code>int()</code> and <code>repr()</code> all produce the most useful output possible, respectively the name of the enumartion, its integer value, and a Python expression that evaluates back to the enumeration.</li>
<li>Enumerated values returned by the constructor are limited strictly to the predefined values, no accidental enum values.</li>
<li>Enumerated values are singletons; they can be strictly compared with <code>is</code></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I really like Alec Thomas' solution (http://stackoverflow.com/a/1695250):</p>
<pre><code>def enum(**enums):
    '''simple constant "enums"'''
    return type('Enum', (object,), enums)
</code></pre>
<p>It's elegant and clean looking, but it's just a function that creates a class with the specified attributes.</p>
<p>With a little modification to the function, we can get it to act a little more 'enumy':</p>
<blockquote>
<p>NOTE: I created the following examples by trying to reproduce the
  behavior of pygtk's new style 'enums' (like Gtk.MessageType.WARNING)</p>
</blockquote>
<pre><code>def enum_base(t, **enums):
    '''enums with a base class'''
    T = type('Enum', (t,), {})
    for key,val in enums.items():
        setattr(T, key, T(val))

    return T
</code></pre>
<p>This creates an enum based off a specified type. In addition to giving attribute access like the previous function, it behaves as you would expect an Enum to with respect to types.  It also inherits the base class.</p>
<p>For example, integer enums:</p>
<pre><code>&gt;&gt;&gt; Numbers = enum_base(int, ONE=1, TWO=2, THREE=3)
&gt;&gt;&gt; Numbers.ONE
1
&gt;&gt;&gt; x = Numbers.TWO
&gt;&gt;&gt; 10 + x
12
&gt;&gt;&gt; type(Numbers)
&lt;type 'type'&gt;
&gt;&gt;&gt; type(Numbers.ONE)
&lt;class 'Enum'&gt;
&gt;&gt;&gt; isinstance(x, Numbers)
True
</code></pre>
<p>Another interesting thing that can be done with this method is customize specific behavior by overriding built-in methods:</p>
<pre><code>def enum_repr(t, **enums):
    '''enums with a base class and repr() output'''
    class Enum(t):
        def __repr__(self):
            return '&lt;enum {0} of type Enum({1})&gt;'.format(self._name, t.__name__)

    for key,val in enums.items():
        i = Enum(val)
        i._name = key
        setattr(Enum, key, i)

    return Enum



&gt;&gt;&gt; Numbers = enum_repr(int, ONE=1, TWO=2, THREE=3)
&gt;&gt;&gt; repr(Numbers.ONE)
'&lt;enum ONE of type Enum(int)&gt;'
&gt;&gt;&gt; str(Numbers.ONE)
'1'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The new standard in Python is <a href="http://www.python.org/dev/peps/pep-0435/" rel="noreferrer">PEP 435</a>, so an Enum class will be available in future versions of Python:</p>
<pre><code>&gt;&gt;&gt; from enum import Enum
</code></pre>
<p>However to begin using it now you can install the <a href="http://bazaar.launchpad.net/~barry/flufl.enum/trunk/view/head:/flufl/enum/README.rst" rel="noreferrer">original library</a> that motivated the PEP:</p>
<pre><code>#sudo pip install flufl.enum   //or #sudo easy_install flufl.enum
</code></pre>
<p>Then you <a href="http://pythonhosted.org/flufl.enum/docs/using.html" rel="noreferrer">can use it as per its online guide</a>:</p>
<pre><code>&gt;&gt;&gt; from flufl.enum import Enum
&gt;&gt;&gt; class Colors(Enum):
...     red = 1
...     green = 2
...     blue = 3
&gt;&gt;&gt; for color in Colors: print color
Colors.red
Colors.green
Colors.blue
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def enum(*sequential, **named):
    enums = dict(zip(sequential, [object() for _ in range(len(sequential))]), **named)
    return type('Enum', (), enums)
</code></pre>
<p>If you name it, is your problem, but if not creating objects instead of values allows you to do this:</p>
<pre><code>&gt;&gt;&gt; DOG = enum('BARK', 'WALK', 'SIT')
&gt;&gt;&gt; CAT = enum('MEOW', 'WALK', 'SIT')
&gt;&gt;&gt; DOG.WALK == CAT.WALK
False
</code></pre>
<p>When using other implementations sited here (also when using named instances in my example) you must be sure you never try to compare objects from different enums. For here's a possible pitfall:</p>
<pre><code>&gt;&gt;&gt; DOG = enum('BARK'=1, 'WALK'=2, 'SIT'=3)
&gt;&gt;&gt; CAT = enum('WALK'=1, 'SIT'=2)
&gt;&gt;&gt; pet1_state = DOG.BARK
&gt;&gt;&gt; pet2_state = CAT.WALK
&gt;&gt;&gt; pet1_state == pet2_state
True
</code></pre>
<p>Yikes!</p>
</div>
<div class="post-text" itemprop="text">
<p>The enum package from <a href="http://en.wikipedia.org/wiki/Python_Package_Index" rel="noreferrer">PyPI</a> provides a robust implementation of enums. An earlier answer mentioned PEP 354; this was rejected but the proposal was implemented 
<a href="http://pypi.python.org/pypi/enum" rel="noreferrer">http://pypi.python.org/pypi/enum</a>.</p>
<p>Usage is easy and elegant:</p>
<pre><code>&gt;&gt;&gt; from enum import Enum
&gt;&gt;&gt; Colors = Enum('red', 'blue', 'green')
&gt;&gt;&gt; shirt_color = Colors.green
&gt;&gt;&gt; shirt_color = Colors[2]
&gt;&gt;&gt; shirt_color &gt; Colors.red
True
&gt;&gt;&gt; shirt_color.index
2
&gt;&gt;&gt; str(shirt_color)
'green'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alexandru's suggestion of using class constants for enums works quite well. </p>
<p>I also like to add a dictionary for each set of constants to lookup a human-readable string representation. </p>
<p>This serves two purposes: a) it provides a simple way to pretty-print your enum and b) the dictionary logically groups the constants so that you can test for membership.</p>
<pre><code>class Animal:    
  TYPE_DOG = 1
  TYPE_CAT = 2

  type2str = {
    TYPE_DOG: "dog",
    TYPE_CAT: "cat"
  }

  def __init__(self, type_):
    assert type_ in self.type2str.keys()
    self._type = type_

  def __repr__(self):
    return "&lt;%s type=%s&gt;" % (
        self.__class__.__name__, self.type2str[self._type].upper())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a variant on <a href="https://stackoverflow.com/questions/36932/whats-the-best-way-to-implement-an-enum-in-python/1695250#1695250">Alec Thomas's solution</a>:</p>
<pre><code>def enum(*args, **kwargs):
    return type('Enum', (), dict((y, x) for x, y in enumerate(args), **kwargs)) 

x = enum('POOH', 'TIGGER', 'EEYORE', 'ROO', 'PIGLET', 'RABBIT', 'OWL')
assert x.POOH == 0
assert x.TIGGER == 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This solution is a simple way of getting a class for the enumeration defined as a list (no more annoying integer assignments):</p>
<p>enumeration.py:</p>
<pre><code>import new

def create(class_name, names):
    return new.classobj(
        class_name, (object,), dict((y, x) for x, y in enumerate(names))
    )
</code></pre>
<p>example.py:</p>
<pre><code>import enumeration

Colors = enumeration.create('Colors', (
    'red',
    'orange',
    'yellow',
    'green',
    'blue',
    'violet',
))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While the original enum proposal, <a href="http://www.python.org/dev/peps/pep-0354/" rel="nofollow">PEP 354</a>, was rejected years ago, it keeps coming back up. Some kind of enum was intended to be added to 3.2, but it got pushed back to 3.3 and then forgotten. And now there's a <a href="http://www.python.org/dev/peps/pep-0435/" rel="nofollow">PEP 435</a> intended for inclusion in Python 3.4. The reference implementation of PEP 435 is <a href="http://pythonhosted.org/flufl.enum/docs/using.html" rel="nofollow"><code>flufl.enum</code></a>.</p>
<p>As of April 2013, there seems to be a general consensus that <em>something</em> should be added to the standard library in 3.4—as long as people can agree on what that "something" should be. That's the hard part. See the threads starting <a href="http://mail.python.org/pipermail/python-ideas/2013-January/019003.html" rel="nofollow">here</a> and <a href="http://mail.python.org/pipermail/python-ideas/2013-February/019332.html" rel="nofollow">here</a>, and a half dozen other threads in the early months of 2013.</p>
<p>Meanwhile, every time this comes up, a slew of new designs and implementations appear on PyPI, ActiveState, etc., so if you don't like the FLUFL design, try a <a href="https://pypi.python.org/pypi?%3aaction=search&amp;term=enum&amp;submit=search" rel="nofollow">PyPI search</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an approach with some different characteristics I find valuable:</p>
<ul>
<li>allows &gt; and &lt; comparison based on order in enum, not lexical order</li>
<li>can address item by name, property or index: x.a, x['a'] or x[0]</li>
<li>supports slicing operations like [:] or [-1]</li>
</ul>
<p>and most importantly <strong>prevents comparisons between enums of different types</strong>!</p>
<p>Based closely on <a href="http://code.activestate.com/recipes/413486-first-class-enums-in-python" rel="nofollow">http://code.activestate.com/recipes/413486-first-class-enums-in-python</a>.</p>
<p>Many doctests included here to illustrate what's different about this approach.</p>
<pre><code>def enum(*names):
    """
SYNOPSIS
    Well-behaved enumerated type, easier than creating custom classes

DESCRIPTION
    Create a custom type that implements an enumeration.  Similar in concept
    to a C enum but with some additional capabilities and protections.  See
    http://code.activestate.com/recipes/413486-first-class-enums-in-python/.

PARAMETERS
    names       Ordered list of names.  The order in which names are given
                will be the sort order in the enum type.  Duplicate names
                are not allowed.  Unicode names are mapped to ASCII.

RETURNS
    Object of type enum, with the input names and the enumerated values.

EXAMPLES
    &gt;&gt;&gt; letters = enum('a','e','i','o','u','b','c','y','z')
    &gt;&gt;&gt; letters.a &lt; letters.e
    True

    ## index by property
    &gt;&gt;&gt; letters.a
    a

    ## index by position
    &gt;&gt;&gt; letters[0]
    a

    ## index by name, helpful for bridging string inputs to enum
    &gt;&gt;&gt; letters['a']
    a

    ## sorting by order in the enum() create, not character value
    &gt;&gt;&gt; letters.u &lt; letters.b
    True

    ## normal slicing operations available
    &gt;&gt;&gt; letters[-1]
    z

    ## error since there are not 100 items in enum
    &gt;&gt;&gt; letters[99]
    Traceback (most recent call last):
        ...
    IndexError: tuple index out of range

    ## error since name does not exist in enum
    &gt;&gt;&gt; letters['ggg']
    Traceback (most recent call last):
        ...
    ValueError: tuple.index(x): x not in tuple

    ## enums must be named using valid Python identifiers
    &gt;&gt;&gt; numbers = enum(1,2,3,4)
    Traceback (most recent call last):
        ...
    AssertionError: Enum values must be string or unicode

    &gt;&gt;&gt; a = enum('-a','-b')
    Traceback (most recent call last):
        ...
    TypeError: Error when calling the metaclass bases
        __slots__ must be identifiers

    ## create another enum
    &gt;&gt;&gt; tags = enum('a','b','c')
    &gt;&gt;&gt; tags.a
    a
    &gt;&gt;&gt; letters.a
    a

    ## can't compare values from different enums
    &gt;&gt;&gt; letters.a == tags.a
    Traceback (most recent call last):
        ...
    AssertionError: Only values from the same enum are comparable

    &gt;&gt;&gt; letters.a &lt; tags.a
    Traceback (most recent call last):
        ...
    AssertionError: Only values from the same enum are comparable

    ## can't update enum after create
    &gt;&gt;&gt; letters.a = 'x'
    Traceback (most recent call last):
        ...
    AttributeError: 'EnumClass' object attribute 'a' is read-only

    ## can't update enum after create
    &gt;&gt;&gt; del letters.u
    Traceback (most recent call last):
        ...
    AttributeError: 'EnumClass' object attribute 'u' is read-only

    ## can't have non-unique enum values
    &gt;&gt;&gt; x = enum('a','b','c','a')
    Traceback (most recent call last):
        ...
    AssertionError: Enums must not repeat values

    ## can't have zero enum values
    &gt;&gt;&gt; x = enum()
    Traceback (most recent call last):
        ...
    AssertionError: Empty enums are not supported

    ## can't have enum values that look like special function names
    ## since these could collide and lead to non-obvious errors
    &gt;&gt;&gt; x = enum('a','b','c','__cmp__')
    Traceback (most recent call last):
        ...
    AssertionError: Enum values beginning with __ are not supported

LIMITATIONS
    Enum values of unicode type are not preserved, mapped to ASCII instead.

    """
    ## must have at least one enum value
    assert names, 'Empty enums are not supported'
    ## enum values must be strings
    assert len([i for i in names if not isinstance(i, types.StringTypes) and not \
        isinstance(i, unicode)]) == 0, 'Enum values must be string or unicode'
    ## enum values must not collide with special function names
    assert len([i for i in names if i.startswith("__")]) == 0,\
        'Enum values beginning with __ are not supported'
    ## each enum value must be unique from all others
    assert names == uniquify(names), 'Enums must not repeat values'

    class EnumClass(object):
        """ See parent function for explanation """

        __slots__ = names

        def __iter__(self):
            return iter(constants)

        def __len__(self):
            return len(constants)

        def __getitem__(self, i):
            ## this makes xx['name'] possible
            if isinstance(i, types.StringTypes):
                i = names.index(i)
            ## handles the more normal xx[0]
            return constants[i]

        def __repr__(self):
            return 'enum' + str(names)

        def __str__(self):
            return 'enum ' + str(constants)

        def index(self, i):
            return names.index(i)

    class EnumValue(object):
        """ See parent function for explanation """

        __slots__ = ('__value')

        def __init__(self, value):
            self.__value = value

        value = property(lambda self: self.__value)

        enumtype = property(lambda self: enumtype)

        def __hash__(self):
            return hash(self.__value)

        def __cmp__(self, other):
            assert self.enumtype is other.enumtype, 'Only values from the same enum are comparable'
            return cmp(self.value, other.value)

        def __invert__(self):
            return constants[maximum - self.value]

        def __nonzero__(self):
            ## return bool(self.value)
            ## Original code led to bool(x[0])==False, not correct
            return True

        def __repr__(self):
            return str(names[self.value])

    maximum = len(names) - 1
    constants = [None] * len(names)
    for i, each in enumerate(names):
        val = EnumValue(i)
        setattr(EnumClass, each, val)
        constants[i] = val
    constants = tuple(constants)
    enumtype = EnumClass()
    return enumtype
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had need of some symbolic constants in pyparsing to represent left and right associativity of binary operators.  I used class constants like this:</p>
<pre><code># an internal class, not intended to be seen by client code
class _Constants(object):
    pass


# an enumeration of constants for operator associativity
opAssoc = _Constants()
opAssoc.LEFT = object()
opAssoc.RIGHT = object()
</code></pre>
<p>Now when client code wants to use these constants, they can import the entire enum using:</p>
<pre><code>import opAssoc from pyparsing
</code></pre>
<p>The enumerations are unique, they can be tested with 'is' instead of '==', they don't take up a big footprint in my code for a minor concept, and they are easily imported into the client code.  They don't support any fancy str() behavior, but so far that is in the <a href="http://c2.com/xp/YouArentGonnaNeedIt.html" rel="nofollow noreferrer">YAGNI</a> category.</p>
</div>
<span class="comment-copy">+1 for a none-to-novel approach to using <code>type()</code> <a href="http://docs.python.org/library/functions.html#type" rel="nofollow noreferrer">docs.python.org/library/functions.html#type</a></span>
<span class="comment-copy">Ingenious solution! I wonder if/how it could be made to print the name of the identifiers when debugging? For example, having <code>print "The value is %r" % Numbers.ONE</code> output <code>The value is ONE</code> instead of <code>The value is 1</code>...</span>
<span class="comment-copy">Note that this isn't really that similar to a C enum, in that one cannot meaningfully have variables/objects of a type returned by <code>enum</code>.</span>
<span class="comment-copy">Oh, I noticed a slight improvement that could be made.  <code>zip(x, range(len(x))</code> is a code smell - it can be replaced by enumerate to get <code>enums = dict((x, i) for i, x in enumerate(sequential)), **named)</code> which doesn't construct all those lists that zip/range do.</span>
<span class="comment-copy">The problem with <code>enum</code> package is that its enum types don't survive pickling-unpickling. Create an enumaration <code>Foo = Enum("foo", "bar")</code>, then compare <code>pickle.loads(pickle.dumps(Foo.foo)) == Foo.foo</code>; the result is <code>False</code>. It hurts when you have a multiprocessing program, because seemingly equal values stop passing equality check.</span>
<span class="comment-copy">No, it's a class variable.</span>
<span class="comment-copy">Python is dynamic by default. There's no valid reason to enforce compile-time safety in a language like Python, especially when there is none.  And another thing ... a good pattern is only good in the context in which it was created. A good pattern can also be superseded or completely useless, depending on the tools you're using.</span>
<span class="comment-copy">@Longpoke if you have 100 values, then you're definitely doing something wrong ;)  I like numbers associated with my enums ... they are easy to write (vs strings), can be easily persisted in a database, and are compatible with the C/C++ enum, which makes for easier marshaling.</span>
<span class="comment-copy">I use this, with the numbers replaced by <code>object()</code>.</span>
<span class="comment-copy">The original PEP354 is no longer merely rejected, but is now marked superseded. PEP435 adds a standard Enum for Python 3.4. See <a href="http://www.python.org/dev/peps/pep-0435/" rel="nofollow noreferrer">python.org/dev/peps/pep-0435</a></span>
<span class="comment-copy">Excellent. This can be further improved by overriding <code>__setattr__(self, name, value)</code> and maybe <code>__delattr__(self, name)</code> so that if you accidentally write <code>Animals.DOG = CAT</code>, it won't silently succeed.</span>
<span class="comment-copy">@shahjapan: Interesting, but relatively slow: a test is done for each access like <code>Animals.DOG</code>; also, the values of the constats are strings, so that comparisons with these constants are slower than if, say, integers were allowed as values.</span>
<span class="comment-copy">@shahjapan: I would argue that this solution is not as legible as the shorter solutions of Alexandru or Mark, for instance.  It's an interesting solution, though. :)</span>
<span class="comment-copy">I tried using <code>setattr()</code> function inside <code>__init__()</code> method instead of overidding <code>__getattr__()</code> method. I am assume this is  supposed work the same way:      class Enum(object):         def __init__(self, enum_string_list):             if type(enum_string_list) == list:                 for enum_string in enum_string_list:                     setattr(self, enum_string, enum_string)             else:                 raise AttributeError</span>
<span class="comment-copy">@AndréTerra: how do you check for set membership in a <code>try-except</code> block?</span>
<span class="comment-copy">But this might take more memory!</span>
<span class="comment-copy">with <code>range</code> you can omit the first argument if it's 0</span>
<span class="comment-copy">Another fake enum that suits some purposes is <code>my_enum = dict(map(reversed, enumerate(str.split('Item0 Item1 Item2'))))</code>. Then <code>my_enum</code> can be used in look-up, e.g., <code>my_enum['Item0']</code> can be an index into a sequence. You might want to wrap the result of <code>str.split</code> in a function that throws an exception if there are any duplicates.</span>
<span class="comment-copy">I think this is a very bad approach.   Animal.DOG = Animal("dog") Animal.DOG2 = Animal("dog") assert Animal.DOG == Animal.DOG2   fails...</span>
<span class="comment-copy">@Confusion The user isn't supposed to call the constructor, the fact that there's even a constructor is an implementation detail and you have to communicate to who ever is using your code that making new enumeration values makes no sense and that exiting code will not "do the right thing". Of course that doesn't stop you from implementing Animal.from_name("dog") --&gt; Animal.DOG.</span>
<span class="comment-copy">"the advantage that your enum values don't inadvertently compare equal to small integers" What's the advantage in this? What's wrong with comparing your enum to integers? Especially if you store the enum in the database, you usually want it to be stored as integers, so you'll have to compare it to integers at some point.</span>
<span class="comment-copy">@Aaaron Maenpaa. correct. It's still a broken and overly complicated way to do it.</span>
<span class="comment-copy">@AaronMcSmooth That really depends on whether you're coming in from the C perspective of "Enums are just names for a couple of ints" or the more object oriented approach where enum values are actual objects and have methods (which is how enums in Java 1.5 are, and which the type safe enum pattern was going for). Personally, I don't like switch statements so I lean towards enum values that are actual objects.</span>
<span class="comment-copy">I think it is the simplest end most elegant solution. In python 2.4 ( yes, old legacy server ) tuples haven't index. I solved replacing with list.</span>
<span class="comment-copy">I tried this in a Jupyter notebook and discovered that it wouldn't work as a one-line definition, but that putting the <b>getattr</b> definition on a second (indented) line would be accepted.</span>
<span class="comment-copy">I prefer this solution. I like to use built-in types where possible.</span>
<span class="comment-copy">That version isn't really over the top. It just has a lot of supplied testing code</span>
<span class="comment-copy">Actually, the "correct" version is in the comments and is much more complex - the main version has a minor bug.</span>
<span class="comment-copy">I like this, but you might as well lock values in for efficiency with a tuple? I played around with it and came up with a version that sets self.values from args in <b>init</b>. It is nice to be able to declare <code>Animal = Enum('horse', 'dog', 'cat')</code>.  I also catch the ValueError in <b>getattr</b> in the event of a missing item in self.values -- it seems better to raise an AttributeError with the supplied name string instead. I couldn't get the metaclass to work in Python 2.7 based on my limited knowledge in that area, but my custom Enum class works fine with straight instance methods.</span>
<span class="comment-copy">IMHO it would be cleaner if you changed <code>enum(names)</code> to <code>enum(*names)</code> - then you could drop the extra parenthesis when calling it.</span>
<span class="comment-copy">I like this approach. I actually changed it to set the attribute value to the same string as the name, which has the nice property that Animal.DOG == 'DOG', so they stringify themselves for you automatically. (Helps immensely for printing out debug output.)</span>
<span class="comment-copy">And most of all you can easily iterate on a dictionary if you need to access its values like you need its string values to appear as combo box items. So use a dictionary as a replacement for enumerations instead.</span>
<span class="comment-copy">Back porting is now supported as well. This is the way to go.</span>
<span class="comment-copy">yep!, much better if u inherit set and provide <b>getattr</b> method !</span>
<span class="comment-copy">This recipe was used as the basis for a PEP, which was rejected.  <a href="http://www.python.org/dev/peps/pep-0354/" rel="nofollow noreferrer">python.org/dev/peps/pep-0354</a>  One extension that I like: enum values should have a member variable that lets you get the internal integer value out.  It shouldn't be possible to cast an enum to an integer by mistake, so the <code>.__int__()</code> method should raise an exception for an enum; but there should be a way to get the value out.  And it should be possible to set specific integer values in at class definition time, so you could use an enum for things like the constants in the  <code>stat</code> module.</span>
<span class="comment-copy">I really like the use of a superclass with its own metaclass, to make it easy to define enums.  What's missing here is a __contains__ method. I'd like to be able to check that a given variable is part of the enum - mostly because I want the enums for allowable values of a function parameter.</span>
<span class="comment-copy">This is actually a slightly trimmed version of the one I originally created (which you can find here: <a href="https://gitorious.org/yumbits/yumbits/blobs/master/enum_strict.py" rel="nofollow noreferrer">enum_strict.py</a> )v which defines a <code>__instancecheck__</code> method.  Classes are not collections of instances, so <code>1 in Fruit</code> is absurd.  However, the linked version supports <code>isinstance(1, Fruit)</code> which would be more correct in terms of the notion of classes and instances.</span>
<span class="comment-copy">But forgetting classes and thinking in terms of enums, then it makes sense to think of them as a collection.  For example, I might have an enum of file opening modes (MODE.OPEN, MODE.WRITE, etc).  I want to verify the parameters to my function:  <b>if mode in MODE:</b> reads a lot better than <b>isintance(mode, Mode)</b></span>
<span class="comment-copy">I have put up something very similar, which supports more than just ints, and is documented and tested, on GitHub: <a href="https://github.com/hmeine/named_constants" rel="nofollow noreferrer">github.com/hmeine/named_constants</a></span>
<span class="comment-copy">this "base" type idea is neat :)</span>
<span class="comment-copy">yea, note that you can also do this with the new Python 3.4 Enum: <a href="http://www.python.org/dev/peps/pep-0435/#other-derived-enumerations" rel="nofollow noreferrer">python.org/dev/peps/pep-0435/#other-derived-enumerations</a></span>
<span class="comment-copy">This is a really old-timey way to create classes. Why not simply use <code>type(class_name, (object,), dict(...))</code> instead?</span>
