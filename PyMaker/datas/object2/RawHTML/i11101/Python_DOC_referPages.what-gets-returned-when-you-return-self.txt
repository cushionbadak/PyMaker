<div class="post-text" itemprop="text">
<p>what gets returned when you return 'self' inside a python class?  where do we exactly use return 'self'? In the below example what does self exactly returns   </p>
<pre><code>class Fib:
'''iterator that yields numbers in the Fibonacci sequence'''

    def __init__(self, max):
        self.max = max

    def __iter__(self):
        self.a = 0
        self.b = 1
        return self

    def __next__(self):
        fib = self.a
        if fib &gt; self.max:
            raise StopIteration
        self.a, self.b = self.b, self.a + self.b
        print(self.a,self.b,self.c)
        return fib
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The keyword <code>self</code> is used to refer to the instance that you are calling the method from.</p>
<p>This is particularly useful for <a href="https://en.wikipedia.org/wiki/Method_chaining#Python" rel="nofollow">chaining</a>. In your example, let's say we want to call <code>__next__()</code> on an initialized <code>Fib</code> instance. Since <code>__iter__()</code> returns <code>self</code>, the following are equivalent :</p>
<pre><code>obj = Fib(5)
obj.__iter__() # Initialize obj 
obj.__next__()
</code></pre>
<p>And</p>
<pre><code>obj = Fib(5).__iter__() # Create AND initialize obj
obj.__next__()
</code></pre>
<p>In your particular example, the <code>self</code> keyword returns the instance of the <code>Fib</code> class from which you are calling <code>__iter__()</code> (called <code>obj</code> in my small snippet).</p>
<p>Hope it'll be helpful.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python treats method calls like <code>object.method()</code> approximately like <code>method(object)</code>. <a href="https://docs.python.org/3/tutorial/classes.html#method-objects" rel="nofollow">The docs</a> say that "call <code>x.f()</code> is exactly equivalent to <code>MyClass.f(x)</code>". This means that a method will receive the object as the first argument. By convention in the definition of methods, this first argument is called <code>self</code>.</p>
<p>So <code>self</code> is the conventional name of the object owning the method.</p>
<p>Now, why would we want to return <code>self</code>? In your particular example, it is because the object implements the <a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow">iterator protocol</a>, which basically means it has <code>__iter__</code> and <code>__next__</code> methods. The <code>__iter__</code> method must (according to the docs) "Return the iterator object itself", which is exactly what is happening here.</p>
<p>As an aside, another common reason for returning <code>self</code> is to support <a href="https://en.wikipedia.org/wiki/Method_chaining" rel="nofollow">method chaining</a>, where you would want to do <code>object.method1().method2().method3()</code> where all those methods are defined in the same class. This pattern is quite common in libraries like pandas.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://meta.stackexchange.com/questions/144452/is-it-okay-to-put-partial-answers">Partial Answer</a>:</p>
<p>When you return <code>self</code>, you return the class instance. For example:</p>
<pre><code>class Foo:
    def __init__(self, a):
        self.a = a
    def ret_self(self):
        return self
</code></pre>
<p>If I create an instance and run <code>ret_self</code>, you will see that they both refer to the same instance:</p>
<pre><code>&gt;&gt;&gt; x = Foo("a")
&gt;&gt;&gt; x
&lt;__main__.Foo instance at 0x0000000002823D48&gt;
&gt;&gt;&gt; x.ret_self()
&lt;__main__.Foo instance at 0x0000000002823D48&gt;
</code></pre>
<p>In other words, both <code>x</code> and <code>x.ret_self()</code> return the same reference to that class instance.</p>
<p><code>self</code> is actually another way of saying "this instance of <code>Foo</code>". Hence, instance variables are <code>self.a</code> in the class.</p>
<p>When will you need this? I don't have the experience to tell you and I do not want to give possibly misleading information that I am unsure of. I will leave it to someone else to expound on this answer.</p>
<p><strong>Please do not accept this answer.</strong></p>
</div>
<span class="comment-copy">Except that <code>__next__()</code> doesn't return <code>self</code> (nor should it, if you want to support the iteration protocol).</span>
<span class="comment-copy">Apologies, just modified my answer to reflect this.</span>
<span class="comment-copy">Note that <code>self</code> is not a keyword, just a conventional name for the first argument. Python would not stop you from using a different name.</span>
<span class="comment-copy">Can you explain in the fib class what does "self" exactly returns. Is it returning the value of self.a and self.b?</span>
<span class="comment-copy">In my example, <code>x.ret_self()</code> literally returns the <code>x</code>. <code>x</code> references the class instance. <code>x.ret_self()</code> references the class instance. So you could do <code>x.ret_self().a</code> and still get <code>"a"</code>.</span>
<span class="comment-copy">Ok I understand but what is the use of literally returning a reference of a class</span>
<span class="comment-copy">IMO, I would see no use in that but I may be wrong. As I said in my post "I don't have the experience to tell you and I do not want to give possibly misleading information that I am unsure of. I will leave it to someone else to expound on this answer."</span>
