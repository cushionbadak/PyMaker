<div class="post-text" itemprop="text">
<p>I'd like to have something like a custom error code/message database and use it when raising exceptions <strong>(in Python 3.4)</strong>. So I did the following:</p>
<pre><code>class RecipeError(Exception):

    # Custom error codes
    ERRBADFLAVORMIX = 1
    ERRNOINGREDIENTS = ERRBADFLAVORMIX + 1

    # Custom messages
    ERRMSG = {ERRBADFLAVORMIX: "Bad flavor mix",
              ERRNOINGREDIENTS: "No ingredients to mix"}

raise RecipeError(RecipeError.ERRMSG[RecipeError.ERRBADFLAVORMIX])
</code></pre>
<p>This works as expected, but the <code>raise</code> statement is just monstrous. Sure, I could have stored the values in a more compact way, but what I really want to know is: <strong>Can I just do something like <code>raise RecipeError(code)</code> and leave the work of getting the message to RecipeError?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Sure. Exception classes are just normal classes, so you can define your own <code>__init__</code> that calls <code>super</code> appropriately:</p>
<pre><code>class RecipeError(BaseException):
    # existing stuff
    def __init__(self, code):
        super().__init__(self, RecipeError.ERRMSG[code])
</code></pre>
<hr/>
<p>You might also want to save the code:</p>
<pre><code>class RecipeError(BaseException):
    # existing stuff
    def __init__(self, code):
        msg = RecipeError.ERRMSG[code]
        super().__init__(self, msg)
        self.code, self.msg = code, msg
</code></pre>
<p>Take a look at the information stored in the standard library's exceptions (which are pretty decent in 3.4, although there are still more changes to comeâ€¦) to see what kinds of things might be useful to stash.</p>
<hr/>
<p>Some side notes:</p>
<hr/>
<p>First, it may be better to use subclasses instead of error codes. For example, if someone wants to write code that catches an <code>ERRBADFLAVORMIX</code> but not an <code>ERRNOINGREDIENTS</code>, they have to do this:</p>
<pre><code>try:
    follow_recipe()
except RecipeError as e:
    if e != RecipeError.ERRBADFLAVORMIX:
        raise
    print('Bad flavor, bad!')
</code></pre>
<p>Or, if you'd used subclasses:</p>
<pre><code>try:
    follow_recipe():
except BadFlavorRecipeError as e:
    print('Bad flavor, bad!')
</code></pre>
<p>That's exactly why Python no longer has a monolithic <code>OSError</code> with an <code>errno</code> value that you have to switch on, and instead has separate subclasses like <code>FileNotFoundError</code>.</p>
<hr/>
<p>If you do want to use error codes, you might want to consider using an <a href="https://docs.python.org/3/library/enum.html" rel="nofollow"><code>Enum</code></a>, or maybe <a href="https://pypi.python.org/pypi?%3Aaction=search&amp;term=enum&amp;submit=search" rel="nofollow">one of the fancier enum types on PyPI</a> that make it easier to attach a custom string to each one.</p>
<hr/>
<p>You almost never want to inherit from <code>BaseException</code>, unless you're specifically trying to make sure your exception doesn't get caught.</p>
</div>
<span class="comment-copy">Thanks for the additional info. I was pretty sure I read that all user-defined exceptions should be derived from <code>BaseException</code>, so I just got it wrong.</span>
