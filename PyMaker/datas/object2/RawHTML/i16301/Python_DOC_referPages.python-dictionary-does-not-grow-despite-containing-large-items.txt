<div class="post-text" itemprop="text">
<p>I was trying to to divide dictionaries into dictionaries below a fixed size, but when I call <code>sys.getsizeof(d)</code> it tells me the size of the dictionary is 136 regardless of what's inside it, even if an individual value is larger than this. Why is this, do <code>Python</code> dictionaries only stores references? Is there a way around this that would allow me to evaluate a python dictionaries size in memory at runtime?</p>
</div>
<div class="post-text" itemprop="text">
<p>The documentation for <a href="https://docs.python.org/3/library/sys.html#sys.getsizeof" rel="nofollow"><code>sys.getsizeof()</code></a> specifically explains this:</p>
<blockquote>
<p>Only the memory consumption directly attributed to the object is accounted for, not the memory consumption of objects it refers to.</p>
</blockquote>
<p>And it even tells you how to solve your problem:</p>
<blockquote>
<p>See <a href="http://code.activestate.com/recipes/577504" rel="nofollow">recursive sizeof recipe</a> for an example of using <code>getsizeof()</code> recursively to find the size of containers and all their contents.</p>
</blockquote>
<hr/>
<p>So, what does "directly attributed to the object" mean?</p>
<p>As you surmise, dictionaries only hold references to objects. In fact, that's true of almost everything in Pythonâ€”variables, attributes of objects, lists, etc. (There are a few exceptions, like <a href="https://docs.python.org/3/library/array.html" rel="nofollow"><code>array.array</code></a>, that hold actual (unboxed) values instead, but they're the exception, not the rule.)</p>
<p>So, the space used by a <code>dict</code> is the space for its header, and for a hash table of (effectively) <code>(hash-integer, key-pointer, value-pointer)</code> buckets.</p>
<p>The hash table starts off with a small number of buckets, and expands whenever the table gets too full. So, you won't see the memory usage go up with each insert, but every so often. (Depending on your Python implementation, exactly how often may be gameable by picking non-equal values with the same hash, but if you're not doing anything weird it'll be roughly consistent.)</p>
</div>
<span class="comment-copy">Most things in Python are about references. Have you tried any hacks/workarounds?</span>
<span class="comment-copy">Yes, getsizeof only returns the dictionary overhead. All its keys and values are references.</span>
<span class="comment-copy">yeah I figure it's hashing references to the objects it stores allowing it to grow more slowly by storing objects elsewhere on the heap. I'm mostly hoping someone knows how to evaluate it's actual size</span>
<span class="comment-copy"><a href="http://code.activestate.com/recipes/577504/" rel="nofollow noreferrer">code.activestate.com/recipes/577504</a> Here's a recursive version of getsizeof.</span>
<span class="comment-copy">Hmmm, I just ran this and the size keeps growing, may be due to what you've got in the dictionary. <code>A = {} for i in range(1000000):     A[str(i)] = i</code></span>
<span class="comment-copy">dicts resize when 2/3 full, by * 4 when &lt; 50k and * 2 when over 50k entries</span>
<span class="comment-copy">@PadraicCunningham: That's an implementation detail of a specific version of CPython, not a part of the language. (IIRC, even in CPython, it used to be hardcoded to 5/8ths on some platforms with slow integer division, and configurable but defaulting to 2/3rds elsewhere.)</span>
