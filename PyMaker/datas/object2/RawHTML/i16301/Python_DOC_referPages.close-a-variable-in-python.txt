<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3770348/how-to-safely-open-close-files-in-python-2-4">How to safely open/close files in python 2.4</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I have the following code:</p>
<pre><code>from sys import argv

script, filename = argv

txt = open(filename)

print "Here's your file %r:" % filename
print txt.read()

print "Type the filename again:"
file_again = raw_input("&gt; ")

txt_again = open(file_again)

print txt_again.read()
</code></pre>
<p>And in one of the exercises in my book it says "Have your script also do a <code>close()</code> on the <code>txt</code> and <code>txt_again</code> variables. It’s important to close files when you are done with them.</p>
<p>How can I close the variables?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>txt.close()</code> will close the file parser.  However I would suggest the use of <code>with</code> instead:</p>
<pre><code>with open(filename) as txt:
    print "Here's your file %r:" % filename
    print txt.read()

print "Type the filename again:"
file_again = raw_input("&gt; ")
with open(file_again) as txt_again
    print txt_again.read()
</code></pre>
<p>This ensures that the file parser is closed correctly and also make for cleaner more pythonic code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Do <code>txt.close()</code> and <code>txt_again.close()</code> after their respective print statements.</p>
<p><strong><em>EDIT:</em></strong> As others have already pointed out, using the <a href="https://stackoverflow.com/q/1369526/1860929"><code>with</code> statement</a> is a much better option.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your book text is being unclear and imprecise. What they want you to do is call the <a href="https://docs.python.org/2/library/stdtypes.html#file.close" rel="nofollow"><code>file.close()</code> <em>method</em></a> on the file objects:</p>
<pre><code>print txt.read()
txt.close()
</code></pre>
<p>and</p>
<pre><code>print txt_again.read()
txt_again.close()
</code></pre>
<p>A <em>better</em> idea would be to use the <a href="https://docs.python.org/2/reference/compound_stmts.html#with" rel="nofollow"><code>with</code> statement</a> to have Python close files for you automatically; file objects are <a href="https://docs.python.org/2/reference/datamodel.html#context-managers" rel="nofollow">context managers</a>:</p>
<pre><code>with open(filename) as txt:
    print "Here's your file %r:" % filename
    print txt.read()

print "Type the filename again:"
file_again = raw_input("&gt; ")

with open(file_again) as txt_again:
    print txt_again.read()
</code></pre>
<p>The <code>with</code> statement tells the file object that a block begins (<em>entering</em> the context), and when the indented section ends the statement informs the file object the block has completed (<em>exiting</em> the context). A file object automatically closes itself at that point. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>txt.close()</code>.</p>
<p>It's also worth noting that you are not closing a varibale, but rather a handle on the file.</p>
</div>
<span class="comment-copy"><code>txt.close();txt_again.close()</code>. Btw you're not closing <i>variables</i>. You're closing the <i>file objects</i>.</span>
<span class="comment-copy">It works! thank u so much! :)</span>
<span class="comment-copy">Note that <code>with</code> can be used to alleviate manually management. e.g see <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer">docs.python.org/3/reference/…</a> , <a href="http://stackoverflow.com/questions/4042995/python-equivalent-to-cs-using-statement" title="python equivalent to cs using statement">stackoverflow.com/questions/4042995/…</a></span>
<span class="comment-copy">even better, use <code>with</code>, which will handle the closing for you even in case of exception.</span>
<span class="comment-copy">Thanks for the advice :)</span>
