<div class="post-text" itemprop="text">
<p>As it is good known, elements which are inserted to the priority queue have a value which determines its priority. For example if I have five elements <code>A,B,C,D,E</code> with priorities (let's call this priority values <code>priorityI</code>):
<code>A = 10, B = 5, C = 1, D = 3, E = 2</code>.
But how can I write a priority queue where I can define two priority values, I mean:
if two elements has the same value of <code>priorityI</code>, then value <code>priorityII</code> decides which element should be taken first, like for example:</p>
<pre><code>element A has priorityI = 3, and prioriotyII = 5
element B has priorityI = 3, and prioriotyII = 1
</code></pre>
<p>then first element B will be taken from the queue first.</p>
</div>
<div class="post-text" itemprop="text">
<p>Starting from Python2.6, you can use <a href="http://docs.python.org/library/queue.html#Queue.PriorityQueue" rel="nofollow noreferrer">Queue.PriorityQueue</a>.</p>
<p>Items inserted into the queue are sorted based on their <a href="http://docs.python.org/reference/datamodel.html#object.__cmp__" rel="nofollow noreferrer"><code>__cmp__</code></a> method, so just implement one for the class whose objects are to be inserted into the queue.</p>
<p>Note that if your items consist of tuples of objects, you don't need to implement a container class for the tuple, as the <a href="https://stackoverflow.com/a/5292332/3903832">built in tuple comparison implementation</a> probably fits your needs, as stated above (pop the lower value item first). Though, you might need to implement the <code>__cmp__</code> method for the class whose objects reside in the tuple.</p>
<pre><code>&gt;&gt;&gt; from Queue import PriorityQueue
&gt;&gt;&gt; priority_queue = PriorityQueue()
&gt;&gt;&gt; priority_queue.put((1, 2))
&gt;&gt;&gt; priority_queue.put((1, 1))
&gt;&gt;&gt; priority_queue.get()
(1, 1)
&gt;&gt;&gt; priority_queue.get()
(1, 2)
</code></pre>
<blockquote>
<p><strong>EDIT:</strong>  As @Blckknght noted, if your priority queue is only going to be used by a single thread, the <a href="http://docs.python.org/library/heapq.html" rel="nofollow noreferrer">heapq</a> module, available from Python2.3, is the preferred solution. If so, please refer to <a href="https://stackoverflow.com/a/25233779/3903832">his answer</a>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The usual way to do this is to make your priority value a tuple of your two priorities. Python sorts tuples lexographically, so it first will compare the first tuple item of each priority, and only if they are equal will the next items be compared.</p>
<p>The usual way to make a priority queue in Python is using <a href="https://docs.python.org/3/library/heapq.html" rel="nofollow">the <code>heapq</code> module</a>'s functions to manipulate a list. Since the whole value is compared, we can simply put our two priorities along with a value into a single tuple:</p>
<pre><code>import heapq

q = []  # the queue is a regular list

A = (3, 5, "Element A")  # our first item, a three-tuple with two priorities and a value
B = (3, 1, "Element B")  # a second item

heapq.heappush(q, A)  # push the items into the queue
heapq.heappush(q, B)

print(heapq.heappop(q)[2])  # pop the highest priority item and print its value
</code></pre>
<p>This prints <code>"Element B"</code>.</p>
</div>
<span class="comment-copy">whats the question? But can I write a priority queue where I can define two priority values? yes of coarse why couldnt you...</span>
<span class="comment-copy">@JoranBeasley Well, I think I wrongly defined the question, it should be : If someone can show an example how can I define this type of priority queue?</span>
<span class="comment-copy">The <code>Queue</code> module (renamed <code>queue</code> in Python 3) is intended for synchronized communication between multiple threads, not as a general purpose data structure. If your priority queue is only going to be used by a single thread, you should use the <code>heapq</code> module instead (which uses a <code>list</code> to hold the data). It's what <code>Queue.PriorityQueue</code> uses internally, so you might as we get it without the synchronization related overhead!</span>
<span class="comment-copy">@Blcknght, I wasn't familiar with <code>heapq</code>. I edited my answer to reflect your comment and upvoted your comment and your answer as well.</span>
