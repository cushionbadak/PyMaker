<div class="post-text" itemprop="text">
<p>I use python3 with emacs (editor and shell) under Linux OS. Why the cwd is not in the sys.path ?? How can we put it, for all sessions !!
I Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You do <strong>not</strong> want to add <code>cwd()</code> to the <code>sys.path</code>. <em>Always</em> adding <code>cwd()</code> would be a <em>terrible idea</em> as you can no longer control what files are available for import.</p>
<p>Python adds the <em>directory of the script being executed</em> instead.</p>
<p>E.g. when you run:</p>
<pre><code>python.exe path/to/script.py
</code></pre>
<p>then <code>path/to</code> is automatically added to the <code>sys.path</code>.</p>
<p>Only if you run a script from the current directory is <code>''</code> added to the start of the path, meaning the current working directory is searched for imports. E.g. when you run <code>python.exe localfile.py</code> then Python does add the current working directory, in the assumption you wont't change the current working directory while importing.</p>
<p>See <a href="https://docs.python.org/3/using/cmdline.html#interface-options" rel="noreferrer"><em>Interface options</em></a> in the <em>Command line and environment</em> documentation:</p>
<blockquote>
<p>If the script name refers directly to a Python file, the directory containing that file is added to the start of <code>sys.path</code>, and the file is executed as the <code>__main__</code> module.</p>
</blockquote>
<p>and the <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="noreferrer"><code>sys.path</code> documentation</a>:</p>
<blockquote>
<p>As initialized upon program startup, the first item of this list, <code>path[0]</code>, is the directory containing the script that was used to invoke the Python interpreter. If the script directory is not available (e.g. if the interpreter is invoked interactively or if the script is read from standard input), <code>path[0]</code> is the empty string, which directs Python to search modules in the current directory first. Notice that the script directory is inserted before the entries inserted as a result of <code>PYTHONPATH</code>.</p>
</blockquote>
<p>You can always add the current working directory to <code>sys.path</code> explicitly:</p>
<pre><code>import sys

if sys.path[0] != '':
    sys.path.insert(0, '')
</code></pre>
<p>Be careful, any python file or package in that working directory with a name matching a module you are already using in your code will mask that module, easily leading to breakage.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/sys.html#sys.path" rel="nofollow"><code>sys.path</code> isn't the System Path, it's the path that <code>python</code> checks when looking for modules (when you execute <code>import</code> statements, for example).</a></p>
<p>To change it permanently, change the environment variable <code>PYTHONPATH</code>.</p>
</div>
<span class="comment-copy">My problem exists only with emacs. With emacs sys.path[0]='/usr/share/emacs/23.3/etc'. The command from file import * doesn't work. Python can't see the module. When I use Terminal sys.path[0]='' or with IDLE sys.path[0]='/home/me' and module in my cwd are seen</span>
<span class="comment-copy">Ah, that may well be a problem with <i>just Emacs</i>, not with Python in general.</span>
<span class="comment-copy">This doesn't give you the option to add the <i>current working directory</i> to <code>sys.path</code> however, as that depends on the current shell session.</span>
<span class="comment-copy">This is how you change what <code>sys.path</code> evaluates to, in case they still want to add <code>cwd</code> to it.</span>
<span class="comment-copy">But the current working directory is <i>dynamic</i>; one <code>cd</code> call is all it takes to invalidate <code>PYTHONPATH</code> as it will no longer include the <i>current working directory</i> anymore.</span>
<span class="comment-copy">I know it's dynamic, I don't know how they'd do it. I'm just telling them how to change it permanently, however they want to go about it.</span>
<span class="comment-copy">Setting <code>PYTHONPATH</code> permanently is almost always a bad idea, for the reasons Martijn cites.  Python provides other, better options, like modifying <code>sys.path</code>, using <code>.pth</code> files, <code>virtualenv</code>s, or just installing something.  Best to find out what the OP is really trying to do first.</span>
