<div class="post-text" itemprop="text">
<p>Here is my problem:</p>
<p>I use numpy any() function to check if my array is empty or not.</p>
<pre><code>a = numpy.array([1., 2., 3.])
a.any()
#True


a = numpy.array([0., 0., 0.])
a.any()
#False
</code></pre>
<p>I would think that, given that 0. is a float, the any() function from numpy would return True. How can I make this happen?</p>
<p>What's the reason behind the fact that zeros are not considered as actual values by numpy?</p>
<p>I use python 2.6</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What's the reason behind the fact that zeros are not considered as actual values by numpy?</p>
</blockquote>
<p>It's a general principle in Python that "falsey" means <code>False</code>, <code>None</code>, a numeric zero*, or an empty collection. See <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow">Truth Value Testing</a> in the documentation for the exact rules.** Different languages have different rules for what counts as truthy vs. falsy***; these are Python's.</p>
<p>And NumPy follows that general principle. So, zeros are considered as actual values, but they're actual <em>false</em> values.</p>
<p>So, an array full of numeric zero values does not have any truthy members, therefore calling <code>any</code> on it will return <code>False</code>.</p>
<hr/>
<p><sub>* Note that in some cases, a value that rounds to <code>0.0</code> isn't exactly zero, in which case it may be, confusingly, true. Just one more way floating point rounding errors suck… If you really need to check that the values are non-zero, check whether they're within some appropriate epsilon of zero, rather than checking exact values. NumPy has a number of useful helpers here.</sub></p>
<p><sub>** I left out the rule that custom types can decide which values are truthy or falsy by defining a <code>__bool__</code> method, or various fallbacks which depend on your exact Python version. That's how things work under the hood. But for the designer of such a class, her class should try to follow the general principle; whatever it means for her values which are "zero" or "empty" or "false" or "nonexistent", that's the rule that her <code>__bool__</code> method should apply.</sub></p>
<p><sub>*** In C-family languages, it's generally zeros and NULL pointers that are falsy. In Lisp-family languages, it's only the empty list or closely-related values. In Ruby and Swift, it's just <code>false</code> and <code>nil</code>. And so on. Any rule will be counter-intuitive in some cases; as long as the language and its ecosystem are consistent, that's as good as you can hope for. (If you have to use a language that isn't consistent, like PHP or JavaScript, you'll have to keep the docs handy…)</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>What you are observing is actually expected: <code>any()</code> means "is there any element whose boolean value is true in this array?". Since the boolean value of <code>0.</code> is false (non-zero numbers are true), it is normal that <code>a.any()</code> is false when the array only contains zeroes.</p>
<p>You can check the boolean value of any Python object with <code>bool()</code>.</p>
<p>If you need to know if your array has any element, then you can test <code>a.size</code> (0 for no elements).</p>
</div>
<span class="comment-copy">They are considered "actual values", they're just actual values that evaluate <code>False</code>.</span>
<span class="comment-copy">@jonrsharpe: Be careful; they don't actually evaluate to <code>False</code>, but they do evaluate to a false value. That's why the community has the terms "truthy" and "falsy", to avoid that confusion. Well, that, and to stubbornly remind everyone that someone in the Python community came up with "truthiness" before Stephen Colbert, dammit. :)</span>
<span class="comment-copy">@abarnert good point, thanks</span>
<span class="comment-copy">Ok. I did not know that. It seemed counter-intuitive to me that a float value would be returned as False (especially in the case of an array, in which getting zeros as a results is very possible), but if that's the way it is, fair enough!</span>
<span class="comment-copy">@WilliamAbma: Every language has its own rules for truthiness, and every rule you come up with will be counterintuitive in some cases but not others; as long as a language (and its stdlib and popular third-party libraries) is consistent, that's really all you can ask for.</span>
<span class="comment-copy">@EOL: Not almost every language. Lisp and most of its derivatives, Ruby, Swift, etc. do not treat 0 as false. It's mainly just C-derived (and some other Algol-derived) languages, Python, and Perl that treat <code>0</code> as false.</span>
<span class="comment-copy">@abamert: Good to know, thanks.</span>
