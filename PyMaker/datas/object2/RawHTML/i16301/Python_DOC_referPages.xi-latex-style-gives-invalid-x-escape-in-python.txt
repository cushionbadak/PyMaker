<div class="post-text" itemprop="text">
<p>I am plotting in Python using Geany, but when I try to label my axis with say <code>$ \xi$</code> i.e. the greek letter xi, I get the</p>
<blockquote>
<p>invalid \x escape</p>
</blockquote>
<p>error. This does not happen for any other greek letter. Any idea how to resolve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python strings, <code>\x</code> indicates a hexadecimally escaped character, such as <code>'\x7a'</code>, which is the same as <code>'z'</code>, because the ASCII code of <code>'z'</code> is <code>7a</code> in hexadecimal. You have to escape the backslash into <code>\\</code> (your resulting string would look like <code>"$\\xi$"</code>) or use <em>raw strings</em> (<code>r"$\xi$"</code>) where the escapes are (mostly) ignored.</p>
<p>The official docs provide a <a href="https://docs.python.org/2/reference/lexical_analysis.html#string-literals" rel="nofollow">list of escape sequences</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a raw string: <code>r"$ \xi$"</code> which will not treat the <code>\x</code> as an escape for a  unicode char.</p>
<p>Or, you could escape the slash: <code>"$ \\xi$"</code></p>
<p>It doesn't happen with other greek letters you've tried because they don't happen to start with a character used as a control code. But if you tried "\rho" I imagine you might be surprised, as "\r" is a carriage return code.</p>
<p>There are <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow">various such codes</a>, including <code>\b, \t, \n, \a, \r, \u, \v, \f, \x, \U</code></p>
</div>
