<div class="post-text" itemprop="text">
<p>my question is simple:</p>
<p>Is there any way to code in a pythonic way that bash command?</p>
<pre><code>hexdump -e '2/1 "%02x"' file.dat
</code></pre>
<p>Obviously, without using os, popen, or any shortcut ;)</p>
<p>EDIT: although I've not explicitly specified, it would be great if the code was functional in Python3.x</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you only care about Python 2.x, <a href="https://docs.python.org/2/library/stdtypes.html#str.encode" rel="noreferrer"><code>line.encode('hex')</code></a> will encode a chunk of binary data into hex. So:</p>
<pre><code>with open('file.dat', 'rb') as f:
    for chunk in iter(lambda: f.read(32), b''):
        print chunk.encode('hex')
</code></pre>
<p><sub>(IIRC, <code>hexdump</code> by default prints 32 pairs of hex per line; if not, just change that <code>32</code> to <code>16</code> or whatever it isâ€¦)</sub></p>
<p><sub>If the two-argument <a href="https://docs.python.org/3/library/functions.html#iter" rel="noreferrer"><code>iter</code></a> looks baffling, click the help link; it's not too complicated once you get the idea.</sub></p>
<p>If you care about Python 3.x, <a href="https://docs.python.org/3/library/stdtypes.html#str.encode" rel="noreferrer"><code>encode</code></a> only works for codecs that convert Unicode strings to bytes; any codecs that convert the other way around (or any other combination), you have to use <a href="https://docs.python.org/3/library/codecs.html#codecs.encode" rel="noreferrer"><code>codecs.encode</code></a> to do it explicitly:</p>
<pre><code>with open('file.dat', 'rb') as f:
    for chunk in iter(lambda: f.read(32), b''):
        print(codecs.encode(chunk, 'hex'))
</code></pre>
<p>Or it may be better to use <a href="https://docs.python.org/3/library/binascii.html#binascii.hexlify" rel="noreferrer"><code>hexlify</code></a>:</p>
<pre><code>with open('file.dat', 'rb') as f:
    for chunk in iter(lambda: f.read(32), b''):
        print(binascii.hexlify(chunk))
</code></pre>
<p>If you want to do something besides print them out, rather than read the whole file into memory, you probably want to make an iterator. You could just put this in a function and change that <code>print</code> to a <code>yield</code>, and that function returns exactly the iterator you want. Or use a genexpr or <code>map</code> call:</p>
<pre><code>with open('file.dat', 'rb') as f:
    chunks = iter(lambda: f.read(32), b'')
    hexlines = map(binascii.hexlify, chunks)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The standard library is your friend.  Try <a href="https://docs.python.org/2.7/library/binascii.html#binascii.hexlify" rel="noreferrer"><em>binascii.hexlify()</em></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply <a href="https://docs.python.org/2/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer"><code>read()</code></a> the whole file and <a href="https://docs.python.org/2/library/stdtypes.html#str.encode" rel="nofollow noreferrer"><code>encode('hex')</code></a>. What could be more pythonic?</p>
<pre><code>with open('file.dat', 'rb') as f:
    hex_content = f.read().encode('hex')
</code></pre>
</div>
<span class="comment-copy">What does <code>2/1 "%02x"</code> mean?</span>
<span class="comment-copy">"%02x" prints each byte as a 2 character, 0 prefixed capital hex number.</span>
<span class="comment-copy">And what about <code>2/1</code>? The question would be much clearer for those who know Python, but now familiar with hexfump cli.</span>
<span class="comment-copy">Take a look at that : &lt;&lt; <a href="http://256.com/gray/docs/misc/hexdump_manual_how_to.html" rel="nofollow noreferrer">256.com/gray/docs/misc/hexdump_manual_how_to.html</a> &gt;&gt;   "An interation count which defaults to 1 if not supplied but has to be supplied if you want a byte count. This tells how many times to do the conversion before we print the end string. So if you were decoding 4 things, each of 1 byte, you'd say 4/1. "</span>
<span class="comment-copy">Python3 code just works! Your answer its more than I would expect, thanks!!!</span>
<span class="comment-copy">much better than my solution +1</span>
<span class="comment-copy">Except you almost certainly want to open it in <code>rb</code> mode so it doesn't translate newlines. Also, this is Python 2-specific; in Python 3, you can't <code>encode</code> bytes. Still +1.</span>
<span class="comment-copy">Great approach, it works, but only in python2.  This is the output in Py3.4:      UnicodeDecodeError: 'utf-8' codec can't decode byte 0xac in position 0: invalid start byte</span>
<span class="comment-copy">@peluzza: Do you need Python 3?</span>
<span class="comment-copy">Well, I'm doing my best to code only for 3.X, but the gaps are so deep, not only working with hex dumps ;)</span>
