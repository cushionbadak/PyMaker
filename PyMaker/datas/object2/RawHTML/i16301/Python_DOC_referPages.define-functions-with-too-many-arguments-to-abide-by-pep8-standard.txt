<div class="post-text" itemprop="text">
<p>I have defined a function with a long list of arguments. The total characters in definition is above 80 and doesn't abide by PEP8.</p>
<pre><code>def my_function(argument_one, argument_two, argument_three, argument_four, argument_five):
</code></pre>
<p>What can be the best approach to avoid horizontal scrolling.</p>
</div>
<div class="post-text" itemprop="text">
<p>An example is given in PEP 8:</p>
<pre><code>class Rectangle(Blob):

    def __init__(self, width, height,
                 color='black', emphasis=None, highlight=0):
</code></pre>
<p>So that is the official answer.  Personally I detest this approach, in which continuation lines have leading whitespace that doesn't correspond to any real indentation level.  My approach would be:</p>
<pre><code>class Rectangle(Blob):

    def __init__(
        self, width, height,
        color='black', emphasis=None, highlight=0
    ):
</code></pre>
<p>. . . or just let the line run over 80 characters.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def my_function(argument_one, argument_two, argument_three, 
                argument_four, argument_five):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python code that uses the <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">"typing"</a> type checker, I suggest this:</p>
<pre class="lang-py prettyprint-override"><code>def some_func(
    foo: str,
    bar: str = 'default_string',
    qux: Optional[str] = None,
    qui: Optional[int] = None,
) -&gt; List[str]:
    """
    This is an example function.
    """
    print(foo)
    ...
</code></pre>
<p>Variants with multiple parameters in a single line look really chaotic when type annotations are used, IMHO. So I think it's better to have each of them on its own line.</p>
<p>If you use <a href="https://github.com/google/yapf" rel="nofollow noreferrer">"yapf"</a> you can use these options in <code>.style.yapf</code>:</p>
<pre><code>[style]
dedent_closing_brackets = true
split_arguments_when_comma_terminated = true
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Personally I also used to come up with the same solution as @BrenBarn 's second style. I like its way to properly represent the indentation of function parameters AND its implementation, albeit that "unhappy face" is somewhat unusual to some other people.</p>
<p>Nowadays, <a href="https://www.python.org/dev/peps/pep-0008/#indentation" rel="nofollow">PEP8</a> specifically gives an example for such case, so perhaps the mainstream is going to adapt that style:</p>
<pre><code># More indentation included to distinguish this from the rest.
def long_function_name(
        var_one, var_two, var_three,
        var_four):
    print(var_one)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I personally like to line up the params one-per-line starting with the open parentheses and keeping that indent. <code>flake8</code> seems happy with it too.</p>
<pre><code>def guess_device_type(device_name: str,
                      username: str=app.config['KEY_TACACS_USER'],
                      password: str=app.config['KEY_TACACS_PASS'],
                      command: str='show version') -&gt; str:
    """Get a device_type string for netmiko"""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I find myself this way to be quite interesting:</p>
<pre><code>def my_function(
        argument_one, argument_two, argument_three,
        argument_four, argument_five
):
    ...
</code></pre>
<p>it allows code-folding to reveal the function signatures quite easily, for instance, consider the below snippet:</p>
<pre><code>def my_function(
        argument_one, argument_two, argument_three,
        argument_four, argument_five
):
    s1 = 1
    s2 = 2
    if s1 + s2:
        s3 = 3


def my_other_function(argument_one, argument_two, argument_three):
    s1 = 1
    s2 = 2
    if s1 + s2:
        s3 = 3
</code></pre>
<p>This way allows to code-folding the whole file and seeing all functions/signatures at once, ie:</p>
<p><a href="https://i.stack.imgur.com/AbtUI.gif" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/AbtUI.gif"/></a></p>
</div>
<span class="comment-copy">And what is the best way to write function call statement? :)</span>
<span class="comment-copy">I was actually in confusion to choose between these two. For the first one, continuous lines have arbitrary whitespaces which is something which I don't prefer. The second one looks confusing to be a funciton.  I would prefer the PEP8 official answer.</span>
<span class="comment-copy">I find the method in your second example dirty. Declaration in the first one catches my eye no-problem, while with the second one I have to look closer to find it. Especially when there are 20 methods with 2-3 lines each in the same class.</span>
<span class="comment-copy">I agree, 80 chars is too narrow. Make the lines a little longer and use more clear var/func names instead of ugly abbreviations/line-breaks. 100 chars should be standrad IHMO.</span>
<span class="comment-copy">This is not about being more or less dirty, this is about the method on the second example is actually more practical. It allows the editor to make proper code folding of the method body while allowing you to see the parameters of the method. The official one as the author suggest doesn't correspond to any indentation level.</span>
