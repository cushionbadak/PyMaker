<div class="post-text" itemprop="text">
<p>I'm working on a GUI app.  Let's say that I have a file <code>main.py</code> which is in the root directory and I want to import widgets like this:</p>
<pre><code>from widgets import FancyWindow, ColorPicker
# ...
</code></pre>
<p>And my app is structured like so:</p>
<pre><code>| main.py
+ widgets/
    | __init__.py
    | fancy_window.py
    | color_picker.py
...
</code></pre>
<p>IIRC, I would have to import classes from the other modules like so:</p>
<pre><code>from widgets.color_picker import ColorPicker
from widgets.fancy_window import FancyWindow
</code></pre>
<p>So my question is if there is something I can do in <code>widgets/__init__.py</code> to make it so that I can do imports in the way I want to?</p>
</div>
<div class="post-text" itemprop="text">
<p>You actually have it there already, just make your <code>__init__.py</code> have those two lines:</p>
<pre><code>from widgets.color_picker import ColorPicker
from widgets.fancy_window import FancyWindow
</code></pre>
<p>Anything that you import (and any other symbols you define) in <code>__init__.py</code> will then be available.</p>
<p>E.g. if you put:</p>
<pre><code>apple = 5
</code></pre>
<p>in <code>__init__.py</code> you could also do: <code>from widgets import apple</code>.  No magic :)</p>
</div>
<div class="post-text" itemprop="text">
<p>In <code>__init__.py</code> you can import the modules, then export them:</p>
<pre><code>from fancy_window import FancyWindow
from color_picker import ColorPicker

__all__ = [FancyWindow, ColorPicker]
</code></pre>
<p>Now, you can do the following:</p>
<pre><code>from widgets import * # Only imports FancyWindow and ColorPicker
from widgets import FancyWindow
from widgets import ColorPicker
import widgets
color_picker = widgets.ColorPicker()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The best way would be to use <code>__init__.py</code> to perform setups needed for the package.</p>
<pre><code># __init__.py
from fancy_window import FancyWindow
from color_picker import ColorPicker
</code></pre>
<p>Then in <code>main.py</code> you can perform imports directly.</p>
<pre><code># main.py
from widgets import FancyWindow, ColorPicker
</code></pre>
<p>A more convenient way to package everything in <code>__init__.py</code></p>
<pre><code># __init__.py
from fancy_window import *
from color_picker import *
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>yes, by adding the public variables of the other modules to __all__ in __init__.py<br/>
see <a href="https://docs.python.org/3/reference/simple_stmts.html#import" rel="nofollow">https://docs.python.org/3/reference/simple_stmts.html#import</a></p>
</div>
<span class="comment-copy">In <code>widgets/__init__.py</code> import the things you want to be available in the <code>widget</code> package's namespace. i.e. <code>from fancy_window import FancyWindow</code>.</span>
<span class="comment-copy">This is the one that worked for me.  But there is still a little odd issue.  If I try to do a <code>from widgets import *</code> in <code>main.py</code>, I'll get an error from <code>importlib</code> telling me <code>TypeError: hasattr(): attribute name must be string</code>.  But if I don't do the star and give the actual name of the widget I want, there is no error.</span>
<span class="comment-copy">@Benjamin you'd need to post more code/context for that one - maybe open a different question?</span>
