<div class="post-text" itemprop="text">
<p>I found the following dictionary:</p>
<pre><code>catalog = {"threads":{"39894014":{"date":1390842451,"r":0,"i":0,"lr":  {"id":39894014},"semantic_url":"the-g-wiki-g-is-for-the-discussion-  of-technology","sticky":1,"closed":1,"capcode":"mod"}}
</code></pre>
<p>I know I could access "date" for example by writing <code>data["threads"]["39894014"]["date"]</code>, but is there some way of skipping the second thing (<code>["39894014"]</code>,) because this number is randomly generated so the list may change, and it would be a totally different number.        </p>
</div>
<div class="post-text" itemprop="text">
<p>You'll have to loop over the keys or values of the dictionary value of the <code>'threads'</code> key; if there is only ever <em>one</em> thread in the dictionary, you can extract that one dictionary with:</p>
<pre><code>thread = next(data['threads'].values())
print(thread['date'])
</code></pre>
<p>If you don't need the outer dictionary to remain pristine, you could just use <a href="https://docs.python.org/3/library/stdtypes.html#dict.popitem" rel="nofollow"><code>dict.popitem()</code></a> to unwrap:</p>
<pre><code>threadid, thread = data['threads'].popitem()
print(thread['date'])
</code></pre>
<p>To get <em>all</em> entries you can loop and grab the dates:</p>
<pre><code>all_dates = [thread['data'] for thread in data['threads'].values()]
</code></pre>
</div>
<span class="comment-copy">This is not Python syntax; <code>var</code> looks like JavaScript to me.</span>
<span class="comment-copy">yes, because it is, I tried to access it through json (just ignore the var catalog)</span>
<span class="comment-copy">If there are few entries inside that dictionary under the key <code>threads</code>, how do you tell which one you need?</span>
<span class="comment-copy">Then why include the <code>var</code> at all? Just focus on the issue of accessing the nested dictionary in Python, it doesn't matter how you loaded it.</span>
<span class="comment-copy">I would try to get all of the entries.</span>
<span class="comment-copy">TypeError: 'dict_values' object does not support indexing What did I do wrong?</span>
<span class="comment-copy">@IThelp: mea culpa, Python 2 vs. Python 3 tripping me up there. Corrected.</span>
<span class="comment-copy">Thanks alot, it's solved ^^</span>
<span class="comment-copy">Why not use <code>next(data['threads'].values())</code></span>
<span class="comment-copy">@ThiefMaster: Yeah, a better idea.</span>
