<div class="post-text" itemprop="text">
<p>Note: I am asking this question after researching how to actually do it. 
Other questions which are somewhat similar, but actually differ from my question relate to:</p>
<ol>
<li>Color-coding <em>within</em> the python script </li>
<li>Importing color libraries <em>within</em> the script</li>
<li>Using tools like <code>Solarized</code> to improve tools like <code>Vim</code> to color-code python code.</li>
</ol>
<p><strong>What I am looking for:</strong>
I already have a simple python script (say, test.py) and I am executing it from the Gnome terminal.</p>
<pre><code>python test.py
</code></pre>
<p><code>test.py</code> will output some errors right in the terminal.
Error example:</p>
<pre><code>Traceback (most recent call last):
  File "test.py", line 2, in &lt;module&gt;
    with open('', 'rb') as csvfile:
IOError: [Errno 2] No such file or directory: ''
</code></pre>
<p>I want the error keywords to be in bold red for example, line numbers in a specific color amongst others, such that it is easy to track down the errors.</p>
<p>As you can see, Stackoverflow already color-codes the error nicely. On my Gnome-terminal, the output is uni-color. How can I get such a nice color-coded output on the terminal?</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the IPython coloring. Just put this at the beginning of your program.
Every exception will be then handled by ultratb and be displayed in color and also show the locals() values for the code snippet that made the exception.</p>
<pre><code>import sys
from IPython.core import ultratb
sys.excepthook = ultratb.FormattedTB(mode='Verbose', color_scheme='Linux', call_pdb=False)
</code></pre>
<p>This will work even if you invoke your script with the vanilla python interpreter.</p>
</div>
<div class="post-text" itemprop="text">
<p>FWIW, you can wrap the script in a <code>main</code> function, and call the <code>main</code> function within a <code>try ... except</code> block, get the error message, colourize it and print it;</p>
<p>To get the error message you need a call to <a href="https://docs.python.org/2/library/sys.html#sys.exc_info" rel="nofollow noreferrer"><code>sys.exc_info</code></a>. <a href="https://docs.python.org/3/library/traceback.html#traceback.format_exception" rel="nofollow noreferrer"><code>traceback.format_exception</code></a> formats the stack-trace and the exception information. Using basic regex you can wrap every <code>..Err..</code> inside a <code>\033[91m...Err...\033[0m</code> which turns the colour into red:</p>
<pre><code>def main():
   with open('xxx.txt', 'r') as fin:
        return fin.read()

try:
    main()
except:
    import re
    from sys import exc_info
    from traceback import format_exception

    RED, REV = r'\033[91m', r'\033[0m'
    err = ''.join(format_exception(*exc_info()))
    print(re.sub(r'(\w*Err\w*)', RED + r'\1' + REV, err))
</code></pre>
<p>Result:</p>
<p><img alt="err" src="https://i.stack.imgur.com/eYK95.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>Quick hack solution, UNIX only. Redirect stdout to a file with .py suffix. Then display file using <code>vimcat</code> for colorised output. Wrap this all up in a shell function. For example in bash;  </p>
<pre><code># print colorised python output
colorized() {
    local out='out.py'
    if (( $# &lt; 1)) 
    then
        printf "Usage: %s pyhon-script\n" $0 &gt;&amp;2
        return 1;
    fi
    if [ -e $out ]; 
    then
        rm $out
    fi
    python $@ 2&gt; $out
    empty=$(stat $out | grep empty)
    if (( $? == 1 ))
    then
        vimcat $out
    fi
}
</code></pre>
</div>
