<div class="post-text" itemprop="text">
<p>any idea what is the error trying to say?</p>
<pre><code>Traceback (most recent call last):
  File "&lt;pyshell#2&gt;", line 1, in &lt;module&gt;
    subprocess.call(["ls", "-l"])
  File "D:\Python27\lib\subprocess.py", line 522, in call
    return Popen(*popenargs, **kwargs).wait()
  File "D:\Python27\lib\subprocess.py", line 710, in __init__
    errread, errwrite)
  File "D:\Python27\lib\subprocess.py", line 958, in _execute_child
    startupinfo)
WindowsError: [Error 2] The system cannot find the file specified
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are calling the <code>ls</code> command on windows, which doesn't have an <code>ls</code>. You can grab a port of <code>ls</code> for windows from <a href="http://gnuwin32.sourceforge.net/packages/coreutils.htm" rel="nofollow noreferrer">http://gnuwin32.sourceforge.net/packages/coreutils.htm</a> and add it's installed bin dir to your windows <code>PATH</code> (or add it to PATH at run time of your python script. if you dont know how to to do this, see <a href="https://stackoverflow.com/questions/9546324/adding-directory-to-path-environment-variable-in-windows">this</a> and <a href="https://stackoverflow.com/questions/1681208/python-platform-independent-way-to-modify-path-environment-variable/1681244#1681244">this</a> question respectively).</p>
<p><code>dir</code> is the windows equivalent, but it will print differently formatted output compared to <code>ls</code>, and presumably, this call is to get some kind of information from a directory. There are better ways to do this in python. If you can identify what information it is trying to get (e.g. permission bits), then you might be able to write a pure python version of this (or find an equivalent python snippet for windows that does this) and not rely on external commands.</p>
<p>Interestingly, <code>subprocess.call()</code> simply runs the command and returns the error code. <code>ls</code> itself just prints information, so if that is the intent (just to show the user a directory's contents in a console), then you can replace it with a call to <code>dir</code>. Sometimes, you will need to provide <code>shell=True</code> as a parameter depending on the command you are calling. Pay attention to the <a href="https://docs.python.org/2/library/subprocess.html#frequently-used-arguments" rel="nofollow noreferrer">warning</a> in the documentation though. If it is trying to extract information, it probably wants to do a <code>subprocess.Popen()</code> or <code>subprocress.check_output()</code> style call, where you actually can consume the called program's output.</p>
<p>If for example, it is just to get the list of files/directories in a directory and/or their timestamps, then this is a very round-about way of getting this information, and they can all be done in python itself e.g. <a href="https://docs.python.org/2/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk()</code></a>, <a href="https://docs.python.org/2/library/os.html#os.stat" rel="nofollow noreferrer"><code>os.fstat()</code></a>, and in Python3, <a href="https://docs.python.org/3/library/pathlib.html#" rel="nofollow noreferrer"><code>pathlib</code></a> are some ways to get file information in a directory.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're trying to execute the <code>ls -l</code> command on Windows. <code>ls</code> will only work on Unix-based systems.</p>
<pre><code>subprocess.call(["ls", "-l"])
</code></pre>
<p>If you're on Windows, try</p>
<pre><code>subprocess.call(["dir"])
</code></pre>
<p>instead.</p>
<p>Alternatively, you could try something like <a href="https://www.cygwin.com/" rel="nofollow">Cygwin</a>.</p>
</div>
<span class="comment-copy">i did try your code "subprocess.call(["dir"])" but it still shows the same error (i am on windows by the way)</span>
<span class="comment-copy">do i need to make a PATH?</span>
<span class="comment-copy">Depending on how subprocess.call is implemented, it might need to be "cmd /c dir" since dir is a builtin, not an executable.  But it would be far more sensible to use Python's own file-management functions.</span>
