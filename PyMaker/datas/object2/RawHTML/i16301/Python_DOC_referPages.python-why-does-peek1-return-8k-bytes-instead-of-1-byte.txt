<div class="post-text" itemprop="text">
<p>I'm using Python 3, and the peek() method for buffered file I/O doesn't seem to work as documented. For example, the following code illustrates the problem -- it prints <strong>8192</strong> as the length of the byte string returned by <code>f.peek(1)</code>:</p>
<pre><code>jpg_file = 'DRM_1851.JPG'
with open(jpg_file, 'rb') as f:
    next_byte = f.peek(1)
    print(len(next_byte))
</code></pre>
<p>I sometimes want to peek at the next byte without moving the file pointer, but since the above doesn't work I'm doing something this in those places instead:</p>
<pre><code>next_byte = f.read(1) # read a byte
f.seek(-1,1) # move the file pointer back one byte
</code></pre>
<p>That works, but feels like a kludge. Am I misunderstanding something about how peek() works?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/io.html#io.BufferedReader.peek" rel="nofollow noreferrer">Python docs</a>:</p>
<blockquote>
<p><strong>peek([size])</strong></p>
<p>Return bytes from the stream without advancing the position. At most one single read on the raw stream is done to satisfy the call. <strong>The number of bytes returned may be less or more than requested.</strong></p>
</blockquote>
<p>Emphasis mine.</p>
<p>Since the file pointer isn't moved in <code>peek</code>, it doesn't really matter if <code>peek</code> reads more than the amount you want. Just take a substring after you peek: <code>next_byte = f.peek(1)[:1]</code></p>
</div>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/24474687/io-bufferedreader-peek-function-returning-all-the-text-in-the-buffer" title="io bufferedreader peek function returning all the text in the buffer">stackoverflow.com/questions/24474687/â€¦</a></span>
<span class="comment-copy">Shouldn't that be <code>f.peek(1)[:1]</code> in case there are no bytes returned?</span>
<span class="comment-copy">@JasonS That works too. I've changed it to that.</span>
<span class="comment-copy">Thanks much! I understand now. I have to admit, I've read that line in the Python docs more than once and I never fully internalized those three words "or more than."</span>
