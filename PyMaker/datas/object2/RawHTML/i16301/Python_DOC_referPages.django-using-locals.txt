<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1901525/django-template-and-the-locals-trick">Django template and the locals trick</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>I am beginner in web development with Django. I have noticed that the <code>locals()</code> function is used instead of the context dictionary that I am used to see.</p>
<p>From what I see on the internet <code>locals()</code> is pretty useful, so are there any special cases where this is not true and its better to use the <code>context_dictionary</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>locals()</code> in that tutorial is just for convenience, since all the data he needs to pass to the template is stored in local variables. <code>locals()</code> returns a dictionary holding the local variables names (as keys) and the current values (as values).  </p>
<p>You need to use an explicit context_dictionary, instead of passing <code>locals()</code>, if you must build your data and you don't have such data in separate variables.</p>
<p>both <code>locals()</code> and context_dictionary are dictionaries, and that's the only requirement: a dictionary-like object (i.e. an object supporting <code>__getitem__(key)</code> and <code>get(key, default=None)</code> methods). How you get the dictionary, is up to you. There's no practice about that, but alternatives are:</p>
<ul>
<li>Return a <code>RequestContext()</code>, which is a dict-like object, if you use <code>CONTEXT_PROCESSORS</code>.</li>
<li>Return <code>locals()</code> if you have the data in your local variables.</li>
<li>Return a hand-made dictionary with your data otherwise.</li>
</ul>
<p><strong>EDIT</strong> - Examples:</p>
<p>Example on building the dictionary on your own:</p>
<pre><code>def my_view(request):
    return render_to_response('hello.html', {
        'full_name': u"%s %s" % (request.user.first_name, request.user.last_name),
        'username': request.user.username
    })
</code></pre>
<p>Example on building the dictionary from <code>locals()</code>:</p>
<pre><code>def my_view(request):
    full_name = u"%s %s" % (request.user.first_name, request.user.last_name)
    username = request.user.username

    return render_to_response('hello.html', locals())
</code></pre>
<p>Assume hello.html is - in either case:</p>
<pre><code>&lt;html&gt;
    &lt;body&gt;
        You are {{ full_name }} ({{ username }})
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>You'll get the expected result.</p>
</div>
<div class="post-text" itemprop="text">
<p>if your view looks something like this:</p>
<pre><code>def myview(request):
    thing = 1
    name = 'fred'
    stuff = ['a', 'b', 'c']
</code></pre>
<p>and in your template you want to do:</p>
<pre><code>{{ thing }} of {{ name }} has {% for x in stuff %}{{ x }}{% endfor %}
</code></pre>
<p>then in the view you could:</p>
<pre><code>    return render(request, 'template.html', locals())
</code></pre>
<p>This is because <code>locals()</code> returns a dict of all the locally defined variables in the current scope. So it's kind of a sneaky shortcut.</p>
<p>Be careful though, since you are likely to expose more values than you intend to... generally we'd prefer the "Explicit is better than implicit" approach from the <a href="http://legacy.python.org/dev/peps/pep-0020/" rel="nofollow">Zen of Python</a> i.e. define a dict containing only what you want to pass through to the template.</p>
<pre><code>def myview(request):
    context = {
       'thing': 1,
       'name': 'fred',
    }
    # do more code...
    context['stuff'] = ['a', 'b', 'c']
    return render(request, 'template.html', context)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you mean by context dictionary is the named arguments? If yes, they're different, locals shows you all the locals variables, kwargs dictionary instead shows only the named arguments.</p>
<pre><code>def test(**kwargs):
   c = 'abc'
   print kwargs
   print locals()

test(a=10, b=20)
</code></pre>
<p>The first print shows: {'a': 10, 'b': 20} while the second one shows: {'c': 'abc', 'kwargs': {'a': 10, 'b': 20}}</p>
</div>
<div class="post-text" itemprop="text">
<p><code>locals()</code> is a Python built-in function that according to the official Python <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>Updates and returns a dictionary representing the current local symbol table. Free variables are returned by <code>locals()</code> when it is called in function blocks, but not in class blocks.</p>
</blockquote>
<p>Example:</p>
<pre><code>In [1]: def f():
   ...:     a = 1
   ...:     b = 2
   ...:     c = 'three'
   ...:
   ...:     return locals()
   ...:

In [2]: f()
Out[2]: {'a': 1, 'b': 2, 'c': 'three'}
</code></pre>
<p>I think <code>locals()</code> might be useful to <strong>avoid repetition</strong> when you are going to create a dictionary with the variables you have defined in the view (probably most or all variables you have created are going to be included in the context dictionary). </p>
<p>However, using <code>locals()</code> <em>is not beneficial for refactoring</em>. The local variables of a view can freely be changed when performing a refactoring. Then, you cannot safely rename a variable because they don't have a visible effect. Another problem you could also experience is <em>performance</em> because you will probably include variables that you don't really need in the context, and in case your view is declaring lots of temporal variables, the context will be overloaded.</p>
<p>Therefore, it might be a good idea to avoid <code>locals()</code>.</p>
</div>
<span class="comment-copy">Try to avoid locals() as Views Context. It has been stated many times to be an anti-pattern <a href="http://stackoverflow.com/a/1901720/2115494">stackoverflow.com/a/1901720/2115494</a> .</span>
<span class="comment-copy">@SuburbanFilth, I have added an answer to your question.</span>
<span class="comment-copy">I am sorry for the ignorance, but can you give me an example of 'if you must build your data and you don't have such data in separate variables.'?</span>
<span class="comment-copy">Edited with sample</span>
<span class="comment-copy">in the context of Django a 'context dictionary' is the dict of value passed from the view to the template for rendering</span>
