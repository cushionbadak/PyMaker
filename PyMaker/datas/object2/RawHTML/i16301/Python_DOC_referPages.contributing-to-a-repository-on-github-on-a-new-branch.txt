<div class="post-text" itemprop="text">
<p>Say someone owns a repository with only one <code>master</code> hosting code that is compatible with <code>Python 2.7.X</code>. I would like to contribute to that repository with my own changes to a new branch <code>new_branch</code> to offer a variant of the repository that is compatible with <code>Python 3</code>.</p>
<p>I followed the steps <a href="https://guides.github.com/activities/contributing-to-open-source/#contributing" rel="nofollow">here</a>:</p>
<ol>
<li>I forked the repository on GitHub on my account</li>
<li>I cloned my fork on my local machine</li>
<li>I created a new branch <code>new_branch</code> locally</li>
<li>I made the relevant changes</li>
<li>I committed and pushed the changes to my own fork on GitHub</li>
<li>I went on the browser to the GitHub page of the official repository, and asked for a pull request</li>
</ol>
<p>The above worked, <strong>but</strong> it did a pull request from <code>"my_account:new_branch"</code> to <code>"official_account:master"</code>. This is not what I want, since <code>Python 2.7.x</code> and <code>Python 3</code> are incompatible with each other. What I would like to do is create a  PR to <strong>a new branch</strong> on the official repository (e.g. with the same name <code>"new_branch"</code>). How can I do that? Is this possible at all?</p>
</div>
<div class="post-text" itemprop="text">
<p>You really don't want to do things this way. But first I'll explain how to do it, then I'll come back to explain why not to.</p>
<p><a href="https://help.github.com/articles/using-pull-requests" rel="nofollow">Using Pull Requests</a> at GitHub has a pretty good overview, in particular the section "Changing the branch range and destination repository." It's easiest if you use a topic branch, and have the upstream owner create a topic branch of the same name; then you just pull down the menu where it says "base: master" and the choice will be right there, and he can just click the "merge" button and have no surprises.</p>
<p>So, why don't you want to do things this way?</p>
<p>First, it doesn't fit the GitHub model. Topic branches that live forever in parallel with the master branch and have multiple forks make things harder to maintain and visualize.</p>
<p>Second, you need both a git URL and an https URL for you code. You need people to be able to share links, <code>pip install</code> from top of tree, just clone the repo instead of cloning and then checking out a different branch, etc. This all means your code has to be on the master branch.</p>
<p>Third, if you want people to be able to install your 3.x version off PyPI, find docs at readthedocs, etc., you need a single project with a single source tree. Most such sites have a single latest version, not a latest version for each Python version, and definitely not multiple variations of the same version. (You could install completely fork the project, and create a separate <code>foo3</code> project. But it's much easier for people to be able to <code>pip install foo</code> than to have them try that, fail, come to SO and ask why it doesn't work, and get told they probably have Python 3 and need to <code>pip install foo3</code> instead.)</p>
<p>How do you merge two versions into a single package? The <a href="https://docs.python.org/3/howto/pyporting.html" rel="nofollow">porting docs</a> should have the most up-to-date advice, but briefly: If it's at all possible to create a single codebase that runs on both versions, that's ideal; if not, and if you can't make things work by running <code>2to3</code> or <code>3to2</code> at install time, create a parallel directory for the 3.x code (e.g., a <code>foo3</code> alongside <code>foo</code>) and pick the appropriate directory at install time. (You can always start with that and gradually work toward a unified codebase.)</p>
</div>
<span class="comment-copy">You can edit the base branch by clicking the Edit button at the top of the pull request... but I'm not sure if this actually works to create a new branch; the upstream might need to have that branch to begin with. (BTW, it seems to be more common these days to support Python 3 in libraries by creating a version that runs on both 2 and 3...)</span>
<span class="comment-copy">Thanks @Wooble. On this topic, I actually used <code>2to3</code> to port the code. Do you know if <code>2to3</code> already outputs code that is compatible with both?</span>
<span class="comment-copy">It does not. In my experience it's unlikely to produce code that works on Python 3 very well, either. <a href="https://docs.python.org/3/howto/pyporting.html" rel="nofollow noreferrer">docs.python.org/3/howto/pyporting.html</a> has some good information.</span>
<span class="comment-copy">@Wooble: With enough work, you <i>can</i> actually make <code>2to3</code> generate code that runs in both 2.x (with some <code>from six.foo import *</code> and <code>__future__</code> statements) and 3.x. I've done it a couple times. But it's still more work than just getting it to generate 3.x code at install time and using the original code for 2.x, and the only tiny benefit is that you can sometimes use the package out of the development directory; once I realized that, I stopped trying. I now only use <code>2to3</code> (and <code>3to2</code>) as a linting tool or a manual refactoring aid while porting.</span>
<span class="comment-copy">Thanks, regarding the last paragraph: Would running <code>2to3</code> and then <code>3to2</code> sequentially <b>in theory</b> generate Python code that runs in both Python 2 and 3?</span>
<span class="comment-copy">Also, Python 2-3 issues aside, I understand from your post that unless the GitHub repo owner creates the topic branch, I can't do to the PR targeting it. In other words I can't PR to a branch that has not been created yet, correct?</span>
<span class="comment-copy">@user815423426: It's never really been a goal that <code>3to2</code> code run in 3.x; <code>2to3</code>, at least some of the people involved wanted that at some point, so I suspect you'd have more luck with just <code>2to3</code> than with both. Maybe <code>futurize</code> instead of/in coordination with <code>3to2</code> would do better. A better use of <code>2to3</code> is to generate some 3.x code, find what's wrong with it and fix it, then manually try to merge the original and 3.x code together (with liberal use of <code>six</code> and <code>modernize</code>), and use <code>3to2</code> just to verify that it doesn't suggest anything you didn't expect.</span>
<span class="comment-copy">@user815423426: Also, if <code>2to3</code> <i>almost</i> gives you useful 3.x code, you may want to consider tweaking your 2.x code so it still works in 2.x and <code>2to3</code>'s to correct 3.x code, tweaking the flags you pass to <code>2to3</code>, etc. That used to be considered one of the best ways to generate cross-version libraries. But I think most people's experience has been that it ends up being more work, and more brittle, which is why the HOWTO has been rewritten to push you toward a single codebase without an install-time transformation.</span>
<span class="comment-copy">@user815423426: For your last point, I don't actually know if there's a way to create the branch automatically. I do know that you can do it from a frozen "tag" branch instead of a topic branch even though it isn't obvious how, so I wouldn't say it's impossible, just that I don't know how to do it, it's a lot easier to do it with the owner's help (he does want your pull requests, after all), and since ultimately one of you is going to watch to merge everything to master it's probably easiest for you to just do that and pull to master in the first place.</span>
