<div class="post-text" itemprop="text">
<p>I got the following problem: I would like to read a data textfile which consists of two columns, year and temperature, and be able to calculate the minimum temperature etc. for each year. The whole file starts like this:</p>
<pre><code>1995.0012 -1.34231 
1995.3030 -3.52533
1995.4030 -7.54334
</code></pre>
<p>and so on, until year 2013. I had the following idea:</p>
<pre><code>f=open('munich_temperatures_average.txt', 'r')
for line in f:
    line = line.strip()
    columns = line.split()
    year = float(columns[0])
    temperature=columns[1]
    if year-1995&lt;1 and year-1995&gt;0:
        print 1995, min(temperature)
</code></pre>
<p>With this I get only the year 1995 data which is what I want in a first step. In a second step I would like to calculate the minimal temperature of the whole dataset in year 1995. By using the script above, I however get the minimum temperature for every line in the datafile. I tried building a list and then appending the temperature but I run into trouble if I want to transform the year into an integer or the temperature into a float etc.</p>
<p>I feel like I am missing the right idea how to calculate the minimum value of a set of values in a column (but not of the whole column).</p>
<p>Any ideas how I could approach said problem? I am trying to learn Python but still at a beginners stage so if there is a way to do the whole thing without using "advanced" commands, I'd be ecstatic!</p>
</div>
<div class="post-text" itemprop="text">
<p>I could do this using the <a href="https://en.wikipedia.org/wiki/Regular_expression" rel="nofollow">regexp</a></p>
<pre><code>import re
from collections import defaultdict

REGEX = re.compile(ur"(\d{4})\.\d+ ([0-9\-\.\+]+)")

f = open('munich_temperatures_average.txt', 'r')
data = defaultdict(list)
for line in f:
    year, temperature = REGEX.findall(line)[0]
    temperature = float(temperature)
    data[year].append(temperature)
print min(data["1995"])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <code>csv</code> module which would make it very easy to read and manipulate each row of your file:</p>
<pre><code>import csv
with open('munich_temperatures_average.txt', 'r') as temperatures:
    for row in csv.reader(temperatures, delimiter=' '):
        print "year", row[0], "temp", row[1]
</code></pre>
<p>Afterwards it is just a matter of finding the min temperature in the rows. See
<a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow">csv module documentation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you just want the years and the temps:</p>
<pre><code>years,temp =[],[]
with open("f.txt") as f:
    for line in f:
        spl = line.rstrip().split()
        years.append(int(spl[0].split(".")[0]))
        temp.append(float(spl[1]))

print years,temp
[1995, 1995, 1995] [-1.34231, -3.52533, -7.54334]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've previously submit another approach, using a <code>numpy</code> library, that could be confusing considering that you are new to python. Sorry for that. As you mentioned yourself, you need to have some kind of record of the year 1995, but you don't need a list for that:</p>
<pre><code>mintemp1995 = None
for line in f:
    line = line.strip()
    columns = line.split()
    year = int(float(columns[0]))
    temp = float(columns[1])
    if year == 1995 and (mintemp1995 is None or temp &lt; mintemp1995):
        mintemp1995 = temp
print "1995:", mintemp1995
</code></pre>
<p>Note the cast to <code>int</code> of the <code>year</code>, so you can directly compare it to 1995, and the condition after it:</p>
<p>If the variable <code>mintemp1995</code> has never set before (is <code>None</code> and therefore, the first entry of the dataset), or the current temperature is lower than that, it replaces it, so you have a record of only the lowest temperature.</p>
</div>
<span class="comment-copy">what is the <code>.0012</code> etc.. after the year?</span>
<span class="comment-copy">Since the data file contains floats such as 1995.00274, using <code>year=int(columns[0])</code> returns "invalid literal for int() with base 10. I tried this variant but it didn't work and a google search doesn't really enlighten me why the program refused to transform the years into integers.</span>
<span class="comment-copy">Edited to fix the conversion error, sorry the delay. Transforming first to <code>float</code> and then to <code>int</code> works fine.</span>
