<div class="post-text" itemprop="text">
<p>I have a loop reading from a com port...</p>
<pre><code>import serial

def main():
    ser = serial.Serial(11, 4800, timeout = 1)
    ser.open()
    lines = []
    while True:
        line = ser.readline()
        print(line)
        lines.append(line)
        # check for **USER**  input without stopping
        # if input == ' ' or '\n' or what have you:
            # break
    ser.close()

if __name__ == '__main__':
    main()
</code></pre>
<p>How can I perform the above pseudo code in the comments above? Is it even possible?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://pyserial.sourceforge.net/pyserial_api.html#serial.Serial.read" rel="nofollow">ser.read()</a> will return the next byte read.</p>
<p>Examples :</p>
<pre><code>x = ser.read()          # read one byte
s = ser.read(10)        # read up to ten bytes (timeout)
line = ser.readline()   # read a '\n' terminated line
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way could be using <a href="https://docs.python.org/release/2.7.2/library/curses.html#curses.window.getch" rel="nofollow"><code>curses.window.getch()</code></a>, but you'd have to write some initialization code around it, e.g. creating a window. Should not be overly hard, though.</p>
<p>Under MS Windows, you can use <a href="https://docs.python.org/3/library/msvcrt.html#msvcrt.getch" rel="nofollow">msvcrt.getch()</a> to read the character; don't forget to check msvcrt.kbhit() if you don't want to block on reading.</p>
</div>
<span class="comment-copy">it is certainly impossible without stopping  for input. Where is the input supposed to come from?</span>
<span class="comment-copy">Me... the user!</span>
<span class="comment-copy">I'm looking for <code>input()</code> without having to press enter. I read something about <code>signal</code> and <code>signal.alarm()</code> in a try: except, but I didn't like it.</span>
<span class="comment-copy">Without getting really low level and monitoring the system events (such as keyboard events) you'll most certainly have a "stop and wait for return" input.</span>
<span class="comment-copy">You're looking for a user input stream which I'm not sure exists within Python.  Also this is very bad programming practice.</span>
<span class="comment-copy">I meant user input... like <code>input('Please enter something and then press enter')</code> without having to press enter</span>
<span class="comment-copy">see edit above.</span>
<span class="comment-copy">I'm also using Python 3.4.1</span>
<span class="comment-copy">I don't think curses.window exists in Python 3.</span>
<span class="comment-copy"><a href="https://docs.python.org/3.3/library/curses.html#curses.window.getch" rel="nofollow noreferrer">Surely it does</a>. But if you're running MS Windows, it is not supported.</span>
<span class="comment-copy">I've updated the answer to include the case of Windows.</span>
<span class="comment-copy">Thanks. It seems like it should work, but it stops when waiting for input and enter key doesn't work.</span>
