<div class="post-text" itemprop="text">
<p>There's something that's bothering me about imports in packages.
Imagine I have the following directory structure:</p>
<pre>
pack
├── __init__.py
├── sub1
│   ├── __init__.py
│   └── mod1.py
└── sub2
    ├── __init__.py
    └── mod2.py
</pre>
<p>Inside mod1.py I have the following code to import mod2.py:</p>
<pre><code># mod1.py
import pack.sub2.mod2
pack.sub2.mod2.helloworld()
</code></pre>
<p>I have a main.py file in the directory containing pack that imports pack/sub1/mod1.py</p>
<p>How does mod1.py have access to pack? pack is not in the same directory as mod1.py. Does python automatically add the topmost package to sys.path?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can investigate this by inspecting <code>sys.path</code> in an interactive interpreter. What you'll find is that the first element of it is the location of the script the interpreter was told to run. This means that when you run your script at the top level (the location of the <code>pack</code> package), that location is added to <code>sys.path</code> automatically. It doesn't have anything to do with the actual package structure, so if you ran <code>mod1.py</code> as a script you would have things break (this is probably why you put your script at the top level!).</p>
<p>Note that in Python 2, you also have the issue of implicit relative imports, which doesn't impact the issue you're asking about, but might come up if you had a few more modules involved. If you added <code>mod3.py</code> to <code>sub1</code>, you could import it from <code>mod1</code> with just <code>import mod3</code>, with the <code>pack.sub1</code> prefix being figured out implicitly. This implicit behavior is generally considered a bad thing, and in Python 3 such implicit relative imports are not allowed (you can also disable them in Python 2 with <code>from __future__ import absolute_import</code>). To import <code>pack.sub1.mod3</code> from <code>pack.sub1.mod1</code> you'd need to either name it in full, or use an explicit relative import: <code>from . import mod3</code></p>
<p>To tie this relative import business back to your question, if you wanted to avoid relying on <code>pack</code> being part of <code>sys.path</code> (or, more realistically, protect against changes to <code>pack</code>'s name), you could modify your import of <code>mod2</code> from <code>mod1</code> to be an explicit relative import. Just use <code>from .. import sub2.mod2</code>.</p>
</div>
<span class="comment-copy">You can always check the sys.path when you are unsure. Python does typically include the <i>current</i> directory, and directories in PYTHONPATH.</span>
<span class="comment-copy">So the sys.path list is the same for main.py as it is for mod1.py when I run main.py as a script?</span>
<span class="comment-copy">Yes, <code>sys.path</code> remains the same for the whole run of the interpreter (unless you modify it with your own code, of course). You get the same <code>sys</code> module no matter where you import it from!</span>
<span class="comment-copy">Why doesn't it work if I run mod1.py from the directory that contains main.py? (instead of running main.py and letting it import mod1.py)</span>
<span class="comment-copy">@asad: It looks like I misstated where <code>sys.path[0]</code> comes from. <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow noreferrer">The relevant docs</a> say it "is the directory containing the script that was used to invoke the Python interpreter." I've edited the answer to give this more-correct explanation.</span>
<span class="comment-copy">from .. import sub2.mod2 doesn't seem to work. I'm getting a SyntaxError.</span>
