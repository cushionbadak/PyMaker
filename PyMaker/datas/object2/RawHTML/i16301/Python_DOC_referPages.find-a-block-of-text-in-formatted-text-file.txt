<div class="post-text" itemprop="text">
<p>I often parse formatted text files using Python (for biology research, but I'll try and ask my question in a way you won't need biology background.)  I deal with a type of file -called a pdb file- that contains 3D structure of a protein in a formatted text. This is an example:</p>
<pre><code>HEADER    CHROMOSOMAL PROTEIN                     02-JAN-87   1UBQ              
TITLE     STRUCTURE OF UBIQUITIN REFINED AT 1.8 ANGSTROMS RESOLUTION
REMARK   1                                                                      
REMARK   1 REFERENCE 1                                                          
REMARK   1  AUTH   S.VIJAY-KUMAR,C.E.BUGG,K.D.WILKINSON,R.D.VIERSTRA,           
REMARK   1  AUTH 2 P.M.HATFIELD,W.J.COOK                                        
REMARK   1  TITL   COMPARISON OF THE THREE-DIMENSIONAL STRUCTURES OF HUMAN,     
REMARK   1  TITL 2 YEAST, AND OAT UBIQUITIN                                     
REMARK   1  REF    J.BIOL.CHEM.                  V. 262  6396 1987              
REMARK   1  REFN                   ISSN 0021-9258

ATOM      1  N   MET A   1      27.340  24.430   2.614  1.00  9.67           N  
ATOM      2  CA  MET A   1      26.266  25.413   2.842  1.00 10.38           C  
ATOM      3  C   MET A   1      26.913  26.639   3.531  1.00  9.62           C  
ATOM      4  O   MET A   1      27.886  26.463   4.263  1.00  9.62           O  
ATOM      5  CB  MET A   1      25.112  24.880   3.649  1.00 13.77           C  
ATOM      6  CG  MET A   1      25.353  24.860   5.134  1.00 16.29           C  
ATOM      7  SD  MET A   1      23.930  23.959   5.904  1.00 17.17           S  
ATOM      8  CE  MET A   1      24.447  23.984   7.620  1.00 16.11           C  
ATOM      9  N   GLN A   2      26.335  27.770   3.258  1.00  9.27           N  
ATOM     10  CA  GLN A   2      26.850  29.021   3.898  1.00  9.07           C  
ATOM     11  C   GLN A   2      26.100  29.253   5.202  1.00  8.72           C  
ATOM     12  O   GLN A   2      24.865  29.024   5.330  1.00  8.22           O  
ATOM     13  CB  GLN A   2      26.733  30.148   2.905  1.00 14.46           C  
ATOM     14  CG  GLN A   2      26.882  31.546   3.409  1.00 17.01           C  
ATOM     15  CD  GLN A   2      26.786  32.562   2.270  1.00 20.10           C  
ATOM     16  OE1 GLN A   2      27.783  33.160   1.870  1.00 21.89           O  
ATOM     17  NE2 GLN A   2      25.562  32.733   1.806  1.00 19.49           N  
ATOM     18  N   ILE A   3      26.849  29.656   6.217  1.00  5.87           N  
ATOM     19  CA  ILE A   3      26.235  30.058   7.497  1.00  5.07           C  
ATOM     20  C   ILE A   3      26.882  31.428   7.862  1.00  4.01           C  
ATOM     21  O   ILE A   3      27.906  31.711   7.264  1.00  4.61           O  
ATOM     22  CB  ILE A   3      26.344  29.050   8.645  1.00  6.55           C  
ATOM     23  CG1 ILE A   3      27.810  28.748   8.999  1.00  4.72           C  
ATOM     24  CG2 ILE A   3      25.491  27.771   8.287  1.00  5.58           C  
ATOM     25  CD1 ILE A   3      27.967  28.087  10.417  1.00 10.83           C
TER      26      ILE A   3

HETATM  604  O   HOH A  77      45.747  30.081  19.708  1.00 12.43           O  
HETATM  605  O   HOH A  78      19.168  31.868  17.050  1.00 12.65           O  
HETATM  606  O   HOH A  79      32.010  38.387  19.636  1.00 12.83           O  
HETATM  607  O   HOH A  80      42.084  27.361  21.953  1.00 22.27           O   
END
</code></pre>
<p><code>ATOM</code> marks beginning of a line that contains atomic coordinates. <code>TER</code> marks end of coordinates. I want to take the whole block of text that contains atomic coordinates so I use:</p>
<pre><code>import re

f = open('example.pdb', 'r+')
content = f.read()

coor = re.search('ATOM.*TER', content) #take everthing between ATOM and TER
</code></pre>
<p>But it matches nothing. There must be a way of taking a whole block of text by using regex. I also don't understand why this regex pattern doesn't work. Help is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should match (but I haven't actually tested it):</p>
<pre><code>coor = re.search('ATOM.*TER', content, re.DOTALL)
</code></pre>
<p>If you read the <a href="https://docs.python.org/3/library/re.html#re.S" rel="nofollow">documentation on <code>DOTALL</code></a>, you will understand why it wasn't working.</p>
<p>A still better way of writing the above is</p>
<pre><code>coor = re.search(r'^ATOM.*^TER', content, re.MULTILINE | re.DOTALL)
</code></pre>
<p>where it is required that <code>ATOM</code> and <code>TER</code> come after newlines, and where <a href="https://docs.python.org/3/library/re.html#raw-string-notation" rel="nofollow">raw string notation</a> is being used, which is customary for regular expressions (though it won't make any difference in this case).</p>
<p>You could also avoid regular expressions altogether:</p>
<pre><code>start = content.index('\nATOM')
end = content.index('\nTER', start)
coor = content[start:end]
</code></pre>
<p>(This will actually not include the <code>TER</code> in the result, which may be better).</p>
</div>
<div class="post-text" itemprop="text">
<p>You need <code>(?s)</code> modifier:</p>
<pre><code>import re

f = open('example.pdb', 'w+')
content = f.read()

coor = re.search('(?s)ATOM.*TER', content)
print coor;
</code></pre>
<p>This will match everything - newline included - with <code>.*</code>.</p>
<p>Note that if you only need anything in between (<code>ATOM</code> inclusive, <code>TER</code> exclusive), just change to a positive lookahead for <code>TER</code>:</p>
<pre><code>'(?s)ATOM.*(?=TER)'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>     import re
     pattern=re.compile(r"ATOM(.*?)TER")
     print pattern.findall(string)
</code></pre>
<p>This should do it.</p>
</div>
<div class="post-text" itemprop="text">
<p>I wouldn't use a regex, instead itertool's <code>dropwhile</code> and <code>takewhile</code> which is more efficient than loading the entire file into memory to perform a regex operation. (eg, we just ignore the start of the file until ATOM, then we don't need to read from the file further after encountering TER).</p>
<pre><code>from itertools import dropwhile, takewhile

with open('example.pdb') as fin:
    until_atom = dropwhile(lambda L: not L.startswith('ATOM'), fin)
    atoms = takewhile(lambda L: L.startswith('ATOM'), until_atom)
    for atom in atoms:
        print atom,
</code></pre>
<p>So this ignores lines while they don't start with ATOM, then keeps taking lines from that point while they still start with ATOM. You could change that condition to be <code>lambda L: not L.startswith('TER')</code> if you want.</p>
<p>Instead of printing, you could use:</p>
<pre><code>all_atom_text = ''.join(atoms)
</code></pre>
<p>to get one large text block.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about a non-regular-expression alternative. It can be achieved with a relatively simple loop, and a little bit of state. Example:</p>
<pre><code># Gather all sets of ATOM-TER in all_coors (if there are multiple per file).
all_coors = []

f = open('example.pdb', 'w+')
coor = None
in_atom = False
for line in f:
    if not in_atom and line.startswith('ATOM'):
        # Found first ATOM, start collecting results.
        in_atom = True
        coor = []

    elif in_atom and line.startswith('TER'):
        # Found TER, stop collecting results.
        in_atom = False
        # Save collected results.
        all_coors.append(''.join(coor))
        coor = None

    if in_atom:
        # Collect ATOM result.
        coor.append(line)
</code></pre>
</div>
<span class="comment-copy">Thanks for the response. I should have definitely checked re.DOTALL. This works exactly as I intended initially. Option without regex does not work as well because there might be more than one ATOM ... TER block in a file an as far as I can tell it only gives until first TER.</span>
<span class="comment-copy">The grouping was not there.Also findall works better as it gives all instances.</span>
<span class="comment-copy">This works when I add 're.DOTALL'.</span>
<span class="comment-copy">Good point. I need to compare speed when I am processing a large number of files. Thank you.</span>
<span class="comment-copy">I used something very similar, reading line by line and taking if line starts with ATOM until it starts with TER. I thought code looks cleaner by regex. But also I think it would be faster than a for loop. (I have not checked)</span>
