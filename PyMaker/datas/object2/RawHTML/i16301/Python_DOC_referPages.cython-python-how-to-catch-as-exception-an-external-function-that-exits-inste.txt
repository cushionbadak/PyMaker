<div class="post-text" itemprop="text">
<p>I'm using Cython to interface an external C function.  The function (a science code with 100k code lines) internally checks for invalid conditions and "exits" if they occur.</p>
<p>How can I get Cython to detect and raise an exception when the external function "exits" instead of "returns"?</p>
<p><strong>Edit:</strong> user2864740 is right, cython actually exits.  (I was running the function inside a python mulitprocessing.Process.  To simplify I got rid of multiprocessing.)  The question now is:</p>
<p>How can I prevent the "exit()" call from the external library to exit Cython (or Python, at a later point).  A try-except construct doesn't catch this.  Can this be caught as exception instead of the whole process dying?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>There are guidelines for "Joining zombie processes" in the <code>multiprocessing</code> documentation.
<a href="https://docs.python.org/3/library/multiprocessing.html#programming-guidelines" rel="nofollow">https://docs.python.org/3/library/multiprocessing.html#programming-guidelines</a>
If in the master process you find that the worker process is defunct, you can raise an exception.</p>
<p>Alternatively you could try registering an <code>atexit</code> handler from within the Cython code
<a href="http://linux.die.net/man/3/atexit" rel="nofollow">http://linux.die.net/man/3/atexit</a></p>
<p>A third idea is to use some kind of <code>LD_PRELOAD</code> library to override the <code>exit</code> function so that it raises a Python exception.</p>
</div>
<span class="comment-copy">I'm a bit surprised that doesn't also exit Cython..</span>
<span class="comment-copy">I cannot get an atexit function to be executed after the "exit" in the external library, just like a try-except construction doesn't catch the exception.  The third suggestion works, of course, but it's the least favorable.  The question remains: how to catch the "exit" exception...</span>
