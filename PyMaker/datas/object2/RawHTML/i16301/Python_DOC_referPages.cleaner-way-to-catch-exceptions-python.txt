<div class="post-text" itemprop="text">
<p>I often see comments on other Stack Overflow questions about how the use of <code>except: pass</code> is discouraged. Why is this bad? Sometimes I just don't care what the errors, are and I want to just continue with the code.</p>
<pre><code>try:
    something
except:
    pass
</code></pre>
<p>Why is using an <code>except: pass</code> block bad? What makes it bad? Is it the fact that I <code>pass</code> on an error or that I <code>except</code> any error?</p>
</div>
<div class="post-text" itemprop="text">
<p>As you correctly guessed, there are two sides to it: Catching <em>any</em> error by specifying no exception type after <code>except</code>, and simply passing it without taking any action.</p>
<p>My explanation is “a bit” longer—so tl;dr it breaks down to this:</p>
<ol>
<li><strong>Don’t catch <em>any</em> error</strong>. Always specify which exceptions you are prepared to recover from and only catch those.</li>
<li><strong>Try to avoid passing in except blocks</strong>. Unless explicitly desired, this is usually not a good sign.</li>
</ol>
<p>But let’s go into detail:</p>
<h3>Don’t catch <em>any</em> error</h3>
<p>When using a <code>try</code> block, you usually do this because you know that there is a chance of an exception being thrown. As such, you also already have an approximate idea of <em>what</em> can break and what exception can be thrown. In such cases, you catch an exception because you can <em>positively recover</em> from it. That means that you are prepared for the exception and have some alternative plan which you will follow in case of that exception.</p>
<p>For example, when you ask for the user to input a number, you can convert the input using <code>int()</code> which might raise a <a href="http://docs.python.org/3/library/exceptions.html#ValueError"><code>ValueError</code></a>. You can easily recover that by simply asking the user to try it again, so catching the <code>ValueError</code> and prompting the user again would be an appropriate plan. A different example would be if you want to read some configuration from a file, and that file happens to not exist. Because it is a configuration file, you might have some default configuration as a fallback, so the file is not exactly necessary. So catching a <a href="http://docs.python.org/3/library/exceptions.html#FileNotFoundError"><code>FileNotFoundError</code></a> and simply applying the default configuration would be a good plan here. Now in both these cases, we have a very specific exception we expect and have an equally specific plan to recover from it. As such, in each case, we explicitly only <code>except</code> <em>that certain</em> exception.</p>
<p>However, if we were to catch <em>everything</em>, then—in addition to those exceptions we are prepared to recover from—there is also a chance that we get exceptions that we didn’t expect, and which we indeed cannot recover from; or shouldn’t recover from.</p>
<p>Let’s take the configuration file example from above. In case of a missing file, we just applied our default configuration, and might decided at a later point to automatically save the configuration (so next time, the file exists). Now imagine we get a <a href="http://docs.python.org/3/library/exceptions.html#IsADirectoryError"><code>IsADirectoryError</code></a>, or a <a href="http://docs.python.org/3/library/exceptions.html#PermissionError"><code>PermissionError</code></a> instead. In such cases, we probably do not want to continue; we could still apply our default configuration, but we later won’t be able to save the file. And it’s likely that the user meant to have a custom configuration too, so using the default values is likely not desired. So we would want to tell the user about it immediately, and probably abort the program execution too. But that’s not something we want to do somewhere deep within some small code part; this is something of application-level importance, so it should be handled at the top—so let the exception bubble up.</p>
<p>Another simple example is also mentioned in the <a href="http://docs.python.org/2/howto/doanddont.html#except">Python 2 idioms</a> document. Here, a simple typo exists in the code which causes it to break. Because we are catching <em>every</em> exception, we also catch <a href="http://docs.python.org/3/library/exceptions.html#NameError"><code>NameError</code>s</a> and <a href="http://docs.python.org/3/library/exceptions.html#SyntaxError"><code>SyntaxError</code>s</a>. Both are mistakes that happen to us all while programming; and both are mistakes we absolutely don’t want to include when shipping the code. But because we also caught those, we won’t even know that they occurred there and lose any help to debug it correctly.</p>
<p>But there are also more dangerous exceptions which we are unlikely prepared for. For example <a href="http://docs.python.org/3/library/exceptions.html#SystemError">SystemError</a> is usually something that happens rarely and which we cannot really plan for; it means there is something more complicated going on, something that likely prevents us from continuing the current task.</p>
<p>In any case, it’s very unlikely that you are prepared for everything in a small scale part of the code, so that’s really where you should only catch those exceptions you are prepared for. Some people suggest to at least catch <a href="http://docs.python.org/3/library/exceptions.html#Exception"><code>Exception</code></a> as it won’t include things like <code>SystemExit</code> and <code>KeyboardInterrupt</code> which <em>by design</em> are to terminate your application, but I would argue that this is still far too unspecific. There is only one place where I personally accept catching <code>Exception</code> or just <em>any</em> exception, and that is in a single global application-level exception handler which has the single purpose to log any exception we were not prepared for. That way, we can still retain as much information about unexpected exceptions, which we then can use to extend our code to handle those explicitly (if we can recover from them) or—in case of a bug—to create test cases to make sure it won’t happen again. But of course, that only works if we only ever caught those exceptions we were already expecting, so the ones we didn’t expect will naturally bubble up.</p>
<h3>Try to avoid passing in except blocks</h3>
<p>When explicitly catching a small selection of specific exceptions, there are many situations in which we will be fine by simply doing nothing. In such cases, just having <code>except SomeSpecificException: pass</code> is just fine. Most of the time though, this is not the case as we likely need some code related to the recovery process (as mentioned above). This can be for example something that retries the action again, or to set up a default value instead.</p>
<p>If that’s not the case though, for example because our code is already structured to repeat until it succeeds, then just passing is good enough. Taking our example from above, we might want to ask the user to enter a number. Because we know that users like to not do what we ask them for, we might just put it into a loop in the first place, so it could look like this:</p>
<pre><code>def askForNumber ():
    while True:
        try:
            return int(input('Please enter a number: '))
        except ValueError:
            pass
</code></pre>
<p>Because we keep trying until no exception is thrown, we don’t need to do anything special in the except block, so this is fine. But of course, one might argue that we at least want to show the user some error message to tell him why he has to repeat the input.</p>
<p>In many other cases though, just passing in an <code>except</code> is a sign that we weren’t really prepared for the exception we are catching. Unless those exceptions are simple (like <code>ValueError</code> or <code>TypeError</code>), and the reason why we can pass is obvious, try to avoid just passing. If there’s really nothing to do (and you are absolutely sure about it), then consider adding a comment why that’s the case; otherwise, expand the except block to actually include some recovery code.</p>
<h3><code>except: pass</code></h3>
<p>The worst offender though is the combination of both. This means that we are willingly catching <em>any</em> error although we are absolutely not prepared for it <strong>and</strong> we also don’t do anything about it. You <em>at least</em> want to log the error and also likely reraise it to still terminate the application (it’s unlikely you can continue like normal after a MemoryError). Just passing though will not only keep the application somewhat alive (depending where you catch of course), but also throw away all the information, making it impossible to discover the error—which is especially true if you are not the one discovering it.</p>
<hr/>
<p>So the bottom line is: Catch only exceptions you really expect and are prepared to recover from; all others are likely either mistakes you should fix, or something you are not prepared for anyway. Passing <em>specific</em> exceptions is fine if you really don’t need to do something about them. In all other cases, it’s just a sign of presumption and being lazy. And you definitely want to fix that.</p>
</div>
<div class="post-text" itemprop="text">
<p>The main problem here is that it ignores all and any error: Out of memory, CPU is burning, user wants to stop, program wants to exit, Jabberwocky is killing users.</p>
<p>This is way too much. In your head, you're thinking "I want to ignore this network error". If something <em>unexpected</em> goes wrong, then your code silently continues and breaks in completely unpredictable ways that no one can debug.</p>
<p>That's why you should limit yourself to ignoring specifically only some errors and let the rest pass.</p>
</div>
<div class="post-text" itemprop="text">
<p>Executing your pseudo code <em>literally</em> does not even give any error:</p>
<pre><code>try:
    something
except:
    pass
</code></pre>
<p>as if it is a perfectly valid piece of code, instead of throwing a <code>NameError</code>. I hope this is not what you want.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h1>Why is “except: pass” a bad programming practice?</h1>
<p>Why is this bad?</p>
<pre><code>try:
    something
except:
    pass
</code></pre>
</blockquote>
<p>This catches every possible exception, including <code>GeneratorExit</code>, <code>KeyboardInterrupt</code>, and <code>SystemExit</code> - which are exceptions you probably don't intend to catch. It's the same as catching <code>BaseException</code>.</p>
<pre><code>try:
    something
except BaseException:
    pass
</code></pre>
<p><a href="https://bugs.python.org/issue7391" rel="noreferrer">Older</a> versions of the <a href="https://docs.python.org/2.7/howto/doanddont.html#except" rel="noreferrer">documentation say</a>:</p>
<blockquote>
<p>Since every error in Python raises an exception, using <code>except:</code> can make many programming errors look like runtime problems, which hinders the debugging process.</p>
</blockquote>
<h2>Python Exception Hierarchy</h2>
<p>If you catch a parent exception class, you also catch all of their child classes. It is much more elegant to only catch the exceptions you are prepared to handle.</p>
<p>Here's the Python 3 <a href="https://docs.python.org/library/exceptions.html#exception-hierarchy" rel="noreferrer">exception hierarchy</a> - do you really want to catch 'em all?:</p>
<pre><code>BaseException
 +-- SystemExit
 +-- KeyboardInterrupt
 +-- GeneratorExit
 +-- Exception
      +-- StopIteration
      +-- StopAsyncIteration
      +-- ArithmeticError
      |    +-- FloatingPointError
      |    +-- OverflowError
      |    +-- ZeroDivisionError
      +-- AssertionError
      +-- AttributeError
      +-- BufferError
      +-- EOFError
      +-- ImportError
           +-- ModuleNotFoundError
      +-- LookupError
      |    +-- IndexError
      |    +-- KeyError
      +-- MemoryError
      +-- NameError
      |    +-- UnboundLocalError
      +-- OSError
      |    +-- BlockingIOError
      |    +-- ChildProcessError
      |    +-- ConnectionError
      |    |    +-- BrokenPipeError
      |    |    +-- ConnectionAbortedError
      |    |    +-- ConnectionRefusedError
      |    |    +-- ConnectionResetError
      |    +-- FileExistsError
      |    +-- FileNotFoundError
      |    +-- InterruptedError
      |    +-- IsADirectoryError
      |    +-- NotADirectoryError
      |    +-- PermissionError
      |    +-- ProcessLookupError
      |    +-- TimeoutError
      +-- ReferenceError
      +-- RuntimeError
      |    +-- NotImplementedError
      |    +-- RecursionError
      +-- SyntaxError
      |    +-- IndentationError
      |         +-- TabError
      +-- SystemError
      +-- TypeError
      +-- ValueError
      |    +-- UnicodeError
      |         +-- UnicodeDecodeError
      |         +-- UnicodeEncodeError
      |         +-- UnicodeTranslateError
      +-- Warning
           +-- DeprecationWarning
           +-- PendingDeprecationWarning
           +-- RuntimeWarning
           +-- SyntaxWarning
           +-- UserWarning
           +-- FutureWarning
           +-- ImportWarning
           +-- UnicodeWarning
           +-- BytesWarning
           +-- ResourceWarning
</code></pre>
<h2>Don't Do this</h2>
<p>If you're using this form of exception handling:</p>
<pre><code>try:
    something
except: # don't just do a bare except!
    pass
</code></pre>
<p>Then you won't be able to interrupt your <code>something</code> block with Ctrl-C. Your program will overlook every possible Exception inside the <code>try</code> code block. </p>
<p>Here's another example that will have the same undesirable behavior:</p>
<pre><code>except BaseException as e: # don't do this either - same as bare!
    logging.info(e)
</code></pre>
<p>Instead, try to only catch the specific exception you know you're looking for. For example, if you know you might get a value-error on a conversion:</p>
<pre><code>try:
    foo = operation_that_includes_int(foo)
except ValueError as e:
    if fatal_condition(): # You can raise the exception if it's bad,
        logging.info(e)   # but if it's fatal every time,
        raise             # you probably should just not catch it.
    else:                 # Only catch exceptions you are prepared to handle.
        foo = 0           # Here we simply assign foo to 0 and continue. 
</code></pre>
<h2>Further Explanation with another example</h2>
<p>You might be doing it because you've been web-scraping and been getting say, a <code>UnicodeError</code>, but because you've used the broadest Exception catching, your code, which may have other fundamental flaws, will attempt to run to completion, wasting bandwidth, processing time, wear and tear on your equipment, running out of memory, collecting garbage data, etc. </p>
<p>If other people are asking you to complete so that they can rely on your code, I understand feeling compelled to just handle everything. But if you're willing to fail noisily as you develop, you will have the opportunity to correct problems that might only pop up intermittently, but that would be long term costly bugs. </p>
<p>With more precise error handling, you code can be more robust.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import this
</code></pre>
<blockquote>
<p>The Zen of Python, by Tim Peters</p>
<p>Beautiful is better than ugly.<br/>
  Explicit is better than implicit.<br/>
  Simple is better than complex.<br/>
  Complex is better than complicated.<br/>
  Flat is better than nested.<br/>
  Sparse is better than dense.<br/>
  Readability counts.<br/>
  Special cases aren't special enough to break the rules.<br/>
  Although practicality beats purity.<br/>
<strong>Errors should never pass silently.</strong><br/>
  Unless explicitly silenced.<br/>
  In the face of ambiguity, refuse the temptation to guess.<br/>
  There should be one-- and preferably only one --obvious way to do it.<br/>
  Although that way may not be obvious at first unless you're Dutch.<br/>
  Now is better than never.<br/>
  Although never is often better than <em>right</em> now.<br/>
  If the implementation is hard to explain, it's a bad idea.<br/>
  If the implementation is easy to explain, it may be a good idea.<br/>
  Namespaces are one honking great idea -- let's do more of those!</p>
</blockquote>
<p>So, here is my opinion. Whenever you find an error, you should do something to handle it, i.e. write it in logfile or something else. At least, it informs you that there used to be a error.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use at least <code>except Exception:</code> to avoid catching system exceptions like <code>SystemExit</code> or <code>KeyboardInterrupt</code>. Here's <a href="http://docs.python.org/2/library/exceptions.html">link</a> to docs.</p>
<p>In general you should define explicitly exceptions you want to catch, to avoid catching unwanted exceptions. You should know what exceptions you <em>ignore</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, it violates two principles of <a href="https://www.python.org/dev/peps/pep-0020/#id3" rel="nofollow noreferrer">Zen of Python</a>:</p>
<ul>
<li><strong>Explicit is better than implicit</strong></li>
<li><strong>Errors should never pass silently</strong></li>
</ul>
<p>What it means, is that you intentionally make your error pass silently. Moreover, you don't event know, which error exactly occurred, because <code>except: pass</code> will catch any exception. </p>
<p>Second, if we try to abstract away from the Zen of Python, and speak in term of just sanity, you should know, that using <code>except:pass</code> leaves you with <strong>no knowledge and control</strong> in your system. The rule of thumb is to raise an exception, if error happens, and take appropriate actions. If you don't know in advance, what actions these should be, at least log the error somewhere (and better re-raise the exception):</p>
<pre><code>try:
    something
except:
    logger.exception('Something happened')
</code></pre>
<p>But, usually, <strong>if you try to catch any exception, you are probably doing something wrong!</strong> </p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>except:pass</code> construct essentially silences any and all exceptional conditions that come up while the code covered in the <code>try:</code> block is being run.</p>
<p><strong>What makes this bad practice is that it usually isn't what you really want.</strong> More often, some specific condition is coming up that you want to silence, and <code>except:pass</code> is too much of a blunt instrument. It will get the job done, but it will also mask other error conditions that you likely haven't anticipated, but may very well want to deal with in some other way.</p>
<p>What makes this particularly important in Python is that by the idioms of this language, <strong>exceptions are not necessarily errors</strong>. They're often used this way, of course, just as in most languages. But Python in particular has occasionally used them to implement an alternative exit path from some code tasks which isn't really part of the normal running case, but is still known to come up from time to time and may even be expected in most cases. <code>SystemExit</code> has already been mentioned as an old example, but the most common example nowadays may be <code>StopIteration</code>. Using exceptions this way caused a lot of controversy, especially when iterators and generators were first introduced to Python, but eventually the idea prevailed.</p>
</div>
<div class="post-text" itemprop="text">
<p>The #1 reason has already been stated - it hides errors that you did not expect. </p>
<p>(#2) - <strong>It makes your code difficult for others to read and understand.</strong> If you catch a FileNotFoundException when you are trying to read a file, then it is pretty obvious to another developer what functionality the 'catch' block should have. If you do not specify an exception, then you need additional commenting to explain what the block should do.</p>
<p>(#3) - <strong>It demonstrates lazy programming.</strong> If you use the generic try/catch, it indicates either that you do not understand the possible run-time errors in your program, or that you do not know what exceptions are possible in Python. Catching a specific error shows that you understand both your program and the range of errors that Python throws. This is more likely to make other developers and code-reviewers trust your work.</p>
</div>
<div class="post-text" itemprop="text">
<p>So, what output does this code produce?</p>
<pre><code>fruits = [ 'apple', 'pear', 'carrot', 'banana' ]

found = False
try:
     for i in range(len(fruit)):
         if fruits[i] == 'apple':
             found = true
except:
     pass

if found:
    print "Found an apple"
else:
    print "No apples in list"
</code></pre>
<p>Now imagine the <code>try</code>-<code>except</code> block is hundreds of lines of calls to a complex object hierarchy, and is itself called in the middle of large program's call tree. When the program goes wrong, where do you start looking?</p>
</div>
<div class="post-text" itemprop="text">
<p>In general, you can classify any error/exception in one of <a href="http://blogs.msdn.com/b/ericlippert/archive/2008/09/10/vexing-exceptions.aspx">three categories</a>:</p>
<ul>
<li><p><strong>Fatal</strong>: Not your fault, you cannot prevent them, you cannot recover from them. You should certainly not ignore them and continue, and leave your program in an unknown state. Just let the error terminate your program, there is nothing you can do.</p></li>
<li><p><strong>Boneheaded</strong>: Your own fault, most likely due to an oversight, bug or programming error. You should fix the bug. Again, you should most certainly not ignore and continue.</p></li>
<li><p><strong>Exogenous</strong>: You can expect these errors in exceptional situations, such as <em>file not found</em> or <em>connection terminated</em>. You should explicitly handle these errors, and only these.</p></li>
</ul>
<p>In all cases <code>except: pass</code> will only leave your program in an unknown state, where it can cause more damage.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply put, if an exception or error is thrown, something's wrong.  It may not be something very wrong, but creating, throwing, and catching errors and exceptions just for the sake of using goto statements is not a good idea, and it's rarely done.  99% of the time, there was a problem somewhere.</p>
<p>Problems need to be dealt with.  Just like how it is in life, in programming, if you just leave problems alone and try to ignore them, they don't just go away on their own a lot of times; instead they get bigger and multiply.  To prevent a problem from growing on you and striking again further down the road, you either 1) eliminate it and clean up the mess afterwards, or 2) contain it and clean up the mess afterwards.</p>
<p>Just ignoring exceptions and errors and leaving them be like that is a good way to experience memory leaks, outstanding database connections, needless locks on file permissions, etc.</p>
<p>On rare occasions, the problem is so miniscule, trivial, and - aside from needing a try...catch block - <strong>self-contained</strong>, that there really is just no mess to be cleaned up afterwards.  These are the only occasions when this best practice doesn't necessarily apply.  In my experience, this has generally meant that whatever the code is doing is basically petty and forgoable, and something like retry attempts or special messages are worth neither the complexity nor holding the thread up on.</p>
<p>At my company, the rule is to almost always do <em>something</em> in a catch block, and if you don't do anything, then you must always place a comment with a very good reason why not.  You must never pass or leave an empty catch block when there is anything to be done.</p>
</div>
<div class="post-text" itemprop="text">
<p>In my opinion errors have a reason to appear, that my sound stupid, but thats the way it is. Good programming only raises errors when you have to handle them. Also, as i read some time ago, "the pass-Statement is a Statement that Shows code will be inserted later", so if you want to have an empty except-statement feel free to do so, but for a good program there will be a part missing. because you dont handle the things you should have. Appearing exceptions give you the chance to correct input data or to change your data structure so these exceptions dont occur again (but in most cases (Network-exceptions, General input-exceptions) exceptions indicate that the next parts of the program wont execute well. For example a NetworkException can indicate a broken network-connection and the program cant send/recieve data in the next program steps.</p>
<p>But using a pass block for only one execption-block is valid, because you still differenciate beetween the types of exceptions, so if you put all exception-blocks in one, it is not empty:</p>
<pre><code>try:
    #code here
except Error1:
    #exception handle1

except Error2:
    #exception handle2
#and so on
</code></pre>
<p>can be rewritten that way:</p>
<pre><code>try:
    #code here
except BaseException as e:
    if isinstance(e, Error1):
        #exception handle1

    elif isinstance(e, Error2):
        #exception handle2

    ...

    else:
        raise
</code></pre>
<p>So even multiple except-blocks with pass-statements can result in code, whose structure handles special types of exceptions.</p>
</div>
<div class="post-text" itemprop="text">
<p>All comments brought up so far are valid. Where possible you need to specify what exactly exception you want to ignore. Where possible you need to analyze what caused exception, and only ignore what you meant to ignore, and not the rest. If exception causes application to "crash spectacularly", then be it, because it's much more important to know the unexpected happened when it happened, than concealing that the problem ever occurred.</p>
<p>With all that said, do not take any programming practice as a paramount. This is stupid. There always is the time and place to do ignore-all-exceptions block.</p>
<p>Another example of idiotic paramount is usage of <code>goto</code> operator. When I was in school, our professor taught us <code>goto</code> operator just to mention that thou shalt not use it, EVER. Don't believe people telling you that xyz should never be used and there cannot be a scenario when it is useful. There always is.</p>
</div>
<div class="post-text" itemprop="text">
<p>​Handling errors is very important in programming. You do need to show the user what went wrong. In very few cases you can ignore the errors. This is it is very bad programming practice.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since it hasn't been mentioned yet, it's better style to use <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress" rel="nofollow noreferrer"><code>contextlib.suppress</code></a>:</p>
<pre><code>with suppress(FileNotFoundError):
    os.remove('somefile.tmp')
</code></pre>
<p>Notice that in the example provided, <em>the program state remains the same, whether or not the exception occurs.</em> That is to say, <code>somefile.tmp</code> always becomes non-existent.</p>
</div>
<span class="comment-copy">It the very least, I would suggest you log it, so you KNOW what problems you're ignoring. Use the <code>logging</code> module at DEBUG level to avoid them streaming out in production, but keep them available in development.</span>
<span class="comment-copy">"You at least want to log the error and also likely reraise it to still terminate the application". Can you demonstrate how to "reraise" an exception to let it continue bubbling up even after catching it? This seems useful to me to add in some custom error messages while still letting the exception force the application to quit.</span>
<span class="comment-copy">This helps clarify: they use the blanket <code>except</code>, but then call <code>raise</code> with no arguments to continue letting the exception bubble up, terminating the application. I like it: <a href="http://www.ianbicking.org/blog/2007/09/re-raising-exceptions.html" rel="nofollow noreferrer">ianbicking.org/blog/2007/09/re-raising-exceptions.html</a>. Looks like a solid exception to the rule about not using the blanket <code>except</code>.</span>
<span class="comment-copy">@GabrielStaples Yeah, a caught exception can be rethrown using <code>raise</code>. You usually would only do this in few locations within your application to log the exception though.</span>
<span class="comment-copy">-1 Argument from authority doesn't actually <i>explain</i> anything.  Authority can be wrong.</span>
<span class="comment-copy">what @Izkata wrote, AND, one line below it, the same authority writes: "Unless explicitly silenced", which is exactly what except: pass does.</span>
<span class="comment-copy">@OfriRaviv No, isn't the error passing <i>implicitly</i>?  Explicitly would require naming the error that ought to pass silently, that is, <i>being explicit about it</i>.  This is not what except:pass does.</span>
<span class="comment-copy">...Unless explicitly silenced, which is the case with OP.</span>
<span class="comment-copy">I want to know your solution. In fact, when really nothing needs doing, I just list the errors in except and make comments and write logs. Then just pass.</span>
<span class="comment-copy">@Hyperboreus, I don't think, that catching all and any errors is explicitly silencing them, i.e, you don't even know, what do u catch.</span>
<span class="comment-copy">"Because some guy says so" is not really an answer to a "Why?" question.</span>
<span class="comment-copy">Er, thanks to folks who 'corrected' this, but please don't - it's intentionally wrong, in the 'interview question' sense. It's possibly more subtle that it first appears - try it. My point is that squashing 'all' exceptions, especially in Python, makes debugging difficult, even in a trivial dozen lines of code.</span>
<span class="comment-copy">You forgot the fourth category: User input errors.</span>
<span class="comment-copy">The "goto" case is stylistic and a matter of opinion, whereas "except: pass" is usually factually wrong. It assumes that if someone were to, for example, "kill -TERM" your process at that point then it should ignore it. At the very least that's bad behaviour.</span>
<span class="comment-copy">@Score_Under yet there are cases where this is appropriate to use. For example when a function you are calling is supplemental, of unknown origin/author, does not affect core functionality, but if crashes could cause trouble. I do realize you would argue that such calls should be properly researched and analyzed, but in real life it is not always possible.</span>
<span class="comment-copy">Still, if I want to terminate your process, kill -9 should not be the only reliable option.</span>
