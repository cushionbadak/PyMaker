<div class="post-text" itemprop="text">
<p>As anyone would know python will stop or pause at <code>input()</code>, this makes it hard to get input with a timeout, this is possible:</p>
<pre><code>import tkinter as tk

class ExampleApp(tk.Tk):

    def __init__(self):
        tk.Tk.__init__(self)
        def well():
            whatis = entrybox.get()
            if whatis == "": # Here you can check for what the input should be, e.g. letters only etc.
                print ("You didn't enter anything...")
            else:
                print ("AWESOME WORK DUDE")
            app.destroy()
        global label2
        label2 = tk.Button(text = "quick, enter something and click here (the countdown timer is below)", command = well)
        label2.pack()
        entrybox = tk.Entry()
        entrybox.pack()
        self.label = tk.Label(self, text="", width=10)
        self.label.pack()
        self.remaining = 0
        self.countdown(10)

    def countdown(self, remaining = None):
        if remaining is not None:
            self.remaining = remaining

        if self.remaining &lt;= 0:
            app.destroy()
            print ("OUT OF TIME")


        else:
            self.label.configure(text="%d" % self.remaining)
            self.remaining = self.remaining - 1
            self.after(1000, self.countdown)

if __name__ == "__main__":
    app = ExampleApp()
    app.mainloop()
</code></pre>
<p>My real question is why does the code pause at <code>input</code> and mainly what benefits are there from this?</p>
<p>Surely if we can get around this (for just about anything I presume) then it is silly to have the code hold up like that. All opinions welcome, give me your view.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe there should be a built in function to disable the pause. This would make multithreading much easier, but the pause is handy when you have to test some variable that is created with the input:</p>
<pre><code>input1 = input("enter a big number")
if input1 &gt;= 8:
    print("That is a big number")
else:
    print("That is tiny...")
</code></pre>
<p>if this was run without a pause you would get an error input1 is not defined, so the pause is crucial. hope this is helpful.</p>
</div>
<div class="post-text" itemprop="text">
<p>One benefit? If your code comes across a variable that should have been set, but doesn't exist because the user hasn't entered a value yet, it would raise an error. For example:</p>
<pre><code>legal_age = 21
age = int(input("Your age: "))

if age &gt;= legal_age:
    print("You can drink legally!")
else:
    print("You can't drink yet!")
</code></pre>
<p>A basic sample, but none the less - how would Python use the age variable if it doesn't have a value yet, because it didn't pause to wait for an input?</p>
<p>Threads can be used fairly easily for processes that you want to happen behind an input, though.</p>
</div>
<span class="comment-copy">OK, please go easy on the downvotes, I knew this would be a controversial question, but surely it still has some relevance...</span>
<span class="comment-copy">Did you read the <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer">documentation on the <code>input()</code> function</a>? Can you explain to us what you expected to happen when using the function, and what should happen instead of pausing?</span>
<span class="comment-copy">I have now... Well, I suppose I would like it to perhaps have a built in option which could disable the pause, I suppose the pause is usually essential as the variable which is set to the input can't get used before the input is given, but for other purposes (like input with timeout) it could be handy to have no pause.</span>
<span class="comment-copy">But you have a <i>GUI</i> here; you generally don't use stdin (console) as input for a GUI, you use widgets (buttons, entry boxes, etc.) to get user input. <code>input()</code> is not a tool you want.</span>
<span class="comment-copy">As Martijn wrote, <code>input()</code> is to be used for console (command line) application, not for GUI applications. Also the <code>print()</code> functions do not fit there. They may be occasionaly used for debugging the GUI application when the application is launched from a console or when you capture the stdout to some other window.</span>
<span class="comment-copy">Yeah that makes sense, I realised that, and think that the hold is useful here, but should have another option as well.</span>
