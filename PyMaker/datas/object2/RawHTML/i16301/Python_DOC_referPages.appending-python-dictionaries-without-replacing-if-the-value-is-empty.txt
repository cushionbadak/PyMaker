<div class="post-text" itemprop="text">
<pre><code>dict1 = {"Country":"",
         "State":"California"}

dict2 = {"Country":"United_states",
        "State":""}
</code></pre>
<p>I need to add <code>dict2</code>'s value to <code>dict1</code> so that <code>dict1</code> will be </p>
<pre><code>dict1
&gt;&gt;&gt;{u"Country":"United_states", 
    u"State":"California"}
</code></pre>
<p>If I just do <code>dict1.update(dict2)</code> or something similar, it will end up </p>
<pre><code>dict1
&gt;&gt;&gt;{u"Country":"United_states", 
    u"State":""}
</code></pre>
<p>As the empty value in <code>dict2</code> 's "State" overwrites the "States" key</p>
<p>Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way to do this is probably with a dict comprehension that filters out the empty values:</p>
<pre><code>dict1.update({k: v for k, v in dict2.items() if v})
</code></pre>
<hr/>
<p>If you don't understand how this works, you can translate the dict comprehension into an explicit loop:</p>
<pre><code>filtered_dict2 = {}
for k, v in dict2.items():
    if v:
        filtered_dict2[k] = v
dict1.update(filtered_dict2)
</code></pre>
<hr/>
<p>If you find yourself doing this a lot, you might want to write a wrapper function. For example, IIRC, Celery has a helper function something like this:</p>
<pre><code>def dictfilter(pred, d=None):
    """dictfilter(d) -- returns a dict with all non-empty values from d
    dictfilter(pred, d) -- returns a dict with all values from d where pred(v)"""
    if d is None:
        return {k: v for k, v in pred.items() if v}
    else:
        return {k: v for k, v in d.items() if pred(v)} 
</code></pre>
<p><sub>(Yes, that interface, like any interface with an optional first argument and a mandatory last argument, is horrible, but it's intended to be compatible with the built-in <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow"><code>filter</code></a>, which goes back to Python 1.x and is way too late to changeâ€¦)</sub></p>
<p>Then you can do:</p>
<pre><code>dict1.update(dictfilter(dict2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can <code>filter</code> the second dictionary, and then update:</p>
<pre><code>dict1 = {"Country":"", "State":"California"}
dict2 = {"Country":"United_states", "State":""}

dict1.update(filter(lambda x: x[1] is not '', dict2.items()))

print(dict1)
# {'Country': 'United_states', 'State': 'California'}
</code></pre>
</div>
<span class="comment-copy">It's worth noting that dictionary comprehensions were only introduced in Python 2.7, so use one of the alternatives if you need to support 2.6 or earlier.</span>
<span class="comment-copy">Ok sorry maybe I shoul've specified, I also want empty <code>""</code> values to still be empty values if they were empty in both dictionaries, so if <code>dict1</code> and <code>dict2</code> both had a 3rd <code>key:value</code> of for example <code>"city":""</code> then I want the final dictionary to still have <code>"city":""</code></span>
<span class="comment-copy">@FanMa: Have you tried this code? That's exactly what it does. In that case, the dictionary passed to <code>update</code> won't have a <code>"city"</code> key in it, so the existing <code>"city": ""</code> will be left alone by the <code>update</code>.</span>
<span class="comment-copy">@PeterGibson: Yes, the usual alternative is to pass a genexpr to the <code>dict</code> constructor: <code>dict1.update(dict((k, v) for k, v in dict2.items() if v))</code>. However, <code>dict.update</code> has been able to take any iterable of pairs since I think 2.4, so you can just leave the <code>dict</code> off: `dict1.update((k, v) for k, v in dict2.items() if v). But really, there's not that much excuse for using 2.6 for new projects anymore. 2.7, sometimes; 2.6, very rarely.</span>
<span class="comment-copy">Yes I tried your code, I found the problem. Cause when you say <code>if v:</code>, you are checking if <code>v</code> is <code>None</code> which is different from an empty string which is what I am looking for. Basically I just changed it to <code>if v!="":</code> and it worked. Thanks for the dandy wrapper though, will be using that for sure in the future (modifying it to suit project needs)</span>
