<div class="post-text" itemprop="text">
<p>I'm new to Python. I need to query items from a dict and save the result to a text file. Here's what I have:</p>
<pre><code>import json
import exec.fullog as e

input = e.getdata() #input now is a dict() which has items, keys and values.

#Query

print 'Data collected on:', input['header']['timestamp'].date()
print '\n CLASS 1 INFO\n'

for item in input['Demographics']:
    if item['name'] in ['Carly', 'Jane']:
        print item['name'], 'Height:', item['ht'], 'Age:', item['years']

for item in input['Activity']:
    if item['name'] in ['Cycle', 'Run', 'Swim']:
       print item['name'], 'Athlete:', item['athl_name'], 'Age:', item['years']
</code></pre>
<p>How do I save the printed output to  a text file?</p>
</div>
<div class="post-text" itemprop="text">
<p>Let me summarize all the answers and add some more.</p>
<ul>
<li><p>To write to a file from within your script, user <a href="https://docs.python.org/2/tutorial/inputoutput.html" rel="noreferrer">file I/O tools</a> that are provided by Python (this is the <code>f=open('file.txt', 'w')</code> stuff.</p></li>
<li><p>If don't want to modify your program, you can use stream redirection (both on <a href="http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/redirection.mspx?mfr=true" rel="noreferrer">windows</a> and on <a href="http://www.cyberciti.biz/faq/redirecting-stderr-to-stdout/" rel="noreferrer">Unix-like systems</a>). This is the <code>python myscript &gt; output.txt</code> stuff.</p></li>
<li><p>If you want to see the output <strong>both</strong> on your screen and in a log file, and if you are on Unix, and you don't want to modify your program,  you may use the <a href="http://linux.101hacks.com/unix/tee-command-examples/" rel="noreferrer">tee command</a> (<a href="http://en.wikipedia.org/wiki/Tee_(command)#Windows_PowerShell_2" rel="noreferrer">windows version also exists</a>, but I have never used it)</p></li>
<li>Even better way to send the desired output to screen, file, e-mail, twitter, whatever is to use the <a href="https://docs.python.org/2/library/logging.html" rel="noreferrer">logging module</a>. The learning curve here is the steepest among all the options, but in the long run it will pay for itself. </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>What you're asking for isn't impossible, but it's probably not what you actually want.</p>
<p>Instead of trying to save the screen output to a file, just write the output to a file instead of to the screen.</p>
<p>Like this:</p>
<pre><code>with open('outfile.txt', 'w') as outfile:
    print &gt;&gt;outfile, 'Data collected on:', input['header']['timestamp'].date()
</code></pre>
<p>Just add that <code>&gt;&gt;outfile</code> into all your print statements, and make sure everything is indented under that <code>with</code> statement.</p>
<hr/>
<p>More generally, it's better to use string formatting rather than magic <code>print</code> commas, which means you can use the <code>write</code> function instead. For example:</p>
<pre><code>outfile.write('Data collected on: {}'.format(input['header']['timestamp'].date()))
</code></pre>
<p>But if <code>print</code> is already doing what you want as far as formatting goes, you can stick with it for now.</p>
<hr/>
<p>What if you've got some Python script someone else wrote (or, worse, a compiled C program that you don't have the source to) and can't make this change? Then the answer is to wrap it in another script that captures its output, with the <a href="https://docs.python.org/2/library/subprocess.html" rel="nofollow"><code>subprocess</code></a> module. Again, you probably don't want that, but if you do:</p>
<pre><code>output = subprocess.check_output([sys.executable, './otherscript.py'])
with open('outfile.txt', 'wb') as outfile:
    outfile.write(output)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>abarnert</code>'s answer is very good and pythonic. Another completely different route (not in python) is to let bash do this for you:</p>
<pre><code>$ python myscript.py &gt; myoutput.txt
</code></pre>
<p>This works in general to put all the output of a cli program (python, perl, php, java, binary, or whatever) into a file, see <a href="https://stackoverflow.com/questions/17554018/how-to-save-entire-output-of-bash-script-to-file">How to save entire output of bash script to file</a> for more.</p>
</div>
<div class="post-text" itemprop="text">
<p>A quick and dirty hack to do this <strong>within the script</strong> is to direct the screen output to a file:</p>
<pre><code>import sys 

stdoutOrigin=sys.stdout 
sys.stdout = open("log.txt", "w")
</code></pre>
<p>and then reverting back to outputting to screen at the end of your code:</p>
<pre><code>sys.stdout.close()
sys.stdout=stdoutOrigin
</code></pre>
<p>This should work for a simple code, but for a complex code there are other more formal ways of doing it such as using <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">Python logging</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>You would probably want this. Simplest solution would be</p>
<p>Create file first.</p>
<p>open file via</p>
<pre><code>f = open('&lt;filename&gt;', 'w')
</code></pre>
<p>or</p>
<pre><code>f = open('&lt;filename&gt;', 'a')
</code></pre>
<p>in case you want to append to file</p>
<p>Now, write to the same file via</p>
<pre><code>f.write(&lt;text to be written&gt;)
</code></pre>
<p>Close the file after you are done using it </p>
<pre><code>#good pracitice
f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>f = open('file.txt', 'w') #open the file(this will not only open the file also 
#if you had one will create a new one on top or it would create one if you 
#didn't have one

f.write(info_to_write_into_the_file) #this will put the info in the file

f.close() #this will close the file handler. AKA free the used memory
</code></pre>
<p>I hope this helps</p>
</div>
<span class="comment-copy">Perfect, thanks!</span>
<span class="comment-copy">Actually, this is even more universally usable: simple <code>&gt;</code> redirection works on Windows, and on almost all *nix shells, not just bash.</span>
<span class="comment-copy">Thanks @abarnert, I'm blissfully unaware of Windows cmd, but I sit ~100ft from one of the creators of tcsh so I definitely should have known better. I've updated to reflect your info.</span>
<span class="comment-copy">Well, cmd.exe is meant to be a superset of DOS command.com, which is a clone of the CP/M CCP with some minor changes, and I'll bet someone in your office at least has vague recollections of that. :)</span>
<span class="comment-copy">Is this meant to be Ruby or something? Python variables don't start with <code>$</code>. And you can't call a method without parentheses.</span>
<span class="comment-copy">sorry I was editing a page at the same time :).</span>
