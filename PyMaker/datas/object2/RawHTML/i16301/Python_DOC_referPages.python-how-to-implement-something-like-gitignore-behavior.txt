<div class="post-text" itemprop="text">
<p>I need to list all files in the current directory (.) (including all sub directories), and exclude some files as how .gitignore works (<a href="http://git-scm.com/docs/gitignore" rel="noreferrer">http://git-scm.com/docs/gitignore</a>)</p>
<p>With fnmatch (<a href="https://docs.python.org/2/library/fnmatch.html" rel="noreferrer">https://docs.python.org/2/library/fnmatch.html</a>) I will be able to "filter" files using a pattern</p>
<pre><code>ignore_files = ['*.jpg', 'foo/', 'bar/hello*']
matches = []
for root, dirnames, filenames in os.walk('.'):
  for filename in fnmatch.filter(filenames, '*'):
      matches.append(os.path.join(root, filename))
</code></pre>
<p>how can I "filter" and get all files which doesn't match with one or more element of my "ignore_files"?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You're on the right track: If you want to use <code>fnmatch</code>-style patterns, you should use <a href="https://docs.python.org/3/library/fnmatch.html#fnmatch.filter" rel="noreferrer"><code>fnmatch.filter</code></a> with them.</p>
<p>But there are three problems that make this not quite trivial.</p>
<p>First, you want to apply multiple filters. How do you do that? Call <code>filter</code> multiple times:</p>
<pre><code>for ignore in ignore_files:
    filenames = fnmatch.filter(filenames, ignore)
</code></pre>
<p>Second, you actually want to do the <em>reverse</em> of <code>filter</code>: return the subset of names that <em>don't</em> match. As the documentation explains:</p>
<blockquote>
<p>It is the same as <code>[n for n in names if fnmatch(n, pattern)]</code>, but implemented more efficiently.</p>
</blockquote>
<p>So, to do the opposite, you just throw in a <code>not</code>:</p>
<pre><code>for ignore in ignore_files:
    filenames = [n for n in filenames if not fnmatch(n, ignore)]
</code></pre>
<p>Finally, you're attempting to filter on partial pathnames, not just filenames, but you're not doing the <code>join</code> until after the filtering. So switch the order:</p>
<pre><code>filenames = [os.path.join(root, filename) for filename in filenames]
for ignore in ignore_files:
    filenames = [n for n in filenames if not fnmatch(n, ignore)]
matches.extend(filenames)
</code></pre>
<hr/>
<p>There are few ways you could improve this.</p>
<p>You may want to use a generator expression instead of a list comprehension (parentheses instead of square brackets), so if you have huge lists of filenames you're using a lazy pipeline instead of wasting time and space repeatedly building huge lists.</p>
<p>Also, it may or may not be easier to understand if you invert the order of the loops, like this:</p>
<pre><code>filenames = (n for n in filenames 
             if not any(fnmatch(n, ignore) for ignore in ignore_files))
</code></pre>
<p>Finally, if you're worried about performance, you can use <code>fnmatch.translate</code> on each expression to turn them into equivalent regexps, then merge them into one big regexp and compile it, and use that instead of a loop around <code>fnmatch</code>. This can get tricky if your patterns are allowed to be more complicated than just <code>*.jpg</code>, and I wouldn't recommend it unless you really do identify a performance bottleneck here. But if you need to do it, I've seen at least one question on SO where someone put a lot of effort into hammering out all the edge cases, so search instead of trying to write it yourself.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>matches.extend([fn for fn if not filename in ignore_files])
</code></pre>
<p>Should do the trick for simple filenames, for ignore patterns something like:</p>
<pre><code>def reject(filename, filter):
    """ Takes a filename and a filter to reject files that match."""
    if len(filter)==0:
         return False
    else:
         return fnmatch.fnmach(filename, filter[0]) or reject(filename, filter[1:])

matches.extend([os.path.join(root, fn) for fn in filenames if not reject(fn, ignore_files)])
</code></pre>
<p>The above will while building a list from the filenames in the os.walk check that none of the filters provide a match - the filters are checked until either there are none left or the first match is found so it should be quite quick.  </p>
<p>You could also try something like:</p>
<pre><code>filenames = set(filenames)  # convert to a set
for filter in ignore_files:
   filenames = filenames - set(fnmatch.filter(filenames, filter)) # remove the matches
matches.extend([os.path.join(root, fn) for fn in filenames])  # Add to matches
</code></pre>
</div>
<span class="comment-copy">I don't need all the specification, only to exclude some files using patterns from a list of files.</span>
<span class="comment-copy">Is there a reason you tagged this regex? Those are clearly glob-style patterns in your code, not regular expressions. While you <i>can</i> convert them to regexps (with <code>fnmatch.translate</code>), did you have any reason to believe you might need to? If so, that reason should be in your question.</span>
<span class="comment-copy">Thank you so much, this is my code now (end-to-end):  ignore_files = ['foo', '<i>/foo']  matches = [] for root, dirnames, filenames in os.walk('.'):   for filename in fnmatch.filter(filenames, '</i>'):       filename = os.path.join(root, filename)[2:]       matches.append(filename)  for ignore in ignore_files:     matches_ = [n for n in matches if not fnmatch.filter([n], ignore)]  can be better? thanks</span>
<span class="comment-copy">@fj123x: You really can't post code in comments, because they eat all the formatting. Either post a new question, edit it into your existing question, or stick it somewhere like <a href="http://pastebin.com" rel="nofollow noreferrer">pastebin.com</a> and post a link here.</span>
<span class="comment-copy">@fj123x: But one quick comment: There's no reason to ever <code>fnmatch.filter(filenames, '*')</code>. All filenames match <code>*</code>, so that just returns a copy of <code>filenames</code>.</span>
<span class="comment-copy">This doesn't really handle <a href="http://git-scm.com/docs/gitignore" rel="nofollow noreferrer"><code>.gitignore</code> rules</a> like <code>**/a/b</code>, <code>a/b/**</code> and <code>a/**/b</code> nor would it seem to handle a simple <code>foo</code>. For example <code>foo</code> in .gitignore will match <code>foo</code> and <code>a/foo</code> but fnmatch will fail on <code>a/foo</code></span>
<span class="comment-copy"><a href="https://repl.it/x3D/1" rel="nofollow noreferrer">Yea, doesn't seem to work at all</a> though maybe I missed something.</span>
<span class="comment-copy">Only if <code>ignore_files</code> is a list of simple file names, <code>.gitignore</code> and <code>fnmatch</code> permit glob patterns and it's extremely useful. There's even one in OP's example (<code>*.jpg</code>).</span>
<span class="comment-copy">Misled be the naming - ignore_files rather than ignore_patterns</span>
<span class="comment-copy">Note that some of the patterns match paths, not just filenames.</span>
<span class="comment-copy">can you explain the usage of matches.extend([fn for fn if not reject(filename, ignore_files)])? you are not using the "in" in the sentence, and what filename would be? Thanks</span>
<span class="comment-copy">@fj123x: The listcomp is missing <code>in filenames</code> between the <code>for fn</code> and the <code>if not</code>. You'll need to add it to make this work. But as delnan pointed out, this won't work for you anyway.</span>
