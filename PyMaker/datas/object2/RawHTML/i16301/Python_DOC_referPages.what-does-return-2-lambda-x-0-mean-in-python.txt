<div class="post-text" itemprop="text">
<p>Here's a line of code in Python:</p>
<pre><code>return 2,lambda x: 0
</code></pre>
<p>What does it mean?</p>
<p>This program comes from a stack exchange post:</p>
<p><a href="https://cs.stackexchange.com/questions/1984/proving-the-intractability-of-this-nth-prime-recurrence/29054#29054">https://cs.stackexchange.com/questions/1984/proving-the-intractability-of-this-nth-prime-recurrence/29054#29054</a></p>
<p>It puzzles me because I am wondering why the programmer did not simply code</p>
<pre><code>return 2,0
</code></pre>
<p>Sorry, I am new to Python... if this may sound obvious to some people...</p>
</div>
<div class="post-text" itemprop="text">
<p>This is returned:</p>
<pre><code>return ((2), (lambda x: 0))
</code></pre>
<p>The returned value is a tuple, with the first value being 2, and the second being the lambda function.</p>
</div>
<div class="post-text" itemprop="text">
<p>I assume that this question has been downvoted for vagueness. I generally understand "What does it mean?" in a programming context to mean "How do I parse this?" so I'll answer from that perspective.</p>
<hr/>
<h3>Strip <code>return</code> from the statement</h3>
<p>All that a <code>return</code> in python really means is "whatever follows on this line is the result of the function". It's a statement, not a function call, so don't try to fit it into your parsing of the line.
<code>return x</code> should really be read as a statement that the <em>expression</em> <code>x</code> is being returned.</p>
<p>The question therefore becomes this: What is the expression <code>2, lambda x: 0</code>?</p>
<p>(I've added a space for readability -- Python doesn't care about whitespace around commas, although you should, by convention, follow commas with spaces)</p>
<h3>Python Tuples don't need parentheses</h3>
<p>Python's tuple type does not require parentheses. So <code>a, b, c</code> is the same as <code>(a, b, c)</code></p>
<p>There are two expressions, therefore, bound in a tuple: <code>2</code> and <code>lambda x: 0</code>.
You can read <code>2, lambda x: 0</code> as <code>(2, lambda x: 0)</code> -- they are exactly the same.</p>
<h3>What is <code>2</code>?</h3>
<p>It's two.</p>
<h3>What is <code>lambda x: 0</code>?</h3>
<p>This is python's syntax for "lambdas" or "anonymous functions".
Python practice really discourages the use of lambda bindings, and I'd generally advise you not to do so. Lambdas are really useful, but they're a bit broken in python and will run you into trouble.</p>
<p>The basic syntax is the keyword, <code>lambda</code>, a comma-separated list of arguments, <code>:</code>, and a result expression.
In this case, the comma-separated arguments are just <code>x</code>, and the result expression is the constant <code>0</code>.</p>
<p>You could rewrite this lambda as</p>
<pre><code>def f(x):
    return 0
</code></pre>
<h3>Short answer</h3>
<p>So, the tuple returned by this statement has a constant integer as its first element, and a function which takes one argument and returns <code>0</code> as its second element.</p>
<hr/>
<p>If you want a deeper explanation of any of these components, you'll have to be more specific in your questions. "What does it mean?" is very vague, and hard to answer in any complete way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try it in the shell. It is pretty self explanatory:</p>
<pre><code>&gt;&gt;&gt; def f():
...    return 2, lambda x: 0
... 
&gt;&gt;&gt; f()
(2, &lt;function &lt;lambda&gt; at 0x109d1b758&gt;)
&gt;&gt;&gt; f()[1]('anything')
0
</code></pre>
</div>
<span class="comment-copy">What does <code>return 2, 1</code> actually return? A tuple containing the values <code>2</code> and <code>1</code>. Now apply here...</span>
<span class="comment-copy">What precisely don't you understand here? Do you know what <code>return</code> does? What a <code>lambda</code> expression is? Please narrow it down.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/simple_stmts.html#the-return-statement" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a> <a href="https://docs.python.org/3/reference/expressions.html#expression-lists" rel="nofollow noreferrer">docs.python.org/3/reference/expressions.html#expression-lists</a></span>
<span class="comment-copy">Also, it might help to write a function with just this line in it, then write <code>spam = test_function()</code>, and print out what's in <code>spam</code> (in your interactive interpreter). Then you'll see what you got back, and play around with it, and if you still don't understand it, you can write a more specific question, like "why did I get a tuple even though there were no parentheses" or "why is <code>x[1]</code> a function that I can only call with no arguments and it always returns 0", or similar. (Although those questions would also be answerable by reading the tutorial, at least they'd be answerable.)</span>
<span class="comment-copy">-1, not enough brackets. But seriously, can you explain your answer? This doesn't really add anything to the code in question.</span>
<span class="comment-copy">I'm not the downvoter, but this is literally the code in the question with an extra set of brackets but no explanation.</span>
<span class="comment-copy">@simonzack you can generally assume that if they cared to, they would have</span>
<span class="comment-copy">I just upvoted your answer because I think your answer is exactly what the original poster needed. And I don't understand why the original question has been downvoted so much. The question is clear and it's not immediately obvious to everyone how the line of code should be interpreted.</span>
<span class="comment-copy">Thanks for the answer. Why he didn't just write (2,0) ?</span>
<span class="comment-copy">@sheldonzy Because <code>0</code> is not callable. <code>lambda x: 0</code> is a function that takes a single argument and returns <code>0</code>.</span>
