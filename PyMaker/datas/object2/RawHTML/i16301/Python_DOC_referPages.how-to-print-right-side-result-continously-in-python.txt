<div class="post-text" itemprop="text">
<p>I have my code:</p>
<pre><code>for i in range(0,5):
    print "result is:"+str(i),
</code></pre>
<p>This prints:</p>
<pre><code>result is:0 result is:1 result is:2 result is:3 result is:4
</code></pre>
<p>I want to print like this:</p>
<pre><code>result is:0,1,2,3,4
</code></pre>
<p>How to do it in python?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>print('Result is: {}'.format(', '.join(map(str, range(5)))))
</code></pre>
<p>prints </p>
<pre><code>Result is: 0, 1, 2, 3, 4
</code></pre>
<p>Valid for Python 2 and Python 3.</p>
<p>Explanation:</p>
<p><code>range(5)</code> is the same as <code>range(0, 5)</code>. <code>map(str, x)</code>, given an iterable x, returns  a new iterable having all the items in x stringified (<code>e</code> -&gt; <code>str(e)</code> ). <code>', '.join(iterable)</code> joins a given iterable (list, generator, etc) whose elements are strings, into a string 1 string using the given separator. Finally <code>str.format()</code> replaces the <code>{}</code> placeholders with its arguments in order.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you want to print all the elements of the list, you can convert all the numbers to string and join all of them together with <code>,</code>, like this</p>
<pre><code>print "result is:" + ",".join(str(number) for number in range(0, 5))
</code></pre>
<p>Since the <code>range</code>'s default start parameter is 0, you can call it like this</p>
<pre><code>print "result is:" + ",".join(str(number) for number in range(5))
</code></pre>
<p>Also, you can use templated strings like this</p>
<pre><code>print "result is: {}".format(",".join(str(number) for number in range(5)))
</code></pre>
<p>You can apply the <code>str</code> function to all the elements of the number list, with <code>map</code> function, like this</p>
<pre><code>print "result is: {}".format(",".join(map(str, range(5)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>x = 'result is: ';
for i in range(0,5):
    x += str(i) + ',';
print(x[:-1];
</code></pre>
<p>will do what you want. In a highly legible form although not the best speed possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another version of the same thing:</p>
<pre><code>for i in range(0,5):
    if i == 0:
        print "result is %d" % i,
else:
    print ",%d" % i,
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python3 you can use the <code>end</code> kwarg of the <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow"><code>print</code></a> function. This is not possible in Python2.</p>
<pre><code>print("The result is: ", end="")
for i in range(5):
    print(str(i)+", ", end="")
</code></pre>
</div>
<span class="comment-copy">I dont understand why negative vote for this question?</span>
<span class="comment-copy">You should print "result is:" before the loop, if you want it only once ...</span>
<span class="comment-copy">Thanks. If i dont know the range.Suppose if range is (1,5). The first value may be random.how to do it in this case</span>
<span class="comment-copy">it is if you import from future</span>
<span class="comment-copy">it is possible in python2 via <code>print foo,</code> note the <code>,</code> at the end. That prevents it from printing new line.</span>
