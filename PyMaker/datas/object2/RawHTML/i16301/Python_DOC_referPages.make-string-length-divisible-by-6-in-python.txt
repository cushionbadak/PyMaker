<div class="post-text" itemprop="text">
<p>I want the program to take a users input and format its length so it is divisible by six, by adding the characters of the string onto the end of the string, until <code>len(string)%6 == 0</code>:</p>
<pre><code>string = raw_input('Enter String')
while len(string)&lt;=6-len(string)%6 and len(string)%6 != 0:
        print 6-len(string)%6
        string = string + string
while len(string)%6 != 0:
    string = string + string[0::6-(len(string)%6)]

print string
</code></pre>
<p>Examples (using numbers as a stand in for whatever character could be situated at that point): </p>
<pre><code>1 -&gt; 111111 
12 -&gt; 121212
123 -&gt; 123123
1234 -&gt; 123412
12345 -&gt; 123451
12456 -&gt; 123456
1234567 -&gt; 123456712345
</code></pre>
<p>I am getting stuff like this:</p>
<pre><code>12 -&gt; 121211
12345 -&gt; 123451234513524142551545411111
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using a while loop as in your example:</p>
<pre><code>def mod_string(s):
    final = s # we need to add the original string initially.
    i = 0
    while len(final) % 6 != 0:
        final += s[i] # keep adding char at alternate indexes 
        if i == len(s)-1: # if we are at the end of the string, reset
            i = 0
        else:
            i += 1 # else move to next char
    return final
In [28]: mod_string("1234")
Out[28]: '123412'
In [29]: mod_string("1234567")
Out[29]: '123456712345'
In [30]: mod_string("1")
Out[30]: '111111'    
In [31]: mod_string("12345")
Out[31]: '123451'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try something like this (code written/tested in Python 3.4):</p>
<pre><code>import itertools

lStr = input("Enter string:")

def getStrMod(aStr, aMod):
    lIter = itertools.cycle(list(aStr))
    while len(aStr) % aMod != 0:
        aStr += next(lIter)
    return aStr

print(getStrMod(lStr, 6))
</code></pre>
<p>Results:</p>
<pre><code>Enter string:1
111111

Enter string:12
121212

Enter string:12345
123451

Enter string:1234567
123456712345
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution based on pre-computing the length that is needed to pad up to the next multiple of 6.</p>
<pre><code>string = raw_input('Enter String')
diff = 6 - (len(string) - (len(string) / 6) * 6)



if diff != 6:
    for i in xrange(diff):
      string += string[i % len(string)]

print string
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This just called for the use of <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow">itertools</a>.</p>
<pre><code>from itertools import cycle, takewhile

data = '1234'
result = takewhile(lambda x: x[0] % 6 != 0, enumerate(cycle(data), start=len(data)))
print(data + ''.join(character for _, character in result))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following might be quicker. Just precompute the length necessary to pad up to next multiple of 6.</p>
<pre><code>import itertools
import math

def next_multiple(val, factor):
    return int(math.ceil(float(val) / factor) * factor)

s = raw_input('Enter String')
len_s = len(s)
diff = next_multiple(len_s, 6) - len_s
s_cycle = itertools.cycle(s)
s + ''.join(itertools.islice(s_cycle, 0, diff))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One problem is that in the first while loop, you are simply concatenating the string with itself. Instead concatenated the original string with the number of characters from the other string required to make a string divisible by 6.</p>
<p>Here is some pseudocode below:</p>
<pre><code>if (string.length % 6 == 0): 
    return 

if (string.length &lt; 3):
    return (string * (6 / string.length))

// Find greatest 6 multiple
maxSixMultiple = 6 * ((string.length / 6) + 1)

// Forms new string based on it
// Computes number of letters required
letters = maxSixMultiple - string.length
string = string + string[:letters]
</code></pre>
</div>
<span class="comment-copy">Here's a tip, if you want to improve the quality of your posts, start with the English summary first, then show your code snippet. Editing in progress...</span>
<span class="comment-copy">Also, make use of more whitespace in your code, e.g. instead of <code>len(string)&lt;=6-len(string)%6</code>, make it <code>len(string) &lt;= 6 - len(string) % 6</code>. Of course, that's still hard to read without extra parentheses to show the order of operations, so I would add those too. Look at how <a href="http://stackoverflow.com/a/25129582/456814">this guy does it</a>, and <a href="http://stackoverflow.com/a/25129580/456814">this guy</a>, and <a href="http://stackoverflow.com/a/25129537/456814">this guy</a>.</span>
<span class="comment-copy">This is the cleanest solution using fast built-ins while avoiding O(n^2) string operations.</span>
<span class="comment-copy">If I had expected someone to read this answer after some hours I would have explained how it works ... :-)</span>
<span class="comment-copy">Doesn't work for len(s) &lt; 3.</span>
<span class="comment-copy">Good point, IceArdor. Fixed by using cycle.</span>
<span class="comment-copy">Doesn't work for <code>string.length &lt; 3</code></span>
<span class="comment-copy">Fixed it. Thanks for catching that error.</span>
