<div class="post-text" itemprop="text">
<p>On some occasions, my python program won't response because there seems to be a deadlock. Since I have no idea where this deadlock happens, I'd like to set a breakpoint or dump the stack of all threads after 10 seconds in order to learn what my program is waiting for. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/2/library/logging.html" rel="nofollow"><code>logging</code></a> module and put e.g. <code>Logger.debug()</code> calls in strategic places through your program. You can disable these messages by one single setting (<code>Logger.setLevel</code>) if you want to. And you can choose if you want to write them to e.g. stderr or to a file.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import pdb
from your_test_module import TestCase

testcase = TestCase()
testcase.setUp()
pdb.runcall(testcase.specific_test)
</code></pre>
<p>And then ctrl-c at your leisure. The <code>KeyboardInterupt</code> will cause pdb to drop into debugger prompt.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, as it turns out, it was because my database was locked (a connection wasn't closed) and when the tests were tearing down (and the database schema was being erased so that the database is clean for the next tests), psycopg2 just ignored the KeyboardInterrupt exception.<br/>
I solved me problem using the <a href="https://docs.python.org/3/library/faulthandler.html" rel="nofollow">faulthandler</a> module (for earlier versions, there is a <a href="https://docs.python.org/3/library/faulthandler.html" rel="nofollow">pypi repo</a>). Fault handler allows me to dump the stack trace to any file (including sys.stderr) after a period of time (repeatingly) using <code>faulthandler.dump_traceback_later(3, repeat=True)</code>. That allowed me to set the breakpoint where my program stopped responding and tackle the issue down effectively. </p>
</div>
<span class="comment-copy">Just Ctrl-C your program. This will raise a <code>KeyboardInterupt</code> which will print a stack trace showing where the execution was when the exception was raised.</span>
<span class="comment-copy">@Dunes I already tried that but this exception seems to be caught and ignored.</span>
<span class="comment-copy">You could spawn a thread, then sleep for 10 seconds, but when you <code>pdb</code> from there you won't be in the same context where the failure is happening. It may help though, depending on what you're looking for</span>
<span class="comment-copy">It is a very bad thing to be unintentionally catching a keyboard interrupt. It means you are catching all sorts of exceptions that you shouldn't be like <code>SystemExit</code> and <code>MemoryError</code>. Search your code for statements like <code>except:</code> or <code>except BaseException:</code>.</span>
<span class="comment-copy">@Dunes I've found out that my code isn't catching any of these exception. I think it is either nose (that is running the testcase) or psycopg2 but I'm not sure.</span>
