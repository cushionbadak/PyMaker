<div class="post-text" itemprop="text">
<p>I have a project that has functionality that may be extended depending on which packages you have available. Specifically, it has 3D graphics if you have VTK, and it has a GUI if you have PyQt, and some fall-backs if you don't.</p>
<p>Is there any way to create a test file that simulates these packages being unavailable project-wide, so that I can check that the correct error messages and warnings and recommendations are raised?</p>
</div>
<div class="post-text" itemprop="text">
<p>I had a similar situation where I have developed an application that can make use of the <code>requests</code> library but it is an optional dependency, so this is my approach.  First have a module that collected these dependencies</p>
<pre><code>try:
    import requests
except ImportError:
    _has_requests = None
</code></pre>
<p>Repeat for all other modules you may need.  Then on the import of this module the code then can check for the value of <code>_has_requests</code> (and the like) and generate the appropriate log messages.  As for the test case, it will look something like this:</p>
<pre><code>from ... import vendor

class FunctionTestCase(unittest.TestCase):

    def setUp(self):
        self._has_requests = vendor._has_requests
        vendor._has_requests = False

    def tearDown(self):
        vendor._has_requests = self._has_requests
</code></pre>
<p>Naturally, you may have code that tests interaction with the actual modules, so you will need to make use of <a href="https://docs.python.org/2/library/unittest.html#unittest.skipIf" rel="nofollow"><code>unittest.skipIf</code></a> (or the <a href="https://pypi.python.org/pypi/unittest2" rel="nofollow"><code>unittest2</code></a> version if you are using Python 2.6).  This is done so you can correctly skip the tests for systems that do not have this module installed, if you wish to run these tests on systems that do not have the complete list of optional dependencies.</p>
<pre><code>@unittest.skipIf(not vendor._has_requests, '`requests` not available')
class FunctionWithRequestsTestCase(unittest.TestCase):

    def setUp(self):
        ...
</code></pre>
</div>
<span class="comment-copy">I usually take a different approach - have an availability flag that is set when modules required are correctly imported.  Then on testing, unset those flags and see that functions/methods generated the correct exceptions/error messages.</span>
<span class="comment-copy">I like this. Why wouldn't you make this an answer that I can accept?</span>
<span class="comment-copy">Let me at least include some code.</span>
<span class="comment-copy">You might also want to look at using <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer"><code>venv</code></a> or the third-party <a href="http://virtualenv.readthedocs.org/en/latest/" rel="nofollow noreferrer"><code>virtualenv</code></a> to easily build different Python virtual environments to test in. (<code>virtualenv</code> is more powerful, and <code>venv</code> didn't exist until 3.3 and wasn't fully usable until 3.4.)</span>
