<div class="post-text" itemprop="text">
<p>I am trying to run the following code:</p>
<pre><code>Py_Initialize();
PyObject *py_main = PyImport_AddModule("__main__");
PyObject *py_dict = PyModule_GetDict(py_main);
PyObject *ret = PyRun_String(SOME_PYTHON_CODE, Py_file_input, py_dict, py_dict);
</code></pre>
<p>But it seems there is an error somewhere in my generated python code (<code>SOME_PYTHON_CODE</code>) and so <code>ret</code> comes out as <code>NULL</code> indicating an exception was raised. How can I get access to this exception?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do:</p>
<pre><code>PyErr_Print();
</code></pre>
<p>To get a standard stack trace printed out on standard error. There are other more fine tuned function calls to handle errors, but I believe this is the simplest, bare bones approach.</p>
<p>You can also get the actual exception/traceback objects with:</p>
<pre><code>PyObject* ex = PyErr_Occurred();
if (ex) {
    PyObject* tb = PyException_GetTraceback(ex);
    /* Do something with tb */
}
</code></pre>
<p><code>ex</code> will be non-NULL if the error indicator is set. See <a href="https://docs.python.org/3/c-api/exceptions.html" rel="nofollow noreferrer">Exception Handling</a> for more info.</p>
<p><a href="https://stackoverflow.com/questions/1796510/accessing-a-python-traceback-from-the-c-api">And here is a question/answer</a> about accessing the traceback objects. One of the answers shows how to get the backtrace copied into a C string, which you could then write to file (or GUI in your case).</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you didn't specify the number of statements <code>SOME_PYTHON_CODE</code> there may be another issue at play: according to <a href="http://boost.cppll.jp/HEAD/libs/python/doc/tutorial/doc/using_the_interpreter.html" rel="nofollow">this page</a> of a Boost Python Tutorial, the output of <code>PyRun_String</code> also depends on the <code>start</code> parameter:</p>
<ul>
<li><code>Py_eval_input</code> for interpreting isolated expressions</li>
<li><code>Py_file_input</code> for interpreting sequences of statements</li>
<li><code>Py_single_input</code> for interpreting a single statement</li>
</ul>
<p>It goes on to say:</p>
<blockquote>
<p>When using Py_eval_input, the input string must contain a single expression and its result is returned. When using Py_file_input, the string can contain an abitrary number of statements and None is returned. Py_single_input works in the same way as Py_file_input but only accepts a single statement.</p>
</blockquote>
<p>So if you use <code>Py_file_input</code> in your call to <code>PyRun_String</code> you'll always receive <code>None</code>. Instead you might use <code>Py_single_input</code>.</p>
</div>
<span class="comment-copy">One of the problems I'm having is actually that I can't seem to connect python's stdin/stdout/stderr to the console window (this is a GUI application, and I had to manually open a console window). So <code>PyErr_Print()</code> would not help me at all.</span>
<span class="comment-copy">You can get the actual traceback object (I've updated my answer to show how). Then look at fields within the traceback object to figure out what happened. I'm not super familiar with the traceback objects though.</span>
<span class="comment-copy">I just tried doing that, but it seems that <code>PyException_GetTraceback</code> is not defined in Python.h.</span>
<span class="comment-copy">@Matt Oh, you must be using Python 2. Since it didn't say in your question I assumed you were using the latest (Python 3). In that case I think you'll need to use <code>PyErr_Fetch()</code>.</span>
<span class="comment-copy">That's a pretty bad assumption, since Python 2 is still very much more widely used, but thanks!</span>
