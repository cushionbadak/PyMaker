<div class="post-text" itemprop="text">
<p>The background is I am working on <a href="https://gist.github.com/juriansluiman/da5d84eb0fd82c9c7b5b#file-deploy-py-L42" rel="nofollow">a wrapper script</a> for an ansible project. I have to check a lot of <code>None</code> return values and I just wonder if there is a short pythonic version for this?</p>
<p><strong>Example 1</strong></p>
<p>Replace the standard config with a config from a file, only when this file is available</p>
<pre class="lang-python prettyprint-override"><code>def deploy(environment, version):
    config = {
        # Some values
    }

    local_config = get_config('deploy.cnf', environment)
    if local_config != None:
        config = local_config

    # More code...

def get_config(path, environment):
    if os.path.isfile(path):
        parser = SafeConfigParser()
        parser.read(path);
        if parser.has_section(environment):
            config = {
                # Create config...
            }
            return config
</code></pre>
<p><strong>Example 2</strong></p>
<p>Only when <code>version</code> is explicitly passed, use this to replace the version</p>
<pre><code>def deploy(environment, version):
    config = {
        'version': version,
        'force': force,
    }

    # Config might be replaced (see example 1)

    # The version is given by command option,
    # let this overwrite the config's version
    if version != None:
        config['version'] = version
</code></pre>
<p><strong>Example 3</strong></p>
<p>Only replace the version in the config when <code>get_latest_tag()</code> returns an actual result</p>
<pre><code>result = get_latest_tag()
if result != None:
    config['version'] = result
</code></pre>
<p><strong>QUESTION</strong></p>
<p>Often I see myself doing things like <code>if x != None: y = x</code> in python. I am coming from the php world and my gut feeling is this can be done much nicer in python. Is there any way?</p>
<p>In php I would have written some things like:</p>
<pre class="lang-php prettyprint-override"><code>$foo = $bar ?: 'default';
</code></pre>
<p>However, this type of short ternary does not exist in python and the available ternary in python does (afaik) not support the kinda <code>?:</code> style.</p>
</div>
<div class="post-text" itemprop="text">
<p>The Python equivalent of</p>
<pre><code>$bar ?: 'default'
</code></pre>
<p>is:</p>
<pre><code>bar if bar else 'default'
</code></pre>
<p>However, be careful if <code>bar</code> could be something that's not <code>None</code>, but is falsey, like <code>False</code> or a numeric <code>0</code> or an empty sequence. If you're not sure that couldn't happen, be explicit:</p>
<pre><code>spam if spam is not None else 'default'
</code></pre>
<p>(Note that I used <code>is not None</code> rather than <code>!= None</code>. In general, you should never use equality to compare the handful of built-in singletons like <code>None</code> and <code>True</code>. However, in the case of <code>True</code> and <code>False</code>, you should almost never be comparing them in the first place. Note that the case to be careful of won't come up there, because there are no boolean values that are falsey but not <code>False</code>.)</p>
<p>And of course either way, you can always wrap it up in a function if you want something less verbose. Since you showed four completely different examples, it's hard to see how to make it readable, but presumably if this is annoying you, it's because you're writing the same thing a dozen times in a row. Whatever that something is, wrap it up as a function.</p>
<p>Also, look into <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>defaultdict</code></a>; I suspect it may make some of your use cases simpler.</p>
</div>
<span class="comment-copy"><code>if something != None:</code> can be replaced by a simple <code>if something:</code></span>
<span class="comment-copy">Strictly speaking, you should check <code>is not None</code></span>
<span class="comment-copy"><code>[] or 0</code> would evaluate to False using <code>if something</code></span>
<span class="comment-copy">@Padraic I was thinking along the lines of what abarnert just put in his answer...</span>
<span class="comment-copy">@MattDMo: But he's right, you shouldn't suggest <code>if something:</code> without explaining the difference between that and <code>if something is not None:</code>. (And trying to find a brief way to do that is fun, which is why I've rewritten my answer 3 times. :))</span>
<span class="comment-copy">Per the style guide, equality is preferred to identity for the booleans.</span>
<span class="comment-copy">@jonrsharpe: No it isn't. From <a href="http://legacy.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">Programming Recommendations</a>: "Comparisons to singletons like None should always be done with <code>is</code> or <code>is not</code>, never the equality operators." And there's nothing later in the section that makes the boolean singletons an exception. And in fact it specifically says "Don't compare boolean values to True or False using <code>==</code>." Of course usually you shouldn't be comparing them at all; just use <code>if spam:</code> or <code>if not spam:</code>. For a boolean value, there's no danger of it being a falsey non-<code>False</code>.</span>
<span class="comment-copy">Actually, but that later section calls <code>is True</code> "worse" than <code>== True</code>, hence preferred. I agree that this shouldn't be done at all!</span>
<span class="comment-copy">Thanks guys, I'll give it a shot tomorrow morning!</span>
<span class="comment-copy">This really doesn't address the use case given in the examples, all of which want to <i>skip</i> the assignment when the return value is <code>None</code>.</span>
