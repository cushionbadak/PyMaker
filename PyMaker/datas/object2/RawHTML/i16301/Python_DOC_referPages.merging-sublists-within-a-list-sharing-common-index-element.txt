<div class="post-text" itemprop="text">
<p>I have a list like:</p>
<pre><code>loc_list=[['1,', "'Houston'"], 
         ['4,', "'Stafford'"], 
         ['5,', "'Bellaire'"], 
         ['5,', "'Sugarland'"], 
         ['5,', "'Houston'"], 
         ['6,', "'Atlanta'"], 
         ['6,', "'Sacramento'"], 
         ['7,', "'Milwaukee'"], 
         ['8,', "'Chicago'"], 
         ['8,', "'Dallas'"], 
         ['8,', "'Philadephia'"], 
         ['8,', "'Seattle'"], 
         ['8,', "'Miami'"], 
         ['9,', "'Arlington'"], 
         ['11,', "'Austin'"]]
</code></pre>
<p>Now I want to merge the list having same element at first position.</p>
<pre><code>Desired_list=[['1,', "'Houston'"], 
             ['4,', "'Stafford'"], 
             ['5,', "'Bellaire','Sugarland','Houston'"],
             ['6,', "'Atlanta','Sacramento'"],
             ['7,', "'Milwaukee'"], 
             ['8,', "'Chicago','Dallas','Philadephia','Seattle','Miami'"], 
             ['9,', "'Arlington'"], 
             ['11,', "'Austin'"]]
</code></pre>
<p>I'm clueless.</p>
</div>
<div class="post-text" itemprop="text">
<p>You'd be better off with a <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow"><code>dict</code></a>-like structure, <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>defaultdict</code></a> with <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow"><code>set</code></a> would seem the best choice.</p>
<p>Here's an example:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(set)
&gt;&gt;&gt; for index,city in loc_list:
...   d[index].add(city)
... 
&gt;&gt;&gt; for k,v in d.items():
...   print(k,v)
... 
4, {"'Stafford'"}
6, {"'Atlanta'", "'Sacramento'"}
1, {"'Houston'"}
5, {"'Houston'", "'Bellaire'", "'Sugarland'"}
9, {"'Arlington'"}
8, {"'Philadephia'", "'Dallas'", "'Seattle'", "'Chicago'", "'Miami'"}
7, {"'Milwaukee'"}
11, {"'Austin'"}
</code></pre>
<p>BTW: Your input list looks a bit strange, the <em>keys</em> are strings (instead of numbers) with a trailing coma: <code>'4,'</code>; and the <em>values</em> have double quotes: <code>"'Chicago'"</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like that:</p>
<pre><code>desired_list = {}
for elem in loc_list:
  if not elem[0] in desired_list:
    desired_list[elem[0]] = []
  desired_list[elem[0]].append(elem[1])


print desired_list
</code></pre>
<p>It's not a list but a dictionary
The output is:</p>
<pre><code>{'9,': ["'Arlington'"], '8,': ["'Chicago'", "'Dallas'", "'Philadephia'", "'Seattle'", "'Miami'"], '11,': ["'Austin'"], '7,': ["'Milwaukee'"], '6,': ["'Atlanta'", "'Sacramento'"], '5,': ["'Bellaire'", "'Sugarland'", "'Houston'"], '4,': ["'Stafford'"], '1,': ["'Houston'"]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Separate your concerns.
Depending on your index range just take something like an array or a hashtable.</p>
<p>Then for each item, you can have a set, and depending on your desires, you could have multiplicity in your set or not.</p>
<p>For initial construction you will need to traverse the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>I've written this solution that I think it's very clear and efficient. 
Using a defaultdict (data type from the collections package) you can obtain the same result with a little effort:</p>
<pre><code>import collections as co

loc_list=[['1,', "'Houston'"], 
         ['4,', "'Stafford'"], 
         ['5,', "'Bellaire'"], 
         ['5,', "'Sugarland'"], 
         ['5,', "'Houston'"], 
         ['6,', "'Atlanta'"], 
         ['6,', "'Sacramento'"], 
         ['7,', "'Milwaukee'"], 
         ['8,', "'Chicago'"], 
         ['8,', "'Dallas'"], 
         ['8,', "'Philadephia'"], 
         ['8,', "'Seattle'"], 
         ['8,', "'Miami'"], 
         ['9,', "'Arlington'"], 
         ['11,', "'Austin'"]]


def transform_list():
    count = co.defaultdict(list)

    for sublist in loc_list:
        count[sublist[0]].append(sublist[1])

    return count

if __name__ == '__main__':
    count = transform_list()
    print(count)
</code></pre>
<p>Passing a list to the defaultdict constructor your able to automatically create an empty list when a new key is specified.
I suggest to you to consider this example: <a href="https://docs.python.org/3.4/library/collections.html#defaultdict-examples" rel="nofollow">defaultdict examples</a></p>
</div>
<span class="comment-copy">Why don't you use a dictionary?</span>
<span class="comment-copy">will be stripping these now. thanks for the suggestion. Actually loading directly from CSV so that's why...</span>
