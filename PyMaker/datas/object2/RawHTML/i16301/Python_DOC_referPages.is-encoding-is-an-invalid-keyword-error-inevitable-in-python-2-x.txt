<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/questions/24893173/ansi-to-utf-8-using-python-causing-error">Ansi to UTF-8 using python causing error</a></p>
<p>I tried the answer there to convert ansi to utf-8.</p>
<pre><code>import io

with io.open(file_path_ansi, encoding='latin-1', errors='ignore') as source:
    with open(file_path_utf8, mode='w', encoding='utf-8') as target:
        shutil.copyfileobj(source, target)
</code></pre>
<p>But I got "TypeError: 'encoding' is an invalid keyword argument for this function"</p>
<p>I tried with</p>
<pre><code>with io.open(file_path_ansi, encoding='cp1252', errors='ignore') as source:
</code></pre>
<p>, too, and got same error.</p>
<p>Then I tried</p>
<pre><code>import io

with io.open(file_path_ansi, encoding='latin-1', errors='ignore') as source:
    with io.open(file_path_utf8, mode='w', encoding='utf-8') as target:
        shutil.copyfileobj(source, target)
</code></pre>
<p>and still got the same error. Also I tried with cp1252, too, but got the same error. </p>
<p>I learned from several stackoverflow questions that </p>
<pre><code>TypeError: 'encoding' is an invalid keyword argument for this function
</code></pre>
<p>is frequently arising error message in python 2.x</p>
<p>But mainly answerers were suggesting using python 3 in some way or the other.</p>
<p>Is it really impossible to convert ansi txt to utf-8 txt in python 2.x ? (I use 2.7)</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python2.7, Use <code>io.open()</code> in both locations.</p>
<pre><code>import io
import shutil

with io.open('/etc/passwd', encoding='latin-1', errors='ignore') as source:
    with io.open('/tmp/goof', mode='w', encoding='utf-8') as target:
        shutil.copyfileobj(source, target)
</code></pre>
<p>The above program runs without errors on my PC.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is how you can convert ansi to utf-8 in Python 2 (you just use normal file objects):</p>
<pre><code>with open(file_path_ansi, "r") as source:
    with open(file_path_utf8, "w") as target:
        target.write(source.read().decode("latin1").encode("utf8"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>TypeError: 'encoding' is an invalid keyword argument for this function</p>
</blockquote>
<pre><code>open('textfile.txt', encoding='utf-16')
</code></pre>
<p>Use io, it will work in both 2.7 and 3.6 python version</p>
<pre><code>import io
io.open('textfile.txt', encoding='utf-16')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had the same issue when I did try to write bytes to file.
So my point is, bytes are already encoded. So when you use encoding keyword this leads to an error.</p>
</div>
<span class="comment-copy">I doubt that you got the same error when you used <code>io.open()</code> for both calls. Please convert your code snippet to a complete program and re-run. If you still get the error, please copy-paste the entire program (it should only be 7 lines or so) and the entire error output into your question.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/24893173/ansi-to-utf-8-using-python-causing-error">Ansi to UTF-8 using python causing error</a></span>
<span class="comment-copy">For reference: <a href="http://pyvideo.org/video/948/pragmatic-unicode-or-how-do-i-stop-the-pain" rel="nofollow noreferrer">Pragmatic Unicode, or, How do I stop the pain?</a></span>
<span class="comment-copy">Using Python 3 constructs in Python 2 is inevitably an error, albeit sometimes not one with an explicit error message. In the worst case, your code runs, but does the wrong thing. You need to understand the differences between Python 2 and 3 and settle on one or the other. (Going forward, Py3 is the recommended choice.)</span>
<span class="comment-copy">Thank you! Perhaps I made some mistake when I tried io. Your code didn't cause any error message. But once I open the output in notepad++, non-English characters are all broken. I checked with both latin-1 and cp1252.</span>
<span class="comment-copy">I transfered <a href="https://drive.google.com/file/d/0B1sEqo7wNB1-Mk5KZFM2SmxtbTA/edit?usp=sharing" rel="nofollow noreferrer">drive.google.com/file/d/0B1sEqo7wNB1-Mk5KZFM2SmxtbTA/…</a> to <a href="https://drive.google.com/file/d/0B1sEqo7wNB1-RzE3VTc0SFhGR1U/edit?usp=sharing" rel="nofollow noreferrer">drive.google.com/file/d/0B1sEqo7wNB1-RzE3VTc0SFhGR1U/…</a>  As you can see, the non-English has been broken. Is this because it's python 2.7 ?</span>
<span class="comment-copy">For anyone still supporting older versions, this encoding-enabled variant of <code>open</code> (along with the rest of the <code>io</code> module) was <a href="https://docs.python.org/2.6/library/io.html#io.open" rel="nofollow noreferrer">introduced in Python 2.6</a>.  For 2/3 code compatibility, <a href="https://docs.python.org/3/library/io.html#io.open" rel="nofollow noreferrer">it's still in Python 3</a>, where it's just an alias to the built-in <code>open</code> function.</span>
<span class="comment-copy">Thank you.. but this code has the same problem as the one above. It breaks non-English characters. I converted drive.google.com/file/d/0B1sEqo7wNB1-Mk5KZFM2SmxtbTA/… to drive.google.com/file/d/0B1sEqo7wNB1-RzE3VTc0SFhGR1U/… As you can see, the non-English has been broken. Is this because it's python 2.7 ?</span>
<span class="comment-copy">It's because <code>latin-1</code> doesn't support non-English characters.</span>
<span class="comment-copy">I tested for <code>cp1252</code> not <code>latin1</code> and I am getting same error. When I open the ansi txt file using notepad++, then I correctly see those non-English characters. So I thought Python would be able to read these non-English, too, even if it is ansi. But there's no way?</span>
<span class="comment-copy">Well if there are non-english characters, then your file isn't ansii (or latin1).</span>
<span class="comment-copy">Hmm.. But when I go to "encoding" in notepad++, then I see that "ANSI" is checked.</span>
