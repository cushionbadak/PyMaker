<div class="post-text" itemprop="text">
<p>In Python, what are the differences between the <code>urllib</code>, <code>urllib2</code>, and <a href="http://docs.python-requests.org/en/latest/index.html" rel="noreferrer"><code>requests</code></a> module? Why are there three? They seem to do the same thing...</p>
</div>
<div class="post-text" itemprop="text">
<p>I know its been said already, but I'd highly recommend the Requests python package:
<a href="http://docs.python-requests.org/en/latest/index.html" rel="noreferrer">http://docs.python-requests.org/en/latest/index.html</a></p>
<p>If you've used languages other than python, you're probably thinking urllib and urllib2 are easy to use, not much code, and highly capable, that's how I used to think.  But the Requests package is so unbelievably useful and short that everyone should be using it.</p>
<p>First, it supports a fully restful API, and is as easy as:</p>
<pre><code>import requests
...

resp = requests.get('http://www.mywebsite.com/user')
resp = requests.post('http://www.mywebsite.com/user')
resp = requests.put('http://www.mywebsite.com/user/put')
resp = requests.delete('http://www.mywebsite.com/user/delete')
</code></pre>
<p>Regardless of whether GET/POST you never have to encode parameters again, it simply takes a dictionary as an argument and is good to go.</p>
<pre><code>userdata = {"firstname": "John", "lastname": "Doe", "password": "jdoe123"}
resp = requests.post('http://www.mywebsite.com/user', data=userdata)
</code></pre>
<p>Plus it even has a built in json decoder (again, i know json.loads() isn't a lot more to write, but this sure is convenient):</p>
<pre><code>resp.json()
</code></pre>
<p>Or if your response data is just text, use:</p>
<pre><code>resp.text
</code></pre>
<p>This is just the tip of the iceberg. This is the list of features from the requests site:</p>
<ul>
<li>International Domains and URLs</li>
<li>Keep-Alive &amp; Connection Pooling</li>
<li>Sessions with Cookie Persistence</li>
<li>Browser-style SSL Verification</li>
<li>Basic/Digest Authentication</li>
<li>Elegant Key/Value Cookies</li>
<li>Automatic Decompression</li>
<li>Unicode Response Bodies</li>
<li>Multipart File Uploads</li>
<li>Connection Timeouts</li>
<li>.netrc support</li>
<li>List item</li>
<li>Python 2.6—3.4</li>
<li>Thread-safe.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>urllib2 provides some extra functionality, namely the <code>urlopen()</code> function can allow you to specify headers (normally you'd have had to use httplib in the past, which is far more verbose.) More importantly though, urllib2 provides the <code>Request</code> class, which allows for a more declarative approach to doing a request:</p>
<pre><code>r = Request(url='http://www.mysite.com')
r.add_header('User-Agent', 'awesome fetcher')
r.add_data(urllib.urlencode({'foo': 'bar'})
response = urlopen(r)
</code></pre>
<p>Note that <code>urlencode()</code> is only in urllib, not urllib2.</p>
<p>There are also handlers for implementing more advanced URL support in urllib2.  The short answer is, unless you're working with legacy code, you probably want to use the URL opener from urllib2, but you still need to import into urllib for some of the utility functions.</p>
<p><strong>Bonus answer</strong>
With Google App Engine, you can use any of httplib, urllib or urllib2, but all of them are just wrappers for Google's URL Fetch API. That is, you are still subject to the same limitations such as ports, protocols, and the length of the response allowed. You can use the core of the libraries as you would expect for retrieving HTTP URLs, though.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>urllib</strong> and <strong>urllib2</strong> are both Python modules that do URL request related stuff but offer different functionalities.</p>
<p>1) urllib2 can accept a Request object to set the headers for a URL request, urllib accepts only a URL.</p>
<p>2) urllib provides the <strong>urlencode</strong> method which is used for the generation of GET query strings, urllib2 doesn't have such a function. This is one of the reasons why urllib is often used along with urllib2.</p>
<p><strong>Requests</strong> - Requests’ is a simple, easy-to-use HTTP library written in Python.</p>
<p>1) Python Requests encodes the parameters automatically so you just pass them as simple arguments, unlike in the case of urllib, where you need to use the method <strong>urllib.encode()</strong> to encode the parameters before passing them.</p>
<p>2) It automatically decoded the response into Unicode.</p>
<p>3) Requests also has far more convenient error handling.If your authentication failed, urllib2 would raise a urllib2.URLError, while Requests would return a normal response object, as expected. All you have to see if the request was successful by boolean <strong>response.ok</strong></p>
<p>For example reference - <a href="https://dancallahan.info/journal/python-requests/" rel="noreferrer">https://dancallahan.info/journal/python-requests/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>urllib2.urlopen accepts an instance of the Request class or a url, whereas urllib.urlopen only accepts a url.</p>
<p>A similar discussion took place here:
<a href="http://www.velocityreviews.com/forums/t326690-urllib-urllib2-what-is-the-difference.html" rel="noreferrer">http://www.velocityreviews.com/forums/t326690-urllib-urllib2-what-is-the-difference.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I like the <code>urllib.urlencode</code> function, and it doesn't appear to exist in <code>urllib2</code>. </p>
<pre><code>&gt;&gt;&gt; urllib.urlencode({'abc':'d f', 'def': '-!2'})
'abc=d+f&amp;def=-%212'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One considerable difference is about porting Python2 to Python3. urllib2 does not exist for python3 and its methods ported to urllib.
So you are using that heavily and want to migrate to Python3 in future, consider using urllib.
However 2to3 tool will automatically do most of the work for you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just to add to the existing answers, I don't see anyone mentioning that python requests is not a native library. If you are ok with adding dependencies, then requests is fine. However, if you are trying to avoid adding dependencies, urllib is a native python library that is already available to you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should generally use urllib2, since this makes things a bit easier at times by accepting Request objects and will also raise a URLException on protocol errors. With Google App Engine though, you can't use either. You have to use the <a href="http://code.google.com/appengine/docs/python/urlfetch/" rel="nofollow noreferrer">URL Fetch API</a> that Google provides in its sandboxed Python environment.</p>
</div>
<div class="post-text" itemprop="text">
<p>To get the content of a url:</p>
<pre><code>try: # Try importing requests first.
    import requests
except ImportError: 
    try: # Try importing Python3 urllib
        import urllib.request
    except AttributeError: # Now importing Python2 urllib
        import urllib


def get_content(url):
    try:  # Using requests.
        return requests.get(url).content # Returns requests.models.Response.
    except NameError:  
        try: # Using Python3 urllib.
            with urllib.request.urlopen(index_url) as response:
                return response.read() # Returns http.client.HTTPResponse.
        except AttributeError: # Using Python3 urllib.
            return urllib.urlopen(url).read() # Returns an instance.
</code></pre>
<p>It's hard to write Python2 and Python3 and <code>request</code> dependencies code for the responses because they <code>urlopen()</code> functions and <code>requests.get()</code> function return different types:</p>
<ul>
<li>Python2 <code>urllib.request.urlopen()</code> returns a <code>http.client.HTTPResponse</code></li>
<li>Python3 <code>urllib.urlopen(url)</code> returns an <code>instance</code></li>
<li>Request <code>request.get(url)</code> returns a <code>requests.models.Response</code></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>A key point that I find missing in the above answers is that urllib returns an object of type <code>&lt;class http.client.HTTPResponse&gt;</code> whereas <code>requests</code> returns <code>&lt;class 'requests.models.Response'&gt;</code>.</p>
<p>Due to this, read() method can be used with <code>urllib</code> but not with <code>requests</code>.</p>
<p>P.S. : <code>requests</code> is already rich with so many methods that it hardly needs one more as <code>read()</code> ;&gt;</p>
</div>
<span class="comment-copy">Not to throw another wrench in your plans, but if you're talking about using them for HTTP access I'd recommend <a href="http://code.google.com/p/httplib2/" rel="nofollow noreferrer">code.google.com/p/httplib2</a> (httplib2) instead.</span>
<span class="comment-copy"><a href="http://docs.python-requests.org/en/latest/index.html" rel="nofollow noreferrer">Requests</a> is the best.</span>
<span class="comment-copy">Yes, use requests. <a href="http://stackoverflow.com/questions/22676/how-do-i-download-a-file-over-http-using-python/10744565#10744565" title="how do i download a file over http using python">stackoverflow.com/questions/22676/…</a></span>
<span class="comment-copy">requests uses urllib3.. 3 is a bigger number</span>
<span class="comment-copy">I feel like this question should be expanded to include urllib3 now.</span>
<span class="comment-copy">I picked this as the answer because the original answer has gone stale. So if you're wondering why this answer is ahead of an answer with 76 upvotes, its because Requests is the new defacto way to do things.</span>
<span class="comment-copy">@PaulBiggar you say this is the best answer. But it does not really answer the question. I came here to find out about differences between urllib and urllib2. Especially about url encoding features. The answer: use requests! ;) Just saying you might want to clarify the question. As it stands, the answer from Crast actually does answer the question perfectly.</span>
<span class="comment-copy">@exhuma urllib2 tries to further abstract url requests with the urllib2.Request class, but lacks a few common utilities which is why it’s often used in conjunction with urllib, and to answer your specific question: it has no url encoding features, for param encoding you'd use urllib.urlencode(), for url-safe string encoding you'd use urllib.quote()/quote_plus(). Requests takes care of all of this for you: just add unencoded/un-safe strings to the params dict; which is part of the reason most python-ers say its a better alternative.</span>
<span class="comment-copy">In case some else finds this in 2016, you probably want to write <code>requests.post('http://www.mywebsite.com/user', data=userdata)</code> and not  <code>requests.post('http://www.mywebsite.com/user', params=userdata)</code></span>
<span class="comment-copy">ty @LGenzelis, I fixed the bug! I can't see exactly when the change occurred, but at least 2015. Example now: <a href="http://docs.python-requests.org/en/latest/user/quickstart/#more-complicated-post-requests" rel="nofollow noreferrer">docs.python-requests.org/en/latest/user/quickstart/…</a> ; Docs: <a href="http://docs.python-requests.org/en/latest/user/quickstart/#more-complicated-post-requests" rel="nofollow noreferrer">docs.python-requests.org/en/latest/user/quickstart/…</a></span>
<span class="comment-copy">How does somebody create a url with an encoded query string using urllib2? It's the only reason I'm using urllib and I'd like to make sure I'm doing everything the latest/greatest way.</span>
<span class="comment-copy">Like in my above example, you use <code>urlopen()</code> and <code>Request</code> from <i>urllib2</i>, and you use <code>urlencode()</code> from <i>urllib</i>. No real harm in using both libraries, as long as you make sure you use the correct urlopen.  The [urllib docs][1] are clear on that using this is acecepted usage.    [1]: <a href="http://docs.python.org/library/urllib2.html#urllib2.urlopen" rel="nofollow noreferrer">docs.python.org/library/urllib2.html#urllib2.urlopen</a></span>
<span class="comment-copy">I used <a href="https://gist.github.com/vgoklani/1811970" rel="nofollow noreferrer">this</a> gist for <code>urllib2.urlopen</code> ; contains other variations too.</span>
<span class="comment-copy">urllib2 does not support put or delete which is a pain</span>
<span class="comment-copy"><code>requests</code> also allow custom headers: <a href="http://docs.python-requests.org/en/master/user/quickstart/#custom-headers" rel="nofollow noreferrer">docs.python-requests.org/en/master/user/quickstart/…</a></span>
<span class="comment-copy">what about urllib3?</span>
<span class="comment-copy">Just a note, be careful with urlencode as it can't handle &lt;unicode&gt;  objects directly -- you have to encode them before sending them to urlencode (u'blá'.encode('utf-8'), or whatever).</span>
<span class="comment-copy">@user18015: I do not think this applies to Python 3, can you clarify?</span>
<span class="comment-copy">As I noted above, this question and the various answers should be updated to clarify that <code>urllib</code> in Python 3 is yet another option, cleaned up in various ways. But thankfully, the official documentation also notes that "<i>The Requests package is recommended for a higher-level HTTP client interface.</i>" at <a href="https://docs.python.org/3/library/urllib.request.html" rel="nofollow noreferrer">21.6. urllib.request — Extensible library for opening URLs — Python 3.6.3 documentation</a></span>
<span class="comment-copy">What you said about appengine is not entirely true. You can actually use httplib, urllib, and urllib2 in App Engine now (they are wrappers for url fetch, done so that more code would be compatible with appengine.)</span>
<span class="comment-copy">Ah, must be new. My code failed last I tried and had to be rewritten to work with fetch...</span>
<span class="comment-copy"><a href="https://devsite.googleplex.com/appengine/docs/python/urlfetch/overview#Fetching_URLs_in_Python" rel="nofollow noreferrer">devsite.googleplex.com/appengine/docs/python/urlfetch/…</a></span>
