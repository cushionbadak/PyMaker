<div class="post-text" itemprop="text">
<p>I am trying to write a string + datetime to a text file with Python. I'm trying to make a basic logger, that will log the datetime in a format of; "Full weekday, day number, Full month name, full year, 12 hour format, minute, second, AM/PM, UTC". I read that file.write() can only take strings and not integers or dates etc. So how would I would I make this work to be written to the text file?</p>
<pre><code>grab_date = datetime.datetime.now().strftime("%A %d, %B %Y %I:%M:%S %p %Z")
firstline = "Log Created: ", grab_date, "/nLog deleted and recreated."
f = open("gen-log.txt", "w")
f.seek(0)
f.write(firstline)
f.close()
</code></pre>
<p>EDIT: not quite sure why but I read on one post that f.seek(0) did something and it worked for them. lol. I just left it in there. Sorry.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can format your data into a string; with <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow">string formatting</a>, for example:</p>
<pre><code>firstline = "Log Created: {}/nLog deleted and recreated.".format(grab_date)
</code></pre>
<p>You can also make use of <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow"><code>print()</code></a>'s ability to convert all arguments to a string and automatic newlines, and have <em>it</em> write to the file:</p>
<pre><code>print("Log Created:", grab_date, file=f)
print("Log deleted and recreated.", file=f)
</code></pre>
<p>If you can avoid it, don't reinvent the logging wheel and use the <a href="https://docs.python.org/3/library/logging.html" rel="nofollow"><code>logging</code> module</a>. It can be <a href="https://docs.python.org/3/library/logging.html#logging.basicConfig" rel="nofollow">configured to take a different date format</a>:</p>
<pre><code>&gt;&gt;&gt; import logging
&gt;&gt;&gt; logging.basicConfig(datefmt="%A %d, %B %Y %I:%M:%S %p %Z", format='Log Created: %(asctime)-15s %(message)s')
&gt;&gt;&gt; logging.warn('Foo bar baz!')
Log Created: Monday 28, July 2014 08:13:44 PM BST Foo bar baz!
</code></pre>
</div>
<span class="comment-copy">What you're doing with <code>fileline = foo, bar, baz</code> is setting <code>fileline</code> to a tuple of three values. You can't <code>write</code> a tuple, only a string. (The fact that <code>print</code> can take a bunch of comma-separated arguments is because <code>print</code> is a special statement.)</span>
<span class="comment-copy">why are you opening and then using seek?</span>
<span class="comment-copy">Is there a reason you're trying to write your own logger instead of using the <code>logging</code> module? There are a whole lot of other things to deal with that you haven't even begun to approach (like appending instead of overwriting and/or moving the old file out of the way, and wrapping things up in a single function call so you don't have to write 6 lines of code for each log message, and deciding whether to keep the file open or reopen/close with each message or batch them up, and so on).</span>
<span class="comment-copy">@abarnet just because you see only 6 lines of code doesnt mean thats all thats there. I have it in a function, and a bunch of other code. I just took the snippet that wasn't working. Python isnt the first programming language I know. Dont judge a book by its cover yo but thanks for the tip</span>
<span class="comment-copy">Thanks for the help! Would it be worth using logging when all im really adding to the text file is just a few errors?</span>
<span class="comment-copy">@catalyst: sure, <code>logging</code> is easy to use and gives you a lot of flexibility <i>later</i> when you may need more control. The module gives you that for free.</span>
