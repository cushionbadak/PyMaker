<div class="post-text" itemprop="text">
<p>I am using Python 3.4.</p>
<p>I have started a project to download the UK Met Office Forecast data (in JSON format) and use the information as a weather compensator for my home heating system.  I have succeeded in downloading the JSON datafile from the MET Office, and now I want to extract the info I need.  I can do this by converting the file to a string and using <code>.find</code> and <code>.int</code> methods to extract the data, but this seems crude (but effective).  As JSON is said to be a well-used data interchange format, there must be a better way to do this.  I have found things like <code>json.load</code> and <code>json.loads</code>, and also <code>json.JSONDecoder.decode</code> but I haven't had any success in using these, and I really have little idea of what I am doing!</p>
<p>My code is:</p>
<pre><code>import urllib.request
import json

#Comment:  THIS IS THE CALL TO GET THE MET OFFICE FILE FROM THE INTERNET
#Comment:  **** = my personal met office API key, which I had better keep to myself

response = urllib.request.urlopen('http://datapoint.metoffice.gov.uk/public/data/val/wxfcs/all/json/354037?res=3hourly&amp;key=****')

FCData    = response.read()
FCDataStr = str(FCData)

#Comment:   END OF THE CALL TO GET MET OFFICE FILE FROM THE INTERNET
#Comment:   Example of data extraction

ChPos = FCDataStr.find('"DV"')      #Find "DV"    
ChPos = FCDataStr.find('"dataDate"', ChPos, ChPos+50)      #Find "dataDate"

FileDataDate = FCDataStr[ChPos+12:ChPos+22]                #Extract the date of the file

#Comment:   And so on
</code></pre>
<p>When using <code>json.loads(FCDataStr)</code> I get the following error message:</p>
<blockquote>
<p>"ValueError: Expecting value: line 1 column 1 (char 0)"</p>
</blockquote>
<p>By deleting the b' at the start and the ' at the end, this error goes away (see below). Printing the JSON file in string format, using <code>print(FCDataStr)</code> gives:</p>
<pre><code>b'{"SiteRep":{"Wx":{"Param":[{"name":"F","units":"C","$":"Feels Like Temperature"},{"name":"G","units":"mph","$":"Wind Gust"},{"name":"H","units":"%","$":"Screen Relative Humidity"},{"name":"T","units":"C","$":"Temperature"},{"name":"V","units":"","$":"Visibility"},{"name":"D","units":"compass","$":"Wind Direction"},{"name":"S","units":"mph","$":"Wind Speed"},{"name":"U","units":"","$":"Max UV Index"},{"name":"W","units":"","$":"Weather Type"},{"name":"Pp","units":"%","$":"Precipitation Probability"}]},"DV":{"dataDate":"2014-07-29T20:00:00Z","type":"Forecast","Location":{"i":"354037","lat":"51.7049","lon":"-2.9022","name":"USK","country":"WALES","continent":"EUROPE","elevation":"43.0","Period":[{"type":"Day","value":"2014-07-29Z","Rep":[{"D":"NNW","F":"22","G":"11","H":"51","Pp":"4","S":"9","T":"24","V":"VG","W":"7","U":"7","$":"900"},{"D":"NW","F":"19","G":"16","H":"61","Pp":"8","S":"11","T":"22","V":"EX","W":"8","U":"1","$":"1080"},{"D":"NW","F":"16","G":"20","H":"70","Pp":"1","S":"11","T":"18","V":"VG","W":"2","U":"0","$":"1260"}]},{"type":"Day","value":"2014-07-30Z","Rep":[{"D":"NW","F":"13","G":"16","H":"84","Pp":"0","S":"7","T":"14","V":"VG","W":"0","U":"0","$":"0"},{"D":"WNW","F":"12","G":"13","H":"90","Pp":"0","S":"7","T":"13","V":"VG","W":"0","U":"0","$":"180"},{"D":"WNW","F":"13","G":"11","H":"87","Pp":"0","S":"7","T":"14","V":"GO","W":"1","U":"1","$":"360"},{"D":"SW","F":"18","G":"9","H":"67","Pp":"0","S":"4","T":"19","V":"VG","W":"1","U":"2","$":"540"},{"D":"WNW","F":"21","G":"13","H":"56","Pp":"0","S":"9","T":"22","V":"VG","W":"3","U":"6","$":"720"},{"D":"W","F":"21","G":"20","H":"55","Pp":"0","S":"11","T":"23","V":"VG","W":"3","U":"6","$":"900"},{"D":"W","F":"18","G":"22","H":"57","Pp":"0","S":"11","T":"21","V":"VG","W":"1","U":"2","$":"1080"},{"D":"WSW","F":"16","G":"13","H":"80","Pp":"0","S":"7","T":"16","V":"VG","W":"0","U":"0","$":"1260"}]},{"type":"Day","value":"2014-07-31Z","Rep":[{"D":"SW","F":"14","G":"11","H":"91","Pp":"0","S":"4","T":"15","V":"GO","W":"0","U":"0","$":"0"},{"D":"SW","F":"14","G":"11","H":"92","Pp":"0","S":"4","T":"14","V":"GO","W":"0","U":"0","$":"180"},{"D":"SW","F":"15","G":"11","H":"89","Pp":"3","S":"7","T":"16","V":"GO","W":"3","U":"1","$":"360"},{"D":"WSW","F":"17","G":"20","H":"79","Pp":"28","S":"11","T":"18","V":"GO","W":"3","U":"2","$":"540"},{"D":"WSW","F":"18","G":"22","H":"72","Pp":"34","S":"11","T":"20","V":"GO","W":"10","U":"5","$":"720"},{"D":"WSW","F":"18","G":"22","H":"66","Pp":"13","S":"11","T":"20","V":"VG","W":"7","U":"5","$":"900"},{"D":"WSW","F":"17","G":"22","H":"69","Pp":"36","S":"11","T":"19","V":"VG","W":"10","U":"2","$":"1080"},{"D":"WSW","F":"16","G":"16","H":"84","Pp":"6","S":"9","T":"17","V":"GO","W":"2","U":"0","$":"1260"}]},{"type":"Day","value":"2014-08-01Z","Rep":[{"D":"SW","F":"16","G":"13","H":"91","Pp":"4","S":"7","T":"16","V":"GO","W":"7","U":"0","$":"0"},{"D":"SW","F":"15","G":"11","H":"93","Pp":"5","S":"7","T":"16","V":"GO","W":"7","U":"0","$":"180"},{"D":"SSW","F":"15","G":"11","H":"93","Pp":"7","S":"7","T":"16","V":"GO","W":"7","U":"1","$":"360"},{"D":"SSW","F":"17","G":"18","H":"79","Pp":"14","S":"9","T":"18","V":"GO","W":"7","U":"2","$":"540"},{"D":"SSW","F":"17","G":"22","H":"74","Pp":"43","S":"11","T":"19","V":"GO","W":"10","U":"5","$":"720"},{"D":"SW","F":"16","G":"22","H":"81","Pp":"48","S":"11","T":"18","V":"GO","W":"10","U":"5","$":"900"},{"D":"SW","F":"16","G":"18","H":"80","Pp":"55","S":"9","T":"17","V":"GO","W":"12","U":"1","$":"1080"},{"D":"SSW","F":"15","G":"16","H":"89","Pp":"38","S":"7","T":"16","V":"GO","W":"9","U":"0","$":"1260"}]},{"type":"Day","value":"2014-08-02Z","Rep":[{"D":"S","F":"14","G":"11","H":"94","Pp":"15","S":"7","T":"15","V":"GO","W":"7","U":"0","$":"0"},{"D":"SSE","F":"14","G":"11","H":"94","Pp":"16","S":"7","T":"15","V":"GO","W":"7","U":"0","$":"180"},{"D":"S","F":"14","G":"13","H":"93","Pp":"36","S":"7","T":"15","V":"GO","W":"10","U":"1","$":"360"},{"D":"S","F":"15","G":"20","H":"84","Pp":"62","S":"11","T":"17","V":"GO","W":"14","U":"2","$":"540"},{"D":"SSW","F":"16","G":"22","H":"78","Pp":"63","S":"11","T":"18","V":"GO","W":"14","U":"5","$":"720"},{"D":"WSW","F":"16","G":"27","H":"66","Pp":"59","S":"13","T":"19","V":"VG","W":"14","U":"5","$":"900"},{"D":"WSW","F":"15","G":"25","H":"68","Pp":"39","S":"13","T":"18","V":"VG","W":"10","U":"2","$":"1080"},{"D":"SW","F":"14","G":"16","H":"80","Pp":"28","S":"9","T":"15","V":"VG","W":"0","U":"0","$":"1260"}]}]}}}}'
</code></pre>
<p>The result of using:</p>
<pre><code>DecodedJSON = json.loads(FCDataStr)
print(DecodedJSON)
</code></pre>
<p>gives a very similar result to the original FCDataStr file.  </p>
<p>How do I proceed to extract the data (such as temperature, wind speed etc for each 3 hourly forecast) from the file?    </p>
</div>
<div class="post-text" itemprop="text">
<p>This is the problem:</p>
<pre><code>FCDataStr = str(FCData)
</code></pre>
<p>When you call <code>str</code> on a <code>bytes</code> object, what you get is the string representation of a <code>bytes</code> object—in quotes, with a <code>b</code> prefix, and with special characters backslash-escaped.</p>
<p>If you wanted to decode the binary data to text, you have to do that with the <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow"><code>decode</code></a> method:</p>
<pre><code>FCDataStr = FCData.decode('utf-8')
</code></pre>
<p>(I'm guessing UTF-8 because JSON is always supposed to be in UTF-8 unless otherwise specified.)</p>
<hr/>
<p>In more detail:</p>
<p><a href="https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen" rel="nofollow"><code>urllib.request.urlopen</code></a> returns an <a href="https://docs.python.org/3/library/http.client.html#httpresponse-objects" rel="nofollow"><code>http.client.HTTPResponse</code></a>, which is a binary file-like object, (which implements <a href="https://docs.python.org/3/library/io.html#io.RawIOBase" rel="nofollow"><code>io.RawIOBase</code></a>).</p>
<p>You can't pass that to <a href="https://docs.python.org/3/library/json.html#json.load" rel="nofollow"><code>json.load</code></a> because it wants a text-file-like object—something with a <code>read</code> method that returns <code>str</code>, not <code>bytes</code>. You <em>could</em> wrap your <code>HTTPResponse</code> in an <code>io.BufferedReader</code>, then wrap than in an <code>io.TextIOBase</code> (with <code>encoding='utf-8')</code>, then pass that to <code>json.load</code>, but that's probably more work than you want to do.</p>
<p>So, the simplest thing to do is exactly what you were trying to do, just using <code>decode</code> instead of <code>str</code>:</p>
<p>data_bytes = response.read()
   data_str = data_bytes.decode('utf-8')
   data_dict = json.loads(data_str) </p>
<hr/>
<p>Then, don't try to access the data in <code>data_str</code>—that's just a string, representing the JSON encoding of your data; <code>data_dict</code> is the actual data. </p>
<p>For example, to find the <code>dataDate</code> of the <code>DV</code> of the <code>SiteRep</code>, you just do this:</p>
<pre><code>data_dict['SiteRep']['DV']['DataDate']
</code></pre>
<p>That will get you the string '2014-07-31T14:00:00Z'. You'll still probably want to convert to that to a <code>datetime.datetime</code> object (because JSON only understands a few basic types: strings, numbers, lists, and dicts). But it's still a lot better than trying to pick it out of <code>data_str</code> by <code>find</code>-ing or guessing at the offsets.</p>
<hr/>
<p>My guess is that you've found some sample code written for Python 2.x, where you can convert between byte strings and Unicode strings just by calling the appropriate constructors, without specifying an encoding, which would default to <code>sys.getdefaultencoding()</code>, and often (at least on Mac or most modern Linux distros) that's UTF-8, so it just happened to work despite being wrong. In which case you may want to find some better sample code to learn from…</p>
</div>
<div class="post-text" itemprop="text">
<p>For other clueless people who may want to use the UK Met Office 3-hourly forecast data feed, below is the solution that I am using:</p>
<pre><code>import urllib.request
import json

###  THIS IS THE CALL TO GET THE MET OFFICE FILE FROM THE INTERNET
response = urllib.request.urlopen('http://datapoint.metoffice.gov.uk/public/data/val/wxfcs/all/json/**YourLocationID**?res=3hourly&amp;key=**your_api_key**')
FCData = response.read()
FCDataStr = FCData.decode('utf-8')
###   END OF THE CALL TO GET MET OFFICE FILE FROM THE INTERNET

#Converts JSON data to a dictionary object
FCData_Dic = json.loads(FCDataStr)

#The following are examples of extracting data from the dictionary object.
#The JSON data is heavily nested.
#Each [] goes one level down, usually defined with {} in the JSON data.
dataDate = (FCData_Dic['SiteRep']['DV']['dataDate'])
print('dataDate =',dataDate)

#There are also [] in the JSON data, which are referenced with integers, 
# starting from [0]
#Here, the [0] refers to the first day's block of data defined with [].
DateDay0 = (FCData_Dic['SiteRep']['DV']['Location']['Period'][0]['value'])
print('DateDay0 =',DateDay0)

#The second [0] picks out each of the first day's forecast data, in this case the time, referenced by '$'
TimeOfFC = (FCData_Dic['SiteRep']['DV']['Location']['Period'][0]['Rep'][0]['$'])
print('TimeOfFC =',TimeOfFC)

#Ditto for the temperature.    
Temperature = int((FCData_Dic['SiteRep']['DV']['Location']['Period'][0]['Rep'][0]['T']))
print('Temperature =',Temperature)

#Ditto for the weather Type (a code number).
WeatherType = int((FCData_Dic['SiteRep']['DV']['Location']['Period'][0]['Rep'][0]['W']))
print('WeatherType =',WeatherType)
</code></pre>
<p>I hope this helps somebody!</p>
</div>
<div class="post-text" itemprop="text">
<p>I been at parsing the Met Office datapoint output.</p>
<p>Thanks to the response above I have something that works for me.</p>
<p>I am writing the data I am interested in to a CSV file:</p>
<pre><code>import sys
import os
import urllib.request
import json

###  THIS IS THE CALL TO GET THE MET OFFICE FILE FROM THE INTERNET
response = urllib.request.urlopen('http://datapoint.metoffice.gov.uk/public/data/val/wxobs/all/json/3351?res=hourly&amp;?key=&lt;my key&gt;')
FCData = response.read()
FCDataStr = FCData.decode('utf-8')
###   END OF THE CALL TO GET MET OFFICE FILE FROM THE INTERNET

#Converts JSON data to a dictionary object
FCData_Dic = json.loads(FCDataStr)

# Open output file for appending
fName=&lt;my filename&gt;
if (not os.path.exists(fName)):
    print(fName,' does not exist')
    exit()
fOut=open(fName, 'a')

# Loop through each day, will nearly always be 2 days,
# unless run at midnight. 
i = 0
j = 0
for k in range(24):
    # there will be 24 values altogether
    # find the first hour value for the first day
    DateZ = (FCData_Dic['SiteRep']['DV']['Location']['Period'][i]['value'])
    hhmm = (FCData_Dic['SiteRep']['DV']['Location']['Period'][i]['Rep'][j]  ['$'])
    Temperature = (FCData_Dic['SiteRep']['DV']['Location']['Period'][i]['Rep'][j]['T'])
    Humidity = (FCData_Dic['SiteRep']['DV']['Location']['Period'][i]['Rep'][j]['H'])
    DewPoint = (FCData_Dic['SiteRep']['DV']['Location']['Period'][i]['Rep'][j]['Dp'])
    recordStr = '{},{},{},{},{}\n'.format(DateZ,hhmm,Temperature,Humidity,DewPoint)
    fOut.write(recordStr)
    j = j + 1
    if (hhmm == '1380'):
        i = i + 1
        j = 0
fOut.close()
print('Records added to ',fName)`
</code></pre>
</div>
<span class="comment-copy">As a side note, unless you have a good reason for doing otherwise (e.g., to fit in with an ecosystem with its own coding style), it's usually better to use <a href="http://legacy.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> style for Python code, especially code you may need to ask for help with on StackOverflow, python-list, etc. For example, the tiny bit of cognitive overhead it takes someone to realize that <code>FCDataStr</code> is an object rather than a class and guess what it means might be the last straw that turns off someone who might have helped, so you only get 1 answer instead of 2 (or 0 instead of 1).</span>
<span class="comment-copy">I tried Qwerty = json.loads(FCData)</span>
<span class="comment-copy">Sorry, pressed Return.     	  	 I tried Qwerty = json.loads(FCData) and got error message "TypeError: the JSON object must be str, not 'bytes'".  Also Qwerty = json.load(response) which gave the error  TypeError: the JSON object must be str, not 'bytes' - this seems odd as the .load is for a byte file I thought.</span>
<span class="comment-copy">Thanks for the utf-8 code - that works and converts to text without the b', as you said.  I still need to get the info out of the file though.  (NB I have used Microsoft Visual Basic for Excel a bit, which is where I got the STR ideas from).</span>
<span class="comment-copy">@user3889219: I don't know what you mean by "get the info out of the file". If you decode the UTF-8 bytes to a string, then call <code>json.loads</code> on the string, you get the data as a normal Python dict. What problem do you have beyond that?</span>
<span class="comment-copy">Think I'm there.  This seems to do the job:  &gt;&gt;&gt; FCData_Dic['SiteRep']['DV']['Location']['Period'][0]['Rep'][0]['D'].  This produces 'SW'.  Many thanks for your patience and your invaluable help.</span>
<span class="comment-copy">This looks interesting. I tried with requests - and didn't have much luck - have you tried?</span>
<span class="comment-copy">looks great! Did anbody manage to be able to pass a pair of lat/long values instead of the LocationID to the Met Office API?</span>
