<div class="post-text" itemprop="text">
<p>I have a .txt file in the format:</p>
<pre><code>AED|784|2|United Arab Emirates dirham|United Arab Emirates
AFN|971|2|Afghan afghani|Afghanistan
ALL|8|2|Albanian lek|Albania
AMD|51|2|Armenian dram|Armenia
ANG|532|2|Netherlands Antillean guilder|Curaçao (CW), Sint Maarten (SX)
</code></pre>
<p>I would like to extract each substring deliminated by '|' </p>
<p>So for example,</p>
<pre><code>var1,var2,var3,var4 = ""

text = "AED|784|2|United Arab Emirates dirham|United Arab Emirates"

text.extract("{0}|{1}|{2}|{3}|{4}", var1, var2, var3, var4)

print(var1) // prints AED
</code></pre>
<p>Is there an easy/efficient way to do this (possibly using regex)?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>text = "AED|784|2|United Arab Emirates dirham|United Arab Emirates"

spl = text.split("|")

var1, var2, var3, var4, var5 = spl
print(var1)
print (spl)
AED
['AED', '784', '2', 'United Arab Emirates dirham', 'United Arab Emirates']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Even better, instead of reading in a CSV-dialect file as text and then trying to figure out what to do with it, read it in as a CSV-dialect file using the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow"><code>csv</code></a> module:</p>
<pre><code>with open(textfile, 'rb') as f:
    for row in csv.reader(f, delimiter='|'):
        print row[0]
</code></pre>
<p>This will print <code>'AED'</code>, then <code>'AFN'</code>, and so on.</p>
<p>If you want to turn this into a list of lists, that's easy:</p>
<pre><code>with open(textfile, 'rb') as f:
    data = list(csv.reader(f, delimiter='|'))
</code></pre>
<p>Now <code>data</code> is:</p>
<pre><code>[['AED', '784', '2', 'United Arab Emirates dirham', 'United Arab Emirates'],
 ['AFN', '971', '2', 'Afghan afghani', 'Afghanistan'],
 ['ALL', '8', '2', 'Albanian lek', 'Albania'],
 ['AMD', '51', '2', 'Armenian dram', 'Armenia'],
 ['ANG', '532', '2', 'Netherlands Antillean guilder',
  'Curaçao (CW), Sint Maarten (SX)']]
</code></pre>
<p>The major advantage here is that if you later realize that your file has, e.g., some column values that had to be quoted, or optional columns left off the end, or just about anything else you didn't anticipate ahead of time, you don't have to go back and write a new parser, you just figure out which <a href="https://docs.python.org/3/library/csv.html#csv-fmt-params" rel="nofollow">dialect parameter</a> needs to be changed.</p>
<p>Or, if you'd rather access the columns by name instead of index, you can just switch to a <code>DictReader</code> and you get back dictionaries instead of list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Through python's re module,</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = "AED|784|2|United Arab Emirates dirham|United Arab Emirates"
&gt;&gt;&gt; m = re.findall(r'([^|]+)', text)
&gt;&gt;&gt; m
['AED', '784', '2', 'United Arab Emirates dirham', 'United Arab Emirates']
</code></pre>
</div>
<span class="comment-copy">Just <code>text.split('|')</code>?</span>
<span class="comment-copy">If you have a file to process that has delimited fields, try using the csv module.</span>
<span class="comment-copy">This solution is great because it gives you more freedom to handle the possibility of optional columns at the end. Thank you.</span>
