<div class="post-text" itemprop="text">
<p>I have a two lists, and I want to combine them in an alternating fashion, until one runs out, and then I want to keep adding elements from the longer list.</p>
<p>Aka.</p>
<pre><code>list1 = [a,b,c]

list2 = [v,w,x,y,z]

result = [a,v,b,w,c,x,y,z]
</code></pre>
<p>Similar to this question (<a href="https://stackoverflow.com/questions/3678869/pythonic-way-to-combine-two-lists-in-an-alternating-fashion">Pythonic way to combine two lists in an alternating fashion?</a>), except in these the lists stop combining after the first list has run out :(.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is the simpler version from the excellent <a href="http://toolz.readthedocs.org/en/latest/api.html#toolz.itertoolz.interleave" rel="nofollow">toolz</a>:</p>
<pre><code>&gt;&gt;&gt; interleave([[1,2,3,4,5,6,7,],[0,0,0]])
[1, 0, 2, 0, 3, 0, 4, 5, 6, 7]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You might be interested in this <a href="https://docs.python.org/2/library/itertools.html#recipes" rel="noreferrer"><code>itertools</code> recipe</a>:</p>
<pre><code>def roundrobin(*iterables):
    "roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C"
    # Recipe credited to George Sakkis
    pending = len(iterables)
    nexts = cycle(iter(it).next for it in iterables)
    while pending:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            pending -= 1
            nexts = cycle(islice(nexts, pending))
</code></pre>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; from itertools import cycle, islice
&gt;&gt;&gt; list1 = list("abc")
&gt;&gt;&gt; list2 = list("uvwxyz")
&gt;&gt;&gt; list(roundrobin(list1, list2))
['a', 'u', 'b', 'v', 'c', 'w', 'x', 'y', 'z']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My solution: </p>
<pre><code>result = [i for sub in zip(list1, list2) for i in sub]
</code></pre>
<p>EDIT: Question specifies the longer list should continue at end of shorter list, which this answer does <em>not</em> do.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use plain <code>map</code> and list comprehension:</p>
<pre><code>&gt;&gt;&gt; [x for t in map(None, a, b) for x in t if x]
['a', 'v', 'b', 'w', 'c', 'x', 'y', 'z']
</code></pre>
</div>
<span class="comment-copy">Just beat me to it :)</span>
<span class="comment-copy">This only works for Python2.  How would this change for Python3?</span>
<span class="comment-copy">Found the Python3 version of this recipe <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">This has exactly the problem the OP mentions - <code>zip</code> truncates the longer list.</span>
<span class="comment-copy">Yes you're right, I misunderstood when he said "these" and thought he was referring to his current problem.</span>
