<div class="post-text" itemprop="text">
<p>I have a dict that contains keys like this:</p>
<pre><code>237870a/
237870b/
237870c/
115460a/
115460b/
115460c/
115460d/
229898/
212365a/
109678/
</code></pre>
<p>I need to iterate over this list of keys and pull out certain items:</p>
<ol>
<li><p>For items that share the same numeric prefix and have an alphabetic character at the end, I need the item with the highest character, i.e. in this case <code>237870c</code>, <code>115460d</code>, and <code>212365a</code>.</p></li>
<li><p>Any other item with a unique number without a trailing alphabetic character, i.e. <code>229898</code> &amp; <code>109678</code></p></li>
</ol>
<p>So, my result should be:</p>
<pre><code>237870c/
115460d/
229898/
212365a/
109678/
</code></pre>
<p>sorry I don't have any code to show as i'm really not sure how to even start writing this...</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, this has nothing to do with dictionaries: as you said yourself, you’re operating on a list of keys. The origin of the list isn’t important.</p>
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a> for this, with a clever key function. For <code>itertools.groupby</code> to work properly, we first need to sort the keys:</p>
<pre><code>keys = sorted(keys)
</code></pre>
<p>Then we have to think about a key function. This must be designed in a way so that only the numeric prefix is used to group:</p>
<pre><code>def keyfunc(item):
    if item[-1].isalpha():
         return item[:-1]
    return item
</code></pre>
<p>This will strip the last character if it is alphabetic, so that <code>itertools.groupby</code> won’t take it into account when grouping. We’ll then take the last element of the grouped items, which will be the one with the highest alphabetic character.</p>
<p>Now we can apply groupby to obtain a list of items as you need:</p>
<pre><code>items = [sorted(subitems)[-1] 
         for _, subitems 
         in itertools.groupby(keys, keyfunc)]
</code></pre>
<p>See it in action:</p>
<pre><code>&gt;&gt;&gt; # output formatting and indentation by me
... 
&gt;&gt;&gt; keys
['237870a/', '237870b/', '237870c/', '115460a/', 
 '115460b/', '115460c/', '115460d/', '229898/', 
 '212365a/', '109678/']
&gt;&gt;&gt; def keyfunc(item):
...   if item[-1].isalpha():
...     return item[:-1]
...   return item
... 
&gt;&gt;&gt; items = [sorted(subitems)[-1] 
...          for _, subitems 
...          in itertools.groupby(keys, keyfunc)]
&gt;&gt;&gt; items
['237870c/', '115460d/', '229898/', '212365a/', '109678/']
</code></pre>
</div>
<span class="comment-copy">Copy the keys to a list. Sort the list. Iterate through it, comparing each item to the next, to see if they start with the same digits.</span>
<span class="comment-copy">Do the actual keys contain the trailing <code>/</code>? Is there always at most <i>one</i> alphabetic character?</span>
<span class="comment-copy">@JonasWielicki yes, and yes</span>
<span class="comment-copy">"This will strip the last character if it is alphabetic.", I don't want to strip off the last char.</span>
<span class="comment-copy">@Radamand it's only stripped for the purposes of determining a group, not stripped from the final output - see the example.</span>
