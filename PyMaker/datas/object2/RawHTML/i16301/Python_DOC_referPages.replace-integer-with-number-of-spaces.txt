<div class="post-text" itemprop="text">
<p>If I have these names:</p>
<p><code>bob = "Bob     1"</code></p>
<p><code>james = "James     2"</code></p>
<p><code>longname = "longname     3"</code></p>
<p>And priting these gives me:</p>
<p><code>Bob     1</code></p>
<p><code>James     2</code></p>
<p><code>longname     3</code></p>
<p>How can I make sure that the numbers would be aligned (without using \t or tabs or anything)? Like this:</p>
<p><code>Bob     1</code></p>
<p><code>James   2</code></p>
<p><code>longname3</code></p>
</div>
<div class="post-text" itemprop="text">
<p>This is a good use for a <code>format</code> string, which can specify a width for a field to be filled with a character (including spaces). But, you'll have to <code>split()</code> your strings first if they're in the format at the top of the post. For example:</p>
<pre><code>"{: &lt;10}{}".format(*bob.split())
# output: 'Bob       1'
</code></pre>
<p>The <code>&lt;</code> means left align, and the space before it is the character that will be used to "fill" the "emtpy" part of that number of characters. Doesn't <em>have</em> to be spaces. <code>10</code> is the number of spaces and the <code>:</code> is just to prevent it from thinking that <code>&lt;10</code> is supposed to be the name of the argument to insert here.</p>
<p>Based on your example, it looks like you want the width to be based on the longest name. In which case you don't want to hardcode <code>10</code> like I just did. Instead you want to get the longest length. Here's a better example:</p>
<pre><code>names_and_nums = [x.split() for x in (bob, james, longname)]
longest_length = max(len(name) for (name, num) in names_and_nums)
format_str = "{: &lt;" + str(longest_length) + "}{}"
for name, num in names_and_nums:
    print(format_str.format(name,  num))
</code></pre>
<p>See: <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow">Format specification docs</a></p>
</div>
<span class="comment-copy">You don't need to use that <code>str(longest_length)</code>; you can use formatting to build that. Or even use a recursive format: <code>{:&lt;{}}{}'.format(name, longest_length, num)</code>. (Although I'd probably use manual numbering at that point.)</span>
<span class="comment-copy">I was on the fence about using <code>'{{: &lt;{}}}{{}}'.format(longest_length)</code> due to readability and the need to edit all the braces if you go back and forth between a constant or variable format. The recursive format idea is nice.</span>
<span class="comment-copy">One of the things I still use <code>%</code>-formatting for is creating <code>{}</code>-format strings: <code>'{:&lt;%d}{}' % (longest_length,)</code> is a lot easier to readâ€¦ But for teaching a novice, it may not be a good idea to spring both kinds of formatting on him in a single answer. :)</span>
