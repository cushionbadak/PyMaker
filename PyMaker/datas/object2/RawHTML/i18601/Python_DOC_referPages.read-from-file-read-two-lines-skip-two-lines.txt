<div class="post-text" itemprop="text">
<p>I want to read two lines from a file, skip the next two lines and read the next two lines and so on</p>
<pre><code>line 1 (read)
line 2 (read)
line 3 (skip)
line 4 (skip)
line 5 (read)
line 6 (read)
...
&lt;eof&gt;
</code></pre>
<p>Any ideas how to do this? Thanks!</p>
<p>My solution:</p>
<pre><code>            j = 2

            for i, line in enumerate(f.readlines()):
                if i in xrange(j - 2, j):
                    print line
                elif i == j:
                    j += 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can advance the iteration of the file with <a href="http://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow">the <code>itertools</code> <code>consume()</code> recipe</a> - as it is fast (it uses <code>itertools</code> functions to ensure the iteration happens in low-level code, making the process of consuming the values very fast, and avoids using up memory by storing the consumed values):</p>
<pre><code>from itertools import islice
import collections

def consume(iterator, n):
    "Advance the iterator n-steps ahead. If n is none, consume entirely."
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        collections.deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)
</code></pre>
<p>By doing this, you can do something like:</p>
<pre><code>with open("file.txt") as file:
    for i, line in enumerate(file, 1):
        ...
        if not i % 2:
            consume(file, 2)  # Skip 2 lines ahead.
</code></pre>
<p>We use <code>enumerate()</code> to count our progress, and skip ahead every two lines (note that <code>enumerate()</code> adds the numbers <em>after</em> the values are skipped, meaning that it doesn't count the skipped values, as wanted).</p>
<p>This is a good solution as it avoids any Python looping at all for the skipped values, cutting them out completely.</p>
</div>
<div class="post-text" itemprop="text">
<p>Group them into pairs, and then skip every other pair, eg:</p>
<pre><code>from itertools import izip_longest, islice

with open('somefile') as fin:
    paired = izip_longest(*[iter(fin)] * 2, fillvalue='')
    every_other = islice(paired, None, None, 2)
    for lines in every_other:
        line1, line2 = lines
        print line1, line2
</code></pre>
<p>Example output of file containing lines 1 - 9:</p>
<pre><code>1 2
5 6
9 
</code></pre>
<p>Or to iterate over them as one long sequence:</p>
<pre><code>from itertools import chain
lines = chain.from_iterable(every_other)
for line in lines:
    # whatever
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like that?</p>
<pre><code>f = open("file", "r")

i = 0
for line in f.readlines():
    if i % 4 or (i+1) % 4:
        print line
</code></pre>
<p>I.e. you anyway have to read all the lines, but just don't do an action with lines you don't want to read.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>counter = 0
for line in FILE:
    if counter == 0 or counter == 1:
        print line
    counter += 1

    if counter == 3:
        counter = 0
</code></pre>
</div>
