<div class="post-text" itemprop="text">
<p>I need a dictionary, that I can edit to. Not add an entire new value, but add to a 'class'??? inside of the dictionary. For example character stats.</p>
<p><code>if race == 'orc':
    if Class == 'worrier':
        stats = ['strength': 6, 'intelligence': 2]'
</code></p>
<p>How can i add to the strength? (I know you can't add with dictionaries, that why I need something similar).</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I know you can't add with dictionaries</p>
</blockquote>
<p>Actually, you can:</p>
<pre><code>&gt;&gt;&gt; characters = {}
&gt;&gt;&gt; characters['warrior'] = {}
&gt;&gt;&gt; characters['warrior']['orc'] = {}
&gt;&gt;&gt; characters['warrior']['orc']['strength'] = 5
&gt;&gt;&gt; characters['warrior']['orc']['intelligence'] = 2
&gt;&gt;&gt; characters
{'warrior': {'orc': {'intelligence': 2, 'strength': 5}}}
&gt;&gt;&gt; characters['warrior']['orc']['strength'] += 3
&gt;&gt;&gt; characters
{'warrior': {'orc': {'intelligence': 2, 'strength': 8}}}
</code></pre>
<p>However, as you can tell this is not really ideal. What you want more appropriately is an object that stores all the properties, provides methods to add the various attributes. Then you store a collection of these objects.</p>
<pre><code>class Character(object):
     def __init__(name, type, category, strength, intelligence):
         self.strength = strength
         self.intelligence = intelligence
         self.name = name
         self.type = type
         self.category = category

     def make_smart_or_dumb(self, intelligence):
         self.intelligence += intelligence

     def make_strong_or_weak(self, strength):
         self.strength += strength

     def is_dead(self):
         return self.strength &lt; 0

gunar_the_orc = Character('Gunar','Orc', 'Warrior', 10, 5)
smith_the_human = Character('Smith','Human','Warrior', 5, 10)

game_characters = [gunar_the_orc, smith_the_human]
</code></pre>
<p>Now, you want to give the Orc some strength:</p>
<pre><code>gunar_the_orc.make_strong_or_weak(3)
</code></pre>
<p>To make him weaker:</p>
<pre><code>gunar_the_orc.make_strong_or_weak(-2)
</code></pre>
<p>That way, when you have a "fight" you can take the impact of each weapon, and then minus the damage inflicted, until of course the orc dies because his strength is less than 0 - that's why I added the <code>is_dead()</code> method.</p>
<p>Here is what a "game" would look like:</p>
<pre><code>while not gunar_the_orc.is_dead() or smith_the_human.is_dead():
     # Gunar attacks Smith!
     smith_the_human.make_strong_or_weak(-1)

     # Smith drinks some potions:
     smith_the_human.make_strong_or_weak(3)

     # Smith attacks!
     gunar_the_orc.make_strong_or_weak(-10)

if gunar_the_orc.is_dead():
   print("Smith won!")
else:
   print("Gunar won!")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's unclear what your asking here, so I'm going to presume you want to know how to add to a value in a dictionary.</p>
<p>Try this:</p>
<pre><code>&gt;&gt;&gt; dictionary = {"strength": 6, "intelligence": 2};
&gt;&gt;&gt; dictionary["strength"] += 7;
&gt;&gt;&gt; print(dictionary);
{'strength': 13, 'intelligence': 2}    print(dictionary)
</code></pre>
<p>However, in this case I would suggest you look at <a href="http://docs.python.org/3/tutorial/classes.html" rel="nofollow">classes</a>. This would allow you to do <code>myorc.strength += 7</code> instead, and furthermore create classes of units that inherit from each other, eg. an ogre being like an orc but with 5 higher strength, without having to rewrite lots of code.</p>
<p>Edit: from reading your comments, it looks like you might want to add a new key value pair to the dictionary. To do this, do <code>dictionary[key] = value</code>. It will create the pair if <code>key</code> isn't already a key of the dictionary, and update the value if it is.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>char = {"race" : "orc", "class" : "worrier", "stats" : {"strenght" : 6, "intelligence" : 2}}
char["stats"]["strenght"] += 1
# output -&gt; {'race': 'orc', 'stats': {'intelligence': 2, 'strenght': 7}, 'class': 'worrier'}
# Append something to stats
char["stats"].update({"stamina" : 5})
# output -&gt; {'race': 'orc', 'stats': {'stamina': 5, 'intelligence': 2, 'strenght': 7}, 'class': 'worrier'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>why not <code>stats['strength'] = stats['strength'] + n</code> ?</p>
</div>
<span class="comment-copy">you can use dictionaries... just learn to use them</span>
<span class="comment-copy">I've heard you can't add to dictionaries, i've already tried stuff like .append which can be used in lists.</span>
<span class="comment-copy">Where did you hear that?</span>
<span class="comment-copy">After hours programming website</span>
<span class="comment-copy"><code>Class == 'worrier'</code> ... so true ...</span>
<span class="comment-copy">What's the + n? Does that add a random value?</span>
<span class="comment-copy"><code>n</code> is whatever you want it to be. i just picked that as a variable name. it can be <code>+ 5</code> or even <code>+ 302492</code> if you needed it to be.</span>
<span class="comment-copy">Okay cool, so if i wanted it to be a random number would I do + random.choice('1234') ?? I'll just fiddle around with it, it sounds like something that would work..</span>
<span class="comment-copy">*<code>random.randint(minimum, maximum)</code>, but I would <b>strongly</b> suggest using Classes, as in the top 2 answers.</span>
