<div class="post-text" itemprop="text">
<p>Suppose I have two lists of any, but equal length, for example:</p>
<pre><code>['a','b','c','d']
['r','t','y','h']
</code></pre>
<p>For these two lists, I would want output to be:</p>
<pre><code>'ar', 'bt', 'cy', 'dh'
</code></pre>
<p>Basically, the first element of the first list to the first element of the second list and so on.  How would I do that?  And note, that the lists can be of any length, not just what the example shows, but the length of the first list is equal to the length of the second list.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/functions.html#zip"><code>zip</code></a> the lists to combine them, then <a href="http://docs.python.org/3/library/stdtypes.html#str.join"><code>join</code></a> each pair of strings into a single string:</p>
<pre><code>&gt;&gt;&gt; list1 = ['a','b','c','d']
&gt;&gt;&gt; list2 = ['r','t','y','h']
&gt;&gt;&gt; [''.join(pair) for pair in zip(list1, list2)]
['ar', 'bt', 'cy', 'dh']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>map</code> and <code>zip</code> to do the job:</p>
<pre><code>&gt;&gt;&gt; l1=['a','b','c','d']
&gt;&gt;&gt; l2=['r','t','y','h']
&gt;&gt;&gt; map(lambda(x,y): x+y, zip(l1,l2))
['ar', 'bt', 'cy', 'dh']
</code></pre>
<p>What <code>zip</code> does is it creates a list of tuples, where the i-th tuple contains the i-th element from each list.  Then you can transform each tuple into a string by concatenation (using <code>lambda(x,y): x+y</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want a functional approach you can use <code>map</code> and <code>operator.add</code></p>
<pre><code>import operator
map(operator.add,['a','b','c','d'], ['r','t','y','h'])
&gt;&gt;&gt;['ar', 'bt', 'cy', 'dh']
</code></pre>
<p>No need for <code>lambdas</code> nor list comprehension to do the concatenation.</p>
<p><strong>NOTE:</strong> For those who say is not Python 3, this dump could make you change your mind:</p>
<pre><code>Python 3.1.3 (r313:86834, Nov 28 2010, 10:01:07)
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import operator
&gt;&gt;&gt; list(map(operator.add, ['a','b'],['r','t']))
['ar', 'bt']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The above answer seems to be valid also for Python 2.7. In addition, you can just use zip and an inline adder (lambda):</p>
<h1>1:</h1>
<pre><code>list1 = ['a','b','c','d']

list2 = ['r','t','y','h']

add = lambda pair:pair[0]+pair[1]

print [add(pair) for pair in zip(list1, list2)]
</code></pre>
<h1>2:</h1>
<p>or just in one line:</p>
<pre><code>print map(lambda pair:pair[0]+pair[1],[pair for pair in zip(list1,list2)])
</code></pre>
<h1>3:</h1>
<p><code>map()</code> allows mapping multiple arguments, which yields a short solution:</p>
<pre><code>print map(lambda x,y:x+y, list1, list2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here are some more ways to do it</p>
<pre><code>&gt;&gt;&gt; list1 = ['a','b','c','d']
&gt;&gt;&gt; list2 = ['r','t','y','h']

&gt;&gt;&gt; [x + y for x, y in zip(list1, list2)]
['ar', 'bt', 'cy', 'dh']

&gt;&gt;&gt; it = iter(list2)
&gt;&gt;&gt; [x + next(it) for x in list1]
['ar', 'bt', 'cy', 'dh']
</code></pre>
</div>
<span class="comment-copy">Unfortunately that syntax will no longer work in Python 3 -- <code>lambda (x,y): x+y</code>, I mean.</span>
<span class="comment-copy">A list comprehension is generally considered to be more Pythonic than <code>map</code> over a <code>lambda</code>. In addition to the syntax problem, you'd also need to wrap this in a call to <code>list</code> on Python 3 because <code>map</code> is lazy. My solution also has the advantage that it expands to handle any number of input lists because it uses <code>join</code>.</span>
<span class="comment-copy">Thats not Python3 though :p</span>
<span class="comment-copy">Or use <code>''.join</code> if you want to generalize. Also, list comprehensions are functional.</span>
<span class="comment-copy">@gnibbler I updated the question after your comment :P</span>
<span class="comment-copy">@PauloBu <code>add</code> only takes two input lists, <code>''.join</code> takes any number of input lists.</span>
<span class="comment-copy">@PauloBu, yes. I was referring to the fact that <code>map</code> doesn't return a list in Python3</span>
