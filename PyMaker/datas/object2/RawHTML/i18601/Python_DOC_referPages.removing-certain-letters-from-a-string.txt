<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/17299581/loop-forgets-to-remove-some-items">Loop “Forgets” to Remove Some Items [duplicate]</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>In python, I'm supposed to write a program that asks the user for a string, and then it removes all occurrences of p, q, r, s, t (lower and upper-case), then print out everything else.
For input <code>Today it is Tuesday</code> it should print <code>oday i i ueday</code>.</p>
<p>I've written the code but it doesn't remove the last letter if needed.
Here is what I've written:</p>
<pre><code>S = str(input("Please enter some text: "))
L = list(S)
for i in L :
     if i in 'tsrqpPQRST' :
         L.remove(i)
string = ""
for char in L :
     string = string + char
print(string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>str.translate</code>.</p>
<pre><code>&gt;&gt;&gt; test = 'Today it is Tuesday'
&gt;&gt;&gt; removeText = 'pqrst'
&gt;&gt;&gt; test.translate(None, removeText+removeText.upper())
'oday i i ueday'
</code></pre>
<p>Since you're on Python 3, use the <code>translate()</code> method like this.</p>
<pre><code>&gt;&gt;&gt; test = 'Today it is Tuesday'
&gt;&gt;&gt; removeText = 'pqrst'
&gt;&gt;&gt; test.translate(dict.fromkeys(ord(elem) for elem in removeText+removeText.upper()))
'oday i i ueday'
</code></pre>
<p>The problem in your code is that you're removing stuff from the list while iterating over it.</p>
<p>Just doing this works. (Here you make a copy, iterate over it, while removing the element from the original list)</p>
<pre><code>&gt;&gt;&gt; testList = list(test)
&gt;&gt;&gt; for i in testList[:]:
        if i in 'pqrstPQRST':
            testList.remove(i)


&gt;&gt;&gt; "".join(testList)
'oday i i ueday'
</code></pre>
<p><strong>P.S</strong> - Instead of using <code>string = ''</code> and iterating over the list and joining the characters, just use <code>"".join(...)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use regular expression: </p>
<pre><code> import re
 new_string = re.sub('(?i)[pqrst]', '', S)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can combine <code>join</code> and <a href="http://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow">generator expression</a>. Combine for loop and string concatation is not efficient or pythonic. Also, string itself is iterable, no need to turn it into a list.</p>
<pre><code>&gt;&gt;&gt; s = 'Today it is Tuesday'
&gt;&gt;&gt; ''.join(x for x in s if x not in 'pqrstPQRST')
'oday i i ueday'
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's a lot of ways to do that. e.g.</p>
<pre><code>&gt;&gt;&gt; s = "helllo"
&gt;&gt;&gt; s.replace("l","")
'heo'
&gt;&gt;&gt; s.translate(None,"le")
'ho'
&gt;&gt;&gt; 
</code></pre>
<p>As a side note, you <strong>don't have to turn a string into a list to iterate over it</strong> but you shouldn't modify an iterable when you iterate over it, so if you would like to improve your code it would be something along the lines of: </p>
<pre><code>&gt;&gt;&gt; s
'helllo'
&gt;&gt;&gt; m = ""
&gt;&gt;&gt; for i in s:
        if i not in "el": #put the list of characters here
                m += i


&gt;&gt;&gt; m
'ho'
&gt;&gt;&gt; 
</code></pre>
<p>This way you are making a copy of a string, you don't run into problems that you have when you modify it during iteration. </p>
</div>
<span class="comment-copy">+1 - Regex solves this problem quickly and easily.  However, you can make it even better:  <code>re.sub('(?i)[p-t]', '', S)</code>.  This works because "pqrst" is in the order of the alphabet.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/a/9061024/846892">There's no advantage of using &lt;genexp&gt; with str.join</a>, it is just more readable than LC.</span>
<span class="comment-copy">Thanks. This gives me a new understanding of the two. But now I should be curious about why GC in a for loop is faster.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/a/11964301/846892">That depends on the data.</a>, for small/average sized loops LC are faster.</span>
<span class="comment-copy"><code>s = ''.join([x for x in s if x not in 'pqrstPQRST'])</code> removes all occurrences from <code>s</code>.</span>
