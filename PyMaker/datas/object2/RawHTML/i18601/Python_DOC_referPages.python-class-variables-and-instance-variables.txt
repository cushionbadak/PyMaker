<div class="post-text" itemprop="text">
<p>How python recognize class and instance level variables ? are they different ?</p>
<pre><code>For example,

class abc:
    i = 10
    def __init__(self, i):
        self.i = i


a = abc(30)
b = abc(40)
print a.i
print b.i
print abc.i

output
--------
30
40
10
</code></pre>
<p>Means, in above example when I access <code>a.i (or b.i)</code>  and <code>abc.i</code> are they referring to completely different variables?  </p>
</div>
<div class="post-text" itemprop="text">
<p>First, your sample is wrong for you can not init the instance if there is only a self in the <code>__init__</code>.</p>
<pre><code>&gt;&gt;&gt; class abc:
...     i = 10
...     j = 11
...     def __init__(self, x):
...             self.i = x
</code></pre>
<p>Then, when you access the attribute on the instance, it will check the instance variables first. Refer the <a href="http://docs.python.org/3/howto/descriptor.html#definition-and-introduction" rel="nofollow">paragraph here</a>. As you guess:</p>
<pre><code>&gt;&gt;&gt; a = abc(30)
&gt;&gt;&gt; a.i
30
&gt;&gt;&gt; a.j
11
</code></pre>
<p>Besides, the class variables is an object shared by all the instances, and instance variables are owned by the instance:</p>
<pre><code>&gt;&gt;&gt; class abc:
...     i = []
...     def __init__(self, x):
...             self.i = [x]
...             abc.i.append(x)
... 
&gt;&gt;&gt; a = abc(30)
&gt;&gt;&gt; b = abc(40)
&gt;&gt;&gt; a.i
[30]
&gt;&gt;&gt; b.i
[40]
&gt;&gt;&gt; abc.i
[30, 40]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>in above example when I access a.i (or b.i) and abc.i are they
  referring to completely different variables?</p>
</blockquote>
<p>Yes.</p>
<p>abc.i is a <a href="http://docs.python.org/2/tutorial/classes.html#class-objects" rel="nofollow">Class Object</a> reference.</p>
<p>a.i and b.i are each <a href="http://docs.python.org/2/tutorial/classes.html#instance-objects" rel="nofollow">Instance Object</a> references.</p>
<p>They are all separate references.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is all assuming your init is meant to be:</p>
<pre><code>def __init__(self,i):
</code></pre>
<p>Other wise it doesn't work. In the third case, abc.i the class hasn't been initialized so i acts as a static variable for which you set the value at 10 in the class definition. In the first two instances, when you called init you created an instance of abc with a specific i value. When you ask for the i value of each of those instances you get the correct number.</p>
</div>
<span class="comment-copy">In your <code>__init__</code>, did you mean <code>def __init__(self, i):</code>?  Otherwise, you examples will fail.</span>
<span class="comment-copy">yes , Thanks for correction</span>
<span class="comment-copy">And as @zhangyangyu points out, when you access a.i, the interpreter searches the instance namespace first for "i", and only checks the class namespace if it can't find it in the instance namespace.</span>
