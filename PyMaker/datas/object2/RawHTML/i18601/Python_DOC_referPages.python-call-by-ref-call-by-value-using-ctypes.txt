<div class="post-text" itemprop="text">
<p>I am trying to write a program to illustrate to A level students the difference between call by reference and call by value using Python. I had succeeded by passing mutable objects as variables to functions, but found I could also do the same using the ctypes library.</p>
<p>I don't quite understand how it works because there is a function <code>byref()</code> in the ctype library, but it didn't work in my example. However, by calling a function <b>without <code>byref()</code></b> it did work!</p>
<p>**My working code</p>
<pre><code>"""
Program to illustrate call by ref
"""


from  ctypes import *  #alloews call by ref

test = c_int(56)  #Pytthon call by reference eg addres
t = 67            #Python call by value eg copy


#expects a ctypes argument
def byRefExample(x):
    x.value= x.value + 2


#expects a normal Python variable
def byValueExample(x):
    x = x + 2


if __name__ == "__main__":

    print "Before call test is",test
    byRefExample(test)                
    print "After call test is",test

    print "Before call t is",t
    byValueExample(t)
    print "After call t is",t
</code></pre>
<p><strong>Question:</strong> </p>
<p>When passing a normal Python variable to <code>byValueExample()</code> it works as expected. The copy of the function argument <code>t</code> changes but the variable <b><code>t</code></b> in the header does not. However, when I pass the ctypes variable <b>test</b> both the local and the header variable change, thus it is acting like a C pointer variable. Although my program works, I am not sure how and why the <code>byref()</code> function doesn't work when used like this:</p>
<p><em><strong><code>byRefExample(byref(test))</code></strong></em></p></div>
<div class="post-text" itemprop="text">
<p>You're actually using terminology that's not exactly correct, and potentially very misleading. I'll explain at the end. But first I'll answer in terms of your wording.</p>
<hr/>
<blockquote>
<p>I had succeeded by passing mutable objects as variables to functions but found I could also do the same using the ctypes library.</p>
</blockquote>
<p>That's because those <code>ctypes</code> objects are mutable objects, so you're just doing the same thing you already did. In particular, a <code>ctypes.c_int</code> is a mutable object holding an integer value, which you can mutate by setting its <code>value</code> member. So you're already doing the exact same thing you'd done without <code>ctypes</code>.</p>
<p>In more detail, compare these:</p>
<pre><code>def by_ref_using_list(x):
    x[0] += 1
value = [10]
by_ref_using_list(value)
print(value[0])

def by_ref_using_dict(x):
    x['value'] += 1
value = {'value': 10}
by_ref_using_list(value)
print(value['value'])

class ValueHolder(object):
    def __init__(self, value):
        self.value = value
def by_ref_using_int_holder(x):
    x.value += 1
value = ValueHolder(10)
by_ref_using_list(value)
print(value.value)
</code></pre>
<p>You'd expect all three of those to print out 11, because they're just three different ways of passing different kinds of mutable objects and mutating them.</p>
<p>And that's exactly what you're doing with <code>c_int</code>.</p>
<p>You may want to read the FAQ <a href="http://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference" rel="nofollow">How do I write a function with output parameters (call by reference)?</a>, although it seems like you already know the answers there, and just wanted to know how <code>ctypes</code> fits in…</p>
<hr/>
<p>So, what is <code>byref</code> even for, then?</p>
<p>It's used for calling a C function that takes values by reference C-style: by using explicit pointer types. For example:</p>
<pre><code>void by_ref_in_c(int *x) {
    *x += 1;
}
</code></pre>
<p>You can't pass this a <code>c_int</code> object, because it needs a pointer to a <code>c_int</code>. And you can't pass it an uninitialized <code>POINTER(c_int)</code>, because then it's just going to be writing to random memory. You need to get the pointer to an actual <code>c_int</code>. Which you can do like this:</p>
<pre><code>x = c_int(10)
xp = pointer(x)
by_ref_in_c(xp)
print(x)
</code></pre>
<p>That works just fine. But it's overkill, because you've created an extra Python <code>ctypes</code> object, <code>xp</code>, that you don't really need for anything. And that's what <code>byref</code> is for: it gives you a lightweight pointer to an object, that can only be used for passing that object by reference:</p>
<pre><code>x = c_int(10)
by_ref_in_c(byref(x))
print(x)
</code></pre>
<hr/>
<p>And that explains why this doesn't work:</p>
<pre><code>byRefExample(byref(test))
</code></pre>
<p>That call is making a lightweight pointer to <code>test</code>, and passing that pointer to <code>byRefExample</code>. But <code>byRefExample</code> doesn't want a pointer to a <code>c_int</code>, it wants a <code>c_int</code>. </p>
<p>Of course this is all in Python, not C, so there's no static type checking going on. The function call works just fine, and your code doesn't care what type it gets, so long as it has a <code>value</code> member that you can increment. But a <code>POINTER</code> doesn't have a <code>value</code> member. (It has a <code>contents</code> member instead.) So, you get an <code>AttributeError</code> trying to access <code>x.value</code>.</p>
<hr/>
<p>So, how <em>do</em> you do this kind of thing?</p>
<p>Well, using a single-element-list is a well-known hack to get around the fact that you need to share something mutable but you only have something immutable. If you use it, experienced Python programmers will know what you're up to.</p>
<p>That being said, if you think you need this, you're usually wrong. Often the right answer is to just return the new value. It's easier to reason about functions that don't mutate anything. You can string them together in any way you want, turn them inside-out with generators and iterators, ship them off to child processes to take advantage of those extra cores in your CPU, etc. And even if you don't do any of that stuff, it's usually faster to return a new value than to modify one in-place, even in cases where you wouldn't expect that (e.g., deleting 75% of the values in a list).</p>
<p>And often, when you really do need mutable values, there's already an obvious place for them  to live, such as instance attributes of a class.</p>
<p>But sometimes you <em>do</em> need the single-element list hack, so it's worth having in your repertoire; just don't use it when you don't need it.</p>
<hr/>
<p>So, what's wrong with your terminology?</p>
<p>In a sense (the sense Ruby and Lisp programmers use), <em>everything</em> in Python is pass-by-reference. In another sense (the sense many Java and VB programmers use), it's all pass-by-value. But really, it's best to not call it either.* What you're passing is neither a copy of the value of a variable, nor a reference to a variable, but a reference to a value. When you call that <code>byValueExample(t)</code> function, you're not passing a new integer with the value <code>67</code> the way you would in C, you're passing a reference to the <em>same</em> integer <code>67</code> that's bound to the name <code>t</code>. If you could mutate <code>67</code> (you can't, because ints are immutable), the caller would see the change.</p>
<p>Second, Python names are not even variables in the sense you're thinking of. In C, a variable is an <code>lvalue</code>. It has a type and, more importantly, an address. So, you can pass around a reference to the variable itself, rather than to its value. In Python, a name is just a name (usually a key in a module, local, or object dictionary). It doesn't have a type or an address. It's not a thing you can pass around. So, there is no way to pass the variable <code>x</code> by reference.**</p>
<p>Finally, <code>=</code> in Python isn't an assignment operator that copies a value to a variable; it's a binding operator that gives a value a name. So, in C, when you write <code>x = x + 1</code>, that copies the value <code>x + 1</code> to the location of the variable <code>x</code>, but in Python, when you write <code>x = x + 1</code>, that just rebinds the local variable <code>x</code> to refer to the new value <code>x + 1</code>. That won't have any effect on whatever value <code>x</code> used to be bound to. (Well, if it was the only reference to that value, the garbage collector might clean it up… but that's it.)</p>
<p>This is actually a lot easier to understand if you're coming from C++, which really forces you to understand rvalues and lvalues and different kinds of references and copy construction vs. copy assignment and so on… In C, it's all deceptively simple, which makes it harder to realize how very different it is from the equally-simple Python.</p>
<hr/>
<p>* Some people in the Python community like to call it "pass-by-sharing". Some researchers call it "pass-by-object". Others choose to first differentiate between value semantics and reference semantics, before describing calling styles, so you can call this "reference-semantics pass-by-copy". But, while at least those names aren't ambiguous, they also aren't very well known, so they're not likely to help anyone. I think it's better to describe it than to try to figure out the best name for it…</p>
<p>** Of course, because Python is fully reflective, you can always pass the string <code>x</code> and the context in which it's found, directly or indirectly… If your <code>byRefExample</code> did <code>globals()['x'] = x + 2</code>, that <em>would</em> affect the global <code>x</code>. But… don't do that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python uses neither "call-by-reference" or "call-by-value" but "call-by-object".  Assignment gives names to objects.</p>
<pre><code>test = c_int(56)
t = 67
</code></pre>
<p><code>test</code> is a name given to a <code>ctypes.c_int</code> object that internally has a <code>value</code> name assigned to an <code>int</code> object.</p>
<p><code>t</code> is a name give to an <code>int</code> object.</p>
<p>When calling <code>byRefExample(test)</code>, <code>x</code> is another name given to the <code>ctypes.c_int</code> object referenced by <code>test</code>.</p>
<pre><code>x.value = x.value + 2
</code></pre>
<p>The above reassigns the 'value' name stored in the <code>ctypes.c_int</code> object to a <em>completely new</em> <code>int</code> object with a different value.  Since <code>value</code> is an attribute of the <em>same</em> <code>ctypes.c_int</code> object referred by the names <code>test</code> and <code>x</code>, <code>x.value</code> and <code>test.value</code> are referring to the same value.</p>
<p>When calling <code>byValueExample(t)</code>, <code>x</code> is another name given to the <code>int</code> object referenced by <code>t</code>.</p>
<pre><code>x = x + 2
</code></pre>
<p>The above reassigns the name <code>x</code> to a <em>completely new</em> <code>int</code> object with a different value.  <code>x</code> and <code>t</code> no longer refer to the same object, so <code>t</code> will not observe the change.  It still refers to the original <code>int</code> object.</p>
<p>You can observe this by printing the <code>id()</code> of the objects at different points in time:</p>
<pre><code>from  ctypes import *

test = c_int(56)
t = 67

print('test id =',id(test))
print('t    id =',id(t))

#expects a ctypes argument
def byRefExample(x):
    print('ByRef x',x,id(x))
    print('ByRef x.value',x.value,id(x.value))
    x.value = x.value + 2
    print('ByRef x.value',x.value,id(x.value))
    print('ByRef x',x,id(x))

#expects a normal Python variable
def byValueExample(x):
    print('ByVal x',x,id(x))
    x = x + 2
    print('ByVal x',x,id(x))

print("Before call test is",test,id(test))
print("Before call test is",test.value,id(test.value))
byRefExample(test)                
print("After call test is",test.value,id(test.value))
print("After call test is",test,id(test))

print("Before call t is",t,id(t))
byValueExample(t)
print("After call t is",t,id(t))
</code></pre>
<p>Output (with comments):</p>
<pre><code>test id = 80548680
t    id = 507083328
Before call test is c_long(56) 80548680
Before call test.value is 56 507082976
ByRef x c_long(56) 80548680                 # same id as test
ByRef x.value 56 507082976
ByRef x.value 58 507083040                  # x.value is new object!
ByRef x c_long(58) 80548680                 # but x is still the same.
After call test.value is 58 507083040       # test.value sees new object because...
After call test is c_long(58) 80548680      # test is same object as x.
Before call t is 67 507083328
ByVal x 67 507083328                        # same id as t
ByVal x 69 507083392                        # x is new object!
After call t is 67 507083328                # t id same old object.
</code></pre>
</div>
<span class="comment-copy">How do professionals implement call by reference in Python in the field or do they avoid it buy using classes?</span>
<span class="comment-copy">@pythonMan: Most cases where you think you need "call by reference" (which isn't the right terminology, by the way… I'll edit the answer to explain why), you really don't. When you do, there's usually an obvious place to store the shared value, like a class instance. When there isn't… then you usually use a 1-element list.</span>
<span class="comment-copy">I thought so but probably it is aproblem of trying to write c programs in Python too.</span>
<span class="comment-copy">An excellent answer! :)</span>
<span class="comment-copy">@pythonMan: Yes, trying to use Python as C is pretty much guaranteed to lead to programs that have the worst features of both languages and the best of neither. (Fortunately, most C programmers learn that pretty quickly and either start using Python as Python, or stop using Python. If only the same were true of Java programmers…)</span>
<span class="comment-copy">I've never seen the term "call-by-object" used for anything but CLU, and the first definition I found for it online said it was "equivalent to Java call-by-value" (which is technically true, but very misleading, since it's also equivalent to Ruby call by reference). However, the examples, and showing the OP how to investigate further on his own, are great!</span>
<span class="comment-copy">@abarnert, <a href="http://effbot.org/zone/call-by-object.htm" rel="nofollow noreferrer">effbot.org/zone/call-by-object.htm</a>, to quote: "In particular it is not call by value because mutations of arguments performed by the called routine will be visible to the caller. And it is not call by reference because access is not given to the variables of the caller, but merely to certain objects."</span>
<span class="comment-copy">Despite the names, the two examples above <code>byRefExample</code> and <code>byValueExample</code> both pass <code>x</code> the same way (by object).  It's just that one object is mutable and the other is not.</span>
<span class="comment-copy">I'm not sure what that last comment was for, because I think your answer and mine both already get across that point pretty well… But for the wiki reference, that's interesting. The main article is an argument that Python should adopt CLU's terminology. But if you read the thread below it, you can see that others disagree, or are confused by it… Anyway, as I said in my answer, I think it's more important to explain what Python actually does (which your answer does very well) than to argue about which name describes it best.</span>
