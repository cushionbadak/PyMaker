<div class="post-text" itemprop="text">
<p>I'm trying to make a simple game, which has multiple files that need to import each other. My mob module needs to import my player module and do player = player.Player() to create a new class instance. The class is in the player.py file, but it's apparently not being recognized.</p>
<p>I did world = world.World() in my mob file, and that worked perfectly, so I'm confused as to why my player file won't work.</p>
<pre><code>player.__file__ shows the correct path so that's not the issue.
</code></pre>
<p>This is what I have at the beginning of mob.py:</p>
<pre><code>import world
import main
import player

world = world.World()
player = player.Player()

class Mob:
    #Class definition
</code></pre>
<p>player.py:</p>
<pre><code>import main
import world

world = world.World()

class Player:
    #Definition
</code></pre>
<p>world.py:</p>
<pre><code>import os
import main

class World:
    #Definition
</code></pre>
<p>Not sure if this will help, but this is the main function in main.py:</p>
<pre><code>if __name__ == "__main__":
    console = []
    player = player.Player()
    movePlayer = player.Move
    transformPlayer = player.Transform
    goblin = mob.Mob()
    world = world.World()
    mapSize = world.MapSize
    mainMenu()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is a circular import.</p>
<p>Since you haven't given us enough of the code to actually test this, it's impossible to give the exact details. If you want to see it for yourself, just add a <code>print</code> before and after each <code>import</code>, and you can see the sequence of events. But it's going to be something like this:</p>
<p><code>player</code> depends on <code>main</code>. <code>main</code> depends on <code>mob</code>. So, when you try to <code>import player</code>, before it can run any of its top-level code, all of <code>mob</code>'s top-level code has to run. But <code>mob</code> tries to create a <code>player.Player</code> object at top level. Since <code>player</code> is still waiting for <code>import main</code> to finish, it hasn't yet run the code to define that class. Hence the error.</p>
<p><a href="http://docs.python.org/3/faq/programming.html#how-can-i-have-modules-that-mutually-import-each-other" rel="nofollow">The official FAQ</a> has a nice answer on different ways to fix this. In your case, I think there's a simple answer:</p>
<p>Split <code>main.py</code> into two separate modules. Take the shared code that everyone else needs to import, and put it into, say, <code>utils.py</code>. Leave the top-level program code that needs to import everyone else in <code>main.py</code>. Change each <code>import main</code> to <code>import utils</code>. And that's it; no more circular imports. (This is effectively Matthias Ulrichs's recommendation from the FAQ, but more specific to your situation—and, as it happens, very common among projects created by novices to Python, especially those who are very skilled at languages that have separate import and implementation files.)</p>
<p>If this isn't doable in your case, consider moving some of the global initialization to initialization functions, which you can call after all the <code>import</code>s are done. (This is effectively Guido's recommendation from the FAQ.)</p>
</div>
<span class="comment-copy">What do the files and folders look like?</span>
<span class="comment-copy">It's just one folder with main.py, mob.py, player.py, and world.py, plus the .pyc files.</span>
<span class="comment-copy">What's in the files? Post the source code (or at least the imports and the class definitions).</span>
<span class="comment-copy">This is just a guess given the scant information you've provided, but… when you write <code>player = player.Player()</code>, you've just hidden the <code>player</code> module with a variable of the same name. So, before that statement everything is fine, but after that, you can't access the module anymore. In particular, if you try <code>player = player.Player()</code> a second time, it will raise an <code>AttributeError</code> exactly like the one you seem to be describing (unless <code>Player</code> instances happen to have a member named <code>Player</code>).</span>
<span class="comment-copy">mob.py imports world, main, and player, player.py imports main and world, and world.py imports os and main. The class definitions are 40-70 lines each, so I can't really post them.</span>
<span class="comment-copy">That definitely seems like the issue. I'll look into it more later today and see what I can do. I'm pretty sure I only have one function that would need to be moved into utils, so it shouldn't be too difficult to fix. I know I haven't given a lot of information, so thanks for not giving up.</span>
