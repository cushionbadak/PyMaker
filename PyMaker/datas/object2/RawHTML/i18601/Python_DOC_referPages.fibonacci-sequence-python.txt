<div class="post-text" itemprop="text">
<p>I am trying to understand Python, but I still don't get it. I am new to the language, and wants to understand it properly.
This is a line from a Fibonacci sequence using loops. Please explain the meaning of this code. I am trying to get the pattern by hand. I got the pattern up to 3, but after 3 I am not getting the answer.</p>
<pre><code>a, b = 0, 1
while b &lt; 50:
    print(b)
    a, b = b, a + b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a, b = b, a + b
</code></pre>
<p>This is known as multiple assignment. It's basically an <em>atomic</em> version of:</p>
<pre><code>a = b
b = a + b
</code></pre>
<p>By atomic, I mean everything on the right is calculated <em>before</em> pacing it into the variables on the left. So <code>a</code> becomes <code>b</code> and <code>b</code> becomes the <em>old</em> version of <code>a</code> plus <code>b</code>, equivalent to the non-atomic:</p>
<pre><code>old_a = a
a = b
b = old_a + b
</code></pre>
<p>So, in terms of what you see:</p>
<pre><code>        a                        b               output
================    =========================    ======
(initial values)        (initial values)
        0                        1                  1
(becomes prev b)    (becomes sum of prev a,b)
        1                        1                  1
        1                        2                  2
        2                        3                  3
        3                        5                  5
        5                        8                  8
</code></pre>
<p>That exact code (along with the explanation of multiple assignment) can be found <a href="http://docs.python.org/2/tutorial/introduction.html" rel="noreferrer">here</a> in the tutorial.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's multiple assigment (or tuple unpacking).</p>
<p>According to <a href="http://docs.python.org/3/tutorial/introduction.html#first-steps-towards-programming" rel="nofollow">Python Tutorial</a>:</p>
<pre><code>&gt;&gt;&gt; # Fibonacci series:
... # the sum of two elements defines the next
... a, b = 0, 1
&gt;&gt;&gt; while b &lt; 10:
...     print(b)
...     a, b = b, a+b
...
1
1
2
3
5
8
</code></pre>
<blockquote>
<p>This example introduces several new features.</p>
<p>The first line contains a multiple assignment: the variables a and b
  simultaneously get the new values 0 and 1. On the last line this is
  used again, demonstrating that the expressions on the right-hand side
  are all evaluated first before any of the assignments take place. The
  right-hand side expressions are evaluated from the left to the right.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>How about multiple answers?</p>
<pre><code>def fib(num):
    a = 0
    b = 1
    while b &lt;= num:
        prev_a = a
        a = b
        b = prev_a +b
        #print b                                                                                                          
    return a

print fib(13)

def pythonic_fib(num):
    a,b = 0,1
    while b &lt;= num:
        a,b = b, a+b
    return a

print pythonic_fib(13)

def recursive_fib(num, a, b):
    if (b &gt;= num):
        return b
    else:
        return recursive_fib(num, b, a+b)

print recursive_fib(13, 0, 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>#The easy way to generate Fibonacci series in python is 
user = input('Please enter the integer range for Fibonacci series: '); # take input from user form the range of Fibonacci series.
try:# to ignore wrong inputs and be aware from error we use try and except block
    d=int(user);# converts the user input to type integer.
    a=0; #initialization``
    b=1; #initialization
    print(a,b,end=' '); # print initial value of a and b
    for c in range(0,d): # here c is iterable variable and in range o is the starting point and d is the ending range which we get from user
        c=a+b;
        a=b;
        b=c;
        print(c,end=' ');

except Exception as e:
    print(e); # if any error occurred in the input here it shows which error occurs
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a= int(input("Enter the first number:"));
Enter the first number:0
b= int(input("enter the second number:"));
enter the second number:1
n= int (input("enter the number of terms:"));
enter the number of terms:10
print(a,b);
0 1
while(n&gt;2):
      c=a+b;
      a=b;
      b=c;
      print(c);
      n=n-1;


1
2
3
5
8
13
21
34
</code></pre>
</div>
<span class="comment-copy">There are no iterators in there.</span>
<span class="comment-copy">It will be good to provide some explanation of your code.</span>
