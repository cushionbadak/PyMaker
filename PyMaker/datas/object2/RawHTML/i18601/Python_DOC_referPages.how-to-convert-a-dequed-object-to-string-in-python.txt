<div class="post-text" itemprop="text">
<p>I am trying to output a rotated version of a string. I have taken a string, <code>z="string"</code>, and created a deque out of it, <code>y=collections.deque(z) (deque(['S','t','r','i','n','g'])</code>, and rotated it using the rotate method. How do I "convert" that deque object I rotated back to a string?</p>
</div>
<div class="post-text" itemprop="text">
<p>Answer to your question: Since a deque is a <a href="https://docs.python.org/3/glossary.html#term-sequence" rel="nofollow noreferrer">sequence</a>, you can generally use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">str.join</a> to form a string from the ordered elements of that collection. <code>str.join</code> works more broadly on any Python <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow noreferrer">iterable</a> to form a string from the elements joined together one by one.</p>
<p>BUT, suggestion, instead of a deque and rotate and join, you can also concatenate slices on the string itself to form a new string:</p>
<pre><code>&gt;&gt;&gt; z="string"
&gt;&gt;&gt; rot=3
&gt;&gt;&gt; z[rot:]+z[:rot]
'ingstr'
</code></pre>
<p>Which works both ways:</p>
<pre><code>&gt;&gt;&gt; rz=z[rot:]+z[:rot]
&gt;&gt;&gt; rz
'ingstr'
&gt;&gt;&gt; rz[-rot:]+rz[:-rot]
'string'
</code></pre>
<p>Besides being easier to read (IMHO) It also turns out to be <strong>a whole lot faster:</strong></p>
<pre><code>from __future__ import print_function  #same code for Py2 Py3
import timeit
import collections

z='string'*10
def f1(tgt,rot=3):
    return tgt[rot:]+tgt[:rot]

def f2(tgt,rot=3):
    y=collections.deque(tgt)
    y.rotate(rot)
    return ''.join(y)

print(f1(z)==f2(z))    # Make sure they produce the same result
t1=timeit.timeit("f1(z)", setup="from __main__ import f1,z")
t2=timeit.timeit("f2(z)", setup="from __main__ import f2,z")    
print('f1: {:.2f} secs\nf2: {:.2f} secs\n faster is {:.2f}% faster.\n'.format(
           t1,t2,(max(t1,t2)/min(t1,t2)-1)*100.0)) 
</code></pre>
<p>Prints:</p>
<pre><code>True
f1: 0.32 secs
f2: 5.02 secs
 faster is 1474.49% faster.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use <a href="http://docs.python.org/2/library/stdtypes.html#str.join" rel="nofollow">str.<code>join()</code></a> method:</p>
<pre><code>&gt;&gt;&gt; y.rotate(3)
&gt;&gt;&gt; y
deque(['i', 'n', 'g', 's', 't', 'r'])
&gt;&gt;&gt; 
&gt;&gt;&gt; ''.join(y)
'ingstr'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just concatenate the characters in the string:</p>
<pre><code>''.join(y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <a href="http://docs.python.org/2/library/stdtypes.html#str.join" rel="nofollow">string join method</a>:</p>
<pre><code>''.join(y)
</code></pre>
<hr/>
<pre><code>In [44]: import collections
In [45]: z = "string"
In [46]: y = collections.deque(z)
In [47]: ''.join(y) 
Out[47]: 'string'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>''.join(y)</code> should do the trick.</p>
</div>
<div class="post-text" itemprop="text">
<p>A good way is to use the <code>join</code> method on the string.</p>
<pre><code>''.join(y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>join()</code>:</p>
<pre><code>''.join(y)
</code></pre>
</div>
<span class="comment-copy">Wow. That's awesome! Thanks!</span>
<span class="comment-copy">@StephenPaul: Thanks. If this is helpful, feel free to <a href="http://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work">accept the answer</a></span>
<span class="comment-copy">Using slice here is faster because create deque use too much time.</span>
