<div class="post-text" itemprop="text">
<p>I have a problem writing the following arrays to a .txt file.</p>
<p>This is my code:</p>
<pre><code>for i in range(len(my_particles)):
    list = []
    list.append(my_particles[i].n)
    for z in range(len(my_particles[i].neighbours)):
        list.append(my_particles[i].neighbours[z])

    #for i in range(len(list)):
    print &gt;&gt;f, list

f.close()
</code></pre>
<p>This is the output:</p>
<pre><code>[0, 2, 20, 91, 114, 127]
[1, 6, 24, 114]
[2, 0, 65, 73, 91, 114]
[3, 71, 91, 120]
[4, 16, 69, 104]
[6, 1, 25, 87, 100, 114]
[7, 19, 83, 111]
[9, 38, 59, 72, 76]
[11, 56, 101, 108]
[12, 86, 92, 126]
[13, 30, 79, 82, 101, 104]
[14, 78, 103, 124]
[15, 23, 44, 90, 116]
[16, 4, 97, 106, 108]
[17, 19, 85, 111]
[18, 47, 60, 68, 74]
</code></pre>
<p>Is there a way to print it in this format?</p>
<pre><code>0, 2, 20, 91, 114, 127
1, 6, 24, 114
</code></pre>
<p>I have tried </p>
<pre><code>print&gt;&gt;f, "".join(list)
</code></pre>
<p>But it does not work, as it is a list of numpy64 floats.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to make strings out of each member of the list first.  Try</p>
<pre><code>print &gt;&gt;f, ', '.join(map(str,list))
</code></pre>
<p>Also, don't name variables <code>list</code>!</p>
</div>
<div class="post-text" itemprop="text">
<p>Try</p>
<pre><code>",".join(str(i) for i in list))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>hacky fix:</p>
<pre><code>print(str(list).replace(']','').replace('[',''))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Converting them to strings should work</p>
<pre><code>print &gt;&gt;f, ', '.join(str(elem) for elem in my_list)
</code></pre>
<p>and as Brien said, don't call your list <code>list</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If list is a numpy array of floats:</p>
<pre><code>list.astype('str')
</code></pre>
<p>OR-You can also use csv to write np.arrays quickly:</p>
<pre><code>import csv
import numpy as np

a = np.random.uniform(0,10,size = (5,5))
writer = csv.writer(open('txtfile.txt','wb'))
writer.writerows(a)
</code></pre>
<p>Yields txt file:</p>
<pre><code>3.55183065126,1.05649949199,5.15510365109,1.0369928554,7.66646909667
9.5145737219,1.53877245296,5.53917128683,1.55343228883,8.78227048275
5.80408228776,2.58788175555,0.502704494319,1.63833152952,3.59898531148
2.94430872526,2.42069917781,5.75920106752,2.42453222446,1.73308148034
1.9579612159,0.609573767011,3.87717828624,7.86853109668,7.41038950637
</code></pre>
<p>or if you wanted integers, adding:</p>
<pre><code>writer.writerows(a.astype(int))
</code></pre>
<p>would yield</p>
<pre><code>2,0,3,4,1
9,5,4,4,3
9,7,6,4,2
3,5,7,2,0
6,0,2,7,7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Firstly, you should use the <a href="http://docs.python.org/3/reference/compound_stmts.html#with" rel="nofollow">with statement</a> when dealing with files to ensure they are automatically closed even if the program encounters an error befor they finish. Secondly, you can replace <code>for i in range(len(my_list))</code> and <code>my_list[i]</code> with <code>for i in my_list</code> and <code>i</code>. Also, having a variable called <code>list</code> overwrites the inbuilt type list. Common practice is to use a trailing underscore to avoid this.</p>
<p>This code should work (although I don't currently have Numpy installed to test it with)</p>
<pre><code>with open("myfilename.txt","w") as f:
    for i in my_particles:
        list_ = []
        list_.append(i.n)

        for j in value.neighbours:
            list_.append(j)

        f.write(", ".join(str(n) for n in list_))
</code></pre>
<p>Note that this will erase the previous contents of the file. If you don't want this, open the file with "a" in the open function rather than "w".</p>
</div>
<span class="comment-copy">+1. A good way to enforce that behavior would be to remove the <code>list</code> from your code. :)</span>
