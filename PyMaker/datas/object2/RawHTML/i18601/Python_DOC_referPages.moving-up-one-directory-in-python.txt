<div class="post-text" itemprop="text">
<p>Is there a simple way to move up one directory in python using a single line of code? Something similar to <code>cd ..</code> in command line</p>
</div>
<div class="post-text" itemprop="text">
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; print os.path.abspath(os.curdir)
C:\Python27
&gt;&gt;&gt; os.chdir("..")
&gt;&gt;&gt; print os.path.abspath(os.curdir)
C:\
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>os</code> module:</p>
<pre><code>import os
os.chdir('..')
</code></pre>
<p>should work </p>
</div>
<div class="post-text" itemprop="text">
<p>Obviously that os.chdir('..') is the right answer here. But just FYI, if in the future you come across situation when you have to extensively manipulate directories and paths, here is a great package (Unipath) which lets you treat them as Python objects: <a href="https://pypi.python.org/pypi/Unipath">https://pypi.python.org/pypi/Unipath</a></p>
<p>so that you could do something like this:</p>
<pre><code>&gt;&gt;&gt; from unipath import Path
&gt;&gt;&gt; p = Path("/usr/lib/python2.5/gopherlib.py")
&gt;&gt;&gt; p.parent
Path("/usr/lib/python2.5")
&gt;&gt;&gt; p.name
Path("gopherlib.py")
&gt;&gt;&gt; p.ext
'.py'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well.. I'm not sure how portable os.chdir('..') would actually be. Under Unix those are real filenames. I would prefer the following:</p>
<pre><code>import os
os.chdir(os.path.dirname(os.getcwd()))
</code></pre>
<p>That gets the current working directory, steps up one directory, and then changes to that directory. </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.4 <em>pathlib</em> was introduced:</p>
<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; p = Path('/etc/usr/lib')
&gt;&gt;&gt; p
PosixPath('/etc/usr/lib')
&gt;&gt;&gt; p.parent
PosixPath('/etc/usr')
</code></pre>
<p>It also comes with many other helpful features e.g. for joining paths using slashes or easily walking the directory tree.</p>
<p>For more information refer to the <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">docs</a> or <a href="http://blog.danwin.com/using-python-3-pathlib-for-managing-filenames-and-directories/" rel="nofollow noreferrer">this post</a>, which covers the differences between os.path and pathlib.</p>
</div>
<span class="comment-copy">Beat me to it!!</span>
<span class="comment-copy">LOL - know how you feel all too often :)  Speed with which answers appear on here is insane sometimes - I swear some people live on SO!</span>
<span class="comment-copy">In python3.4 the <i>pathlib</i> was introduced, which was meant to tackle the same problem (refer to my answer for more details).</span>
<span class="comment-copy">also, with slightly less typing, <code>os.chdir(os.path.pardir)</code>.  This answer is slightly more platform independent, but it is sort of a moot point because while you could imagine a platform that doesn't represent <code>..</code> as the parent directory, any platform that anyone currently uses (including both windows and UNIX) do represent it that way.</span>
<span class="comment-copy">Yeah you're right! I just finished testing it on a windows box, and <code>..</code> works fine. I always expect so little of windows but it does sometimes surprise me :). Still, magic strings littering my code always bother me.</span>
<span class="comment-copy">I agree, but just musing: I wonder if there will <i>ever</i> be a real system that doesn't use this particular convention.</span>
<span class="comment-copy">I hope not. Unix 4 life.</span>
<span class="comment-copy">how come this move one directory up? I don't understand by the code. What if I want to move two directories up?</span>
