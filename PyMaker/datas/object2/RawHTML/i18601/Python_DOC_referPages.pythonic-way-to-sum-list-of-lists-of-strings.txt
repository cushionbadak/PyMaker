<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/406121/flattening-a-shallow-list-in-python">Flattening a shallow list in Python [duplicate]</a>
<span class="question-originals-answer-count">
                    23 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/5286541/how-can-i-flatten-lists-without-splitting-strings">How can I flatten lists without splitting strings?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I've found a way to do what I want which is, But I'm wondering if there's a way I can get this down to one line.</p>
<p>I have a list of list of lists of strings, as compared to a lists of numbers (for which there's an answer: [Sum of list of lists; returns sum list)</p>
<p>Example List:</p>
<pre><code>list = [['T=-40F A=0K', 'T=-15F A=0K', 'T=59F A=0K', 'T=98F A=0K', 'T=120F A=0K'],
 ['T=-40F A=10K','T=-15F A=10K','T=59F A=10K','T=98F A=10K','T=120F A=10K']]
</code></pre>
<p>Example Output:</p>
<pre><code>['T=-40F A=0K', 'T=-15F A=0K', 'T=59F A=0K', 'T=98F A=0K', 'T=120F A=0K', 'T=-40F A=10K', 'T=-15F A=10K', 'T=59F A=10K', 'T=98F A=10K', 'T=120F A=10K']
</code></pre>
<p>I can join these with this method:</p>
<pre><code>new = []
for i in [['T=%.0fF A=%.0fK'%(t,a)for t in TEMP] for a in ALT]:
    new = new + i
</code></pre>
<p>Anyone got anything?</p>
<p>As for the application im adding a legend to a matplotlib plot</p>
<p>This would be really easy, and an awesome feature with sum(list)</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <em>List Comprehension</em>:</p>
<pre><code>&gt;&gt;&gt; my_list = [['T=-40F A=0K', 'T=-15F A=0K', 'T=59F A=0K', 'T=98F A=0K', 'T=120F A=0K'], ['T=-40F A=10K','T=-15F A=10K','T=59F A=10K','T=98F A=10K','T=120F A=10K']]
&gt;&gt;&gt;
&gt;&gt;&gt; [y for x in my_list for y in x]
['T=-40F A=0K', 'T=-15F A=0K', 'T=59F A=0K', 'T=98F A=0K', 'T=120F A=0K', 'T=-40F A=10K', 'T=-15F A=10K', 'T=59F A=10K', 'T=98F A=10K', 'T=120F A=10K']
</code></pre>
<p>And you should not use <code>list</code> as your variable name.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to flatten the iterable - <a href="http://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow"><code>itertools.chain.from_iterable()</code></a> exists for that very purpose:</p>
<pre><code>&gt;&gt;&gt; data = ...
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.chain.from_iterable(data))
['T=-40F A=0K', 'T=-15F A=0K', 'T=59F A=0K', 'T=98F A=0K', 'T=120F A=0K', 'T=-40F A=10K', 'T=-15F A=10K', 'T=59F A=10K', 'T=98F A=10K', 'T=120F A=10K']
</code></pre>
<p>It returns an iterator, so you can use <code>list()</code> if you <em>need</em> a list, or just use the iterator.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can flatten the list using <a href="http://docs.python.org/2/library/itertools.html#itertools.chain" rel="nofollow"><code>itertools.chain()</code></a>.</p>
<pre><code>&gt;&gt;&gt; testList =[['T=-40F A=0K', 'T=-15F A=0K', 'T=59F A=0K', 'T=98F A=0K', 'T=120F A=0K'],
 ['T=-40F A=10K','T=-15F A=10K','T=59F A=10K','T=98F A=10K','T=120F A=10K']]
&gt;&gt;&gt; 
&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; chain(*testList)
&lt;itertools.chain object at 0x02B1E910&gt;
&gt;&gt;&gt; list(chain(*testList))
['T=-40F A=0K', 'T=-15F A=0K', 'T=59F A=0K', 'T=98F A=0K', 'T=120F A=0K', 'T=-40F A=10K', 'T=-15F A=10K', 'T=59F A=10K', 'T=98F A=10K', 'T=120F A=10K']
</code></pre>
<p><strong>OR</strong> Use <code>itertools.chain.from_iterable()</code></p>
<pre><code>&gt;&gt;&gt; list(chain.from_iterable(testList))
['T=-40F A=0K', 'T=-15F A=0K', 'T=59F A=0K', 'T=98F A=0K', 'T=120F A=0K', 'T=-40F A=10K', 'T=-15F A=10K', 'T=59F A=10K', 'T=98F A=10K', 'T=120F A=10K']
</code></pre>
<p><strong>P.S</strong> - Please don't use <code>list</code> as a variable name, it shadows the builtin.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="http://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow">itertools.chain.fromiterable()</a> - </p>
<pre><code>from itertools import chain
result = list(chain.from_iterable(your_list))
</code></pre>
</div>
<span class="comment-copy">How does your input correspond to your output? And what are you trying to do with <code>new = []</code> and <code>new = new + 1</code>?</span>
<span class="comment-copy">@ Inbar Rose: Im not sure its a duplicate due because all those answers are multi line.</span>
<span class="comment-copy">@hivert : I was looking for something more like what provided Rohit Jain... there's no need to import anything</span>
<span class="comment-copy">@CodeMode Importing modules is not something you should be avoiding - the modules are there for a reason. They provide better, fast implementations of these things for you.</span>
<span class="comment-copy">@CodeMode: Rohit Jain's code is the same as <code>comprehension_flatten</code> in <a href="http://stackoverflow.com/questions/406121/flattening-a-shallow-list-in-python" title="flattening a shallow list in python">stackoverflow.com/questions/406121/â€¦</a>.</span>
<span class="comment-copy">Note that a list comp will be slower (and less readable) for this task than <code>itertools.chain.from_iterable()</code>.</span>
<span class="comment-copy">Aware of that, but my lists are fairly small. I'm more for reducing total program size i'd rather not import anything</span>
<span class="comment-copy">@CodeMode One line of code is not going to matter in terms of size - it will however make your code more readable and efficient.</span>
<span class="comment-copy">@CodeMode. Please don't be afraid of importing modules. <code>itertools</code> is one such precious module, which you will not want to miss, such useful and efficient functions <a href="http://docs.python.org/2/library/itertools.html#module-itertools" rel="nofollow noreferrer">it provides</a>. You should learn using libraries. They are there for some reason.</span>
<span class="comment-copy">In either case thank you both! They are both great solutions and really help me with my engineering workload!</span>
<span class="comment-copy">Using <code>*</code> to unpack the list is inefficient - <code>from_iterable()</code> is there for that purpose.</span>
<span class="comment-copy">Thanks! Great response  I should read up on list comprehension</span>
<span class="comment-copy">Didn't know that. Thanks for the comment. Added it to the answer. :)</span>
<span class="comment-copy">@CodeMode There is no <a href="http://www.youtube.com/watch?v=pShL9DCSIUw" rel="nofollow noreferrer">list comprehension</a> here.</span>
<span class="comment-copy">@CodeMode : List comprehension is used in Rohit Jain's answer.</span>
