<div class="post-text" itemprop="text">
<p>I want to produce a list of lists that represents all possible combinations of the numbers 0 and 1. The lists have length n.</p>
<p>The output should look like this. For n=1:</p>
<pre><code>[ [0], [1] ]
</code></pre>
<p>For n=2:</p>
<pre><code>[ [0,0], [0, 1], [1,0], [1, 1] ]
</code></pre>
<p>For n=3:</p>
<pre><code>[ [0,0,0], [0, 0, 1], [0, 1, 1]... [1, 1, 1] ]
</code></pre>
<p>I looked at itertools.combinations but this produces tuples, not lists. [0,1] and [1,0] are distinct combinations, whereas there is only one tuple (0,1) (order doesn't matter).</p>
<p>Any hints or suggestions? I have tried some recursive techniques, but I haven't found the solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for <a href="http://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product(...)</code></a>.</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; list(product([1, 0], repeat=2))
[(1, 1), (1, 0), (0, 1), (0, 0)]
</code></pre>
<p>If you want to convert the inner elements to <code>list</code> type, use a list comprehension</p>
<pre><code>&gt;&gt;&gt; [list(elem) for elem in product([1, 0], repeat =2)]
[[1, 1], [1, 0], [0, 1], [0, 0]]
</code></pre>
<p>Or by using <code>map()</code></p>
<pre><code>&gt;&gt;&gt; map(list, product([1, 0], repeat=2))
[[1, 1], [1, 0], [0, 1], [0, 0]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product</code></a>, assigning the <code>repeat</code> to n.</p>
<pre><code>from itertools import product
list(product([0,1], repeat=n))
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; list(product([0,1], repeat=2))
[(0, 0), (0, 1), (1, 0), (1, 1)]
&gt;&gt;&gt; list(product([0,1], repeat=3))
[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; list(product([0, 1], repeat=2))
[(0, 0), (0, 1), (1, 0), (1, 1)]
&gt;&gt;&gt; 
&gt;&gt;&gt; list(product([0, 1], repeat=3))
[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]
</code></pre>
<p>To get list of list, you can do:</p>
<pre><code>&gt;&gt;&gt; map(list, list(product([0, 1], repeat=2)))
[[0, 0], [0, 1], [1, 0], [1, 1]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just to add a bit of diversity, here's another way of achieving this:</p>
<pre><code>&gt;&gt;&gt; [map(int, format(i, "03b")) for i in range(8)]
[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]
</code></pre>
</div>
<span class="comment-copy">Very good. I just need to convert those tuples to lists.</span>
<span class="comment-copy">Great, I just need to convert those to lists, which is trivial.</span>
