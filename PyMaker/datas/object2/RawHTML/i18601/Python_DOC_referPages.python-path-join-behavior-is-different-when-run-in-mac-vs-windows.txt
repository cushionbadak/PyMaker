<div class="post-text" itemprop="text">
<h2>I want my Project, built in PYTHON to support Windows Linux MAC in any terminal(MAC, CYGWIN, Windows etc). I can able to achieve but I am facing some issue When I run the following</h2>
<pre><code>import os
mypath = os.path.join('users','scripts', 'pythonsample')
print mypath
</code></pre>
<h2>In windows command prompt output is</h2>
<pre><code>users\scripts\pythonsample
</code></pre>
<h2>In MAC terminal output is</h2>
<pre><code>users/scripts/pythonsample
</code></pre>
<h2>Also, when I run the following code</h2>
<pre><code>import glob
glob.glob(os.path.join('users','scripts', 'pythonsample','*.*'))
</code></pre>
<h2>In windows command prompt output is</h2>
<pre><code>[users/scripts\\pythonsample\\a1.py,
users/scripts\\pythonsample\\a2.py,
users/scripts\\pythonsample\\a3.py
users/scripts\\pythonsample\\a4.py]
</code></pre>
<h2>In MAC terminal output is</h2>
<pre><code>[users/scripts/pythonsample/a1.py,
users/scripts/pythonsample/a2.py,
users/scripts/pythonsample/a3.py
users/scripts/pythonsample/a4.py]
</code></pre>
<h2>So to parse and get get the name of the file without whole path becomes difficult in multiple platforms.</h2>
<p>I can write a if else block to decide whether the script is running in Windows or MAC or CGYWIN. </p>
<pre><code>import sys
#Output of below command is Win32, linux2, darwin, cgywin 
print(sys.platform)
</code></pre>
<p>but is there a easy way to accomplish this with out if else block? </p>
</div>
<div class="post-text" itemprop="text">
<p>This is exactly what you should expect. On Windows, <code>os.path</code> gives you Windows-style paths; on Mac OS X, it gives you POSIX-style paths.</p>
<p>If you're looking to guarantee POSIX paths everything, don't use <code>os.path</code> at all, use <code>posixpath</code> instead.</p>
<p>On the other hand, if you've got paths that may be in POSIX format even on Windows (since most parts of Windows handle POSIX-style paths, and many tools generate POSIX-style paths) and want to guarantee that you've got a native path, call <a href="http://docs.python.org/3/library/os.path.html#os.path.normpath" rel="nofollow"><code>os.path.normpath</code></a>.</p>
</div>
<span class="comment-copy">What output do you actually <i>want</i>? Do you want POSIX-style paths even on Windows? Do you want to get Windows-style paths always instead of just in most cases on Windows? Or something different? And, most importantly, please explain <i>why</i> you want that. What's wrong with what you're currently getting?</span>
<span class="comment-copy">If glob.glob(somepath) output is same across the OS, then I can split the path using string.split('\\'). I will have to change this to string.split('\\') in windows string.split('/') in MAC.</span>
<span class="comment-copy">Why are you using <code>string.split</code>? You're already using <code>os.path</code>; use its methods to split things too!</span>
<span class="comment-copy">If glob.glob(somepath) output is same across the OS, then I can split the path using string.split('\\'). I will have to change this to string.split('\\') in windows string.split('/') in MAC.</span>
<span class="comment-copy">You can always <code>s.split(os.pathsep)</code> if you want, which will split on backslashes on Windows and slashes everywhere else. But the whole point of <code>os.path</code> is that you don't have to deal with this nonsense. Just use the methods in <code>os.path</code> to deal with paths.</span>
<span class="comment-copy">os.pathsep is not working in Windows. &gt;&gt;&gt; c = os.path.abspath('..')     &gt;&gt;&gt; c.split(os.pathsep)     ['C:\\Users\\Admin\\Desktop']</span>
<span class="comment-copy">os.pathsep gives ";" in windows and ":" in MAC. os.sep worked well. Thanks.....</span>
<span class="comment-copy">@Venkatesh: Sorry, yeah, I meant <code>os.sep</code>. Thanks for the correction; that could easily confuse future readers otherwise!</span>
