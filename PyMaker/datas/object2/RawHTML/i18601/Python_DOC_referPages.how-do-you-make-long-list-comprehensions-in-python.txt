<div class="post-text" itemprop="text">
<p>For example:</p>
<pre><code>&gt;&gt;&gt; [x for x in range(y) for y in range(z) for z in range(3)]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'y' is not defined
</code></pre>
<p>I would expect this to behave the same as:</p>
<pre><code>&gt;&gt;&gt; a=[]
&gt;&gt;&gt; for z in range(3):
...   for y in range(z):
...     for x in range(3):
...       a.append(x)
... 
&gt;&gt;&gt; a
[0, 1, 2, 0, 1, 2, 0, 1, 2]
</code></pre>
<p>But it doesn't. Why?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your current comprehension will work if you reverse the order of the loops:</p>
<pre><code>[x for z in range(3) for y in range(z) for x in range(3)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Put the loop in the same order in which you would in traditional for loop:</p>
<pre><code>&gt;&gt;&gt; [x for z in range(3) for y in range(z) for x in range(3)]
[0, 1, 2, 0, 1, 2, 0, 1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can think of list comprehension this way:</p>
<pre><code>[x for z in range(3)
       for y in range(z)
         for x in range(3) ]
</code></pre>
<p>Just remove the colons, wrap the for loops in brackets and have <code>x</code> at the front.</p>
</div>
<span class="comment-copy">The <a href="http://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries" rel="nofollow noreferrer">documentation for comprehensions</a> explains this. Maybe it could be written more nicely, but "â€¦ considering each of the for or if clauses a block, nesting from left to right" seems to say pretty clearly that you will get the exact opposite nesting order from what you're expecting.</span>
<span class="comment-copy">oh.............</span>
