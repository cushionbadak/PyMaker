<div class="post-text" itemprop="text">
<p>Pardon me if this has been addressed before, but how do I organize data exchanged between client and server in python application (sockets)?</p>
<p>Let's say I have some elements I have to send - strings, tuples, dicts:</p>
<pre><code>"hello world", (1, 2, 3), {"k": "v"}
</code></pre>
<p>What I currently do is I simply convert everything to string - call <code>repr()</code> before sending and <code>eval()</code> after receiving. This obviously seem a bit redundant.</p>
<p>How should I send these chunks of data? Is there a convention? Preferred format? How do I compress it?</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way is to <a href="http://docs.python.org/3/library/pickle.html#module-pickle" rel="nofollow">pickle</a> them on the client side and unpickle them on the server side. However, to need to ensure that the data is coming from a trusted source as it is possible to force unpickle to execute arbitrary code. Make sure you use <code>cPickle</code> to get the C language implementation.</p>
</div>
<div class="post-text" itemprop="text">
<p>JSON is what you're looking for. If you have an object and you import the JSON functions:</p>
<pre><code>from json import dumps, loads
</code></pre>
<p>you can use <code>dumps(obj)</code> to encode into JSON and <code>loads(str)</code> to convert a JSON string back to an object. For example:</p>
<pre><code>dumps([[1,2,3],{"a":"b", "c":"d"}])
</code></pre>
<p>yields <code>'[[1, 2, 3], {"a": "b", "c": "d"}]'</code> and </p>
<pre><code>loads('[[1, 2, 3], {"a": "b", "c": "d"}]')
</code></pre>
<p>yields <code>[[1, 2, 3], {u'a': u'b', u'c': u'd'}]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should <a href="http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow"><strong><em>never</em></strong> <code>eval()</code> data from an untrusted source</a>, which means you should never <code>eval()</code> anything arriving over an unsecured network connection (or where you can't be absolutely certain the entity at the other end is who or what it says it is).</p>
<p>The obvious solution here is to <a href="http://docs.python.org/2/library/json.html" rel="nofollow">encode the data as JSON</a> at one end, and decode it at the other (unless you have specific performance requirements that require a highly-compressed format like e.g <a href="http://msgpack.org/" rel="nofollow">msgpack</a>).</p>
</div>
<span class="comment-copy">if you're looking for a term to google, this is 'serialization' and python has <code>pickle</code> for python-&gt;python exchanges and <code>json</code> for python-&gt;world exchanges.</span>
