<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/17166074/most-efficient-way-of-making-an-if-elif-elif-else-statement-when-the-else-is-don">Most efficient way of making an if-elif-elif-else statement when the else is done the most?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>My code currently looks something like this:</p>
<pre><code>if option1:
    ...
elif option2:
    ...
elif option3:
    ....
</code></pre>
<p>so on so forth. And while I'm not displeased with it, I was wondering if there was a better alternative in python. My script is a console based script where I'm using argparser to fetch for what the user needs. </p>
</div>
<div class="post-text" itemprop="text">
<p>If 'option' can contain 'one', 'two', or 'three', you could do</p>
<pre><code>def handle_one():
  do_stuff

def handle_two():
  do_stuff

def handle_three():
  do_stuff


{'one': handle_one, 
 'two': handle_two, 
 'three': handle_three}[option]()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm guessing you're starting Python scripting with a background somewhere else, where a <code>switch</code> statement would solve your question. As that's not an option in Python, you're looking for another way to do things. </p>
<p>Without context, though, you can't really answer this question very well (there are far too many options). </p>
<p>I'll throw in one (somewhat Pythonic) alternative:</p>
<p>Let's start with an example of where I think you're coming from.</p>
<pre><code>def add_to_x (x):
    if x == 3:
        x += 2
    elif x == 4:
        x += 4
    elif x == 5:
        x += 5
    return x
</code></pre>
<p>Here's my alternative:</p>
<pre><code>def add_to_x (x):
    vals = { 3 : 5  ,  4 : 8  ,  5 : 10 }
    return vals[x]
</code></pre>
<p>You can also <a href="http://www.secnetix.de/olli/Python/lambda_functions.hawk" rel="nofollow">look into lambdas</a> which you can put into <a href="http://docs.python.org/2/tutorial/datastructures.html#dictionaries" rel="nofollow">the dictionary structure I used</a>.</p>
<p>But again, as said, without context this may not be what you're looking for.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is the first thing that comes to my mind:</p>
<p>Instead of doing this:</p>
<pre><code>if option1:
    a = 1
elif oprtion2:
    a = 2
elif oprtion3:
    a = 3
else:
    a = 0
</code></pre>
<p>You can do this:</p>
<pre><code>a = 1 if option1 else 2 if option 2 else 3 if option3 else 0
</code></pre>
<p>For more detail, see: <a href="http://docs.python.org/2/whatsnew/2.5.html" rel="nofollow">PEP 308: Conditional Expressions</a>!</p>
</div>
<span class="comment-copy">Tell us more about what you are trying to do; you can use a mapping to model dispatch, for example.</span>
<span class="comment-copy">Related reading : <a href="http://effbot.org/pyfaq/why-isn-t-there-a-switch-or-case-statement-in-python.htm" rel="nofollow noreferrer">effbot.org/pyfaq/â€¦</a></span>
<span class="comment-copy">if expressions (<code>optionN</code>) are constant, you may try dict :)</span>
<span class="comment-copy">@MartijnPieters I'm using this to determine which arguments the user has selected.</span>
<span class="comment-copy">If for parsing the command line use a builtin python library e.g. <a href="http://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a>, also read their code</span>
<span class="comment-copy">better to add a default, As <a href="http://stackoverflow.com/questions/16625454/how-do-i-use-user-input-to-invoke-a-function-in-python/16625492#16625492">I suggested here</a></span>
<span class="comment-copy">Well, that would depend on if a default option is possible/makes sense</span>
<span class="comment-copy">It seems like dictionaries take the cake. Everybody seems to be suggesting that.</span>
<span class="comment-copy">It's certainly one way to go. Very Pythonic.</span>
