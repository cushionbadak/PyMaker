<div class="post-text" itemprop="text">
<p>I'm trying to write some short script in python which would start another python code in subprocess if is not already started else terminate terminal &amp; app (Linux).</p>
<p>So it looks like:</p>
<pre><code>#!/usr/bin/python
from subprocess import Popen

text_file = open(".proc", "rb")
dat = text_file.read()
text_file.close()

def do(dat):

    text_file = open(".proc", "w")
    p = None

    if dat == "x" :

        p = Popen('python StripCore.py', shell=True)
        text_file.write( str( p.pid ) )

    else :
        text_file.write( "x" )

        p = # Assign process by pid / pid from int( dat )
        p.terminate()

    text_file.close()

do( dat )
</code></pre>
<p>Have problem of lacking knowledge to name proces by pid which app reads from file <em>".proc"</em>.
The other problem is that interpreter says that string named <em>dat</em> is not equal to <em>"x"</em> ??? What I've missed ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using the awesome <a href="https://github.com/giampaolo/psutil" rel="noreferrer"><code>psutil</code></a> library it's pretty simple:</p>
<pre><code>p = psutil.Process(pid)
p.terminate()  #or p.kill()
</code></pre>
<p>If you don't want to install a new library, you can use the <code>os</code> module:</p>
<pre><code>import os
import signal

os.kill(pid, signal.SIGTERM) #or signal.SIGKILL 
</code></pre>
<p>See also the <a href="https://docs.python.org/3/library/os.html#os.kill" rel="noreferrer"><code>os.kill</code> documentation</a>.</p>
<hr/>
<p>If you are interested in starting the command  <code>python StripCore.py</code> if it is not running, and killing it otherwise, you can use <code>psutil</code> to do this reliably.</p>
<p>Something like:</p>
<pre><code>import psutil
from subprocess import Popen

for process in psutil.process_iter():
    if process.cmdline() == ['python', 'StripCore.py']:
        print('Process found. Terminating it.')
        process.terminate()
        break
else:
    print('Process not found: starting it.')
    Popen(['python', 'StripCore.py'])
</code></pre>
<p>Sample run:</p>
<pre><code>$python test_strip.py   #test_strip.py contains the code above
Process not found: starting it.
$python test_strip.py 
Process found. Terminating it.
$python test_strip.py 
Process not found: starting it.
$killall python
$python test_strip.py 
Process not found: starting it.
$python test_strip.py 
Process found. Terminating it.
$python test_strip.py 
Process not found: starting it.
</code></pre>
<hr/>
<p><strong>Note</strong>: In previous <code>psutil</code> versions <code>cmdline</code> was an <em>attribute</em> instead of a method.</p>
</div>
<div class="post-text" itemprop="text">
<p>I wanted to do the same thing as, but I wanted to do it in the one file.</p>
<p>So the logic would be:</p>
<ul>
<li>if a script with my name is running, kill it, then exit</li>
<li>if a script with my name is not running, do stuff</li>
</ul>
<p>I modified the answer by Bakuriu and came up with this:</p>
<pre><code>from os import getpid
from sys import argv, exit
import psutil  ## pip install psutil

myname = argv[0]
mypid = getpid()
for process in psutil.process_iter():
    if process.pid != mypid:
        for path in process.cmdline():
            if myname in path:
                print "process found"
                process.terminate()
                exit()

## your program starts here...
</code></pre>
<p>Running the script will do whatever the script does. Running another instance of the script will kill any existing instance of the script.</p>
<p>I use this to display a little PyGTK calendar widget which runs when I click the clock. If I click and the calendar is not up, the calendar displays. If the calendar is running and I click the clock, the calendar disappears.</p>
</div>
<span class="comment-copy">Why are you passing <code>shell=True</code>? AFAIK it isn't needed in your use case. Note also that when using <code>shell=True</code> the pid returned by <code>p.pid</code> is <i>not</i> the pid of the python process, but the pid of the shell spawned to execute this process.</span>
<span class="comment-copy">+1 for your comment, but I consider it as appropriate because I need to close terminal as well.</span>
<span class="comment-copy">Thanks, but the main problem for me is how to get the pid of running application?</span>
<span class="comment-copy">@Alex What do you mean? You'd like to terminate the process that is executing? Then simply use <code>sys.exit()</code>. If you want to access the <code>pid</code> of the current process use <code>os.getpid()</code>.</span>
<span class="comment-copy">at_Bakuriu excuse me please (mi dispiace). I just want to make script which will run some app if it is not started. And if app is started, to terminate this app, and self too.</span>
<span class="comment-copy">@Alex I've updated my question with a clean solution using <code>psutil</code>. If you want you can achieve this even using only the standard library but it will be less reliable(i.e. you save the pid to a file. A different process kills your <code>StripCore.py</code> script and starts a new process that gets assigned to the new pid: how can you know that the same pid now doesn't refer to the script running? This isn't a problem with psutil since you can check the <code>cmdline</code> attribute) and more complicated.</span>
<span class="comment-copy">Works like a charm.</span>
