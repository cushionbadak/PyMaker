<div class="post-text" itemprop="text">
<p>I have a list of objects of various types that I want to pickle. I would like to pickle only those which are pickleable. Is there a standard way to check if an object is of pickleable type, other than trying to pickle it?</p>
<p>The documentation says that if a pickling exception occurs it may be already after some of the bytes have been written to the file, so trying to pickle the objects as a test doesn't seem like a good solution.</p>
<p>I saw <a href="https://stackoverflow.com/questions/4199947/python-checking-if-an-object-is-atomically-pickleable">this post</a> but it doesn't answer my question.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would propose <strong>duck</strong> testing in this case. Try to pickle into a temporary file or a memory file, as you find suitable, then if it fails discard the result, if it succeeds rename.</p>
<p><strong>Why?</strong></p>
<p>In python you can check if the object has some properties in two ways.</p>
<p>Check if object is an instance of some <a href="http://docs.python.org/3.2/glossary.html#term-abstract-base-class" rel="nofollow">Abstract Base Class</a>. E.g. <a href="http://docs.python.org/3.2/library/numbers.html#module-numbers" rel="nofollow"><code>Number</code></a> "The root of the numeric hierarchy. If you just want to check if an argument x is a number, without caring what kind, use isinstance(x, Number)." </p>
<p>Or try it and then handle exceptions. This occurs during many occasions. The pythonic philosopy is based around the <strong>duck</strong>. <a href="http://docs.python.org/3.2/glossary.html#term-duck-typing" rel="nofollow"><strong>Duck typing</strong></a>, <a href="http://en.wikipedia.org/wiki/Duck_test" rel="nofollow"><strong>duck test</strong></a>, and <a href="http://docs.python.org/3.2/glossary.html#term-eafp" rel="nofollow"><strong>EAFP</strong></a> are the keywords.</p>
<p>I even believe the 1st one has been properly introduced with python3 under the pressure from the part of the community, while many still strongly believe <strong>duck</strong> is the way to go with python.</p>
<p>AFAIK there is no special preconditions that can be checked, nor any <a href="http://docs.python.org/3.2/glossary.html#term-abstract-base-class" rel="nofollow"><code>ABC</code></a> that object can be checked against in case of pickling. So all that is left is <strong>duck</strong>.</p>
<p>Maybe something else could be attempted but probably it is not worth of it. It would be very hard to do manual introspection of the object to find out preliminarily if it's suitable for pickling.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's the <code>dill.pickles</code> method in <a href="https://pypi.org/project/dill/" rel="nofollow noreferrer"><code>dill</code> package</a> that does just that.</p>
<pre><code>&gt;&gt;&gt; class Foo(object):
...   x = iter([1,2,3])
... 
&gt;&gt;&gt; f = Foo()     
&gt;&gt;&gt; 
&gt;&gt;&gt; dill.pickles(f)
False
</code></pre>
<p>We can use methods in <code>dill</code> to look for what causes the failure.</p>
<pre><code>&gt;&gt;&gt; dill.detect.badtypes(f)
&lt;class '__main__.Foo'&gt;
&gt;&gt;&gt; dill.detect.badtypes(f, depth=1)
{'__setattr__': &lt;type 'method-wrapper'&gt;, '__reduce_ex__': &lt;type 'builtin_function_or_method'&gt;, '__reduce__': &lt;type 'builtin_function_or_method'&gt;, '__str__': &lt;type 'method-wrapper'&gt;, '__format__': &lt;type 'builtin_function_or_method'&gt;, '__getattribute__': &lt;type 'method-wrapper'&gt;, '__class__': &lt;type 'type'&gt;, '__delattr__': &lt;type 'method-wrapper'&gt;, '__subclasshook__': &lt;type 'builtin_function_or_method'&gt;, '__repr__': &lt;type 'method-wrapper'&gt;, '__hash__': &lt;type 'method-wrapper'&gt;, 'x': &lt;type 'listiterator'&gt;, '__sizeof__': &lt;type 'builtin_function_or_method'&gt;, '__init__': &lt;type 'method-wrapper'&gt;}
&gt;&gt;&gt; dill.detect.badtypes(f, depth=1).keys()
['__setattr__', '__reduce_ex__', '__reduce__', '__str__', '__format__', '__getattribute__', '__class__', '__delattr__', '__subclasshook__', '__repr__', '__hash__', 'x', '__sizeof__', '__init__']
</code></pre>
<p>So, the only thing that's failing that's not a "built-in" method of the class is <code>x</code>… so that's a good place to start.  Let's check 'x', then replace it with something else if it's the problem.</p>
<pre><code>&gt;&gt;&gt; dill.pickles(Foo.x)
False
&gt;&gt;&gt; Foo.x = xrange(1,4)
&gt;&gt;&gt; dill.pickles(Foo.x)
True
</code></pre>
<p>Yep, <code>x</code> was causing a failure, and replacing it with an <code>xrange</code> works because <code>dill</code> can pickle an <code>xrange</code>.  What's left to do?</p>
<pre><code>&gt;&gt;&gt; dill.detect.badtypes(f, depth=1).keys()
[]
&gt;&gt;&gt; dill.detect.badtypes(f, depth=1)       
{}
&gt;&gt;&gt; dill.pickles(f)                 
True
&gt;&gt;&gt; 
</code></pre>
<p>Apparently (likely because references to <code>x</code> in the class <code>__dict__</code> now pickle), <code>f</code> now pickles… so we are done.</p>
<p><code>dill</code> also provides <code>trace</code> to show the exact path in pickling the object.</p>
<pre><code>&gt;&gt;&gt; dill.detect.trace(True)
&gt;&gt;&gt; dill.pickles(f)
T2: &lt;class '__main__.Foo'&gt;
F2: &lt;function _create_type at 0x10e79b668&gt;
T1: &lt;type 'type'&gt;
F2: &lt;function _load_type at 0x10e79b5f0&gt;
T1: &lt;type 'object'&gt;
D2: &lt;dict object at 0x10e7c6168&gt;
Si: xrange(1, 4)
F2: &lt;function _eval_repr at 0x10e79bcf8&gt;
D2: &lt;dict object at 0x10e7c6280&gt;
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>dill</code> allows for pickling more things that the builtin <code>pickle</code>.</p>
<p>This should do what you what, I think:</p>
<pre><code>def is_picklable(obj):
  try:
    pickle.dumps(obj)

  except pickle.PicklingError:
    return False
  return True
</code></pre>
</div>
<span class="comment-copy">Trying to write it to a file can be a solution. Just don't write it to your real output file but somewhere else. To /dev/null or somewhere.</span>
<span class="comment-copy">Here are the rules for what can be pickled: <a href="https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
<span class="comment-copy">Thanks, I am familiar with python duck testing. It just surprises me that there isn't a better way of checking pickleability. Does every pickleable object need to implement certain methods? Can't we just duck test for one of these methods?</span>
<span class="comment-copy">Well when I first stumbled upon it I was baffled. I needed to check if object is iterable. The simplest method I found is <code>try: mock = iter(data[0]) except TypeError:</code>. And it is quite against some python-ways because ideally I should treat it as iterable and pass further. However, this had serious drawback of errors popping up too low to find them easily. From what I read in the docs, python uses its internal knowledge to pickle objects. Its not like <code>__str__</code>. You can provide some helpers in strange cases, but they are not necessary everywhere. I didn't find any other reliable method.</span>
<span class="comment-copy">That explains it, thanks. Still seems to me like a weird design choice - but I am probably not seeing all the angles on this.</span>
<span class="comment-copy">@Bitwise Pickling is a complex and, perhaps more importantly, <i>recursive</i> process that depends heavily on what's in scope where. Remember that Python is a dynamic language, so "what is where" is not an easy question to ask at all, and indeed asking can change the answer. So in fact the only possible way to determine if an object is pickleable... is to try pickling it. Actually, a perfect <code>isPickleable()</code> would probably need to solve the halting problem.</span>
