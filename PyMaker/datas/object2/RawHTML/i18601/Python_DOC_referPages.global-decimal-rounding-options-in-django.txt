<div class="post-text" itemprop="text">
<p>Decimal numbers are by default rounded very unexpectedly, in order to make it work normally, it is needed to use <code>ROUND_HALF_UP</code> option.</p>
<pre><code>&gt;&gt;&gt; from decimal import *
&gt;&gt;&gt; Decimal("2.5").quantize(Decimal(1))
Decimal('2')
&gt;&gt;&gt; getcontext().rounding = ROUND_HALF_UP
&gt;&gt;&gt; Decimal("2.5").quantize(Decimal(1))
Decimal('3')
&gt;&gt;&gt; Decimal("2.4").quantize(Decimal(1))
Decimal('2')
</code></pre>
<p>My question is - where in the Django application I have to set rounding option, so that it would work globally in the project? By saying globally I mean templates (floatformat template tag), views, model decimal field and so on.</p>
</div>
<div class="post-text" itemprop="text">
<p>Decimal doesn't have anything to do with Django, they are part of the standard python library. The <code>getcontext</code> function returns the context of the current thread, so if you're not doing anything funky, every request will be executed in one thread. That basically mean that setting the option in the <code>settings.py</code> file should be enough.</p>
</div>
<div class="post-text" itemprop="text">
<p>Worked in 1.9.5 (based on comment from @ark):</p>
<blockquote>
<p>In myapp/apps.py</p>
</blockquote>
<pre><code>from __future__ import unicode_literals
import decimal
from django.apps import AppConfig


class MyAppConfig(AppConfig):

    name = 'myapp'

    def ready(self):
        # Set precision
        decimal.getcontext().prec = 9
        decimal.getcontext().rounding = decimal.ROUND_HALF_DOWN
</code></pre>
<blockquote>
<p>In settings.py</p>
</blockquote>
<pre><code>INSTALLED_APPS = list(INSTALLED_APPS)
INSTALLED_APPS.append('myapp.apps.MyAppConfig')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Actually it doesn't work like Viktor suggested (although in django 1.5).</p>
<p>My solution is create and using a middleware like this:</p>
<pre><code># -*- coding: utf-8 -*-

import decimal
from django.conf import settings


class DecimalPrecisionMiddleware(object):
    def process_request(self, request):
        decimal_context = decimal.getcontext()
        decimal_context.prec = settings.DECIMAL_PRECISION # say: 4
</code></pre>
<p>and then in settings.py:</p>
<pre><code>MIDDLEWARE_CLASSES = (
    'pathto.middleware.DecimalPrecisionMiddleware',
    # etc..
)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For django project can work setting decimal.DefaultContext (<a href="https://docs.python.org/3/library/decimal.html#decimal.DefaultContext" rel="nofollow noreferrer">py3</a>, <a href="https://docs.python.org/2/library/decimal.html#decimal.DefaultContext" rel="nofollow noreferrer">py2</a>).</p>
<blockquote>
<p>This context is most useful in multi-threaded environments. </p>
</blockquote>
<p>This is my code from <code>settings.py</code>:</p>
<pre><code>import decimal
# Set global decimal rounding to ROUND_HALF_UP (instead of ROUND_HALF_EVEN).
project_context = decimal.getcontext()
project_context.rounding = decimal.ROUND_HALF_UP
decimal.DefaultContext = project_context
</code></pre>
<p>Worked in 1.10. Based on my answer in <a href="https://stackoverflow.com/questions/50042364/how-to-set-global-rounding-for-decimalfields-in-django-project/50056757#50056757">this question</a>.</p>
</div>
<span class="comment-copy">I believe the proper way of doing this in recent django versions is to set getcontext() in apps.py</span>
<span class="comment-copy">right, absolutely</span>
