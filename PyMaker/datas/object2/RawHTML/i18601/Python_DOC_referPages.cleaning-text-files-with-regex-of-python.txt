<div class="post-text" itemprop="text">
<p>I have a huge file where there lines like this one:</p>
<p>"<strong>En g茅n茅ral un tr猫s bon hotel       La terrasse du bar pr猫s du lobby</strong>"</p>
<p>How to remove these Sinographic characters from the lines of the file so I get a new file where these lines are with Roman alphabet characters only?
I was thinking of using regular expressions.
Is there a character class for all Roman alphabet characters, e.g. Arabic numerals, a-nA-N and other(punctuation)?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="http://docs.python.org/3/library/string.html" rel="nofollow"><code>string</code></a> module.</p>
<pre><code>&gt;&gt;&gt; string.ascii_letters
'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
&gt;&gt;&gt; string.digits
'0123456789'
&gt;&gt;&gt; string.punctuation
'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~'
&gt;&gt;&gt; 
</code></pre>
<p>And it seems the code you want to replace is Chinese. If you all your string is unicode, you can use the simple range <code>[\u4e00-\u9fa5]</code> to replace them. This is not the whole range of Chinese but enough.</p>
<pre><code>&gt;&gt;&gt; s = u"En g茅n茅ral un tr猫s bon hotel La terrasse du bar pr猫s du lobby"
&gt;&gt;&gt; s
u'En g\u8305n\u8305ral un tr\u732bs bon hotel La terrasse du bar pr\u732bs du lobby'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(ur'[\u4e00-\u9fa5]', '', s)
u'En gnral un trs bon hotel La terrasse du bar prs du lobby'
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I find this <a href="http://www.cheatography.com/davechild/cheat-sheets/regular-expressions/" rel="nofollow">regex cheet sheet</a> to come in very handy for situations like these.</p>
<pre><code># -*- coding: utf-8
import re
import string

u = u"En.!?+ 123 g茅n茅ral un tr猫s bon hotel La terrasse du bar pr猫s du lobby"
p = re.compile(r"[^\w\s\d{}]".format(re.escape(string.punctuation)))
for m in p.finditer(u):
    print m.group()

&gt;&gt;&gt; 茅
&gt;&gt;&gt; 茅
&gt;&gt;&gt; 猫
&gt;&gt;&gt; 猫
</code></pre>
<p>I'm also a huge fan of the <a href="https://pypi.python.org/pypi/Unidecode" rel="nofollow"><code>unidecode</code></a> module.</p>
<pre><code>from unidecode import unidecode

u = u"En.!?+ 123 g茅n茅ral un tr猫s bon hotel La terrasse du bar pr猫s du lobby"

print unidecode(u)

&gt;&gt;&gt; En.!?+ 123 gMao nMao ral un trMao s bon hotel La terrasse du bar prMao s du lobby
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it without regexes.</p>
<p>To keep only ascii characters:</p>
<pre><code># -*- coding: utf-8 -*-
import unicodedata

unistr = u"En g茅n茅ral un tr猫s bon hotel La terrasse du bar pr猫s du lobby"
unistr = unicodedata.normalize('NFD', unistr) # to preserve `e` in `é`
ascii_bytes = unistr.encode('ascii', 'ignore')
</code></pre>
<p>To remove everything except ascii letters, numbers, punctuation:</p>
<pre><code>from string import ascii_letters, digits, punctuation, whitespace

to_keep = set(map(ord, ascii_letters + digits + punctuation + whitespace))
all_bytes = range(0x100)
to_remove = bytearray(b for b in all_bytes if b not in to_keep)
text = ascii_bytes.translate(None, to_remove).decode()
# -&gt; En gnral un trs bon hotel La terrasse du bar prs du lobby
</code></pre>
</div>
<span class="comment-copy">You can use hex values between a certain range? Perhaps anything up to 0x7F? It depends on what you're calling "normal"...</span>
<span class="comment-copy">Alternatively, you could try to specify "every allowed symbol" with some sort of regex like [-a-zA-Z0-9!"£$%^&amp;*(){}[]\|,./&lt;&gt;?;'#:@~`] or whatever, but then your code will look horribly ugly and may miss something out!</span>
<span class="comment-copy">What encoding are you using when reading this file?</span>
<span class="comment-copy">@ Mike Samuel I'm using utf-8. <code>codecs.open(file,'r','utf-8')</code></span>
