<div class="post-text" itemprop="text">
<p>I'm trying to create a powerset in Python 3.  I found a reference to the <code>itertools</code>
 module, and I've used the powerset code provided on that page.  The problem:  the code returns a reference to an <code>itertools.chain</code> object, whereas I want access to the elements in the powerset.  My question: how to accomplish this?  </p>
<p>Many thanks in advance for your insights.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>itertools</code> functions return <a href="https://docs.python.org/3/glossary.html#term-iterator" rel="noreferrer"><em>iterators</em></a>, objects that produce results lazily, on demand.</p>
<p>You could either loop over the object with a <code>for</code> loop, or turn the result into a list by calling <code>list()</code> on it:</p>
<pre><code>from itertools import chain, combinations

def powerset(iterable):
    "powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

for result in powerset([1, 2, 3]):
    print(result)

results = list(powerset([1, 2, 3]))
print(results)
</code></pre>
<p>You can also store the object in a variable and use the <a href="http://docs.python.org/3/library/functions.html#next" rel="noreferrer"><code>next()</code> function</a> to get results from the iterator one by one.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a solution using a generator:</p>
<pre><code>from itertools import combinations

def all_combos(s):
    n = len(s)
    for r in range(1, n+1):
        for combo in combinations(s, r):
            yield combo
</code></pre>
</div>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/1482308/4279">what's a good way to combinate through a set?</a></span>
<span class="comment-copy">@BruceM, is it necessarily to use <code>itertools</code>?</span>
