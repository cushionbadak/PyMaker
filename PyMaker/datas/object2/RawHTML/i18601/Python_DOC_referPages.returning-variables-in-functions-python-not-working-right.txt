<div class="post-text" itemprop="text">
<p>I have been trying to return a variable in a function in a variable and use it outside of it:</p>
<pre><code>test = 0

def testing():
    test = 1
    return test

testing()
print(test)
</code></pre>
<p>But when I run it, the result is 0. How could I fix this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are messing up a bit the scopes and/or assignment. Try this:</p>
<pre><code>test = 0

def testing():
    test = 1
    return test

test = testing()
print(test)
</code></pre>
<p>Explanation: The <code>test</code> inside <code>testing</code> is different to the <code>test</code> inside the module. You have to assign it on module-level to get the expected result.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because you declare <code>test</code> in the function, it is not a global variable, thus, you can not access the variable <code>test</code> you created in the function outside of it as they are different scopes</p>
<p>If you want to <code>return test</code> to a variable, you have to do</p>
<pre><code>result = testing()
print(result)
</code></pre>
<p>Or, you can also add a <code>global</code> statement:</p>
<pre><code>test = 0

def testing():
    global test
    test = 1
    return test

testing()
print(test)
</code></pre>
<hr/>
<p>By the way, when doing a conditional statement, you don't need the brackets around the <code>1==1</code> :).</p>
</div>
<div class="post-text" itemprop="text">
<p>Inside the function <code>testing()</code>, you're creating a new variable <code>test</code>, <em>not</em> referring to the one that already exists. If you want to do that, you should use a <code>global</code> statement in the top, as in:</p>
<pre><code>def testing():
    global test
    ...etc...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>test</code> variable inside the function does not have a global scope. So, if you want to store the return value in a variable and output it after that, you can do something like this:</p>
<pre><code>result = testing()
print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>TLDR: A <code>return</code> value must be <em>assigned</em> to something at the call site.</p>
<pre><code>test = testing()
</code></pre>
<hr/>
<p>Functions in Python have their own scope. It is created on entering (calling) the function, and destroyed when leaving it. Assignment to a <em>name</em> inside a scope makes that name local to this scope - causing it to be destroyed along with the scope.</p>
<pre><code># start outer scope
test = 0  # create name outer:test

def testing():
    # start inner scope
    test = 1  # create name outer.testing:test
    return test
    # end inner scope
    # destroy name outer.testing:test

testing()  # new temporary inner scope outer.testing
print(test)  # use name outer:test
# end outer scope
</code></pre>
<p>Notably, names in an inner scope may "<a href="https://en.wikipedia.org/wiki/Variable_shadowing" rel="nofollow noreferrer">shadow</a>" names from an outer scope. While the name <code>test</code> exists in both <code>testing</code> and the outer scope, <strong>it does not refer to the same thing</strong>. This has two important implications:</p>
<ol>
<li>The assignment to the <em>inner</em> <code>test</code> does not affect the <em>outer</em> <code>test</code>.</li>
<li>At the end of <code>testing</code>, the <em>inner</em> <code>test</code> is destroyed and only the <em>outer</em> <code>test</code> remains.</li>
</ol>
<p>This is why calling <code>testing()</code> does not have the desired effect: it never modifies the outer <code>test</code> passed to <code>print</code>.</p>
<hr/>
<p><a href="https://docs.python.org/3/reference/simple_stmts.html#return" rel="nofollow noreferrer">The <code>return</code> statement defines the value returned by calling a function.</a> It does <em>not</em> return the name, only the value pointed to.</p>
<pre><code>def testing():
    test = 1  # test refers to the value 1
    return test  # return test =&gt; value 1
</code></pre>
<p>The value returned by a function is like any other value - be it from a literal, lookup, or other. Most importantly, the value does not persist unless you assign it to a name or use it directly.</p>
<pre><code>testing()  # call test, discard its value
test = testing()  # call test, store its value as `test`
print(testing())  # call test, use its value in `print`
</code></pre>
<p>So in order to return something from a function for later use, you must store the result to a name. You can then use that name in a later statement. A minimal example for your case looks like this:</p>
<pre><code># we already can define testing here
# it is overwritten later on, then

def testing():
    # all names we use inside of testing are gone at the end
    # if we just want a value, we can skip temporary names
    return 1

# store the return value of testing() for later use
test = testing()
print(test)
</code></pre>
<hr/>
<p>Addendum: It <em>is</em> possible for a function to modify its containing scope. However, names must then be explicitly declared as being from a foreign scope.</p>
<p>The <a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow noreferrer"><code>nonlocal</code></a> and <a href="https://docs.python.org/3/reference/simple_stmts.html#the-global-statement" rel="nofollow noreferrer"><code>global</code></a> keywords allow to modify names from outer scopes. A <code>nonlocal</code> is the name in the closest matching function scope. A <code>global</code> is the name at the module scope, regardless of any functions in-between.</p>
<pre><code>test = 0

def increment():
    global test  # declare test as belonging to a specific scope
    test += 1
    # no need to return something
    # we already modified the outer `test`

print(test)  # 0
increment()
print(test)  # 1
</code></pre>
<p>Note that modifying outer names is often the sign of an anti-pattern, moreso for <code>global</code>s than <code>nonlocal</code>s. Beyond small scripts, it gets difficult to trace what is accessing and modifying <code>global</code>s. Often, it is more appropriate to use classes or generators to hold state.</p>
<p>A function can always <em>read</em> names from its containing scope, provided it <em>never</em> writes to the same name. Such <a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)" rel="nofollow noreferrer">closures</a> are very easy to create, and the lack of modification makes them easier to trace. Note that modifying a name <em>anywhere</em> in a function makes it local, unless declared <code>global</code> or <code>nonlocal</code>:</p>
<pre><code>test = 0

def increment():
    global test
    test += 1

def show_test():
    # we never modify `test`, so it is fetched from the outside
    print(test)

def show_and_increment1():  # this function is broken!
    print(test)  # `test` is *not* the outer one, since we modify it in the function
    test += 1  # modifying `test` makes it local for the *entire* function

def show_and_increment2():  # this function works!
    global test  # force `test` to be global
    print(test)
    test += 1

show_test()  # 0
increment()
show_test()  # 1
show_and_increment2()  # 1
show_and_increment2()  # 2
show_and_increment2()  # 3
show_test()  # 4
show_and_increment1()  # UnboundLocalError: local variable 'test' referenced before assignment
</code></pre>
</div>
<span class="comment-copy">Change the name of the global variable <code>test</code> to <code>g_test</code> and you'll understand.  They are two totally different variables, and by using the same name, you're just confusing yourself.</span>
<span class="comment-copy">There are 7 votes as of this writing on an answer that looks right.  But I don't think anyone actually explained this.  The real glitch in your code (the only reason it does not work), is that when you do the function call, you do not capture the return value.  Then you print an original unchanged global variable.  Comments on scope are correct.  "test" inside your function is local scope and is a copy that does not change the global "test" variable that is outside the function.</span>
<span class="comment-copy">If you are new to Python though, you should google "mutating versus nonmutating" and read posts on Stack Overflow about that too for when you work with lists and get a different behavior from seemingly similar code.  If you pass "test" in as an argument, you still have to return it and capture it for it to work.  But this behavior is different for mutating variables like lists.  Hope you find this helpful in addition to the code fixes already provided by others to your question.</span>
<span class="comment-copy">oops - this is a 3 year old post.  Guess I just wrote that up for completeness for anyone who stumbles onto this thread while looking to solve a problem.</span>
<span class="comment-copy">Thank you for this.  I had a much more complex piece of code with recursion in it that was apparently failing for the same reason.  It was just harder to see inside all of the code.  This simple question and answer I think may have just put me onto the solution.  :-)</span>
<span class="comment-copy">+1 from me. More detailed than my answer.</span>
<span class="comment-copy">@Hyperboreus :).</span>
<span class="comment-copy">This is also useful, but the other answer highlights a possible bug in the code (not capturing the return value) so it has wider implications as a solution and is more likely to help the poster find what went wrong in the real code that may have led to this example. Being new to Python, I had not realized you could do what is in your answer though and this may help me with other use cases, so thanks for posting.</span>
