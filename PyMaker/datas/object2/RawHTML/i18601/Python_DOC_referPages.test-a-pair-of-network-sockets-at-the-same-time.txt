<div class="post-text" itemprop="text">
<p>I have an app X that can run on either of two computers, but on no more than one at once.  I have another app Y, written in Python, that given the two possible ip addresses needs to find out which computer is running app X (if any).  I've partially solved this by having a UDP service that listens on a port and responds with a 'Hello' whenever it receives some data.  The client can try and send data to the app X port on each address and if it gets a response, I know the application is running on that computer.</p>
<p>My code so far looks like this:</p>
<pre><code> def ipaddress(self):
    """Test which side responds on the status port."""
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.settimeout(5)
        s.sendto("status", (ADDR_A, PORT))
        s.recvfrom(1024)
    except socket.timeout:
        try:
            s.sendto("status", (ADDR_B, PORT))
            s.recvfrom(1024)
        except:
            pass
        else:
            return ADDR_B
    else:
        return ADDR_A
    finally:
        s.close()
    return None
</code></pre>
<p>The problem with this function is that it's called periodically whenever I want to talk to the computer running app X.  It will always test ADDR_A first, and if it's not running app X then I have to wait for the socket to timeout before trying ADDR_B. Although it doesn't happen often app X could have switched computers whenever I come around trying again.  </p>
<p>Is there a better way?  I'm wondering if it's possible to connect to both computers in parallel and return as soon as one responds? Or should I cache which ip address responded first last time the function was called?  How would I code these or other ideas?</p>
<p>Thanks.</p>
<p>EDIT: Here is my revised code using select:</p>
<pre><code>def ipaddress(addr_a, addr_b, timeout=5):
    """Test which side responds on the status port."""

    # Create UDP sockets for each address 
    socks = [ socket.socket(socket.AF_INET, socket.SOCK_DGRAM),
              socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
              ]

    # Send some data to each socket 
    for sock, addr in zip(socks, (addr_a, addr_b)):
        sock.connect(addr)  # do explicit connect so getpeername works
        sock.send("status")

    # Wait for the first to respond if any
    while socks:
        waiting = select.select(socks, [], socks, timeout)[0]
        if waiting:
            for sock in waiting:
                try:
                    data = sock.recv(1024)
                    if data:
                        return sock.getpeername()[0]
                except Exception, e:
                    # Occasionally get [Errno 10054] which means socket isn't really
                    # available, so see if other responds instead...
                    socks.remove(sock)
        else:
            break   # timeout occurred
    return None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should look at <a href="http://docs.python.org/3/library/select.html#module-select" rel="nofollow">select.select()</a> which provides exactly the capability you are looking for to look at the two computers in parallel.</p>
</div>
<span class="comment-copy">Yes, that works great thank you!</span>
