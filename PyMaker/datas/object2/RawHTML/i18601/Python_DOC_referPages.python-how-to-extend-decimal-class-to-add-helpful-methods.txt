<div class="post-text" itemprop="text">
<p>I would like to extend the Decimal class to add some helpful methods to it, specially for handling money.</p>
<p>The problem when I go do this:</p>
<pre><code>from decimal import Decimal
class NewDecimal(Decimal):
    def new_str(self):
        return "${}".format(self)

d1 = NewDecimal(1)
print d1.new_str() # prints '$1'

d2 = NewDecimal(2)
d3 = NewDecimal(3)
d5 = d2 + d3
print d5.new_str()   #exception happens here
</code></pre>
<p>It throws an exception: </p>
<pre><code>AttributeError: 'Decimal' object has no attribute 'new_str'
</code></pre>
<p>This is because of the way Decimal does arithmetic, it always returns a new Decimal object, by literally calling Decimal(<em>new value</em>) at the end of the computation.<br/>
Does anyone no a workaround for this other than completely reimplementing all the arithmetic?</p>
</div>
<div class="post-text" itemprop="text">
<p>You probably don't actually want to do this just to have an extra method for printing Decimal objects in an alternate way. A top-level function or monkeypatched method is a whole lot simpler, and cleaner. Or, alternatively, a <code>Money</code> class that has a <code>Decimal</code> member that it delegates arithmetic to.</p>
<p>But what you want is doable.</p>
<hr/>
<p>To make <code>NewDecimal(1) + NewDecimal(2)</code> return <code>NewDecimal(3)</code>, you can just override <code>__add__</code>:</p>
<pre><code>def __add__(self, rhs):
    return NewDecimal(super().__add__(rhs))
</code></pre>
<p>And of course you'll want to override <code>__iadd__</code> as well. And don't forget <code>mul</code> and all the other <a href="http://docs.python.org/3.3/reference/datamodel.html#emulating-numeric-types" rel="noreferrer">numeric special methods</a>.</p>
<p>But that still won't help for <code>Decimal(2) + NewDecimal(3)</code>. To make that work, you need to define <code>NewDecimal.__radd__</code>. You also need to ensure that <code>NewDecimal.__radd__</code> will get called instead of <code>Decimal.__add__</code>, but when you're using inheritance, that's easy, because Python has a rule specifically to make this easy:</p>
<blockquote>
<p><em>Note:</em> If the right operand’s type is a subclass of the left operand’s type and that subclass provides the reflected method for the operation, this method will be called before the left operand’s non-reflected method. This behavior allows subclasses to override their ancestors’ operations.</p>
</blockquote>
<hr/>
<p>You may want to read the section <a href="http://docs.python.org/3/library/numbers.html#implementing-the-arithmetic-operations" rel="noreferrer">Implementing the arithmetic operations</a> in the <code>numbers</code> module docs, and <a href="http://hg.python.org/cpython/file/3.3/Lib/fractions.py" rel="noreferrer">the implementation of <code>fractions.Fraction</code></a> (which was intended to serve as sample code for creating new numeric types, which is why the docs link directly to the source). Your life is easier than <code>Fraction</code>'s because you can effectively fall back to <code>Decimal</code> for every operation and then convert (since <code>NewDecimal</code> doesn't have any different numeric behavior from <code>Decimal</code>), but it's worth seeing all the issues, and understanding which ones are and aren't relevant and why.</p>
</div>
<div class="post-text" itemprop="text">
<p>The quick way to what you want, would be like this:</p>
<pre><code>from decimal import Decimal
class NewDecimal(Decimal):
    def __str__(self):  
        return "${}".format(self)

    def __add__(self,b):
        return NewDecimal( Decimal.__add__(self,b) )


d1 = NewDecimal(1)
print d1 # prints '$1'

d2 = NewDecimal(2)
d3 = NewDecimal(3)
d5 = d2 + d3
print d5

&gt; $5
</code></pre>
</div>
<span class="comment-copy">The usual solution is to just write functions that operate on <code>Decimal</code>s instead of trying to make them methods. (You could try monkey-patching the <code>Decimal</code> class, but that can be dangerous and confusing.)</span>
<span class="comment-copy">This works up to a point; <code>d2 + Decimal(3)</code> returns a <code>NewDecimal</code>, but <code>Decimal(3) + d2</code> return an ordinary <code>Decimal</code>.</span>
<span class="comment-copy">Because when you do 'Decimal(3) + d2', you call the Decimal.__add__ function... Not sure if there is anything you can do about it..</span>
<span class="comment-copy">Sure there is. That's what <code>__radd__</code> is for.</span>
<span class="comment-copy">Great, didn't knew that...</span>
