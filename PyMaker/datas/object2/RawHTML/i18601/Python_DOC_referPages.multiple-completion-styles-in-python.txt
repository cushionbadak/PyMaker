<div class="post-text" itemprop="text">
<p>I've been playing with Python's <a href="http://docs.python.org/3/library/readline.html" rel="nofollow"><code>readline</code></a> module. One of the things I noticed is the lack of support to directly bind a key to a Python function.  In other words, there is no binding for readline's <a href="http://tiswww.case.edu/php/chet/readline/readline.html#SEC32" rel="nofollow"><code>rl_bind_key()</code></a>.</p>
<p>My intention is to have different completion logics depending on the key pressed.  For example, apart from the traditional tab completion, I would like to bind something like <code>C-&lt;space&gt;</code> and perform completion using a different function.  Or, another example, to imitate Cisco shell and bind the <code>?</code> key to a command listing with a description.</p>
<p>With only one completer bound, is it possible to retrieve the key that triggered the completion event?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on readline 6.2.4.1, I added a new function to pass the value of variable rl_completion_invoking_key to python in readline.c, and generated my own readline.so. Then I can decide different behaviors according to the invoking keys in the complete() function.</p>
<pre><code>readline.c:
static PyObject *
get_completion_invoking_key(PyObject *self, PyObject *noarg)
{
    return PyInt_FromLong(rl_completion_invoking_key);
}

PyDoc_STRVAR(doc_get_completion_invoking_key,
"get_completion_invoking_key() -&gt; int\n\
Get the invoking key of completion being attempted.");

static struct PyMethodDef readline_methods[] =
{
...
{"get_completion_invoking_key", get_completion_invoking_key,
 METH_NOARGS, doc_get_completion_invoking_key},
...
}

in your own code:
readline.parse_and_bind("tab: complete")    # invoking_key = 9
readline.parse_and_bind("space: complete")  # invoking_key = 32
readline.parse_and_bind("?: complete")      # invoking_key = 63

def complete(self, text, state):
    invoking_key = readline.get_completion_invoking_key()
</code></pre>
</div>
<span class="comment-copy">A slightly different answer: I don't know readline well enough, but there is a pure Python library that offers similar behavior, which you could tweak if needed: <a href="https://bitbucket.org/pypy/pyrepl" rel="nofollow noreferrer">bitbucket.org/pypy/pyrepl</a></span>
<span class="comment-copy">Looks interesting, I'll take a look, thanks :-)</span>
