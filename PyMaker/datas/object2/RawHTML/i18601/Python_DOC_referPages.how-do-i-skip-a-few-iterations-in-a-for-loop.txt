<div class="post-text" itemprop="text">
<p>In python I usually loop through ranges simply by </p>
<pre><code>for i in range(100): 
    #do something
</code></pre>
<p>but now I want to skip a few steps in the loop. More specifically, I want something like <code>continue(10)</code> so that it would skip the whole loop and increase the counter by 10. If I were using a for loop in C I'd just sum 10 to <code>i</code>, but in Python that doesn't really work.</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot alter the target list (<code>i</code> in this case) of a <code>for</code> loop. Use a <code>while</code> loop instead:</p>
<pre><code>while i &lt; 10:
    i += 1
    if i == 2:
        i += 3
</code></pre>
<p>Alternatively, use an iterable and increment that:</p>
<pre><code>from itertools import islice

numbers = iter(range(10))
for i in numbers:
    if i == 2:
        next(islice(numbers, 3, 3), None)  # consume 3
</code></pre>
<p>By assigning the result of <code>iter()</code> to a local variable, we can advance the loop sequence inside the loop using standard iteration tools (<code>next()</code>, or here, a shortened version of the <code>itertools</code> consume recipe). <code>for</code> normally calls <code>iter()</code> for us when looping over a iterator.</p>
</div>
<div class="post-text" itemprop="text">
<p>The best way is to assign the iterator a name - it is common have an iterable as opposed to an iterator (the difference being an iterable - for example a list - starts from the beginning each time you iterate over it). In this case, just use <a href="http://docs.python.org/3.3/library/functions.html#iter">the <code>iter()</code> built-in function</a>:</p>
<pre><code>numbers = iter(range(100))
</code></pre>
<p>Then you can advance it inside the loop using the name. The best way to do this is with <a href="http://docs.python.org/3/library/itertools.html#itertools-recipes">the <code>itertools</code> <code>consume()</code> recipe</a> - as it is fast (it uses <code>itertools</code> functions to ensure the iteration happens in low-level code, making the process of consuming the values very fast, and avoids using up memory by storing the consumed values):</p>
<pre><code>from itertools import islice
import collections

def consume(iterator, n):
    "Advance the iterator n-steps ahead. If n is none, consume entirely."
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        collections.deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)
</code></pre>
<p>By doing this, you can do something like:</p>
<pre><code>numbers = iter(range(100))
for i in numbers: 
    ...
    if some_check(i):
        consume(numbers, 3)  # Skip 3 ahead.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not just set the value to skip until?  Like:</p>
<pre><code>skip_until = 0
for i in range(100):
    if i &lt; skip_until:
        continue
    if SOME_CONDITION:
        skip_until = i + 10
    DO_SOMETHING()
</code></pre>
<p>where SOME_CONDITION is whatever causes you to skip and DO_SOMETHING() is the actual loop contents?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for i in range(0, 100, 10):
    print(i)
</code></pre>
<p>will print 0, 10, 20 ...</p>
</div>
<span class="comment-copy">I figured that might be the case, while loops are just sad though.</span>
<span class="comment-copy">Ended up going with the while loop anyhow! Thanks a ton!</span>
<span class="comment-copy">@AlexS If you are iterating over numbers, that's fine - if you are using those numbers as indices for lists or whatever, please don't do that. Iterating by index is bad in every way.</span>
<span class="comment-copy">Note that even in Python 3, you <i>have</i> to call <code>iter()</code> on <code>range()</code> for this to work. The Python 3 <code>range()</code> object is a sequence (an iterable), not an iterator.</span>
<span class="comment-copy">@MartijnPieters Incredibly good point. Edited. I iterate over ranges so little I forgot that was the case.</span>
<span class="comment-copy">Great answer +1</span>
<span class="comment-copy">+1, this is seemingly the fastest way, and not too complicated.</span>
<span class="comment-copy">+1, <code>continue</code> is the least convoluted way.</span>
<span class="comment-copy">It's worth noting that this requires the loop to be executed in Python, and the name assigned each time - while it's not likely to be a problem in most cases, it is far less efficient in that sense.</span>
<span class="comment-copy">Yeah, but given the simplicity of the question I figured he wanted a simple answer; messing with iterators seems like overkill if the loops/skips are small.</span>
<span class="comment-copy">Hi, although this skips the first 10 values I think the asker was more interested in knowing how to skip ahead to an arbitrary value while <b>in the loop</b>.  See the top answer for an example.</span>
<span class="comment-copy">You definitely don't need python 3.3 for this, either.</span>
