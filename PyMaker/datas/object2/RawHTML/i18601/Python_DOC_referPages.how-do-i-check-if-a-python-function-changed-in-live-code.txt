<div class="post-text" itemprop="text">
<p>If I have a reference to a function I can check it's code object <code>f.__code__</code>, get a signature, then perform later checks against this signature to see if the code changed. This is good.
But what if one of the funciton's dependencies changed? E.g.</p>
<pre><code>def foo(a, b):
    return bar(a, b)
</code></pre>
<p>Let's say <code>foo</code> remained the same, but <code>bar</code> changed. Is there a way I can check <code>foo</code>'s dependencies 'live' via the <code>foo.__code__</code> object (vs. parsing the text and using AST)?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm just poking around at the <code>__code__</code> object here, so I can't say that this would work for sure, but it looks to me like you could use the <code>co_names</code> tuple to (recursively) traverse the call graph rooted at a particular function, in order to build up some sort of hash of the transitive closure of the functions that could possible be called. (I don't think it'd be possible to include only the functions that <em>will</em>  be called for a particular input, but you could be conservative and include every possible call.)</p>
<p>To do this you'd need to maintain some sort of symbol table to be able to look up the names of the functions that get called. But once you start going down this path, it seems like you're basically going to build up your own equivalent of the AST. So, why not just use the AST to start with ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You may to compare <strong>bytecode</strong> attributes on <strong>code object</strong> using <code>method.__code__.co_code</code>. For example lets define two classes:</p>
<pre><code>&gt;&gt;&gt; class A:
...     a = 1
...     def b(self, b):
...             print(self.a + b)
... 
&gt;&gt;&gt; class B:
...     a = 1
...     def b(self, b):
...             print(self.a + b)
... 
&gt;&gt;&gt; A().b.__code__.co_code
'|\x00\x00j\x00\x00|\x01\x00\x17GHd\x00\x00S'
&gt;&gt;&gt; B().b.__code__.co_code
'|\x00\x00j\x00\x00|\x01\x00\x17GHd\x00\x00S'
&gt;&gt;&gt; A().b.__code__.co_code == B().b.__code__.co_code
True
</code></pre>
<p>and if method <code>b</code> in class <code>A</code> is changed:</p>
<pre><code>&gt;&gt;&gt; class A:
...     a = 1
...     def b(self, b):
...             print(b + self.a)
... 
&gt;&gt;&gt; A().b.__code__.co_code
'|\x01\x00|\x00\x00j\x00\x00\x17GHd\x00\x00S'
&gt;&gt;&gt; A().b.__code__.co_code == B().b.__code__.co_code
False
</code></pre>
<p>or use <strong>inspect</strong> method <a href="https://docs.python.org/3/library/inspect.html#inspect.getsource" rel="nofollow noreferrer"><code>inspect.getsource(object)</code></a> that:</p>
<blockquote>
<p>Return the text of the source code for an object. The argument may be
  a module, class, method, function, traceback, frame, or code object.
  The source code is returned as a single string.</p>
</blockquote>
<p>And if you want to know whether the code has changed in dynamic you may need to reload your class with <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer"><code>importlib</code></a> and compare bytecode.</p>
</div>
<span class="comment-copy">May I ask why you are doing this? What is the broader purpose?</span>
<span class="comment-copy">If you need to do this, something has gone horribly wrong. (Also, holy crap. Python lets you reassign a function's code. That's getting filed under "features to never, ever touch".)</span>
<span class="comment-copy">Regardless of the intention it seems like an interesting, if slightly academic, question still.</span>
<span class="comment-copy">Not academic :). I have a pipeline object that accepts a sequence of generally simple 'processors' each one accepts a record originally coming from a static source, augments it and passes on to the next processor. This is a good way to express needed preprocessing, but is not efficient. So the cache object dumps the processed records at the end to a (json) file to serve as a cache. The reason to get signatures of the functions is to force a cache refresh when something changes.</span>
<span class="comment-copy">Thanks. I was poking around the same thing (with the same recursive processing in mind), but 'bar' is not there!</span>
