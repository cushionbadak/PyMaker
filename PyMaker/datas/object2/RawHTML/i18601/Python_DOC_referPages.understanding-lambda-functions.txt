<div class="post-text" itemprop="text">
<p>Well I did try to read about Lambda functions but did not get across any link which explains few questions about its flow and the way it is handled by python interpretor or may be I could not understand it properly.
I have few question, please can somebody clarify them for me.
Here is the code :</p>
<pre><code>def f1(n):
    print 'in f1, value is : ', n
    return lambda x: x+n

if __name__ == '__main__':
    f= f1(100)
    print f(1)
    print f(3)
    print f1(10)
    print f(5)
    print type(f1)
</code></pre>
<p>The output being :</p>
<pre><code>in f1, value is :  100
101
103
in f1, value is :  10
&lt;function &lt;lambda&gt; at 0x019C66B0&gt;
105
&lt;type 'function'&gt;
</code></pre>
<p>My question is :</p>
<ul>
<li>For <code>f(1)</code> and <code>f(3)</code> why <code>print</code> statement was not called and when
we called <code>f1(100)</code> why lambda statement was not compiled.</li>
<li>What is the relation between <code>x</code> and <code>n</code> in function <code>f1</code>.</li>
<li>I thought <code>f(5)</code> will 15 ( 10 + 5)</li>
<li>Please explain <code>print f1(10)</code></li>
<li>Also, please let me know what is <code>lambda x:</code> means here, is that x name of this block? please explain.</li>
</ul>
<p>Thanks all.</p>
</div>
<div class="post-text" itemprop="text">
<p>First you should understand that everything in Python is an object. And <em>functions</em> do come in everything.</p>
<p>From your function <code>f1()</code>, you are actually returning a reference to a <code>lambda</code> function. Which you can assign in any variable.</p>
<p>For e.g.:</p>
<pre><code>&gt;&gt;&gt; f = lambda x: x   # Assign reference to lambda function to f.
# Now you can call lambda function using `f`  
&gt;&gt;&gt; f(1)
1
</code></pre>
<hr/>
<p>Now, let's move ahead with your example. Your first statement is inside <code>if</code> is:</p>
<pre><code>f = f1(100)
</code></pre>
<p>This assignment is equivalent to:</p>
<pre><code>f = lambda x: x + 100  # Replace `n` with `100` in return statment in `f1`.
</code></pre>
<p>So, the next two call is pretty straighforward:</p>
<pre><code>print f(1)  # returns `1 + 100` = 101 (Replace `x` with `1`.
print f(3)  # returns `3 + 100` = 103
</code></pre>
<p>So, now you get the relation between <code>x</code> and <code>n</code>. 'x' is replaced by the argument to <code>f</code> and 'n' is replaced by argument to <code>f1</code>.</p>
<blockquote>
<p>Please explain print f1(10)</p>
</blockquote>
<p><code>f1()</code> returns a reference to a lambda function. And that is what it will print. The output is similar to the one which you get in the below snippet:</p>
<pre><code>&gt;&gt;&gt; def func():
        return 5

&gt;&gt;&gt; func
&lt;function func at 0x021F0F30&gt;
</code></pre>
<p>Except that <code>func</code> is replaced with <code>lambda</code>, since f1 returns a lambda function only.</p>
<blockquote>
<p>I thought f(5) will 15 ( 10 + 5)</p>
</blockquote>
<p>You would have got that output, had you re-assigned the return value of <code>f1</code> to <code>f</code> in the previous statement. But, since you have just printed the value of <code>f(10)</code>, <code>f</code> is still binded to - <code>lambda x: x + 100</code>. So you get <code>105</code>.</p>
<p>And then you print the type of <code>f1</code>, which is a function only:</p>
<pre><code>print type(f1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A <code>lambda</code> is pretty much another function. To use it, you have to call it too.</p>
<p>You return the actual lambda to <code>f</code>, not the whole function <code>f1</code>. Along with this, the lambda isn't called when you return it. That is why when you call <code>f(1)</code> and <code>f(3)</code>, it doesn't actually run <code>f1</code>, but only the lambda.</p>
<p>Remember how I said lambdas are like functions? Well <code>x</code> is an argument, while <code>n</code> is the local variable <code>n</code> that you defined in <code>f1</code>.</p>
<p><code>f(5) != 15</code> because you did not actually use <code>f1(10)</code> anywhere. You only printed it. if you did <code>f = f(10)</code>, then it would be <code>15</code>.</p>
<p><code>print f1(10)</code> prints the lambda function (because that is what is being returned). It doesn't call it, just prints it.</p>
</div>
<div class="post-text" itemprop="text">
<p>A lambda is just a way of writing a function on one line.</p>
<p>Initially you may not see the point in them, but they can be useful for generating lots of slightly different functions, or for specifying functions you may only use once, or all other various instances.</p>
<p>To try and understand a little better, imagine the following code - slightly different from your own:</p>
<pre><code>def f2(n):

    def g2(x):
        return x + n

    return g2
</code></pre>
<p>This does very much what your own code does, but by defining a function within the first function and then returning it. This essentially does the same thing as your code.</p>
</div>
<span class="comment-copy">Try to search first before asking any question. refer this link. <a href="http://stackoverflow.com/questions/1085875/what-is-this-lambda-everyone-keeps-speaking-of/1086347#1086347" title="what is this lambda everyone keeps speaking of">stackoverflow.com/questions/1085875/â€¦</a></span>
<span class="comment-copy">@tailor_raj : Well thanks for the link but even after reading that I would have still asked my bit of question because I am looking for certain specific explanation ( python based) and also I DID SEARCH before posting this question!!! I was so expecting elements like you would definitely shout back about integrity of my question, there is always one in almost every single question!!!  So I would say stop discouraging people from asking questions.</span>
<span class="comment-copy">It is not about discouraging people. Because if you search, definitely you will get more then whatever you ask.</span>
<span class="comment-copy">"please let me know what is lambda x: means here". Start at the documentation: <a href="https://docs.python.org/3/reference/expressions.html#lambda" rel="nofollow noreferrer">docs.python.org/3/reference/expressions.html#lambda</a> and follow the links.</span>
<span class="comment-copy">Great explanation. I was exactly looking for this answer. brings lot of clarity on lambda function now. Thanks again. Just a quick one, so within my lambda body, n is like a variable passed onto lambda function by the covering function ( f1 in this case).</span>
<span class="comment-copy">@ramd. Yeah, you can say that.</span>
