<div class="post-text" itemprop="text">
<p>Perhaps I am dated on my information, but I was going to help someone learn an OOP language, concepts, etc.  I wanted to use something dynamic.  My thought was Python but then I read it has no Interfaces.  Isn't an Interface something someone needs to know to learn OOP concepts?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>My thought was Python but then I read it has no Interfaces.</p>
</blockquote>
<p>Well, you <em>can</em> use interfaces in Python. The standard library has the <a href="http://docs.python.org/3/library/abc.html" rel="nofollow"><code>abc</code></a> module, and there are third-party modules like <a href="http://peak.telecommunity.com/PyProtocols.html" rel="nofollow">PyProtocols</a> (and frameworks like Zope and Twisted have their own similar ideas).</p>
<p>The point is that they aren't required, and frequently aren't even necessary. You "wanted to use something dynamic"? That's what it means to be dynamic: Functions take any object with the right interface, without needing that interface to be statically defined anywhere, much less needing the object to statically declare that it supports the interface.</p>
<p>So, when you ask:</p>
<blockquote>
<p>Isn't an Interface something someone needs to know to learn OOP concepts?</p>
</blockquote>
<p>The answer is "No". An Interface is something someone needs to know to learn <em>Java-style OOP</em>, but it's not something someone needs to know to learn OOP in general.</p>
<p>Consider this from a different angle: It's possible, but not easy, to do Javascript-style OOP in Python; as in Java, classes are too fundamental to Python to live without. Does that make Python and Java bad OO languages and Javascript a good one? No; it just makes them different OO languages.</p>
<hr/>
<p>monkut wanted to know "wtf is an interface???"</p>
<p>An interface (aka protocol, abstract base class, abstract type, …) is just a type that can be used for static and/or dynamic type checking and/or switching in exactly same way a class can.</p>
<p>So, what's the good of that? Well, in theory, you should never need to inspect types—that's not just part of the Zen of Python, it's part of core OO dogma as well—but in practice sometimes you do. So, being able to name your abstract types, and declare that a class supports a variety of different abstract types, can be useful. </p>
<p>Of course you could do that with plain old classes, but being able to explicitly declare that a type is abstract can also help with readability and debugging. <a href="http://www.python.org/dev/peps/pep-3119/" rel="nofollow">PEP 3119</a> explains the rationale in a Python-centric way.</p>
<p>But in languages like Java, there's are two additional benefits.</p>
<p>First, if you have static type checking, you can't write a single function that can take, e.g., a list, a tuple, a set, a frozenset, or an iterator. But you can write a function that takes an Iterable, and then declare that list, tuple, etc. all provide the Iterable interface, and then everything is fine. (In a language with dynamic type checking, duck typing already takes care of this for you—your code works with any object that has an <code>__iter__</code> method that returns something that behaves the way you expect it to.)</p>
<p>Second, if you've got static data member layout and/or vtable-style method override mechanism, multiple inheritance is very tricky. But multiple inheritance is also very useful. So in Java, an interface is something just like a class, but with no data members or method implementations, and you can inherit from as many interfaces as you want, but only one class. This gives Java some of the benefits of multiple inheritance, without any of the problems. (In a language with dynamic data members and dynamic method lookup, as long as you have a sensible MRO algorithm, as Python does, you can get all of the benefits of multiple inheritance without any of the problems.)</p>
</div>
<span class="comment-copy">Interfaces are not an OOP concept: <a href="https://en.wikipedia.org/wiki/Object-oriented_programming#Fundamental_features_and_concepts" rel="nofollow noreferrer">OOP Fundamental Features and Conecepts</a> They are just one of the solutions to the problems that can arise from multiple inheritance. And also you can implement interfaces using the <code>abc</code> module in Python.</span>
<span class="comment-copy">wtf is an interface??? (8+ year python tinkerer)</span>
<span class="comment-copy">@monkut: I'll edit my answer to include a response to that, because it's worth asking and answering.</span>
<span class="comment-copy">Does that county for PHP as well?  It has Interfaces doesn't it (I don't know)?  I would use PHP as it is used so much on the Internet but it seems to convoluted and easy to use the funky, special "magic" functions.  I guess any language can be abused.  Maybe PHP 5 is better for OOP.  I just don't get that from what I read.</span>
<span class="comment-copy">From my experience, PHP is not only easy to abuse, it's also hard to use well. But a wide-ranging discussion of the strengths and weaknesses of different languages is outside the scope of what fits well into the SO format…</span>
<span class="comment-copy">@johnny: Sure, static interfaces are an OOP thing. So are duck-typed interfaces. Prototype and class are both OOP things. Multiple-dispatch and self-dispatch are both OOP things. And so on. If you want to learn all of the different corners of all of the different styles that make up OOP, you'll want to learn multiple languages. But for learning the basics of OOP, any of the major OO languages will do.</span>
<span class="comment-copy">@johnny: And yes, I think Python is a good choice for learning OOP. To the extent that "learning OOP" is a good thing in the first place. It's better to learn a variety of different paradigms—OOP, traditional structured programming, traditional functional programming, iterator pipelines, generic programming, typeclass-driven programming, … Unless you're specifically trying to help your friend get a job in the late 90s (in which case there are more fun things to do with your time machine), "learning OOP" isn't what I'd be focusing on.</span>
<span class="comment-copy">@johnny: Jobs that require strong OOP to the exclusion of other paradigms are exactly the jobs that get outsourced to consulting sweatshops in India.</span>
