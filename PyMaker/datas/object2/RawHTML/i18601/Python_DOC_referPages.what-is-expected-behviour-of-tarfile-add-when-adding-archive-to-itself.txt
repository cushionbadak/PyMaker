<div class="post-text" itemprop="text">
<p>The question might sound strange because I know I enforce a strange situation&gt; It came up by accident (a bug one might say) and I even know hot to avoid it, so please skip that part.</p>
<p>I would really like to understand the behaviour I see.</p>
<p>The point of the function is to add all files with a given prefix in a directory to an archive. I noticed that even despite a "bug", the program works correctly (sic!). I wanted to understand why.</p>
<p>The code is fairly simple so I allow myself to post whole function:</p>
<pre><code>def pack(prefix, custom_meta_files = []):
  postfix = 'tgz'  
  if prefix[-1] != '.':
    postfix = '.tgz'

  archive = tarfile.open(prefix+postfix, "w:gz")
  files = filter(lambda path: path.startswith(prefix), os.listdir())
  #print('files: {0}'.format(list(files)))

  for file in files:
    print('packing `{0}`'.format(file))
    archive_name = file[len(prefix):]   #skip prefix + dot
    archive.add(file, archive_name)

  not_doubled_metas = set(custom_meta_files) - set(archive.getnames())
  print('metas to add: {0}'.format(not_doubled_metas))
  for meta in not_doubled_metas:
    print('packing `{0}`'.format(meta))
    archive.add(meta)
  print('contents:{0}'.format(archive.getnames()))
</code></pre>
<p>As one can notice I create the archive with the <code>prefix</code>, and then I create a list of files to pack by by listing everything in <code>cwd</code> and filter it via the lambda. Naturally the archive passes the filter. There is also a snippet to add fixed files if the names do not overlap, although it is not important I think.</p>
<p>So the output from such run is e.g:</p>
<pre><code>packing `ga_run.seq_niche.N30.1.bt0_5K.params`
packing `ga_run.seq_niche.N30.1.bt0_5K.stats`
packing `ga_run.seq_niche.N30.1.bt0_5K.tgz`
metas to add: {'stats.meta'}
packing `stats.meta`
contents:['params', 'stats', 'stats.meta']
</code></pre>
<p>So the script tried adding itself, however it does not appear in the final contents. I do not know what is the expected behaviour, but there is no warning at all and the <a href="http://docs.python.org/3/library/tarfile.html#tarfile.TarFile.add" rel="nofollow">documentation</a> does not mention anything. I read the parts about methods to add members and used search for <code>itself</code> and <code>same name</code>.</p>
<p>I would assume it is automatically skipped, but I don't know how to acutally check it. I would personally expect to add a zero length file as member, however I understand skipping as I makes more sense actually.</p>
<p><strong>Question</strong> Is it a desired behaviour in <code>tarfile.add()</code> to ignore adding the archive to itself? Where is it said?</p>
</div>
<div class="post-text" itemprop="text">
<p>Scanning the <code>tarfile.py</code> code from 3.2 to 2.4 they all have code similar to:</p>
<pre><code># Skip if somebody tries to archive the archive...
if self.name is not None and os.path.abspath(name) == self.name:
    self._dbg(2, "tarfile: Skipped %r" % name)
    return
</code></pre>
</div>
<span class="comment-copy">I could have checked sources, indeed. Now I wonder where does the <code>self._dbg(2, "tarfile: Skipped %r" % name)</code> go. I did not see it. I also feel it could have been documented, but is quite a minor issue probably. However, I think that equivalent shell command, behaves differently. E.g. <a href="http://superuser.com/questions/85699">Super User: tar how to ignore the archive itself</a>. Thus my confusion why it worked, even though I made a mistake =).</span>
