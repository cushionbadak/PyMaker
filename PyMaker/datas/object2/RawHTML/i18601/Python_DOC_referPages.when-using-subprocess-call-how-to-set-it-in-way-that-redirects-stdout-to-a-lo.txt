<div class="post-text" itemprop="text">
<p>I am trying to rewrite this batch line in Python:</p>
<pre><code>mkdir %TEMP%\FW &gt;&gt; %LOGDETAILS% 2&gt;&amp;1
</code></pre>
<p>When using subprocess.call(), how to set it in way that redirects stdout to a log file if you are using the dictionary configuration for logging?</p>
<p>My Python code looks like this so far (this is just part of it):</p>
<pre><code>    DICT_CONFIG = {#I have my settings in here}
    logging.config.dictConfig(DICT_CONFIG)
    logdetails = logging.getLogger('SikuliScriptDetails_Logger')

    def my_function():
        logdetails.info("---------Benginning Tests--------------")
        #Set Project Name, Disable Feedback Dialogs by setting launches to 41
        returncode = subprocess.call(["regedit", "-s", "MainFolder/FwSetup.reg"], stderr = STDOUT, stdout = logdetails)
</code></pre>
<p>I can not test my program for quite a while until I have some other modules ready. But is my attempt at redirection correct? Is this going to be able to log the output of the <code>["regedit", "-s", "MainFolder/FwSetup.reg"]</code> into my logdetails file logger?</p>
<p>Is it necessary for me to do <code>stderr = STDOUT</code> first like I did before sending stdout to logdetails file logger?</p>
<p>Also, does anyone know what the <strong>41</strong> means? I do not know what to do with it.</p>
<p>PS: I've looked at <a href="https://stackoverflow.com/questions/13733552/logger-configuration-to-log-to-file-and-print-to-stdout">this</a> already, but I still don't get it since they are not using dictionary configuration for logging.</p>
<p>UPDATE: PS: I've also looked at <a href="http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/redirection.mspx?mfr=true" rel="nofollow noreferrer">this information</a> to understand the batch line of code.</p>
<p>UPDATE2: Sorry, I gave you the wrong line of code at the beginning. The batch file I was supposed to give paste here is:</p>
<pre><code>"regedit", "-s", "VBoxScripts/FwSetup.reg"
</code></pre>
<p>not this one: <code>mkdir %TEMP%\FW &gt;&gt; %LOGDETAILS% 2&gt;&amp;1</code> Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your question is a bit confused.</p>
<hr/>
<p>First, there's the <code>logging</code> bit. It doesn't matter which mechanism you use for configuring logging; in the end, you still end up with a <code>Logger</code> object with the same methods. What you're doing seems reasonable, although it is a bit weird to use <code>'SikuliScriptDetails_Logger'</code> as a name for a logger.</p>
<hr/>
<p>Next, there's this:</p>
<blockquote>
<p>Is it necessary for me to do stderr = STDOUT first like I did before sending stdout to logdetails file logger?</p>
</blockquote>
<p>Setting <code>stderr=STDOUT</code> means, as <a href="http://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="nofollow">the docs</a> explain:</p>
<blockquote>
<p>… that the stderr data from the child process should be captured into the same file handle as for stdout.</p>
</blockquote>
<p>In other words, if you want to log stdout and stderr together, then yes, you do need to do this; if you want to log just stdout, or just stderr, or to log them each separately, then no, you should not do this.</p>
<p>From your batch line, it sounds like you do want to mix stdout and stderr together, in which case you're doing the right thing.</p>
<hr/>
<p>Finally, there's what you pass for stdout. From the same documentation:</p>
<blockquote>
<p>Valid values are PIPE, DEVNULL, an existing file descriptor (a positive integer), an existing file object, and None.</p>
</blockquote>
<p>In particular, you cannot give it a <code>Logger</code> object; you have to give it a file object or <code>PIPE</code>.</p>
<p>If you just want it to append stdout and stderr to the same file the logger is using, you can get the logger's file object and pass that. However, a much simpler way to do it would be to not use <code>logging</code> in the first place—just <code>open</code> a file, <code>write</code> the header to that, and pass it as the <code>stdout</code> parameter. For example:</p>
<pre><code>with open(log_details_path, 'a') as logfile:
    logfile.write("---------Benginning Tests--------------\n")
    returncode = subprocess.call(["regedit", "-s", "MainFolder/FwSetup.reg"], stdout=logfile, stderr=STDOUT)
</code></pre>
<hr/>
<p>But, given that you're using <code>logging</code> in the first place, it sounds like what you really want is something like this: read each line of stderr, and log it as a separate log message. If so, you need to use a <code>PIPE</code>. If you need to stream it continuously to the log (e.g., it's going to take a long time, send a lot of data, possibly fail in the middle…), you'll need to explicitly <code>read</code> from the <code>PIPE</code> and then log what you get. But if not, you can just use <code>communicate</code>, or even <code>check_output</code>. For example:</p>
<pre><code>child_output = subprocess.check_output(["regedit", "-s", "MainFolder/FwSetup.reg"], stderr = STDOUT)
for line in child_output.splitlines():
    logdetails.info(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Its easy to redirect output to a file, harder to do it through the logging module. Assuming that all you really want is the python equivalent of piping stdout and stderr to a file, you can do:</p>
<pre><code>log_details = "SikuliScriptDetails.log"
returncode = subprocess.call(
    ["regedit", "-s", "MainFolder/FwSetup.reg"],
    stdout=open(log_details, 'a'), 
    stderr=subprocess.STDOUT)
</code></pre>
<p>You can use a with clause if you worry about the file closing:</p>
<pre><code>log_details = "SikuliScriptDetails.log"
with open(log_details, 'a') as log_fp:
    returncode = subprocess.call(
        ["regedit", "-s", "MainFolder/FwSetup.reg"],
        stdout=log_fp, 
        stderr=subprocess.STDOUT)
</code></pre>
<p>If you want to log stdout as info and stderr as warn, you can use threads:</p>
<pre><code>import threading
import subprocess

def log_thread(pipe, logger):
    for line in pipe:
        logger(line.strip())

def my_call(logger, cmd, **kw):
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
        **kw)
    stdout = threading.Thread(target=log_thread, args=(proc.stdout, logger.info))
    stdout.start()
    stderr = threading.Thread(target=log_thread, args=(proc.stderr, logger.warn))
    stderr.start()
    stdout.join()
    stderr.join()
    return proc.wait()
</code></pre>
</div>
<span class="comment-copy">This is a very confusing question! You say you want to do 'mkdir' in python (the answer is to use os.mkdir or perhaps os.makedirs) but then you call regedit. Do you want to use the logging module or just redirect the output to a file?</span>
<span class="comment-copy">Why are you using the <code>logging</code> module in the first place, if all you're trying to do is redirect output to a file?</span>
<span class="comment-copy">I want to record/log all that the child process generates.</span>
<span class="comment-copy">@tdelaney I want to use the logging module.</span>
<span class="comment-copy">@Alain: Well, the <code>logging</code> module is not going to do the same thing as your batch example. Using <code>logging</code> will add standard log headers to each log message; your batch example just appends the output (and error) unmodified to a text file. So, a question that says "I'm trying to rewrite this batch file" and then shows you trying to use <code>logging</code> is bound to confuse people. You have to explain what you actually want to do, or nobody can tell you how to do it.</span>
<span class="comment-copy">Your answer is the closest to what I am intending to do. Thank you for the clear explanation you provided me with. It is the last part of your answer that seems like what I need to implement. But why do I need to add the <code>returncode = subprocess.call(["regedit", "-s", "MainFolder/FwSetup.reg"], stderr = STDOUT, stdout=logfile)</code> again at the end?</span>
<span class="comment-copy">Sorry, mistake in editing… let me fix it.</span>
<span class="comment-copy">Great! I will make sure I come here if the other <a href="http://stackoverflow.com/a/18067154/2540349">piece of code</a> doesn't do it. Thanks.</span>
<span class="comment-copy">This is quite handy. I wish I had seen such instruction as I started my current project. So, thank you for sharing. Nonetheless, for this very step of the project, I will be making plenty of <code>subprocess.call()</code> (or <code>subprocess.Popen()</code> when necessary) and wish to be able to do with each one of them what the following batch code does with the <code>LOGDETAILS = V\SikuliScriptDetails.log</code> file:  <code>regedit -s VBoxScripts\FwSetup.reg &gt;&gt; %LOGDETAILS% 2&gt;&amp;1</code></span>
<span class="comment-copy">@Alain, I changed the first example to append to the log file. It now does the same thing as your shell example. Your log file name isn't quite correct (those slashes at the front) so I just used one in the local directory. Change it to what you want.</span>
<span class="comment-copy">@Alain, if you want to use the second sample, you need to setup your log handlers separately. This just showed how to get the output into the logger.</span>
<span class="comment-copy">I will be glad to comfirm as soon as I get the first sample to work. It looks easier to manage when making multiple <code>subprocess.call()</code>'s. So thank you. I will go ahead and vote the answer as the most promising.</span>
<span class="comment-copy">In the first example, Do I need to close() log_details? Do I need to close it before I append any more stuff to it from another subprocess.call()?</span>
