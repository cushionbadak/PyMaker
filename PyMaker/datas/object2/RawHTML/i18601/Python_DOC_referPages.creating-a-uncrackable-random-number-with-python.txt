<div class="post-text" itemprop="text">
<p>It has been said that Python's random number generator relies on </p>
<pre><code>time
</code></pre>
<p>which means if i wanted to create a random number like this</p>
<pre><code>23987429038409238409283
</code></pre>
<p>and store it into the browser cookies for "authentication"</p>
<p>it is possible some one can find this number based on "time".</p>
<p>so the question is, how do i create a random number that can not be guessed by others that know a-lot about codes. ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>random.SystemRandom</code> if it's available on your system:</p>
<p><a href="http://docs.python.org/2/library/random.html#random.SystemRandom">http://docs.python.org/2/library/random.html#random.SystemRandom</a></p>
<blockquote>
<p>Class that uses the <code>os.urandom()</code> function for generating random numbers from sources provided by the operating system. Not available on all systems. Does not rely on software state and sequences are not reproducible. </p>
</blockquote>
<p><a href="http://docs.python.org/2/library/os.html#os.urandom">http://docs.python.org/2/library/os.html#os.urandom</a></p>
<blockquote>
<p>Return a string of n random bytes suitable for cryptographic use.</p>
<p>This function returns random bytes from an OS-specific randomness source. The returned data should be unpredictable enough for cryptographic applications, though its exact quality depends on the OS implementation. </p>
</blockquote>
<p>e.g.</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; import random
&gt;&gt;&gt; rng = random.SystemRandom()
&gt;&gt;&gt; rng.random()
0.7195432667967437
&gt;&gt;&gt; rng.randint(0, sys.maxint)
3614556690529452993
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/secrets.html" rel="nofollow noreferrer"><code>secrets</code></a> module was added in Python 3.6. All functions in that module are tuned specifically for use in cryptography.</p>
<blockquote>
<p>The <code>secrets</code> module is used for generating cryptographically strong random numbers suitable for managing data such as passwords, account authentication, security tokens, and related secrets.</p>
<p>In particularly, <code>secrets</code> should be used in preference to the default pseudo-random number generator in the <code>random</code> module, which is designed for modelling and simulation, not security or cryptography.</p>
</blockquote>
<p>The module now aliases <code>random.SystemRandom</code> as <code>secrets.SystemRandom</code> but adds some more functions - like the <a href="https://docs.python.org/3/library/secrets.html#generating-tokens" rel="nofollow noreferrer">token creation functions</a>. If you're generating a value to be stored in cookies, you should use <a href="https://docs.python.org/3/library/secrets.html#secrets.token_urlsafe" rel="nofollow noreferrer"><code>secrets.token_urlsafe</code></a>, which</p>
<blockquote>
<p>[Returns] a random URL-safe text string, containing nbytes random bytes. The text is Base64 encoded, so on average each byte results in approximately 1.3 characters. If nbytes is <code>None</code> or not supplied, a reasonable default is used.</p>
</blockquote>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; import secrets
&gt;&gt;&gt; secrets.token_urlsafe()
'Ljb7OyMt4QDXp6YObVfRi5S8h_UMykz-s8hMY_9dQP4'
</code></pre>
<p>Please bear in mind that future Python versions can consider the <em>reasonable default</em> to be more bytes, so if you're storing this into a database column do not set too low a limit for it, or perhaps don't limit the token length at all.</p>
</div>
<span class="comment-copy">This is a valid and simple question on python, with a simple answer that is <code>random.SystemRandom</code>, so to call to close this off by too broad is just plain silly.</span>
<span class="comment-copy">closed by hackers who don't want us to know how to do this?</span>
<span class="comment-copy">What a stupid reason to close a question!  Too broad?  There is one, and only one, answer.   In an application language, use the tool provided for 'truly random'.   Is there anyway to remove the Karma people get for closing questions?</span>
<span class="comment-copy">rng.randint(0, sys.maxsize) in python3</span>
