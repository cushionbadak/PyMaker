<div class="post-text" itemprop="text">
<p>I am trying to figure out how I can count the uppercase letters in a string.  </p>
<p>I have only been able to count lowercase letters:</p>
<pre><code>def n_lower_chars(string):
    return sum(map(str.islower, string))
</code></pre>
<p>Example of what I am trying to accomplish:</p>
<pre><code>Type word: HeLLo                                        
Capital Letters: 3
</code></pre>
<p>When I try to flip the function above, It produces errors:</p>
<pre><code>def n_upper_chars(string):
    return sum(map(str.isupper, string))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this with <a href="https://docs.python.org/3/library/functions.html#sum"><code>sum</code></a>, a <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression">generator expression</a>, and <a href="https://docs.python.org/3/library/stdtypes.html#str.isupper"><code>str.isupper</code></a>:</p>
<pre><code>message = input("Type word: ")

print("Capital Letters: ", sum(1 for c in message if c.isupper()))
</code></pre>
<p>See a demonstration below:</p>
<pre><code>&gt;&gt;&gt; message = input("Type word: ")
Type word: aBcDeFg
&gt;&gt;&gt; print("Capital Letters: ", sum(1 for c in message if c.isupper()))
Capital Letters:  3
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>len</code>Â and <code>filter</code> :</p>
<pre><code>import string
value = "HeLLo Capital Letters"
len(filter(lambda x: x in string.uppercase, value))
&gt;&gt;&gt; 5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>re</code>:</p>
<pre><code>import re
string = "Not mAnY Capital Letters"
len(re.findall(r'[A-Z]',string))
</code></pre>
<blockquote>
<p><em>5</em></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>from string import ascii_uppercase
count = len([letter for letter in instring if letter in ascii_uppercase])
</code></pre>
<p>This is not the fastest way, but I like how readable it is.  Another way, without importing from string and with similar syntax, would be:</p>
<pre><code>count = len([letter for letter in instring if letter.isupper()])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works</p>
<pre><code>s = raw_input().strip()
count = 1
for i in s:
    if i.isupper():
        count = count + 1
print count
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The (slightly) fastest method for this actually seems to be membership testing in a frozenset</p>
<pre><code>import string
message='FoObarFOOBARfoobarfooBArfoobAR'
s_upper=frozenset(string.uppercase)

%timeit sum(1 for c in message if c.isupper())
&gt;&gt;&gt; 100000 loops, best of 3: 5.75 us per loop

%timeit sum(1 for c in message if c in s_upper)
&gt;&gt;&gt; 100000 loops, best of 3: 4.42 us per loop
</code></pre>
</div>
<span class="comment-copy">Have you tried anything?</span>
<span class="comment-copy">First, welcome to <code>stackoverflow</code>. Even though your question is clear, you not provided any code. Google it first and try to write some code. If are stuck, then post the code here.</span>
<span class="comment-copy">Its very easy, asking such type of question is just showing that you hadn't put your effort. Not even on google.</span>
<span class="comment-copy">I understand, I am still learning the basics. I couldn't find resources on google. I didn't even know where to begin all I had was input() and print()</span>
<span class="comment-copy">@Stevenson: Begin by reading the <a href="http://www.python.org/doc/" rel="nofollow noreferrer">documentation</a>. The tutorial might be the right way to go.</span>
<span class="comment-copy">Not that it matters that much, but why not <code>%d</code> instead of <code>%s</code> ?</span>
<span class="comment-copy"><code>%s</code> calls str() (so overhead) on it's argument... <code>%d</code> is the same as <code>%i</code> and 1) makes more sense for an integer argument, and 2) it's easier to adjust to throw in <code>%03d</code> etc...</span>
<span class="comment-copy">nice! but what about: <code>sum(1 for x in message if x.isupper() )</code> ? I know that True is '1', but seems more elegant to sum integers but booleans, or not?</span>
<span class="comment-copy">Yup - I would also go for the <code>(sum 1 for x...</code> approach to make it explicit rather than counting on the nature that booleans happen to have (due to historic reasons) 0/1 integer values ;)</span>
<span class="comment-copy">Since the OP is clearly new to python, shouldn't we be showing them the newer string formatting method (<code>'{}'.format()</code>) instead of the old method that is set to be depreciated in some future version?</span>
<span class="comment-copy">@Keyser : correct, I read too fast and though Capital Letters was in the example. (which it appears to be a few minutes ago)</span>
<span class="comment-copy">I agree. With this I can see whats going on.</span>
<span class="comment-copy">@Stevenson You can also use <code>uppercase</code> instead of <code>ascii_uppercase</code> if you find that more readable too.  You can read about the differences between the two <a href="http://docs.python.org/2/library/string.html#string-constants" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">Awesome..That give me a better understanding! great link</span>
