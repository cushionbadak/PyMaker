<div class="post-text" itemprop="text">
<p>In order to make my own tile based rpg, I have a question.
I have a dictionary where I want, during the creation of my tile map, to store pairs of tile type/ rect values e.g. </p>
<pre><code>{1: rect(0, 0, 32, 32), 2: rect(0, 32, 32, 32)}
</code></pre>
<p>My problem now is that I have to give every key multiple values, since there is only a limited
number of tile types but multiple tiles of each type.
So I tried this:</p>
<pre><code>def create(self):
    x, y = 0, 0
    for row in self.matrix:
        for tile in row:
            self.surface.blit(tiles[int(tile)].img, (x-camerax, y-cameray))
            tiles[int(tile)].rect = pygame.Rect(x-camerax, y-cameray, 32, 32)
            if numbers[tiles[int(tile)]] not in collision_list:
                collision_list[numbers[tiles[int(tile)]]] = tiles[int(tile)].rect
            else:
                dummytuple = collision_list[numbers[tiles[int(tile)]]]
                collision_list[numbers[tiles[int(tile)]]] = dummytuple, tiles[int(tile)].rect
            x += 32
            if x &gt;= self.surface.get_width():
                y += 32
                x = 0
</code></pre>
<p>Might be a bit complicated since I'm not very good at writing simple code.
My problem is in the if else statements. I use them to check whether one type of tile in the dictionary <code>collide_list</code> already has one or multiple rects assigned.
If so, the existing rect should be added as a second value to the key. This kind of works, but prints out this in the shell:</p>
<pre><code>(((((((((((((((((((((((((((&lt;rect(0, 0, 32, 32)&gt;, &lt;rect(32, 0, 32, 32)&gt;), &lt;rect(64, 0, 32, 32)&gt;), &lt;rect(96, 0, 32, 32)&gt;), &lt;rect(128, 0, 32, 32)&gt;), &lt;rect(160, 0, 32, 32)&gt;), &lt;rect(192, 0, 32, 32)&gt;), &lt;rect(224, 0, 32, 32)&gt;), &lt;rect(256, 0, 32, 32)&gt;), &lt;rect(288, 0, 32, 32)&gt;), &lt;rect(320, 0, 32, 32)&gt;), &lt;rect(352, 0, 32, 32)&gt;), &lt;rect(384, 0, 32, 32)&gt;), &lt;rect(416, 0, 32, 32)&gt;), &lt;rect(448, 0, 32, 32)&gt;), &lt;rect(0, 32, 32, 32)&gt;), &lt;rect(160, 32, 32, 32)&gt;), &lt;rect(192, 32, 32, 32)&gt;), &lt;rect(224, 32, 32, 32)&gt;), &lt;rect(256, 32, 32, 32)&gt;), &lt;rect(288, 32, 32, 32)&gt;), &lt;rect(320, 32, 32, 32)&gt;), &lt;rect(352, 32, 32, 32)&gt;), &lt;rect(384, 32, 32, 32)&gt;), &lt;rect(416, 32, 32, 32)&gt;), &lt;rect(448, 32, 32, 32)&gt;), &lt;rect(0, 64, 32, 32)&gt;), &lt;rect(32, 64, 32, 32)&gt;)
</code></pre>
<p></p>
<p>This is only for one key (sorry for spamming). This is VERY complicated to read and very hard to work with later on.
Isn't there a better possibility of concatenating a value to an existing value in a dictionary?
Any help is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are collecting the existing tuple, then creating a <em>new</em> tuple with that existing tuple nested into it:</p>
<pre><code>dummytuple = collision_list[numbers[tiles[int(tile)]]]
collision_list[numbers[tiles[int(tile)]]] = dummytuple, tiles[int(tile)].rect
</code></pre>
<p>Instead, <em>append</em> a new one-element tuple:</p>
<pre><code>dummytuple = collision_list[numbers[tiles[int(tile)]]]
collision_list[numbers[tiles[int(tile)]]] = dummytuple + (tiles[int(tile)].rect,)
</code></pre>
<p>You certainly should leave your one-element values to be just a rectangle, start with a one-element tuple:</p>
<pre><code>if numbers[tiles[int(tile)]] not in collision_list:
    collision_list[numbers[tiles[int(tile)]]] = (tiles[int(tile)].rect,)
else:
    dummytuple = collision_list[numbers[tiles[int(tile)]]]
    collision_list[numbers[tiles[int(tile)]]] = dummytuple + (tiles[int(tile)].rect,)
</code></pre>
<p>or, much better still, use a list, you are after all altering it constantly:</p>
<pre><code>if numbers[tiles[int(tile)]] not in collision_list:
    collision_list[numbers[tiles[int(tile)]]] = [tiles[int(tile)].rect]
else:
    collision_list[numbers[tiles[int(tile)]]].append(tiles[int(tile)].rect)
</code></pre>
<p>If you make <code>collision_list</code> a <a href="http://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>collections.defaultdict</code> object</a> you don't even have to test for the key first:</p>
<pre><code>from collections import defaultdict

collision_list = defaultdict(list)

# ....

# No `if numbers[tiles[int(tile)]] not in collision_list` needed
collision_list[numbers[tiles[int(tile)]]].append(tiles[int(tile)].rect)
</code></pre>
</div>
