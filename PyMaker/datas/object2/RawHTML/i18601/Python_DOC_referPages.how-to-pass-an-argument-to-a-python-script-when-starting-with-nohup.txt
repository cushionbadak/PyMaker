<div class="post-text" itemprop="text">
<p>I need to start a python script with bash using nohup passing an arg that aids in defining a constant in a script I import.  There are lots of questions about passing args but I haven't found a successful way using nohup.  </p>
<p>a simplified version of my bash script: </p>
<pre><code>#!/bin/bash

BUCKET=$1
echo $BUCKET
script='/home/path/to/script/script.py'
echo "starting $script with nohup"
nohup /usr/bin/python $script $BUCKET &amp;
</code></pre>
<p>the relevant part of my config script i'm importing: </p>
<pre><code>FLAG = sys.argv[0]
if FLAG == "b1": 
    AWS_ACCESS_KEY_ID = "key"
    BUCKET = "bucket1" 
    AWS_SECRET_ACCESS_KEY = "secret"
elif FLAG == "b2": 
    AWS_ACCESS_KEY_ID = "key"
    BUCKET = "bucket2"
    AWS_SECRET_ACCESS_KEY = "secret"
else:
    AWS_ACCESS_KEY_ID = "key"
    BUCKET = "bucket3"
    AWS_SECRET_ACCESS_KEY = "secret"
</code></pre>
<p>the script thats using it: </p>
<pre><code>from config import BUCKET, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY

#do stuff with the values.  
</code></pre>
<p>Frankly, since I'm passing the args to script.py, I'm not confident that they'll be in scope for the import script.  That said, when I take a similar approach without using nohup, it works.  </p>
</div>
<div class="post-text" itemprop="text">
<p>In general, the argument vector for any program starts with the program itself, and then all of its arguments and options. Depending on the language, the program may be <code>sys.argv[0]</code>, <code>argv[0]</code>, <code>$0</code>, or something else, but it's basically always argument #0.</p>
<p>Each program whose job is to run another program—like <code>nohup</code>, and like the Python interpreter itself—generally drops itself and all of its own options, and gives the target program the rest of the command line.</p>
<p>So, <a href="http://linux.die.net/man/1/nohup" rel="nofollow"><code>nohup</code></a> takes a <code>COMMAND</code> and zero or more <code>ARGS</code>. Inside that <code>COMMAND</code>, <code>argv[0]</code> will be <code>COMMAND</code> itself (in this case, <code>'/usr/bin/python'</code>), and <code>argv[1]</code> and later will be the additional arguments (<code>'/home/path/to/script/script.py'</code> and whatever <code>$BUCKET</code> resolves to).</p>
<p>Next, Python takes zero or more options, a script, and zero or more args to that script, and exposes the script and its args as <a href="http://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow"><code>sys.argv</code></a>. So, in your script, <code>sys.argv[0]</code> will be <code>'/home/path/to/script/script.py'</code>, and <code>sys.argv[1]</code> will be whatever <code>$BUCKET</code> resolves to.</p>
<p>And <code>bash</code> works similarly to Python; <code>$1</code> will be the first argument to the bash wrapper script (<code>$0</code> will be the script itself), and so on. So, <code>sys.argv[1]</code> in the inner Python script will end up getting the first argument passed to the bash wrapper script.</p>
<p>Importing doesn't affect <code>sys.argv</code> at all. So, in both your <code>config</code> module and your top-level script, if you <code>import sys</code>, <code>sys.argv[1]</code> will hold the <code>$1</code> passed to the bash wrapper script.</p>
<p>(On some platforms, in some circumstances <code>argv[0]</code> may not have the complete path, or may even be empty. But that isn't relevant here. What you care about is the eventual <code>sys.argv[1]</code>, and <code>bash</code>, <code>nohup</code>, and <code>python</code> are all guaranteed to pass that through untouched.)</p>
</div>
<span class="comment-copy">I find it strange that this would ever work. <code>sys.argv[0]</code> is the script name, not the first argument.</span>
<span class="comment-copy">very clear answer.  thank you.  my mistake is basically not understanding that the script is the first arg.</span>
<span class="comment-copy">@Brad: Ah, maybe I can explain that better.</span>
<span class="comment-copy">man.  wish i could upvote more than once. thank you. incredibly helpful</span>
