<div class="post-text" itemprop="text">
<p>I'm trying to write a function, in an elegant way, that will group a list of dictionaries and aggregate (sum) the values of like-keys.</p>
<p><strong>Example:</strong></p>
<pre><code>my_dataset = [  
    {
        'date': datetime.date(2013, 1, 1),
        'id': 99,
        'value1': 10,
        'value2': 10
    },
    {
        'date': datetime.date(2013, 1, 1),
        'id': 98,
        'value1': 10,
        'value2': 10
    },
    {
        'date': datetime.date(2013, 1, 2),
        'id' 99,
        'value1': 10,
        'value2': 10
    }
]

group_and_sum_dataset(my_dataset, 'date', ['value1', 'value2'])

"""
Should return:
[
    {
        'date': datetime.date(2013, 1, 1),
        'value1': 20,
        'value2': 20
    },
    {
        'date': datetime.date(2013, 1, 2),
        'value1': 10,
        'value2': 10
    }
]
"""
</code></pre>
<p>I've tried doing this using itertools for the groupby and summing each like-key value pair, but am missing something here. Here's what my function currently looks like:</p>
<pre><code>def group_and_sum_dataset(dataset, group_by_key, sum_value_keys):
    keyfunc = operator.itemgetter(group_by_key)
    dataset.sort(key=keyfunc)
    new_dataset = []
    for key, index in itertools.groupby(dataset, keyfunc):
        d = {group_by_key: key}
        d.update({k:sum([item[k] for item in index]) for k in sum_value_keys})
        new_dataset.append(d)
    return new_dataset
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>collections.Counter</code> and <code>collections.defaultdict</code>.</p>
<p>Using a dict this can be done in <code>O(N)</code>, while sorting requires <code>O(NlogN)</code> time.</p>
<pre><code>from collections import defaultdict, Counter
def solve(dataset, group_by_key, sum_value_keys):
    dic = defaultdict(Counter)
    for item in dataset:
        key = item[group_by_key]
        vals = {k:item[k] for k in sum_value_keys}
        dic[key].update(vals)
    return dic
... 
&gt;&gt;&gt; d = solve(my_dataset, 'date', ['value1', 'value2'])
&gt;&gt;&gt; d
defaultdict(&lt;class 'collections.Counter'&gt;,
{
 datetime.date(2013, 1, 2): Counter({'value2': 10, 'value1': 10}),
 datetime.date(2013, 1, 1): Counter({'value2': 20, 'value1': 20})
})
</code></pre>
<p>The advantage of <code>Counter</code> is that it'll automatically sum the values of similar keys.:</p>
<p><strong>Example:</strong></p>
<pre><code>&gt;&gt;&gt; c = Counter(**{'value1': 10, 'value2': 5})
&gt;&gt;&gt; c.update({'value1': 7, 'value2': 3})
&gt;&gt;&gt; c
Counter({'value1': 17, 'value2': 8})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thanks, I forgot about Counter. I still wanted to maintain the output format and sorting of my returned dataset, so here's what my final function looks like:</p>
<pre><code>def group_and_sum_dataset(dataset, group_by_key, sum_value_keys):

    container = defaultdict(Counter)

    for item in dataset:
        key = item[group_by_key]
        values = {k:item[k] for k in sum_value_keys}
        container[key].update(values)

    new_dataset = [
        dict([(group_by_key, item[0])] + item[1].items())
            for item in container.items()
    ]
    new_dataset.sort(key=lambda item: item[group_by_key])

    return new_dataset
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's an approach using <a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>more_itertools</code></a> where you simply focus on how to construct output.</p>
<p><strong>Given</strong></p>
<pre><code>import datetime
import collections as ct

import more_itertools as mit


dataset = [
    {"date": datetime.date(2013, 1, 1), "id": 99, "value1": 10, "value2": 10},
    {"date": datetime.date(2013, 1, 1), "id": 98, "value1": 10, "value2": 10},
    {"date": datetime.date(2013, 1, 2), "id": 99, "value1": 10, "value2": 10}
]
</code></pre>
<p><strong>Code</strong> </p>
<pre><code># Step 1: Build helper functions    
kfunc = lambda d: d["date"]
vfunc = lambda d: {k:v for k, v in d.items() if k.startswith("val")}
rfunc = lambda lst: sum((ct.Counter(d) for d in lst), ct.Counter())

# Step 2: Build a dict    
reduced = mit.map_reduce(dataset, keyfunc=kfunc, valuefunc=vfunc, reducefunc=rfunc)
reduced
</code></pre>
<p>Output</p>
<pre><code>defaultdict(None,
            {datetime.date(2013, 1, 1): Counter({'value1': 20, 'value2': 20}),
             datetime.date(2013, 1, 2): Counter({'value1': 10, 'value2': 10})})
</code></pre>
<p>The items are grouped by date and pertinent values are reduced as <code>Counters</code>. </p>
<hr/>
<p><strong>Details</strong></p>
<p><em>Steps</em></p>
<ol>
<li>build helper functions to customize construction of <em>keys</em>, <em>values</em> and <em>reduced</em> values in the final <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a>. Here we want to:

<ul>
<li>group by date (<code>kfunc</code>)</li>
<li>built dicts keeping the "value*" parameters (<code>vfunc</code>)</li>
<li>aggregate the dicts (<code>rfunc</code>) by converting to <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counters</code></a> and <a href="https://pymotw.com/3/collections/counter.html#arithmetic" rel="nofollow noreferrer">summing them</a>.  See an equivalent <code>rfunc</code> below<sup>+</sup>.</li>
</ul></li>
<li>pass in the helper functions to <a href="https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.map_reduce" rel="nofollow noreferrer"><code>more_itertools.map_reduce</code></a>.  </li>
</ol>
<p><em>Simple Groupby</em></p>
<blockquote>
<p>... say in that example you wanted to group by id and date?</p>
</blockquote>
<p>No problem.</p>
<pre><code>&gt;&gt;&gt; kfunc2 = lambda d: (d["date"], d["id"])
&gt;&gt;&gt; mit.map_reduce(dataset, keyfunc=kfunc2, valuefunc=vfunc, reducefunc=rfunc)
defaultdict(None,
            {(datetime.date(2013, 1, 1),
              99): Counter({'value1': 10, 'value2': 10}),
             (datetime.date(2013, 1, 1),
              98): Counter({'value1': 10, 'value2': 10}),
             (datetime.date(2013, 1, 2),
              99): Counter({'value1': 10, 'value2': 10})})
</code></pre>
<p><em>Customized Output</em></p>
<p>While the resulting data structure clearly and concisely presents the outcome, the OP's expected output can be rebuilt as a simple list of dicts:</p>
<pre><code>&gt;&gt;&gt; [{**dict(date=k), **v} for k, v in reduced.items()]
[{'date': datetime.date(2013, 1, 1), 'value1': 20, 'value2': 20},
 {'date': datetime.date(2013, 1, 2), 'value1': 10, 'value2': 10}]
</code></pre>
<p>For more on <code>map_reduce</code>, see <a href="https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.map_reduce" rel="nofollow noreferrer">the docs</a>.  Install via <code>&gt; pip install more_itertools</code>.</p>
<p><sup>+</sup>An equivalent reducing function:</p>
<pre><code>def rfunc(lst: typing.List[dict]) -&gt; ct.Counter:
    """Return reduced mappings from map-reduce values."""
    c = ct.Counter()
    for d in lst:
        c += ct.Counter(d)
    return c
</code></pre>
</div>
<span class="comment-copy">This is awesome! Do you have any thoughts on grouping by 2 fields? Like say in that example you wanted to group by id and date?  Right now my idea is to concatenate the two fields into one, but it doesn't seem very elegant.</span>
