<div class="post-text" itemprop="text">
<p>I've got a list of Django Querysets that I'd like to combine into a single Query. The standard way of merging two Querysets is to perform the operation: <code>newQ = Q1 | Q2</code>, and I'd like to perform that operation on all elements of my list to form a single Queryset object.</p>
<p>This is pretty straightforward to do using a for loop, eg:</p>
<pre><code>for qs in qs_list:
    if final_qs not in locals():
        final_qs = qs
    else:
        final_qs = final_qs | qs  
</code></pre>
<p>Given the wonders of python it feels as though there is probably an inbuilt function of some kind that will do this for you. However, I had a look through the <code>itertools</code> library and nothing jumped out as a way of simplifying this operation.</p>
<p>So my question is, is there a more pythonic way of performing the above operation?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, that function is called <a href="http://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow"><code>functools.reduce()</code></a>.  Use it with <a href="http://docs.python.org/2/library/operator.html#operator.or_" rel="nofollow"><code>operator.or_()</code></a>:</p>
<pre><code>import operator
from functools import reduce

final_qs = reduce(operator.or_, qs_list)
</code></pre>
<p><code>reduce()</code> takes the first to values of <code>qs_list</code>, passes those to the first argument, <code>operator.or_</code>, effectively executing <code>qs_list[0] | qs_list[1]</code>. It then takes that result, plus the next value in <code>qs_list</code> and applies the first argument again, and so on until <code>qs_list</code> is done.</p>
<p>For <code>qs_list</code> with 4 elements, that comes down to:</p>
<pre><code>or_(or_(or_(qs_list[0], qs_list[1]), qs_list[2]), qs_list[3])
</code></pre>
<p>or the equivalent of:</p>
<pre><code>qs_list[0] | qs_list[1] | qs_list[2] | qs_list[3]
</code></pre>
<p>but reduce works for any length of <code>qs_list</code> &gt; 0 (for a list of length 1 the first value is returned without applying the first argument).</p>
<p>Note that your use of <code>if final_qs not in locals()</code> is very unpythonic; don't ever do that. You could have written your loop with an initial <code>final_qs</code> from <code>qs_list[0]</code> instead:</p>
<pre><code>final_qs = qs_list[0]
for qs in qs_list[1:]:
    final_qs |= qs
</code></pre>
</div>
<span class="comment-copy">The canonical Python way is already given in the Martijn answer, but this <code>final_qs not in locals()</code> trick (you probably meant quoted identifier <code>'final_qs'</code>) made me shudder. In case of empty <code>qs_list</code> that will leave you with unbound local <code>final_qs</code> with catastrophic consequences. Explicitly assigning before the loop "no value yet" value such as <code>None</code> is better. Starting with an operation identity element (empty <code>QuerySet</code>) and altogether avoiding conditions in loop body is the best.</span>
