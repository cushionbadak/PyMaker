<div class="post-text" itemprop="text">
<p>Let's say I have this code:</p>
<pre><code>foo = int(input("Number"))
bar = int(input("Number"))
for number in range(0, 10):
    if foo*bar &gt; 0:
        print("hello")
</code></pre>
<p>But, I could also have this code:</p>
<pre><code>foo = int(input("Number"))
bar = int(input("Number"))
top = foo*bar
for number in range(0, 10):
    if top &gt; 0:
        print("hello")
</code></pre>
<p>Which one is faster?</p>
<p>Using Python 3.</p>
<hr/>
<p>I realize that <a href="https://stackoverflow.com/questions/2821140/calling-a-getter-multiple-times-or-calling-once-and-assigning-to-a-variable">this</a> question is similar, however, it's for Java, and Python may be different. Additonally, they're asking about memory efficiency whereas I am asking about processor efficiency.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just so we can end this already, here is the answer. Using <code>timeit</code> on my computer we get the results as...</p>
<p>Do the multiplication in the loop every time:</p>
<pre><code>$ python -m timeit 'for _ in xrange(10): 10 * 20 &gt; 0'
1000000 loops, best of 3: 1.3 usec per loop
</code></pre>
<p>Do the multiplication outside the loop:</p>
<pre><code>$ python -m timeit 'foo = 10 * 20
&gt; for _ in xrange(10): foo &gt; 0'
1000000 loops, best of 3: 1.07 usec per loop
</code></pre>
<p>Running the multiplication outside the loop instead of inside of it saves us 0.23 microseconds - about 18%.</p>
<p>Note that I'm using Python 2.7.10 on a 2007 iMac (2.4 GHz) running OS X 10.11.0, developer preview 7. Your exact results may vary with Python version, hardware, OS Version, CPU... other applications you have running (just Safari with 3 tabs in my case). But you should comparably see that storing the number in a variable is trivial compared to repeatedly performing the same operation and discarding the results every time.</p>
<p>In the future, OP, please just use <code>timeit</code>. It comes built in with Python for doing performance checks just like this. See the documentation here: <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow">https://docs.python.org/3/library/timeit.html</a> (On that note, do not fear the documentation. Read them. If you have questions, ask them on Stack Overflow - you may reveal short-comings in the documentation where they need to be improved/clarified. Or at the very least, your questions will be answered and you'll know more afterwards than you did before.)</p>
</div>
<span class="comment-copy">I fail to see where you're doing division multiple times there...</span>
<span class="comment-copy">Why don't you <code>timeit</code> and find out?</span>
<span class="comment-copy">Using Python 3 this leads to an <code>TypeError</code>, you cannot multiply strings. Aside of this, on slow displays, first will be faster, because it prints one Hello less.</span>
<span class="comment-copy">So why don't you show code, that is correct and more realistic?</span>
<span class="comment-copy">I see this all the time. Somebody asks something like is ++i faster than i++ which if it makes a difference at all is like a nanosecond, and they do it in a loop with a <code>print</code> statement that make milliseconds. So the <code>print</code> takes 99.99999% of the time, but they don't think of that. They're focusing on the gnat's eyelash.</span>
<span class="comment-copy">I really shouldn't have asked in the first place, since the answer is intuitive, but I guess I wanted to know if <i>maybe</i> it wasn't. I'm not so scared of docs as I tend to find them hard to read, and it was my mistake to post here first instead of looking around. Timeit seems useful -- I just tested it on this question, and the results seem inconclusive, but that's beside the point at this state of the question. Overall, my rep is hurting from this question, but I learned some. So thank you guys, and thank you for doing the test and finishing this.</span>
