<div class="post-text" itemprop="text">
<p>I am using <code>itertools</code> to run a numerical simulation iterating over all possible combinations of my input parameters. In the example below, I have two parameters and six possible combinations:</p>
<pre><code>import itertools

x = [0, 1]
y = [100, 200, 300]

myprod = itertools.product(x, y)

for p in myprod:
    print p[0], p[1]
    # run myfunction using p[0] as the value of x and p[1] as the value of y
</code></pre>
<p>How can I get the size of <code>myprod</code> (six, in the example)? I'd need to print this before the <code>for</code> loop starts.</p>
<p>I understand <code>myprod</code> is not a list. I can calculate <code>len(list(myprod))</code>, but this consumes the iterator so the <code>for</code> loop no longer works.</p>
<p>I tried:</p>
<pre><code>myprod2=copy.deepcopy(myprod)
mylength = len(list(myprod2))
</code></pre>
<p>but this doesn't work, either. I could do:</p>
<pre><code>myprod2=itertools.product(x,y)
mylength = len(list(myprod2))
</code></pre>
<p>but it's hardly elegant and pythonic!</p>
</div>
<div class="post-text" itemprop="text">
<p>To implement <a href="https://stackoverflow.com/a/32074568/3001761">Kevin's answer</a> for an arbitrary number of source iterables, combining <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="noreferrer"><code>reduce</code></a> and <a href="https://docs.python.org/3/library/operator.html#operator.mul" rel="noreferrer"><code>mul</code></a>:</p>
<pre><code>&gt;&gt;&gt; import functools, itertools, operator
&gt;&gt;&gt; iters = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&gt;&gt;&gt; functools.reduce(operator.mul, map(len, iters), 1)
27
&gt;&gt;&gt; len(list(itertools.product(*iters)))
27
</code></pre>
<p>Note that this will not work if your source iterables are themselves iterators, rather than sequences, for the same reason your initial attempts to get the length of the <code>itertools.product</code> failed. Python generally and <code>itertools</code> specifically can work in a memory-efficient way with iterators of any length (including infinite!) so finding out lengths up-front isn't really a case it was designed to deal with.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about:</p>
<pre><code>mylength = len(x) * len(y)
</code></pre>
</div>
<span class="comment-copy">Getting the length of an iterator doesn't make sense, and kind of spoils the point of using one! You <i>could</i> work it out, though... <i>"this uses up (what is the proper term?)"</i> - <i>"consumes"</i>, generally.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/390852/is-there-any-built-in-way-to-get-the-length-of-an-iterable-in-python">Is there any built-in way to get the length of an iterable in python?</a></span>
<span class="comment-copy">well, it does make a lot of sense in my specific case because (for reasons too long to explain here) I need to get the total number of combinations BEFORE the for loop starts</span>
<span class="comment-copy">But <i>in general</i>, as iterators aren't necessarily finite, you can't find out the length without consuming them.</span>
<span class="comment-copy">Sure, but what would you recommend for my specific case, in which my iterator is always finite? Would you recommend using something other than itertools?</span>
<span class="comment-copy">less convenient in my specific case, because I don't have two inputs but many many more</span>
<span class="comment-copy">@Pythonistaanonymous but it's still just the product of the lengths of the source iterables (<code>functools.reduce(operator.mul, map(len, iters), 1)</code> in Python 3.x).</span>
<span class="comment-copy">I'm down-voting this because it doesn't answer the question. For example, I have a program that passes around an itertools.product. This clever trick won't work for that.</span>
