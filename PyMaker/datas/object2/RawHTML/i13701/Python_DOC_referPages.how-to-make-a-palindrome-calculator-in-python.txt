<div class="post-text" itemprop="text">
<p>I am currently partway through a school project which requires me to create a python program that can read in two non-negative integers, begin and end, and <strong>print out all of the palindromes</strong> which occur between begin and end (inclusive). The code we have been given is this:</p>
<pre><code>begin = int(input('Enter begin: '))
end = int(input('Enter end: '))

palindromes = 0
# Add your code here. You will want to start with a "for x in range" style loop.

print('There are', palindromes, 'palindrome(s) between', begin, 'and', end)
</code></pre>
<p>Question: How would I calculate how many palindromes are in the range of the two numbers entered (and which numbers are palindromes)?</p>
<p>Research: I have tried having a look at pages, this one was a good one though I (being new to python) could not make sense of it when I put it into code:
<a href="https://stackoverflow.com/questions/17331290/how-to-check-for-palindrome-using-python-logic">how to check for a palindrome using python logic</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Palindrome number are written in the same way from right to left and from left to right : Exemple : </p>
<pre><code>123 is not a palindrome number because its inverted representation is 321
121 is a palindrome number because its inverted representation is 121
</code></pre>
<p>and the simpliest way to do this in python is to convert the number into a string and compare it to its inverted representation (Let's say that n is a number and we want to know if it's a palindrome or not) :</p>
<pre><code>if str(n) == str(n)[::-1]:
    print "It's a palindrome number"
</code></pre>
<p>so the solution for your problem is an if brunch inside in iteration like below :</p>
<pre><code>print "Enter begin:"
begin = int(raw_input("&gt; "))
print "Enter end:"
end = int(raw_input("&gt; "))

palindromes = 0

for x in range(begin, end):
    if str(x) == str(x)[::-1]:
        palindromes += 1

print "There are %d palindrome(s) between %d and %d" % (palindromes, begin, end)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A palindrome is a number which when written reversed is same as the original number. For example, 1234321 is a palindrome.</p>
<p>So, to check this, all you have to do is check if the reverse of the number is the same as original.</p>
<p>Here's the code.</p>
<pre><code>begin = int(input('Enter begin:'))
end = int(input('Enter end:'))

palindromes = 0

for i in range(begin, end+1, 1):
    if str(i) == str(i)[::-1]:  #Here I convert the int to string and check if t matches the reverse
       palindromes += 1
       print i
print "Total number of palindromes = ",palindromes
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since this is school work I don't see a huge benefit in writing code for you, but here's how to break down the problem.</p>
<p>As the comment in your example says, you're going to want to start with a <code>for x in range</code> loop. In this case I suggest you use the version of <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer"><code>range()</code></a> that takes both a start point and a stop point (begin, and end) -- note that this will iterate over numbers between start and stop INCLUDING start but NOT stop.</p>
<p>Example -- prints numbers 1 to 9 each on their own line:</p>
<pre><code>for x in range(1, 10):
   print(x)
</code></pre>
<p>Inside your for loop you can then test to see if <code>x</code> is a palindrome. If it is you'll want to add it to a list of found palindromes. Later on you can set your <code>palindromes</code> variable to be the <a href="https://docs.python.org/3/library/functions.html#len" rel="nofollow noreferrer">length</a> of this list, and print out the contents as needed.</p>
<p>To find out if <code>x</code> is a palindrome, the answer you've found should help. Alternatively you can think about what a palindrome is and have a go at writing your own method. You'll want to <a href="https://docs.python.org/3/library/functions.html#func-str" rel="nofollow noreferrer">convert <code>x</code> to a string</a> before you start, and then it's just a case of comparing the first and last halves of the string, and there are a few interesting ways of doing this :)</p>
<p>Here are two options you could try:</p>
<p>1) Use <em>slicing</em> to split the string in half (ignoring the middle character if there is an odd number of characters). <a href="https://stackoverflow.com/questions/931092/reverse-a-string-in-python">Reverse</a> ONE half of the string, and then compare it with the other half; if they are the same then it's a palindrome.</p>
<p>2) Use another <code>for</code> loop with a <code>start</code> of 0 and a <code>stop</code> of half the length (rounded down to the nearest whole number). Inside the loop take <em>slices</em> of both ends of the string and compare them.</p>
<p>Example (where x is the loop counter and currently has a value of 0).</p>
<blockquote>
<blockquote>
<blockquote>
<p>string = 'abcd'
      string[0+x]
      'a'
      string[-(1+x)]
      'd'</p>
</blockquote>
</blockquote>
</blockquote>
<p>For both of these answers you'll want to look at how to slice a string if you're not already familiar with this. There's some helpful examples <a href="https://docs.python.org/3/tutorial/introduction.html" rel="nofollow noreferrer">in this Python introduction</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Thank you everyone, the code I found to be the answer was this:</p>
<pre><code>begin = int(input('Enter begin: '))
end = int(input('Enter end: '))

palindromes = palindromes = len([i for i in range(begin, end+1) if str(i) ==     str(i)[::-1]])
  for i in range(begin, end+1):
    if str(i) == str(i)[::-1]:
      print(i,'is a palindrome')

print('There are', palindromes, 'palindrome(s) between', begin, 'and', end)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code># Palindrome Number Calculator

Palindrome = False
Test = 0
newInt = 0

myInt = int(input("Enter a number "))
myIntReversed = int(str(myInt)[::-1])

if myInt == myIntReversed:
    print("Your number is a palindrome")
    Palindrome = True
    exit()

while Palindrome == False:

    myInt += myIntReversed

    Test += 1

    myIntReversed = int(str(myInt)[::-1])

    if myInt == myIntReversed:
        print("Palindrome")
        print(myInt)
        Palindrome = True

exit()
</code></pre>
<p>If you use pycharm then you can use the debug feature to see what test number the computer is at. I am not printing this number so the program runs faster. Try to see if your program can see what the palindrome of 196 is :)</p>
</div>
<span class="comment-copy">What's your question?</span>
<span class="comment-copy">How would I calculate how many palindromes are in the range of the two numbers entered (and which numbers are palindromes)?</span>
<span class="comment-copy">Could you explain what part of the answer you cited you do not understand? You need just one loop and the code from the accepted answer.</span>
<span class="comment-copy"><code>palindromes = len([i for i in range(begin, end+1) if str(i) == str(i)[::-1]])</code>. Now go and explain this to your teacher.</span>
<span class="comment-copy">That is more or less what I had. The problem I was having was that the program then needs to print which numbers are palindromes.</span>
