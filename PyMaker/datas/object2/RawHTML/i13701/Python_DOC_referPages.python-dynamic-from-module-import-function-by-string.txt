<div class="post-text" itemprop="text">
<p>The origin code is(simplify for example):</p>
<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-
from utils.func_a import func_a as _func_a
from utils.func_b import func_b as _func_b
def func_a():
    _func_a()

def func_b():
    _func_b()

if __name__ == '__main__':
    func_a()
</code></pre>
<p>now I only called func_a, or maybe func_b, it depends on configuration.</p>
<p>so I want to dynamic do from ... import ..., such as:</p>
<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-
def func_a():
    _func_a()

def func_b():
    _func_b()

if __name__ == '__main__':
    keys = ['func_a']
    for k in keys:
        mod_n = func_n = k
        from utils.&lt;mod_n&gt; import &lt;func_n&gt; as _&lt;func_n&gt;   # TODO
    func_a()
</code></pre>
<p>but I don't know to how to implement it?</p>
<p>What I have thought is do import in func_X():</p>
<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-
def func_a():
    from utils.func_a import func_a as _func_a
    _func_a()

def func_b():
    from utils.func_b import func_b as _func_b
    _func_b()

if __name__ == '__main__':
    func_a()
</code></pre>
<p>but this way will do import every time when call function.</p>
<hr/>
<p>Supplement:</p>
<p>I have tried <code>__import__</code> / <code>importlib</code>, but can't implement this condition</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__import__</code> is a builtin function which takes the module name as a string and returns the module as an object. See <a href="https://docs.python.org/2/library/functions.html#__import__" rel="nofollow">the documentation</a>:</p>
<blockquote>
<pre><code>__import__(name[, globals[, locals[, fromlist[, level]]]])
</code></pre>
<p>The function imports the module <code>name</code>, potentially using the given <code>globals</code> and <code>locals</code> to determine how to interpret the name in a package context. The <code>fromlist</code> gives the names of objects or submodules that should be imported from the module given by <code>name</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>before I ask the question, I have tried <code>__import__</code> and <code>importlib</code>, but can't write out the code.</p>
<p>thanks for @machine-yearning, I read the entire doc of <code>__import__</code>.</p>
<p>this is my solution:</p>
<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
def func_a():
    _func_a()

def func_b():
    _func_b()

if __name__ == '__main__':
    keys = ['func_a']
    for k in keys:
        mod_n = func_n = k
        _temp = __import__('utils.'+mod_n, fromlist=[func_n])
        _func = getattr(_temp, func_n)
        new_func_n = '_{0}'.format(k)
        setattr(sys.modules[__name__], new_func_n, _func)

    func_a()
</code></pre>
</div>
<span class="comment-copy">With regards to your last example: imports are cached, so the modules you mention will not be imported every time you call the functions. <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">Read more here.</a></span>
<span class="comment-copy">Take a look at the <a href="https://docs.python.org/3/library/importlib.html#module-importlib" rel="nofollow noreferrer">importlib</a> module.</span>
<span class="comment-copy">I have tried <code>__import__</code>/<code>importlib</code>, but can't implment this</span>
<span class="comment-copy">Can you explain why you can't implement it?</span>
<span class="comment-copy">get module by <b>import</b>, and get func by getattr, but func is a variable. It can't implment is the second example</span>
<span class="comment-copy">I don't understand what you're saying. Why doesn't it work to use <code>__import__('utils.'+mod_n,  fromlist=[func_n])</code>?</span>
<span class="comment-copy">thank you, I saw the entire <code>__import__</code> doc and found the usage.</span>
