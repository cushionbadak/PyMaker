<div class="post-text" itemprop="text">
<p>I have a bunch of files names like so:</p>
<pre><code>LT50300281984137PAC00_sr_band3.tif

LT50300281985137PAC00_sr_band1.tif
</code></pre>
<p>And I want to change the julian date contained in [9:16] of each filename to gregorian date, and then reinsert the new date back into the filename.  I have converted for julian to gregorian using this code:</p>
<pre><code>import datetime, glob, os
    for raster in glob.glob('r'F:\Sheyenne\Atmospherically Corrected Landsat\hank_masked\julian_dates/*.tif'):
        year=int(oldFilename[9:13])
    #the day
        day=int(oldFilename[13:16])
    #convert to julian date
        date=datetime.datetime(year,1,1)+datetime.timedelta(day)
        print date
</code></pre>
<p>This will give me the julian date for each file, so for a file like this <code>LT50300281984137PAC00_sr_band3.tif</code>, this would be returned <code>1984-05-17 00:00:00</code>, but I don't want the <code>00:00:00</code> and I want to insert the gregorian date back into the filename, preferable as <code>19840517</code>.</p>
<p>Edit:</p>
<p>Using suggestions from all of the answers so far I am able to do everything but execute the rename (last line of code in this example) using this:</p>
<pre><code>import datetime, glob, os
        for raster in glob.glob(r'F:\Sheyenne\Atmospherically Corrected Landsat\hank_masked\julian_dates/*.tif'):
    oldFilename=raster
    year=int(oldFilename[9:13])
    #the day
    day=int(oldFilename[13:16])
    #convert to julian date
    date=datetime.datetime(year,1,1)+datetime.timedelta(day)
    #generate newfile names
    newFilename=oldFilename[:9] + date.strftime('%Y%m%d') + oldFilename[16:]
    #rename the files
    os.rename(oldFilename, newFilename) 
</code></pre>
<p>this returns error: <code>WindowsError: [Error 2] The system cannot find the file specified</code> and I think it may have something to do with my os pathway.  All other variables till this point populate as expected.</p>
<p>Edit:  This code works for me</p>
<pre><code>arcpy.env.workspace=r'F:\Sheyenne\Atmospherically Corrected Landsat\hank_masked\julian_dates'
hank_bands='F:\Sheyenne\Atmospherically Corrected Landsat\hank_masked\julian_dates'
hank_out='F:\Sheyenne\Atmospherically Corrected Landsat\hank_masked\greg_dates'
list1=arcpy.ListRasters("*.tif")
for raster in list1:
    source_path = os.path.join(hank_bands, raster)
    oldFilename=raster
    year=int(oldFilename[9:13])
    #the day
    day=int(oldFilename[13:16])
    #convert to julian date
    date=datetime.datetime(year,1,1)+datetime.timedelta(day)
    newFilename=oldFilename[:9] + date.strftime('%Y%m%d') + oldFilename[16:]
    destination_path=os.path.join(hank_out, newFilename)
    os.rename(source_path, destination_path) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use regex for that:</p>
<pre><code>import re
import os

filename = 'LT50300281984137PAC00_sr_band3.tif'
oldDate = re.sub('(LT5030028)|(PAC00_sr_band3.tif)','',filename) # Extracts the old date
# calculate new date from old date
# newDate = '1984-05-17 00:00:00'
newDate = re.sub('(-)|( .*)','',newDate) # Removes the dashes and the time
newFilename = filename.replace(oldDate,newDate) # Replaces the old date by the new date

os.rename(filename, newFilename) # renames the file to the new file name
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Once you have <code>year</code> and <code>day</code> the method <code>strftime</code> give your result. For 1984 and 137 you get:</p>
<pre><code>import datetime

date=datetime.date(year,1,1)+datetime.timedelta(day)
printf(date.strftime("%4Y%2m%2d"))

19840517
</code></pre>
<p>So you can now do:</p>
<pre><code>newFilename = oldFilename[:9] + date.strftime("%4Y%2m%2d") + oldFilename[16:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To convert a string into a date object, use <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow"><code>datetime.strptime()</code></a>:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.strptime('1985137', '%Y%j')
datetime.datetime(1985, 5, 17, 0, 0)
&gt;&gt;&gt; datetime.strptime('1984137', '%Y%j')
datetime.datetime(1984, 5, 16, 0, 0)
</code></pre>
<p>Note: the input is interpreted differently: <code>1984137</code> is <code>1984-05-16</code> here (<code>137</code> is interpreted as a day of the year where January 1st is day 1) while <code>datetime(year, 1, 1) + timedelta(day)</code> formula in your question implies that the <code>day</code> is zero-based instead (February 29 is counted in both cases).</p>
<p>To convert date object into a string, use <code>.strftime()</code> method:</p>
<pre><code>&gt;&gt;&gt; datetime(1985, 5, 17, 0, 0).strftime('%Y%m%d')
'19850517'
</code></pre>
<p>To replace fixed positions in a filename:</p>
<pre><code>&gt;&gt;&gt; filename = 'LT50300281984137PAC00_sr_band3.tif'
&gt;&gt;&gt; filename[9:16]
'1984137'
&gt;&gt;&gt; new_name = filename[:9] + '19840516' + filename[16:]
&gt;&gt;&gt; new_name
'LT503002819840516PAC00_sr_band3.tif'
</code></pre>
<p>To rename a file if the destination might be on a different filesystem, use <a href="https://docs.python.org/3/library/shutil.html#shutil.move" rel="nofollow"><code>shutil.move()</code></a>:</p>
<pre><code>&gt;&gt;&gt; import shutil
&gt;&gt;&gt; shutil.move(os.path.join(src_dir, filename), os.path.join(dest_dir, new_name))
</code></pre>
<p>If the destination file might exists already; call <code>os.remove(dest_path)</code>.</p>
</div>
<span class="comment-copy">Check <code>strftime</code></span>
<span class="comment-copy">(1) try to limit your questions to a single issue i.e., <code>WindowsError</code> should have been asked as a separate question. Otherwise it makes the question less useful for future visitors. (2) don't put an answer into the question, <a href="http://stackoverflow.com/help/self-answer">post your own answer (and accept it if you'd like) instead</a></span>
<span class="comment-copy">Aside: Time expressed in the form YYYYddd where YYYY is the year and ddd is the day number of the year are not Julian dates. Julian dates are days since noon Universal Time on 01 January 4713 BCE (proleptic Julian calendar). The python datetime module does not handle julian dates. Other python modules such as astropy do.</span>
<span class="comment-copy">@DavidHammen: <a href="http://stackoverflow.com/a/25831416/4279"><i>"julian"</i> means different things in different cases</a>. In this case <i>"julian"</i> is "zero-based Julian day" from <code>time</code> module.</span>
<span class="comment-copy">if I want to set <code>LT5030028</code> and <code>PAC00_sr_band3.tif</code> as variables how would this change the <code>oldDate = re.sub('(LT5030028)|(PAC00_sr_band3.tif)','',filename)</code> line?</span>
<span class="comment-copy">it would be <code>oldDate = re.sub('('+varA+')|('+varB+')','',filename)</code></span>
