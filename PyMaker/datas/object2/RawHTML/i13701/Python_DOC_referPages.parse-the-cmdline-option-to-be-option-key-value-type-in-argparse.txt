<div class="post-text" itemprop="text">
<p>I want to parse the cmdline option to be <code>-option key=value</code> type in argparse.
For example:</p>
<pre><code>script.py -project prj1=rev1
</code></pre>
<p>Generally:</p>
<pre><code>script.py -project prj1 --&gt; OK
script.py -project=prj1 --&gt; OK
script.py -project prj1=rev1 --&gt; How to flag that argument value should be in str=str format.
script.py -project=prj1,prj2 --&gt; How to flag that we need comma separated strings.
</code></pre>
<p>In the above, <code>-project</code> is the option. <code>proj1=rev1</code> in this way I want the argument to be present. It should flag an error if it is not in the proper format and print the help message. I can use regular expression once I collect the project value using <code>(\w)=(\w)</code>. If not in the above format can flag an error. But is there a way to filter out this and flag an error at parsing the cmdline arguments itself?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can take advantage of this fact from <a href="https://docs.python.org/3/library/argparse.html#type" rel="nofollow">the argparse documentation</a>:</p>
<blockquote>
<p>type= can take any callable that takes a single string argument and returns the converted value:</p>
</blockquote>
<p>For example, to support the first format (<code>--project prj1=rev1</code>) you could do something like:</p>
<pre><code>import os
import sys
import argparse


def handle_kv_string(val):
    if '=' in val:
        return val.split('=')
    else:
        raise argparse.ArgumentTypeError('Must specify k=v')

def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument('--project',
                   type=handle_kv_string)
    return p.parse_args()


def main():
    args = parse_args()
    print args


if __name__ == '__main__':
    main()
</code></pre>
<p>This gets you, with valid arguments:</p>
<pre><code>$ ./argtest --project foo=bar
Namespace(project=['foo', 'bar'])
</code></pre>
<p>And with invalid arguments:</p>
<pre><code>$ ./argtest --project foo
usage: argtest.py [-h] [--project PROJECT]
argtest.py: error: argument --project: Must specify k=v
</code></pre>
<p>You could apply a similar solution to your second example.</p>
</div>
<span class="comment-copy">This option format is unusual and (in my opinion) confusing. You would be much better off to stick to the styles that <code>argparse</code> provides.</span>
<span class="comment-copy">Thanks a lot. It works. Thats fit my requirement.</span>
<span class="comment-copy">Here in handle_kv_string function we get the value entered. How about getting the dest name. i.e option name. I am trying to build the dict here with the key as option name and value as input value.</span>
<span class="comment-copy">You know the option name <i>after</i> calling argparse because that's where the results are assigned.  E.g., <code>args.project</code> will have the value that was passed to <code>--project</code>.  If you want a dictionary I guess you could use <code>mydict['project'] = args.project</code> or something.  There are other ways of sovling this, but the best solution depends on exactly what you are trying to do.  Consider posting a <i>new</i> question with a complete example (what you want the command line to look like, the resulting data structures you want, and what you've tried so far).</span>
<span class="comment-copy">what u r saying is after calling parse_args().  But what i was asking is when we called type custom API function we retreive the argument value in custom api function with 'val' variable. In the same function can we get the option name. say args.project but before calling parse_args and the time we call type=custom_api_function itself.</span>
