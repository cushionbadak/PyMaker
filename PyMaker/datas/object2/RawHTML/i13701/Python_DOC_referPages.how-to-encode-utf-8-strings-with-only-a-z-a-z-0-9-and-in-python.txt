<div class="post-text" itemprop="text">
<p>I need to build a python encoder so that I can reformat strings like this:</p>
<pre><code>import codecs
codecs.encode("Random üêç UTF-8 String ‚òë‚ö†‚ö°", 'name_of_my_encoder')
</code></pre>
<p>The reason this is even something I'm asking stack overflow is, the encoded strings need to pass this validation function. This is a hard constraint, there is no flexibility on this, its due to how the strings have to be stored.</p>
<pre><code>from string import ascii_letters
from string import digits

valid_characters = set(ascii_letters + digits + ['_'])

def validation_function(characters):
    for char in characters:
        if char not in valid_characters:
            raise Exception
</code></pre>
<p>Making an encoder seemed easy enough, but I'm not sure if this encoder is making it harder to build a decoder. Heres the encoder I've written.</p>
<pre><code>from codecs import encode
from string import ascii_letters
from string import digits

ALPHANUMERIC_SET = set(ascii_letters + digits)

def underscore_encode(chars_in):
    chars_out = list()
    for char in chars_in:
        if char not in ALPHANUMERIC_SET:
            chars_out.append('_{}_'.format(encode(char.encode(), 'hex').decode('ascii')))
        else:
            chars_out.append(char)
    return ''.join(chars_out)
</code></pre>
<p>This is the encoder I've written. I've only included it for example purposes, theres probably a better way to do this.</p>
<p>Edit 1 - Someone has wisely pointed out just using base32 on the entire string, which I can definitely use. However, it would be preferable to have something that is 'somewhat readable', so an escaping system like <a href="https://en.wikipedia.org/wiki/Quoted-printable" rel="nofollow">https://en.wikipedia.org/wiki/Quoted-printable</a> or <a href="https://en.wikipedia.org/wiki/Percent-encoding" rel="nofollow">https://en.wikipedia.org/wiki/Percent-encoding</a> would be preferred.</p>
<p>Edit 2 - Proposed solutions must work on Python 3.4 or newer, working in Python 2.7 as well is nice, but not required. I've added the python-3.x tag to help clarify this a little.</p>
</div>
<div class="post-text" itemprop="text">
<p>This seems to do the trick. Basically, alphanumeric letters are left alone. Any non-alphanumeric character in the ASCII set is encoded as a <code>\xXX</code> escape code. All other unicode characters are encoded using the <code>\uXXXX</code> escape code. However, you've said you can't use <code>\</code>, but you can use <code>_</code>, thus all escape sequences are translated to start with a <code>_</code>. This makes decoding extremely simple. Just replace the <code>_</code> with <code>\</code> and then use the <code>unicode-escape</code> codec. Encoding is slightly more difficult as the <code>unicode-escape</code> codec leaves ASCII characters alone. So first you have to escape the relevant ASCII characters, then run the string through the <code>unicode-escape</code> codec, before finally translating all <code>\</code> to <code>_</code>.</p>
<p>Code:</p>
<pre><code>from string import ascii_letters, digits

# non-translating characters
ALPHANUMERIC_SET = set(ascii_letters + digits)    
# mapping all bytes to themselves, except '_' maps to '\'
ESCAPE_CHAR_DECODE_TABLE = bytes(bytearray(range(256)).replace(b"_", b"\\"))
# reverse mapping -- maps `\` back to `_`
ESCAPE_CHAR_ENCODE_TABLE = bytes(bytearray(range(256)).replace(b"\\", b"_"))
# encoding table for ASCII characters not in ALPHANUMERIC_SET
ASCII_ENCODE_TABLE = {i: u"_x{:x}".format(i) for i in set(range(128)) ^ set(map(ord, ALPHANUMERIC_SET))}



def encode(s):
    s = s.translate(ASCII_ENCODE_TABLE) # translate ascii chars not in your set
    bytes_ = s.encode("unicode-escape")
    bytes_ = bytes_.translate(ESCAPE_CHAR_ENCODE_TABLE)
    return bytes_

def decode(s):
    s = s.translate(ESCAPE_CHAR_DECODE_TABLE)
    return s.decode("unicode-escape")

s = u"Random UTF-8 String ‚òë‚ö†‚ö°"
#s = 'Âåó‰∫∞'
print(s)
b = encode(s)
print(b)
new_s = decode(b)
print(new_s)
</code></pre>
<p>Which outputs:</p>
<pre><code>Random UTF-8 String ‚òë‚ö†‚ö°
b'Random_x20UTF_x2d8_x20String_x20_u2611_u26a0_u26a1'
Random UTF-8 String ‚òë‚ö†‚ö°
</code></pre>
<p>This works on both python 3.4 and python 2.7, which is why the <code>ESCAPE_CHAR_{DE,EN}CODE_TABLE</code> is a bit messy <code>bytes</code> on python 2.7 is an alias for <code>str</code>, which works differently to <code>bytes</code> on python 3.4. This is why the table is constructed using a <code>bytearray</code>. For python 2.7, the <code>encode</code> method expects a <code>unicode</code> object not <code>str</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use base32! It uses only the 26 letters of the alphabet and 0-9. You can‚Äôt use base64 because it uses the = character, which won‚Äôt pass your validator.</p>
<pre><code>&gt;&gt;&gt; import base64
&gt;&gt;&gt;
&gt;&gt;&gt; print base64.b32encode('Random üêç UTF-8 String ‚òë‚ö†‚ö°"')
KJQW4ZDPNUQPBH4QRUQFKVCGFU4CAU3UOJUW4ZZA4KMJDYU2UDRJVIJC
&gt;&gt;&gt;
&gt;&gt;&gt; print base64.b32decode('KJQW4ZDPNUQPBH4QRUQFKVCGFU4CAU3UOJUW4ZZA4KMJDYU2UDRJVIJC')
Random üêç UTF-8 String ‚òë‚ö†‚ö°"
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could abuse the <a href="https://docs.python.org/3/library/urllib.parse.html#url-quoting" rel="nofollow">url quoting</a>, to get both readable and easy to decode in other languages format that passes your validation function:</p>
<pre><code>#!/usr/bin/env python3
import urllib.parse

def alnum_encode(text):
    return urllib.parse.quote(text, safe='')\
        .replace('-', '%2d').replace('.', '%2e').replace('_', '%5f')\
        .replace('%', '_')

def alnum_decode(underscore_encoded):
    return urllib.parse.unquote(underscore_encoded.replace('_','%'), errors='strict')

s = alnum_encode("Random üêç UTF-8 String ‚òë‚ö†‚ö°")
print(s)
print(alnum_decode(s))
</code></pre>
<h3>Output</h3>
<pre><code>Random_20_F0_9F_90_8D_20UTF_2d8_20String_20_E2_98_91_E2_9A_A0_E2_9A_A1
Random üêç UTF-8 String ‚òë‚ö†‚ö°
</code></pre>
<p>Here's an implementation using a <code>bytearray()</code> (to move it to C later if necessary):</p>
<pre><code>#!/usr/bin/env python3.5
from string import ascii_letters, digits

def alnum_encode(text, alnum=bytearray(ascii_letters+digits, 'ascii')):
    result = bytearray()
    for byte in bytearray(text, 'utf-8'):
        if byte in alnum:
            result.append(byte)
        else:
            result += b'_%02x' % byte
    return result.decode('ascii')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want a transliteration of Unicode to ASCII (e.g. √ß --&gt; c), then check out the <a href="https://pypi.python.org/pypi/Unidecode" rel="nofollow noreferrer">Unidecode</a> package. Here are their examples:</p>
<pre><code>&gt;&gt;&gt; from unidecode import unidecode
&gt;&gt;&gt; unidecode(u'ko\u017eu\u0161\u010dek')
'kozuscek'
&gt;&gt;&gt; unidecode(u'30 \U0001d5c4\U0001d5c6/\U0001d5c1')
'30 km/h'
&gt;&gt;&gt; unidecode(u"\u5317\u4EB0")
'Bei Jing '
</code></pre>
<p>Here's my example:</p>
<pre><code># -*- coding: utf-8 -*- 
from unidecode import unidecode
print unidecode(u'Âø´Ê®ÇÊòüÊúüÂ§©')
</code></pre>
<p>Gives as an output*</p>
<pre><code>Kuai Le Xing Qi Tian 
</code></pre>
<p>*may be nonsense, but at least it's ASCII</p>
<hr/>
<p>To remove punctuation, see <a href="https://stackoverflow.com/a/266162/2327328">this answer</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Despite several good answers. I ended up with a solution that seems cleaner and more understandable. So I'm posting the code of my eventual solution to answer my own question.</p>
<pre><code>from string import ascii_letters
from string import digits
from base64 import b16decode
from base64 import b16encode


ALPHANUMERIC_SET = set(ascii_letters + digits)


def utf8_string_to_hex_string(s):
    return ''.join(chr(i) for i in b16encode(s.encode('utf-8')))


def hex_string_to_utf8_string(s):
    return b16decode(bytes(list((ord(i) for i in s)))).decode('utf-8')


def underscore_encode(chars_in):
    chars_out = list()
    for char in chars_in:
        if char not in ALPHANUMERIC_SET:
            chars_out.append('_{}_'.format(utf8_string_to_hex_string(char)))
        else:
            chars_out.append(char)
    return ''.join(chars_out)


def underscore_decode(chars_in):
    chars_out = list()
    decoding = False
    for char in chars_in:
        if char == '_':
            if not decoding:
                hex_chars = list()
                decoding = True
            elif decoding:
                decoding = False
                chars_out.append(hex_string_to_utf8_string(hex_chars))
        else:
            if not decoding:
                chars_out.append(char)
            elif decoding:
                hex_chars.append(char)
    return ''.join(chars_out)
</code></pre>
</div>
<span class="comment-copy"><code>chars_out.append('_{}_'.format(encode(char.encode(), 'hex').decode('ascii')))</code> what does this do?</span>
<span class="comment-copy">encode the whole binary string as <a href="https://en.wikipedia.org/wiki/Base32" rel="nofollow noreferrer">base 32</a> or <a href="https://en.wikipedia.org/wiki/Base64" rel="nofollow noreferrer">base 64</a> like in <a href="https://en.wikipedia.org/wiki/MIME" rel="nofollow noreferrer">MIME</a></span>
<span class="comment-copy">@RishavKundu It inserts a hex unicode representation of the character between underscores, which are the only character I can reasonably use for an escape sequence. <code>&gt;&gt;&gt; '_{}_'.format(encode('œÄ'.encode(), 'hex').decode('ascii'))</code> prints out <code>'_cf80_'</code></span>
<span class="comment-copy">@Techdragon see my answer! Python will do all the work for you!</span>
<span class="comment-copy">@RishavKundu You definitely gave me some new ideas for how to try building this, but your code is python 2.x only. I'm unable to use Python 2.x code, I've deprecated it in all of my projects, and any 2.x only code now fails my test suites. Using the b32encode/b32decode requires a bytes object, and the bytes object doesn't concatenate so nicely with strings. which is why I wrote <code>'_{}_'.format(encode(char.encode(), 'hex').decode('ascii'))</code> instead of something like <code>'_{}_'.format(base64.b16encode('œÄ'.encode('utf-8')))</code></span>
<span class="comment-copy">This only behaves as expected in Python-2.x</span>
<span class="comment-copy">@Techdragon: It should be trivial to adapt it for Python 3. If you don't know how; ask a separate question: include working Python 2 code and example input output.</span>
<span class="comment-copy">the thing is his set of allowed characters has only 63 different values, not 64</span>
<span class="comment-copy">@L∆∞uVƒ©nhPh√∫c whoops.</span>
<span class="comment-copy">yeah. I also thought of using base64 at first, but I've just had a look back on this and notice the set is not enough</span>
<span class="comment-copy">With the downside of requiring much much more space to store the encoded form.</span>
<span class="comment-copy">It seems the space is not an issue: <code>len(alnum_encode("Random üêç UTF-8 String ‚òë‚ö†‚ö°")) == len(underscore_encode("Random üêç UTF-8 String ‚òë‚ö†‚ö°"))</code> where <a href="http://stackoverflow.com/a/32335031/4279"><code>underscore_encode()</code> is from the accepted answer</a></span>
<span class="comment-copy">This encoding doesn't produce output that will always pass the validator function.</span>
