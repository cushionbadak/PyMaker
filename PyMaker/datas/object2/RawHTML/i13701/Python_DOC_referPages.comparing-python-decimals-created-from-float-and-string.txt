<div class="post-text" itemprop="text">
<p>Can someone explain why the following three examples are not <strong>all equal</strong>?</p>
<pre><code>ipdb&gt; Decimal(71.60) == Decimal(71.60)
True
ipdb&gt; Decimal('71.60') == Decimal('71.60')
True
ipdb&gt; Decimal(71.60) == Decimal('71.60')
False
</code></pre>
<p>Is there a general 'correct' way to create <code>Decimal</code> objects in Python? (ie, as strings or as floats)</p>
</div>
<div class="post-text" itemprop="text">
<p>Floating point numbers, what are used by default, are in base 2. 71.6 can't be accurately represented in base 2. (Think of numbers like 1/3 in base 10).</p>
<p>Because of this, they will be converted to be as many decimal places as the floating point can represent. Because the number 71.6 in base 2 would go on forever and you almost certainly don't have infinate memory to play with, the computer decides to represent it (well, is told to) in a fewer number of bits.</p>
<p>If you were to use a string instead, the program can use an algorithm to convert it exactly instead of starting from the dodgy rounded floating point number.</p>
<pre><code>&gt;&gt;&gt; decimal.Decimal(71.6)
Decimal('71.599999999999994315658113919198513031005859375')
</code></pre>
<p>Compared to </p>
<pre><code>&gt;&gt;&gt; decimal.Decimal("71.6")
Decimal('71.6')
</code></pre>
<p>However, if your number is representable exactly as a float, it is just as accurate as a string</p>
<pre><code>&gt;&gt;&gt; decimal.Decimal(71.5)
Decimal('71.5')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Normally <code>Decimal</code> is used to avoid the floating point precision problem. For example, the <code>float</code> literal <code>71.60</code> isn't mathematically <code>71.60</code>, but a number very close to it.</p>
<p>As a result, using <code>float</code> to initialize <code>Decimal</code> won't avoid the problem. In general, you should use strings to initialize <code>Decimal</code>.</p>
</div>
<span class="comment-copy">Another highly related question - <a href="http://stackoverflow.com/questions/14572101/using-decimal-in-python">Using “Decimal” in Python</a></span>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/questions/31529898/python-decimal-module-undesired-float-like-output/31529936">Python Decimal Module - Undesired Float-Like Output?</a></span>
<span class="comment-copy">Another point to add here is that <code>Decimal(71.60)</code> is represented as  <code>Decimal('71.599999999999994315658113919198513031005859375')</code> in Cpython. (Link to the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">docs</a> on this matter)</span>
<span class="comment-copy">Could you illustrate with some examples? <i>"They will be converted to be more decimal places"</i> is woolly at best.</span>
