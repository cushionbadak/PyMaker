<div class="post-text" itemprop="text">
<p>This question is unfortunately a tad more conceptual, but I want to give it a shot anyway.</p>
<p>I have an <code>aiohttp</code> app running on a loop, taking input from clients and handling it.</p>
<p>I want to have another loop, a game loop, that occasionally takes input <em>from this other loop</em>, and advances. Conceptually it seems like I have these two (this isn't my actual code, the loops are called via asyncio and such. this is just a thinking diagram):</p>
<pre><code># game loop
while True:
    action = yield from game.perform ???
    game_state.change(action)
    if game_state is "end":
        break

# socket loop
while True:
    message = yield from any_client
    if action in message:
         game.perform(action)
    for listener in clients: listener.send(message)
</code></pre>
<p>I have the latter working, but I'm very new at this, and something just isn't clicking.</p>
</div>
<div class="post-text" itemprop="text">
<p>This sounds like a typical producer/consumer case. You should share a queue and have the socket loop put into it and the game loop get from it.</p>
<p>Python's built in queue has an option to block while waiting for something to be produced. <a href="https://docs.python.org/2/library/queue.html#Queue.Queue.get" rel="nofollow">https://docs.python.org/2/library/queue.html#Queue.Queue.get</a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import time
from threading import Thread
from queue import Queue

def worker():
    while True:
        time.sleep(1)
        item = queue.get()
        print(item)
        queue.task_done()

queue = Queue()
thread = Thread(target=worker)
thread.daemon = True
thread.start()

for item in [1, 2, 3]:
    print("Put it in")
    queue.put(item)

queue.join()       # block until all tasks are done
</code></pre>
<p>This does the trick. Thanks skyler!</p>
</div>
<span class="comment-copy">In the code you pasted only the first loop will run. You need to use threads in order to run few infinite loops at once</span>
<span class="comment-copy">it's pseudocode, i have asyncio loops running in the real thing</span>
<span class="comment-copy">Ah ok, sorry for my comment then</span>
<span class="comment-copy">If you are using <code>asyncio</code> for the web, why not also use the <a href="https://docs.python.org/3/library/asyncio-queue.html" rel="nofollow noreferrer">Queue</a> from <code>asyncio</code> and eliminate the need for threads?</span>
