<div class="post-text" itemprop="text">
<p>Consider the following lines </p>
<pre><code>import theano.tensor as T 

x = T.dscalar('x')
y = T.dscalar('y')
z = x+y
</code></pre>
<p>And then,</p>
<pre><code>In [15]: type(x)
Out[15]: theano.tensor.var.TensorVariable
</code></pre>
<p>while,</p>
<pre><code>In [16]: x.type
Out[16]: TensorType(float64, scalar)
</code></pre>
<p>Why type(x) and x.type give two different pieces of information ? What information is conveyed by them ?</p>
<p>I also see that referring to <a href="http://deeplearning.net/software/theano/tutorial/adding.html" rel="nofollow">Theano tutorial</a> ,</p>
<pre><code>&gt;&gt;&gt; type(x)
&lt;class 'theano.tensor.basic.TensorVariable'&gt;
&gt;&gt;&gt; x.type
TensorType(float64, scalar)
</code></pre>
<p>Why type(x) output is different in my case ? Are these caused by version specific implementation differences and what is signified by this difference ?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>theano.tensor</code> has an attribute <a href="http://deeplearning.net/software/theano/library/tensor/basic.html#theano.tensor._tensor_py_operators.type" rel="nofollow"><code>type</code></a> which you are looking at when you say</p>
<pre><code>x.type
</code></pre>
<p>This is analagous to numpy objects <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.dtype.html" rel="nofollow"><code>dtype</code></a> attribute that many of their objects carry (if you are familiar with that library).</p>
<p>On the other hand <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow"><code>type</code></a> is a Python function that looks at the actual type of the object you pass in, which for <code>type(x)</code> is indeed a </p>
<pre><code>theano.tensor.var.TensorVariable
</code></pre>
<p>So long story short, you are comparing an attribute to the actual object type.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>type(x)</code> is a builtin.</p>
<p><code>x.type</code> is an attribute that's defined in your object.</p>
<p>They are completely seperate, <code>type(x)</code> returns what type of object <code>x</code> is and <code>x.type</code> does whatever the object wants it to. In this case, it returns some information on the type of object it is</p>
</div>
<div class="post-text" itemprop="text">
<p>As others have mentioned, <code>type(x)</code> is Python's <a href="https://docs.python.org/2/library/functions.html#type" rel="nofollow">builtin function</a> that returns the type of the object.  It has nothing to do with Theano per se.  This builtin function can be applied to any Python object (and everything in Python is an object).  For example,</p>
<ul>
<li><code>type(1)</code> is <code>int</code>,</li>
<li><code>type(True)</code> is <code>bool</code>,</li>
<li><code>type(lambda x: x * x)</code> is <code>function</code>, etc.</li>
</ul>
<p>Interestingly, you can call <code>type</code> on <code>type</code> itself (everything, including <code>type</code>, is an object) - <code>type(type)</code> is <code>type</code>.</p>
<p>Incidentally, <code>type(T.dscalar)</code> is <code>TensorType</code> (<code>theano.tensor.type.TensorType</code> to be precise).</p>
<p><code>x.type</code>, as others have mentioned, is an attribute of the object <code>x</code>.  It points back to <code>type(T.dscalar)</code>.  <code>x.type</code> returns <code>TensorType(float64, scalar)</code> - this not only shows you the type of <code>T.dscalar</code>, it also tells you that <code>x</code> is scalar and it is 64-bit float.</p>
<p>Other examples of the type attribute:</p>
<pre><code>&gt;&gt;&gt; iv = T.ivector()
&gt;&gt;&gt; iv.type
TensorType(int32, vector)    # iv is a vector of 32-bit ints
&gt;&gt;&gt; fm = T.fmatrix()
&gt;&gt;&gt; fm.type
TensorType(float32, matrix)   # fm is a matrix of 32-bit floats
&gt;&gt;&gt; lt3 = T.ltensor3()
&gt;&gt;&gt; lt3.type
TensorType(int64, 3D)    # lt3 is a 3D array of 64-bit ints
</code></pre>
</div>
<span class="comment-copy"><code>type(x)</code> is standard Python functionality, whereas <code>x.type</code> is an instance attribute implemented by the class</span>
