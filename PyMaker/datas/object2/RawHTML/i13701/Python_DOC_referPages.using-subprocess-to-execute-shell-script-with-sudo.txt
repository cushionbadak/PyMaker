<div class="post-text" itemprop="text">
<p>I'm trying to write a small script to mount a VirtualBox shared folder each time I execute the script. I want to do it with Python, because I'm trying to learn it for scripting.</p>
<p>The problem is that I need privileges to launch mount command. I could run the script as sudo, but I prefer it to make sudo by its own.</p>
<p>I already know that it is not safe to write your password into a .py file, but we are talking about a virtual machine that is not critical at all: I just want to click the .py script and get it working.</p>
<p>This is my attempt:</p>
<pre><code>#!/usr/bin/env python
import subprocess

sudoPassword = 'mypass'
command = 'mount -t vboxsf myfolder /home/myuser/myfolder'

subprocess.Popen('sudo -S' , shell=True,stdout=subprocess.PIPE)
subprocess.Popen(sudoPassword , shell=True,stdout=subprocess.PIPE)
subprocess.Popen(command , shell=True,stdout=subprocess.PIPE)
</code></pre>
<p>My python version is 2.6</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>sudoPassword = 'mypass'
command = 'mount -t vboxsf myfolder /home/myuser/myfolder'
p = os.system('echo %s|sudo -S %s' % (sudoPassword, command))
</code></pre>
<p>Try this and let me know if it works. :-)</p>
<p>And this one:</p>
<p><code>os.popen("sudo -S %s"%(command), 'w').write('mypass')</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Many answers focus on how to make your solution work, while very few suggest that <em>your solution is a <strong>very bad</strong> approach</em>. If you really want to "practice to learn", why not practice using good solutions? Hardcoding your password is learning the <em>wrong</em> approach!</p>
<p>If what you really want is a password-less <code>mount</code> for that volume, maybe <code>sudo</code> isn't needed <em>at all</em>! So may I suggest other approaches?</p>
<ul>
<li><p>Use <code>/etc/fstab</code> as <a href="https://stackoverflow.com/users/871665/mensi">mensi</a> suggested. Use options <code>user</code> and <code>noauto</code> to let regular users mount that volume.</p></li>
<li><p>Use <code>Polkit</code> for passwordless actions: Configure a <code>.policy</code> file for your script with <code>&lt;allow_any&gt;yes&lt;/allow_any&gt;</code> and drop at <code>/usr/share/polkit-1/actions</code></p></li>
<li><p>Edit <code>/etc/sudoers</code> to allow your user to use <code>sudo</code> without typing your password.</p></li>
</ul>
<p>All the above allow passwordless root privilege, none require you to hardcode your password. Choose any approach and I can explain it in more detail.</p>
<p>As for <em>why</em> it is a very bad idea to hardcode passwords, here are a few good links for further reading:</p>
<ul>
<li><a href="http://www.security-faqs.com/why-you-shouldnt-hard-code-your-passwords-when-programming.html" rel="nofollow noreferrer">http://www.security-faqs.com/why-you-shouldnt-hard-code-your-passwords-when-programming.html</a></li>
<li><a href="https://security.web.cern.ch/security/recommendations/en/password_alternatives.shtml" rel="nofollow noreferrer">https://security.web.cern.ch/security/recommendations/en/password_alternatives.shtml</a></li>
<li><a href="https://security.stackexchange.com/questions/92465/whats-more-secure-hard-coding-credentials-or-storing-them-in-a-database">https://security.stackexchange.com/questions/92465/whats-more-secure-hard-coding-credentials-or-storing-them-in-a-database</a></li>
<li><a href="https://blogs.manageengine.com/it-security/passwordmanagerpro/2010/02/17/use-of-hard-coded-credentials-a-dangerous-programming-error-cwe.html" rel="nofollow noreferrer">https://blogs.manageengine.com/it-security/passwordmanagerpro/2010/02/17/use-of-hard-coded-credentials-a-dangerous-programming-error-cwe.html</a></li>
<li><a href="https://www.csoonline.com/article/3038302/application-development/hard-coded-passwords-remain-a-key-security-flaw.html" rel="nofollow noreferrer">https://www.csoonline.com/article/3038302/application-development/hard-coded-passwords-remain-a-key-security-flaw.html</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>To pass the password to <code>sudo</code>'s stdin:</p>
<pre><code>#!/usr/bin/env python
from subprocess import Popen, PIPE

sudo_password = 'mypass'
command = 'mount -t vboxsf myfolder /home/myuser/myfolder'.split()

p = Popen(['sudo', '-S'] + command, stdin=PIPE, stderr=PIPE,
          universal_newlines=True)
sudo_prompt = p.communicate(sudo_password + '\n')[1]
</code></pre>
<p>Note: you could probably configure passwordless sudo or <code>SUDO_ASKPASS</code> command instead of hardcoding your password in the source code.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>subprocess.Popen</code> creates a process and opens pipes and stuff. What you are doing is:</p>
<ul>
<li>Start a process <code>sudo -S</code></li>
<li>Start a process <code>mypass</code></li>
<li>Start a process <code>mount -t vboxsf myfolder /home/myuser/myfolder</code></li>
</ul>
<p>which is obviously not going to work. You need to pass the arguments to Popen. If you look at <a href="http://docs.python.org/library/subprocess.html#popen-constructor" rel="nofollow">its documentation</a>, you will notice that the first argument is actually a list of the arguments.</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><p>Use -S option in the sudo command which tells to read the password from 'stdin' instead of the  terminal device.</p></li>
<li><p>Tell Popen to read stdin from PIPE.</p></li>
<li><p>Send the Password to the stdin PIPE of the process by using it as an argument to communicate method. Do not forget to add a new line character, '\n', at the end of the password.</p></li>
</ul>
<pre class="lang-py prettyprint-override"><code>sp = Popen(cmd , shell=True, stdin=PIPE)
out, err = sp.communicate(_user_pass+'\n')   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Please try module pexpect. Here is my code:</p>
<pre><code>import pexpect
remove = pexpect.spawn('sudo dpkg --purge mytool.deb')
remove.logfile = open('log/expect-uninstall-deb.log', 'w')
remove.logfile.write('try to dpkg --purge mytool\n')
if remove.expect(['(?i)password.*']) == 0:
    # print "successfull"
    remove.sendline('mypassword')
    time.sleep(2)
    remove.expect(pexpect.EOF,5)
else:
    raise AssertionError("Fail to Uninstall deb package !")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To limit what you run as sudo, you could run</p>
<pre><code>python non_sudo_stuff.py
sudo -E python -c "import os; os.system('sudo echo 1')"
</code></pre>
<p>without needing to store the password. The <code>-E</code> parameter passes your current user's env to the process. Note that your shell will have sudo priveleges after the second command, so use with caution!</p>
</div>
<div class="post-text" itemprop="text">
<p>sometimes require a carriage return: </p>
<pre><code>os.popen("sudo -S %s"%(command), 'w').write('mypass\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I know it is always preferred not to hardcode the sudo password in the script. However, for some reason, if you have no permission to modify <code>/etc/sudoers</code> or change file owner, Pexpect is a feasible alternative.</p>
<p>Here is a Python function <code>sudo_exec</code> for your reference:</p>
<pre class="lang-python prettyprint-override"><code>import platform, os, logging
import subprocess, pexpect

log = logging.getLogger(__name__)

def sudo_exec(cmdline, passwd):
    osname = platform.system()
    if osname == 'Linux':
        prompt = r'\[sudo\] password for %s: ' % os.environ['USER']
    elif osname == 'Darwin':
        prompt = 'Password:'
    else:
        assert False, osname

    child = pexpect.spawn(cmdline)
    idx = child.expect([prompt, pexpect.EOF], 3)
    if idx == 0: # if prompted for the sudo password
        log.debug('sudo password was asked.')
        child.sendline(passwd)
        child.expect(pexpect.EOF)
return child.before
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I used this for python 3.5. I did it using <strong><a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess</a></strong> module.Using the password like this is very <strong>insecure</strong>.</p>
<p>The <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess</a> module takes command as a list of strings so either create a list beforehand using <strong>split()</strong> or pass the whole list later. Read the documentation for moreinformation.</p>
<pre><code>#!/usr/bin/env python
import subprocess

sudoPassword = 'mypass'
command = 'mount -t vboxsf myfolder /home/myuser/myfolder'.split()

cmd1 = subprocess.Popen(['echo',sudoPassword], stdout=subprocess.PIPE)
cmd2 = subprocess.Popen(['sudo','-S'] + command, stdin=cmd1.stdout, stdout=subprocess.PIPE)

output = cmd2.stdout.read.decode()
</code></pre>
</div>
<span class="comment-copy">Is there a reason for not using <code>/etc/fstab</code>?</span>
<span class="comment-copy">@mensi yes, that I am practising to learn using python for these kind of purpose</span>
<span class="comment-copy">you need to pass the password over stdin, see this <a href="http://stackoverflow.com/a/165662/894872">stackoverflow.com/a/165662/894872</a></span>
<span class="comment-copy">If you don't know what you are doing, <b>avoid</b> <code>shell=True</code>.  If you can't make things work without it, learn what it does and how it works (and then usually you can).</span>
<span class="comment-copy">This was my first attempt when I googled it, but doesn't work: it asks me for password at console instead of entering sudoPassword value directly</span>
<span class="comment-copy">@RomanRdgz echo %s converts it to stdin and pipes the output of sudoPassword to sudo command's stdin. Hence it should work(and does work here)</span>
<span class="comment-copy">I imported os, then copy-pasted, and it doesn't work: keeps asking for password. In fact, If i wait and not write anything when asked, output looks like code tried to input password 3 times wrong, saying 3 times 'Sorry, try again'</span>
<span class="comment-copy">@RomanRdgz try that latest line of code I posted.</span>
<span class="comment-copy">You really should NEVER use such a line <code>os.system('echo %s|sudo -S %s' % (sudoPassword, command))</code>, cause it brings a security hole. By writing your password as shell command, it becomes accessible through <code>.bash_history</code> file and by running <code>history</code> shell command. Always pass password through stdin as it's more secure approach</span>
<span class="comment-copy">The last point, edit sudoers is very well explained at <a href="https://askubuntu.com/a/155827/42796">askubuntu.com/a/155827/42796</a></span>
<span class="comment-copy">It might helpful for newcomers for you to explain <i>why</i> hardcoding the user's password is a <i>very bad approach</i>.</span>
<span class="comment-copy">@pdoherty926: I assumed it was obvious for security reasons, but you're right, might be a good idea to educate on <i>why</i>. This goes a little beyond the scope of this answer, so I'll edit it to add a few links for further reading.</span>
<span class="comment-copy">the Popen you describe throws an error <code>can only concatenate list (not “str”) to list</code> I changed it to <code>Popen(['sudo -S ' + command]</code> - That worked for me. It seems that at the time of answer this added to a list implicitly.. which is no longer allowed? or supported..</span>
<span class="comment-copy">@ppumkin wrong. Look at the code in the answer. It has <code>.split()</code>. Compare with  your code.</span>
<span class="comment-copy">Ohh boy yes. I missed the split() on the end.. wow late night coding. I slept on it and decided it was a bad idea to do it like this any way so going the passwordless route instead :D I just wanted something to work and was desperate</span>
<span class="comment-copy">Ok, I get what I'm doing wrong, but I don't think it is possible to pass sudo's password as an argument here with subprocess.Popen(['sudo', '-S', password, command], shell=True, stdin=subprocess.PIPE). SO how can I do it?</span>
<span class="comment-copy">Have a look at the linked SO question</span>
