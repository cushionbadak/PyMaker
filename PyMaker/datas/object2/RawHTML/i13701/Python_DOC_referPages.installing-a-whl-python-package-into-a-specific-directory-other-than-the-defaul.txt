<div class="post-text" itemprop="text">
<p>I am trying to install the 64-bit version of NTLK, which comes in a .whl file, in a different directory than the standard python34/Lib folder. I am using Windows 10 64-bit and Python 3.4 64-bit.</p>
<p>I first tried using the instructions in <a href="https://stackoverflow.com/questions/2915471/install-a-python-package-into-a-different-directory-using-pip">this question</a> (which worked for other modules).</p>
<p>The command I typed into CMD was:</p>
<pre><code>py -m pip install --install-option="--prefix=$PATH_NAME" nltk-3.0.4-py2.py3-none-any.whl
</code></pre>
<p>It promptly gave me the following error:</p>
<p>UserWarning: Disabling all use of wheels due to the use of --build-options / --global-options / --install-options.</p>
<p>It appears that I can't install WHL files using the --install-option. Is there an alternate way I can install the .whl package in a non default directory?</p>
<p>Edit:  I marked this as solved because the proposed solution allows me to do what I need in my own use case. However, it doesn't completely answer the question due to inherent limitations in using <code>--root</code> to choose an alternate directory. There is technically no correct solution to this problem, see the answer's comments for details.</p>
<p>Edit - March 3, 2017: It looks like this issue has been resolved in version 8.0 of PIP with the addition of the --prefix parameter. I've changed the accepted answer accordingly.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://pip.pypa.io/en/stable/reference/pip_install/#cmdoption--prefix" rel="nofollow noreferrer"><code>--prefix</code> option</a> of <code>pip install</code>, available since <a href="https://pip.pypa.io/en/stable/news/" rel="nofollow noreferrer">version 8</a>:</p>
<blockquote>
<p>--prefix </p>
<pre><code>Installation prefix where lib, bin and other top-level folders are placed
</code></pre>
</blockquote>
<p>Note that <a href="https://pip.pypa.io/en/stable/reference/pip_uninstall/" rel="nofollow noreferrer"><code>pip uninstall</code></a> does not have the <code>--prefix</code> option, so there is no obvious way to uninstall packages installed this way. As a workaround, set <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONUSERBASE" rel="nofollow noreferrer"><code>PYTHONUSERBASE</code></a> to the prefix directory, e.g.:</p>
<pre><code>PYTHONUSERBASE=prefix-dir python3 -m pip uninstall package-name
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>Why it happens</h3>
<p>When running <code>pip install</code> from source, it invokes <a href="https://pip.pypa.io/en/latest/reference/pip_install.html#build-system-interface" rel="nofollow">a build process</a>, which runs the setup.py script and passes to it the <code>--install-option</code> you pass in.</p>
<p>Installing wheels however does not invoke this build process, and no decision has been made about supporting these use cases, as of yet (see <a href="https://github.com/pypa/pip/issues/2677#issuecomment-94958884" rel="nofollow">the ongoing discussion</a>).</p>
<h3>Possible solution</h3>
<p>However, <code>pip install</code> <strong>does</strong> currently support installing to custom locations with the options <a href="https://pip.pypa.io/en/latest/reference/pip_install.html#cmdoption--user" rel="nofollow"><code>--user</code></a> and <a href="https://pip.pypa.io/en/latest/reference/pip_install.html#cmdoption--root" rel="nofollow"><code>--root</code></a>, which may achieve what you are looking for.</p>
<h3>Caveats</h3>
<p>As mentioned in the comments, there seems to be <a href="https://github.com/pypa/pip/issues/3029" rel="nofollow">an issue</a> with detecting whether the package is already installed when using <code>--root</code>, and the workaround could be using <code>--upgrade</code> or <code>--ignore-installed</code> options.</p>
<p>Additionally, using <code>--root</code> will install the module to <code>user_defined_path/python34/Lib/site-packages/</code>. This makes this option useful for installing the library on a different drive or a non-default python installation, but does not allow installing to a specific folder within a specific directory. </p>
</div>
<div class="post-text" itemprop="text">
<p>See another way of solving your problem would be by using 7-zip and unzipping the whl file which inside the unzipped directory  will give you a proper folder of the python module which you can then copy and paste wherever you wish </p>
</div>
<span class="comment-copy"><code>pip install</code> from source invokes a build process, which runs the <code>setup.py</code> script and thus accepts <code>--install-options</code>for this step. Installing wheels however does not invoke this build process, and no decision has been made about <a href="https://github.com/pypa/pip/issues/2677#issuecomment-94958884" rel="nofollow noreferrer">supporting these use cases (as of yet)</a>.</span>
<span class="comment-copy">However, for some cases, pip install does currently support <a href="https://pip.pypa.io/en/latest/reference/pip_install.html#cmdoption--user" rel="nofollow noreferrer"><code>--user</code></a> and <a href="https://pip.pypa.io/en/latest/reference/pip_install.html#cmdoption--root" rel="nofollow noreferrer">--root</a>, which may achieve what you are looking for.</span>
<span class="comment-copy">@tutuDajuju: What are the "some cases"?  Does it accept those arguments for wheels, or are you saying it depends on even more specific things (like it works for some packages but not others)?</span>
<span class="comment-copy">These arguments work for wheels, what I meant is that these arguments do not cover all possible scenarios (which <code>--install-option</code> does), e.g <code>--root=$DIR</code> will install a package (incl. a <code>wheel</code>) to <code>$DIR/usr/local/lib/python2.7/site-packages</code>.</span>
<span class="comment-copy">@tutuDajuju Using <code>--root</code> with the .whl worked but it kept saying "Requirement already satisfied" so i had to use <code>pip install --upgrade --root="$path" $file_path</code>, despite having no existing installation. I don't understand why this happened, perhaps you could offer an explanation? In any case, can you post your solution as an answer so I can mark it as correct?</span>
<span class="comment-copy">This explains why the error is raised, but doesn't answer the basic question of "Is there a way to install a wheel to a specific directory (not relative to user or root)?"  Are you saying that is impossible?</span>
<span class="comment-copy">What do you mean not relative to root? root answers the question, but <code>--install-option</code> still has many more flexible options as detailed <a href="https://github.com/pypa/pip/issues/2677#issuecomment-130521253" rel="nofollow noreferrer">in the github issue you commented on</a>.</span>
<span class="comment-copy">As your comment said, using <code>--root==$DIR</code> will install to <code>$DIR/usr/local/lib/python2.7/site-packages</code>.  What if I want to install to <code>/my/own/directory</code>?</span>
<span class="comment-copy">Exactly, the only thing you can do is use <code>--no-use-wheel</code> / <code>--no-binary</code> together with <code>--install-options</code> as usual. There are even more install schemes that <a href="https://github.com/pypa/pip/issues/2677#issuecomment-94958884" rel="nofollow noreferrer">won't work with wheels</a>.</span>
<span class="comment-copy">Alternatively, you could hack around with a symlink.</span>
