<div class="post-text" itemprop="text">
<p>I have been reading about division and integer division in Python and the differences between division in Python2 vs Python3. For the most part it all makes sense. Python 2 uses integer division only when both values are integers. Python 3 always performs true division. Python 2.2+ introduced the <code>//</code> operator for integer division.</p>
<p>Examples other programmers have offered work out nice and neat, such as:</p>
<pre><code>&gt;&gt;&gt; 1.0 // 2.0      # floors result, returns float
0.0
&gt;&gt;&gt; -1 // 2         # negatives are still floored
-1
</code></pre>
<p><strong>How is <code>//</code> implemented? Why does the following happen:</strong></p>
<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; x = 0.5 
&gt;&gt;&gt; y = 0.1
&gt;&gt;&gt; x / y
5.0
&gt;&gt;&gt; math.floor(x/y)
5.0
&gt;&gt;&gt; x // y
4.0
</code></pre>
<p>Shouldn't <code>x // y = math.floor(x/y)</code>? These results were produced on python2.7, but since x and y are both floats the results should be the same on python3+. If there is some floating point error where <code>x/y</code> is actually <code>4.999999999999999</code> and <code>math.floor(4.999999999999999) == 4.0</code> wouldn't that be reflected in <code>x/y</code>?</p>
<p>The following similar cases, however, aren't affected:</p>
<pre><code>&gt;&gt;&gt; (.5*10) // (.1*10)
5.0
&gt;&gt;&gt; .1 // .1
1.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I didn't find the other answers satisfying. Sure, <code>.1</code> has no finite binary expansion, so our hunch is that representation error is the culprit. But that hunch alone doesn't really explain why <code>math.floor(.5/.1)</code> yields <code>5.0</code> while <code>.5 // .1</code> yields <code>4.0</code>.</p>
<p>The punchline is that <code>a // b</code> is <strong>actually</strong> doing <code>floor((a - (a % b))/b)</code>, as opposed to simply <code>floor(a/b)</code>.</p>
<h2>.5 / .1 is <em>exactly</em> 5.0</h2>
<p>First of all, note that the result of <code>.5 / .1</code> is <strong>exactly</strong> <code>5.0</code> in Python. This is the case even though <code>.1</code> cannot be exactly represented. Take this code, for instance:</p>
<pre><code>from decimal import Decimal

num = Decimal(.5)
den = Decimal(.1)
res = Decimal(.5/.1)

print('num: ', num)
print('den: ', den)
print('res: ', res)
</code></pre>
<p>And the corresponding output:</p>
<pre><code>num:  0.5
den:  0.1000000000000000055511151231257827021181583404541015625
res:  5
</code></pre>
<p>This shows that <code>.5</code> can be represented with a finite binary expansion, but <code>.1</code> cannot. But it also shows that despite this, the result of <code>.5 / .1</code> <em>is</em> exactly <code>5.0</code>. This is because floating point division results in the loss of precision, and the amount by which <code>den</code> differs from <code>.1</code> is lost in the process.</p>
<p>That's why <code>math.floor(.5 / .1)</code> works as you might expect: since <code>.5 / .1</code> <em>is</em> <code>5.0</code>, writing <code>math.floor(.5 / .1)</code> is just the same as writing <code>math.floor(5.0)</code>.</p>
<h2>So why doesn't <code>.5 // .1</code> result in 5?</h2>
<p>One might assume that <code>.5 // .1</code> is shorthand for <code>floor(.5 / .1)</code>, but this is not the case. As it turns out, the semantics differ. This is even though the <a href="https://www.python.org/dev/peps/pep-0238/" rel="noreferrer">PEP says</a>:</p>
<blockquote>
<p>Floor division will be implemented in all the Python numeric
      types, and will have the semantics of</p>
<pre><code>    a // b == floor(a/b)
</code></pre>
</blockquote>
<p>As it turns out, the semantics of <code>.5 // .1</code> are <em>actually</em> equivalent to:</p>
<pre><code>floor((.5 - mod(.5, .1)) / .1)
</code></pre>
<p>where <code>mod</code> is the floating point remainder of <code>.5 / .1</code> rounded towards zero. This is made clear by reading the <a href="https://github.com/python/cpython/blob/829b49cbd2e4b1d573470da79ca844b730120f3d/Objects/floatobject.c#L578" rel="noreferrer">Python source code</a>.</p>
<p><em>This</em> is where the fact that <code>.1</code> can't be exactly represented by binary expansion causes the problem. The floating point remainder of <code>.5 / .1</code> is <strong>not</strong> zero:</p>
<pre><code>&gt;&gt;&gt; .5 % .1
0.09999999999999998
</code></pre>
<p>and it makes sense that it isn't. Since the binary expansion of <code>.1</code> is ever-so-slightly greater than the actual decimal <code>.1</code>, the largest integer <code>alpha</code> such that <code>alpha * .1 &lt;= .5</code> (in our finite precision math) is <code>alpha = 4</code>. So <code>mod(.5, .1)</code> is nonzero, and is roughly <code>.1</code>. Hence <code>floor((.5 - mod(.5, .1)) / .1)</code> becomes <code>floor((.5 - .1) / .1)</code> becomes <code>floor(.4 / .1)</code> which equals <code>4</code>.</p>
<p>And that's why <code>.5 // .1 == 4</code>.</p>
<h2>Why does <code>//</code> do that?</h2>
<p>The behavior of <code>a // b</code> may seem strange, but there's a reason for it's divergence from <code>math.floor(a/b)</code>. In his <a href="http://python-history.blogspot.com/2010/08/why-pythons-integer-division-floors.html" rel="noreferrer">blog</a> on the history of Python, Guido writes:</p>
<blockquote>
<p>The integer division operation (//) and its sibling, the modulo
  operation (%), go together and satisfy a nice mathematical
  relationship (all variables are integers):</p>
<pre><code>a/b = q with remainder r
</code></pre>
<p>such that</p>
<pre><code>b*q + r = a and 0 &lt;= r &lt; b
</code></pre>
<p>(assuming a and b are &gt;= 0).</p>
</blockquote>
<p>Now, Guido assumes that all variables are integers, but that relationship will still hold if <code>a</code> and <code>b</code> are floats, <em>if</em> <code>q = a // b</code>. If <code>q = math.floor(a/b)</code> the relationship <em>won't</em> hold in general. And so <code>//</code> might be preferred because it satisfies this nice mathematical relationship.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's because </p>
<pre><code>&gt;&gt;&gt; .1
0.10000000000000001
</code></pre>
<p><code>.1</code> cannot be precisely represented in binary</p>
<p>You can also see that </p>
<pre><code>&gt;&gt;&gt; .5 / 0.10000000000000001
5.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The issue is that Python will round the output as <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow">described here</a>. Since <code>0.1</code> cannot be represented exactly in binary, the result is something like <code>4.999999999999999722444243844000</code>. Naturally this becomes <code>5.0</code> when not using format. </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>This isn't correct, I'm afraid. .5 / .1 is 5.0 exactly. See: (.5/.1).as_integer_ratio(), which yields (5,1).</p>
</blockquote>
<p>Yes, <code>5</code> can be represented as <code>5/1</code>, that is true. But in order to see the fraction of the actual result Python gives due to the inexact representation, follow along.</p>
<p>First, import:</p>
<pre><code>from decimal import *
from fractions import Fraction
</code></pre>
<p>Variables for easy usage:</p>
<pre><code>// as_integer_ratio() returns a tuple
xa = Decimal((.5).as_integer_ratio()[0])
xb = Decimal((.5).as_integer_ratio()[1])
ya = Decimal((.1).as_integer_ratio()[0])
yb = Decimal((.1).as_integer_ratio()[1])
</code></pre>
<p>Yields the following values:</p>
<pre><code>xa = 1
xb = 2
ya = 3602879701896397
yb = 36028797018963968
</code></pre>
<p>Naturally, <code>1/2 == 5</code> and <code>3602879701896397 / 36028797018963968 == 0.1000000000000000055511151231</code>.</p>
<p>So what happens when we divide?</p>
<pre><code>&gt;&gt;&gt; print (xa/xb)/(ya/yb)
4.999999999999999722444243845
</code></pre>
<p>But when we want the integer ratio...</p>
<pre><code>&gt;&gt;&gt; print float((xa/xb)/(ya/yb)).as_integer_ratio()
(5, 1)
</code></pre>
<p>As stated earlier, <code>5</code> is <code>5/1</code> of course. That's where <code>Fraction</code> comes in:</p>
<pre><code>&gt;&gt;&gt; print Fraction((xa/xb)/(ya/yb))
999999999999999944488848769/200000000000000000000000000
</code></pre>
<p>And <a href="http://www.wolframalpha.com/input/?i=999999999999999944488848769%2F200000000000000000000000000" rel="nofollow">wolfram alpha</a> confirms that this is indeed <code>4.999999999999999722444243845</code>. </p>
<hr/>
<p><strong>Why don't you just do <code>Fraction(.5/.1)</code> or <code>Fraction(Decimal(.5)/Decimal(.1))</code>?</strong></p>
<p>The latter will give us the same <code>5/1</code> result. The former will give us <code>1249999999999999930611060961/250000000000000000000000000</code> instead. This results in <code>4.999999999999999722444243844</code>, similar but not the same result.</p>
</div>
<span class="comment-copy">Would you say that this qualifies as a bug in the interpreter, given the contradiction with the PEP?</span>
<span class="comment-copy">@zwol Rather than a bug in the interpreter, I'd say it's a bug in the PEP :). There are reasons to prefer <code>a // b</code> to <code>math.floor(a, b)</code>, and I can't see where the documentation acknowledges this, and the PEP's statement about <code>//</code>'s semantics seems to be clearly incorrect. I've added a blurb about this in the answer, if you're interested.</span>
<span class="comment-copy"><code>.5 // .1</code> is not equivalent to <code>floor((.5 - mod(.5, .1)) / .1)</code>; when you read the source, you missed the <code>if (div - floordiv &gt; 0.5) floordiv += 1.0;</code> part directly after the <code>floordiv = floor(div);</code> part. This means that it rounds instead of flooring.</span>
<span class="comment-copy">It's also important to note that <code>4.0</code> is the <i>correctly rounded</i> result - that is, if you took the real numbers represented by the two floating-point inputs <code>.5</code> and <code>.1</code> (not the real numbers .5 and .1), applied the ideal mathematical function f(x, y) = floor(x/y) with no intermediate rounding, and then chose as your return value the floating-point number closest to the real number result, <code>4.0</code> is what you would get. I haven't analyzed whether the floordiv implementation produces correctly-rounded results more frequently than applying floating-point division and floating-point floor...</span>
<span class="comment-copy">in sequence, and anyway, the relationship between <code>//</code> and <code>%</code> is likely more important to preserve.</span>
<span class="comment-copy">@J.Money: try <code>(0.1).as_integer_ratio()</code> or <code>format(0.1, '1.30f')</code></span>
<span class="comment-copy">This should not be the accepted answer. I guess technically it answers the OP's question, but there is no explanation. Please update your answer with a link such as the following to make it more complete: <a href="http://www.h-schmidt.net/FloatConverter/IEEE754.html" rel="nofollow noreferrer">h-schmidt.net/FloatConverter/IEEE754.html</a>, <a href="http://grouper.ieee.org/groups/754/" rel="nofollow noreferrer">grouper.ieee.org/groups/754</a>, <a href="https://en.wikipedia.org/wiki/IEEE_floating_point" rel="nofollow noreferrer">en.wikipedia.org/wiki/IEEE_floating_point</a></span>
<span class="comment-copy">@searchengine27 <code>.1 cannot be precisely represented in binary</code> does that not explain sufficiently? (also, other answers have given different levels of details, and user5248483 posted a link to the python 3 tutorial on floats that does a great job at explaining all the subtleties)</span>
<span class="comment-copy">not even close. Where are the formulas for floats? explanations of how things are actually represented? Saying "that doesn't work" is not equivalent to saying "this is how it works". Referencing IEEE 754 might be a start, but you haven't even made the effort to do that.</span>
<span class="comment-copy">Saying somebody else posted the right answer, does not make your answer right. It makes their answer right, and makes it more obvious that your answer is incomplete. Look, you can either sit here and cry about it in the comments because I called you out on it and you clearly take offense to that, or take the out I provided you and just fix your answer. EDIT: also, his answer is not complete either, because this is not a python specific problem. It affects any base 2 cpu (which I'm not aware of a non-base2 cpu)</span>
<span class="comment-copy">Excellent resource. That was the document I was looking for.</span>
<span class="comment-copy">This isn't correct, I'm afraid. <code>.5 / .1</code> is <code>5.0</code> <i>exactly</i>. See: <code>(.5/.1).as_integer_ratio()</code>, which yields <code>(5,1)</code>.</span>
<span class="comment-copy">You have to be careful here: <code>xa</code>, <code>xb</code>, <code>ya</code>, and <code>yb</code> are <code>Decimal</code> objects, not Python <code>float</code>s, so showing that <code>(xa/xb)/(ya/yb)</code> is <code>4.999...</code> merely demonstrates the arbitrary precision arithmetic that the <code>Decimal</code> class provides. If you write <code>Decimal(.5 / .1)</code> you'll see that <code>.5 / .1</code> is <i>exactly</i> <code>5.0</code> -- even though <code>.1</code> exhibits representation error, <code>.5 / .1</code> does <i>not</i>, because the error is lost in the division.</span>
