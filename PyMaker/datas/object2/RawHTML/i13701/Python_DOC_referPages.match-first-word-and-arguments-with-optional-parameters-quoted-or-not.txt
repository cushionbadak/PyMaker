<div class="post-text" itemprop="text">
<p>All, I'm attempting to parse instructions from users (stored as a single-line string) with the following characteristics:</p>
<ol>
<li>first word is a command- no spaces allowed, but can have leading or trailing spaces depending on how disciplined the user is</li>
<li>optional arguments after the command with either a comma or spaces (or both) separating the arguments</li>
<li>input in double quotes is considered a single argument, so commas inside double quotes aren't used to separate arguments (this is used to create lists).</li>
</ol>
<p>Examples of input and desired parsing (shown as a dictionary); single quotes start and end examples and are not a part of the string to be parsed..:</p>
<pre><code>'start'                       
{'cmd':'start'}
'  stop     '                
{'cmd':'stop'}
'start now'                   
{'cmd':'start','arg1':'now'}
' start     later   forward ,  back    ' 
{'cmd':'start','arg1':'later','arg2':'forward','arg3':'back}
'start    tomorrow  ,back, "Lucile,   Michael "    Oscar'
{'cmd':'start','arg1':tomorrow','arg2':'back','arg3':'Lucile,   Michael','arg4':'Oscar'}
</code></pre>
<p>I'm on PY3.4, but the critical issue is the RegEx, no real need for a python-specific implementation.</p>
</div>
<div class="post-text" itemprop="text">
<p>A single regular expression may be more difficult since it looks like you may want to handle an arbitrary number of arguments. You can extract the command and arguments in the format you give above using this function:</p>
<pre><code>import re

def parse(s):
  args = {}
  n = 1
  # recognizes a double-quoted argument
  q_arg_re = "^\s*,?\s*\"(.*?)\""
  # recognizes a single-word argument
  arg_re = "^\s*,?\s*(\w+)"
  arg = False
  while True:
    m = re.search(arg_re, s)
    if m:
      arg = m.groups()[0]
    else:
      m = re.search(q_arg_re, s)
      if m:
        arg = m.groups()[0]

    if arg:
      if 'cmd' in args:
        args['arg{}'.format(n)] = arg
        n += 1
      else:
        args['cmd'] = arg
      s = s[m.end(0):]
      arg = False
    else:
      break
  return args
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should consider using <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow">argparse</a> or <a href="https://docs.python.org/2/library/optparse.html" rel="nofollow">optparse</a> for python &lt; 2.7.</p>
</div>
<span class="comment-copy">Just to clarify, are you trying to take this as command line arguments or (I think this is what you mean) as string input from the user via something like <code>input()</code>? And is it necessary to allow escaped double-quotes in a double-quoted argument?</span>
<span class="comment-copy">My python variable is a string, not using input(); also, for curiosity, won't input() return a string anyway? No escaped double quotes are allowed.</span>
<span class="comment-copy">sorry, edited the question to clarify confusion, this is not a 'command line' parser- i meant that the input from users is a single line, stored as a string variable, no sys.argv here, so argparse doesn't really help.</span>
