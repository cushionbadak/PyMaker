<div class="post-text" itemprop="text">
<p>As many of you know already, sometimes Python rounds for instance 3.75.... to 3.7 rather than 3.8, which is of course a problem. (I'm on Python 3.)</p>
<p>Another user presented as a solution here a very nice function in Python that he called round_exact (you can find this in Stack Overflow by searching), but unfortunately even this function is suboptimal for my purposes, as it seems to consider a zero in the last decimal place always redundant and cuts it away.</p>
<p>(I mean, i would like to see 1.695 to be 1.70, if I wanted two decimals, rather than 1.7.)</p>
<p>So, I would still like to ask for additional opinions on how to deal with Python's shortcomings in rounding floats.</p>
</div>
<div class="post-text" itemprop="text">
<p>The decimal module allows precise control over rounding and it can retain trailing zeros:</p>
<pre><code>&gt;&gt;&gt; Decimal('1.695').quantize(Decimal('.01'), rounding=ROUND_HALF_UP)
Decimal('1.70')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For a numerical display, you should look to print two decimals instead of one.  That can be accomplished with a specialized formatted print statement.</p>
<pre><code>"{:.2f}".format(7.1) # prints 7.10
</code></pre>
<p>If you're concerned about there being decimal imprecision, look into the <a href="https://docs.python.org/2/library/decimal.html" rel="nofollow">decimal</a> module.  It provides up to 28 digits of accuracy and can be used to reliably print out those numbers as well.</p>
</div>
<span class="comment-copy">A zero in the last decimal place <i>is</i> redundant. You're looking for ways to print a number out, not round it.</span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/functions.html#round" rel="nofollow noreferrer">docs.python.org/2/library/functions.html#round</a> - has a brief explanation of the behavior and a link. (BTW, this is not a "Python issue" but one related to IEEE 754 and relative precision floats with a base2 encoding.)</span>
<span class="comment-copy"><i>"sometimes Python rounds for instance 3.75.... to 3.7 rather than 3.8"</i> - I just tested it and it rounds to 3.8. What exactly are you talking about?</span>
<span class="comment-copy">@StefanPochmann - Sometimes it will actually do something like that, e.g. <code>round(2.675, 2)</code> produces <code>2.67</code>. See <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer">the note in the documentation</a>.</span>
<span class="comment-copy">@TigerhawkT3 I know, but that's a different issue... 3.75, unlike 2.675, is easily represented exactly. I also know about for example <code>round(4.5, 0)</code> giving <code>4.0</code>. But the claim was for 3.75, where I doubt it. So I'd like to know what their actual problem is.</span>
<span class="comment-copy">This seems to work 100% perfectly. I can't thank you enough. However, I noticed that ROUND_UP is not the right rounding option for me. By changing that to ROUND_HALF_UP seems to give me the "Round to nearest, ties away from zero" behavior that I'm looking for. (See also: en.wikipedia.org/wiki/Rounding#Round_half_away_from_zero)</span>
<span class="comment-copy">Yes, it was indeed the decimal module that solved my problem, thanks for the tip.</span>
