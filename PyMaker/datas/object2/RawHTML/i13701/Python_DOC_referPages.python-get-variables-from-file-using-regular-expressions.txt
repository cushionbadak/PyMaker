<div class="post-text" itemprop="text">
<h3>Problem</h3>
<p>Given a file, for example:</p>
<pre><code>#Example
x = 'foo = {}'

bar = {
  'color': 'blue'
}

print('Hello World')
</code></pre>
<p><strong>Using regular expressions</strong>, the program will find variables names that are corresponding to <strong>dictionaries</strong> or <strong>set literals</strong> and print them. The output for the above would just be:</p>
<pre><code>bar
</code></pre>
<p>A line like this</p>
<pre><code>yes = { "no={}" }
</code></pre>
<p>Should only return yes.</p>
<hr/>
<p>The variables could be found with \w+? expression I'm just not sure where to start.</p>
<h3>Current code</h3>
<pre><code>for line in open('program.txt'):
   array = line.split(' ')

   for item in array:
      if '{' in item:
         print(array[0])
</code></pre>
<p><em>This only functions properly for basic examples and there are some problems. Multiable variables on the same line don't work either. Also it doesn't use Regular Expressions.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>You may do like this,</p>
<pre><code>&gt;&gt;&gt; s = '''#Example
x = 'foo = {}'

bar = {
  'color': 'blue'
}

print('Hello World')
yes = { "no={}" }'''
&gt;&gt;&gt; re.findall(r'^\s*(\w+)\s*=\s*\{[^}]*\}', s, re.M)
['bar', 'yes']
</code></pre>
<p><strong>or</strong></p>
<pre><code>&gt;&gt;&gt; [i for i in re.findall(r'\{(?:\{[^{}]*\}|[^{}])*\}|^\s*(\w+)\s*=\s*(?=\{)', s, re.M) if i]
['bar', 'yes']
&gt;&gt;&gt; 
</code></pre>
<p>If you want to define it as a function, you may use the below.</p>
<pre><code>def check(s):
    return [i for i in re.findall(r'\{(?:\{[^{}]*\}|[^{}])*\}|^\s*(\w+)\s*=\s*(?=\{)', s, re.M) if i]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't use regular expressions for this.</p>
<p>Well, that's probably a bit too strong.  Don't <em>just</em> use regular expressions for this.</p>
<p>Start by matching the code against this regex:</p>
<pre><code>(\w+)\s*=\s*(.*)
</code></pre>
<p>Then, take the second capturing group, and pass it through <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval()</code></a>.</p>
<p>To wit:</p>
<pre><code>results = {}
for line in file:
    match = re.match(r'(\w+)\s*=\s*(.*)')
    if match:
        try:
            results[match.group(1)] = ast.literal_eval(match.group(2))
        except ValueError:
            continue  # It wasn't a valid literal
</code></pre>
<p>Note that <code>ast.literal_eval()</code> does not handle set and byte literals in 2.x.  This is yet another reason to upgrade to Python 3.</p>
</div>
<span class="comment-copy">How would I modify the pattern so that it can find dictionaries in one line functions. Example: def check(): b = {} would output b.</span>
<span class="comment-copy">check now..........</span>
