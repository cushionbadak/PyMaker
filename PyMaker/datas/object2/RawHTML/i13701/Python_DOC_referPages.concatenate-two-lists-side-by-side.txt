<div class="post-text" itemprop="text">
<p>I am looking for the shortest way of doing the following (one line solution)</p>
<pre><code>a = ["a", "b", "c"]
b = ["w", "e", "r"]
</code></pre>
<p>I want the following output:</p>
<pre><code>q = ["a w", "b e", "c r"]
</code></pre>
<p>Of course this can be achieved by applying a for loop. But I am wondering if there is a smart solution to this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>str.join()</code> and <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow"><code>zip()</code></a> , Example -</p>
<pre><code>q = [' '.join(x) for x in zip(a,b)]
</code></pre>
<p>Example/Demo -</p>
<pre><code>&gt;&gt;&gt; a = ["a", "b", "c"]
&gt;&gt;&gt; b = ["w", "e", "r"]
&gt;&gt;&gt; q = [' '.join(x) for x in zip(a,b)]
&gt;&gt;&gt; q
['a w', 'b e', 'c r']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#zip"><code>zip</code></a> within a list comprehension :</p>
<pre><code>&gt;&gt;&gt; ['{} {}'.format(*i) for i in zip(a,b)]
['a w', 'b e', 'c r']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>More pythonic way;</p>
<pre><code>b = map(' '.join,zip(a,b))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = ["a", "b", "c"]
b = ["w", "e", "r"]

print(["{} {}".format(_a ,_b) for _a,_b in zip(a,b)])
['a w', 'b e', 'c r']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>one line solution:</strong></p>
<pre><code>[aa+" "+bb for aa,bb in zip(a,b)]
</code></pre>
<p><strong>output:</strong></p>
<pre><code>['a w', 'b e', 'c r']
</code></pre>
<p><strong>one liner without zip:</strong></p>
<pre><code>[a[i]+" "+b[i] for i in range(len(a))]
</code></pre>
<p><strong>output:</strong></p>
<pre><code>['a w', 'b e', 'c r']
</code></pre>
</div>
<span class="comment-copy">import itertools ;print [i for i in itertools.imap((lambda x, y: x+y), a, b)]</span>
<span class="comment-copy">I think list comprehensions are more pythonic.</span>
