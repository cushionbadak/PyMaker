<div class="post-text" itemprop="text">
<p>A <a href="https://docs.python.org/3/library/tempfile.html#tempfile.SpooledTemporaryFile" rel="nofollow">SpooledTemporaryFile</a> from the tempfile module in Python is a temporary file created in the system memory rather than on the disc. However, it can be rolled over to the disc at any point by calling the appropriately named <code>rollover</code> method. Once the file is closed, it will be deleted, and that is precisely what I am trying to prevent.</p>
<p>The <a href="https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile" rel="nofollow">NamedTemporaryFile</a> has a <code>delete</code> keyword argument in its constructor that does the job, but the same isn't available for SpooledTemporaryFile. One way to solve this is by making a copy of this file before it is closed. This requires additional <code>copy</code> operations, and precautions must be taken to avoid race conditions. It also requires more resources. Are there any workarounds?</p>
</div>
<div class="post-text" itemprop="text">
<p>Even though <a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="nofollow">io.StringIO</a> is available at my disposal, I decided to take a look at the source code - <a href="https://github.com/python/cpython/blob/master/Lib/tempfile.py" rel="nofollow">tempfile.py</a>. This is how the chain of events progresses in that module:</p>
<ul>
<li>A <code>SpooledTemporaryFile</code> is initiated as an <code>io.StringIO</code> or <code>io.BytesIO</code> object.</li>
<li>When it is rolled over to the disc, a <code>TemporaryFile</code> file object is created, and the IO stream object is abandoned for garbage collection.</li>
<li>This new file is different for several platforms. On Windows or CygWin systems this new file is a <code>NamedTemporaryFile</code>, the close method of which is accessed through a wrapper class called <code>_TemporaryFileCloser</code>. We can override some methods and jump through some hoops <sup><strong>*</strong></sup> to eventually set <code>delete=False</code> in order to achieve our goal. </li>
<li>On posix systems, the new file is just another volatile IO stream <em>(sigh...)</em></li>
</ul>
<p><strong>*</strong> The workaround is to subclass it and override the <code>rollover</code> method. The code below works on both posix and Windows systems. On Windows, you may skip the <code>rollover</code> part - only the <code>__init__</code> is necessary.</p>
<pre><code>from tempfile import SpooledTemporaryFile

class CustomSpooled(SpooledTemporaryFile):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # This dict will be passed on to the NamedTempFile constructor one we
        # roll over our file. We are adding the delete=False argument.
        self._TemporaryFileArgs = {'mode': mode, 'buffering': buffering,
                                   'suffix': suffix, 'prefix': prefix,
                                   'encoding': encoding, 'newline': newline,
                                   'dir': dir, 'delete': False}

    def rollover(self):
        # This is overidden to get that NamedTemperoraryFile
        # Everythng else is just the same
        if self._rolled: return
        file = self._file
        newfile = self._file = NamedTemporaryFile(**self._TemporaryFileArgs)
        del self._TemporaryFileArgs

        newfile.write(file.getvalue())
        newfile.seek(file.tell(), 0)

        self._rolled = True
</code></pre>
<hr/>
<blockquote>
<p><sup><strong>CAUTION! This is evidently a dirty hack, therefore I do not recommend this for production code or anything of the sort.</strong></sup></p></blockquote></div>
<span class="comment-copy">If you ultimately want to keep the file, why not just use the <code>NamedTemporaryFile(..., delete=False)</code>? What is your use case?</span>
<span class="comment-copy">@mhawke The fact that files kept in memory can be read/written quickly than their counterpart is why I am preferring it this way. I believe this is one of the major reasons why <code>SpooledTemporaryFile</code> exists.</span>
<span class="comment-copy">Maybe use a  memory mapped file? See <a href="https://docs.python.org/2/library/mmap.html#module-mmap" rel="nofollow noreferrer">mmap</a> module.</span>
<span class="comment-copy">@mhawke Thank you. I shall look in to it.</span>
