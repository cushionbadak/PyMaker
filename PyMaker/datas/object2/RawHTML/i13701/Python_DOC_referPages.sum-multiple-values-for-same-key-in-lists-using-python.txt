<div class="post-text" itemprop="text">
<p>I have a list which looks like this:</p>
<pre><code>(151258350, 2464)
(151258350, 56)
(151262958, 56)
(151258350, 56)
(151262958, 112)
(151262958, 112)
(151259627, 56)
(151262958, 112)
(151262958, 56)
</code></pre>
<p>And I want a result that looks like this:</p>
<pre><code>151259627 56
151262958 448
151258350 2576
</code></pre>
<p>And here's my code: </p>
<pre><code>for key, vals in d.items():
    tempList.append((key, reduce(add, vals))) 
</code></pre>
<p>here, d is the list with the key-value pair. tempList is the List in which the values will be appended after summing them by key. and add is a fuction:</p>
<pre><code>def add(x, y): return x+y
</code></pre>
<p>If this question has already been asked, please point me there as I was unsuccessful in finding it myself.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>num_list = [(151258350, 2464),
(151258350, 56),
(151262958, 56),
(151258350, 56),
(151262958, 112),
(151262958, 112),
(151259627, 56),
(151262958, 112),
(151262958,56)]
num_dict = {}
for t in num_list:
    if t[0] in num_dict:
        num_dict[t[0]] = num_dict[t[0]]+t[1]
    else:
        num_dict[t[0]] = t[1]

for key,value in num_dict.items():
    print "%d %d" %(key,value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter">Counter</a>:</p>
<pre><code>&gt;&gt;&gt; l = [(151258350, 2464),
(151258350, 56),
(151262958, 56),
(151258350, 56),
(151262958, 112),
(151262958, 112),
(151259627, 56),
(151262958, 112),
(151262958, 56)]
&gt;&gt;&gt; c = Counter()
&gt;&gt;&gt; for k, v in l:
        c[k] += v

&gt;&gt;&gt; c
Counter({151258350: 2576, 151262958: 448, 151259627: 56})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use Counter <a href="https://docs.python.org/2/library/collections.html#counter-objects" rel="nofollow">counters</a></p>
<pre><code>from collections import Counter

cnt=Counter()
for key,value in l:
    cnt[key] += value

print cnt
</code></pre>
<blockquote>
<p>part 2</p>
</blockquote>
<p>if you found "Animesh's" answer interesting, you can try it in a simpler way: this will not need any imports. Without using .get()</p>
<pre><code>l = [(151258350, 2464),                                                     
   (151258350, 56),
   (151262958, 56),
   (151258350, 56),
   (151262958, 112),
   (151262958, 112),
   (151259627, 56),
   (151262958, 112),
   (151262958, 56)]

count={}
for k,v in l:
     if k in count:
         count[k] += v
     else:
         count[k]=v
print count
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simplest approach would be to use <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow">defaultdict</a></p>
<pre><code>result = defaultdict(int)
for key, value in source:
    result[key] += value

# if you really want result as a list of tuples
rslt = list(result.items())
</code></pre>
<p>If your <code>source</code> is actually a dict (not a list of tuples as you descirbed it in the question), replace <code>for key, value in source:</code> with <code>for key, value in source.iteritems():</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a simple one-liner without importing any library:</p>
<pre><code>r = dict(set((a, sum(y for x, y in t if x == a)) for a, b in t))
</code></pre>
</div>
<span class="comment-copy">What is <code>d</code>? What is <code>tempList</code>? What is <code>add</code>? What is the question?</span>
<span class="comment-copy"><code>d.items()</code> ? Seems like you have a dictionary, but you say you have a list?</span>
<span class="comment-copy">@juanchopanza - added clarification for your question. Thanks for stopping by this trivial question and leaving your comments. They're asked by those who are still beginners in a scripting language.</span>
<span class="comment-copy">@Nir Being a beginner in a programming language is not a problem. It is about asking clear, concise questions without people having to second-guess you.</span>
<span class="comment-copy">@juanchopanza, thanks for the tip. That was bonus learning :-)</span>
<span class="comment-copy">Don’t do <code>dict.get(key)</code> to check if a key exists in a dictionary. Use <code>key in dict</code>.</span>
<span class="comment-copy">What is the advantage of <code>key in dict</code> over <code>dict.get</code>?</span>
<span class="comment-copy"><code>dict.get(key)</code> returns the <i>value</i> (<code>dict[key]</code>) if the key exists, or <code>None</code> as the fallback value if the key does not exist. It does not actually check if the key exists in the dictionary. For example, with a dictionary <code>d = { 'foo': None, 'bar': 0 }</code>, neither of those keys will be reported as existing in the dictionary (because <code>d['foo']</code> is <code>None</code>, and <code>d['foo']</code> returns a false-ish value).</span>
<span class="comment-copy">Thanks for the explanation. Modified the code.</span>
<span class="comment-copy">Could you paste your <code>num_list</code>?</span>
<span class="comment-copy">Keys in dictionaries are by design unique, so doing <code>+=</code> on <code>cnt[key]</code> is not necessary because the key will not exist yet if you iterate over the dictionary <code>d</code>. And if you have a dictionary as a base, you can just do <code>Counter(d)</code> to create a counter from it. But since OP has multiple identical “keys”, I don’t believe that they have a dictionary.</span>
<span class="comment-copy">@poke i have edited them now... but now it looks like your code....thanks for pointing out the mistake</span>
<span class="comment-copy"><code>source</code> cannot be a dictionary because OP has multiple identical keys—in dictionaries, the key would be unique.</span>
<span class="comment-copy">Other than that note, the answer is perfectly fine though, so I don’t know why this is being downvoted…</span>
<span class="comment-copy">@poke it's a bit unclear from the question, as the code OP had clearly used <code>items</code>, which is present on dicts, but not on lists... And question said nothing about <code>AttributeError</code> that it would cause. So I included both approaches. As of downvote - probably someone haven't read the answer thoughtfully :)</span>
