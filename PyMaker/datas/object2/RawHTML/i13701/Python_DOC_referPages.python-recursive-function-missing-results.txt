<div class="post-text" itemprop="text">
<p>Coming from <a href="https://stackoverflow.com/questions/32102420/python-recursively-appending-list-function">Python recursively appending list function</a> 
Trying to recursively get a list of permissions associated with a file structure.</p>
<p>I have this function:</p>
<pre><code>def get_child_perms(self, folder, request, perm_list):
        # Folder contains other folders
        if folder.get_children():
            # For every sub-folder
            return [self.get_child_perms(subfolder, request, perm_list) for subfolder in folder.get_children()]
        return folder.has_read_permission(request)
</code></pre>
<p>That returns all the results except the folders that contain other folders.</p>
<pre><code>folder &lt;- Missing (allowed)
    subfolder &lt;- Missing (restricted)
        subsubfolder &lt;- Get this (restricted)
            files
</code></pre>
<p>Output from function would be 
[True, False, False]</p>
<p>another case would be, where A = allowed, R = restricted</p>
<pre><code>folder  A
    subfolder   A
        subsubfolder    R
            files
        files
    subfolder   R
        files
    subfolder   A
        subsubfolder    A
            files
        files
    subfolder   A
        files
    files
</code></pre>
<p>Output would be 
[True,True,False,False,True,True,True]</p>
</div>
<div class="post-text" itemprop="text">
<p>The basic issue occurs you are only returning the <code>folder permission</code> , when folder does not have any children , when it has children, you are not including the <code>folder.has_read_permission(request)</code> in your return result , which is most probably causing you issue. You need to do -</p>
<pre><code>def get_child_perms(self, folder, request, perm_list):
        # Folder contains other folders
        if folder.get_children():
            # For every sub-folder
            return [folder.has_read_permission(request)] + [self.get_child_perms(subfolder, request, perm_list) for subfolder in folder.get_children()]
        return [folder.has_read_permission(request)]
</code></pre>
<p>This should result in (not tested) -</p>
<pre><code>[folderperm [subfolderperm [subsubfolderperm]]
</code></pre>
<hr/>
</div>
<div class="post-text" itemprop="text">
<p>why not <a href="https://docs.python.org/3/library/os.html?highlight=walk#os.walk" rel="nofollow"> os.walk</a></p>
<blockquote>
<p>When topdown is True, the caller can modify the dirnames list in-place
  (perhaps using del or slice assignment), and walk() will only recurse
  into the subdirectories whose names remain in dirnames; this can be
  used to prune the search, impose a specific order of visiting, or even
  to inform walk() about directories the caller creates or renames
  before it resumes walk() again. Modifying dirnames when topdown is
  False is ineffective, because in bottom-up mode the directories in
  dirnames are generated before dirpath itself is generated.</p>
</blockquote>
<p>for example you can build generator (lazy list) that generates only non restricted directories</p>
<pre><code>for (dirpath, dirnames, filenames) in os.walk("top_path"):
    if restricted(dirpath):
        del dirnames
        continue
    yield (dirpath,tuple(filenames))
</code></pre>
</div>
<span class="comment-copy">What are you really trying to do? Seems like list is not the correct choice of data structure in your case.</span>
<span class="comment-copy">@AnandSKumar and others, for reference: <a href="https://stackoverflow.com/questions/32102420/python-recursively-appending-list-function" title="python recursively appending list function">stackoverflow.com/questions/32102420/â€¦</a></span>
<span class="comment-copy">I know there is a way to recursively store build perm_list to hold all these results, also added output for simple case</span>
<span class="comment-copy">Are you sure you want them all in a flattened list?</span>
<span class="comment-copy">Works perfectly, list is not flattened but might be better</span>
<span class="comment-copy">Not an actual filesystem, just django-filer</span>
<span class="comment-copy">when you can yield booleans</span>
