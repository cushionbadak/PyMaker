<div class="post-text" itemprop="text">
<p>I have this dict below and I am not sure how to loop it through to get the correct data that I want,</p>
<pre><code>py_dict = {'age': {0: 10, 1: 30.0, 2: 19.0}, 'name': {0: u'Michael', 1: u'Andy', 2: u'Justin'}}

for item in py_dict:
    print("Name:",item[0])
    print("Age:", item[1])
    print("")
</code></pre>
<p>Result,</p>
<pre><code>('Name:', 'a')
('Age:', 'g')

('Name:', 'n')
('Age:', 'a')
</code></pre>
<p>But what I want is,</p>
<pre><code>Name: Michael
Age:  10

Name: Andy
Age:  30

and so on....
</code></pre>
<p><strong>EDIT:</strong></p>
<pre><code>py_dict = pandas_df.to_dict()
print py_dict

   age     name
0  NaN  Michael
1   30     Andy
2   19   Justin
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are thinking about looping through dictionaries wrongly, when you do -</p>
<pre><code>for i in dict:
</code></pre>
<p><code>i</code> is actually the key in the dictionary , not the value. Example -</p>
<pre><code>&gt;&gt;&gt; d = {1:2,3:4}
&gt;&gt;&gt; for i in d:
...     print(i)
...
1
3
</code></pre>
<p>As you can see , it printed the <code>keys</code> not the values. So if you need the keys as well as values, iterate over <code>iteritems()</code> (for Python 2.x) , or <code>items()</code> (for Python 3.x) . Both return a list of tuples where the first element of tuple is the key and second element is the value.</p>
<p>Secondly, after that, you are only getting the dictionaries for each <code>name</code> as well as <code>age</code> separately , if you want to get them together, I would suggest going through the keys of one of them and getting <code>name</code> and <code>age</code> using that. Example -</p>
<pre><code>py_dict = {'age': {0: 10, 1: 30.0, 2: 19.0}, 'name': {0: u'Michael', 1: u'Andy', 2: u'Justin'}}

for key in py_dict['name']:
    print "Name:",py_dict['name'][key]
    print "Age:", py_dict['age'][key]
    print
</code></pre>
<p>Example/Demo -</p>
<pre><code>&gt;&gt;&gt; py_dict = {'age': {0: 10, 1: 30.0, 2: 19.0}, 'name': {0: u'Michael', 1: u'Andy', 2: u'Justin'}}
&gt;&gt;&gt; 
&gt;&gt;&gt; for key in py_dict['name']:
...     print "Name:",py_dict['name'][key]
...     print "Age:", py_dict['age'][key]
...     print
... 
Name: Michael
Age: 10

Name: Andy
Age: 30.0

Name: Justin
Age: 19.0
</code></pre>
<p>Another note, you seem to be using <code>Python 2.x</code> , in which case <code>print</code> is a statement , not a function, if you want the print function, you would need to do - <code>from __future__ import print_function</code> . But you do not really need them, use them as statements, as I did above.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using the same dictionary, this method also works.</p>
<pre><code>py_dict = {'age': {0: 10, 1: 30.0, 2: 19.0}, 'name': {0: u'Michael', 1: u'Andy', 2: u'Justin'}}

for index, name in py_dict['name'].items():
    print("Name: " + name)
    print("Age: " + str(py_dict['age'][index]))
    print("")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have to keep your data structured that way, do:</p>
<pre><code>#!/usr/bin/env python3
py_dict = {'age': {0: 10, 1: 30.0, 2: 19.0}, 'name': {0: u'Michael', 1: u'Andy', 2: u'Justin'}}

for i in range(len(py_dict['age'])):
    print('Name: ', py_dict['name'][i]);
    print('Age: ', py_dict['age'][i]);
</code></pre>
<p>But it would be better to refactor your code like:</p>
<pre><code>#!/usr/bin/env python3
py_dict = [{'age':10,'name':'Michael'},{'age':30,'name':'Andy'},{'age':19,'name':'Justin'}]

for item in py_dict:
    print('Name: ', item['name'])
    print('Age: ', item['age'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think for dynamic purpose of dict and elements this code can work:</p>
<pre><code>for j in py_dict.values():
    for k in j.keys():
        for i in py_dict.keys():
             print py_dict[i][k]
</code></pre>
</div>
<span class="comment-copy">Take a look at this section of the tutorial - <a href="https://docs.python.org/3/tutorial/datastructures.html#looping-techniques" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
<span class="comment-copy">Thank you very much for the details answer!</span>
<span class="comment-copy">Glad I could be helpful. I would also like to advice you to accept an answer (when you find it has answered your question satisfactorily) ,it would be helpful for the community.</span>
<span class="comment-copy">I just did. thanks.</span>
<span class="comment-copy">Thanks. How can turn my data into this format - <code>[{'age':10,'name':'Michael'},{'age':30,'name':'Andy'},{'age':19,'name':'Justin'}]</code>? Please see my edit above</span>
<span class="comment-copy">Oh, I was just saying that it would probably be better to keep the data in the second format if you were the one designing the format of your data. But since you aren't and the data is output from a database, it's fine to just use the first method</span>
<span class="comment-copy">Pandas designs that lol</span>
