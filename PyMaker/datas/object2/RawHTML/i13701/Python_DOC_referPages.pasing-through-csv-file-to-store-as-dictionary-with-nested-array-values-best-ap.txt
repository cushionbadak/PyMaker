<div class="post-text" itemprop="text">
<p>I am trying to take this csv file and parse and store it in a form of a dictionary (sorry if I use the terms incorrectly I am currently learning). The first element is my key and the rest will be values in a form of nested arrays.</p>
<pre><code>targets_value,11.4,10.5,10,10.8,8.3,10.1,10.7,13.1
targets,Cbf1,Sfp1,Ino2,Opi1,Cst6,Stp1,Met31,Ino4
one,"9.6,6.3,7.9,11.4,5.5",N,"8.4,8.1,8.1,8.4,5.9,5.9",5.4,5.1,"8.1,8.3",N,N
two,"7.0,11.4,7.0","4.8,5.3,7.0,8.1,9.0,6.1,4.6,5.0,4.6","6.3,5.9,5.9",N,"4.3,4.8",N,N,N
three,"6.0,9.7,11.4,6.8",N,"11.8,6.3,5.9,5.9,9.5","5.4,8.4","5.1,5.1,4.3,4.8,5.1",N,N,11.8
four,"9.7,11.4,11.4,11.4",4.6,"6.2,7.9,5.9,5.9,6.3","5.6,5.5","4.8,4.8,8.3,5.1,4.3",N,7.9,N
five,7.9,N,"8.1,8.4",N,"4.3,8.3,4.3,4.3",N,N,N
six,"5.7,11.4,9.7,5.5,9.7,9.7","4.4,7.0,7.7,7.5,6.9,4.9,4.6,4.9,4.6","7.9,5.9,5.9,5.9,5.9,6.3",6.7,"5.1,4.8",N,7.9,N
seven,"6.3,11.4","5.2,4.7","6.3,6.0",N,"8.3,4.3,4.8,4.3,5.1","9.8,9.5",N,8.4
eight,"11.4,11.4,5.9","4.4,6.3,6.0,5.6,7.6,7.1,5.1,5.3,5.1,4.9","6.3,6.3,5.9,5.9,6.6,6.6","5.3,5.2,7.0","8.3,4.3,4.3,4.8,4.3,4.3,8.3,4.8,8.3,5.1","9.2,7.4","9.4,9.3,7.9",N
nine,"9.7,9.7,11.4,9.7","5.2,4.6,5.5,6.5,4.5,4.6,5.5","6.3,5.9,5.9,9.5,6.5",N,"4.3,5.1,8.3,8.3,4.3,4.3,4.3,4.8",8.0,8.6,N
ten,"9.7,9.7,9.7,11.4,7.9","5.2,4.6,5.5,6.5,4.5,4.6,5.5","6.3,5.9,5.9,9.5,6.5",5.7,"4.3,4.3,4.3,5.1,8.3,8.3,4.3,4.3,4.3,4.8",8.0,8.6,N
YPL250C_Icy2,"11.4,6.1,11.4",N,"6.3,6.0,6.6,7.0,10.0,6.5,9.5,7.0,10.0",7.1,"4.3,4.3",9.2,"10.7,9.5",N
,,,,,,,,
,,,,,,,,
</code></pre>
<p>The issue was that in each line, some columns are a quotes because of multiple values per cell, and some only have a single entry but no quote. And cells that had no value input were inserted with an N. Since there was a mixture of quotes and non quotes, and numbers and non numbers.</p>
<p>Wanted the output to look something like this:</p>
<pre><code>{'eight': ['11.4,11.4,5.9', '4.4,6.3,6.0,5.6,7.6,7.1,5.1,5.3,5.1,4.9', '6.3,6.3,5.9,5.9,6.6,6.6', '5.3,5.2,7.0', '8.3,4.3,4.3,4.8,4.3,4.3,8.3,4.8,8.3,5.1', '9.2,7.4', '9.4,9.3,7.9', 'N'], 

'ten': ['9.7,9.7,9.7,11.4,7.9', '5.2,4.6,5.5,6.5,4.5,4.6,5.5', '6.3,5.9,5.9,9.5,6.5', '5.7', '4.3,4.3,4.3,5.1,8.3,8.3,4.3,4.3,4.3,4.8', '8.0', '8.6', 'N'], 

'nine': ['9.7,9.7,11.4,9.7', '5.2,4.6,5.5,6.5,4.5,4.6,5.5', '6.3,5.9,5.9,9.5,6.5', 'N', '4.3,5.1,8.3,8.3,4.3,4.3,4.3,4.8', '8.0', '8.6', 'N']
}
</code></pre>
<p>I wrote a script to clean it and store it, but was not sure if my script was "too long for no reason". Any tips?</p>
<pre><code>motif_dict = {}
with open(filename, "r") as file:
    data = file.readlines()
    for line in data:
        if ',,,,,,,,' in line:
            continue
        else:
            quoted_holder = re.findall(r'"(\d.*?\d)"' , line)
            #reverses the order of the elements contained in the array
            quoted_holder = quoted_holder[::-1]
            new_line = re.sub(r'"\d.*?\d"', 'h', line).split(',')
            for position,element in enumerate(new_line):
                if element == 'h':
                    new_line[position] = quoted_holder.pop()
        motif_dict[new_line[0]] = new_line[1:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's a <a href="https://docs.python.org/3/library/csv.html" rel="nofollow"><code>csv</code></a> module which makes working with csv files much easier.  In your case, your code becomes</p>
<pre><code>import csv

with open("motif.csv","r",newline="") as fp:
    reader = csv.reader(fp)
    data = {row[0]: row[1:] for row in reader if row and row[0]}
</code></pre>
<p>where the <code>if row and row[0]</code> lets us skip rows which are empty or have an empty first element.  This produces (newlines added)</p>
<pre><code>&gt;&gt;&gt; data["eight"]
['11.4,11.4,5.9', '4.4,6.3,6.0,5.6,7.6,7.1,5.1,5.3,5.1,4.9', 
 '6.3,6.3,5.9,5.9,6.6,6.6', '5.3,5.2,7.0',
 '8.3,4.3,4.3,4.8,4.3,4.3,8.3,4.8,8.3,5.1', 
 '9.2,7.4', '9.4,9.3,7.9', 'N']
&gt;&gt;&gt; data["ten"]
['9.7,9.7,9.7,11.4,7.9', '5.2,4.6,5.5,6.5,4.5,4.6,5.5',
 '6.3,5.9,5.9,9.5,6.5', '5.7', '4.3,4.3,4.3,5.1,8.3,8.3,4.3,4.3,4.3,4.8', 
 '8.0', '8.6', 'N']
</code></pre>
<p>In practice, for processing, I think you'd want to replace 'N' with None or some other object as a missing marker, and make every value a list of floats (even if it's only got one element), but that's up to you. </p>
</div>
<span class="comment-copy"><i>strikes table</i> This reminds me of a Raymond Hettinger example, it's that beautiful.</span>
<span class="comment-copy">Wow thank you so much! I had no idea that a module existed for this, would have saved me a load of time. Sorry I had one more question, is it possible to use the module to set the values as a tuple instead of an array? This is so I can do calculations with them without worrying about matching the wrong elements, since each one has 8 elements corresponding to another list of 8 values.</span>
<span class="comment-copy">wow, thanks melwil. Found his "Transforming Code into Beautiful, Idiomatic Python" video. Awesome, its beautiful.</span>
