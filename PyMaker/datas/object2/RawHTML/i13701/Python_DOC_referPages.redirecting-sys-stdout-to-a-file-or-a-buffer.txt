<div class="post-text" itemprop="text">
<p>I am working in Python 3.4, and I have behavior that I don't understand: if I redirect stdout to a file, I am able to capture text from child processes. However, when I redirect to a Python file object, I stop capturing that output. I would love an explanation of the (following) behavior.</p>
<p>I have:</p>
<pre><code>from multiprocessing import Process

def worker():
    print('forked output')

def output():
    print('redirected')
    p = Process(target=worker)
    p.daemon = True
    p.start()
    p.join()  # wait for subprocess to terminate
    print('end')
</code></pre>
<p>The <code>redirect_stdout</code> context manager in Python 3.4 makes grabbing stdout easy (in this instance).</p>
<pre><code>from contextlib import redirect_stdout
from sys import stdout
from tempfile import TemporaryFile


with TemporaryFile(mode='w+', encoding=stdout.encoding) as buf:
    with redirect_stdout(buf):
        output()  # the function defined above
    buf.seek(0)
    s = buf.read()
    print('output from TemporaryFile:')
    print(s)
</code></pre>
<p>I can then simply call the script to get the following output:</p>
<pre><code>$ python stackoverflow.py 
output from TemporaryFile:
redirected
forked output
end
</code></pre>
<p>This is exactly what I want, and works fine.</p>
<p>My confusion stems from the fact that if I if I switch <code>TemporaryFile</code> with <code>TextIOWrapper</code>, the behavior of my script changes.</p>
<pre><code>from io import BytesIO, TextIOWrapper


with TextIOWrapper(BytesIO(), stdout.encoding) as buf:
    with redirect_stdout(buf):
        output()  # the function defined at the start
    buf.seek(0)
    s = buf.read()
    print('output from TextIO:')
    print(s)
</code></pre>
<p>Now when I call the program, I lose the output from the forked process.</p>
<pre><code>$ python stackoverflow.py 
output from TextIO:
redirected
end
</code></pre>
<p>What is going on?</p>
<p>I suspect the problem has to do with the fact that the <code>TextIOWrapper</code> object doesn't have a file descriptor, and that <code>os.fork()</code> (used by <code>multiprocessing</code>) may thus be replacing the <code>TextIOWrapper</code> with another, but I admit some confusion there (especially given that stdout appears to be a <code>TextIOWrapper</code> <em>with</em> <code>fileno()</code> implemented).</p>
<pre><code>&gt;&gt;&gt; from sys import stdout
&gt;&gt;&gt; stdout.fileno()
1
&gt;&gt;&gt; stdout
&lt;_io.TextIOWrapper name='&lt;stdout&gt;' mode='w' encoding='UTF-8'&gt;
</code></pre>
<p>Thanks for any information.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you're using multiprocessing, you should use the <a href="https://docs.python.org/3.4/library/multiprocessing.html#pipes-and-queues" rel="nofollow">standard message passing primitives</a> provided by that library.  Do not call <code>print()</code> from the subprocess; that's poor design.</p>
<p>If you're actually trying to make this work with someone else's (non-Python) code, use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow"><code>subprocess.check_output()</code></a> or another of the subprocess functions instead.</p>
</div>
<span class="comment-copy">I believe you're on the right track. I don't have enough to post an answer, but I think it is an issue with file descriptors; sys.stdout has a system-level descriptor, whereas TextIOWrapper is internal to Python.</span>
<span class="comment-copy">@Cyphase I am almost absolutely sure you are correct. Redirecting <code>stdout</code>, <code>stderr</code> or <code>stdin</code> is an OS level operation, not a python operation. It works on file descriptors. A <code>BytesIO</code> object has no file descriptor because it is strictly a blob of bytes in memory. <code>TemporaryFile</code> is the way to go. On Linux if you create the file in the directory <code>/dev/shm</code>, it never hits an actually disk drive (although, arguably, <a href="http://stackoverflow.com/questions/9745281/tmp-vs-dev-shm-for-temp-file-storage-on-linux">using <code>/tmp</code> won't either</a>).</span>
