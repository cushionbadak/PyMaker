<div class="post-text" itemprop="text">
<p>I am having a problem which started <a href="https://stackoverflow.com/questions/32004919/time-gmtime-causes-overflowerror-on-armhf-platform">here</a>. I found out why and am not trying to solve something else. </p>
<p>What I need is to set CherryPy to the longest possible session time that is available on different platforms. For this CherryPy uses <code>time.gmtime()</code>. On my Windows 64 Bit I have no problems setting the session timeout 100 years in the future but this does not work on a armhf platform. armhf allows me to set the session to be alive for 22 years. </p>
<p>Not I am looking for a way to set the timeout dynamically depending on the architecture. </p>
<p>On armhf I tryed using <code>time.gmtime(sys.maxsize)</code> which returned me the date in the year 2038. <code>time.gmtime(sys.maxsize+1)</code> Returns a <code>OverflowError: timestamp out of range for platform time_t</code> error. So I guess that this is the highest date possible. </p>
<p>Problem is that doing the same on my Windows machine with 64 bit (where <code>sys.maxsize = 9223372036854775807</code>) <code>time.gmtime(sys.maxsize)</code> returns <code>OSError: [Errno 22] Invalid argument</code>. Is there a way to do this across any architecture/platform?</p>
<p><strong>Edit:</strong> This issue is not only caused by my code in CherryPy where the timeout value for a session was too high for certain platforms/architectures (mainly arm) but on some of them (Arm7) it is caused by CherryPy internaly too. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>time.gmtime()</code> accepts a float and therefore its input is limited by <code>sys.float_info.max</code> or an <code>int</code> <a href="https://github.com/python/cpython/blob/644e59add1f1bf4d79af4bf11d17da675a2eb5c9/Python/pytime.c#L26-L61" rel="nofollow noreferrer">in the range of C <code>long</code> (or <code>long long</code> if available)</a>.</p>
<p>To find <em>"the highest date possible"</em> we could use a binary search like in
<a href="https://stackoverflow.com/a/32139154/4279">@BlackJack's answer</a>:</p>
<pre><code>#!/usr/bin/env python
import ctypes
import sys
import time

MAX_TIME = max(int(sys.float_info.max),
               2**(8*ctypes.sizeof(getattr(ctypes, 'c_longlong', ctypes.c_long))))
BOUNDARY = 0.5
assert False &lt; BOUNDARY &lt; True # necessary for the binary search to work

class GmtimeOverflowTable:
    def __getitem__(self, timestamp):
        assert timestamp &gt;= 0
        try:
            time.gmtime(timestamp)
        except (OSError, OverflowError, ValueError): # ValueError for Python &lt;3.3
            return True # overflow
        return False

def find_max_gmtime_timestamp():
    overflow = GmtimeOverflowTable()
    assert overflow[float('+inf')] and not overflow[0]
    if overflow[MAX_TIME]:
        ts = binary_search(overflow, BOUNDARY, 0, MAX_TIME)
        assert overflow[ts] and not overflow[ts - 1]
        return ts - 1
    raise OverflowError("Max gmtime timestamp is larger than " + str(MAX_TIME))

print(find_max_gmtime_timestamp())
</code></pre>
<p>where <code>binary_search()</code> is a custom function that is used to accept input outside of <code>bisect.bisect()</code> range:</p>
<pre><code>def binary_search(haystack, needle, lo, hi): # avoid bisect() range limitation
    while lo &lt; hi:
        mid = (lo + hi) // 2
        if haystack[mid] &gt; needle:
            hi = mid
        elif haystack[mid] &lt; needle:
            lo = mid + 1
        else:
            return mid
    return hi
</code></pre>
<p>Results on my machine:</p>
<pre><code>| Python version       | max gmtime timestamp |
|----------------------+----------------------|
| Python 2.7.9         |    67768036191676795 |
| Python 3.4.3         |    67768036191676799 |
| Pypy  (Python 2.7.9) |    67768036191676795 |
| Pypy3 (Python 3.2)   |    67768036191676795 |
| Jython 2.7.0         |     9223372036854777 |
</code></pre>
<hr/>
<p><code>67768036191676799</code> Python 3 max <code>gmtime()</code> timestamp corresponds to max 32-bit <code>int</code> year:</p>
<pre><code>&gt;&gt;&gt; import time; time.gmtime(67768036191676799)                                    
time.struct_time(tm_year=2147485547, tm_mon=12, tm_mday=31, tm_hour=23, tm_min=59, tm_sec=59, tm_wday=2, tm_yday=365, tm_isdst=0)
&gt;&gt;&gt; 2147485547-1900
2147483647
&gt;&gt;&gt; 2**31-1
2147483647
</code></pre>
<hr/>
<p><a href="https://docs.python.org/3/library/time.html" rel="nofollow noreferrer">In general, Python <code>time.gmtime()</code> delegates to the platform C <code>gmtime()</code> function</a>:</p>
<blockquote>
<p>Most of the functions defined in this module call platform C library
  functions with the same name. It may sometimes be helpful to consult
  the platform documentation, because the semantics of these functions
  varies among platforms.</p>
</blockquote>
<p><a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf" rel="nofollow noreferrer">The corresponding function signature in C11</a>:</p>
<pre><code>struct tm *gmtime(const time_t *timer);
</code></pre>
<p><a href="https://stackoverflow.com/q/81656/4279"><code>time_t</code> limits are implementation-defined in C</a>:</p>
<blockquote>
<p>The range and precision of times representable in clock_t and time_t
  are implementation-defined.</p>
</blockquote>
<p><a href="https://stackoverflow.com/q/20448882/4279"><code>time_t</code> is required to be a real type on c11</a>:</p>
<pre><code>real types
    integer types
        char
        sίgned integer types
            standard sίgned integer types
                signed char, short int, int, long int, long long int
            extended sίgned integer types
        unsίgned integer types
            standard unsίgned integer types
                _Bool, unsigned char, unsigned short int, unsigned int,
                unsigned long int, unsigned long long int
            extended unsίgned integer types
        enumeration  types
    real floating types
        float, double, long double
</code></pre>
<p>i.e., in principle <code>time_t</code> may be an extended integer type or e.g., a long double.</p>
<p><a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_types.h.html" rel="nofollow noreferrer"><code>time_t</code> is an integer type on POSIX</a></p>
<p>max <code>time_t</code> may be larger than <code>sys.maxsize</code> e.g., <code>time_t</code> may be a 64-bit type on 32-bit system.</p>
<p>See also:</p>
<ul>
<li><a href="https://stackoverflow.com/q/5617925/4279">Maximum values for time_t (struct timespec)</a></li>
<li><a href="https://stackoverflow.com/q/14757153/4279">What is the biggest useful value of time_t?</a></li>
</ul>
<hr/>
<p>It is possible to find the max <code>gmtime()</code> timestamp without knowing <code>time_t</code> limit:</p>
<pre><code>def find_max_gmtime_timestamp():
    ts = 1
    overflow = GmtimeOverflowTable()
    assert overflow[float('+inf')] and not overflow[ts]
    while not overflow[ts]:
        ts *= 2
    ts = binary_search(overflow, BOUNDARY, ts//2, ts)
    max_ts = ts - 1
    assert overflow[max_ts+1] and not overflow[max_ts]
    return max_ts
</code></pre>
<p>The result is the same.</p>
<p>If <code>TZ=right/UTC</code> then the result is <code>67768036191676825</code> that corresponds to the same max time <code>2147485547-12-31 23:59:59 UTC</code>. <code>right/UTC</code> timestamp is larger because it includes leap seconds (<code>26</code> as of <code>2015-07-01</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>Highest possible value for time.gmtime for given python version is determined by highest possible value of time_t type this python is compiled with. Minimal sane time_t for any architecture python is running on is 32 bit signed integer (Python documentation says that minimal sys.maxint is 2**31-1). That means that answer is time.gmtime(2 ** 31 - 1) == time.gmtime(2147483647) == time.struct_time(tm_year=2038, tm_mon=1, tm_mday=19, tm_hour=3, tm_min=14, tm_sec=7, tm_wday=1, tm_yday=19...).
See also <a href="https://en.wikipedia.org/wiki/Year_2038_problem" rel="nofollow">https://en.wikipedia.org/wiki/Year_2038_problem</a></p>
</div>
<span class="comment-copy">Do you really need to set the session time for that far in the future?</span>
<span class="comment-copy">Are you searching for <i>one static</i> value which can be used safely on all platforms — past, present, future — or do you want to determine the highest value <i>dynamically</i> on the platform your code runs on? I think there is some confusion because I'm quite sure the „not“ in the very first sentence should have been a „now” instead and in the third paragraph I also read the „Not” as „Now” because the „Not” is in an odd place regarding english grammer (I think) and „Now“ would make sense there. To me at least.</span>
<span class="comment-copy">That is the answer for the <i>minimal</i> ”sane” time value but the question was about the maximum. On a 64 bit system this might be higher than the maximum signed 32 bit value.</span>
<span class="comment-copy">Highest possible gmtime for <i>any</i> architecture - is a minimal highest gmtime over all existing architectures.</span>
