<div class="post-text" itemprop="text">
<p>I'm trying to improve my Python skills and general basic coding. I have a csv file, the first 7 rows (including the header) of which are shown below:</p>
<pre><code>HomeTeam     AwayTeam      HomeTeamWin     AwayTeamWin
AV           MU            1               0
BR           QPR           1               0
C            E             0               1
MU           BR            1               0
QPR          C             0               1
E            AV            0               1
</code></pre>
<p>I am trying to implement the following code such that an output file will be generated that shows, based on the result from their most recent game, if the home team was / was not coming off a win. I am stuck at the section marked with ******</p>
<pre><code>#start loop
for row in file:
    #create empty list to put value we will find into
    observation_list=[]
    #define variable a as being row[0], i.e. the cell 
    #in the current row that contains the 'hometeam'
    a=row[0]
    #*****stuck here*******#
    #call the last row to contain variable a i.e. where toprow = the most recent row
    #above the current row to have contained varaible a i.e. the value from row[0]
    for toprow in file:
    #*****stuck here*******#
        if (toprow[0] or toprow[1])==a: 
            #implement the following if statement
            #where toprow[0] is the 1st column containing the value
            #of the hometeam from the toprow
            if (toprow[0]==a):      
            #implement the following to generate an output file showing
            #1 or 0 for home team coming off a win
                b=toprow[2]
                observation_list.append(b)
                with open(Output_file, "ab") as resultFile:
                     writer = csv.writer(resultFile, lineterminator='\n')
                     writer.writerow(observation_list)  
            else (toprow[1]==a):
            #implement the following if statement
            #where toprow[1] is the 1st column containing the value
            #of the hometeam from the toprow
                b==toprow[3]
                observation_list.append(b])
            #implement the following to generate an output file showing
            #1 or 0 for home team coming off a win
                with open(Output_file, "ab") as resultFile:
                     writer = csv.writer(resultFile, lineterminator='\n')
                     writer.writerow(observation_list)
</code></pre>
<p>From what I have done and read thus far I can see there being two problems:</p>
<p>Problem 1: how can I get the second for loop, marked with ****, to iterate over the previously read rows until it reaches the most recent row to contain the variable define by 'a' ?</p>
<p>Problem 2: How do I start the code block from the 3rd row? The reason this needs to be done is to prevent A. reading the header and, more importantly, B. trying to read a non existent / negative row i.e. row1 - 1 = row0, row0 doesn't exist!?</p>
<p>NB the desired output file would be as follows:</p>
<pre><code>-blank-      #first cell would be empty as there is no data to fill it
-blank-      #second cell would be empty as there is no data to fill it
-blank-      #third cell would be empty as there is no data to fill it
0            #fourth cell contains 0 as MU lost their most recent game
0            #fifth cell contains 0 as QPR lost their most recent game
1            #sixth cell contains 1 as E won their most recent game
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A good thing to do is to write down, in words, the steps you think you need to take to solve the problem.  For this problem I want to:</p>
<ol>
<li>skip the first line of the file</li>
<li>read a line, and split it into its parts</li>
<li>If this is the home team's first game print a blank, if not print the result of the last game it played.</li>
<li>repeat till the file is exhausted.</li>
</ol>
<p>While the file is being read, store the result of the most recently played game so it can be looked up later.  <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow">dictionaries</a> are made for this - <code>{team1 : result_of_last_game, team2 : result_of_last_game, ...}</code>.  When looking up each team's first game, there wont be a previous game - the dictionary will <em>throw</em> a <code>KeyError</code>.  the <code>KeyError</code> can be <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow">handled</a> with a <code>try/except</code> block or <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>collections.defaultdictionary</code></a> could be used to account for this.</p>
<p>I like to use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow"><code>operator.itemgetter</code></a> when extracting items from a sequence - it makes the code a bit more readable for when I look at it later.</p>
<pre><code>import operator, collections

home = operator.itemgetter(0,2)    #first and third item
away = operator.itemgetter(1,3)    #second and fourth item
team = operator.itemgetter(0)      #first item

#dictionary to hold the previous game's result
#default will be a blank string
last_game = collections.defaultdict(str)

#string to format the output
out = '{}\t{}'
with open('data.txt') as f:
    #skip the header
    f.next()
    #data = map(parse, f)
    for line in f:
        #split the line into its relavent parts
        line = line.strip()
        line = line.split()
        #extract the team and game result
        #--&gt; (team1, result), (team2, result)
        h, a = home(line), away(line)
        home_team = team(h)
        #print the result of the last game
        print(out.format(home_team, last_game[home_team]))
        #update the dictionary with the results of this game
        last_game.update([h,a])
</code></pre>
<hr/>
<p>Instead of printing the results, you could easily write them to a file or collect them in a container and write them to a file later.</p>
<hr/>
<p>If you want something other than an empty string for your <code>defaultdict</code>, you could do something like this</p>
<pre><code>class Foo(object):
    def __init__(self, foo):
        self.__foo = foo
    def __call__(self):
        return self.__foo
blank = Foo('-blank-')
last_game = collections.defaultdict(blank)
</code></pre>
</div>
<span class="comment-copy">Im on mobile so can't write a full answer, but google memorization and see if it helps</span>
<span class="comment-copy">early in the loop, <code>a==row[0]</code> is a comparison - did you intend that to be an assignment?</span>
<span class="comment-copy">Problem1: Read all the lines of the file into a data structure, container, that you can iterate over.  You may want to thnk a bit about your problem and imagine the best way to <i>store</i> each line.  Problem2: You can skip lines in a file-object with <code>file.next()</code>.</span>
<span class="comment-copy">@wii, I have edited the comparison out and replaced it with a=row[0]. Ditto for variable b.     Re the storing I believe that is the nexus of the problem, I just can't see or find the solution.</span>
<span class="comment-copy">@Nick Bailey, I'm reading into memoization as I think there could be a solution there, it's quite intense!</span>
<span class="comment-copy">thanks for the input. When I run the above code on my test file (circa 50 rows) it throws the following error: line 26, in &lt;module&gt;     h, a = home(line), away(line) IndexError: list index out of range    . I'm not sure why it would do this, perhaps because my source file is a csv file?? Re the itemgetter function thank you very much for enlightening me; its a really cool function! I'd be grateful if you've any insights on the error code.....</span>
<span class="comment-copy">@Section_4 one of the lines of your file, when split, doesn't produce enough items.  The <code>itemgetters</code> are extracting items 0,1,2, and 3.  If the data in your lines are delineated by something other than whitespace, you will need to use that character in the <code>split</code> function.  If some of your lines have less than four <i>columns</i>, you could deal with that by handling the exception with a <code>try/except</code> block.</span>
<span class="comment-copy">I took you comments on board to great effect. Many thanks for taking the time to read and work through my problem. Without your help I wouldn't have got my code working! Cheers :)</span>
