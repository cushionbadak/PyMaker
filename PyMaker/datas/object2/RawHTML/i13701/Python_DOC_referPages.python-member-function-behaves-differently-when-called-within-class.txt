<div class="post-text" itemprop="text">
<p>I am using a class member function that has a different effect when called within the class in which it is defined than when it is called externally.</p>
<pre><code>def getLexid(self, senseKey):
    lexid = ""
    senseKeyParts = senseKey.split("%")
    if len(senseKeyParts) &gt; 1:
        sense_number = senseKeyParts[1]
        # System.out.print("sense number: " + sense_number + '\n');
        senseNumParts = sense_number.split(":")
        if len(senseNumParts) &gt; 1:
            lexid = senseNumParts[1]

    print("lexid:",lexid,"|")

    return lexid
</code></pre>
<p>here is its internal call:</p>
<pre><code>def getLexname(self, senseKey):
    lexname = ""
    lexid = self.getLexid(senseKey).strip()
    print("Getting lexname with lexid:",senseKey,"(",lexid,")")
    print("Getting lexname with lexid:",senseKey.strip(),"(",lexid.strip(),")")
</code></pre>
<p>When I call getLexname externally:</p>
<pre><code>wordnet_obj = wordnet.WordNet()
lexname = wordnet_obj.getLexname('forester%1:18:00::')
</code></pre>
<p>I get:</p>
<pre><code>lexid: 18 |
Getting lexname with lexid: forester%1:18:00:: ( 18 )
Getting lexname with lexid: forester%1:18:00:: ( 18 )
</code></pre>
<p>The result gets padded with spaces and .strip() does not seem to have an effect.
However when I call getLexid externally:</p>
<pre><code>wordnet_obj = wordnet.WordNet()
lexid2 = wordnet_obj.getLexid('forester%1:18:00::')
print("lexid2:",lexid2)
</code></pre>
<p>I get, as expected:</p>
<pre><code>('lexid:','18')
</code></pre>
<p>Thanks for any help!</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually you are seeing the behavior of <a href="https://docs.python.org/3/library/functions.html?highlight=print#print" rel="nofollow">print</a>:</p>
<blockquote>
<p>Print objects to the text stream file, separated by sep and followed by end. sep, end and file, if present, must be given as keyword arguments</p>
</blockquote>
<p>By default the separator (sep) is one space single space.</p>
<p>In your example you are comparing the output of two different print statements <code>print('prefix', '18')</code> and <code>print('(', '18', ')')</code>.</p>
<p>From your example out bit for the external call I gather that you are using Python 3. For Python 3 you get:</p>
<pre><code>&gt;&gt;&gt; print('prefix', '18')  # This differs from your example maybe you had another pair of parentheses?
prefix 18
&gt;&gt;&gt; print('(', '18', ')')  # Note the spaces around the number.
( 18 )
</code></pre>
<p>You can change the behavior by specifying an empty separator:</p>
<pre><code>&gt;&gt;&gt; print('(', '18', ')', sep='')
(18)
</code></pre>
</div>
<span class="comment-copy">It's <code>print</code> that's adding the spaces, why don't you look at what is <i>actually</i> returned?</span>
<span class="comment-copy">Which version of Python is this? Are you performing any <code>__future__</code> imports anywhere?</span>
<span class="comment-copy">You are using Python 2, and using <code>from __future__ import print_function</code> there, but not when you are using <code>wordnet_obj.getLexid('forester%1:18:00::')</code>, where you are printing a <i>tuple</i>. In the other places you are calling the <code>print()</code> function which adds spaces between the arguments, you'd get the same if you used <code>print 'lexid2:', lexid2</code> in the 'externally' case.</span>
<span class="comment-copy">thanks all - yep, understanding the print in the differing contexts did it</span>
<span class="comment-copy">thanks for the explanation; the separator specification very helpful</span>
