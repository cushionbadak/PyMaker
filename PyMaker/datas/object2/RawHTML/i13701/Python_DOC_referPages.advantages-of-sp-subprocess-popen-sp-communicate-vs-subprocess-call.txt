<div class="post-text" itemprop="text">
<p>I wrote a func that I use constantly about 4 months ago and I'm having trouble remembering why I split things off like this:</p>
<pre><code>def call_sp(command, **arg_list):
    #run that beast
    p = subprocess.Popen(command, shell=True, **arg_list)
    p.communicate()
</code></pre>
<p>I read the doc on subprocess and see call() essentially does the same thing. Without remembering what happened that day, do any python sysadmins know a meaningful difference in use besides the above func and subprocess.call(["mycommand"])? I see my func doesn't return any exit status, is checking if the command worked the only difference/advantage for call()? Here is what I see today</p>
<pre><code>In [4]: subprocess.call(['echo $HOME'], shell=True)
/home/cchilders
Out[4]: 0

In [5]: %paste
def call_sp(command, **arg_list):
    #run that beast
    p = subprocess.Popen(command, shell=True, **arg_list)
    p.communicate()

## -- End pasted text --


In [6]: call_sp('echo $HOME')
/home/cchilders
</code></pre>
<p>thanks</p>
</div>
<div class="post-text" itemprop="text">
<p><code>subprocess.call(..)</code> is essentially <code>Popen(..).wait()</code> that is different from <code>Popen(..).communicate()</code> if you redirect any of standard streams of the child process e.g., <code>stdout=PIPE</code> or if you need the exit status.</p>
<p><a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow"><code>subprocess.call()</code></a> is a convenience function that is built on top of the interface provided by <code>Popen()</code>. If <code>call()</code> works in your case; use it. If it doesn't work; consider other convenience functions such as <code>subprocess.check_output()</code> and only then use <code>Popen()</code> directly.</p>
<p>Writing a convenience function that works in your case as you did is a good idea in general (though your particular example is less useful). <code>Popen()</code> can do many things and a convenience function that limits its power makes the code easier to maintain.</p>
<p>Don't call <code>p.communicate()</code> unless you need pass input, get output from the subprocess. Don't use <code>shell=True</code> unless you have <em>complete</em> control over the <code>command</code> parameter.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>call</code> is a convenience function for a typical use case of <code>Popen</code>. It's simpler to use it instead of the <code>Popen</code> constructor in this case because you are not using output from the executed command.</p>
<p>If there is a need to exchange some data with the running child process or for further processing of the command output (stdout, stderr) <code>Popen</code> and <code>communicate</code> would be a better fit.</p>
<p>If you're interested in the success of the call, there is another convenience function <code>check_call</code> which will raise an exception if the executed process exits with a non-zero status.</p>
</div>
<span class="comment-copy"><code>subprocess.call</code> really is just a convenience for situations like this. Perhaps you planned on doing something else with <code>p</code> (the <code>Popen</code> instance), but never did? (In fact, you could define <code>call_cp = subprocess.call</code>.)</span>
