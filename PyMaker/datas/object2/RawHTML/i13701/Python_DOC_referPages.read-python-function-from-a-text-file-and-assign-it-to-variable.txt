<div class="post-text" itemprop="text">
<p>I have a text file that contains Python function like this:</p>
<p><strong>a.txt</strong></p>
<pre><code>def func():
    var = 5
    return var
</code></pre>
<p>And then I read this file in a Python script:</p>
<p><strong>b.py</strong></p>
<pre><code>python_file = open("a.txt").read()
</code></pre>
<p>Now I want to assign the <code>a.txt</code> file's function to a variable without worrying about the function name and execute it. I tried something like this:</p>
<pre><code>python_file = open("a.txt").read()
b = exec(python_file)
b()
</code></pre>
<p>But it didn't work, I tried <code>execfile</code> as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>After you've <code>exec</code>uted the string, you can call <code>func</code> directly, as it has been added to your current namespace:</p>
<pre><code>&gt;&gt;&gt; exec("""def func():
    var = 5  # note that the semicolons are redundant and unpythonic
    return var""")
&gt;&gt;&gt; func()
5
</code></pre>
<p>Per <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow">its documentation</a> <code>exec</code> doesn't actually return anything, so there's no point assigning e.g. <code>foo = exec(...)</code>.</p>
<hr/>
<p>To see what names are locally defined in the code being executed, pass an empty dictionary to <code>exec</code> as the <code>locals</code> parameter:</p>
<pre><code>&gt;&gt;&gt; ns = {}
&gt;&gt;&gt; exec("""def func():
    var = 5
    return var""", globals(), ns)
&gt;&gt;&gt; ns
{'func': &lt;function func at 0x0315F540&gt;}
</code></pre>
<p>You can then assign the function and call it as you normally would:</p>
<pre><code>&gt;&gt;&gt; b, = ns.values()  # this will only work if only one name was defined
&gt;&gt;&gt; b()
5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Before offering my solution, I highly warn against do this unless you know for sure there is no malicious code in <em>a.txt</em>.</p>
<p>My solution uses the <code>execfile</code> function to load the text file and return the first object (could be a variable or function):</p>
<pre><code>def load_function(filename):
    """ Assume that filename contains only 1 function """
    global_var = dict()
    execfile(filename, global_var)
    del global_var['__builtins__']
    return next(global_var.itervalues())

# Use it
myfunction = load_function('a.txt')
print myfunction()
</code></pre>
<h1>Update</h1>
<p>To be a little more careful, modify the return line like the following so that it skips variables (it cannot skip class declaration, however).</p>
<pre><code>    return next(f for f in global_var.itervalues() if callable(f))
</code></pre>
<h1>Update 2</h1>
<p>Thank you johnsharpe for pointing out that there is no <code>execfile</code> in Python 3. Here is a modified solution which use <code>exec</code> instead. This time, the function should be found in the "local" scope.</p>
<pre><code>def load_function(filename):
    """ Assume that filename contains only 1 function """
    with open(filename) as f:
        file_contents = f.read()
        global_var = dict()
        local_var = dict()
        exec file_contents in global_var, local_var
        return next(f for f in local_var.itervalues() if callable(f))

# Use it
myfunction = load_function('a.txt')
print myfunction()
</code></pre>
</div>
<span class="comment-copy">Why don't you just rename it to <code>.py</code> and <code>import</code> it in the normal way? Either way, note that <code>exec</code> doesn't return anything, read its <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">documentation</a>.</span>
<span class="comment-copy">@jonrsharpe Sir It is .txt file. so cant import . and the requirement is such I don't know  function name of txt file  in python file.</span>
<span class="comment-copy">...a Python file <i>is</i> also just a text file, why not <code>os.rename</code> it?</span>
<span class="comment-copy">I want to keep It txt file . In future the python function will come from database as string</span>
<span class="comment-copy">Do you not think that kind of information would be useful in the question?</span>
<span class="comment-copy">I don't want to call it by function name. I don't know the function name in python file. I wanna assign to a variable what ever function is there</span>
<span class="comment-copy">@AshishNautiyal well that's probably going to be tough. What are you <i>actually</i> trying to achieve?</span>
<span class="comment-copy">agreed Sir .But I want to find a way to assign it to a variable .</span>
<span class="comment-copy">I have added how you can do that, but you still haven't really answered my questions.</span>
<span class="comment-copy">@SDilmac how does that solve the problem? If you have a separate answer, please add it as an answer</span>
<span class="comment-copy">Note that Python 3 doesn't have <code>execfile</code>, see e.g. <a href="https://docs.python.org/3/whatsnew/3.0.html#builtins" rel="nofollow noreferrer">docs.python.org/3/whatsnew/3.0.html#builtins</a>, <a href="http://stackoverflow.com/q/436198/3001761">stackoverflow.com/q/436198/3001761</a></span>
<span class="comment-copy">My bad. I don't have Python 3. In that case, your solution (open text file, read contents, call exec) combine with mine (get the first callable from the global name space) will work.</span>
