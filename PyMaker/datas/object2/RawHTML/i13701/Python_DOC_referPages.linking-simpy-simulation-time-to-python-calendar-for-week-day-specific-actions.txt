<div class="post-text" itemprop="text">
<p>I want to build a simulation model of a production network with SimPy comprising the following features with regard to time:</p>
<ul>
<li>Plants work from Monday to Friday (with two shifts of 8 hours)</li>
<li>Heavy trucks drive on all days of the week except Sunday</li>
<li>Light trucks drive on all days of the week, including Sunday</li>
</ul>
<p>To this purpose, I want to construct a <a href="http://simpy.readthedocs.org/en/latest/examples/process_communication.html" rel="nofollow">BroadcastPipe as given in the docs</a> combined with timeouts to make the objects wait during days they are not working (for the plants additional logic is required to model shifts). This BroadcastPipe would just count the days (assuming 24*60 minutes for each day) and then say <em>"It's Monday, everybody"</em>. The objects (plant, light and heavy trucks) would then process this information individually and act accordingly.</p>
<p>Now, I wonder whether there is an elegant method to link simulation time to regular Python Calender objects in order to easily access days of the week. This would be useful for clarity and enhancements like bank holidays and varying starting days. Do you have any advise how to do this? (or general advice on how to model better?). Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>I usually set a start date and define it to be equal with the simulation time (<code>Environment.now</code>) 0.  Since SimPyâ€™s simulation time has no inherent unit, I also define that it is in seconds.  Using <a href="http://crsmithdev.com/arrow/" rel="nofollow">arrow</a>, I can than easily calculate an actual date and time from the current simulation time:</p>
<pre><code>import arrow
import simpy

start = arrow.get('2015-01-01T00:00:00')
env = simpy.Environment()

# do some simulation ...

current_date = start.replace(seconds=env.now)
print('Curret weekday:', current_date.weekday())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You might use the <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow">datetime module</a> and create a <code>day_of_week</code> object, though you would still need to calculate the elapsed time:</p>
<pre><code>import datetime
# yyyy = four digit year integer
# mm = 1- or 2-digit month integer
# dd = 1- or 2-digit day integer

day_of_week = datetime.datetime(yyyy, mm, dd).strftime('%a')

if day_of_week == 'Mon':
    # Do Monday tasks...
elif day_of_week == 'Tue':
    # Tuesday...
</code></pre>
</div>
<span class="comment-copy">Exactly what I needed. +1 for pointing out arrow</span>
