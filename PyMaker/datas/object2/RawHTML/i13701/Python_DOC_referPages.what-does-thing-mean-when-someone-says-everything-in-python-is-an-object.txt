<div class="post-text" itemprop="text">
<p>I constantly see people state that "Everything in Python is an object.", but I haven't seen "thing" actually defined.  This saying would lead me to believe that all tokens of any kind are also considered to be objects, including operators, punctuators, whitespace, etc.  Is that actually the case?  Is there a more concise way of stating what a Python object actually is?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Anything that can be assigned to a variable is an object.</p>
<p>That includes functions, classes, and modules, and of course <code>int</code>'s, <code>str</code>'s, <code>float</code>'s, <code>list</code>'s, and everything else. It does not include whitespace, punctuation, or operators.</p>
<p>Just to mention it, there is the <code>operator</code> module in the standard library which includes functions that implement operators; those functions are objects. That doesn't mean <code>+</code> or <code>*</code> are objects.</p>
<p>I could go on and on, but this is simple and pretty complete.</p>
</div>
<div class="post-text" itemprop="text">
<p>Some values are obviously objects; they are instances of a class, have attributes, etc.</p>
<pre><code>&gt;&gt;&gt; i = 3
&gt;&gt;&gt; type(i)
&lt;type 'int'&gt;
&gt;&gt;&gt; i.denominator
1
</code></pre>
<p>Other values are less obviously objects. Types are objects:</p>
<pre><code>&gt;&gt;&gt; type(int)
&lt;type 'type'&gt;
&gt;&gt;&gt; int.__mul__(3, 5)
15
</code></pre>
<p>Even <code>type</code> is an object (of type <code>type</code>, oddly enough):</p>
<pre><code>&gt;&gt;&gt; type(type)
&lt;type 'type'&gt;
</code></pre>
<p>Modules are objects:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; type(sys)
&lt;type 'module'&gt;
</code></pre>
<p>Built-in functions are objects:</p>
<pre><code>&gt;&gt;&gt; type(sum)
&lt;type 'builtin_function_or_method'&gt;
</code></pre>
<p>In short, if you can reference it by name, it's an object.</p>
</div>
<div class="post-text" itemprop="text">
<p>What is generally meant is that most things, for example functions and methods are objects. Modules too. Classes (not just their instances) themselves are objects. and int/float/strings are objects. So, yes, things generally tend to be objects in Python. Cyphase is correct, I just wanted to give some examples of things that might not be immediately obvious as objects. </p>
<p>Being objects then a number of properties are observable on things that you would consider special case, baked-in stuff in other languages.  Though __dict__, which allows arbitrary attribute assignment in Python, is often missing on things intended for large volume instantiations like <strong>int</strong>.</p>
<p>Therefore, at least on pure-Python objects, a lot of magic can happen, from introspection to things like creating a new <strong>class</strong> on the fly.</p>
<p>Kinda like turtles all the way down.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're not going to find a rigorous definition like C++11's, because Python does not have a formal specification like C++11, it has a <a href="https://docs.python.org/3/reference/index.html" rel="nofollow noreferrer">reference manual</a> like pre-ISO C++. The <a href="https://docs.python.org/3/reference/datamodel.html#objects-values-and-types" rel="nofollow noreferrer">Data model</a> chapter is as rigorous as it gets:</p>
<blockquote>
<p>Objects are Python’s abstraction for data. All data in a Python program is represented by objects or by relations between objects. (In a sense, and in conformance to Von Neumann’s model of a “stored program computer,” code is also represented by objects.)</p>
<p>Every object has an identity, a type and a value. An object’s identity never changes once it has been created; you may think of it as the object’s address in memory. …</p>
</blockquote>
<p>The <a href="https://docs.python.org/3/glossary.html#term-object" rel="nofollow noreferrer">glossary</a> also has a shorter definition:</p>
<blockquote>
<p>Any data with state (attributes or value) and defined behavior (methods).</p>
</blockquote>
<p>And it's true that everything in Python has methods and (other) attributes. Even if there are no public methods, there's a set of special methods and values inherited from the <code>object</code> base class, like the <code>__str__</code> method.</p>
<hr/>
<p>This wasn't true in versions of Python before 2.2, which is part of the reason we have multiple words for nearly the same thing—object, data, value; type, class… But from then on, the following kinds of things are identical:</p>
<ul>
<li>Objects.</li>
<li>Things that can be returned or yielded by a function.</li>
<li>Things that can be stored in a variable (including a parameter).</li>
<li>Things that are instances of type <code>object</code> (usually indirectly, through a subclass or two).</li>
<li>Things that can be the value resulting from an expression.</li>
<li>Things represented by pointers to <code>PyObject</code> structs in CPython.</li>
</ul>
<p>… and so on.</p>
<p>That's what "everything is an object" means.</p>
<p>It also means that Python doesn't have "native types" and "class types" like Java, or "value types" and "reference types" like C#; there's only one kind of thing, objects.</p>
<hr/>
<blockquote>
<p>This saying would lead me to believe that all tokens of any kind are also considered to be objects, including operators, punctuators, whitespace, etc. Is that actually the case?</p>
</blockquote>
<p>No. Those things don't have values, so they're not objects.<sup>1</sup></p>
<hr/>
<p>Also, variables are not objects. Unlike C-style variables, Python variables are not memory locations with a type containing a value, they're just names bound to a value in some namespace.<sup>2</sup> And that's why you can't pass around references to variables; there is no "thing" to reference.<sup>3</sup></p>
<p>Assignment targets are also not objects. They sometimes look a lot like values, and even the core devs sometimes refer to things like the <code>a, b</code> in <code>a, b = 1, 2</code> loosely as a tuple object—but there is no tuple there.<sup>4</sup></p>
<hr/>
<p>There's also a bit of apparent vagueness with things like elements of a <code>numpy.array</code> (or an <code>array.array</code> or <code>ctypes.Structure</code>). When you write <code>a[0] = 3</code>, the <code>3</code> object doesn't get stored in the <code>array</code> the way it would with a <code>list</code>. Instead, numpy stores some bytes that Python doesn't even understand, but that it can use to do "the same thing a 3 would do" in array-wide operations, or to make a new copy of the <code>3</code> object if you later ask for <code>a[0] = 3</code>.</p>
<p>But if you go back to the definition, it's pretty clear that this "virtual <code>3</code>" is not an object—while it has a type and value, it does not have an identity.</p>
<hr/>
<p><sub>1. At the meta level, you can write an import hook that can act on imported code as a byte string, a decoded Unicode string, a list of token tuples, an AST node, a code object, or a module, and all of those are objects… But at the "normal" level, from within the code being imported, tokens, etc. are not objects.</sub></p>
<p><sub>2. Under the covers, there's almost always a string object to represent that name, stored in a dict or tuple that represents the namespace, as you can see by calling <code>globals()</code> or <code>dir(self)</code>. But that's not what the variable <em>is</em>.</sub></p>
<p><sub>3. A closure cell is sort of a way of representing a reference to a variable, but really, it's the cell itself that's an object, and the variables at different scopes are just a slightly special kind of name for that cell.</sub></p>
<p><sub>4. However, in <code>a[0] = 3</code>, although <code>a[0]</code> isn't a value, <code>a</code> and <code>0</code> are, because that assignment is equivalent to the expression <code>a.__setitem__(0, 3)</code>, except that it's not an expression.</sub></p>
</div>
<span class="comment-copy">Sounds like you need to learn some fundamental programming concepts. Have you Googled this at all, or read a book, or taken a course?</span>
<span class="comment-copy">uh, uh.  slow down with criticism, Tiger.  the use of operators, whitespace makes me think the OP does know some programming.</span>
<span class="comment-copy">Anything which isn't syntax or a keyword is an object.</span>
<span class="comment-copy">Some reading about SmallTalk would come in handy. SmallTalk defines that "everything".</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/865911/is-everything-an-object-in-python-like-ruby">Is everything an object in python like ruby?</a></span>
<span class="comment-copy">I know this isn't the formal definition of the requirements for something being considered a Python object I was looking for, but the first sentence does seem to be a pretty good brute force way to determine if something is an object if you don't already know.</span>
<span class="comment-copy">@BenevolentDeity, I was going to post it with just the first sentence, then added the last sentence, then a bit (relatively lot) more because I thought someone might downvote it for being too short :).</span>
<span class="comment-copy">Every function is an object; built-in or not. I would be surprised if this were not the case.</span>
<span class="comment-copy">I wasn't trying to be exhaustive, although I'm not sure why I singled out built-in functions over user-defined functions.</span>
