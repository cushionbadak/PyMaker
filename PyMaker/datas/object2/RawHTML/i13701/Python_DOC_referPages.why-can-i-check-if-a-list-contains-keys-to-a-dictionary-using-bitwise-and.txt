<div class="post-text" itemprop="text">
<p>I happened to stumble across this question <a href="https://stackoverflow.com/questions/11157704/python-intersection-between-a-list-and-keys-of-a-dictionary">Python - intersection between a list and keys of a dictionary</a> , and unfortunately did not have the required reputation to ask:</p>
<p>Why does this work?</p>
<pre><code>d1 = {'200:200':{'foo':'bar'},'300:300':{'foo':'bar'}}
l1 = ['200:200', '90:728']
keys = d1.keys() &amp; l1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The result of <code>d1.keys()</code> is a set like view.</p>
<blockquote>
<p>Keys views are set-like since their entries are unique and hashable. If all values are hashable, so that (key, value) pairs are unique and hashable, then the items view is also set-like. (Values views are not treated as set-like since the entries are generally not unique.) For set-like views, all of the operations defined for the abstract base class collections.abc.Set are available (for example, ==, &lt;, or ^).</p>
</blockquote>
<p>From <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow">https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects</a></p>
<p>The second argument to <code>&amp;</code> is only required to be an iterable of hashable objects (although this is not stated in the documentation).</p>
<p>See <a href="https://docs.python.org/3/library/stdtypes.html#set.intersection" rel="nofollow">https://docs.python.org/3/library/stdtypes.html#set.intersection</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It works because you are using Python 3. <code>d1.keys()</code> returns a list (Python 2) or an object of type <code>&lt;class dict_keys&gt;</code>. (Python 3), and <code>l1</code> is a list. In the Python 2 case the final statement gives <code>TypeError: unsupported operand type(s) for &amp;: 'list' and 'list'</code>. In Python 3 the <code>dict_keys</code> object is an iterable view, which apparently does have some sort of implementation of the <code>__and__()</code> method used to implement the <code>&amp;</code> operation.</p>
</div>
<div class="post-text" itemprop="text">
<p>it works in python3 (3.4.3 at least) because <code>dict#keys</code> returns and instance of <code>dict_keys</code>, which apparently implements (parts of?) the <code>set</code> interface.  and the <code>set</code> type has implementations of some infix integer operators with different (but similar) meanings.</p>
</div>
<span class="comment-copy">What, anyway, are you actually trying to achieve with this code?</span>
<span class="comment-copy">i'm not the OP, but my guess is he wants to achieve some insight.</span>
<span class="comment-copy">The code is copied from the link I gave, I was just curious as to how a bitwise operator allows an intersection to be found between an iterator and a set. However, it has now occured to me, that perhaps the &amp; in this case is not a bitwise operator but overloaded to mean set intersection â€“</span>
<span class="comment-copy">it looks like you misread the question, the OP asked "why does this work?", notice no "not".</span>
<span class="comment-copy">Thanks. Fixed now.</span>
