<div class="post-text" itemprop="text">
<p>I need to take an md5 hash of the contents of a dict or list and I want to ensure that two equivalent structures will give me the same hash result.</p>
<p>My approach thus far has been to carefully define the order of the structures and to sort the various lists and dictionaries that they contain prior to running them through <code>json.dumps()</code>.</p>
<p>As my structures get more complex, however, this is becoming laborious and error prone, and in any case I was never sure it was working 100% of the time or just 98% of the time.</p>
<p>Just curious if anyone has a quick solution for this?  Is there an option I can set in the <code>json</code> module to sort objects completely?  Or some other trick I can use to do a complete comparison of the information in two structures and return a hash guaranteed to be unique to it?</p>
<p>I only need the strings (and then the md5) to come out the same when I serialize the objects -- I'm not concerned about deserializing for this use case.</p>
</div>
<div class="post-text" itemprop="text">
<p>JSON output by default is non-deterministic simply because the results of <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow"><code>__hash__</code></a> are salted for <code>str</code> (key values for typical JSON objects) to prevent a DoS vector (see the notes in documentation).  For this reason you need to call <a href="https://docs.python.org/3/library/json.html#json.dump" rel="nofollow"><code>json.dumps</code></a> with <code>sort_keys</code> set to True.</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; d = {'this': 'This word', 'that': 'That other word', 'other': 'foo'}
&gt;&gt;&gt; json.dumps(d)
'{"this": "This word", "other": "foo", "that": "That other word"}'
&gt;&gt;&gt; json.dumps(d, sort_keys=True)
'{"other": "foo", "that": "That other word", "this": "This word"}'
</code></pre>
<p>For objects that end up serialized into a <code>list</code> (i.e. <code>list</code>, <code>tuple</code>) you will need to ensure the ordering is done in the expected way because by definition lists are not ordered in any particular way (ordering of the elements in those collections will be persistent in the position they have been placed/modified by the program itself).</p>
</div>
<span class="comment-copy">What do you mean by "equivalent"?</span>
<span class="comment-copy">By equivalent I mean that they contain the same structure and information.  Since they may have been assembled through different channels, the order  of lists and keys may be different.</span>
<span class="comment-copy">Not sure what you really want me to clarify but reworded it anyway.</span>
<span class="comment-copy">@metatoaster By definition lists <b>are</b> ordered in a particular way, namely, in the order the elements appear in the list.  Did you mean "sets"?</span>
<span class="comment-copy">@augurar that's what I mean by not ordered - the ordering can be positioned in any arbitrary way; in other words, it does <b>not</b> mean they are ordered, the elements simply <i>positioned</i>. As opposed to a self-balancing binary tree where the ordering of the elements has to be done in specific way. <code>list</code>s <b>can</b> be ordered with a sort function. <code>set</code>s simply cannot be ordered (actually, they are, according to the hash which is salted to be non-deterministic but to end user it's as good as not sortable).</span>
<span class="comment-copy">@metatoaster  Ah, I see what you mean; you are using the word "ordered" to mean what I would call "sorted".</span>
