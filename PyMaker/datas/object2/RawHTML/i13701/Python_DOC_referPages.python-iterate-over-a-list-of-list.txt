<div class="post-text" itemprop="text">
<p>I have a list of lists as shown below with name of an animal as key and an ID,Status as value. One animal can have multiple value and each ID is repeated multiple times with pass/fail status. There are many lines of record like this for many animals. I am trying to iterate through each line in python and want to calculate - for an animal what all IDs are passed. An ID will be considered pass for an animal if if there is no Failed status in it. 
Logically I understand it will use two for loops but not able to put this through python code. Thanks for your help.</p>
<pre><code>[(u'Tiger', (u'PRO-16', u'Passed')),
 (u'Tiger', (u'PRO-16', u'Failed')),
 (u'Tiger', (u'PRO-17', u'Failed')),
 (u'Tiger', (u'PRO-17', u'Passed')),
 (u'Monkey', (u'PRO-18', u'Passed')),
 (u'Monkey', (u'PRO-18', u'Failed'))
 (u'Monkey', (u'PRO-19', u'Passed')),
 (u'Monkey', (u'PRO-20', u'Failed')),
 (u'Elephant', (u'PRO-21', u'No Run')),
 (u'Elephant', (u'GR-01', u'Passed'))].......................
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Store the successes in a <code>set</code>, and the failures in another <code>set</code>. Go through the data and put each entry into the proper <code>set</code> based on whether it contains a failure. Finally, subtract the failures from the successes, and you're left with all the successes which have no failure match (I printed this result directly).</p>
<pre><code>data = [(u'Tiger', (u'PRO-16', u'Passed')),
 (u'Tiger', (u'PRO-16', u'Failed')),
 (u'Tiger', (u'PRO-17', u'Failed')),
 (u'Tiger', (u'PRO-17', u'Passed')),
 (u'Monkey', (u'PRO-18', u'Passed')),
 (u'Monkey', (u'PRO-18', u'Failed')),
 (u'Monkey', (u'PRO-19', u'Passed')),
 (u'Monkey', (u'PRO-20', u'Failed')),
 (u'Elephant', (u'PRO-21', u'No Run')),
 (u'Elephant', (u'GR-01', u'Passed'))]

succeeded = set()
failed = set()
for item in data:
    if item[1][1] != 'Failed':
        succeeded.add((item[0], item[1][0]))
    else:
        failed.add((item[0], item[1][0]))
</code></pre>
<p>Result:</p>
<pre><code>&gt;&gt;&gt; print(*(succeeded-failed), sep='\n')
('Elephant', 'GR-01')
('Monkey', 'PRO-19')
('Elephant', 'PRO-21')
</code></pre>
<p>You can group these by animal as well, with a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>defaultdict</code></a>:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for k,v in succeeded-failed:
...     d[k].append(v)
...
&gt;&gt;&gt; for k in d:
...     print(k + ': ' + ', '.join(d[k]))
...
Monkey: PRO-19
Elephant: PRO-21, GR-01
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>ids = {}
for line in animalinfo:
   if line[1][1]!="Failed":
       if line[0] in ids:
          ids[line[0]].append(line[1][0])
       else:
           ids[line[0]]= [line[1][0]]
</code></pre>
<p>It will give you:</p>
<pre><code>{u'Tiger': [u'PRO-16', u'PRO-17'], u'Monkey': [u'PRO-18', u'PRO-19'], u'Elephant': [u'PRO-21', u'GR-01']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well first in order to iterate through your list and keep all of the items as unique variable names in one nice for loop:</p>
<pre><code>data = *your list above*
for animal, (test_id, status) in data:
    *CODE HERE*
</code></pre>
<p>A really quick and dirty way of solving your specific question while using only native python data structures</p>
<pre><code>results = {}
bad = {}
for animal, (test_id, status) in data:
    # Add the animal to the dict if it does not exist yet
    if animal not in results:
        results[animal] = []

    # if current test failed
    if (status == 'Failed'):

        # Remove test if we marked it as passed before
        if (test_id in results[animal]):
            results[animal].remove(test_id)

        # Ad the test to the 'bad' list
        if animal not in bad:
            bad[animal] = []
        bad[animal].append(test_id)

    # if the animal is not on the bad list at all add it to the good list
    elif animal not in bad and test_id not in results[animal]:
        results[animal].append(test_id)

    # if the current test is not in the animals bad list, add it to the good list
    elif test_id not in bad[animal] and test_id not in results[animal]:
        results[animal].append(test_id)

print('Tests that passed: {}'.format(results))
print('bad: {}'.format(bad))
</code></pre>
<p>This code with your data outputs:</p>
<pre><code>Tests that passed: {u'Tiger': [], u'Monkey': [u'PRO-19'], u'Elephant': [u'PRO-21', u'GR-01']}
bad: {u'Tiger': [u'PRO-16', u'PRO-17'], u'Monkey': [u'PRO-18', u'PRO-20']}
</code></pre>
</div>
<span class="comment-copy">Please give an example for output</span>
<span class="comment-copy">Show us what you have tried...</span>
<span class="comment-copy">thank you so much! Is there a way to consolidate all the passed IDs for an animal?</span>
<span class="comment-copy">@user5253936 - certainly. I've added that to this answer.</span>
<span class="comment-copy">I just realized that running this code returns list of all IDs which is not Failed. But in my case an animal is considered passed if all the associated IDs are passed. If there is any Failed ID then the animal fails. Please advice</span>
<span class="comment-copy">@user5253936 - So, <code>Tiger</code> would pass, because, for its IDs of 16 and 17, it has at least one pass for each one? You should edit the correct pass and fail conditions into your question.</span>
<span class="comment-copy">There are no successful IDs for <code>Tiger</code>, as <code>PRO-16</code> has a failure and <code>PRO-17</code> has a failure. Your result is incorrect.</span>
<span class="comment-copy">Op said "An ID will be considered pass for an animal if if there is no Failed status in it." not An animal , he want all passed IDs for each animal.</span>
<span class="comment-copy">There is a failed status for the <code>PRO-16</code> ID. Therefore, there is a failed status in it. Your answer just ignores all the instances of failure.</span>
<span class="comment-copy">bigOTHER and TigerhawkT3 - thanks both for your time. Apologies if I wasn't clear enough in my output, but as Tigerhawk mentioned an Animal is considered pass if there is no failed in any of the associated ID. So output for the dataset will be {u'Tiger': [], u'Monkey': [u'PRO-19'], u'Elephant': [u'PRO-21', u'GR-01']}</span>
<span class="comment-copy">Note: You can remove a couple if statements from this code by using a default dict <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">python defaultdict</a></span>
<span class="comment-copy">Thanks a lot Alex...this was helpful</span>
