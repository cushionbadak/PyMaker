<div class="post-text" itemprop="text">
<p>(Don't worry, this isn't another question about unpacking tuples.)</p>
<p>In python, a statement like <code>foo = bar = baz = 5</code> assigns the variables foo, bar, and baz to 5.  It assigns these variables from left to right, as can be proved by nastier examples like</p>
<pre><code>&gt;&gt;&gt; foo[0] = foo = [0]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'foo' is not defined
&gt;&gt;&gt; foo = foo[0] = [0]
&gt;&gt;&gt; foo
[[...]]
&gt;&gt;&gt; foo[0]
[[...]]
&gt;&gt;&gt; foo is foo[0]
True
</code></pre>
<p>But the <a href="http://docs.python.org/2/reference/simple_stmts.html#assignment-statements">python language reference</a> states that assignment statements have the form </p>
<pre><code>(target_list "=")+ (expression_list | yield_expression)
</code></pre>
<p>and on assignment the <code>expression_list</code> is evaluated first and then the assigning happens.</p>
<p>So how can the line <code>foo = bar = 5</code> be valid, given that <code>bar = 5</code> isn't an <code>expression_list</code>?  How are these multiple assignments on one line getting parsed and evaluated?  Am I reading the language reference wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>All credit goes to @MarkDickinson, who answered this in a comment:</p>
<blockquote>
<p>Notice the <code>+</code> in <code>(target_list "=")+</code>, which means one or more copies. In <code>foo = bar = 5</code>, there are two <code>(target_list "=")</code> productions, and the <code>expression_list</code> part is just <code>5</code></p>
</blockquote>
<p>All <code>target_list</code> productions (i.e. things that look like <code>foo =</code>) in an assignment statement get assigned, from left to right, to the <code>expression_list</code> on the right end of the statement, after the <code>expression_list</code> gets evaluated.</p>
<p>And of course the usual 'tuple-unpacking' assignment syntax works within this syntax, letting you do things like</p>
<pre><code>&gt;&gt;&gt; foo, boo, moo = boo[0], moo[0], foo[0] = moo[0], foo[0], boo[0] = [0], [0], [0]
&gt;&gt;&gt; foo
[[[[...]]]]
&gt;&gt;&gt; foo[0] is boo
True
&gt;&gt;&gt; foo[0][0] is moo
True
&gt;&gt;&gt; foo[0][0][0] is foo
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Mark Dickinson explained the syntax of what is happening, but the weird examples involving <code>foo</code> show that the semantics can be counter-intuitive.</p>
<p>In C, <code>=</code> is a right-associative operator which returns as a value the RHS of the assignment so when you write <code>x = y = 5</code>, <code>y=5</code> is first evaluated (assigning 5 to <code>y</code> in the process) and this value (5) is then assigned to <code>x</code>.</p>
<p>Before I read this question, I naively assumed that roughly the same thing happens in Python. But, in Python <code>=</code> <em>isn't</em> an expression (for example, <code>2 + (x = 5)</code> is a syntax error). So Python must achieve multiple assignments in another way.</p>
<p>We can disassemble rather than guess:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis('x = y = 5')
  1           0 LOAD_CONST               0 (5)
              3 DUP_TOP
              4 STORE_NAME               0 (x)
              7 STORE_NAME               1 (y)
             10 LOAD_CONST               1 (None)
             13 RETURN_VALUE
</code></pre>
<p>See <a href="https://docs.python.org/2/library/dis.html" rel="noreferrer">this</a> for a description of the byte code instructions.</p>
<p>The first instruction pushes 5 onto the stack.</p>
<p>The second instruction duplicates it -- so now the top of the stack has two 5s</p>
<p><code>STORE_NAME(name)</code> "Implements name = TOS" according to the byte code documentation </p>
<p>Thus <code>STORE_Name(x)</code> implements <code>x = 5</code> (the 5 on top of the stack), popping that 5 off the stack as it goes, after which <code>STORE_Name(y)</code> implements <code>y = 5</code> with the other 5 on the stack.</p>
<p>The rest of the bytecode isn't directly relevant here.</p>
<p>In the case of <code>foo = foo[0] = [0]</code> the byte-code is more complicated because of the lists but has a fundamentally similar structure. The key observation is that once the list <code>[0]</code> is created and placed on the stack then the instruction <code>DUP_TOP</code> doesn't place another <em>copy</em> of <code>[0]</code> on the stack, instead it places another <em>reference</em> to the list. In other words, at that stage the top two elements of the stack are aliases for the same list. This can be seen most clearly in the somewhat simpler case: </p>
<pre><code>&gt;&gt;&gt; x = y = [0]
&gt;&gt;&gt; x[0] = 5
&gt;&gt;&gt; y[0]
5
</code></pre>
<p>When <code>foo = foo[0] = [0]</code> is executed, the list <code>[0]</code> is first assigned to <code>foo</code> and then an alias of the same list is assigned to <code>foo[0]</code>. This is why it results in <code>foo</code> being a circular reference.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>bar = 5</code> is not an expression.  The multiple assignment is a separate statement from the assignment statement; the expression is everything to the right of the right-most <code>=</code>.</p>
<p>A good way to think about it is that the right-most <code>=</code> is the major separator; everything to the right of it happens from left to right, and everything to the left of it happens from left to right as well.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-assignment_stmt" rel="nofollow">https://docs.python.org/3/reference/simple_stmts.html#grammar-token-assignment_stmt</a></p>
<blockquote>
<p>An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.</p>
</blockquote>
</div>
<span class="comment-copy">Notice the <code>+</code> in <code>(target_list "=")+</code>, which means one or more copies.  In <code>foo = bar = 5</code>, there are two <code>(target_list "=")</code> productions, and the <code>expression_list</code> part is just <code>5</code>.</span>
<span class="comment-copy">Aha!  That's what I was missing.  If you make this an answer I can accept it.  Thank you!</span>
<span class="comment-copy">I thought the same thing about right-associativity at first, too, but I don't think that's what python's doing.  If it was, <code>foo[0] = foo = [0]</code> would be a valid python statement, but it's not.  Rather, <code>foo = foo[0] = [0]</code> is a valid statement - one that's equivalent to <code>foo = [0]; foo[0] = foo</code>.  So to use your example, <code>x = y = z = 5</code> is getting evaluated weird-left-associatively as <code>x = 5; y = 5; z = 5</code>.  The plot thickens...</span>
<span class="comment-copy">Interesting ideas!  @MarkDickinson pointed out my misreading of the language reference above, though.  Now the whole thing makes sense, along with the fact that you can do things like <code>foo, boo = foo[0], boo[0] = [0], [0]</code></span>
<span class="comment-copy">@cvitkovm I figured out what was happening with the <code>foo</code> cases. The circular reference is set up because of how assignments involving lists copy references rather than the lists themselves. Thank you for posing such an interesting question.</span>
<span class="comment-copy">Well I definitely agree that's how the code is being evaluated, but I'm already okay on what the code does.  What I'm trying to figure out is how python is parsing statements like <code>foo = bar = 5</code> when it seems like that syntax conflicts with what's specified in the language reference. Could you give a reference for where you found that "The multiple assignment is a separate statement from the assignment statement..."?  I could only find 'Assignment Statements' in the language reference.</span>
<span class="comment-copy">It might work to check what exactly the cpython implementation does.</span>
<span class="comment-copy">@cvitkovm  I know, because I've contributed to the <a href="https://github.com/berkerpeksag/astor/" rel="nofollow noreferrer">astor</a> project that an assignment is stored as a single AST node, but possibly with <a href="https://github.com/berkerpeksag/astor/blob/master/astor/code_gen.py#L238" rel="nofollow noreferrer">multiple targets on the left</a>.  If you look at that link, you will see that reconstituting the source requires printing of an equals sign for each target.</span>
<span class="comment-copy">Thanks @PatrickMaupin.  Mark Dickinson pointed out above where I misread the language reference, but it's nice to know how it plays out in the AST.</span>
