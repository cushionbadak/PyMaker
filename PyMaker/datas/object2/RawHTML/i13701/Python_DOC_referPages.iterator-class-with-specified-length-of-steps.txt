<div class="post-text" itemprop="text">
<p>I am trying to write iterator class that will allow me to specify the length of steps the iterator makes. But I am stuck with that problem.</p>
<p>My code:</p>
<pre><code>class Reverse:
    def __init__(self, data, step):
        self.data = data
        self.index = len(data)
        self.step = step
    def __iter__(self):
        return self
    def __next__(self, step):
        if self.index &lt;= 0:
            raise StopIteration
        self.index = self.index - self.step
        return self.data[self.index]

rev = Reverse('Drapsicle', 2)
</code></pre>
<p>this shows me letter 'l' always</p>
<pre><code>rev.__next__(2)
</code></pre>
<p>but loop gives me: =TypeError: <strong>next</strong>() missing 1 required positional argument: 'step'`:</p>
<pre><code>for char in rev:
    print(char)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>__next__</code> method should not take any arguments (other than <code>self</code>). You are not even using the <code>step</code> argument, you are (correctly) using <code>self.step</code>. Just remove the argument:</p>
<pre><code>def __next__(self):
    if self.index &lt;= 0:
        raise StopIteration
    self.index = self.index - self.step
    return self.data[self.index]
</code></pre>
<p>Next, you have an error; you want to test if the index drops below <code>0</code> <em>after</em> subtracting, otherwise you generate negative indices. You could test the index together with the step subtracted:</p>
<pre><code>def __next__(self):
    next_index = self.index - self.step
    if next_index &lt; 0:
        raise StopIteration
    self.index = next_index
    return self.data[self.index]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; class Reverse:
...     def __init__(self, data, step):
...         self.data = data
...         self.index = len(data)
...         self.step = step
...     def __iter__(self):
...         return self
...     def __next__(self):
...         next_index = self.index - self.step
...         if next_index &lt; 0:
...             raise StopIteration
...         self.index = next_index
...         return self.data[self.index]
... 

&gt;&gt;&gt; rev = Reverse('Drapsicle', 2)
&gt;&gt;&gt; for char in rev:
...     print(char)
... 
l
i
p
r
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I realize this is not a direct answer to the question, but in case you just want to get the job done, and think you need to implement it all yourself; you don't.</p>
<pre><code>from itertools import islice

def reverse_step(iterable, step):
    # To behave like your code; starts with step-th item
    start = step - 1

    for item in islice(reversed(iterable), start, None, step)):
        yield item
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To implement this:</p>
<pre><code>&gt;&gt;&gt; 'Drapsicle'[::-2]
'ecsaD'
</code></pre>
<p>as your own iterator:</p>
<pre><code>class Reverse:
    def __init__(self, data, step):
        self.data = data
        self.index = len(data) - 1
        self.step = step
    def __iter__(self):
        return self
    def __next__(self):
        if self.index &lt; 0:
            raise StopIteration
        value = self.data[self.index] 
        self.index -= self.step
        return value
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; list(Reverse('Drapsicle', 2))
['e', 'c', 's', 'a', 'D']
</code></pre>
<p>Note:</p>
<ul>
<li><code>self.index</code> starts with <code>len - 1</code></li>
<li><code>__next__()</code> does not accept any argument except <code>self</code></li>
<li>first you get <code>value</code> then you decrement the index</li>
</ul>
<p>A more flexible design would separate the reversing (e.g., delegate it to the <code>reversed()</code> builtin) and using <code>step != 1</code> (accept an arbitrary reversible iterable and/or use/implement extended slicing) e.g., based on <a href="https://stackoverflow.com/a/32138404/4279">@Cyphase's suggestion</a>:</p>
<pre><code>&gt;&gt;&gt; list(islice(reversed('Drapsicle'), None, None, 2))
['e', 'c', 's', 'a', 'D']
</code></pre>
</div>
<span class="comment-copy">You seem to be requiring a <code>step</code> argument in <code>__next__</code> but not using it, just using <code>self.step</code>.</span>
<span class="comment-copy">do you want to emulate: <code>'Drapsicle'[::-2]</code>?</span>
<span class="comment-copy">no, not really, thanks anyway</span>
<span class="comment-copy">What is the desired output? Do you want: <code>''.join(Reverse('Drapsicle', 2))  == 'ecsaD'</code> or something else? What is the expected input? Is it always a string? Could it be a type with just <code>__reversed__</code> method (<a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow noreferrer">see <code>reversed()</code> builtin</a>)?</span>
<span class="comment-copy">So simple, thanks ! :)</span>
<span class="comment-copy">This returns <code>'e'</code> before it runs out; <code>self.index = self.index - self.step</code> should be above the <code>if</code>.</span>
<span class="comment-copy">@Cyphase: well spotted; adjusted answer to compensate.</span>
<span class="comment-copy">OP probably wants an <a href="http://stackoverflow.com/a/32138809/4279">analog of <code>'Drapsicle'[::-2]</code></a></span>
<span class="comment-copy">@J.F.Sebastian: that works for lists, but Cyphase's answer at least works for anything supporting <code>__reversed__</code> iteration.</span>
<span class="comment-copy">I think OP wants: <code>islice(reversed('Drapsicle'), None, None, 2)</code></span>
<span class="comment-copy">@J.F.Sebastian, I don't think so. The question indicates <code>'l'</code> was the first value OP was receiving, without any mention of that being wrong, and OP replied positively to Martijn's answer that returned <code>l, i, p, r</code>.</span>
