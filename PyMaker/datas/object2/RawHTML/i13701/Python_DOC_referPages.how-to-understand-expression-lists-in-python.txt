<div class="post-text" itemprop="text">
<p>When I read the Python document today, I found <code>Expression lists</code> on <a href="https://docs.python.org/3/reference/expressions.html#expression-lists">Python Documents</a>, the description on the site like this:</p>
<blockquote>
<p><code>expression_list ::=  expression ( "," expression )* [","]</code></p>
<p><em>An expression list containing at least one comma yields a tuple. The length of the tuple is the number of expressions in the list. The expressions are evaluated from left to right.</em></p>
<p><em>The trailing comma is required only to create a single tuple (a.k.a. a singleton); it is optional in all other cases. A single expression without a trailing comma doesn’t create a tuple, but rather yields the value of that expression. (To create an empty tuple, use an empty pair of parentheses: ().)</em></p>
</blockquote>
<p>Because the examples are not given on the site, So I just wondering anyone can give a brief description about this, and give a example about its usage. Thank a lots.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here are some samples to help you understand what is going on:</p>
<blockquote>
<p>An expression list containing at least one comma yields a tuple.</p>
</blockquote>
<p>This means, that if you have <code>1,2</code>, this will create a tuple. The length is how many items you have.</p>
<blockquote>
<p>The trailing comma is required only to create a single tuple (a.k.a. a
  singleton); it is optional in all other cases.</p>
</blockquote>
<p>This means that if you want to create a tuple with one item, you need to have a comma at the end, like this <code>1,</code>, otherwise:</p>
<blockquote>
<p>A single expression without a trailing comma doesn’t create a tuple,
  but rather yields the value of that expression.</p>
</blockquote>
<p>So <code>1</code> is not creating a tuple, what will happen is the express will be evaluated. This sounds like an obvious point but it makes sense if you write <code>(1)</code> and then expect it to be evaluated as a tupe (in the case of <code>(1)</code>, it will be evaluated to the integer value <code>1</code>).</p>
<p>Finally</p>
<blockquote>
<p>(To create an empty tuple, use an empty pair of parentheses: ().)</p>
</blockquote>
<p>If for some reason you want to create an empty tuple as an expression, use the following special syntax <code>()</code></p>
<p>It is a common practice to surround expressions (especially in the case of tuples) with (), but this is not required - although sometimes it helps with readability.  <code>1,2</code> and <code>(1,2)</code> are equal:</p>
<pre><code>&gt;&gt;&gt; a = 1,2
&gt;&gt;&gt; type(a)
&lt;type 'tuple'&gt;

&gt;&gt;&gt; b = (1,2)
&gt;&gt;&gt; type(b)
&lt;type 'tuple'&gt;

&gt;&gt;&gt; a == b
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This talks about how you write tuples.</p>
<p>For instance,</p>
<pre><code>&gt;&gt;&gt; 1, 2
(1, 2)
</code></pre>
<p>is a two element tuple, as is</p>
<pre><code>&gt;&gt;&gt; 7*8, 5-6
(56, -1)
</code></pre>
<p>Tuples are usually written with parentheses around them for clarity, but they are unnecessary; except in case of the 0-element tuple, <code>()</code>.</p>
<p>One-element tuples are another exception, as there it is mandatory to have the comma:</p>
<pre><code>&gt;&gt;&gt; 1,
(1, )
</code></pre>
<p>Without the comma it wouldn't be possible to distinguish this from the normal number <code>1</code>. You can add an extra comma after multi-element tuples too, but it doesn't do anything in that case:</p>
<pre><code>&gt;&gt;&gt; 1, 2,
(1, 2)
</code></pre>
</div>
<span class="comment-copy">The language reference is not meant to be used as a "tutorial" style description of the language, it's meant to specify the language. For examples you should probably read the tutorial instead - and for most people it's the tutorial one should read first. After reading the tutorial the language reference would become more clearer.</span>
<span class="comment-copy">This specifies the language, it doesn't teach you how to make lists. It's python documentation, not "Python Documents". It's "Thanks a lot", not "Thank a lot".</span>
<span class="comment-copy">Thanks buddy, I have know that, but why the documents wrote <code>expression_list ::=  expression ( "," expression )* [","]</code> on it?. I just can not understand what is it mean. Is it a regular expression？</span>
<span class="comment-copy">Oh, no that's just the syntax of the expression itself. It is describing how to parse the expression list (ie, what it would look like to a token parser).</span>
<span class="comment-copy">Note that the expression list does not include the paretheses, consequently your examples in the beginning is a bit misleading. They should be <code>1, 2</code>, <code>1,</code> and 1 if they're to be expression lists.</span>
<span class="comment-copy">@AlexanderYau it's a regular grammar. You're looking in the wrong place buddy, that page is for people who want to make a new python interpreter, not to write code. Search "tuple" or "list" instead in the search bar on python docs.</span>
