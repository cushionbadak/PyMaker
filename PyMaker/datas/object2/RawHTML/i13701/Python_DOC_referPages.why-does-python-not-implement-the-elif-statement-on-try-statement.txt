<div class="post-text" itemprop="text">
<p>So let's make a quick example.</p>
<pre><code>my_list = [
    {"name": "toto", "value": 3},
    {"name": "foo", "value": 42},
    {"name": "bar", "value": 56}
]

def foo(name):
    try:
        value = next(e["value"] for e in my_list if e["name"] == name)
    except StopIteration:
        print "Uuuh not found."
    else:
        if value % 2:
            print "Odd !"
        else:
            print "Even !"
</code></pre>
<p>As you can see, the above code works :</p>
<pre><code>&gt;&gt;&gt; foo("toto")
Odd !
&gt;&gt;&gt; foo("foo")
Even !
&gt;&gt;&gt; foo("kappa")
Uuuh not found.
</code></pre>
<p>I was just wondering if there is a particular reason about why we can't use the <code>elif</code> statement with the <code>try</code> statement like this :</p>
<pre><code>try:
    value = next(e["value"] for e in my_list if e["name"] == name)
except StopIteration:
    print "Uuuh not found."
elif value % 2:
    print "Odd !"
else:
    print "Even !"
</code></pre>
<p>Of course, this would not work because as it is defined in the <a href="https://docs.python.org/3/reference/compound_stmts.html#try" rel="noreferrer" title="Try statement documentation">try statement documentation</a>, the <code>elif</code> statement is not defined. But why ? Is there a particular reason (like bound / unbound variable) ? Is there any sources about this ?</p>
<p>(Side note: no <code>elif-statement</code> tag ?)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are asking why then that is a question for the python devs, the syntax is clearly defined in the <a href="https://docs.python.org/3/reference/compound_stmts.html#try" rel="nofollow noreferrer">docs</a> you linked to.</p>
<p>Apart from that what you are trying to do can obviously all be done inside the try/except. If you use an else it belongs to the try the same as when you use an else with a for loop, I think it makes perfect sense to only use else and not allow <code>elif</code>, elif's are there to behave like <code>switch/case</code> statements in other languages.</p>
<p>From an old thread on gossamer-threads <a href="http://www.gossamer-threads.com/lists/python/python/47699" rel="nofollow noreferrer">Why no 'elif' in try/except?</a> :</p>
<blockquote>
<p>Because it makes no sense? </p>
<p>The except clauses are for handling exceptions, the else 
  clause is for handling the case when everything worked fine. </p>
<p>Mixing the two makes no sense. In an except clause, there 
  is no result to test; in an else clause, there is. Is the elif supposed 
  to execute when there are exceptions, or when there aren't? 
  If it's simply an extension to the else clause, then I suppose it 
  doesn't harm anything, but it adds complexity to the language 
  definition. At this point in my life, I tend to agree with Einstein - 
  make everything as simple as possible, but no simpler. The last 
  place (or at least one of the many last places) I want additional 
  complexity is in exception handling. </p>
</blockquote>
<p>You always need at least one if to use an elif,  it is simply invalid syntax without. The only thing that could end up not being defined is <code>value</code>, you should  move the logic inside the try/except using if/else:</p>
<pre><code>try:
    value = next(e["value"] for e in my_list if e["name"] == name)
    if value % 2:
        print("Odd !")
    else:
        print("Even !")
except StopIteration:
    print("Uuuh not found.")
</code></pre>
<p>If <code>value = next...</code>  errors your  <code>print("Uuuh not found.")</code> will be executed, if not your then your if/else will.</p>
<p>You can have multiple elif's but you must start with an if:</p>
<pre><code>if something:
  ...
elif something_else:
   ....
elif .....
</code></pre>
<p>Another option is to use a default value with <code>next</code> then use <code>if/elif/else</code>, if we get no name matched next will return <code>None</code> so we check <code>if value is not None</code>, if it is we print <code>"Uuuh not found."</code> or else we got a matched name so we go to the elif/else :</p>
<pre><code>value = next((e["value"] for e in my_list if e["name"] == name), None)
if value is None:
    print("Uuuh not found.")
elif value % 2:
    print("Odd !")
else:
    print("Even !")
</code></pre>
</div>
<span class="comment-copy">You have no preceding if which is required</span>
<span class="comment-copy">Wait... no ? Because <code>if</code> statement would be a new block ?</span>
<span class="comment-copy">@FunkySayu why not add the if statement with in the block of try</span>
<span class="comment-copy">You should use <code>if</code> and  move  if/else inside the try. If there is an error the if/else will not be executed, it is is successful it will</span>
<span class="comment-copy">Excellent answer --- though I think that you could replace the word "can" by "should" in the sense that the block between <code>try</code> and <code>except</code> is precisely where code that doesn't make sense in the exceptional case is supposed to go.</span>
<span class="comment-copy">How does this answer answer the <i>why...?</i> part of the question?</span>
<span class="comment-copy">But why must it be? (Why have the designers of Python done it this way?) That's in the title of the original question.</span>
<span class="comment-copy">@ElRuso, no, we are checking for None not a falsey value, the only value that could cause a side effect is if the value was None</span>
<span class="comment-copy">@PadraicCunningham So the argument is that because no other language has it python shouldn't have it either? But python have features that are rare in other languages, fx indentation sensitivity. Note that only a few languages has <code>elif</code> at all - which languages has it and also has exception handling (prerequisites for the question to have any meaning). I don't know any other languges that has those both features so comparing with other languages is no good argument IMHO. Is there a reason why it would be a bad idea to accept <code>elif</code> as part of the <code>try</code> statement?</span>
