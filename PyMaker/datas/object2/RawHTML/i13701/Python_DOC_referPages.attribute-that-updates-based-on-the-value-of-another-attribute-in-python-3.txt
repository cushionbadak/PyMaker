<div class="post-text" itemprop="text">
<p>Say I have a class:</p>
<pre><code>class Foo(object):
    def __init__(self):
        self.some_attr = ''
        self.a_list = []
        self.empty_check = bool(self.a_list)
myFoo = Foo()
myFoo.a_list.append(1)
</code></pre>
<p>Much like <a href="https://stackoverflow.com/questions/14916284/in-python-class-object-how-to-auto-update-attributes">this user</a>, I want <code>empty_check</code> to change to <code>True</code> all by itself, without me having to do anything else, as soon as something is appended to the list.  As it is above, <code>myFoo.empty_check</code> is still <code>False</code>.  However, I want mine to go "one way".  That is, I don't want <code>myFoo.empty_check = True</code> to change <code>myFoo.a_list</code> into <code>[]</code>.  (So technically not a duplicate, right?)</p>
<p>How can I accomplish this?</p>
<p>It seems I should be using property setters, but despite googling around for a few hours, including reading up on the linked question, I still don't understand how to do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use a <a href="https://docs.python.org/2/library/functions.html#property" rel="nofollow"><code>property</code></a> , the property would be evaluated everytime you try to access it, so you would end up checking the latest <code>self.a_list</code> . Also, if you only specify the getter for the property, without setter, you would not be able to do - <code>myFoo.empty_check = True</code> , etc. Example -</p>
<pre><code>class Foo(object):
    def __init__(self):
        self.some_attr = ''
        self.a_list = []
    @property
    def empty_check(self):
        return bool(self.a_list)
myFoo = Foo()
print(myFoo.empty_check)
myFoo.a_list.append(1)
print(myFoo.empty_check)
</code></pre>
<p>Example/Demo -</p>
<pre><code>&gt;&gt;&gt; class Foo(object):
...     def __init__(self):
...         self.some_attr = ''
...         self.a_list = []
...     @property
...     def empty_check(self):
...         return bool(self.a_list)
...
&gt;&gt;&gt; myFoo = Foo()
&gt;&gt;&gt; print(myFoo.empty_check)
False
&gt;&gt;&gt; myFoo.a_list.append(1)
&gt;&gt;&gt; print(myFoo.empty_check)
True
&gt;&gt;&gt; myFoo.empty_check = True
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: can't set attribute
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should do it (I changed some things to follow better practices):</p>
<pre><code>class Foo(object):
    def __init__(self):
        self.some_attr = ''
        self.a_list = []

    @property
    def is_empty(self):
        return not self.a_list
</code></pre>
<p>Demonstration:</p>
<pre><code>&gt;&gt;&gt; my_foo = Foo()
&gt;&gt;&gt; print(my_foo.is_empty)
True
&gt;&gt;&gt; my_foo.a_list.append(1)
&gt;&gt;&gt; print(my_foo.is_empty)
False
&gt;&gt;&gt; my_foo.is_empty = True
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: can't set attribute
&gt;&gt;&gt; 
</code></pre>
<p>A <code>property</code> essentially gives you the syntax of accessing an attribute's value, while behind the scenes it's calling a method. Properties aren't just for getting a value; you can also use them for setting and deleting. For more information, see <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow">the <code>property</code> documentation</a>.</p>
</div>
