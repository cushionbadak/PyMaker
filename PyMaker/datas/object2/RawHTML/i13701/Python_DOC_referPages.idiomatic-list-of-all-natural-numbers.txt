<div class="post-text" itemprop="text">
<p>I am trying to create a generator that will return the natural numbers in order. This is used to enumerate another generator which will exit upon <code>StopIteration</code>, which seems like the easiest way to do it. However, I cannot find an idiomatic way of creating this generator:</p>
<pre><code>def numbers():
    i = 0
    while True:
        yield i
        i += 1

q = Queue.Queue()
for i in numbers():
    try:
        q.put((i, my_generator.next()))
    except StopIteration:
        break
</code></pre>
<p>This does work, but it seems unpythonic to use a <code>while True:</code> in this way.</p>
<p>Is there a standard library function to iterate over the natural numbers?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a couple easy options.</p>
<p>Use a large <code>range()</code>:</p>
<pre><code>q = Queue.Queue()
for i in range(10**10):
    try:
        q.put((i, my_generator.next()))
    except StopIteration:
        break
</code></pre>
<p>Or simply <code>enumerate()</code> the generator you're actually interested in:</p>
<pre><code>q = Queue.Queue()
for item in enumerate(my_generator):
    q.put(item)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To answer your literal question, use <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow"><code>itertools.count()</code></a>. It'll count up from a <code>start</code> value by <code>step</code>, into infinity.</p>
<p>That said, it seems what you actually want to do is this:</p>
<pre><code>for idx, item in enumerate(my_generator):
    q.put((idx, item))
</code></pre>
</div>
<span class="comment-copy">Have a look at <code>itertools.count</code>.</span>
<span class="comment-copy">@ajcr Yes, itertools.count is the function I was looking for. Thank you very much.</span>
<span class="comment-copy">BTW, using a <code>while True</code> in a generator like that isn't particularly un-pythonic. In fact, it's what the <a href="https://docs.python.org/2/library/itertools.html#itertools.count" rel="nofollow noreferrer">documentation</a> gives in an equivalent implementation of <code>itertools.count</code>.</span>
<span class="comment-copy">Alternatively, why not just <code>enumerate()</code> your generator?</span>
<span class="comment-copy">@AdamSmith - Yes, after I mentioned it... again...</span>
<span class="comment-copy">This could be Python 2; <code>range()</code> would return a very large list. Why not just recommend <code>itertools.count()</code>? It's the better option anyway (in that code). Obviously the <code>enumerate</code> way is best.</span>
<span class="comment-copy">Yes, it could be Python 2... or it could be Python 3. If the question doesn't specify Python 2, I assume it uses the actively-developed version of Python, which is Python 3.</span>
<span class="comment-copy">Sure, I treat Python 3 as the default, too. But I also try to make my code work in Python 2 as well. Someone might use your suggestion in Python 2 and get a less-than optimal result. Of course, <code>range(10**10)</code> is likely to give an error anyway on Python 2. At the very least you should mention the issue. Anyway, this is a bit of a pointless discussion, because again, <code>itertools.count()</code> is the better choice all-around.</span>
<span class="comment-copy">@ozgur - Thanks for adding the <code>()</code>. I hadn't double-checked the question's code before copy-pasting it.</span>
<span class="comment-copy">It'd be easier not to unpack and then repack the values</span>
<span class="comment-copy">@Programman I actually disagree. This is very clear, while <code>for indexeditem in enumerate(my_generator): q.put(indexeditem)</code> is less so.</span>
<span class="comment-copy">What do you  mean by "easier" @Programman? It's certainly less readable.</span>
<span class="comment-copy">@Cyphase I meant more readable, but I guess that's a matter of opinion.</span>
<span class="comment-copy">Why do you think not unpacking it is more readable?</span>
