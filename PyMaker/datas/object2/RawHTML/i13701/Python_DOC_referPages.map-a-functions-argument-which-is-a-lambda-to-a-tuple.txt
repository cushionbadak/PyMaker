<div class="post-text" itemprop="text">
<p>This is the function call below and I'm trying to construct the function <code>fee</code>, I need to map the tuple using functional prog. so that it turns into <code>(6-7)**2 + (7-1)**2 + (1-4)**2</code>, and the last one is <code>(4-6)**2</code>. Then I will sum these and return this value in <code>fee</code>.</p>
<pre><code>fee((6, 7, 1, 4), lambda x, y: (x-y) ** 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can play with python <a href="https://docs.python.org/3/library/functions.html" rel="nofollow">built-in functions</a> :</p>
<pre><code>&gt;&gt;&gt; def fee(tup):
...    return sum(map(lambda x,y:(x-y)**2,tup,tup[1:]+(tup[0],)))
</code></pre>
<p>Demo :</p>
<pre><code>&gt;&gt;&gt; t=(6, 7, 1, 4)
&gt;&gt;&gt; fee(t)
50
</code></pre>
<p>You can use <code>map</code> function to apply the <code>lambda</code> function on pairs and sum the result :</p>
<pre><code>&gt;&gt;&gt; zip(t,t[1:]+(t[0],))
[(6, 7), (7, 1), (1, 4), (4, 6)]
</code></pre>
<p>Instead of <code>map</code> as a more efficient way you can use <code>zip</code> and a generator expression within <code>sum</code> :</p>
<pre><code>&gt;&gt;&gt; def fee(tup):
...    return sum((x-y)**2 for x,y in zip(tup,tup[1:]+(tup[0],))))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this with a combination of <code>zip</code>, <code>map</code>, and <code>sum</code>:</p>
<pre><code>def fee(vals):
    x1 = zip(vals, vals[1:] + [vals[0]])
    x2 = map(lambda t: (t[0] - t[1]) ** 2, x1)
    return sum(x2)
</code></pre>
<p>Explanation:</p>
<ol>
<li><code>zip(vals, vals[:-1] + [vals[0]])</code> combines <code>vals</code> into a list of 2-tuple pairs.</li>
<li><code>map(lambda t: (t[0] - t[1]) ** 2, x1)</code> performs the mathematical operation on each 2-tuple element.</li>
<li><code>sum(x2)</code> sums the results of #2 together.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>This should do it:</p>
<pre><code>from itertools import tee

try:
    from itertools import izip as zip  # Python 2
except ImportError:
    pass  # Python 3


# An itertools recipe
# https://docs.python.org/3/library/itertools.html#itertools-recipes
def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)


def fee(args, func):
    last_value = func(args[-1], args[0])
    return sum(func(x, y) for x, y in pairwise(args)) + last_value


print(fee((6, 7, 1, 4), lambda x, y: (x-y) ** 2))  # 50
</code></pre>
</div>
<span class="comment-copy">What is a function fee?</span>
<span class="comment-copy">Can toy clarify what you are asking using an input/output example?</span>
<span class="comment-copy">Welcome to Stack Overflow, Cheese. SO is a question-and-answer site. Readers, such as yourself, ask questions and other readers attempt to answer the questions. Your post is missing a key element: a question. Do you have a specific question?</span>
<span class="comment-copy">fee = lambda t: sum((x-y)**2 for x, y in zip(t, t[1:]+(t[0],)))</span>
<span class="comment-copy">You don't have to zip explicitly. Since the first argument to <code>map</code> is a function that takes two arguments, you can just pass the two tuples as separate arguments: <code>map(lambda x, y: ..., tup, tup[1:] + (tup[0],))</code>.</span>
<span class="comment-copy">@chepner Yes, good point, thanks!</span>
<span class="comment-copy">The list comprehension makes it a moot point, though :) That's very much better than using <code>map</code> here.</span>
<span class="comment-copy">In your first solution with sum and map, will the map take any tuple length?</span>
<span class="comment-copy">@Cheese Yes, actually it's depends on your memory limit!</span>
