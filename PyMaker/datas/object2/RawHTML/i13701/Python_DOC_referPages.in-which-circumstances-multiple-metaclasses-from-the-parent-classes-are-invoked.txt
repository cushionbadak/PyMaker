<div class="post-text" itemprop="text">
<p>The strangely behaving code (tested with Python 2.7.3):</p>
<pre><code>class Meta1(type):
   def __new__(mcl, name, bases, attrs):
        print "Hello Meta1.__new__ "
        return super(Meta1, mcl).__new__(mcl, name, bases, attrs)

class Meta2(type):
    def __new__(mcl, name, bases, attrs):
        print "Hello Meta2.__new__ "
        return super(Meta2, mcl).__new__(
            type, # looks to cause all strange behavior, but anyway pass type here, not mcl
            name, bases, attrs)

print "Declaring BaseClass1"
class BaseClass1(object):
    __metaclass__ = Meta1

print "-----------------------"
print "Declaring BaseClass2"
class BaseClass2(BaseClass1):
    __metaclass__ = Meta2

print "-----------------------"
print BaseClass2.__class__
</code></pre>
<p>Its' output:</p>
<pre><code>Declaring BaseClass1
Hello Meta1.__new__ 
-----------------------
Declaring BaseClass2
Hello Meta2.__new__ 
Hello Meta1.__new__ # WHY WAS IT INVOKED?
-----------------------
&lt;class '__main__.Meta1'&gt;
</code></pre>
<p>Questions about the code:</p>
<p>Why the class BaseClass2 is defined without any issues even though the <code>__metaclass__</code> attribute for BaseClass2 is set to Meta2 and for its' parent class BaseClass1 the <code>__metaclass__</code> attribute is set to Meta1, and neither Meta1 no Meta2 is a subclass of the another class?</p>
<p>Why at the BaseClass2 definition both <code>Meta2.__new__</code> and <code>Meta1.__new__</code> are called?</p>
<p><strong>In which circumstances methods in the metaclasses of the parent classes are invoked?</strong></p>
<p>Long story:</p>
<p>While trying to understand how metaclasses in our project work I crafted the code which can be found above. (The project uses Python 2.7.3, and it looks that the metaclasses use in the project is sound since they are used for providing API to the users and metaclasses do quite a lot of things for the user under the hood.)</p>
<p>In the first place I was trying to find the documentation on how the metaclasses work with inheritance. The following (quite old but looks to be valid for Python 2.7) article by Guido van Rossum shed some light on how metaclass is picked in the case of inheritance, what are the requirements to the metaclass of the subling class and minor tricks which can be performed by Python when choosing the metaclass for the sibling class: <a href="https://www.python.org/download/releases/2.2.3/descrintro/" rel="nofollow">https://www.python.org/download/releases/2.2.3/descrintro/</a>. This and other writings which I have read on the metaclasses in Python don't explain the behavior I am observing. I guess reading Python interpreter code will shed the light but I believe in the power of documentation and hope that this extreme measure can be avoided. Any answers/pointers to the materials which describe the code behavior observed are welcome.</p>
</div>
<div class="post-text" itemprop="text">
<p>After a lot of looking around, I think I found the answer. The Python <strong>3</strong> documentation has one <a href="https://docs.python.org/3/reference/datamodel.html#determining-the-appropriate-metaclass" rel="nofollow noreferrer">section</a> that says this.</p>
<blockquote>
<p>3.3.3.3. Determining the appropriate metaclass</p>
<p>The appropriate metaclass for a class definition is determined as follows:</p>
<ul>
<li>if no bases and no explicit metaclass are given, then <code>type()</code> is used</li>
<li>if an explicit metaclass is given and it is not an instance of <code>type()</code>, then it is
  used directly as the metaclass</li>
<li>if an instance of <code>type()</code> is given as the explicit metaclass, or bases are defined, then the most derived metaclass is used</li>
</ul>
<p>The most derived metaclass is selected from the explicitly specified metaclass (if any) and the metaclasses (i.e. <code>type(cls)</code>) of all specified base classes. The most derived metaclass is one which is a subtype of <em>all</em> of these candidate metaclasses. If none of the candidate metaclasses meets that criterion, then the class definition will fail with <code>TypeError</code>.</p>
</blockquote>
<p>I think this still also applies to Python 2 (v2.7 anyway) even though I can't find anything like the above in its documentation.</p>
<p>The reason why the <code>BaseClass2</code> definition invokes both <code>Meta2.__new__()</code> <em>and</em> <code>Meta1.__new__()</code> is simple â€” <code>Meta2.__new__()</code> explicity invokes it via its call to <code>super()</code>. However to get it to work properly, you'd also need to change <code>Meta2.__new__()</code> so it returns <code>super(Meta2, mcl).__new__(mcl, name, bases, attrs)</code> instead of <code>super(Meta2, mcl).__new__(type, name, bases, attrs)</code>.</p>
</div>
<span class="comment-copy">I'm not sure why this works the way you show in Python 2, but it the definition of <code>BaseClass2</code> causes a <code>TypeError</code> in Python 3 due to a metaclass conflict (it is trying to inherit metaclass <code>Meta1</code> but you've told it to use the unrelated metaclass <code>Meta2</code>). I suspect Python 2's behavior is simply broken in this situation.</span>
