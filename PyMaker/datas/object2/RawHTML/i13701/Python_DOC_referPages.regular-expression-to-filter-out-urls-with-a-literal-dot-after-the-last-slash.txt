<div class="post-text" itemprop="text">
<p>I need the regex to identify urls that after the last forward slash</p>
<ul>
<li><p>have a literal dot, such as</p>
<pre><code>http://www.example.es/cat1/cat2/some-example_DH148439#.Rh1-js_4
</code></pre></li>
<li><p>do not have a literal dot, such as</p>
<pre><code>http://www.example.es/cat1/cat2/cat3
</code></pre></li>
</ul>
<p>So far I have only found the regular expression for matching everything before <code>^(.*[\\\/])</code> or after the last forward slash: <code>[^/]+$</code> as well as to match everything after a literal point after the last slash <code>(?!.*\.)(.*)</code> Yet I am unable to come out with the above, please help.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>\/([^\/]*\.+[^\/]*)$
</code></pre>
<p>The first / forces you to look after it.  The $ forces end of string and 
both class negations avoid any / between.
check @ <a href="https://regex101.com/" rel="nofollow">https://regex101.com/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Well, as usual, using a regex to match an URL is the wrong tool for the wrong job. You can use <a href="https://docs.python.org/2/library/urlparse.html" rel="nofollow">urlparse</a> (or <a href="https://docs.python.org/3/library/urllib.parse.html" rel="nofollow">urllib.parse</a> in python3) to do the job, in a very pythonic way:</p>
<pre><code>&gt;&gt;&gt; from urlparse import urlparse
&gt;&gt;&gt; urlparse('http://www.example.es/cat1/cat2/some-example_DH148439#.Rh1-js_4')
ParseResult(scheme='http', netloc='www.example.es', path='/cat1/cat2/some-example_DH148439', params='', query='', fragment='.Rh1-js_4')
&gt;&gt;&gt; urlparse('http://www.example.es/cat1/cat2/cat3')
ParseResult(scheme='http', netloc='www.example.es', path='/cat1/cat2/cat3', params='', query='', fragment='')
</code></pre>
<p>and if you really want a regex, the following regex is an example that would answer your question:</p>
<pre><code>import re
&gt;&gt;&gt; re.match(r'^[^:]+://([^.]+\.)+[^/]+/([^/]+/)+[^#]+(#.+)?$', 'http://www.example.es/cat1/cat2/some-example_DH148439#.Rh1-js_4') != None
True
&gt;&gt;&gt; re.match(r'^[^:]+://([^.]+\.)+[^/]+/([^/]+/)+[^#]+(#.+)?$', 'http://www.example.es/cat1/cat2/cat3') != None
True
</code></pre>
<p>but the regex I'm giving is good enough to answer your question, but is not a good way to validate an URL, or to split it in pieces. I'd say its only interest is to actually answer your question.</p>
<p>Here's the automaton generated by the regex, to better understand it:</p>
<p><img alt="Regular expression visualization" src="https://www.debuggex.com/i/fRDogYTzhFcrldca.png"/></p>
<p>Beware of what you're asking, because JL's regex won't match:</p>
<pre><code>http://www.example.es/cat1/cat2/cat3
</code></pre>
<p>as after rereading your question 3×, you're actually asking for the following regex:</p>
<pre><code>\/([^/]*)$
</code></pre>
<p>which will match both your examples:</p>
<pre><code>http://www.example.es/cat1/cat2/some-example_DH148439#.Rh1-js_4
http://www.example.es/cat1/cat2/cat3
</code></pre>
<p>What @jl-peyret suggests, is only how to <em>match a litteral dot following a <code>/</code></em>, which is generating the following automaton:</p>
<p><img alt="Regular expression visualization" src="https://www.debuggex.com/i/nXBm5T-mjI7Li7te.png"/></p>
<p>So, whatever you really want:</p>
<ol>
<li>use urlparse whenever you can to match parts of an URL</li>
<li>if you're trying to define a django route, then trying to match the fragment is hopeless</li>
<li>next time you do a question, please make it precise, and give an example of what you tried: help us help you.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I would use a look-ahead like so</p>
<pre><code>(?=.*\.)([^/]+$)
</code></pre>
<p><a href="https://regex101.com/r/yW4aZ3/272" rel="nofollow">Demo</a></p>
<pre><code>(?=             # Look-Ahead
  .             # Any character except line break
  *             # (zero or more)(greedy)
  \.            # "."
)               # End of Look-Ahead
(               # Capturing Group (1)
  [^/]          # Character not in [/] Character Class
  +             # (one or more)(greedy)
  $             # End of string/line
)               # End of Capturing Group (1)
</code></pre>
<p>or a negative look-ahead like so</p>
<pre><code>(?!.*\.)([^/]+$)
</code></pre>
<p>for the opposite case</p>
</div>
<span class="comment-copy">If this is the requested URL, then the fragment identifier (ie. everything after the <code>#</code> eg <code>.Rh1-js_4</code>) is not actually passed to the server, so you can't check this server-side. (?)</span>
<span class="comment-copy">Except if you're in Django...</span>
<span class="comment-copy">Why wouldn't that work in django? Besides the fact that the fragment part is only being used on the client side, the OP's question is pretty clear: he wants to match URLs. I'm not trying to guess what the OP is trying to do, and @w3d already made a comment about the fact that the fragment part is going to be eaten.</span>
<span class="comment-copy">I mean that in django routing you <i>need</i> to use a regex.  Otherwise a split on / followed by a . check would do.</span>
<span class="comment-copy">indeed, though it's not what the OP is asking, whatever he's actually asking…</span>
<span class="comment-copy">Well, I don't disagree with the old joke that sometimes a programmer starting out with one problem to solve and using a regex on it now has 2 problems...  BTW, I did test that my regex did <b>not</b> match his cat2/cat3, but I really couldn't figure out from the question how you could ask for a regex that both needed a '.' and also didn't care if there was a '.' so I assumed he forgot to mention cat2/cat3 was <b>not</b> supposed to match.  Question:  where did you get your state diagram from?  I often can use help on regexes.</span>
