<div class="post-text" itemprop="text">
<p>Suppose we have the following Python function:</p>
<pre><code>def lookup_current_prices_dict(stocks):
    prices = {}

    for stock in stocks:
        prices[stock] = stock_price_toolkit.get_current_price(stock)

    return prices
</code></pre>
<p>I want to write a unit test for this function, but I don't want to depend on the prices looked up using the <code>stock_price_toolkit</code> module. In effect, I want to tell <code>stock_price_toolkit</code> to always return <code>1.00</code> when <code>get_current_price()</code> is called so that I can just test the rest of the function.</p>
<p>I know that this can be done using mock, but I couldn't find any good documentation on how to accomplish this specific task.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this with <code>mock.patch</code>, something like this:</p>
<pre><code>with patch('sock_price_toolkit.get_current_price') as m:
    m.return_value = '1.00'
    prices = lookup_current_prices_dict(stocks)
</code></pre>
<p>Check the oficial <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow">documentation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow"><code>mock.patch</code></a>, and set <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.return_value" rel="nofollow"><code>return_value</code></a> of the mock object returned:</p>
<pre><code>import stock_price_toolkit

def lookup_current_prices_dict(stocks):
    prices = {}

    for stock in stocks:
        prices[stock] = stock_price_toolkit.get_current_price(stock)

    return prices

#####

import mock
# from unittest import mock  # If you're using Python 3.x
with mock.patch('stock_price_toolkit.get_current_price') as m:
    m.return_value = 1.0
    assert lookup_current_prices_dict(['stock1', 'stock2']) == {
        'stock1': 1.0, 'stock2': 1.0
    }
</code></pre>
<p>or, you can specify <code>return_value</code> as a keyword argument of the <code>mock.patch</code>:</p>
<pre><code>with mock.patch('stock_price_toolkit.get_current_price', return_value=1.0) as m:
    assert lookup_current_prices_dict(['stock1', 'stock2']) == {
        'stock1': 1.0, 'stock2': 1.0
    }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The exact method will depend slightly on which testing module you're using, but this should point you in the right direction:</p>
<pre><code>try:
    from unittest import mock  # Python 3
except ImportError:
    import mock  # Third-party module in Python 2


with mock.patch('stock_price_toolkit.get_current_price') as mock_price:
    mock_price.return_value = 1.0
    expected = {'STOC': 1.0, 'STOK': 1.0}
    assert lookup_current_prices(['STOC', 'STOK']) == expected
</code></pre>
</div>
