<div class="post-text" itemprop="text">
<pre><code>from itertools import combinations_with_replacement

x = 'opo'
v = combinations_with_replacement(x, len(x))
ans = [''.join(map(str, x)) for x in v]
print(" ".join(set(ans)))
</code></pre>
<p>I'm not sure why im missing the sequence <code>pop</code> here. Why does <code>pop</code> not show but <code>ppo</code> and <code>opp</code> do . </p>
<p>expected output <code>opp ppp poo ppo ooo opo  oop pop</code></p>
<p>actual output <code>opp ppp poo ppo ooo opo oop
</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Consider this:</p>
<pre><code>&gt;&gt;&gt; x = 'abc'
&gt;&gt;&gt; v = itertools.combinations_with_replacement(x, len(x))
&gt;&gt;&gt; ans = [''.join(map(str, x)) for x in v]
&gt;&gt;&gt; ans
['aaa', 'aab', 'aac', 'abb', 'abc', 'acc', 'bbb', 'bbc', 'bcc', 'ccc']
</code></pre>
<p>The <em>values</em> in the sequence are irrelevant to what <code>combinations_with_replacement</code> does; only the positions within the sequence count.  Your question is the same as asking why <code>'bab'</code> and <code>'cac</code>' don't show up in my example.  Hint:  the name of the function isn't <code>permutations_with_replacement</code> ;-)</p>
</div>
<div class="post-text" itemprop="text">
<p>It is documented correctly <a href="https://docs.python.org/2/library/itertools.html#itertools.combinations_with_replacement" rel="nofollow">here</a> -</p>
<blockquote>
<p><strong>itertools.combinations_with_replacement(iterable, r)</strong></p>
<p>Return r length subsequences of elements from the input iterable allowing individual elements to be repeated more than once.</p>
<p>Combinations are emitted in lexicographic sort order. So, if the input iterable is sorted, the combination tuples will be produced in sorted order.</p>
<p><strong>Elements are treated as unique based on their position, not on their value</strong>. So if the input elements are unique, the generated combinations will also be unique.</p>
</blockquote>
<p>Emphasis mine.</p>
</div>
<span class="comment-copy">Pretty much the explanation I was getting to, except faster and better :).</span>
<span class="comment-copy">From <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement" rel="nofollow noreferrer">the documentation</a>: "Elements are treated as unique based on their position, not on their value. So if the input elements are unique, the generated combinations will also be unique."</span>
