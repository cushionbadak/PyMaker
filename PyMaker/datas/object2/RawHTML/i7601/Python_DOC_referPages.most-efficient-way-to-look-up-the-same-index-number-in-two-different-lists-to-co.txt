<div class="post-text" itemprop="text">
<p>I have the following code and it is the <strong>login feature</strong> that I need help with. I have two <strong>lists</strong> - <em>usernames and passwords</em>. The login feature asks the user to enter a username and password. If the entered username is in the usernames list AND corresponds to the same index number in the passwords list, THEN, return "Access granted", else "Denied".</p>
<p>I'd be interested in two things for teaching purposes:
a) a simple fix to the problem using the two lists as specified.
b) suggestions as to the best way to solve this problem. (e.g. dictionaries, 2darrays, or anything else).</p>
<p>The issue is needing to iterate through both lists simulatenously and look up the same corresponding index number.</p>
<p><strong>Example:</strong></p>
<p><em>username1 and pass1  = access granted</em>
<strong>but</strong>
<em>username1 and pass2 =access denied</em></p>
<p><strong>CODE:</strong></p>
<pre><code>usernames=["user1","user2","user3"]
passwords=["pass1","pass2","pass3"]

def main():
   mainmenu()


def mainmenu():
   print("****MAIN MENU****")
   print("=======Press L to login :")
   print("=======Press R to register :")
   choice1=input()
   if choice1=="L" or choice1=="l":
      login()
   elif choice1=="R" or choice1=="r":
      register()
   else:
      print("please make a valid selection")

def login():
   print("*****LOGIN SCREEN******")
   username=input("Username: ")
   password=input("Password: ")
   if username in usernames and password in passwords:
      print("yes")
   else:
      print("denied")


def register():
   print("*****REGISTRATION****")
   username=input("Enter a username:")
   password=input("Enter a password:")
   usernames.append(username)
   passwords.append(password)
   answer=input("Do you want to make another registration?")
   if answer=="y":
      register()
   else:
      registration_details()

def registration_details():
   print(usernames)
   print(passwords)

main()
</code></pre>
<p>Note: I am aware that storing the lists in a 2d array would be an obvious solution/suggestion, but this fix is necessary for pedagogical reasons - i.e students have not yet covered arrays at all. Looking at simple solutions first, but also stackoverflow users would benefit from suggestions to alternate/more efficient methods to solve this problem as well. </p>
<p>UPDATE:</p>
<p>As someone has commented below ...I thought I'd clarify. I'm aware that what is needed is to get at the index numbers of the said values in the lists. My question is - what is the best solution, or some of the solutions. Enumerate. zip. simply using a for loop? It is quite difficult to know how to start in python as there is not just one way ...any comments as to which would be the most idiomatic (pythonic) would also be useful.</p>
<p><strong>BEST ANSWER:</strong></p>
<p>This is possibly the best answer, presented below by Damian Lattenero 
The indentation, a common error, below is off. Is it possible to also just make a quick comment on why? How to fix it? </p>
<pre><code>def login():
   print("*****LOGIN SCREEN******")
   username=input("Username: ")
   password=input("Password: ")
   for ind, user in enumerate(usernames):
     if username == user and passwords[ind] == password:
       print("correct login")
     else:
       print("invalid username or password")
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>*****LOGIN SCREEN******
Username: user3
Password: pass3
invalid username or password
invalid username or password
correct login
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suggest to use dictionary in this case, look I'll show you how:</p>
<pre><code>users_pass = {"user1" : "pass1", "user2":"pass2", "user3":"pass3"}

def login():
   print("*****LOGIN SCREEN******")
   username=input("Username: ")
   password=input("Password: ")
   if username not in users_pass:
      print("The user doesnt exist")
   elif users_pass[username] == password:
      print("password ok")


def register():
   print("*****REGISTRATION****")
   username=input("Enter a username:")
   password=input("Enter a password:")
   users_pass[username] = password
   answer=input("Do you want to make another registration?")
   if answer=="y":
      register()
   else:
      registration_details()
</code></pre>
<p>if you only want to use lists:</p>
<pre><code>usernames=["user1","user2","user3"]
passwords=["pass1","pass2","pass3"]

def login():
  print("*****LOGIN SCREEN******")
  username=input("Username: ")
  password=input("Password: ")
  for index_of_current_user, current_user in enumerate(usernames): #enumerate allows to you to go throw the list and gives to you the current element, and the index of the current element
    if username == current_user and passwords[index_of_current_user] == password: #since the two list are linked, you can use the index of the user to get the password in the passwords list
      print("correct login")
    else:
      print("invalid username or password")

def register():
  print("*****REGISTRATION****")
  username=input("Enter a username:")
  password=input("Enter a password:")
  users_pass[username] = password
  answer=input("Do you want to make another registration?")
  if answer=="y":
    register()
  else:
    registration_details()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to teach python foundations...</p>
<pre><code>zip(usernames, passwords)
</code></pre>
<p>leads to</p>
<pre><code>dict(zip(usernames, passwords))
</code></pre>
<p>but you could also do...</p>
<pre><code>for (idx, username) in enumerate(usernames):
   valid_password = passwords[idx]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An easy fix to your code, but not recommended, is by using <code>zip()</code>.</p>
<p>You need to replace this if statement: </p>
<pre><code>if username in usernames and password in passwords:
    print("yes")
else:
    print("denied")
</code></pre>
<p>by:</p>
<pre><code>if (username, password) in zip(usernames, passwords):
    print("yes")
else:
    print("denied")
</code></pre>
<p>However, you can use a <code>dict</code> where you store your unique usernames ans password and then check if the username is in this current dict then check if the password is correct or not.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here are a couple more methods, neither of which I'd particularly recommend, but most other decent ways have been covered in previous answers.</p>
<p>These methods might be better for teaching some general programming basics, but not necessarily for teaching Python...</p>
<pre><code># Both methods assume usernames are unique

usernames=["user1","user2","user3"]
passwords=["pass1","pass2","pass3"]

username = "user2"
password = "pass2"


# Method 1, with try-catch

try:
  idx = usernames.index(username)
except ValueError:
  idx = None

if idx is not None and password == passwords[idx]:
  print "yes1"
else:
  print "denied1"


# Method 2, no try-catch

idx = None
if username in usernames:
  idx = usernames.index(username)

  if password != passwords[idx]:
    idx = None

if idx is not None:
  print "yes2"
else:
  print "denied2"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a great scenario for the <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> and <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> functions. If I read your question correctly, you want to</p>
<ul>
<li>Iterate across both usernames and passwords simultaneously (zip)</li>
<li>Keep track of index (enumerate)</li>
</ul>
<p>Given your two lists (usernames and passwords), you will want to do the following</p>
<pre class="lang-python prettyprint-override"><code>for i, (username, password) in enumerate(zip(usernames, passwords)):
    print(i, username, password)
</code></pre>
<p>Here's a description on what's going on.</p>
<p>1) The <code>zip</code> function is taking your <code>usernames</code> and <code>passwords</code> lists and creates a new list (an iterable zip object to be precise) where each username and password is appropriately paired.</p>
<pre><code>&gt;&gt;&gt; zip(usernames, passwords)
&lt;zip object at 0x_________&gt; # hmm, cant see the contents

&gt;&gt;&gt; list(zip(usernames, passwords))
[("user1", "pass1"), ("user2", "pass2"), ("user3","pass3")]
</code></pre>
<p>2) The <code>enumerate</code> function is taking a list, and creating a new list (actually an iterable enumerate object) where each item is now paired with an index.</p>
<pre><code>&gt;&gt;&gt; enumerate(usernames)
&lt;enumerate object 0x_________&gt; # Lets make this printable

&gt;&gt;&gt; list(enumerate(usernames))
[(0, "user1"), (1, "user2"), (2, "user3")]
</code></pre>
<p>3) When we combine these, we get the following.</p>
<pre><code>&gt;&gt;&gt; list(enumerate(zip(usernames, passwords))
[(0, ("user1", "pass1")), (1, ("user2", "pass2")), (2, ("user3", "pass3"))]
</code></pre>
<p>This gives us a list where each element is of the form <code>(index, (username, password))</code>. Which is super easy to use with a loop! </p>
<p>4) Setup your loop with the above! </p>
<pre><code>for i, (username, password) in enumerate(zip(usernames, passwords)):
    # Freely use i, username and password! 
</code></pre>
</div>
<span class="comment-copy">you could do a dictionary where the key, value is username, password, other wise inside of <code>if username in usernames and password in passwords:</code> you need to get the index of password and username and compare them</span>
<span class="comment-copy">Thank you - yes, dictionaries and, as mentioned above in my edit, 2d ararys, are obvious suggestions, but at the moment students have only covered lists, so need to work with a solution for that first. Alternate solutions also welcome to supplement answer....Thank you for your suggestion, but I need a solution (written) as to the best way to code getting the index of password and username. That's what I'm after...</span>
<span class="comment-copy">Hi miss, I am not sure if I understand you... What kind of indentation problem?</span>
<span class="comment-copy">ah - if you look in my edit (at the end), the code there is your solution, but the indentation issue remains. It produces multiple "invalid entry" before "correct login" statements - I'm assuming because of the indentation. Are you able to shed some light on why it's wrong. If you try it with user3 and pass3, you'll note the error</span>
<span class="comment-copy">could you populate the users_pass={} with some data so we can see what goes in and what would come out ....</span>
<span class="comment-copy">@MissComputing sure I will in a minute, editing now</span>
<span class="comment-copy">Thank you, and could you also, in your second answer (lists) explain what "ind" is .... perhaps with a comment on that particular line. Thank you so much! I'm assuming index, but if you could comment it with a clear explanation that would help students perusing this!</span>
<span class="comment-copy">I would like to select your second answer as an answer, but the indentation appears wrong. On selecting user2 and pass2 it prints an output that repeats the invalid username and "correct login" when found - so not in quite the right place: OUTPUT: Username: user2 Password: pass2 invalid username or password correct login invalid username or password invalid username or password invalid username or password</span>
<span class="comment-copy">@MissComputing I added now the comments, and ups, it seems to be like you say, I will correct the indentation, thanks</span>
<span class="comment-copy">can you explain idx please ...not familiar with that</span>
<span class="comment-copy">It's a variable name.</span>
<span class="comment-copy">Enumerate creates a list of 2-tuples, the first value in each is the index into the array, and the second is the value in the array. <code>for (idx, username) in enumerate(usernames)</code> then sets <code>idx</code> to the index of each element, and <code>username</code> to the value of each, simultaneously.</span>
<span class="comment-copy"><code>enumerate</code> is a python builtin. it returns an object that can be used to iterate an iterable alongside the index of each iteration.</span>
<span class="comment-copy">Amendment to my above comment: "Enumerate creates a generator..." not "a list".</span>
<span class="comment-copy">I'm going to have a look at this in a minute. Why, though, do you say zip is not recommended? That's important for me to know ...! Regarding the dictionary - could you post the solution. (although as mentioned, students have not come to dictionaries yet, so for my purposes this isn't quite fit for purpose -it may help others on stackoverflow though!)</span>
<span class="comment-copy">@MissComputing Because within <code>zip()</code> you need to iterate all over the pairs of <code>usernames and passwords</code> also be aware that zip() need that the two lists have the same length if not you'll have a bad results. Within a dictionary you have to look if the key exists or not then check if the value is equal to your input or not. it's more efficient within a dict.</span>
<span class="comment-copy">So zip is only a bad idea if the lists in question are HUGE. For relatively small lists which are definitely of the same size, zip would be recommended? Surely there's a reason for zip - I wonder what it's best use is..</span>
<span class="comment-copy">@MissComputing, no <code>zip()</code> isn't a bad idea. Actually zip is a generator which returns tuples. And the operator <code>in</code> will chech if the tuple <code>(username, password) </code> is in the tuples generated by zip or not. But in your current case i recommend you using a dict and access your data by it's keys and values.</span>
<span class="comment-copy">This is very helpful thank you!</span>
