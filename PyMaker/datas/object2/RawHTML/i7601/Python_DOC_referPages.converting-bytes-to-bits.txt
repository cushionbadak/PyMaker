<div class="post-text" itemprop="text">
<p>I am using Python 3.6 and I need to convert an integer to a list of individual bits. For example, if I have:</p>
<pre><code>def bitstring_to_bytes(s):
    return int(s, 8).to_bytes(8, byteorder='big')

command_binary = format(1, '08b')
bin_to_byte = bitstring_to_bytes(command_binary)
</code></pre>
<p>This currently outputs <code>b'\x00\x00\x00\x00\x00\x00\x00\x01'</code>.</p>
<p>But I need to have in a list of integers (but in a hex type format) like so <code>[0x00, 0x00 ... 0x01]</code> in order to pass it to another function. I am stuck at this part.</p>
</div>
<div class="post-text" itemprop="text">
<p>What about a simple list-comprehension with cast into <code>bytes</code>type?</p>
<pre><code>bin_to_byte = b'\x00\x00\x00\x00\x00\x00\x00\x01'
list_of_bytes = [bytes([i]) for i in bin_to_byte]
print(list_of_bytes)
# [b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x00', b'\x01']
</code></pre>
<p>It does almost the same as <code>list(bin_to_byte)</code> expect it will forces to keep <code>bytes</code> rather than <code>int</code>. If you do need a list of <code>int</code>, then yes, <code>list(bin_to_byte)</code> is enough.</p>
<p>As you can see, each items of the list are not <code>int</code> nor <code>str</code> but <code>bytes</code>:</p>
<pre><code>&gt;&gt;&gt; isinstance(list_of_bytes[0], str)
False
&gt;&gt;&gt; isinstance(list_of_bytes[0], int)
False
&gt;&gt;&gt; isinstance(list_of_bytes[0], bytes)
True
</code></pre>
<p>Because the problem while using <a href="https://docs.python.org/3/library/functions.html#hex" rel="nofollow noreferrer"><code>hex</code></a> is that it will transfrom your items to string even if they have the hexadecimal form e.g</p>
<pre><code>bin_to_byte = b'\x00\x00\x00\x00\x00\x00\x00\x01'
list_of_hex = list(map(hex, (bin_to_byte)))
print(list_of_hex)
# ['0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x1']
print(isinstance(list_of_hex[0], str))
# True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One liner:</p>
<pre><code>list(map(lambda b: bin(int(b)), list(str(bin( &lt;your integer&gt; ))[2:])))
</code></pre>
<p>OR</p>
<pre><code>list(map(lambda b: hex(int(b)), list(str(bin( &lt;your integer&gt; ))[2:])))
</code></pre>
<p>It's ugly, but I'm pretty sure it does exactly what you need it to.</p>
</div>
<span class="comment-copy"><code>list(bin_to_byte)</code> would give you a list of integers, is that what you want? You won't see <code>[0x00, ...]</code> because that's not how integers are represented in output, although that's a valid literal form.</span>
<span class="comment-copy">You can try <code>map(int, bin(str(num))[2:])</code>.</span>
<span class="comment-copy">@jonrsharpe it needs to be in that form since I am going to be sending data over an SPI connection</span>
<span class="comment-copy">This appears to be close, sans formatting <code>list(map(hex, tuple(s)))</code> --&gt; <code>['0x0', '0x0', ..., '0x1']</code></span>
<span class="comment-copy">@dbosk you need to <i>properly specify</i> what you want. As is, the example output you provided is <i>exactly equivalent</i> to the results of <code>list(b'\x00\x00\x00\x00\x00\x00\x00\x01')</code>. So if that <i>isn't</i> what you want, then you need to tell us exactly what that is.</span>
<span class="comment-copy">The OP has a list of <code>int</code>s as their desired output. These methods provide lists of <code>str</code>. I think the OP is vague about their requirements though.</span>
<span class="comment-copy">it sorta works, it gives me a list of strings. Is there any way to make it maintain a hex format? I'll edit the question</span>
<span class="comment-copy">Not sure, I'd have to really sit down and test stuff out. I know when you use hex or binary in python i.e. 0x1 or 0b1, it reads it as an int. But if you lose the hex formatting.   so if you do [0x1, 0xff, 0x3], python takes it in as [1, 255, 3]</span>
