<div class="post-text" itemprop="text">
<p><strong>Goals:</strong>
I want to add the activate/deactivate feature in my yapsy module based application and what is the right way to implement it.</p>
<p><strong>Description</strong>
I have a python application that fetches the users from different apis like Jira, Slack and many more. I have made it work as a pluginable using yapsy module.</p>
<p><strong>How have I implemented for now ?</strong></p>
<p>For now I have added the <strong>Activate/Deactivate</strong> Feature using the config file. In the config file as you can see an option called status. Reading the config if it is enable than call the run() functions else not.</p>
<pre><code>[plugin_1]
user = tara
host = SERVERNAME
filepath = /etc/passwd 
status = enable
</code></pre>
<p><strong>This is how The plugin runs</strong></p>
<pre><code>  savesessionname(cons.MAIN_CONFIG_PATH, session_name)
  simplePluginManager = PluginManager()
  simplePluginManager.setPluginPlaces(["plugins/"])
  simplePluginManager.collectPlugins()
  for plugininfo in simplePluginManager.getAllPlugins():
      plugininfo.plugin_object.run()
</code></pre>
<p>Inside all the plugins there are <strong>run()</strong> which get calls and the plugin runs. The plugin checks the plugin is active or not from from the config.</p>
<blockquote>
<p>What is the way to employ ACTIVATE/DEACTIVATE feature from the yapsy
  plugin itself ,rather than the way I have implemented reading the
  config and deciding to run the function or not</p>
</blockquote>
<p><strong>Some description:</strong>
<em>simplePluginManager.collectPlugins() is used to collect all the plugins we have is there any way to collect the plugins that are only activated . I have gone through the yapsy documentation but could not find the right way or not clear from the documentation</em></p>
<p>With few research I found <strong>ConfigurablePluginManager</strong> can be used for this purpose but could not find some good example to start. At least an example would be great for me to start</p>
</div>
<div class="post-text" itemprop="text">
<p>tldr: <code>getAllPlugins</code> method return <code>PlugInfo</code> object which have <code>_PluInfo_details</code> attribute which is <code>configparser.Configparser</code> object (<a href="https://docs.python.org/3/library/configparser.html#configparser.ConfigParser" rel="nofollow noreferrer">doc</a>). All info from yapsy info file can be accesed there.</p>
<p>first here is the folder structure</p>
<pre><code>script.py
plugins
|- plugin1.yapsy-plugin
|- plugin1.py
</code></pre>
<p>plugin info file:</p>
<pre><code>[Core]
Name = Plugin 1
Module = plugin1

[plugin_1]
user = tara
host = SERVERNAME
filepath = /etc/passwd
status = enable
</code></pre>
<p>here is example from this answer <a href="https://stackoverflow.com/a/5344300/1766261">https://stackoverflow.com/a/5344300/1766261</a> modified for this question (see class method name):</p>
<pre><code>from yapsy.IPlugin import IPlugin

class PluginOne(IPlugin):
    def run(self):  # this part is change from original code
        print("This is plugin 1")
</code></pre>
<p>here is content of <code>script.py</code> to run the plugin based on value of <code>status</code> on file info</p>
<pre><code>from yapsy.PluginManager import PluginManager

# savesessionname(cons.MAIN_CONFIG_PATH, session_name)
simplePluginManager = PluginManager()
simplePluginManager.setPluginPlaces(["plugins"])
simplePluginManager.collectPlugins()
for plugininfo in simplePluginManager.getAllPlugins():
    if plugininfo._PluginInfo__details['plugin_1']['status'] == 'enabled':
        plugininfo.plugin_object.run()
</code></pre>
<p>when everything is correct, it will print <code>This is plugin 1</code></p>
<p>Note:</p>
<ul>
<li>ensure yapsy file info have correct extension. the default is <code>yapsy-plugin</code></li>
<li>ensure info file contain <code>core</code> section which contain <code>Name</code> and <code>Module</code>. Value on <code>Module</code> have to match the module's name of your plugin</li>
<li>for easier debugging your plugin, enable logging, i.e. put following line <code>import logging logging.basicConfig(level=logging.DEBUG)</code> </li>
</ul>
</div>
