<div class="post-text" itemprop="text">
<p>I have a string like following:</p>
<pre><code>"sring = [[61252,'1','1','30000','2617','2677','15000','1'],[61252,'2','2','72590','2615','2678','15000','1'],[61252,'3','1','9354','2608','2690','709','1']]"
</code></pre>
<p>I want to convert it to a regular list like :</p>
<pre><code>list = [[61252,'1','1','30000','2617','2677','15000','1'],[61252,'2','2','72590','2615','2678','15000','1'],[61252,'3','1','9354','2608','2690','709','1']]
</code></pre>
<p>and then I can parse it or do whatever can done with lists.
I tried to split the string but it doesn't work becuase the result was a string.</p>
<p>I even try to convert it using <code>exec</code> function:</p>
<pre><code>exec('func = lambda : {}; func()').string
</code></pre>
<p>but it doesn't return anything.
Is there any (clean) way to convert this kind of string to appropriate list?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">literal_eval</a> after splitting the string around the <code>=</code>. Please pay close attention to the extra space trailing the <code>=</code>, as it is necessary to ensure that the <code>literal_eval</code> can properly <em>process</em> the string structure passed. Otherwise you will be faced with an exception of <code>IndentationError: unexpected indent</code></p>
<p>Solution:</p>
<pre><code>from ast import literal_eval

s = "sring = [[61252,'1','1','30000','2617','2677','15000','1'],[61252,'2','2','72590','2615','2678','15000','1'],[61252,'3','1','9354','2608','2690','709','1']]"

res = literal_eval(s.split('= ')[1])
print(res)
print(type(res))
</code></pre>
<p>Output:</p>
<pre><code>[[61252, '1', '1', '30000', '2617', '2677', '15000', '1'], [61252, '2', '2', '72590', '2615', '2678', '15000', '1'], [61252, '3', '1', '9354', '2608', '2690', '709', '1']]
&lt;class 'list'&gt;
</code></pre>
<p>Extra Note: I noticed you assigned your list in your example to a variable named <em>list</em>. Please be aware that <em>list</em> is a builtin name in Python and using that as a variable name will shadow the built-in and could lead to problems in your code. </p>
</div>
<div class="post-text" itemprop="text">
<p>well in your case you can just slice string like list! cause ultimately it is list of characters.</p>
<pre><code>x="sring = [[61252,'1','1','30000','2617','2677','15000','1'],[61252,'2','2','72590','2615','2678','15000','1'],[61252,'3','1','9354','2608','2690','709','1']]"

x=x[x.index('['):x[::-1].index(']')*-1])) # if any trailing chars in staring 
</code></pre>
<blockquote>
<p><strong>in your case you can just use</strong> x=x[x.index('['):] </p>
<p>This will slice your string and then you can just use list_x = eval(x) to get actual list</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Just <code>exec</code> the string</p>
<pre><code>exec("sring = [[61252,'1','1','30000','2617','2677','15000','1'],[61252,'2','2','72590','2615','2678','15000','1'],[61252,'3','1','9354','2608','2690','709','1']]")
</code></pre>
</div>
<span class="comment-copy">Thanks for your (fast and good) answer and your note, I know <code>list</code> is a built-in name in python I just wanted to declare that the first one is a string and the second one has a list type. and one more thing can you explain breifly what is ast and what is literal_eval?</span>
<span class="comment-copy">@Mehdi You're welcome. Per the documentation, the <code>ast</code> module, standing for <i>abstract syntax tree</i>, which you can read about <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer">here</a> is pretty well explained in the documentation. Ultimately, an AST is a general computer science concept, which you can also read about <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" rel="nofollow noreferrer">here</a>. For <code>literal_eval</code>, I have a link in the answer that explains exactly how it works. Here it is again: <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">docs.python.org/3/library/ast.html#ast.literal_eval</a></span>
