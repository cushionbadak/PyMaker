<div class="post-text" itemprop="text">
<p>Basically I have a function that will very simply encrypt a message. </p>
<pre><code>def encrypt(message):
    alphabet = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
    key = ["4","x","z","@","%","b","j","q","(","ƒ","¥","µ","˚","nå","ø","π","å","œ","¢","∞","∫","µ","≈","`","¬","…"]
    new_message = ""
    for x in range(0,len(message)):
        new_message = message.replace(message[x],key.index[alphabet.index(message[x])])
    return new_message

print(encrypt(input("What would you like to encrypt").lower()))
</code></pre>
<p>This should take the letter and replace it with the character with the same index in list key, however I get the error:</p>
<pre><code>TypeError: 'builtin_function_or_method' object is not subscriptable
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Finally a use case for <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate</code></a>!</p>
<pre><code>def encrypt(message):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    key = '4xz@%bjq(ƒ¥µ˚nåøπåœ¢∞∫µ≈`¬'
    table = str.maketrans(alphabet, key)

    return message.translate(table)

print(encrypt('asdsaewqeq')) # 4œ@œ4%µπ%π
</code></pre>
<p>Note that one of your entries in <code>key</code> is composed of two characters. If this is intentional and you want to replace a single character with two, then you can create your translation table manually.</p>
<pre><code>table = dict(zip(map(ord, alphabet), key))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>key.index()</code> takes a value and returns its index and it use <code>()</code> not <code>[]</code> so you need to fix this line:</p>
<pre><code>new_message = message.replace(message[x],key.index[alphabet.index(message[x])])
</code></pre>
<p>to:</p>
<pre><code>new_message = message.replace(message[x],key[alphabet.index(message[x])])
</code></pre>
<p>This will take the letter index and use it to access <code>key</code> list and get the value at that index to replace it with the original letter.</p>
<p><strong>EDIT:</strong>
A better way to do this is to use a <code>dictionary</code> and construct a new string isntead, to avoid double <code>replace()</code> on the <code>string</code></p>
<pre><code>dic = {'a': '4', 'b': 'x', 'c': 'z' ...}
new_message = ''
for x in message:
    new_message += dic[x]
return new_message
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suggest to use an intermediate <code>dict</code> for creating the mapping of <code>alphabet</code> list item  with <code>key</code> list item: </p>
<pre><code>&gt;&gt;&gt; alphabet = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
&gt;&gt;&gt; key = ["4","x","z","@","%","b","j","q","(","ƒ","¥","µ","˚","nå","ø","π","å","œ","¢","∞","∫","µ","≈","`","¬","…"]

# Your `dict` object with the mapping between both the list
&gt;&gt;&gt; encryption_dict = dict(zip(alphabet, key))
</code></pre>
<p>Then use the above dictionary with the <code>str.join(...)</code> to transform your string. For example:</p>
<pre><code>&gt;&gt;&gt; my_str = 'stackoverflow'

#  Transform the string using the `dict` and join the chars to form single string           
&gt;&gt;&gt; new_str = ''.join(encryption_dict.get(s, s) for s in my_str)
#                                            ^
#        to return same character if not present in alphabet list

&gt;&gt;&gt; print(new_str)
¢∞4z¥øµ%œbµø≈
</code></pre>
</div>
<span class="comment-copy">There are better ways of doing this, but your issue is with <code>key.index[alphabet.index(message[x])]</code>. Use <code>key[alphabet.index(message[x])]</code> instead.</span>
<span class="comment-copy">@JaredGoguen I don't think that's going to work, some of the keys are contained in the alphabet. This is a use-case for <code>str.translate</code>.</span>
<span class="comment-copy">@juanpa.arrivillaga Hahah, agreed... didn't see this message until after I posted my answer.</span>
<span class="comment-copy">@Sumtinlazy Have you read the <code>str.translate</code> docs that are linked?</span>
<span class="comment-copy">Didn't see, my bad.</span>
<span class="comment-copy">This will not work without using an intermediate dummy value because some of the keys are in alphabet.</span>
<span class="comment-copy">@juanpa.arrivillaga I think you meant that some of the characters are <i>not</i> present in <code>alphabet</code> list? I updated the answer to handle it via using <code>dict.get(..)</code></span>
<span class="comment-copy">This works great, however I'm wondering how exactly this is different than what I was trying before</span>
