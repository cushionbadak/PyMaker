<div class="post-text" itemprop="text">
<p>I'm trying to grab the first value in a multiple lists inside a list and store how many times it repeats if it's more than once into a dictionary/hash.</p>
<pre><code>coordinates = [
        ['bg1955', '47.6740° N', '122.1215° W'],
        ['bg1955', '47.6101° N', '122.2015° W'],
        ['bg1955', '47.6062° N', '122.3321° W'],
        ['sj1955', '37.3318° N', '122.0312° W']
    ]
</code></pre>
<p>When I try the following:</p>
<pre><code>my_dict = {row[0]:coordinates.count(row[0]) for row in coordinates}
</code></pre>
<p>The value of <code>my_dict</code> becomes:</p>
<pre><code>{'sj1955': 0, 'bg1955': 0}
</code></pre>
<p>instead of:</p>
<pre><code>{'bg1955': 3}
</code></pre>
<p>How would I obtain the above in python3? The original data sample would have over 20,000 lists inside one list instead of only the 4 listed above.</p>
<p>EDIT:
When I mention <code>certain</code>, i mean the particular place in each row which would be row[0], not just returning only 1 result in a dictionary. if there were multiple different values that repeated, it would lead to this, as I'm looking to store any repeated value, lets say if sw1950 was in 20 lists and jb1994 was in 393 lists it would be:</p>
<pre><code>{'bg1955': 3, 'sw1950': 20, 'jb1994': 393}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason your existing approach doesn't work is because you're trying to do this:</p>
<pre><code>&gt;&gt;&gt; x = [[1, 1, 1]]
&gt;&gt;&gt; x.count(1)
</code></pre>
<p>Now, you think this will return <code>3</code> because 1 is present 3 times. However, this is what it returns:</p>
<pre><code>0
</code></pre>
<p>The reason is because those elements are in a nested list, and <code>.count()</code> does not count nested elements.</p>
<p>Contrast the above with this:</p>
<pre><code>&gt;&gt;&gt; x = [1, 1, 1]
&gt;&gt;&gt; x.count(1)
3
</code></pre>
<p>This makes sense, because those <code>1</code>s aren't in a nested list.</p>
<p>One workaround is to use the <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>:</p>
<pre><code>from collections import Counter

coordinates = [
        ['bg1955', '47.6740° N', '122.1215° W'],
        ['bg1955', '47.6101° N', '122.2015° W'],
        ['bg1955', '47.6062° N', '122.3321° W'],
        ['sj1955', '37.3318° N', '122.0312° W']
    ]

count = Counter()

for coord in coordinates:
    count[coord[0]] += 1

print(count)
</code></pre>
<p>Output:</p>
<pre><code>Counter({'bg1955': 3, 'sj1955': 1})
</code></pre>
<p>Now, you're free to poll this dict for counts of whichever item you like. If you want to extract duplicates, you can do this:</p>
<pre><code>print({ k : count[k] for k in count if count[k] &gt; 1})
</code></pre>
<p>This prints <code>{'bg1955': 3}</code>.  </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use defaultdict:</p>
<pre><code>from collections import defaultdict

d = defaultdict(int)

coordinates = [
    ['bg1955', '47.6740° N', '122.1215° W'],
    ['bg1955', '47.6101° N', '122.2015° W'],
    ['bg1955', '47.6062° N', '122.3321° W'],
    ['sj1955', '37.3318° N', '122.0312° W']
]

for i in coordinates:
    d[i[0]] += 1

print dict(d)
</code></pre>
<p>Output:</p>
<pre><code>{'sj1955': 1, 'bg1955': 3}
</code></pre>
<p>using Counter:</p>
<pre><code>new_vals = map(list, zip(*coordinates))

print Counter(new_vals[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter(c[0] for c in coordinates)
Counter({'bg1955': 3, 'sj1955': 1})
&gt;&gt;&gt; dict(Counter(c[0] for c in coordinates))  # If you want dictionary, not Counter
{'bg1955': 3, 'sj1955': 1}
</code></pre>
<p>If you want to get duplicated key count only, filter them after creating Counter.</p>
<pre><code>&gt;&gt;&gt; counts = Counter(c[0] for c in coordinates)
&gt;&gt;&gt; {key: value for key, value in counts.items() if value &gt; 1}
{'bg1955': 3}
</code></pre>
</div>
<span class="comment-copy">Do you want <code>{'bg1955': 3, 'sj1955': 1}</code>?</span>
<span class="comment-copy">@falsetru Just <code>{'bg1955': 3}</code> as I would have over 20,000 lists in the list. I would only want the count duplicates stored in the dictionary if greater than 1</span>
<span class="comment-copy">@DanielPlasRivera I've edited my answer to include how to do that. Please take a look and let me know if it helps.</span>
<span class="comment-copy">lol. I was just about to paste this exact one with <code>Counter</code>. +1</span>
<span class="comment-copy">@idjaw I can appreciate that you chose to upvote someone else's answer rather than post the same thing with no added value. Tipping my hat to you.</span>
