<div class="post-text" itemprop="text">
<p>Problem statement: </p>
<blockquote>
<p>Given two list A of strings and B of regex's(they are string too).<br/>
  For every regex in list B, find all the matching strings in list A.<br/>
  Length of list A &lt;= 10^6 (N)<br/>
  Length of string B &lt;= 100 (M)<br/>
  Length of strings, regex &lt;= 30 (K)<br/>
  Assume regex matching and string comparisons take O(K) time and regex can contain any python regex supported operations.<br/></p>
</blockquote>
<p>My algorithm:</p>
<pre><code>for regex in B:
    for s in A:
        if regex.match(s):
            mapping[regex].add(s)
</code></pre>
<p>This takes <code>O(N*M*K)</code> time.<br/>
Is there any way to make it more time efficient even compromising space (using any data structure)?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is about as fast as it can go, in terms of time complexity.</p>
<p>Every regex <em>has</em> to be matched with every string at least once. Otherwise, you won't be able to get the information of "match" or "no match".</p>
<p>In terms of absolute time, you can use a <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a> to avoid the slow Python loops:</p>
<pre><code>mapping = {regex: filter(re.compile(regex).match, A) for regex in B}
</code></pre>
</div>
