<div class="post-text" itemprop="text">
<p><strong>Example Input:  [5, 9, 2, 4, 1, 3]</strong></p>
<p><strong>Expected Output: [9, 2, 1]</strong></p>
<p>Function is returning each item as a list instead of a single list with the same items as below.</p>
<p>[9]</p>
<p>[2]</p>
<p>[1]</p>
<pre><code>def divide_digits(a):
    """
    This is where the function's Document string (docstring) goes.
    """
    # make a shallow copy of the int_list and assign it to variable lst_copy
    lst_copy = a[:]
    # sort lst.copy
    lst_copy.sort()
    # as long as the lst_copy is not empty:
    while lst_copy:
        # get/pop the element from the beginning and at the end of the new_list
        largest_num = lst_copy.pop()
        smallest_num = lst_copy.pop(0)

        new_list = []
        # perform the division of two these elements
        result = largest_num / smallest_num
        # round down the result to the nearest integer
        # append the result of the division operation to the new list
        new_list.append(round(result))

        # return the new_list
        return new_list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is <code>new_list = []</code>. You are re-initializing the list in every iteration. And you have to de-indent the <code>return</code>.</p>
<pre><code>def divide_digits(a):
    lst_copy = a[:]
    lst_copy.sort()
    new_list = []  # &lt;-- this has to go here
    while lst_copy:
        largest_num = lst_copy.pop()
        smallest_num = lst_copy.pop(0)
        result = largest_num / smallest_num
        new_list.append(round(result))  # &lt;-- on every iteration you append to the new_list
    return new_list  # &lt;-- when you are done looping, return the new_list
</code></pre>
<p>A shorter alternative to your code that utilizes a list-comprehension would be this:</p>
<pre><code>def divide_digits(a):
    lst_copy = sorted(a)  #&lt;-- `sorted()`, unlike `.sort()` creates a new list
    return [round(lst_copy.pop() / lst_copy.pop(0)) for _ in a[::2]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your indentation is wrong. Your return statement is inside the while-loop. It should be outside of it and that means you need to define new_list outside of the loop, too. Try the following:</p>
<pre><code>def divide_digits(a):
    """
    This is where the function's Document string (docstring) goes.
    """
    # make a shallow copy of the int_list and assign it to variable lst_copy
    lst_copy = a[:]
    # sort lst.copy
    lst_copy.sort()
    new_list = []
    # as long as the lst_copy is not empty:
    while lst_copy:
        # get/pop the element from the beginning and at the end of the new_list
        largest_num = lst_copy.pop()
        smallest_num = lst_copy.pop(0)

        # perform the division of two these elements
        result = largest_num / smallest_num
        # round down the result to the nearest integer
        # append the result of the division operation to the new list
        new_list.append(round(result))

        # return the new_list
    return new_list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can achieve the same result with the following concise solution using a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer"><code>list comprehension</code></a>:</p>
<pre><code>my_list = [5, 9, 2, 4, 1, 3]
sorted_list = sorted(my_list)  # sorted doesn't sort in place, it returns a new sorted list
new_list = [round(sorted_list[-(i+1)] / sorted_list[i]) for i in range(len(sorted_list) // 2)]
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt;&gt;&gt; new_list
[9, 2, 1]
</code></pre>
</div>
<span class="comment-copy">Your <code>return</code> is inside the loop ??</span>
<span class="comment-copy">Your indentation looks weird. Why are you returning inside the while-loop? And shouldn't new_list be defined outside the while-loop to contain all the elements?</span>
<span class="comment-copy">how could you say "Your indentation is wrong", syntactically its correct @Secespitus</span>
<span class="comment-copy">@Sanket It's syntactically correct, but it will not do what the OP is trying to achieve.</span>
<span class="comment-copy">yes, but it was logical error, not the indentation @Secespitus</span>
