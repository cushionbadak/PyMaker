<div class="post-text" itemprop="text">
<p>Let's say I have the following extremely large string using Python3.x, several GB in size and +10 billion characters in length:</p>
<pre><code>string1 = "XYZYXZZXYZZXYZYXYXZYXZYXZYZYZXY.....YY"
</code></pre>
<p>Given its length, this already takes +GB to load into RAM. </p>
<p>I would like to write a function that will replace every <code>X</code> with <code>A</code>,  <code>Y</code> with <code>B</code>, and <code>Z</code> with <code>C</code>. My goal is to make this as quick as possible. Naturally, this should be efficient as well (e.g. there may be some RAM trade-offs I'm not sure about). </p>
<p>The most obvious solution for me is to use the <code>string</code> module and <code>string.replace()</code>:</p>
<pre><code>import string
def replace_characters(input_string):
    new_string = input_string.replace("X", "A").replace("Y", "B").replace("Z", "C")
    return new_string

foo = replace_characters(string1)
print(foo)
</code></pre>
<p>which outputs</p>
<pre><code>'ABCBACCABCCABCBABACBACBACBCBCAB...BB'
</code></pre>
<p>I worry this is not the most efficient approach, as I'm simultaneously calling three functions at once on such a large data structure. </p>
<p>What is the most efficient solution for a string this large?</p>
</div>
<div class="post-text" itemprop="text">
<p>A more memory efficient method, that will not generate so many temporary strings along the way, would be to use <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate</code></a>.</p>
<pre><code>&gt;&gt;&gt; string1 = "XYZYXZZXYZZXYZYXYXZYXZYXZYZYZXY"
&gt;&gt;&gt; string1.translate({ord("X"): "A", ord("Y"): "B", ord("Z"): "C"})
'ABCBACCABCCABCBABACBACBACBCBCAB'
</code></pre>
<p>This will allocate just one (extra large in your case) string.</p>
</div>
<span class="comment-copy">What is the performance the way you do it now?  Do you have reason to believe that it is unsatisfactory in some way?</span>
<span class="comment-copy">@wallyk It's clunky. I think <code>.replace()</code> is first passing through the entire string. So, this function is actually three function calls with at least three temporary strings held in memory. It's not terribly efficient.</span>
<span class="comment-copy">Oh, didn't know about this one.</span>
<span class="comment-copy">@Coldspeed Should be a <i>lot</i> faster than a regex I'd expect!</span>
<span class="comment-copy">Whoah! Excellent solution</span>
