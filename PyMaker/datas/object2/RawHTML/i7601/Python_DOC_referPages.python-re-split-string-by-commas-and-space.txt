<div class="post-text" itemprop="text">
<p>I need to split a string by commas and spaces. An example of the desired behavior is converting the string <code>'    5,    3,   , hello'</code> to the list <code>['5', '3', 'hello']</code>. Here's what I tried:</p>
<pre><code>import re
re.split(',|\s+', '    5,    3,   , hello')
['', '5', '', '3', '', '', '', 'hello']
</code></pre>
<p>Why are the blank entries being returned? How can I retrieve the list  <code>['5', '3', 'hello']</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>findall</code> and match what you want:</p>
<pre><code>&gt;&gt;&gt; print re.findall(r'[^,\s]+', '    5,    3,   , hello')
['5', '3', 'hello']
</code></pre>
<p><code>[^,\s]+</code> is using a negated character class to match any text that is not a comma and not a whitespace.</p>
<hr/>
<p>Your split regex <code>,|\s+</code> is splitting at multiple positions since <code>,</code> is surrounded by whitespaces as well.</p>
<p>As your input has leading whitespaces even splitting on <code>[,\s]+</code> will give an empty element at the start.</p>
<pre><code>&gt;&gt;&gt; print re.split(r'[,\s]+', '    5,    3,   , hello')
['', '5', '3', 'hello']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just for fun, to show a non-regex approach, you can perform this within a comprehension by splitting on <code>,</code>, and ignoring any string that passes the <a href="https://docs.python.org/3/library/stdtypes.html#str.isspace" rel="nofollow noreferrer">isspace</a> check and finally calling <code>strip</code> on the final data placed in the list to remove surrounding whitespace.</p>
<p>Taking this in to account, the final solution would look like:</p>
<pre><code>&gt;&gt;&gt; s = '    5,    3,   , hello'
&gt;&gt;&gt; res = [c.strip() for c in s.split(',') if not c.isspace()]
&gt;&gt;&gt; res
['5', '3', 'hello']
</code></pre>
<p>Performing a timeit analysis on the two solutions, we can observe the following:</p>
<pre><code>&gt;&gt;&gt; print(timeit('''
... s = '    5,    3,   , hello'
... res = [c.strip() for c in s.split(',') if not c.isspace()]
... '''))
1.681301467004232
&gt;&gt;&gt;
&gt;&gt;&gt; print(timeit('''
... import re
... re.findall(r'[^,\s]+', '    5,    3,   , hello')
... '''))
2.7143720029853284
</code></pre>
<p>I'm a bit surprised with how big of a difference it is in favour of this non-regex comprehension approach. </p>
</div>
<span class="comment-copy">Maybe <a href="http://ideone.com/7kDmJS" rel="nofollow noreferrer"><code>re.split('[\s,]+', s.strip())</code></a> =&gt; <code>['5', '3', 'hello']</code>?</span>
<span class="comment-copy">@WiktorStribi≈ºew Closer, that returns <code>['', '5', '3', 'hello']</code></span>
<span class="comment-copy">May be you can strip all your strings once you split the main string by commas ?</span>
<span class="comment-copy">Actually, he also wants to get rid of empty strings after that. Something like <code>[x for x in re.split(',?\s+', s) if x]</code>.</span>
<span class="comment-copy">Thanks. Can you explain the findall regex expression please?</span>
<span class="comment-copy">Sure. <code>[^,\s]+</code> is using a negated character class to match any text that is not a comma and not a whitespace.</span>
