<div class="post-text" itemprop="text">
<p>In  an optimization problem,if function <code>zero(x ,y)</code> in  the  code given below is objective function  with initial values of <code>x,y</code> as <code>0,0</code>.Then, to solve the problem i need to compute the obj. function as well as its derivitive. So, when i am doing so,i am getting <code>ZeroDivisionError: division by zero</code>.</p>
<pre><code>[x,y] = [0,0]
def zero(x ,y):
    return 3 + x/y + 2*xy + 1/x
</code></pre>
<p>Output is:</p>
<pre class="lang-none prettyprint-override"><code> Traceback (most recent call last):
  File "&lt;ipython-input-5-4e3e5e87c5f1&gt;", line 1, in &lt;module&gt;
    runfile('C:/Users/HP/Documents/Python Scripts/Python Scripts_majrpjct/working/practice_cvxopt.py', wdir='C:/Users/HP/Documents/Python Scripts/Python Scripts_majrpjct/working')
  File "C:\ProgramData\Anaconda2\lib\site-packages\spyder\utils\site\sitecustomize.py", line 866, in runfile
    execfile(filename, namespace)
  File "C:\ProgramData\Anaconda2\lib\site-packages\spyder\utils\site\sitecustomize.py", line 87, in execfile
    exec(compile(scripttext, filename, 'exec'), glob, loc)
  File "C:/Users/HP/Documents/Python Scripts/Python Scripts_majrpjct/working/practice_cvxopt.py", line 394, in &lt;module&gt;
    print   zero(x,y)
  File "C:/Users/HP/Documents/Python Scripts/Python Scripts_majrpjct/working/practice_cvxopt.py", line 392, in zero
    return 3 + x/y
ZeroDivisionError: division by zero
</code></pre>
<p>Can anyone suggest me a solution so as to get correct answer by ignoring <code>ZeroDivisionError</code> values.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what try blocks are for!  If you don't want to sanitize your inputs and are coding for a situation where a division by zero IS zero (the other option is infinity which makes for some much more interesting math), then a simple try block is the way to go.  If you need precision, sanitize your inputs (make sure y isn't zero before sending it to the function).</p>
<p>Code:</p>
<pre><code>def zero(x ,y):
    try:
        return 3 + x/y
    except ZeroDivisionError:
        return 3
        #  or do whatever else you want to do when y is zero. 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this:</p>
<pre><code>def zero(x, y):
    if abs(x) &lt; 1e-10 and abs(y) &lt; 1e-10:
        return 3.0
    elif abs(y) &lt; 1e-10:
        return 0.0
    else:
        return 3 + x/y
</code></pre>
</div>
<span class="comment-copy">Ok, so what <i>should</i> the correct answer be? What would you prefer <code>zero(0,0)</code> to return?</span>
<span class="comment-copy">0/0 is not equal to 0.  It is undefined.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/compound_stmts.html#try" rel="nofollow noreferrer"><code>try/except</code></a>?</span>
<span class="comment-copy">"if we consider P = ( 3+ x/y) , if (x,y) = (0,0), then the value of P = 3" - you need to get your math straight first, because 3+0/0 is not 3. The division operation is not defined for second argument 0.</span>
<span class="comment-copy">Even if you want to set 0/0=0, what about 1/0?</span>
<span class="comment-copy">But the thing is,i need this part of code to be used in my optimization problem where the calculations are more complex involving  variouscomponents  and calculated through iterations.</span>
<span class="comment-copy">Then you have to make the <code>if</code>, <code>elif</code>, <code>else</code> tests more complex, and you have to specify the result for each limiting case. If <code>x</code> and <code>y</code> are for example arrays, then you could use</span>
<span class="comment-copy">... <code>y=np.array(y)</code> and test if there are zeros in <code>y</code> by <code>np.any(abs(y) &lt; 1e-10)</code>, Where <code>np</code> refers to <code>numpy</code> imported as <code>np</code>.</span>
