<div class="post-text" itemprop="text">
<p>I would like to place operators as a list and then call an element from the list to use as an operator. </p>
<p>If I don't place quotations around the operators, then I get a syntax error for the commas inside of the list:</p>
<pre><code>  File "p22.py", line 24
    cat = [+,-,*]
            ^
SyntaxError: invalid syntax
</code></pre>
<p>If I do place the quotations around, then I seem to lost the operator's function, as seen in this instance:</p>
<pre><code>  File "p22.py", line 30
    a = (x which y)
               ^
SyntaxError: invalid syntax
</code></pre>
<p>Here is the full code:</p>
<pre><code>import random

def start():
    print('\n________________________________________')
    print('|                                      |')
    print('|         Zach\'s Tutorifier!          |')
    print('|                                      |')
    print('|                                      |')
    print('|     Instructions:                    |')
    print('| Select the type of math you want     |')
    print('| to practice with:                    |')
    print('| 1-Add 2-Subtract 3-Multiply          |')
    print('|--------------------------------------|')
start()
math = int(input('&gt; ')) - 1
cat = ['+','-','*']

def problems():
    which = cat[math]
    x = random.randint(0,9)
    y = random.randint(0,9)
    a = (x which y)
    print('What is %i %s %i?' % (x, which, y) )
    answer = input('&gt; ')
    if answer == a:
        print('Congratulations! Try again? (Y/N)')
        again = input('&gt; ')
        if again == 'Y' or again == 'y':
            problems()
        else:
            start()
    else: 
        print('Try again!')
problems()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In order to properly <em>translate</em> a string representation of a math <a href="https://docs.python.org/3/library/operator.html" rel="noreferrer">operator</a>, you can actually use the builtin <em>operator</em> module to do this for you. Simply, map your string operators to the method call, and work accordingly. Here is an example that you should be able to figure out how to make apply to your code: </p>
<pre><code>from operator import add, sub, mul

operations = {'+': add, '-': sub, '*': mul}

op = input("enter +, - or *")
num1 = int(input("enter a number"))
num2 = int(input("enter another number"))

expected_result = int(input("what do you think the answer should be"))

result = operations[op](num1, num2)

if expected_result == result:
    print('you are right')
else:
    print('no, you are wrong')
</code></pre>
<p>To provide an extra bit of information on this line: </p>
<pre><code>operations[op](num1, num2)
</code></pre>
<p><code>operations</code> is a dictionary, and we are accessing the value using the <code>[]</code> on the dictionary, by passing the inputted <code>op</code> as the key to that dictionary. With this, you now have the method in hand, and simply need to <em>call</em> it by passing the parameters (<code>num1</code>, <code>num2</code>).  </p>
</div>
<div class="post-text" itemprop="text">
<p>Altough <code>eval</code> can be used, what they say is right: never use it unless it is strictally neccesary and you have no other options and you have maximum security. Well, just don't use it, there are ways to do this things, although they require a little more code.</p>
<p>My proposition is mapping the operators:</p>
<pre><code>import random

# NEW CODE
def sum(a, b):
    return a + b;

def substract(a, b):
    return a - b;

def multiply(a, b):
    return a * b;
# END OF NEW CODE

def start():
    print('\n________________________________________')
    print('|                                      |')
    print('|         Zach\'s Tutorifier!          |')
    print('|                                      |')
    print('|                                      |')
    print('|     Instructions:                    |')
    print('| Select the type of math you want     |')
    print('| to practice with:                    |')
    print('| 1-Add 2-Subtract 3-Multiply          |')
    print('|--------------------------------------|')
start()
math = int(input('&gt; ')) - 1
cat = {
    "+": sum,
    "-": substract,
    "*": multiply
}

def problems():
    # NEW CODE
    operator_char= cat.keys()[math]
    operation = cat[math]
    # END OF NEW CODE
    x = random.randint(0,9)
    y = random.randint(0,9)
    print('What is %i %s %i?' % (x, operator_char, y) )
    answer = input('&gt; ')
    # NEW CODE
    if answer == operation(x, y):
    # END OF NEW CODE
        print('Congratulations! Try again? (Y/N)')
        again = input('&gt; ')
        if again == 'Y' or again == 'y':
            problems()
        else:
            start()
    else: 
        print('Try again!')
problems()
</code></pre>
</div>
<span class="comment-copy"><code>from operator import add, sub, mul</code></span>
<span class="comment-copy">please consider changing the accepted answer :(</span>
<span class="comment-copy">rather <code>operations[op](num1, num2)</code> to get an useful error</span>
<span class="comment-copy">@AnttiHaapala good point. Updated the answer accordingly.</span>
