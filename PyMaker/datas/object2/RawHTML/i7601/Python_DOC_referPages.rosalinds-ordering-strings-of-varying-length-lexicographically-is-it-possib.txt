<div class="post-text" itemprop="text">
<p>I tried to solve another of Rosalind(<a href="http://rosalind.info/problems/lexv/" rel="nofollow noreferrer">http://rosalind.info/problems/lexv/</a>) problems by myself, however unfortunately I have to ask you for help.</p>
<p>Here is <strong>my approach</strong>:</p>
<p>First of all; function which creates all possible substrings of input string with length of n:</p>
<pre><code>def get_substrings(input_string, l):
res_list = []
sub = []
for i in range(len(input_string)):
    if l+i &lt;= len(input_string):
        for j in range(i,l+i):
            sub.append(input_string[j])
    sub = ''.join(sub)
    res_list.append(sub)
    sub = []
res_list = filter(None, res_list)
return res_list
</code></pre>
<p>Then main function which creates all combinations of current string with varying length:</p>
<pre><code>from itertools import product
def lexv():
dna = str(raw_input())
n = int(raw_input())
subs = get_substrings(dna, n)
result = []
for i in range(len(subs)):
    for j in range(1,n+1):
        result = result + list(product(dna, repeat=j))
for i in range(len(result)):
     result[i]  = "".join(result[i])
     print result[i]
</code></pre>
<p>The result of my code for data from Rosalind's 'Sample input' is:</p>
<pre><code>D
N
A
DD
DN
DA
ND
NN
NA
AD
AN
AA
DDD
DDN
DDA
DND
DNN
DNA
DAD
DAN
DAA
NDD
NDN
NDA
NND
NNN
NNA
NAD
NAN
NAA
ADD
ADN
ADA
AND
ANN
ANA
AAD
AAN
AAA
</code></pre>
<p><strong>My questions:</strong></p>
<p>a) Is it possible to order my result as it should be (Rosalind's result)?</p>
<p>b) Is my approach correct? If not, could you give me some clue (<strong>but not the solution</strong> for this problem - I'd like to beat it by myself).</p>
<p><strong>Very thanks!</strong></p>
</div>
<div class="post-text" itemprop="text">
<h1>Generating possible substrings</h1>
<p>For the generation of possible substrings, I would look deeper into the <code>itertools</code> module. With <code>chain</code> and <code>product</code> you can easily make a one-lines that returns all combinations</p>
<h1>Sorting</h1>
<p>for the sorting, I would replace the letters themselves with <code>int</code>s, keeping this translation table in a <code>dict</code>. <code>enumerate</code> and <code>str.split</code> are your friends here.</p>
<p>Now you have a list of tuples of ints, which you can sort. From what I can tell, the standard sorting order of tuples is useful.</p>
<p>When you have a sorted list of tuples, you will just need to do the backwards translation to strings</p>
<h2>sorted(key=)</h2>
<p>Another option is to use standard string sorting, and as <code>key=</code> argument to <code>sorted</code>, passing a function (or lambda) which replaces each letter in the string to it's place in the alphabet (the <code>input_string</code>)</p>
<p>This can be done with <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate</code></a>, <code>enumerate</code> and a <code>dict</code> comprehension</p>
</div>
<span class="comment-copy">If you want a peak at my solutions, you can check <a href="https://github.com/vadella/StackOverflow-questions/blob/master/Rosalind%20lexical%20sorting.ipynb" rel="nofollow noreferrer">github</a></span>
<span class="comment-copy">Thanks for your effort (github solutions) and clues, now it looks clear for me.</span>
