<div class="post-text" itemprop="text">
<ol>
<li><p>When starting the interactive Python interpreter with default
settings, is there any module implicitly imported/loaded into the
interpreter, without explicitly running <code>import &lt;modulename&gt;</code>?</p>
<p>I thought that modules like <code>sys</code> or <code>builtins</code> would be, but when I
type their module names, </p>
<pre><code>&gt;&gt;&gt; sys
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'sys' is not defined

&gt;&gt;&gt; builtins
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'builtins' is not defined
</code></pre>
<p>So is it correct that by default, there is no module imported/loaded implicitly?</p></li>
<li><p>When executing a python script, is there any module implicitly
imported/loaded into the script, without explicitly specifying
<code>import &lt;modulename&gt;</code> in the script?</p></li>
</ol>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>One module that is usually imported automatically is site.py. And it imports a lot of other modules. But even if you prevent it from importing using option <code>-S</code> Python still imports many modules. Try the following script:</p>
<pre><code>#! /usr/bin/python2.7 -ESs

import sys
print(sys.modules)
</code></pre>
<p>and see how many modules are there. Change shebang to</p>
<pre><code>#! /usr/bin/python3 -EISs
</code></pre>
<p>and say "Wow!" :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>Only __builtins__:</p>
<pre><code>#! /usr/bin/python2.7 -ESs
print(dir())
</code></pre>
<p>=&gt; ['__builtins__', '__doc__', '__file__', '__name__', '__package__']</p>
</div>
<span class="comment-copy">There may be, but <b>not in the global namespace</b>. Try <code>python -v</code>. Again, these modules are imported, and won't have to be "reloaded" when you actually write <code>import &lt;module&gt;</code>, but they won't be in the global namespace.</span>
<span class="comment-copy">see <code>globals()</code> you'll find <code>__builtins__</code> and <code>__loader__</code>  which is <a href="https://docs.python.org/3/library/importlib.html#importlib.machinery.BuiltinImporter" rel="nofollow noreferrer"><code>&lt;class '_frozen_importlib.BuiltinImporter&gt;</code></a>. Both are loaded by default.</span>
<span class="comment-copy">@ChihebNexus Thanks. In python3, if module <code>builtins</code> is implicitly loaded by default, why isn't the name <code>builtins</code>  available  (see the output in my post)?</span>
<span class="comment-copy">@Tim Well, it's a little bit tricky. I really think it's a shadow import. Actually <code>__builtins__</code> is imported by default not <code>builtins</code>. However if you look at <code>globals()</code> you'll see that <code>__builtins__</code> is imported by default. And <code>__builtins__.__dict__</code> will throw the same results as <code>builtins.__dict__</code> after importing <code>import builtins</code>. So, i think, correct me if i'm wrong, it's a shadow import in a default behaviour of the interpreter.</span>
<span class="comment-copy">Thanks. Is <code>sys</code> itself loaded by default? I guess the way in your post can;t show that.</span>
<span class="comment-copy">All modules listed in <code>sys.modules</code> are loaded but they aren't in module <code>builtins</code>, hence they aren't automatically available in the current namespace. You still have to import them.</span>
<span class="comment-copy">Thanks. What modules are automatically available in the current namespace, i.e. without me importing them?</span>
