<div class="post-text" itemprop="text">
<p>lis = [ [12,34,56],[45,78,334],[56,90,78],[12,34,56] ]</p>
<p>I want the result to be 2 since number of duplicate lists are 2 in total. How do I do that?</p>
<p>I have done something like this</p>
<pre><code>count=0
for i in range(0, len(lis)-1):
    for j in range(i+1, len(lis)):
        if lis[i] == lis[j]:
            count+=1
</code></pre>
<p>But the count value is 1 as it returns matched lists. How do I get the total number of duplicate lists?</p>
</div>
<div class="post-text" itemprop="text">
<h2>Solution</h2>
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> if your sub-lists only contain numbers and therefore are hashable:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; lis = [[12, 34, 56], [45, 78, 334], [56, 90, 78], [12, 34, 56]]
&gt;&gt;&gt; sum(y for y in Counter(tuple(x) for x in lis).values() if y &gt; 1)
2
&gt;&gt;&gt; lis = [[12, 34, 56], [45, 78, 334], [56, 90, 78], [12, 34, 56], [56, 90, 78], [12, 34, 56]]
&gt;&gt;&gt; sum(y for y in Counter(tuple(x) for x in lis).values() if y &gt; 1)
5
</code></pre>
<h2>In Steps</h2>
<p>Convert your sub-list into tuples:</p>
<pre><code>tuple(x) for x in lis
</code></pre>
<p>Count them:</p>
<pre><code>&gt;&gt;&gt; Counter(tuple(x) for x in lis)
Counter({(12, 34, 56): 3, (45, 78, 334): 1, (56, 90, 78): 2})
</code></pre>
<p>take only the values:</p>
<pre><code>&gt;&gt;&gt; Counter(tuple(x) for x in lis).values()
dict_values([3, 1, 2])
</code></pre>
<p>Finally, sum only the ones that have a count greater than 1:</p>
<pre><code>&gt; sum(y for y in Counter(tuple(x) for x in lis).values() if y &gt; 1)
5
</code></pre>
<h2>Make it Re-usable</h2>
<p>Put it into a function, add a docstring, and a doc test:</p>
<pre><code>"""Count duplicates of sub-lists.
"""


from collections import Counter


def count_duplicates(lis):
    """Count duplicates of sub-lists.

    Assumption: Sub-list contain only hashable elements.
    Result: If a sub-list appreas twice the result is 2.
    If a sub-list aprears three time and a other twice the result is 5.

    &gt;&gt;&gt; count_duplicates([[12, 34, 56], [45, 78, 334], [56, 90, 78],
    ...                   [12, 34, 56]])
    2
    &gt;&gt;&gt; count_duplicates([[12, 34, 56], [45, 78, 334], [56, 90, 78],
    ...                   [12, 34, 56], [56, 90, 78], [12, 34, 56]])
    ...
    5
    """
    # Make it a bit more verbose than necessary for readability and
    # educational purposes.
    tuples = (tuple(elem) for elem in lis)
    counts = Counter(tuples).values()
    return sum(elem for elem in counts if elem &gt; 1)


if __name__ == '__main__':

    import doctest

    doctest.testmod(verbose=True)
</code></pre>
<p>Run the test:</p>
<pre><code>python count_dupes.py 
Trying:
    count_duplicates([[12, 34, 56], [45, 78, 334], [56, 90, 78],
                      [12, 34, 56]])
Expecting:
    2
ok
Trying:
    count_duplicates([[12, 34, 56], [45, 78, 334], [56, 90, 78],
                      [12, 34, 56], [56, 90, 78], [12, 34, 56]])
Expecting:
    5
ok
1 items had no tests:
    __main__
1 items passed all tests:
   2 tests in __main__.count_duplicates
2 tests in 2 items.
2 passed and 0 failed.
Test passed.
</code></pre>
</div>
<span class="comment-copy">according to your logic, what should be the total for this list <code>[ [12,34,56],[45,78,334],[56,90,78],[12,34,56], [56,90,78],[12,34,56] ]</code>?</span>
<span class="comment-copy">@RomanPerekhrest The total count should be 5 in your problem.</span>
<span class="comment-copy">Make another list with a length of lis of boolean values set to false.  Mark both indexes as true when you find a match, count the number of trues at the end.  Bonus is you can use these values to skip ones that are already marked true.</span>
<span class="comment-copy">You can also use a defaultdict(int) to the same effect.</span>
<span class="comment-copy">@Mike MÃ¼ller Thanks!</span>
