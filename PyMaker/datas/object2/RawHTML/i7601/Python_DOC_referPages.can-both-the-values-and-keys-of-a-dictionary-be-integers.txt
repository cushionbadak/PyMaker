<div class="post-text" itemprop="text">
<p>Can both the values and keys of a dictionary be integers in python? Or do I need one of them to be like a string or something?</p>
</div>
<div class="post-text" itemprop="text">
<p>Sure! From the python docs:</p>
<blockquote>
<p>5.5. Dictionaries</p>
<p>Another useful data type built into Python is the dictionary (see Mapping Types — dict). Dictionaries are sometimes found in other languages as “associative memories” or “associative arrays”. Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, <strong>which can be any immutable type; strings and numbers can always be keys</strong>. Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key. You can’t use lists as keys, since lists can be modified in place using index assignments, slice assignments, or methods like append() and extend().</p>
</blockquote>
<p>You can also try it out super quickly: </p>
<pre><code>&gt;&gt;&gt; dict = {1:0, 2:1}
&gt;&gt;&gt; dict[1]
0
&gt;&gt;&gt; dict[2]
1
</code></pre>
<p>I like one of the examples on the page as it uses a dictionary comprehension (new in 2.7+) in a way that works like a function:</p>
<pre><code>&gt;&gt;&gt; {x: x**2 for x in (2, 4, 6)}
{2: 4, 4: 16, 6: 36}
</code></pre>
<p>Since it works for <em>any immutable type</em> you can even use floats for keys:</p>
<pre><code>&gt;&gt;&gt; {x: x**2 for x in (1, 1.5, 2)}
{1: 1, 1.5: 2.25, 2: 4}
</code></pre>
<p>And again, another common immutable type in python are tuples, <code>(..., ..., ...)</code> which you can also use for keys:</p>
<pre><code>&gt;&gt;&gt; {(x,y): (x**2,y**2) for x in range(3) for y in range(2)}
{(0, 0): (0, 0), 
(0, 1): (0, 1), 
(1, 0): (1, 0), 
(1, 1): (1, 1), 
(2, 0): (4, 0), 
(2, 1): (4, 1)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Of course.
Just take a very simple example:
in python interpreter, input:</p>
<pre><code>a = {1:2}  # define an dict
a[1] # get the value whose key is 1
</code></pre>
<p>then you will get out put 2.</p>
</div>
<div class="post-text" itemprop="text">
<p><strike>The key is always a string.  It can be a number, but it is always a string.</strike></p>
<p>Yes.</p>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html#dictionaries</a></p>
<blockquote>
<p>"...can be any immutable type; strings and numbers can always be
  keys..."</p>
</blockquote>
</div>
<span class="comment-copy">Hi, I just want to know which type of key do you prefer? Integer or string? Thx~</span>
<span class="comment-copy">Both are completely fine and I use both depending on the circumstance. If I'm taking input from some string field (say a query string in a URL, or user input, or something from a text file), it usually makes sense to just stick with strings. But as shown in the above examples, dicts work great as a pseudo-function, in which case it may make a lot of sense to keep them as integers. I also use tuples as keys sometimes, as I work with images/matrices often so I may want a point/coordinate as the key and use a tuple there. There's uses for any key type, just use what works best for your problem.</span>
<span class="comment-copy">Thanks for all the details! Recently, I just ran into a case that the keys are <code>integer</code>s, but I wonder whether should keep it or change to <code>string</code>. I appreciate your answer and help me get through this mess!</span>
<span class="comment-copy">Literally from the link you posted: "Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type; strings and numbers can always be keys."</span>
<span class="comment-copy">@viraptor Right.  Thanks.  I'd just skimmed to confirm my assumption.  This is news to me.  I feel so much pressure when I try to answer a question; like I'm not typing fast enough and that doesn't allow for thorough research.  I guess this isn't the right job for me.</span>
<span class="comment-copy">@veganaiZe You're right, quick answers are the game, and sometimes you miss. But when you do, you often want to cut your loses and delete the post. ;)</span>
<span class="comment-copy">@ParticlePaul Thanks for the advice.  I'll leave my blunders for posterity to learn from my mistakes. But judging by the "disabled grey" color of this posting I think I'll be the only one learning anything from this. =]</span>
<span class="comment-copy">@veganaiZe I learned something!</span>
