<div class="post-text" itemprop="text">
<p>I need to represent a string as a number, however it is 8928313 characters long, note this string can contain more than just alphabet letters, and I have to be able to convert it back efficiently too. My current (too slow) code looks like this:</p>
<pre><code>alpha = 'abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ,.?!@()+-=[]/*1234567890^*{}\'"$\\&amp;#;|%&lt;&gt;:`~_'
alphaLeng = len(alpha)
def letterNumber(letters):
    letters = str(letters)
    cof = 1
    nr = 0
    for i in range(len(letters)):
        nr += cof*alpha.find(letters[i])
        cof *= alphaLeng
        print(i,'        ',len(letters))
    return str(nr)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ok, since other people are giving awful answers, I'm going to step in.</p>
<ol>
<li>You shouldn't do this.</li>
<li>You shouldn't do this.</li>
<li>An integer and an array of characters are ultimately the same thing: bytes. You can access the values in the same way.</li>
<li>Most number representations cap out at 8 bytes (64-bits). You're looking at 8 MB, or 1 million times the largest integer representation. You shouldn't do this. Really.</li>
<li>You shouldn't do this. Your number will just be a custom, gigantic number type that would be identical under the hood.</li>
<li>If you <strong>really</strong> want to do this, despite all the reasons above, here's how...</li>
</ol>
<p><strong>Code</strong></p>
<pre><code>def lshift(a, b):
    # bitwise left shift 8
    return (a &lt;&lt; (8 * b))

def string_to_int(data):
    sum_ = 0
    r = range(len(data)-1, -1, -1)
    for a, b in zip(bytearray(data), r):
        sum_ += lshift(a, b)
    return sum_;
</code></pre>
<p><strong>DONT DO THIS</strong></p>
<p><strong>Explanation</strong></p>
<p>Characters are essentially bytes: they can be encoded in different ways, but ultimately you can treat them within a given encoding as a sequence of bytes. In order to convert them to a number, we can shift them left 8-bits for their position in the sequence, creating a unique number. <code>r</code>, the range value, is the position in reverse order: the 4th element needs to go left 24 bytes (3*8), etc.</p>
<p>After getting the range and converting our data to 8-bit integers, we can then transform the data and take the sum, giving us our unique identifier. It will be identical byte-wise (or in reverse byte-order) of the original number, but just "as a number". This is entirely futile. Don't do it.</p>
<p><strong>Performance</strong></p>
<p>Any performance is going to be outweighed by the fact that you're creating an identical object for no valid reason, but this solution is decently performant.</p>
<p>1,000 elements takes ~486 microseconds, 10,000 elements takes ~20.5 ms, while 100,000 elements takes about 1.5 seconds. It would work, but you shouldn't do it. This means it's scaled as O(n**2), which is likely due to memory overhead of reallocating the data each time the integer size gets larger. This might take ~4 hours to process all 8e6 elements (14365 seconds, calculated fitting the lower-order data to <code>ax**2+bx+c</code>). Remember, this is all to get the identical byte representation as the original data.</p>
<p><strong>Futility</strong></p>
<p>Remember, there are ~1e78 to 1e82 atoms in the entire universe, on current estimates. This is ~2^275. Your value will be able to represent 2^71426504, or about 260,000 times as many bits as you need to represent every atom in the universe. You don't need such a number. You <strong>never</strong> will.</p>
</div>
<div class="post-text" itemprop="text">
<p>If there are only ANSII characters. You can use <code>ord()</code> and <code>chr()</code>.</p>
<p><a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">built-in functions</a></p>
</div>
<div class="post-text" itemprop="text">
<p>There are several optimizations you can perform. For example, the <code>find</code> method requires searching through your string for the corresponding letter. A dictionary would be faster. Even faster might be (benchmark!) the <code>chr</code> function (if you're not too picky about the letter ordering) and the <code>ord</code> function to reverse the <code>chr</code>. But if you're not picky about ordering, it might be better if you just left-NULL-padded your string and treated it as a big binary number in memory if you don't need to display the value in any particular format.</p>
<p>You might get some speedup by iterating over characters instead of character indices. If you're using Python 2, a large <code>range</code> will be slow since a list needs to be generated (use <code>xrange</code> instead for Python 2); Python 3 uses a generator, so it's better.</p>
<p>Your <code>print</code> function is going to slow down output a fair bit, especially if you're outputting to a tty.</p>
<p>A big number library may also buy you speed-up: <a href="https://stackoverflow.com/questions/1386604/handling-big-numbers-in-code">Handling big numbers in code</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>alpha.find()</code> function needs to iterate through <code>alpha</code> on each loop.</p>
<p>You can probably speed things up by using a <code>dict</code>, as dictionary lookups are O(1):</p>
<pre><code>alpha = 'abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ,.?!@()+-=[]/*1234567890^*{}\'"$\\&amp;#;|%&lt;&gt;:`~_'

alpha_dict = { letter: index for index, letter in enumerate(alpha)}
print(alpha.find('$'))
# 83
print(alpha_dict['$'])
# 83
</code></pre>
</div>
<span class="comment-copy">Note that this code works fine, just too slow</span>
<span class="comment-copy">I seriously question why you need a number with about 8 MB of precision. Ultimately, a string and a number are both bytes. A string is the data type you want.</span>
<span class="comment-copy">Are you using Python 3 or Python 2? You aren't using <i>both</i> I assume?</span>
<span class="comment-copy">"Characters are essentially 8-bit integers" Mmmm that depends. They could be unicode code points instead. In which case, they are represented by 1-4 bytes.</span>
<span class="comment-copy">@juanpa.arrivillaga Which can be represented by 8-bit integers, using UTF-8. I never specified an encoding. Even a code point encoded as UTF-32 would work identically for this sake. The whole idea of the OP is just awful, regardless.</span>
<span class="comment-copy">Yes, I understand. I just think that comment is a bit vague and misleading. In other words, it is sticking to the Cish "character is a byte" abstraction. I have no doubt you understand these subtleties, but they may not be clear to others reading your answer. Character encodings are just one of those things that people just figure they can get away with not really understanding.</span>
<span class="comment-copy">Fair, @juanpa.arrivillaga, edited.</span>
<span class="comment-copy"><code>ord</code> and <code>chr</code> work for all characters. But aside from that, I believe this is the most reasonable answer.</span>
<span class="comment-copy">For python 3, those functions work for all Unicode characters. But python 2 only support ANSII.</span>
<span class="comment-copy">Nope. They just have to take <code>unicode</code> objects.</span>
<span class="comment-copy">You are right. I'm not that familiar with code support. I just tried <code>ord('x')</code> where x is a Chinese word in python 2 and got an error. But the error is actually from the character literal, which should be <code>ord(u'x')</code>.</span>
<span class="comment-copy">Right, because in Python 2, <code>ord('x')</code> where <code>x</code> is some chines word, will be some multi-byte sequence, so <code>'x'</code> will have length &gt;1. If you pre-pend with <code>u"x"</code>, then <code>u''x"</code> will be a single-element <i>unicode code point sequence</i>, with length 1.</span>
<span class="comment-copy">Thank you, I will try to do the dictionary. The print is just there for debugging purposes, and will be removed shortly.And using Python 3.6, are the any othe optimizations possible?</span>
