<div class="post-text" itemprop="text">
<p>What does "CmdBtn['menu'] = CmdBtn.menu" in second last line mean.</p>
<pre><code>def makeCommandMenu():
    CmdBtn = Menubutton(mBar, text='Button Commands', underline=0)
    CmdBtn.pack(side=LEFT, padx="2m")
    CmdBtn.menu = Menu(CmdBtn)
    ...
    ...
    CmdBtn['menu'] = CmdBtn.menu
    return CmdBtn
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you use <code>x[y] = z</code>, it calls the <code>__setitem__</code> method.</p>
<p>i.e.</p>
<pre><code>x.__setitem__(y, z)
</code></pre>
<p>In your case, <code>CmdBtn['menu'] = CmdBtn.menu</code> means</p>
<pre><code>CmdBtn.__setitem__('menu', CmdBtn.menu)
</code></pre>
<p>The <code>Menubutton</code> class does indeed provide a <a href="http://epydoc.sourceforge.net/stdlib/Tkinter.Misc-class.html#__setitem__" rel="nofollow noreferrer"><code>__setitem__</code> method</a>. It looks like this is used to set a "resource value" (in this case <code>CmdBtn.menu</code>) for the given key (<code>'menu'</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>This is not a "string inside an array". </p>
<p>The brackets operator is used for item access in some kind of sequence (usually a <code>list</code>, or a <code>tuple</code>), mapping (usually a <code>dict</code>, or dictionary), or some other kind of special object (such as this <code>MenuButton</code> object, which is not a sequence or a mapping). Unlike in some other languages, in python, ANY object is allowed to make use of this operator. </p>
<p>A <code>list</code> is similar to an "array" in other languages. It can contain a mixture of objects of any kind, and it maintains the order of the objects. A <code>list</code> object is very useful for when you want to maintain an ordered sequence of objects. You can access an object in a <code>list</code> using its index, like this (indexes start at zero):</p>
<pre><code>x = [1,2,3] # this is a list
assert x[0] == 1 # access the first item in the list
x = list(range(1,4)) # another way to make the same list
</code></pre>
<p>A <code>dict</code> (dictionary) is useful for when you want to associate values with keys so you can look up the values later using the keys. Like this: </p>
<pre><code>d = dict(a=1, b=2, c=3) # this is a dict
assert x['a'] == 1 # access the dict
d = {'a':1, 'b':2, 'c':3} # another way to make the same dict
</code></pre>
<p>Finally, you may also encounter custom made objects that also use the same item-access interface. In the <code>Menubutton</code> case, <code>['menu']</code> simply accesses some item (defined by the tkinter API) that responds to the key, <code>'menu'</code>. You can make your own object type with item-access, too (python 3 code below): </p>
<pre><code>class MyObject:
    def __getitem__(self, x):
        return "Here I am!"
</code></pre>
<p>This object doesn't do much except return the same string for key or index value you give it: </p>
<pre><code>obj = MyObject()
print(obj [100]) # Here I am!
print(obj [101]) # Here I am!
print(obj ['Anything']) # Here I am!
print(obj ['foo bar baz']) # Here I am!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all, in Python <a href="http://www.diveintopython.net/getting_to_know_python/everything_is_an_object.html" rel="nofollow noreferrer">everything is an object</a> and square brackets means that this object is <em>subscriptable</em> (for e.g. <code>tuple</code>, <code>list</code>, <code>dict</code>, <code>string</code> and many more). Subscriptable means that this object at least implements the <code>__getitem__()</code> method  (and <code>__setitem__()</code> in your case).</p>
<p>With those methods it's easy to interact with class members, so don't afraid to build your own example, to understand someone else's code.</p>
<p>Try this snippet:</p>
<pre><code>class FooBar:
    def __init__(self):
        #   just two simple members
        self.foo = 'foo'
        self.bar = 'bar'

    def __getitem__(self, item):
        #   example getitem function
        return self.__dict__[item]

    def __setitem__(self, key, value):
        #   example setitem function
        self.__dict__[key] = value

#   create an instance of FooBar
fb = FooBar()

#   lets print members of instance
#   also try to comment out get and set functions to see the difference
print(fb['foo'], fb['bar'])

#   lets try to change member via __setitem__
fb['foo'] = 'baz'

#   lets print members of instance again to see the difference
print(fb['foo'], fb['bar'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is shorthand for <code>CmdBtn.configure(menu=CmdBtn.menu)</code></p>
<p>The way to set widget options is typically at creation time (eg: <code>Menubutton(..., menu=...)</code>) or using the <code>configure</code> method (eg: <code>CmdBtn.configure(menu=...)</code>. Tkinter provides a third method, which is to treat the widget like a dictionary where the configuration values are keys to the dictionary (eg: <code>CMdBtn['menu']=...</code>)</p>
<p>This is covered in the <a href="https://docs.python.org/3/library/tkinter.html#setting-options" rel="nofollow noreferrer">Setting Options</a> section of the official python tkinter documentation</p>
</div>
<span class="comment-copy">It means <a href="http://epydoc.sourceforge.net/stdlib/Tkinter.Misc-class.html#__setitem__" rel="nofollow noreferrer"><code>CmdButton.__setitem__('menu', CmdBtn.menu)</code></a>, which apparently is setting a resource value for the given key.</span>
<span class="comment-copy">Welcome to stackoverflow. Your question is probably getting massively downvoted for two reasons: 1. it provides no context for your question, and 2. it is asking about a very very basic part of python (the meaning of the brackets <code>[]</code> operator), which means you have either not bothered to read a tutorial OR you are asking what the specific meaning of the <code>'menu'</code> key is for the <code>MenuButton</code> object. If that last is the case, you need to be more explicit in your question (see point #1). If it is the first, again it would help to be more explicit about what exactly what it is you are asking.</span>
