<div class="post-text" itemprop="text">
<p>I've got a folder full of very large files that need to be byte flipped by a power of 4.  So essentially, I need to read the files as a binary, adjust the sequence of bits, and then write a new binary file with the bits adjusted.</p>
<p>In essence, what I'm trying to do is read a hex string <code>hexString</code> that looks like this:
"00112233AABBCCDD"</p>
<p>And write a file that looks like this:
"33221100DDCCBBAA"</p>
<p>(i.e. every two characters is a byte, and I need to flip the bytes by a power of 4)</p>
<p>I am very new to python and coding in general, and the way I am currently accomplishing this task is extremely inefficient.  My code currently looks like this:</p>
<pre><code>import binascii

with open(myFile, 'rb') as f:
        content = f.read()

hexString = str(binascii.hexlify(content))

flippedBytes = ""
inc = 0

while inc &lt; len(hexString):
    flippedBytes += file[inc + 6:inc + 8]
    flippedBytes += file[inc + 4:inc + 6]
    flippedBytes += file[inc + 2:inc + 4]
    flippedBytes += file[inc:inc + 2]
    inc += 8

..... write the flippedBytes to file, etc
</code></pre>
<p>The code I pasted above accurately accomplishes what I need (note, my actual code has a few extra lines of: "hexString.replace()" to remove unnecessary hex characters - but I've left those out to make the above easier to read).  My ultimate problem is that it takes EXTREMELY long to run my code with larger files.  Some of my files I need to flip are almost 2gb in size, and the code was going to take almost half a day to complete one single file.  I've got dozens of files I need to run this on, so that timeframe simply isn't practical.</p>
<p>Is there a more efficient way to flip the HEX values in a file by a power of 4?</p>
<p>.... for what it's worth, there is a tool called WinHEX that can do this manually, and only takes a minute max to flip the whole file.... I was just hoping to automate this with python so we didn't have to manually use WinHEX each time</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to convert your 4-byte integers from little-endian to big-endian, or vice-versa. You can use the <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer"><code>struct</code></a> module for that:</p>
<pre><code>import struct

with open(myfile, 'rb') as infile, open(myoutput, 'wb') as of:
    while True:
        d = infile.read(4)
        if not d:
            break
        le = struct.unpack('&lt;I', d)
        be = struct.pack('&gt;I', *le)
        of.write(be)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a little <a href="https://docs.python.org/3/library/struct.html#module-struct" rel="nofollow noreferrer">struct</a> awesomeness to get you started:</p>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; s = b'\x00\x11\x22\x33\xAA\xBB\xCC\xDD'
&gt;&gt;&gt; a, b = struct.unpack('&lt;II', s)
&gt;&gt;&gt; s = struct.pack('&gt;II', a, b)
&gt;&gt;&gt; ''.join([format(x, '02x') for x in s])
'33221100ddccbbaa'
</code></pre>
<p>To do this at full speed for a large input, use <a href="https://docs.python.org/3/library/struct.html#struct.iter_unpack" rel="nofollow noreferrer"><em>struct.iter_unpack</em></a> </p>
</div>
<span class="comment-copy">So ... you want to change the endianess of 32bit numbers?</span>
<span class="comment-copy">So, you want to convert your binary 4-byte integers from little-endian to big-endian or vice-versa? You should use <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer"><code>struct</code></a>.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/12163549/python-unpack-little-endian">python unpack little endian</a></span>
<span class="comment-copy">Can you explain what the "if not d" is doing within the loup?  I don't see where "d" is defined - so just a little confused on that.  Thanks for the help!</span>
<span class="comment-copy"><b>if not d</b> is True if d is None, ie if there is no more data to be read</span>
<span class="comment-copy">Oh, <code>iter_unpack</code> is cool. I reckon that is faster than manually doing <code>read()</code>s?</span>
<span class="comment-copy">I'm gearing up to test struct.iter_unpack on one of my test files.  Do I still need to <code>with open()</code> in <code>read binary</code> mode before unpacking the bits, or is there a more direct way to unpack directly from the binary values of the file?  Thanks for your help!</span>
<span class="comment-copy">I have tested <code>iter_unpack</code>, but it doesn't work with buffered or unbuffered file-objects. So you would have to either read the file as a whole into a bytes object, or loop manually, like I have shown. Or am I doing something wrong?</span>
