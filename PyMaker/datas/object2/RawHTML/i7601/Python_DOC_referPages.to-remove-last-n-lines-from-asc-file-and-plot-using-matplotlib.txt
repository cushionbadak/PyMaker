<div class="post-text" itemprop="text">
<p>I have a .asc file which looks like this(x and y columns)  </p>
<pre><code>48.069868   11993  
49.111533   11824   
50.153094   11325  
51.194551   11229  
52.235905   11318

Date and Time:                   Wed May 31 14:47:29 2017   
Software Version:              4.20.30007.0       
Temperature (C):              -60
Model:                        DU970_UVB     
</code></pre>
<p>At the end of the file it has some string lines. So i plotting using matplotlib as                        </p>
<pre><code>  import matplotlib.pyplot as plt 

  plt.plotfile('600_1%_532e_Mo F1_80sec.asc', delimiter=' ', cols=(0, 1), 
           names=('col1', 'col2'), )
  plt.show()
</code></pre>
<p>Now if want to remove the last lines I can use lines[:-1], but: </p>
<ol>
<li>Is it possible to remove the last n lines without specifying the numbers. I mean if python can read how many lines has string and it will delete only those lines.   </li>
<li>I don't want to delete these lines permanently. Just for plotting the data points i want to remove them. </li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>If you read the docs carefully you can see that,</p>
<pre><code>matplotlib.pyplot.plotfile(fname, cols=(0, ), 
plotfuncs=None, comments='#', skiprows=0, checkrows=5,   
 delimiter=',',names=None, subplots=True, newfig=True, **kwargs)
</code></pre>
<p>there is a optional parameter called as <strong>comment</strong>. What that means? It means read from the file yet skip those lines which are comments.</p>
<p>Also you stated that,</p>
<blockquote>
<p>I don't want to delete these lines permanently. Just for plotting the data points i want to remove them</p>
</blockquote>
<p>So you don't want to delete them, yet you don't want to use them. So change them to comments!</p>
<p><strong><code>my_file.asc</code>:</strong></p>
<pre><code>48.069868   11993  
49.111533   11824   
50.153094   11325  
51.194551   11229  
52.235905   11318

Date and Time:                   Wed May 31 14:47:29 2017   
Software Version:              4.20.30007.0       
Temperature (C):              -60
Model:                        DU970_UVB
</code></pre>
<p>So logic is leaving out the numbers. Only convert lines that are strings into comments! How to do this use <code>re</code>.</p>
<pre><code>tf = open('my_file.asc','r+')
d = tf.readlines()
tf.seek(0)
for line in d:
    s=re.search(r'[a-zA-Z]',line)
    if s:
        tf.write('#'+line)
    else:
        tf.write(line)
tf.truncate()
tf.close()
</code></pre>
<p>So what I'm doing is searching every line and if that line happens to start with string, then replace that <code>line</code> with <code>'#'+line</code>. (<strong>change it into a comment)</strong>. So after this, this is how your <code>my_file.asc</code> would look,</p>
<pre><code>48.069868   11993  
49.111533   11824   
50.153094   11325  
51.194551   11229  
52.235905   11318

#Date and Time:                   Wed May 31 14:47:29 2017   
#Software Version:              4.20.30007.0       
#Temperature (C):              -60
#Model:                        DU970_UVB
</code></pre>
<p>You got what you wanted after that it's pretty simple. The same as your code. Here is the complete solution working solution</p>
<pre><code>import itertools
import matplotlib.pyplot as plt
import re

tf = open('my_file.asc','r+')
d = tf.readlines()
tf.seek(0)
for line in d:
    s=re.search(r'[a-zA-Z]',line)
    if s:
        tf.write('#'+line)
    else:
        tf.write(line)
tf.truncate()
tf.close()


import matplotlib.pyplot as plt 

plt.plotfile('my_file.asc', delimiter=' ',comments='#', cols=(0, 1), 
           names=('col1', 'col2'), )
plt.show()
</code></pre>
<p>I just added <code>comments='#'</code> and voila! you got what you wanted without deleting those lines.
<a href="https://i.stack.imgur.com/MW4kD.png" rel="nofollow noreferrer"><img alt="Plot_Figure" src="https://i.stack.imgur.com/MW4kD.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know how to do it with <code>plotfile</code> function but as I know <code>plotfile</code> uses function <code>csv2rec</code> (<a href="http://matplotlib.org/api/mlab_api.html#matplotlib.mlab.csv2rec" rel="nofollow noreferrer">docs</a>). In your case you can do the following:</p>
<pre><code>import matplotlib.pyplot as plt
from matplotlib.mlab import csv2rec


def converter(value):
    try:
        return float(value)
    except ValueError:
        pass

if __name__ == "__main__":
    data = csv2rec(
        "'600_1%_532e_Mo F1_80sec.asc'",
        delimiter=" ",
        names=("col1", "col2"),
        converterd={
            "col1": converter,
            "col2": converter,
        }
    )
    data = filter(lambda i: i[0], data)
    plt.plot(*zip(*data))
    plt.show()
</code></pre>
<p>If converter function can't convert value to float it returns <code>None</code>. So <code>data</code> will have <code>None</code> values for all non-convertable items. After that you can filter it.</p>
</div>
<div class="post-text" itemprop="text">
<p>same as <a href="https://matplotlib.org/api/mlab_api.html#matplotlib.mlab.csv2rec" rel="nofollow noreferrer"><code>csv2rec</code></a> (which is the function called under the hood), <code>plotfile</code> seems to accept file handles, in addition to file paths (although not explicitly mentioned <a href="https://matplotlib.org/devdocs/api/_as_gen/matplotlib.pyplot.plotfile.html" rel="nofollow noreferrer">here</a>).</p>
<p>If you can afford storing your file to memory (read: you're not working with gigantic files), you could use <a href="https://docs.python.org/2/library/stringio.html" rel="nofollow noreferrer"><code>StringIO.StringIO</code></a> (Python 2.7) or <a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="nofollow noreferrer"><code>io.StringIO</code></a> (Python 3).</p>
<p><code>StringIO</code> is a file-like object where you can copy the content of your file, while applying additional logic (ie. skip the footer lines). Once produced this new object, you can pass it to <code>plotfile</code>. Here's an example:</p>
<pre><code>import matplotlib.pyplot as plt 
from StringIO import StringIO
# from io import StringIO

footerlines = 5
with open('example.asc', 'r') as fhandle:
    temp = StringIO()
    for line in fhandle.readlines()[:-footerlines]:
        temp.write(line)
# bring the pointer back to the beginning of the file-like object
temp.seek(0)

plt.plotfile(temp, delimiter=' ', cols=(0, 1), names=('col1', 'col2'))
plt.show()
</code></pre>
</div>
<span class="comment-copy">Thanks @s_vishnu that worked for me! But in the end it gives me string lines starting with #. Is it possible to remove them also , i don't require here, but simply asking it would be better if i can do that also.</span>
<span class="comment-copy">After plotting you want to remove the <code>#</code> from the file?</span>
<span class="comment-copy">Select the answer if it worked for you :) click the little tick below downvote.</span>
