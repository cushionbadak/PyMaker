<div class="post-text" itemprop="text">
<p>Is there a reason to prefer using <code>map()</code> over list comprehension or vice versa?  Is either of them generally more efficient or considered generally more pythonic than the other?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>map</code> may be microscopically faster in some cases (when you're NOT making a lambda for the purpose, but using the same function in map and a listcomp). List comprehensions may be faster in other cases and most (not all) pythonistas consider them more direct and clearer.</p>
<p>An example of the tiny speed advantage of map when using exactly the same function:</p>
<pre><code>$ python -mtimeit -s'xs=range(10)' 'map(hex, xs)'
100000 loops, best of 3: 4.86 usec per loop
$ python -mtimeit -s'xs=range(10)' '[hex(x) for x in xs]'
100000 loops, best of 3: 5.58 usec per loop
</code></pre>
<p>An example of how performance comparison gets completely reversed when map needs a lambda:</p>
<pre><code>$ python -mtimeit -s'xs=range(10)' 'map(lambda x: x+2, xs)'
100000 loops, best of 3: 4.24 usec per loop
$ python -mtimeit -s'xs=range(10)' '[x+2 for x in xs]'
100000 loops, best of 3: 2.32 usec per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Cases</strong></p>
<ul>
<li><strong>Common case</strong>: Almost always, you will want to use a list comprehension in <em>python</em> because it will be more obvious what you're doing to novice programmers reading your code. (This does not apply to other languages, where other idioms may apply.) It will even be more obvious what you're doing to python programmers, since list comprehensions are the de-facto standard in python for iteration; they are <em>expected</em>.</li>
<li><strong>Less-common case</strong>: However if you <em>already have a function defined</em>, it is often reasonable to use <code>map</code>, though it is considered 'unpythonic'. For example, <code>map(sum, myLists)</code> is more elegant/terse than <code>[sum(x) for x in myLists]</code>. You gain the elegance of not having to make up a dummy variable (e.g. <code>sum(x) for x...</code> or <code>sum(_) for _...</code> or <code>sum(readableName) for readableName...</code>) which you have to type twice, just to iterate. The same argument holds for <code>filter</code> and <code>reduce</code> and anything from the <code>itertools</code> module: if you already have a function handy, you could go ahead and do some functional programming. This gains readability in some situations, and loses it in others (e.g. novice programmers, multiple arguments)... but the readability of your code highly depends on your comments anyway.</li>
<li><strong>Almost never</strong>: You may want to use the <code>map</code> function as a pure abstract function while doing functional programming, where you're mapping <code>map</code>, or currying <code>map</code>, or otherwise benefit from talking about <code>map</code> as a function. In Haskell for example, a functor interface called <code>fmap</code> generalizes mapping over any data structure. This is very uncommon in python because the python grammar compels you to use generator-style to talk about iteration; you can't generalize it easily. (This is sometimes good and sometimes bad.) You can probably come up with rare python examples where <code>map(f, *lists)</code> is a reasonable thing to do. The closest example I can come up with would be <code>sumEach = partial(map,sum)</code>, which is a one-liner that is very roughly equivalent to:</li>
</ul>
<p></p>
<pre><code>def sumEach(myLists):
    return [sum(_) for _ in myLists]
</code></pre>
<ul>
<li><strong>Just using a <code>for</code>-loop</strong>: You can also of course just use a for-loop. While not as elegant from a functional-programming viewpoint, sometimes non-local variables make code clearer in imperative programming languages such as python, because people are very used to reading code that way. For-loops are also, generally, the most efficient when you are merely doing any complex operation that is not building a list like list-comprehensions and map are optimized for (e.g. summing, or making a tree, etc.) -- at least efficient in terms of memory (not necessarily in terms of time, where I'd expect at worst a constant factor, barring some rare pathological garbage-collection hiccuping).</li>
</ul>
<p><strong>"Pythonism"</strong></p>
<p>I dislike the word "pythonic" because I don't find that pythonic is always elegant in my eyes. Nevertheless, <code>map</code> and <code>filter</code> and similar functions (like the very useful <code>itertools</code> module) are probably considered unpythonic in terms of style.</p>
<p><strong>Laziness</strong></p>
<p>In terms of efficiency, like most functional programming constructs, <strong>MAP CAN BE LAZY</strong>, and in fact is lazy in python. That means you can do this (in <em>python3</em>) and your computer will not run out of memory and lose all your unsaved data:</p>
<pre><code>&gt;&gt;&gt; map(str, range(10**100))
&lt;map object at 0x2201d50&gt;
</code></pre>
<p>Try doing that with a list comprehension:</p>
<pre><code>&gt;&gt;&gt; [str(n) for n in range(10**100)]
# DO NOT TRY THIS AT HOME OR YOU WILL BE SAD #
</code></pre>
<p>Do note that list comprehensions are also inherently lazy, but <em>python has chosen to implement them as non-lazy</em>. Nevertheless, python does support lazy list comprehensions in the form of generator expressions, as follows:</p>
<pre><code>&gt;&gt;&gt; (str(n) for n in range(10**100))
&lt;generator object &lt;genexpr&gt; at 0xacbdef&gt;
</code></pre>
<p>You can basically think of the <code>[...]</code> syntax as passing in a generator expression to the list constructor, like <code>list(x for x in range(5))</code>.</p>
<p><strong>Brief contrived example</strong></p>
<pre><code>from operator import neg
print({x:x**2 for x in map(neg,range(5))})

print({x:x**2 for x in [-y for y in range(5)]})

print({x:x**2 for x in (-y for y in range(5))})
</code></pre>
<p>List comprehensions are non-lazy, so may require more memory (unless you use generator comprehensions). The square brackets <code>[...]</code> often make things obvious, especially when in a mess of parentheses. On the other hand, sometimes you end up being verbose like typing <code>[x for x in...</code>. As long as you keep your iterator variables short, list comprehensions are usually clearer if you don't indent your code. But you could always indent your code.</p>
<pre><code>print(
    {x:x**2 for x in (-y for y in range(5))}
)
</code></pre>
<p>or break things up:</p>
<pre><code>rangeNeg5 = (-y for y in range(5))
print(
    {x:x**2 for x in rangeNeg5}
)
</code></pre>
<p><strong>Efficiency comparison for python3</strong></p>
<p><code>map</code> is now lazy:</p>
<pre><code>% python3 -mtimeit -s 'xs=range(1000)' 'f=lambda x:x' 'z=map(f,xs)'
1000000 loops, best of 3: 0.336 usec per loop            ^^^^^^^^^
</code></pre>
<p><em>Therefore if you will not be using all your data, or do not know ahead of time how much data you need, <code>map</code> in python3 (and generator expressions in python2 or python3) will avoid calculating their values until the last moment necessary. Usually this will usually outweigh any overhead from using <code>map</code>. The downside is that this is very limited in python as opposed to most functional languages: you only get this benefit if you access your data left-to-right "in order", because python generator expressions can only be evaluated the order <code>x[0], x[1], x[2], ...</code>.</em></p>
<p>However let's say that we have a pre-made function <code>f</code> we'd like to <code>map</code>, and we ignore the laziness of <code>map</code> by immediately forcing evaluation with <code>list(...)</code>. We get some very interesting results:</p>
<pre><code>% python3 -mtimeit -s 'xs=range(1000)' 'f=lambda x:x' 'z=list(map(f,xs))'                                                                                                                                                
10000 loops, best of 3: 165/124/135 usec per loop        ^^^^^^^^^^^^^^^
                    for list(&lt;map object&gt;)

% python3 -mtimeit -s 'xs=range(1000)' 'f=lambda x:x' 'z=[f(x) for x in xs]'                                                                                                                                      
10000 loops, best of 3: 181/118/123 usec per loop        ^^^^^^^^^^^^^^^^^^
                    for list(&lt;generator&gt;), probably optimized

% python3 -mtimeit -s 'xs=range(1000)' 'f=lambda x:x' 'z=list(f(x) for x in xs)'                                                                                                                                    
1000 loops, best of 3: 215/150/150 usec per loop         ^^^^^^^^^^^^^^^^^^^^^^
                    for list(&lt;generator&gt;)
</code></pre>
<p>In results are in the form AAA/BBB/CCC where A was performed with on a circa-2010 Intel workstation with python 3.?.?, and B and C were performed with a circa-2013 AMD workstation with python 3.2.1, with extremely different hardware. The result seems to be that map and list comprehensions are comparable in performance, which is most strongly affected by other random factors. The only thing we can tell seems to be that, oddly, while we expect list comprehensions <code>[...]</code> to perform better than generator expressions <code>(...)</code>, <code>map</code> is ALSO more efficient that generator expressions (again assuming that all values are evaluated/used).</p>
<p>It is important to realize that these tests assume a very simple function (the identity function); however this is fine because if the function were complicated, then performance overhead would be negligible compared to other factors in the program. (It may still be interesting to test with other simple things like <code>f=lambda x:x+x</code>)</p>
<p>If you're skilled at reading python assembly, you can use the <code>dis</code> module to see if that's actually what's going on behind the scenes:</p>
<pre><code>&gt;&gt;&gt; listComp = compile('[f(x) for x in xs]', 'listComp', 'eval')
&gt;&gt;&gt; dis.dis(listComp)
  1           0 LOAD_CONST               0 (&lt;code object &lt;listcomp&gt; at 0x2511a48, file "listComp", line 1&gt;) 
              3 MAKE_FUNCTION            0 
              6 LOAD_NAME                0 (xs) 
              9 GET_ITER             
             10 CALL_FUNCTION            1 
             13 RETURN_VALUE         
&gt;&gt;&gt; listComp.co_consts
(&lt;code object &lt;listcomp&gt; at 0x2511a48, file "listComp", line 1&gt;,)
&gt;&gt;&gt; dis.dis(listComp.co_consts[0])
  1           0 BUILD_LIST               0 
              3 LOAD_FAST                0 (.0) 
        &gt;&gt;    6 FOR_ITER                18 (to 27) 
              9 STORE_FAST               1 (x) 
             12 LOAD_GLOBAL              0 (f) 
             15 LOAD_FAST                1 (x) 
             18 CALL_FUNCTION            1 
             21 LIST_APPEND              2 
             24 JUMP_ABSOLUTE            6 
        &gt;&gt;   27 RETURN_VALUE
</code></pre>
<p> </p>
<pre><code>&gt;&gt;&gt; listComp2 = compile('list(f(x) for x in xs)', 'listComp2', 'eval')
&gt;&gt;&gt; dis.dis(listComp2)
  1           0 LOAD_NAME                0 (list) 
              3 LOAD_CONST               0 (&lt;code object &lt;genexpr&gt; at 0x255bc68, file "listComp2", line 1&gt;) 
              6 MAKE_FUNCTION            0 
              9 LOAD_NAME                1 (xs) 
             12 GET_ITER             
             13 CALL_FUNCTION            1 
             16 CALL_FUNCTION            1 
             19 RETURN_VALUE         
&gt;&gt;&gt; listComp2.co_consts
(&lt;code object &lt;genexpr&gt; at 0x255bc68, file "listComp2", line 1&gt;,)
&gt;&gt;&gt; dis.dis(listComp2.co_consts[0])
  1           0 LOAD_FAST                0 (.0) 
        &gt;&gt;    3 FOR_ITER                17 (to 23) 
              6 STORE_FAST               1 (x) 
              9 LOAD_GLOBAL              0 (f) 
             12 LOAD_FAST                1 (x) 
             15 CALL_FUNCTION            1 
             18 YIELD_VALUE          
             19 POP_TOP              
             20 JUMP_ABSOLUTE            3 
        &gt;&gt;   23 LOAD_CONST               0 (None) 
             26 RETURN_VALUE
</code></pre>
<p> </p>
<pre><code>&gt;&gt;&gt; evalledMap = compile('list(map(f,xs))', 'evalledMap', 'eval')
&gt;&gt;&gt; dis.dis(evalledMap)
  1           0 LOAD_NAME                0 (list) 
              3 LOAD_NAME                1 (map) 
              6 LOAD_NAME                2 (f) 
              9 LOAD_NAME                3 (xs) 
             12 CALL_FUNCTION            2 
             15 CALL_FUNCTION            1 
             18 RETURN_VALUE 
</code></pre>
<p>It seems it is better to use <code>[...]</code> syntax than <code>list(...)</code>. Sadly the <code>map</code> class is a bit opaque to disassembly, but we can make due with our speed test.</p>
</div>
<div class="post-text" itemprop="text">
<h2>You should use <code>map</code> and <code>filter</code> instead of list comprehensions.</h2>
<p>An <strong>objective</strong> reason why you should prefer them even though they're not "Pythonic" is this:<br/>
They require functions/lambdas as arguments, which <strong>introduce a new scope</strong>.</p>
<p>I've gotten bitten by this more than once:</p>
<pre><code>for x, y in somePoints:
    # (several lines of code here)
    squared = [x ** 2 for x in numbers]
    # Oops, x was silently overwritten!
</code></pre>
<p>but if instead I had said:</p>
<pre><code>for x, y in somePoints:
    # (several lines of code here)
    squared = map(lambda x: x ** 2, numbers)
</code></pre>
<p>then everything would've been fine.</p>
<p>You could say I was being silly for using the same variable name in the same scope.</p>
<p>I wasn't. The code was fine originally -- the two <code>x</code>s weren't in the same scope.<br/>
It was only after I <strong>moved</strong> the inner block to a different section of the code that the problem came up (read: problem during maintenance, not development), and I didn't expect it.</p>
<p>Yes, <em>if you never make this mistake</em> then list comprehensions are more elegant.<br/>
But from personal experience (and from seeing others make the same mistake) I've seen it happen enough times that I think it's not worth the pain you have to go through when these bugs creep into your code.</p>
<h3>Conclusion:</h3>
<p>Use <code>map</code> and <code>filter</code>. They prevent subtle hard-to-diagnose scope-related bugs.</p>
<h3>Side note:</h3>
<p>Don't forget to consider using <code>imap</code> and <code>ifilter</code> (in <code>itertools</code>) if they are appropriate for your situation!</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually, <code>map</code> and list comprehensions behave quite differently in the Python 3 language. Take a look at the following Python 3 program:</p>
<pre><code>def square(x):
    return x*x
squares = map(square, [1, 2, 3])
print(list(squares))
print(list(squares))
</code></pre>
<p>You might expect it to print the line "[1, 4, 9]" twice, but instead it prints "[1, 4, 9]" followed by "[]". The first time you look at <code>squares</code> it seems to behave as a sequence of three elements, but the second time as an empty one.</p>
<p>In the Python 2 language <code>map</code> returns a plain old list, just like list comprehensions do in both languages. The crux is that the return value of <code>map</code> in Python 3 (and <code>imap</code> in Python 2) is not a list - it's an iterator!</p>
<p>The elements are consumed when you iterate over an iterator unlike when you iterate over a list. This is why <code>squares</code> looks empty in the last <code>print(list(squares))</code> line.</p>
<p>To summarize:</p>
<ul>
<li><strong>When dealing with iterators you have to remember that they are stateful and that they mutate as you traverse them.</strong></li>
<li>Lists are more predictable since they only change when you explicitly mutate them; they are <em>containers</em>.</li>
<li>And a bonus: numbers, strings, and tuples are even more predictable since they cannot change at all; they are <em>values</em>.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I find list comprehensions are generally more expressive of what I'm trying to do than <code>map</code> - they both get it done, but the former saves the mental load of trying to understand what could be a complex <code>lambda</code> expression.</p>
<p>There's also an interview out there somewhere (I can't find it offhand) where Guido lists <code>lambda</code>s and the functional functions as the thing he most regrets about accepting into Python, so you could make the argument that they're un-Pythonic by virtue of that.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you plan on writing any asynchronous, parallel, or distributed code, you will probably prefer <code>map</code> over a list comprehension -- as most asynchronous, parallel, or distributed packages provide a <code>map</code> function to overload python's <code>map</code>.  Then by passing the appropriate <code>map</code> function to the rest of your code, you may not have to modify your original serial code to have it run in parallel (etc).</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is one possible case:</p>
<pre><code>map(lambda op1,op2: op1*op2, list1, list2)
</code></pre>
<p>versus:</p>
<pre><code>[op1*op2 for op1,op2 in zip(list1,list2)]
</code></pre>
<p>I am guessing the zip() is an unfortunate and unnecessary overhead you need to indulge in if you insist on using list comprehensions instead of the map.  Would be great if someone clarifies this whether affirmatively or negatively.</p>
</div>
<div class="post-text" itemprop="text">
<p>So since Python 3, <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map()</code></a> is an iterator, you need to keep in mind what do you need: an iterator or <code>list</code> object.</p>
<p>As @AlexMartelli already <a href="https://stackoverflow.com/a/1247490/3124746">mentioned</a>, <code>map()</code> is faster than list comprehension only if you don't use <code>lambda</code> function.</p>
<p>I will present you some time comparisons.</p>
<p><sub>
Python 3.5.2 and CPython<br/>I've used <a href="https://ipython.org/notebook.html" rel="nofollow noreferrer">Jupiter notebook</a> and especially <a href="https://ipython.org/ipython-doc/3/interactive/magics.html#magic-timeit" rel="nofollow noreferrer"><code>%timeit</code></a> built-in magic command
<br/><strong>Measurements</strong>: s == 1000 ms == 1000 * 1000 µs = 1000 * 1000 * 1000 ns </sub></p>
<p>Setup:</p>
<pre><code>x_list = [(i, i+1, i+2, i*2, i-9) for i in range(1000)]
i_list = list(range(1000))
</code></pre>
<p>Built-in function:</p>
<pre><code>%timeit map(sum, x_list)  # creating iterator object
# Output: The slowest run took 9.91 times longer than the fastest. 
# This could mean that an intermediate result is being cached.
# 1000000 loops, best of 3: 277 ns per loop

%timeit list(map(sum, x_list))  # creating list with map
# Output: 1000 loops, best of 3: 214 µs per loop

%timeit [sum(x) for x in x_list]  # creating list with list comprehension
# Output: 1000 loops, best of 3: 290 µs per loop
</code></pre>
<p><code>lambda</code> function:</p>
<pre><code>%timeit map(lambda i: i+1, i_list)
# Output: The slowest run took 8.64 times longer than the fastest. 
# This could mean that an intermediate result is being cached.
# 1000000 loops, best of 3: 325 ns per loop

%timeit list(map(lambda i: i+1, i_list))
# Output: 1000 loops, best of 3: 183 µs per loop

%timeit [i+1 for i in i_list]
# Output: 10000 loops, best of 3: 84.2 µs per loop
</code></pre>
<p>There is also such thing as generator expression, see <a href="https://www.python.org/dev/peps/pep-0289/#the-details" rel="nofollow noreferrer">PEP-0289</a>. So i thought it would be useful to add it to comparison</p>
<pre><code>%timeit (sum(i) for i in x_list)
# Output: The slowest run took 6.66 times longer than the fastest. 
# This could mean that an intermediate result is being cached.
# 1000000 loops, best of 3: 495 ns per loop

%timeit list((sum(x) for x in x_list))
# Output: 1000 loops, best of 3: 319 µs per loop

%timeit (i+1 for i in i_list)
# Output: The slowest run took 6.83 times longer than the fastest. 
# This could mean that an intermediate result is being cached.
# 1000000 loops, best of 3: 506 ns per loop

%timeit list((i+1 for i in i_list))
# Output: 10000 loops, best of 3: 125 µs per loop
</code></pre>
<h3>You need <code>list</code> object:</h3>
<p>Use list comprehension if it's custom function, use <code>list(map())</code> if there is builtin function</p>
<h3>You don't need <code>list</code> object, you just need iterable one:</h3>
<p>Always use <code>map()</code>!</p>
</div>
<div class="post-text" itemprop="text">
<p>I consider that the most Pythonic way is to use a list comprehension instead of <code>map</code> and <code>filter</code>. The reason is that list comprehensions are clearer than <code>map</code> and <code>filter</code>.</p>
<pre><code>In [1]: odd_cubes = [x ** 3 for x in range(10) if x % 2 == 1] # using a list comprehension

In [2]: odd_cubes_alt = list(map(lambda x: x ** 3, filter(lambda x: x % 2 == 1, range(10)))) # using map and filter

In [3]: odd_cubes == odd_cubes_alt
Out[3]: True
</code></pre>
<p>As you an see, a comprehension does not require extra <code>lambda</code> expressions as <code>map</code> needs. Furthermore, a comprehension also allows filtering easily, while <code>map</code> requires <code>filter</code> to allow filtering.</p>
</div>
<span class="comment-copy">Note that PyLint warns if you use map instead of list comprehension, see <a href="http://pylint-messages.wikidot.com/messages:w0141" rel="nofollow noreferrer">message W0141</a>.</span>
<span class="comment-copy">@lumbric, I'm not sure but it does only if lambda is used in map.</span>
<span class="comment-copy">Yep, indeed our internal Python style guide at work explicitly recomments listcomps against map and filter (not even mentioning the tiny but measurable performance improvement map can give in some cases;-).</span>
<span class="comment-copy">Not to kibash on Alex's infinite style points, but sometimes map seems easier to read to me:   data = map(str, some_list_of_objects).  Some other ones... operator.attrgetter, operator.itemgetter, etc.</span>
<span class="comment-copy"><code>map(operator.attrgetter('foo'), objs)</code> easier to read than <code>[o.foo for foo in objs]</code> ?!</span>
<span class="comment-copy">@Alex: I prefer not to introduce unnecessary names, like <code>o</code> here, and your examples show why.</span>
<span class="comment-copy">I think that @GreggLind has a point, with his <code>str()</code> example, though.</span>
<span class="comment-copy">Believe it or not, some "novice programmers" students learn a functional language first. Not necessarily a bad thing.</span>
<span class="comment-copy">"the very useful itertools module [is] probably considered unpythonic in terms of style". Hmm. I don't like the term "Pythonic" either, so in some sense I don't care what it means, but I don't think it's fair to those who do use it, to say that according to "Pythonicness" builtins <code>map</code> and <code>filter</code> along with standard library <code>itertools</code> are inherently bad style. Unless GvR actually says they were either a terrible mistake or solely for performance, the only natural conclusion if that's what "Pythonicness" says is to forget about it as stupid ;-)</span>
<span class="comment-copy">@SteveJessop: Actually, <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=98196" rel="nofollow noreferrer">Guido thought dropping <code>map</code>/<code>filter</code> was a great idea for Python 3</a>, and only a rebellion by other Pythonistas kept them in the built-in namespace (while <code>reduce</code> was moved to <code>functools</code>). I personally disagree (<code>map</code> and <code>filter</code> are fine with predefined, particularly built-in, functions, just never use them if a <code>lambda</code> would be needed), but GvR has basically called them not Pythonic for years.</span>
<span class="comment-copy">@ShadowRanger: true, but was GvR ever planning to remove <code>itertools</code>? The part I quote from this answer is the main claim that befuddles me. I don't know whether in his ideal world, <code>map</code> and <code>filter</code> would move to <code>itertools</code> (or <code>functools</code>) or go entirely, but whichever is the case, once one says that <code>itertools</code> is unPythonic in its entirety, then I don't really know what "Pythonic" is supposed to mean but I don't think it can be anything similar to "what GvR recommends people use".</span>
<span class="comment-copy">@SteveJessop: I was only addressing <code>map</code>/<code>filter</code>, not <code>itertools</code>. Functional programming is perfectly Pythonic (<code>itertools</code>, <code>functools</code> and <code>operator</code> were all designed specifically with functional programming in mind, and I use functional idioms in Python all the time), and <code>itertools</code> provides features that would be a pain to implement yourself, It's specifically <code>map</code> and <code>filter</code> being redundant with generator expressions that made Guido hate them. <code>itertools</code> has always been fine.</span>
<span class="comment-copy">Thanks for pointing this out.  It hadn't explicitly occurred to me that list comprehension was in the same scope and could be an issue.  With that said, I think some of the other answers make it clear that list comprehension should be the default approach most of the time but that this is something to remember.  This is also a good general reminder to keep functions (and thus scope) small and have thorough unit tests and use assert statements.</span>
<span class="comment-copy">This bug is <a href="http://stackoverflow.com/a/4199355/596361">fixed</a> in Python 3</span>
<span class="comment-copy">@wim: This was only about Python 2, although it applies to Python 3 if you want to stay backwards-compatible. I knew about it and I'd been using Python for a while now (yes, more than just a few months), and yet it happened to me. I've seen others who are smarter than me fall into the same trap. If you're so bright and/or experienced that this isn't a problem for you then I'm happy for you, I don't think most people are like you. If they were, there wouldn't be such an urge to fix it in Python 3.</span>
<span class="comment-copy">I'm sorry but you wrote this in late 2012, well after python 3 is on the scene, and the answer reads like you're recommending an otherwise unpopular style of python coding just because you got bitten by a bug while cutting-and-pasting code.  I never claimed to be bright or experienced, I just don't agree that the bold claim is justified by your reasons.</span>
<span class="comment-copy">@wim: Huh? Python 2 is still used in a lot of places, the fact that Python 3 exists doesn't change that. And when you say "it's not exactly a subtle bug for anyone that has used Python more than a few months" that sentence literally means "this only concerns inexperienced developers" (clearly not you). And for the record, you clearly didn't read the answer because I said in <i>bold</i> that I was <b>moving</b>, not copying, code. Copy-paste bugs are pretty uniform across languages. This kind of bug is more unique to Python because of its scoping; it's subtler &amp; easier to forget about and miss.</span>
<span class="comment-copy">this is probably the best argument for list comprehensions. pythons map is not the functional map but the crippled red-headed stepchild of a functional implementation. Very sad, because I really dislike comprehensions.</span>
<span class="comment-copy">@semiomant I would say lazy map (like in python3) is more 'functional' than eager map (like in python2). For example, map in Haskell is lazy (well, everything in Haskell is lazy...). Anyway, lazy map is better for chaining maps - if you have a map applied to map applied to map, you have a list for each of intermediate map calls in python2, whereas in python3 you have just one resulting list, so its more memory efficient.</span>
<span class="comment-copy">I guess what I want is for <code>map</code> to produce a data structure, not an iterator. But maybe lazy iterators are easier than lazy data structures. Food for thought. Thanks @MnZrK</span>
<span class="comment-copy">You want to say map returns an iterable, not an iterator.</span>
<span class="comment-copy">Yeah, sigh, but Guido's original intention to remove lambda altogether in Python 3 got a barrage of lobbying against it, so he went back on it despite my stout support -- ah well, guess lambda's just too handy in many <i>SIMPLE</i> cases, the only problem is when it exceeds the bounds of <i>SIMPLE</i> or gets assigned to a name (in which latter case it's a silly hobbled duplicate of def!-).</span>
<span class="comment-copy">The interview you are thinking about is this one: <a href="http://www.amk.ca/python/writing/gvr-interview" rel="nofollow noreferrer">amk.ca/python/writing/gvr-interview</a>, where Guido says <i>"Sometimes I've been too quick in accepting contributions, and later realized that it was a mistake. One example would be some of the functional programming features, such as lambda functions. lambda is a keyword that lets you create a small anonymous function; built-in functions such as map, filter, and reduce run a function over a sequence type, such as a list."</i></span>
<span class="comment-copy">@Alex, I don't have your years of experience, but I've seen far more over-complicated list comprehensions than lambdas. Of course, abusing language features is always a difficult temptation to resist.  It's interesting that list comprehensions (empirically) seem more prone to abuse than lambdas, though I'm not sure why that should be the case.  I'll also point out that "hobbled" isn't always a bad thing.  Reducing the scope of "things this line might be doing" can sometimes make it easier on the reader.  For example, the <code>const</code> keyword in C++ is a great triumph along these lines.</span>
<span class="comment-copy">&gt; guido .   Which is another piece of evidence  that Guido is out of his mind.  Of course <code>lambda</code>'s have been made so lame (no statements..) that they're difficult to use and limited anyways.</span>
<span class="comment-copy">Could you provide an example?</span>
<span class="comment-copy">How about this <a href="https://github.com/uqfoundation/pathos/blob/master/tests/test_map.py" rel="nofollow noreferrer">github.com/uqfoundation/pathos/blob/master/tests/test_map.py</a> and this <a href="https://github.com/uqfoundation/pathos/blob/master/tests/test_star.py" rel="nofollow noreferrer">github.com/uqfoundation/pathos/blob/master/tests/test_star.py</a>?</span>
<span class="comment-copy">Python's multiprocessing module does this:  <a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow noreferrer">docs.python.org/2/library/multiprocessing.html</a></span>
<span class="comment-copy">"[op1*op2 from op1,op2 in zip(list1,list2)]" | s/form/for/  And an equivalent list with out zip: (less readable)[list1[i]*list2[i] for i in range(len(list1))]</span>
<span class="comment-copy">Should be "for" not "from" in your second code quote, @andz, and in @weakish's comment too. I thought I had discovered a new syntactical approach to list comprehensions... Darn.</span>
<span class="comment-copy">to add a very late comment, you can make <code>zip</code> lazy by using <code>itertools.izip</code></span>
<span class="comment-copy">@tcaswell No longer needed in Python 3000.</span>
<span class="comment-copy">I think I still prefer <code>map(operator.mul, list1, list2)</code>. It's on these very simple left side expressions that comprehensions get clumsy.</span>
