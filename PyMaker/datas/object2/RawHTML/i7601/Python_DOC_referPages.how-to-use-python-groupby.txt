<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/50198597/why-itertools-groupby-doesnt-work">Why itertools.groupby() doesn't work? [duplicate]</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>When I try to use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">itertools.groupby</a> to group a list of numbers like this:</p>
<pre><code>from itertools import groupby

a = [1, 2, 1, 3, 2, 1, 2, 3, 4, 5]

for key, value in groupby(a):
    print((len(list(value)), key), end=' ')
</code></pre>
<p>The output is</p>
<pre><code>(1, 1) (1, 2) (1, 1) (1, 3) (1, 2) (1, 1) (1, 2) (1, 3) (1, 4) (1, 5) 
</code></pre>
<p>instead of</p>
<pre><code>(3, 1) (3, 2) (2, 3) (1, 4) (1, 5)
</code></pre>
<p>Why doesn't it group identical numbers correctly?</p>
</div>
<div class="post-text" itemprop="text">
<p>Grouping input by common key elements with <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby()</code></a> only works on input already sorted by that key:</p>
<blockquote>
<p>[...] Generally, the iterable needs to already be sorted on the same key function.</p>
</blockquote>
<p>Your example should work like this:</p>
<pre><code>from itertools import groupby

a = sorted([1, 2, 1, 3, 2, 1, 2, 3, 4, 5])

for key, value in groupby(a):
    print((len(list(value)), key), end=' ')
</code></pre>
<p>If you use <code>groupby()</code> on unorderd input you'll get a new group every time a different key is returned by the <code>key</code> function while iterating through the iterable.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>itertools.groupby</code> only group the consecutive elements. So you need to sort before doing <code>groupby</code>.</p>
<pre><code>from itertools import groupby

a = sorted([1, 2, 1, 3, 2, 1, 2, 3, 4, 5])

for key, value in groupby(a):
    print((len(list(value)), key), end=' ')
</code></pre>
<p><strong>Result</strong></p>
<pre><code>(3, 1)
(3, 2)
(2, 3)
(1, 4)
(1, 5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on your output requirement, I'll change your question. <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">collections.Counter</a> is simple to use here</p>
<pre><code>from collections import Counter

a = [1, 2, 1, 3, 2, 1, 2, 3, 4, 5]

[ (v, k) for k, v in Counter(a).items() ]
</code></pre>
</div>
<span class="comment-copy">Thank you @mata</span>
<span class="comment-copy"><code>groupby</code> groups consecutive elements.  It expects a sorted input, but it works on unsorted inputs too, if consecutive sub-groups is deserved.</span>
<span class="comment-copy">@pylang You're right, <code>groupby()</code> does work on input not already sorted on the keyfunc, and there are good use cases for that. I've changed my answer not to sound like it wouldn't work with such input at all while it does, altough the result isn't what you'd trivially expect from a <code>groupby()</code> function - but on the other hand implicitly sorting the input of a iterable would be worse (eliminate that use case and would not work on infinite iterables).</span>
<span class="comment-copy">That works.  Also, there's a typo in my comment.  I meant "desired", not "deserved".</span>
