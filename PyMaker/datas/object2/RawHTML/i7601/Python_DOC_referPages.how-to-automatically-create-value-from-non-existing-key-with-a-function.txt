<div class="post-text" itemprop="text">
<p><strong>Backgroud:</strong></p>
<p>Let's say I have a function (of course in reality that would be a more complex function):</p>
<pre><code>def f(x):
    return str(x)
</code></pre>
<p>If I want to store values to avoid unnecessary recomputation, I can create a <code>dict</code> like this:</p>
<pre><code>my_dict = {x: f(x) for x in range(5)}
</code></pre>
<p>But then if I don't know in advance which values I may need, for example <code>10</code>,  <code>my_dict[10]</code> obviously generates a <code>KeyError</code>.</p>
<p>One way around this could be:</p>
<pre><code>my_dict = {}
def get_value(x):
    if x not in my_dict:
        my_dict[x] = f(x)
    return my_dict[x]

get_value(10)
</code></pre>
<p><strong>Question:</strong>
This seems very similar to <code>defaultdict</code>: is there a way to make the intuitive (but broken) <code>my_dict = defaultdict(f)</code> work, i.e. when a key <code>x</code> doesn't exist, it should call <code>f(x)</code> instead of <code>f()</code> to create the default value?</p>
</div>
<div class="post-text" itemprop="text">
<p>you can build your own <code>dict</code> data type. in your case, <code>__missing__</code> will help. if there is no key, <code>__missing__</code> method triggers your custom work. below is a simple example.</p>
<pre><code>from collections import UserDict
class MyDict(UserDict):
    def __missing__(self, key):
        self[key] = 2*key
        return self[key]

if __name__ == '__main__': # test
    a = MyDict((x, 2*x) for x in range(5))
    print(a)
    # {0: 0, 1: 2, 2: 4, 3: 6, 4: 8}
    a[5]
    # 10
    print(a)
    # {0: 0, 1: 2, 2: 4, 3: 6, 4: 8, 5:10}
</code></pre>
<p>also note that <code>UserDict</code> is a wrapper around dictionary objects, making you comfortable to subclassing the dictionary data types.</p>
<p>check the official docs.</p>
<ul>
<li><a href="https://docs.python.org/3/library/collections.html#defaultdict-objects" rel="nofollow noreferrer"><code>defaultdict</code></a></li>
<li><a href="https://docs.python.org/3/library/collections.html#collections.defaultdict.__missing__" rel="nofollow noreferrer"><code>__missing__</code></a></li>
<li><a href="https://docs.python.org/3/library/collections.html#userdict-objects" rel="nofollow noreferrer"><code>UserDict</code></a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Based on <a href="https://docs.python.org/3.6/library/collections.html#collections.defaultdict.__missing__" rel="nofollow noreferrer">the docs</a>, you might be able to get the behavior you want by subclassing <code>defaultdict</code> and overriding <code>__missing__</code>:</p>
<pre><code>from collections import defaultdict
class betterdefault(defaultdict):
    def __missing__(self, key):
        return self.default_factory(key)
</code></pre>
<p>Now, you'd want to flesh that out with a little extra logic, eg throw <code>KeyError</code> if <code>self.default_factory</code> is None, stuff like that which they mention in the docs. Hope this points you in the right direction.</p>
<p>Here's a quick <a href="https://repl.it/JFCp" rel="nofollow noreferrer">demo</a></p>
</div>
<span class="comment-copy"><code>UserDict</code> is only necessary in Python 2. If using Python 3 it is possible to inherit from dict directly <code>class MyDict(dict):</code></span>
<span class="comment-copy"><code>from collection import UserDict</code> doesn't work for me (either <code>No module named collection</code> (instead of <code>collections</code>?) or <code>cannot import name UserDict</code>, but using plain <code>dict</code> as base for <code>MyDict</code> works nicely!</span>
<span class="comment-copy">fixed the typo, <code>collection</code> to <code>collections</code> ;]</span>
<span class="comment-copy">What about <code>UserDict</code>? Is there anything special about it? (I'm in Python2 and it doesn't seem to exist...)</span>
<span class="comment-copy">@robru AFAIK, the reason is that subclassing the built-in data type (like <code>dict</code> or <code>list</code>) does not call special methods overridden by user-defined classes. <code>collections.UserDict</code> (or <code>UserList</code>) is a wrapper for the <code>dict</code> built-in, resolving the overwritten method usage.</span>
<span class="comment-copy">This is pretty cool, but <code>__missing__</code> doesn't set any value. Maybe add a call to <code>self.setitem(key, self.default_factory(key))</code>?</span>
<span class="comment-copy"><a href="https://repl.it/JFCp/1" rel="nofollow noreferrer">Success!</a> Very nice, +1</span>
<span class="comment-copy">Nice team work guys! Waiting to see if anyone comes with a simpler solution before accepting.</span>
<span class="comment-copy">@Julien well, using <code>setdefault</code> <i>is simpler</i> ;) But in all seriousness, I like the above solution a lot.</span>
