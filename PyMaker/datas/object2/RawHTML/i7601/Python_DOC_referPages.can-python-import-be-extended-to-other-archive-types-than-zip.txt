<div class="post-text" itemprop="text">
<p>The <code>zipimport</code> module is automatically used by the standard import to handle <code>.zip</code> sys.path elements.</p>
<p>Is it possible to add hooks to support other file types? for example a handler for <code>.tar.gz</code>?</p>
<p>so for example, if sys.path contains <code>/path/to/archive.tar.gz</code> or <code>/path/to/archive.xyz</code> handlers can be provided to open and read <code>.tar.gz</code> or <code>.xyz</code> files.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, there are two ways of doing this:</p>
<ol>
<li>Overwrite the <a href="https://docs.python.org/2.7/library/functions.html#__import__" rel="nofollow noreferrer"><code>__builtin__.__import__()</code></a> function with your own custom implementation.  This is a low-level way of completely overriding what the <code>import</code> keyword does, and is not recommended for general use.</li>
<li>Add a <a href="https://docs.python.org/2/glossary.html#term-finder" rel="nofollow noreferrer">finder</a> object to <a href="https://docs.python.org/2/library/sys.html#sys.meta_path" rel="nofollow noreferrer"><code>sys.meta_path</code></a> which implements the desired functionality, or add a callable which returns such a finder to <a href="https://docs.python.org/2.7/library/sys.html#sys.path_hooks" rel="nofollow noreferrer"><code>sys.path_hooks</code></a>.  Finders are easier to implement in Python 3 than in Python 2, because 3.x provides a lot of building blocks in <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer"><code>importlib</code></a>.  However, they can be implemented in Python 2 as well (you just have to write more code).</li>
</ol>
<p>In general, (2) is much easier than (1) regardless of 2.x vs 3.x.  (1) is only recommended as a last resort.  For more on (2), see <a href="https://www.python.org/dev/peps/pep-0302/" rel="nofollow noreferrer">PEP 302</a>.</p>
</div>
