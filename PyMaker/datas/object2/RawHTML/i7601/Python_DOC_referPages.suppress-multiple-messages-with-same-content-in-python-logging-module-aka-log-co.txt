<div class="post-text" itemprop="text">
<p>By design, my application sometimes produces repeating errors which fill up the log file and make it annoying to read. It looks like that:</p>
<pre><code>WARNING:__main__:CRON10: clock unset or no wind update received in 60 sec -&gt; supressed rrd update
WARNING:__main__:CRON10: clock unset or no wind update received in 60 sec -&gt; supressed rrd update
WARNING:__main__:CRON10: clock unset or no wind update received in 60 sec -&gt; supressed rrd update
WARNING:__main__:CRON10: clock unset or no wind update received in 60 sec -&gt; supressed rrd update
</code></pre>
<p>How can I use the Python logging module to suppress repeating messages and output something more rsyslog style (<a href="http://www.rsyslog.com/doc/rsconf1_repeatedmsgreduction.html" rel="noreferrer">http://www.rsyslog.com/doc/rsconf1_repeatedmsgreduction.html</a>):</p>
<pre><code>WARNING:__main__:CRON10: clock unset or no wind update received in 60 sec -&gt; supressed rrd update
--- The last message repeated 3 times
</code></pre>
<p>Is there a way to extend logging or do I have to write a completly own logger?</p>
<p>The code I use for logging is:</p>
<pre><code>logging.basicConfig(format='%(asctime)s %(message)s')
logging.basicConfig(level=logging.info)
logger = logging.getLogger(__name__)
hdlr = logging.FileHandler(LOGFILE)
hdlr.setFormatter(formatter)
logger.addHandler(hdlr) 
</code></pre>
<p>Any ideas on that?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a <a href="https://docs.python.org/3/library/logging.html#logging.Filter" rel="noreferrer"><code>logging.Filter</code></a> that will keep track of the last logged record and filter out any repeated (similar) records, something like:</p>
<pre><code>import logging

class DuplicateFilter(logging.Filter):

    def filter(self, record):
        # add other fields if you need more granular comparison, depends on your app
        current_log = (record.module, record.levelno, record.msg)
        if current_log != getattr(self, "last_log", None):
            self.last_log = current_log
            return True
        return False
</code></pre>
<p>Then just add it to the logger/handler you use (i.e. <code>hdlr.addFilter(DuplicateFilter())</code>) or the root logger to filter all default logs. Here's a simple test:</p>
<pre><code>import logging

logging.warn("my test")
logging.warn("my repeated test")
logging.warn("my repeated test")
logging.warn("my repeated test")
logging.warn("my other test")

logger = logging.getLogger()  # get the root logger
logger.addFilter(DuplicateFilter())  # add the filter to it

logging.warn("my test")
logging.warn("my repeated test")
logging.warn("my repeated test")
logging.warn("my repeated test")
logging.warn("my other test")
</code></pre>
<p>This will print out:</p>
<pre>WARNING:root:my test
WARNING:root:my repeated test
WARNING:root:my repeated test
WARNING:root:my repeated test
WARNING:root:my other test
WARNING:root:my test
WARNING:root:my repeated test
WARNING:root:my other test</pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/28351287/how-to-avoid-duplicate-outputs-using-logging-module">How to avoid duplicate outputs using logging module</a></span>
<span class="comment-copy">@Anthon: The linked dupe is about the results of registering multiple handlers. That's not the problem described here.</span>
