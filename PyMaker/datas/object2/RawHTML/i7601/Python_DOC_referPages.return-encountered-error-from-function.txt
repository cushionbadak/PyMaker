<div class="post-text" itemprop="text">
<p>How would I return the error received during a function call back to main?</p>
<p>I've got something simple such as:</p>
<pre><code>def check(file):
    if not os.path.exists(file):  # returns false by itself, but I want error
        return -1
</code></pre>
<p>When called, it just returns to the calling <code>.py</code> and the program ends. But I am trying to return what happened (i.e. the file does not exist). Is raising an exception more appropriate?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you do want to raise an exception instead of returning <code>-1</code> when the file doesn't exist, you could <em>skip the <code>check()</code></em> and go directly to <code>open()</code> or whatever you actually want to do with the file.</p>
<p><strong>The correct way to actually raise the exception is to <em>let it</em> get raised.</strong> So do:</p>
<pre><code>def check_and_open(file):
    # raises FileNotFoundError automatically
    with open('xyz', 'r') as fp:
        fp.readlnes()  # or whatever
</code></pre>
<p>And if you do want to explicitly check before you open, this will raise the actual error object:</p>
<pre><code>def check(file):
    try:
        with open(file, 'r') as fp:
            # continue doing something with `fp` here or 
            # return `fp` to the function which wants to open file
            pass
    except FileNotFoundError as e:
        # log error, print error, or.. etc.
        raise e  # and then re-raise it
</code></pre>
<p>Result of this version is:</p>
<pre><code>&gt;&gt;&gt; check('xyz')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 9, in check
  File "&lt;stdin&gt;", line 3, in check
FileNotFoundError: [Errno 2] No such file or directory: 'xyz'
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>Also, note that just doing <code>raise FileNotFoundError(file)</code>, like in another answer provided, breaks how <code>FileNotFoundError</code> actually raises:</p>
<p>Raising explicitly (the filename gets considered as the err message):</p>
<pre><code>&gt;&gt;&gt; raise FileNotFoundError('xyz')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
FileNotFoundError: xyz
&gt;&gt;&gt;
</code></pre>
<p>How it's actually raised by Python:</p>
<pre><code>&gt;&gt;&gt; fp = open('xyz', 'r')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
FileNotFoundError: [Errno 2] No such file or directory: 'xyz'
&gt;&gt;&gt;
&gt;&gt;&gt; # or with `with`:
... with open('xyz', 'r') as fp:
...     fp.readlnes()
...
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
FileNotFoundError: [Errno 2] No such file or directory: 'xyz'
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could <code>raise</code> an exception (<code>FileNotFoundError</code> is used in built-in libraries), although if you'll try to use non-existent file you'll get <code>FileNotFoundError</code> exception raised by default.</p>
<p>Then, when using this function, handle your exception:</p>
<pre><code>import os

def check(file):
    if not os.path.exists(file):
        raise FileNotFoundError(file)

if __name__ == '__main__':
    try:
        check(os.path.join('foo', 'bar'))
    except FileNotFoundError:
        print('File was not found')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>(As an alternative to my <a href="https://stackoverflow.com/a/44828334/1431750">previous answer</a>.)</em></p>
<p>Another <em>more correct</em> way to do the <code>check()</code> if you want to explicitly check before doing anything else - use <a href="https://docs.python.org/3/library/os.html#os.stat" rel="nofollow noreferrer"><code>os.stat()</code></a> which doesn't actually open the file:</p>
<pre><code>import os

def check(file):
    try:
        os.stat(file)
        # continue doing something here or 
        # return to the function which wants to open file
    except FileNotFoundError as e:
        # log error, print error, or.. etc.
        raise e  # and then re-raise it
</code></pre>
<p>Result of this version is:</p>
<pre><code>&gt;&gt;&gt; check('xyz')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 8, in check
  File "&lt;stdin&gt;", line 3, in check
FileNotFoundError: [WinError 2] The system cannot find the file specified: 'xyz'
&gt;&gt;&gt;
</code></pre>
<p>Note that the error is a bit different here vs the prev: <code>[Errno 2] No such file or directory: 'xyz'</code></p>
</div>
<span class="comment-copy">Maybe you want to look a bit at <a href="https://wiki.python.org/moin/HandlingExceptions" rel="nofollow noreferrer">How to handle exceptions in Python</a></span>
<span class="comment-copy">This is up to you as the designer of the software. If you want to raise an exception because the file does not exist, then instead of returning -1, raise an exception yourself.</span>
<span class="comment-copy">"what happened" is that <code>os.path.exists(file)</code> returned <code>False</code>. the calling <code>.py</code> file should be structured to handle this possible return value, or you should be raising an error (which will raise to the calling procedure).</span>
<span class="comment-copy">Raising an exception is more explicit and safer than returning some value. With an exception, you'll be sure that either you deal with it, or your code fails immediately. If you return -1, you have to take care to test it everytime you use it, and things can silently go wrong if you forget to do so.</span>
