<div class="post-text" itemprop="text">
<p>Using the <code>multiprocessing</code> library to run a second process, how can I keep that process running after closing the initial one? I swear it originally did that, and I had to enable the daemon option so that it would close properly, but now I can't seem to separate them.</p>
<p>Here's some simple code that has the problem. Hitting close on the main window will also close the second process, but as far as I'm aware that should only happen if daemon is set to True.</p>
<pre><code>from multiprocessing import Process

def background_process():

    #So you can see it eating the cpu
    while True:
        pass

if __name__ == '__main__':

    p = Process(target=background_process)
    p.daemon = False
    p.start()
</code></pre>
<p>I'm aiming for the script to run on all platforms, so as the multiprocessing part is a big chunk of the code, I'd prefer to keep it fairly universal.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply use <a href="https://docs.python.org/3/library/os.html#os.fork" rel="nofollow noreferrer"><code>os.fork()</code></a>:</p>
<pre><code>from os import fork

child_pid = fork()
if child_pid == 0:
    '''This is the child process, i.e your background process'''
else:
    '''This is the parent process.'''
</code></pre>
<p>You can use <a href="https://docs.python.org/3/library/os.html#os.kill" rel="nofollow noreferrer">signals</a>, <a href="https://docs.python.org/3/library/os.html#os.pipe" rel="nofollow noreferrer">pipes</a>, and <a href="https://docs.python.org/3/library/socket.html#socket.socketpair" rel="nofollow noreferrer">sockets</a> (Unix sockets) to communicate.</p>
<p>multiprocessing.Process tries to make your life easier, but it seldom does. I would advise you not to use it at all.</p>
</div>
<span class="comment-copy">Always tag your quests with "windows", if you need windows specific answers. Normally one would assume that you are targeting a posix system.</span>
<span class="comment-copy">Ah right thanks, I never thought of that. I'm ideally wanting it to run on all systems, so I'm trying to avoid making major parts specific to any operating system :)</span>
<span class="comment-copy">Neither of these processes owns a window. Both processes are attached to a console (conhost.exe), which they use via standard I/O. The console owns the window, and it's hard-coded to terminate all processes attached to it when closed.</span>
<span class="comment-copy">multiprocessing automatically kills all daemon processes, and otherwise waits for all non-daemon processes to exit. To bypass this you can use <code>os._exit(0)</code>, which exits Python immediately.</span>
<span class="comment-copy">To detach the child process from the console, you should first dupe the standard streams to <code>nul</code>, e.g. <code>fd = os.open(os.devnull, os.O_RDWR);</code> <code>os.dup2(fd, sys.stdin.fileno());</code> <code>os.dup2(fd, sys.stdout.fileno());</code> <code>os.dup2(fd, sys.stderr.fileno());</code> <code>os.close(fd)</code>. Then free the console handle via <code>ctypes.WinDLL('kernel32').FreeConsole()</code>. Now the console can be closed without it killing your background process.</span>
<span class="comment-copy">Thanks, but it's for Unix systems only unfortunately, comes up with an <code>ImportError</code> on Windows. I'm using <code>Queue</code> from multiprocessing which is super useful, it's just <code>Process</code> which is causing quite a lot of hassle :P</span>
<span class="comment-copy">Are you using windows 10? Then the Linux version of Python should work: <a href="http://timmyreilly.azurewebsites.net/python-with-ubuntu-on-windows/" rel="nofollow noreferrer">timmyreilly.azurewebsites.net/python-with-ubuntu-on-windows</a></span>
<span class="comment-copy">@Peter:  Yeah, Windows can't fork at all.  The Cygwin emulation of fork() is intense but has limited compatibility.</span>
<span class="comment-copy">I'm attempting to make it run without effort on all operating systems to be fair (someone already got most of the linux version working), so probably best leaving it to the default python installation haha. The multiprocessing module works but I'm just needing it to not quit instantly which is proving a little annoying.</span>
