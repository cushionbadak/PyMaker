<div class="post-text" itemprop="text">
<p>if there is a directory <code>/home/project/aaa</code>.
and I know that it is a Python package.</p>
<p>so, how can i import this module by just knowing its path.</p>
<p>means that, i hope that code is worked:</p>
<pre><code>aaa = load_module("/home/project/aaa")
</code></pre>
<p>the only way i knew is that, adding <code>/home/project</code> to <code>sys.path</code></p>
<p>but it maybe incur some problem:</p>
<p>if i add <code>/home/project</code> to <code>sys.path</code></p>
<p>and if there a dir <code>pytest</code> in path <code>/home/project</code>.</p>
<p>then the official pytest package would not work.</p>
<p>i try <code>importlib</code> yet.
but it seems that <code>importlib</code> can just import a file as a module, not a path.</p>
<p>so, i try it:</p>
<pre><code>aaa = importlib.import_module("aaa", "/home/project")
</code></pre>
<p>or</p>
<pre><code>aaa = importlib.import_module("aaa", "/home/project/aaa")
</code></pre>
<p>both of them are not work.</p>
<p>so, is there any other way to do what i want?</p>
<p>oh, i am using Python3.6</p>
<hr/>
<p>UPDATED AT 20170628</p>
<p><strong>(NOTICE: there is a <code>__init__.py</code> in folder <code>/home/project/aaa</code>)</strong></p>
<p>all solutions i known is that import module from a single file.</p>
<p>if there is <code>bbb.py</code> file in folder <code>/home/project/aaa</code></p>
<p>then, add <code>/home/project/aaa</code> to  <code>sys.path</code> or <code>__path__</code> (whatever)</p>
<p><code>import bbb</code> is worked, but not the <code>import aaa</code></p>
<p>what i wanna ask is how to import <strong>folder (or directory)</strong> as a module.</p>
<p>for my example, folder <code>aaa</code> is consided as a module. </p>
<p>i wanna use <code>import aaa</code> not <code>import {SOMETHING IN AAA}</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Here are five different ways of how to accomplish that task.</p>
<p>For the following considerations I refer to Python 3.5+.</p>
<hr/>
<h1>Register a custom <a href="https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder" rel="nofollow noreferrer"><code>Finder</code></a></h1>
<p>Python uses <a href="https://docs.python.org/3/glossary.html#term-finder" rel="nofollow noreferrer">finders</a> for when importing modules. If a finder knows how to deal with a particular requested module then it returns a corresponding <a href="https://docs.python.org/3/glossary.html#term-module-spec" rel="nofollow noreferrer">module spec</a> and otherwise <code>None</code>. Python has three different finders already registered which can be found in <code>sys.meta_path</code>:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.meta_path
[&lt;class '_frozen_importlib.BuiltinImporter'&gt;, &lt;class '_frozen_importlib.FrozenImporter'&gt;, &lt;class '_frozen_importlib_external.PathFinder'&gt;]
</code></pre>
<p>The first one handles built-in modules, the second one frozen modules (some kind of "self-contained" Python scripts, see <a href="https://wiki.python.org/moin/Freeze" rel="nofollow noreferrer">the wiki</a>) and the last one handles everything which can be found on <code>sys.path</code>. So if we modified <code>sys.path</code> by appending <code>'/home/project'</code> then it would be this finder which provides the corresponding spec.</p>
<p>Instead of modifying <code>sys.path</code> we can register our own finder which uses the functionality of <a href="https://docs.python.org/3/library/importlib.html#importlib.machinery.PathFinder" rel="nofollow noreferrer"><code>PathFinder</code></a>:</p>
<pre><code>import importlib.machinery

class CustomFinder(importlib.machinery.PathFinder):
    _path = ['/home/project']

    @classmethod
    def find_spec(cls, fullname, path=None, target=None):
        return super().find_spec(fullname, cls._path, target)
</code></pre>
<p>Here we explicitly tell the <code>PathFinder</code> to look into the <code>/home/project</code> when importing modules.</p>
<p>We can register the finder as follows:</p>
<pre><code>import sys
sys.meta_path.append(CustomFinder)
</code></pre>
<p>Then we can import the package <code>aaa</code> which will be found by the <code>CustomFinder</code>:</p>
<pre><code>import aaa
</code></pre>
<p>For more information see <a href="https://www.python.org/dev/peps/pep-0302/" rel="nofollow noreferrer">PEP-302</a>.</p>
<h1>Extend <code>sys.path</code></h1>
<p>We can modify <code>sys.path</code> in order to put the required package on the path:</p>
<pre><code>import sys

sys.path.append('/home/project')
import aaa
from aaa import whatever
# Optionally remove the added path.
sys.path.pop()
</code></pre>
<p>Appending this directory to the path won't block "existing" (e.g. built-in packages) with the same name due to the <a href="https://docs.python.org/3/reference/import.html#searching" rel="nofollow noreferrer">order of searching</a> that is performed during an import.</p>
<h1>Add a local module containing a <code>__path__</code></h1>
<p>You can add a local module <code>aaa.py</code> (in fact you can add it to any location which is on the Python path) which contains the following code:</p>
<pre><code>__path__ = ['/home/project/aaa']
</code></pre>
<p>Then you can perform <code>import</code> statements which will refer to the package that you referred to with the <code>__path__</code> variable:</p>
<pre><code>from aaa import whatever
</code></pre>
<p>If you want to <code>import aaa</code> you can mimic this by applying the same method one level up in the directory hierarchy. Add a local module <code>project.py</code> (for example) with the following code:</p>
<pre><code>__path__ = ['/home/project']
</code></pre>
<p>Then you can do</p>
<pre><code>from project import aaa
</code></pre>
<p>which is very much similar <code>import aaa</code> if <code>aaa</code> was on the path (provided that no other module named <code>project</code> has precedence on the path).</p>
<h1>Create a symlink pointing to the package</h1>
<p>You can create a symlink that points to the package's directory. For example on Unix:</p>
<pre><code>ln -s /home/project/aaa aaa
</code></pre>
<p>Then you can import the package via <code>import aaa</code>, given you're executing this in the directory where you placed the symlink.</p>
<p>The symlink can also be created within your program via</p>
<pre><code>import os

package = '/home/project/aaa'
target = os.path.split(package)[-1]  # For example.
if not os.path.exists(target):
    # `target_is_directory=True` is needed for Windows platform.
    os.symlink(package, target, target_is_directory=True)

# Now import the package.
aaa = __import__(target)
</code></pre>
<h1>Install the package via <a href="https://pypi.python.org/pypi/setuptools" rel="nofollow noreferrer"><code>setuptools</code></a></h1>
<p>You can add a <code>/home/project/setup.py</code> script which contains (for example) the following code:</p>
<pre><code>from setuptools import setup

setup(
    name='aaa',
    packages=[
        'aaa',
        # Add any sub-packages that `aaa` contains here.
    ]
)
</code></pre>
<p>Then you can install the package via <code>cd /home &amp;&amp; pip install -e project</code> and you can readily import it in your other Python files:</p>
<pre><code>import aaa
from aaa import whatever
</code></pre>
<p>By using <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer"><code>virtualenv</code></a> you can keep your installed packages in a clean state.</p>
</div>
<span class="comment-copy">LMGTFY: <a href="https://askubuntu.com/questions/470982/how-to-add-a-python-module-to-syspath/471168" title="how to add a python module to syspath">askubuntu.com/questions/470982/â€¦</a></span>
<span class="comment-copy">@EgorBiriukov: The questioner already knows how to add a directory to <code>sys.path</code>, and they have given a good reason to want a different option.</span>
<span class="comment-copy"><code>/home/project/aaa</code> is a directory, not a single file.</span>
<span class="comment-copy">@KilerdChan I updated my answer in order to clarify. All three methods work for your scenario (<code>aaa</code> being a directory). Modifying <code>sys.path</code> is probably the simplest one. I consider installing the package via <code>setuptools</code> &amp; <code>pip</code> the cleanest method. You mentioned in your question that you are worried about modifying <code>sys.path</code> shadowing existing (e.g. built-in packages) but it won't due to the <a href="https://docs.python.org/3/reference/import.html#searching" rel="nofollow noreferrer">search order</a> during an import. If you <i>append</i> to <code>sys.path</code> then the added location has the least priority.</span>
<span class="comment-copy">Thank you for such a detailed answer. I'm trying to figure out how to edit a project I cloned from github, and this was the missing piece!</span>
