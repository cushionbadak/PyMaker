<div class="post-text" itemprop="text">
<p>When I create a class instance, if I print the instance name, I get the memory address, like the code below:</p>
<pre><code>class Car(object):
    def __init__(self, color, model):
        self.color = color
        self.model = model

civic = Car('blue', 'civic')
print civic
</code></pre>
<p>The output is:</p>
<pre><code>&lt;Car object at 0x7fe4c4a1bfd0&gt;
</code></pre>
<p>I sense that I could do a lot with this information, but I can't find information of what I can do. For what I should use this memory address? I can store this to some database just referencing the memory address?
I appreciate any information of the possibilities for this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't. It's an opaque value, letting you distinguish between different instances. It <em>happens</em> to be the memory address, but that is an implementation detail.</p>
<p>What you see is the hex conversion of the return value of the <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer"><code>id()</code> function</a>:</p>
<blockquote>
<p>Return the “identity” of an object. This is an integer which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same id() value.</p>
<p><strong>CPython implementation detail</strong>: This is the address of the object in memory.</p>
</blockquote>
<p>Note the <em>implementation detail</em> note there.</p>
<p>The ID is included because just plain <code>&lt;Car object&gt;</code> is not nearly as helpful when you have more than one instance. You could also supply your own <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer"><code>__repr__</code> implementation</a> to make that string a little more useful <em>for your application</em>; you could make it return a reproducible expression, for example:</p>
<pre><code>def __repr__(self):
    return f'Car({self.color!r}, {self.model!r})'
</code></pre>
<p>Now the representation looks like this:</p>
<pre><code>&gt;&gt;&gt; Car('red', 'Ferrari')
Car('red', 'Ferrari')
</code></pre>
<p>which may be a little more helpful when you are debugging.</p>
</div>
<span class="comment-copy">You don't. It's an opaque value, letting you distinguish between different instances. It <i>happens</i> to be the memory address, but that is an implementation detail.</span>
<span class="comment-copy">Note, this is just the default implementation of <code>__str__</code> inherited from <code>__object__</code>. It's suppose to be generic, but you could implement your own <code>__str__</code>. Many classes do. So try <code>def __str__(self): return "i'm a Car string"</code></span>
<span class="comment-copy">I though that I could use this for some reason. Thanks!</span>
