<div class="post-text" itemprop="text">
<p>Here's the problem I'm trying to wrap my head around:</p>
<blockquote>
<p>We can use the idea of bisection search to determine if a character
  is in a string, so long as the string is sorted in alphabetical order.</p>
<p>First, test the middle character of a string against the character
  you're looking for (the "test character"). If they are the same, we
  are done - we've found the character we're looking for!</p>
<p>If they're not the same, check if the test character is "smaller" than
  the middle character. If so, we need only consider the lower half of
  the string; otherwise, we only consider the upper half of the string.
  (Note that you can compare characters using Python's &lt; function.)</p>
<p>Implement the function isIn(char, aStr) which implements the above
  idea recursively to test if char is in aStr. char will be a single
  character and aStr will be a string that is in alphabetical order. The
  function should return a boolean value.</p>
<p>As you design the function, think very carefully about what the base
  cases should be.</p>
</blockquote>
<p>Here's the code I tried to do. I'm getting errors, but I'm falling behind in understanding the basics of how to do this problem.</p>
<pre><code>def isIn(char, aStr):
    '''
    char: a single character
    aStr: an alphabetized string

    returns: True if char is in aStr; False otherwise
    '''
    # Your code here
    middle_char = len(aStr)/2
    if char == middle_char:
        True
    elif char == "" or char == 1:
        False
    elif char &lt; aStr[:middle_char]: 
        return isIn(char,aStr(middle_char)
    else: 
        return isIn(char, aStr(middle_char))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One reason you're falling behind is that you're trying to write a recursive function when you haven't yet mastered writing simple statements.  You have about 10 lines of active code here, including at least four syntax errors and two semantic errors.</p>
<p>Back off and use incremental programming.  Write a few lines of code, test them, and don't advance until you're sure they work as expected.  Insert diagnostic <code>print</code> statements to check values as you go.  For instance, start with force-fed values and no actual function call, like this:</p>
<pre><code># def isIn(char, aStr):
'''
char: a single character
aStr: an alphabetized string

returns: True if char is in aStr; False otherwise
'''

char = 'q'
aStr = "abcdefghijklmnopqrstuvwxyz"
print "parameters:", char, aStr

middle_char = len(aStr)/2
print len(aStr), middle_char

print "if", char, "==", middle_char, ":"
</code></pre>
<p>This gives you the output</p>
<pre><code>parameters: q abcdefghijklmnopqrstuvwxyz
26 13
if q == 13 :
</code></pre>
<p>Obviously, a character is <em>not</em> going to equal the integer 13.
Fix this before you go any further.  <em>Then</em> you can try actually writing your first <code>if</code> statement.</p>
<p>See how that works?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>middle_char = len(aStr)/2
 if char == middle_char:
</code></pre>
<p>Middle char is half the length (I.e. an integer value)
It's not going to be equal to your char value.</p>
<pre><code>middle_index = len(aStr)//2
middle_char = aStr[middle_index]
</code></pre>
<p>to actually get the middle char value.  Note the integer division (<code>//</code>). we want to make sure that the resulting index is a whole number.</p>
<pre><code>elif char == "" or char == 1:
</code></pre>
<p>you've already tested (well tried to) the case where there is one char left, you dont need to handle that specifically.  You also need to test for empty string <em>before</em> you try extracting values.</p>
<pre><code>elif char &lt; aStr[:middle_char]: 
</code></pre>
<p>here you actually do try and index into the string.  unfortunately, what you are actually doing is slicing it, and seeing if the secind hald of the string (middle character onwards) is equal to your <code>char</code>. this will only ever match if you are looking at a one character string. e.g. <code>isin('d', 'd')</code></p>
<pre><code>    return isIn(char,aStr(middle_char)
else: 
    return isIn(char, aStr(middle_char))
</code></pre>
<p>-  Missing parenthesis on the first return <code>)</code>
 -  <code>aStr()</code> is not a function. you need <code>[</code> and <code>]</code>
 - you are trying to pass just a single char into the recursive call. you need to slice the string and pass the resulting sub-string into the recursive string
 - both of these (ignoring the missing bracket) are identical calls. you need one to call with the first half of <code>aStr</code> and one with the second half.</p>
<p>Your task says to think about the base cases. They are (I'm listing them because you almost got them spot on):
 - empty string (return <code>False</code>)
 - mid char = search char (return <code>True</code>)
 - mid char &gt; search char (search left substring)
 - mid char &lt; search char (search right substring)</p>
<p>note that there is no need to explicitly check for a non matching string with a length of 1, as that will pass an empty string into the next call</p>
<p>something for you to think about: why does the string need to be sorted? what happens if the string isnt sorted?</p>
<p>a working implementation:</p>
<pre><code>def isin (char, str):
    if not str: 
        return False
    mid_index = len(str)/2
    mid_char = str[mid_index]
    return True if mid_char == char else isin(char, str[:mid_index] if mid_char &gt; char else str[mid_index+1:])
</code></pre>
<p><strong>DO NOT</strong> just use this code. This code is just for your reference so you can understand what it is doing and rewrite you code once you understand. There is no point in just copying the code if you dont understand it. It wont help you in the future.</p>
<p>You do seem to have the general idea of what you need to do (I'm guessing you have gone over this in class), but are lacking knowlege in the <em>how</em> (syntax etc).</p>
<p>I recommend going through <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">the python tutorial</a> in your own time, doing the exercises it takes you through.  It will introduce you to the features of the language in turn and this will really help you.</p>
<p>good luck!</p>
</div>
<span class="comment-copy">Welcome to StackOverflow.  Please read and follow the posting guidelines in the help documentation.  <a href="http://stackoverflow.com/help/mcve">Minimal, complete, verifiable example</a> applies here.  We cannot effectively help you until you post your MCVE code and accurately describe the problem. We should be able to paste your posted code into a text file and reproduce the problem you described.</span>
<span class="comment-copy">We can see the assignment you've been assigned, but what question are <i>you</i> asking <i>us</i>?</span>
