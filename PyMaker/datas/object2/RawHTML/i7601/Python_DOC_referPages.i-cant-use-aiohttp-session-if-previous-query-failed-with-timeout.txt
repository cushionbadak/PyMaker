<div class="post-text" itemprop="text">
<p>I have a simple script that create async tasks for loading different pages. The first request fails with TimeoutError, and it causes next queries to fail too. But the second one has much longer timeout and should pass.</p>
<p>Is it possible let other queries don't fail?</p>
<pre><code>import aiohttp
import asyncio
import logging


logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s %(name)s %(levelname)s %(message)s')


async def main():
    asyncio.ensure_future(
        load_page('https://www.netflix.com:5000'))

    asyncio.ensure_future(
        load_page('http://bash.im/', 10))

    asyncio.ensure_future(
        load_page('https://myshows.me/'))

    asyncio.ensure_future(
        load_page('http://www.lostfilm.tv/'))


async def load_page(url, timeout=3):
    try:
        async with session.get(url, timeout=timeout) as response:
            text = await response.text()
            print(len(text))

    except Exception:
        logging.warning(type(e))


if __name__ == '__main__':
    loop = asyncio.get_event_loop()

    conn = aiohttp.TCPConnector(limit=1)
    session = aiohttp.ClientSession(connector=conn, loop=loop)

    asyncio.ensure_future(main())
    loop.run_forever()
</code></pre>
<p>Log:</p>
<pre><code>2017-06-26 13:57:37,869 asyncio DEBUG Using selector: EpollSelector
2017-06-26 13:57:41,780 root WARNING &lt;class 'concurrent.futures._base.TimeoutError'&gt;
2017-06-26 13:57:41,780 root WARNING &lt;class 'concurrent.futures._base.TimeoutError'&gt;
2017-06-26 13:57:41,780 root WARNING &lt;class 'concurrent.futures._base.TimeoutError'&gt;
2017-06-26 13:57:48,780 root WARNING &lt;class 'concurrent.futures._base.TimeoutError'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, It's possible. I rewrite your code and use some of this concept to fill your's requests:</p>
<ul>
<li><p>I used <code>itertools.starmap</code> in order to pass multiple arguments and create a list of each arguments which passed to the <code>load_page</code> function.</p></li>
<li><p>I used <code>asyncio.gather</code> in order to wrap the tasks together, and used changed the return_exceptions flag to true to ensure that the exceptions won't raised.</p></li>
<li><p>Changed the <code>async</code> before the <code>def main</code>. It returns the gathered tasks right now.</p></li>
<li><p>I closed the loop in the end.</p></li>
</ul>
<p>The code:</p>
<pre><code>import aiohttp
import asyncio
import logging
import itertools

logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s %(name)s %(levelname)s %(message)s')

def main(session):
    args = [
        ('https://www.netflix.com:5000', session,),
        ('http://bash.im/', session, 10),
        ('https://myshows.me/', session,),
        ('http://www.lostfilm.tv/', session,),
    ]
    tasks = itertools.starmap(load_page, args)
    futures = map(asyncio.ensure_future, tasks)

    return asyncio.gather(*futures, return_exceptions=True)


async def load_page(url, session, timeout=3):
    try:
        async with session.get(url, timeout=timeout) as response:
            text = await response.text()
            print(len(text))
    except Exception:
        logging.warning(type(e))


if __name__ == '__main__':
    loop = asyncio.get_event_loop()

    conn = aiohttp.TCPConnector(limit=1)
    session = aiohttp.ClientSession(connector=conn, loop=loop)
    loop.run_until_complete(main(session))
    loop.close()
</code></pre>
<p>For more reading about: <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.gather" rel="nofollow noreferrer">asyncio.gather</a>.</p>
<p>For more reading about: <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow noreferrer">itertools.starmap</a>.</p>
<p>Enjoy!</p>
</div>
<span class="comment-copy">Thanks for <code>asyncio.gather</code> function. But my main issue still exists: all 4 queries fail with timeout</span>
<span class="comment-copy">@DmitryTolkach for my they don't.... what is the output from my program run in your's computer?</span>
<span class="comment-copy"><code>2017-06-29 00:39:07,027 asyncio DEBUG Using selector: EpollSelector 2017-06-29 00:39:10,356 root WARNING &lt;class 'concurrent.futures._base.TimeoutError'&gt; 2017-06-29 00:39:10,356 root WARNING &lt;class'concurrent.futures._base.TimeoutError'&gt; 2017-06-29 00:39:10,356 root WARNING &lt;class 'concurrent.futures._base.TimeoutError'&gt; 2017-06-29 00:39:17,355 root WARNING &lt;class 'concurrent.futures._base.TimeoutError'&gt;</code></span>
