<div class="post-text" itemprop="text">
<p>Python doc says that slicing a list returns a new list.
Now if a "new" list is being returned I've the following doubts related to "Assignment to slices"</p>
<pre><code>a = [1, 2, 3]
a[0:2] = [4, 5]
print a
</code></pre>
<p>Now the output would be:</p>
<pre><code>[4, 5, 3] 
</code></pre>
<ol>
<li>How can something that is returning something come on the left side of expression.</li>
<li>Yes, I read the docs and it says it is possible, now since slicing a list returns a "new" list,why is the original list being modified, I am not able to understand the mechanics behind it.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You are confusing two distinct operation that use very similar syntax:</p>
<p><strong>1) slicing:</strong></p>
<pre><code>b = a[0:2]
</code></pre>
<p>This makes a copy of the slice of <code>a</code> and assigns it to <code>b</code>.</p>
<p><strong>2) slice assignment:</strong></p>
<pre><code>a[0:2] = b
</code></pre>
<p>This <em>replaces</em> the slice of <code>a</code> with the contents of <code>b</code>.</p>
<p>Although the syntax is similar (I imagine by design!), these are two different operations.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you specify <code>a</code> on the left side of the <code>=</code> operator, you are using Python's <strong>normal assignment</strong>, which changes the name <code>a</code> in the current context to point to the new value.  This does not change the previous value to which <code>a</code> was pointing.</p>
<p>By specifying <code>a[0:2]</code> on the left side of the <code>=</code> operator, you are telling Python you want to use <strong>Slice Assignment</strong>.  Slice Assignment is a special syntax for lists, where you can insert, delete, or replace contents from a list:</p>
<p><strong>Insertion</strong>:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; a[0:0] = [-3, -2, -1, 0]
&gt;&gt;&gt; a
[-3, -2, -1, 0, 1, 2, 3]
</code></pre>
<p><strong>Deletion</strong>:</p>
<pre><code>&gt;&gt;&gt; a
[-3, -2, -1, 0, 1, 2, 3]
&gt;&gt;&gt; a[2:4] = []
&gt;&gt;&gt; a
[-3, -2, 1, 2, 3]
</code></pre>
<p><strong>Replacement</strong>:</p>
<pre><code>&gt;&gt;&gt; a
[-3, -2, 1, 2, 3]
&gt;&gt;&gt; a[:] = [1, 2, 3]
&gt;&gt;&gt; a
[1, 2, 3]
</code></pre>
<p>Note:</p>
<blockquote>
<p>The length of the slice may be different from the length of the
  assigned sequence, thus changing the length of the target sequence, if
  the target sequence allows it. - <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="noreferrer"><em>source</em></a></p>
</blockquote>
<p>Slice Assignment provides similar function to <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="noreferrer">Tuple Unpacking</a>.  For example, <code>a[0:1] = [4, 5]</code> is equivalent to:</p>
<pre><code># Tuple Unpacking
a[0], a[1] = [4, 5]
</code></pre>
<p>With Tuple Unpacking, you can modify non-sequential lists:</p>
<pre><code>&gt;&gt;&gt; a
[4, 5, 3]
&gt;&gt;&gt; a[-1], a[0] = [7, 3]
&gt;&gt;&gt; a
[3, 5, 7]
</code></pre>
<p>However, tuple unpacking is limited to replacement, as you cannot insert or remove elements.</p>
<p>Before and after all these operations, <code>a</code> is the same exact list.  Python simply provides nice syntactic sugar to modify a list in-place.</p>
</div>
<div class="post-text" itemprop="text">
<p>I came across the same question before and it's related to the language specification. According to <a href="http://docs.python.org/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">assignment-statements</a>,</p>
<ol>
<li><p>If the left side of assignment is subscription, Python will call <a href="https://docs.python.org/2/reference/datamodel.html#object.__setitem__" rel="nofollow noreferrer"><code>__setitem__</code></a> on that object. <code>a[i] = x</code> is equivalent to <code>a.__setitem__(i, x)</code>.</p></li>
<li><p>If the left side of assignment is slice, Python will also call <code>__setitem__</code>, but with different arguments:
<code>a[1:4]=[1,2,3]</code> is equivalent to 
<code>a.__setitem__(slice(1,4,None), [1,2,3])</code></p></li>
</ol>
<p>That's why list slice on the left side of '=' behaves differently.</p>
</div>
<div class="post-text" itemprop="text">
<p>By slicing on the left hand side of an assignment operation, you are specifying which items to assign to.</p>
</div>
<span class="comment-copy">@Mark Longair sorry I thought only code is supposed to be formatted not the output</span>
<span class="comment-copy">See: <a href="http://docs.python.org/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">6.2 Assignment statements</a></span>
<span class="comment-copy">Do you understand what <code>a[0] = 4</code> would do?</span>
<span class="comment-copy">@KartikAnand Slice assignment is a special scenario where a new list is not created.  It doesn't make sense to create an object without a name binding on the left side of an <code>=</code>, so instead of discarding this as invalid syntax, python turns it into something more like what you might expect.  Since python does not have references, it would not work to have the result of a slice change the original list.  You get a copy.  If you provided more info on your application, we might be able to better help you do things in the 'pythonic' way. :)</span>
<span class="comment-copy">@Darthfett I am not working on any application right now rather I am teaching myself python before I start getting my hands dirty :)</span>
<span class="comment-copy">That's what my doubt is,in the second case,why isn't the slice of a, a new list??</span>
<span class="comment-copy">@KartikAnand Because it isn't. That's not what the language specifies.</span>
<span class="comment-copy">To be clear, "takes a slice of" really means "make a copy of a slice of" which is where part of the confusion comes from.</span>
<span class="comment-copy">so the difference is because of which side I am using slice(left or right;assignment operator)..and using it on the left side is in effect not returning anything.</span>
<span class="comment-copy">@KartikAnand: Basically, yes. The interpreter knows which is which, and handles them appropriately.</span>
<span class="comment-copy">Similar but not identical, since you can have unequal numbers of elements on the left and right.</span>
<span class="comment-copy">@MarkRansom That's an excellent point, I have added more info to make this obvious.</span>
<span class="comment-copy">Is <code>a[:] = some_list</code> equivalent to <code>a = some_list[:]</code> or <code>a = some_list</code>?</span>
<span class="comment-copy">@jadkik94 Neither.  <code>a[:] = some_list</code> sets every element of <code>a</code> to be those of <code>some_list</code>.  Doing either of the ones you mention would change what <code>a</code> is.  For example: <code>a = [1, 2, 3]</code> <code>b = a</code> <code>a[:] = [4, 5, 6]</code> <code>a is b</code>.  The last line would be False if it changed <code>a</code>'s value, rather than mutating it.</span>
<span class="comment-copy">@Darthfett Interesting, I had found otherwise :) Thanks.</span>
