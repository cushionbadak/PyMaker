<div class="post-text" itemprop="text">
<p>I have a dataframe :</p>
<pre><code>A            B
10.1        33.3
11.2        44.2s
12.3        11.3s
14.2s       *
15.4s       nan
</code></pre>
<p>i want output as </p>
<pre><code>A            B
10.1        33.3
11.2        44.2
12.3        11.3
14.2          0
15.4         0
</code></pre>
<p>How do I remove these tailing alphabets </p>
<p>I have tried this code </p>
<p>1st approach: </p>
<pre><code>bulb_temp_df['A'].str.extract('(\d)').astype(float)
bulb_temp_df['B'].str.extract('(\d)').astype(float)
</code></pre>
<p>2nd approach:</p>
<pre><code>bulb_temp_df['A'] = 
bulb_temp_df['A'].astype(str)
bulb_temp_df['A'] = 
bulb_temp_df['A'].map(lambda x: x.rstrip('aAbBcC'))
</code></pre>
<p>These are not working. They are not removing the tailing s from the columns. </p>
<p>third approach </p>
<pre><code>bulb_temp_df[cols]=bulb_temp_df[cols].apply(lambda x:x.str.extract('(\d+\.\d+)',expand=False)
                                .astype(float)
                                .fillna(0))`
</code></pre>
<p>All these are not working. The last one removes the tailing s but it converts the values without 's' to zero or nan. </p>
</div>
<div class="post-text" itemprop="text">
<p>First, IÂ´m going to create a reproducible example:</p>
<pre><code>from io import StringIO
import re
import numpy as np
import pandas as pd

s = StringIO('''\
       A           B
1   10.1        33.3
2   11.2       44.2s
3   12.3       11.3s
4   14.2s          *
5   15.4s        nan
''')


df = pd.read_table(s, sep='\s\s+',engine='python')
df['A'] = df['A'].astype(str)
df['B'] = df['B'].astype(str)
</code></pre>
<p>Now, you can use regex and <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub</code></a>:    </p>
<pre><code>df = df.applymap(lambda x: re.sub(r'[^0-9^\-\.]+', '', x)).replace('', np.float64(0)).astype('float64') 

print(df)
</code></pre>
<p><strong>Output:</strong></p>
<blockquote>
<pre><code>      A     B
1  10.1  33.3
2  11.2  44.2
3  12.3  11.3
4  14.2   0.0
5  15.4   0.0
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>This isn`t super clean, but it works!</p>
<pre><code>import re
import pandas as pd

def cleanup(df, column):
    temp = str(df[column])
    vals = re.split("(\d+\.\d+|\*|NaN)", temp)[1::2]
    out = [float(a.replace('*', '0').replace('NaN', '0')) for a in vals]

    return out

bulb_temp_df = pd.DataFrame(data=list(zip(cleanup(bulb_temp_df, 'A'), cleanup(bulb_temp_df, 'B'))), columns=['A', 'B'])
</code></pre>
<p>What this does is it makes a new pandas dataframe with the formatted data. It formats it by searching for the regex <code>(\d+\.\d+|\*|NaN)</code> which will find all floats, *'s or NaN's. Using this regex, we split the column which is turned into a string based on finding one of the 3 mentioned patterns. Then we take every odd index, since that holds what were interested in.</p>
<p>Now, we have a list of strings on the floats without s, and the * and Nans. the list comprehension replaces all the *'s and NaN's with 0 and casts all the elements to float (since they are still strings).</p>
<p>Not elegant, but it works!</p>
</div>
<div class="post-text" itemprop="text">
<p>I found this to be a simple approach (as answered <a href="https://stackoverflow.com/a/49536987/3502341">here</a>)-<br/>
Use <code>replace</code> to retain only the digits (and <code>dot</code> and <code>minus</code> sign).<br/>
This would remove characters, alphabets or anything that is not defined in <code>to_replace</code> attribute.</p>
<p>So, the solution is:<br/>
<code>df['A1'].replace(regex=True, inplace=True, to_replace=r'[^0-9.\-]', value=r'']</code><br/>
<code>df['A1'] = df['A1'].astype(float64)</code> </p>
</div>
<span class="comment-copy">Try to strip data after used <code>rstrip</code>. Example <code>x.rstrip('aAbBcC').strip()</code></span>
<span class="comment-copy">Thought this was an r question so if you know how to use that you can just do this <code>x2&lt;-gsub("[^0-9.]", "", as.character(unlist(x)));x2[x2==""]&lt;-0;x3&lt;-matrix(as.numeric(x2),5,2);colnames(x3)&lt;-c("A","B");x3</code>.</span>
