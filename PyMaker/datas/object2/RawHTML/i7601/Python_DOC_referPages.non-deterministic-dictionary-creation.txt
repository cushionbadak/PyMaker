<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/14956313/why-is-dictionary-ordering-non-deterministic">Why is dictionary ordering non-deterministic?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I have the following <code>testcase_dict.py</code> script:</p>
<pre><code>print([{x: 'hello', 'x': 'y'} for x in [1, 2]])
</code></pre>
<p>I run this script, and every 15 times, 2-4 times it gives me distincted results:</p>
<pre><code> $ for i in $(seq 15); do python testcase_dict.py; done
[{1: 'hello', 'x': 'y'}, {2: 'hello', 'x': 'y'}]
[{1: 'hello', 'x': 'y'}, {2: 'hello', 'x': 'y'}]
[{1: 'hello', 'x': 'y'}, {'x': 'y', 2: 'hello'}]
[{1: 'hello', 'x': 'y'}, {2: 'hello', 'x': 'y'}]
[{1: 'hello', 'x': 'y'}, {2: 'hello', 'x': 'y'}]
[{1: 'hello', 'x': 'y'}, {2: 'hello', 'x': 'y'}]
[{'x': 'y', 1: 'hello'}, {'x': 'y', 2: 'hello'}]
[{1: 'hello', 'x': 'y'}, {2: 'hello', 'x': 'y'}]
[{1: 'hello', 'x': 'y'}, {'x': 'y', 2: 'hello'}]
[{1: 'hello', 'x': 'y'}, {2: 'hello', 'x': 'y'}]
[{1: 'hello', 'x': 'y'}, {2: 'hello', 'x': 'y'}]
[{1: 'hello', 'x': 'y'}, {'x': 'y', 2: 'hello'}]
[{'x': 'y', 1: 'hello'}, {'x': 'y', 2: 'hello'}]
[{1: 'hello', 'x': 'y'}, {2: 'hello', 'x': 'y'}]
[{1: 'hello', 'x': 'y'}, {2: 'hello', 'x': 'y'}]
</code></pre>
<p>Why this happens and how can I prevent it. This may be a reason of some raise conditions which are strongly unwelcome.</p>
<p>My Python version is 3.5.2.</p>
<p>My question DOES NOT regard specific order, just deterministic one.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>dict</code> is not  ordered, and can display arbitrary ordering.... you should read about <code>collections.OrderedDict</code>: <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer">https://docs.python.org/3/library/collections.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Although dictionaries are deterministically ordered in Python from version 3.6 on (but not before), you should not rely on that fact.</p>
<p>If you need a dictionary like type that guarantees order, use <code>collections.OrderedDict</code> or sort the keys before iterating over them.</p>
<p>"Ordered" in both cases means: <a href="https://docs.python.org/2/library/collections.html" rel="nofollow noreferrer">remembers the order entries were added</a>.</p>
</div>
<span class="comment-copy">I realize dictionaries are not ordered and I do not need <code>OrderedDict</code>. I would like to have only deterministic order. There is nothing random here.</span>
<span class="comment-copy">Then use a list of tuples?</span>
<span class="comment-copy">@pt12lol you might be interested in the information in the answers for this question: <a href="https://stackoverflow.com/questions/9010222/how-can-python-dict-have-multiple-keys-with-same-hash" title="how can python dict have multiple keys with same hash">stackoverflow.com/questions/9010222/â€¦</a></span>
<span class="comment-copy">@pt12lol&gt; dicts are not ordered. This means the have NO ORDER. Therefore they cannot have a deterministic order. If you want to <b>display</b> them in a specific order, you must order the keys by yourself.</span>
<span class="comment-copy">@spectras ok, but still iteration through keys is not deterministic.</span>
<span class="comment-copy"><code>dict</code>s are ordered from 3.6 on (unofficially in some versions of 3.5, I think)</span>
<span class="comment-copy">@hop which is not to be relied on, as stressed many times by core devs since it is an implementation detail and not a language feature. The only thing that <i>can</i> be relied on in 3.6 in this regard is the presevredorder of class attributes and functions kwargs.</span>
<span class="comment-copy">@a_guest: sounds like you are confusing "sorted" and "ordered". in principle one and the same <code>dict</code> (used to be) is free to return keys in an ordered whenever you call <code>.keys()</code> or similar. that they don't is just an implementation detail. also, since recreating the "same key-value pairs" might not be possible, the distinction is moot.</span>
<span class="comment-copy">@DeepSpace: which you can read in my answer. "dict is not ordered" is simply a false statement.</span>
<span class="comment-copy">I realize dictionaries are not ordered and I do not need OrderedDict. I would like to have only deterministic order. There is nothing random in my script.</span>
<span class="comment-copy">@pt12lol: there, fixed it for you.</span>
<span class="comment-copy">why the downvote?</span>
<span class="comment-copy">Because it is not an answer to my question at all.</span>
<span class="comment-copy">@pt12lol&gt; your question is meaningless. Something that is unordered, that is which has no order cannot have a deterministic order.</span>
