<div class="post-text" itemprop="text">
<p>How would I go about creating a new list of running totals from another list? Let's say I have the following query:</p>
<pre><code>sumbl4 = LaborDetail.objects.filter(businessunit='Birmingham').filter(endofweek__gte=datetime.date.today()-datetime.timedelta(days=60)).values_list('endofweek').annotate(hours__sum=Sum('hours')).order_by('endofweek')

sumbl3 = json.dumps(list(sumbl4), cls=DecimalJSONEncoder)
</code></pre>
<p>And my data is in this format (sumbl3):</p>
<pre><code>[["2017/04/23", 972.5], ["2017/04/30", 1076.5], ["2017/05/07", 1162.5], ["2017/05/14", 1055.5], ["2017/05/21", 981.0], ["2017/05/28", 945.5], ["2017/06/04", 912.0], ["2017/06/11", 1106.0], ["2017/06/18", 1059.0]]
</code></pre>
<p>So my new list would look like:</p>
<pre><code>[["2017/04/23", 972.5], ["2017/04/30", 2049],...
</code></pre>
<p>Note: I am using Python 2.7</p>
</div>
<div class="post-text" itemprop="text">
<p>How about this:</p>
<pre><code>orig = [["2017/04/23", 972.5], ["2017/04/30", 1076.5], ["2017/05/07", 1162.5], ["2017/05/14", 1055.5], ["2017/05/21", 981.0], ["2017/05/28", 945.5], ["2017/06/04", 912.0], ["2017/06/11", 1106.0], ["2017/06/18", 1059.0]]

new = []
temp_sum = 0
for o in orig:
  a = o[0]
  b = o[1] + temp_sum
  new.append([a, b])
  temp_sum += b

print new
</code></pre>
<p>Result:</p>
<pre><code>[['2017/04/23', 972.5], ['2017/04/30', 2049.0], ['2017/05/07', 4184.0], ['2017/05/14', 8261.0], ['2017/05/21', 16447.5], ['2017/05/28', 32859.5], ['2017/06/04', 65685.5], ['2017/06/11', 131565.0], ['2017/06/18', 263083.0]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way to have you final list:</p>
<pre><code>a = [['2017/04/23', 972.5],
 ['2017/04/30', 1076.5],
 ['2017/05/07', 1162.5],
 ['2017/05/14', 1055.5],
 ['2017/05/21', 981.0],
 ['2017/05/28', 945.5],
 ['2017/06/04', 912.0],
 ['2017/06/11', 1106.0],
 ['2017/06/18', 1059.0]]


sub = [a[0]]

for k, v in a[1:]:
    b = sub[-1][1] + v
    sub.append([k, b])

print(sub)

&gt;&gt;&gt; [['2017/04/23', 972.5],
 ['2017/04/30', 2049.0],
 ['2017/05/07', 3211.5],
 ['2017/05/14', 4267.0],
 ['2017/05/21', 5248.0],
 ['2017/05/28', 6193.5],
 ['2017/06/04', 7105.5],
 ['2017/06/11', 8211.5],
 ['2017/06/18', 9270.5]]
</code></pre>
<p>Or in a more compact way, you can create a method/function like this example:</p>
<pre><code>def get_sum(a):
    sub = []
    for k, v in a:
        if not sub:
            sub.append([k, v])
        else:
             sub.append([k, sub[-1][1] +v])
    return sub
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a> is not included in Python 2.7, you can use the recipe provided in the docs.</p>
<pre><code>import operator

def accumulate(iterable, func=operator.add):
    'Return running totals'
    # accumulate([1,2,3,4,5]) --&gt; 1 3 6 10 15
    # accumulate([1,2,3,4,5], operator.mul) --&gt; 1 2 6 24 120
    it = iter(iterable)
    try:
        total = next(it)
    except StopIteration:
        return
    yield total
    for element in it:
        total = func(total, element)
        yield total
</code></pre>
<p>Then, it's usage would look like:</p>
<pre><code>data = [(1, 1), (2, 2), (3, 3)]

keys, values = zip(*data)
accumulated_data = zip(keys, accumulate(values))
# [(1, 1), (2, 3), (3, 6)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This solution gave me what I was looking for: </p>
<pre><code>sumbl4 = LaborDetail.objects.filter(businessunit='Birmingham').filter(endofweek__gte=datetime.date.today()-datetime.timedelta(days=60)).values_list('endofweek').annotate(hours__sum=Sum('hours')).order_by('endofweek')

sumbl3 = json.dumps(list(sumbl4), cls=DecimalJSONEncoder)

list_of_running_totals = []
running_total = 0
for date, amount in sumbl4:
    running_total += amount
    list_of_running_totals.append([date, running_total])
print list_of_running_totals
</code></pre>
</div>
<span class="comment-copy">Jacob, this is close, but not quite right. 2017/4/30 is correct at 2049, but 2017/05/07 is incorrect because it adds 2049, 972.5 and 1162.5. It should only add the previous sum value, so 2049 + 1162.5</span>
<span class="comment-copy">Chiheb, this is close, but not quite right. 2017/4/30 is correct at 2049, but 2017/05/07 is incorrect because it adds 2049, 972.5 and 1162.5. It should only add the previous sum value, so 2049 + 1162.5</span>
<span class="comment-copy">@Matt look now, i've updated my answer.</span>
<span class="comment-copy">Jared, thank you for the answer. I posted the solution that worked.</span>
