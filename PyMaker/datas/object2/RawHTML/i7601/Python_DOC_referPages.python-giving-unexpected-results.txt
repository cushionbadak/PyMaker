<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6074018/why-does-the-expression-0-0-0-return-false-in-python">Why does the expression 0 &lt; 0 == 0 return False in Python?</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>I came across a very confusing problem on a website for speed learning Python. It's about the operand != and how it works. The result/outcome of using != between 3 operands baffles me and my classmates. We have tried to search around and couldn't find any discussion/explanation on this. Please help. 
Specifically, please see below:</p>
<blockquote>
<p>True != False != 1</p>
</blockquote>
<p>output: True</p>
<blockquote>
<p>True != False != True</p>
</blockquote>
<p>output: True</p>
<blockquote>
<p>True is not False is not True</p>
</blockquote>
<p>output: True</p>
<p>Breaking down the first statement step by step, True!=False should be evaluated first to yield a True. This True is then compared against 1 using != again. True != 1 should yield a False. Therefore the entire statement should evaluate to False! But instead a True is produced. </p>
<p>Breaking down the second statement step by step, True!=False should yield True, then this True != True should yield a False. The statement should evaluate to False !But instead a True is produced. </p>
<p>Likewise for the third statement.</p>
<p>Trying the exact same statements in Javascript and JAVA both gave the expected result - False, which makes complete sense. Python however, is the exception.</p>
<p>Note: We know that explicitly forcing the order of the operation by putting parentheses around two of operands gives the "right" result (which is False).We just can't understand why it's the way it is without parentheses.</p>
<p>Any help would be much appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is because a != b != c is equivalent to a != b and b != c.</p>
<p>It is called chained comparison and you can find more info here:
<a href="https://docs.python.org/3/reference/expressions.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/expressions.html</a></p>
</div>
<span class="comment-copy">You are chaining comparison operators. <code>True != False != 1</code> is executed as <code>(True != False)  and (False != 1)</code>, <code>True != False != True</code> is executed as <code>(True != False) and (False != True)</code>, etc.</span>
<span class="comment-copy">Why should <code>True != 1</code> yield false?</span>
<span class="comment-copy">In other words, your breakdown is incorrect. That's not how chained comparisons work.</span>
<span class="comment-copy">@AdamHughes: <code>True == 1</code> is true, so <code>True != 1</code> is indeed false. So a better question is: why do you think it shouldn't?</span>
<span class="comment-copy">Dep, thanks must need a coffee</span>
<span class="comment-copy">I got it ,thanks a lot!!</span>
