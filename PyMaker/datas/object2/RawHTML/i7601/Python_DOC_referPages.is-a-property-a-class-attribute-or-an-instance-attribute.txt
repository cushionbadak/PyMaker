<div class="post-text" itemprop="text">
<p>From Python in a Nutshell</p>
<blockquote>
<p>A property is an instance attribute with special functionality.
  ...</p>
<p>Hereâ€™s one way to define a read- only property:</p>
<pre><code>class Rectangle(object):
    def __init__(self, width, height):
        self.width = width
        self.height = height
    def get_area(self):
        return self.width * self.height
    area = property(get_area, doc='area of the rectangle')
</code></pre>
<p><strong>Each instance  r  of class  Rectangle  has a synthetic read-only
  attribute  r.area</strong> , computed on the fly in method  r.get_area()  by
  multiplying the sides.</p>
</blockquote>
<p>Is a property a class attribute or an instance attribute? </p>
<ol>
<li><p>Does the above quote imply that a property is an instance attribute?</p></li>
<li><p>A property is always defined inside the definition of a class, so is a property a class attribute.</p></li>
<li><p>Does <code>Rectangle.__dict__</code> store the class attributes and an    <code>Rectangle</code> instance's <code>__dict__</code> store the instance attributes? If    yes, then does the following show that the property is a class    attribute instead of an instance attribute:</p></li>
</ol>
<pre><code>&gt;&gt;&gt; Rectangle.__dict__    
mappingproxy({..., 'area': &lt;property object at 0x7f34f7ee2818&gt;})
&gt;&gt;&gt; r=Rectangle(2,3)
&gt;&gt;&gt; r.__dict__    {'width': 2, 'height': 3} 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>property</code></a> object itself is a class attribute, as its position inside the class body implies; you can still access class attributes on instances, though, just not vice versa.</p>
<p>What makes the property different is the <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor protocol</a>; in the case of accessing <code>r.area</code>, the following (roughly) happens:</p>
<ul>
<li>Python looks for the attribute on the instance, and doesn't find it; then</li>
<li>Python looks for the attribute on the instance's type, and does find it; then</li>
<li>Python finds that the resulting value implements <code>__get__</code>, so;</li>
<li>Python invokes that method with the instance and the class.</li>
</ul>
<p>What actually gets called is therefore:</p>
<pre><code>Rectangle.area.__get__(r, Rectangle)
</code></pre>
<p>This is how the property descriptor accesses the instance's state while actually being an attribute on the class; the instance is passed into it. You can tell it's a class attribute because it's accessible on the class, without creating any instances:</p>
<pre><code>&gt;&gt;&gt; Rectangle.area
&lt;property object at 0x...&gt;
</code></pre>
</div>
<span class="comment-copy">The property object itself is an attribute of the class, that's how it works (see <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">docs.python.org/3/howto/descriptor.html</a>). I guess that's why it's referred to as <i>synthetic</i>. Please ask one thing at a time and do research (see e.g. <a href="https://stackoverflow.com/q/20201029/3001761">stackoverflow.com/q/20201029/3001761</a> for the second question I've removed).</span>
<span class="comment-copy">Thanks. (1) Does "synthetic" mean class attribute? (2) Does <code>r.area </code>imply <code>area</code> is an instance attribute of instance <code>r</code>?</span>
<span class="comment-copy">I not sure I understand either of those questions. 1. Synthetic means artificial. 2. You're accessing it on the instance, sure, but you can always do that with class attributes.</span>
<span class="comment-copy">"synthetic" just seems like a word choice by whoever wrote those docs to indicate "not really". <code>r.area</code>, if it returns something, implies that <code>area</code> is an attribute of the instance, <i>or</i> the class, or <i>any of the classes in the MRO</i></span>
<span class="comment-copy">See my edit. I just found the book said "A property is an instance attribute with special functionality." Also do <code>__dict__</code> of the class and of an instance store class attributes and instance attributes respectively?</span>
<span class="comment-copy">@Tim <i>the <code>property</code> object</i> is a class attribute, as I state in my answer, as its definition tells you and, yes, as which <code>__dict__</code> it's in demonstrates.</span>
<span class="comment-copy">Thanks. Is a property a class attribute only used for simulating an instance attribute? Is it used for any other purpose?</span>
<span class="comment-copy">@Tim like what? I mean, I can't speak to what everyone everywhere is doing with it, but that's what it's primarily for. Please read the documentation, which suggests no alternative uses. Frankly it's not clear to me what the scope of what you're expecting is.</span>
