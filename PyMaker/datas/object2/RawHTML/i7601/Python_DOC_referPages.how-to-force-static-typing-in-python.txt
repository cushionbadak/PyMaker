<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/41356784/how-to-use-type-hints-in-python-3-6">How to use type hints in python 3.6?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>since static typing is available in python 3.6.</p>
<p>Is it possible to force static typing for a python project or set of python files?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://www.python.org/dev/peps/pep-3107/" rel="noreferrer"><code>annotations</code></a> in Python3, which might help you get some benefits of static typing.</p>
<p><strong>However if static typing were to be completely enforced in Python, then it won't be Python anymore.</strong> It's a duck-typed dynamic language, and would loose all dynamism as a result. If you really intend to use a statically-typed language, you are better off not using Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you cannot force <code>static typing</code> but you can use a checker as <code>mypy</code>.</p>
<p>According to line 2 of <code>The Zen of Python, by TimPeters</code> you have <code>Explicit is better than implicit.</code> Static typing is a good thing, but <code>Simple is better than complex.</code> ...</p>
<pre><code>$ python3.6
&gt;&gt;&gt; import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
</code></pre>
</div>
<span class="comment-copy">See <a href="https://docs.python.org/3/whatsnew/3.6.html" rel="nofollow noreferrer">docs.python.org/3/whatsnew/3.6.html</a></span>
<span class="comment-copy">Static typing is <b>not</b> available in python yet. Type hints or type annotations are for static analyzers like mypy which is not the same as static typing.</span>
<span class="comment-copy">@phd it seems for me that you are wrong, it's in the python 3.6; try for example: <code>n=int(input'number: ') def g(s: str) -&gt; str:   return 'this is ' + s g(n)</code> will give you type error; I would not call this a hint - it ensures that func g takes and returns str; read 3.6 docs.</span>
<span class="comment-copy">@Drako The TypeError is from normal Python operation. i.e., if you removed the hints, it would still raise an error. (<code>'this is ' + &lt;int&gt;</code> raises it). <code>def f(s: str) -&gt; str: return 0</code> and then calling <code>f(0)</code> does not raise  a TypeError for me (Python 3.6.1)</span>
<span class="comment-copy">Relevant if not dupes: <a href="http://stackoverflow.com/questions/32557920/what-are-type-hints-in-python-3-5/32558710#32558710" title="what are type hints in python 3 5">stackoverflow.com/questions/32557920/…</a> and <a href="http://stackoverflow.com/questions/39971929/what-are-variable-annotations-in-python-3-6?noredirect=1&amp;lq=1" title="what are variable annotations in python 3 6">stackoverflow.com/questions/39971929/…</a>?</span>
