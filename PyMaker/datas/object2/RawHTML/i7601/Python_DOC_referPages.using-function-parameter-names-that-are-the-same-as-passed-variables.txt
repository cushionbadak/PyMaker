<div class="post-text" itemprop="text">
<p>Is there anything wrong with the following?:</p>
<pre><code>def foo(bar):
    for b in bar:
        print (b)

bar = ['hello', 'world']

foo(bar)
</code></pre>
<p>Often in my code I change the function parameters to a name that differs from the passed variable.</p>
<pre><code>def foo(_bar):
    for b in _bar:
        print (b)

bar = ['hello', 'world']

foo(bar)
</code></pre>
<p>I do this just to be safe, but when other people look at the code, I think it would be great if I can keep the same name so they know exactly what is being passed. </p>
</div>
<div class="post-text" itemprop="text">
<p>From syntax perspective, there is nothing wrong with 1 example. Python follows <a href="http://sebastianraschka.com/Articles/2014_python_scope_and_namespaces.html" rel="nofollow noreferrer">LEGB rule</a> when it tries to get variable value, so when you use <code>bar</code> as an argument, you rewrite global <code>bar</code> in scope of <code>foo</code> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can keep the same name, it doesn't matter. Variables defined inside a function are not accessible outside.</p>
</div>
<div class="post-text" itemprop="text">
<p>The only risk with doing that is if you are using any <a href="https://docs.python.org/3/faq/programming.html#how-do-i-share-global-variables-across-modules" rel="nofollow noreferrer">global variable</a> the scope of the variable has no impact. </p>
<p>Depending on the variable name, it COULD be confusing to use the same variable name, but I think you should really just use whatever makes the most sense given the context. So for example in something like</p>
<pre><code>do_angle_computation(theta):
    return sin(theta) * cos(theta)

theta = 30
print do_angle_computation(theta)
</code></pre>
<p>it's totally fine. </p>
</div>
<div class="post-text" itemprop="text">
<p>Well, there's no problem because variables that are defined inside a function have <em>local</em> scope. </p>
<p>IMO, this problem only matters when your function need to use the same name local variable AND some global variable. But you should however avoid such design in the first place. </p>
<p>This is how I handle this kind of situations:</p>
<pre><code>def foo(bar):
    for b in bar:
        print (b)

def main():
    bar = ['hello', 'world']
    foo(bar)
    ...
</code></pre>
<p>More, what should be worth mentioning is that in your second example, <code>_variable</code> is usually used for <em>privatish</em> (internal use) things in Python, but that's just a convention (It's not enforced by the language in any way, since Python programmers are all <a href="http://mail.python.org/pipermail/tutor/2003-October/025932.html" rel="nofollow noreferrer"><em>consenting adults</em></a>). I'd rather use: <code>variable_</code> instead.</p>
</div>
<span class="comment-copy">Yeah, there's no problem with that. <a href="https://stackoverflow.com/a/292502/7303349">Here's a quick write up</a> of scoping in Python.</span>
<span class="comment-copy">using a different var name is unnecessary, the <code>bar</code> variable in the function scope would be a different one than that of the caller</span>
