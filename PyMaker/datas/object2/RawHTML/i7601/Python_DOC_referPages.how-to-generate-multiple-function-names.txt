<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1373164/how-do-i-create-a-variable-number-of-variables">How do I create a variable number of variables?</a>
<span class="question-originals-answer-count">
                    16 answers
                </span>
</li>
</ul>
</div>
<p>I have a number of functions called <code>func_1</code>, <code>func_2</code>, ... I'd like to call each of them in a <code>for</code> loop.</p>
<p>I could do:</p>
<pre><code>for f in [func_1, func_2, func_3]:
    print f('foo', 'bar')
</code></pre>
<p>but I'd like less typing. Is there any way to generate the names, something like:</p>
<pre><code>for f in ['func_%s' % range(1,5)]:
    print f('foo', 'bar')
</code></pre>
<p>This fails with <code>'str' object is not callable</code>, but is there anything like this that works?</p>
<p>EDIT: I'm testing a number of alternative versions of <code>func</code>. They are all supposed to give the same result, but with different implementations. I control the inputs and this is not in production.</p>
<p>However, this is bad and possibly dangerous practice in other contexts. See the comments and answers.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could look them up in the local scope:</p>
<pre><code>for f in ['func_%s' % range(1,5)]:
    print locals()[f]('foo', 'bar')
</code></pre>
<p>The <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer"><code>locals()</code></a> function returns a dictionary of names to values in the local scope. If they are global functions, use <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow noreferrer"><code>globals()</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>eval</code>. However it is very dangerous to use <code>eval</code>. Be careful while playing with it.</p>
<pre><code>for f in ['func_%s' % range(1,5)]:
    print eval(f)('foo', 'bar')
</code></pre>
</div>
<span class="comment-copy">Yes, but this is <b>bad</b> design. Usually you should give functions an informative name, a <i>call-by-name</i> is usually dangerous.</span>
<span class="comment-copy">This is the epitome of the <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY problem</a>. You shouldn't have to do this in the first place.</span>
<span class="comment-copy">Explicitness, readability, maintainability and testability are very important in software practice. This goes against each of those.</span>
<span class="comment-copy">@WillemVanOnsem in this context, the names are informative. func_2 is the second alternative version of func. See the edit, as this was not clear from the original question</span>
<span class="comment-copy">@idjaw See the edit. This is for testing alternatives. Therefore, things such as maintainability are less important. I think of a new implementation, then bump <code>range</code>.  The tests are not all that complex; if they were I'd be doing something more sophisticated.</span>
<span class="comment-copy">I get <code>KeyError: 'func_[1]'</code></span>
<span class="comment-copy">You copied the incorrect list comprehension from the question. It should be <code>['func_%s' % i for i in range(1,4)]</code></span>
<span class="comment-copy">@Rawing Thanks.</span>
<span class="comment-copy">Leaving <a href="https://stackoverflow.com/questions/1832940/is-using-eval-in-python-a-bad-practice">this</a> here because friends don't let friends eval.</span>
<span class="comment-copy">@idjaw that's why my comments are there. please read it carefully. Hope u have read it.</span>
<span class="comment-copy">Yes, I did read it. Otherwise I would not have left a comment about it. Did you read my link I left? :)</span>
<span class="comment-copy">@foosion You can do whatever you want. But please keep in mind that these answers help the community as a whole as well. And by accepting answers that are clearly using very bad software practice, it also indicates to other readers that "hey, I can do this too" who don't know better. Keep that in mind too. But, yeah...you can do whatever you want here. :) But, it's also important to indicate to the readers the dangers here too, which is also why I put the link in the comment to help people understand what eval is.</span>
<span class="comment-copy">If you're going to use <code>eval</code>, at least use it right - human errors are another reason why using <code>eval</code> can go horribly wrong. The current code doesn't work.</span>
