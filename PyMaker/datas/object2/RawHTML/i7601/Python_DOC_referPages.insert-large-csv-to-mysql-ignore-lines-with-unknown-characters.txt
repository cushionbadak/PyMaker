<div class="post-text" itemprop="text">
<p>I have a large .csv that I'm trying to import into a MySQL database for a Django project. I'm using the django.db library to write raw sql statements such as:</p>
<pre><code>LOAD DATA LOCAL INFILE 'file.csv'...
</code></pre>
<p>However, I keep getting the following error:</p>
<pre><code>django.db.utils.OperationalError: (1300, "Hey! Are you out tonight?")
</code></pre>
<p>After grepping the .csv for the line, I realised that the error is being caused by this character: ðŸ˜œ; though I'm sure there will be other characters throwing that error after I fix this.</p>
<p>Running:</p>
<pre><code>$ file --mime file.csv
</code></pre>
<p>from a terminal, returns:</p>
<pre><code>$ file.csv: text/html; charset=us-ascii
</code></pre>
<p>Since the rest of my db is in UTF-8, I tried writing a python script to re-encode it, using <code>.encode('utf-8', 'ignore')</code> hoping that the 'ignore' would remove any symbols that gave it trouble, but it threw:</p>
<pre><code>UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe9 in position 825410: invalid continuation byte
</code></pre>
<p>The thing is, I don't actually care about inserting 100% of the file into my db. I would rather just insert only the 'safe' lines that don't contain strange characters. </p>
<p>So ideally, I'm looking for a way to modify my <code>LOAD DATA LOCAL INFILE</code> sql statement so it just skips inserting any lines that give it trouble. This is optimal, since I don't want to spend time preprocessing the data. </p>
<p>If that isn't feasible, the next best thing is to remove any troublesome character/lines with a Python script that I could later run from my django app whenever I update my db. </p>
<p>If all else fails, information on how to grep out any characters that aren't UTF-8 friendly that I could write a shell script around would be useful.</p>
</div>
<div class="post-text" itemprop="text">
<p>For <code>ðŸ˜œ</code>, MySQL must use <code>CHARACTER SET utf8mb4</code> on the column where you will be storing it, the <code>LOAD DATA</code>, and on the connection.</p>
<p>More Python notes: <a href="http://mysql.rjweb.org/doc.php/charcoll#python" rel="nofollow noreferrer">http://mysql.rjweb.org/doc.php/charcoll#python</a></p>
<p><code>E9</code> does not make sense.  The hex for the UTF-8 encoding for <code>ðŸ˜œ</code> is <code>F09F989C</code>.</p>
<p>The link on converting between character is irrelevant; only UTF-8 can be used for Emoji.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not 100% sure if this will help but this is what I'd try:</p>
<blockquote>
<p>Since open() is used to open a CSV file for reading, the file will by default be decoded into unicode using the system default encoding (see locale.getpreferredencoding()). To decode a file using a different encoding, use the encoding argument of open:</p>
</blockquote>
<pre><code>import csv
with open('some.csv', newline='', encoding='utf-8') as f:
    reader = csv.reader(f)
    for row in reader:
        print(row)
</code></pre>
<p>That's an example gathered from <a href="https://docs.python.org/3/library/csv.html#examples" rel="nofollow noreferrer">official docs</a>. Have in mind that you might need to replace <code>utf-8</code> with the actual file encoding, as docs say. Then you can either continue using python to push your data into DB or write a new file with a new encoding.</p>
<p>Alternatively, <a href="https://stackoverflow.com/q/64860">this could could be another approach</a>.</p>
</div>
<span class="comment-copy">Have you tried csv built-in library - <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">docs.python.org/3/library/csv.html</a> ?</span>
<span class="comment-copy">Could you elaborate on how the csv built-in library would help? Does it have a method to specify the charset or clean the data?</span>
<span class="comment-copy">Added as an answer</span>
<span class="comment-copy">Wow, thanks for the link. Very informative and you are obviously very knowledgeable. Just to clarify your first sentence, I'm loading the csv with <code>LOAD DATA LOCAL INFILE file.csv IGNORE INTO TABLE content CHARACTER SET utf8mb4 ...</code> which I believe covers the first and second parts. Then my settings.py has the following for the DATABASE section:  <code>'ENGINE': 'django.db.backends.mysql', ... 'OPTIONS': {   'charset': 'utf8mb4',   'use_unicode': True, }</code> Which I believe handles the connection part you were talking about. Is this correct, or is there something else I should be doing?</span>
<span class="comment-copy">Hehe -- I'm faking it.  I have never coded in Python.  That link is a compilation of apparent solutions to character problems in Python and about 35 other languages, most of which I have not touched.  So, I can't really answer your last question; let us know if it works.  (Let me know if you find an error in that link; I will update it.)</span>
<span class="comment-copy">Haha, nice. Following the Django part of your blog got me further, but unfortunately it failed later in the csv on some Chinese characters. I ended up changing my <code>LOAD DATA</code> statement to use latin1 for the character set. I'm sure this will come back to bite me, but it worked to get the whole csv into my db. I have no idea why latin1 would work where utf8mb4 didn't though.</span>
<span class="comment-copy">latin1 accepts all 8-bit values.  utf8mb4 checks for validity.  latin1 will bite you when you get to things like <code>CHAR_LENGTH()</code>, string comparisons, <code>ORDER BY</code>, etc., since it is not seeing the text correctly.  Admittedly, it may not bite hard.</span>
