<div class="post-text" itemprop="text">
<p>I have small doubt in organisation of module arparse
Following code is found on python documentation online</p>
<pre><code>import argparse
parser = argparse.ArgumentParser()
parser.add_argument("echo")
args = parser.parse_args()
print(args.echo)
</code></pre>
<p>I assumed argparse will be <em>module</em> argparse.ArgumentParser() will be a <em>class</em> within the module so 2nd line simply create the object of that class. Next line we call <em>methods</em> defined in the class using dot operator. Till this point all made sense. I was thinking args will be simple variable but when args.echo is accesses using dot operator then what type is args? Is it parser.parse_args() return object of ArgmentParser() type.
Apologies if question is too naive.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/argparse.html#the-namespace-object" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html#the-namespace-object</a></p>
<blockquote>
<p>class argparse.Namespace</p>
<p>Simple class used by default by parse_args() to create an object holding attributes and return it.</p>
</blockquote>
<p>Try to find the <code>argparse.py</code> file in your distribution, and look at it, preferably with an editor that parses Python.  Almost all of the code is classes.  There several utility base classes (container, etc), but the key ones are imported with the <code>__all__</code> list.</p>
<p>It's also instructive to run your code in an interactive process and look at the objects that are created.  Or just add lots of <code>print(parser)</code> statements to see their respective <code>str</code>.</p>
<pre><code>parser = argparse.ArgumentParser()
</code></pre>
<p>creates a <code>ArgumentParser</code> object.</p>
<pre><code>a = parser.add_argument("echo")
</code></pre>
<p>creates an <code>Action</code> object (actually a subclass of <code>Action</code>, according to the <code>action</code> parameter.</p>
<pre><code>args = parser.parse_args()
</code></pre>
<p>creates a <code>Namespace</code> object,  </p>
<pre><code>vars(args)
</code></pre>
<p>creates a dictionary object from the <code>args</code> attributes.</p>
</div>
<span class="comment-copy">Use <code>print(type(args))</code> and see!</span>
<span class="comment-copy">Thanks for the answer. I will look into the Namespace object further. Thanks</span>
