<div class="post-text" itemprop="text">
<p>Hopefully not a silly question.  If I write </p>
<pre><code>str1 = 'exterminate!'           

str1.upper()

print(str1)

str1 = str1.upper()

print(str1)

my_list = [1, 2, 3]

my_list.append(4)

print(my_list)

my_list = my_list.append(5)

print(my_list)
</code></pre>
<p>The output is:</p>
<pre><code>exterminate!
EXTERMINATE!
[1, 2, 3, 4]
None
</code></pre>
<p>In other words,</p>
<pre><code>str1.upper()
</code></pre>
<p>and </p>
<pre><code>my_list.append(4)
</code></pre>
<p>do very different things.  By that, I mean .append actually changes the list object, but .upper() does not.</p>
<p>However, in order to change the string object to all uppercase, we have to use</p>
<pre><code>str1 = str1.upper()
</code></pre>
<p>but doing</p>
<pre><code>my_list = my_list.append(5)
</code></pre>
<p>we now have my_list as a noneType.</p>
<p>Can someone explain this behavior.  I have a feeling it has to do with the fact that they are different object types.</p>
</div>
<div class="post-text" itemprop="text">
<p>Strings are <a href="https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str" rel="nofollow noreferrer">immutable in Python</a>.</p>
<p>Therefore, they don't offer in-place modification. The form <code>foo = foo.upper()</code> is therefore the usual way to do it for Python.</p>
<p>Note that a <em>variable</em> is not in itself immutable, meaning that when you do <code>foo = foo.upper()</code>, Python will return a new uppercase string based on the string pointed to by <code>foo</code>, then update the <em>variable</em> <code>foo</code> to point to that new string. (The old string may then be removed from memory, if its reference count goes to zero.)</p>
<p>Some other data structures in Python are also immutable, for example tuples like <code>t = (1,2,3)</code>. To modify those, you'd need to construct new tuples.</p>
</div>
<div class="post-text" itemprop="text">
<p>Strings in Python are <em>immutable</em>.  They <em>can't</em> be changed.  This is why all the string methods return a new string instead of modifying the string in place.  Lists on the other hand are mutable, and generally list methods mutate the list in place, and return <code>None</code>.</p>
<p>This is a general rule (with some exceptions): Mutating methods return <code>None</code>, while non-mutating methods return a new value.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>upper()</code> method returns a <strong>copy</strong> of a string. See <a href="https://docs.python.org/2/library/stdtypes.html#str.upper" rel="nofollow noreferrer">docs</a> for reference.</p>
</div>
<div class="post-text" itemprop="text">
<p>the .upper() method does not change anything in your String but it return a new string that is with the upper words and you need to save that output in a variable.
but in .append() method add your input in the list and you don't need to use <code>my_list = my_list.append(5)</code></p>
</div>
<span class="comment-copy">Have a look at <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">the canonical explanation</a></span>
