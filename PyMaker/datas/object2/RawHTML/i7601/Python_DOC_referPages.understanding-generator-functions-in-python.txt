<div class="post-text" itemprop="text">
<p>Why it outputs <code>None</code>?</p>
<pre><code>def hello():
    print("hello")

def gen():
    yield hello();
    yield hello();
    yield hello();

for x in gen():
    print(x)
</code></pre>
<p>result is:</p>
<pre><code>hello 
None 
hello 
None 
hello 
None
</code></pre>
<p>why None is printed?? 
not hello * 3 ?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Why it prints None</strong>:</p>
<p>Here when you <code>print()</code> but doesnt <code>return</code> anything, python will add a <code>return</code> automatically at the end.</p>
<p>Let's see an example using <a href="https://docs.python.org/2/library/dis.html" rel="nofollow noreferrer"><code>dis</code></a></p>
<pre><code>import dis

def hello():
  print('hello')

dis.dis(hello)
</code></pre>
<p>output:</p>
<pre><code>      0 LOAD_CONST               1 ('hello')
      3 PRINT_ITEM          
      4 PRINT_NEWLINE       
      5 LOAD_CONST               0 (None)
      8 RETURN_VALUE    
</code></pre>
<p>Let's see now when you return an explicit values:</p>
<pre><code>import dis

def hello():
  return 'hello'

dis.dis(hello)
</code></pre>
<p>output:</p>
<pre><code>    0 LOAD_CONST               1 ('hello')
    3 RETURN_VALUE  
</code></pre>
<p>See, the <code>LOAD_CONST 0 (None)</code> was not called the second times. Therefore, the first value being loaded was return.</p>
<p><strong>What you should do to improve your code</strong>:</p>
<p>Do this, if you just need to print "hello" inside the <code>hello</code> function.  </p>
<pre><code>def hello():
    print("hello")

def gen():
    yield hello()
    yield hello()
    yield hello()

for x in gen():
    x
</code></pre>
<p>OR, use return value, in that case you need to return instead of printing.</p>
<pre><code>def hello():
    return "hello"
    ^ Here I return rather than print hello

def gen():
    yield hello()
    yield hello()
    yield hello()

for x in gen():
    print(x)
</code></pre>
<p>But it is weird to call several <code>yield</code>, better do a loop to avoid a <code>StopIteration</code></p>
<p>e.g</p>
<pre><code>def hello():
    return "hello"

def gen():
    while True:
        yield hello()

x = gen()

for i in range(3):
  print(x.next())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By <strong>default</strong> functions return <code>None</code> type. </p>
<pre><code>def hello():
    pass

def gen():
    yield hello();
    yield hello();
    yield hello();

for x in gen():
    print(x)
</code></pre>
<p>Output:</p>
<pre><code>None
None
None
</code></pre>
<h1>What are generators?</h1>
<p>The main difference between generators and functions is that you can obtain values on the fly. And after one value is <code>yield</code>'ed by the generator. and next value is returned the old one is not <strong>stored in the memory</strong>. </p>
<h1>Iterating over a generator</h1>
<pre><code>def hello():
    for x in range(3):
        yield x*x


for i in hello():
    print(i)
</code></pre>
<p>Output:</p>
<pre><code>0
1
4
</code></pre>
<p>Now using <code>next()</code></p>
<pre><code>def hello():
    for x in range(3):
        yield x*x

gen = hello()

for i in range(3):
    print(next(gen))
</code></pre>
<p>Output:</p>
<pre><code>0
1
4
</code></pre>
<p>So far so good. Right? <code>gen = hello()</code> here <code>gen</code> becomes a generator object.</p>
<h1>Iterating over a list</h1>
<pre><code>my_list = [x*x for x in range(3)]
for i in my_list:
    print(i)
</code></pre>
<p>Output:</p>
<pre><code>0
1
4
</code></pre>
<p><strong>Same output?</strong> Yes same output. But only difference here is that I can use the <code>my_list</code> iterable any number of times I want,</p>
<pre><code>my_list = [x*x for x in range(3)]
for i in my_list:
    print(i)
print("\n")
for i in my_list:
    print(i)
</code></pre>
<p>Output:</p>
<pre><code>0
1
4

0
1
4
</code></pre>
<p>However if I try to use the <strong>Generator</strong> when it is exhausted.</p>
<pre><code>def hello():
    for x in range(3):
        yield x*x

gen = hello()

for i in range(3):
    print(next(gen))
next(gen)
</code></pre>
<p>Output</p>
<pre><code>0
1
4
Traceback (most recent call last):
  File "/home/mr/sadas.py", line 12, in &lt;module&gt;
    print(next(gen))
StopIteration
</code></pre>
<p>How to overcome this? Create a new generator object again and use.</p>
<pre><code>def hello():
    for x in range(3):
        yield x*x

gen = hello()

for i in range(3):
    print(next(gen))

gen = hello()

for i in range(3):
    print(next(gen))
</code></pre>
<p>Output:</p>
<pre><code>0
1
4
0
1
4
</code></pre>
<p>You see the difference? Hope I was clear.</p>
</div>
<span class="comment-copy"><code>hello()</code> does not return =&gt; implicitly returns <code>None</code>.  <code>hello() is None</code></span>
<span class="comment-copy">Maybe you meant this: <code>def hello(): return "hello"</code> ?</span>
<span class="comment-copy">I recommend reading functions first.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow noreferrer">Defining functions - Python tutorial</a></span>
<span class="comment-copy">The purpose of generators is to generate values - here, the <code>None</code> values returned by <code>hello()</code>. Printing 'hello' during that process is just a side effect of your <code>hello()</code> function.</span>
