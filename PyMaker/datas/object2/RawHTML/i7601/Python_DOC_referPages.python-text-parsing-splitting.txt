<div class="post-text" itemprop="text">
<p>I am trying to write a function where if there's a punctuation before an alphabetical character, the function will put a space before and if the punctuation is after an alphabetical character there should be a space after it. However it should not happen so in the case of integers. Eg</p>
<pre><code>("thanks." &gt;&gt;&gt; "thanks ." and "hello?123!lom" &gt;&gt;&gt; "hello ?123! lom")
</code></pre>
<p>My following code works fine when there is one punctuation but not when the same punctuation repeats itself see my code below:</p>
<pre><code>def normalize(utterance):

    # Converting to lowercase &amp; removing multiple white spaces
    utterance = ' '.join(utterance.lower().split())

#     List of punctuations
    punctuations_list = [',','.','?',':',';','!',')','(','\'']

    for punctuation in punctuations_list:
        if punctuation in utterance:
            try: 
                char_before = str(utterance[utterance.index(punctuation) -1]) 
                char_after = str(utterance[utterance.index(punctuation) +1])
            except IndexError:
                char_after = "0"


            if char_before.isdigit()==False and char_before not in punctuations_list: 
                utterance = utterance.replace(punctuation, " " + punctuation)
            if char_after.isdigit()==False and char_after not in punctuations_list:
                utterance = utterance.replace(punctuation, punctuation + " ")

    return utterance

normalize("thank you:? the time is 2:30pm")
&gt;&gt;&gt;'thank you :?  the time is 2 :30pm'
</code></pre>
<p>The output I want is:</p>
<pre><code> 'thank you :?  the time is 2:30pm'
</code></pre>
<p>i.e. without the space between time, the issue is because of the colon ":" being repeated I believe, can someone fix this?.</p>
<p>The error seems to be in the below line:</p>
<pre><code>utterance = utterance.replace(punctuation, " " + punctuation)
</code></pre>
<p>which replaces the whole punctuation wherever it matches, however I don't know how to rectify in this regard! </p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that <code>replace</code> function does the replacement for each occurrence of punctuation character. </p>
<p>You can iterate through each character in <code>utterance</code> instead 
and construct a new <code>target</code> string with a proper replacement:</p>
<pre><code>def normalize(utterance):

    # Converting to lowercase &amp; removing multiple white spaces
    utterance = ' '.join(utterance.lower().split())
    #     List of punctuations
    punctuations_list = [',','.','?',':',';','!',')','(','\'']


    target = utterance[0]
    for i in range(1, len(utterance) -1):
        ch = utterance[i]
        char_before = utterance[i-1]
        char_after = utterance[i+1]
        if ch in punctuations_list and not char_before.isdigit() and char_before not in punctuations_list: 
            target += " "
        target += ch
        if ch in punctuations_list and not char_after.isdigit() and char_after not in punctuations_list:   
            target += " "  
    target += utterance[-1]
    return target
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">regex</a>:</p>
<pre><code>import re

def normalize(text):
    return re.sub(r"(?&lt;=[a-zA-Z])(?=[,.?:;!()'])|(?&lt;=[,.?:;!()'])(?=[a-zA-Z])", ' ', text)
</code></pre>
<p>This function finds one of the characters <code>,.?:;!()'</code> that's preceded or followed by a letter <code>a-zA-Z</code>, then inserts a space inbetween.</p>
</div>
<div class="post-text" itemprop="text">
<p>Check out the docs for <a href="https://docs.python.org/2/library/string.html#string.index" rel="nofollow noreferrer">index()</a>, and then for <a href="https://docs.python.org/2/library/string.html#string.find" rel="nofollow noreferrer">find()</a>. </p>
<p>find():</p>
<blockquote>
<p>Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end]. Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices.</p>
</blockquote>
<p>I suspect because you're using index() to set up <code>char_before</code> and <code>char_after</code>, you're only doing that for the first instance of punctuation, leaving any other instances that exist in <code>utterance</code>. You never loop back through and look for more than this first instance.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should do:
<code>utterance = utterance.replace(punctuation, "" + punctuation)</code></p>
<p>Edit</p>
<p>As I mentioned, you should go through every char in your sentence instead of every punctuation. I have included some other fixes but you will still have to deal with doubling spaces from what I have done.</p>
<p>You would have something like this:</p>
<pre><code>def normalize(utterance):

    # Converting to lowercase &amp; removing multiple white spaces
    utterance = ' '.join(utterance.lower().split())
    print utterance

#     List of punctuations
    punctuations_list = [',','.','?',':',';','!',')','(','\'']

    for punctuation in utterance:
        if punctuation in punctuations_list:
            print punctuation

            try: 
                char_before = str(utterance[utterance.index(punctuation) -1]) 
                char_after = str(utterance[utterance.index(punctuation) +1])
            except IndexError:
                char_after = "0"

            print char_before

            if char_before.isdigit()==False and char_before not in punctuations_list: 
                utterance = utterance.replace(char_before+punctuation, char_before+" " + punctuation)

            if char_before.isdigit()==True:                
                utterance = utterance.replace(punctuation, "" + punctuation)

            if char_after.isdigit()==False and char_after not in punctuations_list:
                utterance = utterance.replace(punctuation+char_after, punctuation + " "+char_after)

    return utterance

print normalize("thank you:? the time is 2:30pm")
</code></pre>
</div>
<span class="comment-copy">This is giving the wrong output: 'hank you :?  meeting at 1:30p'</span>
<span class="comment-copy">Thanks. Updated it</span>
<span class="comment-copy">The problem is that you are following a puctuation list and for each punctuation choosing a char before and after the first occurence of this punctuation. This same char is being considered for every punctuation of the same kind in your whole sentence. You should change your for loop to go through every char in the original sentence instead of punctuation list.</span>
<span class="comment-copy">Okay, thanks for clarifying this seems to work.</span>
<span class="comment-copy">You're welcome! It needs some more adjustments, but I think it will be easier now.</span>
