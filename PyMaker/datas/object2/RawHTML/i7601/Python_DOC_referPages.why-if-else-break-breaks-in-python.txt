<div class="post-text" itemprop="text">
<p>I am trying to use if-else expression which is supposed to break the loop if the <code>if</code> condition fails, but getting an <code>invalid syntax</code> error.</p>
<p>Sample code:</p>
<pre><code>a = 5
while True:
    print(a) if a &gt; 0 else break
    a-=1
</code></pre>
<p>Of course, if I write in the traditional way (not using the one liner) it works.</p>
<p>Please let me know what is wrong in using the <code>break</code> command after the <code>else</code> keyword.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I run this, I get the following error:</p>
<pre><code>...     print(a) if a &gt; 0 else break
  File "&lt;stdin&gt;", line 2
    print(a) if a &gt; 0 else break
                               ^
SyntaxError: invalid syntax
</code></pre>
<p>This is because</p>
<pre><code>print(a) if a &gt; 5 else break
</code></pre>
<p>is a <strong>ternary operator</strong>. Ternary operators are <strong>no <code>if</code> statements</strong>. These work with syntax:</p>
<pre><code>&lt;expr1&gt; if &lt;expr2&gt; else &lt;expr3&gt;
</code></pre>
<p>It is <em>equivalent</em> to a "virtual function":</p>
<pre><code>def f():
    if &lt;expr2&gt;:
        return &lt;expr1&gt;
     else:
         return &lt;expr3&gt;
</code></pre>
<p>So that means the part next to the <code>else</code> should be an <strong>expression</strong>. <code>break</code> is <strong>not an expression</strong>, it is a statement. So Python does not expect that. You <strong>can not <code>return</code> a <code>break</code></strong>.</p>
<p>In <a class="post-tag" href="/questions/tagged/python-2.x" rel="tag" title="show questions tagged 'python-2.x'">python-2.x</a>, <code>print</code> was not a function either. So this would error with the <code>print</code> statement. In <a class="post-tag" href="/questions/tagged/python-2.x" rel="tag" title="show questions tagged 'python-2.x'">python-2.x</a> <code>print</code> was a keyword.</p>
<p>You can rewrite your code to:</p>
<pre><code>a = 5
while True:
    if a &gt; 5:
        print(a)
    else:
        break
    a -= 1
</code></pre>
<p>You can read more about this in the <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="noreferrer">documentation</a> and <a href="https://www.python.org/dev/peps/pep-0308/" rel="noreferrer">PEP-308</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>If</code> is an expression, <code>break</code> similar to <code>return</code> is a statement. You can't use two statements in a single sentence (unless you use a semicolon which is ugly). <em>I know it would have been really cool if we can do that, but alas that's the way it is.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>To put it in slightly simpler terms, you're misusing the 'one-line <code>if</code> statement' (<a href="https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator">ternary operator</a>). It always evaluates to an <strong>expression</strong> (i.e., a value). That is,</p>
<pre><code>&lt;expr1&gt; if &lt;condition&gt; else &lt;expr2&gt;
</code></pre>
<p>evaluates to <code>&lt;expr1&gt;</code> if <code>&lt;condition&gt;</code> is <code>True</code>, and to <code>&lt;expr2&gt;</code> if <code>&lt;condition&gt;</code> is <code>False</code>. This resulting value can then be used like any Python value, for example:</p>
<pre><code>y = 0
x = (5 if (y &gt; 0) else 6)
print(x) # 6
</code></pre>
<p>Of course, the parentheses are completely unnecessary (even discouraged), but hopefully are useful for understanding the meaning of that line.</p>
<p>Therefore,</p>
<pre><code>print(a) if a &gt; 0 else break
</code></pre>
<p>tries to evaluate <code>print(a)</code> (which, by the definition of <code>print()</code> in Python 3, always returns <code>None</code> â€“ perfectly valid, but probably not what you usually want) and then <code>break</code>, which does not evaluate to anything because it is a <a href="https://www.quora.com/Whats-the-difference-between-a-statement-and-an-expression-in-Python" rel="nofollow noreferrer"><strong>statement</strong> (action), not an <strong>expression</strong> (value)</a>, hence the <code>invalid syntax</code> error.</p>
<p>Hence, if you want to execute one of two statements depending on a condition, you really need the multi-line solution proposed by 
Willem Van Onsem. There may be hacky ways to do it in one line, but multiple lines is the usual solution for something like this in Python.</p>
</div>
<span class="comment-copy">in this example how would you get out of such loop?</span>
<span class="comment-copy">@WhatsThePoint made the edit.</span>
<span class="comment-copy">Yeah.. there were two typos, (true instead of True and <code>a&gt;5</code> instead <code>a&gt;0</code>).  Fixed them. Thanks for mentioning :)</span>
<span class="comment-copy">More info in the <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">docs</a> and <a href="https://www.python.org/dev/peps/pep-0308/" rel="nofollow noreferrer">PEP308</a></span>
<span class="comment-copy">@Kendas: Thanks. I included the references in the answer.</span>
<span class="comment-copy">The answer by Willem Van Onsem has a lot of useful information, but I like the clarity and ease of this answer for practical use; it's easier to remember simply that you can't use two statements in a single sentence.</span>
