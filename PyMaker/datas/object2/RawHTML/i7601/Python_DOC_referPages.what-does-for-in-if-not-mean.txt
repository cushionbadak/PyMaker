<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/34835951/what-does-list-comprehension-mean-how-does-it-work-and-how-can-i-use-it">What does “list comprehension” mean? How does it work and how can I use it?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>There's a function I don't get:</p>
<pre><code>def group_regularization(v):
    const_coeff = lambda W: tf.sqrt(tf.cast(W.get_shape().as_list()[1], tf.float32))
    return tf.reduce_sum([tf.multiply(const_coeff(W), l21_norm(W)) for W in v if 'bias' not in W.name])
</code></pre>
<p>What does the last line mean? </p>
<p>At first I thought it was "apply the function to <code>W</code> except the ones with name <code>bias</code>", but I'm not sure.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> with a condition. It has nothing to do with Tensorflow, it's just basic Python.</p>
<p>Conditional list comprehensions take the form</p>
<pre><code>[&lt;expression&gt; for &lt;name&gt; in &lt;list&gt; if &lt;condition&gt;]
</code></pre>
<p>This iterates over all elements in <code>&lt;list&gt;</code> for which <code>&lt;condition&gt;</code> is true, assigning each to <code>&lt;name&gt;</code> in turn, evaluating <code>&lt;expression&gt;</code>, and making a new list of the results. It's equivalent to</p>
<pre><code>new_list = []
for &lt;name&gt; in &lt;list&gt;:
    if &lt;condition&gt;:
        new_list.append(&lt;expression&gt;)
</code></pre>
<p>except that the list comprehension is cleaner code and possibly a bit faster to run.</p>
</div>
<div class="post-text" itemprop="text">
<p>It represents list comprehension expanded as the following:</p>
<pre><code>out_list = []
def group_regularization(v):
    ...
    for W in v:
        if 'bias' not in W.name:
            out_list.append(tf.multiply(const_coeff(W), l21_norm(W)))
    tf.reduce_sum(out_list)
</code></pre>
<p>It is iterating through each item in <code>v</code> passed as <b>list</b> in <code>group_regularization</code></p>
<p>Then, checking if string 'bias' is not in W.name</p>
<p>and then, doing(whatever) operation for tensorflow.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's break it down, it's convention in python:</p>
<pre><code>#Step 1:
for W in v 
# Will foreach loop W for every item in v

#Step 2:
if 'bias' not in W.name #
# in loop, check if 'bias' was an element of list W.name, if yes, dont do anything with that, if not, do next

#Step 3:
const_coeff(W), l21_norm(W))
# calculate these 2

#Step 4:
tf.multiply(const_coeff(W), l21_norm(W)))
# put those calculated in step 3 into tf.multiply

#Step 5:
[tf.multiply(....)]
# put everything in a list (since you have a loop at step 1)

#Step 6:
tf.reduct_sum([...])
# calculate reduce_sum

#Step 7:
return ....
# pass that result out
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes it is a <strong>list comprehension with a condition</strong>. List comprehensions can have multiple conditions.</p>
<p>The general format for a list comprehension with a <code>if</code> condition is this,</p>
<pre><code>[&lt;expression&gt; for &lt;value&gt; in &lt;iterable&gt; if &lt;condition&gt;]
</code></pre>
<p>You can also have an <code>if..else</code> in the comprehension</p>
<pre><code>[&lt;expression&gt; if &lt;condition&gt; else &lt;expression&gt; for &lt;value&gt; in &lt;iterable&gt; ]
</code></pre>
<p><strong>NOTE:</strong> Your iterable can be <code>list,tuple,set,string,...etc</code></p>
<p>To make things clear consider this simple example,</p>
<pre><code>&gt;&gt;&gt; v = [1,2,3,4]
&gt;&gt;&gt; v
[1, 2, 3, 4]
</code></pre>
<p>Assume this is your <code>v</code> from your given code, also for understanding purposes let's say <code>Wname</code> is something similar to <code>W.name</code></p>
<pre><code>&gt;&gt;&gt; Wname = [1,2]
&gt;&gt;&gt; Wname
[1, 2]
</code></pre>
<p>Now suddenly you decide <strong>I want a list x which has items from v but not in Wname</strong>. Hmmm... How to do that? Take a look below.</p>
<pre><code>&gt;&gt;&gt; x = [W for W in v if W not in Wname]
&gt;&gt;&gt; x
[3, 4]
</code></pre>
<p>Somewhat along these lines is what's happening in the code you mentioned above.</p>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/q/6981717/6521116">Pythonic way to combine FOR loop and IF statement</a></span>
