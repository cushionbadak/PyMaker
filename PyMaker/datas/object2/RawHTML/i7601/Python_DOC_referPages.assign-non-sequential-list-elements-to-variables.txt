<div class="post-text" itemprop="text">
<p>I am splitting a line of a file on <code>\t</code> and saving each part in a list called <code>parts</code>:</p>
<pre><code>with open(in_file, 'r') as file:
    for l in file:
        parts = l.rstrip().split('\t')
</code></pre>
<p>I then then want to assign some of the elements to variables.</p>
<p>In Perl I would do: </p>
<pre><code>my @parts = split(/\t/);    
my ($start, $end, $name, $length, $id) = @parts[0,2,3,4,11];
</code></pre>
<p>How can I achieve this in Python? I want to do something equivalent to: </p>
<pre><code>start, end, name, length, id = parts[0,2,3,4,11]  # Doesn't work
</code></pre>
<p>As opposed to:</p>
<pre><code>start = parts[0]
end = parts[2]
...
</code></pre>
<p>I know I can assign a sequence of elements like this: </p>
<pre><code>start, other_var, end = parts[0:3]
</code></pre>
<p>But how can I do this if the elements I want are non-sequential?</p>
</div>
<div class="post-text" itemprop="text">
<p>You would use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> in Python which returns a tuple of the selected items:</p>
<pre><code>from operator import itemgetter

start, end, name, length, id = itemgetter(0,2,3,4,11)(parts) 
</code></pre>
<p>There are other ways to this of course, but these may not be the <em>one obvious way</em>.</p>
<hr/>
<ol>
<li><p>Using a <em>list comprehension</em>. This builds a list, which is probably not needed here:</p>
<pre><code>indices = 0,2,3,4,11
start, end, name, length, id = [parts[i] for i in indices]
</code></pre></li>
</ol>
<hr/>
<ol start="2">
<li><p>Using <code>map</code> with <code>list.__getitem__</code>. This also builds a list in Python 2, more so, doing stuff via a magic method feels creepy at times:</p>
<pre><code>indices = 0,2,3,4,11
start, end, name, length, id = map(parts.__getitem__, indices)
</code></pre></li>
</ol>
<hr/>
<ol start="3">
<li><p>There's also <em>numpy</em> that has a <a href="https://docs.scipy.org/doc/numpy-1.12.0/reference/arrays.indexing.html#indexing" rel="nofollow noreferrer">basic/advanced indexing syntax</a>, but you should only use this if you'll be doing some algebra with the array thereafter, plus you'll have to install <em>numpy</em>:</p>
<pre><code>import numpy as np

indices = 0,2,3,4,11
start, end, name, length, id = np.array(parts)[indices]
</code></pre></li>
</ol>
</div>
<span class="comment-copy">Your parts always only contain the parts from one line of your file. Did you mean to build 5 lists, that contain the parts of all lines?</span>
<span class="comment-copy">@Igle - No that's what I want</span>
<span class="comment-copy">Is this a particular biological file format?</span>
<span class="comment-copy">OK great. Is this a Pythonic way of doing this, or am I forcing Perl logic? Would you go about it in a different way?</span>
<span class="comment-copy">Funny enough, the one obvious way for me to do it was the second solution you posted, because I did not know about itemgetter! :P</span>
<span class="comment-copy">@fugu Depends. I'll either use this, or if I needed to build an array with some algebra to it, I'll throw in numpy and use its basic/advanced indexing.</span>
