<div class="post-text" itemprop="text">
<p>I'm trying to write a function that will find all numbers that are a multiple of at least one number in a list where the multiple is less than a certain number. Here's what I've tried so far:</p>
<pre><code>def MultiplesUnderX(MultArray,X):
    '''
    Finds all the multiples of each value in MultArray that
    are below X.
    MultArray: List of ints that multiples are needed of
    X: Int that multiples will go up to
    '''
    return [i if (i % x == 0 for x in MultArray) else 0 for i in range(X)]
</code></pre>
<p>For example, MultiplesUnderX([2,3],10) would return [2,3,4,6,8,9]. I'm a little unsure how to do this with the for loop inside of the list comprehension.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the Python any() function to check if there is at least one instance of a divider in MultArray:</p>
<pre><code>def MultiplesUnderX(MultArray,X):

    return [i for i in range(X) if any(i % x == 0 for x in MultArray)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the Python built-in function <code>any</code> which returns <code>True</code> if the iterable passed in contains any truth-y values in combination with a conditional at the end of the list comprehension limiting the list to only elements that satisfy the <code>any</code> call.</p>
<pre><code>def get_multiples_under(factors, max):
    return [i for i in xrange(1, max) if any(i % factor == 0 for factor in factors)]
</code></pre>
<p>Your desired output is shown as such:</p>
<pre><code>multiples = [2, 3]
print get_multiples_under(multiples, 10)
# [2, 3, 4, 6, 8, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another version of this algorithm which may be more efficient if the list is mostly co-prime, you can just use <code>range(i, X, i)</code> to generate only the multiples of <code>i</code>, then use <a href="https://docs.python.org/3/library/heapq.html#heapq.merge" rel="nofollow noreferrer"><code>heapq.merge</code></a> to merge the iterators such that the iterator returned is sorted.</p>
<p>The last step is to eliminate duplicates as you go:</p>
<pre><code>import heapq

def all_multiples(multi_list, max_N):
    gens = []
    for fac in sorted(set(multi_list)):
        # In Python 3 this is a generator of all multiples of "fac" less
        # than max_N. In Python 2 use xrange
        gens.append(range(fac, max_N, fac))

    # This will do a heap merge on the generators (which are already sorted)
    o = heapq.merge(*gens)
    last = None
    for val in o:
        if val != last:
            yield val
            last = val


if __name__ == "__main__":
    multi_list = [2, 4, 7]
    print(list(all_multiples(multi_list, 12)))
    # [2, 4, 6, 7, 8, 10]
</code></pre>
</div>
<span class="comment-copy">Why is <code>3</code> not in the result list?</span>
<span class="comment-copy">Because I haven't slept in 15 hours.</span>
<span class="comment-copy"><code>(i % x == 0 for x in MultArray)</code> is a generator expression, not a "for-loop inside of the list comprehension (such a thing is not possible, since a for-loop requires a for-statement). It returns a generator object, which is truthy. You want to consume that generator using <code>any</code></span>
<span class="comment-copy">You can also <code>[True for x in MultiArray if i % x == 0]</code> then you don't need the <code>any()</code></span>
<span class="comment-copy">@Wyrmwood <code>any()</code> with a generator expression is short circuiting though.</span>
<span class="comment-copy">An extra parenthesis in there, but I love it!</span>
<span class="comment-copy">This returns a list with a lot of extra <code>0</code>s in it, due to the <code>else 0</code> in your comprehension. Also, in 2.7 the <code>xrange</code> will be a bit more efficient as to avoid the creation of a giant list up front.</span>
<span class="comment-copy">Edits look good!</span>
