<div class="post-text" itemprop="text">
<p>I have recently came across a few posts on stack overflow saying that subprocess is much better than os.system, however I am having difficulty finding the exact advantages. </p>
<p>Some examples of things I have run into:
<a href="https://docs.python.org/3/library/os.html#os.system" rel="noreferrer">https://docs.python.org/3/library/os.html#os.system</a></p>
<blockquote>
<p>"The subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function."</p>
</blockquote>
<p>No idea in what ways it is more powerful though, I know it is easier in many ways to use subprocess but is it actually more powerful in some way?</p>
<p>Another example is:</p>
<p><a href="https://stackoverflow.com/a/89243/3339122">https://stackoverflow.com/a/89243/3339122</a></p>
<blockquote>
<p>The advantage of <strong>subprocess</strong> vs <strong>system</strong> is that it is more flexible (you can get the stdout, stderr, the "real" status code, better error handling, etc...).</p>
</blockquote>
<p>This post which has 2600+ votes. Again could not find any elaboration on what was meant by better error handling or real status code. </p>
<p>Top comment on that post is:</p>
<blockquote>
<p>Can't see why you'd use os.system even for quick/dirty/one-time. subprocess seems so much better. </p>
</blockquote>
<p>Again, I understand it makes some things slightly easier, but I hardly can understand why for example:</p>
<pre><code>subprocess.call("netsh interface set interface \"Wi-Fi\" enable", shell=True)
</code></pre>
<p>is any better than</p>
<pre><code>os.system("netsh interface set interface \"Wi-Fi\" enabled")
</code></pre>
<p>Can anyone explain some reasons it is so much better?</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, you are cutting out the middleman; <code>subprocess.call</code> by default avoids spawning a shell that examines your command, and directly spawns the requested process. This is important because, besides the efficiency side of the matter, you don't have much control over the default shell behavior, and it actually typically works against you regarding escaping.</p>
<p>In particular, generally you never do this:</p>
<pre><code>subprocess.call("netsh interface set interface \"Wi-Fi\" enable")
</code></pre>
<p>since</p>
<blockquote>
<p>If passing a single string, either <code>shell</code> must be <code>True</code> (see below) or else the string must simply name the program to be executed without specifying any arguments.</p>
</blockquote>
<p>Instead, you'll do:</p>
<pre><code>subprocess.call(["netsh", "interface", "set", "interface", "Wi-Fi", "enable"])
</code></pre>
<p>Notice that here all the escaping nightmares are gone. <code>subprocess</code> handles escaping (if the OS wants arguments as a single string - such as Windows) or passes the separated arguments straight to the relevant syscall (<code>execvp</code> on UNIX).</p>
<p>Compare this with having to handle the escaping yourself, especially in a cross-platform way (<code>cmd</code> doesn't escape in the same way as POSIX <code>sh</code>), especially with the shell in the middle messing with your stuff (trust me, you don't want to know what unholy mess is to provide a 100% safe escaping for your command when calling <code>cmd /k</code>).</p>
<p>Also, when using <code>subprocess</code> without the shell in the middle you are sure you are getting <em>correct</em> return codes. If there's a failure launching the process you get a Python exception, if you get a return code it's actually the return code of the launched program. With <code>os.system</code> you have no way to know if the return code you get comes from the launched command (which is generally the default behavior if the shell manages to launch it) or it is some error from the shell (if it didn't manage to launch it).</p>
<hr/>
<p>Besides arguments splitting/escaping and return code, you have way better control over the launched process. Even with <code>subprocess.call</code> (which is the most basic utility function over <code>subprocess</code> functionalities) you can redirect <code>stdin</code>, <code>stdout</code> and <code>stderr</code>, possibly communicating with the launched process. <code>check_call</code> is similar and it avoids the risk of ignoring a failure exit code. <code>check_output</code> covers the common use case of <code>check_call</code> + capturing all the program output into a string variable.</p>
<p>Once you get past <code>call</code> &amp; friends (which is blocking just as <code>os.system</code>), there are way more powerful functionalities - in particular, the <code>Popen</code> object allows you to work with the launched process asynchronously. You can start it, possibly talk with it through the redirected streams, check if it is running from time to time while doing other stuff, waiting for it to complete, sending signals to it and killing it - all stuff that is way besides the mere synchronous "start process with default stdin/stdout/stderr through the shell and wait it to finish" that <code>os.system</code> provides.</p>
<hr/>
<p>So, to sum it up, with <code>subprocess</code>:</p>
<ul>
<li>even at the most basic level (<code>call</code> &amp; friends), you:

<ul>
<li>avoid escaping problems by passing a Python list of arguments;</li>
<li>avoid the shell messing with your command line;</li>
<li>either you have an exception or the true exit code of the process you launched; no confusion about program/shell exit code;</li>
<li>have the possibility to capture stdout and in general redirect the standard streams;</li>
</ul></li>
<li>when you use <code>Popen</code>:

<ul>
<li>you aren't restricted to a synchronous interface, but you can actually do other stuff while the subprocess run;</li>
<li>you can control the subprocess (check if it is running, communicate with it, kill it).</li>
</ul></li>
</ul>
<p>Given that <code>subprocess</code> does way more than <code>os.system</code> can do - and in a safer, more flexible (if you need it) way - there's just no reason to use <code>system</code> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are many reasons, but the main reason is mentioned directly in the docstring:</p>
<pre><code>&gt;&gt;&gt; os.system.__doc__
'Execute the command in a subshell.'
</code></pre>
<p>For almost all cases where you need a subprocess, it is <strong>undesirable to spawn a subshell</strong>.  This is unnecessary and wasteful, it adds an extra layer of complexity, and introduces several new vulnerabilities and failure modes.  Using <code>subprocess</code> module cuts out the middleman.  </p>
</div>
<span class="comment-copy">You clearly haven't looked into the API much, because your usage of <code>subprocess.call</code> is wrong. Please read the API docs and look at some examples of advanced use cases.</span>
<span class="comment-copy">@JonathonReinhart  Just for the record. It actually works fine with or without the shell=True. I have indeed read the documentation. It is also not the question at hand of why my code is or isn't working. I can update the example if you would like, question is still the differences between them. See: <a href="https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess" title="actual meaning of shell true in subprocess">stackoverflow.com/questions/3172470/â€¦</a> before you jump to conclusions or do other research. I know how the code works, I just don't know why I am using it over something else.</span>
<span class="comment-copy">That must be some strange artifact of the windows implementation. The fact that it "works" on one OS doesn't mean it's being used correctly.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/89228/calling-an-external-command-in-python">Calling an external command in Python</a></span>
<span class="comment-copy">Thanks, I'll thumbs up the comment. Doesn't exactly answer the better error handling, real status codes, or other things I had mentioned in my post people talk about. Even your post does the same as theirs, unsure what new vulnerabilities/failure modes you mean, and alos unsure which casses it would be desirable to spawn a subshell. Can't imagine the small wastefulness from this would gather so much support is all.</span>
<span class="comment-copy">A shell allows you to interact with the operating system.  Python also has all the power necessary to interact with the operating system.  Why ask Python to ask the shell to interact with the operating system?  The extra complexity comes from having to translate things like pipes and escapes into the shell language.  To learn about the vulnerabilities, search for <a href="https://en.wikipedia.org/wiki/Code_injection#Shell_injection" rel="nofollow noreferrer">shell injection</a>.</span>
