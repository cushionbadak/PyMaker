<div class="post-text" itemprop="text">
<p>I came across the code which goes like the following:</p>
<pre><code>import redis
import redis as originalRedis

OriginalRedis = originalRedis.Redis          # note the uppercase O 
class Redis(redis.Redis):

    def keys(self, pattern='*'):
        # custom implementation to be done here
        client = OriginalRedis(self.host, port=self.port, db=self.db)
        return client.keys(pattern)

    def flushKeys(self):
        # some custom implementation TBD here too
        return True

redis.Redis = Redis
</code></pre>
<p>Now my question is specifically on the imports statements. When we import something like that do we two references to the same module ?
Aren't module imports supposed to be singleton objects ? And I've tried the following </p>
<pre><code>import datetime
import datetime as dt 
dt is datetime 
True
</code></pre>
<p>So I'm guessing there is one reference of a single module as <code>id(dt)</code> and <code>id(datetime)</code> are same. Could anyone elaborate on why this has been used in this way ? Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>When we import something like that do we two references to the same module?</p>
</blockquote>
<p>Correct. All the <code>as</code> clause does is bind a new name to an object. If you import a module directly, and then import the same module but with a different name via <code>as</code>, both names will point to the exact same object. eg:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; import re as regex
&gt;&gt;&gt; 
&gt;&gt;&gt; id(re) == id(regex)
True

&gt;&gt;&gt;
</code></pre>
<p>The <a href="https://docs.python.org/3/reference/simple_stmts.html?highlight=import%20statement#import" rel="nofollow noreferrer">documentation for <code>import</code> statements also mentions this behavior</a>:</p>
<blockquote>
<p>If the module name is followed by as, then the name following as is bound directly to the imported module.</p>
</blockquote>
<hr/>
<blockquote>
<p>Aren't module imports supposed to be singleton objects? </p>
</blockquote>
<p>Yes, you can think of them like that. Python only executes the code for an imported module as needed, so technically yes. Module objects are singletons. But you must remember, even singletons can have multiple names.</p>
<p>Just because you created a new alias for an object, doesn't mean you created an entirely new object. All you did is simply create a new name to refer to the exact same object. If this wasn't true, then the code above would have returned <code>False</code> as <code>re</code> and <code>regex</code> would have been different objects,</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the OP is confused between instances and references! </p>
<blockquote>
<p>When we import something like that do we've two references to the same module?</p>
</blockquote>
<pre><code>import datetime
import datetime as dt 
</code></pre>
<p>Yes. But you should also learn that objects/instances are different from references (Obviously you know this by now!). I think the OP thinks that multiple imports will kind of <code>del</code> the previous reference to the module (hence making previous imports stale) and create a new one which isn't the case! See the code below for yourself and make sure of this.</p>
<pre><code>import datetime          # first import
import datetime as dt    # second import with an alias
id(dt)                  
X                        # X stands for some random address
id(datetime)
X                        # same address as previous
import datetime          # here OP thinks it'll exhaust the previous instance
id(datetime) 
X                        # to OP's surprise it remains the same! 
</code></pre>
<blockquote>
<p>Aren't module imports supposed to be singleton objects?</p>
</blockquote>
<p>Yes. And no language prohibits you from creating as many references as you want to the same singleton objects!</p>
<p>NOTE: Some OP's are just humans like me or even me!</p>
<p>Thank you all!</p>
</div>
<span class="comment-copy"><code>dt</code> is simply an alias to the same object <code>datetime</code> is referencing; A module object. You could have several aliases, but they will all hold a reference to the exact same object.</span>
<span class="comment-copy">A singleton can have many names.</span>
<span class="comment-copy">Not sure why.  redis.Redis and originalRedis.Redis point to the same object.  OriginalRedis also points to the same object.  The final line points the NAME redis.Redis to the new Redis class.  In the end there are two classes: originalRedis.Redis and redis.Redis.  OriginalRedis points to the former, the latter points to the new Redis class.  It's an interesting way to name obfuscate a class extension I guess.</span>
<span class="comment-copy">@ChristianDean It is the same object then can I just remove the first import ?</span>
<span class="comment-copy">@d-coder Sure, if you want to. It just depends on how you want to refer to the module you import. You usually use <code>as</code> when you have potential naming conflicts, and you want to rename certain modules.</span>
<span class="comment-copy">Thank you for your answer and comments! I appreciate it.</span>
<span class="comment-copy">@d-coder Also, please don't forget to accept my answer if it helped the most :-) Every bit counts!</span>
