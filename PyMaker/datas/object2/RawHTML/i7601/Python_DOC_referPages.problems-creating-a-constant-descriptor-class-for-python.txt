<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3798835/understanding-get-and-set-and-python-descriptors">Understanding __get__ and __set__ and Python descriptors</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<pre><code>&gt;&gt;&gt; class Const(object):        # an overriding descriptor, see later
...     def __init__(self, value):
...         self.value = value
...     def __set__(self, value):
...         self.value = value
...     def __get__(self, *_):  # always return the constant value
...         return self.value
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; class X(object):
...     c = Const(23)
... 
&gt;&gt;&gt; x=X()
&gt;&gt;&gt; print(x.c)  # prints: 23
23
&gt;&gt;&gt; x.c = 42
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: __set__() takes 2 positional arguments but 3 were given
</code></pre>
<p>What does</p>
<blockquote>
<p><code>TypeError: __set__()</code> takes 2 positional arguments but 3 were given` </p>
</blockquote>
<p>means?</p>
<p>Is <code>__set__()</code> a method belonging to the descriptor type <code>Const</code>?</p>
<p>What is <code>__set__()</code>'s signature?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<h1>Signature for __set__</h1>
<p>The signature for __set__ is documented <a href="https://docs.python.org/3/reference/datamodel.html#object.__set__" rel="nofollow noreferrer">here</a>: </p>
<blockquote>
<p><strong>object.__set__(self, instance, value)</strong> Called to set the attribute on
  an instance instance of the owner class to a new value, value.</p>
</blockquote>
<h1>Meaning of the TypeError</h1>
<p>The <em>TypeError</em> is tell you that the <em>instance</em> parameter is missing, it should be <code>def __set__(self, instance, value): ...</code>.</p>
<h1>Worked-out solution</h1>
<p>Here's one approach to making the <em>Constant</em> class work correctly:</p>
<pre><code>class Const(object):
    def __init__(self, value):
        self._value = value
    def __set__(self, inst, value):
        raise TypeError('Cannot assign to a constant')
    def __get__(self, inst, cls=None):
        return self._value

class X(object):
    c = Const(23)
</code></pre>
<p>Trying it out in an interactive session gives:</p>
<pre><code>&gt;&gt;&gt; x = X()
&gt;&gt;&gt; print(x.c)
23
&gt;&gt;&gt; x.c = 42
Traceback (most recent call last):
  File "&lt;pyshell#3&gt;", line 1, in &lt;module&gt;
    x.c = 42
  File "/Users/raymond/Documents/try_forth/tmp.py", line 5, in __set__
    raise TypeError('Cannot assign to a constant')
TypeError: Cannot assign to a constant
</code></pre>
</div>
<span class="comment-copy">Suggested for re-opening.  This is only a partial overlap with <a href="https://stackoverflow.com/questions/3798835/">stackoverflow.com/questions/3798835</a> (i.e. same topic category but not the actual question, circumstances, or specifics).   In particular, this question is asking about a tool for making constants (that is new) and is focused on the _<i>set_</i> method (that is new), and as the specific problem of a <i>TypeError</i> for an incorrect signature (that is new as well).</span>
<span class="comment-copy">@RaymondHettinger: The duplicate answers the question of why the <code>TypeError</code> appeared by providing the correct signature. That was the entire original question; it didn’t ask about the purpose of <code>Const</code>. (The duplicate is even more suited when taking the OP’s comment into account.)</span>
<span class="comment-copy">@Ryan You seem to have a different notion of "exact duplicate"  and have now caused an interesting variant to have been lost.   Also, it seems abusive to have closed a second time.  That should have been left to others to decide whether to agree or not rather than making a dictatorial decision overriding insight of a top contributor in the category.  By your reasoning, EVERY question about descriptors would be marked as duplicate of the vague "understanding descriptors" question.</span>
<span class="comment-copy">@RaymondHettinger: It’s not an interesting variant. It’s a lack of basic research. Also note that the close reason is no longer “exact duplicate” but “this question already has an answer here”; this was an intentional change exacted precisely for this sort of situation.</span>
<span class="comment-copy">@Ryan Nothing in the other answers covers making a Const() class.  Also, you're first comment about "Any of the first 10 Google results..." is not up to StackOverflow standards and indicates not really understanding the OP's task at hand.</span>
<span class="comment-copy">Thanks! (1) What differences are between the two parameters <code>self</code> and <code>instance</code> of <code>object.__set__</code>? Do they both refer to the same instance of the class (if yes, why do we need two parameters for the same argument) ? (2) In <code>object.__get__(self, instance, owner)</code>, similarly, what differences are between the two parameters <code>self</code> and <code>instance</code> ? Does <code>owner</code> refer to the class (if yes, why do we need a parameter for the class, given that we can refer to the class without passing it as an argument)?</span>
<span class="comment-copy">"self" is an instance of <i>Const</i> and "inst" is an instance of class <i>X</i>.</span>
