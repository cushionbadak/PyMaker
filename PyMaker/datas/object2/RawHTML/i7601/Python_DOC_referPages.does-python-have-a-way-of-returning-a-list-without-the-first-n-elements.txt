<div class="post-text" itemprop="text">
<p>Say I have [1, 2, 3, 4, 5, 6]. And I want [3, 4, 5, 6].</p>
<p>Currently I'm doing:</p>
<pre><code>l = [1, 2, 3, 4, 5, 6]
l[-(len(l) - n):]
</code></pre>
<p>I'm not familiar with Python style, but this seems pretty hack-y.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, by slicing:</p>
<pre><code>&gt;&gt;&gt; n = 2
&gt;&gt;&gt; l = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; l[n:]
[3, 4, 5, 6]
</code></pre>
<p>Read the tutorial <a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow noreferrer">here</a> to have a further understanding on how to manipulate Python data structures that support slicing. </p>
<p>Get creative and put it in a function, as mentioned in the comments: </p>
<pre><code>def slice_it(l, n):
    return l[n:]
</code></pre>
<p>demo:</p>
<pre><code>&gt;&gt;&gt; slice_it(l, 2)
[3, 4, 5, 6]
</code></pre>
<p>And as a lambda, as shown in the comments: </p>
<pre><code>sliced_list = lambda l, n: l[n:]
</code></pre>
<p>demo:</p>
<pre><code>&gt;&gt;&gt; sliced_list(l, 2)
[3, 4, 5, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use positive int as slice lower bound:</p>
<pre><code>l = [1, 2, 3, 4, 5, 6]
l[n:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can just l[n:], rather than using negative indexing with the full length of the list.</p>
<p>For example, if <code>len(l) == 6</code> then:</p>
<pre><code>l[2:] == l[-4:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Keep in mind @idjaw has a much better answer,</p>
<p>You can also use <code>list comprehensions</code>, like so:</p>
<pre><code>&gt;&gt;&gt; l = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; n = 3
&gt;&gt;&gt; l = [x + 1 for x in range(len(l)) if x &gt;= n]
&gt;&gt;&gt; l
[4, 5, 6]
</code></pre>
</div>
<span class="comment-copy">@ChristianDean why? It runs fine.</span>
<span class="comment-copy">Try l[n:], then try l[-n], you will study from what you do</span>
<span class="comment-copy">@vaultah Your right. My bad. I screwed up copying and pasting the OP's code into my REPL session.</span>
<span class="comment-copy">Or if he wants a function <code>first_nth = lambda lst, n: lst[n:]</code>.</span>
<span class="comment-copy">@ChristianDean Yeah. Good plan. Added that. Thanks.</span>
<span class="comment-copy">Thank you! I was using slices, but every explanation I found sliced using a negative number, hence my hack-y work around.</span>
<span class="comment-copy">@Jones You are very welcome.</span>
