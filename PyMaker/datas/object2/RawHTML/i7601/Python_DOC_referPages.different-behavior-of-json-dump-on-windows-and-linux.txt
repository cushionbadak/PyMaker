<div class="post-text" itemprop="text">
<p>I wrote a python script to retrieve data from a website in json format using the requests library, and then I dump it into a json file. I have written a lot of code utilizing this data and have tested it in Windows only. Recently I shifted to a Linux system, and when the same python script is executed, the order of the keys in the json file is completely different.</p>
<p>This is the code I'm using:</p>
<pre><code>API_request = requests.get('https://www.abcd.com/datarequest')
                    alertJson_Data = API_request.json()         # To convert returned data to json
json.dump(alertJson_Data, jsonDataFile)     # for adding the json data for the alert to the file
jsonDataFile.write('\n')
jsonDataFile.close()
</code></pre>
<p>A lot of my other scripts depends on the ordering of the keys in this json file, so is there any way to maintain the same ordering that is used in Windows to be used in Linux as well?
For example in Windows the order is <code>"id":, "src":, "dest":,</code> whereas in Linux its completely different. If I directly go to the Web link on my browser, it has the same ordering as the one saved in Windows. How do I retain this ordering?</p>
</div>
<div class="post-text" itemprop="text">
<p>Can you use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a> when loading <code>json</code>?</p>
<p>e.g</p>
<pre><code>from collections import OrderedDict
alertJson_Data = API_request.json(object_pairs_hook=OrderedDict)
</code></pre>
<p>should works, because <a href="https://media.readthedocs.org/pdf/requests/latest/requests.pdf" rel="nofollow noreferrer"><code>json()</code></a> method implemented on requests take the same optional arguments as <code>json.loads</code></p>
<blockquote>
<p>json(**kwargs)</p>
<p>Returns the json-encoded content of a response, if any.
  Parameters **kwargs – Optional arguments that <strong>json.loads</strong> takes. Raises
  ValueError – If the response body does not contain valid json.</p>
</blockquote>
<p>And the doc of <a href="https://docs.python.org/3/library/json.html#json.loads" rel="nofollow noreferrer"><code>json.loads</code></a> specify:</p>
<blockquote>
<p>object_hook, if specified, will be called with the result of every
  JSON object decoded and its return value will be used in place of the
  given dict. This can be used to provide custom deserializations (e.g.
  to support JSON-RPC class hinting).</p>
<p>object_pairs_hook, if specified will be called with the result of
  every JSON object decoded with an ordered list of pairs. The return
  value of object_pairs_hook will be used instead of the dict. This
  feature can be used to implement custom decoders that rely on the
  order that the key and value pairs are decoded (<strong>for example,
  collections.OrderedDict() will remember the order of insertion</strong>). If
  object_hook is also defined, the object_pairs_hook takes priority.</p>
</blockquote>
</div>
<span class="comment-copy">Ordering is not preserved in a <code>dict</code>, try to use <code>collections.OrderedDict</code></span>
<span class="comment-copy">Generally speaking, the order should not matter in Json.</span>
<span class="comment-copy">@quinz My other scripts use string patterns, which depend ordering of the keys in the json file. Which is why I need the same ordering in Linux as well</span>
<span class="comment-copy">@ArjunBalgovind Then those other scripts should probably do it properly instead.</span>
<span class="comment-copy">Why not use <code>sort_keys=True</code> parameter in the  <code>json.dump</code> method to get a consistent ordering between the two systems?</span>
<span class="comment-copy">Thanks alot dude! I was unable to test this till today. It works perfectly on both Windows and Linux. This is exactly what I was looking for.</span>
