<div class="post-text" itemprop="text">
<p>I have created a fileSearch program in pycharm and I would like to run it in my command line using arguments from the user.</p>
<pre><code>import os
from os.path import join

lookfor = "*insert file name*"

for root, dirs, files in os.walk("*choose directory*"):
print("searching"), root
if lookfor in files:
    print "Found %s" % join(root, lookfor)
    break
</code></pre>
<p>I would like to run this in the command line using user inputs like:</p>
<pre><code>C:\..\..&gt; fileSearch.py --fileName --Directory
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure if you can but you can write a first code that ask the directory and then launch your other code from this code</p>
</div>
<div class="post-text" itemprop="text">
<p>For command line apps I like to use the <code>Click</code> package <a href="http://click.pocoo.org/5/" rel="nofollow noreferrer">http://click.pocoo.org/5/</a></p>
<p>in your case it would be something like so.</p>
<pre><code># app.py
import click

@click.command()
@click.option('-f', '--filename', help='File name')
@click.option('-d', '--directory', help='Directory')
def run(filename, directory):
    for root, dirs, files in os.walk(directory):
        print('Searching: {}'.format(root))
        if filename in files:
            print "Found %s" % join(root, filename)
            break

if __name__ == '__main__':
    run()
</code></pre>
<p>Then from the command line you can run</p>
<pre><code>$ python app.py -f file.txt -d dirname
$ python app.py --filename=file.txt --directory=dirname
$ python app.py --help // prints your help text
</code></pre>
<p>Click has a ton of great features to build out robust CLI apps. Like I said it is my goto.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>argparse</code> for command input parameter parser with option. you can also use <code>sys.arv</code>. For more details you can go through <a href="https://docs.python.org/3/howto/argparse.htmlhttp://" rel="nofollow noreferrer">here</a>.</p>
<pre><code>import os
from os.path import join
# argparse is the python module for user command line parameter parser.
import argparse

# command input from the user with given option
parser = argparse.ArgumentParser()
parser.add_argument('-fileName.', action='store',
                    dest='fileName',
                    help='Give the file Name')
parser.add_argument('-Directory', action='store',
                    dest='dir',
                    help='Give the Directory Name')

# parsing the parameter into results
results = parser.parse_args()

# lookfor = "*insert file name*"

# retrieve the store value from the command line input.
lookfor = results.fileName
dir = results.dir

# for root, dirs, files in os.walk("*choose directory*"):
for root, dirs, files in os.walk(dir):
    print("searching"), root
    if lookfor in files:
        print("Found %s" % join(root, lookfor))
        break
</code></pre>
<p><strong>command line example:</strong></p>
<p><code>python fileSearch.py -fileName filename.txt -Directory C:/MyProgram</code></p>
</div>
<span class="comment-copy">for arguments you may want to use <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a> to run a script from the command line simply type <a href="http://pythoncentral.io/execute-python-script-file-shell/" rel="nofollow noreferrer">python path/to/script</a></span>
