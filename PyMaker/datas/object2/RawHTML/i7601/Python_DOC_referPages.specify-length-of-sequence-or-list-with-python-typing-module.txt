<div class="post-text" itemprop="text">
<p>I'm giving the Python <code>typing</code> module a shot.</p>
<p>I know that it's valid to specify the length of a <code>List</code> like the following*:</p>
<pre><code>List[float, float, float]   # List of 3 floats &lt;-- NOTE: this is not valid Python
</code></pre>
<p>Is there any shorthand for longer lists? What if I want to set it to 10 floats?</p>
<pre><code>List[float * 10]   # This doesn't work.
</code></pre>
<p>Any idea if this is possible, this would be handy.</p>
<hr/>
<p>*NOTE: It turns out that supplying multiple arguments to <code>Sequence[]</code> (and its subclasses) in this manner is currently NOT valid Python. Furthermore, it is currently not possible to specify a <code>Sequence</code> length using the <code>typing</code> module in this way.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't. A list is a mutable, <em>variable length</em> structure. If you need a fixed-length structure, use a tuple instead:</p>
<pre><code>Tuple[float, float, float, float, float, float, float, float, float, float]
</code></pre>
<p>Or better still, use a <a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple" rel="nofollow noreferrer">named tuple</a>, which has both indices and named attributes:</p>
<pre><code>class BunchOfFloats(NamedTuple):
    foo: float
    bar: float
    baz: float
    spam: float
    ham: float
    eggs: float
    monty: float
    python: float
    idle: float
    cleese: float
</code></pre>
<p>A list is simply the wrong data type for a fixed-length data structure.</p>
</div>
<div class="post-text" itemprop="text">
<p>So far, only tuples support specifying a fixed number of fields and it has no short-cut for a fixed number of repetitions.</p>
<p>Here's the definition and docstring from the <a href="https://docs.python.org/3/library/typing.html#module-typing" rel="nofollow noreferrer"><code>typing</code></a> module:</p>
<pre><code>class Tuple(tuple, extra=tuple, metaclass=TupleMeta):
    """Tuple type; Tuple[X, Y] is the cross-product type of X and Y.

    Example: Tuple[T1, T2] is a tuple of two elements corresponding
    to type variables T1 and T2.  Tuple[int, float, str] is a tuple
    of an int, a float and a string.

    To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
    """

    __slots__ = ()

    def __new__(cls, *args, **kwds):
        if _geqv(cls, Tuple):
            raise TypeError("Type Tuple cannot be instantiated; "
                            "use tuple() instead")
        return _generic_new(tuple, cls, *args, **kwds)
</code></pre>
<p>Since lists are a mutable, variable-length type, it doesn't make any sense to use a type declaration to specify a fixed size.</p>
</div>
<span class="comment-copy">Thanks Raymond, clear enough.  While both answers I've received on here are accurate and clarifying, I'm still not 100% sure on the best way to hint for functions that really need set length Sequence input. I suppose that just putting this in the docstring isn't too bad, but that seems like a shame. (I'm really enjoying how PyCharm picks up on these hints in the generated help for each method)</span>
<span class="comment-copy">"so far..." Are there any plans for specifying a fixed-length, mutable sequence <code>Generic</code> in the <code>typing</code> module at some point?</span>
