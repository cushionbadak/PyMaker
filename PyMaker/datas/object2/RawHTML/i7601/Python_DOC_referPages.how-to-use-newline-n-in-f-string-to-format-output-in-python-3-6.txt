<div class="post-text" itemprop="text">
<p>I would like to know how to format this case in a Pythonic way with f-strings:</p>
<pre><code>names = ['Adam', 'Bob', 'Cyril']
text = f"Winners are:\n{'\n'.join(names)}"
print(text)
</code></pre>
<p>The problem is that <code>'\'</code> cannot be used inside an f-string.
Expected output:</p>
<pre><code>Winners are:
Adam
Bob
Cyril
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't. Backslashes cannot appear inside the curly braces <code>{}</code>; doing so results in a <code>SyntaxError</code>: </p>
<pre><code>&gt;&gt;&gt; f'{\}'
SyntaxError: f-string expression part cannot include a backslash
</code></pre>
<p>This is specified in the <a href="https://www.python.org/dev/peps/pep-0498/#escape-sequences" rel="noreferrer">PEP</a> for f-strings:</p>
<blockquote>
<p>Backslashes may not appear inside the expression portions of f-strings, [...]</p>
</blockquote>
<p>One option is assinging <code>'\n'</code> to a name and then <code>.join</code> on that inside the <code>f</code>-string; that is, without using a literal:</p>
<pre><code>names = ['Adam', 'Bob', 'Cyril']
nl = '\n'
text = f"Winners are:{nl}{nl.join(names)}"
print(text)
</code></pre>
<p>Results in:</p>
<pre><code>Winners are:
Adam
Bob
Cyril
</code></pre>
<p>Another option, as specified by @wim, is to use <code>chr(10)</code> to get <code>\n</code> returned and then join there. <code>f"Winners are:\n{chr(10).join(names)}"</code></p>
<p>Yet another, of course, is to <code>'\n'.join</code> beforehand and then add the name accordingly:</p>
<pre><code>n = "\n".join(names)
text = f"Winners are:\n{n}"
</code></pre>
<p>which results in the same output.</p>
<h2><em>Note:</em></h2>
<p>This is one of the small differences between <code>f</code>-strings and <code>str.format</code>. In the latter, you can always use punctuation granted that a corresponding wacky dict is unpacked that contains those keys:</p>
<pre><code>&gt;&gt;&gt; "{\\} {*}".format(**{"\\": 'Hello', "*": 'World!'})
"Hello World!"
</code></pre>
<p><sub>(Please don't do this.)</sub></p>
<p>In the former, punctuation isn't allowed because you can't have identifiers that use them.</p>
<hr/>
<p>Aside: I would definitely opt for <code>print</code> or <code>format</code>, as the other answers suggest as an alternative. The options I've given only apply if you <em>must</em> for some reason use f-strings. </p>
<p>Just because something is new, doesn't mean you should try and do everything with it ;-)</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need f-strings or other formatters to print a list of strings with a separator. Just pass the <code>sep</code> keyword argument to <a href="https://docs.python.org/3.6/library/functions.html#print" rel="noreferrer"><code>print()</code></a>:</p>
<pre><code>names = ['Adam', 'Bob', 'Cyril']
print("Winners are:", *names, sep="\n")
</code></pre>
<p>Output:</p>
<pre><code>Winners are:
Adam
Bob
Cyril
</code></pre>
<p>That said, using <a href="https://docs.python.org/3.6/library/stdtypes.html#str.format" rel="noreferrer"><code>str.format()</code></a> here would be arguably simpler and more readable than any f-string workaround:</p>
<pre><code>print("Winners are:\n{}".format("\n".join(names))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The other answers give ideas for how to put the newline character into a f-string field. However, I would argue that for the example the OP gave (which may or may not be indicative of OP's actual use case), none of these ideas should actually be used. </p>
<p>The entire point of using f-strings is increasing code readability. There is nothing you can do with f-strings that you cannot do with <code>format</code>. Consider carefully whether there is anything <em>more readable</em> about this (if you could do it): </p>
<pre><code>f"Winners are:\n{'\n'.join(names)}"
</code></pre>
<p>...or this:</p>
<pre><code>newline = '\n'
f"Winners are:\n{newline.join(names)}"
</code></pre>
<p>...or this:</p>
<pre><code>"Winners are:\n{chr(10).join(names)}"
</code></pre>
<p>vs. this: </p>
<pre><code>"Winners are:\n{}".format('\n'.join(names))
</code></pre>
<p>The last way is at least as readable, if not more so. </p>
<p>In short: don't use a hammer when you need a screwdriver just because you have a shiny new one. Code is read much more often than it is written. </p>
<p>For other use cases, yes, it's possible the <code>chr(10)</code> idea or <code>newline</code> idea may be appropriate. But not for the one given. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can't use backslashes in f-strings as others have said, but you could step around this using <a href="https://docs.python.org/3/library/os.html#os.linesep" rel="nofollow noreferrer"><code>os.linesep</code></a> (although note this won't be <code>\n</code> on all platforms, and is not recommended unless reading/writing binary files; see <a href="https://stackoverflow.com/users/2437514/rick-teachey">Rick's</a> comments):</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; names = ['Adam', 'Bob', 'Cyril']
&gt;&gt;&gt; print(f"Winners are:\n{os.linesep.join(names)}")
Winners are:
Adam
Bob
Cyril 
</code></pre>
<p>Or perhaps in a less readable way, but guaranteed to be <code>\n</code>, with <a href="https://docs.python.org/3/library/functions.html#chr" rel="nofollow noreferrer"><code>chr()</code></a>:</p>
<pre><code>&gt;&gt;&gt; print(f"Winners are:\n{chr(10).join(names)}")
Winners are:
Adam
Bob
Cyril
</code></pre>
</div>
<span class="comment-copy"><code>f"Winners are:\n{chr(10).join(names)}"</code></span>
<span class="comment-copy">Best answer so far. I use star unpacking in the print function all the time these days to have a look inside some object, e.g. <code>print(*dir(some_object), sep='\n')</code> or <code>print(*vars(some_object), sep='\n')</code>.</span>
<span class="comment-copy">Drive-by downvoter, what say thee?</span>
<span class="comment-copy">Readability is subjective :) ... old practice suits skilled ones and can be more readable in some cases, but can be almost unknown to noobs and hence unreadable for them. Sorry for philosophical point of view.</span>
<span class="comment-copy">@malmed Readability generally is not subjective. Definitely not in this case. But it's not worth arguing about at length.</span>
<span class="comment-copy">@malmed You're right that readability is "subjective" in the sense that it is <i>trainable</i> by prior experience. But because our brains and senses have limitations, readability can be objectively measured in terms of how physically easy it is to scan the relevant text, how often human brains tend to pattern-match it correctly, how correctly it hints to our brain predictions about other code (including the beginning of a statement/line hinting at what the end will be), and how readily it becomes more readable to a novice.</span>
<span class="comment-copy">Wasn't me, but using <code>os.linesep</code> is <a href="https://docs.python.org/3/library/os.html?highlight=linesep#os.linesep" rel="nofollow noreferrer">not a good idea</a> when writing text.</span>
<span class="comment-copy">@RickTeachey I did already add the caveat in parentheses and suggest an alternative approach. Anyway, the OP is printing to screen, not writing to a file opened in text mode</span>
<span class="comment-copy">I don't think it matters. <code>os.linesep</code> is just <a href="https://stackoverflow.com/questions/38074811/what-is-os-linesep-for">for reading, or reading and writing in binary mode</a>. I know it will work the same in this case, but it's a bad habit to start. But again: I wasn't the downvote. The caveat is good enough for me. :)</span>
<span class="comment-copy">@RickTeachey Ok thanks, I've expanded the caveat</span>
