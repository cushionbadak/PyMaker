<div class="post-text" itemprop="text">
<p>For example, I have following two lists</p>
<p>listA=['one', 'two' , 'three']
   listB=['apple','cherry','watermelon']</p>
<p>How can I pair those two lists to get this output, using <code>map</code> and <code>lambda</code>?</p>
<pre><code>one apple
two cherry
three watermelon
</code></pre>
<p>I know how to do it by the list comprehension,</p>
<pre><code>[print(listA[i], listB[i]) for i in range(len(listA))]
</code></pre>
<p>but I can't figure out a <code>map</code> and <code>lambda</code> solution.  Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest solution would be to simply use <code>zip</code> as in:</p>
<pre><code>&gt;&gt;&gt; listA=['one', 'two' , 'three']
&gt;&gt;&gt; listB=['apple','cherry','watermelon']
&gt;&gt;&gt; list(zip(listA, listB))
[('one', 'apple'), ('two', 'cherry'), ('three', 'watermelon')]
</code></pre>
<p>I guess it would be possible to use <code>map</code> and lambdas, but that would just needlessly complicate things as this is really the ideal case for <code>zip</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here what I got based on what you need (map and lambda),</p>
<p>Input:</p>
<pre><code>listA=['one', 'two' , 'three']
listB=['apple','cherry','watermelon']
list(map(lambda x, y: x+ ' ' +y, listA, listB))
</code></pre>
<p>Output: </p>
<pre><code>['one apple', 'two cherry', 'three watermelon']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> like below:</p>
<pre><code>for item in zip(list_1, list_2):
    print(item)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>specifically using map and lambda as asked...</p>
<pre><code>list(map(lambda tup: ' '.join(list(tup)), zip(listA,listB)))
</code></pre>
<p>though I'd probably break that up to make it more readable</p>
<pre><code>zipped   = zip(listA,listB)
tup2str  = lambda tup: ' '.join(list(tup))
result   = list(map(tup2str, zipped))
# ['one apple', 'two cherry', 'three watermelon']
</code></pre>
<p>EDITED - per comment below, <code>listCombined = list(zip(listA,listB))</code> was a waste</p>
</div>
<div class="post-text" itemprop="text">
<p>Using list comprehension and zip:</p>
<pre><code>listA=['one', 'two' , 'three']

listB=['apple','cherry','watermelon']

new_list = [a+" "+b for a, b in zip(listA, listB)]
</code></pre>
<p>Output:</p>
<pre><code>['one apple', 'two cherry', 'three watermelon']
</code></pre>
</div>
<span class="comment-copy">Why not <code>zip()</code>?</span>
<span class="comment-copy">This is the standard use case for <code>zip()</code>.</span>
<span class="comment-copy"><code>print(..)</code>? Why <code>print</code>? Furthermore this looks like homework.</span>
<span class="comment-copy">You can't use list comprehension in your case.</span>
<span class="comment-copy">Do <b>not</b> use <code>print</code> within a list-comprehension. That is <i>really bad style</i>, because it uses a side-effect inside a functional construct.</span>
<span class="comment-copy">Don't use <code>list(zip(listA,listB)))</code>... <b>why are you making a list out of your zip iterator?</b> That defeats the whole purpose.</span>
<span class="comment-copy">you're right.  edited.</span>
