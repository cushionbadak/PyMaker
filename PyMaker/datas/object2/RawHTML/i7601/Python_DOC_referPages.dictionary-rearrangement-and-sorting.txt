<div class="post-text" itemprop="text">
<p>Required of counting the number of different values appear in the dict <code>books</code>, and in accordance with the number of occurrences of value reverse output.</p>
<pre><code>books = {
    123457889: 'A',
    252435234: 'A',
    434234341: 'B',
    534524365: 'C',
    354546589: 'D',
    146546547: 'D',
    353464543: 'F',
    586746547: 'E',
    511546547: 'F',
    546546647: 'F',
    541146127: 'F',
    246546127: 'A',
    434545127: 'B',
    533346127: 'E',
    544446127: 'F',
    546446127: 'G',
    155654627: 'G',
    546567627: 'G',
    145452437: 'H',
}
</code></pre>
<p><strong>Output like this:</strong></p>
<pre><code>'F': 5,
'A': 3,
'G': 3,
'B': 2,
'D': 2,
'E': 2,
'C': 1,
'H': 1
</code></pre>
<p><strong>I tried it:</strong></p>
<pre><code>import pprint

# to get the values from books
clist = [v for v in books.values()]

# values in books as keys in count,   
count = {}
for c in clist:
    count.setdefault(c, 0)
    count[c] += 1

pprint.pprint(count)
</code></pre>
<p><strong>But dict couldn't sorting.</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Your code works fine. You can do this much easier using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Counter</a> from the collections module to do this for you. Simply pass <code>books.values()</code> in to <code>Counter</code>: </p>
<pre><code>from collections import Counter
counts = Counter(books.values())
print(counts)
</code></pre>
<p>Output:</p>
<pre><code>Counter({'F': 5, 'A': 3, 'G': 3, 'E': 2, 'D': 2, 'B': 2, 'H': 1, 'C': 1})
</code></pre>
<p>To provide the layout of the output you are expecting in order of value, you can perform a simple iteration using the <code>most_common</code> method and print each line:</p>
<pre><code>for char, value in counts.most_common():
    print("'{}': {}".format(char, value))
</code></pre>
<p>Output:</p>
<pre><code>'F': 5
'G': 3
'A': 3
'E': 2
'D': 2
'B': 2
'C': 1
'H': 1
</code></pre>
</div>
<span class="comment-copy">To print the counter <i>exactly</i> the way OP shows I would implement something like this, using <code>.most_common()</code> : <code>for value, count in counts.most_common(): print("'"+str(value)+"': "+str(count)+",")</code></span>
<span class="comment-copy">@ViníciusAguiar Sure. I added it to the end of my question, however the <code>most_common</code> is not necessary in this case. Seeing that the output is going to be for the entire collection, then simply using the <code>items</code> method instead would suffice.</span>
<span class="comment-copy">Cool! Yes, I used <code>most_common</code> because in the desired output the items are sorted, and as far as I know this is the most efficient way to print them sorted, there may be a better one for sure!</span>
<span class="comment-copy">@ViníciusAguiar That's hilarious. I <i>just</i> noticed it was in order by value! I'm correcting it now. Thanks for noticing that!</span>
<span class="comment-copy">Thanks for your perfect answer.</span>
