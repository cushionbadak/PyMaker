<div class="post-text" itemprop="text">
<p>My file looks like this: </p>
<pre><code>1497484825;34425;-4,28,-14;-4,28,-14;-4,28,-14;-4,28,-14;-4,28,-14;-4,28,-14
1497484837;34476;-4,28,-14;-4,28,-14;-4,28,-14;-4,28,-14;-4,28,-14;-4,28,-14
</code></pre>
<p>I want to import it into numpy array using np.genfromtxt. The biggest problem is that it has ';' and ',' as delimiters.
My try:</p>
<pre><code>import numpy as np
import io

s = io.StringIO(open('2e70dfa1.csv').read().replace(';',','))

data = np.genfromtxt(s,dtype=int,delimiter=',')
</code></pre>
<p>I get error: </p>
<blockquote>
<p>TypeError: Can't convert 'bytes' object to str implicitly</p>
</blockquote>
<p>How to solve it? I'm also open to completely new (better) ideas.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p><strong>Parameters</strong>:<br/>
<em>fname</em> : file, str, pathlib.Path, list of str, generator
  File, filename, list, or generator to read. If the filename extension
  is gz or bz2, the file is first decompressed. Note that generators
  must return byte strings in Python 3k. The strings in a list or
  produced by a generator are treated as lines.</p>
</blockquote>
<p>Probably easier and more efficient to give it a generator, just bearing in mind it must yield byte-strings:</p>
<pre><code>&gt;&gt;&gt; with open('2e70dfa1.csv', 'rb') as f:
...     clean_lines = (line.replace(b';',b',') for line in f)
...     data = np.genfromtxt(clean_lines, dtype=int, delimiter=',')
...
&gt;&gt;&gt; data
array([[1497484825,      34425,         -4,         28,        -14,
                -4,         28,        -14,         -4,         28,
               -14,         -4,         28,        -14,         -4,
                28,        -14,         -4,         28,        -14],
       [1497484837,      34476,         -4,         28,        -14,
                -4,         28,        -14,         -4,         28,
               -14,         -4,         28,        -14,         -4,
                28,        -14,         -4,         28,        -14]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html" rel="nofollow noreferrer">Per the docs</a> for numpy.genfromtxt:</p>
<blockquote>
<p>Note that generators must return byte strings in Python 3k.</p>
</blockquote>
<p>So instead of creating an <code>StringIO</code> object, create a <a href="https://docs.python.org/3/library/io.html#binary-i-o" rel="nofollow noreferrer"><code>BytesIO</code></a>:</p>
<pre><code>import numpy as np 
import io

s = io.BytesIO(open('2e70dfa1.csv', 'rb').read().replace(b';',b','))
data = np.genfromtxt(s,dtype=int,delimiter=',')
</code></pre>
<p>yields</p>
<pre><code>array([[1497484825,      34425,         -4,         28,        -14,
                -4,         28,        -14,         -4,         28,
               -14,         -4,         28,        -14,         -4,
                28,        -14,         -4,         28,        -14],
       [1497484837,      34476,         -4,         28,        -14,
                -4,         28,        -14,         -4,         28,
               -14,         -4,         28,        -14,         -4,
                28,        -14,         -4,         28,        -14]])
</code></pre>
<hr/>
<p>Note that if you have <a href="http://pandas.pydata.org/" rel="nofollow noreferrer">Pandas</a> installed, you could use <code>pd.read_table</code> which would allow you to specify a regex pattern as a delimiter:</p>
<pre><code>import pandas as pd     
df = pd.read_table('2e70dfa1.csv', sep=';|,', engine='python', header=None)
print(df)
</code></pre>
<p>yields</p>
<pre><code>           0      1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19
0  1497484825  34425  -4  28 -14  -4  28 -14  -4  28 -14  -4  28 -14  -4  28 -14  -4  28 -14
1  1497484837  34476  -4  28 -14  -4  28 -14  -4  28 -14  -4  28 -14  -4  28 -14  -4  28 -14
</code></pre>
<p><code>pd.read_table</code> returns a DataFrame. If you need a NumPy array, you could access it through its <code>values</code> attribute:</p>
<pre><code>In [24]: df.values
Out[24]: 
array([[1497484825,      34425,         -4,         28,        -14,
                -4,         28,        -14,         -4,         28,
               -14,         -4,         28,        -14,         -4,
                28,        -14,         -4,         28,        -14],
       [1497484837,      34476,         -4,         28,        -14,
                -4,         28,        -14,         -4,         28,
               -14,         -4,         28,        -14,         -4,
                28,        -14,         -4,         28,        -14]])
</code></pre>
</div>
