<div class="post-text" itemprop="text">
<p>I'm trying to split any number string such as <code>3.1415926535897932384626433832795028841971</code> right after each <code>0</code> or group of <code>0</code>. However, I would like to keep the 0 after each group.</p>
<p>For example, the string <code>10203040506070809011</code> should be split into</p>
<pre><code>['10', '20', '30', '40', '50', '60', '70', '80', '90', '11']
</code></pre>
<p>and the string <code>3.1415926535897932384626433832795028841971</code> should be split into</p>
<pre><code>['3.14159265358979323846264338327950', '28841971']
</code></pre>
<p>I tried to split apart the string with a positive lookbehind and an empty string:</p>
<pre><code>import re
p = '(?&lt;=0+)'

re.search(p, '102030405')
&gt;&lt;_sre.SRE_Match object; span=(2, 2), match=''&gt;

'102030405'.split(p)
&gt;['102030405']
</code></pre>
<p>but this does not split apart the string at all, even though the pattern is matched.</p>
<p>I also tried just splitting apart the string based on the <code>0</code> and adding a <code>0</code> after the first couple strings, but it seems convoluted and inefficient.</p>
<pre><code>l = '102030405'.split('0')
[e+'0' for e in l[:-1]] + [l[-1]]
&gt;['10', '20', '30', '40', '5']
</code></pre>
<p>Is there any way to split a string based on a lookahead or lookbehind on an empty string? I'm asking about the general case, not just with numbers. For example, if I wanted to split apart <code>3:18am5:19pm10:28am</code> into the separate times without losing the <code>am</code> or <code>pm</code>, and get an array <code>['3:18am', '5:19pm', '10:28am']</code>, how would I go about doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>This simple regex in <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer"><code>re.findall</code></a> should suffice:</p>
<pre><code>l = re.findall(r'[.1-9]+(?:0+|$)', s)
</code></pre>
<p>Note:</p>
<ul>
<li><p><code>findall</code> returns <strong>all non-overlapping matches</strong> of pattern in string, <strong>as a list</strong> of strings.</p></li>
<li><p>for each match we want the longest string of digits (or a dot) ending with at least one zero, or the end of the string</p></li>
<li><p>the zeros in the end should not be captured as another match (hence the <code>(?:...</code>)</p></li>
</ul>
<p>Similarly for you second example:</p>
<pre><code>&gt;&gt;&gt; re.findall(r'[\d:]+(?:am|pm|$)', '3:18am5:19pm10:28am')
['3:18am', '5:19pm', '10:28am']
</code></pre>
<p>No need for lookahead/lookbehind magic, or non-greedy matching.</p>
</div>
<div class="post-text" itemprop="text">
<p>use <code>re.findall</code>:</p>
<pre><code>l = re.findall(r'(?&lt;![^0])[1-9.]+0*', s)
</code></pre>
<p>The key is to use a double negation: <em>not preceded</em> and <em>that is not a zero</em> (to match a preceding zero or the start of the string)</p>
</div>
<div class="post-text" itemprop="text">
<p>Python <code>split</code> requires a non-zero-width match.</p>
<p>You can use <code>findall</code> with this regex to get your matches:</p>
<pre><code>&gt;&gt;&gt; print re.findall(r'([\d.]+?(?:0+|$))', '10203040506070809011')
['10', '20', '30', '40', '50', '60', '70', '80', '90', '11']

&gt;&gt;&gt; print re.findall(r'([\d.]+?(?:0+|$))', '3.1415926535897932384626433832795028841971')
['3.14159265358979323846264338327950', '28841971']
</code></pre>
<p><code>([\d.]+?(?:0|$))</code> matches digit or dot that ends with <code>0</code> or end of line.</p>
<hr/>
<p><strong>Update:</strong></p>
<p>However I note from your edited question and comments that you're looking for a <strong>generic solution</strong> to use zero-width regex patterns for split operation.</p>
<p>I suggest you install very useful <a href="https://pypi.python.org/pypi/regex/" rel="nofollow noreferrer">regex module</a> in python. Version 1 of this module provides most of the PCRE features and far outweighs default <code>re</code> module.</p>
<p>Installation is pretty straight forward. Just download the tar gzip file from above link and then run:</p>
<pre><code>sudo python setup.py install
</code></pre>
<p>From inside the directory that you get after extracting the tar files. (Ignore few warning in install process).</p>
<p>Once <code>regex</code> is installed just use this code:</p>
<pre><code>&gt;&gt;&gt; import regex

&gt;&gt;&gt; regex.DEFAULT_VERSION = regex.VERSION1

&gt;&gt;&gt; regex.split(r'(?&lt;=[ap]m)(?=.)', '3:18am5:19pm10:28am')
['3:18am', '5:19pm', '10:28am']

&gt;&gt;&gt; print regex.split(r'(?&lt;=0)(?=[1-9])', '10203040506070809011')
['10', '20', '30', '40', '50', '60', '70', '80', '90', '11']

&gt;&gt;&gt; print regex.split(r'(?&lt;=0)(?=[1-9])', '3.1415926535897932384626433832795028841971')
['3.14159265358979323846264338327950', '28841971']

&gt;&gt;&gt; print regex.split(r'(?&lt;=0)(?=[1-9])', '10020')
['100', '20']
</code></pre>
</div>
<span class="comment-copy">What version of python are you using? I get an error when I try to run <code>re.search(p, '102030405')</code></span>
<span class="comment-copy">Using Python 3.6.1</span>
<span class="comment-copy">How do wish to split <code>10020</code>? <code>['100', '20']</code>, or <code>['10', '020']</code>?</span>
<span class="comment-copy"><code>['100', '20']</code>; however, that is how your RegEx already splits it :) and it isn't a hard task to change it up either, thanks!</span>
<span class="comment-copy">Is it true that there will never be a situation that I cannot solve without a lookahead or lookbehind? My original question was about matching empty strings with a specific lookahead/lookbehind, but now that I think about it I cannot imagine any case where that is the only choice.</span>
<span class="comment-copy">yes that's right. We can always solve problem by reworking regex as in this example. It would have been surely nice for python to allow empty or zero-width match for match/split.</span>
