<div class="post-text" itemprop="text">
<p>I have data sets of 5000+ lines and varying lengths In terms of elements existing in any given line of data. I have stored each line of data as a <code>list</code> where each element is stored as an <code>index</code> (i.e. some lines may have 5 indices where others may have 20). Index 2 is <strong>always</strong> the elapsed time for that line of data.</p>
<p>My script currently <code>iterates</code> through the data set using a <code>for</code> loop as a means to structure the data. See below:</p>
<pre><code>f = open(fn)
for line in iter(f):

    remove_blanks = ['']
    entries = line.split()
    ''.join([i for i in entries if i not in remove_blanks])
    trash = (entries[0], entries[1])
    time = int(entries[2])  # Time expressed as elapsed time in milliseconds
    column = [int(v) for v in entries[3:]]
</code></pre>
<p>Where the lines (from the data set) the script iterates through look something like</p>
<p><code>x y #time a b</code></p>
<p><code>d e #time f g h</code></p>
<p>Which are then put into lists like</p>
<p><code>['x', 'y', '#time', 'a', 'b']</code></p>
<p><code>['d', 'e', '#time', 'f', 'g', 'h']</code></p>
<p>I would like to iteratively subtract the initial time (non-zero) from the time present in any given line. For example, I would like to do 
<code>(#time on line x) - (#time on line 0)</code> and <code>print</code> the elapsed time for each line. Perhaps this can be done before the data structure is created, I am not sure. </p>
<p>Please help!</p>
<p>Thanks </p>
</div>
<div class="post-text" itemprop="text">
<p>You could do it directly while running the loop:</p>
<pre><code>initial_time = None
f = open(fn)
for line in iter(f):

    remove_blanks = ['']
    entries = line.split()
    ''.join([i for i in entries if i not in remove_blanks])
    trash = (entries[0], entries[1])
    time = int(entries[2])  # Time expressed as elapsed time in milliseconds
    # if on first line, initial_time is None, so set it.
    if initial_time is None:
        initial_time = time
    print(time - initial_time)

    column = [int(v) for v in entries[3:]]
</code></pre>
<p>Also it is perhaps worth pointing out that your line of code</p>
<pre><code>''.join([i for i in entries if i not in remove_blanks])
</code></pre>
<p>is currently not doing anything, because the return value from the <code>join</code> method is not being assigned to anything.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this</p>
<pre><code>f = open(fn)
t0 = None
for line in iter(f):

    remove_blanks = ['']
    entries = line.split()
    ''.join([i for i in entries if i not in remove_blanks])
    trash = (entries[0], entries[1])
    time = int(entries[2])  # Time expressed as elapsed time in milliseconds
    if t0 is None: # first iteration, store time at t0
        t0 = time
    else:
        print("Elapsed time: {}ms".format(time - t0)) # every iteration except the first, print elapsed time
    column = [int(v) for v in entries[3:]]
</code></pre>
<p>It will print the elapsed time every iteration. I think this is what you're asking for help with</p>
</div>
<div class="post-text" itemprop="text">
<p>First off you haven't stored each line as a list. This is just semantics but you seem to have stored your lines in a text file. You're reading lines from a text file, then reading the lines converting them into strings and then splitting them into lists. Remember, semantics are important when programming.</p>
<p>If we're to improve your code as well based on the sample you've provided I would do the following:</p>
<pre><code>import time
start = int(time.time() * 1000)
f = open()

for line in iter(f):
    entries = [i for i in line.split() if i]
    print(int(entries[2]) - start)
</code></pre>
<p>Now, I removed a lot of what seems like cruft for me based on what you actually want to do, which is to calculate a time based on a timestamp.</p>
<ol>
<li>You don't need the list with an empty string to confirm that there's an 
existing string (be careful of the caveats, see something like <a href="https://www.tutorialspoint.com/python/python_if_else.htm" rel="nofollow noreferrer">this</a>)</li>
<li>You're not storing the return value from the <strong>.join</strong> function, it's completely superfluous</li>
<li><strong>trash</strong> is not used either</li>
<li>Neither is <strong>column</strong></li>
</ol>
<p>Maybe you're leaving out parts of the code but this is what I could understand from your description. Now, I'm not sure why you want to compare what I call <strong>start</strong> to the the timestamp you have in the manner you do. It will always be a negative value since I presume the file is created prior to the execution of the program, I expect you actually want <em><strong>print(start - int(entries[2]))</strong></em> but that's just a guess.</p>
<p>If what you're actually looking for is to time your functions I'd recommend to look into <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">https://docs.python.org/3/library/timeit.html</a> for a start.</p>
</div>
<span class="comment-copy">So you want to print the value of <code>(#time on line x) - (#time on line 0)</code> on every iteration of the loop?</span>
<span class="comment-copy">@jacoblaw Exactly. Additional code I have written analyzes other indices of the lists, but only one list (one line of data) at a time, and then <code>print</code>s what I have analyzed. I want the value of <code>(#time on line x) - (#time on line 0)</code> <code>print</code>ed along with what's <code>print</code>ed with each line that is analyzed.</span>
<span class="comment-copy">Take a look at <code>pandas</code> or <code>numpy</code>.</span>
<span class="comment-copy">@a_guest I have attempted to use <code>pandas</code> several times but my permissions on the computer I use have caused several issues. As I am not the administrator, I have not had luck running <code>pandas</code>. I am looking for an answer that does not rely on <code>pandas</code>, but if that is the only logical method, I will give <code>pandas</code> another try.</span>
<span class="comment-copy">@DRauch Have you tried installing locally? <code>pip install --user pandas</code> Anyway I can just recommend that instead of putting lots of effort in trying to find a complicated workaround it's much more effective (and eventually pleasant) to get <code>pandas</code> to work. It's precisely dedicated to such kind of tasks.</span>
<span class="comment-copy">Thank you for the help, cleaned up my script well. I am very new to Python and programming entirely, so I am not surprised my semantics are off. As for the 'column' and 'trash' variables, they are used later in code that I did not provide for simplicity. I am not working with timestamps, but simply values for time i.e.: 4971652 milliseconds.</span>
<span class="comment-copy">@DRauch no problem, I hope you make good progress and keep trying to get better at coding. Few things are as gratifying :)</span>
