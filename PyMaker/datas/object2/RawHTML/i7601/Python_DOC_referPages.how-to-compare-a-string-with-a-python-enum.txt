<div class="post-text" itemprop="text">
<p>I just discovered the existence of an <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer">Enum</a> base class in python and I'm trying to imagine how it could be useful to me.</p>
<p>Let's say I define a traffic light status:</p>
<pre><code>from enum import Enum, auto

class Signal(Enum):
    red = auto()
    green = auto()
    orange = auto()
</code></pre>
<p>Let's say I receive information from some subsystem in my program, in the form of a string representing a colour name, for instance <code>brain_detected_colour = "red"</code>.</p>
<p><strong>How do I compare this string to my traffic light signals?</strong></p>
<p>Obviously, <code>brain_detected_colour is Signal.red</code> is <code>False</code>, because <code>Signal.red</code> is not a string.</p>
<p><code>Signal(brain_detected_colour) is Signal.red</code> fails with <code>ValueError: 'red' is not a valid Signal</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>One does not create an <a href="https://docs.python.org/3/library/enum.html#enum-members-aka-instances" rel="noreferrer">instance of an Enum</a>.
The <code>Signal(foo)</code> syntax is used to access Enum members by value, which are not intended to be used when they are <code>auto()</code>.</p>
<p>However one can use a string to <a href="https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes" rel="noreferrer">access Enum members</a> like one would access a value in a <code>dict</code>, using square brackets:</p>
<pre><code>Signal[brain_detected_colour] is Signal.red
</code></pre>
<p>Another possibility would be to compare the string to the <code>name</code> of an Enum member:</p>
<pre><code># Bad practice:
brain_detected_colour is Signal.red.name
</code></pre>
<p>But here, we are not testing identity between Enum members, but comparing strings, so it is better practice to use an equality test:</p>
<pre><code># Better practice:
brain_detected_colour == Signal.red.name
</code></pre>
<p>(The identity comparison between strings worked thanks to <a href="http://guilload.com/python-string-interning/" rel="noreferrer">string interning</a>, which is better not to be relied upon. Thanks @mwchase and @Chris_Rands for making me aware of that.)</p>
<p>Yet another possibility would be to explicitly set the member values as their names when creating the Enum:</p>
<pre><code>class Signal(Enum):
    red = "red"
    green = "green"
    orange = "orange"
</code></pre>
<p>(See <a href="https://stackoverflow.com/a/44785241/1878788">this answer</a> for a method to have this automated.) </p>
<p>Then, <code>Signal(brain_detected_colour) is Signal.red</code> would be valid.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is possible to have <code>auto()</code> return the name of the enum member as its value (which is in the <a href="https://docs.python.org/3/library/enum.html#using-automatic-values" rel="noreferrer"><code>auto</code> section of the docs</a><sup>1</sup>:</p>
<pre><code>&gt;&gt;&gt; class AutoName(Enum):
...     def _generate_next_value_(name, start, count, last_values):
...         return name
...

&gt;&gt;&gt; class Ordinal(AutoName):
...     NORTH = auto()
...     SOUTH = auto()
...     EAST = auto()
...     WEST = auto()
...

&gt;&gt;&gt; list(Ordinal)
[&lt;Ordinal.NORTH: 'NORTH'&gt;, &lt;Ordinal.SOUTH: 'SOUTH'&gt;, &lt;Ordinal.EAST: 'EAST'&gt;, &lt;Ordinal.WEST: 'WEST'&gt;]
</code></pre>
<hr/>
<p><sup>1</sup> This requires version Python 3.6, or <code>aenum</code> 2.0<sup>2</sup> (<code>aenum</code> works with Pythons as old as 2.7).</p>
<p><sup>2</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
</div>
<span class="comment-copy">Using <code>is</code> in <code>brain_detected_colour is Signal.red.name</code> is risky; it'd be better to use <code>==</code>.</span>
<span class="comment-copy">@mwchase Could you explain why, so that I can edit my answer and add an explanation?</span>
<span class="comment-copy">You're relying on string interning, murky implementation details <a href="http://guilload.com/python-string-interning/" rel="nofollow noreferrer">guilload.com/python-string-interning</a>, never use <code>is</code> unless you actually need to compare the identity of the objects</span>
<span class="comment-copy">Very nice answer.  +1</span>
<span class="comment-copy">Solved my problem. Though I could not use <code>Signal(brain_detected_colour) is Signal.red</code> (mentioned at the end of the answer, for when an enum is built with string values)... <code>Signal[brain_detected_colour] == Signal.red</code> does work however. Note that I took into account the comment saying that using <code>==</code>for the comparison is less risky.</span>
