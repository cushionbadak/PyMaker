<div class="post-text" itemprop="text">
<p>I have a directory</p>
<pre><code>* workingdir
  * raw_data
      * 2001
         - a.dat
         - b.dat
         - c.dat
      * 2002
         - d.dat
         - e.dat
         - f.data

       * 2003 etc.
</code></pre>
<p>How can I read these dat files into separate variables?</p>
<p>So far:</p>
<pre><code>import os                 # Operating system interface
import glob               # For Unix style pathnames
import numpy as np        

workingdir = '/home/x/workingdir/'

#Directory for all raw data files
rawdatadir = os.path.abspath(os.path.join(os.getcwd(), os.path.pardir, "raw_data")) 

for root, dirs, files in os.walk(rawdatadir):
    for files in [f for f in files if f.endswith(".dat")]:
        print(os.path.join(rawdatadir, files))


But this is giving me

/home/x/workingdir/raw_data/a.dat
/home/x/workingdir/raw_data/b.dat
</code></pre>
<p>So, </p>
<ol>
<li>How can I get the full path of all the files</li>
<li>And import them (np.fromfile?)</li>
<li>Any "smarter" way to do this?</li>
</ol>
<p>I come from an R/dataframe background and would prefer to mimic something near that.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get full path by replacing <code>os.path.join(rawdatadir, files)</code> with <code>os.path.join(root, files)</code></p>
<p><code>root</code> variable contains the directory path in which files listed in <code>files</code> are located.
Correct loop implementation would be:</p>
<p>Storing results can be done using <code>dict</code> if you want to access them by file name</p>
<pre><code>results = {}

for root, dirs, files in os.walk(rawdatadir):
    for file in filter(lambda f: f.endswith('.dat'), files):
        results[file] = np.fromfile(os.path.join(root, file))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/glob.html#glob.glob" rel="nofollow noreferrer">glob</a> to find all files in subdirectories, the walking over the list and storing names and content. Its <code>recursive</code> option allows the token <code>**</code> to match any path which includes subdirectories into the search.</p>
<pre><code>from glob import iglob
import os.path
workingdir = '/home/x/workingdir/'

result = {}
for f in iglob(os.path.join(workingdir, './**/*.dat'), recursive=True):
    result[f] = np.fromfile(os.path.abspath(f))
</code></pre>
<p>This cute single generator also allows us to express this in a nice pythonic form</p>
<pre><code>files = iglob(os.path.join(workingdir, './**/*.dat'), recursive=True)
result = {f: np.fromfile(os.path.abspath(f)) for f in files}
</code></pre>
</div>
<span class="comment-copy">To find all those files, use <a href="https://docs.python.org/3/library/glob.html#glob.glob" rel="nofollow noreferrer">docs.python.org/3/library/glob.html#glob.glob</a> I'll promote this to answer</span>
<span class="comment-copy">I promoted this to an answer</span>
<span class="comment-copy">I don't think it is working..</span>
<span class="comment-copy">What error are you getting?</span>
<span class="comment-copy">Okay I see the dict now. Thanks! But I would like to store them separately. How can I?</span>
<span class="comment-copy">AFAIK Python doesn't allow dynamic variable creation, you should put these into some kind of container.</span>
<span class="comment-copy">How can I put it in a list instead?</span>
<span class="comment-copy">You probably don't even need os.path.abspath, but I don't have np right now, so I can't test that</span>
