<div class="post-text" itemprop="text">
<p>It seems like an easy task, but there is a requirement that "--" is added to the command, to tell the program to pass the arguments to the script (and not process them).  For example: </p>
<pre><code>  $ blender -b testscene.blend --python localrender.py -- -start 1 -type diffuse -samples 100
</code></pre>
<p>I found a way to separate out the script arguments by using this:</p>
<pre><code>try:
    args = list(reversed(sys.argv))
    idx = args.index("--")
except ValueError:
    params = []
else:
    params = args[:idx][::-1]
    print("Script params:", params)
</code></pre>
<p>Which breaks them all up individually. Which is not what I think needs to happen. I also have tried argparse, but I think that the "--" is breaking it.  Does anybody know a complex way to parse this stuff out?  I'd like to keep the arg + value together, so that I can do something like this:</p>
<pre><code>args = parser.parse_args()
if args.index:
    logging.info("index set to: " + str(args.index))
</code></pre>
<p>But I am stuck with "blender: error: unrecognized arguments:"</p>
<p>EDIT-----------------------------
EDIT------------------------</p>
<pre><code>I am currently using this to grab the args after "--"
try:
    args = list(reversed(sys.argv))
    idx = args.index("--")
except ValueError:
    params = []
else:
    params = args[:idx][::-1]
    #print("Script params:", params)

logging.info(params)
</code></pre>
<p>which creates this structure:
['-items', '1', '-type', 'AO', '-samples', '100', '-size', '1024']</p>
<p>What should I do? I think this is going in the wrong direction, seeing as I want to group by Option:Argument.
I tried this code also, but it split the actual letters in the arguments into pieces:</p>
<pre><code>try:
    #getopt.getopt(sys.argv[1:], 'x:y:')
    #opts,val = getopt.getopt(params,"hi:o:",["objindex="])
    opts, args = getopt.getopt(params, "h:o")
except getopt.GetoptError:
    logging.info('prototype.py --items &lt;items&gt;')
    sys.exit(2)

logging.info("params:")
logging.info(params)
logging.info("opts")
logging.info(opts)

exit()

for opt, val in opts:
 # print("option" + opt)
  if opt in ("--items", "-items"):
    objindex = val
  elif opt in ("--type", "-type"):
    logging.info("found render type: " + val)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can make your own parser, by using iterators. This code will seperate your arguments into two dicts (before and after the <code>--</code>):</p>
<pre><code>args = '-b testscene.blend --python localrender.py -- -start 1 -type diffuse -samples 100'
iter = (i for i in args.split(' '))

args_dict = {'part1': {}, 'part2': {}}
current_part = 'part1'
for chunk in iter:
    if chunk == '--':
        current_part = 'part2'
        continue
    if chunk.startswith('-'):
        args_dict[current_part][chunk.lstrip('-')] = next(iter)

print(args_dict)
</code></pre>
<p>Output:</p>
<pre><code>{'part1': {'b': 'testscene.blend', 'python': 'localrender.py'},
 'part2': {'samples': '100', 'start': '1', 'type': 'diffuse'}}
</code></pre>
<p>I'm not really sure what you're trying to do with these arguments though, please clarify your question if you want more help.</p>
</div>
<span class="comment-copy"><a href="https://blender.stackexchange.com/a/8405/935">This answer</a> should cover what you want. Note that it has a link to a template included with blender for this.</span>
<span class="comment-copy">Thanks for the link. I think that's where I originally started, but it doesnt offer a solution to access the arguments as "key:value"  pairs.   its more just splitting at spaces, and indexing it all.   I'd like to use something that keeps the relationships intact.</span>
<span class="comment-copy">Notice the line <code>argv = argv[argv.index("--") + 1:]</code> copies the args that you want from <code>sys.argv</code>. Then you could use that in <a href="https://docs.python.org/3/library/argparse.html#parsing-arguments" rel="nofollow noreferrer"><code>parser.parse_args(argv)</code></a> to get the key,value pairs.</span>
<span class="comment-copy">Added an edit to respond to you TrakJohnson:</span>
<span class="comment-copy">@MattH You say in your edit that you're trying to group them as option:argument, however that is what my answer does: the key is an option (without the '-' or '--' in front) and the value is the argument. Isn't this what you are searching for ?</span>
<span class="comment-copy"><code>args = sys.argv iter = (i for i in args)</code></span>
<span class="comment-copy">Thanks! that worked!  How can I use the values that I get in part2{}?</span>
<span class="comment-copy">Update: Solved.  Thanks for the help, I obviously am new to python.   To answer my own question, I just assigned part2{} to a new dict:   <code>dict = args_dict['part2']</code></span>
