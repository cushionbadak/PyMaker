<div class="post-text" itemprop="text">
<p>I have the bottleneck in my calculations on python: I need to shuffle a large list (<code>~10^9</code> elements).
Current implementation:</p>
<pre><code>import random
random.shuffle(list)
</code></pre>
<p>With this method, only one core is involved. Is it possible to shuffle a large list in parallel?</p>
</div>
<div class="post-text" itemprop="text">
<p>You may check the <a href="https://docs.python.org/3/library/multiprocessing.html#the-process-class" rel="nofollow noreferrer">Process</a> class, which can be exemplified in this way:</p>
<pre><code>import random
from multiprocessing import Process


def worker_func(variable_1):
# your code

random.shuffle(list_single)

if __name__ == '__main__':
#Create a process list 
process_list = list()

pid = os.getpid()
print('Main Process is started and PID is: ' + str(pid))

#Start Process
list_example = [[1,2,3], [4, 5, 6], [7, 8, 9]]
for list_single in list_example:
    p = Process(target=worker_func, args=(list_single, ))
    p.start()
    child_pid = str(p.pid)
    print('PID is:' + child_pid)
    process_list.append(child_pid)
    child = multiprocessing.active_children()

while child != []:
    time.sleep(1)
    child = multiprocessing.active_children()
</code></pre>
<p>If you want to run this data in parallel, you can use <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">multithreading</a> or <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing" rel="nofollow noreferrer">multiprocessing</a>. You should define your worker function and call it in the process.</p>
</div>
<span class="comment-copy">it takes 47 minutes now</span>
<span class="comment-copy">Can you write a random number generator that runs in parallel and produces unique results covering a range? E.g. all threads combined produce all possible results, but none of them overlap. Oh, and all of them have the same probability distribution over the entire range.</span>
<span class="comment-copy">How are you consuming the shuffled list? Would something that produced results incrementally fit your use case?</span>
<span class="comment-copy">That's basically the answer. If you can do that then each of those threads produces one of your batches. Unfortunately, it doesn't seem easy to me; the non-overlapping but complete part is easy if you can just partition, but that violates the equal distribution. My first thought doesn't run in parallel but just selects a random thread to send each item to sequentially, letting the threads shuffle incoming items.</span>
<span class="comment-copy">I wonder if using incremental Fisher-Yates (<a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" rel="nofollow noreferrer">en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle</a>) and pulling out the results every <code>batchsize</code> iterations would speed things up any. It'd still require a single-threaded shuffle, but the processing would happen in parallel with the shuffle.</span>
<span class="comment-copy">You suggest splitting the list into sublist, shuffle sublists in parallel and union the sublists?</span>
<span class="comment-copy">Yeah, that can be one solution ;)</span>
<span class="comment-copy">There's something wrong with the code indentation. Stuff at the top level is outside the code blocks.</span>
<span class="comment-copy">Multiprocessing has a ton of communication overhead. This probably wouldn't actually save time.</span>
