<div class="post-text" itemprop="text">
<p>My application is running a in a loop.. sometimes it needs to call a led flash function from the loop. I pretty much did that like this;</p>
<pre><code>def led_red_flash(flashcount):
        logging.debug('Starting')

        for l in range(0,flashcount):
                GPIO.output(16,GPIO.HIGH)
                time.sleep(0.1)
                GPIO.output(16,GPIO.LOW)
                time.sleep(0.1)
        logging.debug('Stopping')

while True:
       &lt;do some stuff here&gt;
       t = threading.Thread(name='led_red_flash', target=led_red_flash(100) )
       t.start()
</code></pre>
<p>This works.. but would there be a day to put all the threading stuff in the def led_red_flash part? As my scripts gets more complex it will make it harder to read. So something like this;</p>
<pre><code>while True:
       &lt;do some stuff here&gt;
       led_red_flash(100)
</code></pre>
<p>The above is a very simplified version of the loop I am running. In the actual script it would not be possible to have multiple instances of led_red_flash run at the same time.. so this is not an issue. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a wrapper function:</p>
<pre><code>def _led_red_flash(flashcount):
    logging.debug('Starting')
    for l in range(0,flashcount):
        GPIO.output(16,GPIO.HIGH)
        time.sleep(0.1)
        GPIO.output(16,GPIO.LOW)
        time.sleep(0.1)
    logging.debug('Stopping')


def led_red_flash(flashcount):
    t = threading.Thread(name='led_red_flash', target=_led_red_flash, args=(100,))
    t.start()
    return t
</code></pre>
<p>BTW, your original code didn't execute <code>led_red_flash</code> in a separate thread. I justed called <code>led_red_flash</code> (<code>led_red_flash(100)</code>).</p>
<p>You should pass the function itself, not the return value of the function call. See <a href="https://docs.python.org/3/library/threading.html#threading.Thread" rel="nofollow noreferrer"><code>threading.Thread</code></a>.</p>
<pre><code>threading.Thread(name='led_red_flash', target=led_red_flash(100))
</code></pre>
<p>to </p>
<pre><code>threading.Thread(name='led_red_flash', target=led_red_flash, args=(100,))
</code></pre>
</div>
<span class="comment-copy">Are you asking for design review, or do you have a programming issue?</span>
<span class="comment-copy">This does the job... I had my trying a wrapper myself but I guess it didn't work because arguments. Thanks.</span>
