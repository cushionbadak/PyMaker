<div class="post-text" itemprop="text">
<p>I have a text like this:</p>
<pre><code>@110605!~~!Abhay_f!~~!Abhay%20Raj%20Fac!&gt;&gt;! @138547!~~!testvarun!~~!Varun%20Test%20User!&gt;&gt;! @136588!~~!jitendra_pathak!~~!Jitendra%20Pathak!&gt;&gt;! #gffj #varun okjjbbbd
</code></pre>
<p>and in this string I want to replace <code>!~~!</code> with <code>""</code>.</p>
<p>I am using a <code>template tag</code> and I used this method but it didn't work for me:</p>
<pre><code>@register.filter("metioned_user_text_encode")
def metioned_user_text_encode(string, args):
    search = args.split(args[0])[1]
    replace = args.split(args[0])[2]

    return re.sub(search, replace, string)
</code></pre>
<p>In my template:-</p>
<pre><code>result_data_for_editing.newsText | metioned_user_text_encode:"/l(u+)pin/m\1gen"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unless I completely misunderstood your intentions, you are asking one thing but your code shows a different expected behavior than the one you ask for.<br/>
I will try to answer both cases:</p>
<hr/>
<p><strong>Case 1:</strong></p>
<p>You expect to get a multitude of separators like <code>!~~!</code> or <code>!&gt;&gt;!</code> etc., and you need a regex to replace all of them with an empty string (<code>''</code>).</p>
<p>Try the following:</p>
<pre><code>import re

SEPARATORS = [
    '!~~!', 
    '!&gt;&gt;!', 
    other separators...
]

@register.filter("metioned_user_text_encode")
def metioned_user_text_encode(string):       
    return re.sub('|'.join(SEPARATORS), '', string)
</code></pre>
<p>Explanation:</p>
<ul>
<li>The <code>|</code> regex operator ensures that our pattern will try to match every separator given in <code>SEPARATORS</code> with the given string (<code>s</code>).</li>
<li>The <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub()</code> method</a> will return the string with every pattern matching any of our <code>SEPARATORS</code>, replaced by the empty string.</li>
</ul>
<hr/>
<p><strong>Case 2:</strong></p>
<p>You will receive as arguments a series of separators and an equally sized series of replacements for those separators. In that case, try:</p>
<pre><code>@register.filter("metioned_user_text_encode")
def metioned_user_text_encode(string, args):
    returned_string = string
    search = args.split(args[0])[1]
    replace = args.split(args[0])[2]

    for i in range(len(search)):
        returned_string = re.sub(search[i], replace[i], returned_string)

    return returned_string
</code></pre>
<p>Explanation:</p>
<ul>
<li>The <code>for</code> loop will traverse the <code>search</code> and <code>replace</code> lists for every separator and the corresponding replacement.</li>
<li>The <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub()</code> method</a> will return in each iteration, the <code>returned_string</code> with the <code>search[i]</code> separator replaced by the <code>replace[i]</code> substitute. </li>
</ul>
<hr/>
<p>Good luck :)</p>
</div>
<div class="post-text" itemprop="text">
<p>you can use the fileinput module which makes find and replace easy</p>
<pre><code>import fileinput

with fileinput.FileInput(inputFile, inplace=True, backup='.back') as f:
    for line in f:
        print(line.replace(textToSearch, textToReplace), end='')
</code></pre>
<p>Or you can use the replace method</p>
<pre><code>str.replace("!~~!", "")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this:</p>
<pre><code>a = '@110605!~~!Abhay_f!~~!Abhay%20Raj%20Fac!&gt;&gt;! @138547!~~!testvarun!~~!'
b = a.replace(!~~!,'""')
print(b)
</code></pre>
</div>
<span class="comment-copy">Did you consider template strings are not <a href="https://stackoverflow.com/a/7262918/1600649">raw strings</a>?</span>
<span class="comment-copy">will it work with django template tag</span>
<span class="comment-copy"><code>str.replace("!~~!", "")</code> should work. where <code>str</code> is the name of the string.</span>
