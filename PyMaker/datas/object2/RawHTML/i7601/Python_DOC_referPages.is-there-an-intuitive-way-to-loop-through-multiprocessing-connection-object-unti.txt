<div class="post-text" itemprop="text">
<p>I am developing a tool to scrape tweets and process them in order to build a word frequency analysis by user. Due to the sheer volume of the data needed to be processed, I am splitting the word processing section away from the tweet scraping section.</p>
<p><a href="https://docs.python.org/3.6/library/multiprocessing.html#multiprocessing.Connection" rel="nofollow noreferrer"><code>multiprocessing.Connection</code></a> (<code>rec, sen = multiprocessing.Pipe(False)</code>) provides a useful utility to transfer data between processes. However, I cannot find a utility that the receiving end may tell when EOF has been reached when the sending end explicitly calls <code>Connection.close()</code>. I attempted:</p>
<pre><code>def yielder(conn):
    yield conn.recv()
</code></pre>
<p>but this somehow stops after returning only the first item in the pipe.
I am currently bypassing the problem with a Try-Except statement inside a <code>while True</code> loop:</p>
<pre><code>try:
    status = rec.recv()
    ...process data...
except BrokenPipeError:
    break
</code></pre>
<p>I can also see this be done through sending a specific end marker and let the receiving end terminate the process when it receives that. But those are very counter-intuitive and ugly ways to do it, violating the Zen of Python:</p>
<blockquote>
<p>Beautiful is better than ugly.</p>
<p>...</p>
<p>There should be one-- and preferably only one --obvious way to do it.</p>
</blockquote>
<p>Am I missing something? Is there a simple, elegant way like c++'s </p>
<pre><code>while getline(istreamobject, line)
</code></pre>
<p>to perform my task?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the second form of calling <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter</code></a>: <code>iter(callable, sentinel) -&gt; iterator</code> to make it into a for loop. You still would have to catch the exception though.</p>
<pre><code>try:
    for status in iter(conn.recv, None):
        ...
except BrokenPipeError:
    pass
</code></pre>
<p>If instead of closing the pipe, you send an "eof" down the pipe, you can remove the <code>try/except</code> and do <code>for status in iter(conn.recv, 'EOF message')</code>, and when <code>'EOF message'</code> is recieved (can be anything), <code>iter</code> stops the for loop. Usually the EOF message is an empty string, so it is common to see things like:</p>
<pre><code>for line in iter(file.read, ''):
    ...
</code></pre>
<hr/>
<p>The <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipes</a> have this function called <code>iter_except</code>. This is basically what you wanted to do before with the <code>yielder</code> function</p>
<pre><code>def iter_except(func, exception, first=None):
    """ Call a function repeatedly until an exception is raised.

    Converts a call-until-exception interface to an iterator interface.
    Like builtins.iter(func, sentinel) but uses an exception instead
    of a sentinel to end the loop.

    Examples:
        iter_except(functools.partial(heappop, h), IndexError)   # priority queue iterator
        iter_except(d.popitem, KeyError)                         # non-blocking dict iterator
        iter_except(d.popleft, IndexError)                       # non-blocking deque iterator
        iter_except(q.get_nowait, Queue.Empty)                   # loop over a producer Queue
        iter_except(s.pop, KeyError)                             # non-blocking set iterator

    """
    try:
        if first is not None:
            yield first()            # For database APIs needing an initial cast to db.first()
        while True:
            yield func()
    except exception:
        pass
</code></pre>
<p>So, you could also do something like this:</p>
<pre><code>for status in iter_except(conn.recv, BrokenPipeError):
    ...
</code></pre>
<p>Or just fixing the <code>yielder</code> function:</p>
<pre><code>def yielder(conn):
    try:
        while True:
            yield conn.recv()
    except BrokenPipeError:
        pass

for status in yielder(conn):
    ...
</code></pre>
</div>
<span class="comment-copy">The yielder function does't throw any exception. it simply yields the first value in pipe then stop.</span>
<span class="comment-copy">@flymousechiu Did it still only yield the first value without the <code>while True</code> loop?</span>
<span class="comment-copy">yes, as evident if you try the following: <code>import multiprocessing as mp</code>, <code>def yielder(conn): yield conn.recv()</code>, <code>rec, sen = mp.Pipe(False)</code>, <code>for i in range(10): sen.send(i)</code>, <code>list(yielder(rec))</code>. should return [0]</span>
