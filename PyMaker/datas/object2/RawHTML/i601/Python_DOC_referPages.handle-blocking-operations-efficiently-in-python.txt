<div class="post-text" itemprop="text">
<p>I'm using python and OpenCV to get video from a rtsp stream. I'm getting single frames from the stream and saving them to the file system. </p>
<p>I wrote a <code>StreamingWorker</code> which handles frame getting and saving. Additionally there is a <code>StreamPool</code> that has all the streaming objects. I thought that as the <code>StreamingWorker</code> would always be running, there should only be one per core, in order to take as much as possible. Then the <code>StreamPool</code> would provide the <code>VideoCapture</code> objects to the available <code>StreamingWorker</code>. </p>
<p>The problem is that most of the time that the script is running, is blocking: </p>
<pre class="lang-py prettyprint-override"><code>import os
import time
import threading
import cv2 as cv

class StreamingWorker(object):

    def __init__(self, stream_pool):
        self.stream_pool = stream_pool
        self.start_loop()

    def start_loop(self):
        while True:
            try:
                # getting a stream from the read_strategy
                stream_object = self.stream_pool.next()

                # getting an image from the stream
                _, frame = stream_object['stream'].read()

                # saving image to file system
                cv.imwrite(os.path.join('result', stream_object['feed'], '{}.jpg'.format(time.time())))

            except ValueError as e:
                print('[error] {}'.format(e))

class StreamPool(object):

    def __init__(self, streams):
        self.streams = [{'feed': stream, 'stream': cv.VideoCapture(stream)} for stream in streams]
        self.current_stream = 0
        self.lock = threading.RLock()

    def next(self):
        self.lock.acquire()
        if(self.current_stream + 1 &gt;= len(self.streams)):
            self.current_stream = 0
        else:
            self.current_stream += 1
        result = self.streams[self.current_stream]
        self.lock.release()
        return result

def get_cores():
    # This function returns the number of available cores
    import multiprocessing
    return multiprocessing.cpu_count()


def start(stream_pool):
    StreamingWorker(stream_pool)

def divide_list(input_list, amount):
    # This function divides the whole list into list of lists
    result = [[] for _ in range(amount)]
    for i in range(len(input_list)):
        result[i % len(result)].append(input_list[i])
    return result

if __name__ == '__main__':

    stream_list = ['rtsp://some/stream1', 'rtsp://some/stream2', 'rtsp://some/stream3']

    num_cores = get_cores()
    divided_streams = divide_list(stream_list, num_cores)
    for streams in divided_streams:
        stream_pool = StreamPool(streams)
        thread = threading.Thread(target=start, args=(stream_pool))
        thread.start()
</code></pre>
<p>When I thought of this, I didn't take into account that most of the operations will be blocking operations like:</p>
<pre><code># Getting a frame blocks
_, frame = stream_object['stream'].read()

# Writing to the file system blocks
cv.imwrite(os.path.join('result', stream_object['feed'], '{}.jpg'.format(time.time())))
</code></pre>
<p>The problem with spending too much time blocking is that most of the processing power is wasted. I thought of using futures with a <code>ThreadPoolExecutor</code> but I can't seem to reach my goal of using the maximum amount of processing cores possible. Maybe I'm not setting enaugh threads. </p>
<p>Is there a standard way of handling blocking operations, in order to make the best use of the cores' processing power? I'm fine having a language-agnostic answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>I ended up using the <code>ThreadPoolExecutor</code> using the <code>add_done_callback(fn)</code> function. </p>
<pre class="lang-py prettyprint-override"><code>class StreamingWorker(object):

    def __init__(self, stream_pool):
        self.stream_pool = stream_pool
        self.thread_pool = ThreadPoolExecutor(10)
        self.start_loop()

    def start_loop(self):
        def done(fn):
            print('[info] future done')

        def save_image(stream):
            # getting an image from the stream
            _, frame = stream['stream'].read()

            # saving image to file system
            cv.imwrite(os.path.join('result', stream['feed'], '{}.jpg'.format(time.time())))

        while True:
            try:
                # getting a stream from the read_strategy
                stream_object = self.stream_pool.next()

                # Scheduling the process to the thread pool
                self.thread_pool.submit(save_image, (stream_object)).add_done_callback(done)
            except ValueError as e:
                print('[error] {}'.format(e))
</code></pre>
<p>I didn't actually want to do anything after the future finished, but if I used <code>result()</code> then the <code>while True</code> would stop, which whould also defeat all the purpose of using the thread pool.</p>
<p><strong>Side note:</strong> I had to add a <code>threading.Rlock()</code> when calling <code>self.stream_pool.next()</code> because apparently opencv can't handle calls from multiple threads.</p>
</div>
<span class="comment-copy">Sounds like a good use of <a href="https://docs.python.org/3/library/asyncio.html?highlight=asyncio#module-asyncio" rel="nofollow noreferrer"><code>asyncio</code></a>.</span>
<span class="comment-copy">@AChampion it might be a viable solution. However, I'd like to know a way of doing it without using a library. For learning purposes. Thank you</span>
