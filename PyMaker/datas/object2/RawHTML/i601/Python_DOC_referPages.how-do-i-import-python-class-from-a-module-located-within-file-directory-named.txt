<div class="post-text" itemprop="text">
<p>I'm trying to import a class from a module named <code>my_classes.py</code>. Problem is, it's located within a directory called <em>@file_directory</em>.</p>
<p>So the structure is, I have main.py at the top of the project directory, and also a directory called <em>lib</em> at the same level. Within 'lib' there is subdirectory named '@file_directory' and within it a module 'my_classes' as shown below.</p>
<pre><code>-&gt; main.py
-&gt; /lib
   -&gt; lib_other_files.py
   -&gt; /@file_directory
      -&gt; my_classes.py
</code></pre>
<p>What I can usually do is</p>
<pre><code>from lib.@file_directory.myclasses import cust_class
</code></pre>
<p>But because the <code>@</code> symbol is a wrapper symbol, it prevents me from importing files from '@file_directory'. The simple soultion is of course, just change the directory name but I want to keep the file name/don't have the rights to change it in the project. Is there a way to use like a escpae character to import module from a directory with special characters?</p>
</div>
<div class="post-text" itemprop="text">
<p>Another possibility: <a href="https://docs.python.org/3/library/functions.html#__import__" rel="nofollow noreferrer">use the <code>__import__()</code> built-in function</a>. This is essentially removing the overhead of the normal <code>import</code> command, but it allows you more flexibility in package-naming because it just takes a string as an argument - and that string can escape the otherwise-invalid characters.</p>
<p>So, this code <em>should</em> work:</p>
<pre><code>_temp = __import__("lib.@file_directory.myclasses", globals(), locals(), ['cust_class'], 0)
cust_class = _temp.cust_class
</code></pre>
<hr/>
<p>Edit: The python standard library recommends using <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer"><code>importlib</code></a> instead. The same code would look like this in that:</p>
<pre><code>import importlib
cust_class = importlib.import_module("lib.@file_directory.myclasses", "cust_class")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can not import modules with characters like the '@' symbol... however, using execfile may be an appropriate workaround for you. </p>
<p><strong>Tested with Python 2.7.5</strong></p>
<p><strong><em>my_classes.py example code:</em></strong></p>
<pre><code>def printMe():
    print "foo from my_classes"
</code></pre>
<p><strong><em>main.py example code:</em></strong></p>
<pre><code>execfile("./lib/@file_directory/my_classes.py")
printMe()
</code></pre>
<p><em>Executing main.py prints out:</em></p>
<pre><code>&gt;&gt;python main.py
foo from my_classes
</code></pre>
<p>Whats happening is <strong>main.py</strong> will run the <strong>my_classes.py</strong> file and now you can directly reference functions or any relevant code from my_classes.py. </p>
<p><strong>Python 3.X Equivalent</strong></p>
<p>I dont have python 3 installed but they did remove execfile.. the alternative for execfile would be: </p>
<pre><code>exec(open("./lib/@file_directory/my_classes.py").read())
</code></pre>
<p>Hope this helps you accomplish your needs.</p>
</div>
<span class="comment-copy"><code>@file_directory</code> is not a valid module name; you <i>should</i> change the directory name.</span>
<span class="comment-copy">@chepner changing the directory name would be the most ideal situation but he mentioned he has no permissions to change it</span>
<span class="comment-copy">I've aware of what he mentioned. I'm claiming that using such a directory name is virtually a bug, and should be fixed.</span>
<span class="comment-copy">This <i>does</i> work, but the doc says: <code>__import__</code> should be avoided, better to use <code>importlib.import_module()</code> to programmatically import a module.</span>
<span class="comment-copy">Thanks for mentioning that. Edited accordingly.</span>
