<div class="post-text" itemprop="text">
<p>I want to make sure that each sentence in a text starts with a capital letter. </p>
<p>E.g.   "we have good news and bad news about your emissaries to our world," the extraterrestrial ambassador informed the Prime Minister. the good news is they tasted like chicken."   should become</p>
<p>"We have good news and bad news about your emissaries to our world," the extraterrestrial ambassador informed the Prime Minister. The good news is they tasted like chicken."</p>
<p>I tried using split() to split the sentence. Then, I capitalized the first character of each line. I appended the rest of the string to the capitalized character.</p>
<pre><code>  text = input("Enter the text: \n")
  lines = text.split('. ') #Split the sentences

  for line in lines:
      a = line[0].capitalize() # capitalize the first word of sentence
      for i in range(1, len(line)):
           a = a + line[i] 
      print(a)
</code></pre>
<p>I want to obtain "We have good news and bad news about your emissaries to our world," the extraterrestrial ambassador informed the Prime Minister. The good news is they tasted like chicken."</p>
<p>I get "We have good news and bad news about your emissaries to our world," the extraterrestrial ambassador informed the Prime Minister
The good news is they tasted like chicken."</p>
</div>
<div class="post-text" itemprop="text">
<p>When you split the string by <code>". "</code> that removes the <code>". "</code>s from your string and puts the rest of it into a list. You need to add the lost periods to your sentences to make this work.</p>
<p>Also, this can result in the last sentence to have double periods, since it only has <code>"."</code> at the end of it, not <code>". "</code>. We need to remove the period (if it exists) at the beginning to make sure we don't get double periods. </p>
<pre><code>text = input("Enter the text: \n")
output = ""
if (text[-1] == '.'):
    # remove the last period to avoid double periods in the last sentence
    text = text[:-1] 
lines = text.split('. ') #Split the sentences

for line in lines:
    a = line[0].capitalize() # capitalize the first word of sentence
    for i in range(1, len(line)):
        a = a + line[i]
    a = a + '.' # add the removed period
    output = output + a
print (output)
</code></pre>
<p>We can also make this solution cleaner:</p>
<pre><code>text = input("Enter the text: \n")
output = ""

if (text[-1] == '.'):
    # remove the last period to avoid double periods in the last sentence
    text = text[:-1] 
lines = text.split('. ') #Split the sentences

for line in lines:
    a = line[0].capitalize() + line [1:] + '.'
    output = output + a
print (output)
</code></pre>
<p>By using <code>str[1:]</code> you can get a copy of your string with the first character removed. And using <code>str[:-1]</code> will give you a copy of your string with the last character removed. </p>
</div>
<div class="post-text" itemprop="text">
<p>This code should work:</p>
<pre><code>text = input("Enter the text: \n")
lines = text.split('. ')  # Split the sentences

for index, line in enumerate(lines):
    lines[index] = line[0].upper() + line[1:]
print(". ".join(lines))
</code></pre>
<p>The error in your code is that <code>str.split(chars)</code> removes the splitting delimiter <code>char</code> and that's why the period is removed. </p>
<p>Sorry for not providing a thorough description as I cannot think of what to say. Please feel free to ask in comments.</p>
<p>EDIT: Let me try to explain what I did.</p>
<ul>
<li>Lines 1-2: Accepts the input and splits into a list by <code>'. '</code>. On the sample input, this gives: <code>['"We have good news and bad news about your emissaries to our world," the extraterrestrial ambassador informed the Prime Minister', 'the good news is they tasted like chicken.']</code>. Note the period is gone from the first sentence where it was split.</li>
<li>Line 4: <code>enumerate</code> is a generator and iterates through an iterator returning the index and item of each item in the iterator in a <code>tuple</code>.</li>
<li>Line 5: Replaces the place of <code>line</code> in <code>lines</code> with the capital of the first character plus the rest of the line.</li>
<li>Line 6: Prints the message. <code>". ".join(lines)</code> basically reverses what you did with split. <code>str.join(l)</code> takes a iterator of strings, <code>l</code>, and sticks them together with <code>str</code> between all the items. Without this, you would be missing your periods.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><strong>split</strong> splits the string AND none of the new strings contain the <strong>delimiter</strong> -  or the string/character you split by.</p>
<p>change your code to this:</p>
<pre><code>text = input("Enter the text: \n")
lines = text.split('. ') #Split the sentences

final_text = ". ".join([line[0].upper()+line[1:] for line in lines])
print(final_text)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The below can handle multiple sentence types (ending in ".", "!", "?", etc...) and will capitalize the first word of each of the sentences. Since you want to keep your existing capital letters, using the capitalize function will not work (since it will make none sentence starting words lowercase). You can throw a lambda function into the list comp to take advantage of upper() on the first letter of each sentence, this keeps the rest of the sentence completely un-changed.  </p>
<pre><code>import re

original_sentence = 'we have good news and bad news about your emissaries to our world," the extraterrestrial ambassador informed the Prime Minister. the good news is they tasted like chicken.'

val = re.split('([.!?] *)', original_sentence)

new_sentence = ''.join([(lambda x: x[0].upper() + x[1:])(each) if len(each) &gt; 1 else each for each in val])

print(new_sentence)
</code></pre>
<p>The "new_sentence" list comprehension is the same as saying:</p>
<pre><code>sentence = []

for each in val:
    sentence.append((lambda x: x[0].upper() + x[1:])(each) if len(each) &gt; 1 else each)

print(''.join(sentence))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">re.sub</a> function in order to replace all characters following the pattern <code>. \w</code> with its uppercase equivalent.</p>
<pre><code>import re

original_sentence = 'we have good news and bad news about your emissaries to our world," the extraterrestrial ambassador informed the Prime Minister. the good news is they tasted like chicken.'

def replacer(match_obj):                   
    return match_obj.group(0).upper()

# Replace the very first characer or any other following a dot and a space by its upper case version.
re.sub(r"(?&lt;=\. )(\w)|^\w", replacer, original_sentence)

&gt;&gt;&gt; 'We have good news and bad news about your emissaries to our world," the extraterrestrial ambassador informed the Prime Minister. The good news is they tasted like chicken.'
</code></pre>
</div>
<span class="comment-copy">Thank you but is there a way for me to get this exact output: "We have good news and bad news about your emissaries to our world," the extraterrestrial ambassador informed the Prime Minister. The good news is they tasted like chicken."                                                     The output I get has the second sentence start  on a newline.</span>
<span class="comment-copy">Edited the response for that. We were printing individually for each line, that adds a new line each time. Now we are printing once in the end.</span>
<span class="comment-copy">Ok. Thanks very much for your help.</span>
<span class="comment-copy">You actually don't need str.capitalize(). You can use str.upper().</span>
<span class="comment-copy">That's true, I'll change it. P.S. I actually forgot what <code>str.capitalize()</code> did (I thought it was the same as <code>str.upper()</code>) so thanks for reminding me. :)</span>
<span class="comment-copy">In fact with str.capitalize is better that way you don't have to slice on line.</span>
<span class="comment-copy">I don't think so. In my version of Python (Python 3.7.2) <code>str.capitalize()</code> converts the first "W" into lowercase because it is not the first character.</span>
<span class="comment-copy">This doesnâ€™t work. It gives the same output as the other solution.</span>
<span class="comment-copy">Fixed it. I lazily read your code the first time.</span>
<span class="comment-copy">I saw this solution on stackoverflow already. The problem is i want to capitalize the first words but don't want to change any already capitalized words which is "Prime Minister" in this case.</span>
<span class="comment-copy">Okay, I fixed it accordingly to your wish.</span>
