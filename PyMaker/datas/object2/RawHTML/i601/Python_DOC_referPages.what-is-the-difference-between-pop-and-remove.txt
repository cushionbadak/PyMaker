<div class="post-text" itemprop="text">
<p>What is the real difference between <code>list.pop</code> and <code>list.remove</code>? I noticed that I can only pop Int objects, but is there anything else? Also, which one is more efficient?</p>
</div>
<div class="post-text" itemprop="text">
<p>Tuples have no <code>pop</code> or <code>remove</code> methods, being immutable once created.</p>
<p>Lists however do, and <code>pop</code> and <code>remove</code> have completely different purposes. From the help:</p>
<blockquote>
<p>pop(...) method of builtins.list instance<br/>
      L.pop([index]) -&gt; item -- remove and return item at index (default last).<br/>
      Raises IndexError if list is empty or index is out of range.</p>
<p>remove(...) method of builtins.list instance<br/>
      L.remove(value) -&gt; None -- remove first occurrence of value.<br/>
      Raises ValueError if the value is not present.</p>
</blockquote>
<p>So <code>pop</code> removes (And returns) an item from a list, by index:</p>
<pre><code>animals = ["cat", "dog", "fish"]

x = animals.pop(0)
print(x)
print(animals)
</code></pre>
<p>Gives you:</p>
<blockquote>
<blockquote>
<p>cat<br/>
    ["dog", "fish"]</p>
</blockquote>
</blockquote>
<p>Whereas <code>remove</code> searches for a given string and removes the first item that matches from the list (but doesn't return it).</p>
<pre><code>animals = ["cat", "dog", "fish"]
x = animals.remove("cat")
print(x)
print(animals)
</code></pre>
<p>Gives you:</p>
<blockquote>
<blockquote>
<p>None<br/>
    ["dog", "fish"]</p>
</blockquote>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>pop</code> and <code>remove</code> are not associated tuples but you can use it for lists in python. </p>
<p><code>pop</code>: It will remove the last from the list if not given any index as an argument but with if a valid index is provided then it will remove the element at the particular index.</p>
<pre><code>Example: array = [1,2,3,4,5]
         array.pop() will remove 5. 
         array.pop(2) will remove 3.
</code></pre>
<p><code>remove</code>: It will remove first the specified appearance of the element from the list which is passed as the argument.</p>
<pre><code>Example: array = [1,2,3,4,5]
         array.remove(2) will remove 2. 
</code></pre>
<p>You can also save your <code>popped</code> element but the same can't be done in case of <code>remove</code>. </p>
<pre><code>Example: array = [1,2,3,4,5]
         x=array.pop()
         print array -&gt;&gt; [1,2,3,4] 
         print x -&gt;&gt; 5
</code></pre>
</div>
<span class="comment-copy">1) tuples have neither a <code>pop</code> nor a <code>remove</code> method. 2) <code>pop</code> and <code>remove</code> do completely different things. I <i>strongly</i> suggest you go read the documentation.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> good questions - that can not be solved by reading the documentation. pop() removes an <i>index</i> and returns the popped thing - remove removes an <i>element</i> - <b>not</b> an index. Asking good questions help you get rep. tuples() are not mutable - hence they do not possess methods to mutate them.</span>
<span class="comment-copy">But why I can't to pop tuple object?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html</a>. I usually hate doing this, but its pretty clear-cut RTFM in this case. Sorry! Also, you can't <code>.pop</code> in tuple object because no such implementation method exists for tuple. It might exist in the future or not, but this is up to the developers of Python to implement.</span>
<span class="comment-copy">Oops seems like I got confused between tuple and list. Can you recheck the question please?</span>
<span class="comment-copy">Thanks a lot for the quick response!!!</span>
