<div class="post-text" itemprop="text">
<p>I want to test if Python code is working with symlinks properly. How can I create symlinks (e.g. equivalent to how <a href="https://docs.python.org/3.7/library/os.html#os.symlink" rel="nofollow noreferrer"><code>os.symlink()</code></a> can be used) in a faked filesystem based on <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib.Path</code></a> in a Python2/3 compatible way?</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3.x, the <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> package is in the standard library. For Python 2.7 you can use the backport <a href="https://pypi.org/project/pathlib2/" rel="nofollow noreferrer"><code>pathlib2</code></a>.</p>
<p>Both packages have a <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.symlink_to" rel="nofollow noreferrer"><code>.symlink_to(target, target_is_directory=False)</code></a> method which should do what you want.</p>
<p>From experience, Python 2 does not like to make symbolic links in Windows environments, but Python 3 supports NTFS symbolic links. Linux is happy making symlinks in either. Other environments I can't speak for.</p>
<p>Here is an example usage</p>
<pre><code>In [1]: from pathlib import Path                                                                                                                                                                              

In [2]: Path('textfile.txt').write_text('hello world!')                                                                                                                                                       
Out[2]: 12

In [3]: print(list(Path('.').rglob('*.*')))                                                                                                                                                                   
[PosixPath('textfile.txt')]

In [4]: Path('link-to-textfile.txt').symlink_to(Path('textfile.txt'))                                                                                                                                         

In [5]: print(list(Path('.').rglob('*.*')))                                                                                                                                                                  
[PosixPath('textfile.txt'), PosixPath('link-to-textfile.txt')]

In [6]: Path('link-to-textfile.txt').read_text()                                                                                                                                                             
Out[6]: 'hello world!'
</code></pre>
</div>
<span class="comment-copy">As a side note, both packages also have a <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_symlink" rel="nofollow noreferrer"><code>.is_symlink()</code></a> method that may be useful to you.</span>
<span class="comment-copy">I created a symlink to a file with <code>Path.symlink_to()</code>. For debugging I am using <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob" rel="nofollow noreferrer"><code>Path.rglob</code></a> to print dirs and files. However I am not seeing the target but the Path only. Is there a way to print targets?</span>
<span class="comment-copy">I added an example to the original answer. The usage is generally <code>Path('the-link-you-want-to-create').symlink_to('the-original-file')</code>. You can check if a given <code>Path('file')</code> exists with the <code>.resolve()</code>, <code>.exists()</code>, or <code>.is_symlink()</code> methods (depending on what you're checking).</span>
<span class="comment-copy">I am just fine with your answer. It turned out my problem is not the test, but the production code. The production code has to find files and symlinked files, has to be compatible with Python2.6 up to Python3.X and that it may not depend on any functionality other than from the Python standard libs. Different story :)</span>
<span class="comment-copy">Well, <a href="https://docs.python.org/2.6/library/os.html#os.symlink" rel="nofollow noreferrer"><code>os.symlink</code></a>, <a href="https://docs.python.org/2.6/library/os.html#os.lstat" rel="nofollow noreferrer"><code>os.lstat()</code></a> that doesn't follow links, and <a href="https://docs.python.org/2.6/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk()</code></a> all exist since at least Python 2.6. If your requirements are stdlib only, they should work (although not in the prettiest way). Good luck!</span>
