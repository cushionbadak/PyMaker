<div class="post-text" itemprop="text">
<p>Why does the following not work?</p>
<pre><code>import ctypes

class Test(ctypes.Structure):
    _fields_ = [("my_pointer", ctypes.POINTER(ctypes.c_int16))]

t = Test()
t.my_pointer = ctypes.addressof(ctypes.c_int16(123))
</code></pre>
<p>Error:
<code>TypeError: expected LP_c_short instance, got int</code>
Is there way to generate a LP_c_short? Or any 16-bit pointer?</p>
<p><strong>EDIT</strong></p>
<p>Using byref instead of addressof causes:
<code>TypeError: expected LP_c_short instance, got CArgObject</code></p>
<p>The Test structure is defined that way because it look's like that in a C-DLL.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>byref</code> or <code>pointer</code> not <code>addressof</code> </p>
<pre><code>a = ctypes.c_int16(123)
t.my_pointer(ctypes.byref(a)
</code></pre>
<p>Despite having a name like the C <code>&amp;</code> operator addressof returns a int and not a ctypes pointer.</p>
<blockquote>
<p>ctypes.addressof(obj)</p>
<p>Returns the address of the memory buffer as integer. obj must be an instance of a ctypes type</p>
</blockquote>
<p>EDIT</p>
<p>Is this not working ? :</p>
<pre><code>import ctypes

class Test(ctypes.Structure):
    _fields_ = [("my_pointer", ctypes.POINTER(ctypes.c_int16))]

t = Test()

cc = ctypes.c_int16(123)
t.my_pointer = ctypes.pointer(cc)

print t.my_pointer[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not an expert with <code>ctypes</code>, but following the <a href="https://docs.python.org/3/library/ctypes.html#pointers" rel="nofollow noreferrer">docs</a> the following works for me:</p>
<pre><code>import ctypes

PI16 = ctypes.POINTER(ctypes.c_int16)

class Test(ctypes.Structure):
    _fields_ = [
        ("my_pointer", PI16),
    ]

t = Test()
t.my_pointer = PI16(ctypes.c_int16(123))
print(t.my_pointer[0])
</code></pre>
<p>otherwise, you could do:</p>
<pre><code>t.my_pointer = ctypes.pointer(ctypes.c_int32(123))
</code></pre>
<p>the former will allow you to do strange things like:</p>
<pre><code>PI(ctypes.c_int64(123))[0]
</code></pre>
<p>I.e. coerce between different width integer types, or worseâ€¦</p>
</div>
