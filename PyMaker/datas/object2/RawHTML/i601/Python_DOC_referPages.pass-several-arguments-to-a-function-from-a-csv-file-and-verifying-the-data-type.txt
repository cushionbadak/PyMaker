<div class="post-text" itemprop="text">
<p>I have a function <code>func(a,b,c,d,e,f,g,h,i,j,k)</code> with several arguments <code>a</code> to <code>k</code> that I want to read from a file.</p>
<p>I have a file <code>arguments.csv</code> that I want to load row-by-row to run a function n times, where n is the number of rows of the file. Each element of the row contains the argument to pass to the function. The function is expects to have arguments as characters, numeric, integer and lists as shown in the example below.</p>
<p>This is what the CSV file looks like:  </p>
<pre><code># arguments.csv

"stringA1",450.866,-722.864,20170105,1,2,3,4,5,6,["stringB1","stringC1"]
"stringA2",470.832,-432.523,20170106,7,8,9,10,11,12,["stringB2","stringC2","stringC3"]
</code></pre>
<p>I have tried the code below, but I miss to enforce that the data structure types are enforced correctly.</p>
<pre><code>import csv

with open('arguments.csv', newline='') as csvfile:
    txt = csv.reader(csvfile, delimiter=',')
    for row in txt:
        print(row)
        func(*row)
</code></pre>
<p>How can I be sure that the data types are converted correctly before passing on the <code>*content</code> arguments to <code>func()</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is how to build a .csv file with <code>string</code>, <code>float</code>, <code>int</code> and <code>list</code> data types that will load as arguments to a function by row:</p>
<pre><code># arguments.csv

"stringA1",450.866,-722.864,20170105,1,2,3,4,5,6,"['stringB1','stringC1']"
"stringA2",470.832,-432.523,20170106,7,8,9,10,11,12,"['stringB2','stringC2','stringD2']"
</code></pre>
<p>note that as @Nullman mentioed the outer <code>"</code> and the inner<code>'</code>. in csv, commas inside (double) quotation marks are ignored.</p>
<p>Then having the .csv file defined one can read the arguments defined inside the .csv file as:</p>
<pre><code>import csv

with open('arguments.csv', newline='') as csvfile:
    txt = csv.reader(csvfile, delimiter=',')
    for row in txt:
        parsed = (row[0], float(row[1]), float(row[2]), int(row[3]), int(row[4]), int(row[5]), int(row[6]), int(row[7]), int(row[8]),int(row[9]),row[10])
        func(*parsed)
</code></pre>
<p>Note that the data types are enforced in <code>parsed</code>.</p>
</div>
<span class="comment-copy">You have to write the code to convert them; currently they'll all be strings, and you're not actually splitting at commas. You're also looping over <code>fp</code> inside your loop over <code>fp</code>, which doesn't make a lot of sense. Given your file is CSV, maybe look at <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a>?</span>
<span class="comment-copy">After the edit, possible duplicate of <a href="https://stackoverflow.com/questions/11665628/read-data-from-csv-file-and-transform-to-correct-data-type" title="read data from csv file and transform to correct data type">stackoverflow.com/questions/11665628/â€¦</a>; please spend some time researching before asking a new question.</span>
<span class="comment-copy">are you sure your file is formatted the correctly? <code>["stringB1","stringC1"]</code> will be split into 2 parts</span>
<span class="comment-copy">I have updated the code chuck above now using <code>csv</code>. How can one enforce that the data structure is compliant with the <code>func()</code> syntax (data types) in this context?</span>
<span class="comment-copy">@Nullman I am also writing the <code>arguments.csv</code> file myself, so it might not be correct. How can i make sure that the element(s) are interpreted as a list?</span>
