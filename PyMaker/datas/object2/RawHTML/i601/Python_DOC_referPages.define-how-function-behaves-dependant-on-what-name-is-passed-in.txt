<div class="post-text" itemprop="text">
<p>I have created a function, but depending on what name is passed into the function, I'd like the function to behave differently</p>
<p>Created function takes in a dataframe, creates a pivottable and scale some columns by 100 or 0.01. For a particular type of dataframe (which contains a particular column), I do not want the Avg Weight to be scaled. Is there a way to find the name of the df passed?  </p>
<p>edit:</p>
<p>all df have the same column names, so to differentiate the "SpecialDF" from others is only by its name passed into the function. At this point should i be looking at classes or decorators? the def scale(df) function is quite long and only this part requires special handling</p>
<pre><code>def scale(df):

    dfpvt= pd.pivot_table(df, values=['Avg Wt', 'Avg Spd'], index=y,aggfunc='sum')

    dfpvt.loc[:['Avg Wt', 'Avg Spd']=dfpvt[['Avg Wt', 'Avg Spd']].apply(lambda x: x/100)

    return dfpvt   
</code></pre>
<p>what i'm looking for is something like </p>
<pre><code>def scale(df):

    dfpvt= pd.pivot_table(df, values=['Avg Wt', 'Avg Spd'], index=y,aggfunc='sum')

    if df==SpecialDF:
        dfpvt.loc[:['Avg Spd']=dfpvt[['Avg Spd']].apply(lambda x: x/100)
    else:
        dfpvt.loc[:['Avg Wt', 'Avg Spd']=dfpvt[['Avg Wt', 'Avg Spd']].apply(lambda x: x/100)
    return dfpvt   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>For a particular type of dataframe (which contains a particular
  column), I do not want the Avg Weight to be scaled.</p>
</blockquote>
<p>Use an <code>if</code> or ternary statement to determine whether a column exists in your dataframe:</p>
<pre><code>def scale(df):
    dfpvt = pd.pivot_table(df, values=['Avg Wt', 'Avg Spd'], index=y, aggfunc='sum')
    scale_cols = ['Avg Spd'] if 'some_col_label' in df else ['Avg Wt', 'Avg Spd']
    dfpvt.loc[: scale_cols] /= 100
    return dfpvt
</code></pre>
<p>The idea is to reduce repeated code and only modify the most basic objects required to change the required columns, in this case a <code>list</code> object.</p>
<p>For a more generic function, you can have <code>scale_cols</code> as an argument and <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pipe.html" rel="nofollow noreferrer"><code>pipe</code></a> your dataframe through the function:</p>
<pre><code>def scale(df, scale_cols):
    dfpvt = pd.pivot_table(df, values=['Avg Wt', 'Avg Spd'], index=y, aggfunc='sum')
    dfpvt.loc[: scale_cols] /= 100
    return dfpvt

df = df.pipe(scale, ['Avg Spd'] if 'some_col_label' in df else ['Avg Wt', 'Avg Spd'])
</code></pre>
<hr/>
<blockquote>
<p>all df have the same column names, so to differentiate the "SpecialDF"
  from others is only by its name passed into the function.</p>
</blockquote>
<p>Your updated requirement is <em>completely</em> different. Names are just references: do <strong>not</strong> rely on them for processing conditions. Good practice is to use a dictionary to store your dataframes and use keys in your dictionary to identify a "special" dataframe:</p>
<pre><code>dfs = {'df1': df1, 'df2': df2}

def scale(df, scale_cols):
    dfpvt = pd.pivot_table(df, values=['Avg Wt', 'Avg Spd'], index=y, aggfunc='sum')
    dfpvt.loc[: scale_cols] /= 100
    return dfpvt

key = 'df1'
dfs[key] = dfs[key].pipe(scale, ['Avg Spd'] if key == 'df1' else ['Avg Wt', 'Avg Spd'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on the term "type" of DataFrame, you would want <code>isinstance</code> (<a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer">documentation here</a>).</p>
<p>However, since you say "which contains a particular column", you probably actually mean <code>if col in df</code>, where <code>col</code> is the name of that particular column.</p>
</div>
<span class="comment-copy">Having a specific column doesn't make a DF diifferent type, it will still be the same DF, if you ant to check a specific col, pass it's name as an input to function and check if it there in DF col names, if yes then apply your operation else common operation</span>
<span class="comment-copy">to add on, all df have the same column names, so to differentiate the "SpecialDF" from others is only by its name passed into the function. At this point should i be looking at classes or decorators? the def scale(df) function is quite long and only this part requires special handling</span>
