<div class="post-text" itemprop="text">
<p>I'm creating a dictionary for which one of the value is a string with backslash,I know that python is automatically adding escape sequence.But at the end when you print the dictionary it's still printing that value with muliple backslashes,Now i have to pass this dictionary to another tool which is not expecting multiple backslashes,So currently I'm forced to manually remove a backslash is there a way to remove the backslash from the value of dictionary automatically.</p>
<pre><code>(Pdb) print value2
"\x01\x02\x03\x04\x05"
(Pdb) value2
'"\\x01\\x02\\x03\\x04\\x05"'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are confusing string <em>representations</em> with string <em>values</em>.</p>
<p>When you echo a string object in the Python interpreter, the output is really produced by printing the result of the <a href="https://docs.python.org/2/library/functions.html#repr" rel="nofollow noreferrer"><code>repr()</code> function</a>. This function outputs <em>debugging friendly representations</em>, and for strings, that representation is valid Python syntax you can copy and paste back into Python.</p>
<p><code>print</code> on the other hand, just writes the actual value in the string to the terminal. That's rather different from the Python syntax that creates the value. A backslash in the string <em>prints</em> as a backslash, you wouldn't see a backslash if there wasn't one in the value.</p>
<p>In Python string literal syntax, the <code>\</code> backslash character has special meaning, it's the first character of an <em>escape sequence</em>. So if you want to have an actual backslash in the <em>value</em> of the string, you would need to use <code>\\</code> to 'escape the escape'. There is other syntax where the backslash would not have special meaning, but the <code>repr()</code> representation of a string doesn't use that other syntax. So it'll output <em>any backslash in the value</em> as the escape sequence <code>\\</code>.</p>
<p>That doesn't mean that the value has two backslashes. It just means that you can copy the output, and paste it into Python, and it'll <em>produce the same string value</em>.</p>
<p>You can see that your string value doesn't have double backslashes by looking at individual characters:</p>
<pre><code>&gt;&gt;&gt; value2 = '"\\x01\\x02\\x03\\x04\\x05"'
&gt;&gt;&gt; value2
'"\\x01\\x02\\x03\\x04\\x05"'
&gt;&gt;&gt; print value2
"\x01\x02\x03\x04\x05"
&gt;&gt;&gt; print value2[0]
"
&gt;&gt;&gt; print value2[1]
\
&gt;&gt;&gt; print value2[2]
x
&gt;&gt;&gt; value2[0]
'"'
&gt;&gt;&gt; value2[1]
'\\'
&gt;&gt;&gt; value2[2]
'x'
</code></pre>
<p>Printing <code>value2[1]</code> shows that that single character is a backslash. <em>Echoing</em> that single character shows <code>'\\'</code>, the Python syntax to recreate a string with a single character.</p>
<p>When you echo dictionaries or lists or other standard Python containers, they too are echoed using valid Python syntax, so their contents all are shown by using <code>repr()</code> on them, including strings:</p>
<pre><code>&gt;&gt;&gt; d = {'foo': value2}
&gt;&gt;&gt; d
{'foo': '"\\x01\\x02\\x03\\x04\\x05"'}
</code></pre>
<p>Again, that's not the <em>value</em>, that's the <em>representation</em> of the string contents.</p>
<p>On top of that, container types have no <em>string value</em>, so printing a dictionary or list or other standard container type will only ever show their representation:</p>
<pre><code>&gt;&gt;&gt; print d  # shows a dictionary representation
{'foo': '"\\x01\\x02\\x03\\x04\\x05"'}
&gt;&gt;&gt; print d['foo']   # shows the value of the d['foo'] string
"\x01\x02\x03\x04\x05"
</code></pre>
<p>You'd have to print individual values (such as <code>d['foo']</code> above), or create your own string value from the components (which involves accessing all the contents and building a new string from that). Containers are not meant to be end-user-friendly values, so Python doesn't provide you with a string value for them either.</p>
<p>Strings can also contain non-printable characters, characters that don't have a human-readable value, such as a newline, or a tab character, and even the BELL character that'll make most terminals go <em>beep</em> when you write one of those to them. And in Python 2, the <code>str</code> type holds bytes, really, and only printable characters in the ASCII range (values 00 - 7F) considered when producing the <code>repr()</code> output. Anything outside is <em>always</em> considered unprintable, even if you could decode those bytes as Latin-1 or another commonly used codec.</p>
<p>So when you <em>do</em> have special characters other than <code>\</code> in the string, you'd see this in the representation:</p>
<pre><code>&gt;&gt;&gt; value_with_no_backslashes = "This is mostly ASCII with a \b bell and a newline:\nSome UTF-8 data: ðŸ¦Š"
&gt;&gt;&gt; print value_with_no_backslashes  # works because my terminal accepts UTF-8
This is mostly ASCII with a bell and a newline:
Some UTF-8 data: ðŸ¦Š
&gt;&gt;&gt; value_with_no_backslashes
'This is mostly ASCII with a \x08 bell and a newline:\nSome UTF-8 data: \xf0\x9f\xa6\x8a'
</code></pre>
<p>Now, when I echo the value, there are backslashes, to make sure the non-printable characters can easily be copied and reproduce the same value again. Note that those backslashes are <em>not doubled</em> in the echoed syntax.</p>
<p>Note that representations are <em>Python specific</em> and should only be used to aid debugging. Writing them to logs is fine, using them to pass values between programs is not. Always use a serialisation format to communicate between programs, including command-line tools started as subprocesses or by writing output to the terminal. Python comes with <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">JSON support</a> built in, and for Python-to-Python serialisation with no chance of third-party interference, <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer"><code>pickle</code></a> can be used for almost any Python data structure.</p>
</div>
<span class="comment-copy">The string value seems to be <code>value2 = "\x01\x02\x03\x04\x05"</code> (contains 5 characters having the <i>ASCII</i> codes from 1 to 5). The 2nd form seems just a <code>repr(value2)</code>.</span>
<span class="comment-copy">@CristiFati: no, these are literal backslashes. That's why they are shown when using <i><code>print</code></i>, and the <code>repr()</code> shows the literal value with the slashes doubled.</span>
<span class="comment-copy">You <b>do not have a value with double backslashes</b>. The <code>repr()</code> output gives you valid Python syntax to recreate the value. There is no problem here, you have the value you need, just pass it on.</span>
<span class="comment-copy">For your understanding: a double backslash is the technical representation of a single backslash and <code>\x01</code> is the technical representation of a byte with value 01 (hex). This is called escape sequences.</span>
<span class="comment-copy">@MartijnPieters: Ah right, I was typing <code>value2</code> instead of <code>print(value2)</code>.</span>
<span class="comment-copy">I'm passing value for value2 from an excel sheet where i had passed as "\x01\x02\x03\x04\x05" but python interprets it as (Pdb) (Pdb) value2 '"\\x01\\x02\\x03\\x04\\x05"' (Pdb) new_d={'apple':value2} (Pdb) new_d {'apple': '"\\x01\\x02\\x03\\x04\\x05"'}</span>
<span class="comment-copy">(Pdb) print new_d {'apple': '"\\x01\\x02\\x03\\x04\\x05"'}</span>
<span class="comment-copy">@Ashwinkumar: that's explained in my answer. You are printing the dictionary, and dictionaries have no <code>str()</code> string conversion, only a <code>repr()</code> representation. Printing the dictionary will show the representation. <code>print new_d['apple']</code> to access <i>just</i> the string value.</span>
<span class="comment-copy">Now it works here If i individually print a single item,My end task is to copy a dictionary of dictionaries where this value could be anywhere,And I have to pass that whole dictionary to another tool which doesn't accept double backslash.</span>
<span class="comment-copy">@tripleee: I always look for such a dupe, and can never find a good one. I wrote this one because I got fed up with looking. Perhaps this one can be the canonical.</span>
