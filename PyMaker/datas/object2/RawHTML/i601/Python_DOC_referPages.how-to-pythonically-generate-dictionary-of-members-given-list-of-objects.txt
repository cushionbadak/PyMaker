<div class="post-text" itemprop="text">
<p>I have a list of objects of this class:</p>
<pre><code>class foo:
    def __init__(self,x,y):
        self.x = x
        self.y = y
    def __repr__(self):
        return "(" + str(self.x) + "," + str(self.y) + ")"
</code></pre>
<p>and now I want to create a dictionary that contains for each value of <code>x</code> a list (sorted, unique elements) of <code>y</code> values. I wrote this</p>
<pre><code>def get_xy_dict(lis):
    outp = {}
    for e in lis:
        if (e.x in outp): 
            outp[e.x].add(e.y)
        else:
            outp[e.x] = set([e.y])
    return outp
</code></pre>
<p>And using it like this, it works as expected:</p>
<pre><code>x = [ foo(1,2), foo(1,3), foo(3,6), foo(1,3)]
y = get_xy_dict(x)
print(x)
print(y)
</code></pre>
<p>prints (see <a href="https://onlinegdb.com/HJxkv71HV" rel="nofollow noreferrer">here</a>):</p>
<pre><code>[(1,2), (1,3), (3,6), (1,3)]                                                                                                                                                                  
{1: {2, 3}, 3: {6}}   
</code></pre>
<p>However, I have the feeling that my code is extremely clumsy. Moreover I'd prefer to have lists instead of sets. Maybe using the sets can be avoided completely. Also it is just by conincidence that the output is sorted, if I would add that, it would get even more unwieldy.</p>
<p><strong>What is the pythonic way to get the same output (preferably lists instead of sets)? Ie, how to generate a dictionary containing all values of <code>y</code> that appear for given <code>x</code>?</strong></p>
<p>PS: not sure, if this rather belongs to codereview, just let me know.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could change the sets to sorted lists easily using the <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a> function.  Combined with a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> you can greatly simplify your code:</p>
<pre><code>from collections import defaultdict

def get_xy_dict(lis):
    d = defaultdict(set)
    for e in lis:
        d[e.x].add(e.y)
    return {k: sorted(v) for k, v in d.items()}  # This creates a new dict, but you could also 
                                                 # change the values of d

x = [ foo(1,2), foo(1,3), foo(3,6), foo(1,3)]
y = get_xy_dict(x)
print(x)  # [(1,2), (1,3), (3,6), (1,3)]
print(y)  # {1: [2, 3], 3: [6]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You first need to sort the foo items by <em>x</em> attributes, and then you can group them.</p>
<p>One way to do that is to use <code>itertools.groupby</code>, like this:</p>
<pre class="lang-py prettyprint-override"><code>import itertools
import operator


sort_key = operator.attrgetter('x')
y = {k: set(v.y for v in group)
     for k, group in itertools.groupby(sorted(x, key=sort_key), sort_key)}
print(y)
</code></pre>
<p>You get:</p>
<pre class="lang-py prettyprint-override"><code>{1: {2, 3}, 3: {6}}
</code></pre>
</div>
<span class="comment-copy">You could use collections.defaultdict or the method setdefault from dictionaries</span>
<span class="comment-copy">@DanielMesejo can you expand on that? This code is already on the limit of what I know about python</span>
<span class="comment-copy">Just to know when you say sorted you mean in the order of appearance?</span>
<span class="comment-copy"><code>outp = defaultdict(set)</code>; then <code>outp[e.x].add(e.y)</code> works the way you want whether or not you've actually seen <code>e.x</code> yet.</span>
<span class="comment-copy">@DanielMesejo no actually the lists of <code>y</code> values are supposed to be sorted. Only realized that this isnt the case in my code after writing the question (in the output it is sorted, but only by chance)</span>
