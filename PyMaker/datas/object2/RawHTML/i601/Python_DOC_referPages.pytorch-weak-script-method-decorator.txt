<div class="post-text" itemprop="text">
<p>I came across some code in an introduction to Word2Vec and PyTorch that I'm not quite familiar with. I haven't seen this type of code structure before.</p>
<pre><code>&gt;&gt;&gt; import torch
&gt;&gt;&gt; from torch import nn

&gt;&gt;&gt; # an Embedding module containing 10 tensors of size 3
&gt;&gt;&gt; embedding = nn.Embedding(10, 3)
&gt;&gt;&gt; # a batch of 2 samples of 4 indices each
&gt;&gt;&gt; input = torch.LongTensor([[1,2,4,5],[4,3,2,9]])
&gt;&gt;&gt; embedding(input)

tensor([[[-0.0251, -1.6902,  0.7172],
         [-0.6431,  0.0748,  0.6969],
         [ 1.4970,  1.3448, -0.9685],
         [-0.3677, -2.7265, -0.1685]],

        [[ 1.4970,  1.3448, -0.9685],
         [ 0.4362, -0.4004,  0.9400],
         [-0.6431,  0.0748,  0.6969],
         [ 0.9124, -2.3616,  1.1151]]])
</code></pre>
<p>I'm a little confused about the following line of code.</p>
<pre><code>&gt;&gt;&gt; embedding(input)
</code></pre>
<p>I may have inadvertently ignored this syntax in the past, but I don't recall seeing a variable being passed to a class instance before? Referring to the PyTorch <a href="https://pytorch.org/docs/stable/_modules/torch/nn/modules/sparse.html#Embedding" rel="nofollow noreferrer">documentation</a> where <code>Class Embedding()</code> is defined, is this behaviour enabled with decorator <code>@weak_script_method</code> wrapping <code>def forward()</code>? The code below suggests this may be the case?</p>
<pre><code>&gt;&gt;&gt; torch.manual_seed(2)
&gt;&gt;&gt; torch.eq(embedding(input), embedding.forward(input)).all()

tensor(1, dtype=torch.uint8)
</code></pre>
<p>Why is the use of decorator <code>@weak_script_method</code> preferable in this case?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, <code>@weak_script_method</code> has nothing to do with it. <code>embedding(input)</code> follows the Python function call syntax, which can be used with both "traditional" functions and with objects which define the <a href="https://docs.python.org/3/reference/datamodel.html#object.__call__" rel="nofollow noreferrer"><code>__call__(self, *args, **kwargs)</code></a> magic function. So this code</p>
<pre><code>class Greeter:
    def __init__(self, name):
        self.name = name

    def __call__(self, name):
        print('Hello to ' + name + ' from ' + self.name + '!')

greeter = Greeter('Jatentaki')
greeter('EBB')
</code></pre>
<p>will result in <code>Hello to EBB from Jatentaki!</code> being printed to stdout. Similarly, <code>Embedding</code> is an object which you construct by telling it how many embeddings it should contain, what should be their dimensionality, etc, and then, after it is constructed, you can call it like a function, to retrieve the desired part of the embedding.</p>
<p>The reason you do not see <code>__call__</code> in <code>nn.Embedding</code> source is that it subclasses <code>nn.Module</code>, which provides an automatic <code>__call__</code> implementation which delegates to <code>forward</code> and calls some extra stuff before and afterwards (see the <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module.forward" rel="nofollow noreferrer">documentation</a>). So, calling <code>module_instance(arguments)</code> is roughly equivalent to calling <code>module_instance.forward(arguments)</code>.</p>
<p>The <code>@weak_script_method</code> decorator has little to do with it. It is related to <a href="https://pytorch.org/docs/stable/jit.html" rel="nofollow noreferrer"><code>jit</code></a> compatibility, and <code>@weak_script_method</code> is a variant of <code>@script_method</code> designed for internal use in PyTorch - the only message for you should be that <code>nn.Embedding</code> is compatible with <code>jit</code>, if you wanted to use it.</p>
</div>
<span class="comment-copy">Appreciate the feedback/documentation. Would you advise using <code>module_instance(arguments)</code> over <code>module_instance.forward(arguments)</code>? Is there a specific case where you would need to choose between the two variations, other than preference?</span>
<span class="comment-copy">As given in the <a href="https://pytorch.org/docs/stable/nn.html#torch.nn.Module.forward" rel="nofollow noreferrer">documentation</a> of <code>forward</code> "Although the recipe for forward pass needs to be defined within this function, one should call the <code>Module</code> instance afterwards instead of this since the former takes care of running the registered hooks while the latter silently ignores them.".</span>
