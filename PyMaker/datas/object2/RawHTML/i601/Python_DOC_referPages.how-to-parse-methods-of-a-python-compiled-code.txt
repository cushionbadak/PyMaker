<div class="post-text" itemprop="text">
<p>I'm writing a <a href="https://docs.djangoproject.com/en/2.1/ref/validators/" rel="nofollow noreferrer">Django validator</a> for files uploaded with a form. These files are python scripts which can be buggy and/or unsafe, so I must not execute them before the are fully validated.</p>
<p>One check is to ensure that both methods "run" and "rollback" are present, again <strong>without executing the code</strong>.</p>
<p>All the uploaded python scripts have same structure : </p>
<pre><code>class Action(ActionGlobal):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def run(self, args):
        print("custom code here")
        ...

    def rollback(self,args):
        print("custom code here")
        ...
</code></pre>
<p>I've found the following solution to do this with AST : </p>
<pre><code>import ast
codetoanalyze=ast.parse(open("/path/to/script_to_analyse.py",'r').read())

if next((x for x in codetoanalyze.body[1].body if x.name == "run"), None) == None :
     raise ValidationError( _('Package error : module must contain a "run" method'), code='compilation_error', )

if next((x for x in codetoanalyze.body[1].body if x.name == "rollback"), None) == None :
     raise ValidationError( _('Package error : module must contain a "rollback" method'), code='compilation_error', )
</code></pre>
<p>It's working fine, but that's not very elegant (body<a href="https://docs.djangoproject.com/en/2.1/ref/validators/" rel="nofollow noreferrer">1</a>...), and because I've never used the AST module before, I believe there may be a smarter way to achieve this.</p>
<p>Any suggestion?</p>
</div>
<div class="post-text" itemprop="text">
<p>you should use <code>dir()</code>:</p>
<pre><code>class MyClass:
    def methodA(self):
        print("Method-A")
    def methodB(self):
        print("Method-B")

print(dir(MyClass))
</code></pre>
<p><strong>Output:</strong></p>
<blockquote>
<p><code>['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__',</code> <strong><code>'methodA'</code></strong>, <strong><code>'methodB'</code></strong><code>]</code></p>
</blockquote>
<p>Or, in your case</p>
<pre><code>print(all(elem in dir(Action) for elem in ['run', 'rollback']))
</code></pre>
<p><strong>Output:</strong></p>
<blockquote>
<p><code>True</code></p>
</blockquote>
<p>Works both in <em>Python 2</em> and <em>Python 3</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Making a set of the names in the code, and looping over all the required names will make your code a little less copy-paste-y:</p>
<pre><code>code_names = {x.name for x in codetoanalyze.body[1].body}
for reqd_name in ['run', 'rollback']:
    if reqd_name not in code_names:
        raise ValidationError( _('Package error : module must contain a {!r} method'.format(reqd_name)), code='compilation_error', )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, it seems that AST is a great solution for my need, so I've created a little post explaining it <a href="https://www.activcloud.eu/news/verify-python-code-without-executing-it" rel="nofollow noreferrer">here</a> </p>
<p>For my question, here is the solution I've implemented:</p>
<pre><code>codetoanalyze = ast.parse( open('/path/to/script_to_analyse.py','r').read())

# AST checks
if True not in [ [ y for y in x.bases if y.id == 'ActionGlobal' ] != [] for x in codetoanalyze.body if type(x) is ast.ClassDef and x.name == "Action" ] :
    raise ValidationError( _('Package error : module must provide an Action class which inherits from ActionGlobal'), code='compilation_error', )

methods = [ z.name for x in codetoanalyze.body if type(x) is ast.ClassDef and x.name == "Action" for y in x.bases if y.id == 'ActionGlobal' for z in x.body ]
for reqd_name in ['run', 'rollback']:
    if reqd_name not in methods:
        raise ValidationError( _('Package error : module must contain a "{}" method').format(reqd_name), code='compilation_error', )
</code></pre>
<p>I will wait for other posts and vote before selecting the accepted answer, if someone finds a better way to achieve this with another module (maybe with the <a href="https://docs.python.org/3/library/parser.html" rel="nofollow noreferrer">parser</a> ?).</p>
<p>Thank you for your help</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use a visitor like pattern to traverse the tree</p>
</div>
<span class="comment-copy">You could simply call the methods that are supposed to be there, trap any <code>AttributeError</code> that results, and complain.</span>
<span class="comment-copy">At what point in the process do you need to do this? Could you use an <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer"><code>abc</code></a>?</span>
<span class="comment-copy">you can do as  "assert hasattr(Action,'run') and hasattr(Action,'rollback')" for each class</span>
<span class="comment-copy">Thank you for your answers, This control is part of a django validator. I must not execute the scripts (load the class) before this has been validated. ActionGlobal is an abc but Action is not. dir() implies to instanciate an object, I'm not allowed to to that at this point.</span>
<span class="comment-copy">Could you <a href="https://stackoverflow.com/posts/54532671/edit">edit</a> to expand on the reasons behind your requirements? <i>"must not"</i>, <i>"not allowed to"</i> - why, and by whom?</span>
<span class="comment-copy">Your answer is correct however, Myclass is not imported in my process. I have to parse the file without executing it.</span>
<span class="comment-copy">@Julien I understood your problem. If you are directly executing functions and methods inside your module, AST is the best solution; BTW the Python idiomatic approach is to use <code>if __name__ == __main__:</code>: see <a href="http://effbot.org/pyfaq/tutor-what-is-if-name-main-for.htm" rel="nofollow noreferrer">What is <code>if __name__ == __main__</code> for?</a></span>
