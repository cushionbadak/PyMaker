<div class="post-text" itemprop="text">
<p>I am trying to write a function that converts an 8 character string of the form "yyyymmdd" into integer values of year, month, and day based on the string. The function parses a given string and returns integer year, month and day. I wrote the code for it, but I am having difficulties with returning the correct integer values in the right format. For example: y, m, d = parseDate("19700218") should return the integer values 1970 for y, 2 for m, and 18 for d.
My code is not correct, but I think that the start of it is correct:</p>
<pre><code>def parseDate(datestr):
    datestr.split()
    datestr.strip()
    return datestr
</code></pre>
<p>y,m,d = parseDate("19700218")</p>
<p>I hope that this is just an easy fix.</p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest using <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="nofollow noreferrer"><code>strptime</code></a> and get values from parsed date/datetime object.</p>
<p>This is out of the box, flexible and extendable solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>Code</p>
<pre><code>s = "19700218"
y = s[0:4]
m = s[5:6]
d = s[6:8]
</code></pre>
<p>Output</p>
<pre><code>y=1970
m=02
d=18
</code></pre>
<p>Hope it helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try something like this:</p>
<pre><code>def parse_date(string_date):
    year = int(string_date[0:4])
    month = int(string_date[4:6])
    day = int(string_date[6:8])
    return year, month, day

year, month, day = parse_date(date)
</code></pre>
<p>Test Code </p>
<pre><code>date = '19901131'

def parse_date(string_date):
    year = int(string_date[0:4])
    month = int(string_date[4:6])
    day = int(string_date[6:8])
    return year, month, day

year, month, day = parse_date(date)

print(year)
print(month)
print(day)
</code></pre>
<p>Output</p>
<pre><code>1990
11
31
</code></pre>
<p>Since we are converting to int, leading 0s will be dropped. Let me know if u want to include a format that includes leadings 0s</p>
</div>
<span class="comment-copy">Do you know what <code>split</code>  and <code>strip</code> do?</span>
<span class="comment-copy">If you want your function to provide three values, you should also return three values and calculate them before. You just return the string which is given to the function unchanged.</span>
<span class="comment-copy">One straightforward way would be to index, as:   date = '19700218'   year = date[0:4]   etc</span>
<span class="comment-copy">This can all be simplified to <code>year, month, day = map(int, (string_date[:4], string_date[4:6], string_date[6:]))</code>.</span>
<span class="comment-copy">True but the OP was using a function in his question. I thought it best to provide an answer in the same format. Plus I believe it is a bit more clear about what is happening rather than condense it all down to one line.</span>
<span class="comment-copy">I think the function definition is closer to what OP wanted, too. However, I don't understand why you didn't include the cast to <code>int</code> into the function - what does it do outside afterwards?</span>
<span class="comment-copy">Funny you say that, I made my edit right before you commented that to for that reason.</span>
<span class="comment-copy">I only intended to demonstrate the logic behind my suggestion. This can naturally be encompassed in a function. It's certainly clear and pythonic, though one may need to explain to a beginner with <code>map()</code> does. I mentioned it because this can be a natural follow up to your answer for conciseness.</span>
