<div class="post-text" itemprop="text">
<p>What does an ampersand <code>&amp;</code> mean at the end of a python <code>bytearray</code>?</p>
<p>e.g.:</p>
<pre><code>x_w = bytearray(b'\x00\x00\x04\x12\xaa\x12\x12&amp;')
</code></pre>
<p>When converting this to an integer by </p>
<pre><code>int.from_bytes(x_w, 'little')

Out[1]: 2743275644678045696
</code></pre>
<p>it gives a different result from the same bytearray without the '&amp;':</p>
<pre><code>x_wo = bytearray(b'\x00\x00\x04\x12\xaa\x12\x12')
int.from_bytes(x_wo, 'little')

Out[2]: 5087071236784128
</code></pre>
<p>I checked the <a href="https://docs.python.org/3/library/functions.html#func-bytearray" rel="nofollow noreferrer">documentation</a> but haven't found an answer to this. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>It's simply the representation of the byte with value <code>26</code> (decimal 38), which is the <code>'&amp;'</code> character in ASCII.</p>
<p>If you print the actual byte values of the bytes literal you used, you can see this clearly:</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; print(' '.join('%02x' % b for b in b'\x00\x00\x04\x12\xaa\x12\x12&amp;'))
00 00 04 12 aa 12 12 26
</code></pre>
<p>And the <code>repr</code> of the <code>bytearray</code> object prefers to represent bytes using ASCII characters rather than hex escapes whenever possible. So it will prefer the representation <code>'&amp;'</code> rather than <code>'\x26'</code>, even though they are technically equivalent:</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; bytearray([0x00, 0x00, 0x04, 0x12, 0xAA, 0x12, 0x12, 0x26])
bytearray(b'\x00\x00\x04\x12\xaa\x12\x12&amp;')

&gt;&gt;&gt; b'\x26' == b'&amp;'
True
</code></pre>
</div>
<span class="comment-copy">It's just a character. Change to big endian and you get <code>0x‭412AA121226‬</code> and <code>0x26</code> is char code for <code>&amp;</code>.</span>
