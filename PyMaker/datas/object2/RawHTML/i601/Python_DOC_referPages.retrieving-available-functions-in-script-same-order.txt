<div class="post-text" itemprop="text">
<p>I'm cleaning some smeared data for which I want to automate things a bit. That is, I want a script to have some predefined cleaning functions put in order of how the data should be cleaned, and I designed a decorator to retrieve these functions from a script using <a href="https://stackoverflow.com/a/4040709/7347631">this solution</a>:</p>
<pre><code>from inspect import getmembers, isfunction
import cd # cleaning module
functions_list = [o[0] for o in getmembers(cd) if isfunction(o[1])]
</code></pre>
<p>This works extremely good. However, it does retrieve the functions in a different order (<a href="https://docs.python.org/3/library/inspect.html#inspect.getmembers" rel="nofollow noreferrer">by name</a>)</p>
<p>For reproducibility purposes, consider the following cleaning module as <code>cd</code>:</p>
<pre><code>def clean_1():
    pass


def clean_2():
    pass


def clean_4():
    pass


def clean_3():
    pass
</code></pre>
<p>The solution outputs: </p>
<pre><code>['clean_1', 'clean_2', 'clean_3', 'clean_4']
</code></pre>
<p>Where it needs to be:</p>
<pre><code>['clean_1', 'clean_2', 'clean_4', 'clean_3']
</code></pre>
<p>Other solutions to the main problem are acceptable (performance is considered though).</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Other solutions to the main problem are acceptable (performance is considered though).</p>
</blockquote>
<p>In the interest of being able to define and import helper functions without having them included automatically, how about an explicit list:</p>
<pre><code>def clean_1():
    pass


def clean_2():
    pass


def clean_4():
    pass


def clean_3():
    pass


cleaners = [
    clean_1,
    clean_2,
    clean_4,
    clean_3,
]
</code></pre>
<p>or an explicit decorator:</p>
<pre><code>cleaners = []
cleaner = cleaners.append


@cleaner
def clean_1():
    pass


@cleaner
def clean_2():
    pass


@cleaner
def clean_4():
    pass


@cleaner
def clean_3():
    pass
</code></pre>
<p>As far as getting the attributes of a regular module in order goes, though, you should be able to use <code>__dict__</code> in Python 3.7+:</p>
<pre><code>functions_list = [k for k, v in cd.__dict__.items() if isfunction(v)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're half way there. You only need to sort the list based on the 1<sup>st</sup> line of the function's code object (<a href="https://docs.python.org/3/library/inspect.html#module-inspect" rel="nofollow noreferrer">[Python 3]: inspect - Inspect live objects</a>).</p>
<p>Note that I've only tried this on the (<strong>trivial</strong>) example from question (and didn't do any performance tests).</p>
<p><em>code.py</em>:</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python3

import sys 
from inspect import getmembers, isfunction
import cd  # The module from the question that contains the 4 clean_* functions


def main():
    member_functions = (item for item in getmembers(cd) if isfunction(item[1]))
    function_names = (item[0] for item in sorted(member_functions, key=lambda x: x[1].__code__.co_firstlineno))
    print(list(function_names))


if __name__ == "__main__":
    print("Python {:s} on {:s}\n".format(sys.version, sys.platform))
    main()
</code></pre>
<p><strong>Output</strong>:</p>
<blockquote>
<pre><code>e:\Work\Dev\StackOverflow\q054521087&gt;"e:\Work\Dev\VEnvs\py_064_03.06.08_test0\Scripts\python.exe" code.py
Python 3.6.8 (tags/v3.6.8:3c6b436a57, Dec 24 2018, 00:16:47) [MSC v.1916 64 bit (AMD64)] on win32

['clean_1', 'clean_2', 'clean_4', 'clean_3']
</code></pre>
</blockquote>
</div>
<span class="comment-copy">Look into ast for parsing python syntax trees <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer">docs.python.org/3/library/ast.html</a></span>
<span class="comment-copy">For clarity, could you include the code for <code>cd</code>? It's important to always include an <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> in questions here.</span>
<span class="comment-copy">@ChrisLarson. It's actually included. <i>"For reproducibility purposes, consider the following cleaning module:"</i></span>
<span class="comment-copy">@AndrewNaguib Ah. I made a small edit to your question to clarify, in case anyone else missed the reference.</span>
