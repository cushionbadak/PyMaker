<div class="post-text" itemprop="text">
<p>Suppose I have some variables:</p>
<pre class="lang-py prettyprint-override"><code>a, b, c, d, e = range(5)
</code></pre>
<p>I want to save the values of these variables in a file for later inspection. One way I thought to do this was:</p>
<pre class="lang-py prettyprint-override"><code>lookup = {
    'a': a,
    'b': b,
    'c': c,
    'd': d,
    'e': e
}
</code></pre>
<p>As you might imagine, with a large number of variables, this could get tedious. And, yes, I know many editors have functionality to make this kind of copy-paste action easy. But I'm looking for the standard, "Pythonic" way of dynamically building a key: value lookup where the key is the variable's name and the value is the variable's, well, value!</p>
<p>I thought about this:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; {var.__name__: var for var in [a, b, c, d, e]}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in &lt;dictcomp&gt;
AttributeError: 'int' object has no attribute '__name__'
</code></pre>
<p>I'm not surprised this didn't work, because integer variables are constants (I'm not sure of the exact way to describe things):</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = 1
&gt;&gt;&gt; a is b
True
&gt;&gt;&gt; b is a
True
&gt;&gt;&gt; a == b
True
</code></pre>
<p>How might I accomplish this?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import itertools

data = range(5)

result = {f"a{count}": value for count, value in zip(itertools.count(1), data)}

print(result)
</code></pre>
<p>Output:</p>
<pre><code>{'a1': 0, 'a2': 1, 'a3': 2, 'a4': 3, 'a5': 4}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You might want to look into <a href="https://stackoverflow.com/questions/7969949/whats-the-difference-between-globals-locals-and-vars">locals()</a> and <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer">inspect</a>. The result could be i.e.:</p>
<pre><code>&gt;&gt;&gt; from inspect import ismodule
&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = 1
&gt;&gt;&gt; dict((k, v) for k, v in locals().items() if not k.startswith("__") and not callable(v) and not ismodule(v))
{'a': 1, 'b': 1}
</code></pre>
<p>But to get it right you might need to add some additional conditions, and also you will have to watch out for mutable objects or values, as in this case those would mutate and you would not preserve the earlier value for later inspection. Serialization or copying them could help.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could tackle it from the other direction and save all the local variables, using <code>locals()</code> For example</p>
<pre><code>import json
def foo(a=None, bb=None):
    ccc='lots of c'; de=42
    print( json.dumps( locals() ))
</code></pre>
<p><code>foo()</code> generates <code>{"a": null, "bb": null, "ccc": "lots of c", "de": 42}</code></p>
<p>( <code>json.dumps</code> is one way to serialize a dict, and will work only for simple variables that can be converted to JSON)</p>
<p>Another way to just get some variables would be</p>
<pre><code>print( json.dumps( dict( a=a, b=b, c=c) ))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another way using <code>ascii_lowercase</code> from <code>string</code> module:</p>
<pre><code>import string

alphabets = iter(string.ascii_lowercase)
lookup = {next(alphabets): x for x in range(5)}

print(lookup)
# {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4}
</code></pre>
</div>
<span class="comment-copy">Perhaps my example was <i>too</i> simplistic. What if <code>a</code> and <code>b</code> are really something like <code>ip_address</code> and <code>my_dogs_name</code>? This approach would lose that very valuable information.</span>
<span class="comment-copy">@blacksite, if you want to save all local/global names, use <code>locals()</code> and <code>globals()</code> respectively and serialize the result</span>
