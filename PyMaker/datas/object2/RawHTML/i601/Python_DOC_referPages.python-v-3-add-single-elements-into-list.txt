<div class="post-text" itemprop="text">
<p>Program takes a phone number and adds single digits to list</p>
<p>This is my input <code>867-5309</code></p>
<p>This is my <strong>desired</strong> output <code>[8, 6, 7, 5, 3, 0, 9]</code></p>
<p>This is what I get <em>instead</em> <code>[[8, 6, 7], [5, 3, 0, 9]]</code></p>
<p>How to fix???</p>
<pre><code>import re
import num2words

pattern=[r'\d+']
ph=[]

phone = input("Enter phone number ")
print("You entered: ", phone)

for p in pattern:
    match=re.findall(p,phone)
    #print(match)

for i in range(len(match)):
    n=match[i]
    ph.append([int(d) for d in str(n)])
    #print(num2words.num2words(match[i]))

print(ph)
</code></pre>
<p><em>Ultimately I wish the program to take the digits and spell out each digit (but that is a different thread, if necessary), i.e 867-5309, <code>eight six seven five three zero nine</code></em></p>
</div>
<div class="post-text" itemprop="text">
<p>You're going way to complicated here.</p>
<p>First of all your regex is greedy which means its matching all numbers up to - and then all other after as one match.</p>
<p>You can do this with a less greedy regex and then the match turns into exactly your desired output.</p>
<p>See code below.</p>
<pre><code>import re

phone = input("Enter phone number ")
print("You entered: ", phone)


match = re.findall('\d', phone)
print(match)
</code></pre>
<p>Output is,</p>
<pre><code>['8', '6', '7', '5', '3', '0', '9']
</code></pre>
<p>from there you can do this.</p>
<pre><code>for i in match:
    print(num2words.num2words(i))
</code></pre>
<p>which outputs,</p>
<pre><code>eight point zero
six point zero
seven point zero
five point zero
three point zero
zero point zero
nine point zero
</code></pre>
<p>only thing left is to get rid of the "point zero", I'm not familiar with num2words I'm afraid.</p>
</div>
<div class="post-text" itemprop="text">
<p>why not just something like this:</p>
<pre><code>ph_str = '867-5309'
ph_list = [int(i) for i in ph_str if i.isnumeric()]
print(ph_list)  # [8, 6, 7, 5, 3, 0, 9]
</code></pre>
<p><a href="https://docs.python.org/3/library/stdtypes.html?highlight=isnum#str.isnumeric" rel="nofollow noreferrer">str.isnumeric</a> checks if the digit (as string) can be converted to an <code>int</code>. the rest is a <a href="https://docs.python.org/3/tutorial/datastructures.html?list-comprehensions#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> that directly generates the list you are looking for.</p>
</div>
<div class="post-text" itemprop="text">
<p>This might also work:</p>
<pre><code>number = "867-5309"
lst = []

for i in number:
    if i in "0123456789":
        lst.append(int(i)) 

print(lst) # [8, 6, 7, 5, 3, 0, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Other one liner option:</p>
<pre><code>[ int(n) for m in s.split('-') for n in m  ]
</code></pre>
</div>
<span class="comment-copy">try <code>print(num2words.num2words(int(i)))</code></span>
<span class="comment-copy">Just beat me to the same answer... my only addition would be to suggest the <code>inflect</code> module (<a href="https://pypi.org/project/inflect/" rel="nofollow noreferrer">pypi.org/project/inflect</a>) for doing numbers to words.</span>
<span class="comment-copy">@match oh, did not know that module. will have a look at it. thanks!</span>
