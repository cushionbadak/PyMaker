<div class="post-text" itemprop="text">
<p>I Would like to use the <a href="https://notifiers.readthedocs.io/en/latest/Logger.html" rel="nofollow noreferrer">Notifiers</a> logging handler in Django. I have my loggers specifed using dictConfig syntax.</p>
<p>Here is an example from Notifer's own docs:</p>
<pre><code>&gt;&gt;&gt; import logging
&gt;&gt;&gt; from notifiers.logging import NotificationHandler

&gt;&gt;&gt; log = logging.getLogger(__name__)
&gt;&gt;&gt; defaults = {
...    'token': 'foo,
...    'user': 'bar
... }

&gt;&gt;&gt; hdlr = NotificationHandler('pushover', defaults=defaults)
&gt;&gt;&gt; hdlr.setLevel(logging.ERROR)

&gt;&gt;&gt; log.addHandler(hdlr)
&gt;&gt;&gt; log.error('And just like that, you get notified about all your errors!')
</code></pre>
<p>The dictConfig syntax is like this:</p>
<pre><code>LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/path/to/django/debug.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
</code></pre>
<p>How do I add the Notifier handler using the latter syntax? I can't find a way to set the first, required argument to <code>NotificationHandler</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps specify your own factory class to instantiate the handler. That can be done with the <code>()</code> syntax described here:</p>
<p><a href="https://docs.python.org/3/library/logging.config.html#logging-config-dict-userdef" rel="nofollow noreferrer">https://docs.python.org/3/library/logging.config.html#logging-config-dict-userdef</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to @jspcal I found the answer. Define a handler factory like this:</p>
<pre><code>def slack_handler_factory():
    return NotificationHandler(
        'slack',
        defaults={
            'webhook_url': SLACK_WEBHOOK_URL,
        },
    )
</code></pre>
<p>..and one can add it to handlers using the <code>()</code>-syntax:</p>
<pre><code>...

'handlers': {
    'slack': {
        '()': slack_handler_factory,
        'level': 'WARNING',
    },
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think it should work by adding a new <a href="https://docs.djangoproject.com/en/2.1/topics/logging/#id4" rel="nofollow noreferrer">handler</a>:</p>
<pre><code>LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/path/to/django/debug.log',
        },
        'notify': {
            'level': 'DEBUG',
            'class': 'notifiers.logging.NotificationHandler',
        },
    },
    'loggers': {
        'django': {  # or you can add any new logger if you want
            'handlers': ['notify'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
</code></pre>
<h3>Update</h3>
<p>A solution could be like this by overriding NotificationHandler:</p>
<pre><code>class CustomNotificationHandler(NotificationHandler):
     def __init__(self, *args, **kwargs):
         defaults = {
           'token': 'foo,
           'user': 'bar
         }
         super(CustomNotificationHandler, self).__init__('pushover', defaults)
</code></pre>
<p>and use that in handler in django logging.</p>
<pre><code>'notify': {
        'level': 'DEBUG',
        'class': 'CustomNotificationHandler',
    },
</code></pre>
</div>
<span class="comment-copy">But in this way you can't specify the arguments to <code>notifiers.logging.NotificationHandler</code>.. That was my problem in the first place.</span>
<span class="comment-copy">Yes. Btw, your answer looks great, but can you please have a look into my updated answer. thanks</span>
<span class="comment-copy">Yes, that should work but the factory is more elegant, no ☺️ ?</span>
<span class="comment-copy">Yes, thats much more cleaner :)</span>
