<div class="post-text" itemprop="text">
<p>I have :</p>
<pre><code>string = 'Here it is, your gif! am a bot. [^(Report an issue)] ‚ù§ that bot,I ‚ù§ ur mom **YEET** üòé ,GOTTEM!"'
</code></pre>
<p>and I try :</p>
<pre><code>string = re.sub(r'\W+', ' ', string)
</code></pre>
<p>and that gives me :</p>
<pre><code>'Here it is your gif am a bot Report an issue that bot I ur mom YEET GOTTEM'  
</code></pre>
<p>But I would like this :</p>
<pre><code>'Here it is, your gif! am a bot. (Report an issue) that bot,I ur mom YEET ,GOTTEM!"'
</code></pre>
<p>Just the 26 letters, no numbers and only the most used symbols in this group: <code>.,()'"?!</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Make a character class of the things you accept (with <code>[]</code>) and invert it (with a leading <code>^</code>, making it <code>[^stuff]</code>):</p>
<pre><code>string = re.sub(r'[^a-zA-Z.,()\'"?! ]+', '', string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use this for your regex instead : <code>[^a-zA-Z?!.,()\'" ]+</code></p>
<p>The brakets define a collection of elements you wish to select, the caret at the front defines the negation of what is inside.</p>
<p>Thus leaving you with</p>
<pre><code>pattern = r'[^a-zA-Z?!.,()\'" ]+'
string = re.sub(pattern, ' ', string)
</code></pre>
</div>
<span class="comment-copy">Thanks. I'll give it the green check when it lets me. But what do you mean by 'invert'? "invert it (with a leading ^"</span>
<span class="comment-copy">@Renoldus: Normally, a character class matches any of the things in it, so <code>[a-z]</code> matches only lower case alphabetic characters. Putting the <code>^</code> at the beginning of the class means it matches everything <i>but</i> the things in it, so <code>[^a-z]</code> will match all characters <i>except</i> lower case alphabetic characters; it's "inverting" the set of things the class matches on.</span>
<span class="comment-copy">I see. Knowing that will come in handy.</span>
<span class="comment-copy">Inside a character class, you don't need to escape most punctuation; <a href="https://docs.python.org/3/library/re.html#index-9" rel="nofollow noreferrer">per the docs</a>: "Special characters lose their special meaning inside sets." About the only stuff that needs escaping (or careful placement) are <code>-</code> (must be first or escaped), <code>]</code> (must be first or escaped), <code>^</code> (must be escaped <i>only</i> if in first position), <code>\ </code> (if it might otherwise make a recognized escape) and the quote character chosen for the string. Getting rid of the unnecessary backslashes makes it a lot easier to read.</span>
<span class="comment-copy">Thanks for pointing that out, did not know! regex101.com told me it was valid so that was good enough for me ^^</span>
<span class="comment-copy">I updated the answer to reflect that. Thank you @ShadowRanger, I learnt something !</span>
