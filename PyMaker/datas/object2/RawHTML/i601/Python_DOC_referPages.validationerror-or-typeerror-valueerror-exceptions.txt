<div class="post-text" itemprop="text">
<p>I am quite a newbie understanding of how to catch exceptions in python. I have a question regarding those two types of ways of catching exceptions. I only found useful information about ValidationError regarding <a href="https://stackoverflow.com/questions/18781492/forms-validationerror-and-error-code">here</a> </p>
<p>But I did not quite understand if it can be used besides django or what are the error messages that I can expect about it. I saw this code sample regarding the validation of types. </p>
<pre><code>except (TypeError, ValueError) as error:
            LOGGER.error('Error e.g.', exc_info=True)

except ValidationError:
            LOGGER.error('Error e.g', exc_info=True)
</code></pre>
<p>So for <code>TypeError</code> and <code>ValueError</code> for me, it is clear:</p>
<p><strong>exception ValueError</strong></p>
<p>Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.</p>
<p><strong>exception TypeError</strong></p>
<p>Raised when an operation or function is applied to an object of inappropriate type. The associated value is a string giving details about the type mismatch.</p>
<p><strong>In conclusion,</strong>
I am trying to understanding what would be the advantage of the second code with <code>ValidationError</code>, but it could be tricky as I did not find good documentation about. If someone could share knowledge about ValidationError, I would highly appreciate,</p>
<p>I am raising this question because I am going to use related library and I have not seen the exceptions being treated like this.</p>
<p><a href="https://pypi.org/project/related/" rel="nofollow noreferrer">https://pypi.org/project/related/</a></p>
<p><strong>Thank you community!</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Python exceptions can be caught in this way:</p>
<pre><code>try:
&lt;your code&gt;
except &lt;Exception&gt;:
    &lt;CODE 2&gt;
</code></pre>
<p>OR 
LIKE THIS</p>
<pre><code>try:
    &lt;your code&gt;
except(&lt;exception1&gt;,&lt;exception2&gt;):
    &lt;Code to handle exception&gt;
</code></pre>
<blockquote>
<p>You are simply handling multiple exceptions together.    You can
  always split them.    They are not 2 different ways.
  In your case the as is for logging it .</p>
</blockquote>
<p>Here are a few examples:  </p>
<pre><code>try:
    &lt;code&gt;
except TypeError:
    &lt;Code for handling exception&gt;
except ValueError:
    &lt;Code for handling exception&gt;
except ValidationError:
    &lt;Code for handling exception&gt;
except:
    &lt;Code for handling exception&gt;
</code></pre>
<p>In the last case it catches exception of any type since no type is specified.<br/>
<strong>In python programs can raise any exception for anything.<br/>
In fact exception is just a special class ,even you can create one for your library.</strong> </p>
<blockquote>
<p>So the best way to find about the exception is to read the docs of the library
  not the exception class.</p>
</blockquote>
<p><strong><em>If your program catches the exception and wants more detail about it for creating a log file the code can be written like this.</em></strong> </p>
<pre><code>except TypeError as e:
    i=str(e)
</code></pre>
<p>In this case you are catching the exception and converting its detail to a string.<br/>
This is from the django docs about the error you are talking about.</p>
<blockquote>
<p>Form validation happens when the data is cleaned. If you want to
  customize this process, there are various places to make changes, each
  one serving a different purpose. Three types of cleaning methods are
  run during form processing. These are normally executed when you call
  the is_valid() method on a form. There are other things that can also
  trigger cleaning and validation (accessing the errors attribute or
  calling full_clean() directly), but normally they wonâ€™t be needed.</p>
<p>In general, any cleaning method can raise ValidationError if there is
  a problem with the data it is processing, passing the relevant
  information to the ValidationError constructor. See below for the best
  practice in raising ValidationError. If no ValidationError is raised,
  the method should return the cleaned (normalized) data as a Python
  object.</p>
</blockquote>
<p>Hopefully this should help<br/>
<a href="https://docs.djangoproject.com/en/2.1/ref/forms/validation/" rel="nofollow noreferrer">The link to docs</a><br/>
<a href="https://docs.python.org/3/library/exceptions.html" rel="nofollow noreferrer">This link has info about other common builtin exception classes.</a><br/>
If this answer solves your question you can click the tick.</p>
</div>
<div class="post-text" itemprop="text">
<p>They are different blocks of code for handling different exceptions. </p>
<p>However in this example, both cases have the same logic for how they handle each exception.</p>
<p>It might make more sense if we split up the cases into 3 different blocks of code:</p>
<pre><code>except TypeError as error:
    LOGGER.error('Type error: ', exc_info=True);
except ValueError as error:
    LOGGER.error('Value error: ', exc_info=True);
except ValidationError error:
    LOGGER.error('Validation error: ', exc_info=True);
</code></pre>
<p><code>TypeError</code> will be thrown when an incorrect type is used</p>
<p><code>ValueError</code> will be thrown when an incorrect value is used</p>
<p><code>ValidationError</code> will be thrown when the validation fails</p>
<p>The program will handle each exception differently</p>
</div>
<span class="comment-copy">Something that may be unclear to you: <code>TypeError</code> and <code>ValueError</code> are built into Python. But a library can and often will define its own exceptions. <code>ValidationError</code> comes from a library you are using.</span>
<span class="comment-copy">For searching about exceptions you should look about the docs of your library not the exception since it itself will have no docs</span>
<span class="comment-copy">@Anonymous yes, I raised the question because I am getting to know a new library called related, in order to do a validation <a href="https://pypi.org/project/related/" rel="nofollow noreferrer">pypi.org/project/related</a></span>
<span class="comment-copy">@may OK then you can just see the file for exceptions in it and find the statement</span>
<span class="comment-copy">raise validation error</span>
<span class="comment-copy">for me, it is very clear now thanks to your explanation together with the other contribution :)</span>
<span class="comment-copy">But I guess this ValidationError is not supported for all the validation process as I am using this new lib called related, and this type exception is not listed there, as an example.</span>
