<div class="post-text" itemprop="text">
<p>I'm making a small application that attempts to find company website URLs by searching for their names via Bing. It takes in a big list of company names, uses the Bing Search API to obtain the 1st URL, &amp; saves those URLs back in the list. </p>
<p>I'm having a problem with <code>aiohttp</code>'s <code>ClientSession.get()</code> method, specifically, it fails silently &amp; I can't figure out why. </p>
<p>Here's how I'm initializing the script. Keep an eye out for <code>worker.perform_mission()</code>:</p>
<pre class="lang-py prettyprint-override"><code>async def _execute(workers,*, loop=None):
    if not loop:
        loop = asyncio.get_event_loop()
    [asyncio.ensure_future(i.perform_mission(verbose=True), loop=loop) for i in workers]

def main():
    filepth = 'c:\\SOME\\FILE\\PATH.xlsx'
    cache = pd.read_excel(filepth)

    # CHANGE THE NUMBER IN range(&lt;here&gt;) TO ADD MORE WORKERS.
    workers = (Worker(cache) for i in range(1))
    loop = asyncio.get_event_loop()

    loop.run_until_complete(_execute(workers, loop=loop))

    ...&lt;MORE STUFF&gt;...
</code></pre>
<p>The <code>worker.perform_mission()</code> method does the following (scroll to the bottom and look at <code>_split_up_request_like_they_do_in_the_docs()</code>):</p>
<pre class="lang-py prettyprint-override"><code>class Worker(object):
    def __init__(self, shared_cache):
        ...&lt;MORE STUFF&gt;...

    async def perform_mission(self, verbose=False):
        while not self.mission_complete:
            if not self.company_name:
                await self.find_company_name()
                if verbose:
                    print('Obtained Company Name')
            if self.company_name and not self.website:
                print('Company Name populated but no website found yet.')
                data = await self.call_bing() #&lt;&lt;&lt;&lt;&lt; THIS IS SILENTLY FAILING.
                if self.website and ok_to_set_website(self.shared_cache, self):
                    await self.try_set_results(data)
                    self.mission_complete = True
                else:
                    print('{} worker failed at setting website.'.format(self.company_name))
                    pass
            else:
                print('{} worker failed at obtaining data from Bing.'.format(self.company_name))
                pass

    async def call_bing(self):
        async with aiohttp.ClientSession() as sesh:
            sesh.headers = self.headers
            sesh.params = self.params
            return await self._split_up_request_like_they_do_in_the_docs(sesh)

    async def _split_up_request_like_they_do_in_the_docs(self, session):
        print('_bing_request() successfully called.') #&lt;&lt;&lt;THIS CATCHES
        async with session.get(self.search_url) as resp:
            print('Session.get() successfully called.') #&lt;&lt;&lt;THIS DOES NOT.
            return await resp.json()
</code></pre>
<p>And finally my output is:</p>
<pre class="lang-sh prettyprint-override"><code>Obtained Company Name
Company Name populated but no website found yet.
_bing_request() successfully called.

Process finished with exit code 0
</code></pre>
<p>Can anyone help me figure out why <code>print('Session.get() successfully called.')</code>, isn't triggering?...or maybe help me ask this question better?</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at this part:</p>
<pre><code>async def _execute(workers,*, loop=None):
    # ...
    [asyncio.ensure_future(i.perform_mission(verbose=True), loop=loop) for i in workers]
</code></pre>
<p>You create a bunch of tasks, but you don't await these tasks are finished. It means <code>_execute</code> itself will be done right after tasks are created, long before these tasks are finished. And since you run event loop until <code>_execute</code> done, it will stop shortly after start.</p>
<p>To fix this, use <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.gather" rel="nofollow noreferrer">asyncio.gather</a> to wait multiple awaitables are finished:</p>
<pre><code>async def _execute(workers,*, loop=None):
    # ...
    tasks = [asyncio.ensure_future(i.perform_mission(verbose=True), loop=loop) for i in workers]
    await asyncio.gather(*tasks)
</code></pre>
</div>
<span class="comment-copy">Aaaaaaaaaaaaaaaand completely fixed...I should probably look into the different ways one loads an event loop.</span>
