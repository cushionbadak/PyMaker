<div class="post-text" itemprop="text">
<p>I'm looking for the most elegant/short/pythonic way to iterate through two uneven lists simultaneously. If the shorter list ends at some point, it should start to iterate from the beginning.</p>
<p>So far, I managed to do it with the <code>while</code>, which I consider as ugly, and too long (from various reasons I need as short code as possible).</p>
<pre><code>list1 = ["a", "b", "c"]
list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

i1 = 0
i2 = 0
while True:
    if i2 == len(list2):
        break
    if i1 == len(list1):
        i1 = 0
    print(list1[i1], list2[i2])
    i1 += 1
    i2 += 1
</code></pre>
<p>The expected result should look like this. I'm achieving it with while loop (the code above). But I need to have as short code as possible:</p>
<pre><code>a 1
b 2
c 3
a 4
b 5
c 6
a 7
b 8
c 9
a 10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>zip</code> both lists, feeding the shortest one to <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="noreferrer"><code>itertools.cycle</code></a> so it repeats indefinitely (until <code>list2</code> ends):</p>
<pre><code>import itertools

list1 = ["a","b","c"]
list2 = [1,2,3,4,5,6,7,8,9,10]

for a,b in zip(itertools.cycle(list1),list2):
    print(a,b)
</code></pre>
<p>prints:</p>
<pre><code>a 1
b 2
c 3
a 4
b 5
c 6
a 7
b 8
c 9
a 10
</code></pre>
<p>(of course don't use <code>itertools.zip_longest</code> as <code>cycle</code> never ends, which would create an infinite loop)</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do:</p>
<pre><code>list1 = ["a", "b", "c"]
list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

for i, e in enumerate(list2):
    print(list1[i % len(list1)], e)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>a 1
b 2
c 3
a 4
b 5
c 6
a 7
b 8
c 9
a 10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've got something that is a bit cleaner than what you've got and doesn't require you know in advance which is larger.  No idea if this is the most elegant/short/pythonic way to do things but here goes:</p>
<pre><code>list1 = ["a","b","c"]
list2 = [1,2,3,4,5,6,7,8,9,10]

length1 = len(list1)
length2 = len(list2)

for i in range(max(length1,length2)):
    print(list1[i%length1],list2[i%length2])
</code></pre>
<p>prints the following: </p>
<pre><code>a 1
b 2
c 3
a 4
b 5
c 6
a 7
b 8
c 9
a 10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't know the sizes of your lists, use <code>sorted</code> to get it:</p>
<pre><code>list1 = ["a", "b", "c"]
list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

shorter, longer = sorted([list1, list2], key=len)
</code></pre>
<p>Now you can <code>itertools.cycle</code> the shorter one, and <code>zip</code>:</p>
<pre><code>for item1, item2 in zip(cycle(shorter), longer):
    ...
</code></pre>
<p>This won't necessarily print your items in the order that you may have originally wanted (<code>list1</code> on the left, <code>list2</code> on the right). To fix that, you can just compute the longer list by hand:</p>
<pre><code>iter1, iter2 = cycle(list1), list2 if len(list1) &lt; len(list2) else list1, cycle(list2)
for item1, item2 in zip(iter1, iter2):
    ...
</code></pre>
<p>You could make it a one-liner with</p>
<pre><code>for item1, item2 in zip(*(cycle(list1), list2 if len(list1) &lt; len(list2) else list1, cycle(list2))):
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>itertools</code>:</p>
<pre><code>import itertools
list1 = ["a","b","c"]
list2 = [1,2,3,4,5,6,7,8,9,10]
print(list(itertools.cycle(list1), list2))
</code></pre>
</div>
<span class="comment-copy">itertools.cycle</span>
<span class="comment-copy">Look into <code>itertools.cycle</code> from the <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer">official documentation</a>.  This is right up the alley.</span>
<span class="comment-copy">Not that it's really relevant.. I did a test on the m 3 highest voted answers and seems @Hoog's performs best on average. This is neglegable and irrelevant but for those that wanted to know without doing the tests, see <a href="https://repl.it/repls/NiceRosyAddons" rel="nofollow noreferrer">repl.it/repls/NiceRosyAddons</a> for my test and update if I'm off. Pluse it looks the cleanest imo.</span>
<span class="comment-copy">Clever, this does not require any additional import</span>
<span class="comment-copy">The question is tagged Python-3.x</span>
<span class="comment-copy">Oh. You're right. Of course just <code>zip(itertools.cycle(list1), list))</code></span>
