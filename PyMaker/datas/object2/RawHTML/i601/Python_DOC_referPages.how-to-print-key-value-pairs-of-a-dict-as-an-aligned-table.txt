<div class="post-text" itemprop="text">
<pre><code>Student_Name = {"Mathematics": 90, 
                "Computer Science": 100, 
                "Chemistry": 90, 
                "Physics": 97, 
                "English": 95}
for key,value in Student_Name.items():
    print(key,value)
</code></pre>
<p>I want to print like:</p>
<pre class="lang-none prettyprint-override"><code>Mathematics        90
Computer Science   100
Chemistry          90 
</code></pre>
<p>and so on but it is printing like this</p>
<pre class="lang-none prettyprint-override"><code>Mathematics 90
Computer Science 100
Chemistry 90
Physics 97
English 95
</code></pre>
<p>I want to print marks and subjects in proper line.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:  </p>
<pre><code>&gt;&gt;&gt; for key,value in Student_Name.items():
...     print("{0:20}{1:5d}".format(key,value))
</code></pre>
<p>Beginning from python 3.6, you can use this also. (Courtesy of Jon Clements)   </p>
<pre><code>for key,value in Student_Name.items():
    print(f'{key:20}{value}')
</code></pre>
<p>For additional references, visit <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">this link.</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You've got a number of options:</p>
<p>Taking your original code you could simply tab the next item along:</p>
<pre><code>for key, value in Student_Name.items():
    print(key,'\t',value)
</code></pre>
<p>Although this wouldn't be perfect as it's a tab, and unless all the keys are similar length it wouldn't look as you intended.</p>
<p>Output: </p>
<pre><code>Mathematics      90
Computer Science         100
Chemistry        90
Physics          97
English          95
</code></pre>
<p>A better solution could would be:</p>
<pre><code>for key, value in Student_Name.items():
    print(f'{key:20}{value}')
</code></pre>
<p>output:</p>
<pre><code>Mathematics         90
Computer Science    100
Chemistry           90
Physics             97
English             95
</code></pre>
<p>Python 3.6 required</p>
<p>My only question to you is why, you want to do this and would it be better to print some file and use delimiter and worry about presentation later. Either way you should be able to do with the above</p>
<p>Equally suitable would be the 1st answer here </p>
<pre><code>for key,value in Student_Name.items():
...     print("{0:20}{1:5d}".format(key,value))
</code></pre>
<p>Which out puts the same as f' but, both have the problem that if the subject <code>key</code> is much longer than the others the appearance will need to be amended. Changing key <code>{key:20}</code> or <code>{0:20}</code> to a greater number will help, but maybe you could count check the length of your keys using the longest as the value here plus 5 for padding.</p>
<p>for example you could do this (added in an extra key for illustration purposes:</p>
<pre><code> Student_Name = {"Mathematics": 90, "Computer Science": 100, "Chemistry": 90, "Physics": 97, "English": 95, "REALLY LONG SUBJECT ABOUT POLITICS": 10}
 # Get the longest subject name
 length = max(len(x) for x in Student_Name)
 # decide on padding
 padding = 5

 #use these two value to working out the exact space required
 space = length + padding

 #format and print the statement
 for key, value in Student_Name.items():
 ...     subject = "{0:{space}}".format(key, space=space)
 ...     result = "{0:5d}".format(value)
 ...     print(subject + result)
</code></pre>
<p>Output :</p>
<pre><code>Mathematics                           90
Computer Science                     100
Chemistry                             90
Physics                               97
English                               95
REALLY LONG SUBJECT ABOUT POLITICS    10
</code></pre>
<p>Would always make the result the right distance away from the longest subject name.</p>
</div>
<div class="post-text" itemprop="text">
<p>In order to avoid hardcoded width of the first column as in other answers, you can calculate the maximum key length in advance.  </p>
<p>Simple example:</p>
<pre><code>grades = {"Mathematics": 90, 
          "Computer Science": 100, 
          "Chemistry": 90, 
          "Physics": 97, 
          "English": 95}
max_key_len = max(map(len, grades.keys()))
format_string = '{{key:{}}}  {{value}}'.format(max_key_len)
for key, value in grades.items():
    print(format_string.format(key=key, value=value))
</code></pre>
<p>will print:</p>
<pre class="lang-none prettyprint-override"><code>Mathematics       90
Computer Science  100
Chemistry         90
Physics           97
English           95
</code></pre>
<p>We can improve the code further by wrapping it in a function and adding a separator parameter:</p>
<pre><code>from typing import Dict, Iterator


def to_aligned_records(dict_: Dict,
                       *,
                       sep: str = ' ') -&gt; Iterator[str]:
    """Yields key-value pairs as strings that will be aligned when printed"""
    max_key_len = max(map(len, dict_.keys()))
    format_string = '{{key:{max_len}}}{sep}{{value}}'.format(max_len=max_key_len, sep=sep)
    for key, value in dict_.items():
        yield format_string.format(key=key, value=value)
</code></pre>
<p>And use it like this:</p>
<pre><code>&gt;&gt;&gt; print(*to_aligned_records(grades), sep='\n')
Mathematics      90
Computer Science 100
Chemistry        90
Physics          97
English          95

&gt;&gt;&gt; print(*to_aligned_records(grades, sep=' '*4), sep='\n')
Mathematics         90
Computer Science    100
Chemistry           90
Physics             97
English             95

&gt;&gt;&gt; print(*to_aligned_records(grades, sep='\t'), sep='\n')
Mathematics         90
Computer Science    100
Chemistry           90
Physics             97
English             95
</code></pre>
</div>
<span class="comment-copy">You can also do the longest subject name length like so <code>length = max(map(len,Student_Name))</code>. Map function is really useful for operations on all elements in an iterable.</span>
