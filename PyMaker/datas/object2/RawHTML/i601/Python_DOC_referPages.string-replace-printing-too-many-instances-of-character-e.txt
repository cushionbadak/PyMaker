<div class="post-text" itemprop="text">
<p>I am trying to write a function that takes a string as input and returns a string with all vowels repeated 4 times. </p>
<p><em>eg: <code>apple</code> becomes <code>aaaappleeee</code></em></p>
<p>It works for every vowel, except for <em>e</em>, in which it repeats <em>e</em> an egregious amount of times.</p>
<p>Python 3. I have tried playing with the replace function, changing the replacement value to <code>i+i+i+i</code>, <code>i*4</code>, <code>i(4)</code>, <code>(i+i)*2</code>, but nothing seems to help. </p>
<pre><code>def exclamation(string):
    for i in string:
        if i in 'aeiou':
            string = string.replace(i, i*4)
    return string + '!'
</code></pre>
<p><code>exclamation('excellent')</code>  should return <code>eeeexceeeelleeeent!</code></p>
<p>however, it returns:
    <code>eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeexceeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeelleeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeent!</code></p>
<p>As stated, the function works fine for all other vowels, except <em>e</em>.</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>You shall never modify something you're iterating over, store the modified word in a new variable. Modifing your code it would be something like</p>
<pre><code>def exclamation(string):
    new = ''
    for i in string:
        if i in 'aeiou':
            new += i*4
        else:
            new += i
    return new + '!'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For every vowel you’re iterating through, the loop checks the condition, replaces the content in the same string and then iterates by 1 which now is the same string but instead of the next new letter, it now has to deal with 3 more of the same vowel. For example:</p>
<p>Let’s talk about the string ‘excellent’. For the first vowel ‘e’, it is replaced with ‘eeee’ resulting in the string being ‘eeeexcellent’, now when the second loop begins it starts at index(1) which is still an ‘e’ and this keeps going on. <strong>Never modify the iterable you’re iterating over.</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>It's not that <code>e</code> is being treated differently, but rather that you're replacing each <code>e</code> with <code>eeee</code> for as many <code>e</code>s as there are in the word.  If you try other words with multiples of the same vowel, you would see the same behavior there.</p>
<p>Instead of replacing for each vowel in the string, you should be doing each replacement once, which will effect every instance of that vowel in the string:</p>
<pre><code>def exclamation(s):
    for vowel in 'aeiou':
        s = s.replace(vowel, vowel*4)
    return s + '!'

print(exclamation('excellent'))
# 'eeeexceeeelleeeent!'
</code></pre>
<p>Note that this only works if the word is already lowercase (though that would be easy to fix, add capital vowels to the loop). </p>
<p>Another way of doing this would be to define a translation table to do all of the replacements at once:</p>
<pre><code>trans = str.maketrans({vowel: vowel*4 for vowel in 'aeiou'}) 

def exclamation(s):
    return s.translate(trans)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>def exclamation(string):</p>
<pre><code>result = ''
for i in string:
    if i in 'aeiou':
        vowel = i * 4
    else:
        vowel = i
    result += vowel
return result + '!'
</code></pre>
<p><strong>The reason why replace didnt work for excellent is because we have 3 'e' in  which means for each of the 'e' in the loop, replace will multiply by 4 which will definitely give you 12 'e's per one 'e' in excellent</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>It is happening because your loop will consider the replaced 'e's as the element of the string as well.</p>
<p>Here is what I am saying:</p>
<ul>
<li>String is excellent </li>
<li>Iterate through the string and check if the letter is vowel 

<ul>
<li>If the letter is vowel, write that vowel 4 times. </li>
</ul></li>
</ul>
<p>By following the above steps, we will find this result as the first iteration. </p>
<p>First iteration will work on the first letter which is 'e' and will replace it with 'eeee'. So at the end of the first iteration, our final string will be: <strong>'eeeexcellent'</strong> </p>
<p>Now for the second iteration, <em>it will consider the final string</em> we got after the first iteration. And for second iteration, the word to be consider will be 'e' only. So as you can see, you need to maintain the string as it is after each iteration, and save the replaced result to a new string. (it will always be a new string after all as string is not mutable)</p>
<pre><code>def exclamation(string):
    tmp = ''               #taking temporary variable to store the current data
    for i in string:
        if i in 'aeiou':
            tmp += i*4     # i*4 only if i is vowel
        else:
            tmp += i       # keeping i as it is if it's not vowel
    return tmp + '!'
</code></pre>
<p>You can also try list list comprehension which is easy to read and understand as well:</p>
<pre><code>def exclamation(string):
        newstr = [ i*4 if i in 'aeiou' else i for i in string]
        return ''.join(newstr)+'!'
</code></pre>
</div>
<span class="comment-copy">The whole thing does not work as you expect. Try <code>exclamation("aeeiiioooouuuu")</code> and you'll see, you replace much too often.</span>
<span class="comment-copy">As you loop through each character of <code>string</code> (<code>i</code>) the <code>replace()</code> method runs with each character that matches. I.e. for each <code>'aeiou'</code> again.</span>
<span class="comment-copy">Also - read the docs! <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>str.replace()</code></a> - <i>Return a copy of the string with <b>all</b> occurrences of substring old replaced by new.</i> - so you replace exponentially many times.</span>
