<div class="post-text" itemprop="text">
<p>I have a JSON structure which needs some code to be appended. I tried with SED and bash, that only appends at the end of a string or file, not the end of the structure.</p>
<pre><code>{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "required": [
    "accounts"
  ],
  "accounts": {
    "required": "account",
    "properties": {
      "account": {
        "type": "array",
        "minItems": 1,
        "maxItems": 999,
        "required": [
          "scheme",
          "accountType",
          "accountSubType"
        ],
        "items": {
          "type": "object",
          "properties": {
            "scheme": {
              "description": "scheme",
              "type": "object",
              "required": [
                "schemeName",
                "identification"
              ],
              "properties": {
                "schemeName": {
                  "type": "string",
                  "maxLength": 40
                },
                "identification": {
                  "type": "string",
                  "maxLength": 256
                },
                "name": {
                  "type": "string",
                  "maxLength": 70
                },
                "secondaryIdentification": {
                  "type": "string",
                  "maxLength": 35
                }
              }
            },
            "currency": {
              "type": "string",
              "format": "iso-4217",
              "pattern": "^[A-Z]{3,3}$",
              "maxLength": 3,
              "example": "EUR"
            },
            "accountType": {
              "type": "string"
            },
            "accountSubType": {
              "type": "string",
              "maxLength": 35
            }
          }
        }
      }
    }
  }
}
</code></pre>
<p>I would like to update the above as</p>
<pre><code>{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "required": [
        "accounts"
    ],
    "accounts": {
        "required": "account",
        "properties": {
            "account": {
                "type": "array",
                "minItems": 1,
                "maxItems": 999,
                "required": [
                    "scheme",
                    "accountType",
                    "accountSubType"
                ],
                "items": {
                    "type": "object",
                    "properties": {
                        "scheme": {
                            "description": "scheme",
                            "type": "object",
                            "required": [
                                "schemeName",
                                "identification"
                            ],
                            "properties": {
                                "schemeName": {
                                    "type": "string",
                                    "maxLength": 40
                                },
                                "identification": {
                                    "type": "string",
                                    "maxLength": 256
                                },
                                "name": {
                                    "type": "string",
                                    "maxLength": 70
                                },
                                "secondaryIdentification": {
                                    "type": "string",
                                    "maxLength": 35
                                }
                            },
                            "additionalProperties": false
                        },
                        "currency": {
                            "type": "string",
                            "format": "iso-4217",
                            "pattern": "^[A-Z]{3,3}$",
                            "maxLength": 3,
                            "example": "EUR"
                        },
                        "accountType": {
                            "type": "string"
                        },
                        "accountSubType": {
                            "type": "string",
                            "maxLength": 35
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        "additionalProperties": false
    }
}
</code></pre>
<p>The difference is at the end of every "properties" section. I have appened it with <code>"additionalProperties": false</code></p>
<p>Is there a way to do this through a script I can check and append all properties with that?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this with <a href="https://stedolan.github.io/jq/" rel="nofollow noreferrer">jq</a> (Requires jq 1.6 because it uses the <code>walk()</code> function to traverse the entire structure):</p>
<pre><code>$ jq 'walk(if type == "object" and has("properties") then . + { additionalProperties: false } else . end)' your.json
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Does it matter if "additionalProperties" comes after or before "properties"?
If not, you could use sed to add "additionalProperties" before the object "properties" like this:</p>
<pre><code>sed -E 's/([[:space:]]*)"properties": {/\1"additionalProperties": false,|\1"properties": {/g'| tr '|' '\n'
</code></pre>
<p>With you you will get</p>
<pre><code>{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "required": [
    "accounts"
  ],
  "accounts": {
    "required": "account",
    "additionalProperties": false,
    "properties": {
      "account": {
        "type": "array",
        "minItems": 1,
        "maxItems": 999,
        "required": [
          "scheme",
          "accountType",
          "accountSubType"
        ],
        "items": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "scheme": {
              "description": "scheme",
              "type": "object",
              "required": [
                "schemeName",
                "identification"
              ],
              "additionalProperties": false,
              "properties": {
                "schemeName": {
                  "type": "string",
                  "maxLength": 40
                },
                "identification": {
                  "type": "string",
                  "maxLength": 256
                },
                "name": {
                  "type": "string",
                  "maxLength": 70
                },
                "secondaryIdentification": {
                  "type": "string",
                  "maxLength": 35
                }
              }
            },
            "currency": {
              "type": "string",
              "format": "iso-4217",
              "pattern": "^[A-Z]{3,3}$",
              "maxLength": 3,
              "example": "EUR"
            },
            "accountType": {
              "type": "string"
            },
            "accountSubType": {
              "type": "string",
              "maxLength": 35
            }
          }
        }
      }
    }
  }
}
</code></pre>
</div>
<span class="comment-copy">You could read these into python as dictionaries and apply your transformations there, or you could look at using jq if you want to stick to bash/shell scripts: <a href="https://stedolan.github.io/jq/" rel="nofollow noreferrer">stedolan.github.io/jq</a></span>
<span class="comment-copy">Read the JSON in Python as a dictionary using <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">json</a> package and then append as follows: <code>dictionary_name["accounts"]["additionalProperties"] = False</code> and <code>dictionary_name["accounts"]["properties"]["account"]["items"]["additionalProperties"] = False</code></span>
<span class="comment-copy">^^ that won't work, you're trying to access a mapping that does not exist</span>
<span class="comment-copy">Please read and understand this: <a href="https://stackoverflow.com/help/mcve">stackoverflow.com/help/mcve</a></span>
<span class="comment-copy">Do not encourage people to modify structured data, like json, with sed. This is extremely fragile. Use <code>jq</code> instead.</span>
