<div class="post-text" itemprop="text">
<p>While applying some external module method to a class I need to be able to pass different pairs of <code>arg = 'value'</code> to the function, like:</p>
<pre><code>Ad.nodes.get(id_ = '11974312')
</code></pre>
<p>How to pass dicts or tuples to the function, so that it recognises <code>'id_'</code> (string) as <code>id_</code> (argument) in
<code>('id_', '11974312')</code> (tuple) or <code>{'id_':'11974312'}</code> (dictionary) ?</p>
<p>Basically, I just need to get <code>id_</code> out of <code>'id_'</code></p>
<p>For your reference, I am trying to use neomodel module for neo4j graph db.</p>
</div>
<div class="post-text" itemprop="text">
<p>To pass multiple arguments to a function, you use the <code>*</code> operator and <code>**</code> operator as shown below.</p>
<pre><code>def myfoo(*arg, **karg):
    print arg, karg
</code></pre>
<p>The <code>*</code> operator pack all ordered argument in it, and the <code>**</code> operator packs all unmatched key argument in it.</p>
<p>For example:</p>
<pre><code>def myfoo(a, *arg):
    return a, arg

myfoo(11,22,33)
&gt;&gt; (11, [22, 33])
myfoo(11)
&gt;&gt; (11, [])
</code></pre>
<p>For key argument it works the same way,</p>
<pre><code>def myfoo(a=11, b=22, **kargs):
    return a, b, kargs

myfoo(22, c=100, b=233)
&gt;&gt; (22, 233, {'c': 100})
</code></pre>
<p>(<a href="https://stackoverflow.com/a/21527670/10035556">ref.</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can unfold the positional argument of a function with a single asterisk <code>*</code> and unfold dictionaries as key/value pairs with two asterisks <code>**</code>. For example</p>
<pre><code>def get(a, b, c=0):
    print(a, b, c)

args = (1, 2)
kwargs = {'c': 3}

get(*args, **kwargs)
</code></pre>
<p>The <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow noreferrer">Python Reference</a> has details on this.</p>
<p><strong>A more specific example for OP</strong></p>
<p>If you have a function <code>get(id_=None)</code> with the <em>keyword argument</em> <code>id_</code> you can use <code>**some_dict</code> to unfold the key/value pairs into keyword arguments. For example</p>
<pre><code>In [1]: def get(id_=None): 
   ...:     print(id_) 
   ...:     # do something with id_ ... 
   ...:                                                                                                                                                                                                   

In [2]: get(**{'id_': 1})                                                                                                                                                                                 
1

In [3]: get(**{'id_': 2})                                                                                                                                                                                 
2
</code></pre>
<p>If instead you have a function <code>get(id_)</code> with the <em>positional argument</em> <code>id_</code> you can use <code>*some_iterable</code> to unfold the values into positional arguments. You can also use <code>**some_dict</code> to unfold the key/value pairs as long as the keys <em>exactly match</em> the positional arguments. For example</p>
<pre><code>In [4]: def get(id_): 
   ...:     print(id_) 
   ...:     # do something with id_ ... 
   ...:                                                                                                                                                                                                   

In [5]: get(*(1,))                                                                                                                                                                                        
1

In [6]: get(*(2,))                                                                                                                                                                                        
2

In [7]: get(**{'id_': 3})                                                                                                                                                                                 
3

In [8]: # this will fail because `id` is not the argument, `id_` is
In [9]: get(**{'id': 4})                                                                                                                                                                                  
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-9-922e10531f8a&gt; in &lt;module&gt;
----&gt; 1 get(**{'id': 4})

TypeError: get() got an unexpected keyword argument 'id'
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1559638/how-to-send-a-dictionary-to-a-function-that-accepts-kwargs">How to send a dictionary to a function that accepts **kwargs?</a></span>
<span class="comment-copy">I was misunderstood for how I defined my question initially, please consider my edited question again. Thank you.</span>
<span class="comment-copy">I was misunderstood for how I defined my question initially, please consider my edited question again. Thank you.</span>
