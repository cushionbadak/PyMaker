<div class="post-text" itemprop="text">
<p>I want to interpolate the position of an object over a duration of time, I'm using pygame. </p>
<p>When the game wants to move the object to a position it calls <code>interpolate_position</code> with the position it wants and how long it wants for the interpolation to take. <code>update</code>is called in a basic game loop.
This code is part of GameObject class:</p>
<pre><code>    def update(self, dt):
        if self.is_lerping:
            self.update_interpolate(dt)

    def update_interpolate(self, dt):
        if self.start_lerp - self.total_lerp_time &lt;= 2 * dt:
            val = dt / (self.total_lerp_time - self.start_lerp)
            val = val if 0 &lt; val &lt; 1 else 1
            self.position = self.position.lerp(self.lerp_goal, val)
            self.start_lerp += dt
        else:
            self.position = self.lerp_goal
            self.is_lerping = False

    def interpolate_position(self, pos, lerp_time):
        self.is_lerping = True
        self.total_lerp_time = lerp_time
        self.start_lerp = 0
        self.lerp_goal = Vector2(pos)
</code></pre>
<p>Update is called like this:</p>
<pre><code>AVERAGE_DELTA_MILLIS = round(float(1000) / 60, 4)
while True:
    before_update_and_render = self.clock.get_time()
    delta_millis = (update_duration_millis + sleep_duration_millis) / 1000            
    o.update(delta_millis)  #  Updates the object
    update_duration_millis = (self.clock.get_time() - before_update_and_render) * 1000
    sleep_duration_millis = max([2, AVERAGE_DELTA_MILLIS - update_duration_millis])
    time.sleep(sleep_duration_millis / 1000)  # Sleeps an amount of time so the game will be 60 fps
</code></pre>
<p>My code works fine sometimes but other times when the object is supposed to be still it goes back and forth in some direction by one pixel. My main guess would be some sort of rounding error. What can I do to fix this? Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to clamp <code>val</code> to the range [0, 1], then I would prefer to use <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer"><code>min()</code></a> and <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max()</code></a>:</p>
<pre class="lang-py prettyprint-override"><code>val = max(0, min(val, 1))
</code></pre>
<hr/>
<p><code>self.start_lerp</code> is continuously incremented till it "reaches" <code>self.total_lerp_time</code>.<br/>
So the condition <code>self.start_lerp - self.total_lerp_time &lt;= 2 * dt</code> is the wrong way around.</p>
<p>It has to be:</p>
<pre class="lang-py prettyprint-override"><code>if self.total_lerp_time - self.start_lerp &gt; 2 * dt:
    # [...]
</code></pre>
<p>Or even better using the built-in function <a href="https://docs.python.org/3/library/functions.html#abs" rel="nofollow noreferrer"><code>abs()</code></a>, which would even work for negative values:</p>
<pre class="lang-py prettyprint-override"><code>if abs(self.total_lerp_time - self.start_lerp) &gt; 2 * dt:
    # [...]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The error occurred because the <strong>destination and the current position were the same</strong>. I added a check to prevent that and everything now works.</p>
</div>
<span class="comment-copy">I added a check to so see if the position to interpolate to is the same as the current position and if so don't interpolate <code>if pos == self.position: return</code>. It could be the fix but I'm not 100% sure since this bug is elusive.</span>
<span class="comment-copy">Are you saying that <code>0 &lt; val &lt; 1</code> is different from <code>0 &lt; val and val &lt; 1</code>?  I ran this code to test: <code>v = -2 while v &lt; 2:     v += 0.01     if -1 &lt; v &lt; 1 == (-1 &lt; v and v &lt; 1):         print 'DIFFERENT'</code> and nothing printed out.</span>
<span class="comment-copy">@Koby27 Yes, in this case you are right, in Python <a href="https://docs.python.org/3/reference/expressions.html" rel="nofollow noreferrer">Chaining comparison</a> is perfect valid.</span>
