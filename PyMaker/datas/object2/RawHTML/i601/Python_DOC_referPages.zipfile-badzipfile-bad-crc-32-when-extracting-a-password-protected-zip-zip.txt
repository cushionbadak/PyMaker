<div class="post-text" itemprop="text">
<p>I am trying to extract a password protected .zip which has a .txt document (Say <code>Congrats.txt</code> for this case). Now <code>Congrats.txt</code> has text in it thus its not 0kb in size. Its placed in a .zip (For the sake of the thread lets name this .zip <code>zipv1.zip</code>) with the password <code>dominique</code> for the sake of this thread. That password is stored among other words and names within another .txt (Which we'll name it as <code>file.txt</code> for the sake of  this question). Now if I run the code below by doing <code>python Program.py -z zipv1.zip -f file.txt</code> (Assuming all these files are in the same folder as <code>Program.py</code>) my program displays <code>dominique</code> as the correct password for the <code>zipv1.zip</code> among the other words/passwords in <code>file.txt</code> and extracts the <code>zipv1.zip</code> but the <code>Congrats.txt</code> is empty and has the size of 0kb.</p>
<p>Now my code is as follows:</p>
<pre><code>import argparse
import multiprocessing
import zipfile

parser = argparse.ArgumentParser(description="Unzips a password protected .zip", usage="Program.py -z zip.zip -f file.txt")
# Creates -z arg
parser.add_argument("-z", "--zip", metavar="", required=True, help="Location and the name of the .zip file.")
# Creates -f arg
parser.add_argument("-f", "--file", metavar="", required=True, help="Location and the name of file.txt.")
args = parser.parse_args()


def extract_zip(zip_filename, password):
    try:
        zip_file = zipfile.ZipFile(zip_filename)
        zip_file.extractall(pwd=password)
        print(f"[+] Password for the .zip: {password.decode('utf-8')} \n")
    except:
        # If a password fails, it moves to the next password without notifying the user. If all passwords fail, it will print nothing in the command prompt.
        pass


def main(zip, file):
    if (zip == None) | (file == None):
        # If the args are not used, it displays how to use them to the user.
        print(parser.usage)
        exit(0)
    # Opens the word list/password list/dictionary in "read binary" mode.
    txt_file = open(file, "rb")
    # Allows 8 instances of Python to be ran simultaneously.
    with multiprocessing.Pool(8) as pool:
        # "starmap" expands the tuples as 2 separate arguments to fit "extract_zip"
        pool.starmap(extract_zip, [(zip, line.strip()) for line in txt_file])


if __name__ == '__main__':
    main(args.zip, args.file)
</code></pre>
<p>However if I another zip (<code>zipv2.zip</code>) with the same method as <code>zipv1.zip</code> with only difference being <code>Congrats.txt</code> is in a folder which the folder is zipped alongside <code>Congrats.txt</code> I do get the same results as <code>zipv1.zip</code> but this time <code>Congrats.txt</code> extracted along the folder it was in, and <code>Congrats.txt</code> was intact; the text in it and the size of it was intact.</p>
<p>So to solve this I tried reading <a href="https://docs.python.org/3/library/zipfile.html" rel="nofollow noreferrer">zipfile's documentation</a> where I found out that if a password doesn't match the .zip it throws a <code>RuntimeError</code>. So I did changed <code>except:</code> in the code to <code>except RuntimeError:</code> and got this error when trying to unzip <code>zipv1.zip</code>:</p>
<pre><code>(venv) C:\Users\USER\Documents\Jetbrains\PyCharm\Program&gt;Program.py -z zipv1.zip -f file.txt
[+] Password for the .zip: dominique

multiprocessing.pool.RemoteTraceback:
"""
Traceback (most recent call last):
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\multiprocessing\pool.py", line 121, in worker
result = (True, func(*args, **kwds))
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\multiprocessing\pool.py", line 47, in starmapstar
return list(itertools.starmap(args[0], args[1]))
  File "C:\Users\USER\Documents\Jetbrains\PyCharm\Program\Program.py", line 16, in extract_zip
zip_file.extractall(pwd=password)
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\zipfile.py", line 1594, in extractall
self._extract_member(zipinfo, path, pwd)
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\zipfile.py", line 1649, in _extract_member
shutil.copyfileobj(source, target)
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\shutil.py", line 79, in copyfileobj
buf = fsrc.read(length)
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\zipfile.py", line 876, in read
data = self._read1(n)
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\zipfile.py", line 966, in _read1
self._update_crc(data)
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\zipfile.py", line 894, in _update_crc
raise BadZipFile("Bad CRC-32 for file %r" % self.name)
zipfile.BadZipFile: Bad CRC-32 for file 'Congrats.txt'
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\USER\Documents\Jetbrains\PyCharm\Program\Program.py", line 38, in &lt;module&gt;
main(args.zip, args.file)
  File "C:\Users\USER\Documents\Jetbrains\PyCharm\Program\Program.py", line 33, in main
pool.starmap(extract_zip, [(zip, line.strip()) for line in txt_file])
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\multiprocessing\pool.py", line 276, in starmap
return self._map_async(func, iterable, starmapstar, chunksize).get()
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\multiprocessing\pool.py", line 657, in get
raise self._value
zipfile.BadZipFile: Bad CRC-32 for file 'Congrats.txt'
</code></pre>
<p>The same results happpen though; password was found in <code>file.txt</code>, <code>zipv1.zip</code> was extracted but <code>Congrats.txt</code> was empty and 0kb in size. So I ran the program again, but for <code>zipv2.zip</code> this time and got this as a result:</p>
<pre><code>(venv) C:\Users\USER\Documents\Jetbrains\PyCharm\Program&gt;Program.py -z zipv2.zip -f file.txt
[+] Password for the .zip: dominique

multiprocessing.pool.RemoteTraceback:
"""
Traceback (most recent call last):
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\multiprocessing\pool.py", line 121, in worker
result = (True, func(*args, **kwds))
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\multiprocessing\pool.py", line 47, in starmapstar
return list(itertools.starmap(args[0], args[1]))
  File "C:\Users\USER\Documents\Jetbrains\PyCharm\Program\Program.py", line 16, in extract_zip
zip_file.extractall(pwd=password)
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\zipfile.py", line 1594, in extractall
self._extract_member(zipinfo, path, pwd)
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\zipfile.py", line 1649, in _extract_member
shutil.copyfileobj(source, target)
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\shutil.py", line 79, in copyfileobj
buf = fsrc.read(length)
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\zipfile.py", line 876, in read
data = self._read1(n)
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\zipfile.py", line 966, in _read1
self._update_crc(data)
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\zipfile.py", line 894, in _update_crc
raise BadZipFile("Bad CRC-32 for file %r" % self.name)
zipfile.BadZipFile: Bad CRC-32 for file 'Congrats.txt'
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "C:\Users\USER\Documents\Jetbrains\PyCharm\Program\Program.py", line 38, in &lt;module&gt;
main(args.zip, args.file)
  File "C:\Users\USER\Documents\Jetbrains\PyCharm\Program\Program.py", line 33, in main
pool.starmap(extract_zip, [(zip, line.strip()) for line in txt_file])
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\multiprocessing\pool.py", line 276, in starmap
return self._map_async(func, iterable, starmapstar, chunksize).get()
  File "C:\Users\USER\AppData\Local\Programs\Python\Python37\lib\multiprocessing\pool.py", line 657, in get
raise self._value
zipfile.BadZipFile: Bad CRC-32 for file 'Congrats.txt'
</code></pre>
<p>Again, same results; where the folder was extracted successfully and <code>Congrats.txt</code> was also extracted with the text inside it and the size of it was intact.</p>
<p>I did take a look at <a href="https://stackoverflow.com/questions/48745258/zipfile-badzipfile-bad-crc-32-for-file-read-only-file">this</a> similar thread, as well as <a href="https://stackoverflow.com/questions/5624669/strange-badzipfile-bad-crc-32-problem">this</a> thread but they were no help. I also checked <a href="https://docs.python.org/3/library/zipfile.html" rel="nofollow noreferrer">zipfile's documentation</a> but it wasn't helpful regarding the issue.</p>
<p>I am not sure what is the cause of my issue or how to fix it and would like some help regarding it.</p>
<p><strong>EDIT</strong></p>
<p>Now after implementing <code>with zipfile.ZipFile(zip_filename, 'r') as zip_file:</code> for some unknown and weird reason; the program can read/process a small word list/password list/dictionary but can't if its large(?). </p>
<p>What I mean by that is that say a .txt document is present in <code>zipv1.zip</code>; named <code>Congrats.txt</code> with the text <code>You have cracked the .zip!</code>. The same .txt is present in <code>zipv2.zip</code> aswell, but this time placed in a folder named <code>ZIP Contents</code> then zipped/password protected. The password is <code>dominique</code> for both of the zips. </p>
<p>Do note that each .zip was generated using <code>Deflate</code> compression method and <code>ZipCrypto</code> encryption in 7zip.</p>
<p>Now that password is in <code>Line 35</code> (35/52 lines)<code>John The Ripper Jr.txt</code> and in <code>Line 1968</code> for <code>John The Ripper.txt</code> (1968/3106 lines). </p>
<p>Now if you do <code>python Program.py -z zipv1 -f "John The Ripper Jr.txt"</code> in your CMD (or IDE of your choice); it will create a folder named <code>Extracted</code> and place <code>Congrats.txt</code> with the sentence we previously set. Same goes for <code>zipv2</code> but <code>Congrats.txt</code> will be in <code>ZIP Contents</code> folder which is inside the <code>Extracted</code> folder. No trouble extracting the .zips in this instance. </p>
<p>But if you try the same thing with <code>John The Ripper.txt</code> i.e <code>python Program.py -z zipv1 -f "John The Ripper.txt"</code> in your CMD (or IDE of your choice) it will create the <code>Extracted</code> folder both of the zips; just like <code>John The Ripper Jr.txt</code> but this time <code>Congrats.txt</code> will be <strong>empty</strong> for both of them for some unknown reason.</p>
<p>My code and all necessary files are as follows:</p>
<pre><code>import argparse
import multiprocessing
import zipfile

parser = argparse.ArgumentParser(description="Unzips a password protected .zip by performing a brute-force attack.", usage="Program.py -z zip.zip -f file.txt")
# Creates -z arg
parser.add_argument("-z", "--zip", metavar="", required=True, help="Location and the name of the .zip file.")
# Creates -f arg
parser.add_argument("-f", "--file", metavar="", required=True, help="Location and the name of the word list/password list/dictionary.")
args = parser.parse_args()


def extract_zip(zip_filename, password):
    try:
        with zipfile.ZipFile(zip_filename, 'r') as zip_file:
            zip_file.extractall('Extracted', pwd=password)
            print(f"[+] Password for the .zip: {password.decode('utf-8')} \n")
    except:
        # If a password fails, it moves to the next password without notifying the user. If all passwords fail, it will print nothing in the command prompt.
        pass


def main(zip, file):
    if (zip == None) | (file == None):
        # If the args are not used, it displays how to use them to the user.
        print(parser.usage)
        exit(0)
    # Opens the word list/password list/dictionary in "read binary" mode.
    txt_file = open(file, "rb")
    # Allows 8 instances of Python to be ran simultaneously.
    with multiprocessing.Pool(8) as pool:
        # "starmap" expands the tuples as 2 separate arguments to fit "extract_zip"
        pool.starmap(extract_zip, [(zip, line.strip()) for line in txt_file])


if __name__ == '__main__':
    # Program.py - z zipname.zip -f filename.txt
    main(args.zip, args.file)
</code></pre>
<p><a href="https://anonfile.com/h0rdV7s7b8/Program_py" rel="nofollow noreferrer">Program.py</a></p>
<p><a href="https://anonfile.com/70qaV5s0b3/zipv1_zip" rel="nofollow noreferrer">zipv1.zip</a></p>
<p><a href="https://anonfile.com/81q9V9s1b9/zipv2_zip" rel="nofollow noreferrer">zipv2.zip</a></p>
<p><a href="https://anonfile.com/4fqbV5s2b7/John_The_Ripper_Jr_txt" rel="nofollow noreferrer">John The Ripper Jr.txt</a></p>
<p><a href="https://anonfile.com/6cq0V5s2b5/John_The_Ripper_txt" rel="nofollow noreferrer">John The Ripper.txt</a></p>
<p><a href="https://anonfile.com/y4h3Wcs0b5/John_The_Ripper_v2_txt" rel="nofollow noreferrer">John The Ripper v2.txt</a></p>
<p>I am unsure why this is happening and cannot find an answer for this issue anywhere. Its totally unknown from what I can tell and I can't find a way to debug or solve this issue. </p>
<p>This continues to occur regardless of different word/password lists. Tried generating more .zips with the same <code>Congrats.txt</code> but with different passwords from different word lists/password lists/dictionaries. Same method; a larger and smaller version of the .txt was used and same results as above were achieved.</p>
<p><strong>BUT</strong> I did find out that if I cut out the first 2k words in <code>John The Ripper.txt</code> and make a new .txt; say <code>John The Ripper v2.txt</code>; the .zip is extracted successfully, <code>Extracted</code> folder appears and <code>Congrats.txt</code> is present with the text inside it. So I believe it has to do with the lines after the password is at. So in this case <code>Line 1968</code>; where the script doesn't stop after <code>Line 1968</code>? I am not sure why does this work though. It isn't a solution but a step towards the solution I guess...</p>
<p>Any help would be seriously appreciated.</p>
<p><strong>EDIT 2</strong></p>
<p>So I tried using a "pool terminating" code:</p>
<pre><code>import argparse
import multiprocessing
import zipfile

parser = argparse.ArgumentParser(description="Unzips a password protected .zip by performing a brute-force attack using", usage="Program.py -z zip.zip -f file.txt")
# Creates -z arg
parser.add_argument("-z", "--zip", metavar="", required=True, help="Location and the name of the .zip file.")
# Creates -f arg
parser.add_argument("-f", "--file", metavar="", required=True, help="Location and the name of the word list/password list/dictionary.")
args = parser.parse_args()


def extract_zip(zip_filename, password, queue):
    try:
        with zipfile.ZipFile(zip_filename, "r") as zip_file:
            zip_file.extractall('Extracted', pwd=password)
            print(f"[+] Password for the .zip: {password.decode('utf-8')} \n")
            queue.put("Done")  # Signal success
    except:
        # If a password fails, it moves to the next password without notifying the user. If all passwords fail, it will print nothing in the command prompt.
        pass


def main(zip, file):
    if (zip == None) | (file == None):
        print(parser.usage)  # If the args are not used, it displays how to use them to the user.
        exit(0)
    # Opens the word list/password list/dictionary in "read binary" mode.
    txt_file = open(file, "rb")

    # Create a Queue
    manager = multiprocessing.Manager()
    queue = manager.Queue()

    with multiprocessing.Pool(8) as pool:  # Allows 8 instances of Python to be ran simultaneously.
        pool.starmap_async(extract_zip, [(zip, line.strip(), queue) for line in txt_file])  # "starmap" expands the tuples as 2 separate arguments to fit "extract_zip"
        pool.close()
        queue.get(True)  # Wait for a process to signal success
        pool.terminate()  # Terminate the pool
        pool.join()


if __name__ == '__main__':
    main(args.zip, args.file)  # Program.py -z zip.zip -f file.txt.
</code></pre>
<p>Now if I use this both zips are extracted successfully, just like the previous instances. <strong>BUT</strong> this time <code>zipv1.zip</code>'s  <code>Congrats.txt</code> is intact; has the message inside it. But the same thing cannot be said regarding <code>zipv2.zip</code> as its still empty.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sorry for the long pause ... It seems you've got yourself into a bit of a pickle.</p>
<h2>1. Investigation</h2>
<p>The scenario is complex (quite far away from an <strong><em>M</em></strong>CVE</p></div>
<span class="comment-copy">Can you share your ZIP file?</span>
<span class="comment-copy"><a href="https://anonfile.com/BcH5P7s5b7/zipv1_zip" rel="nofollow noreferrer">zipv1</a> <a href="https://anonfile.com/76H3P8saba/zipv2_zip" rel="nofollow noreferrer">zipv2</a>  Both were generated with 7zip as WinRAR zipped files don't extract with zipfile (If password protected). Used <code>Deflate</code> as compression method and <code>ZipCrypto</code> as encryption method in 7zip.</span>
<span class="comment-copy">I was able to successfully run the code on both <i>.zip</i> files, no exception, file was extracted, using a dummy <i>file.txt</i> consisting of 12 lines (out of which one was obviously <i>dominique</i>).</span>
<span class="comment-copy">A friend said the same thing as he made his own wordlist/.txt with a few dozen words; one being <code>dominique</code> of-course. Then I told him to try the same thing with the wordlist I used (<a href="https://anonfile.com/H7IaU6scb6/John_The_Ripper_txt" rel="nofollow noreferrer">Link</a>) and he told me he did get an empty .txt when the password was found. So this issue has to do with the length of the wordlist/file.txt somehow. I tried killing the multiprocess as soon as a password was found as seen <a href="https://gist.github.com/Arszilla/9453886b17ced60879563fe56819679e" rel="nofollow noreferrer">here</a> but it was useless...</span>
<span class="comment-copy">I was leaning to the <i>subprocess</i> hypothesis too. But I was able to run the program with the new <i>.txt</i> file, I even doubled it (also tried with 0, 1, 2 occurrences of <i>dominique</i>) with <i>Python</i> <i>3.6</i> and <i>3.7</i> <i>32/64</i>,(who support <b>f</b> strings), but it still works. :(</span>
<span class="comment-copy">So what you are telling me is that my issue is being caused by zipfile itself, right? Regardless what my code is (or will be), due to how zipfile acts it will always break my zips/extracts? If thats the case, is there an alternative?</span>
<span class="comment-copy">Yes. the core problem is in the zip compression core itself, the result is the way of that problem being handled by <i>zipfile</i> (and other tools). But wasn;t my answer clear enough? Anyway, I found a solution, submitted it to <i>Python</i>, but ran into all kinds of process and documents issue. Will update the answer shortly.</span>
<span class="comment-copy">Tried it with your fix <a href="https://github.com/python/cpython/pull/12242/commits/f16b12c12a8c33f2f029f6ca41707b7de9ee3769" rel="nofollow noreferrer">here</a> and it works! Thanks  If your edits are accepted, I assume it will be live on the next Python, right? Not sure how these things go as I see myself as a newbie/amateur in Python.  Also if I make a copy of <code>zipfile.py</code>, I shouldn't name it the same as the file right? <code>zippy.py</code> instead of <code>zipfile.py</code> right?</span>
<span class="comment-copy">As I said it might be rejected. If it is accepted it will be in the next release (didn't check when that will be, but I assume it will take some time). In the mean time you could solve your problem locally. From what am I concerned it would be ok to modify your original <i>zipfile.py</i> (if you backed it up before), so that if it turns out that my fix introduces some nasty issues (I don't think it's the case) you can restore it. Or you could go on the safe side and copy the file in your project and do the changes there. I'd suggest against renaming it (e.g. <i>zippy</i> or some other name), ...</span>
<span class="comment-copy">(continuation) since you'd have to modify all the files that import it. That's why (but only if you're not sure, I'd still go by modifying the original one), create a dir that contains files like this one, and modify them only in there. Then make sure the dir is in <i>PYTHONPATH</i> so the modules are loaded before the ones with the same name from standard <i>Python</i> library.. Check <a href="https://stackoverflow.com/questions/42705279/strange-error-while-using-pycharm-to-debug-pyqt-gui/55066132#55066132" title="strange error while using pycharm to debug pyqt gui">stackoverflow.com/questions/42705279/…</a>. If this answers your question, please mark it as a solution. And an upvote would be nice as well :) Thx.</span>
