<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5685406/inconsistent-use-of-tabs-and-spaces-in-indentation">“inconsistent use of tabs and spaces in indentation”</a>
<span class="question-originals-answer-count">
                    19 answers
                </span>
</li>
</ul>
</div>
<p>I am not able to execute the following code in python:</p>
<pre><code>import json
import import_logger #defined by me
logger =  import_logger.logIt(__file__)

def main(jsonIn):
    print("MAIN")
    print(data["host"])

if __name__ == '__main__':
    logger.log("Loading configuration File.")
    with open('untitled_1.json') as configFile:
            data = json.load(configFile) #HAS 3 TAB SPACES(1[IF STATEMENT]+2[WITH])
            print(data)
            main(data)
else:
    print("This code does not support being imported as a module")
</code></pre>
<p>It gives me the following error:</p>
<pre><code>  File "file.py", line 14
    with open('untitled_1.json') as configFile:
                                              ^
TabError: inconsistent use of tabs and spaces in indentation
</code></pre>
<p>What is the reason for this?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/reference/lexical_analysis.html#indentation" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>Indentation is rejected as inconsistent if a source file mixes tabs and spaces in a way that makes the meaning dependent on the worth of a tab in spaces; a TabError is raised in that case.</p>
</blockquote>
<p>You state the body of the <code>with</code> statement is indented with 3 tabs. If that is true, it would appear the line with <code>with</code> itself is indented with 4 spaces. That means that if tab stops were set to just a single space each, the body of the <code>with</code> statement would no longer be indented relative to the first line, resulting in the <code>TabError</code>.</p>
<p>Consider this code (with tabs replaced by a <code>$</code>):</p>
<pre><code>for y in [1]:
    for x in [1,2,3]:
        if x == 2:
            print("even")
$else:
$    print("odd")
</code></pre>
<p>If your tab stop was set to 8 characters, this would look like a <code>for</code> loop that contains an <code>if</code>/<code>else</code> statement. If the tab stop was set to 4 characters instead, it would look like a <code>for</code> loop with an <code>else</code> clause. Other tab stops would look like invalid uses of indentation.</p>
<p>Python 2, by contrast, would replace tabs with spaces during parsing so that the indentation was a multiple of 8, and only then determine if the resulting indentation was consistent. This could lead to unintended indentation errors, as code could still parse but have a behavior different from its "visible" indentation. For example, the preceding example would be accepted by Python 2 as in <code>if</code> statement with an <code>else</code> clause, even though in an editor using tab stops of 4 spaces it would <em>look</em> like the <code>else</code> went with the <code>for</code>.</p>
</div>
<span class="comment-copy">Some of your whitespace is tabs and some of it is spaces... You need to have consistent whitespace</span>
<span class="comment-copy">Recommended, though not required, convention is to use 4 spaces for each indentation, 0 tabs.</span>
<span class="comment-copy">Note that this error is quite new, before, you could mix <code>-tab-tabCODE and -space-spaceCODE</code></span>
<span class="comment-copy">Python 3 doesn't allow mixed indentation,  even if it would have been otherwise "correct" in Python 2, because visually it is too hard to tell if the indentation is correct or not.</span>
<span class="comment-copy">I didn't know you couldn't mix white spaces and tabs, my bad!</span>
