<div class="post-text" itemprop="text">
<p>I am trying to understand the process of creating a function that can replace duplicate strings in a list of strings. for example, I want to convert this list</p>
<pre><code>mylist = ['a', 'b', 'b', 'a', 'c', 'a']
</code></pre>
<p>to this</p>
<pre><code>mylist = ['a', 'b', 'x', 'x', 'c', 'x']
</code></pre>
<p>initially, I know I need create my function and iterate through the list</p>
<pre><code>def replace(foo):
    newlist= []
    for i in foo:
        if foo[i] == foo[i+1]:
            foo[i].replace('x')
    return foo
</code></pre>
<p>However, I know there are two problems with this. the first is that I get an error stating</p>
<pre><code>list indices must be integers or slices, not str
</code></pre>
<p>so I believe I should instead be operating on the range of this list, but I'm not sure how to implement it. The other being that this would only help me if the duplicate letter comes directly after my iteration (i).</p>
<p>Unfortunately, that's as far as my understanding of the problem reaches. If anyone can provide some clarification on this procedure for me, I would be very grateful.</p>
</div>
<div class="post-text" itemprop="text">
<p>Go through the list, and keep track of what you've seen in a set. Replace things you've seen before in the list with 'x':  </p>
<pre><code>mylist = ['a', 'b', 'b', 'a', 'c', 'a']

seen = set()
for i, e in enumerate(mylist):
    if e in seen:
        mylist[i] = 'x'
    else:
        seen.add(e)

print(mylist)
# ['a', 'b', 'x', 'x', 'c', 'x']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simple Solution.</p>
<pre><code>my_list = ['a', 'b', 'b', 'a', 'c', 'a']
new_list = []

for i in range(len(my_list)):
    if my_list[i] in new_list:
        new_list.append('x')
    else:
        new_list.append(my_list[i])
print(my_list)
print(new_list)

# output
#['a', 'b', 'b', 'a', 'c', 'a']
#['a', 'b', 'x', 'x', 'c', 'x']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The other solutions use indexing, which isn't necessarily required.</p>
<p>Really simply, you could check <code>if</code> the value is <code>in</code> the new list, <code>else</code> you can <code>append</code> x. If you wanted to use a function:</p>
<pre><code>old = ['a', 'b', 'b', 'a', 'c']

def replace_dupes_with_x(l):
    tmp = list()
    for char in l:
        if char in tmp:
            tmp.append('x')
        else:
            tmp.append(char)

    return tmp

new = replace_dupes_with_x(old)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the following solution:</p>
<pre><code>from collections import defaultdict

mylist = ['a', 'b', 'b', 'a', 'c', 'a']
ret, appear = [], defaultdict(int)
for c in mylist:
     appear[c] += 1
     ret.append(c if appear[c] == 1 else 'x')
</code></pre>
<p>Which will give you:</p>
<blockquote>
<p>['a', 'b', 'x', 'x', 'c', 'x']</p>
</blockquote>
</div>
<span class="comment-copy">You could use a <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">set</a> to hold letters you have already seeen; as you iterate over the list  check to see if the item is in the set - if it is replace it, otherwise add it to the set.</span>
<span class="comment-copy"><code>for i in foo</code> will give you the actual elements of <code>foo</code> which would be fine if that's what you wanted to iterate over the elements. here you are trying to access the list by indexes. try <code>for i in range(len(foo))</code></span>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate</a> if you need the index in addition to the item when iterating.</span>
<span class="comment-copy">The gist of this solution is fine, but the op seems to have intended to create a new list. Although I suppose that isn't very clear.</span>
<span class="comment-copy">He says he wants to "replace" duplicate elements. If he wants to leave the original list unchanged, he can add <code>mylist_copy = mylist.copy()</code> at the top, and then run that loop on the copy.</span>
<span class="comment-copy">Sure, I meant that in his original code he has <code>new_list = []</code>, but then proceeds to try to mutate the original list, and return it...</span>
<span class="comment-copy">so if I plug this into my function, I get an error: "replace() takes 0 positional arguments but 1 was given"</span>
<span class="comment-copy">@NickBohl I'm not calling <code>replace()</code> anywhere. You have to have code I'm not seeing.</span>
<span class="comment-copy">if I place this within my function definition, the new_list variable ends up empty</span>
<span class="comment-copy">hi @NickBohl, can you share your code?</span>
