<div class="post-text" itemprop="text">
<p>I know how to do this with a single object in a pickle file or with a single object missing, but I don't know how to do something like this if more than 1 object is missing from the pickle file.</p>
<p>What I got now:</p>
<pre class="lang-py prettyprint-override"><code>try:
    user1 = pickle.load(open("users.pkl", "rb"))
except (OSError, IOError) as e:
    user1 = users("user1")
    pickle.dump(user1, open("users.pkl", "wb"))
</code></pre>
<p>What I'd like to achieve:</p>
<pre class="lang-py prettyprint-override"><code>try:
    user1 = pickle.load(open("users.pkl", "rb"))
    user2 = pickle.load(open("users.pkl", "rb"))
    user3 = pickle.load(open("users.pkl", "rb"))
except (OSError, IOError) as e:
    if if 'user1' not in locals():
        user1 = users("user1")
        pickle.dump(user1, open("users.pkl", "wb"))
    if if 'user2' not in locals():
        user2 = users("user2")
        pickle.dump(user2, open("users.pkl", "wb"))
    if if 'user3' not in locals():
        user3 = users("user3")
        pickle.dump(user3, open("users.pkl", "wb"))
</code></pre>
<p>Problem with this is that it looks quite messy and doesn't work correctly if 'user1' doesn't exist while 'user2' does (because it immediately goes to exception). Is there a better, more pythonic way of doing something like this? AFAIK python documentation tells us that try statement is the way to go when it comes to stuff like this but as you can see above I don't know how to implement this idea properly (unless I'd use a separate try statement for every object in the file, which would lead to tons of code).</p>
</div>
<div class="post-text" itemprop="text">
<p>Pickle files are written sequentially. Since the length of an object's pickle can vary, it is generally not possible to replace one pickle by another in-place inside an existing file, any more than you could replace a short line inside a text file with a longer one.</p>
<p>Your existing code reads the same pickle into <code>user1</code>, <code>user2</code> and <code>user3</code>, so I am unsure how you would get different values from the exact same expression.</p>
<p>Consider instead using the <a href="https://docs.python.org/3/library/shelve.html" rel="nofollow noreferrer"><code>shelve</code></a> module, which acts like an on-disk dictionary in many ways, and which allows you to very easily test for the presence or absence of specific keys.</p>
<p>Here's some code that should give you a hint as to how to proceed:</p>
<pre><code>&gt;&gt;&gt; with shelve.open("my_database") as db:
...     db["user1"] = [1, 2, 3]
...     db["user2"] = [2, 3, 4]
...
&gt;&gt;&gt; with shelve.open("my_database") as db:
...     if "user1" in db:
...         print(db["user1"])
...     else:
...         print("Entry needs creating!")
...
[1, 2, 3]
</code></pre>
</div>
<span class="comment-copy">Code above was just as example of what I wanted to have, not an example of a working code (sorry if that confused anyone). What you suggested works like a charm + it's so simple to use :) really thankful for your help! I'm new to serializing and wasn't sure what to use. Thanks a ton!</span>
