<div class="post-text" itemprop="text">
<p>I did this code that finds two integers in a said list (in this case [2,4,5,1,6,40,-1]) that multiply to twenty. I got a little stuck in the beginning, but adding a function to it solved my problems. I showed this code to a friend of mine who's a programmer and he said I could make this code more "pythonic", but I have no clue how.</p>
<p>Here's the code:</p>
<pre><code>num_list = [2,4,5,1,6,40,-1]

def get_mult_num(given_list):
    for i in given_list:
        for j in range(i+1, len(given_list)): #for j not to be == i and to be in the list
            mult_two_numbers = i * j
            if mult_two_numbers == 20:
                return i,j

print(get_mult_num(num_list)) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't necessarily think it is 'unpythonic', you are using standard Python idioms to loop over your data and produce a single result or <code>None</code>. The term <em>Pythonic</em> is nebulous, a subject marred in <a href="https://en.wikipedia.org/wiki/I_know_it_when_I_see_it" rel="nofollow noreferrer">"I know it when I see it"</a> parameters.</p>
<p>Not that you produced a <em>correct</em> implementation. While <code>i</code> loops over <code>given_numbers</code>, <code>j</code> loops over an integer from <code>i + 2</code> through to <code>len(given_numbers)</code>, mixing values from <code>given_list</code> with indices? For your sample input, you are taking <code>j</code>  from the half-open ranges [4, 7), [6, 7), [7, 7) (empty), [3, 7), [8, 7) (empty), [42, 7) (empty) and [1, 7), respectively. That it produces the correct answer <em>at all</em> is luck, not due to correctness; if you give your function the list <code>[2, 10]</code>, it'll not find a solution! You want to loop over <code>given_numbers</code> <em>again</em>, limited with slicing, or generate indices starting at the current index of <code>i</code>, but then your outer loop needs to add a <code>enumerate()</code> call too:</p>
<pre><code>for ii, i in enumerate(given_numbers):
    for j in given_numbers[ii + 1:]:
        # ...
</code></pre>
<p>or</p>
<pre><code>for ii, i in enumerate(given_numbers):
    for jj in range(ii + 1, len(given_numbers)):
        j = given_numbers[jj]
        # ...
</code></pre>
<p>All this is not nearly as efficient as it can be; the Python standard library offers you the tools to generate your <code>i, j</code> pairs without a nested <code>for</code> loop or slicing or other forms of filtering.</p>
<p>Your double loop should generate <a href="https://en.wikipedia.org/wiki/Combination" rel="nofollow noreferrer"><em>combinations</em></a> of the integer inputs, so use the <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations()</code> object</a> to generate unique <code>i, j</code> pairs:</p>
<pre><code>from itertools import combinations

def get_mult_num(given_list):
    return [(i, j) for i, j in combinations(given_list, 2) if i * j == 20]
</code></pre>
<p>This assumes there can be zero or more such solutions, not just a single solution.</p>
<p>If you only ever need the first result or <code>None</code>, you can use the <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next()</code> function</a>:</p>
<pre><code>def get_mult_num(given_list):
    multiplies_to_20 = (
        (i, j) for i, j in combinations(given_list, 2)
        if i * j == 20)
    return next(multiplies_to_20, None)
</code></pre>
<p>Next, rather than produce all possible combinations, you may want to <em>invert</em> the problem. If you turn <code>given_list</code> into a set, you can trivially check if the target number 20 can be divided cleanly without remainder by any of your given numbers and where the result of the division is larger <em>and</em> is also an integer in the set of numbers. That gives you an answer in linear time.</p>
<p>You can further limit the search by dividing with numbers smaller than the square root of the target value, because you won't find a larger value to match in your input numbers (given a number <code>n</code> and it's square root <code>s</code>, by definition <code>s * (s + 1)</code> is going to be larger than <code>n</code>).</p>
<p>If we add an argument for the target number to the function and make it a <a href="https://docs.python.org/3/tutorial/classes.html#generators" rel="nofollow noreferrer">generator function</a>, then you get:</p>
<pre><code>def gen_factors_for(target, numbers):
    possible_j = set(numbers)
    limit = abs(target) ** 0.5
    for i in numbers:
        if abs(i) &lt; limit and target % i == 0:
            j = target // i
            if j in possible_j and abs(j) &gt; abs(i):
                yield i, j
</code></pre>
<p>This approach is a <em>lot</em> faster than testing all permutations, especially if you need to find all possible factors. Note that I made both functions generators here to even out the comparisons:</p>
<pre><code>&gt;&gt;&gt; import random, operator
&gt;&gt;&gt; from timeit import Timer
&gt;&gt;&gt; def gen_factors_for_division(target, numbers):
...     possible_j = set(numbers)
...     limit = abs(target) ** 0.5
...     for i in numbers:
...         if abs(i) &lt; limit and target % i == 0:
...             j = target // i
...             if j in possible_j and abs(j) &gt; abs(i):
...                 yield i, j
...
&gt;&gt;&gt; def gen_factors_for_combinations(target, given_list):
...     return ((i, j) for i, j in combinations(given_list, 2) if i * j == target)
...
&gt;&gt;&gt; numbers = [random.randint(-10000, 10000) for _ in range(100)]
&gt;&gt;&gt; targets = [operator.mul(*random.sample(set(numbers), 2)) for _ in range(5)]
&gt;&gt;&gt; targets += [t + random.randint(1, 100) for t in targets]  # add likely-to-be-unsolvable numbers
&gt;&gt;&gt; for (label, t) in (('first match:', 'next({}, None)'), ('all matches:', 'list({})')):
...     print(label)
...     for f in (gen_factors_for_division, gen_factors_for_combinations):
...         test = t.format('f(t, n)')
...         timer = Timer(
...             f"[{test} for t in ts]",
...             'from __main__ import targets as ts, numbers as n, f')
...         count, total = timer.autorange()
...         print(f"{f.__name__:&gt;30}: {total / count * 1000:8.3f}ms")
...
first match:
      gen_factors_for_division:    0.219ms
  gen_factors_for_combinations:    4.664ms
all matches:
      gen_factors_for_division:    0.259ms
  gen_factors_for_combinations:    3.326ms
</code></pre>
<p>Note that I generate 10 different random targets, to try to avoid a lucky best-case-scenario hit for either approach.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>[(i,j) for i in num_list for j in num_list if i&lt;j and i*j==20]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is my take on it, which uses <a href="https://docs.python.org/2/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a>:</p>
<pre><code>def get_mult_num(given_list):
    return [
        item1, item2
        for i, item1 in enumerate(given_list)
        for item2 in given_list[:i]
        if item1*item2 == 20
    ]
</code></pre>
<p>I think your friend may be hinting towards using <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">comprehensions</a> when it makes the code cleaner (sometimes it doesn't).</p>
</div>
<div class="post-text" itemprop="text">
<p>I can think of using list-comprehension. This also helps to find multiple such-pairs if they exist in the given list.</p>
<pre><code>num_list = [2,4,5,1,6,40,-1]

mult_num = [(num_list[i],num_list[j]) for i in range(len(num_list)) for j in range(i+1, len(num_list)) if num_list[i]*num_list[j] == 20]
print mult_num
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[(4, 5)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I came up with this. It reverses the approach a little bit, in that it searches in <code>num_list</code> for the required pair partner that the iteration value <code>val</code> would multiply to 20 with. This makes the code easier and needs no imports, even if it's not the most efficient way.</p>
<pre><code>for val in num_list:    
    if 20 / val in num_list:
        print(val, int(20/val))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could make it more pythonic by using itertools.combinations, instead of nested loops, to find all pairs of numbers. Not always, but often iterating over indices as in <code>for i in range(len(L)):</code> is less pythonic than directly iterating over values as in <code>for v in L:</code>.</p>
<p>Python also allows you to make your function into a generator via the <code>yield</code> keyword so that instead of just returning the first pair that multiplies to 20, you get every pair that does by iterating over the function call.</p>
<pre><code>import itertools

def factors(x, numbers):
    """ Generate all pairs in list of numbers that multiply to x.
    """
    for a, b in itertools.combinations(numbers, 2):
        if a * b == x:
            yield (a, b)

numbers = [2, 4, 5, 1, 6, 40, -1]
for pair in factors(20, numbers):
    print(pair)
</code></pre>
</div>
<span class="comment-copy">I don't think this is what you want: <code>for i in given_list: for j in range(i+1, len(given_list)): ...</code> use <code>print i,j</code> to see the results. <code>i</code> is not the index of <code>given_list</code> it is an element of it!</span>
<span class="comment-copy">Thanks for the help and very clear explanation. I'll sure adapt it.</span>
<span class="comment-copy">What if the list was a 100 range, how could I adapt my code using combinations to return the values that multiply to said target value?</span>
<span class="comment-copy">@MarcelloFabrizio: that goes well beyond being 'pythonic' now, now we are writing math puzzle solutions. :-) I've updated my answer to suggest an approach.</span>
<span class="comment-copy">I edited my question with the new code. I implemented the combinations you explained.</span>
<span class="comment-copy">@MarcelloFabrizio: that's really not needed; we are trying to build a repository of questions and answers for future visitors, your question was better suited towards that goal without the addition. I've rolled back the edit.</span>
<span class="comment-copy">This does more than twice the amount of work needed. You loop N ** 2 times over a list of numbers of length N, but there are only <a href="https://en.wikipedia.org/wiki/Binomial_coefficient" rel="nofollow noreferrer"><i>(N choose 2)</i></a> combinations. That's 49 iterations in your case where only 21 are needed, less than half. You take the full square with N along both sides, but you only need to consider one half of that square and ignore the diagonal, so (N * (N - 1)) // 2.</span>
<span class="comment-copy">Note: your implementation has the same error as the code in the question; try this with <code>num_list = [2, 10]</code>, for example.</span>
<span class="comment-copy">@MartijnPieters, Thanks for checking my answer and pointing out the error. I have fixed it and updated my answer.</span>
