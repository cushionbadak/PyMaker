<div class="post-text" itemprop="text">
<p>When you create a lambda in Python, what type is returned? E.g. <code>type(lambda x: x+1)</code> returns</p>
</div>
<div class="post-text" itemprop="text">
<p>Lambda is almost as same as defining a regular function.</p>
<p>In your case, it is equivalent to:</p>
<pre><code>def _(x):
    return x+1
</code></pre>
<p>Because of that, and because the dynamic typing nature of Python, the type of the return value depends on what the function does.</p>
<p>Calling the function with different values can return different values:</p>
<pre><code>In [2]: y = lambda x: x+1

In [3]: y(1)
Out[3]: 2

In [4]: type(y(1))
Out[4]: int

In [5]: y(1.0)
Out[5]: 2.0

In [6]: type(y(1.0))
Out[6]: float
</code></pre>
<hr/>
<p>When asking about the type of <strong>the lambda function itself</strong>, the type is just <code>function</code>:</p>
<pre><code>In [1]: type(lambda x: x+1)
Out[1]: function
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; type(lambda x: x+1)
&lt;class 'function'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It returns the same type that you might expect. If you set:</p>
<pre><code>y = lambda x: x+1
</code></pre>
<p>then <code>type(y(1))</code> will return <code>int</code> <code>type(y(1.1))</code> will return <code>float</code>. <code>type(y)</code> will simply return <code>function</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Lambdas are just simple syntactic sugar on top of functions. From the <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer">documentation</a> (emphasis mine):</p>
<blockquote>
<p>Small anonymous functions can be created with the lambda keyword. This function returns the sum of its two arguments: lambda a, b: a+b. Lambda functions can be used wherever function objects are required. They are syntactically restricted to a single expression. <strong>Semantically, they are just syntactic sugar for a normal function definition.</strong> Like nested function definitions, lambda functions can reference variables from the containing scope:</p>
</blockquote>
</div>
<span class="comment-copy">It returns whatever your own code to test it returns? What is stopping you from running that?</span>
<span class="comment-copy">The type of <code>x + 1</code></span>
<span class="comment-copy"><code>name = lambda &lt;params&gt;: &lt;whatever&gt;</code> is the same as <code>def name(&lt;params&gt;): return &lt;whatever&gt;</code></span>
<span class="comment-copy">You can think of lambda is like a shorthand function. For example <code>lambda x: x+1</code> is like <code>def my_function(x): return x + 1</code> So, the type of your lambda is the type of x + 1</span>
<span class="comment-copy"><code>f = lambda x: x+1; print type(f)</code> returns <code>&lt;type 'function'&gt;</code></span>
