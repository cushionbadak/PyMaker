<div class="post-text" itemprop="text">
<p>The challenge is to run a set of data processing and data science scripts that consume more memory than expected.</p>
<p><strong>Here are my requirements:</strong></p>
<ul>
<li>Running 10-15 Python 3.5 scripts via Cron Scheduler</li>
<li>These different 10-15 scripts each take somewhere between 10 seconds to 20 minutes to complete</li>
<li>They run on different hours of the day, some of them run every 10 minute while some run once a day</li>
<li>Each script logs what it has done so that I can take a look at it later if something goes wrong</li>
<li>Some of the scripts sends e-mails to me and to my team mates</li>
<li>None of the scripts have an HTTP/web server component; they all run on Cron schedules and not user-facing</li>
<li>All the scripts' code is fed from my Github repository; when scripts wake up, they first do a git pull origin master and then start executing. That means, pushing to master causes all scripts to be on the latest version.</li>
</ul>
<p><strong>Here is what I currently have:</strong></p>
<ul>
<li>Currently I am using 3 Digital Ocean servers (droplets) for these scripts</li>
<li>Some of the scripts require a huge amount of memory (I get segmentation fault in droplets with less than 4GB of memory)</li>
<li>I am willing to introduce a new script that might require even larger memory (the new script currently faults in a 4GB droplet)</li>
<li>The setup of the droplets are relatively easy (thanks to Python venv) but not to the point of executing a single command to spin off a new droplet and set it up</li>
</ul>
<p>Having a full dedicated 8GB / 16B droplet for my new script sounds a bit inefficient and expensive. </p>
<p>What would be a more efficient way to handle this?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What would be a more efficient way to handle this?</p>
</blockquote>
<p>I'll answer in three parts:</p>
<ol>
<li>Options to reduce memory consumption</li>
<li>Minimalistic architecture for serverless computing</li>
<li>How to get there</li>
</ol>
<p><strong>(I) Reducing Memory Consumption</strong></p>
<blockquote>
<p>Some handle large loads of data</p>
</blockquote>
<p>If you find the scripts use more memory than you expect, the only way to reduce the memory requirements is to </p>
<ol>
<li>understand which parts of the scripts drive memory consumption </li>
<li>refactor the scripts to use less memory</li>
</ol>
<p>Typical issues that drive memory consumption are:</p>
<ul>
<li><p><em>using the wrong data structure</em> - e.g. if you have numerical data it is usually better to load the data into a numpy array as opposed to a Python array. If you create a lot of objects of custom classes, it can help to use <a href="https://stackoverflow.com/questions/472000/usage-of-slots"><code>__slots__</code></a></p></li>
<li><p><em>loading too much data into memory at once</em> - e.g. if the processing can be split into several parts independent of each other, it may be more efficient to only load as much data as one part needs, then use a loop to process all the parts. </p></li>
<li><p><em>hold object references that are no longer needed</em> - e.g. in the course of processing you create objects to represent or process some part of the data. If the script keeps a reference to such an object, it won't get released until the end of the program. One way around this is to use <a href="https://docs.python.org/3/library/weakref.html" rel="nofollow noreferrer">weak references</a>, another is to use <code>del</code> to dereference objects explicitely.  Sometimes it also helps to call the <a href="https://stackoverflow.com/a/1316793/890242">garbage collector</a>.</p></li>
<li><p><em>using an offline algorithm when there is an online version (for machine learning)</em> - e.g. some of scikit's algorithms provide a version for <a href="https://scikit-learn.org/0.15/modules/scaling_strategies.html#incremental-learning" rel="nofollow noreferrer">incremental learning</a> such as <code>LinearRegression</code> =&gt; <code>SGDRegressior</code> or <code>LogisticRegression</code> =&gt; <code>SGDClassifier</code></p></li>
</ul>
<blockquote>
<p>some do minor data science tasks</p>
</blockquote>
<p>Some algorithms do require large amounts of memory. If using an online algorithm for incremental learning is not an option, the next best strategy is to use a service that only charges for the actual computation time/memory usage. That's what is typically referred to as <em>serverless computing</em> - you don't need to manage the servers (droplets) yourself. </p>
<p>The good news is that in principle the provider you use, Digital Ocean, provides a model that only charges for resources actually used. However this is not really serverless: it is still your task to create, start, stop and delete the droplets to actually benefit. Unless this process is fully automated, the fun factor is a bit low ;-)</p>
<p><strong>(II) Minimalstic Architecture for Serverless Computing</strong></p>
<blockquote>
<p>a full dedicated 8GB / 16B droplet for my new script sounds a bit inefficient and expensive</p>
</blockquote>
<p>Since your scripts run only occassionally / on a schedule, your droplet does not need to run or even exist all the time. So you could set this is up the following way: </p>
<ol>
<li><p>Create a schedulding droplet. This can be of a small size. It's only purpose is to run a scheduler and to create a new droplet when a script is due, then submit the task for execution on this new worker droplet. The worker droplet can be of the specific size to accommodate the script, i.e. every script can have a droplet of whatever size it requires. </p></li>
<li><p>Create a generic worker. This is the program that runs upon creation of a new droplet by the scheduler. It receives as input the URL to the git repository where the actual script to be run is stored, and a location to store results. It then checks out the code from the repository, runs the scripts and stores the results.</p></li>
<li><p>Once the script has finished, the scheduler deletes the worker droplet.</p></li>
</ol>
<p>With this approach there are still fully dedicated droplets for each script, but they only cost money while the script runs. </p>
<p><strong>(III) How to get there</strong></p>
<p>One option is to build an architecture as described above, which would essentially be an implementation of a minimalistic architecture for <a href="https://en.wikipedia.org/wiki/Serverless_computing" rel="nofollow noreferrer">serverless computing</a>. There are several Python libraries to interact with the <a href="https://developers.digitalocean.com/libraries/" rel="nofollow noreferrer">Digital Ocean API</a>. You could also use <a href="https://libcloud.apache.org/" rel="nofollow noreferrer"><code>libcloud</code></a> as a generic multi-provider cloud API to make it easy(ier) to switch providers later on.</p>
<p>Perhaps the better alternative before building yourself is to evaluate one of the existing <a href="https://opensource.com/article/18/11/open-source-serverless-platforms" rel="nofollow noreferrer">open source serverless options</a>. An extensive curated list is provided by the good fellows at <a href="https://github.com/anaibol/awesome-serverless" rel="nofollow noreferrer">awesome-serverless</a>. Note at the time of writing this, many of the open source projects are still in their early stages, the more mature options are commerical.</p>
<p>As always with engineering decisions, there is a trade-off between the time/cost required to build or host yourself v.s. the cost of using a readily-available commercial service. Ultimately that's a decision only you can take.</p>
</div>
<span class="comment-copy">Could you share some details on what your scripts do? It is not typical for python programs "as such" to take this amount of memory, so it's related to the specifics of your program. Sounds like you load a lot of data, perhaps into a suboptimal way or data structure. Knowing more will help to answer your question.</span>
<span class="comment-copy">Some handle large loads of data while some do minor data science tasks. When I run the scripts on my own Mac, I can see that they use around 2.5GB of memory. I am not sure why a 4GB droplet can't handle 2GB memory consumption but that is another question probably. In any case, it would be hard to re-write those scripts now.</span>
<span class="comment-copy">ok I took a stab at answering your somewhat generic question, which howvever I find quite interesting since it has a few nice angles to it. I also took liberty to change the title of your question to make it a bit more specific. Hope this helps.</span>
