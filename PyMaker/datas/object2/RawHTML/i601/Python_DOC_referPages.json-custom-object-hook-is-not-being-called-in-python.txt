<div class="post-text" itemprop="text">
<p>I have wrote a custom hook which works when input string is valid dict in python, but it doesn't works when it is valid list.</p>
<p><code>[1,2]</code> is a valid json but if I pass this to <code>json.loads</code> with my custom hook, the hook is not being called.</p>
<pre><code>import json

def my_hook(object):
    print("{} : {}".format(type(object), object))
    return object


l = json.dumps([1,2])
d = json.dumps({'a': 8})

# my_hook is being called in this case
json.loads(d, object_hook=my_hook)

# my_hook is not being called in this case
json.loads(l, object_hook=my_hook)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't manage <code>JSON</code> <code>array</code> deserialization using <code>object_hook</code>, only <code>JSON</code> <code>object</code>s (like <code>d</code> in your example), as it said in <a href="https://docs.python.org/3/library/json.html#json.load" rel="nofollow noreferrer">docs</a></p>
<blockquote>
<p><code>object_hook</code> is an optional function that will be called with the result of any <strong>object literal</strong> decoded (a <code>dict</code>). The return value of <code>object_hook</code> will be used instead of the <code>dict</code>. This feature can be used to implement custom decoders (e.g. JSON-RPC class hinting).</p>
</blockquote>
<p>If you really need to handle <code>array</code>s, you can write your post-processing function and walk through every node and modify <code>list</code> objects.</p>
<p>BTW <code>object</code> is a name of <a href="https://docs.python.org/3/library/functions.html#object" rel="nofollow noreferrer">built-in</a>, so I suggest you to rename it to <code>obj</code>/<code>object_</code>/something else.</p>
</div>
