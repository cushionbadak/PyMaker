<div class="post-text" itemprop="text">
<p>I am looking for a hash function that can generate a digest of a specified bit-size for a cryptographic signature scheme. A related question (<a href="https://crypto.stackexchange.com/questions/3558/are-there-hash-algorithms-with-variable-length-output">https://crypto.stackexchange.com/questions/3558/are-there-hash-algorithms-with-variable-length-output</a>) on the Cryptography SE specifies that algorithms exist for this particular purpose.<br/>
Are there any Python libraries that I can use for this?</p>
<p>Currently, my scheme just pads a SHA-256 output to the desired size. I also have tried the Python SHA3 library - pysha3 1.0.2, however, it has a few predefined digest sizes that can be used.</p>
<p>I want a hashing function which can take in the desired digest size as a parameter and accordingly hashes a message (if possible)</p>
</div>
<div class="post-text" itemprop="text">
<p>As a cursory answer: You might be interested in the inbuilt <a href="https://docs.python.org/3/library/hashlib.html#blake2" rel="nofollow noreferrer">Blake2 function in hashlib</a> in python 3.6+. </p>
<p>It only outputs up to 64 bytes, but is <a href="https://blake2.net/" rel="nofollow noreferrer">"faster than MD5, SHA-1, SHA-2, and SHA-3, yet is at least as secure as the latest standard SHA-3"</a>.</p>
<p>Hopefully this is long enough and you don't need external libraries!</p>
</div>
<div class="post-text" itemprop="text">
<p>Any Extendable output function (XOF) can be used to obtain a digest of a given size. From Wikipedia:</p>
<blockquote>
<p>Extendable-output functions (XOFs) are cryptographic hashes which can output an arbitrarily large number of random-looking bits.</p>
</blockquote>
<p>One of the function provided under SHA-3 includes the SHAKE128 and SHAKE256 functions. They follow from the general properties of the <a href="https://keccak.team/sponge_duplex.html" rel="nofollow noreferrer">sponge construction</a>. A sponge function can generate an arbitrary length of output. The 128 and 256 in their names indicates its maximum security level (in bits), as described in Sections A.1 and A.2 of <a href="http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf" rel="nofollow noreferrer">FIPS 202</a>.</p>
<p>In python, first <a href="https://pycryptodome.readthedocs.io/en/latest/src/installation.html" rel="nofollow noreferrer">install</a> the PyCryptodome library: 
</p>
<pre class="lang-py prettyprint-override"><code>pip install pycryptodome
</code></pre>
<p><br/>
A hash of say 20 bytes can be generated as follows:</p>
<pre class="lang-py prettyprint-override"><code>from Crypto.Hash import SHAKE256
from binascii import hexlify
shake = SHAKE256.new()
shake.update(b'Some data')
print hexlify(shake.read(20))
</code></pre>
<p>Further references on SHAKE256 and SHA3:
<a href="https://pycryptodome.readthedocs.io/en/latest/src/hash/shake256.html" rel="nofollow noreferrer">Link 1</a>
<a href="https://nvlpubs.nist.gov/nistpubs/fips/nist.fips.202.pdf" rel="nofollow noreferrer">Link 2</a> </p>
</div>
