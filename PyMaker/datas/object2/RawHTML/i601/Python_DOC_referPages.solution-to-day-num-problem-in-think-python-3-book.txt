<div class="post-text" itemprop="text">
<p>There is exercise in section 4.17 of the book "How to Think Like a Computer
Scientist: Learning with Python 3" 3rd edition</p>
<p>"Write a function day_name that converts an integer number 0 to 6 into the name of a day. Assume day 0 is “Sunday”. Once again, return None if the arguments to the function are not valid."</p>
<p>I have written the following code which solves the problem for most part, except i am unable to understand how to return "None" for invalid argument. Please assist...</p>
<pre><code>def day_name(x):
    days=["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    return days[x]

print(day_name(5))
</code></pre>
<p>if i <code>print(day_name(7))</code>, it returns python error instead of "None"</p>
</div>
<div class="post-text" itemprop="text">
<p>Add validation to your function. You can do this explicitly:</p>
<pre><code>if x in range(7):
    return days[x]
else:
    return None
</code></pre>
<p>That is called <em>look before you leap</em>: you check that <code>days[x]</code> exists before you try to select it.</p>
<p>Or you can let the selection fail and trap the error:</p>
<pre><code>try:
    return days[x]
except IndexError:
    return None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are using the list data structure. It works based on the indexes.</p>
<pre><code>["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    0         1          2          3            4          5           6
</code></pre>
<p>When we access <code>print(day_name(7))</code> then we are trying to access index <code>7</code> which is not available. so, it's throwing the error.</p>
<p>Better Approach is</p>
<pre><code>def day_name(x):
    days = {
        0: 'Sunday',
        1: 'Monday',
        2: 'Tuesday',
        3: 'Wednesday',
        4: 'Thursday',
        5: 'Friday',
        6: 'Saturday'
     }

    return dic.get(x)

print(day_name(7))
</code></pre>
<p>Dictionary works faster because it uses hashing technique.</p>
<h1>Speed testing list index vs dict key</h1>
<pre><code>from time import time
t = time()
lst = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
try:
    print(lst[7])
except IndexError:
    pass

print(time() - t)

t = time()
days = {
    0: 'Sunday',
    1: 'Monday',
    2: 'Tuesday',
    3: 'Wednesday',
    4: 'Thursday',
    5: 'Friday',
    6: 'Saturday'
}
print(days.get(7))

print(time() - t)
</code></pre>
<h1>Output</h1>
<pre><code>None
3.09944152832e-05
None
1.09672546387e-05
</code></pre>
<p>For more derails checkout <a href="https://learnbatta.com/course/python/python-working-with-lists/" rel="nofollow noreferrer">https://learnbatta.com/course/python/python-working-with-lists/</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def day_name(x):
    days=["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    try:
        return days[x]
    except:
        return None
</code></pre>
<p>You can use a for loop but this is the better way to go. <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/errors.html#handling-exceptions</a>.</p>
<p>As @Derte said,it is also a good practise to catch only the specific exception instead of blanket except statement like:</p>
<pre><code>def day_name(x):
    days=["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    try:
        return days[x]
    except IndexError as e:
        print(e)
        return None 
</code></pre>
<p>Here's a time testing using timeit library:</p>
<pre><code>import timeit
def day_name_eafp(x):
    days=["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    try:
        return days[x]
    except IndexError as e:
        return None

def day_name_dict(x):
    days = {
        0: 'Sunday',
        1: 'Monday',
        2: 'Tuesday',
        3: 'Wednesday',
        4: 'Thursday',
        5: 'Friday',
        6: 'Saturday'
     }

    return days.get(x)


def wrapper(func, *args, **kwargs):
    def wrapped():
        return func(*args, **kwargs)
    return wrapped

x=7
wrapped_eafp = wrapper(day_name_eafp, x)
wrapped_dict = wrapper(day_name_dict, x)

timeit.timeit(wrapped_eafp, number=100000)
&gt;&gt;0.05935070099803852
timeit.timeit(wrapped_dict, number=100000)
&gt;&gt;0.06682577800165745
</code></pre>
<p>This means the speed is comparable. So of-course you should use a more pythonic way.</p>
</div>
<div class="post-text" itemprop="text">
<p>The function/method 'day_name' holds a <a href="https://www.tutorialspoint.com/python/python_dictionary.htm" rel="nofollow noreferrer">dict</a> that points from day index to day name.A python dict comes with a function named 'get' which you can read about here: <a href="https://www.tutorialspoint.com/python/dictionary_get.htm" rel="nofollow noreferrer">https://www.tutorialspoint.com/python/dictionary_get.htm</a> . It is the 'get' function that takes care of the cases where there is no match between the day_index and the day name.</p>
<pre><code>def day_name(day_index):
    days = {0: "Sunday", 1: "Monday", 2: "Tuesday", 3: "Wednesday", 4: "Thursday", 5: "Friday", 6: "Saturday"}
    return days.get(day_index, None)


print(day_name(4))  # Thursday
print(day_name(44))  # None
</code></pre>
</div>
<span class="comment-copy">How about an if statement?</span>
<span class="comment-copy">You can just intercept the error and return None</span>
<span class="comment-copy">+1 correct, I will just add the second paradigm is called "Easier to ask for forgiveness than permission" <a href="https://docs.python.org/3.4/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a></span>
<span class="comment-copy">Thanks, so whats the better way to solve the exercise problem?</span>
<span class="comment-copy">@njathan use <code>try-except</code></span>
<span class="comment-copy">@njathan we only have <code>7</code> days, it means <code>0 to 6</code> indexes. So, we should not access the index <code>7</code>.</span>
<span class="comment-copy">@AkshayNevrekar <code>try-exept</code> works but that's not the correct way of doing it.</span>
<span class="comment-copy">@AnjaneyuluBatta I don't see any problem with it or <code>dict</code> is much better option here. See my answer below.</span>
<span class="comment-copy">Thank you very much!</span>
<span class="comment-copy">specify the exception type as <code>except IndexError</code>, avoid "catch all" excepts in general (for example if user does a keyboard interrupt (CTRL+C) at the right moment the program would not be stopped by it)</span>
<span class="comment-copy">Commentary was added</span>
