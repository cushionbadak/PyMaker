<div class="post-text" itemprop="text">
<p>When I run into unicode printing problems, I want to know what I should check.  In my particular case, I'm using an installed module that is printing unicode encoded characters using the wrong codec.</p>
<p>There are several disparate places that affect python encoding and decoding under a variety of circumstances.  And specifically how python handles printable data in different circumstances.</p>
<p>Some things off the top of mind:</p>
<ul>
<li>general environment variables <code>LC_ALL</code>, <code>LANG</code></li>
<li>Python <code>sys</code> module setting <code>sys.getdefaultencoding()</code></li>
</ul>
<p><strong><em>What else am I forgetting?</em></strong></p>
<p><br/></p>
<p>I'm only interested in python 3.</p>
</div>
<div class="post-text" itemprop="text">
<h2>things to check</h2>
<p>Here is what I found, in order of how I recommend checking them:</p>
<ul>
<li>environment variables <code>LC_ALL</code>, <code>LANG</code>, <code>LC_CTYPE</code>, <code>LANGUAGE</code></li>
<li>Python-specific environment  variables <code>PYTHONIOENCODING</code>, <code>PYTHONCOERCECLOCALE</code><br/>(the affect of which may be affected by program argument <code>-E</code>; can check <code>sys.flags.ignore_environment</code>)

<ul>
<li>Windows-specific console encoding <code>PYTHONLEGACYWINDOWSSTDIO</code></li>
</ul></li>
<li>Python <code>sys</code> module

<ul>
<li>function <code>sys.getdefaultencoding()</code> (the corollary function <code>sys.setdefaultencoding</code> was removed from Python 3)</li>
<li><code>sys.stdin.encoding</code></li>
<li><code>sys.stdout.encoding</code></li>
<li><code>sys.stderr.encoding</code></li>
<li>file system encoding setting <code>sys.getfilesystemencoding()</code></li>
</ul></li>
<li>Python file header <code>-*- coding: utf-8 -*-</code></li>
<li><code>locale</code> module

<ul>
<li>function call <code>locale.nl_langinfo(locale.CODESET)</code> (does not appear to work on Windows Python 3.7, worked on Debian Python 3.5)</li>
<li>function <code>locale.getdefaultlocale</code></li>
<li>function <code>locale.getpreferredencoding</code> (works differently on some systems)</li>
</ul></li>
<li><code>gettext</code> module and it's various facilities (I won't list them all)

<ul>
<li>contents of the directories passed to some functions like <code>gettext.install(application, directory)</code> or <code>gettext.bindtextdomain(domain, directory)</code></li>
</ul></li>
</ul>
<p><br/></p>
<h2>print the values</h2>
<p>Here is quick script to list the values of most of these:</p>
<pre><code>import os, sys, locale

print('environment:')
print('-E (ignore PYTHON* environment variables) ? %s' %
      (True if sys.flags.ignore_environment else False))
for env in ('LC_ALL', 'LANG', 'LC_CTYPE',
            'LANGUAGE', 'PYTHONIOENCODING',
            'PYTHONLEGACYWINDOWSSTDIO'):
    if env in os.environ:
        print('"%s"="%s"' % (env, os.environ[env]))
    else:
        print('"%s" not set' % env)

print()
print('sys module:')
print('getdefaultencoding "%s"' % sys.getdefaultencoding())
print('sys.stdin.encoding "%s"' % sys.stdin.encoding)
print('sys.stdout.encoding "%s"' % sys.stdout.encoding)
print('sys.stderr.encoding "%s"' % sys.stderr.encoding)

print()
print('locale:')
try:
    getattr(locale,'nl_langinfo')
    print('locale.nl_langinfo(locale.CODESET) "%s"' \
          % locale.nl_langinfo(locale.CODESET))
except AttributeError:
    print('locale.nl_langinfo not available')
print('locale.getdefaultlocale()[1] "%s"' \
      % locale.getdefaultlocale()[1])
print('locale.getpreferredencoding() "%s"' \
      % locale.getpreferredencoding())
</code></pre>
<p><br/></p>
<h3>printed values on three systems</h3>
<ul>
<li>Windows 10 with 3.7</li>
<li>Debian 9 with 3.5</li>
<li>Ubuntu 14 with 3.4</li>
</ul>
<p><br/></p>
<p>On Windows 10 using Python 3.7, this prints</p>
<pre><code>environment:
-E (ignore PYTHON* environment variables) ? False
"LC_ALL" not set
"LANG" not set
"LC_CTYPE" not set
"LANGUAGE" not set
"PYTHONIOENCODING"="UTF-8"
"PYTHONLEGACYWINDOWSSTDIO" not set

sys module:
getdefaultencoding "utf-8"
sys.stdin.encoding "UTF-8"
sys.stdout.encoding "UTF-8"
sys.stderr.encoding "UTF-8"

locale:
locale.nl_langinfo not available
locale.getdefaultlocale()[1] "cp1252"
locale.ngetpreferredencoding() "cp1252"
</code></pre>
<p>On Debian 9 using Python 3.5, this prints</p>
<pre><code>environment:
-E (ignore PYTHON* environment variables) ? False
"LC_ALL" not set
"LANG"="en_GB.UTF-8"
"LC_CTYPE" not set
"LANGUAGE" not set
"PYTHONIOENCODING" not set
"PYTHONLEGACYWINDOWSSTDIO" not set

sys module:
getdefaultencoding "utf-8"
sys.stdin.encoding "UTF-8"
sys.stdout.encoding "UTF-8"
sys.stderr.encoding "UTF-8"

locale:
locale.nl_langinfo(locale.CODESET) "UTF-8"
locale.getdefaultlocale()[1] "UTF-8"
locale.ngetpreferredencoding() "UTF-8"

</code></pre>
<p>On Ubuntu 14.04 using Python 3.4, this prints</p>
<pre><code>environment:
-E (ignore PYTHON* environment variables) ? False
"LC_ALL" not set                                                                                                        
"LANG"="en_US.UTF-8"                                                                                                    
"LC_CTYPE" not set                                                                                                      
"LANGUAGE"="en_US:"                                                                                                     
"PYTHONIOENCODING" not set                                                                                              
"PYTHONLEGACYWINDOWSSTDIO" not set                                                                                      

sys module:                                                                                                             
getdefaultencoding "utf-8"                                                                                              
sys.stdin.encoding "UTF-8"                                                                                              
sys.stdout.encoding "UTF-8"                                                                                             
sys.stderr.encoding "UTF-8"                                                                                             

locale:                                                                                                                 
locale.nl_langinfo(locale.CODESET) "UTF-8"                                                                              
locale.getdefaultlocale()[1] "UTF-8"                                                                                    
locale.getpreferredencoding() "UTF-8"   
</code></pre>
<p><br/></p>
<p>Unfortunately, when I run into unicode print problems with installed modules, it is not immediately obvious which setting is affecting that module. Doubly so, understanding how these different possible parameters and settings interact is all the more confounding. There are many combinations of settings to test.</p>
<p>But this little bit might help someone get started.</p>
<p>Also see helpful answers at SO Question <a href="https://stackoverflow.com/q/4374455/471376">How to set sys.stdout encoding in Python 3?</a>.</p>
<h2>Related PEPs to review</h2>
<ul>
<li><a href="https://www.python.org/dev/peps/pep-0540/" rel="nofollow noreferrer">PEP 540 -- Add a new UTF-8 Mode</a> (<code>python -X UTF8 ...</code>)</li>
<li><a href="https://www.python.org/dev/peps/pep-0529/" rel="nofollow noreferrer">PEP 529 -- Change Windows filesystem encoding to UTF-8</a> (environment variable <code>PYTHONLEGACYWINDOWSFSENCODING</code>)</li>
</ul>
<p><br/></p>
<p>Some help from <a href="http://archive.fo/dsSuO" rel="nofollow noreferrer">this pymotw article</a>, <a href="https://docs.python.org/3/howto/unicode.html" rel="nofollow noreferrer">python how-to unicode</a>, <a href="https://docs.python.org/3/library/sys.html" rel="nofollow noreferrer">python sys module</a>, <a href="https://docs.python.org/3/library/locale.html" rel="nofollow noreferrer">python locale module</a>.</p>
</div>
