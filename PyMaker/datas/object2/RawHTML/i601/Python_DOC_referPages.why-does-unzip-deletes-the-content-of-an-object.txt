<div class="post-text" itemprop="text">
<p>Could anyone explain to me, why unzipping a zipped object (z1) leaves the initial object (z1) empty?</p>
<pre><code>mutants = ['charles xavier', 'bobby drake',
           'kurt wagner', 'max eisenhardt', 'kitty pride']
powers = ['telepathy', 'thermokinesis',
'teleportation', 'magnetokinesis', 'intangibility']

z1 = zip(mutants, powers)

print(*z1)

print(*z1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> returns an iterator, and you can only consume an iterator once.</p>
<p>If the number of elements is small, you could create a list or tuple with the elements, or you could use <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow noreferrer"><code>itertools.tee</code></a> to create several independent iterators from the original:</p>
<pre><code>import itertools

z1, z2 = itertools.tee(zip(mutants, powers), 2)

print(*z1)
print(*z2)
</code></pre>
<p>Result:</p>
<pre>
('charles xavier', 'telepathy') ('bobby drake', 'thermokinesis') ('kurt wagner', 'teleportation') ('max eisenhardt', 'magnetokinesis') ('kitty pride', 'intangibility')
('charles xavier', 'telepathy') ('bobby drake', 'thermokinesis') ('kurt wagner', 'teleportation') ('max eisenhardt', 'magnetokinesis') ('kitty pride', 'intangibility')
</pre>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't delete it.</p>
<p>If you execute <code>print(z1)</code>, you will see that it prints a <em>zip object</em>. This is because <code>zip</code> does not create a <code>tuple</code> or a <code>list</code>, but rather an <em>iterator</em>.</p>
<p>An iterator is something that generates values on demand. In this case, the zip object generates pairs taken from the input; namely, the <code>mutants</code> and <code>powers</code> lists. To see this in action, after you assign <code>z1</code>, you can call <code>print(next(z1))</code>, which causes <code>z1</code> to generate the next pair and print it; in this case, <code>('charles xavier', 'telepathy')</code>.</p>
<p>If you keep calling <code>next(z1)</code>, it will iterate through the two lists until it reaches the end. At that point, it has no data left to read, so if you try calling <code>next(z1)</code> again, it will raise the <code>StopIteration</code> exception, which signifies that the iterable is <em>exhausted</em>.</p>
<p>Conversely, if you did something like <code>t1 = tuple(z1)</code>, you would be able to call <code>print(*t1)</code> as many times as you wanted. However, if you did that and then tried to call <code>t2 = tuple(z1)</code>, you would realise that <code>t2</code> was empty. This is for the same reason as the above: building <code>t1</code> from <code>z1</code> has already exhausted it, so when <code>t2</code> tries to get values from <code>z1</code>, it immediately hits <code>StopIteration</code> and so generates an empty <code>tuple</code>.</p>
</div>
