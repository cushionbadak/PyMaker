<div class="post-text" itemprop="text">
<p>Is there a way to prevent the script's directory from being added to sys.path in python3? I'm getting import conflicts due to the fact that imports are relative in python. A legacy project I'm working with has a file called <code>logger.py</code> in the root directory of the script which conflicts with the built-in <code>logger</code>. </p>
<p>The custom build system that I use ends up creating symlinks to all the files and dependencies and in production, at runtime we use the <code>-E</code> flag to ignore any system set <code>PYTHONPATH</code> and set the path to what we want. But running tests/scripts from PyCharm doesn't work because of this conflict.</p>
</div>
<div class="post-text" itemprop="text">
<p>At the top of your script, you can try doing something like:</p>
<pre><code>import os
import sys

# the first element of sys.path is an empty string, meant to represent the current directory
sys.path.remove('')
</code></pre>
<p>then do your normal imports.</p>
<p>Beware, this will cause <em>all</em> relative imports from your current directory to fail, potentially causing more problems than your legacy <code>logger.py</code></p>
<p>With regards to your second question, whether or not there's anything that can be done to prevent the directory from being added to <code>sys.path</code> in the first place, the short answer is no. From the <a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path" rel="nofollow noreferrer">Python 3 docs on "module search path"</a> :</p>
<blockquote>
<p>sys.path is initialized from these locations:</p>
<ul>
<li>The directory containing the input script (or the current directory when no file is specified).</li>
<li>PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH).</li>
<li>The installation-dependent default.</li>
</ul>
</blockquote>
<p><br/>
I suppose you could set up a symlink from your current working directory to another directory, keep your actual script there, and point the symlink at it. Also from the above docs (emphasis mine):</p>
<blockquote>
<p>On file systems which support symlinks, the directory containing the input script is calculated <strong><em>after</em></strong> the symlink is followed.</p>
</blockquote>
</div>
<span class="comment-copy">What do you mean? Do you mean to avoid that the <i>working directory</i> is added to it? Or do you want to break package imports? Anyway it sounds like your project is simply broken. You should refactor it to use a virtualenv.</span>
<span class="comment-copy">I want the script's directory to NOT appear in sys.path. Like suggested by wpercy below, I could remove the dir (usually the first element of sys.path) from sys.path. I agree project is broken, unfortunately its not something I can simply refactor as this build system is grandfathered in.</span>
<span class="comment-copy">this is what I'm doing now, wondering if there are any python interpreter flags or environment variables I can set to prevent the script dir from being put in the sys.path</span>
<span class="comment-copy">the short answer is no, there's nothing you can pass to the interpreter that will prevent it from adding the script's own directory to <code>sys.path</code>. <a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path" rel="nofollow noreferrer">Python3 docs on "module search path"</a></span>
