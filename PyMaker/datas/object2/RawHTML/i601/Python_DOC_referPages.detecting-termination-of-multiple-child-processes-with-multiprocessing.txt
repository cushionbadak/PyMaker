<div class="post-text" itemprop="text">
<pre><code>#!/usr/bin/python
import os

from os import getpid

import multiprocessing


build="613719"
file1=open('/auto/home/venkam11/python/install-script/build-ddr-file.txt', 'r')

def installation(model,ddr,build):

    cli = "/auto/tools/qa/shared/qa-branch/util/install.pl -durham -restart -silentinstall -model %s -branch 6.2A %s %s"  %(model, ddr, build)

    print cli
    os.popen2(cli)
    print "installation has started on %s \n" %ddr
</code></pre>
<p>if <strong>name</strong> == '<strong>main</strong>':</p>
<pre><code>pid=getpid()

print("parent process id :{}".format(getpid()))

for ddr in file1:
    print ddr.rstrip()
    if 'dd4500' in ddr:
        print "dd4500"
        model = "dd4500"
    elif ('apollo' or 'apolloplus') in ddr:
        print "dd9500"
        model = "dd9500"
    elif 'dd2500' in ddr:
        print "dd2500"
        model = "dd2500"
    elif 'dd7200' in ddr:
        print "dd7200"
        model = "dd7200"
    elif 'jupiter' in ddr:
        print "dd9800"
        model = "dd9800"
    ddr = ddr.rstrip()
    ins=multiprocessing.Process(target=installation, args=(model,ddr,build))
    ins.start()
</code></pre>
<p>Basically iam trying to read the file which has the machine names and using multiprocessing, I want to insatll the OS on the machines which I have read. </p>
<p>Above is my code, when I run, it starts installing on all the machines at once and the main program terminates.</p>
<p>But I want the main program not to terminate, it has to wait until the child process finish the job, also return the output saying the child process job is complete.</p>
<p>Install make take anytime 1 hr or 2 hrs, but I want the message saying that all the process jobs are completed.</p>
<p>Can anyone please help here.</p>
</div>
<div class="post-text" itemprop="text">
<p>Populate a list of processes and use <code>join()</code> to join them with the parent process and then print the message. This way, the parent waits till the children are done with their tasks before executing the lines that follow.</p>
<p>The code for the same should look something like this:</p>
<pre><code>#!/usr/bin/python
import os
import multiprocessing
import subprocess
import time
import sys

from os import getpid

file1 = open('/auto/home/venkam11/python/install-script/build-ddr-file.txt', 'w+')
print ("enter the ddr names one by one in each line and press ctrl-d twice")
userInput = sys.stdin.readlines()
file1.writelines(userInput)
file1.close()
build = input("\nenter the build number : \n")
branch = raw_input("enter the branch name  : " )
file1 = open('/auto/home/venkam11/python/install-script/build-ddr-file.txt', 'r')

def installation(model, branch, ddr, build, shared_dict):
        cli = "/auto/tools/qa/shared/qa-branch/util/install.pl -durham -restart -silentinstall -model %s -branch %s %s %s"  %(model, branch, ddr, build)
        print cli
        print "installation has started on %s \n" % ddr
        time.sleep(20)
        try:
            subprocess.check_call(cli, shell=True)
            shared_dict[ddr] = True
        except subprocess.CalledProcessError:
            shared_dict[ddr] = False

if __name__ == '__main__':
    #pid=getpid()
    #print("parent process id : {}".format(getpid()))
    processes = []
    manager = multiprocessing.Manager()
    shared_dict = manager.dict()
    for ddr in file1:
        print ddr.rstrip()
        if 'dd4500' in ddr:
            print "dd4500"
            model = "dd4500"
        elif ('apollo' or 'apolloplus') in ddr:
            print "dd9500"
            model = "dd9500"
        elif 'dd2500' in ddr:
            print "dd2500"
            model = "dd2500"
        elif 'dd7200' in ddr:
            print "dd7200"
            model = "dd7200"
        elif 'jupiter' in ddr:
            print "dd9800"
            model = "dd9800"

        ddr = ddr.rstrip()
        ins = multiprocessing.Process(target=installation, args=(model, branch, ddr, build, shared_dict))
        ins.start()
        processes.append(ins)

    for process in processes:
        process.join()

    print('All the installations are complete')
    print('Details: ')
    for ddr, success in shared_dict.items():
        if success:
            print('Installation on {} successful'.format(ddr))
        else:
            print('Installation on {} unsuccessful'.format(ddr))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Welcome to Stackoverflow. Much like threads, the easiest way to synchronise with your subprocesses is to <code>join()</code> them, most usually in the creating thread/process. The <code>os.popen2</code> call was deprecated when the <code>subprocess</code> module was introduced, as it does not give the necessary degree of control over and communication with the started subprocess. For that you have correctly deduced you <em>can</em> use the <code>multiprocessing</code> module.</p>
<p>The technical answer to your question using <code>multiprocessing</code> is already covered well in another answer, as well as in <a href="https://stackoverflow.com/questions/25391025/what-exactly-is-python-multiprocessing-modules-join-method-doing">this question</a>, which explains how the calling entity can synchronise with its child processes. It's quite permissible to deal with an unknown number of subprocesses by storing each one in a list, for example, like this</p>
<pre><code>for p in my_processes:
    p.join()
</code></pre>
<p>A more useful answer might be that <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">the <code>subprocess</code> module</a> allows creation and monitoring of other processes without the overhead and complexity of <code>multiprocessing</code>, which has advanced features for inter-process communication that you do not (yet) appear to need. Its documentation has quite good examples of how older and/or less appropriate Python code can be adapted to use the new module, so it could be worth a look.</p>
</div>
<span class="comment-copy">Hi Vignesh,  Thank you. It worked for me.</span>
<span class="comment-copy">Hi Vignesh,  It worked for me. I had used the steps which you had told, but not placed in the correct place. Thanks a lot for the help.</span>
<span class="comment-copy">Hi Vignesh,  Also, is there a way to read the output of process, like installation log. So that I should read the log and check for the successful or fail message in the log and print as machine installation is successful or failed.</span>
<span class="comment-copy">As you said, you can write the status into a log file and read from it when exiting from the parent. But here, you'll have to write to the file from your perl script, the reading part can be done in your python script.</span>
<span class="comment-copy">Hi Vignesh,  Thanks. It worked.</span>
<span class="comment-copy">Hi,  thanks for the answer. I have another question.  Also, is there a way to read the output of process, like installation log. So that I should read the log and check for the successful or fail message in the log and print as machine installation is successful or failed</span>
<span class="comment-copy">For that kind of thing you should definitely search for <code>subprocess</code> examples (there will be lots, many from stackoverflow, I imagine). But do look at the examples in the docs first, since there are many good ideas in there.</span>
<span class="comment-copy">Hi,  Thanks for the answer.   I will go through the examples.</span>
