<div class="post-text" itemprop="text">
<p>If I have a dictionary with lists in it like this one:</p>
<pre><code>dic = {"j" : ["a", "b", "c", "d", "e", "f", "g"], "a" : [ "h", "b", "f"], "c": ["g", "i"]}
</code></pre>
<p>How can I make a code that first checks if any of the dictionary keys exist as strings inside the value lists. If they do compare the values of these two keys and count the number of similarities.</p>
<p>For example, the final result in this dictionary will be:</p>
<pre><code>{'a': 0, 'c': 0, 'j': 3}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import Counter


def search(d, key):
    def number_of_matches_in_lists(l1, l2):
        c1 = Counter(l1)  # see https://docs.python.org/3/library/collections.html#collections.Counter
        c2 = Counter(l2)
        return sum((c1 &amp; c2).values())  # get total cout of all matching elements

    matches = 0
    list1 = d[key]
    for key2 in list1:  # iterate over items in the list
        if key2 in d:
            list2 = d[key2]
            # add number of matching items in list1 and list2 to total
            matches += number_of_matches_in_lists(list1, list2)

    return matches


if __name__ == '__main__':
    d = {"Family": [
        "Mom", "Dad", "Dog", "Sister",
        "Grandmother", "House"],
        "House": [
            "Dog", "Cat", "Hamster", "Kitchen"]
    }
    print(search(d, "Family"))
    print(search(d, "House"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following code reports, for each <code>key</code> in <code>d</code>, how many times any associated item occurs among the top-level dictionary keys:</p>
<pre><code>{key: sum((item in d) for item in d[key]) for key in d}
#{'Family': 1, 'House': 0}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is not so clear, but i can answer.</p>
<p>So to get each keys' values to see if any of them are keys, do:</p>
<pre><code>&gt;&gt;&gt; [i for i in d if any(x in d for x in d[i])]
['Family']
&gt;&gt;&gt; 
</code></pre>
<p>To get counts of all values:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter([x for i in list(d.values()) for x in i])
Counter({'Dog': 2, 'Mom': 1, 'Dad': 1, 'Sister': 1, 'Grandmother': 1, 'House': 1, 'Cat': 1, 'Hamster': 1, 'Kitchen': 1})
&gt;&gt;&gt; 
</code></pre>
<p>To get most common:</p>
<pre><code>&gt;&gt;&gt; Counter([x for i in list(d.values()) for x in i]).most_common()[0][0]
'Dog'
&gt;&gt;&gt; 
</code></pre>
<h3>Final answer:</h3>
<p>Use the below:</p>
<pre><code>&gt;&gt;&gt; {k:int(any(i in d for i in v)) for k,v in d.items()}
{'Family': 1, 'House': 0}
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>You can try</strong>:</p>
<pre><code>a = {"Family": [
     "Mom", "Dad", "Dog", "Sister",
     "Grandmother", "House"],
 "House": [
     "Dog", "Cat", "Hamster", "Kitchen"]
}

all_keys = a.keys()

result = {}

for key,val in a.iteritems():
    result[key] = 0
    for data in all_keys:
        if data in val:
            result[key] = result[key]+1

print result
</code></pre>
<p><strong>You will get the output</strong> : </p>
<pre><code>{'House': 0, 'Family': 1}
</code></pre>
</div>
<span class="comment-copy">What if there are several items in the list that are keys?</span>
<span class="comment-copy">how can I make an exception that if a key has the same name that one of its elements it doesn't have to count it?</span>
<span class="comment-copy">Just add an <code>if</code> condition inside the loop</span>
