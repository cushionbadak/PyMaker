<div class="post-text" itemprop="text">
<p>I've got a big problem with <code>datetime</code> and <code>timestamp</code> working with my <code>DataFrame</code>. I want to identify the week number of a date but I found some inconstitencies. Here the case:</p>
<pre><code>df = pd.DataFrame(['2018-12-28', '2018-12-29', '2018-12-30', '2018-12-31', 
                    '2019-01-01', '2019-01-02', '2019-01-03', '2019-01-04'], 
                   columns=['datestr'])
df.date = pd.to_datetime(ddf.datestr, format='%Y-%m-%d')
df['week'] = ddf.date.apply(lambda x: x.week)
df['m'] = ddf.date.apply(lambda x: (x.year, x.week))
df['weekpy'] = ddf.m.apply(lambda d: datetime.strptime(str(d)+'-1', "(%Y, %W)-%w"))
</code></pre>
<p>gives me</p>
<pre><code>    datestr    week    m          weekpy
0   2018-12-28  52  (2018, 52)  2018-12-24
1   2018-12-29  52  (2018, 52)  2018-12-24
2   2018-12-30  52  (2018, 52)  2018-12-24
3   2018-12-31  1   (2018, 1)   2018-01-01
4   2019-01-01  1   (2019, 1)   2019-01-07
5   2019-01-02  1   (2019, 1)   2019-01-07
6   2019-01-03  1   (2019, 1)   2019-01-07
7   2019-01-04  1   (2019, 1)   2019-01-07
</code></pre>
<p>As you can see, the date <code>2018-12-31</code>  for a <code>timestamp</code> is in the first week of the year (a monday) 2019 but is still in 2018. Furthermore, for a <code>datetime</code> the first day of the first week of 2019 is the <code>2019-01-07</code>.</p>
<p>How can we deal with this ? The goal of this is to group by week</p>
</div>
<div class="post-text" itemprop="text">
<p>Pandas <code>Timestamp</code>s and Python <code>datetime.date</code>s are both reporting <a href="https://en.wikipedia.org/wiki/Week#Week_numbering" rel="nofollow noreferrer">ISO 8601 week numbers</a>:</p>
<pre><code>import datetime as DT
import pandas as pd
df = pd.DataFrame(['2018-12-28', '2018-12-29', '2018-12-30', '2018-12-31', 
                    '2019-01-01', '2019-01-02', '2019-01-03', '2019-01-04'], 
                   columns=['date'])

df['date'] = pd.to_datetime(df['date'], format='%Y-%m-%d')
df['datenum'] = df['date'].dt.week
df['py-ios-weeknum'] = [d.isocalendar()[1] for d in df['date'].dt.date]
df['py-iso-year'] = [d.isocalendar()[0] for d in df['date'].dt.date]
df['week'] = df.date.apply(lambda x: x.week)
df['m'] = df.date.apply(lambda x: (x.isocalendar()[0], x.isocalendar()[1]))
df['weekpy'] = df.m.apply(lambda d: DT.datetime.strptime(str(d)+'-1', "(%Y, %W)-%w"))
print(df)
</code></pre>
<p>yields</p>
<pre><code>        date  datenum  py-ios-weeknum  py-iso-year  week           m     weekpy
0 2018-12-28       52              52         2018    52  (2018, 52) 2018-12-24
1 2018-12-29       52              52         2018    52  (2018, 52) 2018-12-24
2 2018-12-30       52              52         2018    52  (2018, 52) 2018-12-24
3 2018-12-31        1               1         2019     1   (2019, 1) 2019-01-07
4 2019-01-01        1               1         2019     1   (2019, 1) 2019-01-07
5 2019-01-02        1               1         2019     1   (2019, 1) 2019-01-07
6 2019-01-03        1               1         2019     1   (2019, 1) 2019-01-07
7 2019-01-04        1               1         2019     1   (2019, 1) 2019-01-07
</code></pre>
<p><code>df['datenum'] = df['date'].dt.week</code> is equivalent to <code>df['week'] = df.date.apply(lambda x: x.week)</code>,
but using the <a href="https://pandas.pydata.org/pandas-docs/stable/reference/series.html#api-series-dt" rel="nofollow noreferrer"><code>Series.dt</code> accessor</a> is faster (in terms of both writing and performance) than calling the lambda function on each item in <code>df.date</code> which is what <code>apply</code> does.</p>
<p>Given a Python <code>datetime.date</code> (or <code>datetime.datetime</code>), the easiest way to obtain the
ISO week number is to call its <a href="https://docs.python.org/3/library/datetime.html#datetime.date.isocalendar" rel="nofollow noreferrer"><code>isocalendar</code> method</a>:</p>
<pre><code>In [76]: d = DT.datetime(2018,12,31)
In [87]: iso_year, iso_week_number, iso_weekday = d.isocalendar()
In [88]: print(iso_year, iso_week_number, iso_weekday)
2019 1 1
</code></pre>
<p>Notice that <code>2018-12-31</code> is in ISO year 2019. To make <code>df['weekpy']</code> return the first day of the ISO week, you must pass the <em>ISO year</em>, <code>d.isocalendar()[0]</code>, not the actual year, <code>d.year</code>.</p>
<pre><code>In [93]: print(DT.datetime.strptime('({}, {})-1'.format(d.year, pd.Timestamp(d).week), "(%Y, %W)-%w"))  # WRONG
2018-01-01 00:00:00

In [94]: print(DT.datetime.strptime('({}, {})-1'.format(d.isocalendar()[0], d.isocalendar()[1]), "(%Y, %W)-%w")) # OK
2019-01-07 00:00:00
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In light of how the <code>.week</code> property is set for those weeks which straddle two different calendar years, we'll need a grouping function that is a little more agnostic to the new year. The simplest solution is to assume there are no skips in your data (you have a row for every day) and partition it into chunks of 7.</p>
<p>But that feels really brittle. Instead, here's an implementation that asks, "what was the Monday of this week?" and groups on that.</p>
<pre><code>df.date.apply(lambda t: t - (t.dayofweek * pd.Timedelta('1 day')))
</code></pre>
<p>This works because the exact <code>datetime</code> value of a given week's Monday will be unique from week to week. Here's a <a href="https://repl.it/repls/ZigzagPrimaryLeads" rel="nofollow noreferrer">demo</a>.</p>
<p>This of course assumes that you want December 31, 2018 to be in the same week as January 1, 2019 (which, arguably, it is since it falls in the same Monday to Sunday slice, but as Idlehands pointed out, that's a matter of semantics that's up to you to decide).</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>isocalendar()</code> which returns a <code>tuple</code> of <code>(year, week, day)</code>:</p>
<pre><code>df['m'] = df['date'].apply(lambda x: x.isocalendar()[:2])  # only need the year and week

# 0    (2018, 52)
# 1    (2018, 52)
# 2    (2018, 52)
# 3     (2019, 1)
# 4     (2019, 1)
# 5     (2019, 1)
# 6     (2019, 1)
# 7     (2019, 1)
</code></pre>
<p>To calculate the start of week, subtract the <code>dayofweek</code>:</p>
<pre><code>df['weekpy'] = df['date'].apply(lambda x: x - pd.Timedelta(days=x.dayofweek))

# 0   2018-12-24
# 1   2018-12-24
# 2   2018-12-24
# 3   2018-12-31
# 4   2018-12-31
# 5   2018-12-31
# 6   2018-12-31
# 7   2018-12-31
</code></pre>
<p>Final results:</p>
<pre><code>         date  week           m     weekpy
0  2018-12-28    52  (2018, 52) 2018-12-24
1  2018-12-29    52  (2018, 52) 2018-12-24
2  2018-12-30    52  (2018, 52) 2018-12-24
3  2018-12-31     1   (2019, 1) 2018-12-31
4  2019-01-01     1   (2019, 1) 2018-12-31
5  2019-01-02     1   (2019, 1) 2018-12-31
6  2019-01-03     1   (2019, 1) 2018-12-31
7  2019-01-04     1   (2019, 1) 2018-12-31
</code></pre>
</div>
<span class="comment-copy">All the days within a given week (Monday-Sunday) share a value of <code>week</code>. Monday 31/12/2018 is in the same week as Tuesday, 01/01/2019, the first week of 2019. I believe we're seeing the expected behavior.</span>
<span class="comment-copy">Further on @wbadart's comment, it depends if you want to classify <code>2018-12-31</code> as first week of 2019, or last week of 2018.  That's something you will have to define.  In this case it's simple, probably the first case.  But if <code>12-31</code> falls within the middle of the week, what is the week's definition? Once you have that figured out, the rest is just implementation details.</span>
<span class="comment-copy">I agree, <code>12-31-2018 </code> share the same week as <code>01-01-2019</code>, but when I compute the first day of the first week ok 2019, it gives <code>01-07-2019</code>, it is confusing. <code>12-31-2018</code> week is 1 and year is 2018, so it looks like it is in first week of 2018... strange no ?</span>
<span class="comment-copy">Nice expansion on the details, +1.</span>
