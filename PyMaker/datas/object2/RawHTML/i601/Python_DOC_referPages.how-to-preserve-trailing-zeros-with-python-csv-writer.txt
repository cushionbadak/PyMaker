<div class="post-text" itemprop="text">
<p>I am trying to convert a json file with individual json lines to csv. The json data has some elements with trailng zeros that I need to maintain (ex. 1.000000). When writing to csv the value is changed to 1.0, removing all trailing zeros except the first zero following the decimal point. How can I keep all trailing zeros? The number of trailing zeros may not always static.</p>
<p>Updated the formatting of the sample data.</p>
<p>Here is a sample of the json input:</p>
<pre><code>{"ACCOUNTNAMEDENORM":"John Smith","DELINQUENCYSTATUS":2.0000000000,"RETIRED":0.0000000000,"INVOICEDAYOFWEEK":5.0000000000,"ID":1234567.0000000000,"BEANVERSION":69.0000000000,"ACCOUNTTYPE":1.0000000000,"ORGANIZATIONTYPEDENORM":null,"HIDDENTACCOUNTCONTAINERID":4321987.0000000000,"NEWPOLICYPAYMENTDISTRIBUTABLE":"1","ACCOUNTNUMBER":"000-000-000-00","PAYMENTMETHOD":12345.0000000000,"INVOICEDELIVERYTYPE":98765.0000000000,"DISTRIBUTIONLIMITTYPE":3.0000000000,"CLOSEDATE":null,"FIRSTTWICEPERMTHINVOICEDOM":1.0000000000,"HELDFORINVOICESENDING":"0","FEINDENORM":null,"COLLECTING":"0","ACCOUNTNUMBERDENORM":"000-000-000-00","CHARGEHELD":"0","PUBLICID":"xx:1234346"}
</code></pre>
<p>Here is a sample of the output:</p>
<pre><code>ACCOUNTNAMEDENORM,DELINQUENCYSTATUS,RETIRED,INVOICEDAYOFWEEK,ID,BEANVERSION,ACCOUNTTYPE,ORGANIZATIONTYPEDENORM,HIDDENTACCOUNTCONTAINERID,NEWPOLICYPAYMENTDISTRIBUTABLE,ACCOUNTNUMBER,PAYMENTMETHOD,INVOICEDELIVERYTYPE,DISTRIBUTIONLIMITTYPE,CLOSEDATE,FIRSTTWICEPERMTHINVOICEDOM,HELDFORINVOICESENDING,FEINDENORM,COLLECTING,ACCOUNTNUMBERDENORM,CHARGEHELD,PUBLICID
John Smith,2.0,0.0,5.0,1234567.0,69.0,1.0,,4321987.0,1,000-000-000-00,10012.0,10002.0,3.0,,1.0,0,,0,000-000-000-00,0,bc:1234346
</code></pre>
<p>Here is the code:</p>
<pre><code>import json
import csv

f=open('test2.json') #open input file

outputFile = open('output.csv', 'w', newline='') #load csv file

output = csv.writer(outputFile) #create a csv.writer

i=1
for line in f:
    try:
        data = json.loads(line) #reads current line into tuple
    except:
        print("Can't load line {}".format(i))
    if i == 1:
        header = data.keys()
        output.writerow(header) #Writes header row
    i += 1
    output.writerow(data.values()) #writes values row

f.close() #close input file
</code></pre>
<p>The desired output would look like:</p>
<pre><code>ACCOUNTNAMEDENORM,DELINQUENCYSTATUS,RETIRED,INVOICEDAYOFWEEK,ID,BEANVERSION,ACCOUNTTYPE,ORGANIZATIONTYPEDENORM,HIDDENTACCOUNTCONTAINERID,NEWPOLICYPAYMENTDISTRIBUTABLE,ACCOUNTNUMBER,PAYMENTMETHOD,INVOICEDELIVERYTYPE,DISTRIBUTIONLIMITTYPE,CLOSEDATE,FIRSTTWICEPERMTHINVOICEDOM,HELDFORINVOICESENDING,FEINDENORM,COLLECTING,ACCOUNTNUMBERDENORM,CHARGEHELD,PUBLICID
John Smith,2.0000000000,0.0000000000,5.0000000000,1234567.0000000000,69.0000000000,1.0000000000,,4321987.0000000000,1,000-000-000-00,10012.0000000000,10002.0000000000,3.0000000000,,1.0000000000,0,,0,000-000-000-00,0,bc:1234346
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've been trying and I think this may solve your problem:</p>
<p>Pass the str function to the parse_float argument in json.loads :)</p>
<pre><code>data = json.loads(line, parse_float=str)
</code></pre>
<p>This way when json.loads() tries to parse a float it will use the str method so it will be parsed as string and maintain the zeroes. Tried doing that and it worked:</p>
<pre><code>i=1
for line in f:
    try:
        data = json.loads(line, parse_float=str) #reads current line into tuple
    except:
        print("Can't load line {}".format(i))
    if i == 1:
        header = data.keys()
        print(header) #Writes header row
    i += 1
    print(data.values()) #writes values row
</code></pre>
<p>More information here: <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">Json Documentation</a></p>
<p>PS: You could use a boolean instead of i += 1 to get the same behaviour.</p>
</div>
<div class="post-text" itemprop="text">
<p>The decoder of the <code>json</code> module parses real numbers with <code>float</code> by default, so trailing zeroes are not preserved as they are not in Python. You can use the <code>parse_float</code> parameter of the <code>json.loads</code> method to override the constructor of a real number for the JSON decoder with the <code>str</code> constructor instead:</p>
<pre><code>data = json.loads(line, parse_float=str)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use format but here need to give static decimal precision.</p>
<pre><code>&gt;&gt;&gt; '{:.10f}'.format(10.0)
'10.0000000000'
</code></pre>
</div>
<span class="comment-copy">Have you checked where are you "losing" the 0's? It's when reading the Json or when writing to Csv?</span>
<span class="comment-copy">@Pradam That's what I was thinking as a solution but I believe que already loses the 0's when json.loads(line), so converting data.values() to string wouldn't help.</span>
<span class="comment-copy">The parse_float=str worked perfectly. Thank you.</span>
