<div class="post-text" itemprop="text">
<p>With the folder structure</p>
<pre><code>lib/
    abcd/
        __init.py__
        lib.py
app.py
</code></pre>
<p>the code</p>
<pre><code>from lib.abcd import lib
</code></pre>
<p>works. But with this file structure: </p>
<pre><code>bin/
    app.py
lib/
    abcd/
        __init.py__
        lib.py
</code></pre>
<p>the code </p>
<pre><code>from ..lib.abcd import lib     
</code></pre>
<p>gives an import error.</p>
<p><strong>How to do the <code>import</code> properly when the library is in a sibling of the current folder?</strong> (or subfolder of a sibling folder)</p>
<p>I know that there might some hack that involves adding <code>lib/</code> to the PATH, but is there an elegant Pythonic solution?</p>
<p>If not, is there a real internal reason to prevent users to do this simple import in a simple way?</p>
</div>
<div class="post-text" itemprop="text">
<h1>Surface level look</h1>
<p>Normally, you can't. When importing a file, Python only searches the current directory, the directory that the entry-point script is running from, and <code>sys.path</code> which includes locations such as the package installation directory (it's actually a little more complex than this, but this covers most cases).  </p>
<p>The reason you don't see this problem for importing installed modules is because they are installed in a location that is already on your path, or the location is added to the path by the installing utility (<code>pip</code> for example). </p>
<p>You can add to the Python path at runtime:</p>
<pre><code>    import sys
    sys.path.insert(0, '../lib')

    import file  
</code></pre>
<p>You can also use <code>sys.path.append('../lib')</code>, but then it will be searched for last in your path and may be overridden by previous path entries. </p>
<p>I have read through the <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">import documentation</a> extensively, and as far as I can tell, the answer to your question is no, there is no way to do this in a purely "Pythonic" way.  </p>
<h1>More in depth look:</h1>
<p>Looking deeper into the <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">import documentation</a> explains this: </p>
<blockquote>
<p>The import statement combines two operations; it searches for the named module, then it binds the results of that search to a name in the local scope. The search operation of the import statement is defined as a call to the <strong>__import__()</strong> function, with the appropriate arguments. The return value of <strong>__import__()</strong> is used to perform the name binding operation of the import statement.  </p>
</blockquote>
<p>Looking more closely at <a href="https://docs.python.org/3/library/functions.html#__import__" rel="nofollow noreferrer">__import__</a>: </p>
<blockquote>
<h2>__import__(name, globals=None, locals=None, fromlist=(), level=0)</h2>
<p><strong>Note</strong>: This is an advanced function that is not needed in everyday Python programming, unlike <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow noreferrer">importlib.import_module()</a>.  </p>
<p>This function is invoked by the import statement. It can be replaced (by importing the builtins module and assigning to builtins.__import__) in order to change semantics of the import statement, but doing so is strongly discouraged as it is usually simpler to use import hooks (see PEP 302) to attain the same goals and does not cause issues with code which assumes the default import implementation is in use. Direct use of __import__() is also discouraged in favor of <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow noreferrer">importlib.import_module()</a>.</p>
<p>level specifies whether to use absolute or relative imports. 0 (the default) means only perform absolute imports. Positive values for level indicate the number of parent directories to search relative to the directory of the module calling __import__() (see PEP 328 for the details).</p>
</blockquote>
<p>This makes me think that you can specify a <code>level</code> in some way that may make the import automatically look on the parent path. I'm guessing that when <code>import</code> is called from your <code>app.py</code> that is not in it's own directory, <code>level</code> is set to <code>0</code> and it searches the same level and deeper.  </p>
<p>When you call <code>import</code> in <code>app.py</code> from a subfolder, <code>level</code> is still set to <code>0</code> and thus can't find the other directories above it. I am investigating a "Pythonic" way of setting this level to <code>1</code> when running your script which would appear to fix this problem.  </p>
</div>
<div class="post-text" itemprop="text">
<h1>Methods to do this</h1>
<hr/>
<p><strong>Method #1: Using the sys module:</strong>  You can easily accomplish what you are trying to do using the <code>sys</code> module. To import the <code>lib</code> package, you can use one of the two codes listed below:</p>
<pre class="lang-py prettyprint-override"><code>import sys
sys.path.append('&lt;PATH_TO_LIB_FOLDER&gt;')

from lib.abcd import lib
</code></pre>
<p>or</p>
<pre class="lang-py prettyprint-override"><code>import sys
sys.path.insert(0, '&lt;PATH_TO_LIB_FOLDER&gt;')
</code></pre>
<hr/>
<p><strong>Method #2: Using the os module:</strong> Another method is to use the <code>os</code> module. Here is an example code that imports the <code>lib</code> module using the <code>os</code> module by invoking the <code>os.path.join</code> method:</p>
<pre class="lang-py prettyprint-override"><code>import os

path = os.path.join("&lt;PATH&gt;/lib/abcd", "lib")
from lib.abcd import lib
</code></pre>
<hr/>
<p><strong>Method #3: Add the module to your PYTHONPATH:</strong> This is not the best method in most cases, but if you don't want to keep using the <code>sys</code> or <code>os</code> module to import <code>lib</code>, this is ideal. All you have to do is type this in your bash terminal:</p>
<pre class="lang-sh prettyprint-override"><code>export PYTHONPATH=&lt;PATH_TO_LIB&gt; python lib.py
</code></pre>
<p>Then in your python shell you can import it like this:</p>
<pre class="lang-py prettyprint-override"><code>from lib.abcd import lib
</code></pre>
<hr/>
<p><strong>Method #4: Combine the sys and os module (recommended):</strong> This is the most efficient method and will save you a lot of time. This code combines the <code>os</code> and <code>sys</code> module like this:</p>
<pre class="lang-py prettyprint-override"><code>import sys, os
sys.path.append(os.path.abspath(os.path.join('..', 'lib')))
</code></pre>
<p>Then you can import your module with ease like this:</p>
<pre class="lang-py prettyprint-override"><code>from lib.abcd import lib
</code></pre>
<hr/>
<h3>How all the codes work:</h3>
<p>All the codes above are very simple. All the examples except for <em>"Method #3"</em>, add your module to the <code>PYTHONPATH</code> temporarily. <em>"Method #3"</em> on the other hand, adds the module to your <code>PYTHONPATH</code> permanently.</p>
</div>
<span class="comment-copy">Normally you just cannot. As your top level directory is <code>bin</code>. To achieve it, you need to add parent directory into <code>sys.path</code>. And then import it as <code>from lib.abcd import lib</code>.</span>
<span class="comment-copy">Thanks for your comment @Sraw. Isn't there an easier solution?</span>
<span class="comment-copy">Surely there is... Moving that <code>lib</code> to <code>bin</code>. I understand your project strucutre. If you want to insist on it, I recommend you to add a bash script for launching purpose. In that script you can use <code>PYTHONPATH=your_parent_directory python app.py</code> to launch your app.</span>
<span class="comment-copy">Just to clarify, based on the code and these comments: Is there no parent folder here? Is this the <i>complete</i> folder structure your project?</span>
<span class="comment-copy">IMHO you are doing it wrong. You should distinguish between the layout of the source code and the layout of an installed software. When you install the software the <code>lib</code> will be installed in the site-packages of the python interpreter and you are done, you can put  <code>app.py</code> in a standard <code>bin</code> directory and it will always work independently of where it is. During development you simply flag the root directory as sources root and you are done, or you use a virtualenv where you do a <a href="https://stackoverflow.com/questions/30306099/pip-install-editable-vs-python-setup-py-develop"><code>pip install -e</code></a></span>
<span class="comment-copy">What new information did you add? These are both path manipulation, which I already mentioned, and is not what the OP is asking for.</span>
