<div class="post-text" itemprop="text">
<p>I'm kind of a beginner in python, so there are some things I am used to in Java and C++ that I'm not sure how to do in python. One of these things is to return a minimum value from an array/list. This seems to work with lists that aren't defined as dicts, but as you can see below, my final output list is actually a list of dicts, and I'm not sure how to go about this.</p>
<p>I want to have a list of dynamically generated key, value pairs, such that the things that are added to the list are coupled together from the get go so that I know what the item in the list actually means. That part I am getting. The problem is that I have too many values to comb through to find the value I'm actually looking for, which is the key value pair with the lowest value, regardless of what the key is.</p>
<p>I have already tried changing the output from a <code>list</code> to a <code>defaultdict(list)</code> and changing the way that values are appended to it, but that leads to an undesirable output. The only method that seems to work that couples the two outputs I want is to add an item in the format: <code>{key: value}</code> to a list and then try to sort the list by value in descending order and then pick the first one; and unfortunately I can't even figure out how to do that because it seems like indexing in python is different.</p>
<p>I have a function that looks like this:</p>
<pre><code>def getnumdistance(q, r)
  #gets numerical distance between two vectors from a csv file

def comparetotrain(testexample, trainlist):
  distancelist = []
  for example in trainlist:
    for key, value in example.items():
      if (key == "Class"):
        distancelist.append({
          value: getnumdistance(testexample, example)
          })
  return distancelist
</code></pre>
<p>that outputs a list of things that look like this:</p>
<pre><code>[{'High': 5.314132102234569},
{'MidHigh': 8.029701115234614},
{'Low': 24.002408212510677},
...
{'MidHigh': 0.0}
...
{'High': 9.20044020685967},
{'LowMid': 22.120942565813056}]
</code></pre>
<p>And I want to output only the minimum value from <code>distancelist[]</code> because I plan on only using that to check my knn error rate (in this case, <code>{MidHigh: 0.0}</code>).</p>
<p>I plan on iterating through many different elements in <code>trainlist</code>, but I don't want to have to comb through them every time to try and find the minimum value.</p>
<p>Please help if you can.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>min()</code> to find minimum of list with its <code>key</code> parameter specifying on what basis you need to estimate the minimum:</p>
<pre><code>lst = [{'High': 5.314132102234569},
{'MidHigh': 8.029701115234614},
{'Low': 24.002408212510677},
{'MidHigh': 0.0},
{'High': 9.20044020685967},
{'LowMid': 22.120942565813056}]

print(min(lst, key=lambda x: list(x.values())))
# {'MidHigh': 0.0}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>my_list = [{'High': 5.314132102234569},
{'MidHigh': 8.029701115234614},
{'Low': 24.002408212510677},
{'MidHigh': 0.0},
{'High': 9.20044020685967},
{'LowMid': 22.120942565813056}]

sorted(my_list,key=lambda x:list(x.values())[0])
</code></pre>
<p>This will sort the list.</p>
</div>
<span class="comment-copy">Is there a reason you're outputting a list of dictionaries?  Your data looks like it would make more sense as a list of <code>(value, distance)</code> tuples.  You could then do something like <code>min(distancelist, key=itemgetter(1))</code>, using <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a></span>
<span class="comment-copy">I didn't know you could do that... thanks!</span>
