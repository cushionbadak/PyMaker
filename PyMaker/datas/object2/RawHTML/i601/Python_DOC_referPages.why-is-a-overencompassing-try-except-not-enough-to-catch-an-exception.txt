<div class="post-text" itemprop="text">
<p>I though that an outermost <code>try:</code> / <code>except:</code> would always catch an exception (the fact that this is probably not a good idea is outside of the question):</p>
<pre><code>try:
    try:
        raise ValueError
    except:
        raise ValueError
except:
    pass
</code></pre>
<p>In <a href="https://github.com/jamesoff/simplemonitor/blob/75950ea4ff8a1a809da4a0c26b068afc0f9eea5f/Loggers/network.py#L81" rel="nofollow noreferrer">some code</a> I am going though, I faced the case where</p>
<pre><code>def process_batch(self):
    try:
        p = util.json_dumps(self.batch_data)
        mac = hmac.new(self.key, p)
        send_bytes = struct.pack('B', mac.digest_size) + mac.digest() + p
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            try:
                s.connect((self.host, self.port))
            except socket.error:
                s.close()
                s = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
                s.connect((self.host, self.port))
            s.send(send_bytes)
        finally:
            s.close()
    except Exception:
        self.logger_logger.exception("Failed to send network data")
</code></pre>
<p>raised an exception:</p>
<pre><code>2019-02-09 23:32:51     INFO (simplemonitor) monitor passed: hass
2019-02-09 23:32:51     INFO (simplemonitor) monitor passed: dns
2019-02-09 23:32:51    ERROR (simplemonitor.logger-send-to-srv) Failed to send network data
Traceback (most recent call last):
  File "/opt/simplemonitor/Loggers/network.py", line 89, in process_batch
    s.connect((self.host, self.port))
ConnectionRefusedError: [Errno 111] Connection refused

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/simplemonitor/Loggers/network.py", line 93, in process_batch
    s.connect((self.host, self.port))
socket.gaierror: [Errno -5] No address associated with hostname
</code></pre>
<p>Why is it so? Why hasn't the overencompassing <code>try:</code>/<code>except:</code> caught the exception?</p>
</div>
<div class="post-text" itemprop="text">
<p>In the provided second code example, the <code>Traceback</code> message was not in fact an unhandled exception, due to the exception handler calling <a href="https://docs.python.org/3/library/logging.html#logging.Logger.exception" rel="nofollow noreferrer"><code>logger.exception</code></a> method which will print out the specified message along with the complete <code>Traceback</code> message into the logging stream.  If the <code>Traceback</code> is not desired, using <code>logger.error</code> will produce the log message at the same <code>ERROR</code> level without it.</p>
</div>
<span class="comment-copy">Because another exception is being raised by the inner exception handling code.</span>
<span class="comment-copy">I can't reproduce this. Any chance you can post a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>?</span>
<span class="comment-copy">Are you sure the <code>Traceback</code> isn't printed by <a href="https://docs.python.org/3/library/logging.html#logging.Logger.exception" rel="nofollow noreferrer"><code>logger.exception</code></a>?</span>
<span class="comment-copy">@martineau: but wouldn't that another exception be handled by the first (widest) <code>try</code>?</span>
<span class="comment-copy">@metatoaster: ah. I am not sure that I understand what you mean but I  had a look a few lines up (and added them to the question, above the Traceback)  and realized that the message from the outermost <code>except</code> <b>is printed</b> ("Failed to send network data"). So now i do not indeed understand where the Traceback comes from.</span>
