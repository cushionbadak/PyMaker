<div class="post-text" itemprop="text">
<p>Is it possible to use an Image as a key in a dict in Python? </p>
<pre><code>answer_List = {One : 1, Two : 2, Three :3, Four : 4, Five : 5, Six : 6}
</code></pre>
<p>where 1-6 are png files. I am new to python and I keep reading that it is super flexible and anything can be stored in and as anything. Yet I am getting an error</p>
<blockquote>
<p>TypeError: unhashable type: 'PngImageFile'</p>
</blockquote>
<p>thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>An object must be hashable if it is to be used as a dictionary key. I.e. it must have (or inherit) a <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer"><code>__hash__</code></a> method.</p>
<p>I am not sure what you are trying to achieve, but if you needed values associated with your images, you could for instance use their filenames as keys:</p>
<pre class="lang-py prettyprint-override"><code>{One.filename: 1, Two.filename: 2, ...}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The general rule for a dictionary key is that you want it to be immutable. If you make a change to the key object the internal data structure of the dict will get messed up.</p>
<p>Images are very mutable, you can change a pixel at any time. Mutable objects don't bother to implement the <code>__hash__</code> method because it would be useless. That's what the error message is telling you.</p>
<p>It's better to use a <em>proxy</em> for the image. One good suggestion in another answer is to use the filename of the image, but that assumes that each image comes from a file and there aren't any duplicate images with different filenames. Another would be to freeze the contents of the image into something immutable like a bytestring, but that would be extremely inefficient because the bytestring would be large. You can cure that problem by using a cryptographic hash to produce a string that is unique for each image input.</p>
<pre><code>import hashlib

def ImageID(im):
    return hashlib.md5(im.tobytes()).hexdigest()
</code></pre>
<p>This technique is useful for more than just <code>dict</code>s. I've used it for database keys for mp3 cover images, since many files will share an image.</p>
</div>
<span class="comment-copy">this should help -- <a href="https://stackoverflow.com/a/22603365">stackoverflow.com/a/22603365</a></span>
<span class="comment-copy">In most usecase this will not be a good design. But it possible by sub-classing <code>PngImageFile</code> and making it <a href="https://docs.python.org/3/reference/import.html#pyc-invalidation" rel="nofollow noreferrer">hashable</a>. The hash could be based on the file content, but the object must not change then.</span>
<span class="comment-copy">You can even use a <a href="https://github.com/JohannesBuchner/imagehash" rel="nofollow noreferrer">perceptual hash</a> if you want cropped/rotated images to hash to the same thing. It works decently but far from perfect.</span>
