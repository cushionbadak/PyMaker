<div class="post-text" itemprop="text">
<p>Is there any short way to achieve what the APT (<em>Advanced Package Tool</em>) command line interface does in Python?</p>
<p>I mean, when the package manager prompts a yes/no question followed by <code>[Yes/no]</code>, the script accepts <code>YES/Y/yes/y</code> or <kbd>Enter</kbd> (defaults to <code>Yes</code> as hinted by the capital letter).</p>
<p>The only thing I find in the official docs is <code>input</code> and <code>raw_input</code>...</p>
<p>I know it's not that hard to emulate, but it's annoying to rewrite :|</p>
</div>
<div class="post-text" itemprop="text">
<p>As you mentioned, the easiest way is to use <code>raw_input()</code> (or simply <code>input()</code> for <a href="https://docs.python.org/3/whatsnew/3.0.html" rel="nofollow noreferrer">Python 3</a>). There is no built-in way to do this. From <a href="http://code.activestate.com/recipes/577058/" rel="nofollow noreferrer">Recipe 577058</a>:</p>
<pre><code>import sys

def query_yes_no(question, default="yes"):
    """Ask a yes/no question via raw_input() and return their answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits &lt;Enter&gt;.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is True for "yes" or False for "no".
    """
    valid = {"yes": True, "y": True, "ye": True,
             "no": False, "n": False}
    if default is None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = raw_input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "
                             "(or 'y' or 'n').\n")
</code></pre>
<p>Usage example:</p>
<pre><code>&gt;&gt;&gt; query_yes_no("Is cabbage yummier than cauliflower?")
Is cabbage yummier than cauliflower? [Y/n] oops
Please respond with 'yes' or 'no' (or 'y' or 'n').
Is cabbage yummier than cauliflower? [Y/n] [ENTER]
&gt;&gt;&gt; True

&gt;&gt;&gt; query_yes_no("Is cabbage yummier than cauliflower?", None)
Is cabbage yummier than cauliflower? [y/n] [ENTER]
Please respond with 'yes' or 'no' (or 'y' or 'n').
Is cabbage yummier than cauliflower? [y/n] y
&gt;&gt;&gt; True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd do it this way:</p>
<pre><code># raw_input returns the empty string for "enter"
yes = {'yes','y', 'ye', ''}
no = {'no','n'}

choice = raw_input().lower()
if choice in yes:
   return True
elif choice in no:
   return False
else:
   sys.stdout.write("Please respond with 'yes' or 'no'")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a function <code>strtobool</code> in Python's standard library: <a href="http://docs.python.org/2/distutils/apiref.html?highlight=distutils.util#distutils.util.strtobool">http://docs.python.org/2/distutils/apiref.html?highlight=distutils.util#distutils.util.strtobool</a></p>
<p>You can use it to check user's input and transform it to <code>True</code> or <code>False</code> value.</p>
</div>
<div class="post-text" itemprop="text">
<p>A very simple (but not very sophisticated) way of doing this for a single choice would be:</p>
<pre><code>msg = 'Shall I?'
shall = input("%s (y/N) " % msg).lower() == 'y'
</code></pre>
<p>You could also write a simple (slightly improved) function around this:</p>
<pre><code>def yn_choice(message, default='y'):
    choices = 'Y/n' if default.lower() in ('y', 'yes') else 'y/N'
    choice = input("%s (%s) " % (message, choices))
    values = ('y', 'yes', '') if choices == 'Y/n' else ('y', 'yes')
    return choice.strip().lower() in values
</code></pre>
<p>Note: On Python 2, use <code>raw_input</code> instead of <code>input</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://click.pocoo.org/" rel="noreferrer">click</a>'s <code>confirm</code> method.</p>
<pre><code>import click

if click.confirm('Do you want to continue?', default=True):
    print('Do something')
</code></pre>
<p>This will print:</p>
<pre><code>$ Do you want to continue? [Y/n]:
</code></pre>
<p>Should work for <code>Python 2/3</code> on Linux, Mac or Windows.</p>
<p>Docs: <a href="http://click.pocoo.org/5/prompts/#confirmation-prompts" rel="noreferrer">http://click.pocoo.org/5/prompts/#confirmation-prompts</a></p>
</div>
<div class="post-text" itemprop="text">
<p>as mentioned by @Alexander Artemenko, here's a simple solution using strtobool</p>
<pre><code>from distutils.util import strtobool

def user_yes_no_query(question):
    sys.stdout.write('%s [y/n]\n' % question)
    while True:
        try:
            return strtobool(raw_input().lower())
        except ValueError:
            sys.stdout.write('Please respond with \'y\' or \'n\'.\n')

#usage

&gt;&gt;&gt; user_yes_no_query('Do you like cheese?')
Do you like cheese? [y/n]
Only on tuesdays
Please respond with 'y' or 'n'.
ok
Please respond with 'y' or 'n'.
y
&gt;&gt;&gt; True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I know this has been answered a bunch of ways and this may not answer OP's specific question (with the list of criteria) but this is what I did for the most common use case and it's far simpler than the other responses:</p>
<pre><code>answer = input('Please indicate approval: [y/n]')
if not answer or answer[0].lower() != 'y':
    print('You did not indicate approval')
    exit(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <a href="https://github.com/tylerdave/prompter" rel="noreferrer">prompter</a>.</p>
<p>Shamelessly taken from the README:</p>
<pre><code>#pip install prompter

from prompter import yesno

&gt;&gt;&gt; yesno('Really?')
Really? [Y/n]
True

&gt;&gt;&gt; yesno('Really?')
Really? [Y/n] no
False

&gt;&gt;&gt; yesno('Really?', default='no')
Really? [y/N]
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I modified fmark's answer to by python 2/3 compatible more pythonic.</p>
<p>See <a href="https://github.com/ipython/ipython/blob/aa586fd81940e557a1df54ecd0478f9d67dfb6b4/IPython/utils/io.py#L141-171" rel="noreferrer">ipython's utility module</a> if you are interested in something with more error handling</p>
<pre><code># PY2/3 compatibility
from __future__ import print_function
# You could use the six package for this
try:
    input_ = raw_input
except NameError:
    input_ = input

def query_yes_no(question, default=True):
    """Ask a yes/no question via standard input and return the answer.

    If invalid input is given, the user will be asked until
    they acutally give valid input.

    Args:
        question(str):
            A question that is presented to the user.
        default(bool|None):
            The default value when enter is pressed with no value.
            When None, there is no default value and the query
            will loop.
    Returns:
        A bool indicating whether user has entered yes or no.

    Side Effects:
        Blocks program execution until valid input(y/n) is given.
    """
    yes_list = ["yes", "y"]
    no_list = ["no", "n"]

    default_dict = {  # default =&gt; prompt default string
        None: "[y/n]",
        True: "[Y/n]",
        False: "[y/N]",
    }

    default_str = default_dict[default]
    prompt_str = "%s %s " % (question, default_str)

    while True:
        choice = input_(prompt_str).lower()

        if not choice and default is not None:
            return default
        if choice in yes_list:
            return True
        if choice in no_list:
            return False

        notification_str = "Please respond with 'y' or 'n'"
        print(notification_str)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>on 2.7, is this too non-pythonic?</p>
<pre><code>if raw_input('your prompt').lower()[0]=='y':
   your code here
else:
   alternate code here
</code></pre>
<p>it captures any variation of Yes at least.</p>
</div>
<div class="post-text" itemprop="text">
<p>Doing the same with python 3.x, where <code>raw_input()</code> doesn't exist:</p>
<pre><code>def ask(question, default = None):
    hasDefault = default is not None
    prompt = (question 
               + " [" + ["y", "Y"][hasDefault and default] + "/" 
               + ["n", "N"][hasDefault and not default] + "] ")

    while True:
        sys.stdout.write(prompt)
        choice = input().strip().lower()
        if choice == '':
            if default is not None:
                return default
        else:
            if "yes".startswith(choice):
                return True
            if "no".startswith(choice):
                return False

        sys.stdout.write("Please respond with 'yes' or 'no' "
                             "(or 'y' or 'n').\n")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try something like the code below to be able to work with choices from the variable 'accepted' show here:</p>
<pre><code>print( 'accepted: {}'.format(accepted) )
# accepted: {'yes': ['', 'Yes', 'yes', 'YES', 'y', 'Y'], 'no': ['No', 'no', 'NO', 'n', 'N']}
</code></pre>
<p>Here is the code ..</p>
<pre><code>#!/usr/bin/python3

def makeChoi(yeh, neh):
    accept = {}
    # for w in words:
    accept['yes'] = [ '', yeh, yeh.lower(), yeh.upper(), yeh.lower()[0], yeh.upper()[0] ]
    accept['no'] = [ neh, neh.lower(), neh.upper(), neh.lower()[0], neh.upper()[0] ]
    return accept

accepted = makeChoi('Yes', 'No')

def doYeh():
    print('Yeh! Let\'s do it.')

def doNeh():
    print('Neh! Let\'s not do it.')

choi = None
while not choi:
    choi = input( 'Please choose: Y/n? ' )
    if choi in accepted['yes']:
        choi = True
        doYeh()
    elif choi in accepted['no']:
        choi = True
        doNeh()
    else:
        print('Your choice was "{}". Please use an accepted input value ..'.format(choi))
        print( accepted )
        choi = None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As a programming noob, I found a bunch of the above answers overly complex, especially if the goal is to have a simple function that you can pass various yes/no questions to, forcing the user to select yes or no. After scouring this page and several others, and borrowing all of the various good ideas, I ended up with the following:</p>
<pre><code>def yes_no(question_to_be_answered):
    while True:
        choice = input(question_to_be_answered).lower()
        if choice[:1] == 'y': 
            return True
        elif choice[:1] == 'n':
            return False
        else:
            print("Please respond with 'Yes' or 'No'\n")

#See it in Practice below 

musical_taste = yes_no('Do you like Pine Coladas?')
if musical_taste == True:
    print('and getting caught in the rain')
elif musical_taste == False:
    print('You clearly have no taste in music')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3, I'm using this function:</p>
<pre><code>def user_prompt(question: str) -&gt; bool:
    """ Prompt the yes/no-*question* to the user. """
    from distutils.util import strtobool

    while True:
        user_input = input(question + " [y/n]: ").lower()
        try:
            result = strtobool(user_input)
            return result
        except ValueError:
            print("Please use y/n or yes/no.\n")
</code></pre>
<p>The <a href="https://docs.python.org/3.6/distutils/apiref.html?highlight=distutils.util#distutils.util.strtobool" rel="nofollow noreferrer" title="strtobool">strtobool</a> function converts a string into a bool. If the string cant be parsed it will raise a ValueError.</p>
<p>In Python 3 raw_input has been renamed to <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer" title="input">input</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about this: </p>
<pre><code>def yes(prompt = 'Please enter Yes/No: '):
while True:
    try:
        i = raw_input(prompt)
    except KeyboardInterrupt:
        return False
    if i.lower() in ('yes','y'): return True
    elif i.lower() in ('no','n'): return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is what I use:</p>
<pre><code>import sys

# cs = case sensitive
# ys = whatever you want to be "yes" - string or tuple of strings

#  prompt('promptString') == 1:               # only y
#  prompt('promptString',cs = 0) == 1:        # y or Y
#  prompt('promptString','Yes') == 1:         # only Yes
#  prompt('promptString',('y','yes')) == 1:   # only y or yes
#  prompt('promptString',('Y','Yes')) == 1:   # only Y or Yes
#  prompt('promptString',('y','yes'),0) == 1: # Yes, YES, yes, y, Y etc.

def prompt(ps,ys='y',cs=1):
    sys.stdout.write(ps)
    ii = raw_input()
    if cs == 0:
        ii = ii.lower()
    if type(ys) == tuple:
        for accept in ys:
            if cs == 0:
                accept = accept.lower()
            if ii == accept:
                return True
    else:
        if ii == ys:
            return True
    return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def question(question, answers):
    acceptable = False
    while not acceptable:
        print(question + "specify '%s' or '%s'") % answers
        answer = raw_input()
        if answer.lower() == answers[0].lower() or answers[0].lower():
            print('Answer == %s') % answer
            acceptable = True
    return answer

raining = question("Is it raining today?", ("Y", "N"))
</code></pre>
<p>This is how I'd do it.</p>
<p>Output</p>
<pre><code>Is it raining today? Specify 'Y' or 'N'
&gt; Y
answer = 'Y'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's my take on it, I simply wanted to abort if the user did not affirm the action.</p>
<pre><code>import distutils

if unsafe_case:
    print('Proceed with potentially unsafe thing? [y/n]')
    while True:
        try:
            verify = distutils.util.strtobool(raw_input())
            if not verify:
                raise SystemExit  # Abort on user reject
            break
        except ValueError as err:
            print('Please enter \'yes\' or \'no\'')
            # Try again
    print('Continuing ...')
do_unsafe_thing()
</code></pre>
</div>
<span class="comment-copy">In Python 3, <code>raw_input()</code> is called <a href="http://docs.python.org/dev/library/functions.html#input" rel="nofollow noreferrer"><code>input()</code></a>.</span>
<span class="comment-copy"><code>elif choice in valid:</code> And I'd probably return a boolean.</span>
<span class="comment-copy">Good choice Ignacio, amending</span>
<span class="comment-copy">Actually, there is a function strtobool in the standart library: <a href="http://docs.python.org/2/distutils/apiref.html?highlight=distutils.util#distutils.util.strtobool" rel="nofollow noreferrer">docs.python.org/2/distutils/…</a></span>
<span class="comment-copy"><code>choice = choice.strip()</code> works better for me.</span>
<span class="comment-copy">Just a remember:   <code>raw_input()</code> is called <code>input()</code> in Python3</span>
<span class="comment-copy"><code>raw_input()</code> is called <code>input()</code> in Python3</span>
<span class="comment-copy"><code>strtobool("f")</code> returns <code>0</code> ...</span>
<span class="comment-copy"><code>f</code> probably stands for False, and <code>False == 0</code>, so I get the logic. Why the function would return an <code>int</code> instead of a <code>bool</code> is a mystery to me though.</span>
<span class="comment-copy">@FrançoisLeblanc as to Why it is most common in Databases. If it is not explicitly <code>False</code> or <code>0</code> (Zero).  Anything, else that is evaluated using the bool function becomes true and will return: <code>1</code>.</span>
<span class="comment-copy">@JayRizzo I get that, and they're <a href="https://stackoverflow.com/questions/40640674/differentiate-false-and-0">both functionally similar</a> in most respects. But it means you can't use singleton comparison, i.e. <code>if strtobool(string) is False: do_stuff()</code>.</span>
<span class="comment-copy">Love the first approach.  Short and easy.  I used something like <code>result = raw_input("message").lower() in ('y','yes')</code></span>
<span class="comment-copy">Not sure why this answer is so low...</span>
<span class="comment-copy"><code>click</code> is bomb. I've been looking for something like it for years.</span>
<span class="comment-copy">just curious... why <code>sys.stdout.write</code> instead of <code>print</code> ?</span>
<span class="comment-copy">Note that <code>strtobool()</code> does not (from my tests) require a <code>lower()</code>. This is not explicit in its documentation, however.</span>
<span class="comment-copy">this does not work with python 2 -- <code>raw_input</code> was renamed <code>input</code> in python 3 <a href="https://stackoverflow.com/questions/21122540/input-error-nameerror-name-is-not-defined" title="input error nameerror name is not defined">stackoverflow.com/questions/21122540/…</a></span>
<span class="comment-copy">Beware that the behaviour of prompter is pretty backwards when you're using it with "default='no'"; it will return True when you choose 'no' and False when you choose 'yes'.</span>
<span class="comment-copy">Compatible with both Python 2 and 3, very readable. I ended up using this answer.</span>
<span class="comment-copy">Nope, this doesn't work. In more than one way actually. Currently trying to fix it, but I think this will look a lot like the accepted answer after I'm done.</span>
<span class="comment-copy">I edited you anwser @pjm . Please consider reviewing it :-)</span>
<span class="comment-copy">Shouldn't the argument be called "question" instead of "answer"?</span>
<span class="comment-copy">Please add some explanation to your code.</span>
