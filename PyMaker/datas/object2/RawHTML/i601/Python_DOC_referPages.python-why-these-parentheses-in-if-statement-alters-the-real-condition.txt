<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/740287/how-to-check-if-one-of-the-following-items-is-in-a-list">How to check if one of the following items is in a list?</a>
<span class="question-originals-answer-count">
                    14 answers
                </span>
</li>
</ul>
</div>
<p>I was doing a leetcode question while I had the following python code:</p>
<pre><code>pairs = [(1, 3)]
addend = 3
sum = 4
if ((addend, sum - addend) or (sum - addend, addend)) in pairs:
    print("Pair exists")
</code></pre>
<p>The expected output when I ran this code should be</p>
<pre><code>Pair exists
</code></pre>
<p><strong>But instead this prints nothing</strong>, which I assume means <code>((addend, sum - addend) or (sum - addend, addend))</code> evaluates to <code>False</code>.</p>
<p>Then I removed the outer parentheses and made it</p>
<pre><code>if (addend, sum - addend) or (sum - addend, addend) in pairs:
        print("Pair exists")
</code></pre>
<p>This gave me the right output.</p>
<p>My second guess was this pair of redundant parentheses actually calculates <code>((addend, sum - addend) or (sum - addend, addend))</code>, so I put <code>((1, 3) or (3, 1))</code> in the Python3.7 console directly and that's the output</p>
<pre><code>&gt;&gt;&gt; ((1, 3) or (3, 1))
(1, 3)
</code></pre>
<p>But still this won't make sense since (1, 3) is indeed in pairs.</p>
<p>Could anybody explain why putting these parentheses invalidates the statement?</p>
</div>
<div class="post-text" itemprop="text">
<p>The result of a Python <code>or</code> expression is the first operand that is truthy, or <code>False</code> if neither is.</p>
<p>The first expression you tried is</p>
<pre><code>((addend, sum - addend) or (sum - addend, addend)) in pairs
</code></pre>
<p>It can be evaluated as</p>
<pre><code>((3, 1) or (1, 3)) in pairs
</code></pre>
<p>Since both operands to the <code>or</code> expression in parentheses are non-empty tuples, the expression evaluates to</p>
<pre><code>(3, 1) in pairs
</code></pre>
<p>The result is understandably false.</p>
<p>If you strip off the parentheses, you run into the fact that <code>or</code> has lower precedence than <code>in</code>. So</p>
<pre><code>(addend, sum - addend) or (sum - addend, addend) in pairs
</code></pre>
<p>is the same as</p>
<pre><code>(3, 1) or ((1, 3) in pairs)
</code></pre>
<p>Again, both operands are truthy, so the expression evaluates to <code>(3, 1)</code> regardless of whether <code>pairs</code> contains anything.</p>
<p>What you were probably trying to express is</p>
<pre><code>(addend, sum - addend) in pairs or (sum - addend, addend) in pairs
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use <code>any</code>:</p>
<pre><code>if any(i in pairs for i in [(addend, sum-addend),(sum-addend,addend)]):
</code></pre>
<p>Or use:</p>
<pre><code>if (addend, sum - addend) in pairs or (sum - addend, addend) in pairs:
</code></pre>
<p>You can't use <code>or</code> because <code>or</code> just picks an element which is not indeed that that's the element in <code>pairs</code>, so use the above codes.</p>
</div>
<span class="comment-copy"><code>if (addend, sum - addend) in pairs or (sum - addend, addend) in pairs:</code></span>
<span class="comment-copy">The parentheses are <i>not</i> redundant<code>(addend, sum-addend) or (sum-addend,addend)</code> -&gt; <code>(3, 1)</code> which is not in <code>pairs</code></span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">docs.python.org/3/reference/‚Ä¶</a></span>
<span class="comment-copy">I would really love to answer but someone marked it as duplicate, so here it is in a comment: U9-Forward is right, you should use <code>any</code>, or use a double <code>or</code>. However if you were curious as to why your first method wasn't working, it was because you had <code>((addend, sum-addend) or (sum-addend,addend))</code>, which equates to <code>((3,1) or (1,3))</code>, and since, as you saw, only the first in this pair is left after using <code>or</code>, you are left with <code>(3,1)</code>, which does not appear in <code>pairs</code> because <code>pairs = [(1,3)]</code>, hence no output. The most curious thing here is how or is behaving in the brackets. Very unusual</span>
<span class="comment-copy">@Recessive Thanks a lot for your comment. Yea, "how or is behaving in the brackets" makes this question appear. Really like funny magic!</span>
<span class="comment-copy">Thanks Mad Physicist! After reading all the above answers and comments I was still confused about why stripping off the parentheses would make the statement True, until you said "or has lower precedence than in" and '''if (3,1)''' would evaluate to True. That's really helpful!</span>
<span class="comment-copy">@Hang. Glad it helped you. Some things Python does are a bit unusual, especially for a beginner, so I try to express what went into the aha moment I had when I first understood the topic. Good luck to you in your endeavors.</span>
<span class="comment-copy">Yea definitely, and you got right to the point! Appreciate it again and best wishes for you too in the new year! üëçüëç</span>
<span class="comment-copy">This doesn't answer the question.  And what's wrong with using <code>or</code>?</span>
<span class="comment-copy">@juanpa.arrivillaga Edited mine.</span>
<span class="comment-copy">U9-Forward Thanks for your answer! And @juanpa.arrivillaga I just tried putting '''((3,1) or (1,3))''' in the console and it did give me '''(3,1)'''. So seems like the parentheses do calculate these '''(3,1) or (1,3)''' and whatever before '''or''' gets returned?</span>
<span class="comment-copy">@Hang not exactly, <a href="https://stackoverflow.com/questions/47007680/strange-use-of-and-or-operator">see this question</a></span>
<span class="comment-copy">@juanpa.arrivillaga Thank you! Will see</span>
