<div class="post-text" itemprop="text">
<p>I'm writing function which prepare data in csv file. I wonder what should it return. I thought that information in string for user will be good idea, but how should I do it?</p>
<pre><code>return print('Some info')
</code></pre>
<p>Or just</p>
<pre><code>return 'Some info'
</code></pre>
<p>And how about exceptions, I mean like above. When exception will end work of function should I return print('Some info') or just 'Some info'?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, <code>return</code> should return the result from the function, not the value of <code>print</code> (which is always <code>None</code> anyway).</p>
<p>Usually, a function should not print anything at all. In order to make programs modular and reusable, you want to keep any user interaction in the calling code.</p>
<p>For example,</p>
<pre><code>def fibonacci(n):
    fib = some calculation ...
    print(fib)
    return fib

fibonacci(33)
</code></pre>
<p>This function has the side effect of printing the calculated value. But this means that you cannot calculate the value without also printing it. A common design principle from functional programming is that functions should not have side effects anyway. A better design is</p>
<pre><code>def fibonacci(n):
    fib = some calculation ...
    return fib

print(fibonacci(33))
</code></pre>
<p>Exceptions are for situations where the code cannot perform the requested function. For example, you cannot calculate a negative Fibonacci number:</p>
<pre><code>def fibonacci(n):
    if n &lt; 0:
        raise ValueError('Cannot calculate negative Fibonacci number')
    fib = some calculation ...
    return fib
</code></pre>
<p>You could call this on arbitrary user input;</p>
<pre><code>while True:
    number = input('Give me a number: ')
    try:
        print('Fibonacci: ', fibonacci(int(number))
    except ValueError as e:
        print('Oops, try again; ', e)
</code></pre>
<p>Notice how the <code>except</code> actually handles multiple error scenarios: if the use input isn't a number at all, <code>int(number)</code> will also raise a <code>ValueError</code> exception.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sounds like you're learning Python for the first time. I recommend reading documentation to understand how I/O and function return statements work: </p>
<p><a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/inputoutput.html</a></p>
<p><a href="https://www.w3schools.com/python/python_functions.asp" rel="nofollow noreferrer">https://www.w3schools.com/python/python_functions.asp</a></p>
<p>If you want to return a string in a function, use <code>return 'Some Info'</code>.
For printing something to the console for the user to view, simply use <code>print('Some Info')</code>. Combining the two seems pretty useless for your purposes.</p>
</div>
<span class="comment-copy">go with the 2nd way</span>
<span class="comment-copy">You should never use the first one.</span>
<span class="comment-copy">I'd say <code>return print</code> is pretty useless. <code>print</code> is a function that returns <code>None</code>, which is the same thing as <code>print(...); return</code>. If you want to return a string, return a string.</span>
<span class="comment-copy">You do not return print. You can return variables, lists, strings, etc...</span>
<span class="comment-copy">Okay, now I understand differences of print and return. So what should I do in my case? Do not return anything, return only in exceptions?</span>
<span class="comment-copy">If the string <code>'Some info'</code> is the result from the function, that's what you should return. Exceptions are for when the function cannot return a regular value (division by zero would be a typical example).</span>
<span class="comment-copy">Okay, but when exception will occur and make impossible to my master function to end and I should terminate work of my function. For example I want to prepare data but input data is invalid, should I write "except Exception as e: return e"? I'm very grateful for your help. :)</span>
<span class="comment-copy">You should <code>raise</code> an exception. See the last example in the answer.</span>
<span class="comment-copy">If the <i>only</i> thing you do with a caught exception is re-raise it, there is no point in catching it in the first place.</span>
