<div class="post-text" itemprop="text">
<p>I have an <code>argparse</code> argument <code>example</code> that accepts a variable number of strings:</p>
<pre><code>parser.add_argument('--example', nargs='*', required=False, default='')
</code></pre>
<p>This works fine when using the CLI as usual with command-line input: <code>script.py --example ab cd</code>.</p>
<p>I also want this to work with arguments that are passed to <code>parser.parse_args(args)</code> <a href="https://docs.python.org/3/library/argparse.html#args" rel="nofollow noreferrer">through the <code>args</code> argument</a> from within the program code.</p>
<p>But when I try to pass <code>parser.parse_args(["--example", "ab cd"])</code>, it's interpreted as single string <code>"ab cd"</code> and not as a list of <code>ab</code> and <code>cd</code>.</p>
<p>Similarly, passing <code>parser.parse_args(["--example", "ab", "cd"])</code> is somehow interpreted as single argument, which is a list. So, when accessing <code>args.example[0]</code> I get the list and <code>args.example[1]</code> gets me an error.</p>
</div>
<div class="post-text" itemprop="text">
<p>As your link shows, you can give <code>parse_args</code> a list of strings.</p>
<pre><code>In [210]: parser = argparse.ArgumentParser()
In [211]: parser.add_argument('-i','--image_types', nargs='*', default='');
</code></pre>
<p>To test parsing without any commandline arguments, by giving it an empty list:</p>
<pre><code>In [212]: parser.parse_args([])
Out[212]: Namespace(image_types='')
</code></pre>
<p>With a list of strings:</p>
<pre><code>In [213]: parser.parse_args(['-i','a','b'])
Out[213]: Namespace(image_types=['a', 'b'])
</code></pre>
<p>or split a string:</p>
<pre><code>In [214]: parser.parse_args('-i a b'.split())
Out[214]: Namespace(image_types=['a', 'b'])
</code></pre>
<p>Answers to <code>argparse</code> questions often use one of these forms to illustrate their actions.  The <code>split</code> is convenient.</p>
<p>It is also possible to create an <code>args</code> Namespace directly:</p>
<pre><code>In [215]: argparse.Namespace(image_types=['a','b','c'])
Out[215]: Namespace(image_types=['a', 'b', 'c'])
</code></pre>
<hr/>
<p>I don't follow your interpretation of the result for</p>
<pre><code>parser.parse_args(["--example", "ab", "cd"])
</code></pre>
<p>That should produce a <code>args.example</code> that is <code>["ab", "cd"]</code>.</p>
<p>This isn't a good test case:</p>
<pre><code>parser.parse_args(["--example", "ab cd"])
</code></pre>
<p>to produce the same thing from the commandline you'd have to use</p>
<pre><code>python --example "ab cd"
</code></pre>
<p>The quotes override the normal split on white space.  You have to use <code>shlex.split</code> to emulate that behavior.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is tricky for argparse to handle lists directly use a csv list instead:</p>
<pre><code>parser.add_argument('--image_types', \
  help='csv list of imagetypes', \
  default='iff,gif,jpeg,png', default=None)

if args.image_types:
  args.image_types = args.image_types.split(',')
</code></pre>
</div>
<span class="comment-copy">Your <code>add_argument</code> defines a <code>--image_types</code>, but the test examples use <code>--example</code>.  I'd prefer to see a print of the actual <code>args</code> Namespace, rather than your interpretation of it.</span>
<span class="comment-copy">Thanks your answer helped my debug my program and fix the error. It was actually not inside <code>argparse</code> but already before. I didn't pass the arguments to <code>parser.parse_args</code> correctly.</span>
<span class="comment-copy">Seems a bit like a hack, but I guess I'll fall back to this if there's no easier/more elegant option.</span>
