<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4736/learning-regular-expressions">Learning Regular Expressions [closed]</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I have this string:</p>
<pre><code>Sat Apr 18 23:22:15 PDT 2009
</code></pre>
<p>and I want to extract </p>
<pre><code>23
</code></pre>
<p>what should I have for it ? something like \d\w</p>
</div>
<div class="post-text" itemprop="text">
<p>Use datetime to parse datetime strings, then you can easily extract all the parts individually</p>
<pre><code>from datetime import datetime

dtime = datetime.strptime('%a %b %d %H:%M:%S %Z %Y', 'Sat Apr 18 23:22:15 PDT 2009')

hour = dtime.hour
year = dtime.year
# etc.
</code></pre>
<p>See <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">docs</a> for more details:</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>re.split</code> to split on either spaces or colons and grab the 4th element:</p>
<pre><code>import re

somedate = "Sat Apr 18 23:22:15 PDT 2009"

re.split('\s|\:', somedate)
['Sat', 'Apr', '18', '23', '22', '15', 'PDT', '2009']

hour = re.split('\s|\:', somedate)[3]
</code></pre>
<p>You could unpack it that way, as well:</p>
<pre><code>day_of_week, month, day_of_month, hour, minute, second, timezone, year = re.split('\s|\:', somedate)
</code></pre>
<p>That would allow you more access</p>
<p>Otherwise, I'd go with @liamhawkins suggestion of the datetime module</p>
<p>EDIT: If you're looking for similar access paradigms to <code>datetime</code> objects, you can use a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a> from the <code>collections</code> module:</p>
<pre><code>from collections import namedtuple

date_obj = namedtuple("date_obj", ['day_of_week', 'month', 'day_of_month', 'hour', 'minute', 'second', 'timezone', 'year'])

mydatetime = date_obj(*re.split('\s|\:', somedate))

hour = mydatetime.hour
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While this could be accomplished with <code>re</code>, the use of <code>datetime.strptime</code> in @liamhawkins answer [ <a href="https://stackoverflow.com/a/54600322/214150">https://stackoverflow.com/a/54600322/214150</a> ] would be preferred, assuming you are always dealing with formatted dates.</p>
<p>In addition, you could accomplish your goal by simply using a <code>string method</code> (<code>.split()</code>) and basic slicing of the resulting list. For example:</p>
<pre><code>import re

word = 'Sat Apr 18 23:22:15 PDT 2009'

# Example using re.
rehour = re.findall('(\d+):\d+:\d+', word)
print('rehour:', *rehour)

# Example using string.split() and slicing.
somedate = word.split(' ')
somehour = somedate[3][:2]
print('somedate:', somedate)
print('somehour:', somehour)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Hope this will find the date in string and returns date </p>
<p><code>def get_date(input_date):
    date_format = re.compile("[0-9]{2}:[0-9]{2}:[0-9]{2}")
    date_search =date.search(input_date)
    if date_search:
        date = date_search.group()
        if date:<br/>
            return date[:2]
    return ''</code></p>
</div>
<div class="post-text" itemprop="text">
<p>if it is truly just a string and the data you want will always be at the same position you could just do this.</p>
<pre><code>String = "Sat Apr 18 23:22:15 PDT 2009"
hour = String[11:13]
print(hour)
</code></pre>
<p>This returns,</p>
<pre><code>23
</code></pre>
<p>This works the same even if its from datetime or something.</p>
<p>If this is some other output from a function you can just convert it to a string and then extract the data the same way.</p>
<pre><code>hour = str(some_output)[11:13]
</code></pre>
<p>If however you are not sure the data you want will always be in the same place of the string then I would suggest the following.</p>
<pre><code>import re

somestring = "More text here Sat Apr 18 23:22:15 PDT 2009 - oh boy! the date could be anywhere in this string"

regex = re.search('\d{2}\:\d{2}\:\d{2}', somestring)
hour = regex.group()[:2]

print(hour)
</code></pre>
<p>the regex.group() is returning,</p>
<pre><code>23:22:15
</code></pre>
<p>And then [:2] is extracting the first two items to return,</p>
<pre><code>23
</code></pre>
</div>
<span class="comment-copy">Have you tried using <code>datetime</code>'s <code>strptime()</code>? <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">Is the string just a string, or are you using a function to get the string?</span>
<span class="comment-copy">just a string @TrooperZ</span>
<span class="comment-copy">You could always just string slice <code>value[11:13]</code> will yield <code>23</code> assuming you've defined the string as <code>value</code>. If you have an entire column of these strings in say a dataframe, you could make a new column <code>df['hour'] = df['value'][11:13]</code></span>
