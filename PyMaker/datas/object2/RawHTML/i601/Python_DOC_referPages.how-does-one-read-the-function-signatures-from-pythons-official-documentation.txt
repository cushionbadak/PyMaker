<div class="post-text" itemprop="text">
<p>If one browses through the <a href="https://docs.python.org/3/" rel="nofollow noreferrer">official Python docs</a>, one can see function (or class) signatures of varying kinds.   </p>
<p>For <a href="https://docs.python.org/3/library/random.html" rel="nofollow noreferrer">example</a></p>
<blockquote>
<p>random.uniform(a, b)</p>
</blockquote>
<p>is simple to understand: You pass it two objects <code>a</code> and <code>b</code> (that are floating point numbers and it returns a random number from the interval between them). Similarly simple to understand is the signature <a href="https://docs.python.org/3/library/ssl.html" rel="nofollow noreferrer">from</a></p>
<blockquote>
<p>SSLSocket.getpeercert(binary_form=False)</p>
</blockquote>
<p>where a default value for the argument is also specified, in case it's called without any argument.</p>
<hr/>
<p>But then there are also functions with really weird signatures <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer">like</a></p>
<blockquote>
<p>min(iterable, *[, key, default])</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/readline.html" rel="nofollow noreferrer">or</a></p>
<blockquote>
<p>readline.append_history_file(nelements[, filename])</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">or</a></p>
<blockquote>
<p>csv.register_dialect(name[, dialect[, **fmtparams]])</p>
</blockquote>
<p><strong>What do these all mean?</strong> Is there some reference guide explaining how to read things like <code>name[, dialect[, **fmtparams]]</code>?</p>
<p>These example were just randomly taken from the official Python docs and don't cover all signature types I've come across. I need a general explanation how to read these signatures.</p>
</div>
<div class="post-text" itemprop="text">
<p>The asterisk in the example below means that <em>key</em> and <em>default</em> are keyword only arguments:</p>
<blockquote>
<p>min(iterable, *[, key, default])</p>
</blockquote>
<p>Parameter in square brackets are optional, so below <em>filename</em> is optional:</p>
<blockquote>
<p>readline.append_history_file(nelements[, filename])</p>
</blockquote>
<p>Argument with a single asterisk mean that the function can have any number of <strong>positional</strong> arguments, for instance:</p>
<blockquote>
<p>a_function(a, b, *args)</p>
</blockquote>
<p>Argument with 2 asterisks mean that the function can have any number of <strong>keyword</strong> arguments, for instance:</p>
<blockquote>
<p>class dict(mapping, **kwarg)</p>
</blockquote>
<p>Everything is explained in the Python documentation: <a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">Function definitions</a></p>
</div>
<div class="post-text" itemprop="text">
<p><em>NB: I know this has been asked before but cannot find the dup so if someone does, please bip me and I'll delete my answer...</em> </p>
<p>This is mainly a <a href="http://matt.might.net/articles/grammars-bnf-ebnf/" rel="nofollow noreferrer">simplified EBNF notation</a>. <code>register_dialect(name[, dialect[, **fmtparams]])</code> means that the <code>register_dialect</code> functions takes a mandatory <code>name</code> argument, a facultative <code>dialect</code> argument and facultative arbitrary keyword arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p>A common notation is that square brackets <code>[]</code> represent <em>optional values</em>. I'm not sure where this originates from, it might be BNF grammar.</p>
<p><code>*</code> represents <em>any number of positional arugments</em>.
<code>**</code> represents <em>any number of keyword arugments</em>.</p>
<p><code>*</code> and <code>**</code> are legit python syntax. you can have a function signature looking like <code>func(*args)</code> for example. These are defined in the <a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">language reference</a>. An easier reading might be the <a href="https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow noreferrer">python tutorial</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Parameters in square bracket are optional. That means they have a default value which is used if you do not provide a value. If you read the function description, is usually explained.</p>
<p>When you have nested brackets, it means that the argument in the inner bracket cannot be provided if at least one of the arguments in the outer bracket is not provided. For example:</p>
<blockquote>
<p>csv.register_dialect(name[, dialect[, **fmtparams]])</p>
</blockquote>
<p>means that: <code>csv.register_dialect(name)</code> is valid, <code>csv.register_dialect(name, dialect)</code> is valid, <code>csv.register_dialect(name, dialect, **fmtparams)</code> is valid but <code>csv.register_dialect(name, **fmtparams)</code> is not valid.</p>
<p>* and ** are args and kwargs, <a href="https://stackoverflow.com/questions/36901/what-does-double-star-asterisk-and-star-asterisk-do-for-parameters">here</a> more reference on them.</p>
</div>
<span class="comment-copy">It seems first always come mandatory arguments, then optional ones, and inside each of these two cases we first list the "normal" ones, then the positional arguments and then the keyword arguments. Is that correct?</span>
<span class="comment-copy">Would <code>register_dialect(name[, **fmtparams[, dialect ]])</code> have also been an acceptalbe signature, or is the order important in some way?</span>
<span class="comment-copy">The order is "important in some way" indeed (even if a bit less in Python3). <code>dialect</code> is a positional parameter (you don't need to name it, just to pass it as the nth - here second - argument).</span>
<span class="comment-copy">plus1. Great mentioning the use of nested brackets!</span>
