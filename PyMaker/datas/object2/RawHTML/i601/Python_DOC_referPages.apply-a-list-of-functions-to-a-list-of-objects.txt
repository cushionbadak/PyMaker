<div class="post-text" itemprop="text">
<p>This comes up sometimes in R, which implies to me that there has to be a way to do this in Python. If I have a list of functions, say:</p>
<pre><code>functions = [lambda s: s + 'hi world', lambda s: s + '_(O.o)_']
</code></pre>
<p>and a list of inputs:</p>
<pre><code>inputs = ['Buy', 'use', 'break', 'fix', 'trash', 'melt']
</code></pre>
<p>How can I apply all of the functions provided to the list of inputs? List comprehensions, to me, seem to allow me to apply to the list one of the functions, but not both of them (without hard-coding the functions themselves into the code).</p>
<p>To clarify, the output I'm looking for in this case would be:</p>
<pre><code>output = ['Buyhi world_(O.o)_', 'usehi world_(O.o)_', 'breakhi world_(O.o)_' ...
</code></pre>
<p>In short, I'm trying to find a way to not have to write <code>[f1(f2(f3(i))) for i in inputs]</code>, but instead simply have a list of 'f's and applying them all to the inputs.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions" rel="noreferrer">nested list comprehension</a>:</p>
<pre><code>functions = [lambda s: s + 'hi world', lambda s: s + '_(O.o)_']
inputs = ['Buy', 'use', 'break', 'fix', 'trash', 'melt']

outputs = [func(ipt) for func in functions for ipt in inputs]
print(outputs)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['Buyhi world', 'usehi world', 'breakhi world', 'fixhi world', 'trashhi world', 'melthi world', 'Buy_(O.o)_', 'use_(O.o)_', 'break_(O.o)_', 'fix_(O.o)_', 'trash_(O.o)_', 'melt_(O.o)_']
</code></pre>
<p><strong>UPDATE</strong></p>
<p>Given the update on your question, you can use reduce:</p>
<pre><code>from functools import reduce

functions = [lambda s: s + 'hi world', lambda s: s + '_(O.o)_']
inputs = ['Buy', 'use', 'break', 'fix', 'trash', 'melt']

outputs = [reduce(lambda x, f: f(x), functions, ipt) for ipt in inputs]
print(outputs)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['Buyhi world_(O.o)_', 'usehi world_(O.o)_', 'breakhi world_(O.o)_', 'fixhi world_(O.o)_', 'trashhi world_(O.o)_', 'melthi world_(O.o)_']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With this particular example of functions, you can try a combination of <code>functools.reduce</code> and list comprehension:</p>
<pre><code>from functools import reduce
functions = [lambda s: s + 'hi world', lambda s: s + '_(O.o)_']
inputs = ['Buy', 'use', 'break', 'fix', 'trash', 'melt']

[reduce(lambda inp, f: f(inp), functions, i) for i in inputs]

# ['Buyhi world_(O.o)_', 'usehi world_(O.o)_', 'breakhi world_(O.o)_', 'fixhi world_(O.o)_', 'trashhi world_(O.o)_', 'melthi world_(O.o)_']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is probably not the most efficient way to do it. I learned Java first, so loops (or streams) feel intuitive. However that is, the following yields the answer.</p>
<pre><code>functions = [lambda s: s + 'hi world', lambda s: s + '_(O.o)_']
inputs = ['Buy', 'use', 'break', 'fix', 'trash', 'melt']

for i, the_input in enumerate(inputs):
    for f in functions:
        the_input = f(the_input)  # keep answer between loops

    inputs[i] = the_input  # overwrite start value (could use a list and append)

print(inputs)

#['Buyhi world_(O.o)_',
# 'usehi world_(O.o)_',
# 'breakhi world_(O.o)_',
# 'fixhi world_(O.o)_',
# 'trashhi world_(O.o)_',
# 'melthi world_(O.o)_']
</code></pre>
</div>
<span class="comment-copy">Can the outputs of those functions be chained together?</span>
<span class="comment-copy">Yes you can, give me a sec</span>
<span class="comment-copy">@ifly6 Updated the answer!</span>
<span class="comment-copy">beat me to it :)</span>
<span class="comment-copy">Same @Idlehands nice! +1</span>
