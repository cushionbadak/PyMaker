<div class="post-text" itemprop="text">
<p>I am using <code>to_csv()</code> method to write my data frame into a <strong>.csv</strong> file. I have a variable called <code>emotion</code> which refers to a data frame, and I am using <code>to_csv()</code> like this;</p>
<pre><code> emotion.to_csv(file_name,encoding='utf-8', index = False) 
 # file_name holds a string of a full path of the file which is intended to create
</code></pre>
<p>There are over 15.000 rows of data in this data frame, and when I open to check the .csv file which is created by <code>to_csv</code> method, most of the rows look fine. But there are few exceptions. You can see a chunk of rows from the <strong>.csv</strong> file below;</p>
<blockquote>
<p>2.8641,0.2737,38.18,73,97,291664
  3.1672,0.2688,38.21,73,97,291667
  3.4115,0.2786,38.11,73,97,291672
  3.3675,0.2737,38.18,73,97,291675
  <strong>3.1719999999999997</strong>,0.2737,38.02,73,97,291678
  2.7761,0.2737,38.15,73,97,291682
  2.39,0.2688,38.18,73,97,291685
  2.0674,0.2835,38.11,73,97,291688</p>
</blockquote>
<p>As I pointed out above with the <strong>bold</strong> font on the dataframe values, <strong>3.1719999999999997</strong> has an additional fractions. In the original data, it should be something like <strong>3.171</strong>. Could you help me to overcome this problem? Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_csv.html" rel="nofollow noreferrer">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_csv.html</a></p>
<p><em>to_csv</em> has this nice <em>float_format</em> keyword argument that you can set.</p>
<pre><code>emotion.to_csv(file_name, encoding='utf-8', index=False, float_format="%.3f") 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is probably a cast made by pandas when extracting the values from your csv.
If you want to limit the numbers of digits displayed by the dataframe you can use:</p>
<pre><code> pd.options.display.float_format = '${:,.3f}'.format
</code></pre>
<p>This will limit the numbers of digits to 3.</p>
</div>
<span class="comment-copy">When handling floating points, you will often see these small differences. The precision of your CPU is limited. See <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/floatingpoint.html</a> for info.</span>
<span class="comment-copy">I edited my code with your advice, but it didn't affect the output. There are still some values with long fractions.</span>
<span class="comment-copy">Actually when I tried it again, I figured out that all of the floated numbers were restricted by 3 fractions. But I catched few exceptions, it looks kinda a leakage, because these values which did not obey to the float_format restriction are also looking like they are not belong to that row. I am pretty confused how it could happen.</span>
<span class="comment-copy">Anyways, I think it works pretty well. Thank you so much.</span>
<span class="comment-copy">Will it limit the numbers for the .csv file as well?</span>
<span class="comment-copy">This will change <b>all</b> pandas output, not just the csv export.</span>
