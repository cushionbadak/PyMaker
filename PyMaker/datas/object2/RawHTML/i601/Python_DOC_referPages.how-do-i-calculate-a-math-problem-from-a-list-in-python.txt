<div class="post-text" itemprop="text">
<p>I have a list in python that looks something like this:</p>
<pre><code>list = [5, "-", 4, "*", 8]
</code></pre>
<p>I would like to calculate the math problem in the list so:</p>
<pre><code>anwser = 5 - 4 * 8
</code></pre>
<p>So the variable "anwser" is -27.</p>
</div>
<div class="post-text" itemprop="text">
<p>This will work: </p>
<pre><code>eval(''.join([str(x) for x in list]))
</code></pre>
<p>But <a href="https://stackoverflow.com/questions/1832940/why-is-using-eval-a-bad-practice">be careful</a> using <code>eval</code>!</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what you call a Infix notation (<a href="https://en.wikipedia.org/wiki/Infix_notation" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Infix_notation</a>)</p>
<p>You can use a stack to evaluate it. I found a gist here which might help (<a href="https://gist.github.com/nava45/6333409#file-infix-expression-evaluation" rel="nofollow noreferrer">https://gist.github.com/nava45/6333409#file-infix-expression-evaluation</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Evaluating an equation with priority of operations requires a parser.</p>
<p>Fortunately, writing a parser for basic arithmetic, that is addition and multiplication, can be achieved fairly simply without the use of parsing tools.</p>
<h2>Code</h2>
<pre><code>import operator

ops = {
    '-': operator.sub,
    '+': operator.add,
    '*': operator.mul,
    '/': operator.truediv
}

def parse_mult(equation):
    equation = iter(equation)
    value = next(equation)
    for token in equation:
        if token == '*' or token == '/':
            op = ops[token]
            value = op(value, next(equation))
        else:
            yield value
            yield token
            value = next(equation)
    yield value

def parse(equation):
    equation = parse_mult(equation)
    value = next(equation)
    for token in equation:
        op = ops[token]
        value = op(value, next(equation))
    return value
</code></pre>
<h2>Example</h2>
<pre><code>equation_list = [5, "-", 4, "*", 8]
print(parse(equation_list))
</code></pre>
<h2>Output</h2>
<pre><code>-27
</code></pre>
<p>If you ever need to parse equations with more than two levels of priority, than an external parsing tool may become necessary.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/26505420/evaluate-math-equations-from-unsafe-user-input-in-python">Evaluate math equations from unsafe user input in Python</a></span>
<span class="comment-copy"><b>DO NOT</b> use <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval()</code></a> for this - it's dangerous and prone to errors.</span>
<span class="comment-copy">Parse it into an expression tree. Walk the tree and evaluate.  The answer could also be 8, depending on how to implement precedence rules.</span>
