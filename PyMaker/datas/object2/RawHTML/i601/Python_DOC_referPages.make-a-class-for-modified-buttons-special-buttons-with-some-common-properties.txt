<div class="post-text" itemprop="text">
<p>My code is:</p>
<pre><code>from Tkinter import *

admin = Tk()
def button(an):
    print an
    print 'het'

b = Button(admin, text='as', command=button('hey'))
b.pack()
mainloop()
</code></pre>
<p>The button doesn't work, it prints 'hey' and 'het' once without my command, and then, when I press the button nothing happens.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>command</code> option takes a reference to a function, which is a fancy way of saying you need to pass it the name of the function. When you do <code>command=button('hey')</code> you are calling the function <code>button</code>, <em>and the result of that is being given to the <code>command</code> option</em>. </p>
<p>To pass a reference you must use the name only, without using parenthesis or arguments. For example:</p>
<pre><code>b = Button(... command = button)
</code></pre>
<p>If you want to pass a parameter such as "hey" you must use a little extra code:</p>
<ul>
<li>You can create an intermediate function that can be called without your argument and which then calls your <code>button</code> function, </li>
<li>You can use <code>lambda</code> to create what is referred to as an <em>anonymous function</em>. In every way it's a function except it doesn't have a name. When you call the <code>lambda</code> command it returns a <em>reference</em> to the created function, which means it can be used for the value of the <code>command</code> option to the button.</li>
<li>You can use <a href="https://docs.python.org/2/library/functools.html#functools.partial" rel="nofollow noreferrer">functools.partial</a></li>
</ul>
<p>For me, <code>lambda</code> is the simplest since it doesn't require any additional imports like <code>functools.partial</code> does, though some people think that <code>functools.partial</code> is easier to understand.</p>
<p>To create a lambda function that calls your <code>button</code> function with an argument you would do something like this:</p>
<pre><code>lambda: button('hey')
</code></pre>
<p>You end up with a function that is functionally equivalent to:</p>
<pre><code>def some_name():
    button('hey')
</code></pre>
<p>As I said earlier, <code>lambda</code> returns a reference to this nameless function. Since a reference is what the <code>command</code> option expects you can use <code>lambda</code> directly in the creation of the button:</p>
<pre><code>b = Button(... command = lambda: button('hey'))
</code></pre>
<p>There's a question on this site that has a lot of interesting comments about lambda, in general. See the question <a href="https://stackoverflow.com/questions/890128/why-python-lambdas-are-useful">Why Python lambdas are useful?</a>. That same discussion has <a href="https://stackoverflow.com/questions/890128/python-lambda-why/5771855#5771855">an answer that shows how to use lambdas in a loop</a> when you need to pass in a variable to the callback. </p>
<p>Finally, see the section titled <a href="http://effbot.org/zone/tkinter-callbacks.htm" rel="nofollow noreferrer">Tkinter Callbacks on effbot.org</a> for a nice tutorial. The coverage of lambda is pretty lean but the information there might still be useful.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to create a function without parameters that you can use as the command:</p>
<pre><code>b = Button(admin, text='as', command=lambda: button('hey'))
</code></pre>
<p>See the "Passing Argument to Callbacks" section of <a href="http://effbot.org/zone/tkinter-callbacks.htm" rel="noreferrer">this document</a>.</p>
</div>
<div class="post-text" itemprop="text">
<h1>Example GUI:</h1>
<p>Let's say I have the GUI:</p>
<pre><code>import tkinter as tk

root = tk.Tk()

btn = tk.Button(root, text="Press")
btn.pack()

root.mainloop()
</code></pre>
<h1>What Happens When a Button Is Pressed</h1>
<p>See that when <code>btn</code> is pressed it calls <em>its own</em> function which is very similar to <code>button_press_handle</code> in the following example:</p>
<pre><code>def button_press_handle(callback=None):
    if callback:
        callback() # Where exactly the method assigned to btn['command'] is being callled
</code></pre>
<p>with:</p>
<pre><code>button_press_handle(btn['command'])
</code></pre>
<p>You can simply think that <code>command</code> option should be set as, the reference to the method we want to be called, similar to <code>callback</code> in <code>button_press_handle</code>.</p>
<hr/>
<h1>Calling a Method(<a href="https://stackoverflow.com/questions/824234/what-is-a-callback-function">Callback</a>) When the Button is Pressed</h1>
<p><strong><em>Without</em> arguments</strong> </p>
<p>So if I wanted to <code>print</code> something when the button is pressed I would need to set:</p>
<pre><code>btn['command'] = print # default to print is new line
</code></pre>
<p>Pay close attention to the <em>lack</em> of <code>()</code> with the <code>print</code> method which is omitted in the meaning that: <em>"This is the method's name which I want you to call when pressed <strong>but</strong> don't call it just this very instant."</em> However, I didn't pass any arguments for the <code>print</code> so it printed whatever it prints when called without arguments.</p>
<p><strong><em>With</em> Argument(s)</strong></p>
<p>Now If I wanted to also pass arguments to <em>the method I want to be called</em> when the button is pressed I could make use of the anonymous functions, which can be created with <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="noreferrer">lambda</a> statement, in this case for <code>print</code> built-in method, like the following:</p>
<pre><code>btn['command'] = lambda arg1="Hello", arg2=" ", arg3="World!" : print(arg1 + arg2 + arg3)
</code></pre>
<hr/>
<h1>Calling <em>Multiple</em> Methods when the Button Is Pressed</h1>
<p><strong><em>Without</em> Arguments</strong></p>
<p>You can also achieve that using <code>lambda</code> statement but it is considered bad practice and thus I won't include it here. The good practice is to define a separate method, <code>multiple_methods</code>, that calls the methods wanted and then set it as the callback to the button press:</p>
<pre><code>def multiple_methods():
    print("Vicariously") # the first inner callback
    print("I") # another inner callback
</code></pre>
<p><strong><em>With</em> Argument(s)</strong></p>
<p>In order to pass argument(s) to method that calls other methods, again make use of <code>lambda</code> statement, but first:</p>
<pre><code>def multiple_methods(*args, **kwargs):
    print(args[0]) # the first inner callback
    print(kwargs['opt1']) # another inner callback
</code></pre>
<p>and then set:</p>
<pre><code>btn['command'] = lambda arg="live", kw="as the" : a_new_method(arg, opt1=kw)
</code></pre>
<hr/>
<h1>Returning Object(s) From the Callback</h1>
<p>Also further note that <code>callback</code> can't really <code>return</code> because it's only called inside <code>button_press_handle</code> with <code>callback()</code> as opposed to <code>return callback()</code>. It does <code>return</code> but <em>not</em> anywhere outside that function. Thus you should rather <em>modify</em> object(s) that are accessible in the current scope.</p>
<hr/>
<h1>Complete Example with <a href="https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python" rel="noreferrer">global</a> Object Modification(s)</h1>
<p>Below example will call a method that changes <code>btn</code>'s text each time the button is pressed:</p>
<pre><code>import tkinter as tk

i = 0
def text_mod():
    global i, btn           # btn can be omitted but not sure if should be
    txt = ("Vicariously", "I", "live", "as", "the", "whole", "world", "dies")
    btn['text'] = txt[i]    # the global object that is modified
    i = (i + 1) % len(txt)  # another global object that gets modified

root = tk.Tk()

btn = tk.Button(root, text="My Button")
btn['command'] = text_mod

btn.pack(fill='both', expand=True)

root.mainloop()
</code></pre>
<hr/>
<p><a href="https://stackoverflow.com/a/47996979/7032856">Mirror</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The engine evaluates the result of the function when it is assigning the value at the line "... command = ..."</p>
<p>The "command" expects a function to be returned, that's why using a lambda can do the job because it is creating an anomymous function that is returned to the "command" during evaluation. 
You can also code your own function, it will do the job also.</p>
<p>this is an example with lambda and without lambda:</p>
<pre><code>#!/usr/bin/python
# coding=utf-8

from Tkinter import *
# Creation de la fenÃªtre principale (main window)
Mafenetre = Tk()
res1 = StringVar()
res2 = StringVar()

def isValidInput(obj):
    if hasattr(obj, 'get') and callable(getattr(obj, 'get')):
        return TRUE
    return FALSE


# stupid action 2 (return 12 on purpose to show potential mistake)
def action1(*arguments):
    print "action1 running"
    for arg in arguments:
        if isValidInput(arg):
            print "input value: ", arg.get()
            res1.set(arg.get())
        else:
            print "other value:", arg
    print "\n"
    return 12


# stupid action 2
def action2(*arguments):
    print "action2 running"
    a = arguments[0]
    b = arguments[1]
    if isValidInput(a) and isValidInput(b):
        c = a.get() + b.get()
        res2.set(c)
        print c
    print "\n"


# a stupid workflow manager ordered by name
def start_tasks(*arguments, **keywords):
    keys = sorted(keywords.keys())
    for kw in keys:
        print kw, "plugged "
        keywords[kw](*arguments)


# valid callback wrapper with lambda
def action1_callback(my_input):
    return lambda args=[my_input]: action1(*args)


# valid callback wrapper without lambda
def action1_callback_nolambda(*args, **kw):
    def anon():
        action1(*args)
    return anon


# first input string
input1 = StringVar()
input1.set("delete me...")
f1 = Entry(Mafenetre, textvariable=input1, bg='bisque', fg='maroon')
f1.focus_set()
f1.pack(fill="both", expand="yes", padx="5", pady=5)

# failed callback because the action1 function is evaluated, it will return 12. 
# in this case the button won't work at all, because the assignement expect a function 
# in order to have the button command to execute something
ba1 = Button(Mafenetre)
ba1['text'] = "show input 1 (ko)"
ba1['command'] = action1(input1)
ba1.pack(fill="both", expand="yes", padx="5", pady=5)

# working button using a wrapper
ba3 = Button(Mafenetre)
ba3['text'] = "show input 1 (ok)"
# without a lambda it is also working if the assignment is a function
#ba1['command'] = action1_callback_nolambda(input1)
ba3['command'] = action1_callback(input1)
ba3.pack(fill="both", expand="yes", padx="5", pady=5)

# display result label
Label1 = Label(Mafenetre, text="Action 1 result:")
Label1.pack(fill="both", expand="yes", padx="5", pady=5)
# display result value
resl1 = Label(Mafenetre, textvariable=res1)
resl1.pack(fill="both", expand="yes", padx="5", pady=5)


# second input string
input2 = StringVar()
f2 = Entry(Mafenetre, textvariable=input2, bg='bisque', fg='maroon')
f2.focus_set()
f2.pack(fill="both", expand="yes", padx="5", pady=5)

# third test without wrapper, but making sure that several arguments are well handled by a lambda function
ba2 = Button(Mafenetre)
ba2['text'] = "execute action 2"
ba2['command'] = lambda args=[input1, input2], action=action2: start_tasks(*args, do=action)
ba2.pack(fill="both", expand="yes", padx="5", pady=5)

# display result label
Label2 = Label(Mafenetre, text="Action 2 result:")
Label2.pack(fill="both", expand="yes", padx="5", pady=5)
# display result value
resl2 = Label(Mafenetre, textvariable=res2)
resl2.pack(fill="both", expand="yes", padx="5", pady=5)

Mafenetre.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>button('hey')</code> invokes the function, rather than setting it as a callback.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is my solution:</p>
<pre class="lang-py prettyprint-override"><code>from tkinter import *

admin = Tk()
def button(an):
    print(an)
    print("het")

def param():
    button("hey")
button1 = Button(admin, text = "press", command = param)
button1.pack()
</code></pre>
<p>Basically what we are doing is we are defining function with parameter, then calling it inside a function without parameters. </p>
</div>
<div class="post-text" itemprop="text">
<p>Don't use any keyword or argument as input or parenthesis for your function.
That's  a  very easy solution.  </p>
</div>
<span class="comment-copy">@Aran-Fay Why did you add a 300 point bounty to this very very common question that is already well answered?</span>
<span class="comment-copy">@Aran-Fey I wonder the same thing as Mike, but I really appreciate your gesture. I've noticed you've awarded several bounties to answers that you think deserve more credid. That's just awesome!!!</span>
<span class="comment-copy">@Mike-SMT That's exactly why. I want to reward people for posting good answers to common questions - especially if the questions are easy. Many people post half-baked, unmotivated answers to easy questions. I want people to realize that you don't have to be a programming expert to write outstanding answers.</span>
<span class="comment-copy">@Aran-Fey Hats off to you!</span>
<span class="comment-copy">so how would you fix it?</span>
<span class="comment-copy">Sorry for not replying; I don't remember seeing your comment in my inbox.</span>
