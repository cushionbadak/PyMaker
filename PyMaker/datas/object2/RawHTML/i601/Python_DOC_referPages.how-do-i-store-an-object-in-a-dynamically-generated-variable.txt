<div class="post-text" itemprop="text">
<p>I have a text file with a series of clients.
Each line has a different client.
Each client has an ID, a username, and a password.</p>
<p>I want to create a "Client" class, and generate objects in that class in a loop.
Each object would have a username and a password, and would be stored in a variable that contains the client's ID.
Client 1 would be stored in "client_1", Client 2 would be stored in "client_2", etc.</p>
<p>I created the method "read()" that opens the text file, breaks if there are empty lines, and retrieves the ID, username and password for each client (each line).</p>
<p>What I can't figure out, is how to make it so that when the client's ID is "1", I create an object for that client and store it in the variable "client_1".
When the client's ID is "2", I store client's 2 object in the variable "client_2", and so on.</p>
<p>But I want to do this automatically, instead of having 9000 clients and having to create 9000 variables myself.</p>
<p>Thanks</p>
<pre><code>class Client:

    def __init__(self, username, password):
        self.username = username
        self.password = password

    def read(self):
        clients = []
        with open("Clients.txt", "r") as file:
            lines = file.readlines()
            for line in lines:
                if not line:
                    break
                else:
                    client = line.split(" | ")
                    client_id = client[0]
                    #How do I create the variable "client_client[0]"?
                    username = client[1]
                    pre_password = client[2]
                    password = pre_password.strip("\n")
                    #client_client[0] = Client(username, password)
                    clients.append(#client_client[0])
            return clients
</code></pre>
<p>My text file (ID, username, password - from left to right):</p>
<pre><code>1 | admin | Z9?zzz
2 | John | J1!jjj
3 | Steve | S1!sss
</code></pre>
<p>Also, is there a problem if I'm using the "username" and "password" variables in read(), when I have already used them in the def <strong>init</strong>?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<h3>Advices</h3>
<ul>
<li><p>In your loop, you are using <code>break</code>. Don't do that, what you want to use is <code>continue</code> that will <em>skip</em> this iteration instead of get you out of it.</p></li>
<li><p>You are only using <code>strip('\n')</code> on your password. You should do it on all items (to make sure they are all uniform). But you were right to use <code>strip('\n')</code> only on the password case because it's the only one that has <code>\n</code>. Don't put argument into <code>strip()</code> and it will take care of all the spaces, tabs, and other <code>\n</code>, <code>\r</code> and such.</p></li>
<li><p>You should see the <code>self</code> parameter of a class as a <code>box</code> that lives inside it. It's the <em>"environement"</em> you can basically access everywhere inside your class. And if you create something inside <code>self</code>, such as <code>self.client</code>, it will not be the same as a single variable named <code>client</code>. What you probably wanted to do here is assign your client list you just read to the <code>self</code>, such as <code>self.client_list = self.read()</code>.</p></li>
</ul>
<h3>About your program</h3>
<p>What you need to do is not <strong>create as many variables as there are users</strong>. But you are right in the philosophy, you want to have them stored in one place. And that's what you did. Now, the point of your program is still obscure to us. But what you probably want to do is :</p>
<ol>
<li><p>Have a <em>database</em> in which <strong>you</strong> know how items are ordered. You know that in each element of your users_list, you have the first item that is an <code>id</code>, the second its <code>name</code> and the third its <code>password</code>.</p></li>
<li><p>Make operations based on this <em>database</em>. </p>
<ul>
<li>You want to "load" a client, check if he exists in your database, and match the password he entered with the one you have linked to it !</li>
<li>You want to delete one ?</li>
<li>Order an ice cream for someone already logged ?</li>
</ul></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Don't create variables dynamically! Instead use Python's built-in dictionary object, which allows you to look values up by key.</p>
<pre><code>class Client:

    def __init__(self, username, password):
        self.username = username
        self.password = password

def read(file):
    clients = {}
    for line in file:
        if not line:
            continue  # allows blank lines anywhere
        else:
            id, name, password = line.split(" | ")
            password = password.strip("\n")
            clients[id] = Client(name, password)
    return clients

if __name__ == '__main__':
    data = """\
1 | admin | Z9?zzz
2 | John | J1!jjj
3 | Steve | S1!sss
"""
    from io import StringIO
    with StringIO(data) as file:
        clients = read(file)
    for id, client in clients.items():
        print(id, client.username, client.password)
</code></pre>
<p>It was somewhat confusing to have the <code>read</code> function as a method of the class, since calling it then required you to create a <code>Client</code> instance in order to call it. An alternative was to recast it as a <code>classmethod</code>, but that over-complicates things, so it made more sense as a simple function. Instead of returning a list it returns a dictionary of <code>Client</code>s, each keyed on its respective <code>id</code>.</p>
<p>I've simplified the processing somewhat (though there is still no error handling), and made the loop more robust to blank lines.</p>
<p>I also added a little bit of test code to allow you to verify that the clients have been correctly created from your test data, and to make your class and function <code>import</code>able should you choose. Replace <code>with StringIO(data) as file:</code> with <code>with open("Clients.txt") as file:</code> to use a real data file instead. </p>
</div>
<div class="post-text" itemprop="text">
<p>What is wrong with the list of clients that you already have? You can access the clients as <code>clients[0]</code>, <code>clients[1]</code> and so forth. The list is the abstraction for arbitrary many variables. The lists are 0-indexed, so the first element has index <code>0</code>. This can be confusing, especially since some languages like R, FORTRAN or Wolfram Language are 1-indexed. I do not consider that a fundamental problem, you just have to be clear about it. If it really bothers you, you could use a <code>dict</code> with numeric indices and just map whatever index you want to a customer.</p>
<p>Also I would make <code>read_clients</code> a free function. It does not use anything except the public API of the <code>Client</code> class to function. Therefore it should not be a member function. But if you want to have it in that class, make it a <code>@staticmethod</code> at least because it is not tied to one particular <code>Client</code>.</p>
<p>What I mean with public API: Every class that you write has public methods and private methods. In Python there are no access specifiers, but the convention is that methods starting with an underscore (<code>_</code>) are not be used externally. The ones with two underscores (like <code>__init__</code>) are also not to be called directly but are called by syntactic sugar. You want to have focused methods (<a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">SRP</a>), so have the least amount of public functions possible. Also consider this: Say somebody wants to use your <code>Client</code> class to read a different file format with usernames and passwords. That person would have to <em>modify your</em> code in order to add another <code>read</code> method. But if the <code>read_clients</code> function was external and just used the <code>__init__</code> of your <code>Client</code> class, that somebody could just <em>add</em> a new free function somewhere. This is the <a href="https://en.wikipedia.org/wiki/Open/closed_principle" rel="nofollow noreferrer">OCP</a>.</p>
<p>And <code>Client</code> could be just a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>collections.NamedTuple</code></a>. So like this:</p>
<pre><code>import collections

Client = collections.namedtuple('Client', ['username', 'password'])

def read_clients(filename):
    clients = []

    # open file
        # loop over all lines in the list
            # Parse the username and password.
            username = # …
            password = # …
            client = Client(username, password)
            clients.append(client)

    return clients
</code></pre>
<p>You do not have to define the class <code>Client</code> yourself, and all <code>Client</code> objects (say <code>client</code>) will have the attributes <code>client.username</code> and <code>client.password</code>.</p>
<p>Using <code>password</code> and <code>username</code> is not a problem because the parameter of <code>__init__</code> are in a different scope. The members of your class can only be accessed via <code>self.</code>, so that is not a problem either.</p>
<p>If you <em>really</em> wanted to dynamically create variables, there are ways to do so, <a href="https://stackoverflow.com/questions/4010840/generating-variable-names-on-fly-in-python">see here</a>. But again you want to abstract away the actual number of clients and that is what the list is for.</p>
</div>
<span class="comment-copy">Why not make a list of Client objects?</span>
<span class="comment-copy">@user2229219 Isn't that what I'm doing? I created the empty list "clients", and after creating each object, I'm appending it to that list. At the end of "read()" I return the list. Could you elaborate? Thanks.</span>
<span class="comment-copy">The <code>read</code> function looks fine, your use of the list seems like the obvious correct way to do it. See my answer.</span>
<span class="comment-copy">If I used the list, could I use class methods? I don't know. Also, client 1 would be in clients[0] and client 2 would be in clients[1]. Wouldn't this bring problems? I'm also googling "Python public API" and "staticmethods", because honestly I don't know what that is. I also don't understand what you mean by collections.namedtuple. I still have a lot to learn, but thanks!</span>
<span class="comment-copy">@AntónioGonçalves: I have expanded my answer and tried to address all the points in your comment.</span>
