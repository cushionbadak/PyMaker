<div class="post-text" itemprop="text">
<p>I have looked online on how to write a if in range statement in python and I am confused why my print statement is not showing up.</p>
<pre><code>print("Hello User What Is The Wind Chill Today?")
windChill = int(input())

if windChill &lt;= -25:
    print("No School!!!")

if windChill &gt;= 0:
    print("Theres School ):")

if int(windChill) in range(-1, -24):
    print("Maybe school")
</code></pre>
<p>The expected result is that if I put in the input -20 it will say "Maybe school" but right now it is not showing the print statement when I put in a number through -1 to -24.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python's <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">range</a> function increments in values of 1. The first argument in <code>range</code> is <code>start</code> the second is <code>stop</code> and a 3'rd <em>(optional)</em> argument is <code>step</code> which is what it increments by. You have 2 options here. </p>
<p><strong>Either start from the lower number and stop at the higher</strong>:</p>
<pre><code>if int(windChill) in range(-24, -1):
</code></pre>
<p><strong>Or keep what you have but tell <code>range</code> to increment by -1</strong>:</p>
<pre><code>if int(windChill) in range(-1, -24, -1):
</code></pre>
<p>Both the above will accomplish the same result for you, although just fyi they both will result in reversed list's of eachother if you run <code>list()</code> on them</p>
<pre><code>print(list(range(-24, -1)))
#[-24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2]

print(list(range(-1, -24, -1)))
#[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23]
</code></pre>
<p><strong>Edit</strong></p>
<p>If you dig deeper, the ranges are determined using the following formulas:</p>
<blockquote>
<p>For a positive step, the contents of a range <code>r</code> are determined by the
  formula <code>r[i] = start + step*i</code> where <code>i &gt;= 0</code> and <code>r[i] &lt; stop</code>.</p>
<p>For a negative step, the contents of the range are still determined by
  the formula <code>r[i] = start + step*i</code>, but the constraints are <code>i &gt;= 0</code> and
  <code>r[i] &gt; stop</code>.</p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#typesseq-range" rel="nofollow noreferrer">Reference</a></p>
</blockquote>
<p>So in essence, <code>range</code> is actually excluding the stop value in my examples <em>(respectively <code>-1</code> and <code>-24</code>)</em> so be sure to take this into account. Use</p>
<pre><code>if int(windChill) in range(-24, 0):
#or
if int(windChill) in range(-1, -25, -1):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Your range function is backwards. But you do not need to include the last if condition if you use the if - elif- else syntax.</strong> </p>
<p><strong>You should be using an if - elif- else statement here like below:</strong></p>
<pre><code>print("Hello User What Is The Wind Chill Today?")
windChill = int(input())

if windChill &lt;= -25:
    print("No School!!!")

elif windChill &gt;= 0:
    print("Theres School ):")

else:
    print("Maybe school")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>range</code> command is backwards, it should go from the smallest (most negative) number to the largest. If you want a range from -1 to -24, you should do <code>range(-24, -1)</code></p>
</div>
<span class="comment-copy"><code>range</code> naturally increments in <code>+1</code> unless specified otherwise. In this case, that's an empty range because there are no number of <code>1</code>s you can add to <code>-1</code> to get to <code>-24</code>. You need it to decrement: <code>if int(windChill) in range(-1, -24, -1):</code></span>
<span class="comment-copy">you need to use <code>range(-24, -1)</code> <code>-24</code> is lower than <code>-1</code>. Or see @roganjosh's comment</span>
<span class="comment-copy">If-elif-else would be the more pythonic syntax to use here. There can be unintended consequences if you are using 3 if statements in that is the syntax you use for conditional checking using python</span>
<span class="comment-copy">It's probably worth pointing out that <code>range</code> stops short of the second argument, so both of the above include a boundary error.</span>
<span class="comment-copy">You're right, thanks!</span>
<span class="comment-copy">@CraigMeier I edited my answer</span>
<span class="comment-copy">That's not the issue at all. All of the <code>if</code> conditions will be evaluated. The fact is, their last condition is an empty range unless they create a step of -1.</span>
<span class="comment-copy">Also not true, it's perfectly fine for <code>range</code> to decrement, though it <i>is</i> more understandable if it increments</span>
<span class="comment-copy">@roganjosh <code>range</code> <i>can</i> decrement, but it won't by default. Without passing in a negative step, <code>range(x, y)</code> will not yield anything if <code>y &lt;= x</code></span>
<span class="comment-copy">@CraigMeier which is precisely what I said on my first comment under the question.</span>
