<div class="post-text" itemprop="text">
<p>I'm writing a piece of code that needs to perform a function round-robin style for all keys/values in a dict. </p>
<p>To simplify the problem, I have a dict:</p>
<p><code>my_dict = {a: [1,2,3,4,5], b: [5,4,3,2,1], c: [2,4,3,5,1], d: [5,1,4,2,3]}</code></p>
<p>And I would like to call a function that takes each key value as input against every other key:</p>
<p>(The function will output an integer.)</p>
<pre><code>x1 = my_func(my_dict[a], my_dict[b])
x2 = my_func(my_dict[a], my_dict[c])
x3 = my_func(my_dict[a], my_dict[d])
x4 = my_func(my_dict[b], my_dict[c])
x5 = my_func(my_dict[b], my_dict[d])
x6 = my_func(my_dict[c], my_dict[d])
</code></pre>
<p>And save the results:</p>
<pre><code>result_dict = {a:{b:x1, c:x2, d:x3 }, b:{a:x1, c:x4, d:x5}, c:{a:x2, b:x4, d:x6}, d:{a:x3, b:x5, c:x6}}
</code></pre>
<p>I have tried multiple for loops but am going in circles:</p>
<pre><code>my_dict = {1: [1,2,3,4,5], 2: [5,4,3,2,1], 3: [2,4,3,5,1], 4: [5,1,4,2,3]}

output_dict = {}
for key in my_dict:
    for next_key in my_dict:
        output_dict[key] = {next_key: my_func(my_dict[key],my_dict[next_key])}

print(output_dict)
</code></pre>
<p>Thank you for your time.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a> and <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a>:</p>
<pre><code>from collections import defaultdict
from itertools import combinations

out_dict = defaultdict(dict)
for x, y in combinations(my_dict.keys(), 2):
    result = my_func(my_dict[x], my_dict[y])
    out_dict[x][y] = result
    out_dict[y][x] = result
</code></pre>
<p>Suppose you have a <code>my_func</code> that adds the first index of both lists together:</p>
<pre><code>def my_func(x, y):
    return x[0] + y[0]
</code></pre>
<p>Your result would be:</p>
<pre><code>defaultdict(&lt;class 'dict'&gt;, {
    'a': {'b': 6, 'c': 3, 'd': 6},
    'b': {'a': 6, 'c': 7, 'd': 10},
    'c': {'a': 3, 'b': 7, 'd': 7},
    'd': {'a': 6, 'b': 10, 'c': 7}
})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can slightly modify your loop and turn it to a dictionary-comprehension to work like the way you need:</p>
<pre><code>my_dict = {1: [1,2,3,4,5], 2: [5,4,3,2,1], 3: [2,4,3,5,1], 4: [5,1,4,2,3]}

output_dict = {}
for key in my_dict:
    output_dict[key] = {next_key: my_func(my_dict[key], my_dict[next_key]) for next_key in my_dict if key != next_key}

print(output_dict)
</code></pre>
<p>Shamelessly taken from another answer (:p), suppose if <code>my_func</code> is:</p>
<pre><code>def my_func(x, y):
    return x[0] + y[0]
</code></pre>
<p>This outputs the expected:</p>
<pre><code>{1: {2: 6, 3: 3, 4: 6}, 2: {1: 6, 3: 7, 4: 10}, 3: {1: 3, 2: 7, 4: 7}, 4: {1: 6, 2: 10, 3: 7}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I <em>think</em> you are asking about something like this:</p>
<pre><code>my_dict = {'a': [1, 2, 3, 4, 5], 'b': [5, 4, 3, 2, 1], 'c': [2, 4, 3, 5, 1], 'd': [5, 1, 4, 2, 3]}
result_dict = {}


def my_func(list1, list2):
    return [list1, list2]


for key, values in my_dict.items():
    temp_dict = {}
    for second_key, second_value in my_dict.items():
        if key != second_key:
            temp_dict.update({
                second_key: my_func(my_dict[key], my_dict[second_key])
        })
    result_dict.update({key: temp_dict})

print(result_dict)
</code></pre>
<p>Which for me outputs: <code>{'b': {'a': [[5, 4, 3, 2, 1], [1, 2, 3, 4, 5]], 'd': [[5, 4, 3, 2, 1], [5, 1, 4, 2, 3]], 'c': [[5, 4, 3, 2, 1], [2, 4, 3, 5, 1]]}, 'a':</code>......(it's long). I think you were maybe unaware of <code>dictionary.items()</code> which returns the keys and values for the dictionary. You can loop through two of these and so long as <code>key != second_key</code> you will not compare a key value pair with itself. You can then use the <code>dict.update({})</code> to store these values in a dictionary. Once you've filled your temporary dictionary <code>temp_dict</code>, which gets reset each loop you can save the values in the dictionary of dictionaries <code>result_dict</code>. I believe you can just change the function <code>my_func()</code> and this code would work for you!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the below code to call your my_func for each value without the repetition of previous keys.</p>
<pre><code>old_keys = []
for key1 in my_dict.keys():
    old_keys.append(key1)
    for key2 in my_dict.keys():
        if key1 != key2 and key2 not in old_keys:
            output_dict[key1] = {key2: my_func(my_dict[key1],my_dict[key2])}
</code></pre>
</div>
<span class="comment-copy">Either your result_dict doesn't make sense or I am not understanding your question. You say it will output an integer, but in your example it output <code>x1</code> for a: b:. What should the variable x1 equal for example?</span>
<span class="comment-copy">@PatrickConwell, <code>x1</code>, <code>x2</code>, ... can be integers. ;)</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.combinations</a></span>
<span class="comment-copy">How does your <code>my_func</code> looks like?</span>
<span class="comment-copy">sorry, I have taken your sample <code>my_func()</code> to my answer too. ;)</span>
<span class="comment-copy">Great minds think alike perhaps :) IMO It's a good example to use for the data to provide clarity.  Oh nevermind you just straight up lifted from my answer aww to heck with ya &lt;3</span>
<span class="comment-copy">And a great answer too. +1</span>
<span class="comment-copy">Idlehands and @Austin, both of your answers are perfect! The default dict is a bit cleaner so I am going with it as the answer, but if checking multiple as the answer was possible, both you would get it. Thanks again for solving my problem, I appreciate it. Cheers!</span>
<span class="comment-copy">Figured the dictionary comprehension might be too convoluted to use in this case, but evidently not... :) nicely done. +1 to you too</span>
