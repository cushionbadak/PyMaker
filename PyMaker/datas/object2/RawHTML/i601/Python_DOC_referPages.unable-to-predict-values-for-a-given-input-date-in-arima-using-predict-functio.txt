<div class="post-text" itemprop="text">
<p>I am using the following code for arima to predict values of output for the given date value from <code>2018-10-17</code> to <code>2018-10-22</code>. But I get the error as </p>
<blockquote>
<p>ERROR:
  "int() argument must be a string, a bytes-like object or a number, not 'Timestamp'".</p>
</blockquote>
<pre><code>model = ARIMA(df, order=(5,1,0))
model = model.fit(disp=0)
pred = model.get_prediction(start=pd.to_datetime('2018-10-17'),
                            end=pd.to_datetime('2018-10-22'),
                            dynamic=True)
</code></pre>
<p>Doesn't <code>predict()</code> accept <code>datetime</code> objects? It says it does in the documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you are using <a href="https://www.statsmodels.org/dev/generated/statsmodels.tsa.statespace.sarimax.SARIMAXResults.get_prediction.html" rel="nofollow noreferrer"><code>statsmodels.tsa.statespace.sarimax.SARIMAXResults.get_prediction</code></a>, notice that <code>start</code> and <code>end</code> expect an <code>int</code>, <code>str</code>, or datetime. Per the docs, the str can be a date string, so you could use</p>
<pre><code>pred = model.get_prediction(start='2018-10-17', 
                            end='2018-10-22',
                            dynamic=True)
</code></pre>
<hr/>
<p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Timestamp.html" rel="nofollow noreferrer">Pandas Timestamps</a> are not the same as <a href="https://docs.python.org/3/library/datetime.html#datetime-objects" rel="nofollow noreferrer">Python datetime.datetime</a> objects.</p>
<p>If you wish to use a datetime, use the <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Timestamp.to_pydatetime.html" rel="nofollow noreferrer"><code>Timestamp.to_pydatetime()</code></a> method to convert Pandas Timestamps to Python datetime.datetime objects:</p>
<pre><code>In [181]: pd.to_datetime('2018-10-17')
Out[181]: Timestamp('2018-10-17 00:00:00')

In [180]: pd.to_datetime('2018-10-17').to_pydatetime()
Out[180]: datetime.datetime(2018, 10, 17, 0, 0)
</code></pre>
<p>or simply create the datetime.datetime object directly:</p>
<pre><code>In [184]: import datetime as DT

In [185]: DT.datetime(2018,10,17)
Out[185]: datetime.datetime(2018, 10, 17, 0, 0)

pred = model.get_prediction(start=DT.datetime(2018, 10, 17), 
                            end=DT.datetime(2018, 10, 22),
                            dynamic=True)
</code></pre>
</div>
