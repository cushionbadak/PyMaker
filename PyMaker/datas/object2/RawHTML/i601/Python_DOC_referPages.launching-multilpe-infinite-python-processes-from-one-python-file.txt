<div class="post-text" itemprop="text">
<p>Let's say I have three modules:</p>
<p>mod1
mod2
mod3</p>
<p>where each of them runs infinitely long as soon as mod.launch() is called.</p>
<p>What are some elegant ways to launch all these infinite loops at once, without waiting for one to finish before calling the other?</p>
<p>Let's say I'd have a kind of launcher.py, where I'd try to:</p>
<pre><code>import mod1
import mod2
import mod3

if __name__ == "__main__":
    mod1.launch()
    mod2.launch()
    mod3.launch()
</code></pre>
<p>This obviously doesn't work, as It will wait for mod1.launch() to finish before launching mod2.launch().</p>
<p>Any kind of help is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you would like to execute multiple functions in parallel, you can use either the <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing" rel="nofollow noreferrer">multiprocessing</a> library, or <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">concurrent.futures.ProcessPoolExecutor</a>. ProcessPoolExecutor uses multiprocessing internally, but has a simpler interface.</p>
</div>
<div class="post-text" itemprop="text">
<p>Depending on the nature of the work being done in each task, the answer varies.</p>
<p>If each task is mostly or all IO-bound, I would recommend multithreading.</p>
<p>If each task is CPU-bound, I would recommend multiprocessing (due to the GIL in python).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use the <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer"><code>threading</code></a> module to run each module on a separate thread, but within the same process:</p>
<pre><code>import threading
import mod1
import mod2
import mod3

if __name__ == "__main__":
    # make a list of all modules we want to run, for convenience
    mods = [mod1, mod2, mod3] 
    # Prepare a thread for each module to run the `launch()` method
    threads = [threading.Thread(target=mod.launch) for mod in mods]
    # run all threads
    for thread in threads:
        thread.start()
    # wait for all threads to finish
    for thread in threads:
        thread.join()
</code></pre>
<p>The <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer"><code>multiprocess</code></a> module performs a very similar set of tasks and has a very similar API, but uses separate processes instead of threads, so you can use that too.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd suggest using <a href="https://github.com/ray-project/ray" rel="nofollow noreferrer">Ray</a>, which is a library for parallel and distributed Python. It has some advantages over the standard threading and multiprocessing libraries.</p>
<ul>
<li>The same code will run on a single machine or on multiple machines.</li>
<li>You can parallelize both functions and classes.</li>
<li>Objects are shared efficiently between tasks using shared memory.</li>
</ul>
<p>To provide a simple runnable example, I'll use functions and classes instead of modules, but you can always wrap the module in a function or class.</p>
<p>Approach 1: Parallel <strong>functions</strong> using <strong>tasks</strong>.</p>
<pre><code>import ray
import time

ray.init()

@ray.remote
def mod1():
    time.sleep(3)

@ray.remote
def mod2():
    time.sleep(3)

@ray.remote
def mod3():
    time.sleep(3)

if __name__ == '__main__':
    # Start the tasks. These will run in parallel.
    result_id1 = mod1.remote()
    result_id2 = mod2.remote()
    result_id3 = mod3.remote()

    # Don't exit the interpreter before the tasks have finished.
    ray.get([result_id1, result_id2, result_id3])
</code></pre>
<p>Approach 2: Parallel <strong>classes</strong> using <strong>actors</strong>.</p>
<pre><code>import ray
import time

# Don't run this again if you've already run it.
ray.init()

@ray.remote
class Mod1(object):
    def run(self):
        time.sleep(3)

@ray.remote
class Mod2(object):
    def run(self):
        time.sleep(3)

@ray.remote
class Mod3(object):
    def run(self):
        time.sleep(3)

if __name__ == '__main__':
    # Create 3 actors.
    mod1 = Mod1.remote()
    mod2 = Mod2.remote()
    mod3 = Mod3.remote()

    # Start the methods, these will run in parallel.
    result_id1 = mod1.run.remote()
    result_id2 = mod2.run.remote()
    result_id3 = mod3.run.remote()

    # Don't exit the interpreter before the tasks have finished.
    ray.get([result_id1, result_id2, result_id3])
</code></pre>
<p>You can see the <a href="https://ray.readthedocs.io/en/latest/" rel="nofollow noreferrer">Ray documentation</a>.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">docs.python.org/3/library/threading.html</a></span>
