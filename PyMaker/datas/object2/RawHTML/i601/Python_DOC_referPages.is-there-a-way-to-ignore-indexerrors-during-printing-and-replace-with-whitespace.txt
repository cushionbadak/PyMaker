<div class="post-text" itemprop="text">
<p>I'm currently still learning Python, and more specifically OOP, and my teacher has tasked my class with creating a console rendition of patience (or solitaire). I'm fairly confident with objects and methods etc. however there is one specific point I am having trouble with.</p>
<p>To display each tableau in the game, I am trying to use a loop which will spit out each card in individual rows:</p>
<pre><code>noColumns = 0
    for tableau in self.tableaus:
        if len(tableau) &gt; noColumns:
            noColumns = len(tableau)

    for column in range(noColumns):
        if column == 0:
            print('S ', self.tableaus[0][column].showCard(), self.tableaus[1][column].showCard(), self.tableaus[2][column].showCard(), self.tableaus[3][column].showCard(),
            self.tableaus[4][column].showCard(), self.tableaus[5][column].showCard(), self.tableaus[6][column].showCard(), ' HF')
        elif column &gt; 0 and column &lt; 4:
            try:
                print(self.waste[column-1].showCard(), ' ', self.tableaus[0][column].showCard(), self.tableaus[1][column].showCard(), self.tableaus[2][column].showCard(), self.tableaus[3][column].showCard(),
                self.tableaus[4][column].showCard(), self.tableaus[5][column].showCard(), self.tableaus[6][column].showCard(), (self.gameAttributes['Suits'][column]+'F'))
            except:
                print('  ', self.tableaus[0][column].showCard(), self.tableaus[1][column].showCard(), self.tableaus[2][column].showCard(), self.tableaus[3][column].showCard(),
                self.tableaus[4][column].showCard(), self.tableaus[5][column].showCard(), self.tableaus[6][column].showCard(), (self.gameAttributes['Suits'][column]+'F'))
</code></pre>
<p>Where <em>tableaus</em> is a list of 7 sublists that can contain separate card objects, depending on the movement of the cards by the player. I have already attempted to catch any exceptions using the try/except clauses shown, however I have realised that no matter how many exceptions I attempt to catch, there are simply too many possibilities in the variety of cards in each tableau. Therefore, as the first tableau always starts with a single card, the first line is displayed as</p>
<p><code>S  JS X X X X X X  HF</code></p>
<p>but as soon as the <em>for</em> loop tries to iterate through the next cards it catches an <em>IndexError</em>:</p>
<pre><code>    Traceback (most recent call last):
  File "C:\Users\xxxxxx\Desktop\solitaire or patience.py", line 67, in gameDisplay
    print(self.waste[column-1].showCard(), ' ', self.tableaus[0][column].showCard(), self.tableaus[1][column].showCard(), self.tableaus[2][column].showCard(), self.tableaus[3][column].showCard(),
IndexError: list index out of range
</code></pre>
<p>Does anyone have any alternative suggestion on how I could implement this code to either ignore or replace unindexed values with whitespace, or an alternative approach altogether?</p>
<p>Thanks a lot for even reading this far!</p>
<h2>EDIT - Minimal example:</h2>
<pre><code>tableaus = [[0],[0,1],[0,1,2],[0,1,2,3],[0,1,2,3,4],[0,1,2,3,4,5],[0,1,2,3,4,5,6]]

longest = 0
for tableau in tableaus:
    if len(tableau)&gt;longest:
        longest = len(tableau)

for column in range(longest):
    print('S ', tableaus[0][column], tableaus[1][column], tableaus[2][column], tableaus[3][column],
                tableaus[4][column], tableaus[5][column], tableaus[6][column], ' HF')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can catch specific errors with <code>try</code> and <code>except &lt;ErrorType&gt;</code>. But when you can catch those errors, you want something that is almost certainly not going to end up with another error, the way you have written your code thus far, the code in your except statement could very easily produce the same error you originally were trying to avoid. I would write it a:</p>
<pre><code>tableaus = [[0],[0,1],[0,1,2],[0,1,2,3],[0,1,2,3,4],[0,1,2,3,4,5], 
            [0,1,2,3,4,5,6]]

longest = 0
for tableau in tableaus:
    if len(tableau)&gt;longest:
        longest = len(tableau)

for column in range(longest):
    string_start = "S "
    string_middle = ""
    for i in range(7):
        try:
            x = str(tableaus[i][column])
        except IndexError:
            x = " "
        string_middle += x
    string_end = " HF"

    final_string = string_start + string_middle + string_end
    print(final_string)
</code></pre>
<p>Running the above, will not give any <code>IndexErrors</code>, and will give you:</p>
<pre><code>$ python3 t.py
S 0000000 HF
S  111111 HF
S   22222 HF
S    3333 HF
S     444 HF
S      55 HF
S       6 HF
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'll use strings as a substitute for cards because they have convenient methods - <code>str.upper</code> will be a substitute for your <code>card</code>s' <code>showCard</code> method.</p>
<pre><code>tableaus = [list('a'),list('ab'),list('abc'),list('abcd'),
            list('abcde'),list('abcdef'),list('abcdefg')]
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a> can <a href="https://en.wikipedia.org/wiki/Transpose" rel="nofollow noreferrer">transpose</a> a list of lists. Since the sublists have varying lengths use <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer">itertools.zip_longest</a>. </p>
<pre><code>lines = itertools.zip_longest(*tableaus, fillvalue=None)
</code></pre>
<p>Then for each line, iterate over items and and construct a string to print, use a dummy value if the item was missing from the <em>tableau</em>.</p>
<pre><code>for line in lines:
    line = (item.upper() if item else '-' for item in line)
    line = ''.join(line)
    print('S', line, 'HF')
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt;
S AAAAAAA HF
S -BBBBBB HF
S --CCCCC HF
S ---DDDD HF
S ----EEE HF
S -----FF HF
S ------G HF
</code></pre>
<hr/>
<p><a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">Conditional expressions</a></p>
</div>
<span class="comment-copy">The <code>7 sublists</code> have different lengths? And you want to print their contents regardless of length?</span>
<span class="comment-copy">@wwii yes, since the tableaus can change in length depending on where the user decides to place the cards available to them.</span>
<span class="comment-copy">It usually helps if you provide a minimal example of the input to help us diagnose/test. The example data and example code doesn't need to be your exact data it just needs to replicate the process and problem. - The example data doesn't need to have actual card objects with a <code>showCard()</code> method, it could use integers or tupels, and the example code refactored to account for that.  Please see <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">@wwii thanks for your help so far. Check my edit for a minimal example.</span>
<span class="comment-copy">Does the length of <code>self.waste</code> change? In the <code>try</code> suite you print a card from <code>self.waste</code> but you don't in the <code>except</code> suite.</span>
<span class="comment-copy">Very elegant. Thanks for your help.</span>
<span class="comment-copy">your welcome, although I am still a little confused as to specifically what you are trying to achieve, but it seems just catching errors in a meaningful way seems to of solved your problem</span>
