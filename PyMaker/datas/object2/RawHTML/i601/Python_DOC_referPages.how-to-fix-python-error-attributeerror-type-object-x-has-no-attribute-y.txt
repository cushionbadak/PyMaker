<div class="post-text" itemprop="text">
<p>I'm creating a practice python file to better understand object oriented programming and I am getting the following error:</p>
<pre><code>AttributeError: type object 'ID' has no attribute 'the_other_number'
</code></pre>
<p>I don't really understand why this happens because when I change the variable like below, it works just fine. I only receive an error when I try to use it in an if statement:</p>
<pre><code>ID.the_other_number = 'new_value'
</code></pre>
<p>Below is my example code that I am trying to fix, any help is appreciated.</p>
<pre><code>class ID():
   def __init__(self):
       self.other_number()
       pass

   def other_number(self):
       self.the_other_number = 3111

class ID_2():
    def __init__(self):
        self.update_number()

    def update_number(self):
       if ID.the_other_number &gt; 4:
           print(ID.the_other_number)

if __name__ == '__main__':
   ID()
   ID_2()
</code></pre>
<p>I was expecting it to understand what variable is equal to and run the if statement correctly. Also, don't try to make sense of the code, I realize the code doesn't make sense, it is simply an example.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you run <code>ID()</code> a new instance of the <code>ID</code> class is created.  <code>__init__</code> calls the <code>other_number</code> method of that instance, which assigns the instance attribute <code>the_other_number</code>.  Since you don't save that instance anywhere, by assigning the output of <code>ID()</code>, it's garbage collected immediately.  The <code>ID</code> class does not change.</p>
<p>When you run <code>ID_2()</code>, you create an instance of the <code>ID_2</code> class and run it's <code>__init__</code> method.  That calls the <code>update_number</code> method of that instance, which checks <code>ID._the_other_number</code>.  <code>ID</code> has no <code>the_other_number</code> attribute, so an error is raised.</p>
<p>Read the <a href="https://docs.python.org/3/tutorial/classes.html#a-first-look-at-classes" rel="nofollow noreferrer">Python tutorial on Classes</a>, and pay special attention to the difference between class objects and instance objects.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are making one mistake: You have to understand that <code>ID</code> is a class, it's not an object</p>
<p>So, if you want to use the function <code>ID.the_other_number</code>, you have to first create an object of <code>ID</code>.
So, just add one extra line to your code</p>
<pre><code>class ID():
   def __init__(self):
       self.other_number()
       pass

   def other_number(self):
       self.the_other_number = 3111

class ID_2():
    def __init__(self):
        self.update_number()

    def update_number(self):

        # Create one object of class ID - ID_object
        ID_object = ID()

        # Call the function for ID_object
        if ID_object.the_other_number &gt; 4:
           print(ID_object.the_other_number)

if __name__ == '__main__':
   ID()
   ID_2()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>@Patrick Haugh 's answer already explains why your code fails to execute the way you expect it.
Absent the issues with indenting, here's how I would modify your code to print the_other_number property of class ID:</p>
<pre><code>class ID():
    def __init__(self):
        self.other_number()

    def other_number(self):
        self.the_other_number = 3111
        return self.the_other_number

class ID_2():
    def __init__(self):
        self.update_number()

    def update_number(self):
        id = ID()
        if id.other_number() &gt; 4:
            print(id.the_other_number)

if __name__ == '__main__':
   ID()
   ID_2()
</code></pre>
</div>
<span class="comment-copy">The indent of your other_number function in your ID class is off by one.</span>
<span class="comment-copy">@BoboDarph Thanks, just fixed it!</span>
<span class="comment-copy">You also use 3 spaces instead of 4 in update_number of ID_2</span>
