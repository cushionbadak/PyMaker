<div class="post-text" itemprop="text">
<p>I have been started to understand AsyncIO, which basically "pauses" a function and goes to the next one when it needs to do non-blocking actions like make a web request or open a file (Are there others?)</p>
<p>But then, where are the built-in implementations of an async web request or an async file opening? Isn't AsyncIO just a concept without these? </p>
<p>I have only found external libraries that implement them.</p>
<p>Or is this the intended case? If so how am I supposed to implement my own async request/file library?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>But then, where are the built-in implementations of an async web request or an async file opening?</p>
</blockquote>
<p>The goal of asyncio is to provide the <em>infrastructure</em> for building async libraries and frameworks. The <code>asyncio</code> module bundled with Python supports sockets in <a href="https://docs.python.org/3/library/asyncio-stream.html#asyncio.open_connection" rel="nofollow noreferrer">client</a> and <a href="https://docs.python.org/3/library/asyncio-stream.html#asyncio.start_server" rel="nofollow noreferrer">server</a> connections, <a href="https://docs.python.org/3/library/asyncio-subprocess.html#asyncio-subprocess" rel="nofollow noreferrer">subprocesses</a>, <a href="https://docs.python.org/3/library/asyncio-sync.html#asyncio-sync" rel="nofollow noreferrer">synchronization tools</a> (including <a href="https://docs.python.org/3/library/asyncio-queue.html#asyncio-queues" rel="nofollow noreferrer">queues</a>), execution of blocking code using <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor" rel="nofollow noreferrer">threading and multiprocessing</a>, as well as communication between blocking code and an event loop running in a <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.run_coroutine_threadsafe" rel="nofollow noreferrer">different thread</a>.</p>
<p>Using this toolset as the basis, third parties have provided open-source libraries for async <a href="https://github.com/aio-libs/aiohttp" rel="nofollow noreferrer">http</a>, <a href="https://github.com/Tinche/aiofiles" rel="nofollow noreferrer">file</a> and <a href="https://github.com/vxgmichel/aioconsole" rel="nofollow noreferrer">console</a> IO, <a href="https://websockets.readthedocs.io/en/stable/intro.html" rel="nofollow noreferrer">websockets</a>, <a href="https://discordpy.readthedocs.io/en/latest/" rel="nofollow noreferrer">discord</a>, and <a href="https://pypi.org/search/?q=&amp;o=&amp;c=Framework+%3A%3A+AsyncIO" rel="nofollow noreferrer">many more</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python supports aysnc/await for auto scheduling in the event loop.</p>
<p>aiofiles is an Apache2 licensed library, written in Python, for handling local disk files in asyncio applications.</p>
<pre><code>https://github.com/Tinche/aiofiles
</code></pre>
<p>For asynchronous web requests </p>
<pre><code>https://aiohttp.readthedocs.io/en/stable/
</code></pre>
<p>For more Asynchronous implementations, check out </p>
<pre><code>https://github.com/python/asyncio/wiki/ThirdParty
</code></pre>
</div>
<span class="comment-copy">Why do you expect these things to be built in? (Also, async file operations pretty much all have to go through a thread pool due to lack of OS-level support.)</span>
<span class="comment-copy">@user2357112 I just don't understand why the only thing you can do with the standard library is asyncio.wait(), like all the examples and tutorials online which never show a real case</span>
<span class="comment-copy">@user2357112 well using a thread I can abstract any operation as non-blocking right? I don't see the point then</span>
<span class="comment-copy">Yes, I know, but these are not built-ins</span>
<span class="comment-copy">Python 3 has implemented  a concept of Asynchronous operations which made these libraries possible, you dont have to write your own implementation since they are tried and tested.  Same goes with all other libraries in python like requests, Beautifulsoup, PyCryptodome. Every implementation couldnt be provided in the language.</span>
<span class="comment-copy">I think OP is asking for async features built in. Unfortunately, I don't know of any implementations. Threading and multiprocessing is what you get for non blocking operations</span>
<span class="comment-copy">I'm asking is why isn't the basic to have a sucessful asyncio code is not builtin, and what is the basic concept of implementing a asyncio lib</span>
