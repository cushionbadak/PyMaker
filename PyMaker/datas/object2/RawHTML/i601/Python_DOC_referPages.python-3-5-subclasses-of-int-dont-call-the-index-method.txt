<div class="post-text" itemprop="text">
<p>I am confused as to when the <code>__index__</code> method of a class is called. I had assumed the method would be called when ever the object was used in an indexing operation. I am not seeing <code>__index__</code> called when the object is a subclass of <code>int</code>. </p>
<pre><code>In [1]: class foo(int):
...:        def __new__(cls, value):
...:            return int.__new__(cls, value)
...:        def __index__(self):
...:            return int(self)+1

In [2]: i=foo(0)

In [3]: i
Out[3]: 0

In [4]: i.__index__()
Out[4]: 1

In [5]: [0,1,2][:i.__index__()]
Out[5]: [0]

In [6]: [0,1,2][:i]
Out[6]: []
</code></pre>
<p>it appears that <code>int(i)</code> is being used as the index not <code>i.__index__()</code>. What have I misunderstood?</p>
<p>Edited to simplify and correct the example.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__index__</code> implements lossless conversion to <code>int</code>. Python only calls <code>__index__</code> if it actually needs such a conversion. In your case, it doesn't need a conversion, because your <code>i</code> is already an int. Python just uses the int value directly.</p>
<p>If you want to see the code that handles this, it's under <a href="https://github.com/python/cpython/blob/v3.7.2/Objects/abstract.c#L1247" rel="nofollow noreferrer"><code>PyNumber_Index</code></a>.</p>
</div>
<span class="comment-copy">You have not misunderstood anything.</span>
<span class="comment-copy">See the note in the <a href="https://docs.python.org/3/reference/datamodel.html#object.__index__" rel="nofollow noreferrer">data model docs</a></span>
<span class="comment-copy">"  In order to have a coherent integer type class, when __index__() is defined __int__() should also be defined, and both should return the same value." seems that you have a problem now</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/q/39971030/674039">Make an object that behaves like a slice</a></span>
<span class="comment-copy">@Jean-Fran√ßois Fabre Yes I do have a problem now, thanks all.</span>
