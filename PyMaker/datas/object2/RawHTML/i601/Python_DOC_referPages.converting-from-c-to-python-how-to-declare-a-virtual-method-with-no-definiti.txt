<div class="post-text" itemprop="text">
<p>I'm trying to convert a c++ library to python.</p>
<p><strong>c++ file</strong></p>
<pre><code>class A
{
  public:
    virtual void example(paramtype, paramtype) = 0;
    void myMethod(void);
}

void A::myMethod(void){
    example();
}

class B: public A
{
  public:
    void example(paramtype p1, paramtype p2); // implemented
}
</code></pre>
<p>I am having hard time with implementation of <strong>myMethod</strong>. I thought of making a variable to hold the example method and invoke the variable in <strong>myMethod</strong> like below. </p>
<p><strong>python file</strong></p>
<pre><code>class A:
    def __init__(self):
        self.example = None

    def myMethod(self):
        self.example()
</code></pre>
<p>But then editor says None type can't be called(of course). How can I achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The base class in C++ is declaring a virtual method with no definition.</p>
<pre><code>virtual void example(paramtype, paramtype) = 0;
</code></pre>
<p>That means it must be defined in a child class to be used. In your library, that's class <code>B</code>.</p>
<p>In Python, you can use</p>
<pre><code>raise NotImplementedError()
</code></pre>
<p>to indicate that a method has not been implemented. See <a href="https://stackoverflow.com/a/38717503/2773311">this answer</a> for more details.</p>
<pre><code>class A:
    def example(self):
        raise NotImplementedError()

    def myMethod(self):
        self.example()

class B(A):
    # override the example method by providing the implementation
    def example(self):
        # implementation
</code></pre>
<p>In this example, calling <code>example</code> on an object of type <code>A</code> will throw an error, because the method isn't defined. You can only invoke the method on an object of type <code>B</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To convert your C++ code into python3, you should derive from python's abstract base class (ABC). This lets you create abstract methods:</p>
<pre class="lang-py prettyprint-override"><code>from abc import ABC, abstractmethod


class A(ABC):
    def __init__(self):
        pass

    @abstractmethod
    def example(self, a, b):
        raise NotImplementedError

    def my_method(self):
        self.example(1, 2)
</code></pre>
<p>Additional information can be found here <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">https://docs.python.org/3/library/abc.html</a></p>
</div>
<span class="comment-copy"><code>self.example = (lambda: None)</code>?</span>
<span class="comment-copy">Looks like a good use case for python's <code>abc</code> package. From what I see, <code>class A</code> is an abstract base class. <code>abc</code> package let's you define abstract base classes.</span>
<span class="comment-copy">But I have to call example in A's implementation. Won't myMethod raise NotImplementedError?</span>
<span class="comment-copy">I've updated the implementation to fix some mistakes. <code>self.example</code> will run the implementation provided in <code>B</code> if you call it on an object of type <code>B</code>.</span>
<span class="comment-copy">Thank you. Best answer.</span>
