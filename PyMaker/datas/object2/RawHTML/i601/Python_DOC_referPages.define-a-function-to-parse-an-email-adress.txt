<div class="post-text" itemprop="text">
<p>I need to write a function parse_email that, given an email address s, returns a tuple, (user-id, domain) corresponding to the user name and domain name.
For instance, given richie@cc.gatech.edu it should return (richie, cc.gatech.edu).</p>
<p>The function should parse the email only if it exactly matches the email specification. For example, if there are leading or trailing spaces, the function should not match those. Also, the start of the function should be an alphabet as well as the end. In case it is not an alphabet, it should get an error as well as if the string contains any space.</p>
<p>I tried the following function:</p>
<pre><code>def parse_email (s):
    """Parses a string as an email address, returning an (id, domain) pair."""
    try:
        return(re.match(r'\S([\w\.+_-]+)@([\w\._-]+)',s).groups())
    except:
        pass
</code></pre>
<p>Can someone help me in completing the function where if there are spaces in the start of the string, it gives an error.</p>
<pre><code>def parse_email (s):   
    try:    
            return(re.match(r'\S([\w\.+_-]+)@([\w\._-]+)',s).groups())    
    except:    
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend you simply split the input string on <code>@</code> after trimming any whitespace. As mentioned in the comments, you can encounter more than one <code>@</code> symbol in an e-mail address, so it's important to split on the right one.</p>
<p>Building regular expressions for "valid" e-mail addresses is a nightmare, and you're bound to get it wrong. This article explains why:</p>
<p><a href="https://hackernoon.com/the-100-correct-way-to-validate-email-addresses-7c4818f24643" rel="nofollow noreferrer">https://hackernoon.com/the-100-correct-way-to-validate-email-addresses-7c4818f24643</a></p>
<p>Below is some code, with tests, that show how this works, but you it doesn't cope with multiple <code>@</code> symbols.</p>
<pre class="lang-py prettyprint-override"><code>import pytest

def parse_email(s):
  parts = s.strip().split('@', 1)
  if len(parts) == 2:
    return (parts[0], parts[1])
  else:
    raise ValueError()

def test_parse_simple_email():
  parts = parse_email("cheese@peas.com")
  assert len(parts) == 2
  assert parts[0] == "cheese"
  assert parts[1] == "peas.com"

def test_invalid_email():
  with pytest.raises(ValueError):
    parts = parse_email("this is not an e-mail address")

def test_parse_email_with_whitespace():
  parts = parse_email(" cheese@peas.com ")
  assert len(parts) == 2
  assert parts[0] == "cheese"
  assert parts[1] == "peas.com"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Regular expressions are entirely the wrong tool  here. Python 3.6+ has a library function which does exactly this.</p>
<pre><code>from email.policy import default as email_default_policy
from email import message_from_string

msg = message_from_string('To: {}'.format(s), policy=email_default_policy)
for addr in msg['to'].addresses:
    yield addr.username, addr.domain
</code></pre>
<p>The <a href="https://docs.python.org/3/library/email.headerregistry.html" rel="nofollow noreferrer"><code>email.headerregistry</code></a> library offers a structured representation of a parsed email address.  The <code>email.policy.default</code> object is required to enable the 3.6+ <code>email</code> parsing functionality (though the <a href="https://docs.python.org/3/library/email.policy.html" rel="nofollow noreferrer">documentation</a> alleges that it will become the default policy eventually, at which point you should no longer need to specify it explicitly).</p>
<p>There are demonstrations of RFC822 header parsers in pure regex. The canonical one is roughly a full page of text: <a href="https://stackoverflow.com/questions/20771794/mailrfc822address-regex">Mail::RFC822::Address Regex</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>Split can be used:</p>
<pre><code>def parse_email (s):   
    try:
        x=re.split('@',s)
        return (x[0],x[1])   
    except:    
        pass
</code></pre>
<p>Happy coding :)</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the following codE and function should do the job:</p>
<p>def parse_email (s):<br/>
    try:<br/>
        z = re.fullmatch(r'\b([a-zA-Z])([\w.+<em>-]+)@([\w.</em>-]+)([a-zA-Z])\b',s).groups()<br/>
        return(z[0]+z[1],z[2]+z[3])<br/>
    except AttributeError:<br/>
        raise ValueError</p>
</div>
<span class="comment-copy">Try to trim the spaces in string <code>s</code> using <code>strip</code> function before the statement <code>return(re.match(r'\S([\w.+-]+)@([\w.-]+)',s).groups())</code></span>
<span class="comment-copy">Try using anchors <code>^([\w.+-]+)@([\w.-]+)$</code></span>
<span class="comment-copy">Hi Sumit, the challenge is to basically given an error if the email address is not in the given format (which is to not have leading or trailing spaces). The first and last character of the email address should be alpha.</span>
<span class="comment-copy">So, the first and last must be alpha, a letter? Try <code>m = re.match(r'([^\W\d_][\w.+-]*)@([\w.-]*[^\W\d_])$',s)</code> and then <code>if m:</code> =&gt; <code>return m.groups()</code> and <code>else:</code> -&gt; <code>print("The pattern does not match the input string.")</code>. However, checking if the first char is a whitespace can be done with <code>if re.match(r'\s', s):</code></span>
<span class="comment-copy">Why use regex at all? Use string methods to check for extra whitespace and split on <code>@</code></span>
<span class="comment-copy">Note that according to the specification, email addresses <i>can</i> contain more than one “@“. While you will hardly encounter such addresses in practice, it’s precisely naïve code like this which makes addresses using anything “special” virtually impossible to use in the real world and hence virtually non-existent.</span>
<span class="comment-copy">@deceze agreed - I will edit my answer to make this clearer. My point was that it's hard to get right, but using a regex just makes it even harder.</span>
<span class="comment-copy">Note that according to the specification, email addresses <i>can</i> contain more than one “@“. While you will hardly encounter such addresses in practice, it’s precisely naïve code like this which makes addresses using anything “special” virtually impossible to use in the real world and hence virtually non-existent.</span>
