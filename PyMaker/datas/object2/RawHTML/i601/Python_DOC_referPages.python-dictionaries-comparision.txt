<div class="post-text" itemprop="text">
<p>I have a problem in python with dictionary comparison. I have 2 dictionaries and I want to compare these and when the key is the same, the value is upgraded to <code>valueFromFirstDictionary + valueFromSecondDictionary</code>. </p>
<p>Function 'addToInventory()' should have 45 coins instead of 3, but where is the problem? In the loop, it prints 45, but when I print all the dictionaries it shows 3.</p>
<p>Here's the problem with function:</p>
<pre><code>def addToInventory(inventory, addedItems):
    dictionaryHelp = {}

    for i in addedItems:                                 
        dictionaryHelp.setdefault(i,0)
        dictionaryHelp[i] = dictionaryHelp[i] + 1

    for i, k in inventory.copy().items():
        for j, l in dictionaryHelp.items():
            #print(i, k, j, l)
            if i == j:
                suma = k + l
                inventory.update({i:suma})
                #inventory[i] = suma
                print(inventory[i])
                break
            else:
                inventory[j] = l

    print(inventory)
    return(inventory)

inv = {'golden coin': 42, 'rope': 1}
dragonLoot = ['golden coin', 'dagger','golden coin', 'golden coin', 'ruby']
inv = addToInventory(inv, dragonLoot)

for k, v in inv.items():
    print(str(k) + ': ' + str(v))
    item_total = item_total + v
</code></pre>
<p>The code is also <a href="https://pastebin.com/zeD3Zdmt" rel="nofollow noreferrer">available on Pastebin</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In your <code>for</code> loop, take a close look at the <code>else</code> stuite, where you use <code>j</code>:</p>
<pre><code>for i, k in inventory.copy().items():
    for j, l in dictionaryHelp.items():
        if i == j:
            # ...
        else:
            inventory[j] = l
</code></pre>
<p>You loop over the keys for <code>inventory()</code>, and for <em>each key</em> you loop over <code>dictionaryHelp.items()</code>. And each time <code>i == j</code> is <strong>not</strong> true, you set <code>inventory[j] = l</code>. It doesn't matter that you set <code>'golden coin'</code> to 45 at <em>some point</em>, you simply replaced that result.</p>
<p>However, you <strong>don't need to use a double loop</strong>. Dictionaries are <em>great</em> at testing if a given key is already there, just use <code>key in dictionary</code>; that's true if you can get a value for that key from that dictionary. </p>
<p>That means you don't need to loop over both dictionaries, just use the key from one to see if there is a number for the item in the other:</p>
<pre><code>for item, count in dictionaryHelp.items():
    if item in inventory:
        inventory[item] = inventory[item] + count
    else:
        inventory[item] = count
</code></pre>
<ul>
<li>There is no need to copy <code>inventory</code> anymore, because you are not looping over it now.</li>
<li><p>Instead of testing for <code>item in inventory</code>, you could use <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>dict.get()</code></a> to use a default <code>0</code> value instead:</p>
<pre><code>for item, count in dictionaryHelp.items():
    inventory[item] = inventory.get(item, 0) + count
</code></pre>
<p><code>dict.get()</code> is similar to using <code>dict.setdefault()</code>, but without setting the key in the dictionary to the default value.</p></li>
<li><p>You don't really need to create <code>dictionaryHelp</code> either. Just add the counts <em>directly</em> to your <code>inventory</code> dictionary. I'm using the same <code>dict.get()</code> trick here to start with <code>0</code> if an added item wasn't yet there in the inventory:</p>
<pre><code>def addToInventory(inventory, addedItems):
    for item in addedItems:
        inventory[item] = inventory.get(item, 0) + 1
    return inventory
</code></pre></li>
</ul>
</div>
