<div class="post-text" itemprop="text">
<p>Basically I want to have two classes <code>Trades</code> and <code>HistoricalTrades</code>. The second  one would be a copy of the first with few more attributes. The <code>Trades</code> instances would be deleted after I get copies on <code>HistoricalTrades</code></p>
<p>I have solved this by passing attributes manually.</p>
<pre><code>class Trades:
    ...

class HistoricalTrades:
    ...

k = Trades(price=123, amount=10)
h = HistoricalTrades(price=k.price, amount=k.amount, sell_date=k.sell_date)
k.delete()
</code></pre>
<p>It kinda works as expected but I feel it is not elegant. Is there any other (better) way to move class instance to other class?</p>
</div>
<div class="post-text" itemprop="text">
<p>For this specific case, assuming no use of <code>__slots__</code>, and that the three attributes used are in fact the sole attributes of <code>Trade</code>, you could get away with a small cheat, changing:</p>
<pre><code>h = HistoricalTrades(price=k.price, amount=k.amount, sell_date=k.sell_date)
</code></pre>
<p>to:</p>
<pre><code>h = HistoricalTrades(**vars(k))
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow noreferrer"><code>vars(k)</code> returns the <code>__dict__</code> of <code>k</code> itself</a>, which we then unpack with <code>**</code> into the name/value pairs as the keyword arguments to initialize <code>HistoricalTrades</code> with.</p>
<p>That solution is a little kludgy (as noted, it depends on not using <code>__slots__</code> and not having any other attributes). Really, the nice way to do this is to define an alternate constructor for <code>HistoricalTrades</code> that does the slog work for you, simplifying use for the caller:</p>
<pre><code>class HistoricalTrades:
    ...
    @classmethod
    def from_trade(cls, trade):
        return cls(price=trade.price, amount=trade.amount, sell_date=trade.sell_date)
</code></pre>
<p>Yeah, it's the same code, but it's written once, and every call site can simplify to:</p>
<pre><code>h = HistoricalTrades.from_trade(k)
</code></pre>
<p>which is both concise <em>and</em> self-documenting.</p>
</div>
<div class="post-text" itemprop="text">
<p>Inheritance sounds useful here:</p>
<pre><code>class Trades:
    ...

class HistoricalTrades(Trades): # This will make HistoricalTrades inherit characteristics from Trades
    ...

h = HistoricalTrades(price=123, amount=10, sell_date="Some data not provided")
</code></pre>
<p>But I think more information would be needed for us to provide you with a more appropriate answer...</p>
</div>
<span class="comment-copy">Based on super-limited info, I think you want to look into inheritance.</span>
<span class="comment-copy">Thanks the second method is exactly what I was looking for</span>
