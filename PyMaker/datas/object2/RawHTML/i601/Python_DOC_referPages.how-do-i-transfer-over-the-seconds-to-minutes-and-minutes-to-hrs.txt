<div class="post-text" itemprop="text">
<pre><code>class time:
def __init__(self,hrs,mins,secs):

    self.hrs = hrs
    self.mins= mins
    self.secs = secs

def __str__(self):
    return (str(self.hrs%24)+":"+str(self.mins)+":"+str(self.secs))

def __repr__(self):
    return (str(self.hrs%24)+":"+str(self.mins)+":"+str(self.secs))
</code></pre>
<p>When I do input the time, like when I put t = time(0,0,90).
How do I get the code to return 0:1:30?</p>
<p>How would I do the below also too?
Add a method called increment. This should add one second to the current time. Make sure that you check all the boundary conditions. When the time is 23:59:59 is incremented, it should roll over to 00:00:00.</p>
</div>
<div class="post-text" itemprop="text">
<p>I recommend you make a method to add an hour min and sec and the increment method just calls the add sec method. In the methods they handle when they reach their respective limits.</p>
<pre><code>class time:
    def __init__(self,hrs,mins,secs):
        self.secs = secs % 60
        self.mins = (mins + (secs // 60)) % 60
        self.hrs = (hrs + (mins // 60)) % 24

    def add_hour(self):
        if self.hrs == 23:
            self.hrs = 0
        else:
            self.hrs += 1


    def add_min(self):
        if self.mins == 59:
            self.add_hour()
            self.mins = 0
        else:
          self.mins += 1

    def add_sec(self):
        if self.secs == 59:
            self.add_min()
            self.secs = 0
        else:
            self.secs += 1

    def increment(self):
      self.add_sec()

    def __str__(self):
        return (f"{self.hrs}:{self.mins}:{self.secs}")

    def __repr__(self):
        return (f"{self.hrs}:{self.mins}:{self.secs}")

t = time(23,59,59)
print(t)
#23:59:59
t.increment()
print(t)
#0:0:0
t = time(0,0,90)
print(t)
#0:1:30
</code></pre>
<p>You can run this code yourself <a href="https://repl.it/repls/OptimisticPurpleSignature" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I'd go a totally different route. Presenting it here in case it helps you.</p>
<pre><code>class Time:
    def __init__(self, hh, mm, ss):
        self.time = hh*3600 + mm*60 + ss # Total seconds

    @property
    def hours(self):
        return (self.time % 86400) // 3600

    @property
    def mins(self):
        return (self.time % 3600) // 60

    @property
    def secs(self):
        return self.time % 60

    def increment(self):
        self.time += 1
</code></pre>
<p>This is, imo, the simplest and most straightforward way to do it. If you've got multiple values that have to stay in sync, my advice is not to store them separately: just store them together in the underlying system, and separate them out when the user wants them.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>When I do input the time, like when I put t = time(0,0,90). How do I get the code to return 0:1:30?</p>
</blockquote>
<p>This can be done by simply moving the seconds up to minutes and minutes up to hours, scaling as necessary. Start with:</p>
<pre><code>hh = 0
mm = 0
ss = 90
</code></pre>
<p>and the code to do it is a relatively simple:</p>
<pre><code>while ss &gt;= 60:
    ss -= 60
    mm += 1
while mm &gt;= 60:
    mm -= 60
    hh = (hh + 1) % 24
</code></pre>
<p>Note that's not the most <em>efficient</em> way to do it, especially if the value can be high. If that's a possibility, you're better off with something like:</p>
<pre><code>mm += (ss // 60) ; ss = ss % 60
hh += (mm // 60) ; mm = mm % 60
hh = hh % 24
</code></pre>
<blockquote>
<p>Add a method called increment. This should add one second to the current time. Make sure that you check all the boundary conditions. When the time is 23:59:59 is incremented, it should roll over to 00:00:00.</p>
</blockquote>
<p>Following a similar pattern (and assuming you've already fixed it to ensure values are properly clamped), this is also relatively easy.</p>
<pre><code>ss = (ss + 1) % 60            # add second, wrapping if needed.
if ss == 0:                   # if second wraps, do same to minute.
    mm = (mm + 1) % 60
    if mm == 0:               # if minute wraps, increment hour.
        hh = (hh + 1) % 24
</code></pre>
<hr/>
<p>Note that I haven't integrated that into your specific code, I'm more treating Python as a pseudo-code language (at which it excels). That's because it's <em>classwork</em> and you'll learn a lot more by doing it yourself (once you know <em>how,</em> of course).</p>
<p>You should take the <em>algorithms</em> I've provided and adapt them for your own code.</p>
</div>
<span class="comment-copy">Be sure to note your class name is <code>time</code> and this would conflict with the built-in <a href="https://docs.python.org/3/library/time.html" rel="nofollow noreferrer">time</a> module. I recommend renaming at least to <code>Time</code></span>
<span class="comment-copy">I like how you think, very elegant. I was only going based on OP's original code, nice work</span>
<span class="comment-copy">Just one small nitpick. Since the times have to stay clamped within a day, you should probably <code>time = time % 86400</code> whenever you set or change it (in <code>__init__</code> and <code>increment</code>).</span>
<span class="comment-copy">@paxdiablo Oops, you're right, I missed that requirement!</span>
