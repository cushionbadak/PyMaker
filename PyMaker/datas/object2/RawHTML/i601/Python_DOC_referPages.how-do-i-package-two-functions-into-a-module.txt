<div class="post-text" itemprop="text">
<p>I have two functions for newtons method to estimate roots of a number that the user inputs, but I am tasked with "packaging these functions into a module". I admit I am struggling to wrap my head around the concept of modules and can't really find any material that helps me. </p>
<p>Have tried saving the functions separately as two different files and using the import command but can't seem to find any success.</p>
<p>[Edit] Trying to get the previous_x to not display once the final estimation established.</p>
<p><a href="https://i.stack.imgur.com/EAX1e.png" rel="nofollow noreferrer"><img alt="previous_x" src="https://i.stack.imgur.com/EAX1e.png"/></a></p>
<p>[Edit2] Still "None" appears for previous_x</p>
<p><a href="https://i.stack.imgur.com/JTZ68.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/JTZ68.png"/></a></p>
<pre><code>def newtons_fourth(y):
x=1
N=0
previous_x = None

while N &lt; 50:
    x=1/4*(3*(x) + y/(x**3))
    N=N+1
    print('Iteration number:',N)
    print('Estimation:',x)
    print('Previous x:',previous_x)
    print()

    if previous_x is not None:
        if abs(x - previous_x) &lt; 0.0001:
            final=1
            print('Difference negligible')
            print('Final Estimation:',x)
            break

previous_x = x

if final!=1:
    return previous_x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your idea of "saving the functions separately as two different files and using the import command" is correct. Here's one way to just that:</p>
<p><code>CubedModule.py</code>:</p>
<pre><code>def newtons_cubed(y):
    x=1
    N=0
    previous_x = None

    while N &lt; 50:
        x=1/3*(2*(x) + y/(x**2))
        N=N+1
        print('Iteration number:',N)
        print('Estimation:',x)
        print('Previous x:',previous_x)
        print()

        if previous_x is not None:
            if abs(x - previous_x) &lt; 0.0001:
                print('Difference negligible')
                print('Final Estimation:',x)
                return

        previous_x = x

    print(previous_x)
</code></pre>
<p><code>FourthModule.py</code>:</p>
<pre><code>def newtons_fourth(y):
    x=1
    N=0
    previous_x = None
    final = None

    while N &lt; 50:
        x=1/4*(3*(x) + y/(x**3))
        N=N+1
        print('Iteration number:',N)
        print('Estimation:',x)
        print('Previous x:',previous_x)
        print()

        if previous_x is not None:
            if abs(x - previous_x) &lt; 0.0001:
                final=1
                print('Difference negligible')
                print('Final Estimation:',x)
                return

    previous_x = x

    if final!=1:
        print(previous_x)
</code></pre>
<p>Then in your main module, named <code>script.py</code> you would import each module into separate namespaces at the top and reference them individually:</p>
<pre><code>import CubedModule as cm 
import FourthModule as fm 

y= int(input('Enter value for estimations:'))
print()

print('Cubed root estimation:')
print()
cm.newtons_cubed(y)

print()
print('Fourth root estimation:')
print()
fm.newtons_fourth(y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So yes this gets confusing when you start, I am with you on that.  So let me make it super easy. </p>
<p>Functions <code>def</code> in python are containers with code in it. They run once and complete. 
Classes are instances that hold a bunch of functions (called methods) inside that can manipulate the data inside the class until the class is closed, or the program is done with the named instance.</p>
<pre><code>x = Classname() #creates an instance of the class now named x
x.start() # runs the function start inside the class.  Can pass variables, or use existing variables under the self. notation.  
</code></pre>
<p>Modules are files with either functions or classes in them.  ALL modules are imported. </p>
<pre><code>import os
from os import getcwd #function or class inside the modeul
</code></pre>
<p>Then they can be called like this:</p>
<pre><code>print(os.getcwd())
print(getcwd())
</code></pre>
<p>Any .py file can be imported.  A directory can be imported if it has a file named <code>__init__.py</code> inside of it.  The file can be empty.  Then the directory name becomes the module name, and the single files are submodules imported like this:</p>
<pre><code>import myfolder.mymodule
from myfolder import mymodule # the same as above
</code></pre>
<p>That's about as easy as I can make it.  Any more questions, you need to look at the documentation.  But your best bet is to experiment, doing it the wrong way until you do it the right way is the best teacher.  </p>
</div>
<span class="comment-copy">From the <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">python documentation</a>: "A module is a file containing Python definitions and statements." - Whoever tasked you with this probably isn't quite clear on what a module is. Unless it's a trick question of course.</span>
<span class="comment-copy">"Adapt your solution to tutorial 3 question 3 to use Newton Raphson in two functions: one which estimate the cube root of a number provided by an input argument, and one which estimates the fourth root. Package your functions in a module, and write some code to let the user calculate the cube and 4th roots of a number of their choice."</span>
<span class="comment-copy">@ColinK, basically what you need to do is to create two files: one with Newton functions (let's say it's called newtons.py) and the one that the user will be starting in Python (let's say it's called main.py). At the top of the main.py you need to put import information. I always recommend RealPython tutorials. Here's one on <a href="https://realpython.com/absolute-vs-relative-python-imports/" rel="nofollow noreferrer">importing</a></span>
<span class="comment-copy">change the <code>break</code> to <code>return</code>? <code>return</code> will break out of the function and return to the calling code</span>
<span class="comment-copy">I'm still getting this, meaning that previous_x is still coming from somewhere in the code: Difference negligible Final Estimation: 2.000000000012062 None</span>
<span class="comment-copy">Quick question, even for the iteration where the final estimation is displayed the value for previous_x is still displayed and if I try coding my way around it to stop it from being displayed for the last line I get an error saying the following: UnboundLocalError: local variable 'final' referenced before assignment. Any ideas?</span>
<span class="comment-copy">Yes, try defining <code>final</code> with the other variables at the top of the function after <code>previous_x = None</code> put <code>final = None</code>, then change the <code>if</code> statement to be just <code>if previous_x:</code></span>
