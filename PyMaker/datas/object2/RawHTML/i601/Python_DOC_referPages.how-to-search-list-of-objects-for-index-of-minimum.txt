<div class="post-text" itemprop="text">
<p>I want to search through a list of objects for the lowest number present in an attribute of the objects. </p>
<p>This is easy enough using a list comprehension and the <code>min</code> function. The issue comes when I want to find the index of the object.</p>
<pre><code>class School:
    def __init__(self, name, num_pupils, num_classrooms):
        self.name = name
        self.num_pupils = num_pupils
        self.num_classrooms = num_classrooms

    def students_per_class(self):
        return self.num_pupils / self.num_classrooms

    def show_info(self):
        print(f"{self.name} has {self.students_per_class():.2f} students per class.")

    def string_checker(question):
        valid = False
        while not valid:
            try:
                response = str(input(question))
                if all(character.isalpha() or character.isspace() for character in response):
                    valid = True
                    return response
                else:
                    print("Enter a string containing no numbers of special characters. ")
            except ValueError:
                print("Enter a string containing no numbers of special characters. ")

    def num_checker(question):
        valid = False
        while not valid:
            try:
                response = int(input(question))
                if (response):
                    valid = True
                    return response
                else:
                    print("Enter an integer containing no letters or special characters. ")

        except ValueError:
            print("Enter an integer containing no letters or special characters. ")

    def new_school():
        school_name = string_checker("School Name: ")
        num_pupils = num_checker("Number of Pupils: ")
        num_classrooms = num_checker("Number of Classrooms: ")
        return School(school_name, num_pupils, num_classrooms)


if __name__ == "__main__":
    schools = []
    school = School("Darfield High School", 900, 37)
    schools.append(school)
    school.show_info()

    for i in range(1):
        schools.append(new_school())

    for school in schools:
        school.show_info()

    print(min(school.students_per_class() for school in schools)) 
    # This works fine and prints the value of the lowest number
    print(schools.index(min(school.students_per_class() for school in schools))) 
    # This doesn't work as it tries to find the index of the value returned
    # from the min function as it should.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>min</code>'s <code>key</code> argument to search by index:</p>
<pre><code>index = min(range(len(schools)), key=lambda i: schools[i].students_per_class())
print(schools[index])
</code></pre>
<p>A key provides the values that will be compared instead of the actual sequence. Here, my sequence is <code>range(len(schools))</code>, which is just the indices of all the elements. But instead of finding the minimum index, I am making it so that we find the minimum of <code>schools[i].students_per_class()</code> for each index <code>i</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> to iterate through lists while keeping track of indices:</p>
<pre><code>min(((i, school.students_per_class()) for i, school in enumerate(schools)), key=lambda x: x[1])
</code></pre>
<p><code>(i, school.students_per_class())</code> is a tuple and using <code>key</code> parameter of <code>min()</code>, we ask Python to find minimum of <code>school.students_per_class()</code>, which subsequently returns it's index along with it.</p>
<p>Read about lambda <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you wanted to be able to compare, sort, find the min/ max on the items directly you could use the "dunder" methods. These methods allow you to overload built in functions on classes.</p>
<p>For instance if you had a class like this</p>
<pre><code>class Item:
    def __init__(self, value):
        self.value = value

    def __lt__(self, other):
        return self.value &lt; other.value

    def __eq__(self, other):
        return self.value == other.value
</code></pre>
<p>You can then create two instances and compare them directly like this,</p>
<pre><code>A = Item(1)
B = Item(2)

print(A &lt; B) # Prints True
</code></pre>
<p>or if you had a list of items</p>
<pre><code>items = [A, B]
</code></pre>
<p>You can then get the minimum item by going </p>
<pre><code>min_item = min(items)
</code></pre>
<p>or the index of it by going</p>
<pre><code>min_item_index = items.index(min(items))
</code></pre>
<p>although it may be enough to just have a reference to the minimum item.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you may be looking for <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.argmin.html" rel="nofollow noreferrer">np.argmin</a> function, if you provide a list as an input it will return the index of the minimal element.</p>
<p>in this case it would be:</p>
<pre><code>import numpy as np 
min_ind = np.argmin([school.students_per_class() for school in schools])
print(schools[min_ind])
</code></pre>
</div>
<span class="comment-copy">Duplicate of <a href="https://stackoverflow.com/q/16945518/2988730">stackoverflow.com/q/16945518/2988730</a></span>
<span class="comment-copy">Lists and arrays are not the same in Python. You have lists.</span>
<span class="comment-copy">Could you extrapolate on what the lambda "key" is actually doing. Thank you.</span>
<span class="comment-copy">@Alex. Yes, I can elaborate</span>
<span class="comment-copy">I apologise for my poor use of words. Could you please elaborate. Thanks.</span>
<span class="comment-copy">@Alex. I've elaborated</span>
<span class="comment-copy">Thanks, it is people like you who make learning easier.</span>
<span class="comment-copy">Thank you for your answer. Could you please explain what is happening with enumerate and lambda? I have no idea. Thanks again. Edit: Could you put it into my context.</span>
<span class="comment-copy">You need to swap the order of the result tuple or it will always return the first item, whose index is 0.</span>
<span class="comment-copy">@AlexStiles, I have added links to official documentation for further reading on <code>enumerate</code> and <code>lambda</code>.</span>
<span class="comment-copy">Please show how to do that for this custom object</span>
