<div class="post-text" itemprop="text">
<p>I'm trying to insert something into a new list and get an output that says:
    vehicle is 7 letters</p>
<pre><code>fl=['vehicle','person']
Textfl=[]     
Textfl.extend(str(fl[0])+ "is " +str(len(fl[0]))+ "letters")
print(Textfl)
</code></pre>
<p>Ends up returning:</p>
<pre><code>['v', 'e', 'h', 'i', 'c', 'l', 'e', 'i', 's' ' ', '7', 'l', 'e', 't', 't', 'e', 'r', 's']
</code></pre>
<p>Wanted output: <code>vehicle is 7 letters</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow noreferrer">string formatting</a> for a cleaner solution:</p>
<p>For Python <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow noreferrer">3.6+</a></p>
<pre><code>s = 'vehicle'
output = f'{s} is {len(s)} letters'
# 'vehicle is 7 letters'
</code></pre>
<p>For older versions use:</p>
<pre><code>output = '{} is {} letters'.format(s,len(s))
# 'vehicle is 7 letters'
</code></pre>
<hr/>
<p>The problem with your solution is that you are making the result a list, when you're expected output is actually a string. The following would be enough:</p>
<pre><code>str(fl[0]) + " is " + str(len(fl[0]))+ " letters"
# 'vehicle is 7 letters'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want a <code>list</code> in output containing an element <code>vehicle is 7 letters</code> then you can do something like this:</p>
<pre><code>fl=['vehicle','person']
Textfl=[]     
Textfl.append(str(fl[0])+" "+"is " +str(len(fl[0]))+" "+"letters")
print(Textfl)
</code></pre>
<p>output </p>
<pre><code>['vehicle is 7 letters']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>fl = ['vehicle', 'person']
Textfl = str()
Textfl = fl[0]+ " is " + str(len(fl[0])) + " letters"
print(Textfl)
</code></pre>
<p>Try to use the Textfl object as string.</p>
</div>
<span class="comment-copy">You probably meant <a href="https://docs.python.org/3/tutorial/datastructures.html?highlight=append" rel="nofollow noreferrer"><code>append()</code></a>. <code>extend()</code> is for combining sequences, and <code>str</code> is considered a sequence.</span>
<span class="comment-copy">Do you want it for all the elements in the list?</span>
<span class="comment-copy">Cool, what are the general differences between the two functions? Because extend works when added whole blocks of strings into an existing list with strings already in it.</span>
<span class="comment-copy">Do you really want the result in a <code>list</code>? Or just need a string output.</span>
<span class="comment-copy">You probably should make a comment that <code>f-strings</code> are only available from Py3.6+, this would be confusing to a beginner if they are not running Py3.6+. And maybe show the alternative is <code>.format()</code>.</span>
<span class="comment-copy">Updated thanks for pointing out!</span>
<span class="comment-copy"><code>Textfl = str()</code> is not necessary.</span>
<span class="comment-copy">yeah, i know but it's cleaner with separate declaration and it is a good programming behavior. especially here where that was the part of the problem.</span>
<span class="comment-copy">Python is dynamically typed so <code>Textfl = str()</code> is meaningless and is not considered good programming behaviour in python. Python does have type hints if you wish to use them: <code>Textfl: str = ...</code></span>
<span class="comment-copy">i know about it... but if you will not only use python, it will be a good practice beside the declaration of a variable(despite the dynamically typing) always will produce a much more readable and cleaner result. every code is read much more often than it is written.</span>
