<div class="post-text" itemprop="text">
<p>I'm reading data from an Update Cloud Firestore Trigger. The <code>event</code> is a dictionary that contains the data whithin the key <code>['value']['fields']</code>. However, each of the keys contains s nested dictionary containing a key like <code>'integerValue'</code>, <code>'booleanValue'</code> or <code>'stringValue'</code>, where the value of <code>integerValue</code> is actually a string. Is there a method to remove the 'type pointers'?</p>
<p>How can I convert this:</p>
<pre><code>{
    'fields': {
        'count': {
            'integerValue': '0'
        },
        'verified': {
            'booleanValue': False
        },
        'user': {
            'stringValue': 'Matt'
        }
    }
}
</code></pre>
<p>To this:</p>
<pre><code>{
    'count': 0,
    'verified': False,
    'user': 'Matt',
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a mapping of the known types and convert the values that way:</p>
<pre><code>types = {
    'integerValue': int,
    'booleanValue': bool,
    'stringValue': str,
}
</code></pre>
<p>You can replace a nested dictionary like the one you have through the magic of <a href="https://docs.python.org/3/library/stdtypes.html#dict.popitem" rel="nofollow noreferrer"><code>dict.popitem</code></a>:</p>
<pre><code>replacement = {}
for key, meta in event['value']['fields'].items():
    typ, value = meta.popitem()
    replacement[key] = types[typ](value)
event['value'] = replacement
</code></pre>
<p>You can reduce it to a one liner with a dictionary comprehension:</p>
<pre><code>event['value'] = {k: types[t](v) for k t, v in (k, *d.popitem()) for k, d in event['value']['fields'].items())}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use keys() in dictionary</p>
<pre><code>origin_dict={
    'fields': {
        'count': {
            'integerValue': '0'
        },
        'verified': {
            'booleanValue': False
        },
        'user': {
            'stringValue': 'Matt'
        }
    }
}
# remove first layer
b = origin_dict['fields']
new_dict = dict()

for i in b.keys():
    # i will be second layer of dictionary
    for j in b[i].keys():
        # j will be third layer of dictionary
        new_dict[i] = b[i][j]
print (new_dict)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no explicit method to do so. One you can do is iterate through existing dictionary picking up items you need in the new dictionary:</p>
<pre><code>d = {
    'fields': {
        'count': {
            'integerValue': '0'
        },
        'verified': {
            'booleanValue': False
        },
        'user': {
            'stringValue': 'Matt'
        }
    }
}

required = ['count', 'verified', 'user']
d1 = {}
for x in d.values():
    for y in required:
        if 'integerValue' in x[y].keys():
            d1[y] = int(list(x[y].values())[0])
        else:
            d1[y] = list(x[y].values())[0]

print(d1)
# {'count': 0, 'verified': False, 'user': 'Matt'}
</code></pre>
</div>
<span class="comment-copy">Have you made any attempt?</span>
<span class="comment-copy">@MadPhysicist Not really because I'm new with python, learning as I go. I do have checked the possible methods for a dictionary. But can't seems to find anything that makes it simpler. I did use what 'Austin' and 'Bob' have mentioned in the anwers with a smaller event with one field, until I came up with bigger dictionaries. With JavaScript functions is easier, you just get the access the data as properties. Seems like I will have to fetch the data straight from firestore upon triggering the event instead of trying to read it from the event.</span>
<span class="comment-copy">Can be made simpler using <code>for i in b:</code> and <code>for j in b[i]:</code>.</span>
<span class="comment-copy">Austin I see, I did that when I was testing a function and didn't noticed really the <code>integerValue</code> until my documents became a bit more complex. Seems to me that the best way to deal with this in <code>google-cloud-functions</code> for python is to get the data straight from Firestore upon triggering the function instead of trying to parse it as you and @Bob have suggested.</span>
<span class="comment-copy">@Racu, maybe that would do. We had no idea about background of your working, neither did you mention more on that in your question. Also, I must admit I have no experience in working with Firestore.</span>
