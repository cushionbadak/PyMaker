<div class="post-text" itemprop="text">
<p>I have a script with several functions:</p>
<pre><code>def a():
   pass

def b():
   pass 

def c():
   pass
</code></pre>
<p>Which by design will be invoked depending on cmd line argument. I can create several if statements which will evaluate which function should run:</p>
<pre><code>if args.function == "a":
    a()

elif args.function == "b":
    b()
elif args.function == "c":
    c()
</code></pre>
<p>But is there a better way to do this? </p>
</div>
<div class="post-text" itemprop="text">
<p>You could make a dictionary like so</p>
<pre><code>d = {"a" : a,
     "b" : b}
</code></pre>
<p>and then dispatch</p>
<pre><code>d[args.function]()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try using <code>eval</code><br/>
<code>eval(function_name_passed_as_argument + "()")</code></p>
<pre><code>def a():
   pass

def b():
   pass 
eval(args.function + "()")  
</code></pre>
<p>This doesn't require the use of <code>if-else</code> logic. Function name passed as argument will be executed directly.</p>
</div>
<div class="post-text" itemprop="text">
<p>You make a dictionary as already pointed out, but how are you going to handle a bad input? I would create a default method and use the <code>dict.get</code> method:</p>
<pre><code>def fallback():
    print('That command does not exist')
    # add any code you want to be run for
    # a bad input here...

functions = {
    'a': a,
    'b': b
}
</code></pre>
<p>Then call the function by retrieving it:</p>
<pre><code>functions.get(args.function.lower(), fallback)()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has several built-in functions that we can utilize for instance <a href="https://docs.python.org/3/howto/argparse.html" rel="nofollow noreferrer">Argparse</a>, this method pretty common in python for command line programmable application.
The basics:</p>
<pre><code>import argparse
parser = argparse.ArgumentParser()
parser.parse_args()
</code></pre>
<p>By this method, you can have something like this:</p>
<pre><code>$ python3 prog.py -v
verbosity turned on
$ python3 prog.py --help
usage: prog.py [-h] [-v]

optional arguments:
  -h, --help     show this help message and exit
  -v, --verbose  increase output verbosity
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps you are looking for a library like <a href="https://pypi.org/project/click/" rel="nofollow noreferrer"><code>click</code></a>?  It lets you easily add command-line subcommands with a decorator.</p>
<pre><code>import click

@click.group()
def cli():
    pass

@cli.command()
def a():
   print("I am a")

@cli.command()
def b():
   print("Je suis b")

if __name__ == '__main__':
    cli()
</code></pre>
<p>Sample output:</p>
<pre><code>bash$ ./ick.py --help
Usage: ick.py [OPTIONS] COMMAND [ARGS]...

Options:
  --help  Show this message and exit.

Commands:
  a
  b

bash$ ./ick.py a
I am a
</code></pre>
</div>
<span class="comment-copy">You don't describe how it can help. I see output, but no idea what is under the hood when call '-v' option.</span>
