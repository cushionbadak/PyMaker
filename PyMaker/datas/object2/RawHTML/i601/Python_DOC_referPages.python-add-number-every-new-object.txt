<div class="post-text" itemprop="text">
<p>I want to change the name of the object each time a object is created so that there's an accumulator adding everytime an object is created.  In this example i want the first object.name to be B1 and then the second object.name to be B2 and then B3 and so on.  This is what im trying to get</p>
<pre><code> class Object:
    def __init__(self):
         self.name = "B" + (accumulator)
</code></pre>
<p>this is what I tried but i am not really getting anywhere</p>
<pre><code>class BankAccount:
    def __init__(self, balance):
        self.account_number = "B" + str(number = number + 1)
        self.balance = balance
</code></pre>
<p>I cant think of a way to avoid the issue of trying to set a variable to equal plus one of itself because itself isn't defined yet.</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest approach here is a class variable that stores the next value to use, which you increment after use:</p>
<pre><code>class BankAccount:
    _nextnum = 1
    def __init__(self, balance):
        self.account_number = "B" + str(self._nextnum)
        type(self)._nextnum += 1  # Must set it on the class, or you only make a shadowing instance attribute
        self.balance = balance
</code></pre>
<p>This isn't thread safe without locking though, so if you want thread-safety, <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="noreferrer"><code>itertools.count</code> can do the same job</a> in a thread-safe (at least on CPython) manner:</p>
<pre><code>import itertools

class BankAccount:
    _numgenerator = itertools.count(1)
    def __init__(self, balance):
        self.account_number = "B" + str(next(self._numgenerator))
        self.balance = balance
</code></pre>
<p>Since <code>itertools.count</code>'s work is done at the C layer with <a href="https://wiki.python.org/moin/GIL" rel="noreferrer">the GIL held</a>, it operates atomically, both returning the next number and moving the count along as a single atomic operation.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can have a class level variable maintain how many objects were created, and then use that to determine the name</p>
<pre><code> class BankAccount:
     count = 0
     def __init__(self):
         self.name = "B" + str(BankAccount.count)
         BankAccount.count += 1
</code></pre>
<p>This is not thread safe however, as mentioned by @ShadowRanger. It's likly a better idea to use <code>itertools.count</code> as they suggest.</p>
</div>
