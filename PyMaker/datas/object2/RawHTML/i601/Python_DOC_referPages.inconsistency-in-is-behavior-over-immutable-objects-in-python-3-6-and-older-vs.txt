<div class="post-text" itemprop="text">
<p>I was introducing <em>is</em> operator to my students when I noticed that there is an inconsistency in its behavior between python (v3.6 and older) and (v3.7).</p>
<p>Launch a python shell and run:</p>
<pre><code>5/2 is 2.5
</code></pre>
<p>Or:</p>
<pre><code>(1, 2, 3) is (1, 2, 3)
</code></pre>
<p>in v3.6.X you get <code>False</code> for both, but in v3.7 they turn out to be <code>True</code>.</p>
<p>My expectation was that the result should be True as I thought immutable numeric objects (or a tuple of them) have just one instance.</p>
<p>It seems that at least my thought was not right in the previous versions of Python.</p>
<p>Does anyone know what changes have been made which explains this new behaviour?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure about reasons and source for this, but my guess is that this has something to do with in-line optimizations.</p>
<p>If you'll assign variable for this values, identity check will result in <code>False</code>, same as before.</p>
<pre><code>&gt;&gt;&gt; 5/2 is 2.5
True
&gt;&gt;&gt; a = 5/2
&gt;&gt;&gt; a is 2.5
False
</code></pre>
<p>Interesting note on new folding optimisation. As python is "all runtime", there's no way to optimize some things ahead, but it tries hard, parsing as much scope as it can:</p>
<pre><code>&gt;&gt;&gt; a = 3.14
&gt;&gt;&gt; b = 3.14
&gt;&gt;&gt; a is b
False
&gt;&gt;&gt; a = 3.14; b = 3.14
&gt;&gt;&gt; a is b
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>My expectation was that the result should be True as I thought immutable numeric objects (or a tuple of them) have just one instance.</p>
</blockquote>
<p>That expectation is questionable - there's no such thing guaranteed by the Python language. </p>
<p><code>is</code> is a quite tricky operator because you really need to know when it's appropriate to use it.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; 5 / 2 is 2.5
&gt;&gt;&gt; (1, 2, 3) is (1, 2, 3)
</code></pre>
<p>These are <strong>not appropriate uses of <code>is</code></strong> in the general case. They may be appropriate if you want to check what line/function optimizations (interning) Python is doing but I guess that wasn't the desired use-case here.</p>
<p><code>is</code> should only be used if you want to compare to constants (that are guaranteed to only have one instance)! The <a href="https://docs.python.org/library/constants.html" rel="nofollow noreferrer">guaranteed built-in constants</a> are:</p>
<ul>
<li><code>None</code></li>
<li><code>NotImplemented</code></li>
<li><code>Ellipsis</code> (also known as <code>...</code>)</li>
<li><code>True</code></li>
<li><code>False</code></li>
<li><code>__debug__</code></li>
</ul>
<p>Or your own constant-like instances:</p>
<pre><code>_sentinel = object()

def func(a=_sentinel):
    return a is _sentinel
</code></pre>
<p>Or when you explicitly assign variables to a new name:</p>
<pre><code>a = b
a is b  # &lt;- that's expected to be True
</code></pre>
<blockquote>
<p>Does anyone know what changes have been made which explains this new behaviour?</p>
</blockquote>
<p>Probably the peep-hole optimizer now optimizes more cases (tuples and mathematical expressions). For example "AST-level Constant folding" (<a href="https://bugs.python.org/issue29469" rel="nofollow noreferrer">https://bugs.python.org/issue29469</a>) has been added in CPython 3.7 (I intentionally wrote CPython here because it's nothing that has been added to the Python 3.7 language specification).</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe that this behavior is due moving the Constant folding from the peephole optimizer (compile time operation) to the new AST optimizer (run time operation), which as it's also mentioned in <a href="https://docs.python.org/3/whatsnew/3.7.html#optimizations" rel="nofollow noreferrer">https://docs.python.org/3/whatsnew/3.7.html#optimizations</a> is now able to perform optimizations more consistently. (Contributed by Eugene Toder and INADA Naoki in <a href="https://bugs.python.org/issue29469" rel="nofollow noreferrer">bpo-29469</a> and <a href="https://bugs.python.org/issue11549" rel="nofollow noreferrer">bpo-11549</a>.)</p>
<p>Re:</p>
<blockquote>
<p>My expectation was that the result should be True as I thought immutable numeric objects (or a tuple of them) have just one instance.</p>
</blockquote>
<p>Immutability is not strictly the same as having an unchangeable value. Before you call an object mutable or immutable it's an object and objects in Python are created at run time. So there's no reason to connect mutability to object creation and identity. There are, however, some exceptions like this one or small object interning in both previous and current versions which, mostly for the sake of optimization, this rule (object creation at run time) gets manipulated. Read <a href="https://stackoverflow.com/a/38189759/2867928">https://stackoverflow.com/a/38189759/2867928</a> for more details.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why should immutable objects that are the same occupy the same instance?</p>
<p>When using <code>is</code> in python, you are essentially asking if <code>a</code> and <code>b</code> occupy the same piece in memory. If you think of <code>a</code> and <code>b</code> as immutable literals, it's not like python has a specific space to save every type of immutable literal. It's pure chance that it returned true in this instance and entirely possible it will return false if you choose a different literal. Take a look at <a href="https://github.com/satwikkansal/wtfpython" rel="nofollow noreferrer">this</a>:</p>
<pre><code>&gt;&gt;&gt; a = "wtf"
&gt;&gt;&gt; b = "wtf"
&gt;&gt;&gt; a is b
True

&gt;&gt;&gt; a = "wtf!"
&gt;&gt;&gt; b = "wtf!"
&gt;&gt;&gt; a is b
False

&gt;&gt;&gt; a, b = "wtf!", "wtf!"
&gt;&gt;&gt; a is b
True
</code></pre>
<p>If you want to avoid this, do not use <code>is</code> on things you didn't explicitly save into memory.</p>
</div>
<span class="comment-copy">On previous versions of pyhton floats are not interned, unlike small integers. neither are tuples.</span>
<span class="comment-copy">they probably decided to intern more stuff. So what?</span>
<span class="comment-copy">I would never expect any two values to be the same object unless I explicitly reassigned the object myself (<code>a = b; a is b</code>). Anything else is up to the whim of the particular implementation's internal optimisation process.</span>
<span class="comment-copy">Don't write code that relies on equal literals producing the same object. Unless you wrote <code>x = y</code> somewhere yourself, never assume <code>x is y</code> could be true.</span>
<span class="comment-copy">You can only safely intern immutable objects, but that does't mean all immutable objects are (or should be) interned.</span>
<span class="comment-copy">that should be the only answer to link to on all <code>is</code> questions.</span>
<span class="comment-copy">afaik, <code>is</code> has nothing to do with memory allocation. Python states that <code>is</code> stands for <i>identity check</i>. In CPython memory address is (was?) used as <code>id</code> base, but there's actually nothing that regulates this in different implementations.</span>
<span class="comment-copy">From my understanding, id is essentially python's implementation of C memory addresses. It just doesn't increase the size of the object because it is stored separately. See <a href="https://stackoverflow.com/questions/15667189/what-is-the-id-function-used-for">this</a></span>
<span class="comment-copy">That's an implementation detail. As long as VM provides unique ids for objects, it's ok. No need to actually map it to memory directly</span>
