<div class="post-text" itemprop="text">
<p>I'm looking to split terms on a delimiter. I'd like to put the number as <code>index</code> and the name as <code>name</code>.</p>
<p>My terms:</p>
<pre><code>The Beehive
12. Bar 821
13. Natives Bar
14. Last Call Bar
15. Scarlet Lounge
16. Linden Room
17. Rooftop 25
</code></pre>
<p>I'm using this code:</p>
<pre><code>terms = ['The Beehive', '12. Bar 821', '13. Natives Bar', '14. Last Call Bar', '15. Scarlet Lounge', '16. Linden Room', '17. Rooftop 25']

delim = re.match('\d+\. ', terms)

if delim is None:
    print(delim)
else:
     index = index[:delim.end()]
     name = index[delim.end():]
</code></pre>
<p>This fails to capture the split. I've tested it by printing the delim and it doesn't match anything.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are using list as compared to string</p>
<pre><code>import re
terms = ['The Beehive', '12. Bar 821', '13. Natives Bar', '14. Last Call Bar', '15. Scarlet Lounge', '16. Linden Room', '17. Rooftop 25']

delim = re.compile('\d+\.')
for term in terms:
    match = delim.search(term)
    if match:
        print(term[:match.end()]) #index
        print(term[match.end():]) #name
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/re.html#re.match" rel="nofollow noreferrer"><code>match()</code></a> function accepts only individual strings, so you have to iterate over <code>terms</code> separately:</p>
<pre><code>&gt;&gt;&gt; for term in terms:
...     match = re.match(r'^(?P&lt;index&gt;(\d+\. )?)(?P&lt;name&gt;.*)$', term)  # Return a match object which contains the named groups.
...     index, _, name = match.groups()  # Unpack the groups.
...     # index = match.group('index')
...     # name = match.group('name')
...     print(index, name)
... 
 The Beehive
12.  Bar 821
13.  Natives Bar
14.  Last Call Bar
15.  Scarlet Lounge
16.  Linden Room
17.  Rooftop 25
</code></pre>
<p>Also notice the use of <a href="https://docs.python.org/3/howto/regex.html#grouping" rel="nofollow noreferrer">groups</a> in the regular expression, which returns a <a href="https://docs.python.org/3/library/re.html#re.Match.groups" rel="nofollow noreferrer">Group</a> object with named matches.</p>
<p>Regarding whether to use the <code>r''</code> prefix or not, take a look at <a href="https://stackoverflow.com/questions/2241600/python-regex-r-prefix">this question</a> or this excerpt from the docs:</p>
<blockquote>
<p>The r prefix, making the literal a raw string literal, is needed […] because escape sequences in a normal “cooked” string literal that are not recognized by Python, as opposed to regular expressions, now result in a <code>DeprecationWarning</code> and will eventually become a <code>SyntaxError</code>. See <a href="https://docs.python.org/3/howto/regex.html#the-backslash-plague" rel="nofollow noreferrer">The Backslash Plague</a>.</p>
</blockquote>
</div>
<span class="comment-copy">Are you sure you didn't get any error at <code>delim = re.match('\d+\. ', terms)</code>. <code>terms</code> is a list and not a string</span>
<span class="comment-copy">There's something weird with my text string. It wasn't matching because the space was actually an invisible character <code>~</code>. This worked <code>delim = re.match(r'\d+\.~', terms[i])</code></span>
<span class="comment-copy">Except it wasn't a tilde. It appears grey in my text editor and I can't copy and paste it to stack exchange. it appears as nothing when I copy/paste outside the editor</span>
