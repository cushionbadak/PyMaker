<div class="post-text" itemprop="text">
<pre><code>class A:
    x=1
    def __add__(self, obj):
        if isinstance(obj,A):
            return self.x+obj.x
        return "False"

class B(A):
    x=2

a=A()
b=B()
print(a+b)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The add method takes <code>self</code>, the first object in the addition, and another one, <code>other</code>.</p>
<p>For example:</p>
<pre><code>class A:
    def __init__(self, x):
        self.x=x
    def __add__(self, obj):
        if isinstance(obj,A):
            return self.x+obj.x
        raise NotImplementedError

a = A(3)
b = A(4)
res = a + b  # this is essentially a.__add__(obj=b) 
             # self is implicitly the object a
# res == 7
</code></pre>
</div>
<span class="comment-copy">In the <code>__add__()</code> method, the <code>obj</code> argument is the <code>b</code> instance of class <code>B</code>.</span>
<span class="comment-copy">but while executing a=A() what gets passed into obj arguments?</span>
<span class="comment-copy">The <code>__add__</code> method is not called in <code>a = A()</code>.</span>
<span class="comment-copy"><code>The __add__ method is not called in a = A()</code> - so nothing is passed to the <code>obj</code> parameter.</span>
<span class="comment-copy">It isn't clear what your question is. <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#isinstance</a></span>
<span class="comment-copy">how does if isinstance condition gets satisfied as obj is instance of Class B?</span>
<span class="comment-copy">Well since B is a subclass of A, <code>isinstance</code> will still return <code>True</code>. Take a look at <a href="https://stackoverflow.com/questions/1549801/what-are-the-differences-between-type-and-isinstance">this great SO post</a></span>
