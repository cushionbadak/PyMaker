<div class="post-text" itemprop="text">
<p>I have written some fairly questionable code I'm sure, but it seems to do the job. The issue is that it is printing the data to a spreadsheet and in the column where I am hoping to find the vehicle's year if the first word in the advert isn't the year, then it displays the first word which could be the manufacturer. </p>
<p>Essentially i want to set if statements so that if the vehicle year isn't in the first word but is somewhere else in the string that it still finds it and prints it to my .csv. </p>
<p>Also, I have been struggling for a while to parse through multiple pages and was hoping that someone here could help with that too. The url has page=2 etc in it but I am not able to get it to parse through all url's and get the data on all pages. At the moment everything I have tried only does the first page. As you may have guessed, I am fairly new to Python. </p>
<pre><code>import csv ; import requests

from bs4 import BeautifulSoup

outfile = open('carandclassic-new.csv','w', newline='', encoding='utf-8')
writer = csv.writer(outfile)
writer.writerow(["Link", "Title", "Year", "Make", "Model", "Variant", "Image"])

url = 'https://www.carandclassic.co.uk/cat/3/?page=2'

get_url = requests.get(url)

get_text = get_url.text

soup = BeautifulSoup(get_text, 'html.parser')


car_link = soup.find_all('div', 'titleAndText', 'image')


for div in car_link:
    links = div.findAll('a')
    for a in links:
        link = ("https://www.carandclassic.co.uk" + a['href'])
        title = (a.text.strip())
        year = (title.split(' ', 1)[0])
        make = (title.split(' ', 2)[1])
        model = (title.split(' ', 3)[2])
        date = "\d"
        for line in title:
        yom = title.split()
        if yom[0] == "\d":
            yom[0] = (title.split(' ', 1)[0])
        else:
            yom = title.date

        writer.writerow([link, title, year, make, model])
        print(link, title, year, make, model)



outfile.close()
</code></pre>
<p>Please could someone help me with this? I realise that the if statements at the bottom may be way off. </p>
<p>The code successfully manages to get the first word from the string, it is just a shame that the way the data is structured that it isn't always the vehicle's year of manufacture (yom)</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Comment</strong> <code>"1978 Full restored Datsun 280Z"</code> becomes <code>'1978' '1978' '280Z'</code>.<br/>
     Rather than <code>'1978' 'Datsun' '280z'</code></p>
</blockquote>
<p>To improve the <code>year</code> validation, change to use the <code>re</code> module:</p>
<pre><code>import re

if not (len(year) == 4 and year.isdigit()):
    match = re.findall('\d{4}', title)
    if match:
        for item in match:
            if int(item) in range(1900,2010):
                # Assume year
                year = item
                break
</code></pre>
<blockquote>
<p>The output becomes:</p>
<pre><code>'1978 Full restored Datsun 280Z', '1978', 'Full', '280Z'  
</code></pre>
</blockquote>
<p>About the <em>false</em> result <code>make='Full'</code> you have <strong>two</strong> options.  </p>
<ol>
<li><p>Stop word list<br/>
Build a stop word list with terms like <code>['full', 'restored', etc.]</code> and <code>loop</code> the <code>title_items</code> to find the <strong>first</strong> item <strong>not</strong> in the stop word list.</p></li>
<li><p>Maker list<br/>
Build a Maker list like <code>['Mercedes', 'Datsun', etc.]</code> and <code>loop</code> the <code>title_items</code> to find the <strong>first</strong> matching item.</p></li>
</ol>
<hr/>
<blockquote>
<p><strong>Question</strong>: find the vehicle's year if the first word in the advert isn't the year</p>
</blockquote>
<p>Used <code>build-in</code> and <code>module</code>:  </p>
<ul>
<li><a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer">str.split(sep=None, maxsplit=-1)</a>, <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer">str.isdigit()</a> </li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer">class list([iterable])</a>,
<a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer">Mutable Sequence Types</a>, <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer">Common Sequence Operations</a> </li>
</ul>
<hr/>
<ul>
<li><p>Sample Titles used:</p>
<pre><code># Simulating html Element
class Element():
    def __init__(self, text): self.text = text

for a in [Element('Mercedes Benz 280SL 1980 Cabriolet in beautiful condition'),
          Element('1964 Mercedes Benz 220SEb Saloon Manual RHD')]:
</code></pre></li>
<li><p>Get the <code>title</code> from <code>&lt;a</code> <code>Element</code> and split it by <code>blanks</code>.</p>
<pre><code>    title = a.text.strip()
    title_items = title.split()
</code></pre></li>
<li><p>Defaults are <code>title_items</code> at index <code>0, 1, 2</code>.</p>
<pre><code>    # Default
    year = title_items[0]
    make = title_items[1]
    model = title_items[2]
</code></pre></li>
<li><p>Verify if the <code>year</code> met the condition <strong>4 digits</strong></p>
<pre><code>    # Verify 'year'
    if not (len(year) == 4 and year.isdigit()):
</code></pre></li>
<li><p>Loop all <code>item</code> in <code>title_items</code>, break if condition met.</p>
<pre><code>        # Test all items
        for item in title_items:
            if len(item) == 4 and item.isdigit():
                # Assume year
                year = item
                break
</code></pre></li>
<li><p>Change to assumed, <code>title_items</code> at index <code>0, 1</code> are <code>make</code> and <code>model</code></p>
<pre><code>        make = title_items[0]
        model = title_items[1]
</code></pre></li>
<li><p>Check if <code>model</code> starts with digit</p>
<blockquote>
<p><strong>Note</strong>: This will fail if a Model does not met this criteria!  </p>
</blockquote>
<pre><code>    # Condition: Model have to start with digit
    if not model[0].isdigit():
        for item in title_items:
            if item[0].isdigit() and not item == year:
                model = item

    print('{}'.format([title, year, make, model]))
</code></pre></li>
</ul>
<blockquote>
<p><strong>Output</strong>:  </p>
<pre><code>['Mercedes Benz 280SL 1980 Cabriolet in beautiful condition', '1980', 'Mercedes', '280SL']
['1964 Mercedes Benz 220SEb Saloon Manual RHD', '1964', 'Mercedes', '220SEb']
</code></pre>
</blockquote>
<p><strong><em>Tested with Python: 3.4.2</em></strong></p>
</div>
<span class="comment-copy">this is a broader question. <code>soup.find_all('div', 'titleAndText', 'image')</code> in your code is fetching inconsistent data types</span>
<span class="comment-copy">Hi Stovfl thanks so much for this, it seems to make sense but I can't seem to connect it with my code to make it work, might you be able to suggest where your code should be added to mine to make it work as it should?</span>
<span class="comment-copy">@BenWillis: Read <a href="https://stackoverflow.com/help/someone-answers">What should I do when someone answers my question?</a></span>
<span class="comment-copy">@BenWillis: Replace <b>all</b> inside your <code>for a in links:</code> block, except the <code>link = </code> and <code>writer.writerow(...</code> line.</span>
<span class="comment-copy">Hi @stovfl thanks, I have managed to get it sort of working. The only problem now is that some of the 'makes' and 'models' are using digits: 1978 Full restored Datsun 280Z becomes	'1978'	'1978'	'280Z'. Rather than '1978' 'Datsun' '280z'</span>
<span class="comment-copy">@BenWillis: Updated my Answer</span>
