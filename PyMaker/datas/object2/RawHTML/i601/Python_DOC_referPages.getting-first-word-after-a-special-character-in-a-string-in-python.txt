<div class="post-text" itemprop="text">
<p>I have some strings like this:</p>
<pre><code>s='@VirginAmerica it was amazing, and arrived an hour early.'
t='heyyyyy@VirginAmerica , am I dreaming?'
m='heyyyyy @VirginAmerica , am I dreaming?'
u=''
f='@United...'
h='@United@VirginAmerica'
</code></pre>
<p>I want to take out the word after @ in a data frame and delete this word from its data frame.
now I use this one for taking out the first word after @ but the result is not correct in all strings.</p>
<pre><code>s.split(' ', 1)[0]==&gt;correct==&gt;VirginAmerica
t.split(' ', 1)[0]==&gt;wrong==&gt;heyyyyy@VirginAmerica==&gt;'VirginAmerica' is correct 
m.split(' ', 1)[0]==&gt;correct==&gt;VirginAmerica
u.split(' ', 1)[0]==&gt;correct==&gt;''
f.split(' ', 1)[0]==&gt;wrong==&gt;@United...==&gt;'United' is correct
h.split(' ', 1)[0]==&gt;wrong==&gt;@United@VirginAmerica==&gt;I just want the first one
</code></pre>
<p>and for removing the word after @ and writing the whole string without @ and the word, I will receive these:</p>
<pre><code>s.split(' ', 1)[1]==&gt;correct==&gt;it was amazing, and arrived an hour early.
t.split(' ', 1)[1]==&gt;wrong==&gt;@VirginAmerica , am I dreaming?==&gt;'heyyyyy , am I dreaming?' is correct 
m.split(' ', 1)[1]==&gt;wrong==&gt;@VirginAmerica , am I dreaming?==&gt;VirginAmerica==&gt;'heyyyyy , am I dreaming?' is correct
u.split(' ', 1)[1]==&gt;wrong==&gt;IndexError: list index out of range==&gt; ''is correct
f.split(' ', 1)[1]==&gt;wrong==&gt;IndexError: list index out of range==&gt;'...' is correct
h.split(' ', 1)[1]==&gt;wrong==&gt;IndexError: list index out of range==&gt;'@VirginAmerica' is correct
</code></pre>
<p>could you please help me with this problem? it would be better to not use any library. but if it is the only choice, it is ok.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is your code with tests</p>
<pre><code>import re

s='@VirginAmerica it was amazing, and arrived an hour early.'
t='heyyyyy@VirginAmerica , am I dreaming?'
m='heyyyyy @VirginAmerica , am I dreaming?'
u=''
f='@United...'
h='@United@VirginAmerica'

def find_match(str):
  res = re.search('@(\w+)', str)
  if not res:
    return ''
  return res.group(1)

def sub_match(str):
  return re.sub('^[^@]*@\w+', '', str)

assert find_match(s) == 'VirginAmerica'
assert find_match(t) == 'VirginAmerica'
assert find_match(m) == 'VirginAmerica'
assert find_match(u) == ''
assert find_match(f) == 'United'
assert find_match(h) == 'United'

assert sub_match(s) == ' it was amazing, and arrived an hour early.'
assert sub_match(t) == ' , am I dreaming?'
assert sub_match(m) == ' , am I dreaming?'
assert sub_match(u) == ''
assert sub_match(f) == '...'
assert sub_match(h) == '@VirginAmerica'
</code></pre>
<h2>find_match(str)</h2>
<p>The core idea is to use regexp.</p>
<p>We are looking for the first word which starts with <code>@</code> sign. It's easy to describe with next regexp </p>
<p>=&gt; <code>@\w+</code></p>
<p>where <code>@</code> means match the exact character and <code>\w+</code> match 1 or more word characters<a href="https://docs.python.org/3/library/re.html#index-31" rel="nofollow noreferrer">(docs explanation for this)</a>. </p>
<p>And also we use <code>()</code> to pick the resulting group, as we interested in a word without <code>@</code> we wrap <code>\w+</code> only</p>
<p>=&gt; <code>@(\w+)</code></p>
<h2>sub_match(str)</h2>
<p>It uses the same idea for regexp but it's a little bit tricker because of the case with the first match of <code>@</code> character. </p>
<p>For that purposes first, we match all chars which are not <code>@</code> -&gt; <code>[^@]*</code> regexp part, and then we use the same regexp which we used in <code>find_match(str)</code> but without group as we just need to replace the whole thing with <code>@</code>. </p>
<p><strong>PS</strong>
Link to launch the code in web  <a href="https://repl.it/repls/SinfulWhichSynergy" rel="nofollow noreferrer">https://repl.it/repls/SinfulWhichSynergy</a>
Here you can test <a href="https://pythex.org/?regex=%5E%5B%5E%40%5D*%40%5Cw%2B&amp;test_string=%40VirginAmerica%20it%20was%20amazing%2C%20and%20arrived%20an%20hour%20early.%0A&amp;ignorecase=0&amp;multiline=0&amp;dotall=0&amp;verbose=0" rel="nofollow noreferrer">your python regexps and practice with</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>Another implementation using regex, this gets the word following <code>@</code> from the string.</p>
<pre><code>import re

s='@VirginAmerica it was amazing, and arrived an hour early.'
t='heyyyyy@VirginAmerica , am I dreaming?'
m='heyyyyy @VirginAmerica , am I dreaming?'
u=''
f='@United...'
h='@United@VirginAmerica'

for text in [s, t, m, u, f, h]:
    print(re.findall(r'@(\w+)', text))
</code></pre>
<p>this prints</p>
<pre><code>['VirginAmerica ']
['VirginAmerica ']
['VirginAmerica ']
[]
['United']
['United', 'VirginAmerica']
</code></pre>
<p>Also it's good to note, <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">re</a> is a  standard python library so you are not using anything that isn't included with python already.</p>
<p>If you don't want to use regex you can use split still but something like this will result in the same as the above:</p>
<pre><code>s='@VirginAmerica it was amazing, and arrived an hour early.'
t='heyyyyy@VirginAmerica , am I dreaming?'
m='heyyyyy @VirginAmerica , am I dreaming?'
u=''
f='@United...'
h='@United@VirginAmerica'

for text in [s, t, m, u, f, h]:
    _, *words = text.split('@')
    print([words.split()[0] for word in words])
</code></pre>
<p><strong>Edit</strong></p>
<p>As per your comment, to get the first occurence of the word following <code>@</code> for example the first word <code>'united'</code> in <code>h</code> just use list slicing <em>(just be sure to make sure there is at least one word that matches the regex otherwise use a try except block)</em></p>
<pre><code>h='@United@VirginAmerica'
re.sub(r'@(\w+)' h)[0]
#United
</code></pre>
<p>To get the word without the first occurence of the @word use <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">sub</a> I also included a space and question mark after it to remove a space so it looks right when printed. <em>(if you want it to print all of the occurences removed just remove <code>count</code> from this method)</em></p>
<pre><code>s='@VirginAmerica it was amazing, and arrived an hour early.'
re.sub(r'@(\w+) ?', '', s, count=1)
#it was amazing, and arrived an hour early.
</code></pre>
<p>I have everything I did in a repl.it <a href="https://repl.it/repls/PrestigiousPersonalToolbox" rel="nofollow noreferrer">give it a try</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This answer just uses simple python functions, and tries not to be 'pythonic' since this can be confusing for beginners.</p>
<p>Basically it looks for an <code>@</code> in the sentence with <code>sentence.find('@')</code>, which returns the location index of the first occurrence of '@', or <code>-1</code>.  One of the things not mentioned in the OP's question, is what constitutes an "@word" - more importantly <em>where does it stop</em>.  I added the <code>WORD_END</code> constant to hold all the letters that denote the end of a word.  So the function finds an "@word" from the first <code>@</code> and up to the first character in <code>WORD_END</code>.</p>
<p>One other point to note, is that there is no test case where there is no '@' in the sentence.</p>
<pre><code>#! /usr/bin/env python3

TESTS=['@VirginAmerica it was amazing, and arrived an hour early',
        'heyyyyy@VirginAmerica , am I dreaming?',
        'heyyyyy @VirginAmerica , am I dreaming?',
        '',
        '@United...',
        '@United@VirginAmerica',
        'no-at-word' ]

def removeMarkedWords(sentence):
    # A word ends with
    WORD_END=' \t\r\n,.;:&lt;&gt;?/+!@#$%^&amp;*()|\}][{\"\'='
    result = ''

    # is there an @word?
    at_location = sentence.find('@')
    if ( at_location == -1 ):
        result = sentence
    else:
        while ( at_location != -1 ):
            if ( at_location &gt; 0 ):
                result += sentence[0:at_location]  # keep the sentence prefix (before the '@')
                sentence = sentence[at_location:]  # remove the prefix
            else:
                # The sentence begins '@something...'
                # Find the end of the @word by finding the first non-word letter
                index = 1
                while ( index &lt; len(sentence) and sentence[index] not in WORD_END ):
                    index += 1
                # trim off the @word (and throw it away)
                sentence = sentence[index:]
                #print( "DEBUG sentence = [" + sentence + "]" )
            # is there another @word?
            at_location = sentence.find('@')
            if ( at_location == -1 ):
                result += sentence  # no more @words, just keep the tail
    return result


for test in TESTS:
    print( "[%s]-&gt;[%s]" % ( test, removeMarkedWords( test ) ) )
</code></pre>
<p>Giving the result:</p>
<pre><code>[@VirginAmerica it was amazing, and arrived an hour early]-&gt;[ it was amazing, and arrived an hour early]
[heyyyyy@VirginAmerica , am I dreaming?]-&gt;[heyyyyy , am I dreaming?]
[heyyyyy @VirginAmerica , am I dreaming?]-&gt;[heyyyyy  , am I dreaming?]
[]-&gt;[]
[@United...]-&gt;[...]
[@United@VirginAmerica]-&gt;[]
[no-at-word]-&gt;[no-at-word]
</code></pre>
</div>
<span class="comment-copy">What happens to the <code>@</code> symbol? None of the examples work for me (except <code>u</code>).</span>
<span class="comment-copy">it will be deleted</span>
<span class="comment-copy">But the <code>@</code> is not deleted in your examples, so they are incorrect.</span>
<span class="comment-copy">Thanks for your response. How can I do the second part of my question? writing out the string without @first_word</span>
<span class="comment-copy">@CFD I extended the answer to contain the second part of your question 😉</span>
<span class="comment-copy">Thanks a lot...it works well</span>
<span class="comment-copy">I just noticed I did it wrong the first time, he was looking for the words not the sentences without them</span>
<span class="comment-copy">Thanks for your response. How can I get just the first word after @? for example for 'h' , I dont want to have both words.  Moreover, do you know how to do the second part which I mentioned? removing @first_word from the string and writing the remainning part of string</span>
<span class="comment-copy">See my edit at the end of the answer</span>
