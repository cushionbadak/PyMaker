<div class="post-text" itemprop="text">
<p>I'm trying to create a max heap by negating all the values of a list, but it doesn't seem to be working:</p>
<pre><code>import heapq
x = range(1,10)
neg = [-n for n in x]
heapq.heappop(neg) # -1
heapq.heappop(neg) # -9
heapq.heappop(neg) # -8
</code></pre>
<p>Yet if I do</p>
<pre><code>heapq.heappop(x) # 1
heapq.heappop(x) # 2
heapq.heappop(x) # 3
</code></pre>
<p>It seems to work correctly. Any idea as to why -1 is returning?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should not use <code>heappush/heappop</code> unless you have the heap invariant maintained in the first place.</p>
<p>To create a heap from an existing list, use <code>heapq.heapify(mylist)</code>.</p>
<pre><code>&gt;&gt;&gt; neg = [-n for n in range(1,10)]
&gt;&gt;&gt; neg[0]  # peek
-1
&gt;&gt;&gt; heapq.heapify(neg)
&gt;&gt;&gt; neg[0]  # peek
-9
&gt;&gt;&gt; -heapq.heappop(neg)  # largest element
9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>heapq.heappop</code> is <em>only</em> for minheaps; you can't just make a maxheap and expect minheap based functions to work on it, because it doesn't observe the minheap invariant.</p>
<p>If the goal is to pop off -9 first, you need to make your heap support the proper invariants, by (efficiently, <code>O(n)</code>) heapifying it first:</p>
<pre><code>heapq.heapify(neg)
</code></pre>
<p>after which your code will pop from -9 down to -1.</p>
<p>If you're trying for a maxheap, that's not supported. <a href="https://docs.python.org/3/library/heapq.html" rel="nofollow noreferrer">All the publically documented <code>heapq</code> functions work with minheaps</a> (emphasis added):</p>
<blockquote>
<p>The API below differs from textbook heap algorithms in two aspects: (a) We use zero-based indexing. This makes the relationship between the index for a node and the indexes for its children slightly less obvious, but is more suitable since Python uses zero-based indexing. (b) <strong>Our pop method returns the smallest item, not the largest (called a “min heap” in textbooks; a “max heap” is more common in texts because of its suitability for in-place sorting).</strong></p>
</blockquote>
<p>There are a few selected (and undocumented) maxheap based functions in the module that will work, e.g. <code>heapq._heappop_max</code>, but they're not a documented part of the API, and could change or disappear at any time.</p>
</div>
<span class="comment-copy">Yeah but if I do <code>x = heapq.heapify(mylist)</code>, then try to do <code>heapq.heappop(x)</code>, I get <code>TypeError: heap argument must be a list</code></span>
<span class="comment-copy">because <code>heapify</code> operates in-place and returns <code>None</code>.</span>
<span class="comment-copy">@AlanH <code>heapify</code> returns <code>None</code></span>
<span class="comment-copy">@AlanH, the <code>heapify</code> is basically changing your list <code>neg</code>, but doesn't return the changed list so you can't assign it to another variable. If you don't want that, make a copy of your list like <code>neg_new=neg.copy()</code> and do a <code>heapify</code> on the new list.</span>
<span class="comment-copy">minheap is just maxheap from the other end, negating the elements is a perfectly valid way to do it.  Perhaps even the canonical way.</span>
<span class="comment-copy">@wim: Yeah, I reread and realized the negation may have been intended to simulate a maxheap using minheaps, so I updated to cover both possibilities.</span>
