<div class="post-text" itemprop="text">
<p>I am new to this field, this script is used to get 80% of data randomly into training list, and the rest 20% in testing list. This script works, but I have a few questions about why it works.
If len(data) is 1000, then randn(1000) will generate 1000 random number with normal distribution. What I do not understand are:
1)I test myself such as [1,2,3,4,5,6,7,8,9,10]&lt;5 I got an error,because the left operator is a list.But why check=a&lt;0.8 legal, a should be a list of 1000 elements?</p>
<pre><code>import pandas as pd
import numpy as np 
data = pd.read_csv('E:/Personal/Learning/Datasets/Book/Customer ChurnModel.txt')
len(data)
a=np.random.randn(len(data))
check=a&lt;0.8
training=data[check]
testing=data[~check]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>NumPy arrays overload the comparison operators to perform the operation per-element, not per container.</p>
<p>In other words,</p>
<pre><code>check=a&lt;0.8
</code></pre>
<p>will create a new NumPy array <code>check</code> of the same length as <code>a</code> such that:</p>
<pre><code>check[i] = a[i] &lt; 0.8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well check variable works as a boolean object and in the code the line for that is only an assignation. 
In other hand, the comparison with two objects have to be the same type.
type([1,2,3,4,5,6,7,8,9,10]) --&gt; 'list' object
type(5) --&gt; 'int' object</p>
</div>
<div class="post-text" itemprop="text">
<p>In contrast with the built-in types such as <code>list</code>, <code>numpy</code> arrays take advantage of the Python rich comparison system by overriding the comparison operators. This is in order to allow comparison with atomic types, numpy-array-like types, etc. The rich comparison operators return new arrays (rather than just a <code>True</code> or <code>False</code>).</p>
<p>Anyone can write a class that <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">does custom comparisons</a> like <code>numpy</code> arrays. </p>
<p>Helpful tip: if you use <a href="https://docs.python.org/3/library/functools.html" rel="nofollow noreferrer"><code>functools.total_ordering</code></a>, you only have to <a href="https://docs.python.org/3/reference/datamodel.html#customization" rel="nofollow noreferrer">provide two methods</a>, such as, <code>__eq__</code> and <code>__lt__</code>: </p>
<pre><code>import functools

@functools.total_ordering
class Mine:
    def __eq__(self, other):
        ...
    def __lt__(self, other):
        ...
</code></pre>
<p>The remaining methods are sort-of automatically intuited when you provide correct behavior for these two. However in practice, to get a class working the way you want, one will often find it is needed to customize the behaviors of the other rich comparison methods: <code>__ne__</code>, <code>__gt__</code>, <code>__le__</code>, and <code>__ge__</code>.</p>
</div>
<span class="comment-copy">so you are saying a is not a standard list?</span>
<span class="comment-copy">Yes, the return type of np.random.randn is numpy.ndarray, not list.</span>
<span class="comment-copy">That's right, NumPy arrays are a different type from standard Python lists. Generally NumPy operations can work with both, but there is often a performance cost to use a Python list.</span>
