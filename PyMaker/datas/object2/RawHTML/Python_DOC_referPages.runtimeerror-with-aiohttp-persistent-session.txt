<div class="post-text" itemprop="text">
<p>I just started with aiohttp and ran into an issue that I can't seem to figure out.</p>
<p>I create a persistent session. </p>
<p><code>session = aiohttp.ClientSession(headers=headers)</code></p>
<pre><code>async def fetch(url):
    async with session.get(url) as resp:
        return await resp.json()

async def run():
    task = asyncio.create_task(fetch('https://someurl'))
    await task
</code></pre>
<p>When I call <code>run()</code> my program crashes with following traceback. </p>
<pre><code>RuntimeError: Timeout context manager should be used inside a task
</code></pre>
<p>I don't get any traceback and the func executes fine when I don't use a persistent session. That is, <code>run</code> executes as expected when I define <code>fetch</code> as following. </p>
<pre><code>async def fetch(url):
    async with aiohttp.ClientSession(headers=headers) as see:
        async with session.get(url) as resp:
            return await resp.json()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You'll need to move <code>session = ...ClientSession</code> to inside <code>fetch</code>, you'd also be better off using <code>async with</code> when creating the session.</p>
<p>Something like </p>
<pre><code>async def fetch(url):
    async with aiohttp.ClientSession(headers=headers) as session:
        async with session.get(url) as resp:
            return await resp.json()

async def run():
    task = asyncio.create_task(fetch('https://someurl'))
    await task
</code></pre>
<p><strong>Updated, more complete example:</strong></p>
<pre><code>class Foboar():
    def __init__(self):
        self.session = None

    async def run(self):
        self.session = aiohttp.ClientSession(headers=headers)
        try:
            for url in all_my_urls:
                await self.fetch(url)
        finally:
            await self.session.close()

    async def fetch(self, url):
        async with self.session.get(url) as resp:
            return await resp.json()
</code></pre>
</div>
<span class="comment-copy"><code>def run</code> is not <code>async</code>, so you can't use <code>await</code> inside it. Maybe the formatting of post is wrong?</span>
<span class="comment-copy">Yes, I omitted <code>async</code> keyword while posting the question. I've made edits to my original post.</span>
<span class="comment-copy">This works but then I end up creating a new session for every request I make. How can I persist a session for reuse rather creating a new session everytime I call <code>fetch</code></span>
<span class="comment-copy">yes, so create the session in <code>run</code> and pass it to every <code>fetch</code> call. Look at the main example <a href="http://docs.aiohttp.org/en/stable/" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">As per <a href="https://docs.aiohttp.org/en/stable/client_quickstart.html#json-response-content" rel="nofollow noreferrer">docs.aiohttp.org/en/stable/â€¦</a>, session context manager is not required which is what I am doing. Moreover, the approach you suggest still creates a new session whenever <code>run</code> is called. I want to create a <code>session</code> per-site like initializing <code>self.session = aiohttp.ClientSession()</code> when my HttpClient is initialized.</span>
<span class="comment-copy">sorry, I was hurrying, updated with a more complete example implementing <code>self.session</code>.</span>
<span class="comment-copy">How is it different than my original question? After <code>run</code> is called, <code>self.session</code> will be bound to an instance of <code>aiohttp.ClientSession</code> and in my code I bind <code>session</code> to <code>aiohttp.ClientSession</code> before I call <code>run</code>. The only way I have been able to get my code to work is if I pass <code>timeout=None</code> but seeing other issues.</span>
