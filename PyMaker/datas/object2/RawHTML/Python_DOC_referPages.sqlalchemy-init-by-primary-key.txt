<div class="post-text" itemprop="text">
<p>I’m writing a sqlalchemy based python app. I want to override the sqlalchemy init method which will accept a primary key and then init it’s own instance. </p>
<p>Something like this: </p>
<pre><code>class User(Base):
    id = Column(String, primary_key=True)
    name = Column(String)

    def __init__(id):
        self = session.query(User).filter(User.id=id).first()
</code></pre>
<p>I know I can initialize the object using session.query, but I want to export a nice simple api that will be used by other users (It’s going to be a SDK).</p>
<p>Any ideas? Thanks! </p>
</div>
<div class="post-text" itemprop="text">
<p>You <em>can</em> do this via the init method, though I would recommend against it.</p>
<p>There are two issues with your code snippet.</p>
<ol>
<li>You forgot to include the <code>self</code> argument as the first argument of the <code>__init__</code> method</li>
<li>Assigning to self would not work, but you can replace the dictionary of <code>self</code> with that of other</li>
</ol>
<p>putting these two things together:</p>
<pre><code>class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String)

    def __init__(self, user_id):
        res = session.query(User).filter(User.id == user_id).first()
        self.__dict__ = res.__dict__
</code></pre>
<p>However, I'd recommend adding a classmethod for this very specific but oft-repeated usage, i.e. getting an instance from the database by the primary_key</p>
<pre><code>@classmethod
def get_by_id(cls, key):
    return session.query(cls).filter(cls.id == key).first()
</code></pre>
<p>This way it is general to all your classes that have a single column primary key.</p>
<p>The usage for these versions would be</p>
<pre><code>u1 = User(user_id=1)
u2 = User.get_by_id(key=1)
</code></pre>
</div>
