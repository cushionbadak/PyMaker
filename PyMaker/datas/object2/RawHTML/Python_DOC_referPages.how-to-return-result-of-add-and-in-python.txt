<div class="post-text" itemprop="text">
<p>I'm trying to write a function that will sum values in a for loop.</p>
<p>I've tried:</p>
<pre><code>def get_total_items(self):
    return totalnum = totalnum + item['quantity'] for item in self.cart.values()
</code></pre>
<p>I am getting a syntax error, however I am unsure why as this seems correct to me.</p>
</div>
<div class="post-text" itemprop="text">
<p>The correct way to do this is <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">the <code>sum</code> function</a> with a generator expression. A generator expression is similar to the loop you were trying for, but bounded by parentheses (which can be the same as the call parens when it's the only argument, as with <code>sum</code>):</p>
<pre><code>def get_total_items(self):
    return sum(item['quantity'] for item in self.cart.values())
</code></pre>
<p>Note that <code>totalnum</code> is never assigned (you can't assign as part of a <code>return</code>), but it doesn't have to be; the value from <code>sum</code> is returned directly without storing it in a named variable at all.</p>
<p>If <code>totalnum</code> is some existing global that must be updated, you'll need to split this into three lines, one to declare <code>totalnum</code> a global (so it doesn't become a local due to being assigned), one to increment <code>totalnum</code>, one to <code>return</code> it:</p>
<pre><code>def get_total_items(self):
    global totalnum
    totalnum += sum(item['quantity'] for item in self.cart.values())
    return totalnum
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use existing <code>sum()</code> function.</p>
<pre><code>sum(item['quantity'] for item in self.cart.values())
</code></pre>
<p>Or, if you need a starting value:</p>
<pre><code>sum((item['quantity'] for item in self.cart.values()), 1000.0) #start summing with 1000.0
</code></pre>
<p>If you absolutely must implement it yourself:</p>
<pre><code>def get_total_items(self):
    totalnum = 0
    for item in self.cart.values():
        totalnum += item['quantity'] 
    return totalnum
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3/reference/simple_stmts.html#return" rel="nofollow noreferrer">[Python 3]: The <em>return</em> statement</a>:</p>
<blockquote>
<p><strong>return_stmt</strong> ::=  "return" [<a href="https://docs.python.org/3/reference/expressions.html#grammar-token-expression-list" rel="nofollow noreferrer">expression_list</a>]</p>
</blockquote>
<p><code>totalnum = totalnum + item['quantity'] for item in self.cart.values()</code> is not an expression but a statement, hence the <em>SynraxError</em>.</p>
<p>One way of doing it, is using <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">[Python 3]: <strong>sum</strong>(<em>iterable[, start]</em>)</a>:</p>
<pre class="lang-py prettyprint-override"><code>def get_total_items(self):
    return sum(item["quantity"] for item in self.cart.values())
</code></pre>
<p>The "old style" approach:</p>
<pre class="lang-py prettyprint-override"><code>def get_total_items(self):
    totalnum = 0
    for item in self.cart.values():
        totalnum += item["quantity"] 
    return totalnum
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you do it like this:</p>
<pre><code>def get_total_items(self):
    for item in self.cart.values():
        totalnum += item['quantity']
    return totalnum
</code></pre>
</div>
<span class="comment-copy">I'm assuming <code>self.cart</code> is a <code>dict</code>, are the values <i>also</i> <code>dicts</code>?</span>
<span class="comment-copy">are you trying to return the sum of the list</span>
<span class="comment-copy">How is your cart defined?</span>
<span class="comment-copy">Ah, thankyou.totalnum is not a global, I was just trying to assign it as part of return. I am trying to use sum with item['quantity'] but it is always returning 0, and it should be returning at least one.</span>
<span class="comment-copy">@JakeRankin: If it's always returning zero, <code>self.cart</code> is either empty, all the quantities are zero, or you somehow managed to have negative quantities that cancel out the positive quantities. Try a loop: <code>for item in self.cart.values(): print(item['quantity'])</code>; I suspect you'll find one of those to be the case (the less likely possibility is that the variable you're checking was initialized to zero, you're getting an exception here, e.g. because some <code>item</code> doesn't even have a <code>quantity</code>, and you're catching and ignoring the exception, then seeing the unmodified zero).</span>
<span class="comment-copy">Yes got it working now, thank you!</span>
<span class="comment-copy">Along with being (typically) slower than <code>sum</code>, this is guaranteed to die with an <code>UnboundLocalError</code>; you'd need to add either <code>global totalnum</code> or <code>totalnum = 0</code> at the top of the function to use a global variable of that name or initialize a local of that name respectively.</span>
