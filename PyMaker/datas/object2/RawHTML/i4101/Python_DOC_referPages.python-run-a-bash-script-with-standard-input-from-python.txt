<div class="post-text" itemprop="text">
<p>I have a bash script file called g2p which runs as following:</p>
<pre><code>$echo "teststring" | ./g2p @g2pumap=./map.txt
</code></pre>
<p>Now I am writing a python script using python 2.6, I need to run this bash script( g2p) inside python.</p>
<p>I checked this answer:<a href="https://stackoverflow.com/questions/17242828/python-subprocess-and-running-a-bash-script-with-multiple-arguments?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa">Python: subprocess and running a bash script with multiple arguments</a></p>
<p>I wrote:</p>
<pre><code>import subprocess

val = subprocess.check_call(["./eng_GBR/g2p",  "./map.txt"],  shell=True) 
</code></pre>
<p>my problem is how to send standard input to g2p (bash script) inside python code, and also I get a bit confused about pass value to @g2pumap argument.</p>
</div>
<div class="post-text" itemprop="text">
<p><em>The restriction to Python2.6 was added to the question later on. A portable solution is at the end of this answer.</em></p>
<hr/>
<p>Since Python 3.5, <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run</code></a> should match most "call program with X" use cases. It's <code>input</code> parameter does what you want:</p>
<blockquote>
<p>The <code>input</code> argument is passed to [...] the subprocessâ€™s stdin.</p>
</blockquote>
<p>You can feed it a <em>bytes</em> string directly:</p>
<pre><code>import subprocess

g2p_process = subprocess.run(["./eng_GBR/g2p",  "@g2pumap=./map.txt"], input=b'teststring\n')
</code></pre>
<p>This is equivalent to your bash call. Note that you must add appropriate newlines (<code>b"\n"</code> at the end) by yourself. Any arguments, such as <code>@g2pumap=./map.txt</code>, can be passed in without escaping.</p>
<p>If you want to have the Exception of <code>check_call</code>, use <code>g2p_process.check_returncode()</code> afterwards.</p>
<hr/>
<p>If you are stuck with an older version or need backwards compatibility, using a bare <code>subprocess.Popen</code> is the most portable. The following should handle your use case:</p>
<pre><code>import subprocess

g2p_process = subprocess.Popen(
    ["./eng_GBR/g2p", "@g2pumap=./map.txt"],
    stdin=subprocess.PIPE,  # allow sending data via STDIN
)
g2p_process.communicate(input="teststring\n")
if g2p_process.returncode != 0:
    raise RuntimeError
</code></pre>
<p>Note that you can also capture stdout and stderr if you need to. Use <code>stdout=subprocess.PIPE</code> and/or <code>stderr=subprocess.PIPE</code> in the call to <code>Popen</code>. Doing so lets <code>g2p_process.communicate</code> return a meaningful tuple of <code>(stdoutdata, stderrdata)</code>.</p>
<p>See the <code>subprocess.Popen</code> <a href="https://docs.python.org/2/library/subprocess.html#popen-objects" rel="nofollow noreferrer">method docs</a> on how to work with such an object. It is usually a good idea to check its <code>returncode</code>, or <code>kill</code> dangling processes. You can also replicate <a href="https://github.com/python/cpython/blob/3.7/Lib/subprocess.py#L453" rel="nofollow noreferrer"><code>subprocess.run</code></a> if you feel like it, since it does proper error handling.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import subprocess

value1=...
value2=...
......

val = subprocess.check_call(["path/script.sh",  value1+" "+value2+" "+ .... ],  shell=True) 
</code></pre>
</div>
<span class="comment-copy">Sinec I am using python 2.6.6 , it does not have this attribute, I think I should use "subprocess.call/check_call""</span>
<span class="comment-copy">You should point out that version restriction in your question. Python 2.6.6 is <i>seriously</i> outdated.</span>
<span class="comment-copy">I think Python 2.6 is halfway <i>ancient</i>. People only use 2.7 and 3.x nowadays.</span>
<span class="comment-copy">People with a <i>choice</i> use 2.7 or 3.x. But yes, 2.6 is old enough to warrant special mention.</span>
<span class="comment-copy">@Zeinab I have added a version that works with Python 2.4 - 3.X.</span>
