<div class="post-text" itemprop="text">
<p>I have a string with 50ish elements, I need to randomize this and generate a much longer string, I found <code>random.sample()</code> to only pick unique elements, which is great but not fit for my purpose, is there a way to allow repetitions in Python or do I need to manyally build a cycle?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.random.choice.html" rel="nofollow noreferrer"><code>numpy.random.choice</code></a>. It has an argument to specify how many samples you want, and an argument to specify whether you want replacement. Something like the following should work.</p>
<pre><code>import numpy as np
choices = np.random.choice([1, 2, 3], size=10, replace=True)
# array([2, 1, 2, 3, 3, 1, 2, 2, 3, 2])
</code></pre>
<p>If your input is a string, say something like <code>my_string = 'abc'</code>, you can use:</p>
<pre><code>choices = np.random.choice([char for char in my_string], size=10, replace=True)
# array(['c', 'b', 'b', 'c', 'b', 'a', 'a', 'a', 'c', 'c'], dtype='&lt;U1')
</code></pre>
<p>Then get a new string out of it with:</p>
<pre><code>new_string = ''.join(choices)
# 'cbbcbaaacc'
</code></pre>
<h2>Performance</h2>
<p>Timing the three answers so far and <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.choices</code></a> from the comments (skipping the <code>''.join</code> part since we all used it) producing 1000 samples from the string <code>'abc'</code>, we get:</p>
<ul>
<li><p><code>numpy.random.choice([char for char in 'abc'], size=1000, replace=True)</code>:</p>
<blockquote>
<p>34.1 µs ± 213 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)</p>
</blockquote></li>
<li><p><code>random.choices('abc', k=1000)</code></p>
<blockquote>
<p>269 µs ± 4.27 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</p>
</blockquote></li>
<li><p><code>[random.choice('abc') for x in range(1000)]</code>:</p>
<blockquote>
<p>924 µs ± 10.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</p>
</blockquote></li>
<li><p><code>[random.sample('abc',1)[0] for _ in range(1000)]</code>:</p>
<blockquote>
<p>4.32 ms ± 67.3 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</p>
</blockquote></li>
</ul>
<p>Numpy is fastest by far. If you put the <code>''.join</code> parts in there, you actually see numpy and <code>random.choices</code> neck and neck, with both being three times faster than the next fastest for this example.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this:</p>
<pre><code>import random
dict = 'abcdef'
''.join([random.choice(dict) for x in range(50)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not saying this is the most effective (you should prob. use choice here) ... but consider it:</p>
<pre><code>import random
a = ['a','b','c']
' '.join([random.sample(a,1)[0] for _ in range(6)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have found this, I forgot to mention I was on Python 3.6:</p>
<pre><code>DICTIONARY_NUMBERS_HEX = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']
block_text = "".join(random.choices(DICTIONARY_NUMBERS_HEX,k=50)
</code></pre>
<p>Using <code>k=50</code> named argument will generate repeated elements.</p>
</div>
<span class="comment-copy">Why doesnt random.sample() fit your purpose exactly?</span>
<span class="comment-copy">@AntonvBR it picks uniques, so if my list lenght is K and I need any number greater than K it gives an error, does not allor repetition.</span>
<span class="comment-copy">If one of the provided answers works for you, please mark it as accepted.</span>
<span class="comment-copy">did you test <code>random.choices</code> with <code>k</code> argument to indicate the lenght?</span>
<span class="comment-copy">I got <code>269 us +/- 6.43 us</code> per loop for <code>random.choices([char for char in 'abc'], k=1000)</code>. Numpy is still fastest.</span>
