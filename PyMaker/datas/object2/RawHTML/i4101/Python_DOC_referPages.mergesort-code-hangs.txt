<div class="post-text" itemprop="text">
<p>I'm trying to implement mergesort. I have a working merge subfunction that works on sorted lists, and just need to manage the merging of all the lists properly.</p>
<pre><code>def mergesort(alist):
    alist = [[i] for i in alist]

    def merge(clist, dlist): #assume inputs are sorted
        merged = []
        while True:
            if len(clist) == 0:
                return merged + dlist
            elif len(dlist) == 0:
                return merged + clist
            elif clist[0] &lt; dlist[0]:
                merged.append(clist[0])
                del clist[0]
            elif clist[0] &gt; dlist[0]:
                merged.append(dlist[0])
                del dlist[0]            
        return merged

    while True:
        if len(alist) % 2 == 0 and len(alist) &gt; 2:
            alist = [merge(alist[2*i], alist[2 * i + 1]) for i in range(int(len(alist)/2))]
        elif len(alist) == 2:
            print('ayyy')
            alist = merge(alist[0], alist[-1])
            return alist
        elif len(alist) % 2 == 1 and len(alist) &gt; 1:
            tag = alist[-1]
            del alist[-1]
            alist = [merge(alist[2 * i], alist[2 * i + 1]) for i in range(int(len(alist)/2))]
            alist.append(tag)
        else:
            return alist


print(mergesort([10, 5, 8, 16, 258, 11, 1, 20, 489, 10, 5, 3, 12]))
</code></pre>
<p>The function works fine until it's down to the last two lists. It prints 'ayyy', which means it made it into the first elif statement, then does nothing else. The program doesn't terminate, it just spins its wheels. Debugger shows that the value of <code>alist</code> isn't updated either.</p>
</div>
<div class="post-text" itemprop="text">
<p>You only have one small error, because you don't deal with equal elements in <code>merge</code>. Here is a small fix:</p>
<pre><code>if len(clist)==0:
    return merged+dlist
elif len(dlist)==0:
    return merged+clist
elif clist[0]&lt;dlist[0]:
    merged.append(clist[0])
    del clist[0]
elif clist[0]&gt;dlist[0]:
    merged.append(dlist[0])
    del dlist[0]
else: # clist[0]==dlist[0]
    merged.append(clist[0])
    merged.append(dlist[0])
    del clist[0]
    del dlist[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I couldn't resist the temptation to rewrite <code>merge</code> using iterators, in a fashion that doesn't mutate the argument lists. </p>
<pre><code>def merge(clist, dlist):
    "Merges two sorted lists into one still sorted list"
    if not clist:      # Trivial empty cases
        return dlist
    if not dlist:
        return clist
    cs = iter(clist)   # Iterators produce each item only once
    ds = iter(dlist)
    c = next(cs)
    d = next(ds)
    result = []
    while True:
        if c &lt;= d:
            result.append(c)
            try:
                c = next(cs)
            except StopIteration:  # exhausted c before d
                result.append(d)
                result.extend(ds)
                return result
        else:  # c &gt; d
            result.append(d)
            try:
                d = next(ds)
            except StopIteration:
                result.append(c)
                result.extend(cs)
                return result
</code></pre>
<p>Clearly this could be unified by treating the lists equally. This particular version prefers placing items from the first list first.</p>
<p>Note that <code>del somelist[0]</code> is the most expensive item deletion operation; it moves all entries except the first. <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer">deque</a>s support a more efficient popleft method (but are more costly when you create many small instances, and the mergesort does). </p>
</div>
<span class="comment-copy">You have do equal elements (5 &amp; 5). The inner merge function can't handle them and so loops forever.</span>
<span class="comment-copy">Would it also work to change '&gt;' to '&gt;=' in the last elif statement? Is one method better?</span>
<span class="comment-copy">@kubleeka You can do that, but my method would save one cycle. But outside of that, but methods are ok.</span>
<span class="comment-copy">There could be items that are equal but distinct (for instance, prioritised). In that case, this version does a <a href="https://en.wikipedia.org/wiki/Merge_(traffic)" rel="nofollow noreferrer">zipper merge</a> while <code>&lt;=</code> or <code>&gt;=</code> would prefer exhausting one specific list.</span>
