<div class="post-text" itemprop="text">
<p>I was reading about <code>Queue</code> in the <a href="https://docs.python.org/3/library/queue.html" rel="nofollow noreferrer">Python documentation</a> and <a href="https://pymotw.com/3/queue/#building-a-threaded-podcast-client" rel="nofollow noreferrer">this book</a>, and I don't fully understand why my thread hangs. I have the following <a href="https://stackoverflow.com/help/mcve">mcve</a>:</p>
<pre><code>from threading import Thread
import queue


def print_number(number_queue_display):

    while True:
        number = number_queue_display.get()
        print(number)
        number_queue_display.task_done()


number_queue = queue.Queue()
printing_numbers = Thread(target=print_number, args=(number_queue,),)
printing_numbers.start()

number_queue.put(5)
number_queue.put(10)
number_queue.put(15)
number_queue.put(20)

number_queue.join()
printing_numbers.join()
</code></pre>
<p>The only time it works is if I set the thread to daemon like so:</p>
<pre><code>printing_numbers.setDaemon(True)
</code></pre>
<p>but that's because as stated in the Python documentation, <a href="https://docs.python.org/3/library/threading.html#thread-objects" rel="nofollow noreferrer">the program will exit</a> when only the daemon threads are left. The Python docs example for <code>Queue</code> doesn't use a daemon thread.</p>
<blockquote>
<p>A thread can be flagged as a “daemon thread”. The significance of this
  flag is that the entire Python program exits when only daemon threads
  are left.</p>
</blockquote>
<p>Even if I were to remove the two joins(<code>number_queue.join()</code> <code>printing_numbers.join()</code>), it still hangs, but I'm unsure of why. </p>
<p><strong>Questions:</strong></p>
<ol>
<li>Why is it hanging?</li>
<li>How do I keep it as a non-daemon thread, but prevent it from hanging?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><code>print_number()</code> is running an infinite loop - it never exits, so the thread never ends.  It sits in <code>number_queue_display.get()</code> forever, waiting for another queue item that never appears.  Then, since the thread never ends, <code>printing_numbers.join()</code> also waits forever.</p>
<p>So you need <em>some</em> way to tell the thread to quit.  One common way is to put a special "sentinel" value on the queue, and have the thread exit when it sees that.  For concreteness, here's a complete program, which is very much the same as what you started with.  <code>None</code> is used as the sentinel (and is commonly used for this purpose), but any unique object would work.  Note that the <code>.task_done()</code> parts were removed, because they no longer serve a purpose.</p>
<pre><code>from threading import Thread
import queue

def print_number(number_queue_display):

    while True:
        number = number_queue_display.get()
        if number is None:
            break
        print(number)


number_queue = queue.Queue()
printing_numbers = Thread(target=print_number, args=(number_queue,),)
printing_numbers.start()

number_queue.put(5)
number_queue.put(10)
number_queue.put(15)
number_queue.put(20)
number_queue.put(None)  # tell the thread it's done

printing_numbers.join() # wait for the thread to exit
</code></pre>
</div>
