<div class="post-text" itemprop="text">
<p>I would like to split a string out into each of it own strings representing each field : name,city,points,score,cards</p>
<p>i have these strings :</p>
<pre><code>Paul Grid - Hong Kong 56  663 0
Anna Grid - Tokyo 16  363 0
Greg H.Johs - Hong Kong -6  363 4
Jessy Holm Smith - Jakarta 8  261 0
</code></pre>
<p>Format is :</p>
<pre><code>Name[SPACE]-[SPACE]City[SPACE]-Points[SPACE][SPACE]Score[SPACE]Cards
</code></pre>
<ul>
<li>Name can have spaces and '.' in it</li>
<li>City can have spaces in it</li>
<li>There are sometimes double spaces between ex Score and Points</li>
<li>Scores,Points, Card can be negative numbers</li>
</ul>
<p>The rule i would like to implement in Python, is the following :</p>
<pre><code>Name : From beginning, until you see "-" - and then strip trailing space from that string.
Cards: From end and back, until you meet the first space
Score: From the space you hit when you made card, go back until next space.
Points:From the space you hit when you made Score, go back until next space.
City : where Name ended and where the Points stopped after seeing the space.
</code></pre>
<p>My problem here is that i cant just replace space as seperator as space can be in name and city, and "-" is being used to seperate name and city. </p>
<p>I could do this the brute way and do the stepping through character per character but wondering if Python has a smart way of doing this ?</p>
<p>My end result wish is to have each line split up into fields, so i could address ex scorerecord.name, scorerecord.city etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>With <code>re.match()</code> function and specific regex pattern:</p>
<pre><code>import re

data = '''Paul Grid - Hong Kong 56  663 0
Anna Grid - Tokyo 16  363 0
Greg H.Johs - Hong Kong -6  363 4
Jessy Holm Smith - Jakarta 8  261 0'''

data = data.split('\n')
pat = re.compile(r'(?P&lt;name&gt;[^-]+) +- *(?P&lt;city&gt;[^0-9]+) +(?P&lt;points&gt;-?[0-9]+) +'\
                   '(?P&lt;score&gt;[0-9]+) +(?P&lt;cards&gt;[0-9]+)')

result = [pat.match(s).groupdict() for s in data]

print(result)
</code></pre>
<p>The output:</p>
<pre><code>[{'name': 'Paul Grid', 'city': 'Hong Kong', 'points': '56', 'score': '663', 'cards': '0'}, {'name': 'Anna Grid', 'city': 'Tokyo', 'points': '16', 'score': '363', 'cards': '0'}, {'name': 'Greg H.Johs', 'city': 'Hong Kong', 'points': '-6', 'score': '363', 'cards': '4'}, {'name': 'Jessy Holm Smith', 'city': 'Jakarta', 'points': '8', 'score': '261', 'cards': '0'}]
</code></pre>
<p><a href="https://docs.python.org/3/library/re.html#re.match.groupdict" rel="nofollow noreferrer">https://docs.python.org/3/library/re.html#re.match.groupdict</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a regular expression. I think this covers your rules:</p>
<pre><code>import re
r = re.compile(r"([\w. ]+?)\s?-\s?([A-z ]+?)\s+(-?\d+?)\s+?(-?\d+?)\s+?(-?\d+)")
r.match("Paul Grid - Hong Kong 56  663 0").groups()
</code></pre>
<p>returns </p>
<pre><code>('Paul Grid', 'Hong Kong', '56', '663', '0')
</code></pre>
<p>You can paste this into <a href="https://regex101.com/" rel="nofollow noreferrer">https://regex101.com/</a> for a detailed understanding of how it works</p>
</div>
<div class="post-text" itemprop="text">
<p>The regular expression <code>r'(.*) - (.*) (-?\d+)  (\d+) (\d+)'</code> in a very simple way will do the matching you described:</p>
<pre><code>lines = '''Paul Grid - Hong Kong 56  663 0
Anna Grid - Tokyo 16  363 0
Greg H.Johs - Hong Kong -6  363 4
Jessy Holm Smith - Jakarta 8  261 0'''.split('\n')

import re
p = re.compile(r'(.*) - (.*) (-?\d+)  (\d+) (\d+)')
for line in lines:
    m = p.match(line)
    print(m.groups())

# ('Paul Grid', 'Hong Kong', '56', '663', '0')
# ('Anna Grid', 'Tokyo', '16', '363', '0')
# ('Greg H.Johs', 'Hong Kong', '-6', '363', '4')
# ('Jessy Holm Smith', 'Jakarta', '8', '261', '0')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can split on the first "-" only like this:</p>
<pre><code>name, rest = s.strip().split("-", 1)
</code></pre>
<p>And you can split the rest on any number of whitespace like this, splitting up to three times only, so whitespace in the city name are preserved:</p>
<pre><code>city, points, score, cards = rest.rsplit(None, 3)
</code></pre>
<p>All that remains now is removing excess whitespace from name and city, which you can do with strip(), and put this in some sort of structure:</p>
<pre><code>parts = [name.strip(), city.strip(), points, score, cards]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just another regex pattern:</p>
<pre><code>import re

text = """Paul Grid - Hong Kong 56  663 0
Anna Grid - Tokyo 16  363 0
Greg H.Johs - Hong Kong -6  363 4
Jessy Holm Smith - Jakarta 8  261 0"""


print()
pat = r'^([^-]+) - ?([^-]+?)(?= -?\d+) (-?\d+) +(-?\d+) +(-?\d+)$'

for k in re.findall(pat,text,re.MULTILINE):
    print(k)
</code></pre>
<p>Leads to output of:</p>
<pre><code>('Paul Grid', 'Hong Kong', '56', '663', '0')
('Anna Grid', 'Tokyo', '16', '363', '0')
('Greg H.Johs', 'Hong Kong', '-6', '363', '4')
('Jessy Holm Smith', 'Jakarta', '8', '261', '0')
</code></pre>
<p>Explanation:</p>
<ul>
<li><p>the text parts <code>'([^-]+) - ?([^-]+?)'</code> are captured with "One or more anything others then -" with <code>' - '</code> between them. </p></li>
<li><p>the second text must be followed <code>'(?= -?\d+)'</code>: a (optional) <code>-</code> and number(s) via <em>positive lookahead</em>. </p></li>
<li><p>the numbers then are captured using <code>' (-?\d+)'</code>, again with optional signs. 
All has to be inside one line <code>'^ .... $'</code>, and multiple lines are activated.</p></li>
</ul>
</div>
<span class="comment-copy">your data is ill formatted - no <code>-</code> after the cities.</span>
<span class="comment-copy">yes i know but that cannot be changed, thats why im trying to put order into it with python.</span>
<span class="comment-copy">A regular expression should be able to do this.</span>
<span class="comment-copy">yes ive tried tonnes but nothing really works and i dont fully understand them in depth.</span>
<span class="comment-copy">@MTdrip What can we do about that? Are you expecting us to write the code for you?</span>
<span class="comment-copy">this is awesome, it works - its still abit of a mystery to me with this regex but hopefully i will learn soon but its amazing !</span>
<span class="comment-copy">@MTdrip, thanks</span>
<span class="comment-copy">I don't think this will match <code>Greg H.Johs</code></span>
<span class="comment-copy">@Barmar thanks, updated</span>
<span class="comment-copy">I think the spaces around <code>-</code> are required, not optional. Probably to allow names with <code>-</code> in them.</span>
<span class="comment-copy">thanks, voted the one above as answer i cant put more as answer but you all came up with something that works, and looking like art compared to what i was heading into thanks</span>
<span class="comment-copy">also cool thanks !</span>
<span class="comment-copy"><code>"Paul Grid - Hong Kong 56  663 0"</code> is splitted as <code>'Paul Grid'</code>, <code>'Hong Kong 5'</code>, <code>'6'</code>, <code>'663'</code>, <code>'0'</code>? Doesn't look right.</span>
<span class="comment-copy">@fferri thanks for catching my blunder, fixed it</span>
