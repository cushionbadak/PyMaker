<div class="post-text" itemprop="text">
<p>How can I turn a list of dicts like this</p>
<pre><code>[{'a':1}, {'b':2}, {'c':1}, {'d':2}]
</code></pre>
<p>Into a single dict like this</p>
<pre><code>{'a':1, 'b':2, 'c':1, 'd':2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works for dictionaries of any length:</p>
<pre><code>&gt;&gt;&gt; result = {}
&gt;&gt;&gt; for d in L:
...    result.update(d)
... 
&gt;&gt;&gt; result
{'a':1,'c':1,'b':2,'d':2}
</code></pre>
<p>As a <a href="https://www.python.org/dev/peps/pep-0274/" rel="nofollow noreferrer">comprehension</a>:</p>
<pre><code># Python &gt;= 2.7
{k: v for d in L for k, v in d.items()}

# Python &lt; 2.7
dict(pair for d in L for pair in d.items())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case of Python 3.3+, there is a <a href="https://docs.python.org/3/library/collections.html#collections.ChainMap" rel="noreferrer"><code>ChainMap</code> collection</a>:</p>
<pre><code>&gt;&gt;&gt; from collections import ChainMap
&gt;&gt;&gt; a = [{'a':1},{'b':2},{'c':1},{'d':2}]
&gt;&gt;&gt; dict(ChainMap(*a))
{'b': 2, 'c': 1, 'a': 1, 'd': 2}
</code></pre>
<p>Also see:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/23392976/what-is-the-purpose-of-collections-chainmap">What is the purpose of collections.ChainMap?</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; L=[{'a': 1}, {'b': 2}, {'c': 1}, {'d': 2}]    
&gt;&gt;&gt; dict(i.items()[0] for i in L)
{'a': 1, 'c': 1, 'b': 2, 'd': 2}
</code></pre>
<p>Note: the order of 'b' and 'c' doesn't match your output because dicts are unordered</p>
<p>if the dicts can have more than one key/value</p>
<pre><code>&gt;&gt;&gt; dict(j for i in L for j in i.items())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For flat dictionaries you can do this:</p>
<pre><code>from functools import reduce
reduce(lambda a, b: dict(a, **b), list_of_dicts)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is similar to @delnan but offers the option to modify the k/v (key/value) items and I believe is more readable:</p>
<pre><code>new_dict = {k:v for list_item in list_of_dicts for (k,v) in list_item.items()}
</code></pre>
<p>for instance, replace k/v elems as follows:</p>
<pre><code>new_dict = {str(k).replace(" ","_"):v for list_item in list_of_dicts for (k,v) in list_item.items()}
</code></pre>
<p>unpacks the k,v tuple from the dictionary .items() generator after pulling the dict object out of the list</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>dict1.update( dict2 )
</code></pre>
<p>This is asymmetrical because you need to choose what to do with duplicate keys; in this case, <code>dict2</code> will overwrite <code>dict1</code>. Exchange them for the other way.</p>
<p>EDIT: Ah, sorry, didn't see that.</p>
<p>It is possible to do this in a single expression:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; dict( chain( *map( dict.items, theDicts ) ) )
{'a': 1, 'c': 1, 'b': 2, 'd': 2}
</code></pre>
<p>No credit to me for this last!</p>
<p>However, I'd argue that it might be more Pythonic (explicit &gt; implicit, flat &gt; nested ) to do this with a simple <code>for</code> loop. YMMV.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; dictlist = [{'a':1},{'b':2},{'c':1},{'d':2, 'e':3}]
&gt;&gt;&gt; dict(kv for d in dictlist for kv in d.iteritems())
{'a': 1, 'c': 1, 'b': 2, 'e': 3, 'd': 2}
&gt;&gt;&gt;
</code></pre>
<p>Note I added a second key/value pair to the last dictionary to show it works with multiple entries.
Also keys from dicts later in the list will overwrite the same key from an earlier dict.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://funcy.readthedocs.org/en/latest/colls.html#join" rel="nofollow">join</a> function from <a href="https://github.com/Suor/funcy" rel="nofollow">funcy</a> library:</p>
<pre><code>from funcy import join
join(list_of_dicts)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>dic1 = {'Maria':12, 'Paco':22, 'Jose':23}
dic2 = {'Patricia':25, 'Marcos':22 'Tomas':36}</p>
<p>dic2 = dict(dic1.items() + dic2.items())</p>
<p>and this will be the outcome:</p>
<p>dic2
{'Jose': 23, 'Marcos': 22, 'Patricia': 25, 'Tomas': 36, 'Paco': 22, 'Maria': 12}</p>
</div>
<span class="comment-copy">see this <a href="http://stackoverflow.com/questions/2365921/merging-python-dictionaries" title="merging python dictionaries">stackoverflow.com/questions/2365921/merging-python-dictionaries</a></span>
<span class="comment-copy">True, although that merges into a dict of lists.</span>
<span class="comment-copy">it's a list and not a dict: &gt;&gt;&gt; type([{'a':1},{'b':2}]) &lt;type 'list'&gt;</span>
<span class="comment-copy">Fails if any of the dicts in the list has more than one item.</span>
<span class="comment-copy"><i>cough*(assuming each dictionary contains only one key-value pair)*cough</i></span>
<span class="comment-copy">Ah, well first I posted a method that works with general dicts, but it looked like the OP didn't need that</span>
<span class="comment-copy">its a list and not a dict: &gt;&gt;&gt; type([{'a':1},{'b':2}])  &lt;type 'list'&gt;</span>
