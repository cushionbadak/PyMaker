<div class="post-text" itemprop="text">
<p>I have a list in python that might look something like this: </p>
<pre><code>list_example = [1,2,20,21,22]
</code></pre>
<p>As you can see, all the numbers are close to their adjacent list items, except for the jump between 2 and 20. </p>
<p>How would I get Python to notice this larger jump and store the list item's index?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> to iterate through every <code>i</code> and <code>i+1</code> element, and then compute the difference between the two adjacent elements.</p>
<pre><code>for a, b in zip(list_example, list_example[1:]):
    diff = b - a
    if diff &gt; 10:
        print("Jump between %d and %d" % (a, b))
</code></pre>
<p>But then, it is up to you to define what is exactly a "jump".</p>
<p>If you need the index, you can make use of <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate()</code></a>:</p>
<pre><code>for i, (a, b) in enumerate(zip(list_example, list_example[1:])):
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could get the average distance between elements and then output those indices where the distance to the last element is larger than that average.</p>
<pre><code>&gt;&gt;&gt; lst = [1,2,20,21,22]
&gt;&gt;&gt; avg_dst = sum(abs(a-b) for a, b in zip(lst, lst[1:])) / (len(lst)-1)
&gt;&gt;&gt; [i for i in range(1, len(lst)) if abs(lst[i] - lst[i-1]) &gt; avg_dst]
[2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need a set number that is the number that will set a jump off.
This means looping over comparing the current number with its neighbour and alerting whenever the numbers have a difference of your set jump number.</p>
<p>This is assuming your list is already sorted.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that the values are arranged in ascending order (like your example), you could created a sorted list of <code>(DIFF, INDEX)</code> pairs.</p>
<pre><code>xs = [1, 2, 20, 21, 22]
pairs = sorted((xs[i] - xs[i-1], i) for i in range(1, len(xs)))

print(pairs)  # [(1, 1), (1, 3), (1, 4), (18, 2)]
</code></pre>
</div>
<span class="comment-copy">What exactly is your expected output?</span>
<span class="comment-copy">You solution however assume non-decreasing ordering. It would fail for a [10,11,2,5,6,7].</span>
<span class="comment-copy">@Aechlys Indeed, I asumed the list was sorted based on the author example. The author must adapt the <code>diff</code> calculation according to his use case that he is the only one to know, he may use <code>abs(b - a)</code> for example.</span>
