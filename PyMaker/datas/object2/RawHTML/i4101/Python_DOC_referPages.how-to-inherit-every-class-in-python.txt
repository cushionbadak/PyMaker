<div class="post-text" itemprop="text">
<p>I'm working with classes that have a lot of instance variables, and I want to have classes that inherit every instance variables from them. something like this:</p>
<pre><code>class foo(object):
    def __init__(self,thing1,thing2,thing3,thing4,thing5,thingetc):
        self.1 = thing1
        self.2 = thing2
        self.3 = thing3
        self.4 = thing4
        self.5 = thing5
        self.etc = thingetc

class bar(foo):
    self.6 = []
a = bar
print a.3
</code></pre>
<p>obviously this won't work, but all the documentation that I can find on line is confusing. How do you inherit variables in cases like this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Currently, your code is invalid syntax as a digit cannot be at the very front of a variable name. However, you can use <code>*args</code> with <code>__dict__</code>:</p>
<pre><code>class foo:
  def __init__(self, *args):
     self.__dict__ = dict(zip(['var{}'.format(i) for i in range(1, len(args)+1)], args))

f = foo(*range(15))
print(f.var1)
print(f.var14)
</code></pre>
<p>Output:</p>
<pre><code>0
13
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use this as a template for your inheritance, emphasis on the <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">super()</a> method:</p>
<pre><code>class Foo:
    def __init__(self):
        self.name = 'Foo'

class Bar(Foo):
    def __init__(self):
        super().__init__()

b = Bar()
b.name
# outputs 'Foo'
</code></pre>
<p>For your specific type of class (that takes an unknown number of initialization arguments, i.e. <a href="https://docs.python.org/3.6/faq/programming.html#how-can-i-pass-optional-or-keyword-parameters-from-one-function-to-another" rel="nofollow noreferrer">*args</a>):</p>
<pre><code>class Foo:
    def __init__(self, *args):
        self.name = 'Foo'
        for i, arg in enumerate(args):
            setattr(self, 'thing_' + str(i), arg)

class Bar(Foo):
    def __init__(self, *args):
        super().__init__(*args)

b = Bar('hello', 'world')
b.name
# outputs 'Foo'
b.thing_0
# outputs 'hello'
b.thing_1
# outputs 'world'
</code></pre>
<p>Now I would personally use the <code>**kwargs</code> over <code>*args</code> for specifying unique instance attributes:</p>
<pre><code>class Foo:
    def __init__(self, **kwargs):
        self.name = 'Foo'
        for att in kwargs:
            setattr(self, att, kwargs[att])

class Bar(Foo):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

b = Bar(value = 4, area = 3.14)
b.name
# outputs 'Foo'
b.value
# outputs 4
b.area
# outputs 3.14
</code></pre>
</div>
<span class="comment-copy">Why are you using numbers for attribute names in the example? It's not clear what you want. But if <code>a = bar()</code>, then <code>a.three</code> is certainly inherited from <code>foo</code> if <code>foo</code> defines <code>self.three</code>.</span>
<span class="comment-copy">@eagle Fixed while updating</span>
