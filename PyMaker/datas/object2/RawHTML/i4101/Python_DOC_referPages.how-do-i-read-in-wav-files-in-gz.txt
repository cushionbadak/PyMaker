<div class="post-text" itemprop="text">
<p>I am learning machine learning and data analysis on <code>wav</code> files.
I know if I have <code>wav</code> files directly I can do something like this to read in the data</p>
<pre><code>import librosa

mono, fs = librosa.load('./small_data/time_series_audio.wav', sr = 44100)
</code></pre>
<p>Now I'm given a gz-file <code>"music_feature_extraction_test.tar.gz"</code>
I'm not sure what to do now. </p>
<p>I tried:</p>
<pre><code>with gzip.open('music_train.tar.gz', 'rb') as f:
    for files in f : 
        mono, fs = librosa.load(files, sr = 44100)
</code></pre>
<p>but it gives me:</p>
<p><code>TypeError: lstat() argument 1 must be encoded string without null bytes, not str</code></p>
<p>Can anyone help me out?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are several things going on:</p>
<ul>
<li>The file you are given is a gzipped-compressed tarball. Take a look at the <code>tarfile</code> <a href="https://docs.python.org/3/library/tarfile.html" rel="nofollow noreferrer">module</a>, it can read gzip-compressed files directly. You'll get an iterator over it's members, each of which is an individual file.</li>
<li>AFAIKS <code>librosa</code> can't read from an in-memory buffer so you have to unpack the tar-members to temporary files. The <code>tempfile</code>-<a href="https://docs.python.org/3/library/tempfile.html" rel="nofollow noreferrer">module</a> is your friend here, a <code>NamedTemporaryFile</code> will provide you with a self-deleting file that you can uncompress to and provide to <code>librosa</code>.</li>
</ul>
<p>You probably want to implement this as a simple generator function that takes the tarfile-name as it's input, iterates over it's members and <code>yield</code>s what <code>librosa.load()</code> provides you. That way everything gets cleaned up automatically.</p>
<p>The basic loop would therefore be</p>
<ol>
<li>Open the tarball using the <code>tarfile</code>-module. For each member</li>
<li>Get a new temporary file using <code>NamedTemporaryFile</code>. Copy the content of the tarball-member to that file. You may want to use <code>shutil.copyfileobj</code> to avoid reading the entire wav-file into memory before writing it to disk.</li>
<li>The <code>NamedTemporaryFile</code> has a filename-attribute. Pass that to <code>librosa.open</code>.</li>
<li><code>yield</code> the return value of <code>librosa.open</code> to the caller.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can use PySoundFile to read from the compressed file.
<a href="https://pysoundfile.readthedocs.io/en/0.9.0/#virtual-io" rel="nofollow noreferrer">https://pysoundfile.readthedocs.io/en/0.9.0/#virtual-io</a></p>
<pre><code>import soundfile

with gzip.open('music_train.tar.gz', 'rb') as gz_f:
    for file in gz_f : 
        fs, mono = soundfile.read(file, samplerate=44100)
</code></pre>
<p>Maybe you should also check if you need to resample the data before processing it with librosa:
<a href="https://librosa.github.io/librosa/ioformats.html#read-specific-formats" rel="nofollow noreferrer">https://librosa.github.io/librosa/ioformats.html#read-specific-formats</a></p>
</div>
