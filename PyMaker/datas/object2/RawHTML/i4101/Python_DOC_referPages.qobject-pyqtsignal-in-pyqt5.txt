<div class="post-text" itemprop="text">
<p>See the code:</p>
<pre><code>from PyQt5.QtCore import QObject, pyqtSignal

class QtSignal(QObject):

    signal = pyqtSignal()

# Case 1:
signal = pyqtSignal()
print(type(signal))

# Case 2:
qtSignal = QtSignal()
print(type(qtSignal.signal))
</code></pre>
<p>For <code>case 1</code>, it outputs <code>&lt;class 'PyQt5.QtCore.pyqtSignal'&gt;</code>, but for <code>case 2</code>, it outputs <code>&lt;class 'PyQt5.QtCore.pyqtBoundSignal'&gt;</code>.</p>
<p>The difference between two cases is whether to define <code>qtSignal</code> in the subclass of <code>QObject</code>.  But why <code>pyqtSignal</code> will become to <code>pyqtBoundSignal</code>, if it is defined in the subclass of <code>QObject</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>pyqtSignal follows the so called descriptor protocol. This is most famously used in the property decorator, but you find plenty of other uses. </p>
<p>The result of this is that accessing an attribute allows it to get a reference to the object you‘re calling it through. So in your case, the instance of QtSignal. The result is the bound signal. This is the same btw for methods of klasses! </p>
<p>This is needed because when you emit the signal, you do need a sender. And this is the way pyqt learns who that is. </p>
</div>
<span class="comment-copy">PyQt5 Docs: <a href="http://pyqt.sourceforge.net/Docs/PyQt5/signals_slots.html#unbound-and-bound-signals" rel="nofollow noreferrer">Unbound and Bound Signals</a>.</span>
<span class="comment-copy">Can you give me some examples to explain the implement of changing pyqtSignal to pyqtBoundSignal?</span>
<span class="comment-copy">I don't understand your question. The implementation of pyqtSignal is open source. Have you looked at the descriptor protocol? This explains how such a thing is implemented.</span>
<span class="comment-copy">Why pyqtSignal will become to pyqtBoundSignal, if it is defined in the subclass of QObject? Does QObject have special inner implementation?</span>
<span class="comment-copy">Have you looked at the descriptor protocol as I know suggest for the third time? <a href="https://docs.python.org/3/reference/datamodel.html#implementing-descriptors" rel="nofollow noreferrer">docs.python.org/3/reference/…</a> this has actually nothing to do with QObject as such, but is a pure python machinery that helps to make code more declarative, but that's it.</span>
