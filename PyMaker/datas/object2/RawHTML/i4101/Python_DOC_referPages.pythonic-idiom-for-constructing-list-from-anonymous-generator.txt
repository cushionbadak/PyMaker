<div class="post-text" itemprop="text">
<p>I find the <code>yield</code>-based generators very useful for sequence operations that are too complex to use list comprehensions. Suppose I want to construct a list from a specialized generator. I can write it like:</p>
<pre><code>def gen():
    for &lt;whatever&gt;:
        yield x

xs = list(gen())
</code></pre>
<p>A lot of the time, I only need to evaluate this generator once, so it doesn't really need a name. If Python had multi-line labmdas, I could use:</p>
<pre><code>xs = list((lambda:
    for &lt;whatever&gt;:
        yield x)())
</code></pre>
<p>but Python doesn't have multi-line lambdas. Is there any other way to get something like this?</p>
<p>(note: please do not suggest using list comprehensions; I'm talking about cases where the logic of when to <code>yield</code> is more complex.)</p>
</div>
<div class="post-text" itemprop="text">
<p>If the logic is too complex for a generator expression, you probably shouldn't be using a lambda. That's not the same as saying you can't.</p>
<p>Python lambdas can have as many newlines as you want. They just cannot contain <em>statements</em>, only an expression. You can use a <code>yield</code> <em>expression</em> (not a <code>yield</code> statement--you need the extra parentheses) in a lambda.</p>
<pre><code>&gt;&gt;&gt; list((lambda: (yield 1))())
[1]
</code></pre>
<p>Not that useful, is it? You can execute a list of yield expressions, using ... <a href="https://docs.python.org/3/reference/expressions.html#list-displays" rel="nofollow noreferrer">a list display expression</a>--<code>[]</code>. (Python guarantees the elements of displays are evaluated in order.)</p>
<pre><code>&gt;&gt;&gt; tuple((lambda:[
    (yield 1),
    (yield 2),
    (yield 3),
])())
(1, 2, 3)
</code></pre>
<p>Tuples work too. Look at that. Multiple "lines" (not statements). Still not that useful. You want to be able to loop. But the <code>for</code> statement is a statement. (Again, why not use a generator expresson? Those <em>are</em> expressions.) In practice, this is not that limiting, since lambdas can call functions which contain statements.</p>
<pre><code>&gt;&gt;&gt; def loop(itr, body):
    for x in itr:
        yield body(x)


&gt;&gt;&gt; list(loop(range(9), lambda x: x*x))
[0, 1, 4, 9, 16, 25, 36, 49, 64]
</code></pre>
<p>That's how to make a for loop an expression without using a comprehension. But we want the loop inside the lambda.</p>
<pre><code>&gt;&gt;&gt; list((lambda:
      (yield from loop(range(9), lambda x:
               x*x))
      )())
[0, 1, 4, 9, 16, 25, 36, 49, 64]
</code></pre>
<p>Yep, <code>yield from</code> is also an expression. If you wrap it in parentheses. I think the nicely-indented <code>def</code>s are easier to read though. You can give it a short throwaway name, like <code>_f</code> or something.</p>
<hr/>
<p>The lambda calculus is Turing complete in its own right, capable of computing anything computable.</p>
<p>This means we technically don't even need the <code>loop</code> function. You can use recursion instead. (Though in Python, you'd eventually get a Stack Overflow.) But how do you recurse on an anonymous function?</p>
<p>You use a "decorator" to give it a name.</p>
<pre><code>&gt;&gt;&gt; def recur(func):
    def wrapper(*args, **kwargs):
        return func(func, *args, **kwargs)
    return wrapper

&gt;&gt;&gt; tuple(recur(lambda r, n:[
    (yield n),
    (yield from r(r, n-1)) if n else 0]
     )(3))
(3, 2, 1, 0)
</code></pre>
<p>Of course, the "decorator" can be anonymous too.</p>
<pre><code>&gt;&gt;&gt; tuple((lambda f: lambda *a, **kw: f(f, *a, **kw))(lambda r, n:[
    (yield n),
    (yield from r(r, n-1)) if n else 0]
     )(3))
(3, 2, 1, 0)
</code></pre>
<p>I didn't write it that way in the first place because your eyes would glaze over from seeing too many lambdas. That's why you should use <code>def</code>!</p>
<p>If you're interested in just how far we can push lambdas like this, check out <a href="https://github.com/gilch/drython" rel="nofollow noreferrer">Drython</a>, which has similar expression substitutions for every Python statement.</p>
</div>
<div class="post-text" itemprop="text">
<p>Decorators don't <em>have</em> to return a function.</p>
<pre><code>def genlist(g):
    return list(g())


@genlist
def xs():  # for &lt;whatever&gt;
    for x in range(3):
        yield x*x
    for x in range(3):
        yield x+x
    yield 42


print(xs)
</code></pre>
<hr/>
<pre><code>[0, 1, 4, 0, 2, 4, 42]
</code></pre>
<p>In most cases where a rubyist wants a block in Python, it could be accomplished with a decorator like this.</p>
</div>
<span class="comment-copy">you can write a generator expression <code>(x for x in range(5))</code> looks like a list comprehension but is a generator because it is inside <code>()</code></span>
<span class="comment-copy">I do not see anything wrong with your first approach or with using list comprehension either <code>[f(x) for x in container]</code> where <code>f(x)</code> implements the logic from <code>gen()</code></span>
<span class="comment-copy">Sounds like your only objection to a generator function is that it has a name.  Why is that? What problem are you trying to solve?</span>
