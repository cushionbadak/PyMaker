<div class="post-text" itemprop="text">
<p>I have a dictionary with favorite colors assigned to each person:</p>
<pre><code>fav_colors = {"John": "green", "Bobby": "blue", "PapaSanta": "yellow"}
</code></pre>
<p>Firstly, I just want to make sure if this is the right way to assign values in a dictionary! I'm pretty new to python.</p>
<p>Then I have this</p>
<pre><code>def use_favcolors(fav_color):
</code></pre>
<p>In this function I want to see how many people's favorite color is green. I thought of creating a for loop and then increasing the count by 1 for every "green" in fav_color, but I'm not quite sure how to execute this. I also have to create a main function which uses this use_favcolors function and prints the number of "greens". </p>
<p>Could anybody help out? </p>
<p>Thanks in advance</p>
<p>*How is this too broad??? I've seen other questions asked THE SAME WAY? I would use those threads but the answers aren't the ones I'm looking for. </p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum()</code></a>, iterating over <a href="https://docs.python.org/3/library/stdtypes.html#dict.values" rel="nofollow noreferrer"><code>dict.values()</code></a>:</p>
<pre><code>def use_favcolors(fav_color):
    return sum(color == fav_color for color in fav_colors.values())
</code></pre>
<p>The boolean <code>color == fav_color</code> gets automatically converted to <code>0</code>/<code>1</code> in the sum.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can use the dicts <code>.values()</code> the method.</p>
<pre><code>fav_colors = {"John": "green", "Bobby": "blue", "PapaSanta": "yellow"}

def use_favcolors(fav_color):
    count = 0
    for colour in fav_colors.values():
        if colour == fav_color:
            count += 1
    return count

print(use_favcolors("green"))
</code></pre>
<p>Outputs:</p>
<pre><code>1
</code></pre>
<p><code>.values()</code> will return an iterator over the values:
<code>['green', 'blue', 'yellow']</code></p>
<p>Other useful methods are <code>.keys()</code> and <code>.items</code></p>
<p><code>.keys()</code> will return an iterator over the keys:
<code>['John', 'Bobby', 'PapaSanta']</code></p>
<p><code>.items()</code> will return an iterator over the key, value pairs:
<code>[('John', 'green'), ('Bobby', 'blue'), ('PapaSanta', 'yellow')]</code></p>
</div>
<span class="comment-copy">Your logic is good :). Why don't you try something out? Syntax is pretty straightforward (<a href="https://wiki.python.org/moin/ForLoop" rel="nofollow noreferrer">wiki.python.org/moin/ForLoop</a>) and your dict is ready to go</span>
<span class="comment-copy">Welcome to SO. Unfortunately this isn't a discussion forum or tutorial service. Please take the time to read <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and the other links found on that page.  You should invest some time working your way through <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">the Tutorial</a>, practicing the examples. It will give you an introduction to the tools Python has to offer and you may even start to get ideas for solving your problem. <a href="https://meta.stackoverflow.com/questions/284236/why-is-can-someone-help-me-not-an-actual-question">Why “Can someone help me?” is not an actual question?</a></span>
<span class="comment-copy">The way you want to do things is nice and simple, and you should be able to do it. However, if you want a trick to make it easier, look up <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>, and notice that it works with any iterable—including <code>fav_colors.values()</code>. That's not necessarily the right answer for this specific problem, but it opens up a general way of solving this whole class of problems very easily.</span>
<span class="comment-copy">A little simpler: <code>return sum(color == fav_color for color in fav_colors.values())</code></span>
<span class="comment-copy">Shouldn't this work?                                                                                     def use_favcolors(fav_color):     count = 0     for colour in fav_color.values():         if colour == "green":             count += 1     return count           def main():     use_favcolors({"John": "green", "Bobby": "blue", "PapaSanta": "yellow"})     print count main()</span>
<span class="comment-copy">wow that format is terrible idk how to write it in the code format. I created a new main function in which i wrote the use_favcolors thing and then on a new line did print count</span>
<span class="comment-copy">this didn't work. it just prints 0</span>
<span class="comment-copy">The code above outputs one when I run it, are there any differences in your code? The function assumes the fave colour is passed as a parameter and the dict is held in global state.</span>
