<div class="post-text" itemprop="text">
<p>I have pairs of 4 lists a and b with integer values such as <code>list_1a = [1,2,3,...]</code> and <code>list_1b = [8,11,15,...]</code>. The idea is that the integer values in <code>list_1a</code> are now represented by the integer values in <code>list_1b</code>, and the same for <code>list_2a</code> and <code>list_2b</code> etc.</p>
<p>Now I have a list of 4 columns <code>final_list</code> which contained integer values corresponding to the <code>a</code> lists. I want to map the values in <code>final_list</code> to the values in the <code>b</code> lists. What is the quickest way to do this in python ?</p>
<p>Is there a quicker way than using lists ?</p>
<p><strong>Edit:</strong></p>
<p>To clarify the question, take the following example:</p>
<pre><code>list_1a = [1,2,3]
list_1b = [8,11,15] 

list_2a = [5,6,7,8]
list_2b = [22,26,30,34]

list_3a = [11,12,13,14,18]
list_3b = [18,12,25,28,30]

list_4a = [51,61,72,82]
list_4b = [73,76,72,94]
</code></pre>
<ul>
<li>Note that some of these lists can contain more than a million entries (So maybe memory can be an issue)</li>
<li>The lists do not have the same length</li>
<li>All of the integer values in these lists are unique to their lists, i.e. <code>list_1a + list_1b</code> will never have a repeating integer value.</li>
</ul>
<p><code>final_list</code> should look like <code>final_list_b</code> after the mapping occurs </p>
<pre><code>final_list_a = [[1,6,11,51],[3,6,14,72]]
final_list_b = [[8,26,18,73],[15,26,28,72]]
</code></pre>
<p><em>To put things into perspective, this questions is for a database application where these "lists" contain auto-generated key values</em></p>
</div>
<div class="post-text" itemprop="text">
<p>I think what you want is a <a href="http://www.pythonforbeginners.com/dictionary/how-to-use-dictionaries-in-python" rel="nofollow noreferrer">dictionary</a>, which associates keys with values. Unless i'm confused about what you want to do here.</p>
<p>So if I make 4 short example lists.</p>
<pre><code>list_1a = [1,2,3,4]
list_1b = [8,11,15,18]
list_2a = [5,6,7,8]
list_2b = [22,26,30,34]
</code></pre>
<p>and make them into a big list of all "a" values and all "b" values.</p>
<pre><code>a_list = list_1a + list_2a
b_list = list_1b + list_2b
</code></pre>
<p>I can then use <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer">zip</a> to merge the lists into a dictionary</p>
<pre><code>my_dict = dict(zip(a_list, b_list))

print(my_dict)
</code></pre>
<p>See:
<a href="https://stackoverflow.com/questions/14658623/how-to-merge-2-list-as-a-key-value-pair-in-python">how to merge 2 list as a key value pair in python</a></p>
<p>for some other ways to do this last bit.</p>
<p>result:</p>
<pre><code>{1: 8, 2: 11, 3: 15, 4: 18, 5: 22, 6: 26, 7: 30, 8: 34}
</code></pre>
<p>Now your "a" list makes up the keys of this dictionary.. while the "b" list make up the values. You can access the values by using the keys. here's some examples.</p>
<pre><code>print(my_dict.keys())
print(my_dict.values())
print(my_dict[5])
</code></pre>
<p>gives me:</p>
<pre><code>[1, 2, 3, 4, 5, 6, 7, 8]
[8, 11, 15, 18, 22, 26, 30, 34]
22
</code></pre>
<p>Is this what you want?</p>
<p>EDIT: I feel that I should note that while my dictionary has printed in order, dictionaries are actually not ordered like lists. You might want to look into <a href="https://pymotw.com/2/collections/ordereddict.html" rel="nofollow noreferrer">collections.OrderedDict</a> or <a href="https://docs.python.org/3/howto/sorting.html" rel="nofollow noreferrer">sorted</a> if this is important to you.</p>
<p>Update:</p>
<p>For what you want to do, maybe consider nested dictionaries. You can make a dictionary whose values are dictionaries, also note that when 1a and 1b don't match in length, <code>zip</code> doesn't care and just excludes 60:</p>
<pre><code>list_1a = [1,2,3,4]
list_1b = [8,11,15,18,60]
list_2a = [5,6,7,8]
list_2b = [22,26,30,34]

a_dict = dict(zip(list_1a, list_2a))
b_dict = dict(zip(list_1b, list_2b))

my_dict = {"a" : a_dict, "b" : b_dict}

print(my_dict)
</code></pre>
<p>Result:</p>
<pre><code>{'a': {1: 5, 2: 6, 3: 7, 4: 8}, 'b': {8: 22, 18: 34, 11: 26, 15: 30}}
</code></pre>
<p>Now you can access the inner values in a different way:</p>
<pre><code>print(my_dict["a"].keys())
print(my_dict["a"].values())
print(my_dict["a"][4])
</code></pre>
<p>Result:</p>
<pre><code>[1, 2, 3, 4]
[5, 6, 7, 8]
8
</code></pre>
</div>
<span class="comment-copy">What have you tried so far?</span>
<span class="comment-copy">Can you please add some code snippet as to what will be the final list that you are looking for?</span>
<span class="comment-copy">I'd probably use <code>zip</code> and <code>dict</code> for this. If you want more specific advice, you should post a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>, complete with some short sample lists, so we can get a better idea of what you're actually doing.</span>
<span class="comment-copy">This is close to what I am looking for. However how would this scale memory wise ? Some of those lists have 10million entries...</span>
<span class="comment-copy">I've used dicts with large amounts of data and they scale very well. If we're talking something of that size it might be a good idea to create a dict in the first place instead of merging lists, If that's at all possible. dicts are the only iterable that can do what you want, lists are very inefficient when they get large. You can't really use sets because the keys wouldn't line up with the values.</span>
<span class="comment-copy">See <a href="https://stackoverflow.com/questions/513882/python-list-vs-dict-for-look-up-table">here</a> for more details on the efficiency of iterables. Seems dicts are good for speed, just like sets.. but pretty hard on memory. I still don't see a reasonable alternative for you.</span>
<span class="comment-copy">Can you check the edited version of the question ? there will be an issue since I want to leave the values of each pair of lists, i.e list_1a and list_1b, list_2a and list_2b etc. separate since they are unique to their lists</span>
<span class="comment-copy">Ok, I edited in an example of nested dicts. You can't make a set of dicts because they're unhashable. You also have the option of making a list of dicts if you want.</span>
