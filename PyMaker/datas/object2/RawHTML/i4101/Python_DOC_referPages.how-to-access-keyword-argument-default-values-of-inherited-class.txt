<div class="post-text" itemprop="text">
<p>I'm trying to make some modifications to the <a href="https://seaborn.pydata.org/generated/seaborn.JointGrid.html#seaborn.JointGrid" rel="nofollow noreferrer"><code>seaborn.JointGrid</code></a> class. My plan was to make a child class and inherit most methods from the <a href="https://github.com/mwaskom/seaborn/blob/102cf08f9e40ef7037daf4b3b60b94ee144dc5cb/seaborn/axisgrid.py#L1522" rel="nofollow noreferrer"><code>JointGrid</code></a> class, like so:</p>
<pre><code>import seaborn

class CustomJointGrid(seaborn.JointGrid):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
</code></pre>
<p>If I do this, I do not have access to the variables <code>size</code>, <code>ratio</code>, <code>space</code> etc., which are part of the <a href="https://github.com/mwaskom/seaborn/blob/102cf08f9e40ef7037daf4b3b60b94ee144dc5cb/seaborn/axisgrid.py#L1525" rel="nofollow noreferrer"><code>__init__</code> method of <code>JointGrid</code></a>: </p>
<pre><code>def __init__(self, x, y, data=None, size=6, ratio=5, space=.2,
dropna=True, xlim=None, ylim=None) 
</code></pre>
<p>I noticed that these variables are not initialized in <code>JointGrid</code> class with the usual <code>self.size = size</code> in the <code>__init__</code> method. Perhaps this is why I can not access them from my child class? </p>
<p>How can I access these variables <code>size</code>, <code>ratio</code>, <code>space</code> etc?  </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/inspect.html#inspect.getfullargspec" rel="nofollow noreferrer">inspect.getfullargspec</a> to do this:</p>
<pre><code>&gt;&gt;&gt; import seaborn, inspect
&gt;&gt;&gt; spec = inspect.getfullargspec(seaborn.JointGrid.__init__)
&gt;&gt;&gt; defaults = spec.kwonlydefaults or {}
&gt;&gt;&gt; defaults.update(zip(spec.args[-len(spec.defaults):], spec.defaults))
&gt;&gt;&gt; defaults
{'data': None, 'size': 6, 'ratio': 5, 'space': 0.2, 'dropna': True, 'xlim': None, 'ylim': None}
</code></pre>
<p>Note that your code would only need to do this <em>once</em>, since the signature of the imported class won't change.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you just use the same arguments as the class you want to subclass?</p>
<pre><code>import seaborn

class CustomJointGrid(seaborn.JointGrid):

    def __init__(self, x, y, data=None, size=6, ratio=5, space=.2,
                 dropna=True, xlim=None, ylim=None, **kwargs):
        super().__init__(x, y, data=data, size=size, ratio=ratio, space=space,
                         dropna=dropna, xlim=xlim, ylim=ylim)
</code></pre>
<p>Else you could set some default yourself, </p>
<pre><code>class CustomJointGrid(seaborn.JointGrid):

    def __init__(self, *args, **kwargs):
        size = kwargs.get("size", 6)
        kwargs.update(size=size)
        super().__init__(*args, **kwargs)
        # use size here
        self.someattribute = size*100
</code></pre>
</div>
<span class="comment-copy">Those values are in <code>args</code> and <code>kwargs</code>.  See: <a href="https://stackoverflow.com/questions/3394835/args-and-kwargs">stackoverflow.com/questions/3394835/args-and-kwargs</a></span>
<span class="comment-copy">@StephenRauch Is that true? When I do a <code>print(kwargs.items())</code> and <code>print(*args)</code> it just shows the arguments with which I called <code>CustomJointGrid</code>, not the 'default' arguments which I do not pass. So if I say <code>CustomJointGrid("x data", "y data", data=data)</code>, the variable <code>size</code> is not available.</span>
<span class="comment-copy">The default args are in the source you are inheriting from.  Not sure I understand the sticking point.</span>
<span class="comment-copy">@StephenRauch But how do I access them? For example if I want to change <a href="https://github.com/mwaskom/seaborn/blob/102cf08f9e40ef7037daf4b3b60b94ee144dc5cb/seaborn/axisgrid.py#L1653" rel="nofollow noreferrer"><code>f = plt.figure(figsize=(size, size))</code></a> into something like this in my custom child class: <code>f = plt.figure(figsize=(size, 2 * size))</code> it says <code>AttributeError: 'CustomJointGrid' object has no attribute 'size'</code></span>
<span class="comment-copy">@StephenRauch Not sure if I understand. You mean add <code>size</code> to <code>super().init(size=5, *args, **kwargs)</code>?</span>
<span class="comment-copy">Thanks. That is what I was looking for!</span>
<span class="comment-copy">I thought it would be better and easier to inherit them from the parent class?</span>
<span class="comment-copy">Depends. I don't know what you're ultimatively want to achieve. But I updated the answer with a different option.</span>
<span class="comment-copy">Thanks. I want to use the same <code>size</code>, ` ratio` etc. as defined in the parent class. The problem with the second answer is that the default option (6) of <code>size</code> if not available (<code>size</code> is not in <code>kwargs</code>), and thus it sets <code>size=10</code>.</span>
<span class="comment-copy">In that case I think I don't understand the problem. I though you wanted to change the size? But you could of course also set it to <code>6</code>.</span>
<span class="comment-copy">You cannot change that single line of the parent class. Either you rewrite the complete <code>__init__</code> method and use your custom line there, or you initialize the FacetGrid as it is, and later do something like <code>self.fig.set_size_inches( ... )</code>. Knowing that the size of the figure is <code>size</code>, you can do something like <code>w,h=self.fig.get_size_inches(); fig.set_size_inches(w, 2*h)</code>.</span>
