<div class="post-text" itemprop="text">
<p>What's the purpose of keeping track of blocks in Python bytecode?</p>
<p>The documentation <a href="https://docs.python.org/3/library/dis.html#opcode-POP_BLOCK" rel="noreferrer">here</a> mentions:</p>
<blockquote>
<p>... Per frame, there is a stack of blocks, denoting nested loops, try statements, and such.</p>
</blockquote>
<p>But they don't actually seem necessary to actually perform loops. For instance, playing around with the REPL I see:</p>
<pre><code>&gt;&gt;&gt; def foo():
...   while True:
...     print('hi')
... 
&gt;&gt;&gt; for inst in list(dis.get_instructions(foo)): print(inst)
... 
Instruction(opname='SETUP_LOOP', opcode=120, arg=12, argval=14, argrepr='to 14', offset=0, starts_line=2, is_jump_target=False)
Instruction(opname='LOAD_GLOBAL', opcode=116, arg=0, argval='print', argrepr='print', offset=2, starts_line=3, is_jump_target=True)
Instruction(opname='LOAD_CONST', opcode=100, arg=1, argval='hi', argrepr="'hi'", offset=4, starts_line=None, is_jump_target=False)
Instruction(opname='CALL_FUNCTION', opcode=131, arg=1, argval=1, argrepr='', offset=6, starts_line=None, is_jump_target=False)
Instruction(opname='POP_TOP', opcode=1, arg=None, argval=None, argrepr='', offset=8, starts_line=None, is_jump_target=False)
Instruction(opname='JUMP_ABSOLUTE', opcode=113, arg=2, argval=2, argrepr='', offset=10, starts_line=None, is_jump_target=False)
Instruction(opname='POP_BLOCK', opcode=87, arg=None, argval=None, argrepr='', offset=12, starts_line=None, is_jump_target=False)
Instruction(opname='LOAD_CONST', opcode=100, arg=0, argval=None, argrepr='None', offset=14, starts_line=None, is_jump_target=True)
Instruction(opname='RETURN_VALUE', opcode=83, arg=None, argval=None, argrepr='', offset=16, starts_line=None, is_jump_target=False)
</code></pre>
<p>The <code>JUMP_ABSOLUTE</code> instruction listed jumps to the <code>LOAD_GLOBAL</code> instruction listed. From just looking at the instructions, it seems like <code>SETUP_LOOP</code> and <code>POP_BLOCK</code> opcodes could be no-ops.</p>
<p>From what I understand, in Python there are no block scoped variables, so that doesn't like it would be the reason either.</p>
</div>
<div class="post-text" itemprop="text">
<p>CPython uses a stack machine model, where temporary values are pushed onto a value stack and popped by instructions that use them. When a loop ends, depending on how it ends, it may have left values on the value stack that are no longer needed.</p>
<p>A frame's block stack keeps track of the value stack level at the start of loops and a few other constructs, so the value stack can be restored to the state that code after the loop/other construct needs the stack to be in. <code>POP_BLOCK</code> is one of the constructs that restores the stack to a pre-block-entry state.</p>
<p>The information in the block stack is very important for exception-handling constructs, since the value stack could be in all sorts of weird states when an exception occurs. It's not as necessary for loops, and I believe <a href="https://github.com/python/cpython/commit/520b7ae27e39d1c77ea74ccd1b184d7cb43f9dcb" rel="nofollow noreferrer">a patch</a> going into CPython 3.8 will eliminate block stack entries for loops, instead having the compiler determine the necessary handling statically.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>SETUP_LOOP</code> and <code>POP_BLOCK</code> bytecodes in your example function are useless because the loop runs forever, but if you had a <code>break</code> statement inside the loop, the infrastructure they set up in the frame would be used. The interpreter would put a <code>BREAK_LOOP</code> bytecode where the <code>break</code> statement occurred, and it would use the block information to find the nearest loop to break out of.</p>
<p>Note that <a href="https://github.com/python/cpython/blob/a8c342465b977115b88a4f130833a2fd4c4e7356/Doc/whatsnew/3.8.rst#cpython-bytecode-changes" rel="nofollow noreferrer">this part of the bytecode is apparently going to change in Python 3.8</a>, so you may not want to invest too much effort into understanding how it currently works. You can read <a href="https://bugs.python.org/issue17611" rel="nofollow noreferrer">issue 17611</a> on the Python bug tracker to see how the topic was discussed before being implemented.</p>
</div>
<span class="comment-copy">Not sure, but it might be related to exception handling somehow.</span>
