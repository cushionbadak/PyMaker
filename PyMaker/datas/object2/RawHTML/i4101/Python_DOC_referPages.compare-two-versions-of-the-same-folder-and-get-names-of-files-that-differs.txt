<div class="post-text" itemprop="text">
<p>Suppose I have following simplified files structure </p>
<pre><code>main_folder
    |__ foo.json
    |
    |__ sub_folder
          |__bar.json
</code></pre>
<p>I have two copies of the <code>main_folder</code>, e.g. <code>main_folder_v1</code> and <code>main_folder_v2</code></p>
<p>I want to compare both versions and get names of all files that differs (for example, get <code>"foo.json"</code> in case its content was updated in <code>main_folder_v2</code>)</p>
<p>And I use below code</p>
<pre><code>import filecmp

comparison_result = filecmp.dircmp(main_folder_v1, main_folder_v2)
files_that_differs = comparison_result.diff_files
</code></pre>
<p>The problem is that I will get <code>["foo.json"]</code> in case it was updated in <code>main_folder_v2</code>, but I will never get <code>["bar.json"]</code> as it seem that comparison of files in <code>sub_folder</code> not performed</p>
<p>Is there any possibility to compare folders recursively using <a href="https://docs.python.org/3/library/filecmp.html" rel="nofollow noreferrer">filecmp</a> and get names of files that differs or <code>os.walk()</code> is the only solution?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/filecmp.html#module-filecmp" rel="nofollow noreferrer">[Python]: filecmp - File and Directory Comparisons</a> supports recursive traversing via <code>dircmp.subdirs</code>. No need for <code>os.walk</code> (or any other similar functions).</p>
<p><em>code.py</em>:</p>
<pre><code>import sys
import filecmp
import os


main_folder_v1 = "dir_v1"
main_folder_v2 = "dir_v2"

ROOT_DIR_MARKER = ""


def traverse_dircmp(dircmp_obj, dir_name=ROOT_DIR_MARKER):
    for item in dircmp_obj.diff_files:
        yield os.path.join(dir_name, item)
    for subdir_name in dircmp_obj.subdirs:
        yield from traverse_dircmp(dircmp_obj.subdirs[subdir_name], dir_name=os.path.join(dir_name, subdir_name))
        #for item in traverse_dircmp(dircmp_obj.subdirs[subdir_name], dir_name=os.path.join(dir_name, subdir_name)):
        #    yield item


def traverse_dircmp_list(dircmp_obj, dir_name=ROOT_DIR_MARKER):
    ret = [os.path.join(dir_name, item) for item in dircmp_obj.diff_files]
    for subdir_name in dircmp_obj.subdirs:
        ret.extend(traverse_dircmp_list(dircmp_obj.subdirs[subdir_name], dir_name=os.path.join(dir_name, subdir_name)))
    return ret


def main():
    comparison_object = filecmp.dircmp(main_folder_v1, main_folder_v2)

    comparison_result = traverse_dircmp(comparison_object)
    print("{:s}: {:}".format("Different files (gen)", list(comparison_result)))

    comparison_result_list = traverse_dircmp_list(comparison_object)
    print("{:s}: {:}".format("Different files (list)", comparison_result_list))


if __name__ == "__main__":
    print("Python {:s} on {:s}\n".format(sys.version, sys.platform))
    main()
</code></pre>
<p><strong>Output</strong> (for a dir structure similar to yours):</p>
<blockquote>
<pre><code>(py35x64_test) e:\Work\Dev\StackOverflow\q050157870&gt;"e:\Work\Dev\VEnvs\py35x64_test\Scripts\python.exe" code.py
Python 3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)] on win32

Different files (gen): ['foo.json', 'subdir00\\bar.json', 'subdir00\\subdir001\\x.json']
Different files (list): ['foo.json', 'subdir00\\bar.json', 'subdir00\\subdir001\\x.json']
</code></pre>
</blockquote>
<p><strong><em>@EDIT0</em></strong>:</p>
<ul>
<li>Modified the <code>traverse_dircmp</code> function to return the list of files, instead of printing them, as requested in one of the comments</li>
</ul>
<p><strong><em>@EDIT1</em></strong>:</p>
<ul>
<li>Added generator functionality (as a personal exercise) which is the new (and preferred) style, and doesn't consume memory in case of huge dirs (<strong>!!requires <em>Python3.3</em> or higher!!</strong>, or <code>yield from</code> statement can be replaced by the 2 commented (<code>for</code> and <code>yield</code>) lines below it)</li>
</ul>
</div>
<span class="comment-copy">Whats wrong with <code>os.walk</code></span>
<span class="comment-copy">I agree with @SuperStew I think <code>os.walk</code> along with <code>set.symmetric_difference</code> would handle this</span>
<span class="comment-copy">@CoryKramer, SuperStew, There is nothing wrong with <code>os.walk</code>. I was just looking for a solution as simple as <code>comparison_result.diff_files</code>. In case there is no such solution I will use <code>os.walk</code>...</span>
<span class="comment-copy">This almost did the trick (+1), but instead of printing out file names from each subfolder I need to get complete list of all the file names that differs. Can <code>traverse_dircmp()</code> be modified in a way to append items from each subfolder to complete list and return it?</span>
<span class="comment-copy">I tried to define <code>my_list = []</code> outside the function and update <code>global my_list</code> by  replacing <code>print("{:s} - {:}".format(dir_name, dircmp_obj.diff_files))</code> with <code>my_list.extend(dircmp_obj.diff_files)</code>, but I guess it's not the best idea...:)</span>
<span class="comment-copy">Check my edit and see whether it fits your needs.</span>
<span class="comment-copy">It was working before the last update. I can't try solution with generator now, but I'm sure it will work also. Thanks</span>
