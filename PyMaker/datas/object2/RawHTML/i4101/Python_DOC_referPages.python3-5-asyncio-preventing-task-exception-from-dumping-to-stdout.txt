<div class="post-text" itemprop="text">
<p>I have a textbased interface (asciimatics module) for my program that uses asyncio and discord.py module and occasionally when my wifi adapter goes down I get an exception like so:</p>
<pre><code>Task exception was never retrieved
future: &lt;Task finished coro=&lt;WebSocketCommonProtocol.run() done, defined at /home/mike/.local/lib/python3.5/site-packages/websockets/protocol.py:428&gt; exception=ConnectionResetError(104, 'Connection reset by peer')&gt;
Traceback (most recent call last):
  File "/usr/lib/python3.5/asyncio/tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "/home/mike/.local/lib/python3.5/site-packages/websockets/protocol.py", line 434, in run
    msg = yield from self.read_message()
  File "/home/mike/.local/lib/python3.5/site-packages/websockets/protocol.py", line 456, in read_message
    frame = yield from self.read_data_frame(max_size=self.max_size)
  File "/home/mike/.local/lib/python3.5/site-packages/websockets/protocol.py", line 511, in read_data_frame
    frame = yield from self.read_frame(max_size)
  File "/home/mike/.local/lib/python3.5/site-packages/websockets/protocol.py", line 546, in read_frame
    self.reader.readexactly, is_masked, max_size=max_size)
  File "/home/mike/.local/lib/python3.5/site-packages/websockets/framing.py", line 86, in read_frame
    data = yield from reader(2)
  File "/usr/lib/python3.5/asyncio/streams.py", line 670, in readexactly
    block = yield from self.read(n)
  File "/usr/lib/python3.5/asyncio/streams.py", line 627, in read
    yield from self._wait_for_data('read')
  File "/usr/lib/python3.5/asyncio/streams.py", line 457, in _wait_for_data
    yield from self._waiter
  File "/usr/lib/python3.5/asyncio/futures.py", line 361, in __iter__
    yield self  # This tells Task to wait for completion.
  File "/usr/lib/python3.5/asyncio/tasks.py", line 296, in _wakeup
    future.result()
  File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result
    raise self._exception
  File "/usr/lib/python3.5/asyncio/selector_events.py", line 662, in _read_ready
    data = self._sock.recv(self.max_size)
ConnectionResetError: [Errno 104] Connection reset by peer
</code></pre>
<p>This exception is non-fatal and the program is able to re-connect despite it - what I want to do is prevent this exception from dumping to stdout and mucking up my text interface.</p>
<p>I tried using ensure_future to handle it but it doesn't seem to work. Am I missing something:</p>
<pre><code>@asyncio.coroutine
def handle_exception():
    try:
        yield from WebSocketCommonProtocol.run()
    except Exception:
        print("SocketException-Retrying")


asyncio.ensure_future(handle_exception())
#start discord client
client.run(token)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>Task exception was never retrieved</code> - is not actually exception propagated to stdout, but a log message that warns you that you never retrieved exception in one of your tasks. You can find details <a href="https://docs.python.org/3/library/asyncio-dev.html#detect-exceptions-never-consumed" rel="nofollow noreferrer">here</a>.</p>
<p>I guess, most easy way to avoid this message in your case is to retrieve exception from task manually:</p>
<pre><code>coro = WebSocketCommonProtocol.run()  # you don't need any wrapper
task = asyncio.ensure_future(coro)

try:

    #start discord client
    client.run(token)

finally:

     # retrieve exception if any:
    if task.done() and not task.cancelled():
        task.exception()  # this doesn't raise anything, just mark exception retrieved
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The answer provided by Mikhail is perfectly acceptable, but I realized it wouldn't work for me since the task that is raising the exception is buried deep in some module so trying to retrieve it's exception is kind've difficult. I found that instead if I simply set a custom exception handler for my asyncio loop (loop is created by the discord client):</p>
<pre><code>def exception_handler(loop,context):
   print("Caught the following exception")
   print(context['message'])

client.loop.set_exception_handler(exception_handler)
client.run(token)
</code></pre>
</div>
<span class="comment-copy">Hm so I tried this but I get the error: "NameError: name 'WebSocketCommonProtocol' is not defined". I guess this is defined in sockets module somewhere? Is there a more general way of retrieving the exception without having to specify where it came from?</span>
<span class="comment-copy">@user67081 error you get has nothing to do with retrieving the exception. This error indicates that you didn't import <code>WebSocketCommonProtocol</code>, but you use same class in code snippet in your question. May be you don't see this exception because you wrap relevant line in try/except block. You should import <code>WebSocketCommonProtocol</code> from where you're going to use it otherwise not your nor my code snippets wouldn't work. I assume that you need to import class from <a href="http://websockets.readthedocs.io/en/stable/api.html#websockets.protocol.WebSocketCommonProtocol" rel="nofollow noreferrer">websockets</a> module.</span>
<span class="comment-copy">@user67081 "Is there a more general way of retrieving the exception". I guess without having to specify concrete task, where exception came from? Yes, you can use <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.all_tasks" rel="nofollow noreferrer">asyncio.Task.all_tasks()</a> to get all existing tasks and retrieve exceptions from each of them. Some useful examples of how to handle tasks can be found <a href="https://stackoverflow.com/a/37345564/1113207">here</a>.</span>
<span class="comment-copy">I'm going to accept this as the answer but I'm adding another answer that I used for my actual fix since it's a little different.</span>
