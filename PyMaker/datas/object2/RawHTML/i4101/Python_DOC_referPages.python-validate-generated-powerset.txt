<div class="post-text" itemprop="text">
<p>I want to validate generated combinations only based on data with in "&lt; &gt;".</p>
<p>I have an excel sheet consisting of all the possible combinations generated based on "&lt;&gt;" condition:
   Below is the sample of that:</p>
<pre><code>    [&lt;Pen(x)&gt;-C(A2)-C(60)-&lt;jack(c)&gt;-xy1-[dress0]-C(D0)-lbr-]
    [&lt;Pen(x)&gt;-C(A2)-C(60)-NULL-xy1-[dress0]-C(D0)-lbr-]
    [NULL-C(A2)-C(60)-&lt;jack(c)&gt;-xy1-[dress0]-C(D0)-lbr-]
    [NULL-C(A2)-C(60)-NULL-xy1-[dress0]-C(D0)-lbr-]
</code></pre>
<p>I want to check if the generated combinations is valid or not.
   For example: for the above list the original string before generating combinations is below:</p>
<pre><code>    &lt;Pen(x)&gt;-C(A2)-C(60)--&lt;jack(c)&gt;-xy1-[address0]-C(D0)-lbr-
</code></pre>
<p>Kindly help me to find a generic method to validate all the powersets generated based on &lt;&gt;.</p>
<p>To give a simple example: 
    I have the below list1.</p>
<pre><code>[&lt;A&gt;&lt;B&gt;-CAT-DOG]
[NULL-&lt;B&gt;-CAT-DOG]
[&lt;A&gt;-NULL-CAT-DOG]
[NULL-NULL-CAT-DOG]
</code></pre>
<p>The list1 is all possible combination of:</p>
<pre><code>&lt;A&gt;&lt;B&gt;-CAT-DOG
</code></pre>
<p>I want to check if the above list1 is valid or not</p>
</div>
<div class="post-text" itemprop="text">
<p>We can build the desired combinations using <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>, which generates the <a href="https://en.wikipedia.org/wiki/Cartesian_product" rel="nofollow noreferrer">Cartesian product</a> of its iterable arguments. But first we need to split the input string up into its components. We can do that by first adding some extra spaces and then calling the <code>.split</code> method.</p>
<p>We can then transform each string in the list returned by <code>.split</code> into a tuple. Items enclosed by <code>&lt;</code> and <code>&gt;</code> get transformed into a 2-tuple containing the item and the <code>'NULL'</code> string, all other items become 1-tuples. </p>
<pre><code>from itertools import product

def make_powerset(base):
    # Add some spaces to make splitting easier
    s = base.replace('-', ' ').replace('&lt;', ' &lt;').replace('&gt;', '&gt; ')

    # Convert items enclosed in &lt;&gt; into 2-tuples and make other items 1-tuples
    elements = [(u, 'NULL') if u.startswith('&lt;') else (u,) for u in s.split()]

    # Create all the subsets by finding the Cartesian product of all the tuples
    return {'-'.join(t).replace('&gt;-&lt;', '&gt;&lt;') for t in product(*elements)}

# Tests

# Make a powerset from base
base = '&lt;Pen(x)&gt;-C(A2)-C(60)--&lt;jack(c)&gt;-xy1-[address0]-C(D0)-lbr-'
powerset = make_powerset(base)
for t in powerset:
    print(t)
print()

# Test if the following data are in the powerset
data = (
    '&lt;Pen(x)&gt;-C(A2)-C(60)-&lt;jack(c)&gt;-xy1-[address0]-C(D0)-lbr-',
    '&lt;Pen(x)&gt;-C(A2)-C(60)-NULL-xy1-[address0]-C(D0)-lbr-',
    'NULL-C(A2)-C(60)-&lt;jack(c)&gt;-xy1-[address0]-C(D0)-lbr-',
    'NULL-C(A2)-C(60)-NULL-xy1-[address0]-C(D0)-lbr-',
    '&lt;Pen(y)&gt;-C(A2)-C(60)-NULL-xy1-[address0]-C(D0)-lbr-',
)

for s in data:
    print(s, s.rstrip('-') in powerset)

print('\n', '- ' * 20, '\n')

# Make another powerset
for t in make_powerset('&lt;A&gt;&lt;B&gt;-CAT-DOG&lt;C&gt;'):
    print(t)
</code></pre>
<p><strong>output</strong></p>
<pre><code>&lt;Pen(x)&gt;-C(A2)-C(60)-&lt;jack(c)&gt;-xy1-[address0]-C(D0)-lbr
NULL-C(A2)-C(60)-NULL-xy1-[address0]-C(D0)-lbr
&lt;Pen(x)&gt;-C(A2)-C(60)-NULL-xy1-[address0]-C(D0)-lbr
NULL-C(A2)-C(60)-&lt;jack(c)&gt;-xy1-[address0]-C(D0)-lbr

&lt;Pen(x)&gt;-C(A2)-C(60)-&lt;jack(c)&gt;-xy1-[address0]-C(D0)-lbr- True
&lt;Pen(x)&gt;-C(A2)-C(60)-NULL-xy1-[address0]-C(D0)-lbr- True
NULL-C(A2)-C(60)-&lt;jack(c)&gt;-xy1-[address0]-C(D0)-lbr- True
NULL-C(A2)-C(60)-NULL-xy1-[address0]-C(D0)-lbr- True
&lt;Pen(y)&gt;-C(A2)-C(60)-NULL-xy1-[address0]-C(D0)-lbr- False

 - - - - - - - - - - - - - - - - - - - -  

NULL-NULL-CAT-DOG-NULL
NULL-&lt;B&gt;-CAT-DOG-NULL
&lt;A&gt;-NULL-CAT-DOG-&lt;C&gt;
&lt;A&gt;-NULL-CAT-DOG-NULL
NULL-NULL-CAT-DOG-&lt;C&gt;
&lt;A&gt;&lt;B&gt;-CAT-DOG-&lt;C&gt;
NULL-&lt;B&gt;-CAT-DOG-&lt;C&gt;
&lt;A&gt;&lt;B&gt;-CAT-DOG-NULL
</code></pre>
</div>
<span class="comment-copy">You need to give us a clearer explanation of your problem since you appear to be using the term <a href="https://en.wikipedia.org/wiki/Power_set" rel="nofollow noreferrer">powerset</a> in an unusual way. Also, it would be good if you posted some relevant code.</span>
<span class="comment-copy">PM 2Ring thanks for the response. I have edited accordingly. And I am new to python, looking for ideas to implement this.</span>
<span class="comment-copy">Generating powersets is pretty easy, and testing if a given set is a subset of another is very easy: there are built-in methods for that. The problem here is your obscure notation. Where does one item end and the next one begin?</span>
<span class="comment-copy">What is the rule, that makes a "powerset" valid?  Have you accomplished importing your data to python?</span>
<span class="comment-copy">Thanks, that makes things a lot clearer!</span>
<span class="comment-copy">Thank you so much. It was of great help</span>
<span class="comment-copy">@Perl Excellent. If my answer has helped you, please consider <a href="http://meta.stackexchange.com/a/5235">accepting</a> it.</span>
<span class="comment-copy">Have done it long back. Thanks again</span>
<span class="comment-copy">@Perl I'm glad you like my answer, but you haven't actually accepted it yet.</span>
<span class="comment-copy">@Perl You can click the grey check next to this answer to toggle it green. ;-)</span>
