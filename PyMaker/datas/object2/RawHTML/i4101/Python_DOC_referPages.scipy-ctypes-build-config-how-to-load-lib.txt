<div class="post-text" itemprop="text">
<p><a href="https://www.scipy-lectures.org/advanced/interfacing_with_c/interfacing_with_c.html#id6" rel="nofollow noreferrer">These docs</a> have a nice example on how to compile some external C/C++ code and load this using <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">ctypes</a>. This works great with manual compilation (where i'm controlling the names of my library which later gets loaded).</p>
<p><strong>Now how to prepare some code to be used within scipy with full incorporation into scipy's build-system?</strong> A more general <a href="https://github.com/scipy/scipy/issues/8575" rel="nofollow noreferrer">github-issue</a> does not provide the information i'm looking for (and sadly, there is not much action).</p>
<p>Also: i'm more interested in using ctypes (no real usage within scipy? despite numpy's explicit tools provided?), not cython which is used in all the other wrappers (i don't see any good reason for cython, except for it's common use there: my lib will only get loaded/called once and it's slow compared to potential call-overheads).</p>
<p>Let's assume i added a directory like:</p>
<pre><code>scipy/optimize/_mylib/README
...
scipy/optimize/_mylib/src
scipy/optimize/_mylib/src/a.cpp
...
... bunch of cpp/h files
</code></pre>
<p>Let's touch <code>scipy/optimize/setup.py</code>:</p>
<pre><code>from __future__ import division, print_function, absolute_import

from os.path import join

from scipy._build_utils import numpy_nodepr_api

def configuration(parent_package='',top_path=None):
    from numpy.distutils.misc_util import Configuration
    from numpy.distutils.system_info import get_info
    config = Configuration('optimize',parent_package, top_path)

    # MODIFICATION START
    # OTHER EXTENSIONS OMITTED 
    # INSPIRED BY scipy.spatial: ckdtree/src &amp; setup.py

    mylib_src = ['a.cpp', 'b.cpp']
    mylib_src = [join('_mylib', 'src', x) for x in mylib_src]

    mylib_headers = ['a.h', 'b.h']
    mylib_headers = [join('_mylib', 'src', x) for x in mylib_headers]

    mylib_dep = mylib_headers + mylib_src

    config.add_extension('_mylib',
                         sources=mylib_src,
                         depends=mylib_dep,
                         include_dirs=[join('_mylib', 'src')])
    # MODIFICATION END    

    return config

if __name__ == '__main__':
    from numpy.distutils.core import setup
    setup(**configuration(top_path='').todict())
</code></pre>
<p>Now <strong>this works</strong> in regards to:</p>
<pre><code># in scipy base-dir
python3 setup.py build_ext --inplace
</code></pre>
<p>which produces (within <code>scipy.optimize</code>):</p>
<pre><code>_mylib.cpython-35m-x86_64-linux-gnu.so
</code></pre>
<p>and can be loaded in the interpreter (started from dir <code>scipy.optimize</code>)</p>
<pre><code>import numpy.ctypeslib as ctl
lib = ctl.load_library('_mylib.cpython-35m-x86_64-linux-gnu.so', '.')
lib
# &lt;CDLL '/home......._mylib.cpython-35m-x86_64-linux-gnu.so', handle X at X
</code></pre>
<h3>Now the question</h3>
<p>Assuming i want to add a new file:</p>
<pre><code>scipy/optimize/new_alg.py
</code></pre>
<p>No matter what i try, i'm not able to load this one. E.g.:</p>
<pre><code># this is scipy/optimize/new_alg.py
import numpy.ctypeslib as ctl
mylib = ctl.load_library('_mylib', '.')
mylib = ctl.load_library('_mylib', '.optimize')
# ...
</code></pre>
<p>The second argument is probably expected to be a full-path (opposed to partials or wildcards). All my attempts failed with the general <a href="https://docs.scipy.org/doc/numpy-1.14.0/reference/routines.ctypeslib.html#numpy.ctypeslib.load_library" rel="nofollow noreferrer">error</a>:</p>
<pre><code>OSError: no file with expexted extension
</code></pre>
<p><strong>What should i do here?</strong> (goal: ready to be a real addition to scipy: multiple platforms).</p>
<p>Is the approach itself doomed? From a naive perspective it's promising: the expected downsides of ctypes are irrelevant for me and it's part of the standard. Additionally it got dedicated support in numpy and i control the C/C++-part, so that i can provide a simplified single-function wrapper to be called. Why isn't this used in other parts of scipy? </p>
</div>
<div class="post-text" itemprop="text">
<p>Inspired by <a href="https://github.com/numpy/numpy/blob/b8e8a6ee1f032474a0119fa0c0a6dfb51355abd6/numpy/tests/test_ctypeslib.py" rel="nofollow noreferrer">numpy's sources</a>, i'm now able to load the lib using:</p>
<pre><code>import scipy as scp
import numpy.ctypeslib as ctl
lib = ctl.load_library('_mylib', scp.optimize.__file__)  # this is the magical line
myfunc = lib.myfunc
</code></pre>
<p>Well... at least in theory!</p>
<p>Against my prior assumption, my lib-build is not equivalent to a manual-compile and the function i want to load is not available (<code>undefined symbol: myfunc</code>). But the problem of locating the lib feels clean now and is solved for me.</p>
</div>
