<div class="post-text" itemprop="text">
<p>I am trying a POC running a python script in a back-end implemented in PHP. The web server is Apache in a Docker container. </p>
<p>This is the PHP code:</p>
<pre><code>$command = escapeshellcmd('/usr/local/test/script.py');
        $output = shell_exec($command);
        echo $output;
</code></pre>
<p>When I execute the python script using the back-end we are getting a permission denied error for creating the file.</p>
<p>My python script:</p>
<pre><code>#!/usr/bin/env python

file = open("/tmp/testfile.txt","w+")

file.write("Hello World")

file.close()
</code></pre>
<p>This is the error I'm getting:</p>
<blockquote>
<p>IOError: [Errno 13] Permission denied: 'testfile.txt'</p>
</blockquote>
<p>For the directory im working with the permissions are as follows,</p>
<blockquote>
<p>drwxrwsr-x 2 1001 www-data 4096 May  8 05:35 . </p>
<p>drwxrwxr-x 3 1001    1001 4096 May  3 08:49 ..</p>
</blockquote>
<p>Any thoughts on this? How do I overcome this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>To start is is incredibly bad practice to have relative paths in <em>any</em> scripting environment. Start by rewriting your code to use a full path such as <code>/usr/local/test/script.py</code> and <code>/tmp/testfile.txt</code>. My guess is your script is attempting to write to a different spot than you think it is.</p>
<p>When you <em>know</em> exactly  where the files are being written go to the directory and run <code>ls -la</code> and check the permissions on the directory. You want it to be writeable by the same user or group as the web server runs.</p>
<p>Looking at the permissions you have shown you don't have the user able to write to the directory, just everyone and the group. You need to add user write permissions - <code>chmod u+w /tmp</code> will do the job.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe the problem is that you are trying to write to an existing file in the <code>/tmp/</code> directory. Typically <code>/tmp/</code> <a href="https://unix.stackexchange.com/questions/71622/what-are-correct-permissions-for-tmp-i-unintentionally-set-it-all-public-recu">will have the sticky permission bit set.</a> That means that only the owner of a file has permission to write or delete it. Group write permissions on files do not matter if the sticky bit is set on the parent directory.</p>
<p>So if this is the contents of your /tmp</p>
<pre><code>$ ls -al /tmp

drwxrwxrwt  5 root  root       760 Apr 30 12:00 .
drwxr-xr-x 21 root  root      4096 Apr 30 12:00 ..
-rw-rw----  2 1001  www-data    80 May  8 12:00 testfile.txt
</code></pre>
<p>We might assume that users in the group <code>www-data</code> should be able to write to <code>testfile.txt</code>. But that is not the case, since <code>.</code> (the /tmp/ directory itself) has the sticky bit set (the <code>t</code> in the permissions section indicates this). </p>
<p>The reason why the sticky bit is set here is that everyone should be able to write files there, but not have to worry that other users might modify our temporary files.</p>
<p>To avoid permission errors, you can use the standard library <a href="https://docs.python.org/3/library/tempfile.html#tempfile-examples" rel="nofollow noreferrer">tempfile</a> module. This code will create a unique filename such as <code>testfile.JCDxK2.txt</code>, so it doesn't matter if <code>testfile.txt</code> already exists.</p>
<pre><code>#!/usr/bin/env python

import tempfile

with tempfile.NamedTemporaryFile(
        mode='w',
        prefix='testfile.',
        suffix='.txt',
        delete=False,
    ) as file:
    file.write("Hello World")
</code></pre>
</div>
<span class="comment-copy">Make sure that apache user has permission to write file.</span>
<span class="comment-copy">give full path to <code>testfile.txt</code> like <code>/tmp/testfile.txt</code> and try it seems apache user don't have permission where you trying to make <code>testfile.txt</code></span>
<span class="comment-copy">@chintanthakar for the /tmp/testfile.txt directory it works fine. but i have already given permission to the apache user in this case it is www-data</span>
<span class="comment-copy">What is the output of <code>ls -al /tmp/</code>? Have you tried running the script both as your own user and as the apach user? With typical permission setup (umask), the www-data user would not have write access to <code>/tmp/textfile.txt</code> if it was already created by another user.</span>
<span class="comment-copy">If the file name doesn't actually matter for your purpose, you could use the python standard library <a href="https://docs.python.org/3.7/library/tempfile.html" rel="nofollow noreferrer">tempfile</a> module here. This can be used to create temp files with unique filenames, so you don't need to worry if some filename is already taken. I always use the tempfile module for temporary files. (It's also cross platform, so you don't need to know the proper path to the temp directory on various platforms)</span>
<span class="comment-copy">i changed the paths. so the apache server in the docker runs by the root and www-data. i gave both users the permissions but still the problem is the same.</span>
<span class="comment-copy">update the code in your question and give us the output of <code>ls -la</code> in the directory.</span>
<span class="comment-copy">total 12 drwxrwsr-x 2 1001 www-data 4096 May  8 05:35 . drwxrwxr-x 3 1001     1001 4096 May  3 08:49 ..</span>
<span class="comment-copy">No, update your question with your new code and add the <i>entire</i> output to the question. The more information in your question the better.</span>
<span class="comment-copy">i updated it and i tried creating a file using php. it works but calling python script: it doest work though.</span>
