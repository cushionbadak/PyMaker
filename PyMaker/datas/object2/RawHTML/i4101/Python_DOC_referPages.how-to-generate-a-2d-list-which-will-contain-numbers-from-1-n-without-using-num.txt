<div class="post-text" itemprop="text">
<p>The 2D list should be like this:</p>
<pre><code>matrix = [
             [1, 2, 3, 4],
             [5, 6, 7, 8],
             [9, 10, 11, 12],
             [13, 14, 15, 16]
         ]
</code></pre>
<p>I am unable to find the logic for this. I have done this using numpy's reshape function. But unable to do without numpy.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is one simple way:</p>
<pre><code>res = [list(range(i, i+4)) for i in range(1, 14, 4)]

print(res)

[[1, 2, 3, 4],
 [5, 6, 7, 8],
 [9, 10, 11, 12],
 [13, 14, 15, 16]]
</code></pre>
<p>You can also wrap in a generic function:</p>
<pre><code>def square(n):
    return [list(range(i, i+n)) for i in range(1, n**2, n)]

res = square(4)
</code></pre>
<p><strong>Explanation</strong></p>
<p>The syntax for <code>range</code> construction is <code>range(start, end, [step])</code>. <code>step</code> is optional; if it is not specified, it is assumed to be 1.</p>
<ul>
<li>The first part <code>range(i, i+n)</code> creates a range object from <code>i</code> to <code>i+n-1</code>, inclusive.</li>
<li>The second part <code>range(1, n**2, n)</code> iterates in steps of <code>n</code> to <code>n*n</code>, not including the final term. Since <code>end</code> is non-inclusive, squaring <code>n</code> provides the desired cap.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>This is one approach</p>
<pre><code>l = range(1, 17)     #Create a list using range
print([l[i:i+4] for i in range(0, len(l), 4)])    #Divide the list into 4 equal chunks
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I like this one too:</p>
<pre><code>&gt;&gt; [[i+4*j for i in range(1,5)] for j in range(4)]
[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a list-comprehension like this with tuple unpacking:</p>
<pre><code>&gt;&gt;&gt; [[*range(i, i+4)] for i in range(1, 14, 4)]
[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]                                                       
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>or you could use the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>grouper</code></a> from the <code>itertools</code> recipes to split a given list (or iterable) into an 2d matrix. this is something along those lines:</p>
<pre><code>def to2d(items, width):
    return list(list(i) for i in zip(*(iter(items_1d),) * width))

items_1d = list(range(1, 17))   # or just  items_1d = range(1, 17)
print(to2d(items=items_1d, width=4))
</code></pre>
</div>
<span class="comment-copy">beat me for a second ;)</span>
