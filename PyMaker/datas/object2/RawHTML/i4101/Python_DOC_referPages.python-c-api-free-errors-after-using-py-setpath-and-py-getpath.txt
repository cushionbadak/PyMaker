<div class="post-text" itemprop="text">
<p>I'm trying to figure out why I can't simply get and set the python path through its C API. I am using Python3.6, on Ubuntu 17.10 with gcc version 7.2.0. Compiling with:</p>
<p>gcc pytest.c `python3-config --libs` `python3-config --includes`</p>
<pre><code>#include &lt;Python.h&gt;

int main()
{
    Py_Initialize(); // removes error if put after Py_SetPath

    printf("setting path\n"); // prints
    Py_SetPath(L"/usr/lib/python3.6"); // Error in `./a.out': free(): invalid size: 0x00007fd5a8365030 ***
    printf("success\n"); // doesn't print
    return 0;
}
</code></pre>
<p>Setting the path works fine, unless I also try to get the path prior to doing so. If I get the path at all, even just to print without modifying the returned value or anything, I get a "double free or corruption" error. </p>
<p>Very confused. Am I doing something wrong or is this a bug? Anyone know a workaround if so?</p>
<p>Edit: Also errors after calling <code>Py_Initialize();</code>. Updated code. Now errors even if I don't call Py_GetPath() first.</p>
</div>
<div class="post-text" itemprop="text">
<p>[the below answer refers to <a href="https://stackoverflow.com/revisions/50198057/2">this version of the question</a>.]</p>
<p>From the <a href="https://docs.python.org/3/c-api/init.html" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p><code>void Py_Initialize()</code></p>
<p>Initialize the Python interpreter. In an application embedding Python, this should be called before using any other Python/C API functions; with the exception of <code>Py_SetProgramName()</code>, <code>Py_SetPythonHome()</code> and <code>Py_SetPath()</code>.</p>
</blockquote>
<p>But the code you show does call <code>Py_GetPath()</code> before it calls <code>Py_Initialize();</code>, which it per the above paragraph implicitly should not.</p>
</div>
<div class="post-text" itemprop="text">
<p>From alk it seems related to this bug: <a href="https://bugs.python.org/issue31532" rel="nofollow noreferrer">https://bugs.python.org/issue31532</a></p>
<p>Here is the workaround I am using. Since you can't call <code>Py_GetPath()</code> before <code>Py_Initialize()</code>, and also seemingly you can't call <code>Py_SetPath()</code> after <code>Py_Initialize()</code>, you can add to or get the path like this after calling <code>Py_Initialize()</code>:</p>
<pre><code>#include &lt;Python.h&gt;

int main()
{
    Py_Initialize();

    // get handle to python sys.path object
    PyObject *sys = PyImport_ImportModule("sys");
    PyObject *path = PyObject_GetAttrString(sys, "path");

    // make a list of paths to add to sys.path
    PyObject *newPaths = PyUnicode_Split(PyUnicode_FromWideChar(L"a:b:c", -1), PyUnicode_FromWideChar(L":", 1), -1);

    // iterate through list and add all paths
    for(int i=0; i&lt;PyList_Size(newPaths); i++) {
        PyList_Append(path, PyList_GetItem(newPaths, i));
    }

    // print out sys.path after appends
    PyObject *newlist = PyUnicode_Join(PyUnicode_FromWideChar(L":", -1), path);
    printf("newlist = %ls\n", PyUnicode_AsWideCharString(newlist, NULL));
    return 0;
}
</code></pre>
</div>
<span class="comment-copy">Why do you use a C++ compiler to compile C code? Doing so makes the C code be C++ code, which in turn invalidates your questions' tagging.</span>
<span class="comment-copy">Does <code>Python.h</code> take care of including <code>stdio.h</code>?</span>
<span class="comment-copy">I typed g++ by accident. Same result with gcc. Yes <code>Python.h</code> includes <code>stdio.h</code>.</span>
<span class="comment-copy">You may very well edit your question and correct any "typos".</span>
<span class="comment-copy">Most Python C API functions cannot be used before <code>Py_Initialize()</code>.  The docs say <code>Py_SetPath()</code> can be, but they do not say that <code>Py_GetPath()</code> can be called before <code>Py_Initialize()</code>.  Do you have any reason to think it can?</span>
<span class="comment-copy">Thanks. If I call <code>Py_Initialize();</code> first it works without crash on <code>Py_SetPath()</code>. Although either way the printf correctly outputs: <code>Py_GetPath(): /usr/lib/python36.zip:/usr/lib/python3.6:/usr/lib/python3.6:/usr/lib/python3.6/lib-dynload</code>. Edit: nevermind it still errors</span>
