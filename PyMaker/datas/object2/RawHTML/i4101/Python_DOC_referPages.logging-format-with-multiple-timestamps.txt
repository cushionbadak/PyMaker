<div class="post-text" itemprop="text">
<p>Due to specific requirements of my application, I need to have the same timestamp added to a single logging entry but with different formats for each timestamp.  These two timestamps are NOT adjacent to one another, so other log record fields are between them. Since <code>datefmt</code> is passed as a second parameter against <code>format</code> in the <code>formatter</code>, I've yet to figure out how you can provide two different date formats for a single logging entry.</p>
<p>The ONLY question I'm asking is if this possible with Python WITHOUT custom formatters or filters.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is not possible in stdlib <code>logging</code>, because of the way the source code is written. The formatter class will set an <code>asctime</code> on each <code>LogRecord</code> instance by using a <code>formatTime</code> method.  As you can see in the logging module, code <a href="https://github.com/python/cpython/blob/dff46758f267ad6c13096c69c4e1dee17f9969aa/Lib/logging/__init__.py#L489" rel="nofollow noreferrer">here</a>, the relevant field <code>%(asctime)</code> is actually a string attribute and not a <code>datetime</code> instance.   This means it can not accept custom formatting beyond the trivial string operations such as padding and alignment.</p>
<p>I would agree with you that this is a shortcoming in stdlib <code>logging</code> module, and urge you to consider a more powerful logging framework such as <a href="http://www.structlog.org/en/stable/" rel="nofollow noreferrer">structlog</a>.</p>
<p>Other readers of your question might not be so against using a <code>Formatter</code> subclass in stdlib logging. For them, I would suggest defining a formatter which uses a <code>datetime</code> instance on the <code>LogRecord</code> instance, in combination with a braces-style formatter template string. This allows unrestricted use of the <code>asctime</code> field with multiple strftime formats.</p>
<p>The set-up is simpler than using a <code>Filter</code> or <code>LoggingAdapter</code>, it's just a one-line override of the <code>formatTime</code> method:</p>
<pre><code>import logging
from datetime import datetime

class MyFormatter(logging.Formatter):
    def formatTime(self, record, datefmt=None):
        return datetime.fromtimestamp(record.created)

fmt = '{asctime:%Y-%m-%d %H:%M:%S} - {levelname} - {asctime:%a %b %d %Y} - {message}'
logger = logging.getLogger()
handler = logging.StreamHandler()
handler.setFormatter(MyFormatter(fmt=fmt, style='{'))
logger.addHandler(handler)
logger.warning('the message')
</code></pre>
<p><em>Note:</em> if one of the formats you need is just a timestamp (seconds since epoch), then you don't need custom Formatter "gymnastics" at all - you can just use the <code>created</code> field (which accepts float formatting customizations) in combination with <code>asctime</code> field.</p>
</div>
<div class="post-text" itemprop="text">
<p>Very basic example with raw timestamp and human-readable date:</p>
<pre><code>import logging
import sys
from datetime import datetime


class ContextFilter(logging.Filter):
    """
    This is a filter which injects contextual information into the log.
    """

    @staticmethod
    def some_format(timestamp):
        return datetime.fromtimestamp(
            timestamp
        ).strftime('%Y-%m-%d %H:%M:%S')

    def filter(self, record):

        record.format1 = record.created
        record.format2 = self.some_format(record.created)
        return True


formatter = logging.Formatter('%(format1)s - %(format2)s - %(name)s - %(levelname)s: %(message)s')
handler = logging.StreamHandler(sys.stdout)
handler.setFormatter(formatter)
handler.setLevel(logging.DEBUG)
logger = logging.Logger('test')
logger.addHandler(handler)

f = ContextFilter()
logger.addFilter(f)

logger.info('test')
</code></pre>
<p>Output: 
<code>1525883052.4808118 - 2018-05-09 19:24:12 - test - INFO: test</code></p>
</div>
<span class="comment-copy">Can't you just have two formats together? Something like <code>'%Y-%m-%d %H:%M:%S - %a %b %d %Y %H:%M:%S'</code>.</span>
<span class="comment-copy">Again, the assumption you're making is that the two timestamps are adjacent to one another.  If they need to appear in different spots with other log fields between them, how does this work?</span>
<span class="comment-copy">@robross0606  Could you please edit your question to include the exact date formats you wanted?  (I may have a suitable answer for you, but it has some caveats)</span>
<span class="comment-copy">@wim I'm really not interested in an answer that only works for very specific formats.  The requirements of each format may change, but the hurdle remains the same.  As far as I can tell, Python's built-in logging syntax does not provide a means for you to add multiple timestamps to a single logging entry with different formats.</span>
<span class="comment-copy">1.  Why would the requirements of your logging date formats change? 2. Would you be interested in answers which use a  <code>logging.Formatter</code> subclass? 3. Would you be interested in answers which use a 3rd-party logging module? (stlib logging is flexible but limited)</span>
<span class="comment-copy">I would say this probably doesn't qualify as avoiding "custom formatter gymnastics".</span>
<span class="comment-copy">@robross0606 Can you modify the original question to give technical guidelines for what you mean by "custom formatter gymnastics" -- because on my reading this approach is extremely concise, simple, uses the extendability hooks the standard logging module intends you to use, and in no sense looks like "gymnastics".</span>
<span class="comment-copy">+1 I agree this solution is good - it is similar to a recipe given in the docs: <a href="https://docs.python.org/3/howto/logging-cookbook.html#filters-contextual" rel="nofollow noreferrer">Using Filters to impart contextual information</a>. The downvote here is unwarranted!</span>
