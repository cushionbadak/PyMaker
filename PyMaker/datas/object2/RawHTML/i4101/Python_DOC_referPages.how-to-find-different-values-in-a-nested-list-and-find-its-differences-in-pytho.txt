<div class="post-text" itemprop="text">
<p>I have two nested lists, like this:</p>
<pre><code>list_1 = [[4,9,2],[3,5,7],[8,1,5]]
list_2 = [[4,9,2],[3,5,7],[8,1,6]]
</code></pre>
<p>I want to find the different values in between this two nested lists, and also it's differences. In the above lists, the different values are 5 and 6, so the difference is: -1(5-6). Note that no common values will be listed.</p>
<p>I want to store it in a list and print it's output:</p>
<pre><code>[-1]
</code></pre>
<p>Another example:</p>
<pre><code>list_1 = [[3, 6, 7], [4, 9, 9], [7, 6, 9]]
list_2 = [[6, 7, 2], [1, 5, 9], [8, 3, 4]]
</code></pre>
<p>The output should be like this:</p>
<pre><code>[-3,-1,5,3,4,-1,3,5]
</code></pre>
<p>If all of them are common, it should return an empty list: []</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a simple list-comprehension:</p>
<pre><code>list_1 = [[3, 6, 7], [4, 9, 9], [7, 6, 9]]
list_2 = [[6, 7, 2], [1, 5, 9], [8, 3, 4]]

print([x-y for i in range(len(list_1)) for x, y in zip(list_1[i], list_2[i]) if x-y])
# [-3, -1, 5, 3, 4, -1, 3, 5]
</code></pre>
<p>Or use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a>:</p>
<pre><code>from itertools import chain

list_1 = [[3, 6, 7], [4, 9, 9], [7, 6, 9]]
list_2 = [[6, 7, 2], [1, 5, 9], [8, 3, 4]]

print([x-y for x, y in zip(chain(*list_1), chain(*list_2)) if x-y])
# [-3, -1, 5, 3, 4, -1, 3, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import chain 

[l1-l2 for l1, l2 in zip(chain(*list_1),chain(*list_2)) if l1-l2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As a pure functional, but a little obscure, approach you can use <code>itertools.starmap()</code> and <code>itertools.chain()</code> plus <code>zip</code> and <code>operator.sub</code>:</p>
<pre><code>In [165]: list(starmap(sub, chain.from_iterable(starmap(zip, zip(list_1, list_2)))))
Out[165]: [-3, -1, 5, 3, 4, 0, -1, 3, 5]
</code></pre>
<p>Another yet more understandable way is to use a <code>flatten</code> function for flatten your nested lists with then use a simple list comprehension and <code>zip</code>:</p>
<pre><code>In [168]: def flatten(lst):
     ...:     return [i for sub in lst for i in sub]
     ...: 

In [169]: [i-j for i, j in zip(flatten(list_1), flatten(list_2))]
Out[169]: [-3, -1, 5, 3, 4, 0, -1, 3, 5]
# or starmap(sub, zip(flatten(list_1), flatten(list_2)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another <code>itertools</code> approach using <code>chain.from_iterable</code> to flatten the nested lists and <code>map</code> to mass apply subtraction and <code>filter</code> to discard equal pairs.</p>
<pre><code>&gt;&gt;&gt; import itertools
</code></pre>
<p>Example 1:</p>
<pre><code>&gt;&gt;&gt; list_1 = [[4,9,2],[3,5,7],[8,1,5]]
&gt;&gt;&gt; list_2 = [[4,9,2],[3,5,7],[8,1,6]]
&gt;&gt;&gt; 
&gt;&gt;&gt; list(filter(None, map(int.__sub__, *map(itertools.chain.from_iterable, (list_1, list_2)))))
[-1]
</code></pre>
<p>Example 2:</p>
<pre><code>&gt;&gt;&gt; list_1 = [[3, 6, 7], [4, 9, 9], [7, 6, 9]]
&gt;&gt;&gt; list_2 = [[6, 7, 2], [1, 5, 9], [8, 3, 4]]
&gt;&gt;&gt; 
&gt;&gt;&gt; list(filter(None, map(int.__sub__, *map(itertools.chain.from_iterable, (list_1, list_2)))))
[-3, -1, 5, 3, 4, -1, 3, 5]
</code></pre>
</div>
<span class="comment-copy">Do you have some partial attempt done?</span>
<span class="comment-copy">you are just asking us to write code for you, which is not this platform is all about. Try to code first as it will help you, if you come across any errors during your program we will help surely You out. i hope you undersatnd :-)</span>
<span class="comment-copy">This looks like something you could do as vector addition. Try looking into <a href="http://www.numpy.org/" rel="nofollow noreferrer">numpy</a>, specifically <a href="https://docs.scipy.org/doc/numpy/reference/arrays.html" rel="nofollow noreferrer">numpy arrays</a> which can be easily vector added to get your result.</span>
<span class="comment-copy">Sorry, i missed the filter</span>
