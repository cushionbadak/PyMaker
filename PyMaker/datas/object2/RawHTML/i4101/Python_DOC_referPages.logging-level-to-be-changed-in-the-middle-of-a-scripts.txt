<div class="post-text" itemprop="text">
<p>I have an application which continues running, the application won't be stopped, it will idle when there are no instructions by a client, and listen to the external event and react if there is any instruction input by the user at anytime</p>
<p>There is a configuration file which can be changed while the application is running, and the logging level is one of them. myLoggingLevel is the param below.</p>
<p>Is there anyway to change the logging level while the application is running?
I am using ConfigParser.RawConfigParser() for the configuration change.</p>
<pre><code>import time
import logging
import datetime

def getLogger(loggerName='myLoggerName', logLevel='INFO', log_path='C:/logs/'):
    class Formatter(logging.Formatter):
        def formatTime(self, record, datefmt=None):
            return (datetime.datetime.utcnow()).strftime('%H:%M:%S')
    logLevel = logLevel.upper()
    levels = {'DEBUG'   : logging.DEBUG,
            'INFO'      : logging.INFO,
            'WARNING'   : logging.WARNING,
            'ERROR'     : logging.ERROR,
            'CRITICAL'  : logging.CRITICAL}
    today = datetime.datetime.utcnow().strftime('%Y-%m-%d')
    full_log_path = log_path + '%s.%s.log' % (loggerName, today)
    logger = logging.getLogger(loggerName+'.'+today)
    if not len(logger.handlers):
        logger.setLevel(levels[logLevel])
        fh = logging.FileHandler(full_log_path)
        formatter = Formatter('%(asctime)s.%(msecs)03d | %(message)s', datefmt='%H:%M:%S')
        fh.setFormatter(formatter)
        logger.addHandler(fh)
        ch = logging.StreamHandler()
        ch.setLevel(logging.ERROR)
        ch.setFormatter(formatter)
        logger.addHandler(ch)
        logger.propagate = False
        logger.info('loggerName: %s' % loggerName)
    return logger

def run(myLoggingLevel):
    while True:
        log = getLogger(loggerName='testLogLevel', logLevel=myLoggingLevel)
        log.debug('I am in debug')
        log.info('I am in info')
        time.sleep(3)

run(myLoggingLevel='debug')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In order to change the logging level during the execution, you can delete your logger and create a new one based on the new specs in your configuration file. You can create your own watchdog for instance that tracks whether your configuration file has changed or not and update accordingly the logger level as suggested. Or you can create an event for that via <code>threading.Event</code>. You may want to have a look at the <a href="https://docs.python.org/3/library/threading.html#" rel="nofollow noreferrer">threading</a> module.</p>
</div>
<div class="post-text" itemprop="text">
<p>Finally i did a function, run it on timeout or on event e.g. a button click to modify the logging level.</p>
</div>
<span class="comment-copy">Will it be okay to read myLoggingLevel from a database every time the loop is run? The value in database can be changed which will change the logging level when the script is running</span>
