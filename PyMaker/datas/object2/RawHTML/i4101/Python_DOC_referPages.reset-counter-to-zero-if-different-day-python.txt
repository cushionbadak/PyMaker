<div class="post-text" itemprop="text">
<p>New to python, so I have this setup where I file gets created, and I have to add an extension number.  The first file will have an extension number of 1 since being the first.  A second file gets created and the extension number will increment, so it will be 2.  So each files gets created, the extension number will increment.</p>
<p>Now, if it's a different day then that extension number will reset to 1, and it will increment if new files are created.  So each day, the extension number needs to be reset to 1</p>
<pre><code>def get_counter(date):
    counter = 1
    now = datetime.datetime.utcnow().strftime('%Y-%m-%d')

    if date != now:
        now = date
        counter = 1
        return counter
    counter += 1
    return counter
</code></pre>
<p>I have set up this function but it will not work because the <code>now</code> and <code>counter</code> variable will get overwritten.  So will need these variables somewhere else.  Just wondering if there is a work around this process or is there a  python library that can handle this type of situation.  Your suggestions will be appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>You could assign the counter outside of that function and send it as a parameter, that way you don't overwrite it every single time you call your function, like so:</p>
<pre><code>counter = 1
for file_to_be_writen in file_collection:
    counter = get_counter(date, counter)
</code></pre>
<p>and leave your function like this:</p>
<pre><code>def get_counter(date, counter):
    now = datetime.datetime.utcnow().strftime('%Y-%m-%d')

    if date == now:
        counter += 1
        return counter

    return counter
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you need to preserve state across function calls that is a hint that you need a custom object. You could use global variables as well but encapsulating the state inside an object is usually better.</p>
<p>Here I implement a class <code>Counter</code> that takes care of everything. It has a <a href="https://docs.python.org/3.6/library/stdtypes.html#iterator.__next__" rel="nofollow noreferrer"><code>__next__</code></a> method that returns the next number so the calling code only needs to call <a href="https://docs.python.org/3.6/library/functions.html#next" rel="nofollow noreferrer"><code>next(counter)</code></a>. It also has an <a href="https://docs.python.org/3.6/reference/datamodel.html#object.__iter__" rel="nofollow noreferrer"><code>__iter__</code></a> method so it can be used in <code>for</code> loops.</p>
<p>You need to provide a function to get the current (<code>date_getter</code>) time when creating an instance. Besides making the code more testable this allows you to decide if you want to use utc time, local time, the first day of the week so the counter resets each week, etc.</p>
<pre><code>import datetime


class TimeArrowReversedError(Exception):
    pass


class Counter:
    def __init__(self, date_getter):
        self._date_getter = date_getter
        self._current_date = date_getter()
        self._current_value = 0

    def _check_date(self):
        current_date = self._date_getter()

        if self._current_date &gt; current_date:
            message = 'Time arrow got reversed. Abandon all hope.'
            raise TimeArrowReversedError(message)

        if self._current_date &lt; current_date:
            self._current_date = current_date
            self._current_value = 0

    def __next__(self):
        self._check_date()
        self._current_value += 1
        return self._current_value

    def __iter__(self):
        return self
</code></pre>
<p>This is the code I used to test it. Note that I am using as <code>date_getter</code> a function that actually returns whatever date I want. I do not want to wait until 23:59 to run the test. Instead I tell the function which date to return (including going backwards in time) and see how the counter behaves.</p>
<pre><code>current_date = datetime.date(year=2018, month=5, day=9)
get_current_date = lambda: current_date
counter = Counter(get_current_date)

n = next(counter)
assert n == 1

n = next(counter)
assert n == 2

for expected, result in zip([3, 4], counter):
    assert expected == result

current_date = current_date + datetime.timedelta(days=1)

n = next(counter)
assert n == 1

n = next(counter)
assert n == 2

current_date = current_date - datetime.timedelta(days=2)

try:
    n = next(counter)
except TimeArrowReversedError:
    pass
else:
    raise AssertionError('"TimeArrowReversedError" expected.')
</code></pre>
<p>Here is a more realistic way in which yo could use this class:</p>
<pre><code>def create_counter():
    return Counter(datetime.datetime.utcnow().date)


counter = create_counter()
</code></pre>
<p>Print the first couple of numbers:</p>
<pre><code>print(next(counter))
print(next(counter))
</code></pre>
<p>Output:</p>
<pre><code>1
2
</code></pre>
<p>Using a loop to add numbers to names in a list:</p>
<pre><code>names = ['foo', 'bar']
for name, n in zip(names, counter):
    print('{}_{}'.format(name, n))
</code></pre>
<p>Output:</p>
<pre><code>foo_3
bar_4
</code></pre>
<p>Now I realize that <code>Counter</code> is a really bad choice because there is already a completely unrelated <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a> class in the standard library. But I cannot think of a better name right now so I will leave it as is.</p>
</div>
