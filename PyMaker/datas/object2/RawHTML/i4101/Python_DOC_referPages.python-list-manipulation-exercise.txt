<div class="post-text" itemprop="text">
<p>Problem:</p>
<blockquote>
<p>Write a program that will search a list to find the first odd number. If an odd number is found, then find the first even number following the odd number. Return the distance between the first odd number and the first even number. Return -1 if no odd numbers are found or there are no even numbers following an odd number.</p>
</blockquote>
<p>My Code:</p>
<pre><code>def go(list1):
    dist = 0
    odd = 0
    even = 0
    for i in range(0,len(list1)):
        if list1[i] % 2 == 1:
            odd = list1[i]
            break
        else:
            odd = list1[0]
    list2 = list1[list1.index(odd)+1:]
    for i in range(0,len(list2)):
        if list2[i] % 2 == 0:
            even = list2[i]
            break
        else:
            even = list2[0]
    return list2.index(even) + list1.index(odd) + 1 - list1.index(odd)

print(go([7,1,5,3,11,5,6,7,8,9,10,12345,11]))
print(go([11,9,8,7,6,5,4,3,2,1,-99,7]))
print(go([10,20,30,40,5,41,31,20,11,7]))
print(go([32767,70,4,5,6,7]))
print(go([2,7,11,21,5,7]))
print(go([7,255,11,255,100,3,2]))
print(go([9,11,11,11,7,1000,3]))
print(go([7,7,7,11,2,7,7,11,11,2]))
print(go([2,4,6,8,8]))
</code></pre>
<p>My Output:</p>
<pre><code>6
2
3
1
1
4
5
4
1
</code></pre>
<p>Desired Output:</p>
<pre><code>6
2
3
1
-1
4
5
4
-1
</code></pre>
<p>What am I doing wrong? Is there a better approach to this problem than what I have done?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your errors are:</p>
<ul>
<li>If you don't find the even or the odd number you take the first element instead of returning -1.</li>
<li>to compute the distance, you must not subtract <code>list1.index(odd)</code> (just remove this part and the equation is correct)</li>
</ul>
<p>Instead of storing the values and creating a new list, you should store the positions:</p>
<pre><code>def go(list1):
    odd = None
    even = None
    for i in range(0,len(list1)):
        if list1[i] % 2 == 1:
            odd = i
            break

    if odd is not None:
        for i in range(odd, len(list1)):
            if list1[i] % 2 == 0:
                even = i
                break

    if odd is None or even is None:
        return -1
    else:
        return even - odd
</code></pre>
<p>And here's a more pythonic version:</p>
<pre><code>def go(list1):
    try:
        odd = next(i for (i, v) in enumerate(list1) if v % 2 == 1)
        even = next(i for (i, v) in enumerate(list1) if v % 2 == 0 and i &gt; odd)
        return even - odd
    except StopIteration:
        return -1
</code></pre>
<p><code>StopIteration</code> is an exception raised when next reaches the end of the list without any matching value.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could approach this with an <a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow noreferrer">iterator</a>.</p>
<p>An iterator is an object that "remembers" its current position in the list. When the iterator is created, it points to the first element in the list. You can then move the iterator forward with the <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next</code></a> function.</p>
<p>So the idea is this:</p>
<ol>
<li>Create an iterator</li>
<li>Move the iterator forward until you find the first odd number</li>
<li>Move it further forward until you find an even number, counting the steps</li>
</ol>
<p>In step 3, the <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> function is very useful for counting how many elements the iterator has skipped.</p>
<pre><code>def go(iterable):
    # step 1: get an iterator for this iterable
    itr = iter(iterable)
    try:
        # step 2: advance the iterator to the first odd number
        next(num for num in itr if num % 2 == 1)

        # step 3: count the elements up to the next even number
        return next(i for i, num in enumerate(itr, 1) if num % 2 == 0)
    except StopIteration:
        # StopIteration is raised if the iterator reaches the end without
        # finding a suitable number
        return -1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Answering what is wrong I think it the use of your 'else ' statements:</p>
<pre><code>else:
    even = list2[0]
</code></pre>
<p>Why are you assigning a number from the list  if you do not find any even? That is why your distance is = 1</p>
<p>Same thing for :</p>
<pre><code> else:
        odd = list1[0]
</code></pre>
<p>You shouldn't assign a number to odd, if you do not find one. </p>
</div>
<div class="post-text" itemprop="text">
<p>I would do something like this: </p>
<pre><code>def go(list1):
    dist = 0
    found = False;
    for i in range(0,len(list1)):
        if list1[i] % 2 == 1:
          for j in range(i,len(list1)):
            if list1[j] % 2 == 0:
             found = True;
             return(j-i)
             break
    if(found == False):
      return -1;

print(go([7,1,5,3,11,5,6,7,8,9,10,12345,11]))
print(go([11,9,8,7,6,5,4,3,2,1,-99,7]))
print(go([10,20,30,40,5,41,31,20,11,7]))
print(go([32767,70,4,5,6,7]))
print(go([2,7,11,21,5,7]))
print(go([7,255,11,255,100,3,2]))
print(go([9,11,11,11,7,1000,3]))
print(go([7,7,7,11,2,7,7,11,11,2]))
print(go([2,4,6,8,8]))
</code></pre>
<p>The main problem in your code I see is that you default to the first element in the list instead of defaulting to -1 if odd or even isn't found. You never check to see if its not found. </p>
<p>I added a boolean in my code that checks if we have found the element yet. The code works without the boolean altogether but I added it to show that we want to be checking to see if we have found the odd and even element yet or not. If we don't find it: we return -1. Otherwise: we return the difference. </p>
</div>
<div class="post-text" itemprop="text">
<p>This is similar to what other commenters have suggested by storing the index of the even and odd numbers:</p>
<pre><code>def go(list1):
    dist = 0
    odd_idx = None
    even_idx = None
    for i in range(len(list1)):
        if list1[i] % 2 == 1:
            odd_idx = i
            break
    if odd_idx is None:
        return -1

    list2 = list1[odd_idx+1:]
    for i in range(len(list2)):
        if list2[i] % 2 == 0:
            even_idx = i
            break
    if even_idx is None:
        return -1
    return abs(even_idx - odd_idx + 1)

print(go([7,1,5,3,11,5,6,7,8,9,10,12345,11]))
print(go([11,9,8,7,6,5,4,3,2,1,-99,7]))
print(go([10,20,30,40,5,41,31,20,11,7]))
print(go([32767,70,4,5,6,7]))
print(go([2,7,11,21,5,7]))
print(go([7,255,11,255,100,3,2]))
print(go([9,11,11,11,7,1000,3]))
print(go([7,7,7,11,2,7,7,11,11,2]))
</code></pre>
<p>Hope this helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>There are multiple mistakes in your code, that together contribute to the fact that your code will never return -1. It will even throw <code>ValueError</code> in case you pass in an empty list. </p>
<p>The first problem is that you assign <code>odd = list1[0]</code> in case you don't find an odd number. This is wrong in the case when there is no odd number. Then <code>list2</code> will contain everything apart from the first number in <code>list1</code>. Same goes, for assigning <code>even = list2[0]</code> in case there is no even number after the first odd one.</p>
<p>Your function is correct in case there is a pair of numbers you are looking for. Though, your return statement can be simplified to <code>list2.index(even)+1</code>. </p>
<p>Also, in python you can loop over a list using <code>for x in lst</code> statement. In case you want to have access to the index of the element you are currently looking at use <code>enumerate</code> like this </p>
<pre><code>for i, x in enumerate(lst)
</code></pre>
<p>Finally, here is a nicest simple way to solve your problem I can think of that requires only one iteration of the list.</p>
<pre><code>def go(lst):
    odd_index = -1  # Index of the first odd number in the list

    for i, n in enumerate(lst):
        if n % 2 == 1:
            # n is odd
            if odd_index == -1:
                # This is the first even number we found, so we assign
                # its index to odd_index and look for an even number
                odd_index = i
        else:
            # n is even
            if odd_index != -1:
                # We already found odd number, so this is the
                # first even number and we can return
                return i - odd_index

    # The search was not successful, so we return -1
    return -1
</code></pre>
</div>
<span class="comment-copy">Well, on one hand, props for actually showing runnable code, actual output, and desired output. On the other hand, the differences between your output and the desired output are cases where the desired output is <code>-1</code>. Do you think you wrote any handling for the cases where you're supposed to return <code>-1</code>?</span>
<span class="comment-copy">@user2357112 I have tried in the else: statement to return -1, but that doesn't give the desired output.</span>
<span class="comment-copy">Think about how your logic will work if no odd numbers are found.  Specifically in your first loop, <code>odd</code> would get set to the value of the last item instead of some value to indicate that it was not found.</span>
<span class="comment-copy">In your first loop, I don't think your else statement is very helpful. Why would you want to set your <code>odd</code> variable to an even value in the array? In my opinion, it makes more sense to set <code>odd = -1</code> initially, then check if it is still <code>-1</code> after that loop.</span>
<span class="comment-copy">Also in <code>return list2.index(even) + list1.index(odd) + 1 - list1.index(odd)</code>, through algebra we can simplify this to <code>return list2.index(even) + 1</code>, which does not make sense w.r.t. the goal condition of <i>the distance between the first odd number and the first even number.</i></span>
<span class="comment-copy">The Pythonic version is nice and clean! +1. But I think you should explain why you are catching <code>StopIteration</code> in the answer (for the sake of new learners of the language).</span>
<span class="comment-copy">@KeyurPotdar explanation added</span>
<span class="comment-copy">Good idea using an iterator. Clean answer. +1</span>
<span class="comment-copy">Regarding that test case, the dist between the first odd number <code>5</code> and the next even number <code>20</code> is <code>3</code>. The test looks correct.</span>
<span class="comment-copy">Good catch! My mistake. Edited the post.</span>
<span class="comment-copy">btw, I tend to avoid to do it because it's controversial but you could replace <code>if odd_idx is None</code> and <code>if even_idx is None</code> by <code>else</code> in both cases (to do a for-else).</span>
