<div class="post-text" itemprop="text">
<p>In numpy subarrays obtained through any of slicing, masking or fancy indexing operations are just views to the original array, which can be demonstrated as follows:</p>
<pre><code>$ python3
Python 3.5.2 (default, Nov 23 2017, 16:37:01) 
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.__version__
'1.11.0'

&gt;&gt;&gt; a = np.arange(3); a[:2] = 111; a
array([111, 111,   2])

&gt;&gt;&gt; a = np.arange(3); a[a&lt;2] = 111; a
array([111, 111,   2])

&gt;&gt;&gt; a = np.arange(3); a[[0,1]] = 111; a
array([111, 111,   2])
</code></pre>
<p>In the above example, the entire subarray was assigned to. However if we assign to an element of the subarray, the result of the slicing operation still behaves as a view, whereas the results of the masking and fancy indexing operations behave as independent copies:</p>
<pre><code>&gt;&gt;&gt; a = np.arange(3); a[:2][0] = 111; a
array([111,   1,   2])

&gt;&gt;&gt; a = np.arange(3); a[a&lt;2][0] = 111; a
array([0, 1, 2])

&gt;&gt;&gt; a = np.arange(3); a[[0,1]][0] = 111; a
array([0, 1, 2])
</code></pre>
<p>Is this a bug in numpy, or is it by design? If it is by design, then what's the substantiation for such an inconsistency?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not a bug. As far as you pass a slice object to Numpy array the returned sub array is a view of the original items which means that even slice assignment or single item assignments will change the original array. But in other cases the returned result is not a view. It's, in fact, a shallow view (copy) of the chosen slice which only supports slice assignment like what other mutable objects in Python support.</p>
<p>It's also mentioned in <a href="https://docs.scipy.org/doc/numpy-1.13.0/user/basics.indexing.html#boolean-or-mask-index-arrays" rel="nofollow noreferrer"><em>documentation</em></a>:</p>
<blockquote>
<p>[...] As with index arrays, what is returned is a copy of the data, not a view as one gets with slices.</p>
</blockquote>
</div>
<span class="comment-copy">Ok, this means that I don't yet quite well understand how assignment works in Python. Now my first impression is that <code>a[i]</code> is evaluated differently depending on whether it appears on the left side of the assignment operator or not. Rereading the documentation I see that for user-defined objects the assignment <code>object[expr] = ...</code> is evaluated via <a href="https://docs.python.org/3/reference/datamodel.html#object.__setitem__" rel="nofollow noreferrer">object.__setitem__</a> while in other contexts <a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow noreferrer">object.__getitem__</a> is used.</span>
<span class="comment-copy">@Leon Indeed. That's how setting item and getting item work in Python.</span>
