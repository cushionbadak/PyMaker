<div class="post-text" itemprop="text">
<p>I am trying to build a program that will pick a random word from a list, and display that word with alternate letters being replaced by hyphens. for example, the word "monkey" would be displayed as "-o-k-y".
I can get a random word selected easy enough using random.choice, I know I should use a FOR loop, but I just can't seem to get my head around it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>import random

word = random.choice(wordList)
for i in range(0, len(word), 2):  ## Goes through the numbers between 0 and len(word)-1 with a step of two
    word = word[ : i] + "-" + word[i + 1: ]    ## Str assignment isn't supported so slicing is the best way to do this
</code></pre>
<p>Another implementation (with O.O's algorithm) is this:</p>
<pre><code>import random

word = random.choice(wordList)
new = ''
for i in range(len(word)):
    if i%2 == 1:   ## If the index is odd (which is when you want the letter to be retained)
        new += word[i]
    else:
        new += "-"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's a way to do this task without using explicit looping or Regular Expressions, just using built-in <code>str</code> methods. It's a little bit tricky, so I'll explain how it works in stages.</p>
<p>Firstly, we can get every 2nd item in a sequence using extended slice notation. This is generally used on lists or tuples, but it also works on strings. Eg,</p>
<pre><code>&gt;&gt;&gt; 'abcdef'[::2]
'ace'
&gt;&gt;&gt; 'abcdefg'[::2]
'aceg'
&gt;&gt;&gt; 'abcdefg'[1::2]
'bdf'
</code></pre>
<p>We can join together a sequence of characters using the <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> method. The string we call <code>.join</code> on is used as the separator between the items in the arg to <code>.join</code>. This is mostly used to join together a sequence of strings, but it also works on single strings. Eg,</p>
<pre><code>&gt;&gt;&gt; '-'.join('abcdef')
'a-b-c-d-e-f'
&gt;&gt;&gt; '-*-'.join('abcdef')
'a-*-b-*-c-*-d-*-e-*-f'
</code></pre>
<p>Another method that's useful for this task is <a href="https://docs.python.org/3/library/stdtypes.html#str.ljust" rel="nofollow noreferrer"><code>str.ljust</code></a>. This method allows us to pad a string up to a given length, using a character of our choice (the default padding char is an ASCII space). The original characters go to the left side of the output string, the padding is added to the right. If the string is longer than the requested length, it gets returned unmodified.</p>
<pre><code>&gt;&gt;&gt; 'abcd'.ljust(6, '-')
'abcd--'
&gt;&gt;&gt; 'abcdef'.ljust(4, '-')
'abcdef'
</code></pre>
<p>We can perform the string transformation you desire using these tools.</p>
<pre><code>&gt;&gt;&gt; 'monkey'[1::2]
'oky'
&gt;&gt;&gt; '-'.join('monkey'[1::2])
'o-k-y'
&gt;&gt;&gt; '-' + '-'.join('monkey'[1::2])
'-o-k-y'
</code></pre>
<p>So far, so good. But it doesn't quite work when the length of the word is odd:</p>
<pre><code>&gt;&gt;&gt; '-' + '-'.join('gorilla'[1::2])
'-o-i-l'
</code></pre>
<p>That should have a final dash. But we can use <code>.ljust</code> to fix that:</p>
<pre><code>&gt;&gt;&gt; word = 'gorilla'
&gt;&gt;&gt; s = '-' + '-'.join(word[1::2])
&gt;&gt;&gt; s.ljust(len(word), '-')
'-o-i-l-'
</code></pre>
<p>Let's test it out on a few different words.</p>
<pre><code>words = 'Here are some short test words monkey gorilla'.split()
for word in words:
    dashed = ('-' + '-'.join(word[1::2])).ljust(len(word), '-')
    print(word, dashed)
</code></pre>
<p><strong><em>output</em></strong></p>
<pre><code>Here -e-e
are -r-
some -o-e
short -h-r-
test -e-t
words -o-d-
monkey -o-k-y
gorilla -o-i-l-
</code></pre>
<hr/>
<p><a href="https://stackoverflow.com/users/1252759/jon-clements">Jon Clements</a> pointed out that there's there's an undocumented feature of the <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>str.replace</code></a> method which we can use here. If you pass it an empty string as its first arg it will insert the replacement string at every position of the old string. Eg:</p>
<pre><code>&gt;&gt;&gt; 'abcdef'.replace('', '-')
'-a-b-c-d-e-f-'
</code></pre>
<p>We can use that undocumented feature to perform your task like this:</p>
<pre><code>words = 'Here are some short test words monkey gorilla'.split()
for word in words:
    dashed = word[1::2].replace('', '-')[:len(word)]
    print(word, dashed)
</code></pre>
<p>The output is identical to the previous version, but Jon's code is almost twice as fast as my version. Thanks, Jon!</p>
<p>I tested this code on Python 2.5, 2.6, 3.1, and 3.6, and it works perfectly, but bear in mind that it's generally <em>not</em> a good idea to use undocumented features because they can be changed without notice.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a regular expression:</p>
<pre><code>import re
word = re.sub(r'.(.)', r'-\1', "monkey")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Replacing the character at even indices with a generator expression:</p>
<pre><code>&gt;&gt;&gt; s
'Hello, world!'

&gt;&gt;&gt; ''.join(c if i%2 else '-' for i, c in enumerate(s))
'-e-l-,-w-r-d-'
</code></pre>
<p>If you want the hyphens pattern to be random you can use <code>random.sample()</code> with <code>range(len(s))</code> as the population:</p>
<pre><code>&gt;&gt;&gt; n = 4
&gt;&gt;&gt; mask = set(random.sample(range(len(s)), n))
{8, 1, 4, 0}

&gt;&gt;&gt; ''.join('-' if i in mask else c for i, c in enumerate(s))
'--ll-, w-rld!'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a for loop as follows to get each letter in the string one by one:</p>
<p><code>for character in string:</code></p>
<p>Then create a new string where for every other you either <code>append</code> the '-' or the <code>character</code>.</p>
</div>
<span class="comment-copy">Hi, Mark. You should show us what you've done so far, preferably a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>, so that we can help you finish it off.</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/questions/13668829/replace-every-nth-letter-in-a-string">Replace every nth character in a string</a></span>
<span class="comment-copy">Also, another way to write the <code>for</code> loop to get the character and position with it associated is using <code>enumerate</code>: <code>for pos, char in enumerate(word)</code>.</span>
