<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/46885618/using-add-operator-with-multiple-arguments-in-python">Using __add__ operator with multiple arguments in Python</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>In my classes, I often use overloading like in <a href="https://www.programiz.com/python-programming/operator-overloading" rel="nofollow noreferrer">this site</a> to define their behavior when using operators like <code>+</code>,<code>-</code>, etc. by overwriting the <code>__add__</code>,<code>__sub__</code>, etc. methods.</p>
<p>An example would be this:</p>
<pre><code>class MyClass:    
    def __add__(self, other):
        result = my_custom_adder(self, other)
        return self.__class__(result)
</code></pre>
<p><em>Is there any way to define the behavior when chaining of such overwritten operators?</em></p>
<p>For example, an addition of three elements <code>a + b + c</code> of a complex class could be implemented much more efficiently by taking all three elements into account at once and not just calculating <code>(a + b) + c</code> sequentially.</p>
<p>Of cause I can just introduce a classmethod:</p>
<pre><code>class MyClass:    
    def __add__(self, other):
        return self.my_custom_adder(self, other)

    @classmethod
    def my_custom_adder(cls, *args):
        result = do_efficient_addition(*args)
        return cls(result)
</code></pre>
<p>Then, I can call <code>my_custom_adder(a, b, c)</code> instead. But this requires the user to know that there is a method like this and calling it explicitly, instead of just using <code>a + b + c</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, there isn't really anything for such hook methods to know that they are part of a larger equation.</p>
<p>What you could do is produce an <em>intermediate result object</em>, one that collects the objects and only when you need the <em>outcome</em> do the actual calculation.</p>
<p>For example, if your objects are integer-like, and implements the <a href="https://docs.python.org/3/reference/datamodel.html#object.__int__" rel="nofollow noreferrer"><code>__int__</code> method</a> to facilitate conversions, an intermediary value could postpone the calculation until then:</p>
<pre><code>class BaseIntValue(object):
    def __init__(self, value):
        self.value = value
    def __repr__(self):
        attrs = ', '.join([f"{k}={v!r}" for k, v in vars(self).items()])
        return f'{type(self).__name__}({attrs})'
    def __int__(self):
        return int(self.value)
    def __add__(self, other):
        if not isinstance(other, BaseIntValue):
            return NotImplemented
        return IntermediarySummedIntValue(self, other)

class IntermediarySummedIntValue(BaseIntValue):
    def __init__(self, *values):
        self.values = values
    def __int__(self):
        print("Expensive calculation taking place")
        return sum(map(int, self.values))
    def __add__(self, other):
        if not isinstance(other, BaseIntValue):
            return NotImplemented
        if isinstance(other, IntermediarySummedIntValue):
            values = self.values + other.values
        else:
            values = self.values + (other,)
        return IntermediarySummedIntValue(*values)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; BaseIntValue(42) + BaseIntValue(81) + BaseIntValue(314)
IntermediarySummedIntValue(values=(BaseIntValue(value=42), BaseIntValue(value=81), BaseIntValue(value=314)))
&gt;&gt;&gt; int(BaseIntValue(42) + BaseIntValue(81) + BaseIntValue(314))
Expensive calculation taking place
437
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>+</code>, <code>-</code>, etc... are <strong>binary</strong> operators.</p>
<pre><code>&gt;&gt;&gt; tree=ast.parse('a+b+c')
&gt;&gt;&gt; astpretty.pprint(tree)
Module(
    body=[
        Expr(
            lineno=1,
            col_offset=0,
            value=BinOp(
                lineno=1,
                col_offset=3,
                left=BinOp(
                    lineno=1,
                    col_offset=0,
                    left=Name(lineno=1, col_offset=0, id='a', ctx=Load()),
                    op=Add(),
                    right=Name(lineno=1, col_offset=2, id='b', ctx=Load()),
                ),
                op=Add(),
                right=Name(lineno=1, col_offset=4, id='c', ctx=Load()),
            ),
        ),
    ],
)
</code></pre>
<p>So, no, there is no way to override those operators to get what you want.</p>
<p>Go with the static method.</p>
</div>
<span class="comment-copy">Not possible. <code>+</code> is a binary operator (i.e. it takes 2 arguments) and there's nothing you can do about it.</span>
<span class="comment-copy">Thanks Aran-Fey. My question was a bit more general than the one you marked this as a duplicate of, but the answer fits nevertheless.</span>
<span class="comment-copy">This is actually a nice trick. +1!</span>
