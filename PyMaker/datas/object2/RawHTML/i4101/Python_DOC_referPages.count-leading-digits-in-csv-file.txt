<div class="post-text" itemprop="text">
<p>I have a CSV file with the following values in the 1st column:</p>
<pre class="lang-none prettyprint-override"><code>Values 
170                    
900             
250           
450             
125
994             
.....
</code></pre>
<p>I want to loop through all the rows in the file (excluding the Values heading) and get the number of occurrences of each leading digit(from 1 - 9) for each of the values e.g the number of values with first digit as 1 is 2 (170 and 125).</p>
</div>
<div class="post-text" itemprop="text">
<p>This should work for numbers of any length:    </p>
<pre><code>from collections import Counter

rows = [170, 900, 200, 200, 300, 100, 293]

leading = list(map(lambda x: int(str(x)[0]), rows))
print(Counter(leading))
</code></pre>
<p>If the numbers are exactly 3 digitis in length you can do this:</p>
<pre><code>leading = list(map(lambda x: x//100, rows))
</code></pre>
<p>Prints:</p>
<pre><code>Counter({2: 3, 1: 2, 9: 1, 3: 1})
</code></pre>
<p>You can then call <code>dict()</code> on the Counter object if you want the actual dictionary object. </p>
</div>
<div class="post-text" itemprop="text">
<p>One way is to use <code>csv</code> module together with <code>collections.Counter</code>.</p>
<p>The result is a dictionary of <code>value: count</code> items.</p>
<pre><code>import csv 
from collections import Counter

# read in data as list, excluding first row
with open('file.csv') as csvfile:
    lst = list(csv.reader(csvfile, delimiter=','))[1:]

# extract first character of each item in list as integer
ints = [int(i[0]) for i in lst]

# use collections.Counter for dictionary of counts
c = Counter(ints)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to do this is by using the <code>csv</code> module to read the file, and by creating a (trivial) custom <code>OrderedCounter</code> subclass using the recipe for one in the <a href="https://docs.python.org/3/library/collections.html#ordereddict-examples-and-recipes" rel="nofollow noreferrer">documentation</a> to count the number of times each decimal digit is the leading one.</p>
<p>In the code below the <code>OrderedCounter</code> is initialized with zero counts for all the possible digits so they will there in the final result_and_ to determine the order the counts are stored and can been seen in the output as you can see.</p>
<pre><code>import csv
from collections import Counter, OrderedDict
from pprint import pprint

class OrderedCounter(Counter, OrderedDict):
    'Counter that remembers the order elements are first encountered'
    def __repr__(self):
        return '%s(%r)' % (self.__class__.__name__, OrderedDict(self))

leading_digit_counter = OrderedCounter({d: 0 for d in range(10)})
csv_filename = 'the_values.csv'

with open(csv_filename, 'r', newline='') as csv_file:
    reader = csv.reader(csv_file)
    next(reader)  # Skip header row.
    leading = map(lambda x: int(x[0][0]), reader)  # Leading digit of each row.
    leading_digit_counter.update(leading)
    pprint(leading_digit_counter)
</code></pre>
<p>Output produced from the sample data in your question:</p>
<pre class="lang-none prettyprint-override"><code>{0: 0,
 1: 2,
 2: 1,
 3: 0,
 4: 1,
 5: 0,
 6: 0,
 7: 0,
 8: 0,
 9: 2}
</code></pre>
</div>
<span class="comment-copy">What have you tried so far? Post your existing script and we'll work from there.</span>
<span class="comment-copy">Did one of the solutions below help? Feel free to accept one if it did (green tick on left), or ask for clarification.</span>
<span class="comment-copy">Wow. It's now working. You guys are good</span>
<span class="comment-copy">@Ngonix Please select as best answer if you found this helpful.</span>
