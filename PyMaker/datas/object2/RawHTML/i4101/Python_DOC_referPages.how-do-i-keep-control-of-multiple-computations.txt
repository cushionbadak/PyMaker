<div class="post-text" itemprop="text">
<p>I assume that asyncio.sleep(0) is a (standard?) way for a coroutine to let other coroutines have a run. But it seems my coroutine can't have any subroutine structure (and give up control below the top level).</p>
<pre><code>$ cat test.py
import asyncio

async def cor():
    def f():
        await asyncio.sleep(0)
    pass
$ python test.py
  File "test.py", line 5
    await asyncio.sleep(0)
    ^
SyntaxError: 'await' outside async function
</code></pre>
<p>What's the best way to allow a complex bit of code to run while other complex codes are running, so that when one completes I can kill the others?</p>
</div>
<div class="post-text" itemprop="text">
<p>You mentioned "computations" in the topic, I would assume your "a complex bit of code" is CPU-intensive. As its name, asyncio is more with I/O-bound operations, thus not helpful in your case.</p>
<p>I would suggest using <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">multiprocessing</a> or <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess</a> if you want to literally kill a process externally. If you do have I/O or complex timing schedules, you may use <a href="https://docs.python.org/3/library/asyncio-subprocess.html" rel="nofollow noreferrer">asyncio subprocess</a>.</p>
<p>For a graceful internal shutdown, it is usually a good practice to programningly set an exit flag from outside and trigger the clean up process inside the worker:</p>
<pre><code>def worker(self):
    while self.running:
        # next step of work
    # clean up here
</code></pre>
<p>But it is your responsibility to keep each step of work relatively small, in order for the exit signal to respond quickly enough.</p>
</div>
<span class="comment-copy">Just change to <code>async def</code> for the inner function. Why do you need to artificially let others take over?</span>
<span class="comment-copy">The problem is sort-of logic programming. This is for handling alternatives, where I want to stop when a solution is found to one alternative (and indeed some, but not all, of the alternatives might never complete). Actually I want to give up control in external procedures as well as internal ones. Actually I'm amazed it doesn't allow internal procedures. It's not as if we can even fall back to writing code with labels and gotos :-).</span>
<span class="comment-copy">If you want a language and runtime designed for CSP, Python isn't it. Certainly, it's possible to layer things on top by runtime manipulation of an AST or bytecode, but that's always going to be a hack compared to somewhere channels &amp;c. are plumbed into the compiler, runtime and standard library (and, more importantly, where code can serialize its state at arbitrary points without needing to be recompiled for the purpose). I'll admit to being a fan of another such recompilation-based implementation (Clojure's core.async), but they're categorically less capable than, say, Go's channel support.</span>
<span class="comment-copy">Thanks to everyone. I'm giving gevent a go. I'll let you know how it works out.</span>
