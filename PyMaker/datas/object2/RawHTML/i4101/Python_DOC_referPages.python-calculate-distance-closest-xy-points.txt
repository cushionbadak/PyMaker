<div class="post-text" itemprop="text">
<p>so i have a list of points</p>
<pre><code>["9.5 7.5", "10.2 19.1", "9.7 10.2", "2.5 3.6", "5.5 6.5", "7.8 9.8"]
</code></pre>
<p>with a starting point of</p>
<pre><code>["2.2 4.6"]
</code></pre>
<p>now what i am trying to do it is get the closest point to my starting point, then the closest point to that point and so on. </p>
<p>So i get to calculate distance</p>
<pre><code>def dist(p1,p2):
    return math.sqrt((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2)
</code></pre>
<p>but again, i'm trying to get the closest to my starting point, then the closest point to that one and so on.</p>
<p>ok, because you are complaing i didn't show enough code?</p>
<pre><code>fList = ["2.5 3.6", "9.5 7.5", "10.2 19.1", "9.7 10.2",  "5.5 6.5", "7.8 9.8"]
def distance(points):
    p0, p1 = points
    return math.sqrt((p0[0] - p1[0])**2 + (p0[1] - p1[1])**2)

min_pair = min(itertools.combinations(fList, 2), key=distance)
min_distance = distance(min_pair)

print min_pair
print min_distance
</code></pre>
<p>so i get passing my starting point I get</p>
<pre><code>([2.2, 4.6], [2.5, 3.6])
</code></pre>
<p>So now i need to use 2.5, 3.6 as my starting point and find the next closest and so on</p>
<p>Has anyone done anything similar?</p>
</div>
<div class="post-text" itemprop="text">
<p>A possibility is to use a breadth-first search to scan all elements, and find the closest point for each element popped off the queue:</p>
<pre><code>import re, collections
import math

s = ["9.5 7.5", "10.2 19.1", "9.7 10.2", "2.5 3.6", "5.5 6.5", "7.8 9.8"]
def cast_data(f):
   def wrapper(*args, **kwargs):
     data, [start] = args
     return list(map(lambda x:' '.join(map(str, x)), f(list(map(lambda x:list(map(float, re.findall('[\d\.]+', x))), data)), list(map(float, re.findall('[\d\.]+', start))))))
   return wrapper

@cast_data
def bfs(data, start, results=[]):
   queue = collections.deque([start])
   while queue and data:
     result = queue.popleft()
     possible = min(data, key=lambda x:math.hypot(*[c-d for c, d in zip(result, x)]))
     if possible not in results:
       results.append(possible)
       queue.append(possible)
       data = list(filter(lambda x:x != possible, data))
   return results

print(bfs(s, ["2.2 4.6"]))
</code></pre>
<p>Output:</p>
<pre><code>['2.5 3.6', '5.5 6.5', '7.8 9.8', '9.7 10.2', '9.5 7.5', '10.2 19.1']
</code></pre>
<p>The result is the listing of closest points, as determined by using <code>math.hypot</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try the following code. Much simpler and short. Uses a comparator to sort the list depending on the distance from the starting point <code>(2.2,4.6)</code></p>
<pre><code>import math
data = ["9.5 7.5", "10.2 19.1", "9.7 10.2", "2.5 3.6", "5.5 6.5", "7.8 9.8"]
data.sort(key=lambda x: math.sqrt((float(x.split(" ")[0]) - 2.2)**2 +
                                  (float(x.split(" ")[1]) -4.6)**2))
print(data)

# output ['2.5 3.6', '5.5 6.5', '7.8 9.8', '9.5 7.5', '9.7 10.2', '10.2 19.1']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply <a href="https://docs.python.org/3/library/stdtypes.html?highlight=list%20sort#list.sort" rel="nofollow noreferrer">sort a list by a key</a> you define as you wish - f.e. by your distance function:</p>
<pre><code>import math

def splitFloat(x):
    """Split each element of x on space and convert into float-sublists"""
    return list(map(float,x.split()))

def dist(p1, p2):
    # you could remove the sqrt for computation benefits, its a symetric func
    # that does not change the relative ordering of distances
    return math.sqrt((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2)

p = ["9.5 7.5", "10.2 19.1", "9.7 10.2", "2.5 3.6", "5.5 6.5", "7.8 9.8"]

s = splitFloat("2.2 4.6")       # your start point
p = [splitFloat(x) for x in p]  # your list of points

# sort by distance between each individual x and s
p.sort(key = lambda x:dist(x,s))

d = [ (dist(x,s),x) for x in p]  # create tuples with distance for funsies
print(p)
print(d)
</code></pre>
<p>Output:</p>
<pre><code> [[2.5, 3.6], [5.5, 6.5], [7.8, 9.8], [9.5, 7.5], [9.7, 10.2], [10.2, 19.1]]

[(1.0440306508910546, [2.5, 3.6]), (3.8078865529319543, [5.5, 6.5]),
 (7.64198926981712, [7.8, 9.8]), (7.854934754662192, [9.5, 7.5]), 
 (9.360021367496977, [9.7, 10.2]), (16.560495161679196, [10.2, 19.1])]
</code></pre>
</div>
<span class="comment-copy">Welcome to StackOverflow.  Please read and follow the posting guidelines in the help documentation, as suggested when you created this account.  <a href="http://stackoverflow.com/help/on-topic">On topic</a> and <a href="http://stackoverflow.com/help/how-to-ask">how to ask</a> apply here. StackOverflow is not a design, coding, research, or tutorial service.</span>
<span class="comment-copy">Nice edit, you are thinking too hard about it. You can easily solve this by using <code>sort()</code> on the list of floatpoints if you give sort() as  <code>key=</code> your distance function. no need for itertools.</span>
<span class="comment-copy">you are evil :) - I got <code>[(1.0440306508910546, [2.5, 3.6]), (3.8078865529319543, [5.5, 6.5]), (7.64198926981712, [7.8, 9.8]), (7.854934754662192, [9.5, 7.5]), (9.360021367496977, [9.7, 10.2]), (16.560495161679196, [10.2, 19.1])]</code> - but If I post my 6 liner that would be a copy&amp;paste&amp; understand solution</span>
<span class="comment-copy">@PatrickArtner Ah, you included the differences along with each point.</span>
