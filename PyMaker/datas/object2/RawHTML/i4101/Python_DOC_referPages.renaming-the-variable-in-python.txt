<div class="post-text" itemprop="text">
<p>I recently learned about the builtin variable <code>_</code> in the python shell, the purpose of which is to store the last console answer. For example:</p>
<pre><code>&gt;&gt;&gt; 4 + 7
11
&gt;&gt;&gt; _
11
&gt;&gt;&gt; Test = 4
&gt;&gt;&gt; Test + 3
7
&gt;&gt;&gt; _
7
</code></pre>
<p>Being a longtime TI-Basic programmer, I'm far more comfortable with thinking of this variable as <code>Ans</code> instead of <code>_</code>. (Yes, I know it's merely personal preference, but it's an interesting question in any case.)</p>
<p><strong>Question:</strong> How do I set up my <code>Ans</code> variable so that its value is <em>always</em> the same as the <code>_</code> variable?</p>
<hr/>
<p>It's not as simple as just doing <code>Ans = _</code>, as this shell log shows:</p>
<pre><code>&gt;&gt;&gt; "test string"
'test string'
&gt;&gt;&gt; _
'test string'
&gt;&gt;&gt; Ans = _
&gt;&gt;&gt; Ans
'test string'
&gt;&gt;&gt; list('Other String')
['O', 't', 'h', 'e', 'r', ' ', 'S', 't', 'r', 'i', 'n', 'g']
&gt;&gt;&gt; _
['O', 't', 'h', 'e', 'r', ' ', 'S', 't', 'r', 'i', 'n', 'g']
&gt;&gt;&gt; Ans
'test string'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I recommend the "get used to it" option, but if you really want to fiddle with this, you can customize <a href="https://docs.python.org/3/library/sys.html#sys.displayhook" rel="nofollow noreferrer"><code>sys.displayhook</code></a>, the function responsible for setting <code>_</code>:</p>
<pre><code>import builtins
import sys

def displayhook(value):
    if value is not None:
        # The built-in displayhook is a bit trickier than it seems,
        # so we delegate to it instead of inlining equivalent handling.
        sys.__displayhook__(value)
        builtins.Ans = value

sys.displayhook = displayhook
</code></pre>
</div>
<span class="comment-copy">You can probably look at the shell source code and hack something in...</span>
<span class="comment-copy">You basically want <code>Ans = _</code> to run after every line you type.</span>
<span class="comment-copy">It might be easier to get IPython to do this than regular Python, since it already has a bunch of hooks you can customize...</span>
<span class="comment-copy">But the really short answer is just "get used to it", instead of bringing your preconceptions to a new language.</span>
<span class="comment-copy">Python is not TI-BASIC, sometimes it's easier to just get used to it.</span>
<span class="comment-copy">@Aran-Fey: Yeah, I mixed up the modules.</span>
<span class="comment-copy">Interesting +1 , why isnâ€™t _ in the globals() dict?</span>
<span class="comment-copy">@Chris_Rands: It's in <code>builtins</code>. I believe this is at least in part due to not wanting to stomp on a user-defined <code>_</code> variable.</span>
