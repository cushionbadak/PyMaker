<div class="post-text" itemprop="text">
<p>I found this answer to a question here (<a href="https://stackoverflow.com/questions/50200297/how-to-build-a-recursion-for-arbitrary-lists">How to build a recursion for arbitrary lists?</a>) but I haven't learnt how to use <strong>lambdas</strong>.</p>
<pre><code>prune = lambda tree : [prune(branch) for branch in tree if branch != []]

l = [[[[], []], [[], []]], [[], [], []]]
print prune(l)
</code></pre>
<p>I checked many websites but I can not seem to manage to transform this into a regular function like:</p>
<pre><code>def prune(tree):
    for branch in tree:
        if branch!=[]:
             prune(branch)
    return branch

print prune([[[[], []], [[], []]], [[], [], []]])
</code></pre>
<p>Can someone tell me what are those big square brackets for before prune and at the end?</p>
</div>
<div class="post-text" itemprop="text">
<p>All you have to do is slap a <code>return</code> on the front.</p>
<pre><code>def prune(tree):
    return [prune(branch) for branch in tree if branch != []]
</code></pre>
<p>If you wanted to decompose the <a href="http://www.pythonforbeginners.com/basics/list-comprehensions-in-python" rel="nofollow noreferrer">list comprehension</a>—and there's no real reason to—it'd be:</p>
<pre><code>def prune(tree):
    for branch in tree:
        if branch != []:
            yield prune(branch)
</code></pre>
<p>Or:</p>
<pre><code>def prune(tree):
    branches = []

    for branch in tree:
        if branch != []:
            branches.append(prune(branch))

    return branches
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>lambdas are always easily transform-able into a def with a single return statement:</p>
<pre><code>f = lambda a: b
</code></pre>
<p>is always <em>almost</em> identical to</p>
<pre><code>def f(a):
    return b
</code></pre>
<p>If you need to do your example without list comprehension:</p>
<pre><code>def prune(tree):
    ret = []
    for branch in tree:
        if branch!=[]:
            ret.append(prune(branch))
    return ret
</code></pre>
</div>
<span class="comment-copy"><code>return [prune(branch) for branch in tree if branch != []]</code></span>
<span class="comment-copy">Big square brackets are around a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>. See also <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer">lambda expressions</a></span>
<span class="comment-copy">BTW, using a <code>lambda</code> for a named function is generally considered bad style in Python. They're supposed to be for <i>anonymous</i> functions, so attaching them to a name kind of defeats the purpose. ;)</span>
