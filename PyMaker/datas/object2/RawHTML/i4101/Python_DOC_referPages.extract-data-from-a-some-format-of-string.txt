<div class="post-text" itemprop="text">
<p>i got few string in this format:</p>
<pre><code>GETMOVIE#genre:Action&amp;year:1990-2007&amp;country:USA
GETMOVIE#genre:Animation&amp;year:2000-2010&amp;country:Russia
GETMOVIE#genre:X&amp;year:Y&amp;country:Z
</code></pre>
<p>I want to know how can i extract the XYZ from those strings into strings\list
I have tried with slicing but it's impposibole. Some tips?</p>
</div>
<div class="post-text" itemprop="text">
<p>Why is this impossible with split?</p>
<p>Here is a nice one-liner:</p>
<pre><code>s = "GETMOVIE#genre:Animation&amp;year:2000-2010&amp;country:Russia"
d = dict(p.split(':', 1) for p in s.partition("#")[2].split("&amp;"))
print(d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re

line = 'GETMOVIE#genre:Action&amp;year:1990-2007&amp;country:USA'
pattern = r'^GETMOVIE#genre:(.+)&amp;year:(.+)&amp;country:(.+)$'
genre, year, country = re.match(pattern, line).groups()
print(genre, year, country)  # Action 1990-2007 USA
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split()</code></a> for that like:</p>
<h3>Code:</h3>
<pre><code>def process_data(some_data):
    return_data = {}
    for datum in some_data:
        main_key, values = datum.split('#')
        return_data.setdefault(main_key, []).append(dict(
            tuple(v.split(':')) for v in values.split('&amp;')
        ))
    return return_data
</code></pre>
<h3>Test Code:</h3>
<pre><code>data = [x.strip() for x in """
    GETMOVIE#genre:Action&amp;year:1990-2007&amp;country:USA
    GETMOVIE#genre:Animation&amp;year:2000-2010&amp;country:Russia
    GETMOVIE#genre:X&amp;year:Y&amp;country:Z
""".split('\n')[1:-1]]

print(data)
print(process_data(data))
</code></pre>
<h3>Results:</h3>
<pre><code>['GETMOVIE#genre:Action&amp;year:1990-2007&amp;country:USA', 
 'GETMOVIE#genre:Animation&amp;year:2000-2010&amp;country:Russia', 
 'GETMOVIE#genre:X&amp;year:Y&amp;country:Z']

{'GETMOVIE': [
    {'genre': 'Action', 'year': '1990-2007', 'country': 'USA'}, 
    {'genre': 'Animation', 'year': '2000-2010', 'country': 'Russia'}, 
    {'genre': 'X', 'year': 'Y', 'country': 'Z'}
]}
</code></pre>
</div>
<span class="comment-copy">Nothing is impposibole. I will tag this with regex and the regex-sharks will come and help us.</span>
<span class="comment-copy">Regex remoras just cruise by and tell you to use <a href="https://regex101.com/" rel="nofollow noreferrer">regex101.com</a></span>
<span class="comment-copy">I don't see the advantage of using partition. How about <code>dict(p.split(':') for p in s.split("#")[1].split("&amp;"))</code>? Other than that I'm worried this is not very robust, e.g. if the country name contains <code>&amp;</code>.</span>
<span class="comment-copy">@AlexHall partition is more robust than split. partiton allows the country to contain ':' or '#' wish wouldn't possible with split.</span>
<span class="comment-copy">Oh I think I get it, is it to ensure that the split is only done on the first occurrence of the delimiter? In that case you can use <code>p.split(':', 1)</code>.</span>
<span class="comment-copy">@AlexHall Yes, but IMO <code>partition</code> is easier to understand un such a situation. but you are right, I could make it a bit shorter.</span>
<span class="comment-copy">I find it a distraction because no one ever uses it so I have to remind myself what it does and then wonder for a bit why it exists.</span>
