<div class="post-text" itemprop="text">
<p>I have a function foo(par1) with an internal function call, (db_fetch) which is a database call using SQLAlchemy to get a stored value as below:</p>
<pre><code>def foo(par1):
    db_value = db_fetch(par1)
    if db_value &gt; 10:
        return db_value * 5
    else:
        return 1
</code></pre>
<p>I am currently creating a db pytest fixture and loading test data every time I run the test suite in order to provide data for the db_fetch function call. How can i convert the test to use dummy data for the db_fetch function call to speed up the test run?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can either:</p>
<p>1- use dependency injection (change the way your function is defined, so that it is easier to test)</p>
<pre><code>def foo(par1, fetch_function):
    db_value = fetch_function(par1)
    if db_value &gt; 10:
        return db_value * 5
    else:
        return 1
</code></pre>
<p>In normal code, call it like this:</p>
<pre><code>foo(my_par_1, db_fetch)
</code></pre>
<p>instead of:</p>
<pre><code>foo(my_par1)
</code></pre>
<p>And in unit tests, call it like this:</p>
<pre><code>foo(my_par_1, lambda par: 42)
</code></pre>
<p>And so, during the unit tests, the value will always be 42, instead of the real database value.</p>
<p>2- mock the call to fetch_function</p>
<p>In your unit test, instead of calling :</p>
<pre><code>foo(my_par1)
</code></pre>
<p>You should call:</p>
<pre><code>mock = MagicMock(return_value=42)
with patch('fetch_function', mock):
    foo(my_par1)
</code></pre>
<p>Instead of 'fetch_function', you may have to write 'my_module.fetch_function', if fetch_function is imported from a module.
See the documentation: <a href="https://docs.python.org/3/library/unittest.mock-examples.html" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock-examples.html</a> 
There are several ways of doing the mock, and several libraries that can do the job.</p>
<p>3- Make a pytest fixture so that every unit test is run on a test-specific memory database, that contains only test data.</p>
<p>This is more tricky to set up. </p>
</div>
<div class="post-text" itemprop="text">
<p>This is called stubbing the function and it is pretty easy in python.
The way you can achieve this is by:</p>
<pre><code>def stub_foo():
    # some code without the DB stuff...
original_foo = foo
try:
   foo = stub_foo
   # some tests here with the stubbed function
finally:
   foo = original_foo
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">docs.python.org/3/library/unittest.mock.html</a></span>
<span class="comment-copy">Where's <code>db_fetch</code> coming from? Patch it up, or even better: make it injectable.</span>
<span class="comment-copy">Thank you, I think I shall look into using mock, its looks more scalable than the other option. I appreciate the assistance.</span>
