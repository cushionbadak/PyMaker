<div class="post-text" itemprop="text">
<p>I was trying to come up with a function that would read an <code>.csv</code> archive and from there I could get for example, grades for students tests, example below:   </p>
<pre class="lang-none prettyprint-override"><code>NOME,G1,G2  
Paulo,5.0,7.2  
Pedro,6,4.1  
Ana,3.3,2.3  
Thereza,5,6.5  
Roberto,7,5.2  
Matheus,6.3,6.1  
</code></pre>
<p>I managed to split the lines on the <code>,</code> part but I end up with somewhat a matrix:   </p>
<pre><code>[['NOME', 'G1', 'G2'], ['Paulo', '5.0', '7.2'], ['Pedro', '6', '4.1'], ['Ana', '3.3', '2.3'], ['Thereza', '5', '6.5'], ['Roberto', '7', '5.2'], ['Matheus', '6.3', '6.1']]  
</code></pre>
<p>How do I go from one list to the other and manage to get the grades within them?
This is the code I got so far:</p>
<pre><code>def leArquivo(arquivo):  
    arq = open(arquivo, 'r')   
    conteudo = arq.read()
    arq.close
    return conteudo

def separaLinhas(conteudo):
    conteudo=conteudo.split('\n')
    conteudo1 = []
    for i in conteudo:
        conteudo1.append(i.split(','))
    return conteudo1
</code></pre>
<p>Where do I go from here?</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple <a href="https://wiki.python.org/moin/ForLoop" rel="nofollow noreferrer">for</a> will do it, i.e.:</p>
<pre><code>notas = [['NOME', 'G1', 'G2'], ['Paulo', '5.0', '7.2'], ['Pedro', '6', '4.1'], ['Ana', '3.3', '2.3'], ['Thereza', '5', '6.5'], ['Roberto', '7', '5.2'], ['Matheus', '6.3', '6.1']]

for nota in notas[1:]: ## [1:] skip the first item
    nome = nota[0]
    g1 = nota[1]
    g2 = nota[2]
    print ("NOME:{} | G1: {} | G2: {}".format(nome, g1, g2))
</code></pre>
<p><a href="https://ideone.com/BdQb1I" rel="nofollow noreferrer">DEMO</a></p>
<hr/>
<p>PS: You may want to cast <code>g1</code> and <code>g2</code> to a <code>float</code> - <code>float(nota[1])</code>- if  you need to perform math operations.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you're working with a csv file, you may want to look at the <a href="https://docs.python.org/3.6/library/csv.html" rel="nofollow noreferrer">csv</a> module in Python. That module has many convenient options and forms in which the data is read. Following is an example of <code>csv.DictReader</code> reading and usage,</p>
<pre><code>import csv

# Read the data
with open('data.csv') as f:
    reader = csv.DictReader(f)
    data = [row for row in reader]

# Print it
for row in data:
    print (' ').join(['Nome:',row['NOME'],'G1:',row['G1'],'G2:',row['G2']])

# Print only names and G2 grades as a table
print '- '*10
print 'NOME\t' + 'G2'
for row in data:
    print row['NOME'] + '\t' + row['G2']

# Average of G1 and G2 for each student
print '- '*10
print 'NOME\t' + 'Average'
for row in data:
    gpa = (float(row['G1']) + float(row['G2']))/2.0
    print row['NOME'] + '\t' + str(gpa)
</code></pre>
<p>Here the data is read as a list of dictionaries - each element in the list is a dictionary representing a single row of your dataset. The dictionary keys are names of your headers (<code>NOME</code>, <code>G1</code>) and values are the corresponding values for that row. </p>
<p>That particular form can be useful in some situations. Here in the first part of the program the data is printed with keys and values, one row per line. The thing to note is that dictionaries are unordered - to ensure printing in some specific order we need to traverse the dictionary "manually". I used join simply to demonstrate an alternative to <code>format</code> (which is actually more powerful) or just typing everything with spaces in between. Second usage example prints names and the second grade as a table with proper headers. Third calculates the average and prints it as a table.</p>
<p>For me this approach proved very useful when dealing with datasets with several thousands entries that have many columns - headers - that I want to study separately (thus I don't mind them not being in order). To get an ordered dictionary you can use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a> or consider other available datastructures. I also use Python 2.7, but since you tagged the question as 3.X, the links point to 3.X documentation.</p>
</div>
<span class="comment-copy">I managed to finish the code using basically this function, it helped a lot! Thank you!</span>
<span class="comment-copy"><i>De nada</i> - Glad it worked !</span>
<span class="comment-copy">Very explanatory answer! +1</span>
<span class="comment-copy">Thank you! :) +1 since it was definitely inspired by yours and they both should be at least equally upvoted :) I switched (partially) to csv module when I had to deal with those 30-something columns (and needed just a few of them). Alternative was not graceful.</span>
<span class="comment-copy">I had a restriction and couldn't use it! Definitely checked it out and it works really well too, I did upvote the answer but since I'm new to the site it doesn't shows up to others.  Thanks for the input!</span>
<span class="comment-copy">@MattCrisanto No worries about upvoting :) You can't do it yet, you can only accept answers for now and you chose well accepting the other one since it solved your problem directly. Mine was complimentary and glad you tested it too, it may be useful in the future. Your question was well written btw., this kind of questions are normally well received.</span>
