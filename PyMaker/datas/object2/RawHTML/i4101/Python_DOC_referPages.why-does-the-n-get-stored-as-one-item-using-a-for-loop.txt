<div class="post-text" itemprop="text">
<p>This question mostly has to do with me wanting to better understand how python works. </p>
<p>So I just made a simple function that is a more dynamic version of the <code>.split()</code> function, (it allows for multiple splits, one of which is the <code>'\n'</code> so I can better format some CSV information) but I don't know exactly why one aspect of it works. When you iterate through a string, such as <code>"Hello there!\nGeneral Kenobi."</code>, with a for loop, such as - <code>for letter in string</code>, why would the <code>'letter'</code> variable store <code>'\n'</code> as one string, rather than <code>'\'</code> and in the next iteration <code>'n'</code>?</p>
<p>Code that I know does this:</p>
<pre><code>myString = "This is a string\nThis is a string"
for letter in myString:
    print(repr(letter))
</code></pre>
<p>Just to be clear, I love that it does this, but I just want to know why.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Because it <em>is</em> one character. The <code>\</code> generally is an "escape" character in many contexts, meaning that it and the following character(s) are not literally part of the string, but instead are a representation of a character or other structure that doesn't have a written representation or can't easily be rendered faithfully in that context (such as a newline). A literal <code>\n</code> in a string would be rendered as <code>\\n</code>, in fact (where the <code>\</code> <em>itself</em> has to be escaped, to indicate that it's a <em>literal</em> <code>\</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>Within a string literal (<a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">reference page for python 3</a>), escaped characters, <em>i.e.</em> those that are prepended by a backslash "<code>\</code>", are replaced and interpreted according to some rules. You can force python to interpret "\" (backslash) as a single character by prefixing the string literal with a letter "<code>r</code>" or "<code>R</code>".</p>
<p>So "<code>\n</code>" is actually two characters in your source code, but it is interpreted as the ASCII character "LINE FEED" by python</p>
<h2>A note on user input</h2>
<p>String passed with <strong>Python2's <code>input()</code></strong> are treated in the same way as string literals (strings that you define within the code by just writing them between quotation marks). In both cases, "<code>\n</code>" is interpreted as a single LINE FEED character. </p>
<p>On the other hand, <strong>Python3's <code>input()</code> and Python2's <code>raw_input()</code></strong> read raw string, <em>i.e.</em> "<code>\n</code>" is interpreted as two characters. </p>
<p>So if in your example (I'm assuming Python3) you use </p>
<pre><code>myString = input()
</code></pre>
<p>and give "<code>This is a string\nThis is a string</code>" as a input, then the for loop would iterate on "<code>\</code>" and "<code>n</code>" separately.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a mismatch between what we see as a "character" and what python sees, we see <code>\</code> and <code>n</code>, each with its own meaning. Python reads however <code>\n</code> since <code>\</code> means* ignore next character. So python reads <code>\n</code> not <code>\</code> and <code>n</code>. This <code>\n</code> is for python the "End of line", so we should not interprete this as <code>\n</code> (<code>\</code>, <code>n</code>) but as <code>end of line</code>(enter). </p>
<p>*oversimplefied</p>
</div>
<span class="comment-copy">'\n' <i>is</i> a single character - it's character number 10 in ASCII, called 'line feed' or 'newline'. It's just displayed as '\n' to make it more readable.</span>
<span class="comment-copy"><code>"\n"</code> is a string with a single newline character, not a string with a backslash and an <code>n</code>. See also <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">the docs</a>.</span>
<span class="comment-copy">The <code>repr</code> (representation) of some special characters (newline, tab, emojis etc) is designed to be 'strict'. E.g. the repr of a backslash is '\\'.</span>
<span class="comment-copy"><a href="https://docs.python.org/2.0/ref/strings.html" rel="nofollow noreferrer">docs.python.org/2.0/ref/strings.html</a></span>
<span class="comment-copy">If you want two characters for "\n" then use a <i>raw string</i>: <code>myString = r"This is a string\nThis is a string"</code></span>
<span class="comment-copy">"\n" are still two characters, even though they are interpreted as just one in the context of (non raw) string literals</span>
<span class="comment-copy">@NicolaSap that depends on what you consider a "character". What you see on screen <i>looks like</i> two characters, but Python stores it internally as one and treats it as such in all contexts.</span>
<span class="comment-copy">That makes sense, I was originally thinking it was how the for statement operated but I was wrong. Thanks for the help!</span>
