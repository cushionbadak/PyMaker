<div class="post-text" itemprop="text">
<p>Easygui inserts curly brackets when we try to break the text is there a way to break the text without it giving the curly brackets.</p>
<pre><code>import easygui

#Class for seperating workers.
class HumanClassification:
    #Sets the default worker info to null:
    def __init__(self):
        self.age = 0
        self.pay = 0
        self.gender = ''

    #Outputs the workers info:
    def classification(self, age, pay, gender):
        self.age = age
        self.pay = pay
        self.gender = gender



#Current Workers:
myListWorkers = ['Bob', 'Diann', 'Tec']
Bob = HumanClassification()
Diann = HumanClassification()
Tec = HumanClassification()



#Instantize Classes:
Bob.classification(42, 15000, 'male')
Diann.classification(25, 1000, 'female')
Tec.classification(18, 200000, 'male')

#Asks user if he/she wants to find info about worker:
bossInput = easygui.buttonbox("Who do you want to view info on? ", choices=myListWorkers)
bossInputNew = eval(bossInput)

output = 'Age:', bossInputNew.age, 'years','old \n',  'Pay:', bossInputNew.pay, 'dollars', 'Gender:', bossInputNew.gender
#Prints out the output from code:
easygui.msgbox(msg=(output))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>How to fix this?</h2>
<p><code>easygui.msgbox</code> assumes its <code>msg</code> to be a <em>string</em>, like <code>'Hello'</code>, but you are passing it a <em>tuple</em>, a sequence of objects like 
<code>'age', 32, 'salary', 30000</code>.</p>
<p>You can fix the problem by passing a string to <code>easygui.msgbox</code>.  Your output is a string with embedded variable values, so this is good case for using a <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer">format string</a>.  A format string is a string that contains placeholders - usually curly bracket pairs <code>{}</code> - that you can replace with variable values.</p>
<p>Change this line:</p>
<pre><code>output = 'Age:', bossInputNew.age, 'years','old \n',  'Pay:', bossInputNew.pay, 'dollars', 'Gender:', bossInputNew.gender
</code></pre>
<p>to:</p>
<pre><code>output = 'Age: {} years old \nPay: {} dollars Gender:{}'.format(bossInputNew.age, bossInputNew.pay, bossInputNew.gender)
</code></pre>
<p>And it should work.</p>
<h2>Why is this happening?</h2>
<p><code>easygui.msgbox</code> assumes its <code>msg</code> to be a <em>string</em>, but doesn't actually check that this is true before passing <code>msg</code> to the code that creates the GUI elements.  As it happens, the default GUI provider is Python's tkinter package, and tkinter ultimately relies on code written in another language, tcl, to render GUI elements on screen.</p>
<p>tcl generally treats all variables as strings.  Given a tuple like </p>
<p><code>'Age: ', 32, 'years old \nPay:', 30000</code></p>
<p>tcl needs to be able to recognise that the three strings that make up <code>'years old \nPay:'</code> belong together.  The way to do this in tcl is to wrap (or "quote") the string with curly brackets.  This is why you see the curly brackets in your message box when you pass it the <code>output</code> tuple.</p>
</div>
