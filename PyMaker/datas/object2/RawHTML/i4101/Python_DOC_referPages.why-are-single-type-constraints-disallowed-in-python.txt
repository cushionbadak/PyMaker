<div class="post-text" itemprop="text">
<p>Suppose you want to constrain a type variable to implement a certain interface. You might write something like so:</p>
<pre><code>from typing import TypeVar, Callable

T = TypeVar('T', Callable)

class Foo(Generic[T]):
    ...

&gt;&gt; TypeError: A single constraint is not allowed
</code></pre>
<p>Why is Python unhappy about this use of type constraints? <a href="https://www.python.org/dev/peps/pep-0484/#generics" rel="noreferrer">PEP 484</a> and the <a href="https://github.com/python/typing/blob/master/src/typing.py#L511" rel="noreferrer">Python source code</a> are unhelpful in this regard.</p>
<p>Note: in my particular case I am interested in constraining a type variable to implement an abstract base class, but the principle is the same.</p>
</div>
<div class="post-text" itemprop="text">
<p>You’re looking for <code>bound</code>:</p>
<pre><code>T = TypeVar('T', bound=Callable)
</code></pre>
<p>From <a href="https://docs.python.org/3/library/typing.html#typing.TypeVar" rel="noreferrer">the docs</a>:</p>
<blockquote>
<p>a type variable may specify an upper bound using <code>bound=&lt;type&gt;</code>. This means that an actual type substituted (explicitly or implicitly) for the type variable must be a subclass of the boundary type, see PEP 484.</p>
</blockquote>
<p><code>TypeVar(name, *args)</code> means that the type has to be one of <code>args</code>, so all instances of <code>T</code> would just be replaceable by <code>Callable</code> if <code>T = TypeVar('T', Callable)</code> were allowed.</p>
<p>You should be able to see the difference here (though I didn’t actually try it, heh):</p>
<pre><code>from typing import Generic, TypeVar, Callable

T = TypeVar('T', Callable, bool)

class Foo(Generic[T]):
    value: T

    def __init__(self, value: T) -&gt; None:
        self.value = value

class Bar:
    baz = 5

    def __call__(self):
        pass

f = Foo(Bar())
print(f.value.baz)  # doesn’t typecheck because f.value is only a Callable
</code></pre>
</div>
<span class="comment-copy">Minor follow-up: do you have any idea how to access the constructor of the type bound to the type variable? Specifically, I want to call <code>T()</code> from within the generic class's <code>__init__</code>.</span>
<span class="comment-copy">@alcorn: That’s not a typing-level operation, so I’m pretty sure it’s not possible/shouldn’t be done. You can have the consumer pass in the class, though, through a parameter of type <code>Type[T]</code>.</span>
<span class="comment-copy">Ok I see, I'm falling into the trap of thinking about Python's type parameters as being comparable to the same feature in languages like C++/Java/C#, but in reality they are (at present) only useful for enforcing type constraints at run time: they can not stand in for actual values.</span>
