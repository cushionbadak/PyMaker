<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15147751/how-to-check-if-all-items-in-a-list-are-there-in-another-list">How to check if all items in a list are there in another list?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>Is there a built-in Pythonic way to determine if one list completely contains the contents of another, including duplicated entries but disregarding the order of items?</p>
<pre><code>&gt;&gt;&gt; l1 = [2, 2, 3]
&gt;&gt;&gt; l2 = [2, 2]
&gt;&gt;&gt; l3 = [3, 2]
&gt;&gt;&gt; l4 = [2, 2, 2]
&gt;&gt;&gt; l5 = [2, 5, 2]

&gt;&gt;&gt; is_superset(l1, l2)
True
&gt;&gt;&gt; is_superset(l1, l3)
True
&gt;&gt;&gt; is_superset(l1, l4)
False
&gt;&gt;&gt; is_superset(l1, l5)
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If there were no duplicates, or duplicates didn't matter (that is, if your <code>l1</code> and <code>l3</code> were both supersets of each other), you'd just use sets. But since if you want <code>l1</code> to be a proper superset of <code>l3</code>, you're talking about multisets. Fortunately, <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a> already implements multisets for you:</p>
<pre><code>from collections import Counter
def is_superset(a, b):
    return not Counter(b) - Counter(a)
</code></pre>
<p>Notice that this <code>-</code> is proper multiset difference between multisets (just as <code>-</code> is proper set difference between <code>set</code>s), not an elementwise subtraction across dicts. So if you subtract a super(multi)set, you get an empty multiset (that is, <code>Counter()</code>â€”which is, like all empty collections in Python, falsey).</p>
<p>So now:</p>
<pre><code>&gt;&gt;&gt; is_superset(l1, l2)
True
&gt;&gt;&gt; is_superset(l1, l3)
True
&gt;&gt;&gt; is_superset(l1, l4)
False
&gt;&gt;&gt; is_superset(l1, l5)
False
</code></pre>
<p>Plus:</p>
<pre><code>&gt;&gt;&gt; is_superset(l3, l1)
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Counter</a></p>
<pre><code>from collections import Counter

def is_superset(l1, l2):
    c1, c2 = Counter(l1), Counter(l2)
    return all(c1[k] &gt;= c2[k] for k in c2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another solution using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Counter</a> and the builtin intersection method:</p>
<pre><code>from collections import Counter

def is_superset(l1, l2):
    c1, c2 = Counter(l1), Counter(l2)
    return c1 &amp; c2 == c2
</code></pre>
<p>Test:</p>
<pre><code>&gt;&gt;&gt; l1 = [2, 2, 3]
&gt;&gt;&gt; l2 = [2, 2]
&gt;&gt;&gt; l3 = [3, 2]
&gt;&gt;&gt; l4 = [2, 2, 2]
&gt;&gt;&gt; l5 = [2, 5, 2]
&gt;&gt;&gt; is_superset(l1, l2)
True
&gt;&gt;&gt; is_superset(l1, l3)
True
&gt;&gt;&gt; is_superset(l1, l4)
False
&gt;&gt;&gt; is_superset(l1, l5)
False
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's an inefficient solution that verifies that for each element in the sublist, its occurrence number in the sublist must be lower or equal than its occurrence number in the superlist:</p>
<pre><code>def is_superset(l1, l2):
    return all([l1.count(item) &gt;= l2.count(item) for item in l2])
</code></pre>
</div>
<span class="comment-copy">@Patrick: That question is about a subsequence test; this question is looking for a sub-multiset test.</span>
<span class="comment-copy">@user2357112 if a set A is a subset of a set B, B is a superset of A</span>
<span class="comment-copy"><code>all([l1.count(item) &gt;= l2.count(item) for item in l2])</code>? Very inefficient though.</span>
<span class="comment-copy">I'm not sure about your indented "including duplicated entries". Do you mean that l1 is a superset of l3, but l3 is not a superset of l1?</span>
<span class="comment-copy">@abarnert Precisely.</span>
<span class="comment-copy">Never heard of it, what is the semantics of <code>bool(Counter(..))</code>? Is there a documentation page on it?</span>
<span class="comment-copy">@BenUsman It's the same as <i>every</i> collection in Python: empty collections are falsey, non-empty ones are true. (There are a few quasi-collections in third-party code, most famously numpy arrays, where that isn't true, but <code>Counter</code> isn't one of them.)</span>
<span class="comment-copy">@BenUsman See <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">Boolean operations</a> on the builtins, <a href="https://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="nofollow noreferrer"><code>__bool__</code></a> on falling back to <code>__len__</code>. Beyond that, I guess it's not explicitly defined, but the fact that a <code>Counter</code> is defined as "a dict subclass" <i>implies</i> that it should follow the same rules as dict, in the same way that it implies that <code>len</code> works. If you don't trust that, there's <a href="https://github.com/python/cpython/blob/3.6/Lib/collections/__init__.py#L451" rel="nofollow noreferrer">the source</a></span>
<span class="comment-copy">thanks! The falseness of empty collections is indeed intuitive. I did not know that <code>Counter</code> supports all these algebraic operations similarly to <code>set</code>.</span>
<span class="comment-copy">I don't think you need the <code>k in c1</code> check.</span>
<span class="comment-copy">Right, forgot Counters give 0 for non existent keys. Thanks</span>
<span class="comment-copy">Just subtract the counters. It's not elementwise subtraction, it's multiset subtraction, so you will get back an empty multiset if you subtract a super(multi)set. Or intersect them, as in <a href="https://stackoverflow.com/a/50180446/908494">fferri's answer</a>. Either way, if you're going to use a Counter as a multiset, take advantage of it being a multiset to write the intuitive multiset operation.</span>
<span class="comment-copy">Somebody downvotes this question as soon as @fferri post question. Why ?</span>
<span class="comment-copy">It may be worth parenthesizing <code>c1 &amp; c2</code> for clarity; while Python's precedence puts <code>&amp;</code> at higher precedence than <code>==</code>, many other languages have it the other way.</span>
<span class="comment-copy">The other way would read <code>return c1 &amp; True</code> which doesn't make sense.</span>
<span class="comment-copy">I think intersection may actually be clearer than set difference here, so I have no idea why someone downvoted your answer but not mine. Maybe just because they're a C user and were confused by the point that @user2357112 suggested clarifying?</span>
