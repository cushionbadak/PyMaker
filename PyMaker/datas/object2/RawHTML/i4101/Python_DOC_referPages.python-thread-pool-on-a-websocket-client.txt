<div class="post-text" itemprop="text">
<p>I have a web socket client that is receiving messages from a websocket server using asyncio. </p>
<pre><code>async def web_socket(server):
async with websockets.connect(server) as websocket:
    message = await websocket.recv()
    t = Thread(target=message_helper.process_message,args(message))
    t.start()
</code></pre>
<p>The messages from the websocket server come in very quickly and it runs indefinitely. I want to setup a thread pool to ensure I have enough threads. </p>
<p>All the examples I have seen setup a queue (here is one example: <a href="https://www.metachris.com/2016/04/python-threadpool/" rel="nofollow noreferrer">Thread Pool with Queue</a>. The examples that I have seen all have a predefined array of tasks then it starts processing them using the thread pool.</p>
<p>In my example above I don't see how I could implement this? As messages are coming in every second and I want to start a thread to process each message as it comes in. Is there a way to achieve what I am trying to do with a thread pool when I don't have a predefined array of tasks? </p>
</div>
<div class="post-text" itemprop="text">
<p>Would <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.run_in_executor" rel="nofollow noreferrer">run_in_executor()</a> do?</p>
<pre><code>async def web_socket(server):
    async with websockets.connect(server) as websocket:
        message = await websocket.recv()
        loop.run_in_executor(None, message_helper.process_message, args(message))
</code></pre>
</div>
<span class="comment-copy">Thanks that is what I was looking for i just defined the executor instead of using None like you had. executor = concurrent.futures.ThreadPoolExecutor(max_workers=30)</span>
<span class="comment-copy">Yep that'll do. Glad it works for you!</span>
