<div class="post-text" itemprop="text">
<p>I've just recently started learning programming in python as a beginner. I was wondering: are keys in dictionary also treated as variables?</p>
<p><code>students = {"Jake": 12, "Rachel":12, "Ross":15}</code></p>
<p>the code contains the student names and their age. 
For example: Is "Jake" a variable that contains the value 12? or is it treated as a variable?</p>
</div>
<div class="post-text" itemprop="text">
<p>While you can use a named value (or what you might think of as a 'variable') to construct a dictionary:</p>
<pre><code>&gt;&gt;&gt; x=22
&gt;&gt;&gt; di={x:x}
&gt;&gt;&gt; di
{22: 22}
</code></pre>
<p>You can also demonstrate that the value of the named value (if that value is immutable) is used at the time of construction and not dynamic:</p>
<pre><code>&gt;&gt;&gt; x=5
&gt;&gt;&gt; di
{22: 22}
</code></pre>
<p>The <strong>keys</strong> of a dict must be hashable (ie, unchanging; immutable) which would preclude the use of a list, set, or other named value that can change:</p>
<pre><code>&gt;&gt;&gt; changeable_list=[22]
&gt;&gt;&gt; di={changeable_list:changeable_list}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</code></pre>
<p>But the <strong>value</strong> of a dict can be dynamic and mutable:</p>
<pre><code>&gt;&gt;&gt; di={tuple(changeable_list):changeable_list}
&gt;&gt;&gt; di
{(22,): [22]}
</code></pre>
<p>And that list can be modified:</p>
<pre><code>&gt;&gt;&gt; changeable_list.append(44)
&gt;&gt;&gt; changeable_list
[22, 44]
&gt;&gt;&gt; di
{(22,): [22, 44]}
</code></pre>
<p>Notice how the value of the dict changes as the list changes because they are the same object.</p>
</div>
<div class="post-text" itemprop="text">
<p>As has been said, No, the keys of a dictionary are not variables. However, variables can sometimes key thought of as keys:</p>
<pre><code>students = {"Jake": 12, "Rachel":12, "Ross":15}

class Students:
    pass

s = Students()
s.Jake = 12
print(s.Jake, students['Jake'])

print(getattr(s, 'Jake'))
</code></pre>
<p>Output:</p>
<pre><code>12 12
12
</code></pre>
<p>There is no syntax that I'm aware of that would allow you to access the value <code>12</code> from <code>students</code> in this form: <code>students.Jake</code></p>
<p>However, modify the above code:</p>
<pre><code>class Students:
    def __getitem__(self, key):
        return getattr(self, key)

... # as before
print(getattr(s, 'Jake'), s['Jake'])
</code></pre>
<p>Output:</p>
<pre><code>12 12
</code></pre>
<p>Now students has an operator[] a little like a dictionary (Other operators might also be necessary.)</p>
<p>So, an object can become like a dictionary because they have an underlying dictionary to make them work as objects.</p>
</div>
<div class="post-text" itemprop="text">
<p>TL;DR - it depends on what you mean by a "variable". dicts act like python namespaces but allow more types of variable names.</p>
<p>Python objects have no inherent name. They can be referenced by one or more other objects and when their reference count goes to zero, they are deleted. When you assign an object to a variable, some data structure adds a reference to the the object and associates that object with the name. That data structure is the variable's namespace (that is, the context where the variable name is valid). And for most objects, that data structure is a <code>dict</code>.</p>
<p>Lets look at two examples:</p>
<pre><code>class Students:
    pass

student_obj = Students()
</code></pre>
<p>and</p>
<pre><code>student_dct = {}
</code></pre>
<p>I could treat Jake as a a variable</p>
<pre><code>&gt;&gt;&gt; student_obj.Jake = 12
&gt;&gt;&gt; student_obj.Jake
12
&gt;&gt;&gt; student_obj.__dict__
{'Jake': 12}
</code></pre>
<p>Or add it to the dict</p>
<pre><code>&gt;&gt;&gt; student_dct["Jake"] = 12
&gt;&gt;&gt; student_dct["Jake"]
12
&gt;&gt;&gt; student_dct
{'Jake': 12}
</code></pre>
<p>That's really close to the first example! The advantage to a variable is that it is parsed by python and python does the lookup for you. Python turns <code>student_obj.Jake</code> into <code>student_obj.__getattribute__("Jake")</code>. For normal class objects, python will check the object <code>__dict__</code> for the name then fall back to containing namespaces. Classes that use <code>__slots__</code> or are implemented in C follow different rules.</p>
<p>But variable assignment is a disadvantage if you want to use names that don't fit python's sytax rules. </p>
<pre><code>&gt;&gt;&gt; student_obj.Jim Bob = 12
  File "&lt;stdin&gt;", line 1
    student_obj.Jim Bob = 12
                      ^
SyntaxError: invalid syntax
</code></pre>
<p>Here, you want "Jim Bob" to be a variable but it can't be used directly as a variable because it breaks python. So, you put it into a dict</p>
<pre><code>&gt;&gt;&gt; student_dct["Jim Bob"] = 12
</code></pre>
<p>So, dictionary items are "variables" (the value can be referenced and reassigned) but are not "python variables" because python doesn't implement the lookup for you.</p>
</div>
<span class="comment-copy">No, keys are not variables.</span>
<span class="comment-copy">Here is one of the best <a href="https://nedbatchelder.com/text/names1.html" rel="nofollow noreferrer">starting points</a> for names and values in Python.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#mapping-types-dict</a></span>
<span class="comment-copy">It is a variable in a broader sense of the word. In a module or a class object, for instance, variables are held in dictionaries. When you reference the variable, python looks it up in the namespace <code>__dict__</code>. You can reassign <code>"jake"</code> in the dict, so its variable-like in that case too. The thing you can't do is use it as a variable on the dictionary, e.g., <code>students.Jake</code>. You could even make that work if you inherit from <code>dict</code> can create your own magic methods to use it.</span>
<span class="comment-copy">But <code>foo.x=22</code> does the same thing. And if you do <code>x=[22]</code> you do assign a dynamic object. "dynamic" is a property of the object assigned, not the assignment.</span>
<span class="comment-copy">@tdelaney: I don't follow your comment. Can you explain?</span>
<span class="comment-copy">You assigned an integer to <code>x</code> and later assigned a different integer to <code>x</code> and showed that the dict value didn't change. But variables work exactly the same way. <code>x=22;y=x;x=5</code>. I just don't see how that makes dict keys "not a variable". The only difference I see is that dicts hold keys that are not syntactically correct python and so you don't get the convenience of python's automatic resolution rules. But you can do that yourself. Variables (except function locals) reside in dictionaries so aren't all dictionary items variables?</span>
<span class="comment-copy">The question was about the keys of a dict. You cannot change the key dynamically by any means in Python. The demo was to show that the use of <code>di={x:[whatever]}</code> takes the <i>current value</i> of x and uses that for the key during the dict construction. After the dict is constructed, there is no longer any connection to <code>x</code> (well -- unless they both refer to an <a href="https://stackoverflow.com/a/20863199/298607">interned</a> value, but that is not in the scope of this question I think)</span>
<span class="comment-copy">OP literally asked: <i>Is "Jake" a variable that contains the value 12?</i></span>
<span class="comment-copy">It depends on what you mean by "variable". <code>dict</code> can hold many keys that would not be allowed syntactically in the python language. You have to address them as <code>foo["bar"]</code> instead of <code>foo.bar</code> but that's really the only difference.</span>
