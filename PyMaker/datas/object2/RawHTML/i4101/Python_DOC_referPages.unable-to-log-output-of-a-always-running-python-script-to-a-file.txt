<div class="post-text" itemprop="text">
<p>I have this script that checks and waits for some LAN connections to be established :</p>
<pre><code>import subprocess
import time
import os
import sys
sys.stdout = open('/home/pi/Desktop/file.txt', 'w')


print('checking LAN connections...')
time.sleep(2)
while(True):
    f=open("/sys/class/net/eth0/carrier","r")
    state=f.read()
    if('1' in state):
        print('LAN connection to target device established successfully !')
        break
    else:
        print('Please establish LAN connection to the target device !')
        time.sleep(4)
</code></pre>
<p>I want to be able to see its output in the specified log file but it stays empty.</p>
</div>
<div class="post-text" itemprop="text">
<p>Flush the output stream after each write. You seem to be using Python 3, so you can set the <code>flush</code> parameter for the <code>print()</code> function:</p>
<pre><code>print(msg, flush=True)
</code></pre>
<p>If you are using Python 2 then you can use <code>sys.stdout.flush()</code> and write a logging function:</p>
<pre><code>def log(msg):
    print msg
    sys.stdout.flush()
</code></pre>
<p>Perhaps a better way is to use the <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer"><code>logging</code></a> module. Here is a very simple example:</p>
<pre><code>import logging
import time

logging.basicConfig(filename='/home/pi/Desktop/file.txt', level=logging.DEBUG)
for i in range(10):
    logging.debug('Please establish LAN connection to the target device !')
    time.sleep(4)
</code></pre>
<p>This will <em>append</em> to the file. If you want to overwrite the file pass <code>filemode='w'</code> to <code>basicConfig()</code>.</p>
<p>Also, if you don't like the <code>DEBUG:root:</code> prefix you can use <code>format='%(message)s'</code> to log the message only:</p>
<pre><code>logging.basicConfig(filename='/home/pi/Desktop/file.txt', filemode='w', level=logging.DEBUG, format='%(message)s')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe you have to close it after everytime you write.
You can implement a print wrapper like this:</p>
<pre><code>def print(textlog):
   with open('/home/pi/Desktop/file.txt', 'a') as myfile:
      myfile.write(textlog+"\n")
</code></pre>
<p>Your code with wrapper should look like this:</p>
<pre><code>import subprocess
import time
import os

def print(textlog):
   with open('/home/pi/Desktop/file.txt', 'a') as myfile:
      myfile.write(textlog+'\n')

print('checking LAN connections...')
time.sleep(2)
while(True):
    f=open("/sys/class/net/eth0/carrier","r")
    state=f.read()
    if('1' in state):
        print('LAN connection to target device established successfully !')
        break
    else:
        print('Please establish LAN connection to the target device !')
        time.sleep(4)
</code></pre>
<p>Edit: Be careful, opening file with <code>w</code> will delete all contents of the file and create content from scratch. If you want to append, you can use <code>a</code>.</p>
</div>
<span class="comment-copy">Start debugging. Like first check if the sys.stdout is working. comment the line   ` f=open("/sys/class/net/eth0/carrier","r")     state=f.read()` and add <code>state='1'</code> and run the program.</span>
<span class="comment-copy"><code>state=f.read()</code> is in a wait state.</span>
<span class="comment-copy">this logged the output to the file correctly but i can't see lines being written to the file as the script is running, this is what i want to acheive</span>
<span class="comment-copy">@Hbib oh well, then the problem might be related to the flow. as skr commented, you should see the desired output in terminal and then, as the final step, you can redirect stdout to some file.</span>
<span class="comment-copy">@Hbib your code worked well on my machine.</span>
<span class="comment-copy">when the file is open can't see lines being added, can you ?</span>
<span class="comment-copy">It's inefficient to open and close the file repeatedly like that. Better to just flush the output stream after each write: <code>sys.stdout.flush()</code>.</span>
