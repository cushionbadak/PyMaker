<div class="post-text" itemprop="text">
<p>Some of my api views have something like this:</p>
<pre><code>try:
    do_stuff()
except KeyError as exc:
    logger.log(exc)
    raise APIException("No good")
</code></pre>
<p>Ideally I don't want to log in every piece of code like this but use a general exception handler that catches APIException, so I changed my code to:</p>
<pre><code>try:
    do_stuff()
except KeyError as exc:
    raise APIException(exc)
</code></pre>
<h3>exception_handler.py</h3>
<pre><code>def exception_handler(...):

    logger.log(exc)  # I want to log the KeyError...

    return Response({"message": "try again sam"}, status_code=400)
</code></pre>
<p>My problem is the exc in the handler isn't the keyerror but the apiexception, can I somehow get the KeyError from sys.exc_info or stacktrace? </p>
</div>
<div class="post-text" itemprop="text">
<p>The good practice is to raise your own exception (here it is <code>APIException</code>) and attach the original exception.</p>
<p>You can take a look at <a href="https://pythonhosted.org/six/index.html#six.raise_from" rel="nofollow noreferrer">six.raise_from</a> (if you want a Python 2/3 compatible solution):</p>
<blockquote>
<p>Raise an exception from a context. On Python 3, this is equivalent to <code>raise exc_value from exc_value_from</code>. On Python 2, which does not support exception chaining, it is equivalent to raise exc_value.</p>
</blockquote>
<p>You can also create your own exception class which can do the chaining.</p>
<pre><code>class APIException(Exception):
    def __init__(self, msg, exc_from=None):
        self.exc_from = exc_from
        if exc_from:
            msg += ': raise from {0}'.format(str(exc_from))
        super(APIException, self).__init__(self, msg)

# demo

def do_stuff():
    raise KeyError('bad key')


def main():
    try:
        do_stuff()
    except KeyError as exc:
        raise APIException('error in main', exc)


try:
    main()
except APIException as exc:
    print(str(exc))
</code></pre>
<p>Of course, instead of printing/logging your APIException error message you can log your original message:</p>
<pre><code>try:
    main()
except APIException as exc:
    print(str(exc.exc_from))
</code></pre>
<p><strong>Edit: Use class hierarchy for exceptions</strong></p>
<p>But, if <code>do_stuff()</code> is part of your API, itâ€™s a better practice to do the exception handling inside this function and throw your own exception which can inherit <code>APIException</code>. </p>
<pre><code>class APIException(Exception):
    pass


class BadStuffError(APIException):
    pass


def do_stuff():
    try:
        # ...
        raise KeyError('bad key')
    except KeyError as exc:
        raise BadStuffError('bad stuff: ' + exc.args[0])



def main():
    do_stuff()


try:
    main()
except APIException as exc:
    print(str(exc))
</code></pre>
<p>This solution is the best, IMO. </p>
</div>
<div class="post-text" itemprop="text">
<p>Since you are using Python 3, you can simply raise the <code>APIException</code>:</p>
<pre><code>try:
    do_stuff()
except KeyError as exc:
    raise APIException() from exc
</code></pre>
<p>Then in your exception handler, if <code>exc</code> is the <code>APIException</code>, you can access the original exception with <code>exc.__context__</code>.</p>
<pre><code>def exception_handler(exc):
    logger.log(exc.__context__)
    return Response({"message": "try again sam"}, status_code=400)
</code></pre>
<p>The <code>from exc</code> is not actually needed to be able to access <code>__context__</code>, but it makes it clear that the <code>KeyError</code> was converted to <code>APIException</code>, rather than <code>APIException</code> being raised during the handling of <code>KeyError</code>.
See the <a href="https://docs.python.org/3/library/exceptions.html" rel="nofollow noreferrer">exception docs</a> for more info.</p>
</div>
<span class="comment-copy">You can try <code>logger.log(exc.args[0])</code> since the KeyError was passed to the APIException constructor. But you would have to do more work if you have different Exception-ception levels.</span>
