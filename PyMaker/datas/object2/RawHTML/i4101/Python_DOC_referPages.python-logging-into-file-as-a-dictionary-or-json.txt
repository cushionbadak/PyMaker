<div class="post-text" itemprop="text">
<p>I am trying to set up logging where I can log in both stdout and on to a file. This i have accomplished using the following code: </p>
<pre><code>logging.basicConfig(
        level=logging.DEBUG, format='%(asctime)-15s %(levelname)-8s %(message)s',
        datefmt='%a, %d %b %Y %H:%M:%S', handlers=[logging.FileHandler(path), logging.StreamHandler()])
</code></pre>
<p>The output of this something like this:</p>
<pre><code>2018-05-02 18:43:33,295 DEBUG    Starting new HTTPS connection (1): google.com
2018-05-02 18:43:33,385 DEBUG    https://google.com:443 "GET / HTTP/1.1" 301 220
2018-05-02 18:43:33,389 DEBUG    Starting new HTTPS connection (1): www.google.com
2018-05-02 18:43:33,490 DEBUG    https://www.google.com:443 "GET / HTTP/1.1" 200 None
</code></pre>
<p>What I am trying to accomplish is logging this output to a file not as it is printing to stdout, but as a dictionary or JSON object similar to something like this (while keeping the stdout as it is at the moment):</p>
<p><code>[{'time': '2018-05-02 18:43:33,295', 'level': 'DEBUG', 'message': 'Starting new HTTPS connection (1): google.com'}, {...}, {...}]</code></p>
<p>Is this doable? I understand that I can post process this log file after my process is finished, but I am looking for a more elegant solution because certain things i am logging are quite big objects themselves. </p>
</div>
<div class="post-text" itemprop="text">
<p>So based on @abarnert, i found this <a href="https://docs.python.org/2/howto/logging-cookbook.html" rel="nofollow noreferrer">Link</a> which provided a good path to making this concept work for the most part. The code as it stands is:</p>
<pre><code>logger=logging.getLogger()
logger.setLevel(logging.DEBUG)

file_handler=logging.FileHandler('foo.log')
stream_handler=logging.StreamHandler()

stream_formatter=logging.Formatter(
    '%(asctime)-15s %(levelname)-8s %(message)s')
file_formatter=logging.Formatter(
    "{'time':'%(asctime)s', 'name': '%(name)s', \
    'level': '%(levelname)s', 'message': '%(message)s'}"
)

file_handler.setFormatter(file_formatter)
stream_handler.setFormatter(stream_formatter)

logger.addHandler(file_handler)
logger.addHandler(stream_handler)
</code></pre>
<p>Although it does not fully meet the requirement, it doesnt require any pre processing, and allows me to create two log handlers. </p>
<p>Afterwards, i can use something like: </p>
<pre><code>with open('foo.log') as f:
    logs = f.read().splitlines()
for l in logs:
    for key, value in eval(l):
        do something ...
</code></pre>
<p>to pull <code>dict</code> objects instead of fighting with improperly formatted JSON to accomplish what i had set out to accomplish. </p>
<p>Still am hoping for a more elegant solution. </p>
</div>
<div class="post-text" itemprop="text">
<p>The cookbook specifically shows how to format for structured logging, here in the section entitled <a href="https://docs.python.org/2/howto/logging-cookbook.html#implementing-structured-logging" rel="nofollow noreferrer"><em>Implementing Structured Logging</em></a>.</p>
<p>The other bits (multiple handlers), you already know.</p>
</div>
<span class="comment-copy">This I have considered @Sphinx, but this doesnt work because then it will print to stdout as a json schema</span>
<span class="comment-copy">What you want to do is create a custom <code>Formatter</code> that takes a <code>LogRecord</code> and JSON-encodes it (maybe preprocessing it first, of course). Then you create a stdout handler that uses the default formatter, and a file handler that uses your custom formatter. This isn't entirely trivial, but the <a href="https://docs.python.org/3/howto/logging.html#advanced-logging-tutorial" rel="nofollow noreferrer">Advanced Logging Tutorial</a> should get you started, and <a href="https://docs.python.org/3/howto/logging-cookbook.html#use-of-alternative-formatting-styles" rel="nofollow noreferrer">some sections of the Cookbook</a> have some relevant-ish sample code.</span>
<span class="comment-copy">There are also a variety of pre-made structured-logging libraries on PyPI. I don't know which ones are any good or which features they each have, but I wouldn't be surprised if there's one that does what you want with a bit of minor configuration instead of writing a bunch of code.</span>
<span class="comment-copy">One last thing: You can't just "write JSON to a file". Well, you <i>can</i> (as long as your top-level texts are always objects or arrays), but most JSON-parsing code won't handle an arbitrary stream of JSON texts in a single file. You want to use something like <a href="http://jsonlines.org/" rel="nofollow noreferrer">JSON Lines</a>, or one of the two near-identical formats, which slightly restrict what's allowed in JSON encoding so you can guarantee exactly one JSON text ends up on each line of a text file.</span>
<span class="comment-copy">@abarnert I am exploring the advanced section of the cookbook at the moment. It seems that would be workable. Maybe. I am not sure how it will handle a big JSON object I am already logging, but here goes trying. Thanks!</span>
<span class="comment-copy">This doesnt really solve the question. Because using the example, i can not pass Formatter attributes to the kwargs to log them in a json format. The question is not how to set the values of foo, bar and baz manually, but to use the formatter attributes as the values of foo, bar and baz</span>
