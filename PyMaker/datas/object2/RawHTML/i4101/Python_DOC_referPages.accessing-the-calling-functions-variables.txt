<div class="post-text" itemprop="text">
<p>The following code</p>
<pre><code>class Foo(object):
    def do_something(self):
        print(main.func_code.co_varnames)
        for item in main.func_code.co_varnames:
            eval(item)

def main():
    a = 1
    b = Foo()
    b.do_something()

main()
</code></pre>
<p>will print</p>
<pre><code>('a', 'b')
</code></pre>
<p>along with an error message ending with</p>
<pre><code>name 'a' is not defined
</code></pre>
<p>Somehow a Foo object is able to get the names of another function's local variables, but cannot do anything with them.  How can I fix that?</p>
<p>BACKGROUND.  This question is for debugging purposes.  I want to be able to display information about variables that are created in my code.</p>
</div>
<div class="post-text" itemprop="text">
<p>The local variables are defined for the function. So as long as the function is defined, the interpreter "knows" that there will be 2 local variables, named <code>a</code> and <code>b</code>. Useful for memory allocation, when the function will be called. Think of it as a blueprint.</p>
<p>Then, when you try to <code>eval</code> some string, it will do it using the context (<code>locals()</code> and <code>globals()</code>) of where the <code>eval</code> lies.
You do not have any <code>a</code> in that scope. Therefore, it fails, as it is not defined.</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li>Use <a href="https://docs.python.org/3/library/inspect.html#inspect.currentframe" rel="nofollow noreferrer"><code>inspect.currentframe</code></a> to get a stack frame object</li>
<li>Move up the call stack by 1 frame with the <code>f_back</code> attribute</li>
<li>Access that frame's local variables through the <code>f_locals</code> attribute</li>
</ul>
<pre><code>import inspect

def get_variables():
    frame = inspect.currentframe().f_back
    print(frame.f_locals)
</code></pre>
<p>Usage:</p>
<pre><code>def main():
    a = 1
    b = 'hello world'

    get_variables()

main()
# output: {'b': 'hello world', 'a': 1}
</code></pre>
</div>
<span class="comment-copy">Thanks, that's one step closer!  But actually, I want the id of the variables...  I looked at the documentation and tried various things but don't see how to get this type of information.</span>
<span class="comment-copy">@Antoine Variables don't have an "id". If you're looking for the id of the value <i>inside</i> a variable, you can use the <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer"><code>id</code></a> function.</span>
<span class="comment-copy">Thanks again, another step closer! Now I am able to get the id of the value inside the variable <code>a</code> (using eval), which is an integer, but I have a problem with <code>b</code>, since Python tries to evaluate <code>id(&lt;__main__.Foo object at 0x10dbc15d0&gt;)</code> and it can't.  Is changing <code>__repr__</code> of the class Foo the only way to get the id?</span>
<span class="comment-copy">@Antoine I don't understand what you're using <code>eval</code> for? Just use <code>id(get_variables()['b'])</code>.</span>
<span class="comment-copy">Of course! I was thinking too complicated...  Thanks again!</span>
