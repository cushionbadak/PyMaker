<div class="post-text" itemprop="text">
<p>I have some time data that I need to convert to a proper datetime with</p>
<pre><code>data['dep_time'] = pd.to_datetime(data['dep_time'], format='%H:%M').dt.time
</code></pre>
<p>The problem is in each cell I have an inconsistent number of digits</p>
<p>I might have '1714' or '714' or just '6'.</p>
<p>I want to use format to change each str to the format 00:00, but I have to start from the back of the str and assume that if I just have '6' it means '00:06'</p>
<pre><code>        year  month  day  dep_time  dep_delay  arr_time  arr_delay  cancelled  \
103992  2014      5   11      1013         -2      1247        -13          0   
103993  2014      5   11      1929         -1      2215        -24          0   
103994  2014      5   11      1117          5      1355          9          0   
103995  2014      5   11       736        -10       924        -18          0   
103996  2014      5   11      1340          0      1647         10          0   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try using <code>str.pad</code> </p>
<pre><code>df=pd.DataFrame({'time':['1', '12', '123', '1234']})
df.time.str.pad(4,side='left',fillchar='0')
Out[188]: 
0    0001
1    0012
2    0123
3    1234
Name: time, dtype: object
</code></pre>
<p>Or <code>rjust</code></p>
<pre><code>df.time.str.rjust(4,fillchar='0')
Out[190]: 
0    0001
1    0012
2    0123
3    1234
Name: time, dtype: object
</code></pre>
<p>Update </p>
<pre><code>pd.to_datetime(df.time.str.pad(4,side='left',fillchar='0'),format='%H%M').dt.time
Out[199]: 
0    00:01:00
1    00:12:00
2    01:23:00
3    12:34:00
Name: time, dtype: object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In plain Python you can use <a href="https://docs.python.org/3/library/stdtypes.html#str.rjust" rel="nofollow noreferrer">right justification</a>:</p>
<pre><code>for s in ('1', '12', '123', '1234'):
    print(s.rjust(4, '0'))
</code></pre>
<p><strong>output</strong></p>
<pre><code>0001
0012
0123
1234
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not as elegant as some suggestions, but simple and may work for you?</p>
<pre><code>dt = 'dep_time'.zfill(4)
dt = dt[:2] + ":" + dt[2:]
</code></pre>
<p>So for 1 you will get</p>
<pre><code>00:01
</code></pre>
<p>and for 613:</p>
<pre><code> 06:13
</code></pre>
<p>or more succinctly:</p>
<pre><code>dt = '{0}:{1}'.format(date_time.zfill(4)[:2], date_time.zfill(4)[2:])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Borrowing Wen's <code>df</code></p>
<h2><code>pandas.Series.str.zfill</code></h2>
<pre><code>df.time.str.zfill(4)

0    0001
1    0012
2    0123
3    1234
Name: time, dtype: object
</code></pre>
<h2>Python 3.6 f-string</h2>
<pre><code>[f'{int(i):04d}' for i in df.time]

['0001', '0012', '0123', '1234']
</code></pre>
</div>
<span class="comment-copy">What if the cell is <code>'111'</code>?</span>
<span class="comment-copy">That would be 01:11</span>
<span class="comment-copy">Then how is 11:01 formatted?</span>
<span class="comment-copy">Just like that. My data says 1101 when it means that and I'm making some assumptions about the consistency of what I have</span>
<span class="comment-copy">Any idea why this data['dep_time'] = pd.to_datetime(data['dep_time'], format='%H:%M').dt.time isn't conveting it to datetime now?</span>
<span class="comment-copy">@Davtho1983 can you show us some sample data ?</span>
<span class="comment-copy">Added data to question. Error I'm getting is 'ValueError: time data '24:00' does not match format '%H:%M' (match)'</span>
<span class="comment-copy">@Davtho1983 HHMM ... think about the hour , it should be 00 to 24 and mins should be 00 to 60 , you have some value exceed the range</span>
<span class="comment-copy">@Davtho1983 adding <code>errors </code>, it will remain the error as NaT <code>pd.to_datetime(data['dep_time'].str.pad(4,side='left',fillchar='0'),format='%H%M',errors='coerce').dt.time</code></span>
<span class="comment-copy">I'm trying not to execute a for loop for every cell in my data - is format faster?</span>
<span class="comment-copy">@Davtho1983 with pandas you do <code>df[column].str.rjust(4, '0')</code></span>
