<div class="post-text" itemprop="text">
<p>I'll preface this by saying I'm not an advanced programmer and I have only written programs that run sequentially and exit.  What I'd like to do now is write a python script that I'll launch and it will run a function every 5 minutes and another function every 10 minutes and do so indefinitely.  Here's some pseudo-code:</p>
<pre><code>def RunMeEvery5min:
    do something

def RunMeEvery10min:
    do something

while True:
    every 5 minutes run RunMeEvery5min
    every 10 minutes run RunMeEvery10min
    do this forever until I kill the program
</code></pre>
<p>So is this threading?  It really doesn't matter if the tasks line up or not as they're essentially unrelated.  I would venture to guess that this is a common type of programming question, but I've never really understood how to accomplish this and I don't even know what to search for.  Any helpful examples or links to basic tutorials would be <em>much</em> appreciated!</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe this will help you <a href="https://github.com/dbader/schedule" rel="nofollow noreferrer">https://github.com/dbader/schedule</a></p>
<pre><code>import schedule
import time

def job():
     print("I'm working...")

schedule.every(10).minutes.do(job)

while True:
     schedule.run_pending()
     time.sleep(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/sched.html" rel="nofollow noreferrer"><code>sched</code></a> from Python standard library.</p>
<pre><code>import sched, time
from datetime import datetime

scheduler = sched.scheduler(time.time, time.sleep)

def execute_every_05mins():
    print(datetime.now().strftime("%H:%M:%S"))
    scheduler.enter(300, 0, execute_every_05mins, ())

def execute_every_10mins():
    print(datetime.now().strftime("%H:%M:%S"))
    scheduler.enter(600, 0, execute_every_10mins, ())

if __name__ == "__main__":
    scheduler.enter(0, 0, execute_every_05mins, ())
    scheduler.enter(0, 0, execute_every_10mins, ())
    scheduler.run()
</code></pre>
</div>
<span class="comment-copy"><a href="http://apscheduler.readthedocs.io/en/3.3.1/modules/triggers/interval.html#module-apscheduler.triggers.interval" rel="nofollow noreferrer">ApScheduler</a>, <a href="http://celery.readthedocs.io/en/latest/" rel="nofollow noreferrer">Celery</a>, <a href="https://stackoverflow.com/questions/573618/django-set-up-a-scheduled-job">Django Cron</a> (&lt;-- these are separate links) could get you started. I don't blame you for asking, it's confusing! But it depends on your environment.</span>
<span class="comment-copy">Sounds like something similar to JavaScript's setInterval. I would start by reading similar questions, if so: <a href="https://stackoverflow.com/q/2697039/534109">stackoverflow.com/q/2697039/534109</a></span>
<span class="comment-copy">This does exactly what I need it to do!!!  Woo hoo :)</span>
<span class="comment-copy">And for me this works well because timing is not critical - I just need stuff to run every so often, somewhat similar to cron jobs, but this is better :)</span>
