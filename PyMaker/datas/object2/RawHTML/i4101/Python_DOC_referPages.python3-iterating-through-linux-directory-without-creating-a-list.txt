<div class="post-text" itemprop="text">
<p>Folks:
I am starting to learn Python; however, I need to loop through the the content of a directory.</p>
<p>I do not want to slurp the content of the directory into an array and loop through it with a 'for i in x' loop, but loop though the directory handler. I understand it would be faster with an array in memory; however, I am limited on the amount of space that improvised to 'user space' in memory. </p>
<p>Due to the latter, I want loop over the directory itself. What is the best way to do this in Python3 for Linux? I would really appreciate example code since I am learning.</p>
<p>-73</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot use <code>os.listdir</code> since it returns a <code>list</code>, but you can use <a href="https://docs.python.org/3/library/os.html#os.scandir" rel="nofollow noreferrer"><code>scandir</code></a> which returns an <em>iterator</em>. The iterator doesn't load the directory contents, but yields the files one by one. It doesn't consume as much memory as <code>os.listdir</code> and you can stop it when you want.</p>
<blockquote>
<p>os.scandir(path='.')</p>
<p>Return an <strong>iterator</strong> of os.DirEntry objects corresponding to the entries in the directory given by path. The entries are yielded in arbitrary order, and the special entries '.' and '..' are not included.</p>
</blockquote>
<p>Also nice side-effect:</p>
<blockquote>
<p>Using scandir() increases the speed of os.walk() by 2-20 times (depending on the platform and file system) by avoiding unnecessary calls to os.stat() in most cases.</p>
</blockquote>
<p>The best speed increase is actually when using Windows, I used that on a networked drive on Windows for a program that was checking if entries were files or dirs, and sped up the code by 800%</p>
<p>Small example which prints only files from a path:</p>
<pre><code>with os.scandir(path) as it:
    for entry in it:
        if entry.is_file():
            print(entry.name)
</code></pre>
<p>This is available from python 3.5. If you have an older version, a pypi package does the same: <a href="https://pypi.org/project/scandir/" rel="nofollow noreferrer"><code>scandir</code></a>, just use <code>scandir.scandir</code> instead of <code>os.scandir</code></p>
</div>
<span class="comment-copy">Sounds like you're looking for <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk</code></a> or <a href="https://docs.python.org/3/library/os.html#os.listdir" rel="nofollow noreferrer"><code>os.listdir</code></a>.  I'm not sure I understand the distinction between looping over the contents of the directory handler and over some python object that that information has been read into.</span>
<span class="comment-copy">Hi Patrick,when you say 'has been read into' are you talking about a list or tuple or an array? This would increase memory usage, since you have to read content into memory, before you loop of the items. Due to the latter, this is what I am trying to avoid.</span>
<span class="comment-copy">Hi Jean! - I think this is what I want 'interator'; however, not sure of the terms and syntax yet, since I am still learning; however, I know just enough to get myself into trouble, since I am not a programmer by trade.</span>
<span class="comment-copy">I provided a sample code with a loop on this iterator. You can also iterate on it manually.</span>
<span class="comment-copy">I checked and confirmed I have v3.5, so will try this when I get into the office.</span>
