<div class="post-text" itemprop="text">
<p>I would like to handle one specific exception in my script in a single place without resorting to a <code>try</code>/<code>exception</code> everytime<sup>*</sup>. I was hoping that the code below would do this:</p>
<pre><code>import sys

def handle(exc_type, exc_value, exc_traceback):
    if issubclass(exc_type, ValueError):
        print("ValueError handled here and the script continues")
        return
    # follow default behaviour for the exception
    sys.__excepthook__(exc_type, exc_value, exc_traceback)

sys.excepthook = handle

print("hello")
raise ValueError("wazaa")
print("world")
a = 1/0
</code></pre>
<p>The idea was that <code>ValueError</code> would be handled "manually" and the script would continue running (<code>return</code> to the script). For any other error (<code>ZeroDivisionError</code> in the case above), the normal traceback and script crash would ensue.</p>
<p>What happens is </p>
<pre><code>$ python scratch_13.py
hello
ValueError handled here and the script continues

Process finished with exit code 1
</code></pre>
<p>The <a href="https://docs.python.org/3/library/sys.html#sys.excepthook" rel="nofollow noreferrer">documentation</a> mentions that (emphasis mine)</p>
<blockquote>
<p>When an exception is raised and uncaught, the interpreter calls
  <code>sys.excepthook</code> with three arguments, the exception class, exception
  instance, and a traceback object. In an interactive session this
  happens just before control is returned to the prompt; <strong>in a Python
  program this happens just before the program exits</strong>.</p>
</blockquote>
<p>which would mean that when I am in <code>handler()</code> it is already too late as the script has decided to die anyway and my only possibility is to influence how the traceback will look like.</p>
<p><strong>Is there a way to ignore a specific exception globally in a script ?</strong></p>
<hr/>
<p><sup>*</sup> this is for a debugging context where the exception would normally be raised and crash the script (in production) but in some specific cases (a dev platform for instance), this specific exception needs to just be discarded. Otherwise I would have put a <code>try</code>/<code>exception</code> clause everywhere where the issue could arise.</p>
</div>
<div class="post-text" itemprop="text">
<p>One way to do it is to use <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress" rel="nofollow noreferrer"><code>contextlib.suppress</code></a> and have a global tuple of suppressed Exceptions:</p>
<pre><code> suppressed = (ValueError,)
</code></pre>
<p>And then anywhere where the error might occure you just wrap it in <code>with suppress(*suppressed)</code>:</p>
<pre><code>print("hello")
with suppress(*suppressed): # gets ignored
    raise ValueError("wazaa")
print("world")
a = 1/0 # raise ZeroDivisionError
</code></pre>
<p>And then in production you just change <code>suppressed</code> to <code>()</code>:</p>
<pre><code>suppressed = ()
print("hello")
with suppress(*suppressed):
    raise ValueError("wazaa") # raises the error
print("world")
a = 1/0 # doesn't get executed
</code></pre>
<p>I think this is the best you can do. You can't ignore the exception completly globally, but you can make it so you only have to change on place. </p>
</div>
<span class="comment-copy">Look at <a href="https://books.google.com.mx/books?id=GIibCgAAQBAJ&amp;pg=PA34&amp;lpg=PA34&amp;dq=issubclass(exc_type,+ValueError)&amp;source=bl&amp;ots=dkL-A6Ofb6&amp;sig=4U2vDlzUAHpXWh_M5Fc24htzkko&amp;hl=es-419&amp;sa=X&amp;ved=0ahUKEwiNyNfz__faAhXJ61MKHbFeBVYQ6AEIKDAA#v=onepage&amp;q=issubclass(exc_type%2C%20ValueError)&amp;f=false" rel="nofollow noreferrer">this</a> might help.</span>
<span class="comment-copy">@Mulliganaceous: I do not understand: which <code>except</code>? You mean in the code? If so this is exactly what I want to avoid doing (adding a <code>try</code> clause everywhere)</span>
<span class="comment-copy">@lalengua: this si interesting - but also means I have to wrap the whole script in a context manager. This is an idea, though.</span>
<span class="comment-copy">When you catch an exception, execution continues from the point where the exception was <i>caught</i>; you can't go back to the point where it was <i>raised</i>, which would mean having a global "handler" for an exception type wouldn't be particularly useful.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/34425356/how-to-continue-a-frame-execution-from-last-attempted-instruction-after-handling">How to continue a frame execution from last attempted instruction after handling an exception?</a></span>
<span class="comment-copy">Thanks but this is not too different from a <code>try</code> clause where the <code>except</code>  would catch the specific exception and <code>pass</code>. My aim was not to modify the script code and just handle the exception in one place, outside of the normal flow of the script.</span>
<span class="comment-copy">Well, no - yours is better than having the try clause everywhere because, as you mention, you can modify the behavior globally. It still requires wrapping every call individually.</span>
<span class="comment-copy">@WoJ Yes, but you can't do any better without tweaking the python interpreter.</span>
