<div class="post-text" itemprop="text">
<p>Good Evening,</p>
<p>I am trying to <strong>estimate</strong> the <strong>remaining</strong> <strong>time</strong> to the end of a loop; I've used:</p>
<pre><code>start = datetime.now()
progress = 0

for i in range(1000): 

    #do a few calculations

    progress += 1

    stop = datetime.now()
    execution_time = stop-start 

    remaining = execution_time * ( 1000 - progress )

    print("Progress:", progress, "%, estimated", remaining, "time remaining")
</code></pre>
<p>But it does <strong>not</strong> seem to work properly, since it goes up to minutes, even though the loop would take 20 seconds in total, and decrease quickly when reaching the end.</p>
<p>How can I try to <strong>forecast</strong> the <strong>remaining</strong> <strong>time</strong> of a loop efficiently and correctly?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your calculation for time remaining is wrong. If it takes <code>execution_time</code> for <code>progress</code> steps. Then how much does it take for <code>1000</code> steps ?</p>
<p>Simple cross multiply gives you the total time. Subtract it from the time already elapsed and that will give you the time remaining.</p>
<pre><code>remaining_time = execution_time * 1000 / progress - execution_time
percent_complete =  (progress  / 1000) * 100     #You can simplify this if you like
print("Progress:", percent_complete , "%, Estimated", remaining_time, "time remaining")
</code></pre>
<p>Also your variable <code>execution_time_1</code> is never defined</p>
</div>
<div class="post-text" itemprop="text">
<p>Rather than using <code>datetime.datetime.now()</code> for this sort of thing you can use <a href="https://docs.python.org/3/library/time.html#time.perf_counter" rel="nofollow noreferrer"><code>time.perf_counter()</code></a>, which is available in Python 3.3+. From the docs:</p>
<blockquote>
<p>Return the value (in fractional seconds) of a performance counter,
  i.e. a clock with the highest available resolution to measure a short
  duration. It does include time elapsed during sleep and is
  system-wide. The reference point of the returned value is undefined,
  so that only the difference between the results of consecutive calls
  is valid.</p>
</blockquote>
<p>Also, you can print using a carriage return instead of a newline so that the progress reports are printed on a single line. Here's a brief demo derived from your code.</p>
<pre><code>from time import sleep, perf_counter

fmt = "  Progress: {:&gt;3}% estimated {:&gt;3}s remaining"
num = 1000

start = perf_counter()
for i in range(1, num + 1):
    # Simulate doing a few calculations
    sleep(0.01)

    stop = perf_counter()
    remaining = round((stop - start) * (num / i - 1))
    print(fmt.format(100 * i // num, remaining), end='\r')
print()
</code></pre>
<p>Depending on your terminal (and Python version) you may also need to add the <code>flush=True</code> keyword arg to the <code>print</code> call in order to get the progress reports to print as they are issued.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that in this line: </p>
<pre><code>remaining = execution_time * ( 1000 - progress )
</code></pre>
<p>you should divide execution_time/progress, because you want to know how long it takes to complete one percent of progress. </p>
<pre><code>remaining = execution_time/progress * ( 1000 - progress )
</code></pre>
</div>
<span class="comment-copy">What is <code>execution_time_1</code>?</span>
<span class="comment-copy"><code>time_by_loop = (execution_time_1.microseconds/progress)</code></span>
<span class="comment-copy">If time_by_loop is the time required for one step, then you want <code>remaining=time_by_loop * (1000-progress)</code>.</span>
<span class="comment-copy">BTW, you should use <a href="https://docs.python.org/3/library/time.html#time.perf_counter" rel="nofollow noreferrer"><code>time.perf_counter()</code></a> (or perhaps <code>time.process_time()</code>) rather than <code>datetime.datetime.now()</code> for this sort of thing. If necessary, you can use <code>time</code> or <code>datetime</code> functions to format the raw seconds as hours:minutes:seconds.</span>
<span class="comment-copy">Possibly the <a href="https://pypi.org/project/tqdm/" rel="nofollow noreferrer"><code>tqdm</code></a> package might provide what you need.</span>
