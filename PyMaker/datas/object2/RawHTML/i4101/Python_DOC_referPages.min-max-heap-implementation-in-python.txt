<div class="post-text" itemprop="text">
<p>This is my implementation of a MinHeap and MaxHeap in python. This uses a comparator to reverse the sequence of storage in the MaxHeap</p>
<pre><code>import heapq


class MinHeap:
    def __init__(self):
        self.heap = []

    def push(self, item):
        heapq.heappush(self.heap, item)

    def pop(self):
        return heapq.heappop(self.heap)

    def peek(self):
        return self.heap[0]

    def __getitem__(self, item):
        return self.heap[item]

    def __len__(self):
        return len(self.heap)


class MaxHeap(MinHeap):
    def push(self, item):
        heapq.heappush(self.heap, Comparator(item))

    def pop(self):
        return heapq.heappop(self.heap)

    def peek(self):
        return self.heap[0]

    def __getitem__(self, i):
        return self.heap[i].val


class Comparator:
    def __init__(self, val):
        self.val = val

    def __lt__(self, other):
        return self.val &gt; other

    def __eq__(self, other):
        return self.val == other




if __name__ == '__main__':
    max_heap = MaxHeap()
    max_heap.push(12)
    max_heap.push(3)
    max_heap.push(17)
    print(max_heap.pop())
</code></pre>
<p>The MinHeap seems to work fine, however the MaxHeap throw up the following error.</p>
<pre><code>&lt;__main__.Comparator object at 0x10a5c1080&gt;
</code></pre>
<p>I don't quite seem to understand what am I doing wrong here. Can someone help me with this.</p>
</div>
<div class="post-text" itemprop="text">
<p>I've added <code>__repr__</code> and <code>__gt__</code> methods to your <code>Comparator</code> class, so the code now runs, and the <code>Comparator</code> instances display their <code>val</code> when printed.</p>
<p>The important thing is to get those comparison methods to do the comparisons correctly between two <code>Comparator</code> instances.</p>
<p>You'll notice that I've eliminated most of the methods from <code>MaxHeap</code>. They aren't needed because the methods inherited from <code>MinHeap</code> work ok. You may wish to restore this one to <code>MaxHeap</code></p>
<pre><code>def __getitem__(self, i):
    return self.heap[i].val
</code></pre>
<p>depending on how you intend to use <code>MaxHeap</code>.</p>
<pre><code>import heapq

class MinHeap:
    def __init__(self):
        self.heap = []

    def push(self, item):
        heapq.heappush(self.heap, item)

    def pop(self):
        return heapq.heappop(self.heap)

    def peek(self):
        return self.heap[0]

    def __getitem__(self, item):
        return self.heap[item]

    def __len__(self):
        return len(self.heap)

class MaxHeap(MinHeap):
    def push(self, item):
        heapq.heappush(self.heap, Comparator(item))

class Comparator:
    def __init__(self, val):
        self.val = val

    def __lt__(self, other):
        return self.val &gt; other.val

    def __eq__(self, other):
        return self.val == other.val

    def __repr__(self):
        return repr(self.val)

if __name__ == '__main__':
    max_heap = MaxHeap()
    max_heap.push(12)
    max_heap.push(3)
    max_heap.push(17)

    while True:
        try:
            print(max_heap.pop())
        except IndexError:
            # The heap's empty, bail out
            break
</code></pre>
<p><strong>output</strong></p>
<pre><code>17
12
3
</code></pre>
<p>It's probably a Good Idea to give <code>Comparator</code> the full set of rich comparison methods. They aren't needed to make the above code work, but they will make the <code>Comparator</code> instances more flexible. So in case you want them, here they are:</p>
<pre><code>def __lt__(self, other):
    return self.val &gt; other.val

def __le__(self, other):
    return self.val &gt;= other.val

def __gt__(self, other):
    return self.val &lt; other.val

def __ge__(self, other):
    return self.val &lt;= other.val

def __eq__(self, other):
    return self.val == other.val

def __ne__(self, other):
    return self.val != other.val
</code></pre>
</div>
<span class="comment-copy">But the item stored in the list is a comparator which is weird.</span>
<span class="comment-copy">@MelissaStewart your class needs <a href="https://docs.python.org/3/library/functools.html#functools.total_ordering" rel="nofollow noreferrer"><code>total_ordering</code></a></span>
<span class="comment-copy">Why the downvote?</span>
<span class="comment-copy">@MelissaStewart I made a mistake with the 6 comparison methods at the end of my answer. But they've been fixed now.</span>
