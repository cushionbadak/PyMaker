<div class="post-text" itemprop="text">
<p>I want to have a function in a central package that can create an object given the string name of the class.</p>
<p>I'd like to have something like this:</p>
<pre><code> import utils

 class my_class: ...

 obj = utils.make_class('my_class')
</code></pre>
<p>And then utils looks something like this:</p>
<pre><code> def make_class(class_name):
      cls = globals()[class_name]
      return cls()
</code></pre>
<p>But, of course this doesn't work because my_class is defined in my main module and I'm trying to find it in the utils <code>global()</code></p>
<p>I was hoping there was a way to import <code>make_class()</code> and have it access the namespace of the main module, but this doesn't seem to work. Am I missing something how can I create this centralized factory?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can pass references into your imported callables like this</p>
<p><code>pass_global.py:</code></p>
<pre><code>import pass_global_utils as utils

class A:
    pass

obj = utils.make_obj_from_class('A', globals())
print(obj)
</code></pre>
<p><code>pass_global_utils.py</code>:</p>
<pre><code>def make_obj_from_class(class_, globals_):
    # print(class_)
    # print(globals_)
    return globals_[class_]()
</code></pre>
<p>outputs
<code>&lt;__main__.A object at 0x7fbeba50e278&gt;</code></p>
</div>
<span class="comment-copy">Take a look at <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer">importlib</a> for dynamic imports.</span>
<span class="comment-copy">Can you elaborate on your use case? Why not just make the main module for instantiate? The code shown is obviously an, but factory patterns are actually rare in python. So there might be s much more obvious solution.</span>
