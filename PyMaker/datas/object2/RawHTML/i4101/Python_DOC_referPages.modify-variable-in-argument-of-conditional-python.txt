<div class="post-text" itemprop="text">
<p>I have a while loop that operates on outputs provided by another class, until no outputs are left. </p>
<pre><code>while a.is_next():
   fn(a.get_next())
</code></pre>
<p>Is there a way of checking if a new item exists and. "loading" it at the same time?</p>
<pre><code>while b=a.get_next():
  fn(b)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you're trying to reinvent the <a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow noreferrer">iterator</a>.  Iterators must have two methods: an <code>__iter__</code> method that returns the iterator itself and a <code>__next__</code> method that returns either the next item or raises <code>StopIteration</code>.  For example</p>
<pre><code>class MyIterator:
    def __init__(self):
        self.list = [1, 2, 3]
        self.index = 0
    def __iter__(self):
        return self
    def __next__(self):
        try:
            ret = self.list[self.index]
            self.index += 1
            return ret
        except IndexError:
            raise StopIteration
</code></pre>
<p>That's a lot for that example, but it allows us to use that iterator everywhere Python expects an iterator</p>
<pre><code>for x in MyIterator():
    print(x)

1
2
3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is there a way of checking if a new item exists and. "loading" it at the same time?</p>
</blockquote>
<p>The short answer is no. Python assignments cannot be done in the place of a <code>while</code> loop's conditional statement. However, why not simply reassign the value of <code>a.get_next()</code> to a variable each iteration, and use that as your loops conditional:</p>
<pre><code>b = a.get_next() # get the initial value of b
while b:
    fn(b)
    b = a.get_next() # get the next value for b. If b is 'fasly', the loop will end.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not sure why you want this but you can assign and check if exists in the same statement like:</p>
<pre><code>import itertools as it
for b in (x.get_next() for x in it.repeat(a) if x.is_next()):
    fn(b)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Search for generators, iterators and yield statement.</p>
<p>Code example</p>
<pre><code>class Container:
    def __init__(self,l):
        self.l = l
    def next(self):
        i = 0
        while (i &lt; len(self.l)):
            yield self.l[i]
            i += 1

c = Container([1,2,3,4,5])


for item in c.next():
    print(item, end=" ") # 1 2 3 4 5
</code></pre>
</div>
<span class="comment-copy">This feature is (controversially) <a href="https://www.python.org/dev/peps/pep-0572/" rel="nofollow noreferrer">planned for Python 3.8</a></span>
<span class="comment-copy">Huh, for some weird reason I didn't think of using a for-loop. Good idea. +1. My only objection would be that this is a little sore on the eyes.</span>
<span class="comment-copy">... why not use the iterator protocol?</span>
