<div class="post-text" itemprop="text">
<p>I would like to combine several iterators together, however instead of having a tuple, I would like the values to be "named", as in a <code>dict</code> or a <code>namedtuple</code>. This would allow to gain some abstraction and robustness, since I would not need to knowing exactly what or how many values are returned, and in which order.</p>
<p>Is there a standard way to do this in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>I have not found such a tool in <code>itertools</code>, maybe somewhere else?</p>
<p>In the meantime this behavior could be implemented with this short function:</p>
<pre><code>def dictzip(**kwargs):
  for values in zip(*kwargs.values()):
    yield dict(zip(kwargs.keys(), values))
</code></pre>
<p>Then for example,</p>
<pre><code>&gt;&gt;&gt; name = ['Alice', 'Bob', 'Claire']
&gt;&gt;&gt; age = [11, 22, 33]
&gt;&gt;&gt; email = ['alice@example.com', 'bob@example.com', 'claire@example.com']
&gt;&gt;&gt; for val in dictzip(name=name, age=age, email=email):
...   print('{name} {age} {email}'.format(**val))
...
Alice 11 alice@example.com
Bob 22 bob@example.com
Claire 33 claire@example.com
</code></pre>
<p>This can also be used to iterate over a dictionary, "structure-of-array"-style:</p>
<pre><code>&gt;&gt;&gt; people = {
...    'name': ['Alice', 'Bob', 'Claire'],
...    'age': [11, 22, 33],
...    'email': ['alice@example.com', 'bob@example.com', 'claire@example.com']}
&gt;&gt;&gt; for val in dictzip(**people):
...   print('{name} {age} {email}'.format(**val))
...
Alice 11 alice@example.com
Bob 22 bob@example.com
Claire 33 claire@example.com
</code></pre>
<p><em>(Edited to integrate @YannVernier's suggestion on formatting)</em></p>
</div>
<span class="comment-copy">why not creating a standard <code>dict</code> from the iterators? Like <code>dict(zip(iter1, iter2))</code>? Does it get any more standard than that?</span>
<span class="comment-copy">@Ev.Kounis You probably need to elaborate a bit in an answer. Where are the labels in your solution?</span>
<span class="comment-copy">The keys in that example are in <code>iter1</code>, as the two are combined to form an <a href="https://en.wikipedia.org/wiki/Association_list" rel="nofollow noreferrer">association list</a>.</span>
<span class="comment-copy">A good opportunity for using field names in a <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">format string</a>: <code>'{name} {age} {email}'.format(**val)</code></span>
