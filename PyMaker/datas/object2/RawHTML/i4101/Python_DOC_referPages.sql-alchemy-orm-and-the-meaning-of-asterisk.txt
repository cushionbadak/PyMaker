<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/36901/what-does-double-star-asterisk-and-star-asterisk-do-for-parameters">What does ** (double star/asterisk) and * (star/asterisk) do for parameters?</a>
<span class="question-originals-answer-count">
                    18 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/18027042/confusing-double-usage-of-python-asterisk-notation-as-a-function-argument-or-a">Confusing double usage of python asterisk notation (as a function argument, or as a function definition)</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I'm trying to find out what exactly the asterisk(*) means on the SQLAlchemy query below. Could anyone clarify please?</p>
<pre><code>import uuid
from sqlalchemy import Column
from sqlalchemy import Integer
from sqlalchemy import or_
from sqlalchemy_utils.types.uuid import UUIDType

class House(Base):
    id = Column(Integer, primary_key=True)
    street = Column(UUIDType, default=uuid.uuid4, nullable=False, unique=True)
    zip_code = Column(UUIDType, index=True)

# Shell session
$: [...]
query = request.dbsession.query(House)
query = query.filter(or_(*[(getattr(Building, k) == getattr(self, k))
                          for k in ('street', 'zip_code')
                          if getattr(self, k) is not None]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>or_: produce a conjunction of expressions joined by OR SQL operator.</p>
<p>"*" means that the list produced in epression:</p>
<pre><code>[(getattr(Building, k) == getattr(self, k)) for k in ('street', 'zip_code') if getattr(self, k) is not None]
</code></pre>
<p>will be wrapped up in a tuple before pass in or_.</p>
<p>Simple example (foo can get the variable number of arguments):</p>
<pre><code>def foo(*args):
    print(type(args))
    for a in args:
        print(a)

foo(*[a for a in [1, 2, 3, 4, 5] if a % 2 == 0])
&lt;type 'tuple'&gt;
2
4
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow noreferrer">docs.python.org/3/tutorial/…</a></span>
<span class="comment-copy">See this tutorial about or_: <a href="http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.expression.or_" rel="nofollow noreferrer">docs.sqlalchemy.org/en/latest/core/…</a></span>
<span class="comment-copy">@StanZeez Ah, so its passing a <code>list</code> of clauses to the <code>or_()</code> function, right? <code>or_(instance1.street==instance2.stree, instance1.zip_code==instance2.zip_code)</code>. I get it now. Thanks!</span>
<span class="comment-copy">It doesn't mean anything special in SQLAlchemy.  It's just an unpacking of the list comprehension that follows it into the arguments of <code>or_(...)</code>, which takes one argument for each operand being or'd.</span>
