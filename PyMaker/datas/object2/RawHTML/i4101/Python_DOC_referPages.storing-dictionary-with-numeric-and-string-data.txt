<div class="post-text" itemprop="text">
<p>I have a Python dictionary with some keys/values integers, others strings.</p>
<p>I am looking for a way to store this dictionary as a single file, with the following conditions:</p>
<ol>
<li>Type sensitivity of keys and values are maintained.</li>
<li>I can view the mapping outside of Python.</li>
</ol>
<p>I tried the following solutions, but with no success. Is there a way to do this, preferably without additional storage requirements / manipulation?</p>
<p><strong>Json</strong></p>
<p>Type sensitivity is maintained for values, but not keys:</p>
<pre><code>import json

d = {'key1': 1, 2: '1'}

with open(loc2, 'w') as fp:
    json.dump(d, fp, indent=4)

with open(loc2, 'r') as fp:
    d = json.load(fp)

{'2': '1', 'key1': 1}
</code></pre>
<p><strong>HDF5</strong></p>
<p>HDF5 dataset names must be strings, so this has the same problem as Json:</p>
<pre><code>import h5py

f = h5py.File('file.h5', 'w', libver='latest')

for k, v in d.items():
    f.create_dataset(str(k), data=v)

f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://pyyaml.org/wiki/PyYAMLDocumentation" rel="nofollow noreferrer">Yaml</a>. Install <code>pip install pyyaml</code>.</p>
<pre><code>import yaml

data = {
    'key1': 1,
    1: 2
}

with open('data.yml', 'w') as outfile:
    yaml.dump(data, outfile, default_flow_style=False)
</code></pre>
<p>Output file:</p>
<pre><code>1: 2  
key1: 1
</code></pre>
<p>Reading the file:</p>
<pre><code>with open("data.yml", 'r') as stream:
    data = yaml.load(stream)
    print data[1] # 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can write the file as string</p>
<pre><code>&gt;&gt;&gt; file = open('file.txt', 'w')
&gt;&gt;&gt; file.write(str({'key1': 1, 2: '1'}))
</code></pre>
<p>Then read is back using <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a></p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval(file.read())
&gt;&gt;&gt; {'key1': 1, 2: '1'}
</code></pre>
</div>
<span class="comment-copy"><code>json</code> keys needs to be string. If you are ok to write the file as string you can use something like <code>ast.literal_eval(str({'key1': 1, 2: '1'}))</code>.</span>
<span class="comment-copy">@bro-grammer, But, since we can't write <code>"{'key1': 1, 2: '1'}"</code> via <code>json.dump</code>, does that mean we have to write a custom function to write the dictionary in the specific format? Totally valid solution, but seems messy..</span>
<span class="comment-copy">I mean to say you can write the file using <code>str({'key1': 1, 2: '1'})</code>, then read it back using <code>ast.literal_eval</code>.</span>
<span class="comment-copy">Or you can subclass <a href="https://docs.python.org/3/library/json.html#json.JSONEncoder" rel="nofollow noreferrer">JSONEncoder</a> and <a href="https://docs.python.org/3/library/json.html#json.JSONDecoder" rel="nofollow noreferrer">JSONDecoder</a>.</span>
<span class="comment-copy">@bro-grammer, I understand you now. Never thought of the trivial solution. Feel free to post an answer (I can figure it out myself, but this could help others).</span>
