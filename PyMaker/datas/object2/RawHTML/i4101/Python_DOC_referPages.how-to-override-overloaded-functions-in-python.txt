<div class="post-text" itemprop="text">
<p>(Python squish)
I am overriding the following methods-</p>
<pre><code>installEventHandler(eventName, handlerFunctionName);

installEventHandler(className, eventName, handlerFunctionName);

installEventHandler(object, eventName, handlerFunctionName);
</code></pre>
<p>In my method, </p>
<pre><code>def MyinstallEventHandler(???)
</code></pre>
<p>I am not sure what should I  define in my function, so that I can override all the methods. </p>
<p>When I try to pass *args, its considered as tuple and does not match any of the above methods.</p>
<p>The overloaded methods are that of squish. I want to override the above three methods and I am unable to find any solution to this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Looking at these <a href="https://doc.froglogic.com/squish/6.3/ugs-eventhandlers.html" rel="nofollow noreferrer">examples</a>, it appears that calling <code>installEventHandler(*args)</code>, where <code>args</code> is a tuple of suitable arguments (2 or 3), is sufficient. If you want to create your own <code>installEventHandler</code> which uses other parameters, just create what you want to create and do it so that you may call the original <code>installEventHandler</code>. </p>
<h1>A note about overloading:</h1>
<p>Built-in Python does not allow to handle overloading. However, you may want to use a single dispatch, which allows you to handle simple cases depending on the type of the <strong>first</strong> argument. The <code>singledispatch</code> decorator is implemented in <a href="https://docs.python.org/3/library/functools.html" rel="nofollow noreferrer">functools</a>.</p>
<p>The package <a href="https://pypi.org/project/overloading/" rel="nofollow noreferrer">overloading</a> provides you a more complex support for overloading functions by looking at the types of your arguments. Depending on your Python version, you might need to change some lines in order to preserve <code>typing</code> compatibility.</p>
<p>In your case, it would be impossible to apply these solutions, for your original methods are not decorated with the suitable decorators.</p>
</div>
<span class="comment-copy">Python doesn't have overloaded functions.</span>
<span class="comment-copy">Also, if you pass <code>*args</code>, it's not considered as a tuple; it's expanded into separate arguments. For example, <code>args = [1,2,3]; f(*args)</code> calls <code>f(1, 2, 3)</code>. You may be mixing up what happens when you <i>accept</i> <code>*args</code> in your <code>def</code>. In that case, you <i>do</i> get all the arguments as a tupleâ€”but to then pass them on as separate arguments, you just use <code>*args</code> again in the call. Which may be exactly what you're looking for here.</span>
<span class="comment-copy">Seems like <code>eventName</code> and <code>handlerFunctionName</code> are both mandatory; perhaps a single function that accepts <code>className</code> or <code>object</code> as optional argument (defaulting to <code>None</code>)?</span>
