<div class="post-text" itemprop="text">
<p>Is there any alternative one liner for this simple code block:</p>
<pre><code>n = int(input())
for i in range(n):
    print(i**2)
</code></pre>
<p>I tried:</p>
<pre><code>print(i**2 for i in range(int(input())))
</code></pre>
<p>It takes an input, but gives the following error:</p>
<pre><code>&lt;generator object &lt;genexpr&gt; at 0x00000000032D3E60&gt;
</code></pre>
<p>My problem is a little bit different than <a href="https://stackoverflow.com/questions/5164642/python-print-a-generator-expression">this qs</a>. That qs helped print items in a list whether I need print them in newline.</p>
</div>
<div class="post-text" itemprop="text">
<p>As Jon and Patrick mention, that's not an error, it's what happens when you print the <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer"><code>__repr__</code></a> of a generator expression.</p>
<p>So you just need to <a href="https://docs.python.org/3/reference/expressions.html#expression-lists" rel="nofollow noreferrer">"splat"</a> that generator. :)</p>
<pre><code>print(*(i**2 for i in range(int(input()))), sep='\n')
</code></pre>
<p><strong>demo output</strong></p>
<pre><code>10
0
1
4
9
16
25
36
49
64
81
</code></pre>
<p>In that demo I entered <code>10</code> at the <code>input</code> prompt.</p>
<hr/>
<p>In the comments I wondered how the speed of <code>i * i</code> compares to <code>i ** 2</code>. On my old 2GHz 32 bit single core machine, running Python 3.6.0, <code>i * i</code> is around 3 or 4 times faster than <code>i ** 2</code>. Here's some <code>timeit</code> code.</p>
<pre><code>from timeit import Timer

commands = {'mul' : 'num * num', 'pow' : 'num ** 2'}

def time_test(num, loops, reps):
    timings = []
    setup = 'num = {}'.format(num) 
    for name, cmd in commands.items():
        result = Timer(cmd, setup).repeat(reps, loops)
        result.sort()
        timings.append((result, name))

    timings.sort()
    for result, name in timings:
        print(name, result)

loops, reps = 100000, 3
num = 1
for _ in range(10):
    print('num =', num)
    time_test(num, loops, reps)
    num &lt;&lt;= 1
</code></pre>
<p><strong>output</strong></p>
<pre><code>num = 1
mul [0.02114695899945218, 0.02127135100090527, 0.02303983199817594]
pow [0.08504067399917403, 0.08687452600133838, 0.12349813100081519]
num = 2
mul [0.02089159800016205, 0.021789606998936506, 0.02889108999806922]
pow [0.08612996800002293, 0.09132789800059982, 0.09559987299871864]
num = 4
mul [0.021155500999157084, 0.02333696799905738, 0.028521009000542108]
pow [0.08492234799996368, 0.08499632499660947, 0.08537705599883338]
num = 8
mul [0.02173021600174252, 0.021955170999717666, 0.02823427400289802]
pow [0.08423048700205982, 0.08541251700080466, 0.08654486299928976]
num = 16
mul [0.02176373900147155, 0.02222509399871342, 0.02816650199747528]
pow [0.08528696699795546, 0.09080051600176375, 0.0968476650014054]
num = 32
mul [0.03118283900039387, 0.03388790600001812, 0.03745272100059083]
pow [0.0943321790000482, 0.09484523300125147, 0.09691544299857924]
num = 64
mul [0.030481540998152923, 0.03292956899895216, 0.03887743200175464]
pow [0.09454960600123741, 0.09569520199875114, 0.09926063899911242]
num = 128
mul [0.030935312999645248, 0.031198748001770582, 0.03733277300125337]
pow [0.09531564099961543, 0.09669112700066762, 0.09679062199938926]
num = 256
mul [0.03280377900227904, 0.03324341500047012, 0.04479783699935069]
pow [0.09439349899912486, 0.09439918999851216, 0.09548852000079933]
num = 512
mul [0.03275527599907946, 0.03428718699797173, 0.038492286003020126]
pow [0.10492119499758701, 0.10698100599984173, 0.13057717199990293]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should wrap the expression into <code>[]</code> in order to have a <code>list comprehension</code>.</p>
<pre><code>print([i**2 for i in range(int(input()))])
</code></pre>
<p>If you want to print the results line by line just use <code>extended iterable unpacking operator</code>.</p>
<pre><code>print(*[i**2 for i in range(int(input()))], sep = '\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is no error. Your statement inside the <code>print(...)</code> is a generator expression - the string representation of it is printed - thats what you deemed an "error".</p>
<p>You can convert it by feeding it into a list:</p>
<pre><code>print(list(i**2 for i in range(int(input()))))
</code></pre>
<p>or by iterating it:</p>
<pre><code>print(*(i**2 for i in range(int(input()))))
</code></pre>
<p>The last one will lead to an output (for <code>input() = 5</code>) of:</p>
<pre><code>0 1 4 9 16
</code></pre>
<p>as each result of the generator is passed to print and printed with the default <code>sep=' '</code> which you could change to <code>'\n'</code> - see PM 2Ring's post</p>
</div>
<div class="post-text" itemprop="text">
<p>This prints each <code>i**2</code> on a separate line as your code does:</p>
<pre><code>print('\n'.join(str(i**2) for i in range(int(input()))))
</code></pre>
</div>
<span class="comment-copy">That's <b>not</b> an error, that's the representation of the object you're passing to <code>print</code>. You <i>could</i> do something like <code>[print(i**2) for i in range(int(input()))]</code>, but using list comprehensions for side effects is generally discouraged; <code>for i in range(int(input())): print(i**2)</code> is fine.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/5164642/python-print-a-generator-expression">Python: print a generator expression?</a></span>
<span class="comment-copy">This is exactly what's needed, prints them in newline as wanted.</span>
<span class="comment-copy">@michaelpetronav Glad you like it. :) BTW, I'd probably use <code>i*i</code> rather to compute a square, rather than the general-purpose power operator. It's slightly shorter to type, but I don't know if there's a measurable difference in execution speed.</span>
<span class="comment-copy">That speed comparison test for i*i and i**2 could be a good thing to ask here. I tried to check with big numbers, but to no avail.</span>
<span class="comment-copy">@michaelpetronav On my machine, <code>i * i</code> is around 3 or 4 times faster than <code>i ** 2</code>. I added some <code>timeit</code> code &amp; output to the end of my answer.</span>
<span class="comment-copy">@jonrsharpe Mihai has fixed that.</span>
<span class="comment-copy">BTW, it's actually more efficient to pass <code>.join</code> a list comp than a generator expression because it has to scan the collection of strings to be joined twice: the first time determines the total size of the destination string, the second scan performs the copying. So if you pass it a gen exp it has to save the output of the gen exp so it can perform those 2 scans.</span>
