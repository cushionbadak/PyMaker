<div class="post-text" itemprop="text">
<p>How to compile a whole Python library along with it's dependencies so that it can be used in C (without invoking Python's runtime). That is, the compiled code has the Python interpreter embedded and Python does not need to be installed on the system.</p>
<p>From my understanding, when Python code is compiled using Cython it:</p>
<ul>
<li>Does not invoke the python runtime if the <code>--embed</code> argument is used</li>
<li>Compiles files individually</li>
<li>Allows for different modules to be called (from the Python runtime / other compiled Cython files)</li>
</ul>
<p>The question which are still unclear are:</p>
<ul>
<li>How to use these module files from C? Can the compiled Python files call other compiled Python files when used in C?</li>
<li>Does only the library entry point need to be declared or do all functions need to be declared? </li>
<li>How to manage the Python dependencies? how to compile them too (so that the Python runtime is not needed). </li>
</ul>
<p>A simplified example for a python library called <code>module</code> where <code>__init__.py</code> is an empty file:</p>
<pre><code>module/
├── run.py
├── http/
│   ├── __init__.py
│   ├── http_request.py
</code></pre>
<p><code>http_requests.py</code> contains:</p>
<pre><code>import requests

def get_ip():
    r = requests.get('https://ipinfo.io/ip')
    print(r.text)
</code></pre>
<p>and <code>run.py</code> contains the following:</p>
<pre><code>from http import http_request

if __name__ == '__main__':
    http_request.get_ip()
</code></pre>
<p>How to call the function <code>get_ip</code> from C without using the Python runtime (needing to have Python installed when running the application).</p>
<p>The above example is very simple. The actual use case is collecting/processing robotics data in C at a high sampling rate. Whilst C is great for basic data processing there are excellent Python libraries which allow for much more comprehensive analysis. The objective would be to call the Python libraries on data which has been partially processed in C. This would allow us to get a much more detailed understanding of the data (and process it in "real time"). The data frameworks are way too large for our team to rewrite in C.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How to compile a whole Python library along with it's dependencies so that it can be used in C (without invoking Python's runtime). </p>
</blockquote>
<p><strong>This is impossible</strong> in general. Python code is practically expected to run on a Python interpreter.</p>
<p>Sometimes, when only a small subset of Python is used (even <em>indirectly</em> by everything your Python code is using) you might use <a href="http://cython.org/" rel="nofollow noreferrer">Cython</a> (which is actually a superset of a small subset of Python: a lot of genuine Python features cannot be used from Cython, or uses the Python interpreter). But not every Python code can be cythonized, since Python and C have a very different (and incompatible) <a href="https://en.wikipedia.org/wiki/Semantics_(computer_science)" rel="nofollow noreferrer">semantics</a> (and <a href="https://en.wikipedia.org/wiki/Memory_management" rel="nofollow noreferrer">memory management</a>).</p>
<p>Otherwise (and most often), the C code using your Python stuff should <a href="https://docs.python.org/3/extending/index.html" rel="nofollow noreferrer">embed the Python interpreter</a>.</p>
<p>A wiser and more robust approach, if your goal is to make a self-sufficient C library usable from many C programs (on systems without Python), is to <strong>rewrite your code in C</strong>. </p>
<p>You could also consider starting (in your C library) some Python process (server-like, doing your Python stuff) and using <a href="https://en.wikipedia.org/wiki/Inter-process_communication" rel="nofollow noreferrer">inter-process communication</a> facilities, that would be operating system specific. Of course Python needs to be installed on the system of the application using your library. For example, for Linux, you might fork some Python process in your library, and use <a href="http://man7.org/linux/man-pages/man7/pipe.7.html" rel="nofollow noreferrer">pipe(7)</a> or <a href="http://man7.org/linux/man-pages/man7/unix.7.html" rel="nofollow noreferrer">unix(7)</a> sockets to communication from the C library to that process (perhaps using something like <a href="http://jsonrpc.org/" rel="nofollow noreferrer">JSONRPC</a>).</p>
<p>Your edit (still not an <a href="https://stackoverflow.com/help/mcve">MCVE</a>) shows some HTTP interaction done in Python. You could consider doing that in C, with the help of HTTP client libraries in C like <a href="https://curl.haxx.se/libcurl/" rel="nofollow noreferrer">libcurl</a>, or (if so needed) of HTTP server libraries like <a href="https://www.coralbits.com/libonion/" rel="nofollow noreferrer">libonion</a>.</p>
<p>So consider rewriting your stuff in C but using several <em>existing</em> C libraries (how and what to choose is a very different question, probably <a href="https://stackoverflow.com/help/on-topic">off-topic on StackOverflow</a>). Otherwise, accept the dependencies on Python.</p>
<blockquote>
<p>The actual use case is collecting/processing robotics data in C at a high sampling rate. Whilst C is great for basic data processing there are excellent Python libraries which allow for much more comprehensive analysis. </p>
</blockquote>
<p>You could keep high-level things in Python (see <a href="https://softwareengineering.stackexchange.com/a/370146/40065">this</a>) but recode low level things in C to accelerate them (many software are doing that, e.g. TensorFlow, ...), perhaps as <a href="https://docs.python.org/3/extending/extending.html" rel="nofollow noreferrer">extensions in C for Python</a> or in some other process. Of course, that means some development efforts. I don't think that avoiding Python entirely is reasonable (getting rid of Python entirely is not pragmatical), if you use a lot of code in Python. BTW, you might perhaps consider embedding some other language in your C application (e.g. Lua, Guile, Ocaml - all of them are rumored to be faster than Python) and keep Python for the higher level, running in some other process.</p>
<p>You need to put more efforts on the architectural design of your thing. I'm not sure that avoiding Python entirely is a wise thing to do. Mixing Python and C (perhaps by having <em>several</em> processes cooperating) could be wiser. Of course you'll have operating system specific stuff (notably on the C side, for inter process communication). If on Linux, read something about Linux system programming in C, e.g. <a href="http://www.cse.hcmut.edu.vn/~hungnq/courses/nap/alp.pdf" rel="nofollow noreferrer">ALP</a> or something newer.</p>
</div>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/questions/15844383/compiling-python-into-a-shared-library">Compiling python into a shared library</a></span>
<span class="comment-copy">What is your Python library doing? What python features, modules and primitives does it use? Show if possible some <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> in your question. So <b>edit your question</b> to improve it</span>
<span class="comment-copy">@BasileStarynkevitch I've updated the post and included a simple example of a Python library which I would like to call from C without using the Python runtime.</span>
<span class="comment-copy">You should explain in your question why exactly you want to avoid the Python runtime and interpreter.. You should also give more context, and explain what is your library doing. Without more explanations your question is <b>unclear</b>. Please edit it again.</span>
<span class="comment-copy">For your use case, it's practically impossible and/or silly. Why are you/your collaborators writing C code to integrate with this? If it's going to be in an embedded system just write all C code and ditch Python. If it's for some higher level usage just write the whole thing in Python.</span>
<span class="comment-copy"><code>But not every Python code can be cythonized</code>: I thought that because Cython is a superset of Python all Python code can be Cythonized?</span>
<span class="comment-copy">You probably thought naively, but indeed the Cython site is a bit optimistic... Cython is a superset of a subset of Python</span>
<span class="comment-copy">I'd argue with your description of Cython. It isn't perfectly compatible but the vast majority of Python code <i>should</i> work unchanged. It still does this by calling libpython though so it isn't really translating to C.</span>
<span class="comment-copy">@BasileStarynkevitch - Your assertions regarding Cython are incorrect. In fact, it is more compatible with Python code than the python interpreter itself as it supports all python syntax from 2.6 - 3.5 and can generate equivalent C-API code for it. What superset it may or may not support is irrelevant when discussing pure python code.</span>
