<div class="post-text" itemprop="text">
<p>My text file named test.txt is like below.</p>
<pre><code>[['A', 3.992303979497981], ['V', 2.2251878737397264], ['V', 2.703754348429766], ['A', 3.900215472550781], ['A', 4.99003388996634]
[['C', 3.5329528530441805], ['A', 1.1530906322097374], ['A', 2.666421771048816], ['V', 1.2859199105217558], ['B', 0.40879871489389696]
</code></pre>
<p>From another file code.py, How can I read the each line as a list with only values?
mean I want to get the values in a mylist like</p>
<pre><code>mylist = [[[A],[V],[V],[A],[A]],
          [[C],[A],[A],[V],[B]]]
</code></pre>
<p>I tried doing below but It is not working.</p>
<pre><code>import ast
with open('test.txt', 'r') as fp:
    mylisttrain = [ast.literal_eval(line) for line in fp]

price=[]
for x in range(0,2):
    for y in range(0,10):
        price.append([mylisttrain[x][y][0]])
</code></pre>
<p>It gives output like</p>
<pre><code>[[A],[V],[V],[A],[A],
 [C],[A],[A],[V],[B]]
</code></pre>
<p>But, I want output like this.</p>
<pre><code>[[[A],[V],[V],[A],[A]],
 [[C],[A],[A],[V],[B]]]
</code></pre>
<p>I want each line of input to be in a sub-list of its own.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a nested list comprehension to retain the structure of the input:</p>
<pre><code>import ast
new_s = [ast.literal_eval(line.strip('\n')+']') for line in open('filename.txt')]
final_data = [[[a] for a, _ in i] for i in new_s]
</code></pre>
<p>Output</p>
<pre><code>[[['A'], ['V'], ['V'], ['A'], ['A']], [['C'], ['A'], ['A'], ['V'], ['B']]]
</code></pre>
<p>However, instead of a list comprehension, you can create a temporary list before your inner <code>for</code> loop to store the result of grabbing the first character:</p>
<pre><code>price=[]
for i in mylisttrain:
   temp = []
   for a, _ in i:
     temp.append([a])
   price.append(temp)
</code></pre>
<p>Edit: to remove the brackets, you can use additional unpacking:</p>
<pre><code>a, b = price
print(a)
print(b)
</code></pre>
<p>Output:</p>
<pre><code>[['A'], ['V'], ['V'], ['A'], ['A']]
[['C'], ['A'], ['A'], ['V'], ['B']]
</code></pre>
</div>
<span class="comment-copy">Why aren't you using a pre-existing text-based serialization format like JSON instead of dumping the <code>str</code> representation of lists to a file?</span>
<span class="comment-copy">Are you creating this file? If so, it's a bad idea to try to use <code>repr</code> (or <code>str</code>) and <code>literal_eval</code> as a data file format. Much better to use something like JSONLines, or one big JSON array.</span>
<span class="comment-copy">It would be a great help if you can provide code because I do not have any idea about json.</span>
<span class="comment-copy">To write a file: <code>with open('test.txt', 'w') as f: json.dump(mylisttrain, f)</code>. To read a file: <code>with open('test.txt') as f: mylisttrain = json.load(f)</code>. See the more detailed examples in <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">the docs</a>, but really, that's all you need to get started.</span>
<span class="comment-copy">That's a really hacky—and fragile—idea. (I suppose if the first bug convinces the OP to stop using <code>repr</code> as a persistence format, that might be a good thing…)</span>
<span class="comment-copy">It says invalid syntax</span>
<span class="comment-copy">@ViralPatel Can you specify where the error is occurring?</span>
<span class="comment-copy">Traceback (most recent call last):   File "temp.py", line 2, in &lt;module&gt;     new_s = [ast.literal_eval(line+']') for line in open('test.txt')]   File "C:\Python27\lib\ast.py", line 49, in literal_eval     node_or_string = parse(node_or_string, mode='eval')   File "C:\Python27\lib\ast.py", line 37, in parse     return compile(source, filename, mode, PyCF_ONLY_AST)   File "&lt;unknown&gt;", line 2     ]     ^ SyntaxError: invalid syntax</span>
<span class="comment-copy">@ViralPatel If the first solution with the list comprehension does not work for you, I added another possibility that merely tweaks your current code.</span>
