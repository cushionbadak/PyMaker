<div class="post-text" itemprop="text">
<p>For the last 6 months I have been learning python and practicing with the logic of python. However, as I continue to become more advanced, I find that I just have more and more to learn. One question that I have encountered is how to work with multiple files in one project. An example of what I am trying to do is: If i have a solution that is running predictive analysis on stock data being scraped from the web, and I want to compare these results with SP500 data, I am currently using two different projects and comparing the data by hand. As you can imagine this is extremely inefficient and leads to more errors than benefits. When learning C# and VB.NET in visual studios, there was a way to create multiple forms for a GUI, and reference those forms from other forms. While I know this is not the same as what I am trying to ask, I am wondering if there is a way to work with multiple .py files in one solution, each having their own logic, and reference these different files from other files. </p>
</div>
<div class="post-text" itemprop="text">
<p>I focus only on your core problem:</p>
<blockquote>
<p>If I have a solution that is running predictive analysis on stock data
  being scraped from the web, and I want to compare these results with
  SP500 data, I am currently using two different projects and comparing
  the data by hand.</p>
</blockquote>
<p>My advice is not to combine different projects <em>for the sake of comparing output</em>. Don't let any interface or environment <em>decide</em> how you structure your code.</p>
<p>Code structure is dependent on <em>what you are actually doing</em>. If you need to compare outputs of 2 different classes from different projects, write a script to calculate and compare results from your 2 classes:</p>
<p><strong>comparer.py</strong>:</p>
<pre><code>import Class1
import Class2

Class1Instance = Class1.ClassOne()
Class2Instance = Class2.ClassTwo()

res1 = Class1Instance.get_results()
res2 = Class2Instance.get_results()

def compare_results(x, y):
    return func(x, y)

compare_results(res1, res2)
</code></pre>
<p>If there are specific tests your scripts should satisfy, consider using <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer"><code>unittest</code></a> from the standard library.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you had a file like start.py and then things.py held functions, objects, or classes...</p>
<p>start.py</p>
<pre><code>import things
from things import config

things.printline(config)
</code></pre>
<p>things.py</p>
<pre><code>config = 'This is a variable assignment'

def printline(line):
    print(line)
    return line
</code></pre>
<p>It's really that easy.  You can also store several files into a directory and just import the directory the same way, you just need to have an empty <code>__init__.py</code> file in it.  Your import would be </p>
<pre><code>import folder.nameofmodule
</code></pre>
</div>
<span class="comment-copy">There is an <code>import</code> system that you can use to logically separate code into different files and import into a single, master, script.</span>
<span class="comment-copy"><a href="https://www.digitalocean.com/community/tutorials/how-to-import-modules-in-python-3" rel="nofollow noreferrer">Let me google that for you</a></span>
<span class="comment-copy">if i understand what you are saying correctly, you are suggesting writing 2 separate scripts to for the logic, and then writing a 3rd script to compare the 2 scripts?</span>
<span class="comment-copy">My understanding is you <i>already have</i> 2 different projects: "I am currently using two different projects." If you need to write a <code>unittest</code> and perform other testing functions, comparing 2 other projects, then yes, that's absolutely a good reason for a 3rd project/script.</span>
<span class="comment-copy">Would there possibly be a way to say run the script holding the logic, and then have a separate script for my graphs and run those asynch?</span>
<span class="comment-copy">Sure, that is what Gevent and AsyncIO are for.</span>
