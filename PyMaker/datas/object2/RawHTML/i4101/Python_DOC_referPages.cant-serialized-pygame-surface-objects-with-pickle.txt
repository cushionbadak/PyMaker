<div class="post-text" itemprop="text">
<p>I am developing a game with python 3.6, I want in its multiplayer version to send to the server objects modified by the client ( the player) I thought to serialize them for transfer. I use pygame and thus pygame.Surface in my objects</p>
<p>I have objects with this structure:</p>
<pre class="lang-py prettyprint-override"><code>class Cargo(Bateau):
  dictCargos = dict()
  def __init__(self, map, nom, pos, armateur=None):
    Bateau.__init__(self, map, nom, armateur, pos)
    self.surface = pygame.image.load(f"images/{self.nom}.png").convert_alpha()
    self.rect = self.map.blit(self.surface, self.pos)
    ...
    Cargo.dictCargos[self.nom] = self
</code></pre>
<p>When I serialize another object without pygame instance it's ok
But with the object described above I get this error message:</p>
<pre class="lang-py prettyprint-override"><code>import pickle as pickle
pickle.dump(Cargo.dictCargos, open('file2.pkl', 'wb'), protocol=pickle.HIGHEST_PROTOCOL)

Traceback (most recent call last):
  File "./pytransit.py", line 182, in &lt;module&gt;
    encreG(joueur, event)
  File "/home/patrick/Bureau/PyTransit/modulesJeu/tests.py", line 25, in encreG
    pickle.dump(Cargo.dictCargos, open('file2.pkl', 'wb'), protocol=pickle.HIGHEST_PROTOCOL)
TypeError: can't pickle pygame.Surface objects
</code></pre>
<p>Do you have any idea how to transport these items to the server. Or bypass this pickle restriction?<br/>
The same problem would arise if I wanted to save a part, so save these objects</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an example of what @IonicSolutions pointed to in the comments:</p>
<pre><code>import pickle
import pygame


class Test:
    def __init__(self, surface):
        self.surface = surface
        self.name = "Test"

    def __getstate__(self):
        state = self.__dict__.copy()
        surface = state.pop("surface")
        state["surface_string"] = (pygame.image.tostring(surface, "RGB"), surface.get_size())
        return state

    def __setstate__(self, state):
        surface_string, size = state.pop("surface_string")
        state["surface"] = pygame.image.fromstring(surface_string, size, "RGB")
        self.__dict__.update(state)


t = Test(pygame.Surface((100, 100)))
b = pickle.dumps(t)
t = pickle.loads(b)

print(t.surface)
</code></pre>
<p>To see what modes you can use to store the data as a string (here "RGB") look <a href="https://www.pygame.org/docs/ref/image.html#pygame.image.tostring" rel="nofollow noreferrer">into the documentation</a></p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/18413963/pickle-saving-pygame-surface-python">pickle saving pygame Surface (python)</a></span>
<span class="comment-copy">Since you cannot pickle the Surface objects, you need to find a way to remove them before pickling and to re-create them afterwards. For this, I suggest you look at <a href="https://docs.python.org/3/library/pickle.html#pickle-state" rel="nofollow noreferrer">Handling Stateful Objects</a> in the <code>pickle</code> documentation. I've used this in the past to <a href="https://github.com/ionicsolutions/pyfecs/blob/master/objects/_object.py" rel="nofollow noreferrer">deal with file logging handlers</a>, which is very similar to your problem.</span>
<span class="comment-copy">Could you tell us why you want to send surfaces? What is actually going on in your game? The question sounds a bit like an <a href="http://xyproblem.info" rel="nofollow noreferrer">XY problem</a> and there could be a better way to achieve what you want. Also, note that unpickling data from untrusted sources is a huge security risk, so pickle shouldn't be used in a multiplayer game.</span>
<span class="comment-copy">"BTW" means "by the way" and if you write @username in a comment, the user will see the little red new comment icon in the top bar. I only saw your previous comments because I still had this tab open.</span>
<span class="comment-copy">You could use the <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">JSON</a> format if you only send the position and other simple data types that can be serialized with the json module. I'd avoid sending surfaces, since they can be pretty large.</span>
<span class="comment-copy">It's clearer with a concrete example... Just a question: I use .convert_alpha(), in your example you write that  (surface_string, size, "RGB") do I have to replace RGB with alpha or something else?</span>
<span class="comment-copy">@patol I edited, you probably need <code>"RGBA"</code></span>
