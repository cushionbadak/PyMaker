<div class="post-text" itemprop="text">
<p>I get this error from PyCharm:
<strong>WindowsError: exception: access violation reading 0x000000504D414C43</strong></p>
<p>It only occurs in Pycharm. When I run the python script from Windows Powershell, it says <strong>WindowsError: [Error 193] %1 is not a valid Win32 application</strong>. I checked the debugger and a value is being passed but it errors out sometimes gives me null pointers. At first, I thought I was running off the array, but even if I just return 7 (As you see at the bottom) and comment out all of the code it will still do as described.</p>
<p>Questions:</p>
<p>1) Do you have any solutions?</p>
<p>2) Did I set up the DLL properly?</p>
<p>3)Any suggestions?</p>
<p>Thank you so much for your help. </p>
<p>Here is my C++ code:</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;array&gt;

#include "external_lists.h"

extern creation_object A1[];
extern creation_object  A2[];
extern int A1size;
extern int A2size;


#define DLLEXPORT extern "C" __declspec(dllexport)

DLLEXPORT int get_creation_data(std::string needed_name){

int A1_size = ( A1size/ sizeof(A1[0])) ;

int A2_size = ( A2size / sizeof(A2[0]))  ;

for (int i = 0; i &lt; A1_size; i++) {
    if (A1[i].name == needed_name) 
    { 
    return A1[i].value-&gt;section; 
    }
}
return 7;
}
</code></pre>
<p>Here is my python wrapper:</p>
<pre><code>import os, sys, re
from ctypes import *

def get_creation_values(value_name):
  trimdll = CDLL('C:\\Documents\\creation.dll')
  return valuedll.get_creation_data(value_name)

if __name__ == "__main__":
  val = get_value('CLAMP')
  print(val)
</code></pre>
<p>Overall goal:</p>
<p>I have a large file I cannot modify but need to access in C++. There are large lists in the C++ file and I need to iterate through those lists and return a value to a python script. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>ctypes</code> only understands C types.  You can pass a byte string as <code>const char*</code> and assign it to a <code>std::string</code> if needed.  Here's a complete, working example:</p>
<p><strong>C++ code</strong> (test.cpp)</p>
<pre><code>#include &lt;string&gt;

#define DLLEXPORT extern "C" __declspec(dllexport)

DLLEXPORT int get_creation_data(const char* name) {
    std::string needed_name(name);
    if(needed_name == "Armaja")
        return 1;
    return 0;
}
</code></pre>
<p><strong>Python code</strong></p>
<pre><code>from ctypes import *

def get_creation_values(value_name):
  trimdll = CDLL('test')
  trimdll.get_creation_data.argtypes = [c_char_p]
  trimdll.get_creation_data.restype = c_int
  return trimdll.get_creation_data(value_name)

if __name__ == "__main__":
  val = get_creation_values(b'Armaja')
  print(val)
</code></pre>
<p>Output:</p>
<pre><code>1
</code></pre>
<p>Note how the argument types and return value of the DLL function can be specified.  That helps catch errors.  For example, try passing a Unicode string <code>'Armaja'</code> instead of the byte string <code>b'Armaja'</code> (Python 3 syntax):</p>
<pre><code>Traceback (most recent call last):
  File "C:\test.py", line 10, in &lt;module&gt;
    val = get_creation_values('Armaja')
  File "C:\test.py", line 7, in get_creation_values
    return trimdll.get_creation_data(value_name)
ctypes.ArgumentError: argument 1: &lt;class 'TypeError'&gt;: wrong type
</code></pre>
</div>
<span class="comment-copy">Ctypes only understands C types. You can't use std::string in the function signature.</span>
<span class="comment-copy">Hi, Thank you I don't see the error anymore and I understand now the arguments expect a C Type when it comes to DLLs. Could you please explain these  lines: ' trimdll.get_creation_data.argtypes = [c_char_p]   trimdll.get_creation_data.restype = c_int '</span>
<span class="comment-copy">Also, do you know if there is a way to return an object? Since C types only seems to know primitive types, is that possible ? Thank you once again.</span>
<span class="comment-copy">The <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">ctypes documentation</a> documents <a href="https://docs.python.org/3/library/ctypes.html#specifying-the-required-argument-types-function-prototypes" rel="nofollow noreferrer">argtypes</a> and <a href="https://docs.python.org/3/library/ctypes.html#return-types" rel="nofollow noreferrer">restype</a>.  The first is a list of the argument types for the function, and the second is the return type.  <code>ctypes</code> only handles C types, so you can't return an object.  It is possible to create a C interface to a C++ object.  Tools like <a href="http://www.swig.org/" rel="nofollow noreferrer">SWIG</a> can automate this.</span>
