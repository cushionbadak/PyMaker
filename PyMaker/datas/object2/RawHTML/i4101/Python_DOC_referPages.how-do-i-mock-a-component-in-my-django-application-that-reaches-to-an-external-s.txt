<div class="post-text" itemprop="text">
<p>I have a method that reaches out to an external API and pulls in some content, then it performs some logic and proceeds. The problem is, while testing, I don't want my test cases to trigger this external API but I do want it to mock the response. Example</p>
<pre><code>def create_animals(candidate):
    if ExternalService.get_candidate_validity(candidate):
         print('Things are good, go ahead')
         #creates the animal objects etc....
</code></pre>
<p>But <code>ExternalService.get_candidate_validity</code> reaches out to an API that I want to mock. I know I can mock instances if it's like this:</p>
<pre><code>get_candidate_validity_value = {'response': True}
c = ExternalService('someparamsthatineed')
c.get_candidate_validity = MagicMock(return_value=get_candidate_validity_value)
</code></pre>
<p>But how do I handle cases where the class is instantiated in a method that I end up calling to test? </p>
</div>
<div class="post-text" itemprop="text">
<p>If you had a python module <code>animals.py</code> that had this:</p>
<pre><code>def create_animals(candidate):
    if ExternalService.get_candidate_validity(candidate):
         print('Things are good, go ahead')
         #creates the animal objects etc....
</code></pre>
<p>You would mock it out this way in <code>test_animals.py</code></p>
<pre><code>from mock import MagicMock  # or import mock from stdlib unittest in python 3

def test_create_animals():
    from path.to.animals import ExternalService, create_animals
    ExternalService.get_candidate_validity = MagicMock(return_value=True)
    animals = create_animals('foo')
    ExternalService.get_candidate_validity.assert_called_with('foo')
</code></pre>
<p>It is a best practice in unit testing to mock out all external services somehow so you're testing the unit, ie the function being tested, and nothing else.</p>
<p>Another way to do this is to use the <code>patch</code> functionality in the standard unit testing library.</p>
<p><a href="https://docs.python.org/3/library/unittest.mock.html#attaching-mocks-as-attributes" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock.html#attaching-mocks-as-attributes</a></p>
<pre><code>&gt;&gt;&gt; with patch('animals.ExternalService') as MockClass:
...     MockClass.get_candidate_validity.return_value = 'foo'
</code></pre>
</div>
