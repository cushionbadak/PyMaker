<div class="post-text" itemprop="text">
<p>/Users/smcho/Desktop/bracket/[10,20] directory has "abc.txt", but when I run this Python code</p>
<pre><code>import glob
import os.path

path1 = "/Users/smcho/Desktop/bracket/\[10,20\]"
pathName = os.path.join(path1, "*.txt")
print glob.glob(pathName)
</code></pre>
<p>It returns an empty list. </p>
<ul>
<li>Can't Python's glob handle the bracket letters or others?</li>
<li>Is there any way to solve this problem?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The brackets in <code>glob</code> are used for character classes (e.g. <code>[a-z]</code> will match lowercase letters). You can put each bracket in a character class to force them being matched:</p>
<pre><code>path1 = "/Users/smcho/Desktop/bracket/[[]10,20[]]"
</code></pre>
<p><code>[[]</code> is a character class containing only the character <code>[</code>, and <code>[]]</code> is a character class containing only the character <code>]</code> (the closing bracket can be placed in a character class by putting it in the first position).</p>
<p>Additionally, since brackets aren't escaped in string literals, your code will look for a backslash as well as a bracket.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>glob</code> uses <code>fnmatch</code> under the hood. You could use it directly:</p>
<pre><code>import fnmatch, os

names = os.listdir("/Users/smcho/Desktop/bracket/[10,20]")
print fnmatch.filter(names, '*.txt')
</code></pre>
<p>Or using (non-public) <code>glob.glob1()</code> (it is present at least in Python 2.3+ including Python 3):</p>
<pre><code>import glob

print glob.glob1("/Users/smcho/Desktop/bracket/[10,20]", '*.txt')
</code></pre>
<p>Here's the implementation of <a href="http://svn.python.org/view/python/trunk/Lib/glob.py?view=markup" rel="nofollow noreferrer"><code>glob.glob1</code></a>:</p>
<pre><code>def glob1(dirname, pattern):
    if not dirname:
        dirname = os.curdir
    if isinstance(pattern, unicode) and not isinstance(dirname, unicode):
        dirname = unicode(dirname, sys.getfilesystemencoding() or
                                   sys.getdefaultencoding())
    try:
        names = os.listdir(dirname)
    except os.error:
        return []
    if pattern[0] != '.':
        names = filter(lambda x: x[0] != '.', names)
    return fnmatch.filter(names, pattern)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.4 you can use <a href="https://docs.python.org/3.4/library/glob.html#glob.escape" rel="nofollow noreferrer"><code>glob.escape</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>path.replace('[', '[[]')</code> to have arbitrary input paths handled by <code>glob</code> correctly.</p>
</div>
<span class="comment-copy">@Roger: Thanks, I've fixed it.</span>
<span class="comment-copy">@~unutbu: No, <code>[[10,20]]</code> will look for one of the characters in <code>[102,</code> followed by <code>]</code>. I didn't just double the brackets but created a character class: <code>[[]</code> is a character class containing only the character <code>[</code>.</span>
<span class="comment-copy">Ah yes. You are correct. Thanks for the explanation.</span>
<span class="comment-copy">so doing glob.glob(glob.escape(pathName))?! I still get an empty list</span>
<span class="comment-copy">then your <code>pathName</code> is just wrong. if it's a relative path, double check your working directory is the one you think it is: <a href="https://docs.python.org/3/library/os.html#os.getcwd" rel="nofollow noreferrer"><code>os.getcwd()</code></a></span>
<span class="comment-copy">seems that escape is not working correct. <code>glob.escape('[P]ISBN_4\Image\0001')</code> produces "[[]P]ISBN_4\Image1" for some reason...</span>
<span class="comment-copy">It is correct. If you want to use backslashes you need to escape them or use raw string: <code>glob.escape(r'[P]ISBN_4\Image\0001')</code>, which produces <code>[[]P]ISBN_4\Image\0001</code>.</span>
