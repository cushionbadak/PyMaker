<div class="post-text" itemprop="text">
<p>I do have a set of strings, and what I want is to find out the match for the input string against the existing set of string. Here is the scenario:
I do have predefined list of strings like : [Intel, Windows, Google]
And input strings will be like :</p>
<pre><code>'Intel(R) software'

'Intel IT'

'IntelliCAD Technology Consortium'

'Huaian Ningda intelligence Project co.,Ltd'

'Intellon Corporation'

'INTEL\Giovanni'

'Internal - Intel® Identity Protection Technology Software'


'*.google.com'

'GoogleHit'

'http://www.google.com'

'Google Play - Olmsted County'

'Microsoft Windows Component Publisher'

'Microsoft Windows 2000 Publisher'

'Microsoft Windows XP Publisher'

'Windows Embedded Signer'

'Windows Corporation'

'Windows7-PC\Windows7'
</code></pre>
<p>Can someone suggest me some ML algorithm or some other alterate to achieve the maximum matching percentage. 
The preferred language is Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/difflib.html" rel="nofollow noreferrer">difflib</a> for this:</p>
<pre><code>import difflib

a = ['apple', 'ball', 'pen']
b = ['appel', 'blla', 'epn']

[(i, difflib.get_close_matches(i, a)[0]) for i in b]
</code></pre>
<p>Output:</p>
<pre><code>[('appel', 'apple'), ('blla', 'ball'), ('epn', 'pen')]
</code></pre>
<p>To find the similarity percentage, you can use SequenceMatcher, as described <a href="https://stackoverflow.com/a/17388505/4737952">here</a>.</p>
<pre><code>from difflib import SequenceMatcher

def similar(a, b):
    return SequenceMatcher(None, a, b).ratio()
</code></pre>
<p>E.g.</p>
<pre><code>&gt;&gt;&gt; similar("Apple","Appel")
0.8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the re module</p>
<pre><code>import re

love = ['Intel(R) software',

'Intel IT',

'IntelliCAD Technology Consortium',

'Huaian Ningda intelligence Project co.,Ltd',

'Intellon Corporation',

'INTEL\Giovanni',

'Internal - Intel® Identity Protection Technology Software',

'*.google.com',

'GoogleHit',

'http://www.google.com',

'Google Play - Olmsted County',

'Microsoft Windows Component Publisher',

'Microsoft Windows 2000 Publisher',

'Microsoft Windows XP Publisher',

'Windows Embedded Signer',

'Windows Corporation',

'Windows7-PC\Windows7']

match = {}
counts = {}

regex_words = ['Intel', 'Windows', 'Google']
no = 0

# for each of the predefined words
for x in regex_words:
    # new regex we will use for a closer match
    regex = '\s?' + x + '\s'

    # items we want to match
    for each in love:
        found = re.findall(x, each)
        if found:

            # counting them to get the maximum, (ran out of time)
            counts[no] = len(found)

            # here is a closer match, matching with space in front
            if re.findall(regex, each):
                per = 0.5
                match[each] = str(per)

            # this is an exact match
            elif each == x:
                per = 0.75
                match[each] = str(per)

            # this is the very first match the ordinary
            else:
                per = 0.25
                match[each] = str(per)

        no += 1

""" This is the calculation of the score the item made
for the it's repeatition against the set """

# this will be the mode of the counts
highest = 0

# start working on the counts
for y in counts:

    # if this is higher than whats already in the highest
    if counts[y] &gt; highest:

        # make it the highest
        highest = counts[y]

# index for counts dict
small_no = 0
for z in match:

    # percentage of what was in the counts for the item compared to the highest
    per = counts[small_no] / highest * 100

    # percentage the item gets for the remaining 25 score allocated to all
    score = per / 100 * 25
    total_score = round((score / 100), 2) 

    # increment the no. that we are using to iterate the counts
    small_no += 1

    # reset the new score for the matchs
    match[z] = str(float(match[z]) + total_score)
</code></pre>
<p>It will output</p>
<pre><code>{'Intel(R) software': '0.37', 'Intel IT': '0.62', 'IntelliCAD Technology Consortium': '0.37', 'Intellon Corporation': '0.37', 'Internal - Intel® Identity Protection Technology Software': '0.37', 'Microsoft Windows Component Publisher': '0.62', 'Microsoft Windows 2000 Publisher': '0.62', 'Microsoft Windows XP Publisher': '0.62', 'Windows Embedded Signer': '0.62', 'Windows Corporation': '0.62', 'Windows7-PC\\Windows7': '0.5', 'GoogleHit': '0.37', 'Google Play - Olmsted County': '0.62'
</code></pre>
</div>
<span class="comment-copy">I do not know matching Learning at all, but you could your regex</span>
<span class="comment-copy">Should all of these strings match? I mean, should <code>'intelligence'</code> match with <code>'Intel'</code>?</span>
<span class="comment-copy">Hang in there...</span>
