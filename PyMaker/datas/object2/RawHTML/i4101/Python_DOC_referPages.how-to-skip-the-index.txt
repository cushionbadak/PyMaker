<div class="post-text" itemprop="text">
<pre><code>#main program
while True:    

        ReadValue = Func03Modbus(1,70,40);#slave,start,number of registers
        x3 = struct.pack('&gt;HH',abs(ReadValue[3]),abs(ReadValue[2])) 
        pressure = struct.unpack('&gt;f', x3)
        print pressure[0]   
        c3 = struct.pack('&gt;HH',abs(ReadValue[5]),abs(ReadValue[4])) 
        purity = struct.unpack('&gt;f', c3)
        print purity[0] 
        hrs = int(ReadValue[30])
        mins= int(ReadValue[31])
        timein =float(str(ReadValue[30])+"."+str(ReadValue[31]))    
        print timein 
        r=requests.get("http://api.thingspeak.com/update api_key=5RMT************&amp;field4="+str(pressure[0])+"&amp;field5="+str(purity[0])+"&amp;field1="+str(ReadValue[i])+"&amp;field2="+str(mins)+"&amp;field3="+str(timein)))
        print str(ReadValue[30])  
        time.sleep(15)
</code></pre>
<p>While running the above program it stops running with returning following error:</p>
<blockquote>
<p>Traceback (most recent call last):   File "/home/pi/v1.py", line 123,
  in 
      x3 = struct.pack('&gt;HH',abs(ReadValue[3]),abs(ReadValue[2])); IndexError: tuple index out of range</p>
</blockquote>
<p>I want my program to run continuously even when it returns error. I want to skip the error and to run the program continuously. How can I do that ? </p>
</div>
<div class="post-text" itemprop="text">
<p>In theory you could wrap the code in an exception handler like:</p>
<pre><code>while True:
    try:
        what you want to do
    except Exception as e:
        print("Something bad happened:", e)
    finally:
        # reset device here
        time.sleep(15)
</code></pre>
<p>But this seems like a really bad idea if you're interacting with hardware, since you can't be sure what state you're leaving it in. Ideally, you'd want to make sure you're doing a proper reset of the device (or reconnect? depends what you're talking to) on every cycle.</p>
<p>Alternatively, if you want to explicitly verify that the values you get back are available, you can do:</p>
<pre><code>ReadValue = Func03Modbus(1,70,40);#slave,start,number of registers
if len(ReadValue) &lt; 32:
    print("Got incomplete result")
    time.sleep(15)
    continue
</code></pre>
<p>The language reference/tutorial has more information about handling errors here: <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/errors.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>In order to continue in the event of this kind of error, simply place the part you wish to ignore exceptions in within an appropriate <code>try: ... except ...</code> </p>
<pre><code>while True:    
    try:
        &lt;body of work&gt;
    except IndexError:
        &lt;you might want to log the error&gt;
        pass
</code></pre>
<p>In this case, we continue only in the event of <code>IndexError</code>.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/errors.html</a></span>
<span class="comment-copy">I would suggest you try adding <code>print len(ReadValue)</code> before the <code>.pack()</code>. You can then determine how many elements are returned when it fails.</span>
<span class="comment-copy">"if len(ReadValue) &lt; 32: " for what the "32" stands for ? whether it denotes bit size?</span>
<span class="comment-copy">I am now using " if not ReadValue"...."continue".</span>
<span class="comment-copy">@fayaaz The highest value you read is <code>ReadValue[31]</code>, so <code>ReadValue</code> needs at least 32 elements.</span>
<span class="comment-copy">I am not reading 32 values ...... I am just concatenating the ReadValue[3] and ReadValue[2] and doing some float conversion.</span>
<span class="comment-copy"><code>ReadValue[31]</code> means that you're getting the 31st element from that list. You're getting <code>IndexError</code> because you're not getting all the expected registers back. In that error, either your <code>ReadValue[2]</code> or <code>ReadValue[3]</code> is missing. Later on you are accessing 31 - <code>mins= int(ReadValue[31])</code></span>
