<div class="post-text" itemprop="text">
<p>I am new to python and I am trying write some code that ensures user input follows the following format:</p>
<p>(Integer):(Integer):(Letter)</p>
<p>So this would be valid:</p>
<p>'3:2:H'</p>
<p>What is the beginners approach to achieving this? Many of the solutions to similar problems that I have read on stackoverflow are a bit too advanced for me. Any help would be greatly appreciated! Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>regular expressions are the general answer, but for this specific instance you could write:</p>
<pre><code>def validate(in_):
    try:
        a, b, c = in_.split(":")
        _, _ = int(a), int(b)
    except Exception:
        return False
    else:
        return True
</code></pre>
<p>Essentially: do a bunch of things that will throw exceptions if the user input is wrong, wrap it in a <code>try</code>, and catch any exception with a <code>return False</code>. If no exceptions are thrown, well this must be valid so <code>return True</code>.</p>
<p>Note that this validates input like:</p>
<blockquote>
<p>654412:89777056444.12:the entire written works of Shakespeare</p>
</blockquote>
<p>but if you're restricting this to one-character only, you could do:</p>
<pre><code>def validate(in_):
    try:
        a, b, c = in_.split(":")
        for v in [a, b, c]:
            assert len(v) == 1
        # etc as before
</code></pre>
<hr/>
<p>The general solution, as I mentioned above, is regular expressions.</p>
<pre><code>import re

def validate(in_):
    pattern = r"\d:\d:[a-zA-Z]"
    m = re.match(pattern, in_)
    return (m is not None)
</code></pre>
<p>The pattern here is:</p>
<pre><code>pattern = re.compile(r'''
  \d                 # a digit character (0-9)
  :                  # a literal colon
  \d                 # another digit     (0-9)
  :                  # another literal colon
  [a-zA-Z]           # one character from the character class
                     #   containing all letters a-z and A-Z''', re.X)
</code></pre>
<p>We try to match against this pattern, and simply return whether the match was successful (a failed match leaves <code>m = None</code>, while a successful match returns a match object that we don't actually need, so we can safely throw it away. This can be equivalently spelled <code>return bool(m)</code>, but that's less explicit about what <code>m</code> can be!)</p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest using the <strong>argparse</strong> package for getting inputs. Here is the package link <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a>.</p>
<p>Below is a sample code I've written using <strong>argparse</strong> and the <strong>regex</strong> module of Python. I used Python3 for running the script.</p>
<pre><code>import argparse
import re

class SampleClass:

    def main(self):
        script_description = 'Sample Description for Script'
        parser = argparse.ArgumentParser(description=script_description)

        input_one_help = 'Input has format int:int:letter'
        parser.add_argument('input_one',
                            help=input_one_help,
                            type=self._input_one_pattern,
                            metavar='input_one'
                           )

        args = parser.parse_args()
        print(args.input_one)

    @staticmethod
    def _input_one_pattern(input_one):
        try:
            return re.match(r'\d:\d:[a-zA-Z]', input_one).group(0)
        except Exception as error:
            print(error)
            raise argparse.ArgumentTypeError('String {}'.format(input_one) + 
                                             'does not match required format.')


if __name__ == '__main__':
    SampleClass().main()
</code></pre>
</div>
<span class="comment-copy">Regular expressions are probably what you're after. A bit hard to wrap your head around at first but extremely useful.</span>
<span class="comment-copy">Look at the <code>re</code> module.</span>
<span class="comment-copy">The beginner's approach is to learn.</span>
