<div class="post-text" itemprop="text">
<p>My String is </p>
<pre><code>I liked TAG:{Destiny2,the last Destiny game}, now I play TAG{Fortnite,Fortnite} is Destiny
</code></pre>
<p>So I don't want to replace "Destiny" from</p>
<pre><code>TAG:{Destiny2,the last Destiny game}     
</code></pre>
<p>but I want to replace last word "Destiny" with </p>
<pre><code>TAG:{Destiny:Destiny}    
</code></pre>
<p>I always want to ignore string in TAG while replacing.</p>
<p>Expected Output:</p>
<pre><code>I liked TAG:{Destiny2,the last Destiny game}, now I play TAG{Fortnite,Fortnite} is TAG:{Destiny:Destiny}
</code></pre>
<p>Please help. </p>
</div>
<div class="post-text" itemprop="text">
<p>You need to parse your string first to find out which <code>Destiny</code> substrings are inside a tag, and which aren't. I have done this below with <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer">re.split</a>.</p>
<p>My use of re.split returns a list of substrings surrounding the regex pattern <code>TAG:?{.*?}</code>, and because I enclose the pattern in parentheses, the tags are included in the list as well. In this use of re.split, the non-tags will always have an even index, and the tags will always have an odd index. So I check if the index is even, and if so I replace <code>Destiny</code> with <code>TAG:{Destiny,Destiny}</code>.</p>
<pre><code>import re

s = 'TAG:{Destiny2,the last Destiny game}, now I play TAG{Fortnite,Fortnite} is Destiny'
result = []
for i, substring in enumerate(re.split('(TAG:?{.*?})', s)):
    if i % 2 == 0:
        substring = substring.replace('Destiny', 'TAG:{Destiny,Destiny}')
    result.append(substring)
result = ''.join(result)
print(result) # TAG:{Destiny2,the last Destiny game}, now I play TAG{Fortnite,Fortnite} is TAG:{Destiny,Destiny}
</code></pre>
<p>This will work as long as you don't have tags nested inside other tags.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re

my_string='I liked TAG:{Destiny2,the last Destiny game}, now I play TAG{Fortnite,Fortnite} is Destiny'

match = lambda x: True if len(re.split('(Destiny){1}', x)) == 3 else False 
repl =  lambda x: str.replace(x,'Destiny','TAG:{Destiny:Destiny}') if match(x) else x

l =re.split(r'({.*?})',my_string)
replaced=[repl(i) for i in l]
print(''.join(replaced))
</code></pre>
<p>output</p>
<pre><code>I liked TAG:{Destiny2,the last Destiny game}, now I play TAG{Fortnite,Fortnite} is TAG:{Destiny:Destiny}
</code></pre>
</div>
<span class="comment-copy">What is the error with your code? Or have you not tried anything as of yet?</span>
<span class="comment-copy">So your desired output would be <code>I liked TAG:{Destiny2,the last Destiny game}, now I play TAG{Fortnite,Fortnite} is TAG:{Destiny:Destiny}</code>? Describing your output is generally less helpful than actually providing it (when small enough to provide); please read about writing <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>s.</span>
<span class="comment-copy">all things I tried either replace all Destiny strings even in the last Destiny game or none</span>
<span class="comment-copy">You also need to be explicit about your inputs.  If it's just the one string, then replace the last 7 characters and done.  But if it's more general, you may need regex or more intelligent parsing</span>
<span class="comment-copy">seems like you need a regular expression that overlooks whats between <code>tag{}</code></span>
