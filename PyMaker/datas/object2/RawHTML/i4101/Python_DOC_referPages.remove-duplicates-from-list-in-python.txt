<div class="post-text" itemprop="text">
<p>Code below, gets the answer through get request and writes the result to the list "RESULT"</p>
<pre><code>for i in url:
    df = pd.read_html(i,header=0)[0]
    df = df.as_matrix().tolist()
    for item in df:           
        RESULT.append(item)
</code></pre>
<p>I use the code below to exclude duplicate entries:</p>
<pre><code>def unique_items(RESULT):
found = set()
for item in RESULT:
    if item[0] not in found:
        yield item
        found.add(item[0])
NOT_DUBLICATE = (list(unique_items(RESULT)))
print(NOT_DUBLICATE)
</code></pre>
<p>It seems to me it is not optimal since it is necessary to get a list of all the rows to exclude duplicates.</p>
<p>How can I find duplicates before loading a rows into the list RESULT?</p>
<p>for example, the rows I write to the list RESULT:</p>
<pre><code>[[55323602, 'system]
,[55323603, 'system]]
[[55323602, 'system]
,[55323603, 'system]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of use another method to exclude duplicate entries, append <code>item</code> to the list if <code>item</code> doesn't exist in the list <code>RESULT</code>. Then you don't need method <code>unique_items()</code>. </p>
<p>You can find duplicates before loading a row into the list RESULT using this:</p>
<pre><code>for i in url:
    df = pd.read_html(i,header=0)[0]
    df = df.as_matrix().tolist()
    for item in df:  
        if item not in RESULT         
            RESULT.append(item)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use a set instead of a list.</p>
<pre><code>result = set()
for i in url:
    df = pd.read_html(i,header=0)[0]
    df_list = df.as_matrix().tolist()
    for item in df_list:          
       result.add(tuple(item))
</code></pre>
<p>Above code will exclude any duplicates. The only difference from your case will be that elements of <code>result</code> will be tuples instead of lists.</p>
<p>At the end, you can recast the set to a list by:</p>
<p><code>result = list(result)</code></p>
</div>
<span class="comment-copy">@msanford I don't think that's a suitable dupe - the OP isn't really eliminating duplicates; they're comparing the elements by <code>item[0]</code>. We're gonna need a "eliminate duplicates based on a key function" sort of question</span>
<span class="comment-copy">He is asking something which can avoid duplicates before appending to the list. check my answer!</span>
<span class="comment-copy">@Aran-Fey Fair observation; I'll retract. Phillip you may wish to rephrase your title.</span>
<span class="comment-copy">I don't understand the problem. You say it's "necessary to get a list of all the rows to exclude duplicates", but that's not even true. Instead of building a list <code>RESULTS</code> and <i>then</i> removing duplicates from that list, just skip the duplicates in the <code>for item in df:</code> loop.</span>
<span class="comment-copy">@phillipwatts344, is it not possible to call <code>drop_duplicates</code> on your df before mapping it into a list? It would automatically drop all duplicates.</span>
<span class="comment-copy">1) Your <code>result</code> is a dict, not a set. 2) <code>item</code> isn't defined in your loop. 3) <code>item</code> seems to be a list, and lists can't be stored in sets.</span>
<span class="comment-copy">@Aran-Fey Thanks for first two points, I corrected them. Regarding #3, you are wrong. A set can be updated with iterables: <a href="https://docs.python.org/3/library/stdtypes.html#frozenset.update" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#frozenset.update</a>.</span>
<span class="comment-copy">Yes, a set can be updated with an iterable, but that's not what we're trying to do here. We're trying to detect duplicate rows based on the first element, i.e. <code>item[0]</code>. Your code doesn't do that; it just tosses <i>all</i> the values in a row into a set. You end up with a list of values, not a list of rows.</span>
<span class="comment-copy">If that is the case, the last edit should work fine.</span>
<span class="comment-copy">Given OP's example, the second element always seems to be 'system' so my code technically compares based on the first element. @phillipwatts344, correct me if I am wrong.</span>
