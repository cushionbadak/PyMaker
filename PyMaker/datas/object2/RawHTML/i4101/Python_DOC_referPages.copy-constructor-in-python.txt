<div class="post-text" itemprop="text">
<p>I want to know if it possible to do a copy constructor in python like in java, this is my java code, regular contractor and a copy constructor.
how the below code can be written in python? thx </p>
<pre><code>public Date(int day, int month, int year)
{
    _day = day;
    _month = month;
    _year = year;

    if(!checkDate(_day,_month,_year))
    {
        _day = DEFAULT_DAY;
        _month = DEFAULT_DAY;
        _year = DEFAULT_YEAR;
    }        
}

/**
 * Copy constructor.
 */
public Date (Date other)
{
    if(other != null)
    {
      _day = other._day;
      _month = other._month;
      _year = other._year;
    }
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's no overloading in Python, so you can't "overload the constructor" for the simple reason that you can't overload <em>anything</em>.</p>
<p>There are two general ways to "simulate overloading" in Python, and both of them apply to overloaded constructors:<sup>1</sup></p>
<ul>
<li>Write a single method that's flexible enough to take either set of parameters.</li>
<li>Write two methods with different names.</li>
</ul>
<hr/>
<p>The first one is pretty simple:</p>
<pre><code>def __init__(self, date_or_day, month=None, year=None):
    if isinstance(date_or_day, Date):
        # do "copy" stuff
    else:
        # do "non-copy" stuff
</code></pre>
<p>… or, a minor variation:</p>
<pre><code>def __init__(self, day=None, month=None, year=None, *, date=None):
    if month is None:
        # do "copy" stuff
    else:
        # do "non-copy" stuff
</code></pre>
<p>This works, but it can be a little clunky. (Think of the interface to <code>range</code>, and how hard it is to write down clearly even after you know it.) And either way, you probably want to throw in some checks to <code>raise TypeError("some message")</code> if the user does something nonsensical, like calling it with a date and a month.</p>
<p>If you prefer to require keyword arguments:</p>
<pre><code>def __init__(self, day=None, month=None, year=None, *, date=None):
    if date is not None:
        # do "copy" stuff, maybe also assert that month and year are None
    else:
        # do "non-copy" stuff
</code></pre>
<p>… then the constructor can't be called as just <code>Date(otherdate)</code> anymore, but it can be called as <code>Date(date=otherdate)</code>, which may be clearer anyway, and you can avoid all the fiddly stuff with the first parameter having potentially two different meanings.</p>
<hr/>
<p>The second one may seem impossible at first, because the constructor has to be called as <code>Date(…)</code>.</p>
<p>But you can use the "alternate constructor" idiom, by defining a classmethod that can be called explicitly as <code>Date.from_somethingelse(…)</code>. This idiom is, in fact, heavily used in the types from the stdlib's <code>datetime</code> library—e.g., <code>datetime.datetime.now()</code> is an alternate constructor that creates a <code>datetime</code> object representing right now.</p>
<p>So, for example:</p>
<pre><code>def __init__(self, date=None):
    if date is None:
        # do "default constructor" stuff
    else:
        # do "copy" stuff

@classmethod
def from_dmy(cls, day, month, year):
    self = cls()
    # do "non-copy" stuff
</code></pre>
<hr/>
<p>One last point: copy constructors are rare in idiomatic Python, because they're really not as useful as in languages like Java.</p>
<p>First, there's nowhere for them to get applied implicitly—assignment isn't a copy, and even if it were, variables don't have types, values do, so there'd be no "hook" for you to specify what constructor you wanted. And if you want to explicitly copy something, you usually either add a <code>copy</code> method (<a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="noreferrer">as with <code>list</code> and <code>dict</code></a>) or just use the <a href="https://docs.python.org/3/library/copy.html" rel="noreferrer"><code>copy</code> module</a>.</p>
<p>What <em>is</em> somewhat common is a constructor that takes some wider range of things that includes your own type. For example, lists can be constructed from any iterable, including another list, and dicts can be constructed from any iterable of pairs or any mapping, including another dict.</p>
<hr/>
<p><sub>1. Actually, in Python, <code>__init__</code> methods aren't constructors, but initializers—they don't return an object, they get called on an already-constructed object and initialize it. If you actually need to write a constructor (typically for immutable objects, that you can't initialize after creation), that's <code>__new__</code>.</sub></p>
</div>
<span class="comment-copy">I don't think this is a dup, despite the (slightly misleading) title. The OP is asking how to create an "overloaded constructor"; the fact that one of the two overloads happens to be a copy constructor is only secondary.</span>
<span class="comment-copy">Anyway, you can't overload constructors in Python for the simple reason that you can't overload <i>anything</i> in Python. The way you translate overloading to Python is (1) write a function with a signature that's flexible enough to take both sets of args, or (2) write functions with different names. If you're thinking (2) can't possibly work for constructors, you're looking for the "alternate constructor idiom": define a <code>@classmethod</code> as the alternate constructor, and call it explicitly, as with <code>datetime.datetime.now()</code>](<a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.now" rel="nofollow noreferrer">docs.python.org/3/library/datetime.html#datetime.datetime.now</a>).</span>
<span class="comment-copy">Perhaps you don't need any class specific code: Just use <code>copy.copy</code> (or maybe <code>copy.deepcopy</code> if you need it) wherever you want to make the copy of an object.</span>
<span class="comment-copy">Also, the most obvious design for a date class is to make it immutable (see <code>datetime.Date</code>, and even the clunky C-friendly types in <code>time</code> and <code>cal</code>), at which point you shouldn't <i>ever</i> need to make copies, because it never matters whether you have two equal dates or the exact same date twice.</span>
<span class="comment-copy">thanks, I guess Ill drop the copy constructor for now, but if u can look on another issue it will be great</span>
<span class="comment-copy">@BarakMichaeli If you have another issue, create another question. If they're closely related, you can use the "share" button to get a link for each question and paste it into the other question, so you don't have to exhaustively repeat all of the background details.</span>
