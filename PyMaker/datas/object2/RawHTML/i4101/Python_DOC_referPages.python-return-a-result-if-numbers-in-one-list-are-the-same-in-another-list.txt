<div class="post-text" itemprop="text">
<p>I am programming a lotto simulator where the code generates 6 random unique numbers out of 45 for both the winning numbers and 1000 players, both of which are stored as lists.</p>
<p>What I would like to do is calculate the number of winners per division. </p>
<p>So 1st division if all 6 winning numbers equal to the 6 numbers the player has, 2nd division if any 5 of the 6 winning numbers equal to the 5 of the 6 numbers the player has, 3rd division if any 4 of the 6 winning numbers equal to the 4 of the 6 numbers the player has, so on.</p>
<p>Currently my code only looks for 1st division and does not count how many times a match (if any) of 6/6 is found. This is where I get stuck how do I do this while also needing to find matches of 5/6, 4/6, 3/6.</p>
<p>I am using a binary search algorithm to compare the winning numbers against the numbers the player has.</p>
<pre><code>winNum = [37, 10, 36, 26, 19, 43]
lotto = [[5, 19, 21, 24, 30, 38], [10, 11, 15, 24, 32, 34], ...]

# Calculates the total number of winners for each division.    
def totalWinners():
    target = winNum
    search = binarySearch
    i = 0
    for i in range(len(lotto)):
        found = search(target, lotto, 0, len(lotto)-1)
        if found == -1:
            print(lotto[i])
            print("search unsuccessful...")

#Binary search algorithm.
def binarySearch (target, p, left, right):
     l = left
     r = right
     while l &lt;= r:
         f = (l+r)//2
         if target == p[f]:
             return f          
         elif target &lt; p[f]:
             r = f - 1         
         else:
             l = f + 1         
     return -1 
</code></pre>
<p>Thank you for the help.</p>
</div>
<div class="post-text" itemprop="text">
<p>This seems like a better job for <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">sets</a>. You get easier and efficient calculation of intersections for free.</p>
<pre><code>winNumSet = set(winNum)
for entry in lotto:
    division = len(set(entry) &amp; winNumSet)
</code></pre>
<p>That tells you what "division" that entry is in. Deal with it in whatever manner is most appropriate for your overall goal.</p>
<p>Obviously if you have control over how <code>winNum</code> and the elements of <code>lotto</code> are generated, it would be more efficient to start with sets in the first place.</p>
</div>
