<div class="post-text" itemprop="text">
<p>It's easy in python to calculate simple permutations using <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer">itertools.permutations()</a>.</p>
<p>You can even find some <a href="https://stackoverflow.com/q/2853212">possible permutations of multiple lists</a>.</p>
<pre><code>import itertools
s=[ [ 'a', 'b', 'c'], ['d'], ['e', 'f'] ]
for l in list(itertools.product(*s)):
    print(l)


('a', 'd', 'e')
('a', 'd', 'f')
('b', 'd', 'e')
('b', 'd', 'f')
('c', 'd', 'e')
('c', 'd', 'f')
</code></pre>
<p>It's also possible to find <a href="https://stackoverflow.com/a/5898031/99923">permutations of different lengths</a>.</p>
<pre><code>import itertools
s = [1, 2, 3]
for L in range(0, len(s)+1):
    for subset in itertools.combinations(s, L):
        print(subset)

()
(1,)
(2,)
(3,)
(1, 2)
(1, 3)
(2, 3)
(1, 2, 3)
</code></pre>
<p>How would you find permutations of all possible 1) <strong>lengths</strong>, 2) <strong>orders</strong>, and 3) from <strong>multiple lists</strong>?</p>
<p>I would assume the first step would be to combine the lists into one. A list will not de-dup items like a set would.</p>
<pre><code>s=[ [ 'a', 'b', 'c'], ['d'], ['e', 'f'] ]

('a', 'b')
('a', 'c')
('a', 'd')
('a', 'e')
('a', 'f')
...
('b', 'a')
('c', 'a')
...
('a', 'b', 'c', 'd', 'e')
...
('a', 'b', 'c', 'd', 'e', 'f')
...
('f', 'a', 'b', 'c', 'd', 'e')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like you suggested, do:</p>
<pre><code>s = [x for y in s for x in y]
</code></pre>
<p>and then use your solution for finding permutations of different lengths:</p>
<pre><code>for L in range(0, len(s)+1):
    for subset in itertools.combinations(s, L):
        print(subset)
</code></pre>
<p>would find:</p>
<pre><code>()
('a',)
('b',)
('c',)
('d',)
('e',)
('f',)
('a', 'b')
('a', 'c')
('a', 'd')
('a', 'e')
('a', 'f')
('b', 'c')
('b', 'd')
('b', 'e')
('b', 'f')
('c', 'd')
('c', 'e')
('c', 'f')
('d', 'e')
('d', 'f')
('e', 'f')
('a', 'b', 'c')
('a', 'b', 'd')
('a', 'b', 'e')
('a', 'b', 'f')
('a', 'c', 'd')
('a', 'c', 'e')
('a', 'c', 'f')
('a', 'd', 'e')
('a', 'd', 'f')
('a', 'e', 'f')
('b', 'c', 'd')
('b', 'c', 'e')
('b', 'c', 'f')
('b', 'd', 'e')
('b', 'd', 'f')
('b', 'e', 'f')
('c', 'd', 'e')
('c', 'd', 'f')
('c', 'e', 'f')
('d', 'e', 'f')
('a', 'b', 'c', 'd')
('a', 'b', 'c', 'e')
('a', 'b', 'c', 'f')
('a', 'b', 'd', 'e')
('a', 'b', 'd', 'f')
('a', 'b', 'e', 'f')
('a', 'c', 'd', 'e')
('a', 'c', 'd', 'f')
('a', 'c', 'e', 'f')
('a', 'd', 'e', 'f')
('b', 'c', 'd', 'e')
('b', 'c', 'd', 'f')
('b', 'c', 'e', 'f')
('b', 'd', 'e', 'f')
('c', 'd', 'e', 'f')
('a', 'b', 'c', 'd', 'e')
('a', 'b', 'c', 'd', 'f')
('a', 'b', 'c', 'e', 'f')
('a', 'b', 'd', 'e', 'f')
('a', 'c', 'd', 'e', 'f')
('b', 'c', 'd', 'e', 'f')
('a', 'b', 'c', 'd', 'e', 'f')
</code></pre>
<p>If you want to distinguish e.g. <code>('d', 'e', 'f')</code> from <code>('f', 'e', 'd')</code> (thanks <a href="https://stackoverflow.com/users/9729313/kefeng91">@Kefeng91</a> for pointing this out) and others, replace <code>itertools.combinations</code> with <code>itertools.permutations</code>, like <a href="https://stackoverflow.com/users/4585963/yakym-pirozhenko">@YakymPirozhenko</a> suggests.</p>
</div>
<span class="comment-copy">if you flatten the list, doesn't it solve it?</span>
<span class="comment-copy">@BcK this most certainly is not a duplicate of questions about flattening lists. If anything, this would be a duplicate of the two questions I already linked to about finding permutations. However, I already explained the differences in the question.</span>
<span class="comment-copy">Good solution so far, but it fails to handle different orders.</span>
<span class="comment-copy">Do you have an (counter)example of that?</span>
<span class="comment-copy">@fferri I think this will work if you replace <code>combinations</code> with <code>permutations</code>, which is what OP wants.</span>
