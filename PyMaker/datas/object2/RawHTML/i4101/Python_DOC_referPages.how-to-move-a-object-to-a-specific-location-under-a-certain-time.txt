<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/38874597/how-to-make-a-proper-server-tick">How to make a proper server tick?</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<pre><code>def showGameFrame():
    count=0
    while count != 400:
        c.move(theFrame, 0, 10)
        c.move(gameLabel, 0, -10)
        playButton.place_forget()
        quitButton.place_forget()
        count = count+1
    if count == 400:
        window.after(30, showGameFrame)
        window.after(3000, logged)
        play1.terminate()
</code></pre>
<p>I have tried to make my objects move down for a certain time period, but the code I have now did not show the animation which the object floats down or up.</p>
<p>I am wondering if there is a correct way to move an object or image to a location under a certain time?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the time module to execute code every second for a certain amount of time. Particularly <code>time.sleep()</code></p>
<p>I see nothing wrong with using your method. Although I do think it makes more sense to use &lt; in this scenario:</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; count = 0
&gt;&gt;&gt; while count &lt; 400:
...     count += 1
...     print(count)
...     time.sleep(1)
...
1
2
</code></pre>
<p>You could also consider using a for loop with a range instead of a while loop:</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; for count in range(0,400):
...     print(count)
...     time.sleep(1)
...
0
1
2
</code></pre>
<p>Change <code>time.sleep(1)</code> to <code>time.sleep(0.001)</code> if you want milliseconds.</p>
<p>Another method:</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; timenow = int(time.time())
&gt;&gt;&gt; while (int(time.time()) - timenow) &lt; 400:
...     print(int(time.time()) - timenow)
...     time.sleep(1)
...
0
1
2
3
4
5
</code></pre>
<p>Or if you wanted milliseconds instead.</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; timenow = time.time()
&gt;&gt;&gt; while (time.time() - timenow) &lt; 0.4:
&gt;&gt;&gt;     print(time.time() - timenow)
&gt;&gt;&gt;     time.sleep(0.001)
0.0
0.0019998550415
0.00300002098083
0.00399994850159
0.00499987602234
0.00599980354309
0.00799989700317
0.00899982452393
0.00999999046326
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sometimes it can fail to check properly when you use '!=' rather than less than. If you use '&lt;', it will cease to evaluate even if the number goes over 400.</p>
</div>
<span class="comment-copy">Your code isn't keeping track of actual wall clock time, it's just counting. To do real timing you'll need to use something like the <code>time</code> or <code>datetime</code> module.</span>
<span class="comment-copy">@martineau but how do I change a variable to a specific second that I can put in my if or while statement?</span>
<span class="comment-copy">ACC938: Well, <code>time.time()</code> returns the current time in seconds, so following that initialization, calling it again and subtracting the previous value from the new one will tell you how many seconds have passed since it was done. You can do something similar with <a href="https://docs.python.org/3/library/time.html#time.perf_counter" rel="nofollow noreferrer"><code>time.perf_counter()</code></a> if you're using Python 3.3+.</span>
<span class="comment-copy">Think about things like this: Suppose D is the distance between an object's current position (x0, y0), and its new position (x1, y1), and you want to move it from point A to point B in a certain number of seconds, T, then the number of steps it will take depends on how fast updates are made. As a concrete example, say D is 50 units, T is 2 seconds, and the display update rate is 10 per second (i.e. every 100 ms). Doing this requires moving at 50/2 or 25 units-per-second. If there are 10 updates-per-second, then to do so requires moving 25/10 or 2.5 units-per-update (i.e. that amount 20 times).</span>
<span class="comment-copy">No! Using <code>time.sleep</code> (outside a separate thread) in a GUI program is generally a <i>very</i> bad idea : it puts everything to sleep, so the GUI freezes.</span>
