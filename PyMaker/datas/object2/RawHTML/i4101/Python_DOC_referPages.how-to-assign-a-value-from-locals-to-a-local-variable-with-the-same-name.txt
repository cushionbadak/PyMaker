<div class="post-text" itemprop="text">
<p>This works:</p>
<pre><code>def foo():
    locals().update({'bar': 12})
    print(locals()['bar'])  # 12
</code></pre>
<p>This fails:</p>
<pre><code>def foo():
    locals().update({'bar': 12})
    bar = locals()['bar']  # KeyError: 'bar'
    print(bar)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#locals</a></p>
<blockquote>
<p><strong>Note</strong> The contents of this dictionary should not be modified; changes may not affect the values of local and free variables used by the interpreter. </p>
</blockquote>
<p><strong>Edit:</strong> But as mentioned above, <code>bar = 12</code> of course works:</p>
<pre><code>&gt;&gt;&gt; def foo():
...     bar = 12
...     bar_ = locals()["bar"]
...     print(bar_)
...     
... 
&gt;&gt;&gt; foo()
12
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>change the name of variable. i mean:</p>
<pre><code>bar = locals()['bar']  # KeyError: 'bar'
</code></pre>
<p>on</p>
<pre><code>tmp = locals()['bar'] # 12
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you run this code:</p>
<pre><code>def foo():
    locals().update({'bar': 12})
    print locals()
    bar = locals()['bar']
</code></pre>
<p>The output is:
First <code>{}</code> gets printed
And then we get a <code>KeyError</code></p>
<p>So, I'm guessing that your <code>locals</code> is not getting updated when you try to assign value to a variable (<code>bar = locals()['bar']</code>). But it works fine in your first case because you don't do any assignment. </p>
<p><strong>Edit 1</strong>:
I went through your github link, and I would suggest you to use a <code>dict</code> instead of <code>locals</code>. For example, </p>
<pre><code>def base_config():
    return dict(num_epochs=50, bath_size=200, gradient_clipping=100.0)
</code></pre>
</div>
<span class="comment-copy">Why on earth would you do such a thing ???</span>
<span class="comment-copy">Why not just <code>bar=12</code> ?</span>
<span class="comment-copy">@NitheeshMN this is mentionned as a comment in the code snippet : "KeyError: 'bar'"</span>
<span class="comment-copy">@danijar for your concrete use case, you'd be better using plain dicts instead, really. Abusing <code>locals()</code> that way is brittle at best (been here, done that), doesn't help wrt/ readability / testability / maintainability, and - as you may have noticed by now - doesn't work as expected for quite a few cases.</span>
<span class="comment-copy">This is more of an <i>abuse</i> case than a use case, really. (Yes, I just wanted to make that lame joke. Sue me.)</span>
<span class="comment-copy">I think the problem is when assigning to the name <code>bar</code>, Python treats <code>bar</code> as a not-yet-defined variable. I'm assuming it's related to performance optimizations of <code>locals()</code> sometimes being a dict and sometimes an array.</span>
<span class="comment-copy">Thanks for the edit. The problem is that the dict doesn't let me compute some of the values based on the previous values. I would do <code>config = dict(); config['first_param'] = 12; config['second_param'] = 0.5 * config['first_param']</code> but I was hoping for a better syntax.</span>
