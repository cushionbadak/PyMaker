<div class="post-text" itemprop="text">
<p>I have a dataframe with 2 column nbr and tag. Nbr contain integer and tag contain Tag object. </p>
<p>And I want to get the mean of all the tag object (using value attribute, and the result is a new Tag with that value).</p>
<p>For <code>dataframe.add</code> I had the add a the <code>__add__</code> method to the Tag class.
Example:</p>
<pre><code>import pandas as pd

class Tag(object):
    def __init__(self, value):
        self.value = value
    def __add__(self, other):
        return Tag(self.value + other.value)

a = Tag(2)
b = Tag(8)
frame = pd.DataFrame({
    'tag': [a, b],
    'nbr': [3, 6]
})

new_tag = frame.tag.sum()
print new_tag.value  # 10 
</code></pre>
<p>But for <code>frame.tag.mean()</code> I get this error <code>TypeError: Could not convert &lt;__main__.Tag object at 0x7f375ac460d0&gt; to numeric</code>.
Pandas first try to convert the object to float: <code>float(x)</code>, then if it fail it try this: <code>x = complex(x)</code>. </p>
<p>My question is their a way to make <code>float(tag_object)</code> or <code>complex(tag_object)</code> return the value attribute by adding a method to my Tag class like I did with <code>__add__</code>? </p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Looking at the source code, it seems like Pandas's mean coerces the results to a numeric type. </p>
<p>You can get close by adding the <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">special <code>__float__</code> method</a> to <code>Tag</code>:</p>
<pre><code>import pandas as pd

class Tag(object):
    def __init__(self, value):
        self.value = value
    def __add__(self, other):
        return Tag(self.value + other.value)
    def __float__(self):
        return float(self.value)
</code></pre>
<p>Once you do so, you get</p>
<pre><code>a = Tag(2)
b = Tag(8)
frame = pd.DataFrame({
    'tag': [a, b],
    'nbr': [3, 6]
})
new_tag = frame.tag.mean()
&gt;&gt;&gt; print(new_tag)
5.0
</code></pre>
<p>Note that this doesn't do exactly what you wanted (it doesn't create a <code>Tag</code> with value 5.0 - Pandas wants the result to be a numeric type).</p>
</div>
<span class="comment-copy">Do you want to get the mean of all equal tag objects? Then try frame.groupby('tag').mean()</span>
<span class="comment-copy">No I want to the mean of the value attribute of all the tag object</span>
<span class="comment-copy">You are introducing a different type namely a user-defined <i>Tag</i> object, in your dataframe (which is a class object itself!). Your example seems very simplified and hence this reads like the <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY Problem</a>. Provide more info. What really is <i>Tag</i>?</span>
