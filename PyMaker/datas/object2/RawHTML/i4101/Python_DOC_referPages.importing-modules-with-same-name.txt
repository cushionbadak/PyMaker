<div class="post-text" itemprop="text">
<p>Basically, I have two python projects, one is located under <code>myapp/screening</code> and the other <code>myapp/server</code>. I'm currently developing the <code>server</code> module and want to import functions from <code>screening</code> using <code>myapp.screening</code>.</p>
<p>My folder structure is as shown bellow:</p>
<pre><code>myapp/
    screening/
        screening-env/
        myapp/
            __init__.py
            screening/
                __init__.py
                screening_task.py
                submodule1/
                    # __init__.py and ub module files
                submodule2/
                    # __init__.py and sub module files
                submodule3/
                    # __init__.py and sub module files
        tests/
            # __init__.py and test scripts
        setup.py
    server/
        server-env/
        myapp/
            __init__.py
            server/
                __init__.py
                server_task.py
        tests/
            __init__.py
            server_test.py
</code></pre>
<p>I structured my project following this <a href="https://stackoverflow.com/questions/28955165/structure-python-application-with-client-and-server-parts">answer</a>.</p>
<p>My <code>setup.py</code> is basically as bellow:</p>
<pre><code>from setuptools import setup

setup(
    name='myapp-screening',
    version='0.1.0',
    packages=[
        'myapp.screening',
        'myapp.screening.submodule1',
        'myapp.screening.submodule2',
        'myapp.screening.submodule3'
    ],
)
</code></pre>
<p>I activated my <code>server-env</code> and installed the screening project by navigating to <code>myapp/screening/</code> (same directory as <code>setup.py</code>) and ran <code>python setup.py develop</code>.</p>
<p>Finally, both <code>server_test.py</code> and <code>server_task</code> are such as bellow:</p>
<pre><code>from myapp.screening.screening_test import foo

foo()
</code></pre>
<p>When I run <code>python -m myapp.server.server_task</code> or <code>python -m test.server_test</code> I get:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ModuleNotFoundError: No module named 'myapp.screening'
</code></pre>
<p>This error makes sense if I'm running <code>python -m myapp.server.server_task</code> because local <code>myapp</code> existis and <strong>might</strong> be overwriting the installed <code>myapp</code> that contains the <code>screening</code> modules.</p>
<p>Is there a way to import stuff from <code>screening</code> using <code>from myapp.screening.screening_task import foo</code>?!</p>
</div>
<div class="post-text" itemprop="text">
<p>So, after some more research I found <a href="https://stackoverflow.com/questions/8936884/python-import-path-packages-with-the-same-name-in-different-folders">this similar (in a way) question</a> that leads to <a href="https://stackoverflow.com/questions/6630394/import-python-modules-with-the-same-name">import python modules with the same name</a> and <a href="https://stackoverflow.com/questions/1675734/how-do-i-create-a-namespace-package-in-python">How do I create a namespace package in Python?</a>.</p>
<p>The answer for "importing modules with same name" is not useful since it says to rename one module or turn the project directory into a package.</p>
<p>The other question is exactly what I want. It basically talks about the <a href="https://docs.python.org/3/library/pkgutil.html" rel="nofollow noreferrer"><code>pkgutil</code></a> with which you can 'append' modules to a given namespace.</p>
<p>I understand and share some opinions against this technique for some cases (such as <a href="https://stackoverflow.com/questions/8936884/python-import-path-packages-with-the-same-name-in-different-folders">this</a>) but since it's presented <a href="https://stackoverflow.com/questions/28955165/structure-python-application-with-client-and-server-parts">here</a> sometimes you want separated structures so you don't patch everything togheter even when you don't want everything</p>
</div>
