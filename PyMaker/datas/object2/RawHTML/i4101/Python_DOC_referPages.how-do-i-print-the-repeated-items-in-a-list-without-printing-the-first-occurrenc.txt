<div class="post-text" itemprop="text">
<p>In a <code>list = [1,2,1,1,1,2,3,4]</code> I would like to print the output as <code>[1,1,1,2]</code> which is to print the duplicates in the list without printing the first time they occurred in python. </p>
<p>Any help would be appreciated. Thanks. </p>
</div>
<div class="post-text" itemprop="text">
<p>A simple solution is to define a function which uses <code>set</code> to track seen items. If an item is not seen, add it to the set. If it is seen, yield that item.</p>
<p>If you wrap this in a generator, you have the benefit of making this process lazy, which is useful with large lists when you only need to iterate results.</p>
<pre><code>lst = [1,2,1,1,1,2,3,4]

def dups(x):
    seen = set()
    for i in x:
        if i not in seen:
            seen.add(i)
        else:
            yield i

res = list(dups(lst))

[1, 1, 1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to achieve that would be:</p>
<pre><code>a = [1,2,1,1,1,2,3,4]
read_so_far = set()
result = []

for val in a:
    if val in read_so_far:
        result.append(val)
    else:
        read_so_far.add(val)

print(result)
</code></pre>
<blockquote>
<p>[1, 1, 1, 2]</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import Counter

original_list = [1, 2, 1, 1, 1, 2, 3, 4]

c1 = Counter(original_list)
c2 = Counter(set(original_list))

c1.subtract(c2)

print(list(c1.elements()))
</code></pre>
</div>
<span class="comment-copy">Please update your question with the code you have tried so far.</span>
<span class="comment-copy">Also, I imagine you may have been typing pseudo code, but don't name lists 'list'.</span>
<span class="comment-copy">You should use a <a href="https://docs.python.org/3/library/functions.html#func-set" rel="nofollow noreferrer"><code>set</code></a> instead of a list for the <code>read_so_far</code> variable. That makes membership testing O(1) instead of O(n).</span>
<span class="comment-copy">You are right, Aran-Fey. The reason I'm using a list is for simplicity. If someone is asking this question, probably knows how a list works, but has not heard of a set yet.</span>
<span class="comment-copy">Well, now would be a good time to learn about sets. It's not like they're rocket science. SO exists to educate people, doesn't it?</span>
<span class="comment-copy">When a kind stranger is right, is right. Edited ;)</span>
<span class="comment-copy">This indeed does return <code>[1,1,1,2]</code> for this particular example, but this is only because all <code>1</code>s happen to come before the duplicate <code>2</code>. If you try it with <code>[1, 2, 1, 1, 1, 2, 1, 23, 4]</code>, it does not preserve the order. But I don't know, maybe the OP didn't want to preserve the order... (I'm not the downvoter, have no real opinion on that. You might consider to add a comment, though).</span>
<span class="comment-copy">original_list = [1, 2, 1, 1, 1, 2, 1, 23, 4] return [1, 1, 1, 1, 2] - is this expencted result?</span>
<span class="comment-copy">jpp's solution preserves the order. For example for <code>[1,2,1,1,1,2,1,2,3,4]</code>, it outputs <code>[1, 1, 1, 2, 1, 2]</code>.</span>
<span class="comment-copy">you are wrong, the code returned a value [1, 1, 1, 1, 2, 2]. Example: <a href="https://repl.it/repls/MediumorchidNeglectedBetaversion" rel="nofollow noreferrer">repl.it/repls/MediumorchidNeglectedBetaversion</a></span>
<span class="comment-copy">That's not jpp's version, that's your version.</span>
