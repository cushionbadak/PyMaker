<div class="post-text" itemprop="text">
<p>I'm writing a Python script that uses requests but depending on where the script is run, requests may already be available on the path, it may be only available by the file system or it might not be available at all.</p>
<p>I have written the following:</p>
<pre><code>import sys
try:
    print "importing using library"
    import requests
except ImportError:
    try:
        print "Try by adding to path first"
        sys.path.insert(0, '&lt;path&gt;')
        import requests
    except ImportError:
        print "Adding via the file system PATH unsuccessful. Requests is required for this script to run"
        sys.exit(1)
</code></pre>
<p>This does what I want it to do but I have read that nesting Try/Except statements is not a good idea so I am wondering if there is a best practice here that I should use instead? </p>
<p>Is there a better way to </p>
<ul>
<li>Try <code>import requests</code> first (as if this is available it could be a new version than on the file system)</li>
<li>If that fails, then add the predefined dir to the path and retry the import</li>
<li>And if that fails then <code>sys.exit(1)</code></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Its better to use virtual environment to handle required packages
<a href="https://docs.python.org/3/tutorial/venv.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/venv.html</a></p>
</div>
<span class="comment-copy">Why is nesting <code>try/except</code> not a good idea?</span>
<span class="comment-copy">@khelwood Most pages I viewed when trying to find a best practice on this were suggesting that you should avoid them and use <code>try: except</code> and a separate <code>try: except</code>. This however does not do what I am trying to do. The pages are not explaining why it's best to not use the nested <code>try/except</code>.</span>
