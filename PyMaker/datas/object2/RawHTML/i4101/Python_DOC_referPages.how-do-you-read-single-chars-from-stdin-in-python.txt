<div class="post-text" itemprop="text">
<p>There are a lot of great answers on how to read from <code>stdin</code> in python, but I just can't find anything about reading single characters instead of whole lines. Let me explain: </p>
<p>I need to read information send by an arduino on a serial port, which is forwarded to stdin. This information is processed and stored in a text file. I wrote the programm on the arduino, so I could change how the information is send. The plan was to send the information with an start- (<code>&lt;</code>) and an endcharacter (<code>&gt;</code>), so it would look like this: <code>&lt;height:2342&gt;</code></p>
<p>There will also be a lot of irrelevant data being written, thats why I decided to use the above form, so the python script can detect the relevant information and capture it. </p>
<p>My python script would check every char individually for the start-character <code>&lt;</code>, ideally as it is entered, and then capture the information until <code>&gt;</code> is received. I tried getting the input using <code>inputchar = sys.stdin.read(1)</code>. But the problem here is that this reads from <code>stdin</code> forever, until a newline (<code>\n</code>) is captured, and then returns the first character entered. </p>
<p>I want this function to return the entered character as soon as it got send to <code>stdin</code>, and not wait for a newline. How do I achive this? </p>
<p><em>Platform: Raspberry Pi Zero W, Raspbian Jessy, Python 2.7</em></p>
<hr/>
<p><em>I know I could use</em> <code>inputline = sys.stdin.readline()</code> <em>and change the Arduino programm to send a newline after the information. Then analyze the whole line (which could be very long) and extract the information. But I don't feel this would be a clean way of doing this.</em> </p>
<hr/>
<p><strong>Update on Serial Port:</strong> Sadly I can't access the serial port directly from python because there is a second python script which has to write to the serial port. Since only one can access the port, the solution is to redirect the serial port to <code>stdin</code> and <code>stdout</code>. See my question <a href="https://unix.stackexchange.com/questions/441176/access-one-serial-port-with-two-python-scripts">Access one Serial Port with two Python Scripts</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is because your <a href="https://en.wikipedia.org/wiki/Terminal_mode" rel="nofollow noreferrer">terminal is in cooked mode</a>. You can use e.g. <a href="https://docs.python.org/3/library/tty.html#tty.setcbreak" rel="nofollow noreferrer">tty.setcbreak</a> or <a href="https://docs.python.org/3/library/curses.html#curses.cbreak" rel="nofollow noreferrer">curses.cbreak</a> to disable the line buffering. This is a Unix thing, not particularly Python specific. </p>
<p>Example:</p>
<pre><code>import sys, tty
tty.setcbreak(sys.stdin.fileno())
</code></pre>
<p>Note that this has other effects such as disabling echo and will persist when your program exits. Typically a higher level interface such as a curses context manager is used to handle key parsing (arrow keys, for instance, send escape sequences) and cleanup. </p>
<p>The primary command line tool outside of Python for this is <a href="https://linux.die.net/man/1/stty" rel="nofollow noreferrer">stty</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>I can't reproduce the behavior you are describing...</p>
<p>Executing on my Raspbian - on an RPI2:</p>
<pre><code>$ cat a.py
#!/usr/bin/env python2
import sys

while True:
    print "Got", ord(sys.stdin.read(1))


$ echo -n "Test"  | hexdump -C
00000000  54 65 73 74                                       |Test|
00000004

$ # No newline in the data sent by echo, as shown by hexdump

$ echo -n "Test"  | python2 a.py
Got 84
Got 101
Got 115
Got 116
Got
Traceback (most recent call last):
  File "a.py", line 5, in &lt;module&gt;
    print "Got", ord(sys.stdin.read(1))
TypeError: ord() expected a character, but string of length 0 found
</code></pre>
<p>Basically, the <code>sys.stdin.read(1)</code> returns with whatever character was sent from stdin, without waiting for any newline.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.stdin.read(1)</code> is a correct approach.</p>
<p>Before you hit the enter, there is no input at <code>sys.stdin</code>. That line buffering is performed outside your program and you can do nothing about it if you want to use <code>sys.stdin</code>.</p>
</div>
<span class="comment-copy">You would probably have better luck opening the serial port directly from Python (so that you have control over buffering, for example), rather than redirecting the port to stdin.</span>
<span class="comment-copy">If you're using pyserial, I'm pretty sure that can <a href="https://pythonhosted.org/pyserial/pyserial_api.html#serial.Serial.read" rel="nofollow noreferrer">read single bytes from the serial port directly</a>.</span>
<span class="comment-copy">this library handles just that --&gt; <a href="https://pypi.org/project/getch/" rel="nofollow noreferrer">pypi.org/project/getch</a></span>
<span class="comment-copy"><code>.read()</code> on a pipe (I presume that your redirection program uses pipes) will return immediately when data is available. It will not wait for a newline. My best guess is that the program that redirects the serial port is buffering its output. Perhaps it needs to call <code>.flush()</code> after it calls <code>.write()</code> on its output pipe.</span>
<span class="comment-copy">I have reproduced it at Ubuntu. Typed "test" in the CLI manually - so nothing has been sent to stdin.</span>
<span class="comment-copy">The CLI is not the same thing as a pipe sending data from a serial line - which is what the OP is asking about.</span>
<span class="comment-copy">I am not sure whether a pipe may work in cooked mode - which I expect to be responsible for the issue.</span>
<span class="comment-copy">A pipe does not go through the terminal layer - this is why <a href="https://en.wikipedia.org/wiki/Pseudoterminal" rel="nofollow noreferrer">pseutoterminals</a> exist, and openssh has a <a href="https://man.openbsd.org/ssh#t" rel="nofollow noreferrer">-t switch</a>.</span>
