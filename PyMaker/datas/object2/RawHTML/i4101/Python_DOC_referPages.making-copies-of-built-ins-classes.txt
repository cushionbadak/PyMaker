<div class="post-text" itemprop="text">
<p>I'm trying to write function which creates classes from classes without modifying original one.</p>
<p>Simple solution (based on <a href="https://stackoverflow.com/a/13379957/5997596">this answer</a>)</p>
<pre><code>def class_operator(cls):
    namespace = dict(vars(cls))
    ...  # modifying namespace
    return type(cls.__qualname__, cls.__bases__, namespace)
</code></pre>
<p>works fine except <code>type</code> itself:</p>
<pre><code>&gt;&gt;&gt; class_operator(type)
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
TypeError: type __qualname__ must be a str, not getset_descriptor
</code></pre>
<p>Tested on <strong>Python 3.2</strong>-<strong>Python 3.6</strong>.</p>
<p>(I know that in current version modification of mutable attributes in <code>namespace</code> object will change original class, but it is not the case)</p>
<h1>Update</h1>
<p>Even if we remove <code>__qualname__</code> parameter from <code>namespace</code> if there is any</p>
<pre><code>def class_operator(cls):
    namespace = dict(vars(cls))
    namespace.pop('__qualname__', None)
    return type(cls.__qualname__, cls.__bases__, namespace)
</code></pre>
<p>resulting object doesn't behave like original <code>type</code></p>
<pre><code>&gt;&gt;&gt; type_copy = class_operator(type)
&gt;&gt;&gt; type_copy is type
False
&gt;&gt;&gt; type_copy('')
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
TypeError: descriptor '__init__' for 'type' objects doesn't apply to 'type' object
&gt;&gt;&gt; type_copy('empty', (), {})
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
TypeError: descriptor '__init__' for 'type' objects doesn't apply to 'type' object
</code></pre>
<h1>Why?</h1>
<p>Can someone explain what mechanism in <strong>Python</strong> internals prevents copying <code>type</code> class (and many other built-in classes).</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is that <code>type</code> has a <code>__qualname__</code> in its <code>__dict__</code>, which is a property (i.e. a <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor</a>) rather than a string:</p>
<pre><code>&gt;&gt;&gt; type.__qualname__
'type'
&gt;&gt;&gt; vars(type)['__qualname__']
&lt;attribute '__qualname__' of 'type' objects&gt;
</code></pre>
<p>And trying to assign a non-string to the <code>__qualname__</code> of a class throws an exception:</p>
<pre><code>&gt;&gt;&gt; class C: pass
...
&gt;&gt;&gt; C.__qualname__ = 'Foo'  # works
&gt;&gt;&gt; C.__qualname__ = 3  # doesn't work
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can only assign string to C.__qualname__, not 'int'
</code></pre>
<p>This is why it's necessary to remove the <code>__qualname__</code> from the <code>__dict__</code>.</p>
<p>As for the reason why your <code>type_copy</code> isn't callable: This is because <code>type.__call__</code> rejects anything that isn't a subclass of <code>type</code>. This is true for both the 3-argument form:</p>
<pre><code>&gt;&gt;&gt; type.__call__(type, 'x', (), {})
&lt;class '__main__.x'&gt;
&gt;&gt;&gt; type.__call__(type_copy, 'x', (), {})
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: descriptor '__init__' for 'type' objects doesn't apply to 'type' object
</code></pre>
<p>As well as the single-argument form, which actually only works with <code>type</code> as its first argument:</p>
<pre><code>&gt;&gt;&gt; type.__call__(type, 3)
&lt;class 'int'&gt;
&gt;&gt;&gt; type.__call__(type_copy, 3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: type.__new__() takes exactly 3 arguments (1 given)
</code></pre>
<p>This isn't easy to circumvent. Fixing the 3-argument form is simple enough: We make the copy an empty subclass of <code>type</code>.</p>
<pre><code>&gt;&gt;&gt; type_copy = type('type_copy', (type,), {})
&gt;&gt;&gt; type_copy('MyClass', (), {})
&lt;class '__main__.MyClass'&gt;
</code></pre>
<p>But the single-argument form of <code>type</code> is much peskier, since it only works if the first argument is <code>type</code>. We can implement a custom <code>__call__</code> method, but that method must be written in the metaclass, which means <code>type(type_copy)</code> will be different from <code>type(type)</code>.</p>
<pre><code>&gt;&gt;&gt; class TypeCopyMeta(type):
...     def __call__(self, *args):
...         if len(args) == 1:
...             return type(*args)
...         return super().__call__(*args)
... 
&gt;&gt;&gt; type_copy = TypeCopyMeta('type_copy', (type,), {})
&gt;&gt;&gt; type_copy(3)  # works
&lt;class 'int'&gt;
&gt;&gt;&gt; type_copy('MyClass', (), {})  # also works
&lt;class '__main__.MyClass'&gt;
&gt;&gt;&gt; type(type), type(type_copy)  # but they're not identical
(&lt;class 'type'&gt;, &lt;class '__main__.TypeCopyMeta'&gt;)
</code></pre>
<hr/>
<p>There are two reasons why <code>type</code> is so difficult to copy:</p>
<ol>
<li>It's implemented in C. You'll run into similar problems if you try to copy other builtin types like <code>int</code> or <code>str</code>.</li>
<li><p>The fact that <code>type</code> is an instance of <em>itself</em>:</p>
<pre><code>&gt;&gt;&gt; type(type)
&lt;class 'type'&gt;
</code></pre>
<p>This is something that's usually not possible. It blurs the line between class and instance. It's a chaotic accumulation of instance and class attributes. This is why <code>__qualname__</code> is a string when accessed as <code>type.__qualname__</code> but a descriptor when accessed as <code>vars(type)['__qualname__']</code>. </p></li>
</ol>
<hr/>
<p>As you can see, it's not possible to make a perfect copy of <code>type</code>. Each implementation has different tradeoffs.</p>
<p>The easy solution is to make a subclass of <code>type</code>, which doesn't support the single-argument <code>type(some_object)</code> call:</p>
<pre><code>import builtins

def copy_class(cls):
    # if it's a builtin class, copy it by subclassing
    if getattr(builtins, cls.__name__, None) is cls:
        namespace = {}
        bases = (cls,)
    else:
        namespace = dict(vars(cls))
        bases = cls.__bases__

    cls_copy = type(cls.__name__, bases, namespace)
    cls_copy.__qualname__ = cls.__qualname__
    return cls_copy
</code></pre>
<p>The elaborate solution is to make a custom metaclass:</p>
<pre><code>import builtins

def copy_class(cls):
    if cls is type:
        namespace = {}
        bases = (cls,)

        class metaclass(type):
            def __call__(self, *args):
                if len(args) == 1:
                    return type(*args)
                return super().__call__(*args)

        metaclass.__name__ = type.__name__
        metaclass.__qualname__ = type.__qualname__
    # if it's a builtin class, copy it by subclassing
    elif getattr(builtins, cls.__name__, None) is cls:
        namespace = {}
        bases = (cls,)
        metaclass = type
    else:
        namespace = dict(vars(cls))
        bases = cls.__bases__
        metaclass = type

    cls_copy = metaclass(cls.__name__, bases, namespace)
    cls_copy.__qualname__ = cls.__qualname__
    return cls_copy
</code></pre>
</div>
<span class="comment-copy">I would imagine there are all sorts of corner cases that prevent <code>dict(vars(cls))</code> from providing a suitable basis for <i>duplicating</i> a class. What is your use case that you need a copy of a type rather than just subclassing it?</span>
<span class="comment-copy">Note that you aren't modifying the original type; you are just making a poor copy of the original. Are you expecting <code>type_copy is type</code> to be true? That <i>never</i> will be, unless <code>class_operator</code> simply returns <code>type</code> itself.</span>
<span class="comment-copy">@chepner: i am waiting <code>type_copy is type</code> to be <code>False</code> (i know what <a href="https://docs.python.org/3/reference/expressions.html#is" rel="nofollow noreferrer">operator <code>is</code></a> does)</span>
<span class="comment-copy">thanks and please check <b>Update</b> part of the question</span>
<span class="comment-copy">@AzatIbrakov Yeah, I didn't notice the update while I was busy writing my answer... gimme a sec</span>
<span class="comment-copy">it's close, but <code>type_copy('')</code> will give us <code>TypeError: type.__new__() takes exactly 3 arguments (1 given)</code></span>
<span class="comment-copy">@AzatIbrakov Updated.</span>
<span class="comment-copy">This is still going to fail on pretty much any built-in type, not just <code>type</code>. It'll fail especially hard for <code>type</code>, but it won't work right for other types, either. For example, if you try to copy <code>int</code> this way, instances of the result don't support arithmetic, hashing, or pretty much any of the functionality of <code>int</code>. The dict-level copy just can't reach deep enough into the C to copy what needs to be copied.</span>
