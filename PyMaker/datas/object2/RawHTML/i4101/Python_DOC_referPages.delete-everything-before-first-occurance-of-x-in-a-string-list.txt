<div class="post-text" itemprop="text">
<p>I'm stuck on something, I have a string list that is filled similar to this:</p>
<pre><code>['one', 'two', 'asdf', 'asdf', 'stuff', 'other', 'asdf', 'other stuff', 'asdf','asdf']
</code></pre>
<p>This list changes constantly, but the one constant is that 'asdf' will always be there,  the data before the first <code>asdf</code> and after it is what changes.</p>
<p>My issue is I either need to Remove all the strings in the list BEFORE the first asdf (in the example it would be one and two)
or count everything After the first asdf.</p>
<p>I'm using: </p>
<pre><code>data2 = normalize_line_endings(data)
data3 = data2.split('\n')
data3 = list(map(lambda x: str(x) if x else 'asdf' , data3))
print(data3)
target_ibdex = data3.rindex('asdf')
target_ibdex2 = target_ibdex
print(data3[:target_ibdex - target_ibdex2])
</code></pre>
<p>However when it runs, its using the very last <code>asdf</code>, so it just deletes the entire string.</p>
<p>I need:</p>
<pre><code>a=['one', 'two', 'asdf', 'asdf', 'stuff', 'other', 'asdf', 'other stuff', 'asdf','asdf']
b = code to delete everything before FIRST asdf
len(b)
where b's value is now 8 instead of 10. since one,two got removed.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer">list.index()</a> like:</p>
<h3>Code:</h3>
<pre><code>b = a[a.index('asdf'):]
</code></pre>
<h3>Test Code:</h3>
<pre><code>a = ['one', 'two', 'asdf', 'asdf', 'stuff', 'other', 'asdf', 'other stuff',
     'asdf', 'asdf']

b = a[a.index('asdf'):]
print(b)
</code></pre>
<h3>Results:</h3>
<pre><code>['asdf', 'asdf', 'stuff', 'other', 'asdf', 'other stuff', 'asdf', 'asdf']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a perfect use-case for <code>itertools.dropwhile</code>, if you actually need the elements after:</p>
<pre><code>In [1]: a = ['one', 'two', 'asdf', 'asdf', 'stuff', 'other', 'asdf', 'other stuff', 'asdf','asdf']

In [2]: import itertools

In [3]: list(itertools.dropwhile(lambda x: x != 'asdf', a))
Out[3]: ['asdf', 'asdf', 'stuff', 'other', 'asdf', 'other stuff', 'asdf', 'asdf']
</code></pre>
<p>Of course, if you just need the count of elements after, you can simply do:</p>
<pre><code>In [4]: len(a) - a.index('asdf')
Out[4]: 8
</code></pre>
</div>
<span class="comment-copy">and this is why i posted, i spent an hour on this and my own stupidity in not taking a break got me lol.  Ive also since realized that the two "ibdex" variables are the same, and an awkward way of writing data3[:0], which is an empty list. lol</span>
