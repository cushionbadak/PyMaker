<div class="post-text" itemprop="text">
<p>Really struggling with something that should be pretty basic. I'm looking to identify instances where \n does not have a reciprocal \r (i.e. \r\n is good x\n is bad and would ). </p>
<p>I appreciate this is because python 2 managed 'rb' differently but can't work out the equivalent function or way of identifying \r in python 3.</p>
<pre><code>import re
import sys
import time
with open('4 - raw.txt', 'rb') as content_file:
    content = content_file.read()

newLinePos = [m.start() for m in re.finditer('\n', content)]

for line in newLinePos:
    if (content[line-1]) != '\r':
        print (repr(content[line-20:line]))

print ("end")
time.sleep(1000)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 makes a clear distinction between raw byte strings, and utf-8 string. <code>content[line-1]</code> is returning a number, probably 0-255 - the byte, and you are trying to match it to a string, <code>'\r'</code>. I agree possibly the conversion could be made, but Python is strongly typed, so this will always fail, regardless of what character the integer represents. To get the <code>byte</code> number corresponding to <code>\r</code> use:</p>
<pre><code>(content[line-1]) != ord('\r')
</code></pre>
<p>and similarly use a bytes string for your iterator generation:</p>
<pre><code>newLinePos = [m.start() for m in re.finditer(b'\n', content)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to find the location of line feed / newline (<code>\n</code>) characters not preceded by a carriage return (<code>\r</code>) you can use a <em>negative</em> <em>lookbehind</em> <em>assertion</em> regular expression.</p>
<pre><code>&gt;&gt;&gt; lines = ['foo', 'ba\nr', 'baz', 'quux']
&gt;&gt;&gt; content = '\r\n'.join(lines).encode('utf-8')
&gt;&gt;&gt; content
b'foo\r\nba\nr\r\nbaz\r\nquux'
&gt;&gt;&gt; pattern = b'(?&lt;!\r)\n'
&gt;&gt;&gt; newLinePos = [m.start() for m in re.finditer(pattern, content)]
&gt;&gt;&gt; newLinePos
[7]
&gt;&gt;&gt; content[5:8]
b'ba\n'
</code></pre>
<p>There are a couple of things to note.</p>
<ol>
<li><code>content</code> is a <code>bytes</code> instance; when you read from a file in 'rb' mode you'll get bytes.</li>
<li><code>pattern</code> needs to be a bytes instance, because the sequence being searched is a bytes instance.</li>
<li>The pattern <code>(?&lt;!\r)\n</code> matches if the character following the parentheses (<code>\n</code>) is not preceded by the <code>\r</code>.  See the <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">re documentation</a> for a full description. </li>
</ol>
</div>
