<div class="post-text" itemprop="text">
<p>Okay, I've got a file structure like the following:</p>
<ul>
<li>main.py/</li>
<li>paquete/

<ul>
<li>__ init__.py</li>
<li>test1.py</li>
</ul></li>
</ul>
<p>This is what I've got in my main.py:</p>
<pre><code>from paquete import testFunc


def main():
    testFunc()


if __name__ == '__main__':
    main()
</code></pre>
<p>This is what I've got in my test1.py:</p>
<pre><code>def testFunc():
    print("Hello from test1 function!")
</code></pre>
<p>And this is what I've got in my __ init__.py:</p>
<pre><code>from test1 import testFunc
</code></pre>
<p>But that doesn't work, it says that there's no module named test1.</p>
<p>However, if I have something like:</p>
<pre><code>from paquete.test1 import testFunc
</code></pre>
<p>It works perfect. But I don't get it, if __ init__.py it's in the same directory as test1, why do I need to prefix it with the name of the directory as if I was working from the root level of the project? </p>
</div>
<div class="post-text" itemprop="text">
<p>What you are currently using is called an <strong>implicit relative import.</strong>  It was deprecated in Python 3.x and this is mentioned in <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">PEP 8</a>.</p>
<p>You can still use a relative import; it just needs to use the <a href="https://docs.python.org/3.6/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">syntax</a> described below, with leading dots:</p>
<blockquote>
<p>These imports use leading dots to indicate the current and parent packages involved in the relative import.</p>
</blockquote>
<pre><code># Relative
from .test1 import testFunc

# Absolute
from paquete.test1 import testFunc
</code></pre>
<p>Also a <a href="https://docs.python.org/3.0/whatsnew/3.0.html#removed-syntax" rel="nofollow noreferrer">reference</a> - </p>
<blockquote>
<p>The only acceptable syntax for relative imports is <code>from .[module] import name</code>. All import forms not starting with <code>.</code> are interpreted as absolute imports. (PEP 0328).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>That's because <code>paquete</code> is in your <code>sys.path</code> but the insides of the package are not. So you can make absolute imports for <code>paquete</code> package but can only make relative imports for its insides. <code>paquete</code> is on you <code>sys.path</code> because it is in the same directory are you main.py.</p>
<p>You can set the <code>__path__</code> attribute before the imports to get the insides of the package to be considered by the import statement.</p>
<p>Take a look at this for reference <a href="https://docs.python.org/3/reference/import.html#module-path" rel="nofollow noreferrer">https://docs.python.org/3/reference/import.html#module-path</a></p>
</div>
<span class="comment-copy">I wish I could mark two responses as accepted. Haha Thank you for your response, everything makes more sense now.</span>
<span class="comment-copy">Uhm that makes more sense now. Thank you for your response. :)</span>
