<div class="post-text" itemprop="text">
<p>I am trying to pack a char to bytes with python using the struct package but my code won't return 4 bytes when packing the char using this code:</p>
<pre><code>def charToHex(s):
#check if string is unicode
if isinstance(s, str):
    print(struct.pack('&lt;c', 'a'.encode(encoding='utf-8')))
    return '{:02x}'.format(struct.unpack('&lt;I', struct.pack('&lt;c', s.encode('utf-8')))[0])

#check if input is already a byte
elif isinstance(s, bytes):
    return '{:02x}'.format(struct.unpack('&lt;I', struct.pack('&lt;c', s))[0])

else:
    raise Exception()
</code></pre>
<p>Can anyone explain to me why this won't work? I am just trying to convert the unicode char to 4 bytes and unpack it but it won't even pack correct.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/struct.html#format-characters" rel="nofollow noreferrer"><code>c</code> format</a> is <code>char</code> in the C sense of a single byte, not the Python sense of a Unicode code point.</p>
<p>Meanwhile, the whole point of UTF-8 is that it's variable width. A character may encode to anything from 1 to 4 bytes. So you can't pack that into a <code>c</code>. You could pad it out to 4 bytes and then pack it into a <code>4c</code> or an <code>I</code> or something, but that's a pretty silly thing to do.</p>
<p>If you want to use exactly 4 bytes for each character, much simpler to just use UTF-32. Or, since the UTF-32 encoding of a single character is just the Unicode code point as a 4-byte int, and that's exactly the same thing that <code>ord</code> returns, you can just skip the <code>encode</code> step. </p>
<p>For a single-char <code>bytes</code>, it <em>does</em> make sense to pack as a <code>c</code>—but then it makes no sense to unpack that as an <code>i</code>.</p>
<p>In fact, it's not clear what you're even using <code>struct</code> for here. If all you're trying to do is <code>pack</code> a number and <code>unpack</code> the same number, just use the number as-is.</p>
<p>Meanwhile, <code>02x</code> doesn't make much sense as a format for a 4-byte integer, because a 4-byte integer takes 8 hex digits, not 2.</p>
<p>So, what you probably wanted was something like this:</p>
<pre><code>def charToHex(s):
    #check if string is unicode
    if isinstance(s, str):
        return format(ord(s), '08x')
    #check if input is already a byte
    elif isinstance(s, bytes):
        return format(ord(s), '02x')
</code></pre>
</div>
<span class="comment-copy">The <a href="https://docs.python.org/3/library/struct.html#format-characters" rel="nofollow noreferrer"><code>c</code> format</a> is <code>char</code> in the C sense of a single byte, not the Python sense of a Unicode code point. Since the UTF-8 encoding of a Unicode character is anywhere from 1 to 4 bytes, you can't <code>pack</code> it as a <code>c</code>. You'd have to do something silly like pad it out to 4 bytes and pack that as <code>4c</code> (at which point it's a lot simpler to use UTF-32 instead of UTF-8).</span>
<span class="comment-copy">Thank you so much! I did the 02x because I wanted the output to be two hex numbers instead of the whole thing as it is because I want it to return only two hex numbers.</span>
<span class="comment-copy">@Silver So what two hex digits do you want to return for a non-ASCII character like <code>ł</code> whose code point is 3 or more digits long in hex?</span>
<span class="comment-copy">Aaah I get your point but the program won't take non-ASCII characters as an input and I have to stick to the requirements for this program.</span>
<span class="comment-copy">@Silver In that case, you could <code>s = s.encode(‘ascii')</code> if given a <code>str</code>, and then only deal with the <code>bytes</code> case. (If someone does pass you a non-ASCII character somehow, you’ll get an exception from the encode.) But you can just use <code>02x</code> as you say. In that case if you get non-ASCII characters somehow, you’ll end up returning 3 or 4 or 7 digits instead of 2 and probably screwing up your output instead of raising an exception. Which wouldn’t be great for a production web server, but for homework that didn’t even mention non ASCII characters, yeah, I’ll bet it’s fine.</span>
