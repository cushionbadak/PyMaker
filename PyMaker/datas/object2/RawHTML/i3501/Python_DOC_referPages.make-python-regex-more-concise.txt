<div class="post-text" itemprop="text">
<p>I'm still quite unfamiliar with Python, albeit I have quite a bit of experience with JavaScript, so it's really only the idiosyncrasies of Python that I need to work on. Considering that, and the fact that I know there are some subtle differences between JS RegEx and Python RegEx, I have a question about a Python RegEx statement. Is there any way to make the following statement more concise?</p>
<p><strong>The Whole Regular Expression</strong></p>
<pre><code>^https://www.indiegogo.com/explore/[a-z]+-?[a-z]+\?project_type=[a-z]+&amp;project_timing=[a-z]+_?[a-z]+&amp;tags=&amp;sort=trending$
</code></pre>
<p><code>^https://www.indiegogo.com/explore/[a-z]+-?[a-z]+\?project_type=[a-z]+&amp;project_timing=[a-z]+_?[a-z]+&amp;tags=&amp;sort=trending$</code></p>
<p><strong>Breakdown of the Whole Regular Expression</strong></p>
<p>I'll break this down further for you. The URL address will always begin with <em><code>^https://www.indiegogo.com/explore/</code></em> and always end with <em><code>&amp;tags=&amp;sort=trending$</code></em>, so no need to worry about this, but...</p>
<p><code>[a-z]+-?[a-z]+\?project_type=[a-z]+&amp;project_timing=[a-z]+_?[a-z]+</code></p>
<p>...is the specific part of the regular expression that matters, which can be broken down even further.</p>
<p><strong>URL Structure and Possible Formats of Dynamic Values</strong></p>
<ol>
<li><code>^https://www.indiegogo.com/explore/</code></li>
<li><code>word</code> or <code>dash-separated</code> or <code>separated-by-dashes</code> or <code>words-separated-by-dashes</code></li>
<li><code>?project_type=</code></li>
<li><code>word</code></li>
<li><code>&amp;project_timing=</code></li>
<li><code>word</code> or <code>additional_word</code></li>
<li><code>&amp;tags=&amp;sort=trending$</code></li>
</ol>
<p>Steps <code>1.</code>, <code>3.</code>, <code>5.</code>, and <code>7.</code> can be ignored altogether, which leaves us with...</p>
<p><strong>The Only Dynamic Values</strong></p>
<p>    2. <code>word</code> or <code>dash-separated</code> or <code>separated-by-dashes</code> or <code>words-separated-by-dashes</code><br/></p>
<p>    6. <code>word</code> or <code>additional_word</code><br/></p>
<p><em>It may be my own ignorance or inexperience, but the regular expression I've devised seems clunky so to speak.</em> <strong>Is there any way to improve this regular expression?!</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Without having any sample URLs to test with, the simplest solution I could find is this:</p>
<p><code>^https:\/\/www.indiegogo.com\/explore\/[a-z\-?_=]+&amp;project_timing=[a-z_]+&amp;tags=&amp;sort=trending$</code></p>
<p>So here's a breakdown of what I did differently:</p>
<ul>
<li>Instead of <code>[a-z]+-?[a-z]+\?project_type=[a-z]+</code>, I simplified it with <code>[a-z\-?_=]+</code></li>
<li>Instead of <code>[a-z]+_?[a-z]+</code> I used <code>[a-z_]+</code></li>
</ul>
<p>The only issue I saw was that you aren't taking full advantage of your character classes. If you would like to provide a few sample URLs I'd be able to fix any issues you might run into. <a href="https://regex101.com/r/6RckWL/15" rel="nofollow noreferrer">But as far as I can tell, it does what you need it to.</a></p>
<p>You can also use <code>^https:\/\/www.indiegogo.com\/explore\/[\w\-]+&amp;project_timing=[\w]+&amp;tags=&amp;sort=trending$</code> if you <strong>really</strong> want to simplify, but that might not be restrictive enough.</p>
</div>
<span class="comment-copy">Parsing URLs in Python is easier with <a href="https://docs.python.org/3/library/urllib.parse.html" rel="nofollow noreferrer"><code>urlparse</code></a>.</span>
<span class="comment-copy">@WiktorStribiżew i'm not trying to parse the url. i need a regex for an object in a particular framework</span>
<span class="comment-copy">You could compile each piece of the regex separately so they're more manageable, and then join them together as in this answer: <a href="https://stackoverflow.com/questions/22102814/pythonic-way-to-concatenate-regex-objects" title="pythonic way to concatenate regex objects">stackoverflow.com/questions/22102814/…</a></span>
<span class="comment-copy">@divibisan interesting!</span>
<span class="comment-copy">@davedwards i'm not looking to concatenate a regex object... that was simply somebody's suggestion</span>
<span class="comment-copy">god, i keep writing messages to you and then editing my question and it keeps erasing my messages. the first bit in your initial comment (i.e. using <code>\w</code>, etc) wouldn't have worked since it would've matched much more than just alphabet characters, but it got me thinking, and, yeah, <code>2. [a-z-]+</code> and <code>6. [a-z_]</code> are definitely improvements</span>
<span class="comment-copy">I'm not sure what your requirements are exactly, but <code>^https:\/\/www.indiegogo.com\/explore\/[a-z\-&amp;_=]+$</code> matches the sample URL I used too. The only issue is it doesn't require the URL to contain <code>&amp;project_timing=</code> or <code>&amp;tags=&amp;sort=trending</code>. I'm not sure if that's important to you.</span>
<span class="comment-copy">If the beginning and end is all you care about <code>^https:\/\/www.indiegogo.com\/explore\/[a-z\-&amp;_=]+&amp;tags=&amp;sort=trending$</code> works too.</span>
<span class="comment-copy">that format of the urls i listed in my questions is specific to the way in which the links i want are structured. when you start messing with the other stuff, there's a good chance i may end up matching stuff i don't want to :/</span>
<span class="comment-copy">Such is the regex struggle...</span>
