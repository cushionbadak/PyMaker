<div class="post-text" itemprop="text">
<p>As a data scientist / machine learning developer, I have most of the time (always?) a <code>load_data</code> function. Executing this function often takes more than 5 minutes, because the executed operations are expensive. When I store the end result of <code>load_data</code> in a pickle file and read that file again, then the time often goes down to a few seconds.</p>
<p>So a solution I use quite often is:</p>
<pre><code>def load_data(serialize_pickle_path, original_filepath):
    invalid_hash = True

    if os.path.exists(serialize_pickle_path):
        content = mpu.io.read(serialize_pickle_path)
        data = content['data']
        invalid_hash = mpu.io.hash(original_filepath) != content['hash']

    if invalid_hash:
        data = load_data_initial()
        filehash = mpu.io.hash(original_filepath)
        mpu.io.write(serialize_pickle_path, {'data': data, 'hash': filehash})

    return data
</code></pre>
<p>This solution has a major drawback: If the <code>load_data_initial</code> changed, the file will not be reloaded.</p>
<p><strong>Is there a way to check for changes in Python functions?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you're asking whether there's a way to tell whether someone changed the source code of the function between the last time you quit the program and the next time you start it…</p>
<p>There's no way to do this directly, but it's not that hard to do manually, if you don't mind getting a little hacky.</p>
<p>Since you've <code>import</code>ed the module and have access to the function, you can use the <a href="https://docs.python.org/3/library/inspect.html#inspect.getsource" rel="nofollow noreferrer"><code>getsource</code></a> function to get its source code. So, all you need to do is save that source. For example:</p>
<pre><code>def source_match(source_path, object):
    try:
        with open(source_path) as f:
            source = f.read()
        if source == inspect.getsource(object):
            return True
    except Exception as e:
        # Maybe log e or something here, but any of the obvious problems,
        # like the file not existing or the function not being inspectable,
        # mean we have to re-generate the data
        pass
    return False

def load_data(serialize_pickle_path, original_filepath):
    invalid_hash = True
    if os.path.exists(serialize_pickle_path):
        if source_match(serialize_pickle_path + '.sourcepy', load_data_initial):
            content = mpu.io.read(serialize_pickle_path)
            data = content['data']
            invalid_hash = mpu.io.hash(original_filepath) != content['hash']
    # etc., but make sure to save the source when you save the pickle too
</code></pre>
<hr/>
<p>Of course even if the body of the function hasn't changed, its effect might change because of, e.g., a change in some module constant, or the implementation of some other function it uses. Depending on how much this matters, you could pull in the entire module it's defined in, or that module plus every other module that it recursively depends on, etc.</p>
<p>And of course you can also save hashes of text instead of the full text, to make things a little smaller. Or embed them in the pickle file instead of saving them alongside.</p>
<p>Also, if the source isn't available because it comes from an module you only distribute in <code>.pyc</code> format, you obviously can't check the source. You could pickle the function, or just access its <code>__code__</code> attribute. But if the function comes from a C extension module, even that won't work. At that point, the best you can do is check the timestamp or hash of the whole binary file.</p>
<p>And plenty of other variations. But this should be enough to get you started.</p>
<hr/>
<p>A completely different alternative is to do the checking as part of your development workflow, instead of as part of the program.</p>
<p>Assuming you're using some kind of version control (if not, you really should be), most of them come with some kind of commit hook system. For example, <code>git</code> comes with <a href="https://githooks.com/" rel="nofollow noreferrer">a whole slew of options</a>. For example, if you have a program named <code>.git/hooks/pre-commit</code>, it will get run every time you try to <code>git commit</code>. </p>
<p>Anyway, the simplest pre-commit hook would be something like (untested):</p>
<pre><code>#!/bin/sh
git diff --name-only | grep module_with_load_function.py &amp;&amp; python /path/to/pickle/cleanup/script.py
</code></pre>
<p>Now, every time you do a <code>git commit</code>, if the diffs include any change to a file named <code>module_with_load_function.py</code> (obviously use the name of the file with <code>load_data_initial</code> in it), it will first run the script <code>/path/to/pickle/cleanup/script.py</code> (which is a script you write that just deletes all the cached pickle files).</p>
<p>If you've edited the file but know you don't need to clean out the pickles, you can just <code>git commit --no-verify</code>. Or you can expand on the script to have an environment variable that you can use to skip the cleaning, or to only clean certain directories, or whatever you want. (It's probably better to default to cleaning overzealously—worst-case scenario, when you forget every few weeks, you waste 5 minutes waiting, which isn't as bad as waiting 3 hours for it to run a bunch of processing on incorrect data, right?)</p>
<p>You can expand on this to, e.g., check the complete diffs and see if they include the function, instead of just checking the filenames. The hooks are just anything executable, so you can write them in Python instead of bash if they get too complicated.</p>
<p>If you don't know <code>git</code> all that well (or even if you do), you'll probably be happier installing a third-party library like <a href="https://pre-commit.com/" rel="nofollow noreferrer"><code>pre-commit</code></a> that makes it easier to manage hooks, write them in Python (without having to deal with complicated <code>git</code> commands), etc. If you <em>are</em> comfortable with <code>git</code>, just looking at <a href="https://github.com/git/git/blob/master/templates/hooks--pre-commit.sample" rel="nofollow noreferrer"><code>hooks--pre-commit.sample</code></a> and some of the other samples in the <code>templates</code> directory should be enough to give you ideas.</p>
</div>
<span class="comment-copy">What do you mean by "changed"? You mean someone edited the source code between the last time you quit the program and the next time you start it?</span>
<span class="comment-copy">Well, you (the developer) are the only one who can know whether the result of <code>load_data_initial</code> has changed. You need to implement that logic somewhere. Python cannot know that without calling the function again (which you have if you remove all of the caching).</span>
<span class="comment-copy">@abarnert Exactly. And that someone is most of the time myself. This question is NOT about security.</span>
<span class="comment-copy">I've added an answer to give you some ideas, but you might want to consider a different approach: changing your workflow. Hopefully you're using some kind of version control software, like git? If so, why not just (a) add a script that wipes out your cached pickles, then (b) add a commit hook that, whenever you change the relevant module, runs that script? (You can always use the no-hook flag if you occasionally need to change the module without regenerating your pickles—worst-case scenario, you forget once every week or two and lose 5 minutes…)</span>
<span class="comment-copy">@zvone As abarnert posted an answer that does exactly what I was looking for, I think your proven wrong.</span>
