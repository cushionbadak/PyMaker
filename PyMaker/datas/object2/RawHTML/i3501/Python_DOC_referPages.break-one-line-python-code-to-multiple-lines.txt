<div class="post-text" itemprop="text">
<p>How to break one line code into multiple descriptive line because i am unable to understand this one line code.</p>
<pre><code>data = formatted_data + "|" + '|'.join(["{}".format(a) for b, a in sorted(values.items()) if a and b not in ['SecureHash']])
</code></pre>
<p>Is this correct or not any one help me:</p>
<pre><code>for b, a in sorted(values.items()):
    if a and b not in ['SecureHash']:
        c = ["{}".format(a)]
        data = formatted_data + "|" + "|".join(c)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, generally you can see any opening bracket and the plus operators in the string as a "breaking point". Working with your example:</p>
<pre><code>data = formatted_data
data += "|"
data += '|'.join(["{}".format(a) for b, a in sorted(values.items()) if a and b 
not in ['SecureHash']])
</code></pre>
<p>OK so now we need to unpack what's happening in that join:</p>
<pre><code>data = formatted_data
data += "|"
jointmp = ["{}".format(a) for b, a in sorted(values.items()) if a and b not in ['SecureHash']]
data += '|'.join(jointmp)
</code></pre>
<p>OK so we've got some string formatting and a bunch of list comprehensions:</p>
<pre><code>data = formatted_data
data += "|"

jointmp = []
for b, a in sorted(values.items()):
  if a and b not in ['SecureHash']:
      jointmp += ["{}".format(a)] # Equivalent to str(a) ?

data += '|'.join(jointmp)
</code></pre>
<p>To do the last stage there was a lot of going back and for as things were expanded. Those list comprehensions are quite terse...</p>
<p>There are some questions here though:</p>
<ul>
<li>Where did <code>values</code> come from?</li>
<li>What's the <code>"{}".format(a)</code> for?</li>
</ul>
<p>etc.</p>
<p>Your "expanded" code is not quite equivalent because you don't handle the case where there are no matches / <code>values</code> is empty and you are replacing <code>data</code> each time rather than growing it.</p>
</div>
<div class="post-text" itemprop="text">
<p>This code is collecting a string representation of <code>a</code>, and then building another string with it.</p>
<p>You need to define an external list, to account for the list comprehension expression.</p>
<pre><code>c = ["{}".format(a) for b, a in sorted(values.items()) if a and b not in ['SecureHash']]
</code></pre>
<p>Further, to break down how <code>c</code> is being assembled, you can expand the list comprehension:</p>
<pre><code>c = []
for b, a in sorted(values.items()):
    if a and b not in ['SecureHash']:
        c.append('{}'.format(a))
</code></pre>
<p>Finally, just combine the three parts:</p>
<pre><code>data = formatted_data + "|" + "|".join(c)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You might want to read up on <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a>. </p>
<p>basically it's making a list of things like this:<br/>
<code>[item for item in iterable_thing]</code> </p>
<p>so this one is making a list of strings (<code>"{}".format(a)</code>). I assume <code>a</code> is a hash, but let's pretend it's a number in a range:<br/>
<code>["{}".format(a) for a in range(5)]</code><br/>
will make:<br/>
<code>&gt;&gt;&gt;['0', '1', '2', '3', '4']</code></p>
<p>Comprehensions can become quite complicated with the addition of <code>if</code> statements, and whoever wrote this code is one of those <code>a in b in i in j</code> kind of people, it seems, so their code is hard to follow. Good variable names are SO important.</p>
</div>
<span class="comment-copy">line breaks between <code>()</code> are legal so you can hit Enter after the first <code>join(</code> for example</span>
<span class="comment-copy">your code seems to be correct only thing that if you want to use c as a list you can use it as <code>c = [a]</code> or remove c assignment change data to <code>data = formatted_data + "|" + "|".join([a])</code></span>
<span class="comment-copy">Thanks @Burhan Khalid.</span>
<span class="comment-copy">Also, the function is making a list first using that comprehension, and then joining the items in the list together with pipe characters <code>|</code> -- so this line:   <code>"|" + "|".join( [ "{}".format(a) for a in range(5) ] )</code>   will output:   <code>&gt;&gt;&gt;"|0|1|2|3|4"</code></span>
