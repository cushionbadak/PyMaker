<div class="post-text" itemprop="text">
<p>I have found a lot of documentation and tutorials such as the <a href="https://docs.python.org/3.6/library/logging.config.html#logging-config-api" rel="nofollow noreferrer">official <code>logging</code> config docs</a>, the <a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-cookbook" rel="nofollow noreferrer">official <code>logging</code> cookbook</a>, and this <a href="https://fangpenlin.com/posts/2012/08/26/good-logging-practice-in-python/" rel="nofollow noreferrer">nice tutorial by Fang</a>.</p>
<p>Each of them have gotten me near to an answer, but not quite.  My question is this:</p>
<h1>When using Config Files, how can I use a logger with 2 separate handlers at 2 separate levels?</h1>
<hr/>
<p>To clarify, here is an example of my YAML file:</p>
<pre><code>---
version: 1
handlers:
  debug_console:
    class: logging.StreamHandler
    level: DEBUG
.
.
.

  info_file_handler:
    class: logging.handlers.RotatingFileHandler
    level: INFO
.
.
.

loggers:
  dev:
    handlers: [debug_console, info_file_handler]
  test:
    handlers: [info_file_handler]
root:
  handlers: [info_file_handler]
</code></pre>
<p>I want to have <strong>two ways</strong> to run the logger, where one way (<code>dev</code>) is more verbose than the other.  <strong>Moreover, when running the <code>dev</code> logger, I want it to have two different levels for the two different handlers.</strong></p>
<p>This is a snippet of the code to try to launch the logger:</p>
<pre><code>with open('logging.yaml', 'r') as f:
  log_cfg = yaml.safe_load(f.read())
  logging.config.dictConfig(log_cfg)
  my_logger = logging.getLogger('dev')
</code></pre>
<hr/>
<p>The <code>dictConfig</code> line above works correctly.  I say this because when I get to the code which asks to log to the console, I will see <code>dev</code> as the name when the log prints out.  (I have edited the yaml, but it contains <code>%(name)s</code> in the format.)</p>
<p>But there is something wrong with <code>my_logger</code>.  <strong>Even though</strong> it is tied to the <em>name</em> of <code>dev</code>, none of the rest of the attributes seem to have been set.  Specifically, I see:</p>
<pre><code>&gt;&gt;&gt; my_logger
&lt;Logger dev_model (WARNING)&gt;
</code></pre>
<p>I don't know the <code>logging</code> module well enough to understand where the problem is.  What I <em>want</em> is:</p>
<h3>When I activate the <code>'dev'</code> logger, I want to launch 2 handlers, one which is at the <code>DEBUG</code> level and writes to console, the other which is at the <code>INFO</code> level and writes to a file.</h3>
<p>How can this be done?</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand the question correctly, the problem is caused by the fact the logger itself has a log level, not just handlers. Logger's log level defaults to <code>WARNING</code>, which seems to be set on your logger. If a generated message has a lower priority than the logger's level then it does not even make to the handlers.</p>
<p>So try setting logger's <code>level</code> to <code>DEBUG</code>. <code>info_file_handler</code> should ignore any messages more verbose than it's own level.</p>
<p>As for this part:</p>
<blockquote>
<p>none of the rest of the attributes seem to have been set.</p>
</blockquote>
<p>What happens there is logger's <code>repr()</code> method is called to convert Logger to some sort of string representation in order to render it. Which is not guaranteed to show all the attributes of the object.</p>
</div>
<div class="post-text" itemprop="text">
<p>Such a long question... Too long for me to understand well.</p>
<p>But I think you misunderstand how handlers work. Actually logger itself doesn't output anything but handlers do.</p>
<p>So let's say if you set <code>DEBUG</code> on <code>dev</code> logger, it will pass logs &gt;= <code>DEBUG</code> to all handlers. And then <code>debug_console</code> handler will process logs &gt;= <code>DEBUG</code> but <code>info_file_handler</code> will only process logs &gt;= <code>INFO</code>. Setting <code>DEBUG</code> on <code>dev</code> logger won't let <code>info_file_handler</code> output logs &lt; <code>INFO</code>. So you do can have two separate levels which one is &gt;= <code>DEBUG</code> and goes to console while another is &gt;= <code>INFO</code> and goes to file.</p>
<p>I am presuming I understand you rightly...</p>
</div>
<span class="comment-copy">Wow!  That's it, @dvk!  I was hoping it was something this simple.  I <i>assumed</i> that if I didn't set the <code>level</code> on the <code>logger</code>, the level would match that of the <code>handler</code>.  Not so!  If I may ask a follow-up?  Why not just put either <code>NOTSET</code> or <code>DEBUG</code> on all of my <code>logger</code>s since what I really want is to set that level at all of my handlers?  I know it will work, but is this considered bad practice?  Is there a "gotcha" I might be missing?  Thanks!</span>
<span class="comment-copy">I am not aware of any issues with setting logger levels to not set / debug. The idea behind the logger level is being able to control what the logger outputs with a single knob. And handler levels allow you to fine-tune this per handler - for the stuff that passes the logger level check. If you want all messages to get to the handlers then just pass the debug / not set level to loggers as you suggest</span>
<span class="comment-copy">Hi @Sraw yes, you are understanding me correctly.  And I <b>thought</b> I set it up to do precisely that.  Can you please provide a code snippet to explain how to set it up?  Every example I've found simply <b>stops</b> when it comes to actually launching and implementing the logger.</span>
