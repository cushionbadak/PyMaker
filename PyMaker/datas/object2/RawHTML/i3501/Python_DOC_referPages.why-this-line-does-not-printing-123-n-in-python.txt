<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/25073064/python-3-print-generator">python 3 print generator</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>Recently I have started learning python programming language and I got stuck while printing 123..n sequence using this:</p>
<pre><code>n=10
print(i for i in range(1,n+1))
</code></pre>
<p>I got this output:</p>
<pre><code>&lt;generator object &lt;genexpr&gt; at 0x7f5990f20db0&gt;                                   
</code></pre>
<p>Expecting Output:<br/>
     1234....n<br/>
     (Note: Only continuous output)   </p>
</div>
<div class="post-text" itemprop="text">
<p>You are attempting to <code>print</code> a generator expression. This is not possible. The parentheses, or lack thereof, indicate a <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">generator expression</a> in Python.</p>
<p>Instead, you can use a <code>list</code>, indicated by square brackets:</p>
<pre><code>n = 10
print([i for i in range(1, n+1)])
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</code></pre>
<p>If you wish to print the contents of a generator expression, you can iterate explicitly:</p>
<pre><code>n = 10
for i in (i for i in range(1, n+1)):
    print(i)
</code></pre>
<p>Or via unpacking the expression and using the <code>sep</code> argument:</p>
<pre><code>n = 10
print(*(i for i in range(1, n+1)), sep='')
12345678910
</code></pre>
<p>In this specific example, since you are exhausting the iterator, you can pass a <code>range</code> object directly:</p>
<pre><code>n = 10
print(*range(1, n+1), sep='')
12345678910
</code></pre>
<p>The <code>*</code> operator is used for <strong>sequence unpacking</strong>. It can take any iterable and pass unpacked components to a feeder function, in this case <code>print</code>. It works for <code>print</code> as this specific function can take an arbitrary number of arguments, e.g. try <code>print(1, 2, 3, 4, 5, sep='')</code>. It will not, in contrast, work with <code>list</code>, which requires only one argument.</p>
</div>
<div class="post-text" itemprop="text">
<p>This line:</p>
<pre><code>print(i for i in range(1, n+1))
</code></pre>
<p>Creates a generator and prints it out, it's exactly what's expected. To print the values as a <code>list</code>, which i'm guessing is what you intended, add <code>[]</code>:</p>
<pre><code>print([i for i in range(1, n+1)])
</code></pre>
<p>If you intended to print each element on a separate line the syntax is similar but slightly modified:</p>
<pre><code>[print(i) for i in range(1, n+1)]
</code></pre>
<p>EDIT: For everything on the same line as you requested in your comment:</p>
<pre><code>print(''.join(str(i) for i in range(1, n+1)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As many have mentioned this is creating a <code>generator</code>. Generators are different from normal functions. Generator returns an <code>iterator</code> which you can iterate one item per iteration.</p>
<p>The method that uses <code>yield</code> statement returns a generator.
Difference between return statement and yield is, that <code>return</code> statement terminates the program completely. Whereas <code>yield</code> statement saves the state of the variable for the next iterations. Suppose you want to do something with the yielded value in those scenarios we use generators.</p>
<p>Following are the examples for return and yield statement.</p>
<p><code>Return</code></p>
<pre><code>def retutn_meth(n):
    for i in range(1, n+1):
        return i


a = retutn_meth(10)
for b in range(1,10):
    print(a)
</code></pre>
<p><code>Output</code></p>
<pre><code>1
1
1
1
1
1
1
1
1

Process finished with exit code 0
</code></pre>
<p><code>yield</code></p>
<pre><code>def gen_meth(n):
    for i in range(1, n+1):
        yield i


a = gen_meth(10)
for b in range(1,10):
    print(next(a))
    print('blah blah blah')
</code></pre>
<p><code>output</code></p>
<pre><code>1
blah blah blah
2
blah blah blah
3
blah blah blah
4
blah blah blah
5
blah blah blah
6
blah blah blah
7
blah blah blah
8
blah blah blah
9
blah blah blah

Process finished with exit code 0
</code></pre>
<p>As you can see in the second example the state of the variable has been saved in each iteration and at `print('blah blah') you can put any other functionality you want to do in between the iterations.</p>
<p>Please read here for further clarification: <a href="https://www.programiz.com/python-programming/generator" rel="nofollow noreferrer">Python Generators</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You need to add <code>[]</code>:<br/>
<code>&gt;&gt;&gt; print([i for i in range(1,n+1)])
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code> </p>
<p>Without the barracks, you'll get the iterator for 1 ... n<br/>
With them you'll get the list that the iterator creates  </p>
<p>In order to print only the numbers use <code>"".join()</code>:<br/>
<code>&gt;&gt;&gt; "".join([str(i) for i in range(1,n+1)]) # str(i) to convert from int to str
'12345678910'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The correct way to print numbers in a sequence is to run the for loop first and the print them, like</p>
<blockquote>
<p>n=10;<br/>
  for i in range(1,n):  </p>
<blockquote>
<p>print (i)</p>
</blockquote>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>n =10

for i in range(1,n+1):
    print(i)
</code></pre>
</div>
<span class="comment-copy">Do you wanted to print a list?</span>
<span class="comment-copy">Because <code>i for i in range(1,n+1)</code> is a generator expression that you're passing to <code>print</code> function.</span>
<span class="comment-copy">No I don't want to print a list..</span>
<span class="comment-copy"><code>''.join(map(str, range(1, n+1)))</code></span>
<span class="comment-copy">but I want continuous output like this: 1234...</span>
<span class="comment-copy">than you should have said so in your question, either way, I added an edit to the answer with that</span>
<span class="comment-copy"><code>[print(i) for i in range(1, n+1)]</code> prints <code>n * [None]</code> at the end, I don't think this is expected behaviour. I wasn't the downvoter btw, they seemed to have removed their vote.</span>
<span class="comment-copy">@RoadRunner it only prints that in console, not as part of the script</span>
<span class="comment-copy">that's what @kushal kochar has also tried. going through a for loop, but eventually trying to print a generator expression.</span>
