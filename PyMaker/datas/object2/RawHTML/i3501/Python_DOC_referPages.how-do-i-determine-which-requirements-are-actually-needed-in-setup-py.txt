<div class="post-text" itemprop="text">
<p>I'm cleaning up packaging for a python project I didn't create. Currently, it does some <a href="https://github.com/pypa/pip/issues/2286" rel="nofollow noreferrer">explicitly unsupported</a> magic to get its dependencies from a requirements.txt file. The file looks like it may have been generated by pip freeze; there are fixed versions for everything, and many apparently-extraneous packages listed. I am pretty sure some of these aren't real dependencies, but I don't know which ones.</p>
<p>Given just the source tree, how would I figure out, from scratch, what dependencies ought to be included in install_requires?</p>
<p>As a first stab, I'm grepping for non-stdlib import statements. I hope there's a better way.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's no way to do this <em>perfectly</em>, because Python is too flexible.</p>
<p>But it's usually possible to do it well enough.</p>
<p>You can use start with the stdlib's <a href="https://docs.python.org/3/library/modulefinder.html" rel="nofollow noreferrer"><code>modulefinder</code></a>.</p>
<p>Beyond that, a number of projects—mostly projects designed for building binary executables, installers, etc. for Python apps—have come up with heuristics that go even farther. </p>
<p>These usually work. And, when they fail, you usually immediately spot it on your first test. Even if they aren't sufficient, they're at the very least good sample code. Here are a few off the top of my head:</p>
<ul>
<li><a href="https://anthony-tuininga.github.io/cx_Freeze/" rel="nofollow noreferrer">cx_Freeze</a></li>
<li><a href="http://www.py2exe.org/" rel="nofollow noreferrer">py2exe</a></li>
<li><a href="http://py2app.readthedocs.io/" rel="nofollow noreferrer">py2app</a></li>
<li><a href="https://www.pyinstaller.org/" rel="nofollow noreferrer">pyInstaller</a></li>
</ul>
<hr/>
<p>In case you're wondering why it's impossible:</p>
<p>Even forgetting about the program of dependencies in C extension modules, Python is just too flexible to catch all the ways you could import a module via static analysis.</p>
<p>Sure, you'd have to be dealing with code written by someone crazy enough to use explicitly unsupported magic for no good reason… but if you were, there's nothing to stop someone from writing this instead of <code>import lxml</code>:<sup>1</sup></p>
<pre><code>with open('picture.jpg', encoding='cp500') as f:
    getattr(sys.modules[11], codecs.encode('vzcbeg_zbqhyr', 'rot13'))(f.read().strip())
</code></pre>
<p>In reality, things aren't going to be <em>that</em> bad. But they could <em>easily</em> be too bad for <code>rg import</code> to be sufficient.</p>
<p>You could try to detect all the imports dynamically with a simple import hook, but that's only guaranteed to work if you can exercise 100% of the code paths.</p>
<hr/>
<p><sub>1. Of course this only works if <code>importlib</code> was the 12th module loaded, and if <code>picture.jpg</code> is not a JPEG image but a textfile whose contents are, in EBCDIC, <code>lxml\n</code></sub></p>
</div>
<div class="post-text" itemprop="text">
<p>I've had great results with <a href="https://github.com/bndr/pipreqs" rel="nofollow noreferrer"> <code>pipreqs</code></a> that will automatically generate a requirements.txt file from your source code.</p>
<pre><code>pipreqs /home/project/location
Successfully saved requirements file in /home/project/location/requirements.txt
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I mean, the most effective way would honestly be to go through the code line by line and determine what packages may not be needed, what packages need updates, etc. I know Python 2 and 3 both have ModuleFinder which finds all the modules a script needs to successfully compile and run, but I've never used it before, so not sure how effective it is, especially for what you're doing. However, if you're interested, I'll attach the link below.</p>
<p><a href="https://docs.python.org/3/library/modulefinder.html" rel="nofollow noreferrer">https://docs.python.org/3/library/modulefinder.html</a> </p>
</div>
<span class="comment-copy">what about putting it in a virgin virtual env’s syspath, wo any installs, and then running its unittests?  no unit tests?  well, you’re gonna need those for that kinda surgery anyway.</span>
<span class="comment-copy">As it turns out, yes, no unittests. :-( There's a fairly complex tox.ini, a tests tree, and test files, but no actual tests in them. I keep thinking I must be blind and just not seeing some files.</span>
