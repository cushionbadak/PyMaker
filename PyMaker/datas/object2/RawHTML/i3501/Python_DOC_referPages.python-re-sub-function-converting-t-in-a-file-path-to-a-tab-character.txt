<div class="post-text" itemprop="text">
<p>I am trying to take a cpp file that has already been written and add header files to the list of includes using a python script. Currently, I create a string that has all of the includes that I want to add, and then using the re module I replace on of the includes with my string. All of the includes have a "\t" in there name, and this is causing issues; instead of printing the line as expected (<code>#include "abc\type\GenericTypeMT.h</code>), I am getting <code>#include "abc  ype\GenericTypeMT.h</code>. When I print my string to the console, it has the expected form which leads me to believe that this is an re.sub issue and not an issue writing to the file. Below is an the code.</p>
<pre><code>import re
import string

INCLUDE = "#include \"abc\\type\\"

with open("file.h", "r+") as f:
     a = ""
     b = ""
     for line in file:
         a = a + line
     f.seek(0,0)
     types = open("types.txt", "r+")
     for t in types:
         head = INCLUDE + t.strip() + "MT.h"
         b = b + head + "\n"
     a = re.sub(r'#include "abc\\type\\GenericTypeMT\.h"', b, a)
     types.close()
     print b
     print a
     f.write(a)
</code></pre>
<p>The output for <code>b</code> is:</p>
<pre><code>#include "abc\type\GenericTypeMT.h"
#include "abc\type\ServiceTypeMT.h"
#include "abc\type\AnotherTypeMT.h"
</code></pre>
<p>The (truncated) output for <code>a</code> is:</p>
<pre><code>/* INCLUDES *********************************/
#include "abc   ype\GenericTypeMT.h"
#include "abc   ype\ServiceTypeMT.h"
#include "abc   ype\AnotherTypeMT.h"

#include &lt;map&gt;
...
</code></pre>
<p>The closest thing to my question that I could find was <a href="https://stackoverflow.com/questions/14723964/how-to-write-t-to-file-using-python">How to write \t to file using Python</a>, but that is different than my problem, since mine seems to stem from the substitutions done by the regular expression, as shown by the print before the write.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>re.sub()</code> function expands meta-characters (escape sequences) in the replacement string too. The <code>\t</code> character sequence (consisting of two characters, <code>\</code> and <code>t</code>) in your replacement string interpreted, <em>by the <code>re</code> module</em>, as the escape sequence for a tab character:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'^.', '\\t', 'foo')
'\too'
&gt;&gt;&gt; print(re.sub(r'^.', '\\t', 'foo'))
    oo
</code></pre>
<p>But if you used a <em>function</em> for the replacement value, then no such expansion takes place. Note that this includes not processing placeholders, you'd have to use the match object passed into the function to create your own placeholder insertion logic. </p>
<p>You don't have any placeholders in your code, so a <code>lambda</code> to create the function should suffice:</p>
<pre><code>a = re.sub(r'#include "abc\\type\\GenericTypeMT\.h"', lambda m: b, a)
</code></pre>
<p>Demo on the same contrived <code>foo</code> sample string from before:</p>
<pre><code>&gt;&gt;&gt; re.sub(r'^.', lambda m: '\\t', 'foo')
'\\too'
&gt;&gt;&gt; print(re.sub(r'^.', lambda m: '\\t', 'foo'))
\too
</code></pre>
<p>The <a href="https://docs.python.org/3/library/re.html#re.escape" rel="nofollow noreferrer"><code>re.escape()</code> function</a>, is unfortunately too greedy with adding <code>\</code> backslashes to many more characters than just replacement meta-characters; you'd end up with many more backslashes than you started with.</p>
<p>Note that because you don't actually do <em>any</em> pattern matching in your substitution, you may as well just use <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>str.replace()</code></a> to do the job:</p>
<pre><code>a = a.replace(r'#include "abc\type\GenericTypeMT.h"', b)
</code></pre>
<p>The <code>\</code> and <code>.</code> characters are no longer a meta character in a regular expression, so they doesn't need escaping either.</p>
</div>
<span class="comment-copy">All the code that you need for your question is <code>a = re.sub(r'#include "abc\\type\\GenericTypeMT\.h"', b, a)</code> and the values of <code>a</code> and <code>b</code>. It would help if you trim the unnecessary code.</span>
<span class="comment-copy">This does fix the <code>\t</code> issue, however it also prints all the slashes: <code>\#include\ \"abc\type\GenericTypeMT\.h\"\ </code>. I suppose I could go back to where I declare <code>INCLUDE</code> and make it a raw string?</span>
<span class="comment-copy">@SCE: Ah, I see what is going on. <code>re.escape()</code> is too greedy, will update.</span>
<span class="comment-copy">Thanks for the fast, succinct answer!</span>
