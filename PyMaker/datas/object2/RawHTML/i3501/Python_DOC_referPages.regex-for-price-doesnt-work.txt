<div class="post-text" itemprop="text">
<p>I need a regex which matches any number followed by a string which consists of digits, spaces, dots and commas followed by "Kč" or "Eur".</p>
<p>The problem is that my <code>regex</code> sometimes doesn't find all such strings. </p>
<pre><code>((\d[., \d]+)(Kč|Eur))
</code></pre>
<p>For example:</p>
<pre><code>re.findall("""((\d[., \d]+)(Kč|Eur))""","Letenky od 12 932 Kč",flags=re.IGNORECASE)
</code></pre>
<p>returns nothing instead of <code>[(12 932 Kč,12 932,Kč)]</code></p>
<p>Do you know what is wrong with the regex?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your input string contains a multibyte letter consisting of a base <code>c</code> letter and a diacritic, and the regex contains the precompose letter with Unicode code point <code>\u010D</code>.</p>
<p>You may use</p>
<pre><code>(\d(?:[., \d]*\d)?)\s*(K(?:c\u030C|\u010D)|Eur)
</code></pre>
<p>Or</p>
<pre><code>(\d[., \d]*)\s*(K(?:č|č)|Eur))
</code></pre>
<p>See the <a href="https://regex101.com/r/3Rv3M2/1" rel="nofollow noreferrer">regex</a> (<a href="https://regex101.com/r/3Rv3M2/3" rel="nofollow noreferrer">second regex demo</a>) and <a href="https://ideone.com/gztzYv" rel="nofollow noreferrer">Python demo</a>.</p>
<p><strong>Pattern details</strong></p>
<ul>
<li><code>\d</code> - a digit</li>
<li><code>(?:[., \d]*\d)?</code> - an optional occurrence of

<ul>
<li><code>[., \d]*</code> - zero or more digits, spaces, <code>.</code> or <code>,</code></li>
<li><code>\d</code> - a digit</li>
</ul></li>
<li><code>\s*</code> - 0 or more whitespaces</li>
<li><code>(?:K(?:c\u030C|\u010D)|Eur)</code> - either <code>K</code> followed with either <code>c\u030C</code> or <code>\u010D</code>, or <code>Eur</code> values.</li>
</ul>
<p>When defining the currency regex, use <code>CZK = ['Czk','K(?:č|č)']</code> or <code>CZK = ['Czk', r'K(?:c\u030C|\u010D)']</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As Wiktor Stribiżew commented, the <code>Kč</code> in your regexp is different from the <code>Kč</code> in your text. You can use the <a href="https://docs.python.org/3/library/unicodedata.html" rel="nofollow noreferrer">unicodedata</a> module to normalize both:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall("""((\d[., \d]+)(Kč|Eur))""", "Letenky od 12 932 Kč", flags=re.IGNORECASE)
[]
&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; re.findall(unicodedata.normalize("NFD", """((\d[., \d]+)(Kč|Eur))"""), unicodedata.normalize("NFD", "Letenky od 12 932 Kč"), flags=re.IGNORECASE)
[('12 932 Kč', '12 932 ', 'Kč')]
</code></pre>
</div>
<span class="comment-copy">That letter seems different, try <a href="https://regex101.com/r/3Rv3M2/1" rel="nofollow noreferrer"><code>\d[., \d]*\s*(?:K(?:č|č)|Eur)</code></a>. See <a href="https://ideone.com/g1sO47" rel="nofollow noreferrer">this Python demo</a>.</span>
<span class="comment-copy">Strings are from HTML and  there were sometimes \xa0 instead of regular space so I normalized all strings: unicodedata.normalize("NFKD",string)</span>
<span class="comment-copy">Thanks, your regex works but there are two problems. 1. It returns only one group [(12 932 Kč)] and the second, bigger problem is that in fact, I use multiple currencies from variables so I can't process characters like "č" separately. I have a list for every currency. EUR = ['Eur','€']; CZK = ['Czk','Kč'] and in regex: "((\d[., \d]+)({}))".format('|'.join(CZK+EUR)</span>
<span class="comment-copy">Ok, keep the capturing groups then, but as for the list of currencies, you should use <code>CZK = ['Czk','K(?:č|č)']</code></span>
