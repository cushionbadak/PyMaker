<div class="post-text" itemprop="text">
<p>In <code>C++</code> we can write an infinite for loop like <code>for(;;)</code>. Is here any syntax like this  to write an infinite for loop in Python?</p>
<p>Note : I know that if I write <code>for i in range(a_very_big_value)</code> then it may run infinity. I am searching a simple syntax like <code>C++</code> or any other tricks to write <code>infinite for loop</code> in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python's <code>for</code> statement is a "for-each" loop (sort of like <a href="https://en.cppreference.com/w/cpp/language/range-for" rel="nofollow noreferrer">range-for</a> in C++11 and later), not a C-style "for-computation" loop.</p>
<p>But notice that in C, <code>for (;;)</code> does the same thing as <code>while (1)</code>. And Python's <code>while</code> loop is basically the same as C's with a few extra bells and whistles. And, in fact, the idiomatic way to loop forever is:<sup>1</sup></p>
<pre><code>while True:
</code></pre>
<hr/>
<p>If you really do want to write a <code>for</code> loop that goes forever, you need an iterable of infinite length. You can grab one out of the standard library:<sup>2</sup></p>
<pre><code>for _ in itertools.count():
</code></pre>
<p>â€¦ or write one yourself:</p>
<pre><code>def forever():
    while True:
        yield None

for _ in forever():
</code></pre>
<p>But again, this isn't really that similar to <code>for (;;)</code>, because it's a for-each loop.</p>
<hr/>
<p><sub>1. <code>while 1:</code> used to be a common alternative. It's faster in older versions of Python, although not in current ones, and occasionally that mattered.</sub></p>
<p><sub>2. Of course the point of <code>count</code> isn't just going on forever, it's counting up numbers forever. For example, if <code>enumerate</code> didn't exist, you could write it as <code>zip(itertools.count(), it)</code>.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, it is possible.</p>
<p>With a <code>while</code> loop:</p>
<pre><code>while True:
   ...
</code></pre>
<p>With a <code>for</code> loop (just for kicks):</p>
<pre><code>from itertools import cycle    
for _ in cycle(range(1)):
    ...
</code></pre>
<p>The <code>cycle</code> returns <code>1</code> indefinitely. </p>
<p>In either case, it's up to you to implement your loop logic in such a way that you terminate eventually. And lastly, if you want to implement an execute-until-___ loop, you should stick to <code>while True</code>, because that's the idiomatic way of doing it.</p>
</div>
<div class="post-text" itemprop="text">
<p>I found the answer from <a href="https://stackoverflow.com/a/9884244/5280371">here</a> and <a href="https://stackoverflow.com/a/34254008/5280371">here</a></p>
<p>Using <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow noreferrer">itertools.count</a>:</p>
<pre><code>import itertools
for i in itertools.count():
    if there_is_a_reason_to_break(i):
        break
</code></pre>
<p>In Python2 xrange() is limited to sys.maxint, which may be enough for most practical purposes:</p>
<pre><code>import sys
for i in xrange(sys.maxint):
    if there_is_a_reason_to_break(i):
        break
</code></pre>
<p>In Python3, range() can go much higher, though not to infinity:</p>
<pre><code>import sys
for i in range(sys.maxsize**10):  # you could go even higher if you really want
    if there_is_a_reason_to_break(i):
        break
</code></pre>
<p>So it's probably best to use <code>count()</code></p>
<hr/>
<p>It is also possible to achieve this by mutating the list you're iterating on, for example:</p>
<pre><code>l = [1]
for x in l:
    l.append(x + 1)
    print(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, here you are:</p>
<pre><code>for i in __import__("itertools").count():
    pass
</code></pre>
<p>The infinite iterator part was taken from <a href="https://stackoverflow.com/questions/5737196/is-there-an-expression-for-an-infinite-generator#5737588">this answer.</a> If you really think about it though, a while loop looks way better.</p>
<pre><code>while True:
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use:</p>
<pre><code>while True:
    # Do stuff here
</code></pre>
</div>
<span class="comment-copy">It's a <code>while loop</code>, I am searching for <code>for loop</code>.</span>
<span class="comment-copy">Why do you <i>need</i> a for loop?</span>
<span class="comment-copy">I have <code>C++</code> background, that's why I am searching for something like <code>C++</code>. You can say it curiosity.</span>
<span class="comment-copy">If you have a C++ background, think about it this way: how would you write an infinite range for loop in C++? That's much closer to what Python's <code>for</code> loop is than the C-style for loop.</span>
<span class="comment-copy">yeah, nice point to notice. thanks</span>
<span class="comment-copy">I have asked for <code>for loop</code> not <code>while</code> loop :(</span>
