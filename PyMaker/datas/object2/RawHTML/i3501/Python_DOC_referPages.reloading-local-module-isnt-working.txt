<div class="post-text" itemprop="text">
<p>Firstly, I know this has been posted on before, but either A) the recommendations don't work or B) the recommendation is to manually delete the module from the namespace and re-import it like normal.</p>
<p>I have the following module structure</p>
<pre><code>basedir/
    pytools/
        __init__.py
        tools.py
    setup.py
    test.py
</code></pre>
<p>If I'm in the <code>basedir</code>, and import <code>pytools</code> and create an object of class <code>testcls</code>. The actual properties of the class are found in <code>tools.py</code>. <code>testcls</code> has a method called <code>testfunc</code> which simply prints out <code>AAA</code> right now:</p>
<pre><code>&gt;&gt;&gt; import pytools
&gt;&gt;&gt; test = pytools.testcls()
&gt;&gt;&gt; test.testfunc()
AAA
</code></pre>
<p>Let's say I change <code>testfunc()</code> to now print out <code>BBB</code>. I do so, and save the file. Then I reload the module and try again, it doesn't print out <code>BBB</code>:</p>
<pre><code>&gt;&gt;&gt; from importlib import reload
&gt;&gt;&gt; reload(pytools)
&gt;&gt;&gt; test = pytools.testcls()
&gt;&gt;&gt; test.testfunc()
AAA
</code></pre>
<p><strong>However</strong> if I do the exact same process but instead change <code>test.py</code>, import that file as a module, edit a function inside of it, and reload it, it behaves as expected:</p>
<pre><code>&gt;&gt;&gt; import test
&gt;&gt;&gt; testvariable = test.testcls()
&gt;&gt;&gt; testvariable.testfunc2()
AAA
# Change the function here
&gt;&gt;&gt; from importlib import reload
&gt;&gt;&gt; reload(test)
&gt;&gt;&gt; testvariable = test.testcls()
&gt;&gt;&gt; testvariable.testfunc2()
BBB
</code></pre>
<p>I really don't understand what's going on and it's just really annoying me at this point. It's also costing me a good bit of time as well, but I'm more annoyed at the moment. </p>
<p>Any ideas what's going on??</p>
<h2>Versions:</h2>
<p>Python: 3.6.5</p>
<p>Interpreter: IPython, 6.2.1</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's name things more generally:</p>
<pre><code>basedir/
    testpackage/
        __init__.py
        testmodule.py
    test.py
</code></pre>
<p>If testmodule.py contains:</p>
<pre><code>class TestClass:
    def test_method(self):
        print("AAA")
</code></pre>
<p>Then the following works as you expect:</p>
<pre><code>&gt;&gt;&gt; from testpackage import testmodule
&gt;&gt;&gt; obj = testmodule.TestClass()
&gt;&gt;&gt; obj.test_method()
DDD
&gt;&gt;&gt; # === Edit ===
&gt;&gt;&gt; from importlib import reload
&gt;&gt;&gt; reload(testmodule)
&gt;&gt;&gt; obj = testmodule.TestClass()
&gt;&gt;&gt; obj.test_method()
EEE
</code></pre>
<p>But, if <code>__init__.py</code> has something like:</p>
<pre><code>from .testmodule import TestClass
</code></pre>
<p>And you try to import (and reload) <strong><em>the package</em></strong> and not the module, the following happens:</p>
<pre><code>&gt;&gt;&gt; import testpackage
&gt;&gt;&gt; obj = testpackage.TestClass()
&gt;&gt;&gt; obj.test_method()
EEE
&gt;&gt;&gt; # === Edit ===
&gt;&gt;&gt; from importlib import reload
&gt;&gt;&gt; reload(testpackage)
&gt;&gt;&gt; obj = testpackage.TestClass()
&gt;&gt;&gt; obj.test_method()
EEE
</code></pre>
<p>(It's unchanged)</p>
<p>Note the following section <a href="https://docs.python.org/3/library/importlib.html#importlib.reload" rel="nofollow noreferrer">of the docs</a>:</p>
<blockquote>
<p>If a module imports objects from another module using from … import …, calling reload() for the other module does not redefine the objects imported from it — one way around this is to re-execute the from statement, another is to use import and qualified names (module.name) instead.</p>
</blockquote>
<p>If you were to reload <em>both</em> the module and the package, in that order, it'd again work as you expect:</p>
<pre><code>&gt;&gt;&gt; import testpackage
&gt;&gt;&gt; obj = testpackage.TestClass()
&gt;&gt;&gt; obj.test_method()
HHH
&gt;&gt;&gt; # === Edit ===
&gt;&gt;&gt; from importlib import reload
&gt;&gt;&gt; reload(testpackage.testmodule)
&gt;&gt;&gt; reload(testpackage)
&gt;&gt;&gt; obj = testpackage.TestClass()
&gt;&gt;&gt; obj.test_method()
III
</code></pre>
<p>But this seems silly and error-prone, just use the approach in the first example:</p>
<pre><code>from testpackage import testmodule
...
reload(testmodule)
... 
</code></pre>
</div>
<span class="comment-copy">hmm I'm not sure I can help, but when you reload, is the <code>test</code> variable (<code>test = pytools.testcls()</code>) still in the namespace? In that case, this might affect the reload. Maybe try deleting <code>test</code> and then reloading? Sorry if it ends up not helping - I'm writing from instinct more than experience.</span>
<span class="comment-copy">What are the contents of <code>__init__.py</code>?</span>
<span class="comment-copy">You must have something in the <code>__init__.py</code> because otherwise you'd be getting an <code>AttributeError: module 'pytools' has no attribute 'testcls'</code>, so please <a href="https://stackoverflow.com/posts/51014960/edit">edit</a> your question and show its contents, too.</span>
