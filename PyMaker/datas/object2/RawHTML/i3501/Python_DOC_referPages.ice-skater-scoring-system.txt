<div class="post-text" itemprop="text">
<p>This is a program i have been working on but i have had some problems with. When this program is executed it prints the list of skaters and there information twice but i don't want that but i don't know how to fix it</p>
<pre><code># THESE ARE LISTS TO STORE INDIVIDUAL SKATERS AND THERE SCORES AND MEDIUM 

l_list = []
list = []

#STATMENT TO START WHILE LOOP AND TO END IT 

re = True 
while re == True:

    #STORING THE SKATERS NAME AND ADDING OPTION TO STOP ADDING SKATERS IN TO PROGRAM

    a_name = input("Please store the skaters name, if there are no more skaters enter 'stop'")

    #PRINTING ALL SKATERS AND THERE SCORES AND MEDIUM AND ADDING OPTION TO ADD MORE OR END PROGRAM

    if a_name == 'stop':
       #were pritn(l_list was)---------------------------------------------------------------------------------------
        for s in l_list:
            print(*s)
        exit = input("Would you like to exit? 'y/n'. ")
        if exit == 'y':
            break

    #WHILE LOOP TO GET SCORES AND STORE THEM IN A LIST

    scores = []
    repeat = True
    while repeat == True:

        #ASKING FOR THE SCORES AND A INPUT TO END THIS PROGRAMS FUNCTION WHICH WILL STORE THE SCORES TO THE LIST(scores)

        score = input("please type in your scores one at a time, and 'done' when finished.")
        if score == "done":

            repeat = False
        else:
            scores.append(score)


    #SORTING SCORES, REMOVING HIGHEST AND LOWEST SCORES 

    scores.sort()
    scores.remove(max(scores))
    scores.remove(min(scores))

    #STORING THE VARIABLE(a_name) AND THE LIST(scores) IN THE LIST(list)
    #THEN STORING THE LIST(list) INTO THE LIST(l_list)
    list.append(a_name)
    list.append(scores)
    l_list.append(list)

    #CONVERTING THE CONTENTS OF THE LIST(scores) IN TO FLOATS SO THAT IT CAN FIND TEH MEDIUM/AVERAGE SCORE USING LEN AND SUM
    #THEN STORING THE VARIABLE(med) INTO THE LIST(list)

    scores = [float(i) for i in scores]
    med = (sum(scores) / float(len(scores)))
    list.append(med)


#RUN FUNCTION  
start()
</code></pre>
<p>when i run the program with some test results this is what it prints:</p>
<pre><code>[['thomas', ['2', '3', '4', '58'], 16.75, 'renee', ['2', '3', '4', '5', '6'], 4.0], ['thomas', ['2', '3', '4', '58'], 16.75, 'renee', ['2', '3', '4', '5', '6'], 4.0]]
Would you like to exit? 'y/n'.
</code></pre>
<p>as you can see it prints it twice which I don't want.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to recreate <code>list</code> each time through the loop.</p>
<p>On the first time through the loop, <code>list</code> and <code>l_list</code> are both empty: you get name and scores, append them to <code>list</code> and append that to <code>l_list</code>. All is good.</p>
<p>But then you go through the loop a second time for your next skater. You append their name and scores to <code>list</code> which already has the previous skater's name and scored. Then you append that whole thing to <code>l_list</code> again. Now <code>l_list</code> has two copies of <code>list</code>, and <code>list</code> has both skaters and their scores.</p>
<p>Adding <code>list = []</code> before you call <code>list.append()</code> should resolve the issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are off to a good start but I would like to warn you against using the variable name <code>list</code>. That is the name of a type in Python so instead, you can use <code>lst</code> or <code>list_</code>. In this case, I'd call it <code>skater_list</code>. <a href="https://stackoverflow.com/questions/22864221/is-the-list-of-python-reserved-words-and-builtins-available-in-a-library">This question</a> covers all the names not to use for variables.</p>
<p>When you're adding names and scores to your lists, you never clear them out so you are adding them multiple times.</p>
<p>However, I don't think lists would actually be your most useful data structure here. I think a <code>dict</code> where the key is the name and the values are the scores would work best.</p>
<p>At the start, create a <code>dict</code> rather than your lists:</p>
<pre><code>final_dict = {}
</code></pre>
<p>When printing the list out, print the <code>dict</code> instead:</p>
<pre><code>    if a_name == 'stop':
       #were pritn(l_list was)---------------------------------------------------------------------------------------
        for name, scores in final_dict.items():
            score, med = scores
            print(name, score, med)
</code></pre>
<p>Remove your code to add the items to the lists</p>
<pre><code>    scores.sort()
    scores.remove(max(scores))
    scores.remove(min(scores))

    scores = [float(i) for i in scores]
    med = (sum(scores) / float(len(scores)))
</code></pre>
<p>Instead, add them to a dictionary. Here I made the key the name of the skater and stored both all the remaining scores and the average score.</p>
<pre><code>    final_dict[a_name] = (scores, med)
</code></pre>
<p>Note, you still need to clear out the score list:</p>
<pre><code>    scores = []
</code></pre>
<p>The output here would be something like:</p>
<pre><code>Adam [7.0, 8.0] 7.5
Joe [6.0, 7.0] 6.5
</code></pre>
</div>
<span class="comment-copy">"list" is a <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">built-in</a>. It is not recommended to use any of the built-ins as variable names as you are overwriting the built-in in your namespace.</span>
<span class="comment-copy">Agreed about not calling your list <code>list</code>. In addition to it being already used by Python, the name <code>list</code> doesn't say anything about what it is. <code>skater_list</code>, as @Zev suggests, is good. Or, something like <code>skater_data</code>.</span>
