<div class="post-text" itemprop="text">
<pre><code>list1 = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
         [0, 500000.0, 500000.0, 500000.0], [0, 0, 1000000.0, 0],
         [0, 1000000.0, 500000.0, 2500000.0]]

list2 = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0],
         [0, 1, 1, 1], [0, 0, 2, 0], [0, 2, 1, 4]]
</code></pre>
<p>Can we divide each element from list1 and list2? </p>
<p>Output should again be in lists of list.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is commonly known as <code>zipwith</code>. Python doesn't have a builtin function to do this, but it's easy to build yourself with a list comprehension.</p>
<pre><code>[f(a, b) for a, b in zip(list1, list2)]  # where f is the function to zip with!
</code></pre>
<p>This is actually a <code>zipwith</code> of <code>zipwith</code>s, though, so let's nest:</p>
<pre><code>[[aa/bb for (aa, bb) in zip(a, b)] for (a, b) in zip(list1, list2)]
</code></pre>
<hr/>
<p>EDIT: as Aran-Fey points out, <code>zipwith</code> <em>does</em> exist as <code>map</code> in Python, which makes this:</p>
<pre><code>import functools
import operator

zipwithdiv = functools.partial(map, functools.partial(map, operator.truediv))

zipwithdiv(list1, list2)  # magic!
</code></pre>
<p>which is, admittedly, uglier than sin. But it makes my little functional heart go a-pitter patter.</p>
</div>
<div class="post-text" itemprop="text">
<p>IIUC</p>
<pre><code>import numpy as np
&gt;&gt;&gt; np.array(list1)/list2
array([[    nan,     nan,     nan,     nan],
       [    nan,     nan,     nan,     nan],
       [    nan,     nan,     nan,     nan],
       [    nan,     nan,     nan,     nan],
       [    nan, 500000., 500000., 500000.],
       [    nan,     nan, 500000.,     nan],
       [    nan, 500000., 500000., 625000.]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try the following using the built-in function <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>:</p>
<pre><code>result = []
for sub_list1, sub_list2 in zip(list1, list2):
    sub_list = []
    for a, b in zip(sub_list1, sub_list2):
        if b == 0:
            sub_list.append('DivisionByZero')
            continue
        sub_list.append(a / b)
    result.append(sub_list)
</code></pre>
<p>this will produce:</p>
<pre><code>[['DivisionByZero', 'DivisionByZero', 'DivisionByZero', 'DivisionByZero'],
 ['DivisionByZero', 'DivisionByZero', 'DivisionByZero', 'DivisionByZero'],
 ['DivisionByZero', 'DivisionByZero', 'DivisionByZero', 'DivisionByZero'],
 ['DivisionByZero', 'DivisionByZero', 'DivisionByZero', 'DivisionByZero'],
 ['DivisionByZero', 500000.0, 500000.0, 500000.0],
 ['DivisionByZero', 'DivisionByZero', 500000.0, 'DivisionByZero'],
 ['DivisionByZero', 500000.0, 500000.0, 625000.0]]
</code></pre>
</div>
<span class="comment-copy">Try to explain better what you want to achieve, what you mean with divide?</span>
<span class="comment-copy">In list1 and list2 there are lists. I want to divide each list1[0] / list2[0]</span>
<span class="comment-copy">Try using numpy.</span>
<span class="comment-copy">So the result should look like <code>list3 = [[ZeroDivisionError, ZeroDivisionError, ZeroDivisionError, ZeroDivisionError], [ZeroDivisionError, ...], ...]</code>?</span>
<span class="comment-copy">@Aran-Fey Offcourse the data isn't right. But yes.</span>
<span class="comment-copy"><i>psst</i>: "zipwith" is just <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>. (Yes, it supports multiple iterables)</span>
<span class="comment-copy">@Aran-Fey oooooooooooooooooooooooooooooooooooohh brb.</span>
<span class="comment-copy">@Aran-Fey You've made me a very happy man, if perhaps encouraged me to use slightly less-Pythonic code ;)</span>
<span class="comment-copy">Ahhh yes, the magic of numpy!</span>
