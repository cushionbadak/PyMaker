<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/16839658/printf-width-specifier-to-maintain-precision-of-floating-point-value">Printf width specifier to maintain precision of floating-point value</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I want to save a sequence of double into a .txt file, and read them later on in C. How can I achieve this without precision loss? What I don't know to do is how many digits I need to save? I doubt I may not get the exact double I saved if not enough digits are saved. </p>
<p>Below is what I have tried</p>
<pre><code>doubles=[3.14159, 3.14159265358]
filename="tmp.txt"
with open(filename,'w') as f:
    for x  in doubles:
        f.write("%.16f\n" %x)
</code></pre>
<p>I got two (I guess) imprecise representation of my data, <code>doubles</code>. 
    3.1415899999999999
    3.1415926535800001</p>
<p>This is undesirable. I want data to be stored as is, so that another program can retrieve them exactly. Any idea?</p>
</div>
<div class="post-text" itemprop="text">
<p>From C11, use <code>DBL_DECIMAL_DIG</code> which is defined <em>exactly</em> for this use: See <a href="https://en.cppreference.com/w/c/types/limits" rel="nofollow noreferrer">https://en.cppreference.com/w/c/types/limits</a>. It tells you the number of decimal digits of precision required such that a load of a saved <code>double</code>, followed by a save then a reload will mean that the two load steps will <em>always</em> return the same <code>double</code>.</p>
<p><code>DBL_DECIMAL_DIG</code> is normally 17.</p>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/q/21895756/7076153">stackoverflow.com/q/21895756/7076153</a></span>
<span class="comment-copy">(Python) floats have some limitations: <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/floatingpoint.html</a></span>
<span class="comment-copy">You can save them as binary, however, then they are not necesarilly transportable to other machines with other architectures.</span>
<span class="comment-copy">@JoseFelipe - Fractions would work for storing only rational numbers.  What about irrationals?  eg. what fraction would you suggest for storing <code>PI</code>?</span>
<span class="comment-copy">@ryyker Re: <a href="https://stackoverflow.com/questions/51023663/saving-and-reading-doubles-without-precision-loss#comment89040494_51023663">What about irrationals?</a>: All finite <code>double</code> are rational, so irrationals do not apply to "Saving and Reading doubles without precision loss".  Even the common <code>M_PI</code>, a close approximation of Ï€, is rational</span>
<span class="comment-copy"><code>DBL_DIG</code> is insufficient. Use <code>DBL_DECIMAL_DIG</code>.</span>
<span class="comment-copy">@chux: May as well remove the old <code>DBL_DIG</code> unless that's against C tag ettiquette: In C++ now we seem to have a consensus in accepting that C++11 is the default standard.</span>
<span class="comment-copy"><code>DBL_DIG</code> remains useful.  It is the most digits that text-<code>double</code>-text can round-trip correctly for all <code>double</code>.  These 2 macros apply in different situations.</span>
<span class="comment-copy">When <code>DBL_DECIMAL_DIG</code> is not available, code can use <code>DBL_DIG + 3</code> to derive the digits needed for <code>double</code>-text-<code>double</code> as in OP's case.  It might be a tad more than  <code>DBL_DECIMAL_DIG</code>, but never too small.</span>
