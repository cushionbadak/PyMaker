<div class="post-text" itemprop="text">
<p>I am trying to build a basic random serial number generator in Python, which inserts each generated S\N into a list.
In the end of every generated S\N there is an unnecessary dash (-). For example:</p>
<pre><code>XXXX-YYYY-ZZZZ-NNNN-
</code></pre>
<p>Code:</p>
<pre><code>import random
import string

x = ""
l = [] # A blank list

for y in range(0,3): # Creating 3 different serial numbers
    for t in range(0,4): # Creating 4 sections to each S\N and seperating them with a dash (-)
        for i in range(0, 5): # Creating a 5 letters combination
            x += random.choice(string.ascii_letters)

        x += "-" # Causes problem since printed 4 times instead of 3   
    l.append(x)
    x = ""
print(l)
</code></pre>
<p>Output:</p>
<pre><code>['GzWFP-Owoyk-NNKBk-RKZBm-', 'nxTtS-aGVff-yVfLo-WQVJN-', 'HUmTd-XzSSK-weSKs-BHNSv-']
</code></pre>
<p>I tried different variations but none of them seems to work.
Best Regards.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply <a href="https://docs.python.org/3/library/stdtypes.html#str.rstrip" rel="nofollow noreferrer">rstrip()</a> the offending <code>'-'</code> before appending your SN to its list of serial numbers:</p>
<pre><code># create SN like above, change l.append(x) to: 
l.append(x.rstrip('-')) # removes the -from the right end before appending
</code></pre>
<hr/>
<p>If you need to produce lots and fast, you should draw all characters needed <em>at once</em> instead of <em>one character at a time</em> and simply put the spacers between the groups like so: </p>
<pre><code>import random
import string

def createSN(groups = 4, charPerGroup = 5, spacer = '-'):
    """Create a serial number with 'groups' groups consisting 
    of 'charPerGroup' chars with 'spacer' between groups."""

    total = groups * charPerGroup
    # creates all characters with one call to random
    chars = random.choices(string.ascii_letters, k = total)
    # uses list slicing and string joining to divide created characters 
    # in groups and puts the spacer character between groups
    return spacer.join( ''.join(chars[i:i+charPerGroup]) for i in range(0,total,amount))


# create a list of 3 SN:
l = [createSN() for _ in range(3)]  

print(l)
</code></pre>
<p>Output:</p>
<pre><code>['ONHVQ-PvIvo-ZVdRU-HYCZz', 'BWQnt-nRCGG-raoVt-XEWif', 'mMPDd-KakQR-BDkRG-MdqBX']
</code></pre>
<p>This is similar and (but I think) superior to @CoryKramer solution, he still draws each character individually - and using a function makes it a tad more clear what happens.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a bit terse for a one-liner, but it can be done using <code>str.join</code> in a list comprehension.<br/>
Basically you can use <code>random.choice</code> over the <code>string.ascii_letters</code> for the length of each substring you want, then <code>'-'.join</code> to concatenate the substrings using hyphens, then repeat that for the number of total items that you want.</p>
<pre><code>&gt;&gt;&gt; from random import choice
&gt;&gt;&gt; from string import ascii_letters
&gt;&gt;&gt; ['-'.join(''.join(choice(ascii_letters) for j in range(5)) for i in range(4)) for k in range(3)]
['HjPVn-sZFRG-RooXu-PicTA', 'dEZPM-sSXKx-XWWAz-qxyUd', 'BHyHE-fhGWb-sDutN-QIrJV']
</code></pre>
</div>
<span class="comment-copy">You can for instance use a temporary list to which you add your four latter groups and then do <code>'-'.join(that_list)</code>.</span>
<span class="comment-copy">Why are you doing it? Just use uuid4 from uuid module</span>
