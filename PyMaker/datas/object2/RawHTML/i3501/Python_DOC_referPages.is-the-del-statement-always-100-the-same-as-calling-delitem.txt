<div class="post-text" itemprop="text">
<pre><code>a= something iterable object in python
del a[1]
</code></pre>
<p>Is <code>del a[1]</code> always the same as <code>a.__delitem__(1)</code>?</p>
<p>Is the Python <code>del</code> statement defined as a call to the <code>__delitem__</code> method?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/simple_stmts.html#the-del-statement" rel="nofollow noreferrer">The <code>del</code> statement</a> works on any <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-target_list" rel="nofollow noreferrer">target list</a>, which includes subscriptions (<code>del spam[1]</code>) and slicings (<code>del spam[:3]</code>), but also attributions (<code>del spam.eggs</code>) and identifiers (<code>del spam</code>). And it does different things in each case.</p>
<p>The documentation for the statement maybe doesn't do a great job explaining how each of these cases work, but the <a href="https://docs.python.org/3/reference/datamodel.html#object.__delitem__" rel="nofollow noreferrer">Data Model</a> chapter fills in some of the gaps.</p>
<hr/>
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__delitem__" rel="nofollow noreferrer"><code>__delitem__(self, key)</code></a>:</p>
<blockquote>
<p>Called to implement deletion of <code>self[key]</code>.</p>
</blockquote>
<p>This includes slicings, of course; if you <code>del spam[:3]</code>, it will call <code>spam.__delitem__(slice(None, 3))</code>.</p>
<hr/>
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__delattr__" rel="nofollow noreferrer"><code>__delattr__(self, name)</code></a>:</p>
<blockquote>
<p>Like <code>__setattr__()</code> but for attribute deletion instead of assignment. This should only be implemented if <code>del obj.name</code> is meaningful for the object.</p>
</blockquote>
<hr/>
<p>In theory, a <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattribute__" rel="nofollow noreferrer"><code>__getattribute__</code></a> on the class or metaclass could reroute these calls. But since both of these calls are done via <a href="https://docs.python.org/3/reference/datamodel.html#special-lookup" rel="nofollow noreferrer">special method lookup</a>, Python is allowed to look the methods up directly, and, at least in CPython 3.7 and 2.7, it does. So, <code>__delitem__</code> or <code>__delattr__</code> will always be called.</p>
<hr/>
<p>For identifiers, what happens depends on whether the compiler identifies the variable as a local, nonlocal, or global. This uses the same rules as any other variable reference.<sup>1</sup></p>
<p>For globals, this effectively means <code>del globals()['spam']</code>. For locals, it's sort of like <code>del locals()['spam']</code>, except that it actually affects the local environment. For nonlocals, it essentially calls a <code>delete_contents()</code> function on the closure cell.</p>
<hr/>
<p>It may help to use the <a href="https://docs.python.org/3/library/dis.html" rel="nofollow noreferrer"><code>dis</code></a> module to see how CPython compiles the different forms of the <code>del</code> statement, and then look up what each of the bytecodes does.<sup>2</sup> Of course that's specific to CPython, but it demonstrates what any Python implementation needs to do, however it chooses to do it.</p>
<hr/>
<p><sub>1. But notice that deletion counts as a binding operation, just like assignment does. So, unless <code>spam</code> is declared <code>global</code> or <code>nonlocal</code> (or the code is at the top level), <code>del spam</code> is going to make <code>spam</code> local.</sub></p>
<p><sub>2. Then again, if you don't know anything about bytecode, fast locals, etc., it probably won't help very muchâ€¦</sub></p>
</div>
<span class="comment-copy">Useful link: <a href="https://docs.python.org/3/reference/simple_stmts.html#the-del-statement" rel="nofollow noreferrer">docs.python.org/3/reference/simple_stmts.html#the-del-statement</a></span>
<span class="comment-copy">thank for reply Rob. But i already read that and still confused.</span>
<span class="comment-copy">And from the other end: <a href="https://docs.python.org/3/reference/datamodel.html#object.__delitem__" rel="nofollow noreferrer">docs for <code>object.__delitem__</code></a>.  Basically, yes, but only when using <code>del obj[key]</code>.  Note that <code>del obj</code> <i>does not</i> call <a href="https://docs.python.org/3/reference/datamodel.html#object.__del__" rel="nofollow noreferrer"><code>obj.__del__</code></a> directly</span>
<span class="comment-copy">Well, the <code>del</code> statement can also be used on attributes, globals, and locals, not just items. <code>del spam.eggs</code> is a call to <code>spam.__delattr__('eggs')</code>, and what <code>del spam</code> compiles to depends on whether it's a local, a nonlocal, or a global/builtin/unknown.</span>
