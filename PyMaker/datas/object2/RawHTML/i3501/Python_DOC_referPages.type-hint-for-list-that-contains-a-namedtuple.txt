<div class="post-text" itemprop="text">
<p>I was reading <a href="https://stackoverflow.com/questions/34269772/type-hints-in-namedtuple">here</a>, but it's about type hinting for namedtuples.</p>
<p>Is it possible to create a type hint for a <code>List</code> that contains a <code>namedtuple</code>?</p>
<p>For example:</p>
<pre><code>firefoxprofile = namedtuple("Profile", ["Name", "Path", "isRelative", "Default"])

# Will contain a list of tuples that represent the firefox profiles.
ffprofiles = [] # -- how would I write the type hint?
ffprofiles.append(Profile(Name='Jason', Path='Profiles/er5rtak4.Jason', isRelative='1', Default=None))
ffprofiles.append(Profile(Name='Sarah', Path='Profiles/23mvfqcj.Sarah', isRelative='1', Default=None))
</code></pre>
<p>I tried:</p>
<pre><code>ffprofiles = List[namedtuple("Profile", ["Name", "Path", "isRelative", "Default"])]
</code></pre>
<p>but that doesn't work, when I try to update the <code>ffprofiles = []</code> line with that syntax, I get an exception:</p>
<pre><code>TypeError: descriptor 'append' requires a 'list' object but received a 'Profile'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't spell out the named tuple, reference <em>just the name of the type</em> in your <code>List[]</code> type:</p>
<pre><code>List[firefoxprofile]
</code></pre>
<p>Put the type hint after a colon but <em>before</em> the <code>=</code> when used in an assignment, following <a href="https://www.python.org/dev/peps/pep-0526/" rel="nofollow noreferrer">PEP 526 <em>Variable Annotations</em></a> syntax:</p>
<pre><code>ffprofiles: List[firefoxprofile] = []
</code></pre>
<p>This sets <code>ffprofiles</code> to an empty list, and tells any type hint checkers that the contents of the list must be instances of the <code>firefoxprofile</code> type. If you wanted to provide some initial profiles in that list, just include them in the list literal, no need to append them afterwards. </p>
<p>You assigned the class generated by <code>namedtuple()</code> to the name <code>firefoxprofile</code> so that’s what the rest of your code would use to reference it, and not by the name <code>Profile</code>. You may want to assign the <code>namedtuple()</code> result to the same name you passed in as the first argument, though, so <code>Profile = namedtuple('Profile', ...)</code>.</p>
<p>However, you probably also want to use the <a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple" rel="nofollow noreferrer"><code>typing.NamedTuple</code> class</a> to define your typed named tuple instead; the post you linked to covered this but here it is applied to your example:</p>
<pre><code>from typing import Optional, NamedTuple, List

class FirefoxProfile(NamedTuple):
    name: str
    path: str
    is_relative: bool
    default: Optional[str]

ffprofiles: List[FirefoxProfile] = [
    FirefoxProfile('Jason', 'Profiles/er5rtak4.Jason', True, None),
    # ... and more
]
</code></pre>
<p>Defining a class that’s a subclass of <code>typing.NamedTuple</code> has the same result as using the <code>namedtuple()</code> function, except the syntax is a lot cleaner, you get to add types for the fields, and you can optionally add a docstring and additional attributes or methods (almost anything that's not a type-hinted attribute or a namedtuple method goes).</p>
<p>Now the type hinting machinery will know much more about what is expected. Not only is it now clear what type of instances the list will contain, the above also documents what attributes the named tuple class supports and what type each those attributes have. I made some educated guesses as to what those types might be. I also used Python's PEP-8 style conventions for the names here, so the named tuple attributes all use lowercase_with_underscores (“snake_case”) rather than CamelCase. The latter should really only be used for class names.  </p>
</div>
<span class="comment-copy"><code>List[firefoxprofile]</code>?</span>
<span class="comment-copy">Never mind, it's <code>List[firefoxprofile]</code> like Aran said. Works for me.</span>
<span class="comment-copy">@timgeb - Can you post a full answer on how you declared the <code>List</code> with the type hint? Maybe I'm not declaring the <code>List</code> correctly</span>
<span class="comment-copy">@Sveta <code>List[firefoxprofile]</code> -&gt; <code>typing.List[__main__.Profile]</code>. Your error is somewhere else.</span>
<span class="comment-copy">@timgeb - When I declare a <code>List</code> normally, <code>ffprofiles = []</code> it works.</span>
<span class="comment-copy">Thanks for this, don't know why my question has down voted twice.</span>
<span class="comment-copy">@Sveta: I can't tell you why either, because I unfortunately still can't read minds. Your question perhaps lacks a sharing of your research, or those that voted felt you could have done more research into Python's type hinting syntax before posting. If you did do that research, make sure you share it in your post?</span>
<span class="comment-copy">Good advice! Will try harder next time.</span>
