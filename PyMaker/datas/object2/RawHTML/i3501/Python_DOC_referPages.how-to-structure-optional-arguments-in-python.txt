<div class="post-text" itemprop="text">
<p>I'm pretty new to python and im wondering whats the best way is to stucture and build my code in a specific data validation case. I'm building cmd line script that takes 3 arguments and save them to variables. The third argument is optional. How should i handle the optional argument. I get promted for "IndexError: list index out of range" when im not specifing the third argument. </p>
<p>Whats the most simple and practical why to validate user input with a optional argument? </p>
<pre><code>user_cat = sys.argv[1]
user_id = sys.argv[2]
user_guid = sys.argv[3]

def validate(user_cat, argv_cat_list, user_guid):
    if len(user_cat) &gt; 10 or user_cat not in argv_cat_list:
        print("Error! Please specify a valid category (AddDevice, GetAccount, c, p, GetDevices, r ,s)")
        sys.exit()
    elif len(user_id) == 36 or user_id.startswith("SAM-") and len(user_guid) == False:
        getInfo()
        sys.exit()
    elif len(user_cat) &gt;= 10 and len(user_guid) == 36 and user_id.startswith("FRA-"):
        print ("Test-hest!")
    else:
        print("Error! Please specify a valid input")
        sys.exit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use <code>argparse</code> for this. You don't <em>always</em> need flags, sometimes just a positional argument is better as it saves typing, compare e.g. with <code>cat</code>. Try the following example</p>
<pre><code>parser = argparse.ArgumentParser(description='LOLCATZ')
parser.add_argument('cat')
parser.add_argument('id')
parser.add_argument('guid')
parser.add_argument('optional1', nargs='?')  # positional and optional
parser.add_argument('--optional2')  # optional flag
args = parser.parse_args()
print(args)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend the <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a> library. Tutorial <a href="https://docs.python.org/2/howto/argparse.html" rel="nofollow noreferrer">here.</a></p>
<p>Write something like:</p>
<pre><code>parser = argparse.ArgumentParser(description = "[insert some description here]")
parser.add_argument('-i', "--user_cat", help = '[insert some help]')
parser.add_argument('-i', "--cat_list", help = '[insert more help]')
parser.add_argument('-u', "--user_guid", nargs = '?', help = '[insert some help]')
args = parser.parse_arg()
# Access the variables with args.user_cat, args.cat_list, etc.
</code></pre>
</div>
<span class="comment-copy">You might want to take a look at <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a>.</span>
<span class="comment-copy">You might want to look at invoke (<a href="https://pypi.org/project/invoke/" rel="nofollow noreferrer">pypi.org/project/invoke</a>) if you're writing simple tasks, otherwise the standard library module argparse (<a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">docs.python.org/3/library/argparse.html</a>) handles argument parsing for command line scripts.</span>
<span class="comment-copy">ps:.. this <code>and len(user_guid) == False</code> is going to be true (<code>bool</code> is a subtype of <code>int</code>), but very confusing to read.</span>
<span class="comment-copy">See <a href="https://stackoverflow.com/questions/2492087/how-to-get-the-nth-element-of-a-python-list-or-a-default-if-not-available">How to get the nth element of a python list or a default if not available</a>.</span>
