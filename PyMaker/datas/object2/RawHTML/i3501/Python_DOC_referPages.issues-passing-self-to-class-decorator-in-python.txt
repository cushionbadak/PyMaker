<div class="post-text" itemprop="text">
<p>I am new to decorators but ideally I wan to use them to simply define a bunch of class functions within class OptionClass, each representing some particular option with a name and description and if it's required. I don't want to modify the operation of the class function at all if that makes sense, I only want to use the decorator to define name, description, and if it's required.</p>
<p>Problem 1: I construct an OptionClass() and I want to call it's option_1. When I do this I receive a TypeError as the <strong>call</strong> decorator is not receiving an instance of OptionClass. Why is this? When I call option_1 passing the instance of OptionClass() it works.  How do I call option_1 without needing to always pass the instance as self.
The error when received is: </p>
<pre><code>Traceback (most recent call last):
  File "D:/OneDrive_P/OneDrive/projects/python/examples/dec_ex.py", line 110, in &lt;module&gt;
    print(a.option_1("test")) # TypeError: option1() missing 1 required positional argument: 'test_text'
   File "D:/OneDrive_P/OneDrive/projects/python/examples/dec_ex.py", line 80, in __call__
    return self.function_ptr(*args, **kwargs)
TypeError: option_1() missing 1 required positional argument: 'test_text'
</code></pre>
<p>Problem 2: How would I run or call methods on the decorator to set_name, set_description, set_required?</p>
<p>Problem 3: Although this is a sample I intend to code an option class using async functions and decorate them. Do I need to make the decorator <strong>call</strong> be <code>async def __call__()</code> or is it fine since it's just returning the function?</p>
<pre><code>class option_decorator(object):
    def __init__(self, function_pt):
        self.function_ptr = function_pt
        self.__required = True
        self.__name = ""
        self.__description = ""

    def set_name(self, text):
        self.__name = text

    def set_description(self, text):
        self.__description = text

    def set_required(self,flag:bool):
        self.__required = flag

    def __bool__(self):
        """returns if required"""
        return self.__required

    def __call__(self, *args, **kwargs):
        return self.function_ptr(*args, **kwargs)

    def __str__(self):
        """prints a description and name of the option """
        return "{} - {}".format(self.__name, self.__description)


class OptionClass(object):
    """defines a bunch of options"""
    @option_decorator
    def option_1(self,test_text):
        return("option {}".format(test_text))

    @option_decorator
    def option_2(self):
        print("option 2")

    def get_all_required(self):
        """would return a list of option functions within the class that have their decorator required flag set to true"""
        pass

    def get_all_available(self):
        """would return all options regardless of required flag set"""
        pass

    def print_all_functions(self):
        """would call str(option_1) and print {} - {} for example"""
        pass

a = OptionClass()
print(a.option_1("test")) # TypeError: option1() missing 1 required positional argument: 'test_text'
print(a.option_1(a,"test")) #Prints: option test
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>Problem 1</h3>
<p>You implemented the method wrapper as a custom callable instead of as a normal function object. This means that you must implement the <code>__get__()</code> descriptor that transforms a function into a method yourself. (If you had used a function this would already be present.)</p>
<pre><code>from types import MethodType


class Dec:
 def __init__(self, f):
     self.f = f

 def __call__(self, *a, **kw):
     return self.f(*a, **kw)

 def __get__(self, obj, objtype=None):
     return self if obj is None else MethodType(self, obj)


class Foo:
    @Dec
    def opt1(self, text):
        return 'foo' + text
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; Foo().opt1('two')
'footwo'
</code></pre>
<p>See the <a href="https://docs.python.org/3/howto/descriptor.html#functions-and-methods" rel="nofollow noreferrer">Descriptor HowTo Guide</a></p>
<h3>Problem 2</h3>
<p>The callable <code>option_decorator</code> instance replaces the function in the <code>OptionClass</code> dict. That means that mutating the callable instance affects all instances of <code>OptionClass</code> that use that callable object. Make sure that's what you want to do, because if you want to customize the methods per-instance, you'll have to build this differently.</p>
<p>You could access it in class definition like</p>
<pre><code>class OptionClass(object):
    """defines a bunch of options"""
    @option_decorator
    def option_1(self,test_text):
        return("option {}".format(test_text))

    option_1.set_name('foo')
</code></pre>
<h3>Problem 3</h3>
<p>The <code>__call__</code> method in your example isn't returning a function. It's returning the <em>result</em> of the <code>function_ptr</code> invocation. But that will be a coroutine object if you define your options using <code>async def</code>, which you would have to do anyway if you're using the async/await syntax in the function body. This is similar to the way that <code>yield</code> transforms a function into a function that returns a generator object.</p>
</div>
<span class="comment-copy">Please please please don't use double-underscore name mangling like this, Python != Java. And every time you write a letter or a setter a baby python dies.</span>
<span class="comment-copy">Anyway, it would be helpful if you posted the full error message. I am away from my laptop right now, but I suspect you are running into the usual problem of decorating a method with a class decorator- your "method" is is now an instance of the decorator class, and not an instance of the function type, thus it lacks the appropriate descriptor methods <code>__set__</code> and <code>__get__</code> to implement method instance binding... Normally, people just use function based and not class based decorators to cut the Gordian knot so to speak. You can usually handle state well enough using closures.</span>
<span class="comment-copy">Fundamentally, I see little rhyme or reason to your use of a decorator here. It sounds to me like you are looking for straightforward composition.</span>
<span class="comment-copy">Move <code>from types import MethodType</code> from inside your method, and this is a fine solution.</span>
