<div class="post-text" itemprop="text">
<p>I want to get the execution time of several portions of my code. Currently I am using <code>time.time()</code> but I feel a bit dumb when writing again and over again code like this:</p>
<pre><code>start = time()
function1(args1)
print("Execution of function1: {}".format(time()-start))

start = time()
function2(args2)
print("Execution of function2: {}".format(time()-start))

start = time()
function3(args3)
print("Execution of function3: {}".format(time()-start))
</code></pre>
<p>Please do you know any smarter way to do this? I couldn't find any module that would enable to do things like this (for instance):</p>
<pre><code>chrono("Execution of function1")
function1(args1)

chrono("Execution of function2")
function2(args2)

chrono("Execution of function3")
function3(args3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import time

def timeit(method):
    def timed(*args, **kw):
        ts = time.time()
        result = method(*args, **kw)
        te = time.time()
        print '%r (%r, %r) %2.2f sec' % \
            (method.__name__, args, kw, te-ts)
        return result
    return timed


@timeit
def function1():
    time.sleep(1)
    print 'function1'

&gt;&gt;&gt; function1()
function1
'function1' ((), {}) 1.00 sec
</code></pre>
<p>Use this decorator for function definition. </p>
<p>Reference: </p>
<p><a href="https://www.zopyx.com/andreas-jung/contents/a-python-decorator-for-measuring-the-execution-time-of-methods" rel="nofollow noreferrer">https://www.zopyx.com/andreas-jung/contents/a-python-decorator-for-measuring-the-execution-time-of-methods</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at the <code>timeit</code> module.</p>
<p><a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">https://docs.python.org/3/library/timeit.html</a></p>
<p>From that page,</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('"-".join(str(n) for n in range(100))', number=10000)
0.3018611848820001
&gt;&gt;&gt; timeit.timeit('"-".join([str(n) for n in range(100)])', number=10000)
0.2727368790656328
&gt;&gt;&gt; timeit.timeit('"-".join(map(str, range(100)))', number=10000)
0.23702679807320237
</code></pre>
</div>
