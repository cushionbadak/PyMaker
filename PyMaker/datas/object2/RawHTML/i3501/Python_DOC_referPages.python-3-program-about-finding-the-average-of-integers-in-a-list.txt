<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1265665/how-can-i-check-if-a-string-represents-an-int-without-using-try-except">How can I check if a string represents an int, without using try/except?</a>
<span class="question-originals-answer-count">
                    14 answers
                </span>
</li>
</ul>
</div>
<p>How do I check if a user's string input is a number (e.g. <code>-1</code>, <code>0</code>, <code>1</code>, etc.)?</p>
<pre><code>user_input = input("Enter something:")

if type(user_input) == int:
    print("Is a number")
else:
    print("Not a number")
</code></pre>
<p>The above won't work since <code>input</code> always returns a string.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply try converting it to an int and then bailing out if it doesn't work.</p>
<pre><code>try:
   val = int(userInput)
except ValueError:
   print("That's not an int!")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Apparently this will not work for negative values, but it will for positive.  Sorry about that, just learned about this a few hours ago myself as I have just recently gotten into Python.</p>
<p>Use isdigit()</p>
<pre><code>if userinput.isdigit():
    #do stuff
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think that what you'd be looking for here is the method <code>isnumeric()</code> (<a href="https://docs.python.org/3/library/stdtypes.html#str.isnumeric" rel="noreferrer">Documentation for python3.x</a>):</p>
<pre><code>&gt;&gt;&gt;a = '123'
&gt;&gt;&gt;a.isnumeric()
true
</code></pre>
<p>Hope this helps</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3 the following will work.</p>
<pre><code>userInput = 0
while True:
  try:
     userInput = int(input("Enter something: "))       
  except ValueError:
     print("Not an integer!")
     continue
  else:
     print("Yes an integer!")
     break 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>EDITED:
You could also use this below code to find out if its a number or also a negative</p>
<pre><code>import re
num_format = re.compile("^[\-]?[1-9][0-9]*\.?[0-9]+$")
isnumber = re.match(num_format,givennumber)
if isnumber:
    print "given string is number"
</code></pre>
<p>you could also change your format to your specific requirement.
I am seeing this post a little too late.but hope this helps other persons who are looking for answers :) .  let me know if anythings wrong in the given code.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you specifically need an int or float, you could try "is not int" or "is not float":</p>
<pre><code>user_input = ''
while user_input is not int:
    try:
        user_input = int(input('Enter a number: '))
        break
    except ValueError:
        print('Please enter a valid number: ')

print('You entered {}'.format(a))
</code></pre>
<p>If you only need to work with ints, then the most elegant solution I've seen is the ".isdigit()" method:</p>
<pre><code>a = ''
while a.isdigit() == False:
    a = input('Enter a number: ')

print('You entered {}'.format(a))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Works fine for check if an <strong>input</strong> is
   a positive Integer AND in a specific range</p>
<pre><code>def checkIntValue():
    '''Works fine for check if an **input** is
   a positive Integer AND in a specific range'''
    maxValue = 20
    while True:
        try:
            intTarget = int(input('Your number ?'))
        except ValueError:
            continue
        else:
            if intTarget &lt; 1 or intTarget &gt; maxValue:
                continue
            else:
                return (intTarget)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend this, @karthik27, for negative numbers </p>
<pre><code>import re
num_format = re.compile(r'^\-?[1-9][0-9]*\.?[0-9]*')
</code></pre>
<p>Then do whatever you want with that regular expression, match(), findall() etc</p>
</div>
<div class="post-text" itemprop="text">
<p>the most elegant solutions would be the already proposed,</p>
<pre><code>a=123
bool_a = a.isnumeric()
</code></pre>
<p>Unfortunatelly it doesn't work both for negative integers and for general float values of a. If your point is to check if 'a' is a generic number beyond integers i'd suggest the following one, which works for every kind of float and integer :). Here is the test:</p>
<pre><code>def isanumber(a):

    try:
        float(repr(a))
        bool_a = True
    except:
        bool_a = False

    return bool_a


a = 1 # integer
isanumber(a)
&gt;&gt;&gt; True

a = -2.5982347892 # general float
isanumber(a)
&gt;&gt;&gt; True

a = '1' # actually a string
isanumber(a)
&gt;&gt;&gt; False
</code></pre>
<p>I hope you find it useful :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the isdigit() method for strings.
In this case, as you said the input is always a string: </p>
<pre><code>    user_input = input("Enter something:")
    if user_input.isdigit():
        print("Is a number")
    else:
        print("Not a number")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This solution will accept only integers and nothing but integers.</p>
<pre><code>def is_number(s):
    while s.isdigit() == False:
        s = raw_input("Enter only numbers: ")
    return int(s)


# Your program starts here    
user_input = is_number(raw_input("Enter a number: "))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works with any number, including a fraction:</p>
<pre><code>import fractions

def isnumber(s):
   try:
     float(s)
     return True
   except ValueError:
     try: 
       Fraction(s)
       return True
     except ValueError: 
       return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not divide the input by a number? This way works with everything. Negatives, floats, and negative floats. Also Blank spaces and zero.</p>
<pre><code>numList = [499, -486, 0.1255468, -0.21554, 'a', "this", "long string here", "455 street area", 0, ""]

for item in numList:

    try:
        print (item / 2) #You can divide by any number really, except zero
    except:
        print "Not A Number: " + item
</code></pre>
<p>Result:</p>
<pre><code>249
-243
0.0627734
-0.10777
Not A Number: a
Not A Number: this
Not A Number: long string here
Not A Number: 455 street area
0
Not A Number: 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>natural</strong>: [0, 1, 2 ... ∞]</p>
<p>Python 2</p>
<pre><code>it_is = unicode(user_input).isnumeric()
</code></pre>
<p>Python 3</p>
<pre><code>it_is = str(user_input).isnumeric()
</code></pre>
<p><strong>integer</strong>: [-∞, .., -2, -1, 0, 1, 2, ∞]</p>
<pre><code>try:
    int(user_input)
    it_is = True
 except ValueError:
    it_is = False
</code></pre>
<p><strong>float</strong>: [-∞, .., -2, -1.0...1, -1, -0.0...1, 0, 0.0...1, ..., 1, 1.0...1, 
..., ∞] </p>
<pre><code>try:
    float(user_input)
    it_is = True
 except ValueError:
    it_is = False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I know this is pretty late but its to help anyone else that had to spend 6 hours trying to figure this out. (thats what I did):</p>
<p>This works flawlessly: (checks if any letter is in the input/checks if input is either integer or float)</p>
<pre><code>a=(raw_input("Amount:"))

try:
    int(a)
except ValueError:
    try:
        float(a)
    except ValueError:
        print "This is not a number"
        a=0


if a==0:
    a=0
else:
    print a
    #Do stuff
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a simple function that checks input for INT and RANGE.  Here, returns 'True' if input is integer between 1-100, 'False' otherwise</p>
<pre><code>def validate(userInput):

    try:
        val = int(userInput)
        if val &gt; 0 and val &lt; 101:
            valid = True
        else:
            valid = False

    except Exception:
        valid = False

    return valid
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is the simplest solution:</p>
<pre><code>a= input("Choose the option\n")

if(int(a)):
    print (a);
else:
    print("Try Again")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>while True:
    b1=input('Type a number:')
    try:
        a1=int(b1)
    except ValueError:
        print ('"%(a1)s" is not a number. Try again.' %{'a1':b1})       
    else:
        print ('You typed "{}".'.format(a1))
        break
</code></pre>
<p>This makes a loop to check whether input is an integer or not, result would look like below:</p>
<pre><code>&gt;&gt;&gt; %Run 1.1.py
Type a number:d
"d" is not a number. Try again.
Type a number:
&gt;&gt;&gt; %Run 1.1.py
Type a number:4
You typed 4.
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you wanted to evaluate floats, and you wanted to accept <code>NaN</code>s as input but not other strings like <code>'abc'</code>, you could do the following:</p>
<pre><code>def isnumber(x):
    import numpy
    try:
        return type(numpy.float(x)) == float
    except ValueError:
        return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've been using a different approach I thought I'd share. Start with creating a valid range:</p>
<pre><code>valid = [str(i) for i in range(-10,11)] #  ["-10","-9...."10"] 
</code></pre>
<p>Now ask for a number and if not in list continue asking:</p>
<pre><code>p = input("Enter a number: ")

while p not in valid:
    p = input("Not valid. Try to enter a number again: ")
</code></pre>
<p>Lastly convert to int (which will work because list only contains integers as strings:</p>
<pre><code>p = int(p)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I also ran into problems this morning with users being able to enter non-integer responses to my specific request for an integer.</p>
<p>This was the solution that ended up working well for me to force an answer I wanted:</p>
<pre><code>player_number = 0
while player_number != 1 and player_number !=2:
    player_number = raw_input("Are you Player 1 or 2? ")
    try:
        player_number = int(player_number)
    except ValueError:
        print "Please enter '1' or '2'..."
</code></pre>
<p>I would get exceptions before even reaching the try: statement when I used </p>
<pre><code>player_number = int(raw_input("Are you Player 1 or 2? ") 
</code></pre>
<p>and the user entered "J" or any other non-integer character.  It worked out best to take it as raw input, check to see if that raw input could be converted to an integer, and then convert it afterward.</p>
</div>
<div class="post-text" itemprop="text">
<p>try this! it worked for me even if I input negative numbers.</p>
<pre><code>  def length(s):
    return len(s)

   s = input("Enter the String: ")
    try:
        if (type(int(s)))==int :
            print("You input an integer")

    except ValueError:      
        print("it is a string with length " + str(length(s)))   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on inspiration from answer. I defined a function as below. Looks like its working fine. Please let me know if you find any issue</p>
<pre><code>def isanumber(inp):
    try:
        val = int(inp)
        return True
    except ValueError:
        try:
            val = float(inp)
            return True
        except ValueError:
            return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a=10

isinstance(a,int)  #True

b='abc'

isinstance(b,int)  #False
</code></pre>
</div>
<span class="comment-copy">I don't know whether in "input always returns strings", "returns" is correct.</span>
<span class="comment-copy">it looks like you're using python 3.x in which case yes <code>input</code> always returns strings.  See: <a href="http://docs.python.org/release/3.1.3/library/functions.html#input" rel="nofollow noreferrer">docs.python.org/release/3.1.3/library/functions.html#input</a></span>
<span class="comment-copy">@DanielDiPaolo: Oh yes, I'm aware of that, hence the question, I was just didn't know if the word return was correct.</span>
<span class="comment-copy">ah, then yes the term "returns" is precisely the correct term!</span>
<span class="comment-copy">@Trufa <code>if type(eval(user_input)) == int:</code> this might work.</span>
<span class="comment-copy">This lets you accept things like 4.1 when technically only 4 is valid. It is also against the python mentality to have secret conversions like this happening and I would prefer to do strict checks at my public interface</span>
<span class="comment-copy">@PeterR I think this works if you convert from a string.</span>
<span class="comment-copy">@PeterR You could use <code>float()</code> instead of <code>int()</code></span>
<span class="comment-copy">this one is not working to check if the value is boolean or integer, boolean is considered as 0 or 1.</span>
<span class="comment-copy">@PeterR Not sure what you mean by "this lets you accept things like 4.1". DiPaolo's code throws ValueError on the string input 4.1</span>
<span class="comment-copy">"-1".isdigit() == False</span>
<span class="comment-copy">Does it work for float numbers?</span>
<span class="comment-copy">I don't believe so, Llopis.  I kind of jumped the gun answering questions before I knew enough back when I gave this answer.  I would do the same as Daniel DiPaolo's answer for the int, but use float() instead of int().</span>
<span class="comment-copy">Negative numbers and floats return false because '-' and '.'  are not digits.  The isdigit() function checks if every character in the string is between '0' and '9'.</span>
<span class="comment-copy">Worth noting that in Python 2.7 this only works for unicode strings. A non-unicode string (<code>"123456".isnumeric()</code>) yields <code>AttributeError: 'str' object has no attribute 'isnumeric'</code>, while <code>U"12345".numeric()</code> = <code>True</code></span>
<span class="comment-copy">Also, there are some edge cases where this doesn't work. Take <code>a = '\U0001f10a'</code>. <code>a.isnumeric()</code> is True, but <code>int(a)</code> raises a ValueError.</span>
<span class="comment-copy"><code>'3.3'.isnumeric()</code> is <code>False</code></span>
<span class="comment-copy">This will check if there is a numeric (float, int, etc) within the string.  However, if there is more than just the numeric, it will still return a result.  For example: "1.2 Gbps" will return a false positive.  This may or may not be useful to some people.</span>
<span class="comment-copy">Also note: for anyone now looking, my original comment is no longer valid.  :P  Thanks for the update @karthik27!</span>
<span class="comment-copy">good idea. clean and practical. Although it needs some changes for specific cases, say it matches 3.4.5 at the moment too</span>
<span class="comment-copy">why not just: <code>num_format = re.compile(r'^\-?[1-9]+\.?[0-9]*')</code></span>
<span class="comment-copy">instead just convert to float</span>
<span class="comment-copy">This will return a <code>float</code>, rather than a <code>bool</code>, if the conversion doesn't fail.</span>
<span class="comment-copy">Thanks Carpetsmoker you are right :) Fixed!</span>
<span class="comment-copy">I'd like to know what is wrong with this answer, if you don't mind. There may be better ways to perform this task that I'm willing to know</span>
<span class="comment-copy">Doesn't work if you input <code>0</code>, one of the examples specifically mentioned by the OP.</span>
<span class="comment-copy">Welcome to Stack Overflow!  This is an old question, and the accepted answer seems to be pretty good.  Are you sure that you have something new to add?</span>
<span class="comment-copy">I thought it was a slight improvement: no less efficient while avoiding the nested if-else.  I'm new here, if the answer hurts the community no hard feels if it's removed.</span>
<span class="comment-copy"><code>SyntaxError: 'return' outside function</code>. Also, <code>a is int</code> will never evaluate to <code>True</code>.</span>
<span class="comment-copy">thanks @N.Wouda for your help , i have made the changes,check this</span>
<span class="comment-copy">Are you sure that your answer is actually contributing something new to this question?</span>
<span class="comment-copy">@N.Wouda actually I'm in a learning stage and trying to help others, so they don't get stuck in such basic problems.</span>
<span class="comment-copy">If 'a' is a string, int(a) throws an exception and the 'else' branch never gets called.  Tested in python 2 &amp; 3.</span>
<span class="comment-copy">It's generally a good idea to only catch the exceptions you're handling. In this case it'd be <code>ValueError</code>.</span>
<span class="comment-copy">Thanks for the tip!  I've edited the solution to include that feedback.  That was my first ever SO solution!</span>
<span class="comment-copy">When posting code, try to format it</span>
