<div class="post-text" itemprop="text">
<p>Let say I have the following code to run multiple task in parallel.</p>
<pre><code>with concurrent.futures.ThreadPoolExecutor(max_workers=connections) as executor:
    loop = asyncio.get_event_loop()
    futures = [
        loop.run_in_executor(
             executor,
             fun,
             arg
        )
        for i in range(connections)
    ]
    for result in await asyncio.gather(*futures):
        # I want to access the futures task here
        pass
</code></pre>
<p>Is it possible to read the the futures' task once it has been executed?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is it possible to read the the futures' task once it has been executed?</p>
</blockquote>
<p>In asyncio, the word <em>task</em> has a specialized meaning, referring to a <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Task" rel="nofollow noreferrer">class</a> that subclasses <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Future" rel="nofollow noreferrer"><code>Future</code></a> specialized for driving coroutines.</p>
<p>In your code, <code>asyncio.gather()</code> returns results, and you also have the <code>futures</code> variable that contains the <code>Future</code> objects which can also be used to access the same results. If you need to access additional information (like the original <code>fun</code> or <code>arg</code>), you can attach it to the appropriate <code>Future</code> or use a dict to map it. For example:</p>
<pre><code>futures = []
for conn in connections:
    fut = loop.run_in_executor(executor, fun, arg)
    fut.conn = conn  # or other info you need
await asyncio.wait(futures)
# at this point all the futures are done, and you can use future.result()
# to access the result of an individual future, and future.conn to obtain
# the connection the future was created for
</code></pre>
</div>
<span class="comment-copy">What is the future's task?</span>
<span class="comment-copy">Thank you! That was really simple, I just need to attach the original function or argument to the <code>Future</code> object.</span>
