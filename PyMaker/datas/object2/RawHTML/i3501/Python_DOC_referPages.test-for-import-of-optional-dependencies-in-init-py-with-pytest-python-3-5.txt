<div class="post-text" itemprop="text">
<p>I have a package for python 3.5 and 3.6 that has optional dependencies for which I want tests (pytest) that run on either version. </p>
<p>I made a reduced example below consisting of two files, a simple <code>__init__.py</code> where the optional package "requests" (just an example) is imported and a flag is set to indicate the availability of requests.</p>
<pre><code>mypackage/
├── mypackage
│   └── __init__.py
└── test_init.py
</code></pre>
<p>The <code>__init__.py</code> file content:</p>
<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-

requests_available = True

try:
    import requests
except ImportError:
    requests_available = False
</code></pre>
<p>The <code>test_init.py</code> file content:</p>
<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-
import pytest, sys

def test_requests_missing(monkeypatch):
    import mypackage
    import copy
    fakesysmodules = copy.copy(sys.modules)
    fakesysmodules["requests"] = None
    monkeypatch.delitem(sys.modules,"requests")
    monkeypatch.setattr("sys.modules", fakesysmodules)
    from importlib import reload
    reload(mypackage)
    assert mypackage.requests_available == False


if __name__ == '__main__':
    pytest.main([__file__, "-vv", "-s"])
</code></pre>
<p>The <code>test_requests_missing</code> test works on Python 3.6.5:</p>
<pre><code>runfile('/home/bjorn/python_packages/mypackage/test_init.py', wdir='/home/bjorn/python_packages/mypackage')
============================= test session starts ==============================
platform linux -- Python 3.6.5, pytest-3.6.1, py-1.5.2, pluggy-0.6.0 -- /home/bjorn/anaconda3/envs/bjorn36/bin/python
cachedir: .pytest_cache
rootdir: /home/bjorn/python_packages/mypackage, inifile:
plugins: requests-mock-1.5.0, mock-1.10.0, cov-2.5.1, nbval-0.9.0, hypothesis-3.38.5
collecting ... collected 1 item

test_init.py::test_requests_missing PASSED

=========================== 1 passed in 0.02 seconds ===========================
</code></pre>
<p>But not on Python 3.5.4:</p>
<pre><code>runfile('/home/bjorn/python_packages/mypackage/test_init.py', wdir='/home/bjorn/python_packages/mypackage')
========================================================= test session starts ==========================================================
platform linux -- Python 3.5.4, pytest-3.6.1, py-1.5.2, pluggy-0.6.0 -- /home/bjorn/anaconda3/envs/bjorn35/bin/python
cachedir: .pytest_cache
rootdir: /home/bjorn/python_packages/mypackage, inifile:
plugins: requests-mock-1.5.0, mock-1.10.0, cov-2.5.1, nbval-0.9.1, hypothesis-3.38.5
collecting ... collected 1 item

test_init.py::test_requests_missing FAILED

=============================================================== FAILURES ===============================================================
________________________________________________________ test_requests_missing _________________________________________________________

monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x7f9a2953acc0&gt;

    def test_requests_missing(monkeypatch):
        import mypackage
        import copy
        fakesysmodules = copy.copy(sys.modules)
        fakesysmodules["requests"] = None
        monkeypatch.delitem(sys.modules,"requests")
        monkeypatch.setattr("sys.modules", fakesysmodules)
        from importlib import reload
&gt;       reload(mypackage)

test_init.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../anaconda3/envs/bjorn35/lib/python3.5/importlib/__init__.py:166: in reload
    _bootstrap._exec(spec, module)
&lt;frozen importlib._bootstrap&gt;:626: in _exec
    ???
&lt;frozen importlib._bootstrap_external&gt;:697: in exec_module
    ???
&lt;frozen importlib._bootstrap&gt;:222: in _call_with_frames_removed
    ???
mypackage/__init__.py:8: in &lt;module&gt;
    import requests
../../anaconda3/envs/bjorn35/lib/python3.5/site-packages/requests/__init__.py:97: in &lt;module&gt;
    from . import utils

.... VERY LONG OUTPUT ....

    from . import utils
../../anaconda3/envs/bjorn35/lib/python3.5/site-packages/requests/__init__.py:97: in &lt;module&gt;
    from . import utils
&lt;frozen importlib._bootstrap&gt;:968: in _find_and_load
    ???
&lt;frozen importlib._bootstrap&gt;:953: in _find_and_load_unlocked
    ???
&lt;frozen importlib._bootstrap&gt;:896: in _find_spec
    ???
&lt;frozen importlib._bootstrap_external&gt;:1171: in find_spec
    ???
&lt;frozen importlib._bootstrap_external&gt;:1145: in _get_spec
    ???
&lt;frozen importlib._bootstrap_external&gt;:1273: in find_spec
    ???
&lt;frozen importlib._bootstrap_external&gt;:1245: in _get_spec
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'requests', location = '/home/bjorn/anaconda3/envs/bjorn35/lib/python3.5/site-packages/requests/__init__.py'

&gt;   ???
E   RecursionError: maximum recursion depth exceeded

&lt;frozen importlib._bootstrap_external&gt;:575: RecursionError
======================================================= 1 failed in 2.01 seconds =======================================================
</code></pre>
<p>I have two questions:</p>
<ol>
<li><p>Why do I see this difference? Relevant packages seem to be of the same version on both 3.5 and 3.6.</p></li>
<li><p>Is there a better way to do what I want? The code I have now is stitched together from examples found online. I have tried to patch the import mechanism in an attempt to avoid "reload", but I have not managed.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I would mock the <a href="https://docs.python.org/3/library/functions.html#__import__" rel="nofollow noreferrer"><code>__import__</code> function</a> (the one invoked behind the <code>import modname</code> statement). Example:</p>
<pre><code>import builtins
import sys
import pytest


@pytest.fixture
def no_requests(monkeypatch):
    import_orig = builtins.__import__
    def mocked_import(name, globals, locals, fromlist, level):
        if name == 'requests':
            raise ImportError()
        return import_orig(name, locals, fromlist, level)
    monkeypatch.setattr(builtins, '__import__', mocked_import)


@pytest.fixture(autouse=True)
def cleanup_imports():
    yield
    sys.modules.pop('mypackage', None)


def test_requests_available():
    import mypackage
    assert mypackage.requests_available


@pytest.mark.usefixtures('no_requests')
def test_requests_missing():
    import mypackage
    assert not mypackage.requests_available
</code></pre>
<p>The fixture <code>no_requests</code> is responsible for replacing the <code>__import__</code> function with one that will raise on <code>import requests</code> attempt, doing fine on the rest of imports (we can't raise on any import or <code>pytest</code> itself will break). <code>cleanup_imports</code> is just to ensure that <code>mypackage</code> will be reimported in each test.</p>
</div>
<div class="post-text" itemprop="text">
<p>If a test tests optional functionality, it should be skipped rather than passed if that functionality is missing.</p>
<p><a href="https://docs.python.org/2/library/test.html?highlight=import_module#test.support.import_module" rel="nofollow noreferrer"><code>test.support.import_module()</code></a> is the function used in the Python autotest suite to skip a test or a test file if a module is missing:</p>
<pre><code>import test.support
import unittest

nonexistent = test.support.import_module("nonexistent")

class TestDummy(unittest.testCase):
    def test_dummy():
        self.assertTrue(nonexistent.vaporware())
</code></pre>
<p>Then, when running:</p>
<pre><code>&gt; python -m py.test -rs t.py

&lt;...&gt;
collected 0 items / 1 skipped

=========================== short test summary info ===========================
SKIP [1] C:\Python27\lib\test\support\__init__.py:90: SkipTest: No module named
nonexistent
========================== 1 skipped in 0.05 seconds ==========================
</code></pre>
</div>
<span class="comment-copy">That's a thoughtful question. Here are just a couple of suggestions. First, elaborate on what you are trying to accomplish with <code>test_requests_missing</code>, as this seems to be quite hacky. Second, you can narrow down the problem by minimizing the function (according to your intent) and also by using <code>pipenv</code>: prepare a minimal <code>Pipfile</code>, create a virtual env for different Python versions (with small steps, i.e., including <code>3.6.0</code>, <code>3.6.1</code> and so on), find out the Python version where you code stops working, and peruse release notes for the version.</span>
<span class="comment-copy">This works on both 3.5 and 3.6 and is much more specific than my old code.</span>
<span class="comment-copy">I respectfully disagree. My intention is not to run alternative tests in case requests is avalable, but to test that mypackage do in case this module is not installed.</span>
