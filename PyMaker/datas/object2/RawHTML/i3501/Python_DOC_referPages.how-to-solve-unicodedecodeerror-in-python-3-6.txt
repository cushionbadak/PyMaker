<div class="post-text" itemprop="text">
<p>I am switched from Python 2.7 to Python 3.6.</p>
<p>I have scripts that deal with some non-English content.</p>
<p>I usually run scripts via Cron and also in Terminal.</p>
<p>I had UnicodeDecodeError in my Python 2.7 scripts and I solved by this.</p>
<pre><code># encoding=utf8  
import sys  

reload(sys)  
sys.setdefaultencoding('utf8')
</code></pre>
<p>Now in Python 3.6, it doesnt work. I have print statements like <code>print("Here %s" % (myvar))</code> and it throws error. I can solve this issue by replacing it to <code>myvar.encode("utf-8")</code> but I don't want to write with each print statement.</p>
<p>I did <code>PYTHONIOENCODING=utf-8</code> in my terminal and I have still that issue.</p>
<p>Is there a cleaner way to solve <code>UnicodeDecodeError</code> issue in Python 3.6?</p>
<p>is there any way to tell Python3 to print everything in utf-8? just like I did in Python2?</p>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like your locale is broken <strong>and have another bytes-&gt;Unicode issue</strong>. The thing you did for Python 2.7 is a hack that only masked the real problem (there's a reason why you have to <code>reload sys</code> to make it work).</p>
<p>To fix your locale, try typing <code>locale</code> from the command line. It should look something like:</p>
<pre><code>LANG=en_GB.UTF-8
LC_CTYPE="en_US.UTF-8"
LC_NUMERIC="en_GB.UTF-8"
LC_TIME="en_GB.UTF-8"
LC_COLLATE="en_GB.UTF-8"
LC_MONETARY="en_GB.UTF-8"
LC_MESSAGES="en_GB.UTF-8"
LC_ALL=
</code></pre>
<p><code>locale</code> depends on <code>LANG</code> being set properly. Python effectively uses <code>locale</code> to work out what encoding to use when writing to stdout in. If it can't work it out, it defaults to ASCII.</p>
<p><strong>You should first attempt to fix your locale. If <code>locale</code> errors, make sure you've installed the correct language pack for your region.</strong></p>
<p>If all else fails, you can always fix Python by setting <code>PYTHONIOENCODING=UTF-8</code>. This should be used as a last resort as you'll be masking problems once again.</p>
<p>If Python is still throwing an error after setting <code>PYTHONIOENCODING</code> then please update your question with the stacktrace. Chances are you've got an implied conversion going on.</p>
</div>
<div class="post-text" itemprop="text">
<p>For a Python-only solution you will have to recreate your <code>sys.stdout</code> object:</p>
<pre><code>import sys, codecs
sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
</code></pre>
<p>After this, a normal <code>print("hello world")</code> should be encoded to UTF-8 automatically.</p>
<p>But you should try to find out why your terminal is set to such a strange encoding (which Python just tries to adopt to).  Maybe your operating system is configured wrong somehow.</p>
<p>EDIT: In my tests unsetting the env variable <code>LANG</code> produced this strange setting for the stdout encoding for me:</p>
<pre><code>LANG= python3
import sys
sys.stdout.encoding
</code></pre>
<p>printed <code>'ANSI_X3.4-1968'</code>.</p>
<p>So I guess you might want to set your <code>LANG</code> to something like 
<code>en_US.UTF-8</code>.  Your terminal program doesn't seem to do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 (including 3.6) is already Unicode supported. Here is the doc - <a href="https://docs.python.org/3/howto/unicode.html" rel="nofollow noreferrer">https://docs.python.org/3/howto/unicode.html</a> </p>
<p>So you don't need to force Unicode support like Python 2.7. Try to run your code normally. If you get any error reading a Unicode text file you need to use the <code>encoding='utf-8'</code> parameter while reading the file.</p>
</div>
<div class="post-text" itemprop="text">
<p>I mean you could write an custom function like this:
(Not optimal i know)</p>
<hr/>
<pre><code>import sys

def printUTF8(input):
    print(input.encode("utf-8"))
</code></pre>
</div>
<span class="comment-copy">Are the non-English files encoded properly in UTF-8 themselves?</span>
<span class="comment-copy">@EdwardMinnix I am scraping data from various Hewbrew/Korean sites, so data is not always clean.</span>
<span class="comment-copy">@usr2564301 is there any way to tell Python3 to print everything in utf-8? just like I did in Python2?</span>
<span class="comment-copy">Normally your terminal has an encoding defined which is used by Python to set the encoding of its file object (<code>sys.stdout</code>).  Can you provide what <code>sys.stdout.encoding</code> is set to on your machine?</span>
<span class="comment-copy">I think that is the root of the problem.  What strange terminal are you using?  In Unix-ish environments you can set the env var <code>TERM</code> to something like <code>xterm</code> or similar.  Also the <code>LANG</code> variable could have an influence.</span>
<span class="comment-copy">For future readers, please see our conversation in chat how @Alastair McCormack helped me solve my problem. <a href="https://chat.stackoverflow.com/rooms/173761/discussion-between-alastair-mccormack-and-umair">chat.stackoverflow.com/rooms/173761/â€¦</a></span>
<span class="comment-copy">Is this the same or significantly different from <code>sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf8')</code>? (Which I am sure I have learned from this very website.)</span>
<span class="comment-copy">@usr2564301 I'm not sure about the difference (if any).  The idea is clearly the same.  A much nicer way would be the simple <code>sys.stdout.encoding = 'utf-8'</code> but that doesn't work, unfortunately, because the <code>encoding</code> field is readonly.  But this is always the father of the thought and the two solutions are just different workaround implementations of it.</span>
<span class="comment-copy">@downvoter: Please explain what you didn't like.</span>
<span class="comment-copy">How to deal like this with the already open <code>sys.stdout</code>?</span>
<span class="comment-copy">I haven't got enough reputation to comment on and ask him about his terminal. Btw nice solution you've given up there.</span>
<span class="comment-copy">Yeah, urgs.  Close to a downvote.</span>
<span class="comment-copy">any way without doing <code>.encode("utf-8")</code>? so Python knows to print every string in utf-8?</span>
