<div class="post-text" itemprop="text">
<p>I'm coding a discord bot using python and I've run into an issue. I want the bot to print the messages it receives, however, it does this twice. And I'm at a total loss for why it's printing it twice.</p>
<p><a href="https://github.com/PGillner/Discord-IPL-Bot/tree/master" rel="nofollow noreferrer">https://github.com/PGillner/Discord-IPL-Bot/tree/master</a></p>
<p>Above is a link to the 3 "modules" that are causing the problem, it's still a work in progress with not that much code, should be fairly easy to navigate. Any help to why it prints it twice is greatly appreciated!</p>
<p>Main.py</p>
<pre><code>import discord
import asyncio
from discord import Status

from Status import Member_Status
from User import User_Who
from Matchmaking import MM

runtime = 0

client = discord.Client()

@client.event
async def on_member_update(before, after):
    await Member_Status(before, after) ## Complete

@client.event
async def on_message(message):
    await User_Who(message) ##Incomplete
    if await User_Who(message):
        await client.delete_message(message)

async def my_background_task():
    await client.wait_until_ready()
    while not client.is_closed:
        global run_time
        await MM() ##Incomplete
        print("Runtime: {}s".format(runtime))
        runtime += 10
        await asyncio.sleep(10)

@client.event
async def on_ready():
    print("------Logged in as------")
    print("        {}".format(client.user.name))
    print("   {}".format(client.user.id))
    print("------------------------")

client.loop.create_task(my_background_task())
client.run("NDU0OTQ1NTcyNzI2NzY3NjI3.Df04DA.paEHHr5h1frdHFLsth2THp7FFBs")
</code></pre>
<p>User.py</p>
<pre><code>import discord
import asyncio

from Print import Print_MSG
from Queue_join import Queue_Join
from Queue_leave import Queue_Leave
from match_room_1 import M_R_1
from match_room_2 import M_R_2
from match_room_3 import M_R_3
from match_room_4 import M_R_4
from match_room_5 import M_R_5

client = discord.Client()

async def User_Who(message):
    if message.author != client.user:
        await Print_MSG(message) ## Complete
        if str(message.channel) == "queue":
            if message.content.startswith("!join"):
                await Queue_Join() ##Incomplete
            elif message.content.startswith("!leave"):
                await Queue_Leave() ##Incomplete
            else:
                return True
        elif str(message.channel) == "match_room_1":
            await M_R_1() ##Incomplete
        elif str(message.channel) == "match_room_1":
            await M_R_2() ##Incomplete
        elif str(message.channel) == "match_room_1":
            await M_R_3() ##Incomplete
        elif str(message.channel) == "match_room_1":
            await M_R_4() ##Incomplete
        elif str(message.channel) == "match_room_1":
            await M_R_5() ##Incomplete
</code></pre>
<p>Print.py</p>
<pre><code>import discord
import asyncio

async def Print_MSG(message):
    timestamp = str(message.timestamp)
    timestamp = timestamp[:-7]
    timestamp = timestamp[11:]
    print("Channel: {} | {} [{}]: {}".format(message.channel, timestamp, message.author, message.content))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>await User_Who(message) ##Incomplete
if await User_Who(message):
</code></pre>
<p>Your <code>User_Who</code> coroutine runs twice, each of which contains <code>Print_MSG</code>.</p>
<pre><code>is_complete = await User_Who(message) ##Incomplete
if is_complete:
</code></pre>
<p>Besides, you are overusing <code>async</code>/<code>await</code>. May I know the reason why you do it for <code>Print_MSG</code> too? It just prints the message.</p>
</div>
<span class="comment-copy">Please add the <b>related</b> code as formatted text, not as a link!</span>
<span class="comment-copy">Code added. Hope it helps. :)</span>
<span class="comment-copy">You call <code>User_Who</code> twice, so it prints twice. Remove the first call to <code>User_Who</code></span>
<span class="comment-copy">I feel kinda stupid now...</span>
<span class="comment-copy">I'm not experienced enough to know what you should use async on and what not to use it on. And to be honest, I don't even know what it does.</span>
<span class="comment-copy">@PGillner, async await is used when some there are some works like requesting http response, which require time to wait. While you dun want the processor sitting here doing nth during these time, you give the function of calling request 'async' and in caller, give it 'await'. Read more: <a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow noreferrer">docs.python.org/3/library/asyncio-task.html</a></span>
<span class="comment-copy">Oh, that actually explained a lot, thanks! :)</span>
