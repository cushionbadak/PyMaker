<div class="post-text" itemprop="text">
<p>I'm trying to get the time of last modification (<code>os.stat.st_mtime</code>) of a particular directory. My issue is I have added a few metadata files that are hidden (they start with <code>.</code>). If I use <code>os.stat(directory).st_mtime</code> I get the date at which I updated the metadata file, not the date that a non-hidden file was modified in the directory. I would like to get the most recent time of modification for all of the other files in the directory other than the hidden metadata files.</p>
<p>I figure it's possible to write my own function, something along the lines of:</p>
<pre><code>for file in folder:
  if not file starts with '.':
    modified_times.append(os.path.getmtime('/path/to/file')
last_time = most recent of modified_times
</code></pre>
<p>However, is it possible to do this natively in python? Or do I need to write my own function like the pseudocode above (or something like <a href="https://stackoverflow.com/questions/7099290/how-to-ignore-hidden-files-using-os-listdir">this question</a>)?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your desired outcome is impossible. The most recent modification time of all non-hidden files doesn't necessarily correspond to the virtual "last modified time of a directory ignoring hidden files". The problem is that directories are modified when files are moved in and out of them, but the file timestamps aren't changed (the file was moved, but not modified). So your proposed solution is at best a heuristic; you can <em>hope</em> it's correct, but there is no way to be sure.</p>
<p>In any event, no, there is no built-in that provides this heuristic. The concept of hidden vs. non-hidden files is OS and file system dependent, and Python provides no built-in API that cares about the distinction. If you want to make a "last_modified_guess" function, you'll have to write it yourself (I recommend <a href="https://docs.python.org/3/library/os.html#os.scandir" rel="nofollow noreferrer">basing it on <code>os.scandir</code></a> for efficiency).</p>
<p>Something as simple as:</p>
<pre><code>last_time = max(entry.stat().st_mtime for entry in os.scandir(somedir) if not entry.name.startswith('.'))
</code></pre>
<p>would get you the most recent last modified time (in seconds since the epoch) of your non-hidden directory entries.</p>
<p><strong>Update</strong>: On further reflection, <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer">the <code>glob</code> module</a> does include a concept of <code>.</code> prefix meaning "hidden", so you could use <code>glob.glob</code>/<code>glob.iglob</code> of <code>os.path.join(somedir, '*')</code> to have it filter out the "hidden" files for you. That said, by doing so, you give up some of the potential benefits of <code>os.scandir</code> (free or cached <code>stat</code> results, free type checks, etc.), so if all you need is "hidden" filtering, a simple <code>.startswith('.')</code> check is not worth giving that up.</p>
</div>
<span class="comment-copy">A hidden file is simply a file whose name begins with a period and that is not by default shown by <code>ls</code>. In other words, it is a feature of <code>ls</code> (or any other file manager), not of the file. If you want to ignore hidden files, you have to "teach" Python by writing the code in your question or something similar.</span>
<span class="comment-copy"><code>modified_times=[os.path.getmtime(f) for f in folder if f[0]!='.']</code></span>
<span class="comment-copy">What you've written is fine. One minor improvement you could make is to not build the list in memory (by passing a generator expression to the <code>max</code> function, or by just doing <code>if val &gt;= max: max = val</code> in the loop instead of <code>append</code>, or whatever). But considering that directories rarely have more than a few thousand files, and the cost of 1000 stat calls vastly outweighs the cost of allocating a small list, I wouldn't worry about it.</span>
<span class="comment-copy">But meanwhile, if this is something you need to do often (like, say, every 20 minutes from now until the end of time), you may want to set up a kqueue/inotify/FSEvents/FindFirstChangeNotification watcher to update the time whenever a file is touched unless it's hidden, so you only need to do the scan once at startup and then never again (unless your program is restarted).</span>
<span class="comment-copy">Works great for Python3, but forgot to mention that I am using Python2.7, which doesn't have <code>os.scandir()</code></span>
<span class="comment-copy">@wcarhart: <a href="https://pypi.org/project/scandir/" rel="nofollow noreferrer">There is a third party PyPI package, <code>scandir</code></a>, that provides the same API under the name <code>scandir.scandir()</code>, assuming you consider that worth it. Otherwise, you'll be stuck with <code>os.listdir</code> or <code>glob.glob</code> (backed by <code>os.listdir</code>), which should be fine, if slightly less friendly, unless you're talking about directories with thousands of files or more.</span>
