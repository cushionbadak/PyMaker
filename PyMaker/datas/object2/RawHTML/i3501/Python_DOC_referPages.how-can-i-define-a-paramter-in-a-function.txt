<div class="post-text" itemprop="text">
<p>I'm trying to make the function dice randomly roll from 1-6. But when I try to add the different numbers from the function, it says that one and two are undefined. I'm not sure to how solve this, and I'm pretty new at coding.</p>
<pre><code>import random
    def dice(name):
        name = random.randint(1,6)
        print name
    dice('one')
    dice('two')
    dicesum = float(one) + float(two)
    message = raw_input('guess the number. ')
    if dicesum == message:
        print "You guess right! You win!"
    if dicesum != message:
        print "You guess wrong! You lose!"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You probably want <code>one</code> and <code>two</code> to represent the values returned by the dice roll:</p>
<pre><code>import random


def roll_dice():
    value = random.randint(1, 6)
    print(value)
    return value


roll_one = roll_dice()
roll_two = roll_dice()
dice_sum = roll_one + roll_two
guess = int(input('guess the number. '))  # cast to int so it can be compared to dice_sum
if dice_sum == guess:
    print("You guess right! You win!")
else:
    print("You guess wrong! You lose!")
</code></pre>
<p>I changed the variable names and function names to what I think is a better representation of what they are and do.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you write <code>name = random.randint(1, 6)</code>, that doesn't look at the current value of <code>name</code> and then create a new variable named whatever that value is; it just reassigns the variable <code>name</code>.</p>
<p>And, even if it <em>did</em> create a new variable, it would be a local variable, unusable outside the function.</p>
<p>What you really want to do here is not take a parameter at all:</p>
<pre><code>def dice():
    return random.randint(1,6)

one = dice()
two = dice()
dicesum = float(one) + float(two)
</code></pre>
<hr/>
<p>As a side note, you really don't need that <code>float</code> there. The numbers are already ints, and all you're doing with them is adding them and comparing to a string. You don't want the user to have to guess <code>7.0</code> (or, worse, <code>7.0000000000000000001</code>), you want them to guess <code>7</code>, right? So just use <code>int</code>.</p>
<p>Meanwhile, you <em>do</em> need to convert the user's input to a number. <code>raw_input</code> just returns a string. and the string <code>'7'</code> is not equal to the number <code>7</code> (whether it's an <code>int</code> or a <code>float</code>). So:</p>
<pre><code>one = dice()
two = dice()
dicesum = one + two
message = int(raw_input('guess the number. '))
</code></pre>
<hr/>
<p>If you actually <em>did</em> want to create a new global variable inside the function, that's <em>possible</em>. But it's almost always a very bad idea. To create a new global variable dynamically, you have to use the <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow noreferrer"><code>globals</code></a> function to get the global namespace as a dict, then work on that dict. Like this:</p>
<pre><code>def dice(name):
    value = random.randint(1,6)
    globals()[name] = value
</code></pre>
<p>But, again, this is almost always a very bad idea. Creating global variables from within a function is already a fishy thing to do. And good reasons for creating variables by name dynamically are even rarer. After all, you're not going to access the variable as <code>globals()['one']</code>, but as <code>one</code>, so you almost certainly want to create the variable not as <code>globals()['one']</code>, but as <code>one</code>. As in the example at the top of this answer.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>dicesum = float(one) + float(two)</code> should result in an error, since you have no variables called <code>one, two</code>. What you do have is <code>dice('one'),dice('two')</code>.</p>
<p>If you assign the results into variables <code>one, two = dice('one'),dice('two')</code> that would solve that. However, your <code>dice</code> function does not return a value, so that needs fixing too.</p>
<p>One last thing, <code>if dicesum == message:</code> will never be <code>True</code> since <code>message</code> is a <code>str</code> while <code>dicesum</code> is a <code>float</code>. Fix by casting <code>message</code> to a float</p>
<pre><code>import random
def dice(name):
    name = random.randint(1,6)
    print (name)
    return name # return value!

one = dice('one') # assign variables!!
two = dice('two') # assign variables!!
dicesum = float(one) + float(two)
message = float(raw_input('guess the number. ')) # cast!
if dicesum == message:
    print ("You guess right! You win!")
if dicesum != message: # this line can be shortened into "else:"
    print ("You guess wrong! You lose!")
</code></pre>
</div>
<span class="comment-copy">Converting the number to a string instead of converting the string to a number seems clumsier. If the user types <code>09</code>, and the answer is 9, should they really be told they guessed wrong?</span>
<span class="comment-copy">Yes, I agree. I was debating whether I wanted to change it or not - I will, thank you!</span>
<span class="comment-copy">upvoted for the passion for teaching! ;)</span>
<span class="comment-copy">I think you're missing the OP's confusing. He was hoping that <code>name = â€¦</code>, when <code>name</code> is the string <code>'one'</code>, would create a new variable named <code>one</code>. It's hard to explain why that's wrong, but that's what needs to be explained here.</span>
