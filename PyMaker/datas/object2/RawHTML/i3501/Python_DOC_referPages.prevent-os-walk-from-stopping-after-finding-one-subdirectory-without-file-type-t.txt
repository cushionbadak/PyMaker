<div class="post-text" itemprop="text">
<p>I am trying to walk through the subdirectories of a parent directory looking for the .xlsx file with the newest date in the file name in each subdirectory.  The naming convention for my files will be such that they will start with the date and then filename.</p>
<p>ex. 20180621 file name.xlsx</p>
<p>This way I can find the newest file from each subdirectory and run my script on them.</p>
<p>I have the following code which only works if I have a .xlsx in every directory, including the parent directory.  If I do not have a .xlsx in any of the directories, the code returns <code>ValueError: max() arg is an empty sequence</code> and then it exits without continuing the search.</p>
<pre><code>Parent Directory
----subdirectory1
--------subdirectory1.1
----subdirectory2
----subdirectory3
----etc.
</code></pre>
<ul>
<li><p>example 1:  If parent directory does not contain a .xlsx file, even though the subdirectories do, the code exits with max() empty sequence.  </p></li>
<li><p>example 2:  If there is a folder anywhere in the tree without a .xlsx file, the code exits with max() empty sequence.  If subdirectory1.1 doesn't have a .xlsx file it will exit the code and not check subdirectory2 or subdirectory3.</p></li>
</ul>
<p>How can I get <code>os.walk</code> to continue searching through all the subdirectories even after it finds one that does not contain the .xlsx file that I am looking for (including if the parent directory doesn't have a .xlsx file).</p>
<pre><code>for root, dirs, files in os.walk(path):
    list_of_files = []
    for file in files:
        if file.endswith(".xlsx"):
            list_of_files.append(file)
    largest = max(list_of_files)
    print (largest)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't stop, <code>max</code> throws an error. You can handle this in a couple of ways:</p>
<pre><code>...
for file in files:
    if file.endswith(".xlsx"):
        list_of_files.append(file)
if list_of_files:  # if it's not blank...
    print(max(list_of_files))
</code></pre>
<p>or</p>
<pre><code>...
for file in files:
    if file.endswith(".xlsx"):
        list_of_files.append(file)
try:
    print(max(list_of_files))
except ValueError:  # something goes wrong with `max` (or `print` I guess)
    # what do we do? Probably...
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>os.walk()</code> can't continue because an exception was raised. Either don't call <code>max()</code> with an empty list, catch the exception, or tell <code>max()</code> to return a default value if the list is empty.</p>
<p>You can trivially skip testing for the largest if there are no excel files; <code>if list_of_files:</code> will be false if the list is empty:</p>
<pre><code>for root, dirs, files in os.walk(path):
    list_of_files = []
    for file in files:
        if file.endswith(".xlsx"):
            list_of_files.append(file)
    largest = None
    if list_of_files:
        largest = max(list_of_files)
    print(largest or 'No Excel files in this directory')
</code></pre>
<p>If you are using Python 3.4 or newer, you can also tell the <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max()</code> function</a> to return a default value if your input list is empty:</p>
<pre><code>for root, dirs, files in os.walk(path):
    list_of_files = []
    for file in files:
        if file.endswith(".xlsx"):
            list_of_files.append(file)
    largest = max(list_of_files, None)  # None is the default value
    print(largest or 'No Excel files in this directory')
</code></pre>
<p>Last but not least, you can use <code>try...except ValueError:</code> to handle the exception thrown:</p>
<pre><code>for root, dirs, files in os.walk(path):
    list_of_files = []
    for file in files:
        if file.endswith(".xlsx"):
            list_of_files.append(file)
    try:
        largest = max(list_of_files)
        print(largest)
    except ValueError:
        print('No Excel files in this directory')
</code></pre>
<p>You can simplify your code by using the <a href="https://docs.python.org/3/library/fnmatch.html#fnmatch.filter" rel="nofollow noreferrer"><code>fnmatch.filter()</code> function</a> to filter out matching files:</p>
<pre><code>import fnmatch
import os

for root, dirs, files in os.walk(path):
    excel_files = fnmatch.filter(files, '*.xlsx')
    largest = max(list_of_files, None)
</code></pre>
</div>
<span class="comment-copy">I remember <a href="https://stackoverflow.com/questions/50951033/find-file-with-largest-number-in-filename-in-each-sub-directory-with-python">this question from yesterday</a> -- he's actually trying to get the largest in each dir, not the largest total.</span>
<span class="comment-copy">Sorry, I am trying to return a max value for each subdirectory that contains a .xlsx file.</span>
<span class="comment-copy">@Philalethes: then just test if there were <i>any</i> files matched. Do make this clear <b>in your question</b>, because right now it is ambigious as to what you expected to happen.</span>
<span class="comment-copy">@Philalethes: glad you felt both answers were of help. However, you can only select <i>one</i> of the two answers as 'accepted'. The choice is entirely yours, or you can choose not to mark either.</span>
