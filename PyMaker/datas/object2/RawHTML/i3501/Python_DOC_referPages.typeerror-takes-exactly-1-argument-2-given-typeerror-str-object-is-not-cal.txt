<div class="post-text" itemprop="text">
<p>I am looking to brush up on my python so I am writing a small test class. I am making a boy class, and trying to create an instance of Boy called "shy boy" that will say what kind of boy he is (a shy boy) and "hello"</p>
<pre><code>class Boy(object):

    def __init__(self, name, shoe):
        self.name = name 
        self.shoe = shoe 

    def speak(s):
        return s

    def shoeShize(shoe): 
        return "my shoe size is " + shoe

    def myName(name):
        return "hello i am a " + name
#class shyBoy(Boy)
shyBoy = Boy("shy boy", 9)
shyBoy.speak("hello")
print shyBoy.name("shy boy")
</code></pre>
<p>Right now I am getting these errors: </p>
<pre><code>Traceback (most recent call last):
  File "boy.py", line 17, in &lt;module&gt;
    shyBoy.speak("hello")
TypeError: speak() takes exactly 1 argument (2 given)

âžœ  ~ python boy.py
Traceback (most recent call last):
  File "boy.py", line 19, in &lt;module&gt;
    print shyBoy.name("shy boy")
TypeError: 'str' object is not callable
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Speak needs to be passed <code>self</code> as a parameter, since you plan to call it from an instance of the class.</p>
<p>For your second issue, your <em>function</em> is named <code>myName</code>, while the property of the class is named <code>name</code>. If you want to print the associated <code>name</code> provided at initialization, just use <code>print shyBoy.name</code>. If you want to try to use the <code>myName</code> function, use <code>print shyBoy.myName("shy boy")</code>. Note the lack of parens for <code>name</code>, since it is not a function and thus takes no arguments.</p>
<p>(However, I'm a little confused as to why are you trying to pass <code>name</code> as an argument to <code>myName</code> if you already have saved it in your <code>__init__</code>?)</p>
</div>
<div class="post-text" itemprop="text">
<p>You are missing the <code>self</code> arg in your function names:</p>
<pre><code>class Boy(object):

    def __init__(self, name, shoe):
        self.name = name 
        self.shoe = shoe 

    def speak(self, s):
        return s

    def shoeShize(self, shoe): 
        return "my shoe size is " + shoe

    def myName(self, name):
        return "hello i am a " + name
</code></pre>
<p>If you don't specify <code>self</code>, Python will default to thinking whatever the first arg you've given it is <code>self</code>. Unless you decorate the method with <code>@staticmethod</code>, <code>self</code> will always be the default first argument, and it is implicitly passed in. Thus, in your method call, you are technically saying <code>boy_inst.method(self, myarg)</code>. So if the function is only expecting <code>self</code> and you also give it <code>name</code>, then it will say "You've given me too many arguments." That takes care of the Argument number errors</p>
<p>For the string error you are seeing</p>
<p><code>boy.name</code> is a class variable, not a function. Thus, saying <code>boy.name('hi')</code> is not setting the class variable, it is attempting to call a class method called <code>name</code>:</p>
<pre><code> def name(self, arg):
     return arg
</code></pre>
<p>You set <code>name</code> on instantiation of the class</p>
<pre><code>shyboy = Boy("name", 9)
</code></pre>
<p>That will set the instance variables. To change these, you either need a method defined such as</p>
<pre><code># In my Boy class
def change_name(self, newname):
    self.name = newname
</code></pre>
<p>Or you can create a new class</p>
</div>
<span class="comment-copy"><code>.name</code> is the name itself, <code>"shy boy"</code>. If you want to call the method it's <code>myName</code>, but you don't need to pass in the name <i>again</i>; that's the whole point of a class, that it can store that state alongside the behaviour. Read up on <code>self</code>, e.g. in <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/classes.html</a>.</span>
