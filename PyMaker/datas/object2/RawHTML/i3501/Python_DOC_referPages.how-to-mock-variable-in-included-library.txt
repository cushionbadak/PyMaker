<div class="post-text" itemprop="text">
<p>Folks,</p>
<p>I have a problem during including <code>file.py</code> to <code>test_file.py</code> namely:</p>
<p><code>file.py</code> uses Robot library <code>BuiltIn</code>:</p>
<pre><code>from robot.libraries.BuiltIn import BuiltIn

DEFAULT_IPHY_TTI_TRACE_DIR =
os.path.join(BuiltIn().get_variable_value('${OUTPUT_DIR}'), 'iphy_tti_trace')
</code></pre>
<p>And when I try to include <code>file.py</code> in my <code>test_file.py</code></p>
<pre><code>import pytest
#import file.py
</code></pre>
<p>I receive:</p>
<pre><code>test_file.py:8: in &lt;module&gt;
/opt/ute/python/lib/python2.7/site-packages/robot/libraries/BuiltIn.py:1331: in get_variable_value
return self._variables[self._get_var_name(name)]
/opt/ute/python/lib/python2.7/site-packages/robot/libraries/BuiltIn.py:75: in _variables
return self._namespace.variables
/opt/ute/python/lib/python2.7/site-packages/robot/libraries/BuiltIn.py:71: in _namespace
return self._get_context().namespace
/opt/ute/python/lib/python2.7/site-packages/robot/libraries/BuiltIn.py:66: in _get_context
raise RobotNotRunningError('Cannot access execution context')
E   RobotNotRunningError: Cannot access execution context
</code></pre>
<p>How can I mock this? This is posible at all?</p>
</div>
<div class="post-text" itemprop="text">
<p>Sure, the issue is just that you can't mock the <code>BuiltIn</code> class where it is used (in <code>file.py</code>). You have to mock the class where it is declared (in <code>robot.libraries.BuiltIn</code>).</p>
<p>Using <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">mocks</a>:</p>
<pre><code>from unittest.mock import patch, MagicMock


def _test_default_iphy_tti_trace_dir():
    with patch('robot.libraries.BuiltIn.BuiltIn.get_variable_value', return_value='/foo/bar'):
        import file
        assert file.DEFAULT_IPHY_TTI_TRACE_DIR == '/foo/bar/iphy_tti_trace'
</code></pre>
<p>Using <a href="https://docs.pytest.org/en/latest/monkeypatch.html" rel="nofollow noreferrer">monkeypatch fixture</a>:</p>
<pre><code>def test_default_iphy_tti_trace_dir(monkeypatch):
    def mocked_get(self, name):
        return '/foo/bar'

    monkeypatch.setattr('robot.libraries.BuiltIn.BuiltIn.get_variable_value', mocked_get)
    import file
    assert file.DEFAULT_IPHY_TTI_TRACE_DIR == '/foo/bar/iphy_tti_trace'
</code></pre>
<p>Also note that the mocking is done for the scope of a single test only, so you can't <code>import file</code> on top of the test module as the <code>BuiltIn</code> will be unpatched there, raising the context error.</p>
</div>
<span class="comment-copy">Does <code>file.py</code> do some other sort of initialisation that you haven't shown us? Or is that done by something else when you run <code>file.py</code> 'normally' e.g. outside of the tests?</span>
<span class="comment-copy">Thanks @hoefling. It's exactly what i looked for.</span>
<span class="comment-copy">Glad I could help!</span>
