<div class="post-text" itemprop="text">
<h1>Background</h1>
<p>There are two files with name <code>alertfile</code> &amp; <code>eventfile</code>. </p>
<p>This file pair is sitting in multiple folders(shown below), with each file pair having different content.</p>
<p>Only way to recognise the names of file pair different from other pair is through the folder structure, they sit in.</p>
<p>Files will always be opened in read-only mode using python file api in Linux.</p>
<p>With respect to content, One file pair has no relation with other file pair. </p>
<p>No clue on the depth of folder structure.</p>
<p>Folder names are unknown(in advance).</p>
<p>Every folder may not have these file pairs. Some folder may have only sub-folders that have these file pairs. So, a folder can be just empty.</p>
<p>Size of each file pair is KB's in size and are static files.</p>
<pre><code>root_folder
 |
 |
 +---folder1
 |       | 
 |       |___ alertfile
 |       |___ eventfile
 |
 +---folder2
 |       |
 |       |___ alertfile
 |       |___ eventfile
 |       |
 |       +--- folder_2_1
 |            |
 |            |___alertfile
 |            |___eventfile
 |            |
 |            +---folder_2_1_1
 |                |
 |                |___alertfile
 |                |___eventfile
 |          
 |      
 +---folder3
 |       |
 |       |___ alertfile
 |       |___ eventfile
 |
 +---folder4
 |       |
 |       +---folder4_1
 |             |
 |             |____ alertfile
 |             |____ eventfile
 |             |
 |             +---folder4_1_1(empty) 
 :
 :
 :
</code></pre>
<hr/>
<h1>Goal</h1>
<p>There is a need to access the content of all these file pairs in different areas of code, for different purpose. </p>
<hr/>
<p>Program is a server program... that maintains the cache of these set of file pairs...</p>
<p>1) Which data structure should I use to efficiently access these file pairs? to actually parse the content in these file pairs....for multiple reasons</p>
<p>2) Does it be faster to have content of each file pair, in a pair of data structures? and keyed with a folder path.. </p>
<p>3) Can the file-reading be multi threaded before creating the cache? Because python GIL allows IO bound threads to interleave..</p>
</div>
<div class="post-text" itemprop="text">
<p>I recommend using nested dicts to cache your <code>alertfile</code> and <code>eventfile</code> pairs. Since a folder may or may not contain the file pairs, when it does, it should use the <code>'.'</code> key to store a dict of the file pairs in this folder, like this:</p>
<pre><code>cache = {
    '.': {'alertfile': 'alert content', 'eventfile': 'event content'},
    'hello': {
        'foo': {'.': {'alertfile': 'alert content', 'eventfile': 'event content'}},
        'bar': {'.': {'alertfile': 'alert content', 'eventfile': 'event content'}}
    },
    'world': {
        'aloha': {
            '.': {'alertfile': 'alert content', 'eventfile': 'event content'},
            'hi': {'.': {'alertfile': 'alert content', 'eventfile': 'event content'}},
            'hey': {'.': {'alertfile': 'alert content', 'eventfile': 'event content'}}
        }
    },
    'empty': {}
}
</code></pre>
<p>And here is a recursive function that scans a given directory, reads any of the file pairs within, and returns a dict in the above data structure.</p>
<pre><code>from os import listdir
from os.path import isdir, join

def scan_files(dir):
    cache = {}
    for name in listdir(dir):
        path = join(dir, name)
        if isdir(path):
            cache[name] = scan_files(path)
        elif name in ('alertfile', 'eventfile'):
            with open(path, 'r') as file:
                cache['.'][name] = file.read()
    return cache
</code></pre>
<p>You can put the block inside the <code>for</code> loop above into a thread pool if you wish to speed up the process.</p>
<p>Or, if you prefer to cache the files in a flat dict, you can use <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk</code></a> instead to traverse the entire directory in a loop.</p>
<pre><code>import os
def scan_files(dir):
    cache = {}
    for root, dirs, files in os.walk(dir):
        for name in files:
            if name in ('alertfile', 'eventfile'):
                path = os.path.join(root, name)
                with open(path, 'r') as file:
                    cache[path] = file.read()
    return cache
</code></pre>
</div>
<span class="comment-copy">Are folders always logically named like you listed, with index on each level?</span>
<span class="comment-copy">Do you know all the vendor names on each level in advance, or is there a need to search for sub-folders given a level of folder?</span>
<span class="comment-copy">@blhsing There is a need to search for sub_folders given a level of folder. I definitely do not know the vendor names on each level, in advance.. No clue on the depth of folder structure.</span>
<span class="comment-copy">@blhsing Yes, folder names are unknown(in advance).</span>
<span class="comment-copy">Does every folder have these two files, including the root folder? Or can some of them not have these file pairs?</span>
<span class="comment-copy">Dictionaries of dictionaries</span>
<span class="comment-copy">Why would you not recommend a simple dictionary with keys as folder path? This would help traverse dictionary in O(1)</span>
<span class="comment-copy">Because I need to traverse this cache multiple times and folder path must always logically be unique.</span>
<span class="comment-copy">I recommended a nested dict because you said you didn't know any vendor names in advance. It has the advantage of being able to list the subfolders of a folder quickly by allowing you to loop through the keys of a dict at any level. With a flat dict indexed by full paths you will have to scan through the entire list of dict keys in order to find all the subfolders of a folder. If you do want to use a flat dict instead you can simply use <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk</code></a> to build your dict.</span>
<span class="comment-copy">But I have such two root folders that I maintain cache(for each) and compare the cache, based on the key. I evaluate value 1 in cache1 with value2 in cache2, if key1 is equal to key2. This is the goal. For this, nested dictionary would not work.</span>
