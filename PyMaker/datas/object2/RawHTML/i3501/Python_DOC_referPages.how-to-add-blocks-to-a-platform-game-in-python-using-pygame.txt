<div class="post-text" itemprop="text">
<p>I'm trying to create blocks for a platform game with pygame I'm working on, but can't figure out how to do it. I tried making it so that you could easily just write a "B" in the level list to create a block and in that way build the game's structure. So what I'm basically wondering is how do you find each B:s x and y coordinates, put those in a list and get that to show up on the screen. I have already gotten the player to work how I want it to, so the blocks are the main missing piece now. The code for the platforms(aka blocks) is shown below:</p>
<pre><code>class Platform(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = Surface((25, 25))
        self.image.fill(red)
        self.rect = self.image.get_rect()

    def update(self):
        x = y = 0
        platforms = []
        level = [
            "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
            "B                                B",
            "B                                B",
            "B              BBBB              B",
            "B                                B",
            "B         BBBB                   B",
            "B                                B",
            "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",]
        for row in level:
            for colum in row:
                if colum == "B":
                    Block = x = y
                    platforms.append(Block)
                    all_sprites.add(Block)
                x += 25 
            y += 25
</code></pre>
<p>After all of the code that is shown above I say: </p>
<p><code>platform = Platform()</code></p>
<p><code>all_sprites.add(platform)</code> #all_sprites is the group I made for all sprites</p>
<p>And then in the game's main while loop I wrote:</p>
<p><code>all_sprites.update()</code></p>
<p>Any help or other ideas would be greatly appreciated. If you have any links to someone who has done a similar thing that would also be great.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a simple way to create platforms: I define a list of rects (just tuples with four elements in this case), iterate over it to create the platform instances and add them to the sprite groups.</p>
<pre><code>import pygame as pg


pg.init()
# Better create or load the images/surfaces before the game
# starts because that's more efficient.
PLATFORM_IMAGE = pg.Surface((50, 50))
PLATFORM_IMAGE.fill(pg.Color('dodgerblue1'))


class Platform(pg.sprite.Sprite):

    def __init__(self, x, y, image):
        super().__init__()
        self.image = image
        self.rect = self.image.get_rect(topleft=(x, y))


def main():
    screen = pg.display.set_mode((640, 480))
    clock = pg.time.Clock()

    all_sprites = pg.sprite.Group()
    platforms = pg.sprite.Group()
    coords = [(100, 200), (150, 200), (350, 100)]
    for x, y in coords:
        # Pass the x- and y-coords and the surface.
        platform = Platform(x, y, PLATFORM_IMAGE)
        # Add the sprite to the corresponding groups.
        all_sprites.add(platform)
        platforms.add(platform)

    done = False

    while not done:
        for event in pg.event.get():
            if event.type == pg.QUIT:
                done = True

        all_sprites.update()

        screen.fill((30, 30, 30))
        all_sprites.draw(screen)

        pg.display.flip()
        clock.tick(30)


if __name__ == '__main__':
    main()
    pg.quit()
</code></pre>
<p>If you want to use a list of strings as your level, you can use two <code>for</code> loops and the <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> function:</p>
<pre><code>level = [
    "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
    "B                                B",
    "B                                B",
    "B              BBBB              B",
    "B                                B",
    "B         BBBB                   B",
    "B                                B",
    "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
    ]

all_sprites = pg.sprite.Group()
platforms = pg.sprite.Group()
width = PLATFORM_IMAGE.get_width()

for y, row in enumerate(level):
    for x, item in enumerate(row):
        if item == 'B':
            platform = Platform(x*width, y*width, PLATFORM_IMAGE)
            all_sprites.add(platform)
            platforms.add(platform)
</code></pre>
</div>
<span class="comment-copy">I recommend reading chapter 13 of <a href="http://programarcadegames.com/index.php?chapter=introduction_to_sprites&amp;lang=en#section_13" rel="nofollow noreferrer">Program Arcade Games</a>. You can find some platformer examples at the bottom of the page.</span>
