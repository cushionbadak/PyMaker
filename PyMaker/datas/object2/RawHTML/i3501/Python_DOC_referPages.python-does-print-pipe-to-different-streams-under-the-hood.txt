<div class="post-text" itemprop="text">
<p>I encountered a bit weird (to me) behavior upon running the following script.</p>
<p>As you can see it seems as though <code>write</code> is called multiple times and I wonder why this is, as I have explicitly overridden the <code>file=sys.stdout</code> behavior.</p>
<p>How exactly does print pipe streams under the hood, does it pipe to all channels? Does it have some default behavior, <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">the docs</a> are not very specific except for the following:</p>
<blockquote>
<p>The file argument must be an object with a write(string) method; if it
  is not present or None, sys.stdout will be used.</p>
</blockquote>
<p><strong>Test script</strong></p>
<pre><code>import sys

def debug(*args, **kwargs):
    pass

def _debugwrite(obj):
    print("You're looking at Attila, the psychopathic killer, the caterpillar")
    out = sys.stderr
    out.write(obj)

debug.write = _debugwrite

print("Don't you ever disrespect the caterpillar", file=debug)
</code></pre>
<p><strong>Output</strong>:</p>
<pre><code>You're looking at Attila, the psychopathic killer, the caterpillar
You're looking at Attila, the psychopathic killer, the caterpillar
Don't you ever disrespect the caterpillar
</code></pre>
<hr/>
<p><strong>What I expected</strong>:</p>
<pre><code>You're looking at Attila, the psychopathic killer, the caterpillar
Don't you ever disrespect the caterpillar
</code></pre>
<hr/>
<p><strong>What I tried</strong>:</p>
<p>I tried to use <code>inspect</code> module to get the caller, maybe see who does the actual call to write but I get <code>module</code>, idk why :( is this obvious?</p>
<hr/>
<p><strong>Further questions</strong>:</p>
<p>Is there any way to debug a function beyond <code>Python</code> and go into the underlying <code>C</code> call? Because well the main <code>Python</code> distribution, is <code>CPython</code>, and if my understanding is correct, <code>Python</code> is just an <code>api</code> for the underlying <code>C</code> code. A call in <code>Python</code> gets translated to a <code>C</code> call under the hood eventually. So for instance I found out that the <code>print</code> <a href="https://github.com/python/cpython/blob/f5e7b1999f46e592d42dfab51563ea5411946fb7/Python/bltinmodule.c#L1840" rel="nofollow noreferrer">is defined as follows in C</a>, but it's tough for me to understand what's going on there (because, erm, I don't know <code>C</code>) but maybe by going with a debugger I could print stuff out, see what is what and figure out maybe at least the flow if not everything. I'd very much like to understand what's going on under the hood in general instead of taking stuff for granted.</p>
<p>Thx in advance for your time!</p>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for something really complicated when the answer is dead simple.</p>
<p>I don't even know what "pipe to all channels" would mean, but <code>print</code> does nothing of the sort. All it does is call <code>write</code> on the <code>file</code> object you passed it.</p>
<p>However, it calls <code>write</code> once for each argument, once for each <code>sep</code>, and once for the <code>end</code>.</p>
<p>So, this line:</p>
<pre><code>print("Don't you ever disrespect the caterpillar", file=debug)
</code></pre>
<p>… is roughly equivalent to:</p>
<pre><code>debug.write(str("Don't you ever disrespect the caterpillar"))
debug.write("\n")
</code></pre>
<p>… which of course means you get your extra <code>print</code> message twice.</p>
<hr/>
<p>By the way, for debugging or understanding things like this in the future: If you changed the extra <code>print</code> to include, say, <code>repr(obj)</code>, what's happening would have been obvious:</p>
<pre><code>def _debugwrite(obj):
    print("stderring " + repr(obj))
    out = sys.stderr
    out.write(obj)
</code></pre>
<p>The output is then:</p>
<pre><code>stderring "Don't you ever disrespect the caterpillar"
stderring '\n'
Don't you ever disrespect the caterpillar
</code></pre>
<p>Not very mysterious anymore, right?</p>
<hr/>
<p>And of course <code>stdout</code> and <code>stderr</code> are separate streams, with their own buffers. (By default, when talking to a TTY, <code>stdout</code> is line-buffered, and <code>stderr</code> is unbuffered.) So the ordering isn't what you'd naively expect, but it makes sense. If you just add in <code>flush</code>es, the output turns into:</p>
<pre><code>stderring "Don't you ever disrespect the caterpillar"
Don't you ever disrespect the caterpillarstderring '\n'
</code></pre>
<p>(with a blank line at the end).</p>
<hr/>
<p>For your bonus questions:</p>
<blockquote>
<p>I tried to use inspect module to get the caller, maybe see who does the actual call to write but I get module, idk why :( is this obvious?</p>
</blockquote>
<p>I'm assuming you did something like <code>inspect.stack()[1].function</code>? If so, the code you're inspecting is the top-level code in the module, so <code>inspect</code> shows it as a fake function named <code>&lt;module&gt;</code>.</p>
<blockquote>
<p>Is there any way to debug a function beyond Python and go into the underlying C call?</p>
</blockquote>
<p>Sure. Just run CPython itself under lldb, gdb, Microsoft's debugger, or whatever else you usually use for debugging binary programs. You can put breakpoints in the <code>ceval</code> loop or in a particular C API function or wherever you want. You may want to make a debug build of CPython (do <code>./configure --help</code> to see the options) to make this even better.</p>
<blockquote>
<p>Because well the main Python distribution, is CPython, and if my understanding is correct, Python is just an api for the underlying C code.</p>
</blockquote>
<p>Well, not <em>quite</em>. It's a compiler and a bytecode interpreter. That bytecode interpreter <em>largely</em> uses the same C API that's exposed for the extending/embedding interface, but the overlap isn't 100%; there are places where it deals with the structures below the C API level.</p>
<blockquote>
<p>A call in Python gets translated to a C call under the hood eventually. So for instance I found out that the print is defined as follows in C, but it's tough for me to understand what's going on there (because, erm, I don't know C) but maybe by going with a debugger I could print stuff out, see what is what and figure out maybe at least the flow if not everything. I'd very much like to understand what's going on under the hood in general instead of taking stuff for granted.</p>
</blockquote>
<p>Yes, you can do that, but you will need to understand both C and the CPython API (e.g., things like how to find the C slot equivalent to <code>__call__</code>) to figure out where to put your breakpoints and start tracing.</p>
<p>And for cases like these, it's a lot easier to just write wrappers in Python and debug them in Python. For example:</p>
<pre><code>import builtins
def print(*args, **kwargs):
    return builtins.print(*args, **kwargs)
</code></pre>
<p>Or, if you're worried about <code>print</code> being called in other modules, not just in yours, you can even shadow it in <code>builtins</code>:</p>
<pre><code>builtins._print = builtins.print
def print(*args, **kwargs):
    return builtins._print(*args, **kwargs)
builtins.print = print
</code></pre>
<p>Now you can just use <code>pdb</code> to break on every call to <code>print</code> at the Python level, without worrying about the C.</p>
<p>And of course you can even debug this code in PyPy or Jython or whatever to see if it's any different from CPython above the "builtin" level.</p>
</div>
<div class="post-text" itemprop="text">
<p>You get the result you see because <code>builtin_print()</code> calls <code>PyFile_Write*()</code> <em>twice</em>, once in order to <a href="https://github.com/python/cpython/blob/f5e7b1999f46e592d42dfab51563ea5411946fb7/Python/bltinmodule.c#L1894" rel="nofollow noreferrer">print the argument</a>, and again to <a href="https://github.com/python/cpython/blob/f5e7b1999f46e592d42dfab51563ea5411946fb7/Python/bltinmodule.c#L1900" rel="nofollow noreferrer">print the EOL</a>. They are out of order because by default stderr is unbuffered and stdout is line-buffered.</p>
</div>
<span class="comment-copy">As a side note, it's a bit confusing that you created a function and attached a <code>write</code> attribute to it instead of just creating and instantiating a class (or creating a class with a classmethod). This doesn't affect your question, of course, but it may scare off some people who could have answered.</span>
<span class="comment-copy">wow! thx for the quick, detailed answer; it's crystal clear now :)</span>
<span class="comment-copy">thank you for your answer Ignacio, understood now! +1 for the CPython references :)</span>
