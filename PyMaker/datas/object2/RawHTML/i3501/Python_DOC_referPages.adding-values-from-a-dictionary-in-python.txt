<div class="post-text" itemprop="text">
<p>For example, the user will enter four colors (duplicates allowed) where <code>orange = o, blue = b, green = g, red = r</code>. I will assign values to each of these colors.</p>
<pre><code>dictColor = {"o": 4, "b": 2, "g": 7, "r": 5}
colorScore = 0
for i in range(1):
    color = input("Enter 4 characters of colors: ")
    if "o" in color:
        colorScore += dictColor["o"]
    if "b" in color:
        colorScore += dictColor["b"]
    if "g" in color:
        colorScore += dictColor["g"]
    if "r" in color:
        colorScore += dictColor["r"]
print("The color score is",colorScore)
</code></pre>
<p>If the user were to enter in <code>rbgo</code>, the program works fine and outputs a value of 18. However, if the user entered one duplicate, such as <code>rrgo</code>, the program outputs 16, which is not the correct output. How would I make my program able to recognize these duplicates?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are only testing for each character once. Loop over the input string, and use each character as a key for your dictionary:</p>
<pre><code>dictColor = {"o": 4, "b": 2, "g": 7, "r": 5}
color = input("Enter 4 characters of colors: ")

colorScore = 0
for character in color:
    if character in dictColor:
        colorScore += dictColor[character]
</code></pre>
<p>or, using the <a href="https://docs.python.org/3/glossary.html#term-generator-expression" rel="nofollow noreferrer"><code>sum()</code> function</a>, and <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>dict.get()</code></a> to return a default colour score of 0 for any unrecognised character:</p>
<pre><code>dictColor = {"o": 4, "b": 2, "g": 7, "r": 5}
color = input("Enter 4 characters of colors: ")
colorScore = sum(dictColor.get(c, 0) for c in color)
</code></pre>
<p>The above passes a <a href="https://docs.python.org/3/glossary.html#term-generator-expression" rel="nofollow noreferrer"><em>generator expression</em></a> to the <code>sum()</code> function, which will loop over each result of the expression. So for each <code>c</code> in the string <code>color</code> (each character), the <code>dictColor.get(c, 0)</code> expression fetches the value for the given key or 0 if the key is missing, and <code>sum()</code> adds up all those results. </p>
</div>
<div class="post-text" itemprop="text">
<p>For each character in <code>color</code>, look up its score in the dictionary, and add up those values.</p>
</div>
<div class="post-text" itemprop="text">
<p>Probably the fastest and more readable solution is with list comprehension:</p>
<pre><code>dictColor = {"o": 4, "b": 2, "g": 7, "r": 5}
color = input("Enter 4 characters of colors: ")
print(sum((dictColor[c] for c in color)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because you didn't iterate over each character from the string input:</p>
<p>Try this while loop:</p>
<pre><code>while True:
    color = input("Enter 4 characters of colors: ")
    for letter in color: # This iterate over each letter of the input
        if letter in dictColor: # If the letter is on your color's dictionay
            colorScore = colorScore + dictColor[letter]
    print("The color score is",colorScore)
</code></pre>
<p>Or if you look for an smaller code:</p>
<pre><code>while True:
    color = input("Enter 4 characters of colors: ")
    for letter in color:
            colorScore += dictColor.get(letter, 0)
    print("The color score is",colorScore)
</code></pre>
<p>Or even smaller:</p>
<pre><code>dictColor = {"o": 4, "b": 2, "g": 7, "r": 5}
while True:
    color = input("Enter 4 characters of colors: ")
    colorScore = sum(dictColor.get(letter, 0) for letter in color)
    print("The color score is", colorScore)
</code></pre>
<p><strong><a href="https://docs.python.org/3.6/library/functions.html#sum" rel="nofollow noreferrer">sum(iterable[, start])</a>:</strong> This function iterate over all the iterable items (e.g: items from a list, tuple, set) and sum their values.</p>
<p><strong>dictionary.<a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">get(key[, default])</a>:</strong> This function return the value of a key in a given dictionary. In the case it doesn't exist that value return a default one (instead of raise an exception).</p>
<p><strong><a href="https://docs.python.org/3/glossary.html#term-generator-expression" rel="nofollow noreferrer">generator expression</a>:</strong> The sum function will iterate over the result of the generator expression. So for each letter in the string input, the dictColor.get(letter, 0) expression will look for the value of that key in the dictColor.</p>
</div>
<span class="comment-copy">What is the point of <code>for i in range(1):</code>?</span>
<span class="comment-copy">@ScottHunter I'm not too sure myself. I am still fairly new to Python, so I'm just testing out how codes work. I will delete that afterwards.</span>
<span class="comment-copy">It didn't write itself; what did you <i>think</i> it was accomplishing?</span>
<span class="comment-copy"><code>for i in range(1):</code> is a loop that iterates once. <code>range(1)</code> produces a sequence with only one element in it, the integer <code>0</code>. Since you don't use <code>i</code> in the loop, and the range is hard-coded, the conclusion is that the loop is meaningless and busywork, the body of the loop is executed just once so the <code>for</code> loop can safely be removed and the whole body un-indented to match the rest of the code.</span>
<span class="comment-copy">Don't fall into the trap of <a href="https://pragprog.com/the-pragmatic-programmer/extracts/coincidence" rel="nofollow noreferrer">programming by coincidence</a>; really <i>think</i> about what the code you're writing means.</span>
<span class="comment-copy">There is no need to build a list first. Drop the <code>[</code> and <code>]</code> and make it a generator expression.</span>
<span class="comment-copy">You didn't use <code>dict.get</code> nor an if statement to check if the <code>c</code> is inside the <code>dictColor</code>. That may raise an exception from a wrong input.</span>
<span class="comment-copy">@EnderLook that was not a request and you do not know how the programmer wants to manage the error. Which default value is correct? Is it even ok to default a value or is better to have a try/except clause?</span>
<span class="comment-copy">But in the OP example he already managed that. He used 4 if statements, one for each letter. So we already know that OP don't want to sum wrong letters (in that case, wrong letters are the same as 0)</span>
<span class="comment-copy">that's the difference from a feature and a bug: the OP doesn't want that, his desired behaviour is to obtain the sum of the values corresponding to some given colors. I'm pretty sure that returning 14 to <code>rg%&amp;/b</code> is wrong, raising an error is right. BTW I'm not sure that we're producing useful information right now.</span>
