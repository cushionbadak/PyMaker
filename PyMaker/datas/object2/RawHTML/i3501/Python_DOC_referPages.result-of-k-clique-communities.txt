<div class="post-text" itemprop="text">
<p>There is a function in networkX called k_clique_communities that find k-clique communities in graph, and I run the code on my data.</p>
<pre><code>K5 = nx.convert_node_labels_to_integers(G,first_label=2)
G.add_edges_from(K5.edges())
c = list(nx.k_clique_communities(G, 4))
list(c[9])
[145, 276, 277, 278, 279, 138]
list(c[10])
[353, 146, 244, 198, 327, 252]
</code></pre>
<p>I am confused about the result here. </p>
<p>What does list(c[9]) mean?</p>
<p>What's the difference between list(c[9]) and list(c[10])?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://chebee7i-networkx.readthedocs.io/en/latest/reference/generated/networkx.algorithms.community.kclique.k_clique_communities.html" rel="nofollow noreferrer">documentation for k_clique_communties</a> says that </p>
<blockquote>
<p>A k-clique community is the union of all cliques of size k that can be reached through adjacent (sharing k-1 nodes) k-cliques.</p>
</blockquote>
<p>Now each individual list item will a collection of (union of) k-sized cliques thatw each other and shared (k-1) nodes. In your case <code>c[9]</code> returns </p>
<pre><code>[145, 276, 277, 278, 279, 138]
</code></pre>
<p>So this is a union of 4-sized cliques that were adjacent to other and share 3 nodes with each other. You can visualize these only these nodes from your graph and then you will see that these were adjacent cliques sharing 3 nodes with each other.</p>
<p>Now to the next part, <code>c[0]</code> and <code>c[1]</code> are nothing but individual list of such union of k-cliques with the properties described above, i.e. it might be the case that there must have multiple union of 4 sized cliques which share 3 nodes in your graph, so you can access the first union at <code>c[0]</code>, next at <code>c[1]</code> and so on</p>
</div>
<div class="post-text" itemprop="text">
<p><code>list(c[0])</code> means that <code>c</code> is a list, you are taking the object at index 0, and attempting to initialize a new <code>list</code> with its contents. The difference between <code>c[0]</code> and <code>c[10]</code> is that they are different elements in the list <code>c</code>. If you are confused about types, a helpful tip is to throw in a <code>print(type(x))</code> statement. <code>print(type(c))</code>, in this case, would give you <code>&lt;type 'list'&gt;</code>. <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">Here</a> is the doc page on lists for more help getting started.</p>
</div>
