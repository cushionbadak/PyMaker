<div class="post-text" itemprop="text">
<p>There seems to be slightly ambiguous wording in two parts of the Python docs regarding imports.</p>
<p>From <a href="https://docs.python.org/3.6/tutorial/modules.html#the-module-search-path" rel="nofollow noreferrer">"The Module Search Path"</a>:</p>
<blockquote>
<p>When a module named <code>spam</code> is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named <code>spam.py</code> in a list of directories given by the variable <code>sys.path</code>.</p>
</blockquote>
<p>From <a href="https://docs.python.org/3/reference/import.html#the-module-cache" rel="nofollow noreferrer">"The Module Cache"</a>:</p>
<blockquote>
<p>The first place checked during import search is <code>sys.modules</code>. This mapping serves as a cache of all modules that have been previously imported, including the intermediate paths.</p>
</blockquote>
<p>Which of these is a more accurate representation of what happens internally with Python's import system?  The logic below would say that they can't coexist, since <code>sys.modules</code> could very well contain modules that aren't builtin, and could exclude some modules that are.</p>
<hr/>
<p>Here's where my confusion stems from:</p>
<p><code>sys.modules</code> is for caching modules that have already been imported; it's not expressly for storing a comprehensive list of built-in modules.  (The closest thing to that, I think, is <code>sys.built_in_modules</code>, but that also doesn't include stuff that has a <code>.__file__</code> attribute such as <code>math</code>.)</p>
<p>If I start up a new interpreter session, <code>sys.modules</code> contains <em>most</em> builtins, but excludes some stuff from <code>sys.builtin_module_names</code>: namely, <code>gc</code> and <code>time</code>, among others.  Additionally, you can make imports of 3rd party packages, which will be placed into <code>sys.modules</code>, and at that point <code>sys.modules</code> is certainly no longer a dictionary containing only built-in modules.  So, all of that would seem to say, "<code>sys.modules</code> != built in modules."</p>
</div>
<div class="post-text" itemprop="text">
<p>You're looking at two completely different sources of information, the tutorial and the language reference.</p>
<hr/>
<p>The tutorial section <a href="https://docs.python.org/3.6/tutorial/modules.html#the-module-search-path" rel="nofollow noreferrer">The Module Search Path</a> (besides only describing the default behavior) is also describing only what happens when a module is actually imported. </p>
<p>If the module is already in the cache, this process doesn't happen. That's not explained here, because it's already covered in the previous section, <a href="https://docs.python.org/3.6/tutorial/modules.html#more-on-modules" rel="nofollow noreferrer">More on Modules</a>:</p>
<blockquote>
<p>A module can contain executable statements as well as function definitions. These statements are intended to initialize the module. They are executed only the first time the module name is encountered in an import statement.</p>
<p>...</p>
<p>Note For efficiency reasons, each module is only imported once per interpreter session.</p>
</blockquote>
<p>It doesn't explain the mechanism by which this happens, because this is just a tutorial.</p>
<hr/>
<p>Meanwhile, in the reference docs for the import system, the <a href="https://docs.python.org/3/reference/import.html#the-module-cache" rel="nofollow noreferrer">module cache</a> section explains the first thing that happen on an <code>import</code> statement. </p>
<p>Notice that it's not exactly true that Python avoids executing the module's statements if the module has already been imported, or that it's only imported once for efficiency. That's a consequence of the fact that the default loaders put the module in the <code>sys.modules</code> cache. And if you replace the loaders, or monkey with the cache after the fact, a module will in fact be imported and executed multiple times.</p>
<p>Subsequent sections—starting with the next section, <a href="https://docs.python.org/3/reference/import.html#finders-and-loaders" rel="nofollow noreferrer">Finders and loaders</a>—similarly describe the details of how the module is found, more rigorously and in more detail than the Module Search Path section of the tutorial:</p>
<blockquote>
<p>Python includes a number of default finders and importers. The first one knows how to locate built-in modules, and the second knows how to locate frozen modules. A third default finder searches an import path for modules.</p>
</blockquote>
<p>So again, it's not <em>exactly</em> true that the interpreter first searches for a built-in module. Instead, the interpreter just searches its finders in order, and by default, the first finder is the built-in module finder. But if you change the list of finders, Python won't search for built-ins first.</p>
<hr/>
<p>In fact, if you print out <code>sys.meta_path</code> on a default installation of CPython 3.7, what you'll see is:</p>
<pre><code>&lt;class '_frozen_importlib.BuiltinImporter'&gt;
&lt;class '_frozen_importlib.FrozenImporter'&gt;
&lt;class '_frozen_importlib_external.PathFinder'&gt;
</code></pre>
<p>(Under IPython, or if you've imported something like <code>six</code> that helps rename modules, or if you've imported something like <code>requests</code> that embeds versioned modules, you'll have a couple of extra finders.)</p>
<p>That <a href="https://docs.python.org/3/library/importlib.html#importlib.machinery.BuiltinImporter" rel="nofollow noreferrer"><code>BuiltinImporter</code></a> is documented in the <code>importlib</code> library docs. (If you're wondering why it's not called <code>BuiltinFinder</code>, a finder that's also its own loader is called an importer.) What it actually does is look at <a href="https://docs.python.org/3/library/sys.html#sys.builtin_module_names" rel="nofollow noreferrer"><code>sys.builtin_module_names</code></a> and call an implementation-specific function to handle anything found there. </p>
<hr/>
<p><a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/_bootstrap.py#L689" rel="nofollow noreferrer">In CPython 3.6</a> (apologies for jumping back and forth between 3.6 and 3.7, but it shouldn't matter here…), the implementation-specific function it calls is <a href="https://github.com/python/cpython/blob/8fd8cfa369fe4b6d6ac430cd28ead32717df7bee/Python/import.c#L1036" rel="nofollow noreferrer"><code>_imp.create_builtin</code></a>, and you can trace things from there.</p>
<p>But the key thing to notice is that not everything in <code>builtin_module_names</code> is actually "built-in" in the sense that it's pre-imported. For example, with a normal install, you'll probably see <code>_ast</code> there, but no <code>sys.modules['_ast']</code>.</p>
<p>So the <code>create_builtin</code> function (or, for a different implementation, whatever it uses to implement the <code>BuiltinImporter</code>) has to be able to import so/dll/pyd/dylib modules that come pre-installed with Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you do <strong>import</strong> a module, the interpreter first searches the built-ins then the  <code>sys.path</code>. But that is only if you're really importing the module. <strong>Before</strong> importing a module, there is a cache to search. If the module is already in the cache, it is not imported again.</p>
</div>
<div class="post-text" itemprop="text">
<p>you need to distinguish between <code>sys.path</code> and <code>sys.modules</code></p>
<blockquote>
<p><strong>sys.modules</strong> This is a dictionary that maps module names to modules
  which have already been loaded. This can be manipulated to force
  reloading of modules and other tricks. Note that removing a module
  from this dictionary is not the same as calling reload() on the
  corresponding module object.</p>
</blockquote>
<p>When I load <code>sys.path</code> in jupyter notebook, displays a dictionary of loaded module names mapped to a file location -</p>
<pre><code>{'IPython': &lt;module 'IPython' from 'C:\\Users\\User\\Anaconda3\\lib\\site-packages\\IPython\\__init__.py'&gt;,
 'IPython.core': &lt;module 'IPython.core' from 'C:\\Users\\User\\Anaconda3\\lib\\site-packages\\IPython\\core\\__init__.py'&gt;,.....}
</code></pre>
<p>This is my module cache, but when I try </p>
<p><code>sys.modules['numpy']</code></p>
<pre><code>---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
&lt;ipython-input-6-44b02d746fe5&gt; in &lt;module&gt;()
----&gt; 1 sys.modules['numpy']

KeyError: 'numpy'
</code></pre>
<p>Since numpy is not in my module cache. I will ask python to look for if it in a fixed set of directories which is defined in <code>sys.path</code>. A list of strings where I can add or remove paths as I see fit. </p>
<blockquote>
<p><strong>sys.path</strong> A list of strings that specifies the search path for modules.
  Initialized from the environment variable PYTHONPATH, plus an
  installation-dependent default.</p>
</blockquote>
<p>If python finds the library in my set of <code>sys.path</code>s ; it will create a mapping for it in my <code>sys.modules</code> for quick access in the active environment.</p>
<pre><code>import numpy
sys.modules['numpy']
#&lt;module 'numpy' from 'C:\\Users\\User\\Anaconda3\\lib\\site-packages\\numpy\\__init__.py'&gt;
</code></pre>
</div>
<span class="comment-copy">Trying to understand. <code>sys.modules != built in modules</code> is the confusion. But Cache and Search Path are two different components of the import system. Both of them have a role to play, so why would one be more accurate than the other? The components have different roles.</span>
<span class="comment-copy">@Poppinyoshi Yes, I'm aware that <code>sys.modules</code> != built in modules.  That much is evident.  My confusion is that both of those excerpts explicitly say, "the first place that is searched is..." or "the first thing that is searched for is...".  How can those two statements both be correct, as they seem to conflict?</span>
<span class="comment-copy">@BradSolomon What "searches for a built-in module" means (in 3.4+) is a bit more complicated; I'll edit the answer to cover that.</span>
<span class="comment-copy">This is all true, but it's not particularly relevant to the OP's question. He doesn't seem at all confused between what <code>sys.modules</code> and <code>sys.path</code> do. (He <i>may</i> be confused about the difference between <code>sys.path</code> and <code>sys.meta_path</code>, but your answer doesn't cover that at all.)</span>
<span class="comment-copy">@abarnert thanks for the feedback and your answer. I wonder if the question can actually start directly from "here's where my confusion stems from..." Since it was about the order in which python searches for modules; rather than which of cache vs path "is a more accurate representation of what happens internally with Python's import system?". Either way, Thanks, don't want to exhaust time on this.</span>
