<div class="post-text" itemprop="text">
<blockquote>
<p>We have two arrays of equal length, <code>A</code> and <code>B</code>. also, for every <code>i</code>: <code>0 &lt;= a_i, b_i &lt;= m</code> for some <code>1&lt;=m&lt;= 1000000</code>. We want to check if a single swap between some term of <code>A</code> and some term of <code>B</code> will make the sums of the arrays be equal. </p>
</blockquote>
<p>Consider the following solution:</p>
<pre><code>def fast_solution(A, B, m):
  n = len(A)
  sum_a = sum(A)
  sum_b = sum(B)
  d = sum_b - sum_a
  if d % 2 == 1:
    return False
  d //= 2
  count = counting(A, m) # returns a mapping &lt;integer, #occurrences in A&gt;
  for i in range(n):
    if 0 &lt;= B[i] - d and B[i] - d &lt;= m and count[B[i] - d] &gt; 0:
      return True
  return False
</code></pre>
<p>I'd be glad if you could explain the reasoning behind the last <code>if</code> clause.</p>
<p><a href="https://codility.com/media/train/2-CountingElements.pdf" rel="nofollow noreferrer">Source of the problem</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If there is such a swap, then the difference between the two values must be half that of the difference in the sums. Swapping two values means that the sum of <em>both</em> lists will change, one going up, the other down, by the same amount. The two changes <em>must</em> add up to the difference between the sums before the swap, and both sums change by the same value (<code>+d</code> and <code>-d</code>, or <em>value</em> delta, which is the difference between the two swapped values).</p>
<p>First, the function calculates <code>d</code> as a delta between the sums, the sum delta. Note that <code>sum_a</code> could be <em>larger</em> than <code>sum_b</code>, at which point the result <code>sum_b - sum_a</code> is negative. This simply means that there must be a value in <code>B</code> that is smaller than the target value in <code>A</code>, a swap then would decrease <code>sum_a</code> and increase <code>sum_b</code> to make them equal. If the parity of the sum delta is <em>odd</em> rather than even, you'll never find a value delta that is half the sum delta so the function returns <code>False</code> at this point. The final value of <code>d</code> is the <em>value</em> delta, the amount of difference between the two swapped values. Remember, the value delta is half the sum delta.</p>
<p>The algorithm counts all values in <code>A</code>, then tests all values in <code>B</code>. It would only be possible to swap two values between <code>A</code> and <code>B</code> if there is <em>a</em> value in <code>B</code> that differs by <code>d</code> from <em>a</em> value in <code>A</code>. The value in <code>A</code> to swap with <code>B</code> would need to be equal to <code>b_value - d</code>. For a negative <code>d</code> (<code>sum_a &gt; sum_b</code>) that would make <code>b_value</code> smaller, for a positive <code>d</code> that would require <code>b_value</code> to be the bigger number.</p>
<p>The <code>if</code> test looks to see if there is a value in <code>B - d</code> available in <code>A</code>, but it first tests if <code>b_value - d</code> is still within the range of [0-m]:</p>
<ul>
<li><code>0 &lt;= B[i] - d</code> test if the number sought for in A is still a positive number.</li>
<li><code>B[i] - d &lt;= m</code> tests  if the number sought is still no larger than <code>m</code>; it could be if <code>B[i]</code> was close and <code>d</code> is negative.</li>
<li><code>count</code> contains counts for the numbers in <code>A</code>; if <code>count[B[i] - d] &gt; 0</code> is true, then there is at least one such number in A. This is a number that can be swapped.</li>
</ul>
<p>The range test is needed because the <code>counted</code> list only holds counts for the numbers from 0 through to m (inclusive), not for negative numbers or for numbers larger than <code>m</code>.</p>
<p>The function can be improved by using a set instead of a counting function. There is no need to know how many times a number appears in <code>A</code>, just that it <em>exists</em>. This would make boundary checks obsolete, because numbers out of bound are simply not going to be present in a set of the values of <code>A</code>.</p>
<p>Once we have a set of values of A, we can test if this set is <a href="https://en.wikipedia.org/wiki/Disjoint_sets" rel="nofollow noreferrer">disjoint</a> from the set of b values with the delta applied, using <a href="https://docs.python.org/3/library/stdtypes.html#frozenset.isdisjoint" rel="nofollow noreferrer"><code>set.isdisjoint()</code></a>:</p>
<pre><code>def faster_solution(A, B, m=None):  # m is ignored in this version
    delta = sum(A) - sum(B)
    if delta % 2 == 1:
        return False
    delta //= 2
    return not set(A).isdisjoint(b - delta for b in B)
</code></pre>
<p>This returns True if there is a value in <code>A</code> that is equal to <em>a</em> value in <code>B</code> minus the delta. Python will only loop over the <code>b - delta for b in B</code> loop until a match is found (at which point the sets are not disjoint, and <code>not</code> inverses that result to True), or the loop has been exhausted and so no such value is found in <code>A</code> and the sets are found to be disjoint.</p>
<p>The <code>counter()</code> function shown has another issue: it requires way more memory than is needed, and it is very slow compared to a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter()</code> object</a> which has an optimised loop implemented in to do the counting. A <code>Counter()</code> uses a dictionary (hash map) to store counts only for counts greater than 0.</p>
<p>The set solution above beats the 'fast solution' hands down:</p>
<pre><code>&gt;&gt;&gt; import timeit, random
&gt;&gt;&gt; m = 1000000
&gt;&gt;&gt; testdata = [random.randrange(m + 1) for _ in range(1000)]
&gt;&gt;&gt; testinputs = (testdata[:], testdata[:])
&gt;&gt;&gt; random.shuffle(testinputs[0])  # The order of A differs from B
&gt;&gt;&gt; testinputs[1][-1] -= testinputs[1][-1] // 2  # now the two sums differ by an even amount, guaranteed to be in range
&gt;&gt;&gt; assert testinputs[1][-1] &gt; 0  # make sure the original random value was not 0 or 1.
&gt;&gt;&gt; # note: It's the *last value in B* that makes it possible to swap;
... # this is one of two worst-case scenarios (the other is even-delta-no-swap).
...
&gt;&gt;&gt; assert fast_solution(*testinputs, m)    # the original finds a solution
&gt;&gt;&gt; assert faster_solution(*testinputs, m)  # my version finds a solution
&gt;&gt;&gt; timeit.timeit("f(*ab, m)", "from __main__ import fast_solution as f, testinputs as ab, m", number=1000)
2.3270092820748687
&gt;&gt;&gt; timeit.timeit("f(*ab, m)", "from __main__ import faster_solution as f, testinputs as ab, m", number=1000)
0.13949943508487195
</code></pre>
<p>Not using a counter, and using Python's set functionality made that about 17 times faster for inputs of length 1000!</p>
<p>The moral of the story: use the best tools available in your language of choice, and think critically about what is actually needed to solve the problem. Python's built-in types and operations often can let you avoid running the critical loops in Python bytecode, significantly reducing the constant-time factors of an algorithm.</p>
</div>
<div class="post-text" itemprop="text">
<p>This for-loop at the end searches each element of the <code>B</code> array. To be the swapped element at index <code>i</code>, it has to satisfy two conditions:</p>
<ul>
<li><code>B[i] - d</code> must be between <code>0</code> and <code>m</code>. You can imagine <code>2 * d</code> as how much <code>sum(B)</code> is larger than <code>sum(A)</code>, so by swapping <code>B[i]</code> with <code>B[i] - d</code>, array <code>A</code> with gain <code>d</code> and array <code>B</code> will lose it, increasing the difference by <code>2 * d</code></li>
<li><code>B[i] - d</code> must exist in A</li>
</ul>
<p>It's not good for understanding though to redefine <code>d = d / 2</code> in the middle of the code :)</p>
</div>
<span class="comment-copy">I'd upvote it 10 times if I could. Thank you very much!</span>
