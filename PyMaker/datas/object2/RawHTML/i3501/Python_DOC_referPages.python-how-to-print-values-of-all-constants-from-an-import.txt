<div class="post-text" itemprop="text">
<p>I group and store my constants (can be a dict.) in a separate python file. E.g. parameters.py :</p>
<pre><code>HARD_COPY=True
BOOKS={
    2018:{"author":"Hugo"}
    }
etc.
</code></pre>
<p>In a source file, I write :</p>
<pre><code>import parameters as para
</code></pre>
<p>Of course, I can use the variables knowing their names (para.BOOKS, etc.).
But I wish to display their names and values, whatever those names can be.</p>
<p>If I write dir(para), I can see the list of these names.
But how can I print their values ?</p>
<p>I'd like to display :</p>
<pre><code>My defined variables in parameters.py : 
HARD_COPY : True
BOOKS     : {2018:{"author":"Hugo"}}
etc.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>getattr</code> to access its value by name.</p>
<pre><code>import parameters as para


print('My defined variables in parameters.py : ')

for variable in dir(para):
    if not variable.startswith('__'):
        print(variable, ':', getattr(para, variable))
</code></pre>
<p>Output:</p>
<pre><code>My defined variables in parameters.py :
BOOKS : {2018: {'author': 'Hugo'}}
HARD_COPY : True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're looking at storing constants (or config variables) you should consider them storing them in <a href="https://docs.python.org/2/library/json.html" rel="nofollow noreferrer"><code>json</code></a> format. </p>
<p>Let's say you had a config file called <code>config.json</code> which had the following values</p>
<pre><code>{
  "HARD_COPY": true,
  "BOOKS": {
    "2018": {
      "author": "Hugo"
    }
  }
}
</code></pre>
<p>You could load these values from a <code>.py</code> file using the following</p>
<pre><code>import json

with open('config.json') as f:
    data = json.load(f)
</code></pre>
<p>To then iterate over these values you could do the following </p>
<p><strong>Python 2.7</strong></p>
<pre><code>for key, val in my_books.iteritems(): 
    print(key, val)

&gt;&gt;&gt;('HARD_COPY', True)
&gt;&gt;&gt;('BOOKS', {2018: {'author': 'Hugo'}})
</code></pre>
<p><strong>Python 3</strong></p>
<pre><code>for key, val in my_books.items():
    print(key, val)

&gt;&gt;&gt; HARD_COPY True
&gt;&gt;&gt; BOOKS {2018: {'author': 'Hugo'}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>import parameters as para
for name in dir(para):
    if not name.startswith('__'):
        myvalue = eval('para.%s'%name)
        print(name,"is",myvalue)
</code></pre>
<p>Output:</p>
<pre><code>BOOKS is {2018: {'author': 'Hugo'}}
HARD_COPY is True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming this is a "normal" module, you can use <code>__dict__</code>:</p>
<pre><code>import parameters as para

for k, v in para.__dict__.items():
    if k.isupper():
        print("name:", k, "value:", v)
</code></pre>
<p>I have used <code>isupper()</code> since that is the convention for constants (although they are not really).</p>
<p>Gives:</p>
<pre><code>name: HARD_COPY value: True
name: BOOKS value: {2018: {'author': 'Hugo'}}
</code></pre>
<p>EDIT with thanks to @Aran-Fey</p>
</div>
<span class="comment-copy">See <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow noreferrer"><b><code>vars</code></b></a>, and <a href="https://docs.python.org/3/library/pprint.html#pprint.pprint" rel="nofollow noreferrer"><b><code>pprint</code></b></a>, e.g.:<code>pprint(vars(parameters))</code></span>
<span class="comment-copy">python 2 code in 2018 :/</span>
<span class="comment-copy">Updated to include a Python3 option</span>
<span class="comment-copy">There's no need to use <code>eval</code> here.  Not only is <code>eval</code> slow, <code>eval</code> and <code>exec</code> should generally be avoided because they can be a security risk. For details, please see <a href="http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow noreferrer">Eval really is dangerous</a> by SO veteran Ned Batchelder.</span>
<span class="comment-copy">Also <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow noreferrer"><b><code>vars</code></b></a></span>
