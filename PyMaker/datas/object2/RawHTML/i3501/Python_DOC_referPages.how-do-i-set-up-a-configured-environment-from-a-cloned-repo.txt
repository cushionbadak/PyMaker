<div class="post-text" itemprop="text">
<p>I cloned a repo and I'm trying to run my tests and i'm getting an interpreter error:</p>
<pre><code>Interpreter path does not exist: C:\Users\username\Source\Repos\citcodownloader\env\Scripts\python.exe
</code></pre>
<p>The project downloaded a <code>.sln</code>, solutions view that I opened it with and I thought it set up my enviornment but it doesn't seem to be doing so. Not sure what to do from here.</p>
</div>
<div class="post-text" itemprop="text">
<p>The best thing you can do is create a (or use an existing) <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">Virtual Environment</a>. It looks like your program is looking for one in the folder "env". Try this:</p>
<ol>
<li>Open a terminal (Windows key + R, then type cmd and press enter)</li>
<li>Navigate to your repo folder using <code>chdir C:\path\to\your\repo</code></li>
<li>Run the command <code>env\Scripts\activate.bat</code> (if there is no folder called "env" in your repo, use my instructions below)</li>
<li>Try running your program again.</li>
</ol>
<p>I hope this helps, post a comment if it doesn't and I'll add as much detail or explanation as you need. Good luck!</p>
<p><strong>For Googlers or people who that doesn't help, look for these files in your repo:</strong></p>
<ul>
<li><code>requirements.txt</code> (a list of plugins you need to set up a virtual environment)</li>
<li><code>venv/</code> (folder containing a virtual environment)</li>
</ul>
<p><strong>Solution</strong></p>
<ol>
<li><p>If a folder named 'venv' or 'virtualenv' does <strong>NOT</strong> exist,
run this command to create it: <code>python -m venv venv</code> (or for Python 3: <code>python3 -m venv venv</code>). If it does exist, move forward.</p></li>
<li><p>You have a virtual environment! Now enter into it using: <code>source venv/bin/active</code> (on Unix or OSX, see the link above for the Windows command).</p></li>
<li><p>If <code>requirements.txt</code> is there, run this command next: <code>pip install -r requirements.txt</code>. If not, move forward.</p></li>
<li><p>Run the program again (via whatever method the repo says you should use). If you get 'error: module is not installed' use the command <code>pip install moduleNameHere</code> and run the program again.</p></li>
<li><p>Keep doing step 4 for each missing module, once the program is working use <code>pip freeze &gt; requirements.txt</code> to create a requirements file and save yourself the headache next time. :)</p></li>
</ol>
</div>
