<div class="post-text" itemprop="text">
<p><strong>UPDATE</strong>:
<br/>The error (in this particular case) was not caused by circular import, but by flaw in <a href="https://virtualenv.pypa.io/en/stable/" rel="nofollow noreferrer"><code>virtualenv</code></a> configuration. See <a href="https://stackoverflow.com/a/51060856/8554766">my answer</a> below, for elaboration.</p>
<hr/>
<p>I am using:</p>
<ul>
<li><a href="http://flask.pocoo.org/" rel="nofollow noreferrer">Flask</a> 0.12.2</li>
<li><a href="https://www.python.org/" rel="nofollow noreferrer">Python</a> 3.6.1</li>
</ul>
<p>I am building a web app using Flask, among other things I need an ability to send mails to users. I have built a separate Python module, which will be responsible for mail handling. Though I've encountered a strange (as it seems to me, at least) <code>import</code> issue, after I added the email-processing module to my app.</p>
<hr/>
<p>Here is the (insulated) <code>import</code> issue I've encountered:</p>
<p><strong>app.py</strong></p>
<pre><code>from flask import Flask
from test_mail import EmailTool

app = Flask(__name__)

@app.route('/')
def index():
    return 'Testing!'
</code></pre>
<p><strong>test_mail.py</strong></p>
<pre><code>from email.message import EmailMessage

class EmailTool(object):
    pass
</code></pre>
<p>After launching my app and going to index (i.e. <code>/</code>) I am receiving:</p>
<pre><code>Traceback (most recent call last):
  File "/app.py", line 2, in &lt;module&gt;
    from tmp_test_mail import EmailTool
  File "/test_mail.py", line 1, in &lt;module&gt;
    from email.message import EmailMessage
ImportError: cannot import name EmailMessage
</code></pre>
<hr/>
<p>I've changed code for <strong>test_mail.py</strong>, in order to make sure <code>email</code> module is accessible:</p>
<pre><code>import email

class EmailTool(object):
    pass
</code></pre>
<p>This way I do not get an error.</p>
<p>Searching for possible causes&amp;solutions led me to believe (<a href="https://github.com/miguelgrinberg/flasky/issues/345" rel="nofollow noreferrer">1</a>, <a href="http://effbot.org/zone/import-confusion.htm" rel="nofollow noreferrer">2</a>, <a href="https://stackoverflow.com/questions/19466045/importerror-cannot-import-name-mail-in-flask">3</a>, <a href="https://stackoverflow.com/questions/894864/circular-dependency-in-python">4</a>, <a href="https://stackoverflow.com/questions/744373/circular-or-cyclic-imports-in-python">5</a>), it most likely has something to do with circular reference. Though even after reading through all the mentioned materials and insulating the problem cause, I still can not see how is it a <strong>circular</strong> reference. So I am concluding that either it is not circular and the cause lies in something else, or it is circular and I am missing something obvious here. </p>
<hr/>
<p>I am asking for help in understanding the following:</p>
<ol>
<li>Is the case presented above considered to be a circular reference? (If yes, in what way it is actually <strong>circular</strong>)?</li>
<li>Why am I getting an error when I do <code>from email.message import EmailMessage</code> but don't get an error if I do <code>import email</code> instead?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>To answer your both of your questions:</p>
<p><strong>First</strong></p>
<p>No, the code provided above <em>shouldn't</em> be circular, unless <code>email.message</code> contains references to the <code>app</code> module, assuming <code>app</code> is a valid module.</p>
<p><strong>Second</strong></p>
<p>Importing from <code>email</code> instead of <code>email.message</code> doesn't cause any errors because you are not importing the (seemingly) problematic <code>EmailMessage</code> class since it resides in <code>email.message</code>, not <code>email</code>. My theory is that it's caused by some import looping back to the <code>app</code> module located in the <code>email.message</code> module.</p>
<h1>Note:</h1>
<p>At the time of writing I was not aware that <code>email</code> or <code>email.message</code> were part of the standard (3.6.x) library, as I have never used anything related to those modules (and I don't use python 3.x&lt; very often) and thus I assumed this was caused by <strong>circular reference</strong> as the author suggested. As it turns out (and pointed out in the <a href="https://stackoverflow.com/q/51039756/8261831">original post</a>) this was caused by <a href="https://stackoverflow.com/a/51060856/8261831">something else entirely</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>TL;DR</strong>: the actual issue had nothing to do with circular dependency — it turned out to be misconfiguration of my virtual environment (<strong>Python version was actually 2.7.10</strong>, as was suggested in the comment by <a href="https://stackoverflow.com/users/1190388/hjpotter92">hjpotter92</a>).</p>
<hr/>
<p>How I found out it was the cause (posting as a collection of recipes for debugging your Python <code>venv</code>, which might later be handy for myself, and hopefully someone else):</p>
<ol>
<li><p>Right after reading the comments to my quertion (<a href="https://stackoverflow.com/users/1190388/hjpotter92">hjpotter92</a>'s comment, in particular) I've rushed to check the version of Python inside the <a href="https://virtualenv.pypa.io/en/stable/" rel="nofollow noreferrer"><code>virtualenv</code></a> I run my app from (even though I've checked it right before posting the question — you can't be too careful in this kind of things =).
<br/>
<br/>Running (inside the virtual environment):</p>
<pre><code>python --version
</code></pre>
<p>gave me (just as I have expected):</p>
<pre><code>Python 3.6.1
</code></pre></li>
<li><p>I wasn't convinced, though =). As was suggested by the this answers: <a href="https://stackoverflow.com/questions/1252163/printing-python-version-in-output">1</a> and <a href="https://stackoverflow.com/questions/1093322/how-do-i-check-what-version-of-python-is-running-my-script">2</a>, I have added the following to code to both modules: <code>app.py</code> and <code>test_mail.py</code> (in order to check which version of Python they are <strong>actually ran</strong> by):</p>
<pre><code>import sys
...
print(sys.version)
</code></pre>
<p>it was outputting (surprisingly for me):</p>
<pre><code>2.7.10
</code></pre></li>
<li><p>Ok, clearly something is wrong here. I have decided to refresh my basic knowledge of <code>virtualenv</code> setup. The <a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/" rel="nofollow noreferrer">first article</a> I stumbled upon, suggested <code>pip --version</code> as a second step of the setup process (after <code>python --version</code>). Having nothing to loose I ran it (inside the virtual environment, of course), and (to my amazement) it gave me:</p>
<pre><code>pip 9.0.1 from /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages (python 2.7)
</code></pre>
<p>So, somehow <a href="https://pypi.org/project/pip/" rel="nofollow noreferrer"><code>pip</code></a> used inside the virtual environment was a system level one...</p></li>
<li><p>At this point I was in doubt that my app was running from <code>virtualenv</code> at all. Following the recipe from <a href="https://stackoverflow.com/a/1883251/8554766">this answer</a> (<strong>and comment</strong> to it), I have composed and added to <code>app.py</code> and <code>test_mail.py</code>, the following snippet:</p>
<pre><code>import sys

...

if hasattr(sys, 'real_prefix'):
    print('Python 2 venv')
elif (hasattr(sys, 'base_prefix') and sys.prefix != sys.base_prefix):
    print('Python 3 venv')
else:
    print('Not venv!')
</code></pre>
<p>not much a surprise (at this point) it was printing <code>Not venv!</code>.</p></li>
<li>To debug what exactly is wrong with current virtual environment seemed to time-costly. So, what I ended up doing:

<ul>
<li>removing <code>Flask</code> and related packages (<code>itsdangerous</code>, <code>Jinja2</code>, <code>MarkupSafe</code>, <code>Werkzeug</code>) from system level (which were installed there, for some reason) via <code>pip uninstall &lt;package_name&gt;</code>.</li>
<li>recreating virtual environment with <code>python3 -m venv &lt;env_name&gt;</code></li>
</ul></li>
</ol>
<hr/>
<p>Now, to answer my own questions:</p>
<ol>
<li>Code in my question <strong>does not contain</strong> a circular reference.</li>
<li>The error after trying to do <code>from email.message import EmailMessage</code>, occurred because Python 2.7.10 was actually used, and if we'll look into <a href="https://github.com/python/cpython/blob/468f97b4640e69b237a707a0ef9152d1c023f701/Lib/email/message.py" rel="nofollow noreferrer">source code of <code>message.py</code></a> for this version of Python, we will see that it simply does not contain a class named <code>EmailMessage</code>. While the <a href="https://github.com/python/cpython/blob/acda5ea916f4233ab90ca7b4d28af735aa962af3/Lib/email/message.py#L1159" rel="nofollow noreferrer">source code of <code>message.py</code> for Python 3.6.* library</a>, does contain class named <code>EmailMessage</code>.</li>
</ol>
</div>
<span class="comment-copy">Are you sure it is python 3.6?</span>
<span class="comment-copy">no, the code above is not a circular reference</span>
<span class="comment-copy">unless, of course, the <code>email.message</code> module imports from <code>app</code>, then it would be circular reference. If you could provide code from the <code>email.message</code> module that would help.</span>
<span class="comment-copy">@Skilledfire, it's a part of standard library. Though, I have found the cause of the issue — see my answer below (which, by the way, contains links to the <code>email.message</code> source code =)</span>
<span class="comment-copy">@hjpotter92, indeed it was the cause. Turned out my app was ran by Python 2.7.10 (see my answer below for details). Thanks for your suggestion!</span>
<span class="comment-copy"><code>email.message.EmailMessage</code> is new to python 3.6+, as can be seen from docs: <a href="https://docs.python.org/3/library/email.message.html" rel="nofollow noreferrer">docs.python.org/3/library/email.message.html</a> which mentions: "<i>New in version 3.6</i>".</span>
<span class="comment-copy">sorry for my answer, I never even new <code>email.message</code> was a built-in module.</span>
<span class="comment-copy">@Skilledfire, nothing to be sorry about! We all came here to learn ;-)</span>
