<div class="post-text" itemprop="text">
<p>How to combinate following tuples? </p>
<p><code>(1, 2); (5, 6) ; (3, 4)</code></p>
<p>The solution should be:</p>
<p><code>(1, 5, 3); (1, 5, 4); (1, 6, 3); (1, 6, 4); (2, 5, 3); (2, 5, 4); (2, 6, 3); (2, 6, 4)</code></p>
<p>At the starting point I got <code>m = 3</code> tuples. The number of tuples increases with every iteration and after every iteration a new tuple for recombining will be added. So after the first iteration I get:</p>
<p><code>(1, 2); (5, 6); (3, 4); (9, 10)</code></p>
<p>Then combinate those 4 tuples etc.
 Is there a possibility to do this dynamically until a stopping condition hits?</p>
</div>
<div class="post-text" itemprop="text">
<p>yes, its possible</p>
<pre><code>from itertools import product
for i in range(your_limit):
    your_tuples_container.append(your_new_tuple)
    result = list(product(*your_tuples_container))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try with <code>product</code></p>
<pre><code>from itertools import product
a = (1, 2),(5, 6) ,(3, 4)
result = list(product(*a))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use recursion, thus only needing several <code>for</code> loops for any input dimension:</p>
<pre><code>l = [(1, 2), (5, 6), (3, 4)]
def cartesian_product(d, current = []):
  if not d[1:]:
    yield [i+[b] for i in current for b in d[0]]
  else:
    yield from cartesian_product(d[1:], [i+[b] for i in current for b in d[0]])

print(list(cartesian_product(l[1:], list(map(lambda x:[x], l[0]))))[0])
</code></pre>
<p>Output:</p>
<pre><code>[[1, 5, 3], [1, 5, 4], [1, 6, 3], [1, 6, 4], [2, 5, 3], [2, 5, 4], [2, 6, 3], [2, 6, 4]]
</code></pre>
</div>
<span class="comment-copy">what code have you written?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html</a></span>
<span class="comment-copy">try <code>from itertools import product; result = [i for i in product((1, 2),(5, 6) ,(3, 4))]</code></span>
<span class="comment-copy">is <i>combinate</i> a word?</span>
<span class="comment-copy">Your question is not clear. What do you mean by "do this dynamically"? Do you know how to find your "combinations" (which are actually <i>products</i>) for a fixed number of tuples? Are you asking how to use those "combinations" and a new tuple to find the "combinations" of your old source tuples plus the new one? If so, why not just work from the source tuples? Or do you mean something else?</span>
<span class="comment-copy">@RoryDaulton Is list comprehension really a <code>for</code>-loop? Isn't it a mere list construction written in another form?</span>
