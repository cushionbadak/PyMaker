<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6074018/why-does-the-expression-0-0-0-return-false-in-python">Why does the expression 0 &lt; 0 == 0 return False in Python?</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/31354429/why-is-true-is-false-false-false-in-python">Why is `True is False == False`, False in Python? [duplicate]</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>Today, in an interview, the CTO asked me what looks like an easy question, </p>
<p>What does this statement return ? :</p>
<pre><code>None is None is None
</code></pre>
<p>I thought Python executed the first operation <code>None is None</code> and would return <code>True</code>. After that, it would compare <code>True is None</code> which would return <code>False</code>. But, to my surprise, the right answer is <code>True</code>. I am trying to find answer to this question, but after a couple of days searching I didn't find anything. Can someone explain why this happens?</p>
</div>
<div class="post-text" itemprop="text">
<p>The bytecode shows that two comparisons are being performed here with the middle being duplicated:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def a():
...     return None is None is None
... 
&gt;&gt;&gt; dis.dis(a)
  2           0 LOAD_CONST               0 (None)
              3 LOAD_CONST               0 (None)
              6 DUP_TOP
              7 ROT_THREE
              8 COMPARE_OP               8 (is)
             11 JUMP_IF_FALSE_OR_POP    21
             14 LOAD_CONST               0 (None)
             17 COMPARE_OP               8 (is)
             20 RETURN_VALUE
        &gt;&gt;   21 ROT_TWO
             22 POP_TOP
             23 RETURN_VALUE
</code></pre>
<p>As stated in the <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="noreferrer">docs for comparisons</a> this is because these operators chain together.</p>
<p><code>a op b op c</code> will be translated to <code>a op b and b op c</code> (note <code>b</code> is duplicated in the bytecode as shown above)</p>
</div>
<div class="post-text" itemprop="text">
<p>As some people comments, <em>Python comparisons can be chained</em>. </p>
<p>For the sake of explanation, when chaining, Python actually <strong>ANDs</strong> the expressions. </p>
<p>T<strong>he rationale behind this</strong>, is that expressions like <code>a &lt; b &lt; c</code> have the interpretation that is conventional in mathematics. Hence the confusion of your particular expression <code>None is None is None</code> where <em>identy</em> operators are involved.</p>
<p>So basically, this would translate to:</p>
<pre><code>(None is None) and (None is None)
</code></pre>
<p>which is clearly <code>True</code></p>
<p>Here is another example in the Python <a href="https://docs.python.org/2/reference/expressions.html#comparisons" rel="nofollow noreferrer">docs</a></p>
<p><strong>Further Information</strong></p>
<p>Especially since this was an interview question, it is important to note that this is not a general behavior shared among all languages.</p>
<p>As it is stated in the documentation I linked,</p>
<blockquote>
<p>Unlike C, all comparison operations in Python have the same priority,
  which is lower than that of any arithmetic, shifting or bitwise
  operation.</p>
</blockquote>
<p>So, let's consider the <code>10 &gt; x &gt; 2</code> expression (since <code>is</code> operator is not valid in C).</p>
<p><strong>C's translation</strong> (because of <a href="http://en.cppreference.com/w/c/language/operator_precedence" rel="nofollow noreferrer">operator precedence</a>)</p>
<pre><code>((10 &gt; x) &gt; 2)
</code></pre>
<p><strong>Python's translation</strong></p>
<pre><code>(10 &gt; x) and (x &gt; 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>is</code> is a comparison operator, <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="noreferrer">as seen in the docs</a>:</p>
<blockquote>
<pre><code>comparison    ::=  or_expr ( comp_operator or_expr )*
comp_operator ::=  "&lt;" | "&gt;" | "==" | "&gt;=" | "&lt;=" | "!="
                   | "is" ["not"] | ["not"] "in"
</code></pre>
</blockquote>
<p>So just like the other comparison operators, it can be chained arbitrarily. So </p>
<pre><code>a = b = c = None
a is b is c
</code></pre>
<p>is equivalent to </p>
<pre><code>(a is b) and (b is c)
</code></pre>
</div>
<span class="comment-copy">Python comparison operators chain. <code>None is None is None</code> is equivalent to <code>None is None and None is None</code>.</span>
<span class="comment-copy">to get the behaviour you expect, you would have to use parentheses: <code>if (None is None) is None</code>.</span>
<span class="comment-copy">interesting though. I never knew this could happen and I would have expected the same thing knowing what the <code>is</code> operator does...</span>
<span class="comment-copy">@SilvioMayolo Is this really a duplicate? It is not the same question. The answers are the same, but the question isn't.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/9284350/why-does-1-in-1-0-true-evaluate-to-false">The</a> <a href="https://stackoverflow.com/questions/31354429/why-is-true-is-false-false-false-in-python/31354499">precedent</a> for these sorts of questions seems to be to use that particular one as a dup target.</span>
<span class="comment-copy">I like this answer because it explains the rationale behind the behavior: <b><i>expressions like a &lt; b &lt; c have the interpretation that is conventional in mathematics</i></b>. Seeing how it is implemented in bytecode, in my opinion, explains nothing that would allow me to be able to extrapolate to other cases.</span>
<span class="comment-copy">@Jim Your comment is really appreciated. For future users I made sure to put more emphasis on that point because it is indeed the true reason behind this behavior. <code>None is None is None</code> is a particular misleading statement following this logic since no mathematics is involved..</span>
<span class="comment-copy">Although it's true there's no <i>mathematics</i> involved, the result still matches colloquial usage. For instance, "a fool is a fool is a fool" might be used for emphasis, while "an idiot is a fool is a nitwit" would imply equivalence between all three terms.</span>
<span class="comment-copy">@IMSoP You're right, <i>mathematics</i> wasn't the good term to use. See my answer I actually meant that <i>identy</i> operators are used which is really confusing compared to the same behavior when using <i>comparison</i> operators like <code>&lt;</code> if that make sense.</span>
<span class="comment-copy">I'm not sure it's any more or less surprising with identity operators; they're just another type of comparison. As I say, we'd use "is" that way in English, and a mathematician might well write <code>x = y = z</code>, or <code>x ≡ y ≡ z</code>, etc. I think it's just surprising because programming languages don't normally have operators that behave this way.</span>
<span class="comment-copy">Note that assignment is not a comparison with the same semantics. Specifically <code>a = b = c</code> is not evaluated in the same was as <code>a is b is c</code> or similar. <code>a = b = c</code> works from right to left. Whereas <code>a comp b comp c</code> is transformed into <code>a comp b</code> and <code>b comp c</code>. <code>a = b = c</code> is transformed into <code>b = c; a = b</code></span>
<span class="comment-copy">@shuttle87 Yes.. I simply wrote <code>a = b = c = None</code> for the subsequent example.</span>
