<div class="post-text" itemprop="text">
<p>I have some hard times learning Python array handling with numpy.</p>
<p>I have a .csv file which contains in one column unsigned integer data which represents binary values from an analog digital converter.
I would like to convert this unsigned integer values in 12 bit binary representation using Python inside a jupyter notebook.</p>
<p>I tried several ways of implementing it, but I still fail...</p>
<p>here is my code:</p>
<pre><code>import pandas as pd
df = pd.read_csv('my_adc_values.csv', delimiter ='\s+', header=None, usecols=[19])
decimalValues = df.values
print(decimalValues.shape)
</code></pre>
<p>so far so good... I have all my adc data column values in the decimalValues numpy array.</p>
<p>Now, I would like to iterate through the array and convert the integers in the array to a binary representation:</p>
<pre><code>import numpy as np

# destination array of shape of source array
binaryValues = np.zeros(decimalValues.shape)

for i in range(len(decimalValues)):
    print(decimalValues[i])
    binaryValues[i]=(bin(decimalValues[i]))    

print(binaryValues)
</code></pre>
<p>With this code I get the error message </p>
<pre><code>---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-10-890444040b2e&gt; in &lt;module&gt;()
      6 for i in range(len(decimalValues)):
      7     print(decimalValues[i])
----&gt; 8     binaryValues[i]=(bin(decimalValues[i]))
      9 
     10 print(binaryValues)

TypeError: only integer scalar arrays can be converted to a scalar index
</code></pre>
<p>I tried several different solutions, but none of them worked. It seems as if I have a massive misunderstanding of numpy arrays.</p>
<p>I'm looking for a tip on how to solve my described problem. I found some threads, describing the the  mentioned error message. I suspected, it had something to do with the shape of the source/destination arrays. therefore, I initialized the destination array with the same shape as the source. It did not help...</p>
<p>Thank you,
Maik</p>
</div>
<div class="post-text" itemprop="text">
<p>Numpy is primarily for working with numeric data, it doesn't give you much benefit when you're working with strings. Numpy <em>can</em> convert integers to decimal or hexadecimal strings, using the <a href="https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.core.defchararray.mod.html" rel="nofollow noreferrer"><code>numpy.char.mod</code></a> function, which utilises the old <code>%</code> <a href="https://docs.python.org/3/library/stdtypes.html#old-string-formatting" rel="nofollow noreferrer">string interpolation</a> operator. Unfortunately, that doesn't support binary output. We can create a Numpy vectorized function that uses the standard Python <a href="https://docs.python.org/3/library/functions.html#format" rel="nofollow noreferrer"><code>format</code></a> function to do the conversion. This is better than <code>bin</code>, since you don't get the leading <code>'0b'</code>, and you can specify the minimum length.</p>
<pre><code>import numpy as np

# Make some fake numeric data
nums = (1 &lt;&lt; np.arange(1, 10)) - 1
print(nums)

# Convert to 12 bit binary strings
func = np.vectorize(lambda n: format(n, '012b'))
bins = func(nums)
print(bins)
</code></pre>
<p><strong>output</strong></p>
<pre><code>[  1   3   7  15  31  63 127 255 511]
['000000000001' '000000000011' '000000000111' '000000001111' '000000011111'
 '000000111111' '000001111111' '000011111111' '000111111111']
</code></pre>
<p>Alternatively, do the conversion using plain Python. You can convert the result back to a Numpy array, if you really need that. This code uses the <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format</code></a> method, rather than the <code>format</code> function used by the previous version.</p>
<pre><code>bins = list(map('{:012b}'.format, nums))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What is causing the error in your case is that you are trying to apply a <em>bin</em> function on a slice, whereas it can only be applied on a single value. You might need an extra for loop to iterate over column values. Try changing your code in this way:</p>
<pre><code>for i in range(len(decimalValues)):
    for j in range(decimalValues.shape[1]):     
        print(decimalValues[i])
        binaryValues[i, j]=(bin(decimalValues[i, j]))  
print(binaryValues)
</code></pre>
<p>Let me know if it works!</p>
</div>
<span class="comment-copy">What exactly do you mean by "12 bit binary representation"? Do you want the output to be strings, eg 23 -&gt; <code>'000000010111'</code>? Or do you want a <code>bytes</code> string like <code>b'\x00\x17'</code>, which is 23 in Big Endian.</span>
<span class="comment-copy">A string representation would be what I need. I guess, the bin() funcion may the tool what I need for this. Unfortunately, up to now, my code did not made it that far. maybe another question arises, when the initial problem is solved.</span>
<span class="comment-copy">PM 2Ring, since I plan to use Python and the Jupyter Notebook technique more often in the future, every piece of information is very much welcomed! So thank you for your explanation and your example! It is very much appreciated.</span>
<span class="comment-copy">@Kiamur Does my code give you the desired output when you use it on your <code>decimalValues</code> array?</span>
<span class="comment-copy">The output format is as I expected it to be, yes. A 12 bit string without the leading '0b'. Thanks!</span>
<span class="comment-copy">Bogdan, thanks, that pointed me totally into the right direction. In my case however, the 'j' index can be constant at 0 because I only have 1 column to process. Since the output of the bin() function is a string, I get an error, that it cannot be saved to the binaryValues array. I'm fine with that, I will just switch to a Python list and append the output there. The initial question, how to handle my error message is answered!</span>
<span class="comment-copy">Since the code in your answer will most likely lead to an error, should I accept this answer anyway?</span>
<span class="comment-copy">@Kiamur Ok, now I see what you mean. If it will lead to an error then do not accept it as an answer, but you can vote it if it was helpful:-)</span>
