<div class="post-text" itemprop="text">
<p>I'm just learning Python, and do not understand the behavior I am getting from my reduce function. I have seen many examples where you can use reduce to perform an equivalent function to sum when you want to multiply:</p>
<pre><code>f = [2,3,4]
reduce(lambda x,y: x*y,f)
</code></pre>
<p>That gives me the value I expect. But I need to multiply by all the reciprocals instead. I thought I could do this:</p>
<pre><code>reduce(lambda x,y: 1/x * 1/y, f)
</code></pre>
<p>But it comes out as 1.5 instead of some much smaller decimal answer. What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>x</code> on each call is the result of the last call (it's only one of the direct inputs on the very first invocation), so doing <code>1 / x</code> each time takes the reciprocal of the previous result. To fix, you need to change the <code>lambda</code> to only multiply in the reciprocal of the new number, not the accumulated value. You also need to provide an initial neutral value (<code>1</code>) so that the first value in <code>f</code> has its reciprocal taken properly (otherwise, it would be the plain value of <code>f[0]</code> multiplied by the reciprocals of <code>f[1:]</code>):</p>
<pre><code># x is accumulated product of reciprocals to date, *DON'T* take reciprocal again
reduce(lambda x, y: x * (1 / y), f, 1)
                                  # ^ multiplicative identity is correct neutral value here
</code></pre>
<p>That said, you can simplify a little more; <code>x * (1 / y)</code> is (roughly, given floating point precision issues) equivalent to <code>x / y</code>, so you could simplify further to:</p>
<pre><code>reduce(lambda x, y: x / y, f, 1)
</code></pre>
<p>or using <a href="https://docs.python.org/3/library/operator.html#operator.truediv" rel="nofollow noreferrer">the <code>operator</code> module</a> to push all the work to the C layer (only important if <code>f</code> might be really big):</p>
<pre><code>import operator
reduce(operator.truediv, f, 1)
</code></pre>
<p>Either way, this gets the expected result:</p>
<pre><code>&gt;&gt;&gt; (1/2) * (1/3) * (1/4)
0.041666666666666664
&gt;&gt;&gt; reduce(lambda x,y: x * (1 / y), f, 1)
0.041666666666666664
&gt;&gt;&gt; reduce(lambda x,y: x / y, f, 1)
0.041666666666666664
&gt;&gt;&gt; reduce(operator.truediv, f, 1)
0.041666666666666664
</code></pre>
</div>
<span class="comment-copy">Have you tried using paranthesis in the calculation: <code>reduce(lambda x,y: (1/x) * (1/y), f)</code> ?</span>
<span class="comment-copy">@LukasBach: As it happens, in this case, the parentheses are (mostly) irrelevant (only mostly because order of operations slightly alters the result of floating point math). Even without the parentheses, it would become <code>((1 / x) * 1) / y</code> which is logically equivalent. The problem is in the meaning of <code>x</code>.</span>
<span class="comment-copy">The "take the reciprocal" part is much more appropriate for <code>map</code>, rather than folding it into the <code>reduce</code>: <code>reduce(lambda x, y: x*y, map(lambda x: 1/x, f))</code>.</span>
<span class="comment-copy">(Of course, using <code>reduce</code>, <code>map</code>, or <code>lambda</code> at all isn't really encouraged in Python the way it would be in functional languages, and multiplying all the reciprocals together is equivalent to multiplying all the numbers and taking the reciprocal once at the end anyway, which would be easier.)</span>
<span class="comment-copy">Why not just multiply all the numbers and do the reciprocal as the last step? Should have better accuracy.</span>
<span class="comment-copy">Tangent: If <code>f</code> is big, you're likely going to end up suffering from floating point imprecision. A trick for avoiding this would be to convert operands to <code>fractions.Fraction</code>; if all your operands are integers (lossless), the <code>Fraction</code> form is too, so you can get a result as a <code>Fraction</code> with no loss of precision, or only convert to <code>float</code> at the very end, limiting the precision loss to a single operation. <code>reduce(truediv, map(Fraction, f), 1)</code> produces <code>Fraction(1, 24)</code>, and <code>float(reduce(truediv, map(Fraction, f), 1))</code> produces <code>0.041666666666666664</code> having only performed rounding once.</span>
<span class="comment-copy">@kindall: Heh, good point! I was typing up a comment with the same net result, but yeah, sticking with plain integers would be faster. Knowing the <code>Fractions</code> approach might be useful for other, more complicated scenarios where the lossless aspect of <code>Fraction</code>s is useful, but in this case, <code>1 / reduce(operator.mul, f)</code> would almost certainly be the fastest, simplest possible solution.</span>
<span class="comment-copy">Thank you Mr. ShadowRanger. I completely understand how to use Reduce!</span>
