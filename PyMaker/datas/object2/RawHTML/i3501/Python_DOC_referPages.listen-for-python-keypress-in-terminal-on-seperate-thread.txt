<div class="post-text" itemprop="text">
<p>I am making a simple game for the terminal (because I don't want to install a gui on my arch machine). I want to detect Keypresses and change a variable accordingly so that when the main process loops again it can see the changed variable. I've searched Google for an hour trying to figure this out and everything either stopped the program waiting for a Keypress or it needed an xserver display (pynput). How would I detect for a Keypress in the background? I really don't want to install big 'ol libraries like pygame for this...</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are looking for is called an <a href="https://docs.python.org/3/library/asyncio-eventloop.html" rel="nofollow noreferrer"><code>event loop</code></a>. This loop is running your program constantly while allowing callbacks to direct flow inside your program. In Python3 there is a new module in the standard library that is specifically directed at this, called <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer"><code>asyncio</code></a>.</p>
<blockquote>
<p>The event loop is the central execution device provided by asyncio. It provides multiple facilities, including:</p>
<p>Registering, executing and cancelling delayed calls (timeouts).
  Creating client and server transports for various kinds of communication.
  Launching subprocesses and the associated transports for communication with an external program.
  Delegating costly function calls to a pool of threads.
  <a href="https://docs.python.org/3/library/asyncio-eventloop.html" rel="nofollow noreferrer">https://docs.python.org/3/library/asyncio-eventloop.html</a></p>
</blockquote>
<p>Writing Python programs synchronously (read: with threads) is possible but usually not what you need and adds more complexity than you should care about. In most cases async flow via callsbacks is less complex and prevents you from running into problems like deadlocks, race conditions or other problems connected to threading.</p>
</div>
<span class="comment-copy">Thanks I'll look into to it and see if I can get my code to work with this</span>
<span class="comment-copy">Asyncio was good for some stuff in my script but key listening was not one of them unfortunately. I ended up using <code>threading.Thread(target = kboard).start()</code>  where kboard is a basic key listener with the curses library..</span>
