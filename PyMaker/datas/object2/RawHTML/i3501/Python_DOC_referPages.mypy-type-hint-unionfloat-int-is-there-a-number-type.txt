<div class="post-text" itemprop="text">
<p>mypy is really handy and catches a lot of bugs, but when I write "scientific" applications, I often end up doing:</p>
<pre><code>def my_func(number: Union[float, int]):
    # Do something
</code></pre>
<p><code>number</code> is either a float or int, depending on the user's input. Is there an official way to do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>float</code> <strong>only</strong>, as <code>int</code> is implied in that type:</p>
<pre><code>def my_func(number: float):
</code></pre>
<p><a href="https://www.python.org/dev/peps/pep-0484/#the-numeric-tower" rel="noreferrer">PEP 484 <em>Type Hints</em></a> specifically states that:</p>
<blockquote>
<p>Rather than requiring that users write import numbers and then use <code>numbers.Float</code> etc., this PEP proposes a straightforward shortcut that is almost as effective: <strong>when an argument is annotated as having type <code>float</code>, an argument of type <code>int</code> is acceptable</strong>; similar, for an argument annotated as having type complex, arguments of type float or int are acceptable.</p>
</blockquote>
<p>(Bold emphasis mine).</p>
<p>Ideally you would still use <a href="https://docs.python.org/3/library/numbers.html#numbers.Real" rel="noreferrer"><code>numbers.Real</code></a>:</p>
<pre><code>from numbers import Real

def my_func(number: Real):
</code></pre>
<p>as that would accept <code>fractions.Fraction()</code> and <code>decimal.Decimal()</code> objects as well; the number pyramid is broader than just integers and floating point values.</p>
<p>However, these are not currently working when using <code>mypy</code> to do your type checking, see <a href="https://github.com/python/mypy/issues/3186" rel="noreferrer">Mypy #3186</a>.</p>
</div>
