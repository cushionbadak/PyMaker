<div class="post-text" itemprop="text">
<p>I am working with the <code>argparse</code> library in python. At some time, I use an argument called <code>param</code> that takes 2 args: a key and a value. The line of code I use is the following:</p>
<pre><code>parser.add_argument("-p", "--param", nargs=2, action="append", 
                    help="key and value for query", 
                    type=str, metavar="key value"
                    )
</code></pre>
<p>What's wrong here is when I call the help, it displays like this:</p>
<pre><code>optional arguments:
    -h, --help            show this help message and exit
    -p key value key value, --param key value key value
                          key and value for query parameters
</code></pre>
<p>The name 'key value' is repeated twice. I tried with lists, and generators but the only way i found was creating a little class containing the different values and yielding them when ask to <code>__str__</code> like this:</p>
<pre><code>class Meta:
    def __init__(self, iterable):
        self.gene = itertools.cycle(iterable)

    def __str__(self):
        return self.gene.__next__()
</code></pre>
<p>and I call <code>add_argument</code> like this:</p>
<pre><code>parser.add_argument("-p", "--param", nargs=2, action="append", 
                    help="key and value for query parameters",
                    type=str, metavar=Meta(["key", "value"])
                    )
</code></pre>
<p>And it displays correctly:</p>
<pre><code>-p key value, --param key value
                    key and value for query parameters
</code></pre>
<p>But I find pretty ugly using a temporary class like <code>Meta</code>, and I feel like there must be another (better) way of doing this. Am I doing it right ?</p>
</div>
<div class="post-text" itemprop="text">
<p>From scrolling the <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">doc</a> deeply, I've found my answer</p>
<blockquote>
<p>Different values of nargs may cause the metavar to be used multiple
  times. Providing a tuple to metavar specifies a different display for
  each of the arguments:</p>
</blockquote>
<p>indeed, this works perfectly fine:</p>
<pre><code>parser.add_argument("-p", "--param", nargs=2, action="append", 
                    help="key and value for query parameters",
                    type=str, metavar=("key", "value")
                    )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The metavar handler isn't particularly sophisticated, but does take advantage of the information that <code>tuple</code> class provides.</p>
<p>It wasn't obvious as to why your class worked, so I dug into the code.</p>
<p>Metavar is handled in the Formatter class with:</p>
<pre><code>def _metavar_formatter(self, action, default_metavar):
    if action.metavar is not None:
        result = action.metavar
    elif action.choices is not None:
        choice_strs = [str(choice) for choice in action.choices]
        result = '{%s}' % ','.join(choice_strs)
    else:
        result = default_metavar

    def format(tuple_size):
        if isinstance(result, tuple):
            return result
        else:
            return (result, ) * tuple_size
    return format
</code></pre>
<p>and</p>
<pre><code>def _format_args(self, action, default_metavar):
    get_metavar = self._metavar_formatter(action, default_metavar)
    ....
    else:
        # for numeric nargs
        formats = ['%s' for _ in range(action.nargs)]
        result = ' '.join(formats) % get_metavar(action.nargs)
    return result
</code></pre>
<p>So with your <code>Meta</code>:</p>
<pre><code>In [261]: x = Meta(['one', 'two'])
In [262]: x
Out[262]: &lt;__main__.Meta at 0x7f36980f65c0&gt;
In [263]: x = (x,)*2
In [264]: x
Out[264]: (&lt;__main__.Meta at 0x7f36980f65c0&gt;, &lt;__main__.Meta at 0x7f36980f65c0&gt;)
In [265]: '%s %s'%x
Out[265]: 'one two'
</code></pre>
<p>With the tuple metavar:</p>
<pre><code>In [266]: '%s %s'%('one','two')
Out[266]: 'one two'
</code></pre>
<p>and with a single string</p>
<pre><code>In [267]: '%s %s'%(('one two',)*2)
Out[267]: 'one two one two'
</code></pre>
</div>
<span class="comment-copy">Thanks for the explanation, it wans't obvious my class would work indeed. And it explains why tuple works and to other iterables like list.</span>
