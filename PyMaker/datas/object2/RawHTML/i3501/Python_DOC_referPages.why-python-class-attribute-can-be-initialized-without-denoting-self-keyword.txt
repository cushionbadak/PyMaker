<div class="post-text" itemprop="text">
<pre><code>class Foo():
    def __init__(self):
        pass

    def makeInstanceAttribute(oops):
        oops.x = 10

f = Foo()
f.makeInstanceAttribute()
print(f.x)
</code></pre>
<p>and it's printing <code>10</code>, how does it work? Why <code>oops</code> has same effect of being <code>self</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Quoting the <a href="https://docs.python.org/3/tutorial/classes.html#random-remarks" rel="nofollow noreferrer">Python documentation</a>:</p>
<blockquote>
<p>Often, the first argument of a method is called <code>self</code>. This is nothing more than a convention: the name self has absolutely no special meaning to Python. Note, however, that by not following the convention your code may be less readable to other Python programmers, and it is also conceivable that a class browser program might be written that relies upon such a convention.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>self</code> is just a convention. It can be named anyway you want. What actually is passed to the function as the <strong>first</strong> argument is the <em>object instance</em>. Consider this code:</p>
<pre><code>class A(object):
    def self_test(self):
        print self

    def foo(oops):
        print oops

&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.self_test()
&lt;__main__.A object at 0x03CB18D0&gt;
&gt;&gt;&gt; a.foo()
&lt;__main__.A object at 0x03CB18D0&gt;
&gt;&gt;&gt; 
</code></pre>
<p>This <a href="https://stackoverflow.com/questions/4131582/why-is-self-only-a-convention-and-not-a-real-python-keyword">question</a> is probably related to yours, you might find it helpful.</p>
</div>
<span class="comment-copy">Because <code>self</code> is not a keyword, but a convention.</span>
<span class="comment-copy">Thanks mate I messed it up with java 'this' keyword.</span>
