<div class="post-text" itemprop="text">
<p>Consider the following C++ program:</p>
<pre><code>#include &lt;cstdint&gt;
#include &lt;iostream&gt;

int main() {
  std::string s = "αa";
  std::cout &lt;&lt; std::hex &lt;&lt; uint32_t(s[0]) &lt;&lt; std::endl;
  std::cout &lt;&lt; std::hex &lt;&lt; uint32_t(s[1]) &lt;&lt; std::endl;
  std::cout &lt;&lt; std::hex &lt;&lt; uint32_t(s[2]) &lt;&lt; std::endl;
}
</code></pre>
<p>which prints</p>
<pre><code>ffffffce
ffffffb1
61
</code></pre>
<p>How can I replicate the casting behavior in Python? Ie. how can I obtain a numpy array of type uint32_t containing the 3 numbers? <sup>1</sup></p>
<p>For example</p>
<pre><code>import numpy as np

s = "αa"
s = s.encode('utf-8')
for c in bytearray(s):
    h = print(hex(np.uint32(c)))
</code></pre>
<p>will result in</p>
<pre><code>0xce
0xb1
0x61
</code></pre>
<p>which is not sufficient. I have also looked into the functionality provided by the <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">ctypes</a> module but could not find a working solution.</p>
<p>Motivation: I would like to apply a <a href="https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function" rel="nofollow noreferrer">Fowler–Noll–Vo hash function</a>, which relies on bit-wise operations, matching an existing C++ implementation that operates by casting the elements of a <code>std::string</code> to <code>uint32_t</code>.</p>
<p><sup><sup>1</sup>While output of the C++ version depends on the architecture / compiler, I am looking for an implementation that either matches the behavior described in this question, or the behavior of the C++ program when compiling it with the same compiler as the python interpreter is compiled with on.</sup></p>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is that your C++ implementation (as many do and as unfortunately allowed - <em>but not mandated</em> - by the standard) has <code>char</code> as a signed type, while Python rightly consider <code>bytearray</code> elements as non-negative values.</p>
<p>The <em>correct</em> solution IMO would be as @Scheff shows in his answer - fix the C++ program, which relies on implementation-defined behavior which generates disputable output. OTOH, if you are forced to match an existing C++ program that cannot be altered, you can easily reproduce this behavior in Python.</p>
<p>In your C++ program when a byte value beyond 127 (and hence negative) gets converted to <code>uint32_t</code>, it gets wrapped around 2³², hence all those <code>ffffffxx</code> values.</p>
<p>To obtain the same result in Python you can manually cast to <code>int8</code> (i.e. <code>char</code> in your C++ implementation) first:</p>
<pre><code>import numpy as np

s = "αa"
s = s.encode('utf-8')
for c in bytearray(s):
    h = print(hex(np.uint32(np.int8(c))))
</code></pre>
<p>which outputs:</p>
<pre><code>0xffffffce
0xffffffb1
0x61
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3.1/library/functions.html#bytearray" rel="nofollow noreferrer">Python doc.</a>:</p>
<blockquote>
<p>The bytearray type is a mutable sequence of integers in the range 0 &lt;= x &lt; 256.</p>
</blockquote>
<p>IMHO, the conversion in C++ should hence handle the characters as <code>unsigned char</code>. This can be achieved by a "two-step" cast:</p>
<pre><code>#include &lt;cstdint&gt;
#include &lt;iostream&gt;

typedef unsigned char uchar;

int main() {
  std::string s = "αa";
  std::cout &lt;&lt; std::hex &lt;&lt; uint32_t((uchar)s[0]) &lt;&lt; std::endl;
  std::cout &lt;&lt; std::hex &lt;&lt; uint32_t((uchar)s[1]) &lt;&lt; std::endl;
  std::cout &lt;&lt; std::hex &lt;&lt; uint32_t((uchar)s[2]) &lt;&lt; std::endl;
}
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>ce
b1
61
</code></pre>
<p><kbd><a href="http://coliru.stacked-crooked.com/a/0a2ac21f2aed0add" rel="nofollow noreferrer"><strong>Live Demo on coliru</strong></a></kbd></p>
<p>Notes:</p>
<ol>
<li><p>I consider the initialization <code>std::string s = "αa";</code> as a bit critical. So, this depends on the source code encoding. (I'm on Windows. Using Windows-1252 encoding as it is usual for a lot of Windows applications would break this program <s>as the string would have two elements only</s>. I just realized that <a href="https://en.wikipedia.org/wiki/Windows-1252" rel="nofollow noreferrer">Window-1252</a> doesn't even encode <code>α</code> but this doesn't make it better.)</p></li>
<li><p>Forcing the characters to <code>unsigned char</code>, should make the application independent from the signed-ness of the specific <code>char</code> type of the C++ compiler.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The fact that you got <code>0xffffffce</code> for the first character is implementation dependent and a valid C++ implementation could return also <code>0xce</code> because the difference depends on the default <code>char</code> type being signed or unsigned (some compilers provide a command line switch to change the behavior so it's not even just platform-dependent, but compile-options dependent).</p>
<p>That said you can fix an unsigned character converted to uint32 to the same result of a conversion of a signed one by simply extending the 8th bit or by converting to the corresponding signed value before doing the casting... for example</p>
<pre><code>print(hex(np.uint32(c if c &lt; 128 else c-256)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to get a numpy array of uint32 is to pass it through an int8 array first:</p>
<pre><code>&gt;&gt;&gt; s = 'αa'
&gt;&gt;&gt; a = np.array(list(s.encode('utf8')),dtype=np.int8)
&gt;&gt;&gt; b = np.array(a,dtype=np.uint32)
&gt;&gt;&gt; b
array([4294967246, 4294967217,         97], dtype=uint32)
&gt;&gt;&gt; for c in b: print(hex(c))
...
0xffffffce
0xffffffb1
0x61
</code></pre>
</div>
<span class="comment-copy">The C++ version already isn't portable since it relies on <code>char</code> being signed.</span>
<span class="comment-copy">Yes, I am aware that the C++ version is not portable. I would like to match the behavior of the C++ version assuming Python is compiled with the same compiler on the same architecture or at least match the behavior of the case described in the question. I'll edit the question to clarify.</span>
