<div class="post-text" itemprop="text">
<p>Input code is:    </p>
<pre><code># Input data:
S = pd.S = 2000 # Saturation flow
L = pd.L = 5 # Lost time
eb = pd.eb = 1000 
wb = pd.wb = 600
sb = pd.sb = 400
nb = pd.nb = 500

# a) C_min = Minimum cycle length calculation
Y_eb = pd.Y_eb = eb / S
Y_wb = pd.Y_wb = wb / S
Y_sb = pd.Y_sb = sb / S
Y_nb = pd.Y_nb = nb / S
Y_eb_wb_sb_nb = [Y_eb,Y_wb,Y_sb,Y_nb]
Y_eb_wb_sb_nb
</code></pre>
<p>Output:</p>
<pre><code>[0.5, 0.3, 0.2, 0.25]
</code></pre>
<p>Then</p>
<pre><code>if Y_eb &gt; Y_wb:
print(C_min = L / 1 - (Y_eb + Y_wb))
</code></pre>
<p>I want to:</p>
<p>Get maximum values from <code>(Y_eb;Y_wb)</code> and <code>(Y_sb;Y_nb)</code> and apply these values to formula:</p>
<pre><code>C_min = L / (1- [max of (Y_eb;Y_wb)] + [max of (Y_sb;Y_nb)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max</code></a> built-in fuction:</p>
<pre><code>C_min = L / (1- max(Y_eb,Y_wb) + max(Y_sb,Y_nb))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>python has a built-in <strong>max</strong> function, that give the max of a list...   </p>
<blockquote>
<p>max(iterable, *[, key, default]) </p>
<p>max(arg1, arg2, *args[, key])</p>
<p>"Return the largest item in an iterable or the largest of two or more
  arguments"</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#max</a></p>
<p>Answer:</p>
<pre><code>C_min = L / (1- max([Y_eb, Y_wb]) + max([Y_sb, Y_nb]))
</code></pre>
</div>
<span class="comment-copy">Perfect, thanks!</span>
<span class="comment-copy">@NazarTarlanli, consider accepting one answer as valid one: <a href="https://stackoverflow.com/help/someone-answers">stackoverflow.com/help/someone-answers</a></span>
<span class="comment-copy">Perfect, thanks!</span>
<span class="comment-copy">It would be great if you could add an explanation of what you're doing.  It's understandable if you examine the code, but might be even better if you supplement with an explanation.</span>
