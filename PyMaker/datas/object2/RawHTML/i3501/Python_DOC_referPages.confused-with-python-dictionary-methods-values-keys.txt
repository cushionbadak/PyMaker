<div class="post-text" itemprop="text">
<p>why this code isn't working?  trying to get returns on items which value==key</p>
<pre><code>L=[0,2,2,1,5,5,6,10]
x=dict(enumerate(L))
y=(filter(x.keys()==x.values(), x.items()))
print(list(y))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#dict.keys" rel="nofollow noreferrer"><code>keys()</code></a> method returns a view of all of the keys.</p>
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#dict.values" rel="nofollow noreferrer"><code>values()</code></a> method returns a view of all of the values.</p>
<p>So, <code>x.keys()==x.values()</code> is asking whether all of the keys equal all of the values, which is of course not true.</p>
<p>Also, <code>filter</code> wants a function. But you're not passing it a function, you're just passing it the result of <code>x.keys()==x.values()</code>, or <code>False</code>. To turn that into a function, you'd need to use <code>def</code> or <code>lambda</code> to create a new function.</p>
<hr/>
<p>The function you want to create is a function that takes an item, and returns true if the key equals the value. Since an item is just a 2-element tuple with the key and value for that item, the function to check that is:</p>
<pre><code>y = filter((lambda item: item[0] == item[1]), x.items())
</code></pre>
<p>Or, if that's a bit too confusing, don't try to write it inline; just <code>def</code> it separately:</p>
<pre><code>def key_equals_value(item):
    key, value = item
    return key == value

y = filter(key_equals_value, x.items())
</code></pre>
<hr/>
<p>However, this is pretty clumsy; it's much easier to write it as a comprehension than a <code>filter</code> call:</p>
<pre><code>y = ((key, value) for (key, value) in x.items() if key == value)
</code></pre>
<p>As a general rule, whenever you don't already have a function to pass to <code>filter</code> or <code>map</code>, and would have to create one with <code>def</code> or <code>lambda</code>, a comprehension will usually be more readable, because you can just write the expression directly.</p>
<hr/>
<p>And, if you want a list rather than a generator, you can do that with a comprehension just by changing the parens to square brackets:</p>
<pre><code>y = [(key, value) for (key, value) in x.items() if key == value]
</code></pre>
<hr/>
<p>And, if you want just the values, not the key-value pairs:</p>
<pre><code>y = [value for (key, value) in x.items() if key == value]
</code></pre>
<hr/>
<p>If you find yourself confused by comprehensions, they can always be converted into nested statements, with an <code>append</code> at the bottom. So, that last one is equivalent to:</p>
<pre><code>y = []
for key, value in x.items():
    if key == value:
        y.append(value)
</code></pre>
<hr/>
<p>Also, you don't really need a dict here in the first place; you just want to iterate over the index, value pairs. So:</p>
<pre><code>y = [value for (index, value) in enumerate(L) if index == value]
</code></pre>
</div>
