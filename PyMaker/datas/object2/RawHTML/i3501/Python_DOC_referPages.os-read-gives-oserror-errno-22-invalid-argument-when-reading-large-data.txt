<div class="post-text" itemprop="text">
<p>I use the following method to read binary data from any given offset in the binary file. The binary file I have is huge 10GB, so I usually read portion of it when needed by specifying from which offset I should <code>start_read</code> and how many bytes to read <code>num_to_read</code>. I use <code>Python 3.6.4 :: Anaconda, Inc.</code>, platform <code>Darwin-17.6.0-x86_64-i386-64bit</code> and <a href="https://docs.python.org/3/library/os.html" rel="nofollow noreferrer">os</a> module:</p>
<pre><code>def read_from_disk(path, start_read, num_to_read, dim):
    fd = os.open(path, os.O_RDONLY)
    os.lseek(fd, start_read, 0)  # Where to (start_read) from the beginning 0
    raw_data = os.read(fd, num_to_read)  # How many bytes to read
    C = np.frombuffer(raw_data, dtype=np.int64).reshape(-1, dim).astype(np.int8)
    os.close(fd)
    return C
</code></pre>
<p>This method works very well when the chunk of data to be read is about less than 2GB. When <code>num_to_read &gt; 2GG</code>, I get this error:</p>
<pre><code>raw_data = os.read(fd, num_to_read)  # How many to read (num_to_read)
OSError: [Errno 22] Invalid argument
</code></pre>
<p>I am not sure why this issue appears and how to fix it. Any help is highly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://github.com/python/cpython/blob/master/Modules/posixmodule.c#L8286" rel="nofollow noreferrer"><code>os.read</code> function</a> is just a thin wrapper around the platform's <code>read</code> function. </p>
<p>On some platforms, this is an unsigned or signed 32-bit int,<sup>1</sup> which means the largest you can <code>read</code> in a single go on these platforms is, respectively, 4GB or 2GB.</p>
<p>So, if you want to read more than that, and you want to be cross-platform, you have to write code to handle this, and to buffer up multiple <code>read</code>s.</p>
<p>This may be a bit of a pain, but you are intentionally using the lowest-level directly-mapping-to-the-OS-APIs function here. If you don't like that:</p>
<ul>
<li>Use <code>io</code> module objects (Python 3.x) or <code>file</code> objects (2.7) that you get back from <code>open</code> instead. </li>
<li>Just let NumPy read the filesâ€”which will have the added advantage that NumPy is smart enough to not try to read the whole thing into memory at once in the first place.</li>
<li>Or, for files this large, you may want to go lower level and use <code>mmap</code> (assuming you're on a 64-bit platform).</li>
</ul>
<hr/>
<p>The right thing to do here is almost certainly a combination of the first two. In Python 3, it would look like this:</p>
<pre><code>with open(path, 'rb', buffering=0) as f:
    f.seek(start_read)
    count = num_to_read // 8 # how many int64s to read
    return np.fromfile(f, dtype=np.int64, count=count).reshape(-1, dim).astype(np.int8)
</code></pre>
<hr/>
<p><sub>1. For Windows, the POSIX-emulation library's <code>_read</code> function uses <code>int</code> for the count argument, which is signed 32-bit. For every other modern platform, see POSIX <a href="http://pubs.opengroup.org/onlinepubs/009695399/functions/read.html" rel="nofollow noreferrer"><code>read</code></a>, and then look up the definitions of <code>size_t</code>, <code>ssize_t</code>, and <code>off_t</code>, on your platform. Notice that many POSIX platforms have separate 64-bit types, and corresponding functions, instead of changing the meaning of the existing types to 64-bit. Python will use the standard types, not the special 64-bit types.</sub></p>
</div>
<span class="comment-copy">What platform are you on?</span>
<span class="comment-copy">What build of Python are you using?</span>
<span class="comment-copy">It sounds like you're using 32-bit software, you need 64-bit to access more than 2GB.</span>
<span class="comment-copy">@abarnert Mac OSX.</span>
<span class="comment-copy">@Barmar No, he's probably on a 64-bit platform, but using 32-bit file APIs.</span>
<span class="comment-copy">Thank you very much. I appreciate your clear answer. How can I specify <code>num_to_read </code> in your code? This is very important to me as I don't want to read all the file, just portion of it</span>
