<div class="post-text" itemprop="text">
<p>Can someone give me an example of why the "send" function associated with Python generator function exists? I fully understand the yield function. However, the send function is confusing to me. The documentation on this method is convoluted: </p>
<pre><code>generator.send(value)
</code></pre>
<blockquote>
<p>Resumes the execution and “sends” a value into the generator function. The value argument becomes    the result of the current yield expression. The send() method returns the next value yielded by the generator, or raises StopIteration if the generator exits without yielding another value.</p>
</blockquote>
<p>What does that mean? I thought value was the input to the function? The phrase "The send() method returns the next value yielded by the generator" seems to be also the exact purpose of the yield function; yield returns the next value yielded by the generator...</p>
<p>Can someone give me an example of a generator utilizing send that accomplishes something yield cannot? </p>
</div>
<div class="post-text" itemprop="text">
<p>It's used to send values into a generator that just yielded. Here is an artificial (non-useful) explanatory example:</p>
<pre><code>&gt;&gt;&gt; def double_inputs():
...     while True:
...         x = yield
...         yield x * 2
...
&gt;&gt;&gt; gen = double_inputs()
&gt;&gt;&gt; next(gen)       # run up to the first yield
&gt;&gt;&gt; gen.send(10)    # goes into 'x' variable
20
&gt;&gt;&gt; next(gen)       # run up to the next yield
&gt;&gt;&gt; gen.send(6)     # goes into 'x' again
12
&gt;&gt;&gt; next(gen)       # run up to the next yield
&gt;&gt;&gt; gen.send(94.3)  # goes into 'x' again
188.5999999999999
</code></pre>
<p>You can't do this just with <code>yield</code>.</p>
<p>As to why it's useful, one of the best use cases I've seen is Twisted's <code>@defer.inlineCallbacks</code>. Essentially it allows you to write a function like this:</p>
<pre><code>@defer.inlineCallbacks
def doStuff():
    result = yield takesTwoSeconds()
    nextResult = yield takesTenSeconds(result * 10)
    defer.returnValue(nextResult / 10)
</code></pre>
<p>What happens is that <code>takesTwoSeconds()</code> returns a <code>Deferred</code>, which is a value promising a value will be computed later. Twisted can run the computation in another thread. When the computation is done, it passes it into the deferred, and the value then gets sent back to the <code>doStuff()</code> function. Thus the <code>doStuff()</code> can end up looking more or less like a normal procedural function, except it can be doing all sorts of computations &amp; callbacks etc. The alternative before this functionality would be to do something like:</p>
<pre><code>def doStuff():
    returnDeferred = defer.Deferred()
    def gotNextResult(nextResult):
        returnDeferred.callback(nextResult / 10)
    def gotResult(result):
        takesTenSeconds(result * 10).addCallback(gotNextResult)
    takesTwoSeconds().addCallback(gotResult)
    return returnDeferred
</code></pre>
<p>It's a lot more convoluted and unwieldy.</p>
</div>
<div class="post-text" itemprop="text">
<p>This function is to write coroutines</p>
<pre><code>def coroutine():
    for i in range(1, 10):
        print("From generator {}".format((yield i)))
c = coroutine()
c.send(None)
try:
    while True:
        print("From user {}".format(c.send(1)))
except StopIteration: pass
</code></pre>
<p>prints</p>
<pre><code>From generator 1
From user 2
From generator 1
From user 3
From generator 1
From user 4
...
</code></pre>
<p>See how the control is being passed back and forth? Those are coroutines. They can be used for all kinds of cool things like asynch IO and similar.</p>
<p>Think of it like this, with a generator and no send, it's a one way street</p>
<pre><code>==========       yield      ========
Generator |   ------------&gt; | User |
==========                  ========
</code></pre>
<p>But with send, it becomes a two way street</p>
<pre><code>==========       yield       ========
Generator |   ------------&gt;  | User |
==========    &lt;------------  ========
                  send
</code></pre>
<p>Which opens up the door to the user customizing the generators behavior <em>on the fly</em> and the generator responding to the user.</p>
</div>
<div class="post-text" itemprop="text">
<p>This may help someone. Here is a generator that is unaffected by send function. It takes in the number parameter on instantiation and is unaffected by send:</p>
<pre><code>&gt;&gt;&gt; def double_number(number):
...     while True:
...         number *=2 
...         yield number
... 
&gt;&gt;&gt; c = double_number(4)
&gt;&gt;&gt; c.send(None)
8
&gt;&gt;&gt; c.next()
16
&gt;&gt;&gt; c.next()
32
&gt;&gt;&gt; c.send(8)
64
&gt;&gt;&gt; c.send(8)
128
&gt;&gt;&gt; c.send(8)
256
</code></pre>
<p>Now here is how you would do the same type of function using send, so on each iteration you can change the value of number:</p>
<pre><code>def double_number(number):
    while True:
        number *= 2
        number = yield number
</code></pre>
<p>Here is what that looks like, as you can see sending a new value for number changes the outcome:</p>
<pre><code>&gt;&gt;&gt; def double_number(number):
...     while True:
...         number *= 2
...         number = yield number
...
&gt;&gt;&gt; c = double_number(4)
&gt;&gt;&gt; 
&gt;&gt;&gt; c.send(None)
8
&gt;&gt;&gt; c.send(5) #10
10
&gt;&gt;&gt; c.send(1500) #3000
3000
&gt;&gt;&gt; c.send(3) #6
6
</code></pre>
<p>You can also put this in a for loop as such:</p>
<pre><code>for x in range(10):
    n = c.send(n)
    print n
</code></pre>
<p>For more help check out this <a href="http://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/">great tutorial</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>send</code> method implements <a href="http://en.wikipedia.org/wiki/Coroutine">coroutines</a>.</p>
<p>If you haven't encountered Coroutines they are tricky to wrap your head around because they change the way a program flows. You can read a <a href="http://dabeaz.com/coroutines/">good tutorial</a> for more details.</p>
</div>
<div class="post-text" itemprop="text">
<h1>Some use cases for using generator and <code>send()</code></h1>
<p>Generators with <code>send()</code> allow:</p>
<ul>
<li>remembering internal state of the execution

<ul>
<li>what step we are at</li>
<li>what is current status of our data</li>
</ul></li>
<li>returning sequence of values</li>
<li>receiving sequence of inputs</li>
</ul>
<p>Here are some use cases:</p>
<h2>Watched attempt to follow a recipe</h2>
<p>Let us have a recipe, which expects predefined set of inputs in some order.</p>
<p>We may:</p>
<ul>
<li>create a <code>watched_attempt</code> instance from the recipe</li>
<li>let it get some inputs</li>
<li>with each input return information about what is currently in the pot</li>
<li><p>with each input check, that the input is the expected one (and fail if it is not)</p>
<pre><code>def recipe():
    pot = []
    action = yield pot
    assert action == ("add", "water")
    pot.append(action[1])

    action = yield pot
    assert action == ("add", "salt")
    pot.append(action[1])

    action = yield pot
    assert action == ("boil", "water")

    action = yield pot
    assert action == ("add", "pasta")
    pot.append(action[1])

    action = yield pot
    assert action == ("decant", "water")
    pot.remove("water")

    action = yield pot
    assert action == ("serve")
    pot = []
    yield pot
</code></pre></li>
</ul>
<p>To use it, first create the <code>watched_attempt</code> instance:</p>
<pre><code>&gt;&gt;&gt; watched_attempt = recipe()                                                                         
&gt;&gt;&gt; watched_attempt.next()                                                                                     
[]                                                                                                     
</code></pre>
<p>The call to <code>.next()</code> is necessary to start execution of the generator.</p>
<p>Returned value shows, our pot is currently empty.</p>
<p>Now do few actions following what the recipe expects:</p>
<pre><code>&gt;&gt;&gt; watched_attempt.send(("add", "water"))                                                                     
['water']                                                                                              
&gt;&gt;&gt; watched_attempt.send(("add", "salt"))                                                                      
['water', 'salt']                                                                                      
&gt;&gt;&gt; watched_attempt.send(("boil", "water"))                                                                    
['water', 'salt']                                                                                      
&gt;&gt;&gt; watched_attempt.send(("add", "pasta"))                                                                     
['water', 'salt', 'pasta']                                                                             
&gt;&gt;&gt; watched_attempt.send(("decant", "water"))                                                                  
['salt', 'pasta']                                                                                      
&gt;&gt;&gt; watched_attempt.send(("serve"))                                                                            
[] 
</code></pre>
<p>As we see, the pot is finally empty.</p>
<p>In case, one would not follow the recipe, it would fail (what could be desired outcome of watched
attempt to cook something - just learning we did not pay enough attention when given instructions.</p>
<pre><code>&gt;&gt;&gt; watched_attempt = running.recipe()                                                                         
&gt;&gt;&gt; watched_attempt.next()                                                                                     
[]                                                                                                     
&gt;&gt;&gt; watched_attempt.send(("add", "water"))                                                                     
['water']                                                                                              
&gt;&gt;&gt; watched_attempt.send(("add", "pasta")) 

---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
&lt;ipython-input-21-facdf014fe8e&gt; in &lt;module&gt;()
----&gt; 1 watched_attempt.send(("add", "pasta"))

/home/javl/sandbox/stack/send/running.py in recipe()
     29
     30     action = yield pot
---&gt; 31     assert action == ("add", "salt")
     32     pot.append(action[1])
     33

AssertionError:
</code></pre>
<p>Notice, that:</p>
<ul>
<li>there is linear sequence of expected steps</li>
<li>the steps may differ (some are removing, some are adding to the pot)</li>
<li>we manage to do all that by a functions/generator - no need to use complex class or similar
strutures.</li>
</ul>
<h2>Running totals</h2>
<p>We may use the generator to keep track of running total of values sent to it.</p>
<p>Any time we add a number, count of inputs and total sum is returned (valid for
the moment previous input was send into it).</p>
<pre><code>from collections import namedtuple

RunningTotal = namedtuple("RunningTotal", ["n", "total"])


def runningtotals(n=0, total=0):
    while True:
        delta = yield RunningTotal(n, total)
        if delta:
            n += 1
            total += delta


if __name__ == "__main__":
    nums = [9, 8, None, 3, 4, 2, 1]

    bookeeper = runningtotals()
    print bookeeper.next()
    for num in nums:
        print num, bookeeper.send(num)
</code></pre>
<p>The output would look like:</p>
<pre><code>RunningTotal(n=0, total=0)
9 RunningTotal(n=1, total=9)
8 RunningTotal(n=2, total=17)
None RunningTotal(n=2, total=17)
3 RunningTotal(n=3, total=20)
4 RunningTotal(n=4, total=24)
2 RunningTotal(n=5, total=26)
1 RunningTotal(n=6, total=27)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>The <code>send()</code> method controls what the value to the left of the yield expression will be.</strong></p>
<p>To understand how yield differs and what value it holds, lets first quickly refresh on the order python code is evaluated.</p>
<p><em><a href="https://docs.python.org/3/reference/expressions.html#evaluation-order" rel="noreferrer">Section 6.15 Evaluation order</a></em></p>
<blockquote>
<p>Python evaluates expressions from left to right. Notice that while evaluating an assignment, the right-hand side is evaluated before the left-hand side.</p>
</blockquote>
<p>So an expression <code>a = b</code> the right hand side is evaluated first.</p>
<p>As the following demonstrates that <code>a[p('left')] = p('right')</code> the right hand side is evaluated first.</p>
<pre><code>&gt;&gt;&gt; def p(side):
...     print(side)
...     return 0
... 
&gt;&gt;&gt; a[p('left')] = p('right')
right
left
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; [p('left'), p('right')]
left
right
[0, 0]
</code></pre>
<p>What does yield do?, yield, suspends execution of the function and returns to the caller, and resumes execution at the same place it left off prior to suspending.</p>
<p>Where exactly is execution suspended? You might have guessed it already...
the <strong>execution is suspended between the right and left side of the yield expression.</strong> So <strong><code>new_val = yield old_val</code></strong> the execution is halted at the <code>=</code> sign, and the value on the right (which is before suspending, and is also the value returned to the caller) may be something different then the value on the left (which is the value being assigned after resuming execution). </p>
<p><code>yield</code> yields 2 values, one to the right and another to the left.</p>
<p><strong>How do you control the value to the left hand side of the yield expression? via the <code>.send()</code> method.</strong></p>
<p><a href="https://docs.python.org/3/reference/expressions.html#yield-expressions" rel="noreferrer">6.2.9. Yield expressions</a></p>
<blockquote>
<p>The value of the yield expression after resuming depends on the method which resumed the execution. If <code>__next__()</code> is used (typically via either a for or the <code>next()</code> builtin) then the result is None. Otherwise, if <code>send()</code> is used, then the result will be the value passed in to that method.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>These confused me too.  Here is an example I made when trying to set up a generator which yields and accepts signals in alternating order (yield, accept, yield, accept)...</p>
<pre><code>def echo_sound():

    thing_to_say = '&lt;Sound of wind on cliffs&gt;'
    while True:
        thing_to_say = (yield thing_to_say)
        thing_to_say = '...'.join([thing_to_say]+[thing_to_say[-6:]]*2)
        yield None  # This is the return value of send.

gen = echo_sound()

print 'You are lost in the wilderness, calling for help.'

print '------'
in_message = gen.next()
print 'You hear: "{}"'.format(in_message)
out_message = 'Hello!'
print 'You yell "{}"'.format(out_message)
gen.send(out_message)

print '------'
in_message = gen.next()
print 'You hear: "{}"'.format(in_message)
out_message = 'Is anybody out there?'
print 'You yell "{}"'.format(out_message)
gen.send(out_message)

print '------'
in_message = gen.next()
print 'You hear: "{}"'.format(in_message)
out_message = 'Help!'
print 'You yell "{}"'.format(out_message)
gen.send(out_message)
</code></pre>
<p>The output is:</p>
<pre><code>You are lost in the wilderness, calling for help.
------
You hear: "&lt;Sound of wind on cliffs&gt;"
You yell "Hello!"
------
You hear: "Hello!...Hello!...Hello!"
You yell "Is anybody out there?"
------
You hear: "Is anybody out there?...there?...there?"
You yell "Help!"
</code></pre>
</div>
<span class="comment-copy">duplicate:<a href="http://stackoverflow.com/questions/12637768/python-3-send-method-of-generators" title="python 3 send method of generators">stackoverflow.com/questions/12637768/…</a></span>
<span class="comment-copy">Added another real life example (reading from FTP) when <a href="http://stackoverflow.com/a/36946209/346478">callbacks are turned into generator used from inside</a></span>
<span class="comment-copy">Can you explain what the purpose of this is? Why can this not be re-created with double_inputs(startingnumber) and yield?</span>
<span class="comment-copy">@Tommy: oh because the values you got has nothing to do with the previous one. let me change the example</span>
<span class="comment-copy">why would you use this then over a simple function that doubles its input??</span>
<span class="comment-copy">@Tommy: You wouldn't. The first example is just to explain what it does. The second example is for an actually useful use case.</span>
<span class="comment-copy">@Tommy: I would say if you really wanna know check out <a href="http://www.dabeaz.com/coroutines/index.html" rel="nofollow noreferrer">this presentation</a> and work through it all. A short answer won't suffice because then you'll just say "But can't I just do it like this?" etc.</span>
<span class="comment-copy">but a generator function can take parameters. How does "Send" go beyond sending a parameter to the generator?</span>
<span class="comment-copy">@Tommy Because you can't change the parameters to a generator as it runs. You give it parameters, it runs, done. With send, you give it parameters, it runs for a bit, you send it a value and it does something different, repeat</span>
<span class="comment-copy">@Tommy This will restart the generator, which will cause you to redo lots of work</span>
<span class="comment-copy">Could you please explain the purpose of sending a None before everything?</span>
<span class="comment-copy">@ShubhamAggarwal It is done to 'start' the generator. It is just something that needs to be done. It makes some sense when you think about it since the first time you call <code>send()</code> the generator has not reached the keyword <code>yield</code> yet.</span>
<span class="comment-copy">This comparison between a function that doesn't get affected by send() with one which does, really helped. Thanks!</span>
