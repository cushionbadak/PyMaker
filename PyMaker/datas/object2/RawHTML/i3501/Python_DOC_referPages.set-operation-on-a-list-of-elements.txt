<div class="post-text" itemprop="text">
<p>I have a list containing thousands of sets similar to this: </p>
<pre><code>set_list = [a, b, c, d]
</code></pre>
<p>each set in the list look something like this: </p>
<pre><code>a = set([1, 2, 3, 4, 5])
b = set([4, 5, 6, 7, 7, 9])
c = set([1, 2, 6, 8, 10, 12, 45])
d = set([11, 3, 23, 3, 4, 44])
</code></pre>
<p>I would like to do the set operation: X-(YUZUAUB......etc) for every set in the list, for example, this would look something like this: 
after applying this operation on all elements in <code>set_list</code> the new elements look like this: </p>
<pre><code>a = a.difference(b.union(c, d))
b = b.difference(c.union(a, d))
c = c.difference(d.union(b, a))
d = d.difference(a.union(c, b))
</code></pre>
<p>how do i accomplish this?</p>
</div>
<div class="post-text" itemprop="text">
<p>One possibility is to make use of the <a href="https://pypi.org/project/multiset/" rel="nofollow noreferrer"><code>multiset</code> module</a> to precompute the multiset union of all elements in <code>set_list</code>, like so:</p>
<pre><code>from multiset import Multiset
union = sum(set_list, Multiset())
set_list = [s - (union - s) for s in set_list]
</code></pre>
<p>Here, <code>union - s</code> computes the <code>Y ∪ Z ∪ A ∪ B...</code> in your notation.</p>
<p>See <a href="https://stackoverflow.com/a/51001954/367273">Aran-Fey's answer</a> for the same method implemented (more verbosely) using only the standard library.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I'm understanding correctly, you want the difference for each set and the union of the rest of the sets. I would use a loop and <code>functools.reduce</code> and <code>operator.or_</code>:</p>
<p><strong>Setup</strong></p>
<pre><code>import functools
import operator

a = set([1, 2, 3, 4, 5])
b = set([4, 5, 6, 7, 7, 9])
c = set([1, 2, 6, 8, 10, 12, 45])
d = set([11, 3, 23, 3, 4, 44])
set_list = [a, b, c, d]
</code></pre>
<p><strong>Loop and save results</strong></p>
<pre><code># I don't know what you want to do with the results so
# I'll save them in a list...
results = [] 
for i in set_list:
    list_copy = list(set_list)
    list_copy.remove(i)
    r = i - functools.reduce(operator.or_, list_copy)
    results.append(r)

print(results)
# prints [set(), {9, 7}, {8, 10, 12, 45}, {11, 44, 23}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a re-implementation of <a href="https://stackoverflow.com/a/51001787/1222951">NPE's answer</a> using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> from the standard library:</p>
<pre><code>from collections import Counter

def mutual_difference(set_list):
    # create a multiset out of the union of all sets
    union = Counter()
    for s in set_list:
        union.update(s)

    new_set_list = []
    for s in set_list:
        # subtract s from the union and discard 0-count elements
        union.subtract(s)
        union += {}

        # take the difference
        new_set_list.append(s.difference(union))

        # add s to the union again
        union.update(s)

    return new_set_list
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; mutual_difference([{1,2}, {2,3}, {1,4,5}])
[set(), {3}, {4, 5}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>[value - {item for subset in set_list[0:index] + set_list[index + 1:] for item in subset} for index, value in enumerate(set_list)]
</code></pre>
<p>which means:</p>
<pre><code>result = []
for index, value in enumerate(set_list):
    union = {
        item
        for subset in set_list[0:index] + set_list[index + 1:]
        for item in subset
    }
    result.append(value - union)

print(result)
</code></pre>
<p>Outputs:</p>
<pre><code>[set(), {9, 7}, {8, 10, 12, 45}, {11, 44, 23}]
</code></pre>
</div>
<span class="comment-copy">Your "set operation" is not clear. Are those <code>U</code>s meant to be union operators? What are <code>X</code> and <code>Y</code> and <code>Z</code>?</span>
<span class="comment-copy">yes U: union and X,Y,A,B etc represent  elements of the list</span>
<span class="comment-copy">@ultron : I'm curious, why is this the accepted answer? Is it because is the fastest one dealing with  large data or just because it's been the first one to be posted? Haven't measured performance but my answer isn't using any library at all... Trying to understand the reasons here</span>
