<div class="post-text" itemprop="text">
<p>I know there are a lot of other discussions that answer this same question, but I haven't been able to figure out why I am getting this error. The code I have is trying to add a new name(the key) and telephone number(value) to a .txt file. The first part of inserting the new information into the text file works, but this error shows up whenever it reaches the find portion.
Here's the code:</p>
<pre><code>def add(filename, key, value):
    f = open("numbers.txt", 'a')
    f.write(key + ',' + value + '\n')
    print("Please enter your name (first name or full name)")
gig = input()
gig = str(gig)
print("Please enter your phone number(xxx-xxx-xxxx)")
jj = input()
jj = str(jj)
add("numbers.txt", gig, jj)

def find(filename, key):
    f = open('numbers.txt', 'r')
    for row in f:
        key, value = row.split(',', 1)
        if gig == key:
            return value[:-1]
find("numbers.txt", gig)     
</code></pre>
<p>and here's the .txt file:</p>
<p>John Johnson,123-456-6789<br/>
Jack Jackson,234-567-8989<br/>
John Green,999-999-9999</p>
<p>The error code that shows up is:
<code>
Traceback (most recent call last):
  File "C:/Python34/#.py", line 18, in &lt;module&gt;
    find("numbers.txt", gig)
  File "C:/Python34/#.py", line 15, in find
    key, value = row.split(',', 1)
ValueError: need more than 1 value to unpack</code></p>
</div>
<div class="post-text" itemprop="text">
<p>This doesn't reproduce with the example file you gave, but… the problem is here:</p>
<pre><code>key, value = row.split(',', 1)
</code></pre>
<p>You're calling <code>split</code> with a <a href="https://docs.python.org/3/library/stdtypes.html#str.rsplit" rel="nofollow noreferrer"><code>maxsplit</code></a> value of <code>1</code>. This makes sure you get <em>at most</em> two strings back. But you can still get only <em>one</em> string back, if the <code>row</code> doesn't have any commas in it.</p>
<p>One way this can happen is if the file has a blank line in it:</p>
<pre><code>&gt;&gt;&gt; row = '\n'
&gt;&gt;&gt; row.split(',', 1)
['\n']
&gt;&gt;&gt; key, value = row.split(',',1)
ValueError: not enough values to unpack (expected 2, got 1)
</code></pre>
<p>It should be pretty obvious why I got that exception, right? That's exactly what's happening in your code.</p>
<p>Your current code doesn't create any blank lines, but maybe you accidentally added one in a text editor, or an older version of your code wrote extra <code>\n</code> values or something.</p>
<hr/>
<p>One way to handle this is with a <code>try</code>:</p>
<pre><code>def find(filename, key):
    f = open('numbers.txt', 'r')
    for row in f:
        try:
            key, value = row.split(',', 1)
        except ValueError as ex:
            print(f'WARNING: exception parsing line {row!r}: {ex!r}')
            continue
        if gig == key:
            return value[:-1]
</code></pre>
<p>Notice that I'm actually printing out the line that fails there. That's always better than trying to guess what might have gone wrong.</p>
<hr/>
<p>Or, if blank lines are OK according to your design, you can skip over them without a warning:</p>
<pre><code>def find(filename, key):
    f = open('numbers.txt', 'r')
    for row in f:
        if not row.strip():
            continue
        key, value = row.split(',', 1)
        if gig == key:
            return value[:-1]
</code></pre>
</div>
<span class="comment-copy">Please show the full exception, not just the description part of it. That tells us exactly which line was wrong, and sometimes even more than that. Without that, we have to either run your program, or try to guess.</span>
<span class="comment-copy">Anyway, as a guess, the problem is <code>key, value = row.split(',', 1)</code>. For example, if there's an empty line at the end of the file, what does <code>row.split(',', 1)</code> return for that? A single empty string, not two strings. So when you try to unpack that into two variables, it raises a <code>ValueError</code> for trying to unpack one value into two variables..</span>
<span class="comment-copy">Also, you have another bug in your code: your <code>find</code> function takes a <code>key</code> parameter. But you then hide that by doing <code>key, value = …</code>. And then you compare that <code>key</code> to <code>gig</code>, which only sort of works because you happen to have a global variable named <code>gig</code>, which happens to have the name of the last person you added.</span>
<span class="comment-copy">Also in <code>find</code> you try to iterate through a file!?...</span>
<span class="comment-copy">@ArtemisFowl Iterating through a file is fine in Python. In fact, it's the standard way to read text files line by line.</span>
<span class="comment-copy">Thanks. The code using <code>try</code> works nicely.</span>
