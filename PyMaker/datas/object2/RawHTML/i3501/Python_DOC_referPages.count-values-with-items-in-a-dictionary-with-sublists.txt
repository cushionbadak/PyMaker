<div class="post-text" itemprop="text">
<p>I'n being warned that this question has been frequently downvoted, but I haven't seen a solution for my particular problem. </p>
<p>I have a dictionary that looks like this:</p>
<pre><code>d = {'a': [['I', 'said', 'that'], ['said', 'I']], 
    'b':[['she', 'is'], ['he', 'was']]}
</code></pre>
<p>I would like for the output to be a dictionary with the original keys and then a dictionary containing a value that indicates the count for each of the words (e.g., <code>{'a':{'I':2, 'said':2, 'that':1}</code> and so on with b.  </p>
<p>If the values were in a list instead of a sublist, I could get what I wanted just by using <code>Counter</code>: </p>
<pre><code>d2 = {'a': ['I','said','that', 'I'],'b': ['she','was','here']}
from collections import Counter
counts = {k: Counter(v) for k, v in d2.items()}
</code></pre>
<p>However, I'm getting <code>TypeError: unhashable type: 'list'</code> because the lists containing the values I want to count are sublists and the list that contains them isn't hashable.  </p>
<p>I also know that if I just had sublists, I could get what I want with something like: </p>
<pre><code>lst = [['I', 'said', 'that'], ['said', 'I']]
Counter(word for sublist in lst for word in sublist)
</code></pre>
<p>But I just can't figure out how to combine these ideas to solve my problem (and I guess it lies in combining these two). </p>
<p>I did try this</p>
<pre><code>for key, values in d.items():
    flat_list = [item for sublist in values for item in sublist]
    new_dict = {key: flat_list}
    counts = {k: Counter(v) for k, v in new_dict.items()}
</code></pre>
<p>But that only gives me the counts for the second list (because the flat_list itself only returns the value for the second key. </p>
</div>
<div class="post-text" itemprop="text">
<p>To combine the two solutions, just replace <code>Counter(v)</code> from your first solution with the second solution.</p>
<pre><code>from collections import Counter

d = {'a': [['I', 'said', 'that'], ['said', 'I']],
     'b': [['she', 'is'], ['he', 'was']]}


counts = {k: Counter(word
                     for sublist in lst
                     for word in sublist)
          for k, lst in d.items()}

print(counts)
</code></pre>
<p>Output:</p>
<pre><code>{'a': Counter({'I': 2, 'said': 2, 'that': 1}),
 'b': Counter({'she': 1, 'is': 1, 'he': 1, 'was': 1})}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can merge your sublists to get your d2: <code>d2 = {k: reduce(list.__add__, d[k], []) for k in d}</code>.</p>
<p>In python3, you will need to <code>from functools import reduce</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Use both <code>itertools</code> and <code>collections</code> modules for this. Flatten the nested lists with <a href="http://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a> and count with <a href="http://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a></p>
<pre><code>import itertools, collections
d = {
         'a': [['I', 'said', 'that'], ['said', 'I']],
         'b':[['she', 'is'], ['he', 'was']]
    }
out_dict = {}
for d_key, data in d.items():    
    counter = collections.Counter(itertools.chain(*data))
    out_dict[d_key] = counter
print out_dict
</code></pre>
<p>Output:</p>
<pre><code>{'a': Counter({'I': 2, 'said': 2, 'that': 1}),
 'b': Counter({'she': 1, 'is': 1, 'he': 1, 'was': 1})}
</code></pre>
</div>
<span class="comment-copy">Can you have sublists or will it be only <code>lists</code></span>
<span class="comment-copy">It wouldn't be lists. The values for the keys would be dictionaries.</span>
<span class="comment-copy">Hi, Thanks. That's what I was looking for.</span>
<span class="comment-copy">It's always good to to actually paste the output of your <code>print</code> statement when you use it.</span>
