<div class="post-text" itemprop="text">
<p>In this <a href="https://stackoverflow.com/questions/41564930/python-how-to-not-wait-for-a-thread-to-finish-to-carry-on">question</a>, he actually asked something like what I want. Except that the answer was to remove the parentheses. However if I remove the parentheses, then I'll not be able to pass arguments for my functions.</p>
<p>How can I do the following simple code without waiting:</p>
<pre><code>from time import sleep
import threading

def whatever(i):
  sleep(5)
  print("Hey! It's me number " + str(i))

for i in range(3):
  t = threading.Thread(target=whatever(i))
  t.start()
</code></pre>
<p>Desired output would be </p>
<pre><code>Hey! It's me number 0
Hey! It's me number 1
Hey! It's me number 2
</code></pre>
<p><strong>All printed at the same time</strong></p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/threading.html#threading.Thread" rel="nofollow noreferrer">From the documentation</a>, <code>target</code> should be a callable:</p>
<blockquote>
<p>target is the callable object to be invoked by the run() method</p>
</blockquote>
<p>You are not passing your function to <code>target</code>, you are passing the return value of your function, so the function runs as soon as you pass it to <code>threading.Thread</code>, not when you call <code>t.start()</code>.</p>
<p>You should be using the <code>args</code> parameter to specify arguments to your callable.</p>
<p>Simply change this line:</p>
<pre><code> t = threading.Thread(target=whatever(i))
</code></pre>
<p>to</p>
<pre><code>t = threading.Thread(target=whatever, args=(i,))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you seem to not realize what this line does: <code>t = threading.Thread(target=whatever(i))</code> , removing the parenthesis is not simply to not wait for the thread to finish its so you can actually <strong>start</strong> the function in a seperate thread: </p>
<p><code>target</code> should be the function object itself, but when you do <code>t = threading.Thread(target=whatever(1))</code> , the <code>target</code> will be the return value of <code>whatever</code> that you already ran in your original thread, you need to give <code>threading</code> the function itself then specify the parameters seperately and it will call it for you like this:</p>
<pre><code>from time import sleep
import threading

def whatever(i):
  sleep(5)
  print("Hey! It's me number " + str(i))

for i in range(3):
  t = threading.Thread(target=whatever, args=(i,))
  t.start()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from time import sleep
import threading

def whatever(i):
  print("Hey! It's me number " + str(i))

for i in range(3):
  t = threading.Thread(target=whatever, args=(i,))
  t.start()
</code></pre>
<p>You have to consider one thing though.</p>
<p>In Python we have something called GIL - Global Interpreter Lock. It's something that, in short, makes it possible for only one thread of your python application, to execute in a given interpreter at once. What does it mean?</p>
<p>That it's not quite that easy do achieve true concurrency in Python - while it may seem like the instructions are being executed simultaneously because of the super quick CPUs we have today, they are, in fact, not.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just wrap it into a lambda.</p>
<pre><code>from time import sleep
import threading

def whatever(i):
  sleep(5)
  print("Hey! It's me number " + str(i))

for i in range(3):
  t = threading.Thread(target=lambda: whatever(i))
  t.start()
</code></pre>
</div>
<span class="comment-copy">You must have reasons?</span>
