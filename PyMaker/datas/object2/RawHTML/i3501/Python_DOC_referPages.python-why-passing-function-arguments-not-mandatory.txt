<div class="post-text" itemprop="text">
<p>It seems to me that it is not mandatory to pass the variables you want to use inside a function to that function in python.  </p>
<p><strong>This code:</strong></p>
<pre><code>def functionWithoutArgs():
    print(theList)
    theList.append('asdf')
    print(theList)
    theNewList = theList + ['qwer']
    print(theNewList)
    return theNewList

theList = ['this', 'is', 'a', 'list']
theLastList = functionWithoutArgs()
print(theLastList)
</code></pre>
<p>gives me this output (without errors or warnings):</p>
<pre><code>['this', 'is', 'a', 'list']
['this', 'is', 'a', 'list', 'asdf']
['this', 'is', 'a', 'list', 'asdf', 'qwer']
['this', 'is', 'a', 'list', 'asdf', 'qwer']
</code></pre>
<p>I was surprised that no exceptions were raised. This because (it seems to me that) allowing functions to use variables that have not been passed to them obfuscates how that function interacts with other code pretty severely.<br/>
As far as I understand the whole point of functions is to break programs into small parts that have their interaction with the rest of the code clearly defined.</p>
<p><strong>Question</strong>:<br/>
Why does python allow using variables inside a function that has not been passed to that function?</p>
<p><strong>Additional info:</strong><br/>
The reason for the excess code in the example is this thread
<a href="https://stackoverflow.com/questions/28379373/use-a-variable-in-a-function-without-passing-as-an-argument">Use a Variable in a Function Without Passing as an Argument</a>
where the accepted answer claims that using unpassed variables is only allowed when the called function does not modify or rename the variable (as I understood at least), which the above code counterexamples.</p>
<p>I understand that this question is borderline subjective or opinion based as it is a "Why..." question, but I felt that this is so fundamental that there has to be some kind of consensus argument for this. In addition, it would be useful knowledge for many new python programmers.</p>
</div>
<div class="post-text" itemprop="text">
<p>A complete answer would require an in depth explanation of how the whole language works, and this is already documented - <a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer">the official doc  about scoping and namespaces</a> being probably the best starting point here.</p>
<p>To make a long story short, in Python everything is an object - including functions, classes and modules - and there's no distinct namespace for functions, modules and classes. IOW, in the following code:</p>
<pre><code>FOO_FACTOR = 2

def foo(arg):
    return bar(arg) * FOO_FACTOR

def bar(arg):
    return arg + 3
</code></pre>
<p>in <code>foo</code>, <code>bar</code> is actually a global variable just like <code>FOO_FACTOR</code> is. If functions were not allowed to access names in the global scope, you would have to explicitely pass <code>bar</code> and <code>FOO_FACTOR</code>, and if you needed a special declaration to access a global var you'd have to write a lot of boilerplate code each time a function uses another function, class or module, which would be quite impractical to say the least. </p>
<blockquote>
<p>allowing functions to use variables that have not been passed to them
  obfuscates how that function interacts with other code pretty
  severely.</p>
</blockquote>
<p>Well, rebinding (or even just mutating) non-local names can indeed cause quite a lot of problems - wrt/ readability (ability to reason about the code), testability etc, but also wrt/ concurrency and <a href="https://en.wikipedia.org/wiki/Reentrancy_(computing)" rel="nofollow noreferrer">reentrancy</a>, and should be avoided as much as possible.</p>
<p>BUT from a practical POV, you can hardly avoid having <em>at least</em> "read-only" globals (symbolic constants, other functions, classes, modules etc), and sometimes you also need at least a couple functions that will indeed mutate / rebind global names (think about application settings for example) - the point here being that those functions should only be called at application startup to define your symbolic constants etc. </p>
</div>
<div class="post-text" itemprop="text">
<p>This practice is using "shadowing name" defined outside the scope and in general <a href="https://stackoverflow.com/questions/20125172/how-bad-is-shadowing-names-defined-in-outer-scopes">this is a very bad practice</a>. Many IDEs and code inspection tools will report an error or a warning here.</p>
<p>Actually, many if not all dynamically typed languages allow this behavior. IMO, this is because, when writing functions, we want to be able to write the functions in any order we like. For a language like C that separates declaration and definition we can ensure that everything is declared in the definition part.</p>
<p>However, for python, which does not declare a type for names, it is a different story. If we do not allow names from outside scope and we suddenly cannot have mutual recursion and many programming constructs! </p>
</div>
<span class="comment-copy">"... does not modify ... the variable". I think you've misunderstood the linked answer. Lists are mutable so altering them does not cause them to be re-bound to a name, it's still the same object. If you tried to increment a global integer (immutable), without <code>global</code>, then it will throw an error.</span>
<span class="comment-copy">The point of global variables is they are accessible (almost) everywhere in the module scope, this is sometimes useful and not a unique feature of Python, for example R is similar</span>
<span class="comment-copy">Global variables are a widely used construct. In your case one is used without convincing need.  I find the expectation somewhat debatable, that this should be detected by the Python interpreter (or any other dynamic language). For that kind of strictness other languages are better suited.</span>
<span class="comment-copy">You may want to re-read <a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer">Python Scopes and Namespaces</a> for more background.</span>
<span class="comment-copy">"Actually, many if not all dynamically typed languages allow this behavior" =&gt; this has very few to do with typing - you can use global variables in C, C++, Pascal etc, actually in almost all procedural languages.</span>
<span class="comment-copy">But in those languages, if you use a variable/function in a function before declaring it, you will get an error/warning. (IMO, this is closer to the behavior that OP seeks) In a dynamically typed language, the interpreter does not need to know what the name actually is at function definition time.</span>
<span class="comment-copy">That's indeed how <i>I</i> understood your answer, but the way you wrote it is quite unclear and can be misleading for programming newbies, hence my comment.</span>
