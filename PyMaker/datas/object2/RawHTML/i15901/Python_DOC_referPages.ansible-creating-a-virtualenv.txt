<div class="post-text" itemprop="text">
<p>How do you create a virtualenv for a specific python version using ansible. Is there a command in the ansible standard library?</p>
<p>I would like something like:</p>
<pre><code>- virtualenv: dest=venv python_version:/usr/bin/python3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have at times experienced some erratic behaviour with specifying <code>virtualenv_command</code> (e.g.: getting a python 2.7 executable in my virtualenv even though I specified to run the command with <code>virtualenv-3.4</code>. </p>
<p>If you experience that problem, you <em>can</em> create the virtualenv manually with the <code>command</code> module:</p>
<pre><code>- name: Manually create the initial virtualenv
  command: virtualenv /user/home/venvs/myenv -p python3.4 creates="/user/home/venvs/myenv"
</code></pre>
<p>(note: by specifying <code>creates</code> this command will only run in the case that a virtualenv does not exist at <code>/user/home/venvs/myenv</code>).</p>
<p>Then you can install your requirements as normal with the <code>pip</code> command: </p>
<pre><code>- name: Install requirements
  pip: 
    requirements=/my_app/requirements.txt 
    virtualenv=/user/home/venvs/myenv
</code></pre>
<p><strong>Update</strong></p>
<p>I've found that specifying the <code>virtualenv_python</code> (available in Ansible 2.0+) also seems to work  in the case stated above. For example:</p>
<pre><code>- name: Install requirements
  pip: 
    requirements: /my_app/requirements.txt
    virtualenv: /user/home/venvs/myenv
    virtualenv_python: python3.4
</code></pre>
<p>(with this you shouldn't need to manually create the virtualenv first)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it with the <a href="http://docs.ansible.com/pip_module.html"><code>pip</code></a> module and a specific <code>virtualenv</code> binary:</p>
<pre><code>- pip: virtualenv=/path/to/venv virtualenv_command=/path/to/virtualenv3 ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With ansible 2.0 you can specify a python version for your virtualenv with <code>virtualenv_python</code></p>
<p>For example:</p>
<pre><code>- name: Initiate virtualenv
  pip: virtualenv="{{ virtualenv_dir }}" 
       virtualenv_python=python3.4
       requirements={{ app_dir }}/requirements.txt
</code></pre>
</div>
<span class="comment-copy">The last one worked for me (that way is mentioned in the docs of Ansible 2 now). Just one thing: I needed to specify <code>chdir</code> while installing <code>kallithea</code>, otherwise the current directory (which is referenced inside the <code>requirements.txt</code>) is wrong. Having <code>chdir=/my_app</code> might work here</span>
<span class="comment-copy">The last two <code>pip</code> tasks don't work if you need Python 3.x inside the virtualenv and your Ansible is using Python 2.x.  Because Ansible is using Python2, it generates a <code>pip2 install</code> command that bypasses the virtualenv and will use any system-level pip installation instead - hence the packages are installed at system level not into virtualenv.  For this setup with Python 3, I had to use shell commands for creating the virtualenv and pip installation.</span>
<span class="comment-copy">What did work was <code>shell: source "{{ app_home }}/.virtualenvs/myenv/bin/activate" &amp;&amp; pip3 install -r "{{ app_home }}/tests/requirements.txt"</code>.</span>
<span class="comment-copy">Please don't use <code>virtualenv</code> shell command with Python3. There it's called <code>pyvenv</code>.</span>
<span class="comment-copy">FYI, <code>pyvenv</code> has been deprecated since Python 3.6.0. It is now <code>python3 -m venv</code>: <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">docs.python.org/3/library/venv.html</a></span>
<span class="comment-copy">Doing this is asking for a name or requirements to be given. Do I need to set either of these options? Or is there a way to create an empty virtualenv</span>
<span class="comment-copy">@user204088 and why would you need an empty virtualenv? Ansible pip module nicely creates one for you if it doesn't exist, or use it if it does...</span>
<span class="comment-copy">You've probably figured this out already but it's asking for a name/requirements because pip needs to know what to install.  It can't be used as specified above solely for creating a virtual environment.  Instead, it creates the virtual environment in the course of installing the package(s) you specify.</span>
<span class="comment-copy">@Stefano you are absolutely correct. I think the other answers here are more complete.</span>
<span class="comment-copy">it was already possible in Ansible 1.* using <code>virtualenv_command</code> eg. <code>virtualenv_command: "python3.4 /path/to/virtualenv" </code></span>
