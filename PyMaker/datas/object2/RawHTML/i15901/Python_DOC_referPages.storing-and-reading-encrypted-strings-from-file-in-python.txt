<div class="post-text" itemprop="text">
<p>I'm using AES (from PyCrypto) to encrypt passwords and store it in a file. The format of the file is:</p>
<pre><code>user:username
key:&lt;encrypted key&gt;
</code></pre>
<p>And this is the method I used for encryption:</p>
<pre><code>BLOCK_SIZE = ..
PADDING = ..
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING

EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s)))
DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)
cipher = AES.new("abcdefgh12345678")

encrypted_key = EncodeAES(cipher, 'ABC123')
</code></pre>
<p>Now, how do I read the key from the file for decrypting it? If I use line.split(":"), wouldn't it cause problem if the encrypted key itself had ":" as a character?</p>
<p>Is there any way to avoid ":" while encrypting it? Or is there a better way for storing the keys? I cannot use hashing as I need the key for some other functionality. Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Now, how do I read the key from the file for decrypting it? If I use line.split(":"), wouldn't it cause problem if the encrypted key itself had ":" as a character?</p>
</blockquote>
<p>Of course it wouldâ€”that's why exactly <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow"><code>split</code></a> has a second, optional argument <code>max_split</code>:</p>
<pre><code>key, value = line.split(':', 1)
</code></pre>
<p>Alternatively, you can use <a href="https://docs.python.org/3.4/library/stdtypes.html#str.partition" rel="nofollow"><code>partition</code></a>:</p>
<pre><code>key, _, value = line.partition(':')
</code></pre>
<p>The difference between the two is what happens when there isn't a colon at all; the former will return one element, giving you a <code>ValueError</code> from trying to unpack it into two variables, while the latter will just give you an empty <code>value</code>.</p>
<hr/>
<p>However, it's worth noting that if you're using Base 64, <code>:</code> is never going to appear in the first place. The only character used by Base 64 are <code>A</code>-<code>Z</code>, <code>a</code>-<code>z</code>, <code>0</code>-<code>9</code>, <code>+</code>, and <code>/</code>. There are some Base 64 variants, and maybe one of them does use <code>:</code>, but the standard version, as applied by Python's <code>base64</code> module, does not.</p>
</div>
<div class="post-text" itemprop="text">
<p>Store the username in the first line and password in the second line, as the following</p>
<pre><code> username
 p4ssw0rd
</code></pre>
<p>This way you won't need to do this sort of things.</p>
<p>Although the best solution is to store these kind of things in the database.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can constrain how many splits are performed:</p>
<pre><code>&gt;&gt;&gt; line="key:foo:bar:baz"
&gt;&gt;&gt; line.split(":", 1)
['key', 'foo:bar:baz']
</code></pre>
<p>As long as you know the fieldname doesn't have a ':' in it, this should work fine.</p>
</div>
<span class="comment-copy">oh that's right. Sorry, I didn't realize that. Lack of sleep. Thanks.</span>
<span class="comment-copy">Thanks, but I need it to be in key:value format. I have multiple attributes for each user, and they can be in any order.</span>
<span class="comment-copy">Then I seriously suggest to use a real format. It's reaaallllyyyy easy with Python e.g. JSON. Much less code than parsing stuff manually.</span>
