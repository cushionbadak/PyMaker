<div class="post-text" itemprop="text">
<p>I am trying to run both Python and bash commands in a bash script.
In the bash script, I want to execute some bash commands enclosed by a Python loop:</p>
<pre><code>#!/bin/bash

python &lt;&lt; END
for i in range(1000):
    #executeâ€¬ some bash command such as echoing i
END
</code></pre>
<p>How can I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="noreferrer">subprocess</a>, e.g.:</p>
<pre><code>import subprocess
# ...

subprocess.call(["echo", i])
</code></pre>
<p>There is another function like <code>subprocess.call</code>: <code>subprocess.check_call</code>. It is exactly like call, just that it throws an exception if the command executed returned with a non-zero exit code. This is often feasible behaviour in scripts and utilities.</p>
<p><code>subprocess.check_output</code> behaves the same as <code>check_call</code>, but returns the standard output of the program.</p>
<hr/>
<p><strong>If you do not need shell features (such as variable expansion, wildcards, ...), never use shell=True</strong> (shell=False is the default). <em>If</em> you use shell=True then shell escaping is your job with these functions and they're a security hole if passed unvalidated user input.</p>
<p>The same is true of os.system() -- it is a frequent source of security issues. Don't use it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Look in to the <a href="https://docs.python.org/3/library/subprocess.html">subprocess</a> module. There is the Popen method and some wrapper functions like <code>call</code>.</p>
<ul>
<li><p>If you need to check the output (retrieve the result string):</p>
<pre><code>output = subprocess.check_output(args ....)
</code></pre></li>
<li><p>If you want to wait for execution to end before proceeding:</p>
<pre><code>exitcode = subprocess.call(args ....)
</code></pre></li>
<li><p>If you need more functionality like setting environment variables, use the underlying Popen constructor:</p>
<pre><code>subprocess.Popen(args ...)
</code></pre></li>
</ul>
<p>Remember subprocess is the higher level module. It should replace legacy functions from OS module.</p>
</div>
<div class="post-text" itemprop="text">
<p>I used this when running from my IDE (PyCharm).</p>
<pre><code>import subprocess

subprocess.check_call('mybashcommand', shell=True)
</code></pre>
</div>
<span class="comment-copy">Why is not recommendable to use import os?</span>
<span class="comment-copy">@LuisRamonRamirezRodriguez, <code>os.system()</code> provides less control than the <code>subprocess.Popen</code> interface -- most importantly, it provides no way to pass data out-of-band from code (or to provide a literal argv array), making it hard to avoid shell injection vulnerabilities.</span>
<span class="comment-copy">@dom0, <code>shell=True</code> is the wrong thing for your <code>subprocess.call(["echo", i], shell=True)</code> example: The shell script that's run is just <code>echo</code>, with no arguments, and the <code>i</code> is passed as an argument to the shell that the script doesn't refer to.</span>
<span class="comment-copy">I edited the answer so as to propose the secure way first.</span>
