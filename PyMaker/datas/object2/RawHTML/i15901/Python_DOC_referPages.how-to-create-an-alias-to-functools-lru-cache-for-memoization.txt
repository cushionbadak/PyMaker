<div class="post-text" itemprop="text">
<p>To add memoization to functions in Python, the <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow"><code>functools.lru_cache()</code></a> decorator can be used:</p>
<pre class="lang-python prettyprint-override"><code>import functools

@functools.lru_cache(maxsize=None)
def my_func():
    ...
</code></pre>
<p>However, I would like to define the following alias to the above use of <code>functools.lru_cache()</code> to make the code more readable:</p>
<pre class="lang-python prettyprint-override"><code>@memoize
def my_func():
    ...
</code></pre>
<p>My question is: how to define such an alias? The following piece of code doesn't work:</p>
<pre class="lang-python prettyprint-override"><code>memoize = functools.partial(functools.lru_cache, maxsize=None)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need the <code>functools.partial</code> because it is already setup to take two calls. Just call it once:</p>
<pre><code>memoize = functools.lru_cache(maxsize=None)
</code></pre>
<p>then use the alias as a decorator:</p>
<pre><code>@memoize
def my_func():
    ...
</code></pre>
</div>
<span class="comment-copy">Just about to give a similar response. To make the code in the question work, you'd need to <i>call</i> <code>memoize</code>: @memoize() ...</span>
<span class="comment-copy">Thank you both for the answer and the note about <code>@memoize()</code>!</span>
