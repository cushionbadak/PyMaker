<div class="post-text" itemprop="text">
<p>I have the following an array of dictionaries:</p>
<pre><code>dictionaty =[{'name': 'fire', 'command': '1;2;3;4'}, 
{'name': 'brain', 'command': '2;2;3;4'}, {'name': 'word', 'command': '1;3;4;5'},
{'name': 'cellphone', 'command': '6;1;3;4'}, {'name': 'ocean', 'command': '9;3;7;4'},
</code></pre>
<p>how do I get the dictionaries that have the command with the second and third value after ';' respectively equal?
For example: 'command': '1;2;3;4' is equals 'command': '2;2;3;4'</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a>. You can construct a <code>lambda</code> expression that looks for the value corresponding to the <code>'command'</code> key, then finds the <code>[1]</code> and <code>[2]</code> elements of splitting on the <code>';'</code> character.</p>
<pre><code>d =[{'name': 'fire', 'command': '1;2;3;4'},
    {'name': 'brain', 'command': '2;2;3;4'},
    {'name': 'word', 'command': '1;3;4;5'},
    {'name': 'cellphone', 'command': '6;1;3;4'},
    {'name': 'ocean', 'command': '9;3;7;4'}]

import itertools
groups = itertools.groupby(d, lambda i: i['command'].split(';')[1:3])

for key, group in groups:
    print(list(group))
</code></pre>
<p>Output</p>
<pre><code>[{'name': 'fire', 'command': '1;2;3;4'}, {'name': 'brain', 'command': '2;2;3;4'}]
[{'name': 'word', 'command': '1;3;4;5'}]
[{'name': 'cellphone', 'command': '6;1;3;4'}]
[{'name': 'ocean', 'command': '9;3;7;4'}]
</code></pre>
<p>To find groups that had more than one member, you need one more step:</p>
<pre><code>for key, group in groups:
    groupList = list(group)
    if len(groupList) &gt; 1:
        print(groupList)

[{'command': '1;2;3;4', 'name': 'fire'}, {'command': '2;2;3;4', 'name': 'brain'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate the items and for each item check the items to follow and compare the last part of <code>'command'</code>:</p>
<pre><code>dictionaty =[{'name': 'fire', 'command': '1;2;3;4'}, 
             {'name': 'brain', 'command': '2;2;3;4'}, 
             {'name': 'word', 'command': '1;3;4;5'},
             {'name': 'cellphone', 'command': '6;1;3;4'}, 
             {'name': 'ocean', 'command': '9;3;7;4'}]

for i, itm in enumerate(dictionaty):
    itm_last_part = itm['command'].split(';')[2:]
    for second in dictionaty[i+1:]:
        second_last_part = second['command'].split(';')[2:]
        if itm_last_part == second_last_part:
            print itm, second, "are equal"
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>{'command': '1;2;3;4', 'name': 'fire'} {'command': '2;2;3;4', 'name': 'brain'} are equal
{'command': '1;2;3;4', 'name': 'fire'} {'command': '6;1;3;4', 'name': 'cellphone'} are equal
{'command': '2;2;3;4', 'name': 'brain'} {'command': '6;1;3;4', 'name': 'cellphone'} are equal
</code></pre>
</div>
<span class="comment-copy">I thought I'd go one by one, but I believe it is computationally infeasible.</span>
<span class="comment-copy">you dictionary is a list</span>
<span class="comment-copy">@PadraicCunningham I see this frequently, it's even funnier in C++ where you have to specify the type, e.g. <code>float myInt = 5.35;</code></span>
<span class="comment-copy">sorry just forgot to announce it was an array of dictionaries.</span>
<span class="comment-copy">But the output is equal to the array in this case, I expect that only the lines  were the result: {'name':'fire','command':'1;2;3;4'}, {'name': 'brain', 'command': '2;2;3;4'}</span>
<span class="comment-copy">+1 more elegant than my solution!</span>
<span class="comment-copy">is amazing @Cyber! thanks.</span>
<span class="comment-copy">Sorry but, what is [1:3] on (d, lambda i: i['command'].split(';')[1:3])?</span>
<span class="comment-copy">I'm taking the string <code>'1;2;3;4'</code> and splitting on the <code>';'</code>. This will return the list <code>['1','2','3','4']</code>. I am using <a href="http://stackoverflow.com/questions/509211/explain-pythons-slice-notation">slice notation</a> To get the 2nd and 3rd element, which are at <code>[1]</code> and <code>[2]</code>. The slice <code>[1:3]</code> means <code>[start:stop]</code>, but it goes up to "stop" but doesn't include it.</span>
<span class="comment-copy">Thank's @alfasin</span>
