<div class="post-text" itemprop="text">
<p>I am using a brute force tactic to finding the answer solution to my problem. The idea is I loop through 3 different ranges, e.g. a nested loop, in increments of 10 to significantly decrease the number of combinations.</p>
<p>I then take the three solutions given to me in my first function, to redefine the looping range parameter for my function that will yield a more precise solution.</p>
<p>This is my code:</p>
<pre><code># first broad looping function to zone down to the relevant area of my solution
def t1_solve(cgoal):
    max_value = None
    nc_f = None
    c_f = None
    cd_f = None
    for i, j, k in [(i,j,k) for i in range(nc_rev.idxmax(),int((cgoal*100)+200),5) for 
    j in range(c_rev.idxmax(),int((cgoal*100)+200),5) for k in range(cd_rev.idxmax(),
    int((cgoal*100)+200),5)]:
        if (t1rev(i,j,k) &gt; max_value and t1c(i,j,k) &gt; cgoal):

            #storing the optimal value result, and my three solution in nc_f, c_f, cd_f

            max_value = t1rev(i,j,k)
            nc_f = i
            c_f = j
            cd_f = k

    print max_value
    print nc_f, c_f, cd_f
    return nc_f
    return c_f
    return cd_f

# second reduced looping problem to fine-tune my answer

def t1_finetune():

# run the broad looping function

    t1_solve(3.61)

# this is where I have trouble with passing my solutions stored in the
# previous function's nc_f, c_f, cd_f

#ERROR OCCURS HERE!!!!!
    if nc_f - 20 &gt; 0:
        nc_lowerbound = nc_f - 20
    else:
        nc_lowerbound = 1

    if nc_f + 20 &lt; 1499:
        nc_upperbound = nc_f + 20
    else:
        nc_upperbound = 1499

    if c_f - 20 &gt; 0:
        c_lowerbound = c_f - 20
    else:
        c_lowerbound = 1

    if c_f + 20 &lt; 1499:
        c_upperbound = c_f + 20
    else:
        c_upperbound = 1499

    if cd_f - 20 &gt; 0:
        cd_lowerbound = cd_f - 20
    else:
        cd_lowerbound = 1

    if cd_f + 20 &lt; 1499:
        cd_upperbound = cd_f + 20
    else:
        cd_upperbound = 1499    

    for i, j, k in [(i,j,k) for i in range(nc_lowerbound, nc_upperbound) for 
    j in range(c_lowerbound, c_upperbound) for k in range(cd_lowerbound, cd_upperbound)]:
        if (t1rev(i,j,k) &gt; max_value and t1c(i,j,k) &gt; cgoal):
            max_value = t1rev(i,j,k)
            nc_f = i
            c_f = j
            cd_f = k
    print max_value
    print nc_f, c_f, cd_f
    return nc_f, c_f, cd_f


t=time.time()
t1_finetune()
print time.time() - t
</code></pre>
<p>The error message I get is:</p>
<pre><code>UnboundLocalError: local variable 'nc_f' referenced before assignment
</code></pre>
<p>Essentially, I just need to pass nc_f, c_f, and cd_f from my t1_solve() to my t1_finetune(). Running t1_solve() on its own works fine, and when it gets called in t1_finetune(), it still works up until it goes on to the rest of the code where I commented the error occurence.</p>
<p>I hope this is clear, please let me know if there is anything I can clarify.</p>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>First, your <code>t1_solve</code> function has three <code>return</code> statements instead of one. As soon as the first one is reached, the function is over, and the other ones never happen. So, you need this:</p>
<pre><code>return nc_f, c_f, cd_f
</code></pre>
<hr/>
<p>Next, when you call <code>t1_solve</code> and it returns those values to you, you just ignore the results. You need to store them somewhere. For example:</p>
<pre><code>nc_f, c_f, cd_f = t1_solve(3.61)
</code></pre>
<hr/>
<p>For an intuitive understanding, what you're doing here is returning three values instead of one, and assigning those three return values to three variables.</p>
<p>If you want to know what's <em>actually</em> happening: The first <code>nc_f, c_f, cd_f</code> creates a single 3-element tuple and returns that one tuple. Then, the later <code>nc_f, c_f, cd_f =</code> uses iterable assignment unpacking. See the tutorial section <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow">Tuples and Sequences</a> for a nice introduction.</p>
</div>
<span class="comment-copy">@Apero: I first read this question on a cell phone and had no idea what the problem was, so I feel your pain. :)</span>
<span class="comment-copy">Thank you for your answer @abarnet, I'm new to Python and didn't quite understand how those returned values get used again. Storing them was the key here. Thanks again!</span>
