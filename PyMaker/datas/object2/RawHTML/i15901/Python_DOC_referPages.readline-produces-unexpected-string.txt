<div class="post-text" itemprop="text">
<p>Getting some practice playing with dictionaries and file i/o today when a file gave me an unexpected output that I'm curious about. I wrote the following simple function that just takes the first line of a text file, breaks it into individual words, and puts each word into a dictionary:</p>
<pre><code>def create_dict(file):
    dict = {}
    for i, item in enumerate(file.readline().split(' ')):
        dict[i]= item
    file.seek(0)
    return dict

print "Enter a file name:"
f = open(raw_input('-&gt; '))

dict1 = create_dict(f)
print dict1
</code></pre>
<p>Simple enough, in every case it produces exactly the expected output. Every case except for one. I have one text file that was created by piping the output of another python script to a text file via the following shell command:</p>
<pre><code>C:\&gt; python script.py &gt; textFile.txt
</code></pre>
<p>When I use textFile.txt with my dictionary script, I get an output that looks like:</p>
<pre><code>{0: '\xff\xfeN\x00Y\x00', 1: '\x00S\x00t\x00a\x00t\x00e\x00', 2: '\x00h\x00a\x00s\x00:\x00', 3: '\x00', 4: '\x00N\x00e\x00w\x00', 5: '\x00Y\x00o\x00r\x00k\x00\r\x00\n'}
</code></pre>
<p>What is this output called? Why does piping the output of the script to a text file via the command line produce a different type of string than any other text file? Why are there no visible differences when I open this file in my text editor? I searched and searched but I don't even know what that would be called as I'm still pretty new.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your file is UTF-16 encoded. The first 2 characters is a Byte Order Marker (BOM) <code>\xff</code> and <code>\xfe</code>. Also you will notice that each character appears to take 2 bytes, one of which is <code>\x00</code>.</p>
<p>You can use the codecs module to decode for you:</p>
<pre><code>import codecs

f = codecs.open(raw_input('-&gt; '), 'r', encoding='utf-16')
</code></pre>
<p>Or, if you are using Python 3 you can supply the <code>encoding</code> argument to <code>open()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I guess the problem you met is the 'Character Code' problem.
In python, the default character code is asciiï¼Œso when you use the open() fuction to read the file, the value will be explain to ascii code.
But, the output may not know what the character code means, you need to decode the output message to see it 'normal like'.</p>
<p>As normal, the system use the utf-8 code to read, you can try to decode(item, 'utf-8').</p>
<p>And you can search for more information about character code, ascii, utf-8, unicode and the transfer method of them.</p>
<p>Hope can helping.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import codecs
&gt;&gt;&gt; codecs.BOM_UTF16_LE
'\xff\xfe'
</code></pre>
<p>To read utf-16 encoded file you could use <code>io</code> module:</p>
<pre><code>import io

with io.open(filename, encoding='utf-16') as file:
    words = [word for line in file for word in line.split()]
</code></pre>
<p>The advantage compared to <code>codecs.open()</code> is that it supports <a href="https://docs.python.org/3/glossary.html#term-universal-newlines" rel="nofollow">the universal newline mode</a> like the builtin <code>open()</code>, and <code>io.open()</code> is the builtin <code>open()</code> in Python 3.</p>
</div>
<span class="comment-copy">Thank you! I didn't know what that was called, now I can search on my own and spend some time reading about encoding and increase my Python kung fu :-)</span>
<span class="comment-copy">@JasonSherrick: don't use <code>file.readline().split(' ')</code> on raw utf-16 bytes. It splits the input <i>inside</i> the newline character (it is shown clearly in your question), corrupting the data.</span>
