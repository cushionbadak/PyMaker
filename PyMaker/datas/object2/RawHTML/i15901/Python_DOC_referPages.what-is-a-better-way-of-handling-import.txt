<div class="post-text" itemprop="text">
<p>So I have a class which looks like the following:</p>
<pre><code>class TestClass():
    from somewhere import *

    def test_function(self):
        pass
</code></pre>
<p>Of course I am getting a syntax warning about import * only being allowed at the module level. All of the posts I have seen have been about why this is a bad idea, and not actually offering a way to handle this better. We are looking at moving to Python 3 and need to take care of this as one of our obstacles before moving over. </p>
<p>So what would be a better way to handle this? Would putting the import statements into the <code>__init__.py</code> be the way to handle this? If so, what would that look like?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you need to add all the elements from <code>somewhere</code> as elements of your class, you could use a loop and a combination of <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow"><code>getattr()</code></a> and <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow"><code>setattr()</code></a>:</p>
<pre><code>import somewhere

class TestClass():
    def test_function(self):
        pass

for name in getattr(somewhere, '__all__', 
                    (n for n in dir(somewhere) if not n.startswith('_'))):
    setattr(TestClass, name, getattr(somewhere, name))
</code></pre>
<p>This'll add the exact same names from <code>somewhere</code> to <code>TestClass</code> as the <code>from somewhere import *</code> statement would; either all names listed in the <code>__all__</code> sequence, if set, otherwise all names that do not start with an underscore.</p>
<p>Rather than import individual attributes (functions, etc.), you should really create a base class in <code>somewhere</code> instead:</p>
<pre><code>class BaseSomewhere:
    somewhere_thing1 = 'something'

    def somewhere_thing2(self):
        # do something
</code></pre>
<p>then import <em>that</em>:</p>
<pre><code>import somewhere

class TestClass(somewhere.BaseSomewhere):
    def test_function(self):
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The better way is to just <code>import something</code> and then use <code>something.function_you_want_to_call</code> rather than <code>function_you_want_to_call</code></p>
</div>
<span class="comment-copy">How many objects are being imported from <code>somewhere</code>? The "right" way to do it would be to just explicitly list the objects from <code>somewhere</code> you need to import, or just <code>import somewhere</code> and use <code>somewhere.object</code> instead of <code>object</code>.</span>
<span class="comment-copy">Why do you want to do <code>from somewhere import *</code> rather than <code>import somewhere</code>? The latter does not pollute the namespace and should generally be preferred to the former.</span>
<span class="comment-copy">But a better design pattern would be to create a <code>somewhere.DummyClass</code> that has all those methods explicitly defined, then do <code>class TestClass(somewhere.DummyClass)</code></span>
<span class="comment-copy">@AdamSmith: Absolutely agree; I'll write that up too.</span>
<span class="comment-copy">Thank you so very much. This was extremely helpful.</span>
<span class="comment-copy">I agree that this is the better way, what happens when you have possibly thousands of functions you want to call?</span>
<span class="comment-copy">@DarthOpto -- then you have way too many functions in that module ;-)...</span>
