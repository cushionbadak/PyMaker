<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9755990/why-can-tuples-contain-mutable-items">Why can tuples contain mutable items?</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>The value inside the tuple is simply a reference to a list, and if I change the values in the list everything is still in order, right? I want to make sure that if I do this I won't start running into confusing errors.</p>
</div>
<div class="post-text" itemprop="text">
<p>Tuples are immutable, you may not change their contents.</p>
<p>With a list</p>
<pre><code>&gt;&gt;&gt; x = [1,2,3]
&gt;&gt;&gt; x[0] = 5
&gt;&gt;&gt; x
[5, 2, 3]
</code></pre>
<p>With a tuple</p>
<pre><code>&gt;&gt;&gt; y = tuple([1,2,3])
&gt;&gt;&gt; y
(1, 2, 3)
&gt;&gt;&gt; y[0] = 5   # Not allowed!

Traceback (most recent call last):
  File "&lt;pyshell#20&gt;", line 1, in &lt;module&gt;
    y[0] = 5
TypeError: 'tuple' object does not support item assignment
</code></pre>
<p>But if I understand your question, say you have</p>
<pre><code>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = [4,5,6]
&gt;&gt;&gt; t = (a,b)
&gt;&gt;&gt; t
([1, 2, 3], [4, 5, 6])
</code></pre>
<p>You <em>are allowed</em> to modify the internal lists as</p>
<pre><code>&gt;&gt;&gt; t[0][0] = 5
&gt;&gt;&gt; t
([5, 2, 3], [4, 5, 6])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Tuples are immutable - you can't change their structure</p>
<pre><code>&gt;&gt;&gt; a = []
&gt;&gt;&gt; tup = (a,)
&gt;&gt;&gt; tup[0] is a # tup stores the reference to a
True
&gt;&gt;&gt; tup[0] = a # ... but you can't re-assign it later
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'tuple' object does not support item assignment
&gt;&gt;&gt; tup[0] = 'string' # ... same for all other objects
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'tuple' object does not support item assignment
</code></pre>
<p>or size</p>
<pre><code>&gt;&gt;&gt; del tup[0] # Nuh uh
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'tuple' object does not support item deletion
&gt;&gt;&gt; id(tup)
139763805156632
&gt;&gt;&gt; tup += ('something',) # works, because it creates a new tuple object:
&gt;&gt;&gt; id(tup) # ... the id is different
139763805150344
</code></pre>
<p>after you create them.</p>
<p>On the other hand, mutable objects stored in a tuple do not lose their mutability e.g. you can still modify inner lists using list methods:</p>
<pre><code>&gt;&gt;&gt; a = []
&gt;&gt;&gt; b, c = (a,), (a,) # references to a, not copies of a
&gt;&gt;&gt; b[0].append(1)
&gt;&gt;&gt; b
([1],)
&gt;&gt;&gt; c
([1],)
</code></pre>
<p>Tuples can store any kind of object, although tuples that contain lists (or any other mutable objects) are not <a href="https://docs.python.org/3/glossary.html#term-hashable" rel="nofollow">hashable</a>:</p>
<pre><code>&gt;&gt;&gt; hash(b)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</code></pre>
<p>The behaviour demonstrated above can indeed lead to confusing errors.</p>
</div>
<span class="comment-copy">+1 for pointing out that only tuples which contain all hashible objects are hashible.</span>
<span class="comment-copy">Very helpful. Good to know about the hashable bit. Thank you!</span>
