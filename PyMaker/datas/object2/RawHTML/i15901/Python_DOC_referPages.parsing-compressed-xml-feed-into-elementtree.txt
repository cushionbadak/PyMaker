<div class="post-text" itemprop="text">
<p>I'm trying to parse the following feed into ElementTree in python: "<a href="http://smarkets.s3.amazonaws.com/oddsfeed.xml" rel="nofollow">http://smarkets.s3.amazonaws.com/oddsfeed.xml</a>" (warning large file)</p>
<p>Here is what I have tried so far:</p>
<pre><code>feed = urllib.urlopen("http://smarkets.s3.amazonaws.com/oddsfeed.xml")

# feed is compressed
compressed_data = feed.read()
import StringIO
compressedstream = StringIO.StringIO(compressed_data)
import gzip
gzipper = gzip.GzipFile(fileobj=compressedstream)
data = gzipper.read()

# Parse XML
tree = ET.parse(data)
</code></pre>
<p>but it seems to just hang on <code>compressed_data = feed.read()</code>, infinitely maybe?? (I know it's a big file, but seems too long compared to other non-compressed feeds I parsed, and this large is killing any bandwidth gains from the gzip compression in the first place).</p>
<p>Next I tried <code>requests</code>, with </p>
<pre><code>url = "http://smarkets.s3.amazonaws.com/oddsfeed.xml"
headers = {'accept-encoding': 'gzip, deflate'}
r = requests.get(url, headers=headers, stream=True)
</code></pre>
<p>but now</p>
<pre><code>tree=ET.parse(r.content)
</code></pre>
<p>or</p>
<pre><code>tree=ET.parse(r.text)
</code></pre>
<p>but these raise exceptions.</p>
<p>What's the proper way to do this? </p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.parse" rel="nofollow"><code>ET.parse</code></a> function takes "a filename or file object containing XML data". You're giving it a string full of XML. It's going to try to open a file whose name is that big chunk of XML. There is probably no such file.</p>
<p>You want the <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.fromstring" rel="nofollow"><code>fromstring</code></a> function, or the <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XML" rel="nofollow"><code>XML</code></a> constructor.</p>
<p>Or, if you prefer, you've already got a file object, <code>gzipper</code>; you could just pass that to <code>parse</code> instead of reading it into a string.</p>
<hr/>
<p>This is all covered by the short <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#tutorial" rel="nofollow">Tutorial</a> in the docs:</p>
<blockquote>
<p>We can import this data by reading from a file:</p>
</blockquote>
<pre><code>import xml.etree.ElementTree as ET
tree = ET.parse('country_data.xml')
root = tree.getroot()
</code></pre>
<blockquote>
<p>Or directly from a string:</p>
</blockquote>
<pre><code>root = ET.fromstring(country_data_as_string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can pass the value returned by <code>urlopen()</code> directly to <code>GzipFile()</code> and in turn you can pass it to <code>ElementTree</code> methods such as <code>iterparse()</code>:</p>
<pre><code>#!/usr/bin/env python3
import xml.etree.ElementTree as etree
from gzip import GzipFile
from urllib.request import urlopen, Request

with urlopen(Request("http://smarkets.s3.amazonaws.com/oddsfeed.xml",
                     headers={"Accept-Encoding": "gzip"})) as response, \
     GzipFile(fileobj=response) as xml_file:
    for elem in getelements(xml_file, 'interesting_tag'):
        process(elem)
</code></pre>
<p>where <code>getelements()</code> allows to parse files that do not fit in memory.</p>
<pre><code>def getelements(filename_or_file, tag):
    """Yield *tag* elements from *filename_or_file* xml incrementaly."""
    context = iter(etree.iterparse(filename_or_file, events=('start', 'end')))
    _, root = next(context) # get root element
    for event, elem in context:
        if event == 'end' and elem.tag == tag:
            yield elem
            root.clear() # free memory
</code></pre>
<p>To preserve memory, the constructed xml tree is cleared on each <em>tag</em> element.</p>
</div>
<span class="comment-copy">"these raise exceptions" isn't helpful. <i>What</i> exceptions? Copy and paste the traceback into your question.</span>
<span class="comment-copy">Also, why are you trying to pass an HTTP header as POST data? They're not the same thing.</span>
<span class="comment-copy">Could you elaborate a bit on <code>root.clear()</code> ? How does this free the memory for each <code>elem</code> ?</span>
<span class="comment-copy">@Mr_and_Mrs_D the last sentence says what <code>root.clear()</code> does and why it is used.</span>
<span class="comment-copy">Thanks - what confuses me is that root seems defined once - I would expect something like <code>elem.clear()</code></span>
<span class="comment-copy">@Mr_and_Mrs_D: here's <a href="http://effbot.org/zone/element-iterparse.htm#incremental-parsing" rel="nofollow noreferrer">on the difference between <code>elem.clear()</code> and <code>root.clear()</code></a> (in short: unless the xml file is huge, we can ignore it). Here's <a href="https://stackoverflow.com/a/7943376/4279">on the performance difference</a></span>
<span class="comment-copy">Will try and wrap my brain around that - thanks :)</span>
