<div class="post-text" itemprop="text">
<blockquote>
<p>2to3 is a Python program that reads Python 2.x source code and applies a series of fixers to transform it into valid Python 3.x code</p>
</blockquote>
<p>Consider the forty fixers listed at <a href="https://docs.python.org/3.4/library/2to3.html#fixers" rel="nofollow">https://docs.python.org/3.4/library/2to3.html#fixers</a> . By design, they all output valid Python 3 code. Which output valid <em>Python 2</em> code?</p>
<p>For example, the fixer NE that "converts the old not-equal syntax <code>&lt;&gt;</code> to <code>!=</code>" has this property, because <code>!=</code> is valid Python 2 as well as Python 3.</p>
<p>Whereas the fixer NONZERO that "Renames <code>__nonzero__</code> to <code>__bool__</code>" does not have the property, because there is no function <code>__bool__</code> in Python 2.7. </p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/whatsnew/3.0.html" rel="nofollow">What's New In Python 3.0</a>:</p>
<blockquote>
<p>It is not recommended to try to write source code that runs unchanged
  under both Python 2.6 and 3.0; youâ€™d have to use a very contorted
  coding style, e.g. avoiding print statements, metaclasses, and much
  more. If you are maintaining a library that needs to support both
  Python 2.6 and Python 3.0, the best approach is to modify step 3 above
  by editing the 2.6 version of the source code and running the 2to3
  translator again, rather than editing the 3.0 version of the source
  code.</p>
</blockquote>
<p>That link up there is a pretty good one, since it also lists most of the major new features and changes in 3.0</p>
<p>As for your question, the closest thing I can find to what you're asking for is <a href="http://pythonhosted.org/six/" rel="nofollow">Six</a>, which is not a converter or fixer, but rather a compatibility library that handles a lot of the contorted coding for you. That said, I don't know how well it works, and it would require a lot of changes to your existing code to take advantage of it anyway.</p>
<p>The main problem is that Python 3.x changed so many fundamental aspects of the syntax that it's almost impossible for the same code to work the same way on both 3.x and 2.x without a compatibility layer of some kind. Python 2's strings aren't the same as Python 3's strings. The same goes for integers, and Python 3 doesn't even have a long type any more (Python 3 ints are what longs used to be, and the old Python 2 int is gone). Many built-in functions and attributes have been renamed or modified, and most of the syntax has been changed or cleaned up in ways that completely break backwards-compatibility.</p>
<p><a href="http://www.diveintopython3.net/porting-code-to-python-3-with-2to3.html" rel="nofollow">Porting code to Python 3 with 2to3</a> explains a bit about 2to3 and what it does, and the sheer volume of syntax changes listed should hopefully be enough to explain why the resultant code won't work with Python 2.x any more. </p>
</div>
<span class="comment-copy">It would be a "3to2 breaker". A "to3" isn't interested in going "to Python 2". The title should be changed to the direct task, eg: How to automatically backport/'fix' Python 3 to Python 2? Or How to update Python 2 to Python 3 making the minimal required changes/fixes?</span>
<span class="comment-copy">Thanks. I used Six for my project. Those release notes are delusional.</span>
