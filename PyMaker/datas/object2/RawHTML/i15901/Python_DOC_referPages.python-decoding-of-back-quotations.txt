<div class="post-text" itemprop="text">
<p>I am receiving this issue<br/>
<em>" UnicodeEncodeError: 'latin-1' codec can't encode character u'\u201d' "</em></p>
<p>I'm quite new to working with databases as a whole.  Previously, I had been using SQLite3; however, now transitioning/migrating to MySQL, I noticed u'\u201d' and u'\u201c' characters were within some of my text data.</p>
<p>I'm currently making a python script to tackle the migration; however, I'm getting stuck with this codec issue that I previously didn't for see.</p>
<p>So my question is, how do I replace/decode these values so that I can actually store them in MySQL DB?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't have a problem <em>decoding</em> these characters; wherever they're coming from, if they're showing up as <code>\u201d</code> (<code>”</code>) and <code>\u201c</code> (<code>“</code>), they're already being properly decoded.</p>
<p>The problem is <em>encoding</em> these characters. If you want to store your strings in Latin-1 columns, they can only contain the 256 characters that exist in Latin-1, and these two are not among them.</p>
<hr/>
<blockquote>
<p>So my question is, how do I replace/decode these values so that I can actually store them in MySQL DB?</p>
</blockquote>
<p>The obvious solution is to use UTF-8 columns instead of Latin-1 in MySQL. Then this problem wouldn't even exist; any Unicode string can be encoded as UTF-8.</p>
<hr/>
<p>But assuming you can't do that for some reason… </p>
<p>Python comes with built-in support for different <a href="https://docs.python.org/3/library/codecs.html#codec-base-classes" rel="nofollow">error handlers</a> that can help you do <em>something</em> with these characters while encoding them. You just have to decide what "something" that is.</p>
<p>Let's say your string looks like <code>hey “hey” hey</code>. Here's what each error handler would do with it:</p>
<ul>
<li><code>s.encode('latin-1', 'ignore')</code>: <code>hey hey hey</code></li>
<li><code>s.encode('latin-1', 'replace')</code>: <code>hey ?hey? hey</code></li>
<li><code>s.encode('latin-1', 'xmlcharrefreplace'):</code>hey “hey” hey`</li>
<li><code>s.encode('latin-1', 'backslashreplace'):</code>hey \u201chey\u201d hey`</li>
</ul>
<p>The first two have the advantage of being somewhat readable, but the disadvantage that you can never recover the original string. If you want that, but want something even <em>more</em> readable, you may want to consider a third-party library like <a href="https://pypi.python.org/pypi/Unidecode" rel="nofollow"><code>unidecode</code></a>:</p>
<ul>
<li><code>unidecode('hey “hey” hey').encode('latin-1'):</code>hey "hey" hey`</li>
</ul>
<p>The last two are lossless, but kind of ugly. Although in some contexts they'll look pretty nice—e.g., if you're building an XML document, <code>xmlcharrefreplace</code> (maybe even with <code>'ascii'</code> instead of <code>'latin-1'</code>) will give you exactly what you want in an XML viewer. There are special-purpose translators for various other use cases (like HTML references, or XML named entities instead of numbered, etc.) if you know what you want.</p>
<p>But in general, you have to make the choice between throwing away information, or "hiding" it in some ugly but recoverable form.</p>
</div>
