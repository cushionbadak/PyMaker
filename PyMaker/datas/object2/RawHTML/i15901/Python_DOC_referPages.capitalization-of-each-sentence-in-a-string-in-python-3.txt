<div class="post-text" itemprop="text">
<p>This should be easy but somehow I'm not quite getting it.</p>
<p>My assignment is: </p>
<blockquote>
<p>Write a function sentenceCapitalizer that has one parameter of type string. The function returns a 
  copy of the string with the first character of each sentence capitalized. The function should return 
  “Hello. My name is Joe. What is your name?” if the argument to the function is “hello. my name is 
  Joe. what is your name?” Assume a sentence is separated by a period followed by a space."</p>
</blockquote>
<p>What I have so far is:</p>
<pre><code>def sentenceCapitalizer (string1: str):
    words = string1.split(". ")
    words2=words.capitalize()
    string2=words2.join()
    return (string2)

print (sentenceCapitalizer("hello. my name is Joe. what is your name?"))
</code></pre>
<p>Upon execution I get the error:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Users\Andrew\Desktop\lab3.py", line 83, in &lt;module&gt;
    print (sentenceCapitalizer("hello. my name is Joe. what is your name?"))
  File "C:\Users\Andrew\Desktop\lab3.py", line 79, in sentenceCapitalizer
    words2=words.capitalize()
AttributeError: 'list' object has no attribute 'capitalize'"
</code></pre>
<p>What is that telling me and how do I fix this? I tried following instructions found on a page listed as the python software foundation so I thought I'd have this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to use a string method on the wrong object; <code>words</code> is list object <em>containing</em> strings. Use the method on each individual element instead:</p>
<pre><code>words2 = [word.capitalize() for word in words]
</code></pre>
<p>But this would be applying the <em>wrong</em> transformation; you don't want to capitalise the whole sentence, but <em>just</em> the first letter. <code>str.capitalize()</code> would lowercase <em>everything else</em>, including the <code>J</code> in <code>Joe</code>:</p>
<pre><code>&gt;&gt;&gt; 'my name is Joe'.capitalize()
'My name is joe'    
</code></pre>
<p>Limit yourself to the <em>first letter only</em>, and then add back the rest of the string unchanged:</p>
<pre><code>words2 = [word[0].capitalize() + word[1:] for word in words]
</code></pre>
<p>Next, a list object has no <code>.join()</code> method either; that too is a string method:</p>
<pre><code>string2 = '. '.join(words2)
</code></pre>
<p>This'll join the strings in <code>words2</code> with the <code>'. '</code> (full stop and space) joiner.</p>
<p>You'll probably want to use better variable names here; your strings are sentences, not words, so your code could do better reflecting that.</p>
<p>Together that makes your function:</p>
<pre><code>def sentenceCapitalizer (string1: str):
    sentences = string1.split(". ")
    sentences2 = [sentence[0].capitalize() + sentence[1:] for sentence in sentences]
    string2 = '. '.join(sentences2)
    return string2
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; def sentenceCapitalizer (string1: str):
...     sentences = string1.split(". ")
...     sentences2 = [sentence[0].capitalize() + sentence[1:] for sentence in sentences]
...     string2 = '. '.join(sentences2)
...     return string2
... 
&gt;&gt;&gt; print (sentenceCapitalizer("hello. my name is Joe. what is your name?"))
Hello. My name is Joe. What is your name?
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This does the job. Since it extracts all sentences including their trailing whitespace, this also works if you have multiple paragraphs, where there are line breaks between sentences.</p>
<pre><code>import re

def sentence_case(text):
    # Split into sentences. Therefore, find all text that ends
    # with punctuation followed by white space or end of string.
    sentences = re.findall('[^.!?]+[.!?](?:\s|\Z)', text)

    # Capitalize the first letter of each sentence
    sentences = [x[0].upper() + x[1:] for x in sentences]

    # Combine sentences
    return ''.join(sentences)
</code></pre>
<p>Here is a <a href="http://ideone.com/fvTezY" rel="nofollow">working example</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To allow arbitrary whitespace after the dot. Or to capitalize the full words (It might make the difference for a Unicode text), you could <a href="https://docs.python.org/3/library/re.html" rel="nofollow">use regular expressions -- <code>re</code> module</a>:</p>
<pre><code>#!/usr/bin/env python3
import re

def sentenceCapitalizer(text):
    return re.sub(r"(\.\s+|^)(\w+)",
                  lambda m: m.group(1) + m.group(2).capitalize(),
                  text)

s = "hEllo. my name is Joe. what is your name?"
print(sentenceCapitalizer(s))
# -&gt; 'Hello. My name is Joe. What is your name?'
</code></pre>
<p>Note: pep8 recommends lowercase names for functions e.g., <code>capitalize_sentence()</code> instead of <code>sentenceCapitalizer()</code>.</p>
<p>To accept  a larger variaty of texts, you could <a href="http://www.nltk.org/book/ch00.html" rel="nofollow">use <code>nltk</code> package</a>:</p>
<pre><code># $ pip install nltk
from nltk.tokenize import sent_tokenize, word_tokenize 

def sent_capitalize(sentence):
    """Capitalize the first word in the *sentence*."""
    words = word_tokenize(sentence)
    if words:
       words[0] = words[0].capitalize()
    return " ".join(words[:-1]) + "".join(words[-1:]) # dot

text = "hEllo. my name is Joe. what is your name?"
# split the text into a list of sentences
sentences = sent_tokenize(text)
print(" ".join(map(sent_capitalize, sentences)))
# -&gt; Hello. My name is Joe. What is your name?
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I did not use 'split' but just while loop instead. Here is my code.</p>
<pre><code>my_string = input('Enter a string: ')
new_string = ''
new_string += my_string[0].upper()
i = 1

while i &lt; len(my_string)-2:
    new_string += my_string[i]
    if my_string[i] == '.' or my_string[i] == '?' or my_string[i] == '!':
        new_string += ' '
        new_string += my_string[i+2].upper()
        i = i+3
    else:
        if i == len(my_string)-3:
            new_string += my_string[len(my_string)-2:len(my_string)]
        i = i+1

print(new_string)
</code></pre>
<p>Here is how it works:</p>
<pre><code>Enter a string: hello. my name is Joe. what is your name?
Hello. My name is Joe. What is your name
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just because I couldn't find this solution here. </p>
<p>You can use 'sent_tokenize' method from nltk.</p>
<pre><code>import nltk
string = "hello. my name is Joe. what is your name?"
sentences = nltk.sent_tokenize(string)
print (' '.join([s.replace(s[0],s[0].capitalize(),1) for s in sentences]) )
</code></pre>
<p>And the output</p>
<pre><code>Hello. My name is Joe. What is your name?
</code></pre>
</div>
<span class="comment-copy">Note: Python 3.5 has not yet been released (it is still being developed), so your claim to be using 3.5.5 is.. surprising; you probably have a <i>different</i> version of Python, rather than having used a time machine.</span>
<span class="comment-copy">He's asking about capitalizing the first character of each sentence, not each word. Edit: Great, you updated that to the question.</span>
<span class="comment-copy">@danijar: Don't be confused by the variable names, the split is on <code>'. '</code>.</span>
<span class="comment-copy">But <code>.capitalize()</code> will blow away word capitalizations, so <code>Joe</code> will become <code>joe</code>, and <code>' '.join</code> will destroy the original periods.</span>
<span class="comment-copy">@DSM: I was trying to address the initial problem <i>first</i>; the solving of the whole homework problem is a little further out, don't you think? :-)</span>
<span class="comment-copy">I certainly can't throw stones, given that I usually just say "you might also want to check X" at the end, but then I'm profoundly lazy..</span>
