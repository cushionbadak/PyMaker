<div class="post-text" itemprop="text">
<p>I have the below text file that I would need some help with parsing out IP addresses.</p>
<p>The text file is of the form</p>
<pre><code>abc 10.1.1.1/32   aabbcc
def 11.2.0.0/16   eeffgg
efg 0.0.0.0/0   ddeeff
</code></pre>
<p>In other words, a bunch of IP networks exist as part of a log file. The output should be provided as below:</p>
<pre><code>10.1.1.1/32
11.2.0.0/16
0.0.0.0/0
</code></pre>
<p>I have the below code but does not output the required information</p>
<pre><code>file = open(filename, 'r')
for eachline in file.readlines():
    ip_regex = re.findall(r'(?:\d{1,3}\.){3}\d{1,3}', eachline)
    print ip_regex
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, your regex doesn't even attempt to capture anything but four dotted numbers, so of course it's not going to match anything else, like a <code>/32</code> on the end. if you just add, e.g., <code>/\d{1,2}</code> to the end, it'll fix that:</p>
<pre><code>(?:\d{1,3}\.){3}\d{1,3}/\d{1,2}
</code></pre>
<p><img alt="Regular expression visualization" src="https://www.debuggex.com/i/7bQpjvtFIqCLPck1.png"/></p>
<p><a href="https://www.debuggex.com/r/7bQpjvtFIqCLPck1" rel="nofollow">Debuggex Demo</a></p>
<hr/>
<p>However, if you don't understand regular expressions well enough to understand that, you probably shouldn't be using a regex as a piece of "magic" that you'll never be able to debug or extend. It's a bit more verbose with <code>str</code> methods like <code>split</code> or <code>find</code>, but maybe easier to understand for a novice:</p>
<pre><code>for line in file:
    for part in line.split()
        try:
            address, network = part.split('/')
            a, b, c, d = address.split('.')
        except ValueError:
            pass # not in the right format
        else:
            # do something with part, or address and network, or whatever
</code></pre>
<hr/>
<p>As a side note, depending on what you're actually doing with these things, you might want to use the <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow"><code>ipaddress</code></a> module (or <a href="https://pypi.python.org/pypi/ipaddress/1.0.6" rel="nofollow">the backport on PyPI</a> for 2.6-3.2) rather than string parsing:</p>
<pre><code>&gt;&gt;&gt; import ipaddress
&gt;&gt;&gt; s = '10.1.1.1/32'
&gt;&gt;&gt; a = ipaddress.ip_network('10.1.1.1/32')
</code></pre>
<p>You can combine that with either of the above:</p>
<pre><code>for line in file:
    for part in line.split():
        try:
            a = ipaddress.ip_network(part)
        except ValueError:
            pass # not the right format
        else:
            # do something with a and its nifty methods
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In this particular case, a regex might be overkill, you could use <code>split</code></p>
<pre><code>with open(filename) as f:
    ipList = [line.split()[1] for line in f]
</code></pre>
<p>This should produce a list of strings, which are the ip addresses.</p>
</div>
<span class="comment-copy">Try to describe what does each line of code and you will find the error. see re documentation too.</span>
<span class="comment-copy">Well, you didn't include anything in your regex to match the <code>/32</code> or similar at the end, so of course it's only going to match the <code>10.1.1.1</code> or similar.</span>
<span class="comment-copy"><code>re.findall("\d+\.\d+\.\d+\.\d+\/\d+",file.read())</code>, you should also use <code>with</code> to open your files</span>
<span class="comment-copy">As a side note, there is no reason to use <code>readlines()</code> there. <code>file</code> is already an iterable of lines. All you're doing is wastefully forcing Python to read and parse the entire file in memory before you can use it.</span>
<span class="comment-copy">As another side note, those aren't IP addresses, those are IP <i>networks</i>, which contain an address and a bitmask. In fact, your existing code is <i>already</i> finding the IP addresses that are part of those networks…</span>
<span class="comment-copy">this website Debuggex that @abernert linked to, is the best website for regex i have ever seen.</span>
<span class="comment-copy">@TehTris: Yeah, I do love it. But notice that once they're out of beta, they're apparently going to start charging for non-JS regexes. They already started charging for the convert-to-plain-English feature (which they then disabled…). Very clever; I'm not sure I could go back to… whatever I used to use, which I can't even remember anymore. :)</span>
<span class="comment-copy">Thanks..simple and perfect....and thanks for the awesome debuggex reference :)</span>
