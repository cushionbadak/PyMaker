<div class="post-text" itemprop="text">
<p>I'm trying to take a Unicode file stream, which contains odd characters, and wrap it with a stream reader that will convert it to Ascii, ignoring or replacing all characters that can't be encoded.</p>
<p>My stream looks like: </p>
<pre><code>"EventId","Rate","Attribute1","Attribute2","(｡･ω･｡)ﾉ"
...
</code></pre>
<p>My attempt to alter the stream on the fly looks like this:</p>
<pre><code>import chardet, io, codecs

with open(self.csv_path, 'rb') as rawdata:
    detected = chardet.detect(rawdata.read(1000))

detectedEncoding = detected['encoding']
with io.open(self.csv_path, 'r', encoding=detectedEncoding) as csv_file:
    csv_ascii_stream = codecs.getreader('ascii')(csv_file, errors='ignore')
    log( csv_ascii_stream.read() )
</code></pre>
<p>The result on the <code>log</code> line is: <code>UnicodeEncodeError: 'ascii' codec can't encode characters in position 36-40: ordinal not in range(128)</code> even though I explicitly constructed the StreamReader with <code>errors='ignore'</code></p>
<p>I would like the resulting stream (when read) to come out like this:</p>
<pre><code>"EventId","Rate","Attribute1","Attribute2","(?????)?"
...
</code></pre>
<p>or alternatively, <code>"EventId","Rate","Attribute1","Attribute2","()"</code> (using <code>'ignore'</code> instead of <code>'replace'</code>)</p>
<p>Why is the Exception happening anyway?</p>
<p>I've seen plenty of problems/solutions for decoding strings, but my challenge is to change the stream as it's being read (using <code>.next()</code>), because the file is potentially too large to be loaded into memory all at once using <code>.read()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You're mixing up the encode and decode sides.</p>
<p>For decoding, you're doing fine. You open it as binary data, <code>chardet</code> the first 1K, then reopen in text mode using the detected encoding.</p>
<p>But then you're trying to further decode that already-decoded data as ASCII, by using <a href="https://docs.python.org/3/library/codecs.html#codecs.getreader" rel="nofollow"><code>codecs.getreader</code></a>. That function returns a <a href="https://docs.python.org/3/library/codecs.html#codecs.StreamReader" rel="nofollow"><code>StreamReader</code></a>, which <em>decodes</em> data from a stream. That isn't going to work. You need to <em>encode</em> that data to ASCII.</p>
<p>But it's not clear why you're using a <code>codecs</code> stream decoder <em>or</em> encoder in the first place, when all you want to do is encode a single chunk of text in one go so you can log it. Why not just call the <code>encode</code> method?</p>
<pre><code>log(csv_file.read().encode('ascii', 'ignore'))
</code></pre>
<p>If you want something that you can use as a lazy iterable of lines, you <em>could</em> build something fully general, but it's a lot simpler to just do something like the <code>UTF8Recorder</code> example in the <a href="https://docs.python.org/2/library/csv.html#examples" rel="nofollow"><code>csv</code></a> docs:</p>
<pre><code>class AsciiRecoder:
    def __init__(self, f, encoding):
        self.reader = codecs.getreader(encoding)(f)    
    def __iter__(self):
        return self
    def next(self):
        return self.reader.next().encode("ascii", "ignore")
</code></pre>
<p>Or, even more simply:</p>
<pre><code>with io.open(self.csv_path, 'r', encoding=detectedEncoding) as csv_file:
    csv_ascii_stream = (line.encode('ascii', 'ignore') for line in csv_file)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm a little late to the party with this, but here's an alternate solution, using <a href="https://docs.python.org/2/library/codecs.html#streamrecoder-objects" rel="nofollow"><code>codecs.StreamRecoder</code></a>:</p>
<pre><code>from codecs import getencoder, getdecoder, getreader, getwriter, StreamRecoder

with io.open(self.csv_path,  'rb') as f:
    csv_ascii_stream = StreamRecoder(f, 
                                     getencoder('ascii'), 
                                     getdecoder(detectedEncoding),
                                     getreader(detectedEncoding), 
                                     getwriter('ascii'), 
                                     errors='ignore')

    print(csv_ascii_stream.read())
</code></pre>
<p>I guess you may want to use this if you need the flexibility to be able to call <code>read()</code>/<code>readlines()</code>/<code>seek()</code>/<code>tell()</code> etc. on the stream that gets returned. If you just need to iterate over the stream, the generator expression abarnert provided is a bit more concise.</p>
</div>
<span class="comment-copy">Why not just use <code>io.open(self.csv_path, 'r', encoding='ascii', errors='ignore')</code> directly?</span>
<span class="comment-copy">@dano My impression is that if I open a UTF-16 file as ascii, every 8 bits will be incorrectly interpreted as a character, instead of every 16, and the entire file will be misread. My goal is to read the file in its correct encoding, and then convert it to an ascii stream on the fly.</span>
<span class="comment-copy">Thanks for looking at this. The log is just for debugging purposes so I could see what my reader is spitting out. I wish to do the equivalent of what you're doing (re-encoding as ascii) but on the stream. Is that possible?</span>
<span class="comment-copy">I've done what you suggested (convertet <code>getreader</code> to <code>getwriter</code>) and now <code>ascii_stream.read()</code> is just returning the original stream (<code>EventId,Rate,Attribute1,Attribute2,(｡･ω･｡)ﾉ...</code> i.e. not valid ASCII). Am I missing some other step? (Like starting a new reader off the outpout of the writer?)</span>
<span class="comment-copy">@Alain: Of course it is. Just not by using a decoding reader. If you can show exactly what you're trying to do, I can show you how to do it. But you may want to just look at examples like the <a href="https://docs.python.org/2/library/csv.html#examples" rel="nofollow noreferrer"><code>UTF8Recoder</code></a> in the <code>csv</code> docs, or I think there are a few in the <code>Unicode HOWTO</code>, until you get the idea.</span>
<span class="comment-copy">My end goal is to run the stream through a <code>csv.reader</code> - which only accepts an ascii stream. I've taken a look at that UTF8Recoder, but had a hard time figuring out at what point the stream was being converted from the original encoding to the desired encoding (which in my case would be Ascii, but appears to be UTF8 here).</span>
<span class="comment-copy">The line <code>csv_ascii_stream = (line.encode('ascii', 'ignore') for line in csv_file)</code> appears to have worked! Thank you so much!</span>
