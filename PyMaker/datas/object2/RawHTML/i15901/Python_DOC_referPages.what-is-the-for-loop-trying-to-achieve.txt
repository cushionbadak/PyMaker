<div class="post-text" itemprop="text">
<p>This probably is very simple but can someone explain what the below is meant to achieve?</p>
<pre><code>def clean_param_value(self, value):
    for s, r in (('&lt;', '{'), ('&gt;', '}'), (' ', '_')):
        value.replace(s, r)
</code></pre>
<p>It is called from </p>
<pre><code>    params = dict(
        (item['ParameterName'],
         self.clean_param_value(item['ParameterValue']))
        for item in cursor.fetchall()
        )
</code></pre>
<p>In the <code>for</code> loop are the variables <code>s</code> and <code>r</code> assigned to <code>'&lt;'</code> and <code>'{'</code> respectively and a <code>replace</code> is performed on the value field? Followed by the other two sets in <code>for</code> loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>It loops through the tuple of tuples <code>('&lt;', '{'), ('&gt;', '}'), (' ', '_')</code>, and "unpacks" <code>s</code> and <code>r</code> as the 1st and 2nd element in the tuple respectively. </p>
<p>Then it does a replace, so ultimately replacing <code>&lt;</code> with <code>{</code> etc</p>
</div>
<div class="post-text" itemprop="text">
<h2>The first code</h2>
<p><code>for s, r in (('&lt;', '{'), ...)</code> will assign <code>&lt;</code> to <code>s</code> and <code>{</code> to <code>r</code>, and next items in next iteration (tuple unpacking).</p>
<p>Inside the loop <code>str.replace</code> return a new string that replaced all occurrence of <code>s</code> with <code>r</code>. So it is meant to be there to replace <code>&lt;</code> with <code>{</code>, <code>&gt;</code> with <code>}</code>, <code></code> with <code>_</code>.</p>
<p>But, NO. It does not because <code>str.replace</code> returns a new string, and <strong>does not replace the string inplace</strong>.</p>
<p>To be correct, it should assign back the return value. And the method should return the replaced string.</p>
<pre><code>def clean_param_value(self, value):
    for s, r in (('&lt;', '{'), ('&gt;', '}'), (' ', '_')):
        # s, r = '&lt;', '{'  # 1st iteration
        # s, r = '&gt;', '}'  # 2nd iteration
        # s, r = ' ', '_'  # 3rd iteration
        value = value.replace(s, r)
    return value
</code></pre>
<hr/>
<p>BTW, here's more efficient way to do it.</p>
<p>You can use <a href="https://docs.python.org/2/library/stdtypes.html#str.translate" rel="nofollow"><code>str.translate</code></a>.</p>
<p>In Python 2.x, with <a href="https://docs.python.org/2/library/string.html#string.maketrans" rel="nofollow"><code>string.maketrans</code></a>:</p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; tbl = string.maketrans('&lt;&gt; ', '{}_')
&gt;&gt;&gt; '&lt;hello world&gt;'.translate(tbl)
'{hello_world}'
</code></pre>
<p>In python 3.x:</p>
<pre><code>&gt;&gt;&gt; tbl = str.maketrans('&lt;&gt; ', '{}_')
&gt;&gt;&gt; '&lt;hello world&gt;'.translate(tbl)
'{hello_world}'
</code></pre>
<h2>The second code</h2>
<p>The second part is <a href="https://docs.python.org/2/library/functions.html#func-dict" rel="nofollow"><code>dict</code></a> with <a href="https://docs.python.org/2/tutorial/classes.html#generator-expressions" rel="nofollow">generator expression</a>:</p>
<pre><code>&gt;&gt;&gt; rows = [
...     {'name': 'dog', 'value': 'bow wow', 'other_value': 'blah'},
...     {'name': 'cat', 'value': 'meow meow', 'other_value': 'other blah'},
... ]
&gt;&gt;&gt; dict((item['name'], item['value']) for item in rows)
{'dog': 'bow wow', 'cat': 'meow meow'}
</code></pre>
<p>This is getting <code>name</code>, <code>value</code> values from fetched rows to make a new dictionary.</p>
<p>With the fixed version of <code>clean_param_value</code>, it will result in something like:</p>
<pre><code>&gt;&gt;&gt; dict((item['name'], clean_param_value(item['value'])) for item in rows)
{'dog': 'bow_wow', 'cat': 'meow_meow'}
</code></pre>
<p>with dictionary comprehension:</p>
<pre><code>&gt;&gt;&gt; {item['name']: clean_param_value(item['value']) for item in rows}
{'dog': 'bow_wow', 'cat': 'meow_meow'}
</code></pre>
</div>
<span class="comment-copy">You have described pretty much exactly what's happening, so what is it you're finding confusing?</span>
<span class="comment-copy">Presumably there is a <code>value = </code> and <code>return value</code> missing here, because the code, as posted, won't replace anything.</span>
<span class="comment-copy">Thanks for clarifying, much appreciated</span>
<span class="comment-copy">Just to be clear, the code presented by OP does nothing useful. Assuming <code>value</code> is a string, <code>value.replace(s, r)</code> returns a new string but <code>value</code> itself is not changed.</span>
<span class="comment-copy">@MartijnPieters, Thank you for pointing it out. edited accordingly.</span>
<span class="comment-copy">You do want to address what the function (presumably) achieves. As it stands the posted code won't do anything at all though. It's great you are showing the correct and efficient method, but you didn't actually answer the question yet.</span>
<span class="comment-copy">And did you know there is a static method on <code>str</code> called  <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer"><code>str.maketrans()</code></a>?</span>
<span class="comment-copy">@MartijnPieters, No, I didn't know that. Thank you again.</span>
<span class="comment-copy">great explanation falsetru thanks a lot</span>
