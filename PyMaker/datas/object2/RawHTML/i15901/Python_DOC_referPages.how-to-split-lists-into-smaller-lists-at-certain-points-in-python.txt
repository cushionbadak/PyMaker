<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks">How do you split a list into evenly sized chunks?</a>
<span class="question-originals-answer-count">
                    57 answers
                </span>
</li>
</ul>
</div>
<p>I have a list of different things and I was wondering how to split it every time it hits a new name? </p>
<p>So what I would like to have is have it take a list that looks like this:</p>
<pre><code>list = [corn, 14, 2, 500, broccoli, 2, 10, 1400, potato, 2, 14, 7]
</code></pre>
<p>and it will create 3 lists:</p>
<pre><code>list1 = [corn, 14, 2, 500]

list2 = [broccoli, 2, 10, 1400]

list3 = [potato, 2, 14, 7]
</code></pre>
<p>I am guessing it would be something along the lines of a loop that repeats a new list until it hits a non integer, but I really dont know how it would look set up.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this, assuming that new names appear every four elements as in the sample input:</p>
<pre><code>lst = ['corn', 14, 2, 500, 'broccoli', 2, 10, 1400, 'potato', 2, 14, 7]
[lst[i:i+4] for i in xrange(0, len(lst), 4)]
=&gt; [['corn', 14, 2, 500], ['broccoli', 2, 10, 1400], ['potato', 2, 14, 7]]
</code></pre>
<p>The above will return a list of sublists, split every four elements. If you're certain that there will be exactly twelve elements in the input list, it's possible to directly assign the resulting sublists:</p>
<pre><code>lst1, lst2, lst3 = [lst[i:i+4] for i in xrange(0, len(lst), 4)]
</code></pre>
<p>Now each variable will contain the expected result:</p>
<pre><code>lst1
=&gt; ['corn', 14, 2, 500]
lst2
=&gt; ['broccoli', 2, 10, 1400]
lst3
=&gt; ['potato', 2, 14, 7]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For checking if a String is a number (and don't forget to include quotation marks if you're going to use that code exactly), look at <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow">str.isdigit()</a>.</p>
<p>I.e.</p>
<pre><code>&gt;&gt;&gt; 'corn'.isdigit()
False
&gt;&gt;&gt; '123'.isdigit()
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This may not be the prettiest solution but it's able to respond when the delimiter size changes (say you want to track another number between corn and broccoli) and also allows it to grow beyond a set of three lists if you want.</p>
<pre><code>lst = ["corn", 14, 2, 500, "broccoli", 2, 10, 1400, "potato", 2, 14, 7]
string_indices = [index for (index, value) in enumerate(lst) 
                  if isinstance(value, str)]

# We want to include the last group as well
string_indices.append(len(lst))

sublists = [lst[string_indices[x]:string_indices[x+1]] 
            for x in xrange(len(string_indices) - 1)]

lst1, lst2, lst3 = sublists
</code></pre>
<p>At the end, <code>sublists</code> is equal to:</p>
<pre><code>[['corn', 14, 2, 500], ['broccoli', 2, 10, 1400], ['potato', 2, 14, 7]]                                                                                  
</code></pre>
<p>...and it unpacks into the three lists as shown above.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is hideous but will get the job done for ya. </p>
<p><pre><code>
l = ["corn", 14, 2, 500, "broccoli", 2, 10, 1400, "potato", 2, 14, 7, 5, 6, 7, "carrot"]
out = []
for i in xrange(0, len(l)):
    if isinstance(l[i], str):
        tmp = []
        tmp.append(l[i])
        i += 1
        while (i &lt; len(l)) and isinstance(l[i], int) :
            tmp.append(l[i])
            i += 1
        out.append(tmp)
In [41]: out
Out[41]:
[['corn', 14, 2, 500],
 ['broccoli', 2, 10, 1400],
 ['potato', 2, 14, 7, 5, 6, 7],
 ['carrot']]</code></pre></p>
<p></p></div>
<div class="post-text" itemprop="text">
<p>There are two problems in the single line of code that you posted</p>
<ol>
<li><p>it's likely that you want to use strings rather than generic objects
in your list</p></li>
<li><p><code>list</code> is a <code>python</code> function that creates a list from a sequence or
an iterable and deserves to be let on its own, so we name your list
<code>a_list</code></p></li>
</ol>
<p>What follows is based on a single assumption, that you want to split on each string and only on strings</p>
<pre><code>a_list = ['corn', 14, 2, 500, 'broccoli', 2, 10, 1400, 'potato', 2, 14, 7]
# initialize an empty list (I can do it in other ways, but I want
# to show you an use of the `list` builtin function) and a counter `n`

list_of_sublists = list() # the function 'list' is called with no arguments
n = 0

# iterate for the index and the corresponding element of the list
for i, elt in enumerate(a_list):
    # when we reach the second string in the list we append the sublist
    # from the previous beginning `n=0`, do you remember? up to the current
    # index, that in python is _excluded_ from the sublist, and finally we
    # update the index for the start of the next sublist
    # NOTA BENE the SECOND string triggers the saving of the FIRST sublist
    if i and type(elt) == str:
        list_of_sublists.append(a_list[n:i])
        n = i
    # and of course the code above is triggered for the third, the ...,
    # the last string in the list

# but when we reach the end of the loop, having found that there are no
# further strings past the last one ;-) we have still the last sublist,
# the one that starts with the last string, that waits for being appended
# so here we do this last append

list_of_sublists.append(a_list[n:])

print list_of_sublists
</code></pre>
<p>Someone will object that the test <code>type(elt) == str</code> will fail for objects that are subclassed from str, or that quacks like a str, but I assume that you have 'nuff stuff to think about already...</p>
</div>
<span class="comment-copy">@zsong what about if <code>a_list = [corn, 14, 2, broccoli, potato, 2, 14, 7]</code>?</span>
<span class="comment-copy">@veedrac, the question is: "I have a list of different things and I was wondering how to split it every time it hits a new name?".</span>
<span class="comment-copy">But to be honest, there is probably a better data structure for this data.</span>
<span class="comment-copy">You know, if someone has a question due to being a beginner at coding, it might not be the most productive to sit on a pedestal. Nobody else felt it was needed to talk crap about how i am asking a beginners question.</span>
<span class="comment-copy">@Pewkie I stand corrected.  I admit that I was upset by the failure of your question to show effort toward a solution and that I over reacted, but if you're a beginner at coding the limits I had perceived in your question are absolutely justified.  My bad I didn't understand.  May I ask if you've have studied my answer?  I think that it deserves your attention despite the offensive wording that I've used.</span>
