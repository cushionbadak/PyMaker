<div class="post-text" itemprop="text">
<p>I am trying to read in a file that is composed of groups of data each having a header line.  The number of groups associated with each header can vary.  In the example below you can see that the lines that begin with an 'A' are a header record and the 'B' and 'C' lines are associated with the 'A' record that immediately precedes it.  The second group shows a header record with 4 detail records associated.  Here is an example of the data-</p>
<pre><code>A1001014
B1234
C5678
A10082014
B1234
C5678
B2222
C2222
A10072014
B7777
C7676
</code></pre>
<p>How can I get a list for each header record like the following-</p>
<pre><code>[10012014,1234,5678] [10082014,1234,5678] [10082014,2222,2222] [10072014,7777,7676]
</code></pre>
<p>I've tried several generators functions but I can't seem to figure out how to group the "secondary" (The 3rd list above) records to a previous header record.<br/>
The following is what I came up so far, but it doesn't work when there are more than 2 records per header i.e. it skips the B2222 and C2222. Any help is appreciated!</p>
<pre><code>   def readFile(f):
        for line in f:
          if line[0] == ('1'):  #This isn't shown in the example data below
            procDate=line[23:29] 

          if line[0] == ('A'):
            try:
                line2 = f.next()
                line3 = f.next()
            except StopIteration:
                line3 = ''

            yield line,line2,line3,procDate
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that, instead of creating a list of lines, you're trying to create a fixed number (2) of separate variables. What you want to do is to keep reading lines until you get one that starts with <code>'A'</code> (or reach the end), and <code>append</code> each one to a list until that happens.</p>
<p>This is a more general principle: if you want a variable number of anything, like 2 to 4 lines, you generally need a list (or other collection) and a loop.</p>
<p>Also, calling <code>f.next()</code> in the middle of a <code>for line in f:</code> isn't illegal or anything, but it is going to make it very hard to follow what's happening. You <em>could</em> put another loop inside the outer loop to keep reading until the next <code>'A'</code>, and then somehow "put back" that <code>'A'</code> line for the next group, but there's no reason for that; just use a single, flat loop.</p>
<p>This is what I meant in the comments by:</p>
<blockquote>
<p>loop over the lines one by one, keeping a "current group" list that you store and start over each time you hit another line starting with "A"</p>
</blockquote>
<p>In other words:</p>
<pre><code>current_group = []
for line in f:
    if line[0] == 'A':
        # We're starting another group, which also means we
        # finished the previous group, unless we're at the
        # start of the file.
        if current_group:
            yield current_group
        current_group = [line]
    else:
        # We're in the middle of a group
        current_group.append(line)
# At the end of the file, we also just finished the previous
# group.
if current_group:
    yield current_group
</code></pre>
<p>You should be able to figure out how to add your <code>'1'</code> case and your <code>procDate</code> and so on from here.</p>
<hr/>
<p>There are more concise ways to do this is to use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>groupby</code></a>. For example, you can group the lines into alternating groups based on whether they start with <code>'A'</code> or not, then zip the pairs together and chain them:</p>
<pre><code>groups = (g for k, g in groupby(f, lambda line: line[0]=='A'))
for group in map(chain, groups, groups):
    yield list(group)
</code></pre>
<p>Alternatively, you can use a more complicated grouping function so you don't need the zipping and chaining part. However you write it, it's going to work out to be about 3 lines of code, but probably not understandable to a novice.</p>
</div>
<span class="comment-copy">You've insufficiently described the header pattern. How do we know which lines are headers and which lines are secondary records?</span>
<span class="comment-copy">It would be helpful if you show the code you have right now.</span>
<span class="comment-copy">@b4hand He did say that the A letter marks a header line.</span>
<span class="comment-copy">The concise and simple, but somewhat abstract, way to do this is with <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code></a>.</span>
<span class="comment-copy">The concrete and novice-friendly, but painfully verbose, way is to loop over the lines one by one, keeping a "current group" list that you store and start over each time you hit another line starting with "A" (and make sure to store the last one when you get to the end of the file).</span>
<span class="comment-copy">I had <a href="https://gist.github.com/joncle/55fa088ba6c957f23fa8" rel="nofollow noreferrer">this</a> (mostly for a laugh - and I'm tired), but it also gives incorrect results according to the OP</span>
<span class="comment-copy">@JonClements: Yeah, I originally had a separate <code>zip(groups, groups)</code> followed by <code>map(chain.from_iterable, pairs)</code> until I realized that it made more sense to just chain the pairs directly. The real fun version is to write the group key function that makes the pairing unnecessary. That always feels like it should be simpler, and it never isâ€¦</span>
<span class="comment-copy">Thanks! That gets me close but I may have missed something. Using the first suggestion (not the groupby), I get the second and third records grouped into 1 list instead of separated into two lists with the same item. What's the best way to post my latest code?</span>
