<div class="post-text" itemprop="text">
<p>I'm very new to python, was playing with some code. I'm actually trying to parse a html webpage and extract some information from the parsed document:</p>
<pre><code>from urllib import request
from bs4 import BeautifulSoup

#some code here...

link = str(input("Enter URL: "))
sock = request.urlopen(link)
pageText = sock.read()
sock.close()

#some code here...

file = open("C:/test.txt", 'w')
file.write(pageText.decode("utf-8"))

#some code here...
</code></pre>
<p>I'm getting this error in file.write() line, and I searched on the internet still have no clue on how to fix that. </p>
<p>The Error:</p>
<pre><code>Traceback (most recent call last):
  File "C:/Users/Monster/PycharmProjects/TestPro_1/Testfile.py", line 16, in &lt;module&gt;
    file.write(pageText.decode("utf-8"))
  File "C:\Python34\lib\encodings\cp1252.py", line 19, in encode
    return codecs.charmap_encode(input,self.errors,encoding_table)[0]
UnicodeEncodeError: 'charmap' codec can't encode characters in position 413334-413340: character maps to &lt;undefined&gt;
</code></pre>
<p>My code <em>works</em> perfectly for some sites like www.google.com or www.flipkart.com and gives the error for some URLS like www.facebook.com and www.youtube.com. I think one possilbe reason it doesn't works for www.facebook.com and youtube.com because they are developed in PHP or some other language and not an HTML web pages is that correct?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you're trying to write to a text file with the <code>cp1252</code> encoding, but your data include characters that don't exist in <code>cp1252</code>.</p>
<p>In Python, the <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow"><code>open</code></a> function takes a optional <code>encoding</code> argument for text files. As the docs say, if you don't specify anything:</p>
<blockquote>
<p>The default encoding is platform dependent (whatever <code>locale.getpreferredencoding()</code> returns)</p>
</blockquote>
<p>On Windows, the "preferred encoding" returned by that function is going to be whatever you've set as your default for the system. On a US version of Windows, if you haven't changed the settings, the pre-configured default is "code page 1252", which is Microsoft's variation on IBM's variation on Latin-1. That can only handle 256 different characters (almost, but not quite, identical to the first 256 characters in Unicode). If you have any other characters, you're going to get an error.</p>
<p>The reason this works on some pages but not others is that some pages don't have anything but normal English characters that fit into every character set.</p>
<hr/>
<p>If you really want to save a UTF-8 text file, you have to do that explicitly:</p>
<pre><code>f = open('C:/test.txt', 'w', encoding='utf-8')
f.write(pageText.decode('utf-8'))
</code></pre>
<p>If you want to save a cp1252 text file—or, rather, whatever your system's default encoding happens to be, which may be UTF-8 if someone runs your script on a Mac or Shift-JIS-based cp932 on a Japanese Windows box—by skipping or replacing or escaping the characters that don't fit into cp1252, you can do that too:</p>
<pre><code>f = open('C:/test.txt', 'w', errors='replace')
f.write(pageText.decode('utf-8'))
</code></pre>
<p>Or, of course, if you want cp1252 no matter what the system is set to, say so:</p>
<pre><code>f = open('C:/test.txt', 'w', encoding='cp1252', errors='replace')
f.write(pageText.decode('utf-8'))
</code></pre>
<p>If you want to save the raw bytes without worrying about what they are, open the file in binary mode and don't <code>decode</code> the bytes in the first place:</p>
<pre><code>f = open('C:/test.txt', 'wb')
f.write(pageText)
</code></pre>
<p>Of course if you then open that file in a cp1252 (or Shift-JIS, etc.) text editor, it's going to look like mojibake… but that's not your program's fault anymore. :)</p>
<hr/>
<p>However, you've got another problem here. You're assuming that every web page is UTF-8. That's not true. Pre-HTML5 web pages are, in fact, in Latin-1 by default—but they can specify a different encoding in the headers (or in a <code>meta</code> tag, or, for XHTML, in the top-level XML tag). In particular, try this with the Facebook page:</p>
<pre><code>&gt;&gt;&gt; print(sock.getheader('Content-Type'))
'text/html; charset=utf-8'
</code></pre>
<p>That how you know that it's, in this case, UTF-8.</p>
<p>For HTML5, it's… <a href="http://www.w3.org/TR/html5/syntax.html#prescan-a-byte-stream-to-determine-its-encoding" rel="nofollow">a lot more complicated</a>. Ideally you'll want to use a library that does this for you. (Since you're already using BeautifulSoup, for many common cases its "Unicode, dammit" will work well enough—and it also works pretty well for pre-HTML5—but a standards-correct implementation is even better.)</p>
</div>
<span class="comment-copy">Can you post a real example? That <code>open(C:/test.txt)</code> obviously won't even compile.</span>
<span class="comment-copy">@abarnert Real example? Everything in the code mentioned in the question is compiling without any error and test.txt is on my desktop actually. The code is actually from a book/blog named "Dive into python", I guess. I'm using python 3.4</span>
<span class="comment-copy">I'm using 3.4 too. There is no way that <code>open(C:/test.txt)</code> doesn't give you a <code>SyntaxError</code>.</span>
<span class="comment-copy">Even with <code>file = open("C:/test.txt")</code>, this still isn't going to work; it'll give you an <code>UnsupportedOperation: not writable</code>, because you can't open a file in default (read) mode and then write to it. And I wouldn't be surprised if there weren't more errors that are in this code but not in the real code. Which is exactly why we need real code: a <a href="http://stackoverflow.com/help/mcve">minimal, complete, verifiable example</a>, not just an approximation.</span>
<span class="comment-copy">@EdwardMckinzie: You can edit <i>this</i> question to have a real example, and to be clearer about what you want and exactly what's going wrong. That will likely get you better answers and some upvotes, instead of downvotes, close votes, and attempts to answer your question that may or may not be what you need.</span>
<span class="comment-copy">to avoid the impression that <code>open()</code> always uses <code>cp1252</code> on Windows, you could repeat "to save the text to a file using the current locale encoding (cp1252 in your case)" couple of times. Nominally, it is redandant (it should be clear from the context) but it might be educational in this case.</span>
<span class="comment-copy">btw, I don't know what is the default character encoding for html5. If it is not set explicitly (Content-type, <code>&lt;meta</code>, etc) then I wouldn't guess -- the algorithm is non-trivial.</span>
<span class="comment-copy">@J.F.Sebastian: Thanks. How is it now? (I also think it was worth pointing out that there are encodings that are common, and are neither Latin-1-like nor Unicode-based, so I used cp932 as an example.)</span>
<span class="comment-copy">@J.F.Sebastian: For the second one… good point; I'll edit again.</span>
<span class="comment-copy">perfect :) good work.</span>
