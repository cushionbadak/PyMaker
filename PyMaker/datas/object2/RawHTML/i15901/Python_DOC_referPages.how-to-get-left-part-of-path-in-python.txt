<div class="post-text" itemprop="text">
<p>How can I get the most left part of relative path in python?</p>
<p>I started with something like this:</p>
<pre><code>/var/tmp/workdir/1/foo/bar/test.jpg
</code></pre>
<p>Then I removed some of it to get:</p>
<pre><code>1/foo/bar/test.jpg
</code></pre>
<p>Using:</p>
<pre><code>rel_path = os.path.relpath(path,base_dir)
</code></pre>
<p>Now how can I get the most left part - the "1" ?</p>
<p>I can only find tools that go from the right side, but in this case I want the most left thing because it correspondents with a user ID. Also I want to avoid going from the right side, because there might be more sub directories.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>str.split</code> might give incorrect results if names contain <code>os.path.sep</code> (escaped of course). The safest solution imho is:</p>
<pre><code>basename = None # guards against UnboundLocalError in case of empty rel_path
while rel_path:
    rel_path, basename = os.path.split(rel_path)
print basename # this will be the leftmost component
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>poke mentioned the pathlib library that's built into Python 3.4. You can also use pathlib on Python 2.6 or 2.7 by running <code>pip install pathlib</code>, as stated here: <a href="http://pathlib.readthedocs.org/en/pep428" rel="nofollow">http://pathlib.readthedocs.org/en/pep428</a>.</p>
<p>Your code would look like this:</p>
<pre><code>&gt;&gt;&gt; from pathlib import PurePath
&gt;&gt;&gt; p = PurePath('1/foo/bar/test.jpg')
&gt;&gt;&gt; p.parts
('1', 'foo', 'bar', 'test.jpg')
</code></pre>
<p>And use <code>p.parts[0]</code> to get the part you want.</p>
<p>In fact, you could do the whole thing with pathlib as follows:</p>
<pre><code>&gt;&gt;&gt; from pathlib import PurePath
&gt;&gt;&gt; p = PurePath('/var/tmp/workdir/1/foo/bar/test.jpg')
&gt;&gt;&gt; p = p.relative_to('/var/tmp/workdir')
&gt;&gt;&gt; p.parts
('1', 'foo', 'bar', 'test.jpg')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you use Python 3.4, you could use the new <a href="https://docs.python.org/3/library/pathlib.html#accessing-individual-parts" rel="nofollow">pathlib</a> for this.</p>
<p>Otherwise, you could just use normal string manipulation to get that part, for example with <a href="https://docs.python.org/3/library/stdtypes.html#str.partition" rel="nofollow"><code>str.partition</code></a>:</p>
<pre><code>&gt;&gt;&gt; path = '1/foo/bar/test.jpg'
&gt;&gt;&gt; path.partition('/')
('1', '/', 'foo/bar/test.jpg')
</code></pre>
<p>You could also use <a href="https://docs.python.org/3/library/os.html#os.sep" rel="nofollow"><code>os.sep</code></a> instead of <code>'/'</code> if you want to split on the operating system’s path separator.</p>
</div>
<span class="comment-copy">You can use regular expression or if the id is always on the same place you can split by '/' and get the wanted element.</span>
<span class="comment-copy">I understand that the least thing I want to do is use split commands to manually get the first part. But why is there no command to just get the first part? I guess your approach will do, but it's a waste of cpu isn't it?</span>
<span class="comment-copy">I don't think you should worry about cpu: <code>100000 loops, best of 3: 4.39 µs per loop</code>. Unless you are expecting to parse thousands of paths pers second, each hundreds of components...</span>
<span class="comment-copy">Thank you. I will consider this, too. But I think for now I will go with the while loop, because this way I don't need extra libraries. But if I encounter more of that I will switch to your solution. Thanks again!</span>
