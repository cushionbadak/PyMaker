<div class="post-text" itemprop="text">
<p>I'm new to Python and have been writing out simple programs to get acquainted with the language.</p>
<p>What I am trying to determine is how to calculate output value types dynamically and return them accordingly.  The only way I can get the code to accurately output values is to hard code the casting of type float but i'd like to be able to have dynamic output. Any pointers in the right direction would be much appreciated!</p>
<p>Sample Input/Output:</p>
<ol>
* Input = 0, Output = 32.0  (Desired Output: 32)
</ol>
<ol>
* Input = 1, Output = 33.8
</ol>
<p>Code Example:</p>
<pre><code># Definite functions
def is_number(x):
    try:
        return int(x)
    except ValueError:
        try:
            return float(x)
        except ValueError:
            return False


def calc_fahrenheit(x):
    try:
        return (is_number(x) * 9.0) / 5 + 32
    except:
        raise

# Runtime Code
celsius = raw_input("Enter Celsius Temperature: ")

while(calc_fahrenheit(celsius) == False):
    celsius = raw_input("Please enter valid Celsuis Temperature: ")

print calc_fahrenheit(celsius)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sticking with your approach, I would recommend this. Instead of changing types dynamically, the result is formatted with <code>%g</code> to display as an integer if it is one, so a float is used all along.</p>
<pre><code># Definite functions
def to_number(x):
    try:
        return float(x)
    except ValueError:
        return False

def calc_fahrenheit(x):
    return x * 9.0 / 5 + 32

# Runtime Code
celsius = to_number(raw_input("Enter Celsius Temperature: "))
while not celsius:
    celsius = to_number(raw_input("Please enter valid Celsuis Temperature: "))

print 'Fahrenheit: %g' % calc_fahrenheit(celsius)
</code></pre>
<p>Also, I think <code>to_number()</code> is a more descriptive name for <code>is_number()</code>, which was removed from the <code>calc_fahrenheit()</code> function as it doesn't really belong there but in the validation loopâ€”which has been made Pythonic.</p>
<p>Hope that's what you're after.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if there is any more convenient way. You can do something like:</p>
<pre><code>if abs(output - round(output)) &lt; 0.0000001:
    return int(output)
else:
    return output
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>is_number()</code> function is nicely done (although <code>False</code> is the same as <code>0</code>, so if someone enters a non-number string, it will be treated as if he had entered <code>0</code>), but it's not actually what you need here.</p>
<p>Also, <code>is_number()</code> is misnamed since what it actually does is <em>convert</em> a string to a number.</p>
<p>Then, any number you input will be converted to a <code>float</code> anyway (because you're doing a calculation with <code>float</code>s with it), so you need to do your <code>int</code>/<code>float</code> check at output time:</p>
<p>Lastly, consider <a href="http://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow">Floating Point Arithmetic: Issues and Limitations</a> - a floating point calculation might yield results like <code>23.000000000001</code> that deviate from the actual result <code>23</code> because of rounding errors.</p>
<p>So you should be doing something like </p>
<pre><code>def get_celsius():
    while True:
        try:
            return float(raw_input("Enter a temperature value in Celsius: "))
        except ValueError:
            print("That's not a number! Try again.")

def convert_fahrenheit(c):
     return c * 9.0/5 + 32

c = get_celsius()
f = convert_fahrenheit(c)
if abs(int(f) - f) &lt; 0.00000001:
    print int(f)
else:
    print f
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use floats, operators work the way you expect on <code>float</code>'s and <code>int</code>'s
if you just remember to<br/>
<code>from __future__ import division</code>.</p>
<p>Your attmept - which is not very pythonic - can be written as shown below.</p>
<pre><code>while True:
    try:
        celsius = float(raw_input("Enter Celsius Temperature: "))
        print('%g' % ((celsius * 9.0) / 5 + 32))
        break
    except ValueError:
        print("woops, Try again :)\n")
</code></pre>
</div>
<span class="comment-copy"><a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem" title="what is the xy problem">meta.stackexchange.com/questions/66377/what-is-the-xy-problem</a></span>
<span class="comment-copy">I would like to know why the author give me "-1"... I would assume that to write a function getting a number is not a big problem. The main question for this post is how to return integer when the number should be integer but presented by float. In that case I don't see any mistake here.</span>
