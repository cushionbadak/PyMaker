<div class="post-text" itemprop="text">
<p>I found the following regex substitution example from the <a href="https://docs.python.org/2/library/re.html" rel="nofollow">documentation</a> for Regex. I'm a little bit confused as to what the prefix <code>r</code> does before the string?</p>
<pre><code>re.sub(r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):',
 ...        r'static PyObject*\npy_\1(void)\n{',
 ...        'def myfunc():')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Placing <code>r</code> or <code>R</code> before a string literal creates what is known as a <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="noreferrer">raw-string</a> literal.  Raw strings do not process escape sequences (<code>\n</code>, <code>\b</code>, etc.) and are thus commonly used for Regex patterns, which often contain a lot of <code>\</code> characters.</p>
<p>Below is a demonstration:</p>
<pre><code>&gt;&gt;&gt; print('\n') # Prints a newline character


&gt;&gt;&gt; print(r'\n') # Escape sequence is not processed
\n
&gt;&gt;&gt; print('\b') # Prints a backspace character

&gt;&gt;&gt; print(r'\b') # Escape sequence is not processed
\b
&gt;&gt;&gt;
</code></pre>
<p>The only other option would be to double every backslash:</p>
<pre><code>re.sub('def\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\s*\\(\\s*\\):',
 ...        'static PyObject*\\npy_\\1(void)\\n{',
 ...        'def myfunc():')
</code></pre>
<p>which is just tedious.</p>
</div>
<div class="post-text" itemprop="text">
<p>The r means that the string is to be treated as a raw string, which means all escape codes will be ignored.</p>
<p>The python document says this precisely:</p>
<p>"String literals may optionally be prefixed with a letter 'r' or 'R'; such strings are called raw strings and use different rules for interpreting backslash escape sequences. "</p>
</div>
