<div class="post-text" itemprop="text">
<p>Every time I use:</p>
<pre><code>time.strftime("%z")
</code></pre>
<p>I get:</p>
<pre><code>Eastern Daylight Time
</code></pre>
<p>However, I would like the UTC offset in the form +HHMM or -HHMM. I have even tried:</p>
<pre><code>time.strftime("%Z")
</code></pre>
<p>Which still yields:</p>
<pre><code>Eastern Daylight Time
</code></pre>
<p>I have read several other posts related to strftime() and %z always seems to return the UTC offset in the proper +HHMM or -HHMM format. How do I get strftime() to output in the +HHMM or -HHMM format for python 3.3?</p>
<p>Edit: I'm running Windows 7</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>For a proper solution, see <a href="https://stackoverflow.com/questions/25187488/python-strftime-utc-offset-not-working-as-expected-in-windows/26369814#26369814">abarnert’s answer below</a>.</strong></p>
<hr/>
<p>You can use <a href="https://docs.python.org/3/library/time.html#time.altzone" rel="nofollow noreferrer"><code>time.altzone</code></a> which returns a negative offset in seconds. For example, I’m on CEST at the moment (UTC+2), so I get this:</p>
<pre><code>&gt;&gt;&gt; time.altzone
-7200
</code></pre>
<p>And to put it in your desired format:</p>
<pre><code>&gt;&gt;&gt; '{}{:0&gt;2}{:0&gt;2}'.format('-' if time.altzone &gt; 0 else '+', abs(time.altzone) // 3600, abs(time.altzone // 60) % 60)
'+0200'
</code></pre>
<hr/>
<p>As abarnert mentioned in the comments, <code>time.altzone</code> gives the offset when DST is active while <code>time.timezone</code> does for when DST is not active. To figure out which to use, you can do what J.F. Sebastian suggested <a href="https://stackoverflow.com/a/3168394/216074">in his answer to a different question</a>. So you can get the correct offset like this:</p>
<pre><code>time.altzone if time.daylight and time.localtime().tm_isdst &gt; 0 else time.timezone
</code></pre>
<p>As also suggested by him, you can use the following in Python 3 to get the desired format using <a href="https://docs.python.org/3/library/datetime.html#timezone-objects" rel="nofollow noreferrer">datetime.timezone</a>:</p>
<pre><code>&gt;&gt;&gt; datetime.now(timezone.utc).astimezone().strftime('%z')
'+0200'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In 2.x, if you look at the docs for <a href="https://docs.python.org/2/library/time.html#time.strftime" rel="nofollow noreferrer"><code>time.strftime</code></a>, they don't even <em>mention</em> <code>%z</code>. It's not guaranteed to exist at all, much less to be consistent across platforms. In fact, as <a href="https://docs.python.org/2/library/time.html#id2" rel="nofollow noreferrer">footnote 1</a> implies, it's left up to the C <code>strftime</code> function. In <a href="https://docs.python.org/3/library/time.html#time.strftime" rel="nofollow noreferrer">3.x</a>, on the other hand, they do mention <code>%z</code>, and the footnote that explains that it doesn't work the way you'd expect is not easy to see; that's <a href="http://bugs.python.org/issue20010" rel="nofollow noreferrer">an open bug</a>.</p>
<p>However, in 2.6+ (including all 3.x versions), <a href="https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer"><code>datetime.strftime</code></a> <em>is</em> guaranteed to support <code>%z</code> as "UTC offset in the form +HHMM or -HHMM (empty string if the the object is naive)." So, that makes for a pretty easy workaround: use <code>datetime</code> instead of <code>time</code>. Exactly how to change things depends on what exactly you're trying to do — using <a href="https://dateutil.readthedocs.io/en/stable/" rel="nofollow noreferrer">Python-dateutil</a> <code>tz</code> then <code>datetime.now(tz.tzlocal()).strftime('%z')</code> is the way to get just the local timezone formatted as a GMT offset, but if you're trying to format a complete time the details will be a little different.</p>
<p>If you look at the source, <a href="https://hg.python.org/cpython/file/2.7/Modules/timemodule.c#l391" rel="nofollow noreferrer"><code>time.strftime</code></a> basically just checks the format string for valid-for-the-platform specifiers and calls the native <code>strftime</code> function, while <a href="https://hg.python.org/cpython/file/2.7/Modules/datetimemodule.c#l1154" rel="nofollow noreferrer"><code>datetime.strftime</code></a> has a bunch of special handling for different specifiers, including <code>%z</code>; in particular, it will replace the <code>%z</code> with a formatted version of <code>utcoffset</code> before passing things on to <code>strftime</code>. The code has changed a few times since 2.7, and even been radically reorganized once, but the same difference is basically there even in the pre-3.5 trunk.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>time.timezone</code> to get the time offset in seconds.</p>
<p>Format it using :</p>
<pre><code>("-" if time.timezone &gt; 0 else "+") + time.strftime("%H:%M", time.gmtime(abs(time.timezone)))
</code></pre>
<p>to convert the same to +/-HH:MM format.</p>
<p>BTW isn't this supposed to be a bug ? According to <code>strftime</code> <a href="https://docs.python.org/3.4/library/time.html#time.strftime" rel="nofollow noreferrer">docs</a>.</p>
<p>Also I thought <a href="https://stackoverflow.com/questions/5537876/get-utc-offset-from-time-zone-name-in-python">this</a> SO answer might help you to convert from Zone offset string to HH:MM format. But since <code>"%z"</code> is not working as expected, I feel its moot.</p>
<p>NOTE: The <a href="https://docs.python.org/3/library/time.html#time.timezone" rel="nofollow noreferrer"><code>time.timezone</code></a> is immune to Daylight savings.</p>
</div>
<div class="post-text" itemprop="text">
<p>It will come as no surprise that this bug persists in, what is the latest Windows version available currently, Win 10 Version 1703 (Creators). However, time marches on and there is a lovely date-and-time library called <a href="https://pendulum.eustace.io/docs/" rel="nofollow noreferrer">pendulum</a> that does what the question asks for. Sébastien Eustace (principal author of the product?) has shown me this.</p>
<pre><code>&gt;&gt;&gt; pendulum.now().strftime('%z')
'-0400'
</code></pre>
<p>pendulum assumes UTC/GMT unless told otherwise, and keeps timezone with the date-time object. There are many other possibilities, amongst them these:</p>
<pre><code>&gt;&gt;&gt; pendulum.now(tz='Europe/Paris').strftime('%z')
'+0200'
&gt;&gt;&gt; pendulum.create(year=2016, month=11, day=5, hour=16, minute=23, tz='America/Winnipeg').strftime('%z')
'-0500'
&gt;&gt;&gt; pendulum.now(tz='America/Winnipeg').strftime('%z')
'-0500'
</code></pre>
</div>
<span class="comment-copy">I can't reproduce what you've observed: <code>In [2]: time.strftime("%z") Out[2]: '-0500'</code>. Can you give us more details? What you're saying <a href="https://docs.python.org/3.4/library/time.html#time.strftime" rel="nofollow noreferrer">contradicts the documentation</a>.</span>
<span class="comment-copy">@PatrickCollins I’m also not getting an offset but <code>'Mitteleuropäische Sommerzeit'</code> instead (Windows 8, Python 2.7, 3.3, and 3.4).</span>
<span class="comment-copy">I'm getting similar results on Windows 7 <code>time.strftime("%z") -&gt; "Eastern Daylight Time"</code> for Python 2.6.6, 2.7.2, 3.2.2, and 3.3.2.</span>
<span class="comment-copy">Unfortunately the libraries under Windows don't support <code>%z</code>, and Python relies on those libraries. See <a href="http://msdn.microsoft.com/en-us/library/fe06s4ak.aspx" rel="nofollow noreferrer">msdn.microsoft.com/en-us/library/fe06s4ak.aspx</a></span>
<span class="comment-copy">Window's incorrect result for <code>%z</code> is an open bug: <a href="http://bugs.python.org/issue20010" rel="nofollow noreferrer">bugs.python.org/issue20010</a></span>
<span class="comment-copy">This is a good answer. I edited because your code had some syntax errors. I think it is also worth pointing out MarkRansom's comment: "Unfortunately the libraries under Windows don't support %z, and Python relies on those libraries. See msdn.microsoft.com/en-us/library/fe06s4ak.aspx"</span>
<span class="comment-copy">@Raeven Your attempted edit did not fix anything and was at such rejected. <code>//</code> is integer division and a valid operation in Python. Your edit broke the code to produce the desired output.</span>
<span class="comment-copy">That's odd. My edit runs fine for me while your code fails. However, I'm running Python 3. You are running Python 2 I guess?</span>
<span class="comment-copy">@Raeven No, it works on both Python 3 and 2. What error do you get?</span>
<span class="comment-copy">I'll have to take that back. It's working for me now. I must not have fully copied your text the first time.</span>
<span class="comment-copy">On Python 3, using only stdlib: <code>datetime.now(timezone.utc).astimezone().strftime('%z')</code></span>
<span class="comment-copy">This is another good way to determine the UTC offset.</span>
<span class="comment-copy">Considering that the question asks about the offset for Eastern Daylight Time, I don't think he wants "immune to daylight savings". (Unfortunately, I think the question is underspecified as to what he actually <i>does</i> want, but I don't think this is it.)</span>
