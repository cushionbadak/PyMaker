<div class="post-text" itemprop="text">
<p>I have created a python calculator, I need to get it to restart, I have added the loop:</p>
<pre><code>#This line defines the end of the program so it restarts.
def sys():


#These lines will define each operation.
def add(x, y):
    return x + y

def subtract(x, y):
    return x - y

def Multiply(x, y):
    return x * y

def Divide(x, y):
    return x/y
#This asks the user what operation they would like to use
print("Please select operation ")
print("1. Add")
print("2. Subtract")
print("3. Multiply")
print("4. Divide")

#This tells the user to enter the number of the operation they would like
operation = input("Enter operation(1/2/3/4):")

#This asks the user to input the two numbers they would like the calculator to calculate
num1 = int(input("Please enter first number: "))
num2 = int(input("Please enter second number: "))


#This is the part of the program that will calculate the calculations
if operation == '1':
    print(num1, "+", num2, "=", add(num1,num2))

elif operation == '2':
   print(num1,"-",num2,"=", subtract(num1,num2))

elif operation == '3':
   print(num1,"*",num2,"=", subtract(num1,num2))

elif operation == '4':
   print(num1,"/",num2,"=", subtract(num1,num2))
else:
    print("Invalid input")

inp = input("Enter clear to play again or exit to exit")
if inp == "clear":
    sys()
else:
    print("thanks for playing")
    sys.exit()
</code></pre>
<p>It keeps saying <code>expected an indented block</code> and shows, that it wants the indent in front of:</p>
<pre><code>def add(x, y):
    return x + y

def subtract(x, y):
    return x - y

def Multiply(x, y):
    return x * y

def Divide(x, y):
    return x/y 
</code></pre>
<p>but when I add them in, it keeps saying, that the operation is not defined. I also feel like the loop will not work either.</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you are trying to recursively re-run the code, in which case you probably want e.g.</p>
<pre><code>import sys #Â so you can use sys.exit()

def add(x, y): # no need for these function definitions to be in the loop
    ...

...

def main(): # conventional name - sys shadows the module you just imported
    print("Please select operation ")
    print("1. Add")

    ...

    inp = input("Enter clear to play again or exit to exit")
    if inp == "clear":
        main()
    else:
        print("Thanks for playing")
        sys.exit() # or just 'return'

if __name__ == "__main__": # if run directly, rather than imported
    main()
</code></pre>
<p>You can define functions within other functions (although there's no need here), but remember you need another level of indentation:</p>
<pre><code>def outer(n):
    def inner(x):
        return x ** 2
    return 2 * inner(n)
</code></pre>
<p>Note that using recursion means you will eventually hit the system recursion depth limit; iteration is probably wiser:</p>
<pre><code>def main():
    while True:
        ...
        inp = input("Enter clear to play again or exit to exit")
        if inp != "clear":
            print("Thanks for playing")
            break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may be interested in this solution to your problem. It makes use of the <code>operator</code> module, which provides named functions for all the standard Python operators. It also uses a list to translate the operation number to a function and a symbol for printing.</p>
<pre><code>from operator import add, sub, mul, div

operations = [
    (add, '+'),
    (sub, '-'),
    (mul, 'x'),
    (div, '/'),
]

while True:

    print('1. Add')
    print('2. Subtract')
    print('3. Multiply')
    print('4. Divide')

    op = int(raw_input('Enter operation (1/2/3/4): '))

    if 0 &lt; op &lt;= len(operations):
        func, sym = operations[op-1]
        num1 = float(raw_input('Please enter first number: '))
        num2 = float(raw_input('Please enter second number: '))
        print('{} {} {} = {}'.format(num1, sym, num2, func(num1, num2)))
    else:
        print('Invalid operation')
        continue

    while True:
        inp = raw_input('Enter clear to play again or exit to exit: ')
        if inp == 'exit':
            print('Thanks for playing')
            exit()
        elif inp == 'clear':
            break
</code></pre>
<p><strong>output</strong></p>
<pre><code>1. Add
2. Subtract
3. Multiply
4. Divide
Enter operation (1/2/3/4): 3
Please enter first number: 8
Please enter second number: 9
8.0 x 9.0 = 72.0
Enter clear to play again or exit to exit: exit
Thanks for playing
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have an empty function, put in the phrase <code>pass</code> as in:</p>
<pre><code>def some_func():
    pass
</code></pre>
<p>And that error will no longer occur.</p>
</div>
<span class="comment-copy">Everything after <code>def sys()</code> (which is a terrible name for a function, especially as you're also trying to use <code>sys.exit</code>) should be indented if it's supposed to be inside that function. Also, <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer"><code>from operator import add, div, mul, sub</code></a> would save you some effort.</span>
<span class="comment-copy">Your use of <code>input</code> won't work as it does an <code>eval</code> on what is typed, so entering <code>clear</code> will raise a <code>NameError</code> exception. You need <code>raw_input</code> throughout.</span>
<span class="comment-copy">@Borodin based on the OP's syntax I've assumed Python 3.x</span>
<span class="comment-copy"><code>raw_input</code> was replaced by <code>input</code> in python 3.x.</span>
<span class="comment-copy">But then what's the point? It certainly won't allow the OP to restart the program, as the comment implies they want to.</span>
<span class="comment-copy">True. The program will work once, and sys will be completely pointless. It would trade one bug for another. Better to use a while loop though then to recursively call sys.</span>
