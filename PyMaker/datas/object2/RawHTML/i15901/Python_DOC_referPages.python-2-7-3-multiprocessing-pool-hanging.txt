<div class="post-text" itemprop="text">
<p>I have the following code in ipython where the child process tries to do <code>sys.exit(...)</code> but causes the parent process to hang. Is this a bug? Any idea how to workaround this?</p>
<pre><code>In [1]: from multiprocessing import Pool

In [2]: def f():
   ...:     import sys
   ...:     sys.exit('exiting system...')
   ...:    

In [3]: p = Pool(processes=2)

In [4]: r = p.apply_async(f, [])

In [5]: r.get()   &lt;---- it is hanging here forever.
</code></pre>
<p>I have also tried to put <code>raise SystemExit(...)</code> instead of <code>sys.exit(...)</code> but it was the same thing. The only workaround I know is to put <code>raise Exception(...)</code> which turned out to work just fine.</p>
<p>I understand that <code>sys.exit</code> is essentially the same as <code>raise SystemExit</code>, but this exception should be delegated up to its parent process and thus <code>r.get()</code> should be able to receive this exception correct? But it seems to be getting stuck on <code>recv</code> call. Is this a bug in <code>multiprocessing</code> module?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're causing the <code>Pool</code> worker process to actually exit when you call <code>sys.exit()</code>. The <code>SystemExit</code> exception is special-cased; when you raise it, the process you raised it in exits. The exception doesn't get propagated to the caller. So, that means that in your example, the worker process simply never returns anything back to the parent. And then the parent process will just wait around forever for the child to return something that's never going to get returned. See <a href="https://stackoverflow.com/questions/24894682/python-multiprocessing-crash-in-subprocess/24894997#24894997">this question</a> for a more in-depth discussion of that behavior.</p>
<p>I would argue that this is a bug, and that when the sub-process exits, the <code>pool</code> should be marked as broken, and all outstanding tasks should be aborted. This is how <a href="https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor" rel="nofollow noreferrer"><code>concurrent.futures.ProcessPoolExecutor</code></a> behaves already. I've actually <a href="http://bugs.python.org/issue22393" rel="nofollow noreferrer">submitted a patch</a> that adds this behavior to <code>multiprocessing.Pool</code>, but so far it hasn't been reviewed.</p>
<p>Now, back to your original question. It looks like you want the <em>parent process</em> to exit here, not just the child. To do that, you'll need to actually return some object back to the parent, and then have the parent exit when it receives that object. It looks like you've discovered you can do this by simply raising an <code>Exception</code>.</p>
</div>
<span class="comment-copy">You are not supposted to exit in a call-back function. It has to return instantly.  "callback should complete immediately since otherwise the thread which handles the results will get blocked." ( <a href="https://docs.python.org/2/library/multiprocessing.html#module-multiprocessing.pool" rel="nofollow noreferrer">docs.python.org/2/library/â€¦</a> )</span>
<span class="comment-copy">Can you explain why <code>raise Exception</code> worked but not <code>raise SystemExit</code> in this case?</span>
<span class="comment-copy">It might be caused by the local import of sys or an special error handing in the ppol class. But that is not the main question. Why do you want to exit in the sub-thread? You should exit in the main thread. If you want to  exit the sub-thread, just use return.</span>
<span class="comment-copy">@KlausD. The OP isn't using the <code>callback</code> keyword arg at all here, so I don't think that quote from the docs is relevant in this case.</span>
