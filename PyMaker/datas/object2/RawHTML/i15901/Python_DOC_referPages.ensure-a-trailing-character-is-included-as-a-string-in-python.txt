<div class="post-text" itemprop="text">
<p>What is the best method in Python for ensuring a trailing character is included as a string in Python?</p>
<p>One example: A user supplied URL in a script needs to be used to construct a URL, and so we want to ensure that a trailing slash is included in the URL, or else add one ourselves.</p>
<p>So, given the strings <code>http://www.so.com</code> or <code>http://www.so.com/</code>, what is the best way to ensure you end up with <code>http://www.so.com/</code>?</p>
<p>My solution uses the <code>re</code> module, but as I am still learning Python I was wondering if there was a better practice to solving this problem.</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; url = "http://www.so.com"
&gt;&gt;&gt; re.sub('//$', '/', re.sub('$',  '/', url))
'http://www.so.com/'
&gt;&gt;&gt; url = "http://www.so.com/"
&gt;&gt;&gt; re.sub('//$', '/', re.sub('$',  '/', url))
'http://www.so.com/'
</code></pre>
<p><strong>UPDATE</strong></p>
<p>I should clarify that I am looking for a purely Python solution, without having to use any extra modules. Just a part of learning Python tricks and best practices.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can access to end of a string with <code>[-1]</code> index : </p>
<pre><code>&gt;&gt;&gt; url = "http://www.so.com"
&gt;&gt;&gt; if url[-1]!='/':
...  url+='/'
... 
&gt;&gt;&gt; url
'http://www.so.com/'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For an application like this, you should probably use <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urljoin" rel="nofollow"><code>urllib.parse.urljoin</code></a> (<a href="https://docs.python.org/2/library/urlparse.html#urlparse.urljoin" rel="nofollow"><code>urlparse.urljoin</code></a> in Python 2) No need to manually manage the slashs.</p>
<pre><code>from urllib.parse import urljoin
url_base = "http://www.so.com"
add = "foo/bar"

print(urljoin(url_base, add))
# http://www.so.com/foo/bar
</code></pre>
<p>For file paths, <a href="https://docs.python.org/3/library/os.path.html#os.path.join" rel="nofollow"><code>os.path.join</code></a> is an analogous function.</p>
</div>
<div class="post-text" itemprop="text">
<p>For a difficult-to-read one-liner, you could do this:</p>
<pre><code>url = "http://www.so.com"
url += ['/', ''][(url or '')[-1] == '/']
</code></pre>
<p><code>(url or '')</code> - This part sets the url to a string by default if it's false, null, empty list, etc...</p>
<p><code>[(url or '')[-1] == '/']</code> - This part is an index lookup that should have a value of <code>0</code> if the url does not end in a string and <code>1</code> if it does.</p>
<p><code>['/', '']</code> - Based on the value of the previously mentioned index lookup, we will append either a slash or an empty string to the end of <code>url</code></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>re.sub('/?$', '/', url)
</code></pre>
<p>Examples:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub('/?$', '/', 'http://www.so.com/')
'http://www.so.com/'
&gt;&gt;&gt; re.sub('/?$', '/', 'http://www.so.com')
'http://www.so.com/'
</code></pre>
</div>
<span class="comment-copy">Instead of manipulating paths by hand, I would use <code>urllib.parse</code> for this kind of thing. Then you don't have to worry about the trailing <code>'/'</code>. You can use <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urljoin" rel="nofollow noreferrer"><code>urllib.parse.urljoin</code></a> to build the URL.</span>
<span class="comment-copy">indeed, I can use the urljoin module, this was just an example for the problem I was trying to solve.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/help/dont-ask">You should only ask practical, answerable questions based on actual problems that you face.</a> "Best practices" questions are strongly discouraged here.</span>
<span class="comment-copy">And there is nothing more "purely Python" than using the standard library!</span>
<span class="comment-copy">I would consider built-in modules to be "purely Python." I can understand not wanting to use third-party packages, but the built-ins are there for a reason. <a href="https://docs.python.org/3.4/tutorial/stdlib.html#batteries-included" rel="nofollow noreferrer">Python is "batteries included"</a>, and learning how to use the standard library is an essential part of learning Python.</span>
<span class="comment-copy">Thanks for the purely Python answer!</span>
<span class="comment-copy">you are welcome ! ;)</span>
<span class="comment-copy">And no, I don't expect this to be the answer. I just wanted to add some fun critical thinking to a very broad question</span>
