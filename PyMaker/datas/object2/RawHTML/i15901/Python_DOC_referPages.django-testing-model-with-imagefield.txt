<div class="post-text" itemprop="text">
<p>I need to test the Photo model of my Django application. How can I mock the ImageField with a test image file?</p>
<p><strong>tests.py</strong></p>
<pre><code>class PhotoTestCase(TestCase):

    def test_add_photo(self):
        newPhoto = Photo()
        newPhoto.image = # ??????
        newPhoto.save()
        self.assertEqual(Photo.objects.count(), 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For future users, I've solved the problem.
You can mock an ImageField with a SimpleUploadedFile instance.</p>
<p><strong>test.py</strong></p>
<pre><code>from django.core.files.uploadedfile import SimpleUploadedFile

newPhoto.image = SimpleUploadedFile(name='test_image.jpg', content=open(image_path, 'rb').read(), content_type='image/jpeg')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Tell the mock library to create a mock object based on Django's File class</p>
<pre><code>import mock
from django.core.files import File

file_mock = mock.MagicMock(spec=File, name='FileMock')
</code></pre>
<p>and then use in your tests </p>
<pre><code>newPhoto.image = file_mock
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a temporary file, using <a href="https://docs.python.org/3/library/tempfile.html" rel="noreferrer"><code>tempfile</code></a>. So you don't need a real file to do your tests.</p>
<pre><code>import tempfile

image = tempfile.NamedTemporaryFile(suffix=".jpg").name
</code></pre>
<p>If you prefer to do manual clean-up, use <code>tempfile.mkstemp()</code> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>Solution:</p>
<pre><code>from StringIO import StringIO
# in python 3: from io import StringIO
from PIL import Image
from django.core.files.base import File
</code></pre>
<p>And create a static method in your TestCase class:</p>
<pre><code>@staticmethod
def get_image_file(name='test.png', ext='png', size=(50, 50), color=(256, 0, 0)):
    file_obj = StringIO()
    image = Image.new("RGBA", size=size, color=color)
    image.save(file_obj, ext)
    file_obj.seek(0)
    return File(file_obj, name=name)
</code></pre>
<p>Example:</p>
<pre><code>instance = YourModel(name=value, image=self.get_image_file())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to create an actual file in the filesystem, you can use this 37-byte GIF instead, small enough to a be a bytes literal in your code:</p>
<pre><code>from django.core.files.uploadedfile import SimpleUploadedFile

small_gif = (
    b'\x47\x49\x46\x38\x39\x61\x01\x00\x01\x00\x00\x00\x00\x21\xf9\x04'
    b'\x01\x0a\x00\x01\x00\x2c\x00\x00\x00\x00\x01\x00\x01\x00\x00\x02'
    b'\x02\x4c\x01\x00\x3b'
)
uploaded = SimpleUploadedFile('small.gif', small_gif, content_type='image/gif')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My approach how to test model with no intention to pass any useful data:</p>
<pre><code>from django.core.files import File
SomeModel.objects.create(image=File(file=b""))
</code></pre>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/26141786/django-1-7-imagefield-form-validation">This question</a> may have some relevant insight.</span>
<span class="comment-copy">Thanks, but I can't figure to use it to solve my problem :(</span>
<span class="comment-copy">perfect, should be the accepted answer. Works in 1.10, thanks!</span>
<span class="comment-copy">Could you show me what is the <code>image_path</code>?</span>
<span class="comment-copy">@Norak Through some experimentation, I found that <code>name</code> is the filename you want to use for the image you read in and the <code>image_path</code> is the path of your image. For example <code>/path/to/image.jpg</code>.</span>
<span class="comment-copy">Thanks, but I do not like to use 3rd party modules for this purpose...</span>
<span class="comment-copy">then you can open any arbitary image from any location <code>newPhoto.image = open(/path/to/foo.jpg)</code></span>
<span class="comment-copy">but always if I use mock module?</span>
<span class="comment-copy">Mock is now a standard python library from Python&gt;=3.3 so don't see this third-party library as something weird in Python.</span>
<span class="comment-copy">@ChillarAnand I use your example, but I have an error - <code>TypeError: 'MagicMock' does not support the buffer interface</code></span>
<span class="comment-copy">Thanks for the answer. Just note that for python 3: <code>from io import StringIO</code></span>
<span class="comment-copy">@dabad thx for note. I updated the answer.</span>
<span class="comment-copy">For Python 3 I think <code>from io import BytesIO</code> instead of <code>StringIO</code></span>
