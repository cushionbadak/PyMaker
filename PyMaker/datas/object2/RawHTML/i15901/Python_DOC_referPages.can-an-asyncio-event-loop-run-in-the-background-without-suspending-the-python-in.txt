<div class="post-text" itemprop="text">
<p>The documentation for asyncio gives two examples for how to print "Hello World" every two seconds:
<a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio-hello-world-callback">https://docs.python.org/3/library/asyncio-eventloop.html#asyncio-hello-world-callback</a>
<a href="https://docs.python.org/3/library/asyncio-task.html#asyncio-hello-world-coroutine">https://docs.python.org/3/library/asyncio-task.html#asyncio-hello-world-coroutine</a></p>
<p>I can run those from the interpreter, but if I do I lose access to the interpreter. Can an asyncio event loop be run in the background, so that I can keep typing commands at the interpreter?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can run the event loop inside a background thread:</p>
<pre><code>&gt;&gt;&gt; import asyncio
&gt;&gt;&gt; 
&gt;&gt;&gt; @asyncio.coroutine
... def greet_every_two_seconds():
...     while True:
...         print('Hello World')
...         yield from asyncio.sleep(2)
... 
&gt;&gt;&gt; def loop_in_thread(loop):
...     asyncio.set_event_loop(loop)
...     loop.run_until_complete(greet_every_two_seconds())
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; loop = asyncio.get_event_loop()
&gt;&gt;&gt; import threading
&gt;&gt;&gt; t = threading.Thread(target=loop_in_thread, args=(loop,))
&gt;&gt;&gt; t.start()
Hello World
&gt;&gt;&gt; 
&gt;&gt;&gt; Hello World
</code></pre>
<p>Note that you <em>must</em> call <code>asyncio.set_event_loop</code> on the <code>loop</code>, otherwise you'll get an error saying that the current thread doesn't have an event loop.</p>
<p>If you want to interact with the event loop from the main thread, you'll need to stick to <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.call_soon_threadsafe" rel="noreferrer"><code>loop.call_soon_threadsafe</code></a> calls.</p>
<p>While this kind of thing is an ok way to experiment in the interpreter, in actual programs, you'll probably want <em>all</em> your code running inside the event loop, rather than introducing threads.</p>
</div>
<span class="comment-copy">Thank you so much.  Someone <a href="http://monome.org/community/discussion/comment/208744#Comment_208744" rel="nofollow noreferrer">elsewhere</a> said not to mix threads and asyncio. Do you disagree?  The process would background is an OSC server. From the interpreter I would tell it what signals to send. The Python process would be lightweight, sending instructions (maybe 20 bundles a second) to synthesizers that do all the audio math. Given that motivation, do you continue to suggest putting everything in the main loop?</span>
<span class="comment-copy">@user916142 Well, normally the whole point of using an asynchronous framework like <code>asyncio</code> is to <i>avoid</i> using threads. If you're always going to run this code inside an interactive interpreter, then I guess it makes sense. But normally I would say you should implement an <code>asyncio</code> <code>Procotol</code> or <code>Stream</code> that handles incoming network connections, and then tell it what signals to send via network requests.</span>
<span class="comment-copy">Thanks! I've got something much like user916142, with threads handling OSC, Midi, WebSockets, and serial data streams. I'll look into the possibility of rolling it all into an event loop, but for now just needed to integrate a WebSockets module which depended on asyncio.</span>
<span class="comment-copy">@dano "you'll probably want <i>all</i> your code running inside the event loop, rather than introducing threads" -- Would you make an exception for a situation where you have large codebase that you can't / don't want to convert entirely to async style; and at the same time, you do want some capabilities of <code>asyncio</code> (such as scheduled background operations)? It seems running an event loop in a background thread would fit perfectly in this scenario, but I may be missing some hidden complications.</span>
<span class="comment-copy">@max Yes, I think that's ok. You just need to be careful about sharing data between the <code>asyncio</code> eventloop thread and whatever other threads you have running.</span>
