<div class="post-text" itemprop="text">
<p>I'm trying to take a known subnet ID and CIDR mask, e.g., 10.0.0.0/22, and get a list like this:</p>
<pre><code>[('10.0.0.0', '10.0.3.255'),
('10.0.4.0', '10.0.7.255'),
...
('10.255.252.0', '10.255.255.255')]
</code></pre>
<p>I've tried a few existing modules like <code>ipcalc</code>, but it doesn't seem to have a feature like that. I'm not sure what kind of math is necessary for me to write my own module to do it, either.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow"><code>ipaddress</code></a> module if you use Python 3.3+:</p>
<pre><code>&gt;&gt;&gt; import ipaddress
&gt;&gt;&gt; it = ipaddress.ip_network('10.0.0.0/8').subnets(new_prefix=22)
&gt;&gt;&gt; networks = [(str(n.network_address), str(n.broadcast_address)) for n in it]
&gt;&gt;&gt; len(networks)
16384
&gt;&gt;&gt; networks[0]
('10.0.0.0', '10.0.3.255')
&gt;&gt;&gt; networks[-1]
('10.255.252.0', '10.255.255.255')
</code></pre>
<p>In Python 2.x, use <a href="https://pypi.python.org/pypi/ipaddr" rel="nofollow"><code>ipaddr</code></a>:</p>
<pre><code>&gt;&gt;&gt; import ipaddr
&gt;&gt;&gt; it = ipaddr.IPNetwork('10.0.0.0/8').subnet(new_prefix=22)
&gt;&gt;&gt; networks = [(str(n.network), str(n.broadcast)) for n in it]
&gt;&gt;&gt; len(networks)
16384
&gt;&gt;&gt; networks[0]
('10.0.0.0', '10.0.3.255')
&gt;&gt;&gt; networks[-1]
('10.255.252.0', '10.255.255.255')
</code></pre>
<p><strong>UPDATE</strong></p>
<p>There's Python 2.7 backport of Python 3.3 ipaddress: <a href="https://pypi.python.org/pypi/py2-ipaddress/" rel="nofollow"><code>py2-ipaddress</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the new <a href="https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.subnets" rel="nofollow"><code>ipaddress</code></a> module in Python 3.3:</p>
<pre><code>import ipaddress

for i in ipaddress.ip_network('10.0.0.0/8').subnets(new_prefix=22):
    print(i)
</code></pre>
</div>
<span class="comment-copy"><code>10.0.0.0/22</code>'s network address is <code>10.0.0.0</code>, broadcast address is <code>10.0.3.255</code>. Other addresses are outside the network.</span>
<span class="comment-copy">@falsetru I know, what I'm trying to do is get a list of all subnets the fall under the first octet and match the /22 mask.</span>
<span class="comment-copy">@Soviero actually you are mistaken in that the first octet does not make sense anymore (it is not special).</span>
<span class="comment-copy">@AnttiHaapala It is to me, cause I'm only looking for private addresses in the 10.*.*.* space.</span>
<span class="comment-copy">This is exactly what I was looking for! Thanks.</span>
<span class="comment-copy">@Soviero, I added another version that can be used in Python 2.x.</span>
