<div class="post-text" itemprop="text">
<p>So, I'm making this game in python. The thing is, in scissors, paper and rock there can be different combinations like .. Rock and paper, Rock and scissors, and so on. So how would I make this without doing heaps of elif statements.</p>
<pre><code>import random
random_choice = ["Scissors", "Paper", "Rock"][random.randint(0, 2)]

player_input = raw_input("What's your choice (Scissors, Paper, or Rock)")
if player_input not in ["Scissors", "Paper", "Rock"]:
      print("Not valid choice")
      raw_input()
      exit()

if player_input == random_choice:
      print("You both choose %s" % random_choice)
elif player_input == "Rock" and random_choice == "Scissors":
      print("You picked Rock and the bot picked Scissors, you win!")
      raw_input()
#And so on making heaps of elif's for all the combinations there can be.
</code></pre>
<p>So how do we make this game without having to do so many elif statements or type less code. Surely there has to be a better programming sequence for dealing with these types of things?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to avoid the <code>elif</code> tree, you may use a set to store all the winning combinations:</p>
<pre><code>import random

# random.choice is a convenient method
possible_choices = ["Scissors", "Paper", "Rock"]
random_choice = random.choice(possible_choices)

# set notation, valid since Python 2.7+ and 3.1+ (thanks Nick T)
winning = {("Scissors", "Paper"), ("Paper", "Rock"), ("Rock", "Scissors")}

player_input = raw_input("What's your choice (Scissors, Paper, or Rock)")
if player_input not in possible_choices:
      print("Not valid choice.")
      raw_input()

if player_input == random_choice:
      print("You both choose %s" % random_choice)
elif (player_input, random_choice) in winning:
      print("You picked %s and the bot picked %s, you win!" % (player_input, random_choice))
else:
      print("You picked %s and the bot picked %s, you lose!" % (player_input, random_choice))

raw_input()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about doing a map of possible results:</p>
<pre><code>a_beats_b = {('Scissors', 'Paper'): True,
             ('Scissors', 'Rock'):  False,
             ...
</code></pre>
<p>(Note that keys must be tuples). And then do a lookup with like this:</p>
<pre><code>player_wins = a_beats_b[(player_input, random_choice)]
</code></pre>
<p>You'll need to handle the case of the same choices (as you already do).</p>
</div>
<span class="comment-copy"><code>if "Scissors" or "Paper" or "Rock" not in player_input</code> won't do what you expect it to.</span>
<span class="comment-copy">Your first guard against rogue user input will immediately return 'Scissors', you probably want <code>player_input not in ['Scissors', ...]</code>. I'd also wrap it in a loop so <i>when</i> the user keeps giving you garbage input you keep asking for what you want (right now, if the <code>if</code> was correct) you only ask twice.</span>
<span class="comment-copy">I keep seeing this question over and over on SO. I have answered it in the past but only to find the question deleted but now wonder if it is straight out of a programming assignment</span>
<span class="comment-copy">No, I just want to know how big companies would deal with these things when they have a lot of combinations in a game.</span>
<span class="comment-copy">@user3818650 They would often convert the inputs to numbers - and work out the winning input based on numbers - or they would use a table or similar data structure to help work out the combinations. I doubt they would hand code every possible combination and ever possible test.</span>
<span class="comment-copy">Thank you, but can you explain what the set does?</span>
<span class="comment-copy">Minor note: Python 2.7+ and 3.1+ support set literals, so I'd maybe prefer <code>{('Scissors', 'Paper'), ...}</code> over <code>set([(...), ...])</code></span>
<span class="comment-copy">@user3818650 <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">a set (Python docs)</a> is an unordered collection of hashable objects. Think of it like a dictionary but without values (the bit after <code>:</code>). They are probably the most appropriate data-type to use with the <code>in</code> operator as they have a constant look-up time.</span>
<span class="comment-copy">@user3818650 A <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer">set in Python</a> (and, actually, <a href="http://en.wikipedia.org/wiki/Set_(abstract_data_type)" rel="nofollow noreferrer">in any other language</a>) is a collection that stores element without particular order and without repetitions, allowing for fast "contains" operations.</span>
<span class="comment-copy">In a real-world context, it probably makes sense to use <code>from itertools import combinations</code> <code>winner=[comb for comb in combinations(["Scissors", "Paper", "Rock"], 2)]</code></span>
