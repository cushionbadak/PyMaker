<div class="post-text" itemprop="text">
<p>I've been looking for an answer to a question I've been having, and to be honest this is the first time in the ten months that I couldn't find an answer. I've looked at multiple questions, <strong>Dictionaries do work, this conclusion was found in error(and I tried to use dictionaries(which most of the answers suggest), but they haven't worked.)</strong> The only other answers I could find was to use exec(), but they always seem to be accompanied by a comment saying they're dangerous, so I've steered clear of them.</p>
<p>On to my question:
This is an example of the code that I've been working on in Pygame:</p>
<pre><code>import pygame,sys
from pygame.locals import *
pygame.init()
screen = pygame.display.set_mode((800,230))
pygame.display.set_caption('Example')
tickclock = pygame.time.Clock()
change = 1
car1 = pygame.image.load('Car1.png')
car2 = pygame.image.load('Car2.png')
while True:
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == KEYDOWN:
            if event.key == K_ESCAPE:
                pygame.quit()
                sys.exit()
            elif event.key == K_SPACE:#To change the picture when the user presses space
                change = change + 1
    #Current way-----#
    if change == 1:
        screen.blit(car1,(0,0))
    elif change == 2:
        screen.blit(car2,(0,0))
    #Continue until all pictures are used...
    elif change &gt; 2:#The 2 will change based on the amount of pictures.
        change = 1
    #----------------#
    pygame.display.flip()
    tickclock.tick(60)
</code></pre>
<p>Where it is commented as "current way" is where my question is. Using this message of if/elif statements can take up a tun of lines if there are a lot of pictures for Pygame to display, and that would be doubled by the need to call screen.blit() every after every if/elif statement.</p>
<p>This is an example of what I would like to do:</p>
<pre><code>import pygame,sys
from pygame.locals import *
pygame.init()
screen = pygame.display.set_mode((800,230))
pygame.display.set_caption('Example')
tickclock = pygame.time.Clock()
varcar = 'car'
varnum = '1'
car1 = pygame.image.load('Car1.png')
car2 = pygame.image.load('Car2.png')
while True:
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == KEYDOWN:
            if event.key == K_ESCAPE:
                pygame.quit()
                sys.exit()
            elif event.key == K_SPACE:#To change the picture when the user presses space
                varnum = int(varnum)
                varnum = varnum + 1
                varnum = int(varnum)
    #Using this to substitute the class I set up for the actual file--#
    varcombined = varcar + varnum#To make varcombined = 'car1','car2',etc.
    if varnum &gt; 2:#To keep varnum within the loaded image numbers
        varnum = 1
    #-----------------------------------------------------------------#
    #The way I wish to use--------------------------------------------#
    #Some Code
    screen.blit(varcombined,(0,0))
    pygame.display.flip()
    tickclock.tick(60)
</code></pre>
<p>What I am trying to do here is combine the varcar and varnumber variable so that I can combine them in the varcombined variable while only changing the varnumber variable. This will give strings that are the same as the variable names of the loaded images: car1 and car2. Then what I want to do is somehow call the variables car1 and car2 in 'screen.blit(varcombined,(0,0))' on line 31 by using the string as a substitute to the actual variable name. (Without actually having to dynamicly create a new variable)</p>
<p>Is there a way this can be done, and if so, how can it be done?</p>
<p>Even though the question may seem a bit specific, I think this can benefit a lot of people who may have a need/want to use a string to call a variable.</p>
<p>If anyone doesn't understand what I'm asking, just say so, and I'll try to edit the question to clarify.</p>
<p><strong><em>EDIT</em></strong></p>
<p>Thank you to abarnert and Fernando Aires for their speedy answers. :)</p>
<p>I'm not sure if I should make this an edit or another question, but I need to expand my question a little due to recent issues.</p>
<p>I used abarnert's answer, and it worked like a charm.</p>
<pre><code>car_dictionary = {1: car1 2: car2}

#-----------#

screen.blit(car_dictionary[change], (0,0))
</code></pre>
<p>I would now like to ask, what I should do in the case that I added a 'truck1' and 'truck2' image, and now needed to not only interchange between 1 and 2 but also car and truck?
If there's a way to do that of course.</p>
</div>
<div class="post-text" itemprop="text">
<p>So, what you want here is some way to get <code>car1</code> or <code>car2</code> depending on whether <code>change</code> is <code>1</code> or <code>2</code>. And, ideally, to be able to expand this to <code>car73</code> without writing a chain of 73 <code>elif</code> statements.</p>
<p>While it's <em>possible</em> to do this by constructing the variable names and then looking them up in the appropriate global/local/object scope (e.g., <code>vars()['car{}'.format(change)]</code>), <a href="http://nedbatchelder.com/blog/201112/keep_data_out_of_your_variable_names.html" rel="nofollow">this is a very bad idea</a>, for <a href="http://stupidpythonideas.blogspot.com/2013/05/why-you-dont-want-to-dynamically-create.html" rel="nofollow">lots of reasons</a>.</p>
<p>The right way to do this is to store the cars in a dictionary, keyed by the <code>varnum</code> values:</p>
<pre><code>cars = {1: car1, 2: car2}
</code></pre>
<p>Or, even better, load the cars directly into the dictionary with a loop, and don't even create the separate variables in the first place (which would get really tedious when you have 73 cars):</p>
<pre><code>cars = {}
for num in range(1, 3):
    car = pygame.image.load('Car{}.png'.format(num))
    cars[num] = car
</code></pre>
<p>Or, more simply:</p>
<pre><code>cars = {num: pygame.image.load('Car{}.png'.format(num)) for num in range(1, 3)}
</code></pre>
<p>Now, to look up a car by its key, that's just <code>cars[change]</code>. In particular, your code becomes:</p>
<pre><code>screen.blit(cars[change], (0.0))
</code></pre>
<hr/>
<p>It's worth noting that in your existing code, the keys aren't really doing anything after load time. They're just contiguous integers, and you just start at the first one, count up one by one, and roll back to the first one whenever you reach the end. If that's true in your real code, you don't even really need a dictionary here, just a list; the only change you need to make is to start counting from 0 instead of from 1.</p>
<pre><code>change = 0
cars = [pygame.image.load('Car{}.png'.format(num)) for num in range(1, 3)]
</code></pre>
<p>And if the only thing you need <code>change</code> for is to pick a car, you can simplify this even further by getting rid of <code>change</code>, too. You just want to iterate over <code>cars</code>, repeating forever. <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow"><code>itertools.cycle</code></a> makes that a one-liner. Instead of <code>while True:</code>, you can do this:</p>
<pre><code>for car in itertools.cycle(cars):
</code></pre>
<p>And then, instead of <code>cars[change]</code> you just use <code>car</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a dictionary for that, as in:</p>
<pre class="lang-py prettyprint-override"><code>car1 = pygame.image.load('Car1.png')
car2 = pygame.image.load('Car2.png')

...

screen.blit( {"car1": car1, "car2": car2}[varcombined], (0,0))
</code></pre>
<p>Or you could even replace your <code>varcombined</code> with a <code>carNumber</code> variable, for instance - and therefore changing your dictionary to <code>{1: car1, 2: car2}</code>.</p>
<p>Hope that helps.</p>
</div>
<span class="comment-copy">When you say "I tried to use dictionaries(which most of the answers suggest), but they haven't worked", what exactly did you try? Because that's exactly what you want here: a dictionary that maps <code>{1: car1, 2: car2}</code>. Then you can just do, e.g., <code>screen.blit(car_dictionary[change], (0.0))</code>, no need for <code>if</code>/<code>else</code>. (Or, better, don't even create separate <code>car1</code> and <code>car2</code> variables; just put construct the cars in the dictionary in the first place.)</span>
<span class="comment-copy">@abarnert - Since You told me about this, I've been looking into lists and dictionaries, and it really is amazing what they can do. I got the code to work now. I was just using the dictionary the wrong way. I understand why this question was marked down now. Thanks for the help. I'm a better person because of it.</span>
<span class="comment-copy">If you got the code to work, you should edit your question to make it clearer what you weren't getting, and then write (and accept) an answer that explains how you solved it. (Unless you think Fernando Aires' answer is sufficient, in which case you should accept it, or you think I should turn my comment into an answer.) And meanwhile, for a followup question, you should create a new question</span>
<span class="comment-copy">Anyway, I'm not sure exactly what you're trying to do with the new version, butâ€¦ you can have separate car and truck dictionaries, possibly even both as members of a bigger dict (with keys <code>"car"</code> and <code>"truck"</code>). Or, alternatively, you can use tuples like <code>("car", 1)</code> or <code>("truck", 2)</code>, or anything else immutable and hashable, as keys.</span>
<span class="comment-copy">@abernert I edited the post to show that dictionaries do work. I think you should put your answer in the answer space. Your answer was great, and very helpful, so you should get the credit for it. If you post your answer, I'll mark it as correct and vote it up. Thank you.</span>
