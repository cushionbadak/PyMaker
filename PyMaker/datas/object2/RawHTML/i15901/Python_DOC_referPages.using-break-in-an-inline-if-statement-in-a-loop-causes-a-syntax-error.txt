<div class="post-text" itemprop="text">
<p>I was trying this</p>
<pre><code>while True:
    break if input() == 'q' else input()
</code></pre>
<p>This causes a syntax error</p>
<pre><code>    break if input() == 'q' else input()
           ^
SyntaxError: invalid syntax
</code></pre>
<p>I know there are other ways of doing this but I was wondering why this didn't work.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>This is called conditional expression and the Grammer for that is defined like <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow">this</a></p>
<pre><code>conditional_expression ::=  or_test ["if" or_test "else" expression]
</code></pre>
<p>And <code>or_test</code> is defined like this</p>
<pre><code>or_test  ::=  and_test | or_test "or" and_test
</code></pre>
<p>And <code>and_test</code> is defined like this</p>
<pre><code>and_test ::=  not_test | and_test "and" not_test
</code></pre>
<p>and <code>not_test</code> is defined like this</p>
<pre><code>not_test ::=  comparison | "not" not_test
</code></pre>
<p>and <code>comparison</code> is defined like this</p>
<pre><code>comparison    ::=  or_expr ( comp_operator or_expr )*
</code></pre>
<p>and <code>comp_operator</code> is defined like this</p>
<pre><code>comp_operator ::=  "&lt;" | "&gt;" | "==" | "&gt;=" | "&lt;=" | "!="
                   | "is" ["not"] | ["not"] "in"
</code></pre>
<p>and <code>or_expr</code> is defined like  this</p>
<pre><code>or_expr  ::=  xor_expr | or_expr "|" xor_expr
</code></pre>
<p>and <code>xor_expr</code> is defined like this</p>
<pre><code>xor_expr ::=  and_expr | xor_expr "^" and_expr
</code></pre>
<p>and <code>and_expr</code> is defined like this</p>
<pre><code>and_expr ::=  shift_expr | and_expr "&amp;" shift_expr
</code></pre>
<p>and <code>shift_expr</code> is defined like this</p>
<pre><code>shift_expr ::=  a_expr | shift_expr ( "&lt;&lt;" | "&gt;&gt;" ) a_expr
</code></pre>
<p>and <code>a_expr</code> is defined like this</p>
<pre><code>a_expr ::=  m_expr | a_expr "+" m_expr | a_expr "-" m_expr
</code></pre>
<p>and <code>m_expr</code> is defined like this</p>
<pre><code>m_expr ::=  u_expr | m_expr "*" u_expr | m_expr "//" u_expr | m_expr "/" u_expr
            | m_expr "%" u_expr
</code></pre>
<p>and <code>u_expr</code> is defined like this</p>
<pre><code>u_expr ::=  power | "-" u_expr | "+" u_expr | "~" u_expr
</code></pre>
<p>and <code>power</code> is defined like this</p>
<pre><code>power ::=  primary ["**" u_expr]
</code></pre>
<p>and <code>primary</code> is defined like this</p>
<pre><code>primary ::=  atom | attributeref | subscription | slicing | call
</code></pre>
<p>And no where <code>break</code> statement is allowed in the grammar, that is why it is failing with compile time error.</p>
<p>Quoting from the docs,</p>
<blockquote>
<p>The expression <code>x if C else y</code> first evaluates the condition, <code>C</code> rather than <code>x</code>. If <code>C</code> is true, <code>x</code> is evaluated and its value is returned; otherwise, <code>y</code> is evaluated and its value is returned.</p>
</blockquote>
<p>So, <code>x</code> and <code>y</code> should be something which can be evaluated, but <code>break</code> is a control flow statement which cannot be evaluated.</p>
</div>
<div class="post-text" itemprop="text">
<p>That syntax cannot be used like that. The whole <code>&lt;something&gt; if &lt;condition&gt; else &lt;other thing&gt;</code> thing is an expression that evaluates to some particular value, that is, is something assignable to a variable. The idea is not to put logic in <code>&lt;something&gt;</code> and <code>&lt;other thing&gt;</code>. You will have to stick with something more traditional:</p>
<pre><code>while True:
  if input() == 'q':
    break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow">Conditional expression</a> should be used with expressions, not with statements.</p>
<p>And, the code calls <code>input</code> twice for non-<code>q</code> input. Is that what you meant?</p>
<pre><code>while True:
    in_ = input()
    if in_ == 'q':
        break
    # Do something with in_
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The inline if statement - also called <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow">conditional assignment</a> - is python's equivalent to the tenary operator in other languages. As such it is used to assign a value to a variable based on the boolean value of an expression e.g.:</p>
<pre><code>greeting = 'Mrs.' if person.female else 'Mr.'
</code></pre>
<p>Clearly both possible values must actually be values. This is true for all literals (1, 'string', ...), variables and function calls, but not for statements like <a href="https://docs.python.org/3.3/reference/simple_stmts.html#the-break-statement" rel="nofollow">break</a>.</p>
<p>I hope this explains the WHY this is an syntax error.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to keep taking input until a user enters <code>"q"</code> you could use <code>iter</code>:</p>
<pre><code>for x in iter(input,"q"):
    print (x)
</code></pre>
<p>Or just:</p>
<pre><code>while input() != "q":
</code></pre>
</div>
<span class="comment-copy">What is this code overall supposed to do?</span>
<span class="comment-copy">People wanting to do this is pretty much exactly why Guido resisted adding conditional expressions for so long. Don't try to write idiomatic Perl in Python.</span>
<span class="comment-copy">For the love of <i>something</i> collapse your definitions to one code block.</span>
<span class="comment-copy">I understand it can be done like that. What I don't understand is why I can't use <code>break</code> in an inline if statement.</span>
<span class="comment-copy">@DJK, <code>break</code> is not an expression, but a statement.</span>
