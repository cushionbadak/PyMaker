<div class="post-text" itemprop="text">
<p>I was in my computer science class today and the teacher put a piece of python coding on the board and said he couldn't figure out why it wasn't working. He was showing us functions and said:</p>
<pre><code>def app(x):
    x.append(" ")
    print(x)

def ext(x,y):
    x.extend(y)
    print(y)

nums = [1,2,3,4,5,6]
numbers = [7,8,9,10]

app(nums)
ext(nums,numbers)

print("End of program")
</code></pre>
<p>The code was meant to show how when you don't type</p>
<pre><code>return x
</code></pre>
<p>in the function then the variable doesn't change when you return to the main program however when he ran the program, the first function added the space and kept it there when it returned resulting in the following text being printed...</p>
<pre><code>['1','2','3','4','5','6',' ']
['1','2','3','4','5','6',' ','7','8','9','10']
End of program
</code></pre>
<p>Please help me out.</p>
</div>
<div class="post-text" itemprop="text">
<p>You say that the point was to demonstrate that a list won't be changed unless it is returned.  That is false.  The list is a mutable object.  When you pass it (<strong>by name</strong>) to a function and change it, it will be changed.  If you don't want the change, you need to work with a copy.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def app(x):
    return x + [" "]


def ext(x,y):
    return x + y
</code></pre>
<p>might be what you are trying to do ... im not sure, this will not alter either of the original lists, but will return a new list as the result</p>
</div>
<span class="comment-copy">What exactly is the question?</span>
<span class="comment-copy">You are manipulating the object referenced by <code>nums</code> and <code>x</code>. You are not manipulating what <code>x</code> refers to itself. If references are your finger pointing at the moon (and not the moon itself), you didn't change what your finger pointed at but actually followed the finger and planted a flag on the moon.</span>
<span class="comment-copy">You need a better teacher... The difference between an object and a reference to that object (which is actually what is being passed around in this sample) is very, very basic.</span>
<span class="comment-copy">Neither, it's doing exactly what it's supposed to. Indeed, it's the Python convention <b>not</b> to <code>return</code> when the argument is changed in-place.</span>
<span class="comment-copy">@DragonstoneJosh: there is nothing wrong with the code. If your teacher didn't understand what was going on, you need a better teacher.</span>
<span class="comment-copy">+1 for recognizing the question in there and explaining about mutable objects</span>
<span class="comment-copy">Although, I would point out that this is passing "by reference" and not "by name". You should probably edit your answer to include that change.</span>
<span class="comment-copy">This is not passing by reference. "Pass by reference" is a technique where the argument in the function is a reference to a name in the caller.  That isn't possible in Python.  But you are right that it is not "pass by name" either!  The best term for Python is "pass by sharing".</span>
<span class="comment-copy">The best term remains in dispute but is perhaps <a href="https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference" rel="nofollow noreferrer">pass by assignment</a> or <i>pass by the name of the object reference</i>, for which <i>pass by name</i> seems an adequate shorthand (outside the context of Algol).  But I'm not a CS type, so feel free to correct this impression.</span>
