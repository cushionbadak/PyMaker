<div class="post-text" itemprop="text">
<p>I have a folder structure as:</p>
<pre><code>mainapp.py
+Level1
   __init__.py
   +Level2
       helper.py
       __init__.py
       utilities.py
       testapp.py
</code></pre>
<p>In mainapp.py I wish to import helper.py. I am able to do that using</p>
<pre><code>import Level1.Level2.helper
</code></pre>
<p>helper.py is imported, but in trying to resolve helper.py's imports it fails. IN this case helper.py has</p>
<pre><code>from Level2 import utilities
</code></pre>
<p>Which throws an </p>
<pre><code>ImportError: No module named Level2
</code></pre>
<p>What am I doing wrong? Is it the way I'm trying to import? All the examples I found were only trying to go one level deep, and I tried following the same guidance to no avail. </p>
<p>I am using Python3</p>
<p>EDIT: LEVEL1 and below are external library I downloaded. I cant modify them. In level2 is a testapp that comes with the library that uses both helper and utilities. Running this test app works. </p>
<p>But I need to be able to use these files from my main app that lives 2 folders up</p>
<p>EDIT2: I believe my problem stems from my working directory being the directory that mainapp.py lives in. When I import using the fully qualified path LEvel1.Level2.helper that works, but once helper attempts to import Level2, there is no level2 in my current working directory. Is there a way to alias this? Or somehow have their imports relative to their location, not my working directory?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you run a python script it is important from where you are executing the script because that path becomes one of the relative paths from where the <code>import</code>s (all imports) are going to search for the packages/modules. I'm talking about the <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow">sys.path</a>.</p>
<p>So, knowing nothing else about the library, you could simply add the <code>Level1</code> path into the <code>sys.path</code> and sort of expose internal <code>Level2</code> sub-package to the world.</p>
<p>Assuming you are in a bash shell in the same folder as your <code>mainapp.py</code> you can add the <code>Level1</code> path to <code>sys.pah</code> using <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" rel="nofollow">PYTHONPATH</a>:</p>
<pre><code>$ export PYTHONPATH=./Level1
</code></pre>
<p>Then <code>helper.py</code> will be able to find the <code>utilities</code> module even executing your <code>mainapp.py</code> from <em>outside</em>.</p>
<p>Opinion:</p>
<p>I don't know the library and how it works, but in my opinion, importing from the same package using the package name itself it's not correct or at least not a good practice. And here you have an example, <em>you can only import that package if you are in the same level or in the parent one</em>. And probably the test app is working because, as you say, it is in the same package (level) that the <code>utilities</code>.</p>
<p>Original answer:</p>
<p>What you need is called <a href="https://docs.python.org/3/tutorial/modules.html#intra-package-references" rel="nofollow">Intra-package References</a>. In your specific case as <code>utilities</code> and <code>helper</code> are in the same <em>level</em> you need:</p>
<pre><code>from . import utilities
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>helper.py is inside the Level2 module, so that's implied in its import context.  The import line in helper.py should instead be</p>
<pre><code>import utilities
</code></pre>
<p>Alternatively, you could add the path to Level1 to your PYTHONPATH.  This will allow you to directly import all modules under Level1 without additional namespace, e.g.</p>
<pre><code>from Level2 import utilities
</code></pre>
<p>Which sounds like what you need, based on your edit.  There is probably a third option involving patching sys.modules, but that would involve patching sys.modules.</p>
</div>
<span class="comment-copy">why not respecting the path?</span>
<span class="comment-copy">I dont know what you mean?</span>
<span class="comment-copy">just try <code>import utilities</code></span>
<span class="comment-copy">I cannot modify any of the files below Level1</span>
<span class="comment-copy">Regarding EDIT2, that's what adding Level1 in your PYTHONPATH will do.</span>
<span class="comment-copy">I just edited my original statement but I cant modify the helper or utilities code. They are a library that I downloaded.  Inside of level2 is another app.py which is their original app and it all works fine if you call from their app.</span>
<span class="comment-copy">I updated the answer according to the new info provided.</span>
<span class="comment-copy">I just edited my original statement but I cant modify the helper or utilities code. They are a library that I downloaded.  Inside of level2 is another app.py which is their original app and it all works fine if you call from their app.</span>
<span class="comment-copy">I added an alternative to my post</span>
