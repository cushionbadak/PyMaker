<div class="post-text" itemprop="text">
<p>I have a 2D array with 9 elements in total yielding into a 3x3 table as show below :</p>
<pre><code>Z|A|Q
Z|Q|Z
Q|Z|A
</code></pre>
<p>The table above shows an invalid 2D array as there are 2 "Z" characters in the first column</p>
<pre><code>Z|A|Q
A|Q|Z
Q|Z|A
</code></pre>
<p>A valid 2D array is shown above with each values distinct in their respective rows and column:</p>
<p>I'm stucked at the looping part throughout the 2D array :</p>
<pre><code>for i, row in enumerate(BOARD):
    for j, column in enumerate(row):
        userInput = raw_input ("Please enter character number "+str(zeroCount)+" out of 9 into the Sudoku board(the character will fill the board up row by row):")
        BOARD[i][j] = userInput
        zeroCount = zeroCount +1
</code></pre>
<p>How do i create a code that checks the 2D array such that every element in each row and column is unique in its own row and column ? </p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you have an array <code>arr</code> which is of size <code>N*N</code> then you can iterate over the length of it and then create a <code>set</code> for each row and column. If the length of the set is less than the length than <code>N</code> then there must be a duplicate, <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow">because sets cannot contain duplicate elements</a>.</p>
<pre><code>arr = [['Z', 'A', 'Q'], ['A', 'Q', 'Z'], ['Q', 'Z', 'A']]

# "Invert" the array so the columns are rows and vice versa.
zipped = list(zip(*arr))

N = len(arr)
# Iterate over the indices (0, 1, 2 in this case) of the array.
for i in range(N):
    # Test whether there are any duplicates by comparing the lengths of a set and N
    if len(set(arr[i])) &lt; N:
        print('Non-unique!')
        break
    # Do the same again but now for the zipped array, in effect the "columns"
    if len(set(zipped[i])) &lt; N:
        print('Non-unique!')
        break
</code></pre>
<p>The code above will iterate over the <code>range(N)</code>, meaning it will effectively iterate over your indices (0, 1, 2) of each row and column.</p>
<p>For each index the code will then look at that row and create a set from it. Sets are unordered collections that cannot contain duplicates, meaning if you did <code>set(['A', 'A', 'B']}</code> you would have a <code>{'A', 'B'}</code>. You can then use this fact to check for duplicates, as if the length of the set is less than the length of what was used to create it, <em>the list must have had duplicates.</em></p>
<p>The use of <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> is to be able to check the columns as well as the rows. In simple terms <code>zip(*some_list)</code> will convert the rows of <code>some_list</code> into columns and the columns into rows. You then do exactly the same as above, checking each row whether it is now duplicate. Of course, the "rows" we're checking <em>are actually the columns of the original array.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>will flesh out later but here is some quick code:</p>
<pre><code>def check_dup_rows_coils(a):
    for row in a:
        if len(set(row)) != len(row):
            return "Dupe in row" + str(row)
    for col in zip(*a):  # iterate over transposed matrix i.e. columns
        if len(set(col)) != len(col):
            return "Dupe in col" + str(col)
    return "no dupes"
</code></pre>
<p>call the function with your array (list of lists).   can change the return values to suit your needs.   Note it stops at the fist dupe found.   can change structure bit if you need different code.</p>
</div>
<span class="comment-copy">your array a list of lists?</span>
<span class="comment-copy">the array was created without using the list() function.</span>
<span class="comment-copy">Terminology nitpick: The built-in collection object in Python is called a "list", not an "array". If <code>BOARD</code> was created like <code>BOARD = [[1,2,3],[4,5,6],[7,8,9]]</code>, then it is indeed a list of lists. Just thought you should know, since you seem resistant to using the <code>list()</code> function call in some answers, and I thought it might be because you're worried that converting an array to a list would cause problems. But if <code>BOARD</code> is already a list, it should be totally fine to use.</span>
<span class="comment-copy">nope. it wasnt created that way. I had two for loops of which it prompts user to input and it edits the array accordingly "BOARD[i][j] = input"</span>
<span class="comment-copy">But how was <code>BOARD</code> created in the first place? If <code>BOARD[i][j] = input</code> is the very first line where <code>BOARD</code> appears in your script, then it should crash with <code>NameError: name 'BOARD' is not defined</code>.</span>
<span class="comment-copy">hey there ! thanks for the effort. But when i used this code of yours nothing shows up. I have changed the respective values for variable naming</span>
<span class="comment-copy">Brilliant ! Could you explain the code ? i dont quite get most of this part especially the if conditions and the purpose of zip</span>
<span class="comment-copy">is there a way to do it without using the list() function ?</span>
<span class="comment-copy">im using python 2.x</span>
<span class="comment-copy">so i just use "zipped = zip(*BOARD) ?</span>
<span class="comment-copy">i'd like to see the full solution ! i needed a non-list approach to solve this matter please thanks !</span>
<span class="comment-copy">It is a full solution.   Call the function with your array and get results.   Don't know what you mean by non-list approach.  See @Ffisegydd have a very similar answer to mine few minutes before me.  Think you have wrong idea what the down-vote is for.</span>
<span class="comment-copy">i didnt down voted your answer. anyway i up-vote your answer back</span>
