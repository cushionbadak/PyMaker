<div class="post-text" itemprop="text">
<p>I'm a complete newbie in python. I've been trying to strip the first two characters and a period from a file that contains this data:</p>
<pre><code>12.This a line

13. This is a line too
14. 12 and 13 please stop fighting
</code></pre>
<p>I want to strip the <code>12.1</code> from line 1. Also, I want to remove the newline. But in line 3. there is a space after <code>.</code> I need to remove that too.</p>
<p>So far this is what I've tried:
import re</p>
<pre><code>with open('linex.txt', 'r+') as lines:
    for line in lines:
        line = line[2:]
        lines.write(line)
</code></pre>
<p>Can someone guide me to get this thing done?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>line = re.sub(r"^\d{2}\.", "", line).strip()
</code></pre>
<p><code>^</code> matches only the start of the line then <code>\d{2}</code> selects two numbers, <code>\.</code> the literal dot. <code>sub</code> replaces then everything selected by the aforementioned regular expression with an empty string (the second argument). <code>strip()</code> then removes whitespace from both ends of the result.</p>
<p>Reference: <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow">https://docs.python.org/3/library/re.html#re.sub</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/stdtypes.html#str.partition" rel="nofollow"><code>str.partition()</code></a> to get everything after the first dot, then <a href="https://docs.python.org/2/library/stdtypes.html#str.strip" rel="nofollow"><code>str.strip()</code></a> to remove all leading and trailing whitespace:</p>
<pre><code>line = line.partition('.')[-1].strip()
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; sample = '''\
... 12.This a line
... 13. This is a line too
... 14. 12 and 13 please stop fighting
... '''
&gt;&gt;&gt; for line in sample.splitlines(True):
...     print repr(line.partition('.')[-1].strip())
... 
'This a line'
'This is a line too'
'12 and 13 please stop fighting'
</code></pre>
<p>Using <code>str.partition()</code> does result in an <em>empty string</em> if there is no <code>.</code> in the line. The alternative is to use <a href="https://docs.python.org/2/library/stdtypes.html#str.split" rel="nofollow"><code>str.split()</code></a> with a separator and limit:</p>
<pre><code>line = line.split('.', 1)[-1].strip()
</code></pre>
<p>which will result in the original line (but stripped) if there is no period at all.</p>
<p>A quick demo showing the differences:</p>
<pre><code>&gt;&gt;&gt; 'foo bar baz'.partition('bar')
('foo ', 'bar', ' baz')
&gt;&gt;&gt; 'foo bar baz'.partition('bar')[-1]
' baz'
&gt;&gt;&gt; 'foo baz'.partition('bar')
('foo baz', '', '')
&gt;&gt;&gt; 'foo baz'.partition('bar')[-1]
''
&gt;&gt;&gt; 'foo bar baz'.split('bar', 1)
['foo ', ' baz']
&gt;&gt;&gt; 'foo bar baz'.split('bar', 1)[-1]
' baz'
&gt;&gt;&gt; 'foo baz'.split('bar', 1)
['foo baz']
&gt;&gt;&gt; 'foo baz'.split('bar', 1)[-1]
'foo baz'
</code></pre>
</div>
<span class="comment-copy">Why the downvotes?</span>
<span class="comment-copy">Dunno, while it's not a complicated question you asked it properly and it's clearly in the scope of this site. +1 from me to your question to get it back to 0.</span>
<span class="comment-copy">When I run the code, I get this error <code>io.UnsupportedOperation: not readable</code> (I think r+ is a read write mode.)</span>
<span class="comment-copy">what does <code>sample.splitlines(true)</code> do?</span>
<span class="comment-copy">@DerekMancina: produce separate lines from a big string with newlines still included, just like a file object would produce.</span>
<span class="comment-copy">Also the linked page says Split the string at the first occurrence of sep, and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator. If the separator is not found, return a 3-tuple containing the string itself, followed by two empty strings.   I really don't get it. I'm a doctor and I have no first hand programming knowledge. Can you explain me in a simpler way?</span>
<span class="comment-copy">@DerekMancina: try it out in a terminal. :-) <code>'foo bar baz'.partition('bar')</code> gives you a tuple: <code>('foo ', 'bar', ' baz')</code>; <code>'foo '</code> is the part <i>before</i> the separator, <code>'bar'</code> is the separator, and <code>' baz'</code> is the part <i>after</i>. <code>'foo baz'.partition('bar')</code> gives you <code>('foo baz', '', '')</code> instead, because there is no <code>bar</code> in that text.</span>
<span class="comment-copy">@DerekMancina: so if there is no <code>.</code> period in your line, you could end up with an empty string. You could instead use <code>line.split('.', 1)[-1]</code> to get the original line back.</span>
