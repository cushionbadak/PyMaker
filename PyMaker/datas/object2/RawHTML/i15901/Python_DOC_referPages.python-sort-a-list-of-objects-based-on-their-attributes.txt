<div class="post-text" itemprop="text">
<p>Just to preface this, I've already checked out posts pertaining to this question and they haven't fully answered mine.</p>
<p>So I would just like to know how to sort a list of objects based on their attributes in two ways:</p>
<ol>
<li>if the attribute is a string (to alphabetize)</li>
<li>if the attribute is a integer (to do by numerical order)</li>
</ol>
<p>This is my list of classes:</p>
<pre><code>mainList = [
    hero( name='SirGoose', classes='Fighter', level=150 ),
    hero( name='Conan', classes='Barbarian', level=160 ),
    hero( name='KingArthur', classes='Knight', level=170 )
]
</code></pre>
<p>So what I'm really looking for is a way to sort this list to that the hero's names are sorted in alphabetical order, then another method for level. Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow"><code>sorted</code></a>, <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow"><code>list.sort</code></a> accept optional <code>key</code> parameter. Pass a key function. The return value of the function is used for comparison instead of the original value:</p>
<pre><code>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; hero = namedtuple('hero', ['name', 'classes', 'level'])
&gt;&gt;&gt;
&gt;&gt;&gt; mainList = [
...     hero(name='SirGoose', classes='Fighter', level=150 ),
...     hero(name='Conan', classes='Barbarian', level=160 ),
...     hero( name='KingArthur', classes='Knight', level=170 )
... ]
&gt;&gt;&gt; sorted(mainList, key=lambda h: (h.name, h.level))
[hero(name='Conan', classes='Barbarian', level=160),
 hero(name='KingArthur', classes='Knight', level=170),
 hero(name='SirGoose', classes='Fighter', level=150)]
</code></pre>
<p>NOTE: the key function used here (<code>lambda</code>) returns a tuple. tuples are compared item by item. If the first items are same, the next items are compared, ...</p>
<pre><code>&gt;&gt;&gt; ('SirGoose', 12) &lt; ('Barbarian', 160)
False
&gt;&gt;&gt; ('SirGoose', 12) &lt; ('SirGoose', 160)
True
</code></pre>
<hr/>
<p>Alternative using <a href="https://docs.python.org/3/library/operator.html#operator.attrgetter" rel="nofollow"><code>operator.attrgetter</code></a>:</p>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; sorted(mainList, key=operator.attrgetter('name', 'level'))
[hero(name='Conan', classes='Barbarian', level=160),
 hero(name='KingArthur', classes='Knight', level=170),
 hero(name='SirGoose', classes='Fighter', level=150)]
</code></pre>
</div>
