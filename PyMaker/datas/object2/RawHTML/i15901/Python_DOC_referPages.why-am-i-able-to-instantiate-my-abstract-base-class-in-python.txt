<div class="post-text" itemprop="text">
<p>As I understand it, I can use the <a href="https://docs.python.org/3/library/abc.html" rel="nofollow">abc</a> module in Python to create abstract classes that can't be instantiated (amongst other nice properties). I tried to use this to create a hierarchy of <code>Exception</code> classes to represent various exit codes for my application, but I'm still able to instantiate my base class, even though I don't want that to happen. Here's some code that demonstrates the problem:</p>
<pre><code>#!/usr/bin/env python3

import abc

class ExitCodeException(Exception):
    __metaclass__ = abc.ABCMeta

    def __init__(self, message):
        super().__init__()
        self._message = message

    @abc.abstractmethod
    def getExitCode(self):
        """Return the exit code for this exception"""
        return

class FatalException(ExitCodeException):
    def getExitCode(self):
        return 1

raise ExitCodeException("Oh no!")
</code></pre>
<p>I was expecting my program to quit with an exception saying that <code>ExitCodeException</code> couldn't be instantiated, but instead I just get the standard stack trace I'd expect if <code>ExitCodeException</code> weren't abstract:</p>
<pre><code>Traceback (most recent call last)
  File "./email2pdf_classexception", line 21, in &lt;module&gt;
    raise ExitCodeException("Oh no!")
__main__.ExitCodeException
</code></pre>
<p>How can I fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>As discussed in the comments by @BartoszKP and @Debanshu Kundu above, it appears the concrete superclass <code>Exception</code> is what causes the issue here. As such, I've come up with a slightly different pattern which seems to work (as I understand it, this is an older-style of pattern from Python 2, but still seems valid):</p>
<pre><code>#!/usr/bin/env python3

class ExitCodeException(Exception):
    def __new__(cls, *args, **kwargs):
        if cls is ExitCodeException:
            raise NotImplementedError("Base class may not be instantiated")
        return Exception.__new__(cls, *args, **kwargs)

    def __init__(self, message):
        super().__init__()
        self._message = message

    def getExitCode(self):
        """Return the exit code for this exception"""
        return

class FatalException(ExitCodeException):
    def getExitCode(self):
        return 1

raise FatalException("Oh no!")
</code></pre>
<p>This works as intended; if I change the code to instantiate <code>ExitCodeException</code> directly, it fails.</p>
</div>
<span class="comment-copy">In Python3 you should use keyword syntax: <code>class ExitCodeException(Exception, metaclass = abc.ABCMeta):</code>. However this is not enough to fix your problem. The <code>Exception</code> base class make instantiation possible - without it, all works as expected. But I imagine it does not solve your problem, as you want to derive throwable exceptions from this base class.</span>
<span class="comment-copy">Firstly, syntax of defining metaclass has been changed in Python3. It has to be passed as a keyword argument (called <code>metaclass</code>) to the class definition (ref: <a href="https://docs.python.org/3.3/reference/datamodel.html#customizing-class-creation" rel="nofollow noreferrer">docs.python.org/3.3/reference/â€¦</a> ).  Secondly, I an ABC can't have a base class which is not a ABC. So, you cannot have <code>Exception</code> (which is not a ABC) as the base class of <code>ExitCodeException</code> if you want to make <code>ExitCodeException</code> an ABC.  So, I don't think there is a straight forward way to make your code work.</span>
<span class="comment-copy">Why is it important to not be able to instantiate the base class? If you don't want to instantiate it, just don't instantiate it.  This feels like trying to write Java in Python.</span>
<span class="comment-copy">@BartoszKP, Debanshu Kundu: you've both put the same answer in a comment.  Put it in an answer! :)</span>
<span class="comment-copy">@AndrewFerrier: Python is not a strict language.  There are a lot of things you shouldn't do that Python will not prevent you from doing.  Who is trying to instantiate your base exception? Why are they doing that?  This feels like looking for a solution to a non-problem.</span>
