<div class="post-text" itemprop="text">
<p>I'm trying to make the below generator to be able to set an upper limit on the numbers returned.</p>
<p>Calling <code>list(it.takewhile(lambda x: x &lt; 100, get_primes()))</code> returns a list of all primes under 100 as expected but <code>list(get_primes(100))</code> (which should return the same list in the same way) just returns with an empty list.</p>
<p>Obviously, I could include an <code>if n and candidate&gt;=n: break</code> in the <code>for</code> loop but I'm mostly interested in why the <code>if n: return</code> construct doesn't work like I'm expecting it should. Shouldn't it just return the same <code>takewhile</code> iterator that works above? What am I overlooking here?</p>
<pre><code>import itertools as it

def get_primes(n=None):
    """
    Generates primes to a max of n.

    &gt;&gt;&gt; list(get_primes(100))
    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
    """
    if n:
        return it.takewhile(lambda x: x &lt; n, get_primes())
    composites = {}
    yield 2
    for candidate in it.count(3, 2):
        prime_factor = composites.pop(candidate, None)
        if prime_factor is None:
            yield candidate
            composites[candidate**2] = candidate
        else:
            composite = candidate + 2*prime_factor
            while composite in composites:
                composite += 2*prime_factor
            composites[composite] = prime_factor
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here:</p>
<pre><code>return it.takewhile(lambda x: x &lt; n, get_primes())
</code></pre>
<p>Since this is a generator, it needs to <code>yield</code> these values instead of <code>return</code>ing them. Depending on your Python version, you might be able to use the <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="nofollow noreferrer"><code>yield from</code></a> syntax.</p>
<p>The following might be useful as background reading: <a href="https://stackoverflow.com/questions/16780002/return-in-generator-together-with-yield-in-python-3-3">Return in generator together with yield in Python 3.3</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is with the line </p>
<pre><code>return it.takewhile(lambda x: x &lt; n, get_primes())
</code></pre>
<p>Since it's a generator, returning something stops the execution, and raises StopIteration(). You need to return the values in generator</p>
<pre><code>#return all the values from generator
for a in it.takewhile(lambda x: x &lt; n, get_primes())
    yield a

return 
</code></pre>
</div>
<span class="comment-copy">though replacing <code>return</code> with <code>yield</code> here won't have the expected behaviour (the generator will yield another generator as first value).</span>
<span class="comment-copy">@isedev: <code>yield from</code> will be a straight replacement for <code>return</code> (a plain <code>yield</code>, of course, will not).</span>
<span class="comment-copy">Sure, agreed if you can use <code>yield from</code>. Otherwise, the actual generator will need to be wrapped in a nested function so the outer function can <code>return</code> in both cases.</span>
<span class="comment-copy">Makes sense. I guess I had assumed that because the <code>return</code> statement would happen before any <code>yield</code> statement, it would happily return my takewhile iterator. From the linked thread, it appears that it doesn't work that way. Thanks.</span>
