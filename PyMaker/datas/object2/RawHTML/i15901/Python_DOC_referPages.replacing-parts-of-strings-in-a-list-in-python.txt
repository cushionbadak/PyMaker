<div class="post-text" itemprop="text">
<p>I know similar questions exist for this topic but I've gone through them and still couldn't get it.</p>
<p>My python program retrieves a subsection of html from a page using a regular expression. I just realised that I hadn't accounted for html special characters getting in the way.</p>
<p>say I have:</p>
<p><code>regex_title = ['I went to the store', 'Itlt&amp;#039;s a nice day today', 'I went home for a rest']</code></p>
<p>I obviously want to change <code>lt&amp;#039;</code> to a single quote '.</p>
<p>I've tried variations of:</p>
<pre><code>for each in regex_title:
    if 'lt&amp;#039;' in regex_title:
        str.replace("lt&amp;#039;", "'")
</code></pre>
<p>but had no success. What am I missing.</p>
<p>NOTE: The purpose is to do this without importing any more modules. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/stdtypes.html#str.replace" rel="nofollow"><code>str.replace</code></a> does not replace in-place. It returns the replaced string. You need to assigned back the return value.</p>
<pre><code>&gt;&gt;&gt; regex_title = ['I went to the store', 'Itlt&amp;#039;s a nice day today',
...                'I went home for a rest']
&gt;&gt;&gt; regex_title = [s.replace("lt&amp;#039;", "'") for s in regex_title]
&gt;&gt;&gt; regex_title
['I went to the store', "It's a nice day today", 'I went home for a rest']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your task is to unescape HTML, then better use <code>unescape</code> function:</p>
<pre><code>&gt;&gt;&gt; ll = ['I went to the store', 'Itlt&amp;#039;s a nice day today', 'I went home for a rest']
&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; h = HTMLParser.HTMLParser()
&gt;&gt;&gt; print map(h.unescape, ll)
['I went to the store', u"Itlt's a nice day today", 'I went home for a rest']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to change your code to this :</p>
<pre><code>for each in regex_title:
    if 'lt&amp;#039;' in each:
        each.replace("lt&amp;#039;", "'")
</code></pre>
<p><strong>But it doesn't change your list</strong> so you need to pass the replaced index to list:</p>
<pre><code>&gt;&gt;&gt; for each in regex_title:
...         if 'lt&amp;#039;' in each:
...             regex_title[regex_title.index(each)]=each.replace("lt&amp;#039;", "'")
... 
&gt;&gt;&gt; regex_title
['I went to the store', "It's a nice day today", 'I went home for a rest']
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't explain <strong>why</strong> you want to avoid importing standard library modules. There are very few good reasons to deny yourself the use of Python's included batteries; unless you have such a reason (and if you do, you should state it), you should use the functionality provided to you.</p>
<p>In this case, it's the <a href="https://docs.python.org/3/library/html.html#html.unescape" rel="nofollow noreferrer"><code>unescape()</code></a> function from the <code>html</code> module: <sup>1</sup></p>
<pre><code>from html import unescape

titles = [
    'I went to the store',
    'It&amp;#039;s a nice day today',
    'I went home for a rest'
]

fixed = [unescape(s) for s in titles]
</code></pre>
<pre><code>&gt;&gt;&gt; fixed
['I went to the store', "It's a nice day today", 'I went home for a rest']
</code></pre>
<p>Reimplementing <code>html.unescape()</code> yourself is</p>
<ol>
<li>Pointless.</li>
<li>Error-prone.</li>
<li>Going to mean constantly going back and adding new cases when new HTML entities crop up in your data.</li>
</ol>
<hr/>
<p><sup>1</sup> Since Python 3.4, anyway. For previous versions, use <code>HTMLParser.HTMLParser.unescape()</code> as per <a href="https://stackoverflow.com/a/26174192/1014938">@stalk's answer</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of doing this yourself, you'd be better off using the <code>HTMLParser</code> library, as described in <a href="https://stackoverflow.com/a/2087433/2314532">https://stackoverflow.com/a/2087433/2314532</a>. Read that question and answer for all the details, but the summary is:</p>
<pre><code>import HTMLParser
parser = HTMLParser.HTMLParser()
print parser.unescape('&amp;#039;')
# Will print a single ' character
</code></pre>
<p>So in your case, you'd want to do something like:</p>
<pre><code>import HTMLParser
parser = HTMLParser.HTMLParser()
new_titles = [parser.unescape(s) for s in regex_title]
</code></pre>
<p>That will unescape <em>any</em> HTML escape, not just the <code>&amp;#039;</code> escape that you asked about, and process the entire list all at once.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try like this:-</p>
<pre><code> regex_title = ['I went to the store', 'Itlt&amp;#039;s a nice day today', 'I went home for a rest']
 str=','.join(regex_title)
 str1=str.replace("lt&amp;#039;","'");    
 print str1.split()
</code></pre>
</div>
<span class="comment-copy">This seems odd to me.  unescaping that html should leave you with <code>Itlt's</code>, not <code>It's</code>...</span>
<span class="comment-copy">Also note that <a href="http://stackoverflow.com/a/2087433/748858">there may be a better way</a> ...</span>
<span class="comment-copy">Excellent. Thank you. I didn't realise I had to reassign the variable.</span>
<span class="comment-copy">+1 for recommending <code>map()</code>. Though I'd probably suggest list comprehensions to a Python newbie as the OP appears to be, since their syntax looks a bit more like the <code>for</code> loop that his instinct will be pushing him to write.</span>
<span class="comment-copy">There's a MUCH better way to do this, using list comprehensions: <code>new_list = [s.replace("lt&amp;#039;", "'") for s in old_list]</code>. But as I said in my answer, better to use HTMLParser.</span>
<span class="comment-copy">thanks for reminding i know that there is a lot ways for this aim , but at first i attempt to refine the OP's idea ! then i will add another ways !</span>
<span class="comment-copy">If you need indexes, use <code>enumerate</code>. Using <code>list.index</code> inside a loop is not efficient.</span>
<span class="comment-copy">i think using <code>enumerate</code> in this case decrease the performance because it need to store the index for every index in every cycle ! while we just need one index !</span>
<span class="comment-copy">See <a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">Time Complexity</a>.</span>
<span class="comment-copy">It was the requirement of a project to not import other modules. I'm sure this will be useful for someone in the future though, so there you go. Cheers.</span>
<span class="comment-copy">Worth to point, that this code is for python3, not for python2 (<code>html</code> module is in python3 only)</span>
<span class="comment-copy">@stalk good point. Edited :-)</span>
