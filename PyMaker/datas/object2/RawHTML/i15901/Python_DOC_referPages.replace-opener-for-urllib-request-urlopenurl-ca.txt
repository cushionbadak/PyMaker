<div class="post-text" itemprop="text">
<p>I am trying to get Python <code>urllib.request.urlopen(url, ca*)</code> to perform a certificate check but to ignore hostname mismatches.</p>
<p>(This is needed since the host might be accessed via public IP, private IP, hostname, or FQDN, and I don't want to rely on the certificate to have all those valid fields)</p>
<p>According to the official documentation, I can use a custom opener with an <code>HTTPSHandler</code> that disables hostname checking (<a href="https://docs.python.org/3/library/urllib.request.html" rel="nofollow">https://docs.python.org/3/library/urllib.request.html</a>)</p>
<p>However, due to Python Issue18543 (<a href="http://bugs.python.org/issue18543" rel="nofollow">http://bugs.python.org/issue18543</a>), <code>urllib.request.urlopen()</code> will ignore installed opener if any ca* argument is specified.</p>
<p>My question is:</p>
<p>What is the best way to work around this Issue? Should I try to override the <code>urllib.request.urlopen()</code> method? If so, how is this done in a pythonic way?
Any other alternatives? I don't really want to rewrite and maintain a lot of the base code.</p>
<p>My code so far (not working) is below:</p>
<pre><code>import ssl
import urllib.request  # used to be import urllib2 in python 2.x

#create an HTTPS Handler that does not check the hostname
https_handler = urllib.request.HTTPSHandler(debuglevel=0, check_hostname=False)

opener = urllib.request.build_opener(https_handler)
urllib.request.install_opener(opener)

# PROBLEM is that this opener will not be used by urlopen.
# solution: override the urlopen method?

# verify server certificate
try:
    urllib.request.urlopen("https://127.0.0.1:4443", cafile="cert.pem")

except ssl.CertificateError as e:
    print ("Certificate Error:",e)
    return -1
return 0
</code></pre>
<p>Running the code gives certificate error about hostname mismatch.</p>
<p>This problem has also been discussed here:
<a href="http://www.gossamer-threads.com/lists/python/bugs/1005966?do=post_view_threaded" rel="nofollow">http://www.gossamer-threads.com/lists/python/bugs/1005966?do=post_view_threaded</a></p>
<p>And particularly this post suggest a workaround:
<a href="http://www.gossamer-threads.com/lists/python/bugs/1006048?do=post_view_threaded#1006048" rel="nofollow">http://www.gossamer-threads.com/lists/python/bugs/1006048?do=post_view_threaded#1006048</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It seems that this is no trivial task, and that most solutions would not be reliable in the long run.</p>
<p>I want to post the solution I chose to solve this problem.</p>
<p>First, I chose to use the urllib3 library (<a href="https://pypi.python.org/pypi/urllib3" rel="nofollow">https://pypi.python.org/pypi/urllib3</a>).</p>
<p>From the docs, I found easiest to use the PoolManager:</p>
<pre><code>import urllib3

http = urllib3.PoolManager(cert_reqs='CERT_REQUIRED',
                           ca_certs="cert.pem",
                           assert_hostname=False)
try:
    r = http.request('GET', 'https://127.0.0.1:4443/')
    print("STATUS:", r.status)
    print("Certificate verification NO HOSTNAME successful")

except urllib3.exceptions.SSLError as e:
    print ("SSL Error:", e)
    return -1

return 0
</code></pre>
<p>Note that assert_hostname=False is ignored in urllib3 verison 1.10:
<a href="https://github.com/shazow/urllib3/issues/524" rel="nofollow">https://github.com/shazow/urllib3/issues/524</a></p>
</div>
