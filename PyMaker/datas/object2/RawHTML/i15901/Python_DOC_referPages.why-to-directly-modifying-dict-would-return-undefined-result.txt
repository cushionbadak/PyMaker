<div class="post-text" itemprop="text">
<p>I'm reading the book 'Beginning Python'. In which it mentions:</p>
<blockquote>
<p>In general, you should not modify the dictionary returned by vars because, according to the official Python documentation, the result is undefined. In other words, you might not get the result youâ€™re after.</p>
</blockquote>
<p>I'm confused here.</p>
<p>As <code>vars()</code> get the <code>__dict__</code> of the specified object.
And all the variable in that scope are based on that <code>__dict__</code>. How could it be so called <code>undefined</code> when modify it?</p>
<p>e.g. I did this:</p>
<pre><code>&gt;&gt;&gt; x = 0
&gt;&gt;&gt; vars()['x'] += 2
&gt;&gt;&gt; x
&gt;&gt;&gt; 2
</code></pre>
<p>Won't this x keep the value of 2 in that scope until someone changed the value of x? </p>
<p>So, what does <code>result is undefined</code> mean here?</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe the <a href="https://docs.python.org/3/library/functions.html?highlight=vars#vars" rel="nofollow">documentation</a> does answer your question:</p>
<blockquote>
<p>Objects such as modules and instances have an updateable __dict__ attribute; however, other objects may have write restrictions on their __dict__ attributes (for example, classes use a dictproxy to prevent direct dictionary updates).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://docs.python.org/2/library/functions.html#vars" rel="nofollow">the documentation states</a>:</p>
<blockquote>
<p>Without an argument, <code>vars()</code> acts like <code>locals()</code>. </p>
</blockquote>
<p>Switching to <code>locals</code>, then:</p>
<blockquote>
<p><strong>Note</strong>: The contents of this dictionary should not be modified; changes may not affect the values of local and free variables used by the interpreter.</p>
</blockquote>
<p>Note the <em>"may not"</em>; undefined means exactly that, there isn't an exact definition for what should happen. In other words, it's not guaranteed and you shouldn't write code that relies on it (either way).</p>
</div>
<span class="comment-copy">That they don't garantee the result you expect. With other words, you should never use it for modifying.</span>
<span class="comment-copy">This should not be closed, the person has a legitimate problem, and is trying to clarify it.</span>
<span class="comment-copy">I make a class A, and vars(A), I got <code>dict_proxy({'__dict__': &lt;attribute '__dict__' of 'A' objects&gt;, '__module__': '__main__', '__weakref__': &lt;attribute '__weakref__' of 'A' objects&gt;, '__doc__': None})</code></span>
<span class="comment-copy">Yeah, sounds like that. But does any one knows a typical failure of it?</span>
