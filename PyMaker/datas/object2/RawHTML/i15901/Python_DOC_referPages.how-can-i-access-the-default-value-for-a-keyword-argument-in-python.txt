<div class="post-text" itemprop="text">
<p>I'm trying to use the <code>__defaults__</code> attribute of a function object to get default values for arguments. It works for this case:</p>
<pre><code>&gt;&gt;&gt; def test(x, y=1): pass
... 
&gt;&gt;&gt; test.__defaults__
(1,)
</code></pre>
<p>but for this it doesn't:</p>
<pre><code>&gt;&gt;&gt; def test(*args, y=1): pass
... 
&gt;&gt;&gt; test.__defaults__
&gt;&gt;&gt; 
</code></pre>
<p>Why does <code>test.__defaults__</code> contain <code>None</code>? How can I get the default value for the parameter in this case?</p>
</div>
<div class="post-text" itemprop="text">
<p>You created a function with a <em>keyword-only</em> argument; you cannot use <code>y</code> as a positional argument. Keyword-argument defaults are stored in <code>__kwdefaults__</code>:</p>
<pre><code>&gt;&gt;&gt; test.__kwdefaults__
{'y': 1}
</code></pre>
<p>Quoting the Callable Types section of the <a href="https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy" rel="nofollow">Standard Types hierarchy datamodel documentation</a>:</p>
<blockquote>
<p><code>__kwdefaults__</code>: A dict containing defaults for keyword-only parameters. </p>
</blockquote>
<p>You should really use the <a href="https://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object" rel="nofollow"><code>inspect</code> module <code>Signature</code> object</a> to introspect callables however; it'll take care of details like these by providing you with a rich object instead:</p>
<pre><code>&gt;&gt;&gt; sig = inspect.signature(test)
&gt;&gt;&gt; {name: param.default for name, param in sig.parameters.items()
...  if not param.default is param.empty}
{'y': 1}
</code></pre>
</div>
