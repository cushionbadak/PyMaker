<div class="post-text" itemprop="text">
<p>Here's what I want to do</p>
<pre><code>class Vertex:
  def __init__(self, x,y):
    # ...

coords = [(0,0),(10,10)]
v0, v1 = map(lambda x,y: Vertex(x,y), coords)
</code></pre>
<p>The above code won't work, because the coord tuples get passed as <code>x</code>, and there is nothing for <code>y</code></p>
<p>A workaround that works is</p>
<pre><code>class Vertex:
  def __init__(self, x,y):
    # ...

coords = [(0,0),(10,10)]
v0, v1 = map(lambda coord: Vertex(coord[0],coord[1]), coords)
</code></pre>
<p>But the first solution looks more elegant to me. Probably I've to add an extra step to split the coord tuple. How do I do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use tuple-unpacking to call the <code>Vertex</code> constructor:</p>
<pre><code>coord = (0, 0)
Vertex(*coord)
</code></pre>
<p>Or for your example:</p>
<pre><code>v0, v1 = map(lambda coord: Vertex(*coord), coords)
</code></pre>
<p>Alternatively, since you are on Python 2, you can also make the lambda accept a tuple:</p>
<pre><code>v0, v1 = map(lambda (x, y): Vertex(x, y), coords)
</code></pre>
<p>Instead of calling <code>map</code> (which actually returns a generator in Python 3, so your code wouldnâ€™t work there), you can also use a list comprehension to create the Vertex objects:</p>
<pre><code>v0, v1 = [Vertex(*coord) for coord in coords]

# or unpack the coordinates as suggested by NPE
v0, v1 = [Vertex(x, y) for x, y in coords]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just put parentheses around <code>(x, y)</code>:</p>
<pre><code>v0, v1 = map(lambda (x,y): Vertex(x,y), coords)
#                   ^   ^
</code></pre>
<p>Edit: it turns out the above won't work in Python 3 (PEP 3113).</p>
<p>The following generator expression will work in both Python 2 and 3:</p>
<pre><code>v0, v1 = (Vertex(x, y) for x, y in coords)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> along with <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow">unpack operator</a> *:</p>
<pre><code>map(Vertex, *zip(*coords))
</code></pre>
<p>also, your <code>__init__</code> signature is possibly wrong, as I assume it misses <code>self</code> argument:</p>
<pre><code>&gt;&gt;&gt; class Vertex:
...     def __init__(self, x, y):
...         self.x, self.y = x, y
...     def __repr__(self):
...         return 'vertex({}, {})'.format(self.x, self.y)
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; coords = [(1, 2), (3, 4)]
&gt;&gt;&gt; tuple(map(Vertex, *zip(*coords)))
(vertex(1, 2), vertex(3, 4))
</code></pre>
</div>
<span class="comment-copy">Do note that the first option is removed in Python 3, so will raise <code>SyntaxError</code> there.</span>
<span class="comment-copy">@AshwiniChaudhary: Interesting. Didn't know that.</span>
<span class="comment-copy"><a href="http://legacy.python.org/dev/peps/pep-3113/" rel="nofollow noreferrer">PEP 3113 -- Removal of Tuple Parameter Unpacking</a></span>
