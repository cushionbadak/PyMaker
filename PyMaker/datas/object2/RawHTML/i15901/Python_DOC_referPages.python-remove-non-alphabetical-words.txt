<div class="post-text" itemprop="text">
<p>I am using the following code. Why does the output of my function still contains Numeric Values?</p>
<p><strong>Function</strong></p>
<pre><code>def removeNonAplhabet(inputlist):
    for w in inputlist:
        if ((w.isalnum()==True) or ( (w.isdigit()==True))):
            inputlist.remove(w);
     return inputlist;       
</code></pre>
<p><strong>Main Program</strong></p>
<pre><code>filtered_words=removeNonAplhabet(word_list);
print ('Removing Non Alphabetical Characters')
print (filtered_words)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['13', '1999', '2001', '280', 'amazon', 'another', 'april'] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Removing items while iterating the seqeunce does work as expected. Make a copy, and iterate the copy.</p>
<p>Or use <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.isalpha" rel="nofollow"><code>str.isalpha</code></a>:</p>
<pre><code>&gt;&gt;&gt; def removeNonAplhabet(inputlist):
...     return [w for w in inputlist if w.isalpha()]
...
&gt;&gt;&gt; removeNonAplhabet(['13', '1999', '2001', '280', 'amazon', 'another', 'april'])
['amazon', 'another', 'april']
</code></pre>
<p>BTW, <code>str.isalnum</code> will return True for word that only consist of alphabet.</p>
<pre><code>&gt;&gt;&gt; 'abc'.isalnum()
True
&gt;&gt;&gt; '123'.isalnum()
True
&gt;&gt;&gt; 'a,b'.isalnum()
False
</code></pre>
</div>
<span class="comment-copy">Thanks for a quick result. That works fine. But, can you enlighten me about the issue in the above code? I am curious to know what I was doing it wrong.</span>
<span class="comment-copy">To elaborate: if you have a list ['word', 'word' word'] and you iterate over that list to remove strings with non-digits, the result will be ['word']. Why is this? Well firstly the first string at index position 0 is evaluated and removed, and then all the other strings are shifted down. But your computer thinks it has already dealt with the string at index position 0, so it will not re-evaluate it. This means it will stay in your list... Hope this helps.</span>
<span class="comment-copy">@Inceptor361, Removing element while iterating the seqeunce, make the internal pointer corrupt.</span>
