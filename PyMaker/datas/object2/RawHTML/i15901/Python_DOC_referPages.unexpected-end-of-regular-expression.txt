<div class="post-text" itemprop="text">
<p>I want to get only the file name with extension from the path:</p>
<pre class="lang-none prettyprint-override"><code>C:\\Users\\anandada\\workspace\\MyTestProject\\src\\OpenTest.c
</code></pre>
<p>The statement below,</p>
<pre class="lang-py prettyprint-override"><code>fileName = re.match("[^\\]*.c$", fileName)
</code></pre>
<p>gives error: </p>
<blockquote>
<p>unexpected end of regular expression</p>
</blockquote>
<p>I am using python 3.3.2</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to <em>double</em> the doubled escapes <em>again</em>, <em>or</em> use a raw string instead:</p>
<pre><code>fileName = re.match("[^\\\\]*.c$",fileName)
</code></pre>
<p>or</p>
<pre><code>fileName = re.match(r"[^\\]*.c$",fileName)
</code></pre>
<p>otherwise first Python, then the regular expression compiler will interpret those backslashes, resulting in the <code>]</code> being escaped:</p>
<pre><code>&gt;&gt;&gt; print("[^\\]*.c$")
'[^\]*.c$'
</code></pre>
<p>Also see the <a href="https://docs.python.org/3/howto/regex.html#the-backslash-plague" rel="nofollow"><em>Blackslash Plague</em> section</a> of the Python Regex HOWTO.</p>
<p>Next, you need to be aware that <code>re.match</code> <em>anchors to the start of the string</em>. You'll probably want to use <code>re.search()</code> instead here. See the <a href="https://docs.python.org/3/howto/regex.html#match-versus-search" rel="nofollow"><em><code>match()</code> vs. <code>search()</code> section</em></a>:</p>
<blockquote>
<p>The <code>match()</code> function only checks if the RE matches at the beginning of the string while <code>search()</code> will scan forward through the string for a match. Itâ€™s important to keep this distinction in mind.</p>
</blockquote>
<p>You may also want to escape the <code>.</code> in the <code>.c</code> part; <code>.</code> matches any character, so <code>foobaric</code> would also match; the <code>i</code> would satisfy the <code>.</code> pattern.</p>
<p>The <code>re.match()</code> and <code>re.search()</code> functions return a <a href="https://docs.python.org/3/library/re.html#match-objects" rel="nofollow"><em>match object</em></a>, not the matched part of the string. You'll have to extract that part explicitly:</p>
<pre><code>fileName = re.search(r'[^\\]*\.c$', fileName).group()
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; fileName = 'C:\\Users\\anandada\\workspace\\MyTestProject\\src\\OpenTest.c'
&gt;&gt;&gt; re.search(r'[^\\]*\.c$', fileName).group()
'OpenTest.c'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is because you don't use a raw string. The double backslash is interpreted as an escape for the closing square bracket. You need to write:</p>
<pre><code>fileName = re.match(r"[^\\]*.c$", fileName)
</code></pre>
<p>with the raw string format <code>\\</code> is seen as a literal backslash as expected.</p>
</div>
<span class="comment-copy">Yes, and <code>[^\]*.c$</code> isn't a valid regex pattern as the <code>]</code> is escaped and the construct <code>[</code> is not balanced.</span>
<span class="comment-copy"><code>re.match</code> tries to match the input string from the begining..</span>
<span class="comment-copy">i think he wants only <code>OpenTest.c</code></span>
