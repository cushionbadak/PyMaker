<div class="post-text" itemprop="text">
<p>I don't want to be a bother, and I probably shouldn't be trying to even manipulate a programming language I know nothing about. But the deployment method this presents is too irresistible not to use. Basically urbackup has this script designed to automatically pull a downloader for a specific computer using its WMI %ComputerName% property. The issue I seem to be having is related to JSON not being able to authenticate with server any more after Python 3.4. I honestly know very little about Python, and if it is too complex for me to fix or would require more work than necessary I understand that, I just figured maybe its a simpler error that can be corrected by someone with a bit of know how. </p>
<pre><code>import http.client as http
import json
from urllib.parse import urlparse
from urllib.parse import urlencode
from base64 import b64encode
import hashlib
import socket
import shutil
import os


#############################
# Settings. Please edit.
#############################

#Your server URL
server_url = 'intentionallyremoved.com'

server_basic_username='intentionallyremoved'
server_basic_password='intentionallyremoved' 

#user needs following rights
# "settings": "all"
# "status": "some"
# "add_client": "all"
server_username='intentionallyremoved'
server_password='intentionallyremoved'


#############################
# Global script variables.
# Please do not modify.
#############################

session=""

def get_response(action, params):
    global server_url;
    global server_basic_username;
    global server_basic_password;
    global session;

    headers = {
        'Accept': 'application/json',
        'Content-Type': 'application/json; charset=UTF-8'
    }

    if('server_basic_username' in globals() and len(server_basic_username)&gt;0):
        userAndPass = b64encode(str.encode(server_basic_username+":"+server_basic_password)).decode("ascii")
        headers['Authorization'] = 'Basic %s' %  userAndPass

    curr_server_url=server_url+"?"+urlencode({"a": action});

    if(len(session)&gt;0):
        params["ses"]=session

    curr_server_url+="&amp;"+urlencode(params);

    target = urlparse(curr_server_url)
    method = 'GET'
    body = ''

    if(target.scheme=='http'):
        h = http.HTTPConnection(target.hostname, target.port)
    elif(target.scheme=='https'):
        h = http.HTTPSConnection(target.hostname, target.port)
    else:
        print('Unkown scheme: '+target.scheme)
        raise Exception("Unkown scheme: "+target.scheme)

    h.request(
            method,
            target.path+"?"+target.query,
            body,
            headers)

    return h.getresponse();

def get_json(action, params = {}):

    response = get_response(action, params)

    if(response.status != 200):
        return ""

    data = response.readall();

    response.close()    
    return json.loads(data.decode('utf8'))

def download_file(action, outputfn, params):

    response = get_response(action, params);

    if(response.status!=200):
        return False

    with open(outputfn, 'wb') as outputf:
        shutil.copyfileobj(response, outputf)


    return True       

def md5(s):
    return hashlib.md5(s.encode()).hexdigest()


print("Logging in...")

salt = get_json("salt", {"username": server_username})

if( not ('ses' in salt) ):
    print('Username does not exist')
    exit(1)

session = salt["ses"];

if( 'salt' in salt ):
    password_md5 = md5(salt["rnd"]+md5(salt["salt"]+server_password));

    login = get_json("login", { "username": server_username,
                                "password": password_md5 })

    if('success' not in login or not login['success']):
        print('Error during login. Password wrong?')
        exit(1)

    print("Creating client "+socket.gethostname()+"...")

    status = get_json("status", { "clientname": socket.gethostname()})

    for client in status["client_downloads"]:

        if (client["name"] == socket.gethostname()):

            print("Downloading Installer...")

            if not download_file("download_client", "Client Installer.exe", {"clientid": client["id"]}):

                print("Downloading client failed")
                exit(1)

            print("Sucessfully downloaded client")
            os.startfile("Client Installer.exe")
            exit(0)

    print("Could not find client for download. No permission?")
    exit(1)
</code></pre>
<p>The error it is outputting looks like this (I've removed applicable server names).</p>
<pre><code>Logging in...
Traceback (most recent call last):
  File "\\server\Share\Shortcuts\BackupScript\Script.py", line 110, in &lt;module&gt;
    salt = get_json("salt", {"username": server_username})
  File "\\server\Share\Shortcuts\BackupScript\Script.py", line 89, in get_json
    return json.loads(data.decode('utf8'))
  File "C:\Anaconda3\lib\json\__init__.py", line 318, in loads
    return _default_decoder.decode(s)
  File "C:\Anaconda3\lib\json\decoder.py", line 343, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "C:\Anaconda3\lib\json\decoder.py", line 361, in raw_decode
    raise ValueError(errmsg("Expecting value", s, err.value)) from None
ValueError: Expecting value: line 1 column 1 (char 0)
&gt;&gt;&gt; 
</code></pre>
<p>I've tried using different things talking about using different JSON methods that don't involve the decode variable, and using json.dump instead, but they all seem to lead to different errors because I don't know which parts of the code correspond to the parts of the code I'd be changing. This is really just a quality of life tool, and isn't absolutely necessary. But it would be comforting to simply convert this into an MSI I could deploy instead of having to manually one by one go to each of our (over 100) computers and manually do this. Any help would be appreciated :).</p>
<p>Here is the log in javascript from the back end of the server.</p>
<pre><code>g.login1=function ()
{
    var username=I('username').value;
    var password=I('password').value;

    if( username.length==0 )
    {   
        alert(trans("username_empty"));
        I('username').focus();
        return false;
    }
    if( password.length==0 )
    {
        alert(trans("password_empty"));
        I('password').focus();
        return false;
    }

    if(!startLoading()) return false;

    new getJSON("salt", "username="+username, login2);

    return false;
}
function login2(data)
{
    if(data.error==0)
    {
        alert(trans("user_n_exist"));
        stopLoading();
        I('username').focus();
        return;
    }

    if(data.ses)
        g.session=data.ses;

    var username=I('username').value;
    var password=I('password').value;

    var pwmd5=calcMD5(data.rnd+calcMD5(data.salt+password));

    new getJSON("login", "username="+username+"&amp;password="+pwmd5, login3);
}
function login3(data)
{
    stopLoading();
    if(data.error==2)
    {
        alert(trans("password_wrong"));
        I('password').focus();
        return;
    }

    g.allowed_nav_items = [];
    if(data.status!="none")
    {
        g.allowed_nav_items.push(6);
    }
    if(data.progress!="none")
    {
        g.allowed_nav_items.push(5);
    }
    if(data.browse_backups!="none")
    {
        g.allowed_nav_items.push(4);
    }
    if(data.logs!="none")
    {
        g.allowed_nav_items.push(3);
    }
    if(data.graph!="none")
    {
        g.allowed_nav_items.push(2);
    }
    if(data.settings!="none")
    {
        g.allowed_nav_items.push(1);
    }

    build_main_nav();
    show_status1();
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Could you try changing line 86 to read</p>
<pre><code>    data = response.read()
</code></pre>
<p>I don't know what readall() is but it's not listed in the <a href="https://docs.python.org/3/library/http.client.html#httpresponse-objects" rel="nofollow">docs for the HTTPResponse object</a></p>
</div>
<span class="comment-copy">The error seems to be that the server is not responding with actual JSON when you send it the <code>salt</code> action. It's impossible for us to tell you why since we don't know anything about the server. But you might try and put some print statements in <code>get_response</code> to show the values of <code>target.path</code> and <code>target.query</code> before the <code>h.request</code> line, to see what is going on. Note also those <code>global</code> statements are pointless and should be removed.</span>
<span class="comment-copy">@Daniel Roseman  When I do print(response.read()) I get the line below in the output.         b'Error: Unknown action []'   I assume this means I'm getting nothing useful.</span>
<span class="comment-copy">But what is it requesting in the first place? What are target.path and target.query?</span>
<span class="comment-copy">@Daniel Roseman   Looks like I get a a blank line and a=salt&amp;username=admin when I print(target.path) and print(target.query) inside of return h.getreponse. So I guess the target.path isn't doing anything?</span>
<span class="comment-copy">@ErlVoloton I modified that line, still having the same error come back.</span>
