<div class="post-text" itemprop="text">
<p>I have a pool of processes in python using <code>from multiprocessing import Pool</code>.  I pass to those processes different functions to be ran, calling the <code>Pool.apply_async</code> function. If I introduce an error in one of those functions (i.e.: a line of code such as <code>5/0</code>), the expected command line report <code>ZeroDivisionError: integer division or modulo by zero</code> never shows up, and the program never terminates.  Even if I introduce a callback function in the call to <code>Pool.apply_async</code>, the callback function never gets called if the function that the process has to execute has an error on it.</p>
<p>How can I have those processes in the pool report errors and terminate if something goes wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to actually try to <a href="https://docs.python.org/3.5/library/multiprocessing.html#multiprocessing.pool.AsyncResult.get" rel="nofollow"><code>get</code></a> the result from the <a href="https://docs.python.org/3.5/library/multiprocessing.html#multiprocessing.pool.AsyncResult" rel="nofollow"><code>AsyncResult</code></a> returned by <code>apply_async</code> (or <code>map_async</code>) for the exception to be raised in the parent.</p>
<pre><code>def func():
    raise Exception("We failed")

...
result = pool.apply_async(func, args=(arg))
time.sleep(2)
result.get() # Exception only gets raised here
</code></pre>
<p>Any <code>callback</code> you provide is only executed if the function returns successfully. It gets skipped if it raises an exception. </p>
<p>In Python 3.2+, the <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.apply_async" rel="nofollow"><code>error_callback</code></a> keyword argument was introduced, which allows you to pass a callback that gets executed if an exception is raised in the worker, but you can't do that in Python 2.x. What you can do is use wrap your worker function in a <code>try</code>/<code>except</code> block that <em>returns</em> any exception raised in the worker, rather than raising it:</p>
<pre><code>def func():
    try:
        raise Exception("We failed")
    except Exception as e:
        return e
</code></pre>
<p>Then you can have a normal callback function that checks to see if an <code>Exception</code> was returned:</p>
<pre><code>def callback(result):
   if isinstance(result, Exception):
       # Do whatever you need to do to clean up and exit
   else:
       # Function was successful
</code></pre>
</div>
<span class="comment-copy">Great for your info. Thanks a lot! I guess that I will move to python 3.2 to make things simpler.</span>
<span class="comment-copy">@ASDF I would recommend going to 3.4 if possible (it's much newer), but yes, Python 3.x would make your life easier here. If it's not too much work to port your program, go for it.</span>
