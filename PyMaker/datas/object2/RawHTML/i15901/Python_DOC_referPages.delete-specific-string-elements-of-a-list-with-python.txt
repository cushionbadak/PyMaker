<div class="post-text" itemprop="text">
<p>I have the following list:</p>
<pre><code>L = [('carga', 'NCFS000', 'superior', 'AQ0CS0'),('carga', 'NCFS000', 'frontal', 'AQ0CS0')]
</code></pre>
<p>How can remove <code>'NCFS000', 'AQ0CS0'</code> and the square brackets?, something like this:</p>
<pre><code>[('carga', 'superior'),('carga', 'frontal')]
</code></pre>
<p>This is what i all ready tried:</p>
<pre><code>def remove_values_from_list(the_list, val):
   return [value for value in the_list if value != val]

print "Esta es el bigrama final:\n",\
    remove_values_from_list(L, 'NCFS000')
</code></pre>
<p>But the id still in the list, how can i drop the idÂ´s and get all the words in the desired format?. How can i declare a regex for this task?. Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> and <a href="https://stackoverflow.com/questions/509211/explain-pythons-slice-notation">slicing</a>:</p>
<pre><code>&gt;&gt;&gt; L = [('carga', 'NCFS000', 'superior', 'AQ0CS0'),('carga', 'NCFS000', 'frontal', 'AQ0CS0')]
&gt;&gt;&gt; [x[::2] for x in L]
[('carga', 'superior'), ('carga', 'frontal')]
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is that you have a nested collection, but not a nested loop. The top-level list doesn't have any values <code>== 'NCFS000'</code>, so after removing all such values, nothing has changed.</p>
<p>What you want is: for each tuple in the list, remove each value <code>== 'NCFS000'</code>, right? You've got two "each"es there, so you need two <code>for</code>s somewhere in your code.</p>
<pre><code>def remove_values_from_list(the_list, val):
    return [[value for value in the_sublist if value != val]
            for the_sublist in the_list]
</code></pre>
<p>Of course this gives you a list of lists, not the list of tuples you started with. If that's a problem, Python doesn't have a "tuple comprehension", but it does that the <code>tuple</code> constructor and generator expressions, which is good enough:</p>
<pre><code>def remove_values_from_list(the_list, val):
    return [tuple(value for value in the_sublist if value != val)
            for the_sublist in the_list]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are only iterating over the tuples, instead of the values themselves. If you want to remove multiple values at once, you can do it like this:</p>
<pre><code>L = [('carga', 'NCFS000', 'superior', 'AQ0CS0'),('carga', 'NCFS000', 'frontal', 'AQ0CS0')]

def remove_values_from_list(the_list, val):    
    return [tuple(value for value in inner_list if value not in val) for inner_list in the_list]

print "Esta es el bigrama final:\n",\
    remove_values_from_list(L, ['NCFS000','AQ0CS0'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could compose your function by the following item:</p>
<pre><code>L = [('carga', 'NCFS000', 'superior', 'AQ0CS0'),('carga', 'NCFS000', 'frontal', 'AQ0CS0')]
r = frozenset(['NCFS000', 'AQ0CS0'])
result = [filter(lambda i: i not in r, t) for t in L]
</code></pre>
<p>, the result is what you expect.</p>
</div>
<div class="post-text" itemprop="text">
<p>In your code given <code>value != va</code> compares <code>'NCFS000'</code> with <code>('carga', 'NCFS000', 'superior', 'AQ0CS0')</code> for example, not giving the desired result.  You need to have a nested list comprehension. </p>
<p>This code filters based on a regex</p>
<pre><code>import re
def remove_values_from_list(the_list, regex):
   return [tuple(val for val in value if re.match(regex, val)) for value in the_list]
print remove_values_from_list(L, r'^[a-z]+$')
</code></pre>
<p>I can't post comments, so I have to do this here... 
My use of regex is not the same as what abarnert is thinking.  He thinks of turning the data structure into a string, and then running a regex on it.  That would be absurd, as he says.  But I am running a regex on the strings in the data structure.  This I think we could both agree is good.</p>
</div>
<span class="comment-copy">How can I "declare a regex for this task" is exactly the wrong thing to ask. It's almost always easier to process data that have been parsed into a nice data structure than to convert that data structure to a string and try to regex it into something you can parse back into a different data structure.</span>
<span class="comment-copy">so, is more efficient to use a data structure insted of a regex?</span>
<span class="comment-copy">First, "more efficient" is almost always completely irrelevant; if they're both linear-time, and this isn't a bottleneck, who cares which one is faster? But yes, in the rare cases where it matters, using the data structure you already have will usually be more efficient than representing it as a string, using a regex, and re-parsing it. More importantly, it will almost certainly be easier to read, understand, extend, and debug for you and everyone else who has to deal with your code.</span>
<span class="comment-copy">That only works if the position of the unwanted items is fixed, not if you want to remove the items by value.</span>
