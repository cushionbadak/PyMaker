<div class="post-text" itemprop="text">
<p>I have a simple python script which pickles an object and prints it.</p>
<pre><code>import pickle

o = {'first':1,'second':2,'third':3,'ls':[1,2,3]}
d = pickle.dumps(o) 
print(d)
</code></pre>
<p>Following are the outputs I get when i execute the same script multiple times:</p>
<ul>
<li><p><code>b'\x80\x03}q\x00(X\x05\x00\x00\x00firstq\x01K\x01X\x05\x00\x00\x00thirdq\x02K\x03X\x06\x00\x00\x00secondq\x03K\x02X\x02\x00\x00\x00lsq\x04]q\x05(K\x01K\x02K\x03eu.'</code></p></li>
<li><p><code>b'\x80\x03}q\x00(X\x05\x00\x00\x00thirdq\x01K\x03X\x02\x00\x00\x00lsq\x02]q\x03(K\x01K\x02K\x03eX\x05\x00\x00\x00firstq\x04K\x01X\x06\x00\x00\x00secondq\x05K\x02u.'</code></p></li>
<li><p><code>b'\x80\x03}q\x00(X\x05\x00\x00\x00firstq\x01K\x01X\x06\x00\x00\x00secondq\x02K\x02X\x02\x00\x00\x00lsq\x03]q\x04(K\x01K\x02K\x03eX\x05\x00\x00\x00thirdq\x05K\x03u.'</code></p></li>
<li><p><code>b'\x80\x03}q\x00(X\x05\x00\x00\x00thirdq\x01K\x03X\x05\x00\x00\x00firstq\x02K\x01X\x02\x00\x00\x00lsq\x03]q\x04(K\x01K\x02K\x03eX\x06\x00\x00\x00secondq\x05K\x02u.'</code></p></li>
</ul>
<p>Is it just a difference in ordering of the properties of the object or is there more to it?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, dictionary order is dependent on hash randomisation. Each time you start your interpreter, a different, random hash seed is used. If you were to <em>print</em> the dictionary, you'd see the different ordering too:</p>
<pre><code>$ bin/python -c "o = {'first':1,'second':2,'third':3,'ls':[1,2,3]}; print(o)"
{'first': 1, 'ls': [1, 2, 3], 'second': 2, 'third': 3}
$ bin/python -c "o = {'first':1,'second':2,'third':3,'ls':[1,2,3]}; print(o)"
{'ls': [1, 2, 3], 'third': 3, 'first': 1, 'second': 2}
$ bin/python -c "o = {'first':1,'second':2,'third':3,'ls':[1,2,3]}; print(o)"
{'second': 2, 'ls': [1, 2, 3], 'third': 3, 'first': 1}
</code></pre>
<p>Python uses a random seed to prevent certain types of Denial of Service attacks against programs parsing incoming user data into dictionaries, such as web servers; such an attack could otherwise predict when two strings would cause a hash collision in a dictionary and feed Python values that do nothing but create collisions, slowing down a Python program to a crawl.</p>
<p>You can set the seed to a fixed value with the <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED" rel="nofollow noreferrer"><code>PYTHONHASHSEED</code> environment variable</a>, or you can disable hash randomisation altogether:</p>
<blockquote>
<p>The integer must be a decimal number in the range [0,4294967295]. Specifying the value 0 will disable hash randomization.</p>
</blockquote>
<pre><code>$ PYTHONHASHSEED=0 bin/python -c "o = {'first':1,'second':2,'third':3,'ls':[1,2,3]}; print(o)"
{'third': 3, 'ls': [1, 2, 3], 'first': 1, 'second': 2}
$ PYTHONHASHSEED=0 bin/python -c "o = {'first':1,'second':2,'third':3,'ls':[1,2,3]}; print(o)"
{'third': 3, 'ls': [1, 2, 3], 'first': 1, 'second': 2}
</code></pre>
<p>Also see: <a href="https://stackoverflow.com/questions/15479928/why-is-the-order-in-python-dictionaries-and-sets-arbitrary">Why is the order in dictionaries and sets arbitrary?</a></p>
</div>
<span class="comment-copy">Amusingly, I need to wait another 7 minutes before I can accept this post even though I got what I wanted in under a minute from this answer.</span>
