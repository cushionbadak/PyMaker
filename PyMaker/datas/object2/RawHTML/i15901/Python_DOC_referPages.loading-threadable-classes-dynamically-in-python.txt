<div class="post-text" itemprop="text">
<p>I have a question posted <a href="https://stackoverflow.com/questions/26308917/python-threadable-sub-classes">here</a>, and I got it resolved.</p>
<p>My new question has to do with the code at the end that iterates through the modules in the directory and loads them dynmaically:</p>
<pre><code>modules = pkgutil.iter_modules(path=[os.path.join(path,'scrapers')])
for loader, mod_name, ispkg in modules:
    # Ensure that module isn't already loaded, and that it isn't the parent class
    if (mod_name not in sys.modules) and (mod_name != "Scrape_BASE"):
        # Import module
        loaded_mod = __import__('scrapers.'+mod_name, fromlist=[mod_name])
        # Load class from imported module. Make sure the module and the class are named the same
        class_name = mod_name
        loaded_class = getattr(loaded_mod, class_name)
        # only instantiate subclasses of Scrape_BASE
        if(issubclass(loaded_class,Scrape_BASE.Scrape_BASE)): 
            # Create an instance of the class and run it
            instance = loaded_class()
            instance.start()
            instance.join()
            text = instance.GetText()
</code></pre>
<p>In most of the classes I am reading a PDF from a website, scraping the content and setting the text that is subsequently returned by GetText().</p>
<p>In some cases, the PDF is too big and I end up with a Segmentation Fault. Is there a way to monitor the threads to make them time-out after 3 minutes or so? Does anyone have a suggestion as to how I implement this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <em>right</em> way to do this is to change the code in those classes that you haven't shown us, so that they don't run forever. If that's possible, you should definitely do that. And if what you're trying to time out is "reading the PDF from a website", it's almost certainly possible.</p>
<p>But sometimes, it isn't possible; sometimes you're just, e.g., calling some C function that has no timeout. So, what do you do about that?</p>
<p>Well, threads can't be interrupted. So you need to use processes instead. <a href="https://docs.python.org/3/library/multiprocessing.html#the-process-class" rel="nofollow"><code>multiprocessing.Process</code></a> is very similar to <code>threading.Thread</code>, except that it runs the code in a child process instead of a thread in the same process.</p>
<p>This does mean that you can't share any global data with your workers without making it explicit, but that's generally a <em>good</em> thing. However, it does mean that the input data (which in this case doesn't seem to be anything) and the output (which seems to be a big string) have to be picklable, and explicitly passed over queues. This is pretty easy to do; read the <a href="https://docs.python.org/3/library/multiprocessing.html#exchanging-objects-between-processes" rel="nofollow">Exchanging objects between processes</a> section for details.</p>
<p>While we're at it, you may want to consider rethinking your design to think in terms of tasks instead of threads. If you have, say, 200 PDFs to download, you don't really want 200 threads; you want maybe 8 or 12 threads, all servicing a queue of 200 jobs. The <code>multiprocessing</code> module has support for process pools, but you may find <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow"><code>concurrent.futures</code></a> a better fit for this. Both <code>multiprocessing.Pool</code> and <code>concurrent.futures.ProcessPoolExecutor</code> let you just pass a function and some arguments, and then wait for the results, without having to worry about scheduling or queues or anything else.</p>
</div>
<span class="comment-copy">Lots of great ideas here. I will look into some and see if they can help me,</span>
