<div class="post-text" itemprop="text">
<p>I have a code which looks like this: </p>
<pre><code>try:
    a = form['a']
except KeyError:
    pass
try:
    b = form['b']
except KeyError:
    pass
try:
    c = form['c']
except KeyError:
    pass
try:
    d = form['d']
except KeyError:
    pass
</code></pre>
<p>Is it posible to do something like this: </p>
<pre><code>try:
    a = form['a']
    b = form['b']
    c = form['c']
    d = form['d']
except KeyError:
    somekeyword
</code></pre>
<p>So if there is no key 'a' in form still working and try to find key 'b' and so on</p>
<p>UPD: 
Sorry, my bad. I need to preserve all values not just one of them.
So I need the keyword or something like that that will help me continue try block even after exception raises.</p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>form</code> is a dictionary you may also use <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow"><code>.get(key, [default])</code></a> syntax:</p>
<pre><code>&gt;&gt;&gt; form = {'d':5}
&gt;&gt;&gt; form.get('a', form.get('b', form.get('c', form['d'])))
5
</code></pre>
<p>You can make the function calls <em>lazy</em> by using some iterators:</p>
<pre><code>&gt;&gt;&gt; from itertools import dropwhile
&gt;&gt;&gt; it = (form.get(k) for k in ['a', 'b', 'c', 'd'])
&gt;&gt;&gt; next(dropwhile(lambda val: val is None, it))
5
</code></pre>
<hr/>
<p><strong>edit</strong>: if you need all four:</p>
<pre><code>&gt;&gt;&gt; a, b, c, d = map(form.get, ['a', 'b', 'c', 'd'])
&gt;&gt;&gt; a, b, c, d
(None, None, None, 5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could simply do this, assuming form supports full dict semantics, and that None is actually a valid value of the form:</p>
<pre><code>sentinel = object()
user = sentinel
for key in "abcd":
    user = form.get(key, user)
if user is sentinel: # I don't know if None is a va
   whatever-you-mean-with-somekeyword
</code></pre>
</div>
<span class="comment-copy">yes, you can certainly do that.</span>
<span class="comment-copy">you can use <code>user=form.get('a')</code>, and when the key does not exist it returns <code>None</code> by default...</span>
<span class="comment-copy">You <i>can</i> do that, but it will work differently - the former still tries <code>user = form['b']</code> whether or not <code>user = form['a']</code> fails, while the latter doesn't.</span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/functions.html#iter" rel="nofollow noreferrer"><code>iter</code></a> is a built-in function, don't use it as a variable name.</span>
<span class="comment-copy">@BurhanKhalid very true! fixed that!</span>
<span class="comment-copy">Note that you can unpack from a list, so <code>a, b, c, d = map(form.get, ['a', 'b', 'c', 'd'])</code> also works. And if we're guaranteed that the keys are single chars that can be shortened to <code>a, b, c, d = map(form.get, 'abcd')</code></span>
<span class="comment-copy">Python supports <code>for...else</code> construct so that you don't have to mess with sentinels like this.</span>
<span class="comment-copy">Could you elaborate on where this would help here? AFAIK it's just about running code if there is a break within the loop. What would that help here?</span>
<span class="comment-copy">Sentinels are itself sometimes problematic if the value range is sufficiently large. Early breaking when a suitable value comes up is also often desirable, even though the algorithm won't be 1:1 same any more. And arguably using an explicit construct is a more Pythonic thing to do.</span>
<span class="comment-copy">@progo <code>sentinel</code> is a new object, so it cannot appear in <code>form</code>.</span>
<span class="comment-copy">@chepner: oh yes... I overlooked that detail that I admittedly haven't used before.</span>
