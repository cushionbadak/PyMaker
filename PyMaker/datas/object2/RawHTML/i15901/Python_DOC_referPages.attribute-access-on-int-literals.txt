<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; 1 .__hash__()
1
&gt;&gt;&gt; 1.__hash__()
  File "&lt;stdin&gt;", line 1
    1.__hash__()
             ^
SyntaxError: invalid syntax
</code></pre>
<p>It has been covered here before that the second example doesn't work because the int literal is actually parsed as a float.  </p>
<p>My question is, why <em>doesn't</em> python parse this as attribute access on an int, when the interpretation as a float is a syntax error?  The docs section on <a href="https://docs.python.org/3/reference/lexical_analysis.html#whitespace-between-tokens" rel="nofollow">lexical analysis</a> seem to suggest whitespace only required when other interpretations are ambiguous, but perhaps I'm reading this section wrong.  </p>
<p>On a hunch it seems like the lexer is greedy (trying to take the biggest token possible), but I have no source for this claim.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Read carefully, it says</p>
<blockquote>
<p>Whitespace is needed between two tokens only if their concatenation could otherwise be interpreted as <strong>a different token</strong> (e.g., ab is one token, but a b is two tokens).</p>
</blockquote>
<p><code>1.__hash__()</code> is tokenized as:</p>
<pre><code>import io, tokenize
for token in tokenize.tokenize(io.BytesIO(b"1.__hash__()").read):
    print(token.string)

#&gt;&gt;&gt; utf-8
#&gt;&gt;&gt; 1.
#&gt;&gt;&gt; __hash__
#&gt;&gt;&gt; (
#&gt;&gt;&gt; )
#&gt;&gt;&gt;
</code></pre>
<p>Python's lexer will choose a token <a href="https://docs.python.org/3/reference/lexical_analysis.html#other-tokens" rel="nofollow noreferrer">which comprises the longest possible string that forms a legal token, when read from left to right</a>; after parsing no two tokens should be able to be combined into a valid token. The logic is very similar to that <a href="https://stackoverflow.com/questions/23998026/why-isnt-this-a-syntax-error-in-python">in your other question</a>.</p>
<p>The confusion seems to be not recognizing the tokenizing step as a completely distinct step. If the grammar allowed splitting up tokens <em>solely to make the parser happy</em> then surely you'd expect </p>
<pre><code>_ or1.
</code></pre>
<p>to tokenize as</p>
<pre><code>_
or
1.
</code></pre>
<p>but there is no such rule, so it tokenizes as</p>
<pre><code>_
or1
. 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The lexer is very simple, and will not backtrack.  Language parsers are often divided into a lexing phase and a parsing phase, or a lexer and a parser.  The lexer breaks the character stream into tokens, and then the parser determines a program structure from the tokens.  The lexer sees four tokens: <code>1.</code>, <code>__hash__</code>, <code>(</code>, <code>)</code>: float, identifier, open-paren, close-paren.  The parser can't make sense of those tokens, but that doesn't mean the lexer will try to lex the characters differently.</p>
</div>
<div class="post-text" itemprop="text">
<p>It’s simply a matter of definition; for languages the grammar does the job.</p>
<p><a href="https://docs.python.org/3/reference/expressions.html#attribute-references" rel="nofollow">Attribute references</a> are defined at a much broader level than <a href="https://docs.python.org/3/reference/lexical_analysis.html#floating-point-literals" rel="nofollow">floating point literals</a>. So from a grammar level, the parser has to recognize <code>1.</code> as a floating point literal and not as a attribute reference.</p>
<p>Of course, the parser itself could backtrack when reaching the <code>_</code> and try to figure out that it’s <em>not</em> a floating point literal but an attribute reference instead. However, since CPython’s parser is a <a href="http://en.wikipedia.org/wiki/LL_parser" rel="nofollow">LL(1) parser</a> backtracking is not an option. As such, the grammar would have to be changed a lot to allow the parser to recognize this (although I’m not sure right now if it’s even possible with a LL(1) parser). We could also change Python’s parser to something else, maybe one that does backtrack, but doing so is not only a very difficult task (it also would require to change the grammar) but would increase the complexity of the parsing process a lot (and with that likely decrease the speed).</p>
<p>So <em>maybe</em> it would be possible, but it would require major changes in the language specification. And that alone would be problematic. It also would break existing code that make use of this early float recognition, e.g. <code>1.if True else 0</code>.</p>
</div>
