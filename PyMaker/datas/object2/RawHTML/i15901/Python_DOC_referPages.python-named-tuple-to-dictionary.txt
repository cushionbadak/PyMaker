<div class="post-text" itemprop="text">
<p>I have a named tuple class in python </p>
<pre><code>class Town(collections.namedtuple('Town', [
    'name', 
    'population',
    'coordinates',
    'population', 
    'capital', 
    'state_bird'])):
    # ...
</code></pre>
<p>What I'd like to do is turn this into a dictionary. I'll admit python is not one of my stronger languages. The key is that I dont want it to be rigidly tied to the name or numbers of the fields I have. </p>
<p>Is there a way to write it such that I could add more fields, or pass an entirely different named tuple in and get a dictionary.</p>
<p>Edit: I cant not alter the original class definition as its in someone elses code. So I need to take an instance of a Town and convert it to a dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p><em>TL;DR: there's a method <code>_asdict</code> provided for this.</em></p>
<p>Here is a demonstration of the usage:</p>
<pre><code>&gt;&gt;&gt; fields = ['name', 'population', 'coordinates', 'capital', 'state_bird']
&gt;&gt;&gt; Town = collections.namedtuple('Town', fields)
&gt;&gt;&gt; funkytown = Town('funky', 300, 'somewhere', 'lipps', 'chicken')
&gt;&gt;&gt; funkytown._asdict()
OrderedDict([('name', 'funky'),
             ('population', 300),
             ('coordinates', 'somewhere'),
             ('capital', 'lipps'),
             ('state_bird', 'chicken')])
</code></pre>
<p>This is a <a href="https://docs.python.org/3/library/collections.html#collections.somenamedtuple._asdict">documented method</a> of namedtuples, i.e. unlike the usual convention in python <strong>the leading underscore on the method name isn't there to discourage use</strong>.  Along with the other methods added to namedtuples, <code>_make</code>, <code>_replace</code>, <code>_source</code>, <code>_fields</code>, it has the underscore only to try and prevent conflicts with possible field names.</p>
<hr/>
<p><em>Note:</em>  For some 2.7.5 &lt; python version &lt; 3.5.0 code out in the wild, you might see this version:</p>
<pre><code>&gt;&gt;&gt; vars(funkytown)
OrderedDict([('name', 'funky'),
             ('population', 300),
             ('coordinates', 'somewhere'),
             ('capital', 'lipps'),
             ('state_bird', 'chicken')])
</code></pre>
<p>For a while the documentation had mentioned that <code>_asdict</code> was obsolete (see <a href="https://docs.python.org/3.3/library/collections.html#collections.somenamedtuple._asdict">here</a>), and suggested to use the built-in method <a href="https://docs.python.org/3/library/functions.html#vars">vars</a>.  That advice is now outdated; in order to fix <a href="http://bugs.python.org/issue24931">a bug</a> related to subclassing, the <code>__dict__</code> property which was present on namedtuples has again been removed by <a href="https://hg.python.org/cpython/rev/fa3ac31cfa44">this commit</a>.  </p>
</div>
<div class="post-text" itemprop="text">
<p>There's a built in method on <code>namedtuple</code> instances for this, <a href="https://docs.python.org/2/library/collections.html#collections.somenamedtuple._asdict" rel="noreferrer"><code>_asdict</code></a>.</p>
<p>As discussed in the comments, on some versions <code>vars()</code> will also do it, but it's apparently highly dependent on build details, whereas <code>_asdict</code> should be reliable. In some versions <code>_asdict</code> was marked as deprecated, but comments indicate that this is no longer the case as of 3.4.</p>
</div>
<div class="post-text" itemprop="text">
<p>On Ubuntu 14.04 LTS versions of python2.7 and python3.4 the <code>__dict__</code> property worked as expected. The <code>_asdict</code> <em>method</em> also worked, but I'm inclined to use the standards-defined, uniform, property api instead of the localized non-uniform api.</p>
<p>$ python2.7</p>
<pre><code># Works on:
# Python 2.7.6 (default, Jun 22 2015, 17:58:13)  [GCC 4.8.2] on linux2
# Python 3.4.3 (default, Oct 14 2015, 20:28:29)  [GCC 4.8.4] on linux

import collections

Color = collections.namedtuple('Color', ['r', 'g', 'b'])
red = Color(r=256, g=0, b=0)

# Access the namedtuple as a dict
print(red.__dict__['r'])  # 256

# Drop the namedtuple only keeping the dict
red = red.__dict__
print(red['r'])  #256
</code></pre>
<p>Seeing as <strong>dict</strong> is the semantic way to get a dictionary representing soemthing, (at least to the best of my knowledge).</p>
<hr/>
<p>It would be nice to accumulate a table of major python versions and platforms and their support for <code>__dict__</code>, currently I only have one platform version and two python versions as posted above.</p>
<pre><code>| Platform                      | PyVer     | __dict__ | _asdict |
| --------------------------    | --------- | -------- | ------- |
| Ubuntu 14.04 LTS              | Python2.7 | yes      | yes     |
| Ubuntu 14.04 LTS              | Python3.4 | yes      | yes     |
| CentOS Linux release 7.4.1708 | Python2.7 | no       | yes     |
| CentOS Linux release 7.4.1708 | Python3.4 | no       | yes     |
| CentOS Linux release 7.4.1708 | Python3.6 | no       | yes     |
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Case #1: one dimension tuple   </p>
<pre><code>TUPLE_ROLES = (
    (912,"Role 21"),
    (913,"Role 22"),
    (925,"Role 23"),
    (918,"Role 24"),
)


TUPLE_ROLES[912]  #==&gt; Error because it is out of bounce. 
TUPLE_ROLES[  2]  #==&gt; will show Role 23.
DICT1_ROLE = {k:v for k, v in TUPLE_ROLES }
DICT1_ROLE[925] # will display "Role 23" 
</code></pre>
<p>Case #2: Two dimension tuple<br/>
Example: DICT_ROLES[961] # will show 'Back-End Programmer'</p>
<pre><code>NAMEDTUPLE_ROLES = (
    ('Company', ( 
            ( 111, 'Owner/CEO/President'), 
            ( 113, 'Manager'),
            ( 115, 'Receptionist'),
            ( 117, 'Marketer'),
            ( 119, 'Sales Person'),
            ( 121, 'Accountant'),
            ( 123, 'Director'),
            ( 125, 'Vice President'),
            ( 127, 'HR Specialist'),
            ( 141, 'System Operator'),
    )),
    ('Restaurant', ( 
            ( 211, 'Chef'), 
            ( 212, 'Waiter/Waitress'), 
    )),
    ('Oil Collector', ( 
            ( 211, 'Truck Driver'), 
            ( 213, 'Tank Installer'), 
            ( 217, 'Welder'),
            ( 218, 'In-house Handler'),
            ( 219, 'Dispatcher'),
    )),
    ('Information Technology', ( 
            ( 912, 'Server Administrator'),
            ( 914, 'Graphic Designer'),
            ( 916, 'Project Manager'),
            ( 918, 'Consultant'),
            ( 921, 'Business Logic Analyzer'),
            ( 923, 'Data Model Designer'),
            ( 951, 'Programmer'),
            ( 953, 'WEB Front-End Programmer'),
            ( 955, 'Android Programmer'),
            ( 957, 'iOS Programmer'),
            ( 961, 'Back-End Programmer'),
            ( 962, 'Fullstack Programmer'),
            ( 971, 'System Architect'),
    )),
)

#Thus, we need dictionary/set

T4 = {}
def main():
    for k, v in NAMEDTUPLE_ROLES:
        for k1, v1 in v:
            T4.update ( {k1:v1}  )
    print (T4[961]) # will display 'Back-End Programmer'
    # print (T4) # will display all list of dictionary

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3. Allocate any field to the dictionary as the required index for the dictionary, I used 'name'. </p>
<pre><code>import collections

Town = collections.namedtuple("Town", "name population coordinates capital state_bird")

town_list = []

town_list.append(Town('Town 1', '10', '10.10', 'Capital 1', 'Turkey'))
town_list.append(Town('Town 2', '11', '11.11', 'Capital 2', 'Duck'))

town_dictionary = {t.name: t for t in town_list}
</code></pre>
</div>
<span class="comment-copy">Turn the class into a dictionary?  Or turn an instance of it?</span>
<span class="comment-copy">btw... look at tab completion or the <code>dir</code> command, which will show you the fields for any object... that would have shown the <code>_asdict</code> function directly.</span>
<span class="comment-copy">it looks like what you <i>really</i> want to do is subclass from <code>dict</code> instead of 'namedtuple', and pass the namedtuple into the initializer. Remember that if you're used to Cxx, <code>class Town(x)</code> isn't the constructor, <code>def __init__(self, *args, **kwargs)</code> inside it is.</span>
<span class="comment-copy">I can not alter the original class as its in someone elses code. so I have to subclass from namedtouble</span>
<span class="comment-copy">which part? <code>dir</code> is just a python built-in... you can run it on <i>any</i> python object, in a console or in a script (where it returns a list you can print or do whatever with), and it will return a list of (nearly) all the attributes the object. helpful if you're trying to figure out how an unknown object works.</span>
<span class="comment-copy">On Python 2.7 this gives:     TypeError: vars() argument must have <b>dict</b> attribute</span>
<span class="comment-copy">It depends on the point release.  It's missing in 2.7.4, added in 2.7.5</span>
<span class="comment-copy">Take a look at <a href="http://stackoverflow.com/q/34166469/877069">this question</a>. Looks like <code>_asdict()</code> and not <code>vars()</code> is the way to go in Python 3. <code>vars()</code> won't work starting in 3.5.1.</span>
<span class="comment-copy">@NickChammas Thanks for the notification.  I've updated the answer to keep it current.</span>
<span class="comment-copy">@KobeJohn then you couldn't have <code>"asdict"</code> be one of the tuple names.</span>
<span class="comment-copy">I wasn't the downvoter, but it could be because the <code>_asdict</code> method has been <a href="https://docs.python.org/3/library/collections.html#collections.somenamedtuple._asdict" rel="nofollow noreferrer">obsoleted in python3 (in favour of vars)</a></span>
<span class="comment-copy">Conversely, it looks like <code>vars</code> does't work on some older versions - on 2.7 it raises a <code>TypeError</code>, since that version's <code>namedtuple</code> class does not have an <code>__dict__</code> attribute.</span>
<span class="comment-copy">yes, Martijn and I have discussed that <a href="http://stackoverflow.com/a/19840533/674039">here</a>.  It will work on newer versions of 2.7 btw (I'm on 2.7.6 and it works)</span>
<span class="comment-copy">Past the edit window on my above comment - it fails on 2.7.5 so it must be new as of 2.7.6. Unless my 2.7.5 build is off, as Martijn's was at the linked answer? Anyway, it seems like whether or not it works on 2.7.5 depends on build specifics.</span>
<span class="comment-copy">Just a heads up: _asdict is not longer obseleted (and returns an OrderedDict now), and vars produces an error with Python 3.4 (from the removal of the <b>dict</b> attribute of namedtuples).</span>
<span class="comment-copy">Linux-3.10.0-693.el7.x86_64-x86_64-with-centos-7.4.1708-Core, Python 2.7 -- <code>__dict__</code> does not work.</span>
<span class="comment-copy">Not helpful as you know name is there. it should be a blind method</span>
