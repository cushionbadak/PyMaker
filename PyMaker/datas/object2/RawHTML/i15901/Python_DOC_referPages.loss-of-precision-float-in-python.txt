<div class="post-text" itemprop="text">
<p>I have a list called scores of varying -log probabilities.</p>
<p>when I call this function: </p>
<pre><code>maxState = scores.pop(scores.index(max(scores)))
</code></pre>
<p>and print <code>maxState</code>, I realize that the <code>maxState</code> loses its precision as a float. Is there a way I can get the maxState without losing precision? </p>
<p>ex: I print out the list scores: <code>[-35.7971525669589, -34.67875545008369]</code>
and print maxState, I get this: <code>-34.6787554501</code>
(You can see it's rounded)</p>
</div>
<div class="post-text" itemprop="text">
<p>You are confusing string presentation with actual contents. Nowhere is precision lost, only the string produced to write to your console is using a rounded value rather than show you all digits. And always remember that float numbers are digital approximations, not precise values.</p>
<p>Python floats are formatted differently when using the <code>str()</code> and <code>repr()</code> functions; in a list or other container, <code>repr()</code> is used, but print it directly and <code>str()</code> is used.</p>
<p>If you don't like either option, format it explicitly with the <a href="https://docs.python.org/2/library/functions.html#format" rel="nofollow"><code>format()</code> function</a> and specifying a precision:</p>
<pre><code>print format(maxState, '.12f')
</code></pre>
<p>to print it with 8 decimals, for example.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; maxState = -34.67875545008369
&gt;&gt;&gt; repr(maxState)
'-34.67875545008369'
&gt;&gt;&gt; str(maxState)
'-34.6787554501'
&gt;&gt;&gt; format(maxState, '.8f')
'-34.67875545'
&gt;&gt;&gt; format(maxState, '.12f')
'-34.678755450084'
</code></pre>
<p>The <code>repr()</code> output is <em>roughly</em> equivalent to using <code>'.17g'</code> as the format, while <code>str()</code> is equivalent to <code>'.12g'</code>; here the precision denotes when to use scientific notation (<code>e</code>) and when to display in floating point notation (<code>f</code>).</p>
<p>I say <em>roughly</em> because the <code>repr()</code> output aims to give you round-trippable output; see the <a href="https://docs.python.org/3/whatsnew/3.1.html#other-language-changes" rel="nofollow">change notes for Python 3.1 on <code>float()</code> representation</a>, which where backported to Python 2.7:</p>
<blockquote>
<p>What is new is how the number gets displayed. Formerly, Python used a simple approach. The value of <code>repr(1.1)</code> was computed as <code>format(1.1, '.17g')</code> which evaluated to <code>'1.1000000000000001'</code>. The advantage of using 17 digits was that it relied on IEEE-754 guarantees to assure that <code>eval(repr(1.1))</code> would round-trip exactly to its original value. The disadvantage is that many people found the output to be confusing (mistaking intrinsic limitations of binary floating point representation as being a problem with Python itself).</p>
<p>The new algorithm for <code>repr(1.1)</code> is smarter and returns <code>'1.1'</code>. Effectively, it searches all equivalent string representations (ones that get stored with the same underlying float value) and returns the shortest representation.</p>
</blockquote>
</div>
<span class="comment-copy">@Flav: Put the floating point value in a container, and it is trivial to reproduce.</span>
<span class="comment-copy">Yeah I forgot to actually use "print"</span>
<span class="comment-copy">minor note to your <code>floating point notation (f)</code>. In the docs it is defined as a fixed point: <code>Fixed point. Displays the number as a fixed-point number. The default precision is 6</code>. See: <a href="https://docs.python.org/3.6/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">docs.python.org/3.6/library/â€¦</a></span>
