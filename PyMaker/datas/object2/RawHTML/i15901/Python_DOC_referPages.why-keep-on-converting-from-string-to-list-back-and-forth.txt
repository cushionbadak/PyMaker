<div class="post-text" itemprop="text">
<p>I have a text file containing all the students' names and other information of my programing course like this:</p>
<pre><code>Smith, John sj0012@uni.edu smjo0012@student.edu Student  
Lester, Moe mole0025@uni.edu    mole0025@student.edu    Student
Christ, Jesus jech0020@uni.edu    jech@student.edu  Student
</code></pre>
<p>...</p>
<p>Some of them contains tabs and other unnecessary spaces in between the text within each line. So that the first email address and the second are tabbed. Sometimes between both these and between 'Student'. But my intention is just making a new text file containing just the Name, Lastname in a nice column.
I did manage to get my result but only by keep converting the text to list and back to string again. Is there a better way of doing this?
Python 2.7</p>
<pre><code>peps = open('ppl.txt', 'r')

for line in peps.readlines():
    line = line.strip()                   # Delete space
    line = line.split('\t')               # Split at tab indentation and make a list
    line = map(lambda s: s.strip(), line) # Remove tab indentation
    del line [1:]                         # Delete everything after Name.
    line = ','.join(line)                 # Make Lastname, Name a string at ','
    line = line.split(',')                # Make Lastname, Name a list at ','
    line[0], line[-1] = line[-1], line[0] # Exchange position of Lastname, Name
    line = ', '.join(line)                # Convert to string again and join at ','
    print line
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're trying to deal with a file where each line is a comma-separated list of values, that's exactly what the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow"><code>csv</code></a> module is for.</p>
<p>In your updated version, it looks like they're actually a <em>tab</em>-separated list of values… but that's just a dialect of CSV (known as TSV), which the module can also handle just fine:</p>
<pre><code>peps = open('ppl.txt', 'r')
reader = csv.reader(peps, delimiter='\t')
for row in reader:
    # here, row is a list of column values
</code></pre>
<p>You can also use <code>csv.writer</code> to write the rows back out in CSV format. You can even use <code>csv.writer(sys.stdout)</code> if you want to write those rows to the terminal. You never have to deal with splitting and joining; that's all taken care of for you.</p>
<hr/>
<p>However, the <em>first</em> column is itself a <code>lastname, first</code>, which you also need to parse. For that, I'd use either <code>str.split</code> or <code>str.partition</code> (depending on exactly what behavior you want to get if, say, Cher is in your class). I'm also not sure whether you want to split on <code>', '</code>, or split on <code>,</code> and then strip out spaces. Either way is easy. For example:</p>
<pre><code>lastname, _, firstname = row[0].partition(',')
writer.writerow((firstname.strip(), lastname.strip()))
</code></pre>
<hr/>
<p>While we're at it, it's always better to use <code>with</code> statements with files, so let's do that too.</p>
<blockquote>
<p>But my intention is just making a new text file containing just the Name, Lastname in a nice column.</p>
</blockquote>
<pre><code>import csv
with open('ppl.txt') as infile, open('names.txt', 'w') as outfile:
    reader = csv.reader(infile, delimiter='\t')
    writer = csv.writer(outfile)
    for row in reader:
        lastname, _, firstname = row[0].partition(',')
        writer.writerow((firstname.strip(), lastname.strip()))
</code></pre>
<p>I'm not entirely sure what your issue is with spaces. If there are spaces after the tabs in some cases and you want to ignore them, you should look at the <a href="https://docs.python.org/3/library/csv.html#csv.Dialect.skipinitialspace" rel="nofollow"><code>skipinitialspaces</code></a> option in the <code>csv</code> module. For example:</p>
<pre><code>reader = csv.reader(infile, skipinitialspaces=True)
</code></pre>
<p>But if there are tabs and spaces in the middle of the actual columns, and you want to strip those out, you probably want to use <code>str.replace</code> or a regular expression for that. For example:</p>
<pre><code>lastname, _, firstname = row[0].partition(',')
firstname = re.sub(r'\s', '', firstname)
lastname = re.sub(r'\s', '', lastname)
writer.writerow((firstname, lastname))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a regex (<code>'(\w+),\W+(\w+)'</code>) to get Lastname, Name out of each line.</p>
<p>Something like this:</p>
<pre><code>import re
re.match('(\w+(?:-\w+)*),\W+(\w+(?:-\w+)*)', 'Lastname, Name, uniname@uni.edu, uniname@student.edu, Student/Teacher').groups()
</code></pre>
<p>Took help (for the hyphenated regex) from <a href="https://stackoverflow.com/a/8383339">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The other answers here will definitely work for you, but here's a simpler way to accomplish your task:</p>
<pre><code># we can open both the input and output files at the same time
with open('ppl.txt', 'r') as fi, open('output.txt', 'w') as fo:
    for line in fi:
        split_line = line.split()
        fo.write("{0}, {1}\n".format(split_line[1], split_line[0].strip(',')))
        # if using Python 3, remove the numbers from the curly brackets
</code></pre>
<p>If you don't like magic numbers, you can add the <code>itemgetter</code> module:</p>
<pre><code>import operator
retriever = operator.itemgetter(1, 0)

with open('ppl.txt', 'r') as fi, open('output.txt', 'w') as fo:
    for line in fi:
        f_name, l_name = retriever(line.split())
        fo.write("{0}, {1}\n".format(f_name, l_name.strip(',')))
</code></pre>
</div>
<span class="comment-copy">if you split at tab, then you shouldn't have to remove tabs later, they should be already gone.</span>
<span class="comment-copy">To do "no spaces in between the lines", just don't type blank lines in between them. Also, you should probably either quote them as code or as a quote. I've edited it for you, but please look and see if I've done it right.</span>
<span class="comment-copy">I'm confused. Can you give us literally three lines from the file? How are we supposed to know where the <code>firstname</code> field ends and the <code>email</code> field begins? Is there a comma there?</span>
<span class="comment-copy">@AdamSmith: In the original paste (and I hope I preserved it), there's a tab character after the end of the name, and likewise between all of the other columns, so this appears to be a TSV file. (I wish SO made it easier to distinguish tabs and spaces in code blocks…)</span>
<span class="comment-copy">@abarnert ah ha! I think I missed that in the original paste and thought it was all comma-separated. That invalidates my answer so I deleted. Using the <code>csv</code> module is the perfect solution in this case so I defer to your answer :)</span>
<span class="comment-copy">The csv module seems to do trick, by initially making everything a clear list. Much easier to work from there! Thanks.</span>
<span class="comment-copy">I see this a lot but am never sure: why use <code>lastname, _, firstname = row[0].partition(',')</code> instead of <code>lastname, firstname = row[0].split(',')</code>?</span>
<span class="comment-copy">@AdamSmith: As I said, "depending on exactly what behavior you want to get if, say, Cher is in your class". If you do <code>last, first = 'Cher'.split(',')</code>, you get a <code>ValueError</code> from trying to unpack a list of one value into two variables; <code>last, _, first = 'Cher'.partition(',')</code> gives you <code>'Cher'</code>, <code>''</code>, and <code>''</code>. Sometimes one is more appropriate, sometimes the other. When you can be sure it doesn't actually matter, you can try to figure out which one seems "conceptually nicer", or just pick at random. :)</span>
<span class="comment-copy">@Senethys you need to wrap it in another set of parentheses. Right now you're passing <code>writer.writerow</code> two arguments. One is <code>firstname.strip()</code> and the other is <code>lastname.strip()</code>. Instead you need to pass it ONE argument: the tuple <code>(firstname.strip(), lastname.strip())</code></span>
<span class="comment-copy">@AdamSmith: Thanks for the catch; I made that same typo in 2 out of 4 places. Fixed now.</span>
<span class="comment-copy">Might need to include additional characters for names that include punctuation (such as hyphenated names)?</span>
<span class="comment-copy">@PeterGibson Done.</span>
<span class="comment-copy">@BleedingFingers: That covers hyphens, but it doesn't work for apostrophes, periods, or, maybe more seriously, spaces, and <code>O'Donnell, Sinead Q.</code> is a perfectly valid name. Meanwhile, it catches things that can't be part of names, like underscores. I think it's a lot simpler to blacklist separator characters—comma, tab, and nothing else, in the OP's input—instead of whitelisting name characters. But if you want to do it that way, you can't just assume that people's names have the same rules as Python identifiers.</span>
<span class="comment-copy">While this method was quick, it didn't overwrite the names in a column. Also the lastname is fused with the name, starting with the fomer: JohnSmith, ChristJesus, LesterMoe</span>
<span class="comment-copy">@Senethys Sorry- that was my mistake. I forgot to put a newline character in the strings. You should be much happier with the output now.</span>
<span class="comment-copy">Wow, that's beautiful. Thanks.</span>
