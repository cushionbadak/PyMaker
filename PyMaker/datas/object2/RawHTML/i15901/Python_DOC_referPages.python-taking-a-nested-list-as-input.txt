<div class="post-text" itemprop="text">
<p>What is the best way to go about the following?</p>
<p>I want to let a user input a nested list as follows: </p>
<pre><code>grid = input('Enter grid')
</code></pre>
<p>The user will be inputting a grid such as this:</p>
<pre><code>[['', 'X', 'O'], ['X', 'O', ''], ['X', '', 'X']]
</code></pre>
<p>The problem is I am passing this input to a function that is expecting the input to be a nested list.
When getting the input grid is going to be a string which will not work with my function. Also if I 
type convert grid to a list using <code>list()</code> it produces a list with every charter of grid, i.e <code>[,[,','</code>.</p>
<p>What is a good way to take the input in the form above and turn it into a nested list to be passed to a function? I want the input value to a nested list as if it were set by the program itself.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>As inspectorG4dget commented, use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval</code></a>:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval("[['', 'X', 'O'], ['X', 'O', ''], ['X', '', 'X']]")
[['', 'X', 'O'], ['X', 'O', ''], ['X', '', 'X']]
</code></pre>
<p>To filter out invalid input, catch <a href="https://docs.python.org/3/library/exceptions.html#SyntaxError" rel="nofollow"><code>SyntaxError</code></a>:</p>
<pre><code>&gt;&gt;&gt; ast.literal_eval("[['', 'X', 'O'], ['X', 'O', ''], ['X', ', 'X']]")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python3.4/ast.py", line 46, in literal_eval
    node_or_string = parse(node_or_string, mode='eval')
  File "/usr/lib/python3.4/ast.py", line 35, in parse
    return compile(source, filename, mode, PyCF_ONLY_AST)
  File "&lt;unknown&gt;", line 1
    [['', 'X', 'O'], ['X', 'O', ''], ['X', ', 'X']]
                                               ^
SyntaxError: invalid syntax
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Actually, IMHO, you can simply use <code>json.loads</code> and tell the user to provide a json, your program will be much more stable/usable (i.e. the user doesnt need to have prior knowledge of python but simply of json which is a standard format).</p>
<p>The json corresponding to the list in question is basically almost the same as you provide (the quote should be double-quote and None should be null).</p>
<p>ex</p>
<pre><code>import json
json.loads('[["", "X", "O"], ["X", "O", ""], ["X", "", "X"]]')
# [[u'', u'X', u'O'], [u'X', u'O', u''], [u'X', u'', u'X']]

json.loads('[[null, 1, ""], [null, null, 0]]')
# [[None, 1, u''], [None, None, 0]]
</code></pre>
<p>If you know that you doesn't have crazy value (key with an <code>'</code> inside (ex "Texas Hold'em") or key that contains <code>None</code> (ex "DaNone")) then you could do basic preprocessing to handle those key before hand (if you don't want to force the simple quote)</p>
<p>for example:</p>
<pre><code>def parse_input_to_list(input):
    input = input.replace("'", '"').replace('None', 'null')
    return json.loads(input)


parse_input_to_list("[['', 'X', 'O'], ['X', 'O', ''], ['X', '', 'X']]")
# [[u'', u'X', u'O'], [u'X', u'O', u''], [u'X', u'', u'X']]  &lt;&lt; the input you provided

parse_input_to_list("[['null', 1, ''], [None, None, 0]]")
# [[u'null', 1, u''], [None, None, 0]]
parse_input_to_list('[[null, 1, ""], [null, null, 0]]')
# [[None, 1, u''], [None, None, 0]]
</code></pre>
<p>If the input provided is the output of another program then <code>json.dumps</code> the output of the other program for the data exchange (this is exactly for what Json is made for). and you're done.</p>
<p>If there is absolutly no way of using Json then you could use the ast solution of @alsetru which does work fine.</p>
</div>
<span class="comment-copy">I think you're looking for <a href="https://docs.python.org/3.4/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a></span>
<span class="comment-copy">Would not it be easier for the user to enter rows in a separate intputs like <code>' XO'</code>, <code>'XO '</code>, <code>'X X'</code>? Then you can make <code>list(s)</code> of each string and append it to the list of rows.</span>
<span class="comment-copy">Thank you for suggesting <code>ast.literal_eval</code> rather than <code>evil.eval</code>.  Though, with a change in quotes, this could be parsed as json as well.</span>
