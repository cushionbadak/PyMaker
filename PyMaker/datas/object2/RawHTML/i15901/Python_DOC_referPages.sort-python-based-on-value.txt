<div class="post-text" itemprop="text">
<p>I wrote some code just for the fun of it</p>
<pre><code>symbols = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "o", "p", "q",          "r", "s", "t", "u", "v", "w", "x", "y", "z"]
numbers = []
counter = 0

print("Enter Name")
name = input("&gt;")
if name:
    new_name = list(name)

    for x in range(0, len(symbols)):
        count_name = new_name.count(symbols[x])
        numbers.append(count_name)
        if count_name:
            counter += 1
    print("Character amount =", counter)

    for x in range(0, len(numbers)):
        if numbers[x]:
            print(symbols[x], "=", numbers[x])
else:
    print("Input = NULL")
</code></pre>
<p>When you enter your name for example
roemer</p>
<p>It prints out something like this:</p>
<pre><code>Character amount = 4    
e = 2    
m = 1    
o = 1    
r = 2    
</code></pre>
<p>But I want it to sort based on which character occurs most frequently</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for number, symbol in sorted(zip(numbers, symbols), reverse=True):
    if number:
        print(symbol, number)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If is not homework use the standard library  Counter in collections provide the needed functionality</p>
<pre><code>from collections import Counter
x =Counter("roemer")
x.most_common()

&gt;&gt;&gt; [('r', 2), ('e', 2), ('m', 1), ('o', 1)]
</code></pre>
<p>output of most common is already sorted.   can use other methods of Counter class of use list comprehension to get output in needed format.</p>
</div>
<span class="comment-copy">So what attempt have you made to implement that?</span>
<span class="comment-copy">So, you've... read the relevant documentation? Made an attempt to implement something that went wrong? Tried to fix that implementation to no avail? Or just dumped it on us?</span>
<span class="comment-copy">You will have to find a way to combine the <code>symbols</code> and <code>numbers</code> arrays before sorting - I suggest <code>zip</code>.</span>
<span class="comment-copy">Another way would be using a <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer">dictionary</a>, with the letter as keys. For example <code>d = {}; d['a'] = d.get('a', 0) + 1</code> (<a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer">get method</a>)</span>
<span class="comment-copy">I've added this: total = dict(zip(symbols, numbers)). this gives my a dictionary, but I've searched the internet for a bit and it seems impossible to sort by value?</span>
<span class="comment-copy">Thanks so much! Would you perhaps also know how to display the most frequent character and also if there are multiple highest characters like e = 3 and r = 3. So basically display all most frequent characters</span>
<span class="comment-copy">It is not homework, but I already did it this way. sort_dic = dict(sorted(zip(symbols, numbers)))         maxval = max(sort_dic.items(),key=operator.itemgetter(1))[1]       max_keys = [k for k, v in sort_dic.items() if v == maxval]         max_sort_keys = sorted(max_keys)         try:             if max_sort_keys[1]:                 print("Most frequent characters are", max_sort_keys)         except IndexError:             print("Most frequent character is", max_sort_keys)          print("Character amount =", counter)</span>
<span class="comment-copy">then you will agree that x.most_common() is much more readable</span>
<span class="comment-copy">Im on mobile atm will Counter accept a variable?</span>
<span class="comment-copy">of course... "Dict subclass for counting hashable items"  <a href="https://docs.python.org/2/library/collections.html" rel="nofollow noreferrer">docs.python.org/2/library/collections.html</a></span>
<span class="comment-copy">Thanks for your help</span>
