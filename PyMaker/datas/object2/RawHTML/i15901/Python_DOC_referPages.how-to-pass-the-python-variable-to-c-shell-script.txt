<div class="post-text" itemprop="text">
<p>I am using Centos 7.0 and PyDEv in Eclipse. I am trying to pass the variable in Python into c shell script. But I am getting error:</p>
<p>This is my Python script named raw2waveconvert.py</p>
<pre><code>num = 10
print(num)
import subprocess
subprocess.call(["csh", "./test1.csh"])
</code></pre>
<p>Output/Error when I run the Python script:</p>
<pre><code>10

num: Undefined variable.
</code></pre>
<p>The file test1.csh contains:</p>
<pre><code>#!/bin/csh
set nvar=`/home/nishant/workspace/codec_implement/src/NTTool/raw2waveconvert.py $num` 
echo $nvar
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Okey, so apparently it's not so easy to find a nice and clear duplicate. This is how it's usually done. You either pass the value as an argument to the script, or via an environmental variable.</p>
<p>The following example shows both ways in action. Of course you can drop whatever you don't like.</p>
<pre><code>import subprocess
import shlex

var = "test"
env_var = "test2"
script = "./var.sh"

#prepare a command (append variable to the scriptname)
command = "{} {}".format(script, var)
#prepare environment variables
environment = {"test_var" : env_var}

#Note: shlex.split splits a textual command into a list suited for subprocess.call
subprocess.call( shlex.split(command), env = environment )
</code></pre>
<p>This is corresponding bash script, but from what I've read addressing command line variables is the same, so it should work for both <code>bash</code> and <code>csh</code> set as default shells.</p>
<p><code>var.sh</code>:</p>
<pre><code>#!/bin/sh

echo "I was called with a command line argument '$1'"
echo "Value of enviormental variable test_var is '$test_var'"
</code></pre>
<p>Test:</p>
<pre><code>luk32$ python3 subproc.py 
I was called with a command line argument 'test'
Value of enviormental variable test_var is 'test2'
</code></pre>
<p>Please note that the python interpreter needs to have appropriate access to the called script. In this case <code>var.sh</code> needs to be executable for the user <code>luk32</code>. Otherwise, you will get <code>Permission denied</code> error.</p>
<p>I also urge to read docs on <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow"><code>subprocess</code></a>. Many other materials use <code>shell=True</code>, I won't discuss it, but I dislike and discourage it. The presented examples should work and be safe.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>subprocess.call(..., env=os.environ + {'num': num})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The only way to do what you want here is to export/pass the variable value through the shell environment. Which requires using the <code>env={}</code> dictionary argument.</p>
<p>But it is more likely that what you <em>should</em> do is pass arguments to your script instead of assuming pre-existing variables. Then you would stick <code>num</code> in the array argument to <code>subprocess.call</code> (probably better to use <code>check_call</code> unless you know the script is supposed to fail) and then use <code>$1</code>/etc. as normal.</p>
</div>
<span class="comment-copy">Like to any other shell using a subprocess call. This is 99,9% a duplicate.</span>
<span class="comment-copy">Why is your code calling each other? That will cause infinite sub-shells (recursion).</span>
<span class="comment-copy">@alvits: My code is not calling each other. I am calling the Shell script in the Python script and just passing the variable in Python code to shell script.</span>
<span class="comment-copy">@luk32: Did not get ur point as 99.9% duplicate. would you mind elaborating?</span>
<span class="comment-copy">@nprak - Then you have infinite sub-shells(recursion). Here's why. <code>raw2waveconvert.py</code> calls <code>test1.csh</code> via <code>subprocess.call()</code>. <code>test1.csh</code> calls <code>/home/nishant/workspace/codec_implement/src/NTTool/raw2waveconvert.py</code> via <code>$()</code> to assign <code>stdout</code> to <code>nvar</code>. When <code>raw2waveconvert.py</code> executes, it will call <code>test1.csh</code> via <code>subprocess.call()</code> which in turn calls <code>raw2waveconvert.py</code>. It will never end.</span>
<span class="comment-copy">thanks a lot, it worked. However, I just want to know from where do you guys learn all these stuff, I never find these in the books. seriously there must be some resource which can explain these things.</span>
<span class="comment-copy">Google <a href="https://www.google.pl/search?q=call+shell+script+from+python&amp;oq=call+shell+sc&amp;aqs=chrome.1.69i57j0l5.5350j0j7&amp;sourceid=chrome&amp;es_sm=93&amp;ie=UTF-8" rel="nofollow noreferrer">"call shell script from python"</a>. Click 1st link. Click 1st link in the 1st answer. Read the documentation</span>
<span class="comment-copy">thank you ..................</span>
<span class="comment-copy">I wanted to know what if I need to pass the integer value selected from combo box to the shell</span>
<span class="comment-copy">Do you mean this:                                   subprocess.call(["csh", "./test1.csh",], env=os.environ + {'num': num})</span>
<span class="comment-copy">There is no such thing as a "shell environment"; environment variables are not specific to the shell.</span>
<span class="comment-copy">@IgnacioVazquez-Abrams The environment of the shell process he is running is the only way to get the variable he is trying to have exist exist in the script he is running. Hence "shell environment". Though your comment did make me realize that <code>shell=True</code> is almost certainly not required here.</span>
<span class="comment-copy">@IgnacioVazquez-Abrams Yes, which would be the environment of the shell he is running. Which was my point. Would <code>shell's environment</code> make you happier?</span>
