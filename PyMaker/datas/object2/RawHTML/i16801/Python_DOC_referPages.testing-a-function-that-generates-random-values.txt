<div class="post-text" itemprop="text">
<p>I have this piece of code that I can use to generate a random number of values:</p>
<pre><code>import random
def random_digit_number(num_of_digits, leading_zeroes=True):
    """
    Generate a random number with specified number of digits
    """
    if not leading_zeroes:
        return random.randint(10**(num_of_digits-1), 10**num_of_digits-1)
    else:
        return str("%0" + str(num_of_digits) + "d") % random.randint(0, 10**num_of_digits-1)
</code></pre>
<p>I am supposed to write a <code>unittest</code> for this function.</p>
<p>My question is, how do I test this function considering that it will generate random values? How do I cover all the edge cases? What do I even test for here?</p>
</div>
<div class="post-text" itemprop="text">
<p>I can see at least four ways you can test this, but there are probably more.</p>
<ol>
<li>Test whether it generates the correct number of values for various inputs, including requests for very large numbers of random numbers.</li>
<li>Test whether it behaves correctly when the number of values requested is negative.</li>
<li>Test whether the flag <code>leading_zeroes</code> actually works as expected.</li>
<li>Seed the random number generator with a fixed value using <code>random.seed()</code> and then verify that the sequence is deterministic and matches the expected sequence. Note that this may be implementation-dependent, so this test may not be effective if your function is intended to run on different versions of Python.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Mock <code>random</code> in this module using <code>unittest.mock.patch</code></li>
<li>Run this function "enough times" assert every output is within expected range</li>
</ol>
<p><a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow">https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch</a></p>
</div>
