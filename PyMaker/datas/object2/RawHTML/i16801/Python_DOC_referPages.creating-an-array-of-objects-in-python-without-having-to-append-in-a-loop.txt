<div class="post-text" itemprop="text">
<p>I am trying to create an array of object. I am able to do it like this:  </p>
<pre><code>def MyClass(object):
    def __init__(self, number=0):
         self.number=number

my_objects = []

for i in range(100) :
    my_objects.append(MyClass(0))
</code></pre>
<p>I want, however, to create the array without the loop (because I think for a more complex object the appending can be very time consuming). Is there a way to achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could always use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>:</p>
<pre><code>my_objects = [MyClass(0) for _ in range(100)]
</code></pre>
<p>If you are using Python 2.x, you should also replace <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow"><code>range</code></a> with <a href="https://docs.python.org/2/library/functions.html#xrange" rel="nofollow"><code>xrange</code></a>:</p>
<pre><code>my_objects = [MyClass(0) for _ in xrange(100)]
</code></pre>
<p>This is because the latter computes numbers lazily where as the former creates an unnecessary list.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>my_objects = [MyClass(0) for i in range(100)]
</code></pre>
<p>or using repeat</p>
<pre><code>from itertools import repeat

my_objects = map(MyClass, repeat(0, 100))
</code></pre>
</div>
<span class="comment-copy">Appending a complex object to a list is exactly as expensive as appending a simple object, since all that is appended is a reference to the object. Variables, lists, function calls, all these things only store and manipulate references. Unlike in, say, C++, if you don't explicitly make a copy of your object, there probably won't be a copy involved.</span>
<span class="comment-copy">In this case wouldn't it actually be ok to use <code>range</code> since <code>range</code> generates a list of items?</span>
<span class="comment-copy">The list of numbers produced by <code>range</code> is a separate thing from the list of objects produced by the comprehension.</span>
<span class="comment-copy">Ah... I thought <code>range</code> could be taken advantage of once ;)</span>
