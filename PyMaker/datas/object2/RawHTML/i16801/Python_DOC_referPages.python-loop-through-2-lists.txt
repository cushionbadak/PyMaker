<div class="post-text" itemprop="text">
<p>I am writing some code in Python that is almost working, but there is one thing I am unable to figure out.</p>
<p>I need to loop through 2 lists. I want to loop through until the first list is complete; whereas the second list should repeat itself until the first list is complete.</p>
<p>I want to input a list of databases and a list of streams. Then I want the code to output the 9 lines by replacing where it has "+ stream +" and "+ item +". The item part works fine, but I don't know how to output the list of streams while iterating through the list of databases. I want the streams to cycle through and then repeat. So it will start at 1a and then reach 3c, and then start over again at 1a. I want this to happen until it reaches the last database in the list.</p>
<pre><code>databases=input("Enter databases: ")
streams="1a 2a 3a 1b 2b 3b 1c 2c 3c"
stream="1a"

db_list = databases.split()
streams_list= streams.split()

for item in db_list:
    print("unlink $ORACLE_BASE/admin/" + item + "/backup")
    print("unlink $ORACLE_BASE/admin/" + item + "/dpdump")
    print("unlink $ORACLE_BASE/admin/" + item + "/exp")
    print("mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM" + stream + "/" + item + "/backup")
    print("mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM" + stream + "/" + item + "/dpdump")
    print("mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM" + stream + "/" + item + "/exp")
    print("ln -s $ORACLE_BASE/acfsmounts/global/STREAM" + stream + "/" + item + "/backup $ORACLE_BASE/admin/" + item + "/backup")
    print("ln -s $ORACLE_BASE/acfsmounts/global/STREAM" + stream + "/" + item + "/dpdump $ORACLE_BASE/admin/" + item + "/dpdump")
    print("ln -s $ORACLE_BASE/acfsmounts/global/STREAM" + stream + "/" + item + "/exp    $ORACLE_BASE/admin/" + item + "/exp")
</code></pre>
<p>Here is the output:</p>
<pre class="lang-none prettyprint-override"><code>Enter databases: database1 database2 database3
unlink $ORACLE_BASE/admin/database1/backup
unlink $ORACLE_BASE/admin/database1/dpdump
unlink $ORACLE_BASE/admin/database1/exp
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM1a/database1/backup
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM1a/database1/dpdump
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM1a/database1/exp
ln -s $ORACLE_BASE/acfsmounts/global/STREAM1a/database1/backup $ORACLE_BASE/admin/database1/backup
ln -s $ORACLE_BASE/acfsmounts/global/STREAM1a/database1/dpdump $ORACLE_BASE/admin/database1/dpdump
ln -s $ORACLE_BASE/acfsmounts/global/STREAM1a/database1/exp    $ORACLE_BASE/admin/database1/exp
unlink $ORACLE_BASE/admin/database2/backup
unlink $ORACLE_BASE/admin/database2/dpdump
unlink $ORACLE_BASE/admin/database2/exp
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM1a/database2/backup
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM1a/database2/dpdump
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM1a/database2/exp
ln -s $ORACLE_BASE/acfsmounts/global/STREAM1a/database2/backup $ORACLE_BASE/admin/database2/backup
ln -s $ORACLE_BASE/acfsmounts/global/STREAM1a/database2/dpdump $ORACLE_BASE/admin/database2/dpdump
ln -s $ORACLE_BASE/acfsmounts/global/STREAM1a/database2/exp    $ORACLE_BASE/admin/database2/exp
unlink $ORACLE_BASE/admin/database3/backup
unlink $ORACLE_BASE/admin/database3/dpdump
unlink $ORACLE_BASE/admin/database3/exp
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM1a/database3/backup
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM1a/database3/dpdump
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM1a/database3/exp
ln -s $ORACLE_BASE/acfsmounts/global/STREAM1a/database3/backup $ORACLE_BASE/admin/database3/backup
ln -s $ORACLE_BASE/acfsmounts/global/STREAM1a/database3/dpdump $ORACLE_BASE/admin/database3/dpdump
ln -s $ORACLE_BASE/acfsmounts/global/STREAM1a/database3/exp    $ORACLE_BASE/admin/database3/exp
</code></pre>
<p>My output has STREAM1a every time, but I want it to cycle through the pattern of 1a, 2a, 3a, 1b, 2b, 3b, 1c, 2c, and 3c. As mentioned, if I have more than 9 databases, then it would start over at 1a again. How can I achieve this?</p>
<p>The only part of my code that isn't working the way I want is where it says "+ stream +".</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow">itertools.cycle</a>. This will allow you to get the elements of a list in an endlessly repeating cycle. Add this code at the start of your loop:</p>
<pre><code>stream_cycle = itertools.cycle(streams_list)
for item in db_list:
    stream = stream_cycle.next()
</code></pre>
<p>or as @HughBothwell suggested, you can use zip and include it in the definition of the <code>for</code> loop:</p>
<pre><code>for item, stream in zip(db_list, itertools.cycle(streams_list)):
</code></pre>
<p>Either way will give you the next stream at each iteration of the loop. If you have more dbs than streams, then it will repeat.</p>
</div>
<div class="post-text" itemprop="text">
<p>The trick is to use iterator from <code>itertools</code> called <code>cycle</code></p>
<pre><code>from itertools import cycle
databases=input("Enter databases: ")
streams="1a 2a 3a 1b 2b 3b 1c 2c 3c"
stream="1a"

db_list = databases.split()
stream_list= streams.split()

for item, stream in zip(db_list, cycle(stream_list)):
    print("unlink $ORACLE_BASE/admin/" + item + "/backup")
    print("unlink $ORACLE_BASE/admin/" + item + "/dpdump")
    print("unlink $ORACLE_BASE/admin/" + item + "/exp")
    print("mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM" + stream + "/" + item + "/backup")
    print("mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM" + stream + "/" + item + "/dpdump")
    print("mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM" + stream + "/" + item + "/exp")
    print("ln -s $ORACLE_BASE/acfsmounts/global/STREAM" + stream + "/" + item + "/backup $ORACLE_BASE/admin/" + item + "/backup")
    print("ln -s $ORACLE_BASE/acfsmounts/global/STREAM" + stream + "/" + item + "/dpdump $ORACLE_BASE/admin/" + item + "/dpdump")
    print("ln -s $ORACLE_BASE/acfsmounts/global/STREAM" + stream + "/" + item + "/exp    $ORACLE_BASE/admin/" + item + "/exp")
</code></pre>
<h2>bonus - command line parameters parsing using docopt</h2>
<p>Small bonus: to let you call the script and conveniently enter paremeters from command line</p>
<p>Install <code>docopt</code> package (just once)</p>
<pre><code>$ pip install docopt
</code></pre>
<p>Write modifed version of the script <strong>db.py</strong>:</p>
<pre><code>"""Usage:
    db.py -s &lt;stream&gt; (-s &lt;stream&gt;)... &lt;db&gt; &lt;db&gt;...
    db.py -h

For all database names &lt;db&gt; generates commands combining it with
names of &lt;stream&gt;s.
"""
from docopt import docopt
from itertools import cycle   

args = docopt(__doc__)

db_list = args["&lt;db&gt;"]
stream_list = args["&lt;stream&gt;"]

for item, stream in zip(db_list, cycle(stream_list)):
    print("unlink $ORACLE_BASE/admin/" + item + "/backup")
    print("unlink $ORACLE_BASE/admin/" + item + "/dpdump")
    print("unlink $ORACLE_BASE/admin/" + item + "/exp")
    print("mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM" + stream + "/" + item + "/backup")
    print("mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM" + stream + "/" + item + "/dpdump")
    print("mkdir -p /oradba/app/oracle/acfsmounts/global/STREAM" + stream + "/" + item + "/exp")
    print("ln -s $ORACLE_BASE/acfsmounts/global/STREAM" + stream + "/" + item + "/backup $ORACLE_BASE/admin/" + item + "/backup")
    print("ln -s $ORACLE_BASE/acfsmounts/global/STREAM" + stream + "/" + item + "/dpdump $ORACLE_BASE/admin/" + item + "/dpdump")
    print("ln -s $ORACLE_BASE/acfsmounts/global/STREAM" + stream + "/" + item + "/exp    $ORACLE_BASE/admin/" + item + "/exp")
</code></pre>
<p>Printout usage string:</p>
<pre><code>$ python db.py
Usage:
    db.py -s &lt;stream&gt; (-s &lt;stream&gt;)... &lt;db&gt; &lt;db&gt;...
    db.py -h
</code></pre>
<p>Show some help string:</p>
<pre><code>$ python db.py -h
Usage:
    db.py -s &lt;stream&gt; (-s &lt;stream&gt;)... &lt;db&gt; &lt;db&gt;...
    db.py -h

For all database names &lt;db&gt; generates commands combining it with
names of &lt;stream&gt;s.
</code></pre>
<p>And call it for real use:</p>
<pre><code>$ python db.py -s s2 -s s2 db1 db2 db3
unlink $ORACLE_BASE/admin/db1/backup
unlink $ORACLE_BASE/admin/db1/dpdump
unlink $ORACLE_BASE/admin/db1/exp
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAMs2/db1/backup
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAMs2/db1/dpdump
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAMs2/db1/exp
ln -s $ORACLE_BASE/acfsmounts/global/STREAMs2/db1/backup $ORACLE_BASE/admin/db1/backup
ln -s $ORACLE_BASE/acfsmounts/global/STREAMs2/db1/dpdump $ORACLE_BASE/admin/db1/dpdump
ln -s $ORACLE_BASE/acfsmounts/global/STREAMs2/db1/exp    $ORACLE_BASE/admin/db1/exp
unlink $ORACLE_BASE/admin/db2/backup
unlink $ORACLE_BASE/admin/db2/dpdump
unlink $ORACLE_BASE/admin/db2/exp
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAMs2/db2/backup
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAMs2/db2/dpdump
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAMs2/db2/exp
ln -s $ORACLE_BASE/acfsmounts/global/STREAMs2/db2/backup $ORACLE_BASE/admin/db2/backup
ln -s $ORACLE_BASE/acfsmounts/global/STREAMs2/db2/dpdump $ORACLE_BASE/admin/db2/dpdump
ln -s $ORACLE_BASE/acfsmounts/global/STREAMs2/db2/exp    $ORACLE_BASE/admin/db2/exp
unlink $ORACLE_BASE/admin/db3/backup
unlink $ORACLE_BASE/admin/db3/dpdump
unlink $ORACLE_BASE/admin/db3/exp
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAMs2/db3/backup
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAMs2/db3/dpdump
mkdir -p /oradba/app/oracle/acfsmounts/global/STREAMs2/db3/exp
ln -s $ORACLE_BASE/acfsmounts/global/STREAMs2/db3/backup $ORACLE_BASE/admin/db3/backup
ln -s $ORACLE_BASE/acfsmounts/global/STREAMs2/db3/dpdump $ORACLE_BASE/admin/db3/dpdump
ln -s $ORACLE_BASE/acfsmounts/global/STREAMs2/db3/exp    $ORACLE_BASE/admin/db3/exp
</code></pre>
</div>
<span class="comment-copy">do you want it to cycle through all the <code>stream</code>s for each item in <code>db_list</code>? For example, <code>database1 1a</code>, <code>database1 2a</code>, <code>database1 3a</code>, etc.?</span>
<span class="comment-copy">Yes that's exactly what I want. When it gets to database9 it will be at 3c. When it gets to database10 it needs to go back to 1a.</span>
<span class="comment-copy">maybe a generator function</span>
<span class="comment-copy">... or <code>for item,stream in zip(db_list, itertools.cycle(stream)):</code></span>
<span class="comment-copy">Good suggestion. I've added that in.</span>
<span class="comment-copy">I'm getting the error: ImportError: cannot import name 'izip' &lt;-- Is that because I'm using Python 3?</span>
<span class="comment-copy">@user2554129 Yes, <code>izip</code> doesn't exist in Python 3. That's why I used <code>zip</code> in my example rather than <code>izip</code>. You don't need to import it, either.</span>
<span class="comment-copy">That worked perfectly! Thank you! :) Is there a way for me to share my completed code in case anyone is interested?</span>
<span class="comment-copy">I placed "import itertools" at the top, then I put "from itertools import cycle, izip" in. I changed my for loop to "for item, stream in zip(db_list, itertools.cycle(streams_list)):", but I'm getting this error: "ImportError: cannot import name 'izip'". I think this is because I'm using Python 3?</span>
<span class="comment-copy">Jan,That seems pretty cool! Unfortunately I won't be able to take advantage of it since I will be working on hundreds of different servers. I'm not even sure if the servers have Python. So I will probably need to run the code on my local machine.</span>
<span class="comment-copy">@user2554129 This sounds scary - no Python - no fun. If you care about minimal installation dependencies, then since Python 2.7 there is builtin <code>argparse</code> module. But it seems wiser to generate the scripts on your machine and distribute it to the servers (over ssh?). But I am getting off track now. Good luck.</span>
