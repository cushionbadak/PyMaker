<div class="post-text" itemprop="text">
<p>I would like to implement the concatenation of paths to files using "\" as an operator, redefining the corresponding function (if any).</p>
<p>For example:</p>
<pre><code>path1 = '\home'
path2 = 'codes'

codepath = path1 \ path2
</code></pre>
<p>Thus, adding str "\" between path1 and path2 in the redefition of the method, I should assert <code>codepath = '\home\codes'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://pypi.python.org/pypi/pathlib/" rel="nofollow"><code>pathlib</code></a> module supports <code>/</code> for concatenating path objects.</p>
<pre><code>&gt;&gt;&gt; p = Path('/etc')
&gt;&gt;&gt; q = p / 'init.d' / 'reboot'
&gt;&gt;&gt; q
PosixPath('/etc/init.d/reboot')
&gt;&gt;&gt; q.resolve()
PosixPath('/etc/rc.d/init.d/halt')
</code></pre>
<p>As an example of how to use <code>__div__</code>, here's a simple class that extends <code>str</code>. It should work as long as at least one argument is an instance of <code>MyPath</code> (i.e., it won't work with two plain strings).</p>
<pre><code>class MyPath(str):
    def __div__(self, other):
        assert isinstance(other, str)
        return os.path.join(self, other)
    def __rdiv__(self, other):
        assert isinstance(other, str)
        return os.path.join(other, self)

# Using __div__
print MyPath("/home/bob") / MyPath("bin")
print MyPath("/home/bob") / "bin"

# Using __rdiv__
print "/home/bob" / MyPath("bin")
</code></pre>
</div>
<span class="comment-copy">You can't; not with backslash and not with standard types. Backslash is used to indicate a line continuation in Python expressions. You <i>could</i> use existing operators such as <code>/</code>, but you need a custom type to override the behaviour of the operator.</span>
<span class="comment-copy">How about <code>os.path.join('home', 'codes')</code>?</span>
<span class="comment-copy">Python 3.4 has a new module <a href="https://docs.python.org/dev/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> that does effectively this, except with <code>/</code> as the operator.</span>
<span class="comment-copy">Take a look at the new Python 3.4 library <a href="https://docs.python.org/3/library/pathlib.html#module-pathlib" rel="nofollow noreferrer"><code>pathlib</code></a> for a module that already uses <code>/</code> to join path elements.</span>
<span class="comment-copy">I need to do it in Python 2.7 for compatibility with standars functions.</span>
<span class="comment-copy">This is not standard in python 2.7 because it requires installation. I must do it with python 2.7 standard moludes because it will be used on various machines with 2.7 native (with no extra packages for compatibility)</span>
<span class="comment-copy">Then you're going to have to use <code>os.path.join</code>. The backslash is a non-starter, because it's not already an operator and you can't simply add new syntax. You could implement your own class to represent file paths and define <code>__div__</code> yourself to use <code>/</code>, but at that point you might as well just package <code>pathlib</code> with your code.</span>
<span class="comment-copy">That's the way to solve it. I will use the operator "/" and redefinire "div" in my class. Thank you chep</span>
<span class="comment-copy">How i can use / (<b>div</b>) to concatenate strings with "/"??? I get: TypeError: unsupported operand type(s) for /: 'str' and 'str'</span>
<span class="comment-copy">edit your answer with your first comment (implements <b>div</b> method) and i'll accept the answer.</span>
