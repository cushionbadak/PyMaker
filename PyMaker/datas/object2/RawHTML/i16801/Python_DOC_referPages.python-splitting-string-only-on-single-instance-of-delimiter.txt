<div class="post-text" itemprop="text">
<p>I'm trying to extract numeric values from text strings that use dashes as delimiters, but also to indicate negative values:</p>
<pre><code>"1.3"          # [1.3]
"1.3-2-3.9"    # [1.3, 2, 3.9]
"1.3-2--3.9"   # [1.3, 2, -3.9]
"-1.3-2--3.9"  # [-1.3, 2, -3.9]
</code></pre>
<p>At the moment, I'm manually checking for the "--" sequence, but this seems really ugly and prone to breaking.</p>
<pre><code>def get_values(text):
    return map(lambda s: s.replace('n', '-'), text.replace('--', '-n').split('-'))
</code></pre>
<p>I've tried a few different approaches, using both the str.split() function and re.findall(), but none of them have quite worked. </p>
<p>For example, the following pattern should match all the valid strings, but I'm not sure how to use it with findall:</p>
<pre><code>r"^-?\d(\.\d*)?(--?\d(\.\d*)?)*$"
</code></pre>
<p>Is there a general way to do this that I'm not seeing? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try to split with this pattern with a lookbehind:</p>
<pre><code>(?&lt;=[0-9])-
</code></pre>
<p>(An hyphen preceded by a digit)</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split('(?&lt;=[0-9])-', text)
</code></pre>
<p>With this condition, you are sure to not be after the start of the string or after an other hyphen.</p>
</div>
<div class="post-text" itemprop="text">
<p>@CasimiretHippolyte has given a very elegant Regex solution, but I would like to point out that you can do this pretty succinctly with just a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>, <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow"><code>iter</code></a>, and <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow"><code>next</code></a>:</p>
<pre><code>&gt;&gt;&gt; def get_values(text):
...    it = iter(text.split("-"))
...    return [x or "-"+next(it) for x in it]
...
&gt;&gt;&gt; get_values("1.3")
['1.3']
&gt;&gt;&gt; get_values("1.3-2-3.9")
['1.3', '2', '3.9']
&gt;&gt;&gt; get_values("1.3-2--3.9")
['1.3', '2', '-3.9']
&gt;&gt;&gt; get_values("-1.3-2--3.9")
['-1.3', '2', '-3.9']
&gt;&gt;&gt;
</code></pre>
<p>Also, if you use <a href="https://docs.python.org/3/library/timeit.html#timeit.timeit" rel="nofollow"><code>timeit.timeit</code></a>, you will see that this solution is quite a bit faster than using Regex:</p>
<pre><code>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt;
&gt;&gt;&gt; # With Regex
&gt;&gt;&gt; def get_values(text):
...     import re
...     return re.split('(?&lt;=[0-9])-', text)
...
&gt;&gt;&gt; timeit('get_values("-1.3-2--3.9")', 'from __main__ import get_values')
9.999720634885165
&gt;&gt;&gt;
&gt;&gt;&gt; # Without Regex
&gt;&gt;&gt; def get_values(text):
...     it = iter(text.split("-"))
...     return [x or "-"+next(it) for x in it]
...
&gt;&gt;&gt; timeit('get_values("-1.3-2--3.9")', 'from __main__ import get_values')
4.145546989910741
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">I like your <code>get_values</code>, actually. a one-liner that is easy to read and does hide the bad design of the underlying data structure well.</span>
<span class="comment-copy">Actually, I just realized that get_values() breaks when the string starts with a dash. it ends up giving ('', '1.3', '2', '-3.9') for the 4th example. It's a fixable, but it would involve another layer of kludge...</span>
<span class="comment-copy">This works perfectly -- thanks!</span>
<span class="comment-copy">@Tiro: happy for you! But take a look at iCodez solution that is faster.</span>
<span class="comment-copy">For this particular project, speed isn't a major factor (at least, not for this component), but this is good to know. Thanks for the alternate approach!</span>
<span class="comment-copy">Very nice way !</span>
