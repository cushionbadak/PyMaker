<div class="post-text" itemprop="text">
<p>From the Mock docs, I wasn't able to understand how to implement the following type of pattern successfully. <code>fetch_url</code> does not exist inside of a class.</p>
<p>My function in the <code>auth.py</code> file:</p>
<pre><code>def fetch_url(url, method=urlfetch.GET, data=''):
    """Send a HTTP request"""

    result = urlfetch.fetch(url=url, method=method, payload=data,
                            headers={'Access-Control-Allow-Origin': '*'})

    return result.content
</code></pre>
<p>My test:</p>
<pre><code>import unittest
from mock import Mock

class TestUrlFetch(unittest.TestCase):

    def test_fetch_url(self):
        from console.auth import fetch_url

        # Create a mock object based on the fetch_url function
        mock = Mock(spec=fetch_url)

        # Mock the fetch_url function
        content = mock.fetch_url('https://google.com')

        # Test that content is not empty
        self.assertIsNotNone(content)
</code></pre>
<p>If what I'm doing is completely in the wrong direction, please shed some light on the correct solution.</p>
<p>The test is not working, and is producing the following error:</p>
<pre><code>======================================================================
ERROR: test_fetch_url (console.tests.test_auth.TestUrlFetch)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/bengrunfeld/Desktop/Work/code/wf-ghconsole/console/tests/test_auth.py", line 34, in test_fetch_url
    content = mock.fetch_url('https://google.com')
  File "/Users/bengrunfeld/.virtualenvs/env2/lib/python2.7/site-packages/mock.py", line 658, in __getattr__
    raise AttributeError("Mock object has no attribute %r" % name)
AttributeError: Mock object has no attribute 'fetch_url'
-------------------- &gt;&gt; begin captured logging &lt;&lt; --------------------
root: DEBUG: Using threading.local
--------------------- &gt;&gt; end captured logging &lt;&lt; ---------------------

----------------------------------------------------------------------
Ran 1 test in 0.277s

FAILED (errors=1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all, as univerio's comment suggests you should call you mock like this:</p>
<pre><code>mock('https://google.com')
</code></pre>
<p>Your test should pass after that fix, but probably that mock doesn't do what you really want. I've encountered a few problems with <code>spec</code> and <code>autospec</code>.</p>
<ol>
<li><p>Mocks created with <code>Mock(spec=)</code> don't check number of arguments they are called with. I've just looked through the docs and they don't state that, but for some reason I expected it to work. <a href="https://docs.python.org/3/library/unittest.mock.html#autospeccing" rel="nofollow">Autospecced</a> mocks do check the arguments.</p></li>
<li><p>By default both <code>spec</code> and <code>autospec</code> <em>function</em> mocks return mock objects when you call them. This may be not what you want when you mock a function that does not return anything. In this case you can set the <code>return_value</code> manually:</p>
<pre><code>def foo():
    pass

mock_foo = Mock(spec=foo, return_value=None)
mock_foo()
</code></pre></li>
</ol>
</div>
<span class="comment-copy">Does your test work? Why do <i>you think</i> you might be going in the wrong direction?</span>
<span class="comment-copy">Good point! I included the test failure message. Things going wrong: I am not successfully creating a mock of <code>fetch_url</code>. The intended mocked behavior of <code>fetch_url</code> is not being created. <code>fetch_url</code> is not successfully being tested.</span>
<span class="comment-copy"><code>Mock</code> creates a mock object intended to be used in lieu of the spec. So calling <code>mock.fetch_url</code> is incorrect if <code>mock</code> is a mock of <code>fetch_url</code>. You have to either call <code>mock('https://google.com')</code> directly, or have <code>mock</code> be a mock of <code>console.auth</code> instead.</span>
<span class="comment-copy">@univerio, thanks for your answer. That worked. Shame you didn't put it into an answer, cause then I could have ticked it.</span>
