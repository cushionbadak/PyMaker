<div class="post-text" itemprop="text">
<p>For example, there is a built-in function <code>any</code> in Python. The problem is, when the module <code>numpy</code> is imported, the definition of function <code>any</code> is changed. </p>
<p>How can I used the original function <code>any</code> in the <code>__builtin__</code> module?</p>
<p>For example:</p>
<pre><code>from numpy import *
any(i % 3 for i in [3, 3, 4, 4, 3])
</code></pre>
<p>and the code will not work! Sorry I am a newbie in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can still reach the object on the <a href="https://docs.python.org/2/library/__builtin__.html" rel="nofollow"><code>__builtin__</code> module</a>:</p>
<pre><code>import __builtin__
__builtin__.any(i % 3 for i in [3, 3, 4, 4, 3])
</code></pre>
<p>(The module was renamed to <a href="https://docs.python.org/3/library/builtins.html" rel="nofollow"><code>builtins</code> in Python 3</a>; underscores removed, made plural).</p>
<p>You could assing <code>any</code> to a different name <em>before</em> you import all from <code>numpy</code>:</p>
<pre><code>bltin_any = any
from numpy import *

bltin_any(i % 3 for i in [3, 3, 4, 4, 3])
</code></pre>
<p>or <strong>don't use <code>import *</code></strong>. Use <code>import numpy as np</code> perhaps, and use <code>np.any()</code> to use the NumPy version that way.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should try to avoid using from name import *. Because of that problem it is really looked down upon to do that.</p>
<pre><code>import numpy as np
np.any(i % 3 for i in [3, 3, 4, 4, 3])
</code></pre>
<p>This way you know exactly what you are using and where it came from. It is more readable and understandable.</p>
<pre><code>from name import *
</code></pre>
<p>This is really bad, because you have no idea what you are importing. If there are several modules in the package that you don't use it will import them all. You only want what you need to use. Some libraries can get really big which would add a lot of things you don't need.</p>
</div>
<span class="comment-copy">FYI: you can use numpy's <code>any</code> as well: <code>arr = array([3, 3, 4, 4, 3])</code> and then <code>any(arr % 3)</code></span>
<span class="comment-copy">@jonrsharpe: I think the post is short enough; sometimes you do need access to the built-ins this way, and that is still the core of the question.</span>
<span class="comment-copy">It is good to know how to import builtins, but he said he was new to python. It should really be stressed that "import *" is bad.</span>
<span class="comment-copy">@Dzhuang: The global namespace uses a layered lookup. If a name isn't found in your globals, then the built-ins are searched <i>too</i>. If, however, the name <code>any</code> <i>is</i> present in the globals, then the built-in is not used. This is called masking; if you define a name <code>list</code>, then the built-in is no longer found when you use that name. When you import everything from <code>numpy</code>, you create masks. You can either explicitly then import the special module <code>__builtin__</code> to access the built-ins explicitly, or not mask the names you want to use.</span>
<span class="comment-copy">@Dzhuang: Even if you did <code>from __builtin__ import *</code> before any other modules, then bound <code>any</code> to another name, the built-in would still be masked. But with the layered lookup, you can now do <code>del any</code> and using the name once again would find the built-in.</span>
<span class="comment-copy">@Dzhuang: or just <code>import foo</code>. That way you bind only the module object to a global name, and the contents are namespaced; less chance you mask something.</span>
<span class="comment-copy">As I am using the Spyder IDE of python(x,y), where <code>numpy</code>, <code>scipy</code> and some other modules are imported by default in the python console of Spyder. From the answers of yours and Martijn Pieters', I now realize that those modules are perhaps imported in the form of <code>from name import *</code>. Thank you for your answer!</span>
