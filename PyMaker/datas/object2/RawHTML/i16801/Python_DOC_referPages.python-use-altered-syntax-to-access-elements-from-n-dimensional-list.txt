<div class="post-text" itemprop="text">
<p>After asking <a href="https://stackoverflow.com/questions/23754775/how-might-one-change-the-syntax-of-python-list-indexing/">this question</a>, I expanded upon the accepted answer to make it work on 2-dimensional lists:</p>
<pre><code>class List(list):
    def __call__(self, i):
        def call(j):
            return self[i][j]
        return call
</code></pre>
<p>And 3-dimensional lists:</p>
<pre><code>class List(list):
    def __call__(self, i):
        def call2(j):
            def call3(k):
                return self[i][j][k]
            return call3
        return call2
</code></pre>
<p>But how would this class be implemented for n-dimensional lists?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can return the 'callable list' type if the indexed value is itself a <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence"><code>Sequence</code> type</a>:</p>
<pre><code>from collections import Sequence

class List(list):
    def __call__(self, i):
        res = self[i]
        if isinstance(res, Sequence) and not isinstance(res, str):
            res = type(self)(res)
        return res
</code></pre>
<p>This ensures that anything that <em>can</em> be addressed with the <code>[..]</code> indexing syntax can now be addressed with a <code>(..)</code> call syntax as well.</p>
<p>I exempted strings; these are sequences as well but you probably don't want to extend this to those values.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from collections import Sequence
&gt;&gt;&gt; class List(list):
...     def __call__(self, i):
...         res = self[i]
...         if isinstance(res, Sequence) and not isinstance(res, str):
...             res = type(self)(res)
...         return res
... 
&gt;&gt;&gt; a = List([[['foo']]])
&gt;&gt;&gt; a(0)
[['foo']]
&gt;&gt;&gt; a(0)(0)(0)
'foo'
</code></pre>
</div>
<span class="comment-copy">Calls are applied <i>after</i> returning the object from the previous expression. You cannot up front know if the return value is going to be called. You can use store your <code>List(2)</code> result somewhere, and decide to call it later on, or not at all, for example.</span>
<span class="comment-copy">This will convert strings to <code>List</code>s, which may or may not be the intended behaviour.</span>
<span class="comment-copy">@SvenMarnach: Just came to the same conclusion, already updated.</span>
<span class="comment-copy">@SvenMarnach: I was testing the code and discovered that I had forgotten <code>basestring</code> was removed. :-P</span>
<span class="comment-copy">@eryksun: and there's <code>range()</code> as well. It all comes down to a choice as to what you want the call syntax to apply to.</span>
<span class="comment-copy">Now I will always use this method when indexing lists. That way, anyone reading my code will have a <i>very clear</i> understanding of what is happening. And it might make my code more readable to Malbolge programmers: <a href="http://en.wikipedia.org/wiki/Malbolge" rel="nofollow noreferrer">en.wikipedia.org/wiki/Malbolge</a></span>
