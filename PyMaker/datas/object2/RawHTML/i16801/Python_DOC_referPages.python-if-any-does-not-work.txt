<div class="post-text" itemprop="text">
<p>I want to check if any string elements in a list <code>phrases</code> contains certain keywords in a set <code>phd_words</code>. I want to use <code>any</code> but it doesn't work.</p>
<pre><code>In[19]:
    import pandas as pd
    import psycopg2 as pg

    def test():
    phd_words = set(['doctor', 'phd'])
    phrases = ['master of science','mechanical engineering']
    for word in phrases:
        if any(keyword in word for keyword in phd_words):
            return 'bingo!'

test()

Out[20]: 
  bingo!
</code></pre>
<p>How should I fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>That may happen if you use IPython's <code>%pylab</code> magic:</p>
<pre><code>In [1]: %pylab
Using matplotlib backend: Qt4Agg
Populating the interactive namespace from numpy and matplotlib

In [2]: if any('b' in w for w in ['a', 'c']):
   ...:     print('What?')
   ...:
What?
</code></pre>
<p>Here's why:</p>
<pre><code>In [3]: any('b' in w for w in ['a', 'c'])
Out[3]: &lt;generator object &lt;genexpr&gt; at 0x7f6756d1a948&gt;

In [4]: any
Out[4]: &lt;function numpy.core.fromnumeric.any&gt;
</code></pre>
<p><code>any</code> and <code>all</code> get shadowed with <code>numpy</code> functions, and those behave differently than the builtins. This is the reason I stopped using <code>%pylab</code> and started using <code>%pylab --no-import-all</code> so that it doesn't clobber the namespace like that.</p>
<p>To reach the builtin function when it is already shadowed, you can try <code>__builtin__.any</code>. The name <code>__builtin__</code> seems to be available in IPython on both Python 2 and Python 3, which is probably on itself enabled by IPython. In a script, you would first have to <a href="https://docs.python.org/2/library/__builtin__.html"><code>import __builtin__</code></a> on Python 2 and <a href="https://docs.python.org/3/library/builtins.html"><code>import builtins</code></a> on Python 3.</p>
</div>
<span class="comment-copy">What is <code>phrases</code>?</span>
<span class="comment-copy">@devnull: my bad. phrases supposed to be description. I changed the term to make it easier to understand, but forgot to do it throughout.</span>
<span class="comment-copy">What would possess numpy to shadow <code>any</code>?</span>
<span class="comment-copy"><code>*</code> imports are evil.</span>
<span class="comment-copy">@2rs2ts That's what the <code>%pylab</code> magic does: it imports stuff into the interactive namespace and enables interactive plotting. This is handy for exploratory data analysis in an IPython session. And I have to admit that the user is at least warned -- see the message above.</span>
<span class="comment-copy">@LevLevitsky Yeah, I realize this. I just find it a little... risky, even if anyone aware of this could <code>import as</code>.</span>
<span class="comment-copy">@2rs2ts: NumPy isn't shadowing <code>any</code>. It's <code>import *</code> that shadows <code>any</code>. The whole point of namespaces is so you don't have to worry so much about using a name someone else already picked. You can see that the standard library doesn't bother to avoid built-in names; for example, <code>math.pow</code> and <code>codecs.open</code> both hide built-ins if <code>import *</code>ed.</span>
