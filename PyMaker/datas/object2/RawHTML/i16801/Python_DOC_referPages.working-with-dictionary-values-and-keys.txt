<div class="post-text" itemprop="text">
<pre><code>def wordtally():
    test1 = "One day, Jimmy Jimmy Jimmy."
    no_punct = test1.strip(".")
    split = no_punct.split()
    subscript = 0
    D = {}
    split = no_punct.split()
    for n in split:
        if n in D.keys():
            D[n] += 1
        else:
            D[n] = 1
    return max(D.values())
</code></pre>
<p>My code right now returns the largest value, which is three, but I want it to return the key at which that value appears. When I try to use the key function, an error comes up that says it doesn't take any arguments. Is there a way to this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Modify the last line of your function to this:</p>
<pre><code>return max(D.keys(), key=D.get) # or just D instead of D.keys()
</code></pre>
<p>It will return <code>Jimmy</code>.</p>
<p><code>max</code> function will call <a href="https://docs.python.org/3/library/stdtypes.html?highlight=get#dict.get" rel="nofollow"><code>get</code></a> <code>dict</code> method for each key in <code>D</code> in order to get the corresponding value and then return the key for the largest found value.</p>
<hr/>
<p>I hope you're aware of <a href="https://docs.python.org/3/library/collections.html?highlight=collections#collections.Counter" rel="nofollow"><code>collections.Counter</code></a>. It can shorten your function:</p>
<pre><code>from collections import Counter

def wordtally():
    test1 = "One day, Jimmy Jimmy Jimmy."
    no_punct = test1.strip(".")
    return Counter(no_punct.split()).most_common()[0][0]

print(wordtally()) # Jimmy
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe a simple way for your question to get most common element in list:</p>
<pre><code>def find_most_common(inStr,inSeperator):
    alist = inStr.strip(inSeperator).split()
    return max(set(alist), key=alist.count)

print find_most_commmon("One day, Jimmy Jimmy Jimmy.",".")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unless this is an exercise, it'd be easier to use a <code>collections.Counter</code> to do the counting and <code>re.findall</code> to do a basic tokenisation of the words:</p>
<pre><code>from collections import Counter
import re

text = 'One day, Jimmy Jimmy Jimmy.'
words = re.findall('\w+', text)
# ['One', 'day', 'Jimmy', 'Jimmy', 'Jimmy']
word_counts = Counter(words)
# Counter({'Jimmy': 3, 'day': 1, 'One': 1})
most_common, = word_counts.most_common(1)
# ('Jimmy', 3)
print most_common[0]
# Jimmy
</code></pre>
</div>
<span class="comment-copy">You should change your conditional to <code>if n in D:</code> because at the moment you're generating a list of the keys and then check that list which is an <code>O(N)</code> operation. <code>n in D</code> is <code>O(1)</code>.</span>
<span class="comment-copy">Can you explain this?</span>
<span class="comment-copy">@OutlawLemur updated with simplified code and explanation</span>
