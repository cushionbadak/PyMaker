<div class="post-text" itemprop="text">
<p>I want the newline <code>\n</code> to show up explicitly when printing a string retrieved from elsewhere. So if the string is 'abc\ndef' I don't want this to happen:</p>
<pre><code>&gt;&gt;&gt; print(line)
abc
def
</code></pre>
<p>but instead this:</p>
<pre><code>&gt;&gt;&gt; print(line)
abc\ndef
</code></pre>
<p>Is there a way to modify print, or modify the argument, or maybe another function entirely, to accomplish this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Another way that you can stop python using escape characters is to use a raw string like this:</p>
<pre><code>&gt;&gt;&gt; print(r"abc\ndef")
abc\ndef
</code></pre>
<p>or</p>
<pre><code>&gt;&gt;&gt; string = "abc\ndef"
&gt;&gt;&gt; print (repr(string))
&gt;&gt;&gt; 'abc\ndef'
</code></pre>
<p>the only proplem with using <code>repr()</code> is that it puts your string in single quotes, it can be handy if you want to use a quote</p>
</div>
<div class="post-text" itemprop="text">
<p>Just encode it with the <code>'string_escape'</code> codec.</p>
<pre><code>&gt;&gt;&gt; print "foo\nbar".encode('string_escape')
foo\nbar
</code></pre>
<p>In python3, <code>'string_escape'</code> has become <code>unicode_escape</code>.  Additionally, we need to be a little more careful about bytes/unicode so it involves a decoding after the encoding:</p>
<pre><code>&gt;&gt;&gt; print("foo\nbar".encode("unicode_escape").decode("utf-8"))
</code></pre>
<p><a href="https://docs.python.org/3/library/codecs.html#text-encodings" rel="noreferrer">unicode_escape reference</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Simplest method:
<code>str_object.replace("\n", "\\n")</code></p>
<p>The other methods are better if you want to show <em>all</em> escape characters, but if all you care about is newlines, just use a direct replace.</p>
</div>
<span class="comment-copy">Thanks, that's exactly what I was looking for. Chose as answer because you gave two different options.</span>
<span class="comment-copy">That works, thanks a bunch.</span>
<span class="comment-copy">If the string comes from a DOM object, may need to use 'unicode-escape' instead of 'string_escape'</span>
<span class="comment-copy">The equivalent in Python 3 would be something like <code>"foo\nbar".encode('utf8').decode('unicode_escape')</code>.</span>
<span class="comment-copy">Are the semantics of <code>.encode('string_escape')</code> documented anywhere?</span>
<span class="comment-copy">@EvgeniSergeev -- I've added a python3.x compatible answer and a link to the python3 docs.</span>
<span class="comment-copy">I considered that, but ultimately yeah, I want all escape chars.</span>
<span class="comment-copy">This is not working in 2.7. Use <code>str_object.replace(r"\n", r"\\n")</code>.</span>
<span class="comment-copy">No, no, no! There is no difference between Python 2.7 and Python 3. Do as the answer says. <code>replace(r"\n", r"\\n")</code> is useless, it will not touch the newlines.</span>
