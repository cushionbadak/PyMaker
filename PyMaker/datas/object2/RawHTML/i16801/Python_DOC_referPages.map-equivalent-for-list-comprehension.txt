<div class="post-text" itemprop="text">
<pre><code>[foo(item['fieldA'], item['fieldC']) for item in barlist]
</code></pre>
<p>Is there a map equivalent for this?</p>
<p>I mean, something like this:</p>
<pre><code>map(foo, [(item['fieldA'], item['fieldB']) for item in barlist])
</code></pre>
<p>but it doesn't work. 
Just curious.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow"><code>itertools.starmap()</code></a>:</p>
<pre><code>from itertools import starmap

starmap(foo, ((item['fieldA'], item['fieldB']) for item in barlist))
</code></pre>
<p><code>starmap</code> applies each item from the iterable as <em>separate arguments</em> to the callable. The nested generator expression could be replaced with an <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow"><code>operator.itemgetter()</code> object</a> for more mapping goodness:</p>
<pre><code>from itertools import starmap
from operator import itemgetter

starmap(foo, map(itemgetter('fieldA', 'fieldB'), barlist))
</code></pre>
<p>Like all callables in <code>itertools</code>, this produces an iterator, not a list. But if you were using Python 3, so does <code>map()</code>, anyway. If you are using Python 2, it may be an idea to swap out <code>map()</code> for <a href="https://docs.python.org/2/library/itertools.html#itertools.imap" rel="nofollow"><code>itertools.imap()</code></a> here.</p>
</div>
<div class="post-text" itemprop="text">
<p>Nothing beats <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow"><code>itertools.starmap</code></a>, like Martijn explained. But if you like to use only <code>map</code>, then you can simulate what <code>starmap</code> internally does, like this</p>
<pre><code>map(lambda fields: foo(*fields), ((it['fieldA'], it['fieldC']) for it in bars))
</code></pre>
<p>Or you can use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow"><code>operator.itemgetter</code></a>, like this</p>
<pre><code>map(lambda fields: foo(*fields),(itemgetter("fieldA","fieldC") for item in bars))
</code></pre>
<p><code>*fields</code> is nothing but unpacking the values which we received with <code>itemgetter("fieldA","fieldC")</code>. So, the value of <code>fieldA</code> will be the first argument to <code>foo</code> and the value of <code>fieldC</code> will be the second argument to <code>foo</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Something like this.</p>
<pre><code>bar = lambda x: foo(x['fieldA'], x['fieldC'])
map(bar, barlist)
</code></pre>
<p>Still, it is rather inadvisable to use map, not list comprehension.</p>
</div>
<span class="comment-copy">Something missing from my answer that disqualifies it as acceptable? I see you accepted then unaccepted again.</span>
<span class="comment-copy">Sry about it. I just doing more tests before accepting. The confusing part is that starmap generates an iterator, and i have to learn more about that.</span>
<span class="comment-copy">You can call <code>list()</code> on the generator to consume everything into a list object. :-)</span>
<span class="comment-copy">Oh, you are right :) Thx</span>
<span class="comment-copy">That said, excellent answer, +1</span>
