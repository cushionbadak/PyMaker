<div class="post-text" itemprop="text">
<p>I have 2 strings as input (line1 and line 2) and I wish to compare 1 character at a time to identify if they match or if they dont. Is this possible with python? The lines themselves are iterated out from 2 larger files.Incase that will effect options.</p>
<pre><code>Match1=0                
if c ::1 in line2_rev == c ::1 in line1:
     Match1+=1 
</code></pre>
<p>Above is my attempted code, I use c to denote each character as I saw this being used somewhere previously but am unsure if this itself is correct. I use the Match1+=1 so that I can be given a number at the end of how many matched.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to get positions at which matches occurred, use this</p>
<pre><code>line1, line2 = 'first', 'frost'
for k, (x, y) in enumerate(zip(line1, line2)):
    print('Match' if x == y else 'Mismatch', 'on position', k)
</code></pre>
<p>Output:</p>
<pre><code>Match on position 0
Mismatch on position 1
Mismatch on position 2
Match on position 3
Match on position 4
</code></pre>
<p>If you want to know the total number of matches you can use <code>sum</code> and <code>operator.eq</code> (as suggested by @eryksun):</p>
<pre><code>from operator import eq
print(sum(map(eq, line1, line2))) # 3
</code></pre>
</div>
<span class="comment-copy">Simple equality test (<code>==</code>) is not an option?</span>
<span class="comment-copy">No, that is impossible to do in Python.</span>
<span class="comment-copy">Have you attempted so solve the problem yourself? If so what have you tried?</span>
<span class="comment-copy">Yes, it is possible. Welcome to SO! It looks like you want us to write some code for you. While many users are willing to produce code for a coder in distress, they usually only help when the poster has already tried to solve the problem on their own. A good way to demonstrate this effort is to include the code you've written so far, example input (if there is any), the expected output, and the output you actually get (console output, stack traces, compiler errors - whatever is applicable). The more detail you provide, the more answers you are likely to receive. Check the <a href="https://stackoverflow.com/tour">FAQ</a> and <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a></span>
<span class="comment-copy">@thh32 May I recommend you to read the <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">Python tutorial</a>?</span>
<span class="comment-copy">Explanation to follow, I assume?</span>
<span class="comment-copy">@TomFenech I believe it's simple enough</span>
<span class="comment-copy">@eryksun thanks. Updated.</span>
