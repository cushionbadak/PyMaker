<div class="post-text" itemprop="text">
<p>Let's say, for example, that we have the following data that I want to insert
to a priority queue:
(0, 3, 5)
(1, 2, 7)
and I want to sort my priority queue by the second argument and then by the third.</p>
<p>How can I do that? beacuse, by default, priority queue sorts its elements by the first 
argument.</p>
<p>Thanks for the help.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://hg.python.org/cpython/file/3.4/Lib/queue.py" rel="nofollow">implementation of <code>Queue.PriorityQueue</code></a> relies on <a href="https://docs.python.org/3/library/heapq.html#heapq.heappush" rel="nofollow"><code>heappush()</code></a>, which doesn't provide a way to handle custom sorting.</p>
<p>You could subclass <code>PriorityQueue</code> and use a little hack to make this work without breaking functionnality:</p>
<pre><code>from queue import PriorityQueue

class CustomPriorityQueue(PriorityQueue):
    def _put(self, item):
        return super()._put((self._get_priority(item), item))

    def _get(self):
        return super()._get()[1]


    def _get_priority(self, item):
        return item[1]
</code></pre>
<p>Test run:</p>
<pre><code>&gt;&gt;&gt; q = CustomPriorityQueue(100)
&gt;&gt;&gt; q.put((2, 3, 5))
&gt;&gt;&gt; q.put((2, 5, 5))
&gt;&gt;&gt; q.put((2, 1, 5))
&gt;&gt;&gt; q.put((2, 2, 5))
&gt;&gt;&gt; q.get()
(2, 1, 5)
&gt;&gt;&gt; q.get()
(2, 2, 5)
&gt;&gt;&gt; q.get()
(2, 3, 5)
&gt;&gt;&gt; q.get()
(2, 5, 5)
</code></pre>
<p>(Please note that this is python3 code)</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/2/library/queue.html" rel="nofollow">documentation</a> it appears that priority queue does not support custom ordering. 
A basic work around would be to create a wrapper object around your tuples and set the custom ordering in there</p>
<pre><code>class Wrapper(object):
    def __init__(self, source):
        self.source = source

    def __cmp__(self, other):
        if self[1] == other[1]:
            return cmp(self.source, other.source)
        else:
            return cmp(self[1], other[1])

    def __getitem__(self, index):
        return self.source[index]

    def __len__(self):
        return len(self.source)

    def __repr__(self):
        return self.source.__repr__()
</code></pre>
<p>This is merely an example, and you should take care of edge cases where the other object is a tuple, a list, an empty tuple and a tuple with one element.</p>
</div>
<div class="post-text" itemprop="text">
<p>from the <a href="https://github.com/python/cpython/blob/2.7/Lib/Queue.py" rel="nofollow noreferrer">documentation for Queue.py</a></p>
<p>There actually a PriorityQueue that automatically sort the elements in queue, but usually the elements are tuple structure (priority number, data) </p>
<p>I wrote some sample code here, it Q._pop() the tuple with smallest priority number:</p>
<pre><code>import Queue

q = Queue.PriorityQueue()

print type(q)
print(q.queue)
q._put((4,'f'))
q._put((1,'c'))
q._put((5, 'a'))
q._put((10, 'b'))
q._put((6, 'd'))
print(q.queue)
q._get()
print(q.queue)
q._put((2,'f'))
print(q.queue)
</code></pre>
<p>The output is:</p>
<pre><code>&lt;type 'instance'&gt;
[]
[(1, 'c'), (4, 'f'), (5, 'a'), (10, 'b'), (6, 'd')]
[(4, 'f'), (6, 'd'), (5, 'a'), (10, 'b')]
[(2, 'f'), (4, 'f'), (5, 'a'), (10, 'b'), (6, 'd')]
</code></pre>
<p>One thing I notice is that for the first time we print the q.queue, before we do any _get(), it doesn't show ordered queue, but once we call _get(), it always gives ordered queue. </p>
</div>
<span class="comment-copy">You will have to create your own <code>PriorityQueue</code> equivalent with the sorting logic you describe.</span>
<span class="comment-copy">Why? I have Priority Queue library built in</span>
<span class="comment-copy">@user3652239 according to <a href="https://docs.python.org/2/library/queue.html" rel="nofollow noreferrer">documentation</a> built-in PriorityQuere does not support custom ordering</span>
<span class="comment-copy">Because <code>PriorityQueue</code>, as you point out, sorts by the first argument, and <a href="https://docs.python.org/2/library/queue.html" rel="nofollow noreferrer">the docs</a> indicate no way to change that.</span>
<span class="comment-copy">thank you very much.</span>
