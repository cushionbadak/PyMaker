<div class="post-text" itemprop="text">
<p>In Python, there are dictionaries:</p>
<pre><code>residents = {'Puffin' : 104, 'Sloth' : 105, 'Burmese Python' : 106}
</code></pre>
<p>In Ruby, there are Hashes:</p>
<pre><code>residents = {'Puffin' =&gt; 104, 'Sloth' =&gt; 105, 'Burmese Python' =&gt; 106}
</code></pre>
<p>The only difference is the <code>:</code> versus <code>=&gt;</code> syntax. (Note that if the example were using variables instead of strings, then there would be no syntax difference.)</p>
<p>In Python, you call a dictionary's value via a key:</p>
<pre><code>residents['Puffin']
# =&gt; 104
</code></pre>
<p>In Ruby, you grab a Hash's value via a key as well:</p>
<pre><code>residents['Puffin']
# =&gt; 104
</code></pre>
<p>They appear to be the same.</p>
<p>What is the difference between a Hash in Ruby and a dictionary in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Both <a href="http://www.ruby-doc.org/core-2.1.0/Hash.html" rel="nofollow noreferrer">Ruby's Hash</a> and <a href="https://docs.python.org/3/library/stdtypes.html#typesmapping" rel="nofollow noreferrer">Python's dictionary</a> represent a <a href="http://en.wikipedia.org/wiki/Associative_array" rel="nofollow noreferrer">Map Abstract Data Type (ADT)</a></p>
<blockquote>
<p>.. an associative array, map, symbol table, or dictionary is an abstract data type composed of <em>a collection of (key, value) pairs, such that each possible key appears at most once in the collection</em>.</p>
</blockquote>
<p>Furthermore, both Hash and dictionary are implemented as <a href="http://en.wikipedia.org/wiki/Hash_table" rel="nofollow noreferrer">Hash Tables</a> which require that keys are hashable and equatable. Generally speaking, insert and delete and fetch operations on a hash table are O(1) amortized or "fast, independent of hash/dict size".</p>
<blockquote>
<p>[A hash table] is a data structure used to implement an associative array, a structure that can map keys to values. <em>A hash table uses a hash function to compute an index into an array of buckets or slots, from which the correct value can be found</em>.</p>
</blockquote>
<p>(Map implementations that use Trees, as opposed to Hash Tables, are found in persisted and functional programming contexts.)</p>
<p>Of course, there are also differences between Ruby and Python design choices and the specific/default Map implementations provided:</p>
<ul>
<li>Default behavior on missing key lookup: <code>nil</code> in <code>Hash</code>, exception in <code>dict</code><sup>1</sup></li>
<li>Insertion-ordering guarantees: guaranteed in <code>Hash</code> (since Ruby 2.0), no guarantee in <code>dict</code> (until Python 3.6)<sup>1</sup> </li>
<li>Being able to specify a default value generator: <code>Hash</code> only<sup>1</sup></li>
<li>Ability to use core mutable types (eg. lists) as keys: <code>Hash</code> only<sup>2</sup></li>
<li>Syntax used for Hash/dict Literals, etc..</li>
</ul>
<p>The <code>[]</code> syntax support is common insofar as both languages provide syntactic sugar for an overloaded index operator, but is implemented differently underneath and has different semantics in the case of missing keys.</p>
<hr/>
<p><sup>1</sup> Python offers <code>defaultdict</code> and <code>OrderedDict</code> implementations as well which have different behavior/functionality from the standard <code>dict</code>. These implementation allow default value generators, missing-key handling, and additional ordering guarantees that are not found in the standard <code>dict</code> type.</p>
<p><sup>2</sup> Certain core types in Python (eg. <code>list</code> and <code>dict</code>) explicitly reject being hashable and thus they cannot be used as keys in a dictionary that is based on hashing. This is not strictly a difference of <code>dict</code> itself and one can still use mutable custom types as keys, although such is discouraged in most cases.</p>
</div>
<div class="post-text" itemprop="text">
<p>They (dictionary in Python, hash in Ruby) are identical for all practical purposes, and implement a general <code>Dictionary / Hashtable</code> (a key - value store) where you typically store an entry given a unique key, and get <strong>fast</strong> lookup for it's value.</p>
</div>
<div class="post-text" itemprop="text">
<p>Now ruby also supports following sysntax:</p>
<pre><code>residents = {'Puffin': 104, 'Sloth': 105, 'Burmese Python': 106}
</code></pre>
<p>But then we should access values by the symbol notation:</p>
<pre><code>residents[:Puffin]
</code></pre>
</div>
<span class="comment-copy">Might want to edit your title to read hash vs dictionary instead of list vs dictionary</span>
<span class="comment-copy">well, there you go...haha</span>
<span class="comment-copy">Merci!.. Lol...</span>
<span class="comment-copy">Same thing.  In <code>java</code> it's a <code>HashMap</code>.  In general this family of collections is just anything that is backed by a hash table.</span>
<span class="comment-copy">In Ruby, wouldn't it be <code>residents = {'Puffin'=&gt;104, 'Sloth'=&gt;105, 'Burmese Python'=&gt;106}</code>? i.e., a <code>=&gt;</code> vs <code>:</code> separating the key and value?</span>
