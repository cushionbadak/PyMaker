<div class="post-text" itemprop="text">
<p>I have to implement for each class which command devices an operation and simulation mode. So in each method of all class I have to add a if statement like this:</p>
<pre><code>if self.mode == "operation":
    #some stuff
elif self.mode == "simulated":
    #almost nothing
</code></pre>
<p>I am wondering wether is want to write it as generic as possible to make a procedure which does this thing.</p>
<p>Here I could for example create 2 classes DeviceOperation and DeviceSimulated inheriting or maybe it's useless composing Device and switching class following Device.mode.</p>
<p>I don't really know if it is relevant.</p>
<p>If you any comment or a better way to do it.</p>
</div>
<div class="post-text" itemprop="text">
<p>well, it's really hard to give advices on a design with close to no context. But it looks like what you want is to take advantage of polymorphism:</p>
<pre><code>class BaseDevice:
    def start(self):
        raise NotImplementedError
    def stop(self):
        raise NotImplementedError
    def pause(self):
        raise NotImplementedError
    def resume(self):
        raise NotImplementedError

class RealDevice(BaseDevice):
    def start(self):
        self.device.do_start()
    def stop(self):
        self.device.do_stop()
    def pause(self):
        self.device.do_pause()
    def resume(self):
        self.device.do_resume()

class SimuDevice(BaseDevice):
    def start(self):
        self._state = "running"
        print("started")
    def stop(self):
        self._state = "stopped"
        print("stopped")
    def pause(self):
        self._state = "paused"
        print("paused")
    def resume(self):
        self._state = "running"
        print("resumed")
</code></pre>
<p>here I am assuming that there's a <code>device</code> member declared in "realdevice" that has a pretty simple API that matches the <code>RealDevice</code> API, though in real life that rarely happens. SimuDevice, though is basically a state machine that keeps a state and printouts what's happening. Then to make it a better simulator, you need to make it behave like the real device, by maybe adding delays, and giving back data.</p>
<p>You can do the same thing using duck typing:</p>
<pre><code>class RealDevice():
    def start(self):
        self.device.do_start()
    def stop(self):
        self.device.do_stop()
    def pause(self):
        self.device.do_pause()
    def resume(self):
        self.device.do_resume()

class SimuDevice():
    def start(self):
        self._state = "running"
        print("started")
    def stop(self):
        self._state = "stopped"
        print("stopped")
    def pause(self):
        self._state = "paused"
        print("paused")
    def resume(self):
        self._state = "running"
        print("resumed")
</code></pre>
<p>which is basically the same thing except that RealDevice and SimuDevice do not inherit from a base class. The advantage of polymorphism over duck typing is that you can implement a partial API to your class, and have the left over methods fail loudly. You can also have common methods between the two classes defined in the mother class. Basically, if you're doing duck typing, and you need to copy the same code in the two classes, it's better to use polymorphism.</p>
<p>Then the advantage of using duck typing or polymorphism over simple conditions within a single class are numerous. It makes the code simpler to read, by having one behavior attached to a class, and not two behaviors mixed in a single class.. And it also helps to have both classes with separated documentation. It makes maintenance easier, because when there's a bug affecting one class, the fix will not affect the other... </p>
<p>Then, if the simulated device is being used for testing, you may want to have a look at the <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow">mock</a> module that helps building objects for simulating behavior.</p>
</div>
<span class="comment-copy">By procedure, do you mean function? Yes, you can make a function that executes that code.</span>
<span class="comment-copy">@Kevin: updated. I hope it's clear enough</span>
<span class="comment-copy">What is your question?</span>
<span class="comment-copy">@2rs2ts: Sorry I am updating my question</span>
<span class="comment-copy">This question might be posted on: <a href="http://codereview.stackexchange.com/">codereview.stackexchange.com</a></span>
<span class="comment-copy">Ty for answer. Actually I did a lot of stuff on my code I can not show you. I added a FSM also into device class. Actually each device inherit Device class. And I defined a common State Diagram like 'SimuDevice' into Device.</span>
<span class="comment-copy">Then you can refactor! By derivating a <code>SimuDevice</code> from <code>Device</code>, taking advantage to the state diagram, by only handling the simulation input/output shouldn't be that hard!</span>
