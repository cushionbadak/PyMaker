<div class="post-text" itemprop="text">
<p>Ok,</p>
<p>If I have a string, say <code>x = 'Hello World!'</code>, how can I parse python strings from that?
I know that I can use regex like <code>"[^"]*"</code>, but how I can parse <strong>all</strong> valid python strings? Solution doesn't have to be regex, but if that is possible, it's great.</p>
<p>For example:</p>
<ul>
<li><code>x = 'Hello World!'</code> =&gt; <code>Hello World!</code></li>
<li><code>x = '\'Stack Overflow\''</code> =&gt; <code>\'Stack Overflow\'</code></li>
<li><code>x = 'x=\"x=\'Python\n\'\"'</code> =&gt; <code>x=\"x=\'Python\n\'\"</code></li>
</ul>
<p>Sorry, if I cannot explain it clearly, but this is not easy as non-native speaker.</p>
</div>
<div class="post-text" itemprop="text">
<p>well, the simplest way would be to use <code>ast.literal_eval()</code>:</p>
<pre><code>&gt;&gt;&gt; literal_eval(r"'Hello World!'")
'Hello World!'
&gt;&gt;&gt; literal_eval(r"'\'Stack Overflow\''")
"'Stack Overflow'"
&gt;&gt;&gt; literal_eval(r"""'x=\"x=\'Python\n\'\"'""")
'x="x=\'Python\n\'"'
</code></pre>
<p>but if you want to extract python strings from a string containing one ore several full python statements, you can do:</p>
<pre><code>def get_string(s):
    for it in ast.walk(ast.parse(s)):
        if isinstance(it, ast.Str):
            yield it.s
</code></pre>
<p>here is the results:</p>
<pre><code>&gt;&gt;&gt; for i in get_string(r"'Hello World!'"): print i
... 
Hello World!
</code></pre>
<p>for the following match, to get the result you're expecting, you need to have your string setup as a raw string:</p>
<pre><code>&gt;&gt;&gt; for i in get_string("x = '\'Stack Overflow\''"): print i
... 
'Stack Overflow'
&gt;&gt;&gt; for i in get_string(r"x = '\'Stack Overflow\''"): print i
... 
\'Stack Overflow\'
</code></pre>
<p>for the last match, to get the result you're expecting you need to have the <em>inner</em> string setup as a raw string:</p>
<pre><code>&gt;&gt;&gt; for i in get_string(r"""x = 'x=\"x=\'Python\n\'\"'"""): print i
... 
x="x='Python
'"
&gt;&gt;&gt; for i in get_string(r"""x = r'x=\"x=\'Python\n\'\"'"""): print i
... 
x=\"x=\'Python\n\'\"
</code></pre>
<p>In the end, even though a <a href="https://stackoverflow.com/a/23654544/1290438">non-regular regex</a> can do the job, it'll always be a better option to actually use the parser that is used to parse python to parse python strings, because you'll be using the same tool being used to create and parse python strings!</p>
</div>
<span class="comment-copy">Define a 'python string'.</span>
<span class="comment-copy">Question unclear - your examples look like you want to strip the surrounding quotes out? Which aren't actually part of the string data itself, they define a string literal.</span>
<span class="comment-copy">presumably a "python string" is any character sequence matching the <code>stringliteral</code> rule described <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy"><a href="https://docs.python.org/2/reference/lexical_analysis.html#strings" rel="nofollow noreferrer">docs.python.org/2/reference/lexical_analysis.html#strings</a></span>
<span class="comment-copy">Shouldn't the second one return <code>\'Stack Overflow\'</code>? You want to apply your regex to the literal text <code>x = 'Hello World!'</code>, right, not to <code>Hello World!</code>?</span>
<span class="comment-copy">It raises/throws an AttributeError: 'str' object has no attribute '_fields' (<a href="http://pastebin.com/4CKGE1g0" rel="nofollow noreferrer">pastebin.com/4CKGE1g0</a>)</span>
<span class="comment-copy">sorry, I forgot the <code>ast.parse(s)</code> in the <code>get_string()</code> function. My bad. Corrected in the answer!</span>
<span class="comment-copy">Thanks, that works perfectly. Accepted.</span>
