<div class="post-text" itemprop="text">
<p>I came across the Python <code>with</code> statement for the first time today.  I've been using Python lightly for several months and didn't even know of its existence!  Given its somewhat obscure status, I thought it would be worth asking:</p>
<ol>
<li>What is the Python <code>with</code> statement
designed to be used for?   </li>
<li>What do
you use it for? </li>
<li>Are there any
gotchas I need to be aware of, or
common anti-patterns associated with
its use?  Any cases where it is better use <code>try..finally</code> than <code>with</code>?</li>
<li>Why isn't it used more widely?</li>
<li>Which standard library classes are compatible with it?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>I believe this has already been answered by other users before me, so I only add it for the sake of completeness: the <code>with</code> statement simplifies exception handling by encapsulating common preparation and cleanup tasks in so-called <a href="http://docs.python.org/release/2.5.2/lib/typecontextmanager.html" rel="noreferrer">context managers</a>. More details can be found in <a href="http://www.python.org/dev/peps/pep-0343/" rel="noreferrer">PEP 343</a>. For instance, the <code>open</code> statement is a context manager in itself, which lets you open a file, keep it open as long as the execution is in the context of the <code>with</code> statement where you used it, and close it as soon as you leave the context, no matter whether you have left it because of an exception or during regular control flow. The <code>with</code> statement can thus be used in ways similar to the <a href="http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization" rel="noreferrer">RAII pattern</a> in C++: some resource is acquired by the <code>with</code> statement and released when you leave the <code>with</code> context.</p></li>
<li><p>Some examples are: opening files using <code>with open(filename) as fp:</code>, acquiring locks using <code>with lock:</code> (where <code>lock</code> is an instance of <code>threading.Lock</code>). You can also construct your own context managers using the <code>contextmanager</code> decorator from <code>contextlib</code>. For instance, I often use this when I have to change the current directory temporarily and then return to where I was:</p>
<pre><code>from contextlib import contextmanager
import os

@contextmanager
def working_directory(path):
    current_dir = os.getcwd()
    os.chdir(path)
    try:
        yield
    finally:
        os.chdir(current_dir)

with working_directory("data/stuff"):
    # do something within data/stuff
# here I am back again in the original working directory
</code></pre>
<p>Here's another example that temporarily redirects <code>sys.stdin</code>, <code>sys.stdout</code> and <code>sys.stderr</code> to some other file handle and restores them later:</p>
<pre><code>from contextlib import contextmanager
import sys

@contextmanager
def redirected(**kwds):
    stream_names = ["stdin", "stdout", "stderr"]
    old_streams = {}
    try:
        for sname in stream_names:
            stream = kwds.get(sname, None)
            if stream is not None and stream != getattr(sys, sname):
                old_streams[sname] = getattr(sys, sname)
                setattr(sys, sname, stream)
        yield
    finally:
        for sname, stream in old_streams.iteritems():
            setattr(sys, sname, stream)

with redirected(stdout=open("/tmp/log.txt", "w")):
     # these print statements will go to /tmp/log.txt
     print "Test entry 1"
     print "Test entry 2"
# back to the normal stdout
print "Back to normal stdout again"
</code></pre>
<p>And finally, another example that creates a temporary folder and cleans it up when leaving the context:</p>
<pre><code>from tempfile import mkdtemp
from shutil import rmtree

@contextmanager
def temporary_dir(*args, **kwds):
    name = mkdtemp(*args, **kwds)
    try:
        yield name
    finally:
        shutil.rmtree(name)

with temporary_dir() as dirname:
    # do whatever you want
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest two interesting lectures:  </p>
<ul>
<li><a href="http://www.python.org/dev/peps/pep-0343/" rel="noreferrer">PEP 343</a> The "with" Statement  </li>
<li><a href="http://effbot.org/zone/python-with-statement.htm" rel="noreferrer">Effbot</a> Understanding Python's
"with" statement</li>
</ul>
<p><strong>1.</strong>
The <code>with</code> statement is used to wrap the execution of a block with methods defined by a context manager. This allows common <code>try...except...finally</code> usage patterns to be encapsulated for convenient reuse.</p>
<p><strong>2.</strong>
You could do something like:</p>
<pre><code>with open("foo.txt") as foo_file:
    data = foo_file.read()
</code></pre>
<p>OR</p>
<pre><code>from contextlib import nested
with nested(A(), B(), C()) as (X, Y, Z):
   do_something()
</code></pre>
<p>OR (Python 3.1)</p>
<pre><code>with open('data') as input_file, open('result', 'w') as output_file:
   for line in input_file:
     output_file.write(parse(line))
</code></pre>
<p>OR</p>
<pre><code>lock = threading.Lock()
with lock:
    # Critical section of code
</code></pre>
<p><strong>3.</strong>
 I don't see any Antipattern here.<br/>
Quoting <a href="http://diveintopython3.org/" rel="noreferrer">Dive into Python</a>: </p>
<blockquote>
<p><strong>try..finally is good. with is better.</strong></p>
</blockquote>
<p><strong>4.</strong>
I guess it's related to programmers's habit to use <code>try..catch..finally</code> statement from other languages.</p>
</div>
<div class="post-text" itemprop="text">
<p>The Python <code>with</code> statement is built-in language support of the <a href="http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization" rel="nofollow noreferrer"><code>Resource Acquisition Is Initialization</code></a> idiom commonly used in C++. It is intended to allow safe acquisition and release of operating system resources.</p>
<p>The <code>with</code> statement creates resources within a scope/block. You write your code using the resources within the block. When the block exits the resources are cleanly released regardless of the outcome of the code in the block (that is whether the block exits normally or because of an exception).</p>
<p>Many resources in the Python library that obey the protocol required by the <code>with</code> statement and so can used with it out-of-the-box. However anyone can make resources that can be used in a with statement by implementing the well documented protocol: <a href="http://www.python.org/dev/peps/pep-0343/" rel="nofollow noreferrer">PEP 0343</a></p>
<p>Use it whenever you acquire resources in your application that must be explicitly relinquished such as files, network connections, locks and the like.</p>
</div>
<div class="post-text" itemprop="text">
<p>An example of an antipattern might be to use the <code>with</code> inside a loop when it would be more efficient to have the <code>with</code> outside the loop</p>
<p>for example</p>
<pre><code>for row in lines:
    with open("outfile","a") as f:
        f.write(row)
</code></pre>
<p>vs</p>
<pre><code>with open("outfile","a") as f:
    for row in lines:
        f.write(row)
</code></pre>
<p>The first way is opening and closing the file for each <code>row</code> which may cause performance problems compared to the second way with opens and closes the file just once.</p>
</div>
<div class="post-text" itemprop="text">
<p>Again for completeness I'll add my most useful use-case for <code>with</code> statements.</p>
<p>I do a lot of scientific computing and for some activities I need the <code>Decimal</code> library for arbitrary precision calculations.  Some part of my code I need high precision and for most other parts I need less precision.</p>
<p>I set my default precision to a low number and then use <code>with</code> to get a more precise answer for some sections:</p>
<pre><code>from decimal import localcontext

with localcontext() as ctx:
    ctx.prec = 42   # Perform a high precision calculation
    s = calculate_something()
s = +s  # Round the final result back to the default precision
</code></pre>
<p>I use this a lot with the Hypergeometric Test which requires the division of large numbers resulting form factorials.  When you do genomic scale calculations you have to be careful of round-off and overflow errors.</p>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="http://www.python.org/dev/peps/pep-0343/" rel="noreferrer">PEP 343 - The 'with' statement</a>, there is an example section at the end.</p>
<blockquote>
<p>... new statement "with" to the Python
  language to make
      it possible to factor out standard uses of try/finally statements.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>points 1, 2, and 3 being reasonably well covered:</p>
<p><strong>4:</strong> it is relatively new, only available in python2.6+ (or python2.5 using <code>from __future__ import with_statement</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>The with statement works with so-called context managers:</p>
<p><a href="http://docs.python.org/release/2.5.2/lib/typecontextmanager.html" rel="nofollow noreferrer">http://docs.python.org/release/2.5.2/lib/typecontextmanager.html</a></p>
<p>The idea is to simplify exception handling by doing the necessary cleanup after leaving the 'with' block. Some of the python built-ins already work as context managers.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another example for out-of-the-box support, and one that might be a bit baffling at first when you are used to the way built-in <code>open()</code> behaves, are <code>connection</code> objects of popular database modules such as:</p>
<ul>
<li><a href="https://docs.python.org/2/library/sqlite3.html#using-the-connection-as-a-context-manager" rel="nofollow noreferrer">sqlite3</a></li>
<li><a href="http://initd.org/psycopg/docs/usage.html#with-statement" rel="nofollow noreferrer">psycopg2</a></li>
<li><a href="http://cx-oracle.readthedocs.io/en/latest/connection.html" rel="nofollow noreferrer">cx_oracle</a></li>
</ul>
<p>The <code>connection</code> objects are context managers and as such can be used out-of-the-box in a <code>with-statement</code>, however when using the above note that:</p>
<blockquote>
<p>When the <code>with-block</code> is finished, either with an exception or without, <strong>the connection is not closed</strong>. In case the <code>with-block</code> finishes with an exception, the transaction is rolled back, otherwise the transaction is commited.</p>
</blockquote>
<p>This means that the programmer has to take care to close the connection themselves, but allows to acquire a connection, and use it in multiple <code>with-statements</code>, as shown in the <a href="http://initd.org/psycopg/docs/usage.html#with-statement" rel="nofollow noreferrer">psycopg2 docs</a>:</p>
<pre><code>conn = psycopg2.connect(DSN)

with conn:
    with conn.cursor() as curs:
        curs.execute(SQL1)

with conn:
    with conn.cursor() as curs:
        curs.execute(SQL2)

conn.close()
</code></pre>
<p>In the example above, you'll note that the <code>cursor</code> objects of <code>psycopg2</code> also are context managers. From the relevant documentation on the behavior:</p>
<blockquote>
<p>When a <code>cursor</code> exits the <code>with-block</code> it is closed, releasing any resource eventually associated with it. The state of the transaction is not affected.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>In python generally “<strong>with</strong>” statement is used to open a file, process the data present in the file, and also to close the file without calling a close() method. “with” statement makes the exception handling simpler by providing cleanup activities.</p>
<p>General form of with:</p>
<pre><code>with open(“file name”, “mode”) as file-var:
    processing statements
</code></pre>
<p><strong>note:</strong> no need to close the file by calling close() upon file-var.close()</p>
</div>
<span class="comment-copy">Just for the record, <a href="https://docs.python.org/3/reference/compound_stmts.html#with" rel="nofollow noreferrer">here is <code>with</code></a> in Python 3 documentation.</span>
<span class="comment-copy">Thanks for adding the comparison to RAII.  As a C++ programmer that told me everything I needed to know.</span>
<span class="comment-copy">Okay so let me get this clear. You're saying that the <code>with</code> statement is designed to fill a variable with data until the instructions under it are complete, and then free the variable?</span>
<span class="comment-copy">Because I used it to open a py script. <code>with open('myScript.py', 'r') as f: pass</code>. I expected to be able to call the variable <code>f</code> to see the text content of the document, as this is what would appear if the document were assigned to <code>f</code> via a regular <code>open</code> statement: <code>f = open('myScript.py').read()</code>. But instead I got the following: <code>&lt;_io.TextIOWrapper name='myScript.py' mode='r' encoding='cp1252'&gt;</code>. What does it mean?</span>
<span class="comment-copy">@Musixauce3000 - using <code>with</code> doesn't remove the need to <code>read</code> the actual file.  The <code>with</code> calls <code>open</code> - it doesn't know what you need to do with it - you might want to do a seek for instance.</span>
<span class="comment-copy">It really comes into its own when you're dealing with threading synchronisation objects. Relatively rare in Python, but when you need them, you really need <code>with</code>.</span>
<span class="comment-copy">diveintopython.org is down (permanently?). Mirrored at <a href="http://www.diveintopython.net/" rel="nofollow noreferrer">diveintopython.net</a></span>
<span class="comment-copy">Example of a good answer, open file is a prime example that shows behind the scenes of opening,io,closing the file operations are hidden cleanly with a custom reference name</span>
<span class="comment-copy"><a href="http://diveintopython3.org/" rel="nofollow noreferrer">diveintopython3.org</a> is a broken link.</span>
