<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/20129996/why-does-boolxml-etree-elementtree-element-evaluate-to-false">Why does bool(xml.etree.ElementTree.Element) evaluate to False?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>Is it safe to check whether a variable <code>myvar</code> has not-None value by simply:</p>
<pre><code>if myvar:
    print('Not None detected')
</code></pre>
<p>I'm asking this because I have a variable and was checking whether the variable was not <code>None</code> by simply <code>if variable:</code> but the check has been failing. The variable contains some data but it was evaluating to False in the <code>if</code> check.</p>
<p><strong>Full Code:</strong></p>
<pre><code>from xml.etree import ElementTree as ElementTree

root = ElementTree.fromstring('Some xml string')

parameters = root.find('Some Tag')

udh = parameters.find('UDH')

if udh and udh.text:  # In this line the check is failing, though the udh variable has value: &lt;Element 'UDH' at 0x7ff614337208&gt;
    udh = udh.text
    # Other code
else:
    print('No UDH!')  # Getting this output
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python the boolean (truth) value of the object is not necessarily equal to being <code>None</code> or not. The correctness of that assumption depends on whether your object has the correct methods defined appropriately. As for Python 2.7:</p>
<blockquote>
<p><code>object.</code><strong><code>__nonzero__</code></strong><code>(self)</code></p>
<p>Called to implement truth value testing and the built-in operation <code>bool()</code>; should return <code>False</code> or <code>True</code>, or their integer equivalents <code>0</code> or <code>1</code>. When this method is not defined, <code>__len__()</code> is called, if it is defined, and the object is considered true if its result is nonzero. If a class defines neither <code>__len__()</code> nor <code>__nonzero__()</code>, all its instances are considered true.</p>
</blockquote>
<p>Also have a look at the PEP 8, that provides guidance for this issue (emphasis mine):</p>
<blockquote>
<p>Comparisons to singletons like <code>None</code> should always be done with <code>is</code> or <code>is not</code>, never the equality operators.</p>
<p>Also, beware of writing <code>if x</code> when you really mean <code>if x is not None</code> -- e.g. when testing whether a variable or argument that defaults to <code>None</code> was set to some other value. <strong>The other value might have a type (such as a container) that could be false in a boolean context!</strong></p>
</blockquote>
<p>Therefore, to safely test whether you've got <code>None</code> or <code>not None</code> you should use specifically:</p>
<pre><code>if myvar is None: 
    pass
elif myvar is not None:
    pass
</code></pre>
<p>In the case of the <code>xml.etree.ElementTree.Element</code> the semantics of the boolean evaluation differ from the <code>None</code>-ness of the object:</p>
<ul>
<li><a href="https://stackoverflow.com/q/20129996/1025391">Why does bool(xml.etree.ElementTree.Element) evaluate to False?</a></li>
</ul>
<p>For reference:</p>
<ul>
<li><a href="https://docs.python.org/2/reference/datamodel.html#object.__nonzero__" rel="nofollow noreferrer">https://docs.python.org/2/reference/datamodel.html#object.<strong>nonzero</strong></a></li>
<li><a href="http://legacy.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">http://legacy.python.org/dev/peps/pep-0008/#programming-recommendations</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The <code>ElementTree</code> behaviour for nodes without children is a notorious departure from standard Python practice. In general, it'd be safe to just use the variable in your if condition and assume that the boolean value is sensible. In this case, as you've experienced first hand, you'll have to do a more explicit check. </p>
</div>
<div class="post-text" itemprop="text">
<p>For your case, it is safe since <a href="https://docs.python.org/release/2.7/library/xml.etree.elementtree.html#the-element-interface" rel="nofollow">ElementTree returns <code>False</code> to the <code>__nonzero__</code> test</a> <strong>to check if the element has been found or not</strong>. </p>
<p>However, as the doc says, it is better to check explicitly, with <code>is None</code> if you want to check only if the element hasn't been found:</p>
<blockquote>
<p>Caution: Because Element objects do not define a <strong>nonzero</strong>() method, elements with no subelements will test as False.</p>
<pre><code>element = root.find('foo')

if not element: # careful!
    print "element not found, or element has no subelements"

if element is None:
    print "element not found"
</code></pre>
</blockquote>
<p>For reminder, <a href="https://docs.python.org/2/reference/datamodel.html#object.__nonzero__" rel="nofollow"><code>object.__nonzero__</code></a> is used in value testing and in the <code>bool()</code> operation.</p>
</div>
<span class="comment-copy">This is actually wrong. <code>if myvar:</code> assuming <code>myvar</code> is <code>None</code> will actually not evaluate to <code>True</code> and therefore your sample won't work. It is however best practice to use the form: <code>if myvar is not None:</code> or <code>if myvar is None:</code></span>
<span class="comment-copy">Was answered here: <a href="http://stackoverflow.com/questions/3965104/not-none-test-in-python" title="not none test in python">stackoverflow.com/questions/3965104/not-none-test-in-python</a></span>
<span class="comment-copy">Isn't your check failing because there's no text in udh? It could be an empty XML node.</span>
<span class="comment-copy">@Midnighter I'm sure I've text in my udh node.</span>
<span class="comment-copy">@Midnighter but it does not have any child node. Could that be a possibility for being evaluated as False?</span>
<span class="comment-copy"><a href="http://legacy.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">pep 8</a> has a word on this too: <i>Also, beware of writing <code>if x</code> when you really mean <code>if x is not None</code></i></span>
<span class="comment-copy">@JonasWielicki thanks for that reference!</span>
<span class="comment-copy">Thanks a lot for your answer. Can you tell what happens in Python 3 for evaluating whether a value referred by a variable can be Boolean?</span>
<span class="comment-copy">@giga Have a look at this for truth value testing in Python 3: <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#truth-value-testing</a></span>
