<div class="post-text" itemprop="text">
<p>Typing </p>
<pre><code>import this 
</code></pre>
<p>will return the <em>Zen of Python</em>, but nowhere do I seem to be able find a solution about <strong>how to  set it equal to a string variable which I can use further on in my code...</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>You can temporarily redirect <code>stdout</code> to a <code>StringIO</code> instance, <code>import this</code>, and then get its value.</p>
<pre><code>&gt;&gt;&gt; import sys, cStringIO
&gt;&gt;&gt; zen = cStringIO.StringIO()
&gt;&gt;&gt; old_stdout = sys.stdout
&gt;&gt;&gt; sys.stdout = zen
&gt;&gt;&gt; import this
&gt;&gt;&gt; sys.stdout = old_stdout
&gt;&gt;&gt; print zen.getvalue()
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
</code></pre>
<p>This code works on python2.7 -- for python 3, use <code>io.StringIO</code> instead of <code>cStringIO.StringIO</code>, and also have a look at <a href="https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout" rel="nofollow"><code>contextlib.redirect_stdout</code></a> which was added in 3.4. That would look like this:</p>
<pre><code>&gt;&gt;&gt; import contextlib, io
&gt;&gt;&gt; zen = io.StringIO()
&gt;&gt;&gt; with contextlib.redirect_stdout(zen):
...    import this
...
&gt;&gt;&gt; print(zen.getvalue())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's look at what <code>this.py</code> does:</p>
<pre><code>s = "some encrypted string"
d = a map to decrypt the string

print "".join([d.get(c, c) for c in s])
</code></pre>
<p>Let's note that the encryption is just ROT13.</p>
<p>So if we really wanted to grab the string, we could do:</p>
<pre><code>import this
s = this.s.decode('rot13')
</code></pre>
<p>Or, to explicitly follow the style of the <code>this.py</code> module...</p>
<pre><code>import this
s = "".join([this.d.get(c, c) for c in this.s])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the accepted answer is overcomplicated for this case (while very interesting for capturing the standard output in general).</p>
<p>In Python 3, you can get the <em>Zen of Python</em> as a string by simply doing:</p>
<pre><code>import this
import codecs

zen_of_python = codecs.encode(this.s, 'rot13')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>the string is stored in <code>this.s</code>, but
that's funny, because it's encrypted:</p>
<pre><code>&gt;&gt;&gt; help(this)
NAME
    this

FILE
    /usr/lib/python2.7/this.py

MODULE DOCS
    http://docs.python.org/library/this

DATA
    c = '!'
    d = {'A': 'N', 'B': 'O', 'C': 'P', 'D': 'Q', 'E': 'R', 'F': 'S', 'G': ...
    i = 25
    s = "Gur Mra bs Clguba, ol Gvz Crgref\n\nOrnhgvshy vf o...bar ubaxvat ...
</code></pre>
<hr/>
<pre><code>$ head /usr/lib/python2.7/this.py
s = """Gur Mra bs Clguba, ol Gvz Crgref

Ornhgvshy vf orggre guna htyl.
Rkcyvpvg vf orggre guna vzcyvpvg.
Fvzcyr vf orggre guna pbzcyrk.
Pbzcyrk vf orggre guna pbzcyvpngrq.
Syng vf orggre guna arfgrq.
Fcnefr vf orggre guna qrafr.
Ernqnovyvgl pbhagf.
Fcrpvny pnfrf nera'g fcrpvny rabhtu gb oernx gur ehyrf.
</code></pre>
</div>
<span class="comment-copy"><code>this</code> is a module.  Look at the source code of that module to see what it contains.  That should get you started.</span>
<span class="comment-copy"><code>this</code> defines 4 names (<code>c</code>, <code>d</code>, <code>i</code> and <code>s</code>) - you can actually get the text using only two of them</span>
<span class="comment-copy">I definitely think this is the most appropriate approach for answering the question. It's generalizable to other modules that happen to have printed output and it's resistant to implementation changes to the <code>this</code> module. The other answers, while they work, are so specific that we might as well tell the OP to copy the text themselves and paste it into a string literal, or link to the on-line version of <a href="http://legacy.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">PEP 20</a>, etc. If the OP is trying to understand how it works, then what they really want is this: <a href="http://stackoverflow.com/questions/5855758">stackoverflow.com/questions/5855758</a></span>
<span class="comment-copy">The dict translates the letters to something readable, but there's some weird mojo going on in this module.</span>
<span class="comment-copy">The letters are shifted alphabetically by some characters: <a href="http://stackoverflow.com/questions/5855758/can-anyone-explain-me-the-source-code-of-python-import-this" title="can anyone explain me the source code of python import this">stackoverflow.com/questions/5855758/â€¦</a></span>
<span class="comment-copy">Yeah, opened the module up in PyCharm and the magic was gone. It was more fun when I thought there was a sinister plot afoot.</span>
