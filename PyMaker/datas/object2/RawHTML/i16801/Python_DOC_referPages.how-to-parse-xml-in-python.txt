<div class="post-text" itemprop="text">
<p>I have to extract <code>friendlyName</code> from the XML document.</p>
<p>Here's my current solution:</p>
<pre><code>root = ElementTree.fromstring(urllib2.urlopen(XMLLocation).read())        
for child in root.iter('{urn:schemas-upnp-org:device-1-0}friendlyName'):
    return child.text
</code></pre>
<p>I there any better way to do this (maybe any other way which does not involve iteration)? Could I use XPath?</p>
<hr/>
<p>XML content:</p>
<pre class="lang-xml prettyprint-override"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;root xmlns="urn:schemas-upnp-org:device-1-0"&gt;
   &lt;specVersion&gt;
      &lt;major&gt;1&lt;/major&gt;
      &lt;minor&gt;0&lt;/minor&gt;
   &lt;/specVersion&gt;
   &lt;device&gt;
      &lt;dlna:X_DLNADOC xmlns:dlna="urn:schemas-dlna-org:device-1-0"&gt;DMR-1.50&lt;/dlna:X_DLNADOC&gt;
      &lt;deviceType&gt;urn:schemas-upnp-org:device:MediaRenderer:1&lt;/deviceType&gt;
      &lt;friendlyName&gt;My Product 912496&lt;/friendlyName&gt;
      &lt;manufacturer&gt;embedded&lt;/manufacturer&gt;
      &lt;manufacturerURL&gt;http://www.embedded.com&lt;/manufacturerURL&gt;
      &lt;modelDescription&gt;Product&lt;/modelDescription&gt;
      &lt;modelName&gt;Product&lt;/modelName&gt;
      &lt;modelNumber /&gt;
      &lt;modelURL&gt;http://www.embedded.com&lt;/modelURL&gt;
      &lt;UDN&gt;uuid:93b2abac-cb6a-4857-b891-002261912496&lt;/UDN&gt;
      &lt;serviceList&gt;
         &lt;service&gt;
            &lt;serviceType&gt;urn:schemas-upnp-org:service:ConnectionManager:1&lt;/serviceType&gt;
            &lt;serviceId&gt;urn:upnp-org:serviceId:ConnectionManager&lt;/serviceId&gt;
            &lt;SCPDURL&gt;/xml/ConnectionManager.xml&lt;/SCPDURL&gt;
            &lt;eventSubURL&gt;/Event/org.mpris.MediaPlayer2.mansion/RygelSinkConnectionManager&lt;/eventSubURL&gt;
            &lt;controlURL&gt;/Control/org.mpris.MediaPlayer2.mansion/RygelSinkConnectionManager&lt;/controlURL&gt;
         &lt;/service&gt;
         &lt;service&gt;
            &lt;serviceType&gt;urn:schemas-upnp-org:service:AVTransport:1&lt;/serviceType&gt;
            &lt;serviceId&gt;urn:upnp-org:serviceId:AVTransport&lt;/serviceId&gt;
            &lt;SCPDURL&gt;/xml/AVTransport2.xml&lt;/SCPDURL&gt;
            &lt;eventSubURL&gt;/Event/org.mpris.MediaPlayer2.mansion/RygelAVTransport&lt;/eventSubURL&gt;
            &lt;controlURL&gt;/Control/org.mpris.MediaPlayer2.mansion/RygelAVTransport&lt;/controlURL&gt;
         &lt;/service&gt;
         &lt;service&gt;
            &lt;serviceType&gt;urn:schemas-upnp-org:service:RenderingControl:3&lt;/serviceType&gt;
            &lt;serviceId&gt;urn:upnp-org:serviceId:RenderingControl&lt;/serviceId&gt;
            &lt;SCPDURL&gt;/xml/RenderingControl2.xml&lt;/SCPDURL&gt;
            &lt;eventSubURL&gt;/Event/org.mpris.MediaPlayer2.mansion/RygelRenderingControl&lt;/eventSubURL&gt;
            &lt;controlURL&gt;/Control/org.mpris.MediaPlayer2.mansion/RygelRenderingControl&lt;/controlURL&gt;
         &lt;/service&gt;
         &lt;service&gt;
            &lt;serviceType&gt;urn:schemas-embedded-com:service:RTSPGateway:1&lt;/serviceType&gt;
            &lt;serviceId&gt;urn:embedded-com:serviceId:RTSPGateway&lt;/serviceId&gt;
            &lt;SCPDURL&gt;/xml/RTSPGateway.xml&lt;/SCPDURL&gt;
            &lt;eventSubURL&gt;/Event/org.mpris.MediaPlayer2.mansion/RygelRTSPGateway&lt;/eventSubURL&gt;
            &lt;controlURL&gt;/Control/org.mpris.MediaPlayer2.mansion/RygelRTSPGateway&lt;/controlURL&gt;
         &lt;/service&gt;
         &lt;service&gt;
            &lt;serviceType&gt;urn:schemas-embedded-com:service:SpeakerManagement:1&lt;/serviceType&gt;
            &lt;serviceId&gt;urn:embedded-com:serviceId:SpeakerManagement&lt;/serviceId&gt;
            &lt;SCPDURL&gt;/xml/SpeakerManagement.xml&lt;/SCPDURL&gt;
            &lt;eventSubURL&gt;/Event/org.mpris.MediaPlayer2.mansion/RygelSpeakerManagement&lt;/eventSubURL&gt;
            &lt;controlURL&gt;/Control/org.mpris.MediaPlayer2.mansion/RygelSpeakerManagement&lt;/controlURL&gt;
         &lt;/service&gt;
         &lt;service&gt;
            &lt;serviceType&gt;urn:schemas-embedded-com:service:NetworkManagement:1&lt;/serviceType&gt;
            &lt;serviceId&gt;urn:embedded-com:serviceId:NetworkManagement&lt;/serviceId&gt;
            &lt;SCPDURL&gt;/xml/NetworkManagement.xml&lt;/SCPDURL&gt;
            &lt;eventSubURL&gt;/Event/org.mpris.MediaPlayer2.mansion/RygelNetworkManagement&lt;/eventSubURL&gt;
            &lt;controlURL&gt;/Control/org.mpris.MediaPlayer2.mansion/RygelNetworkManagement&lt;/controlURL&gt;
         &lt;/service&gt;
      &lt;/serviceList&gt;
      &lt;iconList&gt;
         &lt;icon&gt;
            &lt;mimetype&gt;image/png&lt;/mimetype&gt;
            &lt;width&gt;120&lt;/width&gt;
            &lt;height&gt;120&lt;/height&gt;
            &lt;depth&gt;32&lt;/depth&gt;
            &lt;url&gt;/org.mpris.MediaPlayer2.mansion-120x120x32.png&lt;/url&gt;
         &lt;/icon&gt;
         &lt;icon&gt;
            &lt;mimetype&gt;image/png&lt;/mimetype&gt;
            &lt;width&gt;48&lt;/width&gt;
            &lt;height&gt;48&lt;/height&gt;
            &lt;depth&gt;32&lt;/depth&gt;
            &lt;url&gt;/org.mpris.MediaPlayer2.mansion-48x48x32.png&lt;/url&gt;
         &lt;/icon&gt;
         &lt;icon&gt;
            &lt;mimetype&gt;image/jpeg&lt;/mimetype&gt;
            &lt;width&gt;120&lt;/width&gt;
            &lt;height&gt;120&lt;/height&gt;
            &lt;depth&gt;24&lt;/depth&gt;
            &lt;url&gt;/org.mpris.MediaPlayer2.mansion-120x120x24.jpg&lt;/url&gt;
         &lt;/icon&gt;
         &lt;icon&gt;
            &lt;mimetype&gt;image/jpeg&lt;/mimetype&gt;
            &lt;width&gt;48&lt;/width&gt;
            &lt;height&gt;48&lt;/height&gt;
            &lt;depth&gt;24&lt;/depth&gt;
            &lt;url&gt;/org.mpris.MediaPlayer2.mansion-48x48x24.jpg&lt;/url&gt;
         &lt;/icon&gt;
      &lt;/iconList&gt;
      &lt;X_embeddedDevice xmlns:edd="schemas-embedded-com:extended-device-description"&gt;
         &lt;firmwareVersion&gt;v1.0 (4.155.1.15.002)&lt;/firmwareVersion&gt;
         &lt;features&gt;
            &lt;feature&gt;
               &lt;name&gt;com.sony.Product&lt;/name&gt;
               &lt;version&gt;1.0.0&lt;/version&gt;
            &lt;/feature&gt;
            &lt;feature&gt;
               &lt;name&gt;com.sony.Product.btmrc&lt;/name&gt;
               &lt;version&gt;1.0.0&lt;/version&gt;
            &lt;/feature&gt;
            &lt;feature&gt;
               &lt;name&gt;com.sony.Product.btmrs&lt;/name&gt;
               &lt;version&gt;1.0.0&lt;/version&gt;
            &lt;/feature&gt;
         &lt;/features&gt;
      &lt;/X_embeddedDevice&gt;
   &lt;/device&gt;
&lt;/root&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using ElementTree, you can either read directly from the file or load it into a string. </p>
<p>First , include the following import.</p>
<pre><code>from xml.etree.ElementTree import ElementTree
from xml.parsers.expat import ExpatError
</code></pre>
<p>If you are using a string:</p>
<pre><code>from xml.etree.ElementTree import fromstring
try:
tree = fromstring(xml_data)
except ExpatData:
print "Unable to parse XML data from string"
</code></pre>
<p>Otherwise, to load it directly:</p>
<pre><code>try:
tree = ElementTree(file = "filename")
except ExpatData:
print "Unable to parse XML from file"
</code></pre>
<p>Once you have the tree initialised, you can begin parsing the information.</p>
<pre><code>root = tree.getroot()
print root.find('device/friendlyName').text
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Pedro, in the comments is right. </p>
<pre><code>.find(match, namespaces=None)
</code></pre>
<p>Finds the first subelement matching match. match may be a tag name or a path. Returns an element instance or None. namespaces is an optional mapping from namespace prefix to full name.</p>
<p>The ElemntTree docs are really helpful in these cases.
<a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.find" rel="nofollow">https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.find</a></p>
<p><strong>Edit:</strong>
The link I gave in the comments leads to the following code:</p>
<pre><code>import xml.etree.ElementTree as ET
input = '''&lt;stuff&gt;
&lt;users&gt;
&lt;user x="2"&gt;
&lt;id&gt;001&lt;/id&gt;
&lt;name&gt;Chuck&lt;/name&gt;
&lt;/user&gt;
&lt;user x="7"&gt;
&lt;id&gt;009&lt;/id&gt;
&lt;name&gt;Brent&lt;/name&gt;
&lt;/user&gt;
&lt;/users&gt;
&lt;/stuff&gt;
'''
stuff = ET.fromstring(input)
lst = stuff.findall("users/user")
print len(lst)
for item in lst:
print item.attrib["x"]
item = lst[0]
ET.dump(item)
item.get("x")   # get works on attributes
item.find("id").text
item.find("id").tag
for user in stuff.getiterator('user') :
print "User" , user.attrib["x"]
ET.dump(user)
</code></pre>
<p>The code above uses:</p>
<pre><code>item.find("id").text
</code></pre>
<p>If you modify that, along with removing the other code which you don't need... The find should look something like this:</p>
<pre><code>item.find('device/friendlyName').text
</code></pre>
<p>You can get the xml file, instead of using the input string with the following (from the ElementTree docs):</p>
<pre><code>import xml.etree.ElementTree as ET
tree = ET.parse('your_file_name.xml')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import xml.etree.ElementTree as ElementTree

namespace = '{urn:schemas-upnp-org:device-1-0}'
root = ElementTree.fromstring(urllib2.urlopen(XMLLocation).read())

# The `//` specifies all subelements within the whole tree.
return root.find('.//{}friendlyName'.format(namespace)).text
</code></pre>
<p>The find() function stops when it finds the first match. To get all of the elements that match the XPath, use the findall() function.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/2/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.find" rel="nofollow noreferrer">find()</a> should do the trick.</span>
<span class="comment-copy">@PedroRomano if i give like this a = root.find('friendlyName') then a.text it gives None</span>
<span class="comment-copy">You can see my answer below , you can use find or xpath</span>
<span class="comment-copy">I am using XML'S Locaction here, then what to change in ur code</span>
<span class="comment-copy">Sorry , i will edit my answer to take care of xml's location</span>
<span class="comment-copy">error for module lxml in python 2.7</span>
<span class="comment-copy">lxml works from python version 3.0 and up</span>
<span class="comment-copy">in ur code i havE used ET.parse(XMLLocation)  but this gives error</span>
<span class="comment-copy">i tried ur code, but got None, can u give me exact</span>
<span class="comment-copy"><a href="http://www.dr-chuck.com/csev-blog/2008/09/a-simple-python-elementtree-example/" rel="nofollow noreferrer">dr-chuck.com/csev-blog/2008/09/…</a> Try this webpage, there is an example on there which shows how it is used</span>
<span class="comment-copy">in that example, whole xml is taken as input, but in my code i have to give its location as input, so how can i modify my code for that ?</span>
<span class="comment-copy">Edited my answer</span>
<span class="comment-copy">i have edited my code with reference to yours, still i was unable to get friendlyName, can u pls give me exact code and must check it for my given xml</span>
