<div class="post-text" itemprop="text">
<p>I have hundreds of classes with many properties in a file. I want to let the user know what are the different properties available for a particular class. My main aim is to support auto-completion otherwise its very difficult for user to know what properties exist in different class.</p>
<p>I have file constant.py which have classes as </p>
<pre><code>class abc:
  AA = "aa"
  BB = "bb"
  CC = "cc"

class def:
 DD ="dd"
 EE = "ee"
 FF = "ff"
</code></pre>
<p>similarly we have hundread of classes with hundred of properties.
This is done so user can use it as abc.AA , def.DD but this approach is consuming lot of memory. 
File is of around 11MB but when I import i.e. import Constant it consumes around 50MB memory.</p>
<p>Is there any better approach so as to minimize the memory consumption?</p>
</div>
<div class="post-text" itemprop="text">
<p>This doesn't sound like a good use of classes. <code>collections.namedtuple</code> might be a better bet, and more efficient.</p>
<p>One way of reducing the memory needed for the class version though would be to use <a href="https://docs.python.org/3/reference/datamodel.html?highlight=slots#object.__slots__" rel="nofollow"><code>__slots__</code></a>.</p>
<pre><code>class ABC:
    __slots__=('aa', 'bb', 'cc)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Break your constants up into a module, and group related classes per file.  The user can then import whichever subset they need, and the others aren't wasting resources.</p>
</div>
<span class="comment-copy">Actually 50 MB in memory for 11 MB or source data is pretty good. Data in memory have some overhead, which allows you to make quick lookup etc. I do not think, you will have big chance to improve the situation much.</span>
<span class="comment-copy">there is a design problem, you may use database for this approach. its not good to hold lots of data in memory for an enum.</span>
<span class="comment-copy">Use a database.</span>
<span class="comment-copy">We do not have a DB as a part of our application.Application will be available in form Python package. And we need to contain metadata in some form of data structure within a package.</span>
<span class="comment-copy">IHMO this is still a design issue and the OP could probably think about moving the application data requirements to a Database.</span>
<span class="comment-copy">Daniel, I suppose <b>slots</b> is used for instance variable. can we use it for class variable too??</span>
<span class="comment-copy">Do you actually need to store data in the attribute? I understood from your question that it was just about providing the attribute names for autocompletion. Is that not the case?</span>
<span class="comment-copy">yes, there are lot many classes and lot many attributes respective to the class. This will help user to know what are the different property and constants available under a particular class.</span>
