<div class="post-text" itemprop="text">
<p>In Python , as we all know there is a useful function : zip
for instance:</p>
<pre><code>a = [1,2,3,4,5]
b = [5,4,3,2,1]
</code></pre>
<p>we can "add" these lists in one line:</p>
<pre><code>c = [ x[0] + x[1] for x in zip(a,b) ]
</code></pre>
<p>But it seems zip created a new list.
In many cases , which I want is just a pair of data( a[i],b[i] ) , I don't want the "zip" list at all.</p>
<p>In c# , we can make a iterator to get pair data from a and b , so we could avoid to make a new "zip" list.</p>
<p>What about python?</p>
</div>
<div class="post-text" itemprop="text">
<p>It is <a href="https://docs.python.org/2/library/itertools.html#itertools.izip" rel="noreferrer"><code>itertools.izip()</code></a>:</p>
<blockquote>
<p>Make an iterator that aggregates elements from each of the iterables.
  Like zip() except that it returns an iterator instead of a list. Used
  for lock-step iteration over several iterables at a time.</p>
</blockquote>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; a = [1,2,3,4,5]
&gt;&gt;&gt; b = [5,4,3,2,1]
&gt;&gt;&gt; c = izip(a, b)
&gt;&gt;&gt; c
&lt;itertools.izip object at 0x10d1aaf38&gt;
&gt;&gt;&gt; for x, y in c:
...     print x, y
... 
1 5
2 4
3 3
4 2
5 1
</code></pre>
<p>Note that in Python-3.x <code>izip()</code> is gone, <a href="https://docs.python.org/3/library/functions.html#zip" rel="noreferrer"><code>zip()</code></a> returns an iterator.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need a function per se, just use a <a href="https://docs.python.org/2/reference/expressions.html#generator-expressions" rel="nofollow"><em>generator expression</em></a>:</p>
<pre><code>a = [1,2,3,4,5]
b = [5,4,3,2,1]

for pair in ((a[i], b[i]) for i in xrange(min(len(a), len(b)))):
    print pair
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>(1, 5)
(2, 4)
(3, 3)
(4, 2)
(5, 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Generator for fixed or variable number of iterables</h1>
<p>You may create your own generator in Python too:</p>
<pre><code>def mygen(a, b):
    """generator yielding values from two iterables"""
    aiter = iter(a)
    biter = iter(b)
    while True:
        yield aiter.next(), biter.next()

def dyngen(*iterables):
    """generator for yielding list from dynamic number of iterables"""
    iterables = map(iter, iterables)
    while True:
        yield  map(next, iterables)

if __name__ == "__main__":
    a = [1,2,3,4,5]
    b = [5,4,3,2,1]
    c = ["a", "b", "c", "d", "e"]

    gen = mygen(a, b)
    print gen.next()
    print gen.next()
    print gen.next()
    print gen.next()
    print gen.next()

    print "dyngen"
    gen = dyngen(a, b, c)
    print gen.next()
    print gen.next()
    print gen.next()
    print gen.next()
    print gen.next()
</code></pre>
<p>Calling from command line:</p>
<pre><code>$ python myzip.py 
(1, 5)
(2, 4)
(3, 3)
(4, 2)
(5, 1)
dyngen
[1, 5, 'a']
[2, 4, 'b']
[3, 3, 'c']
[4, 2, 'd']
[5, 1, 'e']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try to use map() as below:</p>
<pre><code>c = map(lambda x,y:x+y,a,b)
</code></pre>
</div>
<span class="comment-copy">Not to your question, but I think there are clearer ways to write <code>[x[0] + x[1] for x in zip(a,b)]</code>.  <code>[sum(x) for x in zip(a,b)]</code> is clearer but slower, and <code>[x+y for x,y in zip(a,b)]</code> is clearer and faster.  (Of course, clarity is in the eye of the beholder.)</span>
<span class="comment-copy">Yea, I absolutely agreed with you. And I'll change my behavior while writing codes about zip/izip.</span>
<span class="comment-copy">It might be worth pointing out that in python3.x, <code>itertools.izip</code> goes away and regular <code>zip</code> returns an iterable object rather than a <code>list</code>.</span>
<span class="comment-copy">Python is a beauty.</span>
<span class="comment-copy">nice! It's a another way to solve my problem.</span>
<span class="comment-copy">-0.  You do answer the question but this is both ugly and unnecessary because <code>itertools.izip</code> exists.  I like that you mentioned generator expressions.</span>
<span class="comment-copy">@Steven: Fair enough.</span>
<span class="comment-copy">This doesn't avoid the problem since <code>map(None,a,b)</code> returns a list (in fact, the same list as <code>zip</code>)</span>
<span class="comment-copy">you're right, I re-edit it with lambda function now.</span>
<span class="comment-copy">@wnnmaw -- I agree with your point, but there is a very subtle difference when the 2 iterables are of different length -- <code>zip</code> truncates to the shorter whereas on python2.x, <code>map</code> pads the shorter with <code>None</code>.</span>
<span class="comment-copy">@mgilson yes, it has different behavior when len of two lists are different, wnnmaw is right about my original answer, I re-edit it now.</span>
<span class="comment-copy">@mgilson, good catch! Though I think the issue is more that the result shouldn't be a list</span>
