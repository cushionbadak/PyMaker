<div class="post-text" itemprop="text">
<p>Why django uses tuple of tuples to store for example <code>choices</code> instead of standard dict?</p>
<p>Example:</p>
<pre><code>ORGINAL_MARKET = 1
SECONDARY_MARKET = 2
MARKET_CHOICES = (
     (ORGINAL_MARKET, _('Orginal Market')),
     (SECONDARY_MARKET, _('Secondary Market')),
 )
</code></pre>
<p>And should I do it to when I know the dict won't change in time?
I reckon the tuples are faster but does it matter if when I try to get value I'm still need to convert it to dict to find it?</p>
<p>UPDATE:</p>
<p>Clarification if I use it as a tuple of tuples I will be getting value using</p>
<pre><code>dict(self.MARKET_CHOICES)[self.ORGINAL_MARKET]
</code></pre>
<p>Which will work faster, this or storing values in dict from the beginning?</p>
</div>
<div class="post-text" itemprop="text">
<p>Tuples are immutable, slightly faster, and Django uses them because they're immutable in the <code>choices</code> parameter in fields.</p>
<p>If you're using Python 3.4 or later you can use <a href="https://docs.python.org/3/library/enum.html" rel="nofollow"><code>Enums</code></a> also which is better than both tuples and dictionaries (but I'm not sure if Django supports them for the <code>choices</code> parameter).</p>
</div>
<div class="post-text" itemprop="text">
<p>The main reason is that ordering is preserved.  If you used a dictionary, and called <code>.items()</code> on it to give the choices for a <code>ChoiceField</code>, for example, the ordering of items in the select box would be unreliable when you rendered the form.  </p>
<p>If you want the dict, it is easy to create one from the tuple of tuples, the format is already one accepted by the constructer so you can just call <code>dict()</code> on it.  </p>
<p>I don't think the immutability is a correct reason - it is not strictly necessary for them to be a tuple of tuples, a list of tuples or even a list of lists would work as well in Django.  </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>To be clear: I'm not going to use it in choices=- I'm looking for most efficient method â€“  Lord_JABA</p>
</blockquote>
<p>If you want your choices to have a particular order (which often is the case with the <code>choices</code> parameter) then use tuples, if you don't care use whatever literal you find easier to type (from the allowed datatypes), I doubt you will see any significant difference regarding the memory/cpu footprint for this specific use case.</p>
</div>
<span class="comment-copy">Could you provide link to Django using this method? What is the underscore?</span>
<span class="comment-copy">Not only that (tuples being leaner/faster), but tuple also preserve order while dict don't (if you want to preserve order there is collections.OrderedDict)</span>
<span class="comment-copy">@JanVlcinsky: the underscore is an alias for the translation function from GNU gettext library (internationalization/localization stuff).</span>
<span class="comment-copy">underscore is shorthand for internationalization (not relevant) details: <a href="http://stackoverflow.com/a/3967260/1016772">stackoverflow.com/a/3967260/1016772</a>  Example from in django docs: <a href="https://docs.djangoproject.com/en/1.6/ref/models/fields/#choices" rel="nofollow noreferrer">docs.djangoproject.com/en/1.6/ref/models/fields/#choices</a></span>
<span class="comment-copy">The "static" word in the question is the key here. Since there are no static dicts, tuples probably are the simplest option to store key/value pairs if you need a static structure.</span>
<span class="comment-copy">For now I'm using 2.7. Maybe if I will have some free work time I will migrate it to newest django and python 3 (free work time = not going to happen)</span>
<span class="comment-copy"><code>Enums</code> are backported to Python 2.7 and available via <code>$ pip install enum34</code>. Functionality is exactly the same. Do not confuse with <code>enum</code> package on pypi, which is similar but a bit different.</span>
