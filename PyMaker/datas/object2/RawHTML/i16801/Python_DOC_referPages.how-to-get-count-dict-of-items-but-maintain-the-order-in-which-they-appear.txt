<div class="post-text" itemprop="text">
<p>For example, I need to count how many times a word appears in a list, not sorted by frequency but with the order in which the words appear, i.e. insertion order.</p>
<pre><code>from collections import Counter

words = ['oranges', 'apples', 'apples', 'bananas', 'kiwis', 'kiwis', 'apples']

c = Counter(words)

print(c)
</code></pre>
<p>So instead of: <code>{'apples': 3, 'kiwis': 2, 'bananas': 1, 'oranges': 1}</code></p>
<p>I'd rather get: <code>{'oranges': 1, 'apples': 3, 'bananas': 1, 'kiwis': 2}</code></p>
<p>And I don't really need this <code>Counter</code> method, any way that will produce correct result is OK for me.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3.3/library/collections.html#ordereddict-examples-and-recipes">recipe</a> that uses <code>collections.Counter</code> and <code>collections.OrderedDict</code>:</p>
<pre><code>from collections import Counter, OrderedDict

class OrderedCounter(Counter, OrderedDict):
    'Counter that remembers the order elements are first encountered'

    def __repr__(self):
        return '%s(%r)' % (self.__class__.__name__, OrderedDict(self))

    def __reduce__(self):
        return self.__class__, (OrderedDict(self),)

words = ["oranges", "apples", "apples", "bananas", "kiwis", "kiwis", "apples"]
c = OrderedCounter(words)
print(c)
# OrderedCounter(OrderedDict([('oranges', 1), ('apples', 3), ('bananas', 1), ('kiwis', 2)]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On Python 3.6+, <code>dict</code> will now maintain insertion order.</p>
<p>So you can do:</p>
<pre><code>words = ["oranges", "apples", "apples", "bananas", "kiwis", "kiwis", "apples"]
counter={}
for w in words: counter[w]=counter.get(w, 0)+1
&gt;&gt;&gt; counter
{'oranges': 1, 'apples': 3, 'bananas': 1, 'kiwis': 2}
</code></pre>
<p>Unfortunately, the Counter in Python 3.6 and 3.7 does not display the insertion order that it maintains; instead, <code>__repr__</code> <a href="https://github.com/python/cpython/blob/v3.7.0/Lib/collections/__init__.py#L703" rel="nofollow noreferrer">sorts the return</a> by the most to least common.</p>
<p>But you can use the same OrderedDict <a href="https://docs.python.org/3.7/library/collections.html#ordereddict-examples-and-recipes" rel="nofollow noreferrer">recipe</a> but just use the Python 3.6+ dict instead:</p>
<pre><code>from collections import Counter

class OrderedCounter(Counter, dict):
    'Counter that remembers the order elements are first encountered'
    def __repr__(self):
        return '%s(%r)' % (self.__class__.__name__, dict(self))

    def __reduce__(self):
        return self.__class__, (dict(self),)

&gt;&gt;&gt; OrderedCounter(words)
OrderedCounter({'oranges': 1, 'apples': 3, 'bananas': 1, 'kiwis': 2})
</code></pre>
<p>Or, since Counter is a subclass of <code>dict</code> that maintains order in Python 3.6+, you can just avoid using Counter's <code>__repr__</code> by either calling <code>.items()</code> on the counter or turning the counter back into a <code>dict</code>:</p>
<pre><code>&gt;&gt;&gt; c=Counter(words)
</code></pre>
<p>This presentation of that Counter is sorted by most common element to least and uses Counters <code>__repr__</code> method:</p>
<pre><code>&gt;&gt;&gt; c
Counter({'apples': 3, 'kiwis': 2, 'oranges': 1, 'bananas': 1})
</code></pre>
<p>This presentation is as encountered, or insertion order:</p>
<pre><code>&gt;&gt;&gt; c.items()
dict_items([('oranges', 1), ('apples', 3), ('bananas', 1), ('kiwis', 2)])
</code></pre>
<p>Or,</p>
<pre><code>&gt;&gt;&gt; dict(c)
{'oranges': 1, 'apples': 3, 'bananas': 1, 'kiwis': 2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In <strong>Python 3.6</strong>, dictionaries are insertion ordered, but this is an implementation detail.</p>
<p>In <strong>Python 3.7+</strong>, insertion order is guaranteed and can be relied upon. See <a href="https://stackoverflow.com/a/39980744/9209546">Are dictionaries ordered in Python 3.6+?</a> for more details.</p>
<p>So, depending on your Python version, you may wish to just use <code>Counter</code> as is, without creating an <code>OrderedCounter</code> class as described in the <a href="https://docs.python.org/3/library/collections.html#ordereddict-examples-and-recipes" rel="nofollow noreferrer">documentation</a>. This works because <code>Counter</code> is a subclass of <code>dict</code>, i.e. <code>issubclass(Counter, dict)</code> returns <code>True</code>, and therefore inherits the insertion ordering behaviour of <code>dict</code>.</p>
<p><strong>String representation</strong></p>
<p>It is worth noting the the string representation for <code>Counter</code>, as defined in the <code>repr</code> method, <a href="https://stackoverflow.com/questions/52174284/how-are-counter-defaultdict-ordered-in-python-3-7">has not been updated</a> to reflect the change in 3.6 / 3.7, i.e. <code>print(Counter(some_iterable))</code> still returns items from largest counts descending. You can trivially return the insertion order via <code>list(Counter(some_iterable))</code>.</p>
<p>Here are some examples demonstrating the behaviour:</p>
<pre><code>x = 'xyyxy'
print(Counter(x))         # Counter({'y': 3, 'x': 2}), i.e. most common first
print(list(Counter(x)))   # ['x', 'y'], i.e. insertion ordered
print(OrderedCounter(x))  # OC(OD([('x', 2), ('y', 3)])), i.e. insertion ordered
</code></pre>
<p><strong>Exceptions</strong></p>
<p>You should not use a regular <code>Counter</code> if additional or overwritten methods available to <code>OrderedCounter</code> are important to you. Of particular note:</p>
<ol>
<li><code>OrderedDict</code> and consequently <code>OrderedCounter</code> offer <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict.popitem" rel="nofollow noreferrer"><code>popitem</code></a> and <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict.move_to_end" rel="nofollow noreferrer"><code>move_to_end</code></a> methods.</li>
<li>Equality tests between <code>OrderedCounter</code> objects are order-sensitive and are implemented as <code>list(oc1.items()) == list(oc2.items())</code>.</li>
</ol>
<p>For example, equality tests will yield different results:</p>
<pre><code>Counter('xy') == Counter('yx')                # True
OrderedCounter('xy') == OrderedCounter('yx')  # False
</code></pre>
</div>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/questions/35446015/creating-an-ordered-counter/52173924">Creating an Ordered Counter</a></span>
