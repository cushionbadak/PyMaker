<div class="post-text" itemprop="text">
<p>I was trying to test how the lists in python works according to a tutorial I was reading.
When I tried to use <code>list.sort()</code> or <code>list.reverse()</code>, the interpreter gives me <code>None</code>.</p>
<p>Please let me know how I can get a result from these two methods:</p>
<pre><code>a = [66.25, 333, 333, 1, 1234.5]
print(a.sort())
print(a.reverse())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>.sort()</code> and <code>.reverse()</code> change the list <em>in place</em> and return <code>None</code> See the <a href="http://docs.python.org/2/library/stdtypes.html#mutable-sequence-types" rel="noreferrer">mutable sequence documentation</a>:</p>
<blockquote>
<p>The <code>sort()</code> and <code>reverse()</code> methods modify the list in place for economy of space when sorting or reversing a large list. To remind you that they operate by side effect, they don’t return the sorted or reversed list.</p>
</blockquote>
<p>Do this instead:</p>
<pre><code>a.sort()
print(a)
a.reverse()
print(a)
</code></pre>
<p>or use the <a href="http://docs.python.org/3/library/functions.html#sorted" rel="noreferrer"><code>sorted()</code></a> and <a href="http://docs.python.org/3/library/functions.html#reversed" rel="noreferrer"><code>reversed()</code></a> functions.</p>
<pre><code>print(sorted(a))               # just sorted
print(list(reversed(a)))       # just reversed
print(a[::-1])                 # reversing by using a negative slice step
print(sorted(a, reverse=True)) # sorted *and* reversed
</code></pre>
<p>These methods return a <em>new</em> list and leave the original input list untouched.</p>
<p>Demo, in-place sorting and reversing:</p>
<pre><code>&gt;&gt;&gt; a = [66.25, 333, 333, 1, 1234.5]
&gt;&gt;&gt; a.sort()
&gt;&gt;&gt; print(a)
[1, 66.25, 333, 333, 1234.5]
&gt;&gt;&gt; a.reverse()
&gt;&gt;&gt; print(a)
[1234.5, 333, 333, 66.25, 1]
</code></pre>
<p>And creating new sorted and reversed lists:</p>
<pre><code>&gt;&gt;&gt; a = [66.25, 333, 333, 1, 1234.5]
&gt;&gt;&gt; print(sorted(a))
[1, 66.25, 333, 333, 1234.5]
&gt;&gt;&gt; print(list(reversed(a)))
[1234.5, 1, 333, 333, 66.25]
&gt;&gt;&gt; print(a[::-1])
[1234.5, 1, 333, 333, 66.25]
&gt;&gt;&gt; print(sorted(a, reverse=True))
[1234.5, 333, 333, 66.25, 1]
&gt;&gt;&gt; a  # input list is untouched
[66.25, 333, 333, 1, 1234.5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For reference, you can see the documentation <a href="http://docs.python.org/2/library/stdtypes.html#mutable-sequence-types" rel="nofollow">here</a> specifically says:</p>
<blockquote>
<p>The sort() and reverse() methods modify the list in place for economy of space when sorting or reversing a large list. To remind you that they operate by side effect, they don’t return the sorted or reversed list.</p>
</blockquote>
<p>Don't be afraid to read the manual!</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple ascending sort is very easy, call the sorted() function. It returns a new sorted list: </p>
<pre><code>&gt;&gt;&gt; sorted([66.25, 333, 333, 1, 1234.5])
[1, 66.25, 333, 333, 1234.5]
</code></pre>
<p>sorted() accept a reverse parameter with a boolean value.</p>
<pre><code>&gt;&gt;&gt; sorted([66.25, 333, 333, 1, 1234.5], reverse=True)
[1234.5, 333, 333, 66.25, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This methods operate in place. </p>
<p>This code works (python 3.x)</p>
<pre><code>a = [66.25, 333, 333, 1, 1234.5]
a.sort()
print(a)
a.reverse()
print(a)

&gt;&gt;&gt; 
[1, 66.25, 333, 333, 1234.5]
[1234.5, 333, 333, 66.25, 1]
</code></pre>
</div>
<span class="comment-copy">We should make this the canonical answer to all duplicates of this question</span>
<span class="comment-copy">I needed the python 2.x answer, so this worked for me :)</span>
