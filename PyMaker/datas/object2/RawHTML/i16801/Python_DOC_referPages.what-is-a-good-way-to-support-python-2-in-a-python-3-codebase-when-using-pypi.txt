<div class="post-text" itemprop="text">
<p>I've written a library in Python 3 and recently a pull request came in that added support for Python 2.7. The pull request is this: <a href="https://github.com/JelteF/PyLaTeX/pull/9" rel="nofollow">https://github.com/JelteF/PyLaTeX/pull/9</a>.</p>
<p>What it basically does is adding some <code>import</code> fixs and making the super calls explicit. I have mixed feelings about this, since one of the big reasons I chose for python 3 was the cleaner syntax and this makes it compatible by using the 'ugly' syntax. However, I do like that people stuck with Python 2 can use the library as well.</p>
<p>This is why I was thinking about separate codebases for python2 and python3. Is there a way to set PyPi up so that it uses a separate codebase different versions of Python? Using separate branches would be preferable, since merging new changes would be easy in that case.</p>
<p>Or is there some better option that I'm overlooking?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would not invest too much effort in supporting Python 2 in a Python 3 codebase.  You're already running the "modern" way - adding more complexity to your project to support those who aren't upgrading should be low on your priorities.</p>
<p>Many projects written in Python 2 have been modified to run in Python 3 environments using the <a href="https://docs.python.org/2/library/2to3.html" rel="nofollow"><code>2to3</code></a> tool, however this is a band-aid fix for those projects that are particularly concerned with backwards compatibility between major language versions.  These projects are working in a worst-of-both-worlds environment - they have to program in Python 2, but ensure their changes remain compatible with Python 3.  The better practice, where possible, is to simply release all future updates in Python 3.</p>
<p>In your case, you're starting with Python 3, and debating supporting Python 2's dated semantics.  This should be a no-brainer, unless you really, really care about Python 2 users.  Even if you can get everything working with the <code>3to2</code> tool like you suggest, and even if you can trust you're not introducing semantic issues*, you'll now be on the hook to continue supporting and testing this going forward, and you'll be limited to improvements that remain backwards compatible to Python 2.  You have much better things to do with your time - like improving your library - than supporting such issues.</p>
<p>Instead I would suggest you reject this pull request, and encourage the submitter to release his own clone.  This compartmentalizes your project from the Python 2 requirement, leaving you free to work on your project as you need, and letting the requester, who actually cares about this requirement, support and maintain it as they see fit.</p>
<p>*<sub>You claim "this library doesn't really use unicode and probably never will" - this is a dangerous way of thinking.  Regardless of the use-case, a lack of proper unicode support <em>will</em> come back to haunt you later.  Do it right the first time, and assume that failing to handle unicode will introduce unforeseen problems down the road - because it absolutely will.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way to support Python 2 and Python 3 in the same code base is to use the <a href="https://pypi.python.org/pypi/six/1.6.1" rel="nofollow">six</a> module to bridge the differences.   It's still a significant undertaking though, there are semantic differences between the two languages, especially if you do text handling.</p>
</div>
<div class="post-text" itemprop="text">
<p>I've just released my library for Python 2.7 as well. The way I did is is to use the <a href="https://pypi.python.org/pypi/3to2" rel="nofollow">3to2</a> and compile the Python 3 code to 2.7 code before uploading it to PyPi.</p>
<pre><code>mkdir -p python2_source
cp -R pylatex tests examples python2_source
3to2 python2_source -wn -f collections -f all
</code></pre>
<p>You also have to add <code>python2_source</code> to <code>MANIFEST.in</code>, so it will be in your distributed files. Then I have this small piece of code in my <code>setup.py</code> to install from the <code>python2_source</code> folder if the setup is done using Python 2.7. </p>
<pre><code>if sys.version_info[0] == 3:
    source_dir = '.'
else:
    source_dir = 'python2_source'
</code></pre>
<p>and then have <code>package_dir={'': source_dir}</code> in the actual <code>setup</code> call.</p>
</div>
<span class="comment-copy">This is a little like asking "What's a good way to have American and English cars driving on the same roads?"...</span>
<span class="comment-copy">In all seriousness though, be sure you've read about <a href="https://docs.python.org/2/library/2to3.html" rel="nofollow noreferrer"><code>2to3</code></a> - it does a lot of what you're talking about for you.</span>
<span class="comment-copy">I know there isn't an absolute solution, but a lot of libraries support both and I was wondering what some of the best methods were. Regarding your 2to3 comment, this is the exact other way around than what I want, since I want the main codebase to be python 3. I just Googled 3to2 though and I will be looking in to that.</span>
<span class="comment-copy">A "unified" codebase is not something to take on lightly - it's possible, but you have to be wary of the many (many) pitfalls.  <code>2to3</code> does what it can, but there's a wide swathe of things that it won't (and can't) fix, many of them related to unicode-everywhere.  <a href="http://lucumr.pocoo.org/2013/5/21/porting-to-python-3-redux/" rel="nofollow noreferrer">Here's a good read</a>.</span>
<span class="comment-copy">Like I just said, it's not so much porting to python3. It's more porting to python2. Also, this library doesn't really use unicode and probably never will for the use cases I can imagine.</span>
<span class="comment-copy">note: the common way to support both Python 2/3 is to write code source-compatible with both Python 2/3 i.e., <code>2to3</code>, <code>3to2</code> are not used. It depends on the project how taxing is to write in such hybrid Python (I almost always write using that dialect and it is ok language).</span>
<span class="comment-copy">Sure, you <i>can</i> do that. But unless you have some need to support both, why go to the trouble?</span>
<span class="comment-copy"><i>"why go to the trouble?"</i> -- read the title of the question.</span>
<span class="comment-copy">OP received a pull request to <i>introduce</i> Python 2 support.  Previously, it was 3-only.  Read the question itself.</span>
<span class="comment-copy">the question is not <b>whether or not</b> to support both Python 2 and 3. The question is <b>how</b> to support both versions and using the same code base for both Python 2 and 3 is the preferred in practice method.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/howto/pyporting.html" rel="nofollow noreferrer">consider making your project be single-source Python 2/3 compatible</a></span>
<span class="comment-copy">See this comment on my views on this: <a href="https://stackoverflow.com/questions/23588038/what-is-a-good-way-to-support-python-2-in-a-python-3-codebase-when-using-pypi#comment52998065_23600056" title="what is a good way to support python 2 in a python 3 codebase when using pypi%23comment52998065_23600056">stackoverflow.com/questions/23588038/â€¦</a></span>
