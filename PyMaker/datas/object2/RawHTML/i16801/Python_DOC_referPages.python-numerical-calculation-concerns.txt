<div class="post-text" itemprop="text">
<p>I computed the following 2 values in python and got different results! It would be great if someone could reason it why it is happening like this.</p>
<p><code>(111 - (111 + 2*17)*3375)/(-14)</code> gives 34947 as output.</p>
<p><code>(111 - (111 + 2*17)*3375)/(14)*-1</code> gives 34948 as output.</p>
<p>Both terms are mathematically equivalent.</p>
</div>
<div class="post-text" itemprop="text">
<p>This has to do with the rounding rules. Consider a simpler example:</p>
<pre><code>&gt;&gt;&gt; -3/(-2)
1

&gt;&gt;&gt; -3/2*-1
2
</code></pre>
<p><code>1.5</code> is rounded <strong>down</strong> to <code>1</code>, and <code>-1.5</code> is rounded <strong>down</strong> to <code>-2</code>. Consistent, in a way.</p>
<p><a href="https://docs.python.org/2/reference/expressions.html#binary-arithmetic-operations" rel="nofollow">Doc reference:</a></p>
<blockquote>
<p>Plain or long integer division yields an integer of the same type; the
  result is that of mathematical division with the ‘floor’ function
  applied to the result.</p>
</blockquote>
<p>If you want a floating point result in Python 2.x, you need either an explicit conversion (or just use float literals), or do <code>from __future__ import division</code>. In Python 3.x, division always produces a float (<a href="https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations" rel="nofollow">ref</a>).</p>
</div>
<div class="post-text" itemprop="text">
<p>You're doing integer math, which rounds the fractional result differently depending on whether it's negative or positive. Using floating point division:</p>
<pre><code>&gt;&gt;&gt; (111 - (111 + 2*17)*3375)/(14.)*(-1)
34947.42857142857
&gt;&gt;&gt; (111 - (111 + 2*17)*3375)/(-14.)
34947.42857142857
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It comes down to the way that python handles integer division.</p>
<p>If iether the numerator(top) or divisor(bottom) of your division is negative then python will round away from zero. A simple way to convince yourself of this is to compare two simpler fractions: <code>25/6</code> and <code>25/(-6)</code>.  These will yield 4 and -5 respectively. </p>
<p>In order to get the same results you could us a float ie 14.0 to shift to floating point arithmatic.</p>
<p>If you are interested in more of the mathematics this seemed to be a pretty good article:
<a href="http://python-history.blogspot.co.nz/2010/08/why-pythons-integer-division-floors.html" rel="nofollow">http://python-history.blogspot.co.nz/2010/08/why-pythons-integer-division-floors.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned earlier python division and rounding seems issue
Here is how to fix it</p>
<pre><code>In [10]: int((111 - (111 + 2*17)*3375)/(-14.0))
Out[10]: 34947

In [11]: int((111 - (111 + 2*17)*3375)/(14.0)*-1 )
Out[11]: 34947
</code></pre>
</div>
<span class="comment-copy">please post what you actually entered....<code>(14)-1</code> is 13 ...</span>
<span class="comment-copy">It is worth noting that in Python 3 <code>//</code> means "integer division" and <code>/</code> means "floating point division."</span>
<span class="comment-copy">@maxywb Yes, I'd say "floor division" and just "division" (they are called so in the documentation I link to, FWIW). Both exist in Python 2. But the division behaves differently on integers in 2.x and 3.x.</span>
<span class="comment-copy">Well, it's more accurate to say that the result is always rounded toward negative infinity (not that it's "different" for negative or positive results).</span>
