<div class="post-text" itemprop="text">
<p>NumPy proposes a way to get the index of the maximum value of an array via <code>np.argmax</code>.</p>
<p>I would like a similar thing, but returning the indexes of the <code>N</code> maximum values.</p>
<p>For instance, if I have an array, <code>[1, 3, 2, 4, 5]</code>, <code>function(array, n=3)</code> would return the indices <code>[4, 3, 1]</code> which correspond to the elements <code>[5, 4, 3]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest I've been able to come up with is:</p>
<pre><code>In [1]: import numpy as np

In [2]: arr = np.array([1, 3, 2, 4, 5])

In [3]: arr.argsort()[-3:][::-1]
Out[3]: array([4, 3, 1])
</code></pre>
<p>This involves a complete sort of the array. I wonder if <code>numpy</code> provides a built-in way to do a partial sort; so far I haven't been able to find one.</p>
<p>If this solution turns out to be too slow (especially for small <code>n</code>), it may be worth looking at coding something up in <a href="http://cython.org/">Cython</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Newer NumPy versions (1.8 and up) have a function called <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.argpartition.html" rel="noreferrer"><code>argpartition</code></a> for this. To get the indices of the four largest elements, do</p>
<pre><code>&gt;&gt;&gt; a = np.array([9, 4, 4, 3, 3, 9, 0, 4, 6, 0])
&gt;&gt;&gt; a
array([9, 4, 4, 3, 3, 9, 0, 4, 6, 0])
&gt;&gt;&gt; ind = np.argpartition(a, -4)[-4:]
&gt;&gt;&gt; ind
array([1, 5, 8, 0])
&gt;&gt;&gt; a[ind]
array([4, 9, 6, 9])
</code></pre>
<p>Unlike <code>argsort</code>, this function runs in linear time in the worst case, but the returned indices are not sorted, as can be seen from the result of evaluating <code>a[ind]</code>. If you need that too, sort them afterwards:</p>
<pre><code>&gt;&gt;&gt; ind[np.argsort(a[ind])]
array([1, 8, 5, 0])
</code></pre>
<p>To get the top-<em>k</em> elements in sorted order in this way takes O(<em>n</em> + <em>k</em> log <em>k</em>) time.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simpler yet:</p>
<pre><code>idx = (-arr).argsort()[:n]
</code></pre>
<p>where <em>n</em> is the number of maximum values.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use:</p>
<pre><code>&gt;&gt;&gt; import heapq
&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.array([1, 3, 2, 4, 5])
&gt;&gt;&gt; heapq.nlargest(3, range(len(a)), a.take)
[4, 3, 1]
</code></pre>
<p>For regular Python lists:</p>
<pre><code>&gt;&gt;&gt; a = [1, 3, 2, 4, 5]
&gt;&gt;&gt; heapq.nlargest(3, range(len(a)), a.__getitem__)
[4, 3, 1]
</code></pre>
<p>If you use Python 2, use <code>xrange</code> instead of <code>range</code>.</p>
<p>Source: <em><a href="http://docs.python.org/3/library/heapq.html" rel="nofollow noreferrer">heapq â€” Heap queue algorithm</a></em></p>
</div>
<div class="post-text" itemprop="text">
<p>If you happen to be working with a multidimensional array then you'll need to flatten and unravel the indices:</p>
<pre><code>def largest_indices(ary, n):
    """Returns the n largest indices from a numpy array."""
    flat = ary.flatten()
    indices = np.argpartition(flat, -n)[-n:]
    indices = indices[np.argsort(-flat[indices])]
    return np.unravel_index(indices, ary.shape)
</code></pre>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; xs = np.sin(np.arange(9)).reshape((3, 3))
&gt;&gt;&gt; xs
array([[ 0.        ,  0.84147098,  0.90929743],
       [ 0.14112001, -0.7568025 , -0.95892427],
       [-0.2794155 ,  0.6569866 ,  0.98935825]])
&gt;&gt;&gt; largest_indices(xs, 3)
(array([2, 0, 0]), array([2, 2, 1]))
&gt;&gt;&gt; xs[largest_indices(xs, 3)]
array([ 0.98935825,  0.90929743,  0.84147098])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't care about the <em>order</em> of the K-th largest elements you can use <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.argpartition.html" rel="nofollow noreferrer"><code>argpartition</code></a>, which should perform better than a full sort through <code>argsort</code>.</p>
<pre><code>K = 4 # We want the indices of the four largest values
a = np.array([0, 8, 0, 4, 5, 8, 8, 0, 4, 2])
np.argpartition(a,-K)[-K:]
array([4, 1, 5, 6])
</code></pre>
<p>Credits go to <a href="https://stackoverflow.com/questions/34226400/find-the-k-smallest-values-of-a-numpy-array">this question</a>.</p>
<p>I ran a few tests and it looks like <code>argpartition</code> outperforms <code>argsort</code> as the size of the array and the value of K increase.</p>
</div>
<div class="post-text" itemprop="text">
<p>For multidimensional arrays you can use the <code>axis</code> keyword in order to apply the partitioning along the expected axis.</p>
<pre><code># For a 2D array
indices = np.argpartition(arr, -N, axis=1)[:, -N:]
</code></pre>
<p>And for grabbing the items:</p>
<pre><code>x = arr.shape[0]
arr[np.repeat(np.arange(x), N), indices.ravel()].reshape(x, N)
</code></pre>
<p>But note that this won't return a sorted result. In that case you can use <code>np.argsort()</code> along the intended axis:</p>
<pre><code>indices = np.argsort(arr, axis=1)[:, -N:]

# Result
x = arr.shape[0]
arr[np.repeat(np.arange(x), N), indices.ravel()].reshape(x, N)
</code></pre>
<p>Here is an example:</p>
<pre><code>In [42]: a = np.random.randint(0, 20, (10, 10))

In [44]: a
Out[44]:
array([[ 7, 11, 12,  0,  2,  3,  4, 10,  6, 10],
       [16, 16,  4,  3, 18,  5, 10,  4, 14,  9],
       [ 2,  9, 15, 12, 18,  3, 13, 11,  5, 10],
       [14,  0,  9, 11,  1,  4,  9, 19, 18, 12],
       [ 0, 10,  5, 15,  9, 18,  5,  2, 16, 19],
       [14, 19,  3, 11, 13, 11, 13, 11,  1, 14],
       [ 7, 15, 18,  6,  5, 13,  1,  7,  9, 19],
       [11, 17, 11, 16, 14,  3, 16,  1, 12, 19],
       [ 2,  4, 14,  8,  6,  9, 14,  9,  1,  5],
       [ 1, 10, 15,  0,  1,  9, 18,  2,  2, 12]])

In [45]: np.argpartition(a, np.argmin(a, axis=0))[:, 1:] # 1 is because the first item is the minimum one.
Out[45]:
array([[4, 5, 6, 8, 0, 7, 9, 1, 2],
       [2, 7, 5, 9, 6, 8, 1, 0, 4],
       [5, 8, 1, 9, 7, 3, 6, 2, 4],
       [4, 5, 2, 6, 3, 9, 0, 8, 7],
       [7, 2, 6, 4, 1, 3, 8, 5, 9],
       [2, 3, 5, 7, 6, 4, 0, 9, 1],
       [4, 3, 0, 7, 8, 5, 1, 2, 9],
       [5, 2, 0, 8, 4, 6, 3, 1, 9],
       [0, 1, 9, 4, 3, 7, 5, 2, 6],
       [0, 4, 7, 8, 5, 1, 9, 2, 6]])

In [46]: np.argpartition(a, np.argmin(a, axis=0))[:, -3:]
Out[46]:
array([[9, 1, 2],
       [1, 0, 4],
       [6, 2, 4],
       [0, 8, 7],
       [8, 5, 9],
       [0, 9, 1],
       [1, 2, 9],
       [3, 1, 9],
       [5, 2, 6],
       [9, 2, 6]])

In [89]: a[np.repeat(np.arange(x), 3), ind.ravel()].reshape(x, 3)
Out[89]:
array([[10, 11, 12],
       [16, 16, 18],
       [13, 15, 18],
       [14, 18, 19],
       [16, 18, 19],
       [14, 14, 19],
       [15, 18, 19],
       [16, 17, 19],
       [ 9, 14, 14],
       [12, 15, 18]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will be faster than a full sort depending on the size of your original array and the size of your selection:</p>
<pre><code>&gt;&gt;&gt; A = np.random.randint(0,10,10)
&gt;&gt;&gt; A
array([5, 1, 5, 5, 2, 3, 2, 4, 1, 0])
&gt;&gt;&gt; B = np.zeros(3, int)
&gt;&gt;&gt; for i in xrange(3):
...     idx = np.argmax(A)
...     B[i]=idx; A[idx]=0 #something smaller than A.min()
...     
&gt;&gt;&gt; B
array([0, 2, 3])
</code></pre>
<p>It, of course, involves tampering with your original array.  Which you could fix (if needed) by making a copy or replacing back the original values.  ...whichever is cheaper for your use case.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://pypi.python.org/pypi/Bottleneck" rel="nofollow"><code>bottleneck</code></a> has a partial sort function, if the expense of sorting the entire array just to get the N largest values is too great.</p>
<p><sub>I know nothing about this module; I just googled <code>numpy partial sort</code>.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>Use:</p>
<pre><code>from operator import itemgetter
from heapq import nlargest
result = nlargest(N, enumerate(your_list), itemgetter(1))
</code></pre>
<p>Now the <code>result</code> list would contain <strong>N</strong> tuples (<code>index</code>, <code>value</code>) where <code>value</code> is maximized.</p>
</div>
<div class="post-text" itemprop="text">
<p>Method <code>np.argpartition</code> only returns the k largest indices, performs a local sort, and is faster than <code>np.argsort</code>(performing a full sort) when array is quite large. But the returned indices are <strong>NOT in ascending/descending order</strong>. Let's say with an example:</p>
<p><a href="https://i.stack.imgur.com/bQ1KH.png" rel="nofollow noreferrer"><img alt="Enter image description here" src="https://i.stack.imgur.com/bQ1KH.png"/></a></p>
<p>We can see that if you want a strict ascending order top k indices, <code>np.argpartition</code> won't return what you want.</p>
<p>Apart from doing a sort manually after np.argpartition, my solution is to use PyTorch, <a href="http://pytorch.org/docs/0.2.0/torch.html?highlight=topk#torch.topk" rel="nofollow noreferrer"><code>torch.topk</code></a>, a tool for neural network construction, providing NumPy-like APIs with both CPU and GPU support. It's as fast as NumPy with MKL, and offers a GPU boost if you need large matrix/vector calculations.</p>
<p>Strict ascend/descend top k indices code will be:</p>
<p><a href="https://i.stack.imgur.com/VmSg9.png" rel="nofollow noreferrer"><img alt="Enter image description here" src="https://i.stack.imgur.com/VmSg9.png"/></a></p>
<p>Note that <a href="http://pytorch.org/docs/0.2.0/torch.html?highlight=topk#torch.topk" rel="nofollow noreferrer"><code>torch.topk</code></a> accepts a torch tensor, and returns both top k values and top k indices in type <code>torch.Tensor</code>. Similar with np, torch.topk also accepts an axis argument so that you can handle multi-dimensional arrays/tensors.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use:</p>
<pre><code>def max_indices(arr, k):
    '''
    Returns the indices of the k first largest elements of arr
    (in descending order in values)
    '''
    assert k &lt;= arr.size, 'k should be smaller or equal to the array size'
    arr_ = arr.astype(float)  # make a copy of arr
    max_idxs = []
    for _ in range(k):
        max_element = np.max(arr_)
        if np.isinf(max_element):
            break
        else:
            idx = np.where(arr_ == max_element)
        max_idxs.append(idx)
        arr_[idx] = -np.inf
    return max_idxs
</code></pre>
<p>It also works with 2D arrays. For example,</p>
<pre><code>In [0]: A = np.array([[ 0.51845014,  0.72528114],
                     [ 0.88421561,  0.18798661],
                     [ 0.89832036,  0.19448609],
                     [ 0.89832036,  0.19448609]])
In [1]: max_indices(A, 8)
Out[1]:
    [(array([2, 3], dtype=int64), array([0, 0], dtype=int64)),
     (array([1], dtype=int64), array([0], dtype=int64)),
     (array([0], dtype=int64), array([1], dtype=int64)),
     (array([0], dtype=int64), array([0], dtype=int64)),
     (array([2, 3], dtype=int64), array([1, 1], dtype=int64)),
     (array([1], dtype=int64), array([1], dtype=int64))]

In [2]: A[max_indices(A, 8)[0]][0]
Out[2]: array([ 0.89832036])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following is a very easy way to see the maximum elements and its positions. Here <code>axis</code> is the domain; <code>axis</code> = 0 means column wise maximum number and <code>axis</code> = 1 means row wise max number for the 2D case. And for higher dimensions it depends upon you.</p>
<pre><code>M = np.random.random((3, 4))
print(M)
print(M.max(axis=1), M.argmax(axis=1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found it most intuitive to use <code>np.unique</code>. </p>
<p>The idea is, that the unique method returns the indices of the input values. Then from the max unique value and the indicies, the position of the original values can be recreated.</p>
<pre><code>multi_max = [1,1,2,2,4,0,0,4]
uniques, idx = np.unique(multi_max, return_inverse=True)
print np.squeeze(np.argwhere(idx == np.argmax(uniques)))
&gt;&gt; [4 7]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the most time efficiency way is manually iterate through the array and keep a k-size min-heap, as other people have mentioned.</p>
<p>And I also come up with a brute force approach:</p>
<pre><code>top_k_index_list = [ ]
for i in range(k):
    top_k_index_list.append(np.argmax(my_array))
    my_array[top_k_index_list[-1]] = -float('inf')
</code></pre>
<p>Set the largest element to a large negative value after you use argmax to get its index. And then the next call of argmax will return the second largest element.
And you can log the original value of these elements and recover them if you want.</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/5807047/pythonnumpy-efficient-way-to-take-the-min-max-n-values-and-indices-from-a-matri">python+numpy: efficient way to take the min/max n values and indices from a matrix</a></span>
<span class="comment-copy">Your question is not really well defined. For example, what would the indices (you expect) to be for <code>array([5, 1, 5, 5, 2, 3, 2, 4, 1, 5])</code>, whit <code>n=  3</code>? Which one of all the alternatives, like <code>[0, 2, 3]</code>, <code>[0, 2, 9]</code>, <code>...</code> would be the correct one? Please elaborate more on your specific requirements. Thanks</span>
<span class="comment-copy">@eat, I don't really care about which one is supposed to be returned in this specific case. Even if it seem logical to return the first one encountered, that's not a requirement for me.</span>
<span class="comment-copy"><code>argsort</code> might be a viable alternative if you do not care about the order of the returned indeces. See my answer below.</span>
<span class="comment-copy">Could line 3 be written equivalently as <code>arr.argsort()[-1:-4:-1]</code>?  I've tried it in interpreter and it comes up with the same result, but I'm wondering if it's not broken by some example.</span>
<span class="comment-copy">@abroekhof Yes that should be equivalent for any list or array.  Alternatively, this could be done without the reversal by using <code>np.argsort(-arr)[:3]</code>, which I find more readable and to the point.</span>
<span class="comment-copy">what does [::-1] mean? @NPE</span>
<span class="comment-copy">@1a1a11a it means reverse an array (literally, takes a copy of an array from unconstrained min to unconstrained max in a reversed order)</span>
<span class="comment-copy"><code>arr.argsort()[::-1][:n]</code> is better because it returns empty for <code>n=0</code> instead of the full array</span>
<span class="comment-copy">Actually it has to be O(n lg k) time. Cannot imagine how O(n + k lg k) can be</span>
<span class="comment-copy">@varela <code>argpartition</code> runs in linear time, O(n), using the <a href="https://en.wikipedia.org/wiki/Introselect" rel="nofollow noreferrer">introselect</a> algorithm. The subsequent sort only handles k elements, so that runs in O(k log k).</span>
<span class="comment-copy">If anybody is wondering how exactly <code>np.argpartition</code> and its sister algorithm <code>np.partition</code> work there is a more detailed explanation in the linked question: <a href="http://stackoverflow.com/questions/10337533/a-fast-way-to-find-the-largest-n-elements-in-an-numpy-array?lq=1" title="a fast way to find the largest n elements in an numpy array">stackoverflow.com/questions/10337533/â€¦</a></span>
<span class="comment-copy">@FredFoo: why did you use -4? did you do that to start backward?(since k being positive or negative works the same for me! it only prints the smallest numbers first!</span>
<span class="comment-copy">@LKT use <code>a=np.array([9, 4, 4, 3, 3, 9, 0, 4, 6, 0])</code> because normal python lists do not support indexing by lists, unlike <code>np.array</code></span>
<span class="comment-copy">Can this be done for a 2d array? If not, do you perhaps know how?</span>
<span class="comment-copy">@AndrewHundt : simply use (-arr).argsort(axis=-1)[:, :n]</span>
<span class="comment-copy">similar would be <code>arr[arr.argsort()[-n:]]</code> instead of negating the array, just take a slice of the last n elements</span>
<span class="comment-copy">There's no need of a loop at all here: <code>heapq.nlargest(3, xrange(len(a)), a.take)</code>. For Python lists we can use <code>.__getitem__</code> instead of <code>.take</code>.</span>
<span class="comment-copy">For n-dimensional arrays <code>A</code> in general: <code>heapq.nlargest(3, range(len(A.ravel())), A.ravel().take)</code>. (I hope this only operates on views, see also (<code>ravel vs flatten</code>](<a href="https://stackoverflow.com/a/28930580/603003">stackoverflow.com/a/28930580/603003</a>)).</span>
<span class="comment-copy">FWIW, your solution won't provide unambiguous solution in all situations. OP should describe how to handle these unambiguous cases. Thanks</span>
<span class="comment-copy">@eat  The OP's question is a little ambiguous.  An implementation, however, is not really open to interpretation. :)  The OP should simply refer to the definition of np.argmax <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.argmax.html" rel="nofollow noreferrer">docs.scipy.org/doc/numpy/reference/generated/numpy.argmax.html</a> to be sure this specific solution meets the requirements.  It's possible that any solution meeting the OP's stated reqirement is acceptable..</span>
<span class="comment-copy">Well, one might consider the implementation of <code>argmax(.)</code> to be unambiguous as well. (IMHO it tries to follow some kind of short circuiting logic, but unfortunately fails to provide universally acceptable behavior). Thanks</span>
<span class="comment-copy">Works good, but gives more results if you have duplicate (maximum) values in your array A. I would expect exactly k results but in case of duplicate values, you get more than k results.</span>
<span class="comment-copy">I slightly modified the code. The list of indices that is returned has length equal exactly to k. If you have duplicates, they are grouped into a single tuple.</span>
<span class="comment-copy">I used this link <a href="https://jakevdp.github.io/PythonDataScienceHandbook/02.04-computation-on-arrays-aggregates.html" rel="nofollow noreferrer">jakevdp.github.io/PythonDataScienceHandbook/â€¦</a></span>
