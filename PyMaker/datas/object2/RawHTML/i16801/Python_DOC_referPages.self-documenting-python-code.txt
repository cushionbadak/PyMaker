<div class="post-text" itemprop="text">
<p>I have the following piece of Python:</p>
<pre><code>class CollectorGUI(Gtk.Window):
    def __init__(self, prefill, flags, data_to_return):
        """prefill should be an instance of the Prefill class"""
        self.prefill = prefill
        self.flags = flags
        self.data_to_return = data_to_return
    ......
</code></pre>
<p>My question is: (1) how to get rid of the documentation string? I want my code to be self-documenting; (2) how to get rid of these three lines:</p>
<pre><code>self.prefill = prefill
self.flags = flags
self.data_to_return = data_to_return
</code></pre>
<p>Is there an abbreviation?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>Prefill</code> requirement can be documented in the method signature using <a href="http://www.python.org/dev/peps/pep-3107/" rel="nofollow noreferrer">function annotations</a>:</p>
<pre><code>class CollectorGUI(Gtk.Window):
    def __init__(self, prefill: Prefill, flags, data_to_return):
</code></pre>
<p>Annotations are discoverable at runtime, just like the docstring is. Annotations are not enforced (they are meant as a more generic stepping stone for different use cases) but are immediately obvious in the signature.</p>
<p>You can then optionally enforce it explicitly by <a href="https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement" rel="nofollow noreferrer">asserting the type</a>:</p>
<pre><code>assert isinstance(prefill, Prefill), 'prefill must be an instance of Prefill'
</code></pre>
<p>As for auto-setting your attributes from the function arguments, that's answered elsewhere: <a href="https://stackoverflow.com/questions/3652851/what-is-the-best-way-to-do-automatic-attribute-assignment-in-python-and-is-it-a">What is the best way to do automatic attribute assignment in Python, and is it a good idea?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>While you could use inspect to automatically create attributes from the arguments in the method's signature, it would obfuscate the perfectly readable code you have now.
One look at the constructor tells me that the class at least has the attributes prefill, flags, and data_to_return.</p>
<p>Making explicit code implicit is often not a good idea.</p>
<p>But if you insist:</p>
<pre><code>import inspect


class C(object):

  def __init__(self, a, b, c):
      spec = inspect.getargspec(getattr(C, "__init__"))
      for arg in spec.args[1:]:
        setattr(self, arg, locals()[arg])



c = C(1, 2, 3)

print c.a
print c.b
print c.c
</code></pre>
</div>
<span class="comment-copy">That's <i>two</i> questions, at least one of which is a dupe.</span>
<span class="comment-copy"><i>"how to get rid of the documentation string?"</i> Did it give an error or something when you tried simply deleting it?</span>
<span class="comment-copy"><a href="http://stackoverflow.com/q/3652851">What is the best way to do automatic attribute assignment in Python, and is it a good idea?</a></span>
<span class="comment-copy">@Kevin: the OP means that they want it to be clear from the method signature that <code>prefill</code> should be certain type, rather than to have to document it. The answer is: use annotations.</span>
<span class="comment-copy">@MartijnPieters Annotations then?</span>
<span class="comment-copy">Yes, that works. Thank you. But it seems that there is an even simpler way, as suggested by Martijn Peters.</span>
