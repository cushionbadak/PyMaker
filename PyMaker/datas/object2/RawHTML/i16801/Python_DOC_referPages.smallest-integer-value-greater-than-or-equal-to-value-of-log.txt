<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2356501/how-do-you-round-up-a-number-in-python">How do you round UP a number in Python?</a>
<span class="question-originals-answer-count">
                    24 answers
                </span>
</li>
</ul>
</div>
<p>I have some integer count suppose '51' and I want represent that much of integers in binary number. Here I need to do <code>log(51)</code> so i get some float value as <code>3.93182563272</code>. But I want it in some integer format as <code>4</code> which could be used to represent 51 integers.
Log value can be calculated as</p>
<pre><code>import math
math.log(51)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want the number of binary digits, that would be base <code>2</code>, whereas <a href="https://docs.python.org/2/library/math.html#math.log" rel="nofollow"><code>math.log</code></a> by default returns the <em>natural logarithm</em> (base <code>e</code>). A second argument can be used to specify an alternative base. Then you can use <a href="https://docs.python.org/2/library/math.html#math.ceil" rel="nofollow"><code>math.ceil</code></a> to round up the number.</p>
<pre><code>math.ceil(math.log(51, 2))
6.0
</code></pre>
<p>You haven't specified a python version but if you have python 3, (thanks @delnan), you can use <a href="https://docs.python.org/3/library/math.html#math.log2" rel="nofollow"><code>math.log2</code></a> instead, which should be more accurate:</p>
<pre><code>math.ceil(math.log2(51))
6.0
</code></pre>
<p><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.log2.html" rel="nofollow"><code>numpy</code> also has a log2 method</a> (but is probably overkill for this application).</p>
<p><code>math.ceil</code> actually returns a float, so if you want an integer you can wrap the expression in <code>int</code>:</p>
<pre><code>int(math.ceil(math.log(51, 2)))
6
</code></pre>
<p>By the way, there is also the function <a href="https://docs.python.org/2/library/functions.html#bin" rel="nofollow"><code>bin</code></a> which you might want to look at. It returns a string containing the binary representation of an integer:</p>
<pre><code>bin(51)
'0b110011'
</code></pre>
<hr/>
<p>...but if you don't want to mess around with any of that (thanks again @delnan), you can just use <a href="https://docs.python.org/2/library/stdtypes.html#int.bit_length" rel="nofollow"><code>bit_length</code></a> instead:</p>
<pre><code>(51).bit_length()    
6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the ceiling "round up" function before you cast it to an int:</p>
<pre><code>math.ceil(math.log(51)) # round up
</code></pre>
<p>You should also have a look at:</p>
<pre><code>math.floor() # round down
math.round()
</code></pre>
<p>If you need to save it as a integer type you can cast it to that type:</p>
<pre><code>int()
</code></pre>
</div>
<span class="comment-copy">You mean you want to round up the float to the nearest integer?</span>
<span class="comment-copy">Logarithm in which base? Since you mention binary numbers, I suspect base 2 log. In that case, be aware that <code>math.log</code> doesn't do that, it uses base e (natural logarithm).</span>
<span class="comment-copy">FYI <code>math.log(x, 2)</code> is less accurate than <code>math.log2(x)</code>, and <code>int(ceil(log2(x))</code> is in many ways worse than <code>x.bit_length()</code> if <code>x</code> is an integer.</span>
<span class="comment-copy">@delnan I don't have math.log2 (python 2.7.3). I notice that numpy has a log2 method, is that what you mean?</span>
<span class="comment-copy">No, I assumed Python 3's <code>math</code> and <code>int</code>. I rarely work with 2.x these days so I sometimes forget what's backported and what's not.</span>
<span class="comment-copy">@delnan thanks for your contributions, I've edited so that hopefully all of it has been included.</span>
<span class="comment-copy">@TomFenech thank you. I am using python 2.7.</span>
<span class="comment-copy">Note that <code>math.log</code> by default gives the natural logarithm, which is probably not what the OP wants.</span>
