<div class="post-text" itemprop="text">
<pre><code>string = "Hello 12345 World"
numbers = [x for x in string if x.isdigit()]
print numbers

&gt;&gt; ['1', '2', '3', '4', '5']
</code></pre>
<p>Another example:</p>
<pre><code>&gt;&gt;&gt; noprimes = [j for i in range(2, 8) for j in range(i*2, 50, i)]
&gt;&gt;&gt; primes = [x for x in range(2, 50) if x not in noprimes]
&gt;&gt;&gt; print primes
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]
</code></pre>
<p>What is confusing me is the <code>x for x</code> part. I've seen it a few places before but unsure what it means. Could someone provide more examples and explanation for these examples?</p>
</div>
<div class="post-text" itemprop="text">
<p>These constructs are called <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>.</p>
<p><strong>Simple example</strong></p>
<p><code>[x for x in iterable]</code> literally means "for every element in iterable, add that element to newly created list" and is equivalent to </p>
<pre><code>new_list = []
for x in iterable:
    new_list.append(x)
</code></pre>
<p>Line-by-line explanation:</p>
<pre>
Loop                             List comprehension
--------------------------------------------------------------------------
new_list = []                    <b>[</b>x for x in iterable<b>]</b>
for x in iterable:               [x <b>for x in iterable</b>]
    new_list.append(x)           [<b>x</b> for x in iterable]
</pre>
<p><strong>A bit more complex example</strong></p>
<p><code>[int(x) for x in string if x.isdigit()]</code> can be read as "for every element in iterable, add the result of applying <code>int</code> to the element to newly created list if <code>x.isdigit()</code>".</p>
<p>Line-by-line explanation:</p>
<pre>
Loop                             List comprehension
-------------------------------------------------------------------------
numbers = []                     <b>[</b>int(x) for x in string if x.isdigit()<b>]</b>
for x in string:                 [int(x) <b>for x in string </b>if x.isdigit()]
    if x.isdigit():              [int(x) for x in string <b>if x.isdigit()</b>]
        numbers.append(int(x))   [<b>int(x)</b> for x in string if x.isdigit()]
</pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><code>numbers = [x for x in string if x.isdigit()]</code> means itemize each x in string if x is a digit</p>
</blockquote>
<p>It translates to</p>
<pre><code>   numbers = []
    for x in string:
        if x.isdigit()
           numbers.append(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>it's called a <a href="https://docs.python.org/3.4/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>, which is used to build a list using an expression instead of more than 3 statements.</p>
<pre><code>numbers = [x for x in string if x.isdigit()]
</code></pre>
<p>is equivalent to the following:</p>
<pre><code>numbers = []
for x in string:
    if x.isdigit():
        numbers.append(x)
</code></pre>
<p>then</p>
<pre><code>noprimes = [j for i in range(2, 8) for j in range(i*2, 50, i)]
</code></pre>
<p>is equivalent to the following:</p>
<pre><code>noprimes = []
for i in range(2, 8): 
    for j in range(i*2, 50, i):
        noprimes.append(j)
</code></pre>
<p>and</p>
<pre><code>primes = [x for x in range(2, 50) if x not in noprimes]
</code></pre>
<p>is equivalent to the following:</p>
<pre><code>primes = []
for x in range(2, 50):
    if x not in noprimes
        primes.append(x)
</code></pre>
<p>but written as a one liner.</p>
<hr/>
<p>N.B.: You can also build a generator:</p>
<pre><code>(x for x in range(0, 10))
</code></pre>
<p>a set:</p>
<pre><code>{x for x in range(0, 10)}
</code></pre>
<p>and a dictionary:</p>
<pre><code>{(x, x) for x in range(0, 10)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>numbers = [x for x in string if x.isdigit()]
</code></pre>
<p>The list comprehension above is similar to the following traditional code:</p>
<pre><code>numbers = []

for x in string:
    if x.isdigit():
        numbers.append(x)
</code></pre>
</div>
