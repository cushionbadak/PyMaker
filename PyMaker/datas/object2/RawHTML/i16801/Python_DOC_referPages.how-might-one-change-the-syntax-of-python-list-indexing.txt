<div class="post-text" itemprop="text">
<p>After asking <a href="https://stackoverflow.com/questions/23753569/function-returning-reference-to-itself-python/">this question</a>, it received a comment about how you could do something like this:</p>
<pre><code>&gt;&gt;&gt; def a(n):
        print(n)
        return a
&gt;&gt;&gt; b = a(3)(4)(5)
3
4
5
</code></pre>
<p>Is it possible to use this or similar concepts to make it possible to index lists like <code>my_list(n)</code> instead of <code>my_list[n]</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You'd have to use a custom class, and give it a <a href="https://docs.python.org/3/reference/datamodel.html#object.__call__" rel="nofollow"><code>__call__</code> special method</a> to make it callable. A subclass of <code>list</code> would do nicely here:</p>
<pre><code>class CallableList(list):
    def __call__(self, item):
        return self[item]
</code></pre>
<p>You cannot use this to <em>assign</em> to an index, however, only item <em>access</em> works. Slicing would require you to use to create a <code>slice()</code> object:</p>
<pre><code>a = CallableList([1, 2, 3])
a(2)
a(slice(None, 2, None))

nested = CallableList([1, 2, CallableList([4, 5, 6])])
nested(2)(-1)
</code></pre>
<p>For anything more, you'd have to create a custom Python syntax parser to build an AST, then compile to bytecode from there.</p>
</div>
<div class="post-text" itemprop="text">
<p>the parentheses in my_list() are treated as a function call. If you want, you could write your own class that wraps a list and overwrite the <strong>call</strong> method to index into the list.</p>
<pre><code>class MyList(object):

    def __init__(self, alist):
        self._list = alist

    def __call__(self, index):
        return self._list[index]

&gt;&gt;&gt; mylist = MyList(['a','b','c','d','e','f'])
&gt;&gt;&gt; mylist(3)
'd'
&gt;&gt;&gt; mylist(4)
'e'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could create a function that returns a <a href="https://docs.python.org/2/tutorial/controlflow.html#lambda-expressions" rel="nofollow">lambda</a> function:</p>
<pre><code>def make_callable(some_list):
    return lambda x: some_list[x]

original_list = [ 1, 2, 3, 4 ]
callable_list = make_callable(original_list)

print(callable_list(1)) # Prints 2
</code></pre>
</div>
<span class="comment-copy">You ask good questions. I like your curiosity</span>
<span class="comment-copy">You might find <a href="http://stackoverflow.com/questions/20831647/is-it-possible-to-add-some-new-syntax-in-javascript/20831768#20831768">this answer</a> interesting.</span>
<span class="comment-copy">How would we access a 2d list using <code>my_matrix(x)(y)</code> instead of <code>my_matrix[x][y]</code>?</span>
<span class="comment-copy">@Scorpion_God: You'd store a <code>CallableList()</code> object in a <code>CallableList()</code>, just like you'd store a regular list inside another to get a matrix.</span>
