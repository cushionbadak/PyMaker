<div class="post-text" itemprop="text">
<p>I'm trying to parse through an XML file and write the contents to a plain text file. I have the program working so far up until it hits an emoji character, then Python throws the following error:</p>
<pre><code>UnicodeEncodeError: 'charmap' codec can't encode characters in position 177-181: character maps to &lt;undefined&gt;
</code></pre>
<p>I went to the error location and found the following emojis in the XML file:</p>
<p><img alt="emoji" src="https://i.imgur.com/Y1q7Nwu.png"/></p>
<p>My question is how do either encode them to unicode or remove/ignore them completely when writing to file.</p>
<p>It outputs perfectly when I print() to the console, but throws an error when writing to file.</p>
<p>I have searched Google and here, but the only answers I am getting is that they are already encoded to unicode. Mine as you can see are, literals? I'm not sure if I'm saying that correctly.</p>
<p>Also the XML file I'm working with has the following format:</p>
<pre><code>&lt;?xml version='1.0' encoding='UTF-8' standalone='yes' ?&gt;
&lt;?xml-stylesheet type="text/xsl" href="sms.xsl"?&gt;
&lt;smses count="1"&gt;
  &lt;sms protocol="0" address="+00000000000" date="1346772606199" type="1" subject="null" body="Lorem ipsum dolor sit amet, consectetur adipisicing elit," toa="null" sc_toa="null" service_center="+00000000000" read="1" status="-1" locked="0" date_sent="1346772343000" readable_date="Sep 4, 2012 10:30:06 AM" contact_name="John Doe" /&gt;
&lt;/smses&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have two options:</p>
<ol>
<li><p>Pick an encoding that can handle Emoji codepoints. You've opened your file for writing either with the default codec (which depends on your system), or picked an explicit encoding that doesn't support the codepoints.</p>
<p>A UTF encoding would be able to handle the codepoints just fine; I'd pick UTF-8 here:</p>
<pre><code>with open(filename, 'w', encoding='utf8') as outfile:
    outfile.write(yourdata)
</code></pre></li>
<li><p>Set an error handling mode that either replaces codepoints your codec cannot handle with replacement characters, an escape sequence or ignores them altogether. See the <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow"><code>open()</code> function</a> <code>errors</code> argument:</p>
<blockquote>
<p><em>errors</em> is an optional string that specifies how encoding and decoding errors are to be handledâ€“this cannot be used in binary mode. A variety of standard error handlers are available, though any error handling name that has been registered with <code>codecs.register_error()</code> is also valid. The standard names are:</p>
<ul>
<li><code>'strict'</code> to raise a <code>ValueError</code> exception if there is an encoding error. The default value of <code>None</code> has the same effect.</li>
<li><code>'ignore'</code> ignores errors. Note that ignoring encoding errors can lead to data loss.</li>
<li><code>'replace'</code> causes a replacement marker (such as <code>'?'</code>) to be inserted where there is malformed data.</li>
<li><code>'surrogateescape'</code> will represent any incorrect bytes as code points in the Unicode Private Use Area ranging from U+DC80 to U+DCFF. These private code points will then be turned back into the same bytes when the <code>surrogateescape</code> error handler is used when writing data. This is useful for processing files in an unknown encoding.</li>
<li><code>'xmlcharrefreplace'</code> is only supported when writing to a file. Characters not supported by the encoding are replaced with the appropriate XML character reference <code>&amp;#nnn;</code>.</li>
<li><code>'backslashreplace'</code> (also only supported when writing) replaces unsupported characters with Pythonâ€™s backslashed escape sequences.</li>
</ul>
</blockquote>
<p>So opening the file with <code>errors='ignore'</code> will <em>not write Emoji codepoints</em> instead of raising an error:</p>
<pre><code>with open(filename, 'w', errors='ignore') as outfile:
    outfile.write(yourdata)
</code></pre></li>
</ol>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; a_ok = 'The U+1F44C OK HAND SIGN codepoint: \U0001F44C'
&gt;&gt;&gt; print(a_ok)
The U+1F44C OK HAND SIGN codepoint: ðŸ‘Œ
&gt;&gt;&gt; a_ok.encode('utf8')
b'The U+1F44C OK HAND SIGN codepoint: \xf0\x9f\x91\x8c'
&gt;&gt;&gt; a_ok.encode('cp1251', errors='ignore')
b'The U+1F44C OK HAND SIGN codepoint: '
&gt;&gt;&gt; a_ok.encode('cp1251', errors='replace')
b'The U+1F44C OK HAND SIGN codepoint: ?'
&gt;&gt;&gt; a_ok.encode('cp1251', errors='xmlcharrefreplace')
b'The U+1F44C OK HAND SIGN codepoint: &amp;#128076;'
&gt;&gt;&gt; a_ok.encode('cp1251', errors='backslashreplace')
b'The U+1F44C OK HAND SIGN codepoint: \\U0001f44c'
</code></pre>
<p>Note that the <code>'surrogateescape'</code> option has limited space and is really only useful for <em>decoding</em> a file with unknown encoding as best you can; it cannot handle Emoji in any case.</p>
</div>
<div class="post-text" itemprop="text">
<p>(Edit: This answer relevant to Python 2.x, not Python 3.x)</p>
<p>Currently you're writing unicode strings to the file with the default encoding, which doesn't support emoji (or, for that matter, a ton of characters that you probably really do want). You can instead write using the UTF-8 encoding, which supports all unicode characters.</p>
<p>Instead of doing <code>file.write( data )</code>, try <code>file.write( data.encode("utf-8") )</code>.</p>
</div>
<span class="comment-copy">Could you use <code>try:</code> and <code>except:</code> to catch the error?</span>
<span class="comment-copy">What code you use to write the output at the moment? Your chosen file encoding doesn't support the codepoints; you could pick a <i>different</i> encoding, or you can chose to handle the errors.</span>
<span class="comment-copy">I'd say that is not a bad proposal. Iterating through all the characters, and trying to write them.</span>
<span class="comment-copy">@RSerrao: There are <i>far better</i> ways of handling this than handling characters one by one.</span>
<span class="comment-copy">@MartijnPieters I am a novice Python programmer, so if you could enlighten me, I would be glad!</span>
<span class="comment-copy">Your first suggestions work perfectly first run through. Thank you! I have just started learning Python on my own after learning Java from college for a year.</span>
<span class="comment-copy">This is Python 3; file objects handle encoding. Which means you <i>do not want to write encoded bytes</i>.</span>
<span class="comment-copy">Ah, sorry, didn't realize it was python 3. Care to answer?</span>
<span class="comment-copy">I wanted the OP to give me how he's writing to a file, preferably.</span>
