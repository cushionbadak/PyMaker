<div class="post-text" itemprop="text">
<p>Pythonâ€™s <em>for</em> statement iterates over the items of any <em>sequence</em> (a <em>list</em> or a <em>string</em>).</p>
<p>But where does the <em>sequence</em> come from in below code?</p>
<pre><code>file=open('filename.txt','r')
for line in file:
    print line
</code></pre>
<p>Is this related to the <em><code>__iter__()</code></em> method?</p>
<p>Just some quote:</p>
<p><a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow">https://docs.python.org/3/glossary.html#term-iterable</a></p>
<blockquote>
<p>An object capable of returning its members one at a time. Examples of iterables include all sequence types (such as list, str, and tuple) and some non-sequence types like dict, file objects, and objects of any classes you define with an <code>__iter__()</code> or <code>__getitem__()</code> method. Iterables can be used in a for loop and in many other places where a sequence is needed (<code>zip()</code>, <code>map()</code>, ...). When an iterable object is passed as an argument to the built-in function <code>iter()</code>, it returns an iterator for the object. This iterator is good for one pass over the set of values. When using iterables, it is usually not necessary to call iter() or deal with iterator objects yourself. <strong>The for statement does that automatically for you, creating a temporary unnamed variable to hold the iterator for the duration of the loop.</strong> See also iterator, sequence, and generator.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Python's <a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow"><code>for</code> statement</a> iterates over the items of any <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow"><strong>iterable object</strong></a>, not just sequences:</p>
<blockquote>
<p>The <code>for</code> statement is used to iterate over the elements of a sequence (such as a string, tuple or list) or <strong>other iterable object</strong></p>
</blockquote>
<p>Iterables are objects that either have an <a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" rel="nofollow"><code>__iter__</code> method</a> or a <a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow"><code>__getitem__</code> method</a>.</p>
<p><code>file</code> objects implement an <code>__iter__</code> method; they also are <a href="https://docs.python.org/2/glossary.html#term-iterator" rel="nofollow"><em>iterator objects</em></a>, in that they have a <a href="https://docs.python.org/3/library/stdtypes.html#iterator.__next__" rel="nofollow"><code>__next__</code> method</a> (Python 3) or <a href="https://docs.python.org/2/library/stdtypes.html#iterator.next" rel="nofollow"><code>next</code> method</a> (Python 2), so all the <code>__iter__</code> method of a file object has to do is <code>return self</code>.</p>
<p>For Python 3, also see the <a href="https://docs.python.org/3/library/io.html#i-o-base-classes" rel="nofollow"><code>io.IOBase</code> documentation</a>:</p>
<blockquote>
<p><code>IOBase</code> (and its subclasses) supports the iterator protocol, meaning that an <code>IOBase</code> object can be iterated over yielding the lines in a stream.</p>
</blockquote>
</div>
<span class="comment-copy">The quote you included <i>answers your question</i> already. <code>iter()</code> is called on the file object. The file object returns <code>self</code> for that. What is not clear here?</span>
