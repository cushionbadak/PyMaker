<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/20688324/python-assign-values-to-list-elements-in-loop">python assign values to list elements in loop</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>Today I find an interesting fact, that I can't re-assign variable in a 'for loop', but why?</p>
<p>Here is my code:</p>
<pre><code>&gt;&gt;&gt; my_list = [1,2,3,4,5]
&gt;&gt;&gt; for i in my_list:
&gt;&gt;&gt;     if i &gt; 3:
&gt;&gt;&gt;        i = 'my_value'
&gt;&gt;&gt; my_list
[1, 2, 3, 4, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you loop over a list with <code>for i in my_list</code>, <code>i</code> isn't bound to a list cell on each iteration. It's bound to the object the list cell referred to. Assigning a new value to <code>i</code> binds <code>i</code> to a new object, but there's no link between <code>i</code> and the list that would cause the list cell to be affected.</p>
<p>An equivalent way to loop over a list would be</p>
<pre><code>for index in range(len(my_list)):
    i = my_list[index]
    whatever_loop_body()
</code></pre>
<p>Hopefully, it's clearer in this formulation that <code>i</code> is not an alias for the list cell. (Don't actually loop over lists like this.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Let me guess, you want to have a result like the following</p>
<pre><code>[1, 2, 3, 'my_value', 'my_value']
</code></pre>
<p>To do this, you need to do this:</p>
<pre><code>['my value' if i &gt; 3 else i for i in x]
</code></pre>
<h2>Update</h2>
<p>Why your code doesn't work? Because <code>i</code> is not a reference to an object but a primitive value assignment. <a href="https://stackoverflow.com/questions/11222440/python-variable-reference-assignment">Python variable reference assignment</a>.</p>
<h2>Update 2</h2>
<p>If the element of the list is an object rather than a primitive, then it seems that <code>i</code> become a reference to that object.</p>
<pre><code>class A:
    def __init__(self, val):
        self.value = val

my_list = [A(1), A(2),A(3),A(4),A(5)]
for i in my_list:
   if i.value &gt; 3:
       i.value = 'my_value'

print([i.value for i in my_list])
# [1, 2, 3, 'my_value', 'my_value']
</code></pre>
<h2>Update 3</h2>
<p>Please see some of the discussion in the comment below. In python, everything is an object. No primitive.</p>
<p>Ref: <a href="https://docs.python.org/3/reference/compound_stmts.html#for" rel="nofollow noreferrer">For Syntax</a></p>
</div>
<span class="comment-copy">What did you hope that <code>i = "foo"</code> would accomplish here? Terminate the loop? When the for loop continues it's next iteration (<i>NB: Iterators</i>) <code>i</code> will point to a new reference object of the next element in the iterator <code>[1, 2, 3, 4]</code>.</span>
<span class="comment-copy">-1 His question is <code>why?</code>, not <code>how?</code></span>
<span class="comment-copy">oh sorry, I misinterpret his question,. I'll rewrite my answer</span>
<span class="comment-copy"><code>i</code> <i>is</i> a reference, contrary to what youâ€™ve said.</span>
<span class="comment-copy">@KonradRudolph, Could you help me to verify if my second update, correct? If not, any suggestion.</span>
<span class="comment-copy">@Yeo In the second case, you are mutating.</span>
