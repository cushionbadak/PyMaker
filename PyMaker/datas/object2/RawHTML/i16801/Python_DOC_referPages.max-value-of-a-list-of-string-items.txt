<div class="post-text" itemprop="text">
<pre><code>Heroes =['Superman','Batman','Dudley Do-Right','Luke Skywalker']
max(Heroes)
'Superman'
</code></pre>
<p>Can someone please explain why the above result is 'Superman' not 'Dudley Do-Right'?</p>
<p><code>len(Heroes[0])</code> is 8</p>
<p><code>len(Heroes[2])</code> is 15</p>
<p>I'm confused.</p>
</div>
<div class="post-text" itemprop="text">
<p>Strings are compared by lexicographical ordering, not by length. <code>S</code> comes after <code>D</code> in the alphabet:</p>
<pre><code>&gt;&gt;&gt; 'Superman' &gt; 'Dudley Do-Right'
True
</code></pre>
<p>An inefficient way to replicate what <code>max()</code> does, would be to <em>sort</em> the input sequence and pick the last value for the result. So <code>[20, 10, 8, 15]</code>, when sorted, puts <code>20</code> last and that's what <code>max()</code> returns. Sorting the strings in <code>Heroes</code> results in <code>Superman</code> being listed last.</p>
<p>If you wanted to find the <em>longest</em> string, use the <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow"><code>key</code> argument to <code>max()</code></a>:</p>
<pre><code>max(Heroes, key=len)
</code></pre>
<p>Here, instead of comparing values in <code>Heroes</code> directly, <code>max()</code> compares the values by the return value of the <code>key</code> argument; now the value for which <code>len()</code> returns the largest value is returned as the maximum.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; Heroes = ['Superman', 'Batman', 'Dudley Do-Right', 'Luke Skywalker']
&gt;&gt;&gt; max(Heroes, key=len)
'Dudley Do-Right'
</code></pre>
</div>
<span class="comment-copy">I'm personally confused why <code>Batman</code> isn't the max.</span>
<span class="comment-copy">Oh, i did not know that as i'm an amateur. Thank you for your explanation. :)</span>
