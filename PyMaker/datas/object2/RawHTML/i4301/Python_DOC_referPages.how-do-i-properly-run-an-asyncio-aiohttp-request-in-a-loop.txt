<div class="post-text" itemprop="text">
<p>I am trying to request a bunch of URLs concurrently however the URLs are built from a list. Currently I am looping over the list and (I think) adding them to the queue as it happens. It is definitely 10x faster than requests.get, however I am not sure I am doing it correctly and so it can be optimized. I profiled it and noticing it is still locking 90% of the time after the concurrent requests are done i.e start -&gt; 10+ concurrent requests -&gt; lock for 5 seconds or so -&gt; done</p>
<p>Additionally, this code results in a <code>Unclosed client session</code> message at the end. Any idea why? Pretty sure this is using a context manager properly. </p>
<p>I have searched and not found this exact question</p>
<pre><code> import signal
 import sys
 import asyncio
 import aiohttp
 import json
 import requests

 lists = ['eth', 'btc', 'xmr', 'req', 'xlm', 'etc', 'omg', 'neo', 'btc', 'xmr', 'req', 'xlm', 'etc', 'omg', 'neo']

 loop = asyncio.get_event_loop()
 client = aiohttp.ClientSession(loop=loop)

 async def fetch(client, url):
     async with client.get(url) as resp:
         assert resp.status == 200
         return await resp.text()

 async def main(loop=loop, url=None):
     async with aiohttp.ClientSession(loop=loop) as client:
         html = await fetch(client, url)
         print(html)

 def signal_handler(signal, frame):
     loop.stop()
     client.close()
     sys.exit(0)

 signal.signal(signal.SIGINT, signal_handler)
 tasks = []
 for item in lists:
     url = "{url}/{endpoint}/{coin_name}".format(
                     url='https://coincap.io',
                     endpoint='page',
                     coin_name=item.upper()
                 )
     print(url)
     tasks.append(
         asyncio.ensure_future(main(url=url))
     )

 loop.run_until_complete(asyncio.gather(*tasks))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Looks like what you have works, but as you thought you're not doing everything quite correctly:</p>
<ul>
<li>you create a client which you never use, and don't close correctly (causing the <code>Unclosed client session</code>) warning</li>
<li>you're creating a client for each request which is much less efficient than reusing a client.</li>
<li>you're not running most of your code in a running event loop.</li>
<li>the signal handler as you have it is not necessary, if you have long running asyncio tasks you might want to use <a href="https://docs.python.org/3/library/asyncio-eventloop.html" rel="nofollow noreferrer"><code>add_signal_handler</code></a></li>
</ul>
<p>Here's my simplified take on your code:</p>
<pre class="lang-py prettyprint-override"><code>import asyncio
import aiohttp

lists = ['eth', 'btc', 'xmr', 'req', 'xlm', 'etc', 'omg', 'neo', 'btc', 'xmr', 'req', 'xlm', 'etc', 'omg', 'neo']


async def fetch(client, item):
    url = 'https://coincap.io/{endpoint}/{coin_name}'.format(
        endpoint='page',
        coin_name=item.upper()
    )
    async with client.get(url) as resp:
        assert resp.status == 200
        html = await resp.text()
        print(html)


async def main():
    async with aiohttp.ClientSession() as client:
        await asyncio.gather(*[
            asyncio.ensure_future(fetch(client, item))
            for item in lists
        ])


loop = asyncio.get_event_loop()
loop.run_until_complete(main())
</code></pre>
<p>If you want to then process the html, you can either do it inside the fetch coroutine or operate on all the results from <code>gather</code>.</p>
</div>
<span class="comment-copy">Great answer, just one minor nit: <code>create_task()</code> should be used in preference to <code>ensure_future()</code> if you know you have a coroutine object - <a href="https://github.com/python/asyncio/issues/477#issuecomment-268709555" rel="nofollow noreferrer">rationale by Guido</a>. And in this case neither is needed because <code>asyncio.gather</code> (and <code>asyncio.wait</code> etc.) will correctly handle being passed coroutine objects, or any other objects that can be converted to <code>Future</code>.</span>
<span class="comment-copy">yes. I meant to change it but forgot, in this case <code>ensure_future</code> will just call <code>create_task</code>, but still better to use <code>create_task</code>.</span>
<span class="comment-copy">But here you don't need it - <code>asyncio.gather(*(fetch(client, item) for item in lists))</code> should work just fine. <code>gather</code> is <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.gather" rel="nofollow noreferrer">explicitly documented</a> to accept coroutines or futures.</span>
