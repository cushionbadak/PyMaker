<div class="post-text" itemprop="text">
<p>While reading <a href="https://stackoverflow.com/q/49950741/1222951">this question</a> about parsing dates of the form <code>%m/%d/%y</code>, I realized that I don't know how the <code>%y</code> directive actually works.</p>
<p>The <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">docs</a> state the following:</p>
<blockquote>
<p>Year without century as a zero-padded decimal number.</p>
</blockquote>
<p>But which century does it use? If I use <code>%y</code> to parse the year <code>01</code>, will that result in 1901 or 2001? If I re-run the same code in 100 years, will it result in 2101?</p>
<hr/>
<p>As an experiment, I wrote some code that parses all numbers from 0 to 99 and displays the results:</p>
<pre><code>for year in range(100):
    date = '6/1/{:&gt;02}'.format(year)
    dt = datetime.strptime(date, "%m/%d/%y")
    print(year, dt.date())
</code></pre>
<p>The results were surprising:</p>
<pre><code>0 2000-06-01
1 2001-06-01
2 2002-06-01
...
67 2067-06-01
68 2068-06-01
69 1969-06-01 # &lt;- wut
70 1970-06-01
71 1971-06-01
...
98 1998-06-01
99 1999-06-01
</code></pre>
<p>Why does it suddenly jump from 2068 to 1969? Is this behavior documented anywhere? What's the formal specification for <code>%y</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/time.html" rel="nofollow noreferrer"><code>time</code></a> docs, emphasis mine:</p>
<blockquote>
<p><strong>Year 2000 (Y2K) issues</strong>: Python depends on the platform’s C library, which generally doesn’t have year 2000 issues, since all dates and times are represented internally as seconds since the epoch. Function <code>strptime()</code> can parse 2-digit years when given <code>%y</code> format code. <strong>When 2-digit years are parsed, they are converted according to the POSIX and ISO C standards: values 69–99 are mapped to 1969–1999, and values 0–68 are mapped to 2000–2068.</strong></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can read the CPython implementation of strptime <a href="https://github.com/python/cpython/blob/master/Lib/_strptime.py" rel="nofollow noreferrer">here</a>, and in particular at lines <a href="https://github.com/python/cpython/blob/61f82e0e337f971da57f8f513abfe693edf95aa5/Lib/_strptime.py#L384" rel="nofollow noreferrer">384-392</a> there is the interesting bit:</p>
<pre><code>    if group_key == 'y':
        year = int(found_dict['y'])
        # Open Group specification for strptime() states that a %y
        #value in the range of [00, 68] is in the century 2000, while
        #[69,99] is in the century 1900
        if year &lt;= 68:
            year += 2000
        else:
            year += 1900
</code></pre>
<p>This behavior is also explained in the manual ot <a href="https://docs.python.org/3/library/time.html" rel="nofollow noreferrer">time</a>:</p>
<blockquote>
<p>Year 2000 (Y2K) issues: Python depends on the platform’s C library, which generally doesn’t have year 2000 issues, since all dates and times are represented internally as seconds since the epoch. Function strptime() can parse 2-digit years when given %y format code. When 2-digit years are parsed, they are converted according to the POSIX and ISO C standards: <strong>values 69–99 are mapped to 1969–1999, and values 0–68 are mapped to 2000–2068</strong>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>strptime</code> presumably is a basic wrapper around C's <code>strptime</code>.</p>
<p>Of <code>strptime</code>, <a href="http://pubs.opengroup.org/onlinepubs/009695399/functions/strptime.html" rel="nofollow noreferrer">the POSIX specification states</a>:</p>
<blockquote>
<p><code>%y</code> The year within century. When a century is not otherwise specified, values in the range [69,99] shall refer to years 1969 to 1999 inclusive, and values in the range [00,68] shall refer to years 2000 to 2068 inclusive; leading zeros shall be permitted but shall not be required.</p>
<p>Note: It is expected that in a future version of IEEE Std 1003.1-2001 the default century inferred from a 2-digit year will change. (This would apply to all commands accepting a 2-digit year as input.) </p>
</blockquote>
</div>
