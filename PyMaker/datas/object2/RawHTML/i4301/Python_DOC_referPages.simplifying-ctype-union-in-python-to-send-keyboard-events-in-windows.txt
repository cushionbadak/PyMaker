<div class="post-text" itemprop="text">
<p>I have the following script that sends a keyboard key every xx seconds (<kbd>F15</kbd> by default), inspired by some code found online</p>
<p>I want to remove the types and union related to Mouse events but cannot make it to work. In particular, I don't know how to remove the class <code>MOUSEINPUT</code> and the union of types <code>_INPUTunion</code> (removing them will stop sending the keyboard key).</p>
<p>Any suggestion on how to trim the script to a minimum (i.e. only keep code related to Keyboard)?</p>
<p>The following code will send the key "C" to be able to debug.</p>
<pre><code>#!/python

import ctypes
import sys
import time

LONG = ctypes.c_long
DWORD = ctypes.c_ulong
ULONG_PTR = ctypes.POINTER(DWORD)
WORD = ctypes.c_ushort

class MOUSEINPUT(ctypes.Structure):
    _fields_ = (
        ('dx', LONG), ('dy', LONG), ('mouseData', DWORD),
        ('dwFlags', DWORD), ('time', DWORD),
        ('dwExtraInfo', ULONG_PTR)
    )

class KEYBDINPUT(ctypes.Structure):
    _fields_ = (
        ('wVk', WORD), ('wScan', WORD),
        ('dwFlags', DWORD), ('time', DWORD),
        ('dwExtraInfo', ULONG_PTR)
    )

class _INPUTunion(ctypes.Union):
    _fields_ = (('mi', MOUSEINPUT), ('ki', KEYBDINPUT))

class INPUT(ctypes.Structure):
    _fields_ = (('type', DWORD), ('union', _INPUTunion))


def SendInput(*inputs):
    print(inputs[0].union.mi)
    nInputs = len(inputs)
    LPINPUT = INPUT * nInputs
    pInputs = LPINPUT(*inputs)
    cbSize = ctypes.c_int(ctypes.sizeof(INPUT))
    return ctypes.windll.user32.SendInput(nInputs, pInputs, cbSize)

INPUT_KEYBOARD = 1

def Input(structure):
    if isinstance(structure, KEYBDINPUT):
        return INPUT(INPUT_KEYBOARD, _INPUTunion(ki=structure))
    else:
        raise TypeError('Cannot create INPUT structure (keyboard)!')

def Keyboard(code, flags=0):
    return Input(KEYBDINPUT(code, code, flags, 0, None))

if __name__ == '__main__':
    nb_cycles = 10
    while nb_cycles != 0:
            time.sleep(2)  # 3 seconds
            # Key "c" for debug, but ideally use 0x7E for "F15"
            SendInput(Keyboard(ord("C")))
            sys.stdout.write(".")
            nb_cycles -= 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The "<em>Bible</em>" for tasks like this: <a href="https://docs.python.org/3/library/ctypes.html#module-ctypes" rel="nofollow noreferrer">[Python 3]: ctypes - A foreign function library for Python</a>. <br/>I modified your code (found a bunch of problems, out of which some were critical).</p>
<p><em>code.py</em>:</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python3

import sys
import time
import ctypes
from ctypes import wintypes


class KEYBDINPUT(ctypes.Structure):
    _fields_ = [
        ("wVk", wintypes.WORD),
        ("wScan", wintypes.WORD),
        ("dwFlags", wintypes.DWORD),
        ("time", wintypes.DWORD),
        ("dwExtraInfo", ctypes.POINTER(wintypes.ULONG)),
    ]


class INPUT(ctypes.Structure):
    _fields_ = [
        ("type", wintypes.DWORD),
        ("ki", KEYBDINPUT),
        ("padding", ctypes.c_ubyte * 8)
    ]


INPUT_KEYBOARD = 1  # Also defined by win32con if you have pywin32 installed

INPUT_LEN = ctypes.sizeof(INPUT)
LPINPUT = ctypes.POINTER(INPUT)

SendInput = ctypes.windll.user32.SendInput
SendInput.argtypes = [wintypes.UINT, LPINPUT, ctypes.c_int]
SendInput.restype = wintypes.UINT


def send_input(_input):
    return SendInput(1, ctypes.byref(_input), INPUT_LEN)


def keyboard(code, flags=0):
    return INPUT(INPUT_KEYBOARD, (KEYBDINPUT(code, 0, flags, 0, None)))


def main():
    time.sleep(2)
    nb_cycles = 3
    for _ in range(nb_cycles):
        time.sleep(0.5)  # 3 seconds
        # Key "c" for debug, but ideally use 0x7E for "F15"
        ret = send_input(keyboard(ord("C")))
        #print(ret)
        sys.stdout.write(".")
        sys.stdout.flush()


if __name__ == "__main__":
    print("Python {:s} on {:s}\n".format(sys.version, sys.platform))
    main()
</code></pre>
<p><strong>Notes</strong>:</p>
<ul>
<li><p>Initially, I defined the <em>INPUT</em> structure having only its 1<sup>st</sup> 2 members, but took a look at <a href="https://docs.microsoft.com/en-us/windows/desktop/api/winuser/ns-winuser-taginput" rel="nofollow noreferrer">[MS.Docs]: INPUT structure</a> and noted that the union consists of:</p>
<ul>
<li><em>MOUSEINPUT</em></li>
<li><em>KEYBDINPUT</em></li>
<li><em>HARDWAREINPUT</em></li>
</ul>
<p>Did some tests and noted that <em>MOUSEINPUT</em> has the largest size out of the 3 <em>struct</em>s, and it's <strong><em>8</em></strong> bytes greater than <em>KEYBDINPUT</em> (for <strong>both</strong> <em>32 bit</em> and <em>64 bit</em>), so I added the (dummy) (<em>padding</em>) member. Normally, I wouldn't expect that <em>SendInput</em> to go beyond <em>KEYBDINPUT</em> size when receiving an <em>INPUT</em> structure with <em>type</em> set to <em>INPUT_KEYBOARD</em>, but the <em>INPUT</em> size is required by <a href="https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-sendinput" rel="nofollow noreferrer">[MS.Docs]: SendInput function</a>'s <em>cbSize</em> arg</p></li>
<li><p><code>def SendInput(*inputs):</code> - in <em>Python</em>, <strong><em>*</em></strong> before an argument does something totally different than in <em>C</em>. Check <a href="https://stackoverflow.com/questions/1993727/expanding-tuples-into-arguments">[SO]: Expanding tuples into arguments</a> (I didn't find the official doc). I modified the function so that it only sends <strong>one</strong> such structure</p></li>
<li><p><strong>Always</strong> define <em>argtypes</em> (and <em>restype</em>) for a function being invoked via <em>ctypes</em>. Otherwise they will default to <code>ctypes.c_int</code> (and that could lead to some nasty errors, especially on <em>64 bit</em>: <a href="https://stackoverflow.com/questions/52268294/python-ctypes-cdll-loadlibrary-instantiate-an-object-execute-its-method-priva/52272969#52272969">[SO]: Python ctypes cdll.LoadLibrary, instantiate an object, execute its method, private variable address truncated (@CristiFati's answer)</a>)</p></li>
<li><p>Use <code>ctypes.wintypes</code> for <em>Win</em> specific types, don't reinvent the wheel. Not to mention that sometimes mismatches might occur (most recent one that I saw, was <code>ctypes.c_bool</code> <em>vs.</em> <code>wintypes.BOOL</code>)</p></li>
<li><p>I renamed your functions to be <a href="https://www.python.org/dev/peps/pep-0008" rel="nofollow noreferrer">[Python]: PEP 8 -- Style Guide for Python Code</a> compliant. I also removed some of them, that were no longer needed</p></li>
<li><p>Other small changes that don't worth being mentioned individually</p></li>
</ul>
<p>As for testing, I used a <em>Notepad</em> window (or any other, "sensitive" to user input):</p>
<ul>
<li>Launch the script</li>
<li><kbd>Alt + Tab</kbd> to the test window (I added the 1<sup>st</sup> instruction (<code>time.sleep(2)</code>) from <em>main</em> just to give user time to switch windows), and notice the <strong><em>c</em></strong>s "magically" appearing</li>
</ul>
<p>... Or just launch the script from console, press <kbd>Ctrl</kbd>, and notice that it got cancelled.</p>
</div>
<span class="comment-copy">What have you tried? What errors are you getting? Have you looked at <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms646310(v=vs.85).aspx" rel="nofollow noreferrer">msdn.microsoft.com/en-us/library/windows/desktop/â€¦</a> Looks like you just specifying the keyboard structure with the type value set to 1 should work.</span>
<span class="comment-copy">This is a like paradox. When submitting a question, <i>OP</i> should reduce it to <a href="https://stackoverflow.com/help/mcve">[SO]: How to create a Minimal, Complete, and Verifiable example (mcve)</a>, which is the very object of the current question :)) . Hint: start by removing the <code>if isinstance(structure, MOUSEINPUT):</code> condition, then you can proceed to the mouse related stuff.</span>
<span class="comment-copy">@Tim I tried to remove the class <code>MOUSEINPUT</code> but nothing happened when launching. I have updated the question to indicate what I tried. The link is interesting but it does mention an union for <code>INPUTunion</code> so I don't know whether the code can be trimmed.</span>
<span class="comment-copy">@CristiFati I have removed some useless parts in my code to make it (slightly) simpler, include the <code>if isinstance(structure, MOUSEINPUT):</code> that I previously managed to remove before asking the question. For the rest, it is a big mystery.</span>
<span class="comment-copy">I would try just supplying the KEYBDINPUT structure directly to <code>SendInput</code> method. A union is a type construct telling the C compiler to allow either type, there is nothing really special.</span>
<span class="comment-copy">Awesome explanations. The non-PEP8 functions were from the code I found on the SO and I didn't take the time to rename them. Thanks a lot!</span>
<span class="comment-copy">You're welcome! Nice being helpful!. <i>PEP8</i> rules  are not mandatory but definitely a guideline to follow...</span>
<span class="comment-copy">Excellent answer.</span>
<span class="comment-copy">@CristiFati <code>wintypes.PULONG</code> is not found with Python2 but <code>wintypes.ULONG</code> seems to work. Can I replace?</span>
<span class="comment-copy">No, use <code>ctypes.c_ulonglong</code>.</span>
