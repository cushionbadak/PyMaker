<div class="post-text" itemprop="text">
<p>I'd like to compare 2 strings and keep the matched, splitting off where the comparison fails.</p>
<p>So if I have 2 strings -</p>
<pre><code>string1 = apples
string2 = appleses

answer = apples
</code></pre>
<p>Another example, as the string could have more than one word. </p>
<pre><code>string1 = apple pie available
string2 = apple pies

answer = apple pie
</code></pre>
<p>I'm sure there is a simple Python way of doing this but I can't work it out, any help and explanation appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Its called Longest Common Substring problem. Here I present a simple, easy to understand but inefficient solution. It will take a long time to produce correct output for large strings, as the complexity of this algorithm is O(N^2).</p>
<pre><code>def longestSubstringFinder(string1, string2):
    answer = ""
    len1, len2 = len(string1), len(string2)
    for i in range(len1):
        match = ""
        for j in range(len2):
            if (i + j &lt; len1 and string1[i + j] == string2[j]):
                match += string2[j]
            else:
                if (len(match) &gt; len(answer)): answer = match
                match = ""
    return answer

print longestSubstringFinder("apple pie available", "apple pies")
print longestSubstringFinder("apples", "appleses")
print longestSubstringFinder("bapples", "cappleses")
</code></pre>
<p><strong>Output</strong></p>
<pre><code>apple pie
apples
apples
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For completeness, <code>difflib</code> in the standard-library provides loads of sequence-comparison utilities. For instance <a href="https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher.find_longest_match" rel="noreferrer"><code>find_longest_match</code></a> which finds the longest common substring when used on strings. Example use:</p>
<pre><code>from difflib import SequenceMatcher

string1 = "apple pie available"
string2 = "come have some apple pies"

match = SequenceMatcher(None, string1, string2).find_longest_match(0, len(string1), 0, len(string2))

print(match)  # -&gt; Match(a=0, b=15, size=9)
print(string1[match.a: match.a + match.size])  # -&gt; apple pie
print(string2[match.b: match.b + match.size])  # -&gt; apple pie
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def common_start(sa, sb):
    """ returns the longest common substring from the beginning of sa and sb """
    def _iter():
        for a, b in zip(sa, sb):
            if a == b:
                yield a
            else:
                return

    return ''.join(_iter())
</code></pre>
<pre><code>&gt;&gt;&gt; common_start("apple pie available", "apple pies")
'apple pie'
</code></pre>
<hr/>
<p>Or a slightly stranger way:</p>
<pre><code>def stop_iter():
    """An easy way to break out of a generator"""
    raise StopIteration

def common_start(sa, sb):
    return ''.join(a if a == b else stop_iter() for a, b in zip(sa, sb))
</code></pre>
<p>Which might be more readable as</p>
<pre><code>def terminating(cond):
    """An easy way to break out of a generator"""
    if cond:
        return True
    raise StopIteration

def common_start(sa, sb):
    return ''.join(a for a, b in zip(sa, sb) if terminating(a == b))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One might also consider <a href="https://docs.python.org/3/library/os.path.html#os.path.commonprefix" rel="noreferrer"><code>os.path.commonprefix</code></a> that works on characters and thus can be used for any strings.</p>
<pre><code>import os
common = os.path.commonprefix(['apple pie available', 'apple pies'])
assert common == 'apple pie'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The same as <a href="https://stackoverflow.com/a/18715879/860597">Evo's</a>, but with arbitrary number of strings to compare:</p>
<pre><code>def common_start(*strings):
    """ Returns the longest common substring
        from the beginning of the `strings`
    """
    def _iter():
        for z in zip(*strings):
            if z.count(z[0]) == len(z):  # check all elements in `z` are the same
                yield z[0]
            else:
                return

    return ''.join(_iter())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Fix bugs with the first's answer:</p>
<pre><code>def longestSubstringFinder(string1, string2):
    answer = ""
    len1, len2 = len(string1), len(string2)
    for i in range(len1):
        for j in range(len2):
            lcs_temp=0
            match=''
            while ((i+lcs_temp &lt; len1) and (j+lcs_temp&lt;len2) and string1[i+lcs_temp] == string2[j+lcs_temp]):
                match += string2[j+lcs_temp]
                lcs_temp+=1
            if (len(match) &gt; len(answer)):
                answer = match
    return answer

print longestSubstringFinder("dd apple pie available", "apple pies")
print longestSubstringFinder("cov_basic_as_cov_x_gt_y_rna_genes_w1000000", "cov_rna15pcs_as_cov_x_gt_y_rna_genes_w1000000")
print longestSubstringFinder("bapples", "cappleses")
print longestSubstringFinder("apples", "apples")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>import itertools as it
''.join(el[0] for el in it.takewhile(lambda t: t[0] == t[1], zip(string1, string2)))
</code></pre>
<p>It does the comparison from the beginning of both strings.</p>
</div>
<div class="post-text" itemprop="text">
<p>This isn't the most efficient way to do it but it's what I could come up with and it works. If anyone can improve it, please do. What it does is it makes a matrix and puts 1 where the characters match. Then it scans the matrix to find the longest diagonal of 1s, keeping track of where it starts and ends. Then it returns the substring of the input string with the start and end positions as arguments.</p>
<p>Note: This only finds one longest common substring. If there's more than one, you could make an array to store the results in and return that Also, it's case sensitive so (Apple pie, apple pie) will return pple pie.</p>
<pre><code>def longestSubstringFinder(str1, str2):
answer = ""

if len(str1) == len(str2):
    if str1==str2:
        return str1
    else:
        longer=str1
        shorter=str2
elif (len(str1) == 0 or len(str2) == 0):
    return ""
elif len(str1)&gt;len(str2):
    longer=str1
    shorter=str2
else:
    longer=str2
    shorter=str1

matrix = numpy.zeros((len(shorter), len(longer)))

for i in range(len(shorter)):
    for j in range(len(longer)):               
        if shorter[i]== longer[j]:
            matrix[i][j]=1

longest=0

start=[-1,-1]
end=[-1,-1]    
for i in range(len(shorter)-1, -1, -1):
    for j in range(len(longer)):
        count=0
        begin = [i,j]
        while matrix[i][j]==1:

            finish=[i,j]
            count=count+1 
            if j==len(longer)-1 or i==len(shorter)-1:
                break
            else:
                j=j+1
                i=i+1

        i = i-count
        if count&gt;longest:
            longest=count
            start=begin
            end=finish
            break

answer=shorter[int(start[0]): int(end[0])+1]
return answer
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def matchingString(x,y):
    match=''
    for i in range(0,len(x)):
        for j in range(0,len(y)):
            k=1
            # now applying while condition untill we find a substring match and length of substring is less than length of x and y
            while (i+k &lt;= len(x) and j+k &lt;= len(y) and x[i:i+k]==y[j:j+k]):
                if len(match) &lt;= len(x[i:i+k]):
                   match = x[i:i+k]
                k=k+1
    return match  

print matchingString('apple','ale') #le
print matchingString('apple pie available','apple pies') #apple pie     
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Returns the first longest common substring:</p>
<pre><code>def compareTwoStrings(string1, string2):
    list1 = list(string1)
    list2 = list(string2)

    match = []
    output = ""
    length = 0

    for i in range(0, len(list1)):

        if list1[i] in list2:
            match.append(list1[i])

            for j in range(i + 1, len(list1)):

                if ''.join(list1[i:j]) in string2:
                    match.append(''.join(list1[i:j]))

                else:
                    continue
        else:
            continue

    for string in match:

        if length &lt; len(list(string)):
            length = len(list(string))
            output = string

        else:
            continue

    return output
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First a <em>helper</em> function adapted from the <a href="https://docs.python.org/dev/library/itertools.html#itertools-recipes" rel="nofollow">itertools pairwise recipe</a> to produce substrings.</p>
<pre><code>import itertools
def n_wise(iterable, n = 2):
    '''n = 2 -&gt; (s0,s1), (s1,s2), (s2, s3), ...

    n = 3 -&gt; (s0,s1, s2), (s1,s2, s3), (s2, s3, s4), ...'''
    a = itertools.tee(iterable, n)
    for x, thing in enumerate(a[1:]):
        for _ in range(x+1):
            next(thing, None)
    return zip(*a)
</code></pre>
<p>Then a function the iterates over substrings, longest first, and tests for membership.  (efficiency not considered)</p>
<pre><code>def foo(s1, s2):
    '''Finds the longest matching substring
    '''
    # the longest matching substring can only be as long as the shortest string
    #which string is shortest?
    shortest, longest = sorted([s1, s2], key = len)
    #iterate over substrings, longest substrings first
    for n in range(len(shortest)+1, 2, -1):
        for sub in n_wise(shortest, n):
            sub = ''.join(sub)
            if sub in longest:
                #return the first one found, it should be the longest
                return sub

s = "fdomainster"
t = "exdomainid"
print(foo(s,t))
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; 
domain
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is the classroom problem called 'Longest sequence finder'. I have given some simple code that worked for me, also my inputs are a lists of a sequence which can also be a string, might help you:</p>
<pre><code>def longest_substring(list1,list2):
    both=[]
    if len(list1)&gt;len(list2):
        small=list2
        big=list1
    else:
        small=list1
        big=list2
    removes=0
    stop=0
    for i in small:
        for j in big:
            if i!=j:
                removes+=1
                if stop==1:
                    break
            elif i==j:
                both.append(i)
                for q in range(removes+1):
                    big.pop(0)
                stop=1
                break
        removes=0
    return both
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def LongestSubString(s1,s2):
    left = 0
    right =len(s2)
    while(left&lt;right):
        if(s2[left] not in s1):
            left = left+1
        else:
            if(s2[left:right] not in s1):
                right = right - 1
            else:
                return(s2[left:right])

s1 = "pineapple"
s2 = "applc"
print(LongestSubString(s1,s2))
</code></pre>
</div>
<span class="comment-copy">What if <code>string1 = bapples</code> and <code>string2 = cappleses</code> ?</span>
<span class="comment-copy"><a href="http://en.wikipedia.org/wiki/Longest_common_substring_problem" rel="nofollow noreferrer">Longest common substring problem</a>.</span>
<span class="comment-copy">if you need common <i>prefix</i>: <code>os.path.commonprefix(['apples', 'appleses']) -&gt; 'apples'</code> `</span>
<span class="comment-copy">Also check out algorithm implementations on wikibooks: <a href="http://en.wikibooks.org/w/index.php?title=Algorithm_Implementation/Strings/Longest_common_substring" rel="nofollow noreferrer">en.wikibooks.org/w/index.php?title=Algorithm_Implementation/…</a></span>
<span class="comment-copy">The content of the question does not correspond to what is in the title. The problem described is longest common prefix</span>
<span class="comment-copy">This algorithm is incorrect with given some inputs (e.g. "apple pie...", "apple pie") but works if you switch parameter position. I think there's something wrong with the if statement when you compare <code>i+j &lt; len1</code></span>
<span class="comment-copy">this works for the longest prefix and breaks on suffixes. E.g. <code>x = "cov_basic_as_cov_x_gt_y_rna_genes_w1000000" y = "cov_rna15pcs_as_cov_x_gt_y_rna_genes_w1000000"</code></span>
<span class="comment-copy">its totaly wrong. try string1="2193588" , string2="21943588"</span>
<span class="comment-copy">this needs to get down votes to get removed ...this is a wrong answer...</span>
<span class="comment-copy">This doesn't work because it does not consider scenario where you will need to do a "re-matching" for the second string. For instance, in "acdaf" vs "acdacdaf", when starting from "a" of the first string it will match all the way till the "acda" part of the second string, then it will break at c. Then no matter what you can no longer pick up acdaf.</span>
<span class="comment-copy">@NorthSide This should be the accepted answer</span>
<span class="comment-copy">Heads up to those using this on longer strings, you might want to set the kwarg "autojunk" to False when creating the instance of SequenceMatcher.</span>
<span class="comment-copy">I'll note that there are outstanding bugs in difflib that should prevent its use in real-world scenarios. For example, it seems that the well known 'heuristic' interferes with the completeness of methods such as 'get_matching_blocks'.</span>
<span class="comment-copy"><b>Warning: This answer does not find the longest common substring!</b> Despite its name (and the method's documentation), <code>find_longest_match()</code> does not do what its name implies. The class documentation for <code>SequenceMatcher</code> does hint at this, however, saying: <code>This does not yield minimal edit sequences</code>. For example, in some cases, <code>find_longest_match()</code> will claim there are <i>no</i> matches in two strings of length 1000, even though there are matching substrings of length &gt; 500.</span>
<span class="comment-copy">This solution, as of now, isn't complete. It only compares both strings from the zeroth position.   For instance: &gt;&gt;&gt; common_start("XXXXXapple pie available", "apple pies")  returns an empty string.</span>
<span class="comment-copy">@NitinNain: That was never clarified in the original question. But yes, this solution only finds the common <i>start</i> of strings</span>
<span class="comment-copy">will this work once <a href="http://legacy.python.org/dev/peps/pep-0479/" rel="nofollow noreferrer">PEP479</a> is in effect?</span>
<span class="comment-copy">No - from <a href="http://legacy.python.org/dev/peps/pep-0479/#consequences-for-existing-code" rel="nofollow noreferrer">that document</a>: <i>"There are also examples of generator expressions floating around that rely on a StopIteration raised by the expression, the target <b>or the predicate</b> (rather than by the __next__() call implied in the for loop proper).</i>"</span>
<span class="comment-copy">@Eric still, from the <a href="https://docs.python.org/3/whatsnew/3.6.html#deprecated-python-behavior" rel="nofollow noreferrer">Python 3.6 release notes</a>, <code>Raising the StopIteration exception inside a generator will now generate a DeprecationWarning</code>. If you run your code with <code>Python3 -W default::DeprecationWarning</code>, the last two examples both raise <code>DeprecationWarning</code>s</span>
<span class="comment-copy">It doesn't work, when compare string like ['an apple pie available', 'apple pies'].</span>
<span class="comment-copy">this should have been marked the correct answer.</span>
<span class="comment-copy">I'm now wanting python to make <code>it.takewhile</code> a language feature: <code>a for a, b in zip(string1, string2) while a == b</code></span>
<span class="comment-copy"><code>''.join(el[0] for el in itertools.takewhile(lambda t: t[0] == t[1], zip("ahello", "hello")))</code> returns <code>""</code>, which appears to be incorrect. The correct result would be <code>"hello"</code>.</span>
<span class="comment-copy">@AndersonGreen: You are right, it doesn't answer exactly the question, althought his examples only took into account the starting point at first char and I pointed out it in my answer too.</span>
