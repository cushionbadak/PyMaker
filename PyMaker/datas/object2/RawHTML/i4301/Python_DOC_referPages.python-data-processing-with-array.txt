<div class="post-text" itemprop="text">
<p>I'm using Python to work with data from csv files, and after reading csv into an array, my data looks like this:</p>
<pre><code>data = [
    ["10","2018-03-22 14:38:18.329963","name 10","url10","True"],
    ["11","2018-03-22 14:38:18.433497","name 11","url11","False"],
    ["12","2018-03-22 14:38:18.532312","name 12","url12","False"]
]
</code></pre>
<p>I know I can use "for" loop but my data has around millions of records and the "for" loop takes too long time to run, so do you have any idea to do task listed below without using "for"?</p>
<ol>
<li>Convert value from string to integer in column 1 (ie: "10" -&gt; 10)</li>
<li>Add "http://" in column 3 (ie: "url10" -&gt; "<a href="http://url10" rel="nofollow noreferrer">http://url10</a>")</li>
<li>Convert value in column 4 to boolean (ie: "False" -&gt; False)</li>
</ol>
<p>Thank you a lot!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>map</code> with a predefined function. <code>map</code> is <em>slightly</em> faster than a list comprehension on <a href="https://stackoverflow.com/questions/1247486/python-list-comprehension-vs-map#answer-6407222">larger input</a>:</p>
<pre><code>def clean_data(row):
   val, date, name, url, truthy = row
   return [int(val), date, name, 'http://{}'.format(url), truthy == 'True']


data = [
["10","2018-03-22 14:38:18.329963","name 10","url10","True"],
["11","2018-03-22 14:38:18.433497","name 11","url11","False"],
["12","2018-03-22 14:38:18.532312","name 12","url12","False"]
]
print(list(map(clean_data, data)))
</code></pre>
<p>Output:</p>
<pre><code>[[10, '2018-03-22 14:38:18.329963', 'name 10', 'http://url10', True], [11, '2018-03-22 14:38:18.433497', 'name 11', 'http://url11', False], [12, '2018-03-22 14:38:18.532312', 'name 12', 'http://url12', False]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://pandas.pydata.org/" rel="nofollow noreferrer">Pandas</a> should be one option if you don't mind taking some time to load your data to the dataframe first.</p>
<p>Below is one solution using <strong>Pandas</strong>, then simply compare the time cost with <strong>map</strong> solution.</p>
<pre><code>import pandas as pd
from datetime import datetime
data = [
    ["10","2018-03-22 14:38:18.329963","name 10","url10","True"],
    ["11","2018-03-22 14:38:18.433497","name 11","url11","False"],
    ["12","2018-03-22 14:38:18.532312","name 12","url12","False"]
]*10000 #multiply 10000 to simulate large data, you can test with one bigger number.

#Pandas
df = pd.DataFrame(data=data, columns=['seq', 'datetime', 'name', 'url', 'boolean'])
pandas_beg = datetime.now()
df['seq'] = df['seq'].astype(int)
df['url'] = 'http://' + df['url']
df['boolean'] = df['boolean'] == 'True'
pandas_end = datetime.now()
print('pandas: ', (pandas_end - pandas_beg))

#map
def clean_data(row):
   val, date, name, url, truthy = row
   return [int(val), date, name, 'http://{}'.format(url), truthy == 'True']
map_beg = datetime.now()
result = list(map(clean_data, data))
map_end = datetime.now()
print('map: ', (map_end - map_beg))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>pandas:  0:00:00.016091
map:  0:00:00.036025
[Finished in 0.997s]
</code></pre>
</div>
<span class="comment-copy">Sounds like a use case for map (<a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#map</a>).</span>
<span class="comment-copy">nice solution. this is simple and clean.</span>
<span class="comment-copy">Superb! Thank you a lot!</span>
<span class="comment-copy">Cool. Thank you mate</span>
