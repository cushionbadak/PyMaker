<div class="post-text" itemprop="text">
<p>The task is to convert an input in seconds to a time that is readable for humans in the format HH:MM:SS.</p>
<pre><code>import time

def make_readable(seconds):
    return time.strftime('%H:%M:%S', time.gmtime(seconds))
</code></pre>
<p>So far this is what I have, and it works.</p>
<p>The only problem is that the hours should be displayed in a range from 00 - 99, currently it is in 24 hours. </p>
<p>e.g. with an input of 359999 seconds, it should output 99:59:59. This is also the maximum time by the way. </p>
<p>Errors:</p>
<p>'00:00:00' should equal '24:00:00'</p>
<p>'03:59:59' should equal '99:59:59'</p>
<p>'20:36:54' should equal '44:36:54'</p>
<p>Question: How to put the hours in the 99 format?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you can roll your own seconds parser. For example:</p>
<pre><code>def make_readable(seconds):
    if seconds &gt; 359999:
        raise ValueError('Invalid number of seconds: {}'.format(seconds))

    s = seconds % 60
    seconds //= 60

    m = seconds % 60
    seconds //= 60

    h = seconds

    return '{:02d}:{:02d}:{:02d}'.format(h, m, s)

print(make_readable(359999)) # Prints 99:59:59
print(make_readable(65)) # Prints 00:01:05
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution using <a href="https://docs.python.org/3/library/functions.html#divmod" rel="nofollow noreferrer"><code>divmod</code></a> instead of the <code>time</code> module.</p>
<pre><code>def make_readable(seconds):
    hours, rem = divmod(seconds, 3600)
    minutes, seconds = divmod(rem, 60)

    # The following makes sure a one-digit time quantity is written as 0X
    return '{:02d}:{:02d}:{:02d}'.format(hours, minutes, seconds)
</code></pre>
<p>Here are output examples.</p>
<pre><code>make_readable(359999) # '99:59:59'
make_readable(3661)  # '01:01:01'

# This will continue working over 35,999 seconds
make_readable(360000) # '100:00:00'
</code></pre>
</div>
<span class="comment-copy">what should happen for <code>1_000_000</code> seconds?</span>
<span class="comment-copy">@corsiKa you will not get more than an input of 359999</span>
<span class="comment-copy">Thanks! could you please exaplain this part : ` return '{:02d}:{:02d}:{:02d}'.format(h, m, s)` ? I do not fully understand what happens here. And also; how can h = seconds work? :o</span>
<span class="comment-copy">Sure! The <code>h = seconds</code> part is just for readability (the remainder works out to be the number of hours). The <code>{:02d}</code> is a format string that indicates a 0-padded decimal of length 2. Here's a good place to learn about string formats: <a href="https://pyformat.info/" rel="nofollow noreferrer">pyformat.info</a></span>
<span class="comment-copy">Great, very useful website as well</span>
<span class="comment-copy">Thanks for answering, what does the 'rem' stand for?</span>
<span class="comment-copy">It's the remainder of divmod. divmode does an integer division and returns what could not be divided, which in that case are the seconds below 3600.</span>
<span class="comment-copy">@Daphne here if you want to read more about it: <a href="https://docs.python.org/3/library/functions.html#divmod" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#divmod</a></span>
<span class="comment-copy">ah I see, sort of like the modulo but then in a method, nice</span>
<span class="comment-copy">Yes, but modulo only returns the remainder</span>
