<div class="post-text" itemprop="text">
<p>I'm using a python script which uses subprocess to pass a commmand to the terminal. Part of the command that I'm passing involves paths which contain parentheses. Python handles strings with parentheses fine, but of course terminal does not handle these without escape characters. </p>
<p>I'm trying to pass variables to a command line program by feeding a string into subprocess, but here's simple example to reproduce the error:</p>
<pre><code>import subprocess

path = '/home/user/Desktop/directory(2018)'
command_str =  'rmdir ' + path
print (subprocess.run(command_str))
</code></pre>
<p>which gives me this error:</p>
<pre><code>Traceback (most recent call last):
  File "ex.py", line 7, in &lt;module&gt;
    print (subprocess.run(command_str))
  File "/usr/lib/python3.6/subprocess.py", line 403, in run
    with Popen(*popenargs, **kwargs) as process:
  File "/usr/lib/python3.6/subprocess.py", line 709, in __init__
    restore_signals, start_new_session)
  File "/usr/lib/python3.6/subprocess.py", line 1344, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'rmdir /home/user/Desktop/directory(2018)': 'rmdir /home/user/Desktop/directory(2018)'
</code></pre>
<p>When I write it directly into the terminal with escape characters it works great.</p>
<pre><code>$ rmdir /home/user/Desktop/directory\(2018\)
</code></pre>
<p>But in Python when I try to add escape characters to the strings before calling subprocess:</p>
<pre><code>command_str = command_str.replace('(','\(')
command_str = command_str.replace(')','\)')
</code></pre>
<p>I get the same error as before because, unlike <code>print</code>, the subprocess string adds a second escape character which gets passed to the terminal. </p>
<pre><code>Traceback (most recent call last):
  File "ex.py", line 7, in &lt;module&gt;
    print (subprocess.run(command_str))
  File "/usr/lib/python3.6/subprocess.py", line 403, in run
    with Popen(*popenargs, **kwargs) as process:
  File "/usr/lib/python3.6/subprocess.py", line 709, in __init__
    restore_signals, start_new_session)
  File "/usr/lib/python3.6/subprocess.py", line 1344, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'rmdir /home/user/Desktop/directory\\(2018\\)': 'rmdir /home/user/Desktop/directory\\(2018\\)'
</code></pre>
<p>Is there a way to fix this particular error? Either by doing something different with <code>replace</code> or <code>subprocess.run</code>? (I'm not looking for a better way to remove directories.) Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python implements <code>rm</code> and <code>rmdir</code> so no need to call a process. In general, if you want to skip shell processing on a command in <code>subprocess</code>, don't use the shell. </p>
<pre><code>import subprocess

path = '/home/user/Desktop/directory(2018)'
command =  ['rmdir', path]
print (subprocess.run(command, shell=False))
</code></pre>
<p>The shell breaks a command line into a list of arguments. You can build that list yourself and skip the shell completely.</p>
</div>
<div class="post-text" itemprop="text">
<p>Do not use subprocess, and you don't have to worry about shell escaping.  Use the high-level file operation APIs provided in stdlib's <a href="https://docs.python.org/3/library/shutil.html" rel="nofollow noreferrer"><code>shutil</code></a>:</p>
<pre><code>import shutil
shutil.rmtree('/home/user/Desktop/directory(2018)')
</code></pre>
</div>
<span class="comment-copy">building the argument list and setting shell to False fixed the issue! thanks for the tip</span>
<span class="comment-copy">This still calls a subprocess (probably <code>/bin/rmdir</code>) so I think it's misleading to say "Python implements rm and rmdir".  Not worth a downvote, but worth a mention I guess.</span>
<span class="comment-copy">@wim - python does in fact implement <code>rm</code> (see <code>os.remove</code>) and <code>rmdir</code> (see <code>shutil.rmtree</code>) functionality. Are you worried that those commands have more options that the python equivalent? The question is about escaping characters and that is the question that I answered.</span>
<span class="comment-copy">My point was that you say you don't need to call a process, and then you show code that calls a process, it doesn't read well / confusing. You don't need to tell me that <code>shutil.rmtree</code> is the Python <code>rmdir</code>, because I already posted that as an answer 4 hours ago... ;)</span>
<span class="comment-copy">I said you don't need a subprocess for the <code>rm</code> command but generally this is how you'd solve the problem. I supposed that OP had more use cases in mind - this was a toy example - I and was right. I don't find it the least be confusing. "In general" means that I am refering to a more general solution.</span>
<span class="comment-copy">so I'm trying to use a script with a more complicated command that runs <code>ffmpeg</code> from terminal. the above code with <code>rmdir</code> is an example to reproduce the error. I'll clarify that in the question. thanks!</span>
