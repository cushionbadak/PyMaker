<div class="post-text" itemprop="text">
<p>I have the following playbook:</p>
<pre><code>---
- hosts: app
  become: yes
  tasks:
    - name: Install MySQL-Python
      yum: name=MySQL-python state=present

    - name: Install Python Setup Tools
      yum: name=python-setuptools state=present

    - name: Install django
      easy_install: name=django state=present
</code></pre>
<p>This fails with the error:</p>
<blockquote>
<p>This version of Django requires Python 3.4, but you're trying to\ninstall it on Python 2.7.\n\nThis may be because you are using a version of pip that doesn't\nunderstand the python_requires classifier. Make sure you\nhave pip &gt;= 9.0 and setuptools &gt;= 24.2, then try again:\n\n    $ python -m pip install --upgrade pip setuptools\n    $ python -m pip install django\n\nThis will install the latest version of Django which works on your\nversion of Python. If you can't upgrade your pip (or Python), request\nan older version of Django:\n\n    $ python -m pip install \"django&lt;2\"\nerror: Setup script exited with 1\n"}</p>
</blockquote>
<p>I followed <a href="https://www.tecmint.com/install-python-in-linux/" rel="nofollow noreferrer">this article</a> to install Python 3 and also set <code>python=python3</code>, yet I am facing the same error message when I run the playbook.</p>
<p>Can anyone please suggest what to do? Also, I do I install a previous version of Django using Ansible?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use the <a href="https://docs.ansible.com/ansible/2.4/pip_module.html" rel="nofollow noreferrer">pip module</a> to install Django instead of <code>easy_install</code>. You can use <code>executable</code> to use the <code>pip</code> for Python 3.4. You can use <code>version</code> to specify which version you want to use - if you decide to use Python 2 you will need to install <code>Django&lt;2</code>.</p>
<pre><code>- name: Install django
  pip: 
    name: django
    executable: pip-3.4
    version: 2.0.4
</code></pre>
<p>Note that <code>MySQL-Python</code> has not been supported in several years. It would be better to use the fork <code>mysqlclient</code>, which supports Python 3.</p>
<p>You should also consider installing your modules in a virtual environment.</p>
</div>
<span class="comment-copy">Thanks a lot for your answer. I actually modified easy_install: name=django state=present to  easy_install: name=django&lt;2 state=present and it solved the issue.</span>
<span class="comment-copy">Glad you got it working, but I would consider switching to <code>pip</code> - the <a href="https://docs.python.org/3/installing/index.html" rel="nofollow noreferrer">python documentation</a> describes <code>pip</code> as the preferred installer program. See <a href="https://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install">this question</a> for more info.</span>
