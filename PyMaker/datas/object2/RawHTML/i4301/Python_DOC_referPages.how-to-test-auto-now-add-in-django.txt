<div class="post-text" itemprop="text">
<p>I have django 1.11 app and I want to write unit test for my solution.</p>
<p>I want to test registration date feature.</p>
<p>model.py:</p>
<pre><code>class User(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    registration_date = models.DateTimeField(auto_now_add=True)

    def get_registration_date(self):
        return self.registration_date
</code></pre>
<p>I'm using also django-boy for models factories:
factories.py</p>
<pre><code>  class UserFactory(factory.DjangoModelFactory):
        class Meta:
            model = models.User
        first_name = 'This is first name'
        last_name = 'This is last name'
        registration_date = timezone.now()
</code></pre>
<p>test.py</p>
<pre><code>def test_get_registration_date(self):
    user = factories.UserFactory.create()
    self.assertEqual(user.get_registration_date(), timezone.now())
</code></pre>
<p>Problem is that I recived <code>AssertionError</code>:</p>
<pre><code>AssertionError: datetime.datetime(2018, 4, 17, 9, 39, 36, 707927, tzinfo=&lt;UTC&gt;) != datetime.datetime(2018, 4, 17, 9, 39, 36, 708069, tzinfo=&lt;UTC&gt;)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer"><code>mock</code></a>:</p>
<pre><code>import pytz
from unittest import mock

def test_get_registration_date(self):
    mocked = datetime.datetime(2018, 4, 4, 0, 0, 0, tzinfo=pytz.utc)
    with mock.patch('django.utils.timezone.now', mock.Mock(return_value=mocked))
        user = factories.UserFactory.create()
        self.assertEqual(user.get_registration_date(), mocked)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the package freeze gun. <a href="https://github.com/spulec/freezegun" rel="nofollow noreferrer">https://github.com/spulec/freezegun</a> which patchs datetime.now(). </p>
<pre><code>from freezegun import freeze_time
...
    @freeze_time("2017-06-23 07:28:00")
    def test_get_registration_date(self):
        user = factories.UserFactory.create()
        self.assertEqual(
            datetime.strftime(user.get_registration_date(), "%Y-%m-%d %H:%M:%S")
            "2017-06-23 07:28:00"
        )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use the <code>factory.post_generation</code> decorator:</p>
<pre><code>class UserFactory(factory.DjangoModelFactory):
    ...
    @factory.post_generation
    def registration_date(self, create, extracted, **kwargs):
        if extracted:
            self.registration_date = extracted
</code></pre>
</div>
<span class="comment-copy">why dont give a dummy  specific time at creation for simplification</span>
<span class="comment-copy">Thanks a lot @neverwalkaloner</span>
