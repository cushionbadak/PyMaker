<div class="post-text" itemprop="text">
<p>Please explain. </p>
<pre><code>import statistics
x = [0,1]
statistics.mean(x) 
## 0.5
</code></pre>
<p><strong>But:</strong></p>
<pre><code>import numpy 
import statistics
x = numpy.array([0,1])
statistics.mean(x) 
## 0
</code></pre>
<p>I'm pretty sure it's a basic, well-known, over-discussed issue: please link to a duplicate, as I couldn't find one.</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason is there is a conversion method in the <code>statistics</code> module which checks if a data type is a subclass of <code>int</code>. This works for <code>int</code>, but not for <code>np.int32</code>.</p>
<pre><code>import statistics
from fractions import Fraction

a = statistics._convert(Fraction('1/2'), int)       # 0.5
b = statistics._convert(Fraction('1/2'), np.int32)  # 0

def _convert(value, T):
    """Convert value to given numeric type T."""
    if type(value) is T:
        return value

    #### THIS BIT WORKS FOR int BUT not for np.int32 ###
    if issubclass(T, int) and value.denominator != 1:
        T = float

    try:
        return T(value)
    except TypeError:
        if issubclass(T, Decimal):
            return T(value.numerator)/T(value.denominator)
        else:
            raise
</code></pre>
<hr/>
<p>Therefore, you can either use <code>statistics</code> with a list, or <code>numpy</code> with an array:</p>
<ol>
<li>Use <code>statistics.mean([0, 1])</code>; or</li>
<li>Use <code>np.mean(np.array([0, 1]))</code>, or <code>np.array([0, 1]).mean()</code>.</li>
</ol>
</div>
<span class="comment-copy">I know <code>numpy</code> has its own <code>numpy.mean()</code> function, <code>scipy.stats</code> has <code>scipy.stats.mean()</code> I'm interested here in why I can't seem to combine <code>numpy</code> with <code>statistics</code>.</span>
<span class="comment-copy">wow 3 downvotes in 3 seconds.</span>
<span class="comment-copy">I am having a hard time understanding the downvotes. Can somebody explain?</span>
<span class="comment-copy">@PatrickT, upvote from me. This is a good question. The <a href="https://docs.python.org/3/library/statistics.html#module-statistics" rel="nofollow noreferrer">docs</a> are not clear that only specified types are permitted (list vs 3rd party list-like structures).</span>
<span class="comment-copy">Okay, so I should do <code>numpy.array([0,1.])</code>? I've been reading that <code>statistics</code> is designed for high precision and <code>numpy</code> for large data and speed. Is it unfortunate that they don't do so well for a two-data problem involving 0 and 1 (rhetorical question) or is it a design choice? Thanks for your great answer!</span>
<span class="comment-copy">@PatrickT, see update.</span>
