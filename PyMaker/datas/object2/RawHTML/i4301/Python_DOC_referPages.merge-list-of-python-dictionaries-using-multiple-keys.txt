<div class="post-text" itemprop="text">
<p>I want to merge two lists of dictionaries, using multiple keys. </p>
<p>I have a single list of dicts with one set of results:</p>
<pre><code>l1 = [{'id': 1, 'year': '2017', 'resultA': 2},
      {'id': 2, 'year': '2017', 'resultA': 3},
      {'id': 1, 'year': '2018', 'resultA': 3},
      {'id': 2, 'year': '2018', 'resultA': 5}]
</code></pre>
<p>And another list of dicts for another set of results:</p>
<pre><code>l2 = [{'id': 1, 'year': '2017', 'resultB': 5},
      {'id': 2, 'year': '2017', 'resultB': 8},
      {'id': 1, 'year': '2018', 'resultB': 7},
      {'id': 2, 'year': '2018', 'resultB': 9}]
</code></pre>
<p>And I want to combine them using the 'id' and 'year' keys to get the following:</p>
<pre><code>all = [{'id': 1, 'year': '2017', 'resultA': 2, 'resultB': 5},
       {'id': 2, 'year': '2017', 'resultA': 3, 'resultB': 8},
       {'id': 1, 'year': '2018', 'resultA': 3, 'resultB': 7},
       {'id': 2, 'year': '2018', 'resultA': 5, 'resultB': 9}]
</code></pre>
<p>I know that for combining two lists of dicts on a single key, I can use this:</p>
<pre><code>l1 = {d['id']:d for d in l1} 

all = [dict(d, **l1.get(d['id'], {})) for d in l2]  
</code></pre>
<p>But it ignores the year, providing the following incorrect result:</p>
<pre><code>all = [{'id': 1, 'year': '2018', 'resultA': 3, 'resultB': 5},
       {'id': 2, 'year': '2018', 'resultA': 5, 'resultB': 8},
       {'id': 1, 'year': '2018', 'resultA': 3, 'resultB': 7},
       {'id': 2, 'year': '2018', 'resultA': 5, 'resultB': 9}]
</code></pre>
<p>Treating this as I would in R, by adding in the second variable I want to merge on, I get a KeyError:</p>
<pre><code>l1 = {d['id','year']:d for d in l1} 

all = [dict(d, **l1.get(d['id','year'], {})) for d in l2]   
</code></pre>
<p>How do I merge using multiple keys?</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of <code>d['id','year']</code>, use the tuple <code>(d['id'], d['year'])</code> as your key.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can combine both list and groupby the resulting list on <code>id</code> and <code>year</code>. Then merge the dict together that have same keys. </p>
<p>Grouping can be achieved by using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>, and merge can be done using <a href="https://docs.python.org/3/library/collections.html#collections.ChainMap" rel="nofollow noreferrer"><code>collection.ChainMap</code></a></p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; from collections import ChainMap

&gt;&gt;&gt; [dict(ChainMap(*list(g))) for _,g in groupby(sorted(l1+l2, key=lambda x: (x['id'],x['year'])),key=lambda x: (x['id'],x['year']))]
&gt;&gt;&gt; [{'resultA': 2, 'id': 1, 'resultB': 5, 'year': '2017'}, {'resultA': 3, 'id': 1, 'resultB': 7, 'year': '2018'}, {'resultA': 3, 'id': 2, 'resultB': 8, 'year': '2017'}, {'resultA': 5, 'id': 2, 'resultB': 9, 'year': '2018'}]
</code></pre>
<p>Alternatively to avoid <code>lambda</code> you can also use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a></p>
<pre><code> &gt;&gt;&gt; from operator import itemgetter
 &gt;&gt;&gt; [dict(ChainMap(*list(g))) for _,g in groupby(sorted(l1+l2, key=itemgetter('id', 'year')),key=itemgetter('id', 'year'))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Expanding on <a href="https://stackoverflow.com/a/49997827/9209546">@AlexHall's suggestion</a>, you can use <code>collections.defaultdict</code> to help you:</p>
<pre><code>from collections import defaultdict

d = defaultdict(dict)

for i in l1 + l2:
    results = {k: v for k, v in i.items() if k not in ('id', 'year')}
    d[(i['id'], i['year'])].update(results)
</code></pre>
<p><strong>Result</strong></p>
<pre><code>defaultdict(dict,
            {(1, '2017'): {'resultA': 2, 'resultB': 5},
             (1, '2018'): {'resultA': 3, 'resultB': 7},
             (2, '2017'): {'resultA': 3, 'resultB': 8},
             (2, '2018'): {'resultA': 5, 'resultB': 9}})
</code></pre>
</div>
<span class="comment-copy">This worked, thanks Alex.</span>
