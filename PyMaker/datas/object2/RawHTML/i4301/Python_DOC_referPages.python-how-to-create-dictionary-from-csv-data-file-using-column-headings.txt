<div class="post-text" itemprop="text">
<p>I am trying to create a function that accepts the name of a .csv data file and a list of strings representing column headings in that file and return a dict object with each key being a column heading and the corresponding value being a numpy array of the values in that column of the data file.</p>
<p>My code right now:</p>
<pre><code>def columndata(filename, columns):
d = dict()
for col in columns:
with open(filename) as filein:
    reader = csv.reader(filein)
        for row in reader:
           if col in row:
               d.append(row)
return d
</code></pre>
<p>The sample CSV looks like:</p>
<pre><code>test1,test2
3,2
1,5
6,47
1,4
</code></pre>
<p>The columns file looks like:</p>
<pre><code>cols = ['test1', 'test2']
</code></pre>
<p>The end result should be a dictionary like this:</p>
<pre><code>{'test1':[3,1,6,1], 'test2':[2, 5, 4, 4]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer">DictReader</a> which parse the CSV data into a dict:</p>
<pre><code>import csv
from collections import defaultdict


def parse_csv_by_field(filename, fieldnames):
    d = defaultdict(list)
    with open(filename, newline='') as csvfile:
        reader = csv.DictReader(csvfile, fieldnames)
        next(reader)  # remove header
        for row in reader:
            for field in fieldnames:
                d[field].append(float(row[field]))  # thanks to Paulo!
    return dict(d)

print(parse_csv_by_field('a.csv', fieldnames=['cattle', 'cost']))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple pandas solution:</p>
<pre><code>import pandas as pd
df = pd.read_csv('filename', dtype='float') #you wanted float datatype
dict = df.to_dict(orient='list')
</code></pre>
<p>If you want to stick with regular python:</p>
<pre><code>import csv
with open(filename, 'r') as f:
    l = list(csv.reader(f))
    dict = {i[0]:[float(x) for x in i[1:]] for i in zip(*l)}
</code></pre>
<p>Or if you're a master of being pythonic like Adam Smith:</p>
<pre><code>import csv
with open(filename, 'r') as f:
    l = list(csv.reader(f))
    dict = {header: list(map(float, values)) for header, *values in zip(*l)}
</code></pre>
</div>
<span class="comment-copy">Why <code>extend</code> instead of <code>append</code>?</span>
<span class="comment-copy">Oups, I should have use append without the list you're right!</span>
<span class="comment-copy">In <code>pandas</code>, may be <code>.to_dict(orient='list')</code> will give desired result</span>
<span class="comment-copy">@0p3n5ourcE you're right! edited.</span>
<span class="comment-copy">Also, I think it is good to name <code>dict</code> to some other variable name <code>my_dict</code>. If you try: <code>my_dict = {i[0]:list(i[1:]) for i in zip(*l)}</code>, it will give list instead of tuple for values in <code>my_dict</code></span>
<span class="comment-copy">Good use of the <code>cols = zip(*rows)</code> idiom. Might I suggest <code>my_dict = {header: values for header, *values in zip(*l)}</code>? (Valid only in py3)</span>
<span class="comment-copy">@0p3n5ourcE I don't get that as a result, but you can convert it into a list while converting to floats</span>
