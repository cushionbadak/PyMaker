<div class="post-text" itemprop="text">
<p>I have a list like this : </p>
<pre><code>['Wi-Fi', '10.0.10.22', '255.255.0.0', '34-F3-9A-4C-D0-C4', 'VMware Network Adapter VMnet1', '192.168.10.111', '255.255.255.0', '00-50-56-C0-00-01', 'Loopback Pseudo-Interface 1', '127.0.0.1', '255.0.0.0', '00-00-00-00-00-00-00-E0']
</code></pre>
<p>How can i convert it to dictionary like below :</p>
<pre><code>{'1' : ['Wi-Fi', '10.0.10.22', '255.255.0.0', '34-F3-9A-4C-D0-C4'], '2' : ['VMware Network Adapter VMnet1', '192.168.10.111', '255.255.255.0', '00-50-56-C0-00-01'], '3' : ['Loopback Pseudo-Interface 1', '127.0.0.1', '255.0.0.0', '00-00-00-00-00-00-00-E0']}
</code></pre>
<p>Many thanks,
Quang</p>
</div>
<div class="post-text" itemprop="text">
<p>Inspired by the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">grouper recipe in itertools documentation</a>:</p>
<pre><code>l = ['Wi-Fi', '10.0.10.22', '255.255.0.0', '34-F3-9A-4C-D0-C4', 
     'VMware Network Adapter VMnet1', '192.168.10.111', '255.255.255.0', '00-50-56-C0-00-01', 
     'Loopback Pseudo-Interface 1', '127.0.0.1', '255.0.0.0', '00-00-00-00-00-00-00-E0']

d = {i: sublist for i, sublist in enumerate(zip(*([iter(l)]*4)))}

print(d)

#{0: ('Wi-Fi', '10.0.10.22', '255.255.0.0', '34-F3-9A-4C-D0-C4'), 
# 1: ('VMware Network Adapter VMnet1', '192.168.10.111', '255.255.255.0', '00-50-56-C0-00-01'), 
# 2: ('Loopback Pseudo-Interface 1', '127.0.0.1', '255.0.0.0', '00-00-00-00-00-00-00-E0')}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to split by 4 use this function for instance: <a href="https://stackoverflow.com/questions/312443">How do you split a list into evenly sized chunks?</a></p>
<pre><code>l = ['Wi-Fi', '10.0.10.22', '255.255.0.0', '34-F3-9A-4C-D0-C4', 'VMware Network Adapter VMnet1', '192.168.10.111', '255.255.255.0', '00-50-56-C0-00-01', 'Loopback Pseudo-Interface 1', '127.0.0.1', '255.0.0.0', '00-00-00-00-00-00-00-E0']

def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in range(0, len(l), n):
        yield l[i:i + n]

d = {ind:i for ind, i in enumerate(chunks(l, 4), 1)}
</code></pre>
<p>d returns:</p>
<pre><code>{1: ['Wi-Fi', '10.0.10.22', '255.255.0.0', '34-F3-9A-4C-D0-C4'],
 2: ['VMware Network Adapter VMnet1',
  '192.168.10.111',
  '255.255.255.0',
  '00-50-56-C0-00-01'],
 3: ['Loopback Pseudo-Interface 1',
  '127.0.0.1',
  '255.0.0.0',
  '00-00-00-00-00-00-00-E0']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that your rule is to split the list every four items, you can do it like so:</p>
<pre><code>res = {i+1: n[i*4:4*(i+1)] for i in range(len(n)//4)}
</code></pre>
<p>which gives:</p>
<pre><code>{1: ['Wi-Fi', '10.0.10.22', '255.255.0.0', '34-F3-9A-4C-D0-C4'], 
 2: ['VMware Network Adapter VMnet1', '192.168.10.111', '255.255.255.0', '00-50-56-C0-00-01'], 
 3: ['Loopback Pseudo-Interface 1', '127.0.0.1', '255.0.0.0', '00-00-00-00-00-00-00-E0']}
</code></pre>
<hr/>
<p>Or if you are allergic to slicing:</p>
<pre><code>n_i = iter(n)
res = {i+1: [next(n_i) for _ in range(4)] for i in range(len(n)//4)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>input = ['Wi-Fi', '10.0.10.22', '255.255.0.0', '34-F3-9A-4C-D0-C4', 'VMware Network Adapter VMnet1', '192.168.10.111', '255.255.255.0', '00-50-56-C0-00-01', 'Loopback Pseudo-Interface 1', '127.0.0.1', '255.0.0.0', '00-00-00-00-00-00-00-E0']

d = {}
for i in range(1,len(input)/3):
    d[i] = []

item = iter(input)
for i in range(len(d)):
    d[i+1] = [next(item) for x in range(len(d)+1)]
print d
</code></pre>
<p>The result as <code>d</code> would be <code>{1: ['Wi-Fi', '10.0.10.22', '255.255.0.0', '34-F3-9A-4C-D0-C4'], 2: ['VMware Network Adapter VMnet1', '192.168.10.111', '255.255.255.0', '00-50-56-C0-00-01'], 3: ['Loopback Pseudo-Interface 1', '127.0.0.1', '255.0.0.0', '00-00-00-00-00-00-00-E0']}</code></p>
</div>
<span class="comment-copy">what separates them? The keywords or the length?</span>
<span class="comment-copy">@AntonvBR I guess every four items get assigned to a new key</span>
<span class="comment-copy">@usr2564301 that's not a related duplicate...</span>
<span class="comment-copy">Guessing is not knowing! @Quang: what have you tried so far? Also, you don't have a string, but a list....</span>
<span class="comment-copy">@EV. Konis is right. separates 4 to be 1 group. Thanks all</span>
<span class="comment-copy">Thanks Sir, good day</span>
<span class="comment-copy">Your first solution is the most pythonic one. I don't think the second one improves anything</span>
<span class="comment-copy">@sciroccorics Well, it doesn't.. The only excuse is <i>slicing-allergy</i>.</span>
<span class="comment-copy">If someone suffers from slicing-allergy, maybe should he switch from Python to C ;-)</span>
<span class="comment-copy">Thanks, good day sir</span>
<span class="comment-copy">Thanks so much, you help me alot</span>
