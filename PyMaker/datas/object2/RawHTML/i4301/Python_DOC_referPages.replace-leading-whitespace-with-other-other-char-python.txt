<div class="post-text" itemprop="text">
<p>I want to replace my leading whitespace with a <code>nbsp;</code> per whitespace.</p>
<p>So:</p>
<pre><code>spam --&gt; spam
 eggs --&gt; &amp;nbsp;eggs
  spam eggs --&gt; &amp;nbsp;&amp;nbsp;spam eggs
</code></pre>
<p>I've seen a couple of solutions using regex, but all are in other languages.
I've tried the following in Python but with no luck. </p>
<pre><code>import re

raw_line = '  spam eggs'

line = re.subn('\s+', '&amp;nbsp;', raw_line, len(raw_line))
print(line) # outputs &amp;nbsp;&amp;nbsp;spam&amp;nbsp;eggs

line = re.sub('\s+', '&amp;nbsp;', raw_line)
print(line) # outputs &amp;nbsp;&amp;nbsp;spam&amp;nbsp;eggs

line = re.sub('^\s', '&amp;nbsp;', raw_line)
print(line) # outputs &amp;nbsp; spam eggs

line = re.sub('^\s+', '&amp;nbsp;', raw_line)
print(line) # outputs &amp;nbsp;spam eggs
</code></pre>
<p>Last line seems to be closest, but yet no cigar.</p>
<p>What is the proper way to replace each leading whitespace with <code>&amp;nbsp;</code> in Python? </p>
<p>If there is a clean way to do this without regex, I will gladly accept, but I couldn't figure it out by myself.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't even need <em>expensive</em> regex here, just strip out the leading whitespace and prepend a number of <code>&amp;nbsp;</code> characters for the number of stripped characters:</p>
<pre><code>def replace_leading(source, char="&amp;nbsp;"):
    stripped = source.lstrip()
    return char * (len(source) - len(stripped)) + stripped

print(replace_leading("spam"))         # spam
print(replace_leading(" eggs"))        # &amp;nbsp;eggs
print(replace_leading("  spam eggs"))  # &amp;nbsp;&amp;nbsp;spam eggs
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub</code></a> with a callback function and evaluate the length of the match:</p>
<pre><code>&gt;&gt;&gt; raw_line = '  spam eggs'
&gt;&gt;&gt; re.sub(r"^\s+", lambda m: "&amp;nbsp;" * len(m.group()), raw_line)
'&amp;nbsp;&amp;nbsp;spam eggs'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With <a href="https://pypi.org/project/regex/" rel="nofollow noreferrer">regex</a> module (answered in comment by <a href="https://stackoverflow.com/users/3832970/wiktor-stribi%c5%bcew">Wiktor Stribi≈ºew</a>)</p>
<pre><code>&gt;&gt;&gt; import regex
&gt;&gt;&gt; line = 'spam'
&gt;&gt;&gt; regex.sub(r'\G\s', '&amp;nbsp;', line)
'spam'

&gt;&gt;&gt; line = ' eggs'
&gt;&gt;&gt; regex.sub(r'\G\s', '&amp;nbsp;', line)
'&amp;nbsp;eggs'

&gt;&gt;&gt; line = '  spam eggs'
&gt;&gt;&gt; regex.sub(r'\G\s', '&amp;nbsp;', line)
'&amp;nbsp;&amp;nbsp;spam eggs'
</code></pre>
<p>From documentation:</p>
<blockquote>
<p>\G</p>
<p>A search anchor has been added. It matches at the position where each
  search started/continued and can be used for contiguous matches or in
  negative variable-length lookbehinds to limit how far back the
  lookbehind goes</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>A non <code>regex</code> solution:</p>
<pre><code>s = '  spam eggs'
s_s = s.lstrip()
print('&amp;nbsp;'*(len(s) - len(s_s)) + s_s)
# &amp;nbsp;&amp;nbsp;spam eggs
</code></pre>
</div>
<span class="comment-copy">With <code>regex</code> PyPi library, it is as easy as <code>regex.sub(r'\G\s', '&amp;nbsp;', s)</code>. With <code>re</code>, you need a kind of a <code>re.sub(r'^ +', lambda x: x.group().replace(' ', '&amp;nbsp;'), s)</code></span>
<span class="comment-copy">There is an answer here : <a href="https://stackoverflow.com/a/46555420/3832970">stackoverflow.com/a/46555420/3832970</a></span>
<span class="comment-copy">Took you a while searching for it.. Must say it may answer the direct question, but the title convention is not very effective on searching is it?</span>
<span class="comment-copy">Actually, it took me 20 seconds to find it. No idea if the title is good or bad.</span>
<span class="comment-copy">Well, nicely done then. I couldn't find it for half an hour. But I guess I need to sharpen my stack search skills then.</span>
<span class="comment-copy">Nice! I tried it without regex but couldn't figure it out. Went with your solution because I believe in the fact that if it can be done without regex, do it! In my opinion, not using regex is more readable and maintainable so by default more pythonic</span>
