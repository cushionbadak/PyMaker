<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/17575074/why-does-a-classmethods-super-need-a-second-argument">Why does a classmethod's super need a second argument?</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I try to access the classmethod of a parent from within <code>__init_subclass__</code> however that doesn't seem to work.
Suppose the following example code:</p>
<pre><code>class Foo:
    def __init_subclass__(cls):
        print('init', cls, cls.__mro__)
        super(cls).foo()

    @classmethod
    def foo(cls):
        print('foo')


class Bar(Foo):
    pass
</code></pre>
<p>which produces the following exception:</p>
<pre><code>AttributeError: 'super' object has no attribute 'foo'
</code></pre>
<p>The <code>cls.__mro__</code> however shows that <code>Foo</code> is a part of it: <code>(&lt;class '__main__.Bar'&gt;, &lt;class '__main__.Foo'&gt;, &lt;class 'object'&gt;)</code>.</p>
<p>So I don't understand why <code>super(cls).foo()</code> doesn't dispatch to <code>Foo.foo</code>. Can someone explain this?</p>
</div>
<div class="post-text" itemprop="text">
<p>A normal <code>super</code> object (what you normally get from calling <code>super(MyType, self)</code> or <code>super()</code> or <code>super(MyType, myobj)</code>) keeps track of both the type and the object it was created with. Whenever you look up an attribute on the <code>super</code>, it skips over <code>MyType</code> in the method resolution order, but if it finds a method it binds it to that <code>self</code> object.</p>
<p>An unbound <code>super</code> <em>has</em> no <code>self</code> object. So, <code>super(cls)</code> skips over <code>cls</code> in the MRO to find the method <code>foo</code>, and then binds it to… oops, it has nothing to call it on.</p>
<p>So, what things can you call a <code>classmethod</code> on? The class itself, or a subclass of it, or an instance of that class or subclass. So, any of those will work as the second argument to <code>super</code> here, the most obvious one being:</p>
<pre><code>super(cls, cls)
</code></pre>
<hr/>
<p>This is somewhat similar to the difference between staticmethods (bound <code>staticmethods</code> are actually bound to nothing) and <code>classmethods</code> (bound <code>classmethods</code> are bound to the class instead of an instance), but it's not quite that simple.</p>
<hr/>
<p>If you want to know why an unbound <code>super</code> doesn't work, you have to understand what an unbound <code>super</code> really is. Unfortunately, the only explanation in <a href="https://docs.python.org/3/library/functions.html#super" rel="noreferrer">the docs</a> is:</p>
<blockquote>
<p>If the second argument is omitted, the super object returned is unbound.</p>
</blockquote>
<p>What does this mean? Well, you can try to work it out from first principles as a parallel to what it means for a method to be unbound (except, of course, that unbound methods aren't a thing in modern Python), or you can read <a href="https://github.com/python/cpython/blob/master/Objects/typeobject.c#L7430" rel="noreferrer">the C source</a>, or the original <a href="https://www.python.org/download/releases/2.2.3/descrintro/#cooperation" rel="noreferrer">introduction to 2.2's class-type unification (including a pure-Python <code>super</code> clone)</a>.</p>
<p>A <code>super</code> object has a <code>__self__</code> attribute, just like a method object. And <code>super(cls)</code> is missing its <code>__self__</code>, just like <code>str.split</code> is.<sup>1</sup></p>
<p>You can't use an unbound <code>super</code> <em>explicitly</em> the way you can with an unbound method (e.g., <code>str.split('123', '2')</code> does the same as <code>'123'.split('2')</code>, but <code>super(cls).foo(cls)</code> doesn't work the same as <code>super(cls, cls).foo()</code>). But you can use them <em>implicitly</em>, the same way you do with unbound methods all the time without normally thinking about it.</p>
<p>If you don't know <a href="http://stupidpythonideas.blogspot.com/2013/06/how-methods-work.html" rel="noreferrer">how methods work</a>, the tl'dr is: when you evaluate <code>myobj.mymeth</code>, Python looks up <code>mymeth</code>, doesn't find it on <code>myobj</code> itself, but does find it on the type, so it checks whether it's a <a href="https://docs.python.org/3/howto/descriptor.html" rel="noreferrer">non-data descriptor</a>, and, if so, calls its <code>__get__</code> method to bind it to <code>myobj</code>.</p>
<p>So, unbound methods<sup>2</sup> are non-data descriptors whose <code>__get__</code> method returns a bound method. Unbound <code>@classmethod</code>s are similar, but their <code>__get__</code> ignores the object and returns a bound method bound to the class. And so on. </p>
<p>And unbound <code>super</code>s are non-data descriptors whose <code>__get__</code> method returns a bound <code>super</code>.</p>
<hr/>
<p>Example (credit to wim for coming up with the closest thing to a use for unbound <code>super</code> that I've seen):</p>
<pre><code>class A:
    def f(self): print('A.f')
class B(A):
    def f(self): print('B.f')
b = B()
bs = super(B)
B.bs = bs
b.bs.f()
</code></pre>
<p>We created an unbound super <code>bs</code>, stuck it on the type <code>B</code>, and then <code>b.bs</code> is a normal bound super, so <code>b.bs.f</code> is <code>A.f</code>, just like <code>super().f</code> would have been inside a <code>B</code> method.</p>
<p>Why would you want to do that? I'm not sure. I've written all kinds of ridiculously dynamic and reflective code in Python (e.g., for transparent proxies to other interpreters), and I can't remember ever needing an unbound <code>super</code>. But if you ever need it, it's there.</p>
<hr/>
<p><sub>1. I'm cheating a bit here. First, unbound methods aren't a thing anymore in Python 3—but functions work the same way, so Python uses them where it used to use unbound methods. Second, <code>str.split</code>, being a C builtin, wasn't properly an unbound method even in 2.x—but it acts like one anyway, at least as far as we're concerned here.</sub></p>
<p><sub>2. Actually plain-old functions.</sub></p>
</div>
<span class="comment-copy">Change <code>super(cls)</code> to <code>super(cls, cls)</code>. With the single-argument form, you end up looking for a <code>foo</code> method in the parent class of <code>Foo</code> (which is <code>object</code>).</span>
<span class="comment-copy">Why are you using <code>super(cls)</code> here? Unbound supers are rarely useful, and they aren't what you're looking for here. If you're just trying to call the parent class of <code>cls</code>'s <code>foo</code> classmethod, that's <code>super(cls, cls).foo()</code>, just like you'd do with an instance for an method. If you're trying to do something different… then what?</span>
<span class="comment-copy">And if you actually want an explanation of <i>why</i> this doesn't do what you want, you'll need some background before it can be explained. Do you know what descriptors are, how methods work in general, and how super works in general, and just need to know how unbound supers work? Or do you need one of those more fundamental parts explained?</span>
<span class="comment-copy">@abarnert Admittedly I have never used unbound super before and probably got confused by <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">the docs</a>: <b>super([type[, object-or-type]])</b> <i>Return a proxy object that delegates method calls to a parent or sibling class of type. [...]</i>. So I probably need a refresher on this; the rest I am familiar with. But in the end it makes sense what you mentioned.</span>
<span class="comment-copy">Thanks for the thorough explanation. Especially your last comment <i>"And unbound supers are non-data descriptors whose <code>__get__</code> method returns a bound super."</i> made it click.</span>
<span class="comment-copy">@a_guest Yeah, that's really the key—"an unbound <code>X</code>" means "<code>X.__get__</code> returns a bound X". Except that general rule isn't stated anywhere, and the only special case of it that <i>was</i> documented anywhere no longer even exists in Python 3, so… not the most discoverable of rules. By the way, I think there ought to be a better way to organize this answer so it'll help more people, but I can't think of what it is; if you have any ideas, that would be great.</span>
<span class="comment-copy">Maybe that's something for a more general question about the interplay between bound and unbound super? There's <a href="https://stackoverflow.com/q/22403897/3767239">this SO question</a> about unbound super but the answers are completely off; no other SO resource is really dealing with that topic. But in general I think I'd start with explaining MRO and motivating the usage of (bound) super and then switch to unbound super, explaining how it's created, what it is (along with descriptors), conversion to bound super, what's its purpose and some use cases (though those seem to be hard to find).</span>
<span class="comment-copy">@a_guest That would definitely be a lot clearer but it seems like it might be way too long for an SO answer (especially with my verbosity). It might make an interesting blog post—but without some use cases for unbound supers, it's still pretty hard to motivate. As for its purpose, I suspect it's might just be there because it was trivial to implement once you've built descriptors and super for Python 2.2, so Guido just implemented it without worrying about whether there was a use case. That probably wouldn't happen in modern Python, but things were different back then.</span>
