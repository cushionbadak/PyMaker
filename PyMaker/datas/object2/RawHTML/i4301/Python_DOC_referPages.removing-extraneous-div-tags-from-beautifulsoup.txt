<div class="post-text" itemprop="text">
<p>I'm trying to scrape text from a website and can't figure out how to remove an extraneous div tag. Code looks like:</p>
<pre><code>import requests
from bs4 import BeautifulSoup

team_urls = 
     ['http://www.lyricsfreak.com/e/ed+sheeran/shape+of+you_21113143.html/',
   'http://www.lyricsfreak.com/e/ed+sheeran/thinking+out+loud_21083784.html',
   'http://www.lyricsfreak.com/e/ed+sheeran/photograph_21058341.html']

for url in team_urls:
     page = requests.get(url)
     soup = BeautifulSoup(page.text, 'html.parser')

     for e in soup.find_all('br'):
         e.replace_with('\n')

     lyrics = soup.find(class_='dn')

     print(lyrics)
</code></pre>
<p>This is giving me an output of:</p>
<pre><code>&lt;div class="dn" id="content_h"&gt;The club isn't the best place...
</code></pre>
<p>I would like to remove the div tag.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Full code:</strong></p>
<pre><code>import requests
from bs4 import BeautifulSoup

urls = ['http://www.lyricsfreak.com/e/ed+sheeran/shape+of+you_21113143.html/',
        'http://www.lyricsfreak.com/e/ed+sheeran/thinking+out+loud_21083784.html',
        'http://www.lyricsfreak.com/e/ed+sheeran/photograph_21058341.html']

for url in urls:
    page = requests.get(url)
    page.encoding = 'utf-8'
    soup = BeautifulSoup(page.text, 'html.parser')

    div = soup.select_one('#content_h')

    for e in div.find_all('br'):
        e.replace_with('\n')

    lyrics = div.text
    print(lyrics)
</code></pre>
<p>Notice that sometimes the wrong encoding is used:</p>
<blockquote>
<p>I may be crazy donât mind me</p>
</blockquote>
<p>That's why I set it manually: <code>page.encoding = 'utf-8'</code>. Fragment of the <a href="http://docs.python-requests.org/en/master/api/#requests.Response.text" rel="nofollow noreferrer">requests docs</a> mentioning this situation:</p>
<blockquote>
<p>The encoding of the response content is determined based solely on HTTP headers, following RFC 2616 to the letter. If you can take advantage of non-HTTP knowledge to make a better guess at the encoding, you should set r.encoding appropriately before accessing this property.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You could use regular expressions</p>
<pre><code>import requests
import re

from bs4 import BeautifulSoup

team_urls = ['http://www.lyricsfreak.com/e/ed+sheeran/shape+of+you_21113143.html/',
             'http://www.lyricsfreak.com/e/ed+sheeran/thinking+out+loud_21083784.html',
             'http://www.lyricsfreak.com/e/ed+sheeran/photograph_21058341.html']

for url in team_urls:
    page = requests.get(url)
    soup = BeautifulSoup(page.text, 'html.parser')

    for e in soup.find_all('br'):
        e.replace_with('\n')

    lyrics = soup.find(class_='dn')
    cleanr = re.compile('&lt;.*?&gt;')
    cleantext = re.sub(cleanr, '', lyrics.text)

    print(cleantext)
</code></pre>
<p>Which will remove everything between the &lt; and &gt;</p>
<p>By using the special characters mentioned in the python docs</p>
<p>"</p>
<p>.
    (Dot.) In the default mode, this matches any character except a newline. If the DOTALL flag has been specified, this matches any character including a newline.</p>
<p>*
    Causes the resulting RE to match 0 or more repetitions of the preceding RE, as many repetitions as are possible. ab* will match ‘a’, ‘ab’, or ‘a’ followed by any number of ‘b’s.</p>
<p>?
    Causes the resulting RE to match 0 or 1 repetitions of the preceding RE. ab? will match either ‘a’ or ‘ab’.</p>
<p>"</p>
<p>from <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">https://docs.python.org/3/library/re.html</a></p>
</div>
<span class="comment-copy">You can get text from found div like “str = lyrics.text”</span>
<span class="comment-copy">Thanks. That did what I wanted it to do. One question though: why did the div = soup.select_one('#content_h') do what I had commissioned lyrics = soup.find(class_='dn') to do?</span>
<span class="comment-copy">That's because <code>content_h</code> is the id of the element you want to target. <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id" rel="nofollow noreferrer">ID</a> is a unique identifier, so it's usually better to use it if you want to target one specific element. <code>#</code> is a CSS selector, you can read more <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">Awesome. Thanks. That's very helpful.</span>
<span class="comment-copy">You don't need to use regex at all. <code>lyrics.text</code> is enough :P there is nothing that matches <code>&lt;.*&gt;</code> left in the string, therefore calling <code>re.sub</code> is unnecessary.</span>
