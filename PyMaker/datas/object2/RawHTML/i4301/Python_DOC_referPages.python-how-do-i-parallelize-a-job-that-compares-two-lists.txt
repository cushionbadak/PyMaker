<div class="post-text" itemprop="text">
<p>I have two lists and need to compare and calculate element by element. As these lists get larger, performance is suffering.  Someone recommended breaking one of the lists into N sections and running the comparison in parallel. How do I run these in parallel?</p>
<pre><code>key={}
#compare each list, element by element
for i in range(len(list1)):
    for j in range(len(list2)):
        matched = False
        try:
            matched = match_function(list[i]['typeforma'], list[i]['typeformb'],list[j]['typeforma'], list[j]['typeformb'], ) 
        except:
            print("Error",i,j)
        if matched:
            # store two matches in the dictionary
            key[list2[j]['id']]=list1[i]['identifier']
            break;
        j+=1
    i+=1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you actually do need to compare the cartesian product (every element in <code>list1</code> against every element in <code>list2</code>, as opposed to just comparing each element in <code>list1</code> with the corresponding element in <code>list2</code>), the easiest way is to just replace your outer loop with a <code>map</code> call to a <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer"><code>ProcessPoolExecutor</code></a> or a <a href="https://docs.python.org/3/library/multiprocessing.html#using-a-pool-of-workers" rel="nofollow noreferrer"><code>Pool</code></a>. </p>
<p>The only trick is that you don't want to try to share that mutable <code>key</code> dict; instead, pass back the individual dicts and merge at the end.</p>
<p>For example:</p>
<pre><code>def compare_to_list2(i):
    key = {}
    for j in range(len(list2)):
        matched = False
        try:
            matched = match_function(list[i]['typeforma'], list[i]['typeformb'],list[j]['typeforma'], list[j]['typeformb'], ) 
        except:
            print("Error",i,j)
        if matched:
            # store two matches in the dictionary
            key[list2[j]['id']]=list1[i]['identifier']
            break;
        j+=1
    return key

with concurrent.futures.ProcessPoolExecutor as x:
    key = {}
    for result in x.map(compare_to_list2, range(len(list1)), chunksize=1024):
        key.update(result)
</code></pre>
<p>Experiment with <code>chunksize</code>, but first, there are ways to improve on this. For just one example, you should really be iterating directly over <code>list1</code> and <code>list2</code>, not over <code>range(len(list1))</code> and <code>range(len(list2))</code>â€”and doing that won't just make things simpler, but also more efficient, especially with large chunksizes. In fact, it's often best to simplify first, and then optimize.</p>
</div>
<span class="comment-copy">Provide more information about the lists. Do they have the same <code>len</code>? whats in them? Can you provide sample input and expected output?</span>
<span class="comment-copy">Of course performance is suffering, you're using an n^2 algorithm. Fix that instead of trying to run multiple threads.</span>
<span class="comment-copy">@MarkRansom I think he's intentionally doing the product, not the zip.</span>
