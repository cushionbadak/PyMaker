<div class="post-text" itemprop="text">
<p>I can make the below example to run on a different thread (for every function I'm calling) but I'm having a problem when I'm trying to combine it with Classes and delegation.</p>
<p>In the below example calling <code>threading.current_thread()</code> into the classes, I always get the same thread.</p>
<p>Any ideas why this is happening?</p>
<pre><code>import threading
import time

class FirstClass(threading.Thread):

    def __init__(self, obj):
        threading.Thread.__init__(self)
        self.obj = obj
        print(threading.current_thread())


    def compute(self, num_list):
        for n in num_list:
            time.sleep(0.2)
            print("Square: {}".format(n*n))
            self.obj.print_it(n)


class SecondClass(threading.Thread):

    def __init__(self):
        threading.Thread.__init__(self)
        print(threading.current_thread())


    def print_it(self, n):
        time.sleep(0.2)
        print("Cube: {}".format(n*n*n))





t = time.time()
t1 = SecondClass()
t2 = FirstClass(t1)
t2.compute([1,2,3,4,5])

t1.start()
t2.start()

t1.join()
t2.join()

print("Done in: {}".format(time.time()-t))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Okay, few points before going to the solution which I got after trying quite a while: <em>(The working code is below, if you want to skip the explanation)</em></p>
<p>(i) If you look at what <a href="https://docs.python.org/3/library/threading.html#threading.Thread.start" rel="nofollow noreferrer">Thread.start()</a> does, you will see that it is mentioned that it</p>
<blockquote>
<p>arranges for <code>run()</code> method to be invoked in a separate thread of control.</p>
</blockquote>
<p>So, what that means is, currently, without <code>run()</code> functions in your code for the thread classes, it is not going to invoke the other functions in a separate thread of control.</p>
<p>Hence the main thread is executing all of it. To understand this, place two of the run function definitions in each of your thread class: </p>
<pre><code>def run(self):
    print(threading.current_thread())
</code></pre>
<p>and try running it. You will see that now, the separate threads are invoked.</p>
<p>(ii) So how would you go about calling your custom functions from <code>run()</code>?</p>
<p>When you look at <a href="https://docs.python.org/3/library/threading.html#threading.Thread.run" rel="nofollow noreferrer">Thread.run()</a>'s definition, it says</p>
<blockquote>
<p>The standard run() method invokes the callable object passed to the objectâ€™s constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively.</p>
</blockquote>
<p>So one way to do this is to you pass your arguments in the call <code>t1 = SecondClass(args = [1,2,3,4,5])</code> and receive and initialize it in <code>__init__</code> as:</p>
<pre><code>def __init__(self, args):
</code></pre>
<p>Your <code>run()</code> function would then call your <code>compute</code> or <code>print_it</code>function like</p>
<pre><code>def run(self):
    print_it(self, self.args)
</code></pre>
<p>(iii) But now, how are you going to call the other thread each time in the loop? You can only start a thread <em>once</em> and if you try giving a <code>self.object.run</code> for the <code>t1</code> thread in the loop each time, it is <em>not</em> going to go back to the thread's execution. It will continue that function in the same thread <code>t2</code>.</p>
<p>(iv) And also, how are you going to pass the current list value to <code>t1</code>, execute the cube root, and then jump back to <code>t2</code> and proceed with square of the next number?</p>
<p>For solving (iii) and (iv), you would need both a <code>Queue</code> (where the shared list can reside) and a synchronization mechanism that can safely execute one thread, then give control to the next, take it back again, etc.</p>
<p>Remember, threads share the same address space, so we should be careful to avoid race conditions, and only one thread can use the scheduler at a time. This is why a synchronization mechanism is needed.</p>
<p>Okay, so there are better ways to solve your problem (like just have two functions for square and cube and create two threads that call those functions directly without involving a class for each thread) but I have worked out a solution you can use to achieve your desired result.</p>
<p><strong>Here is the code (with comments as explanations):</strong></p>
<pre><code>import threading, queue # need a queue for storing the shared values between threads
import time

class FirstClass(threading.Thread):

    def __init__(self, obj, args): # pass the extra args here
        threading.Thread.__init__(self)
        self.obj = obj
        self.args = args # initialize the args

    def run(self):
        compute(self, self.args)

def compute(self, args):
    num_list = args[0]
    lock = args[2] # lock object was passed in args[2]
    for n in num_list:
        lock.acquire_for('A') # acquire the lock
        time.sleep(0.1)
        print("Square: {}".format(n*n))
        print(threading.current_thread())
        args[1].put(n) # args[1] is the queue object, put number in queue
        lock.release_to('B') # release the lock to waiting thread

class SecondClass(threading.Thread):

    def __init__(self, args):
        threading.Thread.__init__(self)
        self.args = args
    def run(self):
        print_it(self, self.args)

def print_it(self, args):
    lock = args[2]
    num_list = args[0]
    for a in num_list: # this is to iterate the exact number of times t2 iterates,
# so that the lock is released only by the thread that acquired it
# here we are alternating, so without this, the execution would stop
        lock.acquire_for('B') # acquire when t2 releases lock
        n = args[1].get() # args[1] is the queue object, get from queue
        time.sleep(0.5)
        print("Cube: {}".format(n*n*n))
        print(threading.current_thread())
        lock.release_to('A') # give back lock

class LockWithOwner:
    lock = threading.RLock() 

    owner = 'A'

    def acquire_for(self, owner):
        n = 0
        while True:
            self.lock.acquire()
            if self.owner == owner:
                break
            n += 1
            self.lock.release()
            time.sleep(0.001)
        print('Waited for {} to be the owner {} times'.format(owner, n))

    def release_to(self, new_owner):
        self.owner = new_owner
        self.lock.release()

if __name__ == '__main__':
    q = queue.Queue()
    t = time.time()
    lock = LockWithOwner()
    lock.owner = 'A'
    args_list = [1,2,3,4,5]
    t1 = SecondClass(args = (args_list, q, lock)) # pass the number list, queue &amp; lock object
    t2 = FirstClass(t1, args = (args_list, q, lock))

    t1.start()
    t2.start()
    t1.join()
    t2.join()

    print("Done in: {}".format(time.time()-t))
</code></pre>
<p>Read more about the lock used here: <a href="https://docs.python.org/2/library/threading.html#threading.RLock" rel="nofollow noreferrer">threading.RLock</a></p>
<p>So, here what the lock class does is that, initially thread t1 can only start a job when owner is set to A, and thread t2 can only start a job when owner is set to B. Once thread calls <code>acquire_for</code>, it acquires the lock to scheduler, executes, and when thread calls <code>release_to</code>, it assigns the owner to the passed argument (the other thread) and releases the lock.</p>
<p>Your output on running the above code would be:</p>
<blockquote>
<p><code>Waited for A to be the owner 0 times</code></p>
<p><code>Square: 1</code></p>
<p><code>&lt;FirstClass(Thread-2, started 12360)&gt;</code></p>
<p><code>Waited for B to be the owner 1 times</code></p>
<p><code>Cube: 1</code></p>
<p><code>&lt;SecondClass(Thread-1, started 204)&gt;</code></p>
<p><code>Waited for A to be the owner 1 times</code></p>
<p><code>Square: 4</code></p>
<p><code>&lt;FirstClass(Thread-2, started 12360)&gt;</code></p>
<p><code>Waited for B to be the owner 1 times</code></p>
<p><code>Cube: 8</code></p>
<p><code>&lt;SecondClass(Thread-1, started 204)&gt;</code></p>
<p><code>Waited for A to be the owner 1 times</code></p>
<p><code>Square: 9</code></p>
<p><code>&lt;FirstClass(Thread-2, started 12360)&gt;</code></p>
<p><code>Waited for B to be the owner 1 times</code></p>
<p><code>Cube: 27</code></p>
<p><code>&lt;SecondClass(Thread-1, started 204)&gt;</code></p>
<p><code>Waited for A to be the owner 1 times</code></p>
<p><code>Square: 16</code></p>
<p><code>&lt;FirstClass(Thread-2, started 12360)&gt;</code></p>
<p><code>Waited for B to be the owner 0 times</code></p>
<p><code>Cube: 64</code></p>
<p><code>&lt;SecondClass(Thread-1, started 204)&gt;</code></p>
<p><code>Waited for A to be the owner 1 times</code></p>
<p><code>Square: 25</code></p>
<p><code>&lt;FirstClass(Thread-2, started 12360)&gt;</code></p>
<p><code>Waited for B to be the owner 1 times</code></p>
<p><code>Cube: 125</code></p>
<p><code>&lt;SecondClass(Thread-1, started 204)&gt;</code></p>
<p><code>Done in: 3.1351969242095947</code></p>
</blockquote>
<p>Is this explanation clear to you? If you have any doubt, let me know. Hope this helps! :)</p>
</div>
<span class="comment-copy">Thank you for the answer. The comments are really helpful. The logic is the same if i want to run the compute() on the main thread and print_it() on thread 1?</span>
<span class="comment-copy">Your welcome, glad I could help :) Yes, the logic would be the same, you would need synchronization mechanisms because you start two separate blocks of executions (threads) so you would need a lock/semaphore to decide which thread gets to use the CPU at one time</span>
