<div class="post-text" itemprop="text">
<p>the directions that were given asked for code that returned the length of each word in a string. so like it would count the number of letters in each word and print it next to the word
I have this code:</p>
<pre><code>def word_lengths(a):
    a = a.lower()
    c = list(a)
    a = ""
    for x in c:
        if x == "," or x == "." or x == "'" or x == "!" or x == "?":
            c[c.index(x)] = ""
    for x in c:
        a += x
    y = a.split()
    z = {}
    for x in y:
        z[x] = len(x)
    return z
print(word_lengths("I ate a bowl of cereal out of a dog bowl today."))
</code></pre>
<p>Which returns: </p>
<pre><code>{'dog': 3, 'bowl': 4, 'a': 1, 'out': 3, 'of': 2, 'ate': 3, 'cereal': 6, 'i': 1, 'today': 5}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using a simple iteration</p>
<p><strong>Demo:</strong></p>
<pre><code>def word_lengths(s):
    d = {}
    for i in s.split():           #Split by space
        l = len(i)
        if l not in d:            #Create len as key
            d[l] = [i]
        else:
            d[l].append(i)  
    return d


print(word_lengths("I ate a bowl of cereal out of a dog bowl today."))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>{1: ['I', 'a', 'a'], 2: ['of', 'of'], 3: ['ate', 'out', 'dog'], 4: ['bowl', 'bowl'], 6: ['cereal', 'today.']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>collections.defaultdict</code> for an O(n) solution:</p>
<pre><code>from collections import defaultdict
from string import punctuation

def word_lengths(x):
    table = str.maketrans(punctuation, ' ' * len(punctuation))
    # alternatively, table = str.maketrans({key: None for key in punctuation})
    x = x.translate(table).lower()
    d = defaultdict(list)
    for word in x.split():
        d[len(word)].append(word)
    return d

res = word_lengths("I ate a bowl of cereal out of a dog bowl today.")

# defaultdict(list,
#             {1: ['i', 'a', 'a'],
#              2: ['of', 'of'],
#              3: ['ate', 'out', 'dog'],
#              4: ['bowl', 'bowl'],
#              5: ['today'],
#              6: ['cereal']})
</code></pre>
<p><strong>Explanation</strong></p>
<ul>
<li>First remove punctuation (as per <a href="https://stackoverflow.com/a/49902112/9209546">@Patrick's solution</a>) and make your string lower case.</li>
<li>Initialise a <code>defaultdict</code> of lists.</li>
<li>Split your list by whitespace, iterate words and append elements to your dictionary list values.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Here's a version that also deals with punctuation, using <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate</code></a> </p>
<pre><code>def word_lengths(s, remove='.,!?'):
    trans=str.maketrans('', '', remove)
    s = s.lower().translate(trans)
    d = defaultdict(list)
    for word in s.split():
        d[len(word)].append(word)
    return dict(d)  # Probably unnecessary and return d would work

word_lengths("I ate a bowl of cereal out of a dog bowl today.")
</code></pre>
<p>gives us</p>
<pre><code>{1: ['i', 'a', 'a'],
 2: ['of', 'of'],
 3: ['ate', 'out', 'dog'],
 4: ['bowl', 'bowl'],
 5: ['today'],
 6: ['cereal']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this with <code>defaultdict</code>, one of the many useful data structures in the standard library <code>collections</code> module.</p>
<pre><code>from collections import defaultdict
import re

def word_lengths(text):
    d = defaultdict(list)
    for word in re.findall(r'\w+', text.lower()):
        d[len(word)].append(word)
    return d
</code></pre>
<p>We use <code>re.findall</code> to match only words, without whitespace and punctuation. If you want to include hyphens and apostrophes as word characters, you can adjust the regular expression.</p>
</div>
<div class="post-text" itemprop="text">
<p>Can simply loop the values to generate a dict. </p>
<pre><code>In [1]: c = defaultdict(list)

In [2]: for word in "I ate a bowl of cereal out of a dog bowl today.".split(' '):
...:     c[len(word)].append(word)
...:     

In [3]: c
Out[4]: 
defaultdict(list,
            {1: ['I', 'a', 'a'],
             2: ['of', 'of'],
             3: ['ate', 'out', 'dog'],
             4: ['bowl', 'bowl'],
             6: ['cereal', 'today.']})
</code></pre>
</div>
<span class="comment-copy">You have build a dict that reverses your result.</span>
<span class="comment-copy">thank you! all of the other comments im sure were correct but this solution made the most sense to me with what i've learned so far</span>
<span class="comment-copy">You are welcome :)</span>
<span class="comment-copy">I would change your <code>table = str.maketrans('', '', punctuation)</code> to <code>table = str.maketrans(punctuation, ' ' * len(punctuation))</code>. This replaces with a whitespace so words joined by <code>-</code> are not merged.</span>
<span class="comment-copy">@pstatix - thank you, updated.</span>
