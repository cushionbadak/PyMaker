<div class="post-text" itemprop="text">
<p>I am learning python and I'm trying to run some terminal command lines using python; eg: speed test and ping. I am using functional programming as my method of programming. However, upon reading more and browsing more with functional programming based from docs.python.org<a href="https://docs.python.org/3/howto/functional.html" rel="nofollow noreferrer">1</a>. I don't think that I am doing it the right way. <br/><br/>My question is:<br/> Is it good for a function to not have an argument/parameters and just input the command/s directly inside it? <br/>And is it really a good option to use os.system or is there a better module to use?</p>
<p>Here is the sample of my code.</p>
<pre><code>#!/usr/bin/python3
# tasks.py

import os

def task_speedtest():
    os.system("speedtest-cli &gt;&gt; /Desktop/logs")

def task_ping():
    os.system("ping www.google.com -c5 &gt;&gt; /Desktop/logs")

task_speedtest()
task_ping()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Regarding your first question, there is nothing wrong with directly executing the commands in the function without using arguments/parameters in your function. </p>
<p>You could always add a parameter in your function definition to specify the path for example so that you can call the function and execute the command using different directories:</p>
<pre><code>def task_speedtest(path):
    os.system("speedtest-cli &gt;&gt; " + path)

def task_ping():
    os.system("ping www.google.com -c5 &gt;&gt; " + path)

path = "/Desktop/logs"
task_speedtest(path)
task_ping(path)
</code></pre>
<hr/>
<p>Regarding your second question, <strong>yes, there is a better module to use than <code>os.system</code></strong>.</p>
<p>There exists an upgraded version of <code>os.system</code> which is <a href="https://docs.python.org/3.6/library/subprocess.html" rel="nofollow noreferrer"><code>Subprocess</code></a>, according to the official Python documentation <em>(Python 3.6)</em>:</p>
<blockquote>
<p>The subprocess module allows you to spawn new processes, connect to
  their input/output/error pipes, and obtain their return codes. This
  module intends to replace several older modules and functions.</p>
<p>The recommended approach to invoking subprocesses is to use the run() function for all use cases it can handle.</p>
<pre><code>subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None)
</code></pre>
<p>Run the command described by args. Wait for command to complete, then return a CompletedProcess instance</p>
</blockquote>
<p>There is even a section on how to replace <code>os.system</code> with the new subprocess <a href="https://docs.python.org/3/library/subprocess.html#replacing-os-system" rel="nofollow noreferrer">here</a>:</p>
<pre><code>sts = os.system("mycmd" + " myarg")
# becomes
sts = call("mycmd" + " myarg", shell=True)
</code></pre>
<p>I suggest you read more about the new module in the official Python documentation of Subprocess here: <a href="https://docs.python.org/3.6/library/subprocess.html" rel="nofollow noreferrer">https://docs.python.org/3.6/library/subprocess.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use the speedtest-cli API as detailed in the <a href="https://github.com/sivel/speedtest-cli/wiki" rel="nofollow noreferrer">wiki</a></p>
<p>(following code from the wiki)</p>
<pre><code>import speedtest

servers = []
# If you want to test against a specific server
# servers = [1234]

s = speedtest.Speedtest()
s.get_servers(servers)
s.get_best_server()
s.download()
s.upload()
s.results.share()

results_dict = s.results.dict()
</code></pre>
<p>for pinging in python, see <a href="https://stackoverflow.com/questions/2953462/pinging-servers-in-python">this question and many answers</a></p>
</div>
<span class="comment-copy">you can import speedtest, as it is actually a python module, and call the functions natively. Please see documentation of speedtest-cli</span>
<span class="comment-copy">You should not use <code>os.system</code>, rather, use the newer, more powerful <a href="https://docs.python.org/3/library/subprocess.html#module-subprocess" rel="nofollow noreferrer">subprocess</a> module.</span>
<span class="comment-copy">Thank you. I got a better view of functions now. I will try to use subprocess now instead of os.system. This is really helpful.</span>
<span class="comment-copy">Thank you for the answer. This is a good one since this can return the result as dict which maybe good for getting data.</span>
