<div class="post-text" itemprop="text">
<p>So I am trying to get this output </p>
<pre><code>No Column Sum
0 Company 28
1 Booth 28
2 Full-Time 25
3 Full-Time Visa Sponsor 5
4 Part-Time 1
5 Internship 18
6 Freshman 7
7 Sophomore 9
8 Junior 17
9 Senior 24
10 Post-Bacs 17
11 MS 17
12 PhD 6
13 Alumni 15
</code></pre>
<p>However, I am getting this error</p>
<p><em>TypeError: tuple indices must be integers or slices, not str</em></p>
<p>My code is the following</p>
<pre><code>data_employer = {'No': ('Column', 'Sum')}
for vari in range(14):
    sum = 0
    for row in ReadyColumn:
        if row[vari] != '':
            sum =+1
        data_employer = (companies[vari], sum)
for num in data_employer:
    print(num, data_employer [num][0], data_employer[num][1])
outData = []
</code></pre>
<p>Is it because I need to not call num but the row number? I thought it could work this way though. Any input would be appreciated. Thank you!</p>
<pre><code>Traceback (most recent call last):
  File "/Prj3Assignt3.py", line 42, in &lt;module&gt;
    print(num, data_employer[num][0], data_employer[num][1])
TypeError: tuple indices must be integers or slices, not str
</code></pre>
<p>Added with error</p>
<pre><code>import csv
filename = "CFSpring2018Employers.csv"                         #I assigned the file to a variable
f = open(filename)                        #I couldn't leave it default due to UTF-8 error from orginial
reader = csv.reader(f)
f.close

#Dictionary for part 1 'Companies'
companies = {}
countComp = 0 #Sets the 'rows to 0

for row in reader: #reader has assigned value to read csv info
    if row[0] == 'Company': #Searches row called 'Company'
        for item in row:
            companies[countComp] = item #Everytime it shows it puts it into the dictionary
            countComp += 1
        break

for i in companies: #Allows me to print numbers next to the companies dict
    print(i, companies[i])

ReadyColumn = []    #Making a new list for cleaned up data
NumCow = 0
for row in reader:
    NumCow +=1
    if NumCow &gt; 0 and NumCow &lt; 31 and row[0] != '': #This will read the rows between 0-31, and if the row contains 'Nothing' it skips
        ReadyColumn.append(row) #Updates the list
rowNum = -1 #Resets the counter

for row in ReadyColumn:
    rowNum += 1
    print(rowNum, ','.join(row)) #Joins any weird marks and prints as desired output

data_employer = {'No', 'Column', 'Sum'}
for vari in range(14):
    sum = 0
    for row in ReadyColumn:
        if row[vari] != '':
            sum =+1
        cleaner_employer = (companies[vari], sum)
for i in data_employer:
    print(i, data_employer,i[0], data_employer,i[1])
</code></pre>
<p>So this is the code I wrote to help get to this point. I am reading a csv file without <strong>PANDAS</strong> (because I can't use them for the project)</p>
</div>
<div class="post-text" itemprop="text">
<p>You redefine <code>data_employer</code> in the middle of your function to a tuple: <code>data_employer = (companies[vari], sum)</code>. Use another name to avoid this.</p>
<p>In the following code:</p>
<pre><code>for num in data_employer:
    print(num, data_employer [num][0], data_employer[num][1])
</code></pre>
<p>num will first be <code>companies[vari]</code>, then <code>sum</code>. <code>companies[vari]</code> is probably a string. Tuple can only be access with integer. dict can by access with a key (any hashable object).</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>TL;DR:</strong> You are overwriting your variable name and changing its data type.</p>
<p>You've overwritten your dictionary with a tuple! Lets take a look...</p>
<p>First, your code in full with comments:</p>
<pre><code>data_employer = {'No': ('Column', 'Sum')} # original dictionary
for vari in range(14):
    sum = 0
    for row in ReadyColumn: # no idea what ReadyColumn is...post this?
        if row[vari] != '':
            sum =+1
        data_employer = (companies[vari], sum) # the issue occurs here!!!
for num in data_employer:
    print(num, data_employer [num][0], data_employer[num][1]) # where you get TypeError
outData = []
</code></pre>
<p>Obviously there is code omitted (showing <code>ReadyColumn</code> and <code>companies</code>; both of which appear to be iterables of some form); but we can still address the problem either way.</p>
<p>At the start, you declare and define a dictionary, with the name <code>data_employer</code>:</p>
<pre><code>data_employer = {'No': ('Column', 'Sum')}
</code></pre>
<p>In your loop however, you eventually replace that name with a tuple!</p>
<pre><code>data_employer = (companies[vari], sum)
</code></pre>
<p>Think of it like this:</p>
<pre><code>&gt;&gt;&gt; data_employer = {'No': ('Column', 'Sum')}
&gt;&gt;&gt; isinstance(data_employer, dict)
True
&gt;&gt;&gt; data_employer = (companies[vari], sum)
&gt;&gt;&gt; isinstance(data_employer, dict)
False
&gt;&gt;&gt; isinstance(data_employer, tuple)
True
</code></pre>
<p>When you try to access it by <code>[num]</code>, its already changed from key access (like dictionaries are normally), to index access (like tuples are normally).</p>
</div>
<span class="comment-copy">Please post the snippet of the actual error as printed in full stack trace.</span>
<span class="comment-copy">Ok updated with error</span>
<span class="comment-copy">Wow thank you so much for your input. You explain it very well, I have updated with the rest of the code cause I saw your comment. I see what your saying by changing my dictionary into a tuple.</span>
<span class="comment-copy">@PKPython Read up on the docs <a href="https://docs.python.org/3/reference/executionmodel.html#naming-and-binding" rel="nofollow noreferrer">here</a> for more information!</span>
<span class="comment-copy">thank you, I shall read up on this.</span>
