<div class="post-text" itemprop="text">
<p>Nothing scares me more than the Python Class concept; and recently I have been trying to use/create classes to understand their purpose, structure and features, etc. However, I am not clear about the concept of class and how to create them. </p>
<p>Please take a look at the following example:</p>
<pre><code>class Prob(object):
    def __init__ (self,filename):
        self.file_contents = read_file(filename)
    def prob_build(self):
        self.problem, self.aux_vars = build_problem(file_contents)

first_object = Prob(some_file)
alpha,beta, gamma = first_object.prob_build() 
</code></pre>
<p>In this case, <code>read_file</code>, <code>build_problem</code> are custom functions that read data from a CSV file and build a PuLP-based linear problem, respectively. Now, my understanding is that when I initialize an object based on my <code>Prob</code> class, the file_contents are available for the class to use internally. In that case, how do I get the variables <code>alpha</code>, <code>beta</code> and <code>gamma</code>? For the current code, I get a <code>TypeError: 'NoneType' object is not iterable.</code> I have tested the functions and I know that they work without any error, which leaves me thinking that there is something wrong with the way I have defined the class. </p>
<p>Any suggestions?   </p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>prob_build</code> method needs to <code>return</code> three values. You are currently not explicitly <code>return</code>ing anything so it implicitly returns the single value <code>None</code>, and Python tries to parse that into three values, and obviously failing.</p>
<p>This has nothing to do with the fact that this is a method of a class; functions return values regardless of how and where they are defined.</p>
<p>It's perfectly okay for functions to not return anything, of course; but then obviously it doesn't produce a result you can obtain with something like <code>variable = func()</code></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Nothing scares me more than the Python Class concept;</p>
</blockquote>
<p>This is actually not a Python concept - classes exist in most object oriented languages. </p>
<blockquote>
<p>and recently I have been trying (...) to understand their purpose, structure and features, etc. However, I am not clear about the concept of class</p>
</blockquote>
<p>Before we talk about classes, you have to understand objects. An object is a way to group together a state (a set of data) and a behavior (a set of functions acting on the state or according to the state). Now this is a bit of an abstract definition so let's see how it works with a simple example - a geometric point in a 2d space. </p>
<p>For the state part, a 2d point is defined by it's x and y coordinates. You can represent this with a <code>dict</code>:</p>
<pre><code>my_point = {"x": 0, "y": 0}
</code></pre>
<p>Ok, fine but not very explicit and a bit error prone. We can start with a function that is responsible for creating a new point:</p>
<pre><code>def new_point(x=0, y=0):
    return {"x": x, "y": y}

p1 = new_point()
p2 = new_point(42, 84)
</code></pre>
<p>Now we can build points without have to worry on the gory details. Ok, now let's a bit of behavior... A first useful function would be to check whether two points are equal (let's say they are equal if they have the same coordinates):</p>
<pre><code>def points_are_equal(p1, p2):
    return p1["x"] == p2["x"] and p1["y"] == p2["y"]
</code></pre>
<p>You can see that this behavior depends on both points states.</p>
<p>We could also want to move a point along the horizontal axis:</p>
<pre><code>def move_x(p, distance):
    p["x"] += distance
</code></pre>
<p>or along the vertical axis:</p>
<pre><code>def move_y(p, distance):
    p["y"] += distance
</code></pre>
<p>or both at the same time:</p>
<pre><code>def move_by(p, x_distance, y_distance):
    move_x(p, x_distance)
    move_y(p, y_distance)           
</code></pre>
<p>Notice that here, the behavior is to change the point's state. </p>
<p>And of course we want to have a way to get the point's x or y coordinates:</p>
<pre><code> def get_x(p):
     return p["x"]

 def get_y(p)
     return p["y"]
</code></pre>
<p>What we've built here is what is known as an "abstract data type": instead of manually building a dict, manually comparing two dicts,  manually updating our dict and manually checking it's state, we have defined a set a function to do all this, more or less hiding the internal representation. </p>
<blockquote>
<p>and how to create them. </p>
</blockquote>
<p>A class is, mostly, another way to do the same thing, but with a lot of other goodness. Let's rewrite our "point" datatype as a Python class:</p>
<pre><code>class Point(object):
    # this is the function that creates a new point
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    # equality test:
    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

    # move
    def move_x(self, distance):
        self.x += distance

    def move_y(self, distance):
        self.y += distance

    def move_by(self, x_distance, y_distance):
        self.move_x(x_distance)
        self.move_y(y_distance)
</code></pre>
<p>And we don't actually need to write <code>get_x()</code> nor <code>get_y()</code>, we can directly access x and y:</p>
<pre><code>p = Point(2, 5)
print(p.x)
print(p.y)

p.move_by(3, 1)
print(p.x)
print(p.y)

p2 = Point(p.x, p.y)
print(p == p2) # =&gt; True
p2.move_x(3)
print(p == p2) # =&gt; False
</code></pre>
<p>Actually, behind the hood, our <code>p</code> object <em>is</em> a dict:</p>
<pre><code>print(p.__dict__)
</code></pre>
<p>Other OOPLs might use other ways to store an object's state (structs for C-like languages for example), but in Python an object is actually mainly a dict. Well, a dict plus a class:</p>
<pre><code>print(p.__class__)
</code></pre>
<p>and a set of "attribute lookup rules" (provided by the base class <code>object</code>) that will first lookup attributes on the object's <code>__dict__</code> then on the object's class (which is how <code>p.move_x(42)</code> is actually interpreted as <code>Point.move_x(p, 42)</code>.</p>
<p>Classes and objects provide a lot of other goodies (inheritance etc), but basically they are just this: a dict (which stores the state) and a class (which stores the behavior). </p>
<p>Now for your example:</p>
<blockquote>
<p>my understanding is that when I initialize an object based on my Prob class, the file_contents are available for the class to use internally</p>
</blockquote>
<p><code>file_contents</code> is available for the <em>instance</em> - and the class functions can access it <em>on the current instance</em> - which is the <code>self</code> parameter. IOW, your <code>build_prob</code> function should use <code>self.file_contents</code>:</p>
<pre><code>def prob_build(self):
    self.problem, self.aux_vars = build_problem(self.file_contents)
</code></pre>
<p>Then you can access the <code>problem</code> and <code>aux_vars</code> on your instance:</p>
<pre><code>first_object = Prob(some_file)
first_object.prob_build() 
print(first_object.problem)
print(first_object.aux_vars)
</code></pre>
<p>Just note that the <code>problem</code> and <code>aux_vars</code> attributes only exist after you called <code>prob_build</code>. This is considered as bad practice, since you can get an  <code>AttributeError</code> :</p>
<pre><code>first_object = Prob(some_file)
# Doesn't work !!!
print(first_object.problem)
</code></pre>
<p>A first step to fix this would be to initialize those attributes in the <code>__init__</code> method (yes, that's why it's called "<strong>init</strong>"):</p>
<pre><code>class Prob(object):
    def __init__ (self,filename):
        self.file_contents = read_file(filename)
        self.problem = None
        self.aux_vars = None

    def prob_build(self):
        self.problem, self.aux_vars = build_problem(self.file_contents)
</code></pre>
<p>but that's hardly better - you still need to call <code>yourobj.prob_build()</code> to have a <em>usable</em> state. The obvious fix here is to do <strong>all</strong> the initialization in the initializer and get rid of <code>prob_build</code>:</p>
<pre><code>class Prob(object):
    def __init__ (self,filename):
        self.file_contents = read_file(filename)
        self.problem, self.aux_vars = build_problem(self.file_contents)
</code></pre>
<p>but then you can ask yourself: what's the point of this class if it has no behavior, and all you do is:</p>
<pre><code> prob = Prob("path/to/file.csv")
 prob, aux_vars = prob.problem, prob.aux_vars
 result = do_something_with(prob, aux_vars)
</code></pre>
<p>You could as well replace it with a simple function:</p>
<pre><code>def build_problem_from_file(path):
    return build_problem(read_file(path))

 prob, aux_vars = build_problem_from_file(...)
 result = do_something_with(prob, aux_vars)
</code></pre>
<p>As a general rule, if your class as either no state or no behavior, chances are you don't need a class. There are exceptions to this rule of course but this is still a good guideline. In your case, the hypothetical <code>do_something_with(prob, aux_vars)</code> might be a method too:</p>
<pre><code>class Prob(object):
    def __init__ (self,filename):
        self.file_contents = read_file(filename)
        self.problem, self.aux_vars = build_problem(self.file_contents)

     def do_something(self):
         # some computations here using self.problem and self.aux_vars
         return result  

 prob = Prob("path/to/file.csv")
 result = prob.do_something()
</code></pre>
<p>but if that's the only behavior, you still don't need a class:</p>
<pre><code>def build_problem_from_file(path):
    return build_problem(read_file(path))

 def resolve_problem_from_file(path):
     prob, aux_vars = build_problem_from_file(...)
     return do_something_with(prob, aux_vars)

 result = resolve_problem_from_file(...)
</code></pre>
<p>So to make a long story short: ask yourself if and why you want a class. OOP is a good solution for some problems but is not the solution to all problems.</p>
</div>
<div class="post-text" itemprop="text">
<p>Similar to normal <code>functions</code>, class <code>methods</code> need to return something if you want the results! In your code, <code>prob_build</code> doesn't return anything! So, it should be something like this:</p>
<pre><code>def prob_build(self):
    self.problem, self.aux_vars = build_problem(file_contents)
    return (self.problem, self.aux_vars)
</code></pre>
<p>Note that in this case, it returns two arguments. You should be more specific on what <code>alpha</code>, <code>beta</code>, and <code>gamma</code> are!</p>
</div>
<div class="post-text" itemprop="text">
<p>Your class function prob_build() does not return anything. It only sets variables internal to the class. </p>
</div>
<span class="comment-copy">The syntax for defining methods requires that <code>self</code> be the first argument so that the method can access attributes of the instance.  In your example, you would need to do <code>build_problem(self.file_contents)</code>. This makes sense: You define <code>self.file_contents</code>, so you must access <code>self.file_contents</code>.  Your problem is arising because <code>prob_build</code> does not return anything, so it implicitly returns <code>None</code>.</span>
<span class="comment-copy">In addition to what @PatrickHaugh said, given your first statement, I consider you read over <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">this</a> documentation page.</span>
<span class="comment-copy">@PatrickHaugh, <code>build_problem(self.file_contents)</code> gives me <code>invalid syntax</code> error in Spyder, whereas  <code>build_problem(self)</code> produces an error message, <code>NameError: global name 'file_contents' is not defined</code></span>
<span class="comment-copy">That's odd.  I would expect to see that error for the code you posted, because it's using an identifier <code>file_contents</code> that hasn't been given a value.  Are you doing <code>file_contents = ...</code> somewhere outside your class?</span>
<span class="comment-copy">@PatrickHaugh, yes the error shows up in both cases. When I assign certain value to <code>file_contents</code> outside of the class, <code>first_object.prob_build()</code> works because it take the value of <code>file_contents</code> from the global namespace, I think. Also, I added a <code>return (self.problem, self.aux_vars)</code> to the 'prob_build' method, so the <code>TypeError</code> does not appear anymore.</span>
<span class="comment-copy">Why would it need to return values? Based on the naming, it should build a problem, not return values. If you want the internals of the problem, that would be a different function.</span>
<span class="comment-copy">@JonKiparsky Thanks; attempted to clarify this. Better now?</span>
<span class="comment-copy">Better. I think the OP would do well to spend a few happy hours curled up with a copy of Clean Code, but that's not your problem :)</span>
<span class="comment-copy">Thank you so much for such detailed and simple explanation. Very helpful!</span>
<span class="comment-copy">You're welcome. FWIW I edited my answer with some more considerations, which may or not apply to your concrete problem.</span>
