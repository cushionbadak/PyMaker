<div class="post-text" itemprop="text">
<p>In both Python 2 and 3 I cannot run doctests in a file named <code>types.py</code>, which is part of a package. This is what I get:</p>
<pre><code>$ cat foo/types.py
def x():
    """do something

    &gt;&gt;&gt; x()
    1
    """
    return 1

$ cp foo/types.py foo/types2.py

$ python -m doctest -v foo/types.py
1 items had no tests:
    types
0 tests in 1 items.
0 passed and 0 failed.
Test passed.

$ python -m doctest -v foo/types2.py
Trying:
    x()
Expecting:
    1
ok
1 items had no tests:
    types2
1 items passed all tests:
   1 tests in types2.x
1 tests in 2 items.
1 passed and 0 failed.
Test passed.

$ python3 -m doctest -v foo/types.py
37 items had no tests:
    types
    types.DynamicClassAttribute
    types.DynamicClassAttribute.__delete__
    types.DynamicClassAttribute.__get__
    types.DynamicClassAttribute.__init__
    types.DynamicClassAttribute.__set__
    types.DynamicClassAttribute.deleter
    types.DynamicClassAttribute.getter
    types.DynamicClassAttribute.setter
    types.SimpleNamespace
    types.SimpleNamespace.__delattr__
    types.SimpleNamespace.__eq__
    types.SimpleNamespace.__ge__
    types.SimpleNamespace.__getattribute__
    types.SimpleNamespace.__gt__
    types.SimpleNamespace.__init__
    types.SimpleNamespace.__le__
    types.SimpleNamespace.__lt__
    types.SimpleNamespace.__ne__
    types.SimpleNamespace.__reduce__
    types.SimpleNamespace.__repr__
    types.SimpleNamespace.__setattr__
    types._GeneratorWrapper
    types._GeneratorWrapper.__init__
    types._GeneratorWrapper.__iter__
    types._GeneratorWrapper.__next__
    types._GeneratorWrapper.close
    types._GeneratorWrapper.cr_await
    types._GeneratorWrapper.gi_code
    types._GeneratorWrapper.gi_frame
    types._GeneratorWrapper.gi_running
    types._GeneratorWrapper.send
    types._GeneratorWrapper.throw
    types._calculate_meta
    types.coroutine
    types.new_class
    types.prepare_class
0 tests in 37 items.
0 passed and 0 failed.
Test passed.

$ python3 -m doctest -v foo/types2.py
Trying:
    x()
Expecting:
    1
ok
1 items had no tests:
    types2
1 items passed all tests:
   1 tests in types2.x
1 tests in 2 items.
1 passed and 0 failed.
Test passed.
</code></pre>
<p>As you see, all invocations with <code>foo/types2.py</code> work as expected, all invocations with <code>foo/types.py</code> seem to try to load the Python built-in <code>types</code> module.</p>
<p>I'm also not able to fix this by tinkering with <code>PYTHONPATH</code>:</p>
<pre><code>$ PYTHONPATH=.:$PYTHONPATH python -m doctest -v foo/types.py
Traceback (most recent call last):
  File "/usr/lib/python2.7/site.py", line 68, in &lt;module&gt;
    import os
  File "/usr/lib/python2.7/os.py", line 400, in &lt;module&gt;
    import UserDict
  File "/usr/lib/python2.7/UserDict.py", line 116, in &lt;module&gt;
    import _abcoll
  File "/usr/lib/python2.7/_abcoll.py", line 70, in &lt;module&gt;
    Iterable.register(str)
  File "/usr/lib/python2.7/abc.py", line 107, in register
    if not isinstance(subclass, (type, types.ClassType)):
AttributeError: 'module' object has no attribute 'ClassType'
</code></pre>
<p>Unfortunately, I cannot simply rename <code>foo/types.py</code>.</p>
<p>Is there any possibility to run doctests from this file apart from writing lots of boilerplate code around it?</p>
</div>
<div class="post-text" itemprop="text">
<p>I don’t think you can use <code>python -m doctest</code> here: the documentation says that it <a href="https://docs.python.org/3/library/doctest.html#simple-usage-checking-examples-in-docstrings" rel="nofollow noreferrer">“import[s the module] as a standalone module”</a>, adding</p>
<blockquote>
<p>Note that this may not work correctly if the file is part of a package and imports other submodules from that package.</p>
</blockquote>
<p>which is a fancy way of saying that it uses the module’s unqualified name.  Of course it then conflicts with the standard library module.</p>
</div>
<span class="comment-copy">Good catch, thank you! OK, that means back to the editor and hacking up my own wrapper.</span>
<span class="comment-copy">@Boldewyn: Stupid trick time: can you edit <code>foo.types</code> even if you can’t rename it?  Can you make a symlink to it for the purposes of running <code>doctest</code>?</span>
<span class="comment-copy">Yes, great idea! Works like a charm and is easily integrated in some pre- and post-test setup. Thanks!</span>
