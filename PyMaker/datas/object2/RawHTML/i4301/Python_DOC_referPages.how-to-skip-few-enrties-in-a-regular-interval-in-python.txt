<div class="post-text" itemprop="text">
<p>I have a data file <code>name.txt</code> with the following elements:</p>
<pre><code>object 1
num 2
24
56
67
object 3
num 4
34
56
78
num 5
count 4
69
78
56
</code></pre>
<p>I want to remove the text lines and make a 3*3 matrix. Can anyone help me with the python code. I want to run the code for 100 events.</p>
<p>I tried the following:</p>
<p><code>import itertools<br/>
 from itertools import islice
 with open('name.txt') as fp:
    for line in itertools.islice(fp, 2, None): 
        print line</code></p>
<p>I can only skip first two lines which are strings but I want to skip all the text lines and make a 3*3 matrix.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you have tagged your question with <code>numpy</code>, I thought an answer using <code>numpy</code> may be useful. You can try the following:</p>
<pre><code>import numpy as np
t = np.genfromtxt('name.txt', usecols=0)
m = t[np.isfinite(t)].reshape((3, 3))
</code></pre>
<p>Then, for your particular example:</p>
<pre><code>In [44]: import numpy as np
    ...: t = np.genfromtxt('name.txt', usecols=0)
    ...: m = t[np.isfinite(t)].reshape((3, 3))
    ...: print(m)
    ...: 
[[ 24.  56.  67.]
 [ 34.  56.  78.]
 [ 69.  78.  56.]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A way to keep only the lines you want is to use <a href="https://docs.python.org/3/library/itertools.html#itertools.compress" rel="nofollow noreferrer">itertools.compress</a> to filter them. As the pattern of lines to drop/keep is regular, we can generate it with <a href="https://docs.python.org/3/library/itertools.html#itertools.repeat" rel="nofollow noreferrer">itertools.repeat</a></p>
<p>So, one way to generate your matrix would be:</p>
<pre><code>from itertools import chain, repeat, compress

lines_filter = chain.from_iterable(repeat([False]*2 + [True]*3, 3))
# will repeat 3 times the sequence 2 x False, 3 x True,

matrix = [[0]*3 for i in range(3)]

with open('test.txt') as f:
    lines = compress(f, lines_filter)
    values = map(lambda line: int(line.strip()), lines)  # or float

    # Your question doesn't make clear if the values are given by line 
    # or column. I assume by line, swap i and j otherwise.
    for i in range(3):
        for j in range(3):
            matrix[i][j] = next(values)

print(matrix)
# [[24, 56, 67], [34, 56, 78], [69, 78, 56]]
</code></pre>
<p>We could also create the matrix using <code>itertools</code> - it might be harder to read, though:</p>
<pre><code>from itertools import chain, repeat, compress

lines_filter = chain.from_iterable(repeat([False]*2 + [True]*3, 3))
# will repeat 3 times the sequence 2 x False, 3 x True

with open('test.txt') as f:
    lines = compress(f, lines_filter)
    values = map(lambda line: int(line.strip()), lines)  # or float
    line_items = [iter(values)]*3
    matrix = list(map(list, zip(*line_items)))

print(matrix)
# [[24, 56, 67], [34, 56, 78], [69, 78, 56]]

# and if you want it transposed:
t = list(map(list, zip(*matrix)))
print(t)
# [[24, 34, 69], [56, 56, 78], [67, 78, 56]]
</code></pre>
<p>Or, shorter and nicer, using <code>islice</code>:</p>
<pre><code>from itertools import chain, repeat, compress, islice

lines_filter = chain.from_iterable(repeat([False]*2 + [True]*3, 3))
# will repeat 3 times the sequence 2 x False, 3 x True

with open('test.txt') as f:
    lines = compress(f, lines_filter)
    values = map(lambda line: int(line.strip()), lines)  # or float
    matrix = [list(islice(values, 3)) for i in range(3)] 

print(matrix)
# [[24, 56, 67], [34, 56, 78], [69, 78, 56]]
</code></pre>
</div>
<span class="comment-copy">What have you tried, and what problems did you encounter?</span>
<span class="comment-copy">I tried the following which are in the next comment.Thanks.</span>
<span class="comment-copy">Thanks for your help. All the three ways work fine.</span>
