<div class="post-text" itemprop="text">
<p>Sorry, beginner here. Trying to make this program that scans for a certain letter combination, and if it does not find any, it returns the "else" statement. However, I can't figure out how to have the "else" statement apply ONLY if ALL of the "if" statements return False. Here's my code: </p>
<pre><code>class color:
BOLD = '\033[1m'
END = '\033[0m'
GREEN = '\033[92m'

print("Welcome to the Sequence Scanner")
print(" ") ## just putting a space between the welcome message and the input box
seq = input("Provide your nucleotide sequence here: ")

def scan():
    if 'aataaa' in scan():
        print('The trouble sequence, Canonical Poly-A Signal, is present')
    if 'aatgga' in scan():
        print('The trouble sequence, Pea Poly-A Signal, is present')
    ### the same format for the previous if statements is repeated for different sequences 
    else: 
        print(color.GREEN + 'No trouble sequences are present' + color.END)
scan(seq)
</code></pre>
<p>Right now, it prints the "else" statement any time the last "if" statement is false. So I'm assuming I need to make it so it's not just applying to the last "if" statement, but I've tried different indentations and it just doesn't work for me. </p>
<p>I know this is probably a really stupid question, so I'm sorry in advance. Also, if there are any other things I should do/know about to make this code more efficient, it would be awesome if you could point me towards resources for that! Thanks for any help, I really appreciate it. </p>
<p>Other questions if you're really bored and want to help me out at all: is there any way to make the function print the input sequence with the "trouble sequences" highlighted (like in red or something)? That would be awesome, but it seems like it might be too hard for me to pull off with my current level of coding experience. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can't have multiple <code>if</code> statements and just one <code>else</code> block and have them work together. Each <code>if</code> part starts a separate, indepdendent statement, so the first <code>if</code> is one statement, and then <code>if...else</code> is another statement, independent from the first. It doesn't matter what happened in the first <code>if</code>, the second <code>if</code> doesn't care.</p>
<p>If you want your second and first <code>if</code> tests to work together, you need to use <code>elif</code> instead; that makes one whole <code>if</code> statement with extra tests:</p>
<pre><code>if 'aataaa' in scan():     # if this one doesn't match
    # ...
elif 'aatgga' in scan():   # only then test this one
    # ...
else:                      # and if either failed then go here
    # ...
</code></pre>
<p><code>elif</code>, like <code>else</code>, are parts of a single <code>if</code> statement. You can add more <code>elif</code> parts as needed, and each test is then tried, in order, until one passes or you run out of <code>elif</code> tests, at which point if nothing matched the <code>else</code> part is executed.</p>
<p>See the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-if-statement" rel="nofollow noreferrer"><em><code>if</code> statement</em> documentation</a>:</p>
<blockquote>
<p>[<em>The <code>if</code> statement</em>] selects exactly one of the suites by evaluating the expressions one by one until one is found to be true <em>[...]</em>; then that suite is executed (and no other part of the <code>if</code> statement is executed or evaluated). If all expressions are false, the suite of the <code>else</code> clause, if present, is executed.</p>
</blockquote>
<p>and the grammar shows a single <code>if</code> statement can have <em>one</em> <code>if</code> part, any number of <code>elif</code> parts (<code>( ... )*</code> means <em>0 or more</em>), and an optional <code>else</code> part (<code>[...]</code> means <em>optional</em>):</p>
<blockquote>
<pre><code>if_stmt ::=  "if" expression ":" suite
             ( "elif" expression ":" suite )*
             ["else" ":" suite]
</code></pre>
</blockquote>
<p>If, on the other hand, you wanted to execute <strong>all</strong> tests, and a separate block if nothing matched, you need to use a loop; set a flag to indicate no tests were matched, or keep a count, or something else, and at the end test the flag or count:</p>
<pre><code>def scan(seq):
    tests = [
        ('aataaa', 'The trouble sequence, Canonical Poly-A Signal, is present'),
        ('aatgga', 'The trouble sequence, Pea Poly-A Signal, is present'),
        # more tests
    ]
    found_match = False
    for value, message in tests:
        if value in seq:
            print(message)
            found_match = True

    if not found_match:
        print(color.GREEN + 'No trouble sequences are present' + color.END)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you use the <code>elif</code> construct, it will be tested only when the previous condition was false, so in the end only one of the code blocks will run.</p>
<pre><code>if some_condition:
    # code
elif another_condition:
    # code
elif yet_another_condition:
    # code
else:
    # code
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Create a list of sequences and messages, like below, activate a boolean flag if found and test only one for each sequence.</p>
<p>Look below.</p>
<p>For coloring and font choice, try to output results as HTML, for instance. You can get your results in a browser.</p>
<pre><code>    # -*- coding: utf-8 -*-
"""
Created on Thu Apr 19 16:45:55 2018

@author: Carlos
"""

sequences1 = ['aataaa', 'aatgga','aataaa', 'aatgga']
sequences2 = ['aatxaaa', 'aatggxa','aatxaaa', 'aatxgga']

def scan(seq):
    trouble = ['aataaa', 'aatgga']
    message = ['Canonical Poly-A Signal', 'Pea Poly-A Signal']
    ftrouble = False
    for key in range(len(trouble)):
        if trouble[key] in seq:
            print('The trouble sequence, {}, is present'.format(message[key]))
            ftrouble = True
        ### the same format for the previous if statements is repeated for different sequences 
    if not ftrouble:
        print('No trouble sequences are present')

scan(sequences1)

scan(sequences2)
</code></pre>
</div>
<span class="comment-copy">You want all the if's in the middle (one in the code you posted) to be <code>elif</code> instead of <code>if</code>.</span>
<span class="comment-copy">Welcome to StackOverflow.  Please read and follow the posting guidelines in the help documentation, as suggested when you created this account.  <a href="http://stackoverflow.com/help/on-topic">On topic</a> and <a href="http://stackoverflow.com/help/how-to-ask">how to ask</a> apply here. StackOverflow is not a design, coding, research, or tutorial service. Successive <code>if-elif-else</code> constructs are covered quite well in on-line tutorials.</span>
<span class="comment-copy"><code>def scan(): ... if '...' in scan(): ...</code> and <code>scan(seq)</code>. Did you mean <code>def scan(seq): ... if '... in seq: ...</code> instead perhaps?</span>
<span class="comment-copy">Thank you so much for the thorough response (and so quickly)! This really helped. I see now that I can't do what I wanted to do (as simply as I thought I could... haha). So I'll try out some other possible methods, thanks again!</span>
<span class="comment-copy">@braxsch: I added what I'd do, given what I understand you are trying to do.</span>
<span class="comment-copy">Wow, thank you SO much. I'll try that out today. I really appreciate your help.</span>
<span class="comment-copy">Thank you! I've tried this, but I need the program to spit out all true statements for those "if"s I have in there. Whereas elif only spits out the first one that is True, correct?</span>
<span class="comment-copy">@braxsch: you don't want <code>if</code> then. You want a <i>loop</i>, to gather test results. And then a separate <code>if</code> at the end to test if your list of results is empty.</span>
<span class="comment-copy">@MartijnPieters Gotcha, I'll try that. Thanks for your patience and for your help.</span>
