<div class="post-text" itemprop="text">
<p><strong>Task:</strong> Given a string, S, of length N that is indexed from 0 to N-1 , print its even-indexed and odd-indexed characters as 2 space-separated strings on a single line.</p>
<p><strong>Input Format</strong>: The first line contains an integer, T (the number of test cases). 
Each line  i of the T subsequent lines contain a String S, .</p>
<p><strong>Constraints</strong> : T in range(1,11), len of String S in range(2,10001).</p>
<pre><code>T = int(input().strip())
if T in range(1,11):
    for i in range(T):
        S = str(input().strip())
        arr= []
        arr +=S
        #print(arr[1])
        eve = []
        odd = []
        if len(arr) in range(2,10001):
            for n in range(0,len(arr)):
                if n%2 ==0:
                    eve.append(arr[n])
                else:
                    odd.append(arr[n])
        eve1 = ''.join(eve)
        odd1 = ''.join(odd)
        print(eve1,odd1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could simplify your code by using <a href="https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range" rel="noreferrer">advanced slicing</a> on strings</p>
<pre><code>s = input().strip()
print(s[::2], s[1::2])
</code></pre>
<p>For <code>s[i:j:k]</code></p>
<p><code>i</code> is the start index, if omitted, it just uses <code>0</code></p>
<p><code>j</code> is the end index, if omitted, it just uses <code>len(s)</code></p>
<p><code>k</code> is the step value, so it will iterate though the sequence by that amount.</p>
<p>So for even indexed characters, we start at the <code>0</code> index and step through every other character.  For odd indexed characters, we just start at the <code>1</code> index and get every other character.</p>
</div>
