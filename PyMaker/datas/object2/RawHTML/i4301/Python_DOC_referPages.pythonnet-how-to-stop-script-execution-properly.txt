<div class="post-text" itemprop="text">
<p>I'm using Pythonnet to embed a Python script launcher into a C# WPF application. I can pass variable to python scripts using Scope and i get the result on a console using MVVM pattern.</p>
<p>Now I want to allow the user to stop a script execution at anytime. I couldn't find how to make that work in order to close the Thread properly.</p>
<pre><code>class PythonRuntime
{
    private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger();

    private MainViewModel viewModel;
    private string pythonCode;

    private bool runtimeThreadLock = false;
    Thread thread;

    private PyScope scope;
    private dynamic pyThread;
    private dynamic pyLock;

    ConsoleWriter consoleWriter;


    public PythonRuntime(MainViewModel viewModel, ConsoleWriter consoleWriter)
    {
        this.viewModel = viewModel;
        this.consoleWriter = consoleWriter;
        SetUpPython();    
    }

    public string PythonCode { get =&gt; pythonCode; set =&gt; pythonCode = value; }

    private void SetUpPython()
    {
        PythonEngine.Initialize(true);

        scope = Py.CreateScope();
        // consoleWriter to make python prints into C# UI
        scope.Set("Console", consoleWriter);
    }

    public void LaunchScript()
    {
        if (!runtimeThreadLock)
        {
            thread = new Thread(PythonNetTest);                
            thread.Start();
        }
    }

    public void StopScript()
    {
        // ???
    }

    [HandleProcessCorruptedStateExceptions]
    private void PythonNetTest()
    {
        runtimeThreadLock = true;
        pyThread = PythonEngine.BeginAllowThreads();
        pyLock = PythonEngine.AcquireLock();

        using (Py.GIL())
        {
            try
            {
                scope.Exec(pythonCode);
            }
            catch (PythonException exception)
            {
                consoleWriter.WriteError(exception.ToString());
            }
        }

        PythonEngine.ReleaseLock(pyLock);
        PythonEngine.EndAllowThreads(pyThread);
        runtimeThreadLock = false;
    }
}  
</code></pre>
<p>Besides my question, I was wondering what is the purpose of wrapping code in <code>using(Py.GIL())</code>. Because with or whithout it my script runs the same way.</p>
<ul>
<li>Pythonnet : 2.4.0 </li>
<li>Python : 2.7.2 32bit</li>
<li>NetFramework : 4.7.1</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>OK, I'm just beginning work on embedding CPython and may know only a little more than you.  What that caveat...  </p>
<p>First, you need to get your script to terminate.  When it does the call to .Exec() will return, and the thread will exit.  If your script runs for a finite amount of time then you just wait for it.  Otherwise, you must arrange some signal that it should exit.</p>
<p>Second, mainline will wait for thread to complete using one of several .NET patterns described at:  <a href="https://stackoverflow.com/questions/1584062/how-to-wait-for-thread-to-finish-with-net">How to wait for thread to finish with .NET?</a></p>
<p><code>using(Py.GIL())</code> is shorthand for <code>PythonEngine.AcquireLock();</code> and <code>PythonEngine.ReleaseLock(pyLock);</code>  It creates an <code>IDisposable</code> object that acquires the lock and then releases it on <code>Dispose()</code>.  So, in your sample, it is redundant.</p>
<p>I'm unsure effects of your call to <code>BeginAllowThreads()</code>.  Documentation says that it releases the lock to allow other threads.  When you call it you don't have the GIL.  Next line acquires the GIL.  Therefore, it appears to have no function to me. </p>
<p>See <a href="https://docs.python.org/3/c-api/init.html" rel="nofollow noreferrer">https://docs.python.org/3/c-api/init.html</a> for details on threading.  This seems more related to python threading and saving thread state so that other non-python things can be done.  This is python 3.  Python 2 did not seem to support the equivalent.</p>
</div>
<span class="comment-copy">Thanks for the explanation about using(Py.GIL()). But how can you send a signal from the C# to the running python script in order to make it stop ?</span>
<span class="comment-copy">That all depends on what the thread is doing.  If it reads messages from a queue then design a "quit" message.  If it loops repetitively then set a "PleaseQuitNow" variable to true (and manipulated in thread safe way).  I might design the python code to be a method called repeatedly from a loop in C# so I can use the .NET threading primitives easily.  Or, you can write python code quit when a specific file has been created.</span>
