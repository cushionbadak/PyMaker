<div class="post-text" itemprop="text">
<p>I have strings as tuples that I'm trying to remove quotation marks from. If there isn't a comma present in the string, then it works. But if there is a comma, then quotation marks still remain:</p>
<pre><code>example = [('7-30-17','0x34','"Upload Complete"'),('7-31-17','0x35','"RCM","Interlock error"')]

example = [(x,y,(z.strip('"'))) 
    for x,y,z in example] 
</code></pre>
<p>The result is that quotation marks partially remain in the strings that had commas in them. The second tuple now reads <code>RCM","Interlock error</code> as opposed to <code>RCM, Interlock error</code></p>
<pre><code>('7-30-17','0x34','Upload Complete')
('7-31-17','0x35','RCM","Interlock error')
</code></pre>
<p>Any ideas what I'm doing wrong? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems like you're looking for the behaviour of <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>replace()</code></a>, rather than <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>strip()</code></a>.</p>
<p>Try using <code>replace('"', '')</code> instead of <code>strip('"')</code>. <code>strip</code> only removes characters from the beginning and end of strings, while <code>replace</code> will take care of all occurrences.</p>
<p>Your example would be updated to look like this:</p>
<pre><code>example = [('7-30-17','0x34','"Upload Complete"'),('7-31-17','0x35','"RCM","Interlock error"')]

example = [(x,y,(z.replace('"', '')))
    for x,y,z in example]
</code></pre>
<p><code>example</code> ends up with the following value:</p>
<pre><code>[('7-30-17', '0x34', 'Upload Complete'), ('7-31-17', '0x35', 'RCM,Interlock error')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use list comprehension to iterate the list items and similarly for the inner tuple items</p>
<pre><code>&gt;&gt;&gt; [tuple(s.replace('"','') for s in tup) for tup in example]
[('7-30-17', '0x34', 'Upload Complete'), ('7-31-17', '0x35', 'RCM,Interlock error')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is because <code>strip</code> will remove only from ends of string.</p>
<p>Use a <code>regex</code> to replace <code>"</code>:</p>
<pre><code>import re

example = [('7-30-17','0x34','"Upload Complete"'),('7-31-17','0x35','"RCM","Interlock error"')]

example = [(x,y,(re.sub('"','',z))) 
    for x,y,z in example] 

print(example)
# [('7-30-17', '0x34', 'Upload Complete'), ('7-31-17', '0x35', 'RCM,Interlock error')]
</code></pre>
</div>
<span class="comment-copy">Your na√Øve approach to stripping quotes is going to be trouble. Be sure to test whatever code you have on something with actual quotes in it.</span>
<span class="comment-copy">It's doing exactly what you told it to do.  strip only removes from the ends of the string, maybe you wanted str.replace.</span>
<span class="comment-copy"><code>'"RCM","Interlock error"'</code>  this is ONE string, not two. The string is delimited by <code>'</code> only the firstand last  <code>"</code> is at the start/end of a string. so it is removed - the other one is <i>inside</i> it - and not touched by <code>strip()</code>  .Voting to close, strip is working <b>exactly</b> as intended and the comma does nothing to invalidate its mechanics.</span>
<span class="comment-copy">check <a href="https://docs.python.org/2/library/string.html" rel="nofollow noreferrer">python string strip</a>, <code>string.strip(s[, chars])</code>Return a copy of the string with leading and trailing characters removed.</span>
<span class="comment-copy">Try using <code>.replace('"', ' ')</code> instead of using <code>.strip()</code></span>
<span class="comment-copy">Easy solution! Thanks for your help!</span>
