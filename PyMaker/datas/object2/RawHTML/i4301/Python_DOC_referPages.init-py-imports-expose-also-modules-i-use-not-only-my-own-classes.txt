<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/44834/can-someone-explain-all-in-python">Can someone explain __all__ in Python?</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>There's something that I'm not grasping about python imports. I've read dozens of articles but I'm not finding a satisfactory answer. The situation is this:</p>
<p>I'm writing a package made of several modules. Let's say that the package is named <code>pack1</code>. In the <code>__init__.py</code> file, in order to expose the classes and functions I defined in my modules, I wrote:</p>
<pre><code>    from .module1 import *
    from .module2 import *
    ...
</code></pre>
<p>Now, in module 1:</p>
<pre><code>    from math import sqrt  # a tool that I need

    class class1:
         &lt;body&gt;

    class class2:
         &lt;body&gt;
    ....
    class class100:
         &lt;body&gt;
</code></pre>
<p>My problem is that when I</p>
<pre><code>    import pack1
</code></pre>
<p>in another project, <strong>I see <code>sqrt</code> in <code>pack1</code>'s namespace</strong>. Do I have to import each one of the 100 classes separately in the <code>__init__.py</code> file in order to avoid this and keep my namespace clean? Do I have to do some hack with the inspect module in <code>__init__.py</code> in order to identify the classes that were defined and not imported (I think this would be very ugly)? Or, as I suspect, I'm mistaking something about how I should handle the module structure or the import statements?</p>
</div>
<div class="post-text" itemprop="text">
<p>Wildcard imports import <em>everything</em> defined in the global namespace in that module. It does not discriminate between "local" classes, modules that were imported, functions or variables.</p>
<p>There are two ways around this:</p>
<ol>
<li>Import exactly what you want, instead of using wildwards. <em>Explicit is better than implicit</em>, according to <code>import this</code>.</li>
<li>Use the special <code>__all__</code> variable to define exactly what should be imported when the module is wildcard-imported. See <a href="https://stackoverflow.com/questions/44834/can-someone-explain-all-in-python">Can someone explain __all__ in Python?</a></li>
</ol>
</div>
<span class="comment-copy">Why wouldn't you? It <i>is</i> in that namespace. See e.g. <a href="https://docs.python.org/3/tutorial/modules.html#importing-from-a-package" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
<span class="comment-copy">Yes, I expressed myself badly; I know that things are working exactly as intended, my question was how to do a clean wildcard import, since I want to import many names and import them explicitly would be tedious.</span>
<span class="comment-copy">You are explaining one of the causes why wildcard imports are considered bad practice by many Python developers.</span>
<span class="comment-copy">The <code>__all__</code> variable was the piece that I was missing to elegantly handle wildcard imports. Thank you very much!</span>
