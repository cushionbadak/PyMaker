<div class="post-text" itemprop="text">
<p>Python 3.6.</p>
<p>New to Python...first post be gentle...</p>
<p>I cant wrap my mind around this...
As described in the title, I have CSV formatted data that I need to write to a CSV file with a variable filename. </p>
<p>Currently my code creates the CSV with the appropriate filename, and writes data to the CSV, <strong>but the data is 1 letter on each row</strong>.</p>
<p>Code looks like:</p>
<pre><code>import csv
filename = os.environ['USERPROFILE'] + '\Downloads\Somefolder\\'+ variablefilename + '.csv'
myfile = open(filename, 'w', newline='')
     with myfile:
          writer = csv.writer(myfile)
          writer.writerows(csvformatteddata.decode('utf-8'))
#csvformatteddata was generated prior to this code.
</code></pre>
<p>Any help would be greatly appreciated, but I would like an explanation with the "solution" code if possible. </p>
<p>I am looking to learn/grow, not have my ignorance enabled. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>writerows</code> is expecting an iterable of iterables containing the data for each row, with the <code>i</code>th element of the "inner" iterable being the contents of the <code>i</code>th column of the a. It looks like <code>csvformatteddata</code> is a single string. (I'm guessing it looks like <code>a,b,c\nd,e,f\n...</code>.)</p>
<p>To elaborate, the reason you're getting a single character on each line is that one long string is itself an iterable of iterables--iterate over a string and you get an individual character and iterate over that character to get that same character. Thus each character becomes a "row".</p>
</div>
<div class="post-text" itemprop="text">
<p>This worked for me.   </p>
<pre><code>In [1]: import csv

In [2]: with open('text.csv', 'r') as old_file:
   ...:     with open('new.csv', 'w') as new_file:
   ...:         reader = csv.reader(old_file)
   ...:         writer = csv.writer(new_file)
   ...:         writer.writerows(reader)
   ...:

In [3]:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since your data is a single string, you should split it into rows as described in the <code>csv</code> module <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">documentation</a>. </p>
<p>If you constructed the string yourself, don't do that. Just let the CSV writer handle the delimiters and newlines.</p>
<p>So for <code>csv.writer</code> to do its thing your data should look like this:</p>
<pre><code>[['a', 'b', 'c'], ['d', 'e', 'f']]
</code></pre>
<p>That way you should be able to write the CSV file just fine:</p>
<pre><code>$ python3
&gt;&gt;&gt; import csv
&gt;&gt;&gt; csvformatteddata = [['a','b','c'], ['d', 'e', 'f']]
&gt;&gt;&gt; myfile = open('test.csv', 'w')
&gt;&gt;&gt; writer = csv.writer(myfile)
&gt;&gt;&gt; writer.writerows(csvformatteddata)
&gt;&gt;&gt; myfile.close()
^D
$ cat test.csv
a,b,c
d,e,f
</code></pre>
</div>
<span class="comment-copy">Can you share the structure of your <code>csvformatteddata</code>?</span>
<span class="comment-copy">@Jere KÃ¤pyaho - a,b,c\nd,e,f\n</span>
<span class="comment-copy">yes you are correct, it is a single string. Now what method can i use to write that string to the CSV. Also thank you for the explaination.</span>
<span class="comment-copy"><code>myfile.write(csvformatteddata)</code> Also, it'd be more usual to write <code>with open(filename, 'w') as myfile: ...</code> However, the key point is that, unless you've been handed this giant string from somewhere, you don't have to (and don't want to!) manually format the CSV.</span>
<span class="comment-copy">Once you have the precise string you want to write to a file, the fact it is a CSV is irrelevant, you're just writing to a file.</span>
<span class="comment-copy">This explanation helped me understand what was happening and allowed me to correct my code.</span>
