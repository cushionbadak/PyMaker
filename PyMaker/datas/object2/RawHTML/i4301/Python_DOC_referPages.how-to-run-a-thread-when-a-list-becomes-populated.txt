<div class="post-text" itemprop="text">
<p>Currently, I am using a system like this:</p>
<pre><code>class Processor(object):
    """
    Makes sure that all operations the user requires to be processed are processed in order
    Also makes sure that the users are still pickle-able
    """
    def __init__(self):
        self.tasks = []
        self.killed = False

    def begin_processing(self):
        while not self.killed:
            if not self.tasks:
                pass 
</code></pre>
<p>Basically users in a game append tasks (which is essentially a <code>threading.Timer</code>) to <code>tasks</code>. The main point of this system is to make sure that the actual user object is pickleable.</p>
<p>However, this is very inefficient because it is constantly checking if the queue has any tasks in it. </p>
<p>I would rather make it so that it only runs when a task is appended to the queue. Is there any way to accomplish this?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think what you are looking for is a message <a href="https://docs.python.org/3/library/queue.html" rel="nofollow noreferrer">queue</a>. </p>
<pre><code>import queue    

class Processor(object):
    """
    Makes sure that all operations the user requires to be processed are processed in order
    Also makes sure that the users are still pickle-able
    """
    def __init__(self):
        self.tasks = queue.Queue()
        self.killed = False

    def begin_processing(self):
        while not self.killed:
            task = self.tasks.get()
</code></pre>
</div>
<span class="comment-copy">Not really what I was looking for. I want a way that basically causes a "task added" event to cause the queue to start processing.</span>
<span class="comment-copy">The thread will be stop on the <code>queue.get()</code> call and wait for a new task. If you want to do other computation, you should do them in the main process.</span>
<span class="comment-copy">Oh thats more like what I was thinking. Thank you!</span>
