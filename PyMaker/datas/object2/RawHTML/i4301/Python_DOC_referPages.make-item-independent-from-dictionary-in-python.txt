<div class="post-text" itemprop="text">
<p>Can someone please explain this to me? This doesn't make any sense to me.</p>
<p>I copy a dictionary into another and edit the second and both are changed. Why is this happening?</p>
<pre><code>&gt;&gt;&gt; dict1 = {"key1": "value1", "key2": "value2"}
&gt;&gt;&gt; dict2 = dict1
&gt;&gt;&gt; dict2
{'key2': 'value2', 'key1': 'value1'}
&gt;&gt;&gt; dict2["key2"] = "WHY?!"
&gt;&gt;&gt; dict1
{'key2': 'WHY?!', 'key1': 'value1'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python <em>never</em> implicitly copies objects. When you set <code>dict2 = dict1</code>, you are making them refer to the same exact dict object, so when you mutate it, all references to it keep referring to the object in its current state.</p>
<p>If you want to copy the dict (which is rare), you have to do so explicitly with</p>
<pre><code>dict2 = dict(dict1)
</code></pre>
<p>or</p>
<pre><code>dict2 = dict1.copy()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you assign <code>dict2 = dict1</code>, you are not making a copy of <code>dict1</code>, it results in <code>dict2</code> being just another name for <code>dict1</code>.</p>
<p>To copy the mutable types like dictionaries, use <code>copy</code> / <code>deepcopy</code> of the <a href="http://docs.python.org/library/copy.html" rel="noreferrer"><code>copy</code></a> module.</p>
<pre><code>import copy

dict2 = copy.deepcopy(dict1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; x={'a': 1, 'b': {'m': 4, 'n': 5, 'o': 6}, 'c': 3}
&gt;&gt;&gt; u=x.copy()
&gt;&gt;&gt; v=dict(x)
&gt;&gt;&gt; import copy
&gt;&gt;&gt; w=copy.deepcopy(x)
&gt;&gt;&gt; x['a']=10
&gt;&gt;&gt; x
{'a': 10, 'c': 3, 'b': {'m': 4, 'o': 6, 'n': 5}}
&gt;&gt;&gt; u
{'a': 1, 'c': 3, 'b': {'m': 4, 'o': 6, 'n': 5}}
&gt;&gt;&gt; v
{'a': 1, 'c': 3, 'b': {'m': 4, 'o': 6, 'n': 5}}
&gt;&gt;&gt; w
{'a': 1, 'c': 3, 'b': {'m': 4, 'o': 6, 'n': 5}}
&gt;&gt;&gt; x['b']['m']=40
&gt;&gt;&gt; x
{'a': 10, 'c': 3, 'b': {'m': 40, 'o': 6, 'n': 5}}
&gt;&gt;&gt; u
{'a': 1, 'c': 3, 'b': {'m': 40, 'o': 6, 'n': 5}}
&gt;&gt;&gt; v
{'a': 1, 'c': 3, 'b': {'m': 40, 'o': 6, 'n': 5}}
&gt;&gt;&gt; w
{'a': 1, 'c': 3, 'b': {'m': 4, 'o': 6, 'n': 5}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On python 3.5+ there is an easier way to achieve a shallow copy by using the ** unpackaging operator. Defined by <a href="https://www.python.org/dev/peps/pep-0448/" rel="noreferrer">Pep 448</a>.</p>
<pre><code>&gt;&gt;&gt;dict1 = {"key1": "value1", "key2": "value2"}
&gt;&gt;&gt;dict2 = {**dict1}
&gt;&gt;&gt;print(dict2)
{'key1': 'value1', 'key2': 'value2'}
&gt;&gt;&gt;dict2["key2"] = "WHY?!"
&gt;&gt;&gt;print(dict1)
{'key1': 'value1', 'key2': 'value2'}
&gt;&gt;&gt;print(dict2)
{'key1': 'value1', 'key2': 'WHY?!'}
</code></pre>
<p>** unpackages the dictionary into a new dictionary that is then assigned to dict2. </p>
<p>We can also confirm that each dictionary has a distinct id. </p>
<pre><code>&gt;&gt;&gt;id(dict1)
 178192816

&gt;&gt;&gt;id(dict2)
 178192600
</code></pre>
<p>If a deep copy is needed then <a href="https://docs.python.org/3/library/copy.html" rel="noreferrer">copy.deepcopy()</a> is still the way to go. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can also just make a new dictionary with a dictionary comprehension.  This avoids importing copy.</p>
<pre><code>dout = dict((k,v) for k,v in mydict.items())
</code></pre>
<p>Of course in python &gt;= 2.7 you can do:</p>
<pre><code>dout = {k:v for k,v in mydict.items()}
</code></pre>
<p>But for backwards compat., the top method is better.</p>
</div>
<div class="post-text" itemprop="text">
<p>The best and the easiest ways to <em>create a copy</em> of a <strong>dict</strong> in both <strong>Python 2.7 and 3</strong> are... </p>
<p><strong>To create a copy of simple(single-level) dictionary:</strong></p>
<p><strong>1.</strong> Using <strong>dict()</strong> method, instead of generating a reference that points to the existing dict.</p>
<pre><code>my_dict1 = dict()
my_dict1["message"] = "Hello Python"
print(my_dict1)  # {'message':'Hello Python'}

my_dict2 = dict(my_dict1)
print(my_dict2)  # {'message':'Hello Python'}

# Made changes in my_dict1 
my_dict1["name"] = "Emrit"
print(my_dict1)  # {'message':'Hello Python', 'name' : 'Emrit'}
print(my_dict2)  # {'message':'Hello Python'}
</code></pre>
<p><strong>2.</strong> Using the built-in <strong>update()</strong> method of python dictionary. </p>
<pre><code>my_dict2 = dict()
my_dict2.update(my_dict1)
print(my_dict2)  # {'message':'Hello Python'}

# Made changes in my_dict1 
my_dict1["name"] = "Emrit"
print(my_dict1)  # {'message':'Hello Python', 'name' : 'Emrit'}
print(my_dict2)  # {'message':'Hello Python'}
</code></pre>
<p><strong>To create a copy of nested or complex dictionary:</strong></p>
<p>Use the built-in <strong>copy</strong> module, which provides a generic shallow and deep copy operations. This module is present in both Python 2.7 and 3.*</p>
<pre><code>import copy

my_dict2 = copy.deepcopy(my_dict1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assignment statements in Python do not copy objects, they create bindings between a target and an object. </p>
<p>so, <code>dict2 = dict1</code>, it results another binding between <code>dict2</code>and the object that <code>dict1</code> refer to.</p>
<p>if you want to copy a dict, you can use the <code>copy module</code>.
The copy module has two interface:</p>
<pre><code>copy.copy(x)
Return a shallow copy of x.

copy.deepcopy(x)
Return a deep copy of x.
</code></pre>
<p>The difference between shallow and deep copying is only relevant for compound objects (objects that contain other objects, like lists or class instances):</p>
<p>A <strong><em>shallow copy</em></strong> constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.</p>
<p>A <strong><em>deep copy</em></strong> constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original.</p>
<p>For example, in python 2.7.9:</p>
<pre><code>&gt;&gt;&gt; import copy
&gt;&gt;&gt; a = [1,2,3,4,['a', 'b']]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; c = copy.copy(a)
&gt;&gt;&gt; d = copy.deepcopy(a)
&gt;&gt;&gt; a.append(5)
&gt;&gt;&gt; a[4].append('c')
</code></pre>
<p>and the result is:</p>
<pre><code>&gt;&gt;&gt; a
[1, 2, 3, 4, ['a', 'b', 'c'], 5]
&gt;&gt;&gt; b
[1, 2, 3, 4, ['a', 'b', 'c'], 5]
&gt;&gt;&gt; c
[1, 2, 3, 4, ['a', 'b', 'c']]
&gt;&gt;&gt; d
[1, 2, 3, 4, ['a', 'b']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In addition to the other provided solutions, you can use <code>**</code> to integrate the dictionary into an empty dictionary, e.g.,</p>
<p><strong><code>shallow_copy_of_other_dict = {**other_dict}</code></strong>. </p>
<p>Now you will have a "shallow" copy of <code>other_dict</code>. </p>
<p>Applied to your example:</p>
<pre><code>&gt;&gt;&gt; dict1 = {"key1": "value1", "key2": "value2"}
&gt;&gt;&gt; dict2 = {**dict1}
&gt;&gt;&gt; dict2
{'key1': 'value1', 'key2': 'value2'}
&gt;&gt;&gt; dict2["key2"] = "WHY?!"
&gt;&gt;&gt; dict1
{'key1': 'value1', 'key2': 'value2'}
&gt;&gt;&gt;
</code></pre>
<p><a href="https://docs.python.org/3.7/library/copy.html" rel="noreferrer">Pointer: Difference between shallow and deep copys</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can copy and edit the newly constructed copy in one go by calling the <code>dict</code> constructor with additional keyword arguments:</p>
<pre><code>&gt;&gt;&gt; dict1 = {"key1": "value1", "key2": "value2"}
&gt;&gt;&gt; dict2 = dict(dict1, key2="WHY?!")
&gt;&gt;&gt; dict1
{'key2': 'value2', 'key1': 'value1'}
&gt;&gt;&gt; dict2
{'key2': 'WHY?!', 'key1': 'value1'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This confused me too, initially, because I was coming from a C background.</p>
<p>In C, a variable is a location in memory with a defined type. Assigning to a variable copies the data into the variable's memory location.</p>
<p>But in Python, variables act more like pointers to objects. So assigning one variable to another doesn't make a copy, it just makes that variable name point to the same object.</p>
</div>
<div class="post-text" itemprop="text">
<p>Every variable in python (stuff like <code>dict1</code> or <code>str</code> or <code>__builtins__</code> is a pointer to some hidden platonic "object" inside the machine.</p>
<p>If you set <code>dict1 = dict2</code>,you just point <code>dict1</code> to the same object (or memory location, or whatever analogy you like) as <code>dict2</code>. Now, the object referenced by <code>dict1</code> is the same object referenced by <code>dict2</code>.</p>
<p>You can check: <code>dict1 is dict2</code> should be <code>True</code>. Also, <code>id(dict1)</code> should be the same as <code>id(dict2)</code>.</p>
<p>You want <code>dict1 = copy(dict2)</code>, or <code>dict1 = deepcopy(dict2)</code>.</p>
<p>The difference between <code>copy</code> and <code>deepcopy</code>? <code>deepcopy</code> will make sure that the elements of <code>dict2</code> (did you point it at a list?) are also copies.</p>
<p>I don't use <code>deepcopy</code> much - it's usually poor practice to write code that needs it (in my opinion).</p>
</div>
<div class="post-text" itemprop="text">
<p><code>dict2 = dict1</code> does not copy the dictionary. It simply gives you the programmer a second way (<code>dict2</code>) to refer to the same dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>dict1</code> is a symbol that references an underlying dictionary object. Assigning <code>dict1</code> to <code>dict2</code> merely assigns the same reference. Changing a key's value via the <code>dict2</code> symbol changes the underlying object, which also affects <code>dict1</code>. This is confusing.</p>
<p>It is far easier to reason about immutable values than references, so make copies whenever possible:</p>
<pre><code>person = {'name': 'Mary', 'age': 25}
one_year_later = {**person, 'age': 26}  # does not mutate person dict
</code></pre>
<p>This is syntactically the same as:</p>
<pre><code>one_year_later = dict(person, age=26)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because python works with reference, so when you did dict2 = dict1 you pass a reference to dict2, that was the same as dict1. So, when you make a change in dict1 or dict2 you change a reference, and both dicts chages. Sorry if I mistake something on English. </p>
</div>
<div class="post-text" itemprop="text">
<p>As others have explained, the built-in <code>dict</code> does not do what you want. But in Python2 (and probably 3 too) you can easily create a <code>ValueDict</code> class that copies with <code>=</code> so you can be sure that the original will not change.</p>
<pre><code>class ValueDict(dict):

    def __ilshift__(self, args):
        result = ValueDict(self)
        if isinstance(args, dict):
            dict.update(result, args)
        else:
            dict.__setitem__(result, *args)
        return result # Pythonic LVALUE modification

    def __irshift__(self, args):
        result = ValueDict(self)
        dict.__delitem__(result, args)
        return result # Pythonic LVALUE modification

    def __setitem__(self, k, v):
        raise AttributeError, \
            "Use \"value_dict&lt;&lt;='%s', ...\" instead of \"d[%s] = ...\"" % (k,k)

    def __delitem__(self, k):
        raise AttributeError, \
            "Use \"value_dict&gt;&gt;='%s'\" instead of \"del d[%s]" % (k,k)

    def update(self, d2):
        raise AttributeError, \
            "Use \"value_dict&lt;&lt;=dict2\" instead of \"value_dict.update(dict2)\""


# test
d = ValueDict()

d &lt;&lt;='apples', 5
d &lt;&lt;='pears', 8
print "d =", d

e = d
e &lt;&lt;='bananas', 1
print "e =", e
print "d =", d

d &gt;&gt;='pears'
print "d =", d
d &lt;&lt;={'blueberries': 2, 'watermelons': 315}
print "d =", d
print "e =", e
print "e['bananas'] =", e['bananas']


# result
d = {'apples': 5, 'pears': 8}
e = {'apples': 5, 'pears': 8, 'bananas': 1}
d = {'apples': 5, 'pears': 8}
d = {'apples': 5}
d = {'watermelons': 315, 'blueberries': 2, 'apples': 5}
e = {'apples': 5, 'pears': 8, 'bananas': 1}
e['bananas'] = 1

# e[0]=3
# would give:
# AttributeError: Use "value_dict&lt;&lt;='0', ..." instead of "d[0] = ..."
</code></pre>
<p>Please refer to the lvalue modification pattern discussed here: <a href="https://stackoverflow.com/questions/45788271/python-2-7-clean-syntax-for-lvalue-modification">Python 2.7 - clean syntax for lvalue modification</a>. The key observation is that <code>str</code> and <code>int</code> behave as values in Python (even though they're actually immutable objects under the hood). While you're observing that, please also observe that nothing is magically special about <code>str</code> or <code>int</code>. <code>dict</code> can be used in much the same ways, and I can think of many cases where <code>ValueDict</code> makes sense.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; dict2 = dict1
# dict2 is bind to the same Dict object which binds to dict1, so if you modify dict2, you will modify the dict1
</code></pre>
<p>There are many ways to copy Dict object, I simply use</p>
<pre><code>dict_1 = {
           'a':1,
           'b':2
         }
dict_2 = {}
dict_2.update(dict_1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>because, dict2 = dict1, dict2 holds the reference to dict1. Both dict1 and dict2 points to the same location in the memory. This is just a normal case while working with mutable objects in python. When you are working with mutable objects in python you must be careful as it is hard to debug. Such as the following example.</p>
<pre><code> my_users = {
        'ids':[1,2],
        'blocked_ids':[5,6,7]
 }
 ids = my_users.get('ids')
 ids.extend(my_users.get('blocked_ids')) #all_ids
 print ids#output:[1, 2, 5, 6, 7]
 print my_users #output:{'blocked_ids': [5, 6, 7], 'ids': [1, 2, 5, 6, 7]}
</code></pre>
<p>This example intention is to get all the user ids including blocked ids.
That we got from ids variable but we also updated the value of <strong><em>my_users</em></strong> unintentionally. when you extended the <strong><em>ids</em></strong> with <strong><em>blocked_ids</em></strong> my_users got updated because <strong><em>ids</em></strong> refer to <strong><em>my_users</em></strong>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Nice explanations, I want to add the simplest rule you can refer to when thinking of Python variables which you assign equal with <code>=</code>. If the data type is immutable, you don't have to worry about the unexpected behavior you encountered. If the data type is mutable, you want to make sure you make a copy of it to prevent the unexpected behavior your encountered.</p>
<p><strong>Immutable data types</strong>: string (a tuple of characters), tuple</p>
<p><strong>Mutable data types</strong>: list, array, dictionary</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use directly:</p>
<pre><code>dict2 = eval(repr(dict1))
</code></pre>
<p>where object dict2 is an independent copy of dict1, so you can modify dict2 without affecting dict1.</p>
<p>This works for any kind of object.</p>
</div>
<span class="comment-copy">It might be better to say "dict2 and dict1 point to the <b>same</b> dictionary", you are not changing dict1 or dict2 but what they point to.</span>
<span class="comment-copy">Also note that the dict.copy() is shallow, if there is a nested list/etc in there changes will be applied to both. IIRC. Deepcopy will avoid that.</span>
<span class="comment-copy">It is not quite correct that python never implicitly copies objects. Primitive data types, such as int, float, and bool, are also treated as objects (just do a <code>dir(1)</code> to see that), but they are implicitly copied.</span>
<span class="comment-copy">@danielkullmann, I think you might have misunderstandings about Python based on how other languages you've dealt with work. In Python, a) There is no concept of "primitive data types". <code>int</code>, <code>float</code>, and <code>bool</code> instances are real Python objects, and b) objects of these types are not implicitly copied when you pass them, not at a semantic Python level for sure and not even as an implementation detail in CPython.</span>
<span class="comment-copy">Unsubstantiated rhetoric like "Deep copy is considered harmful" is unhelpful. All else being equal, shallow copying a complex data structure is <i>significantly</i> more likely to yield unexpected edge case issues than deep copying the same structure. A copy in which modifications modify the original object isn't a copy; it's a bug. Ergo, most use cases absolutely <i>should</i> call <code>copy.deepcopy()</code> rather than <code>dict()</code> or <code>dict.copy()</code>. <a href="https://stackoverflow.com/users/1897/imran">Imran</a>'s <a href="https://stackoverflow.com/a/2465951/2809027">concise answer</a> is on the right side of sanity, unlike this answer.</span>
<span class="comment-copy">For any dictionary I ever work with, deepcopy is what I need... I just lost several hours due to a bug that was because I wasn't getting a complete copy of a nested dictionary and my changes to nested entries were affecting the original.</span>
<span class="comment-copy">Same here. deepcopy() does the trick. Was messing up my nested dicts inside a rotating cache by adding a timestamp to a 'copy' of the original event. Thank you!</span>
<span class="comment-copy">This actually should be marked as the correct answer; This answer is general and it works for a dictionary of dictionaries as well.</span>
<span class="comment-copy">@orezvani, I agree with you. This is the only answer which satisfied my need.</span>
<span class="comment-copy"><b>This should be the accepted answer.</b> The unsubstantiated "Deep copy is considered harmful" rhetoric embedded in the comment section of the current <a href="https://stackoverflow.com/a/2465932/2809027">accepted answer</a> blatantly invites synchronization woes when copying nested dictionaries (such as those documented here) and should be challenged as such.</span>
<span class="comment-copy">this should be the right answer as it doesn't to explicitly loop over the dict and can be used for other primary structures.</span>
<span class="comment-copy">Just to clarify: <code>w=copy.deepcopy(x)</code> is the key line.</span>
<span class="comment-copy">What is the difference between <code>dict2 = dict1</code> and <code>dict2 = copy.deepcopy(dict1)</code> ?</span>
<span class="comment-copy">@TheTank, y=x makes the two names(references) refer to a same object, i.e. "y is x" is True. Any change made on the object through x is equivalent to a same change through y. However u, v, w are references to new different objects which have values copied from x during instantiation though. As for the differences between u,v(shallow copy) and w(deepcopy), please check <a href="https://docs.python.org/2/library/copy.html" rel="nofollow noreferrer">docs.python.org/2/library/copy.html</a></span>
<span class="comment-copy">This looks awfully like pointers in C++. Nice for accomplishing the task, but readability wise I tend to dislike this type of operators.</span>
<span class="comment-copy">It does have a kind of c'ish look... but when merging together multiple dictionaries, the syntax does look pretty smooth.</span>
<span class="comment-copy">Be careful with that, it performs only a shallow copy.</span>
<span class="comment-copy">you are right @SebastianDressler, i'll makde adjustments. thnx.</span>
<span class="comment-copy">Usefull if you want create copy with some spicies: <code>dict2 = {**dict1, 'key3':'value3'}</code></span>
<span class="comment-copy">This is particularly useful if you want more control over how and what exactly is copied. +1</span>
<span class="comment-copy">Note that this method does not perform a deep copy, and if you want a shallow copy with no need to control over keys to be copied, <code>d2 = dict.copy(d1)</code> doesn't require any imports either.</span>
<span class="comment-copy">@JarekPiórkowski: or you can call a method like a method: <code>d2 = d1.copy()</code></span>
<span class="comment-copy">I believe <code>dict()</code> creates a shallow copy not a deep copy. Meaning that if you have a nested <code>dict</code> then the outer <code>dict</code> will be a copy but the inner dict will be a reference to the original inner dict.</span>
<span class="comment-copy">@shmuels  yes, both of these methods will create a shallow copy, not the deep one. See, the updated answer.</span>
<span class="comment-copy">This results in a shallow copy, not a deep copy.</span>
<span class="comment-copy">@sytech Thank you for the advise, I revised my answer.</span>
<span class="comment-copy">I was trying this but having trouble.  This only works for python 3.5 and up. <a href="https://www.python.org/dev/peps/pep-0448/" rel="nofollow noreferrer">python.org/dev/peps/pep-0448</a></span>
<span class="comment-copy">python variables act more like c++ references</span>
<span class="comment-copy">Because everything in Python is an object!   <a href="http://www.diveintopython.net/getting_to_know_python/everything_is_an_object.html" rel="nofollow noreferrer">diveintopython.net/getting_to_know_python/…</a>  (yes, this response is many years late, but perhaps it's of some use to someone!)</span>
<span class="comment-copy">I believe that Python language semantics say there are no "variables". They are called "named references"; meaning the reference to an object is a syntactic string in code. An object can have many named references to it. Immutable objects like ints and floats and str instances have only one instance of it per process. An int of 1 in memory does not change to a 2 or some other value at the same memory address when you do this myvalue=1   myvalue=2</span>
<span class="comment-copy">I just realized I need to always be using deepcopy so that when I copy a nested dictionary and start modifying nested entries, the effects occur only on the copy and not the original.</span>
<span class="comment-copy"><code>dict_2 = dict_1.copy()</code> is much more efficient and logical.</span>
<span class="comment-copy">This answer is incorrect, and should not be used.  A user-defined class, for example, may not have an appropriate <code>__repr__</code> to be reconstructed by eval, nor may the object's class be in the current scope to be called.  Even sticking with built-in types, this will fail if the same object is stored under multiple keys, as <code>dict2</code> would then have two separate objects.  A self-referential dictionary, where <code>dict1</code> contains itself, will instead contain <code>Ellipsis</code>.  It would be better to use <code>dict1.copy()</code></span>
<span class="comment-copy">Objects (or "values") are not expected to always have a faithful representation by character strings, not in a usual human readable way in any case.</span>
