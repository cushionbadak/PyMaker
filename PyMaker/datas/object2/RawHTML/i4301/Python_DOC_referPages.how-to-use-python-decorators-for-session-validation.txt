<div class="post-text" itemprop="text">
<p>I have some session class like</p>
<pre><code>class Session:

def __init__(self,):
    self._token_response_dict = self.get_token_details(Session._token_payload, Session._token_headers)
    self.token = self._token_response_dict['access_token']
    self.token_valid_time = datetime.datetime.now() + datetime.timedelta(
        seconds=self._token_response_dict['expires_in'])
    self.token_type = self._token_response_dict['token_type']

def is_valid(self):
    return True if datetime.datetime.now() &lt; self.token_valid_time else False

@staticmethod
def get_token_details(payload, headers):
    r = requests.post('http://webservice/token',
                      data=payload, headers=headers)
    return json.loads(r.json())
</code></pre>
<p>Before calling some function I have to check whether the session is valid or not. i am using session as a global variable like below.</p>
<pre><code>def get_all_docs(client_id):

global session
if session.is_valid():
    headers = {
        'content-type': "application/json",
        'cache-control': "no-cache",
        'postman-token': "aff6cf56-dc63-ae16-762f-4637762733ce",
        'authorization': session.token_type + ' ' + session.token

    }
    payload = {
        'LastRefreshTime': datetime.datetime.now().strptime(os.environ['LastRefreshTime'], '%d-%m-%Y %H:%M:%S'),
        'ClientID': client_id
    }

    r = requests.get(Details.get_docs_url, params=payload, headers=headers)
    return json.loads(r.json())
else:
    session = Session()
    get_all_docs(client_id)
</code></pre>
<p>How to perform this validation using python decorators?</p>
</div>
<div class="post-text" itemprop="text">
<p>If we continue using <code>session</code> as global variable, decorator can look like this:</p>
<pre><code>from functools import wraps

def keep_session_valid(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        global session
        if not session.is_valid():
            session = Session()
        return func(*args, **kwargs)


@keep_session_valid
def get_all_docs(client_id):
    headers = {
        'content-type': "application/json",
        'cache-control': "no-cache",
        'postman-token': "aff6cf56-dc63-ae16-762f-4637762733ce",
        'authorization': session.token_type + ' ' + session.token

    }
    payload = {
        'LastRefreshTime': datetime.datetime.now().strptime(os.environ['LastRefreshTime'], '%d-%m-%Y %H:%M:%S'),
        'ClientID': client_id
    }

    r = requests.get(Details.get_docs_url, params=payload, headers=headers)
    return json.loads(r.json())
</code></pre>
<p><strong>Note</strong>: <code>wraps</code> is not obligatory but it allows to keep decorated function params (name, docstring) unchanged. You can read more about it <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer">here</a>.</p>
</div>
<span class="comment-copy">Have you tried? Can you show us some effort?</span>
<span class="comment-copy">I have very basic knowledge on implementation of decorators. I have tried but not getting the desired result</span>
<span class="comment-copy">Please show what you have tried and say what problems you faced...</span>
