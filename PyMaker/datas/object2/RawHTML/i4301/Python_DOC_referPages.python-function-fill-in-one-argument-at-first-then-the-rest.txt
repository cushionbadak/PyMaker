<div class="post-text" itemprop="text">
<p>I want to:
Pass a function around, making it receive one argument at first, and then the other later.
Here are the details:</p>
<pre><code>def SuLQ(g, S, d):
    sigma = 0
    for i in S:
        sigma += g(d[i])
    if sigma &lt;= len(S) and sigma &gt;= 0:#required for DP
        return sigma + np.random.normal(loc = 0.0,scale = R)
    else:
        return 0


def sa_dir(wj, di):
    if np.dot(wj, di) &lt;= 0:
        return 1
    else:
        return 0

whole_set = [i for i in xrange(48843)]#[n]

two_d_array, targ = predict_on_b()
w0 = [ 0,  0,  0,  0,  0,  0,  -1,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,
-1,  0,  0,  -1,  0,  0,  0,  -1,  0,  0,  1,  0,  0,  -1,  0,  0,  0,  0,
0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  -1,
0,  0,  0,  0,  0,  0]

num_mis_vecs = SuLQ(sa_dir(wj = w0,), whole_set, two_d_array)
</code></pre>
<p>In the line:</p>
<pre><code>num_mis_vecs = SuLQ(sa_dir(wj = w0,), whole_set, two_d_array)
</code></pre>
<p>I passed the function sa_dir as an argument to SuLQ, while giving sa_dir one argument wj (the direction vector). </p>
<p>the other argument for sa_dir is given in the function(where g is another name for sa_dir(wj,di) with argument wj already fixed)</p>
<pre><code>SuLQ(g, S, d)
</code></pre>
<p>when executing </p>
<pre><code>sigma += g(d[i])
</code></pre>
<p>But it seems that python does not allow this. Here is the error i got.</p>
<pre><code>TypeError: sa_dir() takes exactly 2 arguments (1 given)
</code></pre>
<p>I don't want to hard-code wj into sa_dir because I want to change wj later.
Anyone has got suggestions? Thanks in advance.</p>
<p>(Just in case you are interested, I am re-implementing a paper's framework using python.)
(<a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.126.209&amp;rep=rep1&amp;type=pdf" rel="nofollow noreferrer">http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.126.209&amp;rep=rep1&amp;type=pdf</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Your answer is the <code>functools.partial</code> function, which takes one function and part of the arguments and then applies them later with all added arguments:</p>
<pre><code>from functools import partial

num_mis_vecs = SuLQ(partial(sa_dir, wj = w0), whole_set, two_d_array)
</code></pre>
</div>
<span class="comment-copy">sounds like you want to do partial function application -- check out <code>functools.partial()</code>, docs <a href="https://docs.python.org/3/library/functools.html" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy"><code>SuLQ(lambda di: sa_dir(w0, di), whole_set, two_d_array)</code>.</span>
<span class="comment-copy">Thank you for  these comments! They work well. I like the lambda expression approach because it makes clear what happened during the application process.</span>
<span class="comment-copy">Thank you for this answer! It works well.</span>
