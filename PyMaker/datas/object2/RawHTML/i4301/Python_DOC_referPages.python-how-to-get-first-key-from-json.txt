<div class="post-text" itemprop="text">
<p>Im Using Json for NLP/ML which means my json file is HUUUGE.</p>
<p>using MyPy(dont be confused this is python.)</p>
<pre><code>import json
from pprint import pprint
from typing import List

from Models.NewsDataModel import NewsDataModel, CreateNewNewsModelFromJson

jsonDataPath = "../DataSource/evileye-quorraengine-News-export.json"
rootJson = json.load(open(jsonDataPath))


def GetNewsData(max:int=0, hasMaxValue:bool=False)-&gt;List[NewsDataModel]:
    newsDataList = []

    jsonKeys = rootJson.keys()

    for newsDataKey in jsonKeys:

        newNewsData = CreateNewNewsModelFromJson(rootJson[newsDataKey])
        newsDataList.append(newNewsData)
        if hasMaxValue and len(newsDataList) &gt;= max:
            break

    return newsDataList
</code></pre>
<p>But. since i have 120000 keys, getting only keys takes more than 5 seconds.
how could i limit of keys to retrieve?</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, using python ordinary dictionaries you can't, as stated in this <a href="https://stackoverflow.com/questions/7971618/python-return-first-n-keyvalue-pairs-from-dict">question</a>:</p>
<blockquote>
<p>There's no such thing a the "first n" keys because a <code>dict</code> doesn't remember which keys were inserted first.</p>
</blockquote>
<p>But, the same question shows a method to solve this using <a href="https://docs.python.org/3/library/itertools.html#recipes" rel="nofollow noreferrer"><code>itertools</code> recipes</a>, specifically the <code>islice(iterable, start, stop[, step])</code> method, and as said in the <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>If start is non-zero, then elements from the iterable are skipped until start is reached. Afterward, elements are returned consecutively unless step is set higher than one which results in items being skipped. If stop is None, then iteration continues until the iterator is exhausted, if at all; <strong>otherwise, it stops at the specified position</strong>.</p>
</blockquote>
<p>Unfortunately I don't have any big enough dictionary to try it, but, if it still takes more time to run than you want to you can try using an <code>OrderedDict</code> as shown <a href="https://stackoverflow.com/questions/30250715/how-do-you-get-the-first-3-elements-in-python-ordereddict/30250803#30250803">here</a>, although I don't think it will perform better than the <code>itertools.islice</code></p>
</div>
<div class="post-text" itemprop="text">
<p>It seems that <code>json.load</code> has to process the whole string first. Putting into dictionary form takes negligible time.  You can control the output with the <code>object_pairs_hook</code> kwarg.  This can help you maintain the order, but it won't speed anything up. (there might be negligible time differences, but the bottleneck is parsing the string) Here's the times on a 120,000 keys dictionary. </p>
<pre><code>In[141]: test = {x:x for x in range(120000)}
In[142]: tst_str = json.dumps(test)
In[143]: %timeit json.loads(tst_str, object_pairs_hook=lambda x: x)[:10]
10 loops, best of 3: 55.7 ms per loop
In[144]: %timeit tester=json.loads(tst_str, object_pairs_hook=lambda x: iter(x));[next(tester) for _ in range(10)]
10 loops, best of 3: 54.4 ms per loop
In[145]: %timeit json.loads(tst_str)
10 loops, best of 3: 57.5 ms per loop
In[146]: json.loads(tst_str, object_pairs_hook=lambda x: x)[:10]
Out[146]: 
[('0', 0),
 ('1', 1),
 ('2', 2),
 ('3', 3),
 ('4', 4),
 ('5', 5),
 ('6', 6),
 ('7', 7),
 ('8', 8),
 ('9', 9)]
In[147]: tester=json.loads(tst_str, object_pairs_hook=lambda x: iter(x))
In[148]: tester
Out[148]: &lt;list_iterator at 0x86caef0&gt;
In[149]: [next(tester) for _ in range(10)]
Out[149]: 
[('0', 0),
 ('1', 1),
 ('2', 2),
 ('3', 3),
 ('4', 4),
 ('5', 5),
 ('6', 6),
 ('7', 7),
 ('8', 8),
 ('9', 9)]
</code></pre>
</div>
<span class="comment-copy">im sorry but your first link is down</span>
<span class="comment-copy">working with dictionary means i first have to convert json to dictionary. which will take alot more i think..(?)</span>
<span class="comment-copy">Considering e.s answer, converting to a dictionary takes negligible time</span>
