<div class="post-text" itemprop="text">
<p>I'm new to using dictionaries and I've been looking how to do this but I cannot find the answer to this specific problem.</p>
<p>I have a 4-level nested dictionary and inside the last level I have the values (arrays) of interest. It looks like this:</p>
<pre><code>import numpy as np

A = np.array([1,2,3])
B = np.array([4,5,6])
C = np.array([7,8,9])
D = np.array([10,11,12])
E = np.array([13,14,15])

d={('domestic','dog','collie','old'):A,
   ('domestic','dog','golden','old'):B,
   ('domestic','dog','golden','young'):C,
   ('domestic','cat','siamese','young'):D,
   ('stray','dog','golden','old'):E}
</code></pre>
<p>What I need to do is operate over all arrays that satisfy certain condition(s) on a specific level.</p>
<p>For instance, I need the averages of all the arrays that have the word 'dog' in its second level, no matter if it's domestic or stray, or if it's old or young, etc.</p>
<p>And what if I needed to satisfy several conditions at once? For instance, average over all dogs that are young. </p>
<p>Any help is appreciated!</p>
<p>Edit: The reason why I was not using Pandas is because my arrays have 2 dimensions, and I'm looking how to operate over every (x,y) for each "key conditions". I realize now with some answers/comments how my title question is not clear, and how the example I provided is not showing what I was really intending to do. I'm sorry for that, I should learn not to post after a long day of work.</p>
<p>In Pandas I've always used averages over all values, but since what I need to do here is get an array of averages according to some conditions, I thought this couldn't be done using Pandas, so after some research I thought the best idea was to start using dictionaries to store the data.</p>
<p>In my example, what I would need to obtain is an array (x0,y0,z0) of averages. For instance, if I want the average over all "dogs" &amp; "golden", the result should be </p>
<pre><code>[ (B[0]+C[0])/2, (B[1]+C[1])/2, (B[2]+C[2])/2 ]
</code></pre>
<p>Is this possible to achieve using Pandas?</p>
</div>
<div class="post-text" itemprop="text">
<p>One way without <code>pandas</code> is to create a function which does this for you.</p>
<p>For large datasets, this is advisable only for isolated calls. For <em>groups</em> of calculations, <code>pandas</code> is a better option.</p>
<pre><code>import numpy as np

A = np.array([1,2,3])
B = np.array([4,5,6])
C = np.array([7,8,9])
D = np.array([10,11,12])
E = np.array([13,14,15])

d = {('domestic','dog','collie','old'):A,
     ('domestic','dog','golden','old'):B,
     ('domestic','dog','golden','young'):C,
     ('domestic','cat','siamese','young'):D,
     ('stray','dog','golden','old'):E}

def averager(criteria, d):

    def apply_criteria(k, criteria):
        for i, j in criteria.items():
            if k[i] != j:
                return False
        else:
            return True

    return np.mean([v for k, v in d.items() if apply_criteria(k, criteria)], axis=0)

res = averager({0: 'domestic', 1: 'dog'}, d)

# array([ 4.,  5.,  6.])
</code></pre>
<p><strong>Explanation</strong></p>
<ul>
<li>The criteria are supplied to the <code>averager</code> function via a dictionary of <code>{index: value}</code> items.</li>
<li>We use a list a comprehension to extract relevant <code>numpy</code> array values.</li>
<li>Use <code>numpy.mean</code> with <code>axis=0</code> to calculate mean by index across arrays.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>What you have there is not a nested dictionary, but simply a dictionary consisting of keys which are tuples of 4 values. A nested dictionary would be more like <code>d={'a':{'b':{'c':{...}}}}</code>. So you can get the key of the dictionary simply by iterating over it or using <code>d.keys()</code>. For example, if you want to average over all arrays that have the word "dog" in the second position of the tuple:</p>
<pre><code>list = []
for key in d:
    if key[1] == 'dog':
        list.append(d[key])
average = np.mean(list)
</code></pre>
<p>It can be done much more succinctly with list comprehension:</p>
<pre><code>average = np.mean([d[key] for key in d if key[1]=='dog'])
</code></pre>
<p>For this question, I've assumed you want the full average over all elements of all arrays and that the arrays are all the same shape. </p>
</div>
<div class="post-text" itemprop="text">
<p>Without using Pandas</p>
<pre><code>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; pprint(d)
{('domestic', 'cat', 'siamese', 'young'): array([10, 11, 12]),
 ('domestic', 'dog', 'collie', 'old'): array([1, 2, 3]),
 ('domestic', 'dog', 'golden', 'old'): array([4, 5, 6]),
 ('domestic', 'dog', 'golden', 'young'): array([7, 8, 9]),
 ('stray', 'dog', 'golden', 'old'): array([13, 14, 15])}
</code></pre>
<p>Filter the dictionary</p>
<pre><code>&gt;&gt;&gt; keys = ('old','dog')
&gt;&gt;&gt; q = [v for k,v in d.items() if all(thing in k for thing in keys)]
&gt;&gt;&gt; q
[array([1, 2, 3]), array([4, 5, 6]), array([13, 14, 15])]
&gt;&gt;&gt;
&gt;&gt;&gt; #or with keys as a set
&gt;&gt;&gt; keys = set(('old','dog'))
&gt;&gt;&gt; q = [v for k,v in d.items() if len(keys.intersection(k)) == len(keys)]
</code></pre>
<p>Create a 2-d array from the results and get the mean of the columns:</p>
<pre><code>&gt;&gt;&gt; np.vstack(q)
array([[ 1,  2,  3],
       [ 4,  5,  6],
       [13, 14, 15]])
&gt;&gt;&gt; np.vstack(q).mean(1)
array([  2.,   5.,  14.])
&gt;&gt;&gt; np.vstack(q).mean(0)
array([ 6.,  7.,  8.])
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>Using the <code>in</code> operator, this solution does Not test for values in specific positions of the dictionary keys.</p>
</div>
<span class="comment-copy">Welcome to SO. Unfortunately this isn't a discussion forum or tutorial. Please take the time to read <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and the other links found on that page.  Invest some time with <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">the Tutorial</a> practicing the examples. It will give you an idea of the tools Python offers to help you solve your problem.  <a href="https://meta.stackoverflow.com/questions/284236/why-is-can-someone-help-me-not-an-actual-question">“Can someone help me?” not an actual question?</a>.</span>
<span class="comment-copy">This sounds like a job for pandas.</span>
<span class="comment-copy">@wwii I have read the "how to ask" before and I have used tutorials before. The question was not "help me" but rather "How can I solve this specific problem using dictionaries". I'm sorry that my English is not good enough for me to ask the question without using an example (which btw, it is not MY example but rather a very simplified version of it). I also DID research how to do this before posting, but honestly, if I have to start listing all the things that I've tried and didn't work for this reason or the other, it will be a never ending, most likely confusing, post.</span>
<span class="comment-copy">The question is too broad (imho) as @AlexHall suggested this could be accomplished with <a href="http://pandas.pydata.org/" rel="nofollow noreferrer">Pandas</a> and your example data would fit neatly into many of the examples in documentation. Then again there are a number of ways to filter items in a dictionary using loops and conditional statements then operate on the resultant item values. <i>cont'd</i></span>
<span class="comment-copy">*cont'd... The <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">in operator</a> and possibly <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer">operator.itemgetter</a> come to mind.  techniques for looping and comparing values are found in the Tutorial.</span>
<span class="comment-copy">This works perfectly, and it is very intuitive. Following all your suggestions, I tried using Pandas. However, when I transform my dictionary using <code>df = pd.DataFrame(d)</code> I get the following error: <code>ValueError: If using all scalar values, you must pass an index.</code> After a quick search, I couldn't find a specific solution for this. So since your code is working, I'll stuck with it. Thanks!</span>
<span class="comment-copy">Try <code>pd.DataFrame.from_dict(d, orient='index')</code>. Otherwise this may be another question :).</span>
<span class="comment-copy">Sadly, <code>ValueError: Must pass 2-d input</code>. But thank you though! I'll consider making another question if I keep having the problem later on. Thanks again! :)</span>
<span class="comment-copy">Although this does work perfectly in my example, for some reason it does not work with my data. I think it might be related with the fact that I constructed a dictionary using the class <code>Vividict</code> given by AaronHall in <a href="https://stackoverflow.com/questions/635483/what-is-the-best-way-to-implement-nested-dictionariesl">this answer</a></span>
