<div class="post-text" itemprop="text">
<p>Hopefully, I ask this right. </p>
<p>I have an original very large list of dictionary's. The keys in my new dictionary well change each time a new number is selected based on user input. These keys are from a value that is located in the same section of the old dictionary list (from the example dictionary below it would be 'id').</p>
<p>I now need to sort through the very large original list of dictionary's using the values extracted based on previous user input. </p>
<p>While removing any none values and adding up the total from the old dictionary list. 'word' through 'word4' can change based on previous user input (my new dictionary changes for example it may only be word4 or something completely different not listed in this small version) but are located in the same place within the old dictionary list.</p>
<p>I feel as if my logic is very flawed here.</p>
<pre><code>old_dict = [
    {'name': 'no', 'id':'word', 'value':19},
    {'name': 'asno', 'id':'word2', 'value':27},
    {'name': 'asadsdsano', 'id':'word3', 'value':33},
    {'name': 'nssso', 'id':'word4', 'value':None},
    {'name': 'asnadao', 'id':'word2', 'value':22},
    {'name': 'asadsdsano', 'id':'word3', 'value':27},
    {'name': 'assdadas', 'id':'word4', 'value':11},
    {'name': 'asno', 'id':'word2', 'value':44},
    {'name': 'asadsdsano', 'id':'word3', 'value': None},
    {'name': 'asadsdsano', 'id':'word', 'value':101},
    {'name': 'asaaaadsdsano', 'id':'word2', 'value':101}]
</code></pre>
<p>The example output would be </p>
<p>word : 120</p>
<p>word2 : 150</p>
<p>word3 : 60</p>
<p>word4 : 11</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>groupby</code> from <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools</a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
</code></pre>
<p>note that <code>groupby()</code> requires its input to be sorted:</p>
<pre><code>&gt;&gt;&gt; old_dict.sort(key=lambda d: d['id'])
</code></pre>
<p>the key is the <code>'id'</code> item:</p>
<pre><code>&gt;&gt;&gt; g=groupby(old_dict, key=lambda d: d['id'])
</code></pre>
<p>using filter to remove <code>None</code> values, and <code>sum()</code> to sum:</p>
<pre><code>&gt;&gt;&gt; {k: sum(filter(None, (x['value'] for x in v))) for k, v in g}
{'word': 120, 'word2': 194, 'word3': 60, 'word4': 11}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Option 1: defaultdict</strong></p>
<p>You can use <code>collections.defaultdict</code> with a <code>for</code> loop.</p>
<pre><code>from collections import defaultdict

d = defaultdict(int)

for item in old_dict:
    val = item['value']
    if val:
        d[item['id']] += val
</code></pre>
<p>Result:</p>
<pre><code>defaultdict(int, {'word': 120, 'word2': 194, 'word3': 60, 'word4': 11})
</code></pre>
<p><strong>Option 2: pandas</strong></p>
<p>If you are open to using a 3rd party library, <code>pandas</code> accepts a list of dictionaries:</p>
<pre><code>import pandas as pd

d = pd.DataFrame(old_dict).groupby('id')['value'].sum().to_dict()
</code></pre>
<p>Result:</p>
<pre><code>{'word': 120.0, 'word2': 194.0, 'word3': 60.0, 'word4': 11.0}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think I'm understanding you correctly: you have a list of dictionaries which you want to group by value on the <code>id</code> key summing the <code>value</code> key for each dictionary in the list that matches that <code>id</code> key.  Is that right?</p>
<p>There are a few ways to approach this problem, some with more sophisticated tooling, but I'll give you a simple answer using just lists and dicts to start.</p>
<p>Input:</p>
<pre><code>old_dict = [
    {'name': 'no', 'id': 'word', 'value': 19},
    {'name': 'asno', 'id': 'word2', 'value': 27},
    {'name': 'asadsdsano', 'id': 'word3', 'value': 33},
    {'name': 'nssso', 'id': 'word4', 'value': None},
    {'name': 'asnadao', 'id': 'word2', 'value': 22},
    {'name': 'asadsdsano', 'id': 'word3', 'value': 27},
    {'name': 'assdadas', 'id': 'word4', 'value': 11},
    {'name': 'asno', 'id': 'word2', 'value': 44},
    {'name': 'asadsdsano', 'id': 'word3', 'value': None},
    {'name': 'asadsdsano', 'id': 'word', 'value': 101},
    {'name': 'asaaaadsdsano', 'id': 'word2', 'value': 101},
]
</code></pre>
<p>Code:</p>
<pre><code>unique_keys = sorted(list(set([x['id'] for x in old_dict])))

new_dict = {}
for key in unique_keys:
    value_sum = sum([x['value'] for x in old_dict if (x['value'] is not None
                                                      and x['id'] == key)])
    new_dict[key] = value_sum

for k, v in new_dict.items():
    print(k, v)
</code></pre>
<p>Output:</p>
<pre><code>word 120
word2 194
word3 60
word4 11
</code></pre>
</div>
<span class="comment-copy">Can you make a minimal example that actually makes sense? Not code, but a sample big dictionary with 10 entries, a sample little one with say 3-5 entries, any additional inputs your code would require, and the output you would expect.</span>
<span class="comment-copy">And what is the question?</span>
<span class="comment-copy">I created an old dictionary  list which is a very very small version of the one I am accessing. I am dumb and forgot to say its a list of dictionaries.</span>
<span class="comment-copy">This still isn't clear.  You vacillate between <code>word</code> as a variable and as a string.  You post an example called <code>old_dict</code>, but refer to it in the text as <code>new_dict</code>.</span>
<span class="comment-copy">I hope that helps.</span>
<span class="comment-copy">Yes thats what I meant to say.</span>
<span class="comment-copy">upvoting just because you made sense of that mess.</span>
