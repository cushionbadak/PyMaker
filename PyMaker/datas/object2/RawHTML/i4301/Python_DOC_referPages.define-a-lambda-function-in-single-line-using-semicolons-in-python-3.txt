<div class="post-text" itemprop="text">
<p>In python3, following works:</p>
<pre><code>print(3); print(5)
</code></pre>
<p>However following gives a syntax error due to semicolon:</p>
<pre><code>(lambda key: (print(3); print(5)))
</code></pre>
<p>Why is that, and is there a way to write a lambda function in single line (I intend to pass it as a short argument, without defining the function elsewhere)</p>
</div>
<div class="post-text" itemprop="text">
<p>Existing answers cover the "how?" of the question, but not the "why". Which is to say, <em>why</em> doesn't <code>lambda: print(3); print(5)</code> work? The answer is in the language specification.</p>
<p>From <a href="https://docs.python.org/3/reference/expressions.html#lambda" rel="nofollow noreferrer">https://docs.python.org/3/reference/expressions.html#lambda</a>:</p>
<blockquote>
<p>Lambda expressions (sometimes called lambda forms) are used to create anonymous functions. The expression <code>lambda arguments: expression</code> yields a function object. [...] Note that <strong>functions created with lambda expressions cannot contain statements</strong> or annotations.</p>
</blockquote>
<p>From <a href="https://docs.python.org/3/reference/simple_stmts.html?highlight=semicolon#simple-statements" rel="nofollow noreferrer">https://docs.python.org/3/reference/simple_stmts.html?highlight=semicolon#simple-statements</a>:</p>
<blockquote>
<p>A simple statement is comprised within a single logical line. Several simple <strong>statements may occur on a single line separated by semicolons</strong>.</p>
</blockquote>
<p><code>print(3); print(5)</code> contains a semicolon, so it is a collection of simple statements. But a lambda can't contain statements. So a lambda can't contain <code>print(3); print(5)</code>.</p>
<hr/>
<p>So why does <code>(lambda key: (print(3), print(5)))</code> work? It's because <code>(print(3), print(5))</code> is not a statement. It's an expression: in particular, it is a tuple literal (formally, a <a href="https://docs.python.org/3/reference/expressions.html#parenthesized-forms" rel="nofollow noreferrer">parenthesized form</a> whose expression list contains at least one comma), whose first element is a <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-call" rel="nofollow noreferrer">call</a> to <code>print</code> with argument 3, and whose second element is a call to <code>print</code> with argument 5. All of this is a single expression, so lambda accepts it without trouble.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another possible option:</p>
<pre><code>f = lambda x, y: print(x, y, sep='\n')
f(3, 4)

# 3
# 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a lambda function and use it in a single line. But its not with semicolons. </p>
<p>Define lambda in brackets and pass arguments immediately after that using brackets:</p>
<pre><code>(lambda x,y: x+y)(6,4)
</code></pre>
<p>This will give output 10.</p>
</div>
<span class="comment-copy">that was easy... should I delete the question or mark this as an answer?</span>
<span class="comment-copy">i suspect this is an XY problem but impossible to know without more context...</span>
<span class="comment-copy">What are you using this for? Is this simply so that you can <code>print</code> items across multiple lines in one line of code?</span>
<span class="comment-copy">I tried to see what is passed as key argument when I use <code>min(tupleList, key=(lambda key: print(key), key[1]))</code>, so thats the context nothing too serious. posted here because I thought its a quick syntax question that hasnt been asked yet</span>
<span class="comment-copy">You can just use <code>def</code>, and it'd be way more readable. You don't have to define it "elsewhere" per se, you can use a nested <code>def</code> if need be.</span>
<span class="comment-copy">Curious, on my machine <code>help(print)</code> gives <code>print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)</code>.</span>
<span class="comment-copy">Ah you're totally right, sorry!</span>
