<div class="post-text" itemprop="text">
<p>I was making a code in which I needed to compare two lists for exact matches, and I found this code (I had to add <code>print</code> so it would output the result):</p>
<pre><code>a = [1,2,3,4,5]
b = [9,8,7,6,5]
print [i for i, j in zip(a, b) if i == j]
</code></pre>
<p>This code outputs <code>[5]</code> because it prints the list, and if I change the code to</p>
<pre><code>a = [1,2,3,5,4]
b = [9,8,7,6,5]
print [i for i, j in zip(a, b) if i == j]
</code></pre>
<p>It outputs <code>[]</code> because the list is empty.</p>
<p>This is all fine and good because it solves my list comparison problem, but I have almost no idea why or how it works. I would greatly appreciate either a detailed or partial explanation if you have one.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's called a "list comprehension", let's break it down here:</p>
<p><code>[i for i, j in zip(a, b) if i == j]</code> can be roughly understood as making a list of <code>[i]</code>, where <code>i</code> (and <code>j</code>) come from <code>zip(a, b)</code> but only if <code>i == j</code>.</p>
<p><code>zip(a, b)</code> takes two arrays, <code>a</code> and <code>b</code>, and combines them in such a way that the end result looks like <code>[(1, 9), (2, 8), ...]</code></p>
<p>So effectively, you're processing the result of <code>zip(a, b)</code> and iterating over tuples <code>i, j</code> to return only if <code>i == j</code> is "truthy". Explaining "truthy" is a bit out of scope for this answer, but in this case, the expression <code>i == j</code> evaluates to <code>True</code> if <code>i</code> and <code>j</code> have the same value. I.e., <code>5 == 5</code> is <code>True</code>, where <code>5 == 4</code> is <code>False</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a list comprehension, which is a python syntax feature. <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">You can read about it in the python tutorial here</a>.</p>
<p>It is being combined with the <code>zip()</code> built-in function. <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">Documentation for that function is here</a>.</p>
<p>A tl;dr is: the zip function makes pairs from both lists, and the list comprehension will filter out the pairs that don't compare equal, selecting only the pairs that match</p>
</div>
<div class="post-text" itemprop="text">
<p>To get the code working with the random indexing of the elements, you can try the following:</p>
<p>a = [1,2,3,5,4]
b = [9,8,7,6,5]</p>
<p>print [i for i in a for j in b if i == j]</p>
<p>This will output:
[5]</p>
</div>
<span class="comment-copy">Which part of this don't you understand? Do you know how list comprehensions work? Do you know what <code>zip(a, b)</code> does? Do you know what <code>i == j</code> does? Answering all of this would be far too broad for a single Q&amp;A.</span>
<span class="comment-copy">Sorry, this is my first question on this site. I don't know how <i>exact</i> list comprehensions work, but I know how to compare lists in other ways. I also do not know what <code>i == j</code> does.</span>
<span class="comment-copy">Just in case all you're asking about is the actual result of this comparison method: it returns only those elements that are the same <i>and</i> in the same position in the two lists.</span>
<span class="comment-copy">Thanks, I know what it does. I just need to know how it does it.</span>
<span class="comment-copy">Hi Gabe, welcome to StackOverflow! There is a <a href="https://stackoverflow.com/help">Help Center</a> with tips on how to ask good questions. You probably had no way of knowing your question would be too broad, but a quick tour of the help center will aid you in refining your questions. Cheers!</span>
<span class="comment-copy">He said in a comment that he doesn't understand what <code>i == j</code> means. So telling him that it returns only matches where <code>i == j</code> may not be very meaningful.</span>
<span class="comment-copy">Good call, I answered before that comment. I'll update the answer with a brief explanation on that. thanks!</span>
<span class="comment-copy">A <i>tl;dr</i> at the end...epic</span>
<span class="comment-copy">...and then just the first element of each pair is selected.... These questions are crazy to answer, you never know how much or little the OP even knows.</span>
