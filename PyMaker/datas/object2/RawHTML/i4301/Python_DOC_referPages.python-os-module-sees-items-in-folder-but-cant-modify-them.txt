<div class="post-text" itemprop="text">
<p>I am attempting to create a program that cycles through a list of .txt files and adds their filename and contents to a dictionary. The program is navigating to the folder correctly, and I can even print out a the names of the files in the folder. However, when I try to add the filename and contents to the dictionary I get this error in the console,</p>
<pre><code>Traceback (most recent call last):
  File "test.py", line 33, in &lt;module&gt;
    user1.append_journal_files(location)
  File "test.py", line 21, in append_journal_files
    with open(filename, 'r') as file_object:
FileNotFoundError: [Errno 2] No such file or directory: 'dump.0001.txt'
</code></pre>
<p>I am not sure why the files are not being recognized as existing once I try to manipulate them. Thank you all in advance for taking the time to look at this. Please let me know if anything needs to be clarified. I am new to programming and want to make sure I am communicating well. Thanks again.  </p>
<pre><code>     #Python Version 3.6.5

     #imports
        import os

        #classes
        class User():
            #Class that models a Revit user

            def __init__(self, username):
                '''initializes the class with a username, additional info
                   gathered after initialization'''
                self.username = username
                self.title = ""
                self.journal_log = {}

            def append_journal_files(self, directory_in_str):
                #appends all items of filetype in folder to dictionary instance.
                directory = os.fsencode(directory_in_str)
                for file in os.listdir(directory):
                    filename = os.fsdecode(file)
                    if filename.endswith(".txt"):
                        with open(filename, 'r') as file_object:
                            if filename not in self.journal_log.keys():
                                self.journal_log[filename] = file_object.readlines()
                            else:
                                continue
                        continue
                    else:
                        continue    

        #begin running program
        user1 = User("Christian")
        location = 'C:\\Users\Christian Gentry\AppData\Local\Autodesk\Revit\Autodesk Revit 2018\Journals'                  
        user1.append_journal_files(location)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>filename</code> is just the base name, like <code>dump.0001.txt</code>.</p>
<p>If you want to open the file, you need either a full path, like <code>C:\Users\Christian Gentry\AppData\Local\Autodesk\Revit\Autodesk Revit 2018\Journals\dump0001.txt</code>. (It could also be a relative path from the current working directory, but it has to be a path that gets you to the file.)</p>
<p>You're already doing that for <code>listdir</code>—you're not just passing <code>Journals</code> and expecting that to work—and it's the same idea here.</p>
<p>The simplest fix is:</p>
<pre><code>pathname = os.path.join(directory, filename)
with open(pathname, 'r') as file_object:
</code></pre>
<hr/>
<p>While we're at it:</p>
<ul>
<li>You've only escaped one of the backslashes in your Windows pathnames. Technically, what you have is correct, because all of the other path components happen to start with letters that aren't valid backslash escapes, but that's really not a good thing to rely on. Either use a raw string literal, escape all the backslashes, or use forward slashes.</li>
<li>You don't need to <code>fsencode</code> the path to pass to <code>listdir</code> and <code>fsdecode</code> the results you get back. If you just pass a string in, Python will automatically encode them appropriately and automatically decode the results for you.</li>
<li>Consider using <a href="https://docs.python.org/3/library/pathlib.html#module-pathlib" rel="nofollow noreferrer"><code>pathlib</code></a> instead of <code>os</code>; it's a little easier to understand for novices, its help is a lot easier to navigate, and it makes it harder to get a lot of little things wrong. Before 3.6 it wasn't usable with large chunks of the stdlib, but you're using 3.6, so that doesn't matter.</li>
</ul>
</div>
<span class="comment-copy">You missed the directory part of the path when opening the file.</span>
<span class="comment-copy">Hey thanks a ton @abarnert! I did not realize that the path had to be joined to the filename. The one change I did have to make to your solution was instead of pathname = os.path.join(directory, filename), I had to input pathname = os.path.join(directory_in_str, filename). This solved my problem!</span>
