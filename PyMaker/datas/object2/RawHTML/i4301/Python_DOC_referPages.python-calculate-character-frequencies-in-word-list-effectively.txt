<div class="post-text" itemprop="text">
<p>When I have a long list like</p>
<pre><code>words = ['axcd', 'abcd', 'abef', 'abxf']
</code></pre>
<p>where each string has the same length, how do I calculate an array like </p>
<pre><code>result[0] = [{char: 'a', freq: 4}] 
result[1] = [{char: 'b', freq: 3}, {char: 'x', freq: 1}] # ordered by frequencies
result[2] = [{char: 'c', freq: 2}, {char: 'e', freq: 1}, {char: 'x', freq: 1}]
result[3] = [{char: 'd', freq: 2}, {char: 'f', freq: 2}]
</code></pre>
<p>in the most effective way ? </p>
</div>
<div class="post-text" itemprop="text">
<p>Here is one way using <code>collections.Counter</code> and <code>zip</code>.</p>
<p>I have explicitly defined a <code>formatter</code> function for clarity.</p>
<pre><code>from collections import Counter

words = ['axcd', 'abcd', 'abef', 'abxf']

def formatter(res):
    return [{'char': k, 'freq': v} for k, v in sorted(res.items(),
            key=lambda x: x[1], reverse=True)]

result = dict(enumerate(formatter(Counter(i)) for i in zip(*words)))
</code></pre>
<p>Result:</p>
<pre><code>{0: [{'char': 'a', 'freq': 4}],
 1: [{'char': 'b', 'freq': 3}, {'char': 'x', 'freq': 1}],
 2: [{'char': 'c', 'freq': 2}, {'char': 'e', 'freq': 1}, {'char': 'x', 'freq': 1}],
 3: [{'char': 'd', 'freq': 2}, {'char': 'f', 'freq': 2}]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Transpose the input list with the old <code>zip(*words)</code> trick</li>
<li>Use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a> to count the letters in each row</li>
<li>Sort the counters' elements by value</li>
<li>Turn the sorted elements into <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a>s</li>
</ol>
<pre><code>import collections
import operator

words = ['axcd', 'abcd', 'abef', 'abxf']

transposed = zip(*words)
counts = [collections.Counter(letters) for letters in transposed]
sorted_counts = [sorted(dic.items(), key=operator.itemgetter(1), reverse=True)
                       for dic in counts]
result = [collections.OrderedDict(items) for items in sorted_counts]

# result:
# [OrderedDict([('a', 4)]),
#  OrderedDict([('b', 3), ('x', 1)]),
#  OrderedDict([('c', 2), ('e', 1), ('x', 1)]),
#  OrderedDict([('d', 2), ('f', 2)])]
</code></pre>
<hr/>
<p>To give some more insight into what each step does, I'll post the intermediate results here.</p>
<p>After transposing the input, it looks like this:</p>
<pre><code>&gt;&gt;&gt; transposed
[('a', 'a', 'a', 'a'),
 ('x', 'b', 'b', 'b'),
 ('c', 'c', 'e', 'x'),
 ('d', 'd', 'f', 'f')]
</code></pre>
<p>These tuples are then turned into Counters:</p>
<pre><code>&gt;&gt;&gt; counts
[Counter({'a': 4}),
 Counter({'b': 3, 'x': 1}),
 Counter({'c': 2, 'e': 1, 'x': 1}),
 Counter({'d': 2, 'f': 2})]
</code></pre>
<p>Sorting these turns them into lists of <code>(key, value)</code> tuples:</p>
<pre><code>&gt;&gt;&gt; sorted_counts
[[('a', 4)],
 [('b', 3), ('x', 1)],
 [('c', 2), ('e', 1), ('x', 1)],
 [('d', 2), ('f', 2)]]
</code></pre>
<p>And in the last step they're converted to OrderedDicts.</p>
</div>
<span class="comment-copy">Does the result have to be a list like <code>[{char: 'b', freq: 3}, {char: 'x', freq: 1}]</code>? Why not an <code>OrderedDict(b=3, x=1)</code> instead?</span>
<span class="comment-copy">make an attempt before asking, SO is not a coding service</span>
<span class="comment-copy">@Aran-Fey An OrderedDict would also be good</span>
<span class="comment-copy">Did one of the below solutions help? Feel free to accept one, or ask for clarification.</span>
<span class="comment-copy">Nice. Similar to mine except you apply <code>OrderedDict</code> instead of <code>dict(enumerate(...))</code>. +1</span>
