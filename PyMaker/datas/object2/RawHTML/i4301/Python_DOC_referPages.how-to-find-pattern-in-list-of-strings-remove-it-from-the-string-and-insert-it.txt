<div class="post-text" itemprop="text">
<p>I have a list of strings that looks something like this:</p>
<pre><code>list_strings = ["The", "11:2dog", "is", "2:33", "a22:11", "german", "shepherd.2:2"]
</code></pre>
<p>Here is what I want to do:</p>
<ol>
<li><p>For each string in the list, I want to remove the numbers that match the pattern <code>number:number</code>. This pattern will always be at the beginning or the end of the string.</p></li>
<li><p>When the pattern is removed from the string, I want to insert it as as the next element of the list if it is at the end, or as the previous element of the list if it is at the beginning of the string.</p></li>
</ol>
<p>So:</p>
<pre><code>list_strings = ["The", "11:2dog", "is", "2:33", "a22:11", "german", "shepherd.2:2"]
</code></pre>
<p>becomes:</p>
<pre><code>new_list_strings = ["The", "11:2", "dog", "is", "2:33", "a", "22:11", "german", "shepherd.", "2:2"]
</code></pre>
<p>To find the words that may contain the pattern, I have tried using regular expressions:</p>
<pre><code>for index, word in enumerate(list_strings):
    try:
        if re.search(r'\d+:\d+', word).group() != None:
            words_with_pattern.append([index], word)
    except:
        pass
</code></pre>
<p>However, this only finds instances where the pattern is alone like "11:21". Once I have a list of all the words with the pattern, I will have to remove the pattern from the strings, note whether it is at the beginning or at the end, and insert it at the corresponding index in the list. </p>
<p>Any help? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>This method uses <code>re.findall</code> to get all matches in a string and then combines the results into one list.</p>
<p>The regex <code>\d+:\d+|(?:(?!\d+:\d+).)+</code> works as follows:</p>
<ul>
<li>Match either of the following

<ul>
<li><code>\d+:\d+</code> Matches one or more digits, followed by <code>:</code>, then one or more digits</li>
<li><code>(?:(?!\d+:\d+).)+</code> This is a <a href="https://stackoverflow.com/questions/30900794/tempered-greedy-token-what-is-different-about-placing-the-dot-before-the-negat">tempered greedy token</a> that matches any character one or more times except where <code>\d+:\d+</code> matches. This forces it to stop matching at that location and the <code>findall</code> method retries to match that that new location (now matching the <code>\d+:\d+</code> pattern option instead resulting in multiple matches per string)</li>
</ul></li>
</ul>
<h3>Method 1</h3>
<p>The following code is much easier to read than Method 2.</p>
<p><a href="https://tio.run/##LY3BCsMgEETP9Su2nhRLQHMTQn6itzaHgCYKRmUNlEL/3camh519w7Iz@b27FPta/ZYT7oCWkFBggAe9O0tvQKXUyqS1oS9Nle77tmeltJSNVovbHBsVZ7OzaDqlFZ1ItK8zbCJLQijgI4SiyeU8iOHo6xYfzRwCQ/o0Qh/zYaNm4/XveMfFEV04yejjzn6vvNYv" rel="nofollow noreferrer">See code in use here</a></p>
<pre><code>import re

ls = ["The", "11:2dog", "is", "2:33", "a22:11", "german", "shepherd.2:2"]
newls = []
for s in ls:
    newls += re.findall(r"\d+:\d+|(?:(?!\d+:\d+).)+", s)
print(newls)
</code></pre>
<h3>Method 2</h3>
<p>This makes the code from Method 1 a one-liner, but it's harder to read. The method used to flatten the list <code>sum(l,[])</code> is taken from <a href="https://stackoverflow.com/a/952946/3600709">this answer</a>.</p>
<p><a href="https://tio.run/##LYyxCsMgFEX3fMWrk5IQ0GxCyU9kSzMENFEwKu/ZodB/txE63HPPXW7@FJfiVKu/csICaLsuEDxhZYuzbAAmpVYmnU09NSo9Ta13pbSUzU6L1x6bkbPZWTSj0optXUYfC6f3xVe04@Gj2UPgyF6m13e@fNZ8fvyXGEV/f5CAIyEQ@AiBtgHWTYhafw" rel="nofollow noreferrer">See code in use here</a></p>
<pre><code>import re

ls = ["The", "11:2dog", "is", "2:33", "a22:11", "german", "shepherd.2:2"]
print(sum([re.findall(r"\d+:\d+|(?:(?!\d+:\d+).)+", s) for s in ls], []))
</code></pre>
<hr/>
<h3>Result</h3>
<pre><code>['The', '11:2', 'dog', 'is', '2:33', 'a', '22:11', 'german', 'shepherd.', '2:2']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer">re.split</a>:</p>
<pre><code>import re

list_strings = ["The", "11:2dog", "is", "2:33", "a22:11", "german", "shepherd.2:2"]

out = []

for item in list_strings:
    split = re.split(r'(\d+:\d+)', item)
    out.extend([part for part in split if part])

print(out)
# ['The', '11:2', 'dog', 'is', '2:33', 'a', '22:11', 'german', 'shepherd.', '2:2']
</code></pre>
<p><code>split</code> will contain the parts of the string and the separator, as we captured it in the regex. </p>
<p>It also contains empty strings after/before the separator if it was at the end/start of the string, so we have to remove them before extending the output.</p>
<hr/>
<p>As @chrisz suggested in the comments, this can be written in a much more compact form using a list comprehension:</p>
<pre><code>[j for i in list_strings for j in re.split(r'(\d+:\d+)', i) if j]
</code></pre>
</div>
