<div class="post-text" itemprop="text">
<p>I have these two examples of python decorators implementation. I'd like to know what is the difference between them regarding function wrapper implementation. They work as the same way? There is any context difference? What is the pythonic way to do a function wrapper? </p>
<p><strong>Example 1</strong></p>
<pre><code>from functools import wraps

def retry(times=3, waiting_time=30):
    '''
    Decorator to retry any functions 'times' times.

    Parameters
    ----------    
    times: int
        Number of times to retry to execute
    waiting_time: int
        Number of times to wait between retries

    '''
    def retry_decorator(func):
        # My doubt is here.
        @wraps(func)
        def retried_function(*args, **kwargs):
            for i in range(times):
                try:                           
                    return func(*args, **kwargs)
                except Exception as err:
                    print(f'Try nÂº {i+1}')
                    sleep(waiting_time)           

            func(*args, **kwargs)

        return retried_function

    return retry_decorator
</code></pre>
<p><strong>Example 2</strong></p>
<pre><code>def exception(logger):
    '''
    Decorator that wraps the passed function and logs 
    exceptions when it occurs.

    Parameters
    ----------
    logger : logging object
        Object to use to log exceptions

    ''' 
    def decorator(func):
        # Here the function wrapper is different from example 1     
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except:
                # log the exception
                err = "There was an exception in "
                err += func.__name__
                logger.exception(err) 
                # re-raise the exception
                raise
        return wrapper
    return decorator
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all, we are looking at something a little bit more sophisticated than a decorator. A decorator is a function that takes a function as input and returns a function. Here, the top functions return decorators. So they are actually also decorators in the sense above, even though what is usually called the decorator is the first inner function. This definition scheme is often useful to create parametric decorators.</p>
<p>With that out of the way, it seems you are specifically asking about <code>functools.wraps</code>. If so, I can only urge you to take a look at the doc <a href="https://docs.python.org/2/library/functools.html" rel="nofollow noreferrer">https://docs.python.org/2/library/functools.html</a>. </p>
<p>Basically, it used to make the function returned by the decorator look the same as the decorated function i.e.: have the same name, docstrings, etc...</p>
</div>
<span class="comment-copy">Are you asking about <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer"><code>functools.wraps</code></a>?  That decorator makes it so that information about the wrapped function is made available, instead of information about the wrapper.</span>
<span class="comment-copy">but use it is really necessary? The second example doesn't use it and works.</span>
<span class="comment-copy">You can write decorators without it, but they tend to make getting data about the wrapped function difficult.  So if you wanted to read the docstring of a wrapped function, or know its name, etc. that's very difficult without using <code>wraps</code>.  It's considered good practice: you may never need that functionality, but you never know, and if you're providing these decorators for other people to use they may need it.  It also doesn't hurt anything.  I can't think of a downside to using <code>wraps</code></span>
<span class="comment-copy">It's not necessary to make the code work, the same way comments and documentation and good coding style aren't necessary. <code>functools.wraps</code> copies the function's name, docstring, and other things, which makes it easier for other people to work with your decorated function, and it lets you access the undecorated function as well. There is no reason <i>not</i> to use it.</span>
<span class="comment-copy">Thanks Aran and Patrick, I will adapt the second example here in my code to use @wraps. :)</span>
<span class="comment-copy">Thanks Anis, I'm gonna take a look. So, use @wraps is prefered for these reasons you pointed out, right?</span>
