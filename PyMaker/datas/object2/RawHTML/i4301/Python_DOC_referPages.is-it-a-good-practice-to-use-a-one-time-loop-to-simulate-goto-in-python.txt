<div class="post-text" itemprop="text">
<p><code>goto</code> is usually considered evil and are discouraged to be used. But sometimes <code>goto</code> gives a clearer and more readable organization of the code, for example: 
 I want to do some step by step computation, where the result of each step determines whether the following steps are needed, and if needed, which branch to go. The logic itself is a bit complicated, so there are couple of nested if statements. Assuming <code>goto</code> was available in python, a neat way to achieve this would be:</p>
<pre><code>do_something 
if ...:
    goto zero
do_something
if case 1:
    do_something
    if ...:
        goto zero
    do_something
elif case 2:
    do_something
    if ...:
        goto zero
    do_something
....
result = compute_result(....)
goto next

zero:
result = 0

next:
do_something
</code></pre>
<p>Without the help of <code>goto</code>, it is possible to get the same behavior by introducing boolean variables to store flags and add additional <code>if</code> tests to turn on or off codes. But this way makes the control flow much less readable. One workaround would be to abuse a one time <code>for</code> loop to simulate the <code>goto</code> version of the above code, like below:</p>
<pre><code>zero = True
for _ in range(1):
    do_something 
    if ...:
        break
    do_something
    if case 1:
        do_something
        if ...:
            break
        do_something
    elif case 2:
        do_something
        if ...:
            break
        do_something
    ....
    zero = False

if zero:
    result = 0
else
    result = compute_result(....)

do_something
</code></pre>
<p>My question is, is this the best approach to write a more readable code?</p>
</div>
<div class="post-text" itemprop="text">
<p>An easy way to break out of a calculation early is to use an exception:</p>
<pre><code>class ExitCalculation(Exception): pass

try:
    do_something
    if time_to_goto_zero:
        raise ExitCalculation()
    do_something
    if ...:
        do_something
        if time_to_go_to_zero:
            raise ExitCalculation()
    result = compute_result()
except ExitCalculation:
    result = 0

do next thing
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Exceptions provide the same type of structured jumps without the implication of repeated execution:</p>
<pre><code>class Foo(Exception):
    pass

try:
    do_something
    if ...:
        raise Foo
    do_something
    if case_1:
        do_something
        if ...:
            raise Foo
        do_something
    elif case_2:
        do_something
        if ...:
            raise Foo
        do_something
except Foo:
    result = 0
else:
    result = compute_result(...)
</code></pre>
<p>Which exception(s) you use are a matter of why your "gotos" break the regular control flow.</p>
</div>
<span class="comment-copy">Use the function Luke: <a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow noreferrer">docs.python.org/3/tutorial/controlflow.html#defining-functions</a></span>
<span class="comment-copy">and <code>if case 1:</code> is invalid syntax anyway...</span>
<span class="comment-copy">@Julien So is <code>...</code>. It's pseudo-code.</span>
<span class="comment-copy">Welcome to StackOverflow.  Please read and follow the posting guidelines in the help documentation, as suggested when you created this account.  <a href="http://stackoverflow.com/help/on-topic">On topic</a> and <a href="http://stackoverflow.com/help/how-to-ask">how to ask</a> apply here. StackOverflow is not a design, coding, research, or tutorial service. I think that, once you work through a Python tutorial, you will learn the proper control constructs such that <i>neither</i> of these outlines will look "good" to you.</span>
<span class="comment-copy">Um, am I the only one that understands what he's asking?!</span>
<span class="comment-copy">I know exception does the same thing, but is using exception to do control flow considered a bad practice? <a href="https://softwareengineering.stackexchange.com/questions/189222/are-exceptions-as-control-flow-considered-a-serious-antipattern-if-so-why" title="are exceptions as control flow considered a serious antipattern if so why">softwareengineering.stackexchange.com/questions/189222/â€¦</a></span>
<span class="comment-copy">I'd say it depends on whether or not using exceptions provide more readable code than heavily nested <code>if</code> statements.</span>
<span class="comment-copy">Exception handling <i>is</i> a form of flow control; you just don't want to use it where there are clearer alternatives. Python itself uses two exception types (<code>StopIteration</code> and <code>SystemExit</code>) for flow control.</span>
<span class="comment-copy">I sort of agree with you. And what do you think for-break vs try-raise-except, which is better? I think they are comparable, and both of them are sort of ugly compared with the goto version.</span>
<span class="comment-copy">Well, I posted an exception-based answer rather than simply agreeing with your for-break proposal in a comment, so... :)</span>
