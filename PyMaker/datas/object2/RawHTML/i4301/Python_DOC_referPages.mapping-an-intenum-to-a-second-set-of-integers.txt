<div class="post-text" itemprop="text">
<p>I have generated an <code>IntEnum</code> with different Datatypes</p>
<pre><code>class DataTypes(IntEnum):
    Bytei = 0  # RAM buffer variable            8    bit    (on-off input)
    Byteo = 1  # RAM buffer variable            8    bit    (on-off output)
    Bytem = 2  # RAM buffer variable            8    bit    (flag)
    Wordi = 3  # RAM system variable           16    bit    (signed int)
    Wordo = 4  # RAM system variable           16    bit    (signed int)
    Wordm = 5  # RAM buffer variable           16    bit    (signed int)
    Wordp = 6  # E2PROM variable (parameter)   16    bit    (signed int)
    Dworm = 7  # RAM buffer variable           32    bit    (signed long int)
    Dworp = 8  # E2PROM variable (parameter)   32    bit    (signed long int)
</code></pre>
<p>The integers of the enums are specified for communication, so I would like to keep this enum as it is or least something similar that has the same associations.</p>
<p>As visible in the comments the datatypes have different sizes I would like to get the size of a datatype in someway. I could write a function to map the the parameters</p>
<pre><code>def map_types(DataType):
    if not 0 &lt;= DataType &lt;=8 :
        size = 0
    elif DataType &lt;3:
        size = 1
    elif DataType &lt;7:
        size = 2
    else:
        size = 4

    return size
</code></pre>
<p>but is there a nice, cleaner and/or more pythonic way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like you want to have an extra <code>size</code> attribute on your <code>DataType</code> Enum (and maybe a <code>__doc__</code> as well).  You can roll your own (if using the stdlib or the <code>enum34</code> backport, or take advantage of <code>aenum</code>'s advanced features<sup>1</sup>.</p>
<p>Rolling your own with <code>enum34</code> (py2/3) or the <code>stdlib enum</code> (3.4+):</p>
<pre><code>from enum import IntEnum

class DataTypes(IntEnum):

    def __new__(cls, value, size, doc):
        obj = int.__new__(cls)
        obj._value_ = value
        return obj

    def __init__(self, value, size, doc):
        # value already handled, ignore it
        self.size = size
        self.__doc__ = doc

    Bytei = 0, 8,  'RAM buffer variable         (on-off input)'
    Byteo = 1, 8,  'RAM buffer variable         (on-off output)'
    Bytem = 2, 8,  'RAM buffer variable         (flag)'
    Wordi = 3, 16, 'RAM system variable         (signed int)'
    Wordo = 4, 16, 'RAM system variable         (signed int)'
    Wordm = 5, 16, 'RAM buffer variable         (signed int)'
    Wordp = 6, 16, 'E2PROM variable (parameter) (signed int)'
    Dworm = 7, 32, 'RAM buffer variable         (signed long int)'
    Dworp = 8, 32, 'E2PROM variable (parameter) (signed long int)'
</code></pre>
<p>Taking advantage of <code>aenum</code>'s features (py2/3):</p>
<pre><code>from aenum import IntEnum

class DataTypes(IntEnum):

    _init_ = 'value size __doc__'

    Bytei = 0, 8,  'RAM buffer variable         (on-off input)'
    Byteo = 1, 8,  'RAM buffer variable         (on-off output)'
    Bytem = 2, 8,  'RAM buffer variable         (flag)'
    Wordi = 3, 16, 'RAM system variable         (signed int)'
    Wordo = 4, 16, 'RAM system variable         (signed int)'
    Wordm = 5, 16, 'RAM buffer variable         (signed int)'
    Wordp = 6, 16, 'E2PROM variable (parameter) (signed int)'
    Dworm = 7, 32, 'RAM buffer variable         (signed long int)'
    Dworp = 8, 32, 'E2PROM variable (parameter) (signed long int)'
</code></pre>
<p>And in use:</p>
<pre><code>--&gt; print repr(DataTypes.Bytei)
&lt;DataTypes.Bytei: 0&gt;

--&gt; print DataTypes.Bytei
DataTypes.Bytei

--&gt; print DataTypes.Bytei.size
8

--&gt; print DataTypes.Bytei.__doc__
RAM buffer variable         (on-off input)
</code></pre>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
</div>
<div class="post-text" itemprop="text">
<p>A slightly cleaner way would be to move the function into the class.</p>
<pre><code>class DataTypes(IntEnum):
    Bytei = 0  # RAM buffer variable            8    bit    (on-off input)
    Byteo = 1  # RAM buffer variable            8    bit    (on-off output)
    Bytem = 2  # RAM buffer variable            8    bit    (flag)
    Wordi = 3  # RAM system variable           16    bit    (signed int)
    Wordo = 4  # RAM system variable           16    bit    (signed int)
    Wordm = 5  # RAM buffer variable           16    bit    (signed int)
    Wordp = 6  # E2PROM variable (parameter)   16    bit    (signed int)
    Dworm = 7  # RAM buffer variable           32    bit    (signed long int)
    Dworp = 8  # E2PROM variable (parameter)   32    bit    (signed long int)

    @property 
    def size(self):  # You could also link it to the name.  If self.name.startswith('Byte') ...
        if self.value &lt; 3:
            return 1
        elif self.value &lt; 7:
            return 2
        else:
            return 4

    def __repr__(self):
        old_repr = super(DataTypes, self).__repr__()
        return old_repr.replace('&gt;', ', size: {}&gt;'.format(self.size))

for thing in DataTypes:
    print(repr(thing), thing.value, thing.size, 2 &lt; thing, thing &lt; 2, sep=' | ')
</code></pre>
<p>outputs:</p>
<pre><code>&lt;DataTypes.Bytei: 0, size: 1&gt; | 0 | 1 | False | True
&lt;DataTypes.Byteo: 1, size: 1&gt; | 1 | 1 | False | True
&lt;DataTypes.Bytem: 2, size: 1&gt; | 2 | 1 | False | False
&lt;DataTypes.Wordi: 3, size: 2&gt; | 3 | 2 | True | False
&lt;DataTypes.Wordo: 4, size: 2&gt; | 4 | 2 | True | False
&lt;DataTypes.Wordm: 5, size: 2&gt; | 5 | 2 | True | False
&lt;DataTypes.Wordp: 6, size: 2&gt; | 6 | 2 | True | False
&lt;DataTypes.Dworm: 7, size: 4&gt; | 7 | 4 | True | False
&lt;DataTypes.Dworp: 8, size: 4&gt; | 8 | 4 | True | False
</code></pre>
<h3>answers to specific questions from comment below</h3>
<p>the <code>@property</code> decorator makes a method look and act like an attribute. without the decorator, in order to get the size you would call <code>DataTypes.Bytei.size()</code>. With the decorator <code>DataTypes.Bytie.size</code> returns the same thing. So <code>@property</code> is unnecessary here, but I thought that since the that acted like a property of the object and not a method, it would be nice to make it work like on. </p>
<p><code>super</code> calls the method of the parent class.  so, <code>super(DataTypes, self).__repr__()</code> means get the <code>repr</code> using <code>self</code> and use the <code>repr</code> function from the parent class (this returns a string).  then, since it's a <code>str</code>, that is, indeed, <code>str.replace</code>. </p>
</div>
<span class="comment-copy">You could define <code>map_types</code> as a property inside the <code>DataTypes</code> class.</span>
<span class="comment-copy">The <code>aenum</code> looks really nice and clean. So is <code>value</code> the keyword for integer evaluation or how does this declaration know that <code>DataTypes.Bytei == 0</code> is <code>true</code>?</span>
<span class="comment-copy"><code>value</code> is whatever will end up being the <code>.value</code> attribute.  <code>Bytei</code> is comparable with <code>int</code> because <code>DataTypes</code> is based on <code>IntEnum</code>.</span>
<span class="comment-copy">For me as a python(and kinda OOP) newbie your solution is hard to understand with all those keywords. I get the general concept but what are <code>@property</code> and <code>super()</code> doing? is <code>replace</code> derived from <code>string.replace</code>?  If you could add this to the answer, it would greatly improve it.</span>
