<div class="post-text" itemprop="text">
<p>So I am trying to learn how to properly set Class attributes of a Python class, and wondering about using class functions to do so.</p>
<p>My beginners way has taught me to do:</p>
<pre><code>class MyClass:
    """MyClass class instance"""
    def __init__(self, project, version, command):
        self.project = project
        self.__version = version
        self.__command = command


    """Get version used"""
    def getVersion(self):
        return self.__version

    """Get command executed"""
    def getCommand(self):
        return self.__command

    """Set version used"""
    def setVersion(self, version):
        self.__version = version
</code></pre>
<p>This is fine and simple, but this means that I already know the values of my attributes when I instantiate MyClass, since I am passing them to create my object, or if I don't pass them I would use my beginners way of <code>setVersion(version)</code> after creating MyClass object. In my search I read <a href="https://www.smallsurething.com/private-methods-and-attributes-in-python/" rel="noreferrer">this</a>, which lead me to read about <a href="https://docs.python.org/3/library/functions.html#property" rel="noreferrer">properties</a>, and made me realize that I should not use getter/setters in Python but rather utilize properties. Is this correct? </p>
<p>However, I am wondering if it's Pythonic (or just even correct) to set some of the MyClass instance attributes (project, version, command) using a function. I want to do this because I want this class to do the work of finding these values from specific files by only passing 1 argument. This came to mind, but thought it might be wrong:</p>
<pre><code>class MyClass:
    """MyClass class instance"""
    def __init__(self, project):
        self.project = project
        self._version = self.version()
        self._command = self.command()

    """Get version used"""
    def version(self):
        ...
        use `project` attribute here to get `version` from file...
        ...
        return version

    """Get command executed"""
    def command(self):
        ...
        use `project` attribute here to get `command` from file...
        ...
        return command
</code></pre>
<p>Is it even a logical way of setting instance variables by calling a class function?</p>
<p>Should I utilize <strong>properties</strong> in some ways instead?</p>
<p>Should I make a function outside the MyClass that finds these values returns a MyClass instance instead?</p>
<p>Is there a more proper Pythonic way?</p>
<p>I basically want to create an object with all the extra information (version, command, etc..) by just instantiating it with 1 passed attribute.</p>
<p>Thank you in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>There are many ways to solve this, but this is how I usually do it:</p>
<pre><code>class MyClass:
    """MyClass class instance"""
    def __init__(self, project, version, command):
        self.project = project
        self.version = version
        self.command = command

    @classmethod
    def from_file(cls, project):
        """ 
        Alternate constructor that takes a project 
        and extracts the other attributes from a file
        """
        #... some code to use `project` 
        #... and get `version` and `command` from file
        return cls(project, version, command)

# usage
m = MyClass.from_file('project01')
</code></pre>
<p><code>classmethod</code> is a decorator that makes a method able to be called directly in the class, instead of the instance. 
The method then will automatically get the class as first parameter. 
<code>cls</code> is just a name that means class, like we use <code>self</code> for instances but we could use any name really. 
The main object constructor in <code>__init__</code> takes full parameters, but the the new <code>from_file</code> class method works as an alternative constructor, 
by creating an instance of the class and returning it.</p>
<p>Note that this is not a definite answer, but just a suggestion of a pythonic way to solve it.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>By using keyword variables in <code>__init__</code>, you get flexibility of passing only one variable while instantiation.</li>
<li>using decorators such as, <code>@property</code> and @bar.setter enable you to access and modify the associated attributes. And I believe it is also a quite Pythonic way to do so.</li>
</ol>
<p>The following would be my approach.</p>
<pre><code>class MyClass:
    def __init__(self, project, version=None, command=None):
        self.project = project
        self.__version = version
        self.__command = command

    @property
    def version(self):
        return self.__version

    @version.setter
    def version(self, val):
        self.__version = val

    @property
    def command(self):
        return self.__command

    @command.setter
    def command(self, val):
        self.__command = val
</code></pre>
</div>
<span class="comment-copy">Direct attribute access is preferred to trivial getters and setters that do nothing more than wrap the access.</span>
<span class="comment-copy"><i>I should not use getter/setters in Python but rather utilize properties. Is this correct?</i> Yes, there is nearly never a reason to use getter/setter instead of properties.</span>
<span class="comment-copy">Complete aside, the string you're using to describe what a function does should be contained within the function rather than above a method definition. See the <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">PEP On doctrings</a></span>
<span class="comment-copy">The nice thing about properties is that if you expose an attribute directly, and people write code like <code>c = MyClass(); c.version = 3</code>, then that will continue to work (syntactically, anyway) if you change <code>version</code> to a property.</span>
<span class="comment-copy">Thank you for the comments! Ok, I will start learning how to use properties properly then. Just starting to learn Python and I always feel when learning a new language that some basics change to more advance constructs, so property was a nice find.</span>
<span class="comment-copy">What is @classmethod, does it have a special significance? Notably, is <code>cls</code> a standard convention or does it mean "class". I'm assuming this is returning the <code>version</code> and <code>command</code> values found/set in the function back to the class...then creating the instance of MyClass? Which in-turn makes my <code>m</code> object?</span>
<span class="comment-copy">@bretonics your assumptions are mostly correct. I have edited the answer and added some explanantions that might address your doubts.</span>
