<div class="post-text" itemprop="text">
<p>I am using SQLALchemy to execute queries on Teradata. One of the queries I execute is a DDL statement to replace a stored procedure:</p>
<pre><code>REPLACE PROCEDURE DEV_MIGRATION_TOOL.UNIT_TEST_NEW_STORED_PROCEDURE()
UNIT_TEST_NEW_STORED_PROCEDURE:
BEGIN
    DECLARE V_VAR VARCHAR(50);
    SELECT 'Hello World!'
    INTO :V_VAR;
END;
</code></pre>
<p>This SQL statement is assigned to a variable <code>query</code> and is executed by SQLALchemy with the session execute method:</p>
<pre><code>def execute_sql_statement(self, query):
    """Generic method to execute a SQL statement on target environment."""
    self.target_environment.db_session.execute(query)
    self.target_environment.db_session.commit()
</code></pre>
<p>The problem I have it that SQLAlchemy assumes the <code>:V_VAR</code> variable is a parameter which should be supplied with a dictionary. See documentation here: <a href="http://docs.sqlalchemy.org/en/latest/orm/session_api.html#sqlalchemy.orm.session.Session.execute" rel="nofollow noreferrer">http://docs.sqlalchemy.org/en/latest/orm/session_api.html#sqlalchemy.orm.session.Session.execute</a></p>
<pre><code>result = session.execute("SELECT * FROM user WHERE id=:param", {"param":5})
</code></pre>
<p>In the current configuration, it triggers the error message:</p>
<blockquote>
<p>2018-04-18 19:09:27,874 - migration_script - INFO - Execute object DDL
  statement on UAT environment. 2018-04-18 19:09:27,875 -
  migration_script - ERROR - (sqlalchemy.exc.InvalidRequestError) <strong>A
  value is required for bind parameter 'V_VAR'</strong> [SQL:
  "()\rUNIT_TEST_NEW_STORED_PROCEDURE:\rBEGIN\r    DECLARE V_VAR
  VARCHAR(50);\r    SELECT 'Hello World!'\r    INTO ?;\rEND;"]
  [parameters: [{}]]</p>
</blockquote>
<p>Would you know a way to avoid this error message so that my DDL statement above is executed without error?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.sqlalchemy.org/en/latest/orm/session_api.html#sqlalchemy.orm.session.Session.execute" rel="nofollow noreferrer"><code>Session.execute()</code></a> interprets plain SQL strings as if passed in a <a href="http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.expression.text" rel="nofollow noreferrer"><code>text()</code></a> construct. Due to that you have to escape any colons that you do not want interpreted as beginning a placeholder:</p>
<blockquote>
<p>For SQL statements where a colon is required verbatim, as within an inline string, use a backslash to escape</p>
</blockquote>
<p>See: <a href="http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.expression.text" rel="nofollow noreferrer">http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.expression.text</a></p>
<p>So your DDL statement <code>query</code> should be:</p>
<pre><code>"""
REPLACE PROCEDURE DEV_MIGRATION_TOOL.UNIT_TEST_NEW_STORED_PROCEDURE()
UNIT_TEST_NEW_STORED_PROCEDURE:
BEGIN
    DECLARE V_VAR VARCHAR(50);
    SELECT 'Hello World!'
    INTO \:V_VAR;
END;
"""
</code></pre>
</div>
<span class="comment-copy">About the proposed edit, I specifically used properly escaped backslash since it is a plain string and I don't like relying on the fact that <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">unrecognized escape sequences are left in the string</a> as is. If one wants to avoid escaping the backslash, raw strings are an option.</span>
