<div class="post-text" itemprop="text">
<p>Suppose I have a python class with a large overhead</p>
<pre><code>class some_class:
    def __init__(self):
        self.overhead = large_overhead

    # Get new data
    def read_new_data(self, data):
        self.new_data = data

    def do_something(self):
        # DO SOMETHING.
</code></pre>
<p>Suppose I want to have it listen to output of another program, or multiple programs, and I have a way to maintain this steady stream of inputs. How do I not initiate a new instance every time given the overhead? Do I create a new script and package the class to maintain its 'live'? And if so, how do I capture the output of the programs if they cannot be in direct communication with the script I'm running without going through a middle storage like SQL or file?</p>
</div>
<div class="post-text" itemprop="text">
<p>Lacking specifics...  Use <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer">asyncio</a> to setup listeners/watchers and register your object's methods as callbacks for when the data comes in - run the whole thing in an event loop.</p>
<hr/>
<p>While that was easy to <em>say</em> and pretty abstract, I'm sure I would have a pretty steep learning curve to implement that, especially considering I'd want to implement some testing infrastructure.  But it seems pretty straightforward.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a class variable:</p>
<pre><code>class some_class:
    overhead = large_overhead

    # Get new data
    def read_new_data(self, data):
        self.new_data = data

    def do_something(self):
        # DO SOMETHING.
</code></pre>
<p>now overhead is only evaluated once when the class is defined, and you can use <code>self.overhead</code> within any class instances.</p>
</div>
<span class="comment-copy">Other <b>Python</b> programs?</span>
<span class="comment-copy">@wwii not necessarily. It could be outputs in bit stream or text. What I'm trying to understand is a good way to approach the general question - either to maintain a class with large overhead or somehow distribute this overhead so as to not waste CPU resources.</span>
<span class="comment-copy"><code>...not initiate a new instance every time...   </code>, what do you mean by <i>every time</i>??</span>
<span class="comment-copy">@wwii It means when data are coming in to be processed, I don't want to initiate the processing class as a new instance - rather have it 'wait' like apache does for ports.</span>
<span class="comment-copy">Thanks! This is what I'm looking for outside of my current area of knowledge.</span>
<span class="comment-copy">@RockyLi - There are lots of worthwhile videos at [pyvideo.org](pyvideo.org)</span>
<span class="comment-copy">In this case if the script ends and class purged from memory would that overhead be necessarily loaded again when the class is called? I get that if multiple instances are running at the same time they would share the same overhead.</span>
