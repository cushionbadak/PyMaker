<div class="post-text" itemprop="text">
<p>My aim is to get a more elegant unpacking of a sub-tuple or sub-list for longer tuples or longer lists.</p>
<p>For example, I have an array with sub-arrays</p>
<pre><code>s = [['yellow', 1,5,6], ['blue', 2,8,3], ['yellow', 3,4,7], ['blue',4,9,1], ['red', 1,8,2,11]]
</code></pre>
<p>Experimenting with an array and sub-tuple or sub-list with 2 elements,I have the following:</p>
<pre><code>s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
</code></pre>
<p>OR</p>
<pre><code>s = [['yellow', 1], ['blue', 2], ['yellow', 3], ['blue', 4], ['red', 1]]
</code></pre>
<p>I can unpack 's' whether it has tuples or lists:</p>
<pre><code>for k, v in s:
     print('k = {0}, v = {1}'.format(k,v))
</code></pre>
<p>Produces the result</p>
<pre><code>k = yellow, v = 1
k = blue, v = 2
k = yellow, v = 3
k = blue, v = 4
k = red, v = 1
</code></pre>
<p>Suppose I have the following array with sub-arrays of four elements each:</p>
<pre><code>bongo =   
[[1, 2, 3, 4], [6, 3, 2, 3], [5, 7, 11, 15], [2, 4, 7, 8]]
</code></pre>
<p>I can unpack 'bongo' using the variables a,b,c,d</p>
<pre><code>for a,b,c,d in bongo:
    print('a = {0}, b = {1}, c={2}, d={3}'.format(a,b,c,d))

a = 1, b = 2, c=3, d=4
a = 6, b = 3, c=2, d=3
a = 5, b = 7, c=11, d=15
a = 2, b = 4, c=7, d=8
</code></pre>
<p>Despite being able to unpack the mixed chr/number sub-array I seem to have a problem unpacking a mixed 'chr' and number sub-list (or sub-tuple (not shown, but get the same result)):</p>
<pre><code>s = [['yellow', 1,5,6], ['blue', 2,8,3], ['yellow', 3,4,7], ['blue',     
      4,9,1], ['red', 1,8,2,11]]
</code></pre>
<p>That is, doing an unpacking I get the desired result with an error:</p>
<pre><code>for a,b,c,d in s:
    print('a = {0}, b = {1}, c = {2}, d = {3} '.format(a,b,c,d))

a = yellow, b = 1, c = 5, d = 6 
a = blue, b = 2, c = 8, d = 3 
a = yellow, b = 3, c = 4, d = 7 
a = blue, b = 4, c = 9, d = 1 
Traceback (most recent call last):
  File "&lt;pyshell#288&gt;", line 1, in &lt;module&gt;
    for a,b,c,d in s:
ValueError: too many values to unpack (expected 4)
</code></pre>
<p>My question:  Is there a more elegant way of unpacking, such that I would like to get the first element, say as a key, and the rest?</p>
<p>To illustrate with <strong>pseudo-code</strong> - it does not work directly in python:</p>
<pre><code>for k[0][0], v[0][1:4] in s:
     print('k[0][0] = {0},  v[0][1:4] = {1}'.format(k[0][0],v[0][1:4]))
</code></pre>
<p>Such as to get the following output:</p>
<pre><code>a = yellow, b = 1, c = 5, d = 6 
a = blue, b = 2, c = 8, d = 3 
a = yellow, b = 3, c = 4, d = 7 
a = blue, b = 4, c = 9, d = 1 
</code></pre>
<p>Inspiration: 
Experimenting with the defaultdict at para 3.4.1 <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">https://docs.python.org/3/library/collections.html#collections.defaultdict</a> particularly the unpacking of an array with a sub-tuple.</p>
<p>Thank you,
Anthony of Sydney</p>
</div>
<div class="post-text" itemprop="text">
<p>You can covert to your desired format first:</p>
<pre><code>&gt;&gt;&gt; ss = {x[0]: x[1:] for x in s}
&gt;&gt;&gt; ss
{'blue': [4, 9, 1], 'red': [1, 8, 2, 11], 'yellow': [3, 4, 7]}
&gt;&gt;&gt; for s, v in ss.items():
...     print "a = {0} b = {1} c = {2} d = {3}".format(s, *v)
...
a = blue b = 4 c = 9 d = 1
a = red b = 1 c = 8 d = 2
a = yellow b = 3 c = 4 d = 7
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Further to the Mr Azim's answer, in the 5th line he used *v. This inspired me to apply this for further experimentation to an array/tuple/list instead of the dictionary. </p>
<p>This code produces the same result:</p>
<pre><code>s = [('yellow', 1, 5, 6), ('blue', 2, 8, 3), ('green', 4, 9, 1), ('red', 1, 8, 2)]

for x, *y in s:
    temparray = [b for b in y]; Note we don't use *y
    print('x = {0}, temparray = {1}'.format(x, temparray))
</code></pre>
<p>as</p>
<pre><code>for x, *y in s:
    print('x = {0}, y = {1}'.format(x,y)); note we don't use *y

   x = yellow, y = [1, 5, 6]
   x = blue, y = [2, 8, 3]
   x = green, y = [4, 9, 1]
   x = red, y = [1, 8, 2]

type(y)
   &lt;class 'list'&gt;  
</code></pre>
<p>Conclusion: the * operator can be applied not only in dictionaries, but also in arrays/tuples/lists. When applied in a 'for' loop, as in</p>
<pre><code>for var1 *var2 in aListorTupleorArray:
     # var1 gets the first element of the list or tuple or array
     # *var2 gets the remaining elements of the list or tuple or array
     print('var1 = {0}, var2 = {1}'.format(var1,var2);#Note we don't use the * in *var2. just use var2
</code></pre>
<p>Thanks,
Anthony of exciting Sydney</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a subtle difference between printing *v and v.</p>
<pre><code>#printing v in the loop
for s,v in ss.items():
      print("s = {0}, v = {1}".format(s,v)); #printing s &amp; v 

s =  yellow, v = [3,4,7]
s =  blue,  v = [4,9,1]
s =  red,  v = [1,8,2]
</code></pre>
<p>Then we have </p>
<pre><code>#printing *v in the loop
for s,v in ss.items():
      print("s = {0}, *v = {1}".format(s,*v)); #printing s &amp; *v 

s =  yellow, v = 3 4 7
s =  blue,  v = 4 9 1
s =  red,  v = 1 8 2
</code></pre>
<p>Note the subtlety here: whether we use *v in the 'for' loop, print v or *v produces the same result:</p>
<pre><code>#printing v in the loop
for s,*v in ss.items():
      print("s = {0}, v = {1}".format(s,v)); #printing s &amp; v 

#printing v in the loop
for s,*v in ss.items():
      print("s = {0}, v = {1}".format(s,*v)); #printing s &amp; v 
</code></pre>
<p>Produces the same result:    </p>
<pre><code>s =  yellow, v = [[3,4,7]]
s =  blue,  v = [[4,9,1]]
s =  red,  v = [[1,8,2]]
</code></pre>
<p>Thank you,
Anthony of Sydney</p>
</div>
<span class="comment-copy">It works beautifully, many thanks. The limitation is that you cannot have a repeated key, like two 'red' . Also the list/array/tuple associated with the key must be the same length as each other list/array/tuple in the dictionary. Nevertheless, it is exactly what I wanted. Regards, Anthony of Sydney</span>
<span class="comment-copy">Yes indeed. I didn't realise that key wasn't unique. I like your solution below.</span>
<span class="comment-copy">For your knowledge I got the idea about <code>*v</code> from <code>*args</code> and <code>**kwargs</code> used to unpack positional and key-value function arguments.</span>
