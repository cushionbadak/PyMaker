<div class="post-text" itemprop="text">
<p>I have an array of hex values in python, and I want to convert it into an array of those values broken up into individual bytes, stored as strings.</p>
<p>For example:</p>
<p>Given the input</p>
<pre><code>hexValueAr = [0x085F80, 0x0109A53, 0x0188C6D]
</code></pre>
<p>I would like the output</p>
<pre><code>bytesAr = ['08', '5F', '80', ...]
</code></pre>
<p>I was wondering if there is a built-in python function to do this conversion, or some other simple way to do it?</p>
<p>EDIT: My input values are integers stored as hex values in an array. My input array has 48 of these integers, I just shortened it to make it easier to read. Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>The fact that your ints are encoded in hex is irrelevant to the question.</p>
<pre><code>hexValueAr = [0x085F80, 0x0109A53, 0x0188C6D]
</code></pre>
<p>and</p>
<pre><code>hexValueAr = [548736, 1088083, 1608813]
</code></pre>
<p>result in the same list.</p>
<p>Python integers have a method to convert to bytes already: <a href="https://docs.python.org/3/library/stdtypes.html#int.to_bytes" rel="nofollow noreferrer"><code>int.to_bytes</code></a>. Converting to a string afterwards is pretty easy (just use <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format</code></a> or <a href="https://docs.python.org/3/library/functions.html#hex" rel="nofollow noreferrer"><code>hex</code></a>). The only catch is that you need to know the number of bytes to use up-front. In your case, you can either use the number 3, or you can use the method <a href="https://docs.python.org/3/library/stdtypes.html#int.bit_length" rel="nofollow noreferrer"><code>int.bit_length</code></a> to calculate it.</p>
<p>Here is one possible implementation of the above:</p>
<pre><code>from math import ceil

bytesAr = []
for num in hexValueAr:
    count = ceil(num.bit_length() / 8)
    bytes = num.to_bytes(count, 'big')
    bytesAr.extend('{:02X}'.format(x) for x in bytes)
</code></pre>
<p>This produces the result</p>
<pre><code>['08', '5F', '80', '10', '9A', '53', '18', '8C', '6D']
</code></pre>
<p>The order here is big-endian: the highest byte of the integer is in the lowest index of the array.</p>
<p>If you want to do it as a one-liner, you can do:</p>
<pre><code>bytesAr = ['{:02X}'.format(x) for num in hexValueAr for x in num.to_bytes(ceil(num.bit_length() / 8), 'big')]
</code></pre>
<p>One possible caveat here is that different numbers in the input may give you different numbers of elements in the output. For example, if your input is <code>[0x00AB, 0x109C]</code>, the first element will result in one string, while the second will result in 2. If you want to avoid this, find the maximum number of bytes required to encode one of your integers, and use that instead of <code>ceil(num.bit_length() / 8)</code>:</p>
<pre><code>byte_count = ceil(max(hexValueAr).bit_length() /  8))
bytesAr = ['{:02X}'.format(x) for num in hexValueAr for x in num.to_bytes(byte_count, 'big')]
</code></pre>
<p>In this case, an input like <code>[0x00AB, 0x109C]</code> will result in a bunch of zeros, but equal number of bytes per number: <code>['00', ''AB', '10', '9C']</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def int_to_hexbytes(i):
    s = '%X' % i
    if len(s) % 2:
        s = '0' + s
    return [s[i:i+2] for i in range(0, len(s), 2)]

def words_to_hexbytes(a):
    ret = []
    for i in a:
        ret += int_to_hexbytes(i)
    return ret

assert int_to_hexbytes(0x0123456789ABCDEF) == ['01', '23', '45', '67', '89', 'AB', 'CD', 'EF']
assert int_to_hexbytes(0x123456789ABCDEF0) == ['12', '34', '56', '78', '9A', 'BC', 'DE', 'F0']

assert words_to_hexbytes([0x123, 0x456, 0x78]) == ['01', '23', '04', '56', '78']
assert words_to_hexbytes([0x085F80, 0x0109A53, 0x0188C6D]) == ['08', '5F', '80', '10', '9A', '53', '18', '8C', '6D']
</code></pre>
<p><code>int_to_hexbytes</code> uses the <code>%</code> formatting operator to convert the integer parameter into a string containing its representation in hexadecimal; and then uses a list comprehension to split that string into a list every second character (i.e. into each byte). Note that since the leftmost byte might be lower than <code>0x10</code>, the code prepends a <code>'0'</code> beforehand (i.e. when the string is of odd length).</p>
<p><code>words_to_hexbytes</code> simply iterates through the array parameter and appends the result of <code>int_to_hexbytes</code>.</p>
<p>The <code>assert</code>s afterwards are just a quick way to test the code and, at the same time, show the reader the expected results.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>hexValueAr=['0x085F80','0x0109A53','0x0188C6D']

stripped = list(map(lambda x: x.split('x')[1], hexValueAr))
byte_list = []

for hex_string in stripped:
     for i in range(3):
         byte_list += [hex_string[2*i:2*i+2]]

print(byte_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>hexValueAr=[0x085F80,0x0109A53,0x0188C6D]
bytes = []
for i in hexValueAr:
    x = "%6.6x" % i
    bytes += [x[0:2], x[2:4], x[4:6]] 
</code></pre>
</div>
<span class="comment-copy">what are your input and output types? There is <code>bytearray.fromhex()</code> which takes a hex value as a <i>string</i> and outputs an array of bytes.</span>
<span class="comment-copy">You'll also need to specify the endianness.</span>
<span class="comment-copy">What are "hex values"? Are they integers (in which case hex is irrelevant), or strings, in which case your sample input is wrong?</span>
<span class="comment-copy">Please see my new edit</span>
<span class="comment-copy">Have you made any attempt to solve this on your own?</span>
<span class="comment-copy">Yup and thanks this worked perfectly!</span>
<span class="comment-copy">Thanks this worked perfectly!</span>
<span class="comment-copy">I would upvote but I don't have the points right now</span>
<span class="comment-copy">@Ken. You'll get a couple of points for selecting an answer.</span>
<span class="comment-copy">Can you please explain your code...relatively new to python</span>
<span class="comment-copy">@Ken: I suggest you try the code line by line -- you will easily see what each statement does. If you don't understand something, follow <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">Python's tutorial</a>.</span>
<span class="comment-copy">@Acorn. The purpose of answering a question is to provide a resource for all users, including, but not limited to, OP. Providing a code dump and saying "read the tutorial" is not very helpful as these things go. It would be very nice if you could add a couple of sentences of prose to your answer, even if it's just in the form of code comments.</span>
<span class="comment-copy">@MadPhysicist: I disagree. For answers like this that are very small and straightforward, explaining it line-by-line properly would imply writing a mini-tutorial on the language itself. Since the Python official tutorial does a very good job at it (objectively better than anyone here could in a SO answer), I prefer to refer the user to it.</span>
<span class="comment-copy">Thanks. Vote flipped. Flag removed. Quality stuff.</span>
<span class="comment-copy">Even if the input <i>was</i> a list of strings, this would be a bad way to do it.</span>
<span class="comment-copy">This is a ridiculously convoluted way of doing it, and the <code>range</code> should be up to 4.</span>
<span class="comment-copy">This does not work for arbitrary inputs.</span>
