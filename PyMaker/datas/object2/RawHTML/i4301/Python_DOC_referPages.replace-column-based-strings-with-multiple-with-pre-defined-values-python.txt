<div class="post-text" itemprop="text">
<p>I am bit confused with approach to implement the below logic in python. I would need expert advice in choosing a method.</p>
<p>I have to replace strings with predefined values in certain columns.
For e.g.</p>
<p>| is delimiter</p>
<p>Input :</p>
<pre><code>ABCD|NewYork|800|TU
XYA|England|589|IA
</code></pre>
<p>Output :</p>
<pre><code>QWER|NewYork|800|PL
NHQ|England|589|DQ
</code></pre>
<p>Predefined dictionary :</p>
<pre><code>Actual Value  : ABCDEFGHIJKLMNOPQRSTUVWXYZ
Replace Value : QWERTYASDFGHNBVCXZOPLKMNHY
</code></pre>
<p>So, If value is ABCD, I should get QWER. If it is TU then it should replace it with PL. The values can be random.</p>
<p>My approach would be like below </p>
<ol>
<li>Read a line and then go to column 1</li>
<li>read each character and replace one by one by using replace values</li>
<li>Go to column 4 and then read each character and replace one by one</li>
<li>go to next line and so on....</li>
</ol>
<p>I feel this might be poor way of coding. Is there any different way than above approach? Please suggest a method.</p>
<p><strong>Column's may be different for different files. It should be dynmaic</strong> </p>
</div>
<div class="post-text" itemprop="text">
<p>You can make use of <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer"><code>str.maketrans</code></a> to make your life a lot easier here:</p>
<pre><code>In [1]: fnd = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
   ...: rpl = 'QWERTYASDFGHNBVCXZOPLKMNHY'
   ...: trns = str.maketrans(fnd, rpl)

In [2]: 'ABCD'.translate(trns)
Out[2]: 'QWER'

In [4]: 'UV'.translate(trns)
Out[4]: 'LK'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is one way using a list comprehensions with <code>str.join</code>.</p>
<p>The trick is to convert your dictionary to a Python <code>dict</code>.</p>
<pre><code>x = ['ABCD|NewYork|800|TU',
     'XYA|England|589|IA']

d = dict(zip('ABCDEFGHIJKLMNOPQRSTUVWXYZ',
             'QWERTYASDFGHNBVCXZOPLKMNHY'))

res = ['|'.join([''.join(list(map(d.get, i[0])))]+i[1:]) \
       for i in map(lambda y: y.split('|'), x)]
</code></pre>
<p>Result:</p>
<pre><code>['QWER|NewYork|800|TU',
 'NHQ|England|589|IA']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should do it:</p>
<pre><code>from string import maketrans

actual = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

replace = 'QWERTYASDFGHNBVCXZOPLKMNHY'

with open('infile.txt') as inf, open('outfile.txt', 'w') as outf:
    toBeWritten = []
    for line in inf:
        items = line.strip().split('|')
        items[0] = items[0].translate(maketrans( actual, replace))
        items[3] = items[3].translate(maketrans( actual, replace))
        print items
        toBeWritten.append('|'.join(items))
    outf.writelines(toBeWritten)
</code></pre>
</div>
<span class="comment-copy">Your approach sounds fine, why don't you implement it and find out!</span>
<span class="comment-copy">well you can slightly speed up the look up time, if you create a dictionary which maps your actual values with replace values <code>{"A": "Q", "B": "W", ...}</code>, otherwise I dont see anything else that can be made faster</span>
<span class="comment-copy">Thats a good way to code IMO. Only thing will be need to checking the performance. Why dont you code that and post here for comparision?</span>
<span class="comment-copy">Building on what @N.Ivanov suggested: <code>dict(zip('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'QWERTYASDFGHNBVCXZOPLKMNHY'))</code>. I'd also use the <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer">str.translate</a> method</span>
<span class="comment-copy">Thanks, How can I do it for dynamic columns? Say next file has column 2 and 3 Please let me know.</span>
<span class="comment-copy">Just change the indices of items (0 and 3) into new ones.</span>
<span class="comment-copy">Thanks. Will try dynamic approach and post it.</span>
