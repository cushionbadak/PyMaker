<div class="post-text" itemprop="text">
<p>I have been searching for a long time to find a solution to my problem.</p>
<p>I get the data from the column I want using the below code</p>
<pre><code>import pandas as pd
df = pd.read_excel("Live_data_test.xlsx","Sheet1")

number_of_entries = len(df.loc[:, 'Time'])
number_of_entries_last_3 = number_of_entries - 3
unix_x1 = df.loc[number_of_entries_last_:number_of_entries, 'Time']
print(unix_x1)
</code></pre>
<p>I get the output</p>
<pre><code>10    1.513753e+09
11    1.513753e+09
12    1.513753e+09
Name: Time, dtype: float64
</code></pre>
<p>I want to convert this time into readable time so I can input it into the x axis of a matplotlib graph.</p>
<pre><code>real_x1 = datetime.datetime.strptime(str(unix_x1), '%Y-%m-%d %H:%M:%S')
</code></pre>
<p>I get the error</p>
<pre><code>ValueError: time data '10    1.513753e+09\n11    1.513753e+09\n12    1.513753e+09\nName: Time, dtype: float64' does not match format '%Y-%m-%d %H:%M:%S'
</code></pre>
<p>how do I get this unix time to output into a readable format for a user?</p>
<p>I am a little new to code so if you answer, could you please explain the reasoning if you can?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem has to do with converting the values that you've read (looks like seconds after Unix epoch, i.e. January 1, 1970) into <a href="https://docs.python.org/3/library/datetime.html#datetime-objects" rel="nofollow noreferrer"><code>datetime</code></a> objects. The error you are getting is because your times are just a floating-point number, but that is not how you are trying to handle them.</p>
<p>Assuming these are seconds after Unix epoch, you need to create your datetimes using a <a href="https://docs.python.org/3/library/datetime.html#timedelta-objects" rel="nofollow noreferrer"><code>timedelta</code></a> from a start point defined as the Unix epoch:</p>
<pre><code>from datetime import datetime, timedelta
start = datetime(1970, 1, 1)  # Unix epoch start time
df['datetime'] = df.Time.apply(lambda x: start + timedelta(seconds=x))
</code></pre>
<p>The last line creates a new column in your dataframe called <code>'datetime'</code> and populates it by reading the <code>'Time'</code> column in as <code>x</code>, and calculating the time <code>x</code> seconds after Unix epoch.</p>
<p>Note: if you want to convert these <code>datetime</code> objects into the time string that you specified, we can do this by creating a new column with <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer"><code>strftime()</code></a>:</p>
<pre><code>df['string_time'] = df.datetime.apply(lambda x: x.strftime('%Y-%m-%d %H:%M:%S'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Pandas can read unix epoch time, use unit parameter</p>
<pre><code>pd.to_datetime('1.513753e+09', unit = 's')

Timestamp('2017-12-20 06:56:40')
</code></pre>
<p>You can pass your column using </p>
<pre><code>pd.to_datetime(df[&lt;your_datetime_column&gt;], unit = 's')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you could try 
<code>df['Time'] = pd.to_datetime(df['Time'], format='%Y%m%d.0')</code></p>
</div>
<span class="comment-copy">Mind enhancing your answer, adding the reasons why to do that, and perhaps some documentation for a better quality answer</span>
