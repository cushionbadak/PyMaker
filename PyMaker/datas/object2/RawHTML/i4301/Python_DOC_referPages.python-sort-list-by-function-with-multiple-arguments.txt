<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/803616/passing-functions-with-arguments-to-another-function-in-python">Passing functions with arguments to another function in Python?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I would like to sort a list using a function that returns a float value. If the function had a single argument, I would simply use </p>
<pre><code>sorted(mylist, key=myfunction)
</code></pre>
<p>and be on my merry way. However, this doesn't work for functions with multiple arguments. How can this be done?</p>
<p>Edit:</p>
<p>People asking for more details, so here we go:</p>
<p>This is a small part of a chess engine. The 'Bestmove' function takes in the board position (a list), the depth (an integer), and alpha/beta values and returns a list with two entries: the board evaluation (a float), and the suggested move (a list). </p>
<p>In an effort to optimize the alpha/beta pruning process, I would like to change the order in which moves are evaluated (strong moves evaluated first leads to greater efficiency). To achieve this, I would like to sort the list of moves by the first value in the list returned by the 'Bestmove' function.    </p>
</div>
<div class="post-text" itemprop="text">
<p>There are several ways you can do this. Assume we have a list <code>lst</code>.</p>
<p><strong>Set default values</strong></p>
<p>This works only if you can set in advance the default values for your unused parameters.</p>
<pre><code>def func(x, y=1, z=2):
    return x + y + z

res = sorted(lst, key=func)
</code></pre>
<p><strong>Use partial functions</strong></p>
<p>You can use <code>functools.partial</code> to create a function with certain parameters fixed.</p>
<pre><code>from functools import partial

def func(x, y, z):
    return x + y + z

res = sorted(lst, key=partial(func, y=1, z=2))
</code></pre>
<p><strong>Pass through lambda</strong></p>
<p>If your additional parameters are dependent on the list item itself, you can pass through an anonymous <code>lambda</code> and include your logic.</p>
<pre><code>def func(x, y, z):
    return x + y + z

res = sorted(lst, key=lambda x: func(x, x+1, x+2))
</code></pre>
</div>
<span class="comment-copy">What do you anticipate the multiple arguments passed to this function actually being in this case?</span>
<span class="comment-copy">According to <a href="https://docs.python.org/3/howto/sorting.html#operator-module-functions" rel="nofollow noreferrer">docs.python.org/3/howto/sorting.html#operator-module-functions</a> if you use the itemgetter and attrgetter functions you can accomplish sorts of lists of tuples. What is your list composed of and what does your function sort on?</span>
<span class="comment-copy"><code>sorted(mylist, key=lambda x: myfunction(x, 42, 'foo'))</code>.</span>
