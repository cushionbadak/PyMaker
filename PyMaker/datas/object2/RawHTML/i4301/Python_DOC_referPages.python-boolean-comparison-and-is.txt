<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6074018/why-does-the-expression-0-0-0-return-false-in-python">Why does the expression 0 &lt; 0 == 0 return False in Python?</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/48944267/why-1-in-range2-true-evaluates-to-false">Why 1 in range(2) == True evaluates to False? [duplicate]</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>Python 3.6.2 console:</p>
<pre><code>&gt;&gt;&gt; 11 &gt; 0 is True
False
</code></pre>
<p>but </p>
<pre><code>&gt;&gt;&gt; 0 is True
False
&gt;&gt;&gt; 11 &gt; False
True
</code></pre>
<p>So, why <code>11 &gt; 0 is True</code> is <code>False</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an example of <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">comparison chaining</a> since both <code>&gt;</code> and <code>is</code> are comparison operators. </p>
<blockquote>
<p>Comparisons can be chained arbitrarily, e.g., <code>x &lt; y &lt;= z</code> is equivalent
  to <code>x &lt; y and y &lt;= z</code>, except that <code>y</code> is evaluated only once (but in both
  cases <code>z</code> is not evaluated at all when <code>x &lt; y</code> is found to be false).</p>
<p>Formally, if <code>a, b, c, …, y, z</code> are expressions and <code>op1, op2, …, opN</code> are
  comparison operators, then <code>a op1 b op2 c ... y opN z</code> is equivalent to
  <code>a op1 b and b op2 c and ... y opN z</code>, except that each expression is
  evaluated at most once.</p>
</blockquote>
<p>Thus, it is equivalent to:</p>
<pre><code>&gt;&gt;&gt; (11 &gt; 0) and (0 is True)
False
</code></pre>
</div>
<span class="comment-copy">it's <code>(11&gt;0) and (0 is True)</code>, I remember there is a dupe somewhere</span>
<span class="comment-copy">This behaviour seems really odd.</span>
<span class="comment-copy">@AaronChristiansen yeah, this one is surprising if you are unaware that chaining applies to all comparison operators, not just <code>&lt;</code> and <code>&gt;</code> (and their inclusive versions).</span>
<span class="comment-copy">@juanpa.arrivillaga The fact that Python can handle expressions like <code>2 &lt; x &lt; 5</code> is fantastic, but it feels a bit counterintuitive for <code>is</code>.</span>
<span class="comment-copy">@AaronChristiansen I agree. But <code>is</code> should certainly be considered a comparison operator, and I'm not sure how I feel about this behavior only applying to <i>certain</i> comparison operators. Certainly, reasonable people could disagree. By now I'm just used to it.</span>
<span class="comment-copy">this one never gets old :) it's a duplicate, but hey, not all cases &amp; combinations of <code>is</code>, <code>=</code>, <code>&lt;</code>, <code>&gt;</code> isn't covered and OPs don't have a clue of this chaining pattern and fail to see it most of the time. Every one of us should have a duplicate answer of that (I have one :))</span>
<span class="comment-copy">This particular case may take the prize for most naturally confusing combination though. <code>11 &gt; 0 is True</code> is a nice sentence.</span>
