<div class="post-text" itemprop="text">
<p>I'm serializing Python <code>float</code>s to a CSV file via</p>
<pre><code>import csv

some_float = 3 / 5
csv.writerow([..., some_float, ...])
</code></pre>
<p>and then reading them back via <code>pandas.read_csv</code> as <code>np.float64</code>. Is it guaranteed that the floating-point value I read in will be the value I get out, or is it possible that I may lose some precision? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>A comment in the Python source suggests this is safe.</p>
<p><a href="https://github.com/python/cpython/blob/master/Python/pystrtod.c#L828" rel="nofollow noreferrer">https://github.com/python/cpython/blob/master/Python/pystrtod.c#L828</a></p>
<p><code>/* The repr() precision (17 significant decimal digits) is the
   minimal number that is guaranteed to have enough precision
   so that if the number is read back in the exact same binary
   value is recreated.  This is true for IEEE floating point
   by design, and also happens to work for all other modern
   hardware. */</code></p>
<p>Double check you are getting up to 17 significant digits in your csv file - otherwise you may need to force convert your floating point numbers with repr() on output to csv.</p>
</div>
<span class="comment-copy">Why do not you save it as bytes? Then you will not lose precision.</span>
<span class="comment-copy">@eyllanesc Well, <i>can</i> I lose precision if I save is as text? That is the question.</span>
<span class="comment-copy">I think that precision is lost, since to save a floating number in a CSV it is saved as text, so they will have to place a limited number of decimals, but floats can have a large number of decimals.</span>
<span class="comment-copy">The details of Python's <code>float</code> type are <a href="https://docs.python.org/3/library/stdtypes.html#typesnumeric" rel="nofollow noreferrer">implementation-dependent</a>.</span>
<span class="comment-copy">@chepner I'm talking about the 99% case; it's safe to assume the implementation is CPython.</span>
