<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/588004/is-floating-point-math-broken">Is floating point math broken?</a>
<span class="question-originals-answer-count">
                    28 answers
                </span>
</li>
</ul>
</div>
<p>so I'm just doing a basic math problem and noticed that it is returning an abnormally long float rather than the clean answer I was looking for. I am trying to take the 5th root of 100,000. So in normal mathematical notation we would be doing 100,000^(1/5)=10; however, my code in python is returning 10.000000000000002. I've tried the following bits of code:</p>
<pre><code>100000**(1/5)
</code></pre>
<p>And</p>
<pre><code>100000**.2
</code></pre>
<p>I understand why this might not work perfectly for, say, 1,000^(1/3) because 1/3 is a never ending decimal; however, I would think it should work fine for 100,000 ^ (1/5). Not sure what I may be doing incorrectly. Any help or insight appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because of the floating point precision. The floats in Python are encode on 64 bits (on a 64 bits system). So, you have a maximum possible precision to represent number. If you want absolute precision, use fixed point with the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">Decimal module</a>.</p>
<p>For further explanation, see this [article].(<a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/floatingpoint.html</a>)</p>
</div>
<span class="comment-copy">Do read the article @TwistedSim linked to:  floats are stored in a binary format, and 1/5 cannot be represented exactly in any finite number of binary digits (just as 1/3 cannot be represented exactly in any finite number of decimal digits).</span>
