<div class="post-text" itemprop="text">
<p>I have browsed SO extensively and I have found many questions about generating all possible permutations, but none regarding generating a specific number of permutations.</p>
<p>I developed, thanks to many SO questions, a decent permutation test routine. However I have to repeat it many times, and it is taking a too long time. </p>
<p>my code:</p>
<pre><code>def exact_mc_perm_test(ys, nmc,boolean_selection):
    # xs sample from a time series
    # ys all time series
#     print nmc
    # sample difference in mean
    mean_ys = np.mean(ys)
    diff = np.abs(np.mean(ys[boolean_selection]) - mean_ys)
    k=0
    for j in np.arange(nmc):
        # in place shuffling
        np.random.shuffle(ys)
        # difference now between fixed all time series and shuffled subsamplevalues
        diff_shuffled = np.abs(np.mean(ys[boolean_selection]) - mean_ys)
        k += diff &lt; diff_shuffled
    return k / nmc
</code></pre>
<p>I took this <a href="https://stackoverflow.com/questions/24795535/pythons-implementation-of-permutation-test-with-permutation-number-as-input">SO answer</a> and modify it for my specific test.</p>
<p>I have to run it over a 3D array stored in an xarray. the dataset has (lon,lat,time) coordinates, I need to run it for each (lon,lat) position (along the time dimension)</p>
<p>I run it using chain.iteratools:</p>
<pre><code>for ii in chain.from_iterable(zip(*dataset.variable())):
    iis = ii[selected_position].values
    ind_x =dataset.lon==ii.lon
    ind_y =dataset.lat==ii.lat
    dataset.perm_test[ind_y, ind_x] = exact_mc_perm_test1(iis, ii.values, 1000.,selected_position)
</code></pre>
<p>Ideally I want to run a permutation test with 20000 permutations. The two loops (within (lon,lat) and for 20000 shuffles) adds up.</p>
<p>I am looking to speed up the permutation test code.</p>
<p>Therefore I though about trying to generate a 2D array of shape (len(ys),20000) with essentially 20000 shuffled ys array, and then access them at ones and calculate the 20000 differences (diff in the code). (Or find a trade off between memory usage and the looping, so maybe do 5 loops for 4000 shuffles at the time).</p>
<p>I could not figure out or find a way to do this. </p>
<p>The permutations command from itertools generates all the possible permutations which in my case are too many to handle. </p>
<p>I have looked at the random library but couldn't find something that fits my need. Any suggestion?</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at <code>compress()</code> and <code>permutations()</code> from the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools</a>:</p>
<pre><code>for perm in compress(permutation(iterable, r=length), boolean_selection):
    print(perm)
</code></pre>
</div>
<span class="comment-copy">It's not obvious from your question how big is the 2D array from which you're generating permutations, but if this is sufficiently large, then it may be worth just generating random shuffles rather than limiting the length of the sequence generated by itertools.permutations(). For example, if you had 100 elements, then 100-factorial permutations would be far too large to sample, but if you generated 20000 random shuffles, there's a very good chance that you'd never repeat the same permutation.</span>
<span class="comment-copy">the sample is not 100 but like 40, which is still too large (at least for what I want to do).  I think I like random.shuffle better too, in fact. Is there a way to repeat it without a loop?</span>
<span class="comment-copy">I found some answer that does cut the time down, I will write a reply. thanks for the inputs!</span>
<span class="comment-copy">thanks I will have a look and come back. I missed that. thanks!</span>
<span class="comment-copy">Oups, I think i misunderstood your question, I read permutation as <code>permute a list of element</code>, not permutation as <code>permutation test</code>.</span>
<span class="comment-copy">I want to focus on the permutation part tho. But I guess I wasn't clear. I want N permutation of a list. And not all the permutation of N element within the list. But this answer was helpful to show me a few things. 1) I can extract some permutations, and the permutations come out quite differently from random.shuffle.. they are in a way ordered. Thanks!</span>
