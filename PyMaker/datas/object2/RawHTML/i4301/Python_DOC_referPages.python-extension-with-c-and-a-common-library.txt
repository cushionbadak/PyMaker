<div class="post-text" itemprop="text">
<p>For image processing I tend to use python to speed up my workflow. But what if there is missing functionality and you only find a library written in c++?
For this special case, one could <a href="https://docs.python.org/3/extending/building.html" rel="nofollow noreferrer">write a c++ extension</a> and import it in python. The extension relies on openCV which would be bundled into the extension. But python can already use openCV on its own. So I would end up with 2 versions of openCV in my programm. Is there a way around this?</p>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure I understand what you mean. So you have a third library with C++ that has some functionality which is lacking in OpenCV. You then want to talk to this library in Python together with the Python API from OpenCV. The extension you linked is just a way to include python in a C++ program and does not necessarly need OpenCV. Does the third library use OpenCV as well?</p>
<p>In general you can say:
If you do not modify OpenCV you do not need two versions. You install one and just have to make sure that another library that uses OpenCV as well links to the version you have used in the Python API when you build it.</p>
<p>If you do modify OpenCV you should build it yourself with your changes and then use the Python API from this self build OpenCV to be used in your applications.</p>
</div>
<span class="comment-copy">You write <code>The extension you linked is just a way to include python in a C++ program</code>, but I meant the other way: In python I want to use my own c++ program. Like <code>from customCpp import customMethod</code>. The c++ customMethod relies on opencv behind the scenes.</span>
<span class="comment-copy">Considering your 2nd paragraph, do you have any references that explain how to link my module to the opencv version that python uses on <code>import cv2</code>?</span>
<span class="comment-copy">For the scenario you describe, imagine you have installed OpenCV on your machine, then somewhere in this installation path you have the CPP headers from OpenCV which you can use in your own CPP application. One trail could be this question: <a href="https://stackoverflow.com/questions/19343984/opencv-cant-find-header-files" title="opencv cant find header files">stackoverflow.com/questions/19343984/â€¦</a></span>
<span class="comment-copy">If the headers you use for your own CPP applications are from the same installation as your Python API then it is the same version of OpenCV. Version in the sense of the codebase is the same. If you mean the same runtime instance, so that your cpp code and the opencv cpp code you call through python can talk to each other you would need to build opencv yourself as mentioned earlier and talk to  your own cpp code there</span>
