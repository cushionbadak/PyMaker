<div class="post-text" itemprop="text">
<p>Consider the following Django model:</p>
<pre><code>class Person(models.Model):
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
</code></pre>
<p>I would like to define this class from a “static” dict <em>(to be specific in my case it is generated from a file which will not change - so no need to <code>makemigrations</code> and <code>migrate</code> apart from first time)</em>.</p>
<p>Here is some pseudo-code to better explain what I want to achieve:</p>
<pre><code>persondict = {‘first_name‘: models.CharField(max_length=255), ‘last_name’: models.CharField(max_length=255)}

class Person(models.Model):
    #generate fields from persondict    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is just to start with. Note that you have to change the app_label inside the function, also this will work if you define it inside your models.py where you will use it, otherwise you will need to replace the '__module__' with the appropriate value.</p>
<pre><code>def generate_person_model_from_a_dict(person_model_dict):

    class Meta:
        app_label = 'your_app_label_here'

    person_model_dict.update({
        'Meta': Meta,
        '__module__': generate_person_model_from_a_dict.__module__,
    })

    Person = type("Person", (models.Model,), person_model_dict)
    return Person
</code></pre>
<p><code>Meta.app_label</code> is needed here to let the Django know which app the newly constructed model should be attached to, e.g. if you are creating it for the app <code>blog</code> and set the model's <code>app_label</code> to <code>blog</code>, then the Django will know, that the app has this model on it (just like you would define it in your <code>blog/models.py</code>)</p>
<p><code>__module__</code> is a special attribute of python objects (you can read details about it here <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/datamodel.html</a> ) To be brief, it lets Django to know which module your class belongs to, it uses it mostly to display various messages to it's user, see here: <a href="https://github.com/django/django/search?utf8=%E2%9C%93&amp;q=__module__&amp;type=" rel="nofollow noreferrer">https://github.com/django/django/search?utf8=%E2%9C%93&amp;q=<strong>module</strong>&amp;type=</a>
(just set it to your models.py like in the above example is therefore what Django pretty much expects)</p>
</div>
<span class="comment-copy">There is Django docs about it: <a href="https://code.djangoproject.com/wiki/DynamicModels" rel="nofollow noreferrer">code.djangoproject.com/wiki/DynamicModels</a></span>
<span class="comment-copy">@SzymonP. Is where I got the example but seems very outdated, the part after "is functionally equivalent to" produces a KeyError: '<b>module</b>'. Could you provide a minimum working solution for this simple exemple ?</span>
<span class="comment-copy">good answer, worked for me. Would be great to elaborate on the use of  Meta, app_label and <b>module</b> to give a more detailed explanation. Got a vague general understanding with (warning: obsolete) <a href="https://code.djangoproject.com/wiki/DynamicModels" rel="nofollow noreferrer">code.djangoproject.com/wiki/DynamicModels</a> but it would be great if you were to explain it in some details here.Then I will happily accept your answer.</span>
<span class="comment-copy">@shrimpdrake, added some details, hope they will help you</span>
