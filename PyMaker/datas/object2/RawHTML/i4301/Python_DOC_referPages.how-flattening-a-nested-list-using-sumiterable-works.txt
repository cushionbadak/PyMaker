<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/33541947/what-does-the-built-in-function-sum-do-with-sumlist">What does the built-in function sum do with sum(list, [])?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I'm using python 3.6. I came across the below way to flatten the nested list using <code>sum</code>:</p>
<pre><code>a = [[1, 2], [3, 4], [5, 6]]

sum(a,[])
</code></pre>
<p>which returns:</p>
<pre><code>[1,2,3,4,5,6]
</code></pre>
<hr/>
<p>What exactly is going on here? Sum takes an iterable, in this case a list, and a start value. I don't understand what python reads to flatten the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is just a result of how Python interprets addition of lists. From the <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">docs</a> </p>
<blockquote>
<p><code>sum(iterable[, start])</code></p>
<p>Sums start and the items of an iterable from left to right and returns the total.</p>
</blockquote>
<p>Since <code>sum</code> starts by adding the first element of the iterable to the <code>start</code> argument, you have:</p>
<pre><code>[] + [1, 2] = [1, 2]
</code></pre>
<p>Then it continues adding items from the iterable:</p>
<pre><code>[1, 2] + [3, 4] = [1, 2, 3, 4]
[1, 2, 3, 4] + [5, 6] = [1, 2, 3, 4, 5, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>sum([a, b, c], d)</code> produces <code>d + a + b + c</code>.</p>
<p>In your example, <code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are <code>[1, 2]</code>, <code>[3, 4]</code>, <code>[5, 6]</code>, and <code>[]</code>.</p>
<p><code>sum([[1, 2], [3, 4], [5, 6]], [])</code> produces <code>[] + [1, 2] + [3, 4] + [5, 6]</code>, which is <code>[1, 2, 3, 4, 5, 6]</code> because <code>+</code> is concatenation for lists.</p>
<p>This is <em>absurdly inefficient</em>, because every <code>+</code> operation involved requires copying all the data from each of its arguments:</p>
<pre><code>In [7]: x = [[i] for i in range(30000)]

In [8]: %timeit sum(x, [])
1 loop, best of 3: 2.06 s per loop

In [9]: %timeit [elem for sublist in x for elem in sublist]
1000 loops, best of 3: 1.91 ms per loop
</code></pre>
<p><code>sum(x, [])</code> takes quadratic time, whereas a more efficient implementation takes linear time. Never do <code>sum(x, [])</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As the <a href="https://docs.python.org/3/library/functions.html#sum" rel="noreferrer"><code>sum(iterable[, start])</code></a> document says:</p>
<blockquote>
<p><strong>Sums <code>start</code> and the items of an <code>iterable</code> from left to right and returns the total</strong>. <code>start</code> defaults to 0. The <code>iterable</code>’s items are normally numbers, and the start value is not allowed to be a string.</p>
</blockquote>
<p>So, in the example you shared:</p>
<pre><code>sum(a,[])
</code></pre>
<p>Here, <code>iterable</code> is <code>a</code> <em>(which is <code>[[1, 2], [3, 4], [5, 6]]</code>)</em> and <code>start</code> is <code>[]</code>. Hence, the resultant is equivalent to:</p>
<pre><code>[] + [1, 2] + [3, 4] + [5, 6]

# i.e. you flatten list --&gt; [1, 2, 3, 4, 5, 6] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>start</code> argument gives the function the starting point. It's what is being added to. So <code>sum([1,2,3])</code> returns <code>6</code> and <code>sum([1,2,3],5)</code> returns <code>11</code>. In your case, because you're passing in an 2-d list and an empty list, the function is going to add everything in the first argument to the second argument. Essentially, you're doing this:</p>
<pre><code>[]+[1,2]+[3,4]+[5,6]
</code></pre>
<p>It's a bit of a quirk of python's operator overloading.</p>
</div>
<span class="comment-copy"><i>Don't do that</i>, and also where the heck did the 6 go?</span>
<span class="comment-copy">Accidentally missed it. Edit has been made.</span>
<span class="comment-copy"><b>Better:</b> <code>[x for sublist in a for x in sublist]</code>.  <b>Why better:</b>  duck-types for tuples.  Doesn't create a bunch of useless intermediate lists which just get deleted quickly after.</span>
<span class="comment-copy">Why is that better? Usually I used in-list loop, but this seems much better...</span>
<span class="comment-copy">Not <i>quite</i> a dup, but <a href="https://stackoverflow.com/a/952946/1040092">this</a> answer discussed this.</span>
<span class="comment-copy">Joel Spolsky calls things like <code>sum(x, [])</code> <a href="https://www.joelonsoftware.com/2001/12/11/back-to-basics/" rel="nofollow noreferrer">Shlemiel the painter’s algorithm</a>. ;)</span>
