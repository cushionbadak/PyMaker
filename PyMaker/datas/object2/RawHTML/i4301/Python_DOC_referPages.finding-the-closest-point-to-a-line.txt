<div class="post-text" itemprop="text">
<p>I have a dataset where I am trying to find if a point lies on a line, and if not, what the closest point to that line is. </p>
<p>If the point is on the line, then I want that to be the point that matches with the endpoints of the line, if not I then want the nearest point to pair up with the endpoints.</p>
<p>Currently, my prorgram will return if the point lies exactly on the line, however, I am not sure how to get the points that vary slightly from the line to pair up.</p>
<p>Here's my code:</p>
<pre><code>def isOnLine(x1,y1,x2,y2,x3,y3):
float(x1)
float(x2)
float(x3)
float(y1)
float(y2)
float(y3)
dist = mt.sqrt((x1-x3)**2+(y1-y3)**2)
betweenDist = mt.sqrt((x1-x2)**2+(y1-y2)**2)+mt.sqrt((x2-x3)**2+(y2-y3)**2)
if(betweenDist == dist):
    return True
elif(dist-.000000000002&lt;= betweenDist&lt;=dist+.000000000002):
    return True
else:
    return False

matches = pd.DataFrame([])

for i in data1.itertuples():
    for j in data2.itertuples():
        for k in data3.itertuples():
            x1 = i.x
            y1 = i.y
            x2 = j.x
            y2 = j.y
            x3 = k.x
            y3 = k.y

            if(isOnLine(x1,y1,x2,y2,x3,y3)==True):
                print('perfect match')
                print(i.Index,j.Index,k.Index)
                currMatches = pd.DataFrame([i.Index,j.Index,k.Index])
                currMatches = currMatches.transpose()
                matches = matches.append([currMatches])
</code></pre>
<p>you can see where I was attempting to define a range off of the line where values would be accepted here:</p>
<pre><code>elif(dist-.000000000002&lt;= betweenDist&lt;=dist+.000000000002):
    return True
</code></pre>
<p>however I began to get duplicate values, and still not every data point was paired. as seen here:</p>
<pre><code>1,609,1171
2,727,1295
7,571,1064
8,503,1009
11,585,1103
12,680,1395
14,806,1365
15,502,1002
15,502,1152
21,784,1129
</code></pre>
<p>the optimal output should have 1-500 as the first digit with no number being repeated.</p>
<p>Is there a function already in Python to perform this calculation? Or is there a math equation I can apply?</p>
</div>
<div class="post-text" itemprop="text">
<p>not sure to understand exactly your code
what is the point, what is the line in your code.</p>
<p>but <a href="https://docs.scipy.org/doc/scipy/reference/spatial.distance.html#module-scipy.spatial.distance" rel="nofollow noreferrer">scipy.spatial.distance</a> may have functions you are looking for:</p>
<p>for example:
<code>closest_index = spatial.distance.cdist([point], line).argmin()</code>
would give you the closest index of the line from the point</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/math.html?highlight=isclose#math.isclose" rel="nofollow noreferrer"><code>math.isclose</code></a> may help in the last part of your code...</span>
<span class="comment-copy">You will have to figure out the distance a point is from the closest point on each line. Store the values in a dict of key-val where key is the Point and val is the Distance. Then sort those values so the lowest distance is first and get key (AKA the Point) for that value. You can just get the first Key that matches the value.</span>
<span class="comment-copy">by the way: is your distance calculation correct? <a href="https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line" rel="nofollow noreferrer">en.wikipedia.org/wiki/Distance_from_a_point_to_a_line</a></span>
<span class="comment-copy">This is something you will likely have to write yourself. There won't be any python functions to perform such specific operations, although you may find a library available if you do some searching.</span>
<span class="comment-copy">it's a little hard to understand what is the logic? can you provide an input/output example?</span>
