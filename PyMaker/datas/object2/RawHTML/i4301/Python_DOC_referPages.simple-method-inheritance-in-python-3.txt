<div class="post-text" itemprop="text">
<p>Newbie python inheritance question.. when you write the following:</p>
<pre><code>class A:
    def foo(self):
        print("a")

class B(A):
    pass

b = B()
getattr(b, "foo")
</code></pre>
<p>produces</p>
<pre><code>&lt;bound method A.foo of &lt;__main__.B object at 0x000000000604CC88&gt;&gt;
</code></pre>
<p>It looks as if Python creates an attribute <code>foo</code> which is bound to <code>A.foo</code> and it knows that <code>foo</code> is an <code>A</code> method. </p>
<p>Should I think of inheritance as simply creating pointers to the base class objects (and the interpreter knows it's a base class object) as opposed to creating a copy of the attribute in the deriving class? </p>
<p>Seems like this is an important point but somehow wasn't clear to me initially - came to this question while playing around with <code>super()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are partially correct, let's start by what you got wrong.</p>
<blockquote>
<p>Should I think of inheritance as simply creating pointers to the base class objects</p>
</blockquote>
<p>That would be incorrect. When you access an attribute, either with <code>getattr(obj, attr)</code> or by doing <code>obj.attr</code>, Python first recovers the attribute through the <a href="https://www.python.org/download/releases/2.3/mro/" rel="nofollow noreferrer">method resolution order</a>. In particular this means that this <em>does not happen at class creation</em>, but at attribute lookup instead.</p>
<blockquote>
<p>It looks as if Python creates an attribute <code>foo</code> which is bound to <code>A.foo</code></p>
</blockquote>
<p>Here you are correct. Binding a class or instance method created a new object in the process.</p>
<p>After having recovered the attribute, Python may need to bind it. It first checks if it is a <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor</a>, that is an object with a <code>__get__</code> method to allow binding it to a certain instance.</p>
<p>Here is a Python implementation of the <code>getattr</code> to help visualize what happens when you retrieve an attribute.</p>
<p>First this is how Python resolves a class attribute using the <em>mro</em>.</p>
<pre><code>def _resolve_cls_attr(cls, attr):
    if attr in cls.__dict__:
        return cls.__dict__[attr]

    elif len(cls.__mro__) &gt; 1:
        return _resolve_cls_attr(cls.__mro__[1], attr)

    else:
        raise AttributeError('class has no attribute {}'.format(attr))
</code></pre>
<p>Then, this is how <code>getattr</code> would be implemented if it were in Python.</p>
<pre><code>def getattr(instance, attr):
    cls = instance if isinstance(instance, type) else type(instance)

    # Recover instance attribute
    if hasattr(instance, '__dict__') and attr in instance.__dict__:
        attr_value = instance.__dict__[attr]

    # Recover the attribute from the class
    else:
        attr_value = _resolve_cls_attr(cls, attr)

    # We recovered a simple class attribute
    if not hasattr(attr_value, '__get__'):
        return attr_value

    # We recovered an instance method from a class or a staticmethod descriptor
    if instance is cls or isinstance(attr_value, staticmethod):
        return attr_value.__get__(None, cls)

    # We recovered an instance method or a custom descriptor
    return attr_value.__get__(instance, cls)
</code></pre>
<p>Keep in mind that the above omits a few steps for the sake of sticking to your question. By example, it will not rely on <code>__getattr__</code> and <code>__getattribute__</code> as the builtin <code>getattr</code> would.</p>
</div>
<span class="comment-copy">When you do <code>b.foo</code>, Python will first look in the <code>__dict__</code> of <code>b</code> where it wonâ€™t find a <code>foo</code>. Then it will check the <code>mro()</code>, i.e. all the types in the type hierachy in order, to check where it could take a <code>foo</code> from. In your case, it would first check <code>B.foo</code> and then <code>A.foo</code>.</span>
<span class="comment-copy">@poke right so i think the crux of my question was: when you do <code>B(A)</code>, <code>foo</code> isn't added to <code>B</code>'s namespace, rather <code>__dict__</code> contains all the attributes that were created specifically within <code>B</code> and not inherited from elsewhere, yeh?</span>
<span class="comment-copy">The <code>__dict__</code> will only contain instance members, i.e. things where you did <code>self.something = value</code>. Methods will usually live on the class, not the instance.</span>
<span class="comment-copy">@poke good to know! so then the correct way of saying it is <code>foo</code> isn't added to <code>B.__dict__</code> when you do <code>B(A)</code>, rather when you call <code>B.foo</code>, the <code>B.__dict__</code> is checked and then further up the MRO since it wasn't found?</span>
<span class="comment-copy">Yes, any attribute access will work like that.</span>
<span class="comment-copy">This is a pretty misleading and buggy way to handle descriptors. Why all the special-casing instead of just implementing the actual rule (<code>__get__(instance, cls)</code> for an instance, <code>__get__(None, cls)</code> for a class)? Also, if you're going to do descriptor handling, data descriptors are probably at least worth a mention.</span>
<span class="comment-copy">@user2357112 I wrote that around 1am and could improve it a bit after a good night of sleep. Note that doc to descriptors is already linked in the answer.</span>
