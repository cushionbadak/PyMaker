<div class="post-text" itemprop="text">
<p>I am using Python 3.4 with IPython and have the following code. I'm unable to read a csv-file from the given URL:</p>
<pre><code>import pandas as pd
import requests

url="https://github.com/cs109/2014_data/blob/master/countries.csv"
s=requests.get(url).content
c=pd.read_csv(s)
</code></pre>
<p>I have the following error</p>
<blockquote>
<p>"Expected file path name or file-like object, got  type"</p>
</blockquote>
<p>How can I fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just as the error suggests , <code>pandas.read_csv</code> needs a file-like object as the first argument.</p>
<p>If you want to read the csv from a string, you can use <a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="noreferrer"><code>io.StringIO</code></a> (Python 3.x) or <a href="https://docs.python.org/2/library/stringio.html#StringIO.StringIO" rel="noreferrer"><code>StringIO.StringIO</code> (Python 2.x)</a> . </p>
<p>Also, for the URL - <a href="https://github.com/cs109/2014_data/blob/master/countries.csv" rel="noreferrer">https://github.com/cs109/2014_data/blob/master/countries.csv</a> - you are getting back <code>html</code> response , not raw csv, you should use the url given by the <code>Raw</code> link in the github page for getting raw csv response , which is - <a href="https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv" rel="noreferrer">https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv</a></p>
<p>Example -</p>
<pre><code>import pandas as pd
import io
import requests
url="https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv"
s=requests.get(url).content
c=pd.read_csv(io.StringIO(s.decode('utf-8')))
</code></pre>
<h2>Update</h2>
<p>From pandas <code>0.19.2</code> you can now just <a href="https://stackoverflow.com/a/41880513/2071807">pass the url directly</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the latest version of pandas (<code>0.19.2</code>) you can directly pass the url</p>
<pre><code>import pandas as pd

url="https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv"
c=pd.read_csv(url)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As I commented you need to use a StringIO  object and decode i.e <code>c=pd.read_csv(io.StringIO(s.decode("utf-8")))</code> if using requests, you need to decode as .content returns <em>bytes</em> if you used .text you would just need to pass s as is <code>s = requests.get(url).text</code> c = <code>pd.read_csv(StringIO(s))</code>. </p>
<p>A simpler approach is to pass the correct url of the <em>raw</em> data directly to <code>read_csv</code>, you <strong>don't</strong> have to pass a file like object, you can pass a url so you don't need requests at all:</p>
<pre><code>c = pd.read_csv("https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv")

print(c)
</code></pre>
<p>Output:</p>
<pre><code>                              Country         Region
0                             Algeria         AFRICA
1                              Angola         AFRICA
2                               Benin         AFRICA
3                            Botswana         AFRICA
4                             Burkina         AFRICA
5                             Burundi         AFRICA
6                            Cameroon         AFRICA
..................................
</code></pre>
<p>From the  <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="noreferrer">docs</a>:</p>
<p><strong>filepath_or_buffer</strong> :</p>
<blockquote>
<p>string or file handle / StringIO
  The string could be a URL. Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is expected. For instance, a local file could be file ://localhost/path/to/table.csv</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The problem you're having is that the output you get into the variable 's' is not a csv, but a html file. 
In order to get the raw csv, you have to modify the url to: </p>
<p>'<a href="https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv" rel="nofollow">https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv</a>'</p>
<p>Your second problem is that read_csv expects a file name, we can solve this by using StringIO from io module. 
Third problem is that request.get(url).content delivers a byte stream, we can solve this using the request.get(url).text instead. </p>
<p>End result is this code: </p>
<pre><code>from io import StringIO

import pandas as pd
import requests
url='https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv'
s=requests.get(url).text

c=pd.read_csv(StringIO(s))
</code></pre>
<p>output: </p>
<pre><code>&gt;&gt;&gt; c.head()
    Country  Region
0   Algeria  AFRICA
1    Angola  AFRICA
2     Benin  AFRICA
3  Botswana  AFRICA
4   Burkina  AFRICA
</code></pre>
</div>
<span class="comment-copy">You would need something like <code>c=pd.read_csv(io.StringIO(s.decode("utf-8")))</code> but you are getting html back not a csv file so it is not going to work</span>
<span class="comment-copy">I'm fairly certain the URL you want is <code>"https://raw.github.com/cs109/2014_data/blob/master/countries.csv"</code>.</span>
<span class="comment-copy">Thanks a lot, helped me very much.</span>
<span class="comment-copy">glad we could be helpful , I would also like to request you to accept an answer, whichever you helped you the most. By clicking on the tick mark on the left side of the answer, it would be helpful for the community.</span>
<span class="comment-copy">What if the response is large and I want to stream it instead of consuming memory for the encoded content, decoded content and the StringIO object?</span>
<span class="comment-copy">In the latest version of pandas you can give the url directly i.e. <code>c=pd.read_csv(url)</code></span>
<span class="comment-copy">Curiously I have a newer version of <code>pandas</code> (0.23.4), but I could not give url directly. This answer helped me get that working.</span>
<span class="comment-copy">IMO this should now be marked as the correct answer.</span>
<span class="comment-copy">I would agree on that.</span>
<span class="comment-copy">it seems that using this directly instead of requests directly does not use <a href="https://pypi.python.org/pypi/requests-cache" rel="nofollow noreferrer">requests-cache</a> even if used</span>
<span class="comment-copy">That code returns <code>urllib.error.URLError: &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:777)&gt;</code> because of the https protocol which urllib cannot handle.</span>
<span class="comment-copy">For those using Python 2, you will have to use Python 2.7.10+.</span>
<span class="comment-copy">You can feed the url directly to pandas read_csv! of course! that's a much simpler solution than the one I found! :D</span>
<span class="comment-copy">@pabtorre, yep , an example of  why reading the docs is a good idea.</span>
<span class="comment-copy">I think I figured out the problem thank you very much...</span>
<span class="comment-copy">Thanks a lot for your explanatory answer. I realised the mistake,fixed the code and finally worked :)</span>
