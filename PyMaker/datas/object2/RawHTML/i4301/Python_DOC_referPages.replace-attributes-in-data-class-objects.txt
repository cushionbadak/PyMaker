<div class="post-text" itemprop="text">
<p>I'd like to replace the attributes of a <a href="https://www.python.org/dev/peps/pep-0557/" rel="nofollow noreferrer">dataclass</a> instance, analogous to <code>namedtuple._replace()</code>, i.e. making an altered copy of the original object:</p>
<pre><code>from dataclasses import dataclass
from collections import namedtuple

U = namedtuple("U", "x")

@dataclass
class V:
    x: int

u = U(x=1)
u_ = u._replace(x=-1)
v = V(x=1)

print(u)
print(u_)
print(v)
</code></pre>
<p>This returns:</p>
<pre><code>U(x=1)
U(x=-1)
V(x=1)
</code></pre>
<p>How can I mimic this functionality in dataclass objects?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python dataclasses module has a public API for field replacement on dataclass instances, documented <a href="https://docs.python.org/3.7/library/dataclasses.html#dataclasses.replace" rel="nofollow noreferrer">here</a>. This feature is provided by a module level helper function:</p>
<pre><code>from dataclasses import replace
</code></pre>
<p>The usage differs from <code>collections.namedtuple</code>, where this functionality was provided via a method on the generated type (<em>Side note:</em> <a href="https://docs.python.org/3/library/collections.html#collections.somenamedtuple._replace" rel="nofollow noreferrer"><code>namedtuple._replace</code></a> is documented/public.  This name choice was called a "regret" by the author - see link at end of answer).</p>
<p><em>Example usage:</em></p>
<pre><code>&gt;&gt;&gt; from dataclasses import dataclass, replace
&gt;&gt;&gt; @dataclass
... class V:
...     x: int
...     y: int
...     
&gt;&gt;&gt; v = V(1, 2)
&gt;&gt;&gt; v_ = replace(v, y=42)
&gt;&gt;&gt; v
V(x=1, y=2)
&gt;&gt;&gt; v_
V(x=1, y=42)
</code></pre>
<p>For more background of the design, see the PyCon 2018 talk - <a href="https://www.youtube.com/watch?v=T-TwcmT6Rcw" rel="nofollow noreferrer">Dataclasses: The code generator to end all code generators</a>.  The <code>replace</code> API is discussed in depth, along with other design differences between <code>namedtuple</code> and <code>dataclasses</code> as well as some performance comparisons.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>dataclass</code> is just syntactic sugar for the automatic creation of a special <code>__init__</code> method and a host of other "boilerplate" methods based on type-annotated attributes.</p>
<p>Once the class is created, it is like any other, and its attributes can be overwritten and instances can be copied, e.g.</p>
<pre><code>import copy

v_ = copy.deepcopy(v)
v_.x = -1
</code></pre>
<p>Depending on what the attributes are, you may only require <code>copy.copy</code>.</p>
</div>
<span class="comment-copy">â€“1 It is incorrect to use a copy/deepcopy for field replacement on dataclasses.  In some complex use cases (e.g. init/post_init hooks), data may not be handled correctly.  The better way is to use <code>dataclasses.replace()</code> function.</span>
<span class="comment-copy">@wim It appears you are looking through my answer history to punitively downvote / argue, possibly as retaliation for <a href="https://stackoverflow.com/questions/49931096/how-to-add-a-dataclass-field-without-annotating-the-type/49931177#comment87638798_50311270">my opinion</a> regarding a downvote of a question &amp; answer you made. Please discontinue this behavior as my experience of it leads me to feel it is bordering on abusive at this point.</span>
<span class="comment-copy">No, it is a coincidence. I'm a follower (currently the only follower) of the [python-dataclasses] tag. The existence of the <code>replace</code> method was brought to my attention when I attended a PyCon talk about it yesterday.</span>
<span class="comment-copy">@wim Very well. Thank you for pointing out <code>replace</code> and signalling that my original answer here is somewhat deficient for not using that function. It is my sincere hope now that you will leave me alone and that I will not have to communicate with you or interact with you further. I certainly will not make the mistake of participating in any questions that you participate in going forward.</span>
