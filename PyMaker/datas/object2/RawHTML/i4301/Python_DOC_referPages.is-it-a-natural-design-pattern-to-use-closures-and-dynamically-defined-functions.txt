<div class="post-text" itemprop="text">
<p>I find that defining functions which ask the user to define and then pass in another function to be a very natural design pattern for me.  For example,</p>
<pre><code>def gradient_descent(x0, grad_f):
    x = x0
    for _ in range(100):
        x -= 0.1 * grad_f(x)
    return x
</code></pre>
<p>Implements a generic gradient descent routine; all the user has to do is define the gradient function for f.  This is basically the interface used by scipy.optimize, and the programs I write tend to use various function closures and dynamically defined functions in a similar way.</p>
<p>However, I have found myself facing some serious difficulties in taking advantage of parallelism with multiprocessing since functions can't be pickled.  I know that there are ways around this, but it makes me question whether programming like this is even a "pythonic" way to do things.</p>
<p>Is this a natural design pattern in Python?  Is there a better way to design programs that will likely need to be refactored to use multiple processes?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is perfectly Pythonic, but you have to write a pickler for your closures.</p>
<p>Python doesn't do it for you automatically because there are a few different options you might want. In particular, you have to decide how far you want to "fake the closureness". Do you just want the captured values copied? Or do you want to copy the whole stack frame and capture cells out of that? Or do you want to actually insert a <code>Manager</code> or the like in the way to force the captures to stay in sync with the parent?</p>
<p>Once you decide exactly what rules you want to apply, you can write code that does that. Read the <a href="https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="nofollow noreferrer"><code>pickle</code></a> docs for details, and also see the <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer"><code>multiprocessing</code></a> docs and the linked source to see how it extends <code>pickle</code> in other ways.</p>
<hr/>
<p>But the good news is what you want is most likely going to be either exactly what <a href="https://pypi.org/project/dill/" rel="nofollow noreferrer"><code>dill</code></a> does, or exactly what <a href="https://pypi.org/project/cloudpickle/" rel="nofollow noreferrer"><code>cloudpickle</code></a> does.</p>
<p>In general:</p>
<ul>
<li><code>dill</code> tries to be as portable as possible, so you can save the pickles to disk and use them later, even if that means some things you probably don't care about are slightly different under the covers.</li>
<li><code>cloudpickle</code> tries to be as exact as possible, even if that means the pickles don't work in anything but an exact clone of your process. If neither of them are exactly what you want, you can of course look at the source for both and work out how to do exactly what you do want.</li>
</ul>
<hr/>
<p>Here's a trivial closure:</p>
<pre><code>def f():
    def g(): return i
    i=1
    return g
g = f()
</code></pre>
<p>Compare:</p>
<pre><code>&gt;&gt;&gt; pickle.dumps(g)
AttributeError: Can't pickle local object 'f.&lt;locals&gt;.g'
&gt;&gt;&gt; dill.loads(dill.dumps(g))
&lt;function __main__.g&gt;
&gt;&gt;&gt; dill.loads(dill.dumps(g)).__closure__
(&lt;cell at 0x108819618: int object at 0x1009e0980&gt;,)
&gt;&gt;&gt; dill.loads(dill.dumps(g))()
1
&gt;&gt;&gt; cloudpickle.loads(cloudpickle.dumps(g))
&lt;function __main__.f.&lt;locals&gt;.g&gt;
&gt;&gt;&gt; cloudpickle.loads(cloudpickle.dumps(g)).__closure__
(&lt;cell at 0x108819618: int object at 0x1009e0980&gt;,)
&gt;&gt;&gt; cloudpickle.loads(cloudpickle.dumps(g))()
1
</code></pre>
<p>Notice that both of them end up generating a closure that captures one cell referencing an the value 1, but <code>cloudpickle</code> got the name exactly right, while <code>dill</code> didn't. If you try to <code>pickle.dumps</code> the <code>dill</code> version, you'll get an error about <code>g</code> not being the same function as <code>g</code>, while if you try to <code>pickle.dumps</code> the <code>cloudpickle</code> version you'll get exactly the same error about pickling local objects as you started with.</p>
</div>
<span class="comment-copy">What's the connection between multiprocessing and pickling?</span>
<span class="comment-copy">@JohnKugelman - multiprocessing uses pickle to pass data to workers. In this case, OP wants to use closures, which are functions plus some local state. Its an interesting problem, I think.</span>
<span class="comment-copy">This is normal and pythonic, but its an interesting problem with closures. Python usually assumes that you can find functions through modules in the file system. A single machine or a node can run as long as they all have the same modules installed. With closures, dynamic function data is included with the function and I don't know how that works out.</span>
<span class="comment-copy">Interesting solution here <a href="https://stackoverflow.com/questions/573569/python-serialize-lexical-closures?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa" title="python serialize lexical closures">stackoverflow.com/questions/573569/â€¦</a> which is basically, use classes with <code>__call__</code> and not closures.</span>
<span class="comment-copy">Another possibility that's sometimes simpler is to just wrap the function in a global function that takes some extra arguments, instead of binding them into the closure, and then pass the global function and the extra arguments, or pass a <code>partial</code> that binds them in. It's not as clean-looking as passing a local closure, but it's actually cleaner under the covers (when it's appropriate).</span>
