<div class="post-text" itemprop="text">
<p>I have a dataframe with languages as column names, and with 1x final column containing account names:</p>
<pre><code>EN         DE         IT         Account
Milan      Mailand    Milano     Italy
Florence   Florenz    Firenze    Italy
London     London     Londra     UK
Belgrade   Belgrad    Belgrado   World
</code></pre>
<p>I would need to extract information from this database, creating all the possible lists based on a combination of column names (languages) and the values within the account column.</p>
<p>For example here the output would be:</p>
<pre><code>EN_Italy = ['Milan', 'Florence']
DE_Italy = ['Mailand', 'Florenz']
IT_Italy = ['Milano', 'Firenze']
EN_UK = ['London']
DE_UK = ['London']
IT_UK = ['Londra']
EN_World = ['Belgrade']
DE_World = ['Belgrad']
IT_World = ['Belgrado']
</code></pre>
<p>Would it be possible to do so?
Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can <strong><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.aggregate.html" rel="nofollow noreferrer"><code>aggregate()</code></a></strong>:   </p>
<pre><code>df = df.groupby("Account").aggregate(lambda k: list(k)).reset_index()

  Account            DE                 EN                 IT
0  Italy  [Mailand, Florenz]  [Milan, Florence]  [Milano, Firenze]
1     UK            [London]           [London]           [Londra]
2  World           [Belgrad]                [b]         [Belgrado]
</code></pre>
<p>To get your list, do a simple selection, e.g.</p>
<pre><code>df[df.Account == "Italy"]["DE"]

0    [Mailand, Florenz]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For a variable number of variables, a dictionary is often a good choice.</p>
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> for this:</p>
<pre><code>from collections import defaultdict

d = defaultdict(list)

for row in df.itertuples():
    for i in row._fields[1:-1]:
        d[i+'_'+row.Account].append(getattr(row, i))
</code></pre>
<p><strong>Result</strong></p>
<pre><code>defaultdict(list,
            {'DE_Italy': ['Mailand', 'Florenz'],
             'DE_UK': ['London'],
             'DE_World': ['Belgrad'],
             'EN_Italy': ['Milan', 'Florence'],
             'EN_UK': ['London'],
             'EN_World': ['Belgrade'],
             'IT_Italy': ['Milano', 'Firenze'],
             'IT_UK': ['Londra'],
             'IT_World': ['Belgrado']})
</code></pre>
<p><strong>Explanation</strong></p>
<ul>
<li>Initialise a <code>defaultdict</code> of lists.</li>
<li>Iterate rows of your dataframe, and for each row iterate language column names.</li>
<li>For the inner loop, append dictionary items as required.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Using stack</p>
<pre><code>df.set_index('Account').unstack().groupby(level=[0, 1]).apply(list)

    Account
EN  Italy       [Milan, Florence]
    UK                   [London]
    World              [Belgrade]
DE  Italy      [Mailand, Florenz]
    UK                   [London]
    World               [Belgrad]
IT  Italy       [Milano, Firenze]
    UK                   [Londra]
    World              [Belgrado]
dtype: object


d = df.set_index('Account').ustack().groupby(level=[0, 1]).apply(list)
d.index = d.index.map('_'.join)

d

EN_Italy     [Milan, Florence]
EN_UK                 [London]
EN_World            [Belgrade]
DE_Italy    [Mailand, Florenz]
DE_UK                 [London]
DE_World             [Belgrad]
IT_Italy     [Milano, Firenze]
IT_UK                 [Londra]
IT_World            [Belgrado]
dtype: object
</code></pre>
<p>Or</p>
<pre><code>d.to_dict()

{'DE_Italy': ['Mailand', 'Florenz'],
 'DE_UK': ['London'],
 'DE_World': ['Belgrad'],
 'EN_Italy': ['Milan', 'Florence'],
 'EN_UK': ['London'],
 'EN_World': ['Belgrade'],
 'IT_Italy': ['Milano', 'Firenze'],
 'IT_UK': ['Londra'],
 'IT_World': ['Belgrado']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just another approach with dict comprehension:</p>
<pre><code>accts = df['Account']

langs = [col for col in df.columns if col != 'Account']

result = {'{}_{}'.format(lang, acct): df.loc[df['Account']==acct, lang].tolist() \
          for lang in langs for acct in accts}
</code></pre>
</div>
<span class="comment-copy">What have you tried so far? What is the difference between your question and this one for exemple? <a href="https://stackoverflow.com/questions/17071871/select-rows-from-a-dataframe-based-on-values-in-a-column-in-pandas" title="select rows from a dataframe based on values in a column in pandas">stackoverflow.com/questions/17071871/â€¦</a></span>
<span class="comment-copy">Is there a way to invert the columns of the object before koining with '_'? So it would become DE_Italy And not Italy_DE</span>
<span class="comment-copy">Yes, several ways.  Simplest way is to use <code>unstack</code> instead of <code>stack</code></span>
