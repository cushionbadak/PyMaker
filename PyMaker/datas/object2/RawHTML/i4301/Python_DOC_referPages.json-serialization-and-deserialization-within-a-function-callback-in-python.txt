<div class="post-text" itemprop="text">
<p>Let's say for example that I have code like the one below:</p>
<pre><code>def function_callback(cb):
    cb()

def rand_name_giving_func(i):
    list_test = ['john', 'jim', 'anna', 'cynthia', 'dwight']
    return list_test[i] # not that random

def rand_value(i):
    dict_test = {'0': 'random_string', '1': 'random_string', '2': 'random_string'}
    return dict_test[str(i)]

def example():
    data = {} 

    for i in range(3):
        data['name_' + str(i)] = rand_name_giving_func(i)
        data['value_' + str(i)] = rand_value(i)

    if os.path.isfile('file.json') == True:
        with open('file.json', 'r') as fp:
            temp = json.load(fp)
            temp.update(data)

        with open('file.json', 'w') as fp:
            json.dump(temp, fp, indent=4, sort_keys=True)
    else:
        with open('file.json', 'w') as fp:
            json.dump(data, fp, indent=4, sort_keys=True)

if __name__ == '__main__':
    for i in range(10000):
        function_callback(example)
</code></pre>
<p>Let's also say that I can only handle JSON files within <code>example()</code> and that the callback will happen many times. It is my understanding that multiple <code>json.dump()</code> calls cannot happen for the same file, so I figured out that if I deserialize the file, update the resulting dictionary and serialize again (although extremely inefficient), it could work. It didn't so I got errors like:</p>
<pre><code>Traceback (most recent call last):
File "/home/pxcel/example.py", line 90, in function_callback
    temp = json.load(fp)
File "/usr/lib/python2.7/json/__init__.py", line 291, in load
    **kw)
File "/usr/lib/python2.7/json/__init__.py", line 339, in loads
    return _default_decoder.decode(s)
File "/usr/lib/python2.7/json/decoder.py", line 364, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
File "/usr/lib/python2.7/json/decoder.py", line 380, in raw_decode
    obj, end = self.scan_once(s, idx)
ValueError: end is out of bounds
</code></pre>
<p>and also <code>ValueError: No JSON object could be decoded</code>,
<code>ValueError: Extra data: line</code>, all regarding <code>temp = json.load(fp)</code>.</p>
<p>I've searched for alternative modules that handle JSON (ijson, demjson, etc) but 
I haven't found a helpful way to use them for the problem above.
Let's assume that the JSON file structure looks like this:</p>
<pre><code>{
    "name_0": "john",
    "value_0": {
         "0": "random_string"
    }
}
</code></pre>
<p>Any ideas? Assume that <code>list_test</code> and <code>dict_test</code> have 100k values each and the callback happens 10k times. Would that JSON encoding/decoding work?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>file.json</code> contains the example json data:</p>
<pre><code>    {
    "name_0": "john",
    "value_0": {
         "0": "random_string"
    }
    }
</code></pre>
<p>As its not quite clear what output is expected, I've modified the two functions so that <code>data</code> gets updated. However, the file is overwritten every time the <code>w</code> file mode is used. I've added the output at the bottom, if this is what you're expecting.</p>
<pre><code>def rand_name_giving_func(i):
    list_test = ['john', 'jim', 'anna', 'cynthia', 'dwight']
    return list_test[i] # not that random

def rand_value(i):
    dict_test = {'0': 'random_string', '1': 'random_string', '2': 'random_string'}
    return dict_test[str(i)]

def example():
    data = {} 

    for i in range(3):
        data['name_' + str(i)] = rand_name_giving_func(i)
        data['value_' + str(i)] = rand_value(i)

    if os.path.isfile('file.json') == True:
        with open('file.json', 'r') as fp:
            temp = json.load(fp)
            temp.update(data)

        with open('file.json', 'w') as fp:
            json.dump(temp, fp, indent=4, sort_keys=True)
    else:
        with open('file.json', 'w') as fp:
            json.dump(data, fp, indent=4, sort_keys=True)

example()  

#file.json:

{
    "name_0": "john",
    "name_1": "jim",
    "name_2": "anna",
    "value_0": "random_string",
    "value_1": "random_string",
    "value_2": "random_string"
}
</code></pre>
<p>The callback function may not be necessary unless you call the <code>example</code> function directly. Here's a hypothetical code that makes 10k calls and produces a similar output albeit random.</p>
<pre><code>#everything remains same
l = []
def random_name_generator():
    for i in range(1000):
        test = names.get_first_name()
        l.append(test)
    return l

def rand_name_giving_func(i):
    random_name_generator()
    list_test = [i for i in l]
    return list_test[i] # not that random

def rand_value():
    dict_test = {}
    for i in range(10000):
        dict_test[i] = i
    return dict_test[i]

def example():
    data = {} 

    for i in range(10000):
        data['name_' + str(i)] = rand_name_giving_func(i)
        data['value_' + str(i)] = rand_value()

#everything else remains the same

#Output: file.json contains about 20k entries:
{
"name_0": "Maria",
"name_1": "Carmen",
"name_10": "Antoinette",
"name_11": "Veronica",
"name_12": "Richard",
"name_13": "Rebecca",
"name_14": "Thomas",
"name_15": "Phillip",
"name_16": "Christopher",
.
.
.
"value_9995": 9999,
"value_9996": 9999,
"value_9997": 9999,
"value_9998": 9999,
"value_9999": 9999
}
</code></pre>
</div>
<span class="comment-copy">Is this a typo in your code? <code>temp. = json.load(fp)</code>. Have your tried <code>print</code>ing the contents of <code>temp</code> when you make the <code>open()</code> call in the <code>with</code> statement?</span>
<span class="comment-copy">Please reduce your program to the shortest possible <b>complete</b> program that demonstrates the error. Please <a href="https://stackoverflow.com/posts/49926263/edit">edit</a> your question and copy-paste that short complete program into your question. Your readers should be able to copy-paste it from <a href="https://stackoverflow.com">Stack Overflow</a> into a text file and run it. See <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> for more information.</span>
<span class="comment-copy">@user8212173 Yes, this was a typo. No I haven't, is there a possibility the the conversion to dictionary is problematic?</span>
<span class="comment-copy">it usually isn't, but make sure that the json data is readable by python by printing each line and validating json using <a href="https://jsonlint.com/" rel="nofollow noreferrer">JsonLint</a>. Sometimes, there could be spaces in your json data that could lead to encode/decode errors. The JSON example in your question is valid and I could not reproduce this error.</span>
<span class="comment-copy">Also, its not clear what the functions <code>rand_name_giving_func()</code> and <code>rand_value()</code> do. Its quite likely that the errors are appearing when these values are being updated to the temp dictionary.</span>
<span class="comment-copy">Yes, this is what I am expecting but assume that <code>list_test</code> and <code>dict_test</code> have 100k values each and the callback happens 10k times. Would that JSON encoding/decoding work?</span>
<span class="comment-copy">That's another question altogether. But I don't see any reason why it wouldn't work, considering that you're overwriting your file in <code>w</code> mode and not truncating data to the existing json data in the file. Of course, one can only positively assert this when the scenario has been tested. If this answer was helpful you may accept or upvote it. Meanwhile, I'll try a test case out of curiosity.</span>
<span class="comment-copy">Thank you very much. I will make edits until the question is as clear as possible. Consider upvoting the question when you think it's up to standard, so more people can see it.</span>
<span class="comment-copy">Upvoted question and edited answer with 10k calls. I also recommend using <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">threading</a> to distribute calls among separate threads to make execution faster.</span>
<span class="comment-copy">edited answer with name generator</span>
