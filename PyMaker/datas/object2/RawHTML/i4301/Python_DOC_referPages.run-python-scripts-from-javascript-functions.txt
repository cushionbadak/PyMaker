<div class="post-text" itemprop="text">
<p>We need to run a Python code which will control the GPIO of Raspberry Pi 3 from within the JavaScript. (JavaScript is listening for changes on database and when changes are made, function gets triggered and it should run the Python Code.</p>
<p><strong>(This code is not working, like the alert message will pop-up but the python code isn't running which otherwise should turn the LED on. What am i doing wrong?)</strong></p>
<p><em>index.html file</em></p>
<pre><code>function runPython()
{
    $.ajax({
    type: "POST", 
    url: "/home/pi/Desktop/Web/led.py",
    data :{},
    success: callbackFunc
    });
}

function callbackFunc(response)
{
    alert("working");
}
</code></pre>
<p><em>led.py file</em></p>
<pre><code>import RPi.GPIO as GPIO
import timemGPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
GPIO.setup(18, GPIO.OUT)
print "LED on"
GPIO.output(18, GPIO.HIGH)
time.sleep(10)
print "LED off"
GPIO.output(18,GPIO.LOW)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You code is not working because you can't access and run script on server directly from a browser, you can only pass the data to the server using <code>ajax</code>, therefore the <code>url</code> in the ajax should be the server url, and you have to send the <code>data</code>.</p>
<p>On your server (i.e. your Raspberry Pi), you need to have a http(web) server. The server will handle the post request coming from your javascript and control the GPIO accordingly. Like other mentioned, you can use <a href="http://flask.pocoo.org" rel="nofollow noreferrer">Flask</a> web development framework to create a web server for handling the request(s), or alternatively I often uses <a href="https://docs.python.org/3/library/http.server.html" rel="nofollow noreferrer">http.server</a> which is part of python standard library to create my own GET and POST request handlers for simple applications like this one. </p>
<p>Here is an approach of using <code>http.server</code> where <code>do_GET</code> method create a web page and run the javascript when pointing the browser to the server/RPi IP/URL, and 'do_POST' method handle the post data sent by the ajax to control the GPIO.</p>
<p><strong>web_gpio.py (in Python 3 syntax)</strong></p>
<pre><code>import time
import RPi.GPIO as GPIO
from http.server import BaseHTTPRequestHandler, HTTPServer


host_name = '192.168.0.115'    # Change this to your Raspberry Pi IP address
host_port = 8000


class MyHandler(BaseHTTPRequestHandler):
    """ 
    A special implementation of BaseHTTPRequestHander for reading data 
    from and control GPIO of a Raspberry Pi
    """

    def do_HEAD(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def _redirect(self, path):
        self.send_response(303)
        self.send_header('Content-type', 'text/html')
        self.send_header('Location', path)
        self.end_headers()

    def do_GET(self):
        html = '''
        &lt;html&gt;
        &lt;body&gt;
        &lt;p&gt;this webpage turn on and then turn off LED after 2 seconds&lt;/p&gt;
        &lt;script src="http://code.jquery.com/jquery-1.12.4.min.js"&gt;&lt;/script&gt;
        &lt;script&gt;
          function setLED()
            {{
              $.ajax({
              type: "POST",
              url: "http://%s:%s",
              data :"on",
              success: function(response) {
                alert("LED triggered")
              }
            });
          }}
          setLED();
        &lt;/script&gt;
        &lt;/body&gt;
        &lt;/html&gt;
        '''
        self.do_HEAD()
        html=html % (self.server.server_name, self.server.server_port)
        self.wfile.write(html.encode("utf-8"))

    def do_POST(self):
        # Get the post data
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length).decode("utf-8")
        if post_data == "on":
            GPIO.setmode(GPIO.BCM)
            GPIO.setwarnings(False)
            GPIO.setup(18, GPIO.OUT)
            GPIO.output(18, GPIO.HIGH)
            time.sleep(2)
            GPIO.output(18, GPIO.LOW)
        self._redirect('/')


if __name__ == '__main__':

    http_server = HTTPServer((host_name, host_port), MyHandler)
    print("Running server on %s:%s" % (host_name, host_port))
    http_server.serve_forever()
</code></pre>
<p>Run the python script on the server:</p>
<pre><code>python3 web_gpio.py
</code></pre>
<p>Either launch your browser and point the browser to the server/RPi ip (in my example, it is <code>192.168.0.115:8000</code>) or run <code>curl</code> command form another terminal session to simulate the GET request.</p>
<pre><code>curl http://192.168.0.115:8000
</code></pre>
<p>Hope this example would give you the idea on how to control something on your server using a simple web server.</p>
</div>
<span class="comment-copy">Why is this tagged with PHP?</span>
<span class="comment-copy">if this is possible through PHP? @Magnus Eriksson</span>
<span class="comment-copy">everything is possible  if you put your mind to it</span>
<span class="comment-copy">1. Help you with what? You still haven't said what you actually want to do. 2. Both options (rewriting the code or set up your server) are too broad for SO. 3. SO isn't a substitute for doing research. SO is <i>not</i> a free coding service.</span>
<span class="comment-copy">Ok. So. For a million security reasons, browsers will not let you run an arbitrary script on your computer, and certainly you can't POST an AJAX request to a real file outside the browser. You can, however, run a web server locally (that's listening to 127.0.0.1:SOMEPORT), post an AJAX request to <i>that</i> webserver, and that webserver can invoke the Python call. Someone recommended Flask, that's a great super-simple webserver for Python and I recommend it.</span>
