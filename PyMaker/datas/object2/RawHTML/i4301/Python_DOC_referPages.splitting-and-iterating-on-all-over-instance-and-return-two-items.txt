<div class="post-text" itemprop="text">
<p>I am splitting x variable (string)  in based on <code>*</code> and then <code>;</code> and return out 
all info.  I tried so for below and it give only <code>own1</code> info.</p>
<p>so basically I want to split and iterating on all over instance and return two items which will then go into <code>OS.Path.Join(path,own1,OwnAdd1)</code> to make folder/subfolder</p>
<pre><code>x= 'own1;own1Add*own2;ownAdd2*own3:ownAdd'

def cleanAndMakeSubfolder(x) :
   for x in  x.split("*"):

    Owner= x.split(";")  [0].replace(" ","_").strip()
    count = x.split(";")[1].count(" ")-1
    OwnerADD =  x.split(";")[1].replace(",","_") .replace(" ","_",count).replace('"',"").replace("(","").strip()
    return Owner,OwnerADD
print cleanAndMakeSubfolder(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer"><code>re.split</code></a> to split on multiple delimiters and then iterate through the <code>splitted</code> two at a time:</p>
<pre><code>import re
import os

path = 'some_path'
x = 'own1;own1Add*own2;ownAdd2*own3;ownAdd'
splitted = re.split(';|\*',x)

for x, y in zip(*[iter(splitted)]*2):
    print(os.path.join(path, x, y))

# some_path/own1/own1Add
# some_path/own2/ownAdd2                                          
# some_path/own3/ownAdd                                       
</code></pre>
<p><strong>EDIT</strong> (using function as requested):</p>
<pre><code>import re
import os

path = 'some_path'
x = 'own1;own1Add*own2;ownAdd2*own3;ownAdd'

def cleanAndMakeSubfolder(x):
    path_list = []
    splitted = re.split(';|\*',x)
    for x, y in zip(*[iter(splitted)]*2):
        path_list.append(os.path.join(path, x, y))
    return path_list

print(cleanAndMakeSubfolder(x))                                  
</code></pre>
<p>Note that the function returns a list and you can access each item simply by index.</p>
</div>
<span class="comment-copy">This is a total mess, but try <code>re.split(';|\*|:', x)</code> to split everything and then just iterate.</span>
<span class="comment-copy">You're only getting the first set of results because you're returning immediately after you parse it. None of the rest get a chance to run.</span>
<span class="comment-copy">@glibdud Any clues how to solve that?</span>
<span class="comment-copy">Not working.  trying to get this in a function <code>def cleanAndMakeSubfolder(x) :     splitted = re.split(';|\*',x)     #print splitted      for x, y in zip(*[iter(splitted)]*2):         return x,y  print  cleanAndMakeSubfolder(x)</code></span>
<span class="comment-copy">Please do not <code>return</code> from function. When you <code>return</code>, you only get the first <code>x</code>, <code>y</code> value. Function exits after that. Is it necessary that you should use a function?</span>
<span class="comment-copy">yes because of lots cleaning and replacing required in x string coz it would be name of folder. so that. in reality <code>x = Abdul gaffer Dhillon;158 bexer Road, Bexley,  London DA5 1BT*Abdul khan Dhillon;5852 Blendon Road, Bexley, Greater Land, DA5 1BT</code></span>
<span class="comment-copy">Can you have a look now?</span>
<span class="comment-copy">You should understand what <code>return</code> does. When you do <code>return x, y</code>, you exit from function at the end of first iteration of the <code>for</code> loop. What do you get at the end of first iteration? - the first record <code>('own1', 'own1Add')</code>. That is returned to the function caller. No go back to the function again. That's why I introduced a list - <code>path_list</code>. So you will appending everything before returning. You get <code>[(..,..), (..., ...)....]</code>.</span>
