<div class="post-text" itemprop="text">
<p>I used code from video </p>
<pre><code>def exp(x,y):
    z= x ** y
    print(z)

base = input("please enter the base value: ")
exponent = input("please enter the exponent value: ")

exp(base,exponent)
</code></pre>
<p>and received :</p>
<pre><code>Traceback (most recent call last):
  File "def1.py", line 12, in &lt;module&gt;
    exp(base,exponent)
  File "def1.py", line 3, in exp
    z= x ** y

**TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'str'**
</code></pre>
<p>if i write this:</p>
<pre><code>tempbase = input("please enter the base value: ")
tempexponent = input("please enter the exponent value: ")

base = int(tempbase)
exponent = int(tempexponent)

exp(base,exponent)
</code></pre>
<p>it works just fine. However I shouldn't have to define a variable type. so what am i doing wrong ?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's nothing about informing about type, as python is dynamically typed language, but also python is strongly typed, which means that strings can't be easily coerced to integers. You had to cast them explicitly to integers to use pow function.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python's <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer"><code>input()</code></a> function takes whatever is given at the prompt until a new line, and converts it to a string. From the docs (emphasis mine):</p>
<blockquote>
<p>The function then reads a line from input, <em>converts it to a string</em>
  (stripping a trailing newline), and returns that.</p>
</blockquote>
<p>The function <a href="https://docs.python.org/3/library/functions.html#pow" rel="nofollow noreferrer"><code>pow()</code></a> (which is called when you do something like <code>a ** b</code>) requires numeric inputs, so you have to convert them to a numeric type first. From the docs for <code>pow()</code>:</p>
<blockquote>
<p>The arguments must have numeric types. With mixed operand types, the
  coercion rules for binary arithmetic operators apply. For int
  operands, the result has the same type as the operands (after
  coercion) unless[...]</p>
</blockquote>
<p>The <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer"><code>int()</code></a> function takes a number or string and converts it to an integer, on which you can do exponentiation. You could also get away with <a href="https://docs.python.org/3/library/functions.html#float" rel="nofollow noreferrer"><code>float()</code></a> following the same logic.</p>
</div>
<span class="comment-copy">You are <i>not</i> defining a variable type. You are converting a <code>str</code> objects into <code>int</code> objects. Python variables are not typed, but Python generally enforces strong typing. It will not coerce a <code>str</code> to an <code>int</code> when you use operators only defined for <code>int</code> objects. Likely, the tutorial you are following uses Python 2, and you are using Python 3 (as you should to learn Python). I would probably find a better tutorial.</span>
<span class="comment-copy">Your first snippet fails with a NameError because <code>tempbase</code> and <code>tempexponent</code> are not defined.</span>
<span class="comment-copy">One way to think about it is that a python variable doesn't have a type but the object references does. You can assign any object to the variable and then when you use that object, type matters. In a statically typed language, you can only assign some types of objects. Like for intance an string variable can only take a string object.</span>
<span class="comment-copy">I've been using a CBT nuggets video  with the newer 3.6 python I'm just surprised that it is so different Thanyou for your help</span>
