<div class="post-text" itemprop="text">
<h3>How to use recursion to implement "Finding the maximum value in an array"  in Python ?</h3>
<p>The following is a simple test code I wrote</p>
<p><strong>I want to do it by recursion</strong></p>
<p>I'm learning algorithms, learning recursion. </p>
<p>Thanks very much!</p>
<pre><code>def max(list):
    if list == []:
        msg = "List: ..."    
        return msg

    max = list[0]
    for item in list[1:]:
        if item &gt; max:
            max = item
    return max

data = [8,2,-690,4,12,-320,0, 98]
print(max(data))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use recursion, it's very important to define carefully the end cases.</p>
<p>The maximum of the elements of a list is, obviously, either the first element or the maximum of the rest of the list: it's the greatest of the two values. That's actually the recursion you are looking for.</p>
<p>But what happens when there is no first element? You have an empty list, and an undefined behaviour. Why not <code>maximum([]) = 0</code>? Because it would lead to some inconsistency: <code>maximum([-1]) = greatest(-1, maximum([])) = greatest(-1, 0) = 0</code>. (You could also try <code>maximum([]) == -math.inf</code>, but this won't be very intuitive!)</p>
<p>What if the rest of the list is empty? No problem, you have just one element and it is the maximum.</p>
<p>Just translate this analysis into code:</p>
<pre><code>def maximum(xs):
    if len(xs) == 0:
        raise ValueError()
    elif len(xs) == 1:
        return xs[0]
    else:
        u = xs[0]
        v = maximum(xs[1:])
        return u if u &gt;= v else v # greatest(u, v)
</code></pre>
<h1>More on <code>maximum([])</code></h1>
<p>I will try to give a value to <code>maximum([])</code>. I repeat the argument above. For any given <code>n</code>, <code>maximum([n]) = greatest(n, maximum([])) = n</code>. This implies that, for every <code>n</code>, <code>maximum([]) &lt;= n</code>. The only value that meets this condition is <code>-math.inf</code>. Why not define <code>maximum([]) == -math.inf</code>? Imagine you create a <code>minimum</code> function. For symetrical reasons, you will have to define <code>minimum([]) == math.inf</code>. Hence it exists a list <code>l0 = []</code> such that <code>minimum(l0) &gt; maximum(l0)</code>. No one would accept such a possibility.</p>
<p>What should we do now? There are two main possibilities: defensive programming or use a contract. In defensive programming, the function will check the arguments it has received, and fail if one of these arguments is not correct. That's what I did:</p>
<pre><code>def maximum(xs):
    if len(xs) == 0:
           raise ValueError()
    ...
</code></pre>
<p>If you use a contract, you will basically say: if you give this function an empty list, then the behaviour is undefined. It might return any value, crash, loop forever, .... Here, you would have something like:</p>
<pre><code>def maximum(xs):
    """!!! xs must not be empty !!!"""
    ...
</code></pre>
<p>It seems the same, but there is a huge difference. You can use, <em>for implementation reasons</em>, <code>-math.inf</code> as the return value for <code>maximum([])</code>, because it is now clear that it doesn't have any meaning. Someone who tries to check if <code>minimum(l0) &lt;= maximum(l0)</code> for <code>l0 = []</code> clearly breaks the contract and won't be surprised by the result. Of course, if you want to make it robust, you will write:</p>
<pre><code>def maximum(xs):
    """PRECONDITION: xs must not be empty"""
    assert len(xs) != 0 # can be disabled at runtime at your own risks
    _maximum(xs)

def _maximum(xs):
    """no precondition here"""
    if len(xs) == 0:
        return -math.inf
    else:
        u = xs[0]
        v = _maximum(xs[1:])
        return u if u &gt;= v else v # greatest(u, v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this (using recursion, as requested by the OP):</p>
<pre><code>def largest(arr):
    if len(arr) == 2:
        return arr[1] if arr[1] &gt; arr[0] else arr[0]
    else:
        return largest([arr[0], largest(arr[1:])])
</code></pre>
<p>No built-in functions are used (such as <code>max</code>) because the OP has stated that they don't wish to use any built-in functions.</p>
<p>The <code>else</code> part of the function <code>return</code>s either the first element of the <code>list</code> or the largest number in the list (excluding the first element) depending on whichever number is larger.</p>
<p>Each time the <code>else</code> part is executed, the <code>largest(arr[1:])</code> bit checks which number is largest inside <code>arr</code> without the first element. This means that, at one point, <code>arr</code> will contain two elements. When it does so, a one-line <code>if</code> statement is used to compare the two elements and <code>return</code>s the larger element.</p>
<p>Eventually, the code recurses back to the first level and <code>return</code>s the largest element.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would write <code>max</code> and <code>max_all</code></p>
<pre><code>from math import inf

def max (a, b):
  if a &gt; b:
    return a
  else:
    return b

def max_all (x = -inf, *xs):
  if not xs:
    return x
  else:
    return max (x, max_all (*xs))
</code></pre>
<p><code>max_all</code> can be called with any number of arguments</p>
<pre><code>print (max_all (8, 2, -690, 4, 12, -320, 0, 98))
# 98
</code></pre>
<p>Or use <code>*</code> to <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">unpack arguments</a></p>
<pre><code>data = [ 8, 2, -690, 4, 12, -320, 0, 98 ]

print (max_all (*data))
# 98
</code></pre>
<p>It even works when 0 inputs are given</p>
<pre><code>print (max_all ())
# -inf
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def Maximum(list):
    if len(list) == 1:
        return list[0]
    else:
        m = Maximum(list[1:])
         if m &gt; list[0] else list[0]:
              return m
def main():
    list = eval(raw_input(" please enter a list of numbers: "))
    print("the largest number is: ", Maximum(list))
main()

The simplest way
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>max</code> and <code>list</code> are <a href="https://docs.python.org/2/library/functions.html" rel="nofollow noreferrer">built-in functions</a>. So you want to avoid using those identifiers yourself.</p>
<p>Here's a simple version that uses recursion:</p>
<pre><code>#/usr/bin/python

def largest(arr):
    if not arr:
        return None
    else:
        r = largest(arr[1:])
        if r &gt; arr[0]:
            return r
        else:
            return arr[0]

data = [8, 2, -690, 4, 12, -320, 0, 98]
print(largest(data))
</code></pre>
</div>
<span class="comment-copy">What's wrong with the <code>max()</code> function?</span>
<span class="comment-copy">Bad idea using <code>list</code> as a variable name since it masks the built-in class of that name.  Could you clarify <i>why</i> you need recursion for this?  What if the number of elements exceeds python's recursion limit?</span>
<span class="comment-copy">Thank you for the reply  / I'm learning algorithms, learning recursion.  / So wanto to use recursion to do practice</span>
<span class="comment-copy">I think you should practice recursion with more valid/logical examples!</span>
<span class="comment-copy">Don't encourage using the name <code>list</code> as a variable. Also you have a small indentation error and it would be nice if you explain your answer at least a little bit.</span>
<span class="comment-copy">DV because <code>list</code> is used as a variable even though it's a built-in function, the code doesn't compile and because of no explanation (as well as a self-certified claim that this answer is '<i>the simplest way</i>')</span>
<span class="comment-copy">Thank you for the reply  / If do not use Python built-in functions (e.g. max) ?  / I'm practicing the recursion algorithm</span>
<span class="comment-copy">DV because the OP clearly states that they don't want to use any built-in functions</span>
<span class="comment-copy">@Adi219 That requirement was added (via comment) 6 hours <i>after</i> I answered. So, no, it was NOT stated anywhere when I answered (contrary to your claim). Neither do I have a time machine nor a mind reading device.</span>
<span class="comment-copy">@Phoenix It's fairly easy to find the maximum of two without using <code>max</code>. I have modified the answer as such.</span>
