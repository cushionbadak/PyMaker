<div class="post-text" itemprop="text">
<p>I need to list all the attribute of a class that are properties and have a setter. For example with this class:</p>
<pre><code>class MyClass(object):
    def __init__(self):
        self. a = 1
        self._b = 2
        self._c = 3

    @property
    def b(self):
        return self._b

    @property
    def c(self):
        return self._c

    @c.setter
    def c(self, value):
        self._c = value
</code></pre>
<p>I need to get the attribute c but not a and b.
Using this answers: <a href="https://stackoverflow.com/a/5876258/7529716">https://stackoverflow.com/a/5876258/7529716</a>
i can get the property object b and c. </p>
<p>But is their a way to know if those properties have a setter other than trying:</p>
<pre><code>inst = MyClass()    
try:
    prev = inst.b
    inst.b = None
except AttributeError:
    pass # No setter
finally:
    inst.b = prev  
</code></pre>
<p>Thanks in advance.  </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>property</code> objects</a> store their getter, setter and deleter in the <code>fget</code>, <code>fset</code> and <code>fdel</code> attributes, respectively. If a property doesn't have a setter or deleter, the attribute is set to <code>None</code>.</p>
<p>This means you can simply filter out those properties whose <code>fset</code> attribute is set to <code>None</code>:</p>
<pre><code>def get_writeable_properties(cls):
    return [attr for attr, value in vars(cls).items()
                 if isinstance(value, property) and value.fset is not None]
</code></pre>
<pre><code>&gt;&gt;&gt; get_writeable_properties(MyClass)
['c']
</code></pre>
</div>
<span class="comment-copy">Asking for forgiveness rather than permission is a common coding style in python. Is there a reason you're keen to avoid it?</span>
<span class="comment-copy">Some  of my setter do modification that are not renversable.</span>
<span class="comment-copy">You can make this even better and support not only class arguments but also instances. You would get the <code>obj.__class__</code> if <code>inspect.isclass(obj)</code> yields <code>False</code></span>
<span class="comment-copy">@MatiasCicero I don't think that's a good idea, because of metaclasses. Classes are also instances. I don't like to guess what the user wants; I'd rather write a function that only works on classes or only on instances.</span>
