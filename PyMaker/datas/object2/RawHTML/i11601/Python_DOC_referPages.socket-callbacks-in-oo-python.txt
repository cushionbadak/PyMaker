<div class="post-text" itemprop="text">
<p>As a python newbe i exercise through a couple of tasks and came across a sample code for an "echo server". I wrapped the code into an object oriented fashion and only then stumbled upon the following question: Since the example code uses selectors (which make use of callback methods) to multiplex the io - can I keep my object oriented approach and have the callback methods as members of my class definition?</p>
<p>This snippet is from my class definition:</p>
<pre><code>def accept(self, sock, mask):
    conn, addr = sock.accept()  # Should be ready
    self.log.info('New connection from ' + str(addr))
    conn.setblocking(False)
    read_wrapper = lambda x, y: self.accept(x, y)
    self.sel.register(conn, selectors.EVENT_READ, read_wrapper)

def read(self, conn, mask):
    data = conn.recv(1000)  # Should be ready
    if data:
        log.info('echoing %d bytes to %s' % (sys.getsizeof(data), conn.getpeername()))
        conn.send(data)  # Hope it won't block
    else:
        log.info('closing connection to ' + str(conn.getpeername()))
        self.sel.unregister(conn)
        conn.close()

def run(self):
    sock = socket.socket()
    sock.setblocking(False)
    sock.bind((self.server_name, self.server_port))
    sock.listen(10)
    accept_wrapper = lambda x, y: self.accept(x, y)
    self.sel.register(sock, selectors.EVENT_READ, accept_wrapper)

    self.log.info('echo server up on %s:%d' % (self.server_name, self.server_port))

    while True:
        events = self.sel.select()
        for key, mask in events:
            callback = key.data
            callback(key.fileobj, mask)
</code></pre>
<p>I have tried to solve the issue with lambda (read_wrapper and accept_wrapper) with no luck - since i get this Traceback:</p>
<pre><code>Traceback (most recent call last):
  File "echo.py", line 141, in &lt;module&gt;
    app.run()
  File "echo.py", line 127, in run
    callback(key.fileobj, mask)
  File "echo.py", line 100, in &lt;lambda&gt;
    read_wrapper = lambda x, y: self.accept(x, y)
  File "echo.py", line 97, in accept
    conn, addr = sock.accept()  # Should be ready
  File "/usr/lib/python3.4/socket.py", line 187, in accept
    fd, addr = self._accept()
OSError: [Errno 22] Invalid argument
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't know if its the best solution or a solution at all, but it works with closures</p>
<pre><code>def run(self):
    sock = socket.socket()
    sock.setblocking(False)
    sock.bind((self.server_name, self.server_port))
    sock.listen(10)

    def read(conn, mask):
        data = conn.recv(1000)  # Should be ready
        if data:
            self.log.info('echoing %d bytes to %s' % (sys.getsizeof(data), conn.getpeername()))
            conn.send(data)  # Hope it won't block
        else:
            self.log.info('closing connection to ' + str(conn.getpeername()))
            self.sel.unregister(conn)
            conn.close()

    def accept(sock, mask):
        conn, addr = sock.accept()  # Should be ready
        self.log.info('New connection from ' + str(addr))
        conn.setblocking(False)
        self.sel.register(conn, selectors.EVENT_READ, read)

    self.sel.register(sock, selectors.EVENT_READ, accept)

    self.log.info('echo server up on %s:%d' % (self.server_name, self.server_port))

    while True:
        events = self.sel.select()
        for key, mask in events:
            callback = key.data
            callback(key.fileobj, mask)
</code></pre>
</div>
<span class="comment-copy">What is <code>self.sel</code>?</span>
<span class="comment-copy">I found that for answering the question it was not important to have the whole class definition at hand. However i have created a pastebin ( <a href="http://pastebin.com/h35HfAX8" rel="nofollow noreferrer">pastebin.com/h35HfAX8</a> ). self.sel refers to a "DefaultSelector" (see <a href="https://docs.python.org/3/library/selectors.html#selectors.DefaultSelector" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a> )</span>
