<div class="post-text" itemprop="text">
<p>Suppose a dictionary is expected to have certain keys present. Is there a simple way of adding these specific keys with default values if they are missing?</p>
<p>For example:</p>
<pre><code>default_dict = {'name': '', 'height': 100, 'age': 20} 

d = {'name': 'James', 'age': 65}
d.set_defaults(default_dict)
</code></pre>
<p>would update the dictionary <code>d</code> to</p>
<pre><code>{'name': 'James', 'age': 65, 'height': 100}
</code></pre>
<p>where the original values of <code>d</code> are kept and only the missing keys are added.</p>
<p>The <code>default_dict</code> should not be destroyed in the process.</p>
</div>
<div class="post-text" itemprop="text">
<p>To update an existing dictionary, I might use the dictionary's <code>setdefault</code> method:</p>
<pre><code>for key, value in dict_of_defaults.items():
    dict_maybe_without_defaults.setdefault(key, value)
</code></pre>
<p>If I was creating a new dictionary where I had a small number of keys, I'd probably do something more along the lines of the solution that was posted by Martijn.</p>
</div>
<div class="post-text" itemprop="text">
<p>Create a copy of the defaults, and update it with <code>d</code>; if all keys in <code>d</code> are strings, you can do so with one <code>dict()</code> call:</p>
<pre><code>d = dict(default_dict, **d)
</code></pre>
<p>For dictionaries with non-string keys, you'd use two steps:</p>
<pre><code>d = default_dict.copy()
d.update({'name': 'James', 'age': 65})
</code></pre>
<p>or you could use a loop to update <code>d</code> with any keys not present using dictionary views; this is not as fast however:</p>
<pre><code>d = {'name': 'James', 'age': 65}
d.update((k, default_dict[v]) for k in default_dict.viewkeys() - d)
</code></pre>
<p>Replace <code>viewkeys</code> with <code>keys</code> in Python 3.</p>
<p>If you are using Python 3.5 or newer, you can use similar syntax to create a new dictionary:</p>
<pre><code>d = {**default_dict, 'name': 'James', 'age': 65}
</code></pre>
<p>The key-value pairs of <code>default_dict</code> are applied first, followed by whatever new keys you set; these will override the old. See <a href="https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations" rel="nofollow"><em>PEP 448 - Additional Unpacking Generalizations</em></a> in the 3.5 What's New documentation.</p>
<p>Any of the methods creating a new dictionary can update an existing dictionary simply by wrapping in a <code>dict.update()</code> call. So the first could update <code>d</code> in-place with:</p>
<pre><code>d.update(dict(default_dict, **d))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may consider using a <a href="https://docs.python.org/3/library/collections.html#collections.ChainMap" rel="nofollow"><code>collections.ChainMap</code></a> to associate a fallback:</p>
<pre><code>import collections

default_dict = {'name': '', 'height': 100, 'age': 20} 

d = collections.ChainMap({'name': 'James', 'age': 65},default_dict)

&gt;&gt;&gt; d
ChainMap({'name': 'James', 'age': 65}, {'name': '', 'height': 100, 'age': 20})
&gt;&gt;&gt; dict(d) #this flattens the map but isn't necessary for it to work
{'name': 'James', 'height': 100, 'age': 65}
</code></pre>
<p>Also note that since all mutating methods will only modify the first mapping <code>default_dict</code> is safe from <code>pop</code> or other methods.</p>
</div>
<span class="comment-copy">just do the update the other way around</span>
<span class="comment-copy">@njzk2 The question says that <code>default_dict</code> should not be destroyed.</span>
<span class="comment-copy">make a copy of it</span>
<span class="comment-copy">On 3.5, this can also be done as <code>{**default_dict, **d}</code>, with no restriction to string keys.</span>
<span class="comment-copy">@user2357112: yup, was looking up the docs again; this is easiest applied directly to the literal for <code>d</code>.</span>
<span class="comment-copy">I'm pretty sure there's a comment somewhere on the internet where Guido calls the <code>dict(mapping, **othermapping)</code> "despicable" -- Though perhaps he's loosened his stance on it since then? <a href="http://stackoverflow.com/a/26853961/748858">stackoverflow.com/a/26853961/748858</a></span>
<span class="comment-copy">@mgilson: hey, what can I say, it's a natural extension of the <code>dict()</code> function signature and <code>**kw</code> expansion in calls.</span>
<span class="comment-copy">These solutions create a new dictionary, but how to update the existing one?</span>
