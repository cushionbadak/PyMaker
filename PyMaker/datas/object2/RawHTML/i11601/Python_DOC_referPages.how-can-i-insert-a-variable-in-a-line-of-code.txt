<div class="post-text" itemprop="text">
<p>I want to let the user to choose which file to open using a string variable. Basically I want to learn how can I tell Python to use a variable in a code section.</p>
<p>I have the following code:</p>
<pre><code>def call_file(fn1):
    import fn1

filename = input("Name of the file to import")
call_file(filename)
</code></pre>
<p>And inside the same folder i have the helloWorld.py with:</p>
<pre><code>print("hello world")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As you have found, the <code>import</code> statement does not accomplish what you need. Try this instead:</p>
<pre><code>from importlib import import_module

def call_file(fn1):
    return import_module(fn1)

filename = input("Name of the file to import: ")
usermodule = call_file(filename)
</code></pre>
<p>The <code>import_module</code> function allows you to import a module given as an argument.  The <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow">python docs</a> have more information on this function.</p>
<h3>Example</h3>
<p>Running under <code>ipython</code>, we can use the code above to import the <code>os</code> module and access it under the name <code>usermodule</code>:</p>
<pre><code>In [3]: run t.py
Name of the file to import: os
In [4]: usermodule.stat('t.py')
Out[4]: os.stat_result(st_mode=33200, st_ino=97969455, st_dev=2066, st_nlink=1, st_uid=5501, st_gid=5501, st_size=196, st_atime=1462081283, st_mtime=1462081283, st_ctime=1462081283)
</code></pre>
<h3>Improvement</h3>
<p>If the file the user asks for cannot be imported, the code should handle the error, possibly like this:</p>
<pre><code>try:
    usermodule = call_file(filename)
except ImportError:
    print('Sorry, that file could not be imported.')
</code></pre>
<h3>Alternative</h3>
<p>It is also possible to import modules from a variable name using <code>__import__</code>:</p>
<pre><code>&gt;&gt;&gt; mod = 'math'
&gt;&gt;&gt; new = __import__(mod)
&gt;&gt;&gt; new.cos(0)
1.0
</code></pre>
<p>Note, however, that the <a href="https://docs.python.org/3/library/functions.html#__import__" rel="nofollow">python documentation</a> frowns on this:</p>
<blockquote>
<p>Direct use of <code>__import__()</code> is also discouraged in favor of
  <code>importlib.import_module()</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You could also use the sys module to achieve the same effect as importing a module as some other name.</p>
<pre><code>import sys

def my_import(name):
    __import__(name)
    return sys.modules[name]

module = my_import('random') #just for testing
print module.randint(0,1) #just for testing
</code></pre>
<p>Below code can be used to grab module at certain depths!</p>
<pre><code>def my_import(name):
    m = __import__(name)
    for n in name.split(".")[1:]:
        m = getattr(m, n)
    return m

m = __import__("xml.etree.ElementTree") # returns xml
m = my_import("xml.etree.ElementTree") # returns ElementTree
</code></pre>
</div>
<span class="comment-copy">What do you mean by <i>tell Python to use a variable in a code section</i>?</span>
<span class="comment-copy">Your question is not clear. I think you are already letting users choose the file they want to by using input.</span>
<span class="comment-copy">This would appear to successfully import a file based on user I/O as long as the file existed. What's the question?</span>
<span class="comment-copy">@SnehalShekatkar exactly, that was my question. I would really appreciate it if you help me. :)</span>
<span class="comment-copy">Fortunately for you, John1024 figured out your problem; your question should be much clearer, though. First, <i>always</i> include your error message (if you have one) in your question; you should <i>not</i> be putting it in the comments in response to requests for clarification. Second, in this case, your question doesn't make any sense; your real problem is how the import statement works, not how variable scoping works. You should be asking something like "why doesn't this import statement using a variable work".</span>
<span class="comment-copy">Should this not be inside a <code>try</code>, in case the user types in name that doesn't exist?</span>
<span class="comment-copy">@Sнаđошƒаӽ OK.  I added an example of error handling.</span>
<span class="comment-copy">The only issue I see with this method is that the module will only exist within the scope of the variable and not in sys.modules[name]. You can check using    <code>modulenames = set(sys.modules)&amp;set(globals())     allmodules = [sys.modules[name] for name in modulenames]</code> This would only become necessary assuming the program needed to later check a list of all imported modules but based on the OP I assume he will!</span>
