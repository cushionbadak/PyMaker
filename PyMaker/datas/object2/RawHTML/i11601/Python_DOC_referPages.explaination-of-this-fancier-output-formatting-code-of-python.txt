<div class="post-text" itemprop="text">
<p>What does this code do?</p>
<pre><code>for x in range(1,11):
    print('{0:2d} {1:3d} {2:4d}'.format(x,x**2,x**3))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>0: | 1: | 2:  =&gt; The position in the arg list from which to get 
                 the value.  The order can be anything you want, and
                 you can repeat values, e.g. '{2:...} {0:...} {1:...} {0:...}' 

2 | 3 | 4     =&gt; The minimum width of the field in which to display 
                 the value.  Right justified by default for numbers.


d             =&gt; The value must be an integer and it will displayed in 
                 base 10 format (v. hex, octal, or binary format)
</code></pre>
<p>Here's an example:</p>
<pre><code>s = "{2:2d}\n{0:3d}\n{1:4d}".format(2, 4, 6)
print(s)

--output:--
 6
  2
   4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's make it simpler:</p>
<p>We have three variables that we want to print them:</p>
<pre><code>&gt;&gt;&gt; x = 1
&gt;&gt;&gt; y = 2
&gt;&gt;&gt; z = 3
</code></pre>
<p>We can use format method to have a clean output:</p>
<p>The first number in each brace (before <code>:</code> character), is index of variable in the <code>format</code> function parentheses:</p>
<pre><code>&gt;&gt;&gt; print('{0:2d} {1:3d} {2:4d}'.format(x,y,z))
 1   2    3
&gt;&gt;&gt; print('{2:2d} {1:3d} {0:4d}'.format(x,y,z))
 3   2    1
</code></pre>
<p>The second number in braces (the number after <code>:</code> character) is the minimum width of the field in which to display the value.  Right justified by default: </p>
<pre><code>&gt;&gt;&gt; print('{2:2d} {1:3d} {0:4d}'.format(x,y,z))
 3   2    1
&gt;&gt;&gt; print('{2:5d} {1:5d} {0:5d}'.format(x,y,z))
    3     2     1
&gt;&gt;&gt; print('{2:10d} {1:10d} {0:10d}'.format(x,y,z))
         3          2          1
&gt;&gt;&gt; 
</code></pre>
<p>And the <code>d</code> mean Decimal Integer. Outputs the number in base 10:</p>
<pre><code>&gt;&gt;&gt; print('{2:1f} {1:10f} {0:10d}'.format(x,y,z))
3.000000   2.000000          1
&gt;&gt;&gt; print('{2:1d} {1:10d} {0:10f}'.format(x,y,z))
3          2   1.000000
&gt;&gt;&gt; 
</code></pre>
<p><em><code>f</code> for float and <code>o</code> for octal and etc.</em></p>
</div>
<span class="comment-copy">Read the docs <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">docs</a>!</span>
<span class="comment-copy"><i>The second number in braces (the number after : character) stands for white-spaces we want to have before printing next variable</i>--Nope.  The output of <code>print "{0:2}{1:2}{2:2}".format(10, 20, 30)</code> is <code>102030</code>.</span>
<span class="comment-copy">@7stud You were right again. Thank you. I borrowed a bunch of sentences from your answer :)</span>
