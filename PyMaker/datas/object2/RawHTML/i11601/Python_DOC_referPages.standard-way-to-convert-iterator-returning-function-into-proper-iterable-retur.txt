<div class="post-text" itemprop="text">
<p>To avoid confusion, let me <em>define</em>:</p>
<blockquote>
<p><em>proper iterable</em>: an iterable object that is not an iterator.</p>
</blockquote>
<hr/>
<p><strong>Q:</strong> Does Python's Standard Library already provide a way to convert an "iterator-returning function" into a "<em>proper iterable</em>-returning function"?</p>
<hr/>
<p>I thought I'd seen this somewhere, but now I can't find it.  In particular, I scanned through the docs for <code>itertools</code>, but did not spot it.</p>
<hr/>
<p>FWIW, this homegrown implementation seems to work:</p>
<pre><code>def to_iterable_maker(iterator_maker):

    def iterable_maker(*args, **kwargs):
        class nonce_iterable(object):
            def __iter__(self):
                return iterator_maker(*args, **kwargs)
        return nonce_iterable()

    return iterable_maker
</code></pre>
<p>...but the one-time <code>nonce_iterable</code> class in there looks clumsy to me.  I'm sure an implementation of such a thing from the Standard Library would be a lot better.</p>
<hr/>
<p><strong>@Nikita</strong></p>
<p>Try this:</p>
<pre><code>import itertools

base = range(3)
poops_out = itertools.permutations(base)

print list(poops_out)
# [(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]

print list(poops_out)
# []

myperms = to_iterable_maker(itertools.permutations)
keeps_going = myperms(base)

print list(keeps_going)
# [(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]

print list(keeps_going)
# [(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]

print list(keeps_going)
# [(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]
</code></pre>
<p>There <em>is</em> a difference between the values returned by <code>itertools.permutations</code> and <code>to_iterable_maker(itertools.permutations)</code>.  My question is: does the Standard Library already provide something analogous to <code>to_iterable_maker</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't make sense - "iterator-returning function" into an "iterable returning function". If a function is returning an iterator, then it's already returning an iterable, because iterators are iterables as they are required to have <code>__iter__</code> method.</p>
<p>From <a href="https://docs.python.org/3/glossary.html" rel="nofollow">the docs</a>:</p>
<blockquote>
<p><strong>iterable</strong></p>
<p>An object capable of returning its members one at a time. Examples of
  iterables include all sequence types (such as list, str, and tuple)
  and some non-sequence types like dict, file objects, and objects of
  any classes you define with an <code>__iter__</code>() or <code>__getitem__</code>() method.
  Iterables can be used in a for loop and in many other places where a
  sequence is needed (zip(), map(), ...). When an iterable object is
  passed as an argument to the built-in function iter(), it returns an
  iterator for the object. This iterator is good for one pass over the
  set of values. When using iterables, it is usually not necessary to
  call iter() or deal with iterator objects yourself. The for statement
  does that automatically for you, creating a temporary unnamed variable
  to hold the iterator for the duration of the loop. See also iterator,
  sequence, and generator.</p>
<p><strong>iterator</strong></p>
<p>An object representing a stream of data. Repeated calls to the
  iteratorâ€™s <code>__next__</code>() method (or passing it to the built-in function
  next()) return successive items in the stream. When no more data are
  available a StopIteration exception is raised instead. At this point,
  the iterator object is exhausted and any further calls to its
  <code>__next__</code>() method just raise StopIteration again. </p>
<p><strong>Iterators are required to have an <code>__iter__</code>() method that returns the iterator object itself so every iterator is also iterable</strong> </p>
<p>and may be used in most places where other iterables are accepted. One
  notable exception is code which attempts multiple iteration passes. A
  container object (such as a list) produces a fresh new iterator each
  time you pass it to the iter() function or use it in a for loop.
  Attempting this with an iterator will just return the same exhausted
  iterator object used in the previous iteration pass, making it appear
  like an empty container.</p>
</blockquote>
<p><strong>UPD</strong>: </p>
<p>What I mean is...</p>
<p>(Showing by steps to compare)</p>
<p><strong>Case 1</strong>:</p>
<ol>
<li><code>f = to_iterable_maker(iterator_maker)</code>;</li>
<li><code>i = f(some_var)</code>, <code>i</code> is <code>nonce_iterable</code> with <code>__iter__</code>;</li>
<li><code>j = iter(i)</code>, <code>j</code> is iterator returned by <code>iterator_maker(some_var)</code>;</li>
<li><code>next(j)</code>, returns some value dependent on <code>some_var</code>.</li>
</ol>
<p><strong>Case 2</strong>:</p>
<ol>
<li><code>f = iterator_maker</code>;</li>
<li><code>i = f(some_var)</code>, <code>i</code> is iterator equal to <code>iterator_maker(some_var)</code>, which has <code>__iter__</code> (per iterator protocol);</li>
<li><code>j = iter(i)</code>, <code>j</code> is iterator returned by <code>iterator_maker(some_var)</code>, because calling <code>__iter__</code> on iterator returns itself, so <code>j is i</code> returns <code>true</code>;</li>
<li><code>next(j)</code>, returns some value dependent on <code>some_var</code>.</li>
</ol>
<p>As you can see, nothing really changes, except for additional complications on the preparation step.</p>
<p>May be you could provide additional information on what you are trying to achieve by such 'wrapping', to understand the real issue.</p>
<p>As per your question, I can't think of any library function, that would turn iterator into iterable, because it already is. If you are trying to duplicate iterators may be take a look at <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow"><code>itertools.tee()</code></a>.</p>
<p><strong>UPD2</strong>:</p>
<p>So, now I see, that the goal is to convert single-pass iterator to multi-pass iterator...</p>
<p>My answer to:</p>
<blockquote>
<p>"does the Standard Library already provide something analogous to
  to_iterable_maker?"</p>
</blockquote>
<p>is "No". But the closest is <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow"><code>itertools.tee()</code></a>, which can help you clone a single iterator into several, that you can use after. Regarding your example:</p>
<pre><code>import itertools

base = range(3)
poops_out = itertools.permutations(base)

iterators = itertools.tee(poops_out, 4)

#You shouldn't use original iterator after clonning, so make it refer to a clone
#to be used again, otherwise ignore the following line
poops_out, iterators = iterators[0], iterators[1:]

for it in iterators:
    print list(it)

#Prints:
#[(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]
#[(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]
#[(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]
</code></pre>
<p>Another common way to get iterable from iterator is to convert it using <code>list()</code> or <code>tuple()</code>, which will allow multi-pass:</p>
<pre><code>import itertools

base = range(3)

poops_out = itertools.permutations(base)

#Obviously poops_out gets consumed at the next line, so it won't iterate anymore
keeps_going = tuple(poops_out)

print list(poops_out)
# []

print list(poops_out)
# []

print list(keeps_going)
# [(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]

print list(keeps_going)
# [(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]

print list(keeps_going)
# [(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]
</code></pre>
<p>Both methods described above might be heavy on memory usage, so sometimes it's not an option. In that case a solution you came to will work well. Another implemetation, which I could think of, and which is a little bit more object-oriented, but otherwise not much different from yours:</p>
<pre><code>class IterableMaker(object):
    '''Wraps function returning iterator into "proper" iterable'''

    def __init__(self, iterator_maker):
        self.f = iterator_maker

    def __call__(self, *args, **kwargs):
        self.args = args
        self.kwargs = kwargs
        return self

    def __iter__(self):
        return self.f(*self.args, **self.kwargs)
</code></pre>
<p>the use is the same:</p>
<pre><code>import itertools

class IterableMaker(object):

    def __init__(self, iterator_maker):
        self.f = iterator_maker

    def __call__(self, *args, **kwargs):
        self.args = args
        self.kwargs = kwargs
        return self

    def __iter__(self):
        return self.f(*self.args, **self.kwargs)

base = range(3)
poops_out = itertools.permutations(base)

print list(poops_out)
# [(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]

print list(poops_out)
# []

my_perm = IterableMaker(itertools.permutations)

keeps_going = my_perm(base)

print list(keeps_going)
# [(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]

print list(keeps_going)
# [(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]

print list(keeps_going)
# [(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]
</code></pre>
</div>
<span class="comment-copy">You seem confused, All iterators in python are iterable. The fact that the <code>__iter__</code> method is an identity function is unimportant. Are you trying to make a iterable that is <b>iterable more than once</b>?</span>
<span class="comment-copy">Is there a specific problem that you're trying to solve with this?</span>
<span class="comment-copy">Your "iterable maker" will just invoke the original iterator over and over again. Alternatively, maybe you could use <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow noreferrer"><code>itertools.tee</code></a>?</span>
<span class="comment-copy">Per DSM's suggestion, I have updated my question to "upgrade" the original's footnote to the post's body.  Please read this update.  Also, see the code I provided.  Even if you object to my question's wording, the code I provided is unambiguous.  The question boils down to: does the Standard Library already have a function that does what <code>to_iterable_maker</code> does, or supports this functionality in some other way?</span>
<span class="comment-copy">@kjo, as I see it you're trying to wrap and iterator to make it iterable. Please, see answer update.</span>
<span class="comment-copy">I've edited my post, just for you.</span>
<span class="comment-copy">@kjo, not it's clearer what you are trying to achieve - basicly, you want to convert a single-pass iterator to a multi-pass iterator. I was close to this with proposing <code>itertools.tee()</code>. See answer update. Note: My whole answer is just for you, though I hope others would benefit from it too.</span>
