<div class="post-text" itemprop="text">
<p>I'm in the process of becoming familiar with Python and I'm looking at basic manipulation of "lists" currently.</p>
<p>So here's my problem.</p>
<p>I have a list of lists which contains mostly "string" class elements aside from two integers:
Suppose I want to remove only the integer class element so I'm left with an otherwise unaltered list of lists containing only the string elements:</p>
<p>i.e. My original list is the following:</p>
<pre><code>    listoflists=[['Juice', 'Pizza', 'Potatoes', 'Bananas', 5, 10],
 ['eggs', 'ham', 'chicken', 'Pineapple'],
 'Onions']
</code></pre>
<p>and I want this to become the following:</p>
<pre><code>listoflist=[['Juice', 'Pizza', 'Potatoes', 'Bananas'],
 ['eggs', 'ham', 'chicken', 'Pineapple'],
 'Onions']
</code></pre>
<p>Thus far I've found out how to remove integer class element from a singular list with the following:</p>
<pre><code> no_integer_list = [x for x in listA if not isinstance(x, int)]
</code></pre>
<p>But I'm struggling to get my head around how to apply this to a list of lists.</p>
<p>I was thinking of  making a for loop to read each list within the multilist and apply the above code to each, but I'm not sure how to do this.</p>
<p>Any help with this will be much appreciated.
Many thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that you only have one level of sublists (and your last element is a list and not a string), you could use a nested list comprehension like so </p>
<pre><code>filtered = [[x for x in sublist if not isinstance(x, int)] for sublist in listoflists]
</code></pre>
<p><strong>Outputs</strong>:</p>
<pre><code>[['Juice', 'Pizza', 'Potatoes', 'Bananas'], ['eggs', 'ham', 'chicken', 'Pineapple'], ['Onions']]
</code></pre>
<hr/>
<p>If your last element is intentionally a string (or could possibly be an <code>int</code>), I would scrap the messy one liners and just write a simple function like so</p>
<pre><code>def filter_list(listoflists):
    newlist = []
    for element in listoflists:
        if isinstance(element, list):
            newlist.append([x for x in element if not isinstance(x, int)])
        elif isinstance(element, int):
            continue
        else:
            newlist.append(element)
    return newlist
</code></pre>
<p>Note that this is designed to simply remove all <code>int</code> types- other types will remain. If you want to only retain strings and discard all other types, you could use stop using the negation and have</p>
<pre><code>def filter_list(listoflists):
    newlist = []
    for element in listoflists:
        if isinstance(element, list):
            newlist.append([x for x in element if isinstance(x, str)])
        elif isinstance(element, str):
            newlist.append(element)
    return newlist 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You approach is completly fine, but you need to do it for every sublist by using the <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow">map()</a> function or a list comprehension.</p>
<pre><code>&gt;&gt;&gt; l = [['Juice', 'Pizza', 'Potatoes', 'Bananas', 5, 10], ['eggs', 'ham', 'chicken', 'Pineapple'], 'Onions']
&gt;&gt;&gt; map(lambda x: filter(lambda y: not isinstance(y,int),x),l)
[['Juice', 'Pizza', 'Potatoes', 'Bananas'], ['eggs', 'ham', 'chicken', 'Pineapple'], 'Onions']
</code></pre>
<p>Instead of using filter() and map(), you can also use the equivalent list comprehension method.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; [[i for i in item if not isinstance(i, int)] if isinstance(item, list) else item for item in listoflists]
[['Juice', 'Pizza', 'Potatoes', 'Bananas'],
 ['eggs', 'ham', 'chicken', 'Pineapple'],
 'Onions']
</code></pre>
<p><strong>UPDATE:</strong> just for completeness if you outer list also has integers and you want to remove those too:</p>
<pre><code>[[i for i in item if not isinstance(i, int)] if isinstance(item, list) else item 
 for item in listoflists if not isinstance(item, int)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A flexible recursive solution for any number of nested levels (even varying depths) and for both lists and tuples (output will be list though):</p>
<pre><code>eliminate_int = lambda l: [eliminate_int(x) if isinstance(x, list) or isinstance(x, tuple) \
                           else x for x in l if not isinstance(x, int)]

listoflists=[ ['Juice', 'Pizza', 'Potatoes', 'Bananas', 5, 10],
              ['eggs', 'ham', 'chicken', 'Pineapple'],
              'Onions' ]

print(eliminate_int(listoflists))
</code></pre>
<p>Output:</p>
<pre><code>[['Juice', 'Pizza', 'Potatoes', 'Bananas'], ['eggs', 'ham', 'chicken', 'Pineapple'], 'Onions']
</code></pre>
<p><a href="http://ideone.com/YeffNF" rel="nofollow">See this code running on ideone.com</a></p>
</div>
<span class="comment-copy">How deep are your sublists? Only 1 level?</span>
<span class="comment-copy">Yes, one level only</span>
<span class="comment-copy">Is your last element intentionally a string?</span>
<span class="comment-copy">Yes, I would like the program to discriminate integers only and assume everything else can be left in regardless of type.</span>
<span class="comment-copy">Mind explaining the downvote? :/</span>
<span class="comment-copy">Last element is not a list but just a string.</span>
<span class="comment-copy">It still doesn't work, check my comment on AKS's answer.</span>
<span class="comment-copy">@Kasramvd Edited :)</span>
<span class="comment-copy">Many thanks @DonkeyKong, you appear to think the same way I do. :-)</span>
<span class="comment-copy">This doesn't work of the single items outside the nested lists are integer.</span>
<span class="comment-copy">But that is not the use case I see in the question? And the code exactly results into what the user wants.</span>
<span class="comment-copy">@Kasramvd I edited the answer just to catch that use case.</span>
<span class="comment-copy">Like you say @AKS, it did the job i needed. Thanks, much appreciated. It would like Kasramvd said, be useful to see some code that could remove integers outsside of the nested lists too.</span>
<span class="comment-copy">@Nathan: You can look at the updated code.</span>
