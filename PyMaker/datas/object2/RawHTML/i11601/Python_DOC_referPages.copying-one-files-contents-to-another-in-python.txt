<div class="post-text" itemprop="text">
<p>I've been taught the best way to read a file in python is to do something like:</p>
<pre><code>with open('file.txt', 'r') as f1:
    for line in f1:
        do_something()
</code></pre>
<p>But I have been thinking.  If my goal is to copy the contents of one file completely to another, are there any dangers of doing this:</p>
<pre><code>with open('file2.txt', 'w+') as output, open('file.txt', 'r') as input:
    output.write(input.read())
</code></pre>
<p>Is it possible for this to behave in some way I don't expect?</p>
<p>Along the same lines, how would I handle the problem if the file is a binary file, rather than a text file.  In this case, there would be no newline characters, so <code>readline()</code> or <code>for line in file</code> wouldn't work (right?).</p>
<p><strong>EDIT</strong> Yes, I know about <code>shutil</code>.  There are many better ways to copy a file if that is exactly what I want to do.  I want to know about the potential risks, if any, of this approach specifically, because I may need to do more advanced things than simply copying one file to another (such as copying several files into a single one).</p>
</div>
<div class="post-text" itemprop="text">
<p>The only potential problem with your <code>output.write(input.read())</code> version is if the size of the file is too large to hold all of it in memory. You can use a loop that reads smaller batches.</p>
<pre><code>with open('file2.txt', 'wb+') as output, open('file.txt', 'rb') as input:
    while True:
        data = input.read(100000)
        if data == '':  # end of file reached
            break
        output.write(data)
</code></pre>
<p>This will work for both text and binary files. But you need to add the <code>b</code> modifier to the modes for portable operation on binary files.</p>
</div>
<div class="post-text" itemprop="text">
<p>Please note that the <code>shutil</code> module also contains <a href="https://docs.python.org/3/library/shutil.html#shutil.copyfileobj" rel="nofollow noreferrer">copyfileobj()</a>, basically implemented like Barmar's answer.</p>
<p>Or, to answer your question:</p>
<pre><code>from shutil import copyfileobj

with open('file2.txt', 'w+') as output, open('file.txt', 'r') as input:
    copyfileobj(input, output)
</code></pre>
<p>would be my suggestion. It avoids re-implementing the buffering mechanism and, should the implementation of the standard library improve, your code wins as well.</p>
<hr/>
<p>On Unix, there also is a syscall for copying data from one file descriptor to another. It is called <a href="http://man7.org/linux/man-pages/man2/sendfile.2.html" rel="nofollow noreferrer">sendfile</a> and used mostly for sending data from an open file to a socket (serving HTTP requests, etc.).</p>
<p>You could use it for copying data between regular files as well though.
By using a syscall the kernel copies the content without the need of copying buffers to and from userland.</p>
<p>There is a python package, <a href="https://github.com/giampaolo/pysendfile" rel="nofollow noreferrer">pysendfile</a>, implementing it. You could use it like:</p>
<pre><code>from sendfile import sendfile
import os.path

with open('file2.txt', 'w+') as output, open('file.txt', 'r') as input:
    offset = 0
    input_size = os.path.getsize('file.txt')
    sendfile(output.fileno(), input.fileno(), offset, input_size)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While this may not completely answer your question, but for plain copying without any other processing of file contents, you should consider other means, e.g. the <a href="https://docs.python.org/2/library/shutil.html" rel="nofollow"><code>shutil</code></a> module:</p>
<pre><code>shutil.copy('file.txt', 'file2.txt')
</code></pre>
</div>
<span class="comment-copy">You can use multiple context managers in a single line, you know?</span>
<span class="comment-copy">if your goal is to copy contents of a file, use <a href="https://docs.python.org/2/library/shutil.html#shutil.copyfile" rel="nofollow noreferrer">docs.python.org/2/library/shutil.html#shutil.copyfile</a></span>
<span class="comment-copy">@jonrsharpe how?</span>
<span class="comment-copy">@nathan.meadows I'm imagining a situation where I have to do something more complicated, such as copy several files into 1, for example</span>
<span class="comment-copy"><code>with open('file2.txt', 'w+') as output, open('file.txt', 'r') as input:</code></span>
<span class="comment-copy">Need to change 'w+' and 'r' to 'wb' and 'rb' respectively for binary files.</span>
