<div class="post-text" itemprop="text">
<p>I created a text file and opened it in Python using:</p>
<pre><code>for word_in_line in open("test.txt"):
</code></pre>
<p>To loop through the words in a line in txt file.</p>
<p>The text file only has one line, which is:</p>
<pre><code>int 111 = 3 ;
</code></pre>
<p>When I make a list using <code>.split()</code>:</p>
<pre><code>print("Input: {}".format(word_in_line))
line_list = word_in_line.split() 
</code></pre>
<p>It creates:</p>
<pre><code> ['int', '111', '=', '3', ';']
</code></pre>
<p>And I was looking for a way to check if <code>line_list[1]</code> (<code>'111'</code>) is an integer.</p>
<p>But when I try <code>type(line_list[1])</code>, it says that its <code>str</code> because of <code>''</code>.</p>
<p>My goal is to read through the txt file and see if it is integer or str or other data type, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you have in your list <em>is</em> a string. So the type coming is correct and expected.</p>
<p>What you are looking to do is check to see if what you have are all digits in your string. So to do that use the <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer">isdigit</a> string method:</p>
<pre><code>line_list[1].isdigit()
</code></pre>
<p>Depending on what exactly you are trying to validate here, there are cases where all you want are purely digits, where this solution provides exactly that. </p>
<p>There could be other cases where you want to check whether you have some kind of number. For example, <code>10.5</code>. This is where <code>isdigit</code> will fail. For cases like that, you can take a look at <a href="https://stackoverflow.com/a/36805860/1832539">this</a> answer that provides an approach to check whether you have a <code>float</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I don't agree with the above answer.</p>
<p>Any string parsing like @idjaw's answer of <code>line_list[1].isdigit()</code> will fail on an odd edge case. For example, what if the number is a float and like .50 and starts with a dot? The above approach won't work. Technically we only care about ints in this example so this won't matter, but in general it is dangerous. </p>
<p>In general if you are trying to check whether a string is a valid number, it is best to just try to convert the string to a number and then handle the error accordingly. </p>
<pre><code>def isNumber(string):
    try:
        val = int(string)
        return True
    except ValueError:
        return False
</code></pre>
</div>
<span class="comment-copy">Thank you! &lt;3 I appreciate it.</span>
<span class="comment-copy">@KevinJ.Chase Thanks for the heads up. I seemed to have forgotten to link the correct answer. FWIW, it was in fact the other answer in this question.</span>
<span class="comment-copy">OK. But I don't think it is downvotable. That is a bit harsh. I get what you are doing, and this is a great approach. If anything, I could have added this as well. So my answer can be more complete. But it is not incorrect.</span>
<span class="comment-copy">I un-downvoted you. Maybe it was harsh about a technicality but I really would advise against using that method of testing whether something is an int.</span>
<span class="comment-copy">Sure. You are right. FWIW this approach to answer this was to keep it simple for the OP considering they were just starting out. This has nothing to do with my own personal way of testing things. Good answer.</span>
<span class="comment-copy">Speaking of technicalities, <code>true</code> and <code>false</code> aren't reserved keywords Python. <code>True</code> and <code>False</code> are :).</span>
<span class="comment-copy"><code>'-111'.isdigit()</code> will return <code>False</code>.  If @Eric needs to allow <i>negative</i> integers, he will need to use <code>int</code>.</span>
