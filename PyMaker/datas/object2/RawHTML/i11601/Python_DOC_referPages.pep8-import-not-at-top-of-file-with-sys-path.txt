<div class="post-text" itemprop="text">
<h1>Problem</h1>
<p>PEP8 has a rule about putting imports at the top of a file:</p>
<blockquote>
<p>Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants.</p>
</blockquote>
<p>However, in certain cases, I might want to do something like:</p>
<pre><code>import sys
sys.path.insert("..", 0)

import my_module
</code></pre>
<p>In this case, the <code>pep8</code> command line utility flags my code:</p>
<blockquote>
<p>E402 module level import not at top of file</p>
</blockquote>
<p>What is the best way to achieve PEP8 compliance with <code>sys.path</code> modifications?</p>
<h1>Why</h1>
<p>I have this code because I'm following <a href="https://github.com/kennethreitz/samplemod">the project structure</a> given in <a href="http://docs.python-guide.org/en/latest/writing/structure/#structure-of-the-repository">The Hitchhiker's Guide to Python</a>.</p>
<p>That guide suggests that I have a <code>my_module</code> folder, separate from a <code>tests</code> folder, both of which are in the same directory. If I want to access <code>my_module</code> from <code>tests</code>, I think I need to add <code>..</code> to the <code>sys.path</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Often I have multiple files with tests in a subdirectory <code>foo/tests</code> of my project, while the modules I'm testing are in <code>foo/src</code>. To run the tests from <code>foo/tests</code> without import errors I create a file <code>foo/tests/pathmagic.py</code> that looks like this;</p>
<pre><code>"""Path hack to make tests work."""

import os
import sys

bp = os.path.dirname(os.path.realpath('.')).split(os.sep)
modpath = os.sep.join(bp + ['src'])
sys.path.insert(0, modpath)
</code></pre>
<p>In every test file, I then use</p>
<pre><code>import pathmagic  # noqa
</code></pre>
<p>as the first import. The "noqa" comment prevents <code>pycodestyle</code>/<code>pep8</code> from complaining about an unused import.</p>
</div>
<div class="post-text" itemprop="text">
<p>If there are just a few imports, you can just ignore PEP8 on those <code>import</code> lines:</p>
<pre><code>import sys
sys.path.insert("..", 0)
import my_module  # noqa: E402
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is another workaround.</p>
<pre><code>import sys
... all your other imports...

sys.path.insert("..", 0)
try:
    import my_module
except:
    raise
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've just struggled with a similar question, and I think I found a slightly nicer solution than the accepted answer.</p>
<p>Create a <code>pathmagic</code> module that does the actual sys.path manipulation, but make the change within a <a href="https://docs.python.org/2/reference/datamodel.html#context-managers" rel="nofollow noreferrer">context manager</a>:</p>
<pre><code>"""Path hack to make tests work."""

import os
import sys

class context:
    def __enter__(self):
        bp = os.path.dirname(os.path.realpath('.')).split(os.sep)
        modpath = os.sep.join(bp + ['src'])
        sys.path.insert(0, modpath)

    def __exit__(self, *args):
        pass
</code></pre>
<p>Then, in your test files (or wherever you need this), you do:</p>
<pre><code>import pathmagic

with pathmagic.context():
    import my_module
    # ...
</code></pre>
<p>This way you don't get any complaints from flake8/pycodestyle, you don't need special comments, and the structure seems to make sense. </p>
<p>For extra neatness, consider actually reverting the path in the <code>__exit__</code> block, though this may cause problems with lazy imports (if you put the module code outside of the context), so maybe not worth the trouble.</p>
<hr/>
<p><strong>EDIT</strong>: Just saw a much simpler trick in an <a href="https://stackoverflow.com/a/12121404/7581">answer to a different question</a>: add <code>assert pathmagic</code> under your imports to avoid the <code>noqa</code> comment. </p>
</div>
<div class="post-text" itemprop="text">
<p>To comply with the pep8, you should include your project path to the python path in order to perform relative / absolute imports.</p>
<p>To do so, you can have a look at this answer: <a href="https://stackoverflow.com/questions/3402168/permanently-add-a-directory-to-pythonpath">Permanently add a directory to PYTHONPATH</a></p>
</div>
<span class="comment-copy">Why don't you write a <code>setup.py</code> and actually <i>install</i> <code>my_module</code> for testing?</span>
<span class="comment-copy">Because that's slightly less convenient. I suppose I <i>could</i> but I'd rather not.</span>
<span class="comment-copy">For whom? If you ever want to actually <i>use</i> this project anywhere it's far and away the easiest way to get it up and running.</span>
<span class="comment-copy">From <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>: "However, know when to be inconsistent -- sometimes style guide recommendations just aren't applicable. When in doubt, use your best judgment.". There are times when you have to break PEP8 compliance, and that is OK.</span>
<span class="comment-copy">@jonrsharpe It's a good habit to get into for future things that I will share. (I do see your point though, in that case I can use setup.py). I'll keep that in mind.</span>
<span class="comment-copy">This is cool, but this still have 'imported but unused [F401]' problem.</span>
<span class="comment-copy">I guess creating a dummy function in that pathmagic module and calling it from the test module would solve that issue but I wish there was something cleaner...</span>
<span class="comment-copy">@Chung-YenHung Keep in mind that pycodestyle/pep8 warnings are advisory rather than syntax errors or exceptions. You can choose to ignore them. I've updated my answer by adding a "noqa" comment after the import.</span>
<span class="comment-copy">This helped me get my build through CI, thank you!</span>
<span class="comment-copy">I prefer to be more explicit, specifying the violated rule like <code># noqa: E402</code> for example. (<a href="http://flake8.pycqa.org/en/3.1.1/user/ignoring-errors.html#in-line-ignoring-errors" rel="nofollow noreferrer">source</a>)</span>
<span class="comment-copy">@MaxGoodridge indeed! Edited response to add the rule.</span>
<span class="comment-copy">I strongly believe this will not work. The reason being, there may be some modules imported under "... all your imports ..." which might require PYTHONPATH to be set first.</span>
<span class="comment-copy">@darkdefender27 the idea is to put all imports that requires PYTHONPATH inside <code>try</code> body and everything else (that does not depend on it) up above.</span>
<span class="comment-copy">All this really accomplished is getting rid of the next for the special comment at the expense of requiring the use of a context managerâ€”a somewhat nebulous tradeoff in my opinion. As for cleaning-up in the <code>__exit__</code> block, to really do it properly would require just removing the added path (if it's still there) because restoring the entire previous value to what it was when the context was entered would also undo any other changes that might have been made to it by other code (executed in the same context) for some reason.</span>
<span class="comment-copy">@martineau indeed, it's a matter of taste. I may be a little biased against special comments, because my current code base contains a little too many comments for the myriad static analysis tools and editors that the various teams are using. Also agreed on your second point.</span>
<span class="comment-copy">I don't want to make this directory accessible globally to all my Python scripts, because that could cause conflicts.</span>
<span class="comment-copy">You can use the <a href="https://docs.python.org/3/library/pkgutil.html" rel="nofollow noreferrer">docs.python.org/3/library/pkgutil.html</a> package to use namespaces. If you think your solution is the best, you are not in obligation to follow the pep8. Pep8 is only advices and best practices, that don't mean you must follow every rule, everytime, everywhere.</span>
<span class="comment-copy">PEP 8 actually says <a href="https://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds" rel="nofollow noreferrer">A foolish consistency is the hobgoblin of little minds.</a></span>
