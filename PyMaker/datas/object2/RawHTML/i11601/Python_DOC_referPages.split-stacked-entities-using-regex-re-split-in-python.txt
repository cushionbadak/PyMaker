<div class="post-text" itemprop="text">
<p>I am having trouble splitting continuous strings into more reasonable parts:</p>
<p>E.g. 'MarieMüller' should become 'Marie Müller'</p>
<p>So far I've used this, which works if no special characters occur:</p>
<pre><code>' '.join([a for a in re.split(ur'([A-Z][a-z]+)', ''.join(entity)) if a])
</code></pre>
<p>This outputs for e.g. 'TinaTurner' -&gt; 'Tina Turner', but doesn't work
for 'MarieMüller', which outputs: 'MarieMüller' -&gt; 'Marie M \utf8 ller'</p>
<p>Now I came accros using regex \p{L}: </p>
<pre><code> ' '.join([a for a in re.split(ur'([\p{Lu}][\p{Ll}]+)', ''.join(entity)) if a])
</code></pre>
<p>But this produces weird things like: 
'JenniferLawrence' -&gt; 'Jennifer L awrence' </p>
<p>Could anyone give me a hand?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you work with Unicode and need to use Unicode categories, you should consider using <a href="https://pypi.python.org/pypi/regex" rel="nofollow">PyPi regex module</a>. There, you have support for all the Unicode categories:</p>
<pre><code>&gt;&gt;&gt; import regex
&gt;&gt;&gt; p = regex.compile(ur'(?&lt;=\p{Ll})(?=\p{Lu})')
&gt;&gt;&gt; test_str = u"Tina Turner\nMarieM\u00FCller\nJacek\u0104cki"
&gt;&gt;&gt; result = p.sub(u" ", test_str)
&gt;&gt;&gt; result
u'Tina Turner\nMarie M\xfcller\nJacek \u0104cki'
      ^             ^                ^
</code></pre>
<p>Here, the <code>(?&lt;=\p{Ll})(?=\p{Lu})</code> regex finds all locations between the lower- (<code>\p{Ll}</code>) and uppercase (<code>\p{Lu}</code>) letters, and then the <code>regex.sub</code> inserts a space there. Note that regex module automatically compiles the regex with <code>regex.UNICODE</code> flag if the pattern is a Unicode string (<code>u</code>-prefixed).</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>It won't work for extended character</strong></p>
<p>You can use <code>re.sub()</code> for this. It will be much simpler</p>
<pre><code>(?=(?!^)[A-Z])
</code></pre>
<p><em>For handling spaces</em></p>
<pre><code>print re.sub(r'(?&lt;=[^\s])(?=(?!^)[A-Z])', ' ', '   Tina Turner'.strip())
</code></pre>
<p><strong>For handling cases of consecutive capital letters</strong></p>
<pre><code>print re.sub(r'(?&lt;=[a-z])(?=[A-Z])', ' ', '   TinaTXYurner'.strip())
</code></pre>
<p><strong><a href="http://ideone.com/PuhFx5" rel="nofollow">Ideone Demo</a></strong></p>
<p><em>Regex Breakdown</em></p>
<pre><code>(?= #Lookahead to find all the position of capital letters
 (?!^) #Ignore the first capital letter for substitution
 [A-Z]
)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using a function constructed of Python's string operations instead of regular expressions, this should work:</p>
<pre><code>def split_combined_words(combined):
    separated = [combined[1]]
    for letter in combined[1:]:
        print letter
        if (letter.islower() or (letter.isupper() and separated[-1].isupper())):
            separated.append(letter)
        else:
            separated.extend((" ", letter))
    return "".join(separated)
</code></pre>
</div>
<span class="comment-copy">Can you install an additional module? Python's built-in <a href="http://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>re</code> module</a> is very limited; you need the <a href="https://pypi.python.org/pypi/regex" rel="nofollow noreferrer"><code>regex</code> module (PyPI)</a> for your second regex to work.</span>
<span class="comment-copy">a lot simpler way to do this will be <code>re.sub(r'(?=(?!^)[A-Z])', ' ', x, re.UNICODE)</code></span>
<span class="comment-copy">You are using Python 2, aren't you?</span>
<span class="comment-copy">This actually works quite good, would you mind explaining why ?=(?!^)[A-Z])' works?</span>
<span class="comment-copy">Are you using python3 or python2?</span>
<span class="comment-copy">This won't work if a name starts with an extended character, e.g. <a href="https://regex101.com/r/cJ6bD8/1" rel="nofollow noreferrer"><code>Ącki</code></a>.</span>
<span class="comment-copy">And it will insert a space before every uppercase ASCII letter, even if there already is one.</span>
<span class="comment-copy">It does not leave subsequent capital letters intact (e.g. "abCD" becomes "ab C D" instead of "ab CD" as requested).</span>
<span class="comment-copy">@WiktorStribiżew I am having no clue about unicode..i am not even able to take down the answer..you can write your own answer for this till then I am figuring out something</span>
