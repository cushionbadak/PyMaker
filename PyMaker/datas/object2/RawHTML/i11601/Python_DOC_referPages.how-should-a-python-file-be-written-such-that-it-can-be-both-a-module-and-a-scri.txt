<div class="post-text" itemprop="text">
<p>I'm considering how a Python file could be made to be an importable module as well as a script that is capable of accepting command line options and arguments as well as pipe data. How should this be done?</p>
<p>My attempt seems to work, but I want to know if my approach is how such a thing <em>should</em> be done (if such a thing should be done). Could there be complexities (such as when importing it) that I have not considered?</p>
<pre><code>#!/usr/bin/env python

"""
usage:
    program [options]

options:
    --version        display version and exit
    --datamode       engage data mode
    --data=FILENAME  input data file [default: data.txt]
"""

import docopt
import sys

def main(options):

    print("main")

    datamode            = options["--datamode"]
    filename_input_data = options["--data"]

    if datamode:
        print("engage data mode")
        process_data(filename_input_data)

    if not sys.stdin.isatty():
        print("accepting pipe data")
        input_stream = sys.stdin
        input_stream_list = [line for line in input_stream]
        print("input stream: {data}".format(data = input_stream_list))

def process_data(filename):

    print("process data of file {filename}".format(filename = filename))

if __name__ == "__main__":
    options = docopt.docopt(__doc__)
    if options["--version"]:
        print(version)
        exit()
    main(options)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>That's it, you're good</strong>.</p>
<p>Nothing matters<code>[1]</code> except the <code>if __name__ == '__main__'</code>, <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">as noted elsewhere</a></p>
<p>From the <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">docs</a> (emphasis mine):</p>
<blockquote>
<p>A module’s <code>__name__</code> is set equal to <code>'__main__'</code> when read from standard input, a script, or from an interactive prompt. A module can discover whether or not it is running in the main scope by checking its own <code>__name__</code>, which allows a common idiom for conditionally executing code in a module when it is run as a script or with python -m <strong>but not when it is imported</strong></p>
</blockquote>
<p>I also like how python 2's <a href="https://docs.python.org/2/library/__main__.html" rel="nofollow noreferrer">docs</a> poetically phrase it</p>
<blockquote>
<p>It is this environment in which the idiomatic “conditional script” stanza causes a script to run:</p>
</blockquote>
<p>That guard guarantees that the code underneath it will only be accepted if it is the main function being called; put all your argument-grabbing code there. If there is no other top-level code except class/function declarations, it will be safe to import.</p>
<hr/>
<p><strong>Other complications</strong>? </p>
<p>Yes: </p>
<ol>
<li>Multiprocessing (a new interpreter is started and things are re-imported). <code>if __name__ == '__main__'</code> <a href="https://stackoverflow.com/questions/20222534/python-multiprocessing-on-windows-if-name-main">covers that</a></li>
<li>If you're used to C coding, you might be thinking you can protect your imports with <code>ifdef</code>'s and the like. <a href="https://stackoverflow.com/questions/12524570/how-do-you-implement-ifdef-in-python">There's some analogous hacks in python, but it's not what you're looking for</a>.</li>
</ol>
<hr/>
<p>I like having a <code>main</code> method like C and Java - when's that coming out? <a href="https://www.python.org/dev/peps/pep-0299/" rel="nofollow noreferrer">Never.</a></p>
<hr/>
<p>But I'm paranoid! <a href="https://stackoverflow.com/questions/2375403/how-does-one-monkey-patch-a-function-in-python">What if someone changes my main function</a>. Stop being friends with that person. As long as you're the user, I assume this isn't an issue.</p>
<hr/>
<p>I mentioned the <code>-m</code> flag. That sounds great, what's that?! <a href="https://stackoverflow.com/questions/7610001/what-is-the-m-switch-for-in-python">Here</a> and <a href="https://www.python.org/dev/peps/pep-0338/" rel="nofollow noreferrer">here</a>, but don't worry about it.</p>
<hr/>
<p><strong>Footnotes</strong>:</p>
<p><code>[1]</code> Well, the fact that you put your main code in a function is nice. Means things will <a href="https://stackoverflow.com/questions/11241523/why-does-python-code-run-faster-in-a-function">run slightly faster</a></p>
</div>
<span class="comment-copy">Oh, thank you so much for such a clear and detailed answer! That was very helpful and covered a few ideas I had not considered.</span>
