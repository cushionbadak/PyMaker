<div class="post-text" itemprop="text">
<p>I would like to pass as argument of a function in my C module an array of uint8_t's. </p>
<p>I couldn't find a method to directly parse this array, so I'm parsing it to a PyObject_t and then iterating as a PyTuple_t object. This way, I need to cast each element PyObject_t of this tuple to uint8_t. </p>
<p>How can I do that, once that there is no PyInt_FromUINT8_t function or anything like it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can usually just get away with <code>B</code> using <code>unsigned char</code>. According to <a href="https://docs.python.org/2/c-api/arg.html">Parsing Arguments</a> you should just be able to do:</p>
<pre><code>uint8_t b;
if (!PyArg_ParseTuple("b", &amp;b)) {
    return NULL;
}
</code></pre>
<p>If not directly using arguments (e.g. you are dealing with a <code>PyObject</code>, simply use one of the <code>PyInt_*</code>, <code>PyLong_*</code> or <code>PyNumber_*</code> functions (<a href="https://docs.python.org/3/c-api/number.html?highlight=pynumber#c.PyNumber_AsSsize_t">https://docs.python.org/3/c-api/number.html?highlight=pynumber#c.PyNumber_AsSsize_t</a>).</p>
<p>Converting from a <code>uin8_t</code> to a <code>PyObject</code> is simple as well, you can use <code>PyInt_FromLong</code> or <code>PyLong_FromLong</code></p>
</div>
<span class="comment-copy">I'm working with arrays. In this case, iterate over a PyTuple or PyList using PyInt_FromLong won't cause an invalid memory access?   This function will try to read 4 or 8 bytes but each element of the list has only 1 byte allocated.</span>
<span class="comment-copy">None of the <code>PyXXX</code> functions use pointers to integers, but simply return them by value; so <code>PyInt_FromLong</code> for example would accept an <code>int</code> as an argument, and it would be subject to normal type conversions and integer coercions. Can you explain a bit more what you're trying to do?</span>
<span class="comment-copy">@PedroAlves: A tuple cannot have <code>uint8_t</code>s in it. Where do you expect an array of <code>uint8_t</code>s to even come from on the Python side, anyway? You may want to use a <code>bytes</code> or <code>bytearray</code> object.</span>
<span class="comment-copy">Indeed. The only way to get an actual array of <code>uint8_t</code> (such that you would not need to do manual conversion each time) is a <code>bytearray</code> or <code>bytes</code> object (<code>bytes</code> is slightly more efficient because its contents is allocated at the tail of the <code>PyObject</code> whereas the <code>bytearray</code> is mutable and requires a separate allocation. There is also "memory view" stuff which allows you to write adapters to expose iterators and bytes from your own objects, but perhaps more trouble than it's worth for you</span>
<span class="comment-copy">I mean from the Python end. <code>PyBytesObject { ... size_t n; char alloc[1] }</code> vs <code>PyBytearrayObject { ... size_t n; char **buf}</code></span>
