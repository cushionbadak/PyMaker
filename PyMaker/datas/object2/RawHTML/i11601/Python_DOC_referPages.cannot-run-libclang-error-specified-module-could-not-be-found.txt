<div class="post-text" itemprop="text">
<p>Following <a href="http://eli.thegreenplace.net/2011/07/03/parsing-c-in-python-with-clang/" rel="nofollow noreferrer">Eli's</a> and <a href="http://blog.glehmann.net/2014/12/29/Playing-with-libclang/" rel="nofollow noreferrer">glehmann's</a> guides; </p>
<p>(in Windows)</p>
<blockquote>
<p>installed <strong>LLVM-3.8.0-win32</strong> from <a href="http://llvm.org/releases/download.html" rel="nofollow noreferrer">here</a></p>
<p>installed <strong>libclang-py3</strong> package (version 0.3)</p>
<p>added <code>C:\Program Files (x86)\LLVM\bin\libclang.dll</code> to my Path environment variables</p>
</blockquote>
<p>When I try to execute the code below (taken from the guides I mention above)</p>
<pre><code>clang.cindex.Config.set_library_path('C:\Program Files (x86)\LLVM\bin\libclang.dll')

def find_typerefs(node, typename):
    # Find all references to the type named 'typename'
    if node.kind.is_reference():
        ref_node = clang.cindex.Cursor_ref(node)
        if ref_node.spelling == typename:
            print('Found %s [line=%s, col=%s]' % (
                typename, node.location.line, node.location.column))
    # Recurse for children of this node
    for c in node.get_children():
        find_typerefs(c, typename)

index = clang.cindex.Index.create()
tu = index.parse(cppsource)
print('Translation unit:', tu.spelling)
find_typerefs(tu.cursor, 'Person')
</code></pre>
<p>I get the following error:</p>
<pre><code>C:\Users\Duca\AppData\Local\Programs\Python\Python35-32\python.exe C:/Users/Duca/Desktop/PyPlag/rough-scripts/c++_parser_with_libclang.py
Traceback (most recent call last):
  File "C:\Users\Duca\AppData\Local\Programs\Python\Python35-32\lib\site-packages\clang\cindex.py", line 3623, in get_cindex_library
    library = cdll.LoadLibrary(self.get_filename())
  File "C:\Users\Duca\AppData\Local\Programs\Python\Python35-32\lib\ctypes\__init__.py", line 425, in LoadLibrary
    return self._dlltype(name)
  File "C:\Users\Duca\AppData\Local\Programs\Python\Python35-32\lib\ctypes\__init__.py", line 347, in __init__
    self._handle = _dlopen(self._name, mode)
OSError: [WinError 126] The specified module could not be found

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:/Users/Duca/Desktop/PyPlag/rough-scripts/c++_parser_with_libclang.py", line 49, in &lt;module&gt;
    index = clang.cindex.Index.create()
  File "C:\Users\Duca\AppData\Local\Programs\Python\Python35-32\lib\site-packages\clang\cindex.py", line 2238, in create
    return Index(conf.lib.clang_createIndex(excludeDecls, 0))
  File "C:\Users\Duca\AppData\Local\Programs\Python\Python35-32\lib\site-packages\clang\cindex.py", line 141, in __get__
    value = self.wrapped(instance)
  File "C:\Users\Duca\AppData\Local\Programs\Python\Python35-32\lib\site-packages\clang\cindex.py", line 3592, in lib
    lib = self.get_cindex_library()
  File "C:\Users\Duca\AppData\Local\Programs\Python\Python35-32\lib\site-packages\clang\cindex.py", line 3628, in get_cindex_library
    raise LibclangError(msg)
clang.cindex.LibclangError: [WinError 126] The specified module could not be found. To provide a path to libclang use Config.set_library_path() or Config.set_library_file().

Process finished with exit code 1
</code></pre>
<p>Also tried,</p>
<blockquote>
<p>downloaded <strong>cfe-3.8.0.src.tar</strong> from <a href="http://llvm.org/releases/download.html" rel="nofollow noreferrer">here</a> and copied the <code>clang.cindex</code> module inside my script's directory</p>
<p>installed <strong>LLVM-3.8.0-win64</strong> and updated the Path environment variable as well as the <code>clang.cindex.Config.set_library_path</code> statement (after reading this <a href="https://stackoverflow.com/questions/22730935/why-cant-this-python-script-find-the-libclang-dll">question</a>)</p>
<p>copied the <code>libclang.dll</code> from the installation dir to my Python DLLs dir</p>
<p>used <code>clang.cindex.Config.set_library_path('C:\Program Files (x86)\LLVM\bin')</code> and <code>clang.cindex.Config.set_library_file('C:\Program Files (x86)\LLVM\bin\libclang.dll')</code> and <code>clang.cindex.Config.set_library_file('C:\Program Files (x86)\LLVM\bin')</code></p>
</blockquote>
<p>with no success.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am afraid the main culprit in your code is the <strong>backward slash</strong>. You need to change the <code>clang.cindex.Config.set_library_path('C:\Program Files (x86)\LLVM\bin\libclang.dll')</code> <strong>to</strong> <code>clang.cindex.Config.set_library_file('C:/Program Files (x86)/LLVM/bin/libclang.dll')</code>.</p>
<p>Alternatively, and I believe it is better programming practice, you could use the <a href="https://docs.python.org/3/library/os.html#os.sep" rel="nofollow">os.sep</a> to handle both Windows and Linux path separator cases.</p>
<p>Also, there is another issue in your code; namely, you need to change the <code>ref_node = clang.cindex.Cursor_ref(node)</code> <strong>to</strong> <code>ref_node = node.get_definition()</code> in order to avoid getting an <code>AttributeError</code> since <code>Cursor_ref</code> is no longer an attribute of the <code>clang.cindex</code> module.</p>
<p>After fixing the above, running with the parameters <code>simple_demo_src.cpp Person</code> you should be getting no errors and seeing this output:</p>
<pre><code>Translation unit: simple_demo_src.cpp
Found Person [line=7, col=21]
Found Person [line=13, col=5]
Found Person [line=24, col=5]
Found Person [line=24, col=21]
Found Person [line=25, col=9]
</code></pre>
<p>which is exactly what Eli mentions on his <a href="http://eli.thegreenplace.net/2011/07/03/parsing-c-in-python-with-clang/" rel="nofollow">page</a>.</p>
</div>
<span class="comment-copy">Did you try set_library_file rather than set_library_path?</span>
<span class="comment-copy">Yes I did, exactly same error. :(</span>
<span class="comment-copy">It looks like you have a couple of possible problems. 1) you're not sure why the dll is being found; 2) You're not sure if you've got a compatible set of python bindings.  The python bindings (any of them) will include enough functionality to do what you're hoping (so it isn't an issue) - I'm confident about this because the implementation is based on ctypes. If that leaves the dll issue you can manually edit the cindex.py file to print exactly which file is being opened, if you also <code>assert os.path.exists</code> you may get a bit more insight into what is going wrong</span>
<span class="comment-copy">@AndrewWalker Followed your advice and started poking the cindex.py by adding print statements around where the traceback indicatess. Unfortunately, all I managed to find out is that in the <code>get_cindex_library</code> the <code>self.get_filename()</code> = <code>libclang.dll</code>, the <code>handle</code> at <code>__init__</code>.py  ln346 is first <code>2002911232</code> and the other 4 times <code>None</code> and that in the <code>__get__</code> of cindex.py the <code>instance</code> is <code>&lt;clang.cindex.Config object at 0x0159E270&gt;</code> and the <code>self</code> is <code>&lt;clang.cindex.CachedProperty object at 0x0159E250&gt;</code>. I am so lost! Any ideas where to look or what more to try?</span>
<span class="comment-copy">Needed this so much, thanks! The <code>os.sep</code> is great advice. And thanks for picking up the <code>AttributeError</code> as well.</span>
