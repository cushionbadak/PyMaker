<div class="post-text" itemprop="text">
<p>How can I prevent a Python shell/commandline/terminal window from beeing closed, if the user clicks the close button of the Window? I've tried to catch <code>SystemExit</code> exceptions and overriding <code>sys.exit()</code>, no success.</p>
<p>I know, I can do this with a GUI toolkit/framework like <code>PyQt</code>, but importing that (and including it in the final binary of my program) would be no option while it's too big.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>It is not possible to do this in the general case</strong>.</p>
<p>The terminal window is (generally speaking) a separate process from Python itself (YMMV with IPython and other such things, but this is true if you're running regular Python inside a regular terminal).  When the terminal window decides to go away, it is not possible (under most reasonable operating systems and window managers) to prevent it from doing so, because it's a totally different program which just happens to be displaying your input and output.</p>
<p>You <strong>can</strong>, however, keep your program running after the terminal closes.  The terminal will still go away, but the program will keep running in the background.  On Unix systems, this is generally done by catching or ignoring the <code>SIGHUP</code> signal using <a href="https://docs.python.org/3/library/signal.html" rel="nofollow"><code>signal</code></a>.</p>
<p>Depending on your operating system and choice of terminal emulator, it may or may not be possible to configure the terminal to not close.  Some terminal emulators under Linux will, by default, warn the user that there is a process running under the terminal when the user tries to close it.  This is highly platform-dependent and can't be configured (portably or perhaps at all) from within Python.</p>
</div>
<span class="comment-copy">which OS are you planning to use?</span>
<span class="comment-copy">@Ashafix Windows at the time, a non-platform independent solution would be okay</span>
<span class="comment-copy">Thanks for this, I thought like this. But how does PyQt prevent the window from beeing closed? There must be any solution...</span>
<span class="comment-copy">@linusg: In PyQt, the window is owned by the Python process, so it can control what happens when the user clicks the close button.  If you're running under a terminal, you don't own or control the window, so you can't stop it from going away.  Of course, if the user decides to terminate the process via Task Manager or your system's equivalent, there's little you can do regardless of GUI-vs-terminal issues.</span>
<span class="comment-copy">OK, I have to live with that. Any other way to finish a while loop before closing?</span>
<span class="comment-copy">I found some interesting suggestions <a href="https://superuser.com/questions/198525/how-can-i-execute-a-windows-command-line-in-background">here</a> but I'm not sure they're quite what you want.</span>
<span class="comment-copy">Thanks for your effort! The console window should be shown, that's no problem. Everything I want to do is to finish execution of a while loop with ftp uploads in it...</span>
