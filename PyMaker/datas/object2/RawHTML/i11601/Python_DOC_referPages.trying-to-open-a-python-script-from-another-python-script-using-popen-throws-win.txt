<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1186789/what-is-the-best-way-to-call-a-script-from-another-script">What is the best way to call a script from another script?</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to open a python script from another python script using Popen in Python 2.7.</p>
<p>The two scripts are:</p>
<p><strong>child.py</strong>: Takes 5 ints one by one and waits some time and prints its square</p>
<pre><code>    import time
    for i in range(5):
        value = int(raw_input('Enter an integer: '))
        time.sleep(2)
        print "Its square is ", value*value
</code></pre>
<p><strong>parent.py</strong>: Opens child.py and writes 5 ints to its stdin and prints its stdout</p>
<pre><code>    import subprocess, time

    # following is the line of interest
    child_program = subprocess.Popen("child.py", 
                                     stdin=subprocess.PIPE,
                                     stdout=subprocess.PIPE,
                                     stderr=subprocess.PIPE)

    for i in range(5):
        child_program.stdin.write(str(i)+"\n")
        child_program.stdin.flush()
        a = child_program.stdout.readline()
        print [a]  # I put it in list just to see exact format
</code></pre>
<p>The following are the <strong>other substitutions</strong> that I used for the first argument of Popen constructor in parent.py after seeing many similar question in stackoverflow</p>
<pre><code>    "./child.py": Same WindowsError is produced
    &lt;full path&gt;:  Same WindowsError is produced
    ["python", "child.py"]: Did not raise error but opened python (useless)
</code></pre>
<p><strong>The WindowsError produced is:</strong></p>
<pre><code>    WindowsError: [Error 193] %1 is not a valid Win32 application
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First you have to Specify the type of file you are trying to open as a subprocess</p>
<pre><code> child_program = subprocess.Popen(['executable','child.py'], 
                                 stdin=subprocess.PIPE,
                                 stdout=subprocess.PIPE,
                                 stderr=subprocess.PIPE)
</code></pre>
<p>This should resolve your issue.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Popen</code> with the default <code>shell=False</code> delegates to <code>CreateProcess</code> in Windows as <a href="https://docs.python.org/2/library/subprocess.html?highlight=popen#subprocess.Popen" rel="nofollow noreferrer">its docs</a> say. That API function can only run executable files (regardless of their extension).</p>
<p>You need to either</p>
<ul>
<li>add <a href="https://stackoverflow.com/questions/2589711/find-full-path-of-python-interpreter">the path to the interpreter</a> as the leading argument </li>
<li>use machinery that would delegate to <code>ShellExecute</code> that would run a command line like above accoring to the file type association. E.g. specify <code>shell=True</code> (heed the security warnings in the doc) because <a href="https://stackoverflow.com/questions/31855240/execute-exe-as-jpg/31861241?s=1%7C7.0418#31861241"><code>cmd.exe</code> falls back to <code>ShellExecute</code> for non-executable files</a>.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If you have the Python interpreter setup to handle *.py files, then you can just set <code>shell=True</code> in your Popen constructor:</p>
<pre><code>child_program = subprocess.Popen("child.py",
                                 shell=True,
                                 stdin=subprocess.PIPE,
                                 stdout=subprocess.PIPE,
                                 stderr=subprocess.PIPE)
</code></pre>
<p><strong>As others have pointed out, this method comes with a security warning</strong>, so you'd have to take care that the arguments you pass to Popen aren't maliciously constructed (for instance, if you're getting some of your arguments from user input): <a href="https://docs.python.org/3/library/subprocess.html#security-considerations" rel="nofollow">https://docs.python.org/3/library/subprocess.html#security-considerations</a></p>
<p>Otherwise, you'll need to tell Popen to use a Python executable to load the file, like this:</p>
<pre><code>import sys

child_program = subprocess.Popen([sys.executable, "child.py"],
                                 stdin=subprocess.PIPE,
                                 stdout=subprocess.PIPE,
                                 stderr=subprocess.PIPE)
</code></pre>
<p>In this context, <code>sys.executable</code> will resolve to the full path of the Python binary that was used to launch your parent script.</p>
</div>
<span class="comment-copy">If you need shell=True, look for something better. Please recognize this is a security risk!</span>
