<div class="post-text" itemprop="text">
<p>I don't understand the <code>str.format_map(mapping)</code> method. I only know it is similar to <code>str.format(*args, **kwargs)</code> method and you can also pass a dictionary as an argument (please see my example). 
Example:</p>
<pre><code>print ("Test: argument1={arg1} and argument2={arg2}".format_map({'arg1':"Hello",'arg2':123}))
</code></pre>
<p>Can someone explain to me the difference between <code>str.format_map(mapping)</code> and <code>str.format(*args, **kwargs)</code> methods and why do I need  the <code>str.format_map(mapping)</code>  method? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>str.format(**kwargs)</code> makes a new dictionary in the process of calling. <code>str.format_map(kwargs)</code> does not. In addition to being slightly faster, <code>str.format_map()</code> allows you to use a <code>dict</code> subclass (or other object that implements mapping) with special behavior, such as gracefully handling missing keys. This special behavior would be lost otherwise when the items were copied to a new dictionary.</p>
<p>See: <a href="https://docs.python.org/3/library/stdtypes.html#str.format_map" rel="noreferrer">https://docs.python.org/3/library/stdtypes.html#str.format_map</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>str.format(**mapping)</code> when called creates a new dictionary, whereas <code>str.format_map(mapping)</code> doesn't. The format_map(mapping) lets you pass missing keys. This is useful when working  <em>per se</em> with the dict subclass.</p>
<pre><code>class Foo(dict): # inheriting the dict class
    def __missing__(self,key):
        return key
print('({x},{y})'.format_map(Foo(x='2')))  # missing key y 
print('({x},{y})'.format_map(Foo(y='3')))  # missing key x
</code></pre>
</div>
<span class="comment-copy">I didn't even know <code>str.format_map</code> existed ... Neat.</span>
<span class="comment-copy">Strangely, a combination of changes involved in implementing <code>format_map</code> and edge cases in the <code>**kwargs</code> handling means that <code>str.format(**kwargs)</code> <a href="http://ideone.com/Pwi54a" rel="nofollow noreferrer">actually <i>will</i> pass through <code>dict</code> subclasses with <code>__missing__</code> methods or overridden <code>__getitem__</code> behavior and use their behavior</a>. I believe this is the case on all Python versions that support <code>format_map</code>. It's an implementation detail you shouldn't rely on, though. Also, <a href="http://ideone.com/TXjPyX" rel="nofollow noreferrer">only <code>format_map</code> supports non-dict-subclasses</a>.</span>
<span class="comment-copy">On Python versions that predate <code>format_map</code>, <a href="http://ideone.com/4xREdf" rel="nofollow noreferrer">you can't abuse <code>format</code> this way</a>.</span>
<span class="comment-copy">In the time since I posted the above comments, <a href="https://bugs.python.org/issue18531" rel="nofollow noreferrer">the <code>**kwargs</code> handling bug has been fixed</a>. A sufficiently up-to-date Python will once again not pass dict subclasses through in <code>str.format(**kwargs)</code>.</span>
<span class="comment-copy">Upvoted for conciseness.</span>
