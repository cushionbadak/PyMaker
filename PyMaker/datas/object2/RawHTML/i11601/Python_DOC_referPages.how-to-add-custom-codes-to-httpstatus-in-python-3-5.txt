<div class="post-text" itemprop="text">
<p>My HTTP client uses the Python <em>requests</em> library to access an API proxied by CloudFlare. The client converts the numerical response status code to an <code>HTTPStatus</code> enum instance. Simplified ...</p>
<pre><code>import requests
from http import HTTPStatus

url = ...
response = requests.get(url)
status = HTTPStatus(response.status_code)
</code></pre>
<p>The CloudFlare proxy service can return some unofficial 5xx HTTP status codes: <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#CloudFlare" rel="nofollow">https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#CloudFlare</a>. These cause <code>HTTPStatus</code> to raise a <code>ValueError</code> because codes such as 522 (Connection Timed Out) are not members of the <code>HTTPStatus</code> enum defined in Python's <code>lib/http/__init__.py</code>.</p>
<p>How can I add the unoffical CloudFlare status codes to the <code>HTTPStatus</code> enum? Or, how can I load the <code>HTTPStatus</code> enum members into some other enum along with the unoffical CloudFlare status codes?</p>
<p>The Python 3.5 <code>Enum</code> documentation, <a href="https://docs.python.org/3/library/enum.html" rel="nofollow">https://docs.python.org/3/library/enum.html</a>, describes restrictions that have thwarted me thus far.</p>
<blockquote>
<p>Section 8.13.9: Subclassing an enumeration is allowed only if the
  enumeration does not define any members.</p>
<p>Section 8.13.14.2: The most interesting thing about <code>Enum</code> members is
  that they are singletons. <code>EnumMeta</code> creates them all while it is
  creating the <code>Enum</code> class itself, and then puts a custom <code>__new__()</code>
  in place to ensure that no new ones are ever instantiated by returning
  only the existing member instances.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The new <a href="https://pypi.python.org/pypi/aenum" rel="nofollow">aenum library</a><sup>1</sup> has an <code>extend_enum</code> function that is capable of adding new members to an existing enumeration.</p>
<p>Example usage:</p>
<pre><code>import aenum
from http import HTTPStatus

aenum.extend_enum(HTTPStatus, 'BAD_SPAM', 513, 'Too greasy')
aenum.extend_enum(HTTPStatus, 'BAD_EGGS', 514, 'Too green')
</code></pre>
<hr/>
<p><sup>1</sup> The <a href="https://pypi.python.org/pypi/aenum" rel="nofollow">aenum library</a> is from the author/coauthor of the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow">enum34 backport</a> and the Python 3.4 <code>Enum</code> data type.</p>
</div>
<span class="comment-copy">Do you absolutely <i>need</i> to use <code>HTTPStatus</code>? The fact that it isn't mutable makes it pretty much impossible to change. You could just create a dictionary mapping status codes to statii instead.</span>
<span class="comment-copy">@joelsphrentz:  Thanks for the edit, I fixed the quoting.</span>
