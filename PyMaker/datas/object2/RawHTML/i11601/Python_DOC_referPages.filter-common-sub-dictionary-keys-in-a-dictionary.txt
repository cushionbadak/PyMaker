<div class="post-text" itemprop="text">
<p>How do i filter all common sub dictionary keys that exists in other sub dictionary keys in the parent dictionary</p>
<pre><code>d = {
  '0': {'key_x': 0, 'key_y': 15, 'key_z': 41}
  '1': {'key_x': 5, 'key_y': 22}
  '2': {'key_x': 6, 'key_y': 41}
}

result ['key_x', 'key_y']
</code></pre>
<p>current solution is</p>
<pre><code>intersect = {}
for k in corner_values.keys():
    for j in corner_values[k]:
        if j not in intersect:
            intersect[j] = 1
        else:
            intersect[j] += 1

for k in intersect:
    if intersect[k] != len(corner_values.keys()):
        del intersect[k]
</code></pre>
<p>Is there any simpler solution for this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> the dictionaries to <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer"><code>set</code></a> and then <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>reduce</code></a> using <a href="https://docs.python.org/3/library/stdtypes.html#set.intersection" rel="nofollow noreferrer"><code>set.intersection</code></a>:</p>
<pre><code>&gt;&gt;&gt; from functools import reduce # if you are using Python 3
&gt;&gt;&gt; d = {                       
...   '0': {'key_x': 0, 'key_y': 15, 'key_z': 41},
...   '1': {'key_x': 5, 'key_y': 22},
...   '2': {'key_x': 6, 'key_y': 41}
... }
&gt;&gt;&gt; reduce(set.intersection, map(set, d.values()))
{'key_x', 'key_y'}
</code></pre>
<p>Note: In Python 3, <code>reduce</code> has been moved to <code>functools</code>.</p>
<p>Update: As seen in @John's <a href="https://stackoverflow.com/a/36769238/12892">answer</a>, <code>set.intersection</code> can handle an arbitrary number of sets, so the <code>reduce</code> is not even necessary. Just <code>set.intersection(*map(set, d.values()))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can do a single <a href="https://docs.python.org/library/stdtypes.html#set.intersection" rel="nofollow"><code>set.intersection</code></a> operation once you extract all the keys.  It's a one-liner then:</p>
<pre><code>set.intersection(*(set(x) for x in d.itervalues()))
</code></pre>
<p>Breaking that down, the first part evaluated is this:</p>
<pre><code>(set(x) for x in d.itervalues())
</code></pre>
<p>That's a generator which produces:</p>
<pre><code>{'key_x', 'key_y'}, {'key_x', 'key_y', 'key_z'}, {'key_x', 'key_y'}
</code></pre>
<p>In Python 3 that generator is equivalent to:</p>
<pre><code>map(set, d.values())
</code></pre>
<p>But in Python 2, <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow"><code>map</code></a> is less efficient because it constructs a <code>list</code> that we don't need (as does <a href="https://docs.python.org/2/library/stdtypes.html#dict.values" rel="nofollow"><code>values()</code></a> instead of <a href="https://docs.python.org/2/library/stdtypes.html#dict.itervalues" rel="nofollow"><code>itervalues()</code></a>).</p>
<p>In any case, the results of that generator are passed to <code>set.intersection</code> (using the <code>*</code> argument unpacker) to do the heavy lifting in a single call.</p>
</div>
<div class="post-text" itemprop="text">
<p>An alternative with <code>pandas</code>, the keys do not need to be ordered:</p>
<pre><code>import pandas as pd

list(pd.DataFrame(d).dropna().index)

#['key_x', 'key_y']
</code></pre>
</div>
<span class="comment-copy">Nice. Didn't know <code>intersection</code> worked "varargs"-style.</span>
<span class="comment-copy">Python 2 has <a href="https://docs.python.org/2/library/itertools.html#itertools.imap" rel="nofollow noreferrer"><code>itertools.imap</code></a></span>
<span class="comment-copy">Also even if you use a generator, when you call a function with it using <code>*</code>, its elements will still be stored in the container used for the arguments (<code>*args</code>). Nevertheless eliminating the intermediary <code>list</code> is a good thing.</span>
