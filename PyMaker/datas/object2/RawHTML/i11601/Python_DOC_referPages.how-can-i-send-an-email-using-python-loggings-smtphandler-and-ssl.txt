<div class="post-text" itemprop="text">
<p>I'm developing a flask app in which I'd like to send error level logging to an email address. I tried setting up the typical error handler:</p>
<pre><code>mail_handler = SMTPHandler(mailhost=(app.config['MAIL_SERVER'], app.config['MAIL_PORT']),
                           fromaddr=app.config['MAIL_FROM_EMAIL'],
                           toaddrs=['me@my_address.com'],
                           subject='The server died. That sucks... :(',
                           credentials=(app.config['MAIL_USERNAME'], app.config['MAIL_PASSWORD']))
</code></pre>
<p>Note the configuration values are as set up using <a href="https://pythonhosted.org/Flask-Mail/" rel="noreferrer" title="flask-mail">flask-mail</a>, with <code>MAIL_USE_SSL=True</code> and <code>MAIL_PORT=465</code>.</p>
<p>However, upon invoking an error (on purpose during testing) I get socket timeout errors - other than the port, I can't see how to tell the handler to use SSL. There is a <code>secure=()</code> parameter that can be passed (see <a href="https://docs.python.org/3/library/logging.handlers.html#smtphandler" rel="noreferrer">the SMTPHandler docs</a>) but that specifies us of TLS, not SSL.</p>
<p>Any clues how to do this? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Figured it out with thanks to <a href="http://www.gossamer-threads.com/lists/python/python/769367" rel="noreferrer">Ned Deily</a> pointing out that smtplib (which sits under SMTPHandler) requires special treatment. I also found <a href="http://mynthon.net/howto/-/python/python%20-%20logging.SMTPHandler-how-to-use-gmail-smtp-server.txt" rel="noreferrer">this post</a> demonstrating how to do that, by overloading the SMTPHandler (in that case to fix a TLS problem).</p>
<p>Using <code>smtplib.SMTP_SSL</code> (<a href="https://docs.python.org/3/library/smtplib.html#smtplib.SMTP_SSL" rel="noreferrer">see smtplib docs</a>), rather than the straightforward <code>smtplib.SMTP</code>, I was able to get the whole system working. This is the utils/logs.py file I use to set up the handlers (which should be a nice example of file, as well as email, handlers):</p>
<pre><code>from your.application.file import app

import smtplib
import logging
from logging.handlers import RotatingFileHandler, SMTPHandler


# Provide a class to allow SSL (Not TLS) connection for mail handlers by overloading the emit() method
class SSLSMTPHandler(SMTPHandler):
    def emit(self, record):
        """
        Emit a record.
        """
        try:
            port = self.mailport
            if not port:
                port = smtplib.SMTP_PORT
            smtp = smtplib.SMTP_SSL(self.mailhost, port)
            msg = self.format(record)
            if self.username:
                smtp.login(self.username, self.password)
            smtp.sendmail(self.fromaddr, self.toaddrs, msg)
            smtp.quit()
        except (KeyboardInterrupt, SystemExit):
            raise
        except:
            self.handleError(record)


# Create file handler for error/warning/info/debug logs
file_handler = RotatingFileHandler('logs/app.log', maxBytes=1*1024*1024, backupCount=100)

# Apply format to the log messages
formatter = logging.Formatter("[%(asctime)s] |  %(levelname)s | {%(pathname)s:%(lineno)d} | %(message)s")
file_handler.setFormatter(formatter)

# Set the level according to whether we're debugging or not
if app.debug:
    file_handler.setLevel(logging.DEBUG)
else:
    file_handler.setLevel(logging.WARN)


# Create equivalent mail handler
mail_handler = SSLSMTPHandler(mailhost=(app.config['MAIL_SERVER'], app.config['MAIL_PORT']),
                           fromaddr=app.config['MAIL_FROM_EMAIL'],
                           toaddrs='my@emailaddress.com',
                           subject='Your app died. Sad times...',
                           credentials=(app.config['MAIL_USERNAME'], app.config['MAIL_PASSWORD']))

# Set the email format
mail_handler.setFormatter(logging.Formatter('''
Message type:       %(levelname)s
Location:           %(pathname)s:%(lineno)d
Module:             %(module)s
Function:           %(funcName)s
Time:               %(asctime)s

Message:

%(message)s
'''))

# Only email errors, not warnings
mail_handler.setLevel(logging.ERROR)
</code></pre>
<p>This is registered in my application file with:</p>
<pre><code># Register the handlers against all the loggers we have in play
# This is done after app configuration and SQLAlchemy initialisation, 
# drop the sqlalchemy if not using - I thought a full example would be helpful.
import logging
from .utils.logs import mail_handler, file_handler
loggers = [app.logger, logging.getLogger('sqlalchemy'), logging.getLogger('werkzeug')]
for logger in loggers:
    logger.addHandler(file_handler)
    # Note - I added a boolean configuration parameter, MAIL_ON_ERROR, 
    # to allow direct control over whether to email on errors. 
    # You may wish to use 'if not app.debug' instead.
    if app.config['MAIL_ON_ERROR']:
        logger.addHandler(mail_handler)
</code></pre>
<p>Hope this helps somebody!</p>
</div>
