<div class="post-text" itemprop="text">
<p>I am working under ubuntu on a python3.4 script where I take in parameter a file (encoded to UTF-8), generated under Windows. I have to go through the file line by line (separated by <code>\r\n</code>) knowing that the "lines" contain some <code>'\n'</code> that I want to keep.</p>
<p>My problem is that Python transforms the file's <code>"\r\n"</code> to <code>"\n"</code> when opening. I've tried to open with different modes (<code>"r"</code>, <code>"rt"</code>, <code>"rU"</code>).</p>
<p>The only solution I found is to work in binary mode and not text mode, opening with the <code>"rb"</code> mode.</p>
<p>Is there a way to do it without working in binary mode or a proper way to do it?</p>
<p><strong>EDIT</strong>: Solution:</p>
<pre><code>with open(filename, "r", newline='\r\n') as f:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Set the <code>newline</code> keyword argument to <code>open()</code> to <code>'\r\n'</code>, or perhaps to the empty string:</p>
<pre><code>with open(filename, 'r', encoding='utf-8', newline='\r\n') as f:
</code></pre>
<p>This tells Python to only split lines on the <code>\r\n</code> line terminator; <code>\n</code> is left untouched in the output. If you set it to <code>''</code> instead, <code>\n</code> is also seen as a line terminator but <code>\r\n</code> is not translated to <code>\n</code>.</p>
<p>From the <a href="https://docs.python.org/3/library/functions.html#open"><code>open()</code> function documentation</a>:</p>
<blockquote>
<p><em>newline</em> controls how <a href="https://docs.python.org/3/glossary.html#term-universal-newlines">universal newlines</a> mode works (it only applies to text mode). It can be <code>None</code>, <code>''</code>, <code>'\n'</code>, <code>'\r'</code>, and <code>'\r\n'</code>. <em>[...]</em> If it is <code>''</code>, universal newlines mode is enabled, but <strong>line endings are returned to the caller untranslated. If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated.</strong> </p>
</blockquote>
<p>Bold emphasis mine.</p>
</div>
<span class="comment-copy">Note: Both the mode and the <code>encoding</code> arguments are optional here (<code>'r'</code> is the default mode everywhere, and unless you know the encoding is <code>utf-8</code>, that might or might not be the correct encoding to use; on Windows <code>utf-16</code> and locale specific code pages are equally common if not more common).</span>
<span class="comment-copy">@ShadowRanger: sure, but explicit is still better than implicit. I always strongly advice not to leave <code>encoding</code> to the default.</span>
<span class="comment-copy">The solution was: <code>with open(filename, 'r', encoding='utf-8', newline='\r\n') as f:</code> thanks for the clue</span>
<span class="comment-copy">@MartijnPieters: I mostly agree, but it's just damn hard to make good guarantees as to what the input encoding will actually be. I agree that <code>encoding</code> should always be specified (as a UTF format, either 8 or 16) when opening for write, and when opening files your own script created with explicit encoding, or when dealing with internet derived data (where <code>utf-8</code> is the standard) but it's harder to justify when your input data is not produced by you, and likely to be in the OS locale encoding (e.g. <code>cp1252</code> on most Western European/English speaking locales). It's a hard problem either way.</span>
<span class="comment-copy">@ShadowRanger: better to explicitly determine up front what the encoding may be. Ask the user providing the file, for example. Rarely is the Windows default correct for your files, for example.</span>
