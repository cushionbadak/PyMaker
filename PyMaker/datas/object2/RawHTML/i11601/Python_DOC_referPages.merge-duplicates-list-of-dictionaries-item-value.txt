<div class="post-text" itemprop="text">
<p>I have following list of dictionaries with a duplication in value (coach).</p>
<pre><code>d = [
    {"players": [{"id": 179, "name": "Santosh"}], "coach": "Xavi Alonso"}, 
    {"players": [{"id": 180, "name": "Hari"}], "coach": "Xavi Alonso"}, 
    {"players": [{"id": 175, "name": "Hitman"}], "coach": "Anna Puyol"}
]
</code></pre>
<p>I want to merge duplicates items based on coach name. How can i achieve this?</p>
<pre><code>def exportplayers(request):
    d = [
        {"players": [{"id": 179, "name": "Santosh"}, {"id": 180, "name": "Hari"}], "coach": "Xavi Alonso"}, 
        {"players": [{"id": 175, "name": "Hitman"}], "coach": "Anna Puyol"}
    ]


    return HttpResponse(json.dumps(d))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>groupby</code></a> from the itertools module and <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow"><code>itemgetter</code></a> from the <code>operator</code> module. Think of the <em>grouby</em> operation as a way to return a consecutive keys and groups from your record. In order for it to work you need to your "items" in the list to be sorted by "coach" value that is what the <code>sorted</code> function does here. Of course you need to supply a key function in order to customize your sort order and one way to do this is using a lambda expression like this <code>sorted(d, key=lambda _: _["coach"])</code> but I prefer the alternative approach which is using <code>sorted(d, key=itemgetter('coach'))</code>.That being said you also need to supply the key argument to <code>groupby</code> which is a function computing a key value for each element as mentioned in the <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow">documentation</a>, and again you can use <code>key=itemgetter("coach")</code>.</p>
<pre><code>from itertools import groupby
from operator import itemgetter



def exportplayers(request):
    d = [
        {"players": [{"id": 179, "name": "Santosh"}, {"id": 180, "name": "Hari"}], "coach": "Xavi Alonso"}, 
        {"players": [{"id": 175, "name": "Hitman"}], "coach": "Anna Puyol"}
    ]
    my_list = []
    for g, data in groupby(sorted(d, key=itemgetter('coach')),  key=itemgetter('coach')):
        my_list.append({"coach": g, "players": [player for item in data for player in item["players"]]})
    return HttpResponse(json.dumps(my_list))
</code></pre>
<p>Demo using lambda expressions as key function:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; d = [
...     {"players": [{"id": 179, "name": "Santosh"}], "coach": "Xavi Alonso"}, 
...     {"players": [{"id": 180, "name": "Hari"}], "coach": "Xavi Alonso"}, 
...     {"players": [{"id": 175, "name": "Hitman"}], "coach": "Anna Puyol"}
... ]
&gt;&gt;&gt; sorted_d = sorted(d, key=lambda _: _['coach'])
&gt;&gt;&gt; for g, data in groupby(sorted_d, key=lambda _: _['coach']):
...     print({"coach": g, "players": [player for item in data for player in item["players"]]})
... 
{'coach': 'Anna Puyol', 'players': [{'id': 175, 'name': 'Hitman'}]}
{'coach': 'Xavi Alonso', 'players': [{'id': 179, 'name': 'Santosh'}, {'id': 180, 'name': 'Hari'}]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One possible solution is to build an auxiliary dictionary with the <code>coach</code> as key and list of <code>players</code> as value</p>
<pre><code>d = [
    {"players": [{"id": 179, "name": "Santosh"}], "coach": "Xavi Alonso"},
    {"players": [{"id": 180, "name": "Hari"}], "coach": "Xavi Alonso"},
    {"players": [{"id": 175, "name": "Hitman"}], "coach": "Anna Puyol"}
]
aux = collections.defaultdict(list)
for e in d:
    aux[e['coach']].append(e['players'][0])
</code></pre>
<p><code>aux</code> is now:</p>
<pre><code>&gt;&gt;&gt; aux
defaultdict(&lt;type 'list'&gt;, {'Xavi Alonso': [[{'id': 179, 'name': 'Santosh'}], [{'id': 180, 'name': 'Hari'}]], 'Anna Puyol': [[{'id': 175, 'name': 'Hitman'}]]})
</code></pre>
<p>then you can build your return value with a list comprehension</p>
<pre><code>[{'players':v, 'coach':k} for k,v in aux.items()]
</code></pre>
<p>Which is</p>
<pre><code>[{'players': [{'id': 179, 'name': 'Santosh'}, {'id': 180, 'name': 'Hari'}], 'coach': 'Xavi Alonso'}, {'players': [{'id': 175, 'name': 'Hitman'}], 'coach': 'Anna Puyol'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like this:</p>
<pre><code>coaches = []
new_d = []

for dic in d:
    if dic["coach"] in coaches:
        ind = coaches.index(dic["coach"])
        new_d[ind]["players"].append(dic["players"])
    else:
        coaches.append(dic["coach"])        
        new_d.append(dic)

print new_d
</code></pre>
<p>But here the use of dictionnary becomes strange... What about class ?</p>
</div>
<span class="comment-copy">This is perfect @Francesco</span>
<span class="comment-copy">Perfect! Thanks Vince</span>
