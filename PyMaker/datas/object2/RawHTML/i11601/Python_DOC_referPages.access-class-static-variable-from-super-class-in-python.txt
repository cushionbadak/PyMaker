<div class="post-text" itemprop="text">
<p>I am creating a couple of 'Child' classes which are quite similar and thus wanted to group common methods in a parent class. My problem comes when trying to access static variables of the child classes from the super class.</p>
<p>The following code throws the error:  <code>NameError: name 'var' is not defined</code></p>
<pre><code>class Parent:
    @staticmethod
    def do_something_with_var():
        print(var)

class Child(Parent):
    var = "Hello world"

Child.do_something_with_var()
</code></pre>
<p>Next thing I tried was obviously to declare <code>var</code> in <code>Parent</code>, but the same error persists.</p>
<pre><code>class Parent:
    var = ""

    @staticmethod
    def do_something_with_var():
        print(var)

class Child(Parent):
    var = "Hello world"

Child.do_something_with_var()
</code></pre>
<p>A solution that I found was to receive the sender class, but then the call becomes a bit ugly:</p>
<pre><code>class Parent:
    @staticmethod
    def do_something_with_var(cls):
        print(cls.var)

class Child(Parent):
    var = "Hello world"

Child.do_something_with_var(Child)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are confused over the usage of staticmethods(your third attempt), accessing class variables (second attempt).</p>
<p>What you want to do is <code>classmethods</code>, as shown under (Python 2.7):</p>
<pre><code>class Parent(object):
    @classmethod
    def do_something_with_var(cls):
        print cls.var

class ChildA(Parent):
    var = "Child A"

ChildA.do_something_with_var()  # prints Child A
</code></pre>
<p>This example is equivalent to your third attempt.</p>
</div>
<div class="post-text" itemprop="text">
<p>Static scoping of the method means it is bound to the class scope as a namespace, without any reference to the class.</p>
<p>What you need is to have a <a href="https://docs.python.org/3/library/functions.html#classmethod" rel="nofollow"><code>@classmethod</code></a>, so that you are able to get a reference to the class.</p>
</div>
<span class="comment-copy">Oh, I actually tried your solution but I was still providing Child as an argument... All clear now!</span>
