<div class="post-text" itemprop="text">
<blockquote>
<p>Given:</p>
<pre><code>c = ["red", "blue", "green", "yellow", "purple", "orange", "white", "black"]
</code></pre>
<p>Generate and print a list of 50 random colours. You will need to
  use the <code>random</code> module to get <code>random</code> numbers. </p>
<p>Use <code>range</code> and <code>map</code> to generate the
  required amount of numbers. </p>
<p>Then use <code>map</code> to translate numbers to colours.  Then use <code>map</code> over the colours to count (using <code>filter</code>, and <code>reduce</code> or <code>len</code>) how often
  each colour occurs. Print the result.</p>
</blockquote>
<p>This is what I've got so far:</p>
<pre><code>import random
colours = ['red', 'blue', 'green', 'yellow', 'purple', 'orange', 'white', 'black']
nums = map(lambda x: random.randint(0,7), range(50))
c = map(lambda y: colours[y], nums)
</code></pre>
<p>Which when printed, gives me the required set of 50 random colours from the given list. I'm sort of confused as to where to move from here.</p>
</div>
<div class="post-text" itemprop="text">
<p>This one also uses zip so you have a reference of the color being counted:</p>
<pre><code>zip(colours, map(lambda x: len(filter(lambda y: y==x, c)), colours))
</code></pre>
<p>The way to use reduce to count the elements was giving me some thought, the only way I found of doing it was this:</p>
<pre><code>map(lambda color: reduce(lambda x,y: x+y, map(lambda y: 1,filter(lambda x: x==color, c))), colours)
</code></pre>
</div>
<span class="comment-copy">Are you going to find out how often each colour occurs? You can just use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> to do that by the way.</span>
<span class="comment-copy">Looks like the homework doesn't allow it! :D</span>
<span class="comment-copy">filter is used maybe like this for each color: len(filter(lambda x: x == color, c)) this will give you each of the color's count</span>
<span class="comment-copy">Ugh. In real life, you could just do <code>random_colours = map(lambda x: random.choice(colours), range(50))</code> and get the randomly generated colours automatically, none of this 'get index first' nonsense...</span>
<span class="comment-copy">Yeah the point of this task is to get some knowledge behind the built-in python functions before we start moving on to list comprehension (I assume). Starting from the ground up, so to speak.</span>
