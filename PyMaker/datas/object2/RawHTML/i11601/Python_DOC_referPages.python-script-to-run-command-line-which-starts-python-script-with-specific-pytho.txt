<div class="post-text" itemprop="text">
<p>I need some help. Is there a possibility to let python start the command line in windows and let the command line execute a script in another python version on my pc?</p>
<p>Expample: I have two versions of python on my pc. One is within Anaconda and the other one is pure Python. Now I have some scripts I want to be executed in specific order. My problem is, that the Google Analytics API doesn't work with Anaconda and some other packages (like Simpy) doesn't  work with pure Python. So I need to work with two different versions of python for one project.</p>
<p>Now I want to write a litte python file, which opens the command line and executes the scrips in specific order on my different Python-versions. </p>
<p>I know how to run a python file on the command line. It's via</p>
<pre><code>C:\path_to_python\python.exe C:\path_to_file\file.py
</code></pre>
<p>But how can I make a python script executing that line above in the command line?</p>
<p>Hope someone can help me. </p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
os.system("C:\path_to_python\python.exe C:\path_to_file\file.py")
</code></pre>
<p>os.system() returns the command's exit value so if you need some output from the script this won't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest you look at <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow">subprocess</a></p>
<pre><code># this is new to python 3.5
import subprocess
cmd = subprocess.run(["C:/path_to_python/python.exe", "C:/path_to_script/script.py"], stdout=subprocess.PIPE)
return_string = cmd.stdout

# alternative for getting command output in python 3.1 and higher
import subprocess
return_string = subprocess.check_output(["C:/path_to_python/python.exe", "C:/path_to_script/script.py"])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead you can try writing a <strong>batch file</strong>  in which you can specify the order how you want to run the files and with which version you have to run the file.
lets say first i want to run a file in python2.7 and the later in python3.4 and my files were in d:/pythonfiles</p>
<p><strong>RunningSequence.bat</strong></p>
<pre><code>d:
cd D:\pythonfiles
c:\python27\python.exe python27file.py
c:\python34\python.exe python34file.py 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this and let me know :</p>
<pre><code>import sys

with open(sys.argv[1], 'r') as my_file:
     exec(my_file.read())
</code></pre>
</div>
<span class="comment-copy">Almost. It's working with  import os os.sytem('C:\\path_to_python\\python.exe C:\\path_to_file\\file.py')  Thank you</span>
<span class="comment-copy">Generally there's no reason to use the path to python.exe. You can just use <code>"python"</code>. <a href="https://msdn.microsoft.com/en-us/library/ms682425" rel="nofollow noreferrer"><code>CreateProcess</code></a> appends <code>.EXE</code>, and the application path (i.e. "the directory from which the application loaded") is always searched first.</span>
