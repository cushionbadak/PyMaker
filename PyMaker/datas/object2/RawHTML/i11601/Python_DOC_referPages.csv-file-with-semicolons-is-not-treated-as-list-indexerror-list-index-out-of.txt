<div class="post-text" itemprop="text">
<p>New to Python but finding it very fun to work with! I'm having some trouble with this script I'm writing though.</p>
<p><strong>What the script does:</strong> 
it reads a csv file, loops over all the rows within it and places the information on the second position [1] of each row in a list (a, b, c, d and e). Then it concatenates a string (that is used as a query in another application)</p>
<p><strong>Structure of the csv file:</strong></p>
<pre><code>Leg1,a,TST
Leg2,b,TST
Leg3,c,TST
Leg4,d,TST
Leg5,e,TST
</code></pre>
<p><strong>The problem:</strong>
when I use a csv file that has the comma as delimiter it works fine. When I use a csv file with semicolon as delimiter it results in an error: IndexError: list index out of range. it appears as if the rows in the semicolon delimited file are not perceived as consisting of multiple list items</p>
<p><strong>The code:</strong> </p>
<pre><code>#!/usr/bin/python

import csv

f = open('servers.csv')
starttext = '(b.bl = "f") &amp; ('
query = []
q = 0

csv_f = csv.reader(f)

for row in csv_f:
        query.append('(b.c.n=\"' + row[1] + '\")')
        q += 1

serverlist = ' | '.join(query)

print starttext + serverlist + ')'
f.close()
</code></pre>
<p>I hope someone can point me in the right direction?!</p>
<p>thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>csv.reader</code> function accepts a delimiter argument, see <a href="https://docs.python.org/3/library/csv.html" rel="nofollow">the documentation</a> for more.</p>
<pre><code>rdr = csv.reader(csvfile, delimiter=';')
</code></pre>
<p>To handle quoted fields, you need to look at values for the <a href="https://docs.python.org/3/library/csv.html#csv.QUOTE_ALL" rel="nofollow"><code>quoting</code> argument</a>.</p>
<p>In fact, you can also deduce the file attributes using the <a href="https://docs.python.org/3/library/csv.html#csv.Sniffer" rel="nofollow"><code>csv.Sniffer</code></a> class. This is useful when you don't know the delimiter. Again, directly from the documentation:</p>
<pre><code>with open('example.csv') as csvfile:
    dialect = csv.Sniffer().sniff(csvfile.read(1024))
    csvfile.seek(0)
    reader = csv.reader(csvfile, dialect)
    # ... process CSV file contents here ...
</code></pre>
</div>
<span class="comment-copy">Wouldn't a simple f.readline().replace(";", ",") before the processing do the job? Assuming that the data doesn't contain semicolons in any case. If not maybe provide a version of the code without your solution attempts since it distracts from what you are trying to do.</span>
<span class="comment-copy">Thank you for your reaction! That would work, however, I can't ensure that all csv files it will receive are delimited by either a semicolon or a comma. Your suggestion would only work in one of the two scenarios.</span>
<span class="comment-copy">It would work in both as long as there are no commas or semicolons in the actual data. What are the possible delimiters that the file might contain?</span>
<span class="comment-copy">Ok, I'll edit the code in the original post so that it just has the basic functionality. It works with a comma delimited csv file but not with a semicolon delimited csv file.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/16312104/python-import-csv-file-delimiter-or">http://stackoverflow.com/questions/16312104/python-import-csv-file-delimiter-or</a> This should help you do what you want. The <code>csv.Sniffer()</code> might be the best option for your case.</span>
