<div class="post-text" itemprop="text">
<p>I have a batch script ('A.bat') which is zipping the folder, as follows:</p>
<pre><code>for /d %%X in (D:/sample) do "c:\Program Files\7-Zip\7z.exe" a -mx "%%X.zip" "%%X\*"
</code></pre>
<p>Now i am calling the A.bat from the python script as follows:</p>
<pre><code>import subprocess as sp
start_zip_batch = sp.Popen(['D:/A.bat'],stdin=sp.PIPE, stdout=sp.PIPE, stderr=sp.PIPE)
start_zip_batch.wait()
</code></pre>
<p>So, now what happens is i do get sample.zip folder but its of 0KB size and when i close the console window of the script it shows the complete KB's in it.</p>
<p>So, my question is what shall i add to my python script that makes the folder to get zipped properly and the console also get closed by itself.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at <b>Popen.poll()</b> <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow">https://docs.python.org/3/library/subprocess.html</a></p>
<p>u can check if it is still working like this</p>
<pre><code>while p.poll() is None:
    print("Working...")
    #...
</code></pre>
<p>but probably even <b>Popen.poll()</b> gets stucked because of pipes.</p>
<p>Use the <b>p.communicate</b> then</p>
</div>
<span class="comment-copy">I think <a href="https://docs.python.org/3/library/subprocess.html#popen-objects" rel="nofollow noreferrer">the documentation</a> answers your question: <i>"[<code>wait</code>] will deadlock when using <code>stdout=PIPE</code> or <code>stderr=PIPE</code> and the child process generates enough output to a pipe such that it blocks waiting for the OS pipe buffer to accept more data. Use <code>Popen.communicate()</code> when using pipes to avoid that.</i>" Correct me if I'm wrong.</span>
<span class="comment-copy">As @ChrisP said - the process is probably waiting for you to read the PIPEs, why are you specifying pipes if you are not using them?  The zip file appears zero size because buffers are not flushed until the program completes.</span>
<span class="comment-copy">If you don't care about the output, send it to the <code>nul</code> device, e.g. <code>nul = os.open('//./nul', os.O_RDWR);</code> <code>rc = subprocess.call('D:/A.bat', stdin=nul, stdout=nul, stderr=nul)</code>. You can use <code>os.devnull</code> in place of <code>'//./nul'</code> to make it cross-platform, but since you're using a batch file, I doubt that matters.</span>
