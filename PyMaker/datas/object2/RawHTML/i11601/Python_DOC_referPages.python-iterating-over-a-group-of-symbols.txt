<div class="post-text" itemprop="text">
<p>I'm frequently finding myself in a situation where I have a group of logically connected symbols that I want to iterate over. The obvious solution is to add these symbols to a list, but the duplication is a pain to maintain and I have to trust that if my fellow devs change one they also change the other. </p>
<p>Is there a way to create symbols while simultaneously adding their value to, say, a list?</p>
<p>For example</p>
<pre><code># A group of like symbols that can be used independently in this scope
hippo = 'hippo'
gator = 'gator'
mouse = 'mouse'

# To loop across them I have to put them into a list 
valid_animals = [hippo, gator, mouse]  # Maintain me separately, fool!
</code></pre>
<p>Psuedo-code for what I want</p>
<pre><code># Data structure that declares symbols whose values can be iterated over
valid_animals = {  # Even your mom could maintain this
    hippo = 'hippo'
    gator = 'gator'
    mouse = 'mouse'
}

# Use the symbols by themselves
print "I had a", mouse, "in my house"

# Iterate over the symbols
print mouse in valid_animals  # True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This sounds like what object-oriented programming is for:</p>
<pre><code>class Animal(object):
    list = []
    def __init__(self,name):
        self.name = name
        Animal.list.append(self.name)


mouse = Animal("mouse")
cat = Animal("cat")

print(mouse)      # &lt;test.Animal object at 0x7f835e146860&gt;
print(mouse.name)   # 'mouse'
print(cat.name)    # 'cat'
print(Animal.list)   # ['mouse', 'cat']
</code></pre>
<p>Typically, in Python, classes have an <strong>init</strong> method. This can seem mysterious, but all it really is is some code that is called when an object is instantiated based on the class. (Think of the class as a template for creating objects, and the <strong>init</strong> method runs when the object is created.) </p>
<p>Inside the class, make an empty list. This is a class-level list and can be accessed in your code with Animal.list. It's not connected with any particular instantiated object (i.e., cat or mouse). </p>
<p>When the <strong>init</strong> method is called, the name of the newly-created object is added to the class-level list. So if you create ten animals (Animal('ocelot'), Animal('kangaroo'), etc), you can call Animal.list to see the names of all the animals.</p>
<p>EDIT: You requested a more general solution to your problem: </p>
<pre><code>class Symbol(object):
    types = []
    def __init__(self,name):
        self.name = name
        Symbol.types.append(self.name)
        self.item_list = []


    def add(self,item):
        self.item_list.append(item)


animal = Symbol('animal')

print(animal.item_list)    # []

animal.add('tiger')
animal.add('llama')

print(animal.item_list)    # ['tiger', 'llama']

food = Symbol('food')

food.add('carrot')
food.add('beans')

print(food.item_list)   # ['carrot', 'beans']

print(Symbol.types)   # ['animal', 'food']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A idea it to just maintain the the list : <code>valid=['foo','bar','baz']</code>.</p>
<p>If at a moment you want for convenience to define variable with the same name,<code>locals().update(zip(valid,valid))</code> will do it. </p>
<p>But it's surely a bad idea in serious projects.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure if this is a good idea for any large project, but you could do the following:</p>
<pre><code>def varsFromStrings(*strings):
    newVars = []
    for s in strings:
        globals()[s] = s
        newVars.append(s)
    return newVars
</code></pre>
<p>The function will take a list of strings, create variables for each string, enter these variables into the <code>globals</code> dictionary, and assign the string to each variables, returning the list of strings as a result. Then even your Mom could type:</p>
<pre><code>valid_animals = varsFromStrings('hippo','gator','mouse')
</code></pre>
<p>after which,</p>
<pre><code>print("I had a", mouse, "in my house")

for critter in valid_animals: print(critter)
</code></pre>
<p>both work as expected.</p>
<p>This might be helpful in some smallish programs, but if program maintenance is a concern -- why not just use a regular dictionary of valid animals?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>@T. Arboreus</strong> was right; the solution was object oriented programing. In order to declare symbols in the local scope while simultaneously adding them to an iterable, all I needed was a return value on an append action which could then be assigned to my symbol.</p>
<p>I did this by inheriting from <code>list</code> and adding a <code>bind</code> method.</p>
<pre><code># Iterable object that has a return on append
class SymGroup(list):
    def add(self, value):
        self.append(value)
        return value



# Create my list that represents a group of symbol values
valid_animals = SymGroup()

# Assign and append values at the same time
hippo = valid_animals.bind("hippo")
gator = valid_animals.bind("gator")
mouse = valid_animals.bind("mouse")



# Symbol can be used by itself
print "There is a", mouse, "in my house"

# Can iterate across the symbol values
print mouse in valid_animals  # True
print "horse" in valid_animals  # False
</code></pre>
<p>Now I only have to maintain the one declaration.</p>
</div>
<span class="comment-copy">Would an <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Enum</a> suit your needs?</span>
<span class="comment-copy">Enums are awesome, but there are subtle but significant differences. Most notably, Enums focus on the NAMES of the symbols rather than the VALUES of the symbols. This is especially noticeable when iterating. For example, if I change <code>valid_animals</code> to an Enum, the <code>print mouse in valid_animals</code> returns False.</span>
<span class="comment-copy">It may not be what you want, but you could do <code>print mouse in [i.value for i in valid_animals]</code>, right?  And, you could add a <code>values</code> class method that makes that a bit prettier (e.g., <code>print mouse in valid_animals.values()</code>).</span>
<span class="comment-copy">Using a class value to store the list is an excellent idea and this solves the basic use case in my example, but I'm looking for something more generic that can be used without having to create a new class every time I want a new group. For example, if I had a group of food symbols in addition to the animals group, I'd need a class to store the food symbols lest I mung my animals up.</span>
<span class="comment-copy">Let me know what you think of the above edit.</span>
<span class="comment-copy">The trouble with the new code is the added animals are now no longer symbols in the local scope. :( For example, I cannot call animal.tiger to get "tiger". However, this is great food for thought :)</span>
<span class="comment-copy">If you want to use the dot syntax in that way, you could add the items to a dictionary instead of a list. Also, you can add the action objects to the lists instad of the object names, which is actually more powerful. But you seemed concerned with the symbol names in your initial post. Interesting problem, anyway...thank you</span>
<span class="comment-copy"><code>locals</code> might not work: <a href="http://stackoverflow.com/a/8028772/4996248">stackoverflow.com/a/8028772/4996248</a> . It doesn't really matter though since you are surely correct that this sort of thing isn't a good idea in any serious project.</span>
<span class="comment-copy">I just use that in interactive mode when I am tired to type (and forget some) multiples ' in intensive trash string manipulations....</span>
<span class="comment-copy">So far as I know, dictionaries are the closest thing to what I'm dreaming about here, but in the end, dictionary keys and symbols are very different beasts and don't quite play the same. Since keys must be primitives, they usually end up being magic strings and numbers, which I'd rather avoid if possible. Also, linting and other code intelligence tools are significantly more helpful with symbols.</span>
