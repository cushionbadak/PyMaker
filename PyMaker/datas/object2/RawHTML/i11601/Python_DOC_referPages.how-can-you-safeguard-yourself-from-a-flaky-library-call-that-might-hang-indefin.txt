<div class="post-text" itemprop="text">
<p>Suppose you find yourself in the unfortunate position of having a dependency on a poorly behaved library. Your code needs to call FlakyClient.call(), but sometimes that function ends up hanging for an unacceptable amount of time.</p>
<p>As shown below, one way around this is to wrap the call in its own <strong>Process</strong>, and use the timeout parameter in the <strong>join</strong> method to define a maximum amount of time that you're willing to wait on the FlakyClient. This provides a good safeguard, but it also prevents the main body of code from reacting to the result of calling FlakyClient.call(). The only way that I know of addressing this other problem (getting the result into the main body of code) is by using some cumbersome IPC technique.</p>
<p>What is a clean and pythonic way of dealing with these two problems? I want to protect myself if the library call hangs, and be able to use the result if the call completes.</p>
<p>Thanks!</p>
<pre><code>from multiprocessing import Process
from flaky.library import FlakyClient


TIMEOUT_IN_SECS = 10

def make_flaky_call():
    result = FlakyClient.call()

proc = Process(target=make_flaky_call)
proc.start()
proc.join(TIMEOUT_IN_SECS)
if proc.is_alive():
    proc.terminate()
    raise Exception("Timeout during call to FlakyClient.call().")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are using Process I would suggest you use a <a href="https://docs.python.org/2/library/multiprocessing.html#multiprocessing.Queue" rel="nofollow">Queue</a> to handle result transfer and indirectly also manage function timeout. </p>
<pre><code>from multiprocessing import Process, Queue
from flaky.library import FlakyClient
import time

TIMEOUT_IN_SECS = 10

def make_flaky_call(queue):
    result = FlakyClient.call()
    queue.put(result)
    queue.put('END')

q = Queue()
proc = Process(target=make_flaky_call, args=(q,))
proc.start()
content = 0
result = None
while content != 'END':
    try:
        content = q.get(timeout=TIMEOUT_IN_SECS)
        if content != 'END':
            result = content
    except Empty:
        proc.terminate()
        raise Exception("Timeout during call to FlakyClient.call().")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I cannot speak to Python 2.7, but in Python 3, the <em>correct</em> way to handle this is to make use of <code>asyncio</code> and the concept of <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow">futures</a>.</p>
<pre><code>import concurrent

def make_flaky_call():
    return FlakyClient.call()

timeout = 10

with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
    future = executor.submit(make_flaky_call) # get a future object
    try:
        result = await future.result(timeout = timeout)
    except concurrent.futures.TimeOutError:
        # if a timeout occurs on the call, do something
        result = None # default value
</code></pre>
<p>This is fairly Pythonic. You can integrate this with the main body of the code. It correctly uses <code>try-except</code> for error handling. It comes with an inbuilt timeout. It only works in Python 3.5 (thanks to <code>await</code> - but changing to <code>yield from</code> makes it compatible with Python 3.4).</p>
<p>For Python 2.7, unfortunately, the right way to handle that is to do what you are currently doing. </p>
</div>
<span class="comment-copy">You can use threads, or lightweight constructs like greenlets.</span>
<span class="comment-copy">Instead of waiting for it could you call it a bit earlier then you will need it and see if it has finished processing by the time it is needed?</span>
<span class="comment-copy">I like to think this question can best be solved by using <code>asyncio</code>'s event loops and running your functions asynchronously (see <a href="http://stackabuse.com/python-async-await-tutorial/" rel="nofollow noreferrer">example</a>), but <code>asyncio</code> is not available before Python 3.4.</span>
<span class="comment-copy">@TopherFischer: Why do you need to integrate your task back into the main body of code?</span>
<span class="comment-copy">What do you want to do if the library call hangs? Move on, but let the call finish naturally, or terminate the call? If the latter then you need to know if this flaky call is implemented in pure python or in C. If the latter you should call the function from another process (if the function doesn't release the GIL, then you must).</span>
<span class="comment-copy">Thanks for the Python 3 explanation. This approach is what I'm used to seeing in Java-land. Unfortunately I'm still working on Python 2.7 code.</span>
