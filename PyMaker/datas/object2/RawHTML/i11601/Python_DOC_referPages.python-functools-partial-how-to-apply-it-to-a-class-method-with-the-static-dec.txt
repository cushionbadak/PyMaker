<div class="post-text" itemprop="text">
<p>I know there must be a way to do this.  But I'm getting the error "TypeError: the first argument must be callable".</p>
<p>What could I do differently to make this work?</p>
<pre><code>class FaxMachine(object):
    MODEL_NO = '100'

    @staticmethod
    def load_fax(fax, error=''):
        # send fax here

    fail_fax = functools.partial(load_fax, error='PC LOAD LETTER')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>staticmethod</code> objects are not callable. They're <a href="https://docs.python.org/3/glossary.html#term-descriptor" rel="nofollow"><em>descriptors</em></a> that keep references to original functions in their <code>__func__</code> attributes.</p>
<p>So the following works:</p>
<pre><code># Note: apply staticmethod again
fail_fax = staticmethod(partial(load_fax.__func__, error='PC LOAD LETTER'))
</code></pre>
<p>You could also define a helper function in the class namespace, to avoid unnecessary attribute lookups:</p>
<pre><code>def _load_fax(fax, error=''):
    # ...

# _load_fax is an ordinary function
load_fax = staticmethod(_load_fax)
fail_fax = staticmethod(partial(_load_fax, error='PC LOAD LETTER'))
</code></pre>
<p>Though the correct Python 3.4+ solution is to use the <a href="https://docs.python.org/3/library/functools.html#functools.partialmethod" rel="nofollow"><code>partialmethod</code></a>, which was designed to work with descriptors:</p>
<pre><code>fail_fax = partialmethod(load_fax, error='PC LOAD LETTER')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's probably a smarter way to do it but this seems to work fine.</p>
<pre><code>import functools

class FaxMachine(object):
    MODEL_NO = '100'

    @staticmethod
    def load_fax(fax, error=''):
        print error or fax

FaxMachine.fail_fax = functools.partial(FaxMachine.load_fax, error='PC LOAD LETTER')

f = FaxMachine()
f.load_fax('hi')
f.fail_fax('hi')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>methods and functions behave differently when "called": functions are called directly by using <code>__call__</code> while methods (not generally methods, I think only descriptors) are called by <code>__get__</code>. </p>
<p>Therefore the <code>functools</code>-module contains another <code>partial</code> for methods: <a href="https://docs.python.org/3.5/library/functools.html#functools.partialmethod" rel="nofollow"><code>functools.partialmethod</code></a>:</p>
<pre><code>functools.partialmethod(load_fax, error='PC LOAD LETTER')
</code></pre>
<p>The official documentation contains a very good explanation especially in regard to <code>staticmethod</code>.</p>
</div>
<span class="comment-copy">Is that only in Python 3?</span>
<span class="comment-copy">It seems like <a href="https://docs.python.org/3.5/library/functools.html#functools.partialmethod" rel="nofollow noreferrer"><code>functools.partialmethod</code></a> was introduced in python 3.4.</span>
