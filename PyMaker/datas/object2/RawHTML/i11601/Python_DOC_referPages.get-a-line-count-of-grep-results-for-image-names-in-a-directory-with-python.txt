<div class="post-text" itemprop="text">
<p>I have seen a lot of solutions, but I am not seeing one that works I am trying to grep every file in a directory in Python for a specific string, count the number of lines that the grep returns, and record this in python. Here's what I have tried most recently:</p>
<pre><code>for f in try_files:
    print("trying %s"%f)
    s = subprocess.Popen("grep -r '%s' ../dir/*"%f)
    print(s)
</code></pre>
<p>I am getting this error:</p>
<pre><code>trying accept_button_off_transparent.png
Traceback (most recent call last):
  File "findImages.py", line 17, in &lt;module&gt;
    s = subprocess.Popen("grep -r %s '../dir/*'"%f)
  File "/Users/agsrn/anaconda3/lib/python3.5/subprocess.py", line 950, in __init__
    restore_signals, start_new_session)
  File "/Users/agsrn/anaconda3/lib/python3.5/subprocess.py", line 1544, in _execute_child
    raise child_exception_type(errno_num, err_msg)
FileNotFoundError: [Errno 2] No such file or directory: "grep -r accept_button_off_transparent.png '../dir/*'"
Agsrn-MacBook-Pro:images agsrn$ emacs findImages.py
Agsrn-MacBook-Pro:images agsrn$ python findImages.py
['accept_button_off_transparent.png', 'accept_button_on.png', 'accept_button_on_food.png', 'accept_button_on_transparent.png']
trying accept_button_off_transparent.png
Traceback (most recent call last):
  File "findImages.py", line 17, in &lt;module&gt;
    s = subprocess.Popen("grep -r '%s' ../dir/*"%f)
  File "/Users/agsrn/anaconda3/lib/python3.5/subprocess.py", line 950, in __init__
    restore_signals, start_new_session)
  File "/Users/agsrn/anaconda3/lib/python3.5/subprocess.py", line 1544, in _execute_child
    raise child_exception_type(errno_num, err_msg)
</code></pre>
<p>Ultimately I want to execute this query from within Python:</p>
<pre><code>grep -r "filename" ../dir/* | wc -l
</code></pre>
<p>...And get that line count back as a # I can use for other logic. What's the best way to do this?</p>
<p>To be clear, my ultimate goal is to count how many times a particular string is mentioned by any/all files in a directory for a list of a bunch of strings. I am looking for strings inside files, not just file names. I suspect grep is a much faster solution to do this than Python, but it's inside a larger Python routine, hence the proposed hybrid solution. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you accept another solution, here it is. Counting files can be performed easily with glob:</p>
<pre><code>import glob
files = glob.glob("filename")
nfiles = len(files) 
</code></pre>
<p>In which "filename" has the patter you want. Then, you can use nfiles for your logic. </p>
</div>
<div class="post-text" itemprop="text">
<p>Alternatively to my other answer, you may want to try and do it entirely in python this way:</p>
<pre><code>import re   # regex module

for filename in files:
    n = 0
    for line in open(filename, 'r'):
        if re.match(r"...", line):
            n += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Probably because of this, from the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow">docs</a>:
"If args is a string, the interpretation is platform-dependent [...]. On POSIX, if args is a string, the string is interpreted as the name or path of the program to execute."</p>
<p>The error you see says that your string is interpreted as a file name, so it fits this description. Try instead to pass args as a list: </p>
<pre><code>subprocess.Popen(["grep", "-r", f, "../dir/*"], shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following shell command will output the count that you want:</p>
<pre><code>find ../dir -type f -exec cat {} + | grep -c 'filename'
</code></pre>
<p>The <code>find</code> command will print the contents of all the files in the directory, and the <code>-c</code> option to <code>grep</code> tells it to print the count of matches instead of the matching lines.</p>
<p>You can run this command with <code>subprocess.Popen()</code>. You need to use the <code>shell=True</code> option so it processes this as a shell command, not the name of a program to run. And to get the output of the command, you need to specify <code>stdout=PIPE</code> and use <code>communicate</code> to read from it.</p>
<pre><code>pipe = subprocess.Popen("find ../dir -type f -exec cat {} + | grep -c '%s'"%f, shell=True, stdout=PIPE)
count = int(pipe.communicate()[0]);
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/2502833/store-output-of-subprocess-popen-call-in-a-string">Store output of subprocess.Popen call in a string</a></p>
</div>
<span class="comment-copy">You are open to have a solution for counting files that works? Or you only want to do that with grep?</span>
<span class="comment-copy">I am not trying to count files. I am trying to grep all files in a directory for a particular string, and I am planning to do this for a lot of strings to identify strings that are not used inside any file inside the directory from a list of strings.</span>
<span class="comment-copy">Yes, but as I was saying this is likely to be quite a bit slower than grep.</span>
<span class="comment-copy">Definitely. Some also prefer Perl for that kind of thing.</span>
<span class="comment-copy">Thanks for this suggestion. Unfortunately, this solution gets me back to another problem I have. When I run this, no error, but I get the following: grep: ../dir/*: No such file or directory even though there IS such a file/directory.</span>
<span class="comment-copy">Have you tried to print <code>glob.glob('../dir')</code>? So that we are sure. Also in one version in your question you search for "../dir*", while the other is "../dir/*" (with slash).</span>
<span class="comment-copy">@helloB Ok you need that: <a href="http://stackoverflow.com/questions/9997048/python-subprocess-wildcard-usage" title="python subprocess wildcard usage">stackoverflow.com/questions/9997048/…</a>. I edit my answer with it. Note the warning though: <a href="https://docs.python.org/3/library/subprocess.html#security-considerations" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
