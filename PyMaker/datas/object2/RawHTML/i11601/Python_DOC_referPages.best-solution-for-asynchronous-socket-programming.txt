<div class="post-text" itemprop="text">
<p>Recently I've started working on Python socket server which handles raw UTF input from Java's streams and sends the result back on all of the currently connected servers, and that works fine, but I'm so pumped and worried about thread usage: you see, I'm using about 2 threads per each connection and I'm worried that CPU will die out that way soon, so, I need a better solution now so that my server could handle hundreds of connections. </p>
<p>I have two ideas for that:</p>
<ol>
<li>Using a non-blocking IO</li>
<li>Having a fixed amount of thread pools (i.e. <code>FixedThreadPool</code> as it called in Java) </li>
</ol>
<p>I have no idea which one is gonna work better, so I'd appreciate your advice and ideas.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>I would advise not to invent a bicycle and to use some framework for async/streaming processing. For example <a href="http://www.tornadoweb.org/en/stable/" rel="nofollow">Tornado</a>.</p>
<p>Also if you can consider using Go language - a lot of developers (<em>including me</em>) are switching from Python to Go for this kind of  tasks. It's designed from ground up to support async processing.</p>
</div>
<span class="comment-copy">I'd go for AnyEvent, but that's not Python. See <a href="http://search.cpan.org/perldoc?AnyEvent" rel="nofollow noreferrer">search.cpan.org/perldoc?AnyEvent</a> Handles 500-1000 concurrent connections for me with few percentages CPU time (but that depends on your type of data and connection).</span>
<span class="comment-copy">3) <i>bleep</i> threads and use an event-based framework instead.</span>
<span class="comment-copy">I'll take a look on that after a school, thanks!</span>
<span class="comment-copy">The asyncio package, included in the standard library of Python 3.4 on wards, much improved in python 3.5, is made for non-blocking I/O. I would have a lookfor it in the docs: <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer">docs.python.org/3/library/asyncio.html</a>. There are also quite some tutorials out there by now.</span>
<span class="comment-copy">There are many asynchronous network libraries in Python e.g.,  gevent, twisted and Python 3 only asyncio, curio.</span>
<span class="comment-copy">Have been thinking about Go lang for a while now, now I think it's time to try it out.. Appreciate you! :p</span>
<span class="comment-copy">One vote for <b>Tornado</b>. I have used it for a long time. <b>Tornado</b> has very good performance. You can define fixed ThreadPool too (with <code>ThreadPoolExecutor</code> from module <code>concurrent.futures</code>). But you are right. <code>Go</code> and <code>node.js</code> are better for these tasks</span>
