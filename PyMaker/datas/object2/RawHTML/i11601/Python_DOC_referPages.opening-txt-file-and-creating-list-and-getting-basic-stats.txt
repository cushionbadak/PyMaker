<div class="post-text" itemprop="text">
<p>I am trying to open a textfile called state_meet.txt file; the info is formatted as</p>
<p>gymnastics_school,participant_name,all-around_points_earned
see example:</p>
<pre><code>Lanier City Gymnastics,Ben W.,55.301 
Lanier City Gymnastics,Alex W.,54.801 
Lanier City Gymnastics,Sky T.,51.2 
Lanier City Gymnastics,William G.,47.3 etc..
</code></pre>
<p>and create functions to get info such as:</p>
<p>The total count of gymnasts that participated in the state meet.
The first place score.
The last place score.
The score differential between the first and last place.
The average score for all gymnasts.
The median score. (The median is the grade at the mid-point of a sorted list. If there is an even number of elements in the list, the median is the average of the 2 middle elements.)
The average of all scores above the median (not including the median).
The average of all scores below the median (not including the median).
The output should look as such</p>
<p>Summary of Data:
Number of gymnasts: 103
First place score: 143.94
Here's the code I have so far:</p>
<pre><code>with open('state_meet.txt','r') as f:   
 for line in f:
    allt = []
    values = line.split()
print(values[3])

#first
max_val = max(values[3])
int(max_val)

print(max_val)


#last
min_val = min(values[3])
int(min_val)

print(min_val)

#Mean
total = sum(input_list)
length = len(input_list)
for nums in [input_list]:
mean_val = total / length
float(mean_val)


#Median
sorted(input_list)
med_val = sorted(lst)
lstLen = len(lst)
index = (lstLen - 1) // 2
</code></pre>
<p>this is what i have so far but my text is reading it as W.,55.301 instead of 55.301 and giving me errors</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>You should use <code>split(',')</code> to replace <code>split()</code>.</li>
<li>Use <code>values[2]</code> to get the third item of list <code>values</code>.</li>
<li>list <code>allt</code> seems no use.</li>
<li>It seems that no matter how many lines are there in <code>state_meet.txt</code>, <code>values</code> always gets the last line data.</li>
</ol>
<hr/>
<p>I guess the things you want to do:</p>
<pre><code>import collections
names = ["gymnastics_school", "participant_name", "all_around_points_earned"]
Data = collections.namedtuple("Data", names)

data = []

with open('state_meet.txt','r') as f:   
    for line in f:
        line = line.strip()
        items = line.split(',')
        items[2] = float(items[2])
        data.append(Data(*items))

# max value
max_one = max(data, key=lambda d:d.all_around_points_earned)
print(max_one.all_around_points_earned)

# min value
min_one = min(data, key=lambda d:d.all_around_points_earned)
print(min_one.all_around_points_earned)

# mean value
total = sum(d.all_around_points_earned for d in data)
mean_val = total/len(data)
print(mean_val)

# median value
sorted_data = sorted(data, key=lambda d:d.all_around_points_earned)
if len(data)%2==0:
    a = sorted_data[len(data)//2].all_around_points_earned
    b = sorted_data[len(data)//2-1].all_around_points_earned
    median_val = (a+b)/2
else:
    median_val = sorted_data[(len(data)-1)//2].all_around_points_earned
print(median_val)
</code></pre>
<hr/>
<p>Let me explain more:</p>
<p>First, I define a namedtuple type called "Data" with the the item names(gymnastics_school...). Then I can use <code>d = Data('school', 'name', '50.0')</code> to create a namedtuple <code>d</code>. We can easily fetch the item values by using <code>.</code> to get attributes.</p>
<pre><code>&gt;&gt;&gt; names = ["gymnastics_school", "participant_name", "all_around_points_earned"]
&gt;&gt;&gt; Data = collections.namedtuple("Data", names)
&gt;&gt;&gt; d = Data('school', 'name', '50.0')
&gt;&gt;&gt; d.gymnastics_school
'scholl'
&gt;&gt;&gt; d.participant_name
'name'
&gt;&gt;&gt; d.all_around_points_earned
'50.0'
</code></pre>
<p>Next, when we iterate the lines in file object, use string method <code>strip</code> to remove blanks and new lines. It makes the line more clean. Then <code>split(',')</code> can help us splitting the line with specified delimiter <code>,</code>.
Here, we do a conversion with function <code>float</code> because third item in the split list <code>items</code> is a float(but it is string in the file). Finally, use namedtuple <code>Data</code> to create data then append to list <code>data</code>.</p>
<p>Next, builtin function <code>max</code> and <code>min</code> can help us find the max/min item. But each thing in data is a namedtuple, we should use a lambda function to fetch the points then use them as keys to pick the max/min one.
Also, function <code>sum</code> let us compute the summation without a loop. Here, we have to extract the points to get their summation so we pass a generator <code>d.all_around_points_earned for d in data</code> to <code>sum</code>.</p>
<p>I get the median value by sorting <code>data</code> then get the middle one. When the number of data is odd, we just pick the center number. But if it is even, we should pick the middle "two" and compute their mean.</p>
<hr/>
<p>Hope my answer can help you!</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a comma-separated values (csv) file. Use the <code>csv</code> module.</p>
<pre><code>import csv

data = []

with open("state_meet.txt") as f:
    reader = csv.DictReader(f, fieldnames=["school", "participant", "score"])
    for line in reader:
        data.append(line)

# first place
record = max(data, lambda d: d["score"])
best_score = int(record["score"])

# last place
record = min(data, lambda d: d["score"])
worst_score = int(record["score"])

# Mean score
mean = sum(d["score"] for d in data) / len(data)

# Median score
median = sorted([d["score"] for d in data])[(len(data) - 1) // 2]
</code></pre>
<p><a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow"><code>csv.DictReader</code></a> reads the lines of your csv file and automatically converts each one to a dictionary, keyed by whatever you like. This is perhaps easier to read than the <code>collections.namedtuple</code> suggestion in dokelung's answer, though <code>namedtuple</code> is equally valid. The key here is that we can keep the entire record around instead of throwing away everything but the score.</p>
</div>
<div class="post-text" itemprop="text">
<p>split() by default splits on whitespace, did you mean 
    values = line.split(',')
to split on commas?</p>
<p><a href="https://docs.python.org/2/library/stdtypes.html#str.split" rel="nofollow">https://docs.python.org/2/library/stdtypes.html#str.split</a></p>
</div>
<span class="comment-copy">the median part is giving me errors</span>
<span class="comment-copy">Please try the new one</span>
