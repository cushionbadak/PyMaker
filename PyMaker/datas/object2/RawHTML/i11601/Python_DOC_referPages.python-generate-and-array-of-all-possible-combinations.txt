<div class="post-text" itemprop="text">
<p>I have a very straightforward combination problem. I have two arrays (a and b). Array a indicates all the values one of the three slots in array b can take on. Each slot in array b can have a value between 1 and 5. An example of which would be [1, 4, 5]. I would like to generate an array (c) with all possible combinations. I like to extend the basic example larger arrays.</p>
<p>Input: </p>
<pre><code>a = [1, 2, 3, 4, 5]
b = [1, 2, 3]
</code></pre>
<p>Output:</p>
<pre><code>c = [[1, 1, 1], [1, 1, 2],[1, 1, 3], [1, 1, 4], [1, 1, 5],
     [1, 2, 1], [1, 2, 2],[1, 2, 3], [1, 2, 4], [1, 2, 5],
     [1, 3, 1], [1, 3, 2],[1, 3, 3], [1, 3, 4], [1, 3, 5],
     [1, 4, 1], [1, 4, 2],[1, 4, 3], [1, 4, 4], [1, 4, 5],
     [1, 5, 1], [1, 5, 2],[1, 5, 3], [1, 5, 4], [1, 5, 5],
     [2, 1, 1], [2, 1, 2],[2, 1, 3], [2, 1, 4], [2, 1, 5],
     [2, 2, 1], [2, 2, 2],[2, 2, 3], [2, 2, 4], [2, 2, 5],
     [2, 3, 1], [2, 3, 2],[2, 3, 3], [2, 3, 4], [2, 3, 5],
     [2, 4, 1], [2, 4, 2],[2, 4, 3], [2, 4, 4], [2, 4, 5],
     [2, 5, 1], [2, 5, 2],[2, 5, 3], [2, 5, 4], [2, 5, 5],
     [3, 1, 1], [3, 1, 2],[3, 1, 3], [3, 1, 4], [3, 1, 5],
     [3, 2, 1], [3, 2, 2],[3, 2, 3], [3, 2, 4], [3, 2, 5],
     [3, 3, 1], [3, 3, 2],[3, 3, 3], [3, 3, 4], [3, 3, 5],
     [3, 4, 1], [3, 4, 2],[3, 4, 3], [3, 4, 4], [3, 4, 5],
     [3, 5, 1], [3, 5, 2],[3, 5, 3], [3, 5, 4], [3, 5, 5],
     [4, 1, 1], [4, 1, 2],[4, 1, 3], [4, 1, 4], [4, 1, 5],
     [4, 2, 1], [4, 2, 2],[4, 2, 3], [4, 2, 4], [4, 2, 5],
     [4, 3, 1], [4, 3, 2],[4, 3, 3], [4, 3, 4], [4, 3, 5],
     [4, 4, 1], [4, 4, 2],[4, 4, 3], [4, 4, 4], [4, 4, 5],
     [5, 5, 1], [5, 5, 2],[5, 5, 3], [5, 5, 4], [5, 5, 5],
     [5, 1, 1], [5, 1, 2],[5, 1, 3], [5, 1, 4], [5, 1, 5],
     [5, 2, 1], [5, 2, 2],[5, 2, 3], [5, 2, 4], [5, 2, 5],
     [5, 3, 1], [5, 3, 2],[5, 3, 3], [5, 3, 4], [5, 3, 5],
     [5, 4, 1], [5, 4, 2],[5, 4, 3], [5, 4, 4], [5, 4, 5],
     [5, 5, 1], [5, 5, 2],[5, 5, 3], [5, 5, 4], [5, 5, 5]]
</code></pre>
<p>Solution for the problem above:</p>
<pre><code>d = []
for i in range(len(a)):
    for j in range(len(a)):
        for k in range(len(a)):
            e = []
            e.append(i+1)
            e.append(j+1)
            e.append(k+1)
            d.append(e)
</code></pre>
<p>I am looking for a more generic way. One which can accommodate larger arrays (see below)  without the need to use a nested for loop structure. I searched for a comparable example, but was unable to find one on stackoverflow.</p>
<p>Input:</p>
<pre><code>a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for <a href="https://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product()</code></a>.</p>
<pre><code>a = [1, 2, 3, 4, 5]
b = 3  # Actually, you just need the length of the array, values do not matter

c = itertools.product(a, repeat=b)
</code></pre>
<p>Note that this returns an iterator, you may need to cast it using <code>list()</code> but be aware this can take forever and highly consume memory if the sizes grow.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the general case, you should of course use the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow"><code>itertools</code></a> module, in this particular case <code>itertools.product</code>, as explained in the other answer.</p>
<p>If you want to implement the function yourself, you can use recursion to make it applicable to any array sizes. Also, you should probably make it a generator function (using <code>yield</code> instead of <code>return</code>), as the result could be rather long. You can try something like this:</p>
<pre><code>def combinations(lst, num):
    if num &gt; 0:
        for x in lst:
            for comb in combinations(lst, num - 1):
                yield [x] + comb
    else:
        yield []
</code></pre>
</div>
<span class="comment-copy">Take a look at python <a href="https://docs.python.org/2/library/itertools.html" rel="nofollow noreferrer">itertools</a>. The combination method does what I think you are looking for.</span>
<span class="comment-copy">From your description, I also don't think you need an array for <code>b</code>, just an integer value that specifies the array's length</span>
<span class="comment-copy">I had a similar question when I ran a MonteCarlo simulation over a number of toleranced variables, but I found that it didn't make sense to generate an array of all possible combinations, when it was so easy (see your own code) to generate those combinations on the fly.</span>
<span class="comment-copy">This looks a lot more like the Cartesian product to me than combinations, in which case it's a duplicate of many, many previous questions.</span>
<span class="comment-copy">@DSM You're right, it should be product.</span>
