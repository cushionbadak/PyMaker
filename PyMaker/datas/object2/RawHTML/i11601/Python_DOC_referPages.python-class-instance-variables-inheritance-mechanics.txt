<div class="post-text" itemprop="text">
<p>If I run this code:</p>
<pre><code>class Super:    
    def __init__(self, name):
        self.name = name


class Sub(Super):
    def publ(self):
        print("works")

a = Sub()
</code></pre>
<p>as planned it succesfully fails with this message:</p>
<pre><code>TypeError: __init__() takes exactly 2 arguments (1 given)
</code></pre>
<p>but it gives me bugging question:</p>
<p>Where the information is stored about Sub class requirement for the argument entry? I mean how SUB() knows that it needs "name" as the argument?
What is mechanism defining how it inherits "that knowledge" from Super().</p>
</div>
<div class="post-text" itemprop="text">
<p>The Python Tutorial <a href="https://docs.python.org/3/tutorial/classes.html#inheritance" rel="nofollow">has a section on inheritance</a>.</p>
<blockquote>
<p>if a requested attribute is not found in the class, the search proceeds to look in the base class. This rule is applied recursively if the base class itself is derived from some other class.</p>
</blockquote>
<p>What happens when you call <code>Sub()</code> is that the interpreter looks in the class object for an attribute named <code>__init__</code>.  If it finds one it will use it.  If it doesn't find it (which is the case in your example), it will search through the class's base classes.  In your example it finds the <code>__init__</code> method inherited from class <code>Super</code>.  The interpreter will proceed to call that method.</p>
<p>You can fix your example in either of the following ways:</p>
<pre><code>a = Sub('John Doe')
</code></pre>
<p>or:</p>
<pre><code>class Sub(Super):
    def __init__(self):
        super(Sub, self).__init__("My Name Is Sub")

    def publ(self):
        print("works")
</code></pre>
</div>
<span class="comment-copy">So, is there method to retrieve "name" attribute in Super() through Sub? Something like this: a.__class__.__bases__[0].__dict__</span>
<span class="comment-copy">You reference an attribute normally.  Eg <code>print("I have a name:", self.name)</code></span>
<span class="comment-copy">I am looking more like a meta information. Lets say I don't need value as it is. I am looking for structure and relation type information.  Is there "Xpath like" way to check what Super() will require, because when I check with "a.__class__.__bases__[0].__dict__ " it shows me <b>init</b> in dict, but it doesn't show "name". Where Sub() "sees" that name as a meta info that it will use and is there a way to see it me from instance Sub() perspective.</span>
<span class="comment-copy">I don't understand this new question. Python does have facilities for introspection. You can traverse the class, its bases, their attributes, function/method object attributes, etc. Also, I can tell you that the <i>class</i> object does not have any attribute <i>name</i>. Instances of the class will, but only after the assignment statement is executed.</span>
