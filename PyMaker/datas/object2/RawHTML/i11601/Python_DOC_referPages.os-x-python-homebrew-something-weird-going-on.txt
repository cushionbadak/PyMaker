<div class="post-text" itemprop="text">
<p>hoping someone can help me out. I followed a couple of guides about setting up a new machine for python development. (<a href="http://docs.python-guide.org/en/latest/starting/install/osx/" rel="nofollow">one</a>) (<a href="https://hackercodex.com/guide/python-development-environment-on-mac-osx/" rel="nofollow">two</a>)</p>
<p>I followed pretty much everything but I am really confused about the changes to my <code>.bash_profile</code> </p>
<p>When I comment out <code>export PATH=/usr/local/bin:$PATH</code> in <code>.bash_profile</code> and type <code>which python</code> into terminal, I see what I expect.</p>
<pre><code>which python
/usr/local/bin/python
python
Python 2.7.11 (default, Jan 22 2016, 08:29:18) 
[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
</code></pre>
<p>What is happening in bash_profile, how come it doesn't matter if I comment everything out, save it, and run the commands?</p>
<p>More importantly, how do I get to my default install of python and make sure it is still there and unaffected? Am I correct in understanding that the above version is the python installed by Homebrew?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>.bash_profile</code> is read only when the Bash shell is loaded, so changing this file after the shell has been loaded doesn't affect it. To see the changes after modifying and saving the file, you need to restart the shell or run <code>source ~/.bash_profile</code>.</p>
<p>Modifying the <code>PATH</code> environment variable doesn't affect the Python itself, it only modifies where it's searched first to be executed, when you will run <code>python ...</code>. E.g., if you have python installed in <code>/a/python</code> and <code>/b/python</code>, then: </p>
<ul>
<li><p>if your <code>PATH</code> is set to <code>/a/python:/b/python:$PATH</code> and you run <code>python ....py</code> actually the <code>/a/python ....py</code> is executed;</p></li>
<li><p>if your <code>PATH</code> is set to <code>/b/python:/a/python:$PATH</code> and you run <code>python ....py</code> actually the <code>/b/python ....py</code> is executed.</p></li>
</ul>
<p>If you didn't modified the <code>PATH</code> (e.g. but executing something like <code>export PATH=/usr/local/bin:$PATH</code> in the shell or adding it to <code>.bash_profile</code>), then executing <code>which python</code> should show the default python path. </p>
<p>In the case you described, it shows you the python, that you set it to use by modifying the <code>PATH</code>. To see the default one, comment the  <code>export...</code> string, save the <code>.bash_profile</code> file and either run <code>source ~/.bash_profile</code> or restart the shell, and only then see the <code>which python</code> output.</p>
</div>
<span class="comment-copy">Thanks for the explanation. My problem is that I can't seem to show the default python path for some reason. I commented the <code>export</code> string, saved and ran source ~/.bash_profile and still see the new homebrew install. Any ideas?</span>
<span class="comment-copy">Ok, after commenting everything out in .bash_profile I am able to open default python/ <code>which python</code> produces <code>/usr/bin/python</code> . Now, can anyone tell me the best practices to modify <code>PATH</code> so that homebrew python is default? Is it by editing /etc/paths or either .bash_profile or .bashrc?</span>
<span class="comment-copy">@nrksj, it depends... If you want to change it system wide - do it in <code>/etc/environment</code>, for all users - <code>/etc/profile</code>, for single user - in <code>.profile</code>/<code>.bash_profile</code> in his/her home dir (e.g. <code>~/.profile</code>/<code>~/.bash_profile</code>). In <code>/etc/environment</code> just add to the <code>PATH</code> setting, in other files add <code>export PATH=/new/path/part:$PATH</code>. Important note: many system programs rely on system wide Python, so e.g. if system Python is Python2, and you modify it to Python3 - this may lead to breaking your system. So depending on what you are trying to achieve, it may be best to modify for single user.</span>
<span class="comment-copy">thank you for the explanation. I will think a little more about how to go about it. My more experienced colleagues don't even bother with anything like homebrew, preferring to use the system python so maybe I will do the same.</span>
<span class="comment-copy">@nrksj, you can do it, the issue is when system Python version is different from the one you need for your code, i.e. Python 2 and Python 3. In order not to break system libraries, you should use virtual environment, take a look at <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">pyvenv</a> and <a href="https://virtualenv.pypa.io/en/latest/" rel="nofollow noreferrer">virtualenv</a>. P.S. If you are satisfied with the answer, you might want to mark it as accepted answer.</span>
