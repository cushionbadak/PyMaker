<div class="post-text" itemprop="text">
<p>Surprisingly, there's no explicit documentation for <code>__weakref__</code>. Weak references are explained <a href="https://docs.python.org/2/library/weakref.html">here</a>. <code>__weakref__</code> is also shortly mentioned in the documentation of <code>__slots__</code>. But I could not find anything about <code>__weakref__</code> itself.</p>
<p>What exactly is <code>__weakref__</code>?
- Is it just a member acting as a flag: If present, the object may be weakly-referenced?
- Or is it a function/variable that can be overridden/assigned to get a desired behavior? How?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__weakref__</code> is just an opaque object that references all the weak references to the current object. In actual fact it's an instance of <code>weakref</code> (or sometimes <code>weakproxy</code>) which is both a weak reference to the object and part of a doubly linked list to all weak references for that object. </p>
<p>It's just an implementation detail that allows the garbage collector to inform weak references that its referent has been collected, and to not allow access to its underlying pointer anymore. </p>
<p>The weak reference can't rely on checking the reference count of the object it refers to. This is because that memory may have been reclaimed and is now being used by another object. Best case scenario the VM will crash, worst case the weak reference will allow access to an object it wasn't originally referring to. This is why the garbage collector must inform the weak reference its referent is no longer valid.</p>
<p>See <a href="https://github.com/python/cpython/blob/master/Include/weakrefobject.h" rel="nofollow noreferrer">weakrefobject.h</a> for the structure and C-API for this object. And the implementation detail is <a href="https://github.com/python/cpython/blob/master/Objects/weakrefobject.c" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>[Edit 1: Explain the linked list nature and when weakrefs are re-used]</p>
<p>Interestingly enough, the <a href="https://docs.python.org/3/reference/datamodel.html#slots" rel="nofollow noreferrer">official documentation</a> is somewhat non-enlightening on this topic:</p>
<blockquote>
<p>Without a <code>__weakref__</code> variable for each instance, classes defining <code>__slots__</code> do not support weak references to its instances. If weak reference support is needed, then add <code>__weakref__</code> to the sequence of strings in the <code>__slots__</code> declaration.</p>
</blockquote>
<p>The <a href="https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_weaklistoffset" rel="nofollow noreferrer"><code>type</code> object documentation</a> on the topic does not seem to help things along too much:</p>
<blockquote>
<p>When a type’s <code>__slots__</code> declaration contains a slot named <code>__weakref__</code>, that slot becomes the weak reference list head for instances of the type, and the slot’s offset is stored in the type’s <code>tp_weaklistoffset</code>.</p>
</blockquote>
<p>Weak references form a linked list. The head of that list (the first weak reference to an object) is available via <code>__weakref__</code>. Weakrefs are re-used whenever possible, so the list (not a Python list!) typically is either empty or contains a single element.</p>
<p><strong>Example</strong>:</p>
<p>When you first use <code>weakref.ref()</code>, you create a new weak reference chain for the target object. The head of this chain is the new weakref and gets stored in the target object's <code>__weakref__</code>:</p>
<pre><code>&gt;&gt;&gt; import weakref
&gt;&gt;&gt; class A(object): pass
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; b = weakref.ref(a)
&gt;&gt;&gt; c = weakref.ref(b)
&gt;&gt;&gt; print(b is c is a.__weakref__)
True
</code></pre>
<p>As we can see, <code>b</code> is re-used. We can force python to create a new weakref, by e.g. adding a callback parameter:</p>
<pre><code>&gt;&gt;&gt; def callback():
&gt;&gt;&gt;   pass
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; b = weakref.ref(a)
&gt;&gt;&gt; c = weakref.ref(b, callback)
&gt;&gt;&gt; print(b is c is a.__weakref__)
False
</code></pre>
<p>Now <code>b is a.__weakref__</code>, and <code>c</code> is the second reference in the chain. The reference chain is not directly accessible from Python code. We see only the head element of the chain (<code>b</code>), but not how the chain continues (<code>b</code> -&gt; <code>c</code>).</p>
<p>So <code>__weakref__</code> is the head of the internal linked list of all the weak references to the object. I cannot find any piece of official documentation where this role of <code>__weakref__</code> is concisely explained, so one should probably not rely on this behavior, as it is an implementation detail.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>__weakref__</code> variable is an attribute which makes the object to support the weak references and preserving the weak references to object.</p>
<p>The python documentation has explained it as following:</p>
<blockquote>
<p>when the only remaining references to a referent are weak references, garbage collection is free to destroy the referent and reuse its memory for something else.</p>
</blockquote>
<p>Therefore, the duty of weak references is supplying the conditions for an object in order to be able to be garbage collected regardless of its type and the scope.</p>
<p>And about the <code>__slots__</code>, we can first look into the documentation, which explains it very well:</p>
<blockquote>
<p>By default, instances of classes have a dictionary for attribute storage. This wastes space for objects having very few instance variables. The space consumption can become acute when creating large numbers of instances.</p>
<p>The default can be overridden by defining <code>__slots__</code> in a class definition. The <code>__slots__</code> declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because <code>__dict__</code> is not created for each instance.</p>
</blockquote>
<p>Now, since by using <code>__slots__</code> you will control the demanded storage for your attribute, it actually prevents the automatic creation of <code>__dict__</code> and <code>__weakref__</code> for each instance. Which the <code>__weakref__</code> is the necessary variable of each object in order to be able to deal with weak references.</p>
<p>Also, in addition to all these the documentation for <code>object.__slots__</code> class says:</p>
<blockquote>
<p>This class variable can be assigned a string, iterable, or sequence of strings with variable names used by instances. <code>__slots__</code> reserves space for the declared variables and prevents the automatic creation of <code>__dict__</code> and <code>__weakref__</code> for each instance.</p>
</blockquote>
<p>So, In a nutshell, we can conclude that <code>__slots__</code> are for managing the storage allocation manually and since <code>__weakref__</code> is the license of accepting the weak references for objects which is related to storage (because of the ability of being garbage collected), therefore <code>__slots__</code> will control the <code>__weakref__</code> as well as controlling the <code>__dict__</code> attribute.</p>
<p>Also documentation has shown you the way of making an object to support the weak references along side of using <code>__slots__</code>:</p>
<blockquote>
<p>Without a <code>__weakref__</code> variable for each instance, classes defining <code>__slots__</code> do not support weak references to its instances. If weak reference support is needed, then add <code>'__weakref__'</code> to the sequence of strings in the <code>__slots__</code> declaration.</p>
</blockquote>
<p>Here is an example in python 3.X:</p>
<pre><code>&gt;&gt;&gt; class Test:
...     __slots__ = ['a', 'b']
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; import weakref
&gt;&gt;&gt; 
&gt;&gt;&gt; t = Test()
&gt;&gt;&gt; 
&gt;&gt;&gt; r = weakref.ref(t)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: cannot create weak reference to 'Test' object
&gt;&gt;&gt; 
&gt;&gt;&gt; class Test:
...     __slots__ = ['a', 'b', '__weakref__']
... 
&gt;&gt;&gt; t = Test()
&gt;&gt;&gt; r = weakref.ref(t)
&gt;&gt;&gt; 
&gt;&gt;&gt; t.__weakref__
&lt;weakref at 0x7f735bc55d68; to 'Test' at 0x7f735bc51fc8&gt;
</code></pre>
<p>But in python 2.7 there, although the documentation is like the aforementioned docs, creating a weak reference from instances that doesn't provide the <code>__weakref__</code> variable in their <code>__slots__</code> names doesn't raise a <code>TypeError</code>:</p>
<pre><code>&gt;&gt;&gt; class Test:
...    __slots__ = ['a', 'b']
... 
&gt;&gt;&gt; t = Test()
&gt;&gt;&gt; 
&gt;&gt;&gt; r = weakref.ref(t)
&gt;&gt;&gt; 
&gt;&gt;&gt; r
&lt;weakref at 0x7fe49f4185d0; to 'instance' at 0x7fe4a3e75f80&gt;
</code></pre>
</div>
<span class="comment-copy">Ok...so <code>obj.__weakref__</code> remembers the weak reference <code>wr</code> pointing on <code>obj</code> an will be used to invalidate <code>wr</code> when <code>obj</code> is garbage collected?</span>
<span class="comment-copy">@Michael The garbage collector completely ignores weakrefs when collecting <i>reachable</i> objects. A weakref simply doesn't count as a reference from the viewpoint of the garbage collector. Weakrefs are only considered when <a href="https://github.com/python/cpython/blob/a66496cb53fd4e2be7f4304dbb8d170042c4e004/Modules/gcmodule.c#L599" rel="nofollow noreferrer">cleaning up</a>. The GC traverses the list of weakrefs, invalidates them and calls any callback on the weakref.</span>
<span class="comment-copy">I don't see anything in the quotes docs about what <code>__weakref__</code> actually does (it contains the weak reference singleton). Care to add that?</span>
<span class="comment-copy">@dhke: Same here... The concept of weak references is clear, I really wonder about the precise meaning and function of <code>__weakref__</code>. I suspect that it's possibly so trivial they just omitted it...</span>
<span class="comment-copy">Considering your edit and the very last sentence in the post: <code>__weakref__</code> is just sort of a flag that says: "Yes, I can be weakly referenced." (?)</span>
<span class="comment-copy">@Michael Yeah, I think adding an example will describe it better.</span>
