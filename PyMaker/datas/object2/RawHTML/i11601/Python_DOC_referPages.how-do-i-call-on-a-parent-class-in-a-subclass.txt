<div class="post-text" itemprop="text">
<p>I need to create an UNBOUND method call to Plant to setup name and leaves and I don't know how. Any help is appreciated.</p>
<p>My code:</p>
<pre><code>class Plant(object):
    def __init__(self, name : str, leaves : int):
        self.plant_name = name
        self.leaves = leaves
    def __str__(self):
        return "{} {}".format(self.plant_name, self.leaves)
    def __eq__(self, plant1):
        if self.leaves == plant1.leaves:
            return self.leaves
    def __It__(self, plant1):
        if self.leaves &lt; plant1.leaves:
            print ("{} has more leaves than {}".format(plant1.plant_name, self.plant_name))
            return self.leaves &lt; plant1.leaves
        elif self.leaves &gt; plant1.leaves:
            print ("{} has more leaves than {}".format(self.plant_name, plant1.plant_name))
            return self.leaves &lt; plant1.leaves

class Flower(Plant):
    def __init__(self, color : str, petals : int):
        self.color = color
        self.petals = petals

    def pick_petal(self.petals)
        self.petals += 1
</code></pre>
<p>Exact wording of the assignment:</p>
<blockquote>
<p>Create a new class called Flower. Flower is subclassed from the Plant class; so besides name, and leaves, it adds 2 new attributes; color, petals. Color is a string that contains the color of the flower, and petal is an int that has the number of petals on the flower. You should be able to create an <strong>init</strong> method to setup the instance. With the init you should make an UNBOUND method call to plant to setup the name and leaves. In addition, create a method called pick_petal that decrements the number of petals on the flower.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>An "unbound method call" means you're calling a method on the class rather than on an instance of the class. That means something like <code>Plant.some_method</code>. </p>
<p>The only sort of unbound call that makes sense in this context is to call the <code>__init__</code> method of the base class. That seems to fulfill the requirement to "setup the names and leaves", and in the past was the common way to do inheritance.</p>
<p>It looks like this:</p>
<pre><code>class Flower(Plant):
    def __init__(self, name, leaves, color, petals):
        Plant.__init__(self, ...)
        ...
</code></pre>
<p>You will need to pass in the appropriate arguments to <code>__init__</code>. The first is <code>self</code>, the rest are defined by <code>Plant.__init__</code> in the base class. You'll also need to fix the syntax for the list of arguments, as `color : str' is not valid python. </p>
<hr/>
<p>Note: generally speaking, a better solution is to call <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow">super</a> rather than doing an unbound method call on the parent class <code>__init__</code>. I'm not sure what you can do with that advice, though. Maybe the instructor is having you do inheritance the old way first before learning the new way? </p>
<p>For this assignment you should probably use <code>Plant.__init__(...)</code> since that's what the assignment is explicitly asking you to do. You might follow up with the instructor to ask about <code>super</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer from Bryan is perfect. Just for the sake of completion:</p>
<pre><code># Looks like the assignment asks for this
class Flower(Plant):
    def __init__(self, name, leaves, color, petals):
        # call __init__ from parent so you don't repeat code already there
        Plant.__init__(self, name, leaves)  
        self.color = color
        self.petals = petals
</code></pre>
<p>This is the "classic", "non-cooperative" inheritance style and came out of fashion a long time ago (almost 15 years as of 2016), because it breaks with multiple inheritance. For reference see the post "<a href="https://www.python.org/download/releases/2.2.3/descrintro/#cooperation" rel="nofollow">Unifying types and classes in Python 2.2</a>" by the BDFL. At first I thought it could be a very old assignment, but I see the assignment uses the "new-style" inheritance (inheriting from <code>object</code> was the signature of the new-style in Python 2 because the default is the old-style, in Python 3 there is only the new-style). In order to make it work for multiple inheritance, instead of calling the parent class explicitly (the <code>Plant.__init__</code> statement), we use the <code>super</code> function like this in Python 2:</p>
<pre><code>        super(Flower, self).__init__(name, leaves)
</code></pre>
<p>Or just this after Python 3 (after PEP 0367 to be precise):</p>
<pre><code>        super().__init__(name, leaves)
</code></pre>
<p>Even if in Python 3 the new-style of inheritance is the default, you are still encouraged to explicitly inherit from <code>object</code>.</p>
</div>
<span class="comment-copy">"UNBOUND method call to Plant"?</span>
<span class="comment-copy">What makes you think you need an unbound call? You almost certainly don't.</span>
<span class="comment-copy">It's a requirement of the assignment I'm working on. This is the only part of it I don't understand at all.</span>
<span class="comment-copy">You should probably post the exact wording of the problem. As it is, it makes no sense, leaving us thinking that the person setting the assignment has no idea about Python at all.</span>
<span class="comment-copy">@DanielRoseman -- Based on some of the assignments I see around here, it wouldn't be <i>too</i> surprising to me to see another person setting assignments that make no sense :-)</span>
<span class="comment-copy">It probably should be <code>def __init__(self, name : str, leaves : int, color : str, petals : int):</code></span>
<span class="comment-copy">@PauloScardine: you are right. I originally left the code as written in the question, but on further reflection I decided to take your advice. Thanks for the feedback.</span>
<span class="comment-copy">This is more a comment than an answer, it was only posted as an answer because it is too long for the comment system.</span>
