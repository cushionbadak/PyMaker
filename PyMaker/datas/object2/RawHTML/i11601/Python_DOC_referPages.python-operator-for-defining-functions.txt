<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/14379753/what-does-mean-in-python-function-definitions">What does -&gt; mean in Python function definitions?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I'm very unclear on what the "operator" <code>-&gt;</code> does when used to create a function.</p>
<p>Like:</p>
<pre><code>def create(self) -&gt; None:
    raise NotImplementedError("It should be implemented specifically for your backend")
</code></pre>
<p>or</p>
<pre><code>@property
def to(self) -&gt; Identifier:
    return self._to
</code></pre>
<p>I've tried searching but I don't know what the "operator" is called or if it an operator at all, and using <code>-&gt;</code> while searching doesn't really work :(</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking at <em>function annotations</em>. They are not specific to <code>property</code> objects. Annotations let you attach arbitrary information to a function; the <code>-&gt; [expression]</code> part gives information about the <em>return value</em> of the function.  The syntax was added in Python 3.0.</p>
<p>In Python 3.5, a standard for adding type hinting was added to the language library, which uses function annotations to attach type information objects to the arguments and return value of functions.</p>
<p>You can always look at the Python reference documentation to search for specific syntax, the <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow"><em>Full Grammar Specification</em></a> should help you find the <code>funcdef</code> rule that contains the <code>-&gt;</code> syntax, and a search of the documentation then points to the <a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow"><em>Function definitions</em> section</a>:</p>
<blockquote>
<p>Parameters may have annotations of the form “<code>: expression</code>” following the parameter name. Any parameter may have an annotation even those of the form <code>*identifier</code> or <code>**identifier</code>. Functions may have “return” annotation of the form “<code>-&gt; expression</code>” after the parameter list. These annotations can be any valid Python expression and are evaluated when the function definition is executed.</p>
</blockquote>
<p>See <a href="https://www.python.org/dev/peps/pep-3107/" rel="nofollow">PEP 3107 – <em>Function annotations</em></a> for the syntax proposal, and <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow">PEP 484 – <em>Type Hints</em></a> for information on how to use these when adding type hints.</p>
</div>
<span class="comment-copy">Annotations do not "do" much of anything, really. At least not as of yet.</span>
<span class="comment-copy"><code>-&gt;</code> is a syntax used for <a href="https://www.python.org/dev/peps/pep-0484/#type-definition-syntax" rel="nofollow noreferrer">Type Hinting</a> of return values of a function.</span>
<span class="comment-copy">Thank you so much that was just the information i was looking for.</span>
