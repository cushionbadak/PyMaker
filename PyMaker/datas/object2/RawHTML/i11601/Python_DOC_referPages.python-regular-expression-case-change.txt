<div class="post-text" itemprop="text">
<p>I'm looking for a more robust way to convert the string below. I want to find the first 3 letters of the 3 words and change the case. The words could be anything, right now I'm just using string replace for each lower case letter.</p>
<pre><code>s1 = 'hello.crazy.world.txt'

s1 = s1.replace('h','H')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.title" rel="nofollow"><code>str.title</code></a> capitalizes groups of consecutive letters - you'll just have to exclude the extension.</p>
<p>One way to do that:</p>
<pre><code>In [5]: name, ext = s.rsplit('.', 1)

In [6]: '{}.{}'.format(name.title(), ext)
Out[6]: 'Hello.Crazy.World.txt'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The easiest solution is using .title():</p>
<pre><code>&gt;&gt;&gt; "hello.crazy.world.txt".title()
"Hello.Crazy.World.Txt"
</code></pre>
<p>Since you don't want to capitalize the last part, you'd do:</p>
<pre><code>parts = "hello.crazy.world.txt".split(".")
result = '.'.join(parts[:-1]).title() + "." + parts[-1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>str.capitalize</code></p>
<pre><code>s1 = 'hello.crazy.world.txt'
out = '.'.join([i.capitalize() for i in s1.split('.')])
</code></pre>
<p>This capitalizes all the first letters, producing <code>'Hello.Crazy.World.Txt'</code>.</p>
<p>If you would like to do it for the first three words only, you can use a slice, and then append the extension.</p>
<pre><code>s1 = 'hello.crazy.world.txt'
split = s1.split('.')
extension = split[-1]
capitalized = [i.capitalize() for i in split[:-1]]
capitalized.append(extension)
out = '.'.join(capitalized)
</code></pre>
<p>This produces <code>'Hello.Crazy.World.txt'</code>.</p>
<p>The advantages of using capitalize over title is title capitalizes every word following a period, if you have an item you would not like to capitalize, you can omit the item (such as the last item in this case).</p>
<p>A more compact way would be using list comprehension to capitalize each item, with the exception of the last item, merge the lists and join the result string in a single step.:</p>
<pre><code>s1 = 'hello.crazy.world.txt'
split = s1.split('.')
out = '.'.join([i.capitalize() for i in split[:-1]] + [split[-1]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although your question is ambiguous on this, I think you want something like this:</p>
<pre><code>import os
st_filename = 'hello.crazy.world.txt'
st_base, st_ext = os.path.splitext(st_filename)
st_base = st_base.title()
st_filename = ''.join(st_base, st_ext)
# I am unsure if the splitext will work across platforms to be rejoined with join, but it seems to work on linux and Mac OS X
</code></pre>
</div>
<span class="comment-copy">Are all words separated by a dot? Don't use <code>str</code> as a variable. You are shadowing the built-in <code>str</code> and will surely have issues using the actual <code>str</code> object.</span>
<span class="comment-copy"><code>split('.')</code> and <code>title()</code> are good methods to use</span>
<span class="comment-copy">Yes, all separated by a dot. Good point about the var name, I changed it.</span>
<span class="comment-copy"><code>rsplit</code> seems like a nice solution - didn't know about that</span>
<span class="comment-copy">I like this solution but what exactly is '{}.{}' doing?</span>
<span class="comment-copy">@iheartcpp: concatenates <code>name.title()</code>, <code>'.'</code>, and <code>ext</code> <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">docs.python.org/3/library/string.html#formatstrings</a></span>
<span class="comment-copy">I know, edited the answer, you were faster than I was typing :)</span>
