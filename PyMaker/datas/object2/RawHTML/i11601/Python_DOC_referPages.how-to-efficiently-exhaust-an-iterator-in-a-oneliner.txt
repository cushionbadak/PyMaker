<div class="post-text" itemprop="text">
<p>If i have an iterator <code>it</code> and want to exhaust it I can write:</p>
<pre><code>for x in it:
    pass
</code></pre>
<p>Is there a builtin or standard library call which allows me to do it in a one-liner?  Of course i could do:</p>
<pre><code>list(it)
</code></pre>
<p>which will build a list from the iterator and then discard it.  But i consider that inefficient because of the list-building step.  It's of course trivial to write myself a helper function that does the empty for loop but i am curious if there is something else i am missing. </p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes"><code>itertools</code> recipes</a>:</p>
<pre><code>    # feed the entire iterator into a zero-length deque
    collections.deque(iterator, maxlen=0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>sum</code>:</p>
<pre><code>sum(0 for _ in it)
</code></pre>
<p>or similarly, using <code>reduce</code>:</p>
<pre><code>reduce(lambda x, y: y, it)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>object() in it</code></p>
<p>If you know the iterator will never produce a certain kind of object, you can also use that instead, e.g. <code>None in it</code> or <code>() in it</code>. The newly-created <code>object()</code> works pretty much universally, because it'll never test equal to anything else (barring shenanigans).</p>
<p>I'm not <em>advocating</em> this idiom; the <code>for</code> loop in the question is in many ways the best solution. But if you're looking for a creepily "elegant" answer in the sense that it does the minimum possible side-computation while still being a very neat one-liner (as opposed to e.g. <code>any(False for _ in it)</code>) then this may be it.</p>
</div>
<div class="post-text" itemprop="text">
<p>The built-in <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all()</code></a> function should be extremely cheap and simple:</p>
<pre class="lang-py prettyprint-override"><code>all(True for _ in it)
</code></pre>
<p>Edit: Fixed, thank you @hemflit !</p>
</div>
<span class="comment-copy">I'm not sure what you want, but does <code>[None for _ in it]</code> the job (or such a variant)?</span>
<span class="comment-copy">Assuming you're not doing this for side effects, what's the benefit of exhausting the iterator over just discarding it?</span>
<span class="comment-copy">Purely out of curiosity - why?</span>
<span class="comment-copy">it's for side-effects indeed. any solution that builds up a list is more inefficient than the solution <code>collections.deque(it, maxlen=0)</code> below.</span>
<span class="comment-copy">Also briefly explained here: <a href="http://code.activestate.com/lists/python-ideas/23364/" rel="nofollow noreferrer">code.activestate.com/lists/python-ideas/23364</a></span>
<span class="comment-copy">thanks -- i had tried google and stackoverflow search and not found the solution.  It should be easier to discover now :)  And <code>collections.exhaust_iterator</code> or <code>itertools.exhaust_iterator</code> would be nice and more obvious, though.</span>
<span class="comment-copy">No, this will stop iterating on first falsy element. <code>all(True for _ in it)</code> would do it though.</span>
<span class="comment-copy">@hemflit I stand corrected.</span>
