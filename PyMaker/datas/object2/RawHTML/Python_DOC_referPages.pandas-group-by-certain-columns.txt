<div class="post-text" itemprop="text">
<h3>Description</h3>
<p>How do you use Pandas <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html" rel="nofollow noreferrer">groupby</a> to group certain columns, but not others?</p>
<h3>Current Progress</h3>
<pre><code>table_D = pd.DataFrame({
    'Geo_ID': [1, 1, 1, 1, 2, 3, 4, 4, 5],
    'A_Code': [12, 12, 12, 65, 65, 65, 65, 98, 98],
    'A_Cost': [2, 9, 1, 10, 6, 7, 7, 6, 2],
}, columns=['Geo_ID', 'A_Code', 'A_Cost'])
table_D_dummies = pd.get_dummies(data = table_D, columns = ["A_Code"])
table_D_dummies_grouped = table_D_dummies.groupby(by = ["Geo_ID"]).sum()
</code></pre>
<h3>Problem</h3>
<p>As shown below, this correctly sums cost by Geo_ID. Unfortunately, it's also summing by A_Code. </p>
<p>A_Code_12, A_Code_65 and A_Code_98 should combine <em>separately</em>. Additionally, in the actual dataset, there are over 100 A_Codes.</p>
<h3>Data</h3>
<p><strong>table_D</strong></p>
<pre><code>+--------+--------+--------+
| Geo_ID | A_Code | A_Cost |
+--------+--------+--------+
|      1 |     12 |      2 |
|      1 |     12 |      9 |
|      1 |     12 |      1 |
|      1 |     65 |     10 |
|      2 |     65 |      6 |
|      3 |     65 |      7 |
|      4 |     65 |      7 |
|      4 |     98 |      6 |
|      5 |     98 |      2 |
+--------+--------+--------+
</code></pre>
<p><strong>table_D_dummies</strong></p>
<pre><code>+---+--------+--------+-----------+-----------+-----------+
|   | Geo_ID | A_Cost | A_Code_12 | A_Code_65 | A_Code_98 |
+---+--------+--------+-----------+-----------+-----------+
| 0 |      1 |      2 |         1 |         0 |         0 |
| 1 |      1 |      9 |         1 |         0 |         0 |
| 2 |      1 |      1 |         1 |         0 |         0 |
| 3 |      1 |     10 |         0 |         1 |         0 |
| 4 |      2 |      6 |         0 |         1 |         0 |
| 5 |      3 |      7 |         0 |         1 |         0 |
| 6 |      4 |      7 |         0 |         1 |         0 |
| 7 |      4 |      6 |         0 |         0 |         1 |
| 8 |      5 |      2 |         0 |         0 |         1 |
+---+--------+--------+-----------+-----------+-----------+
</code></pre>
<p><strong>table_D_dummies_grouped</strong></p>
<pre><code>+--------+--------+-----------+-----------+-----------+
| Geo_ID | A_Cost | A_Code_12 | A_Code_65 | A_Code_98 |
+--------+--------+-----------+-----------+-----------+
|      1 |     22 |         3 |         1 |         0 |
|      2 |      6 |         0 |         1 |         0 |
|      3 |      7 |         0 |         1 |         0 |
|      4 |     13 |         0 |         1 |         1 |
|      5 |      2 |         0 |         0 |         1 |
+--------+--------+-----------+-----------+-----------+
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are not using your dummies table, you grouped the original dataframe:</p>
<pre><code>table_D_dummies = pd.get_dummies(data = table_D, columns = ["A_Code"])
table_D_dummies_grouped = table_D.groupby(by = ["Geo_ID"]).sum()
</code></pre>
<p>You want to group <code>table_D_dummies</code> here:</p>
<pre><code>&gt;&gt;&gt; table_D_dummies
   Geo_ID  A_Cost  A_Code_12  A_Code_65  A_Code_98
0       1       2          1          0          0
1       1       9          1          0          0
2       1       1          1          0          0
3       1      10          0          1          0
4       2       6          0          1          0
5       3       7          0          1          0
6       4       7          0          1          0
7       4       6          0          0          1
8       5       2          0          0          1
&gt;&gt;&gt; table_D_dummies.groupby(by = ["Geo_ID"]).sum()
        A_Cost  A_Code_12  A_Code_65  A_Code_98
Geo_ID
1           22          3          1          0
2            6          0          1          0
3            7          0          1          0
4           13          0          1          1
5            2          0          0          1
</code></pre>
<p>If you need to sum cost <em>per dummy</em>, add those to the grouping columns:</p>
<pre><code>&gt;&gt;&gt; table_D_dummies.groupby(by = [
...     "Geo_ID",
...     *(c for c in table_D_dummies.columns if c.startswith('A_Code_'))
... ]).sum()
                                      A_Cost
Geo_ID A_Code_12 A_Code_65 A_Code_98
1      0         1         0              10
       1         0         0              12
2      0         1         0               6
3      0         1         0               7
4      0         0         1               6
                 1         0               7
5      0         0         1               2
</code></pre>
</div>
<span class="comment-copy">please share all data as text, no images please. Images cannot be copied and thus the issue cannot be replicated</span>
<span class="comment-copy">Good advice. <a href="https://ozh.github.io/ascii-tables/" rel="nofollow noreferrer">This</a> website generates ASCII tables for displaying tables in SO.</span>
<span class="comment-copy">generally speaking, people are more clear when you post a df as text so they can copy and an expected output df which abides your explaination(logic) check <a href="https://stackoverflow.com/questions/20109391/how-to-make-good-reproducible-pandas-examples">this</a>, might be helpful in future. Cheers..! :)</span>
<span class="comment-copy">You beat me to it @anky_91. Always love a good formatting tip.</span>
<span class="comment-copy">No problem. I am glad you acknowledged. :)</span>
<span class="comment-copy">Rats, I introduced that mistake while simplifying the code for sharing. This correction still doesn't result in the solution. Thank you!</span>
<span class="comment-copy">@PizzaAndCode: you haven't really provided an expected output, so we are guessing here what is expected. I added automated per-dummy groupings.</span>
<span class="comment-copy">You guessed right, that's the expected. Let me clean up the question for future readers' clarity.</span>
