<div class="post-text" itemprop="text">
<p>I have an API wrapper class <code>WfcAPI</code> written in Python 3 which I want to test using <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">PyUnit</a>.</p>
<p>The <code>setUpClass()</code> for <code>WfcAPI</code> involves logging in to the external API server. The current functional test implementation has the password <a href="https://stackoverflow.com/a/157975/3357935">obfuscated with Base64 encoding</a>, but this is <em>far</em> from an ideal solution for security reasons.</p>
<pre><code>import unittest
import base64
from pykronos import WfcAPI

class Test(unittest.TestCase):
    @classmethod
    def setUpClass(self):
        password = base64.b64decode("U29tZVBhc3N3b3Jk").decode("utf-8")
        self.kronos = WfcAPI("SomeUsername", password) 
</code></pre>
<p>I want to be able to quickly run functional tests for my API wrapper, but I also want to ensure that my username and password aren't included as part of the code.</p>
<p><strong>How can I setup a Python functional test for actions which require a username and password?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Just to clarify: if it's a unit test, you shouldn't be testing against the real external API, you should Fake its response. A unit test should only be concerned with the Subject Under Test's logic (<code>WfcAPI</code>) and not its sub dependences.</p>
<p>Now, if you do a functional test where you send real data to the API, you can protect your credentials by storing them in an <code>.env</code> file which won't be commited with the rest of the code.</p>
<p><a href="https://github.com/theskumar/python-dotenv" rel="nofollow noreferrer">This python library</a> offers that functionality and gives you an example in its Readme. You'd end up with something like this:</p>
<pre><code># .env

PASSWORD=some_password
USERNAME=SomeUsername
</code></pre>
<p>Then in your <code>settings.py</code>:</p>
<pre><code>PASSWORD = os.environ.get("PASSWORD")
USERNAME = os.environ.get("USERNAME")
</code></pre>
</div>
<span class="comment-copy">can't you use, <code>password = input('Enter Passowrd')</code></span>
<span class="comment-copy">@harshil9968 If I were prompting the user for a password, I would want to hide the input with <a href="https://docs.python.org/3/library/getpass.html" rel="nofollow noreferrer"><code>getpass</code></a></span>
<span class="comment-copy">@StevenVascellaro, does it work for you to use <code>pytest</code> instead of <code>unittest</code>?</span>
<span class="comment-copy">@lmiguelvargasf What would switching to pytest do?</span>
<span class="comment-copy">@StevenVascellaro, it will simplify your testing since you don't need to create a class which inherits from <code>unittest.TestCase</code>, in case of a <code>setUp</code> method, you can define a fixture. Finally, in my opinion. <code>pytest</code> makes testing simpler and more enjoyable =).</span>
<span class="comment-copy">I may be misunderstanding the practical difference between a unit test and a functional test. I have been using <code>unittest</code> to test data returned from the API, as I want to make sure my sent requests work properly.</span>
<span class="comment-copy">This may be helpful if you want to take a look at the differences: <a href="http://www.agilenutshell.com/episodes/41-testing-pyramid" rel="nofollow noreferrer">agilenutshell.com/episodes/41-testing-pyramid</a>  But yeah, basically a unit test just tests a single function in your program. If you test against the response from an external API, it's probably better described as an integration/functional test. This is just terminology anyways.</span>
<span class="comment-copy">I've edited the question to clarify that I am writing a functional test.</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/q/4906977/3357935"><i>Access environment variables from Python</i></a> &amp; <a href="https://stackoverflow.com/q/42708389/3357935"><i>How to set environment variables in PyCharm?</i></a></span>
