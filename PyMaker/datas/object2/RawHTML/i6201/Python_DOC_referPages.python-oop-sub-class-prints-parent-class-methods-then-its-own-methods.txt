<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/31031503/import-a-python-module-without-running-it">Import a python module without running it</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I have two python files in the first one I have the parent class. I created a new file with the sub class. When I run the sub class file the methods in the parent class file run first the the sub class.</p>
<p>the parent class looks like this</p>
<pre><code>class human():
def __init__ (self, gender="", age=0, height=0, howHigh=""):
    #setting attributes
    self.gender = ""
    self.age = 0
    self.height = 0
    self.howHigh = ""


def setHeight(self):
    self.height = int(input("What is your height in cm? "))

def setGender(self):
    self.gender = input("What is your gender? ")

def setAge(self):
    self.age = int(input("What is your age? "))

def changeHeight(self):
    if self.height &lt; 80:
        self.howHigh = "Small"
        print("Your hieght is small!")

    elif self.height &gt;= 80 and self.height &lt; 180:
        self.howHigh = "Medium"
        print("Your hieght is medium!")

    elif self.height &gt;= 180:
        self.howHigh = "Large"
        print("Your hieght is tall")

human1 = human()
human1.setHeight()
human1.setGender()
human1.setAge()
print("human gender is ", human1.gender)
print("Human age is", human1.age)
print("Human height is", human1.height)
human1.changeHeight()
print(human1.howHigh)
human1 = human()
human1.setHeight()
human1.setGender()
human1.setAge()
print("human gender is ", human1.gender)
print("Human age is", human1.age)
print("Human height is", human1.height)
human1.changeHeight()
print(human1.howHigh)
</code></pre>
<p>the sub class file looks like this</p>
<pre><code>from human_class import *
class child(human):
def __init__(self):
    super().__init__()

def setHeight(self):
    self.height = int(input("What is your height in cm? "))


def changeHeight(self):
    if self.height &lt; 30:
        self.howHigh = "Small"
        print("Your hieght is small for a child!")

    elif self.height &gt;= 30 and self.height &lt; 120:
        self.howHigh = "Medium"
        print("Your hieght is medium for a child!")

    elif self.height &gt;= 120:
        self.howHigh = "Large"
        print("Your hieght is tall for a child!")


child1 = child()
child1.setHeight()
child1.changeHeight()
print(child1.howHigh)
</code></pre>
<p>The codes are below and when I run the parent class file human runs.
When I run the second file, the child class, then methods for class human() run first then the methods for class child(human). 
What I want is to run the sub class file and have only those methods run. 
Is that possible, it happens most of the  time i do this this way?</p>
<p>Thanks for your help</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, it is possible and it is what <a href="https://dev.to/arsho/inheritance-in-python-8dn" rel="nofollow noreferrer">inheritance in Python</a> does. As @deceze suggests, update the files like below:</p>
<p><code>human_class.py</code>:</p>
<pre><code>class human():
    def __init__ (self, gender="", age=0, height=0, howHigh=""):
        #setting attributes
        self.gender = ""
        self.age = 0
        self.height = 0
        self.howHigh = ""


    def setHeight(self):
        self.height = int(input("What is your height in cm? "))

    def setGender(self):
        self.gender = input("What is your gender? ")

    def setAge(self):
        self.age = int(input("What is your age? "))

    def changeHeight(self):
        if self.height &lt; 80:
            self.howHigh = "Small"
            print("Your hieght is small!")

        elif self.height &gt;= 80 and self.height &lt; 180:
            self.howHigh = "Medium"
            print("Your hieght is medium!")

        elif self.height &gt;= 180:
            self.howHigh = "Large"
            print("Your hieght is tall")

if __name__ == '__main__':
    human1 = human()
    human1.setHeight()
    human1.setGender()
    human1.setAge()
    print("human gender is ", human1.gender)
    print("Human age is", human1.age)
    print("Human height is", human1.height)
    human1.changeHeight()
    print(human1.howHigh)
    human1 = human()
    human1.setHeight()
    human1.setGender()
    human1.setAge()
    print("human gender is ", human1.gender)
    print("Human age is", human1.age)
    print("Human height is", human1.height)
    human1.changeHeight()
    print(human1.howHigh)
</code></pre>
<p><code>chlid_class.py</code>:</p>
<pre><code>from human_class import *
class child(human):
    def __init__(self):
        super().__init__()

    def setHeight(self):
        self.height = int(input("What is your height in cm? "))


    def changeHeight(self):
        if self.height &lt; 30:
            self.howHigh = "Small"
            print("Your hieght is small for a child!")

        elif self.height &gt;= 30 and self.height &lt; 120:
            self.howHigh = "Medium"
            print("Your hieght is medium for a child!")

        elif self.height &gt;= 120:
            self.howHigh = "Large"
            print("Your hieght is tall for a child!")


child1 = child()
child1.setHeight()
child1.changeHeight()
print(child1.howHigh)
</code></pre>
<p><strong>What does <code>if __name__ == '__main__':</code> do?</strong>
From <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">official documentation</a></p>
<blockquote>
<p><code>'__main__'</code> is the name of the scope in which top-level code executes. A moduleâ€™s <code>__name__</code> is set equal to <code>'__main__'</code> when read from standard input, a script, or from an interactive prompt.</p>
</blockquote>
<pre><code>if __name__ == "__main__":
    # execute only if run as a script
</code></pre>
</div>
<span class="comment-copy"><i>All</i> the code in the "parent file" will be executed when you <code>import</code> it. If you don't want the code below the class definition to be executed, don't put it in that file. (Or make it conditional with a <code>if __name__ == '__main__': ...</code>.)</span>
