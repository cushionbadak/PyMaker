<div class="post-text" itemprop="text">
<p>I'm working on a nestable For Loop in Python for Robot Framework. My goal is to mimic 100% of the functionality of the original, so I need to be able to break the For Loop if certain conditions are met. My solution to this is with a custom keyword that is evaluated a little differently in the Python code: <code>exit_if</code>.</p>
<p><code>exit_if</code> takes one argument, a string, and returns one argument for processing, a Boolean. I'd like to send it a string like <code>'$var1 == $var2'</code> (I've already solved the problem of requiring parentheses around custom variable names created within the For Loop from Robot Framework), have <code>exit_if</code> evaluate the string as it would any Boolean expression, and return <code>True</code> if the expression evaluates to <code>True</code>, and <code>False</code> if the expression evaluates to <code>False</code>.</p>
<p>An easy solution to this is to have <code>exit_if</code> take three arguments: <code>var1</code>, <code>operator</code>, and <code>var2</code>. Then, in a switch statement, evaluate the variables based on the operator. However, this seems unnecessarily clunky and inefficient, so I'd like to find a more elegant solution.</p>
<p>After Googling around (it's possible that my Google searches were parameterized incorrectly), I found nothing that would do what I'm trying to ask this program to do, so, given that this is a coding question that can benefit future programmers, I turned to this site. How can I accomplish the effects of the three-parameter solution with a single parameter and no/minimum switch/if statements?</p>
<p>EDIT: I apologize for the brevity of the original post, I was rushed out of the office in the process of asking this question.</p>
<p>Robot Framework interacts with my For Loop by sending a very long list of cells of information in a Framework-like language that my code then processes and turns into the format required for <code>BuiltIn().run_keywords</code>. In Robot Framework, this format looks like so (simple version):</p>
<pre><code>For Loop    IN RANGE    0    3   INDEX0
...     \\  Log to Console  INDEX0
...     \\  Run Keyword If  INDEX0 == 1  Log to Console  one
</code></pre>
<p>Robot Framework processes this as a single line of cells, like so (cells are separated by |):</p>
<pre><code>For Loop|IN RANGE|0|2|INDEX0|\\|Log to Console|INDEX0|\\|Run Keyword If|INDEX0 == 1|Log to Console|one
</code></pre>
<p>My code converts these cells into a list of strings.</p>
<pre><code>['For Loop','IN RANGE','0','2','INDEX0','\\','Log to Console','INDEX0','\\','Run Keyword If','INDEX0 == 1','Log to Console','one']
</code></pre>
<p>Then, the code used to format it for use each loop iteration by <code>BuiltIn().run_keywords()</code>. So, on iteration 2 (INDEX0 = 1):</p>
<pre><code>kwords = ['Log to Console','1','AND','Run Keyword If','1 == 1','Log to Console','one']
BuiltIn().run_keywords(*kwords)
</code></pre>
<p>That system being too limited to the built-in capabilities of <code>Run Keywords</code>, I created a mirror version of it that I can control. Its functionality is identical to <code>Run Keywords</code>, but it is called by <code>self._run_keywords(*kwords)</code>.</p>
<p>As it stands now, that code won't run. I'm trying to create code that will process the <code>1 == 1</code> and pass it to some keyword. Given my current goal is to allow the user to specify breakpoints in the loop, I created a function called <code>exit_if</code>. <code>exit_if</code> will (eventually) receive an argumentative input in the form of a string (like the one above, though not necessarily in the same syntax), decide if the conditions are right to exit the for loop, and exit the for loop. I want it to return a Boolean for verification purposes, and because I'm not entirely sure how <code>exit_if</code> will interact with the rest of the file yet.</p>
<p>I already knew of a very clunky way to do this. Take the input (<code>1 == 1</code>), use string parsing to find the operator and variables, use a switch statement to decide which comparison to do, do the comparison, and (possibly) return the value to the rest of the loop so that it can stop the loop.</p>
<p>Thanks to Kindall, I now have an easier way to do this with a dictionary and <code>operator</code>, but I was hoping for a more elegant solution along the lines of the following:</p>
<pre><code>def exit_if(argument_string):
    if argument_string:
        return True
    else:
        return False
</code></pre>
<p>Obviously, feeding an <code>if</code> statement an existing string always results in <code>True</code>, but I was hoping to be able to cast the string as something or apply a function to it to turn it into a Boolean statement. If this isn't possible and I need to go the clunky way, that's fine. Speed and beauty aren't requirements, but it was worth asking.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>operator</code> module and a dictionary.</p>
<pre><code>import operator

ops = {"==": operator.eq,
       "!=": operator.ne,
       "&lt;":  operator.lt,
       "&lt;=": operator.le,
       "&gt;":  operator.gt,
       "&gt;=": operator.ge}

def compare(a, op, b):
    return ops[op](a, b)

assert compare(3, "&lt;", 4)
</code></pre>
<p>Looking up your variable names and passing in their values, I'll leave to you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <strong>regular expressions</strong> to solve this.</p>
<pre><code>import re

varSet = {'var1' : 1, 'var2' : 2 } #Dictionary for your variables

def exit_if(stringPassed):
    #(.*) - any character and its occurence
    pattern = re.compile(r'(.*) (.*) (.*)')
    #Looks for the matches, result.group(0) shows the result
    result  = pattern.match(stringPassed) 

    firstVariable  = varSet[result.group(1)] #'var1'
    operatorUsed   = result.group(2) #'=='
    secondVariable = varSet[result.group(3)] #'var2'

    if operatorUsed == '==':
        return firstVariable == secondVariable
    elif operatorUsed == '!=':
        return firstVariable != secondVariable
    elif operatorUsed == '&lt;':
        return firstVariable &lt; secondVariable
    elif operatorUsed == '&lt;=':
        return firstVariable &lt;= secondVariable
    elif operatorUsed == '&gt;':
        return firstVariable &gt; secondVariable
    elif operatorUSed == '&gt;=':
        return firstVariable &gt;= secondVariable
    else:
        print ('Some kind of error')

#Given that the pattern is always '$var1 == $var2'
print exit_if('var1 == var2') #prints False
print exit_if('var1 &lt; var2') #prints True
</code></pre>
<p>More about re module:</p>
<p><a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer">https://docs.python.org/2/library/re.html</a></p>
<p><a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">https://docs.python.org/3/library/re.html</a></p>
</div>
<span class="comment-copy">Have you found the <code>eval</code> function?</span>
<span class="comment-copy">why wouldnt you just make it take a bool ? <code>exit_if(a==b)</code></span>
<span class="comment-copy">In Python you can pass functions as arguments to other functions, so rather than inventing some micro-expression language why not do that? E.g. have your <code>exit_if</code> take a function of two arguments, and then call that function?</span>
<span class="comment-copy"><code>eval('$var1 == $var2')</code> would throw a syntax error.</span>
<span class="comment-copy">@JoranBeasley Because it's a tool for Robot Framework written in Python. The parameter that I CAN pass it is a string, based on how Robot Framework works.</span>
<span class="comment-copy">I'll keep this in mind as a strict upgrade to my first approach, but it's not exactly what I'm looking for. I'll edit the question to include a better example as soon as I get to a computer.</span>
<span class="comment-copy">split would also work ...</span>
