<div class="post-text" itemprop="text">
<p>IÂ´m working on an assignment in python. I have to find a function or a program that converts this list to the corresponding DNA sequence. </p>
<pre><code>bases_list = ['Adenosine', 'Guanine', 'Thymine', 'Cytosine', 'Thymine', 'Adenosine', 'Guanine', 'Cytosine', 'Thymine', 'Adenosine', 'Guanine']

print(dna)

AGTCTAGCTAG  #the output
</code></pre>
<p>I think maybe I can make a definition function to convert those bases to corresponding letters. How can I do that? Any ideas? </p>
<p>PS: I began to learn python very recently, so I hope you guys can help me :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes a few! as you begin not a long time ago, let do something simple:</p>
<pre><code>bases_list = ['Adenosine', 'Guanine', 'Thymine', 'Cytosine', 'Thymine', 'Adenosine', 'Guanine', 'Cytosine', 'Thymine', 'Adenosine', 'Guanine']

dna = "" # You begin with the dna empty

for sequence in bases_list: # you go throw every chain
  dna += sequence[0] # you add the first letter with the op [0] of lists

print(dna) # finally print
</code></pre>
<p>You can read about the basis of loop here <a href="https://wiki.python.org/moin/ForLoop" rel="nofollow noreferrer">https://wiki.python.org/moin/ForLoop</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Most succinct:</p>
<pre><code>print("".join([x[0] for x in bases_list]))

dna = "".join(x[0] for x in bases_list])
print(dna)
</code></pre>
<p>otherwise:</p>
<pre><code>dna = ""
for base in bases_list:
    dna += base[0] . # get 1st letter from base
print(dna)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's use string indexing and <code>join</code>:</p>
<pre><code>dna = ''.join(i[0] for i in bases_list)
print(dna)
</code></pre>
<p>Output:</p>
<pre><code>AGTCTAGCTAG
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about a <code>map</code>?</p>
<pre><code>In [276]: ''.join(map(lambda x: x[0], bases_list))
Out[276]: 'AGTCTAGCTAG'
</code></pre>
<p><code>str.join</code> is used to take a list (or any iterable) of strings and join them together. <code>map</code> applies the same function to every element in an iterable.</p>
<p>Quick note. I ran this code on a terminal, but if you're running this in a script, don't forget to <em>assign</em> the result back to another variable.</p>
<pre><code>seq = ''.join(map(lambda x: x[0], bases_list))
print(seq)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For completeness I thought I would add the <code>itemgetter</code> <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer">https://docs.python.org/3/library/operator.html#operator.itemgetter</a> solution.</p>
<p>In this case, it gets the character in index <code>(0)</code> of every element in <code>bases_list</code>. It is said to be slightly faster and cleaner than <code>lambda</code> <a href="https://stackoverflow.com/questions/17243620/operator-itemgetter-or-lambda">operator.itemgetter or lambda</a></p>
<pre><code>from operator import itemgetter

bases_list = ['Adenosine', 'Guanine', 'Thymine', 'Cytosine', 'Thymine',
              'Adenosine', 'Guanine', 'Cytosine', 'Thymine', 'Adenosine', 'Guanine']
dna = "".join((map(itemgetter(0),bases_list)))

print (dna)
</code></pre>
<p>result:</p>
<pre><code>AGTCTAGCTAG
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want a function that converts the base name to its corresponding letter, you are lucky here, because it is simply the first letter of the base name.</p>
<p>Taking the first letter of a string is easily done by "indexing". For instance:</p>
<pre><code>base = "Adenosine"
letter = base[0]
# letter should now be "A"
</code></pre>
<p>In a simple case like this, one would probably not bother defining a specific function, but it is possible and may look as follows:</p>
<pre><code>def base2letter(base):
    """This function converts the name of a base into the corresponding letter."""
    return base[0]
</code></pre>
<p>Now you can apply the function to every base name in your list. The usual way to do this in python is by using a "list comprehension":</p>
<pre><code>letters_list = [base2letter(base) for base in bases_list]
</code></pre>
<p>What you have now is the list of the letters: <code>["A", "G", "T", "C", "T", "A", "G", "C", "T", "A", "G"]</code></p>
<p>The next step is to join them together into a string. An efficient way to do this is to use the <code>join</code> method that is defined for strings. It sticks the string between the successive elements it is given: <code>"_".join(["A", "B", "C"])</code> will result in <code>"A_B_C"</code>. Here you want to put the letters together with nothing between them, so you have to use the empty string:</p>
<pre><code>dna = "".join(letters_list)
</code></pre>
<p>Note that progressively building the string in a for loop by concatenating new letters one by one to the current state of the string is possible (see <a href="https://stackoverflow.com/a/47036161/1878788">https://stackoverflow.com/a/47036161/1878788</a>). This may be expected of you if python is just used to give you a general idea of how programming languages using an "imperative" style work. However, it is not efficient in python, that is why many answers did not use this technique.</p>
</div>
<span class="comment-copy">print("".join([x[0] for x in bases_list]))</span>
<span class="comment-copy">But I have to print as print(dna), which means that I have to find a function that I should call as "dna". Do you think I have to write a def function?</span>
<span class="comment-copy">I think you need to learn the basics of Python programming first.</span>
<span class="comment-copy">"...an assignment to <b>find</b> a function..." ?</span>
<span class="comment-copy">If your question was answered, please <a href="https://stackoverflow.com/help/someone-answers">accept the most helpful answer</a>. Thanks.</span>
<span class="comment-copy">Upvoted for simplicity.</span>
<span class="comment-copy">What does the join syntax actually? I never saw that in our course :)</span>
<span class="comment-copy">@berr Join takes each element from an iterable and concatenates them into one string with or with a separator. <a href="https://docs.python.org/3.6/library/stdtypes.html#str.join" rel="nofollow noreferrer">See docs</a></span>
<span class="comment-copy">Nice one, for advanced users ;) I'm thinking another simple way but I don't came with Ideas, do you have any else?</span>
<span class="comment-copy">@DamianLattenero No, I believe every simple option has been discussed in these answers. Anything else will need some thinking :)</span>
