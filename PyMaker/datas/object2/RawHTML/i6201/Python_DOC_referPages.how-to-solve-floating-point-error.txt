<div class="post-text" itemprop="text">
<p>I have looked up online regarding python's floating point arithmetic limitation and seems like the easiest way to solve the problem is to use decimal module. For instance, I tried the below code and it gave me the perfect 0.8 answer.</p>
<pre><code>from decimal import Decimal
Decimal('4') - Decimal('3.2')
</code></pre>
<p>However, when I try to incorporate this method into an arithmetic that involves list, the method failed. </p>
<pre><code>from decimal import Decimal
number = [3.2, 1.1]
Decimal('4') - Decimal('number[0]')
</code></pre>
<p>This gives me an "InvalidOperation" error. Then I tried </p>
<pre><code>from decimal import Decimal
number = [3.2, 1.1]
Decimal('4') - Decimal(number[0])
</code></pre>
<p>This compiles but gives me Decimal('0.7999999999999998223643160600') instead of 0.8</p>
<p>So can anyone please tell me how to solve such a problem? (either use Decimal or any other methods).</p>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>Pass in a string argument to Decimal to get the expected behavior.  In your example, you're passing the floating point number <code>3.2</code> instead of the string <code>'3.2'</code></p>
<pre><code>number = [ '3.2', '1.1' ]
Decimal('4') - Decimal(number[0])
</code></pre>
<p>This returns:</p>
<pre><code>Decimal('0.8')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason <code>Decimal('4')</code> is specified with '4' in string form is because when an instance of the <code>Decimal</code> class in Python is instantiated with a string it is required to "conform to the decimal numeric string syntax." A string like <code>'number[0]'</code> doesn't represent a number, and a malformed string is expected to raise an <code>InvalidOperation</code> exception.</p>
<p>Something like <code>Decimal('4') - Decimal('3.8')</code> isn't <em>technically</em> floating point but will get you an exact answer. Floating point is a bit more complicated than arithmetic as is commonly understood with decimal points, and won't be perfectly precise.</p>
<p>It may help to take a look at the documentation for the <code>Decimal</code> class here (<a href="https://docs.python.org/3.6/library/decimal.html" rel="nofollow noreferrer">https://docs.python.org/3.6/library/decimal.html</a>), and this write-up about floating point operations here (<a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/floatingpoint.html</a>).</p>
</div>
<span class="comment-copy">Once you have a float you've already lost, unless you have additional information about what the floats should be.</span>
<span class="comment-copy">That's exactly what I need. Thank you!</span>
