<div class="post-text" itemprop="text">
<p>What I would like to do is to parse an expression such this one:</p>
<pre class="lang-py prettyprint-override"><code>result = A + B + sqrt(B + 4)
</code></pre>
<p>Where A and B are columns of a dataframe. So I would have to parse the expresion like this in order to get the result:</p>
<pre class="lang-py prettyprint-override"><code>new_col = df.B + 4
result = df.A + df.B + new_col.apply(sqrt)
</code></pre>
<p>Where <code>df</code> is the dataframe.</p>
<p>I have tried with <code>re.sub</code> but it would be good only to replace the column variables (not the functions) like this:</p>
<pre class="lang-py prettyprint-override"><code>import re

def repl(match):
    inner_word = match.group(1)
    new_var = "df['{}']".format(inner_word)
    return new_var

eq = 'A + 3 / B'
new_eq = re.sub('([a-zA-Z_]+)', repl, eq)
result = eval(new_eq)
</code></pre>
<p>So, my questions are:</p>
<ul>
<li>Is there a python library to do this? If not, how can I achieve this in a simple way?</li>
<li>Creating a recursive function could be the solution?</li>
<li>If I use the "reverse polish notation" could simplify the parsing?</li>
<li>Would I have to use the <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer"><code>ast</code></a> module?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Pandas DataFrames do have an <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.eval.html" rel="noreferrer"><code>eval</code></a> function. Using your example equation:</p>
<pre><code>import pandas as pd
# create an example DataFrame to work with
df = pd.DataFrame({"A": [1, 2], "B": [3, 4]})
# define equation
eq = 'A + 3 / B'
# actual computation
df.eval(eq)

# more complicated equation
eq = "A + B + sqrt(B + 4)"
df.eval(eq)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Following the example provided by @uuazed, a faster way would be using <a href="https://github.com/pydata/numexpr" rel="nofollow noreferrer">numexpr</a></p>
<pre><code>import pandas as pd
import numpy as np
import numexpr as ne

df = pd.DataFrame(np.random.randn(int(1e6), 2), columns=['A', 'B'])
eq = "A + B + sqrt(B + 4)"
timeit df.eval(eq)
# 15.9 ms ± 177 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
timeit A=df.A; B=df.B; ne.evaluate(eq)
# 6.24 ms ± 396 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</code></pre>
<p><a href="https://github.com/pydata/numexpr" rel="nofollow noreferrer">numexpr</a> may also have more supported operations</p>
</div>
<span class="comment-copy">did you try <code>result = df["A"] + df["B"] + sqrt(df["B"] + 4)</code> ? It should work</span>
<span class="comment-copy">@DimuthTharakaMenikgama read the full question, its not only the same expression.</span>
<span class="comment-copy">Can you show your dataframe.( at least few rows) ?</span>
<span class="comment-copy">If I use the <code>sqrt</code> function as you say I get this error <code>TypeError: cannot convert the series to &lt;class 'float'&gt;</code>. So the function must be used with <code>apply</code></span>
<span class="comment-copy">The dataframe could have <code>float64</code> values, <code>int32</code> values, even <code>numpy.nan</code> values.</span>
<span class="comment-copy">That is so cool, thanks for the answer.</span>
<span class="comment-copy">Many thanks! It works fine. I would like to use other functions, but I have read this: "The support math functions are sin, cos, exp, log, expm1, log1p, sqrt, sinh, cosh, tanh, arcsin, arccos, arctan, arccosh, arcsinh, arctanh, abs and arctan2". So I am afraid I can use only those functions. Is possible to add external functions to the expression? With the builtin python <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval()</code></a> function is possible  to use the <code>local</code> dictionary to add the functions as objects, but I could not make it work with <code>df.eval()</code></span>
<span class="comment-copy">Well I have writen <a href="https://stackoverflow.com/questions/47161939/how-can-i-use-a-custom-function-within-an-expression-using-the-eval-dataframe-me">another question</a> to manage this</span>
<span class="comment-copy">It is faster, but you need to know the variables you are going to use in advance. If not, you must make some parsing before the evaluation, and it will take time</span>
<span class="comment-copy">If you check the <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.eval.html#pandas.eval" rel="nofollow noreferrer">eval documentation</a> the <code>engine</code> by default is <code>numexpr</code></span>
<span class="comment-copy">Yes, good point! Very curious the long timeit difference just by evaluation</span>
