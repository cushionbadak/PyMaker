<div class="post-text" itemprop="text">
<p>so I have a function which takes a list of lists and changes the type of each value depending on what the value represents:</p>
<pre><code>def change_list(x):
    """
    Convert every str in x to an int if it represents a
    integer, a float if it represents a decimal number, a bool if it is 
    True/False, and None if it is either 'null' or an empty str

    &gt;&gt;&gt; x = [['xy3'], ['-456'], ['True', '4.5']]
    &gt;&gt;&gt; change_list(x)
    &gt;&gt;&gt; x
    [['xy3' , -456], [True], [4.5]]
    """
    for ch in x:
        for c in ch:
            if c.isdigit() == True:
                c = int(c)
</code></pre>
<p>I've only posted part of the code, I feel as though once I can get that sorted I can apply a similar method in other if/elif/else to be able to get it all straight. My problem is when I apply this sort of method and then call x again the list is still returned as strings instead of ints or floats or bools.</p>
<p>ie if I called x after executing this function I would get:</p>
<pre><code>x = [['xy3'], ['-456'], ['True', '4.5']]
</code></pre>
<p>instead of what is in the example code in the function.
I'm not sure what's going wrong, any advice would be helpful.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because when you do :</p>
<pre><code>for ch in x:
    for c in ch:
        if c.isdigit() == True:
            c = int(c)    #yes it changed the type but it doesn't stroed in list 
</code></pre>
<p>Yes you are changing the type but where are you storing changed stuff ??</p>
<p>For that, you have to tell the list to change at that index and for that, you can use enumerate :</p>
<pre><code>item[index]=int(item1)
</code></pre>
<p>Second thing you are using isdigit() on float which will not work :</p>
<blockquote>
<p>str.isdigit() will only return true if all characters in the string
  are digits. . and -  are punctuation, not a digit.</p>
</blockquote>
<p>So you can use try these two methods :</p>
<blockquote>
<p>First Method :</p>
</blockquote>
<pre><code>x = [['xy3'], ['-456'], ['True', '4.5']]
for item in x:
    if isinstance(item,list):
        for index,item1 in enumerate(item):
            if item1.replace("-","").isdigit():
                item[index]=int(item1)
            elif item1.replace(".","").isdigit():
                item[index]=float(item1)

print(x)
</code></pre>
<p>output:</p>
<pre><code>[['xy3'], [-456], ['True', 4.5]]
</code></pre>
<p>or if you want you can convert all int to float :</p>
<pre><code>x = [['xy3'], ['-456'], ['True', '4.5']]
for item in x:
    if isinstance(item,list):
        for index,item1 in enumerate(item):
            if item1.replace("-","").replace(".","").isdigit():
                item[index]=float(item1)

print(x)
</code></pre>
<blockquote>
<p>Second Method:</p>
</blockquote>
<p>You can define your own <code>isdigit()</code> function :</p>
<pre><code>x = [['xy3'], ['-456'], ['True', '4.5']]
def isdigit(x):
    try:
        float(x)
        return True
    except ValueError:
        pass
</code></pre>
<blockquote>
<p>Then one line solution :</p>
</blockquote>
<pre><code>print([[float(item1) if '.' in item1 else int(item1)] if isdigit(item1)  else item1 for item in x if isinstance(item,list) for index,item1 in enumerate(item)])
</code></pre>
<blockquote>
<p>Detailed Solution:</p>
</blockquote>
<pre><code>for item in x:
    if isinstance(item,list):
        for index,item1 in enumerate(item):
            if isdigit(item1)==True:
                if '.' in item1:
                    item[index]=float(item1)
                else:
                    item[index]=int(item1)

print(x)
</code></pre>
<p>output:</p>
<pre><code>[['xy3'], [-456], ['True', 4.5]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you need to change the list element itself, not the local reference <code>c</code> or <code>ch</code>:</p>
<pre><code>for i,ch in enumerate(x):
    if ch ... # whatever logic
        x[i] = ... # whatever value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're not updating the list. You're just assigning the value another value, which does, umm..nothing. Use an <code>enumerate</code> function and the index value it provides and then change the value using the index.</p>
<pre><code>for ch in x:
    for c in ch:
        if c.isdigit() == True:
            c = int(c) # You're doing 'xyz' = int('xyz') which does nothing
</code></pre>
<p>Better still, since you're wanting to generate a new list based on the current list, it would be better to go for a <code>map</code></p>
<pre><code>inp_list = [...] # Your list
out_list = list(map(lambda nums: int(n) for n in nums if n.isDigit(), inp_list))
# The above is for only integer conversion but you get the idea. 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Currently you are using the value of of the list, but not updating it. You therefore need to enumerate it, and change the list element directly by referencing to it. </p>
<p>The correct code would look something like this:</p>
<pre><code>for idx,ch in enumerate(x):
    for idx2,c in enumerate(ch):
        if c.isdigit() == True:
            x[idx][idx2] = int(c)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>isdigit</code> and <code>isnumeric</code> will not work since '-456' contains <code>-</code> and '4.5' contains '.' </p>
<p>Instead do:    </p>
<pre><code>x = [['xy3'], ['-456'], ['True', '4.5'], ['3']]
for ch in x:
    for i in range(len(ch)):
        try:
            ch[i] = float(ch[i])
            if int(ch[i]) == ch[i]:
                ch[i] = int(ch[i])
        except:
            if ch[i] in ['True', 'False']:
                ch[i] = (['True', 'False'][0] == ch[i]) 
print(x)   
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>[['xy3'], [-456], [True, 4.5]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>First</strong>: isdigit return false for negative value, that's whay you are not getting the integer in X</p>
<pre><code>&gt;&gt;&gt; x[1][0].isdigit()
False
</code></pre>
<p><strong>Second</strong>:
You are not replacing the updating the variable <code>x</code> in <code>c = int(c)</code></p>
<h1>Working Example will be like:</h1>
<pre><code>x = [['xy3'], ['-456'], ['True', '4.5']]
for index, value in enumerate(x):
     for i,v in enumerate(value):
         try:
             x[index][i] = eval(v)
         except:
             pass
</code></pre>
</div>
<span class="comment-copy">Look into <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a></span>
