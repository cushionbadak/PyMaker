<div class="post-text" itemprop="text">
<p>I have the following text file:</p>
<pre><code>abstract 233:1 253:1 329:2 1087:2 1272:1
game 64:1 99:1 206:1 595:1
direct 50:1 69:1 1100:1 1765:1 2147:1 3160:1
</code></pre>
<p>each key pair is how many times each string appears in a document [docID]:[stringFq]</p>
<p>How could you calculate the number of key pairs in this text file? </p>
</div>
<div class="post-text" itemprop="text">
<p>Your regex approach works fine.  Here is an iterative approach.  If you uncomment the print statements you will uncover some itermediate results.</p>
<p><strong>Given</strong></p>
<pre><code>%%file foo.txt
abstract 233:1 253:1 329:2 1087:2 1272:1
game 64:1 99:1 206:1 595:1
direct 50:1 69:1 1100:1 1765:1 2147:1 3160:1
</code></pre>
<p><strong>Code</strong></p>
<pre><code>import itertools as it


with open("foo.txt") as f:                                  
    lines = f.readlines()
    #print(lines)
    pred = lambda x: x.isalpha()                           

    count = 0                                              
    for line in lines:
        line = line.strip("\n")
        line = "".join(it.dropwhile(pred, line))
        pairs = line.strip().split(" ")
        #print(pairs)
        count += len(pairs)

count
# 15 
</code></pre>
<hr/>
<p><strong>Details</strong></p>
<p>First we use a <code>with</code> statement, which an idiom for safely opening and closing files.  We then split the file into lines via <code>readlines()</code>.  We define a conditional function (or predicate) that we will use later.  The lambda expression is used for convenience and is equivalent to the following function:</p>
<pre><code>def pred(x):
    return x.isaplha()
</code></pre>
<p>We initialize a <code>count</code> variable and start iterating each line.  Every line may have a trailing newline character <code>\n</code>, so we first <code>strip()</code> them away before feeding the line to <code>dropwhile</code>.  </p>
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.dropwhile" rel="nofollow noreferrer"><code>dropwhile</code></a> is a special itertools iterator.  As it iterates a line, it will discard any leading characters that satisfy the predicate until it reaches the first character that fails the predicate.  In other words, all letters at the start will be dropped until the first non-letter is found (which happens to be a space).  We clean the new line again, stripping the leading space, and the remaining string is <code>split()</code> into a list of <code>pairs</code>.  </p>
<p>Finally the length of each line of pairs is incrementally added to <code>count</code>.  The final count is the sum of all lengths of <code>pairs</code>. </p>
<p><strong>Summary</strong></p>
<p>The code above shows how to tackle basic file handling with simple, iterative steps:</p>
<ul>
<li>open the file</li>
<li>split the file into lines</li>
<li>while iterating each line, clean and process data</li>
<li>output a result</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re


file = open('input.txt', 'r')
file = file.read()
numbers = re.findall(r"[-+]?\d*\.\d+|\d+", file)
#finds all ints from text file
numLen = len(numbers) / 2
#counts all ints, when I needed to count pairs, so I just divided it by 2

print(numLen)
</code></pre>
</div>
<span class="comment-copy">I suggest that you turn off your computer and get a piece of paper and a pencil. Describe <b>in words</b> how you would solve this problem by hand. Don't worry about python syntax. Just write the steps needed for a solution.</span>
<span class="comment-copy">Thank you for your answer! Im new to Python so this is very formative!</span>
<span class="comment-copy">No problem.  This is one of many ways to do this.</span>
<span class="comment-copy">You should add explanation in your answer. Address problem with code and explanation not just with code.</span>
<span class="comment-copy">I have added some comments to code</span>
<span class="comment-copy">Regex is a suboptimal way to do this; you could achieve this more easily and more readably using string splitting on a space character, then subtracting <code>1</code> (assuming the first item in the split string is always a word).</span>
<span class="comment-copy">I will look into that!</span>
