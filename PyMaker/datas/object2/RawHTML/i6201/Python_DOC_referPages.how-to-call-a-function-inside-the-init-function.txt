<div class="post-text" itemprop="text">
<p>My professor wanted us to add a new function to this program called <code>loadtemperatureData</code>. </p>
<ul>
<li>This function uses a loop to load temperatures in the temperature file (filename) to a list and return the list to the caller. </li>
</ul>
<p>she also wants us to modify the <code>__init__</code> function:</p>
<p>Modify <code>__init__</code> function to add one more data attribute <code>temperatureList</code>. Inside <code>__init__</code> function, call <code>loadTemperatureData</code> function and assign the returned value to <code>temperatureList</code>.</p>
<p>Modify <code>calculateAverage</code> function to use the data attribute <code>temperatureList</code> to calculate average temperature. </p>
<p>Main function remains unchanged. I keep getting this error:</p>
<pre><code>File "C:/Users/abrooks3/Downloads/temperatureadd.py", line 57, in main
Temperatures = TemperatureFile('Temperatures.txt')
TypeError: __init__() missing 1 required positional argument: 'temperatureList'
</code></pre>
<p>This is my code:
my original code is at the bottom im not sure what she wanted or if I attempted to do this correctly</p>
<pre><code>class TemperatureFile:
    def __init__(self, filename, temperatureList):
        self.__filename = filename
        self.temperatureList = []
        self.loadTemperatureData(temperatureList)


    def getFilename(self):
        return self._Filename

    def setFilename(self):
        self._filename = filename

    def calculateAverage(self, temperaturelist):
        try:
           with open(self.__filename,'r') as temperatureFile:
            total = 0
            temp = 0
            for line in temperatureFile:
                amount = float(line.rstrip("\n"))
                total += amount
                temp = temp + 1
            average = total/temp

        except ValueError as err:
            print(err)
        except IOError as err:
            print(err)
        else:
            average = total/temp
            print(average)
        finally:
            temperatureFile.close()

        def loadTemperatureData(self, filename):
            with open(self.__filename,'w') as temperartureFile:
                temps = [35, 63, 40]
                for temp in temps:
                    temperatureFile.write(str(temp)+ 'n')
                temeperatureFile.close
                return temps


    def main(): 
        num1 = 35
        num2 = 63
        num3 = 40
        temperatureFile = open('Temperatures.txt', 'w')
        temperatureFile.write(str(num1) + '\n')
        temperatureFile.write(str(num2) + '\n')
        temperatureFile.write(str(num3) + '\n')
        temperatureFile.close()
        Temperatures = TemperatureFile('Temperatures.txt')
        Temperatures.calculateAverage(temperatureList)

    main()


##MY original code
class TemperatureFile:
    def __init__(self, filename):
        self.__filename = filename

    def getFilename(self):
        return self._Filename

    def setFilename(self):
        self._filename = filename

    def calculateAverage(self):
        try:
           with open(self.__filename,'r') as temperatureFile:
            total = 0
            temp = 0
            for line in temperatureFile:
                amount = float(line.rstrip("\n"))
                total += amount
                temp = temp + 1
            average = total/temp

        except ValueError as err:
            print(err)
        except IOError as err:
            print(err)
        else:
            average = total/temp
            print(average)
        finally:
            temperatureFile.close() 





def main(): 
    num1 = 35
    num2 = 63
    num3 = 40
    temperatureFile = open('Temperatures.txt', 'w')
    temperatureFile.write(str(num1) + '\n')
    temperatureFile.write(str(num2) + '\n')
    temperatureFile.write(str(num3) + '\n')
    temperatureFile.close()
    Temperatures = TemperatureFile('Temperatures.txt')
    Temperatures.calculateAverage()



main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's the modified code:</p>
<pre><code>class TemperatureFile:
    def __init__(self, filename):
        self.temperatureList = self.loadTemperatureData(filename)  # The __init__requirement (this line). But it doesn't make sense to assign a method's return to a member, when that member could be easily set from within the method


    def calculateAverage(self):  # The calculateAverage requirement
        if not self.temperatureList:
            return None
        #return sum(self.temperatureList) / len(self.temperatureList)
        temp_sum = 0
        for temp in self.temperatureList:
            temp_sum += temp
        return temp_sum / len(self.temperatureList)

    def loadTemperatureData(self, filename):  # The loadTemperatureData requirement (whole function)
        temps = list()
        with open(filename, "r") as temperartureFile:
            for line in temperartureFile.readlines():
                temps.append(float(line.strip()))
        return temps


def main(): 
    num1 = 35
    num2 = 63
    num3 = 40
    temperatureFile = open("Temperatures.txt", "w")
    temperatureFile.write(str(num1) + "\n")
    temperatureFile.write(str(num2) + "\n")
    temperatureFile.write(str(num3) + "\n")
    temperatureFile.close()
    Temperatures = TemperatureFile("Temperatures.txt")
    print(Temperatures.calculateAverage())

main()
</code></pre>
<p><strong>Notes</strong>:</p>
<ul>
<li>I stripped a lot of the old (unused) code</li>
<li>The commented <code>return</code> line from <code>calculateAverage</code> is the simplified form of the 4 lines below it. You can decomment it and delete the 4 following lines</li>
<li>In <code>main</code>, instead of having <code>num1</code>, <code>num2</code>, ... you could create a list: <code>temperatures = [35, 63, 40]</code>, and then iterate over it: <code>for temperature in temperatures:</code>, <code>temperatureFile.write(str(temperature) + "\n")</code>. It's more elegant, and if you want to add another temperature, you just add a new element in the list</li>
</ul>
<p><strong>Output</strong>:</p>
<blockquote>
<pre><code>(py35x64_test) c:\Work\Dev\StackOverflow\q47102727&gt;"c:\Work\Dev\VEnvs\py35x64_test\Scripts\python.exe" a.py
46.0
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You modified <code>__init__</code> to take 2 arguments (not counting <code>self</code>); as the error says, you are only calling it with 1.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to include the <code>temperatureList</code> parameter to your constructor - you're going to assign the return value of <code>loadTemperatureData()</code> to it regardless of the value of that parameter, so you can discard it entirely.</p>
<p>On an unrelated note, I think you want to <em>assign</em> the return value of <code>self.loadTemperatureData(filename)</code> to <code>temperatureList</code> so it'd look something like </p>
<pre><code>def __init__(self, filename):
    self.__filename = filename
    self.temperatureList = self.loadTemperatureData(self.__filename)
</code></pre>
<p>Also, your <code>loadTemperatureData</code> is defined inside another function - so this code won't work if your class actually looks like the one you've included in the question.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your constructor is declared with 2 arguments, while you are creating an object with one argument.</p>
<p>You can remove second argument :</p>
<pre><code>def __init__(self, filename):
        self.__filename = filename
        self.temperatureList = []
        self.loadTemperatureData(filename)
</code></pre>
</div>
<span class="comment-copy">There are multiple problems with your code (both syntactic and semantic), besides the obvious one that you ran into (and everyone rushed in to answer). Also the requirement is poor, especially the <code>__init__</code> part (most likely you got it wrong). Regarding the code you should somehow have mentioned which is the original code and what are the pieces that you added, because the code and the questions are not in sync.</span>
<span class="comment-copy">These are the professors exact words for the <b>init</b> part. "Modify <b>init</b> function to add one more data attribute “temperatureList”. Inside <b>init</b> function, call “loadTemperatureData” function and assign the returned value to “temperatureList”.</span>
<span class="comment-copy">Thank you so much! Sorry, I am really new to programming and I got really confused on what she was asking us to do. But thank you soo much! Is there anything you could recommend me to do to better understand this and be able to code without extra help all the time</span>
<span class="comment-copy">You're welcome! Probably I shouldn't have to just give you the solution but only hints, letting you to find the answers, but the site is not oriented on that direction. But at the end, the important thing is for you to learn something. Regarding learning resources, I don't know... here are some tutorials:  <a href="https://docs.python.org/3/tutorial/index.html#the-python-tutorial" rel="nofollow noreferrer">[Python]: The Python tutorial</a> or <a href="http://www.tutorialspoint.com/python" rel="nofollow noreferrer">[TutorialsPoint]: Python - Tutorial</a>.</span>
