<div class="post-text" itemprop="text">
<p>For example I have a dictionary:  </p>
<pre><code>dictionary = {'dog' : 'bark', 'cat' : 'kitten'}  
</code></pre>
<p>And I want to add another value <code>'woof'</code> to the key <code>'dog'</code> so that I get:  </p>
<pre><code>{'dog': ['bark','woof'], 'cat' : 'kitten'}  
</code></pre>
<p>And then add another value <code>'speak'</code> to the key <code>'dog'</code> so that I get:  </p>
<pre><code>{'dog': ['bark','woof', 'speak'], 'cat' : 'kitten'}
</code></pre>
<p>etc.   </p>
<p>Any help is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You first need to convert the values associated with each key in your <code>dict</code> to lists: You can accomplish this via dict comprehension. Afterwards, it's simply a matter of appending items to the list at the desired key in the dictionary. The following code would work:</p>
<pre><code>dictionary = {"dog" : "bark", "cat" : "kitten"}
dictionary = {key : [value] for key, value in dictionary.items()}

dictionary["dog"].append("woof")
dictionary["dog"].append("speak")
</code></pre>
<p>At which point, if you print <code>dictionary</code>, the output will be:</p>
<pre><code>{'dog': ['bark', 'woof', 'speak'], 'cat': ['kitten']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As far as I can tell, the solution is to initialize each dictionary value as a list from the start. For example, initialize your dictionary as <code>dictionary = {'dog' : ['bark'], 'cat' : ['kitten']}</code>. Then, when you want to add new values to your dictionary keys you can use <code>dictionary["dog"].append("speak")</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would implement a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">defaultdict</a> from the collections module. </p>
<p>Here is an example from the official docs:</p>
<pre><code>&gt;&gt;&gt; s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for k, v in s:
...     d[k].append(v)
...
&gt;&gt;&gt; sorted(d.items())
[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]
</code></pre>
</div>
<span class="comment-copy">When asking a question, it is helpful to include a very specific, answerable question. For example, I do not know exactly what you want me to help you with. It is also best, in situations like these, to show that you have attempted the problem and to describe what problems you have with your attempted solution. If it helps, StackOverflow provides a great <a href="https://stackoverflow.com/help/how-to-ask">guide</a> on how to ask questions.</span>
<span class="comment-copy">To add to the answers already provided, you may want to first test the key <code>['dog']</code> to see if its value is already a list (we know from your example that it's not, but it really doesn't hurt to double-check). You can do this with <code>isinstance</code>.  <code>if not isinstance(dictionary['dog'], list):</code></span>
<span class="comment-copy">I forgot to add that i am looping over it. And coming from that the problem is that every time i create a list out of the values, like in your example, it becomes a list in list.</span>
<span class="comment-copy">@HelloThere You shouldn't be looping over the dict comprehension: That should only occur once. It sounds like you may need to move that line outside of the loop.</span>
