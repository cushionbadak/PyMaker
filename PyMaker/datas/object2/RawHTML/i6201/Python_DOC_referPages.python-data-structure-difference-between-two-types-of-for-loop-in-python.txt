<div class="post-text" itemprop="text">
<p>I was thinking this question should be asked on SO, but I was not able to find it somehow(Let me know in the comment section if there was one, i will delete this post)</p>
<p>It has came to my attention that when we do list replacement, it only works if we are loop through the list by index. Why?</p>
<pre><code>myList = ['a','b','c','d','e']
for item in myList:
    if item == 'a':
        item = 's'
print("First loop:",myList)           //It prints ['a','b','c','d','e']


for i in range(len(myList)):
    if myList[i] == 'a':
        myList[i] = 's'
print("Second loop:",myList)          //It prints ['s','b','c','d','e']
</code></pre>
<p>I have tried to read the python control flow documentation: <a href="https://docs.python.org/3/tutorial/controlflow.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/controlflow.html</a> but it does not really answer my question.</p>
</div>
<div class="post-text" itemprop="text">
<p>In each iteration of the first loop, the variable <code>item</code> gets assigned to each item in the list. When the if condition is satisfied, you then only reassign the variable <code>item</code> to <code>'s'</code>, but that does not change the content of the list.</p>
<p>In the second loop, you are re-assigning the contents of <code>my_list</code>, as you are assigning the ith item to <code>'s'</code> with the line.</p>
<pre><code>    myList[i] = 's'
</code></pre>
<p>Consider also a simpler example:</p>
<pre><code>    myList = ['a', 'b', 'c']
    item = myList[0]  # assign item to 'a'
    item = 's'  # re-assign item variable to 's', does not change list
    myList[0] = 's'  # change the content of the first item in the list
</code></pre>
<p>Also have a look at this: <a href="https://stackoverflow.com/questions/9696495/python-when-is-a-variable-passed-by-reference-and-when-by-value">Python : When is a variable passed by reference and when by value?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>In the first loop, the line <code>item = 's'</code> only changes the value of the locale variable <code>item</code> inside the loop, which is updated in each iterations by the next value in the list. It is not a reference to the list itself.</p>
</div>
<div class="post-text" itemprop="text">
<p>In your first for loop, "item" is just a variable that gets assigned to whichever list item the loop has got to. Reassigning the variable doesn't affect the list. In the second loop, you directly change the list item, which is why it shows up when you print the list. </p>
</div>
<div class="post-text" itemprop="text">
<p>For an example of why the first loop doesn't work, check this:</p>
<pre><code>myList = ['a','b','c','d','e']
item = myList[0]
item = 's'

# this is an example equivalent to what the first loop does
# the values in myList remain unchanged
</code></pre>
<p>And an example equivalent to the second loop:</p>
<pre><code>myList = ['a','b','c','d','e']
myList[0] = 's'

# the first value in myList is changed to 's'
</code></pre>
</div>
<span class="comment-copy">Assigning to a name is fundamentally different from assigning to an <i>indexed</i> name (where <code>myList[i] = 's'</code> is actually a method call <code>myList.__setitem__(i, 's')</code>).</span>
<span class="comment-copy">In your second to last line, I think you meant to use "=", not "==".</span>
<span class="comment-copy">@Markus good call, it was a silly typo.</span>
<span class="comment-copy">@chepner so is the first loop doing this: item = myList[index], since it is stored in a local variable, it does not affect the original list?</span>
<span class="comment-copy">So in general list manipulation, it is more preferable to access the item using index?</span>
<span class="comment-copy">Yes. Otherwise, you have to build a new list, or to find the index of the current item with the function index(), which is not always as accurate as wanted (in case of multiple identical values), slow and, according to my opignon, ugly.</span>
<span class="comment-copy">You could also use the <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate</a> function, which gives you a tuple with the index and the value at the same time.</span>
