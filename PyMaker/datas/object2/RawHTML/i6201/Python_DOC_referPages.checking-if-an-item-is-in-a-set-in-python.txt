<div class="post-text" itemprop="text">
<p>Writing a program to check if a word that the user inputs is in a pre-existing set; no matter what word I input the program returns "False" (even when it's a word I know is in the set).  Code is below:</p>
<pre><code>name = input("which file would you like to open?  ")
s=input("word?  ")

F = open(name, "r")
words = set()
words.add(F)

def contains(s,words):
    if s in words:
        print("true")
    else:
        print("false")
contains(s,words)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming there is one word per line in the file, e.g.</p>
<pre><code>asd
asdf
</code></pre>
<p>You can use this, which adds every line to <code>words</code>:</p>
<pre><code>name = input("which file would you like to open?  ")
s = input("word?  ")

F = open(name, "r")
words = set()
for line in F:  # add every line to words (assuming one word per line)
    words.add(line.strip())

def contains(s, words):
    if s in words:
        print("true")
    else:
        print("false")

contains(s, words)
</code></pre>
<p>Printing an output of:</p>
<pre><code>which file would you like to open?  file.txt
word?  asd
true
</code></pre>
<hr/>
<p><strong>Edit:</strong> a much shorter way for the actual task:</p>
<pre><code>name = input("which file would you like to open?  ")
s = input("word?  ")

F = open(name, "r")
print("true") if s in F.read() else print("false")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming your file looks like this:</p>
<pre><code>banana
apple
apple
orange
</code></pre>
<p>Let's create that file:</p>
<pre><code>with open("test.txt","w") as f:
    f.write("banana\napple\napple\norange")
</code></pre>
<p>Now let's run a sample code:     </p>
<pre><code>s= input("word?  ")

words = set()

# Using with we don't need to close the file
with open("test.txt") as f:
    # here is the difference from your code
    for item in f.read().split("\n"):
        words.add(item)

def contains(s,words):
    for word in words:
        if s in word:
            print("true")
            break
    else:
        print("false")

contains(s,words)
</code></pre>
<p>Typing: </p>
<pre><code>apple returns "true"

ap returns "true"

oeoe returns "false"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The right way is to use a generator for this:</p>
<pre><code>name = input("which file would you like to open?  ")
word_to_look_for=input("word?  ")

def check(word_to_look_for, word_from_file):
    return word_to_look_for == word_from_file

with open(name, "r") as file:
    # The code inside the parentheses () returns a generator object
    word_exists = (check(word_to_look_for, word_from_file.rstrip("\n")) for word_from_file in file.readlines())  

# This will return true if either one of the "check" function results is True 
print(any(word_exists))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For first, it's better to open files using</p>
<pre><code>with open(filepath, 'r') as input_file:
</code></pre>
<p>you could read about this here
<a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/inputoutput.html</a></p>
<p>Also you try to add file into set, but you need to add words.
So this is working (and more pythonic) code:</p>
<pre><code>import os

def load_data(filepath):
    if not os.path.exists(filepath):
        return None
    with open(filepath, 'r') as input_file:
        text = input_file.read()
    return text

if __name__ == '__main__':
    filepath = input("Which file would you like to open?")
    word=input("What we want to find?")
    text = load_data(filepath)
    if not text:
        print("File is empty or not exists!")
        raise SystemExit
    words = set(text.split())
    print(word in words)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a few things going on here which I'm not sure you're totally clear on:</p>
<p>First, F is a file. I'm going to guess that you're intention here is that you're trying to check whether a word is in a file of words (like a dictionary). To do this however you'll need to do something like this:</p>
<pre><code>filename = "somefilename.txt"
words = set()
# open the file
file = open(filename, "r")
# read the lines into an array
lines = file.readlines()

for line in lines:
    words.add(line)

testWord = input("word?  ")
</code></pre>
<p>The second issue is that you're using a function but you're mistaking your parameters as the same variables you've declared in your main flow. Eg.</p>
<pre><code># this is a verbose way of doing this   
words = set()
testWord = input()
def isWordInSet(word, words):
    # words here is not the same as the words
    # outside the function
    if word in words:
        print("True")
    else:
        print("False")

isWordInSet(testWord, words)
</code></pre>
</div>
<span class="comment-copy">You are not adding the contents of the file to the <code>set</code>. You need to read the contents first before creating the set</span>
<span class="comment-copy">So, <code>F</code> is a file-handler object. I presume you are working with some sort of text file of words. You are going to have to parse that file and add the <i>strings</i> to your <code>set</code>.</span>
<span class="comment-copy">read the contents of the file, add those contents to the set <code>words</code></span>
<span class="comment-copy">The thing is.. you need to show us how your file looks like.</span>
<span class="comment-copy">What if I wanted to check if part of a word was in the file?  Say if the word "cup" is on one line and I wanted it to print true if I ask for the word "up"</span>
<span class="comment-copy">@Parker Now you are asking for more things :). You simply loop the words and check if item is inside it (I describe that in my answer)</span>
<span class="comment-copy">Hi @abccd, thanks for the comment. The point of the link was to provide a reference to the generators concept but I suppose you are right to say it was misleading, so I removed it.  Regarding the code example - did you try to run it? I'm pretty sure you will be convinced it is indeed a generator if you just run <code>print(word_exists)</code> at the end of the code</span>
<span class="comment-copy">Cool! Thanks again for the very good feedback.</span>
