<div class="post-text" itemprop="text">
<p>when porting some python code into PHP I ran into problems with the following piece of code:</p>
<pre><code>def getOrAdd(self, config):
    h = config.hashCodeForConfigSet()
    l = self.configLookup.get(h, None)
    if l is not None:
        r = next((c for c in l if config.equalsForConfigSet(c)), None)
        if r is not None:
            return r
    if l is None:
        l = [config]
        self.configLookup[h] = l
    else:
        l.append(config)
    return config
</code></pre>
<p>I cannot figure out, what the line </p>
<pre><code>r = next((c for c in l if config.equalsForConfigSet(c)), None)
</code></pre>
<p>does mean. </p>
<p>Can anybody explain me the sense of this statement, please?</p>
<p>Thank you in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>It's combining <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer">two-arg <code>next</code></a> (which pulls the next value from an iterator, and if the iterator is exhausted returns the second argument as the default) with a <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression" rel="nofollow noreferrer">generator expression</a>, which is like a lazy <code>list</code> comprehension (it produces an iterator/generator that produces values on demand).</p>
<p>So:</p>
<pre><code>r = next((c for c in l if config.equalsForConfigSet(c)), None)
</code></pre>
<p>in English, means "Get the first element of <code>l</code> for which <code>config.equalsForConfigSet</code> of that element is truthy; if no such element is found, return <code>None</code>". And it does it lazily, or if you prefer, with short-circuiting, so as soon as one <code>c</code> value passes, it doesn't need to continue; the rest of <code>l</code> isn't even loaded, let alone tested (unlike how a list comprehension would do it).</p>
<p>In code, you could express the same behavior with a function like so:</p>
<pre><code>def firstEqualsConfigSet(l, config):
    for c in l:
        if config.equalsForConfigSet(c):
            # Short-circuit: got one hit, return it
            return c
    # Didn't find anything
    return None  # Redundant to explicitly return None, but illustrating
                 # that two-arg next could use non-None default
</code></pre>
<p>then use the function to do:</p>
<pre><code>r = firstEqualsConfigSet(l, config)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My understanding is </p>
<p>next(iterator, default)
The next() function returns the next item from the iterator.</p>
<p>its taking 'c' from the for loop which is extracting c from the list l (populated earlier), wherein the for loop is evaluating with a condition that config.equalsForConfigSet(C) should return true.</p>
<p>If there is no value for 'c' in the first parameter to next(), it will return None</p>
<p><a href="https://www.programiz.com/python-programming/methods/built-in/next" rel="nofollow noreferrer">https://www.programiz.com/python-programming/methods/built-in/next</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is basically a call to the <a href="https://docs.python.org/2/library/functions.html#next" rel="nofollow noreferrer"><code>next</code></a> function with two arguments:</p>
<ul>
<li>a generator comprehension - <code>(c for c in l if config.equalsForConfigSet(c))</code></li>
<li><code>None</code></li>
</ul>
<p>So let's tear it into pieces.</p>
<h1>Comprehension Part</h1>
<p>The thing enclosed in the parenthesis <code>()</code> is a <a href="http://djangostars.com/blog/list-comprehensions-and-generator-expressions/" rel="nofollow noreferrer">generator expression</a>. Just like the list comprehension (when used with <code>[]</code>), but the result is a generator object.</p>
<p><em>Thanks @ShadowRanger for hints in the comments.</em></p>
<h1><code>next</code> and <code>None</code></h1>
<p>The <code>next</code> function returns the next item in the given iterator (the generator expression in your case). However, when the iterator has reached its end, and there is nothing else to return, it would raise the <a href="https://docs.python.org/2/library/exceptions.html#exceptions.StopIteration" rel="nofollow noreferrer"><code>StopIteration</code></a> exception. In such cases though, when you pass in the second argument as the default, it is returned instead of raising the exception. So in your case, if the latter case happens then <code>None</code> is returned.</p>
<h1>Summary</h1>
<p>This whole thing is done for the following:</p>
<ul>
<li>the generator is an iterator that generates values on-demand, so all the list is not loaded into the memory</li>
<li>the <code>next</code> call is getting you the first element from your brand new generator if it has one, otherwise <code>None</code></li>
</ul>
<p>So if we describe the source function, it would sound like this:</p>
<blockquote>
<p>Get me the first element out of <code>l</code> that satisfies <code>config.equalsForConfigSet</code> condition if any, otherwise return <code>None</code>.</p>
</blockquote>
</div>
<span class="comment-copy">In this example, <code>next</code> is just getting the first value of the comprehension, or <code>None</code> if it's empty.</span>
<span class="comment-copy">thank you very much!</span>
<span class="comment-copy">you are super fast @ShadowRanger :)</span>
<span class="comment-copy">Pedantic point: In brackets, <code>[]</code>, it's a list comprehension. In parentheses, <code>()</code>, it's called a generator expression. It's not a "list comprehension that makes a generator instance". Those are the official terms, and using one to mean the other will confuse the heck out of people.</span>
<span class="comment-copy">That's right, that's for pointing out. Will add some more links.</span>
<span class="comment-copy">Now I know, what to search for in order to learn more about iterators and generators.</span>
