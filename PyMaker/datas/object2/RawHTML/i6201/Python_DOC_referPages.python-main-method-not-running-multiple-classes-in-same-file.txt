<div class="post-text" itemprop="text">
<p><strong>Context:</strong>
I developed a python script to be run on a remote linux server. Running using Python 3.6.1. The script worked but was very messy, and procedurally written as opposed to OO. So, I re-wrote this script into 2 different classes. One main class and a blueprint class for objects.</p>
<p>My script is a lot more complicated, i just simplified it for this question.</p>
<p><strong>Desired Function:</strong>
Read values from CSV file. Create Objects from these values, 1 object per line. Do some calculations on the values on init'ing the object (in the objects class). Have these objects be accessible from the main class (Base class).</p>
<p><strong>Problems:</strong>
I need some clarification on:</p>
<ol>
<li>The main method is not running. Tried variants on the method call, like Base.main(), including the "if name" statement inside the Base class, and it complains about self not being defined</li>
<li>The "self" reference. Are my usages of this correct? For example: Adding the attribute "age" into the Person objects so you can access it with person.age for example. My method call "self.input_file_handling(Base.inputFilePath)" etc.</li>
</ol>
<h1>Script:</h1>
<pre><code>import csv

class Person:
    def calculate_age(self):
        self.age = 2017 - self.birthYear

    def __init__(self, name, birthYear):
        self.name = self.strip_characters(self, name)
        self.birthYear = int(birthYear)
        self.calculate_age()

class Base:

    inputFilePath = "input.csv"
    people  = []
    def main():
        self.input_file_handling(Base.inputFilePath)
        #More methods here

    @staticmethod
    def input_file_handling(input_file_path):

        input_file_path = str(input_file_path)

        with open(input_file_path, 'r') as csv_file:
            csv_reader = csv.DictReader(csv_file)

            for line in csv_reader:
                    name = line['Name']
                    age = line['age']
                    person = Person(name, age)
                    people.append(person)

if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First the main method of Base class is not static because it use the self variable, so is necessary receive that.</p>
<p>If you want call the main method and use the self variable you need make something like that:</p>
<pre><code>class Base:
  def main(self):
    pass

if __name__ == '__main__':
  instance_of_base = Base()
  instance_of_base.main()
</code></pre>
<p>You can call the input_file_handling method without using self, because it's static</p>
<pre><code>Base.input_file_handling(Base.inputFilePath)
</code></pre>
<p>I think you need learn more about how python resolve static things and the class and object variables.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is not C. There is no <code>main</code> function that automagically executes.</p>
<p>The <code>main</code> <em>method</em> that you defined is inside <code>Base</code> class, but it doesn't accept an argument for the instance.</p>
<p>Either modify it so it accept it (ie <code>self</code> by the convention) or make it a static method.</p>
<p>Then in <code>if __name__ == '__main__':</code> either use <code>Base().main()</code> or <code>Base.main()</code>, depending on what approach you decided to take.</p>
<p><strong>But</strong> you don't seem to need any of this, and only doing it for the sake of forcing Python to look/work as other languages (looking at you C++/Java). Python doesn't require you to have a class or a <code>'main'</code> function/method to execute code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code written in a Pythonic way would be: (Python3)</p>
<pre><code>import csv
from time import time, gmtime


INPUT_FILE_PATH = "input.csv"


class Person:
    def __init__(self, name, birth_year):
        self.name = name.strip()
        self.birth_year = birth_year

    @property
    def birth_year(self):
        return self._birth_year

    @setter.birth_year
    def birth_year(self, value):
        self._birth_year = value
        self._age = gmtime(time()).tm_year - value

    @property
    def age(self):
        return self._age

    @setter.age
    def age(self, value):
        self._birth_year = gmtime(time()).tm_year - value
        self._age = value


def input_file_handling(input_file_path):
    people = []
    with open(input_file_path, 'r') as csv_file:
        csv_reader = csv.DictReader(csv_file)
        for line in csv_reader:
            people.append(Person(line['Name'], int(line['age'])))
    return people


if __name__ == '__main__':
    people = input_file_handling(INPUT_FILE_PATH)
</code></pre>
<p>You seem to come from a OOP-only language (C# maybe?).
Some tips:</p>
<ol>
<li>Avoid globals when able for variables, use them for function definition, class definition and constants.</li>
<li>Do not use a new class to store functions that do not require it</li>
<li>Use lower case and '<em>' for variable and function names, Use CamelCase for class names, use caps and '</em>' for constants.</li>
<li>Use duck typing: do not check that a argument is of a given type, try to use it as if it was and handle throw exceptions if it isn't.</li>
<li>Properties ar your friends if you want to force a specific bahaviour at getting or setting a class attributes</li>
</ol>
<p>If you do not understand somehting ask in the comments.</p>
</div>
<span class="comment-copy"><code>main</code> is a method inside the <code>Base</code> class, to run it you should do <code>Base().main()</code>. But it is pointless, you dont need a class to run a script in python.</span>
<span class="comment-copy">You also need to add <code>self</code> as parameter in <code>main</code> method's definition in <code>Base</code> class.</span>
<span class="comment-copy">"do not check that a argument is of a given type, try to use it as if it was and handle throw exceptions if it isn't." =&gt; depends on the context actually.</span>
<span class="comment-copy">@brunodesthuilliers From <a href="https://docs.python.org/3/glossary.html#term-duck-typing" rel="nofollow noreferrer">Python's glossary</a></span>
<span class="comment-copy">Also and just for the record: this code will not work properly on Python 2.7.x - <code>Person</code> would need to inherit from <code>object</code> for properties to work. Not an issue here since the OP stated (s)he's using 3.6.x but someone else reading the answer and trying to use properties on old-style classes  might be in for a surprise ;)</span>
<span class="comment-copy">from 17+  years of experience with Python ;)</span>
<span class="comment-copy">I'll make it clear its Python3</span>
