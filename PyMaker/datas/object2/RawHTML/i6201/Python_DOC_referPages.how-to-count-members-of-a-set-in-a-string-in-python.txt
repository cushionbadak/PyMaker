<div class="post-text" itemprop="text">
<p>I have a list of letters and letter clusters, like this:</p>
<pre><code>['x', 'str', 'a', 'pr']
</code></pre>
<p>I have a string that I need to know how many total occurrences of any member of the list are in it:</p>
<p>stripe = 1, rope = 0,, rprpraxp = 4, etc</p>
<p>Now I can loop over the members of the list counting occurrences of each member and then total them, like this:</p>
<pre><code>sublist = ['x', 'str', 'a', 'pr']
string = "rprpraxp"
inst = 0
for member in sublist:
    inst = inst + string.count(member)
print(inst)
</code></pre>
<p>However I am wondering if I am missing a shorter, simpler, more intuitive and more Pythonic way of counting the members of a set of items in another string, something like:</p>
<pre><code>inst = string.multicount(['x', 'str', 'a', 'pr'])
</code></pre>
<p>Anything like this exist?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> and <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a>:</p>
<pre><code>sublist = ['x', 'str', 'a', 'pr']
string = "rprpraxp"
print(sum(map(string.count, sublist)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; S = "rprpraxp"
&gt;&gt;&gt; L = ['x', 'str', 'a', 'pr']
&gt;&gt;&gt; sum(S.count(e) for e in L if e in S)
4
</code></pre>
</div>
<span class="comment-copy">Use the package <code>collections</code> -- see the <code>counter</code> object.</span>
<span class="comment-copy">What if strings overlap? Example: list is ['ab', 'ba'] and string is 'aba'. Is the answer 1 or 2?</span>
<span class="comment-copy">I'm coding my text to make sure that does not happen - but good catch!</span>
<span class="comment-copy">I can see it's time for me to go study sum and map now! :)</span>
<span class="comment-copy">Because sets are faster?</span>
<span class="comment-copy">Yes, sets have faster lookups than list. You won't notice any difference in this case because it is a small list of strings. I'm just pointing it out. I edited to let it as a list though it is completely trivial in this case.</span>
<span class="comment-copy">Just to confirm, what you are calling a set is the same thing as a tuple, right? Or is this a new type I haven't bumped into yet?</span>
<span class="comment-copy">nevermind, just looked up sets, grin</span>
<span class="comment-copy">Won't you get the same answer if you omit <code>if e in S</code>?</span>
<span class="comment-copy">@Robáµ©: Sure. Might even be a bit faster.</span>
