<div class="post-text" itemprop="text">
<p>I have the following code snippet. What i need to code that when i click the button i need the frame color to change one by one from the list of colors defined. </p>
<pre><code> from tkinter import *
 from tkinter import ttk

def ChangeColor():
colors = ['red','green', 'orange','blue']
for color in colors:
    #color = entry.get()
    frame.config(bg = color)

root = Tk()
root.title("Title")

frame = Frame (root, width = 260, height = 200)
frame.pack()

btn = ttk.Button(frame, text = 'Change color', command = ChangeColor)
btn.place (x = 80, y = 100)

entry = ttk.Entry (frame, width = 20)
entry.place(x = 80, y = 70)

root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="noreferrer"><code>cycle</code></a> iterator from itertools for this.</p>
<pre><code>from tkinter import *
from tkinter import ttk
from itertools import cycle

root = Tk()
root.title("Title")

frame = Frame (root, width = 260, height = 200)
frame.pack()

colors = ['red','green', 'orange','blue']
color_gen = cycle(colors)

def ChangeColor():
    frame.config(bg = next(color_gen))

btn = ttk.Button(frame, text = 'Change color', command = ChangeColor)
btn.place (x = 80, y = 100)

entry = ttk.Entry (frame, width = 20)
entry.place(x = 80, y = 70)

root.mainloop()
</code></pre>
<hr/>
<p>One thing I need to mention: please avoid doing "star" imports. When you do</p>
<pre><code>from tkinter import *
</code></pre>
<p>it puts 135 Tkinter names into your namespace; in Python 2 you get 175 names. This creates needless clutter in the namespace and it can cause name collisions: if you accidentally name one of your variables with one of the imported names that can lead to mysterious bugs. It's even worse when you do star imports with multiple modules since they can stomp over each others' names. Also, star imports make the code harder to read since you have to remember which names are defined locally and which are imported.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would change your app to a class so you can store variables and access them easily, also I bound the enter key to the entry widget so that works too. This way when you create an <code>instance</code> of <code>class app</code> it is an <code>instance</code> of a <code>Tk()</code> root, but you don't have to call it root</p>
<pre><code>import tkinter as tk
from tkinter import ttk

class app(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.title("Title")
        self.frame = tk.Frame(self, width = 260, height = 200)
        self.frame.pack()

        self.btn = ttk.Button(self.frame, text = 'Change color', command = self.ChangeColor)
        self.btn.place (x = 80, y = 100)

        self.entry = ttk.Entry (self.frame, width = 20)
        self.entry.place(x = 80, y = 70)
        self.entry.bind("&lt;Return&gt;",self.ChangeColorEntry)

        self.colors = ['red','green','orange','blue']
        self.current_color = -1
        self.standard_bg = self.frame['background']

    def ChangeColor(self,event=None):
        if self.current_color == len(self.colors) - 1:
            self.frame.config(bg = self.standard_bg)
            self.current_color = -1
            return
        else:
            self.current_color += 1
        color = self.colors[self.current_color]
        self.frame.config(bg = color)

    def ChangeColorEntry(self,event=None):
        entered = self.entry.get().lower().strip()
        if entered == "none":
            self.frame.config(bg = self.standard_bg)
        else:
            try:
                self.current_color = self.colors.index(entered)
                self.frame.config(bg = entered)
            except:
                pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>@PM 2Rings answer is cleaner but since I was working on this I thought I'd still post it incase you wanted to implement it manually</p>
<pre><code>from tkinter import *
from tkinter import ttk

colors = ['red', 'green', 'orange', 'blue']
colors_it = iter(colors)

def get_next_color():
    try:
        global colors_it
        return next(colors_it)
    except StopIteration:
        colors_it = iter(colors)
        return next(colors_it)

def ChangeColor():
    frame.config(bg=get_next_color())

root = Tk()
root.title("Title")

frame = Frame (root, width = 260, height = 200)
frame.pack()

btn = ttk.Button(frame, text = 'Change color', command = ChangeColor)
btn.place (x = 80, y = 100)

entry = ttk.Entry (frame, width = 20)
entry.place(x = 80, y = 70)

root.mainloop()
</code></pre>
</div>
<span class="comment-copy">You need to update your indentation and spacing</span>
<span class="comment-copy">With that <code>for</code> loop you change to every color and end up on blue.</span>
<span class="comment-copy">yes, that's what happens cause it reach to the end... I need to go through one by one with each click. I may not need loop for this...i tried to figure this out with indexing but couldn't do it.</span>
<span class="comment-copy">This made me learn that the default color is <code>SystemButtonFace</code>, heh.</span>
<span class="comment-copy">'star' imports are called wildcard imports :)</span>
<span class="comment-copy">@Coal_ Indeed they are, but the name "star imports" is also very widely used, and easily understood. And shorter. ;)</span>
