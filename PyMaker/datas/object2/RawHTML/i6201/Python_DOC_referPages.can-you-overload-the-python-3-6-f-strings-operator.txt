<div class="post-text" itemprop="text">
<p>In Python 3.6, you can use <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">f-strings</a> like:</p>
<pre><code>&gt;&gt;&gt; date = datetime.date(1991, 10, 12)
&gt;&gt;&gt; f'{date} was on a {date:%A}'
'1991-10-12 was on a Saturday'
</code></pre>
<p>I want to overload the method receiving the <code>'%A'</code> above. Can it be done? </p>
<p>For example, if I wanted to write a dumb wrapper around <code>datetime</code>, I might expect this overloading to look something like:</p>
<pre><code>class MyDatetime:
    def __init__(self, my_datetime, some_other_value):
        self.dt = my_datetime
        self.some_other_value = some_other_value

    def __fstr__(self, format_str):
        return (
            self.dt.strftime(format_str) + 
            'some other string' +
            str(self.some_other_value
        )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>Yes</em>, but by using <code>__format__</code>, not <code>__fstr__</code>.</p>
<hr/>
<p><code>f</code>-strings were not an overhaul of the previous methods to format strings. Instead, it built on the protocols already in place. </p>
<p>From <a href="https://www.python.org/dev/peps/pep-0498" rel="nofollow noreferrer">PEP 0498</a> that introduced them, in <a href="https://www.python.org/dev/peps/pep-0498/#code-equivalence" rel="nofollow noreferrer">Code equivalence</a>:</p>
<blockquote>
<p>The exact code used to implement f-strings is not specified. However, it is guaranteed that any embedded value that is converted to a string will use that value's <code>__format__</code> method. This is the same mechanism that <code>str.format()</code> uses to convert values to strings.</p>
</blockquote>
<p>and then again, in <a href="https://www.python.org/dev/peps/pep-0498/#format-specifiers" rel="nofollow noreferrer">Format Specifiers</a>:</p>
<blockquote>
<p>Once expressions in a format specifier are evaluated (if necessary), format specifiers are not interpreted by the f-string evaluator. Just as in <code>str.format()</code>, they are merely passed in to the <code>__format__()</code> method of the object being formatted.</p>
</blockquote>
<p>So, there's no <em>new</em> special method for them. You need to define a <code>__format__</code> method that takes the spec and returns an appropriately formatted string. </p>
<p>As the docs on <a href="https://docs.python.org/3/reference/datamodel.html#object.__format__" rel="nofollow noreferrer"><code>__format__</code></a> also describe:</p>
<blockquote>
<p>Called by the <code>format()</code> built-in function, and by extension, <em>evaluation of formatted string literals</em> and the <code>str.format()</code> method, to produce a “formatted” string representation of an object.</p>
</blockquote>
</div>
<span class="comment-copy"><a href="https://gist.github.com/wimglenn/3186645d0474550160d3210bf488f8f8" rel="nofollow noreferrer">Here's one I prepared earlier</a>.</span>
<span class="comment-copy">for some more flexibility, you can override the methods made available in the <a href="https://docs.python.org/3.4/library/string.html#string.Formatter" rel="nofollow noreferrer"><code>string.Formatter</code> class</a> - such as <code>get_field</code>, <code>get_value</code>, <code>check_unused_args</code>, <code>format_field</code>, and <code>convert_field</code> - to get some more detailed control over the <code>format</code> function behavior.</span>
<span class="comment-copy">Details - <a href="https://docs.python.org/3/reference/datamodel.html#object.__format__" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#object.__format__</a></span>
