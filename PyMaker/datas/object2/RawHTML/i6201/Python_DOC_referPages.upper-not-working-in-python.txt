<div class="post-text" itemprop="text">
<p>I currently have this code</p>
<pre><code>num_lines = int(input())
lines = []
tempy = ''
ctr = 1
abc = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'
}
for i in range(0, num_lines):
  tempy = input()
  lines.append([])
  lines[i].append(tempy)


for o in range(0, num_lines):
  for p  in range(0, len(lines[o])):
    for u in range(0, len(lines[o][p])):
      if lines[o][p][u] in abc:
        lines = str(lines)
        if ctr % 2 == 0:
          print(lines[o][p][u])
          lines[o][p][u].upper()
        else:
          print(lines[o][p][u])
          lines[o][p][u].lower()
        ctr += 1

print(lines)
</code></pre>
<p>but the .upper line does not seem to have effect, can anyone please tell me why?</p>
<p>Thank you in advance, and if there is an answer already please kindly tell me that instead of marking as a duplicate cause I did search for a good hour</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>.upper()</code> and <code>.lower()</code> functions do not modify the original <code>str</code>. Per <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">the documentation</a>,</p>
<p>For <code>.upper()</code>:</p>
<blockquote>
<p><strong>str.upper()</strong></p>
<p>Return a copy of the string with all the cased characters converted to uppercase.</p>
</blockquote>
<p>For <code>.lower()</code>:</p>
<blockquote>
<p><strong>str.lower()</strong></p>
<p>Return a copy of the string with all the cased characters converted to lowercase.</p>
</blockquote>
<p>So if you want the uppercase and lowercase characters respectively, you need to print <code>lines[o][p][u].upper()</code> and <code>lines[o][p][u].lower()</code> as opposed to <code>lines[o][p][u]</code>. However, if I correctly understand your objective, from your code sample, it looks as though you're trying to alternate uppercase and lowercase characters from string inputs. You can do this much more easily using <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer"><strong>list comprehension</strong></a> with something like the following:</p>
<pre><code>num_lines   = int(input("How many words do you want to enter?: "))
originals   = []
alternating = []

for i in range(num_lines):

    line = input("{}. Enter a word: ".format(i + 1))
    originals.append(line)
    alternating.append("".join([x.lower() if j % 2 == 0 else x.upper() for j, x in enumerate(line)]))

print("Originals:\t",   originals)
print("Alternating:\t", alternating)
</code></pre>
<p>With the following sample output:</p>
<pre><code>How many words do you want to enter?: 3
1. Enter a word: Spam
2. Enter a word: ham
3. Enter a word: EGGS
Originals:       ['Spam', 'ham', 'EGGS']
Alternating:     ['sPaM', 'hAm', 'eGgS']
</code></pre>
</div>
<span class="comment-copy">I have no idea what you're trying to do with your indexing... What do you mean by <code>lines[o][p][u]</code>?  There aren't three nested lists?</span>
<span class="comment-copy">what are you actually trying to accomplish with this code?</span>
<span class="comment-copy">Please reduce your program to the shortest possible program that still demonstrates the error. If your question is about <code>.upper()</code>, that demonstration program should be about three lines long. See <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> for more information.</span>
<span class="comment-copy">I suspect your question could be demonstrated thus: <code>s = 'abcdef'</code> / <code>s.upper()</code> / <code>print(s)</code>, expected output  <code>ABCDEF</code>, actual output <code>abcdef</code>. Is that so?</span>
<span class="comment-copy">strings are immutable. You have to assign the returned value from <code>upper()</code> to a variable, it will not be changed in place. So instead of <code>lines[o][p][u].upper()</code> do <code>lines[o][p][u] = lines[o][p][u].upper()</code>. Your example code is way too complex for the issue you are trying to show. You could make an example far more minimal than this.</span>
<span class="comment-copy">Thanks for the help! Didn't know it saves automatically!</span>
