<div class="post-text" itemprop="text">
<p>How can I check if a list exists as a value in a dictionary which is a member of a list (list of dictionaries)?</p>
<pre><code>totalList = ([{'score': 1, 'item': ['text1', 'text2']},
              {'score': 2, 'item': ['text3', 'text4']},
              {'score': 3, 'item': ['text5', 'text6']}])
redList = ['text1', 'text2']
</code></pre>
<p>A one-liner such as this (though this one doesn't work for obvious reasons). I want to avoid loops.</p>
<pre><code>if redList in totalList:
    print("True")
</code></pre>
<p>Context:</p>
<pre><code>redlists = a list of lists
totalList = []
for redlist in redlists:
   if redlist not in totalList:
      totalList.append(dictionary_item))
</code></pre>
<p>Example <code>ditcionary_item</code> = <code>{'score': 1, 'item': ['text1', 'text2']}</code> </p>
<p><strong>Note:</strong> Total list keeps growing because every time redList is not in the totalList, I add a new dictionary to the toalList based on predefined criteria. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>any(d['item'] == redList for d in totalList)
</code></pre>
<p>Or with <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer">operator.itemgetter</a>:</p>
<pre><code>redList in map(itemgetter('item'), totalList)
</code></pre>
<p>Edit: Or just a generator expression (similar to Leandro's, but more space-efficient and perhaps more time-efficient as well, since it stops at the first finding):</p>
<pre><code>redList in (d['item'] for d in totalList)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try with this</p>
<pre><code>if redList in [x.get('item') for x in totalList]:
    print("True")`
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you often need this check, it might be worth it to  convert your lists to tuples. This way, they become <a href="https://stackoverflow.com/a/14535739/6419007">hashable</a> and can be saved in a <code>set</code>:</p>
<pre><code>totalList = [{'score': 1, 'item': ['text1', 'text2']},
             {'score': 2, 'item': ['text3', 'text4']},
             {'score': 3, 'item': ['text5', 'text6']}]

items = {tuple(d['item']) for d in totalList}
print(items)
# {('text3', 'text4'), ('text1', 'text2'), ('text5', 'text6')}
redList = ['text1', 'text2']
print(tuple(redList) in items)
# True
</code></pre>
<p>You only need to iterate once in order to create the set. Every check will be fast and won't require any loop.</p>
<p>If you want to get the corresponding score, you could save the tuples in a dict:</p>
<pre><code>scores = {tuple(d['item']):d['score'] for d in totalList}
print(scores)
# {('text1', 'text2'): 1, ('text3', 'text4'): 2, ('text5', 'text6'): 3}

print(scores.get(tuple(redList), 0))
# 1
print(scores.get(tuple(['a', 'b']), 0))
# 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>filter</code>:</p>
<pre><code>redList = ['text1', 'text2']
totalList = ([{'score': 1, 'item': ['text1', 'text2']},
          {'score': 2, 'item': ['text3', 'text4']},
          {'score': 3, 'item': ['text5', 'text6']}])
if list(filter(lambda x:x["item"] == redList, totalList)):
    print('redList in totalList')
</code></pre>
</div>
<span class="comment-copy">Here is a possible duplicate question <a href="https://stackoverflow.com/questions/5762643/how-to-filter-list-of-dictionaries-with-matching-values-for-a-given-key" title="how to filter list of dictionaries with matching values for a given key">stackoverflow.com/questions/5762643/â€¦</a></span>
<span class="comment-copy">the dictionary is always the first element of the list, or at the same index ?</span>
<span class="comment-copy"><b>Why</b> do you want to avoid loops?</span>
<span class="comment-copy">@PRMoureu didn't really get your question but each dictionary stays at the same index once added to the list.</span>
<span class="comment-copy">@StefanPochmann this piece of code is already inside loops so want to avoid a big nested loop. I can create a function for the check but was wondering if there will be another way to do it as a one-liner like a normal list membership check.</span>
<span class="comment-copy">will go with the itemgetter/map option.</span>
<span class="comment-copy">You are right :)</span>
<span class="comment-copy">that's indeed a better solution, however, totalList keeps growing so its not a static list. Forgot to mention that in question. Just updated the question. Everytime the redlist is not in the totallist, I add a new dictionary to Totallist.</span>
<span class="comment-copy">@utengr: No problem. <code>items</code> and <code>scores</code> are mutable. You can add new tuples any time you want.</span>
<span class="comment-copy">you are right. I  can add a new tuple to items every time I update totalList.</span>
