<div class="post-text" itemprop="text">
<p>I am a python user looking to learn regular expressions and I have just a good good course on Udemy that seems to be OK. However it is neither a python course nor a python regular expression course.</p>
<p>Are regular expressions the same on any programming language ?</p>
<p>I mean would they be the same and use the exact same syntax I would be using with the <code>re</code> package in python ?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are significant differences both large and subtle between implementations.</p>
<p>According to the (2.7) regex howto, Python's <code>re</code> module was based on Perl regular expressions. The regular expression syntax is almost the same. The <em>usage</em> in Perl is quite different; more compact (or more unreadable, depending on your views :-).</p>
<p>Also keep in mind that there are differences in regular expressions between Python 2 and 3, depending on which flags are used. Simplifying somewhat you could say that out of the box, Python 2 regexes handle ASCII strings while Python 3 handle unicode strings.</p>
<p>In Python regular expressions, the <code>*</code> and <code>+</code> qualifiers are <em>greedy</em>, that is they match as much text as possible. That makes for results that are not intuitive. For example, suppose you want to search for text between angle brackets. You might think that <code>&lt;.*&gt;</code> might do that. But observe:</p>
<pre><code>In [1]: import re

In [2]: re.findall('&lt;.*&gt;', '&lt;a&gt; &lt;b&gt; &lt;c&gt;')
Out[2]: ['&lt;a&gt; &lt;b&gt; &lt;c&gt;']
</code></pre>
<p>You have to add a <code>?</code> to make them non-greedy.</p>
<pre><code>In [3]: re.findall('&lt;.*?&gt;', '&lt;a&gt; &lt;b&gt; &lt;c&gt;')
Out[3]: ['&lt;a&gt;', '&lt;b&gt;', '&lt;c&gt;']
</code></pre>
<p>To be explicit, you'd have to look for anything but the end character.</p>
<pre><code>In [4]: re.findall('&lt;[^&gt;]*&gt;', '&lt;a&gt; &lt;b&gt; &lt;c&gt;')
Out[4]: ['&lt;a&gt;', '&lt;b&gt;', '&lt;c&gt;']
</code></pre>
<p>UNIX-like systems such as Linux and *BSD generally support POSIX regular expressions in many utilities. Those come in two flavors, basic and extended. Basic POSIX regular expressions do not support the branching metacharacter <code>|</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>there are variations on them...</p>
<p>this site will give you a way to test your expression for some common languages (including python)...</p>
<p><a href="https://regex101.com/" rel="nofollow noreferrer">https://regex101.com/</a></p>
</div>
<span class="comment-copy">Not every rendition of the RegEx module per each language is created the same, hence why there are differences between PHP's RegEx and VB.NET's RegEx, and in sum they all scale differently to Python's RegEx.</span>
<span class="comment-copy">Notice regular in regular expression. That means they are same everywhere generally</span>
<span class="comment-copy">Short answer is "no", although they're likely to be very similar whatever course you're doing, especially in terms of basics (so your course will definitely be applicable). Easiest thing to do is to just have a quick look at <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">the docs</a> to see what does what in Python.</span>
<span class="comment-copy">@RajeshPaudel That's both not true about regular expressions (eg perl flavour vs python flavour) and not true about why they're named like that - it comes from formal language theory where you have regular languages and grammars.</span>
<span class="comment-copy">Very well explained. Thanks</span>
