<div class="post-text" itemprop="text">
<p>I have just started to learn python and would like help using string.replace(x,y).</p>
<p>Specifically, replacing all to X's and x's depending whether the letter was originally capitalized or not.</p>
<p>e.g.
John S. Smith -&gt; Xxxx X. Xxxxx</p>
<p>What I have created currently is below.</p>
<pre><code>print("Enter text to translate:", end ="")
sentence = input ()
replaced = sentence.replace("", "x") 
print(replaced)
</code></pre>
<p>However when I input text like "John Smith". I am returned with "xJxoxhxnx xSx.x xSxmxixtxhx".</p>
<p>Thank you in advance!</p>
<p>Edit: Although string.replace(x,y) may be longer to perform, I'd like to slowly build on my knowledge before finding faster and shorter ways to perform the same operation. I'd highly appreciate it if it was explained in terms of string.replace(x, y) instead of re.sub</p>
<p>Edit2: I have been notified that string.replace is the wrong tool to use. Thank you for your help! I will be reading into re.sub instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you insist on using <code>replace</code> even though it's the wrong tool for the job (because it can only replace one letter at a time and has to go through the whole string every time), here's a way:</p>
<pre><code>&gt;&gt;&gt; s = 'John S. Smith'
&gt;&gt;&gt; for c in s:
        if c.islower():
            s = s.replace(c, 'x')
        if c.isupper():
            s = s.replace(c, 'X')

&gt;&gt;&gt; s
'Xxxx X. Xxxxx'
</code></pre>
<p>And a somewhat neat more efficient way:</p>
<pre><code>&gt;&gt;&gt; ''.join('x' * c.islower() or 'X' * c.isupper() or c for c in s)
'Xxxx X. Xxxxx'
</code></pre>
<p>And a regex way:</p>
<pre><code>&gt;&gt;&gt; re.sub('[A-Z]', 'X', re.sub('[a-z]', 'x', s))
'Xxxx X. Xxxxx'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re
print("Enter text to translate:", end ="")
sentence = input()
replaced = re.sub("[A-Z]", 'X', re.sub("[a-z]", 'x', sentence))
print replaced
</code></pre>
<p>Use re.sub to replace individual character of string or iterate through the string.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not the correct usecase for string replace.
There are 2 things that you can do:</p>
<ul>
<li>Loop through the string and perform the operation</li>
<li>Use re.sub to replace using regex. (<a href="https://stackoverflow.com/questions/5658369/how-to-input-a-regex-in-string-replace">How to input a regex in string.replace?</a>)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Plain way:</p>
<pre><code>&gt;&gt;&gt; my_string = "John S. Smith"
&gt;&gt;&gt; replaced = ''
&gt;&gt;&gt; for character in my_string:
    if character.isupper():
        replaced += 'X'
    elif character.islower():
        replaced += 'x'
    else:
        replaced += character    

&gt;&gt;&gt; replaced
'Xxxx X. Xxxxx'
</code></pre>
<p>One liner:</p>
<pre><code>&gt;&gt;&gt; ''.join('x' if c.islower() else 'X' if c.isupper() else c for c in my_string)
'Xxxx X. Xxxxx'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>print("Enter text to translate:", end ="")
sentence = input ()
replaced = ''.join(['x' if (i&gt;='a' and i&lt;='z') else 'X' if (i&gt;='A' and i&lt;='Z') else i for i in sentence])
print(replaced)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>re</code> module, and provide <code>re.sub</code> with a callback function to achieve this.</p>
<pre><code>import re

def get_capital(ch):
    if ch.isupper():
        return "X"
    return "x"

def get_capitals(s):
    return re.sub("[a-zA-Z]", lambda ch: get_capital(ch.group(0)), s)

print(get_capitals("John S. Smith"))
</code></pre>
<p>Has the output:</p>
<pre><code>Xxxx X. Xxxxx
</code></pre>
<p>As a matter of style, I've not condensed any of this into lambdas or one-liners, although you probably could.</p>
<p>This will be significantly faster than just repeated concatenation.</p>
</div>
<div class="post-text" itemprop="text">
<p>** edit fixed code **</p>
<p>Try this instead, it is a bit of a simple and easily breakable example but this is what you would need to achieve what you want:</p>
<pre><code>s = "Testing This"
r = ""

for c in s:
    if c.isalpha():
        if c.islower():
            r += "x"
        else:
            r += "X"
    else:
        r += c

print(r)
</code></pre>
</div>
<span class="comment-copy">You're replacing <code>''</code> with <code>'x'</code>, and not the other way around. Have a good old look at the manual for the function: <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer">str.replace</a>. Notice how old comes first, and new last in the argument list?</span>
<span class="comment-copy"><code>string.replace</code> is the wrong tool for this.</span>
<span class="comment-copy">To indicate that your question is solved, you should just mark one of the answers as <i>accepted</i>; you should not change the title.</span>
<span class="comment-copy"><code>i &gt;= 'a' and i &lt;= 'z'</code> is equivalent to <code>'a' &lt;= i &lt;= 'z'</code>...</span>
<span class="comment-copy">Apologies, fixed to add the .isalpha() method</span>
