<div class="post-text" itemprop="text">
<p>I know similar questions have been popular in the past, but none refers to my problem. I'm looking for a way to read data from Excel file in Python, but I'm strongly against using non-builtin modules. </p>
<p>The reason why is that in my case Python is a component of <a href="https://docs.qgis.org/2.14/en/docs/pyqgis_developer_cookbook/" rel="nofollow noreferrer">another software</a>, so incorporating additional module would require from every user knowledge about how to use <code>pip</code>, which Python installation on your pc should one install module into, etc. The solution must not require any additional actions from user.</p>
<p>I can read CSV files with Python builtin easily, so that could work, but how can I convert Excel to CSV in the first place? Or is there a way to read Excel directly? </p>
<p>Edit: It is Python 2, that is used in this software.</p>
<p>Edit2: 
Anyone minds explaining the downvote? I think this isn't a question about a ready solution or module, but rather a method and is well detailed. It is not always possible to use external modules, so this is an actual problem. If it is not possible at all though, then I would simply expect an answer instead of -1.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not really the prettiest solution, but you could download the complete code repository of one of the excel handling packages for python (<a href="https://bitbucket.org/openpyxl/openpyxl/downloads/" rel="nofollow noreferrer"><code>openpyxl</code></a> for example) and put these files in the same directory as the python script that you're going to run. Subsequently you can do an <code>import</code> of these local package files in your script.</p>
<p>Note: if the excel handling package has dependencies on other packages, then you'll need to download these as well.</p>
</div>
<span class="comment-copy">It may not be realistic to expect to be able to read an excel file without using any extra modules.</span>
<span class="comment-copy">I don't think there's a native python modules to interact with Excel. Saving an Excel to CSV should be easy: File -&gt; Save As -&gt; Choose CSV in the File Format dropdown (note you'll lose coloring information, etc.)</span>
<span class="comment-copy"><i>"how can I convert Excel to CSV"</i> isn't a programming question, that's built right into Excel. If you want to know what's in the standard library, see <a href="https://docs.python.org/3/library/" rel="nofollow noreferrer">docs.python.org/3/library</a></span>
<span class="comment-copy">Thanks everyone. Yes, I expect there is no pretty solution, I'm just hoping for some (maybe long, not so efficient, inelegant compared to pandas etc) workaround.</span>
<span class="comment-copy">I couldn't find any better solution. Thank you. Important note - when doing this, take a look at the license of taken package.</span>
<span class="comment-copy">If all you are going to do is read, I strongly recommend using <code>xlrd</code> instead.</span>
<span class="comment-copy">@JohnY For which reason exactly?</span>
<span class="comment-copy">I find xlrd has a better API. I trust it to <a href="https://stackoverflow.com/questions/13637888/openpyxl-please-do-not-assume-text-as-a-number-when-importing">preserve data types</a> more than I trust OpenPyXL. xlrd reads both .xls and .xlsx. xlrd doesn't have any other dependencies (last time I looked, OpenPyXL does).</span>
