<div class="post-text" itemprop="text">
<p>I have two lists:</p>
<pre><code>a = [0, 0, 0, 1, 1, 1, 1, 1, .... 99999]
b = [24, 53, 88, 32, 45, 24, 88, 53, ...... 1]
</code></pre>
<p>I want to merge those two lists into a dictionary like:     </p>
<pre><code>{
    0: [24, 53, 88], 
    1: [32, 45, 24, 88, 53], 
    ...... 
    99999: [1]
}
</code></pre>
<p>A solution might be using <code>for</code> loop, which does not look good and elegant, like:</p>
<pre><code>d = {}
unique_a = list(set(list_a))
for i in range(len(list_a)):
    if list_a[i] in d.keys:
        d[list_a[i]].append(list_b[i])
    else:
        d[list_a] = [list_b[i]]
</code></pre>
<p>Though this does work, it’s an inefficient and would take too much time when the list is extremely large. I want to know more elegant ways to construct such a dictionary? </p>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="noreferrer">defaultdict</a>:</p>
<pre><code>from collections import defaultdict
d = defaultdict(list)
list_a = [0, 0, 0, 1, 1, 1, 1, 1, 9999]
list_b = [24, 53, 88, 32, 45, 24, 88, 53, 1]
for a, b in zip(list_a, list_b):
   d[a].append(b)

print(dict(d))
</code></pre>
<p>Output:</p>
<pre><code>{0: [24, 53, 88], 1: [32, 45, 24, 88, 53], 9999: [1]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alternative <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="noreferrer"><strong><code>itertools.groupby()</code></strong></a> solution:</p>
<pre><code>import itertools

a = [0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3]
b = [24, 53, 88, 32, 45, 24, 88, 53, 11, 22, 33, 44, 55, 66, 77]

result = { k: [i[1] for i in g] 
           for k,g in itertools.groupby(sorted(zip(a, b)), key=lambda x:x[0]) }
print(result)
</code></pre>
<p>The output:</p>
<pre><code>{0: [24, 53, 88], 1: [24, 32, 45, 53, 88], 2: [11, 22, 33, 44, 55, 66], 3: [77]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No fancy structures, just a plain ol' dictionary.</p>
<pre><code>d = {}
for x, y in zip(a, b):
    d.setdefault(x, []).append(y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this with a dict comprehension:</p>
<pre><code>list_a = [0, 0, 0, 1, 1, 1, 1, 1]
list_b = [24, 53, 88, 32, 45, 24, 88, 53]
my_dict = {key: [] for key in set(a)}  # my_dict = {0: [], 1: []}
for a, b in zip(list_a, list_b):
    my_dict[a].append(b)
# {0: [24, 53, 88], 1: [32, 45, 24, 88, 53]}
</code></pre>
<p>Oddly enough, you cannot seem to make this work using <code>dict.fromkeys(set(list_a), [])</code> as this will set the value of all keys equal to the <em>same</em> empty array:</p>
<pre><code>my_dict = dict.fromkeys(set(list_a), [])  # my_dict = {0: [], 1: []}
my_dict[0].append(1)  # my_dict = {0: [1], 1: [1]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A <code>pandas</code> solution:</p>
<h3>Setup:</h3>
<pre><code>import pandas as pd

a = [0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 3, 4, 4, 4]

b = pd.np.random.randint(0, 100, len(a)).tolist()

&gt;&gt;&gt; b
Out[]: [28, 68, 71, 25, 25, 79, 30, 50, 17, 1, 35, 23, 52, 87, 21]


df = pd.DataFrame(columns=['Group', 'Value'], data=list(zip(a, b)))  # Create a dataframe

&gt;&gt;&gt; df
Out[]:
    Group  Value
0       0     28
1       0     68
2       0     71
3       1     25
4       1     25
5       1     79
6       1     30
7       1     50
8       2     17
9       2      1
10      2     35
11      3     23
12      4     52
13      4     87
14      4     21
</code></pre>
<h3>Solution:</h3>
<pre><code>&gt;&gt;&gt; df.groupby('Group').Value.apply(list).to_dict()
Out[]:
{0: [28, 68, 71],
 1: [25, 25, 79, 30, 50],
 2: [17, 1, 35],
 3: [23],
 4: [52, 87, 21]}
</code></pre>
<h3>Walkthrough:</h3>
<ol>
<li>create a <code>pd.DataFrame</code> from the input lists, <code>a</code> is called <code>Group</code> and <code>b</code> called <code>Value</code></li>
<li><code>df.groupby('Group')</code> creates groups based on <code>a</code></li>
<li><code>.Value.apply(list)</code> gets the values for each group and cast it to <code>list</code></li>
<li><code>.to_dict()</code> converts the resulting <code>DataFrame</code> to <code>dict</code></li>
</ol>
<h3>Timing:</h3>
<p>To get an idea of timings for a test set of 1,000,000 values in 100,000 groups:</p>
<pre><code>a = sorted(np.random.randint(0, 100000, 1000000).tolist())
b = pd.np.random.randint(0, 100, len(a)).tolist()
df = pd.DataFrame(columns=['Group', 'Value'], data=list(zip(a, b)))

&gt;&gt;&gt; df.shape
Out[]: (1000000, 2)

%timeit df.groupby('Group').Value.apply(list).to_dict()
4.13 s ± 9.29 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre>
<p>But to be honest it is likely less efficient than <code>itertools.groupby</code> suggested by @RomanPerekhrest, or <code>defaultdict</code> suggested by @Ajax1234.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe I miss the point, but at least I will try to help. If you have to lists and want to put them in the dict do the following</p>
<pre><code>a = [1, 2, 3, 4]
b = [5, 6, 7, 8]
lists = [a, b] # or directly -&gt; lists = [ [1, 2, 3, 4], [5, 6, 7, 8] ]
new_dict = {}
for idx, sublist in enumerate([a, b]): # or enumerate(lists)
    new_dict[idx] = sublist
</code></pre>
<p>hope it helps</p>
</div>
<div class="post-text" itemprop="text">
<p>Or do dictionary comprehension beforehand, then since all keys are there with values of empty lists, iterate trough the <code>zip</code> of the two lists, then add the second list's value to the dictionary's key naming first list's value, no need for try-except clause (or if statements), to see if the key exists or not, because of the beforehand dictionary comprehension:</p>
<pre><code>d={k:[] for k in l}
for x,y in zip(l,l2):
   d[x].append(y)
</code></pre>
<p>Now:</p>
<pre><code>print(d)
</code></pre>
<p>Is:</p>
<pre><code>{0: [24, 53, 88], 1: [32, 45, 24, 88, 53], 9999: [1]}
</code></pre>
</div>
<span class="comment-copy">How is that a nested for loop?</span>
<span class="comment-copy">DYM <code>if list_a[i] in d.keys</code> and <code>d[list_a[i]] = [list_b[i]]</code>?  Please post <i>exactly</i> the code you've tried, preferably using copy+paste (if available on your platform).</span>
<span class="comment-copy">If one of the provided answers worked for you, please mark it as accepted. It makes it easier for people coming across your question in the future to know what worked.</span>
<span class="comment-copy">@TobySpeight <code>if</code> means if <code>list_a[i]</code> is already a key in the dictionary, then add <code>list_b[i]</code> into the dictionary under key <code>list_a[i]</code>, whereas <code>else</code> means that if not, add <code>list_b[i] to the new key </code>list_a[i]` as list. Hope it helps.</span>
<span class="comment-copy">@BigD, I thought that's what you meant to write (as I suggested).  <code>list_[a] in d.keys</code> just doesn't make sense, and neither does <code>d[list_a] =</code>.  I suggest you <a href="https://stackoverflow.com/posts/47045220/edit">edit</a> to fix those errors.</span>
<span class="comment-copy">Really, using a <code>defaultdict</code> is overkill here. See <a href="https://stackoverflow.com/a/47055899/4909087">this answer</a> where <code>dict.setdefault</code> can handle the same thing with minimal overhead.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ <code>d[a].append(b)</code> is much cleaner than <code>d.setdefault(x, []).append(y)</code></span>
<span class="comment-copy">At the cost of an extra import and a heavier structure ;-)</span>
<span class="comment-copy">Sure, I’ve figured out what your code does, but written in that style, it’s not very obvious. For the person new to Python, I think they may find your code hard to understand and then disregard (or not bother to regard) your solution because of it. Just a suggestion, up to you</span>
<span class="comment-copy">Might I suggest not writing <code>result</code> in one line? Maybe pull out the result of <code>groupby</code> as a separate variable? That line is way too long...</span>
<span class="comment-copy">This seems worse than the other answer because you need to sort, whereas the other answer does not sort, so yours is doing extra work.</span>
<span class="comment-copy">@Daenyth, your information is not new at all. The solution was marked as "alternative" way at the very begining.</span>
<span class="comment-copy">If <code>list_a</code> is already ordered, you can remove the <code>n log n</code> sort, also the  lambda adds unnecessary overhead, itemgetter is always a better option. <code>{k: [i for _, i in g] for k, g in groupby(zip(a, b), key=itemgetter(0))}</code></span>
<span class="comment-copy">This one is to get rid of default_dict right?</span>
<span class="comment-copy">lists are mutable, you pass one object/list to fromkeys so you share a reference to the single list/object, it would be the same as <code>a = []</code> then <code>d = {1: a, 2: a, 3: a}</code>.  <code>my_dict = dict.fromkeys(set(list_a), tuple());my_dict[0] += (1,) </code> would show <code>{0: (1,), 1: (), 9999: ()}</code> but add the overhead of creating a new object/tuple with each <code>+=</code>.</span>
<span class="comment-copy">This isn't even close to what OP wants.  <code>a</code> contains the keys for the values in <code>b</code> (with some keys being duplicates), and index isn't used at all.  Yours just creates <code>{ 0: a, 1: b }</code>, using the index in <code>lists</code>.</span>
