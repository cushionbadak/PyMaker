<div class="post-text" itemprop="text">
<p>Consider a file that contains binary data represented as bytes:</p>
<pre><code>with open('foo', 'rb') as f:
    bs = f.read()
    print(bs)
    # b'\x00\x01\x00\x01\x00\x01'...
</code></pre>
<p>The bytes can only have either <code>0</code> or <code>1</code> values.</p>
<p>What is the most performant way to take a group of 32 bit/bytes and parse them into a (32-bit) integer? The <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer"><code>struct</code></a> module is probably what I need but I couldn't find an immediate way to do this.</p>
<p>Alternative methods that involve casting bytes into chars and then parsing the integer from a bitstring e.g. <code>int('01010101...', 2)</code> don't perform as fast as I need them to for my use case.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Workaround Solutions</h2>
<p>Considering the test number <code>101010...</code>:</p>
<pre><code>b = b'\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00'
print(0b10101010101010101010101010101010)
# 2863311530
</code></pre>
<p>Map bytes to string, then parse the int:</p>
<pre><code>s = ''.join(map(lambda x: chr(x+48), b))
i = int(s, 2)
print(i)
# 2863311530
</code></pre>
<p>Iterate over the bytes and build the integer using bitshifts:</p>
<pre><code>idx = 0
tmp = 0
for bit in b:
    tmp &lt;&lt;= 1
    tmp |= bit
    idx += 1
    if idx == 32:
        print(tmp)
        idx = 0
        tmp = 0
# 2863311530
</code></pre>
</div>
<span class="comment-copy">So you want to read 32 bits and interpret that as an int? Does the file only contain 32 bits or is it many 32-bit numbers?</span>
<span class="comment-copy">The file contains many numbers if it matters for the solution</span>
<span class="comment-copy">@YuvalAdam, did you try struct</span>
<span class="comment-copy">You said the <code>int(..., 2)</code> doesn't perform fast enough, but it's likely the <code>map</code> + <code>lambda</code> combination that's taking up the most time. Try <code>s = ''.join([chr(x+48) for x in b])</code>, that should give you a significant speedup.</span>
