<div class="post-text" itemprop="text">
<p>I would like to collect info with the help of <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">logging</a>. </p>
<p>The idea is simple. I have hash_value of some data, which I want to write to log. So, I set up my logging this way:</p>
<pre><code>import logging
logger.setLevel(logging.DEBUG)
logging.basicConfig(format='%(asctime)s :%(message)s', level=logging.INFO)
</code></pre>
<p>As you can see, now timing and some message will automatically write to log file, for example I can use it like this:</p>
<pre><code>logger.info('Initial data: {}'.format(data))
</code></pre>
<p>But what if I want to write hash_value of my data automatically? Like it is happening with time now. 
I looked through documentation and find nothing useful. There is no attribute for variable in module logging. </p>
<p>So I am forced to do it awry. Like this:</p>
<pre><code>hash_value = hash(data)
logger.info('Initial data: {} {}'.format(hash_value, data))
</code></pre>
<p>I would expect from this code:</p>
<pre><code>logging.basicConfig(format='%(asctime)s: %(variable)s :%(message)s', level=logging.INFO)
</code></pre>
<p>and </p>
<pre><code>logger.info('Initial data: {}'.format(hash_value, data))
</code></pre>
<p>to do the job. But it does not work (and it should not basically) and I did not find the solution in documentation. 
So, how to avoid this awry code:</p>
<pre><code>logger.info('Initial data: {} {}'.format(hash_value, data))
</code></pre>
<p>which I am having now?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import logging
import sys
MY_PARAMS = ("variable1", "var2", )

class ExtraFilter(logging.Filter):

    def filter(self, record):
        # this one used for second, simplier handler
        # to avoid duplicate of logging entries if "extra" keyword was passed.
        # Check all of your custom params: 
        # if all of them are present - record should be filtered
        # * all because if any of them is missing - there would be silent exception and record wont be logged at all
        # bellow is just an example how to check.
        # You can use something like this:
        # if all(hasattr(record, param) for param in MY_PARAMS): return False

        if hasattr(record, "variable1"):
            return False
        return True

# init logging
log = logging.getLogger()

# init handlers and formatters
h1 = logging.StreamHandler(sys.stdout)
f1 = logging.Formatter('%(asctime)s: %(variable1)s:  %(var2)s: %(message)s')
h2 = logging.StreamHandler(sys.stdout)
f2 = logging.Formatter('%(asctime)s: %(message)s')

h1.setFormatter(f1)
h2.setFormatter(f2)
h2.addFilter(ExtraFilter())

log.addHandler(h1)
log.addHandler(h2)

# example of data:
extra = {"variable1": "test1", "var2": "test2"}
log.setLevel(logging.DEBUG)
log.debug("debug message", extra=extra)
log.info("info message")
</code></pre>
<p>The above code will produce following output:</p>
<pre><code>2017-11-04 09:16:36,787: test1:  test2: debug message
2017-11-04 09:16:36,787: info message
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is not awry code, you want to add two informations, therefore you must either pass two parameters to format or concatenate the string more "manually"
You could go with</p>
<pre><code>Logging.info("initial data " + hash_value + " " + data)
</code></pre>
<p>Or you could change the "data" object so its "<strong>str</strong>" or the <strong>repr</strong> method adds the hash by itself (preferably the <strong>repr</strong> in this case)</p>
<pre><code>Class Data():
    ....
    def __repr__(self):
        Return self.hash() + " " self.data
</code></pre>
<p>Which in this case will print the hash and the string version of the parameter data( or simply whatever you want to show as string) passing only one parameter in the string format.</p>
<p>Anyway, you could make the formating string prettier with....</p>
<pre><code>Logging.info("Initial data {hash} {data}".format(hash=hash_value, data=data))
</code></pre>
<p>By the way, in C++ and Java you would also need to declare two "entries" for those two atributes. In java would be something like this:</p>
<pre><code>LOGGING.info("Initial data {} {}", hash, data);
</code></pre>
</div>
<span class="comment-copy">why don't you use "extra" keyword ? You could define two handlers with diffrent formats: first for handling with "extra" passed and second without it.</span>
<span class="comment-copy">Can you provide the code?</span>
<span class="comment-copy">sure, i've already posted the answer</span>
<span class="comment-copy">by the way, check <a href="https://docs.python.org/3/howto/logging-cookbook.html" rel="nofollow noreferrer">this</a> too</span>
<span class="comment-copy">Data in my case is not a class)) Did I understand your point correctly: you think it is okay to use my initial variant ?</span>
<span class="comment-copy">Ok? It is completelly commonplace, log is meant to be informative and usefull, not pretty. In production I do have the following logs (java).      LOGGER.info("{} files related to {} - {} were found in cache for user {}, converted to {} objs in {} ms", fileList.size(), property.getId(), property.getName(), user.getLogin(), retList.size(), stopwatch.elapsed(TimeUnit.MILLISECONDS));</span>
