<div class="post-text" itemprop="text">
<p>I have a function that should return the number of words that contain each vowel (all lowercase), but I keep getting a <strong>key error</strong>. I'd appreciate any help in figuring it out. Thank you.</p>
<pre><code>def vowelUseDict(t):
    '''computes and returns a dictionary with the number of words in t containing each vowel
    '''
    vowelsUsed = {}
    strList = t.split()
    newList = []
    vowels ='aeiou'
    for v in vowels:
        for strs in strList:
            if v in strs and strs not in newList:
                newList.append(strs)
                vowelsUsed[v] = 1
            if v in strs and strs in newList:
                vowelsUsed[v] += 1
    return vowelsUsed
text = 'like a vision she dances across the porch as the radio plays'
print(vowelUseDict(text))
#{'e': 5, 'u': 0, 'o': 4, 'a': 6, 'i': 3}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import Counter
def vowelUseDict(t):
    vowels = 'aeiou'
    cnt = sum(map(Counter, t.split()), Counter())
    return {k: cnt[k] if k in cnt else 0 for k in vowels}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's because <code>newList</code> keeps the words from the previous vowels. Once you reach "like" for "i", it already exists since it was added for "e". This means that it tries to add to the value for key "i" in <code>vowelsUsed</code>, which doesn't exist (it would get added the first time a word is found <em>that hasn't been added for another vowel</em>).</p>
<p>Since (judging by the last line) you want every vowel to be in the resulting dict, you can just create the dict with all the vowels as keys and the values as zero, and you don't even have to check if a key exists. Just increase the value by one if the word contains the vowel.</p>
<p>The resulting code would be something like this:</p>
<pre><code>def vowelUseDict(t):
    '''computes and returns a dictionary with the number of words in t containing each vowel
    '''
    strList = t.split()
    vowels ='aeiou'
    vowelsUsed = {v: 0 for v in vowels}
    for v in vowels:
        for strs in strList:
            if v in strs:
                vowelsUsed[v] += 1
    return vowelsUsed
text = 'like a vision she dances across the porch as the radio plays'
print(vowelUseDict(text))
#{'e': 5, 'u': 0, 'o': 4, 'a': 6, 'i': 3}
</code></pre>
<p><em>Roy Orbison singing for the lonely; hey, that's me and I want you only</em></p>
</div>
<span class="comment-copy">i would use a defaultdict or a Counter from collections. That would simplify this mess...</span>
<span class="comment-copy">Do you uinderstand what a KeyError is?  <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">Catch the error</a> and inspect/print the data in the except suite. It should give you an idea of what is happening - work <i>backwards</i> from there.</span>
<span class="comment-copy"><code>vowelsUsed[v] += 1</code> is probably the statement that is producing the error; <code>v</code> must not be a key.  That means you have a fallacy in the conditional <code>if v in strs and strs in newList:</code></span>
<span class="comment-copy">@wwii yes, hence the collections.Counter object that saves this broken logic</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre ... unless the intent is to learn how to translate <i>logic</i> into code.</span>
