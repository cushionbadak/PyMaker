<div class="post-text" itemprop="text">
<p><strong>TL;DR</strong><br/>
Would like to run Jupyter notebooks with different python setups. Python packages always install globally. Don't understand why.<strong>\TL;DR</strong></p>
<p>I would like to run Jupyter notebooks with different python setups using <code>venv</code>. See here for the <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">official documentation</a>.</p>
<p>Python 3.6 is already installed on my system</p>
<pre><code>$ python --version
Python 3.6.1 :: Continuum Analytics, Inc.
</code></pre>
<p>Using the following commands I have created two virtual environments:</p>
<pre><code>$ python3 -m venv --without-pip Documents/venv/test01
$ python3 -m venv --without-pip Documents/venv/test02
</code></pre>
<p>Following this <a href="http://ipython.readthedocs.io/en/stable/install/kernel_install.html" rel="nofollow noreferrer">guide</a> I tried setting up different kernels for each notebook with</p>
<pre><code>$ source activate test01
(Documents/venv/test02) $ python -m ipykernel install --user --name test01 --display-name test01
</code></pre>
<p>However, the second command failed with</p>
<pre><code>/Users/dominik/Documents/venv/test02/bin/python: No module named ipykernel
</code></pre>
<p>So, I deactivated my venv and ran the same command outside the venv which succeeded</p>
<pre><code>$ source deactivate test01
$ python -m ipykernel install --user --name test01 --display-name test01
$ python -m ipykernel install --user --name test02 --display-name test02
</code></pre>
<p>Inside my Jupyter notebook I can see the different kernels now:
<a href="https://i.stack.imgur.com/5MdFQ.png" rel="nofollow noreferrer">new kernels available</a></p>
<p>Now I'm creating a new notebook using test01 kernel. Inside the notebook, I try to add a module which is not available in Python by default:</p>
<pre><code>$ import mord
---------------------------------------------------------------------------
ModuleNotFoundError                       Traceback (most recent call last)
&lt;ipython-input-2-a00d777a7e47&gt; in &lt;module&gt;()
----&gt; 1 import mord

ModuleNotFoundError: No module named 'mord'
</code></pre>
<p>This is as expected. I then go about to installing that package into my test01 environment using pip</p>
<pre><code>$ source activate Documents/venv/test01
(Documents/venv/test01) $ pip install mord
</code></pre>
<p>After restarting my test01 kernel the import error disappears - as expected. However - and now this is my question - when I <code>import mord</code> package on a <code>test02</code> notebook, <strong>there is no import error either. Why is that?</strong></p>
<p>I would expect that <code>mord</code> package was only installed for <code>test01</code>. However, it seems to be installed globally.</p>
<p>Looking at the venv folders it shows that nothing was added specifically to those projects
<a href="https://i.stack.imgur.com/KiTaA.png" rel="nofollow noreferrer">venv folders</a></p>
<p>The <code>pyvenv.cfg</code> file seems also unchanged.</p>
<pre><code>home = /Users/dominik/anaconda/bin
include-system-site-packages = false
version = 3.6.1
</code></pre>
<p><strong>Can anyone give me some pointers what I am doing wrong?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>because you created virtualenv with <code>--without-pip</code> flag, there is no <code>pip</code> executable in the virtual environment, you used system <code>pip</code> to install package.</p>
<p>basically, virtual environment not involved in your setup, even though there are two kernel specs, they all created with virtualenv deactivated.</p>
<p>setup steps recommend: create virtualenv without <code>--without-pip</code> option; install <code>ipykernel</code> for each of your virtual environments, which means, install while virtualenv is activated; create kernel spec from corresponding virtualenv.</p>
</div>
<div class="post-text" itemprop="text">
<p>After georgexsh had pointed me in the right direction regarding the <code>--without-pip</code> flag, this is how I solved it in my case:</p>
<p>Create two virtual environments</p>
<pre><code>$ python -m venv --without-pip Documents/venv/test01
$ python -m venv --without-pip Documents/venv/test02
</code></pre>
<p>I am still using the <code>--without-pip</code> flag, because the command otherwise produces an error message</p>
<p>The following steps are executed for each of the environments <code>test01</code>, <code>test02</code>:</p>
<p>Activate virtual environment and install pip manually</p>
<pre><code>$ source Documents/venv/test01/bin/activate
(test01) $ curl https://bootstrap.pypa.io/get-pip.py | python
</code></pre>
<p>Install and run Jupyter inside the virtual environment</p>
<pre><code>(test01) $ pip install jupyter
(test01) $ jupyter notebook
</code></pre>
<p>After having completed the above steps for both environments, I tested installing a package only in one of the environments</p>
<p>Activate the environment you want to install to first (if not activated already)</p>
<pre><code>$ source Documents/venv/test01/bin/activate
(test01) $ pip install numpy
</code></pre>
<p><code>numpy</code> package is now only available to the Jupyter version installed in <code>test01</code> environment.</p>
<p>If found that installing a dedicated kernel per each environment was optional (for my purpose). Anyway, here are the steps to run in an activated environment:</p>
<pre><code>(test01) $ pip install ipykernel
(test01) $ python -m ipykernel install --user --name test01 --display-name test01
</code></pre>
<p>Now within Jupyter you can also create notebooks with different kernel types.</p>
</div>
<span class="comment-copy">okay, hope it helps</span>
<span class="comment-copy">Your hint about not installed pip was very helpful. I used <code>--without-pip</code> because I got an error without that parameter (zero exit status 1)  I have now installed pip manually using     <code>curl https://bootstrap.pypa.io/get-pip.py | python</code>  Still figuring out how Jupyter fits into this. E.g. when I start Jupyter I can see all different kernels (test01, test02 and the default python3 kernel). So that is still confusing me. And also I haven't fully understood yet, when which combination finds which packages and not.</span>
<span class="comment-copy">you could check python executable file path int the <a href="https://jupyter-client.readthedocs.io/en/latest/kernels.html#kernelspecs" rel="nofollow noreferrer"><code>kernel.json</code> file in kernelspecs</a>, to see which virtualenv it uses.</span>
<span class="comment-copy">haha glad to see it helps you out.</span>
