<div class="post-text" itemprop="text">
<p>Im new to python and programming. I have been given a task to complete that asks the following question:</p>
<p>Create your own function that takes in a sentence and replaces every second word with the word “Hello”</p>
<p>my approach was to separate the sentence into odd and even lists of words and then print the odd list with the word hello following it.</p>
<p>I attempted this and all I can manage to do is to separate every second character and not every second word.</p>
<p>any thoughts or suggestions on my code.</p>
<pre><code>def replace(sentence):

    l = list(sentence)

    list_even = list()

    list_odd = list()

    index = 0

    for word in l:
        if index % 2 != 0:
            list_even.append(word)
        else:
            list_odd.append(word)
        index += 1

    string_odd = "hello".join(list_odd)

    print(string_odd)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although Jan's answer is beautiful and succinct and is what <strong>should</strong> be used, here is an example using the same approach you attempted.</p>
<pre><code>def replace(sentence):

    l = sentence.split(' ')

    list_odd = l[0::2]
    print(list_odd)
    final_list = []

    for word in list_odd:
        final_list.append(word)
        final_list.append('hello')

    final_string = " ".join(final_list)

    print(final_string)
replace("I want to replace every other word in this string with hello")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a list comprehension:</p>
<pre><code>string = "Create your own function that takes in a sentence and replaces every second word with the word “Hello”"

hello = " ".join(["{} hello".format(word) 
        for idx, word in enumerate(string.split()) 
        if idx % 2 == 0])
print(hello)
# Create hello own hello that hello in hello sentence hello replaces hello second hello with hello word hello
</code></pre>
<p>The key point here is to use the <code>enumerate()</code> function and the modulo operator (<code>%</code>).
<hr/>
As @darksky points out in the comment section, this might be hard to grasp when trying to learn <code>Python</code>. Instead you could very well use a longer function like</p>
<pre><code>lst = []
for idx, word in enumerate(string.split()):
    if idx % 2 == 0:
        lst.append(word)
        lst.append("hello")

words = " ".join(lst)
print(words)
</code></pre>
<p>Which prints out exactly the same.</p>
</div>
<div class="post-text" itemprop="text">
<p>You might find this easier to understand. You can simply create a new sentence object and populate it with words.</p>
<pre><code>sentence = "Im new to python and programming."
new_sentence = ""

index = 0

for word in sentence.split():

    if index % 2 == 1:
        new_sentence += "hello "
    else:
        new_sentence += word + " "

    index += 1

# remove the last space at the end
sentence = sentence[:-1]

print(new_sentence)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def sentenceReplace(sentence):
    sentence_list = sentence.split()
    for counter, word in enumerate(sentence_list):
        if counter % 2 == 0:
            sentence_list[counter] = "Hello"
    new_sentence = " ".join(sentence_list)   
    print(new_sentence)

sentenceReplace(input("Say Something here!"))
</code></pre>
<p>Take in the sentence. Use the split method to create a list. Then loop over the list with using enumerate which creates a counter. </p>
<p>If the remainder of the counter (generated from enumerate) is 0 then replace the word at that index.</p>
<p>You'll need to join the list again after the function and print it out </p>
</div>
<div class="post-text" itemprop="text">
<p>Two simple changes will save your given code.  First, you want to step through the <em>words</em> of the input sentence, rather than the individual elements (characters).  Drop the line <code>l = list(sentence)</code>, because this divides your input into characters.  Instead, <code>split</code> the list at spaces (the default).</p>
<pre><code>   for word in sentence.split():
</code></pre>
<p>This will give you output like:</p>
<pre><code>Thishellogivehellooutput
</code></pre>
<p>Now, just add spaces to your <code>join</code> command:</p>
<pre><code>    string_odd = " hello ".join(list_odd)
</code></pre>
<p>To get:</p>
<pre><code>This hello give hello output
</code></pre>
<hr/>
<p>Now, you still have one problem: you're missing a final "hello" for sentences with an even number of words.  I'll let you deal with that, since you already know how to use the modulus command.  You might want to recover your original input saving with</p>
<pre><code>l = sentence.split()
for word in l:
</code></pre>
<p>Also note that you can drop <code>list_even</code> entirely; you're wasting effort, since you never use it.  You can ignore those words.</p>
</div>
<span class="comment-copy">@prune edit was good - no need to add the homework stuff - it's irrelevant to the question</span>
<span class="comment-copy">Try <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split()</code></a> to split the sentence into words.  When your program(s) go awry, sometimes it is helpful to print stuff to make sure it is doing what you think.</span>
<span class="comment-copy">Using stuff like <code>format</code> and <code>enumerate</code> might save some lines of code, but it's just ugly and won't help someone who's unfamiliar with the language to immediately understand the underlying mechanics of code. I suggest using a simpler for loop and a basic index counter.</span>
<span class="comment-copy">@darksky: Go ahead then :)</span>
<span class="comment-copy">@darksky: Updated.</span>
<span class="comment-copy">Thanks. That is slightly more beginner friendly.</span>
