<div class="post-text" itemprop="text">
<p>I am trying to dig deeper and climbing higher in learning Python.</p>
<p>In attempting to learn everything about the <code>collections</code> module, I am having problems exploring every corner of it.
In the online documentation and in <code>help(collections)</code>, it introduces 9 specialized container datatypes, see
<a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer">8.3. collections â€” Container datatypes</a>:</p>
<pre><code>['Counter', 'OrderedDict', 'defaultdict', 'deque',
 'namedtuple', 'ChainMap', 'UserDict', 'UserList', 'UserString']
</code></pre>
<p>Compared to that list, there are 26 others not specified in the documentation and with only very limited detail in the <code>help()</code> output:</p>
<pre><code>x = [ i for i in dir(collections) if not i.startswith('_')]
&gt;&gt;&gt; list(enumerate(x, start=1))
[(1, 'AsyncGenerator'), (2, 'AsyncIterable'), (3, 'AsyncIterator'), (4, 'Awaitable'), (5, 'ByteString'), (6, 'Callable'), 
 (7, 'ChainMap'), (8, 'Collection'), (9, 'Container'), (10, 'Coroutine'), (11, 'Counter'), (12, 'Generator'), (13, 'Hashable'), (14, 'ItemsView'), (15, 'Iterable'), (16, 'Iterator'), 
 (17, 'KeysView'), (18, 'Mapping'), (19, 'MappingView'), (20, 'MutableMapping'), (21, 'MutableSequence'), (22, 'MutableSet'),
 (23, 'OrderedDict'), (24, 'Reversible'), (25, 'Sequence'), (26, 'Set'), (27, 'Sized'), (28, 'UserDict'), 
 (29, 'UserList'), (30, 'UserString'), (31, 'ValuesView'), 
 (32, 'abc'), (33, 'defaultdict'), (34, 'deque'), (35, 'namedtuple')]
</code></pre>
<p>Is it necessary to invest time to explore the other 26?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking at the <code>__all__</code> exported list of globals of the module. This list is larger than just the documented objects for two reasons. The first is that it includes submodules; in this case <a href="https://docs.python.org/3/library/collections.abc.html" rel="noreferrer"><code>collections.abc</code></a> is listed here as <code>abc</code>.</p>
<p>The second is that there are objects added for backwards compatibility; the extra names come from the <code>collections.abc</code> submodule. Once upon a time that module didn't exist and those objects lived in <code>collections</code> itself before being moved. Names from that module are imported into <code>collections</code> to accommodate code that still imports from the old location. </p>
<p>This is <a href="https://docs.python.org/3/library/collections.html" rel="noreferrer">documented on the page you linked</a>:</p>
<blockquote>
<p><em>Changed in version 3.3</em>: Moved Collections Abstract Base Classes to the <code>collections.abc</code> module. For backwards compatibility, they continue to be visible in this module as well.</p>
</blockquote>
<p>So of those 26, one is a submodule of <code>collections</code>,
 <code>collections.abc</code>, and the remaining 25 objects are explicitly there to support backwards compatibility of names moved to the <code>collections.abc</code> module.</p>
<p>If you want to learn about the other objects, then you'll find they are documented in their own location. Use <code>help(collections.abc)</code> or the <a href="https://docs.python.org/3/library/collections.abc.html" rel="noreferrer"><code>collections.abc</code> module documentation</a>.</p>
</div>
<span class="comment-copy">Those are just objects in the <code>collections</code> namespace. Just as if you wrote a module, and did something like <code>import xyz</code>, then if you looked at <code>dir(my_module)</code> it would have <code>xyz</code> in it...</span>
<span class="comment-copy">Hope I can contribute such a high-quality answer to community in no time.</span>
