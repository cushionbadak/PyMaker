<div class="post-text" itemprop="text">
<pre><code>new_list = [1, "hello"]
is_str = (type(str) is True)
for element in new_list:
    if (element is is_str):
        element = element.upper()
</code></pre>
<p>I am trying to create a loop that runs through each element in a list, then returns the element in uppercase if a string is found. However, for some reason, my if statement does not seem to be working in my favour. Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try This ( Normal way ):</p>
<pre><code>new_list = [1, "hello"]

for element in new_list:

    if isinstance(element, str):
        element = element.upper()
        print(element)
</code></pre>
<p><strong>Pythonic Way :</strong></p>
<pre><code>new_list = [1, "hello", "ssss"]
your_data = [element.upper() for element in new_list if isinstance(element, str)]
print(your_data)
</code></pre>
<p>Another Way:</p>
<pre><code>new_list = [1, "hello", None]

for element in new_list:

    if type(element) is str:
        element = element.upper()
        print(element)
</code></pre>
<p>About Your Comment :</p>
<pre><code>new_list = [1, "hello", None, "hi", "book"]

for counter, element in enumerate(new_list):

    if isinstance(element, str):
        new_list[counter] = element.upper()

print(new_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The more <a href="https://en.wikipedia.org/wiki/Duck_typing" rel="nofollow noreferrer">Pythonic</a> way to do this would be not checking if the element is a string at all:</p>
<pre><code>for element in new_list:
    try:
        uppercase_element = element.upper()
    except AttributeError:
        pass  # Skip this element as it can't be uppercased
    else:
        print uppercase_element
</code></pre>
<p>One concrete reason this works better than checking if the element is a string is, in Python 2, Unicode objects are not strings but they can be uppercased (and probably should be in the example you provided).</p>
</div>
<div class="post-text" itemprop="text">
<p>Single liner using <code>List Comprehension</code> :</p>
<pre><code>&gt;&gt;&gt; [x.upper() for x in l if isinstance(x, str)]
</code></pre>
<p>#driver values :</p>
<pre><code>IN : l = [1, 'adsa', 3, 'ASD']
OUT : ['ADSA', 'ASD']
</code></pre>
<hr/>
<p>The problem you are facing is due to your usage of <code>element</code> to <code>update the list</code>. Use the <code>index</code> instead for the updation.</p>
<pre><code>for i, element in enumerate(new_list):
    if type(element)==str:
        new_list[i] = element.upper()
</code></pre>
</div>
<span class="comment-copy">My guess would be that <code>is_str</code> is <code>False</code>, and no element of <code>new_list</code> is identical to <code>False</code>.</span>
<span class="comment-copy"><code>if isinstance(element, str):</code>.</span>
<span class="comment-copy">What's the output?</span>
<span class="comment-copy">But, if my loop is checking each element in the list, would it not eventually run through "hello" and pass it off as a str?</span>
<span class="comment-copy">@user498021 Your code doesn't check for strings. It checks whether any element is identical to <code>False</code>.</span>
<span class="comment-copy">How would I return the changed list as a list and not just the element?</span>
<span class="comment-copy">So in this case, I want it to be [1, "HELLO"]</span>
<span class="comment-copy">@user498021: Done! :) may you tick me plz.</span>
<span class="comment-copy">Can you do this with the "Another way" method? I do not want to use enumerate and counter</span>
<span class="comment-copy">@user498021: yes! if you do not have same values in your list.</span>
<span class="comment-copy">Is printing in the <code>else</code> better than just doing it in the <code>try</code> (and not having an <code>else</code>)?</span>
<span class="comment-copy">It's better to only do in the <code>try</code> block what will raise the error you're catching.  However, in this example, if you're desperate to save SLOC, you can get away with doing both.</span>
<span class="comment-copy">Hmm, I don't think I ever used <code>try</code>+<code>else</code>, and never considered this issue. But I see the <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">tutorial</a> also says <i>"The use of the else clause is better [...]"</i>. Now I'm wondering: If that second line could cause a different error, would you then have another <code>try</code> nested/indented inside that <code>else</code>? And a third would be further nested/indented?</span>
