<div class="post-text" itemprop="text">
<p>Ok so I've got quite a tricky problem here I just can't seem to implement properly.</p>
<p>I have three strings. Let's call them string1, string2, and string3. These strings are coming out of a speech to text API (all of which I already have sorted out). They are very similar but not exactly the same (eg. there may be translation errors... some words might be slightly off and there may be an extra word in string1 that isn't in string2 or string3).</p>
<p>In order to compare string1, string2, and string3, I'm printing them out into a text file. The problem is, if these strings are fairly large, its quite difficult to compare them side by side.</p>
<p>A much better way to compare them is "line-by-line".</p>
<p>I'm looking for a way to print n words of string1, new line, then print m words of string2, up to a point where string1[n] == string2[m], then do the same for string3. </p>
<p>Then I need to repeat this process for the rest of string1, string2, and string3, such that they are adequately compared "line-by-line".</p>
<p>I've found this to be an incredibly difficult problem. Here's what I've got so far:</p>
<p>I've started off by tokenizing the strings via string1.split(). </p>
<p>Then it makes sense to have a placeholder to keep track of which word we're working with in each string. </p>
<p>I define a batch size of k (lets say 10 words) that represents the length of a line. Then I print k words of string1, setting the placeholder for string2 = string2.index(string1[k]).</p>
<p>But from here on I'm absolutely spooked!</p>
<p>Any hints/suggestions/theories of how to proceed. Are there any libraries that will do this?</p>
<p>Any help would be appreciated!! </p>
</div>
<div class="post-text" itemprop="text">
<p>How about using the batch size with a counter. Here, say 'l1', 'l2' and 'l3' are the line numbers respectively for each string.</p>
<pre><code>string1 = string1.split(" ")
while(len(string1) &gt; l1 + k:
    file.write(string1[l1 : l1 + k])
    l1 = l1 + k
    file.write(string2[l2 + k])
    l2 = l2 + k
    file.write(string3[l3 + k])
    l3 = l3 + k
file.write(string1[l1:])
file.write(string2[l2:])
file.write(string3[l3:])
</code></pre>
<p>I believe this should do it. Please elaborate on your question if this doesn't help.</p>
<p>UPDATE:
Based on your comment might I suggest not using the batch size on l2 and l3, instead look for the last word of string1 in string2 and string3.
Eg, try this inside the loop:</p>
<pre><code>#k1 = 10
file.write(string1[l1 : l1+k1])
l1 = l1 + k1
k2 = string2.find(string1[l1], beg=l2)
# Read note below
if k2 &gt; 15 or k2 &lt; 0:
    k2 = 10
file.write(string2[l2 : l2+k2])
l2 = l2 + k2
#same for string3
</code></pre>
<p>Here, the second string is written till the same word is encountered.</p>
<p>Note: The if condition is checking whether the index goes to a huge number. Say that your parser doesn't recognise that particular word and therefore this program would write till that particular word is read or end up writing the entire string. So I have included a batch limit that if the same word isn't recognised in the next 15 words then the program only writes 10 words. The -1 condition is when the word isn't encountered at all.</p>
<p>This still isn't the perfect logic as there are still cases where it would fail, eg, when the word is repeated in the sentence, so you could ideally use a case that if k2 doesn't lie in 8 - 12 then it is set to 10 otherwise anything between 8-12. This should be cleared when working with examples and based on results and I cannot confirm what it should be without testing. I believe you should be able to achieve that ideal index value range.</p>
</div>
<div class="post-text" itemprop="text">
<p>Okay I have an answer. This proved to be more difficult that I originally thought. So, I made a function called find_closest_index that looks like this:</p>
<pre><code>def find_closest_index(str1, str2, n):
value = str1[n]
print(value)
indices = []
mins = []
for i, x in enumerate(str2):
    if x == value:
        indices.append(i)
for num in indices:
    mins.append(abs(num-n))
try:
    minvalue = min(mins)
    index = mins.index(minvalue)
    if(indices[index] - n) &lt; 10:
        return indices[index]
    else:
        return 0
except:
    return 0
</code></pre>
<p>Then I used this to write the lines up to the point of similarity between strings:</p>
<pre><code>k = batch_size
s1 = 0
f1 = k
s2 = 0
f2 = k
s3 = 0
f3 = k


outfile = open('compare.txt','w')

while(s1 + k &lt; len(tok_string1)):
    for word in tok_string1[s1:f1]:
        outfile.write("%s " %word)
    outfile.write("\n")
    f2 = find_closest_index(tok_string1, tok_string2, f1)
    for word in tok_string2[s2:f2]:
        outfile.write("%s " %word)
    outfile.write("\n")
    s2 = f2
    f3 = find_closest_index(tok_string1, tok_string2, f1)
    for word in tok_string3[s3:f3]:
        outfile.write("%s " %word)
    outfile.write("\n\n")
    s3 = f3
    s1 = s1 + k
    f1 = f1 + k
</code></pre>
<p>Finally I outputted the rest of the string that remained</p>
<pre><code>for word in tok_string1[s1:-1]:
    outfile.write("%s " %word)
outfile.write("\n")
for word in tok_string2[s2:-1]:
    outfile.write("%s " %word)
outfile.write("\n")
for word in tok_string3[s3:-1]:
    outfile.write("%s " %word)
</code></pre>
<p>Its not perfect. But it does the job. Thanks for your help!</p>
</div>
<span class="comment-copy">Have you looked at difflib ? <a href="https://docs.python.org/3/library/difflib.html" rel="nofollow noreferrer">docs.python.org/3/library/difflib.html</a></span>
<span class="comment-copy">Ahhhh this library is awesome! Thank you!</span>
<span class="comment-copy">It might be helpful to research the unix <code>diff</code> utility as well. This standard library module is a python implementation of a utility that has been used for this purpose since for many decades. You can diff libraries for pretty much any programming language. <a href="https://en.wikipedia.org/wiki/Diff_utility" rel="nofollow noreferrer">en.wikipedia.org/wiki/Diff_utility</a></span>
<span class="comment-copy">This is probably the best I'm going to get. Specifically, and I may have not made this clear in the original question, I'm trying to find a way to make the point at which each string lines up, (eg. l1, l2, l3) modular such that they fall on the same word in each string. I might be able to add an index search into this that effects l1, l2, and l3. Thanks for the response!</span>
<span class="comment-copy">RE Update: Yes this is what I've been going for. I'm going to try to run the search like you have in your example, then do a quick difference calculation on the index of all of the search results and use the smallest one. There's still the problem condition where the last word printed in string1 doesn't exist in string2. Progress tho!</span>
<span class="comment-copy">yes, that's why I included the condition where search returns -1, and therefore 10 words are written to file. Keep testing and analysing, I'm sure you would have a solution. Could you please upvote and accept my answer if I helped. Thanks!</span>
<span class="comment-copy">Once I hit rep requirement I most certainly will xD</span>
