<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4806911/string-comparison-technique-used-by-python">String comparison technique used by Python</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>when python compare operator in string.
How does it work?</p>
<p>"1.0.3" &gt; "1.0.0"
return true</p>
<p>"1.0.3" &gt; "1.0.6"
return false</p>
<p>I heard it is using ascii code.</p>
<p>Anyone please detail explain this Issue.</p>
<p>thank U.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python uses lexicographic ordering, meaning that the first character's of each string are compared and if they differ then a result is concluded.  If they are the same value, then it will compare the second character and so on until the end of the string.</p>
<p>In Python 3 the the Unicode code point number is used to compare characters.  In Python2 it uses the ASCII value of the character.</p>
<p>You can see how this works with an example using the <a href="https://docs.python.org/3/library/functions.html#ord" rel="nofollow noreferrer"><code>ord</code></a> and <a href="https://docs.python.org/3/library/functions.html#chr" rel="nofollow noreferrer"><code>chr</code></a> methods which convert integers to characters and vice versa.</p>
<pre><code>a = "1.0.3"
b = "1.0.6"

for i, v in enumerate(a):
    print('a[{}] == "{}" == {}'.format(i, v, ord(v)))
    print('b[{}] == "{}" == {}'.format(i, b[i], ord(b[i])))
    if v == b[i]:
        print('a[{}] is equal to b[{}]'.format(i, i))
    if v &gt; b[i]:
        print('a[{}] is greater than b[{}]'.format(i, i))
    if v &lt; b[i]:
        print('a[{}] is less than b[{}]'.format(i, i))
</code></pre>
<blockquote>
<p>a[0] == "1" == 49<br/>
  b[0] == "1" == 49<br/>
  a[0] is equal to b[0]<br/>
  a[1] == "." == 46<br/>
  b[1] == "." == 46<br/>
  a[1] is equal to b[1]<br/>
  a[2] == "0" == 48<br/>
  b[2] == "0" == 48<br/>
  a[2] is equal to b[2]<br/>
  a[3] == "." == 46<br/>
  b[3] == "." == 46<br/>
  a[3] is equal to b[3]<br/>
  a[4] == "3" == 51<br/>
  b[4] == "6" == 54<br/>
  a[4] is less than b[4]  </p>
</blockquote>
<p>Therefore <code>a &lt; b == True</code></p>
</div>
<div class="post-text" itemprop="text">
<p>When comparing strings this way, you are comparing whether a string comes before or after the other string if they were sorted alphabetically.</p>
<pre><code>"a" &lt; "b"  # True - a is earlier in the alphabet than b
"b" &lt; "a"  # False
</code></pre>
<p>The same thing is happening with your decimals - but it can lead to undesirable results;</p>
<pre><code>11 &lt; 2  # True - 11 is larger than 2.
"11" &lt; "2"  # False
</code></pre>
<p>This is because the first 'letter' of the 'word' is <code>1</code> - which is lower than the first 'letter' of the other 'word' - <code>2</code>.</p>
<p>There are some libraries out there such as <a href="https://pypi.python.org/pypi/natsort" rel="nofollow noreferrer">natsort</a> that seek to address this problem - so you may need to look into that when using numbers like that ones you have above that are multiple points (making them invalid decimal numbers).</p>
</div>
<span class="comment-copy">thanks ARJMP! I understand what you says.</span>
<span class="comment-copy">thanks shadow, I will refer you.</span>
