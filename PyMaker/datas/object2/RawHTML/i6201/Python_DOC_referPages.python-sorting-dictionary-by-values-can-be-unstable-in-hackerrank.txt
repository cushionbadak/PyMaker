<div class="post-text" itemprop="text">
<p>I'm doing some practice in Hackerrank for Python 3 learning.</p>
<p>In the task <a href="https://www.hackerrank.com/challenges/most-commons/problem" rel="nofollow noreferrer">Most Common</a> you are given a string which contains only lowercase English characters and you need to find the top three most common characters in that string.</p>
<p>I met some questions.</p>
<p>My solution for this problem is below:</p>
<pre><code>#!/bin/python3
import sys

if __name__ == "__main__":
  s = input().strip()
  ch_dict = {}
  for ch in s:
      if ch in ch_dict : ch_dict[ch] +=1
      else: ch_dict[ch] = 1

  result = sorted(ch_dict.items(),key=lambda d:d[1],reverse=True)
  for i in result:
      if i[1] != 1:
          print(" ".join(map(str,i)))
</code></pre>
<p>When I test this code in local environment, it works!</p>
<p>But in online test, it <strong>may</strong> fail!</p>
<p>For this input:</p>
<pre><code>aabbbccde
</code></pre>
<p>I submit a lot of times, sometimes get right answer like this:</p>
<pre><code>b 3
a 2
c 2
</code></pre>
<p>and can also get this:</p>
<pre><code>b 3
c 2
a 2
</code></pre>
<p>It seems like the sort can be unstable ?  OR what's matter whit my code ? OR is something wrong in Hackerrank environment ?</p>
<p>How can i guarantee my output?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python dictionaries are <em>unordered</em>. When you iterate over their contents, the order is implementation dependent, see <a href="https://stackoverflow.com/questions/15479928/why-is-the-order-in-dictionaries-and-sets-arbitrary">Why is the order in dictionaries and sets arbitrary?</a></p>
<p>You are sorting your items <em>by the values only</em>, so given that your list the items in arbitrary order, sometimes the <code>('a', 2)</code> pair will come first, sometimes the <code>('c', 2)</code> pair is.</p>
<p>If you want to stabilise the order, break ties between values by sorting on the key as well.</p>
<p>Your challenge states:</p>
<blockquote>
<p>Sort output in descending order of occurrence count.<br/>
  If the occurrence count is the same, sort the characters in ascending order.</p>
</blockquote>
<p>so you need to sort by value first, <em>and then by key</em>, and the direction between these two <em>differs</em>.</p>
<p>You can achieve this by sorting twice, or by sorting on the <em>inverse</em> score:</p>
<pre><code># Sort forward by key, to produce a stable order between keys
by_key = sorted(ch_dict.items(), key=lambda d: d[0])
# Sort backward by value, ties are left in the original order, so by key
result = sorted(by_key, key=lambda d: d[1], reverse=True)
</code></pre>
<p>or in one step:</p>
<pre><code>sorted(ch_dict.items(), key=lambda d: (-d[1], d[0]))
</code></pre>
<p>so sort by the <em>negative</em> count, then the key, and don't reverse.</p>
<p>Note that the challenge actually asks only for the <em>top three</em> characters. The challenge doesn't use huge inputs, but if there were, then using sorting is actually inefficient. You don't need to sort <em>all</em> key-value pairs, only the top 3. How would you go about getting just the top 3? You could use a <a href="https://docs.python.org/3/library/heapq.html" rel="nofollow noreferrer"><em>heap queue</em></a>, which efficiently can give you the top N of any sequence:</p>
<pre><code>import heapq

result = heapq.nsmallest(3, ch_dict.items(), key=lambda d: (-d[1], d[0]))
</code></pre>
<p>Where sorting takes O(NlogN) time (N being the size of the dictionary), a heapq takes O(NlogK) time, N being the same value but K being the count of top items; here it is 3. For a dictionary with 10.000 items, sorting takes about 133k steps to complete, but a heap queue only takes 16k steps. That's going to be almost 10 times faster!</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is here:</p>
<pre><code>key=lambda d:d[1]
</code></pre>
<p>The key only considers the second value, instead, use both values.</p>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries are unordered. You are sorting your output by the value only, but since the order of keys is not guaranteed in the original dict, the ordering within each value in the output can vary.</p>
<p>You can fix this by ordering on both:</p>
<pre><code>sorted(ch_dict.items(), key=lambda d: (d[1], d[0]), reverse=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>dict.items</code> can return the (key, value) pairs in any order, dependend on details like the implementation or key-insertion-order. <code>sorted</code> then iterates over these pairs in whatever order <code>dict.items</code> returned them.</p>
<p>If you want a deterministic output, use <code>key=lambda d: (d[1], d[0])</code> in order to sort the (key, value) pairs by the key lexicographically if the value happens to be the same.</p>
<p>(In case you are using Python 2, <code>key=lambda key, value: (value, key)</code> looks nicer.)</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/questions/1915376/is-pythons-sorted-function-guaranteed-to-be-stable"><code>sorted()</code> is actually stable</a> in that it preserves the order of items with the same key as extracted by the key function you provided â€“ in this case the key being the value. But since <code>dict</code>s are unordered, the preserved order is undefined for items with the same value.</p>
<p>A solution is to sort by <code>(value, key)</code> tuples:</p>
<pre><code>result = sorted(ch_dict.items(), key=lambda d: (-d[1], d[0]))
</code></pre>
<p>Note the removed reversed argument, replaced by negating the value, as it seems that you'd like to sort the keys in ascending order and the values in descending.</p>
</div>
<div class="post-text" itemprop="text">
<p>in the Hackerrank hierarchy, you are in the <a href="https://www.google.fr/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwiujJy5oaLXAhURKVAKHQPmA5AQFggnMAA&amp;url=https%3A%2F%2Fdocs.python.org%2F2%2Flibrary%2Fcollections.html&amp;usg=AOvVaw2mS2EUGTioSwy05lVk67KH" rel="nofollow noreferrer">Collections</a> section. so the solution is probably :</p>
<pre><code>#!/bin/python3
import sys,collections
if __name__ == "__main__":
    s = 'abcdebbca' # input().strip()
    res=collections.Counter(s).items(s)
    sortres= sorted ( res, key=(lambda x : (-x[1],x[0])))
    for k,v in sortres[:3] : print k,v
</code></pre>
<p>the line <code>sortres= sorted ( res, key=(lambda x : (-x[1],x[0])))</code> is necessary like well explained by  @Martijn Pieters.</p>
<p><strong>EDIT</strong></p>
<p>Since problem arise from <code>dict</code>, an other answer which uses only <code>lists</code>, <code>sets</code> and <code>sorted</code> stability :</p>
<pre><code>import sys

if __name__ == "__main__":
    s = raw_input().strip()
    set_k, list_kv = set() , list() 
    for x in sorted(s):
        if x not in set_k:
            if set_k : list_kv.append((-count,val))
            set_k.add(x)
            count , val = 0 , x
        count+=1
    for k,v in sorted(list_kv)[:3] : print v,-k
</code></pre>
</div>
<span class="comment-copy">Dictionaries are <i>unordered</i>, and you are sorting on the values only. So when you get <i>equal values</i>, their order is the same as the input order. Which is implementation defined and can seem arbitrary. See <a href="//stackoverflow.com/a/15479974">Why is the order in dictionaries and sets arbitrary?</a></span>
<span class="comment-copy">The second answer is as right as the first, both ar sorted by value. Stable and unstable are not applicable here because there is not a previous order to keep.</span>
<span class="comment-copy">@Goyo: well, there is, but that order changes each new invocation of the interpreter because of the random hash seed.</span>
<span class="comment-copy">@MartijnPieters I mean the code does not define an order. But you are right, in a particular execution there will be an order and in some cases stability will matter.</span>
<span class="comment-copy">The Hackerrank task description also includes a specification that you might have overlooked: "<i>If the occurrence count is the same, sort the characters in ascending order.</i>"</span>
<span class="comment-copy">This produces the wrong order for the challenge, where ties need to be sorted in ascending order, not descending.</span>
<span class="comment-copy"><code>Counter.most_common()</code> doesn't include the key in the sort, it is prone to the very same issue. Depending on the current random hash seed, either <code>c</code> or <code>a</code> will be listed first (on Python &lt; 3.6), and for different strings the insertion order comes into play too (all Python versions).</span>
<span class="comment-copy">you are right. I will correct.</span>
<span class="comment-copy">That still won't work. What about <code>'aaabbbcccddde'</code>? Now you have <i>four</i> most common characters, but only a, b and c need to be listed. Your code will end up with a random subset.</span>
<span class="comment-copy">Thanks again. It passes the Hackerrank tests now.</span>
<span class="comment-copy">Yes, and now you have the same answer as several others here. :-) The Counter is no longer that large a differentiator (other than the fast counting code).</span>
