<div class="post-text" itemprop="text">
<p>I am kind of stuck in the a middle of a personal project that I am doing. I have a scenario which is just not making any sense to me nor do I know what to "call it" so I am also not finding the right answers from internet. </p>
<p>If you can give a solution for me for the following example I would really appreciate it. </p>
<p>I am trying to do the following:</p>
<p>I have two classes/modules in different file(later maybe also adding inside sub directory as well). </p>
<p><strong>client.py</strong></p>
<pre><code>class client(object):
    def __init__(self, user, key, address):
        self.user = user
        self.key = key
        self.address = address
</code></pre>
<p><strong>foo.py</strong></p>
<pre><code>class foo(client):
    print(client.user, client.key, client.address)
</code></pre>
<p>Now I want to call foo() by initiating client() class first. So my test.py file should look like this and it should print those values I have given when initiating client class.</p>
<p><strong>test.py</strong></p>
<pre><code>import client
f = client("x", "passkeyXX","10.192.0.1")
f.foo() ## should print the values given above
</code></pre>
<p>is this possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can make this within one class, while not creating both:</p>
<pre><code>class Client(object):
    def __init__(self, user, key, address):
        self.user = user
        self.key = key
        self.address = address

    def foo(self):
        print(self.user, self.key, self.address)
</code></pre>
<p>Then you instantiate it in tests:</p>
<pre><code>c = Client(user='user1', key='sdf234sdf13', address='USA, New York')
</code></pre>
<p>and call the needed method <code>foo</code>:</p>
<pre><code>c.foo()
</code></pre>
<p>which should return you:</p>
<blockquote>
<p>user1 sdf234sdf13 USA, New York</p>
</blockquote>
<p><strong>UPDATE:</strong></p>
<p>In <code>client.py</code></p>
<pre><code>from foo import foo as _f

class Client(object):
    def __init__(self, user, key, address):
        self.user = user
        self.key = key
        self.address = address

    def foo(self):
        return _f(self.user, self.key, self.address)
</code></pre>
<p>In foo.py:</p>
<pre><code>def foo(user, key, address):
   print(user, key, address)
</code></pre>
<p>Now you can import your class Client somewhere in tests.</p>
<pre><code>from client import Client
</code></pre>
<p>Make instance:</p>
<pre><code>c = Client(user='user1', key='sdf234sdf13', address='USA, New York')
</code></pre>
<p>call <code>c.foo()</code> and it should print out what you need, but this is so weird though</p>
</div>
<div class="post-text" itemprop="text">
<p>To initialise a child class based on one of its parents, you can call the <code>super</code> method</p>
<p>Method 1: in the <code>__init__</code> method</p>
<pre><code>class foo(client):
    def __init__(self):
        super(self, client).__init__(self, user, key, address)
</code></pre>
<p>Method 2: on specific object creation</p>
<pre><code>bar = foo().super(self, client).__init__(&lt;user&gt;, &lt;key&gt;,&lt; address&gt;) 
</code></pre>
<p>Check out the <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">docs</a> for details.</p>
</div>
<span class="comment-copy">the init needs a self reference, have you checked if your import actually works? You might need to call it with client.py and a path to it depending on where you saved it</span>
<span class="comment-copy">Sounds like you are trying to do something similar to this --&gt; <a href="https://stackoverflow.com/q/46996982/7345804">https://stackoverflow.com/q/46996982/7345804</a></span>
<span class="comment-copy">Thanks for the answer. But I am afraid I am not really looking for that. I can do what you have suggested by writing methods for the client class in the same file. But thats not what I want. I need to write the foo() in different file.</span>
<span class="comment-copy">I need to make the class foo() subclass of client class but i need to make separate file for foo(). The reason I am asking is because I have several ( more then 50 classes) foo() like classes that would reside in my module directory.</span>
<span class="comment-copy">You see, this, what you are talking about, is not subclassing and it's not logical. "foo" cannot be a class, but I can make this working like function of class Client and be called as "c.foo()". Do you want me to do this? Feel free to ask questions.</span>
<span class="comment-copy">Yes. I see the mistake. But the scenario still wont change. All I want is to have foo() in a separate file from the client.py and still be part of client() as a method or a subclass. If you can give me that kind of example it would be really really great! Thanks!!!</span>
<span class="comment-copy">@user3800017 I updated the answer</span>
