<div class="post-text" itemprop="text">
<p>It seems <code>asyncio.Queue</code> only can be pushed by the same thread reading it? For instance:</p>
<pre><code>import asyncio
from threading import Thread
import time

q = asyncio.Queue()

def produce():
    for i in range(100):
        q.put_nowait(i)
        time.sleep(0.1)

async def consume():
    while True:
        i = await q.get()
        print('consumed', i)

Thread(target=produce).start()
asyncio.get_event_loop().run_until_complete(consume())
</code></pre>
<p>only prints</p>
<pre><code>consumed 0
</code></pre>
<p>and then hangs. What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't <a href="https://docs.python.org/3/library/asyncio-dev.html#concurrency-and-multithreading" rel="nofollow noreferrer">call asyncio methods from another thread</a> directly.</p>
<p>Either use <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.call_soon_threadsafe" rel="nofollow noreferrer">loop.call_soon_threadsafe</a>:</p>
<pre><code>loop.call_soon_threadsafe(q.put_nowait, i)
</code></pre>
<p>Or <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.run_coroutine_threadsafe" rel="nofollow noreferrer">asyncio.run_coroutine_threadsafe</a>:</p>
<pre><code>future = asyncio.run_coroutine_threadsafe(q.put(i), loop)
</code></pre>
<p>where <code>loop</code> is the loop returned by <code>asyncio.get_event_loop()</code> <em>in your main thread</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could take a look on <a href="https://github.com/aio-libs/janus" rel="nofollow noreferrer">janus</a>
The library provides a queue with two faces: one for async event loop and other for classic threaded code.</p>
<p>I believe README describes the library pretty well.</p>
</div>
<span class="comment-copy">Not having any success with your suggestions (hangs the same way as before), could you please expand into a tiny example?</span>
<span class="comment-copy">Ah. Need to use the same loop as the main thread, and <code>get_event_loop</code> is not for that.</span>
<span class="comment-copy">@JonasBystr√∂m Exactly, thanks for the edit!</span>
<span class="comment-copy">Now that I understand how to use <code>asyncio</code>, it's only one extra line, and a few characters, in the whole source to be standard-library compliant. (The hard part was "getting it," blaming docs.)</span>
