<div class="post-text" itemprop="text">
<p>So I'm trying to build a robot that can drive autonomously. For that I need the robot to drive forward and check distance at the same time. And if distance is less than preferred distance, stop forward movement. By now I've written this code below, but it doesn't seem to run simultaneously and they also don't interact. How can I make it that these two functions do indeed interact. If there's anymore information needed I'm happy to supply you. Thanks!</p>
<pre><code>from multiprocessing import Process
from TestS import distance
import Robot
import time

constant1 = True
min_distance = 15

def forward():
    global constant1:
    robot.forward(150)                       #forward movement, speed 150
    time.sleep(2)

def distance_check():
    global constant1
    while constant1:
        distance()                           #checking distance
        dist = distance()
        return dist
        time.sleep(0.3)

        if dist &lt; min_distance:
            constant1 = False
            print 'Something in the way!'
            break

def autonomy():                              #autonomous movement
    while True:
        p1 = Process(target=forward)         
        p2 = Process(target=distance_check)
        p1.start()                           #start up 2 processes
        p2.start()
        p2.join()                            #wait for p2 to finish
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So, there's some serious problems with the code you posted. First, <b> you don't want the <code>distance_check</code> process to finish</b>, because it's running a while loop. You should not do <code>p2.join()</code>, nor should you be starting new processes all the time in your while loop. You're mixing too many ways of doing things here - either the two children run forever, or they each run once, not a mix. </p>
<p>However, the main problem is that <b>the original processes can't communicate with the original process, even via <code>global</code></b> (unless you do some more work). Threads are much more suited to this problem.</p>
<p>You also have a <code>return</code> inside your <code>distance_check()</code> function, so <b>no code below that statement gets executed</b> (including the <code>sleep</code>, and the setting of <code>constant1</code> (which should really have a better name).</p>
<p>In summary, I think you want something like this:</p>
<pre><code>from threading import Thread
from TestS import distance
import Robot
import time

can_move_forward = True
min_distance = 15


def move_forward():
    global can_move_forward
    while can_move_forward:
        robot.forward(150)
        time.sleep(2)
        print('Moving forward for two seconds!')


def check_distance():
    global can_move_forward
    while True:
        if distance() &lt; min_distance:
            can_move_forward = False
            print('Something in the way! Checking again in 0.3 seconds!')
        time.sleep(0.3)


def move_forward_and_check_distance():
    p1 = Thread(target = move_forward)
    p2 = Thread(target = check_distance)
    p1.start()
    p2.start()
</code></pre>
<p>Since you specified python-3.x in your tags, I've also corrected your <code>print</code>.</p>
<p>Obviously I can't check that this will work as you want it to because I don't have your robot, but I hope that this is at least somewhat helpful.</p>
</div>
<div class="post-text" itemprop="text">
<p>One issue with your multiprocessing solution is that <code>distance_check</code> returns and <em>stops</em></p>
<pre><code>    dist = distance()
    return dist        # &lt;------ 
    time.sleep(0.3)

    if dist &lt; min_distance:
        ....
</code></pre>
<p>It seems like you are trying to exchange information between the processes: which is typically done using <a href="https://docs.python.org/3/library/multiprocessing.html#exchanging-objects-between-processes" rel="nofollow noreferrer">Queues or Pipes</a>.</p>
<p>I <em>read between the lines</em> of your question and came up with the following specs:</p>
<ul>
<li>a robot moves if its speed is greater than zero</li>
<li>continually check for obstacles in front of the robot</li>
<li>stop the robot if it gets to close to something.</li>
</ul>
<p>I think you can achieve your goal without using multiprocessing. Here is a solution that uses generators/coroutines.  </p>
<p>For testing purposes, I have written my own versions of a robot and an obstacle sensor - trying to mimic what I see in your code</p>
<pre><code>class Robot:
    def __init__(self, name):
        self.name = name
    def forward(self, speed):
        print('\tRobot {} forward speed is {}'.format(self.name, speed))
        if speed == 0:
            print('\tRobot {} stopped'.format(speed))

def distance():
    '''User input to simulate obstacle sensor.'''
    d = int(input('distance? '))
    return d
</code></pre>
<p><a href="https://www.python.org/dev/peps/pep-0342/#examples" rel="nofollow noreferrer">Decorator to <em>start</em> a coroutine/generator</a>:</p>
<pre><code>def consumer(func):
    def wrapper(*args,**kw):
        gen = func(*args, **kw)
        next(gen)
        return gen
    wrapper.__name__ = func.__name__
    wrapper.__dict__ = func.__dict__
    wrapper.__doc__  = func.__doc__
    return wrapper
</code></pre>
<p>A producer to continually check to see if it is safe to move</p>
<pre><code>def can_move(target, min_distance = 15):
    '''Continually check for obstacles'''
    while distance() &gt; min_distance:
        target.send(True)
        print('check distance')
    target.close()
</code></pre>
<p>A generator/coroutine that <em>consumes</em> safe-to-move <em>signals</em> and changes the robot's speed as needed.</p>
<pre><code>@consumer
def forward():
    try:
        while True:
            if (yield):
                robot.forward(150)
    except GeneratorExit as e:
        # stop the robot
        robot.forward(0)
</code></pre>
<p>The robot's speed should change as fast as the obstacle sensor can produce distances.  The robot will move forward till it gets close to something and just stop and it all <em>shuts down</em>.  By tweaking the logic a bit in <code>forward</code> and <code>can_move</code> you could change the behaviour so that the generators/coroutines keep running but send a zero speed command as long as something is in front of it then when the thing gets out of the way (or the robot turns) it will start moving again.</p>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; 
&gt;&gt;&gt; robot = Robot('Foo')
&gt;&gt;&gt; can_move(forward())
distance? 100
    Foo forward speed is 150
check distance
distance? 50
    Foo forward speed is 150
check distance
distance? 30
    Foo forward speed is 150
check distance
distance? 15
    Foo forward speed is 0
    Robot 0 stopped
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>While this works in Python 3.6, it is based on a possibly outdated notion/understanding of generators and coroutines.  There may be a different way to do this with some of the <code>async</code> additions to Python 3+.</p>
</div>
<span class="comment-copy">Can you explain why they don't <code>seem to run simultaniously</code> or interact? How do you know?</span>
<span class="comment-copy">You might want to use a <a href="https://docs.python.org/3/library/queue.html" rel="nofollow noreferrer"><code>queue</code></a> for communication between threads.  You realize that the threads will not run simultaneously?</span>
<span class="comment-copy">@wwii The question-asker seems to want to use globals. A queue seems like overkill for something this simple. I agree that the threads don't run simultaneously, but it should be simultaneous-enough for this case.</span>
<span class="comment-copy">Thanks for your solution! I agree constant1 should have a better name. I was trying some stuff with globals and I thought they would be fitting for the job. I will try your code too!</span>
<span class="comment-copy">I really like your solution because it is nice and simple. But there is one flaw in it. When running the code and it comes to the point that can_move_forward=False. After that it stops briefly before it moves forward again for a really short time, then finally stops. I suppose there is nothing to do against because threads don't run simultaneouly?</span>
<span class="comment-copy">@NickHonings I did just fix a bug with <code>check_distance</code> (the loop should always run, not just run if <code>can_move_forward</code>). I don't see how that could cause the problem, but maybe try that. Additionally, the <code>sleep</code>s are probably overly long - the threads should be switching off fairly quickly, so any delays probably exist in the code somewhere.</span>
<span class="comment-copy">First of all, thank you very much for your reply! I'm trying to get my head around your code, because im just a beginner. But i'm beginning to understand your approach and I will definitely try it!</span>
