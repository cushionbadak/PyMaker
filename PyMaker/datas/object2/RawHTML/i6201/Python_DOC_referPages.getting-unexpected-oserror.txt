<div class="post-text" itemprop="text">
<p>I wrote the following code:</p>
<pre><code>def bigger(a,b):
    if a&gt;b:
        return a
    else:
        return b

print(bigger(1,3))
</code></pre>
<p>I saved the code as a file named bigger.py.</p>
<p>Then I executed the file using the following code in the Python interpreter (Python 3.6):</p>
<pre><code>exec(open('e:\py\bigger.py').read())
</code></pre>
<p>Python returns the following error message:</p>
<pre><code>&gt;&gt;&gt; exec(open('e:\py\bigger.py').read())
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
 OSError: [Errno 22] Invalid argument: 'e:Vipy\x08igger.py'
</code></pre>
<p>As you can see, it says the file name is <code>x08igger.py</code>, while what I entered in the code is <code>bigger.py</code>. This is so weird!</p>
</div>
<div class="post-text" itemprop="text">
<p>You just tried to open a file named: <code>e:\py&lt;ASCII BACKSPACE&gt;igger.py</code></p>
<p>The <code>\b</code> escape code is converted to an ASCII backspace character, so of course your file load has issues. This is why you <em>always</em> use raw strings for Windows paths (and regular expressions), to avoid this pitfall when the <code>\</code> precedes a character that represents an escape code (e.g. <code>r</code>, <code>n</code>, <code>u</code>, <code>U</code>, <code>x</code>, <code>f</code>, <code>v</code>, <code>t</code>, <code>a</code>, possibly a few others I'm forgetting off-hand). Using the string <code>r"e:\py\bigger.py"</code> for your file (note the preceding <code>r</code> before the open quote) will fix the problem; in a raw string, the only escapes interpreted are when they precede the quote character itself; otherwise, backslashes are just normal characters, not escapes.</p>
</div>
<span class="comment-copy">But why are you even <i>trying</i> to run your script that way? Just run it from outside the Python interpreter, at the normal command prompt. You can also run it from an open interpreter session by importing it (assuming the script is on a path that Python knows about). Eg,  <code>import bigger</code>. Once it's imported, you can call its functions, eg <code>print(bigger.bigger(5,7))</code>.</span>
<span class="comment-copy">Since the path to file has backslashes in it you should prefix the string with an <code>r</code> to indicate that they should taken literally and not combined with the  following character (like <code>\r</code> and <code>\n</code> would be) to form some other character. In other words change it to <code>r'e:\py\bigger.py'</code>.</span>
<span class="comment-copy">Thank you very much. I just also tried to use the <code>os.path</code>  module. I wrote this: <code>exec(open(os.path.join('e:','py','bigger.py').read())</code>, but it is incorrect. Do you know why?</span>
<span class="comment-copy">@failbetter: There is a weird special case for drive letters; it ends up constructing the equivalent of <code>r'e:py\bigger.py'</code>. Note the lack of a backslash after the <code>e:</code>. A path like that means "On the <code>e</code> drive, look up <code>py\bigger.py</code> relative to the drive's working directory (rather than the root of <code>e:</code>)". <a href="https://docs.python.org/3/library/os.path.html#os.path.join" rel="nofollow noreferrer">The docs mention this</a>, but it is rather surprising when you first encounter it.</span>
<span class="comment-copy">Got it.  Just to remind myself: <code>os.path.join('e:\\','py','bigger.py')</code> and <code>os.path.join('e:\py','bigger.py')</code> both work.</span>
<span class="comment-copy">@failbetter: Though I'd strongly recommend the latter use <code>r'e:\py'</code> on principle, so changing the code to refer to a top-level directory named <code>rye</code> or whatever doesn't lead to a carriage return in the string. For the former, escaping the backslash is the only option; annoyingly, there is no way for a raw literal to end in a backslash  (the closest you could come is adjacent concatenated literals, where the second one is non-raw and contains the trailing backslash, e.g. <code>r'e:' "\\"</code>, which is no improvement for a short case like this).</span>
