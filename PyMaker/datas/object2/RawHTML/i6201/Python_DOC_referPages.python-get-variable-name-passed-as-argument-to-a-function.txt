<div class="post-text" itemprop="text">
<p>I want a function that can return the variable/object name as str like this :</p>
<pre><code>def get_variable_name (input_variable):
    ## some codes

&gt;&gt;get_variable_name(a)
'a'

&gt;&gt;get_variable_name(mylist)
'mylist'
</code></pre>
<p>it looks like silly but i need the function to construct expression regarding to the variable for later on 'exec()'. Can someone help on how to write the 'get_variable_name' ?</p>
</div>
<div class="post-text" itemprop="text">
<p>I've seen a few variants on this kind of question several times on SO now. The answer is <em>don't</em>.  <strong>Learn to use a <code>dict</code> anytime you need association between names and objects.</strong>  You will thank yourself for this later.  </p>
<p>In answer to the question "How can my code discover the name of an object?", here's <a href="http://effbot.org/pyfaq/how-can-my-code-discover-the-name-of-an-object.htm" rel="nofollow noreferrer">a quote</a> from Fredrik Lundh (on comp.lang.python):</p>
<blockquote>
<p>The same way as you get the name of that cat you found on your porch:
  the cat (object) itself cannot tell you its name, and it doesn’t
  really care — so the only way to find out what it’s called is to ask
  all your neighbours (namespaces) if it’s their cat (object)…</p>
<p>….and don’t be surprised if you’ll find that it’s known by many names,
  or no name at all!</p>
</blockquote>
<hr/>
<p>Note: It is <em>technically</em> possible to get a list of the names which are bound to an object, at least in CPython implementation.  If you're interested to see that demonstrated, see the usage of the <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a> module shown in my answer here:  </p>
<p><a href="https://stackoverflow.com/a/8875313/674039">Can an object inspect the name of the variable it's been assigned to?</a></p>
<p>This technique should only be used in some crazy debugging session, don't use anything like this in your design.  </p>
</div>
<div class="post-text" itemprop="text">
<p>In general it is not possible.  When you pass something to a function, you are passing the object, not the name.  The same object can have many names or no names.  What is the function supposed to do if you call <code>get_variable_name(37)</code>?  You should think about why you want to do this, and try to find another way to accomplish your real task.</p>
<p>Edit: If you want <code>get_variable_name(37)</code> to return 37, then if you do <code>a=37</code> and then do <code>get_variable_name(a)</code>, that will also return 37.  Once inside the function, it has no way of knowing what the object's "name" was outside.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def getvariablename(vara):
    for k in globals():
        if globals()[k] == vara:
                  return k
     return str(vara)
</code></pre>
<p>may work in some instance ...but very subject to breakage... and I would basically never use it in any kind of production code...</p>
<p>basically I cant think of any good reason to do this ... and about a million not to</p>
</div>
<div class="post-text" itemprop="text">
<p>if you just want to return the name of a variable selected based on user input... so they can keep track of their input, add a variable name in the code as they make selections in addition to the values generated from their selections.  for example: </p>
<pre><code>temp = raw_input('Do you want a hot drink?  Type yes or no. ')
size = raw_input('Do you want a large drink? Type yes or no. ')
if temp and size == 'yes':
    drink = HL
    name = 'Large cafe au lait'
if temp and size != 'yes':
    drink = CS
    name = 'Small ice coffee'
print 'You ordered a ', name, '.'
</code></pre>
<p>MJ</p>
</div>
<div class="post-text" itemprop="text">
<p>If your statement to be used in exec() is something like this</p>
<pre><code>a = ["ddd","dfd","444"]
</code></pre>
<p>then do something like this</p>
<pre><code>exec('b = a = ["ddd","dfd","444"]')
</code></pre>
<p>now you can use 'b' in your code to get a handle on 'a'.</p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps you can use traceback.extract_stack() to get the call stack, then extract the variable name(s) from the entry?</p>
<pre><code>def getVarName(a):
    stack = extract_stack()
    print(stack.pop(-2)[3])

bob = 5
getVarName(bob);
</code></pre>
<p>Output:</p>
<pre><code>getVarName(bob)
</code></pre>
</div>
<span class="comment-copy">It's <i>far</i> more work than you think to do so.</span>
<span class="comment-copy">why are you doing this?  Im almost certain there is a much better way to do what you want (I mean beyond the very brief explanation you gave)</span>
<span class="comment-copy">the fundamental problem is that multiple names can point to the same object.</span>
<span class="comment-copy">Wait, you want to get some name of a function argument so that you can use it in <i>exec</i>?  Almost certainly you've taken two wrong turns, then.  This is probably an example of the <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY problem</a>, where instead of asking for help to achieve your goal, you ask for help in implementing your not-very-practical solution.</span>
<span class="comment-copy">thank you all for the productive answer. I think I have the clue to solve the problem.</span>
<span class="comment-copy">Note that even that link gives you a list of the name<i>s</i> (plural) of an object.  There isn't really such a thing as "<i>the</i> name" of an object.</span>
<span class="comment-copy">I expect ro return '37'</span>
<span class="comment-copy">return <code>a</code>, huh?</span>
<span class="comment-copy">Im not sure anything is "impossible" but that said it would be very dificult and hackey and subject to breakage</span>
<span class="comment-copy">i don't need the value, i just need the str that tell the variable name been input to the function.</span>
<span class="comment-copy">i hoped Python provide the build-in '<b>objname</b>' for the object. I fail to find that.  I just want this feature to add some dynamic for my application. Namely, I will generate a 'str_statement' regarding the variable, and use 'exec(str_statement)' to do the job. I know it is a bad habit, but it is the intuitive and do job quickly. (I build the application for myself, no security issue)</span>
<span class="comment-copy">Very handy solution. +1</span>
<span class="comment-copy">Returning a variable name based on user input to provide interactive feedback.</span>
