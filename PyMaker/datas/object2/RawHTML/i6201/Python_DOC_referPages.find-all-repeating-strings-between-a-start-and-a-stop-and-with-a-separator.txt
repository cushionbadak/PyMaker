<div class="post-text" itemprop="text">
<p>I'm trying to get one or more substring from a string like this :</p>
<blockquote>
<p>"theSTART:param1:param2:paramN:theEND"</p>
</blockquote>
<p>or</p>
<blockquote>
<p>"theSTART:param1:theEND"</p>
</blockquote>
<p>or any number of parameter saparated by ":" and delimited by "theSTART:" and ":theEND".
I'm using Python3 regex but I can't find the right pattern to match a variable number of items:</p>
<pre><code>r"theSTART:((?:\w*)+):((?:[^:])*):((?:\w)+):theEND"
</code></pre>
<p>works only for 3 items.
And if I try :</p>
<pre><code>r"theSTART:((?:\w*)+):(((?:[^:])*):)+((?:\w)+):theEND"
</code></pre>
<p>doesn't work as expected.</p>
</div>
<div class="post-text" itemprop="text">
<p>re.findall might be a solution if you want to use regular expressions instead of splitting. findall returns a list of all occurrences of a pattern. </p>
<pre><code>re.findall(r":(?:(\w+)(?=:))", r"theSTART:param1:param2:paramN:theEND")
</code></pre>
<p>returns the list <code>['param1', 'param2', 'paramN']</code>.</p>
<p>You probably won't (or can't) find a pattern to match any number of parameters. According to the Python <a href="https://docs.python.org/3/library/re.html#re.match.group" rel="nofollow noreferrer">re module documentation</a> is only the last match accessible, if a group matches multiple times.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, if your data always starts with 'theStart', ends with 'theEnd' and all fields are ':' delimited then why even fool with regex for the problem? Why not just:</p>
<pre><code>def delimited_items(the_string):
  items = the_string.split(':')
  return items[1:-1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Capturing everything using '.' then splitting on the delimiter should simplify things a bit. </p>
<pre><code>params = re.match(r'theSTART:(.+):theEND', a).group(1).split(':')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>You can use <code>re.findall</code> with a <code>positive lookahead</code>:</h3>
<p><strong>See a demo on <a href="https://regex101.com/r/YeqjEy/2" rel="nofollow noreferrer"><code>regex101</code></a></strong></p>
<p>The link above will explain very well what each part of the <code>regex</code> below does in detail, but if you are still not sure, try reading the <a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer"><code>documentation</code></a> as it is very useful.</p>
<pre><code>s = "theSTART:param1:param2:paramN:theEND"
re.findall(":(.+?)(?=:)", s)
</code></pre>
<p>which gives a <code>list</code> of the <code>parameters</code>:</p>
<pre><code>['param1', 'param2', 'paramN']
</code></pre>
<p><em>N.B. there are two different smiley faces <code>:)</code> in this which is pretty cool</em></p>
</div>
<span class="comment-copy">I'm trying to solve this with regex to better understand how to form patterns and get more familiar with python regex. Anyway your solution is useful to.</span>
