<div class="post-text" itemprop="text">
<pre><code>def mutation(input_list):
  list_copy = input_list[:]
  list_copy[0] = 10
  input_list = list_copy

# Correctly mutates
sample_list = [0,1,2]
sample_copy = sample_list[:]
sample_copy[0] = 10
sample_list = sample_copy
print(sample_list)

# Incorrectly mutates
sample_list = [0,1,2]
mutation(sample_list)
print(sample_list)
</code></pre>
<p>In the top snippet of code, I've made a copy of a list and modified it. I then set the original to the copy and then it works. 
What confuses me is why doing this process outside of a function works but if I were to do it inside a function (the 2nd snippet of code), it fails?</p>
<p>For reference, the code returns:</p>
<pre><code>[10, 1, 2]
[0, 1, 2]
</code></pre>
<p>EDIT: I know that calling <code>input_list[0] = 10</code> works. I just want to know what makes this different from what I showed above all in memory? </p>
</div>
<div class="post-text" itemprop="text">
<p>In <code>mutation</code>, <code>input_list</code> starts out pointing at the same object as <code>sample_list</code>, but later you make it point at <code>list_copy</code>.
<code>sample_list</code> is not modified. It is still pointing at the original object.</p>
<p>When you do it outside of the function you change <code>sample_list</code> to point to the new object before printing it.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that using the built-in function <code>id</code> to show the object ID will help here. If the ID of two variable names gives the same result then they refer to the same object; otherwise the objects are different.</p>
<pre><code>&gt;&gt;&gt; def mutation(input_list):
...     print(id(input_list))
...     list_copy = input_list[:]
...     print(id(list_copy))
...     input_list = list_copy
...     print(id(input_list))
...     
&gt;&gt;&gt; a = list(range(10))
&gt;&gt;&gt; print(id(a))
140737233394376
&gt;&gt;&gt; mutation(a)
140737233394376
140737233289160
140737233289160
</code></pre>
<p>In the above, we see that after <code>input_list = list_copy</code>, the name <code>input_list</code> refers to identically the same object in memory as <code>list_copy</code>, which means it no longer refers to the list given as the function argument. This is why the mutation you expect does not work - you are modifying an entirely different object.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's because you sets new value for <code>input_list</code> which is local variable of <code>mutation</code> function.</p>
<p>The simplest solution is changing value of first element of list passed as argument:</p>
<pre><code>def mutation(input_list):
    input_list[0] = 10
</code></pre>
<p>Otherwise you can write function which changes value of global variable called <code>sample_list</code></p>
<pre><code>def mutation():
    global sample_list
    list_copy = sample_list[:]
    list_copy[0] = 10
    sample_list = list_copy
</code></pre>
</div>
<span class="comment-copy">See <a href="https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference" rel="nofollow noreferrer">docs.python.org/3/faq/â€¦</a>.</span>
<span class="comment-copy">Highly suggested reading: <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">nedbatchelder.com/text/names.html</a>.  This should give you all the answers you need.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference">How do I pass a variable by reference?</a></span>
<span class="comment-copy">It worked just fine. The <code>sample_list</code> in the global namespace did not get mutates.your last line in the function effectively does nothing. <code>input_list = list_copy</code> it simply assigns to the local variable <code>input_list</code>, but that doesn't affect anything in the global scope. Please read <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">nedbatchelder.com/text/names.html</a></span>
