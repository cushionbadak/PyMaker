<div class="post-text" itemprop="text">
<p>I'm trying to make a code that checks if there is a path in a maze from the first coordinate to the last represented by a matrix. I'm also trying to use queues. Here is the code I have so far:</p>
<pre><code>from queue import Queue
maze=open(input())
matrix=maze.readlines()
matrix=[i.strip() for i in matrix]
matrix=[i.split() for i in matrix]
q=Queue()
row=0
column=0
q.put(row,column)
while not q.empty():
     row,col=q.get()
     if matrix[row][col+1]=="0" and col+1&lt;len(matrix[0]):
         q.put(row,col+1)
         matrix[row][col+1]="2"
    if matrix[row+1][col]=="0" and row+1&lt;len(matrix):
         q.put(row+1,col)
         matrix[row+1][col]="3"
    if matrix[row][col-1]=="0" and col-1&gt;len(matrix[0]):
         q.put(row,col-1)
         matrix[x][x-1]="4"
    if matrix[row-1][col]=="0" and row-1&lt;len(matrix):
         q.put(row-1,col)
         matrix[row-1][col]="5"
</code></pre>
<p>What can I add to the end in order to get an output of "Yes" (if there is a path) and "No" if there isn't one?</p>
<p>Here is a sample of the text file containing a matrix.</p>
<pre><code>0 0 0 0 1 0 0 0
0 1 1 0 1 0 1 0
0 1 0 0 1 0 1 0
0 0 0 1 0 0 1 0
0 1 0 1 0 1 1 0
0 0 1 1 0 1 0 0
1 0 0 0 0 1 1 0
0 0 1 1 1 1 0 0
</code></pre>
<p>I tried adding this at the end. I run my code and it says "'int' object is not iterable" </p>
<pre><code>if matrix[7][7]=="2" "3" "4" or "5":
   print "yes"
else:
   print "no"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a couple of problems with your code.</p>
<p>Firstly, you need to put (row, col) tuples into the queue.</p>
<p>Secondly, you need to change the order of the logic in your `if tests. First test that the new row or column index is inside the matrix, and then test if that location contains "0".</p>
<p>Once the whole matrix is mapped, you just need to test if the last location in the matrix is equal to "0".</p>
<p>Here's a repaired version of your code.</p>
<pre><code>from queue import Queue

def show(matrix):
    for line in matrix:
        print(*line)
    print()

maze = '''\
0 0 0 0 1 0 0 0
0 1 1 0 1 0 1 0
0 1 0 0 1 0 1 0
0 0 0 1 0 0 1 0
0 1 0 1 0 1 1 0
0 0 1 1 0 1 0 0
1 0 0 0 0 1 1 0
0 0 1 1 1 1 0 0
'''

matrix = maze.splitlines()
matrix = [i.strip() for i in matrix]
matrix = [i.split() for i in matrix]
numrows, numcols = len(matrix), len(matrix[0])

show(matrix)

# Explore the maze
q = Queue()
row = col = 0
q.put((row, col))
while not q.empty():
    row, col = q.get()

    if col+1 &lt; numcols and matrix[row][col+1] == "0":
         q.put((row, col+1))
         matrix[row][col+1] = "2"
    if row+1 &lt; numrows and matrix[row+1][col] == "0":
         q.put((row+1, col))
         matrix[row+1][col] = "3"
    if 0 &lt;= col-1 and matrix[row][col-1] == "0":
         q.put((row, col-1))
         matrix[row][col-1] = "4"
    if 0 &lt;= row-1 and matrix[row-1][col] == "0":
         q.put((row-1, col))
         matrix[row-1][col] = "5"

show(matrix)
row, col = numrows - 1, numcols - 1
current = matrix[row][col]
if current == "0":
    print('No path exists')
else:
    print('Success!')
</code></pre>
<p><strong>output</strong></p>
<pre><code>0 0 0 0 1 0 0 0
0 1 1 0 1 0 1 0
0 1 0 0 1 0 1 0
0 0 0 1 0 0 1 0
0 1 0 1 0 1 1 0
0 0 1 1 0 1 0 0
1 0 0 0 0 1 1 0
0 0 1 1 1 1 0 0

4 2 2 2 1 5 2 2
3 1 1 3 1 5 1 3
3 1 4 3 1 5 1 3
3 2 2 1 5 2 1 3
3 1 3 1 5 1 1 3
3 2 1 1 5 1 4 3
1 3 2 2 2 1 1 3
4 3 1 1 1 1 4 3

Success!
</code></pre>
<hr/>
<p>Now see if you can print the path through the maze.<br/>
Hint: start at <code>matrix[numrows-1][numcols-1]</code> and work backwards.</p>
<p>BTW, you should probably use a <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a> for this task instead of a <code>queue.Queue</code>, which is normally used when your program uses threading.</p>
</div>
<span class="comment-copy"><code>matrix[x[0]][x[1]+1]=="2"</code> makes a comparison &amp; throws away the result. Is that supposed to be <code>matrix[x[0]][x[1]+1] = "2"</code>?</span>
<span class="comment-copy">It would make it a <i>lot</i> easier to analyze your code if you showed some typical maze data. In order to make a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> you could hard-code the matrix as a list in your code.</span>
<span class="comment-copy">Also, all of those <code>x[0]</code> and <code>x[1]</code> make the code hard to read. It'd be a lot easier on the eyes if you split the coordinates into a pair of variables like <code>row, col = q.get()</code>.</span>
<span class="comment-copy">Noted! I edited my code, thanks! I'm not sure if I did the last suggestion right. Hopefully, it's easier to read now.</span>
<span class="comment-copy"><code>row</code> and <code>col</code> are plain integers, so you should have stuff like <code>if matrix[row][col+1]=="0"</code></span>
<span class="comment-copy">Thank you so much! I'll take note of that!</span>
<span class="comment-copy">@I.V.N To see how to trace the path back through the maze take a look at <a href="https://stackoverflow.com/a/47178439/4014959">stackoverflow.com/a/47178439/4014959</a></span>
