<div class="post-text" itemprop="text">
<p>If I have string "axplpett" I would like to return true, because a substring of it "axplpe" contains all of the letters of apple. </p>
<p>I was thinking of using the set method, but apple has repeating characters.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply this?</p>
<pre><code>string = "axplpett"
test = "apple"
all(string.count(l) &gt;= test.count(l) for l in test)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>r = 'aapple'
w = list('axplpett')
try:
    for x in r:
        w.pop(w.index(x))
    print(True) # return True
except ValueError:
    print(False) # return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe this:-</p>
<pre><code>def findsub (sub,main):
    l1 = [i for i in sub]
    l2 = [i for i in main]
    for item in l1:
        if item in l2:
            l2.remove(item)
        else:
            return False
    return True
print(findsub('apple','appleccssfftt'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can easily do this with a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Counter</a>.</p>
<p>We subtract the count of letters in the target string 'apple' from the count of letters in the test string 'axplpett'. Any letters in the target string that aren't in the test string will result in negative counts for those letters. We then negate that result, which strips off positive or zero counts, the resulting counter will be empty if the target string is contained within the test string.</p>
<pre><code>from collections import Counter

target = 'apple'
test = 'axplpett'
counts = Counter(test)
counts.subtract(target)
print(not -counts)

counts = Counter('axplett')
counts.subtract(target)
print(not -counts)
</code></pre>
<p><strong>output</strong></p>
<pre><code>True
False
</code></pre>
</div>
<span class="comment-copy">why not do a simple iteration of substrings of a string, and check whether each letter of substring contained in string.</span>
<span class="comment-copy">OP explicitely mentioned why <code>set</code> doesn't work...</span>
<span class="comment-copy">No you are wrong in the general case try "aaa" vs "abc": set("aaa") is {"a"} which is contained in set("abc") but no substring of "abc" is anagram of "aaa"</span>
<span class="comment-copy">@Julien Redesigned the code to be strict about the count of each letter.</span>
