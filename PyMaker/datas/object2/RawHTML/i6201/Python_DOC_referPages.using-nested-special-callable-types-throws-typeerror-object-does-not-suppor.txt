<div class="post-text" itemprop="text">
<p>Consider the following Class</p>
<pre><code>class Spam:
    def __init__(self):
        from collections import defaultdict
        self.eggs = defaultdict(list)
    def __getitem__(self, index):
        class AdderHelper:
            def __init__(self, eggs):
                self.eggs = eggs
            def __iadd__(self, egg):
                self.eggs.append(egg)
                return self
        return AdderHelper(self.eggs[index])
</code></pre>
<p>To provide an indexed in-place add operator, I defined a Helper class (similar to iterator pattern) and provided the next level operator to be called on the instance of the class.</p>
<p>For example, I intended to provide the following operator behaviour</p>
<pre><code>spam = Spam()
spam[0] += 1
</code></pre>
<p>Unfortunately, Python did not like it and complained</p>
<pre><code>Traceback (most recent call last):

  File "&lt;ipython-input-82-ee0bba1041e3&gt;", line 1, in &lt;module&gt;
    spam[0] = 1

TypeError: 'Spam' object does not support item assignment
</code></pre>
<p>Interestingly, if I assign the result of <strong>getitem</strong>, it just works</p>
<pre><code>obj = spam[0]
obj += 1
</code></pre>
<p>Looks like, I simply do not understand the behaviour
Nevertheless, for in-place add, it does invokes the <strong>setitem</strong> and the only way to get over it is to override the <strong>setitem</strong> function as in</p>
<pre><code> def __setitem__(self, index, value):
    obj = self.__getitem__(index)
    obj += value
    return self
</code></pre>
<p><strong>Note</strong></p>
<p>Q1: @vaultah spam[0] += 1 is basically spam[0] = spam[0] + 1</p>
<p>I couldn't;t find any documentation to support that python would treat an in-place operator as a binary-op with the first operand as self. Even the disassembly says otherwise</p>
<pre><code>def foo(spam):
    spam[0] += 1
dis.dis(foo)
  2           0 LOAD_FAST                0 (spam)
              2 LOAD_CONST               1 (0)
              4 DUP_TOP_TWO
              6 BINARY_SUBSCR
              8 LOAD_CONST               2 (1)
             10 INPLACE_ADD
             12 ROT_THREE
             14 STORE_SUBSCR
             16 LOAD_CONST               0 (None)
             18 RETURN_VALUE
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>+=</code> is an augmented assignment operator that calls the <code>__iadd__</code> method of the LHS, if it exists, and <em>then assigns its return value to the LHS</em>:</p>
<blockquote>
<p>For instance, if x is an instance of a class with an <code>__iadd__()</code>
  method, <code>x += y</code> is equivalent to <code>x = x.__iadd__(y)</code>.</p>
</blockquote>
<p>(<a href="https://docs.python.org/3/reference/datamodel.html#object.__iadd__" rel="nofollow noreferrer">source</a>)</p>
<p>Thus</p>
<pre><code>spam = Spam()
spam[0] += 1
</code></pre>
<p>is equivalent to</p>
<pre><code>spam = Spam()
spam[0] = spam[0].__iadd__(1)
</code></pre>
<p>While <code>spam[0]</code> succeeds because <code>__getitem__</code> is implemented, subsequent assignment to <code>spam[0]</code> does not, since it needs <code>__setitem__</code> to work. At the same time, the <code>spam[0].eggs</code> list is updated, since <code>__iadd__</code> works as expected:</p>
<pre><code>In [4]: spam[0].eggs
Out[4]: [1]
</code></pre>
<p>See <a href="https://docs.python.org/3/faq/programming.html#faq-augmented-assignment-tuple-error" rel="nofollow noreferrer">this</a> for a related FAQ.</p>
</div>
<span class="comment-copy"><code>spam[0] = 1</code> calls <code>__setitem__</code>, not <code>__getitem__</code>.</span>
<span class="comment-copy">@vaultah: Sorry there was a typographical error</span>
<span class="comment-copy">My point still stands. <code>spam[0] += 1</code> is basically <code>spam[0] = spam[0] + 1</code></span>
<span class="comment-copy">@vaultah. I couldn't;t find any reference where it says python would treat an in-place operator as a binary-op with first operand as self. Even the disassembly says otherwise</span>
<span class="comment-copy">Yes, sorry, I skipped over the <code>__iadd__</code> part</span>
