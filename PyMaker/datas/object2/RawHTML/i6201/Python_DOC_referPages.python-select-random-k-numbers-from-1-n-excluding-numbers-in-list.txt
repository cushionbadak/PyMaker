<div class="post-text" itemprop="text">
<p>For a given exclude_list = [3, 5, 8], n = 30, k = 5</p>
<p>I'd like to pick 5(k) random numbers between 1 and 30.
But I should not pick numbers in the exclude_list</p>
<p>Suppose exclude_list, n could be potentially large.</p>
<p>When there's no need for exclusion, it is easy to get k random samples</p>
<pre><code>rand_numbers = sample(range(1, n), k)
</code></pre>
<p>So to get the answer, I could do</p>
<pre><code>sample(set(range(1, n)) - set(exclude_numbers), k)
</code></pre>
<p>I read that range keeps one number in memory at a time.
I'm not quite sure how it affects the two lines above.</p>
<p>The first question is, does the following code puts all n numbers in memory or does it put each number at a time?</p>
<pre><code>rand_numbers = sample(range(1, n), k)
</code></pre>
<p>2nd question is, if the above code indeed puts one number at a time in memory, can I do the similar with the additional constraint of the exclusion list?</p>
</div>
<div class="post-text" itemprop="text">
<p>Sample notes in <a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow noreferrer"><code>sample</code>'s docstring</a>:</p>
<blockquote>
<p>To choose a sample in a range of integers, use range as an argument.
  This is especially fast and space efficient for sampling from a
  large population:   sample(range(10000000), 60)</p>
</blockquote>
<p>I can test this on my machine:</p>
<pre><code>In [11]: sample(range(100000000), 3)
Out[11]: [70147105, 27647494, 41615897]

In [12]: list(range(100000000))  # crash/takes a long time
</code></pre>
<hr/>
<p>One way to sample with an exclude list efficiently is to use the same range trick but "hop over" the exclusions (we can do this in O(k * log(<code>len(exclude_list)</code>)) with the <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow noreferrer"><code>bisect</code> module</a>:</p>
<pre><code>import bisect
import random

def sample_excluding(n, k, excluding):
    # if we assume excluding is unique and sorted we can avoid the set usage...
    skips = [j - i for i, j in enumerate(sorted(set(excluding)))]
    s = random.sample(range(n - len(skips)), k)
    return [i + bisect.bisect_right(skips, i) for i in s]
</code></pre>
<p>and we can see it working:</p>
<pre><code>In [21]: sample_excluding(10, 3, [2, 4, 7])
Out[21]: [6, 3, 9]

In [22]: sample_excluding(10, 3, [1, 2, 8])
Out[22]: [0, 4, 3]

In [23]: sample_excluding(10, 6, [1, 2, 8])
Out[23]: [0, 7, 9, 6, 3, 5]
</code></pre>
<p>Specifically we've done this without using O(n) memory:</p>
<pre><code>In [24]: sample_excluding(10000000, 6, [1, 2, 8])
Out[24]: [1495143, 270716, 9490477, 2570599, 8450517, 8283229]
</code></pre>
</div>
<span class="comment-copy">Note: This code also assumes, but doesn't enforce, that excluding is a subset of range(n).</span>
