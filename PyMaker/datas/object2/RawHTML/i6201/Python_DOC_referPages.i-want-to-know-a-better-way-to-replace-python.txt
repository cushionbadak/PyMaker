<div class="post-text" itemprop="text">
<p>How can I get a better way?
josn :</p>
<pre><code>home = '{u'1p': u'2', u'2p': u'0', u'rs': u'2', u'3p': u'0', u'penalty': u'0', u'fe': u'2', u'ord': u'2', u'ot':u'0'}'
</code></pre>
<p>I want the result.</p>
<pre><code>home = '1p: 2, 2p: 0, rs: 2, 3p: 0, penalty: 0, fe: 2, ord: 2, ot:0'
</code></pre>
<p>I tried this.</p>
<pre><code>home= sport.get("home")
home= str(home).replace("{","")
home= str(home).replace("}","")
home= str(home).replace("u'","")
home= str(home).replace("'","")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import json
d = json.loads(home)
print(','.join('%s: %s' % tup for tup in d.items()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval()</code></a></p>
<pre><code>res = ''.join('{}: {}, '.format(k, v) for k, v in ast.literal_eval(home).items())[:-2]
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt;&gt;&gt; res
'1p: 2, 2p: 0, rs: 2, 3p: 0, penalty: 0, fe: 2, ord: 2, ot: 0'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use regex</p>
<pre><code>home = sport.get("home")
home = re.sub(r'[{}\'u]+','', home)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So, time for some string magic:</p>
<pre><code>home = "{u'1p': u'2', u'2p': u'0', u'rs': u'2', u'3p': u'0', u'penalty': u'0', u'fe': u'2', u'ord': u'2', u'ot':u'0'}"
import ast
home = ''.join(['{}: {}, '.format(k,v) for k,v in ast.literal_eval(home).items()]).strip(', ')
</code></pre>
<p>This will land you with <code>home = '1p: 2, 2p: 0, rs: 2, 3p: 0, penalty: 0, fe: 2, ord: 2, ot: 0'</code></p>
<p>But in essence, this is a one-line workaround for doing the exact same thing you were doing with the replaces. It converts the string <code>home</code> to a dictionary to use in a comprehension. In the end, the dictionary is replaced by a string. I do not see what the use would be for removing a piece of structure engrained in the json, except if it is for printing purposes, which can be done more efficiently in a dict comprehension.</p>
</div>
<span class="comment-copy">but your <code>home</code> variable will initially throw <code>SyntaxError: invalid syntax</code>. Update your question</span>
<span class="comment-copy">Why not just parse it using <code>json.loads(...)</code> and produce the same result via iteration?</span>
<span class="comment-copy">Please post some working code. Where are you getting your data from -- a valid JSON file?</span>
<span class="comment-copy">The <code>eval(...)</code> is a no-no IMO.</span>
<span class="comment-copy">Okay, okay, if you do not trust the source from which you get the json, you should indeed not use <code>eval</code> as that can quickly lead to security issues..@клйкбаутоьмажазвайкукас updated to use the more safe <code>literal_eval</code> from the Python in-built <code>ast</code></span>
