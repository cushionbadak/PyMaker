<div class="post-text" itemprop="text">
<p>With a list of numbers, each number can appear multiple times, i need to find the least common number in the list. If different numbers have the same lowest frequency, the result is the one occurring last in the list. An example, the least common integer in [1, 7, 2, 1, 2] is 7 (not 2, as originally said). And the list needs to stay unsorted</p>
<p>I have the following but it always sets the last entry to leastCommon</p>
<pre><code>def least_common_in_unsorted(integers):
    leastCommon = integers[0]
    check = 1
    appears = 1
    for currentPosition in integers:
        if currentPosition == leastCommon:
            appears + 1
        elif currentPosition != leastCommon:
            if check &lt;= appears:
                check = 1
                appears = 1
                leastCommon = currentPosition
    return leastCommon
</code></pre>
<p>Any help would be greatly appreciated</p>
</div>
<div class="post-text" itemprop="text">
<p>It is the simplest way come in my mind right now:</p>
<pre><code>a = [1, 7, 2, 1, 2]
c, least = len(a), 0
for x in a:
    if a.count(x) &lt;= c :
        c = a.count(x)
        least = x
least # 7
</code></pre>
<p>and in two least items it will return the last occurrence one.</p>
<pre><code>a = [1, 7, 2, 1, 2, 7] # least = 7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using the <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer">Counter</a>:</p>
<pre><code>from collections import Counter

lst = [1, 7, 2, 1, 2]
cnt = Counter(lst)
mincnt = min(cnt.values())
minval = next(n for n in reversed(lst) if cnt[n] == mincnt)

print(minval) #7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This answer is based on @offtoffel to incorporate multiple items of the same number of occurrences while choosing the last occurring one:</p>
<pre><code>def least_common(lst):   
    return min(lst, key=lambda x: (lst.count(x), lst[::-1].index(x)))


print(least_common([1,2,1,2]))
# 2

print(least_common([1,2,7,1,2]))
# 7
</code></pre>
<p>Edit: I noticed that thereâ€™s a even simpler solution, that is efficient and effective (just reverse the list in the beginning and min will keep the last value that has the minimum count):</p>
<pre><code>def least_common(lst): 
    lst = lst[::-1]
    return min(lst, key=lst.count)


print(least_common([1,2,1,2]))
# 2

print(least_common([1,2,7,1,2]))
# 7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Short but inefficient:</p>
<pre><code>&gt;&gt;&gt; min(a[::-1], key=a.count)
7
</code></pre>
<p>Efficient version using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">collections.Counter</a>:</p>
<pre><code>&gt;&gt;&gt; min(a[::-1], key=Counter(a).get)
7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def least_common(lst):
    return min(set(lst), key=lst.count)
</code></pre>
<p>Edit: sorry, this does not always take the last list item with least occurancy, as demanded by the user...it works on the example, but not for every instance.</p>
</div>
<span class="comment-copy">"the least common integer in [1, 7, 2, 1, 2] is 2" &lt;- did you mean 7?</span>
<span class="comment-copy">least common number is 7 right ? because it occured only once. What do you mean by least common number</span>
<span class="comment-copy">typo, sorry it is supposed to be 7</span>
<span class="comment-copy">It's not very efficient to call <code>count</code> multiple times but it seems to work fine.</span>
<span class="comment-copy">thank you, i have tried this with multiple different lists and works as it should</span>
<span class="comment-copy">I was just about to come up with a solution like yours. Great idea!</span>
<span class="comment-copy">Note that it's more concise but less efficient than @Arman's answer. You keep reversing the same list.</span>
<span class="comment-copy">i have tried this thank you but this returns the first instance of the least common number, im trying to make it return the last instance if there is say 2 numbers with the same lowest frequency</span>
<span class="comment-copy">See abccd's answer</span>
