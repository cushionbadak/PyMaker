<div class="post-text" itemprop="text">
<p>I need to efficiently insert about 500k (give or take 100k) rows of data into my PostgreSQL database. After a generous amount of google-ing, I've gotten to this solution, averaging about 150 (wall-clock) seconds.</p>
<pre><code>def db_insert_spectrum(curs, visual_data, recording_id):
    sql = """
        INSERT INTO spectrums (row, col, value, recording_id)
        VALUES %s
    """

    # Mass-insertion technique
    # visual_data is a 2D array (a nx63 matrix)
    values_list = []
    for rowIndex, rowData in enumerate(visual_data):
        for colIndex, colData in enumerate(rowData): # colData is the value
            value = [(rowIndex, colIndex, colData, recording_id)]
            values_list.append(value)

    psycopg2.extras.execute_batch(curs, sql, values_list, page_size=1000)
</code></pre>
<p>Is there a faster way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on the <a href="https://stackoverflow.com/q/2271787/190597">answers given here</a>, <a href="http://initd.org/psycopg/docs/usage.html#using-copy-to-and-copy-from" rel="nofollow noreferrer">COPY</a> is the fastest method. <code>COPY</code> reads from a file or file-like object. </p>
<p>Since memory I/O is <a href="http://norvig.com/21-days.html#answers" rel="nofollow noreferrer">many orders of magnitude</a> faster than disk I/O, it is faster to write the data to a <a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="nofollow noreferrer"><code>StringIO</code></a> file-like object than to write to an actual file.
The psycopg docs show an example of calling <a href="http://initd.org/psycopg/docs/cursor.html#cursor.copy_from" rel="nofollow noreferrer"><code>copy_from</code></a> with a  <code>StringIO</code> as input.</p>
<p>Therefore, you could use something like:</p>
<pre><code>try:
    # Python2
    from cStringIO import StringIO 
except ImportError:
    # Python3
    from io import StringIO

def db_insert_spectrum(curs, visual_data, recording_id):
    f = StringIO()
    # visual_data is a 2D array (a nx63 matrix)
    values_list = []
    for rowIndex, rowData in enumerate(visual_data):
        items = []
        for colIndex, colData in enumerate(rowData): 
            value = (rowIndex, colIndex, colData, recording_id)
            items.append('\t'.join(map(str, value))+'\n')
        f.writelines(items)
    f.seek(0)
    cur.copy_from(f, 'spectrums', columns=('row', 'col', 'value', 'recording_id'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't know whether <code>.execute_batch</code> can accept generator, but can u try something like:</p>
<p><code>def db_insert_spectrum(curs, visual_data, recording_id):
    sql = """
        INSERT INTO spectrums (row, col, value, recording_id)
        VALUES %s
    """
    data_gen =  ((rIdx, cIdx, value, recording_id) for rIdx, cData in enumerate(visual_data) 
                                                   for cIdx, value in enumerate(cData))
    psycopg2.extras.execute_batch(curs, sql, data_gen, page_size=1000)
</code>
It might be faster.</p>
</div>
<span class="comment-copy">I was trying to do something similar before I asked this question. I got a different error when I tried implementing it. For your way, the error is <code>psycopg2.DataError: invalid input syntax for integer: "(0, 0, 0, 71)"</code> The row, col, value, and recording_id columns are all ints</span>
<span class="comment-copy">An earlier version of my code used <code>value = [(rowIndex, colIndex, colData, recording_id)]</code>. Instead, remove the brackets, as above. (You might have to refresh your web page.) I think that should fix the error.</span>
<span class="comment-copy">Ahh yes, thanks for that. With that change I'm at the point I was when I tried implementing this. It's giving me the following error: <code>psycopg2.DataError: extra data after last expected column CONTEXT:  COPY spectrums, line 63: "0	62	0	731	0	0	73"</code></span>
<span class="comment-copy">Are you using <code>f.writelines</code>? That too was a mistake on my part -- it lacks the <code>\n</code>s needed to separate lines. Again make sure you've refreshed the web page and try <code>f.write('\n'.join(items))</code> (see above.).</span>
<span class="comment-copy">Yes! Absolutely phenomenal! Thank you so much, it's only taking a 10th of the time now! Thank you so much for your help. I'd upvote the answer (in addition to selecting as answer) but I don't have enough rep...</span>
