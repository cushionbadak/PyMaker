<div class="post-text" itemprop="text">
<p>From Python in a Nutshell</p>
<blockquote>
<p><code>super(cls,obj)</code> returns a <code>super</code>-object of object <code>obj</code> (which must be an instance of class <code>cls</code> or of any subclass of <code>cls</code>), suitable for calling superclass methods.</p>
</blockquote>
<p>From <a href="https://docs.python.org/3.6/library/functions.html#super" rel="nofollow noreferrer">https://docs.python.org/3.6/library/functions.html#super</a></p>
<blockquote>
<p><code>super([type[, object-or-type]])</code> returns <strong>a proxy object</strong> that delegates method calls to a parent or sibling class of <code>type</code>. </p>
</blockquote>
<p><a href="https://stackoverflow.com/questions/44991579/what-is-the-type-of-the-super-object-returned-by-super/44994572?noredirect=1#comment81192334_44994572">A comment by  Martijn Pieters</a> says that the return object of <code>super(cls,obj)</code> is an example of the proxy design pattern.</p>
<p>In Design Pattern by Gamma et al, <a href="https://stackoverflow.com/q/46517113/156458">the proxy design pattern is implemented by inheriting  the class of the subject of proxy</a>. </p>
<p><a href="https://i.stack.imgur.com/OjDM7.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/OjDM7.png"/></a></p>
<p>But I found that <code>super</code> class is inherited only from <code>object</code>, and not from the subject of proxy, which is "a parent or sibling class of <code>type</code>".
So I wonder how  the <code>super</code> class implement the proxy design pattern? By duck typing?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>It just customizes the <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattribute__" rel="nofollow noreferrer">dunder method <code>__getattribute__</code></a>: all attribute retrieval from the <code>super</code> object is customized, and respects the <code>__mro__</code> of the class the super object was created for.</p>
<p>That means: the Python language has no need to actually inherit from a type one is proxing to offer access to its attributes. Attribute access can be fully customized using different mechanisms, that redirect whatever attributes one wants proxied to the original class. Customizing <code>__getattribute__</code> is likely the "stronger" of the attribute access customizations, but there are also <code>__getattr__</code> or using descriptors. </p>
<p>So, answering further - my understanding of "duck typing" is an object which class presents a minimal set of attributes and methods to "look like" another object when it tries to be used like that other object. Under this view, one can say that <code>super</code> does use duck typing, as upon trying to retrieve methods and attributes from the super object, those will be fetched from the proxied type.</p>
<p>However, the <code>super</code> class won't try to mimick the proxied type in it's <code>repr</code> or be instrospectable in the usual ways Python objects are (by using <code>dir</code> or checking the object's <code>__dict__</code>). But since duck typing does not require that either, it just has to work as the original object for the desired purposes, which usually is to fetch and call a method with a hardcoded name. So, yes, "duck typing".</p>
<p>Note that if it was needed, Python customization capabilities would go as far as to allow "super" to return "True" to a call from <code>issubclass</code> on the proxied class. (it does not, because there is no need as noted above).</p>
</div>
<span class="comment-copy">I don't know what edition you're reading, but the no-idea-whether-it's-legal PDF I found on Google doesn't say anything about requiring proxies to be implemented that way. That's just an example implementation.</span>
<span class="comment-copy">Thanks. Can you point me to some implementation of proxy without inheritance?</span>
<span class="comment-copy">Python can implement a proxy through implementing the appropriate magic methods.</span>
<span class="comment-copy"><code>super</code>, obviously. <code>types.MappingProxyType</code>. Probably most proxy objects written in Python.</span>
<span class="comment-copy">It's what Python does well, may as well do more of it.</span>
<span class="comment-copy">Yes. Does "customize"  implement duck typing to mimic the subject?</span>
<span class="comment-copy">(answer expanded to include duck typing considerations)</span>
