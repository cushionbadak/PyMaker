<div class="post-text" itemprop="text">
<p>Numpy, for example, allows multi-dimensional slices:</p>
<pre><code>a[:, 0, 7:9]
</code></pre>
<p>This raises the question: what else is possible? (Imagine the possibilities!)</p>
<p>According to <a href="https://stackoverflow.com/a/1685450/1143274">this answer</a> and some experimentation (see below), if there is a comma, Python builds a tuple of objects, some of which may be slice objects, and passes it (as <code>key</code>) to <code>__getitem__(self, key)</code> of <code>a</code>.</p>
<p>The <a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow noreferrer">documentation for <code>__getitem__(..)</code></a> doesn't specify this behaviour. Is there any official documentation that I missed? In particular, how backwards-compatible is this syntax? (Searching the web for "python extended slice notation" gives <a href="https://docs.python.org/2.3/whatsnew/section-slices.html" rel="nofollow noreferrer">"What's new in Python 2.3"</a>, which doesn't mention it.)</p>
<hr/>
<h2>Experimentation</h2>
<pre><code>&gt;&gt;&gt; class Test(object):
...     def __getitem__(self, x):
...         print repr(x)


&gt;&gt;&gt; t = Test()
</code></pre>
<p>First, things that Python finds recognisable for multi-slicing:</p>
<pre><code>&gt;&gt;&gt; t[1]
1

&gt;&gt;&gt; t['a':,]
(slice('a', None, None),)

&gt;&gt;&gt; t['a':7:('b','c'),]
(slice('a', 7, ('b', 'c')),)

# Seems like it can be arbitrary objects?
&gt;&gt;&gt; t[(t,t):[4,5]]
slice((&lt;__main__.Test object at 0x07D04950&gt;, &lt;__main__.Test object at 0x07D04950&gt;), [4, 5], None)

&gt;&gt;&gt; t[::]
slice(None, None, None)

&gt;&gt;&gt; t[:]
slice(None, None, None)

&gt;&gt;&gt; t[::,1,::,::,:,:,:]
(slice(None, None, None), 1, slice(None, None, None), slice(None, None, None), slice(None, None, None),  slice(None, None, None), slice(None, None, None))

&gt;&gt;&gt; t[...]
Ellipsis

&gt;&gt;&gt; t[... , ...]
(Ellipsis, Ellipsis)

&gt;&gt;&gt; t[  .   .      .    ]
Ellipsis
</code></pre>
<p>Some things that are NOT allowed (SyntaxError):</p>
<pre><code># Semicolon delimiter
t['a':5; 'b':7:-7]
# Slice within a slice
t['a':7:(9:5),]
# Two trailing commas
t[5,,]
# Isolated comma
t[,]
# Leading comma
t[,5]
# Empty string
t[]
# Triple colon
t[:::]
# Ellipses as part of a slice
t[1:...]
t[1:2:...]
# Ellipses inside no-op parens:
t[(...)]
# Any non-zero and non-three number of dots:
t[.]
t[..]
t[ .  .  .  . ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>Anything</em> is possible, as long as it is a valid Python expression. The object produced by the expression between <code>[...]</code> is passed to the <code>__getitem__</code> method. That's it.</p>
<p>Commas produce a tuple, <code>:</code> colons in an expression produce a <code>slice()</code> object. Beyond that, use whatever you want.</p>
<p>That's because the grammar allows for <em>any <code>expression_list</code></em> in the notation. See the <a href="https://docs.python.org/3/reference/expressions.html#subscriptions" rel="nofollow noreferrer">reference documentation</a>:</p>
<blockquote>
<pre><code>subscription ::=  primary "[" expression_list "]"
</code></pre>
</blockquote>
<p>Slicing is further specified in the <a href="https://docs.python.org/3/reference/expressions.html#slicings" rel="nofollow noreferrer"><em>Slicings</em> section</a>:</p>
<blockquote>
<pre><code>slicing      ::=  primary "[" slice_list "]"
slice_list   ::=  slice_item ("," slice_item)* [","]
slice_item   ::=  expression | proper_slice
proper_slice ::=  [lower_bound] ":" [upper_bound] [ ":" [stride] ]
lower_bound  ::=  expression
upper_bound  ::=  expression
stride       ::=  expression
</code></pre>
</blockquote>
<p>So again arbitrary <code>expression</code>s are allowed, and <code>:</code> triggers the <code>proper_slice</code> grammar rule.</p>
<p>Note that the <code>lower_bound</code>, <code>upper_bound</code> and <code>stride</code> expression results are used to construct a <code>slice()</code> object, which can only handle <em>integer values</em>. Anything that can't be converted to an integer will result in a <code>TypeError</code> being raised. That's not the same thing as a syntax error; <code>t[1:...]</code> is syntactically just fine, but <code>...</code> is not convertable to an integer so you get a runtime <code>TypeError</code> exception. Your two examples using non-integer slice values are not possible on Python versions 2.4 and up at the very least.</p>
<p>Your actual syntax errors all stem from invalid expressions. Apart from the <code>:</code> <code>proper_slice</code> notation, if you can't put the part between <code>[...]</code> on the right-hand side of an assignment, you can't use it in a slice either.</p>
<p>For example, <code>;</code> can only be used to put multiple <a href="https://docs.python.org/3/reference/simple_stmts.html" rel="nofollow noreferrer">simple statements</a> on a single logical line. Statements can contain expressions, but expressions can never contain statements, excluding <code>;</code> from expressions. <code>(9:5),</code> is not a valid expression (nowhere else in Python could you use a <code>:</code> in parentheses, the <a href="https://docs.python.org/3/reference/expressions.html#parenthesized-forms" rel="nofollow noreferrer"><code>parenth_form</code> rule</a> doesn't allow for any such options).</p>
<p>The <a href="https://docs.python.org/2/reference/expressions.html#slicings" rel="nofollow noreferrer">Python 2 grammar for slicings</a> is a little more elaborate in that <code>...</code> is a specific notation in the grammar there, and you can't actually use the <code>...</code> outside of slicings (in Python 3 you can use <code>...</code> anywhere an expression is valid), which is why <code>t[(...)]</code> is a syntax error in Python 2 but not in Python 3.</p>
</div>
<span class="comment-copy">What version of Python are you using that allows <code>t['a':7:('b','c'),]</code> to work? That's a bug, I tested Python 2.4 and up and they all reject the lower bound and stride by raising a <code>TypeError</code> exception. Same for <code>t[(t,t):[4,5]]</code>.  I no longer have a Python 2.3 build.</span>
<span class="comment-copy">@MartijnPieters <code>2.7.12 (v2.7.12:d33e0cf91556, Jun 27 2016, 15:19:22) [MSC v.1500 32 bit (Intel)</code>, I think that's a standard install from the official Python website. (Also, just checked that it also behaves that way when used directly in the terminal â€” it does.)</span>
