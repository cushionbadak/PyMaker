<div class="post-text" itemprop="text">
<p>Can anyone help me with this function? I have no clue to write the code and what I wrote in the function body is wrong.</p>
<pre><code>def get_quantities(table_to_foods: Dict[str, List[str]]) -&gt; Dict[str, int]:

    """The table_to_foods dict has table names as keys (e.g., 't1', 't2', and
    so on) and each value is a list of foods ordered for that table.

    Return a dictionary where each key is a food from table_to_foods and each
    value is the quantity of that food that was ordered.

    &gt;&gt;&gt; get_quantities({'t1': ['Vegetarian stew', 'Poutine', 'Vegetarian stew'],
    't3': ['Steak pie', 'Poutine', 'Vegetarian stew'], 't4': ['Steak pie', 'Steak pie']})
    {'Vegetarian stew': 3, 'Poutine': 2, 'Steak pie': 3}    
    """

    food_to_quantity = {}
    for t in table_to_foods:
        for i in table_to_foods[t]:
            if i in table_to_foods[t]:
                food_to_quantity[i] = food_to_quantity[i] + 1

    return food_to_quantity
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just another way of doing in case you like using <a href="https://docs.python.org/2/library/itertools.html" rel="nofollow noreferrer"><code>itertools.chain</code></a> and <a href="https://docs.python.org/2/library/collections.html" rel="nofollow noreferrer"><code>collections.Counter</code></a>:</p>
<pre><code>from itertools import chain
from collections import Counter

dict(Counter(chain.from_iterable(foods.values())))
#or Simply
dict(Counter(chain(*foods.values())))

#Output:
#{'apple': 3, 'banana': 4, 'grapes': 1, 'orange': 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A common way to count items without a library is to use python <a href="https://www.tutorialspoint.com/python/dictionary_get.htm" rel="nofollow noreferrer"><code>get()</code></a> function</p>
<pre><code>foods = {
    't1': ['banana', 'apple', 'banana'],
    't2': ['orange', 'apple', 'banana'],
    't3': ['apple', 'grapes', 'banana']
    }

def get_quantities(foodLists):
    totals = {}
    for foodList in foodLists.values():
        for food in foodList:
            totals[food] = totals.get(food, 0) + 1
    return totals

print(get_quantities(foods))
</code></pre>
<p>Which prints:</p>
<p><code>{'banana': 4, 'apple': 3, 'orange': 1, 'grapes': 1}</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code>s</a></p>
<pre><code>from collections import Counter

def get_quantities(table_to_foods: Dict[str, List[str]]) -&gt; Dict[str, int]:
     return dict(Counter(x for v in table_to_foods.values() for x in v))
</code></pre>
<p>You probably don't have to make a <code>dict</code> from the <code>Counter</code> (<code>Counter</code> is a subclass of <code>dict</code>), but I do it here so your types are identical</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>def get_quantities(table_to_foods):
    food_to_quantity = {}
    for table in table_to_foods.values():
        for food in table:
            food_to_quantity[food] = food_to_quantity.get(food, 0) + 1
    return food_to_quantity
</code></pre>
<p>You can use .values() to get the values in a dictionary and then iterate through each item. If the food is in the dictionary then add 1 to it's value and if not then add the food as a new item in the dictionary.</p>
<pre><code>get_quantities({
    't1': ['Vegetarian stew', 'Poutine', 'Vegetarian stew'],
    't2': ['Steak pie', 'Poutine', 'Vegetarian stew'],
    't3': ['Steak pie', 'Steak pie']
    })
</code></pre>
<p>should output the following if printed:</p>
<pre><code>{'Poutine': 2, 'Steak pie': 3, 'Vegetarian stew': 3}
</code></pre>
<p>More about dictionaries:
<a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html#dictionaries</a></p>
</div>
<span class="comment-copy">This is almost certainly the most efficient solution (especially on modern Python 3, where <code>Counter</code> uses a C accelerator to aid in counting input iterables, so using <code>Counter</code>+<code>chain</code> means the entire consumption of the input is pushed to the C layer on CPython).</span>
<span class="comment-copy">If you don't use <code>k</code>, you might as well use the <code>foodLists.values</code> view instead of <code>items</code></span>
<span class="comment-copy">what is k mean in that code line?</span>
<span class="comment-copy">@guanyuma: It's the key from the <code>dict</code>; you don't use it though, which is why Patrick suggested removing it (and iterating only the <code>values</code>, not the key/value pairs from <code>items</code>).</span>
<span class="comment-copy">Thank you for the helping. Since this is my fist computer science course, and I didn't learn the counter method yet. Do you think you have a way to solve the function without the counter? Also my prof want me to return food_to_quantity. I am sorry if I ask too much.</span>
<span class="comment-copy">Using <code>sum</code> this way is expensive, as it makes many temporary <code>Counter</code> objects only to discard them after the next step (<code>sum</code> special cases [rejects] <code>str</code> to prevent the same inefficiency, but can't recognize it in the general case). Redo it as <code>dict(Counter(x for v in table_to_foods.values() for x in v))</code> and you'll dramatically reduce the runtime for even moderately sized inputs (even for a tiny <code>dict</code> of three keys with three values each, the time using <code>sum</code> inappropriately is 5x that of using a single <code>Counter</code> with a genexpr input, and it only gets worse from there as inputs enlarge).</span>
<span class="comment-copy">Although I don't know the method @ShadowRanger. Thank you for helping me.</span>
<span class="comment-copy">Thank you for the helping it is working. in the code 'if food in food_to_quantity'. is this how I need to assign the key into a empty dic?</span>
<span class="comment-copy">'If food in food_to_quantity' checks if the food is in the dictionary already, if it is then it adds 1 to the current value of that food. If it is not then the else statement assigns the new key with the value of 1. Tho you can also use .get() as stated by someone above</span>
<span class="comment-copy">I see, thank you for the helping.</span>
