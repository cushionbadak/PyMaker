<div class="post-text" itemprop="text">
<p>I have just started with Python, although I have been programming in other languages over the past 30 years. I wanted to keep my first application simple, so I started out with a little home automation project hosted on a Raspberry Pi.</p>
<p>I got my code to work fine (controlling a valve, reading a flow sensor and showing some data on a display), but when I wanted to add some web interactivity it came to a sudden halt.
Most articles I have found on the subject suggest to use the Flask framework to compose dynamic web pages. I have tried, and understood, the basics of Flask, but I just can't get around the issue that Flask is blocking once I call the "app.run" function. The rest of my python code waits for Flask to return, which never happens. I.e. no more water flow measurement, valve motor steering or display updating.</p>
<p>So, my basic question would be: What tool should I use in order to serve a simple dynamic web page (with very low load, like 1 request / week), in parallel to my applications main tasks (GPIO/Pulse counting)? All this in the resource constrained environment of a Raspberry Pi (3).
If you still suggest Flask (because it seems very close to target), how should I arrange my code to keep handling the real-world events, such as mentioned above? </p>
<p>(This last part might be tough answering without seeing the actual code, but maybe it's possible answering it in a "generic" way? Or pointing to existing examples that I might have missed while searching.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You're on the right track with multithreading. If your monitoring code runs in a loop, you could define a function like</p>
<pre><code>def monitoring_loop():
    while True:
        # do the monitoring
</code></pre>
<p>Then, before you call <code>app.run()</code>, start a thread that runs that function:</p>
<pre><code>import threading
from wherever import monitoring_loop

monitoring_thread = threading.Thread(target = monitoring_loop)
monitoring_thread.start()

# app.run() and whatever else you want to do
</code></pre>
<p>Don't <code>join</code> the thread - you want it to keep running in parallel to your Flask app. If you joined it, it would block the main execution thread until it finished, which would be never, since it's running a <code>while True</code> loop.</p>
<p>To communicate between the monitoring thread and the rest of the program, you could use a <a href="https://docs.python.org/3/library/queue.html#module-queue" rel="nofollow noreferrer">queue</a> to pass messages in a thread-safe way between them.</p>
</div>
<div class="post-text" itemprop="text">
<p>The way I would probably handle this is to split your program into two distinct separately running programs.</p>
<p>One program handles the GPIO monitoring and communication, and the other program is your small Flask server.  Since they run as separate processes, they won't block each other.</p>
<p>You can have the two processes communicate through a small database. The GIPO interface can periodically record flow measurements or other relevant data to a table in the database. It can also monitor another table in the database that might serve as a queue for requests.</p>
<p>Your Flask instance can query that same database to get the current statistics to return to the user, and can submit entries to the requests queue based on user input.  (If the GIPO process updates that requests queue with the current status, the Flask process can report that back out.)</p>
<p>And as far as what kind of database to use on a little Raspberry Pi, consider <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer">sqlite3</a> which is a very small, lightweight file-based database well supported as a standard library in Python.  (It doesn't require running a full "database server" process.)</p>
<p>Good luck with your project, it sounds like fun!</p>
</div>
<span class="comment-copy">Wow! A to-the-point answer within 10 minutes. You just have to love StackOverflow! Could I be so rude as to ask for a pointer to some working code that uses this technique? (Just to understand it in a larger context).</span>
<span class="comment-copy">I'm afraid that I don't have any concise examples handy personally, but the <a href="https://pymotw.com/3/threading/" rel="nofollow noreferrer">PyMOTW 3 post</a> post on it looks like a good introduction with short examples.</span>
