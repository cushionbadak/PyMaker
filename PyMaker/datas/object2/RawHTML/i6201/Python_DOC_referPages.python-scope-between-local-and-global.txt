<div class="post-text" itemprop="text">
<p>I have two samples:</p>
<p>One:</p>
<pre><code>import math

def my_function():
    print(math.pi)
    math.pi = 3
    print(math.pi)

my_function()
</code></pre>
<p>Output:</p>
<pre><code>3.141592653589793
3
</code></pre>
<p>Two:</p>
<pre><code>a = 0

def my_function():
    print(a)
    a = 3
    print(a)

my_function()
</code></pre>
<p>Output:</p>
<p><code>UnboundLocalError: local variable 'a' referenced before assignment</code></p>
<p>So what is the difference between them? I thought both <code>math.pi</code> and <code>a</code> were global in this case and it should produce <code>UnboundLocalError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you do variable assignment within function the global variable would be ignored and won't be accessible within function execution, in sample with <code>math</code> lib you do not override name <code>math</code> itself, that's why it works. Snipped below would give you same error with math lib:</p>
<pre><code>import math

def my_function():
  print(math.pi)
  math = 1

my_function()
</code></pre>
<p>You can use statement <a href="https://docs.python.org/2.0/ref/global.html" rel="nofollow noreferrer">global</a> before accessing variable, but if you will do any assignment later you will override global variable, <strong>so it's better to ALWAYS  avoid doing that</strong>.</p>
<pre><code>import math


def my_function():
  global math
  print(math.pi)
  math = 1

print(math) # -&gt; &lt;module 'math' from ...    
my_function() # -&gt; 3.14159265359
print(math) # -&gt; 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the first function, the variable is <code>math</code>, not <code>math.pi</code>. Since you're not assigning to <code>math</code>, it doesn't become a local variable. Assigning to an attribute of a variable is not the same thing as assigning to the variable itself.</p>
<p>If you changed the function to</p>
<pre><code>def my_function():
    print(math.pi)
    math = 3
    print(math.pi)
</code></pre>
<p>you would get the same kind of error as in the second function:</p>
<blockquote>
<p>UnboundLocalError: local variable 'math' referenced before assignment</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>This has been answered a few times on SO before.</p>
<p>A variable is local to a function if there's a statement assigning it inside that function.
In your instance <code>a = 3</code> defines <code>a</code> as local variable inside of your function. The first <code>print(a)</code> tries to access it, but it's not assigned a value yet.</p>
<p>That's why you see:</p>
<pre><code>UnboundLocalError: local variable 'a' referenced before assignment.
</code></pre>
<p>The global instance created by <code>a = 0</code> plays no role here.</p>
</div>
<span class="comment-copy">Why do you think the first case should produce an error? Do you think <code>math.pi</code> is local to your function?</span>
<span class="comment-copy"><code>math.pi</code> isn't a global variable. <code>math</code> is a global variable. <code>math.pi</code> is an attribute.</span>
<span class="comment-copy">global variables need to be explicitly declared in a function using e.g. <code>global a</code> in your second case, see e.g. <a href="https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python" rel="nofollow noreferrer">docs.python.org/3/faq/â€¦</a></span>
<span class="comment-copy">(Or at least, syntactically speaking, it's not a global variable. There are a few senses in which it would be considered a global variable, but not in this sense.)</span>
<span class="comment-copy">So you both refer this as global attribute of math module, right? this mean <code>print(math.pi)</code> and <code>math.pi = 3</code> use the same <code>pi</code> attr from <code>math</code>. I first thought <code>math.pi</code> is a local var in my_fuction that <code>.</code> should be a refer to <code>math</code> instead produce a local var. Thanks.</span>
<span class="comment-copy">Woa, that's too much, <code>math</code> in <code>import math</code> is a var also? I didn't know that.</span>
<span class="comment-copy">@TuyenPham kind of, <code>math</code> is the the global reference to the module object, so you can apply <code>global</code> to modify it within function, however you will loose your reference to your math module object stored in memory</span>
<span class="comment-copy">If we add <code>print(math.pi)</code> at the end of your code, <code>AttributeError</code> will occur - that is expected. <code>math</code> 's memory location is destroyed completely because of <code>global</code> keyword.</span>
<span class="comment-copy">It produces empty output with your code. What is different assigning between var itself and an attr of a var?</span>
<span class="comment-copy">The variable contains a reference to an object. The attribute is part of the object.</span>
<span class="comment-copy">I don't know why you get empty output. Did you call the function?</span>
<span class="comment-copy">Let's make it more specific about <code>scope</code>. In this case, because of <code>math.pi</code> that refer to math module - this is global and look for its attr - global too, So actually <code>math.pi</code> is a global reference that implicitly no <code>global</code> keyword there. And with Python there no kind of definition happens in local that has appearance <code>math.pi</code> because of <code>.</code> here is a reference operator in python. Do I understand right?</span>
<span class="comment-copy">No, that's not correct. As you can see in my modified function, it becomes a local variable if you assign to it, and then you get an error when you try to access <code>math.pi</code>.</span>
