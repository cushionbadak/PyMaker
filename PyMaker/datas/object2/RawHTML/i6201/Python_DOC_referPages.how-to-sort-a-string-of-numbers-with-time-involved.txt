<div class="post-text" itemprop="text">
<p>What I have now is:</p>
<pre><code>a=["2013-11-20,29,0,0","2013-11-20,3,0,2"],
</code></pre>
<p>where <code>a[1]</code> is the <code>a[1]</code>th 5 minute in a day, <code>a[3]</code> and <code>a[4]</code> are number of counts. </p>
<p>I want to sort this by the first two elements.
But when I use <code>sort</code>, <code>a[0]</code> always comes first.
In fact, I want <code>a[1]</code> to come first. How should I do this?
I have tried <code>key</code> argument in <code>sort</code>. For example, <code>a.sort(key=int)</code>, error occurred saying that invalid literal for int() with base 10: '2013-11-20,29,0,0'  </p>
</div>
<div class="post-text" itemprop="text">
<p>Your issue is, that each item in your list is a string. If you sort a string, each character at each position will be compared with eachother. In your example all characters are the same until after the first comma. After the comma, the next characters are a '2' and a '3'. As '3'&gt;'2', the sorting is not as you wish. I assume you want 29 be &gt; 3.</p>
<p>In this particular case, you could just reverse the sorting</p>
<pre><code>a.sort()
a.reverse()
</code></pre>
<p>But as you probably have a list with more items, this will not work... The only solution I see is to split each item in your list at the comma ','. Then convert the items which should be considered as integers to int. For example you can do it like this:</p>
<pre><code>a=["2013-11-20,29,0,0","2013-11-20,3,0,2"]

a_temp=[]
for item in a:
    splitstr = item.split(',')
    i=0
    temp = []
    for elem in splitstr:
        if i&gt;0:
            temp_i=int(elem)
        else:
            temp_i=elem
        temp.append(temp_i)    
        i+=1

    a_temp.append(temp)
</code></pre>
<p>Your temporary list looks now like this:</p>
<p>[['2013-11-20', 29, 0, 0], ['2013-11-20', 3, 0, 2]]</p>
<p>Then sort it by the position as you wish. This you can do for example like this:</p>
<pre><code>from operator import itemgetter

a_temp_sorted=sorted(a_temp, key=itemgetter(0,1,2,3))
</code></pre>
<p>By using the itemgetter you can define in what order you want to sort. Here it is sorted at first by the element 0, then 1, etc... but you can change the order. a_temp_sorted now looks like:</p>
<p>[['2013-11-20', 3, 0, 2], ['2013-11-20', 29, 0, 0]]</p>
<p>Now you can convert your result again to a string. This you can do like this:</p>
<pre><code>a_sorted=[]
for item in a_temp_sorted:
    newstring=''
    i=0
    for elem in item:
        if i&gt;0:
            temp_i=str(elem)
            newstring+=','+temp_i
        else:
            newstring+=elem
        i=1
    a_sorted.append(newstring)
</code></pre>
<p>a_sorted is now your sorted version of your source a. It now looks like this:</p>
<p>['2013-11-20,3,0,2', '2013-11-20,29,0,0']</p>
</div>
<div class="post-text" itemprop="text">
<p>Make a key function that returns a tuple of values you want to sort on.</p>
<pre><code>import datetime
a=["2013-11-20,29,0,0","2013-11-20,3,0,2"]
def f(thing):
    #separate the values
    a,b,c,d = thing.strip().split(',')
    # turn one into a datetime.date
    y, m, d = map(int, a.split('-'))
    a = datetime.date(y, m, d)
    # turn the others into ints
    b,c,d = map(int, (b,c,d))
    # return the values in order of precedence
    return (a,b,c,d)
</code></pre>
<p>Then use it to sort the list</p>
<pre><code>a.sort(key = f)
</code></pre>
</div>
<span class="comment-copy">What kind of time is <code>29, 0, 0</code>?</span>
<span class="comment-copy">Welcome to SO. Please take the time to read <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and the links it contains. <a href="https://docs.python.org/3/howto/sorting.html" rel="nofollow noreferrer">Sorting HOW TO</a></span>
<span class="comment-copy">Is there a reason to keep them as strings rather than utilizing a <a href="https://docs.python.org/3/library/datetime.html#time-objects" rel="nofollow noreferrer"><code>time</code> object</a>?</span>
<span class="comment-copy">"<i>I have tried <code>key</code> argument in <code>sort</code></i> - please share your code, and what happens instead of what you expect. It's difficult to help debug what we cannot see.</span>
<span class="comment-copy">where is <code>a[3]</code> and <code>a[4]</code> ?</span>
<span class="comment-copy">When I tried to write a_sorted into a txt file, it turned out that the tail portion of data is missing. However, when I checked a_sorted, it contained all the data. How to avoid this? Codes are as follows:  file=open("count_5min_station_101_sorted.txt","w")     for elem in a_sorted:     file.write(str(elem)+"\n")</span>
<span class="comment-copy">What do you exactly mean with tail portion? When I used your code together with a following <b>file.close()</b> it worked for me. In general it is better to use a <b>with</b> statement when opening files. E.g.: with open("count_5min_station_101_sorted.txt","w") as file:     for elem in a_sorted: file.write(str(elem)+"\n")     file.close()</span>
