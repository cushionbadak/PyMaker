<div class="post-text" itemprop="text">
<p>In Python 3.6.1, I've tried wrapping a tempfile.SpooledTemporaryFile in an io.TextIOWrapper:</p>
<pre><code>with tempfile.SpooledTemporaryFile() as tfh:
    do_some_download(tfh)
    tfh.seek(0)
    wrapper = io.TextIOWrapper(tfh, encoding='utf-8')
    yield from do_some_text_formatting(wrapper)
</code></pre>
<p>The line <code>wrapper = io.TextIOWrapper(tfh, encoding='utf-8')</code> gives me an error:</p>
<pre><code>AttributeError: 'SpooledTemporaryFile' object has no attribute 'readable'
</code></pre>
<p>If I create a simple class like this, I can bypass the error (I get similar errors for <code>writable</code> and <code>seekable</code>):</p>
<pre><code>class MySpooledTempfile(tempfile.SpooledTemporaryFile):                                                                                
    @property                                                                                                                          
    def readable(self):                                                                                                                
        return self._file.readable                                                                                                     

    @property                                                                                                                          
    def writable(self):                                                                                                                
        return self._file.writable                                                                                                     

    @property                                                                                                                          
    def seekable(self):                                                                                                                
        return self._file.seekable 
</code></pre>
<p>Is there a good reason why tempfile.SpooledTemporaryFile doesn't already have these attributes?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>SpooledTemporaryFile</code> actually uses 2 different <code>_file</code> implementations under the hood - initially an <code>io</code> Buffer (<code>StringIO</code> or <code>BytesIO</code>), until it rolls over and creates a "file-like object" via <code>tempfile.TemporaryFile()</code> (for example, when <code>max_size</code> is exceeded).</p>
<p><code>io.TextIOWrapper</code> requires a <code>BufferedIOBase</code> base class/interface, which is provided by <code>io.StringIO</code> and <code>io.BytesIO</code>, but not necessarily by the object returned by <code>TemporaryFile()</code> (though in my testing on OSX, <code>TemporaryFile()</code> returned an <code>_io.BufferedRandom</code> object, which had the desired interface, my theory is this may depend on platform).</p>
<p>So, I would expect your <code>MySpooledTempfile</code> wrapper to possibly fail on some platforms after rollover.</p>
</div>
<span class="comment-copy">That's interesting, thanks for the feedback Mike. It does look like there's a difference between posix and non-posix (incl. cygwin) systems. On non-posix systems, <code>TemporaryFile</code> is actually an alias to <code>NamedTemporaryFile</code> (<a href="https://github.com/python/cpython/blob/a6a4dc816d68df04a7d592e0b6af8c7ecc4d4344/Lib/tempfile.py#L556-L559" rel="nofollow noreferrer">github.com/python/cpython/blob/…</a>):  When I test on a Windows system (<code>os.name == 'nt'</code>), however, I still see that the object returned by <code>TemporaryFile()</code> has <code>readable</code>, <code>writable</code>, and <code>seekable</code> attributes.</span>
<span class="comment-copy">It seems that TemporaryFile/SpooledTemporaryFile only guarantee a file-like object, and that object might happen to also implement the <code>BufferedIOBase</code> interface.</span>
<span class="comment-copy">...But is not guaranteed by the standard. (This is just what I get from reading code and docs, so hopefully someone more informed can set the record straight.)</span>
<span class="comment-copy">The documentation around file-like objects is certainly vague: <a href="https://docs.python.org/3/glossary.html#term-file-object" rel="nofollow noreferrer">docs.python.org/3/glossary.html#term-file-object</a>. The readable/writable/seekable attributes are defined at the top of the IO stream class hierarchy in <code>IOBase</code>: <a href="https://docs.python.org/3/library/io.html#class-hierarchy" rel="nofollow noreferrer">docs.python.org/3/library/io.html#class-hierarchy</a>. Also interesting to note that <code>TemporaryFile</code> has is given type <code>IO</code> in mypy: <a href="https://github.com/python/mypy/blob/master/test-data/stdlib-samples/3.2/tempfile.py" rel="nofollow noreferrer">github.com/python/mypy/blob/master/test-data/stdlib-samples/3.2/…</a>. You're right that the tempfile docs just mention a <code>file-like object</code> which doesn't seem to guarantee anything beyond read/write.</span>
<span class="comment-copy">This <i>seems</i> like it may be a bug, so I've logged it in the python issue tracker as 32600.   Workarounds that patch the necessary properties from IOBase seem to make everything work, and seems like they should be there regardless of whether the object is an IO buffer or an actual (temporary) file.</span>
