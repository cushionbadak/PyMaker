<div class="post-text" itemprop="text">
<p>I am trying to bulk insert documents in MongoDB using python library <code>pymongo</code>.</p>
<pre><code>import pymongo
def tryManyInsert():
    p = {'x' : 1, 'y' : True, 'z': None}
    mongoColl = pymongo.MongoClient('localhost', 27017)['test']['multiIn']
    mongoColl.insert_many([p for i in range(10)])
tryManyInsert()
</code></pre>
<p>But I keep failing due to <code>BulkWriteError</code>. </p>
<pre><code>Traceback (most recent call last):
    File "/prog_path/testMongoCon.py", line 9, in &lt;module&gt;
    tryManyInsert();
    File "/prog_path/testMongoCon.py", line 7, in tryManyInsert
mongoColl.insert_many([p for i in range(10)])
    File "/myenv_path/lib/python3.6/site-packages/pymongo/collection.py", line 724, in insert_many
blk.execute(self.write_concern.document)
    File "/myenv_path/lib/python3.6/site-packages/pymongo/bulk.py", line 493, in execute
return self.execute_command(sock_info, generator, write_concern)
    File "/myenv_path/lib/python3.6/site-packages/pymongo/bulk.py", line 331, in execute_command
raise BulkWriteError(full_result)
    pymongo.errors.BulkWriteError: batch op errors occurred
</code></pre>
<p>I am trying to insert only 10 docs sequentially without <code>_id</code> so conditions in this <a href="https://stackoverflow.com/questions/43073956/pymongo-errors-bulkwriteerror-batch-op-errors-occurred-mongodb-3-4-2-pymongo">answer</a> / <a href="https://groups.google.com/d/msg/mongodb-user/xaddTC01FCk/LMTCQEarAgAJ" rel="nofollow noreferrer">discussion</a> doesn't apply here. Similar <a href="https://stackoverflow.com/questions/43422024/how-to-insert-data-into-the-mongodb-database-in-bulk-using-python">question</a> has no answer.  </p>
<p>I have tried <code>pymongo 3.4</code> and <code>pymongo 3.5.1</code>, both give the same error. I am on <code>python3.6</code>, <code>mongodb 3.2.10</code>. 
What am I doing wrong here?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is still referring to <code>p</code> as being the same thing for each array member. You want a <a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer"><code>copy()</code></a> of <code>p</code> for each array member:</p>
<pre><code>import pymongo
from copy import copy
def tryManyInsert():
    p = {'x' : 1, 'y' : True, 'z': None}
    mongoColl = pymongo.MongoClient('localhost', 27017)['test']['multiIn']
    mongoColl.insert_many([copy(p) for i in range(10)])
tryManyInsert()
</code></pre>
<p>Or even simply:</p>
<pre><code>    mongoColl.insert_many([{ 'x': 1, 'y': True, 'z': None } for i in range(10)])
</code></pre>
<p>Unless you do that the <code>_id</code> only gets assigned <strong>once</strong> and you are simply repeating "the same document" with the same <code>_id</code> in the argument to <code>insert_many()</code>. Hence the error for a duplicate key.</p>
<p>As a quick demonstration:</p>
<pre><code>from bson import ObjectId

p = { 'a': 1 }

def addId(obj):
  obj['_id'] = ObjectId()
  return obj

docs = map(addId,[p for i in range(2)])
print docs
</code></pre>
<p>Gives you:</p>
<pre><code>[
  {'a': 1, '_id': ObjectId('59fbc4a16cb6b30bdb3de0fd')}, 
  {'a': 1, '_id': ObjectId('59fbc4a16cb6b30bdb3de0fd')}
]
</code></pre>
<p>Or more succinctly:</p>
<pre><code>p = { 'a': 1 }

def addKey(x):
  x[0]['b'] = x[1]
  return x[0]

docs = map(addKey,[[p,i] for i,p in enumerate([p for i in range(3)])])
print docs
</code></pre>
<p>Gives:</p>
<pre><code>[{'a': 1, 'b': 2}, {'a': 1, 'b': 2}, {'a': 1, 'b': 2}]
</code></pre>
<p>Which clearly demonstrates the index value passed overwriting the same value which was passed in.</p>
<p>But using <a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer"><code>copy()</code></a> to take a copy of the value:</p>
<pre><code>from bson import ObjectId

p = { 'a': 1 }

def addId(obj):
  obj['_id'] = ObjectId()
  return obj

docs = map(addId,[copy(p) for i in range(2)])
print docs
</code></pre>
<p>Gives you:</p>
<pre><code>[
  {'a': 1, '_id': ObjectId('59fbc5466cb6b30be4d0fc00')},
  {'a': 1, '_id': ObjectId('59fbc5466cb6b30be4d0fc01')}
]
</code></pre>
<p>Or our base demonstration:</p>
<pre><code>p = { 'a': 1 }

def addKey(x):
  x[0]['b'] = x[1]
  return x[0]

docs = map(addKey,[[p,i] for i,p in enumerate([copy(p) for i in range(3)])])
print docs
</code></pre>
<p>Returns:</p>
<pre><code>[{'a': 1, 'b': 0}, {'a': 1, 'b': 1}, {'a': 1, 'b': 2}]
</code></pre>
<p>So this is basically how python works. If you don't actually deliberately assign to a new value, then all you are doing is returning the same referenced value and simply updating each referenced value in the loop, rather than producing a "new one".</p>
</div>
<span class="comment-copy">Yes, thank you for the explanation. I should have read the <a href="https://api.mongodb.com/python/3.5.1/tutorial.html" rel="nofollow noreferrer">docs</a> more carefully which stated <code>When a document is inserted a special key, "_id", is automatically added if the document doesnâ€™t already contain an "_id" key.</code></span>
<span class="comment-copy">@parthasarathy Well that is part of it, however the real point here is how python handles object assignment. So the key difference here is a "copy" as opposed to the "same reference" being mapped into the array.</span>
