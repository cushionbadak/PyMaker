<div class="post-text" itemprop="text">
<p>I'm a little confused on how to unescape characters in python. I am parsing some HTML using BeautifulSoup, and when I retrieve the text content it looks like this: </p>
<pre><code>\u00a0\n\n\n\r\nState-of-the-art security and 100% uptime SLA.\u00a0\r\n\n\n\r\nOutstanding support
</code></pre>
<p>I'd like for it to look like this:</p>
<pre><code>State-of-the-art security and 100% uptime SLA. Outstanding support
</code></pre>
<p>Here is my code below:</p>
<pre><code>    self.__page = requests.get(url)
    self.__soup = BeautifulSoup(self.__page.content, "lxml")
    self.__page_cleaned = self.__removeTags(self.__page.content) #remove script and style tags
    self.__tree = html.fromstring(self.__page_cleaned) #contains the page html in a tree structure
    page_data = {}
    page_data["content"] =  self.__tree.text_content()
</code></pre>
<p>How do I remove those encoded backslashed characters? I've looked everywhere and nothing has worked for me.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use regular expressions:</p>
<pre><code>import re

s = '\u00a0\n\n\n\r\nState-of-the-art security and 100% uptime SLA.\u00a0\r\n\n\n\r\nOutstanding support'
s = ' '.join(re.findall(r"[\w%\-.']+", s))

print(s) #output: State-of-the-art security and 100% uptime SLA. Outstanding support
</code></pre>
<p><a href="https://docs.python.org/2/library/re.html#re.findall" rel="nofollow noreferrer">re.findall("exp", s)</a> returns a list of all substrings of s which match the pattern "exp". In the case of "[\w]+" all combinations of letters or numbers (no hex string like "\u00a0"):</p>
<pre><code>['State', 'of', 'the', 'art', 'security', 'and', '100', 'uptime', 'SLA', 'Outstanding', 'support'] 
</code></pre>
<p>You can include characters by adding them to the expression like so:</p>
<pre><code>re.findall(r"[\w%.-']+", s)    # added "%", "." and "-" ("-"needs to be escaped by "\")
</code></pre>
<p>' '.join(s) returns a string of all elements seperated by the string in the quotes (in this case a space).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can convert those escape sequences to proper text using the <code>codecs</code> module.</p>
<pre><code>import codecs

s = r'\u00a0\n\n\n\r\nState-of-the-art security and 100% uptime SLA.\u00a0\r\n\n\n\r\nOutstanding support'

# Convert the escape sequences
z = codecs.decode(s, 'unicode-escape')
print(z)
print('- ' * 20)

# Remove the extra whitespace
print(' '.join(z.split()))       
</code></pre>
<p><strong>output</strong></p>
<pre><code>    [several blank lines here]
 



State-of-the-art security and 100% uptime SLA. 



Outstanding support
- - - - - - - - - - - - - - - - - - - - 
State-of-the-art security and 100% uptime SLA. Outstanding support
</code></pre>
<p>The <code>codecs.decode(s, 'unicode-escape')</code> function is quite versatile. It can handle simple backslash escapes, like those newline and carriage return sequences (<code>\n</code> and <code>\r</code>), but its main strength is handling Unicode escape sequences, like the <code>\u00a0</code>, which is just a nonbreak space char. But if your data had other Unicode escapes in it, like those for foreign alphabetic chars or emojis, it would handle them too.</p>
<hr/>
<p>As Evpok mentions in a comment, this <em>won't</em> work if the text string contains actual Unicode characters as well as Unicode <code>\u</code> or <code>\U</code> escape sequences.</p>
<p>From the <a href="https://docs.python.org/3/library/codecs.html#text-encodings" rel="nofollow noreferrer">codecs docs</a>:</p>
<blockquote>
<p><strong>unicode_escape</strong></p>
<p>Encoding suitable as the contents of a Unicode literal in
  ASCII-encoded Python source code, except that quotes are not escaped.
  Decodes from Latin-1 source code. Beware that Python source code
  actually uses UTF-8 by default.</p>
</blockquote>
<p>Also see the docs for <a href="https://docs.python.org/3/library/codecs.html#codecs.decode" rel="nofollow noreferrer"><code>codecs.decode</code></a>.</p>
</div>
<span class="comment-copy">how do you know that the content looks like this? do you print it or save it to a file or?</span>
<span class="comment-copy">I do both and it comes out like that</span>
<span class="comment-copy">Is that what you get when you do <code>print(page_data["content"])</code>? Are you using Python 2 or Python 3?</span>
<span class="comment-copy">Yes, and I'm using python 3</span>
<span class="comment-copy">Can you please do <code>print(repr(page_data["content"]))</code> and paste the output into your question?</span>
<span class="comment-copy">Thanks man that worked, can you explain what's going on? Also, I didn't want to remove the slashes so I don't need that part. I will see what other solutions can be offered before I accept your answer</span>
<span class="comment-copy"><code>s = '\u00a0\n\n\n\r\nState-of-the-art security and 100% uptime SLA.\u00a0\r\n\n\n\r\nOutstanding support'</code> isn't the data shown in the question. That's just normal text. You should be using a raw string to put those backslash sequences into your code as a literal string.</span>
<span class="comment-copy">This fails with strings containing unicode characters since <code>unicode-escape</code> assumes latin1 input</span>
<span class="comment-copy">@Evpok Good point! I've updated my answer. I must admit that a text string containing a mix of Unicode chars &amp; Unicode escape sequences would be rather strange, but I guess I've seen all sorts of strangely mangled Unicode. ;) At least Python 3 is a lot better in that regard than Python 2.</span>
<span class="comment-copy">It actually bit me while trying to unescape <code>"l\'œil"</code>, which doesn't escape unicode, but still has escapes.</span>
<span class="comment-copy">@Evpok If that's a literal string in your Python script, then it doesn't need unescaping. OTOH, if that's data you've read in, so you actually have <code>r"l\'œil"</code>, which is equivalent  to <code>"l\\'œil"</code>, then yes, <code>unicode-escape</code> decoding won't help. There are some suggestions at <a href="https://stackoverflow.com/q/1885181/4014959">stackoverflow.com/q/1885181/4014959</a> but some of those answers only apply to Python 2.</span>
<span class="comment-copy">Yes, thank you, the ast solution there was actually what I ended up using :-)</span>
