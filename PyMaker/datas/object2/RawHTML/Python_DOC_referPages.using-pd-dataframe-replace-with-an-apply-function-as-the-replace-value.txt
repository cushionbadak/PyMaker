<div class="post-text" itemprop="text">
<p>I have several dataframes that have mixed in some columns with dates in this ASP.NET format "/Date(1239018869048)/". I've figured out how to parse this into python's datetime format for a given column. However I would like to put this logic into a function so that I can pass it any dataframe and have it replace all the dates that it finds that match a regex using pd.Dataframe.replace.</p>
<p>something like:</p>
<pre><code>def pretty_dates():
    #Messy logic here

df.replace(to_replace=r'\/Date(d+)', value=pretty_dates(df), regex=True)
</code></pre>
<p>Problem with this is that the df that is being passed to pretty_dates is the whole dataframe not just the cell that is needed to be replaced. </p>
<p>So the concept I'm trying to figure out is if there is a way that the value that should be replaced when using df.replace can be a function instead of a static value. </p>
<p>Thank you so much in advance</p>
<p><strong><em>EDIT</em></strong>
To try to add some clarity, I have many columns in a dataframe, over a hundred that contain this date format. I would like not to list out every single column that has a date. Is there a way to apply the function the clean my dates across all the columns in my dataset? So I do not want to clean 1 column but all the hundreds of columns of my dataframe.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm sure you can use regex to do this in one step, but here is how to apply it to the whole column at once:</p>
<pre><code>df = pd.Series(['/Date(1239018869048)/',
                '/Date(1239018869048)/'],dtype=str)

df = df.str.replace('\/Date\(', '')
df = df.str.replace('\)\/', '')
print(df)

    0    1239018869048
    1    1239018869048
    dtype: object

</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As far as I understand, you need to apply custom function to selected cells in specified column. Hope, that the following example helps you:</p>
<pre><code>import pandas as pd

df = pd.DataFrame({'x': ['one', 'two', 'three']})
selection = df.x.str.contains('t', regex=True) # put your regexp here
df.loc[selection, 'x'] = df.loc[selection, 'x'].map(lambda x: x+x) # do some logic instead
</code></pre>
<p>You can apply this procedure to all columns of the df in a loop: </p>
<pre><code>for col in df.columns:
    selection = df.loc[:, col].str.contains('t', regex=True) # put your regexp here
    df.loc[selection, col] = df.loc[selection, col].map(lambda x: x+x) # do some logic instead
</code></pre>
</div>
<span class="comment-copy">Thank you, however in my case  I don't know the column names with this date format in it ahead of time. It's a dataframe with hundreds of different columns some are dates, some are not. I'm trying to apply this replace procedure across all columns. Is that possible?</span>
