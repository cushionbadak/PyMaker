<div class="post-text" itemprop="text">
<p>I'm trying to create an Oracle table from a list of attributes with python. Sadly, I have multiple attributes with the same name thus I can't add them to the table. Also I don't want my program to stop because of that.
Now I'm trying with this solution:</p>
<pre><code>connection = cx_Oracle.connect('user/password')
cursor = connection.cursor()

if not tableExists(connection, 'TableName'):
first_column_name = next(iter(attributes), None)
query_table = 'CREATE TABLE TableName ("{}" VARCHAR2(255))'.format(first_column_name)
cursor.execute(query_table)


for attribute in attributes[1:]:
    query_column= '''
    DECLARE
        v_column_exists number := 0;  
    BEGIN
        Select count(*) into v_column_exists
            from user_tab_cols
            where upper(column_name) = "{}"
            and upper(table_name) = 'TableName';

        if (v_column_exists = 0) then
            execute immediate 'alter table TableName add ("{}" VARCHAR2(255)))';
        end if;
    end;
    '''.format(attribute, attribute)

    cursor.execute(query_column)
</code></pre>
<p>I've pasted the long query code from <a href="https://stackoverflow.com/questions/6351823/how-to-check-if-a-column-exists-before-adding-it-to-an-existing-table-in-pl-sql">this answer.</a> The table is created with the first attribute as intended but as I would start to add more columns I get:</p>
<pre><code>Traceback (most recent call last):
File "main.py", line 52, in &lt;module&gt;
cursor.execute(query_column)
cx_Oracle.DatabaseError: ORA-06550: line 7, column 41:
PL/SQL: ORA-00904: "Order count [A221]": invalid identifier
ORA-06550: line 5, column 9:
PL/SQL: SQL Statement ignored
</code></pre>
<p>What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd suggest simply building up the create table statement instead of building the table and then altering it to add columns to it!</p>
<p>You can get rid of duplicates in a list by using the following code:</p>
<pre><code>listWithoutDups = list(dict.fromkeys(listWithDups))
</code></pre>
<p>Then, you can build your statement as follows:</p>
<pre><code>columns = ['"%s" varchar2(255)' % n for n in listWithoutDups]
sql = "create table SomeTableName (%s)" % ",".join(columns)
cursor.execute(sql)
</code></pre>
<p>You'll note I included double quotes around the column names -- that's necessary if you want to create columns that don't follow Oracle standards (include special characters, spaces, etc.) but be aware that also makes the names case sensitive and you will need to specify quotes as well when you perform any operation on the table.</p>
</div>
<span class="comment-copy">Many thanks, Good Sir! Yeah, this morning I've realized I should make everything ready before creating the whole table in one command. Thanks for the dict.fromkeys tip, I've implemented it with a longer, more tedious logic, but this one is more elegant.</span>
<span class="comment-copy">Glad to be of help!</span>
