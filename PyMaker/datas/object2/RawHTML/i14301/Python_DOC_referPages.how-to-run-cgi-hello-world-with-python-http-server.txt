<div class="post-text" itemprop="text">
<p>I am using Windows 7 and Python 3.4.3. I would like to run this simple helloworld.py file in my browser:</p>
<pre><code>print('Content-Type: text/html')
print( '&lt;html&gt;')
print( '&lt;head&gt;&lt;/head&gt;')
print( '&lt;body&gt;')
print( '&lt;h2&gt;Hello World&lt;/h2&gt;')
print( '&lt;/body&gt;&lt;/html&gt;')
</code></pre>
<p>What I do is:</p>
<p>1) Go to command line <code>C:\Python</code> (where python is installed)</p>
<p>2) run: <code>python -m http.server</code></p>
<p>3) Got to Firefox and type <code>http://localhost:8000/hello.py</code></p>
<p>However, instead of "Hello World", the browser just prints the content of the hello.py file.</p>
<p>How can I fix it?</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/http.server.html#http.server.CGIHTTPRequestHandler" rel="nofollow noreferrer">the <code>http.server</code> docs</a>:</p>
<blockquote>
<p><code>CGIHTTPRequestHandler</code> can be enabled in the command line by passing
  the <code>--cgi</code> option:</p>
</blockquote>
<pre><code>$ python3 -m http.server --bind localhost --cgi 8000
</code></pre>
<p>Put your script into <a href="https://docs.python.org/3/library/http.server.html#http.server.CGIHTTPRequestHandler.cgi_directories" rel="nofollow noreferrer"><code>cgi_directories</code></a>:</p>
<blockquote>
<p>This defaults to <code>['/cgi-bin', '/htbin']</code> and describes directories to treat as containing CGI scripts.</p>
</blockquote>
<p>Open in the browser:</p>
<pre><code>$ python -mwebbrowser http://localhost:8000/cgi-bin/hello.py
</code></pre>
<p>where <code>hello.py</code>:</p>
<pre><code>#!/usr/bin/env python3
print("Content-Type: text/html\n")
print("&lt;!doctype html&gt;&lt;title&gt;Hello&lt;/title&gt;&lt;h2&gt;hello world&lt;/h2&gt;")
</code></pre>
<p>I had to make it executable on POSIX: <code>chmod +x cgi-bin/hello.py</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>I did this some time ago for Python2.7</p>
<pre><code>from BaseHTTPServer import BaseHTTPRequestHandler

class GetHandler(BaseHTTPRequestHandler):

    def do_HEAD(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()

    def do_GET(self):
        x = self.wfile.write
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        # &lt;--- HTML starts here ---&gt;
        x("&lt;html&gt;")
        # &lt;--- HEAD starts here ---&gt;
        x("&lt;head&gt;")
        x("&lt;title&gt;Title goes here!&lt;/title&gt;")
        x("&lt;/head&gt;")
        # &lt;--- HEAD ends here ---&gt;
        # &lt;--- BODY starts here ---&gt;
        x("&lt;body&gt;")
        x("&lt;p&gt;This is a test.&lt;/p&gt;")
        x("&lt;/body&gt;")
        # &lt;--- BODY ends here ---&gt;
        x("&lt;/html&gt;")
        # &lt;--- HTML ends here ---&gt;

if __name__ == '__main__':
    from BaseHTTPServer import HTTPServer
    server = HTTPServer(('localhost', 777), GetHandler)
    print 'Starting server, use &lt;Ctrl + F2&gt; to stop'
    server.serve_forever()
</code></pre>
<p>So in Python 3 you just need to change imports</p>
<pre><code>from http.server import BaseHTTPRequestHandler

class GetHandler(BaseHTTPRequestHandler):

    def do_HEAD(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()

    def do_GET(self):
        x = self.wfile.write
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        # &lt;--- HTML starts here ---&gt;
        x("&lt;html&gt;")
        # &lt;--- HEAD starts here ---&gt;
        x("&lt;head&gt;")
        x("&lt;title&gt;Title goes here!&lt;/title&gt;")
        x("&lt;/head&gt;")
        # &lt;--- HEAD ends here ---&gt;
        # &lt;--- BODY starts here ---&gt;
        x("&lt;body&gt;")
        x("&lt;p&gt;This is a test.&lt;/p&gt;")
        x("&lt;/body&gt;")
        # &lt;--- BODY ends here ---&gt;
        x("&lt;/html&gt;")
        # &lt;--- HTML ends here ---&gt;

if __name__ == '__main__':
    from http.server import HTTPServer
    server = HTTPServer(('localhost', 777), GetHandler)
    print('Starting server, use &lt;Ctrl + F2&gt; to stop')
    server.serve_forever()
</code></pre>
<p>I do not know right now if the print-function in python 3 is </p>
<pre><code>print("")
</code></pre>
<p>or</p>
<pre><code>print ""
</code></pre>
<p>but i guess it was with ()</p>
<p>Edit: it is print()</p>
</div>
<div class="post-text" itemprop="text">
<p>I created a <a href="https://gist.github.com/RichardBronosky/dd10a07de95a888b63964fe5b548b672" rel="nofollow noreferrer">complete example</a> for a friend. It is a complete demo you can run with 8 simple copy-paste ready lines of code. Enjoy.</p>
<pre><code>echo -e "\n\n    Usage: after running this script, visit http://localhost:8000/cgi-bin/hello    \n\n"
mkdir /tmp/cgi-bin/
cat &gt; /tmp/cgi-bin/hello &lt;&lt;EOF
#!/bin/bash
echo -e "Content-Type: text/plain\n\n"; date; echo; env
EOF
chmod +x /tmp/cgi-bin/hello
(cd /tmp; python3 -m http.server --cgi 8000)
</code></pre>
</div>
<span class="comment-copy">your webserver isnt "running python". your python is running a webserver.</span>
<span class="comment-copy">You should edit your original question instead of just reposting it.</span>
<span class="comment-copy">@IanAuld, my other question was regarding configuring WAMP. This question is regarding http.server. No reposting - this is a different question</span>
<span class="comment-copy">@Yura This <a href="http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world" rel="nofollow noreferrer">tutorial</a> will cover a lot of things but is pretty easy to follow along with. This <a href="http://code.tutsplus.com/tutorials/an-introduction-to-pythons-flask-framework--net-28822" rel="nofollow noreferrer">one</a> is much more basic (and slightly out dated) but will show you the basics.</span>
<span class="comment-copy">By the way you do not type in '<a href="http://localhost:8000/hello.py" rel="nofollow noreferrer">localhost:8000/hello.py</a>' do it WITHOUT 'hello.py'</span>
<span class="comment-copy">can you test my python3 script if it really works. I do not want to install python3 right now or use some online python because those work some different.</span>
<span class="comment-copy">@Tom-OliverHeidel: sure. What commands do you want me to run and what do you expect to happen (define "really works": do you care about multiple concurrent clients, security, buffers, etc)?</span>
<span class="comment-copy">scroll down a bit - the other answer is mine.</span>
<span class="comment-copy">@Tom-OliverHeidel: done</span>
<span class="comment-copy">@Yura: 1. have you put <code>hello.py</code> into <code>cgi-bin</code> directory? 2. Have you appended <code>--cgi</code> as shown above? 3. Have you visited <code>localhost:8000/cgi-bin/hello.py</code> (note: cgi-bin in url)? 4. Have your added additional <code>"\r\n"</code> after the http header?</span>
<span class="comment-copy">Thanks @Tom-Oliver Heidel, Im a newbie, please guide me what to do with this code you have posted and where to place it to make my  hello-world.py work oin the browser. Thanks</span>
<span class="comment-copy">I cannot guarantuee 100% that the python3 code will work because I just used python docs in short time. But there is a tool called '2to3' which will convert python2 script into python3 script <a href="https://docs.python.org/2/glossary.html#term-to3" rel="nofollow noreferrer">docs.python.org/2/glossary.html#term-to3</a> Actually you just need to copy the scripty and name it like e.g. 'httpserver.py' then you can use cmd and type in 'python httpserver.py' to start it.</span>
<span class="comment-copy">I've changed <code>777</code> to <code>7777</code> (permission error on Unix) and replaced all <code>str</code> literals by <code>bytes</code> literals on Python 3. <code>Ctrl + F2</code> does something unrelated on my Ubuntu machine. After that it shows: "This is a test." if you visit: <code>localhost:7777</code>.</span>
<span class="comment-copy">@Yura when you got the file saved and executed with 'python filename.py' you can go and open your browser. type in 'localhost:777' or to whatever you changed the port in the script.</span>
<span class="comment-copy">I never said to type in 'localhost:777/hello.py' when you executing the python file you can read 'Starting server ........' then you type into your browser 'localhost:777' nothing more.</span>
