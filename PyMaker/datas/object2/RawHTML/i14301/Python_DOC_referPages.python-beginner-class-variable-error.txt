<div class="post-text" itemprop="text">
<p>this is my first question, so sorry...
I'm a beginner with python and coding in general, and i wanted to create a class called 'Map' that would have the following class variables: </p>
<pre><code>class Map:
    height = 11  
    width = 21

    top = [['#']*width]
    middle = [['#']+[' ']*(width-2)+['#'] for i in range(height-2)]
    field = top + middle + top

b = Map()

Shell:
&gt;&gt;&gt; middle = [['#']+[' ']*(width-2)+['#'] for i in range(height-2)]
    NameError: name 'width' is not defined
</code></pre>
<p>If i put the variables outside of the class it works.
What am I doing wrong??</p>
<p>Thanks for the help.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/reference/executionmodel.html#naming" rel="noreferrer">docs</a>:</p>
<blockquote>
<p>Names refer to objects. Names are introduced by name binding operations. Each occurrence of a name in the program text refers to the binding of that name established in the innermost function block containing the use.</p>
<p>A block is a piece of Python program text that is executed as a unit. The following are blocks: a module, a function body, and a class definition. Each command typed interactively is a block. A script file (a file given as standard input to the interpreter or specified as a command line argument to the interpreter) is a code block. A script command (a command specified on the interpreter command line with the ‘-c‘ option) is a code block. The string argument passed to the built-in functions eval() and exec() is a code block.</p>
<p>A code block is executed in an execution frame. A frame contains some administrative information (used for debugging) and determines where and how execution continues after the code block’s execution has completed.</p>
<p>A scope defines the visibility of a name within a block. If a local variable is defined in a block, its scope includes that block. If the definition occurs in a function block, the scope extends to any blocks contained within the defining one, unless a contained block introduces a different binding for the name. <strong>The scope of names defined in a class block is limited to the class block; it does not extend to the code blocks of methods – this includes comprehensions and generator expressions since they are implemented using a function scope</strong>. This means that the following will fail:</p>
</blockquote>
<pre><code>class A:
    a = 42
    b = list(a + i for i in range(10))
</code></pre>
<p>list comps in python3 have their own scope, as opposed to python2 where your code would work as is.</p>
<p>If you take the following example using python2, you can see how variables leaking the scope of the list comp could cause some problems:</p>
<pre><code>class A:
    a = 42
    b = [a for a in range(10)]

a = A()

print(a.a)
9
</code></pre>
<p>You have a few options, you could   use <code>__init__</code> creating instance attributes:</p>
<pre><code>class Map:
    def __init__(self):
        self.height = 11
        self.width = 21
        self.top = [['#']*self.width]
        self.middle = [['#']+[' ']*(self.width-2)+['#'] for i in range(self.height-2)]
        self.field = self.top + self.middle + self.top
m=Map()
print(m.field)
</code></pre>
<p>Using a method:</p>
<pre><code>class Map:
    @staticmethod
    def meth():
        height = 11
        width = 21
        top = [['#']*width]
        middle = [['#']+[' ']*(width-2)+['#'] for i in range(height-2)]
        field = top + middle + top
        return field

b = Map()


print(b.meth())
</code></pre>
<p>What you choose is really dependant on what you want to do.</p>
</div>
<div class="post-text" itemprop="text">
<p>you need to use b.width and b.height to refer the member variables define. 
Refer this post for some explanation about accessing member variables - <a href="https://stackoverflow.com/questions/3434581/accessing-a-classs-variable-in-python">Accessing a class' member variables in Python?</a></p>
</div>
<span class="comment-copy">Did you go through the <a href="https://docs.python.org/2/tutorial/classes.html" rel="nofollow noreferrer">classes tutorial</a>?</span>
<span class="comment-copy">b.width? b.height? Since you are outside the class the Map. See this post it will help you understand better: <a href="http://stackoverflow.com/questions/68645/static-class-variables-in-python" title="static class variables in python">stackoverflow.com/questions/68645/…</a></span>
<span class="comment-copy">Works for me too</span>
<span class="comment-copy">I'm using IDLE not sure if that is important, also thanks again for taking your time to help me (:</span>
<span class="comment-copy">@Padraic Cunningham if I put all of those variables under 'def __init__(self):' it works but, I want them to be Class variables, also if I change 'middle = [['#']+[' ']*(width-2)+['#']' to  'middle = [['#']+[' ']*(21-2)+['#']' it also works...why?</span>
<span class="comment-copy">So... the "for" loop function inside the list does not have access to the width variable?</span>
<span class="comment-copy">@Cookiesforhelp, yes, exactly.</span>
<span class="comment-copy">Thank you for your time and the links but, one last question in the python2 example does the variable lose "byte data" to became another number because that is weird</span>
<span class="comment-copy">@Cookiesforhelp. the name is rebound to the last value in the loop.</span>
<span class="comment-copy">ohhh ok so even in python2 it completely ignores "a = 42" and just creates a new/or overwrites "a".</span>
<span class="comment-copy">This is wrong and not actually related to the issue at all, the error happens ever before the instance is created</span>
