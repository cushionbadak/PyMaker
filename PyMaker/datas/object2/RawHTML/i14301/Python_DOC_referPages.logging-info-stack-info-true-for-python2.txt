<div class="post-text" itemprop="text">
<p>Python3 has the argument <code>stack_info</code> for <code>logging.info()</code>:</p>
<p><a href="https://docs.python.org/dev/library/logging.html#logging.Logger.debug" rel="nofollow">https://docs.python.org/dev/library/logging.html#logging.Logger.debug</a></p>
<p>How to get this in Python2?</p>
</div>
<div class="post-text" itemprop="text">
<p>The following module wrap the logging module with support to stack_info keyword argument. you can import this module and call the getLogger method similar to how you work with logging module. </p>
<pre><code>import logging
import logging.handlers
from functools import partial
logger = logging.getLogger()

old_critical = logger.critical
old_error = logger.error
old_warning = logger.warning
old_info = logger.info
old_debug = logger.debug
import traceback

def custom_log(old_log, message, *args, **kwargs):
    if kwargs.get("stack_info"):
        message = message + reduce(lambda x,y: x+y, traceback.format_stack(), "")
    if kwargs.get("stack_info") is not None:
        del kwargs["stack_info"]
    old_log(message, *args, **kwargs)

logger.critical = partial(custom_log, old_critical)
logger.error = partial(custom_log, old_error)
logger.warning = partial(custom_log, old_warning)
logger.info = partial(custom_log, old_info)
logger.debug = partial(custom_log, old_debug)

def new_getLogger(logger_name="root"):
    return logger

from logging import *
getLogger = new_getLogger
</code></pre>
<p>PS - One downside to this approach is it will make one extra function call and that also will be visible in stack trace</p>
</div>
<span class="comment-copy">You can search for a backport on PyPI, use a different third-party logging module that has the features you want, or upgrade to Python 3.2 or later if you want features that were only added in Python 3.2. What other kind of answer were you expecting?</span>
<span class="comment-copy">@abarnert I can't see a backport for the logging module on PyPI.</span>
<span class="comment-copy">Maybe there isn't one. If no one has backported Python 3.2's <code>logging</code> module to Python 2.7, you'll have to do it yourself. Or backport just the part you need (notice that <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">the <code>logging</code> docs</a> link to <a href="https://hg.python.org/cpython/file/3.4/Lib/logging/__init__.py" rel="nofollow noreferrer">the <code>logging/__init__.py</code> source</a>).</span>
<span class="comment-copy">It is not relevant to make another variable to store the old method since Python does not duplicate memory reference unless you explicitly tell it to do so. You can just include the current reference (e.g. <code>a = 2 + a</code>)</span>
