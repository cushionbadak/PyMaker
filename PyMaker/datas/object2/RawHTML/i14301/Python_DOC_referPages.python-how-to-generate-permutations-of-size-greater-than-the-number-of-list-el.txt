<div class="post-text" itemprop="text">
<p>Sorry if that title made no sense. What I mean is this: I have a list <code>[A, B, C]</code> and I want all possible permutations of those elements that will fill a list of length 10. </p>
<pre><code>[A, B, C] =&gt; [A, A, A, A, A, A, A, A, A, A]
          =&gt; [A, A, A, A, A, A, A, A, A, B]
          ...
          =&gt; [C, C, C, C, C, C, C, C, C, C]
</code></pre>
<p>I've been reading through the <code>itertools</code> documentation but the <code>permutations</code> function wouldn't work in this case unless the output list length was less than or equal to 3. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You are producing the <em>product</em> of the values, so use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product()</code></a> with a repeat set:</p>
<pre><code>from itertools import product

for combo in product(['A', 'B', 'C'], repeat=10):
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; products = product(['A', 'B', 'C'], repeat=10)
&gt;&gt;&gt; next(products)
('A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A')
&gt;&gt;&gt; next(products)
('A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B')
&gt;&gt;&gt; next(products)
('A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C')
&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; skip_to_end = islice(products, (3 ** 10) - 6, None)
&gt;&gt;&gt; next(skip_to_end)
('C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'A')
&gt;&gt;&gt; next(skip_to_end)
('C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'B')
&gt;&gt;&gt; next(skip_to_end)
('C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C')
</code></pre>
</div>
<span class="comment-copy">Ah, perfect. Sorry for the simple question--didn't know the terminology for that computation. Thanks very much!</span>
