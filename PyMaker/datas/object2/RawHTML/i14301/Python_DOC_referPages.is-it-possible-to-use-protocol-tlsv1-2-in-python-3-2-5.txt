<div class="post-text" itemprop="text">
<p>I have the following code:</p>
<pre><code>def connect(module, action, input={}):
data = {'module': module, 'action': action, 'input': json.dumps(input), 
'token': token, 'request_id': 1} 
headers = {'Cookie': 'TNS_SESSIONID=' + cookie} 
url = server + '/request.php' 
try:
    request = urllib.request.Request(url, urllib.parse.urlencode(data), headers)
    context=ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
    response = urllib.request.urlopen(request, context)
    content = json.loads(response.read())
    return content['response'] 
except Exception as e: 
    print("Error: " + str(e))
    return None 
</code></pre>
<p>But I keep getting the error: "Error: 'module' object has no attribute 'PROTOCOL_TLSv1_2'"</p>
<p>If I try to use TLS 2 or SSL2 or 3, I run into the bug "Error: "
Which has been documented, and I believe the common workaround was to use TLSv1 (which is disabled)</p>
<p>Is there anything I can do to make it work, or do I have to wait for admin rights and download and install python 2.7.9+ or 3.4+?
(I'm currently using Portablepython, hence the restriction on version numbers)</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/ssl.html" rel="nofollow">https://docs.python.org/3/library/ssl.html</a>:</p>
<pre><code>ssl.PROTOCOL_TLSv1_2
...Available only with openssl version 1.0.1+.
New in version 3.4.
</code></pre>
<p>So you need to upgrade to get this option.
You might try <code>PROTOCOL_SSLv23</code> which offers the best protocol version the client can do in a backward compatible way. But lots of servers which are configured to allow only TLS 1.2 will still cause a handshake failure with this option.</p>
<p>Apart from that you need OpenSSL 1.0.1 do have support for TLS1.2 at all.</p>
</div>
