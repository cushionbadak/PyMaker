<div class="post-text" itemprop="text">
<p>Here is a snippet:</p>
<pre><code>f = open("a.txt","r")
paragraph = f.readlines()
f1 = open("o.txt","w")
for line in paragraph:
    f1.write(line)
</code></pre>
<p>Here, how can I manage to write continuosly on the same line in o.txt?<br/>
For example,  <code>a.txt</code>:  </p>
<pre><code>Hi,   
how  
are   
you?
</code></pre>
<p>Then <code>o.txt</code> should be:  </p>
<pre><code>Hi, how are you?
</code></pre>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>remove new line char using <code>rstrip</code></p>
<pre><code>f = open("a.txt","r")
paragraph = " ".join(map(lambda s: s.rstrip('\n'), f.readlines()))
f1 = open("b.txt","w")
f1.write(paragraph)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to strip the lines then join and write to file :</p>
<pre><code>with open("a.txt","r") as in_f,open("o.txt","w") as out_f: 
    out_f.write(' '.join(in_f.read().replace('\n','')))
</code></pre>
<p>Also as a more pythonic way for use <a href="https://docs.python.org/2/reference/compound_stmts.html#the-with-statement" rel="nofollow"><code>with</code> statement</a> to dealing with files.</p>
<p>Or better :</p>
<pre><code>with open("a.txt","r") as in_f,open("o.txt","w") as out_f: 
    out_f.write(' '.join(map(str.strip(),in_f))
</code></pre>
<p>or use a list comprehension :</p>
<pre><code>with open("a.txt","r") as in_f,open("o.txt","w") as out_f: 
    out_f.write(' '.join([line.strip() for line in in_f])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>try:
    with open('a.txt') as in_fh, open('o.txt', 'w') as out_fh:
        out_fh.write(' '.join(in_fh.read().split('\n')))
except IOError:
    # error handling
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This occurs because Python reads the <em>entire</em> line, including the new-line character represented as <code>\n</code> in python. The string in your example would result in an array like:</p>
<pre><code>['Hi,\n', 'how\n', 'are\n', 'you?']
</code></pre>
<p>To solve this you need to remove the trailing <code>\n</code> from each line, but beware that the last line might not contain a <code>\n</code> so you cant just remove the last character of each line. There are pre-made methods built in to python to help you remove white-space characters (like new-line <code>\n</code> and space <code>" "</code>) from the beginning and the end of a string.</p>
<p>The official documentation can be a bit daunting, but finding and using information from documentation is probably one of the most important skills in the field of computing. Look at the official documentation and see if you find any useful methods in the string class.
<a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow">https://docs.python.org/3/library/stdtypes.html#str.strip</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I found a solution. Here it goes. Basically using the <code>replace()</code>.</p>
<pre><code>f = open("a.txt","r")
paragraph = f.readlines()
f1 = open("o.txt","w")
for line in paragraph:
    line = line.replace("\n"," ")
    f1.write(line)
</code></pre>
<p>Other methods are welcome! :)</p>
</div>
<span class="comment-copy">If you're familiar with streams (e.g. in C++) this could also be useful, it enables you to put in end-line characters wherever you want: <a href="https://docs.python.org/2/library/stringio.html" rel="nofollow noreferrer">docs.python.org/2/library/stringio.html</a></span>
<span class="comment-copy"><code>map(str.strip, f)</code> does the same without lambda and readlines. This however removes <i>all</i> spaces at the beginning and the end of each line.</span>
<span class="comment-copy">you are right. corrected my answer</span>
<span class="comment-copy">@DmitryAgibov <code>lambda</code> will reduce the performance of your code, as mata says you can use <code>map</code> or <code>list comprehension</code>, any way good try.</span>
<span class="comment-copy"><code>map(str.strip, f)</code> is it exact syntax? <code>map</code> without <code>lambda</code>?</span>
<span class="comment-copy">which python version support this?</span>
<span class="comment-copy">That will still keep the newlines</span>
<span class="comment-copy"><code>' '.join(in_f)</code> will preserve new line char</span>
<span class="comment-copy">@mata Yeah a foolish mistake!;)</span>
