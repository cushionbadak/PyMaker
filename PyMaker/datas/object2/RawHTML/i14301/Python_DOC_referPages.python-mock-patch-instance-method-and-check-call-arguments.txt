<div class="post-text" itemprop="text">
<p>I am using Mock (<a href="http://mock.readthedocs.org/en/latest/" rel="nofollow">http://mock.readthedocs.org/en/latest/</a>) library with Python 2.7. I have a main function that calls a few other functions that I am trying to test.</p>
<p>The other functions that it calls are other instance methods (so for example, <code>def _other_function(self, a, b)</code>.</p>
<p>I am calling my main function, and I have the other functions that it calls patched. I just added <code>autospec=True</code> to the patch. When I check for call arguments however, it shows a <code>self</code> argument (as expected):</p>
<pre><code>python2.7&gt; _other_function_mock.call_args_list
[call(&lt;some.module.class.method object at 0x9acab90&gt;, 1, 2)]
</code></pre>
<p>Before setting <code>autospec=True</code>, it would only show that arguments that I actually passed (1 and 2). Since now the call args show a reference to <code>self</code>, I can't just call <code>mock_object.assert_any_call(1, 2)</code>. I will need to pick out the arguments from <code>mock_object.call_args_list</code> and compare.</p>
<p>Is there a way to still call <code>mock.assert_any_call</code> without having to pick out the arguments manually to check that the arguments passed are correct?</p>
<p>Or is there something better in general that I can do to patch instance methods?</p>
</div>
<div class="post-text" itemprop="text">
<p>Essentially there are two ways to play around <code>self</code> reference for <code>autospec=True</code> patches.</p>
<ol>
<li>Use <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.ANY" rel="noreferrer"><code>mock.ANY</code></a> to ignore the first argument</li>
<li>Patch object by <code>patch.object</code> instead of patching the static method reference.</li>
</ol>
<p>Anyway <em>2</em> cannot be used in all cases sometimes you cannot have the object instance in test method context; moreover that way often make test less clear and more complicated. I always prefer to use <em>1</em> in my tests:</p>
<pre><code>@patch("my_module.MyClass.my_method", autospec=True)
def test_my_test(self, mock_my_method):
    my_module.MyClass().my_method(1,2)
    mock_my_method.assert_any_call(mock.ANY, 1, 2)
</code></pre>
</div>
