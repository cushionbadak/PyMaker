<div class="post-text" itemprop="text">
<p>I'm having headache trying to understand the cyclic relationship that exit between the <code>metaclass</code> type, the <code>object</code> class, and the <code>class</code> type.</p>
<p>I'm trying to understand how python makes everything an object.is it because everything is an instance of the metaclass type or is it because everything is a subclass of object class.</p>
<p>if its because of being subclass of object class, does that mean if the class object was named class <code>pyobj</code>. Would that mean that everything in Python starts with pyobj?</p>
<p>I know objects created by metaclass are types/classes, this types are then used to create other object.</p>
<p>From this:</p>
<pre><code>&gt;&gt;&gt; isinstance(type, object)
True
&gt;&gt;&gt; isinstance(object,type)
True
&gt;&gt;&gt; issubclass(object,type)
False
&gt;&gt;&gt; issubclass(type,object)
True
</code></pre>
<p>Is it safe to say that python creates the class object first using the type metaclass (I'm simplifying the metaclass for brevity).</p>
<pre><code>type('object',(),{})
</code></pre>
<p>which implies class object is a class of class type and it does not inherit any attributes other class.</p>
<p>Then it creates the class type:</p>
<pre><code>type('type', (object,),{})
</code></pre>
<p>implying type class is class of class type and it inherits attributes from the object class.</p>
<p>Then creates the other classes by inheriting from the class object</p>
<pre><code>type('dict', (object,), {})  
type('Animal', (object), {})
</code></pre>
<p>which similar to creating an Animal class as :</p>
<pre><code>class Animal:
     pass
</code></pre>
<p>Does this mean the metaclass used to create the class object is still the one used to create this Animal class or is the metaclass type used by default ? </p>
<p>Which type is being used, is it the metaclass type or the type class that was created after object was created ? </p>
<p>Where does the class type created with the base class object come into play ?</p>
<p>I have also tried to understand what really is going on between the object and the class from all he responses above and in this article <a href="http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html" rel="nofollow">http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html</a></p>
<p>I'm still getting confused. What is the relation between this two class in terms of object creation?</p>
<p>Will I ever get this or is it a chicken and egg situation?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python's core types really do have a chicken and egg situation going on. <code>type</code> inherits from <code>object</code>, but <code>object</code> is an instance of <code>type</code>.</p>
<p>You can't really reason about which of <code>object</code> or <code>type</code> is defined first in Python, because in regular Python code you could not set up their relationship. The Python interpreter gets to do it by fiddling with the internals before the environment is set up, so it doesn't matter if the types are not completely defined up front.</p>
<p>In your example where you call <code>type</code> to create new <code>object</code> and <code>type</code> types, you're not actually getting objects that are equivalent to the real <code>type</code> and <code>object</code>, as your new <code>object</code> type is an instance of the builtin <code>type</code> metaclass, not the hand-made <code>type</code> metaclass you create later.</p>
<p>Here's an illustration of roughly how the interpreter goes about it. The code doesn't actually work, since you can't create a new-style class without inheriting from <code>object</code>, nor can you reassign a <code>type</code> object's <code>__class__</code> attribute (to make <code>object</code> an instance of <code>type</code>). If you could, you could start up your own independent type system!</p>
<pre><code>my_object = type('my_object', (), {}) # this doesn't work right, it inherits from object
my_type = type('my_type', (my_object,), {})
my_object.__class__ = my_type     # this doesn't work at all (it will raise an exception)
</code></pre>
</div>
<span class="comment-copy">Did you read through <a href="https://docs.python.org/3/reference/datamodel.html#customizing-class-creation" rel="nofollow noreferrer">3.3.3. Customizing class creation</a> of the Language reference?</span>
