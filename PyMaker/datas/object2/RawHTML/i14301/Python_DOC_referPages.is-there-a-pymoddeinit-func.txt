<div class="post-text" itemprop="text">
<p>I want to know whether there is a <code>PyMOD(DEINIT)_FUNC</code>?, I know that resources are released when the python script exits, but I would like to make my code as responsible for the memory it uses as possible.</p>
<p>I have searched the documentaion of course, and until now I think there is no function called from python core to the c module when the module is unloaded, but I hope there is and I just don't know how to search.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 2 does not support module finalisation, no. See <a href="https://bugs.python.org/issue9072" rel="nofollow">bug 9072</a>:</p>
<blockquote>
<p>Please accept that Python indeed does not support unloading modules for severe, fundamental, insurmountable, technical problems, in 2.x.</p>
</blockquote>
<p>For Python 3, the C API for module initialisation was overhauled (see <a href="https://www.python.org/dev/peps/pep-3121/" rel="nofollow">PEP 3121</a>) and the new <a href="https://docs.python.org/3/c-api/module.html#c.PyModuleDef" rel="nofollow"><code>PyModuleDef</code> struct</a> has a <a href="https://docs.python.org/3/c-api/module.html#c.PyModuleDef.m_free" rel="nofollow"><code>m_free</code> slot</a> that takes a callback function; use that to clear out your module memory.</p>
</div>
<span class="comment-copy">Please tag your python version. Also have a look at <a href="https://bugs.python.org/issue9072" rel="nofollow noreferrer">bugs.python.org/issue9072</a>, especially "<i>Please accept that Python indeed does not support unloading modules for severe, fundamental, insurmountable, technical problems, in 2.x.</i>"</span>
<span class="comment-copy">Also relevant is <a href="https://www.python.org/dev/peps/pep-3121/" rel="nofollow noreferrer">PEP 3121</a>: <i>In addition to the initialization function, a module may implement a number of additional callback functions, which are invoked when the module's tp_traverse, tp_clear, and tp_free functions are invoked, and when the module is reloaded.</i> This is implemented for Python 3, not Python 2, so your exact version is important.</span>
<span class="comment-copy">@dhke I often forget how irritating it is that there is so much difference between versions, and how many many projects stick to python2, I however have faith that someday everyone will migrate to python3 and I do everything with python3, specially c modules.</span>
<span class="comment-copy">Excelent answer.</span>
