<div class="post-text" itemprop="text">
<p>In a previous life I did a fair bit of Java development, and found <a href="http://www.javacodegeeks.com/2013/12/introduction-to-junit-theories.html" rel="noreferrer">JUnit Theories</a> to be quite useful.  Is there any similar mechanism for Python?</p>
<p>Currently I'm doing something like:</p>
<pre><code>def some_test(self):
    cases = [('some sample input', 'some expected value'),
            ('some other input', 'some other expected value')]

    for value, expected in cases:
        result = method_under_test(value)
        self.assertEqual(expected, result)
</code></pre>
<p>But this is rather clunky, if the first "case" fails, all others fail to be run.</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like pytest can do something like this: <a href="http://pytest.org/latest/parametrize.html#parametrize-basics" rel="nofollow">http://pytest.org/latest/parametrize.html#parametrize-basics</a></p>
<p>I haven't tried it out myself.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not aware of any builtins for this in any common testing frameworks. The only problem with your solution is that the iteration is inside of the test. Rather it should be outside and generate tests, maybe something like this</p>
<pre><code>import unittest


def _apply(func, args):
    """Return a function with args applied after first argument"""
    def wrapped(self):
        return func(self, *args)
    return wrapped


class TheoryMeta(type):
    """Metaclass that replaces test methods with multiple methods for each test case"""
    def __new__(meta, name, bases, attrs):
        newattrs = {}
        cases = attrs.pop('cases', [])

        for name, value in attrs.items():
            if not name.startswith('test') or not callable(value):
                newattrs[name] = value
                continue

            for n, args in enumerate(cases):
                test_name = '%s_%d' % (name, n)
                newattrs[test_name] = _apply(value, args)

        return super().__new__(meta, name, bases, newattrs)


class TestCase(unittest.TestCase, metaclass=TheoryMeta):
    pass
</code></pre>
<p>Then to use it, create a <code>TestCase</code> subclass that has a <code>cases</code> attribute which is a list of arguments to apply to each test method on the test case.</p>
<pre><code>class TestAdd(TestCase):
    cases = [
        # (a, b)
        (1, 1),
        (2, 0),
        (3, 0),
    ]

    def test_add(self, a, b):
        self.assertEqual(a + b, 2)

======================================================================
FAIL: test_add_2 (__main__.__qualname__)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 7, in wrapped
    return func(self, *args)
  File "test.py", line 41, in test_add
    self.assertEqual(a + b, 2)
AssertionError: 3 != 2

----------------------------------------------------------------------
Ran 3 tests in 0.001s
</code></pre>
<p>Depending on your needs and testing setup, you may find it better to just monkey-patch generated test methods on a TestCase rather than using a metaclass. Or you could generate them in an overriden <a href="https://docs.python.org/3/library/unittest.html#unittest.TestLoader" rel="nofollow">loadTestsFrom...</a> on the <code>TestLoader</code>. In any case, use the sample data to generate the testing methods.</p>
</div>
<div class="post-text" itemprop="text">
<p>As it turns out, there's something like this built-in as of Python 3.4 -- <code>subTest</code>: <a href="https://docs.python.org/3.4/library/unittest.html#distinguishing-test-iterations-using-subtests" rel="nofollow noreferrer">https://docs.python.org/3.4/library/unittest.html#distinguishing-test-iterations-using-subtests</a></p>
<p>Not quite as elegant as py.test's parameterized tests, or jUnit Theories, but if you want a standard-lib approach &amp; are using a relatively recent version of Python it's an option.</p>
</div>
<span class="comment-copy">Use <code>try-catch</code></span>
<span class="comment-copy">It's my understanding that all the cases will run, but the test will fail (as it should)</span>
<span class="comment-copy">@AdamSmith: each tuple within <code>cases</code> is essentially a separate test case.  If the first time through the loop fails, then there will be no more iterations through the loop and as such subsequent cases will not be executed.</span>
<span class="comment-copy">That's exactly what I want.  Now I just have to convince my coworkers to drop nose for py.test. :)  Thanks!</span>
<span class="comment-copy"><code>That's exactly what I want. Now I just have to convince my coworkers to drop nose for py.test. :)</code> I use pytest heavily at work and private, and it's about one of the most joyfull experiences when programming in Python. <code>@pytest.mark.parametrize</code> is just one of its great features.</span>
