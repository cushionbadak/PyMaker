<div class="post-text" itemprop="text">
<p>I am considering using the factory_boy library for API testing. An example from the documentation is:</p>
<pre><code>class UserFactory(factory.Factory):
    class Meta:
        model = base.User

    first_name = "John"
    last_name = "Doe"
</code></pre>
<p>For this to work, we need <code>first_name</code>, <code>last_name</code>, etc to be passed as parameters to the <code>__init__()</code> method of the <code>base.User() class</code>. However, if you have many parameters this leads to something like:</p>
<pre><code>class User(object):

    GENDER_MALE = 'mr'
    GENDER_FEMALE = 'ms'

    def __init__(self, title=None, first_name=None, last_name=None, is_guest=None,
             company_name=None, mobile=None, landline=None, email=None, password=None,
             fax=None, wants_sms_notification=None, wants_email_notification=None,
             wants_newsletter=None, street_address=None):

        self. title = title
        self.first_name = first_name
        self.last_name = last_name
        self.company_name = company_name
        self.mobile = mobile
        self.landline = landline
        self.email = email
        self.password = password
        self.fax = fax
        self.is_guest = is_guest
        self.wants_sms_notification = wants_sms_notification
        self.wants_email_notification = wants_email_notification
        self.wants_newsletter = wants_newsletter
        self.company_name = company_name
        self.street_address = street_address
</code></pre>
<p>Now the question is, is this construction considered anti-pattern, and if yes, what alternatives do I have?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You could pack the <code>__init__</code> method's keyword arguments into one dict, and alter the instance's <code>__dict__</code> directly:</p>
<pre><code>class User(object):
    GENDER_MALE = 'mr'
    GENDER_FEMALE = 'ms'
    def __init__(self, **kwargs):
        valid_keys = ["title", "first_name", "last_name", "is_guest", "company_name", "mobile", "landline", "email", "password", "fax", "wants_sms_notification", "wants_email_notification", "wants_newsletter","street_address"]
        for key in valid_keys:
            self.__dict__[key] = kwargs.get(key)

x = User(first_name="Kevin", password="hunter2")
print x.first_name, x.password, x.mobile
</code></pre>
<p>However, this has the drawback of disallowing you from supplying arguments without naming them - <code>x = User("Mr", "Kevin")</code> works with your original code, but not with this code.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.7, <a href="https://docs.python.org/3/library/dataclasses.html" rel="nofollow noreferrer">dataclasses</a> (specified in <a href="https://www.python.org/dev/peps/pep-0557/" rel="nofollow noreferrer">PEP557</a>) were added. This allows you to only write these arguments once and not again in the constructor, since the constructor is made for you:</p>
<pre><code>from dataclasses import dataclass

@dataclass
class User:
    title: str = None
    first_name: str = None
    last_name: str = None
    company_name: str = None
    mobile: str = None
    landline: str = None
    email: str = None
    password: str = None
    fax: str = None
    is_guest: bool = True
    wants_sms_notification: bool = False
    wants_email_notification: bool = False
    wants_newsletter: bool = False
    street_address: str = None
</code></pre>
<p>It also adds a <code>__repr__</code> to the class as well as some others. Note that explicitly inheriting from <code>object</code> is no longer needed in Python 3, since all classes are new-style classes by default.</p>
<p>There are a few drawbacks, though. It is slightly slower on class definition (since these methods need to be generated). You need to either set a default value or add a <a href="https://www.python.org/dev/peps/pep-0526/" rel="nofollow noreferrer">type annotation</a>, otherwise you get a name error. If you want to use a mutable object, like a list, as a default argument, you need to use <code>dataclass.field(default_factory=list)</code> (normally it is discouraged to write e.g. <code>def f(x=[])</code>, but here it actually raises an exception).</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, too many arguments is an antipattern (as stated in Clean Code by RObert C. Martin)</p>
<p>To avoid this, you have two design approaches:</p>
<p><a href="http://www.hillside.net/plop/plop98/final_submissions/P10.pdf" rel="nofollow">The essence pattern</a></p>
<p><a href="http://java.dzone.com/news/factories-builders-and-fluent-" rel="nofollow">The fluent interface/builder pattern</a></p>
<p>These are both similar in intent, in that we slowly build up an intermediate object, and then create our target object in a single step.</p>
<p>I'd recommend the builder pattern, it makes the code easy to read.</p>
</div>
<div class="post-text" itemprop="text">
<p>The biggest risk would be if you had a large number of positional arguments and then ended up not knowing which is which.. Keyword arguments definitely make this better.</p>
<p>As suggested by others, the builder pattern also works quite nicely.
If you have a very large number of fields, you can also do something more generic, like so:</p>
<pre><code>class Builder(object):

    def __init__(self, cls):
        self.attrs = {}
        self.cls = cls

    def __getattr__(self, name):
        if name[0:3] == 'set':
            def setter(x):
                field_name = name[3].lower() + name[4:]
                self.attrs[field_name] = x
                return self
            return setter
        else:
            return super(UserBuilder, self).__getattribute__(name)

    def build(self):
        return self.cls(**self.attrs)

class User(object):

    def __str__(self):
        return "%s %s" % (self.firstName, self.lastName)

    def __init__(self, **kwargs):
        # TODO: validate fields
        for key in kwargs:
            setattr(self, key, kwargs[key])

    @classmethod
    def builder(cls):
        return Builder(cls)

print (User.builder()
  .setFirstName('John')
  .setLastName('Doe')
  .build()) # prints John Doe
</code></pre>
</div>
<span class="comment-copy">You don't need an <code>__init__ ()</code> method on your class to use <code>factory_boy</code> unless it's changed since v2.4.1.</span>
<span class="comment-copy">This isn't an answer, but your issue could be a sign that the User class is trying to do too many things - ideally, you wouldn't want to have to modify the User class if you add, say, notifications over carrier pidgeon. It could also be a sign that its data model can be simplified - you could have a list of phone/fax numbers instead of <code>mobile</code>, <code>landline</code> and <code>fax</code> fields, make guest users a subclass instead of a field, and so on.</span>
<span class="comment-copy">Maybe this is pedantic, but in python the phrase positional argument is <a href="https://docs.python.org/3.4/glossary.html" rel="nofollow noreferrer">defined</a> as not being a keyword argument. Aside from the obligatory <code>self</code> you have no positional arguments in this <code>__init__</code> method. No one needs to worry about if <code>mobile</code> goes in position 10 or 14 since it is specified by keyword.</span>
<span class="comment-copy">You could also use <code>def __init__(self, **kwargs): self.name=kwargs.get('name', None)</code></span>
<span class="comment-copy">If you igonore for a moment the desirability or not of having all this contact fields in the table, with possible maintenance hassles, what is wrong with the code?  These are optional fields so your call will populate as few as them as necessary (which Essence is expressly set to disallow).   The <b>intent</b>'is clear.  A Pattern would likely make code less clear and still not help with table maintenance.  A <b>kwargs</b> approach is nice but hides your field names (what happens if you pass in <i>firstname</i>).</span>
<span class="comment-copy">I prefer this solution, but you loose the code completion. Is there a way not to?</span>
<span class="comment-copy">+1 but for completeness, you should throw <code>TypeError</code> if keyword argument was passed and it's not in <code>valid_keys</code> list.</span>
<span class="comment-copy">So is an "essence" the same thing as a "parameter object" for a constructor?</span>
<span class="comment-copy">Second link is pretty useless since it includes a lot of jumping through Java-specific hoops. There's a good code example in Wikipedia <a href="https://en.wikipedia.org/wiki/Builder_pattern" rel="nofollow noreferrer">en.wikipedia.org/wiki/Builder_pattern</a></span>
