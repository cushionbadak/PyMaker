<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1950386/is-it-pythonic-to-check-function-argument-types">Is it Pythonic to check function argument types?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I've spent the past year working in Java, where I used <code>assert</code> to ensure that parameters passed into a method fulfilled certain preconditions. I'd like to do the same in Python, but I read <a href="https://stackoverflow.com/questions/944592/best-practice-for-python-assert">here</a> that exceptions are better to use than assert.</p>
<p>This is what I have currently:</p>
<pre><code>if type(x) == List:
    x = np.array(x)
else:
    err = ("object passed for x is not a numpy.ndarray or a list")
    assert type(x) is np.ndarray, err
err = ("object passed for n is not an integer")
assert type(n) is IntType, err
err = ("the size of the object passed for x does not equal "
       "n squared")
assert x.size is n**2, err
</code></pre>
<p>Is there a more elegant and/or Pythonic way to approach this? Should I be writing my own exception class to raise when invalid parameters are passed?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>don't limit yourself</strong></p>
<p>You will sometimes be astounded that many functions, classes etc. produce useful output with input more diverse in type that by the original authors intended, as long as it is similiar enough to the orignal types. Don't limit later but unforeseen uses of your code. This is known as the <a href="https://stackoverflow.com/q/11360858/450517">EAFP-Apporach</a>.</p>
<p>So test only where you know that code would produce senseless results. </p>
<p><strong>assert doesn't work always</strong></p>
<p>Also <code>assert</code> won't do anything when you disable assertions (<code>python -O</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>Firstly, you should check objects for type using e.g. <code>if isinstance(x, list)</code>, not using <code>type(x)</code>. This handles e.g. inheritance better (see <a href="https://stackoverflow.com/q/1549801/3001761">Differences between isinstance() and type() in python</a>).</p>
<p>Secondly, does it <em>really matter</em> if <code>x</code> is a list instance? Would a tuple be OK? Some custom list subclass? Any <a href="https://docs.python.org/2/library/collections.html#collections.Sequence" rel="nofollow noreferrer"><code>Sequence</code> object</a>? Anything that can be made a <code>np.array</code>? Python uses strong-but-dynamic <a href="https://docs.python.org/3/glossary.html#term-duck-typing" rel="nofollow noreferrer"><em>"duck typing"</em></a>; the specific type is not as important as it having the correct behaviour. </p>
<p>One option would be something like:</p>
<pre><code>from collections import Sequence

def some_func(x, n):
    if not isinstance(x, (Sequence, np.ndarray)):
        raise TypeError('x must be a sequence or numpy array')
    x = np.ndarray(x)
    if x.size != n ** 2:  # possible TypeError if n**2 doesn't make sense
        raise ValueError('x must be {} long'.format(n ** 2))
    ...
</code></pre>
<p>This will raise either a <code>TypeError</code> (wrong type of argument for <code>x</code> or <code>n</code>) or <code>ValueError</code> (<code>x</code> is the right type but the wrong size), which makes it easier to deal with effectively than getting an <code>AssertionError</code> <em>whatever</em> happens.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, checking parameters is pretty expensive. The usual approach is to make sure that wrong types of parameters eventually breaks the code and hoping that the exception will give enough clues to the developer as to what is wrong.</p>
<p>Some people go one step further and write unit tests to make sure the code breaks in expected ways.</p>
<p>Keep in mind that Python isn't Java. In Java, developers are driven by fear (that some type could be wrong or that someone could see/use something that they shouldn't). Python doesn't support most of these notions because we feel they are a waste of time for small projects and only fools spend their time on huge projects when they could achieve the same (and more) with a bunch of small projects.</p>
<p>That is why we rarely check parameter types. On the positive side, this allows you to pass much more into a function/method than anyone ever intended if these types just behave.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is built around the idea that it is </p>
<blockquote>
<p>Easier to ask for forgiveness than permission</p>
</blockquote>
<p>(EAFP)</p>
<p>So you should go for <code>try: except:</code> approach rather than checking the type.</p>
<p><a href="https://docs.python.org/2/glossary.html" rel="nofollow">https://docs.python.org/2/glossary.html</a></p>
<p>I know it is weird coming from statically typed language, it was the same for me after doing years of C/C++ :)</p>
<p>Maybe something like the following. It is hard to guess what you really want from this numpy array. IMO the try catch should be around the operation you apply to the array, and not its initialisation.</p>
<pre><code>import numpy as np

def my_np_array(l, n):
    # if you want to catch exceptions outside of the function 
    # I would just not check 'l' and not catch anything, np.array accepts 
    # pretty much anything anyway
    try:
        x = np.array(l)
    except TypeError:
        print 'Parameter l is invalid'
        return None

    if x.size != n**2:
        raise TypeError("n^2 must be equal to x.size")

    return x
</code></pre>
</div>
<span class="comment-copy">What are the parameters? What is the function supposed to do? Why don't you just <code>try: x = np.array(x)</code>?</span>
<span class="comment-copy">Why check at all? Just either raise the exception or catch it and handle it there.</span>
<span class="comment-copy">A more Pythonic way of doing this would probably be using <code>try except</code> logic.</span>
<span class="comment-copy">This doesn't really answer your question, but don't use <code>is</code> to compare numeric values, like you did in your last line. It's possible for <code>a is b</code> to be False even when <code>a == b</code> is True.</span>
<span class="comment-copy">I would use if checking and throwing an exception in Python and in Java too. Btw: Never use asserts in Java for productive code. In a Java runtime assert checking is dissabled by default.</span>
<span class="comment-copy">How would you use <code>try except</code> in this case? Can you give an example?</span>
<span class="comment-copy">I added an example but it really depends on what you want to do with your numpy array.</span>
<span class="comment-copy">I don't think there's any circumstance where <code>x = np.array(l)</code> would raise a <code>TypeError</code> - if you pass anything it can't iterate over it just ends up as an array containing that object (see e.g. <code>np.array(None)</code>).</span>
<span class="comment-copy">Yeah I mention that in the comment. IMO the try catch should be around the operation you apply to the array, and not its initialisation, but I don't know what he wants to do with it...</span>
<span class="comment-copy">Ah, okay that makes sense. I use the array for some matrix operations later on, so I should use the try catch around the first of those. Thanks!</span>
