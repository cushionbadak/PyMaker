<div class="post-text" itemprop="text">
<p>I have looked all over, and have not found my answer.</p>
<p>What I am trying to do is create a list of every longitude from 71.42 W to 70.87 W, and every latitude from 42.19 N to 42.54 N for every 1/100th of a latitude/longitude.</p>
<blockquote>
<p>So, kind of like:</p>
<pre><code>(42.19, -71.42)

(42.19, -71.43)

(42.19, -71.44)
</code></pre>
<p><strong>...</strong></p>
<pre><code>(42.20, -71.42)

(42.20, -71.43)
</code></pre>
<p>etc.,</p>
</blockquote>
<p>My code looks like this so far: </p>
<pre><code>latlong = [(42.19, -71.42)]

while latlong[-1][0] &lt; 42.54:
    latlong.append(latlong[-1][0] + 1)

print(latlong)
</code></pre>
<p>The problem is that when I try this code, (which currently is only supposed to do longitude,) I get a <code>TypeError: 'Float' object is not subscriptable.</code></p>
<p>Any help would be greatly appreciated.</p>
<p>Thanks!</p>
<p>EDIT: ANSWERED! Thanks, CoryCramer</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand what you are shooting for, you want a grid with bounded latitudes and longitudes? Then you could do something like</p>
<pre><code>import itertools
longs = [-i / 100.0 for i in range(7087, 7142)]
lats = [i / 100.0 for i in range(4219, 4254)]
latlong = list(itertools.product(lats, longs))
</code></pre>
<p>Output</p>
<pre><code>[(42.19, -70.87), (42.19, -70.88), (42.19, -70.89), ...
 ...
 (42.28, -70.87), (42.28, -70.88), (42.28, -70.89), ...
 ...
 ... (42.53, -71.39), (42.53, -71.4), (42.53, -71.41)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The last item in <code>latlong</code> is a float; floats are not subscriptable. However, your question is unclear. </p>
<p>If your question is "Why isn't a float subscriptable?" then I would ask what you think subscripting a float should do.  </p>
<p>If your question is "Why does it think I'm trying to subscript a float?" then the answer is that you're looking at the last item of latlong, which is now a float, because you appended one; perhaps you meant to append (latlong[-1][0]+1, latlong[-1][1]) instead.</p>
<p>If your question is "How could I better approach this problem?" then I'd advise a list comprehension, one of python's great strengths. Observe what this does:  </p>
<pre><code>latLongList = [(lat/10., long/10.) for lat in range(128,135) for long in range(237,243)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use 2 nested loops.</p>
<pre><code>latlong = []

for lat in range(4219, 4254 + 1):
    for lng in range(-7142, -7087 + 1):
        latlong.append((lat*0.01, lng*0.01))
</code></pre>
<p>I'm using whole numbers and then multiplying them by 0.01, because the <code>range</code> function only accepts whole numbers.</p>
<p>Output:</p>
<pre><code>(42.19, -71.42)
(42.19, -71.41)
(42.19, -71.4)
(42.19, -71.39)
(42.19, -71.38)
...
(42.54, -70.9)
(42.54, -70.89)
(42.54, -70.88)
(42.54, -70.87)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can accomplish this with a simple list comprehension:</p>
<pre><code>latlong = [(lat/100, lon/100) for lat in range(4219, 4255) for lon in range(-7142, -7086)]
</code></pre>
<p>You can find more on list comprehensions (and the language in general) <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">here</a>.</p>
</div>
<span class="comment-copy">After the first iteration, <code>latlong</code> is now <code>[(42.19, -71.42), 43.19]</code>, therefore you cannot do <code>latlong[-1][0]</code> a second time.</span>
<span class="comment-copy">You would need to add 0.01, not 1, at each step, but you're going to run into floating-point precision issues.</span>
