<div class="post-text" itemprop="text">
<p>I am trying to input from stdin.</p>
<p>I think there are many ways to perform it.
Among them, I want to use one of below two ways.
(if there is more efficient alternative, let me know) </p>
<p>first,</p>
<pre><code>line = sys.stdin.readline()
while line != "" :
    # do something
    line = sys.stdin.readline()
</code></pre>
<p>second,</p>
<pre><code>for line in stdin :
    # do something
</code></pre>
<p>which one is more efficient way?
if there is no difference, which one is more Pythonic or closer to standard?</p>
<p>sorry for my poor English.</p>
<p>I looking forward your answer</p>
</div>
<div class="post-text" itemprop="text">
<p>The second (<code>for line in sys.stdin</code>) is more efficient, more DRY, and more Pythonic.</p>
</div>
<div class="post-text" itemprop="text">
<p>The second <code>for line in stdin</code> is more efficient, because it just has to do less.</p>
<p>One way to get a quantitative glance at performance is to look at the bytecode:</p>
<pre><code>In [1]: def a():
   ...:     line = sys.stdin.readline()
   ...:     while line != "":
   ...:         line = sys.stdin.readline()
   ...:

In [2]: def b():
   ...:     for line in stdin:
   ...:         pass
   ...:
</code></pre>
<p>You can use the <a href="https://docs.python.org/3/library/dis.html" rel="nofollow"><code>dis</code></a> module for that:</p>
<pre><code>In [3]: import dis
</code></pre>
<p>This is the first function:</p>
<pre><code>In [4]: dis.dis(a)
  2           0 LOAD_GLOBAL              0 (sys)
              3 LOAD_ATTR                1 (stdin)
              6 LOAD_ATTR                2 (readline)
              9 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             12 STORE_FAST               0 (line)

  3          15 SETUP_LOOP              31 (to 49)
        &gt;&gt;   18 LOAD_FAST                0 (line)
             21 LOAD_CONST               1 ('')
             24 COMPARE_OP               3 (!=)
             27 POP_JUMP_IF_FALSE       48

  4          30 LOAD_GLOBAL              0 (sys)
             33 LOAD_ATTR                1 (stdin)
             36 LOAD_ATTR                2 (readline)
             39 CALL_FUNCTION            0 (0 positional, 0 keyword pair)
             42 STORE_FAST               0 (line)
             45 JUMP_ABSOLUTE           18
        &gt;&gt;   48 POP_BLOCK
        &gt;&gt;   49 LOAD_CONST               0 (None)
             52 RETURN_VALUE
</code></pre>
<p>This is the second one, it has about 50% of the instructions:</p>
<pre><code>In [5]: dis.dis(b)
  2           0 SETUP_LOOP              14 (to 17)
              3 LOAD_GLOBAL              0 (stdin)
              6 GET_ITER
        &gt;&gt;    7 FOR_ITER                 6 (to 16)
             10 STORE_FAST               0 (line)

  3          13 JUMP_ABSOLUTE            7
        &gt;&gt;   16 POP_BLOCK
        &gt;&gt;   17 LOAD_CONST               0 (None)
             20 RETURN_VALUE

In [6]:
</code></pre>
<p>Note that the first needs to make attribute lookups, <code>LOAD_ATTR</code>, and a function call, <code>CALL_FUNCTION</code>, which are expensive and absent in the second bytecode excerpt.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use iter:</p>
<pre><code>from sys import stdin

for line in iter(stdin.readline, "\n"):
    # do something
    print(line)
</code></pre>
<p>Or with raw_input:</p>
<pre><code>for line in iter(raw_input, ""): # python3 -&gt; for line in iter(input, ""):
    # do something
    print(line)
</code></pre>
<p>Your loop won't break using <code>while line != ""</code></p>
<pre><code>In [2]: line = stdin.readline()


In [3]: while line != "" :
   ...:     print(repr(line))
   ...:     line = stdin.readline()
   ...:     
'\n'

'\n'

'\n'

'\n'
</code></pre>
<p>I would use raw_input or input if you are actually taking user input, I also doubt efficiency is going to be an issue whatever you choose.</p>
</div>
