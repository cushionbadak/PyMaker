<div class="post-text" itemprop="text">
<p>Python is wonderfully optimized, but I have a case where I'd like to work around it. It seems for small numbers and strings, python will automatically collapse multiple objects into one. For example:</p>
<pre><code>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = 1
&gt;&gt;&gt; id(a) == id(b)
True
&gt;&gt;&gt; a = str(a)
&gt;&gt;&gt; b = str(b)
&gt;&gt;&gt; id(a) == id(b)
True
&gt;&gt;&gt; a += 'foobar'
&gt;&gt;&gt; b += 'foobar'
&gt;&gt;&gt; id(a) == id(b)
False
&gt;&gt;&gt; a = a[:-6]
&gt;&gt;&gt; b = b[:-6]
&gt;&gt;&gt; id(a) == id(b)
True
</code></pre>
<p>I have a case where I'm comparing objects based on their Python ids. This is working really well except for the few cases where I run into small numbers. Does anyone know how to turn off this optimization for specific strings and integers? Something akin to an anti-intern()?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't turn it off without re-compiling your own version of CPython.  </p>
<p>But if you want to have "separate" versions of the same small integers, you can do that by maintaining your own id (for example a <code>uuid4</code>) associated with the object.  </p>
<p>Since ints and strings are immutable, there's no obvious reason to do this - if you can't modify the object at all, you shouldn't care whether you have the "original" or a copy because there is no use-case where it can make any difference.  </p>
<p>Related:  <a href="https://stackoverflow.com/q/21456318/674039">How to create the int 1 at two different memory locations?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Sure, it <em>can</em> be done, but its never really a good idea:</p>
<pre><code># 
Z =1

class MyString(string):
    def __init__(self, *args):
        global Z
        super(MyString, 
                  self).__init__(*args)
        self.i = Z
        Z += 1

&gt;&gt;&gt; a = MyString("1")
&gt;&gt;&gt; b = MyString("1")
&gt;&gt;&gt; a is b
False
</code></pre>
<p>btw, to compare if objects have the same <code>id</code> just use <code>a is b</code> instead of <code>id(a)==id(b)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer">Python documentation on <code>id()</code></a> says</p>
<blockquote>
<p>Return the “identity” of an object. This is an integer which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same id() value.</p>
<p>CPython implementation detail: This is the address of the object in memory.</p>
</blockquote>
<p>So it's guaranteed to be unique, it must be intended as a way to tell if two variables are bound to the same object.</p>
<p>In <a href="https://stackoverflow.com/a/1094966/478656">a comment on StackOverflow here</a>, Alex Martelli says the CPython implementation is not the authoritative Python, and other correct implementations of Python can and do behave differently in some ways - and that the <a href="https://docs.python.org/2/reference/index.html" rel="nofollow noreferrer">Python Language Reference</a> (PLR) is the closest thing Python has to a definitive specification.</p>
<p>In <a href="https://docs.python.org/2/reference/datamodel.html#objects-values-and-types" rel="nofollow noreferrer">the PLR section on objects</a> it says much the same:</p>
<blockquote>
<p>Every object has an identity, a type and a value. An object’s identity never changes once it has been created; you may think of it as the object’s address in memory. The ‘is‘ operator compares the identity of two objects; the id() function returns an integer representing its identity (currently implemented as its address).</p>
</blockquote>
<p>The language reference doesn't say it's guaranteed to be unique. It also says (re: the object's lifetime):</p>
<blockquote>
<p>Objects are never explicitly destroyed; however, when they become unreachable they may be garbage-collected. An implementation is allowed to postpone garbage collection or omit it altogether — it is a matter of implementation quality how garbage collection is implemented, as long as no objects are collected that are still reachable.</p>
</blockquote>
<p>and:</p>
<blockquote>
<p>CPython implementation detail: CPython currently uses a reference-counting scheme with (optional) delayed detection of cyclically linked garbage, which collects most objects as soon as they become unreachable, but is not guaranteed to collect garbage containing circular references. See the documentation of the gc module for information on controlling the collection of cyclic garbage. Other implementations act differently and CPython may change. Do not depend on immediate finalization of objects when they become unreachable (ex: always close files).</p>
</blockquote>
<p>This isn't actually an answer, I was hoping this would end up somewhere conclusive. But I don't want to delete it now I've quoted and cited.</p>
<p>I'll go with turning your premise around: <code>python will automatically collapse multiple objects into one.</code> - no it willn't, they were never multiple objects, they can't be, because they have the same <code>id()</code>. </p>
<p>If id() is Python's definitive answer on whether two objects are the same or different, your premise is incorrect - this isn't an optimization, it's a fundamental part of Python's view on the world.</p>
</div>
<div class="post-text" itemprop="text">
<p>You shouldn't be relying on these objects to be different objects at all. There's no way to turn this behavior off without modifying and recompiling Python, and which particular objects it applies to is subject to change without notice.</p>
</div>
<div class="post-text" itemprop="text">
<p>This version accounts for wim's concerns about more aggressive internment in the future. It will use more memory, which is why I discarded it originally, but probably is more future proof.</p>
<pre><code>&gt;&gt;&gt; class Wrapper(object):
...     def __init__(self, obj):
...             self.obj = obj

&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = 1
&gt;&gt;&gt; aWrapped = Wrapper(a)
&gt;&gt;&gt; bWrapped = Wrapper(b)
&gt;&gt;&gt; aWrapped is bWrapped
False
&gt;&gt;&gt; aUnWrapped = aWrapped.obj
&gt;&gt;&gt; bUnwrapped = bWrapped.obj
&gt;&gt;&gt; aUnWrapped is bUnwrapped
True
</code></pre>
<p>Or a version that works like the pickle answer (wrap + pickle = wrapple):</p>
<pre><code>class Wrapple(object):
    def __init__(self, obj):
        self.obj = obj

    @staticmethod
    def dumps(obj):
        return Wrapple(obj)

    def loads(self):
        return self.obj

aWrapped = Wrapple.dumps(a)
aUnWrapped = Wrapple.loads(a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, seeing as no one posted a response that was useful, I'll just let you know what I ended up doing.</p>
<p>First, some friendly advice to someone who might read this one day. This is not recommended for normal use, so if you're contemplating it, ask yourself if you have a really good reason. There are good reason, but they are rare, and if someone says there aren't, they just aren't thinking hard enough.</p>
<p>In the end, I just used pickle.dumps() on all the objects and passed the output in instead of the real object. On the other side I checked the id and then used pickle.loads() to restore the object. The nice part of this solution was it works for all types including None and Booleans.</p>
<pre><code>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = 1
&gt;&gt;&gt; a is b
True
&gt;&gt;&gt; aPickled = pickle.dumps(a)
&gt;&gt;&gt; bPickled = pickle.dumps(b)
&gt;&gt;&gt; aPickled is bPickled
False
&gt;&gt;&gt; aUnPickled = pickle.loads(aPickled)
&gt;&gt;&gt; bUnPickled = pickle.loads(bPickled)
&gt;&gt;&gt; aUnPickled is bUnPickled
True
&gt;&gt;&gt; aUnPickled
1
</code></pre>
</div>
<span class="comment-copy">Literal values are implemented in CPython and they thus have they same id values.</span>
<span class="comment-copy">Creating a uuid for each object would not allow for an analysis of references which is is the whole point of the exercise.</span>
<span class="comment-copy">This does not seem like a scalable solution.</span>
<span class="comment-copy">one object, with multiple names</span>
<span class="comment-copy">Thanks for all the info. We can agree to disagree on if Python collapses multiple objects. I'm pretty sure that's exactly what happens at the C level.</span>
<span class="comment-copy">If we can't rely on ids then we shouldn't use 'is' in Python either.</span>
<span class="comment-copy">@aviso: For these objects, you indeed shouldn't be using <code>is</code> either.</span>
<span class="comment-copy">'is' is for comparing if two objects are the same, which is exactly the point of this exercise.</span>
<span class="comment-copy">But then <code>aPickledAgain = pickle.dumps(a); aPickled is aPickledAgain</code> gives <code>False</code> too. This is an incredibly kludgy version of wim's suggestion.</span>
<span class="comment-copy">Yes, that's exactly as expected. The point is to follow an object's references, not their values. Pickling that object lets it be unique where it wouldn't otherwise be. If you pickle it again, you're asking for another unique object. This is not an implementation of wim's suggestion as he too was concerned about the value rather than the object.</span>
<span class="comment-copy">Agree it's kludgy, because you're relying on the assumption that those bytestrings generated by <code>pickle.dumps</code> won't be interned (which isn't guaranteed by implementation, and your code can break in the future without any warning)</span>
<span class="comment-copy">Then provide a better solution. Yours doesn't handle new and arbitrary object types. I see your point about internment. I had a different idea before the pickle one that would handle internment better. I'll put that as another answer.</span>
