<div class="post-text" itemprop="text">
<p>I'm trying to learn how to use Mocks for Python. However I've been struggling with some basic application of it.</p>
<p>Let's say our piece of code that I want to test is this:</p>
<pre><code>class ProductionClass:
    def method(self):
        newone=ProductionClass()
        newone.something(1, 2, 3)
    def something(self, a, b, c):
        pass
    def __init__(self):
        print("Test")
</code></pre>
<p>Which have a method which is simply create a new object of itself and calls a method of that class.</p>
<pre><code>import unittest
import unittest.mock
from ProductionClass import *
from unittest.mock import *

class TestProduction(unittest.TestCase):
    def test_one(self):

        real = ProductionClass()
        real.something = MagicMock()
        real.method()
        real.something.assert_called_once_with(1, 2, 3)

if __name__ == '__main__':
    unittest.main()
</code></pre>
<p>Once again, this is a very simple UnitTest, basically copypasted from 26.5.1.1 of <a href="https://docs.python.org/3/library/unittest.mock-examples.html" rel="nofollow">https://docs.python.org/3/library/unittest.mock-examples.html</a> .</p>
<p>However, this would test if real.something has been called, meanwhile the one i really want to test is if newone.something has been called. </p>
<p>Considering newone is created later when we actually call method()-method how do I use mock to test it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can test this by simply instantiate ProductionClass in setUp method and patch ProductionClass in test_one as follows</p>
<pre><code>import unittest
import ProductionClass
import mock

class TestProduction(unittest.TestCase):
    def setUp(self):
        self.real = ProductionClass.ProductionClass()

    @mock.patch("ProductionClass.ProductionClass")
    def test_one(self, mock1):
        print "From Test : %s " % mock1()
        real = self.real
        real.method()
        mock1().something.assert_called_once_with(1, 2, 3)

if __name__ == '__main__':
    unittest.main()
</code></pre>
<p>I just modified the production class to show that both object refers to the same instance of the mock</p>
<pre><code>class ProductionClass:
    def method(self):
        newone=ProductionClass()
        print "From Production class : %s" % newone
        newone.something(1, 2, 3)
    def something(self, a, b, c):
        pass
    def __init__(self):
        print("Test")
</code></pre>
<p>Output:</p>
<pre><code>Testing started at 5:52 PM ...
Test
From Test : &lt;MagicMock name='ProductionClass()' id='4330372048'&gt; 
From Production class : &lt;MagicMock name='ProductionClass()' id='4330372048'&gt;

Process finished with exit code 0
</code></pre>
<p>You can verify that both object refers the same instance of the mock object by looking the id</p>
<p>PS: I've been using mock package for this example so you probably need to install it using pip.</p>
</div>
<span class="comment-copy">As currently written, I don't think you <i>can</i> test it - you'd have to patch <code>ProductionClass</code>, and then what exactly are you testing? You should refactor the code for easier testing instead (e.g. if <code>method</code> <i>called</i> some other method to get <code>newone</code>, you could patch that).</span>
<span class="comment-copy">you mean something like:  getNewOne(){     return newone }  and on the test class, patch real.getNewOne.something</span>
<span class="comment-copy">Does the factory method <code>method</code> actually need to be a method of the instance (it doesn't use the instance at all in the example) Could you just make it a separate function?</span>
<span class="comment-copy">@David yes, exactly</span>
<span class="comment-copy">It actually give me different ID.  Test From Test : &lt;MagicMock name='ProductionClass' id='52308232'&gt;  From Production class : &lt;MagicMock name='ProductionClass()' id='52240736'&gt; . ---------------------------------------------------------------------- Ran 1 test in 0.036s</span>
<span class="comment-copy">@David did you tried the above code or modified your code by referring to the above code ?. Because when I try running it I am having the same ID I've been using mock package for this example so you probably need to install it using pip.</span>
