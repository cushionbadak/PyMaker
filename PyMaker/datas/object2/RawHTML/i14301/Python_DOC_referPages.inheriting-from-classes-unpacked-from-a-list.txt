<div class="post-text" itemprop="text">
<p>Say I have a list of class objects in Python (<code>A, B, C</code>) and I want to inherit from all of them when building class <code>D</code>, such as:</p>
<pre><code>class A(object):
    pass

class B(object):
    pass

class C(object):
    pass


classes = [A, B, C]

class D(*classes):
    pass
</code></pre>
<p>Unfortunately I get a syntax error when I do this. How else can I accomplish it, other than by writing <code>class D(A, B, C)</code>? (There are more than three classes in my actual scenario)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can dynamically create classes using <a href="https://docs.python.org/3/library/functions.html#type" rel="noreferrer"><code>type</code></a> keyword, as in:</p>
<pre><code>&gt;&gt;&gt; classes = [A, B, C]
&gt;&gt;&gt; D = type('D', tuple(classes), {})
&gt;&gt;&gt; type(D)
&lt;class 'type'&gt;
&gt;&gt;&gt; D.__bases__
(&lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;)
</code></pre>
<p>see <a href="https://stackoverflow.com/questions/15247075/how-can-i-dynamically-create-derived-classes-from-a-base-class">15247075</a> for more examples.</p>
</div>
<div class="post-text" itemprop="text">
<p>One way will be to create a decorator that then creates a new class for us using <code>type()</code>:</p>
<pre><code>def modify_bases(bases):
    def decorator(cls):
        return type(cls.__name__, tuple(classes), dict(cls.__dict__))
    return decorator
...
&gt;&gt;&gt; %cpaste
@modify_bases(classes)
class D:
    x = 1
    y = 2

&gt;&gt;&gt; D.mro()
[&lt;class '__main__.D'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;type 'object'&gt;]
</code></pre>
</div>
<span class="comment-copy"><a href="http://ideone.com/fXvAHL" rel="nofollow noreferrer">In Python 3, you'll be able to just do that.</a></span>
<span class="comment-copy">Pure awesomeness to a literally impossible situation. +1 :)</span>
<span class="comment-copy">Pure awesomeness to decorate a literally impossible situation. +1 :D</span>
