<div class="post-text" itemprop="text">
<p>I have a dictionary with name dic in python, where the keys are strings and the corresponding values are integers. </p>
<pre><code>dic ={ 'a' : 2, 'b' : 3, 'c':4, 'd':5 }.
</code></pre>
<p>Note that <code>2+3+4+5=14</code>. </p>
<p>Now I need to impose an order to this dictionary, say the order is from <code>'a'</code>, to <code>'b'</code>, and then to <code>'c'</code>.  Then, I randomly generate 3 numbers from the list of intergers from 1 to 14, say, <code>2</code>, <code>9</code>, and <code>10</code>. Then, these 3 numbers would correspond to the keys <code>'a'</code>, <code>'c'</code>, and <code>'d'</code>.</p>
<p>All I can think of is to use <code>dic.keys</code> and <code>dic.values</code> to create two corresponding lists and then calculate the presums and do it in a very trivial way.</p>
<p>Is there a default python function to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe you can consider using <a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow"><code>random.sample</code></a> like so.</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; p = 2*['a'] + 3*['b'] + 4*['c'] + 5*['d']
&gt;&gt;&gt; random.sample(p, 3)
['b', 'b', 'a']
</code></pre>
<p>From the docs, <code>random.sample</code> <em>returns a k length list of unique elements chosen from the population sequence or set</em>. It is <em>used for random sampling without replacement</em>. Therefore, the largest sample you can  get from a population of size 14 is size 14, and a sample of size 14 is guaranteed to be a permutation of <code>p</code>. </p>
<p>Alternatively you can use your method of selecting an integer between 1 and 14 inclusive to make weighted random choices using <code>p</code> like this:</p>
<pre><code>&gt;&gt;&gt; k = random.choice(range(1, 15))
&gt;&gt;&gt; p[k-1]
'b'
</code></pre>
<p>or, if you don't need the "index" of the selected element:</p>
<pre><code>&gt;&gt;&gt; random.choice(p)
'c'
</code></pre>
<p>However, note that by using <code>random.choice</code> repeatedly, you will be sampling <em>with</em> replacement (unless you have some mechanism of removing selecting elements from the population). This may be what you want though.</p>
<p>To construct your population <code>p</code> dynamically using your dictionary, you can do something like this:</p>
<pre><code>&gt;&gt;&gt; sum((w*[k] for k, w in dic.items()), [])
['d', 'd', 'd', 'd', 'd', 'a', 'a', 'c', 'c', 'c', 'c', 'b', 'b', 'b']
</code></pre>
<p>Note that the letters will not necessarily be in order as shown above! But anyways, you can sort them easily using Python's built in <code>sorted</code> function.</p>
<pre><code>&gt;&gt;&gt; sum(sorted(w*[k] for k, w in dic.items()), [])
['a', 'a', 'b', 'b', 'b', 'c', 'c', 'c', 'c', 'd', 'd', 'd', 'd', 'd']
</code></pre>
</div>
<span class="comment-copy">Please show us what you have got so far.</span>
<span class="comment-copy">Why would <code>2</code>, <code>9</code>, and <code>10</code> correspond to <code>'a'</code>, <code>'c'</code>, and <code>'d'</code>? Was that arbitrarily chosen?</span>
<span class="comment-copy">are you trying to randomly sample the keys with the given probabilities <code>(n/sum(...))</code>?</span>
<span class="comment-copy">@TigerhawkT3: they happen to match to the cumulative sum of the values for those keys.</span>
<span class="comment-copy">Sounds like you are trying to make a <a href="http://stackoverflow.com/questions/3679694/a-weighted-version-of-random-choice">weighted random choice</a>, with the keys being the available choices and the values the weights..</span>
