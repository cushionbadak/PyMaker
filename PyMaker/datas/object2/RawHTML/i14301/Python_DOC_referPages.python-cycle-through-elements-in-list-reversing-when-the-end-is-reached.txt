<div class="post-text" itemprop="text">
<p>I have a list that looks like:</p>
<pre><code>a = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10']
</code></pre>
<p>I need to cycle through this list one element at a time but when the end of the list is reached, the cycle needs to be <em>reversed</em>.</p>
<p>For example, using <a href="https://docs.python.org/2/library/itertools.html#itertools.cycle" rel="nofollow">itertools.cycle</a>:</p>
<pre><code>from itertools import cycle
a_cycle = cycle(a)
for _ in range(30):
    print a_cycle.next()
</code></pre>
<p>I get:</p>
<pre><code>01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 01, 02, 03, 04, 05, 06, 07, 08, 09, 10
</code></pre>
<p>but what I need is:</p>
<pre><code>01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 10, 09, 08, 07, 06, 05, 04, 03, 02, 01, 01, 02, 03, 04, 05, 06, 07, 08, 09, 10
</code></pre>
<p>I need to cycle through <code>a</code> for a fixed number of times, say 200.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can <a href="https://docs.python.org/2/library/itertools.html#itertools.cycle" rel="nofollow"><code>cycle</code></a> the <a href="https://docs.python.org/2/library/itertools.html#itertools.chain" rel="nofollow"><code>chain</code></a> of your <code>a</code> and <a href="https://docs.python.org/2/library/functions.html?#reversed" rel="nofollow"><code>reversed</code></a> <code>a</code>, eg:</p>
<pre><code>from itertools import cycle, islice, chain

a = range(1, 11)
b = reversed(a)
c = cycle(chain(a, b))
d = list(islice(c, 100)) # `c` is infinite - hence the `islice` to stop at some point...
</code></pre>
<p>Which gives you:</p>
<pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
</code></pre>
<p><strong>Note</strong>: If <code>a</code> is an exhaustable iterator, you will need to make a copy of <code>a</code> first. But given your example, this will be fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>Do you actually need to <em>cycle</em> through the list, as in go forward and backwards forever?  Or just <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow"><code>.reverse()</code></a> the list?</p>
<pre><code>print a + a[::-1]
</code></pre>
<p>Will do what you describe.  The <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow"><code>reversed()</code></a> built-in also works, but you need to <code>chain()</code> it, as it returns an iterator, e.g.:</p>
<pre><code>print list(itertools.chain(a, reversed(a)))
</code></pre>
<p>You can call <code>itertools.cycle()</code> on either result to get an infinite iterator of the list concatenated with its reverse.</p>
</div>
<div class="post-text" itemprop="text">
<p>Make a copy of list a, reverse it, then append it.</p>
<pre><code>a = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10']
b = a[:]
b.reverse()
a = a + b
</code></pre>
<p>or based on a comment suggestion.</p>
<pre><code>a = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10']
b = a[::-1]
a = a + b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def forwardback(lst):
    tot = len(lst)
    while 1:
        for i in xrange(tot):
            yield lst[i]
        for i in xrange(tot-1,-1,-1):
            yield lst[i]
</code></pre>
<p>or (using <code>cycle</code>'s approach, which works for all iterators)</p>
<pre><code>def forwardback(lst):
    saved = []
    for elem in lst:
        yield elem
        saved.append(elem)
    while saved:
        for elem in reversed(saved):
            yield elem
        for elem in saved:
            yield elem
</code></pre>
</div>
<span class="comment-copy">Do you need this to be indefinite?</span>
<span class="comment-copy">@ScironicI need it to run until an outer <code>for</code> loop (not shown in question) exhausts its elements.</span>
<span class="comment-copy">Dimo414's solution should work, you can just cycle through that.</span>
<span class="comment-copy">That was me, sorry. I sloppily misread your code. Saw the <code>i in range(30)</code> and the leading zeros and thought you're among the many people not showing actual data. I undid the vote. Wouldn't have happened if you had written <code>for _ in range(30)</code>, btw, as that's the convention for values you're not going to use. But it was really my fault and I should take a break.</span>
<span class="comment-copy">No worries, I removed the question about the downvote after realizing it was gone. I'll change <code>i</code> for <code>_</code>, thanks for the suggestion!</span>
<span class="comment-copy"><code>.reverse()</code> doesn't return anything so wouldn't work. use <code>a+a[::-1]</code> instead</span>
<span class="comment-copy">@Scironic is correct, <code>a.reverse()</code> returns <code>None</code>.</span>
<span class="comment-copy">@Scironic absolutely, thanks!</span>
<span class="comment-copy">your edit still doesn't work as lists are mutable, so assigning it to a new variable and reversing it reverses both lists. You would need to copy to do this, but it's easier to use a reverse slice</span>
<span class="comment-copy">@dimo414, cool your latest works :)</span>
<span class="comment-copy">see dimo414s answer, you can just use reverse slicing: <code>a[::-1]</code></span>
<span class="comment-copy">Note: <code>i</code> is not yet defined when you do <code>yield lst[i]</code> in your 2nd code block. And why use indices when you can directly iterate over iterables? You can use <code>reversed()</code> to do reverse iteration on any iterable, and extended slice notation on things like lists, eg  <code>for v in reversed(saved):</code> or <code>for v in saved[::-1]:</code>.</span>
<span class="comment-copy">Thanks. Fixed typo. Had copied previous program and edited it. Also, you're right about <code>reversed</code>. I wasn't aware it returned an iterator. I didn't want to use more space and re-recreate the list.</span>
