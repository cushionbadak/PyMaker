<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3877230/why-does-id-id-and-id-id-in-cpython">Why does id({}) == id({}) and id([]) == id([]) in CPython?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>Here is the simple Python code: What's the difference between Case 1 and Case 2 -- why am I getting result as False in first case and True in other? Why are the <code>id</code>s equal in the Case 2? Also does <code>dir(object)</code> call <code>object._dir__()</code> internally? If so the return object/results of two calls should it be the same.</p>
<pre><code>class Hello:
    def __init__(self):
        self.a1 = "a1"


hello = Hello()
print(hello)

# Case 1
var1 = dir(hello)
var2 = hello.__dir__()
print(id(var1), id(var2), id(var1) == id(var2))

# Case 2
print(id(dir(hello)), id(hello.__dir__()), id(dir(hello)) == id(hello.__dir__()))
print(dir(hello) == hello.__dir__())
</code></pre>
<p><strong>Output</strong></p>
<pre class="lang-none prettyprint-override"><code>&lt;__main__.Hello object at 0x7f320828c320&gt;
139852862206472 139852862013960 False
139852862014024 139852862014024 True
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's just a coincidence that you're ever getting <code>True</code>. (Well, not a <em>coincidence</em>, since the implementation of CPython makes it very likely… but it's not something the language requires.)</p>
<p>In case 1, you have two different <code>dict</code>s in <code>var1</code> and <code>var2</code>. They're both alive at the same time, so they can't have the same <code>id</code>.</p>
<p>In case 2, you again have two different <code>dict</code>s—but this time, you aren't storing them anywhere; as soon as you call <code>id</code> on one, you release it, which means it can get garbage collected<sup>*</sup> before you get the other one,<sup>**</sup> which means it can end up reusing the same <code>id</code>.<sup>***</sup></p>
<p>Notice that the docs for <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow"><code>id</code></a> say:</p>
<blockquote>
<p>This is an integer which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same <code>id()</code> value.</p>
</blockquote>
<p>If you actually want to test whether two expressions refer to the same object, use <code>is</code>, don't compare their <code>id</code>s.</p>
<hr/>
<p>Your edited question also asks:</p>
<blockquote>
<p>Also does dir(object) calls object._dir__() internally? </p>
</blockquote>
<p>According to <a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow"><code>dir</code></a>:</p>
<blockquote>
<p>If the object has a method named <code>__dir__()</code>, this method will be called and must return the list of attributes.</p>
</blockquote>
<p>And the data model section on <a href="https://docs.python.org/3/reference/datamodel.html#object.__dir__" rel="nofollow"><code>__dir__</code></a> says:</p>
<blockquote>
<p>Called when <code>dir()</code> is called on the object. A sequence must be returned. <code>dir()</code> converts the returned sequence to a list and sorts it.</p>
</blockquote>
<p>Then you say:</p>
<blockquote>
<p>If so the return object of two calls should be the same.</p>
</blockquote>
<p>Well, it depends on what you mean by "the same". It should return <em>an equal</em> value (since nothing has changed), but it's not going to be <em>the identical</em> value, which is what you're trying to test for. (If it isn't obvious why <code>dir</code> gives you a new list each time, it should still be clear that it <em>must</em> do so from the fact that "<code>dir()</code> converts the returned sequence to a list and sorts it"…)</p>
<hr/>
<p><sub>* Because CPython uses reference counting as its primary garbage collection mechanism, "can be collected" generally means "will be collected immediately". This isn't true for most other Python implementations.</sub></p>
<p><sub>** If the order in which parts of your expression get evaluated isn't clear to you from reading the docs, you can try <code>dis.dis('id(dir(hello)) == id(hello.__dir__())')</code> to see the actual bytecodes in order.</sub></p>
<p><sub>*** In CPython, the <code>id</code> is just the address of the <code>PyObject</code> struct that represents the object; if one <code>PyObject</code> gets freed and another one of the same type gets allocated immediately after, it will usually get the same address.</sub></p>
</div>
<span class="comment-copy">If you don't think your question is a duplicate, add a comment explaining why. And if the answers (either to the original question, or to this one) don't cover everything you wanted to know, add a comment. Just editing your question repeatedly and hoping we'll notice the changes only works if you get really lucky with the timing.</span>
<span class="comment-copy">@abarnert, I'm very new to stackoverflow. I'll do it from next time, Thanks for letting me know.</span>
<span class="comment-copy">No problem. I wouldn't have said anything, except that I happened to notice one of your edits just as I was about to close the page, and answered it by editing my answer, and I didn't want to give the false impression that you can count on that kind of timing every day.</span>
<span class="comment-copy">Having same id for dir(object) and object._dir__() is what confused me, Now it's clear. Thanks.  Also if dir(object) calls object.__dir__(), why the call to __dir__() is it not showing up in disassembler code?    dis.dis('dir(hello)')</span>
