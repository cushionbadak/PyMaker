<div class="post-text" itemprop="text">
<p>I quite like using pathlib for path management in python, but the drawback of using this package is that a lot of commands, like <code>shutil.copy</code>, <code>.move</code>, the 
builtin <code>open</code> requires a string and not a PosixPath object, giving as error </p>
<pre><code>TypeError: coercing to Unicode: need string or buffer, PosixPath found
</code></pre>
<p>The logical solution is of course to use <code>str()</code>. </p>
<p>My question is how would it be possible (if it would be) to modify pathlib objects such that a call like <code>open(pathlib.PosixPath)</code> would work without the use of <code>str()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer by @Navith is what you should now do in python 3.4. However, <a href="https://www.python.org/dev/peps/pep-0519/" rel="noreferrer">PEP-519</a> is proposed and accepted in python 3.6 to address this valid concern.</p>
<blockquote>
<p>This PEP proposes a protocol for classes which represent a file system path to be able to provide a str or bytes representation. <em>Changes to Python's standard library are also proposed to utilize this protocol where appropriate</em> to facilitate the use of path objects where historically only str and/or bytes file system paths are accepted.</p>
</blockquote>
<p>So in python 3.6 the standard library methods you refer to <a href="https://www.python.org/dev/peps/pep-0519/#implementation" rel="noreferrer">now accept Paths</a>, and the answer to your question is use python 3.6.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path" rel="noreferrer"><code>Path</code></a> objects have <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.open" rel="noreferrer"><code>open</code></a>, <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.rmdir" rel="noreferrer"><code>rmdir</code></a>, <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.chmod" rel="noreferrer"><code>chmod</code></a>, ... methods that work the way you'd expect.</p>
<pre><code>&gt;&gt;&gt; import pathlib
&gt;&gt;&gt; a_path = pathlib.Path("a.txt")
&gt;&gt;&gt; a_txt = a_path.open("w", encoding="UTF-8")
&gt;&gt;&gt; a_txt
&lt;_io.TextIOWrapper name='a.txt' mode='w' encoding='UTF-8'&gt;
</code></pre>
</div>
<span class="comment-copy">Find the location of <code>open(str_path)</code> in the source code of library and then add one line at top of this function, <code>str_path = str(path)</code>, In this way if you pass a posixPath then it would be converted to <code>str</code> implicitly and if a <code>str</code> is passed already then there would be no change.</span>
<span class="comment-copy">This is a great addition to the standard library. Unfortunately, it still leaves a lot of third party libraries that expect string paths. I guess we need to point them to PEP-519 and ask them to support Pathlike objects. It would be nice if there were a cleaner workaround than remembering to put <code>str</code> everywhere.</span>
<span class="comment-copy">Ops, didn't notice the open method. Still, it doesn't solve the problems for other functions, like copying, moving  etc etc.</span>
<span class="comment-copy">Functions like <code>shutil.move</code> rely on C-programmed functions that don't bother to <code>str()</code> something before giving up. Manual conversion seems to be the only solution for those kinds of functions.</span>
<span class="comment-copy">Even subclassing <code>collections.UserString</code>, <code>Path</code>, and <code>PurePosixPath</code> and sending that to something like <code>shutil.move</code> will just raise an illegal type exception from <code>os.rename</code>.</span>
