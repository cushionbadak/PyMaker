<div class="post-text" itemprop="text">
<p>I have Python lists saved as string representations like this:</p>
<pre><code>a = "['item 1', 'item 2', 'item 3']"
</code></pre>
<p>and I'd like to convert that string to a list object. I tried to just load it directly, or use <code>list(a)</code> but it just splits every character of the string. I suppose I could manually parse it by removing the first character, removing the last one, splitting based on <code>,</code> and then remove the single quotes.. but isn't there a better way to convert it directly since that string is an exact representation of what a list looks like?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try the <a href="https://docs.python.org/2/library/functions.html#eval" rel="nofollow noreferrer">eval function</a></p>
<pre><code>&gt;&gt;&gt; a = "['item 1', 'item 2', 'item 3']"
&gt;&gt;&gt; eval(a)
['item 1', 'item 2', 'item 3']
&gt;&gt;&gt; eval(a)[2]
'item 3'
</code></pre>
<p>Just be aware that eval() could be insecure depending on the input.</p>
<p><strong>Edit:
Dear google user, if you want to convert a representation of a list to a list use <a href="https://docs.python.org/3/library/ast.html#ast.literal%5Feval" rel="nofollow noreferrer">ast</a> as <a href="https://stackoverflow.com/a/30510226/263989">@C.B. suggested</a>. This answer is not correct.</strong></p>
<p>From the <a href="https://docs.python.org/3/library/ast.html#ast.literal%5Feval" rel="nofollow noreferrer">ast.literal_eval</a> docs:</p>
<blockquote>
<p>Safely evaluate an expression node or a string containing a Python literal or container display. The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and None.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/2/library/ast.html" rel="nofollow"><code>ast</code></a> module</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; list_as_string = "['item 1', 'item 2', 'item 3']"
&gt;&gt;&gt; _list = ast.literal_eval(list_as_string)
&gt;&gt;&gt; _list
['item 1', 'item 2', 'item 3']
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy"><code>a.lstrip('[').rstrip(']').split(',')[0]</code>. Maybe also look at regex, it;ll be useful in the future ;)</span>
<span class="comment-copy"><code>eval(a)</code> worked exactly as expected. Thanks!</span>
<span class="comment-copy">I'm the author of the selected answer and I came here(1 year later) to say that this is how it should be done. Use <code>ast</code> not <code>eval</code></span>
