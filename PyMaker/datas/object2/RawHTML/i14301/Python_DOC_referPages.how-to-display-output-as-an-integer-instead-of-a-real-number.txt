<div class="post-text" itemprop="text">
<p>This isn't my exact code, but I'm basically doing this</p>
<pre><code>    EnemyAttack = int(10)
    Move = input("| Cast an attack spell(1) | Cast a defense spell(2) |")
    if Move = ("2"):
       print ("You have casted a defense spell for 2 turns")
       EAN = 2
    if EAN &gt;= 1:
       EnemyAttack = EnemyAttack / 2
       EAN = EAN - 1
    Health = Health - EnemyAttack
</code></pre>
<p>The code does halve the enemy's attack, however the output is not what i want it to be.</p>
<pre><code>print ("You have been damaged for {}".format(EnemyAttack)
</code></pre>
<p>This displays </p>
<pre><code>84.0 
</code></pre>
<p>I want it to output </p>
<pre><code>84
</code></pre>
<p>I have already defined the EnemyAttack as an integer, so I'm confused why it's displayed as a real number. Any solutions? Also if you can, comment using a simple code that I can convert into my situation. Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could format it without decimals, rounding it to the nearest whole number:</p>
<pre><code>print("You have been damaged for {:.0f}".format(EnemyAttack))
</code></pre>
<p><code>:</code> is a required separator; everything after it defines formatting instructions for that value. We use the <code>f</code> floating point formatter here, and <code>.0</code> means <em>zero digits after the decimal point</em>. When you do that the decimal point itself is also dropped.</p>
<p>This has the advantage that the number will be rounded <em>up</em> as needed:</p>
<pre><code>&gt;&gt;&gt; EnemyAttack = 84.0
&gt;&gt;&gt; print("You have been damaged for {:.0f}".format(EnemyAttack))
You have been damaged for 84
&gt;&gt;&gt; EnemyAttack = 84.6
&gt;&gt;&gt; print("You have been damaged for {:.0f}".format(EnemyAttack))
You have been damaged for 85
</code></pre>
<p>See the <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow"><em>Formatting Specification Mini-Language</em> section</a> for the details.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python you cannot define the type of a variabelname.
If you want integer division, you have to use the integer division operator <code>//</code>:</p>
<pre><code>EnemyAttack = EnemyAttack // 2
</code></pre>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/22617/format-numbers-to-strings-in-python">Format numbers to strings in Python</a></span>
<span class="comment-copy">If it's <code>EnemyAttack</code> that it's outputting, then why is it 84 instead of 10 or 5? Are you sure you've transferred your code correctly?</span>
<span class="comment-copy">@SuperBiasedMan The 10 was an example, in the real code it was 84, sorry if it caused you any confusion</span>
<span class="comment-copy">May i ask what the f is for? The code works perfectly now thanks. But what is the purpose of the f after the 0?</span>
<span class="comment-copy">@MaxyPicky: I linked you to the documentation; everything after the <code>:</code> is the formatting specification (everything before is specifying what value to interpolate and format, omitting it uses auto-numbering).</span>
<span class="comment-copy">Quick, and maybe irrelevent, question, but if i place the {.0f} format where a string will take place, will an error occour? e.g.&lt;pre&gt;    word = ("Hello") print ("He said {.0f}.".format(word))    &lt;code&gt;</span>
<span class="comment-copy">@MaxyPicky: yes, because string objects know nothing about the <code>f</code> formatting code. <code>str.format()</code> delegates formatting to the value itself, so <code>'Hello'.__format__('.0f')</code>, which fails.</span>
<span class="comment-copy">+1 This is the root of the problem. My impression is the OP seems to believe that the {} format is not clever enough to recognise and correctly format an integer when it's passed one.</span>
