<div class="post-text" itemprop="text">
<p>Is there a way to show float value in Python 2 like Python 3 does?</p>
<p>Code:</p>
<pre><code>text = "print('hello, world')"

step = 100.0 / len(text)
result = 0.0

for _ in text:
    result += step

print result
print step
print result == 100.0
</code></pre>
<p>Python 2.7.9</p>
<pre><code>100.0
4.7619047619
False
</code></pre>
<p>Python 3.4.3</p>
<pre><code>99.99999999999997
4.761904761904762
False
</code></pre>
<p>I'm interested in result variable. not in step. Sorry for insufficient explanation what I want. :)</p>
</div>
<div class="post-text" itemprop="text">
<p><code>repr</code> shows more digits (I'm guessing just enough to reproduce the same float):</p>
<pre><code>&gt;&gt;&gt; print result
100.0
&gt;&gt;&gt; print repr(result)
99.99999999999997
&gt;&gt;&gt; result
99.99999999999997

&gt;&gt;&gt; print step
4.7619047619
&gt;&gt;&gt; print repr(step)
4.761904761904762
&gt;&gt;&gt; step
4.761904761904762
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Running your code in Python2 or Python3 calculates the <em>same</em> value for <code>result</code> and <code>step</code>. The only difference is in the way the float gets printed. </p>
<p>In Python2.7 (or Python3) you can control the number of digits shown after the decimal by using <code>str.format</code>:</p>
<pre><code>print('{:.14f}'.format(result))
</code></pre>
<p>prints</p>
<pre><code>99.99999999999997
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Storing decimal floating point numbers in binary causes rounding issues when representing them in decimal. This is a fact of (computer programming) life in any language, but Python2 deals with this differently than python3 (see: <a href="https://stackoverflow.com/questions/25898733/">25898733</a>).</p>
<p>Using <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">string formatting</a> you can make your script produce the same output in python2 as in python3 and also have a more human readable output:</p>
<pre><code>text = "print('hello, world')"
step = 100.0 / len(text)
result = 0.0

for _ in text:
    result += step

print ("{0:.1f}".format(result))
print ("{0:.1f}".format(step))

print ("{0:.1f}".format(result) == "100.0")  # kludge to compare floats
</code></pre>
<p><strong>Output</strong>:</p>
<pre><code>100.0
4.8
True
</code></pre>
</div>
<span class="comment-copy">Strange behavior for built-in type as for me, but at least it works.</span>
<span class="comment-copy">I guess the Python makers agree with you, given that they apparently "fixed" it in Python 3 :-)</span>
<span class="comment-copy">Whoops, I didn't explain what I want carefully. Question updated.</span>
<span class="comment-copy"><i>saw that you changed your answer</i> I can't reformat <code>result</code> with <code>.format</code> because Python 2 shows that variable is equal to 100.0, not to 99.999.. and it's frustrating</span>
<span class="comment-copy">Python2 shows <code>result == 100.0</code> is False.</span>
<span class="comment-copy">Yes, but at the same time Python2 shows <code>result</code> is 100.0. I see this behavior frustrating, so I want Python 2 to show this value as 99.99 as Python 3 do. That's the question.</span>
<span class="comment-copy">It's all good until you don't want to compare this variable to another. It is possible to write <code>float("{0:.1f}".format(result))</code>, but it's totally ugly.</span>
