<div class="post-text" itemprop="text">
<p>I have seen something interesting <a href="https://codegolf.stackexchange.com/questions/54/tips-for-golfing-in-python/41742#41742">here</a>, saying you can store lookup tables at magic numbers.</p>
<p>I have tried using brute-force to find the magic number, but all the results are incorrect.</p>
<p>How do I find the correct magic number for a certain lookup table?
Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>As the author of that answer puts it:</p>
<blockquote>
<p>The magic number stores the table as a bitstring, with the <code>n</code>-th
  digit (from the end) corresponding to the <code>n</code>th table entry</p>
</blockquote>
<p>Here's a really simple example:</p>
<pre><code>Entry   Value   Bit
-----   -----   ---
  0     True     1
  1     False    0
  2     False    0
  3     True     1
                 b  # needed to indicate
                 0  # 'binary number'
</code></pre>
<p>So the <em>"magic number"</em> for this lookup table, reading <strong>up from the bottom</strong>, is:</p>
<pre><code>&gt;&gt;&gt; 0b1001  # (1 * 8) + (0 * 4) + (0 * 2) + (1 * 1)
9
</code></pre>
<p>Or, to rotate it:</p>
<pre><code>              3      2      1      0      | Entry
              True   False  False  True   | Value
0      b      1      0      0      1      | Bit    # -&gt; 0b1001
</code></pre>
<hr/>
<p>In terms of extracting the output, the <a href="https://docs.python.org/3/reference/expressions.html#shifting-operations" rel="nofollow">right-shift binary operator</a> <code>x &gt;&gt; y</code> moves all bits in <code>x</code> right by <code>y</code> places, truncating the last <code>y</code> bits:</p>
<pre><code>&gt;&gt;&gt; for x in range(4):
        print(x, '0b{:04b}'.format(9&gt;&gt;x))


0 0b1001
1 0b0100
2 0b0010
3 0b0001
</code></pre>
<p>and the <a href="https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations" rel="nofollow">bitwise AND</a> <code>&amp; 1</code> tells you the value of the last bit. Getting the results back out:</p>
<pre><code>&gt;&gt;&gt; for x in range(4):
    print(x, 9&gt;&gt;x&amp;1)


0 1
1 0
2 0
3 1
</code></pre>
<hr/>
<p>Another example:</p>
<pre><code>Entry   Value   Bit
-----   -----   ---
  0     True     1
  1     False    0
  2     True     1
  3     False    0
                 b  # needed to indicate
                 0  # 'binary number'
</code></pre>
<p>So the <em>"magic number"</em> for this lookup table, reading <strong>up from the bottom</strong>, is:</p>
<pre><code>&gt;&gt;&gt; 0b0101  # (0 * 8) + (1 * 4) + (0 * 2) + (1 * 1)
5
</code></pre>
<p>Or, to rotate it:</p>
<pre><code>              3      2      1      0      | Entry
              False  True   False  True   | Value
0      b      0      1      0      1      | Bit    # -&gt; 0b0101
</code></pre>
</div>
<span class="comment-copy">Ohhhh, I thought you had to brute-force it. Oh, well thanks. I'll mark this as the accepted answer.</span>
<span class="comment-copy">And I got the same table as you when I was doing it <b>randomly</b>!</span>
<span class="comment-copy">When 8 was the magic number, it didn't work correctly.</span>
<span class="comment-copy">@AnirudhBalaji what do you mean <i>"didn't work correctly"</i>? If the magic number is <code>8</code>, <code>magic_num&gt;&gt;x&amp;1 == 1</code> <b>only</b> when <code>x == 3</code>.</span>
<span class="comment-copy"><i>but</i> you said you were reading it from the bottom up! I did that too, and the binary representation I got: <code>0b1000</code></span>
