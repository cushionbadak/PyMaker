<div class="post-text" itemprop="text">
<p>I would like to check whether an optional argparse argument has been set by the user or not.</p>
<p>Can I safely check using isset?</p>
<p>Something like this:</p>
<pre><code>if(isset(args.myArg)):
    #do something
else:
    #do something else
</code></pre>
<p>Does this work the same for float / int / string type arguments?</p>
<p>I could set a default parameter and check it (e.g., set myArg = -1, or "" for a string, or "NOT_SET").  However, the value I ultimately want to use is only calculated later in the script.  So I would be setting it to -1 as a default, and then updating it to something else later. This seems a little clumsy in comparison with simply checking if the value was set by the user.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that optional arguments (specified with <code>--</code>) are initialized to <code>None</code> if they are not supplied. So you can test with <code>is not None</code>. Try the example below:</p>
<pre><code>import argparse as ap

def main():
    parser = ap.ArgumentParser(description="My Script")
    parser.add_argument("--myArg")
    args, leftovers = parser.parse_known_args()

    if args.myArg is not None:
        print "myArg has been set (value is %s)" % args.myArg
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As @Honza notes <code>is None</code> is a good test.  It's the default <code>default</code>, and the user can't give you a string that duplicates it.</p>
<p>You can specify another <code>default='mydefaultvalue</code>, and test for that.  But what if the user specifies that string?  Does that count as setting or not?</p>
<p>You can also specify <code>default=argparse.SUPPRESS</code>.  Then if the user does not use the argument, it will not appear in the <code>args</code> namespace.  But testing that might be more complicated:</p>
<pre><code>args.foo # raises an AttributeError
hasattr(args, 'foo')  # returns False
getattr(args, 'foo', 'other') # returns 'other'
</code></pre>
<p>Internally the <code>parser</code> keeps a list of <code>seen_actions</code>, and uses it for 'required' and 'mutually_exclusive' testing.  But it isn't available to you out side of <code>parse_args</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think using the option <code>default=argparse.SUPPRESS</code> makes most sense. Then, instead of checking if the argument is <code>not None</code>, one checks if the argument is <code>in</code> the resulting namespace.</p>
<h3>Example:</h3>
<pre class="lang-py prettyprint-override"><code>import argparse

parser = argparse.ArgumentParser()
parser.add_argument("--foo", default=argparse.SUPPRESS)
ns = parser.parse_args()

print("Parsed arguments: {}".format(ns))
print("foo in namespace?: {}".format("foo" in ns))
</code></pre>
<h3>Usage:</h3>
<pre class="lang-py prettyprint-override"><code>$ python argparse_test.py --foo 1
Parsed arguments: Namespace(foo='1')
foo in namespace?: True
</code></pre>

Argument is not supplied:

<pre class="lang-py prettyprint-override"><code>$ python argparse_test.py
Parsed arguments: Namespace()
foo in namespace?: False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your argument is <em>positional</em> (ie it doesn't have a "-" or a "--" prefix, just the argument, typically a file name) then you can use <a href="https://docs.python.org/dev/library/argparse.html#nargs" rel="noreferrer">the nargs parameter</a> to do this:</p>
<pre><code>parser = argparse.ArgumentParser(description='Foo is a program that does things')
parser.add_argument('filename', nargs='?')
args = parser.parse_args()

if args.filename is not None:
    print('The file name is {}'.format(args.filename))
else:
    print('Oh well ; No args, no problems')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can check an optionally passed flag with <code>store_true</code> and <code>store_false</code> argument action options:</p>
<pre><code>import argparse

argparser = argparse.ArgumentParser()
argparser.add_argument('-flag', dest='flag_exists', action='store_true')

print argparser.parse_args([])
# Namespace(flag_exists=False)
print argparser.parse_args(['-flag'])
# Namespace(flag_exists=True)
</code></pre>
<p>This way, you don't have to worry about checking by conditional <code>is not None</code>. You simply check for <code>True</code> or <code>False</code>. Read more about these options in the docs <a href="https://docs.python.org/2.7/library/argparse.html" rel="noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here is my solution to see if I am using an argparse variable </p>
<pre><code>import argparse

ap = argparse.ArgumentParser()
ap.add_argument("-1", "--first", required=True)
ap.add_argument("-2", "--second", required=True)
ap.add_argument("-3", "--third", required=False) 
# Combine all arguments into a list called args
args = vars(ap.parse_args())
if args["third"] is not None:
# do something
</code></pre>
<p>This might give more insight to the above answer which I used and adapted to work for my program.</p>
</div>
<span class="comment-copy">What would <code>isset()</code> be (hint: Python is not PHP)? Did you mean <code>hasattr()</code> instead, perhaps? Why not configure argparse to set a default for an option instead?</span>
<span class="comment-copy">@MartijnPieters - yes, true.  So can I simply check if(args.myArg): ...</span>
<span class="comment-copy">The "is None" and "is not None" tests work exactly as I would like and expect.  Thanks.</span>
<span class="comment-copy">Unfortunately it doesn't work then the argument got it's <code>default</code> value defined.</span>
<span class="comment-copy">If you want to set a <code>default</code>, then you can still set <code>nargs='?'</code> and provide a <code>const</code> value, as described <a href="https://docs.python.org/3/library/argparse.html#nargs" rel="nofollow noreferrer">in the docs</a>. When the arg is absent, <code>default</code> is used, when arg given w/o value, then <code>const</code> is used, otherwise given value is used. With only <code>default</code> and <code>nargs='?'</code>, <code>default</code> is used if not given, <code>None</code> if given w/o value, otherwise the given value.</span>
<span class="comment-copy">@IoannisFilippidis if you use <code>action= "store_true"</code> or <code>action="store_const", const="yourconst"</code> you can't use that argument to store other value. This will not work when using defaults. In my own i've removed all defaults from argparser and handled all inside another function <code>def defaults():</code> where i do mix ConfigParser, ArgumentParser and default values in the order i want</span>
<span class="comment-copy">@erm3nda I didn't mention setting an <code>action</code>. The answer does not use an <code>action</code>. The actions that you mention are documented to behave in one specific way (as you observed). It is not necessary to define an action though.</span>
<span class="comment-copy">Thank you for pointing out the argparse.SUPPRESS option!</span>
<span class="comment-copy">this doesn't solve to know if an argument that has a value is set or not. the main problem here is to know if the args value comes from defaul="" or it's supplied by user.</span>
