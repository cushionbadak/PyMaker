<div class="post-text" itemprop="text">
<p>I am trying to write regex to capture the output of </p>
<p><code>datetime.datetime.now().ctime()</code></p>
<p><code>Mon May 25 20:20:41 2015</code></p>
<p>I was wondering what are the possible outputs for the abbreviations of day of the week and month?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://www.cplusplus.com/reference/ctime/asctime/" rel="nofollow">Here's some information</a> about the formats of the string <code>ctime</code> produces. Basically it's always a fixed length string with that basic format.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.ctime" rel="nofollow">Python <code>datetime</code> class does not invoke C <code>ctime()</code> function</a> i.e., it works the same even on platforms that do not provide C <code>ctime()</code> (<a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/ctime.html" rel="nofollow">the equivalent of <code>asctime(localtime(clock))</code></a>).</p>
<p><a href="https://hg.python.org/cpython/file/5a9901c21213/Modules/_datetimemodule.c#l1004" rel="nofollow">CPython source code</a> says that the format is:</p>
<pre><code>static PyObject *
format_ctime(PyDateTime_Date *date, int hours, int minutes, int seconds)
{
    static const char *DayNames[] = {
        "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"
    };
    static const char *MonthNames[] = {
        "Jan", "Feb", "Mar", "Apr", "May", "Jun",
        "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
    };

    int wday = weekday(GET_YEAR(date), GET_MONTH(date), GET_DAY(date));

    return PyUnicode_FromFormat("%s %s %2d %02d:%02d:%02d %04d",
                                DayNames[wday], MonthNames[GET_MONTH(date)-1],
                                GET_DAY(date), hours, minutes, seconds,
                                GET_YEAR(date));
}
</code></pre>
<p>You could parse it using <code>datetime.strptime(input_ctime_string, "%a %b %d %H:%M:%S %Y")</code> in C locale.</p>
<p>The above is (almost) the same as the corresponding <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/asctime.html" rel="nofollow"><code>asctime()</code> definition</a>:</p>
<pre><code>char *asctime(const struct tm *timeptr)
{
    static char wday_name[7][3] = {
        "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"
    };
    static char mon_name[12][3] = {
        "Jan", "Feb", "Mar", "Apr", "May", "Jun",
        "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
    };
    static char result[26];


    sprintf(result, "%.3s %.3s%3d %.2d:%.2d:%.2d %d\n",
        wday_name[timeptr-&gt;tm_wday],
        mon_name[timeptr-&gt;tm_mon],
        timeptr-&gt;tm_mday, timeptr-&gt;tm_hour,
        timeptr-&gt;tm_min, timeptr-&gt;tm_sec,
        1900 + timeptr-&gt;tm_year);
    return result;
}
</code></pre>
</div>
