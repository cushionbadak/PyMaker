<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5212870/sorting-a-python-list-by-two-fields">Sorting a Python list by two fields</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>A nested list, </p>
<pre><code>A = [[2, 0], [1, 0], [4, 3], [3, 2], [5, 1]] 
</code></pre>
<p>I am trying to sort it based on the <code>1st</code> element in ascending order, i.e</p>
<pre><code>result_A = [[2, 0], [1, 0], [5, 1], [3, 2], [4, 3]]
</code></pre>
<p>When the <code>1st</code> element is common in any of the nested lists, I am trying to sort it based on the <code>0th</code> element. So, </p>
<pre><code>required_A = [[1, 0], [2, 0], [5, 1], [3, 2], [4, 3]]
</code></pre>
<p>This is my code so far:</p>
<pre><code>required_A = sorted(A, key=itemgetter(1))
</code></pre>
<p>I am able to sort it based on the <code>1st</code> element, but am clueless how to sort it again on the <code>0th</code> element without the remaining order getting messed up. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>This shows how to fix your <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow"><code>itemgetter</code></a> code.</p>
<pre><code>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; sorted(A, key=itemgetter(1, 0))
[[1, 0], [2, 0], [5, 1], [3, 2], [4, 3]]
</code></pre>
<p>When you pass multiple arguments to <code>itemgetter</code>, it returns a function that can be used to construct a tuple from a given sequence with values from the respective indices that were provided as arguments to <code>itemgetter</code>.</p>
<p>Tuples, like all sequences, can be compared <a href="http://en.wikipedia.org/wiki/Lexicographical_order" rel="nofollow">lexicographically</a> in Python. That means they will be compared from left-to-right, index by index, until one sequence overtakes the other. It also means that tuples make excellent keys for your sort.</p>
</div>
<div class="post-text" itemprop="text">
<p>Provided we have items in individual sublists in the reversed order, we can sort the whole list directly. So let's inform the <code>sorted</code> function that we want to consider reversed sublists:</p>
<pre><code>sorted(A, key=lambda x: list(reversed(x))
</code></pre>
</div>
<span class="comment-copy">or just <code>sorted(A, key=lambda x: x[::-1])</code></span>
<span class="comment-copy">You should really explain how your answer works :-)</span>
<span class="comment-copy">Added a bit of explanation.</span>
