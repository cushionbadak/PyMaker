<div class="post-text" itemprop="text">
<p>I am presently trying to create a massive table of permuted values.</p>
<pre><code>locA = [1, 2, 3]
locB = [4, 5, 6]
locC = [7, 8, 9]
</code></pre>
<p>Within 'loc' values are permuted. Each value in a 'loc' is from a different population ('pop1', 'pop2', 'pop3'). So far I have have been able to form a massive list of tuples that combines every within 'loc' rearrangement with every between 'loc' rearrangement.</p>
<pre><code>permA = list(itr.permutations(locA, 3))
permB = list(itr.permutations(locB, 3))
permC = list(itr.permutations(locC, 3))
permABC = list(itr.product(permA,permB,permC))

permABC
[((1, 2, 3), (4, 5, 6), (7, 8, 9)),
((1, 2, 3), (4, 5, 6), (7, 9, 8)),
((1, 2, 3), (4, 5, 6), (8, 7, 9)),

    ... etc etc...

((3, 2, 1), (6, 5, 4), (8, 9, 7)),
((3, 2, 1), (6, 5, 4), (9, 7, 8)),
((3, 2, 1), (6, 5, 4), (9, 8, 7))]   
</code></pre>
<p>I have been trying to get this into a Pandas DataFrame, but I am having trouble iterating through the list of tuples to get into a DataFrame. :(</p>
<p>Ideal format:</p>
<pre><code>loc  pop1  pop2  pop3
A    1     2     3    |
B    4     5     6    |&gt;&gt;&gt;&gt; permABC[0]
C    7     8     9    |

... etc etc ...

A    3     2     1    |
B    6     5     4    |&gt;&gt;&gt;&gt; permABC[215]
C    9     8     7    |
</code></pre>
<p>My problem is getting the list of tuples into a dataframe. I need to get every combination possible of 'loc'. E.g. all possible rearrangements of 'locA' with rearrangements of 'locB' with rearrangements of 'locC'. </p>
<p>To put this into perspective, for any particular permutation for each population, I'll need to make calculations. For sake of argument, in the above, for 'perABC[0]' and 'permABC[215],' mean for 'pop1' would be 4 and 6 respectively.</p>
<p>I'm just not sure how to do this on the fly and currently at my level of coding its easier to anchor things into a dataframe that I can manipulate. I have tried playing with using indexes to pull out population specific info for any given permutation in 'permABC', e.g.</p>
<pre><code>for item in permABC[0]:
    print item[0]
    1
    4
    7
</code></pre>
<p>Which works, but using this method isn't feasible because you can't do any functions on them; returns TypeError "'int' object is not iterable".</p>
<p>Cheers.        </p>
</div>
<div class="post-text" itemprop="text">
<p>If your trouble is related to performance or memory:</p>
<p>I think the problem is that you take a generator <code>itr.permutations</code> and convert the whole thing to a list:</p>
<pre><code>permC = list(itr.permutations(locC, 3))
</code></pre>
<p>Thereby destroying the whole point of a generator.</p>
<p>You should process each permutation as it is generated, then throw it away. This will decrease your memory profile dramatically and also speed up your computation.</p>
<pre><code>for pair in itr.permutations(locC, 3):
    # Do your stuff
</code></pre>
<p>In the above code, each pair does only exist for the duration of the iteration, after that the next pair is generated.</p>
</div>
<span class="comment-copy">Sorry, I don't know pandas, but you can simplify that permutation product code: <code>product(*[permutations(u) for u in (locA, locB, locC)])</code>.</span>
<span class="comment-copy">"but I am having trouble" What kind of trouble? Memory errors? Computation time? Your toes are cold?</span>
<span class="comment-copy">@PM2Ring, thanks for that! Could you please explain how the '*' works in this line of code? I think this simplification may be what I need to do what I need to do -- see my edit above.</span>
<span class="comment-copy">The <code>*</code> unpacks a list (or other iterable) of args into separate args, so <code>f(*[a,b,c]) is equivalent to f(a,b,c)</code>; some people call it the "splat" operator. See <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">Unpacking Argument Lists</a> (&amp; the previous section) in the official Python tutorial.</span>
<span class="comment-copy">Hi @firelynx. Thanks for the comment. At the moment it's not so much computation power - though you raise a good point and I think this could be an issue in the future. My problem is that I need to make calculations  using any given permutation of 'loc' for a particular 'pop'. My level of coding has prevented me figuring out how to do this on the fly. Hopefully my edit above has made things clearer.</span>
