<div class="post-text" itemprop="text">
<p>I'm trying to generate 0 or 1 with 50/50 chance of any using random.uniform instead of random.getrandbits.</p>
<p>Here's what I have</p>
<pre><code>0 if random.uniform(0, 1e-323) == 0.0 else 1
</code></pre>
<p>But if I run this long enough, the average is ~70% to generate 1. As seem here:</p>
<pre><code>sum(0 if random.uniform(0, 1e-323) == 0.0 
    else 1 
    for _ in xrange(1000)) / 1000.0  # --&gt; 0.737
</code></pre>
<p>If I change it to 1e-324 it will always be 0. And if I change it to 1e-322, the average will be ~%90.</p>
<p>I made a dirty program that will try to find the sweet spot between 1e-322 and 1e-324, by dividing and multiplying it several times:</p>
<pre><code>v = 1e-323
n_runs = 100000
target = n_runs/2

result = 0
while True:
    result = sum(0 if random.uniform(0, v) == 0.0 else 1 for _ in xrange(n_runs))

    if result &gt; target:
        v /= 1.5
    elif result &lt; target:
        v *= 1.5 / 1.4
    else:
        break

print v
</code></pre>
<p>This end ups with <code>4.94065645841e-324</code></p>
<p>But it still will be wrong if I ran it enough times.</p>
<p>Is there I way to find this number without the dirty script I wrote? I know that Python has a intern min float value, show in sys.float_info.min, which in my PC is 2.22507385851e-308. But I don't see how to use it to solve this problem.</p>
<p>Sorry if this feels more like a puzzle than a proper question, but I'm not able to answer it myself.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I know that Python has a intern min float value, show in sys.float_info.min, which in my PC is 2.22507385851e-308. But I don't see how to use it to solve this problem.</p>
</blockquote>
<p><code>2.22507385851e-308</code> is not the smallest positive float value, it is the smallest positive <strong>normalized</strong> float value. The smallest positive float value is 2<sup>-52</sup> times that, that is, near 5e-324.</p>
<p>2<sup>-52</sup> is called the “machine epsilon” and it is usual to call the “min” of a floating-point type a value that is nether that which is least of all comparable values (that is <code>-inf</code>), nor the least of finite values (that is <code>-max</code>), nor the least of positive values.</p>
<p>Then, the next problem you face is that <code>random.uniform</code> is not uniform to that level. It probably works ok when you pass it a normalized number, but if you pass it the smallest positive representable float number, the computation it does with it internally may be very approximative and lead it to behave differently than the documentation says. Although it appears to work surprisingly ok according to the results of your “dirty script”.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's the <code>random.uniform</code> implementation, according to the <a href="https://github.com/python/cpython/blob/aa8ea3a6be22c92e774df90c6a6ee697915ca8ec/Lib/random.py" rel="nofollow">source</a>:</p>
<pre><code>from os import urandom as _urandom

BPF = 53        # Number of bits in a float
RECIP_BPF = 2**-BPF

def uniform(self, a, b):
    "Get a random number in the range [a, b) or [a, b] depending on rounding."
     return a + (b-a) * self.random()

def random(self):
     """Get the next random number in the range [0.0, 1.0)."""
     return (int.from_bytes(_urandom(7), 'big') &gt;&gt; 3) * RECIP_BPF
</code></pre>
<p>So, your problem boils down to finding a number <code>b</code> that will give <code>0</code> when multiplied by a number less than <code>0.5</code> and another result when multiplied by a number larger than <code>0.5</code>. I've found out that, on my machine, that number is <code>5e-324</code>.</p>
<p>To test it, I've made the following script:</p>
<pre><code>from random import uniform

def test():
    runs = 1000000
    results = [0, 0]
    for i in range(runs):
        if uniform(0, 5e-324) == 0:
            results[0] += 1
        else:
            results[1] += 1
    print(results)
</code></pre>
<p>Which returned results consistent with a 50% probability:</p>
<pre><code>&gt;&gt;&gt; test()
[499982, 500018]
&gt;&gt;&gt; test()
[499528, 500472]
&gt;&gt;&gt; test()
[500307, 499693]
</code></pre>
</div>
<span class="comment-copy">What's wrong with <code>getrandbits</code>? Or with any other function more appropriate than <code>uniform</code>?</span>
<span class="comment-copy">There's nothing 'wrong', It's a puzzle. The goal was to find the lowest value possible that when passed to random.uniform(0, x)  it would generate either 0 or some value with 50% chance and no in between numbers.</span>
<span class="comment-copy">Ah, ok, didn't sound like a puzzle. Btw, you can also use <code>int(random.uniform(0, v) &gt; 0)</code>.</span>
<span class="comment-copy">Upvoted for the "normalized" stuff. But why would <code>uniform</code> not be uniform to that level? All it does is <code>a + (b-a) * self.random()</code> (at least the cpython one) which boilds down to <code>b * self.random()</code> here. Shouldn't that still produce the closest representable number and thus be fine?</span>
<span class="comment-copy">@StefanPochmann I didn't know how <code>uniform</code> is implemented, but it's complicated to make one that has all the properties that one might expect. A <code>a + (b-a) * self.random()</code> implementation only produces values that are multiple of min(ulp(a), ulp(b-a)). If 0 is in the interval [a, b], that means that a lot of possible floating-point values are never produced. But as you say, <code>a + (b-a) * self.random()</code> is pretty robust for most values of <code>a</code> and <code>b</code> (as long as <code>a-b</code> doesn't overflow because of a very negative <code>a</code> and a very positive <code>b</code>)</span>
<span class="comment-copy">Nitpick: the smallest +ve float value is 2^(-52) times the smallest normalized positive float, not 2^(-53) times.</span>
<span class="comment-copy">@MarkDickinson Fixed. Fortunately according to wikipedia 2^-52 and 2^-53 are both called “machine epsilon”. My mistake was using Google's calculator to check which was right.</span>
<span class="comment-copy">+1. <code>5e-324</code> is stored as 2^(-1074), and the OP's method will give 0 if and only if the result of <code>random() * 2^(-1074)</code> (before rounding) is less than or equal to <code>2^(-1075)</code>, which happens if and only if the result of <code>random()</code> is less than or equal to <code>0.5</code>.  Technically that means that (assuming that the underlying Mersenne Twister generator is perfect) a result of <code>0</code> will occur with probability <code>0.5 + 2^(-53)</code>, and a result of <code>1</code> with probability <code>0.5 - 2^(-53)</code>, so it's not exactly a 50/50 chance (but you'd have a <i>very</i> hard time detecting the difference using any statistical test).</span>
<span class="comment-copy">@MarkDickinson Nice! Just as a conversation: <a href="https://docs.python.org/3/library/os.html" rel="nofollow noreferrer"><code>urandom</code></a> queries <code>/dev/random</code> on linux for the string of random bytes. The program underlying <code>/dev/random</code> is this: <a href="https://github.com/torvalds/linux/blob/4f671fe2f9523a1ea206f63fe60a7c7b3a56d5c7/drivers/char/random.c" rel="nofollow noreferrer"><code>random.c</code></a>. Does <code>random.c</code> implement a Mersenne Twister? Does it impact the probabilities?</span>
<span class="comment-copy">No idea about the Linux <code>random.c</code>, but Python's <code>random</code> module does use Mersenne Twister by default.  (Though it also provides classes based on <code>/dev/urandom</code>.)</span>
