<div class="post-text" itemprop="text">
<p>Starting with Python 3.3, the hashing algorithm is non-deterministically <a href="https://docs.python.org/3.4/reference/datamodel.html#object.__hash__">salted</a> to avoid a certain kind of attack. This is nice for webservers but it's a pain when trying to debug a program: Every time I run my script, dict contents are iterated in a different order.</p>
<p>Some earlier versions of python had a <code>-R</code> flag for <strong>enabling</strong> hash randomization, but now that it's the default behavior, the flag has not been replaced by its opposite.
Randomization can be disabled by setting the environment variable <a href="https://docs.python.org/3.4/using/cmdline.html#envvar-PYTHONHASHSEED"><code>PYTHONHASHSEED</code></a>:</p>
<blockquote>
<p><strong>PYTHONHASHSEED</strong></p>
<p>If this variable is not set or set to random, a random value is used to seed the hashes of str, bytes and datetime objects.<br/>
     If PYTHONHASHSEED is set to an integer value, it is used as a fixed seed for generating the hash() of the types covered by the hash randomization.</p>
</blockquote>
<p>The catch is that this variable must be set before launching the python process. I've tried to set it with <code>os.putenv()</code>, or in <code>os.environ</code>, but these seem to have no effect on the hashing method. This is not too surprising: I wouldn't expect python to check the environment before every single set or dictionary lookup! So, the question remains:</p>
<p>Is there a way for a python program to disable its own hash randomization?</p>
</div>
<div class="post-text" itemprop="text">
<p>I suspect this isn't possible, unfortunately.  Looking at <a href="https://hg.python.org/cpython/file/5e8fa1b13516/Lib/test/test_hash.py#l145"><code>test_hash.py</code></a> the <code>HashRandomizationTests</code> class and its descendants were added in the <a href="https://hg.python.org/cpython/rev/6b7704fe1be1#l9.26">commit that introduced this behavior</a>.  They test the hashing behavior by modifying the environment and starting a new process with <code>PYTHONHASHSEED</code> explicitly set.  You could try to copy that pattern, perhaps.</p>
<p>I also just noticed you said "<em>Every time I run my script, dict contents are iterated in a different order.</em>" - I assume you're aware of <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict"><code>collections.OrderedDict</code></a>, right?  That's the normal way to get reliable hash iteration.</p>
<hr/>
<p>If you're willing to set the value in your shell environment, you could also just wrap your python call in a bash script, e.g.</p>
<pre><code>#! /bin/bash
export PYTHONHASHSEED=0

# call your python program here
</code></pre>
<p>That avoids needing to manipulate your whole environment, as long as you're ok with a wrapper script.</p>
<p>Or even just pass the value on the command line:</p>
<pre><code>$ PYTHONHASHSEED=0 python YOURSCRIPT.py
</code></pre>
</div>
<span class="comment-copy">It would have to happen before any actual Python code is executed; by that time, far too many strings have been hashed and placed into things like type and module <code>__dict__</code>s.</span>
<span class="comment-copy">I thought the same; but I hope someone who knows more can comment.</span>
<span class="comment-copy">These are the relevant commits: <a href="https://hg.python.org/cpython/rev/f4b7ecf8a5f8" rel="nofollow noreferrer">f4b7ecf8a5f8</a> and <a href="https://hg.python.org/cpython/rev/6b7704fe1be1" rel="nofollow noreferrer">6b7704fe1be1</a> - glancing through it I don't immediately see a solution, but it's a starting point.</span>
<span class="comment-copy">Thanks, that's a pretty strong indication. And a good tip for respawning-- though beyond the ugliness, there are contexts where it's not practical (e.g., if running in an ipython notebook served by a remote "kernel"). I guess I can just set it on log-in for my environment... I'm not going to DoS myself.</span>
