<div class="post-text" itemprop="text">
<p>In python 3.4, I am typing</p>
<pre><code>[] = "" 
</code></pre>
<p>and it works fine, no Exception is raised. Though of course <code>[]</code> is not equal to <code>""</code> afterwards.</p>
<pre><code>[] = ()
</code></pre>
<p>also works fine. </p>
<pre><code>"" = []
</code></pre>
<p>raises an exception as expected though, </p>
<pre><code>() = ""
</code></pre>
<p>raises an exception as expected though. So, what's going on? </p>
</div>
<div class="post-text" itemprop="text">
<p>You are not comparing for equality. You are <strong>assigning</strong>.</p>
<p>Python allows you to assign to multiple targets:</p>
<pre><code>foo, bar = 1, 2
</code></pre>
<p>assigns the two values to <code>foo</code> and <code>bar</code>, respectively. All you need is a <em>sequence</em> or <em>iterable</em> on the right-hand side, and a list or tuple of names on the left.</p>
<p>When you do:</p>
<pre><code>[] = ""
</code></pre>
<p>you assigned an <em>empty</em> sequence (empty strings are sequences still) to an empty list of names.</p>
<p>It is essentially the same thing as doing:</p>
<pre><code>[foo, bar, baz] = "abc"
</code></pre>
<p>where you end up with <code>foo = "a"</code>, <code>bar = "b"</code> and <code>baz = "c"</code>, but with fewer characters.</p>
<p>You cannot, however, assign to a string, so <code>""</code> on the left-hand side of an assignment never works and is always a syntax error.</p>
<p>See the <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="noreferrer"><em>Assignment statements</em> documentation</a>:</p>
<blockquote>
<p>An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.</p>
</blockquote>
<p>and</p>
<blockquote>
<p>Assignment of an object to a target list, <strong>optionally enclosed in parentheses or square brackets</strong>, is recursively defined as follows.</p>
</blockquote>
<p><em>Emphasis mine</em>.</p>
<p>That Python doesn't throw a syntax error for the empty list is actually a bit of a bug! The officially documented grammar doesn't allow for an empty target list, and for the empty <code>()</code> you do get an error.  See <a href="http://bugs.python.org/issue23275" rel="noreferrer">bug 23275</a>; it is considered a harmless bug:</p>
<blockquote>
<p>The starting point is recognizing that this has been around for very long time and is harmless.</p>
</blockquote>
<p>Also see <a href="https://stackoverflow.com/questions/29870019/why-is-it-valid-to-assign-to-an-empty-list-but-not-to-an-empty-tuple">Why is it valid to assign to an empty list but not to an empty tuple?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It follows the <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="noreferrer"><em>Assignment statements</em> section</a> rules from the documentation,</p>
<blockquote>
<pre><code>assignment_stmt ::=  (target_list "=")+ (expression_list | yield_expression)
</code></pre>
<p>If the <code>target list</code> is a comma-separated list of targets: <strong>The object must be an iterable with the same number of items as there are targets in the target list, and the items are assigned, from left to right, to the corresponding targets.</strong></p>
<p>The object must be a sequence with the same number of items as there are targets in the target list, and the items are assigned, from left to right, to the corresponding targets.</p>
</blockquote>
<p>So, when you say</p>
<pre><code>[] = ""
</code></pre>
<p><code>""</code> is an iterable (any valid python string is an iterable) and it is being unpacked over the elements of the list.</p>
<p>For example,</p>
<pre><code>&gt;&gt;&gt; [a, b, c] = "123"
&gt;&gt;&gt; a, b, c
('1', '2', '3')
</code></pre>
<p>Since you have an empty string, and an empty list, there is nothing to unpack. So, no error.</p>
<p>But, try this</p>
<pre><code>&gt;&gt;&gt; [] = "1"
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
ValueError: too many values to unpack (expected 0)
&gt;&gt;&gt; [a] = ""
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
ValueError: need more than 0 values to unpack
</code></pre>
<p>In the <code>[] = "1"</code> case, you are trying to unpack the string <code>"1"</code> over an empty list of variables. So it complains with "too many values to unpack (expected 0)".</p>
<p>Same way, in <code>[a] = ""</code> case, you have an empty string, so nothing to unpack really, but you are unpacking it over one variable, which is, again, not possible. That is why it complains "need more than 0 values to unpack".</p>
<p>Apart from that, as you noticed,</p>
<pre><code>&gt;&gt;&gt; [] = ()
</code></pre>
<p>also throws no error, because <code>()</code> is an empty tuple.</p>
<pre><code>&gt;&gt;&gt; ()
()
&gt;&gt;&gt; type(())
&lt;class 'tuple'&gt;
</code></pre>
<p>and when it is unpacked over an empty list, there is nothing to unpack. So no error.</p>
<hr/>
<p>But, when you do</p>
<pre><code>&gt;&gt;&gt; "" = []
  File "&lt;input&gt;", line 1
SyntaxError: can't assign to literal
&gt;&gt;&gt; "" = ()
  File "&lt;input&gt;", line 1
SyntaxError: can't assign to literal
</code></pre>
<p>as the error message says, you are trying to assign to a string literal. Which is not possible. That is why you are getting the errors. It is like saying</p>
<pre><code>&gt;&gt;&gt; 1 = "one"
  File "&lt;input&gt;", line 1
SyntaxError: can't assign to literal
</code></pre>
<hr/>
<p><strong>Internals</strong></p>
<p>Internally, this assignment operation will be translated to <a href="https://docs.python.org/3/library/dis.html#opcode-UNPACK_SEQUENCE" rel="noreferrer"><code>UNPACK_SEQUENCE</code></a> op code,</p>
<pre><code>&gt;&gt;&gt; dis(compile('[] = ""', "string", "exec"))
  1           0 LOAD_CONST               0 ('')
              3 UNPACK_SEQUENCE          0
              6 LOAD_CONST               1 (None)
</code></pre>
<p>Here, since the string is empty, <code>UNPACK_SEQUENCE</code> unpacks <code>0</code> times. But when you have something like this</p>
<pre><code>&gt;&gt;&gt; dis(compile('[a, b, c] = "123"', "string", "exec"))
  1           0 LOAD_CONST               0 ('123')
              3 UNPACK_SEQUENCE          3
              6 STORE_NAME               0 (a)
              9 STORE_NAME               1 (b)
             12 STORE_NAME               2 (c)
             15 LOAD_CONST               1 (None)
             18 RETURN_VALUE
</code></pre>
<p>the sequence <code>123</code> is unpacked in to the stack, from right to left. So, the top of the stack would be <code>1</code> and the next would be <code>2</code> and the last would be <code>3</code>. Then it assigns from the top of the stack to the variables from the left hand side expression one by one.</p>
<hr/>
<p>BTW, in Python, this is how you can do multiple assignments in the same expression. For example,</p>
<pre><code>a, b, c, d, e, f = u, v, w, x, y, z
</code></pre>
<p>this works because, the right hand values are used to construct a tuple and then it will be unpacked over the left hand side values.</p>
<pre><code>&gt;&gt;&gt; dis(compile('a, b, c, d, e, f = u, v, w, x, y, z', "string", "exec"))
  1           0 LOAD_NAME                0 (u)
              3 LOAD_NAME                1 (v)
              6 LOAD_NAME                2 (w)
              9 LOAD_NAME                3 (x)
             12 LOAD_NAME                4 (y)
             15 LOAD_NAME                5 (z)
             18 BUILD_TUPLE              6
             21 UNPACK_SEQUENCE          6
             24 STORE_NAME               6 (a)
             27 STORE_NAME               7 (b)
             30 STORE_NAME               8 (c)
             33 STORE_NAME               9 (d)
             36 STORE_NAME              10 (e)
             39 STORE_NAME              11 (f)
             42 LOAD_CONST               0 (None)
             45 RETURN_VALUE
</code></pre>
<p>but the classic swapping technique <code>a, b = b, a</code> uses rotation of elements in the top of the stack. If you have only two or three elements then they are treated with special <a href="https://docs.python.org/3/library/dis.html#opcode-ROT_TWO" rel="noreferrer"><code>ROT_TWO</code></a> and <a href="https://docs.python.org/3/library/dis.html#opcode-ROT_THREE" rel="noreferrer"><code>ROT_THREE</code></a> instructions instead of constructing the tuple and unpacking.</p>
<pre><code>&gt;&gt;&gt; dis(compile('a, b = b, a', "string", "exec"))
  1           0 LOAD_NAME                0 (b)
              3 LOAD_NAME                1 (a)
              6 ROT_TWO
              7 STORE_NAME               1 (a)
             10 STORE_NAME               0 (b)
             13 LOAD_CONST               0 (None)
             16 RETURN_VALUE
</code></pre>
</div>
<span class="comment-copy">You can also use <code>dis('[] = ""')</code> without calling <code>compile()</code>.</span>
<span class="comment-copy">Can you describe what happens if you are swapping more than three variables/elements, using the method in your last example?</span>
<span class="comment-copy">@hexafraction It will build a new tuple with all the elements on the right hand side and then it will unpack them over the variables on the left hand side.</span>
<span class="comment-copy">@hexafraction: see <a href="https://stackoverflow.com/q/21047524">How does swapping of members in the python tuples (a,b)=(b,a) work internally?</a></span>
