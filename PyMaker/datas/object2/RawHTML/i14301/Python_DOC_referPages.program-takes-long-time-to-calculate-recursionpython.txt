<div class="post-text" itemprop="text">
<p>my program takes long time to look up all the list of the vocab in the file in order to print all the possible words that can be created.
How can i make it read more faster by not using any import? I'm new to python by the way :(
For example, i have more than 4000+ vocabs/letters/words contain in 1 file
if you enter any letter, it will find all possible outcome in that file.</p>
<pre><code>if the user enter: a c t b
</code></pre>
<p>it will display: (assuming all these 3 letters/words out of 4000+ are in that file that can be created)</p>
<pre><code>ab
abc
act
</code></pre>
<p>here is my program</p>
<pre><code>def scramble(r_letters, s_letters):
    """
    Output every possible combination of a word.
    Each recursive call moves a letter from
    r_letters (remaining letters) to
    s_letters (scrambled letters)
    """
    if len(r_letters) == 0:  # Base case: All letters used
        words.add(s_letters)
    else:  # Recursive case: For each call to scramble()
           # move a letter from remaining to scrambled
        for i in range(len(r_letters)):
            # Move letter to scrambled
            tmp = r_letters[i]
            r_letters = r_letters[:i] + r_letters[i+1:]
            s_letters += tmp

            scramble(r_letters, s_letters)

            # Put letter back in remaining letters
            r_letters = r_letters[:i] + tmp + r_letters[i:]
            s_letters = s_letters[:-1]
        if s_letters:
             words.add(s_letters)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems you want to generate all the permutations that can be created from the given letters and then check whether those correspond to any "real" word from some dictionary, kind of like for looking up what words can be created in a game of Scrabble.</p>
<p>You can make your <code>scramble</code> function a bit faster (and a whole lot shorter) by just swapping the letters in the arguments to the recursive call. This way, you do not have to swap them back:</p>
<pre><code>def scramble(r_letters, s_letters):
    if s_letters:
        words.add(s_letters)
    for i in range(len(r_letters)):
        scramble(r_letters[:i] + r_letters[i+1:], s_letters + r_letters[i])
</code></pre>
<p>You <em>could</em> also use <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow"><code>itertools.permutations</code></a> for this, e.g. like this, generating all the permutations for different word length using the given letters:</p>
<pre><code>def scramble2(letters):
    for i in range(1, len(letters) + 1):
        for p in itertools.permutations(letters, i):
            words.add(''.join(p))
</code></pre>
<p>According to IPython's <code>%timeit</code>, this is about three times faster than your implementation:</p>
<pre><code>In [3]: %timeit test.scramble("test", "")
10000 loops, best of 3: 50.4 µs per loop
In [4]: %timeit test.scramble2("test")
100000 loops, best of 3: 16.7 µs per loop
</code></pre>
<hr/>
<p>However, you do not need to generate all the permutations <em>at all</em>! Just count the letters in the words and compare them to the counts of the letters you have available. You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a> for this, or create your own counter-like dictionary.</p>
<pre><code>import collections
letters = "abctk"
words = "cat back track tact".split()
letter_counts = collections.Counter(letters)
for word in words:
    word_counts = collections.Counter(word)
    if all(letter_counts.get(c, 0) &gt;= n for c, n in word_counts.iteritems()):
        print word
</code></pre>
<p>This will print <code>"cat"</code> and <code>"back"</code></p>
<p>If you want to avoid using libraries (okay for practicing, but don't stick to this habit) you can create your own counter, e.g. like this:</p>
<pre><code>def count(word):
    d = {}
    for c in word:
        d[c] = d.get(c, 0) + 1
    return d
</code></pre>
</div>
<span class="comment-copy">What exactly is the program supposed to do? Get all the "real" words from a file that can be obtained by "scrambling" some letters? Like the words you can create with your letters in "Scrabble"?</span>
<span class="comment-copy">yes,.it will try to display all the possible words (if those words are in the file) that can be created from the given letters.</span>
<span class="comment-copy">Use RegEx in some way, it would a lot faster.</span>
<span class="comment-copy">I have no idea what that is, honestly T_T</span>
<span class="comment-copy">is it possible to not using any import? here is my full code <a href="http://www.mediafire.com/view/v1w408w18qazpbd/bbbbb.py" rel="nofollow noreferrer">mediafire.com/view/v1w408w18qazpbd/bbbbb.py</a></span>
<span class="comment-copy">@Besttee collections and itertools is built-in, highly optimized (implemented in C) modules to perform kind of operations, which suits your purpose perfectly. Why you do not want to use them?</span>
<span class="comment-copy">because I'm practicing on recursion, and trying to get the solid on it</span>
<span class="comment-copy">@Besttee I understand that, and there might be some potential for improvement in your function (have not looked at it too much yet). Still, I think that generating all the permutations is not the right way to solve the problem in the first place.</span>
