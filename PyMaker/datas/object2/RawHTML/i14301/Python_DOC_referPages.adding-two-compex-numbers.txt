<div class="post-text" itemprop="text">
<p>Following is the code that I wrote to add two complex numbers. I didn't include the  "i" part of the complex numbers. The code doesn't return the add method.</p>
<pre><code>import math
class complex(object):
    def __init__(self, real, imaginary):
        self.real = real
        self.imaginary = imaginary  

    def __add__(self, other): 
        return complex(self.real + other.real, self.imaginary + other.imaginary)

L1 = [map(float, raw_input().split())]
L2 = [map(float, raw_input().split())]
z1 = complex(L1[0][0],L1[0][1])
z2 = complex(L2[0][0],L2[0][1])
print z1.real, z1.imaginary, z2.real, z2.imaginary
print z1+z2
</code></pre>
<p>The code correctly prints the z1.real, z1.imaginary, z2.real, z2.imaginary variables. However when I try to add z1 + z2 it doesn't return anything.</p>
<p>Sample input:</p>
<pre><code>2 1
5 6
</code></pre>
<p>Sample output:</p>
<pre><code>2.0 1.0 5.0 6.0
&lt;__main__.complex object at 0x7fa11c039790&gt;
</code></pre>
<p>Kindly let me know where I am doing the mistake</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code is actually working. When you <code>print z1+z2</code>, it's printing out the right object. And you can verify that:</p>
<pre><code>print (z1+z2).real, (z1+z2).imaginary
</code></pre>
<p>The problem is that when you just <code>print z1+z2</code>, the way your object prints out is like this:</p>
<pre><code>&lt;__main__.complex object at 0x7fa11c039790&gt;
</code></pre>
<p>That's not very useful. But Python can't guess what you want instances of your type to look like; you have to tell it.</p>
<p>There are two methods for this, <code>__str__</code> and <code>__repr__</code>. If you have to have one representation for end-user-readable output, and another for debugging, you define both; otherwise, just define <code>__repr__</code>.</p>
<p>For example:</p>
<pre><code>class complex(object):
    def __init__(self, real, imaginary):
        self.real = real
        self.imaginary = imaginary  

    def __add__(self, other): 
        return complex(self.real + other.real, self.imaginary + other.imaginary)

    def __str__(self):
        return '{}, {}'.format(self.real, self.imaginary)

    def __repr__(self):
        return 'complex({}, {})'.format(self.real, self.imaginary)
</code></pre>
<p>Python 3.x has added some tools to make this easier for you; in particular, <a href="https://docs.python.org/3/library/types.html#types.SimpleNamespace" rel="nofollow"><code>SimpleNamespace</code></a> takes care of the basic <code>__init__</code> and <code>__repr__</code> for simple classes, so you only have to write <code>__add__</code>. But if you're using Python 2.7, those tools don't exist.</p>
</div>
<div class="post-text" itemprop="text">
<p>It works. (I called your class <code>Complex2</code> to not to mask the built-in <code>complex</code>.)</p>
<pre><code>&gt;&gt;&gt; res = Complex2(1, 3) + Complex2(3, 4)
&gt;&gt;&gt; res.real
4
&gt;&gt;&gt; res.imaginary
7
&gt;&gt;&gt; print(res)
&lt;__main__.Complex2 object at 0x10c321a58&gt;
</code></pre>
<p>The last output is a representation of your instance.</p>
<p>Add a method <code>__repr__</code> to see useful output:</p>
<pre><code>class Complex2(object):
    def __init__(self, real, imaginary):
        self.real = real
        self.imaginary = imaginary  

    def __add__(self, other): 
        return Complex2(self.real + other.real, self.imaginary + other.imaginary)

    def __repr__(self):
        return '({}+{}j)'.format(self.real, self.imaginary) 
</code></pre>
<p>Now:</p>
<pre><code>print(res)
</code></pre>
<p>shows:</p>
<pre><code>(4+7j)
</code></pre>
<p>For real work use the built-in <code>complex</code>. Either with literals:</p>
<pre><code>&gt;&gt;&gt; 1 + 3 + 3 + 4j
(7+4j)
</code></pre>
<p>or with explicit creation of a new object: </p>
<pre><code>&gt;&gt;&gt; complex(5)
(5+0j)
</code></pre>
</div>
<span class="comment-copy">Why are you printing <code>real</code> and <code>imaginary</code> for the inputs, but not the output?</span>
<span class="comment-copy">What do you mean it doesn't return anything? I quite clearly see <code>&lt;__main__.complex object at 0x7fa11c039790&gt;</code> there.</span>
<span class="comment-copy">I want the end result to be 7 and 7, when I do z1 + z2. I am quite new to python</span>
<span class="comment-copy">Do you realize that Python already has a built-in <code>complex</code> type, and hiding it with a similar but not identical type is going to get confusing?</span>
