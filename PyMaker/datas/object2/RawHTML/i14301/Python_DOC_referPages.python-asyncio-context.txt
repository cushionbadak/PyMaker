<div class="post-text" itemprop="text">
<p>In threading, we have something called "Thread Context", in which we can save some data (state) for accessing in a special thread. In asyncio, I need to save some state in current execution path, so that all consequent coroutines can access it. What is the solution?
Note: I know each coroutine function is instantiated for an execution path in asyncio, but for some reason I can not save the state in function properties. (Although this method os not very good anyway)</p>
</div>
<div class="post-text" itemprop="text">
<p>As of Python 3.7 you can make use of <a href="https://docs.python.org/3/library/contextvars.html#module-contextvars" rel="noreferrer">contextvars.ContextVar</a>.</p>
<p>In the example below I declared <strong>request_id</strong> and set the value in <strong>some_outer_coroutine</strong>, then accessed it in <strong>some_inner_coroutine</strong>.</p>
<pre><code>import asyncio
import contextvars

# declare context var
request_id = contextvars.ContextVar('Id of request.')


async def some_inner_coroutine():
    # get value
    print('Processed inner coroutine of request: {}'.format(request_id.get()))


async def some_outer_coroutine(req_id):
    # set value
    request_id.set(req_id)

    await some_inner_coroutine()

    # get value
    print('Processed outer coroutine of request: {}'.format(request_id.get()))


async def main():
    tasks = []
    for req_id in range(1, 5):
        tasks.append(asyncio.create_task(some_outer_coroutine(req_id)))

    await asyncio.gather(*tasks)


if __name__ == '__main__':
    asyncio.run(main())
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Processed inner coroutine of request: 1
Processed outer coroutine of request: 1
Processed inner coroutine of request: 2
Processed outer coroutine of request: 2
Processed inner coroutine of request: 3
Processed outer coroutine of request: 3
Processed inner coroutine of request: 4
Processed outer coroutine of request: 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's also <a href="https://github.com/azazel75/metapensiero.asyncio.tasklocal" rel="nofollow noreferrer">https://github.com/azazel75/metapensiero.asyncio.tasklocal</a>, but you must be aware that tasks are often created internally by libraries and also by asyncio using <code>ensure_future(a_coroutine)</code> and there's no actual way to track these new tasks and initialize their locals (maybe with those of the task that they are created from). (an "hack" whould be setting a <code>loop.set_task_factory()</code> function with something that does the job, hoping that all code uses <code>loop.create_task()</code> to create the tasks, which is not always true...)</p>
<p>Another issue is that if some of your code is executed inside a Future callback <code>Task.current_task()</code>  function which is used by both the libraries to select  the right copy of locals to serve will always return <code>None</code>...</p>
</div>
<span class="comment-copy"><a href="https://mail.python.org/pipermail/python-ideas/2015-April/033151.html" rel="nofollow noreferrer">This python-ideas thread</a> and <a href="https://github.com/python/asyncio/issues/165" rel="nofollow noreferrer">this asyncio bug report</a> seem relevant.</span>
<span class="comment-copy"><code>curio</code> seems to have it <a href="https://github.com/dabeaz/curio/pull/85" rel="nofollow noreferrer">github.com/dabeaz/curio/pull/85</a></span>
