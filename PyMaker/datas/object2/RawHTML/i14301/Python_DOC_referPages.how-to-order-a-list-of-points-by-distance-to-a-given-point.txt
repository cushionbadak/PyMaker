<div class="post-text" itemprop="text">
<p>I have a list of items that have <code>X</code> and <code>Y</code> coordinates. Now, there's a method that takes <code>X</code> and <code>Y</code> parameters and should return a the list of coordinates ordered from the closest to the farthest based on the given parameters.</p>
<p>Basically, it looks something like this:</p>
<pre><code>class Point:
    x = 0.0
    y = 0.0

# List of points
points = ...

def get_ordered_list(x, y):
    # return 'points' ordered by distance to (x,y)
</code></pre>
<p>I'm new to Python so I have pretty much no idea how to order the items. How would I do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can pass a custom function to sort using the <code>key</code> parameter like this:</p>
<pre><code>from math import sqrt

def get_ordered_list(points, x, y):
   points.sort(key = lambda p: sqrt((p.x - x)**2 + (p.y - y)**2))
   return points
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use key in sorted function.   </p>
<pre><code>class point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

 def distance(p1, p2):
     return ((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2) ** 0.5

 sorted_points = sorted(points, key=lambda e: distance(e, target))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need a function to get the distance between two points, I'll leave this function to you.  It will return the distance between two points, one point will be your main point, the other from the list.</p>
<p>Use this function in the <code>sorted</code> method on the array of points.</p>
</div>
<div class="post-text" itemprop="text">
<p>See the <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow">sort</a> method of list, especially the <em>key</em> argument. It allows you to put a function which returns the key for sorting. So in your example it could be something like this:</p>
<pre><code>def get_ordered_list(x, y):
    target_point = Point(x, y)
    points.sort(key=lambda p: distance(p, target_point))
</code></pre>
<p>assuming that <code>distance(a, b)</code> returns a distance between points <code>a</code> and <code>b</code>. Also note that <code>sort()</code> sorts the list in place, i.e. modifies the original list. If you want to return a new list which is sorted use the <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow">sorted</a> function.</p>
<p>By the way - the class as you defined it is probably not going to work as you expect - the <code>x</code> and <code>y</code> fields are class fields. For them to be instance fields you have to define them in the constructor instead:</p>
<pre><code>class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
</code></pre>
</div>
<span class="comment-copy">You need to include <code>points</code> as an argument to your function</span>
<span class="comment-copy">@maxymoo It's not a complete example of my code, but merely an example of "something like this".</span>
<span class="comment-copy">Thanks! Although, I'm only interested in the order, not the exact distance, so the square root is not needed there for comparison. :)</span>
<span class="comment-copy">of course your right that was a bit silly of me!</span>
<span class="comment-copy">@maxymoo do you know what the time complexity of this method is? i.e. could it be more efficient to implement something like a quickselect?</span>
<span class="comment-copy">@ColinRicardo python uses <a href="https://en.wikipedia.org/wiki/Timsort" rel="nofollow noreferrer">en.wikipedia.org/wiki/Timsort</a>, not sure what quickselect is</span>
