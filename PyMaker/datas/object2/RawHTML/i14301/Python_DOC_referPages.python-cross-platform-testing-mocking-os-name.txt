<div class="post-text" itemprop="text">
<h2>what is the correct way to mock <code>os.name</code>?</h2>
<p>I am trying to unittest some cross-platform code that uses <code>os.name</code> to build platform-appropriate strings. I am running on a Windows machine but want to test code that can run on either posix or windows.</p>
<p>I've tried:</p>
<h3>production_code.py</h3>
<pre><code>from os import name as os_name

def platform_string():
    if 'posix' == os_name:
      return 'posix-y path'
    elif 'nt' == os_name:
      return 'windows-y path'
    else:
      return 'unrecognized OS'
</code></pre>
<h3>test_code.py</h3>
<pre><code>import production as production 
from nose.tools import patch, assert_true

class TestProduction(object):
    def test_platform_string_posix(self):
    """
    """
    with patch.object(os, 'name') as mock_osname:
        mock_osname = 'posix'
        result = production.platform_string()
    assert_true('posix-y path' == result)
</code></pre>
<p>this fails because <code>os</code> is not in the global scope for the <code>test_code.py</code>. If 'os' is <code>import</code>ed in <code>test_code.py</code> then we will always get <code>os.name=='nt'</code>.</p>
<p>I've also tried:</p>
<pre><code>def test_platform_string_posix(self):
    """
    """
    with patch('os.name', MagicMock(return_value="posix")):
        result = production.platform_string()
    assert_true('posix-y path' == result)
</code></pre>
<p>in the test, but this seems not to work because <code>os.name</code> is an attribute not a method with a return value.</p>
<p>EDIT:
clarifications in response to comments</p>
<ol>
<li>The <a href="http://mock.readthedocs.org/en/latest/patch.html" rel="nofollow">mock docs (1st paragraph)</a> make it seem like directly monkey patching <code>os.name</code> could get messy if e.g. an assertion gets raised</li>
<li>We really are only changing a path based on <code>os.name</code>. Whilst tests will be run on windows and posix machines I wanted something that gave full coverage without needing to resource a machine every time a small edit is made.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow">Where to patch</a> you should patch <code>os_name</code> in <code>production_code</code>. By </p>
<pre><code>from os import name as os_name
</code></pre>
<p>you are creating a <code>os.name</code>'s reference in <code>production_code</code> module called <code>os_name</code>: after that (loaded at import time) change <code>os.name</code> have no effect <code>os_name</code> reference. </p>
<pre><code>class TestProduction(object):
    @patch("production_code.os_name","posix")
    def test_platform_string_posix(self):
        assert_equal('posix-y path', production.platform_string())
</code></pre>
</div>
<span class="comment-copy">Why not just assign the value you want: <code>os.name = 'posix'</code>?</span>
<span class="comment-copy">You probably also have code that can't be tested simply by mocking <code>os.name</code>. You'd be better off setting up a virtual machine running an actual POSIX environment to run those tests.</span>
<span class="comment-copy">in test: <code>with patch('production.os_name', 'posix'):</code></span>
