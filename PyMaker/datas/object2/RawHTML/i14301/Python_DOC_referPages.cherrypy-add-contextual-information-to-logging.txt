<div class="post-text" itemprop="text">
<p>I'm using <code>CherryPy 3.7.0</code> to build a small web app.</p>
<p>My problem is that I can't figure out how to add contextual information to its logging output. </p>
<p>Even though I've gone through its docs several times it's not clear how to achieve such thing. 
I am interested in adding a <code>task</code> attribute in the logger so that in one of my views I should be able to write:</p>
<pre><code>logger.info('Processing finished', extra={'task': 'jashgd-765273-ehdfiuh'})
</code></pre>
<p>How should I do that?</p>
<p>Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<h1>Reading docs</h1>
<p>Here is what docs of <a href="https://docs.python.org/3/library/logging.html#logging.debug" rel="nofollow"><code>logging.debug</code></a> say about <code>extra</code> keyword argument:</p>
<blockquote>
<p>The third optional keyword argument is extra which can be used to pass a dictionary which is <strong>used to populate the __dict__ of the LogRecord</strong> created for the logging event with user-defined attributes. These custom attributes can then be used as you like. For example, they could be incorporated into logged messages. For example:</p>
<pre><code>FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'
logging.basicConfig(format=FORMAT)
d = {'clientip': '192.168.0.1', 'user': 'fbloggs'}
logging.warning('Protocol problem: %s', 'connection reset', extra=d)
</code></pre>
</blockquote>
<p>I.e. <code>extra</code> is not logged auto-magically -- you need to provide appropriate formatter.</p>
<p>And here's CherryPy's routine, <a href="https://bitbucket.org/cherrypy/cherrypy/src/92e4579f/cherrypy/_cplogging.py#cl-202" rel="nofollow"><code>cherrypy._cplogging.LogManager.error</code></a> , which effectively passes data to stdlib's logger: </p>
<pre><code>def error(self, msg='', context='', severity=logging.INFO, traceback=False):
    """...
    This is not just for errors! Applications may call this at any time
    to log application-specific information.
    ...
    """
    if traceback:
        msg += _cperror.format_exc()
    self.error_log.log(severity, ' '.join((self.time(), context, msg)))
</code></pre>
<p>Also take a look at the docstring of <a href="https://bitbucket.org/cherrypy/cherrypy/src/92e4579f/cherrypy/_cplogging.py" rel="nofollow"><code>cherrypy._cplogging</code></a>. It explains the expected extension of CherryPy's logging.</p>
<h1>Writing code</h1>
<p>From the section above we have consequences. Simple answer is that <strong>you can't do it directly</strong>. Also @AndrewKloos answer is not actually the answer, because you can't pass a <code>dict</code> in sequence to <code>str.join</code>. Also you can't even pass <code>extra</code> keyword argument, because there's no such formal argument in the signature. Even if you could, giving formatter extra placeholders would result in string interpolation errors in any CherryPy's normal logging (that obviously don't provide any extra keys).</p>
<p>Thus the best compromise is just to do:</p>
<pre><code>cherrypy.log('Processing finished ' + str({'task': 'jashgd-765273-ehdfiuh'}))
</code></pre>
<p>Other options:</p>
<ul>
<li>Create own logger besides error and access logs,</li>
<li>Invoke <code>cherrypy.log.error_log.info</code> directly</li>
<li>Monkeypatch <code>cherrypy.log</code> with your subclass of <code>cherrypy._GlobalLogManager</code></li>
</ul>
<h1>Update</h1>
<p><a href="http://rhodesmill.org/brandon/2012/logging_tree/" rel="nofollow">Introspect Python logging with logging_tree</a> is nice article (and package) which explains logging hierarchy and message passing on example of CherryPy application.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this...</p>
<pre><code>import cherrypy
from cherrypy import log

class MyApp(object):
    def index(self):
        log.error(msg='This is My Error ', context='HTTP', severity=20, traceback=True)
        return "Hello World!"    
    index.exposed = True

cherrypy.tree.mount(MyApp(), "/")

cherrypy.config.update({'tools.staticdir.on': True,
    'tools.staticdir.dir': 'C:\\Documents and Settings\\d\\My Documents\\Aptana Studio 3 Workspace\\ScratchPad',
    'log.access_file' : "access.log",
    'log.error_file' : "error.log",
    'log.screen' : False,
    'tools.sessions.on': True,
    })


cherrypy.engine.start()
cherrypy.engine.block()
</code></pre>
<p>Hope this helps!</p>
</div>
<span class="comment-copy">Thanks. This worked perfectly well.</span>
