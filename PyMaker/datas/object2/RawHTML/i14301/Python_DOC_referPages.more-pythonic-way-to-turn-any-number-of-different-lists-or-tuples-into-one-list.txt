<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/952914/how-to-make-a-flat-list-out-of-list-of-lists">How to make a flat list out of list of lists?</a>
<span class="question-originals-answer-count">
                    38 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to write a function to take in any number of different lists or tuples as arguments and return one big list.</p>
<pre><code>def addify(*args):
    big_list = list()
    for iterable in args:
        if isinstance(iterable, tuple):
            big_list.extend(list(iterable))
        else:
            big_list.extend(iterable)
    return big_list

&gt;&gt;&gt; print addify((1,2,3), [2, 5, 3], (3,1,3), [3, 2344, 3])
[1, 2, 3, 2, 5, 3, 3, 1, 3, 3, 2344, 3]
</code></pre>
<p>I was learning about <a href="https://stackoverflow.com/questions/287085/what-do-args-and-kwargs-mean">args and kwargs</a>, and my code is working all right, but this seems like too much code for something so simple.</p>
<p>There must be a better way than writing a long function to check if an argument is a tuple and if it is add convert it to a list and then add it on. That just seems bloated.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow"><code>itertools.chain</code></a> is what you are looking for:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; print list(chain((1,2,3), [2, 5, 3], (3,1,3), [3, 2344, 3]))
[1, 2, 3, 2, 5, 3, 3, 1, 3, 3, 2344, 3]
</code></pre>
<p><em>Note: Calling <code>list</code> is necessary if you want a list instead of a <code>itertools.chain</code> object.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>This functionality is already included in Python via <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow"><code>itertools.chain</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; def addify(*args):
...     return list(chain(*args))
... 
&gt;&gt;&gt; addify((1,2,3), [2, 5, 3], (3,1,3), [3, 2344, 3])
[1, 2, 3, 2, 5, 3, 3, 1, 3, 3, 2344, 3]
</code></pre>
<p>That, or as @Navith said, you could use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow"><code>itertools.chain.from_iterable</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; def addify(*args):
...     return list(chain.from_iterable(args))
... 
&gt;&gt;&gt; addify((1,2,3), [2, 5, 3], (3,1,3), [3, 2344, 3])
[1, 2, 3, 2, 5, 3, 3, 1, 3, 3, 2344, 3]
</code></pre>
<p>Note however that you need to call <code>list()</code> on both because they return iterators by default:</p>
<pre><code>&gt;&gt;&gt; chain((1,2,3), [2, 5, 3], (3,1,3), [3, 2344, 3])
&lt;itertools.chain object at 0x04829390&gt;
&gt;&gt;&gt; chain.from_iterable([(1,2,3), [2, 5, 3], (3,1,3), [3, 2344, 3]])
&lt;itertools.chain object at 0x048293D0&gt;
</code></pre>
<p>Which might actually be a good thing if you do not need all of the items right up front.</p>
</div>
<span class="comment-copy">This works for tuples and lists mixed?</span>
<span class="comment-copy">@FinNewt Yes. The performance of <code>chain</code> is identical to what you were describing.</span>
<span class="comment-copy">Jinx Dude :-\. But do you really need to put the call to chain in a function?</span>
<span class="comment-copy">No, you can just do <code>list(chain(...))</code>.  I was only keeping the OP's function so the example was clearer.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>chain.from_iterable(iterables)</code></a> is preferable to <code>chain(*iterables)</code> for potentially infinite iterators.</span>
<span class="comment-copy">@Navith - I was actually just about to add <code>chain.from_iterable</code> to my answer.  Thanks for the tip though. :)</span>
