<div class="post-text" itemprop="text">
<p>Given a test suite:</p>
<pre><code>class MyTestSuite(unittest.TestCase):

    def test_foo(self):
        self.assertLessEqual(temperature, boiling, "boiling will burn the cake")
        self.assertEqual(colour, 'golden brown', "the cake should be cooked until golden brown")

    def test_bar(self):
        self.assertIn('flour', ['flour', 'eggs'], "the flour should be mixed in with the eggs")
</code></pre>
<p>I would like to produce a text file describing all the assertions and tests. For example:</p>
<pre class="lang-none prettyprint-override"><code>My Test Suite

Test foo:

* temperature &lt;= boiling because boiling will burn the cake
* colour == 'golden brown' because the cake should be cooked until golden brown

Test bar:

* 'flour' in ['flour', 'eggs'] because the flour should be mixed in with the eggs
</code></pre>
<hr/>
<h1>Update</h1>
<p>Using <code>inspect</code> I have managed to get an iterable list of all the test methods in a module:</p>
<pre><code>def __init__(self, module='__main__'):
    if isinstance(module, basestring):
        self.module = __import__(module)
        for part in module.split('.')[1:]:
            self.module = getattr(self.module, part)
    else:
        self.module = module

    self.tests = {}

    for name, obj in inspect.getmembers(self.module):
        if inspect.isclass(obj):
            for method_name in dir(obj):
                method = callable(getattr(obj, method_name))
                if method and re.match('test.*', method_name):
                    spec = ' '.join(re.findall('[A-Za-z][^A-Z_]*(?=_[A-Z])?|[A-Z][^A-Z_]*', obj.__name__)).title()
                    test = ' '.join(re.findall('[A-Za-z][^A-Z_]*(?=_[A-Z])?|[A-Z][^A-Z_]*', method_name)).capitalize()

                    assertions = # a list of strings describing the assertions

                    try:
                        self.tests[spec][test] = assertions
                    except KeyError:
                        self.tests[spec] = {test: assertions}
</code></pre>
<p>The final step is to extract a list of strings describing the assertions from the test methods. My first solution is to use a load of regexes in conjunction with <code>inspect.getsourcelines(method)</code> but there must be less syntax dependent solution. Thanks to Kevin who suggested <code>ast</code> as a viable option, but this brings me to a more specific question.</p>
<p><strong>How can I use <code>ast</code> to parse the assertions out of a test method into a human readable format?</strong></p>
<p>Failing this maybe there are better options?</p>
</div>
<div class="post-text" itemprop="text">
<p>The doc string for the TestSuite base class says:</p>
<blockquote>
<p>For use, create an instance of TestSuite, then add test case
  instances. When all tests have been added, the suite can be passed to
  a test runner, such as TextTestRunner. It will run the individual test
  cases in the order in which they were added, aggregating the results.
  When subclassing, do not forget to call the base class constructor.</p>
</blockquote>
<p>If you choose to use the TextTestRunner, then you can provide a stream for it to write to: </p>
<pre><code>tester = unittest.TextTestRunner( stream=mystream, verbosity=2 )
test = unittest.makeSuite( MyTestSuite )
tester.run( test )
</code></pre>
<p>Edited to add verbosity = 2; this will print your doc string on each test as it executes.  Is this sufficient information?</p>
</div>
<span class="comment-copy">Have you tried waving the <a href="https://docs.python.org/3/library/ast.html#ast.parse" rel="nofollow noreferrer">ast magic wand</a> over your unit tests?</span>
