<div class="post-text" itemprop="text">
<p>I am trying to extract list of persons and organizations using Stanford Named Entity Recognizer (NER) in Python NLTK.
When I run:</p>
<pre><code>from nltk.tag.stanford import NERTagger
st = NERTagger('/usr/share/stanford-ner/classifiers/all.3class.distsim.crf.ser.gz',
               '/usr/share/stanford-ner/stanford-ner.jar') 
r=st.tag('Rami Eid is studying at Stony Brook University in NY'.split())
print(r) 
</code></pre>
<p>the output is:</p>
<pre><code>[('Rami', 'PERSON'), ('Eid', 'PERSON'), ('is', 'O'), ('studying', 'O'),
('at', 'O'), ('Stony', 'ORGANIZATION'), ('Brook', 'ORGANIZATION'),
('University', 'ORGANIZATION'), ('in', 'O'), ('NY', 'LOCATION')]
</code></pre>
<p>what I want is to extract from this list all persons and organizations in this form:</p>
<pre><code>Rami Eid
Sony Brook University
</code></pre>
<p>I tried to loop through the list of tuples:</p>
<pre><code>for x,y in i:
        if y == 'ORGANIZATION':
            print(x)
</code></pre>
<p>But this code only prints every entity one per line:</p>
<pre><code>Sony 
Brook 
University
</code></pre>
<p>With real data there can be more than one organizations, persons in one sentence, how can I put the limits between different entities?</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to the <a href="https://stackoverflow.com/questions/13765349/multi-term-named-entities-in-stanford-named-entity-recognizer">link</a> discovered by @Vaulstein, it is clear that the trained Stanford tagger, as distributed (at least in 2012) <strong>does not chunk named entities</strong>. From <a href="https://stackoverflow.com/a/13781588/699305">the accepted answer</a>:</p>
<blockquote>
<p>Many NER systems use more complex labels such as IOB labels, where codes like B-PERS indicates where a person entity starts. The CRFClassifier class and feature factories support such labels, <strong>but they're not used in the models we currently distribute (as of 2012)</strong></p>
</blockquote>
<p>You have the following options:</p>
<ol>
<li><p>Collect runs of identically tagged words; e.g., all adjacent words tagged <code>PERSON</code> should be taken together as one named entity. That's very easy, but of course it will sometimes combine different named entities. (E.g. <code>New York, Boston [and] Baltimore</code> is about three cities, not one.)  <strong>Edit:</strong> This is what Alvas's code does in the accepted anwser. See below for a simpler implementation.</p></li>
<li><p>Use <code>nltk.ne_recognize()</code>. It doesn't use the Stanford recognizer but it does chunk entities. (It's a wrapper around an IOB named entity tagger). </p></li>
<li><p>Figure out a way to do your own chunking on top of the results that the Stanford tagger returns.</p></li>
<li><p>Train your own IOB named entity chunker (using the Stanford tools, or the NLTK's framework) for the domain you are interested in. If you have the time and resources to do this right, it will probably give you the best results.</p></li>
</ol>
<p><strong>Edit:</strong> If all you want is to pull out runs of continuous named entities (option 1 above), you should use <code>itertools.groupby</code>:</p>
<pre><code>from itertools import groupby
for tag, chunk in groupby(netagged_words, lambda x:x[1]):
    if tag != "O":
        print("%-12s"%tag, " ".join(w for w, t in chunk))
</code></pre>
<p>If <code>netagged_words</code> is the list of <code>(word, type)</code> tuples in your question, this produces:</p>
<pre class="lang-none prettyprint-override"><code>PERSON       Rami Eid
ORGANIZATION Stony Brook University
LOCATION     NY
</code></pre>
<p>Note again that if two named entities of the same type occur right next to each other, this approach will combine them. E.g. <code>New York, Boston [and] Baltimore</code> is about three cities, not one. </p>
</div>
<div class="post-text" itemprop="text">
<p>IOB/BIO means <strong>I</strong>nside, <strong>O</strong>utside, <strong>B</strong>eginning (IOB), or sometimes aka <strong>B</strong>eginning, <strong>I</strong>nside, <strong>O</strong>utside (BIO)</p>
<p>The Stanford NE tagger returns IOB/BIO style tags, e.g.</p>
<pre><code>[('Rami', 'PERSON'), ('Eid', 'PERSON'), ('is', 'O'), ('studying', 'O'),
('at', 'O'), ('Stony', 'ORGANIZATION'), ('Brook', 'ORGANIZATION'),
('University', 'ORGANIZATION'), ('in', 'O'), ('NY', 'LOCATION')]
</code></pre>
<p>The <code>('Rami', 'PERSON'), ('Eid', 'PERSON')</code> are tagged as PERSON and "Rami" is the Beginning or a NE chunk and "Eid" is the inside. And then you see that any non-NE will be tagged with "O".</p>
<p>The idea to extract continuous NE chunk is very similar to <a href="https://stackoverflow.com/questions/24398536/named-entity-recognition-with-regular-expression-nltk">Named Entity Recognition with Regular Expression: NLTK</a> but because the Stanford NE chunker API doesn't return a nice tree to parse, you have to do this:</p>
<pre><code>def get_continuous_chunks(tagged_sent):
    continuous_chunk = []
    current_chunk = []

    for token, tag in tagged_sent:
        if tag != "O":
            current_chunk.append((token, tag))
        else:
            if current_chunk: # if the current chunk is not empty
                continuous_chunk.append(current_chunk)
                current_chunk = []
    # Flush the final current_chunk into the continuous_chunk, if any.
    if current_chunk:
        continuous_chunk.append(current_chunk)
    return continuous_chunk

ne_tagged_sent = [('Rami', 'PERSON'), ('Eid', 'PERSON'), ('is', 'O'), ('studying', 'O'), ('at', 'O'), ('Stony', 'ORGANIZATION'), ('Brook', 'ORGANIZATION'), ('University', 'ORGANIZATION'), ('in', 'O'), ('NY', 'LOCATION')]

named_entities = get_continuous_chunks(ne_tagged_sent)
named_entities = get_continuous_chunks(ne_tagged_sent)
named_entities_str = [" ".join([token for token, tag in ne]) for ne in named_entities]
named_entities_str_tag = [(" ".join([token for token, tag in ne]), ne[0][1]) for ne in named_entities]

print named_entities
print
print named_entities_str
print
print named_entities_str_tag
print
</code></pre>
<p>[out]:</p>
<pre><code>[[('Rami', 'PERSON'), ('Eid', 'PERSON')], [('Stony', 'ORGANIZATION'), ('Brook', 'ORGANIZATION'), ('University', 'ORGANIZATION')], [('NY', 'LOCATION')]]

['Rami Eid', 'Stony Brook University', 'NY']

[('Rami Eid', 'PERSON'), ('Stony Brook University', 'ORGANIZATION'), ('NY', 'LOCATION')]
</code></pre>
<p>But please note the limitation that if two NEs are continuous, then it might be wrong, nevertheless i still can't think of any example where two NEs are continuous without any "O" between them.</p>
<hr/>
<p>As @alexis suggested, it's better to convert the stanford NE output into NLTK trees:</p>
<pre><code>from nltk import pos_tag
from nltk.chunk import conlltags2tree
from nltk.tree import Tree

def stanfordNE2BIO(tagged_sent):
    bio_tagged_sent = []
    prev_tag = "O"
    for token, tag in tagged_sent:
        if tag == "O": #O
            bio_tagged_sent.append((token, tag))
            prev_tag = tag
            continue
        if tag != "O" and prev_tag == "O": # Begin NE
            bio_tagged_sent.append((token, "B-"+tag))
            prev_tag = tag
        elif prev_tag != "O" and prev_tag == tag: # Inside NE
            bio_tagged_sent.append((token, "I-"+tag))
            prev_tag = tag
        elif prev_tag != "O" and prev_tag != tag: # Adjacent NE
            bio_tagged_sent.append((token, "B-"+tag))
            prev_tag = tag

    return bio_tagged_sent


def stanfordNE2tree(ne_tagged_sent):
    bio_tagged_sent = stanfordNE2BIO(ne_tagged_sent)
    sent_tokens, sent_ne_tags = zip(*bio_tagged_sent)
    sent_pos_tags = [pos for token, pos in pos_tag(sent_tokens)]

    sent_conlltags = [(token, pos, ne) for token, pos, ne in zip(sent_tokens, sent_pos_tags, sent_ne_tags)]
    ne_tree = conlltags2tree(sent_conlltags)
    return ne_tree

ne_tagged_sent = [('Rami', 'PERSON'), ('Eid', 'PERSON'), ('is', 'O'), 
('studying', 'O'), ('at', 'O'), ('Stony', 'ORGANIZATION'), 
('Brook', 'ORGANIZATION'), ('University', 'ORGANIZATION'), 
('in', 'O'), ('NY', 'LOCATION')]

ne_tree = stanfordNE2tree(ne_tagged_sent)

print ne_tree
</code></pre>
<p>[out]:</p>
<pre><code>  (S
  (PERSON Rami/NNP Eid/NNP)
  is/VBZ
  studying/VBG
  at/IN
  (ORGANIZATION Stony/NNP Brook/NNP University/NNP)
  in/IN
  (LOCATION NY/NNP))
</code></pre>
<p>Then:</p>
<pre><code>ne_in_sent = []
for subtree in ne_tree:
    if type(subtree) == Tree: # If subtree is a noun chunk, i.e. NE != "O"
        ne_label = subtree.label()
        ne_string = " ".join([token for token, pos in subtree.leaves()])
        ne_in_sent.append((ne_string, ne_label))
print ne_in_sent
</code></pre>
<p>[out]:</p>
<pre><code>[('Rami Eid', 'PERSON'), ('Stony Brook University', 'ORGANIZATION'), ('NY', 'LOCATION')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not exactly as per the topic author requirement to print what he wants, maybe this can be of any help,</p>
<pre><code>listx = [('Rami', 'PERSON'), ('Eid', 'PERSON'), ('is', 'O'), ('studying', 'O'),
('at', 'O'), ('Stony', 'ORGANIZATION'), ('Brook', 'ORGANIZATION'),
('University', 'ORGANIZATION'), ('in', 'O'), ('NY', 'LOCATION')]


def parser(n, string):
    for i in listx[n]:
        if i == string:
            pass
        else:
            return i

name = parser(0,'PERSON')
lname = parser(1,'PERSON')
org1 = parser(5,'ORGANIZATION')
org2 = parser(6,'ORGANIZATION')
org3 = parser(7,'ORGANIZATION')


print name, lname
print org1, org2, org3
</code></pre>
<p>Output would be something like this</p>
<pre><code>Rami Eid
Stony Brook University
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>WARNING:
Even if u get this model "all.3class.distsim.crf.ser.gz" please dont use it because</p>
<ul> 1st reason :</ul>
<p>For this model stanford nlp people have openly appologized for bad accuracy </p>
<ul>2nd reason :</ul>
<p>It has bad accuracy becase it is case sensitive . </p>
<ul>SOLUTION</ul>
<p>use the model called "english.all.3class.caseless.distsim.crf.ser.gz"</p>
</div>
<div class="post-text" itemprop="text">
<p>Use pycorenlp wrapper from python and then use 'entitymentions' as a key to get the continuous chunk of person or organization in a single string.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try using the "<strong>enumerate</strong>" method.</p>
<p>When you apply NER to the list of words, once tuples are created of (word,type), enumerate this list using the enumerate(list). This would assign an index to every tuple in the list.</p>
<p>So later, when you extract <em>PERSON/ORGANISATION/LOCATION</em> from the list they would have an index attached to it.</p>
<pre><code>1   Hussein
2   Obama
3   II
6   James
7   Naismith
21   Naismith
19   Tony
20   Hinkle
0   Frank
1   Mahan
14   Naismith
0   Naismith
0   Mahan
0   Mahan
0   Naismith
</code></pre>
<p>Now on the basis of the consecutive index a single name can be filtered out.</p>
<blockquote>
<p>Hussein Obama II,
  James Naismith,
  Tony Hank,
  Frank Mahan</p>
</blockquote>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/13765349/multi-term-named-entities-in-stanford-named-entity-recognizer">This</a> may help</span>
<span class="comment-copy">I am working with python (NLTK), not Java. But maybe this can help me to work around.</span>
<span class="comment-copy">Thanks for this valuable answer , but currently i looking for how to add words to PERSON entity</span>
<span class="comment-copy">I tried nltk chunker, but t didn't give the best results. Stanford recognizer gives very good results, but there is this problem with multi terms entities that I have to solve.</span>
<span class="comment-copy">I understand that; otherwise I wouldn't have bothered mentioning the other alternatives.</span>
<span class="comment-copy">@alexis What does this <code>"%-12s"%</code> mean? Is this regex?</span>
<span class="comment-copy">@sharp, no it's for aligning words of different lengths. See <a href="https://docs.python.org/3/library/stdtypes.html#old-string-formatting" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#old-string-formatting</a></span>
<span class="comment-copy">Great! It work perfectly!</span>
<span class="comment-copy">What if I have list of sentences, is it better to call the function for every sentence or to redefine the function?</span>
<span class="comment-copy">Nice explanation of IOB, but this does <b>not</b> "work perfectly." It will over-chunk if there are two adjacent NEs of the same type (see "option 1" in my answer). From the question I thought that the OP understands this.</span>
<span class="comment-copy">About adjacent NEs: the whole point of inventing the IOB format is that it <i>does</i> happen. The CONLL2002 corpus has a bunch of them. (Mostly adjacent entites of the <code>MISC</code> type, but there are a few other types.)</span>
<span class="comment-copy">Well, to be fair in that one both terms refer to the same person. But e.g. in "Mary Shelley's Frankenstein", there should be two NEs.</span>
<span class="comment-copy">good try but i don't think this is the case when you want to extract named entities out of an annotated data from Stanford NLP.</span>
<span class="comment-copy">aah my bad, if the annotations are in string (eg. organization or person etc), this should produce the same output; name = parser(0,None)</span>
