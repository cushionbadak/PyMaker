<div class="post-text" itemprop="text">
<p>I guess we've all seen <code>timeit</code> failing with something like<code>ValueError: stmt is neither a string nor callable</code> when trying use timeit with a custom function/method and passing parameters to it.</p>
<p>E.g.</p>
<pre><code>1&gt; import timeit         
2&gt;                       
3&gt; def testing(a):       
4&gt;     for i in range(0, 1000):
5&gt;         a + 1     
6&gt;                       
7&gt; print (timeit.timeit(testing(5), number=1000))
</code></pre>
<p>Would fail with <code>ValueError: stmt is neither a string nor callable</code> as it is unable to locate without further setups/imports (which messes the statement up, in my opinion).</p>
<p>So, the question that remains is: What is a small, minimalistic (perhaps even "pythonic") way to deal with the problem?</p>
<p>How can we easily time a code snippet for measuring the execution time with all benefits of pythons <code>timeit</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Put the code snippet in a string, and add an import statement to the setup (also a string):</p>
<pre><code>print(timeit.timeit('testing(5)', 'from __main__ import testing', number=1000))
</code></pre>
<p>The script is always called <code>__main__</code>.</p>
<p>As of Python 2.6, both the statement and the setup parameters take a function with no parameters, so you can wrap the <code>testing(5)</code> call in a lambda or simple function. Take into account that this takes <em>extra overhead</em> to run; from the <a href="https://docs.python.org/3/library/timeit.html#timeit.Timer" rel="nofollow"><code>timeit.Timer()</code> class documentation</a>:</p>
<blockquote>
<p>The <em>stmt</em> and <em>setup</em> parameters can also take objects that are callable without arguments. This will embed calls to them in a timer function that will then be executed by <code>timeit()</code>. <strong>Note that the timing overhead is a little larger in this case because of the extra function calls.</strong></p>
</blockquote>
<p>Take this into account when comparing different approaches, don't mix the two styles.</p>
</div>
<div class="post-text" itemprop="text">
<p>One answer I found out (and in my mind a nice one) is to wrap the function you want to call into another parameterless function. Of course this would create a little overhead and mess up readability...that is why lambdas are a nice workaround for this little hack:</p>
<pre><code>1&gt; import timeit               
2&gt;                             
3&gt; def testing(a):             
4&gt;     for i in range(0, 1000):
5&gt;         a + 1           
6&gt;                             
7&gt; print (timeit.timeit(lambda: testing(5), number=1000))

Output&gt; 0.0097241420746
</code></pre>
<p>The only change we mad is in line 7: instead of calling <em>testing</em> directly we wrap it with a lambda function. Now <em>timeit</em> do not has to worry about unknown parameters, because it gets a clean, wrapped anonymous function passed.</p>
<p>Another benefit is this <strong>is working in both</strong>, <strong>python 2.7.X and python 3.X</strong>, without any changes :)</p>
</div>
<span class="comment-copy">So what approach would <i>not</i> work across Python 2.7 and 3.x without changes?</span>
<span class="comment-copy">Of course I did not try any possible solution. Hence I am not sure which would work on 2.7.X or 3.X only...but it is not uncommon that a lot of code snippets are not cross-compatible (or, at least, do not produce the same result). I just thought it would be nice to mention that this solutions works in both versions and delivers the same results.</span>
