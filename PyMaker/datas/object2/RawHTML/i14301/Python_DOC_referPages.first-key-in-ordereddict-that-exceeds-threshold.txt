<div class="post-text" itemprop="text">
<p>Say I have an <code>OrderedDict</code>:</p>
<pre><code>a = OrderedDict([(5, 'a'), (7, 'b'), (10, 'c')])
</code></pre>
<p>Is there an efficient way to get the first value whose key exceeds a certain threshold, <em>without</em> looping over all keys?</p>
<p>Examples: </p>
<pre><code>&gt;&gt;&gt; get_first(a, 6)
'a'
&gt;&gt;&gt; get_first(a, 3)
None
&gt;&gt;&gt; get_first(a, 8)
'b'
</code></pre>
<p>I would like to avoid having to implement binary search myself. Is there an efficient out-of-the-box implementation available?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't have to implement a binary search yourself, you can use the <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow"><code>bisect</code></a> for that. However, OrderedDict is not sorted so you can't use a binary search on the dictionary keys unless you sort them first, and that won't be very efficient (in fact it's likely to be faster to just loop over the keys).</p>
<p>If you maintain a sorted list of keys, then that could work, or if you use an implementation of a dictionary that is sorted. You can use the built-in <code>collections.OrderedDict</code> but then you would have to maintain the sorting yourself, or you can use some btree implementation, I think there are several.</p>
<p>I have only used <a href="https://pypi.python.org/pypi/BTrees" rel="nofollow">BTree</a>, it's written in C and very fast, but the API is somewhat obtuse.</p>
</div>
<span class="comment-copy">First hit for <i>"Python binary search"</i>: <a href="https://docs.python.org/2/library/bisect.html" rel="nofollow noreferrer"><code>bisect</code></a>. Come on.</span>
<span class="comment-copy">Note that "ordered" does not imply "sorted".</span>
<span class="comment-copy">If the keys are not in sorted order, so far as I can see there cannot exist an algorithm that is materially faster than looping over the keys.</span>
