<div class="post-text" itemprop="text">
<p>I am trying to validate name below conditions</p>
<ol>
<li>First &amp; last char should be alphabetic and no space in leading and trailing.</li>
<li>If there any dot then there should be a space. Name can contain at most 1 dot and 1 space.</li>
<li>Word length should be 5,20. </li>
</ol>
<p><strong>Code Work:</strong></p>
<pre><code>    def check(word):
        matchObj = re.match( r'^(([^ ]?)(^[a-zA-Z]).*([a-zA-Z]$)([^ ]?))$', word, re.M|re.I)
        if matchObj:
            return True
        else:
            return False
</code></pre>
<p>I am able to do 1st point but unable to understand how to do 2nd point. And for the 3rd point I tried <code>{5,20}</code> before the last <code>$</code> of regex but it's not working.</p>
<p>From the above regex I want to validate 
- Jackson 
- Dr. Jackson </p>
<p>and invalidate the below:
- Dr.  Jackson # two space after dot(.)
- Dr. .Jackson # contains two dots</p>
<p>Hope with above you got my issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may use this regex with lookahead assertions:</p>
<pre><code>(?mi)^[a-z](?!(?:.*\.){2})(?!(?:.* ){2})(?!.*\.[a-z])[a-z. ]{3,18}[a-z]$
</code></pre>
<p><a href="https://regex101.com/r/m4k3io/1" rel="noreferrer">RegEx Demo</a></p>
<p><strong>RegEx Details:</strong></p>
<ul>
<li><code>(?mi)</code>: Enable MULTILINE and IGNORE_CASE modes</li>
<li><code>^</code>: Start</li>
<li><code>[a-z]</code>: Match a letter at start</li>
<li><code>(?!(?:.*\.){2})</code>: Negative Lookahead to assert that we don't have more than one dot</li>
<li><code>(?!(?:.* ){2})</code>: Negative Lookahead to assert that we don't have more than one space</li>
<li><code>(?!.*\.[a-z])</code>: Negative Lookahead to assert that if we have a dot then it is not followed by a letter</li>
<li><code>[a-z. ]{3,18}</code>: Match 3 to 18 of given characters to <strong>make total length 5 to 20</strong></li>
<li><code>[a-z]</code>: Match a letter before end</li>
<li><code>$</code>: End</li>
</ul>
</div>
<span class="comment-copy">Why not just use <code>len</code> for #3?</span>
<span class="comment-copy">Can you please explain your answer so that future purpose I will keep this tips in mind.</span>
<span class="comment-copy">How {3,18} makes 5 to 20 length. As I know it will check the length from 3 to 18. Length = 3 and length = 18 is included.</span>
<span class="comment-copy">in <code>(?!(?:.*\.){2})</code> What does {2} meant?</span>
<span class="comment-copy"><code>{3,18}</code> is after matching one letter at start and one at end so total it becomes <code>{5,20}</code>. Also <code>(?:.*\.){2}</code> matches any no of characters followed by dot which is in non-capturing group quantified by <code>{2}</code>  to make it match 2 dots anywhere</span>
<span class="comment-copy">This regex will fail for names containing none ASCI characters like <b>Prof. JÃ¼rgen</b>. IMHO, using <code>\w+</code> instead of <code>[a-z]</code> with <code>UNICODE</code> flag would be better choice.</span>
