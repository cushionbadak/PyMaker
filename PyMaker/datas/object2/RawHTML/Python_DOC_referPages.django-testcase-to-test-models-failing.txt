<div class="post-text" itemprop="text">
<p>I am writing a test case for my model to test the <code>__str__</code> but apparently it is failing.</p>
<p>Here is my <strong>tests.py</strong>:</p>
<pre><code>from todoapp.models import User, Task
from django.test import TestCase


class UserModelTest(TestCase):
    def setUp(self):
        self.user = User.objects.create(
            first_name='john',
            last_name='doe',
            email='abc@example.com',
            password='johndoe')

    def test_string_representation(self):
        object_name = User.objects.get(id=50)
        expected_object_name = object_name.email
        self.assertEqual(expected_object_name, str(object_name))
</code></pre>
<p>Here is my <strong>models.py</strong>:</p>
<pre><code>class User(AbstractUser):
    username = None
    email = models.EmailField(unique=True)
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['first_name', 'last_name']

    def __str__(self):
        return self.email
</code></pre>
<p><strong>P.S.</strong>:
A user with <code>id=50</code> already exists</p>
</div>
<div class="post-text" itemprop="text">
<p>Django creates a test database when you run the test, so it sounds like the user with <code>id=50</code> <em>doesn't</em> exist in the test database.</p>
<p>You are already creating a user in the <code>setUp</code> method, so I suggest you fetch that user in the test.</p>
<pre><code>def test_string_representation(self):
    object_name = User.objects.get(email='abc@example.com')
    expected_object_name = object_name.email
    self.assertEqual(expected_object_name, str(object_name))
</code></pre>
<p>Note that you shouldn't usually rely on the id when fetching objects during tests. The id can change from run to run, for example if the tests run in a different order.</p>
</div>
<span class="comment-copy">If the test is failing, please show the output when you run the test.</span>
<span class="comment-copy">It worked. Thanks a lot. Btw is the <code>setUp</code> method compulsory ? What should my code be if I omit it ?</span>
<span class="comment-copy">If you remove the <code>setUp</code> method, then you'll have to create the user somewhere else, otherwise <code>User.objects.get(...)</code> will fail. The <code>setUp</code> method runs before every test in the class. If you have more than one test in the class, then putting <code>User.objects.create(...)</code> in the <code>setUp</code> method means you don't have to repeat it in every test method. Django also has <a href="https://docs.djangoproject.com/en/2.1/topics/testing/tools/#django.test.TestCase.setUpTestData" rel="nofollow noreferrer"><code>setUpTestData</code></a> which can be faster if you have lots of tests in the test class.</span>
<span class="comment-copy">Gotcha ! Thanks mate :)</span>
