<div class="post-text" itemprop="text">
<p>I made a function that consumes two dictionaries, <code>curr_stats</code> and <code>weekly_result</code>.  If there are any keys in <code>weekly_result</code> that aren't in <code>curr_stats</code>, the function is supposed to just print <code>invalid_msg</code>, with no mutation of <code>curr_stats</code>.</p>
<p>But the <code>if</code> statement on the 5th line of my code doesn't seem to be working. It's supposed to trigger the next <code>if</code> statement, so no mutation of <code>curr_stats</code> occurs.</p>
<pre><code>def update_standings(curr_stats, weekly_result):
    invalid = 0
    point_counter(weekly_result)
    for team in weekly_result:
        if team in curr_stats == False:
            invalid = invalid + 1
    if invalid &gt; 0:
        print(invalid_msg)
    else:
        for team in weekly_result:
            curr_stats[team] = curr_stats[team] + weekly_result[team]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python, <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">all comparisons have the <em>same</em> precedence</a>, including <code>in</code>.
What's happening is <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">comparison chaining</a>, a special form intended to test transitive relationships like in math class:</p>
<pre><code>if x_min &lt; x &lt; x_max:
    ...
</code></pre>
<p>As Paweł Kordowski pointed out in <a href="https://stackoverflow.com/questions/42884411#comment72871193_42884411">his comment</a>, the above comparison chain is mostly equivalent to:</p>
<pre><code>if x_min &lt; x and x &lt; x_max:
    ...
</code></pre>
<p>(There is one difference:
The "equivalent" code might evaluate <code>x</code> twice, while the comparison chain evaluates <code>x</code> exactly once.)</p>
<p>In your case, the comparison chain is:</p>
<pre><code>if team in curr_stats == False:
    ...
</code></pre>
<p>...which is (mostly) equivalent to:</p>
<pre><code>if team in curr_stats and curr_stats == False:
    ...
</code></pre>
<p>This is only true if <code>curr_stats</code> contains <code>team</code> <em>and</em> <code>curr_stats</code> is empty... which should never happen.</p>
<p>The problem with your code is the <code>== False</code> --- in part because it turned a comparison into a comparison chain, but mostly because you never needed it in the first place.
Python provides the <code>not</code> keyword for when you want a Boolean's opposite.
Your conditional statement should read:</p>
<pre><code>if team not in curr_stats:
    invalid = invalid + 1
</code></pre>
<p>One last suggestion:
This function can be made even shorter by getting rid of the <code>invalid</code> counter and just returning as soon as an invalid <code>team</code> is found.
(Once the you've discovered that <code>weekly_result</code> is invalid input, you probably don't care if it's "<em>even more</em> invalid".)
I also used <a href="https://docs.python.org/3/library/stdtypes.html#dict.items" rel="nofollow noreferrer"><code>dict.items</code></a> to simplify the final <code>for</code> loop:</p>
<pre><code>def update_standings(curr_stats, weekly_result):
    point_counter(weekly_result)
    for team in weekly_result:
        if team not in curr_stats:
            print(invalid_msg)
            return
    for team, result in weekly_result.items():
        curr_stats[team] += result
</code></pre>
</div>
<span class="comment-copy">@matteo-piano the original code is equal to <code>team in curr_stats and curr_stats == False</code> and the second part is <code>False</code>, see <a href="https://docs.python.org/2/reference/expressions.html#comparisons" rel="nofollow noreferrer">docs.python.org/2/reference/expressions.html#comparisons</a></span>
<span class="comment-copy">@PawełKordowski ohh I see, alright thanks thanks</span>
