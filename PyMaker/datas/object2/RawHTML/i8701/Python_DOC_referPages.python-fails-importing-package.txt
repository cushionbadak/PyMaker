<div class="post-text" itemprop="text">
<p>I have trouble importing package.
My file structure is like this:</p>
<pre><code>filelib/  
    __init__.py
    converters/ 
        __init__.py
        cmp2locus.py
    modelmaker/ 
        __init__.py
        command_file.py
</code></pre>
<p>In module <code>command_file.py</code> I have a class named <code>CommandFile</code> which i want to call in the <code>cmp2locus.py</code> module.</p>
<p>I have tried the following in <code>cmp2locus.py</code> module:</p>
<pre><code>import filelib.modelmaker.command_file
import modelmaker.command_file
from filelib.modelmaker.command_file import CommandFile
</code></pre>
<p>All these options return <code>ImportError: No modules named ...</code>
Appreciate any hint on solving this. I do not understand why this import does not work.</p>
</div>
<div class="post-text" itemprop="text">
<p>To import from another folder, you have to append that path of the folder to <code>sys.path</code>:</p>
<pre><code>import sys
sys.path.append('path/filelib/modelmaker')
import command_file
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To perform these imports you have 3 options, I'll list them in the order I'd prefer. (For all of these options I will be assuming python 3)</p>
<h2>Relative imports</h2>
<p>Your file structure looks like a proper package file structure so this should work however anyone else trying this option should note that it requires you to be in a package; this won't work for some random script.</p>
<p>You'll also need to run the script doing the importing from outside the package, for example by importing it and running it from there rather than just running the cmp2locus.py script directly</p>
<p>Then you'll need to change your imports to be relative by using <code>..</code>
So:</p>
<pre><code>import filelib.modelmaker.command_file
</code></pre>
<p>becomes</p>
<pre><code>from ..modelmaker import command_file
</code></pre>
<p>The <code>..</code> refers to the parent folder (like the hidden file in file systems).
Also note you have to use the <code>from import</code> syntax because names starting with <code>..</code> aren't valid identifiers in python. However you can of course import it as whatever you'd like using <code>from import as</code>.</p>
<p>See also <a href="https://www.python.org/dev/peps/pep-0328/#guido-s-decision" rel="nofollow noreferrer">the PEP</a></p>
<h2>Absolute imports</h2>
<p>If you place your package in <a href="https://docs.python.org/3/library/site.html#site.getsitepackages" rel="nofollow noreferrer">site-packages</a> (the directories returned by <code>site.getsitepackages()</code>) you will be able to use the format of imports that you were trying to use in the question. Note that this requires any users of your package to install it there too so this isn't ideal (although they probably would, relying on it is bad).</p>
<h2>Modifying the python path</h2>
<p>As <a href="https://stackoverflow.com/users/3933856/meera">Meera</a> answered you can also directly modify the python path by using sys.</p>
<p>I dislike this option personally as it feels very 'hacky' but I've been told it can be useful as it gives you precise control of what you can import.</p>
</div>
<span class="comment-copy">Thank you @Meera. However it seems this does not add the path permanently. It means i need to always add this <code>sys.path.append</code> in my code. I find it strange and never noticed it was necessary. Is there a way to permanently add my <code>filelib</code> package in the sys.path to then import whetever is in that library?</span>
<span class="comment-copy">Thank you @Blimmo. I like the idea of the relative imports. I am actually running Python2.7. If i try your <code>suggestion:from ..modelmaker import command_file</code>, i get the following error: <code>ValueError: Attempted relative import in non-package</code>. Do i need anything special in my <b>initi</b>.py for this to work? Or is it Python2.7 preventing it?</span>
<span class="comment-copy">I just realised the comment "rather than just running the cmp2locus.py". I am not sure I understand where i should import it from if i want to use in that particular module.</span>
<span class="comment-copy">@duanerf You just have to call the script you want to do the imports from somewhere else originally, the script can still use the imports in it. This is because python packages aren't really supposed to be run themselves, just used. So you could make a run.py outside of the package that just consists of <code>import filelib.converters.cmp2locus</code>. This would run the script from outside which allows the package to be loaded. <a href="https://docs.python.org/2/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">This</a> may be useful.</span>
