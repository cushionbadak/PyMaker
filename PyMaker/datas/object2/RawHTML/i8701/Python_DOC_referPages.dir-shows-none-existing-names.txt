<div class="post-text" itemprop="text">
<p>I want to check the <code>pprint</code> package in python. And call the <code>dir()</code> function:</p>
<pre><code>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; [n for n in dir(pprint) if not n.startswith('_')]
['PrettyPrinter', 'isreadable', 'isrecursive', 'pformat', 'pprint', 'saferepr', 'warnings']
&gt;&gt;&gt; pprint.__all__
['pprint', 'pformat', 'isreadable', 'isrecursive', 'saferepr', 'PrettyPrinter']
</code></pre>
<p>It is puzzling than the different of <code>dir(pprint)</code> and <code>pprint.__all__</code>. There is an additional <code>warnings</code> in <code>dir(pprint)</code>. </p>
<p>I open the source of <code>pprint.py</code>, and find there is no function named <code>warnings</code>. There is only <code>import warnings</code>:</p>
<pre><code>import sys as _sys
import warnings
__all__ = ["pprint","pformat","isreadable","isrecursive","saferepr",
       "PrettyPrinter"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This shouldn't puzzle you. <code>import</code>ed names are visible in the <code>dir</code> output since <code>dir(module)</code> lists it's attributes. <code>warnings</code> is an attribute of the module <code>pprint</code> since importing it brings it in the <code>pprint</code> module namespace (dictionary).  </p>
<p>Looking at <a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow noreferrer"><code>dir</code>'s documentation tells you this</a>:</p>
<blockquote>
<p>The default <code>dir()</code> mechanism behaves differently with different types of objects, as it attempts to produce the most relevant, rather than complete, information:</p>
<ul>
<li>If the object is a module object, <em>the list contains the names of the module’s attributes</em>.</li>
</ul>
</blockquote>
<p><sup>(emphasis mine)</sup></p>
<p><code>module.__all__</code> is just an explicit list of names exported when <code>import *</code> is used, it can be viewed as the "public API" of a given module. </p>
<p>These two can sometimes be similar but more often than not they differ.</p>
</div>
<div class="post-text" itemprop="text">
<p>The results from <code>dir()</code> and <code>__all__</code> are naturally different – they provide different functionality.</p>
<p>If you call <code>help(dir)</code>, you get:</p>
<pre><code>Help on built-in function dir in module builtins:

dir(...)
    dir([object]) -&gt; list of strings

    If called without an argument, return the names in the current scope.
    Else, return an alphabetized list of names comprising (some of) the attributes
    of the given object, and of attributes reachable from it.
    If the object supplies a method named __dir__, it will be used; otherwise
    the default dir() logic is used and returns:
      for a module object: the module's attributes.
      for a class object:  its attributes, and recursively the attributes
        of its bases.
      for any other object: its attributes, its class's attributes, and
        recursively the attributes of its class's base classes.
</code></pre>
<p>You are calling <code>dir</code> on a module, so it returns the module's attributes. Those attributes are anything available in the module (which includes the <code>warnings</code> module that it imports).</p>
<p>On the other hand, <code>__all__</code> is set by the package/designer to dictate what is imported by default when importing everything from the module (i.e. <code>from module import *</code>).</p>
</div>
<span class="comment-copy"><code>dir(module)</code> and <code>module.__all__</code> aren't expected to be the same, and <code>dir(module)</code> doesn't just list the functions a module defines.</span>
<span class="comment-copy">The pprint.py is a module, the <code>import warnings</code> is the attribute.</span>
<span class="comment-copy">@firelyu exactly that. Note, Python 3 removed the <code>warnings</code> import in <code>pprint</code> so this doesn't appear there.</span>
