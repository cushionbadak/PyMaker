<div class="post-text" itemprop="text">
<p>There're two lists like </p>
<pre><code>[[A, A], [B, B], [C, C], [D, D]]
</code></pre>
<p>and</p>
<pre><code>[[A, A], [B, B]]
</code></pre>
<p>How to delete list 2 from 1 with result <code>[[C, C], [D, D]]</code> and make it without loop, because both lists are very big and loops works slow?</p>
<p>thanks
list examples</p>
<pre><code>&gt;&gt;&gt;a = [[9, 9], [8, 8], [7, 7], [6, 6], [4, 4], [5, 5], [12, 12], [15, 15], [2, 2], [3, 3]] 

&gt;&gt;&gt;b = [[4, 4], [5, 5]]
</code></pre>
<p>form ask to write what I already tried, OK, it's below
Attempt one: (doesn't work, moreover has a loop inside)</p>
<pre><code>def rightdotsremowe (ax, bx): 
    for o in set(bx):
        try:
            ax.remove(o) 
        except ValueError:
            pass
    return ax
</code></pre>
<p>Attempt two (looks better but doesn't work too)</p>
<pre><code>newlist00 = [x for x in a if (x not in e)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the order is not very important to you,<code>sets</code> are significantly faster. So you can try this,it will be faster than list.</p>
<pre><code>a=[['A', 'A'], ['B', 'B'], ['C', 'C'], ['D', 'D']]

a={tuple(i) for i in a}
</code></pre>
<p>And try to use <code>difference</code> method:</p>
<blockquote>
<p>return new set with elements in a but not in b</p>
</blockquote>
<p><strong>Average case O(len(a))</strong></p>
<pre><code>a=[['A', 'A'], ['B', 'B'], ['C', 'C'], ['D', 'D']]
b=[['A', 'A'], ['B', 'B']]

a={tuple(i) for i in a}
b={tuple(i) for i in b}

print a.difference(b)
</code></pre>
<p>That is becaus <code>set</code> uses a hash function to map to a bucket. Since Python implementations automatically resize that hash table, the speed can be constant <code>O(1)</code>.</p>
<p><code>Sets</code> are significantly faster when it comes to determining if an object in a set , but slower than <code>lists</code> when it comes to iterating over their contents.</p>
<p>Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>[obj for obj in a if obj not in b]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just convert the items you want to remove to set of tuples and then use list comprehension to create a new list:</p>
<pre><code>&gt;&gt;&gt; a = [[9, 9], [8, 8], [7, 7], [6, 6], [4, 4], [5, 5], [12, 12], [15, 15], [2, 2], [3, 3]]
&gt;&gt;&gt; b = [[4, 4], [5, 5]]
&gt;&gt;&gt; s = {tuple(x) for x in b}
&gt;&gt;&gt; [x for x in a if tuple(x) not in s]
[[9, 9], [8, 8], [7, 7], [6, 6], [12, 12], [15, 15], [2, 2], [3, 3]]
</code></pre>
<p>Above has <strong>O(n)</strong> time complexity since checking membership in set is <strong>O(1)</strong> where as using only lists has <strong>O(n^2)</strong> time complexity since membership testing in list is <strong>O(n)</strong>. Note that it works only if items on the lists are <a href="https://docs.python.org/3/glossary.html" rel="nofollow noreferrer">hashable</a>.</p>
</div>
<span class="comment-copy">If they were sets of tuples you could just subtract them, but I don't see how to do this without loops (meaning, in less than O(n)) with a 2D list.</span>
<span class="comment-copy">Making a set doesn't magically make things faster. Set <i>lookups</i> are O(1). This also doesn't address the filtering aspect at all.</span>
<span class="comment-copy">thanks, it works!</span>
<span class="comment-copy">The OP has already tried exactly that.</span>
<span class="comment-copy">use 'b' instead of 'e' in [x for x in a if (x not in e)]. It should work then</span>
<span class="comment-copy">I have no idea where the <code>e</code> came from. The OP never said what "didn't work" about it, so we can only guess. If it's a simple typo, then an answer isn't necessary, as that kind of question isn't useful. If it's something else, then this answer doesn't add anything that wasn't present in the question.</span>
<span class="comment-copy">you right, its my fault. "e" comes from attempt to understand what's wrong in stroke and means e= [5, 5] where I tried to make list 2 more simple, without list inside</span>
<span class="comment-copy">Mind explaining a bit about your code ?</span>
<span class="comment-copy">All this does is check for membership in a set rather than a list. The OP already tried almost exactly this, and said that it "doesn't work" (for some unspecified reason).</span>
<span class="comment-copy">@TigerhawkT3 That's the whole point, membership checking with <code>set</code> has <b>O(1)</b> time complexity where as list is <b>O(n)</b>. Added short explanation about time complexities to the answer to stress the point.</span>
<span class="comment-copy">If you know what the "whole point" is, please let me know. OP just said that what they tried "doesn't work." I don't know if they mean it produces an error, has incorrect results, is too slow, or what.</span>
