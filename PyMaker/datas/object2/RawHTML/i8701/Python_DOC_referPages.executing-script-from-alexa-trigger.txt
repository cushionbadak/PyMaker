<div class="post-text" itemprop="text">
<p>I've been working with the example-minimal.py script from <a href="https://github.com/toddmedema/echo" rel="nofollow noreferrer">https://github.com/toddmedema/echo</a> and need to alter it so that rather than printing the status changes to the terminal, it executes another script.</p>
<p>I'm a rank amateur but eager to learn and even more eager to get this project done.  </p>
<p>Thanks in advance for any help you can provide!!</p>
<pre><code>""" fauxmo_minimal.py - Fabricate.IO

    This is a demo python file showing what can be done with the debounce_handler.
    The handler prints True when you say "Alexa, device on" and False when you say
    "Alexa, device off".

    If you have two or more Echos, it only handles the one that hears you more clearly.
    You can have an Echo per room and not worry about your handlers triggering for
    those other rooms.

    The IP of the triggering Echo is also passed into the act() function, so you can
    do different things based on which Echo triggered the handler.
"""

import fauxmo
import logging
import time

from debounce_handler import debounce_handler

logging.basicConfig(level=logging.DEBUG)

class device_handler(debounce_handler):
    """Publishes the on/off state requested,
       and the IP address of the Echo making the request.
    """
    TRIGGERS = {"device": 52000}

    def act(self, client_address, state, name):
        print "State", state, "on ", name, "from client @", client_address
        return True

if __name__ == "__main__":
    # Startup the fauxmo server
    fauxmo.DEBUG = True
    p = fauxmo.poller()
    u = fauxmo.upnp_broadcast_responder()
    u.init_socket()
    p.add(u)

    # Register the device callback as a fauxmo handler
    d = device_handler()
    for trig, port in d.TRIGGERS.items():
        fauxmo.fauxmo(trig, u, p, None, port, d)

    # Loop and poll for incoming Echo requests
    logging.debug("Entering fauxmo polling loop")
    while True:
        try:
            # Allow time for a ctrl-c to stop the process
            p.poll(100)
            time.sleep(0.1)
        except Exception, e:
            logging.critical("Critical exception: " + str(e))
            break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm going to try and be helpful by going through that script and explaining what each bit does. This should help you understand what it's doing, and therefore what you need to do to get it running something else:</p>
<pre><code>import fauxmo
</code></pre>
<p>This <a href="https://github.com/makermusings/fauxmo" rel="nofollow noreferrer">is a library</a> that allows whatever device is running the script to pretend to be a Belkin WeMo; a device that is triggerable by the Echo.</p>
<pre><code>import logging
import time
from debounce_handler import debounce_handler
</code></pre>
<p>This is importing some more libraries that the script will need. <a href="https://docs.python.org/2/library/logging.html" rel="nofollow noreferrer">Logging</a> will be used for logging things, which is useful for debugging, <a href="https://docs.python.org/2/library/time.html" rel="nofollow noreferrer">time</a> will be used to cause the script to pause so that you can quit it by typing ctrl-c, and the <a href="https://github.com/toddmedema/echo/blob/master/debounce_handler.py" rel="nofollow noreferrer">debounce_handler</a> library will be used to keep multiple Echos from reacting to the same voice command (which would cause a <a href="http://whatis.techtarget.com/definition/debouncing" rel="nofollow noreferrer">software bounce</a>).</p>
<pre><code>logging.basicConfig(level=logging.DEBUG)
</code></pre>
<p>Configures a logger that will allow events to be logged to assist in debugging.</p>
<pre><code>class device_handler(debounce_handler):
    """Publishes the on/off state requested,
       and the IP address of the Echo making the request.
    """

    TRIGGERS = {"device": 52000}

    def act(self, client_address, state, name):
        print "State", state, "on ", name, "from client @", client_address
        return True
</code></pre>
<p>We've created a <a href="http://www.jesshamrick.com/2011/05/18/an-introduction-to-classes-and-inheritance-in-python/" rel="nofollow noreferrer">class</a> called <em>device_handler</em> which contains a <a href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionary</a> called <em>TRIGGERS</em> and a <a href="https://docs.python.org/3.5/reference/compound_stmts.html#function" rel="nofollow noreferrer">function</a> called <em>act</em>.</p>
<p><em>act</em> takes a number of variables as input; <em>self</em> (any data structures in the class, such as our <em>TRIGGERS</em> dictionary), <em>client_address</em>, <em>state</em>, and <em>name</em>. We don't know what these are yet, but the names are quite self explanatory, so we can guess that <em>client_address</em> is probably going to be the IP address of the Echo, *state" that it is in, and <em>name</em> will be its name. <strong>This is the function that you're going to want to edit, since it is the final function triggered by the Echo. You can probably just stick whatever you function you want after the print statement</strong>. The <em>act</em> function returns True when called.</p>
<pre><code>if __name__ == "__main__":
</code></pre>
<p>This will execute everything indented below it if you're running the script directly. More detail about that <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">here</a> if you want it.</p>
<pre><code>    # Startup the fauxmo server
    fauxmo.DEBUG = True
    p = fauxmo.poller()
    u = fauxmo.upnp_broadcast_responder()
    u.init_socket()
    p.add(u)
</code></pre>
<p>As the comment suggests, this starts the fake WeMo server. We enable debugging, which just <a href="https://github.com/makermusings/fauxmo/blob/master/fauxmo.py#L62" rel="nofollow noreferrer">prints any debug messages</a> to the command line, create a <a href="https://github.com/makermusings/fauxmo/blob/master/fauxmo.py#L70" rel="nofollow noreferrer">poller</a>, <em>p</em>, which can process incoming messages, and create a <a href="https://github.com/makermusings/fauxmo/blob/master/fauxmo.py#L283" rel="nofollow noreferrer">upnp broadcast responder</a>, <em>u</em>, which can handle <a href="https://en.wikipedia.org/wiki/Universal_Plug_and_Play" rel="nofollow noreferrer">UPnP</a> device registration. We then tell <em>u</em> to <a href="https://github.com/makermusings/fauxmo/blob/master/fauxmo.py#L289" rel="nofollow noreferrer">initialise a socket</a>, setting itself up on the network listening for UPnP devices, and <a href="https://github.com/makermusings/fauxmo/blob/master/fauxmo.py#L79" rel="nofollow noreferrer">add</a> <em>u</em> to <em>p</em> so that we can respond when a broadcast is received.</p>
<pre><code>    # Register the device callback as a fauxmo handler
    d = device_handler()
    for trig, port in d.TRIGGERS.items():
        fauxmo.fauxmo(trig, u, p, None, port, d)
</code></pre>
<p>As the comment says, this sets up an <a href="https://docs.python.org/2/tutorial/classes.html#instance-objects" rel="nofollow noreferrer">instance</a> of the device handler class that we made earlier. Now we <a href="https://wiki.python.org/moin/ForLoop" rel="nofollow noreferrer">for-loop</a> through the items in our <em>TRIGGERS</em> dictionary in our device handler <em>d</em> and calls <a href="https://github.com/makermusings/fauxmo/blob/master/fauxmo.py#L198" rel="nofollow noreferrer"><code>fauxmo.fauxmo</code></a> using the information it has found in the dictionary. If we look at the dictionary definition in the class definition we can see that there's only one entry, a trig <em>device</em> on port <em>52000</em>. This essentially does the bulk of the work, making the actual fake WeMo device talk to the Echo. If we look at that <code>fauxmo.fauxmo</code> function we see that, when it receives a suitable trigger it calls the <em>act</em> function in the <em>device_handler</em> class we defined before.</p>
<pre><code>    # Loop and poll for incoming Echo requests
    logging.debug("Entering fauxmo polling loop")
    while True:
        try:
            # Allow time for a ctrl-c to stop the process
            p.poll(100)
            time.sleep(0.1)
        except Exception, e:
            logging.critical("Critical exception: " + str(e))
            break
</code></pre>
<p>And here we enter the fauxmo polling loop. This <a href="https://stackoverflow.com/a/3754632/6144626">indefinitely loops</a> through the following code, checking to see if we've received a message. The code below it <a href="https://docs.python.org/3/reference/compound_stmts.html#try" rel="nofollow noreferrer">tries</a> to poll for messages, to see if its received anything, then wait for a bit, then poll again. Except, if it can't do that for some reason, then the script will <a href="https://docs.python.org/2/reference/simple_stmts.html#break" rel="nofollow noreferrer">break</a> and the error will be logged so you can see what went wrong.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just to clarify; If the Fauxmo loop is running then the script is fine, right? </p>
<p>I think the TO is not getting any connection between the Echo and the WeMo fake device. It can help if you install the WeMo skill first. You may require an original WeMo device initially though.</p>
<p>I know these are old threads but it might help someone still.</p>
</div>
<span class="comment-copy">What have you tried so far and what issues are you experiencing?</span>
<span class="comment-copy">I have no idea where to start, to be honest.  So I've tried asking on the Instructables for it and searching the net for something similar that I can adapt...</span>
