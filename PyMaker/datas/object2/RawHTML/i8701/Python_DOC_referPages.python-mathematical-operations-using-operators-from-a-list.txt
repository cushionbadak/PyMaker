<div class="post-text" itemprop="text">
<p>Say I have a list with mathematical operators in it, like this</p>
<pre><code>operators = ['+','-','*','/']
</code></pre>
<p>And I am taking a random operator from here, like this</p>
<pre><code>op = random.choice(operators)
</code></pre>
<p>If I take two numbers, say 4 and 2, how can I get Python to do the mathematical operation (under the name 'op') with the numbers?</p>
</div>
<div class="post-text" itemprop="text">
<p>You better do <strong>not specify the operators as text</strong>. Simply use <em>lambda expressions</em>, or the <code>operator</code> module:</p>
<pre><code><b>import operator</b>
import random

operators = [operator.<b>add</b>,operator.<b>sub</b>,operator.<b>mul</b>,operator.<b>floordiv</b>]
op = random.choice(operators)</code></pre>
<p>You can then call the <code>op</code> by calling it with two arguments, like:</p>
<pre><code>result = <b>op(2,3)</b></code></pre>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; import random
&gt;&gt;&gt; 
&gt;&gt;&gt; operators = [operator.add,operator.sub,operator.mul,operator.floordiv]
&gt;&gt;&gt; op = random.choice(operators)
&gt;&gt;&gt; op
&lt;built-in function sub&gt;
&gt;&gt;&gt; op(4,2)
2
</code></pre>
<p>So as you can see, the <code>random</code> picked the <code>sub</code> operator, so it subtracted <code>2</code> from <code>4</code>.</p>
<p>In case you want to define an function that is not supported by <code>operator</code>, etc. you can use a lambda-expression, like:</p>
<pre><code>operators = [operator.add,<b>lambda x,y:x+2*y</b>]</code></pre>
<p>So here you specified a function that takes the parameters <code>x</code> and <code>y</code> and calculates <code>x+2*y</code> (of course you can define an arbitrary expression yourself).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>eval</code> if you are absolutely certain that what you are passing to it is safe like so:</p>
<pre><code>num1 = 4
num2 = 2
operators = ['+','-','*','/']
op = random.choice(operators)
res = eval(str(num1) + op + str(num2))
</code></pre>
<p>Just keep in mind that <code>eval</code> executes code without running any checks on it so take care. Refer to <a href="https://stackoverflow.com/questions/20748202/valueerror-malformed-string-when-using-ast-literal-eval">this</a> for more details on the topic when using <code>ast</code> to do a safe evaluation.</p>
</div>
<span class="comment-copy">Thank you! I have tried using operator.div but I keep getting an error?</span>
<span class="comment-copy">@DW_0505: yeah there is no <code>operator.div</code>. It is either <code>operator.floordiv</code> or <code>operator.truediv</code> (see <a href="https://docs.python.org/3/library/operator.html#operator.floordiv" rel="nofollow noreferrer">here</a> for a list of operators).</span>
<span class="comment-copy">Thank you for your help!</span>
<span class="comment-copy"><code>eval(..)</code> is considered dangerous. You better avoid it, unless you have absolutely no choice.</span>
<span class="comment-copy">@WillemVanOnsem Agreed. I'm just providing an answer with the given parameters :)</span>
<span class="comment-copy">@Ev.Kounis <code>literal_eval</code> won't work with all operators, try <code>ast.literal_eval('2*3')</code>; I'm actually surprised it works with <code>+</code> and <code>-</code></span>
<span class="comment-copy">@Chris_Rands It seems that in some cases, additions and subtractions also fail. See the link above,</span>
<span class="comment-copy">@Ev.Kounis Thanks, also see: <a href="http://stackoverflow.com/questions/40584417/why-does-ast-literal-eval5-7" title="why does ast literal eval5 7">stackoverflow.com/questions/40584417/â€¦</a></span>
