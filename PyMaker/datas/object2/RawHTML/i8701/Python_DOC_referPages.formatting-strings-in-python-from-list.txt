<div class="post-text" itemprop="text">
<pre><code>class Employee:

def set_name(self, name):
    self.name = name

def set_IDnumber(self, IDnumber):
    self.IDnumber = IDnumber

def set_department(self, department):
    self.department = department

def set_jobTitle(self, jobTitle):
    self.jobTitle = jobTitle

def get_name(self):
    # Returns name
    return self.name

def get_IDnumber(self):
    # Returns IDnumber
    return self.IDnumber

def get_department(self):
    # Returns department
    return self.department

def get_jobTitle(self):
    # Returns job title
    return self.jobTitle

def make_list():
    # Declaring list for storing information
    employee_list = []
    print("Enter data for 3 employees")
    # Loop to loop through 3 employees info
    for i in range(1, 4):
        print('Employee ' + str(i))
        # Takes input for each object
        name = input('Enter employee name: ')
        idNumber = int(input('Enter employee ID number: '))
        department = input('Enter employee department: ')
        jobTitle = input('Enter job title: ')
        employee = Employee()
        # Sets information for each object
        employee.set_name(name)
        employee.set_IDnumber(idNumber)
        employee.set_department(department)
        employee.set_jobTitle(jobTitle)
        employee_list.append(employee)
    #Returns list for display
    return employee_list

def displayEmployees(list):
    # Declaring strings to be further manipulated for spacing purposes
    shopString = "CHRISTY'S SHOP EMPLOYEE REPORT"
    employeeString = "EMPLOYEE NAME"
    identifierString = "IDENTIFIER"
    departmentString = "DEPARTMENT"
    titleString = "TITLE"
    # String alignment
    print(shopString.center(70))
    print(employeeString + identifierString.center(40) + departmentString +     titleString.rjust(10))
    print("------------------" + "----------".center(30) + "----------".rjust(15) + "-----".rjust(10))
    for item in list:
        name = item.get_name()
        idNumber = item.get_IDnumber()
        department = item.get_department()
        jobTitle = item.get_jobTitle()
        print(name + idNumber.center(30) + department.rjust(15) + jobTitle.rjust(10))


def main():
    employees = make_list()
    displayEmployees(employees)

main()
</code></pre>
<p>Here's my program. I'm trying to format the output from the list like this below:</p>
<p><a href="https://i.stack.imgur.com/GwltG.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/GwltG.png"/></a></p>
<p>If anyone could help me because I find that due to the differing length of each string in the list throws off the alignment so there must be a better way to align the information correctly. Thanks ahead of time.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>CODE ON THE END</strong></p>
<p>I changed a few things in your code. </p>
<p>Firstly, since you have no methods that are not accesors i used <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">namedtuple</a> instead of your Employee class. If you really need getters and setters (in class) please read this loudly and make it sink in: </p>
<blockquote>
<p>If I <strong>must</strong> have them then I will hide them behind a property.</p>
</blockquote>
<p>(paraphrased quote from <a href="https://stackoverflow.com/questions/2627002/whats-the-pythonic-way-to-use-getters-and-setters">here</a>). 
By property I mean <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">true pythonic properties</a>.
However try not to do this, see : <a href="https://stackoverflow.com/a/1555169/3809977">this answer</a></p>
<p>Secondly, you have to check if user gave you good type (hence <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">try-except</a>).</p>
<p>Thirdly, 
I used something called <a href="https://docs.python.org/3.1/library/string.html#formatspec" rel="nofollow noreferrer">Format Specification Mini-Language (a.k.a. formatspec) </a>. It really helps if it comes to string formatting.</p>
<pre class="lang-py prettyprint-override"><code>from collections import namedtuple

Employee = namedtuple('EmployeeRecord', 'name,idNumber,department,jobTitle')


def make_list():
    employees = []
    print("Enter data for 3 employees")
    i = 1
    while i &lt; 4:
        print('Employee ' + str(i))

        name = input('Enter employee name: ')
        idNumber = input('Enter employee ID number: ')
        try:
            idNumber = int(idNumber)
        except ValueError:
            print("ID number is supposted to be integer")
            continue
        idNumber = int(idNumber)
        department = input('Enter employee department: ')
        jobTitle = input('Enter job title: ')
        employees.append(Employee(name,idNumber,department,jobTitle)) 
        i += 1
    return employees


def displayEmployees(list, titleFormat, recordFormat):
    shopString = "CHRISTY'S SHOP EMPLOYEE REPORT"
    print('{:^70}'.format(shopString))
    print(titleFormat.format("EMPLOYEE NAME", "IDENTIFIER", "DEPARTMENT", "TITLE"))
    print(titleFormat.format("------------------", "----------", "----------", "-----"))
    for item in list:
        name = item.name
        idNumber = item.idNumber
        department = item.department
        jobTitle = item.jobTitle
        print(recordFormat.format(name, idNumber, department, jobTitle))


def main():
    employees = make_list() # you can uncomment this line
    titleFormat = "{:&lt;25}{:^15}{:&lt;15}{:&lt;10}"
    recordFormat = "{:&lt;23}{:^19}{:&lt;13}{:&lt;10}"
    displayEmployees(employees, titleFormat, recordFormat)



def main2():
    e1 = Employee("name1", 1, "dep1", "title1")
    e2 = Employee("name2", 2, "dep2", "title2")
    e3 = Employee("name3", 3, "dep3", "title3")
    titleFormat = "{:&lt;25}{:^15}{:&lt;15}{:&lt;10}"
    recordFormat = "{:&lt;23}{:^19}{:&lt;13}{:&lt;10}"
    employees = [e1, e2, e3]
    displayEmployees(employees, titleFormat, recordFormat)

#main()
main2()
</code></pre>
<p>This is what I got from main2():
</p>
<pre><code>                    CHRISTY'S SHOP EMPLOYEE REPORT                    
EMPLOYEE NAME              IDENTIFIER   DEPARTMENT     TITLE     
------------------         ----------   ----------     -----     
name1                           1         dep1         title1    
name2                           2         dep2         title2    
name3                           3         dep3         title3   
</code></pre>
<p>If you want to know more about python string formatting <a href="https://pyformat.info/" rel="nofollow noreferrer">here</a> you can find a great tutorial.</p>
<p>Also I would like to recommend one of my favourite articles about java vs python <a href="https://dirtsimple.org/2004/12/python-is-not-java.html" rel="nofollow noreferrer">python is not java</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Using only the relevant portion of your code, and the <a href="https://docs.python.org/2/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">Format Specification Mini-Language</a>, here's an attempt:</p>
<pre><code># String alignment
print('{:^62}'.format(shopString))
print('{:&lt;22}{:^20}{:&lt;19}{:&lt;15}'.format(employeeString, identifierString, departmentString, titleString))
print('{:&lt;22}{:^20}{:&lt;19}{:&lt;15}'.format("------------------", "----------", "--------------", "-----------"))
for item in list:
    name = item.get_name()
    idNumber = item.get_IDnumber()
    department = item.get_department()
    jobTitle = item.get_jobTitle()
    print('{:&lt;22}{:^20}{:&lt;19}{:&lt;15}'.format(name, idNumber, department, jobTitle))
</code></pre>
<p>Output:</p>
<pre><code>                CHRISTY'S SHOP EMPLOYEE REPORT                
EMPLOYEE NAME              IDENTIFIER     DEPARTMENT         TITLE          
------------------         ----------     --------------     -----------    
Lily Thomas                   412         Administration     Manager        
John Doe                      132         Accounting         Accountant     
LaQuanda Shaka                321         Sales              Associate
</code></pre>
<p>Surely it's straightforward enough to modify and get it formatted as you wish.</p>
</div>
<span class="comment-copy">You are coming from a java background aren't you?</span>
<span class="comment-copy">Yes I am, don't know how you noticed but thanks for noticing. :)</span>
<span class="comment-copy">You want string methods. <a href="https://docs.python.org/3.6/tutorial/inputoutput.html#fancier-output-formatting" rel="nofollow noreferrer">docs.python.org/3.6/tutorial/â€¦</a>. Particularly <code>ljust</code>, <code>center</code>, <code>rjust</code>.</span>
<span class="comment-copy">@Denziloe he seems to be using them already</span>
<span class="comment-copy">I guesse because we don't use getters and setters much in python</span>
