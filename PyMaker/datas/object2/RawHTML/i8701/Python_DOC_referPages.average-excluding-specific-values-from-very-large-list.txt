<div class="post-text" itemprop="text">
<p>I am working with a very large list (~1GB) of travel times and am trying to average them, but there is a quirk where if the trip is not possible the value is set to the highest possible integer value, which destroys the entire calculation.  The travel times are stored in a list, and the lists are in a dictionary.</p>
<p>From point A to B and B to C would look like:</p>
<pre><code>{'AB':[3,5,10],'BC':[2,3,5,10,2147483647]}
</code></pre>
<p>The average between AB should be 6 and BC should be 5 (not 429496733.4).</p>
<p>How can I exclude rogue values from the average calculation?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow noreferrer"><code>statistics</code></a> module provides a <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow noreferrer"><code>mean()</code></a> function which can take an iterator as input, so you don't have to make a copy of the list to filter out the values you want to discard.</p>
<p>Here's a mocked up example of your data, where 90% of the 1 million elements are in the range 1 to 9 inclusive, and 10% are your rogue value:</p>
<pre><code>from random import randint, random

data = [randint(1, 9) if random() &lt; 0.9 else 2147483647 for _ in range(1000000)]
</code></pre>
<p>Here's how to use <code>statistics.mean()</code> to get the mean <strong>including</strong> rogue values:</p>
<pre><code>&gt;&gt;&gt; from statistics import mean

&gt;&gt;&gt; mean(data)
215405499.193486
</code></pre>
<p>â€¦ and here's how to do so iterating over it <strong>excluding</strong> rogue values:</p>
<pre><code>&gt;&gt;&gt; mean(x for x in data if x != 2147483647)
4.998926301609214
</code></pre>
<p>Wrapping that up in a dictionary comprehension:</p>
<pre><code>&gt;&gt;&gt; travel_times = {'AB':[3,5,10],'BC':[2,3,5,10,2147483647]}
&gt;&gt;&gt; {k: mean(x for x in v if x != 2147483647) for k, v in travel_times.items()}
{'BC': 5, 'AB': 6}
</code></pre>
</div>
<span class="comment-copy">With large lists, consider using numpy arrays. You can turn that into a masked array, masking values above a limit, then using <code>np.nanmean</code>. Alternatively, calculate the median instead of the mean (with or without numpy, with or without masked values).</span>
<span class="comment-copy">Thank you very much!</span>
