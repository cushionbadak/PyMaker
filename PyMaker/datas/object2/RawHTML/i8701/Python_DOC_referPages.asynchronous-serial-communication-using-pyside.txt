<div class="post-text" itemprop="text">
<p>i am working with pyside and trying to do asynchronous serial communication with it but the QtSerialPort is not yet available,
i have used pyserial and moved the serial communication to another thread using
<code>moveToThread()</code> but i have to check if there there is a message regularly, so i used a <code>QTimer</code> to handle that every 200 ms,but this solution is over kill, if i can have Qt send a <code>readyRead</code> signal every time there is data available, the question is precisely is : </p>
<p>is there is a ready module that help with without breaking my whole code depenedency on pyside?
if there isn't, what is your tips for quickly implementing one? 
thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>just avoid using qtserialport, and you're right to use pyserial. A good way to go would be to use <code>pyserial</code> as you thought yourself, but run it as another process (using <a href="https://docs.python.org/3.5/library/multiprocessing.html" rel="nofollow noreferrer"><code>multiprocessing</code></a> module), and using <a href="https://docs.python.org/3.5/library/multiprocessing.html#exchanging-objects-between-processes" rel="nofollow noreferrer"><code>Queue</code></a>s to pass around input/output from the serial port.</p>
<p>In the pyside code, you can register a function that acts like an infinite loop, checking for data input in the queue, and do stuff (basically, fire serial incoming event) when data is coming in. You can even use <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer">python-async</a>! üòÅ</p>
<p>That way, you keep your code compact within a single codebase, but loosely coupled in terms of features, without extra bloat having a simple queue as IPC.</p>
<p>Because threading in python can be tricky, because of the <a href="https://stackoverflow.com/questions/265687/why-the-global-interpreter-lock">global interpreter lock</a>, and even more as you've got the Qt threading model (and eventloop) working alongside python's.
As a rule of thumb: don't mix bananas and tomatoes.</p>
</div>
<div class="post-text" itemprop="text">
<p>i found a workaround which is using PyQt5 serial port module and building a standalone module that handle serial communication and communicating with my main application using Inter Process Communication (IPC) or a local network socket, that will do it for now, and i have no problem open sourcing this serial communication module, and my main application is intact.</p>
</div>
<span class="comment-copy">can you elaborate a little on why not using <code>QtSerialPort</code>, and yes i used Qt threading with pyserial  but i simply emit a signal when there is data available</span>
<span class="comment-copy">well, long story short, it's a framework with a lot of technological debt, is overengineered, which developers are having a hard time to communicate, and has too many bugs. Add to that the overhead of the python abstraction, and <i>there be dragons</i>.</span>
<span class="comment-copy">I had a look at the qserialport source written in cpp and it seems very well written and organized and approved in the qt library I might consider developing this module using cpp</span>
<span class="comment-copy">Well, trust the experience of a random guy from Internet whose had a bitter experience with it, tried to submit a couple of patches which ended in an endless design debate. Ultimately I had to switch mid-project to <a href="http://think-async.com/Asio" rel="nofollow noreferrer">asio</a> which offers a portable and properly <i>working</i> solution to handle serialports. The only thing I'm still using <code>QtSerialPort</code> for, is the <code>QtSerialPortInfo</code> class that can provide information about available ports cross-platform.</span>
<span class="comment-copy">:), well, will take your your advise seriously, i was really interested in the way it handle receiving data asynchronously and your suggested solution doesn't offer another way to accomplish this, i think cheching for available data every 200ms or so is not agood idea, if you can advise on how to implement similar thing using qiodevice that would be appreciated, thank you</span>
