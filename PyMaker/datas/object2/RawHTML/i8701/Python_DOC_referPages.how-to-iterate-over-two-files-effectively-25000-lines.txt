<div class="post-text" itemprop="text">
<p>So, I am trying to make a combined list inside of Python for matching data of about 25,000 lines.</p>
<p>The first list data came from file mac.uid and looks like this</p>
<pre><code>Mac|ID
</code></pre>
<p>The second list data came serial.uid and looks like this:</p>
<pre><code>Serial|Mac  
</code></pre>
<p><code>Mac</code> from list 1 must equal the <code>Mac</code> from list 2 before it's joined.</p>
<p>This is what I am currently doing, I believe there is too much repetition going on.</p>
<pre><code>combined = [];

def combineData():
    lines = open('mac.uid', 'r+')
    for line in lines:
        with open('serial.uid', 'r+') as serial:
            for each in serial:
                a, b = line.strip().split('|')
                a = a.lower()
                x, y = each.strip().split('|')
                y = y.lower()
                if a == y:
                    combined.append(a+""+b+""+x)
</code></pre>
<p>The final list is supposed to look like this:</p>
<pre><code>Mac(List1), ID(List1), Serial(List2)
</code></pre>
<p>So that I can import it into an excel sheet.</p>
<p>Thanks for any and all help!</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of your nested loops (which cause quadratic complexity) you should use <em>dictionaries</em> which will give you roughly <b>O</b>(<i>n</i> log(<i>n</i>)) complexity. To do so, first read <code>serial.uid</code> <em>once</em> and store the mapping of MAC addresses to serial numbers in a <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer"><code>dict</code></a>.</p>
<pre><code>serial = dict()

with open('serial.uid') as istr:
    for line in istr:
        (ser, mac) = split_fields(line)
        serial[mac] = ser
</code></pre>
<p>Then you can close the file again and process <code>mac.uid</code> looking up the serial number for each MAC address in the dictionary you've just created.</p>
<pre><code>combined = list()

with open('mac.uid') as istr:
    for line in istr:
        (mac, uid) = split_fields(line)
        combined.append((mac, uid, serial[mac]))
</code></pre>
<p>Note that I've changed <code>combined</code> from a list of strings to a list of tuples. I've also factored the splitting logic out into a separate function. (You'll have to put its definition before its use, of course.)</p>
<pre><code>def split_fields(line):
    return line.strip().lower().split('|')
</code></pre>
<p>Finally, I recommend that you start using more descriptive names for your variables.</p>
<p>For files of 25k lines, you should have no issues storing everything in memory. If your data sets become too large for that, you might want to start looking into using a database. Note that the Python standard library ships with an <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer">SQLite module</a>.</p>
</div>
<span class="comment-copy">if you can load both files to the memory I would use pandas to perform join, see <a href="http://pandas.pydata.org/pandas-docs/stable/merging.html#database-style-dataframe-joining-merging" rel="nofollow noreferrer">pandas.pydata.org/pandas-docs/stable/â€¦</a> (or use just dicts) if not you can load data to any SQL database and perform join there</span>
<span class="comment-copy">I honnestly don't see the problem. It looks quite effective &amp; scalable.</span>
<span class="comment-copy">Are all of these values unique? for each Mac|ID, there is one Serial|Mac that has the same Mac?</span>
<span class="comment-copy">Sorry, forgot to include it in there.  All of the MAC's are unique in a single list. The ID's can be duplicated. List 1 mac needs to = list 2 mac before combining the data though.</span>
<span class="comment-copy">Do you mean the final list should look like this : <code>['Mac, ID, Serial']</code> ?  A joing value string list?</span>
<span class="comment-copy">Looks lonely without a code example.</span>
<span class="comment-copy">@Jacobr365 I was hesitant to provide the code at first but you're probably right. I've amended my answer.</span>
<span class="comment-copy">@mootmoot I've rolled back your edit because it had incorrect code. Why did you change the arguments to the <code>read_line</code> function in that way? I'd appreciate it if you'd suggest code changes in a comment so we can discuss them. Or else feel free to post your own answer if you think you have a superior solution.</span>
<span class="comment-copy">@5gon12eder Sorry, I just saw the read_line function at the end.</span>
<span class="comment-copy">@mootmoot I see your point that the definition after its use could be confusing. I've added a clarifying sentence about that. Thanks.</span>
