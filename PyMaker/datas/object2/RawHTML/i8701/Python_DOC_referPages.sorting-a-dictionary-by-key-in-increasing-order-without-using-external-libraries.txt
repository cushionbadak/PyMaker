<div class="post-text" itemprop="text">
<p>I am trying to produce a dictionary that is the copy of another dictionary but with its keys sorted in increasing order. So far I have the following:</p>
<pre><code>x = {89:1, 2:3, 3:1} 

# produces x with its keys sorted in increasing order
# Example: sort(x) =&gt; {2:3, 3:1, 89:1}
def sort(x):
    y = {}
    for key in sorted(x):
        y[key] = x[key]
        print(y)
    return y
</code></pre>
<p>Console output:</p>
<pre><code>=&gt;{2: 3}
=&gt;{2: 3, 3: 1}
=&gt;{89: 1, 2: 3, 3: 1}
=&gt;{89: 1, 2: 3, 3: 1}
=&gt;{89: 1, 2: 3, 3: 1}    (the return statement)
</code></pre>
<p>The function seems to work fine for the first two keys (2 and 3) but then it breaks down when the last key is reached (89) and the function just spits out its input. </p>
<p>Why does the function work for the first two items but not for the last one? I don't think there is an aliasing problem here and I can't think of a clear reason for why this doesn't work.</p>
<p>I have researched this topic but none of the answers seem to reflect what I am looking for. I am planning to make this function work without the use of external libraries.</p>
<p>Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>{key:a[key] for key in sorted(a.keys())}</code> would be a more "Pythonic" way, BUT dictionaries have no order to them. </p>
<p>You could look at <code>OrderedDict</code> in <code>collections</code>.</p>
<pre><code>from collections import OrderedDict
OrderedDict(sorted(x.items()))
</code></pre>
<p><em>Edited according to comments</em></p>
</div>
<div class="post-text" itemprop="text">
<p>In python, dictionaries are not implemented with binary search trees. Actually if you check in the <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">official documentation</a> the explain:</p>
<blockquote>
<p>It is best to think of a dictionary as an unordered set of key: value pairs, with the requirement that the keys are unique (within one dictionary).</p>
</blockquote>
<p>Do not expect to see the elements on the dictionary sorted.</p>
</div>
<span class="comment-copy">Works fine for me. On a side note though <code>x</code> is not a dictionary. That's a list</span>
<span class="comment-copy">Whoops, fixed the typo now, thanks. Also, I am kind of surprised it works fine for you... I tried closing and reopening the file and ran it again but it still doesn't work for me. How come?</span>
<span class="comment-copy">Dictionaries don't guarantee order. You could use a collections.OrderedDict.  This maintains insertion order so you should be able to replace your new dict with one of those to achieve the desired result.</span>
<span class="comment-copy">Using <code>collections.OrderedDict(sorted(x.items()))</code> is your only option as dictionaries are not sorted by nature.</span>
<span class="comment-copy">Or <code>OrderedDict(sorted(x.items()))</code>.</span>
