<div class="post-text" itemprop="text">
<p>I'm attempting to write some python code to detect a monitor changed event in Windows; I'm using pywin32, largely based around code from the <a href="http://pywin32.cvs.sourceforge.net/viewvc/pywin32/pywin32/win32/Demos/win32gui_devicenotify.py?revision=1.2&amp;view=markup" rel="nofollow noreferrer">pywin32 example</a>. It appears that the placement of <code>PumpWaitingMessages</code> makes a difference; the code below does detect a monitor change (i.e. <code>OnDeviceChange</code> gets run) but the <code>lp</code> argument is 0, so I can't get any useful info from it (i.e. the monitor identifier).</p>
<pre><code>class Foo(QObject):    
    def OnDeviceChange(self, hwnd, msg, wp, lp):
        info = win32gui_struct.UnpackDEV_BROADCAST(lp)
        print("Device change notification:", wp, str(info))  #
        return True

    def __init__(self):
        wc = win32gui.WNDCLASS()
        wc.lpszClassName = 'test_devicenotify'
        wc.style = win32con.CS_GLOBALCLASS|win32con.CS_VREDRAW | win32con.CS_HREDRAW
        wc.hbrBackground = win32con.COLOR_WINDOW + 1
        wc.lpfnWndProc = {win32con.WM_DEVICECHANGE: self.OnDeviceChange}
        class_atom = win32gui.RegisterClass(wc)
        hwnd = win32gui.CreateWindow(wc.lpszClassName,
            'Waiting for Monitor Change',
            # no need for it to be visible.
            win32con.WS_CAPTION,
            100, 100, 900, 900, 0, 0, 0, None)
        filter = win32gui_struct.PackDEV_BROADCAST_DEVICEINTERFACE(
                                            GUID_DEVINTERFACE_MONITOR)
        hdev = win32gui.RegisterDeviceNotification(hwnd, filter,
                                                   win32con.DEVICE_NOTIFY_WINDOW_HANDLE)


f = Foo()
while True:
    win32gui.PumpWaitingMessages()
    time.sleep(0.01)
</code></pre>
<p>However, if I move the <code>while True</code> loop from the very end of the code to the end of the <code>__init__</code> method, then the <code>lp</code> argument is populated, and I can get the info I want.</p>
<p>Any ideas why the placement of the while loop would make a difference?</p>
</div>
<div class="post-text" itemprop="text">
<p>Although it's part of the borrowed code, I'm going to start with a recommendation of renaming variable <code>filter</code> to something else, because it's shadowing <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">[Python]: <strong>filter</strong>(<em>function, iterable</em>)</a> (didn't change myself when I edited the post since I couldn't post a comment specifying why I've done it). Also, you might want to add the missing pieces to have a working code snippet: imports, definitions (e.g. <code>GUID_DEVINTERFACE_MONITOR</code>, I browsed <em>Ioevent.h</em>, and I couldn't find neither <em>USB</em> nor display related <em>GUID</em>s)</p>
<p>I suspected 2 things that might be held accountable for this behavior:</p>
<ul>
<li>Mixing <em>PyQt</em> (which has its own windows handling) with plain <em>WinAPI</em> (as I wrote in my comment), and the possibility that one of the 2 might step on the other's toes</li>
<li><em>Python</em> scopes (<a href="https://docs.python.org/3/reference/executionmodel.html" rel="nofollow noreferrer">[Python]:
Execution model</a>)</li>
</ul>
<p>I didn't want to install <em>PyQt</em>, so I started exploring the other possibility. I was able to reproduce the same behavior with the original code (that you started from). The problem was that at the end of <code>TestDeviceNotifications</code>, <code>hdev</code> (returned by <code>RegisterDeviceNotification</code>), was going out of scope.</p>
<p>The same thing happens here: after exiting <code>__init__</code>, (when messages will start to be sent to the window) <code>hdev</code> will be an invalid handle. To correct this, make it <em>global</em>:</p>
<ul>
<li>declare it at module level (before <code>Foo</code>) like: <code>hdev = None</code></li>
<li>instruct <code>__init__</code> to operate on the global variable instead of creating a new local one with the same name. Somewhere in <code>__init__</code>, <strong>before</strong> <code>hdev = win32gui.RegisterDeviceNotification</code> add <code>global hdev</code>, and it will be persistent</li>
</ul>
<p><strong>Note(s)</strong>:</p>
<ul>
<li>Typically, all created resources should be freed when they're no longer needed. This is what you should do with <code>wc</code> and <code>hwnd</code>. Regarding <code>hdev</code>, <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa363431(v=vs.85).aspx" rel="nofollow noreferrer">[MSDN]: RegisterDeviceNotification function</a> doesn't mention anything about calling <code>CloseHandle</code> (or smth similar) upon it, so I think, it's good</li>
</ul>
</div>
<span class="comment-copy">Hmm; looking at the docs for PumpWaitingMessages, it seems it works on the current thread; I'm guessing that this is where the problem may lie.</span>
<span class="comment-copy">I don't know what the problem is, but I do see that <a href="https://blogs.msdn.microsoft.com/oldnewthing/20050418-59/?p=35873" rel="nofollow noreferrer">you are registering the window class globally</a>, which is probably not what you want to do. You may also want to make the window message-only by passing <code>HWND_MESSAGE</code> as the parent window parameter to <code>CreateWindow()</code>, but I'm not sure if that will make your window ineligible for device notifications or not.</span>
<span class="comment-copy">I see that <code>Foo</code> extends <code>QObject</code>. Are you using <i>PyQt</i> as well? If yes, since <i>Qt</i> has its own windows handling mechanism, is it OK to mix that with plain <i>WinAPI</i>'s?</span>
<span class="comment-copy">I'm using both pyqt and pywin32; the device changed event isn't exposed by pyqt.</span>
<span class="comment-copy">Does this answer your question?</span>
