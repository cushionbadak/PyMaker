<div class="post-text" itemprop="text">
<p>I'm building a Python IDE, which needs to highlight all occurrences of the name under cursor (using <a href="http://jedi.readthedocs.io" rel="nofollow noreferrer">Jedi</a> library). The process of finding the occurrences can be quite slow.</p>
<p>In order to avoid freezing the GUI, I could run the search in another thread, but when the user moves quickly over several words, the background threads could pile up while working on now obsolete tasks. I would like to cancel the search for previous occurrences when user moves to new name.</p>
<p>Looks like killing a thread is complicated in Python. What are the other options for creating an easily cancellable background tasks in Python 3.4+?</p>
</div>
<div class="post-text" itemprop="text">
<p>A thread cannot be stopped by another one. This is a OS limitation rather than a Python one. Only thing you can do is periodically inspect a variable and, if set, stop the thread itself (just return).</p>
<p>Moreover, threads in Python suffer from the <a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow noreferrer">GIL</a>. This means that CPU intensive operations, when carried out in a separate thread, will still affect your main loop as only one thread per process can run at a time.</p>
<p>I'd recommend you to run the search in a separate process which you can easily cancel whenever you want.</p>
<p>What the guys of <a href="https://github.com/Valloric/YouCompleteMe" rel="nofollow noreferrer">YouCompleteMe</a> are doing for example is wrapping Jedi in a <a href="https://github.com/vheon/JediHTTP" rel="nofollow noreferrer">HTTP server</a> which they can query in the background. If the user moves the cursor before the completion comes back, the IDE can simply drop the request. </p>
</div>
<div class="post-text" itemprop="text">
<p>I think <code>concurrent.futures</code> is the answer.<br/>
You can create a Thread / Process pool, <code>submit</code> any callable, receive a <code>Future</code>, which you can <code>cancel</code> if needed. </p>
<p>Reference: <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">https://docs.python.org/3/library/concurrent.futures.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Well, my personal favorites are work queues. If it's a one-time application you should take a look at <a href="http://python-rq.org/" rel="nofollow noreferrer">python rq</a>. Extremely easy and fun to use. If you want to build something more "professional-grade" take a look at something like <a href="http://www.celeryproject.org/" rel="nofollow noreferrer">celery</a>. </p>
<p>You might also want to look at <a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow noreferrer">multiprocessing</a></p>
</div>
<span class="comment-copy">Nice one. How would you compare it to using a work queue in terms of usability, flexibility and how easy it is to use?</span>
<span class="comment-copy">Bare in mind that <code>Future.cancel</code> works only for tasks which are not started yet. Tasks which are in progress will keep running in the background until done.</span>
<span class="comment-copy">I would say it has little overhead and is extremely easy to use. Submitting, result retrieving, cancelling are all one-liners. Work queues are nice, but a bit of an overkill in this situation, IMHO.</span>
