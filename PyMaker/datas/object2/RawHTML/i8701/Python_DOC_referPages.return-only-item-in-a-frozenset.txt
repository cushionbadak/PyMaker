<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/20625579/access-the-sole-element-of-a-set">Access the sole element of a set</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/17801665/how-to-get-an-arbitrary-element-from-a-frozenset">How to get an arbitrary element from a frozenset?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I have a situation in my code where there is a <code>Frozenset</code> which contains a single number (e.g. <code>Frozenset([5])</code>). What I want to do is get that value into a variable. What is the pythonic way to do this?</p>
<p>Since you can iterate over a <code>Frozenset</code>, I have already tried to do it like this: <code>var = next(myFrozenSet)</code> but it does not work, since a <code>Frozenset</code> is not actually an iterator.
I also tried to use <code>myFrozenSet.pop()</code>, but this is not attribute of <code>Frozensets</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create an iterator with the <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter()</code> function</a>:</p>
<pre><code>element = next(iter(some_frozen_set))
</code></pre>
<p>This is the most efficient method of getting a single element out of a <code>frozenset</code>; all other methods involve creating another container first (like a set or list), which is more costly than creating an iterator.</p>
</div>
<span class="comment-copy">In another place I want to reverse iterate over the <code>frozenset</code>, is the best way to do this by creating a container first?</span>
<span class="comment-copy">@micsthepick: sets have no order, so there is no forward or reverse direction. You'd <i>have</i> to create an ordered container for the elements first, imparting some kind of sorting in the process.</span>
