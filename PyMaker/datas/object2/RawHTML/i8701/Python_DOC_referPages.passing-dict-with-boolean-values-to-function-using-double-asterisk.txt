<div class="post-text" itemprop="text">
<p>I have something like this:</p>
<pre><code>def x(**kwargs):
    y(**kwargs)

def y(**kwargs):
    print(kwargs)

d = {
  'a': 1,
  'b': True,
  'c': 'Grace'
}
x(d)
</code></pre>
<p>The behavior I'm seeing, using a debugger, is that <code>kwargs</code> in <code>y()</code> is equal to this:</p>
<pre><code>{
  'kwargs': {
    'a': 1,
    'c': 'Grace'
  }
}
</code></pre>
<p>My obviously mistaken understanding of the double asterisk is that it is supposed to pack and unpack a dictionary of key value pairs, allowing you to pass dictionaries into methods as keyword arguments. However, two things confuse me:</p>
<ul>
<li>Why is the packing nesting the dictionary under a <code>kwargs</code> key?</li>
<li>Why is the boolean being dropped?</li>
</ul>
<p>I'd ideally like to avoid both of these behaviors, but am clearly missing something about how the particulars of this double asterisk behavior works.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure what the behaviour of your code was, but for me it throws an error. We can get the same error with a smaller example:</p>
<pre><code>def x(**kwargs):
    pass

d = {"a": 1, "b": 2}

x(d)
</code></pre>
<p>throws:</p>
<pre><code>TypeError: x() takes 0 positional arguments but 1 was given
</code></pre>
<p>The problem is simply that this isn't how the <code>**</code> syntax works. <code>def x(**kwargs)</code> denotes a function that can take an arbitrary number of <strong>named variables</strong>, like so:</p>
<pre><code>def x(**kwargs):
    print(kwargs)

x(a = 1, b = 2)
</code></pre>
<p>prints</p>
<pre><code>{'a': 1, 'b': 2}
</code></pre>
<p>You however are passing it the object <code>d</code>, in other words you are passing the function <strong>one positional variable</strong> -- no named variables. Hence the exception.</p>
<p>The other distinct syntactical use of <code>**</code> is for unpacking a dictionary of kwargs into a function that has been defined in the usual way to accept named arguments, for example:</p>
<pre><code>def f(a, b):
    print(a, b)

d = {"a": 1, "b": 2}

f(**d)
</code></pre>
<p>prints</p>
<pre><code>1 2
</code></pre>
<p>To get fully to grips with this you should check out the tutorial in the Python docs, here:</p>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions</a></p>
</div>
<span class="comment-copy">check your problem again... You should be getting TypeError: x() takes 0 positional arguments but 1 was given.</span>
<span class="comment-copy">I don't see your behaviour in 3.5. Firstly I get an error <code>x() takes 0 positional arguments</code>, so changing to <code>x(**d)</code> doesn't nest under <code>kwargs</code>, obviously <code>x(kwargs=d)</code> gives the nested dict but at no time does the <code>'b'</code> disappear.</span>
<span class="comment-copy">This should be closed/deleted: I had serious confusion when I was debugging my situation, and this was made in too much haste. Apologies and thanks to everyone who looked at it!</span>
<span class="comment-copy">Sorry good catch, will edit.</span>
