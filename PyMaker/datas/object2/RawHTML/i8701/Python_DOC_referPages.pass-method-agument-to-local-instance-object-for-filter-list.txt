<div class="post-text" itemprop="text">
<p>I would like to convert argument in prent method to filter list result with filter of an local instance object. </p>
<p>That is what I would like approximatively for the concept</p>
<pre><code>def get_fields(path, editable=True): # If only editable (or opposite)
    return list([f.name for f in fields(path) if f.editable]) # Do filter
def get_fields(path, required=True): # If only required (or opposite)
    return list([f.name for f in fields(path) if f.required]) # Do filter

def get_fields(path): # If all
    return list([f.name for f in fields(path)])
</code></pre>
<p>This is what i do actualy</p>
<pre><code>def get_fields_editable(path):
    return list(f.name for f in fields(path) if f.editable]))

def get_fields_required(path):
    return list(f.name for f in fields(path) if f.required]))

def get_fields(path):
    return list(f.name for f in fields(path)]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We can use <a href="https://docs.python.org/3/library/operator.html#operator.attrgetter" rel="nofollow noreferrer"><code>operator.attrgetter</code></a> to create a suitable filtering function from the keyword arg name and the associated value.</p>
<p>To demonstrate this code I created a simple <code>Test</code> object, and a <code>fields</code> function.</p>
<pre><code>from operator import attrgetter

def get_fields(path, **kwargs):
    # Create the filter function
    # Assumes there will only ever be at most a single keyword arg
    if kwargs:
        key, val = kwargs.popitem()
        func = attrgetter(key)
        filter_func = func if val else lambda obj: not func(obj)
    else:
        filter_func = lambda obj: True

    return [f.name for f in fields(path) if filter_func(f)]

class Test(object):
    def __init__(self, name, editable, required):
        self.name = name
        self.editable = editable
        self.required = required

def fields(path):
    return [
        Test(path + '_a', False, False),
        Test(path + '_b', False, True),
        Test(path + '_c', True, False),
        Test(path + '_d', True, True),
    ]

print(get_fields('none'))
print(get_fields('edfalse', editable=False))
print(get_fields('edtrue', editable=True))
print(get_fields('reqfalse', required=False))
print(get_fields('reqtrue', required=True))
</code></pre>
<p><strong>output</strong></p>
<pre><code>['none_a', 'none_b', 'none_c', 'none_d']
['edfalse_a', 'edfalse_b']
['edtrue_c', 'edtrue_d']
['reqfalse_a', 'reqfalse_c']
['reqtrue_b', 'reqtrue_d']
</code></pre>
<hr/>
<p>Here's a new version that handles multiple keywords. Only items that pass all of the filter tests are returned. I've changed the test object names slightly and added a <code>print</code> call to <code>get_fields</code> to make it easier to see what's going on. This code works on both Python 2 and Python 3. </p>
<pre><code>from __future__ import print_function
from operator import attrgetter

# Return items that pass any of the filters
def get_fields_any(path, **kwargs):
    seq = fields(path)
    print('KW', kwargs)
    result = set()
    if kwargs:
        for key, val in kwargs.items():
            # Create the filter function
            func = attrgetter(key)
            filter_func = func if val else lambda obj: not func(obj)
            # Apply it
            result.update(filter(filter_func, seq))
    else:
        result = seq

    return [f.name for f in result]

# Only return items that pass all filters
def get_fields(path, **kwargs):
    seq = fields(path)
    print('KW', kwargs)
    if kwargs:
        for key, val in kwargs.items():
            # Create the filter function
            func = attrgetter(key)
            filter_func = func if val else lambda obj: not func(obj)
            # Apply it
            seq = list(filter(filter_func, seq))
    return [f.name for f in seq]

class Test(object):
    def __init__(self, name, editable, required):
        self.name = name
        self.editable = editable
        self.required = required

    def __repr__(self):
        fmt = 'Test({name}, {editable}, {required})'
        return fmt.format(**self.__dict__)

def fields(path):
    return [
        Test(path + ':FF', False, False),
        Test(path + ':FT', False, True),
        Test(path + ':TF', True, False),
        Test(path + ':TT', True, True),
    ]

print(get_fields('__'))
print(get_fields('_F', required=False))
print(get_fields('_T', required=True))
print(get_fields('F_', editable=False))
print(get_fields('T_', editable=True))
print()

print(get_fields('FF', editable=False, required=False))
print(get_fields('FT', editable=False, required=True))
print(get_fields('TF', editable=True, required=False))
print(get_fields('TT', editable=True, required=True))
</code></pre>
<p><strong>output</strong></p>
<pre><code>KW {}
['__:FF', '__:FT', '__:TF', '__:TT']
KW {'required': False}
['_F:FF', '_F:TF']
KW {'required': True}
['_T:FT', '_T:TT']
KW {'editable': False}
['F_:FF', 'F_:FT']
KW {'editable': True}
['T_:TF', 'T_:TT']

KW {'editable': False, 'required': False}
['FF:FF']
KW {'editable': False, 'required': True}
['FT:FT']
KW {'editable': True, 'required': False}
['TF:TF']
KW {'editable': True, 'required': True}
['TT:TT']
</code></pre>
<p>Note that this code can handle any number of keywords, not just two.</p>
<hr/>
<p>I've also included an experimental function <code>get_fields_any</code> which returns the objects that pass <em>any</em> of the filters. It uses a set <code>result</code> to accumulate the matching objects, so it doesn't preserve order. Also, putting objects that don't define <code>__eq__</code> and <code>__hash__</code> methods into sets (or using them as <code>dict</code> keys) is risky. See the <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer"><code>__hash__ docs</code></a> for details.</p>
</div>
<span class="comment-copy">Change <code>if f.editable</code> to <code>if f.editable==editable</code>?</span>
<span class="comment-copy">Do you need to handle both <code>editable</code> and <code>required</code> being True?</span>
<span class="comment-copy">Yes but don't need method and conditial if statement to get all fields. @Rawing i don't want that because if it's  None I get no data. Methods result are strict Boolean</span>
<span class="comment-copy">I'm still a little confused. :) I <i>think</i> you want to be able to call <code>get_fields(path, editable=True)</code> to get a list of <code>f.name</code>s for all <code>f</code> where <code>f.editable</code> is <code>True</code>, and if you call <code>get_fields(path, editable=False)</code> you want a list of <code>f.name</code>s for all <code>f</code> where <code>f.editable</code> is <code>False</code>. Is that correct?</span>
<span class="comment-copy">Also, if I understand your last comment, you will only call <code>get_fields</code> with (at most) one of <code>editable</code> or <code>required</code>, not both.</span>
<span class="comment-copy">It work fine! That is exactely what I want! Can it work with twice? print(get_fields('reqtrue', required=True, editable=True)) I think that only work with first kwargs</span>
<span class="comment-copy">@GeoStoneMarten When I asked earlier "you will only call <code>get_fields</code> with (at most) one of <code>editable</code> or <code>required</code>, not both." you replied "Yes". So that's why I wrote the code like this. (In fact, I didn't start writing the code until I got the answer to that question). I <i>can</i> modify it to handle multiple keywords, but I need some time to think about how to do it efficiently.</span>
<span class="comment-copy">@GeoStoneMarten Another way to approach this is to let <code>get_fields</code> take a list (or other iterable) of objects as its primary arg instead of <code>path</code>. So you could do, for example, <code>seq = fields(path); newseq = get_fields(seq, editable=False);  newseq = get_fields(newseq, required=False)</code></span>
<span class="comment-copy">@GeoStoneMarten Also, if multiple args are given, should the filter return objects that pass <i>all</i> conditions or should it return objects that pass <i>any</i> condition. Eg, should <code>print(get_fields('', editable=True, required=True))</code> just return <code>['_d']</code>, or should it return <code>['_b', '_c', '_d']</code> ?</span>
<span class="comment-copy">yes in accordance to your exemple and that I want <code>print(get_fields('', editable=True, required=True))</code> must return <code>['_d']</code> and oposite <code>print(get_fields('', editable=False, required=False))</code> return <code>['_a']</code></span>
