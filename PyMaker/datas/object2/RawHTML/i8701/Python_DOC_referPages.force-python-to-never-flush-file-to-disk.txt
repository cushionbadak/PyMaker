<div class="post-text" itemprop="text">
<p>I have a scenario where I read file content from url using <code>request</code>.</p>
<pre><code>    f = open(..., 'wb')
    for chunk in message_content.iter_content():
        f.write(chunk)
</code></pre>
<p>However I do not want to actually write the file to disk as I want to continue manipulating the content of <code>f</code> that I downloaded.</p>
<p>Is there a way to tell <code>f</code> to never write to disk?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/io.html#io.BytesIO" rel="nofollow noreferrer"><code>io.BytesIO</code></a> or <a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="nofollow noreferrer"><code>io.StringIO</code></a> instead of real file object, because they works like file except they write content in memory instead of file.</p>
<pre><code>f = io.BytesIO()   # Use `io.StringIO` if you want text mode (not binary mode)
for chunk in message_content.iter_content():
    f.write(chunk)
</code></pre>
<hr/>
<p>BTW, instead of looping + <code>write</code>, you can use <a href="https://docs.python.org/3/library/io.html#io.IOBase.writelines" rel="nofollow noreferrer"><code>writelines</code></a>:</p>
<blockquote>
<p><code>writelines(lines)</code> Write a list of lines to the stream. Line separators
  are not added, so it is usual for each of the lines provided to have a
  line separator at the end.</p>
</blockquote>
<pre><code>f.writelines(message_content.iter_content())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply collect all chunks in a binary object. No need to involve files.</p>
<pre><code>result = b''
for chunk in message_content.iter_content():
    result += chunk
</code></pre>
<p>Or:</p>
<pre><code>result = b''.join(message_content.iter_content())
</code></pre>
</div>
<span class="comment-copy">Have you considered not writing it to disk?</span>
<span class="comment-copy">Why are you involving a file at all?</span>
<span class="comment-copy">I was going to say that, but I was 15 seconds late. :-)</span>
<span class="comment-copy">Considering that the questioner doesn't want the "disk" part of file functionality, it's not clear that they really need any other part of the functionality of a file-like object. All they say in the question is that they want to "continue manipulating the content". Assuming this <code>message_content</code> thing is a <code>requests.Response</code> object, they might be better served by <code>message_content.content</code> to get a bytestring representing the message content, or just working with <code>message_content.iter_content()</code> directly.</span>
<span class="comment-copy">@user2357112, Yup. If OP want whole content at once, <code>content</code> should be used. But OP mentioned <code>manipulating</code>.. so I suggested <code>io.BytesIO</code>,<code>io.StringIO</code>. Thank you for the comment.</span>
<span class="comment-copy">@user2357112 got a point. I will look into that as well. Thanks.</span>
