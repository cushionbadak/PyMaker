<div class="post-text" itemprop="text">
<p>I am interested in understanding the <a href="https://stackoverflow.com/questions/1303347/getting-a-map-to-return-a-list-in-python-3-x">new language design of Python 3.x</a>.</p>
<p>I do enjoy, in Python 2.7, the function <code>map</code>:</p>
<pre><code>Python 2.7.12
In[2]: map(lambda x: x+1, [1,2,3])
Out[2]: [2, 3, 4]
</code></pre>
<p>However, in Python 3.x things have changed:</p>
<pre><code>Python 3.5.1
In[2]: map(lambda x: x+1, [1,2,3])
Out[2]: &lt;map at 0x4218390&gt;
</code></pre>
<p>I understand the how, but I could not find a reference to the why. Why did the language designers make this choice, which, in my opinion, introduces a great deal of pain. Was this to arm-wrestle developers in sticking to list comprehensions?</p>
<p>IMO, list can be naturally thought as <a href="http://learnyouahaskell.com/functors-applicative-functors-and-monoids" rel="noreferrer">Functors</a>; and I have been somehow been thought to think in this way:</p>
<pre><code>fmap :: (a -&gt; b) -&gt; f a -&gt; f b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the reason why map still exists <em>at all</em> when <a href="https://www.python.org/dev/peps/pep-0289/" rel="noreferrer">generator expressions</a> also exist, is that it can take multiple iterator arguments that are all looped over and passed into the function:</p>
<pre><code>&gt;&gt;&gt; list(map(min, [1,2,3,4], [0,10,0,10]))
[0,2,0,4]
</code></pre>
<p>That's slightly easier than using zip:</p>
<pre><code>&gt;&gt;&gt; list(min(x, y) for x, y in zip([1,2,3,4], [0,10,0,10]))
</code></pre>
<p>Otherwise, it simply doesn't add anything over generator expressions.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because it returns an iterator, it omit storing the full size list in the memory. So that you can easily iterate over it in the future not making any pain to memory. Possibly you even don't need a full list, but the part of it, until your condition is reached.</p>
<p>You can find this <a href="https://docs.python.org/3/glossary.html#term-iterator" rel="noreferrer">docs</a> useful, iterators are awesome.</p>
<blockquote>
<p>An object representing a stream of data. Repeated calls to the iterator’s <code>__next__()</code> method (or passing it to the built-in function <code>next()</code>) return successive items in the stream. When no more data are available a <code>StopIteration</code> exception is raised instead. At this point, the iterator object is exhausted and any further calls to its <code>__next__()</code> method just raise <code>StopIteration</code> again. Iterators are required to have an <code>__iter__()</code> method that returns the iterator object itself so every iterator is also iterable and may be used in most places where other iterables are accepted. One notable exception is code which attempts multiple iteration passes. A container object (such as a <code>list</code>) produces a fresh new iterator each time you pass it to the <code>iter()</code> function or use it in a for loop. Attempting this with an iterator will just return the same exhausted iterator object used in the previous iteration pass, making it appear like an empty container. </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Guido answers this question <a href="https://docs.python.org/3/whatsnew/3.0.html" rel="noreferrer">here</a>: "<em>since creating a list would just be wasteful</em>".  </p>
<p>He also says that the correct transformation is to use a regular <code>for</code> loop.</p>
<p>Converting <code>map()</code> from 2 to 3 might not just be a simple case of sticking a <code>list( )</code> around it.  Guido also says:</p>
<p>"If the input sequences are not of equal length, <code>map()</code> will stop at the termination of the shortest of the sequences. For full compatibility with <code>map()</code> from Python 2.x, also wrap the sequences in <code>itertools.zip_longest()</code>, e.g.</p>
<pre><code>map(func, *sequences)
</code></pre>
<p>becomes  </p>
<pre><code>list(map(func, itertools.zip_longest(*sequences)))
</code></pre>
<p>"</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3 many functions (not just <code>map</code> but <code>zip</code>, <code>range</code> and others) return an iterator rather than the full list. You might want an iterator (e.g. to avoid holding the whole list in memory) or you might want a list (e.g. to be able to index).</p>
<p>However, I think the key reason for the change in Python 3 is that while it is trivial to convert an iterator to a list using <code>list(some_iterator)</code> the reverse equivalent <code>iter(some_list)</code> does not achieve the desired outcome because the full list has already been built and held in memory.</p>
<p>For example, in Python 3 <code>list(range(n))</code> works just fine as there is little cost to building the <code>range</code> object and then converting it to a list. However, in Python 2 <code>iter(range(n))</code> does not save any memory because the full list is constructed by <code>range()</code> before the iterator is built.</p>
<p>Therefore, in Python 2, separate functions are required to create an iterator rather than a list, such as <code>imap</code> for <code>map</code> (although they're <a href="https://stackoverflow.com/questions/12015521/python-3-vs-python-2-map-behavior">not quite equivalent</a>), <code>xrange</code> for <code>range</code>, <code>izip</code> for <code>zip</code>. By contrast Python 3 just requires a single function as a <code>list()</code> call creates the full list if required.</p>
</div>
<span class="comment-copy">The rationale should be the same as to why we use generators instead of list comprehensions. By using lazy evaluation we don't need to keep huge things in memory. Check the accepted answer here: <a href="http://stackoverflow.com/questions/1303347/getting-a-map-to-return-a-list-in-python-3-x" title="getting a map to return a list in python 3 x">stackoverflow.com/questions/1303347/…</a></span>
<span class="comment-copy">Could you explain why this brings you "a great deal of pain"?</span>
<span class="comment-copy">I think it's because years of usage showed that most common uses of <code>map</code> simply iterated over the result.  Building a list when you don't need it is inefficient so the devs decided to make <code>map</code> lazy.  There's a lot to be gained here for performance and not a lot to be lost (If you need a list, just ask for one ... <code>list(map(...))</code>).</span>
<span class="comment-copy">Ok, I find it interesting that rather than keeping the Functor pattern and offering a lazy version of List, they somehow made it a decision to force a lazy evaluation of a list whenever it is mapped. I would have preferred to have the right to make my own choice, aka, Generator -&gt; map -&gt; Generator or List -&gt; map -&gt; List (up to me to decide)</span>
<span class="comment-copy">@NoIdeaHowToFixThis, actually is up to you, if you need the whole list, just transform it to a list, easy as hell</span>
<span class="comment-copy">I think that if we add the desire to stress that list comprehensions are more pythonic and the language designers wanted to stress that, this is the most on-spot answer, I think. @vishes_shell somehow does not focus enough on language design.</span>
<span class="comment-copy">Produces different results in Python 2 and 3 <i>if the two lists are not of equal length</i>.  Try <code>c = list(map(max, [1,2,3,4], [0,10,0,10, 99]))</code> in python 2 and in python 3.</span>
<span class="comment-copy">Here is a reference for the original plan to remove map altogether from python3: <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=98196" rel="nofollow noreferrer">artima.com/weblogs/viewpost.jsp?thread=98196</a></span>
<span class="comment-copy">Hmm how odd when I wrap map in list, I get a list of 1 element lists.</span>
<span class="comment-copy">Guido comment is on <i><code>map()</code> invoked for the side effects of the function</i>, not on its use as a functor.</span>
<span class="comment-copy">The transformation with <code>zip_longest</code> is wrong. you have to use <code>itertools.starmap</code> for it to be equivalent: <code>list(starmap(func, zip_longest(*sequences)))</code>. That's because <code>zip_longest</code> produces tuples, so the <code>func</code> would receive a single <code>n</code>-uple argument instead of <code>n</code> distinct arguments as is the case when calling <code>map(func, *sequences)</code>.</span>
<span class="comment-copy">AFAIK in Python 2.7 functions from <code>itertools</code> return iterators too. Also, I would not see iterators as lazy lists, since lists can be iterated multiple times and accessed randomly.</span>
<span class="comment-copy">@abukaj ok thanks, I've edited my answer to try to be clearer</span>
<span class="comment-copy">How is a map object an iterator? It has no next() method...</span>
<span class="comment-copy">@IgorRivin what do you mean? Python 3 <code>map</code> objects do have a <code>next()</code> method. Python 3 <code>range</code> range objects are not strictly iterators I know</span>
<span class="comment-copy">@IgorRivin: Methods beginning and ending with <code>__</code> are reserved to Python; without that reservation, you have the problem distinguishing things for which <code>next</code> is just a method (they're not really iterators) and things that are iterators. In practice, you should skip the methods and just use the <code>next()</code> function (e.g. <code>next(foo)</code>), which works properly on every Python version from 2.6 on. It's the same way you use <code>len(foo)</code> even though <code>foo.__len__()</code> would work just fine; the dunder methods are generally intended <i>not</i> to be called directly, but implicitly as part of some other operation.</span>
