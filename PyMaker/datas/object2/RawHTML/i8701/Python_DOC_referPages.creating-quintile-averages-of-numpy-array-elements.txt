<div class="post-text" itemprop="text">
<p>I am trying to replace each element of a numpy array with the average value of the elements that fall in its quintile. Here is my long-winded way of doing this: Create scalars that store the value of different quintile boundaries (20, 40, 60, 80 and 100 percentile values naming them q1 through q5). Then, create averages of all the elements within each quintile and name them m1 through m5. Next, go through each element of the numpy array and check which quintile it falls in, and replace it with the mean value corresponding to that quintile. I believe that there is a Pythonic way to do this using boolean masking but don't know where to begin. Please advise.</p>
<pre><code>import numpy as np
np.random.seed(42)    
aray = np.random.randn(10)
q0 = np.percentile(aray, 0, interpolation = 'lower')
q1 = np.percentile(aray, 20, interpolation = 'lower')
q2 = np.percentile(aray, 40, interpolation = 'lower')
q3 = np.percentile(aray, 60, interpolation = 'lower')
q4 = np.percentile(aray, 80, interpolation = 'lower')
q5 = np.percentile(aray, 100, interpolation = 'lower')
m1 = aray[aray&lt;=q1].mean()
m2 = aray[(aray&gt;q1) &amp; (aray&lt;=q2)].mean()
m3 = aray[(aray&gt;q2) &amp; (aray&lt;=q3)].mean()
m4 = aray[(aray&gt;q3) &amp; (aray&lt;=q4)].mean()
m5 = aray[(aray&gt;q4) &amp; (aray&lt;=q5)].mean()
aray[aray&lt;=q1] = m1
aray[(aray&gt;q1) &amp; (aray&lt;=q2)] = m2
aray[(aray&gt;q2) &amp; (aray&lt;=q3)] = m3
aray[(aray&gt;q3) &amp; (aray&lt;=q4)] = m4
aray[(aray&gt;q4) &amp; (aray&lt;=q5)] = m5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is an argsorting solution which calculates the quantiles and means in one go. I'm not sure the rounding will in all cases be 100% as in your implementation, though. The quintile sums are computed using the <code>reduceat</code> method of the <code>np.add</code> ufunc.</p>
<p><strong>UPDATE:</strong> Actually, <code>argsort</code> can be replaced with <code>argpartition</code> which should be faster on large arrays.</p>
<pre><code>import numpy as np
np.random.seed(42)    
aray = np.random.randn(10)

boundaries = np.linspace(0, len(aray), 6, dtype = int)
#inds = np.argsort(aray)
inds = np.argpartition(aray, boundaries[1:-1])
means = np.add.reduceat(aray[inds], boundaries[:-1]) / np.diff(boundaries)
aray[inds] = np.repeat(means, np.diff(boundaries))
</code></pre>
<p>Step-by-step</p>
<p>Boundaries will be [0, 2, 4, 6, 8, 10] we throw away 0 and 10 so argpartition will split at elements (by rank order) 2, 4, 6, 8. This produces 5 partitions at referenced by inds[:2], inds[2:4], inds[4:6], inds[6:8] and inds[8:] and we are guaranteed aray[inds[:2]] &lt;= aray[inds[2]] &lt;= aray[inds[2:4]] &lt;= aray[inds[4]] etc.
<code>np.add.reduceat</code> returns the sums of slices aray[inds][0:2], aray[inds][2:4], ..., aray[inds][8:], <code>np.diff</code> calculates the appropriate denominator.
The <code>np.repeat</code> creates copies of the means for each individual element in each quintile.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure if this is the most pythonic way to do it, but here is a neater way</p>
<pre><code>import numpy as np
np.random.seed(42)
aray = np.random.randn(10)

quintile_thres = [np.percentile(aray, i, interpolation='lower')
                  for i in range(0, 100+1, 20)]
# add -inf to front to keep consistency of
# (aray &gt; q1) &amp; (aray &lt;= q2)
quintile_thres.insert(0, -np.inf)

aray_copy = aray.copy()
# for zip refer to https://docs.python.org/3/library/functions.html#zip
for q1, q2 in zip(quintile_thres[:-1], quintile_thres[1:]):
    aray[[(aray &gt; q1) &amp; (aray &lt;= q2)]] = \
        aray_copy[(aray_copy &gt; q1) &amp; (aray_copy &lt;= q2)].mean()
</code></pre>
<p>You can avoid the copy of course...</p>
</div>
<span class="comment-copy">argpartition is very cool, thank you for introduction</span>
<span class="comment-copy">Please clarify if this will ensure that only two elements will be used to create an average within each quintile (10 elements means quintiles will have 2 elements each). My understanding is that, in this case, the linspace() function will divide the range into 6 equally spaced elements. Since the element values are not equally spaced, is it possible that some quintiles will have more than 2 elements while others may have less then 2?</span>
<span class="comment-copy">@Vijay Yes, in this case I'm pretty sure it will always be 5x2, Note that per default linspace produces n endpoints, thus n-1 segments. Also note that arpgartition (and partition) split by rank order, not actual value therefore the spacing of the partitions will be equal. I've added a step-by-step to the answer.</span>
<span class="comment-copy">Very good, I am worried about how to speed up the quantile binning.</span>
<span class="comment-copy">Please clarify why you add the -np.inf to quintile_thres, and also how the last statement "for q1, q2 in zip(..... works.</span>
