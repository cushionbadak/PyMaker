<div class="post-text" itemprop="text">
<p>So I'm trying to write a function that can check the squares a piece on a chess board can successfully move to,</p>
<p>So far I've written so much of the code but realized I will encounter IndexErrors</p>
<pre><code>def legalMoves(piece,fen):
    moveList=[]
    attackList=[]
    x,y=int(piece[1]),int(piece[2])
    i=0
    if piece[0] in 'QqRr':
        while (i&lt;8):
            if fen[x][y + i] == '-' :
                moveList.append([x,y+i])
            if fen[x][y - i] == '-' :
                moveList.append([x,y-i])
            if fen[x + i][y] == '-' :
                moveList.append([x+i,y])
            if fen[x - i][y] == '-' :
                moveList.append([x-i,y])
            i+=1
</code></pre>
<p>I would like to ignore the if-blocks that encounter an IndexError but continue the rest of the statements in the while loop till it exits. How do I do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>While in Python it's typically EAFP, this is one case where LBYL is probably appropriate. Though you really don't have to even do that. You know that a queen and a rook are only going to be able to move in a straight line - either on the X or the Y, so you just have to hold one steady and then move across the other options:</p>
<pre><code>for x in range(0, 8):
    if fen[x][piece.y] == '-':
        potential_moves.append((x, piece.y))

for y in range(0, 8):
    if fen[piece.x][y] == '-':
        potential_moves.append((piece.x, y))
</code></pre>
<p>(Though that is actually ignoring some of the rules of chess)</p>
<p>If you <em>were</em> in a position where you had potential moves and you wanted to try EAFP you could do something like this:</p>
<pre><code>from collections import namedtuple

Point = namedtuple('Point', ('x', 'y'))
potential_moves = []
for x in range(0, 8):
    for y in range(0, 8):
        potential_moves.append(Point(x, y))

for move in potential_moves:
    try:
        if fen[move.x][move.y] == '-':
            move_list.append(move)
    except IndexError:
        pass
</code></pre>
<p>But that's probably not appropriate for chess :)</p>
</div>
<div class="post-text" itemprop="text">
<p>put the execution in <code>try</code> block and a <code>continue</code> in except block</p>
<pre><code>try:
    your if conditions
except:
    continue
</code></pre>
<p>Try it in your code and paste any error your get</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to continue the rest of the statements you have to <strong>pass</strong> the IndexError.</p>
<pre><code>try:
   if fen[x][y + i] == '-' :
      moveList.append([x,y+i])
except IndexError:
   pass
</code></pre>
<p>See <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/errors.html#handling-exceptions</a></p>
</div>
<span class="comment-copy">Hmm thanks for the detailed answer, I had attempted that at first, but later thought that I'll need to terminate the loop once it hits a piece that comes in between one of these squares (since after that, it no longer becomes a legal move to jump over a piece), so I thought I'd start off this way and just add clauses since I'll have to append attackList later on.</span>
<span class="comment-copy">What I would do for chess is move in the valid direction until a) I'm at 8 or 0, or b) I've found a piece that blocks my movement. It would look something like <code>while x &lt; 8 or board[x][piece.y] == '-':</code>, or <code>x &gt; 0</code> for the other direction. But that's technically a different question</span>
<span class="comment-copy">add ony one try with all inside if in it</span>
<span class="comment-copy">It seems to be going in an infinite loop inside the except clause itself.</span>
<span class="comment-copy">Okay fixed it by adding a i+=1 inside the except clause, thanks!</span>
