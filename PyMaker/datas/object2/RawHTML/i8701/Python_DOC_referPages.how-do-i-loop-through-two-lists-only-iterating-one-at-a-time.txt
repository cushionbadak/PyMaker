<div class="post-text" itemprop="text">
<p>Im trying to implement merge sort in python and I'd like to know what is the pythonic way of looping through two lists iterating only one of the lists each loop.</p>
<p>This is what I have now (using indexes)</p>
<pre><code>def merge(array1, array2):
     final = []
     i = 0
     j = 0
     while i &lt; len(array1) or j &lt; len(array2):
        if array1[i] &lt;= array2[j]:
            final.append(array1[i])
            i += 1
        elif array2[j] &lt; array1[i]:
            final.append(array2[j])
            j += 1
        # Finished one of the arrays
        if i == len(array1):
            final.extend(array2[j:])
            break
        elif j == len(array2):
            final.extend(array1[i:])
            break
     return final
</code></pre>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure not sure your problem here is using indices, but there's a lot of unneeded code.</p>
<p>Firstly, we can change your initialisers to:</p>
<pre><code>final, i, j = [], 0, 0
</code></pre>
<p>Next, if we change your <code>while</code> condition we can remove the <code>break</code>s:</p>
<pre><code>while i &lt; len(array1) and j &lt; len(array2):
</code></pre>
<p>Your <code>elif</code> isn't meaningful as it will always be true, we can thus make your <code>if</code>:</p>
<pre><code>if array1[i] &lt;= array2[j]:
    final.append(array1[i])
    i += 1
else:
    final.append(array2[j])
    j += 1
</code></pre>
<p>And now because we're automatically breaking out of the loop we don't need the <code>break</code>s and can move the <code>extend</code>s outside:</p>
<pre><code>def merge(array1, array2):
    final, i, j = [], 0, 0
    while i &lt; len(array1) and j &lt; len(array2):
        if array1[i] &lt;= array2[j]:
            final.append(array1[i])
            i += 1
        else:
            final.append(array2[j])
            j += 1
    final.extend(array1[i:])
    final.extend(array2[j:])
    return final
</code></pre>
<p>This gives you smaller, more readable code without actually changing the way you're doing anything, that way you'll still understand it.</p>
<hr/>
<p>Note that we can perform:</p>
<pre><code>final.extend(array1[i:])
final.extend(array2[j:])
</code></pre>
<p>outside the loop because one array will have contents, for example <code>[7,9]</code>, while the other will be empty(<code>[]</code>):</p>
<pre><code>&gt;&gt;&gt; final = [3,6]
&gt;&gt;&gt; array1 = [3,6]
&gt;&gt;&gt; array2 = [7,9]
&gt;&gt;&gt; i = 2
&gt;&gt;&gt; j = 0
&gt;&gt;&gt; array1[i:]
[]
&gt;&gt;&gt; array2[j:]
[7, 9]
&gt;&gt;&gt; final.extend(array1[i:])
&gt;&gt;&gt; final
[3, 6]
&gt;&gt;&gt; final.extend(array2[j:])
&gt;&gt;&gt; final
[3, 6, 7, 9]
</code></pre>
</div>
<span class="comment-copy"><code>while True:</code> + flow control inside the loop that handles the incrementing + a way for the code to <code>break</code>. So similar to what you are doing</span>
<span class="comment-copy">This will fail since if <code>i &gt;= len(array1)</code> but <code>j &lt; len(array2)</code>, it will aim to fetch <code>array1[i]</code> and <code>array2[j]</code> and thus raise an indexoutofrange...</span>
<span class="comment-copy">You should not make the question rely on knowledge of merge-sort. It will get more attention if you make it generic, and it won't get mixed up with bugs or corrections to the algorithm</span>
<span class="comment-copy">I assume you mean how do you do the looping without using indices. Take a look at the <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter</code></a> and <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next</code></a> functions.</span>
<span class="comment-copy">To complement @slezica's comment, you should give an <a href="http://stackoverflow.com/help/mcve">MCVE(Minimal Complete and Verifiable Example)</a> of your problem instead.</span>
