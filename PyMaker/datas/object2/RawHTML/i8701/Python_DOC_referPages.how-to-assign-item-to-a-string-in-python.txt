<div class="post-text" itemprop="text">
<p>I'm really new to programming in general, but I'm a fast learner. I've been working on a project. I wanted to make a simple hangman game, but I hit a road block and I'd like to figure it out before continuing.</p>
<p>I'm trying to assign correct guesses to an empty variable and print is as they go, but it seems I can't assign "items" to strings. Is there an alternative method I could use?</p>
<p>Here's the code</p>
<pre><code>    switch = True

    def hangman():
        guess_number = 0        # Var that keeps track of the guesses


        secret_word = input("What is the secret word?\n&gt;")  # Gets the secret word

        print("The secret word is %d characters long." % len(secret_word)) # Lenght of secretword

        answer = "-" * len(secret_word)     # Create empty answer for assigning characters

        while switch is True:
            guess_number = guess_number + 1     # Counts the guesses
            index_num = 0           # Tring to use this to assign correct guesses to answer
            user_guess = input("Guess #%d &gt;" % guess_number)    # Gets user guess
            print("Secret word: " + answer)                     # prints empty answer as "----"

            for each_char in secret_word:
                index_num = index_num + 1       # Counting index for assigning to answer variable
                print("testing index #" + str(index_num))

                if user_guess is each_char:
                    print("Correct Guess for index #" + str(index_num))
 #------&gt;           answer[index_num] = each_char  &lt;--------

    hangman()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python strings are immutable, they can't be modified.
You can treat your string as a list</p>
<p><code>answer = list("-" * len(secret_word))</code></p>
<p>Then join chars together
<code>answer_str="".join(answer)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>There are some other ways, that have been suggested. If you're determined to keep the string answer, try this:</p>
<pre><code>answer = answer[:index_num] + each_char + answer[index_num+1:]
</code></pre>
<p>This creates a new string by adding (string add is concatenation) together three substrings: first, the substring created by <a href="https://docs.python.org/3/reference/expressions.html?highlight=slicing#slicings" rel="nofollow noreferrer"><em>slicing</em></a> the original string from zero (default: <code>[:</code>) up to <code>index_num</code>, non-inclusive. That is, answer[0] ... answer[index_num-1]. Then the <code>each_char</code>, which is a string (or a char, same difference). Finally, another substring, this one from <code>index_num+1</code> running up to the end (default: <code>:]</code>).</p>
</div>
<span class="comment-copy">It would be easier, I think, if you actually broke the string down into a list, where each item in the list was a single letter. Then you could index it the way you wanted. If you wanted to then print it as a word: <code>print(''.join(item for item in my_list))</code></span>
<span class="comment-copy">You should be using a dictionary instead of a string for <code>answer</code> if you want to store each answer's character. You should look up python data structures first. Please post the expected output</span>
<span class="comment-copy">This worked for me, thank you everybody for the answers! It seems lists are the easier way to go, so I'll go back to studying!</span>
