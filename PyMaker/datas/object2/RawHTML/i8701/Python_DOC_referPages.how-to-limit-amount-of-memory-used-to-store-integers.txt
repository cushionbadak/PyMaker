<div class="post-text" itemprop="text">
<p>When I call <code>sys.getsizeof(4)</code>, it returns <code>14</code>.  Assuming this is the same as <code>sizeof()</code> in C, this is unacceptably high.</p>
<p>I would like to use the memory array like a big, raw array of bytes.  Memory overhead is of the utmost priority, due to the size of the arrays in the project in question.  Portability is a huge issue, too, so dropping into C or using a more exotic library is less than optimal.</p>
<p>Is there a way to force Python to use less memory for a single positive signed byte list or tuple member, using only standard Python 3?</p>
</div>
<div class="post-text" itemprop="text">
<p>14 strikes me as rather low considering that a Python object must at least have <a href="https://docs.python.org/3/c-api/structures.html#c.PyObject" rel="nofollow noreferrer">a pointer to its type struct and a refcount</a>.</p>
<blockquote>
<p>PyObject</p>
<p>All object types are extensions of this type. This is a type which contains the information Python needs to treat a pointer to an object as an object. In a normal “release” build, it contains only the object’s reference count and a pointer to the corresponding type object. Nothing is actually declared to be a PyObject, but every pointer to a Python object can be cast to a PyObject*. Access to the members must be done by using the macros Py_REFCNT and Py_TYPE.</p>
</blockquote>
<p>This overhead you will have for every Python object. The only way to reduce the overhead / payload ratio is to have more payload as for example in arrays (both plain Python and numpy).</p>
<p>The trick here is that array elements typically are not Python objects, so they can dispense with the refcount and type pointer and occupy just as much memory as the underlying C type.</p>
</div>
<div class="post-text" itemprop="text">
<p>(Hat tip to <strong>martineau</strong> for <a href="https://stackoverflow.com/questions/42755256/how-to-limit-memory-allocation-of-a-number#comment72627453_42755256">his comment</a>...)</p>
<p>If you're only concerned with unsigned bytes (values [0, 255]), then the simplest answer <em>might</em> be the built-in <a href="https://docs.python.org/3/library/functions.html#bytearray" rel="nofollow noreferrer"><code>bytearray</code></a> and its immutable sibling, <a href="https://docs.python.org/3/library/functions.html#bytes" rel="nofollow noreferrer"><code>bytes</code></a>.
One potential problem is that these are intended to represent encoded strings (reading from or writing to the outside world), so their default <code>__repr__</code> is "string-like", not a list of integers:</p>
<pre><code>&gt;&gt;&gt; lst = [0x10, 0x20, 0x30, 0x41, 0x61, 0x7f, 0x80, 0xff]
&gt;&gt;&gt; bytearray(lst)
bytearray(b'\x10 0Aa\x7f\x80\xff')
&gt;&gt;&gt; bytes(lst)
b'\x10 0Aa\x7f\x80\xff'
</code></pre>
<p>Note that space, <code>'0'</code>, <code>'A'</code>, and <code>'a'</code> appear literally, while "unprintable" values appear as <code>'\x##'</code> string escape sequences.
If you're trying to think of those bytes as a bunch of <em>integers</em>, this is not what you want.</p>
<p>For homogeneous arrays of fixed-width integers or floats (much like in C), use the standard library's <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer"><code>array</code> module</a>.</p>
<pre><code>&gt;&gt;&gt; import array

# One megabyte of unsigned 8-bit integers.
&gt;&gt;&gt; a = array.array('B', (n % 2**8 for n in range(2**20)))
&gt;&gt;&gt; len(a)
1048576
&gt;&gt;&gt; a.typecode
'B'
&gt;&gt;&gt; a.itemsize
1
&gt;&gt;&gt; a.buffer_info()  # Memory address, memory size.
(24936384, 1048576)

&gt;&gt;&gt; a_slice = a[slice(1024, 1040)]  # Can be sliced like a list.
&gt;&gt;&gt; a_slice
array('B', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
&gt;&gt;&gt; type(a_slice)  # Slice is also an array, not a list.
&lt;class 'array.array'&gt;
</code></pre>
<p>For more complex data, the <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer"><code>struct</code> module</a> is for packing heterogeneous records, much like C's <code>struct</code> keyword.
Unlike C, I don't see any obvious way to create an <code>array</code> of <code>struct</code>s.</p>
<p>These data structures all make use of Python's <a href="https://docs.python.org/3/c-api/buffer.html" rel="nofollow noreferrer">Buffer Protocol</a>, which (in CPython, at least) allows a Python class to expose its inner C-like array directly to other Python code.
If you need to do something complicated, you might have to learn this...
or give up and use <a href="http://www.numpy.org/" rel="nofollow noreferrer">NumPy</a>.</p>
</div>
<span class="comment-copy">If you are able to use libraries, <a href="http://www.numpy.org/" rel="nofollow noreferrer"><code>numpy</code></a> offers optimized arrays along with efficient functions for manipulating them. You can specify the memory size of the elements using the dtype parameter of the array.</span>
<span class="comment-copy">Try using an <code>array.array()</code> with a suitable <i>typecode</i>.</span>
<span class="comment-copy">Following up on marineau's comment:  the docs for the <a href="https://docs.python.org/library/array.html" rel="nofollow noreferrer"><code>array</code> module</a>, part of the standard library.</span>
<span class="comment-copy">Awesome, array.array() was exactly what I was looking for, thank you martineau and Kevin!  I was trying to avoid numpy if possible, numpy is great just not 110% sure it'd work in this situation.</span>
