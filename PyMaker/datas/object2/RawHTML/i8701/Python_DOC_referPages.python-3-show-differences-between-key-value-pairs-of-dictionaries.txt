<div class="post-text" itemprop="text">
<p>I'd like to find the differences between two dictionaries that have multiple values for a key. All the examples that I find, the dictionaries have a key which contains only one value. Say you have keys that have multiple values as in the following example:</p>
<pre><code>pizza_1 = {"toppings": ["cheese", "pepperoni", "mushroom"],
           "crust": ["deep dish", "hand tossed", "thin"],
           "size": ["large", "medium", "small"],
           "price": ["$12.99", "$9.99", "$7.99"]}

pizza_2 = {"toppings": ["cheese", "pepperoni", "olive"],
           "crust": ["deep dish", "traditional", "thin"],
           "size": ["large", "medium", "small"],
           "brand": ["Domino's", "Pizza Hut", "Little Caesars"]}
</code></pre>
<p>I want to return only the differences in the two dictionaries including both the key and the values. Either the difference in pizza_1 or pizza_2, it does not matter which dictionary. Example of what I'm looking for below:</p>
<pre><code>print(differences)
"toppings": ["mushroom"]
"crust": ["hand tossed"]
"price": ["$12.99", "$9.99", "$7.99"]
</code></pre>
<p>I'm not sure exactly how it will output, but wanted to give an example of what I am sort of looking for. Thanks in advance for taking your time to help!</p>
<p>-Jeff</p>
</div>
<div class="post-text" itemprop="text">
<p>Loop over the union of keys, treat the values <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer">as sets</a> and print the <a href="https://docs.python.org/3/library/stdtypes.html#set.difference" rel="nofollow noreferrer">set difference</a>:</p>
<pre><code>for key in pizza_1.keys() | pizza_2:  # union of the dict views
    difference = set(pizza_1.get(key, [])).difference(pizza_2.get(key, []))
    if difference:
        print(key, list(difference))
</code></pre>
<p>I'm using the <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer"><code>dict.keys()</code> dictionary view</a> here to provide the union of dictionary keys. The <code>if</code> test filters out empty results.</p>
<p>If you wanted this as a dictionary, you can produce one with a generator expression plus a dict comprehension to avoid producing the sets more than once:</p>
<pre><code>differences = ((key, list(set(pizza_1.get(key, [])).difference(pizza_2.get(key, []))))
              for key in pizza_1.keys() | pizza_2)
differences = {k: v for k, v in differences if v}
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; for key in pizza_1.keys() | pizza_2:  # union of the dict views
...     difference = set(pizza_1.get(key, [])).difference(pizza_2.get(key, []))
...     if difference:
...         print(key, list(difference))
...
crust ['hand tossed']
toppings ['mushroom']
price ['$9.99', '$7.99', '$12.99']
&gt;&gt;&gt; differences = ((key, list(set(pizza_1.get(key, [])).difference(pizza_2.get(key, []))))
...               for key in pizza_1.keys() | pizza_2)
&gt;&gt;&gt; {k: v for k, v in differences if v}
{'crust': ['hand tossed'], 'toppings': ['mushroom'], 'price': ['$9.99', '$7.99', '$12.99']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I propose a dictionary with set-values as your output-datastructure. </p>
<pre><code>&gt;&gt;&gt; {k: set(v).difference(pizza_2.get(k, {})) for k, v in pizza_1.items()}
{'price': {'$9.99', '$7.99', '$12.99'}, 'size': set(), 'toppings': {'mushroom'}, 'crust': {'hand tossed'}}
</code></pre>
<p>The result will hold an empty set for a key where there's no difference (see size).</p>
</div>
<div class="post-text" itemprop="text">
<p>What I did was loop through keys and use list comprehensions to get the difference (specifically what's in <code>pizza_1</code> that's not in <code>pizza_2</code> as your example output shows).</p>
<pre><code>def getDiff(dict1, dict2):
    diff = {}

    for key in dict1:
        if key not in dict2:
            diff[key] = dict1[key]
        elif dict1[key] != dict2[key]:
            diff[key] = [e for e in dict1[key] if e not in dict2[key]]

    return diff
</code></pre>
</div>
<span class="comment-copy">Will the keys always be the same? If not, what should happen to such keys?</span>
<span class="comment-copy">Hello Martijn, thanks a lot for the help! In theory the keys should be the same, but it is possible that the keys may not be the same. If the keys are no the same, I would like to also have that shown as a difference.</span>
<span class="comment-copy">Can you explain, in the most simplistic manner, what exactly is going on here. I'm still learning python and dictionaries are an area that I need to better understand. for key in pizza_1.keys() | pizza_2:  # union of the dict views  difference = set(pizza_1.get(key, [])).difference(pizza_2.get(key, [])) if difference:       print(key, list(difference))  I'm not sure what set() and get() are doing here. Also how you use .difference() since you have that line equal to the difference variable.  Thanks, -Jeff</span>
<span class="comment-copy">@jmm5351: I did try to link you to the relevant documentation (apart from <code>dict.get()</code>) there; reading the links I included should cover the majority of this; the only missing link then is <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>dict.get()</code></a>, which will either return the value for a given key, or a default if the key is missing.</span>
<span class="comment-copy">@jmm5351: <code>pizza_1.keys() | pizza_2</code> produces a set of the keys for both dictionaries together, so the combination of unique keys that are in one or the other dictionary. <code>dict.get()</code> retrieves the value for that key, or if missing in that one dictionary, an empty list instead. The <code>set(..).difference(..)</code> then takes the difference between the two lists.</span>
<span class="comment-copy">This gives an extra <code>size: set()</code> element in the difference dict</span>
