<div class="post-text" itemprop="text">
<p>I am trying to iterate over a dictionary in Python. The output has to resemble a certain format so it can be used as input for something else. The input looks like this: </p>
<pre><code>"ok":"1",
"invalid", "0",
"unknown", "4",
...
</code></pre>
<p>The output should look like this:</p>
<pre><code>operation,ok=1,invalid=0,unknown=4,...
</code></pre>
<p>I am really close to getting it with a for loop but I read that this can be done very easily with <code>.join()</code> in Python. Here is my code right now:</p>
<pre><code>output_str = 'operation,'
for key, val in events.items():
    output_str += '{0}={1},'.format(key, val)
print output_str
</code></pre>
<p>Can I do this using <code>.join</code>? I read that join will allow me to skip the comma on the last iteration. I'm just not sure how to prepend my "operation," string to it all if I do it this way.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can indeed use a <code>str.join</code> function here to join the different elements together:</p>
<pre><code>output_str = 'operation,'
output_str += ','.join(<b>'{0}={1}'.format(key,val) for key,val in events.items()</b>)</code></pre>
<p>Or putting it in a <em>one-liner</em> (and even make it shorter):</p>
<pre><code>output_str = 'operation,'+','.join('{0}={1}'.format(<b>*tup</b>) for <b>tup</b> in events.items())</code></pre>
<p><strong>How does this work?</strong> As is specified in the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=str.join#str.join" rel="nofollow noreferrer">documentation</a>, <code>str.join</code> takes an <code>iterable</code> of <code>str</code>ings and joins them together with the separator (here <code>','</code>). So <code>','.join(['foo','bar','qux'])</code> generates <code>'foo,bar,qux'</code>.</p>
<p>Now here we use a <em>generator</em>. For <code>key,value</code> pair in <code>events.items()</code>, we <em>construct a string</em> with <code>'{0}={1}'.format(key,val)</code>. So if <code>key='ok'</code> and <code>val='1'</code>, then <code>{0}={1}'.format(key,val)</code> will generate <code>ok=1</code>. Now we join all these together.</p>
<p>Since <code>str.join</code> does <strong>not add a tailing separator</strong>, thus it meets the specifications of your question. <code>join</code> will usually also outperform string concatenation (in a loop).</p>
</div>
<div class="post-text" itemprop="text">
<p>the function you are looking for is <code>str.rstrip()</code>
it takes a list of characters to remove so you can do</p>
<pre><code>output_str = output_str.rstrip(',')
</code></pre>
<p>but the solution suggested by Willem Van Onsem is better, as it avoids the issue to begin with.</p>
</div>
<span class="comment-copy">Simply use <code>output_str += ','.join('{0}={1}'.format(key,val) for key,val in events.items())</code> to replace the <b>entire</b> <code>for</code> loop...</span>
<span class="comment-copy">You dropped a ` there, Willem! edit: ok, it's up now! I think your comment is a fitting answer and so you should post it as one.</span>
<span class="comment-copy">@WillemVanOnsem you should write as answer with a short explanation. this is exactly what the OP asked for and needs</span>
<span class="comment-copy">Yes, thank you @WillemVanOnsem. That worked perfectly.</span>
