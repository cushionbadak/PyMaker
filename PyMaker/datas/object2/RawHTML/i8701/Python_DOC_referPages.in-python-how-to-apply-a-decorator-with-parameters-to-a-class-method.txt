<div class="post-text" itemprop="text">
<p>Consider this small example:</p>
<pre><code>import datetime as dt

class Timed(object):
    def __init__(self, f):
        self.func = f

    def __call__(self, *args, **kwargs):
        start = dt.datetime.now()
        ret = self.func(*args, **kwargs)
        time = dt.datetime.now() - start
        ret["time"] = time
        return ret

class Test(object):
    def __init__(self):
        super(Test, self).__init__()

    @Timed
    def decorated(self, *args, **kwargs):
        print(self)
        print(args)
        print(kwargs)
        return dict()

    def call_deco(self):
        self.decorated("Hello", world="World")

if __name__ == "__main__":
    t = Test()
    ret = t.call_deco()
</code></pre>
<p>which prints </p>
<pre><code>Hello
()
{'world': 'World'}
</code></pre>
<p>Why is the <code>self</code> parameter (which should be the Test obj instance) not passed as first argument to the decorated function <code>decorated</code>?</p>
<p>If I do it manually, like :</p>
<pre><code>def call_deco(self):
    self.decorated(self, "Hello", world="World")
</code></pre>
<p>it works as expected. But if I must know in advance if a function is decorated or not, it defeats the whole purpose of decorators. What is the pattern to go here, or do I misunderstood something?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>tl;dr</strong></p>
<p>You can fix this problem by making the <code>Timed</code> class a <a href="https://docs.python.org/3/glossary.html#term-descriptor" rel="nofollow noreferrer">descriptor</a> and returning a partially applied function from <code>__get__</code> which applies the <code>Test</code> object as one of the arguments, like this</p>
<pre><code>class Timed(object):
    def __init__(self, f):
        self.func = f

    def __call__(self, *args, **kwargs):
        print(self)
        start = dt.datetime.now()
        ret = self.func(*args, **kwargs)
        time = dt.datetime.now() - start
        ret["time"] = time
        return ret

    def __get__(self, instance, owner):
        from functools import partial
        return partial(self.__call__, instance)
</code></pre>
<hr/>
<p><strong>The actual problem</strong></p>
<p>Quoting Python documentation for <a href="https://docs.python.org/3/glossary.html#term-decorator" rel="nofollow noreferrer"><em>decorator</em></a>,</p>
<blockquote>
<p>The decorator syntax is merely syntactic sugar, the following two function definitions are semantically equivalent:</p>
<pre><code>def f(...):
    ...
f = staticmethod(f)

@staticmethod
def f(...):
    ...
</code></pre>
</blockquote>
<p>So, when you say,</p>
<pre><code>@Timed
def decorated(self, *args, **kwargs):
</code></pre>
<p>it is actually </p>
<pre><code>decorated = Timed(decorated)
</code></pre>
<p>only the function object is passed to the <code>Timed</code>, <strong>the object to which it is actually bound is not passed on along with it</strong>. So, when you invoke it like this</p>
<pre><code>ret = self.func(*args, **kwargs)
</code></pre>
<p><code>self.func</code> will refer to the unbound function object and it is invoked with <code>Hello</code> as the first argument. That is why <code>self</code> prints as <code>Hello</code>.</p>
<hr/>
<p><strong>How can I fix this?</strong></p>
<p>Since you have no reference to the <code>Test</code> instance in the <code>Timed</code>, the only way to do this would be to convert <code>Timed</code> as a <em>descriptor class</em>. Quoting the documentation, <a href="https://docs.python.org/2/reference/datamodel.html#invoking-descriptors" rel="nofollow noreferrer">Invoking descriptors</a> section,</p>
<blockquote>
<p>In general, a descriptor is an object attribute with “binding behavior”, one whose attribute access has been overridden by methods in the descriptor protocol: <code>__get__()</code>, <code>__set__()</code>, and <code>__delete__()</code>. If any of those methods are defined for an object, it is said to be a descriptor.</p>
<p>The default behavior for attribute access is to get, set, or delete the attribute from an object’s dictionary. For instance, <code>a.x</code> has a lookup chain starting with <code>a.__dict__['x']</code>, then <code>type(a).__dict__['x']</code>, and continuing through the base classes of <code>type(a)</code> excluding metaclasses.</p>
<p>However, <strong>if the looked-up value is an object defining one of the descriptor methods, then Python may override the default behavior and invoke the descriptor method instead</strong>.</p>
</blockquote>
<p>We can make <code>Timed</code> a descriptor, by simply defining a method like this</p>
<pre><code>def __get__(self, instance, owner):
    ...
</code></pre>
<p>Here, <code>self</code> refers to the <code>Timed</code> object itself, <code>instance</code> refers to the actual object on which the attribute lookup is happening and <code>owner</code> refers to the class corresponding to the <code>instance</code>.</p>
<p>Now, when <code>__call__</code> is invoked on <code>Timed</code>, the <code>__get__</code> method will be invoked. Now, somehow, we need to pass the first argument as the instance of <code>Test</code> class (even before <code>Hello</code>). So, we create another partially applied function, whose first parameter will be the <code>Test</code> instance, like this</p>
<pre><code>def __get__(self, instance, owner):
    from functools import partial
    return partial(self.__call__, instance)
</code></pre>
<p>Now, <code>self.__call__</code> is a bound method (bound to <code>Timed</code> instance) and the second parameter to <code>partial</code> is the first argument to the <code>self.__call__</code> call.</p>
<p>So, all these effectively translate like this</p>
<pre><code>t.call_deco()
self.decorated("Hello", world="World")
</code></pre>
<p>Now <code>self.decorated</code> is actually <code>Timed(decorated)</code> (this will be referred as <code>TimedObject</code> from now on) object. Whenever we access it, the <code>__get__</code> method defined in it will be invoked and it returns a <code>partial</code> function. You can confirm that like this</p>
<pre><code>def call_deco(self):
    print(self.decorated)
    self.decorated("Hello", world="World")
</code></pre>
<p>would print</p>
<pre><code>&lt;functools.partial object at 0x7fecbc59ad60&gt;
...
</code></pre>
<p>So,</p>
<pre><code>self.decorated("Hello", world="World")
</code></pre>
<p>gets translated to</p>
<pre><code>Timed.__get__(TimedObject, &lt;Test obj&gt;, Test.__class__)("Hello", world="World")
</code></pre>
<p>Since we return a <code>partial</code> function,</p>
<pre><code>partial(TimedObject.__call__, &lt;Test obj&gt;)("Hello", world="World"))
</code></pre>
<p>which is actually</p>
<pre><code>TimedObject.__call__(&lt;Test obj&gt;, 'Hello', world="World")
</code></pre>
<p>So, <code>&lt;Test obj&gt;</code> also becomes a part of <code>*args</code>, and when <code>self.func</code> is invoked, the first argument will be the <code>&lt;Test obj&gt;</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You first have to understand <a href="https://wiki.python.org/moin/FromFunctionToMethod" rel="noreferrer">how function become methods and how <code>self</code> is "automagically" injected</a>.</p>
<p>Once you know that, the "problem" is obvious: you are decorating the <code>decorated</code> function with a <code>Timed</code> instance - IOW, <code>Test.decorated</code> is a <code>Timed</code> instance, not a <code>function</code> instance - and your <code>Timed</code> class does not mimick the <code>function</code> type's implementation of the <code>descriptor</code> protocol. What you want looks like this:</p>
<pre><code>import types

class Timed(object):
    def __init__(self, f):
        self.func = f

    def __call__(self, *args, **kwargs):
        start = dt.datetime.now()
        ret = self.func(*args, **kwargs)
        time = dt.datetime.now() - start
        ret["time"] = time
        return ret

   def __get__(self, instance, cls):           
       return types.MethodType(self, instance, cls)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I use decorators in the following way:</p>
<pre><code>def timeit(method):
    def timed(*args, **kw):
        ts = time.time()
        result = method(*args, **kw)
        te = time.time()
        ts = round(ts * 1000)
        te = round(te * 1000)
        print('%r (%r, %r) %2.2f millisec' %
             (method.__name__, args, kw, te - ts))
        return result
    return timed


 class whatever(object):
    @timeit
    def myfunction(self):
         do something
</code></pre>
</div>
<span class="comment-copy">A quick google turns up this: <a href="http://thecodeship.com/patterns/guide-to-python-function-decorators/" rel="nofollow noreferrer">thecodeship.com/patterns/guide-to-python-function-decorators</a> (see the section "Decorating methods")</span>
<span class="comment-copy">Have you read e.g. <a href="http://stackoverflow.com/q/2365701/3001761">stackoverflow.com/q/2365701/3001761</a>, <a href="http://stackoverflow.com/q/15098424/3001761">stackoverflow.com/q/15098424/3001761</a></span>
<span class="comment-copy">You won’t run into this kind of problem when you use a function as the decorator instead of a callable object.</span>
<span class="comment-copy">Why using a <code>functool.partial</code> instead of the builtin dedicated <code>types.MethodType</code> ?</span>
<span class="comment-copy">Thank you for this comprehensive answer - I'm going to have to read it a few times to grok it, but I'm confident that I will!  When I first tried applying this, I left off the <code>(object)</code> in the definition of my decorator - so, I just had <code>class Timed:</code> - and I still got the OP's original error. Could you point me at the right concept to read up on to understand why?</span>
<span class="comment-copy">@scubbo - Were you in Python2.7? In 2.7 you want to make sure every class inherits from <code>object</code>; this inheritance is default in Python3. I don't know <i>specifically</i> why this manifested in a bug, but that's the likely culprit - <code>type(YourClass)</code> should be <code>type</code>, not <code>classobj</code>.</span>
<span class="comment-copy">Can you please explain why   <code>def check_authorization(f):     def wrapper(*args):         print(args[0].url)         return f(*args)     return wrapper  class Client(object):     def __init__(self, url):         self.url = url      @check_authorization     def get(self):         print('get')  </code> works here? wouldn't it be also unbound?</span>
<span class="comment-copy">Thanks, this helped. One note though, this doesn't work in Python 3, since unbound methods no longer exist (<code>MethodType</code> only takes two arguments, and the second must not be None). For Python 3 the alternative would be: <code>return types.MethodType(self, instance) if instance else self</code>.</span>
