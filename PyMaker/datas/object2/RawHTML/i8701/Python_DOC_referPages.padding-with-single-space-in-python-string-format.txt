<div class="post-text" itemprop="text">
<p>I'm afraid this is a basic Python issue, but I couldn't find a proper answer to this.
I want to add a single padding space in front of a placeholder.</p>
<p>This is my example:</p>
<pre><code>user = 'Jhon'
'Hi {u}!'.format(u=user if user else '')

# result
'Hi Jhon!'
</code></pre>
<p>Now everything is fine until my <code>user</code> var is empty or false, in that case this is the result of above</p>
<pre><code>'Hi !'
#  ^ notice the empty space
</code></pre>
<p>Instead I want <code>'Hi!'</code> as a result.</p>
<p>Now I've tried with <code>format()</code> padding options like <code>{:&gt;1}</code> but ofc is not working since it will add enough padding to reach a character length of 1.</p>
<p>I ended up doing something like this:</p>
<pre><code>'Hi{u:&gt;{p}}!'.format(u=user if user else '', p=1+len(user))
</code></pre>
<p>The above works fine, but I think it's kinda hackish and I'd like to now if there is a inbuilt way of doing this that I'm missing.</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's the solution I posted in the comments:</p>
<pre><code>'Hi{u}!'.format(u=' ' + user if user else '')
</code></pre>
<p>The solution you posted in the question doesn't quite work, but it can be fixed by changing your padding length calculation to</p>
<pre><code>p=bool(user) + len(user)
</code></pre>
<p>The <code>bool</code> function determines whether it's argument is True-ish or False-ish and returns <code>True</code> or <code>False</code>, respectively. But <code>True</code> and <code>False</code> can be used in arithmetic operations where they evaluate to 1 and 0, respectively.</p>
<p>Here's some code that demonstrates various solutions, including a couple that use literal string interpolation aka f-strings, which are available in Python 3.6+.</p>
<pre><code>for user in ('John', ''):
    print('user is {!r}'.format(user)) 
    # Gruber
    print('Hi{u:&gt;{p}}!'.format(u=user if user else '', p=1+len(user)))
    # Gruber, fixed
    print('Hi{u:&gt;{p}}!'.format(u=user if user else '', p=bool(user) + len(user)))
    # Ryan
    print('Hi {u}!'.format(u=user) if user else 'Hi!')
    # PM 2Ring
    print('Hi{u}!'.format(u=' ' + user if user else ''))
    print('Hi{p}{u}!'.format(u=user, p=' ' if user else ''))
    # Python 3.6
    print(f'Hi{user and " " or ""}{user}!')
    print(f'Hi{" " if user else ""}{user}!')
    # Old `%-style` interpolation
    print('Hi%s%s!' % (user and " " or "", user))

    print()
</code></pre>
<p><strong>output</strong></p>
<pre><code>user is 'John'
Hi John!
Hi John!
Hi John!
Hi John!
Hi John!
Hi John!
Hi John!
Hi John!

user is ''
Hi !
Hi!
Hi!
Hi!
Hi!
Hi!
Hi!
Hi!
</code></pre>
<p>For info about f-strings please see <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">Formatted string literals</a> in the official Python docs. Also see <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">PEP 498 -- Literal String Interpolation</a> and <a href="https://www.python.org/dev/peps/pep-0536" rel="nofollow noreferrer">PEP 536 -- Final Grammar for Literal String Interpolation</a>.  </p>
</div>
<span class="comment-copy">Avoid the issue: <code>'Hi {u}!'.format(u=user) if user else 'Hi!'</code> â€“ easy to read and flexible.</span>
<span class="comment-copy">How about <code>'Hi{u}!'.format(u=' ' + user if user else '')</code> ?</span>
<span class="comment-copy">Both of you are right indeed, @Ryan suggestion looks quick and clear but unfortunately in my situation I can't use it (the example string was a reduced and simplified case to show my problem).</span>
<span class="comment-copy">If @PM2Ring publish his suggestion as an answer I'll mark it as solution</span>
<span class="comment-copy">Thank you for the very detailed explanation and that nice looking <code>f-string</code> didn't know about it! For anyone interested look <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">this</a> and <a href="https://cito.github.io/blog/f-strings/" rel="nofollow noreferrer">this</a></span>
<span class="comment-copy">@Gruber f-strings are awesome. I generally don't use them in my SO answers since not everyone has 3.6 installed (I installed the alpha version last May). But I guess I should add some links to my answer.</span>
