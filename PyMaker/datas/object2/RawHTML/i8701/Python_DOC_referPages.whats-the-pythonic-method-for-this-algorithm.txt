<div class="post-text" itemprop="text">
<p>I have a class that I want to be able to use like this:</p>
<pre><code>obj = MyClass(arg1, arg2)
if (obj is None):
    # tell user to try again
else:
    # give user options for continuing
</code></pre>
<p>The basic algorithm for the object creation (in <code>__init__</code> and/or <code>__new__</code>, I'm not sure) should be something like this:</p>
<pre><code>retrieve database record from arg1 and arg2 search criteria
if a record is returned
    setup instance variables
else
    return None
</code></pre>
<p>Is there a definitively pythonic way to do this? I've read a few articles that suggest raising an exception instead, but that doesn't seem right, as this is expected behavior. I've seen others suggest using <code>__new__</code>, but how do I then check the database in <code>__new__</code> to see if the record is valid without also checking in <code>__init__</code> to set up the instance variables?</p>
</div>
<div class="post-text" itemprop="text">
<p>Raising an exception would be perfectly valid here. SQLAlchemy, a relatively popular Python ORM, raises a <a href="http://docs.sqlalchemy.org/en/latest/orm/exceptions.html#sqlalchemy.orm.exc.NoResultFound" rel="nofollow noreferrer"><code>NoResultFound</code> exception</a> if a record was needed but couldn't be found (although this is from <a href="http://docs.sqlalchemy.org/en/latest/orm/query.html#sqlalchemy.orm.query.Query.one" rel="nofollow noreferrer">a function</a>, not a class instantiation, so perhaps not directly comparable). I don't think it would be unusual at all to do thisâ€”<a href="https://stackoverflow.com/questions/1507082/python-is-it-bad-form-to-raise-exceptions-within-init">it's not bad form to raise exceptions in <code>__init__</code></a>!</p>
<p>The idea you want to express of "an absence of a value, but not an error" is similar to an <a href="https://en.wikipedia.org/wiki/Option_type" rel="nofollow noreferrer">Option type</a>, but this isn't really a Pythonic construct. As stated in '<a href="https://stackoverflow.com/questions/22992433/is-there-a-python-equivalent-for-scalas-option-or-either">Is there a Python equivalent for Scala's Option or Either?</a>', the Pythonic way <strong>is</strong> to throw an exception.</p>
<p>You shouldn't think of an exception as meaning your program is broken, just that there is a disruption to the <em>expected</em> flow of events in some way. You might like to read '<a href="https://softwareengineering.stackexchange.com/questions/219320/when-and-how-should-i-use-exceptions">When and how should I use exceptions?</a>' which gives a few ideas about the common philosophy of exceptions in Python.</p>
<p>As <a href="https://stackoverflow.com/questions/42890590/whats-the-pythonic-method-for-this-algorithm#comment72882684_42890590">commented by idjaw</a>, it's <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer"><em>Easier to Ask for Forgiveness than Permission</em></a>:</p>
<blockquote>
<p>This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many try and except statements. The technique contrasts with the LBYL style common to many other languages such as C.</p>
</blockquote>
<p>You should  <em>assume</em> that the record exists, then handle the error if it doesn't. Python is designed around this, and you'll find that code ends up a lot cleaner if you follow EAFP.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that your best method would be to create a factory on top of your class and let the class raise an exception if it was unable to retrieve the correct database records, ie:</p>
<pre><code>class MyClass:
    def __init__(self, arg1, arg2):
        if arg1 or arg2:
            raise Exception()


def my_class(arg1, arg2):
    try:
        return MyClass(arg1, arg2)
    except Exception:  # using the default exception for simplicity
        return None


obj = my_class(arg1, arg2)
if obj is None:
    pass  # try again
else:
    pass  # other options
</code></pre>
<p>Please do not use the default <code>Exception</code> class in the above code but instead create an exception for your specific class of module or use one of the builtin exceptions.</p>
</div>
<div class="post-text" itemprop="text">
<p>The Pythonic thing is <em>not to do this</em>. Doing <code>MyClass(whatever)</code> is instantiating an object; that will by definition always create an instance.</p>
<p>One alternative might be to define a factory function, as a classmethod, which can either return an object or not.</p>
<pre><code>class MyClass(object):
    ...

    @classmethod
    def create_maybe(cls, arg1, arg2):
        ... do logic ...
        if whatever:
            return cls(arg1, arg2)
</code></pre>
<p>Now to potentially create your object you can call <code>MyClass.create_maybe(arg1, arg2)</code>.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a> is a very acceptable and <i>pythonic</i> approach.</span>
