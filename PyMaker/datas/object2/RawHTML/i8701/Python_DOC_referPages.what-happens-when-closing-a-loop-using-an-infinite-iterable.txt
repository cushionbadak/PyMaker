<div class="post-text" itemprop="text">
<p>I have written the following python function(s):</p>
<pre><code>import numpy

def primes_iterable():
    """Iterable giving the primes"""
    # The lowest primes
    primes = [2,3,5]
    for p in primes:
        yield p
    for n in potential_primes():
        m = int(numpy.sqrt(n))
        check = True
        for p in primes:
            if p &gt; m:
                break
            if n%p == 0:
                check = False
        if check:
            primes.append(n)
            yield n

def potential_primes():
    """Iterable starting at 7 and giving back the non-multiples of 2,3,5"""
    yield 7
    n = 7
    gaps = [4,2,4,2,4,6,2,6]
    while 1:
        for g in gaps:
            n += g
            yield n
</code></pre>
<p>As you can see, both functions don't have a <code>return</code> statement. Suppose I was to write something like this:</p>
<pre><code>for p in primes_iterable():
    if p &gt; 1000:
        break
    print p
</code></pre>
<p>What happens at the level of the memory when the <code>break</code> statement is reached? If I understand correctly, calling <code>primes_iterable()</code> makes the function start, go until the next <code>yield</code> and then pause until it is needed again. When the <code>break</code> statement is reached, does the function instance close up, or does it continue existing in the backgroud, completely useless?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your function <code>primes_iterable</code> is a generator function. When you call it, nothing happens immediately (other than it returning a generator object). Only when <code>next</code> is called on it does it run to the next <code>yield</code>.</p>
<p>When you call the generator function, you get an iterable generator object. If you're doing that in a <code>for</code> loop, the loop will keep a reference to the generator object while it is running. If you <code>break</code> out of the loop, that reference is released and the generator object can be garbage collected.</p>
<p>But what happens to the code running in the generator function when the generator object is cleaned up? It gets interrupted by a <code>GeneratorStop</code> exception thrown in to it at the <code>yield</code> it was paused for. If you need to, you could have your generator function catch this exception, but you can't do anything useful other than cleaning up your resources and exiting. That is is often done with a <code>try</code>/<code>finally</code> pair, rather than an <code>except</code> statement.</p>
<p>Here's some example code that demonstrates the behavior:</p>
<pre><code>def gen():
    print("starting")
    try:
        while 1:
            yield "foo"
    except GeneratorExit:
        print("caught GeneratorExit")
        raise
    finally:
        print("cleaning up")
</code></pre>
<p>Here's a sample run:</p>
<pre><code>&gt;&gt;&gt; for i, s in enumerate(gen()):
    print(s)
    if i &gt;= 3:
        break

starting
foo
foo
foo
foo
caught GeneratorExit
cleaning up
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you <code>break</code> from the <code>for</code> loop there is no reference left to the generator so it will eventually be garbage collected...<br/>
Just for clarity calling <code>primes_iterable()</code> creates a generator. Calling <code>next()</code> on the generator passes control to the generator and it runs until it <code>yield</code>s. The <code>for</code> implicitly calls <code>next()</code> each loop.</p>
<p>Consider this:</p>
<pre><code>prime = primes_iterable()
print(next(prime))    # 2
for p in prime:
    if p &gt; 1000:
        break
    print(p)          # 3, 5, 7, ...
</code></pre>
<p>Now you still have a reference to the generator called <code>prime</code> so you can always get the next prime:</p>
<pre><code>print(next(prime))    # 1013
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>primes_iterable()</code> returns an <strong>iterator</strong>. This is an object which spits out a new value whenever you call <code>next</code> on it. This is what a <code>for</code> loop does behind the scenes. Try this:</p>
<pre><code>it = primes_iterable()
print(next(it))
print(next(it))
</code></pre>
<p>Important to note is that <code>it</code> isn't running forever behind the scenes here, it just runs far enough to spit out a new value whenever you ask it to. It keeps hold of its data so that it's ready to start running again whenever, but you can't access that data.</p>
<p>Now, in your code,</p>
<pre><code>for p in primes_iterable():
</code></pre>
<p>As above <code>primes_iterable</code> has been called and has returned an iterator, although in this case the iterator has no name (i.e. it is not bound to a variable). For every step of the loop, p will be assigned to <code>next</code> of the iterator.</p>
<pre><code>    if p &gt; 1000:
        break
</code></pre>
<p>Now we break out and the for loop stops running <code>next</code> on the iterator. Nothing references the iterator any more (you can check this by calling <code>dir()</code> which shows you everything defined in the global namespace).</p>
<p>Therefore after a while Python frees up the memory that the iterator was taking up. This is called garbage collection. It's also what will happen if e.g. you type <code>[1,2,3]</code> into the interpreter but don't bind it to a variable name. It is created but then effectively deleted to free up space because it's pointless.</p>
<p>You can (and should) read more about iterators here:</p>
<p><a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/classes.html#iterators</a></p>
</div>
<span class="comment-copy">CPython or another implementation?</span>
<span class="comment-copy">@MSeifert I am using Spyder with Python 2.7</span>
<span class="comment-copy">Note that it doesn't matter that the generator is infinite.  The generator object is created and garbage-collected in the same way regardless of how "long" it is.  In fact there is no way to know how long a generator will continue without actually doing it.</span>
<span class="comment-copy">@BrenBarn, indeed. Even an exhausted generator is not garbage collected until all references are gone - as you can continue to call <code>next()</code> and it would continue to <code>raise StopIteration</code></span>
