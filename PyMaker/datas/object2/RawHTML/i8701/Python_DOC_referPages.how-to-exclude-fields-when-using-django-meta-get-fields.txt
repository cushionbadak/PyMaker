<div class="post-text" itemprop="text">
<p>My model has the standard "id" field, and I would like to exclude it when I use _meta.get_fields(). My current solution looks something like this:</p>
<pre><code>context_var = (MyModel._meta.get_fields())[1:]
</code></pre>
<p>It works well enough, but I don't really like the slice solution. I'd rather remove the id field by name, or use a method that explicitly excludes the id field. Is there a more elegant solution?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this:</p>
<pre><code>context_var = [f for f in MyModel._meta.get_fields() if f.name != 'id']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alternatively, you can use Python's built-in <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter()</code></a> function:</p>
<pre class="lang-py prettyprint-override"><code>In [1]: context_var = filter(lambda x: x.name != 'id', MyModel._meta.fields)

In [2]: type(context_var)
Out[2]: filter

In [3]: for item in context_var: print(item)

MyModel.field1
MyModel.field2
...
</code></pre>
<p>The resulting value is of type <code>filter</code> which you can iter through, but, depending on what you need to do with <code>context_var</code> later, you might want to convert it into a tuple:</p>
<pre class="lang-py prettyprint-override"><code>In [4]: context_var = tuple(filter(lambda x: x.name != 'id', MyModel._meta.fields))
</code></pre>
</div>
<span class="comment-copy">If you want to exclude several fields try: <code>[f for f in MyModel._meta.get_fields() if f.name not in  ['id', 'some_thing', 'another_thing']]</code></span>
