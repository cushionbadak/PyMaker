<div class="post-text" itemprop="text">
<p>I'm trying to write a context manager to handle a <code>GitHub</code> rate limit exception.  Essentially, I want it to listen for the error, and when it occurs, dynamically pull the reset time (all done through the <code>GitHub</code> API), and wait for that amount of time.  At which point I'd like it to resume the program, and do this as many times as necessary to complete the job.</p>
<p>Here is what I have so far:</p>
<pre><code>@contextlib.contextmanager
def api_rate_manager(api_obj: g3.GitHub):
    # Check for the API ratelimit being exhausted.  Limited to 5k
    # requests per hour.
    try:
        yield
    except GitHubError as e:
        if 'rate limit exceeded' in e.msg.lower():
            info = g3.rate_limit()['resources']['core']
            reset = mu.convert_unix_timestamp(info.get('reset'))
            delta = reset - datetime.now()
            sleep(
                delta.seconds + 1)  # Add a second to account for milliseconds
</code></pre>
<p>Currently, it will correctly catch the error and wait, but then it just exits the program (which makes sense) instead of circling back around to continue.  I know that I could put a check in the code to see what the remaining limit was, and wait if it reached 0, but I wanted to practice context managers. </p>
<p>It would be used in the following way:</p>
<pre><code>        with api_rate_manager(gh):
            for commit_iter in commit_iters:
                handler: gu.EtagHandler = commit_iter.etag_handler
                for commit in commit_iter:
                    if not commit:
                        continue

                    commit.refresh()
                    author_data: dict = commit.commit.author
                    data = {
                        'sha': commit.sha,
                        'author': author_data.get('name'),
                        'author_email': author_data.get('email'),
                        'create_date': author_data.get('date'),
                        'additions': commit.additions,
                        'deletions': commit.deletions,
                        'total': commit.total
                    }
                    mu.add_etl_fields(data)
                    writer.writerow(data)
                    has_data = True
                etag: str = commit_iter.get_etag()
                if etag:
                    logger.info(f'Etag for {commit_iter.name}: {etag}')
                    handler.store_in_db(etag=etag)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although the context manager uses <code>yield</code> (like in a generator), it generates only once. <a href="https://docs.python.org/3/library/contextlib.html" rel="nofollow noreferrer">See contextlib's documentation</a>.</p>
<p>As a result, in case the exception is caught in your context manager, the execution resumes after <code>yield</code> and exits.
You may want to invert the order of the context manager and of your main iteration. See my example below.</p>
<p>Context manager:</p>
<pre><code>import contextlib
from time import sleep

@contextlib.contextmanager
def api_rate_manager():
    try:
        yield
    except KeyError as e:
        print('sleeping')
        sleep(3)
</code></pre>
<p>Test case 1:</p>
<pre><code>a = {0:0,1:2,2:4,3:6,5:10}

with api_rate_manager():
    for i in range(8):
        print(a[i])
</code></pre>
<p>Outputs:</p>
<pre><code>0
2
4
6
sleeping
</code></pre>
<p>Test case 2:</p>
<pre><code>for i in range(8):
    with api_rate_manager():
        print(a[i])
</code></pre>
<p>Outputs:</p>
<pre><code>0
2
4
6
sleeping
10
sleeping
sleeping
</code></pre>
</div>
