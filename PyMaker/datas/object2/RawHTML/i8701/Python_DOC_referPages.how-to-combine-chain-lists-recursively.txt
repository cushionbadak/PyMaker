<div class="post-text" itemprop="text">
<p>For some reason I'm having real trouble wrapping my head around recursive algorithms ...</p>
<p>I was wondering if someone could help me come up with a recursive version of the following:</p>
<p>I have a list of lists of numbers and I want to get all possible lists of permutations of all the elements.</p>
<p>For example, given <code>[[1], [2,3], [4,5]]</code>, I want the output to be:</p>
<p><code>[[1,2,3,4,5], [1,2,3,5,4], [1,3,2,4,5], [1,3,2,5,4]]</code></p>
<p>The way I did it is kind ugly:</p>
<pre><code>l = (my list)
perms = [list(permutations(i)) for i in l]
p = perms[0]
for i in range(1, len(perms)):
    p = list(map(lambda x: list(chain.from_iterable(x)), list(product(p, perms[i]))))
    i += 1
print(p)
</code></pre>
<p>I don't like it ... I feel like recursion might be more elegant.
Any thoughts?</p>
</div>
<div class="post-text" itemprop="text">
<p>You code can be simplified without recursion:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain, product, permutations
&gt;&gt;&gt; l = [[1], [2,3], [4,5]]
&gt;&gt;&gt; perms = [list(permutations(x)) for x in l]
&gt;&gt;&gt; [list(chain.from_iterable(xs)) for xs in product(*perms)]
[[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [1, 3, 2, 4, 5], [1, 3, 2, 5, 4]]
</code></pre>
<p>For <code>product(*perms)</code>, see <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">Unpacking Argument Lists - Python tutorial</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simplify things a bunch. Just pass all the permutation iterators to <code>itertools.product</code> and flatten the lists of lists you get out:</p>
<pre><code>my_list = [[1], [2,3], [4,5]]
perms = [permutations(x) for x in my_list]
result = [list(chain.from_iterable(product)) for product in product(*perms)]
</code></pre>
</div>
