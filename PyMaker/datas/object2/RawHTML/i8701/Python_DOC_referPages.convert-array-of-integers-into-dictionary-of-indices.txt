<div class="post-text" itemprop="text">
<p>I have a (large) integer array like</p>
<pre><code>materials = [0, 0, 47, 0, 2, 2, 47]  # ...
</code></pre>
<p>with few unique entries and I'd like to convert it into a dictionary of indices, i.e.,</p>
<pre><code>d = {
    0: [0, 1, 3],
    2: [4, 5],
    47: [2, 6],
    }
</code></pre>
<p>What's the most efficient way of doing so? (NumPy welcome.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Alternative solution using <a href="https://docs.python.org/3.6/library/functions.html?highlight=enumerate#enumerate" rel="nofollow noreferrer"><strong><em>enumerate()</em></strong></a> and <a href="https://docs.python.org/3.6/library/stdtypes.html?highlight=dict#dict.setdefault" rel="nofollow noreferrer"><strong><em>dict.setdefault()</em></strong></a> functions:</p>
<pre><code>materials = [0, 0, 47, 0, 2, 2, 47]
d = {}
for k,m in enumerate(materials):
    d.setdefault(m, []).append(k)

print(d)
</code></pre>
<p>The output:</p>
<pre><code>{0: [0, 1, 3], 2: [4, 5], 47: [2, 6]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>no need for <code>numpy</code>, those are standard python structures, dict comprehension does that very well for your problem:</p>
<pre><code>materials = [0, 0, 47, 0, 2, 2, 47]

d = {v : [i for i,x in enumerate(materials) if x==v] for v in set(materials)}

print(d)
</code></pre>
<p>result:</p>
<pre><code>{0: [0, 1, 3], 2: [4, 5], 47: [2, 6]}
</code></pre>
<p><code>[i for i,x in enumerate(materials) if x==v]</code> finds all the indexes of the element in the list (<code>index</code> only finds the first one)</p>
<p>In the first version of my answer I was iterating on the list itself, but that's a bit wasteful since it will overwrite the key several times when there are a lot of occurrences, and the inner list comprehension has <code>n</code> complexity so the overall complexity is not so good.</p>
<p>While I was writing this final comment, someone suggested to iterate on unique elements, which is good, so turn that input list to a <code>set</code>!</p>
</div>
<div class="post-text" itemprop="text">
<p>you may find <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> to be of use here, when an element is found for first time it will create a new list for you.</p>
<pre><code>from collections import defaultdict

indices = defaultdict(list)

for i, elem in enumerate(materials):
    indices[elem].append(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here a numpy solution:</p>
<pre><code>import numpy as np

a = np.random.randint(0, 1000, 1000000)
index = np.argsort(a, kind='mergesort')
as_  = a[index]
jumps = np.r_[0, 1 + np.where(np.diff(as_) != 0)[0]]
result = {k: v for k, v in zip(as_[jumps], np.split(index, jumps[1:]))}
</code></pre>
<h2>Benchmarks</h2>
<p><code>numpy</code> wins for not too large <code>n</code>; since it uses an O(n log n) sort algorithm, the margins are slim (pp2 is a variant that replaces the slow but stable mergesort with quicksort at the cost of having to sort the individual index lists afterwards, pp3 replaces the full sort with <code>argpartition</code> this gains some speed if the number of unique elements is small compared to the number of elements.):</p>
<p>10 different integer values in the original array:
<a href="https://i.stack.imgur.com/XMmIa.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/XMmIa.png"/></a></p>
<p>100 different integer values in the original array:
<a href="https://i.stack.imgur.com/dhpkZ.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/dhpkZ.png"/></a></p>
<p>Benchmark code for reference:</p>
<pre><code>import numpy as np
from collections import defaultdict
import perfplot


def pp(a):
    index = np.argsort(a, kind='mergesort')
    as_ = a[index]
    jumps = np.r_[0, 1 + np.where(np.diff(as_) != 0)[0]]
    pp_out = {k: v for k, v in zip(as_[jumps], np.split(index, jumps[1:]))}
    return pp_out


def pp2(a):
    index = np.argsort(a)
    as_ = a[index]
    jumps = np.r_[0, 1 + np.where(np.diff(as_) != 0)[0]]
    pp_out = {k: np.sort(v)
              for k, v in zip(as_[jumps], np.split(index, jumps[1:]))}
    return pp_out


def Denziloe_JFFabre(a):
    df_out = {v: [i for i, x in enumerate(a) if x == v] for v in set(a)}
    return df_out


def FCouzo(a):
    fc_out = defaultdict(list)
    for i, elem in enumerate(a):
        fc_out[elem].append(i)
    return fc_out


def KKSingh(a):
    kks_out = defaultdict(list)
    list(map(lambda x: kks_out[x[0]].append(x[1]), zip(a, range(len(a)))))
    return kks_out


def TMcDonaldJensen(a):
    mdj_out = defaultdict(list)
    for i, elem in enumerate(a):
        mdj_out[elem].append(i)
    return mdj_out


def RomanPerekhrest(a):
    rp_out = {}
    for k, m in enumerate(a):
        rp_out.setdefault(m, []).append(k)
    return rp_out


def SchloemerHist(a):
    np.histogram(a, bins=np.arange(min(a), max(a)+2))
    return


def SchloemerWhere(a):
    out = {v: np.where(v == a)[0] for v in set(a)}
    return out


perfplot.show(
        setup=lambda n: np.random.randint(0, 10, n),
        kernels=[
            pp, pp2, Denziloe_JFFabre, FCouzo, KKSingh,
            TMcDonaldJensen, RomanPerekhrest, SchloemerHist, SchloemerWhere
            ],
        n_range=[2**k for k in range(19)],
        xlabel='len(a)',
        logx=True,
        logy=True,
        )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Comprehensions can do this nicely:</p>
<pre><code>d = {key:[i for i, v in enumerate(materials) if v == key] for key in set(materials)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd use <code>defaultdict</code>, it is more efficient (<code>O(n)</code> time, compared to Jean's answer, which is <code>O(n^2)</code>):</p>
<pre><code>from collections import defaultdict
materials = [0, 0, 47, 0, 2, 2, 47]
d = defaultdict(list)
for i, elem in enumerate(materials):
    d[elem].append(i)
</code></pre>
<p><code>d</code> is now equal to:</p>
<pre><code>defaultdict(&lt;type 'list'&gt;, {0: [0, 1, 3], 2: [4, 5], 47: [2, 6]})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another one-liner, this time with <code>numpy.where</code>:</p>
<pre><code>out = {v: np.where(v == a)[0] for v in numpy.unique(a)}
</code></pre>
<p>(For some applications, the Boolean array may be enough:</p>
<pre><code>out = {v: v == a for v in numpy.unique(a)}
</code></pre>
<p>)</p>
<p>Note that <code>numpy.unique</code> is faster than <code>set()</code> for large arrays, and by a large margin if there are only a few unique entries.</p>
<p>Anyhow, for most array sizes, the above is the fastest method yet:</p>
<p>10 different integers:
<a href="https://i.stack.imgur.com/KGZwW.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/KGZwW.png"/></a></p>
<p>100 different integers:
<a href="https://i.stack.imgur.com/iC3NX.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/iC3NX.png"/></a></p>
<p>Code:</p>
<pre><code>import numpy as np
from collections import defaultdict
import perfplot


def pp(a):
    index = np.argsort(a, kind='mergesort')
    as_ = a[index]
    jumps = np.r_[0, 1 + np.where(np.diff(as_) != 0)[0]]
    pp_out = {k: v for k, v in zip(as_[jumps], np.split(index, jumps[1:]))}
    return pp_out


def pp2(a):
    index = np.argsort(a)
    as_ = a[index]
    jumps = np.r_[0, 1 + np.where(np.diff(as_) != 0)[0]]
    pp_out = {k: np.sort(v)
              for k, v in zip(as_[jumps], np.split(index, jumps[1:]))}
    return pp_out


def Denziloe_JFFabre(a):
    df_out = {v: [i for i, x in enumerate(a) if x == v] for v in np.unique(a)}
    return df_out


def FCouzo(a):
    fc_out = defaultdict(list)
    for i, elem in enumerate(a):
        fc_out[elem].append(i)
    return fc_out


def KKSingh(a):
    kks_out = defaultdict(list)
    list(map(lambda x: kks_out[x[0]].append(x[1]), zip(a, range(len(a)))))
    return kks_out


def TMcDonaldJensen(a):
    mdj_out = defaultdict(list)
    for i, elem in enumerate(a):
        mdj_out[elem].append(i)
    return mdj_out


def RomanPerekhrest(a):
    rp_out = {}
    for k, m in enumerate(a):
        rp_out.setdefault(m, []).append(k)
    return rp_out


def SchloemerHist(a):
    np.histogram(a, bins=np.arange(min(a), max(a)+2))
    return


def SchloemerWhere(a):
    out = {v: np.where(v == a)[0] for v in np.unique(a)}
    return out


def SchloemerBooleanOnly(a):
    out = {v: v == a for v in np.unique(a)}
    return out


perfplot.show(
        setup=lambda n: np.random.randint(0, 100, n),
        kernels=[
            pp, pp2, Denziloe_JFFabre, FCouzo, KKSingh,
            TMcDonaldJensen, RomanPerekhrest, SchloemerHist, SchloemerWhere,
            SchloemerBooleanOnly
            ],
        n_range=[2**k for k in range(17)],
        xlabel='len(a)',
        logx=True,
        logy=True,
        )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For the fun of it, here's a solution using <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.histogram.html" rel="nofollow noreferrer"><code>numpy.histogram</code></a>:</p>
<pre><code>np.histogram(a, bins=np.arange(min(a), max(a)+2))
</code></pre>
<p>I thought it might perform well, but Paul's solution is still better:</p>
<p><a href="https://i.stack.imgur.com/7fCk6.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/7fCk6.png"/></a></p>
</div>
<span class="comment-copy">I don't think numpy has much in the way of creating dictionaries, pandas might but I think you just mean to say "optimized libraries welcome" yes?</span>
<span class="comment-copy">The best one here is Tadhg's, followed by Roman's which is 1.5 times slower but it is pretty good too (no difference virtually). Jean's is 40 times slower than Tadhg's answer. :)</span>
<span class="comment-copy">@frederick99 I think the difference between Jean's and mine would rely heavily on the length of the list as the orders of runtimes is quite different.  I perticularly notice Jean's solution works quite fast when there are only one or two unique elements.</span>
<span class="comment-copy">@TadhgMcDonald-Jensen I ran it on a list with a million elements :| Isn't that good enough?</span>
<span class="comment-copy">Nice! Will check it out -- tomorrow.</span>
<span class="comment-copy">To speed things up you want to loop over <code>'set(materials)'.</code></span>
<span class="comment-copy">oooh (tactical ?) downvoting now... I understand complexity is not that good but it does the job... just answer something better you'll get more upvotes.</span>
<span class="comment-copy">I was not me giving you the downvote. Your solution is good but adding <code>set</code> makes it better.</span>
<span class="comment-copy">@Elmex80s And I thank you for that! (I figured out it wasn't you: I followed your advice!) and even if it <i>was</i> you, I'm not a revengeful fellow. I never take it personal.</span>
<span class="comment-copy">the comprehension <code>{k: v for k, v in &lt;iter&gt;}</code> can be replaced by <code>dict(&lt;iter&gt;)</code> and using Cpython it'd run faster since the iteration would be handled purely in C instead of in python.</span>
<span class="comment-copy">good work with the benchmarks!</span>
<span class="comment-copy">yes, but it's a duplicate of Tadhg answer.</span>
