<div class="post-text" itemprop="text">
<p>I have a number of multidimensional <code>numpy.array</code>s with small values
that I need to add up with little numerical error. For <code>float</code>s, there is <a href="https://docs.python.org/3/library/math.html#math.fsum" rel="nofollow noreferrer"><code>math.fsum</code></a> (with its implementation <a href="https://github.com/python/cpython/blob/d267006f18592165ed97e0a9c2494d3bce25fc2b/Modules/mathmodule.c#L1087" rel="nofollow noreferrer">here</a>), which has always served me well. <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.sum.html" rel="nofollow noreferrer"><code>numpy.sum</code></a> isn't stable enough.</p>
<p>How can I get a stable summation for <code>numpy.array</code>s?</p>
<hr/>
<p><em>Background</em></p>
<p>This is for <a href="https://github.com/nschloe/quadpy" rel="nofollow noreferrer">the quadpy package</a>. The arrays of small values are the evaluations of a function at specific points of (many) intervals, times their weights. The sum of these is an approximation of the integral of said function over the intervals.</p>
</div>
<div class="post-text" itemprop="text">
<p>Alright then, I've implemented <a href="https://github.com/nschloe/accupy/" rel="nofollow noreferrer">accupy</a> which gives a few stable summation algorithms.</p>
<p>Here's a quick and dirty implementation of <a href="https://en.wikipedia.org/wiki/Kahan_summation_algorithm" rel="nofollow noreferrer">Kahan summation</a> for numpy arrays. Notice, however, that it is not not very accurate for ill-conditioned sums.</p>
<pre><code>def kahan_sum(a, axis=0):
    '''Kahan summation of the numpy array along an axis.
    '''
    s = numpy.zeros(a.shape[:axis] + a.shape[axis+1:])
    c = numpy.zeros(s.shape)
    for i in range(a.shape[axis]):
        # https://stackoverflow.com/a/42817610/353337
        y = a[(slice(None),) * axis + (i,)] - c
        t = s + y
        c = (t - s) - y
        s = t.copy()
    return s
</code></pre>
<p>It does the job, but it's slow because it's Python-looping over the <code>axis</code>-th dimension.</p>
</div>
<span class="comment-copy">Why wouldn't <code>numpy.sum</code> or <code>your_array.sum()</code> suit your needs?</span>
<span class="comment-copy">Thanks for the reply. <code>numpy.sum</code> isn't stable enough for me. I guess it's just adding the (small) values one after another, so in the end, when large and small number are added, information is lost.</span>
<span class="comment-copy">I believe <a href="https://github.com/numpy/numpy/pull/3685" rel="nofollow noreferrer"><code>numpy.sum</code> uses pairwise summation</a>, so it's better than a naive sum, but if you're looking for more than that, NumPy doesn't provide it. If your NumPy predates the pairwise summation change, updating may help.</span>
<span class="comment-copy">Looks like <a href="https://github.com/numpy/numpy/issues/2448" rel="nofollow noreferrer">this thread on GitHub</a> might be useful, although it says that NumPy doesn't implement any more accurate summation like <code>math.fsum</code>.</span>
