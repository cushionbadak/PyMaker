<div class="post-text" itemprop="text">
<p>I would like to make some graphs with a dataframe that I read in to python as a <code>.csv</code> file.  The dates are in the format <code>1-Jan</code> but when I try to convert the datetime using the following line:</p>
<pre><code>metdata['Date']=metdata['Date'].apply(lambda x: pd.to_datetime(str(x), format='%d-%MMM'))
</code></pre>
<p>It throws this error:</p>
<blockquote>
<p>ValueError: time data '1-Jan' does not match format '%d-%MMM' (match)</p>
</blockquote>
<p>I can't figure out why the data doesn't match the format. Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>pandas</code> uses the same string formatting as <code>datetime</code> (which uses the C's <code>strftime</code>). You can read about it more <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">here</a></p>
<p>Formatting directives don't have multiple letters after the <code>%</code>.  I think you want <code>%d-%b</code></p>
<pre><code>In [52]: datetime.datetime.strptime('1-Jan', '%d-%MMM')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-52-946e04d8e511&gt; in &lt;module&gt;()
----&gt; 1 datetime.datetime.strptime('1-Jan', '%d-%MMM')

C:\Users\colinc719\Miniconda2\lib\_strptime.pyc in _strptime(data_string, format)
    330     if not found:
    331         raise ValueError("time data %r does not match format %r" %
--&gt; 332                          (data_string, format))
    333     if len(data_string) != found.end():
    334         raise ValueError("unconverted data remains: %s" %

ValueError: time data '1-Jan' does not match format '%d-%MMM'

In [53]: datetime.datetime.strptime('1-Jan', '%d-%b')
Out[53]: datetime.datetime(1900, 1, 1, 0, 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>proper format for 3 letters month in pandas is <code>%b</code>, therefore</p>
<pre><code>metdata['Date']=metdata['Date'].apply(lambda x: pd.to_datetime(str(x), format='%d-%b'))
</code></pre>
<p>if you don't have the year, it will be added automatically as 1900</p>
</div>
<span class="comment-copy">This changed the error to:  ValueError: day is out of range for month  which I'm assuming is because the %d calls for a "zero-padded decimal number" according to the link you attached.  I guess I need to convert the dates into two-digit numbers?</span>
<span class="comment-copy">What is the string that causes it to fail?</span>
<span class="comment-copy">Ahhhh it was the leap day being in the incorrect year.  Very sharp, python.  Thanks for your help!</span>
<span class="comment-copy">It still doesn't seem to work</span>
