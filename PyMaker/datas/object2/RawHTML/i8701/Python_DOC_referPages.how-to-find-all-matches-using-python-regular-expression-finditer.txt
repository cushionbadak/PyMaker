<div class="post-text" itemprop="text">
<p>I am trying to find a pattern. I have written the below code:</p>
<pre><code>string = '000,001,100,001'
pattern = '(.*)00(.*),(.*)00(.*)'

for m in re.finditer(pattern, string):
    print(m.groups())
</code></pre>
<p>The code above returns ('000,001,1', '', '', '1') where as it misses the match with groups ('', '0', '', '1,100,001')</p>
<p>I am trying to workout if the characters before and after the '00' on consecutive lines are the same. The code i wrote matches '000,001,1<strong>00</strong>,<strong>00</strong>1'. How to match '<strong>00</strong>0,<strong>00</strong>1,100,001'.</p>
<p>How the obtain match groups for the later?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Comments</strong>: for the string '2295051,2238451,2235301,1950522,2238451,3530333'<br/>
  ... You see that the groups have the same number of digits before the occur which is 2 digits and after they occur which is 1 digit  </p>
</blockquote>
<pre><code>string = '2295051,2238451,2235301,1950522,2238451,3530333'  

_Step 1_  
pattern = '(\d+)'
Output: ('2295051',) ('2238451',) ('2235301',) ('1950522',) ('2238451',) ('3530333',)  

_Step 2_
pattern = '((\d\d)\d+)'  
Output: ('2295051', '22') ('2238451', '22') ('2235301', '22')  
        ('1950522', '19') ('2238451', '22') ('3530333', '35')  

_Step 3_
pattern = '((\d\d)\d+(\d))'
Output: ('2295051', '22', '1') ('2238451', '22', '1') ('2235301', '22', '1')  
('1950522', '19', '2') ('2238451', '22', '1') ('3530333', '35', '3')  
</code></pre>
<p>Read about the meaning of <code>'+'</code>  in the Docs <a href="https://docs.python.org/3/library/re.html#module-re" rel="nofollow noreferrer">re.html#module-re</a>.</p>
<blockquote>
<p><strong>Comment</strong>: ...what i don't understand is how it does it and how i can make use of it...  </p>
</blockquote>
<p>The <code>pattern = '((\d\d)\d+(\d))'</code> search for a substring, starting with 2 Digits <code>\d\d</code>, followed by any number of Digits, at least one, and one Digit <code>\d</code> at the End. This pattern is generalized, matches any substring, at least with len=4, of Digits.</p>
<hr/>
<p>Try this pattern:</p>
<pre><code>string = '000,001,100,001'
pattern = '((\d)00|00(\d))'

for m in re.finditer(pattern, string):
    print(m.groups())
</code></pre>
<p><strong>Output</strong>:</p>
<blockquote>
<p>('000', '0', None)<br/>
  ('001', None, '1')<br/>
  ('100', '1', None)<br/>
  ('001', None, '1')  </p>
</blockquote>
<p>The first item <code>000</code> have both, <strong>before</strong> and <strong>after</strong>.  </p>
<p><strong><em>Tested with Python:3.4.2 - re:2.2.1</em></strong><br/>
Come back and Flag your Question as answered if this is working for you or comment why not.</p>
</div>
<span class="comment-copy">That's because the Kleene star is greedy. If you use <code>.*?</code>, it is <i>non-greedy</i>.</span>
<span class="comment-copy">@WillemVanOnsem How to include greedy and non greedy results. what about the matches in-between greedy and non greedy?</span>
<span class="comment-copy">@WillemVanOnsem expressions  r"(.*?)00(.*),(.*?)00(.*)", r"(.*?)00(.*),(.*)00(.*)", r"(.*)00(.*),(.*)00(.*)", r"(.*?)00(.*),(.*?)00(.*)" all produce different matches. How to iterate them all.  Required output groups are the ones which have the same number of letters after them and before them which are  ('0', '', '0', '') and ('', '0', '', '0')</span>
<span class="comment-copy">for the string '2295051,2238451,2235301', I use the pattern '(.*?)9505(.*),(.*)3845(.*),(.*)3530(.*)' to get one match who's groups are ('22', '1', '22', '1', '22', '1'). You see that the groups have the same number of digits before the occur which is 2 digits and after they occur which is 1 digit.</span>
<span class="comment-copy">I see you code generates more matches though what i don't understand is how it does it and how i can make use of it.  While using the patten '(.*)9505(.*),(.*)3845(.*),(.*)3530(.*)' for the string '2295051,2238451,2235301,1950522,2238451,3530333' i get only one match ('2295051,2238451,2235301,1', '22', '22', '1', '', '333'). How to iterate between all matches including the greedy ones and non greedy ones (from Williams comment)</span>
