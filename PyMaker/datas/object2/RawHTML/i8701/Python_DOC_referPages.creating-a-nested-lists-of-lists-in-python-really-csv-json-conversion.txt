<div class="post-text" itemprop="text">
<p>I've just been pounding at this problem which should be easy -- I'm just very new to Python which is required in this case.</p>
<p>I'm readying in a .csv file and trying to created a nested structure so that json.dumps gives me a pretty nice nested .json file.</p>
<p>The result json is actually six levels deep but I thought if I could get the bottom two working the rest would be the same.  The input is working just great as I've ended up with job['<em>fieldname</em>'] for building the structure.  The problem is getting the result to nest. </p>
<p>Ultimately I want:</p>
<pre><code>"PAYLOAD": {
  "TEST": [
   {
     "JOB_ONE": {
       "details": {
         "customerInformation": {
           "lastName": "Chun",
           "projectName": "N Pacific Recovery",
           "firstName": "Wally",
           "secondaryPhoneNumber": ""
            },
         "description": "N Pacific Garbage Sweep",
         "productType": "Service Generation",
         "address": {
           "city": "Bristol",
           "zipCodePlusSix": "",
           "stateName": "",
           "zipCode": "53104",
           "line1": "12709 789441th Ave",
           "county": "",
           "stateCode": "WI",
           "usage": "NA",
           "zipCodePlusFour": "",
           "territory": "",
          }
       }
     }
   },
 {
   "JOB_TWO": {
     "details": {

   .... similar to JOB_ONE ....

       }
     }
   }
   }],
   "environment": "N. Pacific",
   "requestorName": "Waldo P Rossem",
   "requestorEmail": "waldo@ no where.com",
</code></pre>
<p>However, with the code below, which only deals with the "details section", I end up with a stack of all addresses, followed by all of the customer information. So, the loop is processing all the csv records and appending the addresses, and then looping csv records and appending the info.</p>
<pre><code>for job in csv.DictReader(csv_file):
  if not job['Cancelled']: 

# actually have no idea how to get these two to work    
    details['description']: job['DESCRIBE']     
    details['projectType']: job['ProjectType']


# the following cycle through the customerInformation and then
# appends the addresses.  So I end up with a large block of customer 
# records and then a second block of their addresses

    details['customerInformation'].append({
            'lastName': "job[Lastname]",
            'firstName': job['FirstName'],
            'projectName':"N Pacific Prototype",
        })

   details['address'].append({
            'city': job['City'],
            'zipCode': job['Zip'],
            'line1': job['Address'],
            'stateCode': job['State'],
            'market': job['Market']
        })
</code></pre>
<p>What I am trying to understand is how to fix this loop and get the description and project type to appear in the right place AND setup the data structure so that the bottom flags are also properly structure for the final json dump.</p>
<p>This is largely due to my lack of experience with Python but unfortunately, its a requirement -- otherwise, I could have had it done hours ago using <em>gawk</em>!  </p>
<p>Requested CSV follows:</p>
<p>Sure... took me a while to dummy it up as the above is an abbreviated snippet.</p>
<pre><code>JobNumber,FirstName,Lastname,secondaryPhoneNumber,Market,Address,City,State,Zip,requestorName,requestorEmail,environment
22056,Wally,Fruitvale,,N. Pacific,81 Stone Church Rd,Little Compton,RI,17007,Waldo P Rossem,waldo@ no where.com,N. Pacific
22057,William,Stevens,,Southwest,355 Vt Route 8a,Jacksonville,VT,18928,Waldo P Rossem,waldo@ no where.com,N. Pacific
22058,Wallace,Chen,,Northeast,1385 Jepson Rd,Stamford,VT,19403,Waldo P Rossem,waldo@ no where.com,N. 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're not far off.
You first need to initialise <code>details</code> as a <code>dict</code>:</p>
<pre><code>details = {}
</code></pre>
<p>Then add the elements you want:</p>
<pre><code>details['description'] = job['DESCRIBE']     
details['projectType'] = job['ProjectType']
</code></pre>
<p>Then for the nested ones:</p>
<pre><code>details['customerInformation'] = {
        'lastName': job['Lastname'],
        'firstName': job['FirstName'],
        'projectName':"N Pacific Prototype",
    }
</code></pre>
<p>For more details on how to use <code>dict</code>: <a href="https://docs.python.org/3/library/stdtypes.html?highlight=dict#dict" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html?highlight=dict#dict</a>.</p>
<p>Then you can get the <code>JSON</code> with <code>JSON.dumps(details)</code> (documentation here: <a href="https://docs.python.org/3/library/json.html?highlight=json#json.dumps" rel="nofollow noreferrer">https://docs.python.org/3/library/json.html?highlight=json#json.dumps</a>).</p>
<p>Or you can first gather all the details in a list, and then turn the list into a <code>JSON</code> string:</p>
<pre><code>all_details = []
for job in ...:
    (build details dict)
    all_details.append(details)

output = JSON.dumps(all_details)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create the <code>details</code> dict as a literal vs. create and <code>key</code> assignment:</p>
<pre><code>data = []
for job in csv.DictReader(csv_file):
    if job['Cancelled']:
        continue
    details = {
        'description': job['DESCRIBE'],
        'projectType': job['ProjectType'],
        'customerInformation' : {
            'lastName': job['Lastname'],
            'firstName': job['FirstName'],
            ...
        },
        ...
    }
    data.append(details)
json_str = json.dumps(data)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think all you need for your puzzle is to know a few basic things about dictionaries:</p>
<p>Initial assignment:</p>
<pre><code>my_dict = {
   "key1": "value1",
   "key2": "value2",
   ...
}
</code></pre>
<p>Writing key/value pairs to an already initialized dict:</p>
<pre><code>my_dict["key2"] = "new value"
</code></pre>
<p>Reading:</p>
<pre><code>my_dict["key2"]
prints&gt; "new value"
</code></pre>
<p>Looping keys:</p>
<pre><code>for key in my_dict:
   print(key)

prints&gt; "key1"
prints&gt; "key2"
</code></pre>
<p>Looping both key and value:</p>
<pre><code>for key, value in my_dict.items():
   ...
</code></pre>
<p>Looping values only:</p>
<pre><code>for value in my_dict.values():
   ...
</code></pre>
<p>If all you want is a JSON compatible dict, then you won't need much else than this, without me going into defaultdicts, tuple keys and so on - just know that it's worth reading up on that once you've figured out basic dicts, lists, tuples and sets.</p>
<p>Edit: One more thing: Even when new I think it's worth trying <a href="http://jupyter.org" rel="nofollow noreferrer">Jupyter notebook</a> to explore your ideas in Python. I find it to be much faster to try things out and get the results back immediately, since you don't have to switch between editor and console.</p>
</div>
<span class="comment-copy">can you please share the format of CSV</span>
<span class="comment-copy">Sure... took me a while to dummy it up as the above is an abbreviated snippet.</span>
<span class="comment-copy">did any of the answers here helped you!?</span>
<span class="comment-copy">Yes, I'm working through the process right now.  I'll also note that I am using jupyter notebooks so I get immediate feedback.</span>
<span class="comment-copy"><code>details</code> should be created new each loop, so wouldn't create it outside of the loop.</span>
<span class="comment-copy">good point! I corrected the answer.</span>
<span class="comment-copy">Terrific answer and it works.  I've ended up using the comment from AChampion as it seems a bit more direct.  However, I also appreciate the pointers to using dict as well.  I've gone from garbage to really close in a matter of a few minutes and I thank you.</span>
