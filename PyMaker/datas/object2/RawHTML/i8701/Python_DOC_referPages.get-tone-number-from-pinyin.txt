<div class="post-text" itemprop="text">
<p>Say I have a pinyin:</p>
<pre><code>gēge
</code></pre>
<p>How could I get the "tone number" of the accented character? 
eg,in this case, ē would be first tone, ideal output would be ge1ge. But really, first step is just how would I convert the tone into a number?</p>
<p>Example input / output:</p>
<pre><code>gēge
nǎinai
wàipó
</code></pre>
<p>BECOMES</p>
<pre><code>ge1ge
na3inai
wa4ipo2
</code></pre>
<p>I would like to do this ideally in python, but im flexible.</p>
<p>Thanks! :)</p>
</div>
<div class="post-text" itemprop="text">
<p>When expressed in normal form D (*) (decomposition), the four pinyin tone use the following combining (unicode) signs:</p>
<ul>
<li>COMBINING MACRON (<code>'\u0304'</code>) for tone 1</li>
<li>COMBINING ACUTE ACCENT (<code>'\u0301'</code>) for tone 2</li>
<li>COMBINING CARON (<code>'\u030c'</code>) for tone 3</li>
<li>COMBINING GRAVE ACCENT (<code>'\u0300'</code>) for tone 4</li>
</ul>
<p>That means that automatic processing in Python is almost trivial: you normalize your (unicode) string into its normal form D and replace the above combining characters with their digit value</p>
<p>Code could be:</p>
<pre><code>def to_tone_number(s):
    table = {0x304: ord('1'), 0x301: ord('2'), 0x30c: ord('3'),
         0x300: ord('4')}
    return unicodedata.normalize('NFD', s).translate(table)
</code></pre>
<p>You can then use:</p>
<pre><code>&gt;&gt;&gt; print(to_tone_number('''gēge
nǎinai
wàipó'''))
ge1ge
na3inai
wa4ipo2
</code></pre>
<p>in Python 3, or in Python 2:</p>
<pre><code>&gt;&gt;&gt; print(to_tone_number(u'''g\u0113ge
n\u01ceinai
w\xe0ip\xf3'''))
ge1ge
na3inai
wa4ipo2
</code></pre>
<hr/>
<p>(*) Refs:</p>
<ul>
<li><a href="https://docs.python.org/3/library/unicodedata.html" rel="nofollow noreferrer">module unicodedata</a> in Python standard library reference manual</li>
<li><a href="https://en.wikipedia.org/wiki/Pinyin#Using_tone_colors" rel="nofollow noreferrer">Pinyin</a> on wikipedia</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Use regular expressions. There is a useful regex command:                           </p>
<pre><code>re.findall() 
</code></pre>
<p>You could use it first to identify all accented characters, and afterwords replace them with the string replace method, </p>
<pre><code>str.replace('ē','e3') 
</code></pre>
<p>for example</p>
</div>
<span class="comment-copy">Ascii doesn't have accents!!</span>
<span class="comment-copy">Exactly what I was trying to get at :) Thank you so much!</span>
<span class="comment-copy">I wish it was that simple. There are many combinations of accented characters, and i cant be typing every single toned character to replace it with the normal version of it now can i?</span>
<span class="comment-copy">Yes you can, there isn't that many; only 20 or so</span>
<span class="comment-copy">There are 21 initials and 6 finals. Each with 4 tones thats 108 manual encodings @abccd</span>
<span class="comment-copy">There's no better way, you can download a module off pypi but that's what they do as well</span>
