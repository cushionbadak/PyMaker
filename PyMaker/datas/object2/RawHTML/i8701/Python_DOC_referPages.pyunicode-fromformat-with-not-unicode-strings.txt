<div class="post-text" itemprop="text">
<p>I try to create a representation function for a class and I want it to be python-2.x and python-3.x compatible. However I noticed that normal strings when passed to <a href="https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormat" rel="nofollow noreferrer"><code>PyUnicode_FromFormat</code></a> as <code>%U</code> will segfault. The only viable workaround that I found was to convert it to a unicode object myself with <a href="https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromObject" rel="nofollow noreferrer"><code>PyUnicode_FromObject</code></a> and then pass the result to the <code>PyUnicode_FromFormat</code>:</p>
<pre><code>/* key and value are arguments for the function. */
PyObject *repr;
if (PyUnicode_CheckExact(key)) {
    repr = PyUnicode_FromFormat("%U=%R", key, value);
} 
else {
    PyObject *tmp = PyUnicode_FromObject(key);
    if (tmp == NULL) {
        return NULL;
    }
    repr = PyUnicode_FromFormat("%U=%R", tmp, value);
    Py_DECREF(tmp);
}
</code></pre>
<p>The point is that I want the representation to be without the <code>""</code> (or <code>''</code>) that would be added if I use <code>%R</code> or <code>%S</code>. </p>
<p>I only recently found the issue and I'm using <code>PyUnicode_FromFormat("%U", something);</code> all over the place so the question I have is: Can this be simplified while keeping it Python 2.x and 3.x compatible?</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think a very simplified way of doing what you want exists. The best I can see is to eliminate the <code>if</code> statement by just using your <code>else</code> case and  thus always calling <code>PyUnicode_FromObject</code>:</p>
<pre><code>PyObject *tmp = PyUnicode_FromObject(key);
if (tmp == NULL) {
    return NULL;
}
repr = PyUnicode_FromFormat("%U=%R", tmp, value);
Py_DECREF(tmp);
</code></pre>
<p>If you look at <a href="https://github.com/python/cpython/blob/9e52c907b5511393ab7e44321e9521fe0967e34d/Objects/unicodeobject.c#L3046" rel="nofollow noreferrer">the implementation of <code>PyUnicode_FromObject</code></a> you'll see the first thing it does is <code>PyUnicode_CheckExact</code> and in that case it returns an <code>incref</code>ed version of the original object. Therefore the extra work done is pretty small (for the case where <code>key</code> is already unicode) and it should be slightly more efficient for the case where <code>key</code> isn't unicode since you avoid a branch.</p>
</div>
<span class="comment-copy">I don't have a good answer for this (and I don't think one exists) but I'd be tempted to simplify it to remove the if statements and just follow the <code>else</code> path every time. Calling <code>PyUnicode_FromObject</code> on something that's already a unicode object just does an <code>incref</code> and returns the object right back so it doesn't cost you a lot to always do it.</span>
<span class="comment-copy">@DavidW Not exactly as simple as I would like but it definetly makes it shorter and simpler. Would you mind adding it as an answer? I wouldn't accept it right away (still hoping for an even simpler way) but it's definetly helpful.</span>
<span class="comment-copy">Is there a problem with this code? If not (i.e. it works as expected), this question might belong on Code Review, not Stack Overflow.</span>
<span class="comment-copy">@QPaysTaxes CodeReview wants "real and working code" not artificial code. I'm actually asking about this one code-snippet and I don't want an overall review of the code; so this would be <a href="http://codereview.stackexchange.com/help/on-topic">off-topic on code-review</a>.</span>
<span class="comment-copy">(1) This code is <i>real</i>, because it's what would actually be used, and isn't pseudo- or truncated code. That you're intending to replace other code with it is irrelevant. (2) I don't see how it's broken; if there's a problem, please emphasize it. (Also, I've got 4k rep there; I'd like to think I know what's on-topic by now :) )</span>
