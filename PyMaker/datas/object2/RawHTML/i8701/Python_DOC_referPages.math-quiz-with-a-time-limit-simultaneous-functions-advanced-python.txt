<div class="post-text" itemprop="text">
<p>So I would like to run two programs, a timer and a math question. But always the input seems to be stopping the timer funtion or not even run at all. Is there any ways for it to get around that? 
I'll keep the example simple.</p>
<pre><code>import time

start_time = time.time()
timer=0
correct = answer
answer = input("9 + 9 = ") 
#technically a math question here
#so here until i enter the input prevents computer reading the code
while True:
    timer = time.time() - start_time
    if timer &gt; 3:
#3 seconds is the limit
    print('Wrong!')
quit()
</code></pre>
<p>So recap i would like the player to answer the question in less than 3 seconds.</p>
<p>after the 3 seconds the game will print wrong and exit</p>
<p>if the player answer within three seconds the timer would be 'terminated' or stopped before it triggers 'wrong' and quit</p>
<p>hope you understand, and really appreciate your help</p>
</div>
<div class="post-text" itemprop="text">
<p>On Windows you can use the <a href="https://docs.python.org/3/library/msvcrt.html" rel="nofollow noreferrer">msvcrt</a> module's <code>kbhit</code> and <code>getch</code> functions (I modernized this <a href="https://stackoverflow.com/a/3911560/6220679">code example</a> a little bit):</p>
<pre><code>import sys
import time
import msvcrt


def read_input(caption, timeout=5):
    start_time = time.time()
    print(caption)
    inpt = ''
    while True:
        if msvcrt.kbhit():  # Check if a key press is waiting.
            # Check which key was pressed and turn it into a unicode string.
            char = msvcrt.getche().decode(encoding='utf-8')
            # If enter was pressed, return the inpt.
            if char in ('\n', '\r'): # enter key
                return inpt
            # If another key was pressed, concatenate with previous chars.
            elif char &gt;= ' ': # Keys greater or equal to space key.
                inpt += char
        # If time is up, return the inpt.
        if time.time()-start_time &gt; timeout:
            print('\nTime is up.')
            return inpt

# and some examples of usage
ans = read_input('Please type a name', timeout=4)
print('The name is {}'.format(ans))
ans = read_input('Please enter a number', timeout=3)
print('The number is {}'.format(ans))
</code></pre>
<p>I'm not sure what exactly you have to do on other operating systems (research <a href="https://docs.python.org/3/library/termios.html" rel="nofollow noreferrer">termios</a>, tty, <a href="https://docs.python.org/3/library/select.html" rel="nofollow noreferrer">select</a>).</p>
<p>Another possibility would be the <a href="https://docs.python.org/3/howto/curses.html#starting-and-ending-a-curses-application" rel="nofollow noreferrer">curses</a> module which has a getch function as well and you can set it to <code>nodelay(1)</code> (non-blocking), but for Windows you first have to download curses from <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#curses" rel="nofollow noreferrer">Christopher Gohlke's website</a>. </p>
<pre><code>import time
import curses


def main(stdscr):
    curses.noecho()  # Now curses doesn't display the pressed key anymore.
    stdscr.nodelay(1)  # Makes the `getch` method non-blocking.
    stdscr.scrollok(True)  # When bottom of screen is reached scroll the window.
    # We use `addstr` instead of `print`.
    stdscr.addstr('Press "q" to exit...\n')
    # Tuples of question and answer.
    question_list = [('4 + 5 = ', '9'), ('7 - 4 = ', '3')]
    question_index = 0
    # Unpack the first question-answer tuple.
    question, correct_answer = question_list[question_index]
    stdscr.addstr(question)  # Display the question.

    answer = ''  # Here we store the current answer of the user.
    # A set of numbers to check if the user has entered a number.
    # We have to convert the number strings to ordinals, because
    # that's what `getch` returns.
    numbers = {ord(str(n)) for n in range(10)}

    start_time = time.time()  # Start the timer.

    while True:
        timer = time.time() - start_time

        inpt = stdscr.getch()  # Here we get the pressed key.
        if inpt == ord('q'):  # 'q' quits the game.
            break
        if inpt in numbers:
            answer += chr(inpt)
            stdscr.addstr(chr(inpt), curses.A_BOLD)
        if inpt in (ord('\n'), ord('\r')):  # Enter pressed.
            if answer == correct_answer:
                stdscr.addstr('\nCorrect\n', curses.A_BOLD)
            else:
                stdscr.addstr('\nWrong\n', curses.A_BOLD)

        if timer &gt; 3:
            stdscr.addstr('\nToo late. Next question.\n')

        if timer &gt; 3 or inpt in (ord('\n'), ord('\r')):
            # Time is up or enter was pressed; reset and show next question.
            answer = ''
            start_time = time.time()  # Reset the timer.
            question_index += 1
            # Keep question index in the correct range.
            question_index %= len(question_list)
            question, correct_answer = question_list[question_index]
            stdscr.addstr(question)

# We use wrapper to start the program.
# It handles exceptions and resets the terminal after the game.
curses.wrapper(main)
</code></pre>
</div>
<span class="comment-copy">Did you do any research at all? For example: <a href="http://stackoverflow.com/q/1335507/3001761">stackoverflow.com/q/1335507/3001761</a></span>
<span class="comment-copy">I'm not a python programmer but it would seem that this requires concurrency/multiple threads.</span>
<span class="comment-copy">Do you use Windows, Linux or another operating system?</span>
<span class="comment-copy">There is no input and even when i did put a name in it the code ignores the input and continues running</span>
<span class="comment-copy">Do you run it from the command-line or an IDE like IDLE or PyCharm? And are you using Windows? You have to use the Windows command-line.</span>
<span class="comment-copy">@Yo LEE let me know if it works. I'll add an example which uses curses later.</span>
<span class="comment-copy">I've just added the curses example. I hope you can understand it (better read the documentation). I also don't have much experience with it, so no guarantee ;). You could also use a GUI framework like tkinter or the pygame library, but you'll need to spend a little time to get used to them as well.</span>
