<div class="post-text" itemprop="text">
<p>i want to give multiple arguments to a functions from a string<br/>
for example if i have a function</p>
<pre><code>def myfunc(x, y, z):
       return x*y+z
</code></pre>
<p>How do i give it arguments from a string like '1, 2, 3',
I want something like this</p>
<pre><code>def myfunc(x, y, z):
       return x*y+z

string = '1, 2, 3'

myfunc(string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>'1, 2, 3'</code> is a string representation of a tuple of ints.  A simple way to handle that is to use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> which allows you to "<em>safely evaluate</em> an expression node or a string containing ... the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and <code>None</code>":</p>
<pre><code>import ast
s = '1, 2, 3'
tup_of_int = ast.literal_eval(s) # converts '1, 2, 3' to (1, 2, 3)
myfunc(*tup_of_int) # unpack items from tup_of_int to individual function args
</code></pre>
<p>The code can be written on one line like so:</p>
<pre><code>myfunc(*ast.literal_eval(s))
</code></pre>
<p>For more information about how the asterisk in <code>myfunc(*tup_of_int)</code> works see <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">Unpacking Argument Lists</a> from <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">The Python Tutorial</a>.</p>
<p><strong>Note:</strong>  Do not be tempted to <code>eval</code> in place of <code>ast.literal_eval</code>.  <code>eval</code> is <a href="https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow noreferrer">really dangerous because it cannot safely handle untrusted input</a>, so you should not get comfortable using it.   </p>
</div>
<div class="post-text" itemprop="text">
<p>Replace the last line with <code>myfunc(*map(int, string.split(',')))</code>.</p>
<p><code>string.split(',')</code> splits the string into a list of the three arguments.</p>
<p><code>map(int, string.split(','))</code> converts the elements of the list to integers.</p>
<p><code>myfunc(*map(int, string.split(',')))</code> <a href="https://stackoverflow.com/a/36908/3901060"><code>splats</code></a> the list so that the three elements of the list get passed as parameters.</p>
<p>This method relies on your input having the exact format as shown in your example string (<code>'1,2,3'</code> would not work). Steven's response is more robust so I recommend going with that one.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is the code for your problem:
First of all you have to split the string then proceed to next step:</p>
<pre><code>def myfunc(x, y, z):
   return x * y + z

a=raw_input()
x,y,z=map(int,a.split(","))
print myfunc(x,y,z)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One liner (<em>although parsing string arguments like this could introduce vulnerabilities in your code</em>).</p>
<pre><code>&gt;&gt;&gt; myfunc(*eval(string))  # myfunc((1, 2, 3))
5
</code></pre>
</div>
<span class="comment-copy">if a string is the argument you want to be passing to the function make the conversion inside the function rather than outside.</span>
<span class="comment-copy">this passes strings to the function. You have to map them to integers or floats.</span>
<span class="comment-copy">@Ev.Kounis Thanks, you're right.</span>
<span class="comment-copy"><code>int</code> will happily handle <code>' 2'</code> (with a preceding space) so you can make your code more robust by splitting on a comma only instead of space+comma.  This means that if the input becomes <code>'1,2, 3'</code> the code will still work.</span>
<span class="comment-copy">@StevenRumbalski Thank you, I didn't realize <code>int</code> could parse the spaces. I've updated my answer.</span>
<span class="comment-copy">Why recommend <code>eval</code> when <code>ast.literal_eval</code> exists?  It's like recommending someone use a handgun for a flyswatter.  Even with a disclaimer it's a bad idea.</span>
<span class="comment-copy">Hmm, thought my disclaimer made it clear that this could be a potentially dangerous implementation. I think your statement is certainly fair. But to not show potential approaches at all seems like a self-imposed limitation to understanding a problem truly. @StevenRumbalski</span>
