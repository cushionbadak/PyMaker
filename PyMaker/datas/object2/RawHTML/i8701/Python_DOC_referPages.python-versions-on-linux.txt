<div class="post-text" itemprop="text">
<p>Yesterday i reinstalled my Linux Mint duo similar issue I am facing right now.
I installed Python 3.6 with:</p>
<pre><code>apt-get install build-essential checkinstall libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev
cd /usr/src
wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz
tar xzf Python-3.6.0.tgz
cd Python-3.6.0
./configure
make altinstall
python3.6 -V
</code></pre>
<p>And then, there is Python 2.7.12 on Linux as default, which i can see by:</p>
<pre><code>python -V
Python 2.7.12
</code></pre>
<p>When i check:</p>
<pre><code>python3 -V
</code></pre>
<p>My output is:</p>
<pre><code>Python 3.5.2
</code></pre>
<p>However:</p>
<pre><code>python3.6 -V
Python 3.6.0
</code></pre>
<p>I also downloaded and installed Pycharm but the problem is, Project Interpreter can't find Python 3.6, i also can't add Python 3.6 manually in any way.</p>
<p>I've noticed that other Python versions PATHs in PyCharm looks like:</p>
<pre><code>/usr/bin/python2.7
/usr/bin/python3.5
</code></pre>
<p>But i can't find any Python 3.6 in there.</p>
<p>One more thing - When i checked:</p>
<pre><code>/usr/local/lib/python3.5/dist-packages
</code></pre>
<p>It's the only folder i can find there, it was empty but when i tried to do something with pip, it automatically saved there.</p>
<p>However:</p>
<pre><code>/usr/local/lib/python3.6
</code></pre>
<p>does not contain such a folder. As i remember, it was the folder where all modules were installed.</p>
<p>1) Is Python 3.6 installed correctly, if not, how to fix that?</p>
<p>2) How the hell Python 3.5.2 has been installed there and should i delete it?</p>
<p>3) How to make PyCharm working on Python 3.6</p>
<p>4) Python 3.5 will cause problems with installing modules, I had same issue before reinstall of my Linux. What's wrong here?</p>
</div>
<div class="post-text" itemprop="text">
<p>What is the output of the command:
$ update-alternatives --list python3</p>
<p>on your system?</p>
<p>Does it look like:</p>
<p>/usr/bin/python3.5</p>
<p>/usr/bin/python3.6</p>
<p>If so you can use the command:</p>
<p>$ sudo update-alternatives --config python3 </p>
<p>to choose which python3 version to run. However, be warned, some of your installed software may depend on version 3.5 and changing the default python3 could have side effects. You should be able to update to python3.6 for your default and then install the packages you need, switching back to 3.5 as the default when you want to.</p>
<p>However, you will constantly be swapping your defaults, and sooner or later you will probably forget and get into some kind of versioning conflict.</p>
<p>Depending on your specific needs for python3.6, you can use it selectively only when you need it. </p>
<p>Here are some examples...</p>
<p>1) When working at the command line, start your python session with 'python3.6' instead of 'python3' and you will be using 3.6 instead of 3.5.</p>
<p>2) When writing python executables, use the shebang line '#! /usr/bin/python3.6' instead of '#! /usr/bin/python3' to ensure you are using python 3.6</p>
<p>3) when running a python file at the command line use </p>
<p>'python3.6 file_name.py' </p>
<p>or </p>
<p>'python3.5 file_name.py' </p>
<p>as needed to call the specific version of python you need.</p>
<hr/>
<p>These are all cumbersome, but relatively safe. You will only be using 3.6 when you need it.</p>
<p>The best way to keep your system safe, support multiple versions of python, and not break any system dependencies on the 3.5 release, is to learn about virtual environments. These are environments that use their own specified version of python, and the specific packages for their environment.</p>
<p>Virtual environments are a little complicated at first, but once you get the hang of them it is nice to have a few separate projects, each with slightly different sets of dependencies, all in their own footprints and not stepping on each other.</p>
<p>Here are some tutorials:</p>
<p><a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/" rel="nofollow noreferrer">http://docs.python-guide.org/en/latest/dev/virtualenvs/</a></p>
<p><a href="https://realpython.com/python-virtual-environments-a-primer/" rel="nofollow noreferrer">https://realpython.com/python-virtual-environments-a-primer/</a></p>
<p><a href="https://docs.python.org/3/tutorial/venv.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/venv.html</a></p>
<p>There are plenty of tutorials on youtube as well.</p>
<p>Good luck and happy coding!</p>
</div>
<span class="comment-copy">You can find the install location of your Python 3.6 executable using <code>which python3.6</code> - and python 3.5 is probably part of the base installation</span>
<span class="comment-copy">Have you checked what's in <code>/usr/local/lib</code>? For example by doing <code>ls /usr/local/lib</code>?</span>
<span class="comment-copy">For 1), can you try to search if a folder python3.6 exists anywhere using <code>find / -type d -name"*python3.6*"</code> ?  For 2), it could be that Python 3.5.2 was installed by your package manager due to a dependency. For 3) and 4), you should be able to have multiple version of an interpreter on a system, as long as the they are in separate folders and that you have the correct environments set.</span>
<span class="comment-copy">The following variable may need to e set to your Python3.6 installation to allow your script to work properly:  <code>PYTHONHOME PYTHONPATH LDFLAGS LD_LIBRARY_PATH</code></span>
<span class="comment-copy">crap, i didn't think of which python3.6, found the folder and Pycharm seems to be working with Python 3.6 now, thanks However, there is still an issue with "dist packages", which i can find on python 3.5.2 but not in Python 3.6. I am sure this will cause some issue, previously i was installing modules with     --target but there were plenty of issues, i. e. with MySQL. Is there any way to correct this once and for all and force PIP to install stuff there?</span>
