<div class="post-text" itemprop="text">
<p>What is the difference between this implementation of auth key generator in PHP:</p>
<pre><code>&lt;?php
$password = "834ff7b651a6cb1b2f39c70bf43d3e78";
$timestamp = round(microtime(true) * 1000);
$hash = md5($password.$timestamp);
echo "\n Timestamp: ".$timestamp;
echo "\n Hash: ".$hash."\n";
?&gt;
</code></pre>
<p>and this one in python:</p>
<pre><code>import hashlib
import time
import ipdb
import math
def microtime(get_as_float = False) :
    if get_as_float:
        return time.time()
    else:
        return '%f %d' % math.modf(time.time())

password = "834ff7b651a6cb1b2f39c70bf43d3e78"
timestamp = round(microtime(get_as_float=True)*1000)
m = hashlib.md5()
m.update(password + str(timestamp))
hash = m.hexdigest()
print(str(int(timestamp)))
print(hash)
</code></pre>
<p>If the timestamp generation works in PHP in another way than my implementation in Python? </p>
<p>Because I check it during the auth on the service which uses this timestamp in pair with hash calculated from password and timestamp concatenated together and in case with PHP I can pass, but in case with Python I cannot.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using <strong>Python 2</strong>, note that <code>round()</code> returns a floating point value. When you <code>str()</code> it, it will be formatted like a float: </p>
<pre><code>&gt;&gt;&gt; str(round(time.time() * 1000))
'1.48965165075e+12'
</code></pre>
<p>(Python will start to print numbers in scientific notation when the value is ≥ 10<sup>11</sup> (year 1973), but even if it is &lt; 10<sup>11</sup> there will be an extra <code>.0</code> at the end. PHP will print in scientific notation when ≥ 10<sup>14</sup> (year 5138).)</p>
<p>Consider explicitly format instead:</p>
<pre><code>m.update(password)
m.update('%.0f' % timestamp)
</code></pre>
<p>Since you wrote <code>print(str(int(timestamp)))</code> probably it is just an oversight? You could also use <code>str(int(timestamp))</code> here </p>
<pre><code>m.update(password)
m.update(str(int(timestamp)))
</code></pre>
<p>but in Python 2 if timestamp is ≥ 2<sup>62</sup> (year 292278994) there will be an extra <code>L</code> at the end.</p>
</div>
<span class="comment-copy">Are you running the python code on linux/unix? Otherwise <a href="https://docs.python.org/3/library/time.html" rel="nofollow noreferrer"><code>time</code></a> will not be a unix timestamp value. Why are you running <code>int(timestamp)</code> in python? It would cut off any digits &lt; 1. Relevant e.g. for 0.8 which would be 0 or 1 whenever you use <code>int</code> or <code>round</code>.</span>
<span class="comment-copy">@HankyPanky <code>time</code> just gives you seconds while <code>microtime</code> gives you a higher resolution?</span>
<span class="comment-copy">I don't know what you mean by "password" here, but <a href="http://stackoverflow.com/questions/401656/secure-hash-and-salt-for-php-passwords">don't hash user's password</a> (In fact, don't use md5 at all unless it is for backward-compatibility. <a href="http://php.net/manual/en/function.hash.php" rel="nofollow noreferrer">PHP</a> and <a href="https://docs.python.org/2/library/hashlib.html" rel="nofollow noreferrer">Python</a> both support SHA-2.)</span>
<span class="comment-copy">@HankyPanky Maybe you want to read what you just wrote again? <code>microtime(true)</code> gives you something like <code>1489680955.2224</code>. Multiplied by 1000 and rounded, this makes perfect sense. (It’s being multiplicated, not divided)</span>
<span class="comment-copy">@kennytm You might want to change that link title because <i>“don’t hash user’s password”</i> seems like a very bad suggestion when you indeed should use a cryptographically secure hash function for storing a user’s password. (It’s just that md5 shouldn’t be used for that purpose anymore; but there are other use cases where md5 is fine—and OP’s use case could be one of those, we don’t know)</span>
