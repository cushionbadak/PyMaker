<div class="post-text" itemprop="text">
<p>I am using pyodbc to access a database and print the query results.</p>
<p>How do I use pyodbc to print the whole query result including the columns to a csv file? </p>
<p>CODE:</p>
<pre><code>import pyodbc

cnxn = pyodbc.connect(
    #DATA BASE NAME IS HERE, HID FOR PRIVACY  )


cursor  = cnxn.cursor()

cursor.execute(""" #COMMAND GOES HERE """)


row = cursor.fetchall() #FETCHES ALL ROWS

cnxn.commit() 
cnxn.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How do I use pyodbc to print the whole query result including the columns to a csv file?</p>
</blockquote>
<p>You don't use pyodbc to "print" anything, but you can use the <a href="https://docs.python.org/3/library/csv.html" rel="noreferrer">csv module</a> to dump the results of a pyodbc query to CSV.</p>
<p>As a minimal example, this works for me:</p>
<pre class="lang-python prettyprint-override"><code>import csv
import pyodbc
conn = pyodbc.connect("DSN=myDb")
crsr = conn.cursor()
# test data
sql = """\
SELECT 1 AS id, 'John Glenn' AS astronaut
UNION ALL
SELECT 2 AS id, 'Edwin "Buzz" Aldrin' AS astronaut
"""
rows = crsr.execute(sql)
with open(r'C:\Users\gord\Desktop\astro.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow([x[0] for x in crsr.description])  # column headers
    for row in rows:
        writer.writerow(row)
</code></pre>
<p>producing a CSV file containing</p>
<pre class="lang-none prettyprint-override"><code>id,astronaut
1,John Glenn
2,"Edwin ""Buzz"" Aldrin"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another method is to use the pandas module. Very useful when using tables. Pandas has lots of other useful data management features. </p>
<pre><code>import pandas as pd
import pyodbc

conn = pyodbc.connect("DSN=myDb")
crsr = conn.cursor()
crsr.execute(""" #COMMAND GOES HERE """)
rows = crsr.fetchall()
SQLdata = pd.DataFrame(columns=["COLUMN","DATA"]) #naming your columns is optional, but useful
SQLdata["COLUMN"] = [i[0] for i in rows]
SQLdata["DATA"] = [i[1] for i in rows]
SQLdata.to_csv("myCsv.csv")
</code></pre>
</div>
<span class="comment-copy">This is obviously subjective but I do this using pandas: <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_sql.html" rel="nofollow noreferrer">pandas.pydata.org/pandas-docs/stable/generated/â€¦</a></span>
<span class="comment-copy">Thanks. Makes sense, that I have to use the csv module.</span>
