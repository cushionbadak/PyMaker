<div class="post-text" itemprop="text">
<p>How do you deep reload a package without importing modules from any other outside packages?</p>
<p>For example, for reloading the following:</p>
<pre><code># example_pkg.py
import logging  # do not reload this stdlib package
import example_pkg.ex_mod  # reload this module
</code></pre>
<p>IPython's <a href="https://ipython.readthedocs.io/en/stable/api/generated/IPython.lib.deepreload.html" rel="nofollow noreferrer"><code>deepreload</code></a> module cannot specify a whitelist for imports and uses module level variables during reloads which makes it unreliable for threaded environments.</p>
<p>A question similar to this has been asked <a href="https://stackoverflow.com/questions/15506971/recursive-version-of-reload">before</a>, but it focused on discovering dependencies (as was <a href="https://stackoverflow.com/questions/15506971/recursive-version-of-reload#comment21958372_15506971">mentioned</a> in a comment) not exclusively within a single package.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using the <a href="https://docs.python.org/3/library/sys.html" rel="nofollow noreferrer"><code>sys</code></a> and <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer"><code>importlib</code></a> modules, a function can be written to remove the package and its modules from Python's import cache. This allows for the package to reload its child modules when it is re-imported.</p>
<pre><code>import sys
import importlib
from types import ModuleType

def deep_reload(m: ModuleType):
    name = m.__name__  # get the name that is used in sys.modules
    name_ext = name + '.'  # support finding sub modules or packages
    del m

    def compare(loaded: str):
        return (loaded == name) or loaded.startswith(name_ext)

    all_mods = tuple(sys.modules)  # prevent changing iterable while iterating over it
    sub_mods = filter(compare, all_mods):
    for pkg in sub_pkgs:
        del sys.modules[pkg]  # remove sub modules and packages from import cache

    return importlib.import_module(name)
</code></pre>
<p>This code can be extended with a <a href="https://docs.python.org/3/library/threading.html#threading.Lock" rel="nofollow noreferrer"><code>Lock</code></a> to make it thread-safe as well:</p>
<pre><code>from threading import Lock

sys_mod_lock = Lock()  # all accesses to sys.modules must be programmed to acquire this lock first
# this means do not use any builtin import mechanism such as the 'import' statement once the following function is being used
# instead use importlib's import_module function while sys_mod_lock is acquired

def tsafe_reload(m: ModuleType):
    with sys_mod_lock:
        return deep_reload(m)
</code></pre>
<p><strong>Note:</strong> these functions come with one of the caveats from the standard library's <a href="https://docs.python.org/3/library/importlib.html#importlib.reload" rel="nofollow noreferrer"><code>reload</code></a>. Any references elsewhere in the program leading to the old package will be maintained and will not be replaced automatically. For that, you can look at <a href="http://pythonhosted.org/globalsub/" rel="nofollow noreferrer"><code>globalsub</code></a>, which can replace all references to an object in the interpreter with a different object (usually for debugging purposes).</p>
</div>
