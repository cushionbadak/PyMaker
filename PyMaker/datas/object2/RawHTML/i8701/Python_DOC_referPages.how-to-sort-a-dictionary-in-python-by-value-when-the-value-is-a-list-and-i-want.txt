<div class="post-text" itemprop="text">
<p>is it possible to sort a python dictionary by value if the value is a list, and I want it to be sorted by the first value of that list. E.G:</p>
<pre><code>data = {
"Joe" : [1, "Joe", "password", "Joe@Email.com"], 
"Toby" : [2, "Toby", "password", "Toby@Email.com"], 
"John" : [4, "John", "password", "John@Email.com"], 
"Julie" : [3, "Julie", "password", "Julie@Email.com"]
}
</code></pre>
<p>I would like it to be like: Where 'i' is the key</p>
<pre><code>for i in range(len(data)):
    print("UserID: ", str(data[i][0]), ". Username: ", data[i][1])

&gt;&gt; UserID: 1. Username: Joe
&gt;&gt; UserID: 2. Username: Toby
&gt;&gt; UserID: 3. Username: Julie
&gt;&gt; UserID: 4. Username: John
</code></pre>
<p>Many thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot sort a dict in place, because Python dicts are unordered. You have at least 2 alternatives :</p>
<h1>Create a sorted list of tuples</h1>
<p>You can use <code>sorted</code> with a <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>key=</code></a> argument. In this case, it would be the first element of the dict value :</p>
<pre><code>sorted(data.items(), key= lambda x: x[1][0])
# [('Joe', [1, 'Joe', 'password', 'Joe@Email.com']), ('Toby', [2, 'Toby', 'password', 'Toby@Email.com']), ('Julie', [3, 'Julie', 'password', 'Julie@Email.com']), ('John', [4, 'John', 'password', 'John@Email.com'])]
</code></pre>
<p>It returns a sorted list of tuples, which you can use to iterate and print the result :</p>
<pre><code>data = {
    "Joe": [1, "Joe", "password", "Joe@Email.com"],
    "Toby": [2, "Toby", "password", "Toby@Email.com"],
    "John": [4, "John", "password", "John@Email.com"],
    "Julie": [3, "Julie", "password", "Julie@Email.com"]
}

for name, lst in sorted(data.items(), key=lambda x: x[1][0]):
    print("UserID : %d. Username : %s" % (lst[0], name))

# UserID : 1. Username : Joe
# UserID : 2. Username : Toby
# UserID : 3. Username : Julie
# UserID : 4. Username : John
</code></pre>
<h1>Create an OrderedDict</h1>
<p>If you want to sort <code>data</code> and keep the functionality of a <code>dict</code>, you can create an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a> :</p>
<pre><code>from collections import OrderedDict

data = {
    "Joe": [1, "Joe", "password", "Joe@Email.com"],
    "Toby": [2, "Toby", "password", "Toby@Email.com"],
    "John": [4, "John", "password", "John@Email.com"],
    "Julie": [3, "Julie", "password", "Julie@Email.com"]
}

data = OrderedDict(sorted(data.items(), key=lambda x: x[1][0]))
# OrderedDict([('Joe', [1, 'Joe', 'password', 'Joe@Email.com']), ('Toby', [2, 'Toby', 'password', 'Toby@Email.com']), ('Julie', [3, 'Julie', 'password', 'Julie@Email.com']), ('John', [4, 'John', 'password', 'John@Email.com'])])
</code></pre>
<p>Note : For both examples, <code>key=lambda x: x[1]</code> would also be enough.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use itemgetter, this should sort the entries by the list (you can sort lists of lists and it will by default sort by the first element). This will give back a list of tuples, with the first element being the key, which you can loop through and print.</p>
<pre><code>import operator

data = {
"Joe" : [1, "Joe", "password", "Joe@Email.com"], 
"Toby" : [2, "Toby", "password", "Toby@Email.com"], 
"John" : [4, "John", "password", "John@Email.com"], 
"Julie" : [3, "Julie", "password", "Julie@Email.com"]
}


sorted_data = sorted(data.items(), key=operator.itemgetter(1))

for entry in (sorted_data):
    print("UserID: " + str(entry[1][0]) + ". Username: " + entry[0])
</code></pre>
<p>Output:</p>
<pre><code>UserID: 1. Username: Joe
UserID: 2. Username: Toby
UserID: 3. Username: Julie
UserID: 4. Username: John
</code></pre>
<p>Note: The reason sorted_data is a list of tuples instead of a dictionary is that python dictionaries are inherently unordered. See answers to this for an explanation: <a href="https://stackoverflow.com/questions/526125/why-is-python-ordering-my-dictionary-like-so">Why is python ordering my dictionary like so?</a></p>
</div>
<span class="comment-copy">Dictionaries are unordered; they can't be sorted.</span>
<span class="comment-copy">Downvoters : Constructive criticism is welcome. I dare say both my suggestions are correct.</span>
<span class="comment-copy">I like your answer. As a minor siggestion, returning the list as the key to compare is enough, returning the first element of it is not needed, as iterable are compared item by item.</span>
<span class="comment-copy">Many thanks I will give this ago!</span>
<span class="comment-copy">There's no need to import operator in this case, which just hides the logic behind for casual python coders.</span>
<span class="comment-copy">Okay, I've rewritten it using the same logic but without using operator</span>
<span class="comment-copy">Why? At least I learned something with your first, correct and concise code. Now we basically have the same answer. You'll get my vote if you revert your edit.</span>
<span class="comment-copy">Haha okay, I've reverted - guess I should learn I can't please everyone :P</span>
<span class="comment-copy">Saying that there is no need does nto mean that is not correct. I would not select is as the accepted answer as I think the first is cleaner, but this offers an alternative solution.</span>
