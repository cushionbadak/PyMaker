<div class="post-text" itemprop="text">
<p>I wrote a push notification scheduler in python for research, which will handle sending notifications via NODE .js. It works beautifully on my Mac, no problems. I built a server elsewhere to handle the scheduler, since it's always on. The server runs Debian Wheezy, for reasons I'm not in control of. However, whenever I try to run the code, I get: </p>
<pre><code>File "scheduler.py", line 148, in send_notifications
    s.enter(5, 1, notification, kwargs={'notify': 'Welcome to the Study!'})
TypeError: enter() got an unexpected keyword argument 'kwargs'
</code></pre>
<p>Still works perfectly on my Mac. I've checked to make sure that all my imported libraries have been downloaded via pip3, but I just can't figure out what my problem is. I've checked out other people with this error on stackoverflow and various other sources, but I wasn't sure that they were having a similar problem to my problem, mostly a class call issue, and I don't think this is that. I've attached the code, although I'm not sure if that helps any. I mean, it's not the cleanest code in the world, but I'm more fluent in mobile dev than python. Any recommendations? </p>
<pre><code>import time #this need is obvious 
import datetime as dt
import sched
from datetime import datetime
from datetime import timedelta
from subprocess import call #needed to call terminal commands
#Don't forget to chmod +x this python application so that you can sudo out.

#this order of the notifications that will be run, in an array
listOfNotificationNames = ['weather', 'sched', 'thermo', 'manualKitchen', 'frontDoor', 'garage', 'window', 'solar', 'backDoor', 'garage', 'frontDoor', 
    'manualKitchen', 'solar', 'energyCom', 'alarm', 'weather', 'sched', 'solar', 'manualKitchen', 'thermo', 'frontDoor', 'garage', 'manualKitchen', 
    'autokitchen', 'backDoor', 'frontDoor', 'manualKitchen', 'garage', 'sensor', 'solar', 'window', 'energyCom', 'alarm', 'weather', 'sched', 'thermo', 
    'manualKitchen', 'frontDoor', 'garage', 'tvenergy', 'window', 'garage', 'backDoor', 'solar', 'frontDoor', 'manualKitchen', 'energyCom', 'alarm', 
    'weather', 'sched', 'solar', 'thermo', 'manualKitchen', 'frontDoor', 'manualKitchen', 'garage', 'backDoor', 'milk', 'garage', 'frontDoor', 'manualKitchen', 
    'autokitchen', 'energyCom', 'alarm', 'weather', 'solar', 'sched', 'thermo', 'manualKitchen', 'backDoor', 'garage', 'window', 'frontDoor', 'autokitchen', 
    'manualKitchen', 'frontDoor', 'solar', 'garage', 'energyCom', 'alarm']

#Dictionary of what the above short names connect to. Take short names, and connect them to full length notifications
listOfNotificationText = {'garage': 'Your garage door has opened', 'frontDoor': 'Your front door has opened', 'backDoor': 'Your back door has opened', 
    'energyCom': 'Your daily energy consumption is: 33.5 kWh', 'thermo': 'Your thermostat has been changed to 73 degrees', 'weather': 'The weather for the day is: Cloudy and cool',
    'solar': 'The solar cell battery status is 52%', 'alarm': 'Tomorrow’s alarm is set for 9am', 'sched': 'Today’s schedule includes: ', 
    'milk': 'Don’t forget to get milk on your way home today.', 'manualKitchen': 'A light in the kitchen has been turned on', 
    'sensor': 'The sensor above the door is not responding.  Please check on its status.', 
    'tvenergy': 'Your television utilizes 2 watts of energy when not in use.  It will be powered off when not in use from now on.',
    'window': 'The bedroom window has been opened to cool the room.'}

#test code, can be used to test the notification system
time1 = now+timedelta(seconds=30)
time2 = now+timedelta(seconds=60)
time3 = now+timedelta(seconds=90)
testList = [dt.datetime(now.year, now.month, now.day, time1.hour, time1.minute, time1.second), 
    dt.datetime(now.year, now.month, now.day, time2.hour, time2.minute, time2.second), 
    dt.datetime(now.year, now.month, now.day, time3.hour, time3.minute, time3.second)]

#empty list to be filled
listOfTimeDelays = [0, 0, 0]

#takes all the lists above, and figures out how long each of them are from when I started the study.
#This creates a giant list of delays from the day I hit start
def calculateMinutesIntoSeconds(testList, listOfTimeDelays):
    i = 0
    for member in testList:
        print(member)
        listOfTimeDelays[i] = ((member-dt.datetime(now.year, now.month, now.day, now.hour, now.minute, now.second)).total_seconds())
        print(listOfTimeDelays[i])
        i= i+1

# Note that you have to specify path to script
#This call runs the notification.

#Create a scheduler.
s = sched.scheduler(time.time, time.sleep)

#Takes a notification text and sends ends out the notification.
def notification(notify='failure to properly fill notification'):
    call(["node", "app.js", notify, "send this data"])

#test code. Mostly ignore this
def print_time(a='default'):
    print("From print_time", time.time(), a)


def send_notifications():
    #calculate all of the many times delays
    calculateMinutesIntoSeconds(testList, listOfTimeDelays)
    # calculateMinutesIntoSeconds(listOfTimesDay1, listOfTimeDelays)
    # calculateMinutesIntoSeconds(listOfTimesDay2, listOfTimeDelays)
    # calculateMinutesIntoSeconds(listOfTimesDay3, listOfTimeDelays)
    # calculateMinutesIntoSeconds(listOfTimesDay4, listOfTimeDelays)
    # calculateMinutesIntoSeconds(listOfTimesDay5, listOfTimeDelays)

    print("Time marker for beginning of study: ", time.time())
    #counter needed for calls
    i = 0
    #Just notify people that the study has started.
    s.enter(5, 1, notification, kwargs={'notify': 'Welcome to the Study!'})
    #This for loop fills the scheduler with every notification that needs to be sent.
    for member in listOfTimeDelays:
        #takes one of the time delays, a priority (I just made them all 1), and then sends the right notification
        s.enter(member, 1, notification, kwargs={'notify': listOfNotificationText[listOfNotificationNames[i]]})
        #Incriments the counter to make sure you get the next notification
        i = i+1
    #runs the scheduler
    s.run()
    #Marks the end of the study
    print("Time marker for end of study: ",time.time())

#Calls the above method
send_notifications()
</code></pre>
<p>UPDATE:</p>
<p>Hmm, on further inspection, it looks like the Wheezy system defaults 3.2 and won't accept a request for anything higher than that. Looks like it accepts "argument" but as Klaus suggested, argument also needs notify to be in the same area as the sent notification.</p>
<p>So now it looks like</p>
<pre><code>s.enter(5, 1, notification, argument={'notify: Welcome to the Study!'})
    #This for loop fills the scheduler with every notification that needs to be sent.
    for member in listOfTimeDelays:
        notification = 'notify: ' + listOfNotificationText[listOfNotificationNames[i]]
        #takes one of the time delays, a priority (I just made them all 1), and then sends the right notification
        s.enter(member, 1, notification, argument={notification)
        #Incriments the counter to make sure you get the next notification
        i = i+1
</code></pre>
<p>Thanks for the assistance with this. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>sched.Scheduler</code> only accepts a <code>kwargs</code> argument <a href="https://docs.python.org/3/library/sched.html#sched.scheduler.enterabs" rel="nofollow noreferrer">from Python 3.3 onwards</a>. I guess you are running an older version on your Debian machine.</p>
</div>
<span class="comment-copy">Are you sure you are using the same version of python in your Mac and in the server?</span>
<span class="comment-copy">I guess you are using the <code>**kwargs</code> wrongly. It catches all "left over" named arguments. Instead of <code>kwargs</code>  give <code>notify=...</code> directly.</span>
<span class="comment-copy">Hmm, on further inspection, it looks like the Wheezy system defaults 3.2 and won't accept a request for anything more. Look like it accepts "argument" but as Klaus suggested, it also needs notify to be in the same area as the ...</span>
