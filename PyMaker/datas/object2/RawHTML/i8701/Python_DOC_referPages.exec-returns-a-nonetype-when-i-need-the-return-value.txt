<div class="post-text" itemprop="text">
<p>I asked a question earlier, but ran into a second problem.</p>
<p>I am writing a program that reads in a text file, and executes all code within the file. This is for class, and we have to use <code>exec()</code> </p>
<p>I get this error upon running the code, and countless searching has not led me to a solution.</p>
<pre><code>Traceback (most recent call last):
  File "doxecute.py", line 28, in &lt;module&gt;
    replace_code(statements, contents)
  File "doxecute.py", line 17, in replace_code
    contents = contents.replace("{%" + statement + "%}", statement)
TypeError: Can't convert 'NoneType' object to str implicitly
</code></pre>
<p>Code is</p>
<pre><code>import sys
import re



def sortecute(data): 
    funcs = re.findall(r'{%(.*?)%}',data,re.DOTALL)#find executable statements
    return funcs

def replace_code(statements, contents):
    for statement in statements:
        if not statement[5:].startswith("print("):
            exec(statement[5:]) #execute code after the (letter)
            contents = contents.replace("{%" + statement + "%}", "")
        else:
            statement = exec(statement[5:])#error is here
            contents = contents.replace("{%" + statement + "%}", statement)

    print(contents)

f = open(sys.argv[1],"r")
contents = f.read()
f.close()

statements = sortecute(contents) #get data from file
statements  = sorted(statements) #sorts by letter

replace_code(statements, contents)
</code></pre>
<p>this is the file I read in.</p>
<pre><code>The number {% (c) print(x) %} is a random number between 1 and 6
inclusive. If we multiply it by 2, we get {% (d) print(2*x) %}.

What's interesting is that the statements may appear out of order in the
document. {% (a) import random %} Thus I might generate the random
number in a location in the document well after referencing it.
{% (b) x = random.randint(1,6) %}
</code></pre>
<p>I can not find out how to get the value of the statement for exec. Can someone explain to me how to use this properly in the way listed below</p>
<pre><code>You will need to use the exec function in Python. To get the output back, you will need to redirect output to your own stream. Your program should accept a filename as a command-line argument to operate on [8]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>exec</code> will always return <code>None</code>. From the <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p><h3>exec(<em>object[, globals[, locals]]</em>)</h3> This function supports dynamic
  execution of Python code. object must be either a string or a code
  object. If it is a string, the string is parsed as a suite of Python
  statements which is then executed (unless a syntax error occurs). [1]
  If it is a code object, it is simply executed. In all cases, the code
  that’s executed is expected to be valid as file input (see the section
  “File input” in the Reference Manual). Be aware that the <code>return</code> and
  <code>yield</code> statements may not be used outside of function definitions even
  within the context of code passed to the <code>exec()</code> function. <strong>The return
  value is <code>None</code></strong>.</p>
</blockquote>
<p>This is a rather strange request. But you <em>can</em> capture the output like this:</p>
<pre><code>&gt;&gt;&gt; s = """The number {% (c) print(x) %} is a random number between 1 and 6
... inclusive. If we multiply it by 2, we get {% (d) print(2*x) %}.
...
... What's interesting is that the statements may appear out of order in the
... document. {% (a) import random %} Thus I might generate the random
... number in a location in the document well after referencing it.
... {% (b) x = random.randint(1,6) %}"""
&gt;&gt;&gt; import re
&gt;&gt;&gt; stmts = re.findall(r'{%\s*\((\w*)\)\s*(.*)%}',s)
&gt;&gt;&gt; stmts
[('c', 'print(x) '), ('d', 'print(2*x) '), ('a', 'import random '), ('b', 'x = random.randint(1,6) ')]
</code></pre>
<p>Now, you have to redirect output to some stream which you can manipulate later:</p>
<pre><code>&gt;&gt;&gt; import io
&gt;&gt;&gt; import sys
&gt;&gt;&gt; stream = io.StringIO()
&gt;&gt;&gt; stdout = sys.stdout # this keeps stdout so we can set it back
&gt;&gt;&gt; sys.stdout = stream
&gt;&gt;&gt; for _, statement in sorted(stmts):
...     exec(statement)
...
&gt;&gt;&gt; sys.stdout = stdout # remember to reset stdout!
</code></pre>
<p>And now, you can get the values that were printed:</p>
<pre><code>&gt;&gt;&gt; stream.getvalue()
'5\n10\n'
&gt;&gt;&gt; stream.getvalue().split()
['5', '10']
</code></pre>
<p>Although, I think an easier way is to pass a namespace to the dict:</p>
<pre><code>&gt;&gt;&gt; namespace = {}
&gt;&gt;&gt; for _, statement in sorted(stmts):
...     exec(statement, namespace)
...
5
10
&gt;&gt;&gt; namespace.keys()
dict_keys(['__builtins__', 'random', 'x'])
</code></pre>
<p>The namespace will get loaded with the normal <code>__builtins__</code> unless you provide one yourself. So to get every name created in your executed code, you can find the difference between the <code>namspace.keys</code> <code>dictview</code> and a set contiaining the string <code>"__builtins__"</code></p>
<pre><code>&gt;&gt;&gt; namespace.keys()
dict_keys(['__builtins__', 'random', 'x'])
&gt;&gt;&gt; vals = namespace.keys() - {'__builtins__'}
&gt;&gt;&gt; vals
{'random', 'x'}
&gt;&gt;&gt; for val in vals:
...    print(namespace[val])
...
&lt;module 'random' from '/Users/juan/anaconda3/lib/python3.5/random.py'&gt;
5
&gt;&gt;&gt;
</code></pre>
<p>Although, if you are on python 3.4 &gt;= it's a lot easier to redirect stdout to some stream:</p>
<pre><code>&gt;&gt;&gt; import contextlib
&gt;&gt;&gt; stream = io.StringIO()
&gt;&gt;&gt; with contextlib.redirect_stdout(stream):
...     for _, statement in stmts:
...         exec(statement)
...
&gt;&gt;&gt; stream.getvalue()
'5\n10\n'
&gt;&gt;&gt; stream.getvalue().split()
['5', '10']
</code></pre>
</div>
<span class="comment-copy"><code>print()</code> function doesn't return anything.</span>
<span class="comment-copy">what do you mean? I was using it for debugging. @AshwiniChaudhary</span>
<span class="comment-copy"><code>exec</code> always returns <code>None</code> in Python 3. In Python 2, <code>exec</code> is a statement, so it doesn't really return anything.</span>
<span class="comment-copy">I've come to this conclusion, do you know of a way I can get the value from the executed statement? It's explicitly required by my professor</span>
<span class="comment-copy">What exactly does it say? You cannot, AFAIK.</span>
<span class="comment-copy">I went up to copy what it says from the question, and realized I forgot to put it. I am new to python so I don't fully understand the meaning of this <code>You will need to use the exec function in Python. To get the output back, you will need to redirect output to your own stream. Your program should accept a filename as a command-line argument to operate on [8]</code></span>
<span class="comment-copy">@sbowde4 OK, I think I know what you want. This is a very strange assignment. You should try to understand what I've done here...</span>
<span class="comment-copy">Thank you, I'm reading through this and working on understanding it. All of our assignments with this professor are strange and usually complex, even if we just started learning the language.</span>
