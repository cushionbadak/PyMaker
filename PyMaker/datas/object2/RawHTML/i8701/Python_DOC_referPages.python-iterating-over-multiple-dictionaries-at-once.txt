<div class="post-text" itemprop="text">
<p>I know <a href="https://stackoverflow.com/questions/20736709/how-to-iterate-over-two-dictionaries-at-once-and-get-a-result-using-values-and-k?answertab=active#tab-top">from this answer</a> that it is possible to iterate over two different dictionaries at once:</p>
<pre><code>d1 = {'a':5, 'b':6, 'c': 3}
d2 = {'a':6, 'b':7, 'c': 4}
for (k1,v1), (k2,v2) in zip(d1.items(), d2.items()):
    print k1, v1
    print k2, v2
</code></pre>
<p>but how can this be efficiently extended to a list with, say, 20 different dictionaries which happen to have the same keys?</p>
<pre><code>mylist=[d1, d2, d3, ..., d20]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>mylist = [d1, d2, d3, ..., d20]
keys = mylist[0].keys()  # they must ALL have the same keys, mind....

for k in keys:
    for d in mylist:
        print k, d[k]
</code></pre>
<p>The direct translation would be something like:</p>
<pre><code>for ... in zip(*map(dict.items, mylist)):
</code></pre>
<p>but what do you put in the ellipsis? You'd have to either name all those things, or have one big tuple-of-tuples that is difficult to operate on. I guess alternately you could do:</p>
<pre><code>for big_tuple in zip(*map(dict.items, mylist)):
    for kv in big_tuple:
        k, v = kv
        print k, v
</code></pre>
<p>but that's longer and harder to handle than just storing the list of keys once and addressing each dictionary separately.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer">itertools.zip_longest()</a></span>
