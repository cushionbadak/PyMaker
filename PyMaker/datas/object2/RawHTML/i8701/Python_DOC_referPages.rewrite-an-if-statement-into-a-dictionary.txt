<div class="post-text" itemprop="text">
<p>So I currently wrote an if/elif statement but I can't seem to get how to rewrite into a dictionary.</p>
<p>I have this currently.</p>
<pre><code>def determineRank(years):
    if years == 1:
        return "Freshman"
    elif years == 2:
        return "Sophmore"
    elif years == 3:
        return "Junior"
    else:
        return "Senior"
</code></pre>
<p>I currently have:</p>
<pre><code>dYear = {"Freshman":1, "Sophmore":2, "Junior":3, "Senior":4}
</code></pre>
<p>but I'm not exactly sure where to go from here.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your function body would look like this:</p>
<pre><code>rank = {
  1: "Freshman",
  2: "Sophomore",
  3: "Junior",
  4: "Senior"
}
return rank[years]
</code></pre>
<p>Note that this does not check the input for errors; if you feed it a 0 or 5, you'll get an access error.  I'll leave the checking as an exercise for the student.  :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>Your dictionary is backwards, and it should be a list or tuple.</p>
<pre><code>def determineRank(years):
    return [None, 'Freshman', 'Sophomore', 'Junior', 'Senior'][years]
</code></pre>
<p>You can avoid having to create a new list or tuple on each call by binding it on definition as a default argument:</p>
<pre><code>def determineRank(years, ranks=(None, 'Freshman', 'Sophomore', 'Junior', 'Senior')):
    return ranks[years]
</code></pre>
<p>You can avoid the extraneous <code>None</code> by using modulo arithmetic:</p>
<pre><code>def determineRank(years, ranks=('Freshman', 'Sophomore', 'Junior', 'Senior')):
    return ranks[years%len(ranks)]
</code></pre>
<p>Note that your original code handles bad input more gracefully (but still incorrectly) by returning <code>'Senior'</code> for the 4th year <em>and all other inputs</em>, while the snippets above have various behaviors for incorrect inputs (like <code>20</code> or <code>'hello'</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <code>defaultdict</code>.</p>
<pre><code>In [1]: from collections import defaultdict

In [2]: student = defaultdict(lambda: 'Senior')

In [3]: for k, v in ((1, 'Freshman'), (2, 'Sophmore'), (3, 'Junior')):
   ...:     student[k] = v
   ...:     

In [4]: student[1]
Out[4]: 'Freshman'

In [5]: student[2]
Out[5]: 'Sophmore'

In [6]: student[3]
Out[6]: 'Junior'

In [7]: student[4]
Out[7]: 'Senior'

In [8]: student[9]
Out[8]: 'Senior'
</code></pre>
</div>
<span class="comment-copy"><code>dict_year = {1: 'Freshman', 2: 'Sophmore', 3: 'Junoir', 4: 'Senior'}</code> and you can do <code>dict_year.get(1)</code> to get <code>Freshman</code></span>
<span class="comment-copy">What are your attempts? You should show them in your question so that people can give specific guidance on why it didn't work.</span>
<span class="comment-copy">Welcome to <a href="https://stackoverflow.com">Stack Overflow</a>. Please review <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and, as @roganjosh mentioned, show us what you've tried.</span>
<span class="comment-copy">Don't post as a comment. Edit it into your question.</span>
<span class="comment-copy">This smells like an <a href="http://xyproblem.info/" rel="nofollow noreferrer">XY Problem</a> to me. Have you considered using <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer"><code>enum</code></a>?</span>
