<div class="post-text" itemprop="text">
<p>I'm trying to make the same list two different ways (just for practice)  </p>
<p>INPUT: list of ints<br/>
OUTPUT: list of strings</p>
<p>1st way: replacing ints with 'even' or 'odd' depending on whether the   elements in example list are even or odd.</p>
<p>2nd way: use map to do the same</p>
<pre><code>Example:
&gt;&gt;&gt; even_odd([6, 4, 1, 3, 8, 5])
['even', 'even', 'odd', 'odd', 'even', 'odd']
</code></pre>
<p>I know it's possible, but I keep running into either SyntaxError or TypeError (generator and int when attempting % division on items in list)</p>
<p>Can someone help me out?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def even_odd(L):
  return ['even' if x % 2 == 0 else 'odd' for x in L]
</code></pre>
<p>Using this great <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">tutorial</a> from <a href="https://docs.python.org/3/" rel="nofollow noreferrer">pythons official documentation</a> you can figure out how to convert the above to a map function:</p>
<pre><code>def even_odd2(L):
  return list(map(lambda x: 'even' if x % 2 == 0 else 'odd', L))
</code></pre>
<p><strong>Example Usage:</strong> </p>
<pre><code>print(even_odd([6, 4, 1, 3, 8, 5]))
print(even_odd2([6, 4, 1, 3, 8, 5]))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>['even', 'even', 'odd', 'odd', 'even', 'odd']
['even', 'even', 'odd', 'odd', 'even', 'odd']
</code></pre>
<p>Try it <a href="https://repl.it/G2tQ/1" rel="nofollow noreferrer">here!</a></p>
</div>
<span class="comment-copy">Show your code.</span>
<span class="comment-copy">Yeah, how are we supposed to explain what's wrong with <code>even_odd</code> if you don't show us how you coded it?</span>
<span class="comment-copy"><code>return ["odd" if i%2 else "even" for i in l]</code> will cut it. I would avoid <code>map</code> for that one, since you'd need a lambda.</span>
<span class="comment-copy">Show your code so we can see where your mistake is being made.</span>
<span class="comment-copy">@shash678 it worked perfectly. I think it was adding <code>list</code> to the front that saved it from being the &lt;generator&gt; type.</span>
