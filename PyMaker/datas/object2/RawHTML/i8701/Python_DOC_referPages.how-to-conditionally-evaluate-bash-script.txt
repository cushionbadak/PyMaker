<div class="post-text" itemprop="text">
<p>To view the installed libraries on an environment I run this code within a Jupyter Python notebook cell : </p>
<pre><code>%%bash
pip freeze
</code></pre>
<p>This works, but how to conditionally execute this code ?</p>
<p>This is my attempt : </p>
<pre><code>from __future__ import print_function
from ipywidgets import interact, interactive, fixed, interact_manual
import ipywidgets as widgets

def f(x1):
    if(x1 == True):
        f2()
    return x1

interact(f , x1 = False)


def f2():
    %%bash 
    pip freeze
</code></pre>
<p>But evaluating the cell throws error : </p>
<pre><code>  File "&lt;ipython-input-186-e8a8ec97ab2d&gt;", line 15
    pip freeze
             ^
SyntaxError: invalid syntax
</code></pre>
<p>To generate the checkbox I'm using ipywidgets : <a href="https://github.com/ipython/ipywidgets" rel="nofollow noreferrer">https://github.com/ipython/ipywidgets</a></p>
<p>Update : 
Running <code>pip freeze</code> within <code>check_call</code> returns 0 results : 
<a href="https://i.stack.imgur.com/Cf9TP.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/Cf9TP.png"/></a></p>
<p>Running</p>
<pre><code>    %%bash 
    pip freeze
</code></pre>
<p>Returns installed libraries so 0 is not correct.</p>
<p>Is <code>subprocess.check_call("pip freeze", shell=True)</code> correct ?</p>
<p>Update 2 : </p>
<p>This works : </p>
<pre><code>from __future__ import print_function
from ipywidgets import interact, interactive, fixed, interact_manual
import ipywidgets as widgets
import subprocess

def f(View):
    if(View == True):
        f2()

interact(f , View = False)


def f2():
    print(subprocess.check_output(['pip', 'freeze']))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can just use the standard Python way:</p>
<pre><code>import subprocess
print(subprocess.check_output(['pip', 'freeze']))
</code></pre>
<p>Then your function will work in any Python environment.</p>
</div>
<div class="post-text" itemprop="text">
<p>The short explanation is that the notebook has interactive commands which are handled by the notebook itself, before the Python interpreter even sees them.  <code>%%bash</code> is an example of such a command; you cannot put this in Python code, because it's not Python.</p>
<p>Using <code>bash</code> doesn't actually add anything here <em>per se;</em> using the shell offers many interactive benefits, and of course, in an interactive notebook, offering the user access to the shell is a powerful mechanism for allowing users to execute external processes; but in this particular case, with noninteractive execution, there are no actual benefits from putting the shell between yourself and <code>pip</code>, so you might simply want</p>
<pre><code> import subprocess
 if some_condition:
     p = subprocess.run(['pip', 'freeze'],
         stdout=subprocess.PIPE, universal_newlines=True)
</code></pre>
<p>(Notice the absence of <code>shell=True</code> because we don't need or want the shell here.)</p>
<p>If you want the captured exit code or the output from <code>pip freeze</code> they are available as attributes of the returned object <code>p</code>.  See the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run</code> documentation</a> for details.  Briefly, <code>p.returncode</code> will be 0 if the command succeeded, and the output will be in <code>p.stdout</code>.</p>
<p>Older versions of Python had a diverse collection of special-purpose wrappers around <code>subprocess.Popen</code> like <code>check_call</code>, <code>check_output</code>, etc. but these have all been subsumed by <code>subprocess.run</code> in recent versions.  If you need to support Python versions before 3.5, the legacy functions are still available, but they should arguably be avoided in new code.</p>
</div>
<span class="comment-copy">please see question update</span>
<span class="comment-copy">@blue-sky The result code from <code>check_call</code> is zero when the command succeeded, so it's entirely correct (but apparently not what you expect; but then what <i>do</i> you expect?)</span>
<span class="comment-copy">Though you want to avoid the unnecessary and pesky <code>shell=True</code>; see <a href="http://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess" title="actual meaning of shell true in subprocess">stackoverflow.com/questions/3172470/â€¦</a></span>
<span class="comment-copy">@blue-sky: Try the updated version--with explicit printing.</span>
