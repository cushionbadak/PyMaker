<div class="post-text" itemprop="text">
<p>We have 2 independent programs called 'a.py' and 'b.py'.We need to run both of them in two seperate threads from another program called 'c.py'. Is this possible? If then, How it can be implemented?</p>
</div>
<div class="post-text" itemprop="text">
<p>In short, you only need to wrap the code of your files in a function (e.g <code>main()</code>) and then use <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer"><code>multiprocessing</code></a> or <a href="https://docs.python.org/3/library/threading.html#module-threading" rel="nofollow noreferrer"><code>threading</code></a> modules to execute them concurrently.</p>
<p>Let's say your files are in this format:</p>
<pre><code># a.py

def main():
    for i in xrange(10000):
        print 'A says: %d' % (i)
</code></pre>
<p>And:</p>
<pre><code># b.py

def main():
    for i in xrange(10000):
        print 'B says: %d' % (i)
</code></pre>
<p>Then you can execute these two files in parallel, in the following fashion:</p>
<pre><code># parallel.py
from multiprocessing import Process
import imp

if __name__ == '__main__':
    code_a = imp.load_source('code_a', 'a.py')
    code_b = imp.load_source('code_b', 'b.py')    

    p1 = Process(target=code_a.main)
    p1.start()

    p2 = Process(target=code_b.main)
    p2.start()

    p1.join()
    p2.join()
</code></pre>
<p>You'll get a result like this:</p>
<blockquote>
<p>...<br/>
  A says: 862<br/>
  A says: 865<br/>
  A says: 866<br/>
<strong>B says: 222</strong><br/>
<strong>B says: 223</strong><br/>
<strong>B says: 224</strong><br/>
  A says: 867<br/>
  A says: 868<br/>
  A says: 869<br/>
  ...</p>
</blockquote>
</div>
