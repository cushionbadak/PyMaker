<div class="post-text" itemprop="text">
<p>This import works fine, but feels dirty in a few ways. Mainly that it uses a specific number in the slice* to get the parent path, and that it annoys the flake8 linter.</p>
<pre><code>import os
import sys
sys.path.append(os.path.dirname(__file__)[:-5])
from codeHelpers import completion_message
</code></pre>
<p>It's in a file system that looks a bit like this:</p>
<pre><code>parent_folder
    __init__.py
    codeHelpers.py

    child_folder
        this_file.py
</code></pre>
<p>(<code>child_folder</code> is actually called <code>week1</code>, hence the 5 in the slice)</p>
<p>This question is extremely similar to <a href="https://stackoverflow.com/questions/19668729/python-import-from-parent-directory/">Python import from parent directory</a>, but in that case the discussion focused on whether or not it was good to run tests from the end point. <a href="https://github.com/notionparallax/code1161base" rel="nofollow noreferrer">In my case</a>, I have a series of directories that have code that uses helpers that live in the parent.</p>
<p><em>Context:</em> each directory is a set of weekly exercises, so I'd like to keep them as simple as possible.</p>
<p>Is there a cleaner, more pythonic way to do this import?</p>
<p>@cco solved the number problem, but it's still upsetting the linter.</p>
</div>
<div class="post-text" itemprop="text">
<p>First since you haven't been specific about which lint error you are getting, I am going to assume it's because you have an import after your <code>sys.path.append</code>.</p>
<p>The cleanest way to do it is with relative or absolute imports.</p>
<p>Using absolute imports:</p>
<pre><code>from parent_path.codeHelpers import completion_message
</code></pre>
<p>Using relative imports:</p>
<pre><code>from ..codeHelpers import completion_message
</code></pre>
<p>For the simple example listed in the original question this should be all that's required.  It's simple, it's pythonic, it's reliable, and it fixes the lint issue.</p>
<p>You may find yourself in a situation where the above does not work for you and <code>sys.path</code> manipulation is still required. A drawback is that your IDE will likely not be able to resolve imports to modules from the new path causing issues such as automatic code completion not working and flagging the imports as errors, even though the code will run properly.</p>
<p>If you find you still need to use <code>sys.path</code> and want to avoid lint errors for this type of situation create a new module and do the <code>sys.path</code> manipulation in it instead.  Then make sure that you import your new module before any modules that require the modified <code>sys.path</code>.</p>
<p>For example:</p>
<p>local_imports.py</p>
<pre><code>"""Add a path to sys.path for imports."""

import os
import sys

# Get the current directory
current_path = os.path.dirname(__file__)

# Get the parent directory
parent_path = os.path.dirname(current_path)

# Add the parent directory to sys.path
sys.path.append(parent_path)
</code></pre>
<p>Then in the target file:</p>
<pre><code>import local_imports  # now using modified sys.path
from codeHelpers import completion_message
</code></pre>
<p>The drawback to this is it requires you to include <code>local_imports.py</code> in each <code>child_folder</code> and if the folder structure changes, you would have to modify each one <code>local_imports</code> file.</p>
<p>Where this pattern is really useful is when you need to include external libraries in your package (for example in a <code>libs</code> folder) without requiring the user to install the libs themselves.</p>
<p>If you are using this pattern for a <code>libs</code> folder, you may want to make sure your included libraries are preferred over the installed libraries.</p>
<p>To do so, change</p>
<pre><code>sys.path.append(custom_path)
</code></pre>
<p>to</p>
<pre><code>sys.path.insert(1, custom_path)
</code></pre>
<p>This will make your custom path the second place the python interpreter will check (the first will still be <code>''</code> which is the local directory).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can import from a module a level up in a package by using <code>..</code>. In this_file.py:</p>
<pre><code>from ..codeHelpers import completion_message
</code></pre>
<p>Had you wanted to go more levels up just keep adding dots...</p>
<p>While I'm here, just be aware that <code>from ..codeHelpers</code> is a <em>relative</em> import, and you should always use them when importing something in the same package. <code>from codeHelpers</code> is an <em>absolute</em> import, which are ambiguous in Python 2 (should it import from in the package or from the unfortunately named <code>codeHelpers</code> module you have installed on your system?), and in Python 3 actually forbidden as a way to import from within the same module (i.e. they are always absolute). You can read the ancient <a href="https://docs.python.org/2.5/whatsnew/pep-328.html" rel="nofollow noreferrer">PEP 328</a> for an explanation of the difficulties.</p>
</div>
<div class="post-text" itemprop="text">
<p>It might be easier to use absolute import paths, like the following:</p>
<pre><code>from parent_folder.code_helpers import completion_message
</code></pre>
<p>But this would require you to make sure that the PYTHONPATH environment variable is set such that it can see the highest root directory (<code>parent_folder</code> in this case, I think).  For instance,</p>
<pre><code>PYTHONPATH=. python parent_directory/child_directory/this_file.py
# here the '.' current directory would contain parent_directory
</code></pre>
<p>Make sure to add an <code>__init__.py</code> to the child_directory as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can remove the assumption about the length of the final directory name by applying <code>os.path.dirname</code> twice.</p>
<p>e.g. instead of <code>os.path.dirname(__file__)[:-5]</code>, use <code>os.path.dirname(os.path.dirname(__file__))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Either way you have to hack around. If you main goal avoid flakes warnings</p>
<ul>
<li>add a <code>noqa</code> comment</li>
<li><p><code>exec(open("../codeHelpers.py").read(), globals())</code></p></li>
<li><p>you can pass a filename with interpreter option -c (should not bother flakes8)</p></li>
</ul>
</div>
<span class="comment-copy">you have a lot of answers that solve your problem, if you could please mark one of them as answered I'm sure they would appreciate it.</span>
<span class="comment-copy">It is a bit unfortunately named, <code>code</code> is the name of the degree, <code>co</code>mputational <code>de</code>sign. That's the logic, but I can see how it looks like I've called my helpers file <code>programmingStuff</code></span>
<span class="comment-copy">I've tried from <code>..codeHelpers</code> but I get a <code>ValueError: Attempted relative import in non-package error</code>. Does that imply a problem elsewhere or does it mean that I need to call <i>this</i> file from a different file rather than running it directly?</span>
<span class="comment-copy">So I take it that means that you're running this_file.py directly. Normally I'd advise against mixing module and script code. But if you want to make a package also a script the way to do it is using the <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">__main__.py</a> mechanism. Basically you'd rename this_file.py to __main__.py file in child_folder and execute it by running <code>python -m parent_folder.child_folder</code>, making sure you have __init__.py files in both parent_folder and child_folder (if using python 2; in python 3 it's unnecessary).</span>
