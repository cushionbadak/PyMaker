<div class="post-text" itemprop="text">
<p>I'm writing several functions which accept an argument called <code>policy</code>, which is allowed only to have certain values (namely, <code>'allow'</code> or <code>'deny'</code>). If it doesn't, I would like a <code>ValueError</code> to be raised.</p>
<p>For brevity, I would like to define a decorator for this. So far, I have come up with the following:</p>
<pre><code>def validate_policy(function):
    '''Wrapper which ensures that if the function accepts a 'policy' argument, that argument is either 'allow' or 'deny'.'''
    def wrapped_function(policy, *args, **kwargs):
        if policy not in ['allow', 'deny']:
            raise ValueError("The policy must be either 'allow' or 'deny'.")
        return function(policy, *args, **kwargs)
    return wrapped_function
</code></pre>
<p>The problem is that this only works if <code>policy</code> is the first positional argument of the function. However, I would like to allow for <code>policy</code> to appear at any position.</p>
<p>To be specific, here are some (dummy) functions called <code>make_decision</code> and <code>make_informed_decision</code> which accept an argument <code>policy</code> at different positions, and some test cases to go with them:</p>
<pre><code>import pytest

@validate_policy
def make_decision(policy):      # The 'policy' might be the first positional argument
    if policy == 'allow':
        print "Allowed."
    elif policy == 'deny':
        print "Denied."

@validate_policy
def make_informed_decision(data, policy):   # It also might be the second one
    if policy == 'allow':
        print "Based on the data {data} it is allowed.".format(data=data)
    elif policy == 'deny':
        print "Based on the data {data} it is denied.".format(data=data)


'''Tests'''
def test_make_decision_with_invalid_policy_as_positional_argument():
    with pytest.raises(ValueError):
        make_decision('foobar')

def test_make_decision_with_invalid_policy_as_keyword_argument():
    with pytest.raises(ValueError):
        make_decision(policy='foobar')

def test_make_informed_decision_with_invalid_policy_as_positional_argument():
    with pytest.raises(ValueError):
        make_informed_decision("allow", "foobar")

def test_make_informed_decision_with_invalid_policy_as_keyword_argument():
    with pytest.raises(ValueError):
        make_informed_decision(data="allow", policy="foobar")


if __name__ == "__main__":
    pytest.main([__file__])
</code></pre>
<p>Currently all the tests pass except the third one, because the first positional argument <code>'allow'</code> is interpreted as the <code>policy</code> rather than as the <code>data</code> as it should be.</p>
<p>How can I adapt the <code>validate_policy</code> decorator such that all the tests pass?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>inspect</code> module's <a href="https://docs.python.org/3/library/inspect.html#inspect.Signature.bind" rel="nofollow noreferrer"><code>Signature.bind</code></a> function:</p>
<pre><code>import inspect

def validate_policy(function):
    '''Wrapper which ensures that if the function accepts a 'policy' argument, that argument is either 'allow' or 'deny'.'''
    signature= inspect.signature(function)
    def wrapped_function(*args, **kwargs):
        bound_args= signature.bind(*args, **kwargs)
        bound_args.apply_defaults()
        if bound_args.arguments.get('policy') not in ['allow', 'deny']:
            raise ValueError("The policy must be either 'allow' or 'deny'.")
        return function(*args, **kwargs)
    return wrapped_function
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another solution using <a href="https://docs.python.org/2/library/inspect.html#inspect.getcallargs" rel="nofollow noreferrer">inspect.getcallargs</a>:</p>
<pre><code>def validate_policy(function):
    '''Wrapper which ensures that if the function accepts a 'policy' argument, that argument is either 'allow' or 'deny'.'''
    def wrapped_function(*args, **kwargs):
        call_args = inspect.getcallargs(function, *args, **kwargs)
        if 'policy' in call_args:
            if call_args['policy'] not in ['allow', 'deny']:
                raise ValueError("The policy must be either 'allow' or 'deny'.")
        return function(*args, **kwargs)
    return wrapped_function
</code></pre>
<p>It makes all the tests pass.</p>
</div>
<span class="comment-copy">Make policy a required keyword argument. Explicit is better than implicit.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/users/2437514/rick-teachey">Rick Teachey</a>, that seems like a good idea, except my code base is in Python 2, so <a href="http://legacy.python.org/dev/peps/pep-3102/" rel="nofollow noreferrer">PEP 3102</a> has not been implemented. I assume that is what you meant by making <code>policy</code> a required keyword argument?</span>
<span class="comment-copy">Bummer.........</span>
