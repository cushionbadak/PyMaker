<div class="post-text" itemprop="text">
<p>I'm trying iterate through multiple tuples in a list and return the items in each tuple in a particular order into a string.</p>
<p>For example, if I input:</p>
<pre><code>['ABCD', 'EFGH', 'IJKL']
</code></pre>
<p>I would expect it to return:</p>
<pre><code>'AEIBFJCGKDHL'
</code></pre>
<p>Thank you in advance for you help!</p>
</div>
<div class="post-text" itemprop="text">
<p>You need <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a>:</p>
<pre><code>lst = ['ABCD', 'EFGH', 'IJKL']

''.join(l for t in zip(*lst) for l in t)
# 'AEIBFJCGKDHL'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import itertools
''.join(itertools.chain(*zip(*mylist)))
</code></pre>
<p>Or:</p>
<pre><code>import itertools
''.join(itertools.chain.from_iterable(zip(*mylist)))
</code></pre>
<p>(Thanks to juanpa.arrivillaga and PM_2Ring for helpful comments.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Just one additional option (the other answers are fine too):</p>
<pre><code>lst = ['ABCD', 'EFGH', 'IJKL']

''.join(map(''.join, zip(*lst)))
</code></pre>
<p>For the given input, <a href="https://stackoverflow.com/a/42754477/364696">hemflit's <code>chain.from_iterable</code> solution</a> is faster, but for a larger number of input strings (even increasing from 3 to 6), this approach wins.</p>
<p>Also, as a side-note, you can also handle inputs with mismatched <code>len</code> without dropping data using <code>itertools.zip_longest</code>, passing <code>fillvalue=''</code>.</p>
</div>
<span class="comment-copy">I see no tuples here...</span>
<span class="comment-copy">maybe <code>chain.from_iterable</code></span>
<span class="comment-copy">While it's certainly preferable to pass <code>.join</code> a list than an iterator when you have a choice  (because it has to scan the strings twice), when you don't have a choice there's no need to call <code>list</code> explicitly - <code>.join</code> can perform that call internally.</span>
