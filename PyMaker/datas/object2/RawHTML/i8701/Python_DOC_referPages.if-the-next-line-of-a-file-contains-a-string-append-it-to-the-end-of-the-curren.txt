<div class="post-text" itemprop="text">
<p>I have a CSV with 13 million lines. The data is not quote encapsulated and it contains newlines, which is causing a row of data to have line breaks. The data does not have multiple breaks per line, only one.</p>
<p>How would I take data like this?</p>
<pre><code>Line of data
Line of data
 continuation of previous line of data
Line of data
Line of data
 continuation of previous line
Line of data
</code></pre>
<p>And turn it into this:</p>
<pre><code>Line of data
Line of data continuation of previous line of data
Line of data
Line of data continuation of previous line
Line of data
</code></pre>
<p>I've tested this by storing the line in a variable and processing the next one, looking for the first character to be anything but 'L', and appending it. I've also tried using <code>f.tell()</code> and <code>f.seek()</code> to move around in the file, but I haven't been able to get it to work.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming every time a line starts with a space it should be concatenated with the preceding line, this should work:</p>
<pre><code>with open(data) as infile:
    previous_line = None
    for line in infile:
        if previous_line is None:
            previous_line = line
        if line.startswith(' '):
            line = previous_line.strip() + line
        previous_line = line
        print(line.strip())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a cheap, reasonably efficient continuation line joiner for you.</p>
<pre><code>def cont_lines(source):
    last_line = ''
    for line in source:
        if line.startswith(' '):
            last_line += line.lstrip()  # append a continuation
        else:
            if last_line:
                yield last_line
            last_line = line
    if last_line:  # The one remaining as the source has ended.
        yield last_line
</code></pre>
<p>Use like this:</p>
<pre><code>with open("tile.csv") as f:
  for line in cont_lines(f):
     # do something with line
</code></pre>
<p>It only uses as much memory as the longest set of continuation lines in your file.</p>
</div>
<div class="post-text" itemprop="text">
<p>I was able to work out something.</p>
<pre><code>infile = "test.txt"
def peek_line(f):
    pos = f.tell()
    line = f.readline()
    f.seek(pos)
    return line

f = open(infile, 'r')
while True:
    line = f.readline()
    if not line:
        break
    peek = peek_line(f)
    if not peek.startswith('T'):
        line = (line.strip() + f.readline())
    print line,
</code></pre>
<p>I'm open to feedback on this method.</p>
</div>
<span class="comment-copy">Re-formulating: if the next string begins with a space, it's a continuation. BTW doesn't the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code> module</a> handle this already?</span>
<span class="comment-copy">I can't use the CSV module because they do not encapsulate with quotes for each column, and the column values sometimes contain one or more commas. I'm having to do a lot of formatting to split it correctly.  edit: yes I've already tried addressing the source data issues... it is a fruitless effort</span>
<span class="comment-copy"><a href="http://stackoverflow.com/a/3788876/1248974">this answer</a> works for your short example data, not sure how we'd want to handle 13 million lines though</span>
<span class="comment-copy">Far more elegant (and efficient). Thank you!</span>
<span class="comment-copy">If you want this as a function (and not just to process the file in one go) you can either modify it to yield lines, or just use the answer from 9000 (which I actually think is more elegant still).</span>
<span class="comment-copy">This is like mine, but better!</span>
<span class="comment-copy">This is nice, but you could just store a line you read in a variable, instead of storing its position in the file and seeking for it. Doing things sequentially is really much simpler.</span>
