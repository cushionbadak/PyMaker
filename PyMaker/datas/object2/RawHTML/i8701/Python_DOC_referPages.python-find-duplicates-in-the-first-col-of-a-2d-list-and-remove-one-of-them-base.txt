<div class="post-text" itemprop="text">
<p>I'm looking for a way to remove duplicates from a 2D list, but based on the highest value in the second column. I know how to do it in several for loops, but I'm searching for a O(N) solution. 
Sample Input:</p>
<pre><code>inputLst = [[100,150]
          ,[150,140]
          ,[200,180]
          ,[300,150]
          ,[300,100]
          ,[320,180]]
</code></pre>
<p>Output should be:</p>
<pre><code>OutputLst = [[100,150]
           ,[150,140]
           ,[200,180]
           ,[300,150]
           ,[320,180]]
</code></pre>
<p>This is the code I have now:</p>
<pre><code>        SortLst = [[100,150],[150,140],[200,180],[300,150],[300,100],[320,180]]
        lst = []
        lastRow = SortLst[0]
        for row in SortLst+[0,0]:
            if row[0] != lastRow[0]:
                lst.append(lastRow)
                lastRow = row
            elif row [1] &gt; lastRow[1]:
                lastRow =  row
</code></pre>
<p>The Sortlst is sorted by:</p>
<pre><code>SortLst = sorted(zip(self.WavelengthPanel.GetValues(col=1),self.Shuttertime))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could have a look at this</p>
<pre><code>from pprint import pprint

input_lst = [[100, 150],
             [150, 140],
             [200, 180],
             [300, 150],
             [300, 100],
             [320, 180]]

output_lst = dict()

for n, v in input_lst:
    if n in output_lst:    # O(1)
        output_lst[n] = max(output_lst[n], v)    # O(1)
    else:
        output_lst[n] = v    # The question is, what is the complexity of this operation 

pprint(output_lst, width=10)
</code></pre>
<p>Output</p>
<pre><code>{100: 150,
 150: 140,
 200: 180,
 300: 150,
 320: 180}
</code></pre>
<p>You can easily transform the output to a list. </p>
</div>
<span class="comment-copy">take a look at <code>itertools.groupby()</code> (<a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.groupby</a>)</span>
<span class="comment-copy">Then when input is <code>[[100,110], [100,120]]</code>, should output be <code>[[100,120]]</code>?</span>
<span class="comment-copy">Yes then the output should be [[100,120]]</span>
<span class="comment-copy">OK, important to know, the <code>inputLst</code> is already sorted?</span>
<span class="comment-copy">You know sorting always will be <i>O(N</i> log <i>N)</i>.</span>
