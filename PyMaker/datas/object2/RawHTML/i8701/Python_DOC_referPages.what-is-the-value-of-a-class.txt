<div class="post-text" itemprop="text">
<p>In the <a href="https://docs.python.org/3/reference/datamodel.html#objects-values-and-types" rel="nofollow noreferrer">reference manual</a> it is stated that every objects has a type, an identity and a value:</p>
<blockquote>
<p>Every object has an identity, a type and a value.</p>
</blockquote>
<p>For instances these look straightforward:</p>
<pre><code>x = 10
# type(x) = int, id(x) = some address, value = 10
</code></pre>
<p>At least, I <em>suspect</em> <code>value=10</code> is true.</p>
<p>For classes, the <code>type</code> and <code>id</code> are again easy to find:</p>
<pre><code>class Foo:
    def __init__(self, a):
        self.a = a

# type(Foo) = type
# id(Foo) = some address
</code></pre>
<p>but, what is considered as the value for this object? Its attributes and methods?</p>
</div>
<div class="post-text" itemprop="text">
<p>The Python language reference doesn't bother to define the concept of "value", leaving it a fuzzy, intuitive notion. Trying to apply the concept beyond the point where it becomes unintuitive doesn't work well, and the Python language reference itself doesn't try.</p>
<p>If you really want to pick something to call the "value" of <code>Foo</code>, you could say the value is "a user-defined type with base class <code>object</code> and one method, <code>__init__</code>, that takes one argument named <code>a</code> and assigns it to the <code>a</code> attribute of <code>self</code>", but this won't be useful as part of your conceptual model or as a tool for communicating with other people.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe the usual meaning of the "value" of an object is enough of its attributes to determine whether it compares equal to another object of the same type:</p>
<pre><code>&gt;&gt;&gt; x = {1, 2, 3}
&gt;&gt;&gt; y = {1, 2, 3}
&gt;&gt;&gt; id(x) == id(y)
False
&gt;&gt;&gt; x == y
True
</code></pre>
<p>In this example, the sets <code>x</code> and <code>y</code> have the same value and same class but different identities. </p>
<pre><code>&gt;&gt;&gt; class Foo:
...     def __eq__(self, other):
...         return id(self) == id(other)
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.x = 1
&gt;&gt;&gt; g = Foo()
&gt;&gt;&gt; g.x = 1
&gt;&gt;&gt; f == g
False
&gt;&gt;&gt; h = f
&gt;&gt;&gt; id(h) == id(f)
True
&gt;&gt;&gt; h == f
True
</code></pre>
<p>In this case, <code>f</code> and <code>g</code> have the same type but different identities and different values (even though all their attributes are the same). <code>f</code> and <code>h</code> have the same identity and value. </p>
<p>(Incidentally we have have made the <code>__eq__</code> method simply return <code>False</code> always, so that <code>h</code> and <code>f</code> - or for that matter <code>f</code> and <code>f</code> - have the same identity but different values, but I imagine such a broken equality definition would break in some places in practice. Equality should be an <a href="https://en.wikipedia.org/wiki/Equivalence_relation" rel="nofollow noreferrer">equivalence relation</a>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>The reference manual notes, somewhat obliquely, that value is a notion for each type to define for itself (emphasis added):</p>
<blockquote>
<p>An object’s type determines the operations that the object supports (e.g., “does it have a length?”) <strong>and also defines the possible values for objects of that type</strong>.</p>
</blockquote>
<p>In other words, there is no general notion of what "a value" is.  Each type defines for itself what "value" means for objects of that type.  Usually, the notion of "value" is linked to the notion of equality; objects are considered to have "the same value" if the compare equal.  So a type can specify its notion of value by defining an <code>__eq__</code> method.</p>
<p>So, to answer your specific question about classes: In this sense, the value of a class object is just itself, since class objects are compared by object identity, and no two class objects are equal.</p>
</div>
<div class="post-text" itemprop="text">
<p>I contend that the notion of <em>value</em> has a meaning only if we are able to compare it against another object. This claim is supported by the official Python 3 <a href="https://docs.python.org/3/reference/expressions.html#value-comparisons" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>Chapter <a href="https://docs.python.org/3/reference/datamodel.html#objects" rel="nofollow noreferrer">Objects, values and
  types</a>
  states that objects have a value (in addition to type and identity).
  The value of an object is a rather abstract notion in Python: For
  example, there is no canonical access method for an object’s value.
  Also, there is no requirement that the value of an object should be
  constructed in a particular way, e.g. comprised of all its data
  attributes. <strong>Comparison operators implement a particular notion of what
  the value of an object is. One can think of them as defining the value
  of an object indirectly, by means of their comparison implementation</strong>.</p>
</blockquote>
<p>The notion of value is even orthogonal to the type:</p>
<pre><code>&gt;&gt;&gt; x = 1
&gt;&gt;&gt; y = 1.0
&gt;&gt;&gt; x == y
True         # Therefore x and y have the same value, although of different types
</code></pre>
<p>Thus, if a value of an object can be examined only through equality testing, then we must admit that the value of a class object is indistinguishable from its identity. Proof:</p>
<pre><code>&gt;&gt;&gt; def make_class():
...     class A: pass
...     return A
... 
&gt;&gt;&gt; a1 = make_class()
&gt;&gt;&gt; a2 = make_class()
&gt;&gt;&gt; id(a1) == id(a2)
False
&gt;&gt;&gt; a1 == a2
False
</code></pre>
<p>In the above example, the function <code>make_class()</code> creates a new class object on every call. Semantically, those class objects should be identical (even if they are defined not to be empty). Still objects from different invocations of the <code>make_class()</code> function do not compare equal, therefore they are assumed to have non-equal values merely because they have different identities.</p>
</div>
<span class="comment-copy">could you add a link to the statement "every objects has a type, an identity and a value". I would be interested in which context it was mentioned :)</span>
<span class="comment-copy">@MSeifert yes, I've added it. Thanks!</span>
