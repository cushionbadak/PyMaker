<div class="post-text" itemprop="text">
<p>I have got a code and need to get the line by line meaning of this python code.</p>
<pre><code>marksheet = []
for i in range(0,int(input())):
    marksheet.append([raw_input(), float(input())])

second_highest = sorted(list(set([marks for name, marks in marksheet])))[1]
print('\n'.join([a for a,b in sorted(marksheet) if b == second_highest]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I highly recommend you to go through the <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">python tutorial </a></p>
<p>Just for your understanding of this code, I've added the comments.</p>
<pre><code>#initialising an empty list!
marksheet = [] 

#iterating through a for loop starting from zero, to some user input(default type string) - that is converted to int
for i in range(0,int(input())): 
    #appending user input(some string) and another user input(a float value) as a list to marksheet
    marksheet.append([raw_input(), float(input())]) 

#[marks for name, marks in marksheet] - get all marks from list
#set([marks for name, marks in marksheet]) - getting unique marks
#list(set([marks for name, marks in marksheet])) - converting it back to list
#sorting the result in decending order with reverse=True and getting the value as first index which would be the second largest.
second_highest = sorted(list(set([marks for name, marks in marksheet])),reverse=True)[1] 

#printing the name and mark of student that has the second largest mark by iterating through the sorted list.
#If the condition matches, the result list is appended to tuple  -`[a for a,b in sorted(marksheet) if b == second_highest])` 
#now join the list with \n - newline to print name and mark of student with second largest mark
print('\n'.join([a for a,b in sorted(marksheet) if b == second_highest]))
</code></pre>
<p>Hope it helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>Would do this in a comment but I don't have 50 reputation yet:</p>
<p>You don't need to use sorted on second_highest but apparently it is not a good habit to rely on this so you can keep the sorted. Calling sorted on an already sorted list doesn't use a lot of resources anyway.</p>
<pre><code>second_highest = sorted(list(set([marks for name, marks in marksheet])))[1]
</code></pre>
<p>Also if the list contains something like [1,3,2,5,3,2,1] it will give 2 as result and not 1 since a set removes all duplicates.</p>
<p>If you want to keep duplicates use:</p>
<pre><code>second_highest = sorted([marks for name, marks in marksheet]))[1]
</code></pre>
</div>
<span class="comment-copy">Give it your best shot and tell us what you think it means. We're not here to do your homework for you.</span>
<span class="comment-copy"><code>second_highest</code> is actually <code>second_lowest</code>.</span>
<span class="comment-copy">thanks a lot only the 2nd last line was a problem, i have understood it thanks again</span>
<span class="comment-copy"><i>"You don't need to use sorted on second_highest since it converts it first in a set and a set is always sorted"</i> This is simply not true. Sets are unsorted per definition and <a href="https://docs.python.org/2/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">documentation</a>. You're right in the sense that due to how sets are implemented, things like <code>list({3,2,1})</code> will result in <code>[1,2,3]</code>, but that's not something you should rely on. You should <i>definitely</i> explicitly sort the list.</span>
