<div class="post-text" itemprop="text">
<p>When using the <a href="https://docs.python.org/3/library/enum.html#module-enum" rel="nofollow noreferrer">Enum</a> class introduced in Python 3 <a href="https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes" rel="nofollow noreferrer">programmatically</a> , how should a programmer check for Enum membership of a given integer?</p>
<p>Obviously, you could just <a href="https://docs.python.org/3.6/glossary.html#term-eafp" rel="nofollow noreferrer">ask for forgiveness</a> but is there a membership check function that I have otherwise missed? Put more explicitly, I would like to take an integer value and check to see if its value corresponds to a valid enumeration. </p>
<pre><code>from enum import Enum

class TestEnum(Enum):
    a = 0
    b = 1
    c = 2
</code></pre>
<p>Output:</p>
<pre><code>In [13]: TestEnum(0)
Out[13]: &lt;TestEnum.a: 0&gt;

In [14]: TestEnum(4)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-14-09c663e9e214&gt; in &lt;module&gt;()
----&gt; 1 TestEnum(4)

C:\Anaconda3\lib\enum.py in __call__(cls, value, names, module, qualname, type, start)
    239         """
    240         if names is None:  # simple value lookup
--&gt; 241             return cls.__new__(cls, value)
    242         # otherwise, functional API: we're creating a new Enum type
    243         return cls._create_(value, names, module=module, qualname=qualname, type=type, start=start)

C:\Anaconda3\lib\enum.py in __new__(cls, value)
    474                 if member._value_ == value:
    475                     return member
--&gt; 476         raise ValueError("%r is not a valid %s" % (value, cls.__name__))
    477
    478     def __repr__(self):

ValueError: 4 is not a valid TestEnum
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Enum does has a <a href="https://github.com/python/cpython/blob/3.6/Lib/enum.py#L295" rel="nofollow noreferrer"><code>__contains__</code></a> method, but it checks for member names rather than member values:</p>
<pre><code>def __contains__(cls, member):
    return isinstance(member, cls) and member._name_ in cls._member_map_
</code></pre>
<p>Internally(in CPython) they do have a private attribute that maps values to names(will only work for hashable values though):</p>
<pre><code>&gt;&gt;&gt; 2 in TestEnum._value2member_map_
True
&gt;&gt;&gt; 3 in TestEnum._value2member_map_
False
</code></pre>
<p>But it's not a good idea to rely on private attributes as they can be changed anytime, hence you can add your own method that loops over <code>__members__.values()</code>:</p>
<pre><code>&gt;&gt;&gt; class TestEnum(Enum):
...     a = 0
...     b = 1
...     c = 2
...
...     @classmethod
...     def check_value_exists(cls, value):
...         return value in (val.value for val in cls.__members__.values())
...

&gt;&gt;&gt;
&gt;&gt;&gt; TestEnum.check_value_exists(2)
True
&gt;&gt;&gt; TestEnum.check_value_exists(3)
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do you mean:</p>
<pre><code>from enum import Enum

class TestEnum(Enum):
    a = 3
    b = 2
    c = 1


print(TestEnum.b.name,TestEnum.b.value)
</code></pre>
<p>Or </p>
<pre><code>print(TestEnum(2).name,TestEnum(2).value)
</code></pre>
<p>Output:</p>
<p>b 2</p>
</div>
<span class="comment-copy">To the best of my knowledge, you can try <code>4 in TestEnum.__members__.values()</code>, as long as <code>TestEnum</code> derives from <code>enum.IntEnum</code>.</span>
<span class="comment-copy">@farsil, put your comment as an answer and I'll mark it answered if there is no subsequent prettier ways</span>
