<div class="post-text" itemprop="text">
<p>I have a list of dicts : </p>
<pre><code>ldicts = [{'name': '120-150'}, {'name': '90-120'}, {'name': '150-180'}, {'name': '&gt;= 180'}, {'name': '&lt;90'}, {'name': 'total'}]
</code></pre>
<p>I'd like to sort it by value ascending so that the output would be like this : </p>
<pre><code> sortedldicts = [{'name': 'total'}, {'name': '&lt;90'}, {'name': '90-120'},{'name': '120-150'}, {'name': '150-180'}, {'name': '&gt;= 180'}]
</code></pre>
<p>The normal sort doesn't do the trick : </p>
<pre><code>from operator import itemgetter
sortedldicts = sorted(ldicts , key=itemgetter('name'), reverse=True)
</code></pre>
<p>So i'm assuming I should do a custom sort maybe? Any hints or help would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Extract digits using <code>re.findall</code>:</p>
<pre><code>&gt;&gt;&gt; ldicts = [{'name': '120-150'}, {'name': '90-120'}, {'name': '150-180'}, {'name': '&gt;= 180'}, {'name': '&lt;90'}, {'name': 'total'}]
&gt;&gt;&gt;
&gt;&gt;&gt; import re
&gt;&gt;&gt; sorted(ldicts, key=lambda d: map(int, re.findall(r'\d+', d['name'])))
[{'name': 'total'}, {'name': '&lt;90'}, {'name': '90-120'}, {'name': '120-150'}, {'name': '150-180'}, {'name': '&gt;= 180'}]
</code></pre>
<ul>
<li>Replace <code>map(int, ...)</code> with <code>list(map(int, ...))</code> if you use Python 3.x.</li>
</ul>
</div>
<span class="comment-copy">Why exactly sorted doesn't work?</span>
<span class="comment-copy">this is the output : <code>[{'name': 'total'}, {'name': '&gt;= 180'}, {'name': '&lt;90'}, {'name': '90-120'}, {'name': '150-180'}, {'name': '120-150'}]</code></span>
<span class="comment-copy">I think you can just use <code>sortedldicts = sorted(ldicts, reverse=True)</code>, the output is correct.</span>
<span class="comment-copy">It gives me the same output in my previous comment.</span>
<span class="comment-copy">How does it work? <code>key</code> returns a list in this case, right? So, the lists are compared?</span>
<span class="comment-copy">@thefourtheye, key function returns a list of int. <code>[[120,150], [90,120], [150,180], [180], [90], []]</code>. And the items are used as comparison keys.</span>
<span class="comment-copy">what kind of magic is this? I tried it with : <code>ldicts= [{'name': '120-150'}, {'name': '90-120'}, {'name': '150-180'}, {'name': 'greater than or equal to 180'}, {'name': 'below 90'}, {'name': 'total'}]</code> and it works the same. Anyway thank you so much.</span>
<span class="comment-copy">@user1734229, What do you mean <i>works the same</i>? Does this not work for you?</span>
<span class="comment-copy">@thefourtheye, See <a href="http://docs.python.org/3/tutorial/datastructures.html#comparing-sequences-and-other-types" rel="nofollow noreferrer"><i>Comparing sequences and other types</i> - Python tutorial</a>.</span>
