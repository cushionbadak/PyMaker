<div class="post-text" itemprop="text">
<p>I'm currently testing my python code and have a question about raw_input. This is my function:</p>
<pre><code>def answer():
    ans = raw_input('enter yes or no')
    if ans == 'yes':
        print 'you entered yes'
        return 'yes'
    if ans == 'no':
        some_value = raw_input('enter some value: ')
        print 'you entered no'
        return some_value
</code></pre>
<p>I'm testing the first if statement this way:</p>
<pre><code>with mock.patch('__builtin__.raw_input', return_value= 'yes'):
    assert answer() == 'yes'
</code></pre>
<p>But how do I check the no statement ? How do I make mock inside a mock ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow"><code>side_effect</code></a>:</p>
<pre><code>with mock.patch('__builtin__.raw_input', side_effect=['yes']):
    assert answer() == 'yes'
with mock.patch('__builtin__.raw_input', side_effect=['no', 'maybe']):
    assert answer() == 'maybe'
</code></pre>
<p>According to <a href="http://docs.python.org/3/library/unittest.mock.html#calling" rel="nofollow"><code>mock</code> documentation</a>:</p>
<blockquote>
<p>If <code>side_effect</code> is an iterable then each call to the mock will return the next value from the iterable.
  The side_effect can also be any iterable object. Repeated calls to the mock will return values from the iterable (until the iterable is exhausted and a StopIteration is raised):</p>
<pre><code>&gt;&gt;&gt;
&gt;&gt;&gt; m = MagicMock(side_effect=[1, 2, 3])
&gt;&gt;&gt; m()
1
&gt;&gt;&gt; m()
2
&gt;&gt;&gt; m()
3
&gt;&gt;&gt; m()
Traceback (most recent call last):
  ...
StopIteration
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Using side effect should do the trick, I find the following quite clear and avoid multiple with-block:</p>
<pre><code>def my_side_effect(*args):  # each argument will be the return_value of one call
    for el in args:
        yield el  # we use a generator to return different value each time

with mock.patch('__builtin__.raw_input') as mocked:  # here the mocked object is accessible in the block
    mocked.side_effect = my_side_effect('yes')  # here one call that return 'yes'
    assert answer() == 'yes'
    mocked.side_effect = my_side_effect('no', 'maybe')  # two calls, the first return 'no', the second 'maybe'
    assert answer() == 'maybe'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you just mock <code>raw_input</code> to return <code>'no'</code>, it will return <code>'no'</code> both times, meaning you can assert that the function returns <code>'no'</code>:</p>
<pre><code>with mock.patch('__builtin__.raw_input', return_value='yes'):
    assert answer() == 'yes'
with mock.patch('__builtin__.raw_input', return_value='no'):
    assert answer() == 'no'
</code></pre>
<p>If you want to test what happens if, say, the first input is <code>'no'</code> and the second one is <code>'maybe'</code>, you have to mock it with a function that returns different things the first time it's called and the second time it's called, and then you can assert that it returns <code>'maybe'</code>. Something like this (not tested because I don't have <code>mock</code> installed here… but it should give you the idea):</p>
<pre><code>def fake_raw_input(once=[False]):
    if not once[0]:
        once[0] = True
        return 'no'
    return 'maybe'

with mock.patch('__builtin__.raw_input', return_value='yes'):
    assert answer() == 'yes'
with mock.patch('__builtin__.raw_input', new_callable=fake_raw_input):
    assert answer() == 'maybe'
</code></pre>
</div>
<span class="comment-copy">I didn't realize <code>side_effect</code> could take a generator like this. Generators are always the easiest way to bundle up simple state. +1, only because I can't +10.</span>
