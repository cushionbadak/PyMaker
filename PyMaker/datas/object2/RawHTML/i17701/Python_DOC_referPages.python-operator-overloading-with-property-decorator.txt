<div class="post-text" itemprop="text">
<p>I am looking at this Python Doc page:</p>
<p><a href="http://docs.python.org/2/library/functions.html#property" rel="nofollow">http://docs.python.org/2/library/functions.html#property</a></p>
<pre><code>class C(object):
    def __init__(self):
        self._x = None

    def getx(self):
        return self._x
    def setx(self, value):
        self._x = value
    def delx(self):
        del self._x
    x = property(getx, setx, delx, "I'm the 'x' property.")
</code></pre>
<p>Right below it says:</p>
<pre><code>If then c is an instance of C, c.x will invoke the getter, c.x = value will invoke the setter and del c.x the deleter.
</code></pre>
<p>To me, c.x = value looks like assignment of a value to a function, since c.x is a function, unless the "=" operator is overloaded. Is it what is happening here?</p>
<p>Same thing with del c.x</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>property</code> is a descriptor, which changes the way Python handles attribute access. The Python docs have an <a href="http://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">article introducing descriptors</a>.</p>
<p>When Python accesses an attribute that points to an object with a <code>__get__</code> method, it will return what that method returns instead of the object itself. Similarly, <code>=</code> will delegate to <code>__set__</code> and <code>del</code> to <code>__delete__</code>. The special methods are described in <a href="https://docs.python.org/3/reference/datamodel.html#implementing-descriptors" rel="nofollow noreferrer">the docs</a>.</p>
</div>
<span class="comment-copy"><code>c.x</code> isn't a function, it's a property object.</span>
