<div class="post-text" itemprop="text">
<p>I was having a play around with Python 2.7 and everybody knows that at the start of every program, you always have to import modules. For example: </p>
<pre><code>import random
import time

for x in range(1, 300):
     print random.randint(1,100)
     time.sleep(1)
print "Done!"
</code></pre>
<p>Anyway, I was thinking, why do I have to import all my modules manually? Why doesn't Python just import them all like this. </p>
<p>Sure, I can understand why it does not import like this:</p>
<pre><code>from random import randint
from time import *

for x in range(1, 300):
     print randint(1,100)
     sleep(1)
print "Done!"
</code></pre>
<p>As some function names may clash. But, if you have to define where the function is at the start, so for example <code>random.</code> in <code>random.randint(1,100)</code>. </p>
<p>Now modern computers are so powerful, it seems logical to import every module automatically instead of wasting lines of code, and time by having to find which module you need then importing it manually when it can easily be automated.
So, why does python not import every module at startup automatically?
EDIT 1:
(DELETED)
EDIT 2:
I have made a new version of a little program that imports every module that I can find by running: </p>
<pre><code> import sys
 sys.builtin_module_names
</code></pre>
<p>Here is version 2 of my program. Unfortunately it does not have every module (yet!)</p>
<pre><code> x = int(1000000)
def test():
    global x
    x -= 1
    print "Iterations Left: ", x
    import __builtin__
    import __main__
    import _ast
    import _bisect
    import _codecs
    import _codecs_cn
    import _codecs_hk
    import _codecs_iso2022
    import _codecs_jp
    import _codecs_kr
    import _codecs_tw
    import _collections
    import _csv
    import _functools
    import _heapq
    import _hotshot
    import _io
    import _json
    import _locale
    import _lsprof
    import _md5
    import _multibytecodec
    import _random
    import _sha
    import _sha256
    import _sha512
    import _sre
    import _struct
    import _subprocess
    import _symtable
    import _warnings
    import _weakref
    import _winreg
    import array
    import audioop
    import binascii
    import cPickle
    import cStringIO
    import cmath
    import datetime
    import errno
    import exceptions
    import future_builtins
    import gc
    import imageop
    import imp
    import itertools
    import marshal
    import math
    import mmap
    import msvcrt
    import nt
    import operator
    import parser
    import signal
    import strop
    import sys
    import thread
    import time
    import xxsubtype
    import zipimport
    import zlib

def start():
    from timeit import Timer
    t = Timer("test()", "from __main__ import test")
    print t.timeit()

start()
</code></pre>
<p>This took less than a second, and in task manager, the Python shell is currently using 24.5MB of RAM, in Windows 8.1.
Also, I do not have a really powerful computer with an SSD or anything, I have a Dell Laptop thats about 4 years old!</p>
</div>
<div class="post-text" itemprop="text">
<p>Because you don't need all of it. There is no point in loading every library if you don't need them.</p>
<p><strong>EDIT:</strong>
I copied my libs folder to a test directory and made it into a package by adding an <code>__init__.py</code> file to it. In this file I added:</p>
<pre><code>import os
import glob
__all__ = [ os.path.basename(f)[:-3] for f in glob.glob(os.path.dirname(__file__)+"/*.py")]
</code></pre>
<p>I created a test script that contains:</p>
<pre><code>from Lib import *
print('Hello')
</code></pre>
<p>When I try to run it in the shell all it does is print 'The Zen of Python' by Tim Peters, opens <a href="http://xkcd.com/353/" rel="nofollow">this webcomic</a> in my browser (2 things I absolutely did not see coming) and throws the following error:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Users\Hannah\Documents\dropBox\Python\test\test.py", line 1, in &lt;module&gt;
    from Lib import *
AttributeError: 'module' object has no attribute 'crypt'
</code></pre>
<p>It takes a noticable amount of time before it does any of this, about 10-15 seconds</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe what you would like is a feature that automatically imports the libraries that are used in your script without needing to specify them at the beginning. I found this on the Internet <a href="http://www.connellybarnes.com/code/autoimp/" rel="nofollow">http://www.connellybarnes.com/code/autoimp/</a></p>
<p>You just need one import at the beginning of your script</p>
<pre><code>from autoimp import *
</code></pre>
<p>All other modules are loaded "lazily", i.e. when they are first used.</p>
<p>Example in the interactive shell:</p>
<pre><code>&gt;&gt;&gt; random.random()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'random' is not defined
&gt;&gt;&gt; from autoimp import *
&gt;&gt;&gt; random.random()
0.0679000238267422
</code></pre>
<p>From the docs:</p>
<p><em>For ultimate laziness, place the command</em> <code>"from autoimp import *"</code> <em>in your PYTHONSTARTUP file.  Now your interactive session has all modules available by default.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Every module you import takes time to import. Importing every built-in module every time you start Python would kill performance in a lot of important scenarios where new Python interpreters are started frequently.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python does have a set of modules that are always loaded, its call <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer"><code>__builtins__</code></a> :). </p>
<p>Python's builtins provide the <code>import</code> statement for you to extend your scope with even more modules! But as other posts have said, deciding your script needs these modules it up to you. -- I have looked into mutating <code>__builtins__</code> and I promise you, explicitly importing what you need <em>is</em> the better option.</p>
<hr/>
<p><em>((Big rant about not using <code>from name import *</code> cut from here))</em></p>
<hr/>
<p>Since most of writing python ultimately becomes packaging and installing that writen python somewhere, this is my goto set of resources for getting a handle on python's <s>in</s>famous <code>import</code>:</p>
<ul>
<li>Start by sticking to standard tools and libraries (<a href="https://packaging.python.org/current/" rel="nofollow noreferrer">https://packaging.python.org/current/</a>)</li>
<li>Reading and understand The Google Python Standards Guide (<a href="https://google.github.io/styleguide/pyguide.html" rel="nofollow noreferrer">https://google.github.io/styleguide/pyguide.html</a>), </li>
<li>Read the Zen of Python (<a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0020/</a>)</li>
<li>Be Pythonic (basically adhere to "The Zen of Python"), <a href="https://www.youtube.com/watch?v=wf-BqAjZb8M" rel="nofollow noreferrer">https://www.youtube.com/watch?v=wf-BqAjZb8M</a></li>
<li>Supplement your problem-space with tips from The Hitchhikers Guid to Python (<a href="http://docs.python-guide.org/en/latest/" rel="nofollow noreferrer">http://docs.python-guide.org/en/latest/</a>)</li>
<li>Be preapred to package your code (<a href="https://packaging.python.org/distributing/" rel="nofollow noreferrer">https://packaging.python.org/distributing/</a> (Doc), <a href="https://github.com/pypa/sampleproject/" rel="nofollow noreferrer">https://github.com/pypa/sampleproject/</a> (Example))</li>
<li>Being prepared to debug someone else's and, Your own code by getting familiar with tools like:

<ul>
<li><code>pdb</code> (<code>import pdb; pdb.set_trace()</code>, <code>&gt; pp variable</code>), </li>
<li><code>print(help(variable))</code>, </li>
<li><code>dir(variable)</code>,</li>
<li>and <code>pprint.pprint( variable.__dict__ )</code></li>
</ul></li>
</ul>
</div>
<span class="comment-copy">If you want PHP, you know where to find it. enjoy!</span>
<span class="comment-copy">You rather save one or two lines of code by giving up tons of memory and execution time?</span>
<span class="comment-copy">The trend is toward removing builtins, not adding more. Why pollute the global namespace with loads of garbage?</span>
<span class="comment-copy">Do a little experiment:  It should be fairly simple to write a program which imports everything in the standard library.  Build one and time it and see how significant it is</span>
<span class="comment-copy"><code>sys.builtin_module_names</code> is the names of modules that are built in to the interpreter rather than as separate Python or C modules. That means that importing them is nearly free. So you haven't really tested <i>anything</i>. (Also, you'll notice that the list is much shorter in Python 3.x than in 2.x, and even shorter in 3.3+ than 3.0-3.2.)</span>
<span class="comment-copy">Wow! That was a fast answer!! But Python has lots of built in functions that I never needed or used (and I have been using Python for 2 years) and these are imported by default.</span>
<span class="comment-copy">You aren't the only person using Python. I use the bif's all the time. The designers figured on what would be used the most or was most important for the language to function and made those part of the core library. I'm not a language desinger but I'm sure there are various reasons to separate all your concerns when doing so.</span>
<span class="comment-copy">As of CPython 3.4, there are only 68 builtin functions. There are 283 top-level modules and packages (26 builtin, 88 implemented in C, 169 implemented in Python). Most people use a sizable fraction of those 68 functions. Few people use a sizable fraction of those 283 modules.</span>
<span class="comment-copy">Wow! 283 - I thought my program was a little bit incomplete but not that bad!</span>
<span class="comment-copy">explicit is better than implicit.</span>
<span class="comment-copy">maybe I'm too lazy</span>
<span class="comment-copy">@user2314737, when you work with IDE, explicit import will provide you with autocompletions. Implicit ...?</span>
<span class="comment-copy">@volcano good point</span>
<span class="comment-copy">@user2314737 : when you'll start having random weird behaviour, wonder where which symbol was supposed to come from and where it actually comes from, and end up spending weeks rewriting your code base to a sane state using explicit import, you'll understand that you were on the wrong side of "lazy". NB : I'm talking about code here, not python shell.</span>
