<div class="post-text" itemprop="text">
<p>I use python 3
I tried to write binary to file I use r+b.</p>
<pre><code>for bit in binary:
    fileout.write(bit)
</code></pre>
<p>where binary is a list that contain numbers.
How do I write this to file in binary?</p>
<p>The end file have to look like 
b' x07\x08\x07\</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>When you open a file in binary mode, then you are essentially working with the <a href="http://docs.python.org/3/library/stdtypes.html#bytes"><code>bytes</code></a> type. So when you write to the file, you need to pass a <code>bytes</code> object, and when you read from it, you get a <code>bytes</code> object. In contrast, when opening the file in text mode, you are working with <code>str</code> objects.</p>
<p>So, writing “binary” is really writing a bytes string:</p>
<pre><code>with open(fileName, 'br+') as f:
    f.write(b'\x07\x08\x07')
</code></pre>
<p>If you have actual integers you want to write as binary, you can use the <code>bytes</code> function to convert a sequence of integers into a bytes object:</p>
<pre><code>&gt;&gt;&gt; lst = [7, 8, 7]
&gt;&gt;&gt; bytes(lst)
b'\x07\x08\x07'
</code></pre>
<p>Combining this, you can write a sequence of integers as a bytes object into a file opened in binary mode.</p>
<hr/>
<p>As Hyperboreus pointed out in the comments, <code>bytes</code> will only accept a sequence of numbers that actually fit in a byte, i.e. numbers between 0 and 255. If you want to store arbitrary (positive) integers in the way they are, without having to bother about knowing their exact size (which is required for struct), then you can easily write a helper function which splits those numbers up into separate bytes:</p>
<pre><code>def splitNumber (num):
    lst = []
    while num &gt; 0:
        lst.append(num &amp; 0xFF)
        num &gt;&gt;= 8
    return lst[::-1]

bytes(splitNumber(12345678901234567890))
# b'\xabT\xa9\x8c\xeb\x1f\n\xd2'
</code></pre>
<p>So if you have a list of numbers, you can easily iterate over them and write each into the file; if you want to extract the numbers individually later you probably want to add something that keeps track of which individual bytes belong to which numbers.</p>
<pre><code>with open(fileName, 'br+') as f:
    for number in numbers:
        f.write(bytes(splitNumber(number)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>where binary is a list that contain numbers</p>
</blockquote>
<p>A number can have one thousand and one different binary representations (endianess, width, 1-complement, 2-complement, floats of different precision, etc). So first you have to decide in which representation you want to store your numbers. Then you can use the <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">struct</a> module to do so.</p>
<p>For example the byte sequence 0x3480 can be interpreted as 32820 (little-endian unsigned short), or -32716 (little-endian signed short) or 13440 (big-endian short).</p>
<p>Small example:</p>
<pre><code>#! /usr/bin/python3

import struct

binary = [1234, 5678, -9012, -3456]
with open('out.bin', 'wb') as f:
    for b in binary:
        f.write(struct.pack('h', b)) #or whatever format you need

with open('out.bin', 'rb') as f:
    content = f.read()
    for b in content:
        print(b)
    print(struct.unpack('hhhh', content)) #same format as above
</code></pre>
<p>prints</p>
<pre><code>210
4
46
22
204
220
128
242
(1234, 5678, -9012, -3456)
</code></pre>
</div>
<span class="comment-copy">What is "binary" supposed to mean here? You want 1s and 0s?</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/11462466/read-and-write-binary-file-in-python">Read and write binary file in Python</a></span>
<span class="comment-copy">+1 but maybe mention <code>open</code> and <code>bytes</code> behave differently on 2.x</span>
<span class="comment-copy">@wim OP said they’re using Python 3; added the tag to the question now too. (Guess we both did that at the same time ^^)</span>
<span class="comment-copy">yes, I just noticed and tagged it at the same instant!  now I have an edit in the history with nothing actually changed</span>
<span class="comment-copy">shouldnt you use "w+b" on the first open? (notice the w)</span>
<span class="comment-copy">@Nande That behavior for <code>r+</code> is intended. Not all open modes will create the file if it doesn’t exist. That doesn’t make <code>r+</code> less valid though ;) <code>rw+</code> isn’t a valid mode btw., see <a href="http://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">the docs</a> for more information on the open modes.</span>
