<div class="post-text" itemprop="text">
<p>How to write a background thread in Python which will keep on calling a particular method every few minutes. </p>
<p>Let's say, if I am starting my program for the first time, then it should call that method right away, and after that, it should keep on calling that method every X minutes?</p>
<p>Is it possible to do in Python?</p>
<p>I don't have that much experience with Python threading. In Java I can use <code>TimerTask</code> or <code>ScheduledExecutors</code> for this problem but not sure how to do it with Python?</p>
<p>What's the best way to do this in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/3/library/threading.html#timer-objects" rel="nofollow"><code>threading.Timer</code></a>.</p>
<p>For example:</p>
<pre><code>import threading

def print_hello():
    print('Hello')
    timer = threading.Timer(2, print_hello) # # Call `print_hello` in 2 seconds.
    timer.start()

print_hello()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this is a lot easier to do without trying to use <code>Timer</code>.  Do it directly:</p>
<pre><code>def my_background_task(seconds_between_calls):
    from time import sleep
    while keep_going:
        # do something
        sleep(seconds_between_calls)


...
from threading import Thread
t = Thread(target=my_background_task, args=(5*60,)) # every 5 minutes
keep_going = True
t.start()
...
# and when the program ends
keep_going = False
t.join()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've had good luck with this class.  You would probably want to move the self.func() call before the time.sleep().</p>
<pre><code>import threading
import time

class PeriodicExecutor(threading.Thread):

    def __init__(self, sleep, func, *params):
        'Execute func(params) every "sleep" seconds'
        self.func = func
        self.params = params
        self.sleep = sleep
        threading.Thread.__init__(self, name = "PeriodicExecutor")
        self.setDaemon(True)

    def run(self):
        while True:
            time.sleep(self.sleep)
#           if self.func is None:
#               sys.exit(0)
            self.func(*self.params)
</code></pre>
</div>
<span class="comment-copy">Somehow when I ran the above code, I see Hello got printed out twice, each after 2 seconds but after that it didn't printed out anything..</span>
<span class="comment-copy">@SSH, Sorry, I was wrong about <code>threading.Timer</code>. It only run the function only once. I updated the answer.</span>
<span class="comment-copy">Yeah. Now it works. Is there any purpose of using time.sleep(100) in the last line?</span>
<span class="comment-copy">@SSH, Ah.. You don't need it. Removed it.</span>
