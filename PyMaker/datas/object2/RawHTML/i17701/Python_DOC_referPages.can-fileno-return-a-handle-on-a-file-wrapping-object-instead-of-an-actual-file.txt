<div class="post-text" itemprop="text">
<p>As part of a python project I'm writing, I have an object that wraps up the stdout stream and a file. The <code>write()</code> method on my class then writes to both the stream and the file. I then set sys.stdout to be my object so that any <code>sys.stdout.write()</code> call  - i.e. <code>print("blah")</code> - will both be written to stdout and to my logfile. This all works fine.</p>
<p>Simplified, it looks a bit like this:</p>
<pre><code>import sys

class StreamLogger():
 def __init__(self, fileobj):
    self.file = fileobj
    self.stream = sys.stdout

 def activate(self):
    sys.stdout = self
 def deactivate(self):
    sys.stdout = self.stream

 def write(self, text):
    self.file.write()
    self.stream.write()
</code></pre>
<p>This worked fine until I started using calls to the subprocess module. The Popen code, calls <code>fileno()</code> on its stdout. <a href="https://stackoverflow.com/questions/19070768/create-fileno-on-class">Other questions</a> suggest calling fileno on the wrapped object. But I have two wrapped objects. If I return either one, stdout is only written to that stream/file and not the other.</p>
<p>Is there anything I can return from <code>fileno()</code> that will allow  my class to write to both streams?</p>
</div>
<div class="post-text" itemprop="text">
<p>Short answer is, you cannot. Subprocess directly passes the stdout descriptor you give it to the process it creates. As your wrapper class is not an operating system file, it cannot be passed directly to the new process.</p>
<p>You could use <a href="http://docs.python.org/3/library/os.html#os.pipe" rel="nofollow"><code>os.pipe</code></a> to buffer the data, but in that case it would be better to just use the <a href="http://docs.python.org/3/library/subprocess.html#subprocess.PIPE" rel="nofollow"><code>subprocess.PIPE</code></a> value for stdout and use <a href="http://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow"><code>Popen.communicate()</code></a> to retrieve the data written to stdout by the process.</p>
</div>
<span class="comment-copy">If you are on a decent operating system, simply pipe the output to <code>tee</code>.  If you are on the other operation system, you'll need threads to make this work properly under all circumstances, because there's neither <code>select()</code> nor <code>poll()</code>.  (At least if you want to see the output in real time, without firsst buffering the whole output.)</span>
<span class="comment-copy">Ah, shame. I hadn't done enough digging to realise the child process just wrote straight to the file - I'd kinda assumed that the output would come back in to Popen. Thanks.</span>
