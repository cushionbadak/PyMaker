<div class="post-text" itemprop="text">
<p>I use the official python http server code, see <a href="http://docs.python.org/3/library/asyncore.html#asyncore-example-basic-echo-server" rel="nofollow">here</a>:</p>
<pre><code>import asyncore

class EchoHandler(asyncore.dispatcher_with_send):

    def handle_read(self):
        data = self.recv(8192)
        if data:
            self.send(data)

class EchoServer(asyncore.dispatcher):

    def __init__(self, host, port):
        asyncore.dispatcher.__init__(self)
        self.create_socket()
        self.set_reuse_addr()
        self.bind((host, port))
        self.listen(5)

    def handle_accepted(self, sock, addr):
        print('Incoming connection from %s' % repr(addr))
        handler = EchoHandler(sock)

server = EchoServer('localhost', 8080)
asyncore.loop()
</code></pre>
<p>The client side code is the C++ boost asio code:</p>
<pre><code>// echo_client.cpp
// g++ -o echo_client -O3 echo_client.cpp -lboost_system -lboost_thread
#include &lt;boost/asio.hpp&gt;
namespace asio = boost::asio;
using asio::ip::tcp;
#include &lt;boost/bind.hpp&gt;
#include &lt;boost/shared_ptr.hpp&gt;
#include &lt;boost/enable_shared_from_this.hpp&gt;


class session
: public boost::enable_shared_from_this&lt;session&gt;
{
    public:
    session(asio::io_service&amp; io)
    : socket_(io)
    { }

    tcp::socket&amp; socket()
    { return socket_; }

    void start()
    {
        asio::async_write(socket_, asio::buffer(output_buffer_, 12), boost::bind(&amp;session::handle_write, shared_from_this(), _1, _2));
    }

    void handle_write(const boost::system::error_code&amp; ec, std::size_t bytes_transfered)
    {
        if(!ec)
        {
            asio::async_read(socket_, asio::buffer(input_buffer_, 12), boost::bind(&amp;session::handle_read, shared_from_this(), _1, _2));
        } else {
            std::cerr &lt;&lt; "write error:" &lt;&lt; ec.message() &lt;&lt; std:: endl;
        }
    }

    void handle_read(const boost::system::error_code&amp; ec, std::size_t bytes_transfered)
    {
        if(ec)
        {
            std::cerr &lt;&lt; "read error:" &lt;&lt; ec.message() &lt;&lt; std::endl;
        }
    }

    private:
    tcp::socket socket_;
    char output_buffer_[12];
    char input_buffer_[12];
};


void handle_connect(boost::shared_ptr&lt;session&gt; session_ptr, const boost::system::error_code&amp; ec)
{
    if(ec)
    {
        std::cerr &lt;&lt; "connect error:" &lt;&lt; ec.message() &lt;&lt; std::endl;
    } else {
        session_ptr-&gt;start();
    }
}


int main(int argc, char* argv[])
{
    asio::io_service io;
    tcp::resolver resolver(io);
    tcp::resolver::iterator endpoint = resolver.resolve(tcp::resolver::query("localhost", argv[1]));
    boost::shared_ptr&lt;session&gt; session_ptr;
    for(int i = 0; i &lt; 10; i++)
    {
        session_ptr.reset(new session(io));
        asio::async_connect(session_ptr-&gt;socket(), endpoint, boost::bind(handle_connect, session_ptr, _1));
    }
    io.run();
}
</code></pre>
<p>When I start the server and then run the C++ boost client side code using <code>./echo_client 8080</code>, the output is:</p>
<pre><code>write error:?8??
write error:?8???8??]?@?]?????8?8???8?
write error:    ?8???????]??]???]?
write error:?8???????]??]?????8???8?
write error:?8???????]??]????
                             ?8??
                                 ?8?
?8???`?8?or:?8???????]??]????
write error:?8??????
write error:?8???????]??]???@?8? ?8?@?8?????8?`?]???]?
write error:?8???????]??]????8???8??8?
write error:?8???????]??]???
</code></pre>
<p>What's the reason of it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your Python script is only able to handle a backlog of 5 connections. Your client is initiating 10 connections in rapid succession, too fast for the server to handle them, so the connections are being dropped. I got:</p>
<pre><code>$ ./echo_client 8080
write error:Broken pipe
write error:Broken pipe
read error:Connection reset by peer
write error:Broken pipe
$ 
</code></pre>
<p>Change <code>self.listen(5)</code> to something larger. I used <code>self.listen(15)</code>, and there was no error.</p>
<p>As for why the error message is displaying question marks, that may be an issue of the encoding used by your C++ program vs. the encoding expected by your terminal. The error messages displayed on my system (Mac OS X 10.9) were as shown above.</p>
</div>
