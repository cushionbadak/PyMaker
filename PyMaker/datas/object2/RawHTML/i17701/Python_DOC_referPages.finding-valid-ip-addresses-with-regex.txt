<div class="post-text" itemprop="text">
<p>I have the following string:</p>
<pre><code>text = '10.0.0.1.1 but 127.0.0.256 1.1.1.1'
</code></pre>
<p>and I want to return the valid IP addresses, so it should only return <code>1.1.1.1</code> here since <code>256</code> is higher than <code>255</code> and the first IP has too many numbers.</p>
<p>so far I have the following but it doesn't work on the <code>0-255</code> requirement.</p>
<pre><code>text = "10.0.0.1.1 but 127.0.0.256 1.1.1.1"
l = []
import re
for word in text.split(" "):
    if word.count(".") == 3:
        l = re.findall(r"[\d{1,3}]+\.[\d{1,3}]+\.[\d{1,3}]+\.[\d{1,3}]+",word)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a python regex that does a pretty good job of fetching valid IPv4 IP addresses from a string:</p>
<pre class="lang-py prettyprint-override"><code>import re
reValidIPv4 = re.compile(r"""
    # Match a valid IPv4 in the wild.
    (?:                                         # Group two start-of-IP assertions.
      ^                                         # Either the start of a line,
    | (?&lt;=\s)                                   # or preceeded by whitespace.
    )                                           # Group two start-of-IP assertions.
    (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)    # First number in range 0-255 
    (?:                                         # Exactly 3 additional numbers.
      \.                                        # Numbers separated by dot.
      (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)  # Number in range 0-255 .
    ){3}                                        # Exactly 3 additional numbers.
    (?=$|\s)                                    # End IP on whitespace or EOL.
    """, re.VERBOSE | re.MULTILINE)

text = "10.0.0.1.1 but 127.0.0.256 1.1.1.1"
l = reValidIPv4.findall(text)
print(l)
</code></pre>
</div>
<span class="comment-copy">why not just <a href="http://answers.oreilly.com/topic/318-how-to-match-ipv4-addresses-with-regular-expressions" rel="nofollow noreferrer">use google</a>?</span>
<span class="comment-copy">can also try <a href="http://www.mkyong.com/regular-expressions/how-to-validate-ip-address-with-regular-expression" rel="nofollow noreferrer">this one</a>.</span>
<span class="comment-copy">May be useful: <a href="http://stackoverflow.com/questions/11264005/using-a-regex-to-match-ip-addresses-in-python" title="using a regex to match ip addresses in python">stackoverflow.com/questions/11264005/â€¦</a></span>
<span class="comment-copy">why not just use ipaddress ? <a href="http://docs.python.org/3/howto/ipaddress.html" rel="nofollow noreferrer">docs.python.org/3/howto/ipaddress.html</a> There is a port for python2.x on pypi</span>
<span class="comment-copy">I'm confused by your comments, does it start on group two or one? I see that comment listed twice and I'm trying to understand more.</span>
<span class="comment-copy">@wannabe_n00b - I can see why you were confused - poor wording on my part. There are actually no capture groups in this regex. The first (non-capturing) group is: <i>"grouping two alternatives, each of which is an assertion"</i> I always repeat the comment at the close of each group to associate the start and the end of the group comment-wise.</span>
<span class="comment-copy">what would the effect be if I changed your code to [01]?[0-9]?[0-9]? It seems like it would be better?</span>
<span class="comment-copy">@wannabe_n00b - The expression: <code>[01]?[0-9]?[0-9]?</code> matches an empty string (i.e. this matches every position in every string that has ever existed). This won't work because there needs to be at least one digit in each of the 4 IPv4 dotted quad positions.</span>
<span class="comment-copy">If you had an IP that was "0.0.0.1", How would this IP be evaluated against <code>[01]?[0-9][0-9]?</code> Wouldn't the <code>[01]?</code>  pick up the numbers but then fail on the manditory <code>[0-9]</code></span>
