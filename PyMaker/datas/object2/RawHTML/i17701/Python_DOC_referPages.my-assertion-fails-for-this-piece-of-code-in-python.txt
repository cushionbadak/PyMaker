<div class="post-text" itemprop="text">
<pre><code>def test_string_membership():
    assert False == 'c' in 'apple'
    assert True == 'a' in 'apple'
    assert True == 'app' in 'apple'
</code></pre>
<p>p.s:- I am a beginner in python and unable to find out whats wrong. My assertion fails when I run the code.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>False == 'c' in 'apple'</code> is not interpreted as </p>
<pre><code>False == ('c' in 'apple')
</code></pre>
<p>but,</p>
<pre><code>(False == 'c') and ('c' in apple)
</code></pre>
<p>becaue of <a href="http://docs.python.org/2/reference/expressions.html#not-in" rel="nofollow noreferrer">comparison chaining</a>.</p>
<hr/>
<p>To get what you want, put parentheses explicitly.</p>
<pre><code>False == ('c' in 'apple')
</code></pre>
<p>or more preferably use <code>in</code> / <code>not in</code>:</p>
<pre><code>def test_string_membership():
    assert 'c' not in 'apple'
    assert 'a' in 'apple'
    assert 'app' in 'apple'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have a problem with comparison chaining, the Python syntax that treats:</p>
<pre><code>x &lt; y &lt; z
</code></pre>
<p>as:</p>
<pre><code>x &lt; y and y &lt; z.
</code></pre>
<p>In your case, that means the expression <code>False == 'c' in 'apple'</code> is being treated as:</p>
<pre><code>(False == 'c') and ('c' in 'apple')
</code></pre>
<p>both of which are false, hence causing the assertion. Details on comparison chaining for Python 3 can be found <a href="http://docs.python.org/3/reference/expressions.html#not-in" rel="nofollow">here</a>.</p>
<p>So the way to avoid this chianing is to make the expression explicit, with something like:</p>
<pre><code>assert False == ('c' in 'apple')
assert True == ('a' in 'apple')
assert True == ('app' in 'apple')
</code></pre>
<p>or, even better, since comparing with <code>true/false</code> is rarely a good idea:</p>
<pre><code>assert 'c' not in 'apple' # or "not('c' in 'apple')" if you're testing 'in'.
assert 'a' in 'apple'
assert 'app' in 'apple'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Contrary to the other answers, what is happening here is not operator precedence but <a href="http://docs.python.org/2/reference/expressions.html#not-in" rel="nofollow">comparison chaining</a>.  <code>a == b in c</code> means <code>(a == b) and (b in c)</code>, just like <code>a &lt; b &lt; c</code> means <code>(a &lt; b) and (b &lt; c)</code>.  However, in either case, the upshot is the same, which is that it's not what you meant to do.  As noted in the other answers and comments, it can be fixed by using parentheses, or, better, by not using an equality comparison at all and just doing <code>assert 'c' not in 'apple'</code>.</p>
<p>You can see that this is comparison chaining by a slightly different example:</p>
<pre><code>&gt;&gt;&gt; 'a' == 'a' in 'ab'
True
</code></pre>
<p>This would obviously be false no matter which way the precedence went, but it is true because <code>'a' == 'a'</code> and <code>'a' in 'ab'</code> are both true.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using parenthesis should solve this as in</p>
<pre><code>def test_string_membership():
    assert False == ('c' in 'apple')
    assert True == ('a' in 'apple')
    assert True == ('app' in 'apple')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use <code>()</code> in this case. There are better ways to do what you are trying.</p>
<pre><code>def test_string_membership():
    assert False == ('c' in 'apple')
    assert True == ('a' in 'apple')
    assert True == ('app' in 'apple')
</code></pre>
<p>This is because of precedence. Read more about this on <a href="http://docs.python.org/2/reference/expressions.html#operator-precedence" rel="nofollow">Python docs</a>.</p>
<p><code>in, not in, is, is not, &lt;, &lt;=, &gt;, &gt;=, &lt;&gt;, !=, ==</code> are in the same precedence level. So Python will evaluate</p>
<pre><code>False == 'c' in 'apple'
</code></pre>
<p>from left to right.</p>
</div>
<span class="comment-copy">Even if you got the precedence right (e.g., with parentheses), this is not Pythonic, and overly complicated. You should almost never compare things to <code>True</code> or <code>False</code>; if you want to test if something is true, just do <code>if something</code>; if you want to test if it's false, <code>if not something</code>.</span>
<span class="comment-copy">Also, the "put the constants on the left in any comparison" rule that you probably learned for C or a related language is not a good rule for Python. In C, accidentally writing <code>if (foo = 0)</code> when you meant <code>if (foo == 0)</code> silently does the wrong thing, while <code>if (0 = foo)</code> gives you an obvious error. But in Python, <code>if spam = 0</code> already gives you an obvious error, so this is unnecessary. And putting things in the natural order "if the thing I'm checking equals the value I expect" rather than backward makes your code more readable (at least to people used to Python code).</span>
<span class="comment-copy">thank you @abarnert will do :)</span>
<span class="comment-copy">Specifically, <code>==</code> and <code>in</code> have the same level of precedence. Operators that have the same level of precedence are interpreted from left to right in the expression. <a href="http://docs.python.org/2/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">docs.python.org/2/reference/â€¦</a></span>
<span class="comment-copy">thanks @falsetru :)</span>
<span class="comment-copy">@paxdiablo: It's definitely not magically converting to <code>str</code> like that. If so, <code>2 in '123'</code> would be <code>True</code> instead of a <code>TypeError</code>.</span>
<span class="comment-copy">This is incorrect, it is comparison chaining, not precedence.</span>
<span class="comment-copy">You don't need to do any disassembly, it's <a href="http://docs.python.org/2/reference/expressions.html#not-in" rel="nofollow noreferrer">in the docs</a>.</span>
<span class="comment-copy">thanks @paxdiablo :)</span>
<span class="comment-copy">thanks @Bharadwaj :)</span>
<span class="comment-copy">I wouldn't say you <b>must</b> use <code>()</code> - <code>assert 'c' in 'apple' == False</code> would do what the OP expects. Or, as falsetru suggests, <code>assert 'c' not in 'apple'</code></span>
<span class="comment-copy">thanks @christian :)</span>
