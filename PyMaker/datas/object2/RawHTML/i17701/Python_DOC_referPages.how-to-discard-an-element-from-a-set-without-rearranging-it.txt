<div class="post-text" itemprop="text">
<p>I have a list of strings and want to remove ' ' if it exists in the list so I converted it into a set and did this</p>
<pre><code>input=set(input)
input.discard('')
input=list(input)
</code></pre>
<p>I am able to discard ' ' if it exists but my set(and list) is being rearranged.can this be prevented?</p>
<p>p.s:- input is my list, i am a beginner in python.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; lst = ['a', 'b', '', 'c', '', 'd']
&gt;&gt;&gt; lst = [x for x in lst if x != '']
&gt;&gt;&gt; lst
['a', 'b', 'c', 'd']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using functional programming concepts:</p>
<pre><code>&gt;&gt;&gt; my_list = ['hello', 'there', '', 'I', 'try', '', 'to', 'be', 'helpful']
&gt;&gt;&gt; my_list = filter(lambda a: a != '', my_list)
&gt;&gt;&gt; my_list
['hello', 'there', 'I', 'try', 'to', 'be', 'helpful']
</code></pre>
<p>I was interested in the variety of answers, so I ran some comparisons.</p>
<pre><code>import time

num_trials = 1000000
my_list = ['a', 'b', '', 'c', '', 'd']
start = time.time()
for i in xrange(num_trials):
    [x for x in my_list if x != '']
end = time.time()
list_comp = (end - start) / num_trials

start = time.time()
for i in xrange(num_trials):
    filter(lambda a: a != '', ['a', 'b', '', 'c', '', 'd'])
end = time.time()
functional = (end - start) / num_trials

print "Over {0} trials...".format(num_trials)
print "Using list comprehension, the average time to execute was {0}".format(list_comp)
print "Using filter and lambda, the average time to execute was {0}".format(functional)

#Over 1000000 trials...
#Using list comprehension, the average time to execute was 2.03965497017e-06
#Using filter and lambda, the average time to execute was 3.60413718224e-06
</code></pre>
<p>So it appears that list comprehension is slightly faster, at least for the list that I tested.</p>
<p><strong>EDIT:</strong> My apologies! The list comprehension was using the preallocated list <code>my_list</code>, whereas I was making the lambda+filter expression allocate memory for a new list every time! I also included a test for the author's accepted answer, <code>filter(None, my_list)</code>. That code looks like:</p>
<pre><code>start = time.time()
for i in xrange(num_trials):
        filter(None, my_list)
end = time.time()
filter_none = (end - start) / num_trials
</code></pre>
<p>And the new output is:</p>
<pre><code>#Over 1000000 trials...
#Using list comprehension, the average time to execute was 1.80612707138e-06
#Using filter and lambda, the average time to execute was 2.1211681366e-06
#Using filter(None), the average time to execute was 1.11886692047e-06
</code></pre>
<p>So, it appears that <code>filter(None, some_list)</code> takes the cake!</p>
</div>
<div class="post-text" itemprop="text">
<p>Converting a list into a set does not preserve the order:</p>
<pre><code>list(set([3, 2, 1]))
</code></pre>
<p>yields</p>
<pre><code>[1, 2, 3]
</code></pre>
<p>Filter your list with a <a href="http://docs.python.org/3.3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">for comprehension</a> instead:</p>
<pre><code>list = [elem for elem in list if n != unwantedElem]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Set</strong> operation should not be used in this cases. Set operation will make your list elements unique. i.e if you have two or more same string repeated multiple times, then the duplicate strings will be removed. List comprehension should be used here. That will preserve the older </p>
<pre><code>&gt;&gt;&gt; a = ['apple', 'orange', '', 'grapes', 'pineapple', '', 'cherry', '']
&gt;&gt;&gt; [ x for x in a if x != '' ] 
['apple', 'orange', 'grapes', 'pineapple', 'cherry']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thanks people, but what i needed was </p>
<pre><code>filter(None, some_list)
</code></pre>
<p>found it</p>
</div>
<span class="comment-copy">Sets are not ordered.  You cannot rely on the elements of a set having any particular order.</span>
<span class="comment-copy">Sets also discard duplicate elements. Do you want to remove duplicates as well as ''?</span>
<span class="comment-copy">there's a <i>timeit</i> model that provides a convenient wrapper for execution time measurements. And yes, list comprehension is faster</span>
<span class="comment-copy">I was trying to use the timeit module, but I was getting execution times of 2-3 seconds per list comprehension! Should I be using <code>timeit.timeit("expression_to_be_evaluated")</code>?</span>
<span class="comment-copy">timeit gives you overall time for a huge number of iteration. On Ubuntu's iPython (maybe other Linux flavors too) there's a magical operator <b>%timeit</b>, which gives you pure per-loop result. and yes, it is <b>timeit.timeit</b> - but I haven't used it for a while. Though it is more precise form (explicit initialization, etc...)</span>
<span class="comment-copy">To be consistent - try the comprehension as <b>[x for x in my_list if x]</b>, because this is the way your solution with <b>filter</b> works. Besides - <i>lambda</i> is known to add overhead.</span>
<span class="comment-copy">This is the fastest one I've tested. It's rather Pythonic too!</span>
<span class="comment-copy">That's weird. I always thought the first argument of filter had to be a function.</span>
<span class="comment-copy">Good to know, though. Do note that this would also filter 0, None, and false from a list.</span>
