<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4869770/why-does-python-assignment-not-return-a-value">Why does Python assignment not return a value?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>There is nice post on <a href="https://stackoverflow.com/questions/4869770/why-does-python-assignment-not-return-a-value">why does python assignment not return value:</a>. But I fail to understand, why it is not an <code>expression</code> in python:
The following is legal in Java:</p>
<pre><code>           int w=5;

        while (w-- &gt; 2){
            System.out.println(w);
        }
</code></pre>
<p>even here, if my understanding is correct, the <code>assignment w-- (w=w-1)</code> does not return anything, but sets the value for w; here <code>assignment</code> is followed by <code>expression</code> (comparison)</p>
<p>while <code>w--,</code> is not allowed in python, even assignments followed by expression is not allowed
eg:</p>
<pre><code>#this code does not mean anything, an assignment followed by expression pattern.

&gt;&gt;&gt; while ((b=10)!=5):
  File "&lt;stdin&gt;", line 1
    while ((b=10)!=5):
</code></pre>
<p>many posts claim that typo error <code>=</code> vs <code>==</code> would lead to an <code>assignment</code> rather than <code>comparison</code>. but I fail to see this above, the <code>assignment of b=10</code> happens first because it is parenthesized, then it is compared to check if it is <code>equal to 5</code>. There is an <code>expression</code> in the <code>while</code> statement.</p>
<p>Thanks for helping out</p>
</div>
<div class="post-text" itemprop="text">
<p>from a BNF grammar standpoint, an assignment is made up of an identifier being bound to an expression that reduces to a type (primitive explanation, but you get the idea), whereas an expression does not contain assignments. This is the structure of the grammar of the language. <a href="http://docs.python.org/2/reference/simple_stmts.html" rel="nofollow">Look through the grammar</a> and you will see that expressions cannot contain assignments.</p>
<p><code>w--</code> is an expression with a <strong>side-effect</strong>, so at its core it is still an expression (moot since it doesn't exist in python). Changing the state of the machine drastically in the middle of an expression evaluation can be seen as dangerous.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you linked to the discussion <a href="https://stackoverflow.com/questions/4869770/why-does-python-assignment-not-return-a-value">Why does Python assignment not return a value</a>, I'll assume you understand that part.</p>
<p>What you're missing is a fundamental assumption that wasn't stated explicitly in the answers to that question, and which is often not stated explicitly:</p>
<p>Python does not have any way to embed statements into <a href="http://docs.python.org/3/reference/expressions.html#" rel="nofollow noreferrer">expressions</a>.</p>
<hr/>
<p>If this were not true, there would be no point in having the statement-expression divide in the first place. That's why scripting languages that <em>can</em> embed statements into expressions, like JavaScript and Ruby (and, to a lesser extent, traditional C-family languages like Java and C++*), generally try to make everything possible into an expression, with some kind of useful value. There's no good reason <em>not</em> to do so in those languages.</p>
<p>Because it <em>is</em> true, Python gets a number of benefits from the statement-expression divide that make it easier to read, and easier to parse. For example, indentation-based block structure is much more complicated (both for the interpreter, and for the reader) if you can indirectly start a new statement in the middle of another one.</p>
<p>There's another property that <em>is</em> discussed, but which relies on some conventions in the stdlib and third-party code and in your own code. As long as nobody writes functions that both mutate state and return a useful value, you know that each statement changes exactly one thing—whether it's an assignment statement, or an expression statement with a mutating function call.** Yes, you <em>can</em> subvert it (e.g., you can toss a <code>n.sort()</code> into a list comprehension if you really want to), but unless you go out of your way to do so, this feature dramatically improves the readability of state-mutating imperative code.</p>
<hr/>
<p>Once you realize that you can never embed statements into expressions, your question becomes trivial. Since <code>b=10</code> is a statement, it cannot be embedded in an expression.</p>
<hr/>
<p>* Or, really, most Algol-family languages, of which the C family are just one branch. In fact, Algol 68 found a simple way to turn everything into an expression—make a statement a kind of expression. Most other Algol derivates didn't pick that up, and over the years have rebuilt it by turning more and more kinds of statements into expressions…</p>
<p>** Well, obviously <code>a, b = 2, 3</code> or <code>a = b = 2</code> change two things—but it's still obvious what those two things are, and where to find them in the statement.</p>
</div>
<span class="comment-copy">It's not clear how this question differs from the previous question.  Could you clarify what you're asking that's different?</span>
<span class="comment-copy">Ok, but the previous question already explains that assignments are not expressions.  So clearly they can't form part of larger expressions.</span>
<span class="comment-copy">What the answer in the other question you linked to is talking about is that the reason why the designers of Python decided not to make assignment an expression is because they decided it is too dangerous and would lead to too many people making errors such as typing <code>if (a = b)</code> instead of <code>if (a == b)</code> and breaking their code.</span>
<span class="comment-copy">@abarnert: initialization (int a = 5) is an assignment statement in Java. <a href="http://java.about.com/od/understandingdatatypes/a/declaringvars.htm" rel="nofollow noreferrer">java.about.com/od/understandingdatatypes/a/declaringvars.htm</a></span>
<span class="comment-copy">@OliCharlesworth: I believe you people more than JLS. thats why I am trying to understand things clearly. our College profs, taught us differently. so thats where the confusion. anyway, Thanks for it</span>
<span class="comment-copy">so what is this: <code>a += 1</code>, that is an assignment statement and not expression?</span>
<span class="comment-copy">@user1988876: In Python? Yes, of course it is. See <a href="http://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements" rel="nofollow noreferrer">Augemented assignment statements</a>. There are no assignment expressions in Python, augmented or otherwise.</span>
<span class="comment-copy">That exactly right. In Java, there are assignment statements and assignment expression, when you dont have <code>;</code>, it becomes expression, but there is a comment above, that the one with <code>;</code> is not assignment statement but initializion which I fail to understand the difference..please see the comments right below the question</span>
<span class="comment-copy">its not me who brought that, it is olicharlesworth, who brought it up. anyway, you have marked it as duplicate, which I fail to see why, since the answer you provided were not in the link the above. anyway, its not worth discussing a duplicate</span>
<span class="comment-copy">@user1988876: Either (a) what you're asking about is a duplicate of the other question, or (b) you're asking something about Java and all the Python is a red herring, or (c) what you're missing is the fact that Python generally does not allow embedding statements into expressions. I'm not sure which. I wrote the answer in case it's c, and voted to close in case it's a or b. I'm hoping you'll clarify, in which case we can reopen the question if necessary, but I'm not all that hopeful at this point.</span>
