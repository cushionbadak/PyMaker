<div class="post-text" itemprop="text">
<p>I need to create a Python 3.3 program that searches a file for a specific string and prints the line if the string is found. I have code that works but I am forced to rewrite the program each time I want to run it. </p>
<pre><code>import re
fh = open('C:\Web_logs\ex130801.txt')
for line in fh:
    if "admin_" in line:
        print(line)
</code></pre>
<p>Is there a way to accept user input for the fileâ€™s path, i.e. C:\Web_logs\ex130801.txt? </p>
</div>
<div class="post-text" itemprop="text">
<p>Sure, you can use the <a href="http://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow"><code>sys.argv</code> list</a> to read a filename from the command line:</p>
<pre><code>import sys

with open(sys.argv[1]) as fh:
    for line in fh:
        if "admin_" in line:
            print(line)
</code></pre>
<p>You need to invoke your script with the filename on the command line:</p>
<pre><code>python scriptname.py C:\Web_logs\ex130801.txt
</code></pre>
<p>Another option is to use the <a href="http://docs.python.org/3/library/functions.html#input" rel="nofollow"><code>input()</code> function</a> to ask the user to enter a filename when the script is running:</p>
<pre><code>filename = input('Please enter a filename: ')    
with open(filename) as fh:
    for line in fh:
        if "admin_" in line:
            print(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow">argparse module</a>, new in 3.2.</p>
<p>First, import the library at the top of your file:</p>
<pre><code>import argparse
</code></pre>
<p>Then, create a parser object, and tell it that you're looking for two command-line strings, the first one the filename and the second one the string you are searching for:</p>
<pre><code>parser = argparse.ArgumentParser(description='searches a file for a specific string and prints the line if the string is found.')
parser.add_argument("filename", type=str,help="file to search through")
parser.add_argument("searchstring", type=str, help="string to look for")
</code></pre>
<p>Then, run the parser object on the command line, getting back an object that contains the fields you are looking for, as strings:</p>
<pre><code>args = parser.parse_args()
</code></pre>
<p>Now, "args.filename" contains your filename and "args.searchstring" contains the search string, so rewrite your loop this way:</p>
<pre><code>fh = open(args.filename)
for line in fh:
    if args.searchstring in line:
        print(line)
</code></pre>
<p>From the command line, one of your users can now just do:</p>
<pre><code>$ python3 searcher.py /usr/dict/words bana
</code></pre>
<p>The best part is, if you user fails to give the arguments you are looking for, the script nicely tells them the syntax you are looking for:</p>
<pre><code>$ python3 searcher.py
usage: searcher.py [-h] filename searchstring
searcher.py: error: the following arguments are required: filename, searchstring
</code></pre>
<p>Even better, the user can enter the --help option to get documentation for your program:</p>
<pre><code>python3 .\searcher.py --help
usage: searcher.py [-h] filename searchstring

searches a file for a specific string and prints the line if the string is found.

positional arguments:
  filename      file to search through
  searchstring  string to look for

optional arguments:
  -h, --help    show this help message and exit
</code></pre>
<p>Don't forget that you can also add #!/usr/bin/python3 to the top of your code and change the executable flag and then it isn't necessary to type python3 on the command line.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re
path = input("Please enter path to file: ")
fh = open(path)
for line in fh:
    if "admin_" in line:
        print(line)
</code></pre>
<p>Remember to close your file when you're done! A more Pythonic way, assuming you don't need to do something else to the file:</p>
<pre><code>import re
path = input("Please enter path to file: ")
with open(path) as fh:
    for line in fh:
        if "admin_" in line:
            print(line)
</code></pre>
<p>The <code>with</code> statement closes the file object once you leave that block.</p>
</div>
<span class="comment-copy">you could also just use grep...</span>
<span class="comment-copy">Very clear and concise answer. +1</span>
