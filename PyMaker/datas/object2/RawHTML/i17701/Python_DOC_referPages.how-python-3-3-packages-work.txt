<div class="post-text" itemprop="text">
<p>I'm using Python 3.3, testing this on Windows. I don't understand something. Why when I do:</p>
<pre><code>&gt;&gt;&gt; import urllib
</code></pre>
<p>I'm getting error</p>
<pre><code>&gt;&gt;&gt; urllib.request
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'request'
</code></pre>
<p>and</p>
<pre><code>&gt;&gt;&gt; dir(urllib)
['__builtins__', '__cached__', '__doc__', '__file__', '__initializing__', 
 '__loader__', '__name__', '__package__', '__path__']
</code></pre>
<p>There is no request, so it looks solid. However when importing submodule request:</p>
<pre><code>&gt;&gt;&gt; import urllib.request
</code></pre>
<p>It seems to work</p>
<pre><code>&gt;&gt;&gt; urllib.request
&lt;module 'urllib.request' from 'C:\\Python33\\lib\\urllib\\request.py'&gt;
</code></pre>
<p>And now automagically <code>dir(urllib)</code> shows:</p>
<pre><code>&gt;&gt;&gt; dir(urllib)
['__builtins__', '__cached__', '__doc__', '__file__', '__initializing__', 
 '__loader__', '__name__', '__package__', '__path__', 'error', 'parse', 
 'request', 'response']
</code></pre>
<p>Why I don't see after <code>import urllib</code> all submodules? According to <a href="http://docs.python.org/3.3/library/urllib.html#urllib.urlopen" rel="nofollow">http://docs.python.org/3.3/library/urllib.html#urllib.urlopen</a> it should be <code>request</code>, <code>error</code>, <code>parse</code>, <code>parserobots</code>. Does it differ in other OSes?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you are</p>
<pre><code>&gt;&gt;&gt; import package
&gt;&gt;&gt; package.something
</code></pre>
<p>what you are really doing is looking for name <code>something</code> defined in <code>package/__init__.py</code>. So if someone explicitly put some names there you can use it. Otherwise you can't.</p>
<p>Look at the Python <code>web.py</code> library for example (<a href="https://github.com/webpy/webpy" rel="nofollow">github</a>). You can</p>
<pre><code>&gt;&gt;&gt; import web  # which is a package
&gt;&gt;&gt; web.httpserver  # which is a module located in web/httpserver.py
&lt;module 'web.httpserver' ...&gt;
</code></pre>
<p>It's here because in <code>web/__init__.py</code> there is an explicit <code>import httpserver</code> or similar statement.</p>
<p>It's not a Python 3 issue actually. You run into it in Python 3 because it uses packages for standard library not just a plain modules like Python 2. And <code>urllib/__init__.py</code> is <a href="https://github.com/python-mirror/python/blob/ccc81a2e5267b0fe29f14503c4e0c41672f79724/Lib/urllib/__init__.py" rel="nofollow">currently empty</a> for some reason so you need to explicitly <code>import</code> exact modules like <code>request</code> to use them. For some standard packages Python 3 <code>import</code> some of the "submodules" in corresponding <code>__init__.py</code> files. Maybe it's just for backward compatibility though.</p>
<p>Another question is why after just <code>import urllib.request</code> your <code>dir(urllib)</code> shows other modules like <code>response</code>. Looks like all the modules from the same package used internally by <code>urllib.request</code> become available after <code>import</code>. If you just <code>import urllib.error</code> you don't get <code>request</code> because <code>error</code> not uses it. All of this become more understandable if you check the source code of Python importing system - it's full of side effects (e.g. "caching" imported modules using global <code>sys.modules</code> dictionary).</p>
</div>
<div class="post-text" itemprop="text">
<p><code>urllib</code> is a package. Importing a package won't automatically import the modules the package contains; you need to explicitly import the <code>urllib.request</code> module.</p>
</div>
<div class="post-text" itemprop="text">
<p>Lets have a look at <a href="http://docs.python.org/3/tutorial/modules.html#the-dir-function" rel="nofollow noreferrer"><code>dir()</code></a>. As stated in documentation, it lists names defined in module - and packages module is its <code>__init__.py</code>. <code>request</code> is not defined in <code>urllib</code>s <code>__init__</code>, so it won't be listed.</p>
<p>And now, for "how packages work" - package is some kind of directory-based module. It is loaded from its <code>__init__.py</code>, but allows for submodules and subpackages (being files and directories in the same directory as <code>__init__</code>). Now, when you load package (e.g. <code>urllib</code>) you don't load ("load" meaning "execute its code") all files and directories in it, but only it's "initializer" (think of <code>__init__.py</code> as <code>__init__</code> method of the class, but for module - in the end module and class are both objects, right?).</p>
<p>Comparison to class is quite good - when you create object, you call only it's <code>__init__</code>, method, not all of its attributes (methods are attributes too). Also, attributes can be functions or fields. Fields can also have attributes. To clarify:</p>
<ul>
<li><p><code>__init__.py</code> is for package what <code>__init__</code> is for object</p></li>
<li><p>submodule is for package what method (function attribute) is for object</p></li>
<li><p>subpackage is for package what field (non-function attribute) is for object.</p></li>
</ul>
<p>Why? <code>__init__</code> takes care of setting objects up, submodules/methods are ways of storing logic in one place, and subpackages/fields are ways of organizing other submodules/methods or sub-subpackages/fields.</p>
<p>To be frank: it doesn't work like this in CPython implementation, but it is quite good model for understanding how it will behave.</p>
</div>
<span class="comment-copy">I though that response is not a module but object introduced to urllib package after <code>import urllib.request</code> but after checking in interpreter it says it's module indeed. Thanks for clarification!</span>
<span class="comment-copy">Yeah, very strange thing. It takes place in <a href="https://github.com/python-mirror/python/blob/master/Lib/importlib/_bootstrap.py#L2206" rel="nofollow noreferrer">this</a> messy line.</span>
<span class="comment-copy">It doesn't really answer the question stated in topic.</span>
<span class="comment-copy">Agree with Filip, I figured out what I have to do and even described it in question, but I'm asking why I have to do it. Anyway thanks! :)</span>
<span class="comment-copy">Now I understand even less. I though that there are modules and modules has packages. I found way of listing packages here <a href="http://stackoverflow.com/questions/2536610/python-list-modules-within-the-package" title="python list modules within the package">stackoverflow.com/questions/2536610/â€¦</a>. But it seems to be reverse. There is top level packages, that can be separated into modules. Modules may be imported by default when importing package but don't have to. But submodules and subpackages doesn't fit to my view. What I'm missing?</span>
