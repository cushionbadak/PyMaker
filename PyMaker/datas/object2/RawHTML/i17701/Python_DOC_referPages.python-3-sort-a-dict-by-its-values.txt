<div class="post-text" itemprop="text">
<p>The only methods I found work for python2 or return only list of tuples.</p>
<p>Is it possible to sort dictionary, e.g. <code>{"aa": 3, "bb": 4, "cc": 2, "dd": 1}</code>, by its values?</p>
<p>Order of sorted dictionary I want to achieve is from largest to smallest. I want results to look like this:</p>
<pre><code>bb 4
aa 3
cc 2
dd 1
</code></pre>
<p>And after sorting I want to store it into a text file.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>itemgetter</code> (see other answers) is (as I know) more efficient for large dictionaries but for the common case, I believe that <code>d.get</code> wins. And it does not require an extra <code>import</code>.</p>
<pre><code>&gt;&gt;&gt; d = {"aa": 3, "bb": 4, "cc": 2, "dd": 1}
&gt;&gt;&gt; s = [(k, d[k]) for k in sorted(d, key=d.get, reverse=True)]
&gt;&gt;&gt; for k, v in s:
...     k, v
...
('bb', 4)
('aa', 3)
('cc', 2)
('dd', 1)
</code></pre>
<p>Note that alternatively you can set <code>d.__getitem__</code> as <code>key</code> function which may provide a small performance boost over <code>d.get</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import OrderedDict
from operator import itemgetter    

d = {"aa": 3, "bb": 4, "cc": 2, "dd": 1}
print(OrderedDict(sorted(d.items(), key = itemgetter(1), reverse = True)))
</code></pre>
<p>prints</p>
<pre><code>OrderedDict([('bb', 4), ('aa', 3), ('cc', 2), ('dd', 1)])
</code></pre>
<p>Though from your last sentence, it appears that a list of tuples would work just fine, e.g.</p>
<pre><code>from operator import itemgetter  

d = {"aa": 3, "bb": 4, "cc": 2, "dd": 1}
for key, value in sorted(d.items(), key = itemgetter(1), reverse = True):
    print(key, value)
</code></pre>
<p>which prints</p>
<pre><code>bb 4
aa 3
cc 2
dd 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To sort dictionary, we could make use of operator module. <a href="https://docs.python.org/2/library/operator.html">Here</a> is the operator module documentation. </p>
<pre><code>import operator                             #Importing operator module
dc =  {"aa": 3, "bb": 4, "cc": 2, "dd": 1}  #Dictionary to be sorted

dc_sort = sorted(dc.items(),key = operator.itemgetter(1),reverse = True)
print dc_sort
</code></pre>
<p>Output sequence will be a sorted list :</p>
<pre><code>[('bb', 4), ('aa', 3), ('cc', 2), ('dd', 1)]
</code></pre>
<p>If we want to sort with respect to keys, we can make use of </p>
<pre><code>dc_sort = sorted(dc.items(),key = operator.itemgetter(0),reverse = True)
</code></pre>
<p>Output sequence will be :</p>
<pre><code>[('dd', 1), ('cc', 2), ('bb', 4), ('aa', 3)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simpler (and ~10% faster) way is to use a lambda expression</p>
<pre><code>d = {'aa': 3, 'bb': 4, 'cc': 2, 'dd': 1}
s = sorted(d.items(), key=lambda x: x[1], reverse=True)

for k, v in s:
    print(k, v)
</code></pre>
<p><strong>Timings</strong></p>
<p><code>%%timeit</code> on CPython 3.7 with <code>print(k, v)</code> substituted for <code>pass</code> to keep IO out of the picture.</p>
<p>Accepted answer using d.get():</p>
<pre><code>1.19 µs ± 16.3 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre>
<p>Lambda expression:</p>
<pre><code>1.07 µs ± 10.7 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To sort a dictionary and keep it functioning as a dictionary afterwards, you could use <a href="http://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow">OrderedDict</a> from the standard library.</p>
<p>If that's not what you need, then I encourage you to reconsider the sort functions that leave you with a list of tuples.  What output did you want, if not an ordered list of key-value pairs (tuples)?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to sort by <strong>values</strong> in <strong>reverse</strong> order (largest to smallest)</p>
<pre><code>{k: d[k] for k in sorted(d, key=d.get, reverse=True)}
# {'b': 4, 'a': 3, 'c': 2, 'd': 1}
</code></pre>
<p>If you want to sort by <strong>values</strong> in regular order (smallest to largest)</p>
<pre><code>{k: d[k] for k in sorted(d, key=d.get)}
# {'d': 1, 'c': 2, 'a': 3, 'b': 4}
</code></pre>
<p>If you want to sort by the <strong>keys</strong> in regular order</p>
<pre><code>{k: d[k] for k in sorted(d)}
# {'a': 3, 'b': 4, 'c': 2, 'd': 1}
</code></pre>
<p>This works on CPython 3.6+ and any implementation of Python 3.7+ because dictionaries keep insertion order.</p>
</div>
<span class="comment-copy">Thank you very much, your solution is easiest one :)</span>
<span class="comment-copy">Could you please explain|expand the syntax in line 2? I'm just learning Python 3 and would love to understand this one.</span>
<span class="comment-copy">Sure but it would be easier if I would know what you do not understand. <code>[x for x in iterable]</code> is a Python List Comprehension (google) which is  very common and efficient in Python to create lists. <code>(k, d[k])</code> is a two element tuple, the second element (<code>d[k]</code>) is the value from the dictionary. <code>sorted()</code> is a builtin function returning the keys of the dictionary sorted by the values. Using <code>key=d.get</code> it the key of my answer which is not trivial to know. Knowing builtin functions is essential. I hope this helped.</span>
<span class="comment-copy">Thank you! The <code>[x for x in iterable]</code> "List comprehension" is what was missing in the intro course. Now reading about it (was hard to find not knowing the name).</span>
<span class="comment-copy">Thanks for your help. I thought that one of the solutions will be something similar to this.</span>
<span class="comment-copy"><code>dict</code> keeps insertion order now, so there's no reason to use <code>OrderedDict</code></span>
<span class="comment-copy">The answer from Paul Draper is already using Operator...just not importing the complete library</span>
<span class="comment-copy">@SalvatoreCosentino Exactly and you may want to import itemgetter explicitly from operator and use the same.</span>
<span class="comment-copy">While your code works, I don't think dictionaries are guaranteed to return the items in the same order as added.</span>
<span class="comment-copy">@Ivan Thanks – I've removed the superfluous use of dict() here, although in CPython 3.6+, dict is order-preserving, and this is likely to become a language feature in the near future (<a href="https://docs.python.org/3/whatsnew/3.6.html" rel="nofollow noreferrer">docs.python.org/3/whatsnew/3.6.html</a>)</span>
<span class="comment-copy">Thanks, it's interesting to know. Also - at the end you can just do <code>print(s)</code> instead of a loop :)</span>
<span class="comment-copy">@Ivan Of course, but then the code wouldn't produce the output OP has requested…</span>
<span class="comment-copy"><code>dict</code> keeps insertion order now, so there's no reason to use <code>OrderedDict</code></span>
