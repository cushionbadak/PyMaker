<div class="post-text" itemprop="text">
<p><strong>Assignment:</strong></p>
<pre><code>&gt;&gt;&gt; a = ['spam']
&gt;&gt;&gt; b = ['spam']
&gt;&gt;&gt; a is b
False
</code></pre>
<p><strong>Reference:</strong></p>
<pre><code>&gt;&gt;&gt; c = ['spam']
&gt;&gt;&gt; d = c
&gt;&gt;&gt; c is d
True
</code></pre>
<ol>
<li>What is the difference between above both?</li>
<li>Why assignment results <code>False</code>?</li>
<li>Why reference results <code>True</code>?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Your first snippet creates <em>two</em> unique list objects, which are not the same. Hence <code>a is b</code> returns false because <code>a</code> and <code>b</code> are pointing to distinct objects:</p>
<pre>
          +------+
a ------&gt; | list |
          +------+

          +------+
b ------&gt; | list |
          +------+
</pre>
<p>Your second snippet creates a single list object, and points both <code>c</code> and <code>d</code> to that objects, hence <code>c is d</code> return true:</p>
<pre>
          +------+
c ------&gt; | list | &amp;lt------ d
          +------+
</pre>
<hr/>
<p>Note the following, from <a href="http://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">http://docs.python.org/3/reference/datamodel.html</a>:</p>
<blockquote>
<p>Every object has an identity, a type and a value. An object’s <em>identity</em> never changes once it has been created; you may think of it as the object’s address in memory. The <a href="http://docs.python.org/3/reference/expressions.html#is" rel="nofollow noreferrer"><code>is</code></a> operator compares the identity of two objects; the <a href="http://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer"><code>id()</code></a> function returns an integer representing its identity.</p>
</blockquote>
<p>So <code>is</code> and <code>==</code> are very different; while the former compares object identity, the latter compares object values. Indeed, <code>==</code> tests in your snippets would return true.</p>
<hr/>
<p>Given the explanation above, it may come as a surprise that that the story is slightly different with strings:</p>
<pre><code>&gt;&gt;&gt; a = 'str'
&gt;&gt;&gt; b = 'str'
&gt;&gt;&gt; 
&gt;&gt;&gt; a is b
True
</code></pre>
<p>This is due to <a href="http://en.wikipedia.org/wiki/String_interning" rel="nofollow noreferrer">string interning</a>, which occurs in CPython (i.e. it's implementation specific). Therefore, if the same string literal shows up in two different places, the same string object will be used for both (with restrictions).</p>
<p>This is explained in greater detail in <a href="https://stackoverflow.com/questions/15541404/python-string-interning">"Python string interning"</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>when compare with <code>is</code>, like <code>a is b</code>, it's the same as <code>id(a) == id(b)</code>, the code <code>xx=['spam']</code> creates a new list each time and assigns it to <code>xx</code>, it's <code>id</code> changes each time, so  <code>a is b</code> gives <strong>False</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>This has nothing to do with some (inexistant) "assignment vs reference" question.</p>
<pre><code>&gt;&gt;&gt; a = ['spam']
</code></pre>
<p>creates a list with the string 'spam' in it, and binds it to names 'a' in the current scope.</p>
<pre><code>&gt;&gt;&gt; b = ['spam']
</code></pre>
<p>creates another list with the string 'spam' in it, and binds it to names 'b' in the current scope.</p>
<p>You create two lists, you have two lists. Plain simple.</p>
<pre><code>&gt;&gt;&gt; c = ['spam']
</code></pre>
<p>creates yet another list with the string 'spam' in it, and binds it to names 'c' in the current scope.</p>
<pre><code>&gt;&gt;&gt; d = c
</code></pre>
<p>binds name 'd' to whatever 'c' is bound to at that time in the current scope.</p>
<p>Here you create one list and bind 2 names to it. Both name points to the same object.</p>
<p>The point is: Python's "variables" are not named memory adresses, just names pointing to objects. At a given time, one object can be bound to (pointed to by) any number of names (and even by no name at all).</p>
</div>
<div class="post-text" itemprop="text">
<p>Let me just add a few function calls to what you were originally doing. I think you will pick it up.</p>
<pre><code>&gt;&gt;&gt; a = ['spam']
&gt;&gt;&gt; b = ['spam']
&gt;&gt;&gt; a is b
False
&gt;&gt;&gt; id(a)
4552359808
&gt;&gt;&gt; id(b)
4552446176
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; c = ['spam']
&gt;&gt;&gt; d = c
&gt;&gt;&gt; id(c)
4552513296
&gt;&gt;&gt; id(d)
4552513296
&gt;&gt;&gt; c is d
True
&gt;&gt;&gt; c == d
True
&gt;&gt;&gt; print id.__doc__
id(object) -&gt; integer

Return the identity of an object.  This is guaranteed to be unique among
simultaneously existing objects.  (Hint: it's the object's memory address.)
</code></pre>
</div>
<span class="comment-copy">+1 for the ASCII Art :p</span>
<span class="comment-copy">So, why the result of both is <code>True</code> if I try above on a immutable object like str <code>spam</code> instead of list <code>['spam']</code></span>
<span class="comment-copy">@YousufMemon That's because <a href="http://stackoverflow.com/questions/15541404/python-string-interning">strings are interned in CPython</a>.</span>
<span class="comment-copy">Should I add the above comment to main question. Also can you please suggest a right title for my question.</span>
<span class="comment-copy">@YousufMemon Also try again with the string 'spam.com' and you will find a different result  ;)</span>
