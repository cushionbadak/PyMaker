<div class="post-text" itemprop="text">
<p>I have a text file that I need to parse.
In this text file, words, numbers, spaces, etc is in this file in no particular order.</p>
<p>Some point in this .txt file will come the string: </p>
<pre><code>state0
</code></pre>
<p>I need to parse the entire line into a separate file when I see this.</p>
<p><strong>example inputfile.txt</strong></p>
<pre><code>abc123def456
state0apples bananas0911
</code></pre>
<p><strong>my script should create:
outputfile.txt</strong>
which should contain:</p>
<pre><code>state0apples bananas0911
</code></pre>
<p>The program that I have so far that does not seem to be working:</p>
<pre><code>state0 = "state0"
state1 = "state1"
state2 = "state2"
state3 = "state3"
state4 = "state4"
with open('C:/inputfile.txt', 'r') as inF:
    for index, line in enumerate(inF):
        if 'state0' in line:
            with open('C:/outputfile.txt', 'w') as f:
                f.write("Line #%d has string: %s"  (index, line))
        else if 'state1' in line:
            with open('C:/output.txt', 'w') as f:
                f.write("Line #%d has string: %s"  (index, line))
        else if 'state2' in line:
            with open('C:/output.txt', 'w') as f:
                f.write("Line #%d has string: %s"  (index, line))
        else if 'state3' in line:
            with open('C:/output.txt', 'w') as f:
                f.write("Line #%d has string: %s"  (index, line))
        else if 'state4' in line:
            with open('C:/output.txt', 'w') as f:
                f.write("Line #%d has string: %s"  (index, line))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You haven't told us what your code is doing wrong, so it's hard to explain why it's doing whatever-it-is-that-may-be wrong… but I can see four immediate problems. You will have to fix <em>all</em> of these problems, and possibly others that I haven't seen, before your code will actually work.</p>
<hr/>
<p>Zeroth, your code won't even run because of a simple <code>SyntaxError</code>. If you look at the traceback that Python prints out, it will tell you pretty clearly:</p>
<pre><code>    else if 'state1' in line:
          ^
SyntaxError: invalid syntax
</code></pre>
<p>Why doesn't it like an <code>if</code> after an <code>else</code> like this? Because <code>else</code> must be followed immediately by a colon, and <code>if</code> isn't a colon.</p>
<p>You probably wanted <code>elif</code>:</p>
<pre><code>    elif 'state1' in line:
</code></pre>
<p>I assume this is just the same kind of silly typo we all make all the time—but just in case you don't actually understand <code>elif</code>, see <a href="http://docs.python.org/3/tutorial/controlflow.html#if-statements" rel="nofollow">the tutorial</a>.</p>
<hr/>
<p>First, you use <code>outputfile.txt</code> in some places, <code>output.txt</code> in others. Presumably you wanted all of these lines to go to the same file, but some of them are going to a completely different file, and you probably aren't looking for them there.</p>
<hr/>
<p>Second, you use <code>'w'</code> mode for opening the file each time. That truncates the file at position 0—in other words, it erases anything that was previously there. So, at the end of the program, only the very last match will be in the file, rather than all of them.</p>
<p>If you want to <em>append</em> to an existing file, you can open it in <code>'a'</code> mode for append, or open it in <code>'r+'</code> mode for read/write and then seek to the end of the file.</p>
<p>But I think what you <em>actually</em> want may to be create a new file at the start of the program, erasing anything that might have been there before you started, then write all of the lines to that file. For that, the simplest solution is to just open the file once, at the very top. Like this:</p>
<pre><code>with open('C:/inputfile.txt', 'r') as inF, open('C:/outputfile.txt', 'w') as f:
</code></pre>
<hr/>
<p>Third:</p>
<pre><code>f.write("Line #%d has string: %s"  (index, line))
</code></pre>
<p>You've left the <code>%</code> operator out. Which means you're just trying to call the string <code>"Line #%d has string: %s"</code> as if it were a function, passing it <code>index</code> and <code>line</code> as arguments. That's obviously not legal, and it's why you get a <code>TypeError</code> telling you that a <code>str</code> is not callable.</p>
<hr/>
<p>Python gives you these errors for a reason: so you can tell where the problem is in your code, and fix it. Don't just run your code, see that "it didn't work", and throw your hands up in the air. If you're not willing to debug, don't bother writing code in the first place, because <em>nobody</em> can write code that just works, or fix code without knowing what it's doing wrong.</p>
</div>
<div class="post-text" itemprop="text">
<p>Regular expressions would really help:</p>
<pre><code>import sys
import re

rgx = re.compile(r'state[0-4]')

with open(sys.argv[1], 'r') as in_file, open(sys.argv[2], 'w') as out_file:
    for n, line in enumerate(in_file):
        if rgx.search(line):
            out_file.write("Line #{} has string: {}".format(n, line))
</code></pre>
</div>
<span class="comment-copy">What does "not seem to be working" mean? Is it raising an exception? Not creating a file? Creating an empty file? Creating a file with just one match instead of all of them, or with the wrong formatting, or with a badly-translated version of Don Quixote instead of the text you expected?</span>
<span class="comment-copy">Please don't edit your question into a completely different question for which none of the existing answers apply anymore. That makes it useless for future people who come along with the same problem as you. You can <i>add</i> the new version that you got from one of the answers to the end, but never remove the original version that the question is about. Also, don't try to post tracebacks in comments; add them to the question. They're completely unreadable without formatting, and most people won't look in the comments anyway.</span>
<span class="comment-copy">More importantly, SO is not a service for debugging your code. If I wanted to see each error as you found it and tell you how to fix them one by one, I would run your code myself, and fix it myself, without having a human being in the way between me and the interpreter. But unless you want to pay me to do that, I have no interest in doing so, and I doubt anyone else does. You have to learn how to debug your code yourself. When you get stuck, you can write a question asking for help getting unstuck.</span>
<span class="comment-copy">I don't undertand how you "added the code you added at the bottom". If you just added that line to the bottom of your file, or put it at the top but then still opened the file over and over again inside the loop, or anything else like that, it's obviously not going to help anything. Also, if you changed it the way I described, of course it doesn't generate <code>output.txt</code>—it opens and writes to a file called <code>outputfile.txt</code>, as your problem description asked for,</span>
<span class="comment-copy">@user3183936: Meanwhile, no, "state0" doesn't have to be at the beginning of the file, or even the beginning of the line. You can test this yourself: open an interactive Python session, then type <code>"state0" in "foostate0bar"</code> and see whether it says <code>True</code> or <code>False</code>.</span>
<span class="comment-copy">@user3183936: Finally, "a command screen pops up and immediately disappears" is not helpful. It's next to impossible to try to debug a program without actually looking at the program's output. Open a command prompt (aka "DOS prompt") and run the program there, or run it in IDLE or PythonWin or a similar GUI, so you can see what it's printing.</span>
<span class="comment-copy">I apologize for the confusion @abarnert. I will update my OP to show what I currently have.</span>
<span class="comment-copy">Why did you replace the OP's nice clean <code>enumerate</code> with manually keeping track of <code>n</code> like this?</span>
