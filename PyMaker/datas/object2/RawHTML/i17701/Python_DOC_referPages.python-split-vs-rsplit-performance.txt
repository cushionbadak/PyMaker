<div class="post-text" itemprop="text">
<p>I have a string in python. I want to split it with <code>maxsplit = 1</code> on separator which is pretty close to end of the string.</p>
<p>For e.g.</p>
<pre><code>a = "abcdefghijklmnopqrstuvwxyz,1".
</code></pre>
<p>Will <code>a.split(",", 1)</code> be better in terms of performance than <code>a.rsplit(",",1)</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Below is a time test using <a href="http://docs.python.org/3/library/timeit.html#timeit.timeit"><code>timeit.timeit</code></a> to compare the speeds of the two methods:</p>
<pre><code>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit('"abcdefghijklmnopqrstuvwxyz,1".split(",", 1)')
1.6438178595324267
&gt;&gt;&gt; timeit('"abcdefghijklmnopqrstuvwxyz,1".rsplit(",", 1)')
1.6466740884665505
&gt;&gt;&gt;
</code></pre>
<p>As you can see, they are about equivalent.  <code>str.split</code> is a few fractions of a second faster, but that is really unimportant.  So, you can pick whichever method you want.</p>
<p>P.S.  Although, the <code>str.split</code> method <em>is</em> one less character to type. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding to the previous answers, using split vs rsplit should depend on where you want to search. 
Example:</p>
<pre><code>$ python -m timeit '"abcdefghijklmnopqrstuvwxyz,sdfsgfkdjgherughieug,1".split(",")[2]'
1000000 loops, best of 3: 0.48 usec per loop
$ python -m timeit '"abcdefghijklmnopqrstuvwxyz,sdfsgfkdjgherughieug,1".rsplit(",",1)[1]'
1000000 loops, best of 3: 0.453 usec per loop
</code></pre>
<p>Here you are searching for 1, in which case using rsplit is faster than split, whereas for the examples in the previous answers, split is faster.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm super late to this party, but for anyone else stumbling across this, <code>partition</code> is faster than <code>split(x, 1)</code>:</p>
<pre><code>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit('"abcdefghijklmnopqrstuvwxyz,1".split(",", 1)')
0.23717808723449707
&gt;&gt;&gt; timeit('"abcdefghijklmnopqrstuvwxyz,1".rsplit(",", 1)')
0.20203804969787598
&gt;&gt;&gt; timeit('"abcdefghijklmnopqrstuvwxyz,1".partition(",")')
0.11137795448303223
&gt;&gt;&gt; timeit('"abcdefghijklmnopqrstuvwxyz,1".rpartition(",")')
0.10027790069580078
</code></pre>
<p>And you can ditch the <code>,</code> easily if you want by <code>h, _, t = s.rpartition(',')</code> or such.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think there is a slight difference between <code>split()</code> and <code>rsplit()</code>:
for example:</p>
<pre><code>str1 = "w,e,l,c,o,m,e"
print(str1.split(',',2))

str1 = "w,e,l,c,o,m,e"
print(str1.rsplit(',',2))
</code></pre>
<p>You see, <code>split()</code> is used if you want to split strings on first occurrences and <code>rsplit()</code> is used if you want to split strings on last occurrences.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just to complement @iCodez answer, you can run a timing test from the command-line:</p>
<pre><code>$ python -m timeit '"abcdefghijklmnopqrstuvwxyz,1".split(",", 1)'
1000000 loops, best of 3: 0.321 usec per loop
$ python -m timeit '"abcdefghijklmnopqrstuvwxyz,1".rsplit(",", 1)'
1000000 loops, best of 3: 0.327 usec per loop
</code></pre>
<p>So, indeed, it's an irrelevant difference.</p>
</div>
<span class="comment-copy">I'd say, test it :)</span>
<span class="comment-copy">looks like premature optimisation. this wont be killing your performance. pick your battles.</span>
<span class="comment-copy">@rikAtee This isn't premature optimization when all answers are equally readable. This is learning performance of similar methods so that if you do have to perform such operations you'll know which of many similar options is best.</span>
<span class="comment-copy">While this is true - the question is about the performance of <code>split</code> vs <code>rsplit</code> (perhaps specifically on a string with only a single occurring delimiter) - not how they differ in usage terms.</span>
