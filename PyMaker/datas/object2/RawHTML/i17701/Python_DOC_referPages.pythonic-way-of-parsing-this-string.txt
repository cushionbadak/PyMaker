<div class="post-text" itemprop="text">
<p>I'm parsing this <code>line</code>- </p>
<pre><code>0386          ; Greek # L&amp;       GREEK CAPITAL LETTER ALPHA WITH TONOS
</code></pre>
<p>Basically, I need -</p>
<pre><code>point = 0386
script = Greek
</code></pre>
<p>And I'm doing it like this,</p>
<pre><code>point = line.split(";")[0].replace(" ","")
script = line.split("#")[0].split(";")[1].replace(" ","")
</code></pre>
<p>I'm not convinced that what I'm doing is the most pythonic way of doing it, is there a more elegant way of doing this? Maybe a regex one-liner?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a> with unbound method <a href="http://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow"><code>str.strip</code></a>:</p>
<pre><code>&gt;&gt;&gt; line = '0386      ; Greek # L&amp;   GREEK CAPITAL LETTER ALPHA WITH TONOS'
&gt;&gt;&gt; point, script = map(str.strip, line.split('#')[0].split(';'))
&gt;&gt;&gt; point
'0386'
&gt;&gt;&gt; script
'Greek'
</code></pre>
<p>Using list comprehension:</p>
<pre><code>&gt;&gt;&gt; point, script = [word.strip() for word in line.split('#')[0].split(';')]
&gt;&gt;&gt; point
'0386'
&gt;&gt;&gt; script
'Greek'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want a regex one liner:</p>
<pre><code>point, script = re.search("^(\d+)\s*;\s*(\S+)\s*.*$",s).groups()
</code></pre>
<p>where <code>s</code> is your string, and of course you need to <code>import re</code></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; code, desc = line[:line.rfind('#')].split(';')
&gt;&gt;&gt; code.strip()
'0386'
&gt;&gt;&gt; desc.strip()
'Greek'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is how I would've done it:</p>
<pre><code>&gt;&gt;&gt; s = "0386          ; Greek # L&amp;       GREEK CAPITAL LETTER ALPHA WITH TONOS"
&gt;&gt;&gt; point = s.split(';')[0].strip()
&gt;&gt;&gt; point
'0386'
&gt;&gt;&gt; script = s.split(';')[1].split('#')[0].strip()
&gt;&gt;&gt; script
'Greek'
</code></pre>
<p>Note that you can re-use <code>s.split(';')</code>. So perhaps saving it to a <code>var</code> would be a good idea:</p>
<pre><code>&gt;&gt;&gt; var = s.split(';')
&gt;&gt;&gt; point = var[0].strip()  # Strip gets rid of all the whitespace
&gt;&gt;&gt; point
'0386'
&gt;&gt;&gt; script = var[1].split('#')[0].strip()
&gt;&gt;&gt; script
'Greek'
</code></pre>
</div>
<span class="comment-copy">This looks very concise, although I prefer not using <code>map</code>.</span>
<span class="comment-copy">@GamesBrainiac, I added list comprehension version.</span>
<span class="comment-copy">@GamesBrainiac Why not a <code>map</code>? How would it affect the performance?</span>
<span class="comment-copy">Now that looks beautiful! :D +1 man.</span>
<span class="comment-copy">@ComputerFellow LCs are generally faster than <code>map</code>s.</span>
<span class="comment-copy">+1 nothing like good 'ol regex :)</span>
<span class="comment-copy"><code>("^(.*)\s+;\s+(.*)\s+#.*$", s).groups()</code> worked for me. The above didn't.</span>
<span class="comment-copy">@ComputerFellow, Your regex matches the number with the white space after it. But if it works for you I'm glad! Anyway, the point here is to show how you do it with a regex in one line.</span>
<span class="comment-copy">Now <i>this</i> is elegant. Burhan, you have my vote! :D</span>
<span class="comment-copy">Reason for downvote?</span>
