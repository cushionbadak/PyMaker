<div class="post-text" itemprop="text">
<p>is it possible to zip a folder into multiple files at Python? I just found some examples how to zip a folder/file to a single zip container.</p>
<p>Short: How can I zip one folder to multiple zip parts in Python?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>num_files = 4  #number of zip files to create
dir_to_zip = "/a/file/path/"
#get list of all files in directory
files = [os.path.join(dir_to_zip,file) for file in os.listdir(dir_to_zip)]
#partition the files how you want (here we just spit it into 4 equal length lists of files)
files_in_parts =  zip(*zip(*[iter(files)]*num_files))
#enumerate over each partition and add it to its own zip file
for i,zip_contents in enumerate(files_in_parts,1):
    with ZipFile('zipfile%s.zip'%i, 'w') as myzip:
         map(myzip.write,zip_contents)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For what it's worth, the standard <code>ziplib</code> for both <a href="http://docs.python.org/2.7/library/zipfile.html#module-zipfile" rel="nofollow">Python 2.7</a> and <a href="http://docs.python.org/3/library/zipfile.html#module-zipfile" rel="nofollow">Python 3.3</a> explicitly says that it doesn't support multi-disk archives:</p>
<blockquote>
<p>This module does not currently handle multi-disk ZIP files.</p>
</blockquote>
<p>You may be forced to <a href="http://docs.python.org/2/library/subprocess.html#using-the-subprocess-module" rel="nofollow">shell out to an operating system command</a> if you wish to create a single logical multi-file archive.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can zip files into a giant file first, then split it into pieces. tested, it works.</p>
<pre><code># MAX = 500*1024*1024    # 500Mb    - max chapter size
MAX = 15*1024*1024
BUF = 50*1024*1024*1024    # 50GB     - memory buffer size


def file_split(FILE, MAX):
    '''Split file into pieces, every size is  MAX = 15*1024*1024 Byte''' 
    chapters = 1
    uglybuf = ''
    with open(FILE, 'rb') as src:
        while True:
            tgt = open(FILE + '.%03d' % chapters, 'wb')
            written = 0
            while written &lt; MAX:
                if len(uglybuf) &gt; 0:
                    tgt.write(uglybuf)
                tgt.write(src.read(min(BUF, MAX - written)))
                written += min(BUF, MAX - written)
                uglybuf = src.read(1)
                if len(uglybuf) == 0:
                    break
            tgt.close()
            if len(uglybuf) == 0:
                break
            chapters += 1

def zipfiles(directory, outputZIP = 'attachment.zip'):
    # path to folder which needs to be zipped
    # directory = './outbox'

    # calling function to get all file paths in the directory
    file_paths = get_all_file_paths(directory)

    # printing the list of all files to be zipped
    print('Following files will be zipped:')
    for file_name in file_paths:
        print(file_name)

    # writing files to a zipfile
    with ZipFile(outputZIP,'w') as zip:
        # writing each file one by one
        for file in file_paths:
            zip.write(file)

    print('All files zipped successfully!')  

if __name__ == '__main__':
    outputZIP = 'attachment.zip'
    zipfiles(directory, outputZIP)
    file_split(outputZIP, MAX)
</code></pre>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/10539612/create-split-archives-zip-rar-7z-in-python">Here</a> is a duplicate, unfortunately for you it is unanswered.</span>
<span class="comment-copy">if number of entries in <code>dir_to_zip</code> directory is not evenly divisible by <code>num_files</code> then your code drops some files. You are trying to archive filenames instead of their content (<code>zip_contents</code> is a list of files in your case). But the general idea (to distribute different files into different archives) might work (it could be modified easily to take into account relative file sizes).</span>
<span class="comment-copy">yeah I didn't really expect anyone to directly copy and paste. it was more to convey the idea that it should be partitioned according to user needs</span>
<span class="comment-copy">To be clear, multi-disk here means multi file, and not like hard disk or something like that right?</span>
<span class="comment-copy">@TankorSmash, yes, multiple files. As far as I know this feature is designed to generate multiple files of a predictable size that collectively make up a single logical archive. Each of these files could be put on its own physical disk (e.g., a floppy), the disks could be moved to another location, and the data extracted.</span>
<span class="comment-copy">it worked and make multiple zip files with names : <code>file.zip.1 file.zip.002</code> and ... but how extract theme now????</span>
<span class="comment-copy">I use 7zip client</span>
