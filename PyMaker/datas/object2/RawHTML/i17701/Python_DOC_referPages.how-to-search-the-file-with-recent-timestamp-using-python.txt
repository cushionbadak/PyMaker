<div class="post-text" itemprop="text">
<p>I have following kind of n number of files in a folder.</p>
<pre><code> log_20140114-10-43-20_5750.txt
 log_20140114-10-43-23_5750.txt
 log_20140114-10-43-25_5750.txt
</code></pre>
<p>here the only variation in all the above files are timestamp only. but I need the files which is having the latest timestamp. I mean i need the "log_20140114-10-43-25_5750.txt" file only.</p>
<p>I am very new to python.Please help me</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
import re

r = re.compile(r'log_\d{8}-\d{2}-\d{2}-\d{2}_\d{4}\.txt$')

latest_file = \
    max(filter(r.search,os.listdir('/path/to/logs')))

print(latest_file)
</code></pre>
<p>(Edited to include filtering the list of files and take @abarnert's efficiency advice.)</p>
</div>
<div class="post-text" itemprop="text">
<p>If file name already have timestamp in it you can sort names and use last name from list:</p>
<pre><code>lst = os.listdir('.')
lst.sort()
print(lst[-1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import glob

filelist = glob.glob('./log*.txt')
filelist.sort()
print filelist[-1]
</code></pre>
</div>
<span class="comment-copy">By 'timestamp' do you mean the one in the file name or the actual OS timestamp?</span>
<span class="comment-copy">@abarnert if the "5750" in the file names tell me how to make it as a list??</span>
<span class="comment-copy">@user3116273: I don't understand what you mean. Are you asking how to get a list of all files in the current directory with <code>5750</code> anywhere in their name? That's just <code>glob.glob('*5750*'))</code>. It works the same as a Unix shell (and not that different from a Windows shell). See <a href="http://docs.python.org/3/library/glob.html" rel="nofollow noreferrer"><code>glob</code></a> in the docs. You can also use <a href="http://docs.python.org/3/library/fnmatch.html" rel="nofollow noreferrer"><code>fnmatch</code></a> if you already have the filenames and just want to filter them, or <code>re</code> if you need a more powerful pattern (as in Jubjub Bandersnatch's answer).</span>
<span class="comment-copy">The only problem is if there are <i>other</i> files in the directory they might always be max.</span>
<span class="comment-copy">@SteveBarnes: Yeah, in that case you'd probably want to <code>max</code> on <code>glob</code> rather than <code>listdir</code> (to filter out the other files). (Fortunately, at least you can count on <code>._.DS_Store</code> and other such unexpected hidden files never being max.)</span>
<span class="comment-copy">If you really want to use <code>re</code> instead, you might as well at least <code>re.compile</code> it. (And then you can just pass <code>r.search</code> as the filter predicate and get rid of the lambda, and the whole expression is only 41 characters instead of taking multiple lines and still scrolling horizontally.)</span>
<span class="comment-copy">@abarnert Thanks. I prefer re to glob in this case just because you have more control, not because it's faster. <code>glob()</code> is still probably the most practical solution.</span>
<span class="comment-copy">Sorting just to get the highest one is both overly complex and wasteful. What's wrong with <code>max</code>?</span>
<span class="comment-copy">You are right, for this example <code>max()</code> is better. <code>sort()</code> can be useful if he had to check something in those logs and it had to be done in particular order.</span>
<span class="comment-copy">Sorting just to get the highest one is both overly complex and wasteful. What's wrong with <code>max</code>?</span>
<span class="comment-copy">All that is wrong with <code>max</code> is that I didn't think of it first!  Of course sometimes you also need other ordinals later then it does come in useful.</span>
<span class="comment-copy">I can't imagine he'll need the 8th, 17th, and 33rd newest. He might conceivably need the 1st, 2nd, and 3rd (for which <code>nlargest</code> is still much better than <code>sort</code>), but he didn't ask for even that.</span>
