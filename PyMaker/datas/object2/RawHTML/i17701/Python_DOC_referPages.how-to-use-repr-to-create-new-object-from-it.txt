<div class="post-text" itemprop="text">
<p>This is something I don't really get. I am trying to use <code>__repr__</code> to create a new object from its output.</p>
<p>I have a class, OrderedSet, which contains a list and methods to organize it.
The <strong>str</strong> method of this class is </p>
<pre><code>def __str__(self):
    s = "Set contains: "
    for elem in self.list: s += (" '" + elem + "'")
    return s
</code></pre>
<p>Now I am supposed to use <code>__repr__</code> in a way to instanciate a new object from it.
Like <code>Orderedset second = repr(first)</code></p>
<p>Can I just do it like this?</p>
<pre><code>def __repr__(self):
    return self.list.__str__()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The idea behind "using <code>__repr__</code> to create new objects" is that the output of <code>__repr__</code> <a href="http://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow">can be valid python code</a>, which, when interpreted with <code>eval</code>, creates (a copy of) the original object. For example, <code>repr("foo")</code> return <code>"foo"</code> (including the <code>"</code>), or <code>repr([1,2,3])</code> returns <code>[1,2,3]</code>. </p>
<p>In your example you probably need something like this:</p>
<pre><code>def __repr__(self):
    return "OrderedSet(%r)" % self.list
</code></pre>
<p>as well as a corresponding constructor:</p>
<pre><code>def __init__(self, elements):
    self.list = elements
</code></pre>
<p>This way, <code>repr(OrderedSet([1,2,3]))</code> returns the string <code>OrderedSet([1,2,3])</code>, which, when <code>eval</code>uated, will invoke the contructor and create a new instance of the class.</p>
</div>
<div class="post-text" itemprop="text">
<p>No. <code>__repr__()</code> has to return a string or a lot of code would break.</p>
<p>Try this approach: <code>__repr__()</code> should return valid Python code. That would allow you to</p>
<pre><code>second = eval(repr(first))
</code></pre>
<p>That said, the whole idea looks dubious. It feels like you try to come up with a clever way to serialize or clone objects.</p>
<p>Use <a href="http://docs.python.org/2/library/pickle.html" rel="nofollow">pickling</a> for serialization or maybe the <code>json</code> module. To clone, use a <a href="http://en.wikipedia.org/wiki/Constructor_%28object-oriented_programming%29#Copy_constructors" rel="nofollow">copy constructor</a>.</p>
</div>
<span class="comment-copy">With <code>eval(repr(some_object))</code>? See e.g. <a href="http://stackoverflow.com/a/13229289/1639625">here</a>.</span>
<span class="comment-copy">As a side note: <code>list</code> is a bad variable name since there is a builtin function of the same name.</span>
