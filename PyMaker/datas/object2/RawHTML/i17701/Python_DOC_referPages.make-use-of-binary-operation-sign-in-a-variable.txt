<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2983139/assign-operator-to-variable-in-python">assign operator to variable in python?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/15521281/strings-ints-and-operators-in-python">Strings, ints, and operators in Python</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>My question is if i have a variable called op which can contain a plus sign, minus sign etc, how can i make use of that op variable to make a calculation? Instead of having multiple if statements how can i do something like this instead</p>
<pre><code>if op in ['+','-', '*', '/']:
    return x op y
else:
    print("ERROR")
</code></pre>
<p>instead of having for example</p>
<pre><code>if op == "+":
    return x + y
elif op == "-":
    return x - y
....
....
</code></pre>
<p>I have tried making op an int but it doesnt work, is there a solution for this or do i have to check if op is any of the possible signs?</p>
<p>EDIT:
How can i do the same with a bigger than, smaller than or equal sign?</p>
<p>To check is op is any of these `["=","&lt;","&gt;"]</p>
</div>
<div class="post-text" itemprop="text">
<p>You should look into the <a href="http://docs.python.org/3.2/library/operator.html" rel="nofollow"><code>operator</code></a> module.  It contains a function for every Python operator:</p>
<pre><code>import operator
# Below is a mapping of op symbols to their corresponding functions
ops = {
    '+' : operator.add, 
    '-' : operator.sub, 
    '*' : operator.mul, 
    '/' : operator.truediv, 
    '==' : operator.eq, 
    '&gt;' : operator.gt, 
    '&lt;' : operator.lt
}
def func(op, x, y):
    try:
        return ops[op](x, y)
    except KeyError:
        return 'ERROR'
</code></pre>
<p>Below is a demonstration:</p>
<pre><code>&gt;&gt;&gt; func('+', 2, 1)
3
&gt;&gt;&gt; func('-', 2, 1)
1
&gt;&gt;&gt; func('*', 2, 1)
2
&gt;&gt;&gt; func('/', 2, 1)
2.0
&gt;&gt;&gt; func('==', 2, 1)
False
&gt;&gt;&gt; func('&gt;', 2, 1)
True
&gt;&gt;&gt; func('&lt;', 2, 1)
False
&gt;&gt;&gt; func('&amp;', 2, 1) # Just to demonstrate
'ERROR'
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a map from the symbol to the <a href="http://docs.python.org/3/library/operator.html" rel="nofollow"><code>operator</code></a> function that corresponds to the op:</p>
<pre><code>import operator
ops = {
    '+': operator.add,
    '-': operator.sub,
    '*': operator.mul, 
    '/': operator.div,
}
</code></pre>
<p>And then:</p>
<pre><code>def apply_op(op, val1, val2):
    return ops[op](val1, val2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like</p>
<pre><code>eval('%d %s %d' % (x, op, y))
</code></pre>
<p>Edit: depends on triviality of the question,
You would</p>
<pre><code>assert isinstance(x, int)
assert isinstance(y, int)
</code></pre>
</div>
<span class="comment-copy">Ok thanks, how can i do the same with a bigger than, smaller than or equal sign?</span>
<span class="comment-copy">Beat me to it, and explained it more concisely to boot.</span>
<span class="comment-copy">But one thing: <code>div</code> may not be what you want. If you're trying to match the actual equivalent Python expression, which may be truediv or floordiv depending on Python version and possible <code>__future__</code> statement, it's <code>div</code>; if you want one or the other explicitly, it's better to use <code>truediv</code> or <code>floordiv</code> directly.</span>
<span class="comment-copy">@abarnert: ah good point! i assumed the OP wanted the equivalent of textual substitution, which would be <code>.div</code></span>
<span class="comment-copy">I thought so at first too, until I noticed that he also wanted <code>=</code>, not <code>==</code>, to map to equalityâ€¦ which made me suspect he's really just trying to build a calculator, and the textual substitution was just a guess at what might be an easy way to do what he wants, rather than what he actually wants.</span>
<span class="comment-copy">Ok cool, this works great, but where does the letters come from, d is for int? and s for string?</span>
<span class="comment-copy">You should not do this. If, for instance, the user inputs <code>x</code> as <code>__import__("subprocess").Popen("rm -rf", shell=True)</code> your hard drive will be wiped.</span>
<span class="comment-copy">Well, as written, that will cause an exception because <code>__import__</code> etc isn't a valid value for %d. But the other answers are better.</span>
<span class="comment-copy">No, eval will never run, as it's the <code>'%d %s %d' % (x, op, y)</code> part that raises the exception.</span>
<span class="comment-copy">Anyway the better way to solve the problem is the visitor pattern.</span>
