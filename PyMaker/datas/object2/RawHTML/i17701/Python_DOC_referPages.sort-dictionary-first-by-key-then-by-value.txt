<div class="post-text" itemprop="text">
<p>I want to double sort a dictionary that might have int or tuple as keys.</p>
<pre><code>d = {33:1, 44:1, (0,5):1  12:2, (1,2):2}
</code></pre>
<p>I want it sorted first by its values and secondly by its keys (if possible, not if one is tuple, and second is int).</p>
<p>can anyone help me with this?</p>
<p>Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>Or just</p>
<pre><code>sorted(d.items(), key=lambda v: v[::-1])
</code></pre>
<p><strong>EDIT:</strong>
Since OP requires the result as a dictionary</p>
<pre><code>OrderedDict(sorted(d.items(), key=lambda v: v[::-1]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; d = {33:1, 44:1, (0,5):1, 12:2, (1,2):2}
&gt;&gt;&gt; {k:v for k,v in sorted(d.items(), key=lambda v: v[::-1])}
{(1, 2): 2, 33: 1, 44: 1, (0, 5): 1, 12: 2}
&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; OrderedDict({k:v for k,v in sorted(d.items(), key=lambda v: v[::-1])})
OrderedDict([((1, 2), 2), (33, 1), (44, 1), ((0, 5), 1), (12, 2)])
&gt;&gt;&gt; sorted(d.items(), key=lambda v: v[::-1])
[(33, 1), (44, 1), ((0, 5), 1), (12, 2), ((1, 2), 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this?</p>
<pre><code>&gt;&gt;&gt; d = {33:1, 44:1, (0,5):1, 12:2, (1,2):2}
&gt;&gt;&gt; helper_dict = {}
&gt;&gt;&gt; for k,v in d.items():
        helper_dict.setdefault(v,[]).append(k)    

&gt;&gt;&gt; sorted_items = [(k,i) for k in sorted(helper_dict.keys()) for i in sorted(helper_dict[k]) ]
&gt;&gt;&gt; sorted_items
[(1, 33), (1, 44), (1, (0, 5)), (2, 12), (2, (1, 2))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all, you should note that you may <strong>not</strong> sort a dictionary. You may get a list with keys/values sorted, but never the dictionary itself. You may find in the pydocs that </p>
<blockquote>
<p>It is best to think of a dictionary as an unordered set of key: value
  pairs</p>
</blockquote>
<p>Then, you may want to get a sorted list of keys:</p>
<pre><code># the .keys() returns a list with all the keys, and sorted() sorts them
#sorted_keys = sorted(d.keys()) this does not work since int's and tuples aren't of the same tipe
</code></pre>
<p>You can try this:</p>
<pre><code>d_tuples = []
d_int = []
sorted_keys = []
for key in d.keys():
    # type() checks the variable type
    if type(key) == int:
        d_int.append(key)
    elif type(key) == tuple:
        d_tuples.append(key)
sorted_keys = d_tuples + sorted(d_int)
</code></pre>
<p>Or the sorted list of values:</p>
<pre><code>sorted_values = sorted(d.values())
</code></pre>
</div>
<span class="comment-copy">Start here; <a href="http://docs.python.org/3/howto/sorting.html" rel="nofollow noreferrer">docs.python.org/3/howto/sorting.html</a>. Sorting with lambda is also way more efficient than doing complex loops :). Multi-dimensional sorting might be a little bit harder tho, but just test a bit and shouldn't be that hard.</span>
<span class="comment-copy">maybe this one can help: &gt;<a href="http://stackoverflow.com/questions/7742752/sorting-a-dictionary-by-value-then-by-key" title="sorting a dictionary by value then by key">stackoverflow.com/questions/7742752/…</a> or even this one: &gt;<a href="http://stackoverflow.com/questions/9919342/sorting-a-dictionary-by-key-then-value-python" title="sorting a dictionary by key then value python">stackoverflow.com/questions/9919342/…</a></span>
<span class="comment-copy">Duplicate:<a href="http://stackoverflow.com/questions/7742752/sorting-a-dictionary-by-value-then-by-key" title="sorting a dictionary by value then by key">stackoverflow.com/questions/7742752/…</a></span>
<span class="comment-copy">Unless you use OrderedDict, the order of the sorted dictionary is not guaranteed</span>
<span class="comment-copy">@volcano, thanks!</span>
<span class="comment-copy">Dictionaries are inherently unsorted. OrderedDicts are also unsorted as soon as you modify an entry. Unless you make it a FrozenOrderedDict with immutable values, you SHOULD NOT return an OrderedDict. If you ask for a sorted view of something, return either a tuple, list, or generator, not a dictionary. Creating this OrderedDict is also a waste of clock cycles because the only method you care about is <code>__iter__</code>, which you get from the output of sorted()</span>
<span class="comment-copy">@IceArdor, since OrderedDicts are sorted by the order the items are added to the dictionary, they are OK for OP.</span>
<span class="comment-copy">@volcano I didn't interpret OP's question as needing the result as an OrderedDict. Sorted order does not matter when getting a value for a key. I stand by my previous statement. Either create your own dictionary class with a redefined <code>__iter__</code> or create a new object that is a tuple/list/generator to iterate over the sorted keys.</span>
<span class="comment-copy">Naa, too complicated</span>
