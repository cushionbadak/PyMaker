<div class="post-text" itemprop="text">
<p>I'm trying to set the newline character for SiRF binary messages, but the IO wrapper doesn't seem to accept the newline chars.</p>
<p>Code:</p>
<pre><code>import serial
import io

port = serial.Serial(port='/dev/ttyUSB0', baudrate=4800, timeout=2)
sio = io.TextIOWrapper(io.BufferedRWPair(port, port), newline='\xb0\xb3')
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; sio = io.TextIOWrapper(io.BufferedRWPair(port, port, 1), newline='\xb3')
Traceback (most recent call last):
   File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: illegal newline value: ï¿½
&gt;&gt;&gt;
</code></pre>
<p>Note: It does accept '\x0d'</p>
</div>
<div class="post-text" itemprop="text">
<p>You can not just use any character as the newline. From the <a href="http://docs.python.org/3/library/io.html#io.TextIOWrapper" rel="nofollow"><code>io.TextIOWrapper()</code> documentation</a>:</p>
<blockquote>
<p><em>newline</em> controls how line endings are handled. It can be <code>None</code>, <code>''</code>, <code>'\n'</code>, <code>'\r'</code>, and <code>'\r\n'</code>.</p>
</blockquote>
<p>You'll have to handle those bytes manually instead of a newline, directly. </p>
</div>
<span class="comment-copy">If you are producing binary messages, why are you using a <code>TextIOWrapper()</code> here?</span>
<span class="comment-copy">pyserial says to use it when changing the EOL character</span>
<span class="comment-copy">Right, but only within the confines of what the library supports, which is what current OSes use for line endings. One of <code>\n</code>, <code>\r</code> or <code>\r\n</code>.</span>
<span class="comment-copy">That also talks about reading lines, which implies working with text, not binary data.</span>
<span class="comment-copy">So, there is no way to read a line of binary data?</span>
<span class="comment-copy">I'm trying to read lines, not write them. Do I have to manually write a readline() function?</span>
<span class="comment-copy">If this is a binary format, you'll have to find a library that specifically handles parsing such messages, or write your own. Read the binary stream and go from there, yes.</span>
<span class="comment-copy">Actually combining the "readLine()" function with other processing is going to clean up my functions a little bit. Thanks for the help.</span>
