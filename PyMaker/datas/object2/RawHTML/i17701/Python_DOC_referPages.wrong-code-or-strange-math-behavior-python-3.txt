<div class="post-text" itemprop="text">
<p>I'm calculating with variables by multiplicating etc
 and I noticed this strange behavior.</p>
<p>If I use these calculations:</p>
<pre><code>CD = 6
CDR = 0.4

CD = float(CD) - (float(CDR) * float(CD))
</code></pre>
<p>Theoretically that would be 6 - (6 * 0.4) = 6 - 2.4 = 3.6 if I then print(CD) it prints</p>
<pre><code>3.5999999999999996
</code></pre>
<p>Is there a reason for this which I can avoid? Is there a way, like math.ceil to round up the number but to a certain decimal, for example to x.xxxxx (5th deciamal)?</p>
<p>(Let me know if I did anything wrong in this post, I find answers on this site since a while but have never posted before so I maybe did something wrong, apologies in advance.)</p>
</div>
<div class="post-text" itemprop="text">
<p>you can try the <a href="http://docs.python.org/3/library/decimal.html" rel="nofollow">decimal</a> module, but under the hood your answer is still "correct". It's just how floating point numbers convert to decimal representations.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're running in to floating point arithmetic problems.  Trying using <a href="http://docs.python.org/3.3/library/decimal.html#decimal.Decimal" rel="nofollow">decimal.Decimal</a> instead of <code>float</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If it's for display only (or piece of mind) you can do</p>
<pre><code>x = math.ceil(x*100000.0) / 100000.0
</code></pre>
<p>However there's no guarantee that the will be a number that can be represented exactly in memory either (ending up with the same 3.599999999..)</p>
</div>
<span class="comment-copy"><a href="http://docs.python.org/2/tutorial/floatingpoint.html" rel="nofollow noreferrer">docs.python.org/2/tutorial/floatingpoint.html</a>  its just the nature of the beast that is floating points ... it happens in nearly every language.. tou round it to 5th decimal <code>"%0.5f"%my_float</code></span>
<span class="comment-copy">Also worth a read: <a href="http://stackoverflow.com/questions/588004/is-javascripts-floating-point-math-broken">Is JavaScript's Floating-Point Math Broken?</a></span>
<span class="comment-copy">There is a format command in python which can create an illusion of the float being rounded off.</span>
<span class="comment-copy">Note that <code>decimal</code> is also a floating point format (just not <i>binary</i> floating point, and unlike <code>float</code> it permits arbitrarily many digits) and accordingly also has round-off errors and the like. It's just that decimal's errors match the errors we humans are used to, so it's a bit more intuitive.</span>
<span class="comment-copy">@delnan +1 Using <code>Decimal</code> basically eliminates one class of floating point errors.  It takes care of the most common problem, which is inaccuracy introduced from base conversion.  You are of course correct though that it doesn't take care of order of magnitude related issues that arise when performing arithmetic with operands of significantly differing orders of magnitude, or with significant digits within a single operand separated by many orders.</span>
<span class="comment-copy">@SilasRay Depends on what exactly you mean by "inaccuracy from base conversion". I assume you are referring to numbers originally written as decimal strings (such as "1.134"), in which case you're right, though I would hesitate to call that the most common problem. On the other hand, it doesn't solve the problem for constants that aren't given as decimal strings, such as many ratios. For example, 1/3 can't be represented in base 2 nor base 10, for exactly the same reasons. This is on top of the other issues you mention. But yes, decimal is often preferable. It's just no panacea.</span>
<span class="comment-copy">@delnan True enough on the ratio issue, I should have thought of that.  :)</span>
