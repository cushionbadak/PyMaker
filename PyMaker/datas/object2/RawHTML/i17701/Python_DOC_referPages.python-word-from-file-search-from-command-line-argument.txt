<div class="post-text" itemprop="text">
<p>I've a text file(test.txt) which has 6-7 lines. 3-4 of them has the word "exception" in them. Also among these 3-4 lines, 2 of them also has the word "abc" in them. My task is to write a program by whose output I will be able to separate the lines containing any word the user inputs(word1) but not those lines which have both (word1) and (word2-e.g "abc": this will also be an input from the user) in it and write it in a new file(test_mod.txt). I have to do this from command line argument. So this is my command from the command prompt:
"fileinput4.py test.txt test_mod.txt abc exception"
Here the lines containing both "abc" and "exception" will be excluded and the lines containing only the word "exception" will be included and copied in test_mod.txt.
So far I've exception handled the following things:
1. Showing error message if two words are same.
2.Showing error message if less than 5 parameters.
3.Showing error message if the first filename is misspelled
4. Showing error message if input filename and output filename are same.
I also want to exception handle if somebody enters some words which are not at all in the text file. But some bug is there in my code and this thing is not happening. Please help.Whenever I am typing any word that is not in the file, nothing is getting printed and a new file is getting created without any error message which I want to prevent.
Here's my code:</p>
<pre><code>import sys
import os


def main(): #main method
 try:    
  f1 = open(sys.argv[1], 'r')         #takes the first input file in command line

  user_input1 = (sys.argv[3])    #takes the word which is to be excluded.
  user_input2 = (sys.argv[4])    #takes the word which is to be included.
  if sys.argv[1] == sys.argv[2]: 

       sys.exit('\nERROR!!\nThe two file names cannot be the same.') 

  if sys.argv[3] != sys.argv[4]:  

    for line in f1:
         if user_input2 or user_input1 in line:

           f2 = open(sys.argv[2], 'a') 

           if user_input1 in line:
              if user_input2 in line:
                   pass

           elif user_input2 in line:
              f2.write(line)

        else:
          sys.exit('\nOne of the words or both of them does not exist.')      


  if sys.argv[3] == sys.argv[4]:  

         sys.exit('\nERROR!!\nThe word to be excluded and the word to be included     cannot be the same.') 



 except IOError:
       print('\nIO error or wrong file name.')  
 except IndexError:
       print('\nYou must enter 5 parameters.') 
 except SystemExit as e:                       
       sys.exit(e)


if __name__ == '__main__':
  main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An elaboration on my comment:</p>
<p>The code <code>if user_input2 or user_input1 in line</code> doesn't mean what you think it does. You think it means "if <code>user_input1</code> is in <code>line</code> or <code>user_input2</code> is in <code>line</code>". However, this isn't correct.</p>
<p>Let's look at a simple example:</p>
<pre><code>if True or False in [0, 1, 2, 3, 4]:
    this_will_always_be_executed()
else:
    so_this_will_never_be_run()
</code></pre>
<p>The line <code>if True or False in [0, 1, 2, 3, 4]</code> doesn't mean "if <code>True</code> is in <code>[0, 1, 2, 3, 4]</code> or <code>False</code> is in <code>[0, 1, 2, 3, 4]</code>." It means <code>if</code>True<code>, or alternatively if</code>False<code>in</code>[0, 1, 2, 3, 4]`".</p>
<p>In other words, the code means - <code>if (True) or (False in [0, 1, 2, 3, 4])</code>. <code>True</code> is always true, so during execution of the code, the intepreter never bothers to check if <code>False in [0, 1, 2, 3, 4]</code>. It just sees the <code>True</code>, and proceeds to the body of the <code>if</code> statement.</p>
<p>The same thing happens in your code. However, it is less obvious. What you need to know is that Python inteprets all sorts of values as <code>True</code> or <code>False</code> in certain contexts, not just the Booleans <code>True</code> and <code>False</code>, which are what an expression like <code>a == b</code> or <code>c in d</code> evaluates to.</p>
<p>For the builtin types, such as lists, integers, floats and strings, every value evaluates to a <code>True</code> when a Boolean is needed (you can do this explicitly by calling the function <code>bool</code> an object), except for "empty" values. So <code>bool(1) == bool(2) == bool("asdlkjhwar") == bool([1, 2, 3]) == True</code>, and <code>bool(0) == bool([]) == bool("") == False</code>. In your code, <code>user_input2</code> is almost always a non-empty string (or at least you haven't tested the program with it as an empty string and <code>user_input1</code> not in <code>line</code>. This shows the importance of thorough testing.</p>
<p>To fix this, you could replace that line with <code>if (user_input2 in line) or (user_input1 in line)</code> (parentheses added for readability). But better (IMHO) would be to do this - <code>if any(thing in line for thing in (user_input1, user_input2))</code>. This worth knowing as it is much quicker if you are doing similar tests but with larger amounts of variables (e.g. a <code>user_input</code>3, 4, 5 and 6).</p>
<p>Also, as mentioned in the comments, you should take a look at the <a href="http://docs.python.org/3/howto/argparse.html" rel="nofollow">argparse</a> module. This would make what you want much more simple to achieve.</p>
<p>Edit:</p>
<p>Try this:</p>
<pre><code>   f1 = open(sys.argv[1], 'r')         #takes the first input file in command line

   user_input1 = (sys.argv[3])    #takes the word which is to be excluded.
   user_input2 = (sys.argv[4])    #takes the word which is to be included.
   if sys.argv[1] == sys.argv[2]: 

        sys.exit('\nERROR!!\nThe two file names cannot be the same.') 

   if sys.argv[3] != sys.argv[4]:  
      lines = f1.readlines()
      if any(any(argument not in line for argument in (user_input2, user_input1)) for line in lines):
          sys.exit('\nOne of the words or both of them does not exist.')
      for line in lines:
               f2 = open(sys.argv[2], 'a') 
               if not (user_input1 in line and user_input2 in line):
                   f2.write(line)
</code></pre>
<p>Although you should really rewrite your code so you don't open the file for each line in the first file.</p>
<p>Example file handling:</p>
<p>Example file:</p>
<pre><code>This is the first line of the file.
This line's short.
This is a line of much greater length than any other in the file.
This line has five words.
The next line is a lie.
The previous line was true.
This is the last line in the file.
</code></pre>
<p>Example code:</p>
<pre><code>&gt;&gt;&gt; with open(filename) as f:
        for line in f:
            print(line)
            print("^That was a line of the file!")


This is the first line of the file.
^That was a line of the file!
This line's short.
^That was a line of the file!
This is a line of much greater length than any other in the file.
^That was a line of the file!
This line has five words.
^That was a line of the file!
The next line is a lie.
^That was a line of the file!
The previous line was true.
^That was a line of the file!
This is the last line in the file.
^That was a line of the file!
</code></pre>
<p><a href="http://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow">Here</a> is a tutorial for file-handling, and <a href="http://docs.python.org/3/howto/argparse.html" rel="nofollow">here</a> is a tutorial for argparse.</p>
</div>
<span class="comment-copy"><code>user_input2 or user_input1 in line</code> should be <code>user_input2 in line or user_input1 in line</code>.</span>
<span class="comment-copy">You could benefit from learning the <a href="http://docs.python.org/3/howto/argparse.html" rel="nofollow noreferrer"><code>argparse</code> module</a>.  Also, you could accomplish this task using <a href="http://www.cyberciti.biz/faq/howto-use-grep-command-in-linux-unix/" rel="nofollow noreferrer"><code>grep</code></a> (if you're using linux/unix/osx). Also, you should consider not raising an exception when the word is not in the file.  To do that you need to read the entire file before any processing.  You might as well filter the lines while reading the file the first time and then print a <a href="http://docs.python.org/3.3/library/warnings.html" rel="nofollow noreferrer"><code>warning</code></a> if the input is not found.</span>
<span class="comment-copy">yeah thats why I added the line     else:     sys.exit('\nOne of the words or both of them does not exist.') But the code is not entering in that portion. I have no idea why</span>
<span class="comment-copy">Make sure your indenting and whitespace are appropriate.  Also, you are going to exit the program if the first line does not contain <code>user_input2</code> or <code>user_input1</code>.  If your program does not enter the <code>else:</code> clause, then perhaps you aren't actually feeding it input that meets that condition!</span>
<span class="comment-copy">Thank you so much for your kind guidance. But when I tried both of your suggestions, now the code is only entering the 'else' block. That is it is only showing "one of the words or both of them does not exist" even if I enter a word which I know actually exists in the text file. I don't understand. Your logic totally makes sense but then why it is entering only the 'else' block no matter what?</span>
<span class="comment-copy">@sagarnildass Because your code is <code>if user_input in line</code>, not <code>if user_input in file</code>. I will edit my answer to suggest what you might want to do.</span>
<span class="comment-copy">Thannk you so much for the help. It works! But now I want to achieve the same thing using the argparse module. But the thing is I cant find any good tutorial for file handling. Can you help me achieve the same thing using argparse?</span>
<span class="comment-copy">I want to achieve the same thing using argparse...but i haven't found any tutorial about file handling. Please write a sample program so that I can understand the logic</span>
<span class="comment-copy">@sweenyrod:either argparse or getopt. If you can write me the code, i will try to understand the logic.</span>
