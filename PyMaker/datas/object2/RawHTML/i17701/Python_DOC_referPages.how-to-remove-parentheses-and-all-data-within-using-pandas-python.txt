<div class="post-text" itemprop="text">
<p>I have a dataframe where I want to remove all parentheses and stuff inside it.</p>
<p>I checked out :
 <a href="https://stackoverflow.com/questions/640001/how-can-i-remove-text-within-parentheses-with-a-regex">How can I remove text within parentheses with a regex?</a></p>
<p>Where the answer to remove the data was</p>
<pre><code>re.sub(r'\([^)]*\)', '', filename)
</code></pre>
<p>I tried this as well as </p>
<pre><code>re.sub(r'\(.*?\)', '', filename)
</code></pre>
<p>However, I got an error: <code>expected a string or buffer</code></p>
<p>When I tried using the column <code>df['Column Name']</code> I got <code>no item named 'Column Name'</code></p>
<p>I checked the dataframe using <code>df.head()</code> and it showed up as a clean table with the column names as what I wanted them to be....however when I use the <code>re</code> expression to remove the (stuff) it isn't recognizing the column name that I have.</p>
<p>I normally use </p>
<pre><code>df['name'].str.replace(" ()","") 
</code></pre>
<p>However, I want to remove the parentheses and what is inside....How can I do this using either regex or pandas?</p>
<p>Thanks!</p>
<p>Here is the solution I used...thanks for the help!</p>
<pre><code>All['Manufacturer Standard Name'] = All['Manufacturer Standard Name'].str.replace(r"\(.*\)","")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>df['name'].str.replace(r"\(.*\)","")
</code></pre>
<p>You can't run <strong>re</strong> functions directly on pandas objects. You have to loop them for each element inside the object. So <code>Series.str.replace((r"\(.*\)", "")</code> is just syntactic sugar for <code>Series.apply(lambda x: re.sub(r"\(.*\)", "", x))</code>.</p>
</div>
<span class="comment-copy">Please post <code>df.columns</code>.</span>
<span class="comment-copy">If the answer suits you, please tick it. Else, let us know what went wrong.</span>
<span class="comment-copy">What if I wanted to include a space before and after the parenthesis?</span>
<span class="comment-copy">@B_Furtado: <code>" \(.*\) "</code> or <code>"\s\(.*\)\s"</code>, assuming you <b>always</b> have one space either side. If you want to replace any number of spaces either side (including none), use <code>"\s*\(.*\)\s*"</code>. You should learn <b>regex</b> syntax, it isn't too difficult for simple matches like this. Check <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">docs.python.org/3/library/re.html</a>.</span>
<span class="comment-copy">Thanks @dmvianna. I keep learning, then I never use and I forget... Best,</span>
<span class="comment-copy">I ahve been playing  a bit with r"(.*)" and I do not understand the difference between the later expression and r"(.)".  In principle the '.' refers to any character inside the parenthesis so why do we need '*' ?</span>
<span class="comment-copy">@R_user: '.' Refers to any character, and without another parameter will refer to a single character. '*' signals the previous character (any) can be found zero to any times. So in 'abc' '.' Will match 'a' (one character), while '.*' will match 'abc' (all characters).</span>
