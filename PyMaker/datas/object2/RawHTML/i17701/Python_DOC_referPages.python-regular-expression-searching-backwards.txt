<div class="post-text" itemprop="text">
<p>I need to extract a string from a directory like this:</p>
<pre><code>my_new_string = "C:\\Users\\User\\code\\Python\\final\\mega_1237665428090192022_cts.ascii"
ID = '1237665428090192022'
m = re.match(r'.*(\b\w+%s)(?&lt;!.{%d})' % (ID, -1), my_new_string)
if m: print m.group(1)
</code></pre>
<p>I need to extract 'mega' from the above <code>my_new_string</code>. At the moment the above just gets <code>mega_1237665428090192022</code> so how do I get it to ignore the ID number?</p>
<p>To be honest I don't understand how these expressions work, even after consulting documentation. 
What does the <code>r'</code> do? And how does the <code>?&lt;!.{%d}</code> work?</p>
<p>edit: Thanks guys!</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a couple of ways to do this, although I'm not sure you necessarily need a regex here. Here are some options:</p>
<pre><code>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; my_new_string = "C:\\Users\\User\\code\\Python\\final\\mega_1237665428090192022_cts.ascii"
&gt;&gt;&gt; os.path.basename(my_new_string)
'mega_1237665428090192022_cts.ascii'
&gt;&gt;&gt; basename = os.path.basename(my_new_string)
&gt;&gt;&gt; basename.split('_')[0]
'mega'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.match(r'[A-Za-z]+', basename).group()
'mega'
</code></pre>
<p>I don't think you are looking for a negative lookahead assertion or a negative lookbehind assertion. If anything, you want to match if numbers DO follow. For example, something like this:</p>
<pre><code>&gt;&gt;&gt; re.match(r'.*?(?=[_\d])', basename).group()
'mega'
</code></pre>
<p>The r simply makes a raw string (so that you don't need to constantly escape backslashes, for example).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; m = re.match(r'.*\b(\w+)_(%s)(?&lt;!.{%d})' % (ID, -1), my_new_string)
&gt;&gt;&gt; m.groups()
('mega', '1237665428090192022')

&gt;&gt;&gt; m.group(1)
'mega'
</code></pre>
</div>
<span class="comment-copy">What is <code>(?&lt;!.{-1})</code> supposed to be useful to ?</span>
<span class="comment-copy"><code>(?&lt;!...)</code> Matches if the current position in the string is not preceded by a match for <code>....</code> This is called a negative lookbehind assertion. In this case the character <code>.</code> after the <code>!</code> indicates anything, the <code>{-1}</code> is supposed to indicate the offset.. <a href="https://docs.python.org/3/library/re.html#re.regex.match" rel="nofollow noreferrer">python source</a>, <a href="https://stackoverflow.com/questions/17203604/can-you-search-backwards-from-an-offset-using-a-python-regular-expression">another answer</a></span>
