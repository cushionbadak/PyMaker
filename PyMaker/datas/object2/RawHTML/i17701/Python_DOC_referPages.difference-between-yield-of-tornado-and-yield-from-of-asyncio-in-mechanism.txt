<div class="post-text" itemprop="text">
<p>In Tornado, we usually write the following code to call a function asynchronously:</p>
<pre><code>class MainHandler(tornado.web.RequestHandler):

    @tornado.gen.coroutine
    def post(self):
        ...
        yield self.handleRequest(foo)
        ...

    @tornado.gen.coroutine
    def handleRequest(self, foo):
        ...
</code></pre>
<p>But in asyncio (will be shipped with Python 3.4, can be installed from pip for Python 3.3), we use <code>yield from</code> to achieve the same thing:</p>
<pre><code>@asyncio.coroutine
def myPostHandler():
    ...
    yield from handleRequest(foo)
    ...


@asyncio.coroutine
def handleRequest(foo)
    ...
</code></pre>
<p>Seeing from the code, the difference is <code>yield</code> and <code>yield from</code>. However the former <code>handleRequest(foo)</code> returns a <code>tornado.concurrent.Future</code> object, the latter returns a <code>generator</code> object.</p>
<p>My question is, what is the difference between the two things in mechanism? How is the control flow? And who calls the actual <code>handleRequest</code> and retrieves its returning value?</p>
<p>Append: I have basic knowledge of Python generators and iterators. I wanted to understand what Tornado and asyncio achieved by using these, and what is the difference between those two mechanisms.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a huge difference between the two. <code>yield from</code> takes another generator and continues yielding from that generator instead (delegating responsibility, as it were). <code>yield</code> just yields <strong>one</strong> value.</p>
<p>In other words, <code>yield from</code>, in the simplest case, could be replaced by:</p>
<pre><code>for value in self.handleRequest(foo):
    yield value
</code></pre>
<p>If you replaced a <code>yield from &lt;expression&gt;</code> line with <code>yield &lt;expression&gt;</code> you'd return the whole generator to the caller, not the values that generator produces.</p>
<p>The <code>yield from</code> syntax was only introduced in Python 3.3, see <a href="http://docs.python.org/3/whatsnew/3.3.html#pep-380-syntax-for-delegating-to-a-subgenerator">PEP 380: Syntax for Delegating to a Subgenerator</a>. Tornado supports Python versions 2.6, 2.7 and 3.2 in addition to Python 3.3, so it cannot rely on the <code>yield from</code> syntax being available. <code>asyncio</code>, on the other hand, being a core Python library added in 3.4, can fully rely on the <code>yield from</code> generator delegation syntax being available.</p>
<p>As a result, Tornado will have to post-process values yielded from a <code>@tornado.gen.coroutine</code> generator to detect that a <code>tornado.concurrent.Future</code> object was yielded; the <code>@asyncio.coroutine</code> code handling can be much simpler. And indeed the <a href="https://github.com/facebook/tornado/blob/c9af9a7224b1f42e91ad88b0a3f8f10478584b0a/tornado/gen.py#L507">Tornado <code>Runner.run()</code> method</a> does explicit type checks to handle delegated tasks.</p>
</div>
<span class="comment-copy">Thank you for your quick reply. But my question is not related to <code>yield</code> itself. I am concerned about what Tornado and asyncio achieved by using <code>yield</code> and <code>yield from</code>.</span>
<span class="comment-copy">@StarBrilliant: They achieve deferring the task until later; generators can be paused so that the event loop can pass control to another generator.</span>
<span class="comment-copy">@StarBrilliant: The coroutine runner will then loop through the active coroutines and give each a chance to execute. A coroutine that needs to wait for network resources can then just immediately yield again to allow control to pass to other coroutines that perhaps do not have to wait.</span>
<span class="comment-copy">@StarBrilliant: But your question appeared to be about the syntax difference; <code>yield from</code> makes the runner code simpler; <code>tornado</code> has to use explicit wrappers to handle delegation, <code>asyncio</code> can rely on the syntax to take care of delegation instead.</span>
<span class="comment-copy">In addition to making the runner simpler, <code>yield from</code> is also faster and tends to result in better stack traces when there is an error.  On the other hand, Tornado's use of <code>yield</code> provides better interoperability between coroutines and non-coroutines (including both asynchronous logic with explicit callbacks and threaded executors).</span>
