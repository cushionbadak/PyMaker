<div class="post-text" itemprop="text">
<p>So Im a beginner to python/programming and came upon this code in a tutorial, which Im having trouble understanding.</p>
<pre><code>from pythonds.basic.stack import Stack
</code></pre>
<p>What I did was , I went to the site-packages folder in my python directory (which holds all modules). There I could find the directory structure to be : -</p>
<pre><code> pythonds/basic/stack.py
</code></pre>
<p>The file stack.py has a "class Stack" inside it.
So am I correct in interpreting/relating the import command to this directory structure ? 
Also , whenever such a long chaining of modules happen in python, can it always be understood in such a manner.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not all the time.</p>
<p>It's probably better to not try and compare the directory structure with the module path, unless you have to debug modules or install them manually.</p>
<p>Sometimes, your PYTHONPATH will be extended to include subdirectories in <code>site-packages</code>, and then there'll be an extra subdirectory.</p>
<p>Other times, there can be an <code>__init__.py</code> file in the <code>pythonds/basic/</code> directory (there likely is), that can contain</p>
<pre><code>from .stack import Stack
</code></pre>
<p>in which case the import path could be</p>
<pre><code>from pythonds.basic import Stack
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your understanding is right. </p>
<pre><code>import pythonds.basic.stack
</code></pre>
<p>This will make all the classes in the module accessible by your script. Whereas,</p>
<pre><code>from pythonds.basic.stack import Stack
</code></pre>
<p>will make only the Stack class accessible by your script.</p>
</div>
<div class="post-text" itemprop="text">
<p>In command line, you can do like this:</p>
<pre><code>C:\Python27\Lib&gt;pip intall pythonds
</code></pre>
<p>Then this module can work.</p>
</div>
<span class="comment-copy"><a href="http://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/modules.html</a></span>
<span class="comment-copy">Why do you want to know? Out of curiosity, or do you want to manually fiddle around in <code>site-packages</code>; the latter is highly not recommended.</span>
<span class="comment-copy">Thanks Evert. I checked it in the directory and found exactly what you wrote. But again for curiosity I have a question that why are we having such an <b>init</b> file in basic directory ? I mean when this "from pythonds.basic.stack import Stack" works totally fien, then why do we again need to create an additional <b>init</b> file in basic directory ? Any intuition on that ?</span>
<span class="comment-copy">The <code>__init__.py</code> is executed to initialize the <i>package</i> as soon as it is first used (i. e. something is imported from it).</span>
<span class="comment-copy">An <code>__init__.py</code> indicates that the current directory can be treated as a Python package. You can have an empty <code>__init__.py</code> file, and that will turn the whole directory (or at least all the <code>.py</code> files) into a package. Without an <code>__init__.py</code> file in the <code>pythonds/basic/</code> directory, you would not be able to execute <code>import pythonds.basic</code>, since the <code>basic/</code> subdirectory would not be seen as a package. But for this, you can better read through the documentation linked by kkuilla above.</span>
