<div class="post-text" itemprop="text">
<p>I'm trying to search a text file and retrieve lines containing a specific set of words. This is the code I'm using:</p>
<pre><code>tyrs = subprocess.check_output('grep "^A" %s | grep TYR' % pocket_location, shell = True).split('\n')
</code></pre>
<p>This works fine when the file contains at least one line that grep identifies. But when grep doesn't identify any lines, grep returns exit status 1 and I get the following error:</p>
<pre><code>Traceback (most recent call last):
  File "../../Python_scripts/cbs_wrapper2.py", line 324, in &lt;module&gt;
    tyrs = subprocess.check_output('grep "^ATOM" %s | grep TYR' % pocket_location, shell = True).split('\n')
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py", line 544, in check_output
    raise CalledProcessError(retcode, cmd, output=output)
subprocess.CalledProcessError: Command 'grep "^ATOM" cbsPrediction_files/1u9c_clean/1u9c_clean_fpocket_out/pockets/pocket0_atm.pdb | grep TYR' returned non-zero exit status 1
</code></pre>
<p>How can I avoid this issue? I just want <code>subprocess.check_output</code> to return an empty string if grep doesn't find anything.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I just want subprocess.check_output to return an empty string if grep doesn't find anything.</p>
</blockquote>
<p>Well, too bad. <a href="http://pubs.opengroup.org/onlinepubs/009695399/utilities/grep.html"><code>grep</code></a> considers no matches to be failure, and the whole point of the <code>check</code> in <a href="http://docs.python.org/3/library/subprocess.html#subprocess.check_output"><code>check_output</code></a> is to check for failure, so you're explicitly asking to do things this way. Here are the relevant docs:</p>
<blockquote>
<p>If the return code was non-zero it raises a CalledProcessError. The CalledProcessError object will have the return code in the returncode attribute and any output in the output attribute.</p>
</blockquote>
<p>And for <code>grep</code>:</p>
<pre><code>The following exit values shall be returned:
  0 One or more lines were selected.
  1 No lines were selected.
  &gt;1 An error occurred.
</code></pre>
<p>So, if you want to treat "no lines" as success, but actual errors as errors, you have to handle that <code>1</code> value differently than other non-zero values. And <code>check_output</code> has no idea that you want to do that.</p>
<p>So, either you have to handle the <code>CalledProcessError</code>, or you have to do your own checking. In other words, either this:</p>
<pre><code>try:
    tyrs = subprocess.check_output('grep "^A" %s | grep TYR' % pocket_location, shell = True).split('\n')
except subprocess.CalledProcessError as e:
    if e.returncode &gt; 1:
        raise
    tyrs = []
</code></pre>
<p>â€¦ or this:</p>
<pre><code>p = subprocess.Popen('grep "^A" %s | grep TYR' % pocket_location, shell=True,
                     stdout=subprocess.PIPE)
output, _ = p.communicate()
if p.returncode == 1: # no matches found 
    tyrs = []
elif p.returncode == 0: # matches found
    tyrs = output.split('\n')
else:
    # error, do something with it
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>tyrs = subprocess.check_output('grep "^A" %s | grep TYR || true' % pocket_location, shell = True).split('\n')
</code></pre>
</div>
<span class="comment-copy">use <code>pipes.quote(pocket_location)</code> to allow the path with characters that are special in a shell such as space character.</span>
<span class="comment-copy">Thanks! Would you mind explaining why this works?</span>
<span class="comment-copy">The shell command is ended with call to true which ensures the return code is always 0</span>
<span class="comment-copy">Of course, if the grep fails for any other reason you are screwed with this approach. I suggest to take the abarnert solution if you are serious about programming.</span>
