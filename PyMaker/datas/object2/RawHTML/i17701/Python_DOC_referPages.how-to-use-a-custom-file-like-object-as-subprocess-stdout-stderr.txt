<div class="post-text" itemprop="text">
<p>Consider this code, where a <code>subprocess.Popen</code> is spawned. I'd like writes to the subprocess' <code>stdout</code> and <code>stderr</code> to go to my custom file-object's <code>.write()</code> method, however this isn't the case.</p>
<pre class="lang-python prettyprint-override"><code>import subprocess

class Printer:

    def __init__(self):
        pass

    def write(self, chunk):
        print('Writing:', chunk)

    def fileno(self):
        return 0

    def close(self):
        return

proc = subprocess.Popen(['bash', '-c', 'echo Testing'], 
                        stdout=Printer(),
                        stderr=subprocess.STDOUT)
proc.wait()
</code></pre>
<p>Why is the <code>.write()</code> method not used, and what is the use of specifying a <code>stdout=</code> parameter in this case?</p>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="http://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="nofollow">the documentation</a>:</p>
<blockquote>
<p>stdin, stdout and stderr specify the executed programâ€™s standard input, standard output and standard error file handles, respectively.  Valid values are <strong>PIPE, DEVNULL, an existing file descriptor (a positive integer), an existing file object, and None</strong>.</p>
</blockquote>
<p>Using <a href="http://docs.python.org/3/library/subprocess.html#subprocess.PIPE" rel="nofollow"><code>subprocess.PIPE</code></a>:</p>
<pre><code>proc = subprocess.Popen(['bash', '-c', 'echo Testing'], 
                        stdout=subprocess.PIPE,
                        stderr=subprocess.STDOUT)
print('Writing:', proc.stdout.read())
# OR  print('Writing:', proc.stdout.read().decode())
</code></pre>
</div>
<span class="comment-copy">Here's an example where a custom file-like object is used as subprocess stdout/stderr: <a href="http://stackoverflow.com/q/4984428/4279">Python subprocess get children's output to file and terminal?</a></span>
<span class="comment-copy">That works, however I need the <code>stdout</code> and <code>stderr</code> separate (should've been in question), and also in realtime. Also, why does my example not work, isn't it a file-like object?</span>
<span class="comment-copy">@minerz029, As I quoted the documentation, the subprocess.Popen does not accept file-like object, but only <code>PIPE</code>, <code>DEVNULL</code>, a file descriptor, a file object, <code>None</code>.</span>
<span class="comment-copy">@minerz029, <code>for line in proc.stdout: print('Writing', line.decode())</code></span>
<span class="comment-copy">@minerz029, If you meant to write to stdout, the return value of the <code>fileno</code> should be <code>1</code>. Even if you changed to <code>1</code>, <code>write</code> method is not called. It is just written to stdout of current process.</span>
<span class="comment-copy">@minerz029, Check <a href="http://codereview.stackexchange.com/a/17959/27028">this</a> out.</span>
