<div class="post-text" itemprop="text">
<p>I'm getting this error when I run my python script:</p>
<pre><code>TypeError: cannot concatenate 'str' and 'NoneType' objects
</code></pre>
<p>I'm pretty sure the 'str' means string, but I dont know what a 'NoneType' object is. My script craps out on the second line, I know the first one works because the commands from that line are in my asa as I would expect. At first I thought it may be because I'm using variables and user input inside send_command.</p>
<p>Everything in 'CAPS' are variables, everything in 'lower case' is input from 'parser.add_option' options.</p>
<p>I'm using pexpect, and optparse</p>
<pre><code>send_command(child, SNMPGROUPCMD + group + V3PRIVCMD)
send_command(child, SNMPSRVUSRCMD + snmpuser + group + V3AUTHCMD + snmphmac + snmpauth + PRIVCMD + snmpencrypt + snmppriv)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>NoneType</code> is the type for the <code>None</code> object, which is an object that indicates <em>no value</em>. <code>None</code> is the return value of functions that "don't return anything". It is also a common default return value for functions that search for something and may or may not find it; for example, it's returned by <code>re.search</code> when the regex doesn't match, or <code>dict.get</code> when the key has no entry in the dict. You cannot add <code>None</code> to strings or other objects.</p>
<p>One of your variables is <code>None</code>, not a string. Maybe you forgot to <code>return</code> in one of your functions, or maybe the user didn't provide a command-line option and <code>optparse</code> gave you <code>None</code> for that option's value. When you try to add <code>None</code> to a string, you get that exception:</p>
<pre><code>send_command(child, SNMPGROUPCMD + group + V3PRIVCMD)
</code></pre>
<p>One of <code>group</code> or <code>SNMPGROUPCMD</code> or <code>V3PRIVCMD</code> has <code>None</code> as its value.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/2/library/types.html#types.NoneType"><code>NoneType</code></a> is simply the type of the <a href="http://docs.python.org/3/library/constants.html#None"><code>None</code></a> singleton:</p>
<pre><code>&gt;&gt;&gt; type(None)
&lt;type 'NoneType'&gt;
</code></pre>
<p>From the latter link above:</p>
<blockquote>
<p><strong><code>None</code></strong></p>
<p>The sole value of the type <code>NoneType</code>. <code>None</code> is frequently used to represent the absence of a value, as when default arguments are not passed to a function. Assignments to <code>None</code> are illegal and raise a <code>SyntaxError</code>. </p>
</blockquote>
<p>In your case, it looks like one of the items you are trying to concatenate is <code>None</code>, hence your error.</p>
</div>
<div class="post-text" itemprop="text">
<p>It means you're trying to concatenate a string with something that is <code>None</code>.</p>
<p>None is the "null" of Python, and <code>NoneType</code> is its type.</p>
<p>This code will raise the same kind of error:</p>
<pre><code>&gt;&gt;&gt; bar = "something"
&gt;&gt;&gt; foo = None
&gt;&gt;&gt; print foo + bar
TypeError: cannot concatenate 'str' and 'NoneType' objects
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For the sake of defensive programming, objects should be checked against nullity before using.</p>
<pre><code>if obj is None:
</code></pre>
<p>or</p>
<pre><code>if obj is not None:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python, to represent the absence of a value, you can use the <code>None</code> value <code>types.NoneType.None</code></p>
</div>
<div class="post-text" itemprop="text">
<p>In the error message, instead of telling you that you can't concatenate two objects by showing their values (a string and <code>None</code> in this example), the Python interpreter tells you this by showing the types of the objects that you tried to concatenate. The type of every string is <code>str</code> while the type of the single <code>None</code> instance is called <code>NoneType</code>.</p>
<p>You normally do not need to concern yourself with <code>NoneType</code>, but in this example it is necessary to know that <code>type(None) == NoneType</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your error's occurring due to something like this:<br/>
<code>&gt;&gt;&gt; None + "hello world"<br/>
Traceback (most recent call last):<br/>
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;<br/>
TypeError: unsupported operand type(s) for +: 'NoneType' and 'str'
</code>&gt;&gt;&gt;  </p>
<p>Python's <em>None</em> object is roughly equivalent to <em>null</em>, <em>nil</em>, etc. in other languages.</p>
</div>
<div class="post-text" itemprop="text">
<p>One of the variables has not been given any value, thus it is a NoneType. You'll have to look into why this is, it's probably a simple logic error on your part.</p>
</div>
<div class="post-text" itemprop="text">
<p>A nonetype is the type of a None.</p>
<p>See the docs here:
<a href="https://docs.python.org/2/library/types.html#types.NoneType" rel="nofollow noreferrer">https://docs.python.org/2/library/types.html#types.NoneType</a></p>
</div>
<span class="comment-copy">We need to see more code and the input - NoneTyoe means that one of the variables has not been set</span>
<span class="comment-copy"><code>NoneType</code> is the type of the singleton value <code>None</code>. One of your values is not a string.</span>
<span class="comment-copy">Quick&amp;Dirty: put each term to concatenate in <code>str()</code> str(SNMPSRVUSRCMD) + str(snmpuser) + ...</span>
<span class="comment-copy">@PeterMmm That's a terrible idea -- the problem will just manifest itself (perhaps worse) further down the line. It would be better to figure out <i>why</i> one of the variables is None to begin with.</span>
<span class="comment-copy">Considering how often questions on <code>NoneType</code> have come up, been upvoted and saved, I think the Python core devs should just remove all references to <code>NoneType</code> from their error messages. It serves no purpose other than to confuse people. <code>None</code> is not reassignable (<code>None=1</code> is impossible), is a singleton (unique instance of <code>NoneType</code>), and is a keyword (thus available anywhere, <code>NoneType</code> is not). So I don't know why these errors couldn't just refer to it as <code>None</code>. It's not as if anyone might be confused by <i>Cannot concatenate 'str' and 'None'</i> and wonder <i>wait, which 'None' is this again?</i></span>
<span class="comment-copy">Thanks!! You where correct, one of my user input options was not taking for some reason. I added this as a "name" vs an option and boom, it worked. Now I just have to find out why this is not taking properly as an option, all the other options are working fine.</span>
<span class="comment-copy">"Not set" is a bit vague...if a variable is not defined and you try to perform some operation with it, you should get a <code>NameError</code>. It could also be set, but equal to <code>None</code> ("set to nothing" = "not set"?), then you might get some <code>TypeError</code>.</span>
<span class="comment-copy">Basically (for the C/Java folks here) none = null</span>
<span class="comment-copy">Note, equality operator <code>==</code> does not work here.</span>
<span class="comment-copy">"is" should only be used if you need it.  The best defensive programming is tests, lots of tests.</span>
<span class="comment-copy">Defensive programming is one of the most evil things. If you find an error like that, this means you made a mistake programming. Stuff like "checking for null before use" only hides some serious error. You should let the exception be thrown. And don't make programmers throw some custom exception, it is really cumbersome. Let the natural error be thrown. In fact, defensive programming is a symptom that you should be using another language.</span>
<span class="comment-copy">For Python 3, see: <a href="https://stackoverflow.com/questions/21706609/where-is-the-nonetype-located-in-python-3-x" title="where is the nonetype located in python 3 x">stackoverflow.com/questions/21706609/…</a></span>
<span class="comment-copy">I have a very similar problem and trying to detect if the object is NoneType, your affirmation doesn't work for me:  <code>&gt;&gt;&gt; type(key)  &lt;type 'NoneType'&gt; &gt;&gt;&gt; type(key) == NoneType Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt; NameError: name 'NoneType' is not defined</code></span>
<span class="comment-copy">@RuBiCK <code>NoneType</code> is not defined anywhere (that I am aware of). If you want to check whether a value is <code>None</code>, just use <code>key is None</code> (see <a href="http://stackoverflow.com/questions/23086383/how-to-test-nonetype-in-python" title="how to test nonetype in python">stackoverflow.com/questions/23086383/…</a>). Otherwise you could use <code>type(key) == type(None)</code> to the same effect.</span>
