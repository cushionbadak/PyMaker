<div class="post-text" itemprop="text">
<p>I can't figure out why:</p>
<pre><code>f = lambda x: x
In [8]: f is True
Out[8]: False

In [9]: not f is True
Out[9]: True

In [10]:  f is False
Out[10]: False

In [11]: f is True
Out[11]: False

In [12]: not f
Out[12]: False

In [13]: not f is True
Out[13]: True

In [14]: not f is False
Out[14]: True
</code></pre>
<p>ok. So until now we can imagine that is due to the use of "is" instead of "==". As shown here:</p>
<pre><code>In [15]: 0.00000 is 0
Out[15]: False

In [16]: 0.00000 == 0
Out[16]: True
</code></pre>
<p>Ok. But why then if i do it on the function:</p>
<pre><code>In [17]: not f == False
Out[17]: True

In [18]: not f == True
Out[18]: True

In [19]: f ==True
Out[19]: False

In [20]: f ==False
Out[20]: False

In [21]: f
Out[21]: &lt;function __main__.&lt;lambda&gt;&gt;
</code></pre>
<p>I was trying to explain it as due to "is" instead of "==" but examples 19 and 20 crushed my logic. Can someone explain?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>==</code> checks for equivelency ... <code>is</code> checks identity ... 
a function is a non-falsey value however it is not equivelent to True</p>
<pre><code>def xyz():
   pass

if xyz:
   #this will trigger since a method is not a falsey value

xyz == True #No it is not equal to true
xyz == False #no it is not equal to false

xyz is True #no it certainly is not the same memory location as true
xyz is False #no it is also not the same memory location as false
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>is</code> tests for <em>object identity</em>. Comparing anything other than <code>True</code> with <code>is True</code> is always going to be false.</p>
<p>Your next set of tests test if <code>not (f == False)</code> or <code>not (f == True)</code>; again, boolean objects only test equal against themselves, so anything other than <code>False</code> will test as false when comparing with <code>== False</code>. <code>not False</code> then is true.</p>
<p>You want to use <code>bool()</code> instead to test if something is true or false:</p>
<pre><code>&gt;&gt;&gt; bool(f)
True
&gt;&gt;&gt; bool(0)
False
</code></pre>
<p>Don't use equality testing to see if something is true or false.</p>
<p>Note that only numeric 0, empty containers and strings, and <code>False</code> is considered false  in Python. Everything else, by default, is considered true in a boolean context. Custom types can implement either the <a href="http://docs.python.org/2/reference/datamodel.html#object.__nonzero__" rel="nofollow"><code>__nonzero__</code> method</a> (when numeric) or the <a href="http://docs.python.org/2/reference/datamodel.html#object.__len__" rel="nofollow"><code>__len__</code> method</a> (to implement a container) to alter that behaviour. Python 3 replaced <code>__nonzero__</code> with the <a href="http://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="nofollow"><code>__bool__</code> method</a>.</p>
<p>Functions do not have a <code>__nonzero__</code> or <code>__len__</code> method, so they are always considered true.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you check the "truthyness" of a function, you will see it is True.</p>
<pre><code>&gt;&gt;&gt; f = lambda x: x
&gt;&gt;&gt; bool(f)
True
</code></pre>
<p>You were simply comparing the function itself to <code>True</code> or <code>False</code> Which it would never be, since it is a function.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your own example shows that <code>f is False</code> is false so I'm confused by your title.</p>
<p>Why would you expect a function to evaluate as equal to either Boolean value? Wouldn't that be kind of weird behaviour?</p>
</div>
<span class="comment-copy">Is this specific to functions? How do other values compare against True and False?</span>
<span class="comment-copy">awww so stupid. forgot to compare the boolean value using bool(). of course . please delete</span>
<span class="comment-copy">Your first statement says <code>True is True</code> always going to be <code>False</code>. Why? I'd expect it to be <code>True</code> and my interpreter concurs.</span>
<span class="comment-copy">I know what you're saying, but taken literally, "Anything other than <code>True is True</code>" can be easily misread (to, e.g., mean that <code>False is False</code> would be false).</span>
<span class="comment-copy">@Noufal Ibrahim you missed the <code>Anything other than</code>...</span>
<span class="comment-copy">Ah. I either read it too fast or the first draft of the answer didn't have it. Either way, mea culpa. Thanks.</span>
<span class="comment-copy">@NoufalIbrahim: <i>Anything other than [statement] is going to be false</i>.</span>
<span class="comment-copy">if you forget some parenthesis. <code>if char.isdigit and char in ['1','2']</code> vs <code>if char.isdigit() and char in ['1','2']</code></span>
