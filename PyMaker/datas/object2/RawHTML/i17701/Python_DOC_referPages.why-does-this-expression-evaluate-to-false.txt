<div class="post-text" itemprop="text">
<p>I thought <code>range()</code> returns a list of numbers . why does the <code>all()</code> function return a false for this </p>
<pre><code>all(range(100))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>range(100)</code> contains 0, and the boolean value of 0 is <code>False</code>:</p>
<pre><code>In [1]: bool(0)
Out[1]: False
</code></pre>
<p>while for any other number it evaluates to <code>True</code>. The function <code>all</code> only returns <code>True</code> when all of the elements of its argument evaluate to <code>True</code>, see its <a href="http://docs.python.org/3/library/functions.html#all" rel="nofollow">manual</a> (the <code>if</code> statement in the given example implicitly takes the boolean value of every item). See here the difference of including 0 or not:</p>
<pre><code>In [2]: all(range(10)) # 0..9
Out[2]: False

In [3]: all(range(1,10)) # 1..9
Out[3]: True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because the first number generated by <code>range</code> is 0.</p>
<pre><code>&gt;&gt;&gt;range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# 0 is evaluated to false in boolean expressions
&gt;&gt;&gt;bool(0)
True

# making range start at 1
&gt;&gt;&gt;all(range(1, 100))
True
</code></pre>
</div>
<span class="comment-copy">Watch out for your test of "falsiness", because <code>[] == False</code> is <code>False</code> even though <code>not []</code> is <code>True</code>.  It's more accurate to test falsiness with <code>not</code> or by explicitly converting to <code>bool</code>.  The <code>0 == False</code> test worked only because of the way <code>False</code> implemented.</span>
<span class="comment-copy">@SethMMorton Thanks for the heads up. I'll update the answer to <code>bool(0)</code>. But I would expect that if <code>[] == False</code> then <code>not []</code> be equal true, don't you?</span>
<span class="comment-copy">No.  <code>not</code> or <code>bool</code> uses the <code>__nonzero__</code> method of an object (<code>__bool__</code> in python 3.x).  <code>==</code> uses <code>__eq__</code>.  When you use <code>==</code> it expects another list, so when comparing itself to <code>False</code> it sees it is not the same and returns <code>False</code>.  When you use <code>not</code> or <code>bool</code>, it "looks inside itself" to determine if it is <code>False</code> or <code>True</code>.</span>
