<div class="post-text" itemprop="text">
<p>I'm trying to encrypt a message in Java and decrypt it in Python. Unfortunately i'm just starting with python and am not able to get the decryption working. </p>
<p>That's my Java Code:</p>
<pre><code>KeyGenerator keygen = KeyGenerator.getInstance("AES");
SecureRandom sr = SecureRandom.getInstance("SHA1PRNG");
byte[] iv = sr.generateSeed(16);
IvParameterSpec ivSpec = new IvParameterSpec(iv);
SecretKey aesKey = keygen.generateKey();

//save byte array in text file to recreate key later
byte[] encodedKey = aesKey.getEncoded();
new File("myPath\\AESKey.txt");
FileOutputStream fos = new FileOutputStream("myPath\\AESKey.txt");
//save AesKey in first 16 bytes and Initial Vector in next 16 bytes
fos.write(encodedKey);
fos.write(iv);
fos.close();

String secretText = "Hello cryptography";      
Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
cipher.init(Cipher.ENCRYPT_MODE, aesKey, ivSpec);
byte[] encrypted = cipher.doFinal(secretText.getBytes());
BASE64Encoder myEncoder  = new BASE64Encoder();
String encodedSecretText = myEncoder.encode(encrypted);

new File("myPath\\encodedSecretText.txt");
FileOutputStream fos2 = new FileOutputStream("myPath\\encodedSecretText.txt");
fos2.write(encodedSecretText.getBytes());  
fos2.close();
</code></pre>
<p>I was able to decrypt the message with java, but not with python. I hope someone can show me how to do this.i copied the part with padding from another answer and assume that's the problem.</p>
<p><strong>I get the message: ord() expected string of length 1, but int found.</strong></p>
<p>Python:</p>
<pre><code>from Crypto import Random
from Crypto.Cipher import AES
import base64

BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS) 
unpad = lambda s : s[0:-ord(s[-1])]

#read bytes of aesKey
file = open("myPath/AESKey.txt","rb")
aesKey = file.read(16)
iv = file.read(16)
file.close()
sec = open("myPath/encodedSecretText.txt")
for line in sec:
encodedSecretText =  line.rstrip()
sec.close()

class AESCipher:
    def __init__( self, key ):
        self.key = key
    def encrypt( self, raw ):
        raw = pad(raw)
        iv = Random.new().read( AES.block_size )
        cipher = AES.new( self.key, AES.MODE_CBC, iv )
        return base64.b64encode( iv + cipher.encrypt( raw ) ) 
    def decrypt( self, enc ):
        enc = base64.b64decode(enc)
        cipher = AES.new(self.key, AES.MODE_CBC, iv )
        return unpad(cipher.decrypt( enc[16:] ))

aes = AESCipher(aesKey)   
print(aes.decrypt(encodedSecretText))
</code></pre>
<p>Thanks for any hint.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're calling <a href="http://docs.python.org/3/library/functions.html#ord" rel="nofollow"><code>ord</code></a> on an integer. Which is obviously illegal. The whole point of <code>ord</code> is that you give it a Unicode character, as a string, and it gives you back the numerical value of the code point.</p>
<p>So, why do you have a number? Well, I'm not sure what you expected to have, but let's look at what you actually have. If <code>s[-1]</code> is an integer, then <code>s</code> is some kind of sequence of integers. And <code>s</code> is the result of calling <code>cipher.decrypt()</code>. As <a href="https://www.dlitz.net/software/pycrypto/api/current/" rel="nofollow">the documentation</a> for that function says, it returns a byte string. This isn't a specific type, just a description of a type—you can find out what the <em>actual</em> return value is with some basic debugging, maybe like this:</p>
<pre><code>    cipher = AES.new(self.key, AES.MODE_CBC, iv )
    plaintext = cipher.decrypt(enc[16:])
    print(type(plaintext), repr(plaintext))
    return unpad(plaintext)    
</code></pre>
<p>But I'm going to guess that it's a <a href="http://docs.python.org/3/library/stdtypes.html#binaryseq" rel="nofollow"><code>bytes</code></a> object, which (quoting from <a href="http://docs.python.org/3/library/functions.html#bytes" rel="nofollow">http://docs.python.org/3/library/functions.html#bytes</a>) …</p>
<blockquote>
<p>is an immutable sequence of integers in the range 0 &lt;= x &lt; 256. </p>
</blockquote>
<p>So, <code>s[-1]</code> is an integer in the range <code>[0, 256)</code>. Hence the error.</p>
<p>So, what should you be doing instead? Well, why are you trying to call <code>ord</code>? You have a byte. Presumably what you want is a byte. So… just don't call anything there.</p>
<hr/>
<p>Meanwhile, there's at least one other serious error in your code:</p>
<pre><code>for line in sec:
encodedSecretText =  line.rstrip()
sec.close()
</code></pre>
<p>As pasted, this will raise an <code>IndentationError</code>. And if you indent both the second and third lines, you'll get an error for reading from a closed file. So presumably you want to indent just the second one. In which case, what you're doing is going through all of the lines, stripping the trailing whitespace off each, and then doing nothing with them. At the end of the loop, <code>encodedSecretText</code> holds the last line of encoded text, and all of the other lines are long forgotten and unrecoverable.</p>
<p>If you want to read all of the text into a list of lines, you will want something like this:</p>
<pre><code>encodedSecretText = []
for line in sec:
    encodedSecretText.append(line.rstrip())
</code></pre>
<p>Or, if you want to read it into one big string, with the newlines removed, you could do the above and then <code>encodedSecretText = b''.join(encodedSecretText)</code>, or just do skip the whole loop and do <code>encodedSecretText = sec.read().replace(b'\n', b'')</code>.</p>
</div>
<span class="comment-copy">First, please show a complete traceback, not just the description from the exception. Second, please fix the indentation so this code is actually runnable.</span>
<span class="comment-copy">As a side note, why are you going out of your way to use <code>lambda</code> to define anonymous expression-only functions just so you use them in a statement and give them a name? If you want your functions to have names, that's what <code>def</code> does.</span>
<span class="comment-copy">I've rolled back the question, because your edit removes the entire point of your question, making both it and the existing answer useless. You were having a problem with your attempted <code>unpad</code> function. I showed you how to solve that problem. So take that solution and move forward until you get <code>unpad</code> to do what you want, or get stuck somewhere else, at which point you can ask a new question. Erasing your attempted solution entirely and begging for someone to write the code for you is not a step forward.</span>
<span class="comment-copy">Maybe i misunderstood you when you wrote "just don't call anything there". I thought that the unpad function is not necessary because i already have a byte? That's why i just removed the unpad function. And the reason i removed the for loop is that i just implemented it in the first place for testing. the secret message will be transfered differently later. Now i really dont know how to get the decrypted message in plaintext ("Hello cryptagrophy") and what i'm still missing.</span>
<span class="comment-copy">Your <code>unpad</code> function did more than just call <code>ord</code>, it used the result of that <code>ord</code> to slice the <code>bytes</code>. If one part of the implementation of that function was incorrect and unnecessary, that doesn't mean you can just throw the whole function away and expect everything to work.</span>
<span class="comment-copy">Thanks for your answer, when i used encryption i used PKCS5Padding and thought that i have to use it in decryption as well. My goal is to decrypt the encrypted message. Thats where i dont make any progress. I will post the new code in python in a sec</span>
<span class="comment-copy">@user3157669: I don't see what that comment has to do with the question or with my answer. Your problem is that your code raises a <code>TypeError</code>. I showed you why it does that, and how to fix it. So fix that error and move forward until you get stuck again, then ask a new question.</span>
