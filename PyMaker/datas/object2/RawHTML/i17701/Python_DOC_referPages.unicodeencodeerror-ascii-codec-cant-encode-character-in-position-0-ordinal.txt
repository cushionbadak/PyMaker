<div class="post-text" itemprop="text">
<p>I'm working on a Python script that uses the scissor character (9986 - ✂) and I'm trying to port my code to Mac, but I'm running into this error.</p>
<p>The scissor character shows up fine when run from IDLE (Python 3.2.5 - OS X 10.4.11 iBook G4 PPC) and the code works entirely fine on Ubuntu 13.10, but when I attempt to run this in the terminal I get this error/traceback:</p>
<pre><code>Traceback (most recent call last):
  File "snippets-convert.py", line 352, in &lt;module&gt;
    main()
  File "snippets-convert.py", line 41, in main
    menu()
  File "snippets-convert.py", line 47, in menu
    print ("|\t ",snipper.decode(),"PySnipt'd",snipper.decode(),"\t|")
UnicodeEncodeError: 'ascii' codec can't encode character '\u2702' in position 0: ordinal not in range(128)
</code></pre>
<p>and the code that is giving me the problem:</p>
<p><code>print ("|\t ",chr(9986),"PySnipt'd",chr(9986),"\t|")</code> </p>
<p>Doesn't this signal that the terminal doesn't have the capability to display that character? I know this is an old system, but it is currently the only system I have to use. Could the age of the OS is interfering with the program?</p>
<p>I've read over these questions:</p>
<ul>
<li><p><a href="https://stackoverflow.com/questions/5141559/unicodeencodeerror-ascii-codec-cant-encode-character-u-xef-in-position-0">UnicodeEncodeError: 'ascii' codec can't encode character u'\xef' in position 0: ordinal not in range(128)</a> - Different character</p></li>
<li><p><a href="https://stackoverflow.com/questions/1652904/unicodeencodeerror-ascii-codec-cant-encode-character">"UnicodeEncodeError: 'ascii' codec can't encode character"</a> - Using 2.6, so don't know if it applies</p></li>
<li><p><a href="https://stackoverflow.com/questions/1653569/unicodeencodeerror-ascii-codec-cant-encode-character">UnicodeEncodeError: 'ascii' codec can't encode character?</a> - Seems to be a plausible solution to my problem, <code>.encode('UTF-8')</code>, I don't get the error. However, it displays a character code, not the character I want, and <code>.decode()</code> just gives me the same error. Not sure if I'm doing this right.</p></li>
<li><p><a href="https://stackoverflow.com/questions/11865582/unicodeencodeerror-ascii-codec-cant-encode-characters-in-position-0-6-ordin">UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-6: ordinal not in range(128)</a> - Not sure if this applies, he's using a GUI, getting input, and all in Greek.</p></li>
</ul>
<p>What's causing this error? Is it the age of the system/OS, the version of Python, or some programming error?</p>
<p><strong>EDIT</strong>:
This error crops up later with this duplicate issue (just thought I'd add it as it is within the same program and is the same error):</p>
<pre><code>Traceback (most recent call last):
  File "snippets-convert.py", line 353, in &lt;module&gt;
    main()
  File "snippets-convert.py", line 41, in main
    menu()
  File "snippets-convert.py", line 75, in menu
    main()
  File "snippets-convert.py", line 41, in main
    menu()
  File "snippets-convert.py", line 62, in menu
    search()
  File "snippets-convert.py", line 229, in search
    print_results(search_returned)      # Print the results for the user
  File "snippets-convert.py", line 287, in print_results
    getPath(toRead)                                             # Get the path for the snippet
  File "snippets-convert.py", line 324, in getPath
    snipXMLParse(path)
  File "snippets-convert.py", line 344, in snipXMLParse
    print (chr(164),child.text)
UnicodeEncodeError: 'ascii' codec can't encode character '\xa4' in position 0: ordinal not in range(128)
</code></pre>
<p><strong>EDIT:</strong> </p>
<p>I went into the terminal character settings and it does in fact support that character (as you can see in this screenshot:</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/VxwAJ.png"/></p>
<p>when I insert it into terminal it prints out this: <code>\342\234\202</code> and when I press <kbd>Enter</kbd> I get this: <code>-bash: ✂: command not found</code></p>
<p><strong>EDIT</strong> Ran commands as @J.F. Sebastian asked:</p>
<p><code>python3 test-io-encoding.py</code>:</p>
<pre><code>PYTHONIOENCODING:       None
locale(False):  US-ASCII
device(stdout): US-ASCII
stdout.encoding:        US-ASCII
device(stderr): US-ASCII
stderr.encoding:        US-ASCII
device(stdin):  US-ASCII
stdin.encoding: US-ASCII
locale(False):  US-ASCII
locale(True):   US-ASCII
</code></pre>
<p><code>python3 -S test-io-encoding.py</code>:</p>
<pre><code>PYTHONIOENCODING:       None
locale(False):  US-ASCII
device(stdout): US-ASCII
stdout.encoding:        US-ASCII
device(stderr): US-ASCII
stderr.encoding:        US-ASCII
device(stdin):  US-ASCII
stdin.encoding: US-ASCII
locale(False):  US-ASCII
locale(True):   US-ASCII
</code></pre>
<p><strong>EDIT</strong> Tried the "hackerish" solution provided by @PauloBu:</p>
<p>As you can see, this caused one (Yay!) scissor, but I am now getting a new error. Traceback/error:</p>
<pre><code>+-=============================-+
✂Traceback (most recent call last):
  File "snippets-convert.py", line 357, in &lt;module&gt;
    main()
  File "snippets-convert.py", line 44, in main
    menu()
  File "snippets-convert.py", line 52, in menu
    print("|\t "+sys.stdout.buffer.write(chr(9986).encode('UTF-8'))+" PySnipt'd "+ sys.stdout.buffer.write(chr(9986).encode('UTF-8'))+" \t|")
TypeError: Can't convert 'int' object to str implicitly
</code></pre>
<p><strong>EDIT</strong> Added results of @PauloBu's fix:</p>
<pre><code>+-=============================-+
|
✂ PySnipt'd 
✂       |
+-=============================-+
</code></pre>
<p><strong>EDIT</strong>:</p>
<p>And his fix for his fix:</p>
<pre><code>+-=============================-+
✂✂|       PySnipt'd     |
+-=============================-+
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When Python prints and output, it automatically encodes it to the target medium. If it is a file, UTF-8 will be used as default and everyone will be happy, but if it is a terminal, Python will figure out the encoding the terminal is using and will try to encode the output using that one.</p>
<p>This means that if your terminal is using <code>ascii</code> as encoding, Python is trying to encode <code>scissor</code> char to ascii. Of course, ascii doesn't support it so you get Unicode decode error.</p>
<p>This is why <strong>you always have to explicitly encode your output</strong>. Explicit is better than implicit remember? To fix your code you may do:</p>
<pre><code>import sys
sys.stdout.buffer.write(chr(9986).encode('utf8'))
</code></pre>
<p>This seems a bit hackerish. You can also set PYTHONIOENCODING=utf-8 before executing the script. I'am uncomfortable with both solutions. Probably your console doesn't support utf-8 and you see gibberish. But your program will be behaving correctly.</p>
<p>What I strongly recommend if you <strong>definitely</strong> need to show correct output on your console is to set your console to use another encoding, one that support <code>scissor</code> character. (utf-8 perhaps). On Linux, that can be achieve by doing: <code>export lang=UTF_8</code>. On Windows you change the console's code page with <code>chcp</code>. Just figure out how to set utf8 in yours and IMHO that'll be the best solution.</p>
<p><hr/>
You can't mix <code>print</code> and <code>sys.stdout.write</code> because they're basically the same. Regarding to your code, the hackerish way would be like this:</p>
<pre><code>sys.stdout.buffer.write(("|\t "+ chr(9986) +" PySnipt'd " + chr(9986)+" \t|").encode('utf8'))
</code></pre>
<p>I suggest you to take a read at the docs to see what's going on under the hood with <code>print</code> function and with <code>sys.stdout</code>: <a href="http://docs.python.org/3/library/sys.html#sys.stdin" rel="noreferrer">http://docs.python.org/3/library/sys.html#sys.stdin</a></p>
<p>Hope this helps!</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://gist.github.com/zed/5898423"><code>test_io_encoding.py</code></a> output suggests that you should change your <code>locale</code> settings e.g., set <code>LANG=en_US.UTF-8</code>.</p>
<hr/>
<p>The first error might be due to you are trying to decode a string that is already Unicode. Python 2 tries to encode it using a default character encoding (<code>'ascii'</code>) <em>before</em> decoding it using (possibly) different character encoding. The error happens on the <code>encode</code> step:</p>
<pre><code>&gt;&gt;&gt; u"\u2702".decode() # Python 2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\u2702' in position 0: ordinal not in range(128)
</code></pre>
<p>It looks like you are running your script using Python 2 instead of Python 3. You would get:</p>
<pre><code>&gt;&gt;&gt; "\u2702".decode() # Python 3
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'str' object has no attribute 'decode'
</code></pre>
<p>different error otherwise.</p>
<p>Just drop the <code>.decode()</code> call:</p>
<pre><code>print("|\t {0} PySnipt'd {0} \t|".format(snipper))
</code></pre>
<p>The second issue is due to printing a Unicode string into a pipe:</p>
<pre><code>$ python3 -c'print("\u2702")'
✂
$ python3 -c'print("\u2702")' | cat
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character '\u2702' in position 0: ordinal not in range(128)
</code></pre>
<p>Set appropriate for your purpose <code>PYTHONIOENCODING</code> environment variable:</p>
<pre><code>$ PYTHONIOENCODING=utf-8 python3 -c'print("\u2702")' | cat
✂
</code></pre>
<hr/>
<blockquote>
<p>the terminal is just displaying this: <code>| b'\xe2\x9c\x82' PySnipt'd b'\xe2\x9c\x82' |</code></p>
</blockquote>
<p>If <code>snipper</code> is a <code>bytes</code> object then leave the <code>snipper.decode()</code> calls. </p>
<pre><code>$ python3 -c"print(b'\xe2\x9c\x82'.decode())"
✂
$ python3 -c"print(b'\xe2\x9c\x82'.decode())" | cat
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character '\u2702' in position 0: ordinal not in range(128)
</code></pre>
<p>The fix is the same:</p>
<pre><code>$ PYTHONIOENCODING=utf-8 python3 -c"print(b'\xe2\x9c\x82'.decode())" | cat
✂
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My locale is set to de_AT.UTF-8 but these lines in <code>/etc/profile</code>
were missing:</p>
<pre><code>export LANG=de_AT.UTF-8
export LANGUAGE=de_AT.UTF-8
export LC_ALL=de_AT.UTF-8
</code></pre>
<p>logout / login and your problem should be solved</p>
<p>To verify if all locales are set correctly type <code>locale</code> in your terminal</p>
<p>The output should be similar to this:</p>
<pre><code>LANG=de_AT.UTF-8
LANGUAGE=de_AT.UTF-8
LC_CTYPE="de_AT.UTF-8"
LC_NUMERIC="de_AT.UTF-8"
LC_TIME="de_AT.UTF-8"
LC_COLLATE="de_AT.UTF-8"
LC_MONETARY="de_AT.UTF-8"
LC_MESSAGES="de_AT.UTF-8"
LC_PAPER="de_AT.UTF-8"
LC_NAME="de_AT.UTF-8"
LC_ADDRESS="de_AT.UTF-8"
LC_TELEPHONE="de_AT.UTF-8"
LC_MEASUREMENT="de_AT.UTF-8"
LC_IDENTIFICATION="de_AT.UTF-8"
LC_ALL=de_AT.UTF-8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>in the first line of your file .py you need to add this string, :</p>
<p># -<em>- coding: utf-8 -</em>-</p>
<p>and you can also try this:</p>
<p>print ("|\t ",unichr(9986),"PySnipt'd",unichr(9986),"\t|")</p>
</div>
<span class="comment-copy">What output exactly do you get when using <code>.encode('UTF-8')</code>?</span>
<span class="comment-copy">@delnan It returns: <code>b'\xe2\x9c\x82'</code></span>
<span class="comment-copy">Ah, of course. You need to output bytes then, but I'm not sure how to do that reliably and it would only solve the problem if the console is <i>actually</i> using UTF-8 and Python just doesn't realize that.</span>
<span class="comment-copy">This answer is for Python 2 but it might help: <a href="http://stackoverflow.com/a/1169209/5987">stackoverflow.com/a/1169209/5987</a></span>
<span class="comment-copy">@MarkRansom Yes, looked at that. I plan to try some of it if I can...</span>
<span class="comment-copy">That makes sense. How do I fix it? Sweet! I will try this out!</span>
<span class="comment-copy">@RPiAwesomeness added some more explanation. Let me know if you get it.</span>
<span class="comment-copy">In Python 3, this just outputs bytes, so code like this will output the <code>str</code> <code>"b'\\xe2\\x9c\\x82'"</code>.</span>
<span class="comment-copy"><i>"you always have to explicitly encode your output"</i> is incorrect. You don't want to use scripts that are complete duplicates except for the output character encoding to be able to run them in different environments.</span>
<span class="comment-copy">:) I think the generic solution would be to try to <code>print</code> Unicode and catch any <code>UnicodeEncodeError</code> exceptions. The <code>repr()</code> of the string could then be printed. Just a thought :)</span>
<span class="comment-copy">Good answer, but it gives me the same thing as here: <a href="http://stackoverflow.com/questions/20923663/unicodeencodeerror-ascii-codec-cant-encode-character-in-position-0-ordinal/20923794?noredirect=1#comment31415491_20923794" title="unicodeencodeerror ascii codec cant encode character in position 0 ordinal">stackoverflow.com/questions/20923663/…</a></span>
<span class="comment-copy">It's kind of overkill to set and environment variable. In Python2.7 it is as simple as specifying and output encoding. I just realized in Python3 this won't work exactly the same. There's got to be another simpler (pythonic) way to do it.</span>
<span class="comment-copy">@RPiAwesomeness: I've updated the answer for "<code>snipper</code> is a <code>bytes</code> object" case</span>
<span class="comment-copy">@PauloBu: do you want to change the source code of your programs every time you run them in a terminal that has different character encoding?</span>
<span class="comment-copy"><code>snipper.decode()</code> just gives me the same error as when I originally started. I edited my question with some new info.</span>
<span class="comment-copy">Hell no man!. That's not the problem!</span>
<span class="comment-copy">Yup, did nadda.</span>
