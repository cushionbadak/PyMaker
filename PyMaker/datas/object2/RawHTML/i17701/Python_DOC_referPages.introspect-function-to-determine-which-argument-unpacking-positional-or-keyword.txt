<div class="post-text" itemprop="text">
<p>I was searching for a way to identify whether some argument is used for unpacking and I have found this:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; def func_has_positional_args(func):
    std_args = func.func_code.co_argcount
    wildcard_args = len(func.func_code.co_varnames) - std_args
    if wildcard_args == 2:
        return True  # yes, has both positional and keyword args
    elif wildcard_args == 0:
        return False  # has neither positional, nor keyword args
    else:
        raise NotImplementedError('Unable to tell')


&gt;&gt;&gt; func_has_keyword_args = func_has_positional_args
&gt;&gt;&gt; def test1(a, b, *args, **kwargs): pass

&gt;&gt;&gt; func_has_positional_args(test1), func_has_keyword_args(test1)
(True, True)
&gt;&gt;&gt; def test2(a, b): pass

&gt;&gt;&gt; func_has_positional_args(test2), func_has_keyword_args(test2)
(False, False)
&gt;&gt;&gt; def test3(a, b, *args): pass

&gt;&gt;&gt; func_has_positional_args(test3)

Traceback (most recent call last):
  File "&lt;pyshell#52&gt;", line 1, in &lt;module&gt;
    func_has_positional_args(test3)
  File "&lt;pyshell#41&gt;", line 9, in func_has_positional_args
    raise NotImplementedError('Unable to tell')
NotImplementedError: Unable to tell
</code></pre>
<p>So I am able to tell, if there are is no positional, nor keyword arguments unpacking. I am also able to tell if there are both, but I am unable to distinguish which "wildcard" type argument is implemented, if there is only one "wildcard".</p>
<p>Could you help me achieve the following result?</p>
<pre class="lang-py prettyprint-override"><code># Already satisfied with above code:
assert func_has_positional_args(test1) == True
assert func_has_keyword_args(test1) == True
assert func_has_positional_args(test2) == False
assert func_has_keyword_args(test2) == False

# Missing functionality (tests are failing):
assert func_has_positional_args(test3) == True
assert func_has_keyword_args(test3) == False
</code></pre>
<p>Also, does Python 3 change anything with regard to this functionality or its behavior?</p>
</div>
<div class="post-text" itemprop="text">
<p>As mgilson commented, use <code>inspect.getargspec</code> (more preferably <a href="http://docs.python.org/3/library/inspect.html#inspect.getfullargspec" rel="nofollow"><code>inspect.getfullargspec</code></a> in Python 3.x).</p>
<pre><code>import inspect

def func_has_positional_args(func):
    spec = inspect.getfullargspec(func)
    return bool(spec.varargs) # varargs: name of the * argument or None
def func_has_keyword_args(func):
    spec = inspect.getfullargspec(func)
    return bool(spec.varkw)   # varkw: name of the ** argument or None
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; def test1(a, b, *args, **kwargs): pass
...
&gt;&gt;&gt; def test2(a, b): pass
...
&gt;&gt;&gt; def test3(a, b, *args): pass
...
&gt;&gt;&gt; func_has_positional_args(test1)
True
&gt;&gt;&gt; func_has_keyword_args(test1)
True
&gt;&gt;&gt; func_has_positional_args(test2)
False
&gt;&gt;&gt; func_has_keyword_args(test2)
False
&gt;&gt;&gt; func_has_positional_args(test3)
True
&gt;&gt;&gt; func_has_keyword_args(test3)
False
</code></pre>
</div>
<span class="comment-copy">... I'm not sure I'm following this really closely, but aren't you looking for <code>inspect.getargspec</code>?  How is what you are doing different?</span>
<span class="comment-copy">@mgilson: Yes, bullseye ;) Seemingly I was too focused on looking up function properties instead of looking at <code>inspect</code> module... Would you care to post it as an answer?</span>
<span class="comment-copy">Thanks, so preferred way for writing Python 2.x + 3.x compatible code is to actually do that during import of <code>inspect</code>, right? I did not find <code>six</code> module support for this function.</span>
<span class="comment-copy">@Tadeck, If you want the code that run both in Python 2, 3. Use <code>inspect.getargspec</code>. (Replace <code>varkw</code> with <code>keywords</code>).</span>
<span class="comment-copy">@Tadeck, <code>inspect.getargspec</code> is deprecated according to the documetation. But <code>getargspec</code> is still there even in <a href="http://docs.python.org/3.4/library/inspect.html#inspect.getargspec" rel="nofollow noreferrer">Python 3.4</a>.</span>
