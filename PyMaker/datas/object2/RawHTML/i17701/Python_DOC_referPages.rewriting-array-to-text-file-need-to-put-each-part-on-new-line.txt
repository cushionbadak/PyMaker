<div class="post-text" itemprop="text">
<p>I have a stock system.
The data is written into the file like this: (product code, name, costprice, price, quantity)</p>
<pre><code>1004, table, 10, 20, 45
1005, chair, 6, 13, 30
1006, lamp, 2, 5, 10
</code></pre>
<p>The code below is for updating the quantity of the stock:</p>
<pre><code>def test():
    items = []
    itemname = input("Enter itemname: ")
    with open('Stockinventory.txt') as inputfile:
        for line in inputfile:
            items.append(line.strip().split(','))

    with open('Stockinventory.txt') as inputfile:
        for num, line in enumerate(inputfile, 0):
            if itemname in line:
                newline = (items[num])
                newline = line.split(", ")
                print ("SIN: %s" % newline[0])
                print ("Itemname: %s" % newline[1])
                print ("Retail price: %s" % newline[2])
                print ("Costprice: %s" % newline[3])
                print ("Quantity Available: %s" % newline[4])
                choice = input("Would you like to update quantity? y/n")
                if choice == 'y':
                    newquantity = input("Enter new quantity: ")
                    newline[4] = newquantity
                    print(newline)
                    items[num] = newline
                    print(items)
                    writetrue = '1'
                else:
                    startup()

    if writetrue == '1':
        f = open('Stockinventory.txt', 'w')
        f.write(str(items))
        f.close()
    else:
        print("No change")
        startup()
</code></pre>
<p>The code changes the quantity correctly but when I rewrite the array to the file, it looks like this:</p>
<pre><code>[['1004', 'table', '10', '20', '30'], ['1005', ' chair', ' 6', ' 13', ' 30'], ['1006', ' lamp', ' 2', ' 5', ' 10']]
</code></pre>
<p>In this case, the quantity of the table was changed to 30. 
How do I get the data written back to the file like it was originally?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are writing the <code>str()</code> output of the whole list instead of re-formatting the lines back to the original format.</p>
<p>Rejoin the lines with commas, adding a newline after every line:</p>
<pre><code>with open('Stockinventory.txt', 'w') as f:
    for row in items:
        f.write(', '.join(row) + '\n')
</code></pre>
<p>If you are not too fussed about the spaces after the comma, you could also use the <a href="http://docs.python.org/3/library/csv.html" rel="nofollow"><code>csv</code> module</a> to write the list in one go:</p>
<pre><code>import csv

with open('Stockinventory.txt', 'w', newline='') as f:
    csv.writer(f).writerows(items)
</code></pre>
<p>I'd certainly use the <code>csv</code> module to <em>read</em> your file:</p>
<pre><code>import csv

with open('Stockinventory.txt', 'r', newline='') as f:
    items = list(csv.reader(f, skipinitialspace=True))
</code></pre>
<p>That reads the whole file into a list of lists in one go.</p>
<p>You read the file twice; there is no need really, not when you already have all lines in a list:</p>
<pre><code>for row in enumerate(items):
    if row[1] == itemname:
        print("SIN: %s" % row[0])
        print("Itemname: %s" % row[1])
        print("Retail price: %s" % row[2])
        print("Costprice: %s" % row[3])
        print("Quantity Available: %s" % row[4])
        choice = input("Would you like to update quantity? y/n")
        if choice == 'y':
            newquantity = input("Enter new quantity: ")
            row[4] = newquantity
            print(', '.join(row))
            writetrue = '1'
        else:
            startup()
</code></pre>
<p>Here we alter <code>row</code> directly; writing out <code>items</code> to a <code>csv</code> file again will include the changed quantity.</p>
</div>
<div class="post-text" itemprop="text">
<p>Opening the same file more than once isn't needed in this case. You could just do it all in one go. If you don't want any standard library imports, and if readability counts for you then you could refactor it a bit:</p>
<pre><code>itemname = raw_input("Enter item name\n&gt;&gt;&gt;")

with open("Stockinventory.txt", "r+") as file:
    # Search for item (per line)
    while True:
        position = file.tell()
        thisline = file.readline()
        if itemname in thisline:
            break

    # Print result
    for tag, val in zip(["SIN", "Itemname",
                         "RetailPrice", "Costprice",
                         "Quantity Available"],
                         thisline.split(", ")):
        print tag, ":", val

    # Query update
    choice = raw_input("Would you like to update "
                       "quantity?\n&gt;&gt;&gt;")
    if choice in ("y", "Y"):
        newquan = raw_input("Enter new quantity\n&gt;&gt;&gt;")
        newline = "".join([thisline.rsplit(",",1)[0],
                           ", ", newquan, "\n"])
        remline = file.read()
        file.seek(position)
        file.write(newline + remline)
</code></pre>
</div>
<span class="comment-copy">how about <code>f.write( '\n'.join( ', '.join( row ) for row in items ) )</code></span>
<span class="comment-copy">@lejlot: Sure, that'll work too, but a loop is perhaps a little more readable. Note that your version does not write a newline after the last line, which is usually needed when writing a text file.</span>
<span class="comment-copy">last newline is just about <code>f.write( '\n'.join( ', '.join( row ) for row in items ) + '\n' )</code> , I think that theonly issue of such an approach is actually construction of a (possibly) huge string</span>
