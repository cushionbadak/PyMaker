<div class="post-text" itemprop="text">
<p>I have a list which contains and a single and multi-word token. </p>
<pre><code>brand_list = ['ibm','microsoft','abby softwate', 'tata computer services']
</code></pre>
<p>I need to search any of these words present in a title string. I am able to find a single word. But for a multi-word token, my code fails. 
Here is my code. Please help me out. Here is my solution.</p>
<pre><code>import string
def check_firm(test_title):
    translator = str.maketrans('', '', string.punctuation)
    title = test_title.translate(translator)
    if any(one_word.lower() in title.lower().split(' ') for one_word in brand_list):

        status_code_value = 0
        print("OEM word found")
    else:
        status_code_value = 1
        print("OEM word not found")

    print("current value of status code ------------&gt;", status_code_value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Change this</strong>:</p>
<pre><code>if any(one_word.lower() in title.lower().split(' ') for one_word in brand_list):
</code></pre>
<p><strong>to this</strong>:</p>
<pre><code>if title.lower() in brand_list:
</code></pre>
<p><strong>Hence</strong>:</p>
<pre><code>import string
brand_list = ['ibm','Microsoft','abby softwate', 'TATA computer services']
brand_list = [x.lower() for x in brand_list] # ['ibm', 'microsoft', 'abby softwate', 
                                             #  'tata computer services']

def check_firm(test_title):
    translator = str.maketrans('', '', string.punctuation)
    title = test_title.translate(translator)

    if title.lower() in brand_list:
        status_code_value = 0
        print("OEM word found")
    else:
        status_code_value = 1
        print("OEM word not found")

    print("current value of status code ------------&gt;", status_code_value)

check_firm('iBM')
check_firm('Tata Computer SERVICES')
check_firm('Khan trading Co.')
</code></pre>
<p><strong>OUTPUT</strong>:</p>
<pre><code>OEM word found
current value of status code ------------&gt; 0
OEM word found
current value of status code ------------&gt; 0
OEM word not found
current value of status code ------------&gt; 1
</code></pre>
<blockquote>
<p>Note: I converted all the elements in the list to <code>lower()</code> using:</p>
</blockquote>
<pre><code> brand_list = [x.lower() for x in brand_list]
</code></pre>
<p>This will ensure the comparison is made correctly.</p>
<p><strong>EDIT</strong>: </p>
<p><strong>OP</strong>: <em>but my input tile is title string. for example "Tata Computer SERVICES made a profit of x dollars". In that case, how can we find the string?</em> </p>
<p>In such case, I would opt for splitting the string before passing to the function:</p>
<pre><code>inp_st1 = 'iBM'
inp_st2 = 'Tata Computer SERVICES made a profit of x dollars'
inp_st3 = 'Khan trading Co.'

check_firm(inp_st1)
check_firm(" ".join(inp_st2.split()[:3])) # Tata Computer SERVICES
check_firm(inp_st3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You will never be able to find two words because of this code:</p>
<pre><code>title.lower().split(' ')
</code></pre>
<p>Say your title is <strong>tata computer services</strong>, when you carry out that code you'll en dup with:</p>
<pre><code>["tata", "computer", "services"]
</code></pre>
<p>Then in your <strong>for loop</strong> you will only search for each singular word, essentially you've broken the title into something you can't match. </p>
<p>Writing the <strong>for loop</strong> in human words:</p>
<pre><code>any(one_word.lower() in title.lower().split(' ') for one_word in brand_list)
</code></pre>
<p><em>If any of the words in brand_list can be found in the array ["tata", "computer", "services"], then that's true.</em> </p>
<p>As you can see, no words from <strong>brand_list</strong> can match, since the word is actually composed of three words and spaces "tata computer services". </p>
<p><strong>To carry out what you are looking for:</strong></p>
<p>Change this:</p>
<pre><code>if any(one_word.lower() in title.lower().split(' ') for one_word in brand_list):
</code></pre>
<p>to:</p>
<pre><code>if any(one_word.lower() in title.lower() for one_word in brand_list):
</code></pre>
<p>That way you are looking for each word from <strong>brand_list</strong> inside the title. Your code would look like this:</p>
<pre><code>brand_list = ['ibm','microsoft','abby softwate', 'tata computer services']

 import string
def check_firm(test_title):
    translator = str.maketrans('', '', string.punctuation)
    title = test_title.translate(translator)
    if any(one_word.lower() in title.lower() for one_word in brand_list):
        status_code_value = 0
        print("OEM word found")
    else:
        status_code_value = 1
        print("OEM word not found")

    print("current value of status code ------------&gt;", status_code_value)

check_firm("ibm")
check_firm("abby software")
check_firm("abby softwate apple")  
</code></pre>
<p>With the following output:</p>
<pre><code>OEM word found
current value of status code ------------&gt; 0
OEM word not found
current value of status code ------------&gt; 1
OEM word found
current value of status code ------------&gt; 0
</code></pre>
<p><strong>EDIT</strong></p>
<p><strong>OP</strong>: <em>I tried your solution. The issue is it will also hold true for input like "tata computer servicessssssssss". Any idea to overcome this issue. Thanks</em></p>
<p>In the comments it was highlighted that this code would let pass a title like <strong>tat computer servicesss</strong>. To avoid this then I suggest regex expressions, such that:</p>
<pre><code>brand_list = ['ibm','microsoft','abby softwate', 'tata computer services']

import string
import re
def check_firm(test_title):
    translator = str.maketrans('', '', string.punctuation)
    title = test_title.translate(translator)
    if any(re.search(r'\b' + one_word.lower() + r'\b', title) for one_word in brand_list):
        status_code_value = 0
        print("OEM word found")
    else:
        status_code_value = 1
        print("OEM word not found")

    print("current value of status code ------------&gt;", status_code_value)

check_firm("tata computer services")  
check_firm("tata computer servicessssss")  
check_firm("tata computer services something else") 
</code></pre>
<p><strong>Output</strong></p>
<pre><code>OEM word found
current value of status code ------------&gt; 0
OEM word not found
current value of status code ------------&gt; 1
OEM word found
current value of status code ------------&gt; 0
</code></pre>
<p>The part that is of interest is:</p>
<pre><code>any(re.search(r'\b' + one_word.lower() + r'\b', title) for one_word in brand_list):
</code></pre>
</div>
<span class="comment-copy"><code>title.lower().split(' ')</code> looks fishyy</span>
<span class="comment-copy">It is. It tokenizes the string base on space. When I search for multi-letter word, it fails. Here is the test string - " tata computer services , not much of success"</span>
<span class="comment-copy">See if the answer posted below helps?</span>
<span class="comment-copy">Thanks for the reply but my input tile is title string. for example "Tata Computer SERVICES made a profit of x dollars". In that case, how can we find the string?</span>
<span class="comment-copy">@RohitHaritash you should split the input string before passing to the funciton. and pass only the desired string.</span>
<span class="comment-copy">I was about to comment on that, seems that should be stated in the answer so as not to confuse.</span>
<span class="comment-copy">@RohitHaritash Check the edit?</span>
<span class="comment-copy">I tried your solution. The issue is it will also hold true for input like "tata computer servicessssssssss". Any idea to overcome this issue. Thanks</span>
