<div class="post-text" itemprop="text">
<p>I wanted to implement settings as explained by "Two Scoops of Django". I referred their book and also their <a href="https://github.com/twoscoops/django-twoscoops-project/tree/develop/project_name" rel="nofollow">github sample code</a>.</p>
<p>I am getting the following error:</p>
<pre><code>django.core.exceptions.ImproperlyConfigured: The SECRET_KEY setting must not be empty.
</code></pre>
<p>The problem is solved when I add the following code to <code>__init__.py</code> in settings folder:</p>
<pre><code>from .local import *
</code></pre>
<p>Kindly explain what is happening as there is no code in <code>__init__.py</code> in all the examples on internet.</p>
<p><strong>I am using</strong> Django 1.8.2 on Python 3.4</p>
</div>
<div class="post-text" itemprop="text">
<p>When you include <code>__init__.py</code> in the folder, that folder is marked as a package called <code>settings</code>, from which you can import modules like your <code>local</code> module</p>
<p>This is a fairly standard thing in Python, even if not every Django programmer uses <code>settings</code> as a package</p>
<p>From Python docs:</p>
<blockquote>
<p>The <code>__init__.py</code> files are required to make Python treat the
  directories as containing packages; this is done to prevent
  directories with a common name, such as string, from unintentionally
  hiding valid modules that occur later on the module search path. In
  the simplest case, <code>__init__.py</code> can just be an empty file, but it can
  also execute initialization code for the package or set the <code>__all__</code>
  variable, described later.</p>
</blockquote>
<p>Source: <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow">https://docs.python.org/3/tutorial/modules.html#packages</a></p>
<blockquote>
<p>my question is do I need to write from .local import * in <strong>init</strong>.py
  for the package to work?</p>
</blockquote>
<p>Check your <code>manage.py</code> file it should load the <code>settings.local</code>, e.g.</p>
<pre><code>#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "{{ project_name }}.settings.local")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)
</code></pre>
<p>Also check the actual value of <code>SECRET_KEY</code> in the local module see if it is empty or not (if e.g. you use some variable interpolation)</p>
</div>
<span class="comment-copy">I understand the use of <code>__init__.py</code> but my question is do I need to write <code>from .local import *</code> in <code>__init__.py</code> for the package to work?</span>
<span class="comment-copy">No you're not require to have code in <code>__init__</code>, maybe you are loading the wrong module from <code>manage.py</code>? You should load your <code>settings.local</code> module in there, also check <code>SECRET_KEY</code> is in there and if you use variable interpolation make sure it works and returns a non empty string</span>
<span class="comment-copy">I have the <code>SECRET_KEY</code> set in <code>base.py</code>. I am importing it to <code>local.py</code> using <code>from my_project.settings.base import *</code>. I hope this is fine.</span>
<span class="comment-copy">Try read the value of settings.local.SECRET_KEY? is it empty?</span>
<span class="comment-copy">No it's not empty. I can read the KEY from console.</span>
