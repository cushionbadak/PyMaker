<div class="post-text" itemprop="text">
<p>I have a line of code in my script that has both these operators chained together. From the documentation reference <strong>BOOLEAN AND</strong> has a lower precedence than <strong>COMPARISON GREATER THAN</strong>. I am getting unexpected results here in this code:</p>
<pre><code>&gt;&gt;&gt; def test(msg, value):
...     print(msg)
...     return value

&gt;&gt;&gt; test("First", 10) and test("Second", 15) &gt; test("Third", 5)
First
Second
Third
True
</code></pre>
<p>I was expecting Second or Third test to happen before the fist one, since <code>&gt;</code> operator has a higher precedence. What am I doing wrong here?</p>
<p><a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="noreferrer">https://docs.python.org/3/reference/expressions.html#operator-precedence</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Because you are looking at the wrong thing. <code>call</code> (or function call) takes higher precendence over both <code>and</code> as well as <code>&gt;</code> (greater than) . So first function calls occur from left to right.</p>
<p>Python will get the results for all function calls before either comparison happens. The only thing that takes precendence over here would be short circuiting , so if <code>test("First",10)</code> returned False, it would short circuit and return False.</p>
<p>The comparisons and <code>and</code> still occur in the same precendence , that is first the result of <code>test("Second", 15)</code> is compared against <code>test("Third", 5)</code> (please note only the return values (the function call already occured before)) . Then the result of <code>test("Second", 15) &gt; test("Third", 5)</code> is used in the <code>and</code> operation.</p>
<p>From the documentation on <a href="https://docs.python.org/2/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">operator precedence</a> -</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/ne01T.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>One way to see what's happening is to look at exactly how Python is interpreting this result:</p>
<pre><code>&gt;&gt;&gt; x = lambda: test("First", 10) and test("Second", 15) &gt; test("Third", 5)
&gt;&gt;&gt; dis.dis(x)
  1           0 LOAD_GLOBAL              0 (test)
              3 LOAD_CONST               1 ('First')
              6 LOAD_CONST               2 (10)
              9 CALL_FUNCTION            2
             12 JUMP_IF_FALSE_OR_POP    42
             15 LOAD_GLOBAL              0 (test)
             18 LOAD_CONST               3 ('Second')
             21 LOAD_CONST               4 (15)
             24 CALL_FUNCTION            2
             27 LOAD_GLOBAL              0 (test)
             30 LOAD_CONST               5 ('Third')
             33 LOAD_CONST               6 (5)
             36 CALL_FUNCTION            2
             39 COMPARE_OP               4 (&gt;)
        &gt;&gt;   42 RETURN_VALUE        
</code></pre>
<p>If you do the same for <code>10 and 15 &gt; 5</code>, you get:</p>
<pre><code>&gt;&gt;&gt; x = lambda: 10 and 15 &gt; 5
&gt;&gt;&gt; dis.dis(x)
  1           0 LOAD_CONST               1 (10)
              3 JUMP_IF_FALSE_OR_POP    15
              6 LOAD_CONST               2 (15)
              9 LOAD_CONST               3 (5)
             12 COMPARE_OP               4 (&gt;)
        &gt;&gt;   15 RETURN_VALUE        
</code></pre>
</div>
<span class="comment-copy">The boolean interpretation of your first value, <code>10</code>, is also True. Therefore, <code>10 and 15 &gt; 5 == 10 and (15 &gt; 5) == 10 and True == True</code></span>
<span class="comment-copy">But why did the interpreter get 10 before it did 15 or 5? Shouldn't the comparison happen before boolean checks?</span>
<span class="comment-copy"><code>test("First", 10) and test("Second", 15) &gt; test("Third", 5)</code> is equivalent to <code>test("First", 10) and (test("Second", 15) &gt; test("Third", 5))</code> Also Python evaluates <code>and</code> <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">lazily</a></span>
<span class="comment-copy">Well the precedence is definitely correct. <code>0 and 0 &gt; -1</code> is different from <code>(0 and 0) &gt; -1</code>. My guess is that while the values returned are evaluated in the correct order, the functions are not called in that order for some reason. What's interesting is that replacing 10,15,5 with 0,0,-1 only prints <code>First</code>. Maybe it's a compiler optimization - since in your case, as @Alik pointed out, both orders result in the same value.</span>
<span class="comment-copy">That makes perfect sense. Thank you. So if I replace function calls with just numbers, I will get a different result, right?</span>
<span class="comment-copy">For numbers there is nothing to evaluate, so I am not sure what you mean by that?</span>
<span class="comment-copy">Python will get the results for all function calls before either comparison happens or <code>and</code> happens. The only thing that takes precendence over here would be short circuiting</span>
