<div class="post-text" itemprop="text">
<p>I am reading about booleans in my book, and it says:</p>
<p>x and y------------If x is false, return x. Otherwise, return y.</p>
<p>x or y--------------If x is true, return x. Otherwise, return y.</p>
<p>This doesn't make sense to me from the everyday usage of "or" and "and"
To me, it would make sense if it said:</p>
<p>x and y------------If x is false, do nothing. If y is false, do nothing. If x and y are true, return x and y</p>
<p>x or y--------------If x is true, return x. If x is false, check y. If y is false, do nothing. If y is true, return y</p>
<p>Do I just need to blindly accept the actual definitions, or can I understand them because they actually make sense.</p>
</div>
<div class="post-text" itemprop="text">
<p>The behavior may seem strange, but consider the following hypothetical examples. Starting with something obvious, </p>
<pre><code>&gt;&gt;&gt; True and False
False
&gt;&gt;&gt; False and True
False
</code></pre>
<p>this is really easy to understand since we're dealing with boolean values. Remember this example, because every other example can be thought of this way.</p>
<p>Now consider if the <code>and</code> and <code>or</code> operators were to convert every object to a boolean before comparing. For example, an empty string or empty list would be <code>False</code>, and non-empty ones would be <code>True</code>. It would look like this (<strong>obviously this is not what it ACTUALLY looks like</strong>)</p>
<pre><code>&gt;&gt;&gt; "vanilla" and ""
False
&gt;&gt;&gt; "" and "vanilla"
False
</code></pre>
<p>This makes perfect sense. After all <code>bool("vanilla") and bool("")</code> would be the same as <code>True and False</code> which we already know is <code>False</code></p>
<p>Instead of actually converting them to <code>True</code> or <code>False</code>, though, it can do the comparison <a href="https://docs.python.org/3/library/stdtypes.html#truth" rel="nofollow">without ever converting them</a>. As a result, you don't really need it to return <code>True</code> or <code>False</code>. It can just return the actual object it tested. </p>
<pre><code>&gt;&gt;&gt; "vanilla" and ""
""
&gt;&gt;&gt; "" and "vanilla"
""
</code></pre>
<p>For truth testing purposes, returning <code>""</code> is the same as returning <code>False</code>, so there's no need to convert it to a boolean. That's why it always returns an object whose truth value is the same as the result of the operator.  </p>
</div>
<div class="post-text" itemprop="text">
<p>"Do nothing" isn't an option. The mathematical expression <code>x or y</code> <em>must</em> have a value (which is true if either <code>x</code>, <code>y</code>, or both is true). And <code>x and y</code> must have a value (which is true if and only if <code>x</code> and <code>y</code> are both true).</p>
<p>The way your book defines them is mathematically correct, but confusing (until you get into things like short-circuit evaluation).</p>
</div>
<div class="post-text" itemprop="text">
<p>Unlike some other languages, you can use <a href="https://docs.python.org/2/library/stdtypes.html#truth-value-testing" rel="nofollow"><em>any</em> object</a> as operands of boolean operations. All your books says is that you can use boolean operators as a quick "filter" of values.</p>
<p>For instance, say you want to choose a non-empty list between two lists. The following is a valid (and more Pythonic) way to do it:</p>
<pre><code>&gt;&gt;&gt; [] or ['something', 'here']
['something', 'here']
</code></pre>
<p>Contrast to (not making use of Python idioms in Python):</p>
<pre><code>if len(l1) != 0:
  return l1
else:
  return l2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your book is right - see the <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow">documentation</a>.  It might be unintuitive at first, but this behavior (called <strong>short-circuiting</strong>) is extremely useful.  In a simple case, it allows you to save a lot of time when checking certain conditions.  In this example, where function <code>f</code> takes 10 seconds to evaluate, you can definitely see one use:</p>
<pre><code>if f(foo) or f(bar) or f(baz):
</code></pre>
<p>If <code>f(foo)</code> is <code>True</code>, then there is no need to evaluate <code>f(bar)</code> or <code>f(baz)</code>, as the whole if statement will be <code>True</code>.  Those values are unnecessary and you'll just be wasting your time computing them.  </p>
<p>Another extremely common use of this behavior is in null (or for python <code>None</code>) checking.  It allows safe usage of functions all within one line:</p>
<pre><code>if obj != None and obj.foo():
</code></pre>
<p>If <code>obj</code> is <code>None</code>, the if statement is guaranteed to be <code>False</code>, and so there is no need to check (or even evaluate) <code>obj.foo()</code>, which is good, since that would cause an exception.  </p>
<p>Short-circuiting is very common in many programming languages, and is very useful once you fully understand how to use it.</p>
</div>
<div class="post-text" itemprop="text">
<p>While the book presents it in a slightly confusing way, it is correct. Boolean logic must evaluate to either true or false. </p>
<p>For X and Y in order to return true they both must be true, if X is false then it returns false. If X is true then it returns Y which is either true or false and also the correct answer.</p>
<p>For X or Y to return false they both must be false. If X is true then it can return true (X). If X is false then it returns whatever the value of Y is.</p>
</div>
<div class="post-text" itemprop="text">
<p>Many (most?) programming languages, including Python, implement <a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation" rel="nofollow">short-circuiting</a> in their boolean operators <code>and</code> and <code>or</code>. So they evaluate their operands from left to right, and stop as soon as the final result can be determined. </p>
<p>Since <code>x and y and z and ...</code> is guaranteed be false if any operand is false, it stops evaluating the operands as soon as it encounters a false one. And <code>x or y or z or ...</code> is guaranteed to be true if any operand is true, so it stops as soon as it reaches a true operand. In either case, if they make it all the way to the last operand, they return its value.</p>
<p>In some languages, the boolean operators just return a strict boolean result, either <code>true</code> or <code>false</code> (in some languages these are represented as <code>1</code> and <code>0</code>). But in Python (and some others, such as Javascript and Common Lisp), they return the value of the last operand that was evaluated, which determined the final result. This is often more useful than just the truth value of the expression.</p>
<p>When you put these features together, it allows some succinct idioms, e.g.</p>
<pre><code>quotient = b != 0 &amp;&amp; a/b
</code></pre>
<p>instead of</p>
<pre><code>if b != 0:
    quotient = false
else:
    quotient = a/b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first set of descriptions are shortcuts: following these will give you exactly the same results as the "usual definitions" of true and false.</p>
<p>But your own descriptions don't make much sense. You can't "do nothing"; you have to return some value from a comparison, either true or false. And you can't return both a and b, either: again, the result of a boolean comparison must be a boolean, not a pair of booleans.</p>
</div>
<div class="post-text" itemprop="text">
<p>Its probably easier if you think about it in each literal case</p>
<blockquote>
<p>x and y------------If x is false, return x. Otherwise, return y.</p>
<p>x or y--------------If x is true, return x. Otherwise, return y.</p>
</blockquote>
<hr/>
<p><strong>CASE 1: x = true, y = true</strong></p>
<blockquote>
<p>"if x is false, return x. Otherwise, return y." </p>
</blockquote>
<p>Then this will return y which is true. This makes sense because x and y are both true. </p>
<p>(true and true == true)</p>
<blockquote>
<p>"If x is true, return x. Otherwise, return y." </p>
</blockquote>
<p>The this will return x which is true. This makes sense because one of x or y is true. </p>
<p>(true or true == true)</p>
<hr/>
<p><strong>CASE 2: x = false, y = true</strong></p>
<blockquote>
<p>"if x is false, return x. Otherwise, return y." </p>
</blockquote>
<p>Then this will return x which is false. This makes sense because x and y are not both true. </p>
<p>(false and true == false)</p>
<blockquote>
<p>"If x is true, return x. Otherwise, return y." 
  The this will return y. This makes sense because one of x or y is true. </p>
</blockquote>
<p>(false or true == true)</p>
<hr/>
<p><strong>CASE 3: x = true, y = false</strong></p>
<blockquote>
<p>"if x is false, return x. Otherwise, return y." </p>
</blockquote>
<p>Then this will return y which is false. This makes sense because x and y are not both true. </p>
<p>(true and false == false)</p>
<blockquote>
<p>"If x is true, return x. Otherwise, return y." </p>
</blockquote>
<p>Then this will return x which is true. This makes sense because x or y is true </p>
<p>(true or false == true)</p>
<hr/>
<p><strong>CASE 4: x = false, y = false</strong></p>
<blockquote>
<p>"if x is false, return x. Otherwise, return y." </p>
</blockquote>
<p>Then this will return x which is false. This makes sense because x and y are not both true. </p>
<p>(false and false == false)</p>
<blockquote>
<p>"If x is true, return x. Otherwise, return y."</p>
</blockquote>
<p>The this will return y which is false. This makes sense because neither x nor y is true. </p>
<p>(false or false == false)</p>
</div>
<span class="comment-copy">@ben_frankly The title is "Python Programming: An Introduction to Computer Science" 2nd edition by John Zelle. The chart I am talking about is on page 257</span>
<span class="comment-copy">How can you implement or define <code>and</code> using <code>and</code>?</span>
<span class="comment-copy">The book is entirely correct. Look at how <code>x and y</code> uses the falsey value of the thing that failed, rather than <code>None</code> or <code>False</code> hardcoded. For instance, <code>False and 13</code> will evaluate to <code>False</code>, whereas <code>None and 13</code> will evaluate to <code>None</code>.</span>
<span class="comment-copy">This makes sense until the book starts using actual strings. There is a code  flavor = input("What flavor do you want [vanilla]: ") or "vanilla" . When you input an empty string, why does it return the string "vanilla" instead of the word "True" since "vanilla" is a nonempty string which evaluates to true?</span>
<span class="comment-copy">Yeah, Python tries to be a bit fancier than simple booleans. If you entered something, that string would be true, and Python could return that as the result of the expression. But an empty string is false, so it evaluates the second argument ("vanilla") which is true, and returns that. This is a Python weirdness--don't expect learning this to have any value whatsoever in programming in general or in real life.</span>
<span class="comment-copy">"either true or false" -- there's no guarantee that the value from these operations will be either True or False; it might be better to word this differently.</span>
