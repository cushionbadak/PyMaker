<div class="post-text" itemprop="text">
<p>Im having an issue with a pretty simple piece of code. i have a file of 6551 lines(ASCII), and all i've managed to do so far is to read the file and print it.</p>
<pre><code>a_file = open(myfile_path).readlines()
print a_file
</code></pre>
<p>upon trying to print, the interpreter gets completely stuck for a few minutes.
i've tried this both in idle and in jetbrains pycharm. im runnning windows server 2012 as my work work station and windows 7 at home - funny thing is that this worked perfectly on the weaker windows 7 machine back home(q9550 and 8gb ram) - but i cant(and neither the it guy) find a solution for this on my work station(i7 on x99, 64gb ram, gtx980).</p>
<p>would appreciate all and any assistance.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not a good idea to read a file to memory (that's what you do) exactly because you can face problems you encountered with.</p>
<p>If you want to print every line of the file, you can use the following construction:</p>
<pre><code>with open(myfile_path) as input_file:
    for line in input_file:
        print line
</code></pre>
<p>for more complicated actions you (or the IT-guy) should better address to <a href="https://docs.python.org/3/library/functions.html?highlight=open#open" rel="nofollow">the documentation for open() method</a> and file operations.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, try this:</p>
<pre><code>import sys

with open(myfile_path) as f:
    for line in f:
        print f
        sys.stdout.flush()
</code></pre>
<p>It could be a number of things causing the script to hang such as the file being open or locked or the output blocking.  This will cause everything that can print to print.</p>
<p>Additionally, generally doing things a line at a time is beneficial unless you actually need all of the lines at the same time in a list  This shouldn't be the root cause here unless the line lengths are truly enormous but it's good style to not allocate giant data structures.</p>
<p>Additionally, setting non-blocking mode on the file will resolve issues such as the file being written to and locked (though this <em>won't</em> give you a solution that is stable but it will stop blocking on read instead).  This is OS dependent and probably won't help you more than it will hurt.</p>
<p>If the issue is that the file is being written to (I've come across this a lot in Windows), another option is to copy the file being written to into a temp file and handing that copy to the script.</p>
<p>What you choose to do will depend greatly on whether you want to ensure you have all the data possible or whether you want to ensure the script runs immediately.</p>
</div>
<span class="comment-copy">Why do you need to print the file?  Printing that many lines is always going to be inefficient.</span>
<span class="comment-copy">at this time in the code, i just wanted to see that it loaded, thats when i came across this strange problem. i've printed larger files before as a debug print, of course i dont intend to use it in the final result</span>
<span class="comment-copy">It doesn't matter if you've printed bigger files. Perhaps you were running more/less/different progs at that time vs. now? Perhaps things were just slightly different. In any case the way your going about opening/reading the file inefficiently for the very reasons you describe. You can easily be done better using the method below.</span>
<span class="comment-copy">Ah, you beat me to the punch. Couldn't have said/written it better my self.</span>
