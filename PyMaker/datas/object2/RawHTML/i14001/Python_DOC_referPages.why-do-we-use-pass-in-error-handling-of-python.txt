<div class="post-text" itemprop="text">
<p>It is conventional to use <code>pass</code> statement in python like the following piece of code.</p>
<pre><code>try:
  os.makedirs(dir)
except OSError:
  pass
</code></pre>
<p>So, 'pass' bascially does not do anything here. In this case, why would we still put a few codes like this in the program? I am confused. Many thanks for your time and attention.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's for the parser. If you wrote this:</p>
<pre><code>try:
  # Code
except Error:
</code></pre>
<p>And then put nothing in the except spot, the parser would signal an error because it would incorrectly identify the next indentation level. Imagine this code:</p>
<pre><code>def f(x):
 try:
  # Something
 except Error:
def g(x):
 # More code
</code></pre>
<p>The parser was expecting a statement with a greater indentation than the except statement but got a new top-level definition. <code>pass</code> is simply filler to satisfy the parser.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is in case you want the code to continue right after the lines in the <code>try</code> block. If you won't catch it - it either skips execution until it is caught elsewhere - or fails the program altogether.</p>
<p>Suppose you're creating a program that attempts to print to a printer, but also prints to the standard output - you may not want it to file if the printer is not available:</p>
<pre><code>try:
    print_to_printer('hello world')
except NoPrinterError:
    pass # no printer - that's fine

print("hello world")
</code></pre>
<p>If you would not use a try-catch an error would stop execution until the exception is caught (or would fail the program) and nothing would be printed to standard output.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>pass</code> is used to tell the program what to do when it catches an error. In this particular case you're pretty much ignoring it. So you're running your script and if you experience an error keep going without worrying as to why and how.</p>
<p>That particular case is when you are definite on what is expected. There are other cases where you can <code>break</code> and end the program, or even assign the error to a variable so you can debug your program by using <code>except Error as e</code>.</p>
<pre><code>try:
  os.makedirs(dir)
except OSError:
  break
</code></pre>
<p>or:</p>
<pre><code>try:
  os.makedirs(dir)
except OSError as e:
  print(str(e))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>try:
    # Do something
except:


# again some code
# few more code
</code></pre>
<p>There are two uses of <code>pass</code>. First, and most important use :- if exception arises for the code under <code>try</code>, the execution will jump to <code>except</code> block. And if you have nothing inside the <code>except</code> block, it will throw <code>IndentationError</code> at the first place. So, to avoid this error, even if you have nothing to do when exception arises, you need to put <code>pass</code> inside <code>except</code> block.</p>
<p>The second use, if you have some more code pieces after the try-except block (e.g. <code>again some code</code> and <code>few more code</code>), and you don't put pass inside except, then that code piece will not be executed (actually the whole code will not be executed since compiler will throw <code>IndentationError</code>). So, in order to gracefully handle the scenario and tell the interpreter to execute the lines after <code>except</code> block, we need to put pass inside the except block, even though we don't want to do anything in case of exception. </p>
<p>So, here <code>pass</code> as indicated from name, handles the <code>except</code> block and then transfers the execution to the next lines below the <code>except</code> block.</p>
</div>
<span class="comment-copy">see also <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress" rel="nofollow noreferrer"><code>contextlib.suppress</code></a> new in Python3.4</span>
<span class="comment-copy">simple answer - it helps readability and also can block less specific error handlers lower down your chain.</span>
