<div class="post-text" itemprop="text">
<p>Doing some computation that results in strings that contain byte data (the strings serve as byte arrays). Now this data needs to be sent to another program that expects all this data to be concatenated. From what you can read here, the best way to concatenate appears to be dumping the data into a list and then doing <code>''.join(lst)</code> but it appears to me that creating might incur a memory overhead .</p>
<p>Is there any way to enjoy the benefits of <code>''.join(lst)</code> without creating a long list?</p>
<p>It is not hard to approximate how big the complete string is going to be. Is there a way to allocate that space and just pour the data inside? For instance with something like numpy? Then convert it into a huge string?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3.4/library/stdtypes.html#str.join" rel="nofollow"><code>str.join()</code></a> actually does not need a <em>list</em> to join, but any kind of <em>iterable</em>. Therefore you could work with <a href="https://docs.python.org/3.4/reference/expressions.html#yield-expressions" rel="nofollow">generators</a>, serving string after string:</p>
<pre><code>def calculate_something():
    # do something
    data = b"Foobar"
    yield from data
    # do something else
    yield from other_function_returning_string_data()

final_results = ''.join(calculate_something())
</code></pre>
<p>The <code>yield from</code> syntax is <a href="http://www.python.org/dev/peps/pep-0380" rel="nofollow">new since Python 3.3</a>, if you are using something below 3.3 <code>for c in data: yield c</code> should work as well.</p>
</div>
<span class="comment-copy"><code>lst</code> can be a generator expression rather than an actual list.</span>
<span class="comment-copy">@martineau, but python will construct a list anyway. If you pass a generator python will first construct a list as it has to do two passes over the data</span>
<span class="comment-copy">How is the data being sent to another program? Via a socket? If so, perhaps you could send the total size and then the pieces through the socket as they are generated.</span>
<span class="comment-copy">What about using <code>io.StringIO</code>, "an in-memory stream for text I/O"? Use <code>write()</code> to append each string, then <code>getvalue()</code> to get the finished product. Disclaimer: I don't actually have  a clue whether this is a good idea. <a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="nofollow noreferrer">docs.python.org/3/library/io.html#io.StringIO</a></span>
<span class="comment-copy">@zehelvion: If the big string is going to be written to a file, couldn't you then just write the smaller strings to the file sequentially without joining them first?</span>
<span class="comment-copy">Doing it like this (<code>yield from</code>) is effectively breaking each of the strings up into individual characters and then yielding each character of each one separately.</span>
