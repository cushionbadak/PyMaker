<div class="post-text" itemprop="text">
<p>The question asks me to return a string in lowercase with the most frequently occurring letter(s) in s in alphabetical order. So far I have:</p>
<pre><code>def mostFrequentLetter(s):
    allchar = ''.join(sorted(s))
    temp = s.replace(" ","")
    max = None
    maxchar = None
    for alph in allchar.lower():
        charcount = temp.count(alph)
        if alph not in string.ascii_letters: continue
        elif charcount &gt; max:
            max = charcount
            max = alph
        elif charcount == max:
            max2 = charcount            
            max2 = alph
            max.append(max2)
    return max
</code></pre>
<p>If I put in <code>'aaaabbbb'</code> it should give me <code>'ab'</code> but it only gives me <code>'a'</code>. How do I fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the builtin <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow">collections.Counter</a>:</p>
<pre><code>from collections import Counter

def most_frequent_letter(s):
    counter = Counter(s)
    letter, max_count = next(counter.most_common())
    letters = sorted(letter
                     for letter, count in counter.most_common()
                     if count == max_count)
    return ''.join(letters)
</code></pre>
<p>If you can't use <code>Counter</code> for some reason, you could use a <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow">default dictionary</a>:</p>
<pre><code>from collections import defaultdict

def most_frequent_letter(s):
    counter = defaultdict(int)
    for char in s:
        counter[char] += 1
    max_count = max(counter.values())
    letters = sorted(letter
                     for letter, count in counter.items()
                     if count == max_count)
    return ''.join(letters)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I recommend using the <a href="https://docs.python.org/3/library/functions.html#func-set" rel="nofollow"><code>set()</code></a> function so that you're not checking repeated characters multiple times.</p>
<pre><code>def mostFrequentLetter(s):
    return ''.join(sorted(sorted((c for c in set(s) if c in string.ascii_letters), key=s.count, reverse=True)[:2]))
</code></pre>
<p>This first turns the string into a <code>set</code>, eliminating duplicates. It then sorts that <code>set</code> according to how often each element appears in the original string, in reverse (descending) order. Finally, it joins the sorted elements into a single string and returns it.</p>
<pre><code>&gt;&gt;&gt; s = 'abbbbbbbbccddddddddddddddddd'
&gt;&gt;&gt; mostFrequentLetter(s)
'bd'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The other answers are more pythonic. For your code though there are a few mistakes you made. See them in the comments of the following code</p>
<pre><code>def mostFrequentLetter(s):
    allchar = ''.join(sorted(s))
    temp = s.replace(" ","")
    max = None
    maxchar = ""
    for alph in set(allchar.lower()):
        charcount = temp.count(alph)
        if alph not in string.ascii_letters: continue
        elif charcount &gt; max:
            max = charcount
            maxchar+=alph #max = alph sets max as alph. You need to
                          #append the maximum occuring character, not set it as max
        elif charcount == max:
            maxchar+=alph  # max2 is not really needed. Its not being used anywhere else.
                           # In fact this whole clause can be refactored by setting charcount &gt;= max above.
                           # I am still leaving it to be in line with what you wrote
    return maxchar

print mostFrequentLetter("aaaabbbb")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here, the solution which is adapted to the code you offered and without using a Set :)</p>
<pre><code>def mostFrequentLetter(s):
    allchar = ''.join(sorted(s))
    temp = s.replace(" ","")
    max = None
    maxchar = None
    for alph in allchar.lower():
        charcount = temp.count(alph)
        if alph not in string.ascii_letters: continue
        elif charcount &gt; maxchar:
            maxchar= charcount
            max= alph
        elif charcount == maxchar and alph not in max:          
            max+=alph
    return max
</code></pre>
</div>
<span class="comment-copy">formatyourcodeformatyourcodeformatyourcode</span>
<span class="comment-copy">sorry first time user</span>
<span class="comment-copy">See <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>.</span>
<span class="comment-copy">I don't think i can use counter, or set. Is it possible to do it without them?</span>
<span class="comment-copy">@redbook0301 I've added an example not using <code>Counter</code>.</span>
<span class="comment-copy">I interpret his requirements as needing to find the two most frequently occurring letters in s and then return them in alphabetical order.</span>
<span class="comment-copy">Oh, I see - I'll fix that.</span>
<span class="comment-copy">Your interpretation is much more interesting!</span>
