<div class="post-text" itemprop="text">
<p>I was reading this <a href="https://stackoverflow.com/q/6652878/4927751">post</a> and I had a question regarding <code>__cmp__()</code>.</p>
<p><strong>My code</strong></p>
<pre><code>class Book(object): 

    def __init__(self, title, year):

        self.title = title
        self.year = year

    def __hash__(self):         # hash function

        print "Self = ", self
        print "Hash value of self = ", hash(str(self))
        print "Hash value of title = ", hash(self.title)
        print "Hash value of year = ", hash(self.year)
        return 0
    def __cmp__(self, other):
        return self.title == other.title

books = []

books.append(Book("ABC", 123))
print hash(books[0])

books.append(Book("DEF", 456))
print hash(books[1])


books.append(Book("ABC", 123))
print hash(books[len(books)-1])

print len(books)

print cmp(books[0],books[2])
</code></pre>
<p><strong>Output</strong></p>
<pre><code>Self =  &lt;__main__.Book object at 0x0000000001E77B00&gt;
Hash value of self =  -1040857764
Hash value of title =  826005955
Hash value of year =  123
0
Self =  &lt;__main__.Book object at 0x0000000001E77BA8&gt;
Hash value of self =  -992414627
Hash value of title =  -589261154
Hash value of year =  456
0
Self =  &lt;__main__.Book object at 0x0000000001E77BE0&gt;
Hash value of self =  1901105233
Hash value of title =  -2015893559
Hash value of year =  789
0
Self =  &lt;__main__.Book object at 0x0000000001E77C18&gt;
Hash value of self =  -228580758
Hash value of title =  826005955
Hash value of year =  123
0
4
1  # How ? 
</code></pre>
<p><code>==</code> operator on strings returns a Boolean value.<br/>
In this code the <code>cmp()</code> compares two strings (namely the titles) so the return value of the <code>cmp()</code> must be a Bool.   </p>
<ul>
<li>How come I am getting an integer ? (I am looking for an explanation with respect to the comparison of objects <code>x &gt; y</code>)</li>
<li>Even when an integer is obtained, how is its value decided ?</li>
<li>How can I make the 1st and the 3rd object equal ?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How come I am getting an integer ? </p>
</blockquote>
<p><code>__cmp__</code> returns an <code>int</code>.  Your <code>__cmp__</code> is returning a <code>bool</code>, which is a subclass of <code>int</code>, so Python interprets it as an <code>int</code>.</p>
<blockquote>
<p>Even when an integer is obtained, how is its value decided ?</p>
</blockquote>
<ul>
<li>-1 means the first operand is less than the second</li>
<li>0 means both operands are equal</li>
<li>+1 means the first operand is greater than the second</li>
</ul>
<blockquote>
<p>How can I make the 1st and the 3rd object equal?</p>
</blockquote>
<p>The problem with your code is your <code>__cmp__</code> returns the result of <code>==</code>, which returns a <code>bool</code>, which is a subclass of <code>int</code>, and <code>True</code> is <code>1</code>, so instead of returning <code>0</code> your <code>__cmp__</code> is returning <code>True</code>/<code>1</code> -- which is wrong.</p>
<p>The methods you should be using (as <code>__cmp__</code> gets removed in later Pythons) are <code>__eq__</code>, <code>__ne__</code>, <code>__le__</code>, <code>__lt__</code>, <code>__ge__</code>, and <code>__gt__</code>.</p>
<p>Using <code>__eq__</code>:</p>
<pre><code>def __eq__(self, other):
    if not isinstance(other, self.__class__):
        return NotImplemented
    return self.title == other.title
</code></pre>
<p>Note that this is only comparing by title, and not considering the year (which may be fine, or may not be, depending on how you will be using your <code>Book</code> class).</p>
<p>You can find out more about them <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__eq__#object.__lt__" rel="nofollow">here</a>.</p>
</div>
<span class="comment-copy">Also, you are using the <code>cmp()</code> <i>function</i>; it returns an integer. Do read the <a href="https://docs.python.org/2/library/functions.html#cmp" rel="nofollow noreferrer">function documentation</a>.</span>
<span class="comment-copy">I know that <b>cmp</b> returns an integer but my doubt is how does it do so ? What does <code>x&gt;y</code> mean ?</span>
<span class="comment-copy">Note that <code>__cmp__</code> doesn't call <code>hash()</code>. I'm not sure why you implemented that and what you expect it to do. Everything about the <code>__hash__</code> method is orthogonal to the rest of your question.</span>
<span class="comment-copy">@MartijnPieters I thought that maybe the hash value is related to the comparisons of objects</span>
<span class="comment-copy">It does not. It is used when storing objects in sets or use them as keys in dictionaries, and there are restrictions on what you can return related to object equality, but object equality doesn't use hashing, no.</span>
<span class="comment-copy">And they are using the <code>cmp()</code> <i>function</i> even.</span>
<span class="comment-copy">@EthanFurman What you said about -1 and +1 are not true! The <a href="https://docs.python.org/2/library/functions.html#cmp" rel="nofollow noreferrer">official API</a> only mentions negative, zero, and positive numbers.</span>
<span class="comment-copy">@NayukiMinase: You are correct -- but the negative number is usually -1, and the positive number is usually +1.  :)</span>
<span class="comment-copy">@EthanFurman I agree with you. And according to this the output should be <code>0</code> rather than <code>1</code>. Don't you agree ?</span>
<span class="comment-copy">@KshitijSaraogi: updated my answer to address the problem you are seeing.</span>
