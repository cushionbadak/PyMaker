<div class="post-text" itemprop="text">
<p>I want to print the time zone. I used <code>%Z</code> but it doesn't print:</p>
<pre><code>import datetime
now = datetime.datetime.now()
print now.strftime("%d-%m-%Y")
print now.strftime("%d-%b-%Y")
print now.strftime("%a,%d-%b-%Y %I:%M:%S %Z") # %Z doesn't work
</code></pre>
<p>Do I perhaps need to import <code>pytz</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>now()</code> returns an object of class <code>datetime.datetime</code>, which does not inherently contain information about its time zone.  (i.e. it is "naive"; see description of "naive" vs. "aware" date and time objects <a href="https://docs.python.org/3/library/datetime.html" rel="noreferrer">in the documentation</a>)</p>
<p>According to the <a href="https://docs.python.org/3/library/datetime.html" rel="noreferrer">documentation</a>,</p>
<blockquote>
<p>datetime.datetime.<strong>now</strong>(<em>tz=None</em>)</p>
<p>Return the current local date and time.</p>
<p>...</p>
<p>If optional argument <code>tz</code> is <code>None</code> or not specified, the <strong>timestamp is converted to the platform's local date and time, and the returned datetime object is naive.</strong></p>
</blockquote>
<p>To obtain your platform's local timezone, you should use, as you suggest, <a href="http://pytz.sourceforge.net/" rel="noreferrer"><code>pytz</code></a>.  <a href="https://stackoverflow.com/questions/1681143/how-to-get-tz-info-object-corresponding-to-current-timezone">Here's Alex Martelli's code to do this</a>:</p>
<pre><code>&gt;&gt;&gt; from pytz import reference
&gt;&gt;&gt; localtime = reference.LocalTimezone()
&gt;&gt;&gt; localtime.tzname(now)
'Mountain Daylight Time'
</code></pre>
<p>You can also get the actual <a href="https://en.wikipedia.org/wiki/Coordinated_Universal_Time" rel="noreferrer">UTC</a> offset, in hours, via:</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; print(-time.timezone / 3600) # convert from seconds to hours
-7.0
</code></pre>
<p>So you could use:</p>
<pre><code>&gt;&gt;&gt; print(now.strftime("%a, %d-%b-%Y %I:%M:%S, " + localtime.tzname(now)))
Wed, 08-Jul-2015 01:27:49, Mountain Daylight Time
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is a documented behavior: <code>datetime.now()</code> returns a naive datetime object and <a href="https://docs.python.org/2.7/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer"><code>%Z</code> returns an empty string in such cases</a>. You need an aware datetime object instead.</p>
<p>To print a local timezone abbreviation, you could use <a href="https://pypi.python.org/pypi/tzlocal" rel="nofollow noreferrer"><code>tzlocal</code> module</a> that can return your local timezone as a <a href="http://pytz.sourceforge.net" rel="nofollow noreferrer"><code>pytz</code></a> tzinfo object that may contain a historical timezone info e.g., from <a href="https://www.iana.org/time-zones/repository/tz-link.html" rel="nofollow noreferrer">the tz database</a>:</p>
<pre><code>#!/usr/bin/env python
from datetime import datetime
import tzlocal # $ pip install tzlocal

now = datetime.now(tzlocal.get_localzone())
print(now.strftime('%Z'))
# -&gt; MSK
print(now.tzname())
# -&gt; MSK
</code></pre>
<p>This code works for timezones with/without daylight saving time. It works around and during DST transitions. It works if the local timezone had different utc offset in the past even if the C library used by python has no access to a historical timezone database on the given platform.</p>
<hr/>
<p>In Python 3.3+, when platform supports it, you could use <a href="https://docs.python.org/3/library/time.html#time.struct_time" rel="nofollow noreferrer"><code>.tm_zone</code> attribute</a>, to get the tzname:</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.localtime().tm_zone
'MSK'
</code></pre>
<p>Or using <code>datetime</code> module:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime, timezone
&gt;&gt;&gt; datetime.now(timezone.utc).astimezone().tzname()
'MSK'
</code></pre>
<p>The code is portable but the result may be incorrect on some platforms (without <code>.tm_zone</code> (<code>datetime</code> has to use <code>time.tzname</code> in this case) and with <a href="http://bugs.python.org/issue1647654" rel="nofollow noreferrer">"interesting" timezones</a>).</p>
<p>On older Python versions, on a system with an "uninteresting" timezone, you could use <code>time.tzname</code>:</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; is_dst = time.daylight and time.localtime().tm_isdst &gt; 0
&gt;&gt;&gt; time.tzname[is_dst]
'MSK'
</code></pre>
<p>An example of an "interesting" timezone is  Europe/Moscow timezone in 2010-2015 period.</p>
<p>Similar issues are discussed in <a href="https://stackoverflow.com/a/3168394/4279">Getting computer's UTC offset in Python</a>.</p>
</div>
<span class="comment-copy">Is that exactly your code? It works for me once I remove the shadowing of "now".</span>
<span class="comment-copy">....well, you need a timezone-aware datetime, and pytz would work for that, so I'll go with "yes"</span>
