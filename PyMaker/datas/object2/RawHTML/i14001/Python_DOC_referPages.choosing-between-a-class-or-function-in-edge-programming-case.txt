<div class="post-text" itemprop="text">
<p>Sometimes when writing python software I end up in a situation in which I am not sure whether to use a function with sub functions, or just a class. In these cases, I have a series of distinct inputs, I want to apply some transform to them and then produce a distinct output. And I don't much care about any of the variables that are created in the process of going from inputs to outputs. So it feels like it should be a simple function in this sense rather than a Class. But for these cases, its also quite a complex series of operations that are involved, often with a need for sub functions that are only useful in the process of transforming the inputs to outputs and not in any more general sense.</p>
<p>And at the end of the day, I usually just want to call it using:</p>
<pre><code>output = my_function(input)
</code></pre>
<p>So I can do something like</p>
<pre><code>def my_function(input):
    def subfunc1(blah):
        return blah1output
    def subfunc2(blah):
        return blah2output
    #lots of complex code here that calls subfunc1 and subfunc2
    return output
</code></pre>
<p>But then co-worker X might come along and say, wow that looks like a pretty complex function, you should use a class! OR I could do this </p>
<pre><code>class my_function(object):
   def __new__(self, input):
      #lots of complex code here that calls subfunc1 and subfunc2
      return output 
    @staticmethod 
    def subfunc1(blah):
        return blah1output
    @staticmethod 
    def subfunc2(blah):
        return blah2output
</code></pre>
<p>But, this seems to be like an odd use for a class because I don't really care about creating and maintaining instances of the class. </p>
<p>A major advantage of using classes here though is that you can more easily test subfunc1 and <code>subfunc2</code> and this alone might be sufficient reason to use one.</p>
<p>However, as I'm still new to programming can someone suggest the best possible solution for a production environment and/or the solution that is generally most pythonic? </p>
</div>
<div class="post-text" itemprop="text">
<p>@wwii's comment is the right answer.</p>
<p>To elaborate, you are correct in your intuition that it might not be pythonic to create a class that will function as a singleton - modules are the preferred way to do this (here's an oblique reference in the <a href="https://docs.python.org/3/faq/programming.html#how-do-i-share-global-variables-across-modules" rel="nofollow">programming faq</a>).</p>
<p>You are also correct that it is good to be able to test your subfunctions. One other reason to pull them out of the function body is because Python, as an interpreted language, will otherwise rebuild the subfunction inside every time that your outer function is called.</p>
<p>Benjamin Gleitzman's glorious <a href="https://github.com/gleitz/howdoi/blob/master/howdoi/howdoi.py" rel="nofollow">howdoi module</a> (the link is to his github repo) is a beautiful example of how to break out a complex problem into small, very readable pieces -- following the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP 8</a> philosophies that "flat is better than nested" and "simple is better than complex"</p>
<p><strong>edit</strong></p>
<p>Here's an example of a simple module (<a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow">python tutorial on modules</a>) that can mask your internal functions. The structure is:</p>
<pre><code>mymodule
|____
  |___  __init__.py
  |___  submodule.py
</code></pre>
<p>in <code>__init__.py</code>:</p>
<pre><code>"""
This docstring shows up when someone does `help(mymodule)`.
"""
from submodule import my_function
</code></pre>
<p>in <code>submodule.py</code>:</p>
<pre><code>def _subfunc1(x):
    """A preceding underscore signals to the reader that it's an internal function."""
    return x + 1

def _subfunc2(x):
    return x * 2

def my_function(x):
    """Yours will be cooler."""
    return _subfunc1(x) * _subfunc2(x)
</code></pre>
<p>And to use it:</p>
<pre><code>&gt;&gt;&gt; import mymodule
&gt;&gt;&gt; result = mymodule.my_function(5)
&gt;&gt;&gt;
&gt;&gt;&gt; # But internal functions (not imported) won't be visible...
&gt;&gt;&gt; mymodule._subfunc1(5)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute '_subfunc1'
</code></pre>
</div>
<span class="comment-copy">I usually use classes for objects that contain state and data.  If you are just trying to encapsulate the process, you could do that in a module.</span>
<span class="comment-copy">Thanks thats helpful. So basically I should just have a bunch of functions in  a module in a flat matter, with one function (functionX) taking the inputs and producing an output, but calling other functions in the module? That way I could just do "from mymodule import functionX and use functionX(input) outside the module. If this is the case, should functionX be at the top or the bottom of the file for maximum readability?</span>
<span class="comment-copy">Oh wow! Good question. I actually don't know but always put my main functions at the bottom. The <a href="https://github.com/gleitz/howdoi/blob/master/howdoi/howdoi.py" rel="nofollow noreferrer">howdoi</a> module does that. Also, you can name your internal functions starting with an underscore: <code>def _internal_func():</code> as a way to signal to others that it's internal, or even mask them using a directory structure. I'll edit my response to show it.</span>
