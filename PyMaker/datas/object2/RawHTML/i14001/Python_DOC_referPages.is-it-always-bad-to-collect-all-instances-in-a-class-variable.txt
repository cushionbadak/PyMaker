<div class="post-text" itemprop="text">
<p>Consider two versions of a simple weather model which stores the location of clouds:</p>
<pre><code>class cloud:
    def __init__(self, x, y):
        self.x = x
        self.y = y

collection = []
collection.append(cloud(1,2))
collection.append(cloud(4,6))

def update_all_clouds(collection):
    for c in collection:
        cloud.x += 1
        cloud.y += 1

update_all_clouds(collection)
</code></pre>
<p>vs</p>
<pre><code>class cloud:
    collection = []
    def __init__(self, x, y)
        self.x = x
        self.y = y
        cloud.collection.append(self)
    @classmethod
    def update_all(cls):
        for c in cloud.collection:
            c.x += 1
            c.y += 1
cloud(1,2)
cloud(4,6)
cloud.update_all()
</code></pre>
<p>This has basically been punished here
<a href="https://stackoverflow.com/questions/4831307/is-it-bad-to-store-all-instances-of-a-class-in-a-class-field">Is it bad to store all instances of a class in a class field?</a>
but there is an emphasis here on class methods which act on all instances.
Is there nothing to be said for the simplicity of the last three lines that the second approach affords?</p>
<p>I am aware that another approach would be creating a list-like class called, for example, collection and giving that class methods like update_all() but to me it doesn't seem much better.</p>
</div>
<div class="post-text" itemprop="text">
<p><em>In general</em>, this is bad, yes, for the simple reason that the objects being in a list keeps a reference to them pretty much <em>forever</em>. There being a reference to an object prevents it from being garbage collected. So objects of your type essentially live forever (until the program terminates) and the memory they take up will never be freed.</p>
<p>Of course, if you have a <em>very specific need</em> for this, and are in full control of when the objects are created, you <em>could</em> do it like that. But in general <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow">explicit is better than implicit</a>, so it’s a better idea to have an actual collection where you add those elements. That collection could even live in the type, so you could do:</p>
<pre><code>obj = Cloud(…)
Cloud.add(obj)

# or even
obj = Cloud(…).persistInType()
</code></pre>
<p>You could also use <a href="https://docs.python.org/3/library/weakref.html" rel="nofollow">weak references</a> to avoid the problem described above, but that’s additional overhead, and a bit more complicated to manage. So just do yourself a favor, and collect the objects manually.</p>
</div>
<div class="post-text" itemprop="text">
<p>Considering that <em>explicit is better than implicit</em> (see <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow">The Zen of Python</a>) perhaps the best is approach is to have two classes: <code>Cloud</code> and <code>CloudCollection</code>. This would allow you to write code like this:</p>
<pre><code>collection = CloudCollection()
collection.add(Cloud(1, 2))
collection.add(Cloud(4, 6))
collection.shift(1, 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This question can simply be reduced to a question about using global variables, as a mutable class-level member is just a globlal variable in a different namespace.</p>
<p>All the <a href="https://softwareengineering.stackexchange.com/questions/148108/why-is-global-state-so-evil">arguments against using global variables</a> apply to this as well.</p>
</div>
<span class="comment-copy">will having an optional argument <code>add_to_collection=False</code> on <b>init</b> so that adding the object to the collection is checked against that variable makes things explicit ?</span>
<span class="comment-copy">I guess that could work. But you should also add some functionality to be able to dispose the object, removing it from the list.</span>
<span class="comment-copy">The code I posted is a simplification.  The collection is constantly getting culled @poke</span>
<span class="comment-copy">As per <i>“Simple is better than complex”</i>, and <i>“Special cases aren't special enough to break the rules”</i>, you would just use a normal list there though ;)</span>
<span class="comment-copy">As soon as we can see the "collection" as a standalone entity with its own "manipulators" it's appropriate to use a dedicated class for it, in my opinion. I don't say it's necessarily the OP's case.</span>
<span class="comment-copy">ended up doing "class collection(list)" and "clouds = collection() etc"</span>
<span class="comment-copy">This is actually worse than just a global variable. It would have been “just” a global variable, if one would call <code>Cloud.addObject(cloudObj)</code>, but here the objects are added automatically.</span>
