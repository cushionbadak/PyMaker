<div class="post-text" itemprop="text">
<p>I have a data file as such:</p>
<pre><code>ID,ORIG,TIME,TEXT
364,1,7-10-15,This works fine
16254,1,7-10-15,But, I don't work :(
9846,0,7-10-15,Neither, do, I  
</code></pre>
<p>When I import using pandas I'm trying to get the following:</p>
<pre><code>+-------+------+---------+----------------------+
| ID    | ORIG | TIME    | TEXT                 |
+=======+======+=========+======================+
| 3464  | 1    | 7-10-15 | This works fine      |
+-------+------+---------+----------------------+
| 16254 | 1    | 7-10-15 | But, I don't work :( |
+-------+------+---------+----------------------+
| 9846  | 0    | 7-10-15 | Neither, do, I       |
+-------+------+---------+----------------------+
</code></pre>
<p>Using my script <code>data_df = pd.read_csv('data.csv', low_memory=False)</code>, when I import the 1st row everything is fine (with no index set).</p>
<p>However with the second row since there's a comma there, the data that was originally in ID moves to the index column and everything gets shifted 1 to the left. </p>
<pre><code>+-------+----+---------+-----------------+-----------------+
|       | ID | ORIG    | TIME            | TEXT            |
+=======+====+=========+=================+=================+
| 3464  | 1  | 7-10-15 | This works fine | NaN             |
+-------+----+---------+-----------------+-----------------+
| 16254 | 1  | 7-10-15 | But             | I don't work :( |
+-------+----+---------+-----------------+-----------------+
</code></pre>
<p>The pattern repeats with the more commas are found in the last column. A possible <a href="https://stackoverflow.com/questions/24164249/parsing-csv-file-in-pandas-with-commas-in-last-column">solution</a> to this is to rewrite the file but I'm trying to find a way to simply import it without having to rewrite each file (I have about 65+).</p>
<p><strong>My question is:</strong></p>
<p>Is it possible to import (per row) first column into "ID" second column to "ORIG" third column to "TIME" and everything else into "TEXT"?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your CSV is malformed because it does not use quotes to distinguish commas which are delimiters from commas which are part of a field's value.</p>
<p>However, we could iterate through the lines of the CSV and use <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow"><code>str.split(',', 3)</code></a> to split <em>on just the first 3 commas</em>:</p>
<pre><code>lines = (line.split(',',3) for line in f)
</code></pre>
<p>We can pass this iterator directly to <code>pd.DataFrame</code>:</p>
<pre><code>df = pd.DataFrame(lines, columns=header)
</code></pre>
<p>This will not be as fast loading valid CSV using <code>pd.read_csv</code>'s optimized parsing engine, but I think the result pretty good considering the input is malformed.</p>
<hr/>
<pre><code>import numpy as np
import pandas as pd

with open('data', 'r') as f:
    header = [item.strip() for item in next(f).split(',')]
    lines = (line.split(',', 3) for line in f)
    df = pd.DataFrame(lines, columns=header)
    df = df.convert_objects(convert_numeric=True)
    df['TIME'] = pd.to_datetime(df['TIME'])

print(df)
</code></pre>
<p>yields</p>
<pre><code>      ID  ORIG       TIME                    TEXT
0    364     1 2015-07-10       This works fine\n
1  16254     1 2015-07-10  But, I don't work :(\n
2   9846     0 2015-07-10        Neither, do, I  
</code></pre>
<p>with </p>
<pre><code>print(df.dtypes)
# ID               int64
# ORIG             int64
# TIME    datetime64[ns]
# TEXT            object
# dtype: object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's a tad ugly, but you could use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.from_records.html" rel="nofollow"><code>DataFrame.from_records</code></a> using on-the-fly data:</p>
<pre><code>crap = [l.split(',')[: 3] + [''.join(l.strip().split(',')[3: ])] \
     for l in open('stuff.csv').readlines()]
&gt;&gt; pd.DataFrame.from_records(crap[1: ], columns=crap[0])
      ID ORIG     TIME                 TEXT
0    364    1  7-10-15      This works fine
1  16254    1  7-10-15  But I don't work :(
2   9846    0  7-10-15         Neither do I
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While there are a few ways to force this to work entirely pandas-side, it's so much easier to do it using <code>csv</code> that I'd just do that:</p>
<pre><code>import csv, io, pandas as pd
data = io.StringIO()
with open("leb.csv", newline="") as fp:
    reader = csv.reader(fp)
    rows = [row[:3] + [','.join(row[3:])] for row in reader]
    writer = csv.writer(data)
    writer.writerows(rows)

data.seek(0)
df = pd.read_csv(data)
</code></pre>
<p>This effectively fixes up the input data before pandas ever sees it.  This gives</p>
<pre><code>&gt;&gt;&gt; df
      ID  ORIG     TIME                  TEXT
0    364     1  7-10-15       This works fine
1  16254     1  7-10-15  But, I don't work :(
2   9846     0  7-10-15        Neither, do, I
</code></pre>
</div>
<span class="comment-copy">Does your data actually have all those <code>+</code> and <code>-</code> and <code>=</code>?</span>
<span class="comment-copy">No, it's just for viewing purpose</span>
<span class="comment-copy">Can you add what the actual input looks like</span>
<span class="comment-copy">@PadraicCunningham you're referring to my data.csv file?</span>
<span class="comment-copy">It's usually a better idea to give an actual example people can copy and paste.  The data file you've shown <i>wouldn't</i> have a problem, because it uses <code>|</code> as the separator.</span>
<span class="comment-copy">All answers worked, but since yours resulted in the faster output on my larger files I marked as the accepted answer</span>
<span class="comment-copy">Actually, this answer <i>is</i> better (at least than mine) because it stops splitting after 3 commas.</span>
