<div class="post-text" itemprop="text">
<p>I have searched for a clear answer to this and have not been able to find one, I apologize if this has been asked previously. I'm using seaborn 0.6 with matplotlib 1.4.3. I would like to temporarily change the styles of plots as I am creating many figures in an ipython notebook.</p>
<p>Specifically, in this example, I would like to change both the font size and the background style on a per-plot basis.</p>
<p>This creates the plot I am looking for but defines parameters globally:</p>
<pre><code>import seaborn as sns
import numpy as np

x = np.random.normal(size=100)

sns.set(style="whitegrid", font_scale=1.5)
sns.kdeplot(x, shade=True);
</code></pre>
<p>however this fails:</p>
<pre><code>with sns.set(style="whitegrid", font_scale=1.5):
    sns.kdeplot(x, shade=True);
</code></pre>
<p>with:</p>
<pre><code>---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-10-70c5b03f9aa8&gt; in &lt;module&gt;()
----&gt; 1 with sns.set(style="whitegrid", font_scale=1.5):
      2     sns.kdeplot(x, shade=True);

AttributeError: __exit__
</code></pre>
<p>I also tried:</p>
<pre><code>with sns.axes_style(style="whitegrid", rc={'font.size':10}):
    sns.kdeplot(x, shade=True);
</code></pre>
<p>Which does not fail, however it also does not change the size of the font. Any help would be much appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>The best thing to do would be to combine the seaborn style and context parameters into one dictionary and then pass it to the <code>plt.rc_context</code> function:</p>
<pre><code>import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt  
x = np.random.normal(size=100)
with plt.rc_context(dict(sns.axes_style("whitegrid"),
                         **sns.plotting_context("notebook", font_scale=1.5))):
    sns.kdeplot(x, shade=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is what I am using, leveraging the context management provided by matplotlib:</p>
<pre><code>import matplotlib

class Stylish(matplotlib.rc_context):
    def __init__(self, **kwargs):
        matplotlib.rc_context.__init__(self)
        sns.set(**kwargs)
</code></pre>
<p>And then for instance:</p>
<pre><code>with Stylish(font_scale=2):
    sns.kdeplot(x, shade=True)
</code></pre>
</div>
<span class="comment-copy">There's nothing in seaborn to do this but you could combine the dicts of parameters from <code>axes_style</code> and <code>plotting_context</code> and then pass them to <code>plt.rc_context</code>.</span>
<span class="comment-copy">The with statement uses Python magic methods __enter__ and __exit__. Those methods are called by whatever sns.set is returning. It must have an __enter__ method, but not an __exit__ method. I think you may want to use a plotting context. <a href="http://stanford.edu/~mwaskom/software/seaborn/generated/seaborn.plotting_context.html#seaborn.plotting_context" rel="nofollow noreferrer">stanford.edu/~mwaskom/software/seaborn/generated/â€¦</a></span>
<span class="comment-copy"><code>set</code> doesn't return anything; the relevant code is here: <a href="https://github.com/mwaskom/seaborn/blob/master/seaborn/rcmod.py#L69" rel="nofollow noreferrer">github.com/mwaskom/seaborn/blob/master/seaborn/rcmod.py#L69</a></span>
<span class="comment-copy">mwaskom, thank you for your answer, I believe this is exactly what I was looking for. The <code>font_scale</code> parameter of the plotting context is not behaving as I would expect though. If I pass a dictionary to <code>plotting_context</code> I am able to change the font sizes of the plot, however passing an argument to <code>plotting_context</code> does not update the font sizes. There is an example of what I am referring to here. <a href="http://nbviewer.ipython.org/github/johnchase/thesis_analysis/blob/master/Untitled.ipynb" rel="nofollow noreferrer">font_scale example</a></span>
<span class="comment-copy">Thanks, this is what I was looking for! I was missing the "notebook" argument in the code I linked to above, which is why it did not seem to be working.</span>
<span class="comment-copy">I was just playing with other ways to combine dictionaries and found <a href="https://docs.python.org/3/library/collections.html#chainmap-objects" rel="nofollow noreferrer">collections.ChainMap</a>... while it requires an import,  <code>with plt.rc_context(ChainMap(sns.axes_style('whitegrid'), sns.plotting_context('notebook', font_scale=1.5))):</code> .  It's also Python 3.3+ only according to the docs.  On 2.7 I'd prefer your stdlib solution above over a 3rd party lib for something so simple.</span>
<span class="comment-copy">Well, I had read the other answer but not the comments above... this is actually nothing particularly new, just copypastable.</span>
<span class="comment-copy"><a href="https://github.com/mwaskom/seaborn/pull/932" rel="nofollow noreferrer">github.com/mwaskom/seaborn/pull/932</a> ...</span>
