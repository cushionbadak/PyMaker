<div class="post-text" itemprop="text">
<p>I was taking a look at the hierarchy of the built-in python exceptions, and I noticed that <code>StopIteration</code> and <code>GeneratorExit</code> have different base classes:</p>
<pre><code>BaseException
 +-- SystemExit
 +-- KeyboardInterrupt
 +-- GeneratorExit
 +-- Exception
      +-- StopIteration
      +-- StandardError
      +-- Warning
</code></pre>
<p>Or in code:</p>
<pre><code>&gt;&gt;&gt; GeneratorExit.__bases__
(&lt;type 'exceptions.BaseException'&gt;,)
&gt;&gt;&gt; StopIteration.__bases__
(&lt;type 'exceptions.Exception'&gt;,)
</code></pre>
<p>When I go to the specific description of each exception, I can read following:</p>
<p><a href="https://docs.python.org/2/library/exceptions.html#exceptions.GeneratorExit" rel="nofollow">https://docs.python.org/2/library/exceptions.html#exceptions.GeneratorExit</a></p>
<blockquote>
<p>exception GeneratorExit</p>
<p>Raised when a generator‘s close() method is called. It directly inherits from BaseException instead of StandardError since it is technically not an error.</p>
</blockquote>
<p><a href="https://docs.python.org/2/library/exceptions.html#exceptions.StopIteration" rel="nofollow">https://docs.python.org/2/library/exceptions.html#exceptions.StopIteration</a></p>
<blockquote>
<p>exception StopIteration</p>
<p>Raised by an iterator‘s next() method to signal that there are no further values. This is derived from Exception rather than StandardError, since this is not considered an error in its normal application.</p>
</blockquote>
<p>Which is not very clear to me. Both are similar in the sense that they do not notify errors, but an "event" to change the flow of the code. So, they are not technically errors, and I understand that they should be separated from the rest of the exceptions... but why is one a subclass of <code>BaseException</code> and the other one a subclass of <code>Exception</code>?.</p>
<p>In general I considered always that <code>Exception</code> subclasses are errors, and when I write a blind <code>try: except:</code> (for instance calling third party code), I always tried to catch <code>Exception</code>, but maybe that is wrong and I should be catching <code>StandardError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is quite common to use try: ... except Exception: ... blocks.</p>
<p>If GeneratorExit would inherit from Exception you would get the following issue:</p>
<pre><code>def get_next_element(alist):
    for element in alist:
        try:
            yield element
        except BaseException:  # except Exception
            pass

for element in get_next_element([0,1,2,3,4,5,6,7,8,9]):
    if element == 3:
        break
    else:
        print(element)

0
1
2
Exception ignored in: &lt;generator object get_next_element at 0x7fffed7e8360&gt;
RuntimeError: generator ignored GeneratorExit
</code></pre>
<p>This example is quite simple but imagine in the try block a more complex operation which, in case of failure, would simply ignore the issue (or print a message) and get to the next iteration.</p>
<p>If you would catch the generic Exception, you would end up preventing the user of your generator from breaking the loop without getting a RuntimeError.</p>
<p>A better explanation is <a href="http://www.algorithm.co.il/blogs/programming/generatorexit-another-reason-to-upgrade-to-python-2-6/" rel="nofollow">here</a>.</p>
<p>EDIT: answering here as it was too long for a comment.</p>
<p>I'd rather say the opposite. <code>GeneratorExit</code> should inherit from <code>Exception</code> rather than <code>BaseException</code>. When you catch <code>Exception</code> you basically want to catch almost everything. <code>BaseException</code> as <a href="https://www.python.org/dev/peps/pep-0352/" rel="nofollow">PEP-352</a> states, is for those exceptions which need to be "excepted" in order to allow the user to escape from code that would otherwise catch them. In this way you can, for example, still CTRL-C running code. <code>GeneratorExit</code> falls into that category in order to break loops. An interesting conversation about it on <a href="https://groups.google.com/forum/#!topic/comp.lang.python/x1lEcMD43To" rel="nofollow">comp.lang.python</a>.</p>
</div>
<span class="comment-copy">I <i>suspect</i> that this is for historical reasons: StopIteration &amp; Exception existed long before BaseException, and changing it might break some old code for no good reason. See <a href="http://legacy.python.org/dev/peps/pep-0352" rel="nofollow noreferrer">PEP 352</a> Required Superclass for Exceptions. Note that StopIteration still derives from <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" rel="nofollow noreferrer">Exception in Python 3</a>, even though that's not consistent with the modern pattern. (I've put this in a comment rather than an answer because it's speculation).</span>
<span class="comment-copy">@PM2Ring that sounds actually logic. Although... maybe there is a hidden reason for this if python 3 still defines <code>StopIteration</code> as subclass of <code>Exception</code></span>
<span class="comment-copy">Relevant Python bug tracker link <a href="https://bugs.python.org/issue1537" rel="nofollow noreferrer">Issue1537</a>: Change GeneratorExit's base class from Exception to BaseException</span>
<span class="comment-copy">I find quite logical that <code>GeneratorExit</code> inherits from <code>BaseException</code>, but for consistence I think that <code>StopIterator</code> should as well inherit directly from <code>BaseException</code> instead of from <code>Exception</code>. It is not an error anyway.</span>
<span class="comment-copy">Answered in the edited question.</span>
<span class="comment-copy">@ikaros45, the way it is now is probably least confusing with minimal set of <code>BaseExceptions</code>. You don't want to add more to the <code>BaseException</code> class of exceptions than absolutely necessary because then you've got another one that may fall through your exception handling. So I would agree with noxdafox that the <code>GeneratorExit</code> should be removed from the <code>Base</code> ones, but then it introduces the runtime if you don't know about it. Hence the current model where it works if you don't know about it but still is not too heavy on the <code>Base</code> class of exceptions.</span>
