<div class="post-text" itemprop="text">
<p>I have a dummy example of an iterator container below (the real one reads a file too large to fit in memory):</p>
<pre><code>class DummyIterator:
    def __init__(self, max_value):
        self.max_value = max_value

    def __iter__(self):
        for i in range(self.max_value):
            yield i

def regular_dummy_iterator(max_value):
    for i in range(max_value):
        yield i
</code></pre>
<p>This allows me to iterate over the value <strong>more than once</strong> so that I can implement something like this:</p>
<pre><code>def normalise(data):
    total = sum(i for i in data)
    for val in data:
        yield val / total

# this works when I call next()
normalise(DummyIterator(100))

# this doesn't work when I call next()
normalise(regular_dummy_iterator(100))
</code></pre>
<p>How do I check in the normalise function that I am being passed an iterator container rather than a normal generator?</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all: There is no such thing as a <em>iterator container</em>. You have an <em>iterable</em>.</p>
<p>An iterable produces an iterator. Any iterator is also an iterable, but produces <em>itself</em> as the iterator:</p>
<pre><code>&gt;&gt;&gt; list_iter = iter([])
&gt;&gt;&gt; iter(list_iter) is list_iter
True
</code></pre>
<p>You don't have an iterator if the <code>iter(ob) is ob</code> test is false.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can test whether you have an iterator (is consumed once <code>next</code> raises the <code>StopIteration</code> exception) vs <em>just</em> an iterable (can probably be iterated over multiple times) by using the <a href="https://docs.python.org/3/library/collections.abc.html" rel="nofollow noreferrer"><code>collections.abc</code>module</a>. Here is an example: </p>
<pre><code>from collections.abc import Iterable, Iterator

def my_iterator(): 
    yield 1

i = my_iterator()
a = []

isinstance(i, Iterator) # True
isinstance(a, Iterator) # False
</code></pre>
<p>What makes <code>my_iterator()</code> an <code>Iterator</code> is the presence of both the <code>__next__</code> and <code>__iter__</code> magic methods (and by the way, basically what is happening behind the scenes when you call <code>isinstance</code> on a <code>collections.abc</code> abstract base class is a test for the presence of certain magic methods). </p>
<p>Note that an iterator <em>is also an <code>Iterable</code></em>, as is the empty list (i.e., both have the <code>__iter__</code> magic method): </p>
<pre><code>isinstance(i, Iterable) # True
isinstance(a, Iterable) # True
</code></pre>
<p>Also note, <a href="https://stackoverflow.com/a/31245371/2437514">as was pointed out in Martijn Pieters' answer</a>, that when you apply the generic <code>iter()</code> function to both, you get an iterator: </p>
<pre><code>isinstance(iter(my_iterator()), Iterator) # True
isinstance(iter([])), Iterator) # True
</code></pre>
<p>The difference here between <code>[]</code> and <code>my_iterator()</code> is that <code>iter(my_iterator())</code> <em>returns itself</em> as the iterator, whereas <code>iter([])</code> produces a <strong>new iterator</strong> every time. </p>
<p>As was already mentioned in MP's same answer, your object above is not an "iterator container." It is an iterable object, i.e., "an iterable". Whether or not it "contains" something isn't really related; the concept of containing is represented by the abstract base class <code>Container</code>. A <code>Container</code> may be iterable, but it doesn't necessarily have to be. </p>
</div>
<span class="comment-copy">You don't have to read the file into memory at once so why do you need this?</span>
<span class="comment-copy">What Padraic said. If you need to perform multiple passes over a large file just use its <code>.seek()</code> method to rewind it.</span>
<span class="comment-copy">Can you edit your code to make it runnable? Add <code>self</code> parameter to <code>__init__</code> and use <code>self.max_value</code> into <code>__iter__</code></span>
