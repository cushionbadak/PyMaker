<div class="post-text" itemprop="text">
<p>I'm following the implementation of a python script example shown <a href="http://resources.arcgis.com/en/help/main/10.1/index.html#//0154000005qv000000" rel="nofollow">here</a>.</p>
<p>Basically, this does what I need it to do except that we now want to run the script with the domain credentials <strong>without</strong> prompting the user for a username and password.  Ideally, we'd want to run this during maintenance windows, and we would rather have a domain account's credentials handle the authentication instead of baking it in to the script for anyone to stumble upon.  </p>
<p>Since I'm not really well versed with python, I'm not entirely sure what the capabilities/best practices are in these scenarios.  </p>
</div>
<div class="post-text" itemprop="text">
<p>If all you're looking for is a way to pass in arguments without prompting the user, you could use the library argparse to pass in <strong>command line arguments</strong>, see <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow">https://docs.python.org/3/library/argparse.html</a></p>
<p>Another source of information would be an <strong>.ini file</strong>, which is handled by the module <em>ConfigParser</em> or any other file-based source like XML, shelve, json.</p>
<p>All these issues have the weakness, that you have to apply access protection for the file containing the credentials.</p>
</div>
<span class="comment-copy">That could work for me, but if the script was given to/discovered by a third party, couldn't they alter the script to print the credentials?    Is there any way to interrogate the context with which it's running in?  I'm looking into Kerberos right now, and I may have to do a two part solution. 1) get the token in the above example through an authenticated interaction using a Kerberos ticket (protect the script or process to get the token) 2) use the token access the service in a local script and toggle it on and off</span>
