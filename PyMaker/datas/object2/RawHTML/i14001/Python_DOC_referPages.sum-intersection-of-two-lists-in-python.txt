<div class="post-text" itemprop="text">
<p>I'm new to Python. If I have a 'data' variable like this:</p>
<pre><code>data = [['water', 'chips', 'pie', 'fruit', 200], ['soda', 'nuts', 'cake', 'vegetables', 300], ['water', 'chips', 'cake', 'fruit', 40], ['soda', 'crackers', 'cake', 'vegetables', 80]]
</code></pre>
<p>and I have a list like this:</p>
<pre><code>ls = [['water', 'chips'], ['soda', 'nuts']]
</code></pre>
<p>How can I return the sum of <code>data[i][4] for i in data</code> that contain both of those values and append it to the list.</p>
<pre><code>total = 0
for i in data:
    for x in ls
        if i contains x:
             ls[2] = total += total

# should return
ls = [['water', 'chips', 240], ['soda', 'nuts', 300]]
</code></pre>
<p>The final element in <code>ls</code> is the sum of those <code>data[3][4]</code> that contain <code>ls[1]</code> <em>and</em> <code>ls[2]</code></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>res = [
    e +  # filter list itself
    [
        sum( # sum all
            l[4]  # get fourth item if contains all
            for l in data  # take each element of data
            if all(i in l for i in e)  # check if contains all filter list
        )
    ]  # concat sum to list itself
    for e in ls  # take each element of filter list 
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is my approach: use the Counter from collections to keep track of the sum. We use the first two items in each sublist as a key, and the last item as the value:</p>
<pre><code>from collections import Counter

data = [
    ['water', 'chips', 'pie', 'fruit', 200],
    ['soda', 'nuts', 'cake', 'vegetables', 300],
    ['water', 'chips', 'cake', 'fruit', 40],
    ['soda', 'crackers', 'cake', 'vegetables', 80]]
ls = [['water', 'chips'], ['soda', 'nuts']]

counter = Counter()
for item in data:
    if item[:2] in ls:
        counter.update({tuple(item[:2]): item[-1]})

result = [list(k) + [v] for k, v in counter.iteritems()]
print result
</code></pre>
<p>Since <code>Counter</code> behaves like a dictionary, and a dictionary does not take a list as key, we have to turn the list of the first two elements into a tuple (hence <code>tuple(item[:2])</code>).</p>
</div>
<span class="comment-copy">I am going to delete my answer, I suggest you read a tutorial as your indexing does not come close to your logic, <code>data[3][4]</code> is 80. Also x cannot contain i as x is a list. You are going to have to look at every element in x and i and compare if the interesting items can appear anywhere</span>
<span class="comment-copy">Is there an easy way I can find the amount of times that <code>all(i in l for i in e)</code> returns true so that I can divide it by the sum to produce the average?</span>
<span class="comment-copy">@Himmel if you're using py3, just replace sum with <a href="https://docs.python.org/3/library/statistics.html?highlight=average#statistics.mean" rel="nofollow noreferrer">statistics.mean</a>. It fails when no item in the list, you can concat <code>[0]</code> to the result list i.e. <code>statistics.mean([0] + [...])</code>. Otherwise, write your function to take avg of a list and replace <code>sum</code> with yours such that <code>def avg(ls): return sum(ls) / len(ls)</code>.</span>
