<div class="post-text" itemprop="text">
<p>I am attempting to use a regex to read through a text file and make a folder in a certain directory based on what the regex finds. The text file I'm reading through is some HTML source code for the page that I wanted to grab titles of folders from. (that's why the regex is searching for an odd value)</p>
<p><a href="http://pastebin.com/geZUY3hB" rel="nofollow noreferrer">This</a> is the file I'm reading from. (it's super long)</p>
<p>Here is my code:</p>
<pre><code>import os
import re
with open('folders.txt','r', encoding='utf-8') as f:
  lines = f.readlines()

  match = re.search(r'&gt;[\w\.-]+&lt;/a&gt;&lt;/td&gt;', lines)
  match = match.rstrip("&lt;/a&gt;&lt;/td&gt;")
  match = match.lstrip("&gt;")
  newpath = r'C:\Desktop\scriptFolders\%s' %match
  if not os.path.exists(newpath): os.makedirs(newpath)
</code></pre>
<p>When I throw this code into a shell it gives me the following error:</p>
<pre><code>Traceback (most recent call last):
File "&lt;stdin&gt;", line 4, in &lt;module&gt;
File "C:\Python34\lib\re.py", line 170, in search
  return _compile(pattern, flags).search(string)
TypeError: expected string or buffer
</code></pre>
<p>How far off track am I?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a number of mistakes in and potential improvements to your code. They're not easy to explain in prose, so here's a working version of the code, with comments highlighting the changes and the reasons behind them.</p>
<pre><code>import os
import re

# Precompile the regex so it only happens once. This saves a bit of time,
# especially if your file is large.
# I've also modified the regex to include a capture group [1] for the part
# between the &gt; and the &lt;, allowing us to grab the string there later. There
# are other ways to do it (e.g. with lookbehind and lookahead), but this is the
# simplest.
regex = re.compile(r'&gt;([\w\.-]+)&lt;/a&gt;&lt;/td&gt;')

with open('folders.txt', 'r', encoding='utf-8') as f:
    # Loop through the lines in f.
    # Alternatively, you can also do
    #     lines = f.readlines()
    #     for line in lines:
    #         ...
    # but it's less memory-efficient because it puts the whole file in memory.
    for line in f:
        match = regex.search(line)
        # re.search returns a match object [2], or None if the string doesn't
        # match the regex.
        if not match:  # Throw away non-matching lines.
            continue
        # Get the value of capture group #1.
        match = match.group(1)
        newpath = r'C:\Desktop\scriptFolders\%s' % match
        if not os.path.exists(newpath):
            os.makedirs(newpath)
</code></pre>
<p>References:</p>
<ol>
<li><a href="https://docs.python.org/3/library/re.html#re.match.group" rel="nofollow">Capture groups</a></li>
<li><a href="https://docs.python.org/3/library/re.html#match-objects" rel="nofollow">Match objects</a></li>
</ol>
</div>
<span class="comment-copy">Are you allowed to use a proper HTML parser like beautiful soup?</span>
<span class="comment-copy">use match= re.search("&gt;([^&lt;]*?)&lt;/a&gt;&lt;/td&gt;",lines).group(1)</span>
<span class="comment-copy">Actually, using a HTML parser would help a lot for what I'm doing. I'll take a look at it. I am just trying to grab the names of files on a few web pages, and make a directory for each file name I grab.</span>
<span class="comment-copy">Using groups instead of stripping off the other html tags was useful, Thanks!</span>
<span class="comment-copy">Thank you for the detailed response! I really should have looked more into the API before posting anything, but this will be really useful for the next time I need to write a regex. Thanks again!</span>
