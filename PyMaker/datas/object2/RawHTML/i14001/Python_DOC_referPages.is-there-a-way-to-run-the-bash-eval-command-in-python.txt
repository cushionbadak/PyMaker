<div class="post-text" itemprop="text">
<p>Attempting to convert an old bash script to python. The trouble is that I do not know very much about bash. Is there an equivalent python command for the bash command eval?
Eval is used in the bash program like this:</p>
<pre><code>eval "(/usr/path/exec/file) &amp;"
</code></pre>
<p>where "file" is an executable file.</p>
<p>If there is no equivalent can someone provide a decent explanation as to what eval is doing here? I'm sorry if this is rudimentary but this is the first bash script I've ever looked at and I am very confused</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a couple of things going on there. First you are running inside a bash subshell, that is the parenthesis part. But probably that's not all that important since no variables are changed inside that subshell.</p>
<p>Next you are running a program and file descriptors are however copied so stdin, stdout, and stderr are the same.</p>
<p>And you are running that in the background. </p>
<p>So let's break these down into Python. As mentioned before, we can ignore the subshell part. </p>
<p>As for running the program, <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow">os.system()</a> or <a href="https://docs.python.org/3/library/subprocess.html#module-subprocess" rel="nofollow">subprocess.call</a> is the equivalent of running a command without having to capture or change input or output. </p>
<p>More often you <em>do</em> need to capture output so the equivalent of </p>
<pre><code> x=$(/path/to/exec/file)
</code></pre>
<p>is in Python is </p>
<pre><code> x = subprocess.check_output('/path/to/exec/file')
</code></pre>
<p>See <a href="https://docs.python.org/3/library/subprocess.html?highlight=process#replacing-bin-sh-shell-backquote" rel="nofollow">Replacing /bin/sh backquote</a> for more info.</p>
<p>Finally, there is part about running in the background. For that the most equivalent match is <a href="https://docs.python.org/3/library/subprocess.html#popen-objects" rel="nofollow">subprocess.popen</a> as mentioned in one of the other answers. There is also <a href="https://docs.python.org/3/library/os.html?highlight=fork#os.fork" rel="nofollow">os.fork()</a> but that doesn't work on all OS's, especially Windows. You might also want to consider using threads. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/subprocess.html" rel="nofollow"><code>subprocess.Popen</code></a> to run a subprocess asynchronously</p>
<p>Example:</p>
<pre><code>from subprocess import Popen
p = Popen(['/usr/path/exec/file'])
</code></pre>
<p>do other stuff while subprocess is running, then call</p>
<pre><code>p.terminate()
</code></pre>
<p>or</p>
<pre><code>p.wait()
</code></pre>
<p>Also check out the docs at <a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen" rel="nofollow">https://docs.python.org/2/library/subprocess.html#subprocess.Popen</a></p>
</div>
<div class="post-text" itemprop="text">
<p>First I would read through the comments <a href="https://unix.stackexchange.com/questions/23111/what-is-the-eval-command-in-bash">here</a> for a good example.</p>
<p>In short, the eval command is evaluating the input vs executing, but for your example, if you running an executable it would be no different than just executing the command from the CLI. The '&amp;' just tells the process to execute in the background. Look at <a href="https://unix.stackexchange.com/questions/86247/what-does-ampersand-mean-at-the-end-of-a-shell-script-line">this</a> for more info.</p>
<p>To execute CLI commands in python you can </p>
<pre><code>import subprocess
</code></pre>
<p>There are three commands that you may want to consider.</p>
<pre><code>subprocess.call()
output = subprocess.check_output()
subprocess.Popen()
</code></pre>
<p>depending on how fine grained you want. For you code, doing something like:</p>
<pre><code>import subprocess

subprocess.call(["/usr/path/exec/file" , "&amp;"])
</code></pre>
<p>should get you going. check_ouput() will return any output from the command and Popen() is for more fine grained control.</p>
</div>
<span class="comment-copy">I see no reason to use eval in that line. Or, indeed, to use parentheses. Afaics, the intent is to run the executable in the background. If there is more stuff on that line, please edit the question.</span>
<span class="comment-copy">What is the difference in bash between using the eval command and just typing a command? Essentially what is the difference between this:      eval "(/usr/path/exec/file) &amp;"  and this:      /usr/path/exec/file</span>
<span class="comment-copy">For the specific example given, typing just the command would work fine. Eval is used when you need to construct a command including arguments in a string. But if I have <code>x='/usr/path/exec/file'</code>, you also don't need "eval" but can just run <code>$x</code>.  eval can also be used to unquote quoted strings.</span>
<span class="comment-copy">Isn't that last line the equivalent of <code>/usr/path/exec/file '&amp;'</code>, thus calling the program not in the background but with <code>&amp;</code> as argument?</span>
