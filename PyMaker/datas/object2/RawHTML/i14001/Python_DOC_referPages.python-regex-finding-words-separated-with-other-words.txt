<div class="post-text" itemprop="text">
<p>Is there a way to use <code>re.findall</code> or another regex method to count the number of occurrences of words in a specified order, separated by an arbitrary number of words?</p>
<p>Here is a "brute force" implementation:</p>
<pre><code>def search_query(query, page):
    count=i=0
    for word in page.split():
            if word == query[i]: i+=1
            if i==len(query): 
                count+=1
                break
    print count

search_query(['hello','kilojoules'],'hello my good friend kilojoules')
1
</code></pre>
<p>for example, when the query is <code>hello kilojoules</code>, I would like to recognize <code>hello my good friend kilojoules</code> as an instance of my query, but for <code>kilojoules is my good friend</code> not to be counted.</p>
<p>Here is my naive attempt at a satisfactory regex: <code>re.findall('hello\s\Skilojoules','hello my friend kilojoules')</code>. This doesn't work. I thought it would work because my understanding of what this says is "find all instances of <code>hello</code> and <code>kilojoules</code> separated by white space or blank space".</p>
</div>
<div class="post-text" itemprop="text">
<p>Let me clarify:</p>
<pre><code>(?s)\bhello\b.*?\bkilojoules\b
</code></pre>
<p>This regex means *match a whole word <strong>hello</strong>, then any character even a whitespace and linebreak, and then a whole word <strong>kilojoules</strong>.</p>
<p>If you do not have linebreaks, and if you do not care about whole word match, use</p>
<pre><code>hello.*?kilojoules
</code></pre>
<p>Note that <code>\s\S</code> is just a whitespace followed with a non-whitespace. Thus, <code>hello\s\Skilojoules</code> can match <code>hello bkilojoules</code>, but not <code>hello kilojoules</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have found success in <code>re.findall('hello.*?kilojoules','a happy hello my amigo kilojoules now goodbye')</code>, following stribizhev's advice</p>
</div>
<span class="comment-copy">Maybe <code>(?s)\bhello\b.*?\bkilojoules\b</code>? Note that <code>\s\S</code> is just a whitespace followed with a non-whitespace. <code>hello\s\Skilojoules</code> can match <code>hello bkilojoules</code>, but not <code>hello kilojoules</code>.</span>
<span class="comment-copy">generic mumble about using <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">raw strings</a> here, unless you love typing the backslash button for whatever reason,</span>
<span class="comment-copy">@stribizhev <code>re.findall('(?s)\bhello\b.*?\bkilojoules\b','hello my amigo kilojoules')</code> returns nothing</span>
