<div class="post-text" itemprop="text">
<p>Given a list of <code>floats</code> <strong>spendList</strong>, I want to apply <code>round()</code> to each item, and either update the list in place with the rounded values, or create a new list.</p>
<p>I'm imagining this employing list comprehension to create the new list (if the original can't be overwritten), but what about the passing of each item to the <code>round()</code>?</p>
<p>I discovered sequence unpacking <a href="https://stackoverflow.com/a/3558606/1389110">here</a> so tried:</p>
<pre><code>round(*spendList,2)
</code></pre>
<p>and got:</p>
<pre><code>TypeError                                 Traceback (most recent call last)
&lt;ipython-input-289-503a7651d08c&gt; in &lt;module&gt;()
----&gt; 1 round(*spendList)

TypeError: round() takes at most 2 arguments (56 given)
</code></pre>
<p>So surmising that <code>round</code> was trying to round each item in the list, I tried:</p>
<pre><code>[i for i in round(*spendList[i],2)]
</code></pre>
<p>and got:</p>
<pre><code>In [293]: [i for i in round(*spendList[i],2)]
  File "&lt;ipython-input-293-956fc86bcec0&gt;", line 1
    [i for i in round(*spendList[i],2)]
SyntaxError: only named arguments may follow *expression
</code></pre>
<p>Can sequence unpacking even be used here? If not, how can this be achieved?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have your <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> the wrong way around:</p>
<pre><code>[i for i in round(*spendList[i],2)]
</code></pre>
<p>should be:</p>
<pre><code>[round(i, 2) for i in spendList]
</code></pre>
<p>You want to iterate over <code>spendList</code>, and apply <code>round</code> to each item in it. There's no need for <code>*</code> (<em>"splat"</em>) unpacking here; that's generally only needed for functions that take an arbitrary number of positional arguments (and, per the error message, <code>round</code> only takes two).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>map()</code> function for this -</p>
<pre><code>&gt;&gt;&gt; lst = [1.43223, 1.232 , 5.4343, 4.3233]
&gt;&gt;&gt; lst1 = map(lambda x: round(x,2) , lst)
&gt;&gt;&gt; lst1
[1.43, 1.23, 5.43, 4.32]
</code></pre>
<p>For Python 3.x , you need to use <code>list(map(...))</code> as in Python 3.x <code>map</code> returns an iterator not a list.</p>
</div>
<div class="post-text" itemprop="text">
<p>you could still use the list comprehension you talked aobut, just this way:</p>
<pre><code>list = [1.1234, 4.556567645, 6.756756756, 8.45345345]
new_list = [round(i, 2) for i in list]
</code></pre>
<p>new_list will be:
[1.12, 4.56, 6.76, 8.45]</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow noreferrer">docs.python.org/2/library/functions.html#map</a> ...or a list comprehension as you say</span>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/questions/36901/what-does-double-star-and-star-do-for-python-parameters" title="what does double star and star do for python parameters">stackoverflow.com/questions/36901/â€¦</a></span>
<span class="comment-copy">@Anentropic thanks, works. I needed to add a <code>lambda</code> to allow for the arguments that <code>round()</code> takes though: <code>map(lambda x: round(x,2), spendList)</code>. Can map handle these arguments itself somehow?</span>
<span class="comment-copy"><code>spendList[:] = [round(1,2) for i in spendList]</code> will update the original object, you can also use a regular for loop using enumerate</span>
<span class="comment-copy">@Pyderman yes you need the lambda like you did, or a generic way of adding a static argument to function call is <a href="https://docs.python.org/2/library/functools.html#functools.partial" rel="nofollow noreferrer">docs.python.org/2/library/functools.html#functools.partial</a></span>
<span class="comment-copy">The most elegant solution. Had never before considered starting off a list comprehension with a function call. Nice.</span>
<span class="comment-copy">Note that, per <a href="https://docs.python.org/3/whatsnew/3.0.html#views-and-iterators-instead-of-lists" rel="nofollow noreferrer">the introduction of the <code>map</code> iterator</a> (emphasis mine): <i>"a quick fix is to wrap <code>map()</code> in <code>list()</code>, e.g. <code>list(map(...))</code>, <b>but a better fix is often to use a list comprehension</b>"</i>.</span>
<span class="comment-copy">And in particular, if you're using a lambda with <code>map</code> then the list comprehension is likely to be more readable. <code>[round(x,2) for x in lst]</code></span>
<span class="comment-copy">@Anand I had just figured out that I needed <code>lamdba</code> or something similar to allow for the rounding; you just beat me to adding my a comment thereof. Thanks.</span>
