<div class="post-text" itemprop="text">
<pre><code>res = db.execute("""
SELECT CAST ((SUM(r.SalesVolume)/1000.0) AS decimal(6,1))
FROM RawData r
INNER JOIN Product p
ON r.ProductId = p.ProductId 
INNER JOIN Calendar c
ON r.DayId = c.DayId
WHERE c.WeekCodeInYear BETWEEN 1 AND 12
AND 
c.YearId = 2014
AND p.Distributor IN (%s)
GROUP BY c.WeekCodeInYear """ % _studios)
</code></pre>
<p><code>_studios</code> is a Python list and is a part of a JSON object. It can be read as:</p>
<pre><code>["WARNER","TF1","GAUMONT","PATHE","STUDIOCANAL","FRANCETV","M6SND"]
</code></pre>
<p>However when I try and execute this I get an error:</p>
<pre><code>ProgrammingError: (ProgrammingError) (207, "Invalid column name 'u'WARNER', u'TF1', 
u'GAUMONT', u'PATHE', u'STUDIOCANAL', u'FRANCETV', u'M6SND''.DB-Lib error message 20018, 
severity 16:\nGeneral SQL Server error: Check messages from the SQL
</code></pre>
<p>The Database however has all the columns specified. I guess it has to do with the format. Not sure though.</p>
<p>The query when printed in the command prompt can be seen as:</p>
<pre><code>SELECT CAST ((SUM(r.SalesVolume)/1000.0) AS decimal(6,1))
FROM RawData r
INNER JOIN Product p
ON r.ProductId = p.ProductId
INNER JOIN Calendar c
ON r.DayId = c.DayId
WHERE c.WeekCodeInYear BETWEEN 1 AND 12
AND
c.YearId = 2014
AND p.Distributor IN ([u'WARNER', u'TF1', u'GAUMONT', u'PATHE', u'STUDIOCANAL',
u'FRANCETV', u'M6SND'])
GROUP BY c.WeekCodeInYear
</code></pre>
<p>I notice the <code>[</code> <code>]</code> in the <code>p.distributor</code> line which is the probably issue?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is indeed the issue. You're using the <code>__repr__</code> version of the list. Instead, use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow">str.join</a> function to make it into a usable string, combined with a list comprehension to quote the strings:</p>
<pre><code>"""SELECT CAST ((SUM(r.SalesVolume)/1000.0) AS decimal(6,1))
FROM RawData r
INNER JOIN Product p
ON r.ProductId = p.ProductId
INNER JOIN Calendar c
ON r.DayId = c.DayId
WHERE c.WeekCodeInYear BETWEEN 1 AND 12
AND
c.YearId = 2014
AND p.Distributor IN ({})
GROUP BY c.WeekCodeInYear """.format(', '.join(["'" + studio + "'" for studio in _studios]))
</code></pre>
<p>This, however, becomes very hard to maintain and read if there's more complex queries with more parameters. The above solution's format statement is already hard to understand, this will get only worse.</p>
<p>It is also vulnerable to SQL injection, as roippi has pointed out. They are also right with their suggestion to use parametrized queries.</p>
</div>
<span class="comment-copy">This is trivially vulnerable to injection attacks, even in the "fixed" version where you concatenate the list into a comma-delimited string.  Use whatever parameterized query implementation your SQL API provides.</span>
<span class="comment-copy">This converts the string as <code>("WARNER", "TF1", "GAUMONT", "PATHE", "STUDIOCANAL", "FRANCTV", "M6SND")</code>. So basically the double quotes dont work no? What I need is <code>('WARNER', 'TF1', 'GAUMONT', 'PATHE', 'STUDIOCANAL', 'FRANCTV', 'M6SND')</code></span>
<span class="comment-copy">Whoops, overlooked your requirement there, but I've fixed it now. :)</span>
<span class="comment-copy">Now this solution doesnot read the string at all :( The previous one read the string but with <code>"</code></span>
<span class="comment-copy">Works for me with Python 2.7 and 3.4, what problem do you have?</span>
<span class="comment-copy">Works now! Probably some sytax issue from my end. But yes I have about 5 more parameters to add. In that case this solution would become infeasible?</span>
