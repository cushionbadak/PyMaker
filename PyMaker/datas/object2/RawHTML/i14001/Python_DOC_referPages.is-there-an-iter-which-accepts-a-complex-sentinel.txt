<div class="post-text" itemprop="text">
<p>I use <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter</code></a> with two arguments and was wondering if there is an equivalent which would accept a more complex sentinel? </p>
<p>As an example, in the code below</p>
<pre><code># returns digits 1 to 10 upon subsequently calling .create(), 
# then returns 'END' each time afterwards
class MyClass:
    def __init__(self):
        self.counter = 0
    def create(self):
        self.counter += 1
        if self.counter &gt; 10:
            return 'END'
        else:
            return self.counter

c = MyClass()
for i in iter(c.create, 'END'):
    print(i)
</code></pre>
<p>the iteration ends upon getting <code>'END'</code>. I would like to have it end after getting, say, a total of two <code>'END'</code> (not necessarily one after the other - the code above will generate only <code>'END'</code> after the first ten calls but one can imagine a case where they are interlaced with other values). </p>
<p><strong>In essence, I am looking for a way to use a more complex sentinel.</strong> Is there such a concept?</p>
<p>I know I can resort to the obvious-but-ugly code mentioned in a <a href="https://stackoverflow.com/questions/31393276/how-to-get-chunks-of-elements-from-a-queue">previous question</a>, hovewer @HappyLeapSecond answer is so elegant I would like to keep the spirit (I went though <a href="https://docs.python.org/3.5/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> but none of the available methods seem to do the job)</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/2/library/itertools.html#itertools.takewhile" rel="nofollow"><code>itertools.takewhile</code></a> with a stateful <code>predicate</code>. For example:</p>
<pre><code>&gt;&gt;&gt; from itertools import takewhile
&gt;&gt;&gt; def create_predicate(func, max_count):
    """Return False only when func evaluates True for the max_count time."""
    def predicate(elem):
        if func(elem):
            predicate.count += 1
        if predicate.count == max_count:
            return False
        return True
    predicate.count = 0
    return predicate

&gt;&gt;&gt; list(takewhile(create_predicate(lambda elem: elem % 3 == 0, 3), range(1, 20)))
[1, 2, 3, 4, 5, 6, 7, 8]
</code></pre>
<p>In the example above, <code>create_predicate(lambda elem: elem % 3 == 0, 3)</code> creates a complex predicate function that will stop the iteration on the third multiple of three. In your case,</p>
<blockquote>
<p>I would like to have it end after getting, say, a total of two <code>'END'</code></p>
</blockquote>
<p>you could use <code>create_predicate(lambda elem: elem == 'END', 2)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It could be done using a generator:</p>
<pre><code>class MyClass:
    def __init__(self):
        self.counter = 0
    def create(self, func, number):
        while number:
            self.counter += 1
            if func(self.counter):
                yield 'END'
                number -= 1
            else:
                yield self.counter
</code></pre>
<p>Here's how it works:</p>
<pre><code>&gt;&gt;&gt; def foo(n):
    return n % 3 == 0
&gt;&gt;&gt; c = MyClass()
&gt;&gt;&gt; for i in c.create(foo, 3):
    print(i)

1
2
END
4
5
END
7
8
END
</code></pre>
<p>I think this keeps things fairly simple (possibly too simple for your use case but your example is quite simple). </p>
</div>
