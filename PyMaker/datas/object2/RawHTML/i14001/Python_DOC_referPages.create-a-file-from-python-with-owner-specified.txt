<div class="post-text" itemprop="text">
<p>I am trying to create a file on linux with the owner:group predefined from a python script.</p>
<p>The problem is that the python script runs as root and I cant do the owner setting in 2 steps:</p>
<pre><code>subprocess.call("cp a b", shell=True)
subprocess.call("chown user:group b", shell=True)
</code></pre>
<p>as the file creation has to trigger another process via incron that works on the file ownership . If I do it in 2 steps it always trigger a process as root (from the first cp);which I dont want </p>
<p>In short is there a simple way to create a file with the owner and group set at the creation time itself from a python process running as root .</p>
</div>
<div class="post-text" itemprop="text">
<p>You can change the current process effective uid and gid, but the new user must have read access to the file you are copying from. Is that OK?</p>
<pre><code>import os
import shutil

gid = 20      # Target group id
uid = 501     # Target user id

os.setegid(gid)
os.seteuid(uid)

from_file = '/var/root/rootfile'       # File to copy from (tested on OS X)
to_file = 'rootfile'                   # Filename to copy to
shutil.copyfile(from_file, to_file)

# Switch back to root
os.setegid(0)
os.seteuid(0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>OK, this is not a python but a UNIX problem: </p>
<p>A file is, by default, always created owned by the user of the creating process.</p>
<p>As root, you can change your effective UID for such operation, and you can change the file ownership afterwards.</p>
<p><code>cp</code> supports keeping the original owner: <code>cp -a</code> This might already solve your problem.</p>
<p>Setting the UID in your python process is really trivial:</p>
<pre><code>import os
os.setuid(&lt;userid&gt;)
</code></pre>
</div>
<span class="comment-copy"><code>subprocess.call("cp a b;chown user:group b", shell=True)</code> ?</span>
<span class="comment-copy"><code>subprocess.call("""su -c 'cp a b' user:group"""", shell=True)</code> ?</span>
<span class="comment-copy">There is no need to use a shell and call these external programs, they are all available in Python.  For file copying see: <a href="https://docs.python.org/2/library/shutil.html" rel="nofollow noreferrer">docs.python.org/2/library/shutil.html</a> and for <code>chown</code>: <a href="https://docs.python.org/2/library/os.html" rel="nofollow noreferrer">docs.python.org/2/library/os.html</a>.</span>
<span class="comment-copy">@cdarke, nice approach. Thanks to help us to keep open mind. We will wait for OP to know why he circumvented shutil and os python libraries.</span>
<span class="comment-copy">Will use os. for copying . checking if @cdarke 's code works flawless in my situation . cant use cp -a as the owner will be different for different runs of the code and will be almost completly different from the owner of the file to be copied from.</span>
<span class="comment-copy">Thanks this worked .</span>
<span class="comment-copy">For completeness: If the target user does not have read access, you can make a <a href="http://docs.python.org/3/library/tempfile.html" rel="nofollow noreferrer">temporary copy of it</a> and make that readable by the target user.  If it's short enough, you can just pull it into memory.</span>
<span class="comment-copy">If you're root, <code>setuid</code> is a bad idea because it will set real and saved UID as well.  On Linux, you can use <code>setresuid</code>, and on other systems <code>seteuid</code> should work.</span>
<span class="comment-copy">I think @marcusMÃ¼ller shoted too fast ;) Still some question comments not answered by OP.</span>
<span class="comment-copy">@danihp Ah well, I never shoot too fast :) By principle! Kevin does have a point, though.</span>
