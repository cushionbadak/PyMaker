<div class="post-text" itemprop="text">
<p>this code will print the whole number of lines, total words and total number of characters in a text file. It is working fine and giving expected output. But I want to count the number of characters in each line and print like this :- </p>
<pre><code>Line No. 1 has 58 Characters
Line No. 2 has 24 Characters
</code></pre>
<p>Code :- </p>
<pre><code>import string
def fileCount(fname):
    #counting variables
    lineCount = 0
    wordCount = 0
    charCount = 0
    words = []

    #file is opened and assigned a variable
    infile = open(fname, 'r')

    #loop that finds the number of lines in the file
    for line in infile:
        lineCount = lineCount + 1
        word = line.split()
        words = words + word

    #loop that finds the number of words in the file
    for word in words:
        wordCount = wordCount + 1
        #loop that finds the number of characters in the file
        for char in word:
            charCount = charCount + 1
    #returns the variables so they can be called to the main function        
    return(lineCount, wordCount, charCount)

def main():
    fname = input('Enter the name of the file to be used: ')
    lineCount, wordCount, charCount = fileCount(fname)
    print ("There are", lineCount, "lines in the file.")
    print ("There are", charCount, "characters in the file.")
    print ("There are", wordCount, "words in the file.")
main()
</code></pre>
<p>As</p>
<pre><code>for line in infile:
    lineCount = lineCount + 1 
</code></pre>
<p>is counting the whole lines, but how to take the each line for this operation? 
I am using Python 3.X</p>
</div>
<div class="post-text" itemprop="text">
<p>Store all the info in a dict then access by key. </p>
<pre><code>def fileCount(fname):
    #counting variables
    d = {"lines":0, "words": 0, "lengths":[]}
    #file is opened and assigned a variable
    with open(fname, 'r') as f:
        for line in f:
            # split into words
            spl = line.split()
            # increase count for each line
            d["lines"] += 1
            # add length of split list which will give total words
            d["words"] += len(spl)
            # get the length of each word and sum
            d["lengths"].append(sum(len(word) for word in spl))
    return d

def main():
    fname = input('Enter the name of the file to be used: ')
    data = fileCount(fname)
    print ("There are {lines} lines in the file.".format(**data))
    print ("There are {} characters in the file.".format(sum(data["lengths"])))
    print ("There are {words} words in the file.".format(**data))
    # enumerate over the lengths, outputting char count for each line
    for ind, s in enumerate(data["lengths"], 1):
        print("Line: {} has {} characters.".format(ind, s))
main()
</code></pre>
<p>The code will only work for words delimited by whitespace so that is something you need to keep in mind.</p>
</div>
<div class="post-text" itemprop="text">
<p>Define a <code>set</code> of the allowed characters that you wish to count and then you can use <code>len</code> to get most of the data.<br/>
Below, I have chosen the character set:</p>
<p>['!', '"', '#', '$', '%', '&amp;', "'", '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '&lt;', '=', '&gt;', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~']</p>
<pre><code>#Define desired character set
valid_chars = set([chr(i) for i in range(33,127)])
total_lines = total_words = total_chars = 0
line_details = []

with open ('test.txt', 'r') as f:
    for line in f:
        total_lines += 1
        line_char_count = len([char for char in line if char in valid_chars])
        total_chars += line_char_count
        total_words += len(line.split())
        line_details.append("Line %d has %d characters" % (total_lines, line_char_count))

print ("There are", total_lines, "lines in the file.")
print ("There are", total_chars, "characters in the file.")
print ("There are", total_words, "words in the file.")
for line in line_details:
    print (line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I was assigned the task of creating a program that prints the number of characters in a line.</p>
<p>As a noob to programming, I found this was very difficult :(.</p>
<p>Here is what I came up with, as well as his response -</p>
<p>Here’s the core part of your program:</p>
<pre><code>with open ('data_vis_tips.txt', 'r') as inFile:
    with open ('count_chars_per_line.txt', 'w') as outFile:
        chars = 0
            for line in inFile:
                line = line.strip('\n')
                chars = len(line)
                outFile.write(str(len(line))+'\n')
</code></pre>
<p>It could be simplified to this:</p>
<pre><code>with open ('data_vis_tips.txt', 'r') as inFile:
    for line in inFile:
        line = line.strip()
        num_chars = len(line)
        print(num_chars)
</code></pre>
<p>Note that the argument to the strip() function isn’t required; it strips whitespace by default, and ‘\n’ is whitespace.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an easier version using the builtin <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer"><code>collections.Counter</code></a> which is a specialized dict which counts its inputs. We can use <code>Counter.update()</code> method to  slurp in all words (unique or not) on each line:</p>
<pre><code>from collections import Counter

def file_count_2(fname):

    line_count = 0
    word_counter = Counter()

    infile = open(fname, 'r')
    for line in infile:
        line_count += 1
        word_counter.update( line.split() )

    word_count = 0
    char_count = 0

    for word, cnt in word_counter.items():
        word_count += cnt
        char_count += cnt * len(word)

    print(word_counter)

    return line_count, word_count, char_count
</code></pre>
<p>Notes:</p>
<ul>
<li>I tested this and it gives identical counts to your code</li>
<li>it will be way faster since you're not iteratively appending to a list <code>words</code> (better to just hash the unique words only and store their counts, which is what Counter does), and also no need to iterate and increment charCount every time we see an occurrence of a word.</li>
<li>if you only wanted <code>word_count</code> not <code>char_count</code>, you could just directly take <code>word_count = sum(word_counter.values())</code> without needing to iterate over <code>word_counter</code></li>
</ul>
</div>
<span class="comment-copy">You may use <code>len</code> function.</span>
<span class="comment-copy">But len will count the spaces and tabs as well. Also, how to apply it for each line? I need another loop.</span>
<span class="comment-copy"><code>len(re.findall(r'\S', line))</code></span>
<span class="comment-copy">there is no need to use a regex for this</span>
<span class="comment-copy">Python has a super-useful builtin <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer"><code>collections.Counter</code></a> which is a specialized dict which counts its inputs. See my answer. Shorter code and more performant because no need to iteratively append to your list <code>words</code></span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer"><code>collections.Counter</code></a> is a specialized dict which counts its input.</span>
<span class="comment-copy">PS naming <code>word_count</code>, <code>line_count</code> etc. is more Pythonic (PEP-8 format) than <code>wordCount</code>, <code>lineCount</code>; we only use CamelCase for class names, not variables, functions or methods.</span>
<span class="comment-copy">Whilst this answer is probably more efficient than the original code, it does not answer the question "how to count and print the number of characters in each line".</span>
<span class="comment-copy">@RolfofSaxony: it actually does, <a href="https://stackoverflow.com/posts/31370809/revisions">per OP's original title and code example. The title edit was mine, not theirs, trying to capture their intent</a>. I have now fixed it to make it clear <i>"every word of every line"</i> not <i>"each word of each line"</i></span>
<span class="comment-copy">from the question: "Line No. 1 has 58 Characters Line No. 2 has 24 Characters" ??</span>
<span class="comment-copy">@RolfofSaxony: ah, I took the OP's code as a spec of what they wanted, and cleaned it up. But they wanted to extend it to counting within each line. Let me correct my code...</span>
