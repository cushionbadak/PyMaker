<div class="post-text" itemprop="text">
<p>I feel bad for asking <em>yet</em> another regex question, but this has been driving me crazy for the past week.</p>
<p>I am trying to use regular expressions in python to replace some text that looks like this:</p>
<pre><code>text = """some stuff
line with text
other stuff
[code language='cpp']
#include &lt;cstdio&gt;

int main() {
    printf("Hello");
}
[/code]
Maybe some
other text"""
</code></pre>
<p>What I want to do is capture the text inside the <code>[code]</code> tags, add a tab (<code>\t</code>) in front of each line and then replace all the <code>[code]...[/code]</code> by this new lines with the tabs prepended. That is, I want the result to look like:</p>
<pre><code>"""some stuff
line with text
other stuff

    #include &lt;cstdio&gt;

    int main() {
        printf("Hello");
    }

Maybe some
other text"""
</code></pre>
<p>I am using the following snippet.</p>
<pre><code>class CodeParser(object):
    """Parse a blog post and turn it into markdown."""

    def __init__(self):
        self.regex = re.compile('.*\[code.*?\](?P&lt;code&gt;.*)\[/code\].*',
                                re.DOTALL)

    def parse_code(self, text):
        """Parses code section from a wp post into markdown."""
        code = self.regex.match(text).group('code')
        code = ['\t%s' % s for s in code.split('\n')]
        code = '\n'.join(code)
        return self.regex.sub('\n%s\n' % code, text)
</code></pre>
<p>The problem with this is that it matches all the characters before and after the <code>code</code> tags because of the initial and final <code>.*</code> and when I perform the replacement, these are removed. If I remove the <code>.*</code>s, the re does not match anything anymore.</p>
<p>I thought this could be a problem with newlines, so I tried replacing all the <code>'\n'</code> with, say, <code>'¬'</code>, performing the matching, and then changing the <code>'¬'</code> back to <code>'\n'</code>, but I didn't have any luck with this approach.</p>
<p>If anyone has a better method of accomplishing what I want to accomplish, I am open to suggestions.</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're on the right track. 
Instead of regex.match, use regex.search. That way you can get rid of the leading and trailing <code>.*s</code>.</p>
<pre><code>Try this:
    def __init__(self):
        self.regex = re.compile('\[code.*?\](?P&lt;code&gt;.*)\[/code\]',
                                re.DOTALL)


    def parse_code(self, text):
        """Parses code section from a wp post into markdown."""
        # Here we are using search which finds the pattern anywhere in the 
        # string rather than just at the beginning
        code = self.regex.search(text).group('code')
        code = ['\t%s' % s for s in code.split('\n')]
        code = '\n'.join(code)

        return self.regex.sub('\n%s\n' % code, text)
</code></pre>
</div>
<span class="comment-copy">Thank you! I should have kept reading on the docs a little bit further down... It's <a href="https://docs.python.org/3/howto/regex.html#match-versus-search" rel="nofollow noreferrer">right there</a></span>
