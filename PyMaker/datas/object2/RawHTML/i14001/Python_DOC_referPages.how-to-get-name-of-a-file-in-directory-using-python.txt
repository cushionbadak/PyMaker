<div class="post-text" itemprop="text">
<p>There is an mkv file in a folder named "<code>export</code>". What I want to do is to make a python script which fetches the file name from that export folder.
Let's say the folder is at "<code>C:\Users\UserName\Desktop\New_folder\export</code>".</p>
<p>How do I fetch the name?</p>
<p>I tried using this <code>os.path.basename</code> and <code>os.path.splitext</code> .. well.. didn't work out like I expected.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/os.path.html" rel="nofollow noreferrer"><code>os.path</code></a> implements some useful functions on pathnames. But it doesn't have access to the contents of the path. For that purpose, you can use <code>os.listdir</code>.</p>
<p>The following command will give you a list of the contents of the given path:</p>
<pre><code>os.listdir("C:\Users\UserName\Desktop\New_folder\export")
</code></pre>
<p>Now, if you just want <code>.mkv</code> files you can use <a href="https://docs.python.org/2/library/fnmatch.html" rel="nofollow noreferrer"><code>fnmatch</code></a>(<em>This module provides support for Unix shell-style wildcards</em>) module to get your expected file names:</p>
<pre><code>import fnmatch
import os

print([f for f in os.listdir("C:\Users\UserName\Desktop\New_folder\export") if fnmatch.fnmatch(f, '*.mkv')])
</code></pre>
<p>Also as @Padraic Cunningham mentioned as a more pythonic way for dealing with file names you can use <code>glob</code> module :</p>
<pre><code>map(path.basename,glob.iglob(pth+"*.mkv"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I assume you're basically asking how to list files in a given directory. What you want is:</p>
<pre><code>import os
print os.listdir("""C:\Users\UserName\Desktop\New_folder\export""")
</code></pre>
<p>If there's multiple files and you want the one(s) that have a .mkv end you could do:</p>
<pre><code>import os
files = os.listdir("""C:\Users\UserName\Desktop\New_folder\export""")
mkv_files = [_ for _ in files if _[-4:] == ".mkv"]
print mkv_files
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/glob.html" rel="nofollow">glob</a>:</p>
<pre><code>from glob import glob

pth ="C:/Users/UserName/Desktop/New_folder/export/"
print(glob(pth+"*.mkv"))
</code></pre>
<p><code>path+"*.mkv"</code> will match all the files ending with <code>.mkv</code>.</p>
<p>To just get the basenames you can use map or a list comp with iglob:</p>
<pre><code>from glob import iglob

print(list(map(path.basename,iglob(pth+"*.mkv"))))


print([path.basename(f) for f in  iglob(pth+"*.mkv")])
</code></pre>
<p>iglob returns an iterator so you don't build a list for no reason.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are searching for recursive folder search, this method will help you to get filename using <code>os.walk</code>, also you can get those file's path and directory using this below code.</p>
<pre><code>import os, fnmatch
for path, dirs, files in os.walk(os.path.abspath(r"C:/Users/UserName/Desktop/New_folder/export/")):
    for filename in fnmatch.filter(files, "*.mkv"):
        print(filename)
</code></pre>
</div>
<span class="comment-copy">Why didn't <code>os.path.basename</code> work? Can you show an example code in which it didn't work?</span>
<span class="comment-copy">Can you paste your code.</span>
<span class="comment-copy">thanx.. worked like a charm.. :) thanx a ton :)</span>
<span class="comment-copy">if you were going to use os.listdir, <code>if f.endswith(".mkv")</code> would be sufficient</span>
<span class="comment-copy">@PadraicCunningham Yeah there are some ways for this task but as you can see in <a href="https://docs.python.org/2/library/fnmatch.html" rel="nofollow noreferrer">docs.python.org/2/library/fnmatch.html</a> and also since it used Unix shell-style wildcards I think its more pythonic and faster than other ways! what you think?</span>
<span class="comment-copy"><code>map(path.basename,iglob(pth+"*.mkv"))</code> will be faster and more memory efficient</span>
<span class="comment-copy">.endswith is also faster</span>
<span class="comment-copy">ohh.. thank you.. :)</span>
<span class="comment-copy">Thank you. I'm use your code like this =&gt;      def list_images(input_dir):         return list(map(os.path.abspath, iglob(input_dir + "\\" + "*.jpg")))</span>
