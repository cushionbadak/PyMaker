<div class="post-text" itemprop="text">
<p><a href="https://www.python.org/dev/peps/pep-0492/">PEP 0492</a> adds the <code>async</code> keyword to Python 3.5. </p>
<p>How does Python benefit from the use of this operator? The example that is given for a coroutine is </p>
<pre><code>async def read_data(db):
    data = await db.fetch('SELECT ...')
</code></pre>
<p>According to the docs this achieves </p>
<blockquote>
<p>suspend[ing] execution of read_data coroutine until db.fetch awaitable completes and returns the result data.</p>
</blockquote>
<p>Does this <code>async</code> keyword actually involve creation of new threads or perhaps the use of an existing reserved async thread? </p>
<p>In the event that <code>async</code> does use a reserved thread, is it a single shared thread each in their own?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, co-routines do not involve any kind of threads. Co-routines allow for <em>cooperative</em> multi-tasking in that each co-routine yields control voluntarily. Threads on the other hand switch between units at arbitrary points.</p>
<p>Up to Python 3.4, it was possible to write co-routines using <em>generators</em>; by using <code>yield</code> or <code>yield from</code> expressions in a function body you create a generator object instead, where code is only executed when you iterate over the generator. Together with additional event loop libraries (such as <a href="https://docs.python.org/3/library/asyncio.html"><code>asyncio</code></a>) you could write co-routines that would signal to an event loop that they were going to be busy (waiting for I/O perhaps) and that another co-routine could be run in the meantime:</p>
<pre><code>import asyncio
import datetime

@asyncio.coroutine
def display_date(loop):
    end_time = loop.time() + 5.0
    while True:
        print(datetime.datetime.now())
        if (loop.time() + 1.0) &gt;= end_time:
            break
        yield from asyncio.sleep(1)
</code></pre>
<p>Every time the above code advances to the <code>yield from asyncio.sleep(1)</code> line, the event loop is free to run a different co-routine, because this routine is not going to do anything for the next second <em>anyway</em>.</p>
<p>Because generators can be used for all sorts of tasks, not just co-routines, and because writing a co-routine using generator syntax can be confusing to new-comers, the PEP introduces new syntax that makes it <em>clearer</em> that you are writing a co-routine.</p>
<p>With the PEP implemented, the above sample could be written instead as:</p>
<pre><code>async def display_date(loop):
    end_time = loop.time() + 5.0
    while True:
        print(datetime.datetime.now())
        if (loop.time() + 1.0) &gt;= end_time:
            break
        await asyncio.sleep(1)
</code></pre>
<p>The resulting <em><code>coroutine</code></em> object still needs an event loop to drive the co-routines; an event loop would <code>await</code> on each co-routine in turn, which would execute those co-routines that are not currently <code>await</code>ing for something to complete.</p>
<p>The advantages are that with native support, you can also introduce additional syntax to support asynchronous context managers and iterators. Entering and exiting a context manager, or looping over an iterator then can become more points in your co-routine that signal that other code can run instead because something is waiting again.</p>
</div>
<span class="comment-copy">Co-routines do not use threads.</span>
<span class="comment-copy">So in this case, how does Python achieve any benefit out of suspending executions in comparison to a generator?</span>
<span class="comment-copy">Note that the PEP only aims to make certain patterns easier to code; no new functionality is introduced with the syntax. Co-routines <i>cooperate</i> in that they allow switching between tasks at pre-defined points (rather than threads which switch execution between different units at arbitrary points).</span>
<span class="comment-copy">Any case there's a proper motivation behind not implementing async generators based on AsyncInterator as part of built-in syntax with yields?</span>
<span class="comment-copy">That's something you'll need to discuss on the Python-ideas list, SO comments are not a good medium for that.</span>
<span class="comment-copy">@MartijnPieters I'm having a hard time understanding asyncio, still. Given your example, the output is something like <code>2016-03-04 11:53:48.282701</code> with a new printed line every 1 second. Wouldn't that mean your program is hung up while <code>await</code>-ing? I was expecting to see a 1 second delay upon running it, and then a stream of printed datetimes, since the <code>await asyncio.sleep(...)</code> should yield as soon as it realizes it has to wait for "io" (in this case, sleep). IOW, the <code>while</code> loop would continue running quickly, while the <code>await</code>s would eventually catch up. What am I misunderstanding here?</span>
<span class="comment-copy">@orokusaki: the <code>await asyncio.sleep(1)</code> line <b>immediately</b> yields as <i>I'm busy, someone else do something</i>, each time you tried to advance this co-routine, until a full second has passed. It never <i>blocks</i>, it just insta-yields with a special 'waiting' message. Because it doesn't block, the co-routine event loop (which polls all the co-routines to find one that is <i>not</i> busy waiting) can run a different co-routine. It can 'poll' this co-routine as often as it likes, but that <code>await</code> line won't continue the rest of the code until the 1 second time has passed.</span>
<span class="comment-copy">@orokusaki: a proper awaitable takes care of these details for you; e.g. will in turn poll for results from PostgreSQL and unblock with a 'waiting' signal if no results are available yet. The PEP also defines <a href="https://www.python.org/dev/peps/pep-0492/#asynchronous-iterators-and-async-for" rel="nofollow noreferrer">awaitable iterators</a> which are ideal for SQL queries where there may be I/O delays between results; the iterable then 'awaits' for those results, unblocking in between.</span>
