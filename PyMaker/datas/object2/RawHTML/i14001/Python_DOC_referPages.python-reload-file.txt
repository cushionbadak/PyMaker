<div class="post-text" itemprop="text">
<p>I have a script that computes some stuff. It uses inputs from a separate file 'inputs.py'.</p>
<p>In 'inputs.py' are only a few variables:</p>
<pre><code>A = 2.3
B = 4.5
C = 3.0
</code></pre>
<p>In the main file I import them with</p>
<pre><code>from inputs import *
</code></pre>
<p>If I now change something in 'inputs.py' and execute the script again it still uses the old values instead of the new ones. How can I reload the file?</p>
<pre><code>reload(inputs)
</code></pre>
<p>does not work.</p>
<p>Many thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using Python 3.x , then to reload the names that have been imported using <code>from module import name</code> , you would need to do -</p>
<pre><code>import importlib
import inputs #import the module here, so that it can be reloaded.
importlib.reload(inputs)
from inputs import A # or whatever name you want.
</code></pre>
<p>For Python 2.x , you can simply do -</p>
<pre><code>import inputs   #import the module here, so that it can be reloaded.
reload(inputs)
from inputs import A # or whatever name you want.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's quote docs:</p>
<blockquote>
<p>reload(module)</p>
<p>Reload a previously imported module. The argument must be a module object, so it must have been successfully imported before. This is
  useful if you have edited the module source file using an external
  editor and want to try out the new version without leaving the Python
  interpreter. The return value is the module object (the same as the
  module argument).</p>
</blockquote>
<p><strong>The argument must be a module object, so it must have been successfully imported before.</strong> When you do <code>from inputs import *</code> you actually has no module object in your namespace. Only module members.</p>
<blockquote>
<p>When reload(module) is executed:</p>
<ul>
<li>Python modules’ code is recompiled and the module-level code reexecuted, defining a new set of objects which are bound to names in
  the module’s dictionary. The init function of extension modules is not
  called a second time.</li>
<li>As with all other objects in Python the old objects are only reclaimed after their reference counts drop to zero.</li>
<li>The names in the module namespace are updated to point to any new or changed objects.</li>
<li>Other references to the old objects (such as names external to the module) are not rebound to refer to the new objects and must be
  updated in each namespace where they occur if that is desired.</li>
</ul>
</blockquote>
<p><strong>Other references to the old objects (such as names external to the module) are not rebound to refer to the new objects and must be updated in each namespace where they occur if that is desired.</strong> You star-imported A, B and C are precisely other references.</p>
<p>To sum up, an example code would be:</p>
<pre><code>import os  # see below

# fake module before changes
with open('inputs.py', 'w') as f:
    f.write("a, b, c = 1, 2, 3")

import inputs

# check if all members are correct
assert inputs.a == 1
assert inputs.b == 2
assert inputs.c == 3

os.unlink('inputs.pyc')  # Remove previously compiled byte-code.
# I'm now sure if it's mandatory, anyway for some reason Python
# does not recompile inputs.py in my experiments. 

# New fake file
with open('inputs.py', 'w') as f:
    f.write("a, b, c = 4, 5, 6")

reload(inputs)

# check if members has changes
assert inputs.a == 4
assert inputs.b == 5
assert inputs.c == 6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from inputs import *
</code></pre>
<p>does something like this pseudo code:</p>
<pre><code>import inputs as temporary
for all names in temporary:
    (name) = temporary.name
del temporary
</code></pre>
<p>The module <code>inputs</code> is cached in <code>sys.modules</code>.</p>
<p>If you do a <code>reload(inputs)</code>, the cached module is reloaded, but the assignment process which loads the data from the imported module to the local name space is not repeated. You have to do so by hand, as the other answer already states.</p>
</div>
<span class="comment-copy">Are you using python 3?</span>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/importlib.html#importlib.reload" rel="nofollow noreferrer"><code>importlib.reload</code></a> if on Python3</span>
<span class="comment-copy">I'm using ipython 2.4.1</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/4111640/how-to-reimport-module-to-python-then-code-be-changed-after-import">how to "reimport" module to python then code be changed after import</a></span>
<span class="comment-copy">Thanks! That works.</span>
