<div class="post-text" itemprop="text">
<p>I have been struggling with this for a few hours now and I can't quite wrap my mind around this... so when I run this it immediately goes into a infinite loop of "Must be a number value" from the exception part of the while block. </p>
<p>The only thing I can think of  is It's going into an infinite loop because its not reading the main(), or my logic is just completely wrong. Why would it be reading one string from within a structure where nothing seems to exist.. the question " How much is the bill?" never even appears(This should be the 1st thing the user sees).. it just goes right into the loop. </p>
<p>I know it must be something really silly that I am missing, but I can't seem to locate why the code is behaving how it is.</p>
<pre><code># what each person pays, catch errors
def payments(bill,ppl):
    try:
        return round((bill/ppl),2)
    except: 
        print ('Invalid Calculation, try again')

#function to calculate tip, catch any errors dealing with percentages
def tip(bill,ppl,perc):
    try:
        return round(((bill * (perc/100))/ppl),2)   
    except: 
        print ('Please retry calculation with valid tip percentage')

'''
    function of body that will 
    ask each question and will catch errors(if any), 
    and continue to loop until valid entry is given
'''

def main():
    print ("How much is the bill?")
    while True:
        try: 
            total_bill = float(raw_input('&gt;&gt; $')) 
            break
        except:
            print("")
            print("Must be a number value")
            print("")
    print("")

    print ("How many people?")
    while True:
        try:
            num_ppl = int(raw_input('&gt;&gt;'))
            break
        except:
            print("")
            print("Must be a number value")
            print("")
        print("")

print ("Tip Percentage?")
while True:
    try:
        perc = int(raw_input('&gt;&gt; %'))
        break
    except:
        print("")
        print("Must be a number value")
        print("")   

print ("")
print ("Calculating Payment...")

    # Create variables to calculate total pay
bill_payment = payments(total_bill,num_ppl)
tip_payment = tip(total_bill,perc,num_ppl)
total_payment = float(bill_payment)+float(tip_payment)

    #print each variable out with totals for each variable
print ('Each Person pays $%s for the bill' % \
      str(bill_payment))
print ('Each Person pays $%s for the tip' % \
      str(tip_payment))
print ('Which means each person will pay a total of $%s' % \
      str(total_payment))


if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>there is a missing indention from line 44 until line 68</li>
<li>if you're using python 3 you should replace raw_input() with input() (<a href="https://docs.python.org/3/whatsnew/3.0.html" rel="nofollow">https://docs.python.org/3/whatsnew/3.0.html</a>)</li>
</ol>
<p>working Python 3 version:</p>
<pre><code> # what each person pays, catch errors
def payments(bill,ppl):
    try:
        return round((bill/ppl),2)
    except: 
        print ('Invalid Calculation, try again')

#function to calculate tip, catch any errors dealing with percentages
def tip(bill,ppl,perc):
    try:
        return round(((bill * (perc/100))/ppl),2)   
    except: 
        print ('Please retry calculation with valid tip percentage')

'''
    function of body that will 
    ask each question and will catch errors(if any), 
    and continue to loop until valid entry is given
'''

def main():
    print ("How much is the bill?")
    while True:
        try: 
            total_bill = float(input('&gt;&gt; $')) 
            break
        except:
            print("")
            print("Must be a number value")
            print("")
    print("")

    print ("How many people?")
    while True:
        try:
            num_ppl = int(input('&gt;&gt;'))
            break
        except:
            print("")
            print("Must be a number value")
            print("")
        print("")

    print ("Tip Percentage?")
    while True:
        try:
            perc = int(input('&gt;&gt; %'))
            break
        except:
            print("")
            print("Must be a number value")
            print("")   

    print ("")
    print ("Calculating Payment...")

        # Create variables to calculate total pay
    bill_payment = payments(total_bill,num_ppl)
    tip_payment = tip(total_bill,perc,num_ppl)
    total_payment = float(bill_payment)+float(tip_payment)

        #print each variable out with totals for each variable
    print ('Each Person pays $%s for the bill' % \
          str(bill_payment))
    print ('Each Person pays $%s for the tip' % \
          str(tip_payment))
    print ('Which means each person will pay a total of $%s' % \
          str(total_payment))


if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems like you have an indentation problem, fromm the line:</p>
<pre><code>print ("Tip Percentage?")
</code></pre>
<p>until the line:</p>
<pre><code>if __name__ == '__main'__:
</code></pre>
<p>the code need to be with more indentation so it will be part of your main.</p>
<p>In addtion, it is better to catch the exception and print its message so you can easily find what cause your exception and fix it,
please change this:</p>
<pre><code>except:
        print("")
        print("Must be a number value")
        print("") 
</code></pre>
<p>To this:</p>
<pre><code>except Exception, e:
        print("")
        print("Must be a number value (err: %s)" % e)
        print("") 
</code></pre>
</div>
<span class="comment-copy">Have you intentionally not indented the lines following <code>print ("Tip Percentage?")</code>?</span>
<span class="comment-copy">please use <code>except ValueError:</code> instead of just <code>except:</code>. You'll get more information about what's wrong in this part (I suspect an exception is thrown for some reason other than a bad floating point value). In particular, reaching the end of the input stream can generate such an infinite loop.</span>
<span class="comment-copy">You really need to fix your indentation, currently it will error not create an infinite loop</span>
<span class="comment-copy">reaching EOF will raise <code>exceptions.EOFError</code> for example</span>
<span class="comment-copy">What is the output?</span>
<span class="comment-copy">Thank you, I needed to change raw_input() --&gt; input(), and I was so tunneled vision by thinking it was something logical , instead of syntactical. I indented the specified lines and cleaned it up. It works perfectly now. Thanks again.</span>
