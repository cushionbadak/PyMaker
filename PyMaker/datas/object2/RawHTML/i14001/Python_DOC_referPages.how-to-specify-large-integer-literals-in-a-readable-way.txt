<div class="post-text" itemprop="text">
<p>I want to specify a sequence of large integers (with many zeros) like:</p>
<pre><code>a = [1e13, 1e14, 1e19, ...]
</code></pre>
<p>My intuition is to use scientific notation. But in python, it's a float instead of integer. Is there a easy way in python to write these integer literals without writing all the zeros, because making sure the number of zeros correct is a nightmare.</p>
<p>I believe I can cast the floats back to integer using <code>int</code>, but just wonder if there is a better way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>*</code> and <code>**</code>, it's not beautiful but gives you the right result.</p>
<pre><code>print(2e10)
20000000000.0

print(2*10**10)
20000000000
</code></pre>
<p>You can also generate a whole list like this:</p>
<pre><code>result = []
for i in range(5):
    result.append(1*10**i)


&gt;&gt;&gt; result
[1, 10, 100, 1000, 10000]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For future viewers.</p>
<p>Since python 3.6 <a href="https://docs.python.org/3.6/whatsnew/3.6.html#pep-515" rel="nofollow"><code>PEP 515</code></a> would be included.</p>
<p>So you can do <code>a = 1_000_000_000_000</code> for better code's readability.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use comma separators for thousands, as a string, then convert to an int.</p>
<pre><code>import locale
locale.setlocale(locale.LC_ALL, 'en_US.UTF-8') 
def bigint(s):
    return locale.atoi(s)

print bigint('1,000,000,000,000')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can setup some suffixes</p>
<pre><code>K=1000
M=K*K
G=K*M
T=K*G
P=K*T
E=K*P
print 12*P
</code></pre>
<p>or use the longer names (kilo, etc).</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this, which avoids float to int conversion issues and is fairly readable in my opinion:</p>
<pre><code>a = map(int, ['1'+'0'*13, '1'+'0'*14, '1'+'0'*19, '1'+'0'*23])
for value in a:
    print(format(value, ','))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>10,000,000,000,000
100,000,000,000,000
10,000,000,000,000,000,000
100,000,000,000,000,000,000,000
</code></pre>
</div>
<span class="comment-copy">Will <code>a = [10 ** 13, 10 ** 14, 10 ** 19]</code> work for you?</span>
<span class="comment-copy">There is no concise way to specify large decimal integer literals in Python (<a href="https://docs.python.org/3/reference/lexical_analysis.html#integer-literals" rel="nofollow noreferrer">grammar spec</a>). If you're lucky, CPython's peephole optimiser will replace <code>10**13</code> with <code>10000000000000</code> at compile time.</span>
<span class="comment-copy">Take care with that float to integer <i>conversion</i> (nitpick: Python doesn't have "casts").  It's not always going to give you exactly the value you expect.  E.g., <code>int(1e23)</code> gives <code>99999999999999991611392</code>.</span>
