<div class="post-text" itemprop="text">
<p>I'm new to python and wanted to know sockets more.</p>
<p>I have 2 test scripts:</p>
<pre><code># server
import socket

connectionListener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

connectionListener.bind(('', 8600 ))
connectionListener.listen(200)

while 1:
    #accept connections from outside
    (clientsocket, address) = connectionListener.accept()
    #now do something with the clientsocket
    #in this case, we'll pretend this is a threaded server
    print clientsocket.recv(64)
    print 'Boom!'
</code></pre>
<p>and: </p>
<pre><code>#client
import socket

connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

connection.connect(('localhost', 8600))
connection.send('hello world!')
</code></pre>
<p>The behaviour of a loop i'm used to is that it would spam <code>Boom!</code> string endlessly. But it's not the case! While loop seems more like event triggered?<br/>
<code>Boom!</code> and <code>hello world!</code> is printed on the connection moment only.
How does it work?</p>
<p>When I leave only</p>
<pre><code>while 1:
    print 'Boom!'
</code></pre>
<p>It behaves "normally" (to what I know)
Can I and how can I control loop behavior?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>socket.accept</code> blocks until a new connection is made. If you'd like to see 'Boom' repeatedly printed, you need to update your client code to repeatedly <code>connect</code>, <code>send</code>, and <code>close</code>. Otherwise, your server will block on the second iteration as it waits for a new connection.</p>
<p>Do something like this:</p>
<pre><code>#client
import socket

connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

while True:
    connection.connect(('localhost', 8600))
    connection.send('hello world!')
    connection.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason you won’t be spammed with “Boom!” lines is that sockets are <em>blocking</em> by default. That means that <code>socket.recv()</code> will halt the execution until something has been received. So while you are using a while loop, the loop isn’t bein repeated over and over because the <code>recv()</code> line stops it.</p>
<p>You can control this behavior using <a href="https://docs.python.org/3/library/socket.html#socket.socket.setblocking" rel="nofollow"><code>socket.setblocking</code></a>, and it’s also possible to set up the socket so blocking methods will timeout, so they won’t block forever. You would want to do the latter if you were dependent on something else running in parallel, but if your program is only there to consume the socket, blocking it forever is just fine, and in fact a good way to keep your processor free.</p>
</div>
<span class="comment-copy"><code>while 1</code>. Well, I guess that beats  bash's <code>while :</code> in readability, but not by much.</span>
<span class="comment-copy">got confused. its <code>.recv</code> (as other question states) or <code>.accept</code>?</span>
<span class="comment-copy">@Gacek -- either one. You can either repeatedly disconnect or connect to the server and repeatedly accept, or repeatedly send data and recv.</span>
<span class="comment-copy">Moved <code>.accept</code> out of loop. It was waiting before loop. when loop started it behan spamming <code>Boom!</code>.</span>
<span class="comment-copy">@Gacek -- super! Sounds good.</span>
<span class="comment-copy">right, blocking and waiting not event triggered... stupid of me. So basically i can't, in one program, setup 2 listening ports? (like 2 whiles?)</span>
<span class="comment-copy">tested, it's <code>.accept</code> blocking not <code>.recv</code></span>
