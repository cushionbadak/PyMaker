<div class="post-text" itemprop="text">
<p>I am running into a weird problem.  I load all usernames from the database, then I replace any space found in the username with nothing, so it gets remove.  but it's not working, the space stays there! Here is my code</p>
<pre><code>users = User.query.all()
for u in users:
  username = u.username
  print (username)
  new_username = username.replace(" ","")
  print (new_username)
</code></pre>
<p>as an exemple, the first print returns:
"MavNandi 7"
and the second return the same
"MavNandi 7"</p>
<p>The space stays there.  I am baffled.  Any clue?</p>
</div>
<div class="post-text" itemprop="text">
<p>You almost certainly have a string with a space variant in it, not the bog-standard <a href="https://codepoints.net/U+0020" rel="nofollow">U+0020 SPACE</a> but more likely <a href="https://codepoints.net/U+00a0" rel="nofollow">U+00A0 NO-BREAK SPACE</a>. The two characters look exactly the same when printed:</p>
<pre><code>&gt;&gt;&gt; 'MavNandi\xa07'
'MavNandi\xa07'
&gt;&gt;&gt; print('MavNandi\xa07')
MavNandi 7
</code></pre>
<p>There may be others; the Unicode stardard defines <a href="https://codepoints.net/search?gc=Zs" rel="nofollow">17 space separators</a> for example, many of these look like a regular space (with varying width).</p>
<p>As you can see the interpreter, when echoing the value uses the <code>\xa0</code> escape sequence to differentiate the two. You can produce the same output by using the <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow"><code>repr()</code> function</a> when printing:</p>
<pre><code>&gt;&gt;&gt; print(repr('MavNandi\xa07'))
'MavNandi\xa07'
</code></pre>
<p>There is also a <a href="https://docs.python.org/3/library/functions.html#ascii" rel="nofollow"><code>ascii()</code> function</a>, this works just like <code>repr()</code> but replaces any character outside the ASCII range with an escape sequence, making it perhaps easier to see combining characters and distinguish between Unicode glyphs that would otherwise look alike.</p>
<p>You could use a regular expression to replace all whitespace characters, including no-break spaces, tabs, newlines and anything else the Unicode standard designates as whitespace:</p>
<pre><code>import re

username = re.sub('\s+', '', username)
</code></pre>
<p>The <code>\s</code> character class matches any such whitespace character, the <code>+</code> matches 1 or more such character when replacing; the second argument replaces all such matches with the empty string.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub('\s+', '', 'MavNandi\xa07')
'MavNandi7'
</code></pre>
</div>
<span class="comment-copy">What is the actual value? What does <code>print(ascii(new_username))</code> produce? Most likely it is not a regular space, it is probably a non-breaking space.</span>
<span class="comment-copy">try <code>username.strip()</code>.</span>
<span class="comment-copy">@Shreevardhan <code>strip</code> only looks at leading and trailing whitespace; and even if that worked here, it would not solve the problem of understanding what’s going on.</span>
<span class="comment-copy">Thanks for the print(ascii(  tip, it indeed showed it was not a regular space.  MavNandi\xa07</span>
<span class="comment-copy">Additionally, you could try using the python debugger to step through you application and print the value of each variable to see if it is indeed a "normal space" you're trying to delete.  Here's a <a href="http://web.stanford.edu/class/physics91si/2013/handouts/Pdb_Commands.pdf" rel="nofollow noreferrer">link</a> if you're interested.</span>
<span class="comment-copy">That was it, printing the ascii value indeed showed MavNandi\xa07.  The regular expression solved the problem .  Thanks! :)  Learned something new today, there are different type of spaces... who knew!</span>
