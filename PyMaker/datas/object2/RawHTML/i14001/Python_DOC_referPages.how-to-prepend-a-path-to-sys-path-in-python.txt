<div class="post-text" itemprop="text">
<p><strong>Problem description:</strong></p>
<p>Using pip, I upgraded to the latest version of <a href="http://docs.python-requests.org/en/latest/" rel="nofollow noreferrer">requests</a> (version 2.7.0, with <code>pip show requests</code> giving the location <code>/usr/local/lib/python2.7/dist-packages</code>). When I <code>import requests</code> and print <code>requests.__version__</code> in the interactive command line, though, I am seeing version 2.2.1. It turns out that Python is using the pre-installed Ubuntu version of requests (<code>requests.__file__</code> is <code>/usr/lib/python2.7/dist-packages/requests/__init__.pyc</code> -- not <code>/user/local/lib/...</code>).</p>
<p>From my investigation, this fact is caused by Ubuntu's changes to the Python search path (I run Ubuntu 14.04) by prepending the path to Ubuntu's Python package (for my machine, this happens in <code>usr/local/lib/python2.7/dist-packages/easy-install.pth</code>). In my case, this causes the <code>apt-get</code> version of requests, which is pre-packaged with Ubuntu, to be used, rather than the pip version I want to use.</p>
<p><strong>What I'm looking for:</strong></p>
<p>I want to globally prepend pip's installation directory path to Python's search path (<code>sys.path</code>), before the path to Ubuntu's Python installation directory. Since requests (and many other packages) are used in many Python scripts of mine, I don't want to manually change the search path for every single file on my machine.</p>
<p><strong>Unsatisfactory Solution 1: Using virtualenv</strong></p>
<p>Using <a href="https://virtualenv.pypa.io/en/latest/" rel="nofollow noreferrer">virtualenv</a> would cause an unnecessary amount of change to my machine, since I would have to reinstall every package that exists globally. I only want to upgrade from Ubuntu's packages to pip's packages.</p>
<p><strong>Unsatisfactory Solution 2: Changing easy-install.pth</strong></p>
<p>Since <code>easy-install.pth</code> is overwritten every time <code>easy-install</code> is used, my changes to <code>easy-install.pth</code> would be removed if a new package is installed. This problem makes it difficult to maintain the packages on my machine.</p>
<p><strong>Unsatisfactory (but best one I have so far) Solution 3: Adding a separate .pth file</strong></p>
<p>In the same directory as easy-install.pth I added a <code>zzz.pth</code> with contents:</p>
<pre><code>import sys; sys.__plen = len(sys.path)
/usr/lib/python2.7/dist-packages/test_dir
import sys; new=sys.path[sys.__plen:]; del sys.path[sys.__plen:]; p=getattr(sys,'__egginsert',0); sys.path[p:p]=new; sys.__egginsert = p+len(new)
</code></pre>
<p>This file is read by <code>site.py</code> when Python is starting. Since its file name comes after <code>easy-install.pth</code> alphanumerically, it is consumed by <code>site.py</code> afterwards. Taken together, the first and last lines of the file prepend the path to <code>sys.path</code> (these lines were taken from <code>easy-install.pth</code>).</p>
<p>I don't like how this solution depends on the alphanumeric ordering of the file name to correctly place the new path.</p>
<p><strong>PYTHONPATHs come after Ubuntu's paths</strong></p>
<p><a href="https://stackoverflow.com/questions/7472436/add-a-directory-to-python-sys-path-so-that-its-included-each-time-i-use-python">Another answer</a> on Stack Overflow didn't work for me. My <code>PYTHONPATH</code> paths come after the paths in <code>easy-install.pth</code>, which uses the same code I mention in "Unsatisfactory solution 3" to prepend its paths.</p>
<p><em>Thank you in advance!</em></p>
</div>
<div class="post-text" itemprop="text">
<p>This is not recommended*, but from your python script
you can do </p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; b = sys.path
&gt;&gt;&gt; sys.path = ['/home/anand/'] + b
&gt;&gt;&gt; print(sys.path)
['/home/anand/', '', '/usr/local/lib/python2.7/dist-packages/_pdbpp_path_hack', '/usr/local/lib/python2.7/dist-packages/goose-0.0.1-py2.7.egg', '/usr/local/lib/python2.7/dist-packages/jieba-0.33-py2.7.egg', '/usr/local/lib/python2.7/dist-packages/cssselect-0.9.1-py2.7.egg', '/usr/local/lib/python2.7/dist-packages/nanoservice-0.1.5-py2.7.egg', '/usr/local/lib/python2.7/dist-packages/nanomsg-1.0a2-py2.7-linux-x86_64.egg', '/usr/local/lib/python2.7/dist-packages/msgpack_python-0.4.2-py2.7-linux-x86_64.egg', '/usr/local/lib/python2.7/dist-packages/DecisionTree-2.2.5-py2.7.egg', '/usr/local/lib/python2.7/dist-packages/nudepy-0.2-py2.7.egg', '/usr/local/lib/python2.7/dist-packages/wsgilog-0.3-py2.7.egg', '/usr/local/lib/python2.7/dist-packages/distribute-0.7.3-py2.7.egg', '/usr/local/lib/python2.7/dist-packages/PIL-1.1.7-py2.7-linux-x86_64.egg', '/usr/local/lib/python2.7/dist-packages/MySQL_python-1.2.5-py2.7-linux-x86_64.egg', '/usr/local/lib/python2.7/dist-packages/munkres-1.0.7-py2.7.egg', '/usr/local/lib/python2.7/dist-packages/parsedatetime-1.4-py2.7.egg', '/usr/local/lib/python2.7/dist-packages/argparse-1.3.0-py2.7.egg', '/usr/local/lib/python2.7/dist-packages/tusker-0.1-py2.7.egg', '/usr/local/lib/python2.7/dist-packages/SQLAlchemy-1.0.3-py2.7-linux-x86_64.egg', '/usr/local/lib/python2.7/dist-packages/numpy-1.9.2-py2.7-linux-x86_64.egg', '/usr/local/lib/python2.7/dist-packages/turkic-0.2.5-py2.7.egg', '/usr/local/lib/python2.7/dist-packages/scikits.bootstrap-0.3.2-py2.7.egg', '/usr/local/lib/python2.7/dist-packages/pyvision-0.1-py2.7-linux-x86_64.egg', '/home/anand/playspace/languages/python_pkgs/ets', '/usr/local/lib/python2.7/dist-packages/Scrapy-1.1.0dev1-py2.7.egg', '/usr/lib/python2.7/dist-packages', '/home/anand/playspace', '/home/anand/workspace/pyvision/src', '/home/anand/playspace/yapf', '/usr/lib/python2.7', '/usr/lib/python2.7/plat-x86_64-linux-gnu', '/usr/lib/python2.7/lib-tk', '/usr/lib/python2.7/lib-old', '/usr/lib/python2.7/lib-dynload', '/usr/local/lib/python2.7/dist-packages', '/usr/local/lib/python2.7/dist-packages/Orange/orng', '/usr/local/lib/python2.7/dist-packages/PIL', '/usr/lib/python2.7/dist-packages/PILcompat', '/usr/lib/python2.7/dist-packages/gst-0.10', '/usr/lib/python2.7/dist-packages/gtk-2.0', '/usr/lib/pymodules/python2.7', '/usr/lib/python2.7/dist-packages/wx-3.0-gtk2']
&gt;&gt;&gt;
</code></pre>
<p>After this your imports will look into the prepended path before looking anywhere else.</p>
<ul>
<li>-- For the hardcoding of path and inability of script to run anywhere else.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You shouldn't need to mess with pip's path, python actually handles it's pathing automatically in my experience. It appears you have two pythons installed.  If you type:</p>
<pre><code>which pip
which python
</code></pre>
<p>what paths do you see?  If they're not in the same /bin folder, then that's your problem.  I'm guessing that the python you're running (probably the original system one), doesn't have it's own pip installed.  You probably just need make sure the path for the python you want to run should come before /usr/bin in your .bashrc or .zshrc</p>
<p>If this is correct, then you should see that:</p>
<pre><code>which easy_install
</code></pre>
<p>shares the same path as the python installation you're using, maybe under /usr/local/bin.  Then just run:</p>
<pre><code>easy_install pip
</code></pre>
<p>And start installing the right packages for the python that you're using.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Using virtualenv would cause an unnecessary amount of change to my machine, since I would have to reinstall every package that exists globally. I only want to upgrade from Ubuntu's packages to pip's packages.</p>
</blockquote>
<p>Nope, you can use <a href="https://virtualenv.pypa.io/en/latest/userguide.html#the-system-site-packages-option" rel="nofollow"><code>--system-site-packages</code></a>.</p>
<p><strong>Edit</strong></p>
<pre><code># make your new virtualenv
user@darkstar:~$ mkvirtualenv --system-site-packages max
(max)user@darkstar:~$ python
&gt;&gt;&gt; pprint(sys.path)
['',
 '/home/user/.virtualenvs/max/lib64/python27.zip',
 '/home/user/.virtualenvs/max/lib64/python2.7',
 '/home/user/.virtualenvs/max/lib64/python2.7/plat-linux2',
 '/home/user/.virtualenvs/max/lib64/python2.7/lib-tk',
 '/home/user/.virtualenvs/max/lib64/python2.7/lib-old',
 '/home/user/.virtualenvs/max/lib64/python2.7/lib-dynload',
 '/usr/lib64/python2.7',
 '/usr/lib/python2.7',
 '/usr/lib64/python2.7/lib-tk',
 '/home/user/.virtualenvs/max/lib/python2.7/site-packages',
 '/usr/lib64/python2.7/site-packages/google_api_python_client-1.2-py2.7.egg',
 '/usr/lib64/python2.7/site-packages',
 '/usr/lib64/python2.7/site-packages/PIL',
 '/usr/lib64/python2.7/site-packages/gtk-2.0',
 '/usr/lib64/python2.7/site-packages/IPython/extensions']
</code></pre>
<p>As you see, the path of this virtualenv include the system path.
To check if it was working, i installed a package system-wide <em>after</em> making the virtualenv.</p>
<pre><code>root@darkstar:~: pip install igraph
Collecting igraph
  Downloading igraph-0.1.8-py2.py3-none-any.whl (119kB)
    100% |████████████████████████████████| 122kB 1.7MB/s
Collecting ipython (from igraph)
  Downloading ipython-3.2.1-py2-none-any.whl (3.4MB)
    100% |████████████████████████████████| 3.4MB 203kB/s 
Installing collected packages: ipython, igraph
Successfully installed igraph-0.1.8 ipython-3.2.1
root@darkstar:~: python -c 'print __import__("igraph")'
&lt;module 'igraph' from '/usr/lib64/python2.7/site-packages/igraph/__init__.pyc'&gt;

(max)user@darkstar:max$ python -c 'print __import__("igraph")'
&lt;module 'igraph' from '/usr/lib64/python2.7/site-packages/igraph/__init__.pyc'&gt;
</code></pre>
<p>Obviously, what is installed inside the virtualenv takes precedence over the system-wide libraries.</p>
<p>I belive that answer your needs.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Answer to direct question</h2>
<p>You could create a directory called <code>sitecustomize</code> in your <code>site-packages</code> directory.  We'll turn this into a <code>sitecustomize</code> module as described <a href="https://docs.python.org/3/library/site.html" rel="nofollow noreferrer">here</a> (Python 2 <a href="https://docs.python.org/2/library/site.html" rel="nofollow noreferrer">here</a>).  Specifically:</p>
<blockquote>
<p>an attempt is made to import a module named sitecustomize, which can perform arbitrary site-specific customizations. It is typically created by a system administrator in your site-packages directory. </p>
</blockquote>
<p>In the <code>sitecustomize</code> directory create a file called <code>__init__.py</code> and add the manipulations you want to perform there.  A very simple example is:</p>
<pre><code>import sys
sys.path = ['/your/path/to/pip/install'] + sys.path
</code></pre>
<p>In your case, I think <code>your/path...</code> would be <code>/usr/local/lib/python2.7/dist-packages</code>.  You might want to do something more sophisticated, but this crudely prepends to <code>sys.path</code> and is run whenever python is started (e.g. starting the interpreter in the command line, or running a python script from a file).</p>
<h3>Caveat</h3>
<p>I'm not a huge advocate of doing this - it's a bit of a blunt way to do what you want.  But you specifically say that using a <code>virtualenv</code> is undesirable for you and you want to make the change "globally" and I think this will do what you want.</p>
<h2>Thoughts on underlying issue</h2>
<p>I think @fivetentaylor's <a href="https://stackoverflow.com/a/31580183/838992">answer</a> is on the right track here - it appears you are using <code>pip</code> from one install with <code>python</code> executable for another.  Masking this by messing with the path could get very confusing very quickly.  I'd definitely ensure you have a separate <code>pip</code> for each install of <code>python</code> and you use that.  That should keep the directory structures for the separate installs separate.  Otherwise, you are forcing one install to use packages from a different installation's directories.  No problem technically, but confusing logistically.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, the alternatives presented by the others are very acceptable and might even be better. However, if you are intent on using the <code>sys.path()</code> way, then just treat it like a list and use the insert method. </p>
<pre><code>import sys
sys.path.insert(0, "path_to_pip") 
from subprocess import call
call("sudo pip install requests") 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would do this with <code>sitecustomize</code> as described in the <code>site.py</code> docs. This file is imported after the initial <code>sys.path</code> is configured and you can use it to alter <code>sys.path</code> in arbitrary ways as needed.</p>
<p>I've used it as a sysadmin to include custom release locations and it does the job quite nicely.</p>
<p><a href="https://docs.python.org/2/library/site.html" rel="nofollow">https://docs.python.org/2/library/site.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>While <a href="https://stackoverflow.com/users/248390/bufh">bufh's</a> answer will solve your problem now, you'll likely find that there'll be some other package where you don't want to use the Ubuntu-provided version. So here's why you want to use virtualenvs to manage the versions of packages (and not try to override the system versions).</p>
<p>As you've noticed, the order of sys.path sets the order that python packages are found. This means that changing sys.path affects how python scripts find their imports, both scripts you've written, and <strong>those provided by Ubuntu</strong>. Given that python scripts are used in Ubuntu programs, it's possible to "break" Ubuntu in interesting ways by changing which version of python packages Ubuntu programs use (which is the reason dist-packages exists).</p>
<p>To avoid this, virtualenv was created, which effectively allows there to be different sets of packages to be used. There's now a bunch of utilities which make using and managing virtualenvs easier. The one that's probably of most interest for you is <a href="https://github.com/mitsuhiko/pipsi" rel="nofollow">pipsi</a>, which creates a virtualenv per script, and avoids the need to activate it.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the sounds of things, Ubuntu is using a package path configuration  file as documented <a href="https://docs.python.org/2/library/site.html" rel="nofollow">here</a> to set up any packages it installs.</p>
<p>Looking at <a href="http://svn.python.org/projects/python/trunk/Lib/site.py" rel="nofollow">site.py</a> I see that there is a specific order of path resolution that invokes the configuration files as it resolves the site packages directories.</p>
<p>I think that gives you three options that I can see:</p>
<ol>
<li>Use virtualenv --system-site-packages as per @bufh's answer.</li>
<li>Use <a href="https://pip.pypa.io/en/latest/user_guide.html#user-installs" rel="nofollow">pip user installs</a> to set up the packages you need in the path before the standard site packages.</li>
<li>Use sitecustomize to re-write your sys.path (e.g. to put your local directories first).</li>
</ol>
</div>
<span class="comment-copy">Is <code>pip</code> choosing the right <code>python</code>?</span>
<span class="comment-copy">Have you considered using apt-get to remove the pre-packaged version?</span>
<span class="comment-copy">Report a bug against Ubuntu that the user's decisions are not being respected.</span>
<span class="comment-copy">Did you install python-requests manually, or does something depend on it?</span>
<span class="comment-copy">@aragilar We install requests directly via pip.</span>
<span class="comment-copy">Bruh, <code>sys.path.insert(0, path)</code>????</span>
<span class="comment-copy">@ytpillai: yeah that's shorter.  I didn't have/take time to shorten my code. :)</span>
<span class="comment-copy">Done, no worries :)</span>
<span class="comment-copy"><i>"This is not recommended..."</i> Then why are you recommending it? What's the recommended way then?</span>
<span class="comment-copy">I didn't mean this is not the recommended way. I mean, prepending custom paths to python path is not recommended in 99.9% of cases. There's almost no good reason to do this. The OP's question was a special case, and probably not relevant anymore with later ubuntu versions.</span>
<span class="comment-copy">I was trying to change the search path which my Python binary uses on startup. No matter the binary I use, the rules for determining a search path should be the same.</span>
<span class="comment-copy">Hey @max, I understand, but that is dangerous if you have different versions of python installed.  You should have the proper pip installed alongside each python, and then the proper packages will be installed for that python.  If you don't then you'll have your python pointing to wrong versions of things and that'd be bad.</span>
<span class="comment-copy">I have to agree with @fivetentaylor here. I had a project that I had to use Python 3.X on, and when you install that version you get a pip for that version of Python. There is a <code>python, python2, python2.7, python3, python3.4</code> and then there are <code>pip, pip2, pip2.7, pip3, pip3.4</code>. The 2's installs to the <code>dist-packages</code> for <code>Py2</code> and the 3's install to the one for <code>Py3</code>. If you want to install a package for Python 3.4, then you either you do <code>python3.4 -m pip install &lt;package&gt;</code> or <code>pip3.4 install &lt;package&gt;' and it will install in 3.4's </code>dist-packages`.</span>
<span class="comment-copy">The interpreter for whatever version of python you are running will import from it's version of <code>dist-packages</code> and you will get the correct one. I haven't personally used virtualenv, but from what I have read, it seems to be the way Python developers suggest going for multi-python dev environments.</span>
<span class="comment-copy">This won't fix the problem, <code>easy_install</code> and <code>pip</code> version their commands in the same way. You'll keep running into problems unless you manage your <code>PYTHONPATH</code> and <code>PATH</code> using virtualenvs.</span>
<span class="comment-copy">Could you elaborate more about your solution?</span>
<span class="comment-copy">I have a setup where they need to use easy_install and pip together. As I see this is the only way to do it. Saved at least half a day for  me .</span>
<span class="comment-copy">@binithb Glad I could help :)</span>
