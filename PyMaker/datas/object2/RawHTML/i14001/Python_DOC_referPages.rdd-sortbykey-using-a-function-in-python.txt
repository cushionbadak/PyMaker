<div class="post-text" itemprop="text">
<p>Lets say my key is not a simple data type but a class, and I need to sort the keys by using a comparison function. In Scala, I can do this by using, <code>new Ordering</code>. How can I achieve the same functionality in Python? For example, what would be the equivalent code in Python?</p>
<pre><code>implicit val someClassOrdering = new Ordering[SomeClass] {
        override def compare(a: SomeClass, b: SomeClass) = a.compare(b)
    }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python, you can create class methods for comparison by using the <a href="https://docs.python.org/3/reference/datamodel.html#object.__lt__" rel="nofollow noreferrer">rich comparison methods</a>:<br/>
<code>__lt__</code>, <code>__le__</code>, <code>__eq__</code>, <code>__ne__</code>, <code>__gt__</code>, <code>__ge__</code></p>
<p>You can make these methods do anything you need to compare your class instances, even weird things, but it's a good idea to make them consistent if you want sorting to behave sensibly. :)</p>
<p>Here's a fairly simple example of their use in this answer I wrote a month or so ago: <a href="https://stackoverflow.com/a/30141885/4014959">Sort a list to form the largest possible number</a>.</p>
<p>Here's another cute example from <a href="https://stackoverflow.com/a/29867270/4014959">Searching for a partial match in a list of tuples</a>, which creates a wildcard object.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can pass <code>keyfunc</code> argument:</p>
<pre><code>from numpy.random import seed, randint
from collections import namedtuple

Point = namedtuple('Point', ['x', 'y'])

seed(1)
rdd = sc.parallelize(
    (Point(randint(10), randint(10)), randint(100)) for _ in range(5))
</code></pre>
<p>Now, lets say you want to sort Points by y coordinate:</p>
<pre><code>rdd.sortByKey(keyfunc=lambda p: p.y).collect()
</code></pre>
<p>and result is:</p>
<pre><code>[(Point(x=5, y=0), 16),
 (Point(x=9, y=2), 20),
 (Point(x=5, y=2), 84),
 (Point(x=1, y=7), 6),
 (Point(x=5, y=8), 9)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python you may use <code>key</code> argument of <code>sort()</code> method. There was also <code>cmp</code> function, but this solution wasn't optimal and is now deprecated (or even removed, depending of Python version). Take a look <a href="https://docs.python.org/2/library/stdtypes.html#mutable-sequence-types" rel="nofollow">here</a>.</p>
</div>
<span class="comment-copy">That is really cool. Will try that. Here you just use a member field of the class, but let us say I want to use a class method for comparison, how would I do that?</span>
<span class="comment-copy">One option is to implement rich comparison methods as mentioned by @PM2Ring. If your logic is not covered by any of these operator you can simply call a method <code>sortByKey(keyfunc=lambda x.some_method())</code></span>
<span class="comment-copy">@MetallicPriest: In Python 2 you could also implement a magic <code>__cmp__</code> method, but that's deprecated &amp; no longer exists in Python 3.</span>
<span class="comment-copy">It's worth to mention that some basic Python types like <code>tuple</code> or <code>list</code> are sorted lexicographically by default.</span>
