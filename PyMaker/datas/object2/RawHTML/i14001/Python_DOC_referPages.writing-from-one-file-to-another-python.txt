<div class="post-text" itemprop="text">
<p>I am trying to take some information I got from a webpage and write one of the variables to a file however I am having no luck it is probably very easy but I'm lost. Here is an example of one of the rows there are 1253 rows.</p>
<pre><code>&lt;div class='entry qual-5 used-demoman slot-head bestprice custom' data-price='3280000' data-name="Kill-a-Watt Allbrero" data-quality="5" data-australium="normal" data-class="demoman" data-particle_effect="56" data-paint="" data-slot="cosmetic" data-consignment="consignment"&gt;
</code></pre>
<p>I am after the field called data-name it is not at the same spot in each row. I tried this but it did not work </p>
<pre><code>mfile=open('itemlist.txt','r')
mfile2=open('output.txt','a')
for row in mfile:
    if char =='data-name':
        mfile2.write(char)
</code></pre>
<p>Edit 1:</p>
<p>I made an example file of 'hello hi peanut'
if did:</p>
<pre><code>for row in mfile:
    print row.index('hello')
</code></pre>
<p>it would print 0 as expected however when I changed the hello to hi it didnt return 1 it returned nothing.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let’s try to find the value using common string manipulation methods:</p>
<pre><code>&gt;&gt;&gt; line = '''&lt;div class='entry qual-5 used-demoman slot-head bestprice custom' data-price='3280000' data-name="Kill-a-Watt Allbrero" data-quality="5" data-australium="normal" data-class="demoman" data-particle_effect="56" data-paint="" data-slot="cosmetic" data-consignment="consignment"&gt;'''
</code></pre>
<p>We can use <a href="https://docs.python.org/3/library/stdtypes.html#str.index" rel="nofollow"><code>str.index</code></a> to find the position of a string within a string:</p>
<pre><code>&gt;&gt;&gt; line.index('data-name')
87
</code></pre>
<p>So now we know we need to start looking at index <code>87</code> for the attribute we are interested in:</p>
<pre><code>&gt;&gt;&gt; line[87:]
'data-name="Kill-a-Watt Allbrero" data-quality="5" data-australium="normal" data-class="demoman" data-particle_effect="56" data-paint="" data-slot="cosmetic" data-consignment="consignment"&gt;'
</code></pre>
<p>Now, we need to remove the <code>data-name="</code> part too:</p>
<pre><code>&gt;&gt;&gt; start = line.index('data-name') + len('data-name="')
&gt;&gt;&gt; start
98
&gt;&gt;&gt; line[start:]
'Kill-a-Watt Allbrero" data-quality="5" data-australium="normal" data-class="demoman" data-particle_effect="56" data-paint="" data-slot="cosmetic" data-consignment="consignment"&gt;'
</code></pre>
<p>Now, we just need to find the index of the closing quotation mark too, and then we can extract just the attribute value:</p>
<pre><code>&gt;&gt;&gt; end = line.index('"', start)
&gt;&gt;&gt; end
118
&gt;&gt;&gt; line[start:end]
'Kill-a-Watt Allbrero'
</code></pre>
<p>And then we have our solution:</p>
<pre><code>start = line.index('data-name') + len('data-name="')
end = line.index('"', start)
print(line[start:end])
</code></pre>
<p>We can put that in the loop:</p>
<pre><code>with open('itemlist.txt','r') as mfile, open('output.txt','a') as mfile2w
    for line in mfile:
        start = line.index('data-name') + len('data-name="')
        end = line.index('"', start)
        mfile2.write(line[start:end])
        mfile2.write('\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <a href="http://www.crummy.com/software/BeautifulSoup/" rel="nofollow">beautifulsoup</a>:</p>
<p><strong>a.html</strong>:</p>
<pre><code>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt; Asdf &lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;

        &lt;div class='entry qual-5 used-demoman slot-head bestprice custom' data-price='3280000' data-name="Kill-a-Watt Allbrero" data-quality="5" data-australium="normal" data-class="demoman" data-particle_effect="56" data-paint="" data-slot="cosmetic" data-consignment="consignment"&gt;

    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><strong>a.py</strong>:</p>
<pre><code>from bs4 import BeautifulSoup
with open('a.html') as f:
    lines = f.readlines()
soup = BeautifulSoup(''.join(lines), 'html.parser')
result = soup.findAll('div')[0]['data-price']
print result
# prints 3280000
</code></pre>
<p>My opinion is, if your task is pretty easy as in your example, there is actually no need of using <code>beautifulsoup</code>. However, if it is more complicated, or it will be more complicated. Consider giving it a try with <code>beautifulsoup</code>.</p>
</div>
<span class="comment-copy"><code>char</code> is not defined in your code. You could use <code>row.index('data-name')</code> to figure out where the attribute begins. Then you can <code>index</code> again starting from that index to find the two quotation marks and use string manipulation to extract the value.</span>
<span class="comment-copy">Could you put this as an answer with an example so I can accept it as an answer</span>
<span class="comment-copy">I would actually want you to try it on your own first before showing you how to do it. So why don’t you give it a try and then if that fails, show what you have tried, and then we can try to explain you where you went wrong. That way, you learn best.</span>
<span class="comment-copy">im trying it but i've found that it only looks at the first value and doesn't look at the rest of the values in the row</span>
<span class="comment-copy">Pretty instructive and helpful answer. +1</span>
<span class="comment-copy">I am trying this but i noticed that you left my broken loop in so im trying to fix that now but when i say print start and print end to check that it is finding the line.index values nothing comes out?</span>
<span class="comment-copy">Oh yes, sorry, I copy/pasted too much without looking, fixed that code at the end now :)</span>
<span class="comment-copy">I tried this and it isn't working for me nothing is writing or printing even when i add print start after the definition of start</span>
<span class="comment-copy">Hmm, that’s weird. Try printing the line right after <code>for line in mfile</code> to see if any lines actually appear.</span>
<span class="comment-copy">The <code>BeautifulSoup</code> module name suggests that you are using version 3, which is pretty old and does not support Python 3. Please update to BeautifulSoup 4 and change the module name in your answer to <code>bs4</code>.</span>
<span class="comment-copy">I proudly prefer using <code>Python 2.7.6</code> unless the OP explicitly asks for a <code>Python 3</code> solution. There is only <code>Python</code> tag in the question as far as I see.</span>
<span class="comment-copy">Sure, but bs4 works in Python 2.6+ too, and it generally seems like a bad idea to promote outdated, and no-longer updated libraries when a newer version exists (especially when all you have to do is change it to <code>from bs4 import BeautifulSoup</code>)</span>
<span class="comment-copy">@poke Okay, that makes sense.. I updated my answer to <code>bs4</code> with keeping <code>print result</code> to show it is still <code>Python 2</code> :-)</span>
<span class="comment-copy">Yes, that’s totally fine with me; my issue was only with the old module name. Thanks :)</span>
