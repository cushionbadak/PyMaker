<div class="post-text" itemprop="text">
<p>I have this simple code and I get a strange error:</p>
<pre><code>from abc import ABCMeta, abstractmethod

class CVIterator(ABCMeta):

    def __init__(self):

        self.n = None # the value of n is obtained in the fit method
        return


class KFold_new_version(CVIterator): # new version of KFold

    def __init__(self, k):
        assert k &gt; 0, ValueError('cannot have k below 1')
        self.k = k
        return 


cv = KFold_new_version(10)

In [4]: ---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-4-ec56652b1fdc&gt; in &lt;module&gt;()
----&gt; 1 __pyfile = open('''/tmp/py13196IBS''');exec(compile(__pyfile.read(), '''/home/donbeo/Desktop/prova.py''', 'exec'));__pyfile.close()

/home/donbeo/Desktop/prova.py in &lt;module&gt;()
     19 
     20 
---&gt; 21 cv = KFold_new_version(10)

TypeError: __new__() missing 2 required positional arguments: 'bases' and 'namespace'
</code></pre>
<p>What am I doing wrong?  A theoretical explanation would be appreciated. </p>
</div>
<div class="post-text" itemprop="text">
<p>You used the <code>ABCMeta</code> meta class incorrectly. It is a <em>meta</em> class, not a base class. Use it as such.</p>
<p>For Python 2, that means assigning it to the <code>__metaclass__</code> attribute on the class:</p>
<pre><code>class CVIterator(object):
    __metaclass__ = ABCMeta

    def __init__(self):
        self.n = None # the value of n is obtained in the fit method
</code></pre>
<p>In Python 3, you'd use the <code>metaclass=...</code> syntax when defining the class:</p>
<pre><code>class CVIterator(metaclass=ABCMeta):
    def __init__(self):
        self.n = None # the value of n is obtained in the fit method
</code></pre>
<p>As of Python 3.4, you can use the <a href="https://docs.python.org/3/library/abc.html#abc.ABC" rel="nofollow noreferrer"><code>abc.ABC</code> helper class</a> as a base class:</p>
<pre><code>from abc import ABC

class CVIterator(ABC):
    def __init__(self):
        self.n = None # the value of n is obtained in the fit method
</code></pre>
</div>
