<div class="post-text" itemprop="text">
<p>Here is the problem:</p>
<pre><code>morsecode = {'a':".-", 'b':"-...", 'c':"-.-.", 'd':"-..", \
'e':".", 'f':"..-.", 'g':"--.", 'h':"....", 'i':"..", \
'j':".---", 'k':"-.-", 'l':".-..", 'm':"--", \
'n':"-.", 'o':"---", 'p':".--.", 'q':"--.-", \
'r':".-.", 's':"...", 't':"-", 'u':"..-", 'v':"...-", \
'w':".--", 'x':"-..-", 'y':"-.--", 'z':"--.."}


def morse(mystring):
    output=""

    for key, code in morsecode.items():
        for item in mystring:
            if key==item:
                output+=code

    return output
</code></pre>
<p>I want to get something like this:</p>
<pre><code>&gt;&gt;&gt; morse("a boy")
</code></pre>
<p>'.-   -... --- -.--'</p>
<p>Yet I can only get :</p>
<pre><code>&gt;&gt;&gt; morse("a boy")
</code></pre>
<p>'-.---....- ---'</p>
<p>The result is the same even though I type "yob a"</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>join</code> and a generator expression</p>
<pre><code>def morse(s):
    return ''.join(morsecode.get(i, i) for i in s)
</code></pre>
<p>This will replace all of the letters, but will preserve the space characters.</p>
<p><strong>Details</strong></p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>join</code></a> takes a sequence of <code>str</code> and concatenates them into a single string.</p>
<p>The syntax <code>(something for something in sequence)</code> is called a "<a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow">generator expression</a>". It is a compact 1-line equivalent to a <code>for</code> loop. You should also research "list comprehension" as this is a very similar technique, but creates a list instead of a generator.</p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow"><code>get</code></a> is a safer alternative to lookup a key from a <code>dict</code> than <code>[]</code>, because it will not throw an exception if that key doesn't exist. It will either return <code>None</code>, or the second argument you pass in.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to iterarte over the input string and then append the corresponding value for the key (char) to an  variable (<code>f</code> in the below example).</p>
<pre><code>def morse(s):
    morsecode = {'a':".-", 'b':"-...", 'c':"-.-.", 'd':"-..", \
    'e':".", 'f':"..-.", 'g':"--.", 'h':"....", 'i':"..", \
    'j':".---", 'k':"-.-", 'l':".-..", 'm':"--", \
    'n':"-.", 'o':"---", 'p':".--.", 'q':"--.-", \
     'r':".-.", 's':"...", 't':"-", 'u':"..-", 'v':"...-", \
     'w':".--", 'x':"-..-", 'y':"-.--", 'z':"--.."}

    f = ""
    for i in s:
        if not i == ' ':
            f += morsecode[i]
        else:
            f += ' '

    return f
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The issue is that you are iterating over the dictionary first, so you are adding conversions for whatever you are finding inside the string into the output variable , which is not in the correct order.</p>
<p>You can try -</p>
<pre><code>morsecode = {'a':".-", 'b':"-...", 'c':"-.-.", 'd':"-..", \
'e':".", 'f':"..-.", 'g':"--.", 'h':"....", 'i':"..", \
'j':".---", 'k':"-.-", 'l':".-..", 'm':"--", \
'n':"-.", 'o':"---", 'p':".--.", 'q':"--.-", \
'r':".-.", 's':"...", 't':"-", 'u':"..-", 'v':"...-", \
'w':".--", 'x':"-..-", 'y':"-.--", 'z':"--.."}

def morse(s):
    outputs = ''
    for item in s:
            outputs += morsecode.get(item,item)
    return outputs
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code>morsecode = {'a':".-", 'b':"-...", 'c':"-.-.", 'd':"-..", \
'e':".", 'f':"..-.", 'g':"--.", 'h':"....", 'i':"..", \
'j':".---", 'k':"-.-", 'l':".-..", 'm':"--", \
'n':"-.", 'o':"---", 'p':".--.", 'q':"--.-", \
'r':".-.", 's':"...", 't':"-", 'u':"..-", 'v':"...-", \
'w':".--", 'x':"-..-", 'y':"-.--", 'z':"--.."}


def morse(mystring):
    output=""
    for item in mystring:
        if item in morsecode.keys():
            output+=morsecode[item]
    return output
</code></pre>
</div>
<span class="comment-copy">for using .get() instead of [key] indexing +1</span>
<span class="comment-copy">@MalikBrahimi That will handle specifically spaces, I basically left any character in there that is not in the dictionary, so it will handle spaces, newlines, etc</span>
<span class="comment-copy">That makes sense.</span>
<span class="comment-copy">@CoryKramer: it's great that you don't recreate string objects over and over again, in contrast to other answers. You got my upvote for that.</span>
<span class="comment-copy">I'm not familiar to this kind of code(I'm still a beginner), can you explain it a bit more or simply provide me a link for research?</span>
<span class="comment-copy">Your function won't work against an input with spaces (take <code>a boy</code> for example)</span>
<span class="comment-copy">check now......</span>
<span class="comment-copy">Or just add a space key to the dictionary.</span>
<span class="comment-copy">@CoryKramer sorry typo..</span>
<span class="comment-copy">I've put 'for item in string' above 'for key, code in morsecode.items()', now it works.</span>
<span class="comment-copy">But why does the order of iteration matters?</span>
<span class="comment-copy">because, lets say we are changing <code>a</code> with <code>1</code> and <code>b</code> with <code>2</code> , for example - , and we want to change the complete string <code>ababab</code> , so we first take <code>a</code> from the dictionary , and then for each <code>a</code> element in the dictionary, we add its translation <code>1</code> to the output string (this is what you are doing) , so we get - <code>111</code> . Now do same with <code>b</code> and at end we get - <code>111222</code> . Do you see the issue?</span>
