<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/13652006/why-accessing-to-class-variable-from-within-the-class-needs-self-in-python">Why accessing to class variable from within the class needs “self.” in Python? [duplicate]</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I have two questions regarding this piece of code:</p>
<pre><code>class Enemy
    def __init__ (self, x):
         self.energy=x

jason=Enemy(5)     
</code></pre>
<ol>
<li><p>Why do I have to use <code>self</code> when I create functions and instance variables? What is the purpose of using it?</p></li>
<li><p>When we create the <code>jason</code> object, we assign it a life of <code>5</code>, as <code>Enemy(5)</code>. However, can class names take variables inside? Or is it the <code>__init__</code> function which makes it possible? (I'd expect something like, <code>class Enemy (x)</code>, when we declare the class).</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>In python, for class methods, the first argument (which normally people name <code>self</code>) refers to the instance (object) of the class which was used to call the function, It does not have to be named self, but thats the convention.</p>
<p>Example -</p>
<pre><code>&gt;&gt;&gt; class CA:
...     def __init__(someotherself, i):
...             print(someotherself)
...             print(i)
...             someotherself.i = i
...
&gt;&gt;&gt; CA(1)
&lt;__main__.CA object at 0x00514A90&gt;
1
&lt;__main__.CA object at 0x00514A90&gt;
</code></pre>
<p>When you do something like -</p>
<pre><code>self.energy=x
</code></pre>
<p>You are setting the <code>energy</code> variable inside <code>self</code> (which denotes your current object) to x.</p>
<p>When you do -</p>
<pre><code>jason=Enemy(5)
</code></pre>
<p>Python internally calls the <code>__init__()</code> method of Enemy with the values for x as 5 (and self as the current object). <code>__init__()</code> is called after object has been created by <code>__new__()</code> method, which is a class method, An SO question to help understand how <code>new</code> and <code>init</code> work - <a href="https://stackoverflow.com/questions/674304/pythons-use-of-new-and-init">Python's use of __new__ and __init__?</a></p>
</div>
<span class="comment-copy"><code>self</code> refers the current object.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/classes.html</a>. Note that, as it's missing a colon, your code won't work anyway.</span>
<span class="comment-copy">But if I didn't create jason, I wouldn't have an object. What would self refer to at that point?</span>
<span class="comment-copy">@ArdaBoğa if you didn't create <code>jason</code> you wouldn't be calling <code>Enemy.__init__</code>, so it wouldn't matter! Declaring a method is just like declaring a function - you define the parameters now that will get passed to it later on.</span>
<span class="comment-copy">Thank you, it makes sense now.</span>
<span class="comment-copy"><code>__new__</code> is not a static method, it's a class method</span>
<span class="comment-copy">Thank you for all the responses! I now understand that "self" refers to the object to be created in the program.</span>
