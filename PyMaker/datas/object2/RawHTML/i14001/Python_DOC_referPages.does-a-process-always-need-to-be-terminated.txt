<div class="post-text" itemprop="text">
<p>I am using a Python process to run one of my functions like so:</p>
<pre><code>Process1 = Process(target = someFunction)
Process1.start()
</code></pre>
<p>Now that function has no looping or anything, it just does its thing, then ends, does the Process die with it? or do I always need to drop a:</p>
<pre><code>Process1.terminate()
</code></pre>
<p>Afterwards?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.terminate" rel="nofollow">as per the documentation</a> it only sends a <code>SIGTERM</code> or <code>TerminateProcess()</code> to the process in question. If it has already exited then there is nothing to terminate. </p>
<p>However, it is always a good process to use exit codes in your subprocesses:</p>
<pre><code>import sys
sys.exit(1)
</code></pre>
<p>And then check the <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.exitcode" rel="nofollow">exit code</a> once you know the process has terminated:</p>
<pre><code>if Process1.exitcode():
   errorHandle()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The child process will exit by itself - the <code>Process1.terminate()</code> is unnecessary in that regard.  This is especially true if using any shared resources between the child and parent process.  From the <a href="https://docs.python.org/3/library/multiprocessing.html#all-start-methods" rel="nofollow">Python documentation</a>:</p>
<blockquote>
<p>Avoid terminating processes</p>
<p>Using the Process.terminate method to stop a process is liable to cause any shared resources (such as locks, semaphores, pipes and queues) currently being used by the process to become broken or unavailable to other processes.</p>
<p>Therefore it is probably best to only consider using Process.terminate on processes which never use any shared resources.</p>
</blockquote>
<p>However, if you want the parent process to <i>wait</i> for the child process to finish (perhaps the child process is modifying something that the parent will access afterwards), then you'll want to use <code>Process1.join()</code> to block the parent process from continuing until the child process complete.  This is generally good practice when using child processes to avoid zombie processes or orphaned children.</p>
</div>
<span class="comment-copy">All the information you need is in the documentation <a href="https://docs.python.org/2/library/multiprocessing.html#multiprocessing.Process.terminate" rel="nofollow noreferrer">docs.python.org/2/library/â€¦</a></span>
<span class="comment-copy">Excellent, thanks very much. I will accept this as answered in 4 minutes.</span>
<span class="comment-copy">Great info, cheers.</span>
