<div class="post-text" itemprop="text">
<p>I have 3 lists: x, y, and z. All are the same size, but I need to create new lists of x, y, and z, depending on the value at each index of z, as shown below:</p>
<pre><code>xNew = []
yNew = []
zNew = []
i = 0
for value in z:
    if value &gt; 0:
        xNew.append(x[i])
        yNew.append(y[i])
        zNew.append(z[i])
    i += 1
</code></pre>
<p>Does anyone know if there is a tidier, perhaps even more efficient, way of performing the above computation?</p>
</div>
<div class="post-text" itemprop="text">
<p>Probably the most straightforward way:</p>
<pre><code>it = zip(x, y, z)
xnew, ynew, znew = zip(*(t for t in it if t[-1] &gt; 0))
</code></pre>
<p>We use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow">the <code>zip</code> function</a> twice to restore the original structure of the data.</p>
<hr/>
<p><code>zip(x, y, z)</code> creates a new iterator object, which yields triples. </p>
<p><code>(t for t in it if t[-1] &gt; 0)</code> filters triples (<code>t[-1]</code> is the <code>value</code>).</p>
<p><code>zip(*(...))</code> yields exactly 3 tuples and <code>xnew</code>, <code>ynew</code> and <code>znew</code> receive them.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not more efficient but a bit tidier:</p>
<pre><code>for (_x,_y,_z) in zip(x,y,z):
    if _z &gt; 0:
        l.append((_x, _y,_z))
x,y,z = map(list, zip(*l))

print(x,y,z)
</code></pre>
<p>For a different approach using itemgetter:</p>
<pre><code>from operator import itemgetter
inds = [ind for ind, value in enumerate(z)if value &gt; 0]
x,y,z = (list(itemgetter(*inds)(l)) for l in (x,y,z))
print(x,y,z)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's a bit complicated, since you have several lists and need to skip values in all of the lists based on a value from one of them. Here's the best way, I think, using <code>zip</code> and list comprehensions:</p>
<pre><code>xNew, yNew, zNew = zip(*(xyz for xyz in zip(x, y, z) if xyz[2] &gt; 0))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use list comprehensions (used as filters) in conjunction with <a href="https://docs.python.org/2/library/functions.html#enumerate" rel="nofollow"><code>enumerate()</code></a>:</p>
<pre><code>&gt;&gt;&gt; z=[1,1,-1,1,1,-1]

&gt;&gt;&gt; x=[1,2,3,4,5,6]

&gt;&gt;&gt; xNew=[x[i] for i,zi in enumerate(z) if zi&gt;0]
&gt;&gt;&gt; xNew
[1, 2, 4, 5]
</code></pre>
<p>Or with <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow"><code>zip()</code></a> is even more beautiful:</p>
<pre><code>&gt;&gt;&gt; xNew=[xi for xi,zi in zip(x,z) if zi&gt;0]
&gt;&gt;&gt; xNew
[1, 2, 4, 5]
</code></pre>
</div>
<span class="comment-copy">Kudos for the one liner, but this is not very pleasant to read as the list comprehension unfortunately (+1 anyway)</span>
<span class="comment-copy">Asked for the tidiest so I guess this wins! It works. Could you explain what t[-1] is in a little detail? As in, what t is exactly and why you use -1.</span>
<span class="comment-copy">@alwaysboots <code>t</code> is a 3-tuple:  <code>(element_from_x, element_from_y, element_from_z)</code>. <code>t[-1]</code> accesses the last element of the tuple which is the <code>element_from_z</code>.</span>
<span class="comment-copy">@vaultah Could t[2] have been used instead then?</span>
<span class="comment-copy">@alwaysboots Yes. I just tried to make it obvious that we're accessing the last element of the tuple... You can even use unpacking: <code>... for x_value, y_value, z_value in it ...</code> and then check the condition: <code>z_value &gt; 0</code>, but this is unnecessarily verbose.</span>
<span class="comment-copy">Why not use <code>zip()</code> to include the <code>x</code>, <code>y</code> and <code>z</code> values in the loop?</span>
<span class="comment-copy">@MartijnPieters, True, added</span>
<span class="comment-copy">After which it is a tiny step to Vaultah's one-liner...</span>
<span class="comment-copy">@MartijnPieters, yes but Valutah got there first</span>
<span class="comment-copy">What about <code>y</code>?</span>
<span class="comment-copy">Same as for <code>x</code></span>
<span class="comment-copy">I know. What I means was: You might want to also handle <code>y</code> in your answer, so that it matches the question. (Not every reader might be aware that <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> takes an arbitrary number of arguments)</span>
<span class="comment-copy">No. For <code>yNew</code> you have to copy that line and replace x with y</span>
