<div class="post-text" itemprop="text">
<p>When reading through a file, I know it's possible to get the next line via <code>next()</code>, but is there a function like, say, <code>prev()</code> to go to the previous line?</p>
<p>In a similar vein, when looping through a file, is it possible to get the second line after the target line? <code>next()</code> will only return the line after as a string.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, there is no counterpart. You can just store previous lines in a variable:</p>
<pre><code>prev = None
for something in an_iterator:
    # do something with prev
    prev = something
</code></pre>
<p>For multiple items you could use a <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow"><code>collections.deque()</code> object</a>:</p>
<pre><code>from collections import deque

five_prev = deque(an_iterator, maxlen=5)
for something in an_iterator:
    five_lines_back = five_prev.popleft()
    # ...
    five_prev.append(something)
</code></pre>
<p>You cannot know what comes next until you retrieve it from the iterable, but you can certainly track what came previously.</p>
<p>You are not limited to calling <code>next()</code> once; if you need to retrieve two lines from the iterable, call <code>next()</code> twice, or use <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow"><code>itertools.islice()</code></a> with <code>next()</code> to retrieve multiple items.</p>
</div>
<span class="comment-copy">That would imply that Python is storing all of the previous state, which makes the principle of iterators somewhat pointless! Note that the one part of <code>itertools</code> that does this, <code>tee</code>, <a href="https://docs.python.org/2/library/itertools.html#itertools.tee" rel="nofollow noreferrer">specifically warns you about it</a>.</span>
<span class="comment-copy"><code>You are not limited to calling next() once</code> - unless I'm mistaken, <code>r.next()</code> returns a string, and that's why <code>r.next().next()</code> returns an AttributeError that a string cannot have attribute 'next'</span>
<span class="comment-copy">@sirius_pain: Call <code>r.next()</code> <i>again</i>. Not on the return value, on the iterator. And you want to use the <code>next()</code> function rather than call <code>.next()</code> on the iterator, so you can use the extra optional default argument to handle the case where your iterator is running out better. So use <code>next(r)</code> then <code>next(r)</code> again.</span>
<span class="comment-copy">Now that you cleared that up with me, everything you've provided has worked. Thanks!</span>
