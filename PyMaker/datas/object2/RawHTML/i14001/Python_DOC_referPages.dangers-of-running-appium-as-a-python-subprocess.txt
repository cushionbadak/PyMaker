<div class="post-text" itemprop="text">
<p>I'm using Appium for UI testing, and Robot Framework above that.  I'm trying to automate all of the servers and services necessary to test an iOS app, including the Appium server.  This seems to be causing some breakage inside Appium.  In particular, we seem so get stuck when calling driver.get_elements_by_accessibility_id(id)</p>
<p>The subprocess kick-off looks like this:  </p>
<pre><code>self.app = subprocess.Popen("appium", shell=True, stdout=PIPE, stderr=PIPE)
</code></pre>
<p>When we drop the stdout/stderr kwargs, or make them point at files, the behavior returns to normal.  Is there some dependence on stdout/stderr that causes this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't use <code>PIPE</code> unless you read from the pipes e.g., using <code>out, err = self.app.communicate()</code>. Otherwise, the child process may hang that is why <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow noreferrer"><code>subprocess.call()</code> docs warn</a>:</p>
<blockquote>
<p>Do not use <code>stdout=PIPE</code> or <code>stderr=PIPE</code> with this function. The child
  process will block if it generates enough output to a pipe to fill up
  the OS pipe buffer as the pipes are not being read from.</p>
</blockquote>
<p><code>subprocess.call()</code> does not consume the pipes and therefore you should not pass <code>PIPE</code> to it. <a href="https://stackoverflow.com/a/11270665/4279">To discard output, you could use <code>DEVNULL</code> instead</a>. The same applies to <code>Popen()</code> if you don't use <code>self.app.stdout/stderr</code> later.</p>
</div>
<span class="comment-copy">Thanks, I should have looked at the docs again.  It's been too long.</span>
