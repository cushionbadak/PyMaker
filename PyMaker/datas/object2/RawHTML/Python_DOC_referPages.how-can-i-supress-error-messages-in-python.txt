<div class="post-text" itemprop="text">
<p>So I'm trying to make a program to delete all duplicate Letters from a given String. The code is basically a selfmade iterator, that I got from another post here: <a href="https://stackoverflow.com/questions/50427501/how-do-i-reset-a-list-iterator-in-python">How do I reset a list iterator in Python?</a></p>
<pre><code>string = "NNEEXXxxTTGGEENNCCOODDEERR"

class rmvDuplicates:

def __init__(self, list, newString):
    self.newString = newString
    self.list = list
    self.idx = 0
    self.content = list[self.idx]

def __iter__(self):
    return self

def get_content(self, content):
    return content

def get_index(self):
    return self.idx

def get_content_next(self, content):
    try:
        self.idx += 1
        return self.content
    finally:
        self.idx -= 1

def remove(self, elem):
    del self.list[self.idx]
    return

def rewind(self):
    self.idx = 0

def __next__(self):
    try:
        return self.list[self.idx]
    except IndexError:
        pass
    finally:
        self.idx += 1
        self.content = self.list[self.idx]  

new_String = []

li = rmvDuplicates(list(string), new_String)

for elem in li:
    if li.get_content(elem) == li.get_content_next(elem):
        print(li.get_content(elem))
        li.remove(elem)
        print(li.list)

print("Hello")
</code></pre>
<p><em>Note: The <code>print("Hello")</code> is just for testing purposes</em></p>
<p>I modified it a bit to match my needing and it works just fine, until it reaches the point of the <code>IndexError</code>.</p>
<pre><code>def __next__(self):
    try:
        return self.list[self.idx]
    except IndexError:
        pass
    finally:
        self.idx += 1
        self.content = self.list[self.idx]
</code></pre>
<p>I already tried to figure that out myself, using the Except-Block with the pass method.</p>
<p>But still, the program displays this message:</p>
<pre><code>Traceback (most recent call last):
  File "rmv_dplc_cls.py", line 49, in &lt;module&gt;
    for elem in li:
  File "rmv_dplc_cls.py", line 42, in __next__
    self.content = self.list[self.idx]
IndexError: list index out of range
</code></pre>
<p>Does anyone here know how to fix this, so the program keeps on running and doesn't abort.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Try changing your <code>__next__</code> method to:</p>
<pre><code>def __next__(self): 
    try: 
        value = self.list[self.idx]
        self.idx += 1
    except IndexError:
        self.idx = 0
        value = self.list[self.idx]
    finally:
        return value
</code></pre>
<p>Explanation:</p>
<p>If your try clause fails, it means that <code>self.list[self.idx]</code> accesses an element which is outside of your list range, rhus raising the <code>IndexError</code>. That being the case, trying to access the same <code>self.list[self.idx]</code> will result in another <code>IndexError</code> this time outside from the try clause.</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks @jfaccioni. Your suggestion was very  helpful. It didn't quite qork for me, so I modified it a bit, like this:</p>
<pre><code>def __next__(self):
    try:
        value = self.list[self.idx]
        self.idx += 1
        self.content = self.list[self.idx]
    except IndexError:
        value = self.list[self.idx]
    finally:
        if self.idx == len(self.list):
            raise StopIteration
        return value
</code></pre>
<p>I needed the  <code>self.content</code> for my function to work. </p>
<p>Thanks for your help.</p>
</div>
<span class="comment-copy">Why do you use the same index again for which you have just determined that it is out of range?</span>
