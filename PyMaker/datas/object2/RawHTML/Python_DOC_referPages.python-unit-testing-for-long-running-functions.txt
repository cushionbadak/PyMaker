<div class="post-text" itemprop="text">
<p>I have a long running python method, this function will go inside folders and read all the documents and extract text. Number of output will not going to be a constant as it can change. This process might take from several hours to days. How to write a unit test for such a function, how to check whether its pass or fail as the number of output might change and it takes many hours</p>
</div>
<div class="post-text" itemprop="text">
<p>This kind of problem can be solve by using test resources. This is a classic problem you can have when your need to test a function on file data.</p>
<p>In your <code>tests</code> directory (you have one, isnâ€™t it?), you can create a <code>resources</code> package.</p>
<p>All you need is to put your test data here. Of course, choose a minimal tree structure: the only necessary files and directories required for your test.</p>
<p>To access your <code>resources</code> directory I recommend using a <code>RESOURCES_DIR</code> variable define as follow:</p>
<p>In your <code>__init__.py</code> file, you can write:</p>
<pre class="lang-py prettyprint-override"><code>import os

RESOURCES_DIR = os.path.dirname(__file__)
</code></pre>
<p>You can easily import this variable in your unit test and use it to access your test files.</p>
<p>Here is a more detailed example:</p>
<pre><code>tests
+-- resources
|   +-- __init__.py
|   \-- test_func1
|       +-- scenario1
|       |   +-- &lt;data for scenario1&gt;
|       \-- scenario2
|           \-- &lt;data for scenario2&gt;
|
+-- test_func1.py
</code></pre>
<p>Your <code>test_func1.py</code> can look like this:</p>
<pre class="lang-py prettyprint-override"><code>import unittest
import os

from tests.resources import RESOURCES_DIR


class TestFunc1(unittest.TestCase):
    def test_func1_scenario1(self):
        data_dir = os.path.join(RESOURCES_DIR, 'test_func1/scenario1')
        ...

    def test_func1_scenario2(self):
        data_dir = os.path.join(RESOURCES_DIR, 'test_func1/scenario2')
        ...
</code></pre>
</div>
<span class="comment-copy">by not running test on actual data maybe?</span>
<span class="comment-copy">unittest is about deterministic input and output. in its execution, it might take hours for a large directory, but you can control its input so that it will cover the possible cases and still run fast.</span>
<span class="comment-copy">Split the process into functions, test them individually and mock the input.</span>
<span class="comment-copy">Test it on a small chunk of sample data. <a href="https://docs.python-guide.org/writing/tests/" rel="nofollow noreferrer">Test</a> your code in a systematic way before running on huge data that would consume a lot of time.</span>
