<div class="post-text" itemprop="text">
<p>I am talking to a piece of a test equipment using a serial interface.  The two letter ascii ID of the device is encoded as a base 10 integer in a specific register. Each pair of integers needs to be converted to an ascii character.  My question is what is the best way to do this conversion.  I used the method below but it seems fairly complicated for a such a simple task.</p>
<p>Example </p>
<p>input: <code>5270</code>
Desired output: <code>'4F'</code> (ascii values of 52 and 70)</p>
<pre><code>get the raw register value
&gt;&gt;&gt; result =f4.read_register(0,)
&gt;&gt;&gt; result
5270
convert the integer into a list of chars
&gt;&gt;&gt; chars = [i for i in str(result)]
join the pairs together
&gt;&gt;&gt; pairs = [''.join((chars[x], chars[x+1])) for x in xrange(0,len(chars),2)]
&gt;&gt;&gt; pairs
['52', '70']

&gt;&gt;&gt; pairs = [chr(int(x)) for x in pairs]
&gt;&gt;&gt; pairs
['4', 'F']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Add a bit of maths.</p>
<ul>
<li><code>/</code> - Integer division</li>
<li><code>%</code> - Modulus operator</li>
</ul>
<p>Code</p>
<pre><code>&gt;&gt;&gt; num = 5270
&gt;&gt;&gt; pairs = [chr(num/100),chr(num%100)]
&gt;&gt;&gt; pairs
['4', 'F']
</code></pre>
<p>And to match desired output</p>
<pre><code>&gt;&gt;&gt; ''.join(pairs)
'4F'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In addition to @BhargavRao answer, you can use the <a href="https://docs.python.org/2/library/functions.html#divmod" rel="nofollow"><code>divmod</code></a> builtin:</p>
<pre><code>num = 5270
''.join(map(chr, divmod(num, 100)))

# '4F'
</code></pre>
<p>You can also use string formatting:</p>
<pre><code>'{:c}{:c}'.format(*divmod(num, 100))

# '4F'
</code></pre>
</div>
<span class="comment-copy">I think (even though his problem isn't very clear) that he's actually got a string of one or more 4-char groups like this, not necessarily just a single one. But even so, this answer is trivial to adapt to that case: First break the string into 4-char groups, then do this on each one. Or, alternatively, loop on <code>%</code>-ing off 2 digits at a time and <code>chr</code>ing them.</span>
<span class="comment-copy">@abarnert Yep. But the OP does mention that the input is <code>5270</code>. So I guess he has already refined his input by using some technique.</span>
<span class="comment-copy">In this case the register only contains a single 4 digit integer so the original answer would work.  There are other cases where registers contain larger ascii encoded integers, so abarnert's suggestion would help in that cases.</span>
<span class="comment-copy">@user3067612 Happy to see that it helped you. All the best</span>
<span class="comment-copy">I was about to hit "Post Your Answer" when this appeared... :)</span>
<span class="comment-copy">I was going to note in my answer that this only works in Python 2, which produces <code>list</code>s where Python 3 would produce specialized objects (a <code>map</code> object in this case). It has now been noted.</span>
<span class="comment-copy">@TigerhawkT3 The OP is using Py2. However it is necessary to mention that.</span>
<span class="comment-copy">Thanks  @Bhargav Rao, TigerhawkT3 in py3 a map object is created but join does work on map objects.</span>
<span class="comment-copy">@DTing: Yep, <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> takes any iterable of strings, in both 2.x and 3.x, so you don't have to worry about whether <code>map</code> returns a list or a map iterator here (unless you're micro-optimizing your code), so you might as well write the simplest thing that works in both 2.x and 3.x, exactly as you've done.</span>
