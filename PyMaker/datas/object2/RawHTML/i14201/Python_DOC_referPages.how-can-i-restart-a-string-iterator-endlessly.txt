<div class="post-text" itemprop="text">
<p>This question is somewhat related to <a href="https://stackoverflow.com/questions/1271320/reseting-generator-object-in-python">this</a>, <a href="https://stackoverflow.com/questions/3266180/can-iterators-be-reset-in-python">this</a>, and <a href="https://stackoverflow.com/questions/26747296/python-iterator-reset-iterator">this</a> one. Assume I have two generators/iterators of different lengths:</p>
<pre><code>&gt;&gt;&gt; s = "abcde"
&gt;&gt;&gt; r = range(0, 16)
</code></pre>
<p>I now want to repeat iterating over the shorter one until the longer one is exhausted. The standard <a href="https://docs.python.org/3.4/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> function terminates once the shorter of the two is exhausted:</p>
<pre><code>&gt;&gt;&gt; for c, i in zip(s, r) :
...     print(c, i)
... 
a 0
b 1
c 2
d 3
e 4
</code></pre>
<p>The best I can come up with is wrapping the string into a generator like so:</p>
<pre><code>&gt;&gt;&gt; def endless_s(s) :
...     while True :
...         for c in s :
...             yield c
</code></pre>
<p>which gives me the desired result of</p>
<pre><code>&gt;&gt;&gt; _s = endless_s(s)
&gt;&gt;&gt; for c, i in zip(_s, r) :
...     print(c, i)
... 
a 0
b 1
c 2
d 3
e 4
a 5
b 6
c 7
d 8
e 9
a 10
b 11
c 12
d 13
e 14
a 15
</code></pre>
<p>Now I wonder: is there a better and more compact way of doing this? Like an endless string join, or some such?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do this with <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow"><code>itertools.cycle</code></a>:</p>
<blockquote>
<p>Make an iterator returning elements from the iterable and saving a
  copy of each. When the iterable is exhausted, return elements from the
  saved copy. Repeats indefinitely.</p>
</blockquote>
<p>which is able to replace your function entirely:</p>
<pre><code>from itertools import cycle as endless_s
</code></pre>
</div>
<span class="comment-copy">Exactly what I was looking for: <code>for c, i in zip(itertools.cycle(s), r)</code></span>
