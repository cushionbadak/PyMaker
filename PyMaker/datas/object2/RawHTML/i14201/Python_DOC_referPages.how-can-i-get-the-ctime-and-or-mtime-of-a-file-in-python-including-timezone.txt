<div class="post-text" itemprop="text">
<p>Based on this related <a href="https://stackoverflow.com/questions/30719734/does-datetime-fromtimestampos-path-getctime-in-python-give-me-a-timezone-awa">question</a> and <a href="https://stackoverflow.com/a/30720061/27641">answer</a> I asked, it has become obvious that <code>datetime.fromtimestamp(os.path.getctime())</code> in Python 3.4 doesn't return a timezone-aware datetime object, However, based on some investigation, I've also discovered that OS X 10.9 on an HFS+ filesystem (for example) does <em>seem to</em> maintain the timezones along with ctimes (unless gls is inferring the timezone from my local timezone and daylight-savings time):</p>
<pre><code>$ gls -l --full-time -c

-rw-------  1 myuser staff 538 2015-01-04 17:12:57.000000000 +0100 fileone
-rwxr-xr-x 17 myuser staff 578 2015-05-20 06:41:07.000000000 +0200 filetwo
</code></pre>
<p>(I am using <a href="https://apple.stackexchange.com/questions/69223/how-to-replace-mac-os-x-utilities-with-gnu-core-utilities">the GNU version of ls</a>)</p>
<p>How can I get the timezone from the ctime and insert/combine it into a datetime object?</p>
<p>(I'd also like the same answer for the mtime, I assume it will be similar).</p>
</div>
<div class="post-text" itemprop="text">
<p>Both ctime and mtime are available as "seconds since epoch" (values returned by <code>time.time()</code>). </p>
<p>To get the local timezone, you could use <a href="https://github.com/regebro/tzlocal" rel="nofollow"><code>tzlocal</code> module</a>:</p>
<pre><code>#!/usr/bin/env python
import os
from datetime import datetime
from tzlocal import get_localzone # $ pip install tzlocal

local_timezone = get_localzone()
aware_dt = datetime.fromtimestamp(os.path.getctime(path), local_timezone)
</code></pre>
<p>You might see the timezone info because <code>ls</code> converts the timestamps into corresponding broken-down time with timezone offset using the local timezone.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you only want to rely on Python Standard Library, you can only use the timezone subclass of tzinfo :</p>
<pre><code>tz = datetime.timezone(datetime.timedelta(seconds=-time.timezone), time.tzname[0]) \
    if (time.daylight == 0 || time.localtime(os.path.getctime(path)).tm_isdst == 0) \
    else datetime.timezone(datetime.timedelta(seconds=-time.altzone), time.tzname[1])
dt = datetime.fromtimestamp(os.path.getctime(path), tz)
</code></pre>
<p>Then you could have (in France) :</p>
<pre><code>&gt;&gt;&gt; dt
datetime.datetime(2015, 6, 9, 13, 43, 3, 791255, tzinfo=datetime.timezone(datetime.timedelta(0, 7200), 'Paris, Madrid (heure d\x92été)'))
&gt;&gt;&gt; dt.utctimetuple()
time.struct_time(tm_year=2015, tm_mon=6, tm_mday=9, tm_hour=11, tm_min=43, tm_sec=3, tm_wday=1, tm_yday=160, tm_isdst=0)
</code></pre>
<p>Of course, mtime would work exactly the same</p>
<p>You should consult <a href="https://stackoverflow.com/a/3168394/3545273">J.F. Sebastian's post</a> for references. Here is an extract :</p>
<p>To get the current UTC offset in a way that workarounds the time.daylight issue and that works even if tm_gmtoff is not available, [this] can be used:</p>
<pre><code>import time
from datetime import datetime

ts = time.time()
utc_offset = (datetime.fromtimestamp(ts) -
              datetime.utcfromtimestamp(ts)).total_seconds()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works for me:</p>
<pre><code>import os, datetime, time

modified_time = os.path.getmtime(file)
mtime_obj = datetime.datetime(*time.localtime(modified_time)[:6])
# (or)
mtime_obj = datetime.datetime.fromtimestamp(modified_time)
print(mtime_obj.strftime('%Y-%m-%d_%H-%M-%S'))
</code></pre>
<p>No external packages. Just the standard python libraries. (Python 3.6)</p>
</div>
<span class="comment-copy">What version of OS X is this? As far as I can determine, HFS+ stores file timestamps as <i>UTC only</i>, and system calls translate to the current timezone. <code>ls</code> does not have a <code>--full-time</code> switch on my system (OS X 10.10), and the <code>-T</code> switch does not display a timezone either.</span>
<span class="comment-copy">See <a href="http://forensicswiki.org/wiki/Mac_OS_X#HFS.2FHFS.2B_date_and_time_values" rel="nofollow noreferrer">forensicswiki.org/wiki/…</a>; perhaps you are using <code>HFS</code> rather than <code>HFS+</code>?</span>
<span class="comment-copy">@MartijnPieters: it is unrelated to filesystems. <code>ls</code> gets time (POSIX timestamp + nanoseconds) from <code>lstat(2)</code> and displays it in the terminal using <code>/etc/localtime</code> on my system.</span>
<span class="comment-copy">@MartijnPieters I've edited answers to your Qs into my Q.</span>
<span class="comment-copy">J.F. Sebastian, "Both ctime and mtime are available as "seconds since epoch". Are you sure this is true for all POSIX platforms? Is this defined somewhere?</span>
<span class="comment-copy">@AndrewFerrier: it is true everywhere where Python works even on Windows. It is defined in the Python docs for the corresponding functions (<code>os.path.getctime()</code> and <a href="https://docs.python.org/3/library/os.path.html#os.path.getmtime" rel="nofollow noreferrer"><code>os.path.getmtime()</code></a>)</span>
<span class="comment-copy">@AndrewFerrier: the number ("seconds since epoch") does not depends on timezone ("epoch" is the <i>same</i> time instant around the globe). Look at the <code>fromtimestamp()</code> call: you can pass <i>any</i> timezone as the second parameter.</span>
<span class="comment-copy">@AndrewFerrier: yes. If you change your local timezone then the output of <code>ls</code> may also change (different local time/utc offset) but the numbers returned by <code>getmtime()</code> will remain the same e.g., it is <code>1420387977</code> for <code>fileone</code> whatever your local timezone is.</span>
<span class="comment-copy">@AndrewFerrier: As <a href="http://stackoverflow.com/a/30732046/4279">I said</a>: <code>fromtimestamp()</code> by itself (no second parameter) returns a <b>naive</b> datetime object. And there is no <code>get_localzone()</code> (returns <code>pytz</code> timezone) in stdlib. It is not trivial to <a href="http://stackoverflow.com/a/3168394/4279">get the utc offset for the local timezone in the general case</a>.</span>
<span class="comment-copy">no. stdlib does not provide access to the tz database (there is <a href="https://www.python.org/dev/peps/pep-0431/" rel="nofollow noreferrer">pep-431</a>). <code>time.timezone</code> and <code>time.altzone</code> may fail. See <a href="http://stackoverflow.com/q/3168096/4279">Getting computer's utc offset in Python</a></span>
<span class="comment-copy">no. It is not about it. <a href="http://stackoverflow.com/a/3168394/4279">Read the link</a>. Also, your <code>time.daylight</code> usage is wrong.</span>
<span class="comment-copy">it is still incorrect. <code>time.daylight</code> (when it works) says whether the current timezone observes DST -- it does <i>not</i> say whether DST is in effect <i>right now</i>. Notice that I've used <code>time.daylight and time.localtime().tm_isdst &gt; 0</code> -- it is wrong to use just <code>time.daylight</code> here. Anyway, even that may break for timezones that had/will have different rules in the past/future. If you want a reasonable timezone support; use <code>pytz</code> module (<code>tzlocal.get_localzone()</code> returns <code>pytz</code> timezone  corresponding to the local timezone).</span>
<span class="comment-copy">@J.F.Sebastian : Thanks for the explaination. But I still do not understand how time.timezone and time.altzone may fail. I have read pep-431 and the edge cases cited in your post, but I'm afraid this is still beyond my current capacities :-( . I'll leave this post for future references unless you think it is more dangerous than useful</span>
<span class="comment-copy"><code>time.timezone</code> is a constant (a single number e.g., <code>18000</code>). It means that it remains the same whether you are handling dates from 2000 or 2015. utc offset for the local timezone in 2000 may be different from utc offset in 2015 (the rules are defined by local politicians -- logic does not apply) but <code>time.timezone</code> is just a single number: it is either wrong for 2000 or it is wrong for 2015.</span>
