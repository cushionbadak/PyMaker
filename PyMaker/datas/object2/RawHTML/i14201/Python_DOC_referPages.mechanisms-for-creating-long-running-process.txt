<div class="post-text" itemprop="text">
<p>Are there alternative mechanism(s) for creating a long-running process besides running an infinite loop?</p>
<p>The common pattern seems to be this:</p>
<pre><code>while True:
    # Check for some condition or waiting for some event
    # Do some processing
    time.sleep(0.01)
</code></pre>
<p>I am particularly interested in the scenario where the process acts as a worker that listens to some event (e.g. waiting on a task queue).</p>
<p>What are the performance characteristics of the alternative approaches?</p>
</div>
<div class="post-text" itemprop="text">
<p>Prior art on "wait for and process job" thing has been done a few different ways:</p>
<ul>
<li>Worker processes or threads (See <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow"><code>multiprocessing</code></a> and <a href="https://docs.python.org/3/library/threading.html" rel="nofollow"><code>threading</code></a> for some helpful primitives)</li>
<li>Event-based processing (asyncio, twisted, and a few others). Your asyncronous IO library raises an event when you get data on STDIN or whatever pipe you choose.</li>
<li>Single-threaded with IO buffer. Depending on your desired load characteristics, it could be reasonable for a worker processes to just wait on the IO and process it when it comes. No fancy queueing. Just let the kernel buffer the IO and the calling process block when it gets full.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If you're anticipating the need for performance for a lot of long-running tasks (and scaling over more machines) , a more high-level system like <a href="http://docs.celeryproject.org/en/latest/index.html#" rel="nofollow">Celery</a> might be fit:</p>
<blockquote>
<p>"Celery is a simple, flexible and reliable distributed system to
  process vast amounts of messages, while providing operations with the
  tools required to maintain such a system. <strong>Itâ€™s a task queue with focus
  on real-time processing, while also supporting task scheduling.</strong>"</p>
</blockquote>
</div>
<span class="comment-copy">You could consider asyncio: <a href="https://docs.python.org/3.4/library/asyncio.html" rel="nofollow noreferrer">docs.python.org/3.4/library/asyncio.html</a></span>
<span class="comment-copy">@SimeonVisser, could you elaborate why asyncio may be appropriate?</span>
