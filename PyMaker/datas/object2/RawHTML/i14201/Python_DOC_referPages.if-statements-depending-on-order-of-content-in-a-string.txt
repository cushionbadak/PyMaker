<div class="post-text" itemprop="text">
<p>I would like to create different <code>if</code> statements based on the order of content in a string.</p>
<pre><code>string = "ABC Long Short DEF"
string = "XYZ Short Long ZYX"
</code></pre>
<p>So if <code>"Long"</code> comes before <code>"Short"</code> in <code>string</code> do x.</p>
<p>Or if <code>"Short"</code> comes before <code>"Long"</code> in <code>string</code> do y.</p>
<p>Note that <code>string</code> does not necessarily have to contain both <code>"Long"</code> and <code>"Short"</code>. It can contain just one of them, or none.</p>
<p>Currently I use the code below to do different things if there is one of <code>"Long"</code> or <code>"Short"</code>. But if both are present, I would like to set <code>length</code> to the one occurring first.</p>
<pre><code>if "Long" in string:
    length = "Long"
if "Short" in string:
    length = "Short"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/stdtypes.html#str.index" rel="nofollow"><code>str.index</code></a> and <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow">EAFP</a></p>
<pre><code>try:
    if string.index("Long") &lt; string.index("Short"):
        length = "Long"
    else:
        length = "Short"
except ValueError:
    if "Long" in string:
        length = "Long"
    elif "Short" in string:
        length = "Short"
    else:
        print ("Long and Short not in string") 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use <code>string.find</code> to get the index of a substring. It will return -1 if not present.</p>
<pre><code>def long_or_short(s):
    sh = s.find("Short")
    ln = s.find("Long")
    if 0 &lt;= sh &lt; ln or ln &lt; 0 &lt;= sh:
        return "Short"
    elif 0 &lt;= ln:
        return "Long"
    else:
        return None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a generic solution, utilising <code>.find()</code> that will return the first sub-string that is matched from a list of <code>n</code> sub-strings, rather than simply <code>n=2</code> i.e.<code>'Long'</code> or <code>'Short'</code>, this solution can be extended to any number of possible sub-strings</p>
<h3>Two-Line Generic Solution</h3>
<pre><code># assuming string variable to search is named 'string'
l = filter(lambda x: x[0] &gt; 0, [[string.find(s),s] for s in ["Long","Short"]])
subString = min(l, key=lambda x: x[0])[1] if l else None
</code></pre>
<h3>More Informative Function</h3>
<p>Takes <code>s</code> as the string to search across and <code>sLst</code> as a list of substrings to search for.</p>
<p>It returns the the first <code>subS</code> that is found in <code>s</code>, from <code>sLst</code> or <code>None</code> if none are found.</p>
<pre><code>def getFirst(s, sLst):
    search = [[s.find(subS),subS] for subS in sLst] # list of [first_occurence, substring]
    search = filter(lambda x: x[0] &gt; 0, search) # filter out searches that returned -1
    if search:
        minSearch = min(search, key=lambda x: x[0]) # find first occurrence
        return minSearch[1] # get subStr
    else:
       return None  # if none found, returns none
</code></pre>
<h3>Example</h3>
<pre><code>searchList = ['Long','Short']
strTests = [
            "ABC Long Short DEF",
            "XYZ Short Long ZYX",
            "XYZ Short lbah ZYX",
            "XYZ blal  Long ZYX",
            "I am a random String",
            "I am a really Long string with no Short Parts"
            ]

# test against test cases for ["Long","Short"]
results = [getFirst(string, searchList) for string in strTests]
print results
['Long', 'Short', 'Short', 'Long', None, 'Long']

# test against test cases for more generic case
searchList = ['Long', 'Short', 'really']
results = [getFirst(string, searchList) for string in strTests]
print results
['Long', 'Short', 'Short', 'Long', None, 'really']
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#str.find" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#str.find</a></span>
<span class="comment-copy">Can you use <code>string.index</code> to figure out which one is first?</span>
<span class="comment-copy">What should be returned if neither is present?</span>
<span class="comment-copy">This needs adjustment to handle the case where <code>'Long'</code> or <code>'Short'</code> doesn't actually appear in <code>string</code>.</span>
<span class="comment-copy">this is going to throw an error unless "Long" and "Short" are both in the string.</span>
<span class="comment-copy">...Plus the necessary check for the existence of each string in the large string, and absence handling.</span>
<span class="comment-copy">Yes, for example if the string contains "Long" and not "Short", then the result should be "Long", but your code will not achieve any result at all because it will throw an error.</span>
<span class="comment-copy">@mehtunguh I have tested all the additional cases that you have mentioned. Thanks for that. In anycase <code>find</code> is indeed better</span>
<span class="comment-copy">Just by the way here: although an explicit <code>return None</code> is the preferred style, a lone <code>return</code> automatically returns <code>None</code>, and a function that ends without a <code>return</code> statement will do that as well.</span>
<span class="comment-copy">If <code>search != -1</code> is <code>True</code>, <code>search</code> will be more than <code>length</code>, so <code>length</code> will never get reassigned.</span>
<span class="comment-copy">@TigerhawkT3 yep I'm just editing it actually</span>
<span class="comment-copy">@Winterflags This will provide the first occurrence of a substring from a generic list of substrings that you provide. Hopefully this is a generic solution that you can use in your problem</span>
<span class="comment-copy">@TigerhawkT3 I've edited my answer - the idea was always to make it generic, I just missed a bit of logic initially.</span>
<span class="comment-copy">Thank you for your answer! Very informative.</span>
