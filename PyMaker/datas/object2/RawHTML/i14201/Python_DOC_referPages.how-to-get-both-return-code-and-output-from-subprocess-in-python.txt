<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/23420990/subprocess-check-output-return-code">subprocess.check_output return code</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>While developing python wrapper library for Android Debug Bridge (ADB), I'm using <em>subprocess</em> to execute adb commands in shell. Here is the simplified example:</p>
<pre><code>import subprocess

...

def exec_adb_command(adb_command):
    return = subprocess.call(adb_command)
</code></pre>
<p>If command executed propery <em>exec_adb_command</em> returns 0 which is OK.</p>
<p>But some adb commands return not only "0" or "1" but also generate some output  which I want to catch also. <em>adb devices</em> for example:</p>
<pre><code>D:\git\adb-lib\test&gt;adb devices
List of devices attached
07eeb4bb        device
</code></pre>
<p>I've already tried <em>subprocess.check_output()</em> for that purpose, and it does return output but not the return code ("0" or "1").</p>
<p>Ideally I would want to get a tuple where t[0] is return code and t[1] is actual output.</p>
<p>Am I missing something in subprocess module which already allows to get such kind of results?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Popen and communicate will allow you to get the output and the return code.</p>
<pre><code>from subprocess import Popen,PIPE,STDOUT

out = Popen(["adb", "devices"],stderr=STDOUT,stdout=PIPE)

t = out.communicate()[0],out.returncode
print(t)
('List of devices attached \n\n', 0)
</code></pre>
<p>check_output may also be suitable, a non-zero exit status will raise a CalledProcessError:</p>
<pre><code>from subprocess import check_output, CalledProcessError

try:
    out = check_output(["adb", "devices"])
    t = 0, out
except CalledProcessError as e:
    t = e.returncode, e.message
</code></pre>
<p>You  also need to redirect stderr to store the error output:</p>
<pre><code>from subprocess import check_output, CalledProcessError

from tempfile import TemporaryFile

def get_out(*args):
    with TemporaryFile() as t:
        try:
            out = check_output(args, stderr=t)
            return  0, out
        except CalledProcessError as e:
            t.seek(0)
            return e.returncode, t.read()
</code></pre>
<p>Just pass your commands:</p>
<pre><code>In [5]: get_out("adb","devices")
Out[5]: (0, 'List of devices attached \n\n')

In [6]: get_out("adb","devices","foo")
Out[6]: (1, 'Usage: adb devices [-l]\n')
</code></pre>
</div>
<span class="comment-copy">Thank you for the broad answer!</span>
<span class="comment-copy">@ViktorMalyi, no prob, you're welcome.</span>
<span class="comment-copy">It should not be e.message, but e.output: <a href="https://docs.python.org/2/library/subprocess.html#subprocess.CalledProcessError" rel="nofollow noreferrer">python2 doc</a>, <a href="https://docs.python.org/3/library/subprocess.html#subprocess.CalledProcessError" rel="nofollow noreferrer">python3 doc</a>?</span>
