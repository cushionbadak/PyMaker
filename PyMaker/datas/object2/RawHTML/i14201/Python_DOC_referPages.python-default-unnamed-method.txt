<div class="post-text" itemprop="text">
<p>is it possible to create a python object that has the following property:</p>
<pre><code>class Foo:
  def __default_method__(x):
      return x

f = Foo()
f(10)
&gt; 10
</code></pre>
<p>That is to say, an object that when instantiated allows for a method to be called without the need for an explicit method name?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes.  It's called <a href="https://docs.python.org/3/reference/datamodel.html#object.__call__" rel="noreferrer"><code>__call__()</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As Kevin pointed out in his answer, <code>__call__</code> is what you are looking for. </p>
<p>As a matter of fact, every time you create a class object you are using a callable class (the class's metaclass) without realizing it. </p>
<p>Usually we make a class this way: </p>
<pre><code>class C(object):
    a = 1
</code></pre>
<p>But you can also make a class this way: </p>
<pre><code>C = type('C',(object,),{'a':1})
</code></pre>
<p>The <code>type</code> class is the metaclass of all Python classes. The class <code>C</code> is <em>an instance</em> of <code>type</code>. So now, when you instantiate an object of type <code>C</code> using <code>C()</code>, you are actually <strong>calling</strong> the <code>type</code> class. </p>
<p>You can see this in action by replacing <code>type</code> with your own metaclass:</p>
<pre><code>class MyMeta(type):
    def __call__(self):
        print("MyMeta has been called!")
        super().__call__()

class C(object, metaclass = MyMeta):
    pass

c = C() # C() is a CALL to the class of C, which is MyMeta
&gt; My Meta has been called!
</code></pre>
</div>
<span class="comment-copy">This is called a functor.</span>
<span class="comment-copy">In Python, we usually don't use the term "functor," because in Python, functions are first class, so the functor pattern is a solution in search of a problem.  Instead, we speak of whether an object is <a href="https://docs.python.org/3/library/functions.html#callable" rel="nofollow noreferrer">callable</a>.</span>
<span class="comment-copy">perfect, thank you.</span>
