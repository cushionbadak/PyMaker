<div class="post-text" itemprop="text">
<p>I had to create my own "sorted" function by alphabetical order, and then to use than function in an other. The aim is to sort a list by alphabetical number, my test list has 4 elements, but the final aim is to apply this function to a huge list, this is why i'm trying it on a few elements first, because it's easier to analyse the results.</p>
<p>here is the function that sort by alphabetical order :</p>
<pre><code>def alphaOrder(word1, word2, index):
    if index == len(word1):
        return [word1, word2]
    if index == len(word2):
        return [word2, word1]
    if ord(word1[index]) == ord(word2[index]):
        return alphaOrder(word1, word2, index + 1)
    elif ord(word1[index]) &lt; ord(word2[index]):
        return [word1, word2]
    else:
        return [word2, word1]
</code></pre>
<p>here is the function i'm trying to make it work with a list of more than 2 elements :</p>
<pre><code>def sortMyList(liste):
    continu = True
    noInversion = False
    i = 0
    while continu:
        item0 = liste[i]
        item1 = liste[i + 1]
        l = alphaOrder(item0, item1, 0)
        if liste[i] != l[0]:
            noInversion = True

        liste[i]   = l[0]
        liste[i+1] = l[1]       
        if i + 1 &lt; len(liste):
            i += 1
        else:
            i = 0


        if noInversion:
            continu = False
    return liste
</code></pre>
<p>and here is my test list to verify that my function work or not:</p>
<pre><code>a = []
a.append("aaaazza")
a.append("anaaazza")
a.append("anaaazz11a")
a.append("aaaaa")

print(a)
print(sortMyList(a))
</code></pre>
<p>and when i'm printing, this is what i get :</p>
<pre><code>['aaaazza', 'anaaazza', 'anaaazz11a', 'aaaaa']
['aaaazza', 'anaaazz11a', 'anaaazza', 'aaaaa']
</code></pre>
<p>but i should get :</p>
<pre><code>['aaaaa', 'aaaazza', 'anaaazz11a', 'anaaazza']
</code></pre>
<p>do someone has any idea about what's wrong and what should i correct please ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that as soon as you find two items that need to be swapped you set <code>noInversion</code> true and exit from the list immediately after switching them.</p>
<p>What you need to do is complete a full pass through the list and only check your flag at the end of the the pass. Also you need to sort out the inversion flag: you want it to start off false, be set true when items are swapped and break the loop at the end if it is still false.</p>
<pre><code>def sortMyList(liste):
    continu = True
    while continu:
        inversion = False
        for i in range(len(liste)-1):
            item0 = liste[i]
            item1 = liste[i + 1]
            l = alphaOrder(item0, item1, 0)
            if liste[i] != l[0]:
                inversion = True

            liste[i]   = l[0]
            liste[i+1] = l[1]       
        if not inversion:
            continu = False
    return liste
</code></pre>
<p>Then there's a lot of cleaning up you can do to the code. Using <code>break</code> instead of the <code>continu</code> flag, and collapsing the assignments into the list will help:</p>
<pre><code>def sortMyList(liste):
    while True:
        inversion = False
        for i in range(len(liste)-1):
            item0 = liste[i]
            item1 = liste[i+1]
            liste[i], liste[i+1] = alphaOrder(item0, item1, 0)
            if liste[i] != item0:
                inversion = True

        if not inversion:
            break
    return liste
</code></pre>
<p>Still plenty more you can do to improve it, but that should get you started.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure behind the idea of doing your own function here but you could easily achieve this by simply using the built-in <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow">sorted</a> function:</p>
<pre><code>&gt;&gt;&gt; sorted(['aaaazza', 'anaaazza', 'anaaazz11a', 'aaaaa'])
['aaaaa', 'aaaazza', 'anaaazz11a', 'anaaazza']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is the final working function : </p>
<pre><code>def sortMyList(liste):
continu = True
inversion = False
i = 0
while continu:
    print("i : " + str(i) + " " + str(liste))
    item0 = liste[i]
    item1 = liste[i + 1]
    print("Comparison between " + item0 + " and " + item1 + " inversion : " + str(inversion))
    l = alphaOrder(item0, item1, 0)
    if liste[i] != l[0]:
        inversion = True
        print("I have to do an inversion : "  + str(inversion)) 
    liste[i]   = l[0]
    liste[i+1] = l[1]               
    if not inversion and i+2 == len(liste):
        continu = False         
    if (i + 2) &lt; len(liste):
        i += 1
    else:
        i = 0
        inversion = False                       
return liste
</code></pre>
<p>and the result is :</p>
<pre><code>['aaaaa', 'aaaazza', 'anaaazz11a', 'anaaazza']
</code></pre>
<p>I added a lot of prints to see every change in the list and when the inversion was True or False.</p>
<p>Thank you guys for your answers.</p>
</div>
<span class="comment-copy">try <code>a.sort()</code>.</span>
<span class="comment-copy">I would strongly suggest looking at one of the established sorting methods first and seeing how you can apply those concepts to your method. <a href="http://en.wikipedia.org/wiki/Bubble_sort" rel="nofollow noreferrer">Bubble sort</a> is one of the simplest but is pretty slow. <a href="http://en.wikipedia.org/wiki/Quicksort" rel="nofollow noreferrer">Quick sort</a> has better performance but can be slightly more complex to implement.</span>
<span class="comment-copy">Also as a tip, you shouldn't be using <code>ord()</code> to sort unless you want this to be considered a properly sorted list: <code>['A', 'C', 'b']</code></span>
<span class="comment-copy">He would still be using <code>ord()</code> to sort his list which is not going ot work the way he thinks it is. Given a list <code>a = ['A', 'b', 'C']</code> and sorting it using the ordinal values of the items gives us <code>['A', 'C', 'b']</code></span>
<span class="comment-copy">I got inspired by your answers and i found a way to do it. Thank you :)</span>
<span class="comment-copy">He explains in his question that he's trying to make his own version of the function, for whatever reason (homework, practice, etc).</span>
<span class="comment-copy">Yes, but he also mentions <code>"sorted" function by alphabetical order</code> which means he is simply looking for alphabetical ordering.</span>
<span class="comment-copy">yes Jesse Mu is right, i could have used the sorted() fuction but i had to write my own sorted function</span>
