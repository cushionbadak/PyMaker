<div class="post-text" itemprop="text">
<p>Here's my setup: <code>dictD</code> contains a key <code>users</code> paired with value = <code>list of UserObjects</code>. Each <code>UserObject</code> has an attribute username plus two arrays, threads and comments.</p>
<p>I was able to convert dictD's array of user objects into a dictionary style with this call:</p>
<p><code>dictD["users"] = [user.__dict__ for user in dictD["users"]</code>]</p>
<p>If I dump out dictD, here's the relevant part before I try to do my manipulation:</p>
<pre><code>{
    'users':[
    {
        'username': Redditor(user_name='$$$$$$$$$$'),
        'threads':[
            &lt;__main__.redditThread instance at 0x7f05db28b320&gt;
        ],
    'comments':[
        &lt;__main__.comment instance at 0x7f05db278e60&gt;
    ]
},
{
    'username': Redditor(user_name='##########e\ gone'),
    'threads':[
        &lt;__main__.redditThread instance at 0x7f05db2a4a70&gt;
    ],
    'comments':[
        &lt;__main__.comment instance at 0x7f05db298e18&gt;
    ]
}
</code></pre>
<p>As you can see the comments contain <code>comment</code> objects and the threads list contains <code>thread</code> objects. So I'd like to do the same call for them that I did for the <code>users</code> array. But when I try to do this:</p>
<pre><code>for user in dictD["users"]:
    user.threads = [thread.__dict__ for thread in user.threads]
    user.comments = [comment.__dict__ for comment in user.comments]
</code></pre>
<p>I run into this error:</p>
<p><code>AttributeError: 'dict' object has no attribute 'threads'</code></p>
<p>I also tried </p>
<pre><code>users = dictD["users"]
for user in users...
</code></pre>
<p>but this triggers the same error message. How can I turn objects in lists into dictionary form when those objects' lists are themselves held within objects within lists within a dictionary?</p>
<p>Incidentally, I am doing all this so I can insert these objects into MongoDB, so if there is an easier way to serialize a complex object, please let me into the secret. Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Promoting my comment to an answer since it seems reasonable and nobody else is posting: it looks at a glance like you're confusing Python for Javascript: a dict with a key 'threads' is not an object you can reference with <code>.threads</code>, only with <code>["threads"]</code>. ie. <code>user.threads</code> should be <code>user["threads"]</code>. A dict usually only has the same standard attributes (see: <a href="https://docs.python.org/2/library/stdtypes.html#typesmapping" rel="nofollow">https://docs.python.org/2/library/stdtypes.html#typesmapping</a> or <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow">https://docs.python.org/3/library/stdtypes.html#mapping-types-dict</a> for Python 3.) The problem isn't that you're trying to call <code>__dict__</code> on an object, it's that you're trying to get an attribute from an object that doesn't exist, later in that same line of code.</p>
<p>If you want to recreate complex objects from MongoDB rather than just nested dicts and lists then that is basically a process of deserialization; you can either handle that manually, or maybe use some sort of object mapping library to do it for you (eg. something like <a href="https://github.com/binarydud/mongoobject" rel="nofollow">Mongoobject</a> might work, though I've not tested it myself)</p>
</div>
<span class="comment-copy">Looks at a glance like you're confusing Python for Javascript: a dict with a key 'threads' is not an object you can reference with <code>.threads</code>, only with <code>["threads"]</code>. ie. <code>user.threads</code> should be <code>user["threads"]</code>.</span>
