<div class="post-text" itemprop="text">
<p>Python 3.4 seemingly randomly decides whether it returns the real or complex root of a number using the <code>**</code> operator:  </p>
<pre><code>&gt;&gt;&gt; (863.719-2500)
-1636.281  
&gt;&gt;&gt; -1636.281**(1/3)  
-11.783816270504108
&gt;&gt;&gt; (863.719-2500)**(1/3)  
(5.891908135252055+10.205084243784958j)
</code></pre>
<p>Is there a way to ensure you get the real root when cube rooting rather than one of the complex ones?</p>
</div>
<div class="post-text" itemprop="text">
<p>In the second case actually the cube root is getting evaluated first then the minus sign is getting applied, hence the real root.</p>
<p>That is <code>-1636.281**(1/3)</code> becomes <code>-(1636.281**(1/3))</code> . And you can use a similar logic to get the real cubic roots as well.</p>
<p>But actually, when doing cubic root of negative numbers you always get complex numbers in python.</p>
<pre><code>&gt;&gt;&gt; -1636.281**(1/3)  
-11.783816270504108
&gt;&gt;&gt; (-1636.281)**(1/3)
(5.891908135252055+10.205084243784958j)
</code></pre>
<p>If you want real numbers you can add code like -</p>
<pre><code>def cube(x):
    if x &gt;= 0:
        return x**(1/3)
    elif x &lt; 0:
        return -(abs(x)**(1/3))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/expressions.html#the-power-operator" rel="nofollow">https://docs.python.org/3/reference/expressions.html#the-power-operator</a></p>
<blockquote>
<p>In an unparenthesized sequence of power and unary operators, the operators are evaluated from right to left (this does not constrain the evaluation order for the operands): <code>-1**2</code> results in <code>-1</code>.</p>
</blockquote>
<p>So your expression</p>
<pre><code>-1636.281**(1/3)
</code></pre>
<p>is actually evaluated as</p>
<pre><code>-(1636.281**(1/3))
</code></pre>
</div>
<span class="comment-copy">In your first example, the order of operations means that you are taking the cube root of positive 1636.281 and then taking the negative of the result.</span>
<span class="comment-copy">It's not random, but the consequence of defining <code>z**p</code> as <code>exp(p*log(z))</code> where the complex logarithm has a branch cut that puts its imaginary part in the interval (-π, π].</span>
<span class="comment-copy">Oh, that would explain the weird behaviour. Also that code can be improved since 0**(1/3) is 0 you can just do if x &gt;= 0: ... else: ...</span>
<span class="comment-copy">I didn't understand the comment about <code>0</code> , its already returning <code>0</code> for <code>0</code></span>
<span class="comment-copy">Yes, correct , sorry copy paste mistake :)</span>
<span class="comment-copy">oh ok, done. thanks</span>
