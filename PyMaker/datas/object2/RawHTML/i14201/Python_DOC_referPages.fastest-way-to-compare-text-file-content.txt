<div class="post-text" itemprop="text">
<p>I have a question to help streamline my programming. 
So I have this file <code>text.txt</code> and in it I want to look through it and compare it with a list of words <code>words</code> and each time the word is found it adds <code>1</code> to an integer. </p>
<pre><code>words = ['the', 'or', 'and', 'can', 'help', 'it', 'one', 'two']
ints = []
with open('text.txt') as file:
    for line in file:
        for part in line.split():
            for word in words:
                if word in part:
                    ints.append(1)
</code></pre>
<p>I was just wondering if there was a faster way to do this? The text files could be rather larger and the list of words will be much larger. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can convert the <code>words</code> to a <code>set</code>, so that the lookups will be faster. This should give a good performance boost to your program, because looking up a value in a list has to traverse the list one element at a time (O(n) runtime complexity), but when you convert the list to a set, the runtime complexity will reduce to O(1) (constant time). Because sets use hashes to find the elements.</p>
<pre><code>words = {'the', 'or', 'and', 'can', 'help', 'it', 'one', 'two'}
</code></pre>
<p>And then whenever there is a match, you can use <code>sum</code> function to count it like this</p>
<pre><code>with open('text.txt') as file:
    print(sum(part in words for line in file for part in line.split()))
</code></pre>
<hr/>
<p><strong>Boolean values and their integer equivalents</strong></p>
<p>In Python, the result of boolean expressions will be equal to either <code>0</code> or <code>1</code> for <code>False</code> and <code>True</code> respectively.</p>
<pre><code>&gt;&gt;&gt; True == 1
True
&gt;&gt;&gt; False == 0
True
&gt;&gt;&gt; int(True)
1
&gt;&gt;&gt; int(False)
0
&gt;&gt;&gt; sum([True, True, True])
3
&gt;&gt;&gt; sum([True, False, True])
2
</code></pre>
<p>So whenever you check if <code>part in words</code>, the result will be either <code>0</code> or <code>1</code> and we <code>sum</code> all those values.</p>
<hr/>
<p>The above seen code is functionally equivalent to</p>
<pre><code>result = 0
with open('text.txt') as file:
    for line in file:
        for part in line.split():
            if part in words:
                 result += 1
</code></pre>
<hr/>
<p><strong>Note:</strong> In case you really wanted to get <code>1</code>'s in a list whenever there is a match, then you can simply convert the generator expression to <code>sum</code> to a list comprehension, like this</p>
<pre><code>with open('text.txt') as file:
    print([int(part in words) for line in file for part in line.split()])
</code></pre>
<hr/>
<p><strong>Frequency of words</strong></p>
<p>If you actually wanted to find the frequency of individual words in the <code>words</code>, then you can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> like this</p>
<pre><code>from collections import Counter
with open('text.txt') as file:
    c = Counter(part for line in file for part in line.split() if part in words)
</code></pre>
<p>This will internally count the number of times each of the words in <code>words</code> occur in the file.</p>
<hr/>
<p>As per <a href="https://stackoverflow.com/questions/30694928/fastest-way-to-compare-text-file-content/30694973?noredirect=1#comment49448448_30694973">the comment</a>, you can have a dictionary where you can store positive words with positive score, and negative words with negative score and count them like this</p>
<pre><code>words = {'happy': 1, 'good': 1, 'great': 1, 'no': -1, 'hate': -1}
with open('text.txt') as file:
    print(sum(words.get(part, 0) for line in file for part in line.split()))
</code></pre>
<p>Here, we use <code>words.get</code> dictionary to get the value stored against the word and if the word is not found in the dictionary (neither a good word nor a bad word) then return the default value <code>0</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>set.intersection</code> to find the intersection between a set and list so as a more efficient way put your words within a <code>set</code> and do :</p>
<pre><code>words={'the','or','and','can','help','it','one','two'}
ints=[]
with open('text.txt') as f:
    for line in f:
        for _ in range(len(words.intersection(line.split()))):
              ints.append(1)
</code></pre>
<p>Note that the preceding solution is based on your code that you added 1 to a list. of you want to find the final count you can use a generator expression within <code>sum</code> :</p>
<pre><code>words={'the','or','and','can','help','it','one','two'}
with open('text.txt') as f:
    sum(len(words.intersection(line.split())) for line in f)
</code></pre>
</div>
<span class="comment-copy">Do you want to find the number of matches?</span>
<span class="comment-copy">Thanks for this, I did a <code>timeit</code> of all the functions listed here and yours came out the fastest. Also as to why I'm doing <code>1</code>'s. I'm comparing articles as to whether they are positive or negative articles. So if there is a positive word it puts a <code>1</code>, if negative then <code>-1</code>. Then it sums it and shows whether the article has a positive or negative tone. So thanks again!</span>
<span class="comment-copy">@user1985351 Okay, I included a way to solve the actual problem you are trying to solve. Let me know if it helps, otherwise I ll remove it. Also, please include all these information in the question itself. It will help the future readers.</span>
