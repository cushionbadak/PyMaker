<div class="post-text" itemprop="text">
<p>I am making a maths test where each question will be either adding, multiplying or subtracting randomly chosen numbers.  My operator will be chosen at random, however I cannot work out how to calculate with the operator.  My problem is here:</p>
<pre><code>answer = input()
if answer ==(number1,operator,number2):
    print('Correct')
</code></pre>
<p>How can I make it so the operator is used in a calculation.  For example, if the random numbers were two and five, and the random operator was '+', how would I code my program so that it would end up actually doing the calculation and getting an answer, so in this case it would be: </p>
<pre><code>answer =input()
if answer == 10:
    print('Correct')
</code></pre>
<p>Basically, how can I do a calculation to check to see if the answer is actually correct?
My full code is below.</p>
<pre><code>import random
score = 0 #score of user
questions = 0 #number of questions asked
operator = ["+","-","*"]
number1 = random.randint(1,20)
number2 = random.randint(1,20)
print("You have now reached the next level!This is a test of your addition and subtraction")
print("You will now be asked ten random questions")
while questions&lt;10: #while I have asked less than ten questions
    operator = random.choice(operator)
    question = '{} {} {}'.format(number1, operator, number2)
    print("What is " + str(number1) +str(operator) +str(number2), "?")
    answer = input()
    if answer ==(number1,operator,number2): 
        print("You are correct")
        score =score+1
    else:
        print("incorrect")
</code></pre>
<p>Sorry if I have been unclear, thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>Use functions in a dictionary:</p>
<pre><code>operator_functions = {
    '+': lambda a, b: a + b, 
    '-': lambda a, b: a - b,
    '*': lambda a, b: a * b, 
    '/': lambda a, b: a / b,
}
</code></pre>
<p>Now you can map an operator in a string to a function:</p>
<pre><code>operator_functions[operator](number1, number2)
</code></pre>
<p>There are even ready-made functions for this is the <a href="https://docs.python.org/3/library/operator.html" rel="nofollow"><code>operator</code> module</a>:</p>
<pre><code>import operator

operator_functions = {
    '+': operator.add, 
    '-': operator.sub,
    '*': operator.mul,
    '/': operator.truediv,
}
</code></pre>
<p>Note that you need to be <em>careful</em> about using variable names! You used <code>operator</code> first to create a list of operators, then also use it to store the one operator you picked with <code>random.choice()</code>, <em>replacing</em> the list:</p>
<pre><code>operator = random.choice(operator)
</code></pre>
<p>Use <em>separate names</em> here:</p>
<pre><code>operators = ["+","-","*"]

# ...

picked_operator = random.choice(operators)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for the <a href="https://docs.python.org/2/library/functions.html#eval" rel="nofollow">eval</a> function.  <code>eval</code> will take a string with math operators and compute the answer. In your final if statement check it like this...</p>
<pre><code>if answer == eval(question):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import operator
import random
operators = {
    "+": operator.add,
    "-": operator.sub,
    "/": operator.truediv,
    "*": operator.mul
}


y = float(input("Enter number: "))
z = float(input("Enter number: "))
x = random.choice(operators.keys())

print (operators[x](y, z))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/2/library/operator.html" rel="nofollow">operator</a> lib, creating  a dict with operators as keys and the methods as values.</p>
<pre><code>from operator import add, mul, sub
import random

score = 0  # score of user
questions = 0  # number of questions asked
operators = {"+": add, "-": sub, "*": mul}
print("You have now reached the next level!This is a test of your addition and subtraction")
print("You will now be asked ten random questions")
# create list of dict keys to pass to random.choice
keys = list(operators)
# use range 
for _ in range(10):  
    number1 = random.randint(1, 20)
    number2 = random.randint(1, 20)
    operator = random.choice(keys)
    # cast answer to int, operators[operator]will be either add, mul or sub
    # which we then call on number1 and number2
    answer = int(input("What is {} {} {}?".format(number1,operator, number2)))
    if answer == (operators[operator](number1, number2)):
        print("You are correct")
        score += 1
    else:
        print("incorrect")
</code></pre>
<p>You  need to cast <code>answer</code> to int a string could never be equal to an int.
In the code  <code>random.choice(keys)</code> will pick one of the three dicts keys <code>* - or +</code>, we do a lookup on the dict with <code>operators[operator]</code> i.e <code>operators["*"]</code> returns <code>mul</code> we can then call <code>mul(n1,n2)</code>  on the two random numbers.</p>
<p>You also need to move the  <code>number1 = random.randint(1, 20)</code>.. inside the while loop or you will end up asking the same questions and you can pass the string to input, you don't need to print.</p>
</div>
<div class="post-text" itemprop="text">
<p>For your specific case, instead of making the dictionary, I would just create a list of tuples with the operator string representation and the operator builtin function:</p>
<pre><code>import operator
import random

operators = [('+', operator.add), ('-', operator.sub), ('*', operator.mul)]

for i in range(10):
    a = random.randint(1, 20)
    b = random.randint(1, 20)
    op, fn = random.choice(operators)
    print("{} {} {} = {}".format(a, op, b, fn(a, b)))
</code></pre>
<hr/>
<pre><code>14 * 4 = 56
6 + 12 = 18
11 + 11 = 22
7 - 9 = -2
9 - 4 = 5
17 * 5 = 85
19 - 13 = 6
9 - 4 = 5
20 * 20 = 400
5 * 3 = 15
</code></pre>
<hr/>
<p><code>Random.choice</code> on your list will return a tuple that you can unpack into the operator str representation and the function that you can call.</p>
<pre><code>import operator
import random

score = 0
operators = [('+', operator.add), ('-', operator.sub), ('*', operator.mul)]

for i in range(10):
    a = random.randint(1, 20)
    b = random.randint(1, 20)
    op, fn = random.choice(operators)
    prompt = "What is {} {} {}?\n".format(a, op, b)
    if int(input(prompt)) == fn(a, b):
        score += 1
        print("You are correct")
    else:
        print("incorrect")

print("Score: {}".format(score))
</code></pre>
</div>
<span class="comment-copy">Sorry I forgot to mention I am very new to Python, you lost me at dictionary, is there any way I could do it using roughly the same as my existing code? Thanks though</span>
<span class="comment-copy">@Alex: You <i>could</i> use <code>if operator == '+': result = number1 + number2</code>, <code>elif operator == '-':</code>, etc. But that is not nearly as efficient.</span>
<span class="comment-copy">@Alex: Either approach runs a different piece of code based on your <code>operator</code> value, but the dictionary is simply.. more efficient and compact. See the <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">tutorial on dictionaries</a>.</span>
<span class="comment-copy">Thankyou! Just tried it and this works.  Coukd you possibly explain how it works though - what does the random.choice(keys) line allow?</span>
<span class="comment-copy">@Alex, yep, still editing and tidying up.</span>
