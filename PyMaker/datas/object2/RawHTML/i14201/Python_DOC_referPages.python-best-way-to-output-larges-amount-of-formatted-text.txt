<div class="post-text" itemprop="text">
<p>I'm trying to think of the best way to write large amounts of formatted text in python to a text file. I'm creating a tool that generates PHP files automatically depending on user input.</p>
<p>The only way my limited knowledge of python can come up with at the moment is write each line individually to the file like so:</p>
<pre><code>print("    &lt;html&gt;", file=f)
print("        &lt;head&gt;", file=f)
print("        &lt;/head&gt;", file=f)
print("        &lt;body&gt;", file=f)
.....
</code></pre>
<p>The skeleton of the document I print to the file like above and add in variables the user supplies via raw_input such as page title, meta data etc</p>
<p>What would be a better way of doing this?</p>
<p>I suppose what I would be looking for is something similar to pythons commenting systems like this:</p>
<pre><code>"""
page contents with indentation here + variables
"""
</code></pre>
<p>Then write this out to a file</p>
</div>
<div class="post-text" itemprop="text">
<p>what you call "python commenting system" is NOT a "comment system" - comments start with a "#" -, it's a <a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow">syntax for multiline strings</a>. The fact that it's also used for docstrings (which are not comments but documentation and become attributes of the documented object) doesn't make it less of a proper python string. IOW, you can use it for simple templating:</p>
<pre><code>tpl = """
&lt;html&gt;
    &lt;head&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Hello {name}&lt;/h1&gt;
    &lt;/body&gt;
&lt;/html&gt;
"""
print tpl.format(name="World")
</code></pre>
<p>but for anything more involved - conditionals, loops, etc - you'd better use a real templating system (jinja probably being a good choice).</p>
</div>
<div class="post-text" itemprop="text">
<p>You should consider looking at <a href="https://wiki.python.org/moin/Templating" rel="nofollow">Python templating</a>. This will allow you to enrich your preexisting data with variables (per your comment and update of the question).</p>
</div>
<div class="post-text" itemprop="text">
<p>We can write output data line by line:</p>
<pre><code>with open("test1.txt", "wt") as f:
    for i in range(1000000):
        f.write("Some text to be written to the file.\n")
</code></pre>
<p>and it takes some time to execute:</p>
<pre><code>$ time python test1.py

real    0m0.560s
user    0m0.389s
sys     0m0.101s
</code></pre>
<p>Or we can prepare the whole output in memory and then write it at once:</p>
<pre><code>r = []
for i in range(1000000):
    r.append("Some text to be written to the file.\n")
with open("test2.txt", "wt") as f:
    f.write("".join(r))
</code></pre>
<p>The execution time is different:</p>
<pre><code>$ time python test2.py

real    0m0.433s
user    0m0.252s
sys     0m0.100s
</code></pre>
<p>Simply said, operations in memory are usually faster than operations with files.</p>
</div>
<div class="post-text" itemprop="text">
<p>if you have all the lines stored in a list, you could iterate on the list:</p>
<pre><code># create lines however you want, put them in a list
linelist = ["    &lt;html&gt;", "        &lt;head&gt;", "        &lt;/head&gt;", "        &lt;body&gt;"]

# open file
f=open('myfile.txt','w')

#write all lines to the file
for line in linelist:
    # Add a newline character after your string 
    f.write("".join([line,"\n"]))

f.close()
</code></pre>
<p>Or, more succinctly:</p>
<pre><code>linelist = ["    &lt;html&gt;", "        &lt;head&gt;", "        &lt;/head&gt;", "        &lt;body&gt;"]

f=open('myfile.txt','w')
f.write("\n".join(linelist))
f.close()
</code></pre>
</div>
<span class="comment-copy">where do you get your data from?</span>
<span class="comment-copy">'the skeleton' of the document I currently just print out and add in variables that users input via raw_input such as page title, meta data etc</span>
<span class="comment-copy">I like the idea of this answer and the look of jinja</span>
