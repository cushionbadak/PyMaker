<div class="post-text" itemprop="text">
<p>I have a set of strings, e.g.</p>
<pre><code>my_prefix_what_ever
my_prefix_what_so_ever
my_prefix_doesnt_matter
</code></pre>
<p>I simply want to find the longest common portion of these strings, here the prefix. In the above the result should be</p>
<pre><code>my_prefix_
</code></pre>
<p>The strings</p>
<pre><code>my_prefix_what_ever
my_prefix_what_so_ever
my_doesnt_matter
</code></pre>
<p>should result in the prefix</p>
<pre><code>my_
</code></pre>
<p>Is there a relatively painless way in Python to determine the prefix (without having to iterate over each character manually)?</p>
<p>PS: I'm using Python 2.6.3.</p>
</div>
<div class="post-text" itemprop="text">
<p>Never rewrite what is provided to you: <a href="https://docs.python.org/3/library/os.path.html#os.path.commonprefix"><code>os.path.commonprefix</code></a> does exactly this:</p>
<blockquote>
<p>Return the longest path prefix (taken
  character-by-character) that is a prefix of all paths in list. If list
  is empty, return the empty string (<code>''</code>). Note that this may return
  invalid paths because it works a character at a time.</p>
</blockquote>
<p>For comparison to the other answers, here's the code:</p>
<pre><code># Return the longest prefix of all list elements.
def commonprefix(m):
    "Given a list of pathnames, returns the longest common leading component"
    if not m: return ''
    s1 = min(m)
    s2 = max(m)
    for i, c in enumerate(s1):
        if c != s2[i]:
            return s1[:i]
    return s1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/questions/6718196/python-determine-prefix-from-a-set-of-similar-strings/6718435#6718435">Ned Batchelder</a> is probably right. But for the fun of it, here's a more efficient version of <a href="https://stackoverflow.com/questions/6718196/python-determine-prefix-from-a-set-of-similar-strings/6718270#6718270">phimuemue</a>'s answer using <code>itertools</code>. </p>
<pre><code>import itertools

strings = ['my_prefix_what_ever', 
           'my_prefix_what_so_ever', 
           'my_prefix_doesnt_matter']

def all_same(x):
    return all(x[0] == y for y in x)

char_tuples = itertools.izip(*strings)
prefix_tuples = itertools.takewhile(all_same, char_tuples)
''.join(x[0] for x in prefix_tuples)
</code></pre>
<p>As an affront to readability, here's a one-line version :)</p>
<pre><code>&gt;&gt;&gt; from itertools import takewhile, izip
&gt;&gt;&gt; ''.join(c[0] for c in takewhile(lambda x: all(x[0] == y for y in x), izip(*strings)))
'my_prefix_'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's my solution:</p>
<pre><code>a = ["my_prefix_what_ever", "my_prefix_what_so_ever", "my_prefix_doesnt_matter"]

prefix_len = len(a[0])
for x in a[1 : ]:
    prefix_len = min(prefix_len, len(x))
    while not x.startswith(a[0][ : prefix_len]):
        prefix_len -= 1

prefix = a[0][ : prefix_len]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following is an working, but probably quite inefficient solution.</p>
<pre><code>a = ["my_prefix_what_ever", "my_prefix_what_so_ever", "my_prefix_doesnt_matter"]
b = zip(*a)
c = [x[0] for x in b if x==(x[0],)*len(x)]
result = "".join(c)
</code></pre>
<p>For small sets of strings, the above is no problem at all. But for larger sets, I personally would code another, manual solution that checks each character one after another and stops when there are differences. </p>
<p>Algorithmically, this yields the same procedure, however, one might be able to avoid constructing the list <code>c</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just out of curiosity I figured out yet another way to do this:</p>
<pre><code>def common_prefix(strings):

    if len(strings) == 1:#rule out trivial case
        return strings[0]

    prefix = strings[0]

    for string in strings[1:]:
        while string[:len(prefix)] != prefix and prefix:
            prefix = prefix[:len(prefix)-1]
        if not prefix:
            break

    return prefix

strings = ["my_prefix_what_ever","my_prefix_what_so_ever","my_prefix_doesnt_matter"]

print common_prefix(strings)
#Prints "my_prefix_"
</code></pre>
<p>As Ned pointed out it's probably better to use <code>os.path.commonprefix</code>, which is a pretty elegant function.</p>
</div>
<div class="post-text" itemprop="text">
<p>The second line of this employs the reduce function on each character in the input strings.  It returns a list of N+1 elements where N is length of the shortest input string.</p>
<p>Each element in <strong>lot</strong> is either (a) the input character, if <em>all</em> input strings match at that position, or (b) None.  <strong>lot.index(None)</strong> is the position of the first <strong>None</strong> in lot: the length of the common prefix.  <strong>out</strong> is that common prefix.</p>
<pre><code>val = ["axc", "abc", "abc"]
lot = [reduce(lambda a, b: a if a == b else None, x) for x in zip(*val)] + [None]
out = val[0][:lot.index(None)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another way of doing this using OrderedDict with minimal code.</p>
<pre><code>import collections
import itertools

def commonprefix(instrings):
    """ Common prefix of a list of input strings using OrderedDict """

    d = collections.OrderedDict()

    for instring in instrings:
        for idx,char in enumerate(instring):
            # Make sure index is added into key
            d[(char, idx)] = d.get((char,idx), 0) + 1

    # Return prefix of keys while value == length(instrings)
    return ''.join([k[0] for k in itertools.takewhile(lambda x: d[x] == len(instrings), d)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a simple clean solution. The idea is to use zip() function to line up all the characters by putting them in a list of 1st characters, list of 2nd characters,...list of nth characters. Then iterate each list to check if they contain only 1 value.</p>
<pre><code>a = ["my_prefix_what_ever", "my_prefix_what_so_ever", "my_prefix_doesnt_matter"]

list = [all(x[i] == x[i+1] for i in range(len(x)-1)) for x in zip(*a)]

print a[0][:list.index(0) if list.count(0) &gt; 0 else len(list)]
</code></pre>
<p>output: my_prefix_</p>
</div>
<span class="comment-copy">So you are in effect asking for the <b><a href="http://en.wikipedia.org/wiki/Longest_common_subsequence" rel="nofollow noreferrer">longest common subsequence</a></b>?</span>
<span class="comment-copy">Good ol' Python. Has exactly the function I need, for exactly the reason I need it.</span>
<span class="comment-copy">this is awesome logic.</span>
<span class="comment-copy">I think this can only handle two strings in m, isn't it? The comment though says "all list elements, kinda indicating any number of elements"</span>
<span class="comment-copy">@sramij Not exactly! min() and max() on string is lexicographical minimum and mnaximum like in dictionary. So when minimum and maximum have same first letter, then all other words between their have to have same letter too, and so on.</span>
<span class="comment-copy">Do the arguments need to be valid path names? What happens if they are not? The documentation says nothing, so I'm not so sure this can be used for arbitrary strings.</span>
<span class="comment-copy">Welcome to Stack Overflow! While this code snippet may solve the question, including an explanation of <i>how</i> and <i>why</i> this solves the problem <a href="//meta.stackexchange.com/q/114762">would really help</a> to improve the quality of your post. Remember that you are answering the question for readers in the future, not just the person asking now!  Please <a href="https://stackoverflow.com/posts/40790447/edit">edit</a> your answer to add explanation, and give an indication of what limitations and assumptions apply.</span>
<span class="comment-copy">how is this clean?</span>
<span class="comment-copy">how is it not clean? Other solutions have codes in blocks. Logic is simple enough to do it in a single assignment.</span>
