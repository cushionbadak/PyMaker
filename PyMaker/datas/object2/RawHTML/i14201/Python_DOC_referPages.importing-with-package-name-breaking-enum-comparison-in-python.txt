<div class="post-text" itemprop="text">
<p>My friend and I are making chess AIs in Python, but we're running into a mysterious problem with enums. We encode the piece types in an enum like so:</p>
<p>Piece.py:</p>
<pre><code>from enum import Enum

class PieceType(Enum):
    type_one = 1
    ...

def recognise_type(my_type):
    print("Passed ", my_type)

    if my_type is PieceType.type_one:
        print("Type One")
    else:
        print("Type not recognised")
</code></pre>
<p>We ask the AI for a piece (for promoting a pawn for instance) and call recognise_type:</p>
<p>ai.py:</p>
<pre><code>import Piece

def get_promotion():
    return Piece.PieceType.type_one
</code></pre>
<p>bug.py:</p>
<pre><code>import Piece
import ai

my_type = ai.get_promotion()
Piece.recognise_type(my_type)
</code></pre>
<p>So far so good; running bug.py outputs the following:</p>
<pre><code>Passed PieceType.type_one
Type One
</code></pre>
<p>But here's the thing. The name of this package is 'Chess', but if in ai.py we change <code>import Piece</code> to <code>from Chess import Piece</code> (for instance if we want to put ai.py in a different package), then something goes wrong. Running bug.py now gives:</p>
<pre><code>Passed PieceType.type_one
Type not recognised
</code></pre>
<p>What's happening here? Why does including the package name in the import statement break enum comparison?</p>
</div>
<div class="post-text" itemprop="text">
<p>As far as Python is concerned, you are importing a different module; you have <code>Piece</code> and you have <code>Chess.Piece</code>. Python will create <em>separate module objects</em> for these two modules, each with a separate enum class. The values on those classes are never going to test as equal.</p>
<p>If all your modules are part of the <code>Chess</code> package then you should <em>not</em> treat the files in that package as top-level modules. That means you should not add that directory to your Python path (explicitly or implictly by using a script in that directory).</p>
</div>
<span class="comment-copy">Why are you using <code>is</code> for comparison, rather than <code>==</code>?</span>
<span class="comment-copy">@DanielRoseman: because you <a href="https://docs.python.org/3/library/enum.html#comparisons" rel="nofollow noreferrer">can do that with enum values</a>.</span>
<span class="comment-copy">Just so I understand, you're saying that we should use <code>Chess.</code> for <i>all</i> of our imports, and that way we'll be using the same module object in all the files?</span>
<span class="comment-copy">@Megdatronica: exactly. Or use <code>from . import Piece</code> to use relative imports. Only if <code>Chess/</code> is part of your Python path can you import the other modules in the package as if they are top-level packages anyway.</span>
<span class="comment-copy">Thanks, that's really helpful!</span>
