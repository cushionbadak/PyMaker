<div class="post-text" itemprop="text">
<p>We find an interesting issue on <code>yield</code> of Python. We wrote a simple program:</p>
<pre><code>def F():
    for i in range(5, 9):
        for j in range(21, 29):
            x = yield i
            y = (yield j) * 100
            x += y
            print '&gt;&gt;&gt;', x

gen = F()
next(gen)
a1 = gen.send(66)
a2 = gen.send(77)
print a1
print a2
</code></pre>
<p>The result is amazing:</p>
<pre><code>&gt;&gt;&gt; 7766
21
5
</code></pre>
<p>i=5, j=21 =&gt; yield i =&gt; a1=21 =&gt; send(66) =&gt; x = 66</p>
<p>i=5, j=21 =&gt; yield j =&gt; a2=5 =&gt; send(77) =&gt; y = 7700</p>
<p>print 7766</p>
<p>print 21</p>
<p>print 5</p>
<p>i.e. after <code>yield i</code>, <code>a1</code> gets the value of <code>j</code>; after <code>yield j</code>, <code>a2</code> gets the value of <code>i</code>.</p>
<p>Does anyone know why <code>yield</code> do like this? Why not a1=5, a2=21?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>next(gen)</code> takes the first element from the generator (<code>i</code>):</p>
<pre><code>next(gen) # 5
</code></pre>
<p>Then <code>gen.send(66)</code> is equal to <code>j</code> (which is 21). Since your second loop is still working, subsequent <code>gen.send(77)</code> is equal to <code>i</code> (which is still 5).</p>
<p>Essentially, the problem is that you consume <em>3</em> values, instead of <em>2</em>.</p>
<p>Use <a href="https://docs.python.org/3/reference/expressions.html#generator.send" rel="nofollow"><code>gen.send(None)</code></a> or <code>next(gen)</code> to start the generator:</p>
<pre><code>a1 = gen.send(None) # or a1 = next(gen)
a2 = gen.send(77)
print(a1, a2) # prints 5 21
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>next(gen)</code> calls into the method, which returns from the first <code>yield i</code>. Your <code>a1 = gen.send(66)</code> then resumes the method at <code>y = (yield j) * 100</code> and yields <code>j</code> from there. The <code>a2 = gen.send(77)</code> line resumes the method directly afterwards and returns from <code>x = yield i</code>.</p>
</div>
<span class="comment-copy">@AshwiniChaudhary Sorry for missing next() function excuted.</span>
