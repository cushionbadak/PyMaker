<div class="post-text" itemprop="text">
<p>In IPython 3 interactive shell:</p>
<pre><code>In [53]: set2 = {1, 2, True, "hello"}

In [54]: len(set2)
Out[54]: 3

In [55]: set2
Out[55]: {'hello', True, 2}
</code></pre>
<p>Is that because 1 and True get the same interpetation so given that set eliminates duplicates, only one of them (True) gets to stay?
How can we keep both?</p>
</div>
<div class="post-text" itemprop="text">
<p>A set is a collection of <a href="https://docs.python.org/3/glossary.html#term-hashable" rel="nofollow">hashables</a>. Even though the statement <code>1 is True</code> is False, the statement <code>1 == True</code> is True. Because of that, they have the same hash value and cannot exist separately in a set, and <strong>you cannot keep them both in a set</strong></p>
<p><strong>EDIT</strong> To make it explicit, as jme pointed out, it is because BOTH things are true - they are equal (per <code>__eq__</code>) AND they have the same <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow">hash value</a> (per <code>__hash__</code>). </p>
<p>In a perfect world, equal objects would also have the same hash value, and thankfully this is true for built-in types.</p>
</div>
<span class="comment-copy">Don't use a set. Try <code>1 + True</code>. They are the same thing, so don't try to separate them</span>
<span class="comment-copy">Why do you need to keep both <code>1</code> and <code>True</code>? The only difference is the type. In all other aspects, they're interchangeable, as far as I know.</span>
<span class="comment-copy">Or else you can keep your numbers in string format and typecast when you need them.</span>
<span class="comment-copy">A <code>set</code> should contain only elements of the same type. So why do you need different types?</span>
<span class="comment-copy">Closely related: <a href="http://stackoverflow.com/q/30843103/3001761">stackoverflow.com/q/30843103/3001761</a></span>
<span class="comment-copy">A clarification: two items with the same hash value <i>can</i> appear in the same set. They must be inequal, however.</span>
