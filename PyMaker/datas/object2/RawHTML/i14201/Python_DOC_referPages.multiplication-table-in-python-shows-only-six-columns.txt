<div class="post-text" itemprop="text">
<p>I wrote a code in PyCharm and after running it, PyCharm and Python3 show only six columns.</p>
<pre><code>layout = "{0:&gt;2} {1:&gt;2} {2:&gt;2} {3:&gt;2} {4:&gt;2} {5:&gt;2} {6:&gt;2} {7:&gt;2} {8:&gt;2} {9:&gt;2} {10:&gt;2} {11:&gt;2}"
def multiple_table2():
    for i in range (1, 11):
        print(layout.format(i, "\t", i*2, "\t", i*3, "\t", i*4, "\t", i*5, "\t", i*6, "\t", i*7, "\t", i*8, "\t", i*9, "\t", i*10, "\t", i*11, "\t", i*12))

multiple_table2()
</code></pre>
<p>I think, it is correct. Can me someone explain, please, where is the problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are putting more than 12 values into your columns. The first 12 are 6 numbers and 6 tab characters. Each of those <code>"\t"</code> strings <em>is a value too</em>; you are essentially producing:</p>
<pre><code>' 1  \t  2  \t  3  \t  4  \t  5  \t  6  \t'
</code></pre>
<p>as the string; note the spaces between! That's one space for values shorter than 2 characters, and another space from the template itself.</p>
<p>You don't need to put those tab characters into your format; you already spaced out the slots:</p>
<pre><code>print(layout.format(i, i*2, i*3, i*4, i*5, i*6, i*7, i*8, i*9, i*10, i*11, i*12))
</code></pre>
<p>Now you pass in 12 arguments for 12 slots.</p>
<p>If you really wanted to put tabs in between you'd put those in the <code>layout</code> string instead:</p>
<pre><code>layout = '{0:&gt;2}\t{1:&gt;2}\t{2:&gt;2}\t{3:&gt;2}\t{4:&gt;2}\t{5:&gt;2}\t{6:&gt;2}\t{7:&gt;2}\t{8:&gt;2}\t{9:&gt;2}\t{10:&gt;2}\t{11:&gt;2}'
</code></pre>
<p>Python gives you the tools to avoid having to type. <code>print()</code> already puts spaces in between separate arguments. Together with another loop in a <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow">generator expression</a>, you can format all those numbers without writing out all those <code>*multiplier</code> arguments:</p>
<pre><code>for i in range (1, 11):
    print(*(format(i * m, '&gt;2') for m in range(1, 13)))
</code></pre>
<p>If you still needed to have tabs in between instead of spaces, you can tell <code>print()</code> to use that as a separator using the <code>sep</code> argument:</p>
<pre><code>for i in range (1, 11):
    print(*(format(i * m, '&gt;2') for m in range(1, 13)), sep='\t')
</code></pre>
<p>Take into account that because you are multiplying by 11 and 12, you'll get numbers that won't fit in 2 characters:</p>
<pre><code>&gt;&gt;&gt; for i in range (1, 11):
...     print(*(format(i * m, '&gt;2') for m in range(1, 13)))
... 
 1  2  3  4  5  6  7  8  9 10 11 12
 2  4  6  8 10 12 14 16 18 20 22 24
 3  6  9 12 15 18 21 24 27 30 33 36
 4  8 12 16 20 24 28 32 36 40 44 48
 5 10 15 20 25 30 35 40 45 50 55 60
 6 12 18 24 30 36 42 48 54 60 66 72
 7 14 21 28 35 42 49 56 63 70 77 84
 8 16 24 32 40 48 56 64 72 80 88 96
 9 18 27 36 45 54 63 72 81 90 99 108
10 20 30 40 50 60 70 80 90 100 110 120
</code></pre>
</div>
