<div class="post-text" itemprop="text">
<p>I want to generate a one-line string from an <code>Exception</code> which tells me <strong>what</strong> happened <strong>where</strong> (don't need a full backtrace). The following information would be nice:</p>
<ul>
<li>filename / linenumber</li>
<li>exception type</li>
<li>exception description (what you get from <code>str(e)</code>)</li>
<li>nice to have: function/method/class</li>
</ul>
<p>Currently I do the following:</p>
<pre><code>import os
...
try:
    os.nonexisting()
except Exception as e:
    t = e.__traceback__
    tbf = e.__traceback__.tb_frame
    print('%s:%d: %s in %s(): "%s" ' %
        os.path.basename(tbf.f_code.co_filename),
        t.tb_lineno,
        e.__class__.__name__,
        tbf.f_code.co_name, e))
</code></pre>
<p>which gives me:</p>
<pre><code>foo.py:203: AttributeError in foo(): "'module' object has no attribute 'nonexisting'"
</code></pre>
<p>Is there a more elegant way to print out the details given in this example? I'm thinking about s.th. like</p>
<pre><code>print(e.format('%f: %l: %t %F: "%w"'))
</code></pre>
<p>I'd like to avoid importing extra modules except there is one exactly for this purpose. </p>
</div>
<div class="post-text" itemprop="text">
<p>I think <a href="https://docs.python.org/3/library/traceback.html#traceback.format_exception_only" rel="nofollow"><code>traceback.format_exception_only</code></a> does exactly what you want.</p>
<pre><code>try:
    os.nonexisting()
except Exception as e:
    print(traceback.format_exception_only(e.__class__, e))
</code></pre>
</div>
<span class="comment-copy">It produces <code>["AttributeError: 'module' object has no attribute 'nonexisting'\n"]</code> that is not what OP wants (where is filename, line number, function/method name?).</span>
<span class="comment-copy">Indeed the problem is to add file / line number information to <code>format_exception()</code> without fiddling with the internals of <code>sys.exc_info()</code>, <code>extract_tb</code>, etc.</span>
