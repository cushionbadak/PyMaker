<div class="post-text" itemprop="text">
<p>I have the following dictionary (short version, real data is much larger):</p>
<pre><code>dict = {'C-STD-B&amp;M-SUM:-1': 0, 'C-STD-B&amp;M-SUM:-10': 4.520475, 'H-NSW-BAC-ART:-9': 0.33784000000000003, 'H-NSW-BAC-ART:0': 0, 'H-NSW-BAC-ENG:-59': 0.020309999999999998, 'H-NSW-BAC-ENG:-6': 0,}
</code></pre>
<p>I want to divide it into smaller nested dictionaries, depending on a part of the key name.</p>
<p>Expected output would be:</p>
<pre><code># fixed closing brackets
dict1 = {'C-STD-B&amp;M-SUM: {'-1': 0, '-10': 4.520475}}
dict2 = {'H-NSW-BAC-ART: {'-9': 0.33784000000000003, '0': 0}}
dict3 = {'H-NSW-BAC-ENG: {'-59': 0.020309999999999998, '-6': 0}}
</code></pre>
<p>Logic behind is:</p>
<pre><code>dict1: if the part of the key name is 'C-STD-B&amp;M-SUM', add to dict1.
dict2: if the part of the key name is 'H-NSW-BAC-ART', add to dict2.
dict3: if the part of the key name is 'H-NSW-BAC-ENG', add to dict3.
</code></pre>
<p>Partial code so far:</p>
<pre><code>def divide_dictionaries(dict):
    c_std_bem_sum = {}
    for k, v in dict.items():
        if k[0:13] == 'C-STD-B&amp;M-SUM':
            c_std_bem_sum = k[14:17], v
</code></pre>
<p>What I'm trying to do is to create the nested dictionaries that I need and then I'll create the dictionary and add the nested one to it, but I'm not sure if it's a good way to do it.</p>
<p>When I run the code above, the variable c_std_bem_sum becomes a tuple, with only two values that are changed at each iteration. How can I make it be a dictionary, so I can later create another dictionary, and use this one as the value for one of the keys?</p>
</div>
<div class="post-text" itemprop="text">
<p>One way to approach it would be to do something like</p>
<pre><code>d = {'C-STD-B&amp;M-SUM:-1': 0, 'C-STD-B&amp;M-SUM:-10': 4.520475, 'H-NSW-BAC-ART:-9': 0.33784000000000003, 'H-NSW-BAC-ART:0': 0, 'H-NSW-BAC-ENG:-59': 0.020309999999999998, 'H-NSW-BAC-ENG:-6': 0,}

def divide_dictionaries(somedict):
    out = {}
    for k,v in somedict.items():
        head, tail = k.split(":")
        subdict = out.setdefault(head, {})
        subdict[tail] = v
    return out
</code></pre>
<p>which gives</p>
<pre><code>&gt;&gt;&gt; dnew = divide_dictionaries(d)
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(dnew)
{'C-STD-B&amp;M-SUM': {'-1': 0, '-10': 4.520475},
 'H-NSW-BAC-ART': {'-9': 0.33784000000000003, '0': 0},
 'H-NSW-BAC-ENG': {'-59': 0.020309999999999998, '-6': 0}}
</code></pre>
<p>A few notes: </p>
<p>(1) We're using nested dictionaries instead of creating separate named dictionaries, which aren't convenient.</p>
<p>(2) We used <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow">setdefault</a>, which is a handy way to say "give me the value in the dictionary, but if there isn't one, add this to the dictionary and return it instead.".  Saves an <code>if</code>.</p>
<p>(3) We can use <code>.split(":")</code> instead of hardcoding the width, which isn't very robust -- at least assuming that's the delimiter, anyway!</p>
<p>(4) It's a bad idea to use <code>dict</code>, the name of a builtin type, as a variable name.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's because you're setting your dictionary and overriding it with a tuple:</p>
<pre><code>&gt;&gt;&gt; a = 1, 2
&gt;&gt;&gt; print a
&gt;&gt;&gt; (1,2)
</code></pre>
<p>Now for your example:</p>
<pre><code> &gt;&gt;&gt; def divide_dictionaries(dict):
 &gt;&gt;&gt;      c_std_bem_sum = {}
 &gt;&gt;&gt;      for k, v in dict.items():
 &gt;&gt;&gt;          if k[0:13] == 'C-STD-B&amp;M-SUM':
 &gt;&gt;&gt;              new_key = k[14:17]         # sure you don't want [14:], open ended?
 &gt;&gt;&gt;              c_std_bem_sum[new_key] = v
</code></pre>
<p>Basically, this grabs the rest of the key (or 3 characters, as you have it, the [14:None] or [14:] would get the rest of the string) and then uses that as the new key for the dict.</p>
</div>
<span class="comment-copy">On the first note, you are saying that I should have, for instance, three different dictionaries, each with a nested dictionary inside, or that I should avoid nested dictionaries altogether? Thanks on the last note, I always used it and it really is bad to use, I don't know why I always did hehe.</span>
<span class="comment-copy">I mean that instead of a variable named <code>dict1</code> and a variable named <code>dict2</code> and a variable named <code>dict3</code>, you should have one dictionary, and use what you wanted to call the variables as the keys, as above.</span>
<span class="comment-copy">Thanks. Is it possible to convert the keys from the nested dictionaries to integer?</span>
