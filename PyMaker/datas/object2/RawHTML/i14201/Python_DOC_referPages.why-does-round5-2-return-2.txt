<div class="post-text" itemprop="text">
<p>Using python 3.4.3,</p>
<pre><code>round(5/2) # 2
</code></pre>
<p>Shouldn't it return 3?</p>
<p>I tried using python 2 and it gave me the correct result</p>
<pre><code>round(5.0/2) # 3
</code></pre>
<p>How can I achieve a correct rounding of floats?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>if two multiples are equally close, rounding is done toward the even
  choice (so, for example, both round(0.5) and round(-0.5) are 0, and
  round(1.5) is 2).</p>
</blockquote>
<p>Quoting the <a href="https://docs.python.org/3/library/functions.html#round" rel="noreferrer">documentation</a> for the <code>round</code> function.
Hope this helps :)</p>
<p>On a side note, I would suggest always read the doc when you face this kind of question (<a href="https://xkcd.com/293/" rel="noreferrer">haha</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Rounding toward even is correct behavior for Python 3.  According to the Python 3 <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow">documentation for <code>round()</code></a>:</p>
<blockquote>
<p>...if two multiples are equally close, rounding is done toward the even choice (so, for example, both round(0.5) and round(-0.5) are 0, and round(1.5) is 2)</p>
</blockquote>
<p>Since 2.5 is equally close to 2 and 3, it rounds down to 2.</p>
<p>In Python 2, the <a href="https://docs.python.org/2.7/library/functions.html#round" rel="nofollow">docs for <code>round()</code></a> state:</p>
<blockquote>
<p>...if two multiples are equally close, rounding is done away from 0 (so, for example, round(0.5) is 1.0 and round(-0.5) is -1.0)</p>
</blockquote>
<p>Since 2.5 is equally close to 2 and 3, it rounds up to 3 (away from zero).</p>
<p>If you want to control how numbers round, the best way to do it might be the way I learned to round numbers back in my Applesoft BASIC days:</p>
<pre><code>10 X = 5
15 PRINT "ROUND(" X "/2) = " (INT((X/2)+0.5))
20 X = 4.99
25 PRINT "ROUND(" X "/2) = " (INT((X/2)+0.5))
</code></pre>
<p>Umm...make that:</p>
<pre><code>&gt;&gt;&gt; x = 5 / 2
&gt;&gt;&gt; print(x)
2.5
&gt;&gt;&gt; y = int(x + 0.5)
&gt;&gt;&gt; print(y)
3
&gt;&gt;&gt; x = 4.99 / 2
&gt;&gt;&gt; print(x)
2.495
&gt;&gt;&gt; y = int(x + 0.5)
&gt;&gt;&gt; print(y)
2
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow">doc</a></p>
<blockquote>
<p>round(number[, ndigits]) -&gt; number Round a number to a given
  precision in decimal digits (default 0 digits).This returns an int
  when called with one argument, otherwise the same type as the number.
  ndigits may be negative.</p>
</blockquote>
<p>So</p>
<pre><code>&gt;&gt;&gt;round(5/2)
2
&gt;&gt;&gt;round(5.0/2, 1)
2.5
</code></pre>
</div>
<span class="comment-copy">This is documented behavior in python. It differs between Python3 and Python2.</span>
<span class="comment-copy">Since <code>5</code> and <code>2</code> are both integers, <code>5/2</code> is also an integer in Python 2.x, but in Python 3.x it should give you what you expect. I suspect you got the Python 2/3 backwards.</span>
<span class="comment-copy">This is often called <a href="https://en.wikipedia.org/wiki/Rounding#Round_half_to_even" rel="nofollow noreferrer">Bankers' Rounding</a>.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/10825926/python-3-x-rounding-behavior">Python 3.x rounding behavior</a></span>
<span class="comment-copy">Thanks for the reference, @Phylogenesis!  I didn't know this.</span>
<span class="comment-copy">Had to give a +1 for the <a href="https://xkcd.com/293/" rel="nofollow noreferrer">xkcd</a> cartoon...</span>
<span class="comment-copy">Many old BASIC dialects I know round down on <code>INT()</code>, including negative numbers. I don't know Applesoft BASIC, but if <a href="http://www.calormen.com/jsbasic/" rel="nofollow noreferrer">calormen.com/jsbasic</a> is accurate, it does, too. So Python <code>int(x + 0.5)</code> is only equivalent to many olden days BASIC <code>INT(X + 0.5)</code> for positive numbers. In Python you could use <code>math.floor(x + 0.5)</code>.</span>
