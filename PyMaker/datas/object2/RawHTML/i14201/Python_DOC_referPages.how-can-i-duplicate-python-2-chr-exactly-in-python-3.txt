<div class="post-text" itemprop="text">
<p>Hi I am trying to migrate some code to python 3 but am having the following problem.</p>
<p>Python 2</p>
<pre><code>&gt;&gt;&gt; a = chr(217)
&gt;&gt;&gt; print a, type(a)
� &lt;type 'str'&gt;
</code></pre>
<p>Python 3</p>
<pre><code>&gt;&gt;&gt; a = chr(217)
&gt;&gt;&gt; print(a, type(a))
Ù &lt;class 'str'&gt;
</code></pre>
<p>The reason is that I have Existing data created with the following code</p>
<pre><code>from Crypto.Cipher import AES

fle = open("data.dat", "wt")
key = "password000*****"
pwd = AES.new(key, AES.MODE_ECB)
for dat in ("dataname001*****", "dataname002*****"):
    txt = ""
    hsh = pwd.encrypt(dat)
    for c in hsh:
        txt = txt + str(ord(c)) + ","
    fle.write("%s\n" % txt[:-1])
fle.close()
</code></pre>
<p>I need to read the data which I can do using python2 but not python3</p>
<pre><code>fle = open("data.dat", "rt")
for dat in fle:
    txt = ""
    for c in dat.split(","):
        txt = txt + chr(int(c))
    print(pwd.decrypt(txt))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#chr" rel="nofollow"><code>chr</code> in Python3.x</a> is similar to <a href="https://docs.python.org/2/library/functions.html#unichr" rel="nofollow"><code>unichr</code> in Python 2.x</a>.</p>
<p>If you want a byte string, use <a href="https://docs.python.org/3/library/functions.html#bytes" rel="nofollow"><code>bytes</code></a>:</p>
<pre><code>&gt;&gt;&gt; bytes([217])
b'\xd9'
</code></pre>
<p>or <a href="https://docs.python.org/3/library/functions.html#bytearray" rel="nofollow"><code>bytearray</code></a>:</p>
<pre><code>&gt;&gt;&gt; bytearray([217])
bytearray(b'\xd9')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That <em>is</em> an exact duplication. For certain definitions of "exact".</p>
<p>The differences you see are:</p>
<ol>
<li><p>The <code>chr()</code> in Python 3 is actually the Python 2 <code>unichr()</code>. This is probably why the character now is printed correctly.</p></li>
<li><p>"Types" is an old thing from way back in Python before 2.2. The <code>str</code> class is called "type" in Python 2 for backwards compatibility reasons. It's now called "class" just like all other classes.</p></li>
</ol>
<p>There are also a difference you do not see:</p>
<ol start="3">
<li>The Python 2 and Python 3 <code>str</code> class are not entirely compatible. The Python 3 one is actually more like Python 2's <code>unicode</code> class. But this is not a relevant difference in your example.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>To add another view on why it may not work as expected. The number used as a parameter of <code>chr</code> in Python 3 is expected to be a Unicode code point. Now it depends on how the <code>data.dat</code> content was encoded during writing and how it is decoded when reading back. </p>
<p>I have noticed, that you are reading the file in a text mode. Then, in Python 2, you may want to use the standard Python 2 module <a href="https://docs.python.org/2/library/codecs.html" rel="nofollow"><code>codecs</code></a> to read the content correctly. Possibly, use <a href="https://docs.python.org/2/library/codecs.html#codecs.open" rel="nofollow"><code>codecs.open()</code></a> instead of the plain <code>open()</code>.</p>
</div>
<span class="comment-copy">What exactly is the problem?</span>
<span class="comment-copy">The whole point is that it works perfectly in python 2. It is not working in python 3.</span>
<span class="comment-copy">I see. I did not use the <code>Crypto</code> module, but it probably works with bytes, does it? If yes, you must use <code>bytes</code> type variables in Python 3, and you have to open the <code>data.dat</code> file in a binary mode (like "wb" and "rb"). The <code>bytes</code> type is the type that actually is the Python 2 <code>str</code> type. But it is just my guess.</span>
