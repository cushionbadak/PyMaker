<div class="post-text" itemprop="text">
<p>I am just getting started with Django, so this may be something stupid, but I am not even sure what to google at this point. </p>
<p>I have a method that looks like this:</p>
<pre><code>def get_user(self,user):
    return Utilities.get_userprofile(user)
</code></pre>
<p>The method looks like this:</p>
<pre><code>@staticmethod
def get_userprofile(user):
    return UserProfile.objects.filter(user_auth__username=user)[0]
</code></pre>
<p>When I include this in the view, everything is fine. When I write a test case to use any of the methods inside the Utility class, I get None back:</p>
<p>Two test cases:</p>
<pre><code>def test_stack_overflow(self):
    a = ObjName()
    print(a.get_user('admin'))

def test_Utility(self):
    print(Utilities.get_user('admin'))
</code></pre>
<p>Results:</p>
<pre><code>Creating test database for alias 'default'...
None
..None
.
----------------------------------------------------------------------
</code></pre>
<p>Can someone tell me why this is working in the view, but not working inside of the test case and does not generate any error messages? </p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Verify whether your unit test comply the followings,</p>
<ol>
<li><code>TestClass</code> must be written in a file name <code>test*.py</code> </li>
<li><code>TestClass</code> must have been subclassed from <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase" rel="noreferrer">unittest.TestCase</a></li>
<li><code>TestClass</code> should have a <code>setUp</code> function to create objects(usually done in this way, but objects creation can happen in the test functions as well) in the database</li>
<li><code>TestClass</code> functions should start with <code>test</code> so as to be identified and run by the <code>./manage.py</code> test command</li>
<li><code>TestClass</code> may have <code>tearDown</code> to properly end the unit test case.</li>
</ol>
<p>Test Case Execution process:</p>
<p>When you run <code>./manage.py test</code> django sets up a <code>test_your_database_name</code> and creates all the objects mentioned in the <code>setUp</code> function(Usually) and starts executing the test functions in the order of placement inside the class and once when all the test functions are executed, finally looks for the <code>tearDown</code> function executes if any present in the test class and destroys the test database.</p>
<p>It <b>may be</b> because that you might not have invoked objects creation in setUp function or elsewhere in the <code>TestClass</code>.</p>
<p>Can you kindly post the entire traceback and test file to help you better?</p>
</div>
<span class="comment-copy">Hey, the last bit you mentioned may be it! The method gets the user object by username and if there is a brand new database, then it will obviously not pull in anything. I think I will need to create a few objects before starting tests to make sure it's valid.</span>
<span class="comment-copy">If the answer was helpful you can accept the answer.</span>
<span class="comment-copy">I definitely will; let me verify it first :) How is this usually handled? Do you have a method in the test cases that sets up some items in the database?</span>
<span class="comment-copy">Setting up data in the database e.g <code>Models.objects.create(**kwargs)</code> can be usually handled in the <code>setUp</code> function in your TestClass you can refer <a href="https://docs.djangoproject.com/en/1.8/topics/testing/overview/#writing-tests" rel="nofollow noreferrer">Django - Writing and running tests</a></span>
