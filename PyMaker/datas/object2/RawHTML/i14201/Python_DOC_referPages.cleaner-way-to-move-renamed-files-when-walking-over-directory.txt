<div class="post-text" itemprop="text">
<p>I created a script to walk over my directory and move my music files to my music folder while renaming the files using the regular expression library to check if the files are numbered (as I find this to be an annoyance). The script seems to be working fine, as I haven't encountered any errors, but was wondering if there was a cleaner way to do this as this seems a bit convoluted and unpythonic. (Striving to write cleaner code). By cleaner I'm not asking anyone to rewrite my entire code block(s), but rather the check_names function and it's implementation when moving files. If there are other errors those would be helpful to be pointed out for the below reason.</p>
<p>If this is terrible code I apologize for any python "sins" I may have committed as I have only used the os and regular expression modules a few times before.</p>
<p>Since i am learning how to use these and have little exposure at this point, an explanation of why would go a long way to aid in my understanding. All the <code>os.path.join(....)</code> was my attempt at making it cross-platform and not having to hardcode paths. The reason I say this seems a bit convuluted is due to the runtime it takes approximately 1-2 min to do the following on say 6-7 folders:
Extract the compressed <code>.zip</code> archives into my original directory walk over these, rename the files if needed, and then finally moved them and then go back to the original directory and delete the remnants of the move, or is this a normal runtime for everything that's going on? (The archives are ~100-300 mb)</p>
<p>The relevant functions are.</p>
<pre><code>def check_names(dirpath, file_name):
    check = False
    new_name = None
    first_check = re.compile("^\d\d - ").match(file_name)
    second_check = re.compile("^\d\d ").match(file_name)
    if first_check != None or second_check != None:
       check = True
       if first_check:
          new_name = file_name[first_check.span()[1]:]
          shutil.move(os.path.join(dirpath, file_name),
                      os.path.join(dirpath, new_name))
       else:
          new_name = file_name[second_check.span()[1]:]
          shutil.move(os.path.join(dirpath, file_name),
                      os.path.join(dirpath, new_name))
    return check, new_name

def move_music(source, destination, file_extension, sub_string):
    source_dir = os.path.split(source)[-1]
    for dirpath, dirnames, filenames in os.walk(source):
        for a_file in filenames:
            if (a_file.endswith(file_extension) and sub_string in a_file):
                check = check_names(dirpath, a_file)
                dir_name = os.path.split(dirpath)[-1]
                if dir_name != source_dir:
                    check_folders(destination, dir_name)
                    if os.path.join(source, dir_name) not in COPIED_DIRECTORIES:
                          COPIED_DIRECTORIES.append(os.path.join(source, dir_name))
                    shutil.move(os.path.join(dirpath, a_file if not check[0] else check[1]),
                                os.path.join(destination , dir_name))

                else:
                    shutil.move(os.path.join(dirpath, a_file if not check[0] else check[1]), destination)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First things first:</p>
<p>You can break tasks like this and increase readability dramatically.</p>
<p>OLD:</p>
<pre><code>if first_check:
  new_name = file_name[first_check.span()[1]:]
  shutil.move(os.path.join(dirpath, file_name),
              os.path.join(dirpath, new_name))
else:
   new_name = file_name[second_check.span()[1]:]
   shutil.move(os.path.join(dirpath, file_name),
               os.path.join(dirpath, new_name))
</code></pre>
<p>NEW:</p>
<pre><code>if first_check:
    new_name = file_name[first_check.span()[1]:]
else:
    new_name = file_name[second_check.span()[1]:]
shutil.move(os.path.join(dirpath, file_name),
            os.path.join(dirpath, new_name))
</code></pre>
<p>You are solely changing the file_name to a new_name in the if/else statement, you do not need to have the long function call inside the if/then statement.</p>
<p><strike>Next, define your globals:</strike></p>
<pre><code>FIRST_CHECK = re.compile("^\d\d - ")
SECOND_CHECK = re.compile("^\d\d ")
</code></pre>
<p></p></div>
<span class="comment-copy">No. Because you should compile them first for performance, and then match them inside the function. You should either not compile them and straight match them, or compile them ahead of time and then match them inside the function.  There is no point in compiling a regex to be used a single time.  For speed and potentially readability, I recommend compiling ahead of time.</span>
<span class="comment-copy">Thank you for pointing out those errors, can't believe I missed some of those. This looks 10x better already. Regex seems to be rather confusing at first glance, in this case is it overkill to use regex for this? As the files will always be named in two potential cases and I could alternatively just check by string slicing.</span>
<span class="comment-copy">Ok I updated it finally. And nah, this is good since it specifies between numbers with spaces and plain numbers, it's a good use of a regex.  You could string slice, but the regex is elegent. I updated it: you still have work to do. Make your code readable: add comments and doc strings.</span>
<span class="comment-copy">You don't need to explicitly compile, since the last few (1000?) regexes are cached.<a href="https://docs.python.org/2/library/re.html#re.compile" rel="nofollow noreferrer">[python2</a>] <a href="https://docs.python.org/3/library/re.html#re.compile" rel="nofollow noreferrer">[python3</a>] It's not the kind of thing you need to worry about, unless you're doing very fine optimizations (like not using global names).</span>
<span class="comment-copy">Thanks @leewangzhong, I'll update my answer.</span>
