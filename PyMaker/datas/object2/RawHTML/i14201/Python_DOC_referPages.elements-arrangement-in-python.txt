<div class="post-text" itemprop="text">
<p>Every element of the array "data" have to be changed as follows:</p>
<p>For example,
4 should be seen in names_A and data_A.
The names_A for 4 is 'David'.
Now 'David' should be seen in names_B and data_B.
The data_B for 'David' is 30.
So, the element 4 must be changed by 30; and so on.</p>
<pre><code>import numpy as np

names_A = ['David', 'Mark', 'Brian', 'Michael']
data_A = [4,3,1,2]

names_B = ['Mark', 'David', 'Michael', 'Brian']
data_B = [51,30,11,29]

data = np.array([[4,4,3,3,2,2,1,1,3,3],
                [4,3,3,3,2,2,3,1,3,1],
                [4,2,3,3,2,2,4,1,4,3]])
</code></pre>
<p>How is the easiest and simplest way of doing it?</p>
<p>I tried it as follows:</p>
<pre><code>dats = data.ravel()

results = []
for d in dats:
    nam_A = names_A[data_A == int(d)]
    dat_B = data_B[names_B == nam_A]
    results.append(dat_B)

print np.array(results).reshape(data.shape)


[[51 51 51 51 51 51 51 51 51 51]
 [51 51 51 51 51 51 51 51 51 51]
 [51 51 51 51 51 51 51 51 51 51]]
</code></pre>
<p>But, it's giving wrong results. How would you do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use dictionaries to create a mapping.</p>
<pre><code>names_A = ['David', 'Mark', 'Brian', 'Michael']
data_A = [4,3,1,2]

names_B = ['Mark', 'David', 'Michael', 'Brian']
data_B = [51,30,11,29]

lookup_a = dict(zip(names_A, data_A))
lookup_b = dict(zip(names_B, data_B))

mapping = {value_a: lookup_b[key_a] for key_a, value_a in lookup_a.items()}
</code></pre>
<p>Now the keys in <code>mapping</code> will be the numbers from <code>data_A</code> with the corresponding values from <code>data_B</code>.</p>
<p>I never worked with <code>numpy</code> but it looks like an easy task to do the replacement now.</p>
<hr/>
<p>Just to give an example with a simple list:</p>
<pre><code>data = [4, 4, 3, 3, 2, 2, 1, 1, 3, 3]
data = [mapping[value] for value in data]
</code></pre>
<p><code>data</code> now is <code>[30, 30, 51, 51, 11, 11, 29, 29, 51, 51]</code>.</p>
<hr/>
<p><em>Edited after installing numpy</em></p>
<p>If you created the mapping dictionary you can do the following:</p>
<pre><code>data = np.array([[4, 4, 3, 3, 2, 2, 1, 1, 3, 3],
                 [4, 3, 3, 3, 2, 2, 3, 1, 3, 1],
                 [4, 2, 3, 3, 2, 2, 4, 1, 4, 3]])

for row in data:
    for index, value in enumerate(row):
        row[index] = mapping[value]
</code></pre>
<p><code>data</code> is now:</p>
<pre><code>[[32 30 51 51 11 11 29 29 51 51]
 [30 51 51 51 11 11 51 29 51 29]
 [30 11 51 51 11 11 30 29 30 51]]
</code></pre>
<p>As I never worked with numpy before there might be easier (or more pythonic) solutions, but at least this does what it should do.</p>
</div>
<span class="comment-copy">yes, its good solution, however, I'm not much familier with the dictionary especially mapping you have created. So could you check my code in my edited question though I have already accpted your solution..</span>
<span class="comment-copy">Like I said, I don't know <code>numpy</code> but your solution looks strange (aka <i>wrong</i>). If you don't know what a dictionary is have a look at the <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">tutorial</a>. This is one of the basic datastructures every Python programmer must know. - I'm AFK now, but I might be able to install numpy later and show you the details if noone else answers this.</span>
