<div class="post-text" itemprop="text">
<p>My code currently looks like this. The conversion of xls to csv part works but not the writing to HTML.</p>
<pre><code>import xlrd
import csv
import sys

# write from xls file to csv file
wb = xlrd.open_workbook('your_workbook.xls')
sh = wb.sheet_by_name('Sheet1')
your_csv_file = open('your_csv_file.csv', 'wb')
wr = csv.writer(your_csv_file, quoting=csv.QUOTE_ALL)

for rownum in xrange(sh.nrows):
    wr.writerow(sh.row_values(rownum))

your_csv_file.close()
print "Converted from xls to csv!"
# write from csv file to html 

# if len(sys.argv) &lt; 3:
#   print "Usage: csvToTable.py csv_file html_file"
#   exit(1)

# Open the CSV file for reading
reader = csv.reader(open("your_csv_file.csv"))

# Create the HTML file for output
htmlfile = open("data.html","w+")

# initialize rownum variable
rownum = 0

# generate table contents
for row in reader: # Read a single row from the CSV file
    for line in htmlfile:
        # this HTML comment is found in the HTML file where I want to insert the table
        if line == "&lt;!-- Table starts here !--&gt;":
            # write &lt;table&gt; tag
            htmlfile.write('&lt;table&gt;')
            htmlfile.write('&lt;tr&gt;') # write &lt;tr&gt; tag
            for column in row:
                htmlfile.write('&lt;th&gt;' + column + '&lt;/th&gt;')
            htmlfile.write('&lt;/tr&gt;')
            # write &lt;/table&gt; tag
            htmlfile.write('&lt;/table&gt;')

        #increment row count    
        rownum += 1



# print results to shell
print "Created " + str(rownum) + " row table."
exit(0)
</code></pre>
<p>The output is just a blank page as the program can't find the</p>
<pre><code>&lt;!-- Table starts here !--&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have two or three problems here.  I'll go through them one by one, but first I want to say that I would perform this task using the <a href="http://pandas.pydata.org/" rel="nofollow noreferrer">Pandas library</a>.  It does far, far more than this kind of task, but if you did install it, all you would have to do to get the data into table format is:</p>
<pre><code>import pandas as pd
xls = pd.ExcelFile('path_to_file.xls')
df = xls.parse('Sheet1') # parse the sheet you're interested in - results in a Dataframe
table_html = df.to_html()
</code></pre>
<p>You now have a string (<code>table_html</code>) of the entire data in html <code>&lt;table&gt;</code> format that you can write directly into your html file.  No intermediate csv stage or anything.  The documentation is available for <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.ExcelFile.parse.html#pandas-excelfile-parse" rel="nofollow noreferrer"><code>pandas.ExcelFile.parse</code></a> and <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.ExcelFile.parse.html#pandas-excelfile-parse" rel="nofollow noreferrer"><code>pandas.DataFrame.to_html()</code></a></p>
<hr/>
<h2>Problems with existing solution</h2>
<h3>1. String comparison</h3>
<p>You are looking for the comment line to replace with your html - you are using <code>==</code> to compare two strings. Unless you're absolutely sure that the strings will be exactly the same - no extra whitespace, no end of lines, no extra punctuation etc - then this is often error prone.</p>
<p>You could <code>strip()</code> the line to get rid of whitespace and then use <code>==</code> as others have suggested.  Personally I'd be tempted to be more permissive and use the <code>in</code> keyword something like:</p>
<pre><code>if '&lt;!-- Table starts here' in line:
</code></pre>
<p>Then it doesn't matter about whether the latter <code>!</code> is in the string, or whitespace before or after the text etc.  You might be even more permissive and use a regular expression such that you can have any whitespace between the comment marker and the text. You will probably know how precise the string will be in the <code>.html</code> file that you're working with.</p>
<h3>2. Reading and writing the <code>.html</code> file concurrently</h3>
<p>You're trying to insert text in the middle of a file.  There's a <a href="https://stackoverflow.com/questions/10507230/insert-line-at-middle-of-file-with-python">Q&amp;A covering methods how to that</a>.  In brief, in your case (relatively small data i.e. one <code>.html</code> file) I would read all the lines into a list and then insert the table HTMLat the point you want e.g.</p>
<pre><code>content = []
insert_index = None
with open('data.html', 'r') as htmlfile:
    for line in htmlfile:
        content.append(line)
        if '&lt;!-- Table starts here' in line:
            insert_index = len(content)

if insert_index:
    content.insert(insert_index, table_html)
</code></pre>
<p><strong><em>Note</em></strong> I'm assuming you've got <code>table_html</code> using the Pandas method at the start.  If you don't want to do that for some reason and still want to get the content via <code>csv</code>, you can always build up <code>table_html</code> by creating an empty string and then adding on all the HTML elements in a similar way to how your loop does it now.  </p>
<h3>3. Writing the html</h3>
<p>Others have noted that you could use the append mode of file opening, rather than the write mode.  This is fine, but if you use the method above to read all the content into a list and insert within the list, you can then simply do:</p>
<pre><code>with open('data.html', 'w+') as f:
    f.write('\n'.join(content))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like Delimitry said, your read mode is not right:</p>
<blockquote>
<p>w+ : Opens a file for both writing and reading. Overwrites the
  existing file if the file exists. If the file does not exist, creates
  a new file for reading and writing.</p>
</blockquote>
<p>So the first thing it does is truncate (empty) the entire file. </p>
</div>
<div class="post-text" itemprop="text">
<p>Try to change read mode from "w+" to "a+":</p>
<p><code>htmlfile = open("data.html", "a+")</code></p>
<p>When you open the file <code>data.html</code> with <code>w+</code> mode it is truncated, and then when you reading lines <code>for line in htmlfile:</code> you will not find <code>"&lt;!-- Table starts here !--&gt;"</code> HTML comment.</p>
<p>Also add <code>line.strip()</code> to read your line without newline at the end of the string:</p>
<pre><code>if line.strip() == "&lt;!-- Table starts here !--&gt;":
</code></pre>
<p>I would recommend you to separate HTML file <code>read</code> and <code>write</code>. For example you could change your code as:</p>
<pre><code>out_lines = []
with open('data.html', 'r') as htmlfile:
    # read lines once, and scan for HTML comment for each row
    lines = htmlfile.readlines()
    # generate table contents
    for row in reader: # Read a single row from the CSV file
        for line in lines:
            # this HTML comment is found in the HTML file where I want to insert the table
            if line.strip() == "&lt;!-- Table starts here !--&gt;":
                # write &lt;table&gt; tag
                out_lines.append('&lt;table&gt;')
                out_lines.append('&lt;tr&gt;') # write &lt;tr&gt; tag
                for column in row:
                    out_lines.append('&lt;th&gt;' + column + '&lt;/th&gt;')
                out_lines.append('&lt;/tr&gt;')
                # write &lt;/table&gt; tag
                out_lines.append('&lt;/table&gt;')
            # increment row count    
            rownum += 1

# update your html file
with open('data.html', 'a') as f:
    f.write('\n'.join(out_lines))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The lines you read from <code>htmlfile</code> include a trailing newline. You must <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow"><code>strip</code></a> it before comparing:</p>
<pre><code>if line.strip() == "&lt;!-- Table starts here !--&gt;":
</code></pre>
<p><strong>Hint:</strong></p>
<p>HTML comments only have a <code>!</code> at the beginning, not at the end. It is not forbidden to write</p>
<pre><code>&lt;!-- Table starts here !--&gt;
-----------------------^
</code></pre>
<p>But the second <code>!</code> is very uncommon.</p>
</div>
<span class="comment-copy">You appear to be writing a lot from scratch, all of this functionality already exists in an awesome library called pandas: <a href="http://pandas.pydata.org/pandas-docs/dev/generated/pandas.DataFrame.to_html.html" rel="nofollow noreferrer">pandas.pydata.org/pandas-docs/dev/generated/â€¦</a></span>
<span class="comment-copy">Thanks a lot! Answers like this are what make this site so awesome.  One thing though, how would I make it so that a new spreadsheet's values would write over the old table in the HTML, assuming the rows and columns formatting are the same?</span>
<span class="comment-copy">Ooof - that's a different (and much harder) question.  The way I'd do it is to put an additional comment marker at the end (i.e. after inserting <code>table_html</code>) and then adapt your code so that when it detects the table start marker, it doesn't add to <code>content</code> until it detects the table end marker.  Everything else would stay the same.  Have a go at that - if you hit further problems it's time for a new StackOverflow question :) You can link to it here, of course, but it's too big a question to fully explain in comments / edit into the existing one.</span>
<span class="comment-copy">I did this and it just doesn't change the HTML file at all. It's an improvement over having a blank page I guess.</span>
<span class="comment-copy">Check that "&lt;!-- Table starts here !--&gt;" is present in your HTML file.</span>
<span class="comment-copy">It is. I think there is some sort of problem with the for loops, I'm looking over it again.</span>
<span class="comment-copy">Add line.strip() to read your line without \n</span>
<span class="comment-copy">I added it like Tichodroma suggested, but still no dice.</span>
