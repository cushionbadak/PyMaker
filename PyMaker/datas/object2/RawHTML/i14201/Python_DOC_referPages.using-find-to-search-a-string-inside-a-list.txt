<div class="post-text" itemprop="text">
<p>I want to loop through a list of strings...</p>
<p>eg: </p>
<pre><code>list_of_strings = ['Hello!, my name is Carl', 'Hello!, my name is Steve', 'Hello!, my name is Betty']
</code></pre>
<p>I want to loop through the list items and search for the location of 'Hello!' within the string in each case an record its location.</p>
<p>Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> to collect the indexes of your wanted string:</p>
<pre><code>&gt;&gt;&gt; list_of_strings = ['Hello!, my name is Carl', 'Hello!, my name is Steve', 'Hello!, my name is Betty', 'My Name is Josh']
&gt;&gt;&gt; [s.find('Hello!') for s in list_of_strings]
[0, 0, 0, -1]
</code></pre>
<p>Note how the negative 1 shows that the final string does not contain the value you're looking for.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/2/library/string.html#string.find" rel="nofollow"><code>string.find</code></a> method.</p>
<pre><code>&gt;&gt;&gt; phrase = 'Hello, my name is Syko'
&gt;&gt;&gt; phrase.find('Hello')
0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehensions</a></p>
<p>[(s, s.lower().index('hello')) for s in list_of_strings if s.lower() == 'hello']</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; list_of_strings = ['Hello!, my name is Carl', 'Hello!, my name is Steve', 'Hello!, my name is Betty']

&gt;&gt;&gt; indices = [position for position, phrase in enumerate(list_of_strings) if 'Hello!' in phrase]
&gt;&gt;&gt; print indices
[0, 1, 2]
</code></pre>
<p>Using a comprehension list, loop over the list and check if the string has the <code>Hello!</code> string inside, if yes, append the <code>position</code> to the matches list.</p>
<p>Note: The <code>enumerate</code> build in brings you the index for each element in the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>in case you are searching for multiple items in a list say Hello and name</p>
<p><code>find = lambda searchList, elem: [[i for i, x in enumerate(searchList) if x == e] for e in elem]
find(list_of_strings,['Hello','name'])
</code></p>
<p>output is a list with the positions of the elements you are searching for in the order that you listed them</p>
</div>
<span class="comment-copy">post your attempts..</span>
<span class="comment-copy">There's no need for that @Shashank, they have a well defined question, and just browsing documentation isn't going to help much.</span>
<span class="comment-copy">@JoshSmeaton If you say so.</span>
<span class="comment-copy">Again, what about encourages him learn to program, and the language, instead give answers?</span>
<span class="comment-copy">The original poster already indicated that he knew about <code>.find()</code> but they weren't sure how to apply that to a list. As far as I'm concerned, that's enough to show me that they've attempted a solution. Providing an example is much more useful than pointing someone at the documentation for list comprehensions without showing how they can be used.</span>
<span class="comment-copy">Exactly, if you provide just links then somebody will come along and say, 'oh hey links might change' so provide a working solution</span>
<span class="comment-copy">Thanks @JoshSmeaton, this is exactly what I was after. I assumed you could use .find but couldn't get it to work on a string inside a list. Much appreciated!</span>
<span class="comment-copy">What about encourages him learn to program, and the language, instead give answers?</span>
<span class="comment-copy">Thanks guys, I'll read up on list comprehensions</span>
<span class="comment-copy">He is a beginner. He even don't know a loop, imagine an enumerate!</span>
<span class="comment-copy">Ok, @syko, everyone here trust in you. Take it like a challenge and just do it. I think this online book is a good starting point: <a href="http://interactivepython.org/runestone/static/pythonds/index.html" rel="nofollow noreferrer">interactivepython.org/runestone/static/pythonds/index.html</a></span>
<span class="comment-copy">Thanks @sgmart. enumerate's look cool. I'll read up some more.</span>
<span class="comment-copy">Thanks for this, really useful actually. I already broke the string with another process, but this could have helped me avoid the need :-)</span>
