<div class="post-text" itemprop="text">
<p>I saw suggestions (see e.g. <a href="https://stackoverflow.com/questions/6357038/is-multiplication-and-division-using-shift-operators-in-c-actually-faster">Is multiplication and division using shift operators in C actually faster?</a>) that you should not manually replace multiplication with the shift operator, because the compiler has to do it automatically and shift operators decrease readability. I have written a simple test to check this:</p>
<pre><code>import numpy as np
import time

array1 = np.random.randint(size=10 ** 6, low=0, high=10 ** 5)
array2 = np.zeros((10 ** 6,), dtype=np.int)

total = 0.0
for i in range(100):
    start = time.clock()
    for j in range(len(array2)):
        array2[j] = array1[j] * 2
    total += time.clock() - start
print("*2 time = " + str(round(total / 10, 5)) + " ms")


total = 0.0
for i in range(100):
    start = time.clock()
    for j in range(len(array2)):
        array2[j] = array1[j] &lt;&lt; 1
    total += time.clock() - start
print("&lt;&lt; 1 time = " + str(round(total / 10, 5)) + " ms")


total = 0.0
for i in range(100):
    start = time.clock()
    for j in range(len(array2)):
        array2[j] = array1[j] // 2
    total += time.clock() - start
print("//2 time = " + str(round(total / 10, 5)) + " ms")


total = 0.0
for i in range(100):
    start = time.clock()
    for j in range(len(array2)):
        array2[j] = array1[j] &gt;&gt; 1
    total += time.clock() - start
print("&gt;&gt; 1 time = " + str(round(total / 10, 5)) + " ms")
</code></pre>
<p>I used equivalent operations (<code>* 2</code> is equivalent to <code>&lt;&lt; 1</code> and <code>// 2</code> to <code>&gt;&gt; 1</code>) and here is the result:</p>
<pre><code>*2 time = 5.15086 ms
&lt;&lt; 1 time = 4.76214 ms
//2 time = 5.17429 ms
&gt;&gt; 1 time = 4.79294 ms
</code></pre>
<p>What is wrong? Is my testing method wrong? Is the time measurement wrong? Or does Python not perform such optimizations (and, if yes, should I be afraid of that)? I used cPython 3.4.2 x64 on Win 8.1 x64.</p>
</div>
<div class="post-text" itemprop="text">
<p>This optimization doesn't occur at bytecode level:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(lambda x: x*2)
  1           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (2)
              6 BINARY_MULTIPLY
              7 RETURN_VALUE
&gt;&gt;&gt; dis.dis(lambda x: x&lt;&lt;1)
  1           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (1)
              6 BINARY_LSHIFT
              7 RETURN_VALUE
</code></pre>
<p>The <a href="https://docs.python.org/2/library/dis.html">dis</a> module allows you to show you what happens "inside" Python when your code is executed or, more precisely, what exactly is executed. The output shows that the <code>*</code> operator is mapped to <code>BINARY_MULTIPLY</code> and the <code>&lt;&lt;</code> operator is mapped to <code>BINARY_LSHIFT</code>. These two bytecode operations are implemented in C.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/dis.html" rel="nofollow noreferrer"><code>dis</code></a> (to look at the bytecode equivalent of functions) and <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code></a> (more robust timing than trying to do it manually using <code>time</code>) can give you a better idea of what's going on internally. Test script:</p>
<pre><code>def multiply(x):
    return x * 2

def l_shift(x):
    return x &lt;&lt; 1

def divide(x):
    return x // 2

def r_shift(x):
    return x &gt;&gt; 1

if __name__ == '__main__':
    import dis
    import timeit

    methods = (multiply, l_shift, divide, r_shift)
    setup = 'from __main__ import {}'.format(
        ', '.join(method.__name__ for method in methods),
    )
    for method in methods:
        print method.__name__
        dis.dis(method)
        print timeit.timeit(
            'for x in range(10): {}(x)'.format(method.__name__),
            setup=setup,
        )
        print
</code></pre>
<p>And outputs (CPython v2.7.6 on Windows 7):</p>
<pre><code>multiply
  2           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (2)
              6 BINARY_MULTIPLY     
              7 RETURN_VALUE        
2.22467834797

l_shift
  5           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (1)
              6 BINARY_LSHIFT       
              7 RETURN_VALUE        
2.05381004158

divide
  8           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (2)
              6 BINARY_FLOOR_DIVIDE 
              7 RETURN_VALUE        
2.43717730095

r_shift
 11           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (1)
              6 BINARY_RSHIFT       
              7 RETURN_VALUE        
2.08359396854
</code></pre>
<p>Clearly Python is <strong>not</strong> replacing the multiplication/division operations with the equivalent bit shifts (e.g. <code>BINARY_FLOOR_DIVIDE</code> is not replaced by <code>BINARY_RSHIFT</code>), although it looks like such an optimisation <em>could</em> give performance improvements. As to <em>why</em> the bit shift is faster, see e.g. <a href="https://softwareengineering.stackexchange.com/q/234967/110531">Speeds of &lt;&lt; &gt;&gt; multiplication and division</a> on Programmers.</p>
</div>
<div class="post-text" itemprop="text">
<p>Only in very limited circumstances could CPython implement these optimisations. The reason being that CPython is a ducked-typed language. </p>
<p>Given the code fragment <code>x * 2</code>, this can mean very different things dependent on the value of <code>x</code>. If <code>x</code> is an integer than it does indeed have the same meaning as <code>x &lt;&lt; 1</code>. However, if <code>x</code> is a float or a string or a list or any other class that implements <code>__mul__</code> in its own unique way then it most certainly doesn't have the same meaning as <code>x &lt;&lt; 1</code>. For example, <code>"a" * 2 == "aa"</code>. So unless the value of <code>x</code> is known at compile time then this optimisation cannot be made. If the value of <code>x</code> <em>is</em> known beforehand then the entire operation can be optimised away eg.</p>
<pre><code>In [3]: import dis

In [4]: def f():
   ...:     return 2 * 2
   ...: 

In [5]: dis.dis(f)
  2           0 LOAD_CONST               2 (4)
              3 RETURN_VALUE
</code></pre>
<p>You can see that the compiler has performed the operation itself and just returns the constant value <code>4</code>.</p>
</div>
<span class="comment-copy">You can use <a href="https://docs.python.org/3/library/dis.html" rel="nofollow noreferrer"><code>dis</code></a> to look at the bytecode, and <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code></a> to get more accurate timing.</span>
<span class="comment-copy"><i>"I saw suggestions, that you should not manually replace multiplication with shift operator, because compiler have to do it automatically and shift operators decrease readability."</i> - where did you see these suggestions?</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/6357038/is-multiplication-and-division-using-shift-operators-in-c-actually-faster" title="is multiplication and division using shift operators in c actually faster">stackoverflow.com/questions/6357038/â€¦</a> for example</span>
<span class="comment-copy">Wondering why you divide by 10 when you run them 100 times. Are you on Unix?</span>
<span class="comment-copy">Python is byte-code interpreted and byte-code is a representation of the source and should not be optimized. The optimization might happen on runtime. E.g. LLVM does not create this shift-operation when LLVM-IR is created. Just when the entire stuff goes to the CPU and the real instructions are created. Thats why you see these optimizations e.g. in C and C++ compilers and JITs, not CPython.</span>
<span class="comment-copy">Perhaps you could explain in more detail what this is showing.</span>
<span class="comment-copy">@khelwood You are right. Updating.</span>
