<div class="post-text" itemprop="text">
<p>I have two lists. For example,  </p>
<pre><code>list1 = ["7","3","19","5"]  
list2 = ["3","15,"13","16"]  
</code></pre>
<p>I want to add the these numbers together so I get another four numbers. For example the result of <code>7+3</code> and <code>3+15</code>.  </p>
<p>My output overall should be</p>
<pre><code>["10","18","32","21"]
</code></pre>
<p>I've tried using a for loop to do this however instead of getting <code>7+3 = 10</code> I get <code>7+3 = 73</code>. I have also tried using the <code>int()</code> method but I get an error.   </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a>, <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow"><code>int</code></a>, and <a href="https://docs.python.org/3/library/functions.html#func-str" rel="nofollow"><code>str</code></a> inside a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>.</p>
<pre><code>[str(int(x) + int(y)) for x, y in zip(list1, list2)]
</code></pre>
<p>Result:</p>
<pre><code>['10', '18', '32', '21']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all, your have lists of strings (not integers). <code>"7"</code> is a string. If you add it to <code>"3"</code>, you will get <code>"73"</code>. <code>7</code> is an integer. </p>
<p>The first thing would be to convert your lists into integers. Here's one way of doing it and the one I'd use. </p>
<pre><code>list1 = map(int, list1)
</code></pre>
<p>This is asking python to call the <code>int</code> function on every element of the <code>list1</code> in the argument and assign the return value back to <code>list1</code>. Similarly for <code>list2</code>. Once that's done, you have two lists of integers you can add. </p>
<p>This can be done in several ways. I'd do it like this. </p>
<pre><code>res = []
for l1, l2 in zip(list1, list2):
    res.append(l1 + l2)
</code></pre>
<p>The <code>zip</code> function will "zip" elements of multiple lists into groups. So your lists would get zipped into tuples like <code>(7,3)</code>, <code>(3, 15)</code> etc. The loop with the double variable will unpack these tuples each time so that you'll get <code>l1 =7</code> and <code>l2 =3</code> in the first iteration and so forth. </p>
<p>Sum them and put them back into the result list. </p>
<p>There are more succinct ways to do this but this is clear. If you're interested, here's another. </p>
<pre><code>[int(x1) + int(x2) for x1,x2 in zip(l1, l2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that you are concatenating strings. </p>
<p>Using the <code>map</code> function, you will get desired int list <code>[7,3,19,5]</code> from the original string list <code>["7","3","19","5"]</code>.</p>
<p>Then you can use <code>zip</code> to sum both arrays.</p>
<pre><code>list1 = ["7","3","19","5"]  
list2 = ["3","15","13","16"]  
print [x+y for x,y in zip(map(int, list1), map(int, list2))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>list1 = ["7","3","19","5"]
list2 = ["3","15","13","16"]
print [str(x+y) for x,y in zip(map(int,list1),map(int,list2))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this does what you want.
First I convert the list into integers list. I zip them together and take each pair and sum them </p>
<pre><code>[str(sum(c)) for c in zip(map(int, list1),map(int, list2))]
</code></pre>
<p>using sum is better than using c[0]+c[1]</p>
</div>
<div class="post-text" itemprop="text">
<p>Iterative solution (<em>Python 2.x</em>):</p>
<pre><code>from operator import add
from itertools import starmap, imap, izip, tee, chain


def pairwise(seq):
    a, b = tee(seq)
    next(b, None)
    return izip(a, b)


list1 = ["7", "3", "19", "5"]
list2 = ["3", "15", "13", "16"]
print list(starmap(add, pairwise(imap(int, chain(list1, list2)))))
</code></pre>
<p>Output:</p>
<pre><code>$ python foo.py
[10, 22, 24, 8, 18, 28, 29]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Function that could be used to add any number of lists.</p>
<pre><code>list1 = ["7","3","19","5"]  
list2 = ["3","15","13","16"] 

def stradd(*args):
    return [str(sum(map(int, x))) for x in zip(*args)]

print stradd(list1, list2)
</code></pre>
<blockquote>
<p>['10', '18', '32', '21']</p>
</blockquote>
</div>
<span class="comment-copy">So what error did you get? Can you show us that code? You have string values, so <code>'7' + '3'</code> is indeed <code>'73'</code>; the strings are concatenated in the same way that <code>'hello ' + 'world'</code> makes <code>'hello world'</code>.</span>
<span class="comment-copy">Hint: Use <code>zip</code>, <code>int</code>, and <code>str</code>.</span>
<span class="comment-copy">you are concatenating strings. You have to cast to int if you want to preform arithmetic operations</span>
<span class="comment-copy">Since the expected output is also strings, you could add a <code>str()</code> call in there. Also, why not use tuple assignment in the <code>for</code> loop? <code>for a, b in zip(list1, list2): res.append(str(int(a) + int(b)))</code>.</span>
<span class="comment-copy">And instead of <code>res = []</code>, and <code>res.append()</code>, a list comprehension would be more compact and efficient and readable.</span>
<span class="comment-copy">@MartijnPieters I use sum rather than accessing the tuple so he might use 3 arrays</span>
<span class="comment-copy"><code>sum()</code> is overkill for adding two integers.</span>
