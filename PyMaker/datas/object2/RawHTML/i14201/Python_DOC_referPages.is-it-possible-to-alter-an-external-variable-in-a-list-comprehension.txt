<div class="post-text" itemprop="text">
<p>For instance:</p>
<pre><code>n = 0
i = [n=n+1 for x in range(1,(12*8)+1) if x % 2 == 0]
</code></pre>
<p>This is just a silly question, I don't have any real use for this. I could use a for or while loop to achieve something similar. I'm just interested if this is possible. (Which is assume it's not haha.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot make assignments within list comprehension bodies. The language specification only allows <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-comprehension" rel="nofollow">expressions</a>. However, this means that you <em>can</em> call methods that have side effects. For example, you could call <code>list.append</code> to modify a different list, e.g.</p>
<pre><code>&gt;&gt;&gt; lst = []
&gt;&gt;&gt; [lst.append(i) for i in range(5)]
[None, None, None, None, None]
&gt;&gt;&gt; lst
[0, 1, 2, 3, 4]
</code></pre>
<p>But this is very rarely useful, and most of the times ends up in a more confusing expression. Itâ€™s far more recommended to just split it up to a standard for loop then; this also avoids the overhead of the generated list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not exactly.  In Python expressions cannot assign, and assignments do not act as values.  Therefore, your code produces a syntax error.</p>
<p>What you can do instead, if you are just interested in <code>n</code>:</p>
<pre><code>from collections import Counter

n = Counter(True for x in range(1, (12*8)+1) if x % 2 == 0)[True]
</code></pre>
<p>If you are just interested in <code>i</code>, go with @poke's answer:</p>
<pre><code>i = []
[i.append(x) for x in range(1, (12*8)+1) if x % 2 == 0]
i
</code></pre>
<p>That said, expressions don't have to be side-effect-free.  If you want both <code>i</code> and <code>n</code>, you can do this:</p>
<pre><code>class Count:
    def __init__(self, value=0):
        self._value = value

    @property
    def incr(self):
        self._value += 1
        return self._value

    def __int__(self):
        return self._value

n = Count(0)
i = [n.incr for x in range(1, (12*8) + 1) if x % 2 == 0]
n = int(n)
</code></pre>
</div>
<span class="comment-copy">what is the output expected.... I am a bit confused here....</span>
<span class="comment-copy">Did you try it? Did it error?</span>
<span class="comment-copy">His range expression sucks for exemplifying, but I assume that (replacing it for <code>range(1,5)</code> ), OP wants <code>i</code> to be [1,2,3,4]; and <code>n</code> to be 4.</span>
<span class="comment-copy">Thanks for this, it was just a stupid useless idea I had and I wanted to see if it was possible.</span>
