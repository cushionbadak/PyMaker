<div class="post-text" itemprop="text">
<p>My file is formatted into three columns of numbers:</p>
<pre><code>2    12345    1.12345
1    54321    1.54321
3    12345    1.12345
</code></pre>
<p>I would like to have Python use the first two columns as keys and use the third column as the values. The file is large, meaning that I can't format it by hand. So how do I have Python automatically convert my large file into a dictionary?</p>
<p>Here is my code: </p>
<pre><code>with open ('file name.txt' 'r') as f:
    rows = ( line.split('\t') for line in f ) 
    d = { row[0]:row[:3] for row in rows}
    print(d)
</code></pre>
<p>The output prints the numbers diagonally all over the place. How do I format it properly?</p>
</div>
<div class="post-text" itemprop="text">
<p>Banana, you're close.</p>
<ol>
<li>You need a comma separating the arguments of <code>open</code>.</li>
<li>You want to assign the third member of <code>row</code>, i.e. <code>row[2]</code>.</li>
<li>You need to decide how to group the first two members of row into a hashable key. Making a tuple out of them, i.e. <code>(row[0],row[1])</code> works.</li>
<li>Print the dictionary line by line.</li>
</ol>
<p>Try:</p>
<pre><code>with open('filename.txt','r') as f:
    rows = ( line.split('\t') for line in f ) 
    d = { (row[0],row[1]):row[2] for row in rows}
for key in d.keys():
    print key,d[key]    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure exactly how you want the keys to layout. Regardless, you should use the csv module, using the <code>'\t'</code> as your delimiter.</p>
<pre><code>import csv

with open('data.txt') as file:
    tsvfile = csv.reader(file, delimiter='\t')
    d = { "{},{}".format(row[0], row[1]): row[2] for row in tsvfile }
    print(d)
</code></pre>
<p>Prints out:
    {'3,12345': '1.12345', '1,54321': '1.54321', '2,12345': '1.12345'}</p>
<p>Alternatively, you have this:</p>
<pre><code>with open('data.txt') as file:
    tsvfile = csv.reader(file, delimiter='\t')
    d = {}
    for row in tsvfile:
        d[row[0]] = row[2]
        d[row[1]] = row[2]
    print(d)
</code></pre>
<p>Prints out:</p>
<pre><code>{'54321': '1.54321', '3': '1.12345', '1': '1.54321', '12345': '1.12345', '2': '1.12345'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should try -</p>
<pre><code>import pprint
d = {}
with open ('file name.txt','r') as f:
    for line in f:
        row = line.split('\t')
        if len(row) == 3:
            d[(row[0], row[1])] = row[2]
pp = pprint.PrettyPrinter(indent=4)
pp.pprint(d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all your slicing is wrong.You can get the first tow column with <code>line[:2]</code> and 3rd with <code>line[2]</code>.</p>
<p>Also you don't need to create your rows in a separated data structure you can use unpacking operation and <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow"><code>map</code></a> function within a <a href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries" rel="nofollow">dict comprehension</a> :</p>
<pre><code>with open ('ex.txt') as f:
      d={tuple(i):j.strip() for *i,j in map(lambda line:line.split('\t'),f)}

print(d) 
</code></pre>
<p>result :</p>
<pre><code>{('2', '12345'): '1.12345', ('3', '12345'): '1.12345', ('1', '54321'): '1.54321'}
</code></pre>
<p>Note that as <code>*i</code> is a list and lists are unhashable objects you can not use it as your dictionary key so you can convert it to <code>tuple</code>. </p>
<p>And if you want to preserve the order you can use <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow"><code>collections.OrderedDict</code></a> :</p>
<pre><code>from collections import OrderedDict
with open ('ex.txt') as f:
      d=OrderedDict({tuple(i):j.strip() for *i,j in map(lambda line:line.split('\t'),f)})

print(d)
OrderedDict([(('2', '12345'), '1.12345'), (('1', '54321'), '1.54321'), (('3', '12345'), '1.12345')])
</code></pre>
</div>
<span class="comment-copy">It looks like the first line of the sample would create a key of <code>"2"</code> and a value of <code>['2', '12345', '1.12345']</code>. Is that what you intend? As far as printing it, sending a dictionary to the standard <code>print()</code> function doesn't automatically format it, so you'll have to decide how you want to print it and then implement it.</span>
<span class="comment-copy">Can you give a sample of the desired output?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/pprint.html" rel="nofollow noreferrer">pprint</a> may be  able to help some with the formatting.</span>
<span class="comment-copy">Dude you need to put example output. How're you gonna access this dictionary? @TigerhawkT3 already suggested a solution that you can process sequentially. Otherwise you have to create dict-of-dict - and define on what keys you want to access what values.</span>
<span class="comment-copy">Yes at @TigerhawkT3 that is exactly what intend or atleast what my professor wants. Perhaps there is a more simpler way of going about this? Please let me know. The dict-of-dict idea seems promising. Can you guys elaborate?</span>
<span class="comment-copy">I suspect issue 1 was a copy-paste error, since if they had it like that in their program I think they'd get a traceback saying that <code>'filename.txtr</code> doesn't exist.</span>
<span class="comment-copy">This approach, by the way, includes the newline character '\n' as the final character of each dictionary value. To avoid this, use <code>strip()</code>, either in <code>rows = ( line.strip().split('\t') for line in f)</code> or <code>d = { (row[0],row[1]):row[2].strip() for row in rows}</code>. Nice dictionary comprehension, though.</span>
<span class="comment-copy">Can you explain why do I keep getting the error "IndexError: list index out of range?" Does it have to do with my file. If so, what is wrong? @rjonnal</span>
<span class="comment-copy">It may be because one of the rows in your file has just two values, but I can't reproduce the error without your data file.</span>
<span class="comment-copy">That won't print the dictionary any more neatly than what the OP has (and I'm not certain it's the dictionary structure they want).</span>
<span class="comment-copy">True, but it does fix the logical issues the OP had in his code, atleast according to his requirements</span>
<span class="comment-copy">I think using pprint is the answer for his question. That formats the dictionary and prints it <b>properly</b> on the screen.</span>
<span class="comment-copy">Using pprint now.</span>
<span class="comment-copy">Apparently this results in "IndexError=list index out of range". What do suppose I do?</span>
<span class="comment-copy">Can you help me? Your output is my desired output. But can you elaborate on your explanation?</span>
<span class="comment-copy">@Banana0101 What part is ambiguous?</span>
<span class="comment-copy">I inserted parts of your example above and got punctuation marks in the output @Kasra</span>
<span class="comment-copy">@Banana0101 sorry i didn't get what you mean? I said what part of the code you didn't understand?</span>
<span class="comment-copy">I am new to this. If this makes any sense, I can't completely grasp how to incorporate my code into the examples you've given me above. @kasra</span>
