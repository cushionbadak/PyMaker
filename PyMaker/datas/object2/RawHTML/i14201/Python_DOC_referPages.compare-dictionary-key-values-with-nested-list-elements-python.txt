<div class="post-text" itemprop="text">
<p>Trying to match key, values in dictionaries with nested list elements</p>
<pre><code>dict = {'a':[1, 5], 'c':[7, 9], 'f':[10, 12], 'b':[15, 20]}
list_A = [['a', '4'], ['a', '7'], ['b', '17'], ['b', 10], ['c', '7'], ['d', '7'], ['f', '11'], ['f', '12']]
list_A_no_reps =['a', 'b', 'c', 'd', 'f']
</code></pre>
<p>I am trying to get a list which has the values that match with list_A and dict i.e. as in the values of list a ( the second elements in the nested lists) should lie between the value list pair of the dict. </p>
<p><code>match_list = [['a', '4'], ['b', '17'], ['c', '7'], ['f', '11'], ['f', '12']]</code></p>
<p>I am trying to first match the keys of dict with list_A_no_reps and if there is a match, I am trying to find out if it lies between the values of each key, value pair. I have this so far:</p>
<pre><code>g = []
for key, values in dict.items():
   for element in list_A_no_rep:
      if key == element:
         for cord in list_A:
            if (values[0] &lt;= int(cord[1]) &lt;= values[2]):
               g.append(cord)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would group the sublists in a dict by the first element which is the letter then iterate over your original dict and check if each key is in the grouping dict and do your comparison.</p>
<pre><code>d = {'a': [1, 5], 'c': [7, 9], 'f': [10, 12], 'b': [15, 20]}

list_A = [['a', '4'], ['a', '7'], ['b', '17'], ['b', 10], ['c', '7'], ['d', '7'], ['f', '11'], ['f', '12']]

from collections import defaultdict

d2 = defaultdict(list)

for k,v in list_A:
    d2[k].append(v)

out = []
for k, v in d.items():
    if k in d2:
        vals = d2[k]
        for v2 in vals:
            if v[0] &lt;= int(v2) &lt;= v[1]:
                out.append([k,v2])
print(out)
['a', '4'], ['c', '7'], ['b', '17'], ['f', '11'], ['f', '12']]
</code></pre>
<p>Or use viewkeys to get the common keys:</p>
<pre><code>out = []
for k in d.viewkeys() &amp; d2.viewkeys():
    vals, v = d2[k], d[k]
    for v2 in vals:
        if v[0] &lt;= int(v2) &lt;= v[1]:
            out.append([k,v2])
</code></pre>
<p>Or just loop over listA:</p>
<pre><code>d = {'a': [1, 5], 'c': [7, 9], 'f': [10, 12], 'b': [15, 20]}

list_A = [['a', '4'], ['a', '7'], ['b', '17'], ['b', 10], ['c', '7'], ['d', '7'], ['f', '11'], ['f', '12']]

out = []
for sub in list_A:
    k, val = sub
    if k in d:
        v = d[k]
        if v[0] &lt;= int(val) &lt;= v[1]:
            out.append(sub)
print(out)
[['a', '4'], ['b', '17'], ['c', '7'], ['f', '11'], ['f', '12']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try:</p>
<pre><code>g = []
for key, values in dict.items():
    if key in list_A_no_rep:
        for cord in list_A:
        if ( cord[0] == key ):
                if (values[0] &lt;= int(cord[1]) &lt;= values[1]):
                    g.append(cord)
print g
</code></pre>
<p>Output:</p>
<pre><code>[['a', '4'], ['c', '7'], ['b', '17'], ['f', '11'], ['f', '12']]
</code></pre>
<p>Modification in your code:</p>
<pre><code>g = []
for key, values in dict.items():
    for element in list_A_no_rep:
        if key == element:
            for cord in list_A:
                if ( cord[0] == element ): #line added
                    if (values[0] &lt;= int(cord[1]) &lt;= values[1]):
                        g.append(cord)
</code></pre>
<p>The problem in your code was that you were checking with all other elements of <code>list_A</code> too. Therefore you would be getting the undesired value which might come within the range of some another key's range. So a if condition is required to check if a valid comparison with same key is occurring.</p>
<p>For example, without if condition you would have checked <code>['a','7']</code> with <code>c:[7,9]</code>. Hence you would have included it in <code>g</code> even though it does not satisfy the range specified for <code>a</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Update</strong></p>
<p>Change <code>values[2]</code> to <code>values[1]</code></p>
<p>As your dictionary has two elements and indexing is zero based, so <code>[1, 5]</code> would result in <code>values[0] == 1 and values[1] == 5</code></p>
<p>Also you might like to go for a better solution, by leaving out <code>list_A_no_reps</code> and removing the <code>if key == element</code> block, then using <code>cord[0]</code> to compare.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>d = {'a':[1, 5], 'c':[7, 9], 'f':[10, 12], 'b':[15, 20]}
li = [['a', '4'], ['a', '7'], ['b', '17'], ['b', 10], ['c', '7'], ['d', '7'], ['f', '11'], ['f', '12']]
</code></pre>
<p>It would be quicker to look up a key in <code>d</code> for each set of values in <code>li</code> than iterate through the list for each key in <code>d</code>.  This can be done in a single line with a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>:</p>
<pre><code>match_li = [v for v in li if v[0] in d and  d[v[0]][0] &lt;= int(v[1]) &lt;=  d[v[0]][2]]
</code></pre>
<p>yields</p>
<pre><code>[['a', '4'], ['b', '17'], ['c', '7'], ['f', '11'], ['f', '12']]
</code></pre>
</div>
<span class="comment-copy">Perfect explanation!</span>
