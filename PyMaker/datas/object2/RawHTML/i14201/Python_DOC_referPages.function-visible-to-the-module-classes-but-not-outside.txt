<div class="post-text" itemprop="text">
<p>According to <a href="http://www.faqs.org/docs/diveintopython/fileinfo_private.html" rel="noreferrer">http://www.faqs.org/docs/diveintopython/fileinfo_private.html</a>:</p>
<blockquote>
<p>Like most languages, Python has the
  concept of private elements: </p>
<ul>
<li>Private
  functions, which can't be called from
  <strong>outside their module</strong></li>
</ul>
</blockquote>
<p>However, if I define two files:</p>
<pre><code>#a.py
__num=1
</code></pre>
<p>and:</p>
<pre><code>#b.py
import a
print a.__num
</code></pre>
<p>when i run <code>b.py</code> it prints out <code>1</code> without giving any exception. Is diveintopython wrong, or did I misunderstand something? And is there some way to <strong>do</strong> define a module's function as private?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, "privacy" depends on "consenting adults'" levels of agreement - you can't <em>force</em> it (any more than you can in real life;-).  A single leading underscore means you're not <strong>supposed</strong> to access it "from the outside" -- <strong>two</strong> leading underscores (w/o trailing underscores) carry the message even more forcefully... but, in the end, it still depends on social convention and consensus: Python's introspection is forceful enough that you can't <strong>handcuff</strong> every other programmer in the world to respect your wishes.</p>
<p>((Btw, though it's a closely held secret, much the same holds for C++: with most compilers, a simple <code>#define private public</code> line before <code>#include</code>ing your <code>.h</code> file is all it takes for wily coders to make hash of your "privacy"...!-))</p>
</div>
<div class="post-text" itemprop="text">
<p>There may be confusion between <strong><em>class privates</em></strong> and <strong><em>module privates</em></strong>.</p>
<p>A <em>module private</em> starts with <strong>one underscore</strong><br/>
Such a element is not copied along when using the <code>from &lt;module_name&gt; import *</code> form of the import command;  it is however imported if using the <code>import &lt;moudule_name&gt;</code> syntax  (<a href="https://stackoverflow.com/a/13618522/166686">see Ben Wilhelm's answer</a>)<br/>
Simply remove one underscore from the a.__num of the question's example and it won't show in modules that import a.py using the <code>from a import *</code> syntax.</p>
<p>A <em>class private</em> starts with <strong>two underscores</strong>  (aka dunder i.e. d-ouble under-score) <br/>
Such a variable has its name "mangled" to include the classname etc.<br/>
It can still be accessed outside of the class logic, through the mangled name.<br/>
Although the name mangling can serve as a mild prevention device against unauthorized access, its main purpose is to prevent possible name collisions with class members of the ancestor classes. 
See Alex Martelli's funny but accurate reference to <em>consenting adults</em> as he describes the convention used in regards to these variables.</p>
<pre><code>&gt;&gt;&gt; class Foo(object):
...    __bar = 99
...    def PrintBar(self):
...        print(self.__bar)
...
&gt;&gt;&gt; myFoo = Foo()
&gt;&gt;&gt; myFoo.__bar  #direct attempt no go
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'Foo' object has no attribute '__bar'
&gt;&gt;&gt; myFoo.PrintBar()  # the class itself of course can access it
99
&gt;&gt;&gt; dir(Foo)    # yet can see it
['PrintBar', '_Foo__bar', '__class__', '__delattr__', '__dict__', '__doc__', '__
format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__',
'__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__
', '__subclasshook__', '__weakref__']
&gt;&gt;&gt; myFoo._Foo__bar  #and get to it by its mangled name !  (but I shouldn't!!!)
99
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This question was not fully answered, since module privacy is not purely conventional, and since using <strong>import</strong> may or may not recognize module privacy, depending on how it is used.</p>
<p>If you define private names in a module, those names <strong>will</strong> be imported into any script that uses the syntax, 'import module_name'. Thus, assuming you had correctly defined in your example the module private, _num, in a.py, like so..</p>
<pre><code>#a.py
_num=1
</code></pre>
<p>..you would be able to access it in b.py with the module name symbol:</p>
<pre><code>#b.py
import a
...
foo = a._num # 1
</code></pre>
<p>To import only non-privates from a.py, you must use the <strong>from</strong> syntax:</p>
<pre><code>#b.py
from a import *
...
foo = _num # throws NameError: name '_num' is not defined
</code></pre>
<p>For the sake of clarity, however, it is better to be explicit when importing names from modules, rather than importing them all with a '*':</p>
<pre><code>#b.py
from a import name1 
from a import name2
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python allows for private <em>class</em> members with the double underscore prefix.  This technique doesn't work at a module level so I am thinking this is a mistake in Dive Into Python.</p>
<p>Here is an example of private class functions:</p>
<pre><code>class foo():
    def bar(self): pass
    def __bar(self): pass

f = foo()
f.bar()   # this call succeeds
f.__bar() # this call fails
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can add an inner function:</p>
<pre><code>def public(self, args):
   def private(self.root, data):
       if (self.root != None):
          pass #do something with data
</code></pre>
<p>Something like that if you really need that level of privacy.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an ancient question, but both module private (one underscore) and class-private (two underscores) mangled variables are now covered in the standard documentation:</p>
<p><a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">The Python Tutorial</a> » <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">Classes</a> » <a href="https://docs.python.org/3/tutorial/classes.html#tut-private" rel="nofollow noreferrer">Private Variables</a></p>
</div>
<div class="post-text" itemprop="text">
<p>embedded with closures or functions is one way.  This is common in JS although not required for non-browser platforms or browser workers.</p>
<p>In Python it seems a bit strange, but if something really needs to be hidden than that might be the way.  More to the point using the python API and keeping things that require to be hidden in the C (or other language) is probably the best way.  Failing that I would go for putting the code inside a function, calling that and having it return the items you want to export.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has three modes via., private, public and protected .While importing a module only public mode is accessible .So private and protected modules cannot be called from outside of the module i.e., when it is imported .</p>
</div>
<span class="comment-copy">It's not that diveintopython is wrong, but in their example:  <code>&gt;&gt;&gt; import fileinfo &gt;&gt;&gt; m = fileinfo.MP3FileInfo() &gt;&gt;&gt; m.__parse("/music/_singles/kairo.mp3") 1 Traceback (innermost last):   File "&lt;interactive input&gt;", line 1, in ? AttributeError: 'MP3FileInfo' instance has no attribute '__parse'</code>   fileinfo.MP3FileInfo() is an instance of class. Which gives this exception when you use double underscore. Whereas in your case, you didn't create a class, you just created a module.  See also: <a href="https://stackoverflow.com/questions/70528/why-are-pythons-private-methods-not-actually-private" title="why are pythons private methods not actually private">stackoverflow.com/questions/70528/…</a></span>
<span class="comment-copy">Your note on C++ is incorrect. By using #define private public you're changing the code that gets sent to the compiler, which is where the name mangling takes place.</span>
<span class="comment-copy">Also the C++ mangling is obscure, but hardly secret. You can "introspect" a binary produced by C++ too. OT, sorry.</span>
<span class="comment-copy">As an update to @rhinoinrepose, it is not just incorrect, it is <a href="https://stackoverflow.com/questions/9109377/is-it-legal-to-redefine-a-c-keyword">undefined behavior according to the standard</a> to redefine a keyword with a preprocessor macro.</span>
<span class="comment-copy">You can use a closure to make a variable private and then return the variables you want to export.</span>
<span class="comment-copy">@AlexMartelli Isn't <code>static void foo()</code> as private as it gets. It is at least hidden to the linker, and the function may be removed entirely by inlining.</span>
<span class="comment-copy">Well, TIL.  Any reason why they don't enforce module-level <code>__private_function</code>, though? I ran into this and got into errors because of it.</span>
<span class="comment-copy">As per <a href="http://stackoverflow.com/a/13618522/3155195">stackoverflow.com/a/13618522/3155195</a>, the explanation of the single underscore is wrong.</span>
<span class="comment-copy">@zehnpaard Thank you for pointing this out!  I edited my answer to fix this inaccuracy.</span>
<span class="comment-copy">@mjv: Thanks for fixing!</span>
<span class="comment-copy">This should be the accepted answer</span>
<span class="comment-copy">Thank you! I was wondering why <code>a._num</code> was still working.</span>
<span class="comment-copy">where do you specify which functions/libraries are imported?  in the <b>init</b>.py?</span>
<span class="comment-copy">There is no risk of name collisions when <code>_names</code> are invoked with <code>import a</code> -- they are accesses as <code>a._names</code> when using this style.</span>
<span class="comment-copy">@FistOfFury Yes, you specify the functions imported in the <code>__init__.py</code> file.  See <a href="https://stackoverflow.com/a/64130/534238">here</a> for some help on that.</span>
<span class="comment-copy">I think the OP's intent is to write functions that are not accessible outside of, for example, a commercial package.  In that regard, this answer isn't complete.  The __bar() function is still accessible from outside through f._foo__bar().  Therefore, the double-leading underscores do not make it private.</span>
<span class="comment-copy">Why is this not the best answer?</span>
