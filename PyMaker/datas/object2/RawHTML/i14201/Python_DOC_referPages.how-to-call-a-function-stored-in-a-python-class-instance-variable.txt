<div class="post-text" itemprop="text">
<p>I'm passing a function as a parameter to a class constructor. The constructor stores it in an instance variable, and other class methods want to call it.</p>
<pre><code>class ComboList(list) :
    def __init__(self,a,b,kg) :
        list.__init__(self)
        self.__kg = kg
        # More stuff follows
</code></pre>
<p>When I try to call the function in another method, for example:</p>
<pre><code>x = self.__kg('a')
</code></pre>
<p>I get "{AttributeError}'' object has no attribute '__kg'."</p>
<p>When I evaluate the function call in my IDE's Evaluate Expression window, I get the same thing. But when I evaluate the instance variable itself ("self.__kg"), I get:</p>
<pre><code>result = {function} &lt;function &lt;lambda&gt; at 0x0000000002ED5C18&gt;
</code></pre>
<p>...so it appears that the attribute __kg <em>is</em> defined.</p>
<p>What is going wrong?</p>
<p>I can call the function by referencing the parameter -- no problem.</p>
<pre><code>kg(a')
</code></pre>
<p>I can also assign the parameter's value to a method variable and call the variable -- no problem.</p>
<pre><code>_kag = kg
_kag('a')
</code></pre>
<p>It's only the reference to the instance variable that doesn't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>Whenever a variable has a double underscore in a class, Python will invoke name mangling (see the <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow">Python documentation on classes</a>). Using double underscores is pretty much only to avoid name clashes with subclasses or to make a variable 'really private'. (See <a href="https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables" rel="nofollow">PEP8</a> for more style suggestions).</p>
<p>If you want other inherited subclasses to use your private variable, you can either use one single underscore (<code>_kg</code>) or use the <code>@property</code> decorator.</p>
<p>Check out this really dumb example:</p>
<pre><code>class ComboList(list) :
    def __init__(self,a,b,kg) :
        list.__init__(self)
        self.__kg = kg
        # More stuff follows

    @property
    def kg(self):
        return(self.__kg)

my_list = ComboList(1,2,'This will be printed')
print(my_list.kg)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't use double underscore, which makes python do some magic and append classname to variable names (called name mangling). Just use single underscore instead of double.</p>
</div>
<span class="comment-copy">This is <a href="https://en.wikipedia.org/wiki/Name_mangling#Name_mangling_in_Python" rel="nofollow noreferrer"><b>name mangling</b></a> - try <code>_ComboList__kg</code>. Or just ditch the double underscores.</span>
<span class="comment-copy">Can you please update the code where you are creating object of <code>ComboList</code> and calling the kg function?</span>
<span class="comment-copy">jonrsharpe, that makes sense but it's surprising. I know name mangling is supposed to make variables hard to get by accident outside the scope object where they're defined. I didn't expect it to make the hard to get on purpose WITHIN the scope object. @Anand, it's not clear what kind of update you mean. The code hasn't changed in any relevant way. If this is still want, please clarify and I'll try to accommodate you.</span>
<span class="comment-copy">I mean i tried your simplified approach in python 3.3, and it does not give me any error, can you update atleast the complete method , where you are doing <code>x = self.__kg('a')</code></span>
