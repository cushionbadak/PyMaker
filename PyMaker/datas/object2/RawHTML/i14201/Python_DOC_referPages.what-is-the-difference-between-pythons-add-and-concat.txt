<div class="post-text" itemprop="text">
<p>The list of Python's standard operators includes both <code>__add__(a, b)</code> and <code>__concat__(a, b)</code>. Both of them are usually invoked by <code>a + b</code>. My question is, what is the difference between them? Is there a scenario where one would be used rather than the other? Is there any reason you would define both on a single object?</p>
<p>Here's the <a href="https://docs.python.org/2/library/operator.html" rel="noreferrer">documentation</a> I found the methods mentioned in.</p>
<p>Edit: Adding to the weirdness is this <a href="https://docs.python.org/2/reference/datamodel.html#emulating-container-types" rel="noreferrer">documentation</a>:</p>
<blockquote>
<p>Finally, sequence types should implement addition (meaning concatenation) and multiplication (meaning repetition) by defining the methods <code>__add__()</code>, <code>__radd__()</code>, <code>__iadd__()</code>, <code>__mul__()</code>, <code>__rmul__()</code> and <code>__imul__()</code> described below; they should not define <code>__coerce__()</code> or other numerical operators.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>If you check the source for the <code>operator</code> module (<a href="https://hg.python.org/cpython/file/af793c7580f1/Lib/operator.py#l75" rel="noreferrer">add</a>, <a href="https://hg.python.org/cpython/file/af793c7580f1/Lib/operator.py#l146" rel="noreferrer">concat</a>), you will find these definitions for those functions:</p>
<pre><code>def add(a, b):
    "Same as a + b."
    return a + b

def concat(a, b):
    "Same as a + b, for a and b sequences."
    if not hasattr(a, '__getitem__'):
        msg = "'%s' object can't be concatenated" % type(a).__name__
        raise TypeError(msg)
    return a + b
</code></pre>
<p>So there is actually no difference except that <code>concat</code> actually requires a sequence type. Both functions use the <code>+</code> operator which effect depends on the types you add.</p>
<p>In general, using the <a href="https://docs.python.org/3/library/operator.html" rel="noreferrer"><code>operator</code> module</a> is not that useful most of the time. The module is mostly used when you need to pass a function that performs an operation, for example to functional functions like <a href="https://docs.python.org/3/library/functions.html#map" rel="noreferrer"><code>map</code></a>, <a href="https://docs.python.org/3/library/functions.html#filter" rel="noreferrer"><code>filter</code></a>, or <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="noreferrer"><code>reduce</code></a>. But usually, you can just use the <code>+</code> operator directly.</p>
<p>As for the underscore functions (<code>__add__</code> and <code>__concat__</code>), these are <a href="https://hg.python.org/cpython/file/af793c7580f1/Lib/operator.py#l418" rel="noreferrer">just aliases</a>:</p>
<pre><code>__add__ = add
__concat__ = concat
</code></pre>
<p>But those are of course not related to the <a href="https://docs.python.org/3/reference/datamodel.html#object.__add__" rel="noreferrer">special methods</a> used to overload operators for custom types. They are functions that match the same name as those special methods, probably to make them appear similar. Note that there is no special <code>__concat__</code> method on objects though.</p>
<p>Implementing <code>__add__</code> on a custom type will however affect how the operator module functions work, for example:</p>
<pre><code>&gt;&gt;&gt; class Example:
        def __init__ (self, x):
            self.x = x
        def __repr__ (self):
            return 'Example({})'.format(self.x)
        def __add__ (self, other):
            return Example(self.x + other.x)

&gt;&gt;&gt; a = Example(2)
&gt;&gt;&gt; b = Example(4)
&gt;&gt;&gt; operator.add(a, b)
Example(6)
&gt;&gt;&gt; a + b
Example(6)
</code></pre>
<p>As you can see, <code>operator.add</code> will use the implementation of the special method <code>Example.__add__</code>; but the reason for that is that the implementation of <code>operator.add</code> just uses the <code>+</code> operator (which behavior is explicitely defined by the special <code>__add__</code> method).</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><code>operator.__add__(a, b)</code>: Return <code>a + b</code>, for <code>a</code> and <code>b</code> <strong>numbers</strong> *.</li>
<li><code>operator.__concat__(a, b)</code>: Return <code>a + b</code> for <code>a</code> and <code>b</code> <strong>sequences</strong>.</li>
</ul>
<p>What's the difference?</p>
<p>For example, you can't concatenate integers:</p>
<pre><code>&gt;&gt;&gt; operator.__concat__(2,3)
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object can't be concatenated
</code></pre>
<hr/>
<ul>
<li>actually <code>__add__(a, b)</code> just does <code>a + b</code>, hence it works on sequences too.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>As per docs, </p>
<blockquote>
<p><code>operator.__add__(a, b)</code> Return a + b, for a and b numbers.</p>
<p><code>operator.__concat__(a, b)</code> Return a + b for a and b sequences.</p>
</blockquote>
<p><strong>operator.__add__(a, b):</strong></p>
<p>It will just try to perform <code>a + b</code> and give the result.</p>
<p><strong>Eg.</strong> </p>
<pre><code>operator.__add__(1,2)  # performs 1 + 2
3

operator.__add__('a','b') # performs 'a'+'b'
'ab'
</code></pre>
<p><strong>operator.__concat__(a, b):</strong></p>
<p>Here, it will check if <code>a</code> has attribute <code>__getitem__</code>. If it does not have <code>__getitem__</code> attribute it raises an exception otherwise then try to perform <code>a + b</code>.</p>
<p><strong>Eg.</strong></p>
<p>On performing this operations on numbers, it will raise an exception.</p>
<pre><code>operator.__concat__(1,2)
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
TypeError:'int' object can't be concatenated
</code></pre>
<p>When performed on two strings, it perform string concatenation.</p>
<pre><code>operator.__concat__('a','b')
'ab'
</code></pre>
</div>
<span class="comment-copy">Well according to the documentation you linked to one is for numbers and one is for sequences</span>
<span class="comment-copy">Note that <code>__concat__</code> isn't a <i>"magic method"</i> like <code>__add__</code> is: <a href="https://docs.python.org/2/reference/datamodel.html" rel="nofollow noreferrer">docs.python.org/2/reference/datamodel.html</a></span>
<span class="comment-copy"><i>Is</i> there a difference, except for the name?</span>
<span class="comment-copy">@jonrsharpe - What makes you say that one is a "magic method" and the other isn't? Is that even an official term - I thought it was just a term people made up because it's a lot easier to say the words "magic &lt;method&gt;" when referring to them in a verbal conversation than "underscore underscore &lt;method&gt; underscore underscore". Also, looking at the docs you linked to, I found a quote that makes this even more confusing. I edited my question to include it.</span>
<span class="comment-copy">@ArtOfWarfare <i>magic method</i> refers to the <code>__foo__</code> double-underscore-both-sides methods that <i>implement actual class behaviour</i> - for example <code>a + b</code> is resolved to <code>a.__add__(b)</code>. Why is that quote confusing you? It's just telling you that <code>__add__</code> for two sequences should generally join them end-to-end.</span>
<span class="comment-copy">well, <code>operator</code> module is useful for passing the operator to <code>reduce()</code></span>
<span class="comment-copy">@mescalinum That’s what I wrote: <i>“The module is mostly used when you need to pass a function that performs an operation.”</i></span>
<span class="comment-copy">ok. I just liked to mention <code>reduce()</code> because functional programming is so cool :)</span>
<span class="comment-copy">@mescalinum I added some functional examples, just for you ;)</span>
<span class="comment-copy">Does the behavior <i>actually</i> differ/limit? <code>operator.add("a","b")</code> produces the expected result (<code>"a"+"b"=&gt;"ab"</code>) and the documentation says that the both "Return a + b".</span>
<span class="comment-copy">Note that OP was talking about the <code>operator</code> modules, not special methods. Also note that there is no special <code>__concat__</code> method.</span>
<span class="comment-copy">updated the ans.</span>
