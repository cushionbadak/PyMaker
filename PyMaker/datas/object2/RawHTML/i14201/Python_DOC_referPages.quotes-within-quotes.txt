<div class="post-text" itemprop="text">
<p>In Python 3.x:</p>
<pre><code>    print(""s"")       # SyntaxError
    print("""s""")     # prints s
    print(""""s"""")   # SyntaxError
    print("""""s""""") # prints ""s
</code></pre>
<p>What is the reason behind this different behaviour, when there are different numbers of double quotes in the string?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python you can create multiline strings with <code>"""..."""</code>. Quoting the <a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow">documentation for strings</a>,</p>
<blockquote>
<p>String literals can span multiple lines. One way is using triple-quotes: <code>"""..."""</code> or <code>'''...'''</code>. </p>
</blockquote>
<p><strong>In your first case</strong>, <code>""s""</code> is parsed like this</p>
<pre class="lang-none prettyprint-override"><code>"" (empty string literal)  s  "" (empty string literal)
</code></pre>
<p>Now, Python doesn't know what to do with <code>s</code>. That is why it is failing with <code>SyntaxError</code>.</p>
<p><strong>In your third case</strong>, the string is parsed like this</p>
<pre class="lang-none prettyprint-override"><code>"""  "s  """ (End of multiline string)  `"`
</code></pre>
<p>Now the last <code>"</code> has no matching <code>"</code>. That is why it is failing.</p>
<p><strong>In the last case</strong>, <code>"""""s"""""</code> is parsed like this</p>
<pre class="lang-none prettyprint-override"><code>"""  ""s  """  ""
</code></pre>
<p>So, the multiline string is parsed successfully and then you have an empty string literal next to it. In Python, you can concatenate two string literals, by writing them next to each other, like this</p>
<pre><code>print ("a" "b")
# ab
</code></pre>
<p>So, the last empty string literal is concatenated with the <code>""s</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two things you need to know to understand this:</p>
<ol>
<li>As well as regular strings <code>"foo"</code> Python has <strong>multiline strings</strong>, which open and close with <em>three</em> quotes <code>"""foo"""</code> (see <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-literals" rel="nofollow"><em>String Literals</em></a>); and</li>
<li>Consecutive string literals are concatenated <code>"foo" "bar" == "foobar"</code> (see <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-literal-concatenation" rel="nofollow"><em>String Literal Concatenation</em></a>). </li>
</ol>
<p>As for your four examples:</p>
<pre><code>""s""
</code></pre>
<p>closes the single quote before the <code>s</code> appears, so is equivalent to:</p>
<pre><code>x = ""
x s x
</code></pre>
<p>which obviously makes no sense.</p>
<pre><code>"""s"""
</code></pre>
<p>is a multiline string with a single character in. </p>
<pre><code>""""s""""
</code></pre>
<p>is a multiline string containing two characters (<code>"s</code>) followed by a single unmatched quote.  </p>
<pre><code>"""""s"""""
</code></pre>
<p>is a multiline string containing three characters (<code>""s</code>) concatenated to an empty string literal. </p>
</div>
<div class="post-text" itemprop="text">
<p>The string literal concatenation rules inherited from C are responsible for that. Consider this:</p>
<pre><code>x = "a" "b"
</code></pre>
<p>The two strings are joined into one, according to Python syntax.</p>
<p>Another aspect of this is that triple-quoted strings (intended for multiline strings like doc strings) also exist, which further complicate the issue. There, a beginning triple-quote is matched by the next triple quote.</p>
<p>Now, consider your cases is that light and group every double quotes or triple quotes. You will find that in one case you have a single token <code>s</code> in the middle, sometimes the <code>s</code> is part of a string, sometimes there are leftover quotes at the end etc.</p>
</div>
