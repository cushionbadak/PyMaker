<div class="post-text" itemprop="text">
<p>my code is like:</p>
<pre><code>string = "title=abcd color=green title=efgh color=blue title=xyxyx color=yellow title=whatIwaht color=red title=xxxy red=anything title=xxxyyy color=red"
pattern = r'title=(.*?) color=red'
print re.compile(pattern).search(string).group(0)
</code></pre>
<p>and I got </p>
<pre><code>"title=abcd color=green title=efgh color=blue title=xyxyx color=yellow title=whatIwaht color=red title=xxxy red=anything title=xxxyyy color=red"
</code></pre>
<p>But I want to find all the contents of "title"s immediately followed by "color=red"</p>
</div>
<div class="post-text" itemprop="text">
<p>You want what immediately precedes <code>color=red</code>? Then use</p>
<pre><code>.*title=(.*?) color=red
</code></pre>
<p>Demo: <a href="https://regex101.com/r/sR4kN2/1" rel="nofollow">https://regex101.com/r/sR4kN2/1</a></p>
<p>This greedily matches everything that comes before <code>color=red</code>, so that only the desired title appears.</p>
<hr/>
<p>Alternatively, if you know there is a character that doesn't appear in the title, you can simplify by just using a character class exclusion. For example, if you know <code>=</code> won't appear:</p>
<pre><code>title=([^=]*?) color=red
</code></pre>
<p>Or, if you know whitespace won't appear:</p>
<pre><code>title=([^\s]*?) color=red
</code></pre>
<hr/>
<p>A third option, using a bit of code to find all red titles (assuming that the input always alternates title, color):</p>
<pre><code>for title, color in re.findall(r'title=(.*?) color=(.*?)\( |$\)'):
    if color == 'red':
        print title
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to get the last match of a sub-regexp before a certain regexp the solution is to use a greedy skipper. For example:</p>
<pre><code>&gt;&gt;&gt; pattern = '.*title="([^"]*)".*color="#123"'
&gt;&gt;&gt; text = 'title="123" color="#456" title="789" color="#123"'
&gt;&gt;&gt; print(re.match(pattern, s).groups(1))
</code></pre>
<p>the first <code>.*</code> is greedy and it will skip as much as possible (thus skipping first <code>title</code>) backing up to the one that allows matching the desired color.</p>
<p>As a simpler example consider that</p>
<pre><code>a(.*)b(.*)c
</code></pre>
<p>processed on</p>
<pre><code>a1111b2222b3333c
</code></pre>
<p>will match <code>1111b2222</code> in the first group and <code>3333</code> in the second.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you skip the regexes, and use some split functionality instead:</p>
<pre><code>search_title = False
found = None
string = "title=abcd color=green title=efgh color=blue title=xyxyx color=yellow title=whatIwaht colo\
r=red title=xxxy red=anything title=xxxyyy color=red"
parts = string.split()
for part in parts:
    key, value = part.split('=', 1)
    if search_title:
        if key == 'title':
            found = value
        search_title = False
    if key == 'color' and value == 'red':
        search_title = True
print(found)
</code></pre>
<p>results in</p>
<pre><code>xxxy
</code></pre>
<p>Regexes are nice, but can cause headaches at times.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this using <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow">re</a> module</p>
<pre><code>&gt;&gt;&gt;string = 'title=abcd color=green title=efgh color=blue title=xyxyx color=yellow title=whatIwaht color=red'
&gt;&gt;&gt;import re
&gt;&gt;&gt;re.search('(.*title=?)(.*) color=red', string).group(2)
'whatIwaht'

&gt;&gt;&gt;re.search('(.*title=?)(.*) color=red', string).group(2)
'xyxyx'
</code></pre>
</div>
<span class="comment-copy">What <b>do</b> you want the pattern to return?</span>
<span class="comment-copy">"that is close to": you'll need to define this much clearer. Is one short word like "and" less separation than 10 spaces? Example: <code>title="a" color="white" and title="b" \ \ \ \ \ \ \ \ \ \ color="black"</code>, what should match what? (I had to escape the spaces; just remove the backslashes mentally.)</span>
<span class="comment-copy">@Evert I updated the question. Thanks.</span>
<span class="comment-copy">I've altered the rather unparseable title to be more general (I assume the title still reflects what you intend to achiev).</span>
<span class="comment-copy">Will spaces be the only delimiter between your the "title=atitle" and "color=acolor", or can there be e.g., periods, commas, semi-colons, tabs etc?</span>
<span class="comment-copy">what if there are multiple "title=xxxx" color=red, this pattern only got the last one?</span>
<span class="comment-copy">Then use the second part.</span>
<span class="comment-copy">option 2 is exactly what I want, thank you very much</span>
