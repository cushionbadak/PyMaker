<div class="post-text" itemprop="text">
<p>Having a bit of trouble with while loops. I understand this basic for loop runs through whatever is passed into the function but how would I change the for loop to a while loop? Thought it would be as easy as changing the for to while but apparently not so.</p>
<pre><code>def print_data(items):
 for item in items:
    print(item)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do something like this to have the same printing functionality with a while loop:</p>
<pre><code>def print_data(items):
    i = 0
    while i &lt; len(items):
        print items[i]
        i += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a <code>while</code> loop version that works by constructing an iterator and manually walking it. It works regardless of whether the input is a generator or a list.</p>
<pre><code>def print_data(items):
 it = iter(items)
 while True:
   try:
     print next(it)
   except StopIteration:
     break

print_data([1,2,3])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One option, that works on both lists and generators, is to construct an iterator and then use Python's built-in <code>next</code> function. When the iterator reaches the end, the next function will raise a StopIteration exception, which you can use to break the loop:</p>
<pre><code>def print_data(items):
    it = iter(items)
    while True:
        try:
            print next(it)
        except StopIteration:
            break

print_data(['a', 'b', 'c'])
print_data(('a', 'b', 'c'))
</code></pre>
<p>There's more about the <a href="https://docs.python.org/2/library/functions.html#next" rel="nofollow">next</a> built-in function and <a href="https://docs.python.org/2/glossary.html#term-iterator" rel="nofollow">iterators</a> in the docs.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>If you are learning Python:</strong></p>
<p>If you need to iterate over an iterable (a list, a generator, a string etc.. in short and not precise words something that contains things and can "give" those things one by one..) you better use <code>for</code>.</p>
<p>In Python <code>for</code> was made for iterables, so you don't need a <code>while</code>.</p>
<p><strong>If you are learning programming in general:</strong></p>
<p><code>while</code> needs a condition to be satisfied to keep looping, you create your own condition making a counter that will increment every loop, and making the while loop go while this counter is less or equal to the lenght of your items, as showed in Mathias711's answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>The for-loop you are using is iterating through a so called <a href="https://docs.python.org/3.4/library/stdtypes.html#iterator-types" rel="nofollow"><code>iterator</code></a>.</p>
<p>This means to walk through iterable objects (lists, generators, dicts,...) and return the next item from the iterator which is returned by the built-in function <code>[next()][2]</code>. If there is no item left, calling this function will raise an so called <a href="https://docs.python.org/3/library/exceptions.html#StopIteration" rel="nofollow">StopIteration</a> error which causes to stop iteration.</p>
<p>So the pythonic way to iterate througth iteratable objects is in fact using the for-loop you provided in your question. However, if you really want to use a while loop (which at least in general is not recommended at all) you have to iterate using a <a href="https://docs.python.org/3.4/tutorial/errors.html#handling-exceptions" rel="nofollow">try-except-block</a> and handle the StopIteration error raised if no item is left.</p>
<pre><code>def iterate_manually(items):
    # convert items list into iterator
    iterator = iter(items)
    while True:
        try:
            print(next(iterator))
        # handle StopIteration error and exit while-loop
        except StopIteration:
            break

iterate_manually(['foo', 'bar', 'baz'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this</p>
<pre><code> def print_data(items):
   i =0
   while items:
     if i &lt; len(items):
       print items[i]
       i = i+1
     else:
       break 
</code></pre>
</div>
<span class="comment-copy">Are you aware of the differences between <code>for</code> and <code>while</code>? Have you read <a href="https://docs.python.org/3.4/reference/compound_stmts.html#while" rel="nofollow noreferrer">the relevant documentation</a>?</span>
<span class="comment-copy">i have, as i have read the passage about it in my textbook but im still really sturggling :/ Any pointers?</span>
<span class="comment-copy">I think the simple answer, really, is you can't (or rather shouldn't). They serve different purposes. A <code>for</code> loop will run once for every item in an iterable (thing that you can step through items of), a <code>while</code> loop will run for as long as the statement that follows it evaluates to <code>True</code>.</span>
<span class="comment-copy">Dupe of <a href="http://stackoverflow.com/questions/920645/when-to-use-while-or-the-for-in-python" title="when to use while or the for in python">stackoverflow.com/questions/920645/…</a></span>
<span class="comment-copy">Let's hope <code>items</code> is not a generator :)</span>
<span class="comment-copy">@FrédéricHamidi, I believe my solution works around this, but please let me know if there are edge cases I'm missing also.</span>
