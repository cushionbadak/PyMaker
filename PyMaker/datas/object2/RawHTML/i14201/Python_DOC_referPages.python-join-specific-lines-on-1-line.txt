<div class="post-text" itemprop="text">
<p>Let's say I have this file:</p>
<pre><code>1
17:02,111
Problem report related to
router

2
17:05,223
Restarting the systems

3
18:02,444
Must erase hard disk
now due to compromised data
</code></pre>
<p>I want this output:</p>
<pre><code>1
17:02,111
Problem report related to router

2
17:05,223
Restarting the systems

3
18:02,444
Must erase hard disk now due to compromised data
</code></pre>
<p>Been trying in bash and got to a kind of close solution but I don't know how to carry this out on Python.</p>
<p>Thank you in advance</p>
</div>
<div class="post-text" itemprop="text">
<h1>If you want to remove the extea lines :</h1>
<p>For this aim you can check 2 condition for each like one if the line don't followed by an empty  new line, or line should precede by a line that match with following regex <code>^\d{2}:\d{2},\d{3}\s$</code>.</p>
<p>So for access to next line in each iteration you can create one file object from your main file object with the name <code>temp</code> using <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow"><code>itertools.tee</code></a> and apply the <code>next</code> function on it. and use <code>re.match</code> to match the regex.</p>
<pre><code>from itertools import tee
import re
with open('ex.txt') as f,open('new.txt','w') as out:
    temp,f=tee(f)
    next(temp)
    try:
        for line in f:
            if next(temp) !='\n' or re.match(r'^\d{2}:\d{2},\d{3}\s$',pre):
                out.write(line)
            pre=line
    except :
        pass
</code></pre>
<p>result :</p>
<pre><code>1
17:02,111
Problem report related to

2
17:05,223
Restarting the systems

3
18:02,444
Must erase hard disk
</code></pre>
<hr/>
<h1>If you want to concatenate the rest to third line :</h1>
<p>And if you want to concatenate the rest lines after third line to third line you can use following regex to find all blocks that followed by <code>\n\n</code> or the end of file (<code>$</code>) :</p>
<pre><code>r"(.*?)(?=\n\n|$)"
</code></pre>
<p>then split your blocks based on the line that in in a date format and write the parts to your output file, but note that you need to replace the new lines within 3rd part with space  :</p>
<p>ex.txt:</p>
<pre><code>1
17:02,111
Problem report related to
router
another line


2
17:05,223
Restarting the systems

3
18:02,444
Must erase hard disk
now due to compromised data
line 5
line 6
line 7
</code></pre>
<p>Demo :</p>
<pre><code>def splitter(s):
    for x in re.finditer(r"(.*?)(?=\n\n|$)", s,re.DOTALL):
          g=x.group(0)
          if g:
            yield g

import re
with open('ex.txt') as f,open('new.txt','w') as out:
    for block in splitter(f.read()):
        first,second,third= re.split(r'(\d{2}:\d{2},\d{3}\n)',block)
        out.write(first+second+third.replace('\n',' '))
</code></pre>
<p>result :</p>
<pre><code>1
17:02,111
Problem report related to router another line
2
17:05,223
Restarting the systems
3
18:02,444
Must erase hard disk now due to compromised data line 5 line 6 line 7
</code></pre>
<h1><em>Note</em> :</h1>
<p>In this answer the <code>splitter</code> function returns a generator that is very efficient when you are dealing with huge files and refuse of storing unusable lines in memory.</p>
</div>
<div class="post-text" itemprop="text">
<p>This works well if and only if the file as per your given sample</p>
<p><strong>Note:</strong></p>
<p><code>There may be a faster way if  regex is used and it might also be simpler</code> but wanted to do it in a logical way</p>
<p><strong>Code:</strong></p>
<pre><code>inp=open("output.txt","r")
inp=inp.read().split("\n")
print inp
tempString=""
output=[]
w=0

for s in inp:
    if s:
        if any(c.isalpha() for c in s):
            tempString=tempString+" "+s
        else:
            w=0
            if tempString:
                output.append(tempString.strip())
                tempString=""
            output.append(s)       

    else:
        if tempString:
            output.append(tempString.strip())
            tempString=""
        output.append(" ")
if tempString:
    output.append(tempString.strip())


print "\n".join(output)
out=open("newoutput.txt","w")
out.write("\n".join(output))
out.close()
</code></pre>
<p><strong>Input:</strong></p>
<pre><code>1
17:02,111
Problem report related to
2 router

2
17:05,223
Restarting the systems

3
18:02,444
Must erase hard disk
now due to compromised data

4
17:02,111
Problem report related to
router
</code></pre>
<p><strong>output:</strong></p>
<pre><code>1
17:02,111
Problem report related to 2 router

2
17:05,223
Restarting the systems

3
18:02,444
Must erase hard disk now due to compromised data

4
17:02,111
Problem report related to router
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>x="""1
17:02,111
Problem report related to
router

2
17:05,223
Restarting the systems

3
18:02,444
Must erase hard disk
now due to compromised data
or something"""
def repl(matchobj):
    ll=matchobj.group().split("\n")
    return "\n".join(ll[:3])+" "+" ".join(ll[3:])
print re.sub(r"\b\d+\n\d+:\d+,\d+\b[\s\S]*?(?=\n{2}|$)",repl,x)
</code></pre>
<p>You can use <code>re.sub</code> with your own custom replacement feature.</p>
</div>
<span class="comment-copy">@aDoN I updated the answer with an approach using file also in that case you don't need to use <code>cat</code> and <code>pip</code>.</span>
<span class="comment-copy">correct me if I am wrong isn't your output wrong the third lines are removed but he wants it to be appended to second right</span>
<span class="comment-copy">@VigneshKalai Yeah thanks for reminding that seem i missed that or OP has edited the question!</span>
<span class="comment-copy">Nice answer though :p</span>
<span class="comment-copy">That solution work wonders but I have a doubt:  What does <code>(.*?)</code> do¿? I mean here <code>"(.*?)(?=\n\n|$)"</code> because I guess x.group(0) are the ones that match <code>\n\n|$</code>  Thanks</span>
<span class="comment-copy">Awesome solution, any idea if the text is:  Problem report related to 2 routers and "2" is the beginning of the newline¿?</span>
<span class="comment-copy">so you are saying the line may contain 2 routers right</span>
<span class="comment-copy">edited @aDoN hope it helps</span>
<span class="comment-copy">great solution too yeah</span>
