<div class="post-text" itemprop="text">
<p>I realised that the <code>open()</code> function I've been using was an alias to <code>io.open()</code> and that importing <code>*</code> from <code>os</code> would overshadow that. </p>
<p>What's the difference between opening files through the <code>io</code> module and <code>os</code> module?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>io.open()</code> is the preferred, higher-level interface to file I/O.  It wraps the OS-level file descriptor in an object that you can use to access the file in a Pythonic manner.</p>
<p><code>os.open()</code> is just a wrapper for the lower-level POSIX syscall.  It takes less symbolic (and more POSIX-y) arguments, and returns the file descriptor (a number) that represents the opened file.  It does <em>not</em> return a file object; the returned value will not have <code>read()</code> or <code>write()</code> methods.</p>
<p>From the <a href="http://docs.python.org/library/os.html#os.open" rel="noreferrer"><code>os.open()</code> documentation</a>:</p>
<blockquote>
<p>This function is intended for low-level I/O. For normal usage, use the built-in function <code>open()</code>, which returns a “file object” with <code>read()</code> and <code>write()</code> methods (and many more). </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Absolutely everything:</p>
<ul>
<li><p><a href="https://docs.python.org/2/library/os.html#os.open" rel="noreferrer"><code>os.open()</code></a> takes a <em>filename</em> as a string, the <em>file mode</em> as a bitwise mask of attributes, and an <em>optional argument</em> that describes the file permission bits, and returns a file descriptor as an integer.</p></li>
<li><p><a href="https://docs.python.org/2/library/io.html#io.open" rel="noreferrer"><code>io.open()</code></a> takes a <em>filename</em> as a string or a <em>file descriptor</em> as an integer, the <em>file mode</em> as a string, and <em>optional arguments</em> that describe the file encoding, buffering used, how encoding errors and newlines are handled, and if the underlying FD is closed when the file is closed, and returns some descendant of <code>io.IOBase</code>.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><code>os.open</code> is very similar to <a href="http://linux.die.net/man/2/open" rel="nofollow"><code>open()</code> from C in Unix</a>. You're unlikely to want to use it unless you're doing something much more low-level. It gives you an actual file descriptor (as in, a number, not an object).</p>
<p><code>io.open</code> is your basic Python <code>open()</code> and what you want to use just about all the time.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>os.open()</code> method opens the file file and set various flags according to flags and possibly its mode according to mode.</p>
<p>The default mode is 0777 (octal), and the current unmask value is first masked out.</p>
<p>This method returns the file descriptor for the newly opened file.</p>
<p>While,</p>
<p><code>io.open()</code> method opens a file, in the mode specified in the string mode. It returns a new file handle, or, in case of errors, nil plus an error message. </p>
<p>Hope this helps</p>
</div>
<div class="post-text" itemprop="text">
<p>To add to the existing answers:</p>
<blockquote>
<p>I realised that the open() function I've been using was an alias to io.open()</p>
</blockquote>
<p><code>open()</code> == <code>io.open()</code> in Python 3 only. In Python 2 they are different.</p>
<p>While with <code>open()</code> in Python we can obtain an easy-to-use file object with handy <code>read()</code> and <code>write()</code> methods, on the OS level files are accessed using file descriptors (or file handles in Windows). Thus, <code>os.open()</code> should be used implicitly under the hood. I haven't examined Python source code in this regard, but the documentation for the <code>opener</code> parameter, which was added for <code>open()</code> in Python 3.3, says:</p>
<blockquote>
<p>A custom opener can be used by passing a callable as <em>opener</em>. The
  underlying file descriptor for the file object is then obtained by
  calling <em>opener</em> with (<em>file</em>, <em>flags</em>). <em>opener</em> must return an open file
  descriptor (passing <code>os.open</code> as <em>opener</em> results in functionality similar
  to passing <code>None</code>).</p>
</blockquote>
<p>So <code>os.open()</code> is the default opener for <code>open()</code>, and we also have the ability to specify a custom wrapper around it if file flags or mode need to be changed. See the <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">documentation</a> for <code>open()</code> for an example of a custom opener, which opens a file relative to a given directory. </p>
</div>
<span class="comment-copy"><i>From the <a href="http://docs.python.org/release/3.1.3/library/os.html#os.open" rel="nofollow noreferrer">Python docs</a>:</i>  This function [<code>os.open</code>] is intended for low-level I/O. For normal usage, use the built-in function <code>open()</code>, which returns a file object with <code>read()</code> and <code>wprite()</code> methods (and many more). To wrap a file descriptor in a file object, use <code>fdopen()</code>.</span>
<span class="comment-copy">NEVER <code>import *</code>.</span>
<span class="comment-copy">This question should be labelled as python3. In python2 <code>open()</code> and <code>io.open()</code> are different.</span>
<span class="comment-copy">Although I have to wonder, why would anyone choose Python for low-level I/O?</span>
<span class="comment-copy">Maybe Python is the language in which the coder is the most comfortable.  Or maybe they are writing an addon for another Python program.</span>
<span class="comment-copy">Why not? Low-level manipulation doesn't dictate in what language it should we expressed.</span>
<span class="comment-copy">@IoannisFilippidis Because if you are going to use low-level interfaces, then why are you even using Python to begin with?  Unless what you're doing can't be accomplished using higher-level interfaces, or the higher-level interfaces have severe performance issues, you should use the higher-level interfaces in the language you are using -- otherwise you should just use a different language altogether.</span>
<span class="comment-copy">My point is that you <i>do</i> want to write low-level code in Python, among <i>other</i>, high-level code, to which Python is more suited.</span>
<span class="comment-copy">Does that mean if I take some of my simple C file IO code, prepend <code>os.</code> to the <code>stdio</code> functions, and change the extension to <code>.py</code>, the code will execute without errors?</span>
<span class="comment-copy">I highly highly doubt it, but I'd love to see how it goes (just don't break anything).</span>
