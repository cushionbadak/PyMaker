<div class="post-text" itemprop="text">
<p>I'm currently working on a simple file transfer program in Python. I am having trouble with the function for prompting the user for the location of the folder to be copied.</p>
<pre><code>def getSrc():
    if getSrc.has_been_called is False:
        source = askdirectory()
        getSrc.has_been_called = True
        return source
    else:
        return source

getSrc.has_been_called = False
</code></pre>
<p>The variable source comes up as an unresolved reference. I understand that the variable must be initialized again due to the scope of an if-else statement, but I am unsure of how to save the directory in the source variable without the user being prompted for the directory again.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you call <code>getSrc</code> a second time, the value of <code>source</code> that was created the first time has long since gone out of scope and been garbage collected. To prevent this, try making <code>source</code> an attribute of the function the same way you did for <code>has_been_called</code>.</p>
<pre><code>def getSrc():
    if getSrc.has_been_called is False:
        getSrc.source = askdirectory()
        getSrc.has_been_called = True
        return getSrc.source
    else:
        return getSrc.source
</code></pre>
<hr/>
<p>Although, it's a bit messy to have two attributes when you can make do with one:</p>
<pre><code>def getSrc():
    if not getSrc.source:
        getSrc.source = askdirectory()
    return getSrc.source
getSrc.source = None
</code></pre>
<hr/>
<p>If you're in a higher-order functional mood, it may be worthwhile to create a function that memoizes other functions. You can look at <a href="https://wiki.python.org/moin/PythonDecoratorLibrary#Memoize" rel="nofollow">PythonDecoratorLibrary</a> for some tips on doing that, or you can just use one <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow">already prepared by Python</a></p>
<pre><code>import functools

@functools.lru_cache()
def getSrc():
    return askdirectory()
</code></pre>
</div>
<span class="comment-copy">though Kevin's answer is a good fit for you, what you want is actually typical singleton pattern. employing design pattern will make your code clearer, especially when you are working with others. try to make it a serious singleton instance, that would help.</span>
