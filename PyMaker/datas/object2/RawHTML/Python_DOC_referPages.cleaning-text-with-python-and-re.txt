<div class="post-text" itemprop="text">
<p>I need to clean some text like the code below says:</p>
<pre><code>import re
def clean_text(text):
    text = text.lower()
    #foction de replacement
    text = re.sub(r"i'm","i am",text)
    text = re.sub(r"she's","she is",text)
    text = re.sub(r"can't","cannot",text)
    text = re.sub(r"[-()\"#/@;:&lt;&gt;{}-=~|.?,]","",text)
    return text

clean_questions= []
for question in questions: 
    clean_questions.append(clean_text(question))
</code></pre>
<p>and this code must give me the <code>questions</code> list clean but I got the clean <code>questions</code> empty. I reopened the spyder and the list got full but without being cleaned and then reopened it and I got it empty .. 
the console error says:</p>
<pre><code>In [10] :clean_questions= [] 
   ...: for question in questions: 
   ...: clean_questions.append(clean_text(question))
Traceback (most recent call last):

  File "&lt;ipython-input-6-d1c7ac95a43f&gt;", line 3, in &lt;module&gt;
    clean_questions.append(clean_text(question))

  File "&lt;ipython-input-5-8f5da8f003ac&gt;", line 16, in clean_text
    text = re.sub(r"[-()\"#/@;:&lt;&gt;{}-=~|.?,]","",text)

  File "C:\Users\hp\Anaconda3\lib\re.py", line 192, in sub
    return _compile(pattern, flags).sub(repl, string, count)

  File "C:\Users\hp\Anaconda3\lib\re.py", line 286, in _compile
   p = sre_compile.compile(pattern, flags)

  File "C:\Users\hp\Anaconda3\lib\sre_compile.py", line 764, in compile
    p = sre_parse.parse(p, flags)

  File "C:\Users\hp\Anaconda3\lib\sre_parse.py", line 930, in parse
    p = _parse_sub(source, pattern, flags &amp; SRE_FLAG_VERBOSE, 0)

  File "C:\Users\hp\Anaconda3\lib\sre_parse.py", line 426, in _parse_sub
    not nested and not items))

  File "C:\Users\hp\Anaconda3\lib\sre_parse.py", line 580, in _parse
    raise source.error(msg, len(this) + 1 + len(that))

error: bad character range }-=
</code></pre>
<p>I am using Python 3.6, specifically the Anaconda build Anaconda3-2018.12-Windows-x86_64.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your character class (as shown in the traceback) is invalid; <code>}</code> comes after <code>=</code> in ordinal value (<code>}</code> is 125, <code>=</code> is 61), and the <code>-</code> in between them means it's trying to match any character from <code>}</code>'s ordinal to <code>=</code>'s and in between. Since character ranges must go from low ordinal to high ordinal, 125-&gt;61 is nonsensical, thus the error.</p>
<p>In a way you got lucky; if the characters around the <code>-</code> had been reversed, e.g. <code>=-}</code>, you'd have silently removed all characters from ordinal 61 to 125 inclusive, which would have included, along with a mess of punctuation, all standard ASCII letters, both lower and uppercase.</p>
<p>You could fix this by just removing the second <code>-</code> in your character class (you already included it at the beginning of the class where it doesn't need to be escaped), changing from</p>
<pre><code>text = re.sub(r"[-()\"#/@;:&lt;&gt;{}-=~|.?,]", "", text)
</code></pre>
<p>to</p>
<pre><code>text = re.sub(r"[-()\"#/@;:&lt;&gt;{}=~|.?,]", "", text)
</code></pre>
<p>but I'm going to suggest dropping regular expressions here; the risk of mistakes with lots of literal punctuation is high, and there are other methods that don't involve regex at all that should work just fine and not make you worry if you escaped all the important stuff (the alternative is over-escaping, which makes the regex unreadable, and still error-prone).</p>
<p>Instead, replace that line with <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer">a simple <code>str.translate</code> call</a>. First off, outside the function, <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer">make a translation table of the things to remove</a>:</p>
<pre><code># The redundant - is harmless here since the result is a dict which dedupes anyway
killpunctuation = str.maketrans('', '', r"-()\"#/@;:&lt;&gt;{}-=~|.?,")
</code></pre>
<p>then replace the line:</p>
<pre><code>text = re.sub(r"[-()\"#/@;:&lt;&gt;{}-=~|.?,]","",text)
</code></pre>
<p>with:</p>
<pre><code>text = text.translate(killpunctuation)
</code></pre>
<p>It should run at least as fast as the regex (likely faster), and it's far less error-prone, since no character has special meaning (translation tables are just mappings from Unicode ordinals to <code>None</code>, meaning delete, another ordinal, meaning single character replacement, or a string, meaning char -&gt; multichar replacement; they don't have a concept of special escapes). If the goal is killing all ASCII punctuation, you're probably better off using the <code>string</code> module constant to define the translation table (which also makes the code more self-documenting, so people aren't wondering if you are removing all or just some punctuation, and whether it was intentional):</p>
<pre><code>import string
killpunctuation = str.maketrans('', '', string.punctuation)
</code></pre>
<p>As it happens, your existing string is not removing all punctuation (it misses, among other things, <code>^</code>, <code>!</code>, <code>$</code>, etc.), so this change might not be correct, but if it is correct, definitely make it. If it's supposed to be a subset of punctuation, you definitely want to add a comment as to how that punctuation was chosen, so maintainers don't wonder if you made a mistake.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to properly escape the special characters and enclose in square brackets</p>
<pre><code>re.sub(r'[-\(\)\"#\/@;:&lt;&gt;\{\}\-=~|\.\?]', '', some_text)
</code></pre>
<p>A more generic regex is for special characters (i.e not letter or number) is </p>
<pre><code>[^a-zA-Z0-9]
</code></pre>
</div>
<span class="comment-copy">Escape <code>\{\}</code> in the last pattern. But you probably need a character class instead: <code>"[-()\"#/@;:&lt;&gt;{}=~|.?,]+"</code>.</span>
<span class="comment-copy">@AndrasDeak: The traceback shows they were using a character class. So the real problem is a <i>bad</i> class, not the lack of one.</span>
<span class="comment-copy">@dasertnaut i am at first steps of creating a chatbot with DNLP</span>
<span class="comment-copy">@AndrasDeak I removed all the sentence but nothing changed</span>
<span class="comment-copy">The existing answers should explain well enough what the issue is; do you still not understand? The top-level issue is that <code>}-=</code> means "from <code>}</code> to <code>=</code> in the ASCII table" inside a character group (square brackets).</span>
<span class="comment-copy">thank you , the error dissapeared but the punctuation dosen't</span>
<span class="comment-copy">@olfamasmoudi: It should. I can't speak to what other errors your code may contain though.</span>
<span class="comment-copy">Note: While not harmful, most special characters lose their special meaning inside character sets, so you don't need nearly as many escapes as you used (you also inexplicably removed some characters, like <code>,</code>, from the set). I believe <code>r"[-()\"#/@;:&lt;&gt;{}=~|.?,]"</code> should work just fine (removing only the second <code>-</code>, since it was already included at the beginning on the class in a position where escaping was unnecessary).</span>
<span class="comment-copy">Supporting quote <a href="https://docs.python.org/3/library/re.html#index-9" rel="nofollow noreferrer">from docs</a>: "Special characters lose their special meaning inside sets. For example, <code>[(+*)]</code> will match any of the literal characters <code>'('</code>, <code>'+'</code>, <code>'*'</code>, or <code>')'</code>." Thus, escaping parentheses, braces, periods, forward slashes &amp; question marks are all unnecessary; off-hand only <code>\ </code> (anywhere), <code>-</code> (in the middle of a class), <code>^</code>(at the beginning of a class), <code>]</code> (<i>not</i> at the beginning of a class), and a few random things in the link that relate to future nested set support (<code>[</code>, <code>--</code>, <code>&amp;&amp;</code>, <code>~~</code>, <code>||</code>) need to be escaped.</span>
