<div class="post-text" itemprop="text">
<p>I have en Enum type:</p>
<pre><code> class SystemCommands(Enum):
    Get_FW_version = (0, 1)
    Get_MAC_address = (1,1)
    Set_MAC_address = (2,7)
    Get_IP_addr = (3,1)
    Set_IP_addr = (4,5)
    Get_server_IP_addr = (5,1)
    Set_server_IP_addr = (6,5)
    Get_subnet_Mask = (7,1)
    Set_subnet_Mask = (8,5)
    Get_Gateway_Address = (9,1)
    Set_Gateway_Address = (10,5)
    Welcome = (16,1)
    Request_Cannot_Served = (17,1)

    def __init__(self, CommandCode, length):
        self.CommandCode = CommandCode
        self.length = length
</code></pre>
<p>I would like to create an enum variable based only on an int value:</p>
<pre><code>code =10
...
Request = SystemCommands(code)
</code></pre>
<p>Of course i got a nice excpetion:</p>
<pre><code> raise ValueError("%r is not a valid %s" % (value, cls.__name__))
ValueError: 10 is not a valid SystemCommands
</code></pre>
<p>Question: How can I create a complex-typed enum based only one value?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from enum import Enum
class SystemCommands(Enum):
  Get_FW_version = (0, 1)
  Get_MAC_address = (1,1)
  Set_MAC_address = (2,7)
  Get_IP_addr = (3,1)
  Set_IP_addr = (4,5)
  Get_server_IP_addr = (5,1)
  Set_server_IP_addr = (6,5)
  Get_subnet_Mask = (7,1)
  Set_subnet_Mask = (8,5)
  Get_Gateway_Address = (9,1)
  Set_Gateway_Address = (10,5)
  Welcome = (16,1)
  Request_Cannot_Served = (17,1)

  def __init__(self, CommandCode, length):
      self.CommandCode = CommandCode
      self.length = length

# Moses is right but you can also do something like that (workaround)
# use @unique to protect duplicates
code = 10
for val in SystemCommands:
  if val.value[0] == code:
    print (val)

# SystemCommands.Set_Gateway_Address
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the docs,</p>
<blockquote>
<p>if your enumeration defines <code>__new__()</code> and/or <code>__init__()</code> then whatever
  value(s) were given to the enum member will be passed into those
  methods.</p>
</blockquote>
<p>So you can't pass an arbitrary value, you'll need to pass a valid enum member value, say (10, 5)</p>
<pre><code>code = 10, 5
Request = SystemCommands(code)
print(Request)
# SystemCommands.Set_Gateway_Address
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thank you Ari, I modified your answer, to be a little more Object Oriented:</p>
<pre><code>class SystemCommands(Enum):
    Get_FW_version = (0, 1)
    Get_MAC_address = (1,1)
    Set_MAC_address = (2,7)
    Get_IP_addr = (3,1)
    Set_IP_addr = (4,5)
    Get_server_IP_addr = (5,1)
    Set_server_IP_addr = (6,5)
    Get_subnet_Mask = (7,1)
    Set_subnet_Mask = (8,5)
    Get_Gateway_Address = (9,1)
    Set_Gateway_Address = (10,5)
    Welcome = (16,1)
    Request_Cannot_Served = (17,1)

    def __init__(self, CommandCode, length):
        self.CommandCode = CommandCode
        self.length = length

    def getCommand(code):
        for val in SystemCommands:
            if code == val.CommandCode:
                return (val)
</code></pre>
<p>So now i can use it like this: </p>
<pre><code>Request = SystemCommands.getCommand(code)
print(Request.name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to pass multiple values to the Enum constructor but only have one of them be the actual value, then you need to write <a href="https://docs.python.org/3/library/enum.html#using-a-custom-new" rel="nofollow noreferrer">your own <code>__new__</code> method</a>:</p>
<pre><code># using enum34 or the stdlib Enum

from enum import Enum

class SystemCommands(Enum):
    Get_FW_version = (0, 1)
    Get_MAC_address = (1,1)
    Set_MAC_address = (2,7)

    def __new__(cls, CommandCode, length):
        member = object.__new__(cls)
        member._value_ = CommandCode
        member.length = length
        return member
</code></pre>
<p>and then</p>
<pre><code>code = ...
request = SystemCommands(code)
print(request)
print(request.name)
print(request.value)
print(request.length)
</code></pre>
<p>The process is considerable easier if can use the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer"><code>aenum</code></a><sup>1</sup> library:</p>
<pre><code>from aenum import Enum

class SystemCommands(Enum):
    _init_ = 'value length'
    Get_FW_version = 0, 1
    Get_MAC_address = 1,1
    Set_MAC_address = 2,7
</code></pre>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a> library.</p>
</div>
<span class="comment-copy">Thank you, but your solutions works only when i know the other value for the enum.</span>
