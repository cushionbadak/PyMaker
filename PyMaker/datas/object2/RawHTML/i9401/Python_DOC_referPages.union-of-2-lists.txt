<div class="post-text" itemprop="text">
<p>I have 2 list's in the following form:</p>
<pre><code>  list1 = [["abc",45,48],["def",13,16]]
  list2 = [["efgh",67,71],["def",13,16]]
</code></pre>
<p>How can I find the union of these 2 lists?</p>
<p>Required output: </p>
<pre><code>  union_list = [["abc",45,48],["def",13,16],["efgh",67,71]]
</code></pre>
<p>If this helps: As you can see, the <code>list[0][1]</code> and <code>list[0][2]</code> are <code>integers</code>, we can typecast it to a <code>string</code> if necessary.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/sets.html" rel="nofollow noreferrer">set.union</a>, i.e, you can  map both lists to list of tuples and then convert them to sets so that you can call the <code>union</code> method:</p>
<pre><code>u_set = set(map(tuple, list1)).union(map(tuple, list2))

# {('abc', 45, 48), ('def', 13, 16), ('efgh', 67, 71)}
</code></pre>
<hr/>
<p>To convert them back to lists:</p>
<pre><code>list(map(list, u_set))
# [['def', 13, 16], ['efgh', 67, 71], ['abc', 45, 48]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a set comprehension. Since list are un-hashable however, <code>tuple()</code>'s must be used instead.</p>
<pre><code>&gt;&gt;&gt; list1 = [["abc",45,48],["def",13,16]]
&gt;&gt;&gt; list2 = [["efgh",67,71],["def",13,16]]
&gt;&gt;&gt; {tuple(sublist) for sublist in list1 + list2}
set([('def', 13, 16), ('efgh', 67, 71), ('abc', 45, 48)])
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use</p>
<pre><code>[list(x) for x in unique_everseen(tuple(y) for y in chain(list1, list2))]
</code></pre>
<p><code>unique_everseen()</code> can be found in the documentation of module <a href="https://docs.python.org/3/library/itertools.html#module-itertools" rel="nofollow noreferrer">itertools</a>. Conversion to tuple is necessary because the list type is not hashable.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/2151517/pythonic-way-to-create-union-of-all-values-contained-in-multiple-lists">Pythonic Way to Create Union of All Values Contained in Multiple Lists</a></span>
<span class="comment-copy"><code>chain()</code> is <i>also</i> found in the <code>itertools</code> library. It is usually a good idea to show the functions you import rather than just using them. Also, a link to the documentation of each function wouldn't hurt.</span>
<span class="comment-copy">@leaf I added a link to itertools documentation. Notice that unique_everseen is not included in itertools, it is documented as a (useful) recipe.</span>
