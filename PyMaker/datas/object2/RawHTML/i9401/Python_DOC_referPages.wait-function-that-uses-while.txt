<div class="post-text" itemprop="text">
<p>I just wrote a function that looked like this:</p>
<pre><code>def block_for(seconds):
    """Wait at least seconds, this function should not be affected by the computer sleeping."""
    end_time = datetime.datetime.now() + datetime.timedelta(seconds)

    while datetime.datetime.now() &lt; end_time:
        pass
</code></pre>
<p>Can anything bad come of this? Should there ideally be something inside the while loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>maybe putting time.sleep(1) in the while loop will require less cycles? Or</p>
<pre><code>def block_for(seconds):
    """Wait at least seconds, this function should not be affected by the computer sleeping."""
    end_time = datetime.datetime.now() + datetime.timedelta(seconds=seconds)

    while datetime.datetime.now() &lt; end_time - datetime.timedelta(seconds=1):
        time.sleep(1)

    while datetime.datetime.now() &lt; end_time:
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/time.html#time.sleep" rel="nofollow noreferrer"><code>time.sleep(seconds)</code></a> seconds does just that without burning through CPU cycles. your loop keeps the CPU fully busy. i do not know for you but i consider this <em>bad</em>.</p>
</div>
<span class="comment-copy">That should be completely fine, and is exactly the sort of case that <code>pass</code> is intended for. The only suggestion I would make here is that, at the top of your code, do <code>from datetime import datetime</code> and <code>from datetime import timedelta</code> and then change <code>datetime.datetime.now</code> to <code>datetime.now</code> and <code>datetime.timedelta</code>, That'll reduce your overhead a little by only importing the bits of <code>datetime</code> that you need <i>and</i> make the code a little more readable. That is, unless you are using some other bit of <code>datetime</code> elsewhere in your code.</span>
<span class="comment-copy">The nice thing about using <code>pass</code> here is that your code is valid for python 2 and 3. The print statement in the Answer elsewhere using the trailing , and the <code>end=</code> syntax is only valid for python 3, and the python 2 syntax for the same effect won't run in python 3.</span>
<span class="comment-copy">The time.sleep(1) replacement answer works well, too, with perhaps a marginal improvement in cycles.</span>
<span class="comment-copy">For me, <code>datetime.timedelta(1)</code> seems to return a delay of a day.</span>
<span class="comment-copy"><code>datetime.timedelta(seconds=1)</code> is what you mean (right?).</span>
<span class="comment-copy">@theonlygusti You may want to use a smaller delay, eg <code>time.sleep(0.2)</code>. And it would be more efficient to compute <code>end_time - datetime.timedelta(seconds=1)</code> outside the <code>while</code> loop, but I guess that's not a big deal.</span>
<span class="comment-copy">@PM2Ring I have already done that, my solution looks like <code>end_time = datetime.datetime.now() + datetime.timedelta(seconds=seconds)      while datetime.datetime.now() &lt; end_time:         time.sleep(1)</code></span>
<span class="comment-copy">What is the point of the two <code>while</code> loops in this answer? The second one exits almost immediately after the first one exits. The second one seems completely redundant aside from <i>maybe</i> using a few <i>more</i> cycles?</span>
<span class="comment-copy">Maybe, but time.sleep gets interrupted by the computer sleeping, my loop would not.</span>
<span class="comment-copy">I am looking for a solution to <a href="http://stackoverflow.com/q/41411001/3310334">stackoverflow.com/q/41411001/3310334</a>, and my question poses one, and I want to know if it is safe</span>
<span class="comment-copy">I already know time.sleep cannot work for me</span>
<span class="comment-copy">you  could still <code>sleep</code> inside your loop for say 1 sec; that would still be better - the loop would only run once every second.</span>
<span class="comment-copy">@theonlygusti I don't understand the issue with this proposed solution. You only substitute <code>pass</code> with <code>sleep</code> for a very short period of time. The idea is just that you don't have the CPU running through the <code>while</code> loop as fast as it can possibly go. The delay doesn't have to be significant.</span>
