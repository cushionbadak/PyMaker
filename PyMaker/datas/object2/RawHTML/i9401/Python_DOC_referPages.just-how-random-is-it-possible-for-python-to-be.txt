<div class="post-text" itemprop="text">
<p>If you start with a list of hundreds or perhaps thousands of separate items, and you want Python to choose one (at a time) at random (for creating a ciphertext), how "random" will it really be? It's highly important that there be no repeats of the same item (integers, strings) whatsoever, because of the crypt0graphic nature of the app. But is there some way to confidently perform random selection from dictionaries?</p>
<p>Thanks for the suggestions of such, but this question is not a duplicate of the two possibilities listed. For one thing, the range of items up for selection needs to be entirely dynamic, yet for brevity's sake, I've limited the description of the mechanics of the app, which is intended for educational/entertainment purposes and not for saving the world ;-)</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/2/library/random.html" rel="noreferrer">random</a> module docs:</p>
<blockquote>
<p><strong>Warning:</strong> The pseudo-random generators of this module should not be used for security purposes. Use <code>os.urandom()</code> or <code>SystemRandom</code> if you require a cryptographically secure pseudo-random number generator.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Python 3.6 you can use:</p>
<pre><code>from secrets import choice

choice(your_options)
</code></pre>
<p>According to the <a href="https://docs.python.org/3/library/secrets.html#module-secrets" rel="nofollow noreferrer">module documentation</a>:</p>
<blockquote>
<p>The <code>secrets</code> module is used for generating cryptographically strong random numbers suitable for managing data such as passwords, account authentication, security tokens, and related secrets.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>First off, what you're talking about is how random a human perceives a generator to be; not how random something is. There's a good post on <a href="https://labs.spotify.com/2014/02/28/how-to-shuffle-songs/" rel="nofollow noreferrer">how Spotify shuffles music</a> to seem more random to humans, while actually reducing entropy. (or at least how they used to do it). </p>
<p>Not ever using the same number/string twice in the same message is a worse security flaw than the one used to crack the Enigma during WW2.</p>
<p>Second, by "how random", you probably mean "how much entropy". </p>
<p>Third, the <code>random</code> module in Python is not cryptographically secure, as others have pointed out. Don't use it for cryptography-related code. There's <code>os.urandom()</code>, <code>SystemRandom</code> or <code>secrets</code>, but you should probably not use any of them, because:</p>
<p>Fourth, and most important, you should <strong>never roll your own crypto</strong> unless you have a degree in cryptography. Check what the state of the art is, and use that instead. <a href="https://crypto.stackexchange.com/">Crypto SE</a> knows their stuff, and so does <a href="https://security.stackexchange.com/">Security SE</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>One of the big additions in the recently released Python 3.6 is the addition of a <a href="https://docs.python.org/3/library/secrets.html#module-secrets" rel="nofollow noreferrer"><code>secrets</code></a> module for generating cryptographically strong random numbers.</p>
</div>
<span class="comment-copy">If you do <code>random.shuffle(container)[:n]</code> where <code>n</code> is the number of results you want, that could work.  Just doing choice repeatedly could potentially lead to repeats</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/q/9690009/953482">Pick N items at random from sequence of unknown length</a>. Short answer: Shuffle once, then pop N times.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/363681/generating-random-integers-in-a-specific-range">Generating random integers in a specific range</a></span>
<span class="comment-copy">If you're intending it for educational purposes, that's even more critical than production quality. Teaching people to do the wrong thing is much worse than doing the wrong thing yourself.</span>
<span class="comment-copy">That will give you one random item from <code>your_options</code>, not multiple items with no repeats. Of course, avoiding repeats <i>may</i> be a bad idea, it depends exactly on what the OP is doing. In some crypto apllications you do <i>not</i> want repeats, eg in the shuffle-like process used in <a href="https://en.wikipedia.org/wiki/Format-preserving_encryption" rel="nofollow noreferrer">format-preserving encryption</a></span>
<span class="comment-copy">@PM2Ring Good point, it's unfortunate that <code>secrets</code> doesn't have a <code>sample</code> function then. But it could be implemented by using some sort of unique_everseen (<a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">1</a> <a href="http://iteration-utilities.readthedocs.io/en/latest/api/cfuncs.html#iteration_utilities.unique_everseen" rel="nofollow noreferrer">2</a>) functionality within a <code>while</code> loop.</span>
<span class="comment-copy">I think your 3rd point needs a little clarification. It's certainly not safe to use the default Mersenne Twister (or the old Wichmann-Hill generator which was used in early Python but has been removed in Python 3) for crypto, but you can safely use <code>random</code> functions for crypto if you specify the <code>SystemRandom</code> generator. But of course your 4th point trumps that. :)</span>
<span class="comment-copy">@PM2Ring good point. I have some feeling that libraries/modules providing random functionality that are not secure by default might not consider security all the way through, like not using constant-time comparisons. A library/module/package/... that only supports cryptographically secure random is (hopefully) secure all the way through. For example, Go has <code>crypto/rand</code> and <code>rand</code> as two separate packages, and Python has <code>secrets</code> and <code>random</code> now.</span>
<span class="comment-copy">Good point! The functions in <code>random</code> are certainly <b>not</b> designed to resist timing attacks, but that <i>might</i> not be an issue for the OP's application.</span>
