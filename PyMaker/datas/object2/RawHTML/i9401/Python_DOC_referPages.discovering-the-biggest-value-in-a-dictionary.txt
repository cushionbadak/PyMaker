<div class="post-text" itemprop="text">
<p>I'm trying to figure out the biggest value within a dictionary, and I'm having some trouble with this.
Here's my code:</p>
<pre><code>def most_fans(dictionary):
    empty = ''
    for key in dictionary:
        if len(dictionary[key]) &gt; next(dictionary[key]):
            empty = key
    print(empty)
</code></pre>
<p>I realize the problem with my code, since if I have a dictionary such as this:</p>
<pre><code>fans={'benfica': ['joao','ana','carla'],
      'sporting': ['hugo','patricia'],
      'porto': ['jose']}
</code></pre>
<p>The output will be both <code>'benfica'</code> and <code>'sporting'</code>.Because benfica is bigger then sporting but sporting is also bigger then porto. And yet this the best I  came up with.</p>
<p>Can someone show me a decent way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just use <code>max()</code> with a key:</p>
<pre><code>&gt;&gt;&gt; max(fans, key=lambda team:len(fans[team]))
'benfica'
</code></pre>
<p>Here:</p>
<ul>
<li><code>max(fans, ...)</code> iterates over the keys of <code>fans</code> (that is, team names) looking for the largest element according to some criterion;</li>
<li>the lambda function specifies that criterion (in this example, the number of fans the team has).</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If you have two teams with same number of fans:</p>
<pre><code>fans = {'benfica':['joao','ana','carla'],
        'sporting':['hugo','patricia', 'max'],
        'porto':['jose']}
</code></pre>
<p>The <code>max()</code>approach gives you only one of them:</p>
<pre><code>&gt;&gt;&gt; max(fans, key=lambda team:len(fans[team]))
'benfica'
</code></pre>
<p>Using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>, you can get the most common ones:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; counts = Counter({k: len(v) for k, v in fans.items()})
&gt;&gt;&gt; counts.most_common(2)
[('benfica', 3), ('sporting', 3)]
</code></pre>
<p>or all:</p>
<pre><code>&gt;&gt;&gt; counts.most_common()
[('benfica', 3), ('sporting', 3), ('porto', 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; max_val = lambda xs: max(xs.iteritems(), key=lambda x: len(x[1]))
&gt;&gt;&gt; max_val(fans)
('benfica', ['joao', 'ana', 'carla'])
</code></pre>
</div>
<span class="comment-copy">Have you tried <code>max()</code>?</span>
<span class="comment-copy">By "biggest value" do you mean "longest string value" or "longest list" or something else? And in your example data, shouldn't the result be 'benfica' since its list has length 3?</span>
<span class="comment-copy">I have and it still game me the same result, i didn't get why so I tried something different...</span>
<span class="comment-copy">i believe <code>counts.most_common(len(counts)) == counts.most_common()</code></span>
<span class="comment-copy">You are right. Fixed. Thanks.</span>
