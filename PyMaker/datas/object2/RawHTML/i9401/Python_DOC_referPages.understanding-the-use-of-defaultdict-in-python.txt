<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5900578/how-does-collections-defaultdict-work">How does collections.defaultdict work?</a>
<span class="question-originals-answer-count">
                    14 answers
                </span>
</li>
</ul>
</div>
<p>I am starting to learn Python and have run across a piece of code that I'm hoping one of you can help me understand.</p>
<pre><code>from collections import defaultdict
dd_dict = defaultdict(dict)
dd_dict["Joel"]["City"] = "Seattle"
</code></pre>
<p>result: </p>
<pre><code>{ "Joel" : { "City" : Seattle"}}
</code></pre>
<p>The part I am having a problem with is the third line. Could someone please explain to me what is happening here?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">documentation of <code>defaultdict</code></a>:</p>
<blockquote>
<p>If default_factory is not None, it is called without arguments to provide a default value for the given key, this value is inserted in the dictionary for the key, and returned.</p>
</blockquote>
<p>Since <code>"Joel"</code> doesn't exist as key yet the <code>dd_dict["Joel"]</code> part creates an empty dictionary as value for the key <code>"Joel"</code>. The following part <code>["City"] = "Seattle"</code> is just like adding a normal key-value pair a dictionary - in this case the <code>dd_dict["Joel"]</code> dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>The third line inserts a dictionary inside a dictionary. By using dict as a default value in default dict you are telling python to initialize every new dd_dict value with an empty dict. The above code is equivalent to</p>
<pre><code>dd_dict["Joel"] = {}
dd_dict['Joel"]["City"] = "Seattle"
</code></pre>
<p>If you didn't use default dict the second line would have raised a key error. So default dicts are a way of avoiding such errors by initializing the default value of your data structure.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>The first argument provides the initial value for the default_factory
  attribute; it defaults to None.  If default_factory is not None, it is
  called without arguments to provide a default value for the given key,
  this value is inserted in the dictionary for the key, and returned.</p>
</blockquote>
<pre><code>dd_dict = defaultdict(dict)
dd_dict["Joel"]["City"] = "Seattle"
</code></pre>
<p>in you case, when you call <code>dd_dict["Joel"]</code>, there is no such key in the <code>dd_dict</code>, this raises a <code>KeyError</code> exception. <code>defaultdict</code>  has <code>__missing__(key)</code> protocol to handle this error, when it can not find the key, it will call the <code>default_factory</code> without arguments to provide a default value for the given key.</p>
<p>so when you call <code>dd_dict["Joel"]</code>, this will give you a dict <code>{}</code>, then you add item <code>["City"] = "Seattle"</code> to the empty dict, someting like:</p>
<pre><code>{}["City"] = "Seattle"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When a key is accessed and is missing, the <code>__missing__</code> method is accessed.</p>
<p>For a regular <code>dict</code>, a <code>KeyError</code> is raised</p>
<p>For a <code>defaultdict</code>, the object you passed as a parameter is created and accessed.</p>
<p>If you made a <code>defaultdict(list)</code>, and tried to access a missing key, you would get a list back.</p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; d['missing']
[]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you access a key of a defaultdict that does not exits, you will get what the function you supply returns.</p>
<p>In your case you supplied <code>dict</code>, therefore you get a new empty dictionary:</p>
<pre><code>&gt;&gt;&gt; dict()
{}

&gt;&gt;&gt; from collections import defaultdict
... dd_dict = defaultdict(dict)
...
&gt;&gt;&gt; dd_dict['Joel']
{}
</code></pre>
<p>Now you add your key-value pair to this dictionary:</p>
<pre><code>&gt;&gt;&gt; dd_dict["Joel"]["City"] = "Seattle"
"Joel" : { "City" : Seattle"}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>defaultdict(dict) returns a dictionary object that will return an empty dictionary value if you index into it with a key that doesn't yet exist:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; dd_dict = defaultdict(dict)
&gt;&gt;&gt; dd_dict
defaultdict(&lt;class 'dict'&gt;, {})
&gt;&gt;&gt; dd_dict["Joel"]
{}
&gt;&gt;&gt; dd_dict["anything"]
{}
&gt;&gt;&gt; dd_dict[99]
{}
</code></pre>
<p>So the third line creates a key-value pair ("Joel", {}) in dd_dict, then sets the ("City", "Seattle") key-value pair on the empty dictionary.</p>
<p>It's equivalent to:</p>
<pre><code>&gt;&gt;&gt; dd_dict = defaultdict(dict)
&gt;&gt;&gt; dd_dict["Joel"] = {}
&gt;&gt;&gt; dd_dict
defaultdict(&lt;class 'dict'&gt;, {'Joel': {}})
&gt;&gt;&gt; dd_dict["Joel"]["City"] = "Seattle"
&gt;&gt;&gt; dd_dict
defaultdict(&lt;class 'dict'&gt;, {'Joel': {'City': 'Seattle'}})
</code></pre>
</div>
<span class="comment-copy">A <code>defaultdict</code> is a <code>dict</code> whose keys "default" to values if a key has not been set yet. You basically have a dictionary of a dictionary (third line).</span>
