<div class="post-text" itemprop="text">
<p>I'm new to Python, I learned through googling and reading a book ... I learned the basics (I understand them) I also learned how to deal with files (But, I'm more likely to memorize the syntax than understand it) for example:
To loop through files with the function <code>.walk()</code>, we use three variables to loop , and I still don't get it:</p>
<pre><code>for root, dirs, files in os.walk('*dir*', topdown=True):
    for name in files:
        filePath=(os.path.join(root, name))
        print(filePath)
    for name in dirs:
        filePath2=(os.path.join(root, name))
        print(filePath2)
</code></pre>
<p>I don't really get the above code!
Why did we use as many variables?, and why did we use two loops?, and why did we use <code>os.path.join</code> twice?</p>
</div>
<div class="post-text" itemprop="text">
<p>The variables returned in the outer loop are lists containing directories and files in the "current" directory. These lists are iterated over as the directory tree is parsed so you can see the individual files and sub-directories. The os.path.join function constructs the path for each file and to each sub-directory for viewing.</p>
<p>One thing to keep in mind is that the walk function recursively walks the entire directory tree. This simplifies things a bit but may be confusing to someone who doesn't understand how this function works because the recursive calls are hidden inside the walk function.</p>
</div>
<span class="comment-copy">i suggest you <code>print(root, dirs, files)</code> and find out what happens. maybe also read the doc for <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk</code></a>.</span>
<span class="comment-copy"><code>walk</code> gives us tuples as it walks the filesystem  <code>root</code> is the directory we are in at the moment, <code>dirs</code> is a list of the directories in <code>root</code> and <code>files</code> is a list of the files in <code>root</code>  All the code here is doing is going through both <code>dirs</code> and <code>files</code> and printing out the full paths to those files and directories.</span>
<span class="comment-copy">1) Because they are needed for that code to run, 2) One is over <code>files</code> the other over <code>dirs</code>. 3) <code>os.path.join</code> was used twice with different parameters (the <code>name</code> changes in every iteration of the <code>for</code>).</span>
