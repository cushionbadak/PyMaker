<div class="post-text" itemprop="text">
<p>I get the following error:</p>
<pre><code>Warning (from warnings module):
File "C:\Python34\projectEuler\projectEuler.py", line 316
global primeSet, primeList, primeCap, primeRan
SyntaxWarning: name 'primeRan' is used prior to global declaration
</code></pre>
<p>For the code:</p>
<pre><code>primeSet = {2, 3}
primeList = [2, 3]
primeCap = 3
primeRan = False
def primeGen():
  if primeRan:
    primeList, primeCap = primeList, PrimeCap
    global primeSet
  else:
    global primeSet, primeList, primeCap, primeRan
    primeRan = True
  for i in primeList:
    yield i
  while(True):
    primeCap += 2
    m = int(primeCap**.5)
    yesPrime = True
    for p in primeList:
        if p &gt; m: break
        if primeCap%p == 0:
            yesPrime = False
            break
    if yesPrime:
        primeSet.add(primeCap)
        primeList.append(primeCap)
        yield primeCap
</code></pre>
<p>The variable is not written until it is assigned. And the code seems to work.
Is the syntax message a false alarm, or should a global be declared before being read? (instead of only declaring before being written)</p>
<p>The code:</p>
<pre><code>def primeGen():
    global primeRan  
    if primeRan:
        primeList, primeMax = primeList, PrimeCap
        global primeSet
    else:
        global primeSet, primeList, primeCap
        primeRan = True
</code></pre>
<p>Gets rid of the <code>SyntaxWarning</code>. But it seems wrong to make the global deceleration for a value that is only being read and not written.</p>
<p>Should I ignore the syntax alarm?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, you can't ignore it and, as of Python <code>3.6</code> this <a href="https://docs.python.org/3/whatsnew/3.6.html#other-language-changes" rel="nofollow noreferrer">will cease to be a <code>SyntaxWarning</code> and instead be updated to an error (<code>SyntaxError</code>)</a>. So you better fix it now or face it the prospect of it not executing in future versions (<code>&gt;= 3.6</code>) . </p>
<p>See the docs on the <a href="https://docs.python.org/3/reference/simple_stmts.html#the-global-statement" rel="nofollow noreferrer"><code>global</code> statement</a>:</p>
<blockquote>
<p>Names listed in a <code>global</code> statement must not be used in the same code block textually preceding that global statement.</p>
</blockquote>
<p>As you noticed, this isn't a warning that is generated at run-time, it is generated when Python compiles your function object and notices a <code>global</code> statement containing a name (<code>primeRan</code>) that has already been found as local.</p>
<p>You should add the <code>global</code> statement before referencing <code>primeRan</code> here <em>and also do the same</em> for <code>primeList</code> which falls victim to the same issue. </p>
<p>For <code>primeList</code>, though, you can be sneaky and take advantage of the fact that <code>global</code> <em>must</em> be parsed first. In short, switch the condition over so Python parses the <code>global</code> statement for it <em>before</em> the assignment statement:</p>
<pre><code> def primeGen():
     global primeRan
     if not primeRan:
         global primeSet, primeList, primeCap
         primeRan = True
     else:
         primeList, primeMax = primeList, PrimeCap
     # rest as is
</code></pre>
<p>Since <code>global</code> is a directive for the parser, this yields the same behavior w/o the warning.</p>
<p>Of course, using <code>globals</code> is not a good practice. I can't see any reason why you'd require using them to be honest, you're always better off (and from a conceptual point of view and execution speed wise) to drop the usage of <code>globals</code> and instead communicate with your function using arguments and return values.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/14081308/why-is-the-global-keyword-not-required-in-this-case">Why is the global keyword not required in this case?</a></span>
<span class="comment-copy">since your variable is immutable, you need to add <code>global</code>, else python would create another local reference if assigned, and logically, looks for a local reference when accessing it.</span>
<span class="comment-copy">@Jean-FrançoisFabre My question wasn't about weather or not the global deceleration was necessary. Though I'm glad you brought my attention to it because it was informative. The example that I offered is a convoluted piece of code that I have since improved (relative to computation time) through simplifications that included removing external references. My question was about the warning itself. And the answer was more relevant than I thought. I did not know that a future release would stop executing the code. I found Jim's answer enlightening. And others may as well.</span>
<span class="comment-copy">@Jean-FrançoisFabre, as a side note, the external list would be altered weather or not they were declared as global, the program failed to function as intended (to limit external writes to the first instance of the generator). That's the enlightenment that I received from the other post which answered a different question.</span>
<span class="comment-copy">I tried it on Python 3.6 and it is as you said. And your idea of changing the order of the if statements worked.</span>
