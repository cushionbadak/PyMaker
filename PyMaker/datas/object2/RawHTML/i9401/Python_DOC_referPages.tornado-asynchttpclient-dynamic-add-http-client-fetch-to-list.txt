<div class="post-text" itemprop="text">
<p>here is the code </p>
<pre><code>class GetdataHandler(tornado.web.RequestHandler):
    @tornado.web.asynchronous
    @tornado.gen.engine
    def get(self):
        http_client = tornado.httpclient.AsyncHTTPClient()
        response1, response2, response3, response4, response5, response6, response7, response8, response9, response10 = yield [
        http_client.fetch('http://u.com/order/fa-huo?id=85223'),
        http_client.fetch('http://u.com/order/fa-huo?id=85224'),
        http_client.fetch('http://u.com/order/fa-huo?id=85225'),
        http_client.fetch('http://u.com/order/fa-huo?id=85226'),
        http_client.fetch('http://u.com/order/fa-huo?id=85227'),
        http_client.fetch('http://u.com/order/fa-huo?id=85228'),
        http_client.fetch('http://u.com/order/fa-huo?id=85229'),
        http_client.fetch('http://u.com/order/fa-huo?id=85230'),
        http_client.fetch('http://u.com/order/fa-huo?id=85231'),
        http_client.fetch('http://u.com/order/fa-huo?id=85232')]
        self.write('getData: %s  getData: %s  getData: %s  getData: %s  getData: %s  getData: %s  getData: %s  getData: %s  getData: %s  getData: %s'%(response1.body,response2.body,response3.body,response4.body,response5.body,response6.body,response7.body,response8.body,response9.body,response10.body))

        self.finish()
</code></pre>
<p>this's a stupid way.
I'll get ids from mysql.I don't know how many ids I need to request.
I don't know how to do it with a (for).
Would appreciate any advice.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using simple `for, additional list will be needed</p>
<pre><code>ids = [111,222,333,444]
futures = []
for iid in ids:
    futures.append(http_client.fetch(url + iid)
responses = yield futures

# prepare output to user
bodies = []
for r in responses:
    bodies.append(r.body)

# join list of response bodies 
output = ' '.join(bodies) 
self.write(output)
</code></pre>
<p>Or you can use <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a></p>
<pre><code>class GetdataHandler(tornado.web.RequestHandler):
    @tornado.web.asynchronous
    @tornado.gen.engine
    def get(self):
        http_client = tornado.httpclient.AsyncHTTPClient()
        url = 'http://u.com/order/fa-huo?id={}'

        ids = [111,222,333,444]  
        # from GET/POST params 
        # ids = self.get_arguments('ids')

        responses = yield [
            http_client.fetch(url.format(iid)) for iid in ids
        ]

        output = ' '.join(
            ['getData: {}'.format(r.body) for r in responses]
        )
        self.write(output)   
        self.finish()
</code></pre>
<p>But note that there is missing error handling. For example - if one of the <code>fetch</code> raises exception you won't get any results, you should wrap in some function with error handling (maybe use of <a href="http://www.tornadoweb.org/en/stable/httpclient.html#tornado.httpclient.HTTPClient.fetch" rel="nofollow noreferrer"><code>raise_exception</code> argument in <code>fetch</code></a>).</p>
<p>More information:</p>
<ul>
<li><p><a href="https://stackoverflow.com/questions/20639180/python-list-comprehension-explained">python list comprehension explained</a></p></li>
<li><p><a href="https://emptysqua.re/blog/multiple-asynchronous-events-tornado/" rel="nofollow noreferrer">https://emptysqua.re/blog/multiple-asynchronous-events-tornado/</a></p></li>
</ul>
</div>
