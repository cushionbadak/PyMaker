<div class="post-text" itemprop="text">
<p>I have this json file: </p>
<pre><code>{ "data":  [    { "{#PROC}": "/usr/local/test", "{#PROC_IDENT}": "test1", "{#PROC_ARGS}": "-l -c -g -k /etc/test1.conf", "{#PROC_PORT_1111}": "1111", "{#PROC_CONF}": "/etc/test1.conf" },    { "{#PROC}": "/usr/local/test", "{#PROC_IDENT}": "test2", "{#PROC_ARGS}": "-l -c -g -k /etc/test2.conf", "{#PROC_PORT_2222}": "2222", "{#PROC_PORT_3333}": "3333", "{#PROC_CONF}": "/etc/test2.conf" },    { "{#PROC}": "/usr/local/test", "{#PROC_IDENT}": "test3", "{#PROC_ARGS}": "-l -c -g -k /etc/test3.conf", "{#PROC_PORT_4444}": "4444", "{#PROC_CONF}": "/etc/test3.conf" }  ]}
</code></pre>
<p>This file is being read by this python script:</p>
<pre><code>import json
import re
import sys
import unittest
import StringIO

def TestPorts(discoveryJson, spJson):
    jsn = json.load(discoveryJson)
    for dt in jsn['data']:
        try:
            id = dt['{#PROC_IDENT}']
            port = dt['{#PROC_PORT_1111}']
            spJson['data'].append({'{ID}': id, '{#PORT_1111}': port})
        except Exception as err:
            pass

def printTestPort(discFilespec, dumpDest=sys.stdout):
    portJson = {'data': []}
    try:
        with open(discFilespec) as discJson:
            TestPorts(discJson, portJson)
    except:
        pass
    json.dump(portJson, dumpDest)

if __name__ == '__main__':
    printTestPort('/tmp/file.json')
</code></pre>
<p>At the moment I can only print only one port value and id value in output: </p>
<pre><code>{
    "data": [
        {
            "{#ID}": "test1",
            "{#PORT_1111}": "1111"
        }
    ]
}
</code></pre>
<p>How can I get the next output? : </p>
<pre><code>{
        "data": [
            {
                "{#ID}": "test1",
                "{#PORT_1111}": "1111"
            },
            {
                "{#ID}": "test2",
                "{#PORT_2222}": "2222",
                "{#PORT_3333}": "3333"
            },
            {
                "{#ID}": "test3",
                "{#PORT_4444}": "4444"
            }
        ]
    }
</code></pre>
<p>Could you please help to achieve it?</p>
<hr/>
<p>Let me clarify one more time.</p>
<p>This json file may be changeable towards port values:</p>
<pre><code>{ "data":  [    { "{#PROC}": "/usr/local/test", "{#PROC_IDENT}": "test1", "{#PROC_ARGS}": "-l -c -g -k /etc/test1.conf", "{#PROC_PORT_1111}": "1111", "{#PROC_CONF}": "/etc/test1.conf" },    { "{#PROC}": "/usr/local/test", "{#PROC_IDENT}": "test2", "{#PROC_ARGS}": "-l -c -g -k /etc/test2.conf", "{#PROC_PORT_2222}": "2222", "{#PROC_PORT_3333}": "3333", "{#PROC_CONF}": "/etc/test2.conf" },    { "{#PROC}": "/usr/local/test", "{#PROC_IDENT}": "test3", "{#PROC_ARGS}": "-l -c -g -k /etc/test3.conf", "{#PROC_PORT_4444}": "4444", "{#PROC_CONF}": "/etc/test3.conf" }  ]}
</code></pre>
<p>So each of process instances there may have different amount of ports with different values. For example test1 may have 1237 7000 and 1234 port values test2 only 9004 and so on.</p>
<p>In my python code I was able to achieve only reading one of port values, but I don't know how to achieve in order it print all port values per process id.</p>
<p>For example:</p>
<pre><code>{
        "data": [
            {
                "{#ID}": "test1",
                "{#PORT_1205}": "1205"
            },
            {
                "{#ID}": "test2",
                "{#PORT_442}": "442",
                "{#PORT_2004}": "2004"
            },
            {
                "{#ID}": "test3",
                "{#PORT_4444}": "9001"
            }
        ]
    }
</code></pre>
<p>So PORT values will automatically change in case of modifications of json file. Hope this time I explained more clearly.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your original code threw a KeyError when the key <code>'{#PROC_PORT_1111}'</code> wasn't present so you couldn't <em>capture</em> other ports.  Here is one way to do it - iterate over the items; check to see if you are interested in the item; massage it; keep it in a new container.</p>
<pre><code>#setup
import json, io
from pprint import pprint
s = """{ "data":  [    { "{#PROC}": "/usr/local/test", "{#PROC_IDENT}": "test1", "{#PROC_ARGS}": "-l -c -g -k /etc/test1.conf", "{#PROC_PORT_1111}": "1111", "{#PROC_CONF}": "/etc/test1.conf" },    { "{#PROC}": "/usr/local/test", "{#PROC_IDENT}": "test2", "{#PROC_ARGS}": "-l -c -g -k /etc/test2.conf", "{#PROC_PORT_2222}": "2222", "{#PROC_PORT_3333}": "3333", "{#PROC_CONF}": "/etc/test2.conf" },    { "{#PROC}": "/usr/local/test", "{#PROC_IDENT}": "test3", "{#PROC_ARGS}": "-l -c -g -k /etc/test3.conf", "{#PROC_PORT_4444}": "4444", "{#PROC_CONF}": "/etc/test3.conf" }  ]}"""
f = io.StringIO(s)

j = json.load(f)
new_j = {'data' : []}
for d in j['data']:
    new_d = {}
    new_d['{#ID}'] = d['{#PROC_IDENT}']
    for k, v in d.items():
        if k.startswith('{#PROC_PORT'):
            k = k.replace('PROC_', '')
            new_d[k] = v
    new_j['data'].append(new_d)


&gt;&gt;&gt; pprint(new_j)

{'data': [{'{#ID}': 'test1', '{#PORT_1111}': '1111'},
          {'{#ID}': 'test2', '{#PORT_2222}': '2222', '{#PORT_3333}': '3333'},
          {'{#ID}': 'test3', '{#PORT_4444}': '4444'}]}
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>Using the regular expressions.  I'm using the <a href="https://pypi.python.org/pypi/regex" rel="nofollow noreferrer">regex module</a> because it saves repeat captures which is needed for <em>processes</em> with multiple ports</p>
<pre><code>import json
import regex
from pprint import pprint

pattern = r'{.*?(?P&lt;id&gt;"{#PROC_IDENT}"[^,]+).*?((?P&lt;ports&gt;"{#PROC_PORT_\d+}"[^,]+),\s?)+'
r = regex.compile(pattern)
# formatting string
new_json = """{{ "data": [{}  ]}}"""
items = []

s = """{ "data":  [    { "{#PROC}": "/usr/local/test", "{#PROC_IDENT}": "test1", "{#PROC_ARGS}": "-l -c -g -k /etc/test1.conf", "{#PROC_PORT_1111}": "1111", "{#PROC_CONF}": "/etc/test1.conf" },    { "{#PROC}": "/usr/local/test", "{#PROC_IDENT}": "test2", "{#PROC_ARGS}": "-l -c -g -k /etc/test2.conf", "{#PROC_PORT_2222}": "2222", "{#PROC_PORT_3333}": "3333", "{#PROC_CONF}": "/etc/test2.conf" },    { "{#PROC}": "/usr/local/test", "{#PROC_IDENT}": "test3", "{#PROC_ARGS}": "-l -c -g -k /etc/test3.conf", "{#PROC_PORT_4444}": "4444", "{#PROC_CONF}": "/etc/test3.conf" }  ]}"""
f = io.StringIO(s)
data = f.read()

#with open('s.txt') as f:
#    data = f.read()

for m in r.finditer(data):
    d = m.capturesdict()
    d['id'][0] = d['id'][0].replace('PROC_IDENT', 'ID')
    d['ports'] = [port.replace('PROC_', '') for port in d['ports']]
    s = ','.join(thing for v in d.values() for thing in v)
    items.append('{{{}}}'.format(s))

new_json = new_json.format(',    '.join(items))
j = json.loads(new_json)


&gt;&gt;&gt; pprint(j)
{'data': [{'{#ID}': 'test1', '{#PORT_1111}': '1111'},
          {'{#ID}': 'test2', '{#PORT_2222}': '2222', '{#PORT_3333}': '3333'},
          {'{#ID}': 'test3', '{#PORT_4444}': '4444'}]}
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to update the <code>{#PROC_PORT_1111}</code> key in your loop so that it gets the next port (<code>2222</code>, <code>3333</code>, <code>4444</code>, etc.) on every iteration. I have added a <code>incr</code> variable to keep track of that. Also edit your function to use <code>get</code> whenever you are accessing the dictionary:</p>
<pre><code>def TestPorts(discoveryJson, spJson):
    jsn = json.load(discoveryJson)
    incr = 1111;
    for dt in jsn.get('data'):
        try:
            id = dt.get('{#PROC_IDENT}')
            port = dt.get('{#PROC_PORT_' + str(incr) + '}')
            spJson.get('data').append({'{ID}': id, '{#PORT_' + str(incr) + '}': port})
            incr += incr;
        except Exception as err:
            pass
</code></pre>
<p>If you put a <code>print</code> statement in the <code>except</code> branch, you'll notice that your execution will hit that branch twice due to a <code>KeyError</code>. It's usually a better practice to use <code>get</code> rather than <code>[]</code> since the former never throws a <code>KeyError</code> whereas the latter does.</p>
<p>Resource: <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer">dict.get</a></p>
</div>
<div class="post-text" itemprop="text">
<p>To the best of my knowledge, I understood that your field <code>"{#PROC_PORT_2222}"</code> changes with numbers, i.e. <code>"{#PROC_PORT_XXXX}"</code> so in this case we need to use regex to match any string which has <code>"{#PROC_PORT_}"</code> <strong>as fixed string</strong>.</p>
<pre><code>import re
import json

with open('s.txt') as data_file:
    data = json.load(data_file)

k = data['data']
regex = r"{#PROC_PORT_[0-9]{4}}"

test_str = str(k)
lst=[]
matches = re.finditer(regex, test_str)
for matchNum, match in enumerate(matches):
    matchNum = matchNum + 1
    lst.append("{match}".format(match=match.group()))


for b in k:
    for a in lst:
        try:
            print b[str(a)]
        except:
            pass
</code></pre>
<p>Where <code>s.txt</code> is the txt file having json.</p>
<p>This gives the output.</p>
<pre><code>1111
3333
2222
4444
</code></pre>
<p><strong>P.S. If you meant the key name is just PORT not PROC_PORT</strong>, then replace the line </p>
<pre><code>regex = r"{#PROC_PORT_[0-9]{4}}"
</code></pre>
<p>by
 <code>regex = r"{#PORT_[0-9]{4}}"</code></p>
<p><strong>P.P.S I assumed that the numbers which will be changing will be 4 digit, if not, then please comment below</strong></p>
</div>
<span class="comment-copy">If a process has multiple ports, will they always <i>show up</i> sequentially in the json data?</span>
<span class="comment-copy">@user54, checkout my answer as it clearly satisfies your criteria</span>
<span class="comment-copy">I get null values everywhere :(  '{#PROC_PORT_1111}' was just a trial to print port 1111. But I need somehow in order script automatically determine '{#PROC_PORT_PORT_NUMBER_HERE}' eg if We have 2025 port and 1701 for proc test1 - it will "{#ID}": "test1", "{#PORT_2025}": "2025", "{#PORT_1701}": "1701". And so on for the rest of pocess_ids like it shown in the last output of my request. Ports may be absolutely different and their amount may be different as well.</span>
<span class="comment-copy">@user54 - I did not understand your comment.  I've edited the answer - see if that is what you were after.    Does your example json data truly represent the actual data? - If not, please provide a small portion of the Actual json data in your question.</span>
<span class="comment-copy">@user54 which version of Python are you using?</span>
<span class="comment-copy">@user54 - see edit</span>
<span class="comment-copy">Sorry, but it doesn't work. It prints me null values for #PROC_PORT and I need not only PROC_PORT_1111. I need also other ports as it shown in the last json output.</span>
<span class="comment-copy">I have edited my answer to provide the correct solution. The problem was that you were always getting the value for #PROC_PORT_1111 on every iteration of the loop rather than incrementing it to 2222, 3333, etc.</span>
<span class="comment-copy">Thanks for efforts, but unfortunately it doesn't make sense as long as port values may be different. Eg: 89, 2001 etc. And thus in case of such changes - code will not dynamic as long as everytime it will be needed to be corrected.</span>
<span class="comment-copy">If you do not know the port values prior to appending to spJson, you can read the file once before, to get all the different port values and populate them in a list. Then, you can parse the json, and for every port value in that list, get its value, and append to spJson.</span>
<span class="comment-copy">Will your solution <i>construct</i> the OP's desired result?</span>
<span class="comment-copy">yes it will, try it yourself :-)</span>
<span class="comment-copy">@wwii who is OP ?</span>
<span class="comment-copy">Original Poster</span>
