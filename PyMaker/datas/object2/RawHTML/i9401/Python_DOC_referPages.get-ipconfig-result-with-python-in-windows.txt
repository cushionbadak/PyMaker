<div class="post-text" itemprop="text">
<p>I am new here and just learning python. I need help to get the right mac-address of my network card in windows using python. I tried to search, and found these :</p>
<ol>
<li><p><a href="https://stackoverflow.com/questions/28927958/python-get-mac-address">Python - Get mac address</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/159137/getting-mac-address">Getting MAC Address</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/16175192/command-output-parsing-in-python">Command output parsing in Python</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/15184495/parsing-windows-ipconfig-all-output">Parsing windows 'ipconfig /all' output</a></p></li>
</ol>
<p>If I run "ipconfig /all" from command prompt, I get this :</p>
<pre><code>Windows-IP-Konfiguration
Hostname  . . . . . . . . . . . . : DESKTOP-CIRBA63
Primäres DNS-Suffix . . . . . . . :
Knotentyp . . . . . . . . . . . . : Hybrid
IP-Routing aktiviert  . . . . . . : Nein
WINS-Proxy aktiviert  . . . . . . : Nein

Ethernet-Adapter Ethernet:
Verbindungsspezifisches DNS-Suffix:
Beschreibung. . . . . . . . . . . : Realtek PCIe FE Family Controller
Physische Adresse . . . . . . . . : 32-A5-2C-0B-14-D9
DHCP aktiviert. . . . . . . . . . : Nein
Autokonfiguration aktiviert . . . : Ja
IPv4-Adresse  . . . . . . . . . . : 192.168.142.35(Bevorzugt)
Subnetzmaske  . . . . . . . . . . : 255.255.255.0
Standardgateway . . . . . . . . . : 192.168.142.1
DNS-Server  . . . . . . . . . . . : 8.8.8.8
                                    8.8.4.4
NetBIOS über TCP/IP . . . . . . . : Deaktiviert

Ethernet-Adapter Ethernet 2:
Medienstatus. . . . . . . . . . . : Medium getrennt
Verbindungsspezifisches DNS-Suffix:
Beschreibung. . . . . . . . . . . : Norton Security Data Escort Adapter
Physische Adresse . . . . . . . . : 00-CE-35-1B-77-5A
DHCP aktiviert. . . . . . . . . . : Ja
Autokonfiguration aktiviert . . . : Ja

Tunneladapter isatap.{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}:
Medienstatus. . . . . . . . . . . : Medium getrennt
Verbindungsspezifisches DNS-Suffix:
Beschreibung. . . . . . . . . . . : Microsoft ISATAP Adapter
Physische Adresse . . . . . . . . : 00-00-00-00-00-00-00-A0
DHCP aktiviert. . . . . . . . . . : Nein
Autokonfiguration aktiviert . . . : Ja
</code></pre>
<p>I need to get the mac address of my Realtek network card (<strong>32-A5-2C-0B-14-D9</strong>), not the one created by Norton or windows tunneling.
Python gave me another result of mac address if i am using :
    <code>"uuid.getnode() or "getmac"</code> 
I think the best way is to get the output of 
    <code>"ipconfig /all"</code>, 
looking at "Realtek" at "Beschreibung" and then get the "Physische Adresse" information to get my real mac address. 
How to do this in python on windows ? Any help is appreciated. Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>the python3 script below is based on the Stephen Rauch one (thanks for the wmic utility pointer it's really handy)</p>
<p>it retrieves only the <strong>IP</strong> and <strong>active</strong> interfaces from the computer,
handles fields with multiple values (several ips/masks or gateways on one nic), creates <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow noreferrer">IPv4Iinterface or v6 python objects</a>  from ip/mask, and ouputs a list with one dict per nic.</p>
<pre><code>#python3
from subprocess import check_output
from xml.etree.ElementTree import fromstring
from ipaddress import IPv4Interface, IPv6Interface

def getNics() :

    cmd = 'wmic.exe nicconfig where "IPEnabled  = True" get ipaddress,MACAddress,IPSubnet,DNSHostName,Caption,DefaultIPGateway /format:rawxml'
    xml_text = check_output(cmd, creationflags=8)
    xml_root = fromstring(xml_text)

    nics = []
    keyslookup = {
        'DNSHostName' : 'hostname',
        'IPAddress' : 'ip',
        'IPSubnet' : '_mask',
        'Caption' : 'hardware',
        'MACAddress' : 'mac',
        'DefaultIPGateway' : 'gateway',
    }

    for nic in xml_root.findall("./RESULTS/CIM/INSTANCE") :
        # parse and store nic info
        n = {
            'hostname':'',
            'ip':[],
            '_mask':[],
            'hardware':'',
            'mac':'',
            'gateway':[],
        }
        for prop in nic :
            name = keyslookup[prop.attrib['NAME']]
            if prop.tag == 'PROPERTY':
                if len(prop):
                    for v in prop:
                        n[name] = v.text
            elif prop.tag == 'PROPERTY.ARRAY':
                for v in prop.findall("./VALUE.ARRAY/VALUE") :
                    n[name].append(v.text)
        nics.append(n)

        # creates python ipaddress objects from ips and masks
        for i in range(len(n['ip'])) :
            arg = '%s/%s'%(n['ip'][i],n['_mask'][i])
            if ':' in n['ip'][i] : n['ip'][i] = IPv6Interface(arg)
            else : n['ip'][i] = IPv4Interface(arg)
        del n['_mask']

    return nics

if __name__ == '__main__':
    nics = getNics()
    for nic in nics :
        for k,v in nic.items() :
            print('%s : %s'%(k,v))
        print()
</code></pre>
<p>import it or use it from a cmd prompt :</p>
<pre><code>python.exe getnics.py
</code></pre>
<p>will output something like :</p>
<pre><code>hardware : [00000000] Intel(R) Centrino(R) Wireless-N 2230 Driver
gateway : ['192.168.0.254']
ip : [IPv4Interface('192.168.0.40/24'), IPv6Interface('fe80::7403:9e12:f7db:60c/64')]
mac : xx:xx:xx:xx:xx:xx
hostname : mixer

hardware : [00000002] Killer E2200 Gigabit Ethernet Controller
gateway : ['192.168.0.254']
ip : [IPv4Interface('192.168.0.28/24')]
mac : xx:xx:xx:xx:xx:xx
hostname : mixer
</code></pre>
<p>tested with windows10.
I have some doubts about the mac adress field, with VM or spoofing cases for example, it seems wmic returns one string only, and not an array.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can retrieve the windows interface information using wmic in XML format, and then convert the xml to a dict.  From the resulting dict you can gather any needed information:</p>
<pre><code>def get_interfaces_with_mac_addresses(interface_name_substring=''):
    import subprocess
    import xml.etree.ElementTree

    cmd = 'wmic.exe nic'
    if interface_name_substring:
        cmd += ' where "name like \'%%%s%%\'" ' % interface_name_substring
    cmd += ' get /format:rawxml'

    DETACHED_PROCESS = 8
    xml_text = subprocess.check_output(cmd, creationflags=DETACHED_PROCESS)

    # convert xml text to xml structure
    xml_root = xml.etree.ElementTree.fromstring(xml_text)

    xml_types = dict(
        datetime=str,
        boolean=bool,
        uint16=int,
        uint32=int,
        uint64=int,
        string=str,
    )

    def xml_to_dict(xml_node):
        """ Convert the xml returned from wmic to a dict """
        dict_ = {}
        for child in xml_node:
            name = child.attrib['NAME']
            xml_type = xml_types[child.attrib['TYPE']]

            if child.tag == 'PROPERTY':
                if len(child):
                    for value in child:
                        dict_[name] = xml_type(value.text)
            elif child.tag == 'PROPERTY.ARRAY':
                if len(child):
                    assert False, "This case is not dealt with"
            else:
                assert False, "This case is not dealt with"

        return dict_

    # convert the xml into a list of dict for each interface
    interfaces = [xml_to_dict(x)
                  for x in xml_root.findall("./RESULTS/CIM/INSTANCE")]

    # get only the interfaces which have a mac address
    interfaces_with_mac = [
        intf for intf in interfaces if intf.get('MACAddress')]

    return interfaces_with_mac
</code></pre>
<p>This function will return a list of dicts, the desired information can be returned from the resulting dicts:</p>
<pre><code>for intf in get_interfaces_with_mac_addresses('Realtek'):
    print intf['Name'], intf['MACAddress']
</code></pre>
</div>
<span class="comment-copy">Did you try the suggested netifaces module? That seems simplest. Although if you're already looking for a specific adapter, why not just hardcode the MAC?</span>
<span class="comment-copy">netiface is the best if it has the info you need. If you must scrape I suggest using powershell and wmi, instead of cmd and ipconfig.</span>
<span class="comment-copy">@StephenRauch, ipconfig.exe or wmic.exe can be run directly from Python via <code>subprocess.Popen</code>. There's no need for the cmd shell; it should be avoided as much as possible, especially if the command is based on user input. Also, wmic.exe can output as reliable XML, which is a suitable alternative for people who don't know PowerShell, or who want to avoid its startup lag (still noticeable in Windows 10, IMO -- it's a beast of a shell).</span>
<span class="comment-copy">How can I print the script output to a variable to use within my script? Thanks</span>
<span class="comment-copy">actually the function getNics() returns a dict variable ( see nics under the <b>main</b> part). so you can type nics[0]['hostname'] or nics[0]['ip'] for example</span>
<span class="comment-copy">@eryksun, thanks for the tip re:wmic, I learned something today.</span>
<span class="comment-copy"><code>os.popen</code> uses the cmd shell and doesn't hide the console window, which is annoying in a GUI app. You can instead use <code>DETACHED_PROCESS = 8;</code> <code>xml_text = subprocess.check_output('wmic.exe nic where "name like \'Realtek%\'" get MACAddress /format:rawxml', creationflags=DETACHED_PROCESS)</code>. Running detached means Windows won't create a new console for wmic when the parent is a GUI app. I added a where clause and a get field, as an example of not retrieving all info about all interfaces.</span>
<span class="comment-copy">@eryksun, thanks again.  I added the subprocess call and the interface name match.  I left off the 'just get the macAddr', because on my machine it returned multiple addresses for 'Intel'.  Hopefully, if the OP returns he can get out of it what he needs.</span>
<span class="comment-copy">Thank you very much Stephen &amp; Eryksun. I will try this ...</span>
<span class="comment-copy">Hi , i tried to copy &amp; paste the code above, save it in a file "testmac.py" and put  it under "testpackage" folder. i create an empty <b>init</b>.py file and put there too. Then i copy the whole "testpackage" folder to python installed directory "...\python\Lib\site-packages". After that i create a file "callmodule.py" , which contain : intfs = get_mac_addresses('Realtek')  - Then i open a command prompt, try to call that file using : python callmodule.py   , but i get error message : "NameError : name 'get_mac_addresses' is not define. What is wrong ? I use python 2.7.x .  Thanks.</span>
