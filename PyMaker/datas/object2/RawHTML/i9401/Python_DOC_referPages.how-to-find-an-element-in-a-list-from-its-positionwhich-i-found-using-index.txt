<div class="post-text" itemprop="text">
<pre><code>alpha = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
</code></pre>
<p>that is the list </p>
<pre><code>for letters in sentence:
    pos2 = alpha.index(letters) + 1
    #to find the positions of each letter
    new_sentence.append(pos2)
    #to add each position to the empty list
print (new_sentence)
</code></pre>
<p>that is what i used to find the positions of each letter in the inputted message in the alphabet list</p>
<p>now i wish to convert it back to the letters from positions..</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>alpha_text = ""
for i in new_sentence:
    alpha_text = alpha_text + alpha[i - 1]
print(alpha_text)
</code></pre>
<p>So your whole code would look like:</p>
<pre><code>sentence = "lololololololololol" #your text
alpha = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
new_sentence = []
for letters in sentence:
    pos2 = alpha.index(letters) + 1
    #to find the positions of each letter
    new_sentence.append(pos2)

print (new_sentence)
alpha_text =""
for i in new_sentence:
    alpha_text = alpha_text + alpha[i - 1]
print(alpha_text)
</code></pre>
<p>output:</p>
<pre><code> [12, 15, 12, 15, 12, 15, 12, 15, 12, 15, 12, 15, 12, 15, 12, 15, 12, 15, 12]

 lololololololololol
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can index it:</p>
<pre><code>[alpha[p-1] for p in new_sentence]
</code></pre>
<hr/>
<pre><code>sentence = "helloworld"
# ... run your code to get the new_sentence
''.join(alpha[p-1] for p in new_sentence)

# 'helloworld'
</code></pre>
<hr/>
<p>If you are intending to find the letter after the original letter, you can take the remainder of the index as from comment @RushyPanchal:</p>
<pre><code>sentence = "hello world"

# ... run your code to get the new_sentence
''.join(alpha[p % len(alpha)] for p in new_sentence)

# 'ifmmpxpsme'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>@Psidom's answer is the correct way to go about getting a list of characters from the string.</p>
<p>However, if you want to just shift the characters, you can use the <a href="https://docs.python.org/3/library/functions.html#chr" rel="nofollow noreferrer"><code>chr</code> and <code>ord</code></a> functions:</p>
<pre><code>sentence = "some string"
shifted_sentence = ''.join(chr(ord(c)+1) for c in sentence)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because you have the index you can grab the value at that index.</p>
<pre><code>print my_list[pos2]
</code></pre>
<p>python also has a built in method <code>enumerate(enumerable_obj)</code> that returns <code>index, value</code> pairs</p>
<pre><code>for index, value in enumerate(my_list):
    print index, value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In terms of performance, it should be easier to make a Dictionary of letters and their values and vice-versa. This way you only use a constant time for each look-up. This change makes your code much more scalable and faster.</p>
</div>
<div class="post-text" itemprop="text">
<p>An approach working with <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate()</code></a> and <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter()</code></a>:</p>
<pre><code>&gt;&gt;&gt; sentence = 'hello'
</code></pre>
<p>For this example is:</p>
<pre><code>&gt;&gt;&gt; new_sentence
[8, 5, 12, 12, 15]
</code></pre>
<p>The result is as follows:</p>
<pre><code>&gt;&gt;&gt; letters_enum = [(j,c) for j,c in enumerate(alpha, 1) if j in new_sentence]
&gt;&gt;&gt; result = []
&gt;&gt;&gt; for i in new_sentence:
...     letter = list(filter(lambda item: item[0] == i, letters_enum))
...     result.extend(letter[0][1]*len(letter))
...
&gt;&gt;&gt;
&gt;&gt;&gt; result
['h', 'e', 'l', 'l', 'o']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your current approach is inefficient, because you have to search through up to 26 different list items for every letter in your input sentence. It also fails for the letter "z", since there's nothing after "z" in the list.</p>
<p>Since you've clarified that you're trying to do a <a href="https://en.wikipedia.org/wiki/Keyword_cipher" rel="nofollow noreferrer">keyword cipher</a>, a more efficient method would be to use <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate</code></a>:</p>
<pre><code>import string

keyword = 'stack'
source = string.ascii_lowercase
target = keyword + ''.join(filter(lambda x: x not in keyword, source))

sentence = 'encode me'
encoded = sentence.translate(str.maketrans(source, target))

print(encoded)
</code></pre>
<p>Output:</p>
<pre><code>klamck jk
</code></pre>
</div>
<span class="comment-copy">Your current code is very inefficient as it searches the list for values while looping through the list, so it's gonna be O(n^2) complexity. You'd better replace this with <code>for index, letter in enumerate(sentence, 1):</code>. Then there'll be no need to add one to the index either.</span>
<span class="comment-copy">You should always include a minimal example <i>input</i> and the expected result with questions.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/help/how-to-ask">stackoverflow.com/help/how-to-ask</a>, <a href="http://stackoverflow.com/help/mcve">stackoverflow.com/help/mcve</a></span>
<span class="comment-copy">Please don't change your question into a totally new question after you've received answers. If you have a new question, post a new question.</span>
<span class="comment-copy">It seems that he's just performing a shift â€“ so you may really want <code>alpha[p % len(alpha)]</code>.</span>
<span class="comment-copy">@RushyPanchal Oh I got you. It could be.</span>
<span class="comment-copy">but i did a key word cipher so like i created a keyword repeated enough tofit the message then converted them both to positions of each letter in the alphabet then added the positions from both together now i wish to convert it back to the letters</span>
<span class="comment-copy">okay so i did   <code>print  (alpha[char])</code></span>
<span class="comment-copy">and it came out with <code>list index out of range</code></span>
<span class="comment-copy">no no a keyword cipher</span>
<span class="comment-copy">@ZahraHaiderBilal Thanks for clarifying, and sorry for the comment spam. Updated my solution.</span>
