<div class="post-text" itemprop="text">
<p>I've got the following bash script:</p>
<pre><code>#!/bin/bash
while read line
do
    ORD=`echo $line | cut -c 7-21`
    if [[ -r ../FASTA_SEC/${ORD}.fa ]]
    then
            WCR=`fgrep -o N ../FASTA_SEC/$ORD.fa | wc -l`
            WCT=`wc -m &lt; ../FASTA_SEC/$ORD.fa`
            PER1=`echo print $WCR/$WCT.*100 | python`
            WCTRIN=`fgrep -o N ../FASTA_SEC_EDITED/$ORD"_Trimmed.fa" | wc -l`
            WCTRI=`wc -m &lt; ../FASTA_SEC_EDITED/$ORD"_Trimmed.fa"`
            PER2=`echo print $WCTRIN/$WCTRI.*100 | python`
            PER3=`echo print $PER1-$PER2 | python`
            echo $ORD $PER1 $PER2 $PER3 &gt;&gt; Log.txt
        if [ $PER2 -ge 30 -a $PER3 -lt 10 ]
        then
            mv ../FASTA_SEC/$ORD.fa ./TRASH/$ORD.fa
            mv ../FASTA_SEC_EDITED/$ORD"_Trimmed.fa" ./TRASH/$ORD"_Trimmed.fa"
        fi
    fi
done &lt; ../READ/Data.txt
</code></pre>
<p>$PER variables are floating numbers as u might have noticed so I cannot use them normaly in the nested if conditional. I'd like to do this conditional iteration in python but I have no clue how do it whithin a bash script also I dont know how to import the value of the variables $PER2 and $PER3 into python. Could I write directly python code in the same bash script invvoking python somehow?</p>
<p>Thank you for your help, first time facing this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>python -c CMD</code> to execute a piece of python code from the command line. If you want bash to interpolate your environment variables, you should use double quotes around CMD. </p>
<p>You can return a value by calling sys.exit, but keep in mind that true and false in Python have the reverse meaning in bash.</p>
<p>So your code would be:</p>
<pre><code>if python -c "import sys; sys.exit(not($PER2 &gt; 30 and $PER3 &lt; 10 ))"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is possible to feed Python code to the standard input of <code>python</code> executable with the help of <a href="http://www.tldp.org/LDP/abs/html/here-docs.html" rel="nofollow noreferrer">here document</a> syntax:</p>
<pre><code>variable=$(date)
python2.7 &lt;&lt;SCRIPT
print "The current date: %s" % "${variable}"
SCRIPT
</code></pre>
<p>In order to avoid parameter substitution (interpretation within the block), quote the first limit string: <code>&lt;&lt;'SCRIPT'</code>.</p>
<p>If you want to assign the output to a variable, use <a href="http://www.tldp.org/LDP/abs/html/commandsub.html" rel="nofollow noreferrer">command substitution</a>:</p>
<pre><code>output=$(python2.7 &lt;&lt;SCRIPT
print "The current date: %s" % "${variable}"
SCRIPT
)
</code></pre>
<p>Note, it is not recommended to use back quotes for command substitution, as it is impossible to nest them, and the form <code>$(...)</code> is more readable.</p>
</div>
<div class="post-text" itemprop="text">
<p>maybe this helps?</p>
<pre><code>$ X=4; Y=7; Z=$(python -c "print($X * $Y)")
$ echo $Z
28
</code></pre>
<p><code>python -c "str"</code> takes <code>"str"</code> as input and runs it.</p>
<p>but then why not rewrite all in python? bash commands can nicely be executed with <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a> which is included in python or (need to install that) <a href="https://pypi.python.org/pypi/sh" rel="nofollow noreferrer"><code>sh</code></a>.</p>
</div>
<span class="comment-copy">Why don't you rewrite the whole script with python? Currently it looks more complicated than it would in python, anyway. For operations like <code>mv</code>, <code>cp</code>, etc. python has a <code>shutil</code> module, so you do not need to change that much.</span>
<span class="comment-copy">Uhm.. cuz im a newbie using python sincerely, I know some theory but its my first time practicing with this code. Im more familiar with bash scripting but floating limitations made me think about python so im doing my first steps now. I'm sure it would be a great training doing this whole part in python :&gt;</span>
<span class="comment-copy">If you want to stick to bash, there are tools like bc, dc and so on. But bash is a hell because of lot of escaping and so on, layers of quotes, which are passed on or not ... everything longer is better done with another scripting language. But that's a bit off topic here.</span>
<span class="comment-copy">I did not know true and false in python had teh reverse meaning in bash! that's why u are using ..(not(.. in the code provided, aight? imma try yr suggestion.</span>
<span class="comment-copy">Yes, in Python True==1, in bash the exit code 0 means true.</span>
<span class="comment-copy">works like a charm. I'll take a view deeper to fully understadn whats going on there. Thank you</span>
<span class="comment-copy">An exit code of 0 means <i>success</i>; <code>bash</code> itself has no notion of Boolean logic (outside of arithmetic expressions, anyway).</span>
<span class="comment-copy">It seems that basicly if  write python -c (python code) i can run this code easly into bash script. would you call this embed* python?</span>
<span class="comment-copy">that could indeed be called 'embed' python.</span>
