<div class="post-text" itemprop="text">
<p>This is the code I use to generate a password reset link for my app:</p>
<pre><code>def create_unique_code():
    return str(uuid.uuid4())
</code></pre>
<p>Is that strong enough? I use a one or two day expiry time.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, a UUID4 is fully random and long enough to rule out brute forcing or lucky guesses. So as long as whatever RNG <code>uuid.uuid4()</code> provides sufficiently good randomness you should be fine.</p>
<p>However, consider using e.g. a cryptographically signed token (the <code>itsdangerous</code> lib can take care of it) - not only can you specify an expiry time right when generating it, you also won't necessarily have to store anything about the token on your server.</p>
</div>
<div class="post-text" itemprop="text">
<p>In CPython, yes. In other Python implementations, probably, but you might want to double-check that a cryptographically strong source of randomness is used to generate the UUID.</p>
<hr/>
<p>There are two factors you might care about when judging whether some way of generating secure random tokens - such as UUIDs - is "strong enough":</p>
<ol>
<li>Are there enough possible values for it not to be brute-forced?</li>
<li>Is the source of randomness used <a href="https://crypto.stackexchange.com/questions/39186/what-does-it-mean-for-a-random-number-generator-to-be-cryptographically-secure">cryptographically secure</a>?</li>
</ol>
<p>Since <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)" rel="nofollow noreferrer">there are 2<sup>122</sup> version 4 UUIDs</a> (that's a little over 5 trillion trillion trillion), the answer to point 1 is definitely "yes", in this case. The space of all possible UUIDs ain't going to be brute forceable any time soon.</p>
<p>Point 2 is not currently answered by the <a href="https://docs.python.org/library/uuid.html#uuid.uuid4" rel="nofollow noreferrer">official Python docs</a>, which make no mention of security or whether the randomness source used is strong. Indeed, the entire documentation of <code>uuid4()</code> is just:</p>
<blockquote>
<p>Generate a random UUID.</p>
</blockquote>
<p>which clearly provides no security guarantees.</p>
<p>Nor is it addressed by the <a href="https://tools.ietf.org/html/rfc4122" rel="nofollow noreferrer">UUID specification</a>, which does not mandate a cryptographically strong source of randomness be used in UUID generation and indeed explicitly contemplates the possibility of a <em>"predictable random number source"</em> being used to generate UUIDs in the <strong>Security Considerations</strong> section.</p>
<p>However, we can look at the implementation at <a href="https://github.com/python/cpython/blob/master/Lib/uuid.py" rel="nofollow noreferrer">https://github.com/python/cpython/blob/master/Lib/uuid.py</a>:</p>
<pre><code>def uuid4():
    """Generate a random UUID."""
    return UUID(bytes=os.urandom(16), version=4)
</code></pre>
<p>Since this uses <code>os.urandom</code> as its randomness source, it's secure. See the docs at <a href="https://docs.python.org/3/library/os.html#os.urandom" rel="nofollow noreferrer">https://docs.python.org/3/library/os.html#os.urandom</a> which note that <code>os.urandom</code> returns:</p>
<blockquote>
<p>a string of <em>size</em> random bytes suitable for cryptographic use.</p>
</blockquote>
</div>
<span class="comment-copy">maybe also worth mentioning the <a href="https://docs.python.org/3/library/secrets.html" rel="nofollow noreferrer">secrets</a> module new in python3.6.</span>
<span class="comment-copy"><i>"... as long as whatever RNG uuid.uuid4() provides sufficiently good randomness ..."</i> - FYI, as you probably suspected, it does. See my answer.</span>
