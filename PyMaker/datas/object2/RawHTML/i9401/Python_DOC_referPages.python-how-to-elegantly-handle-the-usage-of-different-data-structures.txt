<div class="post-text" itemprop="text">
<p>I'm using Python 3.5 and this is the code I'm dealing with at the moment:</p>
<pre><code>def is_odd_number(n):
    """states if n is an odd number"""
    return n % 2 == 1


def collatz_next(n):
    """returns the successor to n in Collatz sequence"""
    return 3*n + 1 if is_odd_number(n) else n//2


def collatz_seq_sum(seq):
    """returns the sum of all elements to a given Collatz sequence"""
    return sum(seq)


def collatz_seq(n):
    """returns the Collatz sequence to n"""
    l = []
    l.append(n)
    current = n
    while current != 1:
        next_one = collatz_next(current)
        l.append(next_one)
        current = next_one
    return l


def collatz_seqs(lower_limit=1, upper_limit=10):
    """returns Collatz sequences from lower_limit to upper_limit"""
    return {i: collatz_seq(i) for i in range(lower_limit, upper_limit+1)}
</code></pre>
<p>I think that type <code>list</code> is best when dealing with a single Collatz sequence. That's why <code>collatz_seq</code> returns a list. However, I find it interesting to observe how this particular sequence develops when dealing with multiple parameters <code>n</code> in a row. That's why I created <code>collatz_seqs</code>.</p>
<p>I do not like <code>collatz_seq_sum</code> for a very simple reason: it only works properly if its parameter <code>seq</code> is of type <code>list</code>. In my opinion it's not the responsibility of <code>collatz_seq_sum</code> to make sure that a proper actual parameter is provided, in this case a <code>list</code> comprised of natural numbers. In my opinion the caller to <code>collatz_seq_sum</code> has to make sure that it's provided a correct parameter.</p>
<p>I want <code>collatz_sum_seq</code> to work with single and multiple sequences. <code>collatz_seq</code> returns a <code>list</code> and <code>collatz_seqs</code> returns a <code>dict</code>. Therefore my question: what's the elegant way to make sure that <code>collatz_seq_sum</code> always gets the correct data type for its parameter <code>seq</code>? What can I do for <code>collatz_seq_sum</code> to properly work without <code>collatz_seq_sum</code> caring about the data type of its parameter <code>seq</code>? My first idea was to change <code>collatz_seq</code> to have it return a <code>dict</code> instead of a <code>list</code> and changing <code>collatz_seq_sum</code> in order to process a <code>dict</code>. However, I don't like this approach because I don't want a <code>dict</code> when dealing with a single sequence.</p>
<p>Do you have any solutions to that? Thank you very much in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>the only way to do polymorphism for functions in python is to check the type of the argument given:</p>
<pre><code>from collections.abc import Mapping, Iterable

def collatz_seq_sum(seq):
    """returns the sum of all elements to a given Collatz sequence"""
    if isinstance(seq, Mapping):
        ret = {key: sum(values) for key, values in seq.items()}
    elif isinstance(seq, Iterable):
        ret = sum(seq)
    else:
        msg = "collatz_seq_sum got unexpected type: '{}'".format(type(seq))
        raise TypeError(msg)
    return ret
</code></pre>
<p>if you want a function to behave differently depending on the type of the input this is the way to go.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand it correctly, you want <code>collatz_seq_sum</code> to work with both a dict of collatz sequences or an individual collatz sequence. In the case of a dictionary, you want the function to return a dictionary of the sums of individual collatz sequences.</p>
<p>You can use <code>isinstance</code> to check whether the input <code>seq</code> is a dictionary or a list and run different code for each case. The following code would work.</p>
<pre><code>def collatz_seq_sum(seq):
    """returns the sum of all elements to a given Collatz sequence"""
    if isinstance(seq, dict):
        return {i: sum(seqi) for i, seqi in seq.items()}
    else:
        return sum(seq)
</code></pre>
<p>However, if you what you want is sum of all sequences of the dict, you could use the following instead,</p>
<pre><code>def collatz_seq_sum(seq):
    """returns the sum of all elements to a given Collatz sequence"""
    if isinstance(seq, dict):
        return sum([sum(seqi) for i, seqi in seq.items()])
    else:
        return sum(seq)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.4+ - <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer">functools.singledispatch</a> lets you <em>overload</em> a function definition based on the argument's type.</p>
<pre><code>from functools import singledispatch

@singledispatch
def collatz_seq_sum(seq):
    '''returns the sum of all elements to a given Collatz sequence'''
    raise NotImplementedError("I can't handle that data type")

@collatz_seq_sum.register(list)
def _(seq):
    return sum(seq)

@collatz_seq_sum.register(dict)
def _(seq):
    return {key: sum(values) for key, values in seq.items()}

&gt;&gt;&gt; collatz_seq_sum([1,2,3,4,5])
15
&gt;&gt;&gt; collatz_seq_sum({'a': [1,1,1,1], 'b': [2,2,2,2]})
{'a': 4, 'b': 8}
</code></pre>
<p>Calling <code>collatz_seq_sum</code> with something other than list or dict will raise a <code>NotImplementedError</code>.</p>
</div>
<span class="comment-copy">The <a href="https://github.com/python/mypy" rel="nofollow noreferrer">mypy</a> static type checking library provides a <a href="https://jeffknupp.com/blog/2013/11/29/improve-your-python-decorators-explained/" rel="nofollow noreferrer">decorator</a> named <code>overload</code> that seems to allow the kind of polymorphism you want: <a href="http://mypy.readthedocs.io/en/latest/function_overloading.html" rel="nofollow noreferrer">mypy.readthedocs.io/en/latest/function_overloading.html</a> . Looks promising to me.</span>
<span class="comment-copy">Would <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer">functools.singledispatch</a> help?</span>
<span class="comment-copy">Thanks for your input. It's a fine argument and I understand it. I was just wondering: is this the only approach? Say you use scripts which utilize hundreds if not thousands of functions. I mean it's always the same thing over and over again: each function checks for the type of its parameters and acts accordingly. To do the same thing over and over again gets incredibly tedious and I think it's difficult to read and maintain.</span>
<span class="comment-copy">that is what classes (and duck-typing) is for. this is the python philosophy of doing that.</span>
<span class="comment-copy">Thanks for your input. Well, not exactly. I do not want <code>collatz_seq_sum</code> to bother with the data type of <code>seq</code> at all because I don't think that it's the job of <code>collatz_seq_sum</code> to check for data types. It's its job to calculate sums; nothing else.</span>
<span class="comment-copy">Do you mean to say that you want collatz_seq_sum to work on any data type, without checking for the data type?</span>
<span class="comment-copy">Yes, that's the basic idea because I don't want to make pretty much the same check when dealing with hundreds of functions.</span>
<span class="comment-copy">Thanks for your input. This is a very interesting approach as well. You used the word "overload". Is your code an application of Python's decorator functionality? The @-sign reminds me of it.</span>
<span class="comment-copy">@6q9nqBjo,  I took the word overload from it's documentation. It is a decorator - I haven't taken the time to look and see how it is implemented.  There is a link to the docs in my answer.</span>
