<div class="post-text" itemprop="text">
<p>I am trying to sniff packets but i am getting strange output and i don't understand the reason..<br/> So that's my code <strong>please</strong> help me<br/>
(I'm using Python 3.6 on Windows 8.1)</p>
<h2>Code:</h2>
<pre><code>import socket
import struct
import binascii
import textwrap

def main():
    # Get host
    host = socket.gethostbyname(socket.gethostname())
    print('IP: {}'.format(host))

    # Create a raw socket and bind it
    conn = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_IP)
    conn.bind((host, 0))

    # Include IP headers
    conn.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
    # Enable promiscuous mode
    conn.ioctl(socket.SIO_RCVALL, socket.RCVALL_ON)

    while True:
        # Recive data
        raw_data, addr = conn.recvfrom(65536)

        # Unpack data
        dest_mac, src_mac, eth_proto, data = ethernet_frame(raw_data)

        print('\nEthernet Frame:')
        print("Destination MAC: {}".format(dest_mac))
        print("Source MAC: {}".format(src_mac))
        print("Protocol: {}".format(eth_proto))

# Unpack ethernet frame
def ethernet_frame(data):
    dest_mac, src_mac, proto = struct.unpack('!6s6s2s', data[:14])
    return get_mac_addr(dest_mac), get_mac_addr(src_mac), get_protocol(proto), data[14:]

# Return formatted MAC address AA:BB:CC:DD:EE:FF
def get_mac_addr(bytes_addr):
    bytes_str = map('{:02x}'.format, bytes_addr)
    mac_address = ':'.join(bytes_str).upper()
    return mac_address

# Return formatted protocol ABCD
def get_protocol(bytes_proto):
    bytes_str = map('{:02x}'.format, bytes_proto)
    protocol = ''.join(bytes_str).upper()
    return protocol

main()
</code></pre>
<h2>From this code i get this output:</h2>
<p>IP: 192.168.1.12<br/></p>
<p>Ethernet Frame:<br/>
Destination MAC: <strong>45:00:00:43:00:00</strong><br/>
Source MAC: <strong>40:00:2C:11:48:D3</strong><br/>
Protocol: <strong>4266</strong><br/></p>
<p>Ethernet Frame:<br/>
Destination MAC: <strong>45:00:00:42:11:E7</strong><br/>
Source MAC: <strong>00:00:80:11:00:00</strong><br/>
Protocol: <strong>C0A8</strong><br/></p>
<p>Ethernet Frame:<br/>
Destination MAC: <strong>45:00:00:33:04:D6</strong><br/>
Source MAC: <strong>00:00:80:11:00:00</strong><br/>
Protocol: <strong>C0A8</strong></p>
<p>.<br/>.<br/>.<br/></p>
<p>According to <a href="https://en.wikipedia.org/wiki/EtherType" rel="nofollow noreferrer">EtherType list</a> this protocols don't exist and analysing my traffic with Wireshark i am sure that this MACs don't exist in my LAN</p>
<p>So I'm definitely doing something wrong but I do not understand what<br/>
Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>The hint is that all your Destination Mac addresses start with <code>0x45</code>.  That's  the first byte of the <a href="https://en.wikipedia.org/wiki/IPv4#Packet_structure" rel="nofollow noreferrer">IP header</a>. So your code is getting all the IP packets, but not the MAC header for those frames.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok thanks to <strong>selbi</strong> i understand the problem, thank you very much<br/> 
But to catch Ethernet header with Python in windows you have to use:<br/></p>
<h1>1. PyPCap</h1>
<ul>
<li>To <a href="https://stackoverflow.com/questions/36515474/installing-pypcap-on-windows-10-python-2-7-64-bit">install pypcap</a><br/></li>
</ul>
<h1>2. Dpkt</h1>
<ul>
<li><p>To install dpkt just open cmd as admin and type:<br/></p>
<p>py -2 -m pip install dpkt</p></li>
</ul>
<p>Here references of <a href="https://docs.python.org/3/installing/index.html" rel="nofollow noreferrer">Python Docs</a></p>
<h1>3. Python 2.7</h1>
<p>But you need to install Python 3.4&gt; to get pip </p>
<h1>And finally that's the code:</h1>
<pre><code>#!/usr/bin/env python

import getopt, sys
import dpkt, pcap
import socket
import struct
import binascii
import textwrap

def main():
    # Get host
    host = socket.gethostbyname(socket.gethostname())
    print('IP: {}'.format(host))

    name = None            
    pc = pcap.pcap(name)
    decode = { pcap.DLT_LOOP:dpkt.loopback.Loopback,
               pcap.DLT_NULL:dpkt.loopback.Loopback,
               pcap.DLT_EN10MB:dpkt.ethernet.Ethernet }[pc.datalink()]
    try:
        print 'listening on %s: %s' % (pc.name, pc.filter)
        for ts, pkt in pc:
            pkt = str(decode(pkt))
            dest_mac, src_mac, eth_proto, data = ethernet_frame(pkt)

            print '\nEthernet Frame:'
            print "Destination MAC: {}".format(dest_mac)
            print "Source: {}".format(src_mac)
            print "Protocol: {}".format(eth_proto)
    except KeyboardInterrupt:
        nrecv, ndrop, nifdrop = pc.stats()
        print '\n%d packets received by filter' % nrecv
        print '%d packets dropped by kernel' % ndrop

# Unpack ethernet frame
def ethernet_frame(data):
    dest_mac, src_mac, proto = struct.unpack('!6s6s2s', data[:14])
    return binascii.hexlify(dest_mac), binascii.hexlify(src_mac), binascii.hexlify(proto), data[14:]

if __name__ == '__main__':
    main()
</code></pre>
<h1>Output:</h1>
<p>Ethernet Frame:<br/>
Destination MAC: <strong>5404a6f2740c &lt;- My NIC MAC</strong><br/>
Source: <strong>6459f81dc690</strong><br/>
Protocol: <strong>0800 &lt;- Right protocol</strong><br/></p>
<p>Ethernet Frame:<br/>
Destination MAC: <strong>6459f81dc690</strong><br/>
Source: <strong>5404a6f2740c</strong><br/>
Protocol: <strong>0800</strong><br/></p>
<p>Ethernet Frame:<br/>
Destination MAC: <strong>5404a6f2740c</strong><br/>
Source: <strong>6459f81dc690</strong><br/>
Protocol: <strong>0800</strong><br/></p>
<p>I hope you enjoy thanks again <strong>selbie</strong></p>
<p>(Sorry i can't put more links cause of my reputation)</p>
</div>
<span class="comment-copy">But how can i get MAC header? (i am new with Python)</span>
<span class="comment-copy">Instead of opening an AF_INET socket, open an AF_PACKET socket. <a href="http://opensourceforu.com/2015/03/a-guide-to-using-raw-sockets/" rel="nofollow noreferrer">opensourceforu.com/2015/03/a-guide-to-using-raw-sockets</a></span>
