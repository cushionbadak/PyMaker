<div class="post-text" itemprop="text">
<p>I've 2 identical lists as shown:</p>
<pre><code>list_1 = ['A','B','C','D','E','F']
list_2 = ['A','B','C','D','E','F']
</code></pre>
<p>I concatenate each element in them,</p>
<pre><code>for i in list_1:
    for j in list_2:
        print(i+' and '+j)
</code></pre>
<p>Can you help me remove the duplicate combinations that may occur ?(For ex: AA,..FF and also AB,AC,BC, etc)</p>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>You simply perform a comparison and constraints it to <code>i</code> being less than <code>j</code>:</p>
<pre><code>for i in list_1:
    for j in list_2:
        if i &lt; j:
            print(i+' and '+j)
</code></pre>
<p>Because of the order constraint if <code>'A and B'</code> is printed, this means that <code>A</code> is less than <code>B</code>, so it means the constraint <code>'A' &gt; 'B'</code> will fail and thus <code>B and A</code> will not be printed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools.combinations</a>. In this case code gets much simpler. You need only one list, <code>combinations</code> automatically generates you only unique combinations. So you have no to filter 'AA' or 'CB' passing only 'BC'.</p>
<pre><code>&gt;&gt;&gt; from itertools import combinations

&gt;&gt;&gt; l=['A','B','C','D','E','F']

list(combinations(l, 2))
[('A', 'B'), ('A', 'C'), ('A', 'D'), ('A', 'E'), ('A', 'F'), 
 ('B', 'C'), ('B', 'D'), ('B', 'E'), ('B', 'F'), 
 ('C', 'D'), ('C', 'E'), ('C', 'F'), 
 ('D', 'E'), ('D', 'F'), 
 ('E', 'F')]

&gt;&gt;&gt; # or with joined strings
&gt;&gt;&gt; [' and '.join(x) for x in combinations(l, 2)]
['A and B', 'A and C', 'A and D', 'A and E', 'A and F', 
 'B and C', 'B and D', 'B and E', 'B and F', 
 'C and D', 'C and E', 'C and F', 
 'D and E', 'D and F', 
 'E and F']
</code></pre>
<p>I've formatted output to see you have clean result.</p>
</div>
<span class="comment-copy">This is a case of an XY problem. You don't need two identical lists, only one list and <code>iterations.combinations</code>.</span>
<span class="comment-copy">Do you also want CA, CB, etc?</span>
<span class="comment-copy">Right @JoelCornett the actual code consists of a single list only and it is a case of combinations. This is the quick example I'd come up with, skipped my mind that ;)</span>
<span class="comment-copy"><code>i</code> and <code>j</code> are not integers!!! Those are character lists.</span>
<span class="comment-copy">@barakmanos: order is also defined on <code>str</code> objects: here the lexicographical order is used. As long as <code>&lt;</code> is a mathematical non-reflexive order relation (being non-reflexive, transitive and assymetric) this will work.</span>
<span class="comment-copy">OK, you are right!</span>
