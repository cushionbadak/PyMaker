<div class="post-text" itemprop="text">
<p>I have a simple python project fro learning with two files <code>__init__.py</code> and <code>__main__.py</code>
When I executed <code>python -m pkg_name</code>
it runs both <code>__init__.py</code> and <code>__main__.py</code></p>
<p>When I execute <code>python -m pkg_name.__init__.py</code>
it invokes <code>__init__.py</code> twice.</p>
<p>I want to know why <code>__init__.py</code> is called twice when i call <code>__init__.py</code>
Is it like the static code in java where when we call the class all the data
in static code is automatically triggered. </p>
<p>What is the relevance of <code>__init__.py</code> in python and benefits of it getting executed when package is imported/loaded or called for processing.
Please help me understand the concepts better.</p>
<pre><code>"""Run a sequence of programs, testing python code __main__ variable

Each program (except the first) receives standard output of the
previous program on its standard input, by default. There are several
alternate ways of passing data between programs.

"""

def _launch():
    print('Pipeline Launched')


if __name__ == '__main__':
    print('This module is running as the main module!')
    _launch()
&gt; __init__.py

"""This is the __init__.py file of pipleline package

Used for testing the import statements.


"""

print(__name__)
print('This is the __init__.py file of pipleline package')
print('Exiting __init__ of pipeline package after all initialization')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following command is used to execute a Python module or package:</p>
<pre><code>python -m module
</code></pre>
<p>Where <code>module</code> is the name of the module/package <strong>without</strong> .py extension.</p>
<ul>
<li>if the name matches a script, it is byte-compiled and executed,</li>
<li>if the name matches a directory with a <code>__init__.py</code> file and a <code>__main__.py</code> file, the directory is considered as being a Python package and is loaded first. Then the <code>__main__.py</code> script is executed.</li>
<li>if the name contains dots, e.g.: "mylib.mypkg.mymodule", Python browse each package and sub-package matching the dotted name and load it. Then it execute the last module (or last package which must contain a <code>__main__.py</code> file). </li>
</ul>
<p>A (short) description is done in the official documentation: <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">29.4. <strong>main</strong> â€” Top-level script environment</a>.</p>
<h2>Your problem</h2>
<p>If you run this command:</p>
<pre><code>python -m pkg_name
</code></pre>
<p>It loads (and run) the  <code>__init__.py</code> and <code>__main__.py</code>: this is the normal behavior.</p>
<p>If you run this command:</p>
<pre><code>python -m pkg_name.__init__.py
</code></pre>
<p>It should fail if you leave the ".py" extension.</p>
<p>If it runs, the command loads the <code>pkg_name</code> package first: it execute the <code>__init__.py</code> first. Then it runs it again.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is used to define a folder as a package, which contains required modules and resources.</p>
<p>You can use is as an empty file or add docs about the package or setup initial conditions for the module.</p>
<p>Please checkout the <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">python documentation</a>. </p>
<p>Also, as mentioned by <a href="https://stackoverflow.com/users/1357527/natecat">Natecat</a>, <code>__init__.py</code> gets executed whenever you load a package. That's why when you explicitly call <code>__init__.py</code>, it loads the package (1st load) then executes <code>__init__.py</code> (2nd load).</p>
</div>
<span class="comment-copy">Looks like duplicate of <a href="http://stackoverflow.com/questions/448271/what-is-init-py-for">stackoverflow.com/questions/448271/what-is-init-py-for</a></span>
<span class="comment-copy">When a package is loaded, it's <code>__init__.py</code> file is loaded if it exists. After the package is loaded the file you are trying to load, in this case, <code>__init__.py</code>, is loaded, hence it is run twice.</span>
<span class="comment-copy">@Prajwal not really a duplicate: the OP wants to understand why it's code is called twice. This is different. But, I agree he should look at this link.</span>
<span class="comment-copy">So, it means every code inside <code>__init__</code> will be run twice? I set mysql connection inside it, is it bad practice or impact to the performance?</span>
<span class="comment-copy">@TomSawyer you're so late to the party. <code>__init__</code> will not run twice. OP is calling it again, making it run twice.</span>
<span class="comment-copy">What ever it is. I don't understand, if i put <code>print</code> inside <b>init</b> , i see it print twice. If i put a query in it, result is the same. It mean it queries twice to the db? It causes the performance if execute a query twice</span>
