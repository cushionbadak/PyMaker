<div class="post-text" itemprop="text">
<p>I have the following <code>lis</code> of tuples after making a lot of reformating:</p>
<pre><code>[[(('A', 'X'), ('43,23', 'Y'), ('wepowe', 'd'))]]
</code></pre>
<p>How can I reformat into:</p>
<pre><code>'A', '43,23', 'wepowe'
</code></pre>
<p>I tried to:</p>
<pre><code>[' '.join(map(str,lis[0][0])) for x in lis]
</code></pre>
<p>and</p>
<pre><code>[' '.join(map(str,lis[0][:1])) for x in lis]
</code></pre>
<p>and</p>
<pre><code>' '.join(map(str, lis))
</code></pre>
<p>However, I do not get the desired format. Which is the easist way of reformating tuples and lists like the above?.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer"><code>list comprehension</code></a> like this:</p>
<pre><code>my_list = [(('A', 'X'), ('43,23', 'Y'), ('wepowe', 'd'))]
result = [item[0] for item in my_list[0]]
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt;&gt;&gt; result
['A', '43,23', 'wepowe']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> as:</p>
<pre><code>&gt;&gt;&gt; my_list = [(('A', 'X'), ('43,23', 'Y'), ('wepowe', 'd'))]
&gt;&gt;&gt; new_list , _ = zip(*my_list[0])
#              ^ replace this with some variable in case you also want the
#                elements at `1`st index of each tuple
</code></pre>
<p>Value hold by <code>new_list</code> will be:</p>
<pre><code>&gt;&gt;&gt; new_list
('A', '43,23', 'wepowe')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Before you write any list comprehensions lets iterate the list using 2 <code>for</code> loops, like:</p>
<pre><code>tups = [(('A', 'X'), ('43,23', 'Y'), ('wepowe', 'd'))]

for item in tups:
    for j in item:
        print j[0]
</code></pre>
<p>Now if you were to see we get the first element of each tuple we are looking for, we can convert it to a list comprehension expression like so:</p>
<pre><code>' '.join(str(j[0]) for item in tups for j in item)
</code></pre>
</div>
<span class="comment-copy">My problem was actually entering to the first parethesis, is that done with <code>item[0]</code>?</span>
<span class="comment-copy">It is done by <code>my_list[0]</code>, inside your list you have one element, to access it you need to use <code>my_list[0]</code>, then for each item, to access the first sub-item you should use <code>item[0]</code></span>
<span class="comment-copy">Thanks!, I learned something new..</span>
<span class="comment-copy">You're welcome ;)</span>
<span class="comment-copy">Thanks!, I liked this solution, could you explain a little bit what is happening and if this is the most efficient?.</span>
<span class="comment-copy">Check <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow noreferrer">zip document</a>. You will get the idea on what it does. Also, you may find <a href="http://stackoverflow.com/questions/13180861/zip-as-a-list-comprehension">this post</a> helpful. In my solution <code>zip(*my_list[0])</code>, <code>*</code> is used to unpack the list and then zip is performed on the unpacked list</span>
<span class="comment-copy">Actually it worked 1 minute ago... I am getting this: <code>IndexError: list index out of range</code></span>
<span class="comment-copy">You must have changed the structure of your input list OR, you would not be calling the <code>zip</code> function as I did :)</span>
