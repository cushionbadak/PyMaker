<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/31559933/perfomance-of-lenlist-vs-reading-a-variable">perfomance of len(List) vs reading a variable</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>Let's say that we have to use the length of a list in certain calculations in a loop. Which would be faster, using <code>len(list_)</code> in each calculation or storing the length <code>length = len(list_)</code> and then using <code>length</code>? For example:</p>
<pre><code>for x in range(n):
    print(len(list_) + 1)
</code></pre>
<p>Versus</p>
<pre><code>length = len(list_)
for x in range(n):
    print(length + 1)
</code></pre>
<p>Assume a generic situation (<code>n</code> can be any value).</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a simple test using <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code></a> as @DSM suggested:</p>
<pre><code>def direct_len(lst):
    total = 0
    for x in range(1000):
        total += len(lst) + 1

def precalc(lst):
    length = len(lst)
    total = 0
    for x in range(1000):
        total += length + 1

if __name__ == '__main__':
    import timeit
    print(timeit.timeit("direct_len(list(range(100)))", setup="from __main__ import direct_len", number=10000))
    print(timeit.timeit("precalc(list(range(100)))", setup="from __main__ import precalc", number=10000))
</code></pre>
<p>With above I get following result with Python 3.5 on Windows 8:</p>
<pre><code>1.3909554218576217
0.8262501212985289
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Accessing a single stored variable is much faster than accessing a function and passing it an accessed variable.</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('x', setup='x=len([1,2])')
0.024496269777304097
&gt;&gt;&gt; timeit.timeit('len(x)', setup='x=[1,2]')
0.10009170159894687
</code></pre>
<p>However, as I said in my <a href="https://stackoverflow.com/questions/41528713/which-is-faster-in-loops-printlenl-for-or-length-lenl-printl#comment70263400_41528713">comment above</a>, it doesn't matter. It might matter if the function you're calling is extremely expensive, but that's not the case this time. Use whatever makes your code look cleaner.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python's list store its length in a variable, so there is no big difference in this two way.</p>
<p>The first get the length(which is just a variable, there is no any calculation in len()function) every time in the loop, the second just do the function once. The time is same in my test.</p>
</div>
<span class="comment-copy">Why don't you test it out using <code>time.time()</code> and report back to us?</span>
<span class="comment-copy">Even better, there's an entire <a href="https://docs.python.org/3.6/library/timeit.html" rel="nofollow noreferrer">timeit</a> module designed to help with this, which avoids a lot of the problems just using <code>time.time()</code> can introduce.</span>
<span class="comment-copy">The only difference between those code blocks is accessing a variable and calling it as a function with another accessed variable vs simply accessing a variable. The only difference between those is that the former calls a function and accesses a second variable while the latter does not. Which do you think is faster? After you've made an educated guess, run some tests and find out. Then ignore the result and use whatever code looks cleaner.</span>
<span class="comment-copy">The len function is pretty fast. It calls the <code>.__len__</code> method which just does an attribute lookup on built-in containers. Stashing the length in a local should be slightly faster, but don't clutter your code like that unless it's a huge loop.</span>
<span class="comment-copy">What you should actually be doing is saving <code>len(list_) + 1</code>, and giving that variable a name that represents its purpose in your code.</span>
<span class="comment-copy">I knew it. The first looks like it will have to repeat that <code>len</code> function for <code>n</code> number of times.</span>
<span class="comment-copy">Note that you're timing a lot of identical overhead stuff, which masks the performance difference in the code that's actually different.</span>
<span class="comment-copy">Out of interest I wonder if it would make much difference in the results if you ran this program with one of the tests commented out and again with the other test commented out and compared the results that way.</span>
<span class="comment-copy">@TigerhawkT3 Yes of course, I just decided to use examples provided in the question. Comparing these numbers with only variable access/<code>len</code> call as in your example shows how fast the difference becomes meaningless when some functionality is added.</span>
<span class="comment-copy">@Tagc I fail to see why that would change anything. Anyway I tried it and results seem to be same if I comment one of the tests out. Note though that there's a slight variance between every run in any case.</span>
<span class="comment-copy">Why don't you tell us what your test was, so that we can see why they were the same? In my test, accessing a saved length was about four times faster than repeatedly calling <code>len</code>.</span>
