<div class="post-text" itemprop="text">
<p><p>
I would like to compare lists in python in the following manner. <p>
For example, if i had 3 lists: <p></p>
<pre><code>l1 = [t1, t2, t3] 
l2 = [t1, t2, t3] 
l3 = [t1, t2, t3]
</code></pre>
<p>I would like to compare (list name - element name): <p></p>
<pre><code>l1 - t1 with l2 - t1 
l1 - t1 with l3 - t1 
l2 - t1 with l3 - t1 

l1 - t2 with l2 - t2 
l1 - t2 with l3 - t2 
l2 - t2 with l3 - t2 

l1 - t3 with l2 - t3 
l1 - t3 with l3 - t3 
l2 - t3 with l3 - t3 
</code></pre>
<p>So I would like to compare each list element with every other matching element from other lists, but only once. Number of lists may by variable.
Is there some elegant way to achieve that?</p>
</p></p></p></p></div>
<div class="post-text" itemprop="text">
<p>Function combinations in Itertools can be helpful here. for example (assuming all the list are of same size);</p>
<pre><code>import itertools

l1 = ['l1-t1', 'l1-t2', 'l1-t3'] 
l2 = ['l2-t1', 'l2-t2', 'l2-t3'] 
l3 = ['l3-t1', 'l3-t2', 'l3-t3']

for i in range(0, len(l1)):

  comp=[l1[i],l2[i],l3[i]]

  c = itertools.combinations(comp,2)

  print c.next()
  print c.next()
  print c.next()
  print "------" 
</code></pre>
<p>This is give you full sets of combinations as required;</p>
<pre><code>('l1-t1', 'l2-t1')
('l1-t1', 'l3-t1')
('l2-t1', 'l3-t1')
------
('l1-t2', 'l2-t2')
('l1-t2', 'l3-t2')
('l2-t2', 'l3-t2')
------
('l1-t3', 'l2-t3')
('l1-t3', 'l3-t3')
('l2-t3', 'l3-t3')
------
</code></pre>
<p>you can add integer values instead of strings, and further do the comparison things with them. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>#for every object in objects list (except the last one)...      
for i in range(objects_length-1):
    # compare it with every next object from the objects list
    for j in range(i+1, objects_length):
        logger.log_debug("\nComparing {0} and {1}..".format(self.objects[i].id, self.objects[j].id))
            # for every list (attribute of an object) element 
            for k in range(objects_list_len):
                #compare it with every list element of the next object and check if they match
                for z in range(objects_list_len):
                   #check if lists elements match ex. objects[i].list[k].id == objects[j].list[z].id
</code></pre>
</div>
<span class="comment-copy">Looks like Cartesian product.</span>
<span class="comment-copy">did you look in <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> if there is something for you?</span>
<span class="comment-copy">Can you tell what is the comparision you want to make and what is your final  goal ? I am asking because there might be different approaches. You can use <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">sets</a> for example to get rid of double values or use mathematical operations like union, intersection etc.</span>
<span class="comment-copy">It's not really a cartesian product, because the lists (ex. l1, l2, l3) are attributes of the objects. For each object i would like to compare corresponding lists elements ex t1 with t1, but only once (not every element with every element). It seems like itertools works mainly for lists, but if I create a list from multiple lists I will loose information about the objects they come from :/</span>
<span class="comment-copy">It's not exactly what i expected, as it compares lists elements based on their locations. But I cannot assume that matching elements will be on the same places in the lists. I will post below the solution that i came up with, although it's probably not the most elegant one :/</span>
