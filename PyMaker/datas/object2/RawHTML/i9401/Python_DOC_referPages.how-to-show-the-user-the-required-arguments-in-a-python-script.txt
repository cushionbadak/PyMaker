<div class="post-text" itemprop="text">
<p>I have a Python script that I run from the command line.  The script, which uses <code>sys.argv</code>, requires the following six (6) arguments:</p>
<pre><code>argument 1:  the script name (e.g. 'TimeSeries.py')
argument 2:  a configuration file (e.g. 'Customer1.cfg')
argument 3:  whether the resulting data is daily granular or hourly granular (e.g. -d or -h)
argument 4:  which data to retrieve (e.g. -all or -limited)
argument 5:  the number of days in the time series (e.g. '30')
argument 6:  the 'as of' date
</code></pre>
<p>I run this script multiple times per day and have therefore memorized the sequence of arguments.  </p>
<p>But, there are others who might run the script infrequently and not know the required arguments (and/or the sequence).  </p>
<p>Is there a way for them to query the argument list (along with an example of each argument)?  Perhaps the doc string?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>There's multiple options: </p>
<ul>
<li><p>Use the <a href="http://click.pocoo.org/5/" rel="nofollow noreferrer"><strong>Click</strong></a> python library and reformat the script using this. This automatically creates a<br/>
<code>--help</code> function that you can use. I have not personally used this one.</p></li>
<li><p>Use <a href="https://docs.python.org/dev/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a> from the standard library. For example:</p></li>
</ul>
<pre class="lang-py prettyprint-override"><code>import argparse


def get_parser():
    parser = argparse.ArgumentParser(description='Description of your script')
    parser.add_argument('name', help='The script name (e.g. "TimeSeries.py")',
                        metavar="NAME", type=str)
    # other arguments here ...
    return parser

if __name__ == '__main__':
    parser = get_parser()
    args = parser.parse_args()
</code></pre>
<p>This will generate an <code>-h</code> option to use with help text per argument. Can be combined with my last suggestion:</p>
<ul>
<li>Add a <code>docstring</code> to the top of the file with an explanation. Whenever no argument is given, print out the <code>__doc__</code>. Example with argparse again:</li>
</ul>
<pre class="lang-py prettyprint-override"><code>"""
argument 1:  the script name (e.g. 'TimeSeries.py')
argument 2:  a configuration file (e.g. 'Customer1.cfg')
argument 3:  whether the resulting data is daily granular or hourly granular (e.g. -d or -h)
argument 4:  which data to retrieve (e.g. -all or -limited)
argument 5:  the number of days in the time series (e.g. '30')
argument 6:  the 'as of' date
"""
import argparse

... # rest of script

def get_parser():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('name', help='The script name (e.g. "TimeSeries.py")',
                        metavar="NAME", type=str)
    # other arguments here ...
    return parser

if __name__ == '__main__':
    parser = get_parser()
    args = parser.parse_args()
</code></pre>
<p>Now calling the script with the <code>-h</code> option, will print out the docstring at the top, with the rest of the argument help texts. This can ofcourse also be implemented in a simple <code>if</code>:</p>
<pre class="lang-py prettyprint-override"><code>if not args:  # somewhere in your own code
    print(__doc__)
    # exit code(?) 
</code></pre>
</div>
<span class="comment-copy">Yes, use <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a> module.</span>
<span class="comment-copy">Or try using <a href="http://click.pocoo.org/5/" rel="nofollow noreferrer"><code>click</code></a>.  Either way, your script will complain if arguments aren't passed, and can self-document when the user does <code>./script --help</code>.</span>
<span class="comment-copy">If it is not optional consider to drop the <code>-</code> in front of it. So argument number four becomes <code>all</code> or <code>limited</code>. Expecting it in the form of an option contradicts the meaning of option(al).</span>
