<div class="post-text" itemprop="text">
<p>I have a log with entries in the following format:</p>
<pre><code>1483528632  3   1   Wed Jan  4 11:17:12 2017    501040002   4
1533528768  4   2   Thu Jan  5 19:17:45 2017    534040012   3
...
</code></pre>
<p>How do I fetch only the timestamp component (eg. <code>Wed Jan  4 11:17:12 2017</code>) using regular expressions?</p>
<p>I have to implement the final product in python, but the requirement is to have part of an automated regression suite in bash/perl (with the final product eventually being in Python).</p>
</div>
<div class="post-text" itemprop="text">
<p>If the format is fixed in terms of space delimiters, you can simply <a href="https://docs.python.org/2/library/stdtypes.html#str.split" rel="nofollow noreferrer">split</a>, get a slice of a date string and load it to <code>datetime</code> object via <a href="https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer"><code>datetime.strptime()</code></a>:</p>
<pre><code>In [1]: from datetime import datetime

In [2]: s = "1483528632  3   1   Wed Jan  4 11:17:12 2017    501040002   4"

In [3]: date_string = ' '.join(s.split()[3:8])

In [4]: datetime.strptime(date_string, "%a %b %d %H:%M:%S %Y")
Out[4]: datetime.datetime(2017, 1, 4, 11, 17, 12)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Grep is most often used in this scenario if you are working with syslog.  But as the post is also tagged with Python.  This example uses <em>regular expressions</em> with <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">re</a>:</p>
<pre><code>import re
</code></pre>
<p>Define the pattern to match:</p>
<pre><code>pat = "\w{3}\s\w{3}\s+\w\s\w{2}:\w{2}:\w{2}\s\w{4}"
</code></pre>
<p>Then use re.findall to return all non-overlapping matches of pattern in txt:</p>
<pre><code>re.findall(pat,txt)
</code></pre>
<p>Output:</p>
<pre><code>['Wed Jan  4 11:17:12 2017', 'Thu Jan  5 19:17:45 2017']
</code></pre>
<hr/>
<p>If you want to then use <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">datetime</a>:</p>
<pre><code>import datetime

dates = re.findall(pat,txt)

datetime.datetime.strptime(dates[0], "%a %b %d %H:%M:%S %Y")
</code></pre>
<p>Output:</p>
<pre><code>datetime.datetime(2017, 1, 4, 11, 17, 12)
</code></pre>
<p>You can then utilise these datetime objects:</p>
<pre><code>dateObject = datetime.datetime.strptime(dates[0], "%a %b %d %H:%M:%S %Y").date()
timeObject = datetime.datetime.strptime(dates[0], "%a %b %d %H:%M:%S %Y").time()

print('The date is {} and time is {}'.format(dateObject,timeObject))
</code></pre>
<p>Output:</p>
<pre><code>The date is 2017-01-04 and time is 11:17:12
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>The regex</strong> to match the timestamp is:</p>
<p><code>'[a-zA-Z]{3} +[a-zA-Z]{3} +\d{1,2} +\d{2}:\d{2}:\d{2} +\d{4}'</code>.</p>
<p><strong>With grep</strong> that can be used like this (if your log file was called <code>log.txt</code>):</p>
<pre><code>$ grep -oE '[a-zA-Z]{3} +[a-zA-Z]{3} +\d{1,2} +\d{2}:\d{2}:\d{2} +\d{4}' log.txt
# Wed Jan  4 11:17:12 2017
# Thu Jan  5 19:17:45 2017
</code></pre>
<p><strong>In python</strong> you can use that like so:</p>
<pre><code>import re

log_entry = "1483528632  3   1   Wed Jan  4 11:17:12 2017    501040002   4"

pattern = '[a-zA-Z]{3} +[a-zA-Z]{3} +\d{1,2} +\d{2}:\d{2}:\d{2} +\d{4}'
compiled = re.compile(pattern)
match = compiled.search(log_entry)
match.group(0)
# 'Wed Jan  4 11:17:12 2017'
</code></pre>
<p>You can use this to get an actual datetime object from the string (expanding on above code):</p>
<pre><code>from datetime import datetime
import re

log_entry = "1483528632  3   1   Wed Jan  4 11:17:12 2017    501040002   4"

pattern = '[a-zA-Z]{3} +[a-zA-Z]{3} +\d{1,2} +\d{2}:\d{2}:\d{2} +\d{4}'
compiled = re.compile(pattern)
match = compiled.search(log_entry)

log_time_str = match.group(0)
datetime.strptime(log_time_str, "%a %b %d %H:%M:%S %Y")
# datetime.datetime(2017, 1, 4, 11, 17, 12)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Two approaches: with and without using <em>regular expressions</em><br/>
<strong>1)</strong> using <code>re.findall()</code> function:</p>
<pre><code>with open('test.log', 'r') as fh:
    lines = re.findall(r'\b[A-Za-z]{3}\s[A-Za-z]{3}\s{2}\d{1,2} \d{2}:\d{2}:\d{2} \d{4}\b',fh.read(), re.M)

print(lines)
</code></pre>
<p><strong>2)</strong> usign <code>str.split()</code> and <code>str.join()</code> functions:</p>
<pre><code>with open('test.log', 'r') as fh:
    lines = [' '.join(d.split()[3:8]) for d in fh.readlines()]

print(lines)
</code></pre>
<p>The output in both cases will be a below:</p>
<pre><code>['Wed Jan  4 11:17:12 2017', 'Thu Jan  5 19:17:45 2017']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>grep -E '\b(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) +[0-9]+ [0-9]{2}:[0-9]{2}:[0-9]{2} [0-9]{4}\b' dates
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you just wanted to list the dates, rather than grep, perhaps:</p>
<pre><code>sed -nre 's/^.*([A-Za-z]{3}\s+[A-Za-z]{3}\s+[0-9]+\s+[0-9]+:[0-9]+:[0-9]+\s+[0-9]{4}).*$/\1/p' filename
</code></pre>
</div>
<span class="comment-copy">I've to implement the final product in python, but the requirement is to have a part of automated regression suite in bash/perl so I stated that as grep, unix, regex but it will eventually be in python.</span>
<span class="comment-copy">I've spaces varying and even at some entries it is tab delimited data</span>
