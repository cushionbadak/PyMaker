<div class="post-text" itemprop="text">
<p>I need to transform a string containing single and double quotes and newline characters for use in a system call.  Consider the following input string:</p>
<pre><code>"""one'two\nthree"four"""
</code></pre>
<p>This should be transformed to the following output string:</p>
<pre><code>"$'one\'two\nthree\"four'"
</code></pre>
<p>So that it can be submitted as a message argument in a <code>git</code> commit command:</p>
<pre><code>git commit --message=$'one\'two\nthree\"four'
</code></pre>
<p>The odd syntax with the leading <code>$</code> and surrounding single quotes <code>'</code> is a bash construct described in the bash manpage in the section on quoting (search for QUOTING).  I have tried many python functions including <code>str.replace</code>, <code>re.sub</code>, <code>json.dumps</code>, <code>repr</code>, and <code>str.encode('unicode-escape')</code>.  But none have yielded the required transformation.  It seems that, in this case, python is too high-level for its own good.  Suggestions on how to proceed will be very gratefully received.</p>
<p>The system call itself will be made using code like this (omitting the <code>try</code> block for clarity):</p>
<pre><code>import subprocess
call = ["git", "commit", "--message", "'one\'two\nthree\"four'"]
cpi = subprocess.run(call)
</code></pre>
<p>I may also use a git library of some description, but I have not done my homework yet for that.</p>
<p><em>Note</em>: the unnecessary <code>$</code> character in the last item in the above <code>call</code> list has been removed. </p>
</div>
<div class="post-text" itemprop="text">
<p>Your wanted command is erroneous at the moment, it is not a valid Python string since a right <code>"</code> is missing, it should be:</p>
<pre><code>"$'one\'two\nthree\"four'"
</code></pre>
<p>This is easily constructed by a simple <code>.format</code> call:</p>
<pre><code>&gt;&gt;&gt; "$'{}'".format("""one'two\nthree"four""") == "$'one\'two\nthree\"four'"
True
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/shlex.html#shlex.quote" rel="nofollow noreferrer">shlex.quote</a></span>
<span class="comment-copy">@Jim Fasarakis-Hillard. Okay. I have done some trials using the <code>subprocess.run</code> call. Both my original input string and your reformatted string work (with the unnecessary <code>$</code> character removed)! It seems that the <code>subprocess</code> module is quite smart. I now have an answer to my question and this posting should be considered closed. Many thanks for your help.</span>
<span class="comment-copy">That's nice to hear, I had deleted my answer because me and sub-processing haven't gotten to know each other well, yet. I'll un-delete since it seems it does partially apply. Great to see it worked out for you.</span>
<span class="comment-copy">You don't need any further quoting with the list argument; the string containing the double and single quotes and newlines is passed directly to an <code>exec</code> function, bypassing the shell that would interpret the <code>$'...'</code> quoting.</span>
<span class="comment-copy">Hello Jim, I just worked out that the trailing <code>"</code> was missing. Many thanks for your answer, I now need some time to consider it.</span>
<span class="comment-copy">'$\'one\'two\nthree"four\'' ==  "$'one\'two\nthree\"four'"</span>
<span class="comment-copy">@RobbieMorrison There is <i>no rush</i> to accept an answer. You can do so tomorrow. Questions without an accepted answer get more views and answers (hence a higher chance of a better answer).</span>
<span class="comment-copy">Bakuriu is right, wait until you've found what you need, there's no rush. Those two strings are indeed equal, differing quotes don't mean they're different.</span>
<span class="comment-copy">I am having trouble with this commenting system. Try again! The string comparison holds true for python but the actual output from the <code>format</code> command is <code>'$\'one\'two\nthree"four\''</code> which is not what I need. The system call will require an output string <i>exactly</i> as I specified, with all <i>internal</i> quote characters singly escaped. Again python is being a little too smart here.</span>
