<div class="post-text" itemprop="text">
<p>How to write a python code so when you divide by 0 you get False.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can manipulate the <code>ZeroDivisionError</code> by using <code>try/except</code>:</p>
<pre><code>try:
    var = num/num2
except ZeroDivisionError:
    print False  
else:
    pass
</code></pre>
<p>You can try it <a href="https://repl.it/EzCI/0" rel="nofollow noreferrer">here</a>. If using this within a function, you could replace <code>print</code> with <code>return</code>. For example:</p>
<pre><code>def example(num, num2):
    try:
        solution = num/num2
    except ZeroDivisionError:
        return "False"
    else:
        return solution

print example(1, 0)
</code></pre>
<p>For length, you could use</p>
<pre><code>if denominator == 0:
    print False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Pls read how to use <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer"><code>try... except...</code></a>.</p>
<p>Something like.</p>
<pre><code> try:
    0/0
 except ZeroDivisionError:
    False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could write an if statement to return False.</p>
<pre><code>a = 5
b = 30
if a == 0:
    c = False
else:
    c = b / a
print c
</code></pre>
<p>Or you could define a function.</p>
<pre><code>def divide(b, a):
    if a == 0:
        return False:
    return b / a
</code></pre>
<p>Or you could use a try and catch block as outlined in other answers</p>
</div>
<div class="post-text" itemprop="text">
<p>Here are two short expressions which evaluate to either <code>a/b</code> or <code>False</code>, depending on whether or not <code>b == 0</code>. As expressions, they can be embedded as subexpressions of a larger expression:</p>
<p>1) <code>a/b if b != 0 else False</code></p>
<p>2) <code>b != 0 and a/b</code></p>
<p>The second one works because Python <code>and</code> returns the first component if the first component is falsey otherwise it returns the second component. </p>
</div>
<span class="comment-copy">Check the denominator before dividing and return <code>False</code> if it's 0</span>
<span class="comment-copy">Why the unaccept?</span>
<span class="comment-copy">Never write functions, that return in case of error simply another type as error mark. That's why exceptions exist.</span>
<span class="comment-copy">@Daniel It is just an example if the OP decides to use in a function not as a standalone functiob</span>
<span class="comment-copy">I though you can only use <code>return</code> for functions</span>
<span class="comment-copy">Of course, I depends on a task - return/print/yield/etc... Unfortunately autho didn't specify it properly. But if author understands the concept of <code>try... except</code>, he'll write correct code.</span>
<span class="comment-copy">This returns <code>None</code></span>
<span class="comment-copy">Somehow I doubt that OP understands the concept of <code>try...except</code>. This isn't the sort of question that anyone who knows even a small amount of Python asks.</span>
<span class="comment-copy">You are quite right, at a moment he has no such knowledge.  But he can obtain it in docs. Just to point  him to the right direction.</span>
<span class="comment-copy">Well, you need a <code>print</code> statement in your first program since nothing is outputted</span>
<span class="comment-copy">@PythonMaster I though that was trivial. But I added than just in case.</span>
