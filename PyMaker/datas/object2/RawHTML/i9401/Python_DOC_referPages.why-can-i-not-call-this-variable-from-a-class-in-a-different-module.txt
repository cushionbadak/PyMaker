<div class="post-text" itemprop="text">
<p>I've got this Tkinter thing going with Python 3.5.  I'm trying to pass the contents of an entry-box over to a different module so I can do something else with it.  I'm making the Tkinter window like this:</p>
<pre><code>import tkinter as tk

class GUI(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)

        tk.Label(self,text="Testers Name").grid()
        self.testers_name = tk.Entry(self,text="Testers Name").grid()
        tk.Label(self,text="Report Name").grid()
        self.report_name = tk.Entry(self,text="Report Name").grid()
        submitButton = tk.Button(self, text="Test Selected",command=self.query_checkbuttons)
        submitButton.grid()

    def query_checkbuttons(self):
       some_stuff_blah_blah_blah            


if __name__ == "__main__":

    gui = GUI()
    print(gui.report_name)
    gui.mainloop()
</code></pre>
<p>So, that works OK.  At least the <code>print</code> call in <code>__main__</code> reports <code>None</code> and not an error.</p>
<p>I have another module called pdf.py and that has a call in it that fails when I try to pull in <code>report_name</code> like this:</p>
<pre><code>def myFirstPage(canvas, doc):
    import gui 
    print(gui.report_name)
    canvas.saveState()
    canvas.setFont('Times-Bold',16)
    canvas.drawCentredString(PAGE_WIDTH/2.0, PAGE_HEIGHT-108, Title)
    canvas.setFont('Times-Roman',9)
    canvas.drawString(inch, 0.75 * inch, "First Page / %s" % pageinfo)
    canvas.restoreState()
</code></pre>
<p>I've tried everything I can think of.  Let's see, how about:</p>
<pre><code>print(gui.gui.report_name)
print(gui.report_name)
print(gui.report_name.get())
print(gui.GUI.report_name)
print(gui.GUI().report_name)
print(gui.GUI().report_name.get())
</code></pre>
<p>I've made <code>gui</code> global in and out of the <code>__main__</code> call.</p>
<p>I've done this in various places in pdf.py:</p>
<pre><code>import gui
from gui import *
from gui import gui
from gui import GUI
</code></pre>
<p>in conjunction with permutations of the last slew of calls...Nothing works.</p>
<p>I can print it find in its own module, but I can't get it to show up outside of there.  How do I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Not entirely sure but I guess that your issue is related to the following line</p>
<pre><code>if __name__ == "__main__":
</code></pre>
<p>meaning that your class <code>GUI</code> is not instantiated as can be seen in [0]. Moving the creation of the <code>GUI</code> class, that is using the following code snippet</p>
<pre><code>import tkinter as tk

class GUI(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)

        tk.Label(self,text="Testers Name").grid()
        self.testers_name = tk.Entry(self,text="Testers Name").grid()
        tk.Label(self,text="Report Name").grid()
        self.report_name = tk.Entry(self,text="Report Name").grid()
        submitButton = tk.Button(self, text="Test Selected",command=self.query_checkbuttons)
        submitButton.grid()

    def query_checkbuttons(self):
        some_stuff_blah_blah_blah            

gui = GUI()
print(gui.report_name)
gui.mainloop()
</code></pre>
<p>will at least allow you to import the variable <code>gui</code> from that module.</p>
<p>However, I strongly recommand to not instantiate the class at the end of the module because it is reinstantiated every time your import that module!</p>
<hr/>
<p><strong>EDIT1:</strong></p>
<p>I would do it as follows:</p>
<p><code>thiscode.py</code></p>
<pre><code>import tkinter as tk

class GUI(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)

        tk.Label(self,text="Testers Name").grid()
        self.testers_name = tk.Entry(self,text="Testers Name").grid()
        tk.Label(self,text="Report Name").grid()
        self.report_name = tk.Entry(self,text="Report Name").grid()
        submitButton = tk.Button(self, text="Test Selected",command=self.query_checkbuttons)
        submitButton.grid()

    def query_checkbuttons(self):
        some_stuff_blah_blah_blah            


def start_gui():
    gui = GUI()
    # print(gui.report_name)
    gui.mainloop()


if __name__ == "__main__":
    start_gui()
</code></pre>
<p>and then in <code>pdf.py</code></p>
<pre><code>def myFirstPage(canvas, doc):
    import gui
    gui.start_gui()  # --&gt; manually open up the gui after import &lt;--
    # print(gui.report_name)
    canvas.saveState()
    canvas.setFont('Times-Bold',16)
    canvas.drawCentredString(PAGE_WIDTH/2.0, PAGE_HEIGHT-108, Title)
    canvas.setFont('Times-Roman',9)
    canvas.drawString(inch, 0.75 * inch, "First Page / %s" % pageinfo)
    canvas.restoreState()
</code></pre>
<p>Now let me clarify that when you call <code>thiscode.py</code> via <code>python thiscode.py</code> you will end up with exactly one GUI being opened up. This is however not the case if you import the module as can be seen in <code>pdf.py</code>. Hence, we directly instantiate one GUI object via function invocation which must be done manually (see line 3 with the unmistakable inline comment in <code>pdf.py</code>).</p>
<hr/>
<p>[0] <a href="https://docs.python.org/3/tutorial/modules.html#executing-modules-as-scripts" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html#executing-modules-as-scripts</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The whole point of the <code>if __name__</code> block is to only execute its contents when that file is run directly, and not when it is imported. So if you <em>do</em> want to import the <code>gui</code> instance, you should not create it within that block.</p>
</div>
<span class="comment-copy">Having your variable have the same name as your module can be a bad idea sometimes.</span>
<span class="comment-copy">changed variable <code>gui</code> to <code>app</code> but still get the same error:  <code>Attribute Error: module 'gui' has no attribute 'app'</code></span>
<span class="comment-copy">No doubt!  That was another thing I had tried before, but like you said, when it's imported, another tkinter window opens up, which is no good.  I'm launching this program by calling <code>python thiscode.py</code> (the script you have shown), which had the <code>__main__</code> thing.  This, as you pointed out doesn't work, but what should I do to start the tkinter window but not reopen another one each time the module is imported in another module?</span>
<span class="comment-copy">Hey Brocolli Rob! I updated my answer, see my ** EDIT1**.</span>
<span class="comment-copy">Hi Thomas...This looks better, but GUI needs to be opened long before <code>pdf.py</code> is called...This still opens two istances of the GUI</span>
<span class="comment-copy">Hey @BrocolliRob you then might as well call the python script with the gui directly via <code>python thiscode.py</code> which will open up an instance of this gui. Further, it came to my mind that you could also use class attributes and methods in order to have one global GUI class.</span>
