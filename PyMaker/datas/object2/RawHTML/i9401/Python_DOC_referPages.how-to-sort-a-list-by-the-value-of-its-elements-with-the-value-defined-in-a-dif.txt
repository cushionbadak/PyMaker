<div class="post-text" itemprop="text">
<p>Lets say I have a game where the players are denoted by a unique number. Then, say I have a list with a bunch of randomly chosen players, called playerList. So, the list isn't ordered(this could represent a bunch of players signing up for some contest, for example). Then, I have a second list called playerLevel, where the i'th entry tells you the level the i'th player is on. </p>
<p>So, if playerLevel = ['X', 'Y', 'X', 'Z'], then players 1 and 3 are on level X, player 2 is on level Y, and player 4 is on level Z. </p>
<p>Using list comprehensions, how can I make a new list(lets call it samelevel) where the player numbers are sorted into sublists, based on the players being on the same level?</p>
<p>So, in this example, sameLevel = [[1,3],[2],[4]]</p>
<p>I'd like to do this in a way that looks elegant. Ideally, using a main loop that looks like "for element in playerLevel:" and so on. How can I do this? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't use a list-comprehension, per se, but this will do it:</p>
<pre><code>from collections import defaultdict
playerLevel = ['X', 'Y', 'X', 'Z']
sameLevel = defaultdict(list)
for idx, level in enumerate(playerLevel):
    sameLevel[level].append(idx)
print(sameLevel.values())
</code></pre>
<p>This results in <code>[[1], [0, 2], [3]]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use a dictionary instead of nested lists:</p>
<pre><code>In [1]: pLevels = ["X", "Y", "Z", "X"]

In [2]: from collections import defaultdict

In [3]: lvlPlayerMap = defaultdict(list)

In [4]: for (pID, lvl) in enumerate(pLevels): lvlPlayerMap[lvl].append(pID)

In [5]: lvlPlayerMap
Out[5]: defaultdict(list, {'X': [0, 3], 'Y': [1], 'Z': [2]})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">itertools.groupby</a></p>
<pre><code>import operator, itertools
players = random.choices('xyzdeftup', k=20)
level = operator.itemgetter(1)
player = operator.itemgetter(0)
players = sorted(enumerate(players), key = level)
groups = itertools.groupby(players, key = level)
#for level, group in groups:
#    print('{}:\n\t{}'.format(level, str(list(map(player, group)))))
result = [list(map(player, group)) for level, group in groups]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alternative implementation using <code>itertools.groupby</code> (wwii beat me to it). Funnily enough someone <a href="https://stackoverflow.com/questions/41411492/what-is-itertools-groupby-used-for">posted a question</a> about this exact function just a few hours ago.</p>
<p><strong>Code</strong></p>
<pre><code>import itertools

X = 5
Y = 10
Z = 15

PLAYER_LEVELS = [X, Y, X, Z]

def group_by_player_level(player_levels):
    def by_level(pair):
        return pair[1]

    sorted_levels = sorted(enumerate(player_levels), key=by_level)
    return [[i + 1 for (i, _) in g] for _, g in itertools.groupby(sorted_levels, key=by_level)]

if __name__ == '__main__':
    print(group_by_player_level(PLAYER_LEVELS))
</code></pre>
<p><strong>Output</strong></p>
<pre class="lang-none prettyprint-override"><code>[[1, 3], [2], [4]]
</code></pre>
</div>
<span class="comment-copy">take a look at itertools.groupby()</span>
<span class="comment-copy">Have you considered using dictionaries or a database instead of lists for you player info?</span>
<span class="comment-copy">Ha, great minds think alike</span>
<span class="comment-copy">Thanks for your answer! So, this works if I wanted the sameLevel list to include Every player (as playerLevel is defined for Every player in the game). However, I would like to make it so that sameLevel only has the players in playerList. Is there a way to edit this code to do that?</span>
<span class="comment-copy">@Zach you could change the for loop to instead be <code>for idx in playerList</code> and then add <code>level = playerLevel[idx]</code> directly after.</span>
<span class="comment-copy">That worked perfectly, thank you! Last question, can i search the dictionary by the players number? What I mean is, if I want to know all the players on the same level as player 0, is there some command I can use where I input 0 and it gives me [0,2]?</span>
<span class="comment-copy">You could do <code>[p for p in sameLevel if 0 in p]</code> and that will result in ``[[0, 2]]`, which is pretty close.</span>
