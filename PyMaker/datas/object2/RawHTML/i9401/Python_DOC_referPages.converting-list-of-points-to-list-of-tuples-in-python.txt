<div class="post-text" itemprop="text">
<p>I've just written some code to convert a list of points into a list of to/from tuples but it doesn't feel very efficient.</p>
<p>I was wondering if anyone had any suggestions to make this more concise?</p>
<pre><code>from_point, to_point = None, None
point_list = []

for p in [1, 5, 2, 4, 7, 9]:
    to_point = p
    if from_point and to_point:
        point_list.append((from_point, to_point))
    from_point = to_point

print(point_list)
</code></pre>
<p>Input: <code>[1, 5, 2, 4, 7, 9]</code></p>
<p>Output: <code>[(1, 5), (5, 2), (2, 4), (4, 7), (7, 9)]</code></p>
<p>Edit: Changed points to be non sequential.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can always use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>:</p>
<pre><code>&gt;&gt;&gt; p = [1, 5, 2, 4, 7, 9]
&gt;&gt;&gt; point_list = list(zip(p[:-1], p[1:]))
&gt;&gt;&gt; print(point_list)
[(1, 5), (5, 2), (2, 4), (4, 7), (7, 9)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An alternative one line solution</p>
<pre><code>input = [1, 2, 3, 4, 5, 6]
output = [(input[index], input[index+1]) for index in range(len(list)-1)]
print(output)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about this?</p>
<pre><code>x=[1, 5, 2, 4, 7, 9]
print [ tuple(x[i:i+2]) for i in xrange(len(x)-1) ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.pairwise" rel="nofollow noreferrer"><code>more_itertools</code></a>:</p>
<pre><code>import more_itertools as mit

list(mit.pairwise([1, 5, 2, 4, 7, 9]))
# [(1, 5), (5, 2), (2, 4), (4, 7), (7, 9)]
</code></pre>
</div>
<span class="comment-copy">Why do you test <code>if from_point and to_point</code>?</span>
<span class="comment-copy">@WillemVanOnsem To make sure I have valid to/from points before appending to the point_list. Without this the first point would be (None, 5)</span>
<span class="comment-copy">Oh, that's tight! Thanks!</span>
<span class="comment-copy">Since we care about efficiency, perhaps using <code>itertools.islice</code> instead of list slices would be best.</span>
