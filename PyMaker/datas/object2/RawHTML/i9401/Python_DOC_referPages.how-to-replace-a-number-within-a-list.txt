<div class="post-text" itemprop="text">
<p>In my programming class we have a practice problem where the objective is to replace the second of two consecutive numbers in a list with a zero, if the numbers are equal.</p>
<p><strong>For Example:</strong></p>
<p><code>def zeroDuplicates([1,5,2,7,7])</code> would output <code>[1,5,2,7,0]</code></p>
<p>However, when I attempt to do this, I always get an error.
What I have so far is the following:</p>
<pre><code>def zeroDuplicates(nums):
    count =0
    for n in nums:
        if n == nums[n-1]:
             nums.replace[n,0]
    return nums
</code></pre>
<p>Error message when I run this program:</p>
<pre><code>"Error: 'list' object has no attribute 'replace'"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>n</code> is an element in your example; not an index. Your program as pseudo-code would replace an element if it equals the element with index of its value minus 1. </p>
<p>Lets make your problem more definitive (robot friendly): you want to iterate from <code>1</code> to the length of the list, and if the current elements equals the previous, replace it with a zero.</p>
<p>Now lets translate from English to Python (we use <code>i</code> to indicate index):</p>
<pre><code>def zeroDuplicates (nums):
    for i in range(1, len(nums)):
         if nums[i] == nums[i-1]:
             nums[i] = 0
    return nums
</code></pre>
<hr/>
<p>Bonus: You can "pythonize" it using list comprehensions and zipping:</p>
<pre><code>def zeroDuplicates (nums):
    return [nums[0]] + [(0 if a == b else a) for a, b in zip(nums[1:], nums[:-1])]
</code></pre>
<p>(for every element and its successor, if they equal the successor equals 0, otherwise it will remain unchanged).</p>
</div>
<div class="post-text" itemprop="text">
<p>You have another problem that above code won't handle</p>
<p>What If the repeat value occurred not at index -1 place but much before that?</p>
<pre><code>values = [1,5,7,2,7,7]

values_added = set()
new_values = []

for val in values:
    if val in values_added:
        new_values.append(0)
    else:
        new_values.append(val)
        values_added.add(val)

print(values_added)

print(new_values)
</code></pre>
<p>output:</p>
<pre><code>{1, 2, 5, 7} # values_added
[1, 5, 7, 2, 0, 0] # new_values
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Note that your approach also wouldn't work if several values are identical, I would advise to create a new list so you don't compare to potentially changed values. I would recommend using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> which seems a perfect fit in this case:</p>
<pre><code>from itertools import groupby

res = []
for item, group in groupby([1,2,3,3,3,3,2,1]):
    identicals = list(group)
    # Append the item
    res.append(item)
    # Extend the list with x zeros where x is the number of successive duplicates
    res.extend([0] * (len(identicals) - 1))

&gt;&gt;&gt; res
[1, 2, 3, 0, 0, 0, 2, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try like this,</p>
<pre><code>def zero_duplicates(nums):
  items = []
  for item in nums:
      if item not in items:
          items.append(item)
      else:
          items.append(0)
  return items

vals = [1, 5, 2, 7, 7]
print zero_duplicates(vals)
</code></pre>
<p>Output:</p>
<pre><code>[1, 5, 2, 7, 0]
</code></pre>
<p><strong>Additional info:</strong></p>
<p>Function names should be lowercase, with words separated by underscores as necessary to improve readability.</p>
<p>mixedCase is allowed only in contexts where that's already the prevailing style (e.g. threading.py), to retain backwards compatibility.</p>
<p>Link: <a href="https://www.python.org/dev/peps/pep-0008/#function-names" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0008/#function-names</a></p>
</div>
<span class="comment-copy">What error do you get? Always include the exact error messages when asking a question.</span>
<span class="comment-copy">Note that <code>n</code> is not the index of the value but the value itself in your for loop.</span>
<span class="comment-copy">It says: "Error: 'list' object has no attribute 'replace'"</span>
<span class="comment-copy">You should also consider what your code should be doing when there are 3 repetitions, or maybe a repetition later down the list</span>
<span class="comment-copy">There are a few possible implementations, but the it might be worth defining the behavior of the fringe cases, such as triple values, or a double proceeded by a 0, etc</span>
<span class="comment-copy">I don't think that's what is asked because the OP explicitly states that "<i>the objective is to replace the second of two <b>consecutive</b> numbers in a list with a zero</i>"</span>
<span class="comment-copy">@MSeifert True.</span>
<span class="comment-copy">@AdemÖztaş That's not what I am looking for with this code. I need to know if a value has already been added to the list. For which I need to track what I have added to the list and what I haven't. Where as set(Values) will give me all unique values.</span>
