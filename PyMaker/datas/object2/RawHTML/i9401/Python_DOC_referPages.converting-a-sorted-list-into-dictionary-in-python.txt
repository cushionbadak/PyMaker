<div class="post-text" itemprop="text">
<p>I have a dictionary, say</p>
<p><code>{'name4': 380, 'name2': 349, 'name3': 290, 'name1': 294}</code></p>
<p>I have sorted the dictionary based on the values using the <code>sorted</code> method and the result is a list of tuples</p>
<p><code>[('name3', 290), ('name1', 294), ('name2', 349), ('name4', 380)]</code></p>
<p>But, when I try to convert this list of tuples back to dictionary, it's back again to the old structure:</p>
<p><code>{'name4': 380, 'name2': 349, 'name3': 290, 'name1': 294}</code></p>
<p>I want the sorted list to be made into dictionary as it is. I have used <code>dict()</code> and manually used for loop to assign the values. But it's again leading to the same result.</p>
<p>Could anyone help me on this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The keys in a dictionary are, because of the dictionary's underlying structure (hash map), unordered. You have to order the keys yourself when you iterate the keys (i.e. by doing <code>sorted(dict.keys())</code> or some other sorting method - if you want to sort by value, you still have to do that manually).</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using an unordered <code>dict</code> you could use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a> which remembers the the insertion order:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; odict = OrderedDict([('name3', 290), ('name1', 294), ('name2', 349), ('name4', 380)])
&gt;&gt;&gt; odict
OrderedDict([('name3', 290), ('name1', 294), ('name2', 349), ('name4', 380)])
</code></pre>
<p>It supports the same operations like a normal <code>dict</code> (from the documentation of OrderedDict):</p>
<blockquote>
<p>Return an instance of a dict subclass, supporting the usual dict methods. An OrderedDict is a dict that remembers the order that keys were first inserted. If a new entry overwrites an existing entry, the original insertion position is left unchanged. Deleting an entry and reinserting it will move it to the end.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can refer below code to print the sorted dictionary for the given data:</p>
<p>data = [('name3', 290), ('name1', 294), ('name2', 349), ('name4', 380)]</p>
<p>print(sorted(dict(data).items()))</p>
</div>
<span class="comment-copy">Dictionaries are not ordered (prior to Python 3.6), you may want to pass the sorted items to an <code>OrderedDict</code></span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/1867861/python-dictionary-how-to-keep-keys-values-in-same-order-as-declared">Python dictionary, how to keep keys/values in same order as declared?</a></span>
<span class="comment-copy">I would say that ordering the keys when iterating over the dict is probably not the best way.</span>
