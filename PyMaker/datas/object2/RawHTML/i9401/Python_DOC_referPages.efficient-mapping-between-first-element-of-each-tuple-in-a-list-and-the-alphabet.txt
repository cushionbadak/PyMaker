<div class="post-text" itemprop="text">
<p>I have a list of tuples of strings:</p>
<pre><code>lst = [('first', 'one'), ('second', 'two'), ('third', 'three'), ('fourth', 'four')]
</code></pre>
<p>I want to create a mapping between the first element of each tuple and the English alphabet lowercase characters:</p>
<ul>
<li><code>'first'</code> mapped to <code>'a'</code> </li>
<li><code>'second'</code> mapped to <code>'b'</code> </li>
<li><code>'third'</code> mapped to <code>'c'</code></li>
<li><code>'fourth'</code> mapped to <code>'d'</code></li>
</ul>
<p>I have tried the dictionary</p>
<pre><code>dct = {'first': 'a', 'second': 'b', 'third': 'c', 'fourth': 'd'}
</code></pre>
<p>but I was wondering if there was a more efficient approach which would create the list containing the first element of the tuples and the alphabet list and then iterate them to create the dictionary.</p>
<p>Also, for the alphabet characters, I have tried using <code>string.ascii_lowercase</code> but it gives the string not as a list of each character. </p>
<p>I am new with Python so excuse if the question above is basic. I would appreciate any example code for me to understand and learn.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3.6/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> and a dictionary <a href="https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries" rel="nofollow noreferrer">comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; from string import ascii_lowercase
&gt;&gt;&gt; lst = [('first', 'one'), ('second', 'two'), ('third', 'three'), ('fourth', 'four')]
&gt;&gt;&gt; {x[0]: y for x, y in zip(lst, ascii_lowercase)}
{'first': 'a', 'second': 'b', 'third': 'c', 'fourth': 'd'}
</code></pre>
<p>or if you want to do it in a more 'functional' way:</p>
<pre><code>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; {x: y for x, y in zip(map(itemgetter(0), lst), ascii_lowercase)}
{'first': 'a', 'second': 'b', 'third': 'c', 'fourth': 'd'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sure, you can achieve that using dictionary comprehension and using <code>string</code> library:</p>
<pre><code>from string import ascii_lowercase

{lst[i][0]: c for i, c in enumerate(ascii_lowercase)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import string 
lst = [('first', 'one'), ('second', 'two'), ('third', 'three'), ('fourth', 'four')]
alphabetList = [i for i in string.ascii_lowercase ]
dic = {lst[i] : alphabetList[i] for i in range(len(lst))}
print(dic)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may create your desired <code>dict</code> using <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> as:</p>
<pre><code>from string import ascii_lowercase
lst = [('first', 'one'), ('second', 'two'), ('third', 'three'), ('fourth', 'four')]

my_dict =  dict(zip(list(zip(*lst))[0], ascii_lowercase)) # in python 3
# In python 2, you may just do:
#     my_dict = dict(zip(zip(*lst)[0], ascii_lowercase))
</code></pre>
<p>OR, even better to use it with <a href="https://docs.python.org/2/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> as:</p>
<pre><code>my_dict = dict(zip(map(itemgetter(0), lst), ascii_lowercase))
</code></pre>
<p>Value hold by <code>my_dict</code> will be: </p>
<pre><code>{'first': 'a', 'second': 'b', 'third': 'c', 'fourth': 'd'} 
</code></pre>
<hr/>
<p><strong>Explanation:</strong></p>
<p>You were almost there. <code>string.ascii_lowercase</code> returns a string but you may iterate the string and access the item based on index <em>(same as you do with <code>list</code>)</em>. For example:</p>
<pre><code>my_alphas = string.ascii_lowercase

# Iterate the string, valid
for alpha in my_alphas:
    print alpha

# access based on index, valid
my_alphas[13]
</code></pre>
<p><em>As an additional piece of information even though you don't need this:</em> If you want to convert the <code>string</code> into <code>list</code>, you may type-cast it as:</p>
<pre><code>my_alpha_list = list(string.ascii_lowercase)
#  ^  will hold all the alphabets in the form of list
</code></pre>
</div>
<span class="comment-copy">Great answer. Could you please add a small explanation about the difference between the two ways in terms of efficiency and also explain the <code>map</code> and <code>itemgetter</code> functions?</span>
<span class="comment-copy">I hardly can explain them better than docs for <a href="https://docs.python.org/3.6/library/functions.html#map" rel="nofollow noreferrer"><code>map()</code></a> and <a href="https://docs.python.org/3.6/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>itemgetter()</code></a>. As for efficiency, the first version is going to be more efficient as it involves fewer function calls.</span>
<span class="comment-copy">I appreciate the explanation. However, I get a 'zip' object is not subscritable and in the interest of learning Python I would like to know why if you can figure it out. Thanks</span>
<span class="comment-copy">@Karim My bad. I haven't seen the Python 3 tag. In python 3, <code>zip</code> returns the object of <code>zip</code> type and you have to explicitly type-cast it to list in order to make it work. Updated the answer</span>
<span class="comment-copy">Thanks for the update. Could you also care add a small explanation of the <code>itemgetter</code> approach; why is it better and how it differs?</span>
