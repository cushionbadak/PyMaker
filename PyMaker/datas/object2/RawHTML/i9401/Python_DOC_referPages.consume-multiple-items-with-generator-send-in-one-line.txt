<div class="post-text" itemprop="text">
<p>Is there an idiom to directly feed a list/generator to a generator?</p>
<pre><code>lst = [1, 2, 3]
it = my_gen()
next(it)
# can do without i ?
for i in lst:
  it.send(i)
</code></pre>
<p>UPD:
Is it possible to chain lst with it in one line, removing <code>for</code> and <code>i</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p>this is a way to do that using <a href="https://docs.python.org/3/library/functions.html?highlight=map#map" rel="nofollow noreferrer"><code>map</code></a> and <a href="https://docs.python.org/3/library/collections.html?highlight=collections#collections.deque" rel="nofollow noreferrer"><code>deque</code></a> to consume the iterator (explanation here: <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools consume recipie</a>)
:</p>
<pre><code>from collections import deque

def my_gen():
    data = ''
    while data is not None:
        print(data)
        data = yield data
    print(data)
    yield data

lst = [1, 2, 3]
it = my_gen()
next(it)  # priming the generator still needs to be done

deque(map(it.send, lst), maxlen=0)
</code></pre>
</div>
<span class="comment-copy">Sorry for misunderstanding. Updated the question. This is not about nature of data being send, but about if we can do "for" (and maybe priming) in a standard function?</span>
