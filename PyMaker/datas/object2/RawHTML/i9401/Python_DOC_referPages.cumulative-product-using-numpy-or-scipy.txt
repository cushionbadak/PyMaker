<div class="post-text" itemprop="text">
<p>I have a 1-D numpy array that I wish to convert it to its cumulative product. A naive implementation would be this: </p>
<pre><code>import numpy as np
arr = [1,2,3,4,5,6,7,8,9,10]
c_sum = [np.prod(arr[:i]) for i in range(1, len(arr) + 1)]
# c_sum = [1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]
</code></pre>
<p>However this could get slow when the size of <code>arr</code> gets very large. I suspect that there might be a more efficient way using one of the <code>Numpy</code> or <code>Scipy</code> array magics. Can someone show me how to do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.cumprod.html" rel="nofollow noreferrer"><code>numpy.cumprod</code></a>:</p>
<pre><code>&gt;&gt;&gt; np.cumprod(arr)
array([      1,       2,       6,      24,     120,     720,    5040,
         40320,  362880, 3628800], dtype=int32)
</code></pre>
<hr/>
<p>Just in case you don't want to use numpy and you would rather stay in pure python (perhaps because you want pythons unlimited precision integers and don't care too much about speed) you could also use <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a>:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; import operator

&gt;&gt;&gt; list(itertools.accumulate(arr, operator.mul))
[1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]
</code></pre>
<p>Note: The <code>itertools.accumulate</code> function requires python3.</p>
</div>
<div class="post-text" itemprop="text">
<p>Someone has already suggested <code>np.cumprod</code>. If you'd like a way to do this from scratch:</p>
<pre><code>L = [1,2,3,4,5,6,7,8,9,10]
answer = []
curr = 1
for i in L:
    curr *= i
    answer.append(curr)
</code></pre>
<p>Output:</p>
<pre><code>In [33]: answer
Out[33]: [1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]
</code></pre>
</div>
<span class="comment-copy">First google hit for "numpy cumulative product": <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.cumprod.html" rel="nofollow noreferrer">the documentation</a>.</span>
<span class="comment-copy">Wow I feel so embarrassed. I googled using some other keywords and couldn't find a thing. Thank you very much!</span>
<span class="comment-copy">This approach scales poorly because you are taking a <b>slice</b> of <code>arr</code> each iteration, which makes a <i>copy</i>, an then taking the product of that slice. Note, you are repeating yourself very frequently. Even a naive implementation using a for-loop and <code>arr.append</code> would be faster and scale much better.</span>
