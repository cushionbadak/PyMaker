<div class="post-text" itemprop="text">
<p>I would like to run a series of commands (which take a long time). But I do not want to wait for the completion of each command. How can I go about this in Python?</p>
<p>I looked at </p>
<pre><code>os.fork()
</code></pre>
<p>and </p>
<pre><code>subprocess.popen()
</code></pre>
<p>Don't think that is what I need.</p>
<p>Code</p>
<pre><code>def command1():
   wait(10)

def command2():
   wait(10)

def command3():
   wait(10)
</code></pre>
<p>I would like to call</p>
<pre><code>command1()
command2()
command3()
</code></pre>
<p>Without having to wait.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use python's multiprocessing module.</p>
<pre><code>def func(arg1):
    ... do something ...

from multiprocessing import Process
p = Process(target=func, args=(arg1,), name='func')
p.start()
</code></pre>
<p>Complete Documentaion is over here: <a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow noreferrer">https://docs.python.org/2/library/multiprocessing.html</a></p>
<p>EDIT:</p>
<p>You can also use the Threading module of python if you are using jpython/cpython distribution as you can overcome the GIL (Global Interpreter Lock) in these distributions.</p>
<p><a href="https://docs.python.org/2/library/threading.html" rel="nofollow noreferrer">https://docs.python.org/2/library/threading.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The most straightforward way is to use Python's own <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">multiprocessing</a>:</p>
<pre><code>from multiprocessing import Process

def command1():
   wait(10)
...

call1 = Process(target=command1, args=(...))
call1.start()
...
</code></pre>
<p>This module was introduced back exactly to ease the burden on controlling external process execution of functions accessible in the same code-base Of course, that could already be done by using os.fork, subprocess. Multiprocessing emulates as far as possible,  Python's own <code>threading</code> moudle interface. The one immediate advantage of using multiprocessing over threading is that this enables the various worker processes to make use of different CPU cores, actually working in parallel - while threading, effectively, due to language design limitations is actually limited to a single execution worker at once, thus making use of a single core even when several are available.</p>
<p>Now, note that there are still peculiarities - specially if you are, for example, calling these from inside a web-request.  Check this question an answers form a few days ago:
<a href="https://stackoverflow.com/questions/41448182/stop-a-background-process-in-flask-without-creating-zombie-processes/41448854#41448854">Stop a background process in flask without creating zombie processes</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This example maybe is suitable for you:</p>
<pre><code>#!/usr/bin/env python3

import sys
import os
import time

def forked(fork_func):
    def do_fork():
        pid = os.fork()
        if (pid &gt; 0): 
            fork_func()
            exit(0)
        else:
            return pid
    return do_fork

@forked
def command1():
    time.sleep(2)

@forked
def command2():
    time.sleep(1)

command1()
command2()
print("Hello")
</code></pre>
<p>You just use decorator <code>@forked</code> for your functions.</p>
<p>There is only one problem: when main program is over, it waits for end of child processes.</p>
</div>
<span class="comment-copy">You could use <a href="https://docs.python.org/3/library/asyncio-subprocess.html" rel="nofollow noreferrer">asyncio subprocess</a>, if you're using Python 3.4+</span>
<span class="comment-copy">If your commands are python functions, you can consider threads: <a href="https://docs.python.org/2/library/threading.html" rel="nofollow noreferrer">docs.python.org/2/library/threading.html</a> . It also depends of what you mean by "I do not want to wait"</span>
<span class="comment-copy">Well ... just remove the "wait" ... sorry. :) Have you looked into <code>multiprocessing</code>? You could start a process for every command. The default documentation explains this pretty well.</span>
<span class="comment-copy">@z0rberg's hahahahah! But that would include executing an "external" python script right ?</span>
<span class="comment-copy">@doomyster thanks - taking a look. I mean, I just want to start execution of the method and carry on.</span>
<span class="comment-copy">You should fix/clarify your sentence about the GIL.</span>
<span class="comment-copy">That is a nice example but it is really just starting to re-invent the wheel on what Python's multiprocessing does  - and if you open the documentation for it, you will find out there are a Lot of things to make it work properly. Starting from the fact that <code>os.fork</code> do not work on Windows platform.</span>
<span class="comment-copy">But yes, you've got a very nice and simple example there.  Thanks anyway.</span>
<span class="comment-copy">I know about multiprocessing module. Only one it gives is cross-platform. Author asked exactly about launching functions with minimal syntax in call time. This way gives it. There is possibility to write code with <code>multiprocessing</code> features inside <code>do_fork()</code>, and it's better, i agree. But my idea is using decorators for light syntax, it isn't <code>os.fork()</code> or <code>multiprocess.Process()</code>.</span>
