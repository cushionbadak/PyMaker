<div class="post-text" itemprop="text">
<p>Currently trying to check the stock of a size small on this <a href="http://bungiestore.com/collections/featured/products/iron-lords-t-shirt-men" rel="nofollow noreferrer">PAGE</a> (which is 0) but specifically retrieve the inventory of a size small from this data:</p>
<pre><code>&lt;script&gt;
(function($) { 
  var variantImages = {},
    thumbnails,
    variant,
    variantImage;





       variant = {"id":18116649221,"title":"XS","option1":"XS","option2":null,"option3":null,"sku":"BGT16073100","requires_shipping":true,"taxable":true,"featured_image":null,"available":true,"name":"Iron Lords T-Shirt - XS","public_title":"XS","options":["XS"],"price":2499,"weight":136,"compare_at_price":null,"inventory_quantity":16,"inventory_management":"shopify","inventory_policy":"deny","barcode":""};
       if ( typeof variant.featured_image !== 'undefined' &amp;&amp; variant.featured_image !== null ) {
         variantImage =  variant.featured_image.src.split('?')[0].replace('http:','');
         variantImages[variantImage] = variantImages[variantImage] || {};



           if (typeof variantImages[variantImage]["option-0"] === 'undefined') {
             variantImages[variantImage]["option-0"] = "XS";
           }
           else {
             var oldValue = variantImages[variantImage]["option-0"];
             if ( oldValue !== null &amp;&amp; oldValue !== "XS" )  {
               variantImages[variantImage]["option-0"] = null;
             }
           }

       }










       variant = {"id":18116649285,"title":"Small","option1":"Small","option2":null,"option3":null,"sku":"BGT16073110","requires_shipping":true,"taxable":true,"featured_image":null,"available":false,"name":"Iron Lords T-Shirt - Small","public_title":"Small","options":["Small"],"price":2499,"weight":159,"compare_at_price":null,"inventory_quantity":0,"inventory_management":"shopify","inventory_policy":"deny","barcode":""};
       if ( typeof variant.featured_image !== 'undefined' &amp;&amp; variant.featured_image !== null ) {
         variantImage =  variant.featured_image.src.split('?')[0].replace('http:','');
         variantImages[variantImage] = variantImages[variantImage] || {};



           if (typeof variantImages[variantImage]["option-0"] === 'undefined') {
             variantImages[variantImage]["option-0"] = "Small";
           }
           else {
             var oldValue = variantImages[variantImage]["option-0"];
             if ( oldValue !== null &amp;&amp; oldValue !== "Small" )  {
               variantImages[variantImage]["option-0"] = null;
             }
           }

       }
</code></pre>
<p>How can I tell python to locate the <code>&lt;script&gt;</code> tag and then the specific <code>"inventory_quantity":0</code> to return the stock of the product for a size Small? </p>
</div>
<div class="post-text" itemprop="text">
<p>Both the current answers don't address the problem of locating the <code>inventory_quantity</code> by the desired size which is not straightforward at the first glance.</p>
<p>The idea is to not dive into string parsing too much, but extract the complete <code>sca_product_info</code> JS array into the Python list via <a href="https://docs.python.org/3/library/json.html#json.loads" rel="nofollow noreferrer"><code>json.loads()</code></a>, then filter the list by the desired size. Of course, we should first locate the desired JS object - for this we'll use a regular expression - remember, this is not HTML parsing at this point and doing that with a regular expression is pretty much okay - this <a href="https://stackoverflow.com/a/1732454/771848">famous answer</a> does not apply in this case.</p>
<p>Complete implementation:</p>
<pre><code>import json
import re

import requests


DESIRED_SIZE = "XS"

pattern = re.compile(r"freegifts_product_json\s*\((.*?)\);", re.MULTILINE | re.DOTALL)

url = "http://bungiestore.com/collections/featured/products/iron-lords-t-shirt-men"
response = requests.get(url)

match = pattern.search(response.text)

# load the extracted string representing the "sca_product_info" JS array into a Python list
product_info = json.loads(match.group(1))

# look up the desired size in a list of product variants
for variant in product_info["variants"]:
    if variant["title"] == DESIRED_SIZE:
        print(variant["inventory_quantity"])
        break
</code></pre>
<p>Prints <code>16</code> at the moment.</p>
<p>By the way, we could have also used a JavaScript parser, like <a href="https://pypi.python.org/pypi/slimit" rel="nofollow noreferrer"><code>slimit</code></a> - here is a sample working solution:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/25111752/extracting-text-using-beautifulsoup-in-python">Extracting text from script tag using BeautifulSoup in Python</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>you can find it using regex:</p>
<pre><code>s = 'some sample text in which "inventory_quantity":0 appears'
occurences = re.findall('"inventory_quantity":(\d+)', s)
print(occurences[0])
'0'
</code></pre>
<hr/>
<p>edit:
I suppose you can get the whole content of <code>&lt;script&gt;...&lt;/script&gt;</code> in a variable <code>t</code> (either <code>lxml</code>, <code>xml.etree</code>, <code>beautifulsoup</code> or simply <code>re</code>).</p>
<p>before we start, let's define some variables:</p>
<pre><code>true = True
null = None
</code></pre>
<p>then using regex find a dictionary as text and convert to <code>dict</code> via <code>eval</code> </p>
<pre><code>r = re.findall('variant = (\{.*}?);', t)

if r:
    variant = eval(r)
</code></pre>
<p>This is what you get:</p>
<pre><code>&gt;&gt;&gt; variant
{'available': True,
 'barcode': '',
 'compare_at_price': None,
 'featured_image': None,
 'id': 18116649221,
 'inventory_management': 'shopify',
 'inventory_policy': 'deny',
 'inventory_quantity': 16,
 'name': 'Iron Lords T-Shirt - XS',
 'option1': 'XS',
 'option2': None,
 'option3': None,
 'options': ['XS'],
 'price': 2499,
 'public_title': 'XS',
 'requires_shipping': True,
 'sku': 'BGT16073100',
 'taxable': True,
 'title': 'XS',
 'weight': 136}
</code></pre>
<p>Now you can easily get any information you need.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you can get the block of code into a string format, and assuming the format of the code doesn't change too much, you could do something like this:</p>
<pre><code>before = ('"inventory_quantity":')
after = (',"inventory_management"')

start = mystr.index(before) + len(before)
end = mystr.index(after)

print(mystr[start:end])
</code></pre>
</div>
<span class="comment-copy">Thank you, not too familiar with json but how did you determine the <code>freegifts_product_json</code> to be the pattern to start grouping with?</span>
<span class="comment-copy">@ColeWorld I've inspected the script contents and created the pattern to extract the desired object that would also be loadable via <code>json</code>.</span>
<span class="comment-copy">@ColeWorld the idea looks similar, of course, but you'll have to adjust the regular expression. Hope that helps.</span>
<span class="comment-copy">How could I specify what size "Medium" or "small" shirt this would retrieve inventory for?</span>
<span class="comment-copy">My suggestion in edited reply.</span>
