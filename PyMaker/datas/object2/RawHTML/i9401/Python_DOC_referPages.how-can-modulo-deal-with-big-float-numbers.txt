<div class="post-text" itemprop="text">
<p>Hey i'm trying to use modulo with big float numbers but python don't seems to like those big numbers. My goal is to check if the division of 2 integers give me an integer or not (so if <code>division_result%1 == 0</code> or not)</p>
<p><strong>Example:</strong></p>
<pre><code>x = 3**2
x = x+0.3
x%1
</code></pre>
<blockquote>
<pre><code>result = 0.3000000000000007 | expected = 0.3
</code></pre>
</blockquote>
<pre><code>x = 3**199
x = x+0.3
x%1
</code></pre>
<blockquote>
<pre><code>result = 0.0 |expected = 0.3
</code></pre>
</blockquote>
<p>How can I improve the precision of the result / or find a clever way to check if the division give me an integer?</p>
</div>
<div class="post-text" itemprop="text">
<p>For integers <code>x</code> and <code>y</code>, the fraction <code>y/x</code> is an integer if and only if <code>y % x == 0</code>.  As long as <code>x</code> and <code>y</code> are integers, you don't have to worry about floating point errors or special numerical classes or anything.  Just make sure that <code>x</code> and <code>y</code> are actually represented as integers and not floats.  And since python can handle large integers, this works for integers longer than 64 bits, e.g:</p>
<pre><code>&gt; x = 17**100
&gt; y = 17**200    
&gt; y % x
0
&gt; (y + 1) % x
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>not all fractions can be <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">represented exactly as floats</a>. your approach will therefore not work (as expected).</p>
<p>what you might try is the <a href="https://docs.python.org/3/library/fractions.html?highlight=fractions#module-fractions" rel="nofollow noreferrer"><code>fractions</code></a> module:</p>
<pre><code>from fractions import Fraction

print(repr(Fraction(25, 5)))  # Fraction(5, 1)
</code></pre>
<p>this a way you could use <code>Fraction</code>:</p>
<pre><code>def div_result_int(a, b):

    f = Fraction(a, b)
    return f.denominator == 1

print(div_result_int(a=25, b=5))  # True
print(div_result_int(a=25, b=3))  # False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another option is the <code>decimal</code> module.</p>
<p>With your first example:</p>
<pre><code>import decimal
x = decimal.Decimal('9.3')
x % 1
</code></pre>
<p>and the result will be <code>Decimal('0.3')</code></p>
<p>With the second example, you would need to set the precision to 50:</p>
<pre><code>decimal.getcontext().prec = 50
x = decimal.Decimal('171792506910670443678820376588540424234035840667.3')
</code></pre>
<p>again, the result of <code>x % 1</code> would be <code>Decimal('0.3')</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can just use <a href="https://docs.python.org/2/library/stdtypes.html#float.is_integer" rel="nofollow noreferrer"><code>float.is_integer()</code></a> to test for real or natural number value:</p>
<pre><code>&gt;&gt;&gt; x=3**23
&gt;&gt;&gt; y=3**299
&gt;&gt;&gt; res=x/y
&gt;&gt;&gt; res
2.0631637441810574e-132
&gt;&gt;&gt; res.is_integer()
False
&gt;&gt;&gt; res=4.0000000000004
&gt;&gt;&gt; res.is_integer()
False
&gt;&gt;&gt; res=4.000
&gt;&gt;&gt; res.is_integer()
True
</code></pre>
</div>
<span class="comment-copy">Read about <a href="https://en.wikipedia.org/wiki/Floating_point" rel="nofollow noreferrer">floating point representation</a>. With large enough floating point numbers there is not enough precision to track all the digits, hence the incorrect result.</span>
