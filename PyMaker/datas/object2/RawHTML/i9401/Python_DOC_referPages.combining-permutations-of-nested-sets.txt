<div class="post-text" itemprop="text">
<p>I have 2 sets of sets, I need to get all permutations of their combination (as in union) into a single set such that no 2 sets within it contains duplicate elements (you can assume each parent set doesn't have sets with duplicate elements itself), while I can remove only the 2nd level sets, not the elements themselves, for example those:</p>
<pre><code>[(a,b),(c),(d)] and [(a),(b,c),(e)]
</code></pre>
<p>would get me:</p>
<pre><code>[(a,b),(c),(d),(e)],[(a),(b,c),(d),(e)],[(a),(c),(d),(e)]
</code></pre>
<p>one set from one parent set could give me a subset of sets from the other parent set that are incompatible (i.e. contain one or more common elements), keeping each of those in the second set would give me a new subset of sets that I can remove from the first and so on.. running this recursively and checking for repetitions is pretty time intensive...</p>
<p>is there a better way to approach this ? what tools I can use ? (currently doing this in python)</p>
<p>P.S. a small code example of what I mean, again, I'm not looking to fix bugs, just asking for a neater approach:</p>
<pre><code>def combine(S1, S2, incompatible_set, parent_set_pairs):

    new_S2 = None
    new_incompatible_sets = set()

    for s2 in S2:
        if incompatible_set &amp; s2:
            new_incompatible_sets.add(s2)
            if not S2:
                S2 = S2.copy()
            new_S2.remove(s2)
    parent_set_pairs.add((S1, new_S2)) # here it should look for a new incompatible set in S1 and apply the function again..
    for new_incompatible_set in new_incompatible_sets:
        new_parent_set_pairs = combine(S2, S1, new_incompatible_set,
                                 parent_set_pairs)
        for pair1 in new_parent_set_pairs:
            for pair2 in parent_set_pairs:
                if pair1[0]|pair1[1] not in pair2[0]|pair2[1]
            parent_set_pairs.add(new_parent_set_pairs)

    return parent_set_pairs
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is an itertools-based approach which takes two lists of disjoint sets and returns all maximal combinations of disjoints sets drawn from the two lists subject to the constraint that the sets in the combinations are disjoint:</p>
<pre><code>from itertools import combinations

def maxDisjoints(A,B):
    n = len(A)
    combos = set()
    for i in range(n+1):
        for partA in combinations(A,i):
            A_covered = set().union(*partA)
            filteredB = [s for s in B if A_covered &amp; s == set()]
            B_covered = set().union(*filteredB)
            filteredA = [s for s in A if B_covered &amp; s == set()]
            #filteredA is a superset of partA
            #freeze and record:
            combos.add(tuple(frozenset(s) for s in filteredA + filteredB))
    #unfreeze and return as list of lists of sets:       
    return [[set(f) for f in t] for t in combos]
</code></pre>
<p>To test it:</p>
<pre><code>A = [{'a','b'},{'c'},{'d'}]
B = [{'a'},{'b','c'},{'e'}]
for p in jointPartitions(A,B):
    print(p)
</code></pre>
<p>Output:</p>
<pre><code>[{'c'}, {'d'}, {'a'}, {'e'}]
[{'d'}, {'a'}, {'b', 'c'}, {'e'}]
[{'b', 'a'}, {'c'}, {'d'}, {'e'}]
</code></pre>
<p>As a technical annoyance, neither sets nor lists are hashable so it is impossible to maintain a set of lists of sets to filter out redundancies (since the algorithm generates the same maximal combinations more than once). Thus I had to turn the lists of sets into tuples of frozen sets to temporarily record them, only to reverse the process at the end. </p>
<p>This is a brute-force approach. It iterates through all 2^n subsets of <code>A</code>, extending each one to a maximal combination in the only way possible. If there is a discrepancy between the size of A and the size of B, pass the shorter of the two lists first (or tweak the code so that it does this automatically). This approach is reasonable for smallish collections but won't scale well. I suspect that the problem itself is NP-hard, so there is a limit to how much efficiency you can expect (which isn't to say that this algorithm is optimal).</p>
</div>
<span class="comment-copy">Please show us your actual code attempts (at least one) and state if your code doesn't work or if it works and is just too slow. And your example output does not include <i>all</i> such permutations of your sample input. Did you leave out a requirement, such as some kind of maximality? Also, are you guaranteed that each of your two starting sets of sets contain disjoint sets, as in your example?</span>
<span class="comment-copy">The code itself is pretty long and contains many irrelevancies, I'll add a simplified version, I actually wrote the example manually, which output did I miss here ? Yes, the inner sets of each parent set are supposed to be disjoint (as they supposed to be a product of the same operation..)</span>
<span class="comment-copy">You should fix the indentation of the code you posted. Every line should have an extra four spaces at the beginning for correct formatting.</span>
<span class="comment-copy">have a look in the module <code>itertools</code>. Documentation <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">For your sample data I count 32 ways to draw sets from the first list and sets from the second list so that the chosen sets are pairwise disjoint. Could you please answer the question of @RoryDaulton : "Did you leave out a requirement, such as some kind of maximality?"</span>
<span class="comment-copy">I got kind of fixated on removing intersecting sets from the two "lists" rather than adding disjoint sets to a new one,mostly because there are more disjoint sets in my application of this,it looks less messy,even if not much better in terms of complexity.About the code-isn't <code>partA==filteredA</code>?You just unpacked it and packed it again or am I missing something?Isn't <code>return combos</code> never executed?Also thought maybe if you first unpack A and B into the elements,find the intersecting ones,then work only with the sets from both lists that contain them, saving the effort of going through all sets</span>
<span class="comment-copy">can't vote you up yet so thanks for the go..</span>
<span class="comment-copy">@DmitryAtlasman <code>return combos</code> was a leftover from an earlier version of the code (before I fixed the redundancy problem). There is no reason to think that <code>partA == filteredA</code>. I first find all of the sets in B which are disjoint from <code>partA</code> but if I stop there it might violate the maximality condition -- <code>filteredA</code> extends <code>partA</code> by any set in <code>A</code> that is also disjoint from <code>filteredB</code>. For example, when <code>partA = ({'a', 'b'}, {'c'})</code> then <code>filteredA</code> extends it by adding <code>{d}</code>. You can't upvote yet, but you can mark the answer as accepted -- or hold out for a possibly better answer.</span>
<span class="comment-copy">@DmitryAtlasman If you want to get abstract -- this way that I go from <code>partA</code> to <code>filteredB</code> establishes a <code>Galois connection</code> (<a href="https://en.wikipedia.org/wiki/Galois_connection" rel="nofollow noreferrer">en.wikipedia.org/wiki/Galois_connection</a> ) between the power set of A and the power set of B. Galois connections give rise to closure operators. <code>filteredA</code> is the Galois closure of <code>partA</code></span>
