<div class="post-text" itemprop="text">
<p>I am trying to parse a file like this:</p>
<pre><code>while (true){
    print("hello world")
}
</code></pre>
<p>while this is not Python syntax, i am using python for the parsing.
My code is:</p>
<pre><code>        words = []
        for line in lines: #line holds array of the above lines
            words += re.sub("[\s]", " ", line).split()
</code></pre>
<p>my result is:</p>
<pre><code>['while', '(true){', 'print("hello', 'world")', '}']
</code></pre>
<p>which is cool since I only used re with a [\s] regex, but how would I get a result like this:</p>
<pre><code>['while', '(', 'true', ')', '{'....]
</code></pre>
<p>Where I get all symbols (lets assume I have a string that contains them one after the other, for example symbols = '(){}:,=+-') ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer">re.split</a> with a group to get the split text and the split characters.</p>
<p>For instance, a symbol can be matched with the <code>r'\W+'</code> RegEx.</p>
<p>Here is an example:</p>
<pre><code>import re

code = """\
while (true){
    print("hello world")
}
"""

for line in code.splitlines():
    print(re.split(r"(\W+)", line))
</code></pre>
<p>You'll get:</p>
<pre><code>['', '    ', 'while', ' (', 'true', '){', '']
['', '        ', 'print', '("', 'hello', ' ', 'world', '")', '']
['', '    }', '']
['', '    ', '']
</code></pre>
<p>With a filtering, you can drop empty stringâ€¦</p>
<p>Or, if you need to match one-character symbols, you cantry:</p>
<pre><code>for line in code.splitlines():
    tokens = [token for token in re.split(r"(\W)", line) if token.strip()]
    print(tokens)
</code></pre>
<p>You get:</p>
<pre><code>['while', '(', 'true', ')', '{']
['print', '(', '"', 'hello', 'world', '"', ')']
['}']
[]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>import re

re1 = r'(.?)([(){}:,=+-]{1})(.?)'

lines = '''
while (true){
    print("hello world")
}
'''

words = []
for line in lines.split('\n'): #line holds array of the above lines
    cleanLine = re.sub(re1, '\g&lt;1&gt; \g&lt;2&gt; \g&lt;3&gt;', line)
    words += re.sub("[\s]", " ", cleanLine).split()}

print(words)
# ['while', '(', 'true', ')', '{', 'print', '(', '"hello', 'world"', ')', '}']
</code></pre>
</div>
<span class="comment-copy">Have you stopped to consider whether regex is the best approach to trying to parse this?</span>
<span class="comment-copy">What you are trying to achieve is unclear. For what reason you want to obtain: <code>'print', '(', '"', 'hello', 'world', '"', ')'</code> and not <code>'print', '(', '"', 'hello world', '"', ')'</code> or something else? And what is the result when the code contains a comparator like <code>==</code>? If you want to tokenize a code source, you should use a dedicated parser.</span>
<span class="comment-copy">I have, but I thought regex can be easier and I wanted to see if there is a way to work it out with regex. I am open minded to any solution though! @jonrsharpe</span>
<span class="comment-copy">Yes, use a dedicated parser. What language are you parsing? There is almost certainly a FOSS solution.</span>
<span class="comment-copy">@NealEhardt I am parsing a made up language for practicing my python skills, a dedicated parser is something I rather not use, since I want to investigate regex a little. I hope it is legitimate :)</span>
<span class="comment-copy">Thanks for the answer, but it is not good enough since you get '){' instead of ')', '{' .. can your solution be optimized to achieve that?</span>
<span class="comment-copy">@Sharonica See my edit</span>
<span class="comment-copy">Thanks!! it works</span>
<span class="comment-copy">@Laurent LAPORTE are you sure that the "edit" privilege is for add or change the answer as you did here?... that privilege should not be only for moderation, formatting and so?</span>
<span class="comment-copy">It's a website bug. I fix that</span>
