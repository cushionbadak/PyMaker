<div class="post-text" itemprop="text">
<p>I am currently participating in an Udacity course that instructs students on programming using Python. One of the projects has students rename photo files (remove any numbers in the name) in a directory in order to have the files arranged alphabetically, after which a secret message will be spelled out. For instance, if a file name is <code>"48athens"</code>, the program seeks to remove the numbers, leaving only <code>"athens"</code> as the file name.</p>
<p>I am using Python 3.6, while the course instructor is using Python 2.7. I should likely be using Python 2.7 so as to simplify the learning process. However, for now I will keep using Python 3.6.</p>
<p>The way in which the instructor has the files renamed is using the <code>.translate</code> function, which takes two arguments in Python 2.x, while Python 3.x only takes one argument. It removes any numbers (0 through 9) from the file names.</p>
<pre><code>import os

def rename_files(): #Obtain the file names from a folder.
    file_list = os.listdir(r"C:\Users\Dennis\Desktop\OOP\prank\prank")
    print (file_list)
    saved_path = os.getcwd()
    os.chdir(r"C:\Users\Dennis\Desktop\OOP\prank\prank")
    for file_name in file_list: #Rename the files inside of the folder.
        os.rename(file_name, file_name.translate(None, "0123456789"))
    os.chdir(saved_path)

rename_files()
</code></pre>
<p>However, this does not work in Python 3.x, as it says that:</p>
<pre><code>TypeError: translate() takes exactly one argument (2 given)
</code></pre>
<p>Thankfully, I found another way using someone's assistance. However, I'm not really sure how it works. Can someone explain the <code>str.maketrans</code> function to me, and what the first two blank arguments in quotes are for? My thought is that it's saying: for the first two characters in the file name, remove any numbers (0 through 9). Is that correct? For instance, in <code>"48athens"</code>, remove the first two characters (4 and 8) if they are numbers between 0 and 9.</p>
<pre><code>import os

def rename_files(): #Obtain the file names from a folder.
    file_list = os.listdir(r"C:\Users\Dennis\Desktop\OOP\prank\prank")
    print (file_list)
    saved_path = os.getcwd()
    os.chdir(r"C:\Users\Dennis\Desktop\OOP\prank\prank")
    for file_name in file_list: #Rename the files inside of the folder.
        os.rename(file_name, file_name.translate(str.maketrans('','','0123456789')))
    os.chdir(saved_path)

rename_files()
</code></pre>
<p><strong>My Understanding of the Documentation:</strong></p>
<blockquote>
<p><code>static str.maketrans(x[, y[, z]])</code> 
  This static method returns a translation table usable for <code>str.translate()</code>.</p>
</blockquote>
<p>It's saying that the arguments passed to <code>str.maketrans</code>, along with the actual function <code>str.maketrans</code>, will make a table that says, "If this character appears, replace it with this character." However, I'm not sure what the brackets are for.</p>
<blockquote>
<p>If there is only one argument, it must be a dictionary mapping Unicode
  ordinals (integers) or characters (strings of length 1) to Unicode
  ordinals, strings (of arbitrary lengths) or None. Character keys will
  then be converted to ordinals.</p>
</blockquote>
<p>It's saying that it can only change integers, or characters in strings of length one, to other integers or strings (of any length you want). But I believe I have three arguments, not one.</p>
<blockquote>
<p>If there are two arguments, they must be strings of equal length, and
  in the resulting dictionary, each character in x will be mapped to the
  character at the same position in y. If there is a third argument, it
  must be a string, whose characters will be mapped to None in the
  result.</p>
</blockquote>
<p>I have three arguments <code>('', '', '0123456789')</code>. I think <code>x</code> is the first <code>''</code>, and <code>y</code> is the second <code>''</code>. I have the third argument, which is a string <code>'0123456789'</code>, but I don't understand what it means to be mapped to <code>'None'</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>str.maketrans</code> builds a translation table, which is a mapping of integers or characters to integers, strings, or <code>None</code>.  Think of it like a dictionary.  We go through the string to translate and replace everything that appears as a key in the mapping with whatever its value in the map is.</p>
<p>You can build a translation table with one, two, three arguments (I think this may be what's confusing you). With one argument: </p>
<pre><code>str.maketrans({'a': 'b', 'c': None})
</code></pre>
<p>You give the function a mapping that follows the rules for translation tables and it returns an equivalent table for that mapping. Things that map to <code>None</code> are removed</p>
<p>With two arguments:</p>
<pre><code>str.maketrans('abc', 'xyz')
</code></pre>
<p>You give it two strings.  Each character in the first string is replaced by the character at that index in the second string.  So <code>'a'</code> maps to <code>'x'</code>, <code>'b'</code> to <code>'y'</code>, and <code>'c'</code> to <code>'z'</code>.</p>
<p>The one you're using, with three arguments, works the same as two arguments, but has a third string.  </p>
<pre><code>str.maketrans('abc', 'xyz', 'hij')
</code></pre>
<p>This is the same as the two argument version, except that the characters from the third string are removed, as if they were mapped to <code>None</code>.  So your table is saying  "Don't replace anything, but remove the characters that show up in this string".</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=maketrans#str.maketrans" rel="noreferrer">documentation on <code>str.maketrans</code></a>:</p>
<blockquote>
<p>If there is a third argument, it must be a string, whose characters will be mapped to <code>None</code> in the result.</p>
</blockquote>
<p>This is what <code>str.maketrans</code> is doing; it is taking each element in the third argument and creating a map (a Python dictionary) that maps each ordinal value of the characters in the string to <code>None</code>:</p>
<pre><code>&gt;&gt;&gt; str.maketrans('', '', '0123456789') 
{48: None,
 49: None,
 50: None,
 51: None,
 52: None,
 53: None,
 54: None,
 55: None,
 56: None,
 57: None}
</code></pre>
<p>If extra values exist as the first and second arguments, <em>they are added to this mapping as additional characters to be translated</em> (this is why the author selected <code>''</code> and <code>''</code>; he doesn't want extra characters to be translated):</p>
<pre><code>&gt;&gt;&gt; str.maketrans('a', 'A', '0123456789') 
{48: None,
 49: None,
 50: None,
 51: None,
 52: None,
 53: None,
 54: None,
 55: None,
 56: None,
 57: None,
 97: 65}   # map ord('a') to ord('A')
</code></pre>
<p>If you apply this to your string now, it'll also capitalize <code>'athens'</code> to <code>'Athens'</code> due to the extra <code>'a', 'A'</code> we've provided to <code>maketrans</code>. Not the finest of translations but suffices to grasp the functionality.</p>
<p><code>str_obj.translate</code> will then perform look-ups on this dictionary for every character in <code>str_obj</code> replacing its values with the ones found in the mapping. If it doesn't find it inside the mapping, it leaves it as-is, if it is <code>None</code> it removes it. This is stated in the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=maketrans#str.translate" rel="noreferrer">documentation for <code>str.translate</code></a>:</p>
<blockquote>
<p>When indexed by a Unicode ordinal (an integer), the table object can do any of the following: return a Unicode ordinal or a string, to map the character to one or more other characters; <em>return <code>None</code>, to delete the character from the return string</em>; or raise a <code>LookupError</code> exception, to map the character to itself.</p>
</blockquote>
<p><sup>(Emphasis mine)</sup></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import string
import os
  # Required to call maketrans function.

#trantab = maketrans()
def rename_files():

    x=os.listdir(r'C:\Users\user\Desktop\prank')
    print (x)

    path=os.getcwd()
    print("path is"+path)
    os.chdir(r'C:\Users\user\Desktop\prank')
    for file in x:
        os.rename(file,file.translate(file.maketrans('','','0123456789')))
rename_files()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could simply use: </p>
<pre><code>str.replace('num', '')  
</code></pre>
<p>this will replace <code>num</code> for any num in <code>'1234567890'</code> with empty strings, that's removing it.</p>
</div>
<span class="comment-copy">Have you read the documentation for it? <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#str.maketrans</a></span>
<span class="comment-copy">I have several times, but I'm not quite clear on what it's saying. I will edit my question to include my understanding of what the documentation is saying.</span>
<span class="comment-copy">Thanks, Patrick! This is extremely helpful.  Does that mean the first two arguments in my example, ' ', and ' ', are simply placeholders, since we are not trying to replace anything?</span>
<span class="comment-copy">@Dennis Effectively, yes</span>
<span class="comment-copy">Thanks, Jim! So the first two arguments with the spaces between single quotes are just placeholders?  Also, does that mean any combination of numbers would be mapped to None?</span>
<span class="comment-copy">The first two empty strings have the purpose of not creating additional entries in the mapping. I have updated my answer to reflect that @Dennis.</span>
<span class="comment-copy">No, that just gives an error.  If it were <code>'number'.replace('num','')</code>, it would return <code>'ber'</code>.  But the questions is very specific about wanting an explanation for <code>maketrans</code>, not alternate solutions.</span>
