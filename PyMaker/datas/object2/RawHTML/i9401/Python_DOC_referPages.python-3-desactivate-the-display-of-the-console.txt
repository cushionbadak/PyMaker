<div class="post-text" itemprop="text">
<p>I have a GUI program on python 3 and a <code>file.txt</code> which contains some launch options. One of them is :</p>
<pre><code>Console (Yes/No) = ...
</code></pre>
<p>The thing is i want to display or not the console if there is a "Yes" or a "No".</p>
<p>I found a way to do so :</p>
<p>In <code>script1.pyw</code>:</p>
<pre><code>import os

def getParam():
    param = open("file.txt","r").read()
    param.split(" = ")[1] # getting the value of "Console = "

    return(param)

param = getParam()

if "script2.py" in listdir():

    if param == "No":
        os.rename("script2.py","script2.pyw")
        os.system("python script2.pyw")

    elif param == "Yes":
        os.system("python script2.py")

if "script2.py" in listdir():

    if param == "Yes":
        os.rename("script2.pyw","script2.py")
        os.system("python script2.py")

    elif param == "No":
        os.system("python script2.pyw")
</code></pre>
<p>In <code>script2.py(w)</code>:</p>
<pre><code>from tkinter import *

window = tk.Tk()

...

window.mainloop()
</code></pre>
<p>Fortunately it works but as I work on Linux and I want to share my program with people on Windows I encountered a problem : when they launch <code>script1.pyw</code> everything goes well but whatever they put in <code>file.txt</code>, the python's shell opens with it (and it is absolutely not what I want...)</p>
<p>Do someone have any idea?</p>
</div>
<div class="post-text" itemprop="text">
<p>You will need to change the <strong>os.system</strong> call to <strong>subprocess.call</strong> in order to skip the black window, maybe something like this:</p>
<pre><code>subprocess.call(['py', '3.4', '-c', "import time; time.sleep(1)"], shell=True)
</code></pre>
<p>The <em>shell=True</em> part is what keeps the console from showing...</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to call the <code>pythow.exe</code> on Windows:</p>
<pre><code>pythonw script2.pyw
</code></pre>
<p>Better don't use <code>os.sytem</code>. It is recommend to use <a href="https://docs.python.org/3/library/subprocess.html#module-subprocess" rel="nofollow noreferrer"><code>subprocess</code></a>:</p>
<pre><code>import sys

if sys.platform == 'win32':
    subprocess.call(['pythonw',  'script2.pyw'], shell=True)
</code></pre>
<p>The <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer"><code>os.sytem</code> docs</a> recommend <code>subprocess</code>:</p>
<blockquote>
<p>The <code>subprocess</code> module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function.</p>
</blockquote>
</div>
<span class="comment-copy">FYI you don't need to come up with your own format for configuration: <a href="https://docs.python.org/2/library/configparser.html" rel="nofollow noreferrer">docs.python.org/2/library/configparser.html</a></span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/1689015/run-python-script-without-windows-console-appearing">Run Python script without Windows console appearing</a></span>
<span class="comment-copy">It's best to avoid using <code>shell=True</code>. In this case it's completely unnecessary because pythonw.exe is not a console application. However, even if the target is a console app, such as python.exe, using <code>shell=True</code> just to get a hidden console is generally a bad idea. The better options are either to set the <code>startupinfo</code> yourself to hide the console window or to use a <code>creationflags</code> value of either <code>CREATE_NO_WINDOW</code> or <code>DETACHED_PROCESS</code>. See <a href="http://stackoverflow.com/a/7006424/205580">this answer</a> for examples.</span>
