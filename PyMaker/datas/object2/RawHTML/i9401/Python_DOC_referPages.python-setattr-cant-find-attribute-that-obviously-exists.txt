<div class="post-text" itemprop="text">
<p>I'm at my wits end.
Can't find anything else that helps with this.</p>
<pre><code>dta = {'type': "", 'content': ""}
print dta
</code></pre>
<blockquote>
<p><code>&gt;&gt;&gt;{'content': '', 'type': ''}</code></p>
</blockquote>
<pre><code>setattr(dta, 'type', "Steve")
</code></pre>
<blockquote>
<p><code>&gt;&gt;&gt;AttributeError: 'dict' object has no attribute 'type'</code></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Python's dictionaries aren't JS objects. When you create a dict, you aren't creating a dynamic object whose properties you can change at runtime as in JS. Instead the dictionary knows how to store pairs of keys and values and does so by overriding the operator [] (<code>def __getitem__(self, key)</code>).</p>
<p>On a more implementation level - calling <code>getattr</code> / <code>setattr</code> is really a shorthand for <code>data.__getattr__("foo")</code> and since <code>dict</code> uses <code>__getitem__</code> as opposed to <code>__getattr__</code> the function call fails.</p>
<p>Thus, there's no way to set (or get for that matter) the dict's items using generic attribute functions.</p>
<p><em>However</em>, you can create your custom dict class that does support that operation (although I wouldn't recommend it):</p>
<pre><code>class AttrDict(dict):
    def __init__(self):
        dict.__init__(self)

    # Override getattr and setattr so that they return the values of getitem / setitem
    def __setattr__(self, name, value):
        self[name] = value

    def __getattr__(self, name):
        return self[name]

data = AttrDict()
data["foo"] = "bar"
print(getattr(data, "foo"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can assign dict values directly, setattr() is not needed.</p>
<pre><code>dta = {'type': "", 'content': ""}
dta["type"] = "Steve"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>'setattr()' refers to something else. When you write <code>setattr(dta, 'type', "Steve")</code> you're trying to access the field <code>dta.type</code>, dict class has no attribute <code>type</code>, so it gives an error.</p>
<p><code>dict_object['key']</code> is a completely different thing, and it's how dict members should be accessed.</p>
<p>More about settatr() <a href="https://docs.python.org/2/library/functions.html#setattr" rel="nofollow noreferrer">Here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries are <a href="https://docs.python.org/3/reference/expressions.html?highlight=subscriptable#subscriptions" rel="nofollow noreferrer">subscriptable</a>, the key:value pairs are items instead of attributes. </p>
<p>Items are accessed using a subscript notation:</p>
<pre><code>&gt;&gt;&gt; d = {'a':1, 'b':2}
&gt;&gt;&gt; d['a']
1
</code></pre>
<p><a href="https://docs.python.org/3/reference/expressions.html#attribute-references" rel="nofollow noreferrer">Attributes are accessed using dot notation</a></p>
<pre><code>&gt;&gt;&gt; d.a
Traceback (most recent call last):
  File "&lt;pyshell#3&gt;", line 1, in &lt;module&gt;
    d.a
AttributeError: 'dict' object has no attribute 'a'
</code></pre>
<p>operator.itemgetter is similar to getattr:</p>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; bee = operator.itemgetter('b')
&gt;&gt;&gt; bee(d)
2
&gt;&gt;&gt;  
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; hasattr(d, '__getitem__')
True
&gt;&gt;&gt; hasattr(d, '__getattr__')
False
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>setattr</code> does not work with a dictionary because it does not have an <code>__dict__</code>.  </p>
<p>I can make a simple class and instance:</p>
<pre><code>In [88]: class Obj(object):
    ...:     pass
    ...: 
In [89]: ob = Obj()
In [90]: ob.__dict__
Out[90]: {}
In [91]: setattr(ob,'test',34)
In [92]: ob.__dict__
Out[92]: {'test': 34}
In [95]: ob.test
Out[95]: 34
</code></pre>
<p><code>setattr</code> sets an item in the <code>__dict__</code> of <code>obj</code>, and the resulting attribute can be accessed with <code>.test</code> syntax.</p>
<p>But a <code>dict</code> object does not have a <code>__dict__</code>.</p>
<pre><code>In [96]: dd={1:2, 3:4}
In [97]: dd.__dict__
AttributeError: 'dict' object has no attribute '__dict__'

In [98]: setattr(dd, 'test', 34)
AttributeError: 'dict' object has no attribute 'test'
</code></pre>
<p>I add items to the dict with the dictionary indexing notation:</p>
<pre><code>In [99]: dd['test'] = 34
In [100]: dd
Out[100]: {1: 2, 3: 4, 'test': 34}
</code></pre>
<p>The dictionary class inherits from <code>object</code>, but in way that does not give each instance a <code>__dict__</code>.  Thus <code>setattr</code> has nothing to act on.</p>
<p>If for some reason the <code>[]=</code> syntax is awkward, you can use <code>operator.setitem</code> as a function:</p>
<pre><code>In [108]: operator.setitem?
Docstring: setitem(a, b, c) -- Same as a[b] = c.
Type:      builtin_function_or_method
In [109]: operator.setitem(dd, 'test', 23)
In [110]: dd
Out[110]: {1: 2, 3: 4, 'test': 23}
</code></pre>
<p>Or use the <code>__setitem__</code> method</p>
<pre><code>In [111]: dd.__setitem__('test', 1)
In [112]: dd
Out[112]: {1: 2, 3: 4, 'test': 1}
</code></pre>
<p>Actually, a dictionary does have attributes.  For example its <code>.get</code> method can be fetched with <code>getattr</code>.  <code>setattr</code> returns a different error in this example.</p>
<pre><code>In [119]: getattr(dd,'get')
Out[119]: &lt;function dict.get&gt;
In [120]: setattr(dd,'get',dict.get)
...
AttributeError: 'dict' object attribute 'get' is read-only
</code></pre>
<p>Without the <code>__dict__</code> we can't add an attribute to a dictionary.  And many, if not all, of the existing attributes are read only.  I don't know if a dictionary has an attributes that can be changed.</p>
<p>Actually a dictionary is an <code>object</code>:</p>
<pre><code>In [121]: isinstance(dd,dict)
Out[121]: True
In [122]: isinstance(dd,object)
Out[122]: True
</code></pre>
<p>I just imported <code>defaultdict</code>.  It too lacks a <code>__dict__</code>.  But I was able to use <code>setattr(ddd,'default_factory', int)</code>.  I think that <code>no attribute</code> is the correct error message when the attribute does not already exist, and it cannot add new ones.</p>
<p>==============</p>
<p>I'd have to double check the documentation on this, but I think <code>setattr(dd,...)</code> delegates to <code>dd.__setattr__(...)</code>.</p>
<pre><code>In [168]: dd.__setattr__('test',1)
...
AttributeError: 'dict' object has no attribute 'test'

In [169]: dd.__setattr__('get',None)
...
AttributeError: 'dict' object attribute 'get' is read-only
</code></pre>
<p>So the error message is determined by the <code>dict</code> class, not <code>setattr</code>.</p>
<p>Even instances that have a <code>__dict_-</code> might raise errors if <code>setattr</code> is used wrong.  For example a number is not a valid attribute name:</p>
<pre><code>In [171]: setattr(ob, 123, 'a')
....
TypeError: attribute name must be string, not 'int'
</code></pre>
<p>But <code>setattr</code> can set attributes that can't be accessed with the <code>.</code> syntax:</p>
<pre><code>In [172]: setattr(ob, 'a#re',1)
In [174]: ob.a#re
...
AttributeError: 'Obj' object has no attribute 'a'
In [175]: getattr(ob, 'a#re')
Out[175]: 1
</code></pre>
<p><code>vars()</code> is another way of accessing the <code>__dict__</code> of an instance:</p>
<pre><code>In [179]: vars(dd)
 ...
TypeError: vars() argument must have __dict__ attribute
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/2/library/functions.html#setattr" rel="nofollow noreferrer">docs.python.org/2/library/functions.html#setattr</a></p>
<blockquote>
<p>This is the counterpart of getattr(). The arguments are an <strong>object</strong>,
  a string and an arbitrary value. The string may name an existing
  attribute or a new attribute. The function assigns the value to the
  attribute, provided the <strong>object</strong> allows it</p>
</blockquote>
<p>OBJECT is not a DICTIONARY. And I probably confusing my JS work (syntax) with the Python code I'm always writing at the same time</p>
<p>So the error message is confusing:</p>
<blockquote>
<p>AttributeError: 'dict' object has no attribute 'type'</p>
</blockquote>
<p>It should be more like:</p>
<blockquote>
<p>'setattr() is for objects not dictionaries'</p>
</blockquote>
<p>.</p>
<p>Thanks everyone.</p>
</div>
<span class="comment-copy">If you can't do <code>dta.type</code>, then you should not be able to set it with <code>setattr</code>.</span>
<span class="comment-copy">Keys stored in a dictionary aren't the same thing as <i>attributes</i>.</span>
<span class="comment-copy">A dict's keys aren't attributes. But it's easy to make an object whose attributes can be accessed with index syntax as well as attribute syntax.</span>
<span class="comment-copy">I completely don't understand you.  I'm doing this in the python console.  setattr() is a standard Python library function built specifically to change values of dictionalry attributes.</span>
<span class="comment-copy">No it isn't. <code>setattr</code> is a built-in function specifically to change values of <i>object attributes</i>, not dictionary values.</span>
<span class="comment-copy">Got ya. OBJECT is not a DICT.  And I probably confusing my JS work (syntax) with the Python code I'm always writing at the same time</span>
<span class="comment-copy">@Steve Exactly! See my edit for some further explanations.</span>
<span class="comment-copy">Yeah. I know.  But I'm using setattr() successfully else where.  Consistency is important.  Any thoughts on my setattr() is failing?  .... .... while retyping this I realized 'type' is reserved word.  Could that be it?</span>
<span class="comment-copy">a quick test.  The error is NOT due to 'type' being a reserved word</span>
<span class="comment-copy">Setattr, cannot assign a value to a dict-key. Review docs types/classes/setattr ...</span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/functions.html#setattr" rel="nofollow noreferrer">docs.python.org/2/library/functions.html#setattr</a>  This is the counterpart of getattr(). The arguments are an object, a string and an arbitrary value. The string may name an existing attribute or a new attribute. The function assigns the value to the attribute, provided the object allows it. For example, setattr(x, 'foobar', 123) is equivalent to x.foobar = 123.</span>
<span class="comment-copy">Got ya.  OBJECT is not a DICT</span>
<span class="comment-copy">It would be nice if <code>setattr(obj, attr, val)</code>  first did a test <code>if (type obj == 'dict')  throw error "'obj ' is not an object"</code>.  How handy would that be?</span>
<span class="comment-copy">Actually a dictionary is a <code>object</code>.  See my edits.</span>
<span class="comment-copy">if you <code>s = { "qwe": "asd" }</code> and <code>print type s</code> you get <code>&gt; &gt; &gt; type dict</code> so if you in inadvertently pass a dict (i.e. s) to setattr() but it requires an object then setattr() should test for this and throw an error that regards the absence of an object parameter value.  Instead what it does do is throw an error that it can't find the attribute in the dict that you requested.</span>
<span class="comment-copy">Actually it's the dictionary <code>__setattr__</code> method that generates your error.</span>
