<div class="post-text" itemprop="text">
<p>I'm confused on why a simple absolute import is failing.  Following the Python <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">packages</a> tutorial, I have package with a single subpackage:</p>
<pre><code>sound/
    __init__.py
    top.py
    formats/
        __init__.py
        a.py
        b.py
</code></pre>
<p>a.py contains:</p>
<pre><code>def foo():
    print("foo")
</code></pre>
<p>b.py contains:</p>
<pre><code>from a import foo

def bar():
    foo()

if __name__ == "__main__":
    bar()
</code></pre>
<p>top.py contains:</p>
<pre><code>from formats import b    

if __name__ == "__main__":
    b.bar()
</code></pre>
<p>Both <code>__init__.py</code> files are empty.  From sound/formats/, running b prints <code>foo</code> as expected.  But from sound/, running top produces the error:</p>
<pre><code>File ".../sound/top.py", line 1, in &lt;module&gt;
  from formats import b
File "...\sound\format\b.py", line 1, in &lt;module&gt;
  from a import foo
ImportError: No module named 'a'
</code></pre>
<p>(Note the strange appearance of forward slashes in the first line and back slashes in the second.  Python 3.5, Windows 7 Pro.)  This shouldn't be that complicated -- what syntax is necessary to allow b to consistently import a?</p>
<p>----- EDIT -----</p>
<p><a href="https://stackoverflow.com/questions/1896918/running-unittest-with-typical-test-directory-structure">Running unittest</a> is the question I should have found before asking this one.  It also contains a great pointer to the <a href="http://infinitemonkeycorps.net/docs/pph/" rel="nofollow noreferrer">Python Project Howto</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's really not how you should be running your code.</p>
<p>With Python packages you <em>shouldn't</em> be in the folder that contains the files when you're running the code. That'd be like going to <code>C:\Python35\Lib\site-packages\http\</code>* and then running <code>py -3 server.py</code>. Ew. Don't do that.</p>
<p>Instead, use Python the way it expects to be used!</p>
<pre><code>⚘ python --help | grep -e -m                                     
usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...
-m mod : run library module as a script (terminates option list)
</code></pre>
<p>You're creating modules, but you want to be able to run them as a script. Turns out that you can do that!</p>
<pre><code>&gt; cd ../..
&gt; dir
sound
&gt; python -m sound.formats.b
foo
&gt; python -m sound.top
foo
</code></pre>
<p>*<sup><sub>I think that's the path but it's been a while since Windows for me. If it's wrong, I'm just trying to make a point here!</sub></sup></p>
</div>
<span class="comment-copy">Shouldn't it be <code>from .a import foo</code> since <code>a</code> is in the same directory as <code>b</code>?  If you want to be able to run <code>b</code> directly from <code>sound/formats</code>, you might need to mess with <code>__package__</code> (See <a href="https://www.python.org/dev/peps/pep-0366/" rel="nofollow noreferrer">PEP-0366</a>).</span>
<span class="comment-copy">Nope - top works in that case, but b fails with "SystemError: Parent module ' ' not loaded, cannot perform relative import".</span>
<span class="comment-copy">Right.  See my comment continuation about <code>__package__</code>.</span>
<span class="comment-copy">Are you sure it's not just setting your PythonPath environment variable?  See <a href="http://stackoverflow.com/questions/3701646/how-to-add-to-the-pythonpath-in-windows-7" title="how to add to the pythonpath in windows 7">stackoverflow.com/questions/3701646/…</a></span>
<span class="comment-copy">I think you're confused about what absolute imports are. It looks like you're expecting an implicit relative import.</span>
<span class="comment-copy"><code>grep -e -m</code> might be a little more idiomatic shell scripting, btw.</span>
<span class="comment-copy">Using <code>grep</code> and a Windows path in the same post... But yap, the path is correct.</span>
<span class="comment-copy">@linusg and I'm on a Mac. Go figure ;)</span>
<span class="comment-copy">@CharlesDuffy ah. That does work. Updated :)</span>
<span class="comment-copy">I have one subproject with some code and the unit tests for that code.  I have a second subproject that needs to import from the first.  Is there a best practice for creating unittests that aren't run from within the directory containing the code?  The example I was following had <code>test_foo.py</code> containing <code>if __name__ = "__main__": unittest.main()</code>.</span>
