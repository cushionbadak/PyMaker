<div class="post-text" itemprop="text">
<p>I am trying to create a python script that calls 5 other python scripts to run simultaneously while passing in an array and then each of the 5 scripts perform an operation on that array and return a different array to the initial script. </p>
<p>The initial script then realize when the 5 have returned values and then performs operations on these 5 arrays.</p>
<p>I think the solution is something like 
    <code>os.system(./script1.py arg1)</code>, <code>os.system(./script2.py arg2)</code> 
but I'm unsure of how to proceed. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a thread pool to run all of the commands in parallel. I also changed over to the <code>subprocess</code> module which grabs program outputs:</p>
<pre><code>import multiprocessing.pool
import subprocess as subp

def worker(script):
    proc = subp.Popen(script, shell=True, stdout=subp.PIPE, stderr=subp.PIPE)
    out, err = proc.communicate()
    return script, out, err, proc.returncode

scripts = ['./script1.py arg1', './script2.py arg2']
pool = multiprocessing.pool.ThreadPool(len(scripts))
for script, out, err, returncode in pool.map(worker, scripts):
    do your magic
pool.close()
pool.join()
</code></pre>
</div>
<span class="comment-copy">You should not use <code>os.system</code> if you want to run the five scripts simultaneously. Use the <code>subprocess</code> module.</span>
<span class="comment-copy">this looks kind of like what i'm after, but im unclear of what the for script, out, .. do your magic is for. Also where are the outputs of the different scripts returned?</span>
<span class="comment-copy">The pool creates one thread per item in <code>scripts</code>. <code>pool.map</code> sends each script and the worker function to the threads and then acts as an iterator to pass the worker return values to the main program. So, the for loop gets the result of each script in turn. Depending on how you want to process the data, you could juggle what is returned and how its assembled. For instance, <code>worker</code> could just return <code>out</code> and you could get a list of outputs as <code>outputs = list(pool.map(worker, scripts))</code>.</span>
<span class="comment-copy">wow. thanks a lot. this works beautifully. Is there a way I can consider the output of each of the scripts separant from what they print? i.e. in pool.map is there a return value as well as an out value?</span>
<span class="comment-copy">The <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow noreferrer">Popen.communicate</a> docs explain it the best. This example returns the program's <code>stdout</code>,  <code>stderr</code> (what the program normally prints) and <code>returncode</code> (a single integer) and that's what you iterate though in pool.map's return. Give it a try by printing the variables in the for loop to see what's going on.</span>
