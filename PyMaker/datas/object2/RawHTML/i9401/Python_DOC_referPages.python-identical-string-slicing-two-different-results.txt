<div class="post-text" itemprop="text">
<p>Somewhere I'm being an idiot, but I can't find where.</p>
<p>I'm running a Python script using a PostgreSQL database through ODBC.  I am trying to extract the meaningful piece from a database exception message.  Here is the raw message, with line breaks added for readability:</p>
<pre><code>(-2147352567, 'Exception occurred.', (0, 'Microsoft OLE DB Provider for ODBC Drivers', 
'ERROR: Charge not in a correct status to delete;\nError while executing the query', 
None, 0, -2147467259), None)
</code></pre>
<p>Note that there are two sets of parentheses in this string.  First, I find the locations of the outer ones and slice them off.  This gives the expected result:</p>
<pre><code>-2147352567, 'Exception occurred.', (0, 'Microsoft OLE DB Provider for ODBC Drivers', 
'ERROR: Charge not in a correct status to delete;\nError while executing the query', 
None, 0, -2147467259), None
</code></pre>
<p>Then, using as far as I can tell identical code, I strip off the other set of parentheses and everything outside them.  This gives this result:</p>
<pre><code>(0, 'Microsoft OLE DB Provider for ODBC Drivers', 
'ERROR: Charge not in a correct status to delete;\nError while executing the query', 
None, 0, -214746725
</code></pre>
<p>The open parenthesis is still here, even though I am using the result of the find() method the same way, adding one to the open parenthesis location as the start of the slice, both times.</p>
<p>Here is the code:</p>
<pre><code>    print (errorString)
    openParenLocation = errorString.find('(')
    closeParenLocation = errorString.rfind(')')
    strippedString = errorString[openParenLocation + 1:closeParenLocation]
    openParenLocation = strippedString.find('(')
    closeParenLocation = strippedString.rfind(')')
    dbErrorString = errorString[openParenLocation + 1:closeParenLocation]
    print (strippedString)
    print ("{}, {}".format(openParenLocation, closeParenLocation))
    print (dbErrorString)
</code></pre>
<p>And here is the raw output, with no added line breaks:</p>
<pre><code>(-2147352567, 'Exception occurred.', (0, 'Microsoft OLE DB Provider for ODBC Drivers', 'ERROR: Charge not in a correct status to delete;\nError while executing the query', None, 0, -2147467259), None)
-2147352567, 'Exception occurred.', (0, 'Microsoft OLE DB Provider for ODBC Drivers', 'ERROR: Charge not in a correct status to delete;\nError while executing the query', None, 0, -2147467259), None
36, 191
(0, 'Microsoft OLE DB Provider for ODBC Drivers', 'ERROR: Charge not in a correct status to delete;\nError while executing the query', None, 0, -214746725
</code></pre>
<p>Test code using a much smaller string works as expected:</p>
<pre><code>    testString = "(abc(def)ghij)"
    openParenLocation = testString.find('(')
    closeParenLocation = testString.rfind(')')
    strippedTestString = testString[openParenLocation + 1:closeParenLocation]
    openParenLocation = strippedTestString.find('(')
    closeParenLocation = strippedTestString.rfind(')')
    finalTestString = strippedTestString[openParenLocation + 1:closeParenLocation]
</code></pre>
<p>Thank you very much.</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like this line:</p>
<p><code>dbErrorString = errorString[openParenLocation + 1:closeParenLocation]</code></p>
<p>should instead be:</p>
<p><code>dbErrorString = strippedString[openParenLocation + 1:closeParenLocation]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Given that your string looks like Python syntax, have you considered using the standard <code>ast</code> library module to do all this work for you?</p>
<pre><code>&gt;&gt;&gt; errorString =r"""\
(-2147352567, 'Exception occurred.', (0, 'Microsoft OLE DB Provider for ODBC Drivers', 
'ERROR: Charge not in a correct status to delete;\nError while executing the query', 
None, 0, -2147467259), None)"""

&gt;&gt;&gt; import ast
&gt;&gt;&gt; a = ast.parse(errorString).body[0].value
&gt;&gt;&gt; a
&lt;_ast.Tuple at 0x10802d3d0&gt;

&gt;&gt;&gt; a.elts[0]
&lt;_ast.Num at 0x10802d410&gt;

&gt;&gt;&gt; a.elts[0].n
-2147352567

&gt;&gt;&gt; a.elts[1]
&lt;_ast.Str at 0x10802d450&gt;

&gt;&gt;&gt; a.elts[1].s
'Exception occurred.'

&gt;&gt;&gt; a.elts[2]
&lt;_ast.Tuple at 0x10802d490&gt;

&gt;&gt;&gt; # so now lather/rinse repeat: iterate over a.elts[2].elts

&gt;&gt;&gt; a.elts[3]
&lt;_ast.Name at 0x10802d650&gt;

&gt;&gt;&gt; a.elts[3].id
'None'
</code></pre>
<p>An even simpler way would be to use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> to turn the string directly into the Python object that it describes. It's like the builtin <code>eval</code>, but safe from the security perspective because it will not evaluate anything that isn't a literal (so, any malicious <code>errorString</code> content will not be executed).</p>
<pre><code>&gt;&gt;&gt; a = ast.literal_eval(errorString)
&gt;&gt;&gt; a[0]
-2147352567
&gt;&gt;&gt; a[1]
'Exception occurred.'
&gt;&gt;&gt; a[2][0]
0
</code></pre>
<p>etc.</p>
</div>
<span class="comment-copy"><code>errorString[openParenLocation + 1:closeParenLocation]</code> ??? what are you trying to do by using <code>openParenLocation + 1:closeParenLocation</code> ?</span>
<span class="comment-copy">How are you getting/forming <code>errorString</code> originally? It looks a lot like a python tuple's <code>repr</code>. Perhaps the data is available as a tuple, which would make handling it a no brainer. To your question, you're forming the indices for <code>dbErrorString</code> fron <code>strippedString</code>, but then use <code>errorString</code> in the actual slicing instead of <code>strippedString</code>.</span>
<span class="comment-copy">I am trying to strip off the outer open parenthesis and close parenthesis and everything outside them.  The original string is the error string returned from ODBC because an error condition was encountered inside a database function.  The string is not from Python and is not in a tuple.  The goal of this effort is to return only the error message contained inside this long gobbledygook: "ERROR:  Charge not in a correct status to delete".</span>
<span class="comment-copy">Which library are you using to talk to your db?</span>
<span class="comment-copy">And that string is most likely from python, as very few other languages/systems have a <code>None</code>, certainly not SQL. The contents of that string at least are a valid tuple... This reeks of an XY.</span>
<span class="comment-copy">If you do want to use the original errorString again then you need to account for the change in index from the first strip, but since you overwrite the first openParenLocation, you would need to do some refactoring for this to be possible.</span>
<span class="comment-copy">See?  I knew it was something idiotic I was doing.  Thanks very much!</span>
<span class="comment-copy">I don't care for this solution.  We are not Python experts here, and it is important that everyone who might look at my code be able to understand it.  I have no idea what an Abstract Syntax Tree is, and I don't think it's a good idea to ask me or my coworkers to learn that concept in order to understand my code.</span>
<span class="comment-copy">What would 'eval(errorString)' do?</span>
<span class="comment-copy"><code>eval(errorString)</code> would return the nested tuple object that <code>errorString</code> appears to describe.  It could then be manipulated like any other Python object.  It's safe to try it out on your example and play with it, but see the caveat in the edited answer.</span>
<span class="comment-copy">Further update: I've just learned about <code>ast.literal_eval</code> which I will be using heavily in future.  Would save you a lot of work here.</span>
<span class="comment-copy">I begin to see and understand!  Yes, it is much easier than what I wrote, and easy enough to explain or comment</span>
