<div class="post-text" itemprop="text">
<p>I thought I understood the basics of list slicing in python, but have been receiving an unexpected error while using a negative step on a slice, as follows:</p>
<pre><code>&gt;&gt;&gt; a = list(range(10))
&gt;&gt;&gt; a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; a[:-1]
[0, 1, 2, 3, 4, 5, 6, 7, 8]
&gt;&gt;&gt; a[::-1]
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
&gt;&gt;&gt; a[:-1:-1]
[]
</code></pre>
<p>(Note that this is being run in Python 3.5)</p>
<p>Why doesn't a[:-1:-1] reverse step through the a[:-1] slice in the same manner as it does through the whole list with a[::-1]? </p>
<p>I realize that you can use list.reverse() as well, but trying to understand the underlying python slice functionality better. </p>
</div>
<div class="post-text" itemprop="text">
<p><strong>The first <code>-1</code> in <code>a[:-1:-1]</code> doesn't mean what you think it does.</strong></p>
<p>In slicing, negative start/end indices are not interpreted literally. Instead, they are used to conveniently refer to the end of the list (i.e. they are relative to <code>len(a)</code>). This happens irrespectively of the direction of the slicing.</p>
<p>This means that</p>
<pre><code>a[:-1:-1]
</code></pre>
<p>is equivalent to</p>
<pre><code>a[:len(a)-1:-1]
</code></pre>
<p>When omitted during reverse slicing, the start index defaults to <code>len(a)-1</code>, making the above equivalent to</p>
<pre><code>a[len(a)-1:len(a)-1:-1]
</code></pre>
<p>This always gives an empty list, since the start and end indices are the same and the end index is exclusive.</p>
<p>To slice in reverse up to, and including, the zeroth element you can use any of the following notations:</p>
<pre><code>&gt;&gt;&gt; a[::-1]
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
&gt;&gt;&gt; a[:None:-1]
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
&gt;&gt;&gt; a[:-len(a)-1:-1]
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you type <code>[1, 2, 3, ...][1:4:1]</code> it is the same as <code>[1, 2, 3, ...][slice(1, 4, 1)]</code>. So <code>1:4:1</code> is the shorthand for <code>slice</code> object. <code>slice</code> signature is <code>slice(stop)</code> or <code>slice(start, stop[, step])</code> and you can also use <code>None</code> for arguments.</p>
<pre><code>:: -&gt; slice(None, None, None)
:4 -&gt; slice(4)
# and so on
</code></pre>
<p>Suppose we have got <code>[a: b: c]</code>. <strong>Rules</strong> for indices will be as follows:  </p>
<ol>
<li>First <code>c</code> is checked. Default is <code>+1</code>, sign of <code>c</code> indicates forward or backward direction of the step. Absolute value of <code>c</code> indicates the step size.  </li>
<li>Than <code>a</code> is checked. When <code>c</code> is positive or <code>None</code>, default for <code>a</code> is <code>0</code>. When <code>c</code> is negative, default for <code>a</code> is <code>-1</code>.</li>
<li>Finally <code>b</code> is checked. When <code>c</code> is positive or <code>None</code>, default for <code>b</code> is <code>len</code>. When <code>c</code> is negative default for <code>b</code> is <code>-(len+1)</code>.</li>
</ol>
<p><strong>Note 1</strong>: Degenerated slices in Python are handled gracefully:  </p>
<ul>
<li>the index that is too large or too small is replaced with <code>len</code> or <code>0</code>.  </li>
<li>an upper bound smaller than the lower bound returns an empty list or string or whatever else (for positive <code>c</code>). </li>
</ul>
<p><strong>Note 2</strong>: Roughly speaking, Python picks up elements while this condition <code>(a  &lt;  b) if (c &gt; 0) else (a &gt; b)</code> is <code>True</code> (updating <code>a += c</code> on every step). Also, all negative indices are replaced with <code>len - index</code>.</p>
<p>If you combine this rules and notes it will make sense why you got an empty list. In your case:</p>
<pre><code> In[1]: [1, 2, 3, 4, 5, 6][:-1:-1]        # `c` is negative so `a` is -1 and `b` is -1
Out[1]: [] 

# it is the same as:

 In[2]: [1, 2, 3, 4, 5, 6][-1: -1: -1]    # which will produce you an empty list 
Out[2]: [] 
</code></pre>
<p>There is very good discussion about slice notation: <a href="https://stackoverflow.com/questions/509211/explain-pythons-slice-notation">Explain Python's slice notation</a>!</p>
</div>
<div class="post-text" itemprop="text">
<p>I generally find it useful to slice a <code>range</code>-object (this is only possible in python3 - in python2 <code>range</code> produces a <code>list</code> and <code>xrange</code> can't be sliced) if I need to see which indices are used for a list of a given length:</p>
<pre><code>&gt;&gt;&gt; range(10)[::-1]  
range(9, -1, -1)

&gt;&gt;&gt; range(10)[:-1]  
range(0, 9)
</code></pre>
<p>And in your last case:</p>
<pre><code>&gt;&gt;&gt; range(10)[:-1:-1]
range(9, 9, -1)
</code></pre>
<p>This also explains what happened. The first index is 9, but 9 isn't lower than the stop index 9 (note that in python the stop index is <em>excluded</em>) so it stops without giving any element.</p>
<p>Note that indexing can also be applied sequentially:</p>
<pre><code>&gt;&gt;&gt; list(range(10))[::-1][:-1]  # first reverse then exclude last item.
[9, 8, 7, 6, 5, 4, 3, 2, 1]
&gt;&gt;&gt; list(range(10))[:-1][::-1]  # other way around
[8, 7, 6, 5, 4, 3, 2, 1, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python's slices seem fairly simple at first, but their behaviour is actually <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer">quite complex</a> (notes 3 and 5 are relevant here). If you have a slice <code>a[i:j:k]</code>:</p>
<ul>
<li>If <code>i</code> or <code>j</code> are negative, they refer to an index from the end of <code>a</code> (so <code>a[-1]</code> refers to the last element of <code>a</code>)</li>
<li><p>If <code>i</code> or <code>j</code> are not specified, or are <code>None</code>, they default to the ends of <code>a</code>, but <em>which</em> ends depends on the sign of <code>k</code>:</p>
<ul>
<li>if <code>k</code> is positive, you're slicing forwards, so <code>i</code> becomes 0 and <code>j</code> becomes <code>len(a)</code></li>
<li><p>if <code>k</code> is negative, you're slicing backwards, so <code>i</code> becomes <code>len(a)</code> and <code>j</code> becomes the element before the start of <code>a</code>.</p>
<p><strong>NB:</strong> <code>j</code> <em>cannot</em> be replaced with -1, since doing that will cause Python to treat <code>j</code> as the <em>last</em> element of <code>a</code> rather than the (nonexistent) element before <code>a[0]</code>. To get the desired behaviour, you must use <code>-len(a)-1</code> (or <code>-(len(a)+1)</code>) in place of <code>j</code>, which means that to get to <code>a[j]</code>, slice starts at the last element of <code>a</code>, goes left for <code>len(a)</code> elements and then left one more element, ending up before <code>a</code> starts and thus including <code>a[0]</code> in the slice.</p></li>
</ul></li>
</ul>
<p>Therefore, <code>a[:-1:-1]</code> means "go from the end of <code>a</code>, which is <code>a[-1]</code> (since <code>i</code> is unspecified and <code>k</code> is negative), to the last element of <code>a</code> (since <code>j == -1</code>), with step size of -1". <code>i</code> and <code>j</code> are equal – you start and stop slicing in the same place – so the expression evaluates to an empty list.</p>
<p>To reverse <code>a[:-1]</code>, you can use <code>a[-2::-1]</code>. This way, the slice starts at the penultimate element, <code>a[-2]</code> (since <code>a[:-1]</code> does not include <code>a[-1]</code>) and goes backwards until the element "before" <code>a[0]</code>, meaning that <code>a[0]</code> is included in the slice.</p>
<pre><code>&gt;&gt;&gt; a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; a[:-1]
[0, 1, 2, 3, 4, 5, 6, 7, 8]
&gt;&gt;&gt; a[-2::-1]
[8, 7, 6, 5, 4, 3, 2, 1, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>slice</code> works similar to <code>range</code> in that when you make the <code>step</code> argument a negative number, the <code>start</code> and <code>stop</code> arguments work in the opposite direction.</p>
<pre><code>&gt;&gt;&gt; list(range(9, -1, -1)) == a[::-1]
True
</code></pre>
<p>Some examples that may help make this more clear:</p>
<pre><code>&gt;&gt;&gt; a[6:2:-2]
[6, 4]
&gt;&gt;&gt; a[0:None:1] == a[::]
True
&gt;&gt;&gt; a[-1:None:-1] == a[::-1]
True
&gt;&gt;&gt; a[-2:None:-1] == a[:-1][::-1]
True
</code></pre>
</div>
<span class="comment-copy">I think you're looking for <code>a[-1::-1]</code>. The first index gives the start, the second index gives the end, and you want to start at index -1.</span>
<span class="comment-copy">@ekhumoro: I did, and it works. <code>[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</code></span>
<span class="comment-copy">@Josh. How is that different to <code>a[::-1]</code>?</span>
<span class="comment-copy">@ekhumoro: good point, <code>a[-2::-1]</code> (produces <code>[8, 7, 6, 5, 4, 3, 2, 1, 0]</code>) is probably actually the answer, since the starting index is included.</span>
<span class="comment-copy">@Josh, you're right <code>a[-2::-1]</code> is the solution I was looking for, but I didn't understand it fully until the discussion below about how the +/- sign of the step impacted the behavior of the ends.</span>
<span class="comment-copy">How would you explain the difference between the results of <code>a[::-1]</code>, <code>a[:0:-1]</code>, and <code>a[:-1:-1]</code>? Or to put it another way: what actual number is represented by the empty end value?</span>
<span class="comment-copy">I think <code>-len(a)-1</code> can be used to represent the end (<code>j</code>, in <code>a[i:j:k]</code>). If <code>a</code> is <code>range(10)</code>, then <code>a[:-len(a)-1:-1]</code> produces <code>[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</code>. Here, <code>-len(a)-1</code> evaluates to -11; this is negative, so <code>len(a) + -11</code> is used instead (<a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer">note 3</a>), which evaluates to -1.</span>
<span class="comment-copy">"<code>a[:-1:-1]</code> means that you're starting at the beginning (index 0) and going backwards until you hit the last element (index -1)." Not true. See note #5 under the <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer">docs for sequence operations</a>: In the slice <code>a[i:j:k]</code>, "If i or j are omitted or None, they become “end” values (which end depends on the sign of k)." That's why <code>a[:1:-1]</code> gives the last <code>len(a) - 2</code> elements, not the first element; it's equivalent to <code>a[len(a)-1:1:-1]</code>.</span>
<span class="comment-copy">@ThisSuitIsBlackNot I think this is the key I didn't grasp: "which end depends upon the sign of k".  Thank you!</span>
<span class="comment-copy">@ThisSuitIsBlackNot, Matt: you're totally right, I'm sorry I got this so wrong. I'll remove the incorrect information and rewrite this.</span>
