<div class="post-text" itemprop="text">
<p>Is some way to make from this list of strings:</p>
<pre><code>['/User/someuser/file.py', '/tmp/download/file.zip', '/tmp/download/file2.zip', '/', '/usr/local/bin', '/tmp/file.txt']
</code></pre>
<p>make this list</p>
<pre><code>[('/tmp/download', ('file.zip', 'file2.zip')), ('/tmp', ('file.txt',)),
 ('/User/someuser', ('file.py',)), ('/', ()), ('/usr/local/bin', ())]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> along with <a href="https://docs.python.org/3/library/os.path.html#os.path.split" rel="nofollow noreferrer"><code>os.path.split()</code></a> as:</p>
<pre><code>from collections import defaultdict
import os

my_list = ['/User/someuser/file.py', '/tmp/download/file.zip', '/tmp/download/file2.zip', '/', '/usr/local/bin', '/tmp/file.txt']
my_dict = defaultdict(list)

for item in my_list:
    if os.path.isdir(item):   # To check path is a directory
        _ = my_dict[item]   # will set default value as empty list
    else:
        path, file = os.path.split(item)
        my_dict[path].append(file)

# where `my_dict` is `dict` object holding value:
# {'/tmp/download': ['file.zip', 'file2.zip'], '/tmp': ['file.txt'], '/usr/local/bin': [], '/': [], '/User/someuser': ['file.py']}
</code></pre>
<p>In order to convert <code>my_dict</code> to list of desired format, do:</p>
<pre><code>&gt;&gt;&gt; my_dict.items()
[   # Formatted in order to make more readable
    ('/tmp/download', ['file.zip', 'file2.zip']), 
    ('/tmp', ['file.txt']), 
    ('/usr/local/bin', []), 
    ('/', []), 
    ('/User/someuser', ['file.py'])
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/os.path.html#os.path.split" rel="nofollow noreferrer"><code>os.path.split</code></a> to split the path names into the dirname and the basename.  Then use <code>itertools.groupby</code> to group the files together.</p>
<pre><code>import os
from itertools import groupby


l= ['/User/someuser/file.py', '/tmp/download/file.zip', '/tmp/download/file2.zip', '/', '/usr/local/bin', '/tmp/file.txt']

print([(k, tuple(i[1] for i in g)) for k, g in groupby(map(os.path.split, sorted(l)), key=lambda x: x[0])])
</code></pre>
<p>prints </p>
<pre><code>[('/', ('',)), ('/User/someuser', ('file.py',)), ('/tmp/download', ('file.zip', 'file2.zip')), ('/tmp', ('file.txt',)), ('/usr/local', ('bin',))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">groupby</a> and <a href="https://docs.python.org/2/library/os.path.html" rel="nofollow noreferrer">os.path</a></p>
<pre><code>from itertools import groupby
import os
L = ['/User/someuser/file.py', '/tmp/download/file.zip', '/tmp/download/file2.zip', '/', '/usr/local/bin', '/tmp/file.txt']
#if all files have extention, convert '/usr/local/bin' to '/usr/local/bin/'
L_fix =  [e if os.path.splitext(e)[1] else os.path.join(e,"") for e in L]
[(k,tuple(map(os.path.basename,v))) for k,v in groupby(L_fix, os.path.dirname)]
</code></pre>
<p>you get,</p>
<pre><code>[('/User/someuser', ('file.py',)),
 ('/tmp/download', ('file.zip', 'file2.zip')),
 ('/', ('',)),
 ('/usr/local/bin', ('',)),
 ('/tmp', ('file.txt',))]
</code></pre>
</div>
<span class="comment-copy">Can you show what you have tried so far?</span>
<span class="comment-copy">I have to realize it in pipeline, can't find a way.</span>
<span class="comment-copy">If one of these answers <a href="http://stackoverflow.com/help/someone-answers">addressed your problem</a>, please consider <a href="http://meta.stackexchange.com/questions/5234">accepting it</a> by clicking on the check mark/tick to the left of the answer, turning it green. This marks the question as resolved to your satisfaction, and awards <a href="http://stackoverflow.com/help/whats-reputation">reputation</a> both to you and the person who answered. Once you have &gt;= 15 reputation points, you may also upvote the answer if you wish. There is no obligation to do either.</span>
<span class="comment-copy">can't mark because my reiting is 1</span>
<span class="comment-copy">Thank you very much for help</span>
<span class="comment-copy"><code>/usr/local/bin</code> is an empty dir</span>
<span class="comment-copy">@JoseRicardoBustosM. You surely have a very <i>pythonic eyes</i> ;) Updated the answer.</span>
<span class="comment-copy"><code>groupby</code>, <code>map</code>, <code>sorted</code>, and <i>list comprehension</i> for achieving the single line solution is not the good idea over here. It seems to be toooo complex for simple task</span>
<span class="comment-copy">Thank you very much !</span>
<span class="comment-copy">That's exactly what i need</span>
<span class="comment-copy"><code>/usr/local/bin</code> is an empty dir</span>
<span class="comment-copy">You can use <code>itemgetter(0)</code> instead of a lambda, I can be more readableâ€¦</span>
<span class="comment-copy">Thank you for help</span>
