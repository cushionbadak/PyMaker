<div class="post-text" itemprop="text">
<p>This is a piece of Python code to learn inheritance. </p>
<pre><code>class Animal():
    __name= None
    __sound = None

    def __init__(self, name , sound):
        self.__name= name
        self.__sound = sound 
    def ToString(self):
        print ("The {} has the sound  {}".format(self.__name ,
                                                self.__sound))


cat = Animal('Tiger' , 'roars')
cat.ToString()


class Panther(Animal):
    __owner = None

    def __init__(self , name ,sound ,owner):
        self.__owner = owner
        super(Panther ,self).__init__(name, sound)
    def ToString(self):
        print(self.__owner)
        print(self.__name) 

leopard = Panther('Leopard' , 'roars' , 'Senegal')
leopard.ToString()
</code></pre>
<p>But when I try to run it in Pycharm, I get the following error: </p>
<blockquote>
<p>/Library/Frameworks/Python.framework/Versions/3.5/bin/python3.5
  /Users/venkat/PycharmProjects/PythonOneVideo/main.py The Tiger has the
  sound  roars Senegal Traceback (most recent call last):   File
  "/Users/venkat/PycharmProjects/PythonOneVideo/main.py", line 41, in
  
      leopard.ToString()   File "/Users/venkat/PycharmProjects/PythonOneVideo/main.py", line 35, in
  ToString
      print(self.__name) AttributeError: 'Panther' object has no attribute '_Panther__name'</p>
<p>Process finished with exit code 1</p>
</blockquote>
<p>What's wrong with calling the super class constructor?
Why this error has happened and how to solve this?
Any help would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>several issues:</p>
<ul>
<li>python 3 syntax for <code>super</code>: <code>super().__init__(name, sound)</code></li>
<li><a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow noreferrer">name mangling</a>: instance variables starting with <code>__</code> (two underscores) will get <code>_ClassName</code> prepended to them. child classes will not be able to access them the usual way.</li>
<li><code>ToString</code>: why not <code>__str__</code> (and do not print inside <code>__str__</code>; just return a <code>str</code>)?</li>
<li>and what are the class variables (<code>_name</code> etc) for? why not just have them as instance variables (<code>self._name</code>)?</li>
</ul>
<p>this works bus is incomplete...</p>
<pre><code>class Animal():
    # _name= None
    # _sound = None

    def __init__(self, name , sound):
        self._name= name
        self._sound = sound

#    def ToString(self):
#        print ("The {} has the sound  {}".format(self._name ,
#                                                self._sound))

    def __str__(self):
        fmt = 'The {self._name} has the sound {self._sound}'
        return fmt.format(self=self)

cat = Animal('Tiger' , 'roars')
print(cat)

class Panther(Animal):
    # _owner = None

    def __init__(self , name ,sound ,owner):
        self.__owner = owner
        super().__init__(name, sound)

#    def ToString(self):
#        # print(self._owner)
#        print(self._name)

leopard = Panther('Leopard' , 'roars' , 'Senegal')
print(leopard)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Remove the two leading underscore from your attributes:</p>
<pre><code>class Animal():
    name= None
    sound = None

    def __init__(self, name , sound):
        self.name= name
        self.sound = sound 
    def ToString(self):
        print ("The {} has the sound  {}".format(self.name ,
                                                self.sound))


cat = Animal('Tiger' , 'roars')
cat.ToString()


class Panther(Animal):
    owner = None

    def __init__(self , name ,sound ,owner):
        self.owner = owner
        super(Panther ,self).__init__(name, sound)
    def ToString(self):
        print(self.owner)
        print(self.name) 

leopard = Panther('Leopard' , 'roars' , 'Senegal')
leopard.ToString()
</code></pre>
<p>Output:</p>
<pre><code>The Tiger has the sound  roars
Senegal
Leopard
</code></pre>
<p>The two leading underscores make your attributes "private".
This is done my <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow noreferrer">name mangling</a>, i.e. adding <code>_ClassName</code> in front of all attributes with two leading underscores. This prevents the inheritance you do from working.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your error stems from the name mangling Python performs when you prepend a variable name with <code>__</code>.  If you simply use names without the double trailing underscores, this works fine:</p>
<pre><code>class Animal():
    def __init__(self, name , sound):
        self._name= name
        self._sound = sound 
    def ToString(self):
        print ("The {} has the sound  {}".format(self._name ,
                                                self._sound))


cat = Animal('Tiger' , 'roars')
cat.ToString()


class Panther(Animal):

    def __init__(self , name ,sound ,owner):
        self._owner = owner
        super(Panther ,self).__init__(name, sound)
    def ToString(self):
        print(self._owner)
        print(self._name)
</code></pre>
<p>and prints out:</p>
<pre><code>&gt;&gt;&gt; leopard = Panther('Leopard' , 'roars' , 'Senegal')
&gt;&gt;&gt; leopard.ToString()
The Tiger has the sound  roars
Senegal
Leopard
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python">The meaning of a single- and a double-underscore before an object name in Python</a></span>
<span class="comment-copy">Thanks Mike.It helped</span>
<span class="comment-copy">This is Python's way to create something that can be use similarly to private attributes in other languages.</span>
