<div class="post-text" itemprop="text">
<p>I'm trying to override an object's next function using the code below (python 2.7).</p>
<p>When the object's <code>next</code> method is called directly, the new function is invoked. However when I call the builtin <code>next()</code> function on my object (which, <a href="https://docs.python.org/2/library/functions.html#next" rel="noreferrer">according to the docs</a>, should call the instance's next method), the ORIGINAL function is invoked.</p>
<p>Can someone explain this behaviour?</p>
<pre><code>class Test(object):
    def __iter__(self):
        return self
    def next(self):
        return 1

test = Test()
def new_next(self):
    return 2

test.next = type(test.__class__.next)(new_next, test, test.__class__)
print test.next() # 2
print next(test) # 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I'm reading <a href="https://github.com/python/cpython/blob/a1dadde8651e7a35189b3e05cbb10625abd8d255/Objects/typeobject.c#L4818" rel="nofollow noreferrer">this source</a> correctly it seems like the iterator is set when the class is defined. I might read it wrong though. I'm guessing it's for fast lookup of the <code>next</code> function (setting it as a <a href="https://docs.python.org/2.7/library/stdtypes.html#iterator.next" rel="nofollow noreferrer">slot</a>) since it's used in loops etc.</p>
<p>Given that, the following seems to do what you're after:</p>
<pre><code>&gt;&gt;&gt; test.__class__.next = type(test.__class__.next)(new_next, test, test.__class__)
&gt;&gt;&gt; next(test)
2
</code></pre>
</div>
<span class="comment-copy">Interesting. Might be related to <a href="https://www.python.org/dev/peps/pep-3114" rel="nofollow noreferrer">PEP 3114</a>?</span>
<span class="comment-copy">@AndréLaszlo looks like that PEP is for Python 3</span>
<span class="comment-copy">@warvariuc Oops, you're right.</span>
<span class="comment-copy">Thanks! I actually ended up with a different approach, when I dynamically create a class that inherits from Test, and override the next method there. This way I'm not changing the original class.</span>
<span class="comment-copy">Sounds safer somehow, instead of relying on some undocumented behavior and some guy half-guessing on SO :) Very interesting though, thanks for posting.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/34490998/why-typex-enter-x-instead-of-x-enter-in-python-standard-context/34491119#34491119" title="why typex enter x instead of x enter in python standard context">stackoverflow.com/questions/34490998/…</a> <a href="https://docs.python.org/3/reference/datamodel.html#special-method-lookup" rel="nofollow noreferrer">docs.python.org/3/reference/…</a></span>
