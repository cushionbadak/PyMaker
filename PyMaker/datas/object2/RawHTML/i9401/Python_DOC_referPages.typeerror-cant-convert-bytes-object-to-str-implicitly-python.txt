<div class="post-text" itemprop="text">
<p>I am trying to create an authentication signature for an API I am trying to consume in Python, what I am trying to is, </p>
<p>1) The signature is created by using a copy of the query string part of the URI, an example of which is shown below.</p>
<blockquote>
<p>?customerId=johns Trucks&amp;userName=BobH&amp;timeStamp=2014-05-01T11:00:00Z</p>
</blockquote>
<p>2) Ensure you encode your private key using UTF8 encoding.  Once encoded you can create your signature by using your private key</p>
<p>3) Convert the signature created from step 2 into base64.</p>
<p>4) If we use a private key of fakekey, the signature for the above URI string will look like this after it has been calculated with HMAC-SHA1 and then converted to base64</p>
<blockquote>
<p>PeKNVo1BAiuZyHxIdMisidG92bg=</p>
</blockquote>
<p>5) The signature is now ready to be added to the Http authentication header for the request.</p>
<p>The above is taken from straight from the documentation and below is my attempt,</p>
<pre><code>private_key = bytes("auth", encoding='utf-8');
public_key = bytes("200000", encoding='utf-8');
customer_id = "HFH";
username = "API";

date_utc = datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%SZ")
message = bytes('?customerId=HFH&amp;userName=API&amp;timeStamp=' + date_utc, encoding='utf-8')

signature = base64.b64encode(hmac.new(private_key, message, digestmod=hashlib.sha1).digest())
encoded_sig = base64.b64encode(signature)

url = 'https://xxx.xxxxxxx.net/api/FleetVehicles?customerId=HFH&amp;userName=API&amp;timeStamp=' + date_utc;

data = requests.get(url, headers={'authorization:' + public_key + ":" + encoded_sig});
</code></pre>
<p>My code is resulting in the following error, </p>
<blockquote>
<p>TypeError: Can't convert 'bytes' object to str implicitly</p>
</blockquote>
<p>The error is coming from the final line of my code example.</p>
</div>
<div class="post-text" itemprop="text">
<p>I suppose your code is python 3.</p>
<p>Starting with Python 3, strings are now represented either as <em>unicode</em> strings or as <em>binary</em> data as stated <a href="https://docs.python.org/3/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit" rel="nofollow noreferrer">here</a></p>
<blockquote>
<p>Python 3.0 uses the concepts of text and (binary) data instead of
  Unicode strings and 8-bit strings. All text is Unicode; however
  encoded Unicode is represented as binary data. The type used to hold
  text is str, the type used to hold data is bytes. The biggest
  difference with the 2.x situation is that any attempt to mix text and
  data in Python 3.0 raises TypeError, whereas if you were to mix
  Unicode and 8-bit strings in Python 2.x, it would work if the 8-bit
  string happened to contain only 7-bit (ASCII) bytes, but you would get
  UnicodeDecodeError if it contained non-ASCII values.</p>
</blockquote>
<p>What you want here is either:</p>
<pre><code>headers={b'authorization:' + public_key + b":" + encoded_sig})
</code></pre>
<p>(Note the <code>b</code> before the <em>static</em> strings)</p>
<p>or:</p>
<pre><code>headers={'authorization:' + public_key.decode('utf-8') + ":" + encoded_sig.decode('utf-8')})
</code></pre>
<p>(Note the <code>.decode()</code> to convert your <em>bytes</em> as <em>str</em>)</p>
</div>
