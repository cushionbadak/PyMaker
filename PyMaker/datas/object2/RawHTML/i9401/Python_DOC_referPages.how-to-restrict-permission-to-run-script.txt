<div class="post-text" itemprop="text">
<p>I would like to restrict ability to run my Python 3 script to certain host and users on Linux. Is there any Python 3.x build in function or library which would allow me to do this relatively easy please?</p>
</div>
<div class="post-text" itemprop="text">
<p>Not exactly a Python answer, but a Linux one - you may add all users who can run a script to some group:</p>
<pre><code>groupadd allowed-users 
usermod -a -G allowed-users some-user
</code></pre>
<p>Then change group of the script and restrict read access to it only for group (if user can't read a script it can't run it).</p>
<pre><code>chown allowed-users script.py
chmod 640 script.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm sure there is a better way of doing that but below is my first attempt. </p>
<pre><code>#!/usr/bin/python3
import getpass
import socket

hostname = socket.gethostname()
username = getpass.getuser()
allowedusers = 'user1'
allowedhosts = 'host1'

if hostname in allowedhosts:
    print('hostname allowed')
    if username in allowedusers:
        print('user allowed')

    else:
        print('username not allowed')
        exit()
else:
   print('hostname not allowed')
   exit()

print('script will continue to run as hostname and user are allowed')
</code></pre>
</div>
<span class="comment-copy">You want to restrict your scripts execution permissions from within the script itself? For that it would have to be executed first.</span>
<span class="comment-copy">Are you need to restrict only a given script or running Python scripts at all?</span>
<span class="comment-copy">Correct, once script checks user and host name it will either continue to run or stop and exit.</span>
<span class="comment-copy">You have the <code>os</code> module, e.g.: <a href="https://docs.python.org/3/library/os.html?highlight=os#os.getlogin" rel="nofollow noreferrer"><code>os.getlogin</code></a> and <a href="https://docs.python.org/3/library/os.html?highlight=os#os.getgrouplist" rel="nofollow noreferrer"><code>os.getgrouplist</code></a> - also see <a href="http://stackoverflow.com/questions/842059/is-there-a-portable-way-to-get-the-current-username-in-python">this question</a></span>
<span class="comment-copy">@UnholySheep - many thanks that's also useful.</span>
<span class="comment-copy">Thanks that's also good idea to achieve similar.</span>
<span class="comment-copy">Be aware of the fact that acording to docs <a href="https://docs.python.org/2.7/library/getpass.html" rel="nofollow noreferrer">docs.python.org/2.7/library/getpass.html</a> getpass just checks some env variables, so if user runs a script as <code>LOGNAME='not-really-me' python script.py</code> then <code>getuser()</code> will return <code>not-really-me</code>. I strongly recommend doing such checks on the OS level.</span>
<span class="comment-copy">@pax0r I agree, however this is only sort of exercise rather than production with expectations to be super secure. Thanks for your feedback.</span>
<span class="comment-copy">even if so, still someone else may read this, so it is worth noticing ;)</span>
