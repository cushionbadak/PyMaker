<div class="post-text" itemprop="text">
<p>for some reason I have to determine if a big number is a fibonacci number, so I copy some code from internet and modified it a little, it seems not operate well when it's big input. here is code:</p>
<pre><code># python program to check if x is a perfect square

import math

# A utility function that returns true if x is perfect square
def isPerfectSquare(x):
    s = int(math.sqrt(x))
    boo = (s*s == x);
    return boo

# Returns true if n is a Fibinacci Number, else false
def isFibonacci(n):

    # n is Fibinacci if one of 5*n*n + 4 or 5*n*n - 4 or both
    # is a perferct square
    b = 5*n*n+4;
    c = 5*n*n-4;
    return isPerfectSquare(b) or isPerfectSquare(c)

# A utility function to test above functions

a = int(input("give me the number"));
print(isFibonacci(a))
</code></pre>
<p>when I input <code>610</code>, it output true as planed, but when I input </p>
<pre><code>"215414832505658809004682396169711233230800418578767753330908886771798637" 
</code></pre>
<p>which I know is the 343rd fibonacci number from another java program I made. it output false surprisingly. So is it because the number is too large so it makes mistakes? but I think python should be able to handle enormous big number because it is based on the memory you have? is the problem in my program or is it because it's too big input? Thx!</p>
</div>
<div class="post-text" itemprop="text">
<p>As already pointed out, the problem arise solely from <code>math.sqrt</code>, which is a <em>floating point</em> operation, meaning not exactly precise (unlike integer operations). The precision of floats in python is about 16, meaning that precision float operations on a number with more than 16 digits <em>always</em> goes bad.</p>
<p>Instead of using floats (<code>math.sqrt</code> converts your integer to float implicitly), you can use the <code>Decimal</code> type from the <code>decimal</code> module, included in the standard library. This is a floating point type with variable, controllable precision. To fix your program, simply replace your <code>isPerfectSquare</code> function with this:</p>
<pre><code>import decimal
def isPerfectSquare(x):
    # Set decimal precision and convert x to Decimal type
    decimal.getcontext().prec = len(str(x))
    x = decimal.Decimal(x)
    # Check if perfect square
    s = int(x.sqrt())
    boo = (s*s == x);
    return boo
</code></pre>
<p>Here the precision is set equal to the number of digits of the input number, which is given by the length of the <code>str</code> representation of the input number.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a loss of precision. For <code>n &gt; 1e45</code> (approximately), <code>(n**0.5)**2 != n</code>. Try using <code>gmpy2.isqrt()</code> and <code>gmpy2.square()</code> from module <code>gmpy2</code> - they are designed to work with very large integer numbers.</p>
</div>
<div class="post-text" itemprop="text">
<p>I checked it with Fibonacci numbers produced from mupad in Matlab(use numlib::fibonacci(n)) . It's because of precision. Python can't detect more than 52 precision, so for numbers larger than 2^52, precision will be lost. You can checked it with 76th fibonacci number and 77th fibonacci number to see the probelm.
76th fibonacci number: 3416454622906707
77th fibonacci number: 5527939700884757</p>
</div>
<div class="post-text" itemprop="text">
<p>It is related to the fact that python loose precision after 52 digits (in total before and after the dot). You have to use <code>gmpy2.square()</code> imported from module <code>gmpy2</code> this is the only way you can handle big numbers.</p>
</div>
<span class="comment-copy">use <code>print()</code> to see what you have in variables and which part of code is execeuted - it helps to find problem . Or learn how to use debugger ;)</span>
<span class="comment-copy">@furas oh yeah I don't know how to debug in python... I'll figure it out tnt :P</span>
<span class="comment-copy">Have a look at this: <a href="https://docs.python.org/3/library/pdb.html" rel="nofollow noreferrer">docs.python.org/3/library/pdb.html</a></span>
<span class="comment-copy">Use the Newton's method of calculating <code>sqrt()</code> for large numbers like in this post:  <a href="http://stackoverflow.com/a/15391420/3160529">stackoverflow.com/a/15391420/3160529</a></span>
<span class="comment-copy">No particular need to pull in a library for isqrt: <a href="http://stackoverflow.com/a/15391420/2144669">stackoverflow.com/a/15391420/2144669</a></span>
<span class="comment-copy">Certainly not <i>the only</i> way. For starters, what about the decimal module, included in the standard library?</span>
