<div class="post-text" itemprop="text">
<p>Using Python 2.7 and working on below string replace problem, wondering if any better ideas in terms of algorithm space complexity and algorithm time complexity?</p>
<p>I create an additional list to represent result since string Python 2.7 is immutable and I also created an additional dictionary to speed-up look-up for character replacement table.</p>
<p>In the example, From: <code>"lod"</code> and To: <code>"xpf"</code> means when met with <code>l</code>, replace to <code>x</code> ; and when met with <code>o</code>, replace to <code>p</code>; and when met with <code>d</code>, replace to <code>f</code>.</p>
<pre><code>'''
Given "data", "from", and "to" fields, replaces all occurrences of the characters in the "from" field in the "data" field, with their counterparts in the "to" field.
Example:
Input:
Data: "Hello World"
From: "lod"
To: "xpf"
Output:
"Hexxp Wprxf"
'''

from collections import defaultdict
def map_strings(from_field, to_field, data):
    char_map = defaultdict(str)
    result = []
    for i,v in enumerate(from_field):
        char_map[v]=to_field[i]
    for v in data:
        if v not in char_map:
            result.append(v)
        else:
            result.append(char_map[v])

    return ''.join(result)

if __name__ == "__main__":
    print map_strings('lod', 'xpf', 'Hexxp Wprxf')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's efficient machinery in the standard modules for this. You first build a translation table using <a href="https://docs.python.org/2/library/string.html#string.maketrans" rel="nofollow noreferrer"><code>string.maketrans</code></a>, then call the <a href="https://docs.python.org/2/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate</code></a> method:</p>
<pre><code>import string

trans = string.maketrans('lod', 'xpf')
print "Hello World".translate(trans)
</code></pre>
<p><strong>output</strong></p>
<pre><code>Hexxp Wprxf
</code></pre>
<hr/>
<p>But if you want to do it manually, here's a way that's a little more efficient than your current code:</p>
<pre><code>def map_strings(from_field, to_field, data):
    char_map = dict(zip(from_field, to_field))
    return ''.join([char_map.get(c, c) for c in data])

s = map_strings('lod', 'xpf', 'Hello World')
print s    
</code></pre>
<hr/>
<p>Note that in Python 3 the <code>string.maketrans</code> function no longer exists. There's now a <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer"><code>str.maketrans</code></a> method, with slightly different behaviour.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <code>replace</code>:</p>
<pre><code>def map_strings(from_field, to_field, data):
    for f, t in zip(from_field, to_field):
        data = data.replace(f, t)
    return data
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer">str.maketrans</a></span>
<span class="comment-copy">@wwii Note the question is tagged <code>python-2.7</code>; the <code>str.maketrans</code> method only exists in Python 3, although Python 2 has the slightly different <code>string.maketrans</code> function, as I mention in my answer.</span>
<span class="comment-copy">@PM2Ring, aye  <code>string.maketrans</code> it is.</span>
<span class="comment-copy">@wwii, nice catch, how do you think <code>str.maketrans</code> implemented internally? Does it use similar approach like a mapping dictionary as I am using? Or some more efficient ideas?</span>
<span class="comment-copy">?? some kind of mapping I would guess.</span>
<span class="comment-copy">Thanks PM 2Ring, vote up for your answer. But why you think your method is more efficient than mine? I think we are using the same idea? :)</span>
<span class="comment-copy">Sure, that works, and it may even be more efficient than using <code>.translate</code> when <code>from_field</code> &amp; <code>to_field</code> are very short. But in general it will be less efficient due to making multiple method calls &amp; having to allocate a new string on each loop iteration. <code>.translate</code> doesn't have that problem because it can run at C speed manipulating the char data in a way that's not possible in Python, and it only translates the chars that are present in the source string, rather than looping over every char pair in <code>from_field</code> &amp; <code>to_field</code>.</span>
<span class="comment-copy">Thanks ebeneditos, vote up for your answer. How do you think <code>replace</code> works internally? Does it using a mapping dictionary as I did in my original post, or some more efficient ideas?</span>
<span class="comment-copy">@PM2Ring, nice catch, how do you think <code>.translate</code> implemented internally? Does it use similar approach like a mapping dictionary as we are using? Or some more efficient ideas?</span>
<span class="comment-copy">@LinMa Sorry, I'm not sure of the details in Python 3, but I <i>assume</i> that a dictionary (or dict-like mapping) is used to do the translation. In Python 2 a simple 256 element array is used. But in either case the translation is being executed in compiled C code, which is invariably faster &amp; more efficient than doing it in interpreted Python code.</span>
