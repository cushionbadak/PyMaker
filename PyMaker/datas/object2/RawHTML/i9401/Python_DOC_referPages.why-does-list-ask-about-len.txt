<div class="post-text" itemprop="text">
<pre><code>class Foo:
    def __getitem__(self, item):
        print('getitem', item)
        if item == 6:
            raise IndexError
        return item**2
    def __len__(self):
        print('len')
        return 3

class Bar:
    def __iter__(self):
        print('iter')
        return iter([3, 5, 42, 69])
    def __len__(self):
        print('len')
        return 3
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; list(Foo())
len
getitem 0
getitem 1
getitem 2
getitem 3
getitem 4
getitem 5
getitem 6
[0, 1, 4, 9, 16, 25]
&gt;&gt;&gt; list(Bar())
iter
len
[3, 5, 42, 69]
</code></pre>
<p>Why does <code>list</code> call <code>__len__</code>?  It doesn't seem to use the result for anything obvious.  A <code>for</code> loop doesn't do it.  This isn't mentioned anywhere in the <a href="https://docs.python.org/3/library/stdtypes.html#iterator-types">iterator protocol</a>, which just talks about <code>__iter__</code> and <code>__next__</code>.  </p>
<p>Is this Python reserving space for the list in advance, or something clever like that?  </p>
<p>(CPython 3.6.0 on Linux)</p>
</div>
<div class="post-text" itemprop="text">
<p>See the <a href="https://www.python.org/dev/peps/pep-0424/#rationale" rel="noreferrer">Rationale section from PEP 424</a> that introduced <code>__length_hint__</code> and offers insight on the motivation:</p>
<blockquote>
<p>Being able to pre-allocate lists based on the expected size, as estimated by <code>__length_hint__</code> , can be a significant optimization. <em>CPython has been observed to run some code faster than PyPy, purely because of this optimization being present.</em></p>
</blockquote>
<p>In addition to that, the documentation <a href="https://docs.python.org/3/reference/datamodel.html#object.__length_hint__" rel="noreferrer">for <code>object.__length_hint__</code></a> verifies the fact that this is purely an optimization feature:</p>
<blockquote>
<p>Called to implement <code>operator.length_hint()</code>. Should return an estimated length for the object (which may be greater or less than the actual length). The length must be an integer <code>&gt;= 0</code>. <em>This method is <strong>purely an optimization</strong> and is never required for correctness</em>.</p>
</blockquote>
<p>So <code>__length_hint__</code> is here because it can result in some nice optimizations.</p>
<p><code>PyObject_LengthHint</code>, <a href="https://github.com/python/cpython/blob/master/Objects/abstract.c#L88" rel="noreferrer">first tries to get a value from <code>object.__len__</code>  (if it is defined)</a> and then tries to see if <code>object.__length_hint__</code> is available. If neither is there, it returns a default value of <code>8</code> for lists. </p>
<p><code>listextend</code>, which is called from <code>list_init</code> as Eli stated in his answer, was modified according to this PEP to offer this optimization for anything that defines either a <code>__len__</code> or a <code>__length_hint__</code>. </p>
<p><code>list</code> isn't the only one that benefits from this, of course, <a href="https://github.com/python/cpython/blob/0217f632ee40ec3dab11e6f88e82b6ed24974861/Objects/bytesobject.c#L2688" rel="noreferrer"><code>bytes</code> objects do</a>:</p>
<pre><code>&gt;&gt;&gt; bytes(Foo())
len
getitem 0
...
b'\x00\x01\x04\t\x10\x19'
</code></pre>
<p>so <a href="https://github.com/python/cpython/blob/0217f632ee40ec3dab11e6f88e82b6ed24974861/Objects/bytearrayobject.c#L1616" rel="noreferrer">do <code>bytearray</code> objects but, only when you <code>extend</code> them</a>:</p>
<pre><code>&gt;&gt;&gt; bytearray().extend(Foo())
len
getitem 0
...
</code></pre>
<p>and <code>tuple</code> objects which create <a href="https://github.com/python/cpython/blob/0bdd9e516e8cb7f4a7d8198bf36194c8328c0f2c/Objects/abstract.c#L1794" rel="noreferrer">an intermediary sequence to</a> populate themselves:</p>
<pre><code>&gt;&gt;&gt; tuple(Foo())
len
getitem 0
...
(0, 1, 4, 9, 16, 25)
</code></pre>
<hr/>
<p>If anybody is wandering why exactly <code>'iter'</code> is printed <em>before</em> <code>'len'</code> in class <code>Bar</code> and not after as happens with class <code>Foo</code>: </p>
<p>This is because if the object in hand defines an <code>__iter__</code> <a href="https://github.com/python/cpython/blob/0bdd9e516e8cb7f4a7d8198bf36194c8328c0f2c/Objects/abstract.c#L3118" rel="noreferrer">Python <em>will first call it</em> to get the iterator</a>, thereby running the <code>print('iter')</code> too. The same doesn't happen if it falls back to using <code>__getitem__</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>list</code> is a list object constructor that will allocate an initial slice of memory for its contents.  The list constructor attempts to figure out a good size for that initial slice of memory by checking the length hint or the length of any object passed into the constructor .  See the call to <a href="https://github.com/python/cpython/blob/0bdd9e516e8cb7f4a7d8198bf36194c8328c0f2c/Objects/abstract.c#L82" rel="nofollow noreferrer"><code>PyObject_LengthHint</code></a> in the Python <a href="https://github.com/python/cpython/blob/master/Objects/listobject.c#L833" rel="nofollow noreferrer">source here</a>. This place is called from the list constructor -- <a href="https://github.com/python/cpython/blob/master/Objects/listobject.c#L2297" rel="nofollow noreferrer">list_init</a></p>
<p>If your object has no <code>__len__</code> or <code>__length_hint__</code>, that's OK -- a <a href="https://github.com/python/cpython/blob/0bdd9e516e8cb7f4a7d8198bf36194c8328c0f2c/Objects/abstract.c#L82" rel="nofollow noreferrer">default value of 8</a> is used; it just may be less efficient due to reallocations.</p>
</div>
<span class="comment-copy">Yes, it's probably reserving the space. Perhaps someone can view the compiled code and create a good answer.</span>
<span class="comment-copy">This is a great find for the motivation!</span>
<span class="comment-copy">@EliBendersky <a href="https://github.com/python/cpython/blame/master/Objects/listobject.c#L834" rel="nofollow noreferrer">git blame</a> is a miracle worker in these cases :-D</span>
<span class="comment-copy">@wim Please don't start a revert-war. The original asking <i>"Why does list ask about len()?"</i> is too vague and bogus since it doesn't say that it's specifically the <code>list()</code> constructor that asked for the length-hint. That's all.</span>
<span class="comment-copy">Is that a CPython implementation detail, or a documented part of Python language?  Because it can cause an infinite recursion if you don't know about that call in advance.</span>
<span class="comment-copy">"<i>it needs a size</i>" and "<i>a default value is used</i>" seem to contradict each other. Instead of "it needs a size" how about "it uses the size to preallocate memory."</span>
<span class="comment-copy">@Robᵩ: I meant to say it needs some size to get started. Not that it needs <code>__len__</code>, just some size. The size can be either from <code>__len__</code> or from a default. Feel free to propose and edit and let editors decide what the clearer phrasing is - I don't feel strongly about it</span>
<span class="comment-copy">Note that the optimization of knowing the <code>len</code> in advance could turn out to be a disadvantage if you lie (see OP) about the length. :-)</span>
<span class="comment-copy">@wim: not 100% sure but I think this is a CPython implementation detail, which also makes it a de-facto part of the Python language since there's no official implementation-agnostic spec. See additional discussion in <a href="http://stackoverflow.com/questions/37189968/how-to-have-list-consume-iter-without-calling-len" title="how to have list consume iter without calling len">stackoverflow.com/questions/37189968/…</a> -- I don't think a correctly/reasonably implemented <code>__len__</code> should cause issues</span>
