<div class="post-text" itemprop="text">
<p>How would you test a simple method that calls another method?  Im attempting to test the wssender method currently.</p>
<pre><code>in worker.py
---------------- 
class Worker(self):
    def __init__(self, ws)
        self.ws = ws

    def wssender(self,str):
        newstr = '&lt;br&gt;{0}'.format(str)
        self.ws.sendMessage(newstr.encode())
</code></pre>
<p>and the test code </p>
<pre><code>in unit_test.py
-----------------
class SimpleTest(unittest.TestCase):
    def test_wssender(self):
        msg = 'test send message'
        wss=worker.Worker
        wss.wssender(wss, msg)
        expected = "&lt;br&gt;test send message"
        self.assertEqual(&lt;something&gt;, expected)
</code></pre>
<p>There are two issues.   When running this test i get. (ws is a web socket)</p>
<pre><code>AttributeError: type object 'Worker' has no attribute 'ws'
</code></pre>
<p>and 
wssender does not return anything so i'm not sure what to test in this case.</p>
</div>
<div class="post-text" itemprop="text">
<p>How's this?</p>
<pre><code>import unittest
from unittest.mock import MagicMock

class Worker(object):
    def __init__(self, ws):
        self.ws = ws

    def wssender(self, str):
        newstr = '&lt;br&gt;{0}'.format(str)
        self.ws.sendMessage(newstr.encode())

class WorkerTests(unittest.TestCase):
    def test_wssender(self):
        # Arrange
        ws = MagicMock()
        ws.sendMessage = MagicMock()
        worker = Worker(ws)

        # Act
        worker.wssender('test send message')

        # Assert
        ws.sendMessage.assert_called_once_with(b'&lt;br&gt;test send message')

if __name__ == '__main__':
    unittest.main()
</code></pre>
<p><strong>Output</strong></p>
<pre><code>.
----------------------------------------------------------------------
Ran 1 test in 0.000s

OK
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I assume "class Worker(self)" is a typo and that it's really "class Worker(object)" (or any other base class).</p>
<p>wrt/ the first issue, you forgot to instanciate <code>Worker</code> in your test - you want:</p>
<pre><code>ws = WhateverWsIsSupposedToBe()
wss=worker.Worker(ws)
wss.wssender(msg)
</code></pre>
<p>Totally unrelated but <code>wssender()</code> is not a good name for a method - <code>sender</code> is a noon, methods are actions and should use verbs, so <code>wssend()</code> (or just <code>send()</code> FWIW) would be better.</p>
<p>Now with the second issue, you have a couple options. If what you want to test is the message formatting, just split it in another method:</p>
<pre><code>class Worker(object):
    def __init__(self, ws)
        self.ws = ws

    def prepare(self, msg):
        return '&lt;br&gt;{0}'.format(msg).encode(...)

    def send(self, msg):
        self.ws.sendMessage(self.prepare(msg))
</code></pre>
<p>so now you can test <code>Worker.prepare(msg)</code> in isolation.</p>
<p>If you want to test that <code>Worker.send(msg)</code> calls <code>self.ws.sendMessage(...)</code> (and calls it with the expected argument), you will have to mock <code>ws</code>. You can do this manually:</p>
<pre><code> class MockWs(object):
     def __init__(self):
         self.msg = None
     def sendMessage(self, msg):
         self.msg = msg

 class SimpleTest(unittest.TestCase):
     def test_send(self):
        ws = MockWs()
        msg = 'test send message'
        wss=worker.Worker(ws)
        wss.send(msg)
        expected = "&lt;br&gt;test send message"
        self.assertEqual(ws.msg, expected)   
</code></pre>
<p>Or you can use the <code>mock</code> library, cf Tacg's answer.</p>
</div>
<span class="comment-copy">You're injecting <code>ws</code> (I assume websocket) as a dependency to <code>Worker</code>, which is good. That means you can substitute it for a mock in your test code and then perform verifications on it. Look into using <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">unittest.mock</a>.</span>
<span class="comment-copy"><code>wss = worker.Worker</code> should be <code>wss = worker.Worker(ws)</code>. And you can mock <code>ws</code>.</span>
<span class="comment-copy">This works and it helps me better understand mocking so i can try it on other functions (much more complicated than this one).  I understand I should break up code to smaller functions and test those, but this is useful for code that I have already written.</span>
<span class="comment-copy">This helps, got it working, in this case don't want to modify old code, but going forward will attempt to break down code to smaller chunks.</span>
