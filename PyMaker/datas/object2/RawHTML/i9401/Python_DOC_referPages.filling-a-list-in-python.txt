<div class="post-text" itemprop="text">
<p>I'm new to Python. I'm trying to fill a list with the filenames of a bunch of images in a folder. They all begin with "frameinstance" and are then followed by a number from 0-40, i.e. "frameinstance0.png". I tried the code below, but I'm getting a <code>MemoryError</code> error.</p>
<pre><code>filenamelist = []
i = 0
for i in range(0,40):
  filenamelist = [str(filenamelist) + "frameinstance" + str(i)]
</code></pre>
<p>I also tried this. My output was close, but it's not a list.</p>
<pre><code>filenamelist = []
i = 0

for i in range(0,40):
  filenamelist = str(filenamelist) + "frameinstance" + str(i)

print(filenamelist)
</code></pre>
<p>the output is: <code>[]frameinstance0frameinstance1frameinstance2frameinstance3frameinstance4frameinstance5frameinstance6frameinstance7frameinstance8frameinstance9frameinstance10frameinstance11frameinstance12frameinstance13frameinstance14frameinstance15frameinstance16frameinstance17frameinstance18frameinstance19frameinstance20frameinstance21frameinstance22frameinstance23frameinstance24frameinstance25frameinstance26frameinstance27frameinstance28frameinstance29frameinstance30frameinstance31frameinstance32frameinstance33frameinstance34frameinstance35frameinstance36frameinstance37frameinstance38frameinstance39</code></p>
</div>
<div class="post-text" itemprop="text">
<p>With a basic list comprehension:</p>
<pre><code>filenamelist = ["frameinstance{}".format(i) for i in range(41)]
</code></pre>
<hr/>
<p>In the first code, you always change the value of <code>filenamelist</code>, by converting it to a string that is longer and longer, which ends up on a <code>MemoryError</code>. Check <a href="https://stackoverflow.com/a/41498006/7051394">Ryan's answer</a> for more about this, especially why it does not happen in the second code.</p>
<p>In the second code, you put <code>[]</code> in <code>filenamelist</code>, and then concatenate it with <code>"frameinstance" + str(i)</code>, so at every iteration, you concatenate <code>"frameinstancei"</code> at the end of this string.
You end up with a string beginning with <code>"[]"</code> and followed by <code>"frameinstancei"</code> 40 times.</p>
<hr/>
<p>Few things though:</p>
<ul>
<li>When you build a list, either use a list comprehension as above for short lists, or use the <code>append</code> method. Typically, write <code>filenamelist.append("frameinstance{}".format(i))</code> instead of <code>filenamelist = ...</code></li>
<li>
It is considered deprecated to print strings by writing <code>"blah" + str(x) + "blah"</code>. Instead, use the <code>format</code> method: <code>"blah{}blah".format(x)</code>.</li>
<li>Don't forget that <code>range(n)</code> gives you integers from <code>0</code> to <code>n-1</code>. Therefore, your calls should be <code>range(0,41)</code> instead of <code>range(0,40)</code>, and could just be <code>range(41)</code>.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The issue is that here:</p>
<pre><code>filenamelist = [str(filenamelist) + "frameinstance" + str(i)]
</code></pre>
<p><code>filenamelist</code> is a list, and <code>str(filenamelist)</code> will get you a string representation of that list: brackets <code>[</code> and <code>]</code>, surrounding a string representation (using <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer"><code>repr</code></a>) of every item in that list. Let’s look at how that expands:</p>
<pre><code>[]
['[]frameinstance0']
["['[]frameinstance0']frameinstance1"]
['["[\'[]frameinstance0\']frameinstance1"]frameinstance2']
['[\'["[\\\'[]frameinstance0\\\']frameinstance1"]frameinstance2\']frameinstance3']
['[\'[\\\'["[\\\\\\\'[]frameinstance0\\\\\\\']frameinstance1"]frameinstance2\\\']frameinstance3\']frameinstance4']
</code></pre>
<p>Oops. The string representation of a string includes its quotation marks, which have to be backslash-escaped at some point. The backslashes also have to be escaped with another backslash, resulting in exponential backslash growth. Let’s do the math:</p>
<ul>
<li>the third string representation has 2 single quotes and 0 backslashes</li>
<li>every new iteration adds 2 single quotes, 1 backslash for every backslash, and 1 backslash for every single quote</li>
</ul>
<p>After 40 times around the loop, you end up with a list with one string containing 274 billion backslashes, which is a lot of backslashes to fit in memory.</p>
<p>The issue here was converting the list to a string to concatenate another string to it; you were probably going for concatenating a list to a list instead of a string to a string. That’s doable:</p>
<pre><code>filenamelist = filenamelist + ["frameinstance" + str(i)]
</code></pre>
<p>Typically, though, you would use the list’s <code>append</code> method to add one item in place.</p>
<pre><code>filenamelist.append("frameinstance" + str(i))
</code></pre>
<p>Now is a good time to note that Python has some helpful string-formatting tools to format numbers (and more) into strings:</p>
<pre><code>"frameinstance%d" % (i,)
"frameinstance{}".format(i)
f"frameinstance{i}"  # Python 3.6+
</code></pre>
<p>and give a preview of the short way you’ll likely know how to write this in the future!</p>
<pre><code>filenamelist = [f"frameinstance{i}" for i in range(0, 40)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to add the object into the list</p>
<pre><code>filenamelist = []
i = 0
for i in range(0,40):
    filenamelist.append("frameinstance" + str(i))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are really close with your first pass.  A few things to consider:</p>
<ol>
<li><p>you don't need to initialize <code>filenamelist</code> or <code>i</code>.</p></li>
<li><p>you can use list comprehension to put the for loop inside the list construction <code>filenamelist = ["frameinstance{}".format(i) for i in range(41)]</code></p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<pre><code>['frameinstance{}'.format(i) for i in range(0,41)]
</code></pre>
<ol>
<li>range(start, end) do not include end <code>range(0, 40)</code> will end at 39</li>
<li>you need to construct a list not string, use list comprehension is recommend.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>filenamelist = []
for i in range(41):
    filenamelist.append("frameinstance%s.png" % i)
</code></pre>
<p>Or more pythonic (and faster, for loops are slow in python):</p>
<pre><code>filenamelist = ["frameinstance%s.png" % i for i in range(41)]
</code></pre>
<p>You were getting a MemoryError because you were iteratively adding the list to itself causing you to run out of RAM :P.</p>
</div>
