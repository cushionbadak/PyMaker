<div class="post-text" itemprop="text">
<p>I have a variable that points to a specific class instance's method.
Lets say there is a class called <code>Client</code> that implements a method <code>get</code>.
A single instance called <code>client</code> is created for <code>Client</code>, and a variable <code>get_func</code> is assigned with client's <code>get</code>.</p>
<p>For example, lets assume I have the following simplified code:</p>
<pre><code>class Client:
    def get(self):
        print("This is the get function!")

client = Client()
get_func = client.get
</code></pre>
<p>I have little actual control over <code>get_func</code> and how it's used, I cannot change that.</p>
<p>I would now want to make sure <code>get_func</code> has the <code>Client.get</code>.</p>
<p>The trivial test <code>get_func == Client.get</code> does not work, as <code>get_func</code> is a bound method of a specific <code>Client</code> instance.
I also cannot get the <code>client</code> instance directly (but a way to get the <code>self</code> of a bound method is a valid option, if only I knew how to do that)</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Client.get</code> is either a <em>function</em> object (Python 3), or an <em>unbound method</em> (Python 2). <code>Client().get</code> on the other hand, is a <em>bound method</em>. Methods are wrappers around a function object, recording the instance they are bound to (if there is an instance) to pass in as the <code>self</code> argument. See the <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer"><em>Python descriptor How-to</em></a> as to how Python produces methods from functions.</p>
<p>You can unwrap both a bound method and an unbound method to get the underlying function object that they wrap, and test that, with the <code>__func__</code> attribute:</p>
<pre><code>get_func.__func__ is Client.get   # Python 3
get_func.__func__ is Client.get.__func__ # Python 2, unwrap the unbound method
</code></pre>
<p>If you need to make your code compatible with both Python 2 <em>and</em> 3, you could create a simple helper function:</p>
<pre><code>def unwrap_method(f):
    return getattr(f, '__func__', f)
</code></pre>
<p>and use that:</p>
<pre><code>unwrap_method(get_func) is unwrap_method(Client.get)
</code></pre>
</div>
<span class="comment-copy">Try <code>get_func.__func__ is Client.get</code>.</span>
