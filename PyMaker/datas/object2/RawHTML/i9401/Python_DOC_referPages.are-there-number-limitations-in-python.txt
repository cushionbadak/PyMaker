<div class="post-text" itemprop="text">
<p>I have made a Python 3 program to calculate pi for a school project, but it always stops at 16 decimal places. Is there a limit to the length of numbers in python? If so is there a language that I could use that will let me continue?</p>
<pre><code>accuracy = int(input("accuracy:  "))

current = 2
opperation = "+"
number = 3
count = 1

for i in range (accuracy):
    if opperation == "-":
        number = number - (4/(current*(current+1)*(current+2)))
        opperation = "+"
    elif opperation == "+":
        number = number + (4/(current*(current+1)*(current+2)))
        opperation = "-"
    current += 2
    print(str(count).zfill(8)) + ":    " + str(number)
    count += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no restriction if you are working with integers and Python 3.x. The precision you get using floating point numbers is however limited. A Python <code>float</code> (like <code>3.14</code>) is really a C <code>double</code>, which have about 16 decimals of precision, as you say.</p>
<p>You can use the <code>decimal</code> module to create and work with other floating point numbers with arbitrary precision. Example code:</p>
<pre><code># Normal Python floats
a = 0.000000000000000000001
b = 1 + 2*a
print(b)  # Prints 1.0

# Using Decimal
import decimal
decimal.getcontext().prec = 100  # Set the precision
a = decimal.Decimal('0.000000000000000000001')
b = 1 + 2*a
print(b)  # Prints 1.000000000000000000002
</code></pre>
<p>See <a href="https://docs.python.org/3/library/decimal.html">the docs</a> for more information on <code>decimal</code>.</p>
</div>
<span class="comment-copy">Use <code>decimal</code> module to avoid length restrictions and, importantly for your case, to avoid floating-point imprecision.</span>
<span class="comment-copy">There's a limit to the precision you can get with a floating point number of a given size. But Python will let you show more digits: <code>from math import pi; print(format(pi, '.32f'))</code>.</span>
<span class="comment-copy">If you want to know exactly what the specs are for floats on your system, <code>import sys; print(sys.float_info)</code></span>
<span class="comment-copy">@jonrsharpe Note that everything after the initial 16 digits is <i>wrong</i>. The extra digits have absolutely nothing to do with Ï€.</span>
<span class="comment-copy">@jmd_dk <i>"There's a limit to the precision you can get with a floating point number of a given size."</i> - I literally opened with that!</span>
<span class="comment-copy">Note that using decimal will be slower than the built-in floating-point numbers.</span>
<span class="comment-copy">@Richard Indeed. Though in Python 3.3, the <code>decimal</code> module was <a href="https://docs.python.org/3/whatsnew/3.3.html#new-decimal" rel="nofollow noreferrer">sped up</a> by a factor ~100! For newer versions of Python, it should thus not be problematically slow.</span>
<span class="comment-copy">I think is worth notice that in documentation of the decimal module, there is a recipe to calculate pi</span>
