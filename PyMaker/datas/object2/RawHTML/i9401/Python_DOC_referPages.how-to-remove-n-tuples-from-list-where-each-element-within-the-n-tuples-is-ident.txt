<div class="post-text" itemprop="text">
<p>Let's say I have a list of n-tuples in Python, like so (using three-tuples in the example, but would want this to work for any tuple size):</p>
<pre><code>myList = [('a','b','c'),
          ('a','a','a'),
          ('b','b','b'),
          ('d','e','f')
     ]
</code></pre>
<p>I want to remove any n-tuple where each element of the n-tuple is the same. In the example above, I would want to remove the tuples <code>('a','a','a')</code> and <code>('b','b','b')</code> because each of the elements in those tuples is the same.</p>
<p>I wrote a nested for loop that does this, but it seems really inefficient / not very Pythonic to do it this way. Any ideas on how to do this more simply and efficiently?</p>
<pre><code>def tuple_removal(aList):
    elements = len(aList) # number of elements in the list
    tuple_size = len(aList[0]) # size of the tuple
    for i in reversed(range(elements)):
        same_element_count = 1 # initialize counter to 1
        for j in range(tuple_size-1):
            # add one to counter if the jth element is equal to the j+1 element
            same_element_count += aList[i][j] == aList[i][j+1]
        if same_element_count == tuple_size:
            # remove the tuple at the ith index if the count of elements that are the same
            # is equal to the size of the tuple
            del aList[i]
    return(aList)

myNewList = tuple_removal(myList)
myNewList

# Output
myNewList = [('a','b','c'),
          ('d','e','f')
     ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply use a <em>list comprehension</em> and check that the count of the first element in each matching tuple is not the same as the length of the tuple:</p>
<pre><code>&gt;&gt;&gt; r = [i for i in myList if i.count(i[0]) != len(i)]
&gt;&gt;&gt; r
[('a', 'b', 'c'), ('d', 'e', 'f')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="http://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/" rel="nofollow noreferrer"><em>list comprehension</em></a> and test to see if all elements in a given tuple are equal using the builtin <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all()</code></a> function.</p>
<pre><code>&gt;&gt;&gt; myList = [('a','b','c'),
          ('a','a','a'),
          ('b','b','b'),
          ('d','e','f')
     ]
&gt;&gt;&gt; 
&gt;&gt;&gt; [el for el in myList if not all(x == el[0] for x in el)]
[('a', 'b', 'c'), ('d', 'e', 'f')]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Convert each tuple to a set; if the result has length 1, all elements were the same. Use this in a list comprehension as a filter, keeping all tuples which have more than one unique element:</p>
<pre><code>def tuple_removal(lst):
    return [t for t in lst if len(set(t)) &gt; 1]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; myList = [('a','b','c'),
...           ('a','a','a'),
...           ('b','b','b'),
...           ('d','e','f')
...      ]
&gt;&gt;&gt; tuple_removal(myList)
[('a', 'b', 'c'), ('d', 'e', 'f')]
</code></pre>
</div>
<span class="comment-copy">I've tested all the answers here and I believe yours is the fastest ;-) +1</span>
<span class="comment-copy">Thanks! I'll take @leaf 's word for it on speed. 13 lines of code reduced to 1. This is great. (And thanks for all of the other answers too).</span>
