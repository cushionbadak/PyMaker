<div class="post-text" itemprop="text">
<p>I am interested in obtaining a general way to obtain a list of arguments and keyword arguments taken by a callable Python object. This is straight-forward for functions with the <code>inspect.getargspec</code> function, for example:</p>
<pre><code>import inspect
from functools import partial

def foo(*args, **kwargs):
    return args, kwargs

print(inspect.getargspec(foo))
&gt;&gt;ArgSpec(args=[], varargs='args', keywords='kwargs', defaults=None)

def bar(*args):
    return args

print(inspect.getargspec(bar))
&gt;&gt;ArgSpec(args=[], varargs='args', keywords=None, defaults=None)
</code></pre>
<p>However, this fails in cases such as these:</p>
<pre><code>partial_function = partial(foo, kwarg="value")

inspect.getargspec(partial_function)
&gt;&gt;TypeError: &lt;functools.partial object at 0x11748bc58&gt; is not a Python function

class Foo(object):
    def __call__(self, *args, **kwargs):
        return args, kwargs

foo_instance = Foo()

inspect.getargspec(foo_instance)
&gt;&gt;TypeError: &lt;__main__.Foo object at 0x116c13ed0&gt; is not a Python function

inspect.getargspec(zip)
&gt;&gt;TypeError: &lt;built-in function zip&gt; is not a Python function
</code></pre>
<p>Note, that there are ways to obtain the arguments for the partial function and for the callable object, i.e:</p>
<pre><code>inspect.getargspec(partial_function.func)
&gt;&gt;ArgSpec(args=[], varargs='args', keywords='kwargs', defaults=None)

inspect.getargspec(foo_instance.__call__)
&gt;&gt;ArgSpec(args=['self'], varargs='args', keywords='kwargs', defaults=None)
</code></pre>
<p>but I would like a more general way of obtaining these results, if at all possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>All these can be handled by using the <a href="https://docs.python.org/3/library/inspect.html#inspect.signature" rel="nofollow noreferrer"><code>inspect.signature</code></a> helper function which, as stated in its docs:</p>
<blockquote>
<p>Accepts a wide range of python callables, from plain functions and classes to <code>functools.partial()</code> objects.</p>
</blockquote>
<p>What <code>signature</code> does is it takes your callable and constructs a <code>Signature</code> object from it:</p>
<pre><code>&gt;&gt;&gt; from inspect import signature
&gt;&gt;&gt; s = signature(Foo())  # class as shown in your example
</code></pre>
<p>with the arguments now lying in the <code>parameters</code> mapping attribute for the <code>Signature</code> instance:    </p>
<pre><code>&gt;&gt;&gt; s.parameters
mappingproxy({'args': &lt;Parameter "*args"&gt;, 'kwargs': &lt;Parameter "**kwargs"&gt;})
</code></pre>
<p>With a <code>partial</code> object, you'd get the corresponding representation:</p>
<pre><code>&gt;&gt;&gt; def foo(a, b, c): pass
&gt;&gt;&gt; p = partial(foo, c = 30)
&gt;&gt;&gt; signature(p).parameters
&lt;Signature (a, b, *, c=20)&gt;
</code></pre>
<p>As for built-in functions such as <code>zip</code>, this isn't always possible, some of these functions don't expose the appropriate metadata to construct a signature, <a href="https://www.python.org/dev/peps/pep-0362/#some-functions-may-not-be-introspectable" rel="nofollow noreferrer">from <code>PEP 362</code></a>:</p>
<blockquote>
<p>Some functions may not be introspectable in certain implementations of Python. For example, in CPython, built-in functions defined in <code>C</code> provide no metadata about their arguments. Adding support for them is out of scope for this PEP.</p>
</blockquote>
<p>So, while <code>zip</code> isn't the type to expose information about itself, others are, e.g <code>all</code>:</p>
<pre><code>&gt;&gt;&gt; signature(all)
&lt;Signature (iterable, /)&gt;
</code></pre>
<p>you'll unfortunately require a <code>try-except</code> for these, there's nothing else that can be done.</p>
<p>The cases that the <code>signature</code> helper handles are enumerated in the <a href="https://www.python.org/dev/peps/pep-0362/#implementation" rel="nofollow noreferrer">implementation section of <code>PEP 362</code></a> which introduced it.</p>
<p>In general, <code>inspect.getargspec</code> has been deprecated for a while now in Python 3, the suggested approach (if you're using Python 3, that is) is to use  the representation offered via <code>Signature</code> objects. </p>
<p>If on Python <code>2</code>, I'm pretty sure you can't do it directly with <code>getargspec</code>, you should use <code>getfullargspec</code> as Anttis' answer suggests. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/inspect.html#inspect.getfullargspec" rel="nofollow noreferrer"><code>getfullargspec</code></a> also handles partials correctly. It was previously deprecated but was <em>undeprecated</em> since it was deemed that it is quite useful for single-source Python 2/3 polyglot code.</p>
<p>Another option is <a href="https://docs.python.org/3/library/inspect.html#inspect.signature" rel="nofollow noreferrer"><code>signature</code></a> which is a bit more complicated.</p>
</div>
<span class="comment-copy">oh wait, are you using python 2?</span>
<span class="comment-copy">Ahh yes i am using python 2. Great to know that python 3 has such great support for getting this info though.</span>
