<div class="post-text" itemprop="text">
<p>Here is the question:</p>
<p>I have a file with these words:</p>
<pre><code>hey how are you
I am fine and you
Yes I am fine
</code></pre>
<p>And it is asked to find the number of words, lines and characters.</p>
<p>Below is my program, but the number of counts for the characters without space is not correct.</p>
<p>The number of words is correct and the number of line is correct.
What is the mistake in the same loop?</p>
<pre><code>fname = input("Enter the name of the file:")
infile = open(fname, 'r')
lines = 0
words = 0
characters = 0
for line in infile:
    wordslist = line.split()
    lines = lines + 1
    words = words + len(wordslist)
    characters = characters + len(line)
print(lines)
print(words)
print(characters)
</code></pre>
<p>The output is:</p>
<pre><code>lines=3(Correct)
words=13(correct)
characters=47
</code></pre>
<p>I've looked on the site with multiple answers and I am confused because I didn't learn some other functions in Python. How do I correct the code as simple and basic as it is in the loop I've done?</p>
<p>Whereas the number of characters without space is 35 and with space is 45.
If possible, I want to find the number of characters without space. Even if someone know the loop for the number of characters with space that's fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sum up the length of all words in a line:</p>
<pre><code>characters += sum(len(word) for word in wordslist)
</code></pre>
<p>The whole program:</p>
<pre><code>with open('my_words.txt') as infile:
    lines=0
    words=0
    characters=0
    for line in infile:
        wordslist=line.split()
        lines=lines+1
        words=words+len(wordslist)
        characters += sum(len(word) for word in wordslist)
print(lines)
print(words)
print(characters)
</code></pre>
<p>Output:</p>
<pre><code>3
13
35
</code></pre>
<p>This:</p>
<pre><code>(len(word) for word in wordslist)
</code></pre>
<p>is a <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions">generator expression</a>. It is essentially a loop in one line that produces the length of each word. We feed these lengths directly to <code>sum</code>:</p>
<pre><code>sum(len(word) for word in wordslist)
</code></pre>
<h2>Improved version</h2>
<p>This version takes advantage of <a href="https://docs.python.org/3/library/functions.html?highlight=enumerate#enumerate"><code>enumerate</code></a>, so you save two lines of code, while keeping the readability:</p>
<pre><code>with open('my_words.txt') as infile:
    words = 0
    characters = 0
    for lineno, line in enumerate(infile, 1):
        wordslist = line.split()
        words += len(wordslist)
        characters += sum(len(word) for word in wordslist)

print(lineno)
print(words)
print(characters)
</code></pre>
<p>This line:</p>
<pre><code>with open('my_words.txt') as infile:
</code></pre>
<p>opens the file with the promise to close it as soon as you leave indentation.
It is always good practice to close file after your are done using it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Remember that each line (except for the last) has a line separator.
I.e. "\r\n" for Windows or "\n" for Linux and Mac.</p>
<p>Thus, exactly two characters are added in this case, as 47 and not 45.</p>
<p>A nice way to overcome this could be to use:</p>
<pre><code>import os

fname=input("enter the name of the file:")
infile=open(fname, 'r')
lines=0
words=0
characters=0
for line in infile:
    line = line.strip(os.linesep)
    wordslist=line.split()
    lines=lines+1
    words=words+len(wordslist)
    characters=characters+ len(line)
print(lines)
print(words)
print(characters)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To count the characters, you should count each individual word. So you could have another loop that counts characters:</p>
<pre><code>for word in wordslist:
    characters += len(word)
</code></pre>
<p>That ought to do it. The wordslist should probably take away newline characters on the right, something like <code>wordslist = line.rstrip().split()</code> perhaps.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is too long for a comment.</p>
<p>Python 2 or 3? Because it really <em>matters</em>. Try out the following in your REPL for both:</p>
<pre><code>Python 2.7.12
&gt;&gt;&gt;len("taña")
5

Python 3.5.2
&gt;&gt;&gt;len("taña")
4
</code></pre>
<p>Huh? The answer lies in unicode. That <code>ñ</code> is an 'n' with a combining diacritical. Meaning its 1 character, but not 1 byte. So unless you're working with plain ASCII text, you'd better specify which version of python your character counting function is <em>for</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>How's this? It uses a regular expression to match all non-whitespace characters and returns the number of matches within a string.</p>
<pre><code>import re

DATA="""
hey how are you
I am fine and you
Yes I am fine
"""

def get_char_count(s):
    return len(re.findall(r'\S', s))

if __name__ == '__main__':
    print(get_char_count(DATA))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>35
</code></pre>
<p>The image below shows this tested on RegExr:</p>
<p><a href="https://i.stack.imgur.com/EPc5G.png" rel="noreferrer"><img alt="Regex Test" src="https://i.stack.imgur.com/EPc5G.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>I found this solution very simply and readable:</p>
<pre><code>with open("filename", 'r') as file:
    text = file.read().strip().split()
    len_chars = sum(len(word) for word in text)
    print(len_chars)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is probably counting new line characters. Subtract characters with (lines+1)</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is the code:</p>
<pre><code>fp = open(fname, 'r+').read()
chars = fp.decode('utf8')
print len(chars)
</code></pre>
<p>Check the output. I just tested it.</p>
</div>
<div class="post-text" itemprop="text">
<p>A more Pythonic solution than the others:</p>
<pre><code>with open('foo.txt') as f:
  text = f.read().splitlines() # list of lines

lines = len(text) # length of the list = number of lines
words = sum(len(line.split()) for line in text) # split each line on spaces, sum up the lengths of the lists of words
characters = sum(len(line) for line in text) # sum up the length of each line

print(lines)
print(words)
print(characters)
</code></pre>
<p>The other answers here are manually doing what <code>str.splitlines()</code> does. There's no reason to reinvent the wheel.</p>
</div>
<div class="post-text" itemprop="text">
<p>You do have the correct answer - and your code is completely correct. The thing that I think it is doing is that there is an end of line character being passed through, which includes your character count by two (there isn't one on the last line, as there is no new line to go to). If you want to remove this, the simple fudge would be to do as Loaf suggested </p>
<pre><code>characters = characters - (lines - 1)
</code></pre>
<p>See csl's answer for the second part...</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply skip unwanted characters while calling <code>len</code>,  </p>
<pre><code>import os
characters=characters+ len([c for c in line if c not in (os.linesep, ' ')])
</code></pre>
<p>or <code>sum</code> the count,  </p>
<pre><code>characters=characters+ sum(1 for c in line if c not in (os.linesep, ' '))
</code></pre>
<p>or build a <code>str</code> from the <code>wordlist</code> and take <code>len</code>,  </p>
<pre><code>characters=characters+ len(''.join(wordlist))
</code></pre>
<p>or <code>sum</code> the characters in the <code>wordlist</code>. I think this is the fastest.  </p>
<pre><code>characters=characters+ sum(1 for word in wordlist for char in word)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have two problems. One is the line endings and the other is the spaces in between.</p>
<p>Now there are many people who posted pretty good answers, but I find this method easier to understand:</p>
<pre><code>characters = characters + len(line.strip()) - line.strip().count(' ')
</code></pre>
<p>line.strip() removes the trailing and leading spaces. Then I'm subtracting the number of spaces from the total length.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's very simple:</p>
<pre><code>f = open('file.txt', 'rb')
f.seek(0) # Move to the start of file
print len(f.read()) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here i got smallest program with less memory usage for your problem</p>
<pre><code>with open('FileName.txt') as f:
  lines = f.readlines()
  data = ''.join(lines)
  print('lines =',len(lines))
  print('Words = ',len(data.split()))
  data = ''.join(data.split())
  print('characters = ',len(data))
</code></pre>
<p>lines will be list of lines,so length of lines is nothing but number of lines.Next step data contains a string of your file contents(each word separated by a whitespace), so if we split data gives list of words in your file. thus, length of that list gives number of words. again if we join the words list you will get all characters as a single string. thus length of that gives number of characters.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>file_name=input("Enter file name:")
lines=0
words=0
total_words=0
characters=0
with open(file_name,'r') as all_text:
    for l in all_text:
        words=l.split()
        lines+=1
        total_words+=len(words)
        for i in words:
            characters+=len(i)
print(lines)
print(total_words)
print(characters)
</code></pre>
</div>
<span class="comment-copy">It is probably counting new line characters. Subtract characters with (lines+1)</span>
<span class="comment-copy">If you want to count the number of characters <i>without</i> the spaces, you have to sum up the lengths of all entries in the <code>wordslist</code>, because since <code>line</code> still contains the spaces, <code>len(line)</code> returns 15 for the first line, not 12.</span>
<span class="comment-copy">None of this will work correctly for unicode in python 2. See my answer.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/14416522/counting-characters-and-lines-from-a-file-python-2-7">counting characters and lines from a file python 2.7</a></span>
<span class="comment-copy">yeah i was thinking of this but not sure but thanks got it</span>
<span class="comment-copy">OK, good catch, so then how do you get the correct number of characters for a string such as "taña" in Python 2.7.x?</span>
<span class="comment-copy">@GJoe probably something like this: len(("taña").decode('utf8')) although I strongly suspect this depends on the default encoding (sys.getdefaultencoding()) and probably your text editor or console encoding.</span>
<span class="comment-copy">@GJoe Peter Hansen's snippet should work in most cases. Or just use python 3 :)</span>
<span class="comment-copy">I prefer this, using the "with open" context manager. And more concise, clear python.</span>
<span class="comment-copy">When answering questions on stackoverflow, provide explanation to your code, and explain how you managed to solve the problem.</span>
