<div class="post-text" itemprop="text">
<p>I have a dictionary of dictionaries, with each nested dictionary having the exact same keys, like this:</p>
<pre><code>all_dicts = {'a':{'name': 'A', 'city': 'foo'},
             'b':{'name': 'B', 'city': 'bar'},
             'c':{'name': 'C', 'city': 'bar'},
             'd':{'name': 'B', 'city': 'foo'},
             'e':{'name': 'D', 'city': 'bar'},
            }
</code></pre>
<p>How to I get a list (or dictionary) of all the dictionaries where <code>'city'</code> has value <code>'bar'</code>?</p>
<p>The following code works, but isn't scalable:</p>
<pre><code>req_key = 'bar'
selected = []
for one in all_dicts.keys():
    if req_key in all_dicts[one]:
    selected.append(all_dicts[one])
</code></pre>
<p>Say <code>'city'</code> can have 50,000 unique values and the dictionary <code>all_dicts</code> contains 600,000 values, iterating over the dictionary for every single value of <code>'city'</code> is not very efficient. </p>
<p>Is there a scalable and efficient way of doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>What you could do is create an index on that dictionary, like this:</p>
<pre><code>cityIndex={}
for item in all_dicts.values():
    if item['city'] in cityIndex:
        cityIndex[item['city']].append(item)
    else:
        cityIndex[item['city']]=[item]
</code></pre>
<p>This will require some initial processing time as well as some additional memory, but afterwards it will be very fast. If you want all items with some <code>cityName</code>, you'll get them by doing:</p>
<pre><code>mylist=cityIndex[cityName] if cityName in cityIndex else []
</code></pre>
<p>This gives you many benefits if <code>all_dicts</code> is built once and queried afterwards many times.</p>
<p>If <code>all_dicts</code> is being modified during the execution of your program, you will need some more code to maintain the <code>cityIndex</code>. If an <code>item</code> is added to <code>all_dicts</code>, just do:</p>
<pre><code>if item['city'] in cityIndex:
    cityIndex[item['city']].append(item)
else:
    cityIndex[item['city']]=[item]
</code></pre>
<p>while if an item is removed, this is a straightforward way to remove it from the index as well (assuming the combination of 'name' and 'city' is unique among your items):</p>
<pre><code>for i, val in enumerate(cityIndex[item['city']]):
    if val['name']==item['name']:
        break
del cityIndex[item['city']][i]
</code></pre>
<p>If there are many more queries than updates, you will still get a huge performance improvement.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to check all the values; there isn't an alternative to that. You could however use a vectorised approach - <em>list comprehension</em> - which is going to be much faster than a for loop:</p>
<pre><code>selected = [d for d in all_dicts.values() if d['city']=='bar']
print(selected)
# [{'name': 'B', 'city': 'bar'}, {'name': 'C', 'city': 'bar'}, {'name': 'D', 'city': 'bar'}]
</code></pre>
<p>Using <code>dict.values</code> instead of accessing the dictionary keys also improves performance and is also memory efficient in Python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>Or use <code>filter</code>, in python 3:</p>
<pre><code>&gt;&gt;&gt; list(filter(lambda x: x['city']=='bar', all_dicts.values()))
# [{'name': 'D', 'city': 'bar'}, {'name': 'B', 'city': 'bar'}, {'name': 'C', 'city': 'bar'}]
</code></pre>
<p>Or with <code>pandas</code>:</p>
<pre><code>import pandas as pd

df = pd.DataFrame(all_dicts).T
df[df.city=='bar'].T.to_dict()

# {'e': {'city': 'bar', 'name': 'D'}, 'c': {'city': 'bar', 'name': 'C'}, 'b': {'city': 'bar', 'name': 'B'}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>all_dicts = {'a':{'name': 'A', 'city': 'foo'},
             'b':{'name': 'B', 'city': 'bar'},
             'c':{'name': 'C', 'city': 'bar'},
             'd':{'name': 'B', 'city': 'foo'},
             'e':{'name': 'D', 'city': 'bar'},
            }

citys = {}
for key, value in all_dicts.items():
    citys[key] = value['city']
#{'a': 'foo', 'b': 'bar', 'e': 'bar', 'd': 'foo', 'c': 'bar'}

for key, value in citys.items():
    if value == 'bar':
        print(all_dicts[key])
</code></pre>
<p>out:</p>
<pre><code>{'name': 'B', 'city': 'bar'}
{'name': 'D', 'city': 'bar'}
{'name': 'C', 'city': 'bar'}
</code></pre>
<p>Build an auxiliary dict to store city as index, and you can reference it very quickly.</p>
</div>
<span class="comment-copy">In order to keep the key of each dictionary in <code>all_dicts</code>, I'd also have to iterate over <code>key,item</code> pairs and update each dictionary as <code>item['pid'] = key</code> within each iteration, I suppose. Also, isn't this effectively just creating a new dictionary (of lists of dictionaries this time) with a modified structure? I probably wouldn't need the original if I'm to use this, I'm guessing.</span>
<span class="comment-copy">Well, this depends on what else you have to do with that dictionary (<code>all_dicts</code>) in your program... If all you need is doing such queries then yes, there is no need to keep the original dict once you have created the index. But note that the index does not contain all the information of <code>all_dicts</code>. In particular it looses the association between the keys ('a','b' etc.) and the corresponding items.</span>
<span class="comment-copy">At some point, you're reinventing databases here. If I was going to this much trouble, I would <i>seriously</i> consider using an in-memory SQLite DB, especially at the scale the OP is talking about.</span>
<span class="comment-copy">Also <code>cityIndex.get(cityName, [])</code>. (But defaultdict will cover that too.)</span>
<span class="comment-copy">Both solutions are nice and reduce the code. However, after testing, it turns out that  <code>cityIndex.get(cityName,[])</code> is less efficient than the <code>if-else</code> construct (takes 50% more time), while <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> is faster (saves about 30%), so I would go for that one.</span>
<span class="comment-copy">maybe a first post processing could create the dictionary with the proper keys (<code>city</code>), with the proper grouping. Then the lookup would be fast.</span>
<span class="comment-copy">@Jean-François Fabre I edit my answer in blow.</span>
<span class="comment-copy">Thanks! However, when I try running this for 100 cities (of 50,000), it takes 55.211 seconds. Is there a faster way, in terms of performance?</span>
<span class="comment-copy">@Jean-FrançoisFabre: Not sure exactly what you're suggesting, you mean changing the structure of the nested dictionaries themselves?</span>
<span class="comment-copy">actually the accepted answer just did that I was suggesting.</span>
<span class="comment-copy">+1 <code>x['city']</code> could be converted to <code>x.get('city')</code> if the key might not be there. Also, why Python 3 specifically?</span>
