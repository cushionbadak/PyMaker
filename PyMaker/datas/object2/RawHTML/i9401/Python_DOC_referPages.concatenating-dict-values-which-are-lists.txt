<div class="post-text" itemprop="text">
<p>Suppose I have the following dict object:</p>
<pre><code>test = {}
test['tree'] = ['maple', 'evergreen']
test['flower'] = ['sunflower']
test['pets'] = ['dog', 'cat']
</code></pre>
<p>Now, if I run <code>test['tree'] + test['flower'] + test['pets']</code>, I get the result:</p>
<pre><code>['maple', 'evergreen', 'sunflower', 'dog', 'cat']
</code></pre>
<p>which is what I want.</p>
<p>However, suppose that I'm not sure what keys are in the dict object but I know all the values will be lists.  Is there a way like <code>sum(test.values())</code> or something I can run to achieve the same result?</p>
</div>
<div class="post-text" itemprop="text">
<p>You <em>nearly</em> gave the answer in the question:
<code>sum(test.values())</code> only fails because it assumes by default that you want to add the items to a start value of <code>0</code>â€”and of course you can't add a <code>list</code> to an <code>int</code>.  However, if you're explicit about the start value, it will work:</p>
<pre><code> sum(test.values(), [])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One liner (<em>assumes no specific ordering is required</em>):</p>
<pre><code>&gt;&gt;&gt; [value for values in test.values() for value in values]
['sunflower', 'maple', 'evergreen', 'dog', 'cat']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>chain</code> from <code>itertools</code>:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain.from_iterable(test.values()))
# ['sunflower', 'maple', 'evergreen', 'dog', 'cat']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce</code></a> and <a href="https://docs.python.org/3.5/library/operator.html#operator.concat" rel="nofollow noreferrer"><code>operator.concat</code></a> (I'm assuming you're using Python 3) like this:</p>
<pre><code>&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; from operator import concat
&gt;&gt;&gt; reduce(concat, test.values())
['maple', 'evergreen', 'sunflower', 'dog', 'cat']
</code></pre>
</div>
<span class="comment-copy">Thanks for the explanation!  Good to know I was on the right track.  This one liner is the shortest and most readable.  In certain settings which require more readability I might also use Psidom's answer.</span>
<span class="comment-copy">I have been working with python for a bit now and I'm sometimes blown away how unreadable list comprehensions are.</span>
<span class="comment-copy">@ospahiu could you please explain how your code works? For instance,  <code>[x for x in val for val in a.values()]</code> won't work, but why? Here <code>a={'a':[1,2,3],'b'=[4,5,6],'c'=[7,8,9]} </code></span>
<span class="comment-copy">Not sure about why the downvote, but this is my solution too. An alternative is <code>list(chain(*test.values()))</code></span>
