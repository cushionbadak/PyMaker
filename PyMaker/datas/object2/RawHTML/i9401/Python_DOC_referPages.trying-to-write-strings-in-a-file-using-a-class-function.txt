<div class="post-text" itemprop="text">
<p>I'm trying to write a simple game and need to write some informations in a file. This is how the code looks like so far:</p>
<pre><code>class Player:
    def __init__(self, name, password, file):
        with open(file) as inputFile:
            self.playerAndPw = inputFile.read()
        self.name = name
        self.password = password


    def add(self, name, password, file):
        file.write(name + " | " + password)


    def __str__(self):
        print("The player's name is called " + self.name + "\n")

print("Welcome to Guess My Number!")
start = input("Press 1 for New Account, 2 for Log In: ")

if start == "1":
    player = Player
    playerID = input("Enter a name: ")
    playerPassword = input("Enter a password: ")
    fileName = "PlayerAndPassword.txt"
    player.add(playerID, playerPassword, fileName)
</code></pre>
<p>In the last line there is an exception at the last bracket: "Parameter 'file' unfilled. So the code can't get the information out of the function I'm using in the last line.</p>
<p>Would be great, if someone could help me! Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>This is my attempt to correct your code as best I could. As pointed out in the comments, you need to set <code>player</code> to an instance of the <code>Player</code> class by instantiating it as <code>player = Player(...)</code>.</p>
<p>Because you're passing the player's name, password and the file to store credentials in to the <code>Player</code> constructor, you don't need to pass these as arguments to <code>Player.add</code>, which is why I remove all parameters for that.</p>
<p>I should point out that this implementation is very simple and incomplete, designed only to address your immediate issues. My implementation will result in file handles remaining open after each call to the <code>Player</code> constructor. If you opt for this sort of approach, you may want to read <a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer">the Python documentation on input and output operations.</a></p>
<pre><code>class Player:
    def __init__(self, name, password, fileName):
        self.name = name
        self.password = password
        self.file = open(fileName, mode='a')

    def add(self):
        self.file.write(self.name + " | " + self.password + '\n')

    def __str__(self):
        print("The player's name is called " + self.name + "\n")


print("Welcome to Guess My Number!")
start = input("Press 1 for New Account, 2 for Log In: ")

if start == "1":
    playerId = input("Enter a name: ")
    playerPassword = input("Enter a password: ")
    fileName = "PlayerAndPassword.txt"
    player = Player(playerId, playerPassword, fileName)
    player.add()
</code></pre>
<p><strong>Console Output</strong></p>
<pre class="lang-none prettyprint-override"><code>Welcome to Guess My Number!
Press 1 for New Account, 2 for Log In: 1
Enter a name: Tom
Enter a password: Foo

Welcome to Guess My Number!
Press 1 for New Account, 2 for Log In: 1
Enter a name: Dick
Enter a password: Bar

Welcome to Guess My Number!
Press 1 for New Account, 2 for Log In: 1
Enter a name: Harry
Enter a password: Baz
</code></pre>
<p><strong>PlayersAndPasswords.txt</strong></p>
<pre class="lang-none prettyprint-override"><code>Tom | Foo
Dick | Bar
Harry | Baz
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>class Player:
    def __init__(self, name, password, file):
        self.name = name
        self.password = password
        self.file = open(file, mode='a') #first assign file to self.file(referring to this file)


    def add(self): #need to add those parameters as they are already initialized by constructor 
        self.file.write(self.name + " | " + self.password)


    def __str__(self):
        print("The player's name is called " + self.name + "\n")

print("Welcome to Guess My Number!")
start = input("Press 1 for New Account, 2 for Log In: ")

if start == "1":
    playerID = input("Enter a name: ")
    playerPassword = input("Enter a password: ")
    fileName = "PlayerAndPassword.txt"
    player = Player(playerID, playerPassword, fileName) #create instance with said values
    player.add() #call the add function to add
</code></pre>
</div>
<span class="comment-copy">Why are you passing <code>name</code>, <code>password</code> and <code>file</code> as parameters to <code>Player.add</code> if you've already passed them to the class constructor?</span>
<span class="comment-copy">Also the line <code>player = Player</code> isn't initialising a new instance of <code>Player</code>. To do that, you need <code>player = Player(...)</code> and pass in the required arguments.</span>
<span class="comment-copy">but you cannot pass the arguments since you have to enter a file. Looks like your design is flawed: you cannot create constructor with a file argument, because that would mean that you never can create a <i>new</i> player. Better use load / save methods, and use json to serialize/unserialize...</span>
<span class="comment-copy">Among the other problems, <code>fileName</code> is a string but <code>add</code> is expecting a file rather than a string.</span>
<span class="comment-copy">Note that this approach will leave an open file handle and I would personally use JSON here. JSON has the advantage that it already has a serialisation built-in and makes some things much easier (for example player-lookup).</span>
<span class="comment-copy">@MSeifert You're not wrong and I'll add that to my answer as it's a good point. Leaving an open file handle won't affect the correctness of this program though. The intention of my answer was just to resolve OP's most immediate problems.</span>
<span class="comment-copy">@ErikaWorm Glad to have helped, but on Stack Overflow <a href="http://stackoverflow.com/help/someone-answers">voting on and accepting answers that solve your problem are preferred over 'thank you' comments.</a></span>
<span class="comment-copy">Yes i did using comments.</span>
<span class="comment-copy">Ahh yes , checked it and now it works.</span>
