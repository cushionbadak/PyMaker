<div class="post-text" itemprop="text">
<p>I want to write a code (in python 3) that is able to calculate the sum of all possible combinations of a varying number of lists. The result of the sum needs to be checked with a specified value. For all combinations where the sum adds up to the specified value, I would like to create a new list containing just those values. </p>
<p>For example:</p>
<pre><code>value = 5
a = [1, 2, 3, 4]
b = [2, 3, 4, 5]

1 + 2 = 3 - x
1 + 3 = 4 - x
1 + 4 = 5 - correct
1 + 5 = 6 - x
2 + 2 = 4 - x
2 + 3 = 5 - correct
...
</code></pre>
<p>The result should be for example:</p>
<pre><code>res = [[1, 4], [2, 3], [3, 2], [4, 1]]
</code></pre>
<p>I know that a simple option would be to use nested for-loops. The problem is that at the time of writing the code I dont know how many lists there will be, resulting in the need to define all possible cases. This is something I dont want to do. By the time I am running the code, I do know how many lists there are. The length of the lists will always be the same (26 elements).</p>
<p>The lists that need to be checked are stored in a list in the following way. For example:</p>
<pre><code>list = [[1, 2, 3, 4], [2, 3, 4, 5]]
</code></pre>
<p>An example of an actual set of lists that I would like to solve this problem for is:</p>
<pre><code>list = [[0, 2, 0, 0, 5, 0, 0, 8, 0, 0, 11, 0, 0, 14, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 5, 0, 0, 8, 0, 0, 11, 0, 0, 14, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
</code></pre>
<p>All the zero values are the result of other refinements in the total number of options that do not meet other criterias.</p>
<p>I hope someone can push me into the right direction.
Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>With some list of lists <code>l</code> (don't name something <code>list</code>, there's a built in function named <code>list</code>)</p>
<pre><code>l = [[1, 2, 3, 4], [2, 3, 4, 5]]
</code></pre>
<p>We can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> to get all combinations of items between the lists, then <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> the <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> function onto those combinations.  Then checking for membership is easy.</p>
<pre><code>from itertools import product

if value in map(sum, product(*l)):
    print('Yes!')
else:
    print('No :(')
</code></pre>
<p>If you want to save the sums for multiple checks, I recommend saving them into a set</p>
<pre><code>sum_set = set(map(sum, product(*l)))
if value in sum_set:
    ...
</code></pre>
<p>The <code>*</code> in <code>product(*l)</code> takes the is the unpacking operator.  It gives the elements of <code>l</code> to <code>product</code> as individual arguments <code>product([1,2,3,4], [2,3,4,5])</code></p>
</div>
<span class="comment-copy">welcome to stackoverflow! please read up on <a href="https://stackoverflow.com/help/asking">how to ask a question</a> and provide a <a href="https://stackoverflow.com/help/mcve">minimal, complete and verifiable example</a> that reproduces your problem.</span>
<span class="comment-copy">this may give you a few ideas on how to iterate over combinations of elements in lists: <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html</a></span>
<span class="comment-copy">What you describe as "all possible combinations of multiple lists" is called the Cartesian product, and you can get it with <a href="https://docs.python.org/3.6/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>.</span>
<span class="comment-copy">Also, your result should be <code>res = [[1, 4], [2, 3], [3, 2]]</code>, since there's no 1 in list <code>b</code>.</span>
<span class="comment-copy">I would also look at <a href="https://docs.python.org/3.5/tutorial/datastructures.html#tut-listcomps" rel="nofollow noreferrer"><code>comprehensions</code></a>, for <code>list</code> or <code>set</code> to help build your results, they support an <code>if</code> clause which would help filter out the results to the ones you want.</span>
<span class="comment-copy">OP didn't ask for a list of the sums, so wouldn't <code>[p for p in product(*l) if sum(p) == value]</code> or something like that be better?</span>
<span class="comment-copy">@ThisSuitIsBlackNot I'd probably do <code>list(filter(lambda x: sum(x) == value, product(*l)))</code> but you're right, I didn't read the requirements all the way</span>
<span class="comment-copy">Out of curiosity, why would you prefer <code>filter</code> to a comprehension? Readability?</span>
<span class="comment-copy">I did a lot of functional programming for  a while, so that style is what i default to.  Plus, setting up generator chains is very natural in python 3.  It's more preference than anything else, and probably slower than the comprehension</span>
