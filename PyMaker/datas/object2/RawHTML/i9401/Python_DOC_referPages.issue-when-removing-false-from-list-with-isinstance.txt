<div class="post-text" itemprop="text">
<p>So, I was messing around removing non-integers from a list in Python (very exciting stuff). I came across an issue with the following code that I cannot seem to resolve:</p>
<pre><code>list_a = ["a", 1, 2, 3, False, [1, 2, 3]]

for item in list_a:
    if not isinstance(item, int):
        list_a.remove(item)
</code></pre>
<p>I'm trying to remove all non int items in the list but the the above code does not remove False.</p>
<p><strong>What I want: <code>[1, 2, 3]</code></strong></p>
<p><strong>What I'm getting: <code>[1, 2, 3, False]</code></strong></p>
<p>Any help figuring this out would be much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>Your issue is that <a href="https://docs.python.org/3/library/functions.html#bool" rel="nofollow noreferrer"><code>bool</code></a> <em>is</em> a subclass of <code>int</code>:</p>
<pre><code>&gt;&gt;&gt; issubclass(bool, int)
True
</code></pre>
<p>Therefore, all bools are ints (where False is 0 and True is 1) and could be used for indexing and such. You can test <code>type(item) is bool</code> instead. </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, <code>bool</code> is a subclass of <code>int</code>:</p>
<pre><code>&gt;&gt;&gt; isinstance(True, int)
True
&gt;&gt;&gt; isinstance(True, bool)
True
</code></pre>
<p>This means that you need a more refined check. You could, for example, check that <code>type(item) == int</code>.</p>
<p>For background, see <a href="https://www.python.org/dev/peps/pep-0285/" rel="nofollow noreferrer">PEP 285</a>:</p>
<pre>
    6) Should bool inherit from int?

    =&gt; Yes.

       In an ideal world, bool might be better implemented as a
       separate integer type that knows how to perform mixed-mode
       arithmetic.  However, inheriting bool from int eases the
       implementation enormously (in part since all C code that calls
       PyInt_Check() will continue to work -- this returns true for
       subclasses of int).  Also, I believe this is right in terms of
       substitutability: code that requires an int can be fed a bool
       and it will behave the same as 0 or 1.  Code that requires a
       bool may not work when it is given an int; for example, 3 &amp; 4
       is 0, but both 3 and 4 are true when considered as truth
       values.
</pre>
<p>Another, unrelated, issue is that you're modifying a list while iterating over it. Have a read of <a href="https://stackoverflow.com/questions/1637807/modifying-list-while-iterating">Modifying list while iterating</a> and links therein.</p>
<p>This results in a subtle bug in your code. For example, it fails to remove <code>"b"</code> from the following list (try it!):</p>
<pre><code>list_a = ["a", "b", 1, 2, 3]

for item in list_a:
    if not isinstance(item, int):
        list_a.remove(item)
</code></pre>
<p>One clean way to fix this is by using a list comprehension.</p>
</div>
<div class="post-text" itemprop="text">
<p>Check not if an item is an instance of something. Check its type directly:</p>
<pre><code>[x for x in list_a if type(x)==int]
</code></pre>
<blockquote>
<p>[1, 2, 3]</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>A clear way to do it. </p>
<pre><code>list_a = ["a", 1, 2, 3, False, [1, 2, 3]]
list_b = []
for item in list_a:
    if isinstance(item, int) and not isinstance(item, bool):
        list_b.append(item)
print list_b
</code></pre>
<p>Output</p>
<pre><code>[1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are making two errors here:</p>
<ul>
<li>Assuming <code>isinstance</code> works with <code>bool</code> (others have explained how <code>bool</code> actually sub-classes from <code>int</code>).</li>
<li>Altering a list while you iterate through it</li>
</ul>
<p>This may be one of those cases where explicitly testing using <code>type(val) == int</code> is warranted:</p>
<pre><code>list_a = ["a", 1, 2, 3, False, [1, 2, 3]]

for item in list_a[:]:
    if not type(item) == int:
        list_a.remove(item)
</code></pre>
<p>which yields the wanted result; notice how <code>list_a</code> is copied with <code>[:]</code> assuring we iterate over all its contents despite removing from it.</p>
<p>In a comprehension form, this is prettier:</p>
<pre><code>res = [i for i in list_a if type(i) == int]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Bool is a subclass of Int, furthermore type() and isinstance() should not be confused. This is because before boolean became its own class "1"s and "0"s represented True and False respectively.</p>
<p>As a result you should use type() due to inheritance.</p>
<pre><code>def f(randomList):
    result = []
    for elem in randomList:
        if type(elem)==int:
            result.append(elem)
    return result
</code></pre>
<p>This is a <em>non-destructive modified list</em> because sometimes modifying a list you're iterating through can cause errors or be a pain at least.</p>
</div>
<span class="comment-copy">Check out <a href="http://pythontutor.com" rel="nofollow noreferrer">pythontutor.com</a></span>
<span class="comment-copy">False is a value, which is 0, which is an integer!</span>
<span class="comment-copy"><code>False</code> is internally represented as an integer number 0. In fact <code>False==0</code> is <code>True</code> - but <code>False is 0</code> is not. Use operator <code>is</code> to remove <code>False</code>.</span>
<span class="comment-copy">Other issue: you're shifting items around in a list while iterating over it. Don't do that. Build a new list.</span>
