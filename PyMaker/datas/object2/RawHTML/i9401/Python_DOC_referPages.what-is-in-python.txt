<div class="post-text" itemprop="text">
<p>While idly surfing the namespace I noticed an odd looking object called "<strong>Ellipsis</strong>", it does not seem to be or do anything special, but it's a globally available builtin. </p>
<p>After a search I found that it is used in some obscure variant of the slicing syntax by Numpy and Scipy... but almost nothing else. </p>
<p>Was this object added to the language specifically to support Numpy + Scipy? Does Ellipsis have any generic meaning or use at all?</p>
<pre><code>D:\workspace\numpy&gt;python
Python 2.4.4 (#71, Oct 18 2006, 08:34:43) [MSC v.1310 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; Ellipsis
Ellipsis
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This came up in another <a href="https://stackoverflow.com/questions/752602/slicing-in-python-expressions-documentation">question</a> recently.  I'll elaborate on my <a href="https://stackoverflow.com/questions/752602/slicing-in-python-expressions-documentation/753260#753260">answer</a> from there:</p>
<p><a href="http://docs.python.org/dev/library/constants.html#Ellipsis" rel="noreferrer">Ellipsis</a> is an object that can appear in slice notation.  For example:</p>
<pre><code>myList[1:2, ..., 0]
</code></pre>
<p>Its interpretation is purely up to whatever implements the <code>__getitem__</code> function and sees <code>Ellipsis</code> objects there, but its main (and intended) use is in the <a href="http://www.numpy.org/" rel="noreferrer">numeric python</a> extension, which adds a multidimensional array type.  Since there are more than one dimensions, slicing becomes more complex than just a start and stop index; it is useful to be able to slice in multiple dimensions as well. E.g., given a 4x4 array, the top left area would be defined by the slice <code>[:2,:2]</code>:</p>
<pre><code>&gt;&gt;&gt; a
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12],
       [13, 14, 15, 16]])

&gt;&gt;&gt; a[:2,:2]  # top left
array([[1, 2],
       [5, 6]])
</code></pre>
<p>Extending this further, Ellipsis is used here to indicate a placeholder for the rest of the array dimensions not specified.  Think of it as indicating the full slice <code>[:]</code> for all the dimensions in the gap it is placed, so for a 3d array, <code>a[...,0]</code> is the same as <code>a[:,:,0]</code> and for 4d, <code>a[:,:,:,0]</code>, similarly, <code>a[0,...,0]</code> is <code>a[0,:,:,0]</code> (with however many colons in the middle make up the full number of dimensions in the array).</p>
<p>Interestingly, in python3, the Ellipsis literal (<code>...</code>) is usable outside the slice syntax, so you can actually write: </p>
<pre><code>&gt;&gt;&gt; ...
Ellipsis
</code></pre>
<p>Other than the various numeric types, no, I don't think it's used.  As far as I'm aware, it was added purely for numpy use and has no core support other than providing the object and corresponding syntax.  The object being there didn't require this, but the literal "..." support for slices did.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, you can use the Ellipsis literal <code>...</code> as a “nop” placeholder for code:</p>
<pre><code>def will_do_something():
    ...
</code></pre>
<p>This is <strong>not</strong> magic; any expression can be used instead of <code>...</code>, e.g.:</p>
<pre><code>def will_do_something():
    1
</code></pre>
<p>(Can't use the word “sanctioned”, but I can say that this use was <a href="http://mail.python.org/pipermail/python-3000/2008-January/011793.html" rel="noreferrer"><em>not outrightly rejected</em></a> by Guido.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use the Ellipsis when specifying expected <a href="http://docs.python.org/library/doctest.html#doctest.ELLIPSIS" rel="noreferrer">doctest</a> output:</p>
<pre><code>class MyClass(object):
    """Example of a doctest Ellipsis

    &gt;&gt;&gt; thing = MyClass()
    &gt;&gt;&gt; # Match &lt;class '__main__.MyClass'&gt; and &lt;class '%(module).MyClass'&gt;
    &gt;&gt;&gt; type(thing)           # doctest:+ELLIPSIS
    &lt;class '....MyClass'&gt;
    """
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As of Python 3.5 and <a href="https://www.python.org/dev/peps/pep-0484/#callable">PEP484</a>, the literal ellipsis is used to denote certain types to a static type checker when using the <a href="https://docs.python.org/3/library/typing.html">typing</a> module.</p>
<p>Example 1:</p>
<blockquote>
<p>Arbitrary-length homogeneous tuples can be expressed using one type and ellipsis, for example <code>Tuple[int, ...]</code> </p>
</blockquote>
<p>Example 2:</p>
<blockquote>
<p>It is possible to declare the return type of a callable without specifying the call signature by substituting a literal ellipsis (three dots) for the list of arguments:</p>
</blockquote>
<pre><code>def partial(func: Callable[..., str], *args) -&gt; Callable[..., str]:
    # Body
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="http://www.python.org/doc/2.5.2/lib/bltin-ellipsis-object.html" rel="noreferrer">Python documentation</a>:</p>
<blockquote>
<p>This object is used by extended slice
  notation (see the <em><a href="http://www.python.org/doc/2.5.2/ref/ref.html" rel="noreferrer">Python Reference
  Manual</a></em>). It supports no special
  operations. There is exactly one
  ellipsis object, named <code>Ellipsis</code> (a
  built-in name).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Summing up what others have said, as of Python 3, Ellipsis is essentially another singleton constant similar to <code>None</code>, but without a particular intended use. Existing uses include:</p>
<ul>
<li>In slice syntax to represent the full slice in remaining dimensions</li>
<li>In type hinting to indicate only part of a type(<code>Callable[..., int]</code> or <code>Tuple[str, ...]</code>)</li>
<li>In type stub files to indicate there is a default value without specifying it</li>
</ul>
<p>Possible uses could include:</p>
<ul>
<li>As a default value for places where <code>None</code> is a valid option</li>
<li>As the content for a function you haven't implemented yet</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can use Ellipsis yourself, in custom slicing situations like numpy has done, but it has no usage in any builtin class.</p>
<p>I don't know if it was added specifically for use in numpy, but I certainly haven't seen it used elsewhere.</p>
<p>See also: <a href="https://stackoverflow.com/questions/118370/how-do-you-use-the-ellipsis-slicing-syntax-in-python">How do you use the ellipsis slicing syntax in Python?</a></p>
</div>
<div class="post-text" itemprop="text">
<p><strong><code>__getitem__</code> minimal <code>...</code> example in a custom class</strong></p>
<p><code>...</code> serves as a singleton class magic value that gets passed to <code>__getitem__</code> when you use the "magic-looking" <code>...</code> syntax.</p>
<p>The class can then do whatever it wants with it.</p>
<p>Example:</p>
<pre><code>class C(object):
    def __getitem__(self, k):
        return k

# Single argument is passed directly.
assert C()[0] == 0

# Multiple indices generate a tuple.
assert C()[0, 1] == (0, 1)

# Slice notation generates a slice object.
assert C()[1:2:3] == slice(1, 2, 3)

# Ellipsis notation generates the Ellipsis class object.
# Ellipsis is a singleton, so we can compare with `is`.
assert C()[...] is Ellipsis

# Everything mixed up.
assert C()[1, 2:3:4, ..., 6] == (1, slice(2,3,4), Ellipsis, 6)
</code></pre>
<p>The Python built-in <code>list</code> class chooses to give it the semantic of a range, and any sane usage of it should too of course.</p>
<p>Personally, I'd just stay away from it in my APIs, and create a separate, more explicit method instead.</p>
<p>Tested in Python 3.5.2 and 2.7.12.</p>
</div>
<div class="post-text" itemprop="text">
<p>Its intended use shouldn't be only for these 3rd party modules. It isn't mentioned properly in the Python documentation (or maybe I just couldn't find that) but the <strong>ellipsis <code>...</code> is actually used in CPython</strong> in at least one place. </p>
<p>It is used for representing infinite data structures in Python. I came upon this notation while playing around with lists.</p>
<p>See <a href="https://stackoverflow.com/questions/17160162/what-is-in-python-2-7">this question</a> for more info.</p>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned by @noɥʇʎԀʎzɐɹƆ and @phoenix - You can indeed use it in stub files. e.g. </p>
<p><code>class Foo:
    bar: Any = ...
    def __init__(self, name: str=...) -&gt; None: ...</code></p>
<p>More information and examples of how to use this ellipsis can be discovered here <a href="https://www.python.org/dev/peps/pep-0484/#stub-files" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0484/#stub-files</a></p>
</div>
<span class="comment-copy">See the answers to <a href="http://stackoverflow.com/questions/752602/slicing-in-python-expressions-documentation" title="slicing in python expressions documentation">stackoverflow.com/questions/752602/…</a></span>
<span class="comment-copy">I found it like this: I entered <code>x=[];x.append(x);print(x)</code>, to see how it handled stringifying cyclical objects. It returned <code>[[...]]</code>. I thought "I wonder what happens if I type in <code>[[...]]</code>? My guess was it would throw a syntax error. Instead, it returned <code>[[Ellipsis]]</code>. Python is so weird. The Google search that ensued brought me to this page.</span>
<span class="comment-copy">note that the <code>...</code> in a recursive repr is just a placeholder and has no relation to <code>Ellipsis</code></span>
<span class="comment-copy">On a totally side note, triple dot in import means "import from two packages up".</span>
<span class="comment-copy">Awesome James Powell talk <a href="https://www.youtube.com/watch?v=65_-6kEAq58" rel="nofollow noreferrer">youtube.com/watch?v=65_-6kEAq58</a></span>
<span class="comment-copy">Bah humbug. You're using <code>Ellipsis</code> wrong. Clearly you're supposed to use it like this: <code>a[Ellipsis,0]</code>, none of this silly <code>...</code>.</span>
<span class="comment-copy">it's also used in PEP484 type hinting in stub files</span>
<span class="comment-copy">In a half-convention, I often see <code>...</code> used where people want to indicate something they intend to fill in later (a 'todo' empty block) and <code>pass</code> to mean an block intended to have no code.</span>
<span class="comment-copy">Python also has the <code>NotImplemented</code> literal, which is useful when you want your incomplete function to return something meaningful (instead of <code>None</code> as in your example). (Another usecase: <a href="https://docs.python.org/3/library/numbers.html#implementing-the-arithmetic-operations" rel="nofollow noreferrer">Implementing arithmetic operations</a>)</span>
<span class="comment-copy">@zvyn  That is not a literal.  It's just a name.  For example <code>NotImplemented = 'something_else'</code> is valid python, but <code>... = 'something_else'</code> is a syntax error.</span>
<span class="comment-copy">@zvyn What if an exception occurred while importing that module? :)</span>
<span class="comment-copy">@zvyn <code>NotImplemented</code> is not intended to be an alternative to <code>None</code>. Its usage is rather narrow. See documentation <a href="https://docs.python.org/3/library/constants.html" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">But does this actually involve the Ellipsis object? Isn't it just a feature of the doctest parser/matcher?</span>
<span class="comment-copy">@akaihola I'd say that it does, as described at <a href="https://docs.python.org/2/library/doctest.html#doctest.ELLIPSIS" rel="nofollow noreferrer">doctest.ELLIPSIS</a>. I expect that most if not all uses of <code>...</code> are syntactic, and don't <code>use</code> the actual Ellipsis object. Isn't it really nothing more than a handy name for an adaptable concept?</span>
<span class="comment-copy">+1 Only answer to specify "In type stub files to indicate there is a default value without specifying it" which was what I was looking for.</span>
<span class="comment-copy">run this with the <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-o" rel="nofollow noreferrer">-O</a> argument and your code will always run ;D</span>
<span class="comment-copy">Different things.This question asks about the <code>ellipsis</code> built-in type and the <code>Ellipsis</code> object. Representing infinite data structures with ellipses is purely for display, having nothing to do with <code>ellipsis</code> type or <code>Ellipsis</code> object.</span>
<span class="comment-copy">@chys Actually, it does in a small way - Python <code>__repr__</code> strings aim to be valid Python expressions - if it wasn't for ellipsis existing in the language as it does, the representation wouldn't be a valid expression.</span>
<span class="comment-copy">@Lattyware Well, it's true the original design so intends. It also intends <code>eval(repr(a))</code> aim to be equal to <code>a</code>. Unfortunately it's false from time to time in practice, even for built-in types. Try this out: <code>a=[]; a.append(a); eval(repr(a))</code>. <code>repr(a)</code> is <code>[[...]]</code>, invalid expression in Python 2. (In Python 3 it's valid, but the eval result is something different, still contrary to the original intention.)</span>
