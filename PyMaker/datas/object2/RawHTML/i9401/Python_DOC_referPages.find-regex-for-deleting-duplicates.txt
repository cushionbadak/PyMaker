<div class="post-text" itemprop="text">
<p>I want to find the regex, which makes following matching(Notice that there is a linebreakt!)</p>
<p><strong>inputString:</strong></p>
<pre><code>"a0Ew0"
"a0Ew0"
"a0Ew0s"
"a0Ew0s"
</code></pre>
<p><strong>output:</strong></p>
<pre><code>"a0Ew0"
"a0Ew0s"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can convert the list to a set to get rid of duplicates</p>
<p>See the following: <a href="https://repl.it/FFOJ/0" rel="nofollow noreferrer">https://repl.it/FFOJ/0</a></p>
<pre><code>l = set(["a0Ew000001UD2t8EAD", "a0Ew000001UD2t8EAD", "a0Ew000001UD4AFEA1", "a0Ew000001UD4AFEA1"])
print(l)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>regex isn't the right tool in that case.</p>
<p>If the duplicate elements are consecutive you can use a simple list comprehension to achieve this:</p>
<pre><code>lines=""""a0Ew000001UD2t8EAD"
"a0Ew000001UD2t8EAD"
"a0Ew000001UD4AFEA1"
"a0Ew000001UD4AFEA1"
""".splitlines()

filtered = [l for i,l in enumerate(lines) if i==0 or lines[i-1]!=l ]
</code></pre>
<p>it creates the element only if it's the first one (hence the index == 0 test or if previous element is different from the current one).</p>
<p>result:</p>
<pre><code>['"a0Ew000001UD2t8EAD"', '"a0Ew000001UD4AFEA1"']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need regex to do that when you can do this:</p>
<pre><code>from collections import OrderedDict

inputString = """"a0Ew0"
"a0Ew0"
"a0Ew0s"
"a0Ew0s"
"""

ls = inputString.split("\n") #splits the string to a list
print(*(list(OrderedDict.fromkeys(ls)))) 
</code></pre>
<p>Output:</p>
<pre><code>"a0Ew0" "a0Ew0s" 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really, <em>really</em> want to use regex, you could use a <a href="https://docs.python.org/3/howto/regex.html#lookahead-assertions" rel="nofollow noreferrer">negative lookahead</a> <code>(?!...)</code> to check whether the current group <code>(".+")</code> is not followed by a linebreak <code>\n</code> and itself <code>\1</code> again.</p>
<pre><code>&gt;&gt;&gt; inpt = """"a0Ew000001UD2t8EAD"
"a0Ew000001UD2t8EAD"
"a0Ew000001UD2t8EAD"
"a0Ew000001UD4AFEA1"
"a0Ew000001UD4AFEA1"
"a0Ew000001UD2t8EAD"
"""
&gt;&gt;&gt; re.findall(r'(".+")(?!\n\1)', inpt)
['"a0Ew000001UD2t8EAD"', '"a0Ew000001UD4AFEA1"', '"a0Ew000001UD2t8EAD"']
</code></pre>
<p>But instead, I would rather suggest using e.g. <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>:</p>
<pre><code>&gt;&gt;&gt; [key for key, group in itertools.groupby(inpt.splitlines())]
['"a0Ew000001UD2t8EAD"', '"a0Ew000001UD4AFEA1"', '"a0Ew000001UD2t8EAD"']
</code></pre>
<p>(Note how I added another copy of the first line to the end of the data set to show that both of those solutions only consider lines to be duplicates is they appear right after each other, with nothing in between. If you also want to remove duplicates with different lines in between, I doubt that there would be a solution using regex.)</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>REGEXP: Python</strong></p>
<pre><code>(\w+)
</code></pre>
<p><em>if consecutive, u can remove even or odd Elements.</em>
<br/><strong>Even</strong></p>
<pre><code>[0]"a0Ew0ssss" &lt;-- Deleted
[1]"a0Ew0ssss"
[2]"a0Ew0" &lt;-- Deleted
[3]"a0Ew0"
[4]"a0Ew0s" &lt;-- Deleted
[5]"a0Ew0s"
</code></pre>
<p><strong>Result:</strong></p>
<pre><code>[0]"a0Ew0ssss"
[1]"a0Ew0"
[2]"a0Ew0s"
</code></pre>
</div>
<span class="comment-copy">Any particular reason why you want a regex for that? Also, are duplicates always directly after each other, or can they be interspersed?</span>
<span class="comment-copy">I do not see what  a regex should do here, the only thing I can think of you want to do is implement a <i>uniqueness filter</i>.</span>
<span class="comment-copy">@Willem Van OnsemThats right</span>
<span class="comment-copy">No. You're using the wrong tool for the job. Take a step back and rethink what you're doing and why.</span>
<span class="comment-copy">does order need to be preserved BTW?</span>
<span class="comment-copy">this doesn't preserve the order. well we don't know if that's a requirement...</span>
