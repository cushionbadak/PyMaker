<div class="post-text" itemprop="text">
<p>I'm trying to show my dictionary keys and values in template in for loop, but I don't want to show the first key.
What is the best way to do it?
I thought of using something like </p>
<pre><code>dictionary.keys()[0]
</code></pre>
<p>but i can't do it in template.
or maybe add counter to the for loop (not sure how to do it in the loop below)
This is my loop to show the dictionary-</p>
<pre><code> {% for year, durations in durationDict.items %}
      &lt;optgroup label={{ year }}&gt;
      {% for duration in durations %}
           &lt;option data-from-date="{{ duration.from_date }}" data-to-date="{{ duration.to_date }}" value={{ duration.duration_id }}&gt;{{ duration.from_date }}
                                - {{ duration.to_date }}&lt;/option&gt;
      {% endfor %}
 {% endfor %}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to show the first iteration of a for loop in a Django template, you can omit it by checking for <a href="https://docs.djangoproject.com/es/1.9/ref/templates/builtins/#for" rel="nofollow noreferrer">forloop.first</a></p>
<pre><code> {% for year, durations in durationDict.items %}
      {% if not forloop.first %}
      &lt;optgroup label={{ year }}&gt;
      {% for duration in durations %}
           &lt;option data-from-date="{{ duration.from_date }}" data-to-date="{{ duration.to_date }}" value={{ duration.duration_id }}&gt;{{ duration.from_date }}
                                - {{ duration.to_date }}&lt;/option&gt;
      {% endfor %}
      {% endif %}
 {% endfor %}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <code>filter</code> tag. For example:</p>
<p><strong>template_tags.py</strong></p>
<pre><code>from django import template


register = template.Library()

@register.filter()
def exclude_first(dict):
    first_key = list(dict)[0]
    del dict[first_key]
    return dict
</code></pre>
<p><strong>html</strong></p>
<pre><code>{% load template_tags %}

{% for year, durations in durationDict|exclude_first %}
...
{% endfor %}
</code></pre>
<p>This should allow you to loop through all of the items in <code>durationDict</code> <strong>except</strong> for the first item. Keep in mind that <code>dicts</code> are not ordered by default. If you have a custom key/value pair that you want deleted every time, you can simply replace <code>del dict[first_key]</code> with <code>del dict['latest_year']</code> (or replace <code>latest_year</code> with the key name you want to delete).</p>
</div>
<div class="post-text" itemprop="text">
<p>What I finally done was as following:</p>
<p>creating an OrderedDict out of my Dictionary, making sure that it's sorted by dates Descending:</p>
<pre><code> duration_dict = OrderedDict(sorted(duration_dict.items(), key=lambda t: t[0], reverse=True))
</code></pre>
<p>So now I can be sure that the first key is also the latest year.
and for presenting all the key,value pairs without the first year I used forloop.first, as suggested by @bozdoz:</p>
<pre><code>{% for year, durations in duration_dict.items %}
                            {% if not forloop.first %}
                            &lt;optgroup label={{ year }}&gt;
                            {% endif %}
                           {% for duration in durations %}
                              &lt;option data-from-date="{{ duration.from_date }}" data-to-date="{{ duration.to_date }}" value={{ duration.duration_id }}&gt;{{ duration.from_date }}
                                - {{ duration.to_date }}&lt;/option&gt;
                            {% endfor %}
                        {% endfor %}
</code></pre>
</div>
<span class="comment-copy">What do you mean <code>first dictionary key</code>? Python dictionary is a hash table and it's not sorted, so there's no order for keys.</span>
<span class="comment-copy">There's no "first key" in a dictionary. The fact that you could do <code>dict.keys()[0]</code> could give you surprisingly different result if the same code is run on different machines. It could work perfectly on your local machine and not in production, it may work today but not tomorrow. If you want sequence, use a list of tuples.</span>
<span class="comment-copy">Maybe you want to learn what a hash table looks like: <a href="https://en.wikipedia.org/wiki/Hash_table" rel="nofollow noreferrer">en.wikipedia.org/wiki/Hash_table</a></span>
<span class="comment-copy">As @ShangWang points out, python's dicts don't preserve order -- if you use one of the other suggestions, you might get the wrong key omitted. The <a href="https://docs.python.org/3/library/collections.html#module-collections" rel="nofollow noreferrer">collections</a> standard library includes an OrderedDict class which will do what you want.</span>
<span class="comment-copy">I think it's impossible to answer your question without knowing whether you want to exclude the first <i>key</i> (order irrelevant) or the first <i>year</i> (order relevant). If you simply want to exclude the first key, maybe @bozdoz's answer will suffice but if you want to exclude the first year, you probably want to sort your keys in a list or tuple first using <code>sorted</code>, <code>sort</code>, <code>map</code>, <code>lambda</code> or a combination of these. Alternatively, if you want to sort based on insertion order rather than the numerical value of your keys, use an <code>OrderedDict</code> as previously suggested.</span>
<span class="comment-copy">Keep in mind, a dict is not ordered so you can't predict which key will be deleted with this method.</span>
<span class="comment-copy">Fair enough, I just wrote this assuming he is using an <code>ordered_dict()</code> or something along those lines</span>
<span class="comment-copy">I also edited my answer to show OP how to delete the <code>latest_year</code> key (or any specific key/value), assuming that ultimately that is his goal.</span>
