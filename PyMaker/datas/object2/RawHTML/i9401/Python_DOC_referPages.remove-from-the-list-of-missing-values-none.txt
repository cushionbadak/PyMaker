<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4842956/python-how-to-remove-empty-lists-from-a-list">Python: How to remove empty lists from a list?</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<pre><code>[['user_1',
  'user_2',
  'user_8',
   None,
   None],
 ['ben',
  'karl',
   None,
   None]]
</code></pre>
<p>I try to remove the missing values</p>
<pre><code>for element in df:
     element=[x for x in element if x is not None]
</code></pre>
<p>this code leave everything as it was</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem with your code is that the line</p>
<pre><code>element=[x for x in element if x is not None]
</code></pre>
<p>creates the new filtered list and binds it to the name <code>element</code>, which <em>replaces</em> the old list object that the name <code>element</code> was bound to. But we can use slice assignment to make it mutate that list instead:</p>
<pre><code>df = [
    [
        'user_1',
        'user_2',
        'user_8',
        None,
        None,
    ],
    [
        'ben',
        'karl',
        None,
        None,
    ]
]

# Remove the `None` values
for element in df:
     element[:] = [x for x in element if x is not None]

for row in df:
    print(row)
</code></pre>
<p><strong>output</strong></p>
<pre><code>['user_1', 'user_2', 'user_8']
['ben', 'karl']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for element in df:
     element[:]=[x for x in element if x is not None]
</code></pre>
<p>out:</p>
<pre><code>[['user_1', 'user_2', 'user_8'], ['ben', 'karl']]
</code></pre>
<p><a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer">Document</a>:
<a href="https://i.stack.imgur.com/90MVM.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/90MVM.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>my_list= [['user_1',
  'user_2',
  'user_8',
   None,
   None],
 ['ben',
  'karl',
   None,
   None]]

print [ [ elt for elt in a_list if elt is not None ] for a_list in my_list ]
</code></pre>
<blockquote>
<p>[['user_1', 'user_2', 'user_8'], ['ben', 'karl']]</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Reassigning <code>element</code> does not alter the list, because <code>element</code> is a separate variable.</p>
<p>With a small change, you can generate a new outer list using a nested comprehension, something like this:</p>
<pre><code>df = [[x for x in element if x is not None] for element in df]
</code></pre>
</div>
<span class="comment-copy">You could use <a href="https://docs.python.org/2/library/functions.html#filter" rel="nofollow noreferrer"><b><code>filter</code></b></a>, although that would also remove empty strings, zeroes, etc.</span>
<span class="comment-copy">You may find this article helpful: <a href="http://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">Facts and myths about Python names and values</a>, which was written by SO veteran Ned Batchelder.. And here's a condensed version of the same info, with cute diagrams: <a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#other-languages-have-variables" rel="nofollow noreferrer">Other languages have "variables", Python has "names"</a></span>
<span class="comment-copy">FWIW, none of the answers in that dupe target show how to mutate the existing list (or its sublists) rather than replacing it.</span>
<span class="comment-copy">This would also remove list items with <code>0</code> in them...</span>
<span class="comment-copy">@l'L'l right, fixed.</span>
<span class="comment-copy">This is fine if <code>len(my_list)</code> is small, but if it's huge it's probably desirable to save RAM by mutating the existing list rather than replacing it. OTOH, replacing <code>my_list</code> <i>is</i> a little faster than mutating it.</span>
