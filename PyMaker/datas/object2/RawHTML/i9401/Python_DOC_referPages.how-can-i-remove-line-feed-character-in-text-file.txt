<div class="post-text" itemprop="text">
<pre><code>import subprocess
cmd = 'tasklist'
proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
file = open("Process_list.txt", "r+")
for line in proc.stdout:
        file.write(str(line))

file.close()
</code></pre>
<p>i just wrote saving process list to text file. But Process_list.txt file has lots of line feed character like \r\n. How can i remove it? i used replace and strip func before</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem may not be so much about <code>replac</code>ing or <code>strip</code>ping extra characters as it is about what gets returned when you run <code>subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)</code>. The latter actually returns <code>bytes</code>, which may not play so nicely with writing each line to the file. You should be able to convert the <code>bytes</code> to <code>string</code> before writing the lines to the file with the following:</p>
<pre><code>import subprocess
cmd = 'tasklist'
proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
file = open("Process_list.txt", "r+")
for line in proc.stdout:
        file.write(line.decode('ascii')) # to have each output in one line

file.close()
</code></pre>
<p>If you don't want to have each output in one line, then you can strip the newline characters with <code>file.write(line.decode('ascii').strip())</code>.</p>
<p>Moreover, you could have actually used <code>subprocess.getoutput</code> to get an output of string characters and save the outputs to your file:</p>
<pre><code>cmd = 'tasklist'
proc = subprocess.getoutput(cmd)
file.write(proc)
file.close()
</code></pre>
<p>I hope this proves useful.</p>
</div>
<div class="post-text" itemprop="text">
<p>You will indeed use <code>strip()</code> once again:</p>
<pre><code>In [1]: 'foo\r\n'.strip()
Out[1]: 'foo'
</code></pre>
<p>In your case:</p>
<pre><code>file.write(str(line).strip())
</code></pre>
<p>You can avoid having to <code>close()</code> your file by using <code>with</code> too:</p>
<pre><code>with open("Process_list.txt", "r+") as file:
    for line in proc.stdout:
        file.write(str(line).strip())
</code></pre>
<p>Also, note that <code>str()</code> is only necessary of <code>line</code> is not already a string.</p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps you're looking for <a href="https://docs.python.org/3/library/stdtypes.html#str.rstrip" rel="nofollow noreferrer">str.rstrip()</a>. It removes trailing newline and carriage return characters; however, it also removes all trailing whitespace, so be aware of that.</p>
</div>
<span class="comment-copy">You likely want <code>.strip()</code> or <code>.rstrip()</code> (e.g. <code>file.write(line.rstrip())</code>).  Note <code>line</code> is almost definitely already a string, so converting it is unnecessary.  Also, you should look into the <code>with</code> keyword for opening files using context managers.</span>
<span class="comment-copy">Actually <code>subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)</code> will return <code>bytes</code>. Instead of <code>file.write(str(line))</code>, do <code>file.write(line.decode('ascii').strip())</code>.</span>
<span class="comment-copy"><code>Popen()</code> works with bytes so maybe you have to <code>encode/decode</code> data - or maybe you have to open file in bytes mode <code>b</code>.</span>
<span class="comment-copy">i really appreciated it</span>
