<div class="post-text" itemprop="text">
<p>I have a data frame with unix times and prices in it. I want to convert the index column so that it shows in human readable dates. So for instance i have "date" as 1349633705 in the index column but I'd want it to show as 10/07/2012 (or at least 10/07/2012 18:15). For some context, here is the code I'm working with and what I've tried already:</p>
<pre><code>import json
import urllib2
from datetime import datetime
response = urllib2.urlopen('http://blockchain.info/charts/market-price?&amp;format=json')
data = json.load(response)   
df = DataFrame(data['values'])
df.columns = ["date","price"]
#convert dates 
df.date = df.date.apply(lambda d: datetime.strptime(d, "%Y-%m-%d"))
df.index = df.date   
df
</code></pre>
<p>As you can see I'm using
<code>df.date = df.date.apply(lambda d: datetime.strptime(d, "%Y-%m-%d"))</code> here which doesn't work since I'm working with integers, not strings. I think I need to use <code>datetime.date.fromtimestamp</code> but I'm not quite sure how to apply this to the whole of df.date. Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>These appear to be seconds since epoch.</p>
<pre><code>In [20]: df = DataFrame(data['values'])

In [21]: df.columns = ["date","price"]

In [22]: df
Out[22]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 358 entries, 0 to 357
Data columns (total 2 columns):
date     358  non-null values
price    358  non-null values
dtypes: float64(1), int64(1)

In [23]: df.head()
Out[23]: 
         date  price
0  1349720105  12.08
1  1349806505  12.35
2  1349892905  12.15
3  1349979305  12.19
4  1350065705  12.15
In [25]: df['date'] = pd.to_datetime(df['date'],unit='s')

In [26]: df.head()
Out[26]: 
                 date  price
0 2012-10-08 18:15:05  12.08
1 2012-10-09 18:15:05  12.35
2 2012-10-10 18:15:05  12.15
3 2012-10-11 18:15:05  12.19
4 2012-10-12 18:15:05  12.15

In [27]: df.dtypes
Out[27]: 
date     datetime64[ns]
price           float64
dtype: object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you try using: </p>
<pre><code>df[DATE_FIELD]=(pd.to_datetime(df[DATE_FIELD],***unit='s'***))
</code></pre>
<p>and receive an error : </p>
<blockquote>
<p>"pandas.tslib.OutOfBoundsDatetime: cannot convert input with unit 's'"</p>
</blockquote>
<p>This means the <code>DATE_FIELD</code> is not specified in seconds. </p>
<p>In my case, it was milli seconds - <code>EPOCH time</code>. </p>
<p>The conversion worked using below:</p>
<pre><code>df[DATE_FIELD]=(pd.to_datetime(df[DATE_FIELD],unit='ms')) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming we imported <code>pandas as pd</code> and <code>df</code> is our dataframe</p>
<pre><code>pd.to_datetime(df['date'], unit='s')
</code></pre>
<p>works for me.</p>
</div>
<div class="post-text" itemprop="text">
<p>Alternatively, by changing a line of the above code:</p>
<pre><code># df.date = df.date.apply(lambda d: datetime.strptime(d, "%Y-%m-%d"))
df.date = df.date.apply(lambda d: datetime.datetime.fromtimestamp(int(d)).strftime('%Y-%m-%d'))
</code></pre>
<p>It should also work.</p>
</div>
<span class="comment-copy">and in 0.13 you'll be able to use date_unit when read_json :D</span>
<span class="comment-copy">Great! Your solution makes perfect sense. <a href="http://pandas.pydata.org/pandas-docs/dev/timeseries.html#converting-to-timestamps" rel="nofollow noreferrer">Pandas: Converting to Timestamps</a> goes through it pretty nicely also now I know about to_datetime.</span>
<span class="comment-copy">Just another point. This didn't work for me in 0.11, but fine in 0.12+</span>
<span class="comment-copy">yep...was not enabled in 0.11!</span>
<span class="comment-copy">This solution gives me <code>OverflowError: Python int too large to convert to C long</code>.</span>
