<div class="post-text" itemprop="text">
<p>I am setting some attributes for an object of a class in a function outside the class and store the object in a dictionary. I cannot see the change in stored values of the object, the default initialized values are retrieved.</p>
<pre><code>class Logpkt():
    def __init__(self):
    self.a=0
    self.b=''
    self.c=''
    self.d=''
    self.e=''
    self.f=''
    self.g=''
    self.h=''
    self.i=''
    self.j=''
    self.k=''


def set_class(**kwargs):
    temp = Logpkt()
    print(kwargs)
    for attr in kwargs.keys():
        temp.attr=kwargs[attr]
        print temp.attr,kwargs[attr]
    return temp

obj={}
obj[1]=set_class(a=1,b=2)
obj[2]=set_class(c=1,d=2)
print obj[1].a
print obj[2].c
</code></pre>
<p>Prints blank, which is the default value. Is the object being deleted from the memory by garbage cleaner after going out of scope? Is there a better way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer"><code>setattr</code></a> like:</p>
<h3>Code:</h3>
<pre><code>def set_class(**kwargs):
    temp = Logpkt()
    for attr, value in kwargs.items():
        setattr(temp, attr, value)
    return temp
</code></pre>
<h3>Test Code:</h3>
<pre><code>class Logpkt():
    def __init__(self):
        self.a = 0

        self.b = ''
        self.c = ''
        self.d = ''
        self.e = ''
        self.f = ''
        self.g = ''
        self.h = ''
        self.i = ''
        self.j = ''
        self.k = ''


def set_class(**kwargs):
    temp = Logpkt()
    print(kwargs)
    for attr, value in kwargs.items():
        setattr(temp, attr, value)
    return temp


obj = {}
obj[1] = set_class(a=1, b=2)
obj[2] = set_class(c=3, d=2)
print(obj[1].a)
print(obj[2].c)
</code></pre>
<h3>Results:</h3>
<pre><code>{'a': 1, 'b': 2}
{'c': 3, 'd': 2}
1
3
</code></pre>
</div>
