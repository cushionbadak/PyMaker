<div class="post-text" itemprop="text">
<p>Python's <a href="http://docs.python.org/library/functions.html#sum" rel="noreferrer"><code>sum()</code></a> function returns the sum of numbers in an iterable.</p>
<pre><code>sum([3,4,5]) == 3 + 4 + 5 == 12
</code></pre>
<p>I'm looking for the function that returns the product instead.</p>
<pre><code>somelib.somefunc([3,4,5]) == 3 * 4 * 5 == 60
</code></pre>
<p>I'm pretty sure such a function exists, but I can't find it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually, Guido vetoed the idea: <a href="http://bugs.python.org/issue1093" rel="noreferrer">http://bugs.python.org/issue1093</a></p>
<p>But, as noted in that issue, you can make one pretty easily:</p>
<pre><code>from functools import reduce # Valid in Python 2.6+, required in Python 3
import operator

reduce(operator.mul, (3, 4, 5), 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There isn't one built in, but it's simple to roll your own, as demonstrated <a href="https://stackoverflow.com/questions/493853/which-python-module-is-suitable-for-data-manipulation-in-a-list/494034#494034">here</a>:</p>
<pre><code>import operator
def prod(factors):
    return reduce(operator.mul, factors, 1)
</code></pre>
<p>See answers to this question:  </p>
<p><a href="https://stackoverflow.com/questions/493853/which-python-module-is-suitable-for-data-manipulation-in-a-list">Which Python module is suitable for data manipulation in a list?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>There's a <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.prod.html" rel="noreferrer"><code>prod()</code></a> in numpy that does what you're asking for.</p>
</div>
<div class="post-text" itemprop="text">
<h1><strong>Update:</strong></h1>
<p>In Python 3.8, the <em>prod</em> function was added to the <em>math</em> module.  See: <a href="https://docs.python.org/3.8/library/math.html#math.prod" rel="nofollow noreferrer">math.prod()</a>.</p>
<h2>Older info: Python 3.7 and prior</h2>
<p>The function you're looking for would be called <em>prod()</em> or <em>product()</em> but Python doesn't have that function.  So, you need to write your own (which is easy).</p>
<h2>Pronouncement on prod()</h2>
<p>Yes, that's right.  Guido <a href="http://bugs.python.org/issue1093" rel="nofollow noreferrer">rejected the idea</a> for a built-in prod() function because he thought it was rarely needed.</p>
<h2>Alternative with reduce()</h2>
<p>As you suggested, it is not hard to make your own using <a href="https://docs.python.org/2.7/library/functions.html#reduce" rel="nofollow noreferrer"><em>reduce()</em></a> and <a href="https://docs.python.org/3/library/operator.html#operator.mul" rel="nofollow noreferrer"><em>operator.mul()</em></a>:</p>
<pre><code>from functools import reduce
def prod(iterable):
    return reduce(operator.mul, iterable, 1)

&gt;&gt;&gt; prod(range(1, 5))
24
</code></pre>
<p>In Python 3, the <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><em>reduce()</em></a> function was moved to the <a href="https://docs.python.org/3/library/functools.html" rel="nofollow noreferrer">functools module</a>, so you would need to add:</p>
<pre><code>from functools import reduce
</code></pre>
<h2>Specific case: Factorials</h2>
<p>As a side note, the primary motivating use case for <em>prod()</em> is to compute factorials.  We already have support for that in the <a href="https://docs.python.org/2.7/library/math.html#math.factorial" rel="nofollow noreferrer">math module</a>:</p>
<pre><code>&gt;&gt;&gt; import math

&gt;&gt;&gt; math.factorial(10)
3628800
</code></pre>
<h2>Alternative with logarithms</h2>
<p>If your data consists of floats, you can compute a product using <em>sum()</em> with exponents and logarithms:</p>
<pre><code>&gt;&gt;&gt; from math import log, exp

&gt;&gt;&gt; data = [1.2, 1.5, 2.5, 0.9, 14.2, 3.8]
&gt;&gt;&gt; exp(sum(map(log, data)))
218.53799999999993

&gt;&gt;&gt; 1.2 * 1.5 * 2.5 * 0.9 * 14.2 * 3.8
218.53799999999998
</code></pre>
<p>Note, the use of <em>log()</em> requires that all the inputs are positive.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>Numeric.product 
</code></pre>
<p>( or </p>
<pre><code>reduce(lambda x,y:x*y,[3,4,5])
</code></pre>
<p>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use this</p>
<pre><code>def prod(iterable):
    p = 1
    for n in iterable:
        p *= n
    return p
</code></pre>
<p>Since there's no built-in <code>prod</code> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>I prefer the answers <a href="https://stackoverflow.com/a/595409/778533">a</a> and <a href="https://stackoverflow.com/a/595396/778533">b</a> above using <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">functools.reduce()</a> and the <a href="https://stackoverflow.com/a/6364663/778533">answer</a> using <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.prod.html" rel="nofollow noreferrer">numpy.prod()</a>, but here is yet another solution using <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer">itertools.accumulate()</a>:</p>
<pre><code>import itertools
import operator
prod = list(itertools.accumulate((3, 4, 5), operator.mul))[-1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps not a "builtin", but I consider it builtin. anyways just use numpy</p>
<pre><code>import numpy 
prod_sum = numpy.prod(some_list)
</code></pre>
</div>
<span class="comment-copy">Here is a great example of where there is a "need for this," to quote Guido: product(filter(None, [1,2,3,None])). Hopefully it will be included someday.</span>
<span class="comment-copy">Isn't Guido also the guy who doesn't like <code>reduce</code>?</span>
<span class="comment-copy">Yep -- and reduce is no longer even a builtin in Python 3. IMO, we don't need every possible list operator added to the global builtins when a standard (or 3rd party) library would do. The more builtins you have, the more common words become off-limits as local variable names.</span>
<span class="comment-copy">If using Python 3 use <code>functools.reduce</code> instead of <code>reduce</code>.</span>
<span class="comment-copy">Just found this nugget in <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=98196" rel="nofollow noreferrer">Guido's blog post about reduce()</a>. <b>"We already have sum(); I'd happily trade reduce() for product()..."</b>. If anyone wants to petition for including <code>product()</code> in the standard library, the number of views on this question may help make the case.</span>
<span class="comment-copy">If using Python 3 use <code>functools.reduce</code> instead of <code>reduce</code>.</span>
<span class="comment-copy">For even more functools fun: <code>prod = functools.partial(functools.reduce, operator.mul)</code></span>
<span class="comment-copy">note: doesn't support Python longs (arbitrary precision integers) so <code>np.prod(range(1,13))</code> gives the correct answer equal to 12! but <code>np.prod(range(1,14))</code> does not.</span>
<span class="comment-copy">@JasonS <code>np.prod(arange(1,14, dtype='object'))</code>?</span>
<span class="comment-copy">The <a href="https://docs.python.org/3.8/library/math.html#math.prod" rel="nofollow noreferrer"><code>math.prod()</code></a> function will make this answer obsolete.</span>
<span class="comment-copy">You might want to add that the floats in the last example need to be <i>positive</i>. Otherwise, you might have to use cmath, but even then it won't really work in all cases.</span>
<span class="comment-copy">But if there isn't one, he probably still wants the function.</span>
<span class="comment-copy">Right, but he needs to know one doesn't exist, since that's his main question.</span>
<span class="comment-copy">You also have to give reduce a default value of 1 otherwise it will fail in the null case. The product of an empty sequence is defined as 1.</span>
<span class="comment-copy">What is <code>Numeric</code>?</span>
<span class="comment-copy">@CraigMcQueen Numeric is (one of) the predecessors of numpy.</span>
<span class="comment-copy">you must think reduce really is an antipattern :)</span>
<span class="comment-copy">He wanted to know if an existing function exists that he can use.</span>
<span class="comment-copy">And this answer explainss that there isn't one.</span>
<span class="comment-copy">@zweiterlinde: For beginners, reduce leads to problems.  In this case, using <code>lambda a,b: a*b</code>, it isn't a problem.  But reduce doesn't generalize well, and gets abused.  I prefer beginners not learn it.</span>
<span class="comment-copy">@S.Lott I've never seen any beginners use reduce, much less any other functional-esque constructs. Heck, even "intermediate" programmers usually don't know much beyond a list comprehension.</span>
