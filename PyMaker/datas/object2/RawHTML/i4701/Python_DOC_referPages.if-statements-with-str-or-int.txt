<div class="post-text" itemprop="text">
<p>My question is relatively simple. Is 'str' easier than 'int' in the following examples?</p>
<pre><code>slot_1 = 'med kit'
if slot_1 == 'med kit':
    print('med kit ready')
</code></pre>
<p>is that faster to run and better than</p>
<pre><code>slot_1 = 0
#0 represents med kit
if slot_1 == 0:
    print('med kit ready')
</code></pre>
<p>Or is the one using integers more pythonic, and runs better?
What if I were to have multiple things, not just med kit. Would it still be better to use strings? If you want any more information I can edit.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are hundreds of answer, depending on too many factors.</p>
<p>But if in doubt, refer to the <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">Zen of Python</a>:</p>
<blockquote>
<p>Explicit is better than implicit.</p>
</blockquote>
<p>and</p>
<blockquote>
<p>Readability counts.</p>
</blockquote>
<p>may suggest to go for</p>
<pre><code>slot_1 = 'med kit'
if slot_1 == 'med kit':
    print('med kit ready')
</code></pre>
<p>since it's more readable</p>
</div>
<div class="post-text" itemprop="text">
<p>You can look to the Python standard library for a hint of what is most Pythonic.</p>
<p>The <a href="https://github.com/python/cpython/blob/3.6/Lib/decimal.py" rel="nofollow noreferrer">decimal module</a> and re module both use named constant strings rather than integer constants.</p>
<p>In Python 3, the <a href="https://docs.python.org/3/library/enum.html#module-enum" rel="nofollow noreferrer"><em>enum</em></a> module provides IntEnum so that you get the intelligibility of readable names and the benefits of ints (can be sequenced and can do math such as bitwise operations).</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are just interested in speed there is basically no significant difference with one if statement but using strings will accumulate if you have lots of equality tests.  Here is a test on 10,000,000 runs:</p>
<pre><code>import time
N = 10000000

# String test
print('String Test')
t0 = time.clock()
slot_1 = 'med kit'
g = 0
for x in range(N):
    if slot_1 == 'med kit':
        g = g + 1
t1 = time.clock()
total = t1-t0     
print("%.8F seconds\n" % total)

# Integer test
print('Integer Test')
t0 = time.clock()
slot_1 = 0
g = 0
for x in range(N):
    if slot_1 == 0:
        g = g + 1
t1 = time.clock()
total = t1-t0 

print("%.8F seconds\n" % total)
</code></pre>
<p>Output:</p>
<pre><code>String Test
0.72845136 seconds

Integer Test
0.69446039 seconds
</code></pre>
</div>
<span class="comment-copy">There is no answer to this. You use <code>==</code> based on the type of data you are using. I don't see how you have a choice like this in any practical application.</span>
<span class="comment-copy">The general answer to performance questions is: Test it and see for yourself. And what's faster in one situation might be slower in another. But if performance is a big concern, then Python might not be the best choice.</span>
<span class="comment-copy">You are asking what to use as a key?  If so stay with the string, they are easier for a programmer to understand.  And on the VERY off chance they are a performance problem change them later.</span>
<span class="comment-copy">The OP could also look into using <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer"><code>enum</code>s</a> if they wanted to.</span>
<span class="comment-copy">Interesting, I would have expected a bigger difference between strings and ints. The <code>timeit</code> module would give you a better basis to understand whether this difference was significant</span>
<span class="comment-copy">I couldn't remember the best way to time a code snippet which as you pointed out, timeit is best.  I worked around that by just doing a large batch using time.clock() which for longer operations is accurate to less than a microsecond at least on Windows.</span>
