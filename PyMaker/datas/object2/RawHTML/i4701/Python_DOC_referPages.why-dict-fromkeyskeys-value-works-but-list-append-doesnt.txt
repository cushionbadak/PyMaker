<div class="post-text" itemprop="text">
<p>I am pretty new to python and saw that we can get a dict by <code>dict.fromkeys(keys, value)</code>, I am not sure why here you can use dict, not <code>dict()</code>.?</p>
<p>For list and int or str, if use this </p>
<pre><code>list.append(1)
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-40-f15c629423f5&gt; in &lt;module&gt;()
      1 
----&gt; 2 list.append(1)

TypeError: descriptor 'append' requires a 'list' object but received a 'int'
</code></pre>
<p>and it doesn't work even with the list object</p>
<pre><code>list.append([1])

TypeError                                 Traceback (most recent call last)
&lt;ipython-input-41-b98586d7f7ed&gt; in &lt;module&gt;()
      1 
----&gt; 2 list.append([1])

TypeError: append() takes exactly one argument (0 given)
</code></pre>
<p>if I</p>
<pre><code>type(dict)

return type
</code></pre>
<p>what is 'type' type?</p>
<p>this might be a dumb question, but I could not find any answers online, anybody can help?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#dict.fromkeys" rel="nofollow noreferrer"><code>dict.fromkeys</code></a> is a <a href="https://stackoverflow.com/questions/38238/what-are-class-methods-in-python-for">class method</a>, basically meaning it doesn't need to be attached to an instance of a <code>dict</code> class to work. This makes sense - <code>dict.fromkeys</code> is basically an alternative constructor for a dict. </p>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html?highlight=list%20append#data-structures" rel="nofollow noreferrer"><code>list.append</code></a> on the other hand is a regular instance method, meaning we need an actual <code>list</code> instance to call <code>.append</code> on. This also makes sense - appending is an operation that does not precede the creation of a list, i.e. we need a list to append to. </p>
<p>We can also reference instance methods as class attributes, and get back a regular function object that we pass an instance to as the first argument, i.e. <code>list.append(some_list, 'foo')</code>. </p>
</div>
<span class="comment-copy"><code>dict</code> is a class (aka type) which creates an object of this type if using call syntax <code>dict()</code>. a class/type is itself an object of type <code>type</code>.</span>
<span class="comment-copy">Unless you've overwritten the type <code>list</code> with an actual <code>list</code> object, the syntax is <code>list.append(L, 1)</code> where <code>L</code> is a list.</span>
<span class="comment-copy">thanks,make a lot of sense now. one more question, why type(dict) return 'type' not something like 'class' or 'class name'?</span>
<span class="comment-copy">@Kurt This is a bit of a tricky question, but the short answer is because <code>dict</code> is actually an instance of a <code>type</code> class, a <a href="https://docs.python.org/3/reference/datamodel.html?highlight=metaclass#metaclasses" rel="nofollow noreferrer">metaclass</a> that creates instances of <code>dict</code>'s for us! Notice that <code>dict().__class__.__class__</code> is <code>type</code> too. This is an advanced topic in Python, a good overview is found in e-satis' answer <a href="https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python">on this question</a>.</span>
