<div class="post-text" itemprop="text">
<p>I just started learning python and tried printing the dictionary contents using format function. I gained some insight while reading <a href="https://www.python-course.eu/python3_formatted_output.php" rel="nofollow noreferrer">https://www.python-course.eu/python3_formatted_output.php</a></p>
<p>Question 1 : The double * operator is used performing exponential calculations, how it behaves with the dictionaries?</p>
<p>Question 2 : For this block of code I am getting <code>IndexError: tuple index out of range</code>. I must have misinterpreted something.</p>
<pre><code>students = {100 : "Udit", 101 : "Rohan", 102 : "Akash", 103 : "Rajul"}
for student in students :
    format_string = str(student) + ": {" + str(student) + "}"
    print(format_string)
    print(format_string.format(**students))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You iterate like this:</p>
<pre><code>for student in students :
</code></pre>
<p>Since <code>students</code> is a dict, this iterates over the keys, which are numbers, like <code>100</code>, which means end up building a format string like this:</p>
<pre><code>'100: {100}'
</code></pre>
<p>And then, when you call <code>format</code> on that, the <code>100</code> is asking for positional argument #100. But you only passed 0. So you get an <code>IndexError</code>.</p>
<p>You can only usefully use the <code>format(**students)</code> syntax when the dict keys are valid string format keys.</p>
<hr/>
<p>Meanwhile, I don't know who's been spreading the idea that <code>format(**d)</code> is a great idea. If you want to format using only a dict or other mapping, that's what <a href="https://docs.python.org/3/library/stdtypes.html#str.format_map" rel="nofollow noreferrer"><code>format_map</code></a> was added for, back in 3.2:</p>
<pre><code>print(format_string.format_map(students))
</code></pre>
<p>One advantage is that when you do something wrong, you get a more useful error message:</p>
<pre><code>ValueError: Format string contains positional fields
</code></pre>
<p>When you see that, you can print out the format string itself and see that <code>{100}</code>, and, yep, that's a positional field. Much less debugging needed.</p>
<p>More importantly, it's simpler to read and understand without the keyword splatting. And it's even more efficient (not as much so in 3.6 as in 3.2, but <code>format</code> still has to build a new dict copy, while <code>format_map</code> can use whatever mapping you give it as-is).</p>
<hr/>
<p>Finally, building a format string dynamically like this is rarely a good idea. A much simpler way to print what you're trying to print is:</p>
<pre><code>for num, student in students.items():
    print(f'{num}: {student}')
</code></pre>
<p>Or, if you're not using 3.6, or just want to use <code>format</code> or <code>format_map</code> explicitly instead of f-strings, same idea.</p>
</div>
<span class="comment-copy">First, don't ask multiple questions in a single question if you want a good answer. Create separate questions (if they're related add links between them, and make sure your questions are clear enough that nobody will think they're the same question).</span>
<span class="comment-copy">You will get more and better answers if you create a <a href="http://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable</a> example.  Especially make sure that the input and expected test data are complete (not pseudo-data), and can be easily cut and and paste into an editor to allow testing proposed solutions.</span>
<span class="comment-copy">Anyway: (1) It's not an operator here, it's [keyword splatting, part of the function call syntax](<a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists0" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a>. They're no more the same thing than the parentheses around the tuple <code>(1, 2)</code>, the parentheses around the subexpression in <code>2 * (3 + 4)</code>, and the parentheses in the function call <code>spam(42)</code> are the same thing.</span>
<span class="comment-copy">As a side note, building format strings dynamically like this is usually not a good idea. What you're trying to do here can be done a lot more simply without it. Just <code>for num, student in students.items(): print(f'{num}: {student}')</code> is a lot more readable.</span>
<span class="comment-copy">And (2): the problem is that <code>for student in students:</code> is looping over the <i>keys</i> of your dictionary. So, that format string you build is <code>"100: {100}"</code>. That means you're trying to insert positional argument #100 out of 0.</span>
