<div class="post-text" itemprop="text">
<p>Let's say we have a list of functions</p>
<pre><code>funcs = [int, float]
</code></pre>
<p>and we want to apply them to one argument <code>0</code> to get <code>[0, 0.0]</code></p>
<p>Clearly we can (edit: and should!) do</p>
<pre><code>[f(0) for f in funcs]
</code></pre>
<p>but is there any other machinery for this in the standard library, akin to the <code>map</code> function?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; from operator import methodcaller
&gt;&gt;&gt; funcs = [int, float]
&gt;&gt;&gt; map(methodcaller('__call__', 0), funcs)
[0, 0.0]
</code></pre>
<p>Pointless but possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>The list comprehension here is the preferred method. However, if you wanted to avoid the list comprehension, you can use <code>map()</code>:</p>
<pre><code>map(lambda f: f(0), funcs)
#[0, 0.0]
</code></pre>
<p>But in python3 you would need to wrap the call to <code>map()</code> with <code>list</code> since <code>map()</code> returns an iterator:</p>
<pre><code>list(map(lambda f: f(0), funcs))
</code></pre>
<p>But as @jonrsharpe <a href="https://stackoverflow.com/questions/49387445/apply-a-list-of-functions-to-one-argument-in-python/49387488#comment85776274_49387488">mentioned in the comments</a>, this is not recommended as it <a href="https://docs.python.org/3/whatsnew/3.0.html#views-and-iterators-instead-of-lists" rel="nofollow noreferrer">wastefully creates a list</a>.</p>
<h3>Timing Results</h3>
<p>On my computer running python 2.7</p>
<pre><code>#List comprehension
%%timeit
[f(0) for f in funcs]
#1000000 loops, best of 3: 352 ns per loop

#map + lambda
%%timeit
map(lambda f: f(0), funcs)
#1000000 loops, best of 3: 687 ns per loop

#generator
list(f(0) for f in funcs)
#1000000 loops, best of 3: 1.1 Âµs per loop

#map + methodcaller
%%timeit
map(methodcaller('__call__', 0), funcs)
#1000000 loops, best of 3: 687 ns per loop
</code></pre>
<ul>
<li>The slowest solution (by far) is the generator method suggested by @timgeb in the <a href="https://stackoverflow.com/questions/49387445/apply-a-list-of-functions-to-one-argument/49387488#comment85776490_49387445">comments</a>.</li>
<li>List comprehension is the fastest</li>
<li>Both solutions using <code>map()</code> are second fastest.</li>
</ul>
</div>
<span class="comment-copy">It's not clear why you want to avoid the list comprehension - what's the <i>problem</i> you're trying to solve?</span>
<span class="comment-copy">Would you accept an answer that said you <i>should</i> use the list comprehension?</span>
<span class="comment-copy">To clarify further, <i>using a library</i> to perform the work of a list comprehension doesn't sound like a good idea.</span>
<span class="comment-copy"><code>list(f(0) for f in funcs)</code> -- technically not a list comprehension :)</span>
<span class="comment-copy">Voted to reopen. While the question may be pretty pointless, it is not at all "unclear" what is being asked here.</span>
<span class="comment-copy">python 2 only as always.</span>
<span class="comment-copy">That's only a list in Python 2.x...</span>
<span class="comment-copy"><code>list(map(...))</code> if this is Python 3</span>
<span class="comment-copy">He already knows about map: &gt; "perhaps with some library function akin to map?"</span>
<span class="comment-copy">@Wondercricket <a href="https://docs.python.org/3/whatsnew/3.0.html#views-and-iterators-instead-of-lists" rel="nofollow noreferrer">what's new</a> <i>specifically</i> suggests not doing that, and using a list comprehension instead.</span>
<span class="comment-copy">map + lambda: useless. Use listcomp instead.</span>
