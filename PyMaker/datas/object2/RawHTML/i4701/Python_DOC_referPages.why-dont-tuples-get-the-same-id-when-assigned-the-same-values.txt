<div class="post-text" itemprop="text">
<p>When I executed the following steps, both tuples (<code>a</code> and <code>b</code>) haven't retained their original IDs even when I reassigned older values (<code>(1,2)</code>).</p>
<pre><code>&gt;&gt;&gt; a , b = (1,2) , (1,2)
&gt;&gt;&gt; a
(1, 2)
&gt;&gt;&gt; b
(1, 2)
&gt;&gt;&gt; id(a) , id(b)
(80131912, 91541064)
&gt;&gt;&gt; a , b = (3,4) , (3,4)
&gt;&gt;&gt; a
(3, 4)
&gt;&gt;&gt; b
(3, 4)
&gt;&gt;&gt; id(a) , id(b)
(91559048, 91689032)
&gt;&gt;&gt; a , b = (1,2) , (1,2)
&gt;&gt;&gt; a
(1, 2)
&gt;&gt;&gt; b
(1, 2)
&gt;&gt;&gt; id(a) , id(b)
(91556616, 91550408)
</code></pre>
<p>But in the following case, both have gotten their older IDs back.</p>
<pre><code>&gt;&gt;&gt; a = (1,2)
&gt;&gt;&gt; b = (1,2)
&gt;&gt;&gt; a , b
((1, 2), (1, 2))
&gt;&gt;&gt; id(a)
88264264
&gt;&gt;&gt; id(b)
88283400
&gt;&gt;&gt; a = (3,4)
&gt;&gt;&gt; b = (3,4)
&gt;&gt;&gt; id(a)
88280008
&gt;&gt;&gt; id(b)
88264328
&gt;&gt;&gt; a = (1,2)
&gt;&gt;&gt; b = (1,2)
&gt;&gt;&gt; id(a)
88264264
&gt;&gt;&gt; id(b)
88283400
&gt;&gt;&gt; a , b
((1, 2), (1, 2))
&gt;&gt;&gt; id(a) , id(b)
(88264264, 88283400)
</code></pre>
<p>Can someone please explain this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You created new tuple objects. That they have the same contents doesn't mean that they'll be the exact same tuple objects in memory.</p>
<p>Immutability doesn't mean that creating the same <em>value</em> will create the same <em>object</em>. You never mutated the old <code>(1, 2)</code> tuples, and your new <code>(1, 2)</code> tuples are not mutable either.</p>
<p>CPython does keep a cache of re-usable tuple objects (so it doesn't have to create new objects all the time, Python goes through a lot of small tuples during a typical program), but that's an implementation detail you can't rely on. It is this cache that is the reason for the same ids being seen again, for tuples of length two. See <a href="https://stackoverflow.com/questions/14135542/how-is-tuple-implemented-in-cpython">How is tuple implemented in CPython?</a> if you want to know how the cache is implemented.</p>
<p>Furthermore, in CPython, <code>id()</code> is the memory location of the object, and Python is free to re-use memory locations once old objects have been freed. This is <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer">clearly documented</a>:</p>
<blockquote>
<p>This is an integer which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same <code>id()</code> value.</p>
</blockquote>
<p>It is always possible to see the same <code>id()</code> value for new objects. Sometimes this means you still have the same object (as is the case for small integers or tuples or certain types of string object), sometimes it is just that the interpreter re-used the same location in memory. You should never rely on this, these are implementation details for performance purposes and subject to change.</p>
</div>
