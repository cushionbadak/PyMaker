<div class="post-text" itemprop="text">
<p>I'm looking to accept date input into a script and running into the conundrum of how to differentiate between 040507 // 04052007 and 050407 // 05042007 when user intends April 5th, 2007 (or May 4th, 2007). The US tends to follow the first form, but other countries the second. </p>
<p>I know I can use IP/GPS in some instances, but I'm looking for a method that works offline, maybe from system location/language? </p>
<p>I'm primarily looking for a Windows solution, but surely others will be useful in future/to others. </p>
<p>NB I'm not considering timezone a good option, as different countries in the same timezone can use different conventions.</p>
</div>
<div class="post-text" itemprop="text">
<p>Judging by your date formats, I think your user manually enters the date. Unfortunately, locality will have little to do with how it is entered. I am in the US but prefer to input my date with the full year. </p>
<p>A simple way would be to force a standard or accept either way and test for which was entered. </p>
<pre><code>def test():
    while True:
        testdate = input()
        if testdate.isdigit() and len(testdate) == 6:
            #do something
            break
        elif testdate.isdigit() and len(testdate) == 8:
            #do something
            break
        else: 
            print("Please enter correct format")
</code></pre>
<p>This would check to make sure only digits are entered and then checks the length to determine which format was used. </p>
<p>You could force a standard by specifying “ddmmyyyy” and only accept an 8 digit input. </p>
<p>If I’m wrong on how the date is given, let me know and I’ll update accordingly. </p>
<p>EDIT:</p>
<p>If you want to guess the user’s format by determining their location, you can use the locale module. </p>
<pre><code>import locale

print(locale.getlocale())
</code></pre>
<p>Output:</p>
<blockquote>
<p>('en_US', 'UTF-8')</p>
</blockquote>
<p>Another way using locale is to check the international currency symbol of the locale. </p>
<pre><code>import locale

locale.setlocale(locale.LC_ALL, "")
print(locale.localeconv()['int_curr_symbol'])
</code></pre>
<p>Output:</p>
<blockquote>
<p>USD</p>
</blockquote>
<p>Here is a list of currency codes: <a href="https://www.ibm.com/support/knowledgecenter/en/SSZLC2_7.0.0/com.ibm.commerce.payments.developer.doc/refs/rpylerl2mst97.htm" rel="nofollow noreferrer">https://www.ibm.com/support/knowledgecenter/en/SSZLC2_7.0.0/com.ibm.commerce.payments.developer.doc/refs/rpylerl2mst97.htm</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could always check the OS default language, using <a href="https://docs.python.org/3/library/locale.html#locale.getdefaultlocale" rel="nofollow noreferrer"><code>getdefaultlocale()</code></a>, and you could use that to guide how you parse dates:</p>
<pre><code>&gt;&gt;&gt;import locale
&gt;&gt;&gt;locale.getdefaultlocale()
('en_US', 'cp1252')
</code></pre>
<p>This wouldn't be exact, as I would enter dates the same way no matter what locale my computer is using, but it could give you a starting point.</p>
</div>
<span class="comment-copy">What have you tried so far? It would help if you provided some code for us to review.</span>
<span class="comment-copy">I'm asking what I should try, as all of the methods I've found so far require internet either/or GPS, and I'm looking for a solution absent such access.</span>
<span class="comment-copy">If the input is always either 040507 or 04052007, couldn’t you just test the length? For example: if len(“040507”) == 6:</span>
<span class="comment-copy">Well I interchange those, but in a US context I enter Christmas as 12252018 or 12252018, but elsewhere or in communication with the UK I'll enter it 251218 or 25122018, so it's primarily a locational difference I'm looking for. There are parsers that can deduce delimiters and variant year length.</span>
<span class="comment-copy">IIRC, although it's something I've implemented manually before now, some libs can parse 6 and 8 digit dates (as well as varied delimiters or none). What I'm looking for is to have something that'll guess based on location whether 040118 (or 04012018, or 04-01-18, or 01-04-2018) is April 1st, or Jan 4th, 2018.</span>
<span class="comment-copy">Just curious, how does that differ from locale.getdefaultlocale()? Will the result of getlocale and getdefaultlocale ever differ? I've played with changing my locale on my machine, and the results for both methods didn't diverge.</span>
<span class="comment-copy">@toonarmycaptain getlocale() gets the current settings, while getdefaultlocale() tries to get the default settings. Unless the locale settings change, I don’t think the result will be different. On that note: when using setlocale(LC_ALL, “”) it is only reading the stored locale settings, not changing them. To change them, you’ll have to modify the null string.</span>
<span class="comment-copy">That's not a bad workaround, as <i>most</i> English-speaking non-US countries (my use case, so far) use what I would refer to as British conventions. I'm possibly your stated exception, being in the US but preferring English language, while being forced to enter dates the US way for most things.</span>
