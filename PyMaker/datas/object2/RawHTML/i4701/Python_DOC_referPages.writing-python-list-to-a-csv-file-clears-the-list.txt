<div class="post-text" itemprop="text">
<p>I'm doing some tests with lists, <code>enumerate()</code> method and CSV files.</p>
<p>I'm using the <code>writerows()</code> method to save an enumerate object to a .csv file.
All works fine but the list / enumerate object becomes empty after the writing is done.</p>
<p>Why is this happening ? 
How can I keep the values in my list (do I have to save them in amother variable)? </p>
<p>I'm on Windows 10 using Python 3.6.4</p>
<p>Here is My Code:</p>
<pre><code>import csv

b = [1,2,3,4,5,6,7,8,9,10,11,"lol","hello"]
c = enumerate(b)

with open("output.csv", "w", newline='') as myFile:
    print("Writing CSV")
    writer = csv.writer(myFile)
    writer.writerows(c)

print(list(c))
</code></pre>
<p>output:</p>
<pre><code>&gt;&gt;&gt;Writing CSV
&gt;&gt;&gt;[]
&gt;&gt;&gt;[Finished in 0.1s
</code></pre>
<p>If I preform: <code>print(list(c))</code> before the writing method, <code>c</code> also becomes empty.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>c = enumerate(b)
</code></pre>
<p>Here <code>c</code> is not <code>list</code> but a generator, which is consumed when you iterate over it.</p>
<p>You will have to create new generator every time you use it.</p>
<p>If you want a permanent reference to the exhausted contents of the generator, you have to convert it to <code>list</code>.</p>
<pre><code>c = list(enumerate(b))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That is perfectly normal. <code>c</code> is a generator that will iterate over all elements of <code>b</code>, so it will iterate over <code>b</code> only once. That is when you call <code>writer.writerows(c).</code></p>
<p>After that, the generator is depleted so making a <code>list</code> out of it will return an empty list.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">[Python]: <strong>enumerate</strong>(<em>iterable, start=0</em>)</a> returns a <strong>generator</strong>.</p>
<p>From <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">[Python]: Generators</a>:</p>
<blockquote>
<p>The performance improvement from the use of generators is the result of the lazy (on demand) generation of values, which translates to lower memory usage. Furthermore, we do not need to wait until all the elements have been generated before we start to use them. This is similar to the benefits provided by iterators, but the generator makes building iterators easy.<br/>...<br/>Note: a generator will provide performance benefits only if we do not intend to use that set of generated values more than once.</p>
</blockquote>
<p>The values of a generator are consumed once it's iterated on. That's why you have to "save" it by e.g. converting it to a list (which will also consume it since it will iterate over it).</p>
<p>For more details, you could also check <a href="https://stackoverflow.com/questions/3207219/how-do-i-list-all-files-of-a-directory/48393588#48393588">[SO]: How do I list all files of a directory?
 (@CristiFati's answer - Part One)</a> (<strong>Preliminary notes</strong> section - where I illustrate the behavior of <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">[Python]: <strong>map</strong>(<em>function, iterable, ...</em>)</a>).</p>
</div>
<span class="comment-copy">did any of the answers worked for you. You can accept the useful answer.</span>
<span class="comment-copy">c is consumed not because it's iterator but because it's generator.</span>
<span class="comment-copy">@Rahul: True, fixed</span>
