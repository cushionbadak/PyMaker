<div class="post-text" itemprop="text">
<p>Let say I have a list with <code>len(list) == 5</code></p>
<p>Can I be sure <code>list[4]</code> exists?</p>
<p>Or maybe an item could get deleted and then the list would have indices 0,1,2,3,5 which would have length 5 but without index 4?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><em>Can I be sure list[4] exists?</em></p>
</blockquote>
<p>Yes you can. If <code>len(list)</code> returns 5, then you are 100% sure that there are 5 elements in your list.</p>
<blockquote>
<p>Or maybe an item could get deleted and then the list would have indices 0,1,2,3,5 which would have length 5 but without index 4?</p>
</blockquote>
<p>Again, if <code>len(list)</code> returns 5, then you have 5 elements in your list. And because lists are zero-based in python, then list[4] will be the last element of your list</p>
<p>Here is a quote from the <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer">python documentation</a>:</p>
<blockquote>
<p>Operation: s[i]</p>
<p>Result: ith item of s</p>
<p>Notes: origin 0</p>
</blockquote>
<p>You can also try it in the REPL (python language shell), as Jim showed in his <a href="https://stackoverflow.com/a/49411090/5609328">answer</a>. If you create a list of 5 elements, <code>len</code> will return you <code>5</code>. If you delete any element in the list, such as the 4th one, then <code>len</code> will now return you <code>4</code>, and you will access the last element (which was the 5th element before the deletion) by using <code>list[4]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>len(lst)</code> calls <code>lst.__len__</code> which returns the <em>number of elements in your list object</em>, and not the value of the maximum index in the list.</p>
<p>Also, lists use positional based indexing starting from 0.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you delete an item at a specific index, the rest of the data will shift back to take that place.</p>
<pre><code>&gt;&gt;&gt; l = ['a', 'b', 'c', 'd', 'e', 'f']
&gt;&gt;&gt; len(l)
6
&gt;&gt;&gt; l[4]
'e'

&gt;&gt;&gt; del l[4]
&gt;&gt;&gt; len(l)
5
&gt;&gt;&gt; l[4]
'f'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When an element from a list is deleted, the index's shift down one.</p>
<p>An index is just an element located in a list.</p>
<p>if you have a list of 1,2,3,4,5 and you delete <code>list[3]</code> then you now have 1,2,3,5 and now <code>list[3] == 5</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, if <code>len(lst) == x</code> then all indices up to <code>x - 1</code> exist.</p>
<p>Look at what happen if you delete an item.</p>
<pre><code>lst = [1, 2, 3]

len(lst) # 3

del lst[1]

len(lst) # 2
</code></pre>
<p>After deletion, the length was decremented.</p>
</div>
<div class="post-text" itemprop="text">
<p>A list in Python is a list implemented with an array, it is not just an array. If you take some lessons on data structures you can learn more about this, but the consequence of this is that a deletion of an entry of a list will be resolved by changing all the indices of the items coming after the removed item. </p>
<p>Like this</p>
<pre><code>&gt;&gt;&gt; x = [0, 1, 2, 3]
&gt;&gt;&gt; del x[2]
&gt;&gt;&gt; x
[0, 2, 3]
&gt;&gt;&gt; x[2]
3
</code></pre>
</div>
<span class="comment-copy"><i>"Can I be sure list[4] exists?"</i> Yes.</span>
<span class="comment-copy">Lists starts with index 0, so the last index always will be len(list)-1</span>
<span class="comment-copy">@vaultah actually no, they could override <code>__len__</code> ;)</span>
<span class="comment-copy">Take a look at this post: <a href="https://stackoverflow.com/questions/1857780/sparse-assignment-list-in-python" title="sparse assignment list in python">stackoverflow.com/questions/1857780/…</a></span>
<span class="comment-copy">I think you meant 5 here: "Again, if <code>len(list)</code> returns 5, then you have 4 elements in your list"</span>
<span class="comment-copy">@JimWright I did indeed, thanks for pointing it out</span>
<span class="comment-copy">you probably mean "is an array implementation, not a list implementation" right?</span>
<span class="comment-copy">@Jean-FrançoisFabre CPython uses an ArrayList with pointers, simply said. So a list implemented with an array, yes. Don't really know how to put it in a simple manner.</span>
