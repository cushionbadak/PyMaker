<div class="post-text" itemprop="text">
<p>I have two lists: </p>
<pre><code>a = ['A', 'B', 'C', 'D']
b = ['B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']
</code></pre>
<p>I would like to check list A against list B, so that if an item in list A exists in list B, I get a True result, and if not, False. i.e. </p>
<pre><code>c = [False, True, True, True]
</code></pre>
<p>I've tried the following: </p>
<pre><code>c = [False for i in range(len(a))]
for i in a:
    for j in b:
        if a[i] == b[j]:
            c[i] = True
</code></pre>
<p>I get the error: </p>
<p>TypeError: list indices must be integers, not str</p>
<p>I've also tried: </p>
<p>c = [True for i in a if i in b]</p>
<p>which returns: </p>
<p>c = [True, True]</p>
<p>I would like the correct answer to be </p>
<p>c = [False, True, True]</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = ['A', 'B', 'C', 'D'] 
b = ['B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']
c = [x in b for x in a]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do a <code>list comprehension</code> in a more readable way:</p>
<pre><code>a = ['A', 'B', 'C', 'D']
b = ['B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']
c = [True if element in b else False for element in a]
print(c)
# [False, True, True, True]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sets are handy here <a href="https://docs.python.org/3.6/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">https://docs.python.org/3.6/library/stdtypes.html#set-types-set-frozenset</a>:</p>
<pre><code># gives you a set of elements that are common for both lists.
intersect = set(a) &amp; set(b)
c = [x in intersect for x in a] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The Pythonic way to do this is with <code>[x in b for x in a]</code>, as suggested by @Dan and @Aritesh. </p>
<p>The <a href="https://docs.python.org/3/reference/expressions.html#in" rel="nofollow noreferrer"><code>in</code></a> operator checks for membership, and is generally what you want to use if you want to check if a collection has a certain value. It will give you a boolean value.</p>
<pre><code>l = ['A', 'B', 'C']
print('A' in l) # True
print('Z' in l) # False
</code></pre>
<p>If you then combine this with a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>, you get a very concise way to express what you want.</p>
<pre><code>a = ['A', 'B', 'C', 'D']
b = ['B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']
c = [x in b for x in a]
print(c) # [False, True, True, True]
</code></pre>
<h1>Large lists</h1>
<p>If the list you are checking is small, then the above code works very well. However, once you start to check lists with thousands or millions of elements, then you will notice that the above code will start to get quite slow. That is because Python has to look at each element in turn to find out whether the element is in the list or not. So for a list with a million elements in, Python might have to do a million comparison operations.</p>
<p>To speed things up, you can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">set</a>. Sets use <a href="https://en.wikipedia.org/wiki/Hash_table" rel="nofollow noreferrer">hash tables</a> under the hood, and the great thing about hash tables is that lookups take roughly the same amount of time no matter how many elements there are in them. Even with millions of elements, they are super quick. You would use them like this:</p>
<pre><code>a = ['A', 'B', 'C', 'D']
b = ['B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']
b_set = set(b)
c = [x in b_set for x in a]
</code></pre>
<p>Better still, if <code>b</code> doesn't have to be a list, you can just define it as a set. This saves you the extra step of converting the list into a set, which will be slow if you have a large number of elements.</p>
<pre><code>a = ['A', 'B', 'C', 'D']
b = {'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'}
c = [x in b for x in a]
</code></pre>
</div>
<span class="comment-copy"><code>c = [ x in b for x in a ]</code>?</span>
<span class="comment-copy">@DanD <code>set_b = set(b) ; c = [ x in set_b for x in a ]</code> for a possible performance boost (obviously depending on the actual objects in <code>b</code>)</span>
<span class="comment-copy">Works like a charm! Thanks!</span>
<span class="comment-copy">Normally you wouldn't use the variable <code>i</code> in the list comprehension here. In C-like languages "i" is usually used as a shorthand for "index", i.e. the number of the element. However, in your example, <code>i</code> represents the list element itself.</span>
<span class="comment-copy">@JackTaylor Maybe <code>element</code> itself is more readable. :)</span>
<span class="comment-copy">@theausome Sure, that would be a good one. Or in this case, as the elements are letters, I would probably go with <code>letter</code>. Whatever makes the code easiest to read.</span>
<span class="comment-copy">@JackTaylor Hmm, that's even better. Now, let OP decide which one to use.</span>
<span class="comment-copy">But this does not give the OP what he is looking for...</span>
<span class="comment-copy">@JohanL You're right. Corrected. Now it does.</span>
