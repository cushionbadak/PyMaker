<div class="post-text" itemprop="text">
<p>I would like to implement a function <code>round(num, min, max)</code> that rounds a float to at least <code>min</code> decimal places and at most <code>max</code>. I want it to return a string. I have something that works, but it was surprisingly long. Can you write something more pythonic than me?</p>
<p>Usage</p>
<pre><code>round(3.14159, 2, 4) --&gt; '3.1416'
round(3.14159, 0, 2) --&gt; '3.14'
round(3.14159, 0, 1) --&gt; '3.1'
round(3.14159, 0, 0) --&gt; '3'
round(3.14159, 4, 6) --&gt; '3.141590'
round(3.14, 4, 6)    --&gt; '3.1400'
round(3, 4, 6)       --&gt; '3.0000'
</code></pre>
<p>I think you get the idea. Here's what I've got.</p>
<pre><code>def normalize(amount, min=0, max=2):
    """
    Rounds to a variable number of decimal places - as few as necessary in the range [min,max]
    :param amount: A float, int, decimal.Decimal, or string.
    :param min: the minimum number of decimal places to keep
    :param max: the maximum number of decimal places to keep
    :return: string.
    """
    if not amount:
        return amount

    # To Decimal, round to highest desired precision
    d = round(Decimal(amount), max)
    s = str(d)

    # Truncate as many extra zeros as we are allowed to
    for i in range(max-min):
        if s[-1] == '0':
            s = s[:-1]

    # Lose a trailing decimal point.
    if s[-1] == '.':
        s = s[:-1]

    return s
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're confusing float rounding with print formatting.<sup>*</sup></p>
<p>The float <code>3.14</code> is a different number than <code>3.1415</code>. So rounding <code>3.1415</code> to 2 digits makes sense.</p>
<p>But the float <code>3.00</code> is the exact same number as <code>3.0</code>. So rounding <code>3.0</code> to 2 digits isn't going to do anything; it's still going to be the same thing you started with.</p>
<p>Meanwhile, if you want to change the way numbers are printed out, you can do that using the <code>format</code> function, the <code>str.format</code> method, f-strings, <code>%</code> formatting, etc. For example:</p>
<pre><code>&gt;&gt;&gt; pi = 3.1415
&gt;&gt;&gt; indianapi = round(pi, 0)
&gt;&gt;&gt; indianapi
3.0
&gt;&gt;&gt; f'{indianapi:.3f}'
'3.000'
</code></pre>
<p>See <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">Format Specification Mini-Language</a> for details on how to use f-strings (and <code>str.format</code> and <code>format</code>), and <a href="https://docs.python.org/3/library/stdtypes.html#old-string-formatting" rel="nofollow noreferrer"><code>printf</code>-Style String Formatting</a> for details on how to use <code>%</code>.</p>
<hr/>
<p><sub>* Either that, or you're expecting floats to keep track of their precision and preserve it through a chain of operations. If that's what you're after, floats can't do that, but <code>decimal.Decimal</code> can, so you may want to look at the <code>decimal</code> module. But I don't think that's what you want here.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>Just some small improvements, but keeping the basic idea (convert value, strip zeroes, strip trailing decimal point).</p>
<p>First change is to avoid name clash with builtin functions <code>min</code> and <code>max</code>. I think that using functions designed for the particular purpose (<code>str.format</code> for value formatting, <code>str.rstrip</code> for stripping from right, <code>str.endswith</code> for testing the last character) makes it little bit more pythonic.</p>
<pre><code>def round(amount, dmin, dmax):
    assert 0 &lt;= dmin &lt;= dmax
    astr = '{:.{prec}f}'.format(amount, prec=dmax)
    if dmax != dmin:
        astr = astr[:dmin-dmax] + astr[dmin-dmax:].rstrip('0')
        if astr.endswith('.'):
            astr = astr[:-1]
    return astr
</code></pre>
</div>
<span class="comment-copy">I don't understand the requirements. Why does <code>round(3.14159, 4, 6)</code> give <code>'3.141590'</code> rather than <code>'3.14159'</code>? What is it that determines how many places are used?</span>
