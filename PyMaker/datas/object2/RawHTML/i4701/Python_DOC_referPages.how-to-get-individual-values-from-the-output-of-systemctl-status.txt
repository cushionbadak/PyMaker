<div class="post-text" itemprop="text">
<pre><code>[root@localhost etc]# systemctl status blu_av
● blu_av.service - avscan
   Loaded: loaded (/etc/systemd/system/blu_av.service; disabled; vendor preset: disabled)
   Active: active (running) since Fri 2018-03-16 16:31:14 IST; 3s ago
 Main PID: 31934 (av)
   CGroup: /system.slice/blu_av.service
           ├─31934 /opt/services/av
           └─31956 /opt/services/av

Mar 16 16:31:14 localhost.localdomain systemd[1]: Started avscan.
Mar 16 16:31:14 localhost.localdomain systemd[1]: Starting avscan...
</code></pre>
<p>If the above is the output of my status. I want to retrive the service name,uptime and status by using a python script. Need suggestions</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe you can try  <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">regular expression</a> to parse the output. Here is what I used. Please have a look and comment.</p>
<pre><code>import subprocess, re

def read_status(service):
    p =  subprocess.Popen(["systemctl", "status",  service], stdout=subprocess.PIPE)
    (output, err) = p.communicate()
    output = output.decode('utf-8')

    service_regx = r"Loaded:.*\/(.*service);"
    status_regx= r"Active:(.*) since (.*);(.*)"
    service_status = {}
    for line in output.splitlines():
        service_search = re.search(service_regx, line)
        status_search = re.search(status_regx, line)

        if service_search:
            service_status['service'] = service_search.group(1)
            #print("service:", service)

        elif status_search:
            service_status['status'] = status_search.group(1).strip()
            #print("status:", status.strip())
            service_status['since'] = status_search.group(2).strip()
            #print("since:", since.strip())
            service_status['uptime'] = status_search.group(3).strip()
            #print("uptime:", uptime.strip())

    return service_status

def main():
    service = 'mysql'
    reponse = read_status(service)

    for key in reponse:
        print('{}:{}'.format(key, reponse[key]))


if __name__ == '__main__':
    main()
</code></pre>
<p>Output:</p>
<pre><code>service:mysql.service
status:active (running)
since:Fri 2018-03-16 09:17:57 CET
uptime:6h ago
</code></pre>
<p>I simply use <a href="https://regex101.com/" rel="nofollow noreferrer">this</a> to check my regular expressions. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>systemctl status</code> has an option <a href="https://www.freedesktop.org/software/systemd/man/systemctl.html#-o" rel="nofollow noreferrer"><code>--output</code></a> that allows to use the options of <a href="https://www.freedesktop.org/software/systemd/man/journalctl#-o" rel="nofollow noreferrer"><code>journalctl</code></a>.</p>
<p>Try JSON which could easily be parsed by Python:</p>
<pre><code>$ sudo systemctl status --output=json-pretty nginx
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could get the output from systemctl by using <code>subprocess.check_output()</code> and parse it afterwards.</p>
</div>
<span class="comment-copy">That's awesome!</span>
<span class="comment-copy">The interesting step would be the parsing. How would you do this?</span>
<span class="comment-copy">yes how would you do parsing?</span>
<span class="comment-copy">@LutzHorn @user9279273 Just split the output with <code>\n</code> as separator and you'll get an array containing every single line of output. Getting the desired information should be easy from there on.</span>
