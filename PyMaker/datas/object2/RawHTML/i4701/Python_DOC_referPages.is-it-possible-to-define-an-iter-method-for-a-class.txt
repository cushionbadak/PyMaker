<div class="post-text" itemprop="text">
<p>I have inherited a project with many large classes constituent of nothing but class objects (integers, strings, etc). I'd like to be able to check if an attribute is present without needed to define a list of attributes manually.</p>
<p>Is it possible to make a python <em>class</em> iterable itself using the standard syntax? That is, I'd like to be able to iterate over all of a class's attributes using <code>for attr in Foo:</code> (or even <code>if attr in Foo</code>) without needing to create an instance of the class first. I think I can do this by defining <code>__iter__</code>, but so far I haven't quite managed what I'm looking for.</p>
<p>I've achieved some of what I want by adding an <code>__iter__</code> method like so:</p>
<pre><code>class Foo:
    bar = "bar"
    baz = 1
    @staticmethod
    def __iter__():
        return iter([attr for attr in dir(Foo) if attr[:2] != "__"])
</code></pre>
<p>However, this does not quite accomplish what I'm looking for:</p>
<blockquote>
<pre><code>&gt;&gt;&gt; for x in Foo:
...     print(x)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'classobj' object is not iterable
</code></pre>
</blockquote>
<p>Even so, this works:</p>
<blockquote>
<pre><code>&gt;&gt;&gt; for x in Foo.__iter__():
...     print(x)
bar
baz
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Add the <code>__iter__</code> to the metaclass instead of the class itself (assuming Python 2.x):</p>
<pre><code>class Foo(object):
    bar = "bar"
    baz = 1
    class __metaclass__(type):
        def __iter__(self):
            for attr in dir(self):
                if not attr.startswith("__"):
                    yield attr
</code></pre>
<p>For Python 3.x, use</p>
<pre><code>class MetaFoo(type):
    def __iter__(self):
        for attr in dir(self):
            if not attr.startswith("__"):
                yield attr

class Foo(metaclass=MetaFoo):
    bar = "bar"
    baz = 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate over the class's unhidden attributes with <code>for attr in (elem for elem in dir(Foo) if elem[:2] != '__')</code>.</p>
<p>A less horrible way to spell that is:</p>
<pre><code>def class_iter(Class):
    return (elem for elem in dir(Class) if elem[:2] != '__')
</code></pre>
<p>then</p>
<pre><code>for attr in class_iter(Foo):
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this is how we make a class object iterable. provide the class with a <strong>iter</strong> and a next() method, then you can iterate over class attributes or their values.you can leave the next() method if you want to, or you can define next() and raise StopIteration on some condition.</p>
<p>e.g:</p>
<pre><code>class Book(object):
      def __init__(self,title,author):
          self.title = title
          self.author = author

      def __iter__(self):
          for each in self.__dict__.keys():
              yield self.__getattribute__(each)

&gt;&gt;&gt; book  = Book('The Mill on the Floss','George Eliot')
&gt;&gt;&gt; for each in book: each
...
'George Eliot'
'The Mill on the Floss'
</code></pre>
<p>this class iterates over attribute value of class Book.
A class object can be made iterable by providing it with a <strong>getitem</strong> method too.
e.g:</p>
<pre><code>class BenTen(object):
    def __init__(self, bentenlist):
        self.bentenlist = bentenlist

    def __getitem__(self,index):
        if index &lt;5:
            return self.bentenlist[index]
        else:
            raise IndexError('this is high enough')

&gt;&gt;&gt; bt_obj = BenTen([x for x in range(15)])
&gt;&gt;&gt;for each in bt_obj:each
...
0
1
2
3
4
</code></pre>
<p>now when the object of BenTen class is used in a for-in loop, getitem is called with succesively higher index value, till it raises IndexError.</p>
</div>
<div class="post-text" itemprop="text">
<p>As of Python 3.4+, making a class iterable is a bit easier using <a href="https://docs.python.org/3/library/enum.html#creating-an-enum" rel="nofollow noreferrer"><code>enum.Enum</code></a>.</p>
<pre><code>from enum import Enum

class Foo(Enum):
    bar = "qux"
    baz = 123

&gt;&gt;&gt; print(*Foo)
Foo.bar Foo.baz

names = [m.name for m in Foo]
&gt;&gt;&gt; print(*names)
bar baz

values = [m.value for m in Foo]
print(*values)
&gt;&gt;&gt; qux 123
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>class MetaItetaror(type):
    def __iter__(cls):
        return iter(
            filter(
                lambda k: not k[0].startswith('__'),
                cls.__dict__.iteritems()
            )
        )


class Klass:
    __metaclass__ = MetaItetaror

    iterable_attr_names = {'x', 'y', 'z'}
    x = 5
    y = 6
    z = 7


for v in Klass:
    print v
</code></pre>
</div>
<span class="comment-copy">Nice. Please could you explain why the OP's approach doesn't work? Thanks.</span>
<span class="comment-copy">@aix: The reason OP's approach doesn't work is that the <code>__iter__</code> method only works for <i>instances</i> of the class. This bumps the <code>__iter__</code> method up to instances of the metaclass, i.e. the class.</span>
<span class="comment-copy">@nmichaels This makes sense, thanks for the explanation.</span>
<span class="comment-copy">@aix: As other magic methods, <code>__iter__</code> is looked up in the name space of the type of the object rather than in the object's name space itself.  I did not really find this explained in the Python docs, but it can be easily seen in the <a href="http://svn.python.org/view/python/tags/r271/Objects/abstract.c?view=markup" rel="nofollow noreferrer">source code</a> (search for the definition of <code>PyObject_GetIter()</code>).</span>
<span class="comment-copy">@trudolf: <a href="https://docs.python.org/2.7/reference/datamodel.html#new-style-special-lookup" rel="nofollow noreferrer">Special methods are looked up on the type of the instance, not on the instance itself</a>.  If the instance is a class, this means the special method is looked up on the metaclass, not the class itself.</span>
<span class="comment-copy">I must admit I prefer this solution which looks more pythonic than the one of OP. But has it's not solve his problem I did not +1</span>
<span class="comment-copy">This iterates over the attributes of an <i>instance</i> of a class (i.e. the <code>book</code> in <code>book = Book(...)</code>); the question is about iterating over the <i>class</i> attributes directly (i.e. the <code>Book</code> in <code>class Book(object):</code>).</span>
<span class="comment-copy">Although this is not the answer to OP's question, it helped me because I was looking for this when searching for iterable class.</span>
