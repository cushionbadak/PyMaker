<div class="post-text" itemprop="text">
<p>As an example, let's say we are checking a <code>preferences.json</code> file with the contents of</p>
<strong><code>preferences.json</code></strong>
<pre class="lang-json prettyprint-override"><code>{
    "background_color": "red"
}
</code></pre>
<p>Then we read/modify/write the preferences back using the Python <a href="https://docs.python.org/3/library/json.html#module-json" rel="nofollow noreferrer">json module</a>.  The following two examples both function the same except one uses the <code>open()</code> context manager and one doesn't.</p>
<strong><code>change_pref_with_CM.py</code></strong>
<pre class="lang-python prettyprint-override"><code>import json

# Load the user preferences
with open('preferences.json') as prefs_file:
    prefs = json.load(prefs_file)

print(prefs['background_color'])  # Prints 'red'
# Change the user's background_color preference to blue
prefs['background_color'] = 'blue'

# Save the user preferences
with open('preferences.json', 'w') as prefs_file:
    json.dump(prefs, prefs_file)
</code></pre>
<strong><code>change_pref_without_CM.py</code></strong>
<pre class="lang-python prettyprint-override"><code>import json

# Load the user preferences
prefs = json.load(open('preferences.json'))

print(prefs['background_color'])  # Prints 'red'
# Change the user's background_color preference to blue
prefs['background_color'] = 'blue'

# Save the user preferences
prefs = json.dump(prefs, open('preferences.json', 'w'))
</code></pre>
<p>For normal file reading/writing I always use a context manager and handle all logic inside the context manager.  But in this example the file is being used just long enough to either populate a dict or write a dict to a file.  So the example not using a context manager seems much cleaner to me.  I worry that since the files are being opened "anonymously" there is nothing to call <code>close()</code> on and I don't know if the json module handles that with a context manager internally or if I would just be <a href="https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/" rel="nofollow noreferrer">leaking file descriptors</a>.  I'm sure using a context manager just in case is the safe way to go, but at the same time I would like to know how the json module handles file descriptors (<a href="https://docs.python.org/3/glossary.html#term-file-object" rel="nofollow noreferrer">or is it file objects?</a>)</p>
<p>I went looking for the source for the json module but after <a href="https://github.com/python/cpython/blob/master/Modules/_json.c" rel="nofollow noreferrer">finding it</a> and searching for "dump" and "load" and finding nothing I'm not sure what to check next.  I'm not nearly proficient enough with C to understand what's going on in there.</p>
</div>
<div class="post-text" itemprop="text">
<h3>Either of these are safe, but the version with the context manager is better practice.</h3>
<p>Keep in mind that when your program exits, all writes are flushed regardless. That said, the context manager causes a close and flush to happen <em>immediately</em>, not on garbage collection, and not on exit. As such, it's that much more explicit, and will make sure things take effect immediately even if there's more (potentially long-running) code added to the end of your program.</p>
<h3>That said, consider trying to make your writes truly atomic.</h3>
<p>There's still a window here where the file has been opened for output but hasn't had new content flushed into it; if power was yanked, or you had a SIGKILL, or a reader just tried to pull in the contents of the file inside that window, you'd lose your data. See <a href="https://stackoverflow.com/questions/2333872/atomic-writing-to-file-with-python">atomic writing to file with Python</a>; personally, I favor the advice <a href="https://stackoverflow.com/a/38075304/14122">by @vog</a> to use a purpose-built library that's aware of various platforms' idioms and best practices.</p>
</div>
<span class="comment-copy">BTW, what are your thoughts on whether it would be fair/accurate to retitle this "<i>Is a context manager needed to force a close() if a program will exit right after the write?</i>"? I'd argue that that's a title that better communicates the question to its wider audience of Python developers writing short-lived programs -- the content of the question isn't really specific to JSON (that it's <code>json.write(prefs, prefs_file)</code> doing the writes vs <code>prefs_file.write("whatever")</code> is effectively immaterial for purposes of whether/when a flush is guaranteed to take place).</span>
<span class="comment-copy">@CharlesDuffy I mean, it can be re-titled.  But the initial intent of the question was to find how Python built-ins handle file descriptors and if things like the json module handles it by itself or if I still need to use a context manager, even for small read/writes.</span>
<span class="comment-copy">closely related: <a href="https://stackoverflow.com/questions/7395542/is-explicitly-closing-files-important" title="is explicitly closing files important">stackoverflow.com/questions/7395542/â€¦</a></span>
