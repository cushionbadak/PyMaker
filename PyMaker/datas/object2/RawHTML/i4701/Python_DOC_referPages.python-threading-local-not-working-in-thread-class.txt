<div class="post-text" itemprop="text">
<p>In Python3.6, I use threading.local() to store some status for thread.
Here is a simple example to explain my question:</p>
<pre><code>    import threading

    class Test(threading.Thread):
        def __init__(self):
            threading.Thread.__init__(self)
            self.local = threading.local()
            self.local.test = 123

        def run(self):
            print(self.local.test)
</code></pre>
<p>When I start this thread:</p>
<pre><code>t = Test()
t.start()
</code></pre>
<p>Python gives me an error: </p>
<pre><code>AttributeError: '_thread._local' object has no attribute 'test'
</code></pre>
<p>It seems the <strong>test</strong> atrribute can not access out of the <strong>__init__</strong> function scope, because I can print the value in the <strong>__init__</strong> function after local set attribute <strong>test=123</strong>.</p>
<p>Is it necessary to use threading.local object inside in a Thread subclass? I think the instance attributes of a Thread instance could keep the attributes thread safe.</p>
<p>Anyway, <strong>why the threading.local object not work as expected between instance function?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>As stated in <a href="https://docs.python.org/3.6/library/threading.html#thread-local-data" rel="nofollow noreferrer">https://docs.python.org/3.6/library/threading.html#thread-local-data</a>:</p>
<blockquote>
<p>The instanceâ€™s values will be different for separate threads.</p>
</blockquote>
<p><code>Test.__init__</code> executes in the caller's thread (e.g. the thread where <code>t = Test()</code> executes). Yes, it's good place to <em>create</em> thread-local storage (TLS).</p>
<p>But when <code>t.run</code> executes, it will have completely diffferent contents -- <em>the contents accessible only within the thread <code>t</code></em>. </p>
<p>TLS is good when You need to share data in scope of current thread. It like just a local variable inside a function -- but for threads. When the thread finishes execution -- TLS disappears.</p>
<p>For inter-thread communication <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">Futures</a> can be a good choice. Some others are <em>Conditional variables</em>, <em>events</em>, etc. See <a href="https://docs.python.org/3.6/library/threading.html#event-objects" rel="nofollow noreferrer">threading</a> docs page.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you constructed your thread you were using a DIFFERENT thread.  when you execute the run method on the thread you are starting a NEW thread.  that thread does not yet have a thread local variable set.  this is why you do not have your attribute it was set on the thread constructing the thread object and not the thread running the object.</p>
</div>
<span class="comment-copy">If you want to attach data to a <code>Thread</code> object in a way that's visible from all threads, you don't need <code>threading.local</code>. Just assign to the <code>Thread</code>'s instance variables directly.</span>
