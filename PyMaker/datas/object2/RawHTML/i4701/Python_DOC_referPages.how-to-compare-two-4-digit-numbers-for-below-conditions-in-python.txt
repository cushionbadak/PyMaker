<div class="post-text" itemprop="text">
<p>Didn't know how to write the title. </p>
<p>So there is this game I am trying to code in python. </p>
<p>A random generated 4 digit number with different digits, will be compared to the user input number of the same properties.(4 digit, different digits)</p>
<p>Is there a short way of comparing both numbers to evaluate and return to the user the following:</p>
<p>1) How many digits match in both numbers that are in the same decimal place in both numbers.</p>
<p>2) How  many digits match in both numbers that are in different decimal places.</p>
<p>Output will be +1 for each of the condition 1 above and -1 for the condition 2; indicating; "+" sign for right place and the following number after "+" is for the number of right place digits; "-" sign for the wrong place and the following number after the "-" sign is for the misplaced digits that are in the number to be guessed.</p>
<p>example: for computer's number 1234</p>
<p>guess1: 1572
feedback1: +1 -1</p>
<p>guess2: 1039
feedback2: +2 -0</p>
<p>guess3: 1243
feedback3: +2 -2</p>
<p>And this goes on until the feedback is +4 -0, which returns the user guessed the number in x tries and he/she is a complete idiot:)</p>
<p>I did this in 70 coding lines (just the first guess comparison part) or so and since I don't know the first thing about coding, I am sure there is a better way to do it. Several times I had to convert the number(s) into strings and back to integers while doing so.</p>
<p>Most probably, I don't know the command to use and how to use it to simplify things, so I almost if/elif/else'd the whole thing one by one.(emphasize on almost:)) What little I know, I have learned from the python documentation online and from here. But for starters like me, it can get a bit messy to find the right thing especially when you don't really know what you are looking for:) So please, don't "you should read" me. I am and will read regardless.</p>
<p>Can someone show please me the proper short way of doing it ? Just the comparison of/testing of both numbers part will be enough to get me going more optimistically.</p>
<pre><code># 4 digit number guessing game

import random, sys
import pygame as pg # not used
from pygame.locals import * #not used
import time
import os#realized later on that if this is not there, I can't specify a 
ValueError.


#pygame init()not necessary for the time being
global tahmin#don't know why I put this here. tried to overcome the error I 
got saying the variable is referenced before it is assigned by changing the 
variable into a global one. But did not work unless I wrote this line into 
the function it is called. But since no harm done, I kept it here.
global sayı#same as above

def pick():#computer picks a number between min and max different 4 digit 
range.
    global sayı#above mentioned story
    sayı = random.randint(1023, 9876)
    sayı = str(sayı)

def testpick(): #testing the number generated by the computer for different 
digits
    while True:
        if sayı[0] == sayı[1] or sayı[0] == sayı[2] or sayı[0] == sayı[3] or sayı[1] == sayı[2] or sayı[1] == sayı[3] or sayı[2] == sayı[3]:    
            print("geçersiz sayı")#invalid number
            print("değiştiriyorum")#changing the number
            pick()
            print(sayı[0]+sayı[1]+sayı[2]+sayı[3])#just for testing for 
myself
        else:
            #tahmin_gir() cancelled
            print("Sayımı tuttum")#Picked my number
            break

def tahmin_gir():#input guess function
    global tahmin#same story above
    try:#make sure it is a number
        tahmin = int(input("Tahminini gir==&gt;"))
    except ValueError:
        print("Sadece sayı girebilirsin!")
        tahmin_gir()


def tahmin_test():#test the guess function
    global tahmin#blody global same story above
    tahmin_gir()
    if tahmin &gt;= 1023 and tahmin &lt;= 9876:
        tahmin = str(tahmin)
        if tahmin[0] == tahmin[1] or tahmin[0] == tahmin[2] or tahmin[0] == tahmin[3] or tahmin[1] == tahmin[2] or tahmin[1] == tahmin[3] or tahmin[2] == tahmin[3]:
            print("Basamaklar birbirinden farklı olmalı!")#Digits must be 
different
            tahmin_test()
    elif tahmin &lt; 0:
        print("Pozitif bir sayı gir !")#must be positive number
        tahmin_test()   
    else:
        print("Sayı 4 basamaklı olmalı !")#must be 4 digits
        tahmin_test()

print("Lütfen adını gir ve enter'a bas.")#name and enter

ad = input()
# mics. explaining the game below
print("Merhabalar! " + ad + " 4 basamaklı, basamakları birbirinden farklı 
bir sayı tuttum.")

print("Bakalım kaç denemede bulabileceksin.")

print("Sana her tahmininden sonra geri bildirimler yapacağım.")

print("Örneğin tuttuğum 1234 sayısı için, senin yaptığın tahmin 1562 
olsun.")

print("Benim sana cevabım +1 -1 olacaktır. Bunun anlamı, tahmininde 1 adet 
doğru sayı doğru yerde,")
print("1 adet de, doğru sayı yanlış yerde. Yani tahmininde baştaki 1 sayısı 
hem sayımın içinde var, hem de yeri")
print("doğru. Bunun için +1. Sondaki 2 sayısı da sayımda var ama yeri doğru 
değil. Bunun için de -1")

print("2. tahminde 1249 dediğinizi varsayalım. Buna da +2 -1 olarak yanıt 
vereceğim. Çünkü 2 adet doğru sayı doğru yerde,")
print("1 adet doğru sayı yanlış yerde.")
input("Hazır olduğunda &lt;Enter&gt;a bas.") # hit enter when ready


pick()  

print(sayı[0]+sayı[1]+sayı[2]+sayı[3])#testing for me

testpick()

tahmin_test()

print("Bir saniye, hesaplıyorum...")# calculating effect pause
time.sleep(3)

tahmin = str(tahmin)
sayı = str(sayı)
#below x a b y are not used. Was planned to be used but wasn't.
x = 0
a = 0
b = 0
d = 0
y = 0
dsdy = 0#right number right place variable
dsyy = 0#right number wrong place variable 1
dsyy1 = 0#right number wrong place variable 2
abc = 0#another variable to sum dsyy and dsyy1 variables

test_sayısı = [sayı[0], sayı[1], sayı[2], sayı[3]]# for me to see
print(test_sayısı)#for me to see

test_tahmini = [tahmin[0], tahmin[1], tahmin[2], tahmin[3]]#for me to see
print(test_tahmini)#for me to see

for d in range(0, 4):# test the corresponding respective digits for matches
    d = int(d)
    if sayı[d] == tahmin[d]:
        dsdy = int(dsdy) + 1

#print("dyds yok maalesef")
for d in range(1,4): # test the first three combinations for matched digits 
in wrong decimal places
    if sayı[0] == tahmin[d]:#test 
        dsyy1 = int(dsyy1) + 1
    else:
        continue

def sontest():# test all the remaining combinations, which I could not form 
into a logical loop so the below stupidity.
    global dsyy
    if sayı[1] == tahmin[0]:
        dsyy = int(dsyy) + 1
    else:
        dsyy = int(dsyy)
    if sayı[1] == tahmin[2]:
        dsyy = int(dsyy) + 1
    else:
        dsyy = int(dsyy)
    if sayı[1] == tahmin[3]:
        dsyy = int(dsyy) + 1
    else:
        dsyy = int(dsyy)
    if sayı[2] == tahmin[0]:
        dsyy = int(dsyy) + 1
    else:
        dsyy = int(dsyy)
    if sayı[2] == tahmin[1]:
        dsyy = int(dsyy) + 1
    else:
        dsyy = int(dsyy)
    if sayı[2] == tahmin[3]:
        dsyy = int(dsyy) + 1
    else:
        dsyy = int(dsyy)
    if sayı[3] == tahmin[0]:
        dsyy = int(dsyy) + 1
    else:
        dsyy = int(dsyy)
    if sayı[3] == tahmin[1]:
        dsyy = int(dsyy) + 1
    else:
        dsyy = int(dsyy)    
    if sayı[3] == tahmin[2]:
        dsyy = int(dsyy) + 1    
    else:
        dsyy = int(dsyy)    
    if sayı[0] == tahmin[1]:
        dsyy = int(dsyy) + 1
    else:
        dsyy = int(dsyy)    
    if sayı[0] == tahmin[2]:
        dsyy = int(dsyy) + 1
    else:
        dsyy = int(dsyy)    
    if sayı[0] == tahmin[3]:
        dsyy = int(dsyy) + 1    
    else:
        dsyy = int(dsyy)

sontest()
abc = int(dsyy1) + int(dsyy)    
print("+" + str(dsdy))
print("-" + str(abc))
input("Press &lt;Enter&gt; to continue")

print ("afferim len dümbük !")
quit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>as mentioned by the comments: this is not how you should ask a question here. you need to show some (coding) effort. please take the <a href="http://stackoverflow.com/tour">tour</a>,
read up on <a href="https://stackoverflow.com/help/asking">how to ask a question</a>
and provide a <a href="https://stackoverflow.com/help/mcve">minimal, complete and verifiable example</a>
that reproduces your problem.</p>
<p>nevertheless i was interested on how i would solve that; here is my attempt. i used <a href="https://docs.python.org/3/library/collections.html?highlight=counter#counter-objects" rel="nofollow noreferrer"><code>collections.Counter</code></a> in order to allow for repeated digits. none of this has been thoroughly tested but is should get you starting.</p>
<pre><code>from collections import Counter

def compare(n, guess):
    not_matching_digits = Counter(guess) - Counter(n)
    matching_digits = len(n) - sum(not_matching_digits.values())
    right_place = sum(1 for i0, i1 in zip(n, guess) if i0 == i1)
    wrong_place = matching_digits - right_place
    return right_place, - wrong_place
</code></pre>
</div>
<span class="comment-copy">You need to show a lot more effort than that. Pseudo code isn't going to cut it.</span>
<span class="comment-copy">Can you show what you've tried?</span>
<span class="comment-copy">I will translate the lang to english for all to understand. Give me 10 min or so.</span>
<span class="comment-copy">just edited with my code.</span>
<span class="comment-copy">wow. I ran it and it works. That is actually the summary of my 70 lines above in just 5 lines:). Thanks a lot.</span>
<span class="comment-copy">upvoted but it is just noted. Since I am below 15 rep points, my votes do not change anything yet. Thanks again.</span>
