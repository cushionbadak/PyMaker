<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1301346/what-is-the-meaning-of-a-single-and-a-double-underscore-before-an-object-name">What is the meaning of a single and a double underscore before an object name?</a>
<span class="question-originals-answer-count">
                    14 answers
                </span>
</li>
</ul>
</div>
<p>I have heard that "“Private” instance variables that cannot be accessed except from inside an object don’t exist in Python : <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow noreferrer">as seen here</a></p>
<p>However, we can create private variables using getter and setter methods in python as seen below</p>
<pre><code>class C(object):
    def getx(self):
        return self._x

    def setx(self, value):
        self._x = value

    x = property(fset=setx)

c = C()
c.x = 2
print c.x
</code></pre>
<p>When I try to access c.x, I am getting the error seen below:</p>
<pre><code>Traceback (most recent call last):
  File "d.py", line 12, in &lt;module&gt;
    print c.x
AttributeError: unreadable attribute
</code></pre>
<p>Does the fact that c.x is not accessible mean that  x behaves like a private variable? How does this fact relate to what is said in the link above?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a lot of literature on this topic, but in short:</p>
<p>Python is different to programming languages that have actually "private" attributes in that no attribute can be truly inaccessible by other functions. Yes, we can simulate the behaviour of languages like Java using <code>property</code>, as you've shown, but that is kind of fudging "true" private attributes. What <code>property</code> actually is is a higher-order function (well, technically, it's a decorator), so when you call <code>c.x</code>, although it acts as a property, you're really referring to a function that controls whether you can use the getters and setters defined in it. </p>
<p>But just because <code>c.x</code> doesn't allow direct read access, doesn't mean that you can't call <code>print c._x</code> (as @avigil pointed out). So <code>c._x</code> isn't really private - it's just as easily accessible as any other attribute belonging to the <code>C</code> class. The fact that its name starts with an underscore is just a convention - a signal to fellow programmers: "Please don't handle this variable directly, and use the getters/setters instead" (if available).</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, Python do support private variables.
You can declare a private variable within a class as follows:</p>
<pre><code>__variableName = someValue
</code></pre>
<p>Double underscore(__) followed by a variable and some assigned value.
Below Example will help you to get the accessibility nature of private variable: </p>
<pre><code>class Book:
    publisher = 'xyz'     #public variable
    _comm  = 12.5         #protected variable
    __printingCost = 7    #private variable

    def printPriVar(self):
        print(self.__printingCost)

   b = Book()
   print(b.publisher)
   print(b._comm)
   #print(Book.__printingCost) #Error
   #print(b.__printingCost) #Error
</code></pre>
</div>
<span class="comment-copy">what happens when you do <code>print c._x</code>. That is the variable you are trying to make "private" by hiding with setters and getters</span>
<span class="comment-copy">It is printing 2 :)</span>
<span class="comment-copy">so the point is, you can get around the setters and getters</span>
<span class="comment-copy">You mean there is no way to create private variables in python?</span>
