<div class="post-text" itemprop="text">
<p>In the <em>Logging Cookbook</em> on Python, there are the following comments in the section <a href="https://docs.python.org/3/howto/logging-cookbook.html#a-more-elaborate-multiprocessing-example" rel="nofollow noreferrer">"A more
elaborate multiprocessing example"</a>:</p>
<pre><code># The worker process configuration is just a QueueHandler attached to the
# root logger, which allows all messages to be sent to the queue.
# We disable existing loggers to disable the "setup" logger used in the
# parent process. This is needed on POSIX because the logger will
# be there in the child following a fork().

# The listener process configuration shows that the full flexibility of
# logging configuration is available to dispatch events to handlers however
# you want.
# We disable existing loggers to disable the "setup" logger used in the
# parent process. This is needed on POSIX because the logger will
# be there in the child following a fork().
</code></pre>
<p>What is exactly the problem of having a parent logger in a child process?</p>
</div>
<div class="post-text" itemprop="text">
<p>The (potential) problem is that if the parent process continues to log as well as the child, they will potentially be logging to the same handlers (because of how <code>fork</code> works on POSIX) and you can't guarantee that writing to a single file from two processes concurrently will work correctly. See the first paragraph of <a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes" rel="nofollow noreferrer">this section</a> in the cookbook.</p>
</div>
<span class="comment-copy">Responding to your comment - the cookbook is just a guide showing how you <i>could</i> do things - you can always adapt the code to your precise needs.</span>
<span class="comment-copy">By the way, isn't there a better approach than configuring the <code>logging</code> module <i>within</i> functions (which are potentially called multiple times) as you do in the multiprocessing sections? For instance, when testing those functions, they only log at the first calls, but not at subsequent calls, since <code>disable_existing_loggers=True</code>. And if I set <code>disable_existing_loggers=False</code>, I get the logs from third party modules that I don't want.</span>
