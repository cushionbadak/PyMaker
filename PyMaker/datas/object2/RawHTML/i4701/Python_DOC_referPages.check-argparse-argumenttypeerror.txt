<div class="post-text" itemprop="text">
<p>I want to use <code>pytest</code> to check if the <code>argparse.ArgumentTypeError</code> exception is raised for an incorrect argument:</p>
<pre><code>import argparse
import os
import pytest


def main(argsIn):

    def configFile_validation(configFile):
        if not os.path.exists(configFile):
            msg = 'Configuration file "{}" not found!'.format(configFile)
            raise argparse.ArgumentTypeError(msg)
        return configFile

    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--configFile', help='Path to configuration file', dest='configFile', required=True, type=configFile_validation)
    args = parser.parse_args(argsIn)


def test_non_existing_config_file():
    with pytest.raises(argparse.ArgumentTypeError):
        main(['--configFile', 'non_existing_config_file.json'])
</code></pre>
<p>However, running <code>pytest</code> says <code>During handling of the above exception, another exception occurred:</code> and consequently the test fails. What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that if argument's type converter raises exception <code>ArgumentTypeError</code> <code>agrparse</code> <a href="https://docs.python.org/3/library/argparse.html#invalid-arguments" rel="nofollow noreferrer">exits</a> with error code 2, and exiting means raising builtin exception <code>SystemExit</code>. So you have to catch that exception and verify that the original exception is of a proper type:</p>
<pre><code>def test_non_existing_config_file():
    try:
        main(['--configFile', 'non_existing_config_file.json'])
    except SystemExit as e:
        assert isinstance(e.__context__, argparse.ArgumentError)
    else:
        raise ValueError("Exception not raised")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's the <code>ArgumentTypeError</code> test in the <code>test_argparse.py</code> file (found in the development repository)</p>
<p><code>ErrorRaisingAgumentParser</code> is a subclass defined at the start of the file, which redefines the <code>parser.error</code> method, so it doesn't exit, and puts the error message on <code>stderr</code>.  That part's a bit complicated.</p>
<p>Because of the redirection I described the comment, it can't directly test for <code>ArgumentTypeError</code>.  Instead it has to test for its message.</p>
<pre><code># =======================
# ArgumentTypeError tests
# =======================

class TestArgumentTypeError(TestCase):

    def test_argument_type_error(self):

        def spam(string):
            raise argparse.ArgumentTypeError('spam!')

        parser = ErrorRaisingArgumentParser(prog='PROG', add_help=False)
        parser.add_argument('x', type=spam)
        with self.assertRaises(ArgumentParserError) as cm:
            parser.parse_args(['XXX'])
        self.assertEqual('usage: PROG x\nPROG: error: argument x: spam!\n',
                         cm.exception.stderr)
</code></pre>
</div>
<span class="comment-copy">The <code>parser._get_value</code> method catches the <code>ArgumentTypeError</code> and raises a <code>ArgumentError</code>.  That is turn is caught in <code>parse_known_args</code> which exits via <code>parser.error</code>.  System unittest file, <code>test_argparse.py</code> subclasses <code>ArgumentParser</code> to redefine the <code>error</code> method.</span>
<span class="comment-copy">Note that <code>_get_value</code> also catches <code>TypeError</code> and <code>ValueError</code>.  The difference is that the <code>ArgumentTypeError</code> <code>msg</code> is passed on up to the error message, while the others use a standardized message. So a full test would need to check the message content as well as the  <code>exit</code>.</span>
<span class="comment-copy">Thank you  very much, that solved the problem!</span>
<span class="comment-copy">Does the 2nd <code>raises</code> test do anything in this context?</span>
<span class="comment-copy">@hpaulj Good catch! The case is complex. The code have to catch <code>SystemExit</code> and verify that the original exception is of <code>ArgumentTypeError</code>. I updated the answer. And found that the real exception is of <code>ArgumentError</code>.</span>
