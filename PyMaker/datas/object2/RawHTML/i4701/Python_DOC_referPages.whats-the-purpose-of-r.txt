<div class="post-text" itemprop="text">
<p>In this example.</p>
<pre><code>from sys import argv
from os.path import exists

script, from_file, to_file = argv

print "Copying from %s to %s" % (from_file, to_file)

# we could do these two on one line too, how?
in_file = open(from_file)
indata = in_file.read()

print "The input file is %d bytes long" % len(indata)

print "Does the output file exist? %r" % exists(to_file)
print "Ready, hit RETURN to continue, CTRL- C to abort."
raw_input()

out_file = open(to_file, 'w')
out_file.write(indata)

print "Alright, all done."

out_file.close()
in_file.close()
</code></pre>
<p>on line 8 to 9 can't I just write it like this?</p>
<pre><code>indata = open(from_file, 'r')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sorry, I realize I misunderstood your question. Updated my response.</p>
<hr/>
<p>According to <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">the documentation</a> <code>'r'</code> is just the default value for the "mode". So these two lines are equivalent.</p>
<pre><code>in_file = open(from_file)
in_file = open(from_file, 'r')
</code></pre>
<p>Each "mode" represents what you can do with the file you just opened. All the possible options described on the documentation are:</p>
<pre><code>'r'     open for reading (default)
'w'     open for writing, truncating the file first
'x'     open for exclusive creation, failing if the file already exists
'a'     open for writing, appending to the end of the file if it exists
'b'     binary mode
't'     text mode (default)
'+'     open a disk file for updating (reading and writing)
'U'     universal newlines mode (deprecated)
</code></pre>
<p>The modes <code>b</code>, <code>t</code> and <code>+</code> should be used in conjunction with other modes. (For example, <code>r+b</code> allows you to read and write to a file without truncating it, assuming it is a binary file.)</p>
<p>If you want to just get the text from the file, you can by just calling <code>.read()</code> straight away</p>
<pre><code>indata = open(from_file).read()
</code></pre>
<p>Regarding my personal preference however, less lines doesn't necessarily mean better. Best practice is generally an approach that handles all the side effects of file handling (such as closing) like this:</p>
<pre><code>with open(from_file) as in_file:
    indata = in_file.read()
</code></pre>
<p>This question <a href="https://stackoverflow.com/questions/8011797/open-read-and-close-a-file-in-1-line-of-code">here</a> contains a good summary of people's thoughts on the topic.</p>
</div>
<span class="comment-copy">It specifies what mode a file should be opened in. By default, the mode is read(<code>r</code>). So while you can do <code>indata = open(from_file, 'r')</code>, there's no need to.</span>
<span class="comment-copy">I can't read this.</span>
<span class="comment-copy">Props to the guy that solved this before the edit</span>
