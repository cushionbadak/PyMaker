<div class="post-text" itemprop="text">
<p>I am trying to use a code which was written for python 2 and may run with python 3.6.0, but it does not run with python 3.6.4. It imports the IN module, and uses IN.IP_RECVERR. I tried to google it, but it is a 'bit' hard to find anything about a module called IN (naming fail?). To demonstrate in REPL, that it works in python 2, but not in 3.6.4:</p>
<pre><code>$ python2
Python 2.7.14 (default, Jan  5 2018, 10:41:29) 
[GCC 7.2.1 20171224] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import IN
&gt;&gt;&gt; IN.IP_RECVERR
11
&gt;&gt;&gt; 
$ python3
Python 3.6.4 (default, Jan  5 2018, 02:35:40) 
[GCC 7.2.1 20171224] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import IN
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ModuleNotFoundError: No module named 'IN'
&gt;&gt;&gt; 
</code></pre>
<p>What is the replacement for this IN module in newer versions of python 3?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is presumably the private <code>plat-linux/IN.py</code> module, which was never intended to be used. There have been plans to remove these <code>plat-*</code> files for a few zillion years, but it looks like it finally happened in <a href="https://bugs.python.org/issue28027" rel="nofollow noreferrer">issue 28027</a> for 3.6. As mentioned in <a href="https://docs.python.org/3/whatsnew/3.6.html#api-and-feature-removals" rel="nofollow noreferrer">What's New in Python 3.6</a>:</p>
<blockquote>
<p>The undocumented <code>IN</code>, <code>CDROM</code>, <code>DLFCN</code>, <code>TYPES</code>, <code>CDIO</code>, and <code>STROPTS</code> modules have been removed. They had been available in the platform specific <code>Lib/plat-*/</code> directories, but were chronically out of date, inconsistently available across platforms, and unmaintained. The script that created these modules is still available in the source distribution at <a href="https://github.com/python/cpython/blob/3.6/Tools/scripts/h2py.py" rel="nofollow noreferrer"><code>Tools/scripts/h2py.py</code></a>.</p>
</blockquote>
<p>Most of the useful constants that are at least somewhat portable (as in you can expect them to be available and work the same on your old laptop's linux and your brand-new Galaxy's linux, if not on OS X or Solaris) have long been made available through other places in the stdlib.</p>
<p>I think this specific one you're looking for is an example of not completely useless, but not portable enough to put anywhere safe, because linux documents the existence of <code>IP_RECVERR</code>, but not its value. So, you really need the version from your own system's <code>ip</code> headers.</p>
<p>The way to do this safely, if you actually need the <code>IN</code> module, is to run <code>Tools/scripts/h2py.py</code> with the Python version you're using, on the specific platform you need. That will generate an <code>IN.py</code> from the appropriate headers on your system (or on your cross-compilation target), which you can then use on that system. If you want to distribute your code, you'd probably need to put a step to do that into the <code>setup.py</code>, so it'll be run at install time (and at wheel-building time for people who install pre-built wheels, but you may need to be careful to make sure the targets are specific enough).</p>
<p>If you don't need to be particularly portable, you just need to access the one value in a few scripts that you're only deploying on your laptop or your company's set of identical containers or the like, you may be better off hardcoding the values (with a nice scare comment explaining the details).</p>
</div>
<span class="comment-copy">Do you have access to this mythical beat in your Python 2 environment?  Browse the source for some clues to its origins.</span>
<span class="comment-copy">This is probably the <code>IN.py</code> from <code>Lib/plat-linux</code> (or <code>Lib/plat-linux3</code>), which is private and not intended to be used directly. There was some reorganization of this stuff as part of 3.6, which would explain it.</span>
<span class="comment-copy">If I'm right, do you need the right way to get access to some platform-specific values for POSIX <code>ip</code> constants, or a workaround to still get at the actual equivalent module the wrong way in 3.6?</span>
<span class="comment-copy">Or if this is just a script to run locally that just needs access to <code>IN.IP_RECVERR</code> for your machine, you can of course hardcode the value <code>11</code>, which is the fastest solution (although pretty ugly).</span>
