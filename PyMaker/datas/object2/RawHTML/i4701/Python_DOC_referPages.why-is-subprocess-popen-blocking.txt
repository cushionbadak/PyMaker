<div class="post-text" itemprop="text">
<p>I have an python cgi script that handles login, this is because my website is three (school) websites combined and before my website can be used the data needs to be extracted from those websites. This extraction takes 2 minutes so I want to make a fancy (semi-fake) loading screen.</p>
<p>My register code ends with:</p>
<pre><code>import subprocess
token = "".join(random.choice(
                    string.ascii_lowercase + string.digits + string.ascii_uppercase)
                        for _ in range(5)) #generate 5 random characters
#run initScript
subprocess.Popen("python {}/python/initUser.py {} {}".format(
    os.getcwd(), uid,token), shell=True, stdin=None, stdout=None, stderr=None,
    close_fds=True)

print "Content-type: text/html"
print "Location: registerLoading.php?token={}".format(token)
print
sys.exit(0)
</code></pre>
<p>With the subprocess line stolen from: <a href="https://stackoverflow.com/questions/3516007/run-process-and-dont-wait">Run Process and Don't Wait</a></p>
<p>But the subprocess line is still blocking and I can't figure out why.</p>
<p>I'm developing on ubuntu 16.04, and it's going to run on an raspbarry pi 3 (that explains the loading time)</p>
</div>
<div class="post-text" itemprop="text">
<p><code>close_fds</code> has no effect on stdout. You want devnull file handles (<a href="https://docs.python.org/3/library/subprocess.html#subprocess.DEVNULL" rel="nofollow noreferrer"><code>subprocess.DEVNULL</code></a> in Python 3.3+), so that that the stdout of this script is closed with the call to <code>exit</code>:</p>
<pre><code>subprocess.Popen(
   ["python", "python/initUser.py", uid, token],
   stdin=None, stdout=open(os.devnull, 'wb'), stderr=open(os.devnull, 'wb'))
</code></pre>
<p>Note that I also replaced the shell command with a list form. This makes the code safe against <a href="https://www.owasp.org/index.php/Command_Injection" rel="nofollow noreferrer">command injection</a> - previously, every user could run arbitrary shell commands on your webserver.</p>
<p>In addition, you may also want to beef up the security of the token. 5 characters can be brute-forced, but much more importantly, <code>random.choice</code> is not cryptographically secure. Use <a href="https://docs.python.org/2/library/random.html#random.SystemRandom" rel="nofollow noreferrer"><code>random.SystemRandom().choice</code></a> instead, or the much more modern <a href="https://docs.python.org/dev/library/secrets.html#secrets.token_urlsafe" rel="nofollow noreferrer"><code>secrets.token_urlsafe</code></a> in Python 3.6+.</p>
</div>
<span class="comment-copy"><code>subprocess.Popen</code> is hanging? What if you run python by itself from the command line with those parameters?</span>
<span class="comment-copy">Interesting question. Take a look at this: <a href="http://eyalarubas.com/python-subproc-nonblock.html" rel="nofollow noreferrer">eyalarubas.com/python-subproc-nonblock.html</a></span>
<span class="comment-copy">@rogerdpack if I run <code>python .../python/initUser.py ... </code> it hangs for 2 minutes if you mean that. And if this script is run as a normal script (non-cgi executed) it also hangs</span>
<span class="comment-copy">This is a <i>really</i> dangerous way to use <code>Popen</code> -- and unnecessarily so. Take out the <code>shell=True</code>, and make it <code>['python', './python/initUser.py', str(uid), str(token)]</code> and you're much safer.</span>
<span class="comment-copy">As it is, if someone requests a uid that contains the string <code>$(rm -rf ~)</code>, you just deleted your home directory.</span>
<span class="comment-copy">Is it correct that this works because passing <code>stderr=None,stdout=None</code> still creates a file handler which links it with it's parent process and that that makes it hold?</span>
<span class="comment-copy">@QuintenColtof Precisely, the default (<code>None</code>) is to use the current process' stdout and stderr.</span>
<span class="comment-copy">Okey thanks for the quick response and helpful tips on security :D</span>
<span class="comment-copy">You could use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.DEVNULL" rel="nofollow noreferrer"><code>subprocess.DEVNULL</code></a>, if you are using Python 3.3 or newer.</span>
<span class="comment-copy">@MartijnPieters Good point. The reason I did not is that the OP evidently uses Python 2.7. Updated the answer.</span>
