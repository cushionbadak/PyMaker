<div class="post-text" itemprop="text">
<p>I am trying to add different prices for the weight of the product and need to save the cost in the order regarding the weight selection by the user. </p>
<pre><code>class ProductPrice(models.Model):
    QUANITY = (
        (1, '1'),
        (3, '3'),
        (5, '5'),
        ...
    )
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='prices')
    price = models.IntegerField(default=0)
    quanity = models.CharField(max_length=3, default=1, choices=QUANITY)
</code></pre>
<p>In the Order model I override save method:</p>
<pre><code>class ProductInOrder(models.Model):
    order = models.ForeignKey(Order, on_delete=models.SET_NULL, null=True)
    product = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True)
    nmb = models.IntegerField(default=1)
    price_per_item = models.IntegerField(default=0)
    total_price = models.DecimalField(max_digits=10, decimal_places=2, default=0)

    def save(self, *args, **kwargs):
         if self.nmb &gt; 3:
            quanity = 1
            self.price_per_item = self.product.prices.get(quanity=quanity).price
        elif self.nmb &gt;= 5:
            quanity = 5
            self.price_per_item = self.product.prices.get(quanity=quanity).price
        elif self.nmb &gt;= 10:
            quanity = 10
            self.price_per_item = self.product.prices.get(quanity=quanity).price
        elif self.nmb &gt;= 20:
            quanity = 20
        ...
        return super(ProductInOrder, self).save(*args, **kwargs)
</code></pre>
<p>But this is not what i need.It is likely to trigger a DoesNotExist.
How to implement it?</p>
</div>
<div class="post-text" itemprop="text">
<p>So it looks like you want a table to retrieve price per pound from product and weight.</p>
<pre><code>class PricePerPound(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='prices')
    weight = models.IntegerField(max_length=8, default=1)
    priceperlb = models.DecimalField(default=0.00)
</code></pre>
<p>If you store the weight as the max weight for the corresponding price, you can retrieve like <code>select priceperlb from PricePerPound where product = product.id and weight  &gt;= orderweight order by weight limit 1</code></p>
<p><strong>Edit:</strong></p>
<p>populate this table and you end up with a table kind of like so</p>
<pre><code>product  |  weight   | price per wt
______________________________________ 
sugar    |    5      |  2.00 
sugar    |   10      |  1.50 
sugar    |   20      |  1.25 
sugar    | 999999    |  1.15  
salt     |    5      |  1.00 
salt     |   15      |   .80 
salt     |   50      |   .65 
salt     | 999999    |   .55
</code></pre>
<p>The trick to making this work is in that query which grabs the price that corresponds to the product in question and the next weight higher than the amount being ordered.  So if someone is ordering sugar and 5 kg or less they get the price for sugar @ 5kg or less.  If they order 8 kg they get the price for between 5 and 10 kg</p>
</div>
<span class="comment-copy">I'm sorry, but I don't understand what the problem is?  Does running your code cause a DoesNotExist error?  And if so, on what line, with what class?  One problem i see is that you don't have an <b>init</b> function for your class, and it might not be saving your variables correctly.</span>
<span class="comment-copy">The method is not quite correct because if the product will have two prices for 1 and 2 values, and the user selects the number 20 and the condition will give 20, then DoesNotexists will be called. Like ProductPrice.DoesNotExist.  "One problem i see is that you don't have an init function for your class" I can not quite understand</span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#object.__init__</a></span>
<span class="comment-copy">This seems like it might be an  <a href="https://en.wikipedia.org/wiki/XY_problem" rel="nofollow noreferrer">XY  problem</a>  What are trying to achieve with these quantity levels?</span>
<span class="comment-copy">I need for different weight of goods different price per unit of weight</span>
<span class="comment-copy">Suppose I sell sugar, the price to 5kg will cost $ 2 per kilogram from 5kg the price will be lower, but at the same time I sell salt and the prices will be different. and so I need in the card of each product to add a few prices, I add the price of $ 2 per 1kg, $ 1.5 from 5kg. when a user buys an item he chooses the weight (just enters) and I need to know what price to count. my method is working, only it does not transmit the variable "quantity", and is not friendly with the lack of price for a certain weight in the product. if the user leads 20 and there is no price</span>
<span class="comment-copy">you wrote what I already had :) just changed quanity(charfield with choise)  to weigh (integerfield). I dont know how to override save method to get price what i need. above u can see my attempts.  there are incorrect conditions, i chenged them like this elif 10 &lt;= self.nmb &lt; 20 but it still doesn't work because I still have to write a block try except</span>
<span class="comment-copy">@asdasd You do not need to override the save method.  read that query.  As I said, the query is the key to making this work. Retrieve the row with the lowest weight that is not less than the quantity for the order.  That will give the price for the appropriate "bucket"</span>
