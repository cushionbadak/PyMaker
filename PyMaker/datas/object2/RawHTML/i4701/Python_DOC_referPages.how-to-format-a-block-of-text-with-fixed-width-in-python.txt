<div class="post-text" itemprop="text">
<p>I'm trying to generate a string which looks like this:</p>
<pre><code>Nadya's Cell:  (415) 123-4567
Jim's Cell:    (617) 123-4567
</code></pre>
<p>where the names and phone numbers vary and need to be interpolated in, and the phone numbers should be aligned. For this example, I've used the following template:</p>
<pre><code>name1 = "Nadya"
name2 = "Jim"

phone_number1 = "(415) 123-4567"
phone_number2 = "(617) 123-4567"

string = "{name1}'s Cell:  {phone_number1}\n{name2}'s Cell:    {phone_number2}".format(**locals())
</code></pre>
<p>Instead of adding the spaces in manually, I'd like the total width of the string to adapt to the longest of <code>name1</code> and <code>name2</code>.</p>
<p>So far, all I've been able to come up with following <a href="https://docs.python.org/3.6/library/string.html" rel="nofollow noreferrer">https://docs.python.org/3.6/library/string.html</a> is the following:</p>
<pre><code>max_length = max(len(name1), len(name2))

# This should use max_length and contain "'s Cell:"
string = "{name1:&lt;7}{phone_number1}\n{name2:&lt;7}{phone_number2}".format(**locals())
print(string)
</code></pre>
<p>which produces</p>
<pre><code>Nadya  (415) 123-4567
Jim    (617) 123-4567
</code></pre>
<p>The problem is that the total width, <code>7</code>, is still hard-coded into the template, and I don't see how to add the <code>'s Cell:</code> after the name because this produces spaces between the name and the apostrophe. Any ideas how to tackle this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use nested format specifiers, an often overlooked feature:</p>
<pre><code>max_length = max(len(name1), len(name2)) + 2

string = """{name1:&lt;{max_length}}{phone_number1}
{name2:&lt;{max_length}}{phone_number2}""".format(**locals())

print(string)
# output:
# Nadya  (415) 123-4567
# Jim    (617) 123-4567
</code></pre>
<p>The <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">documentation</a> only mentions them in passing, which probably explains why they're relatively unknown:</p>
<blockquote>
<p>A format_spec field can also include nested replacement fields within
  it. These nested replacement fields may contain a field name,
  conversion flag and format specification, but deeper nesting is not
  allowed. The replacement fields within the format_spec are substituted
  before the format_spec string is interpreted. This allows the
  formatting of a value to be dynamically specified.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Here is another solution using f-strings, following <a href="https://www.python.org/dev/peps/pep-0498/#format-specifiers" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0498/#format-specifiers</a>:</p>
<pre><code>name1 += "'s Cell:"
name2 += "'s Cell:"
max_length = max(len(name1), len(name2))

string = f"{name1:{max_length+2}}{phone_number1}\n{name2:{max_length+2}}{phone_number2}"
print(string)
</code></pre>
<p>which produces</p>
<pre><code>Nadya's Cell:  (415) 123-4567
Jim's Cell:    (617) 123-4567
</code></pre>
<p>as required.</p>
</div>
<span class="comment-copy">Have you tried replacing your spaces in your first attempt with <code>\t</code>? Aligns them for me at least, so: <code>"{name1}'s Cell:\t{phone_number1}\n{name2}'s Cell:\t{phone_number2}".format(**locals())</code></span>
<span class="comment-copy">That assumes the everything in the column fits before the next tab stop. Otherwise, you have to start messing with where the tab stops are actually set, which is terminal-dependent.</span>
