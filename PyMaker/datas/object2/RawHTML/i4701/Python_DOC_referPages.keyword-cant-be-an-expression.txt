<div class="post-text" itemprop="text">
<p>I have this code : </p>
<pre><code>class mydict():

  def __init__(self, dict, **kwargv):
    for key, item in dict.items():
      print key, item

    for key, item in kwargv.items():
      print key, item

test_dic = {1:'I', 2:'love'}
dic = mydict(test_dic, 3='python')
</code></pre>
<p>If I put <code>mydict(test_dic, name='python')</code> it works, but if it's an <code>int</code>, I got the following error: </p>
<blockquote>
<p>keyword can't be an expression</p>
</blockquote>
<p>Can someone explain me the processes behind this ? </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>3='python'
</code></pre>
<p>is what is called a keyword argument.  The keyword in this case is <code>3</code>.  But keywords must be valid identifiers.  <a href="https://docs.python.org/3/reference/lexical_analysis.html#identifiers" rel="nofollow noreferrer">Valid identifiers</a> are:</p>
<blockquote>
<p>the uppercase and lowercase letters A through Z, the underscore _ and, except for the first character, the digits 0 through 9</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Variable names cannot start with a number and the kwargs inputs has to be valid variable names</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, keyword arguments names, like parameter names, have to be identifiers—the same rules as for variable names, function names, etc.</p>
<p>This isn't really explained in the tutorial. It is described precisely in <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-call" rel="nofollow noreferrer">the reference</a>, but that's not exactly novice-friendly.</p>
<p>Anyway, this means the shorthand <code>dict(key1=value1, key2=value2)</code> doesn't work for all dictionaries, just dictionaries whose keys are strings that are valid identifiers. Of course you can always just use a dict display, as you did with <code>test_dic</code>.</p>
<p>This usually comes up in more advanced code, where you try to call something like <code>func(**test_dic)</code>, which expands into the equivalent of <code>func(1='I', 2='love')</code> and gives you a very mysterious error, so… be glad you ran into this earlier, where it's easier to understand.</p>
</div>
<span class="comment-copy">A valid <code>**kwargv</code> is collection of extra method argument names <code>str</code> and their provided values, since <code>int</code> cannot be used as an attribute name for a given method, that's why it is showing error.</span>
<span class="comment-copy">Read the docs!!</span>
<span class="comment-copy">@HamzaHaider The docs aren't hugely helpful here. The <a href="https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments" rel="nofollow noreferrer">tutorial section on keyword args</a> doesn't mention that they have to be identifiers; you have to guess it from the fact that they match parameter names, and even if you did guess that, you might guess that in the case of <code>**kw</code> (as used by the <code>dict</code> constructor) that rule wouldn't apply. If you follow the link to the glossary, and follow another link from there, it does finally tell you that "an argument preceded by an identifier", but it's not super-discoverable.</span>
