<div class="post-text" itemprop="text">
<p>Which of the following describes the behavior of <code>from [...] import [...]</code>?</p>
<ul>
<li><strong>cwd  first</strong>: look in working directory first, then the path</li>
<li><strong>path first</strong>: look in the path, then the working directory</li>
</ul>
<p>Consider the following scripts:</p>
<p><strong>Change Path</strong></p>
<pre><code>sys.path.insert(0, 'E:\\demo_dir\\example_dir\\eg_dir\\test_dir\\')
from src import name
sys.path.pop(0)
</code></pre>
<p><strong>Change Cwd</strong></p>
<pre><code>old_cwd = os.getcwd()
os.chdir('E:\\demo_dir\\example_dir\\eg_dir\\test_dir\\')
from src import name
os.chdir(old_cwd)
</code></pre>
<p><strong>Combined Script</strong></p>
<pre><code>old_cwd = os.getcwd(); os.chdir('E:\\demo_dir\\example_dir\\eg_dir\\test_dir\\')
sys.path.insert(0, 'E:\\demo_dir\\example_dir\\eg_dir\\test_dir\\')

from src import name

os.chdir(old_cwd)
sys.path.pop(0)
</code></pre>
<p>Suppose there something named <code>src</code> in both sys.path and the cwd,
and that the <code>src</code> in the system path is not the same <code>src</code> in the cwd</p>
<p>Did we just import <code>src</code> from sys.path? or  <code>src</code> from the cwd?</p>
</div>
<div class="post-text" itemprop="text">
<p>Only <code>sys.path</code> is used to search for files to load as modules; Python does not look at other directories outside of <code>sys.path</code>.¹ The current working directory will be searched only if <code>''</code> (the empty string) is in the path², so if there is an <code>src.py</code> in both the current working directory and another directory in the path, the one that will be loaded is whichever comes first in the path.</p>
<p>You will find that <code>''</code> appears at the front of <code>sys.path</code> automatically when you run the Python interpreter directly (including when you run <code>python -m modulename</code>). This is <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow noreferrer">standard Python behaviour</a>. However, if you run a script directly (e.g., typing just <code>myscript</code> where it starts with <code>#!/usr/bin/env python</code>) instead that script's directory (e.g., <code>/usr/bin</code> if your shell found and ran <code>/usr/bin/myscript</code>) will be added to the front of the path. (The script itself may of course add further items to the front of the path as it runs.)</p>
<hr/>
<p>¹ Actually, this is not entirely true; <code>import</code> queries finders in <code>sys.meta_path</code> first. Those can look anywhere they like and may not even use <code>sys.path</code>.<br/>
² You could also use <code>.</code>, <code>./.</code> or various similar ideas in the path, though getting tricky like that is just asking for trouble.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/15252040/how-does-python-find-a-module-file-if-the-import-statement-only-contains-the-fil">How does python find a module file if the import statement only contains the filename?</a></span>
<span class="comment-copy">This is true, but you should add some details about when/why <code>''</code> is the first element of <code>sys.path</code> and when/why it is not.</span>
<span class="comment-copy">@wim Good thought; I have done so. Feel free to edit if you can improve this.</span>
<span class="comment-copy">Yes, that LGTM +1</span>
