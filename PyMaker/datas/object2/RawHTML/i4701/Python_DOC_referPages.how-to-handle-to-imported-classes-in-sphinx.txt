<div class="post-text" itemprop="text">
<p>I have a package with the following abbreviated directory structure:</p>
<pre><code>package/
    __init__.py
    a.py
    b.py
    docs/
        source/
            a.rst
            b.rst
</code></pre>
<p><code>__init__.py</code> contains:</p>
<pre><code>from .a import A
from .b import B
</code></pre>
<p>a.py contains</p>
<pre><code>from .b import B
</code></pre>
<p>I am using "show-inheritance" in the rst</p>
<p>All the functionality and tests work perfectly, but I get an error message when I run "make html" in \docs</p>
<pre><code>"..../a.py", line x in &lt;module&gt;
    from .b import B
ValueError: Attempted relative import in non-package
</code></pre>
<p>I think it is related to paths and directories but I cannot see how the issue can be resolved</p>
</div>
<div class="post-text" itemprop="text">
<p>In <code>a.py</code> try:</p>
<pre><code>from package.b import B
</code></pre>
<p>Your <code>__init.py__</code> binds the name <code>package</code> to the submodule <code>b</code>.  Details in <a href="https://docs.python.org/3/reference/import.html#submodules" rel="nofollow noreferrer">import submodules</a>.</p>
</div>
<span class="comment-copy"><code>package</code> needs to be importable.  You could extend <code>sys.path</code> in the Sphinx config relative to that config module (<code>__file__</code> and <code>os.path</code> functions are useful here).</span>
<span class="comment-copy">Thanks. The directory containing the modules already appears in sys.path</span>
<span class="comment-copy">It shoudn't! The directory containing the <i>package</i>, and only that should. If the modules directory(s) are also in <code>sys.path</code> you suddenly have more than one way to import modules which may/will cause problems.</span>
<span class="comment-copy">Thanks. But that just gives me ImportError: No module named package.b</span>
