<div class="post-text" itemprop="text">
<p>I am familiar with the recursive function of the Hanoi Tower. </p>
<p>Now I need to visualize the movements, representing the discs with asterisks (I guess disc number = number of asterisks makes sense).</p>
<p>Does anyone have a hint or example for how to draw the disc movements step by step using just </p>
<pre><code>        *                           
       ***                        ***
      *****                      *****            *
     --------------------       -----------------------     ...    
</code></pre>
<p>or similar?</p>
<p>This is the sample code my professor provided and I do understand how the recursion works. But after one lecture in Python I must say that I'm somewhat overwhelmed with the visualization task.</p>
<pre><code>def hanoi(n, p1, p2, p3):
    if n==1:
        print("move from %d to %d" %(p1, p3))
    else:
        hanoi(n-1, p1, p3, p2)
        print("move from %d to %d " %(p1, p3))
        hanoi(n-1, p2, p1, p3)

    return

if __name__=='__main__':
    j=int(input('Input the number of disk to be moved:\n'))
    print('Number of disk to be move is %d \n'%j)
    hanoi(j, 1, 2, 3)
</code></pre>
<p>Help would be much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>As Phi Lipp mentioned, you need an idea of state.</p>
<p>State could be represented in many ways, but the end goal is an X by Y grid of characters that you print to the screen.</p>
<p>For example, if we wanted to print</p>
<pre><code>  *
 ***
*****
</code></pre>
<p>we could store this in code as a 3x5 array.</p>
<pre><code>[
  [' ', ' ', '*', ' ', ' '],
  [' ', '*', '*', '*', ' '],
  ['*', '*', '*', '*', '*'],
]
</code></pre>
<p>Then you can loop over this and print it.</p>
<pre><code>for row in state:
    for character in row:
        print(character, end='')
</code></pre>
<p>An ugly shortcut would be</p>
<pre><code>print('\n'.join(''.join(y) for y in x))
</code></pre>
<p>Now if you think of this like a movie, every frame of your animation is this X by Y array. Every frame is also one of your print statements in the code. The difficulty lies in transforming an action e.g. "Move from 1 to 3", into a state representation.</p>
<p>If we used an X by Y array as the state, it would be difficult to move from space1 to space2 because an array of characters doesn't tell you anything about how many rings and how large the ring is in space1. This is a sign that we need a better state.</p>
<p>This is pretty open ended, but one solution is if we apply object oriented programming, we can define Ring and Tower objects, where a tower is a collection of rings. An action therefore moves rings between towers, and the state of Rings and Tower objects is used to create the X by Y array.</p>
<p>I'll be lazy and represent a ring as an integer and towers are an array of 3 <a href="https://docs.python.org/2/library/collections.html#collections.deque" rel="nofollow noreferrer">deques</a>. The initial state can look something like</p>
<pre><code>from collections import deque
towers = [deque([1,2,3]), deque(), deque()]
</code></pre>
<p>Now you need a function to move from tower U to tower V:</p>
<pre><code>def move_ring(from, to):
    top_ring = from.popleft()
    to.append(top_right)
</code></pre>
<p>Finally, you need to go from your towers/rings state to a printable X by Y array. It would be easier to render each tower at a time, and each ring within:</p>
<pre><code>def render_ring(ring):
    result = '*' * ring  # the character * repeated ring times.
    return result.center(user_input) # add the spaces required

def render_tower(tower):
    result = []
    for ring in tower:
        result.append(render_ring(ring))
    return result
</code></pre>
<p>Finally, we'll want to combine the towers together into one printable array. You can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a> for this.</p>
<p>def render_final(towers):
    tower_results = []
    for tower in towers:
        tower_results.append(render_tower(tower))
    result = []
    for all_rows in zip(result):
        result.append(''.join(all_rows))
    return result</p>
<p>Now you should be able to print out the result and see the frame of your animation.</p>
<p>This should help you get on the right track. Please treat the code above as pseudocode as it is not tested. I also do not recommend using an integer and a list of deques as your state, as that does not contribute to code cleanliness.</p>
<p>One more thing, if you print out the result, it won't be pretty since the text will be printing and scrolling down. If you use the built in <a href="https://docs.python.org/2/howto/curses.html" rel="nofollow noreferrer">curses</a> library however, you can get a beautiful output.</p>
</div>
<span class="comment-copy">This is a somewhat complicated problem, since the <code>hanoi</code> function you show doesn't have any concept of state (it just makes moves in a specific pattern). To actually draw the board, you need to know where <i>all</i> the disks are, not just which posts you're moving between. Have you tried anything on the visualization side yet? Just being able to draw the initial state would be a good start. As it is, this question may be too broad (you're essentially asking us to do your homework for you).</span>
<span class="comment-copy">Thank you wonton for the detailed answer, that gives me an idea and I can apply changes. It seems like I cannot execute a function with "from" as argument as it underlines the 'def' in red and gives the error 'invalid syntax &lt;string&gt;'. Where does that come from?</span>
