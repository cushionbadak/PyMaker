<div class="post-text" itemprop="text">
<p>Say I want to implement a TCP/UDP connection between two computers.
I know how to do this if I know computer's IPs and they are in the same LAN. But what if they are in different LANs?</p>
<p>P. S. it would be great if someone showed me the code on how to connect two computers in the same LAN if they don't know each others IPs.</p>
<p>P. P. S. I would prefer using stdlib and sockets library </p>
</div>
<div class="post-text" itemprop="text">
<p>To put it really simply, if they are in different LAN, meaning networks, you will need a layer 3 device (typically a router) to route the traffic between the devices.</p>
<p>Say device A IP is 192.168.3.3/24 (subnet mask 255.255.255.0 /24) and device B is 192.168.4.4/24. If A wants to send to B, he won't know how to send this as the device will check it's subnet mask and see that the network portion is not the same.</p>
<p>Thus you will need what we call a default gateway or a static route. To make it easier we will stick with a default gateway (and check the static route usage if you need this specifically). This means for the device: if you don't know where the other network is, send this packet to the default gateway (router) he will deal with this and find the way to the end device.</p>
<p>Technically speaking it doesn't really matter to be on the WAN or LAN, in the end it's a different network and packet needs to be routed.</p>
<p>One important point, you will need to know the IP at some point. Either you, the app or whatever. One previous comment mentioned the use of DNS, this can be a solution but you still need to know an IP address.
In a way it's like saying I will send you a letter but I don't know your address. This won't be delivered.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your hosts are on different subnets, you cannot connect them without knowing their IP Addresses. They are isolated from each other, you must forward the ports to their IPs from your router configuration panel or set them up as DMZ hosts. I suppose you could setup a local DNS server and assign your hosts human-readable hostnames and resolve those IPs dynamically to jump this hurdle, but the ports must still be opened or the router firewall will not forward the traffic. And you'll need to add your local DNS server to the whichever host is initiating the connection's name server list. And.. the DNS server still needs to know what the IP of the hosts expecting connections are, so if they change, this needs to be updated somehow.</p>
<p>For TCP: On the SAME subnet, you can use SSDP: <a href="https://pypi.python.org/pypi/ssdp/1.0.1" rel="nofollow noreferrer">https://pypi.python.org/pypi/ssdp/1.0.1</a>
SSDP is a protocol of UPNP that uses UDP multicast, which essentially sends UDP packets to a special ip:port that your router will broadcast to all connected clients, such that all hosts will receive datagrams. The hosts can then send their IPs back to the server and you'll be able to create TCP connections.</p>
<p>For UDP: I'm not sure what you want, UDP already has a facility (multicast) for sending data to any arbitrary host. </p>
<p>As for code: Please do your own work and research, this isn't a free code writing service. To get you started, you can check out the python api code examples: <a href="https://wiki.python.org/moin/UdpCommunication#Multicasting.3F" rel="nofollow noreferrer">https://wiki.python.org/moin/UdpCommunication#Multicasting.3F</a></p>
</div>
<span class="comment-copy">By default, broadcast are NOT forwarded between networks. A router stops the broadcast (as opposed to a switch).</span>
<span class="comment-copy">so basically, you are saying, that I could use the router as the third device, that will transmit data between two endpoints (machine A and B)?</span>
<span class="comment-copy">@CorporaciaK.U.BANDREYDEN yes to route traffic between two different network you need a router (or any layer 3 device that do routing like a layer 3 switch, a firewall etc.).</span>
<span class="comment-copy">thanks, that really helped. Do you know any links or technichal insights of doing this in python?</span>
<span class="comment-copy">Not sure about python, but for the connection part probably "socket" module can help. <a href="https://docs.python.org/3/library/socket.html" rel="nofollow noreferrer">docs.python.org/3/library/socket.html</a> Btw: routing is done at the OS level I believe, so if you don't have a default gateway etc, you will need to specify it at some point with python or directly on the network manager (which is the easiest in the beginning).</span>
<span class="comment-copy">Thanks a lot, that helped. I did my research but could not find solutions for my problem... I am writing a multiplayer game so I need two computers to communicate at least in one LAN without knowing each others IPs. But I suppose SSDP should solve it.</span>
<span class="comment-copy">@CorporaciaK.U.BANDREYDEN There is no IP-less protocol. Even in computer games, the reason why game clients can communicate is because there is always some sort of server whose IP is known or added to an Authoritative DNS server. The clients connect through the server, which either forwards traffic or allows for a connection to be established peer to peer (since the server will know both hosts' IPs). You have to know the IP of at least one entity in the network application.</span>
<span class="comment-copy">For example, if you go to <code>google.com</code>, assuming your computer isn't caching, what is happening is the authoritative DNS server (which is known, because there are statically configured DNS server IPs on every computer) for the <code>google.com</code> hostname is contacted by your browser. Your browser obtains the IP address for google, and initiates a TCP connection to that IP. There is no "magic" in computer networking.</span>
<span class="comment-copy">ok, thanks a lot, now its clearer for me</span>
