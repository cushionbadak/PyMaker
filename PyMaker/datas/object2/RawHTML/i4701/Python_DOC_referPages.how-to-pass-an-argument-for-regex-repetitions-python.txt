<div class="post-text" itemprop="text">
<p>I'm learning about regex. If I want to find all the 5 letter words in a string, I could use:</p>
<pre><code>import re
text = 'The quick brown fox jumps over the lazy dog.'
print(re.findall(r"\b[a-zA-z]{5}\b", text))
</code></pre>
<p>But I want to write a simple function whose argument includes the string and the length of the word being found. I tried this:</p>
<pre><code>import re
def findwords(text, n):
    return re.findall(r"\b[a-zA-z]{n}\b", text)    

print(findwords('The quick brown fox jumps over the lazy dog.', 5))
</code></pre>
<p>But this returns an empty list. The <code>n</code> is not being recognized.</p>
<p>How can I specify an argument with the number of repetitions (or in this case, the length of the word)?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python does not magically fill the value of <code>n</code> into the string. For this you either need to use <code>format</code>:</p>
<pre><code>r"\b[a-zA-z]{{{}}}\b".format(n)
</code></pre>
<p>or, if you are running Python &gt;= 3.6, use the new <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">f-strings</a> (which can be combined with the <code>r</code> prefix denoting a raw string):</p>
<pre><code>fr"\b[a-zA-z]{{{n}}}\b"
</code></pre>
<p>In both cases you need the outer two <code>{{}}</code> to create a literal <code>{}</code> and the inner is a format placeholder.</p>
<p>If you want to avoid having to escape the literal <code>{}</code>, you can use the older <code>%</code>-formatting to achieve the same thing. For this <code>n</code> needs to always be an integer (which it is here):</p>
<pre><code>r"\b[a-zA-z]{%i}\b" % n
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's simpler than you may realize. <em>There is nothing special about a "regex string"</em>: it is a simple, basic, everyday text string. About the only thing remotely remarkable is that it is <em>usually</em> defined with the <code>r</code> prefix, because the backslash means something in (unprefixed) Python strings as well, and you don't want to double up these, and ... it is fed as-is into Python's internal regex module.</p>
<p>So where the string comes from, doesn't really matter! Construct it any way you like, then feed the result into <code>re.findall</code>:</p>
<pre><code>def findwords(text, n):
    return re.findall(r"\b[a-zA-z]{" +str(n) + r"}\b", text)

&gt;&gt;&gt; findwords(text, 3)
['The', 'fox', 'the', 'dog']
&gt;&gt;&gt; findwords(text, 4)
['over', 'lazy']
</code></pre>
<p>Note the repeated use of <code>r</code>, because it is not a regex peculiarity but a Python one, and you need to prefix <em>all</em> separate strings with it to prevent backslashes running rampant and messing up your carefully constructed expression.</p>
<p>(The same goes for the input to this function. This will also work, unless you test the argument and reject non-numbers:</p>
<pre><code>&gt;&gt;&gt; findwords(text, '5} {1')
['quick ', 'brown ', 'jumps ']
</code></pre>
<p>... which I did not.)</p>
</div>
<div class="post-text" itemprop="text">
<p>This can be done very easily without generating a regex pattern. Just simply extract all words and then use list comprehension to gather all words of length <code>n</code>.</p>
<p><a href="https://tio.run/##JcwxEoIwFEXRPqt4QwOMQkNN4R6sZCjQBImG/PAJBth8xLG@c67b/EC2ilGPjtiDlRBerR410uugMC368cadKVj0tOK1jG4GfRTDH9l0@wZJzzIVgVjOB2NV9trKzpiMk6Yr9ktxa0/JGb9tLoRjbX3WhGPHCNAWf6l7GGWzkKOuUbV5jF8" rel="nofollow noreferrer">See code in use here</a></p>
<pre><code>import re

text = 'The quick brown fox jumps over the lazy dog.'
words = re.findall(r"[a-zA-Z]+", text)

print([w for w in words if len(w) == 3])
</code></pre>
<p>Result: <code>['The', 'fox', 'the', 'dog']</code></p>
</div>
<span class="comment-copy">Something like <code>r"\b[a-zA-z]{" + n + r"}\b"</code> ?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2960772/how-do-i-put-a-variable-inside-a-string-in-python">How do I put a variable inside a String in Python?</a></span>
<span class="comment-copy">This explains a lot. I see now how to use fr. But would the use of 6 brackets be clean enough python? Is it something you'd see in professional programming?</span>
<span class="comment-copy">@Christy Yes, I think so. There is always the alternative of using <code>%</code> formatting in that case, though: <code>r"\b[a-zA-z]{%i}\b" % n</code>.</span>
<span class="comment-copy">Still working on understanding; why would we change n into a string if it represents a length?</span>
<span class="comment-copy">@Christy Because <code>"a" + 5</code> is not defined in Python, whereas <code>"a" + str(5) == "a5"</code>.</span>
<span class="comment-copy">@Christy: don't forget that a regex argument is still  a <i>string</i>. There are no 'numbers' in it. The regex parser is responsible for recognizing any numbers as such, not Python.</span>
