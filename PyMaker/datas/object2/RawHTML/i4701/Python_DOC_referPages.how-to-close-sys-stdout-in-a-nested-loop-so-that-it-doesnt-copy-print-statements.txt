<div class="post-text" itemprop="text">
<p>I am new to python 3 and I'm working on sentiment analysis of tweets. My code begins with a for loop that takes in 50 tweets, which i clean and pre-process. After this (still inside the for loop) i want to save each tweet in a text file(every tweet on a new line)
Here's how the code goes:</p>
<pre><code>    for loop:
        ..
        print statments
        ..
        if loop:
            filename=open("withnouns.txt","a")
            sys.stdout = filename
            print(new_words)#tokenised tweet that i want to save in txt file
            print("\n")
            sys.stdout.close()#i close it because i dont want to save print statements OUTSIDE if loop to be saved in txt file
        ..
        ..
        print statements
</code></pre>
<p>After running this its showing error: I/O operation on closed file on line 71 (the first print statement after if loop)</p>
<p>My question is, is there any way I can temporarily close and then open <code>sys.stdout</code> and have it active only inside the if loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure if this is exactly what you want to do but you can change this</p>
<pre><code>filename=open("withnouns.txt","a")
sys.stdout = filename
print(new_words)
print("\n")
sys.stdout.close()
</code></pre>
<p>to</p>
<pre><code>filename=open("withnouns.txt","a")
filename.write(new_words + "\n")
filename.write("\n\n")
filename.close()
</code></pre>
<p>alternatively, you can get the original value of <code>sys.stdout</code> from <code>sys.__stdout__</code>, so your code becomes</p>
<pre><code>filename=open("withnouns.txt","a")
sys.stdout = filename
print(new_words)
print("\n")
filename.close()
sys.stdout = sys.__stdout__
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You do not need to assign to <code>sys.stdout</code> <em>at all</em>. Just tell <code>print()</code> to write to the file instead, using the <code>file</code> argument:</p>
<pre><code>print(new_words, file=filename)
print("\n", file=filename)
</code></pre>
<p>There is no need to assign anything to <code>sys.stdout</code> now, because now <code>print()</code> writes directly to your file instead.</p>
<p>You also want to use the file object as a context manager, so it is closed or you:</p>
<pre><code>with open("withnouns.txt","a") as filename:
    print(new_words, file=filename)
    print("\n", file=filename)
</code></pre>
<p>You never needed to close the <code>sys.stdout</code> reference anyway, you wanted to close <code>filename</code> instead, and restore <code>sys.stdout</code> to it's former state.</p>
<p>If you did want need to replace <code>sys.stdout</code>, you have a few options, from most correct to least:</p>
<ul>
<li><p>Use <a href="https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout" rel="nofollow noreferrer"><code>contextlib.redirect_stdout()</code></a>:</p>
<pre><code>import contextlib

with contextlib.redirect_stdout(some_fileobject):
    # do things that write to stdout
</code></pre>
<p>At the end of the block <code>stdout</code> is fixed up for you.</p></li>
<li><p>Manually store <code>sys.stdout</code> first:</p>
<pre><code>old_stdout = sys.stdout
sys.stdout = new_object
try:
    # do things that write to stdout
finally:
    sys.stdout = old_stdout
</code></pre></li>
<li><p>Use the <a href="https://docs.python.org/3/library/sys.html#sys.__stdout__" rel="nofollow noreferrer"><code>sys.__stdout__</code> copy</a>; this is set on start-up:</p>
<pre><code>sys.stdout = new_object
try:
    # do things that write to stdout
finally:
    sys.stdout = sys.__stdout__
</code></pre>
<p>You need to take into account that <code>sys.stdout</code> may have been replaced by something else before your code runs, and restoring it back to <code>sys.__stdout__</code> might be the wrong thing to do.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You're confusing two different kinds of writing to file.</p>
<p><code>sys.stdout</code> pipes your output to the console/terminal. This can be written to file but it's very roundabout.</p>
<p>Writing to file is different. In python you should look at the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code> module</a> if you're writing lists of values of all the same length (and maybe even if you're not, it's very easy to use).</p>
<p>Open your file outside the loop. In the loop, write to file line by line. Close the file outside the loop. This is automatically done for you if you use the following "with" syntax:</p>
<pre><code>import csv
with open('file.csv') as f:
    writer = csv.writer(f, delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL)

    for loop:
        # tokenize tweet
        writer.writerow(tweet)
</code></pre>
<p>Alternatively, loop through and save tokenized-tweets to a list-of-lists. Then, outside and after the loop, write the entire thing to a file:</p>
<pre><code>import csv
tweets = []
for loop:
    # tokenize tweet
    tweets.append(tweet)

with open('file.csv') as f:
    writer = csv.writer(f, delimiter=',', quotechar='|', quoting=csv.QUOTE_MINIMAL)
    writer.writerows(tweets)
</code></pre>
</div>
<span class="comment-copy">Are you just trying to write lines to a file? I'm not sure you need to use sys.stdout at all in that case. Couldn't you just use <code>writelines</code>? <a href="https://www.tutorialspoint.com/python/file_writelines.htm" rel="nofollow noreferrer">tutorialspoint.com/python/file_writelines.htm</a></span>
<span class="comment-copy">Haha yes I got it now @Jay</span>
<span class="comment-copy">see <a href="https://docs.python.org/3/library/sys.html#sys.__stdin__" rel="nofollow noreferrer">docs.python.org/3/library/sys.html#sys.__stdin__</a></span>
<span class="comment-copy"><code>print()</code> <i>adds</i> a newline, so <code>print(new_words)</code> and <code>print(</code>\n')` will result in <b>three newlines</b>, while your <code>write()</code> calls will only produce a single newline.</span>
<span class="comment-copy">@MartijnPieters didn't even think about that! ill fix that</span>
<span class="comment-copy">This totally works! Thanks a lot :D</span>
<span class="comment-copy">Thank you so much I get it now! I didnt know there was no need to use sys.stdout at all. Sorry for my ignorance.</span>
<span class="comment-copy">Oh yes I could do that! Thanks!</span>
