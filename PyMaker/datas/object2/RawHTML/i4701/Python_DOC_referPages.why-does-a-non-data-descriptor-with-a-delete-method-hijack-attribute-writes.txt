<div class="post-text" itemprop="text">
<p>Both of them are python from documents :</p>
<p><a href="https://docs.python.org/3.4/howto/descriptor.html#id4" rel="nofollow">the first one</a> says:</p>
<blockquote>
<p>If an object defines both <code>__get__()</code> and <code>__set__()</code>, it is considered a data descriptor. 
  Descriptors that only define<code>__get__()</code> are called non-data descriptors
      (they are typically used for methods but other uses are possible).</p>
</blockquote>
<p><a href="https://docs.python.org/3.4/howto/descriptor.html#id4" rel="nofollow">the second one</a> says:</p>
<blockquote>
<p>If the descriptor defines <code>__set__()</code> and/or <code>__delete__()</code>, it is a data descriptor; if it defines neither, it is a non-data descriptor. 
     Normally, data descriptors define both <code>__get__()</code> and <code>__set__()</code>, while non-data descriptors have just the <code>__get__()</code> method. </p>
</blockquote>
<p>The question is : is it enough to only define <code>__set__</code> to make a data descriptor ?</p>
<p>And we I refer to the python source code, I found this :</p>
<pre><code>#define PyDescr_IsData(d) (Py_TYPE(d)-&gt;tp_descr_set != NULL)
</code></pre>
<p>Seems we can only define <code>__set__</code> without <code>__get__</code>.</p>
<p>And then I turn to write some examples to prove what I got :</p>
<pre><code>class GetSet(object):
def __get__(self, instance, cls =None):
    print('__get__')

def __set__(self, obj, val):
    print('__set__')

class Get(object):
    def __get__(self, instance, cls =None):
        print('__get__')

class Set(object):
    def __set__(self, obj, val):
        print('__set__')

class UserClass(object):
    a = Get()
    b = Set()
    c = GetSet()


u = UserClass()
u.__dict__['a'] = 'a'
u.__dict__['b'] = 'b'
u.__dict__['c'] = 'c'

print('start')
print(u.a)
print(u.b)
print(u.c)
</code></pre>
<p>The output makes me confusing again:</p>
<pre><code>start
a
b
__get__
None
</code></pre>
<p>According to the python attribute lookup orders : the priority of data descriptor is higher than <code>obj.__dict__</code>.</p>
<p>My example shows : Only the descriptor defines both <code>__set__</code> and <code>__get__</code> makes it a data descriptor !</p>
<p>Which one is the right answer ?</p>
<p><code>__set__</code> --- &gt; data descriptor</p>
<p>or </p>
<p><code>__get__</code> and <code>__set__</code> ---&gt; data descriptor ?</p>
</div>
<div class="post-text" itemprop="text">
<p>The second quote is correct. The second quote comes from the <a href="https://docs.python.org/3/reference/datamodel.html#invoking-descriptors" rel="nofollow noreferrer">Python language reference</a> (though you've provided the wrong link), and the language reference is considered more authoritative than how-to guides. Also, it matches the actual behavior; the <a href="https://docs.python.org/3/c-api/descriptor.html#c.PyDescr_IsData" rel="nofollow noreferrer"><code>PyDescr_IsData</code></a> macro you found is the actual routine <a href="https://github.com/python/cpython/blob/v3.6.4/Objects/object.c#L1059" rel="nofollow noreferrer">used in <code>object.__getattribute__</code></a> to determine what counts as a data descriptor, and <a href="https://github.com/python/cpython/blob/v3.6.4/Objects/typeobject.c#L6617" rel="nofollow noreferrer">either <code>__set__</code> or <code>__delete__</code></a> will cause <code>tp_descr_set</code> to be non-null.</p>
<p>The language reference also explains why <code>Set</code> doesn't override the instance dict for <code>a.b</code>:</p>
<blockquote>
<p><strong>If it does not define <code>__get__()</code></strong>, then accessing the attribute will return the descriptor object itself unless there is a value in the objectâ€™s instance dictionary. [...] Data descriptors with <code>__set__()</code> <strong>and <code>__get__()</code></strong> defined always override a redefinition in an instance dictionary.</p>
</blockquote>
<p>Defining either <code>__set__</code> or <code>__delete__</code> will set a type's <code>tp_descr_set</code> slot and make instances of the type data descriptors. A data descriptor will always be invoked for attempts to set or delete the attribute it manages, even if there is an entry in the instance's dict with the same name, and even if it only has <code>__set__</code> and you're trying to delete the attribute or vice versa. (If it doesn't have the needed method, it will raise an exception.) If a data descriptor also has <code>__get__</code>, it will also intercept attempts to get the attribute; otherwise, Python will fall back on the normal attribute lookup behavior, as if it wasn't a descriptor at all.</p>
</div>
<span class="comment-copy">Both your links go to the same page.</span>
