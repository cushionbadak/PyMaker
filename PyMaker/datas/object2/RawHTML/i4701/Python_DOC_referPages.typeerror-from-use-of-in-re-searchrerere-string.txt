<div class="post-text" itemprop="text">
<p>According to the docs, "|" can be used to create a regular expression that matches either of the patterns separated by "|".</p>
<p>I am trying to use the following to see if moves contains a string that matches one of "UP""DOWN""LEFT""RIGHT":</p>
<pre><code>moves = input("UP 9")
m = re.search("UP"|"DOWN"|"LEFT"|"RIGHT", moves)
</code></pre>
<p>But I keep getting the <code>"TypeError: unsupported operand type(s) for |: 'str' and 'str'"</code>.  How to fix it? </p>
<p>I tried looking online but there are few samples that show the use of "|" in re. Is it not commonly used for some reason? </p>
</div>
<div class="post-text" itemprop="text">
<p>This is, unfortunately a typo, but the answer goes a little deeper than that.</p>
<p><code>|</code> is the bitwise OR operator. It is defined for integers only, not strings. On the other hand, the <code>"|"</code> character (note the quotes) is the regex <em>OR</em> pipe, and is used to specify a conjunction on patterns. </p>
<p>In summary, the <code>|</code> needs to be inside the pattern string, not outside.</p>
<pre><code>m = re.search("UP|DOWN|LEFT|RIGHT", moves)
</code></pre>
<p>For more information on the various constructs available in regular expression mini-language, see the official <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">Regular Expression HOWTO</a>. The subsection on <a href="https://docs.python.org/3/howto/regex.html#more-metacharacters" rel="nofollow noreferrer">Regex Metacharacters</a>, in particular (which explains the use of the OR pipe amongst others) should be helpful.</p>
</div>
<span class="comment-copy">The confusion here is that regex patterns are a mini-language of their own, so the <code>|</code> has to be part of the pattern string that <code>re</code> compiles, not part of Python.</span>
<span class="comment-copy">There are actually Python modules to build regex patterns out of normal Python expressions, so you can do something like <code>r(r"UP") | r(r"DOWN") | r(r"LEFT") | r(r"RIGHT")</code>, but I don't think you want to use one of those here; I think that, until you've got the hang of creating patterns with pure string manipulation, those libraries just add confusion, and once you <i>have</i> got the hang of it, they're only useful in really complicated cases (where you often want to use a real parser rather than <code>re</code>), but you can search PyPI if you're interested.</span>
<span class="comment-copy">as an aside, don't forget that too many or statements on a regex is slow. matching is <code>O(n)</code>. If there are many words to match, you have to choose another solution.</span>
