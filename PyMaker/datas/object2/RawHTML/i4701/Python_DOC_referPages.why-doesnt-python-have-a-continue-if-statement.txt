<div class="post-text" itemprop="text">
<p>This is a pretty readable chunk of code I think,</p>
<pre><code>for i in range(100):
    continue if i % 2 == 0
</code></pre>
<p>But it's not syntactically correct. We can do other nice things in Python like,</p>
<pre><code>for i in things:
    total += 3 if i % 2 == 0 else 1
</code></pre>
<p>Or maybe,</p>
<pre><code>return a if b &gt; a else c
</code></pre>
<p>Why can't we do a <code>continue if</code> statement?</p>
</div>
<div class="post-text" itemprop="text">
<p>The flow:</p>
<pre><code>for i in range(100):
    continue if i % 2 == 0
</code></pre>
<p>Would be equivalent to:</p>
<pre><code>for i in range(1, 100, 2):
    ...
</code></pre>
<p>Or, more generically, to:</p>
<pre><code>for i in range(100):
    if i % 2 == 0:
        continue
</code></pre>
<p>Python language designers have a history of voting against changes to the grammar which are only offering slightly different ways of doing the same thing ("There should be one obvious way to do it").  </p>
<p>The type of one-liner construct which you've mentioned</p>
<pre><code>x if cond else y
</code></pre>
<p>was an exception made, here.  It was added to the language to offer a less error-prone way of achieving what many users were already <em>attempting</em> to achieve with <code>and</code> and <code>or</code> short-circuiting hacks (<a href="https://mail.python.org/pipermail/python-dev/2005-September/056546.html" rel="nofollow noreferrer">source: Guido</a>). 
 Code in the wild was using:</p>
<pre><code>cond and x or y
</code></pre>
<p>Which is not logically equivalent, yet it's an easy mistake to make for users who were already familiar with the ternary <code>cond ? : x : y</code> syntax from C.  A correct equivalent is:</p>
<pre><code>(cond and [x] or [y])[0]
</code></pre>
<p>But, that's ugly.  So, the rationale for the addition of an expression <code>x if cond else y</code> was stronger than a mere convenience.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>x if cond else y</code> is actually an <strong>expression</strong>. 
Expressions are statements which evaluate to a value, in this case, either <code>x</code> or <code>y</code>. </p>
<p><code>continue</code> is not a value, so there's that. Also, </p>
<pre><code>if cond:
    continue
</code></pre>
<p>is really not much harder or more "error prone" than <code>continue if cond</code>, whereas <code>v = x if cond else y</code> is probably better than</p>
<pre><code>if cond:
    v = x
else:
    v = y
</code></pre>
<p>There's also the fact that if we allowed <code>continue if cond</code>, we add a new way to use this <code>_ if cond</code> pattern, i.e. we allow it without an <code>else</code>.</p>
<p>For more info:
<a href="https://docs.python.org/2.5/whatsnew/pep-308.html" rel="nofollow noreferrer">https://docs.python.org/2.5/whatsnew/pep-308.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Python does have such a thing, the syntax is just a bit different. Instead of the "if and "continue" being combined as one statement, they are separated into a conditional statement (if, while etc), and a control flow (continue, pass, break etc) if it evaluates to true. In your first code example, the syntax would be:</p>
<pre><code>for i in range(100):
    if i % 2 == 0:
        continue
    else:
        #you could also add an else like this do something else if the 
        #number evaluated to odd
</code></pre>
<p>This will move on to the next iteration of the outer loop.There are also other helpful iteration tools like this, called "Control Flow Tools." I'll include a link to the Python docs that explain this. There's a ton of useful stuff there, so please do have a look. </p>
<p>Others here have also suggested a single-line syntax, which works too. It is, however, good to understand both approaches; this way you can keep your code as simple as possible, but you'll also have the ability to nest loops and conditions if your algorithm  will benefit from it. </p>
<p>Happy coding!</p>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/controlflow.html</a></p>
</div>
<span class="comment-copy">If you want to do that, use <code>if i % 2 == 0: continue</code>. It's one line, just the other way around and with a colon. I don't get why people always reject that. It's like they just hate colons.</span>
<span class="comment-copy">If you want to do that, use <code>for i in range(1, 100, 2)</code> =)</span>
<span class="comment-copy"><code>continue</code> is not particularly nice to begin with, in my opinion. I can’t recall a piece of code I liked better using <code>break</code> and <code>continue</code> compared to generator comprehensions, <code>all()</code>, <code>any()</code>; especially if we’re talking multiple breaks/continues in a function.</span>
<span class="comment-copy">Thank you. I had a feeling there was some Python lore in the background here :)</span>
<span class="comment-copy">Thank you, I agree there is a ambiguity with what to do with the <code>else</code> in this case.</span>
<span class="comment-copy">Your explanation basically states that the <code>continue</code> keyword exists - that much is obvious! The question is asking why don't get the same syntactic sugar surrounding it as we do other keywords.</span>
<span class="comment-copy">I don't agree that's what the question is asking. I took it to mean that he wonders why the continue and if aren't some amalgam. But of course absent of clarification from the asker, you and I could only argue semantics. If, however, the question were as you believe it to be, my answer would be that really all languages can accomplish the same tasks; the difference then, is in the steps that need to be taken to accomplish said task. At that point the point it becomes a matter of syntactical preference. Thus, if the question is as you state, it should be downvoted as subjective.</span>
