<div class="post-text" itemprop="text">
<p>I have a python application which comes packaged with Python and Libcrypto and LibSSL shared objects. The application was built with Openssl Fips Module 2.0. These shared objects are used by Python's request module and urllib3 under the hood to make TLS requests. </p>
<p>I enabled the <strong>OPENSSL_FIPS</strong> flag in the environment where i was building the application. Now if want to check whether the shared objects have the fips mode enabled when i take them out of the development environment and put them in another machine, how can i do that?</p>
<p>How can i check whether the fips mode is enabled or not? And if it isn't, how can i enable the fips mode for these shared objects?</p>
<p>Additional Details that might help:</p>
<p><strong>OpenSSL Version: 1.0.2h (built from source)</strong></p>
<p><strong>Fips Module: 2.0.12 (built from source)</strong></p>
<p><strong>Python: 3.6</strong></p>
<p><strong>OS: Ubuntu 16.04 LTS</strong></p>
<p>Please let me know if any additional details are required.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>I've built the <em>OpenSSL-fips</em> module using regular flags (e.g.: <em>no-asm</em>, <em>shared</em>, some ancient ciphers disabled):</p>
<blockquote>
<pre><code>[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q049320993]&gt; ls ssl/build/bin ssl/build/lib
ssl/build/bin:
c_rehash  openssl

ssl/build/lib:
engines  libcrypto.a  libcrypto.so  libcrypto.so.1.0.0  libssl.a  libssl.so  libssl.so.1.0.0  pkgconfig
</code></pre>
</blockquote>
<p>And started playing a little bit with it:</p>
<blockquote>
<pre><code>[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q049320993]&gt; ssl/build/bin/openssl version
OpenSSL 1.0.2h-fips  3 May 2016 (Library: OpenSSL 1.0.2g  1 Mar 2016)
</code></pre>
</blockquote>
<p>Note the "<strong><em>(Library: OpenSSL 1.0.2g  1 Mar 2016)</em></strong>" part. That (being present) states that the <em>openssl</em> executable is OK (expected version), but it's using a <strong>wrong <em>libcrypto</em></strong> (it's the one that comes installed by default on the system - under <em>/lib</em> - and typically that one isn't built with <em>FIPS</em> support). <br/>It must load <strong>our</strong> libraries, and that is done by setting <em>LD_LIBRARY_PATH</em> (the same behavior could have also been achieved by setting an env var when building <em>OpenSSL</em> that would have set the <em>rpath</em> in the <em>openssl</em> executable, but I forgot, and I didn't want to build it again):</p>
<blockquote>
<pre><code>[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q049320993]&gt; LD_LIBRARY_PATH=ssl/build/lib ssl/build/bin/openssl version
OpenSSL 1.0.2h-fips  3 May 2016
</code></pre>
</blockquote>
<p>Now, that the setup is successful, let's dive into <em>OPENSSL_FIPS</em> env var:</p>
<blockquote>
<pre><code>[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q049320993]&gt; LD_LIBRARY_PATH=ssl/build/lib ssl/build/bin/openssl md5 ./code.py
MD5(./code.py)= d41d8cd98f00b204e9800998ecf8427e
[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q049320993]&gt; LD_LIBRARY_PATH=ssl/build/lib ssl/build/bin/openssl sha1 ./code.py
SHA1(./code.py)= da39a3ee5e6b4b0d3255bfef95601890afd80709
[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q049320993]&gt; OPENSSL_FIPS=1 LD_LIBRARY_PATH=ssl/build/lib ssl/build/bin/openssl sha1 ./code.py
SHA1(./code.py)= da39a3ee5e6b4b0d3255bfef95601890afd80709
[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q049320993]&gt; OPENSSL_FIPS=1 LD_LIBRARY_PATH=ssl/build/lib ssl/build/bin/openssl md5 ./code.py
Error setting digest md5
139778679649944:error:060A80A3:digital envelope routines:FIPS_DIGESTINIT:disabled for fips:fips_md.c:180:
</code></pre>
</blockquote>
<p>As seen from above, the <em>md5</em> hash behavior is influenced by the <em>OPENSSL_FIPS</em> env var (when <em>FIPS</em> mode is on, its usage is not allowed).</p>
<p><strong>Notes</strong>:</p>
<ul>
<li>Most likely, newer <em>openssl-fips</em> versions will also have <em>sha1</em> disabled since it's considered weak, so the invariant should be switched to one of the <em>sha2</em> hash functions family (e.g. <em>sha256</em>) or even better, <em>sha3</em> (older <em>OpenSSL</em> versions might not have it)</li>
<li>From my <em>PoV</em> this is a little too restrictive, as there might be cases when a hashing algorithm is needed for purposes that don't care about security, and more complex (and also time consuming) allowed algorithms still have to be used</li>
</ul>
<p>Since <em>OPENSSL_FIPS</em> env var is handled at <em>openssl</em> executable level, which will be bypassed (as <em>libcrypto</em> will be used directly), it's no use for the current situation, so we have to go deeper. These are the functions that control <em>FIPS</em> mode in a <strong>loaded</strong> <em>libcrypto</em> instance:</p>
<ul>
<li><a href="https://wiki.openssl.org/index.php/FIPS_mode()" rel="nofollow noreferrer">[OpenSSL]: FIPS mode()</a></li>
<li><a href="https://wiki.openssl.org/index.php/FIPS_mode_set()" rel="nofollow noreferrer">[OpenSSL]: FIPS mode set()</a></li>
</ul>
<p>They will be used to read/write <em>FIPS</em> mode. In order to test whether <em>FIPS</em> mode is really set, <em>md5</em> hash (from the example above) will be used.</p>
<p><em>code.py</em>:</p>
<pre><code>#!/usr/bin/env python3


import sys
import ssl
import ctypes


libcrypto = ctypes.CDLL("libcrypto.so.1.0.0")

fips_mode = libcrypto.FIPS_mode
fips_mode.argtypes = []
fips_mode.restype = ctypes.c_int

fips_mode_set = libcrypto.FIPS_mode_set
fips_mode_set.argtypes = [ctypes.c_int]
fips_mode_set.restype = ctypes.c_int

text = b""


if __name__ == "__main__":
    print("Python {:s} on {:s}\n".format(sys.version, sys.platform))
    print("OPENSSL_VERSION: {:s}".format(ssl.OPENSSL_VERSION))
    enable_fips = len(sys.argv) &gt; 1

    print("FIPS_mode(): {:d}".format(fips_mode()))
    if enable_fips:
        print("FIPS_mode_set(1): {:d}".format(fips_mode_set(1)))
    print("FIPS_mode(): {:d}".format(fips_mode()))

    import hashlib
    print("SHA1: {:s}".format(hashlib.sha1(text).hexdigest()))
    print("MD5: {:s}".format(hashlib.md5(text).hexdigest()))
</code></pre>
<p><strong>Notes</strong>:</p>
<ul>
<li>Setting the <em>argtypes</em> and <em>restype</em> for the 2 functions like specified in <a href="https://docs.python.org/3/library/ctypes.html#module-ctypes" rel="nofollow noreferrer">[Python 3]: ctypes - A foreign function library for Python</a></li>
<li>The <em>md5</em> hashing algorithm is provided at <em>Python</em> level by <a href="https://docs.python.org/3/library/hashlib.html" rel="nofollow noreferrer">[Python 3]: hashlib - Secure hashes and message digests</a></li>
<li><strong>Important</strong>: the <code>import hashlib</code> statement is located <strong>after</strong> setting the <em>FIPS</em> mode (and not at the file beginning, as it should be), because <em>hashlib</em> does some caching <strong>at import time</strong>, so it captures the <em>FIPS</em> value at import time, and doesn't care if it changes afterwards</li>
</ul>
<p><strong>Output</strong>:</p>
<blockquote>
<pre><code>[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q049320993]&gt; LD_LIBRARY_PATH=ssl/build/lib ./code.py
Python 3.5.2 (default, Nov 23 2017, 16:37:01)
[GCC 5.4.0 20160609] on linux

OPENSSL_VERSION: OpenSSL 1.0.2h-fips  3 May 2016
FIPS_mode(): 0
FIPS_mode(): 0
SHA1: da39a3ee5e6b4b0d3255bfef95601890afd80709
MD5: d41d8cd98f00b204e9800998ecf8427e
[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q049320993]&gt; LD_LIBRARY_PATH=ssl/build/lib ./code.py 1
Python 3.5.2 (default, Nov 23 2017, 16:37:01)
[GCC 5.4.0 20160609] on linux

OPENSSL_VERSION: OpenSSL 1.0.2h-fips  3 May 2016
FIPS_mode(): 0
FIPS_mode_set(1): 1
FIPS_mode(): 1
SHA1: da39a3ee5e6b4b0d3255bfef95601890afd80709
fips_md.c(149): OpenSSL internal error, assertion failed: Digest Final previous FIPS forbidden algorithm error ignored
Aborted (core dumped)
</code></pre>
</blockquote>
<p>As seen, setting <em>FIPS</em> mode via <em>ctypes</em>, <strong>really</strong> sets it.<br/>
I don't know why it segfaults, but the <em>md5</em> related code is there only for testing purposes, so it's not needed in production.</p>
<p>I remember that on some <em>Lnx</em> version (might be <em>RH</em> based), <em>FIPS</em> mode could also be set (globally for the system), by editing some entry (under <em>/proc</em> ?), but I can't remember it.</p>
<p>A <strong>more elegant approach</strong> would be to expose <em>Python</em> wrappers for the 2 functions. <br/>Check <strong><a href="https://bugs.python.org/issue27592" rel="nofollow noreferrer">[Python]: Issue 27592: FIPS_mode() and FIPS_mode_set() functions in Python (ssl)</a></strong>, I've also submitted a patch for <em>Python <strong>3.4</strong></em> (where they were exposed by the <strong><em>ssl</em></strong> module), but it was rejected based on the following arguments (out of which the 1<sup>st</sup> 2 are relevant):</p>
<ol>
<li><em>FIPS</em> is a bad standard</li>
<li><em>OpenSSL</em> will drop support for it</li>
<li>It breaks up generality</li>
</ol>
<p>You can apply it to <em>Python 3.6</em> (I don't think it will work <em>OOTB</em>, since line numbers most likely changed), and (obviously) you'll have to build <em>Python</em> from sources.</p>
<p><strong>Bottom line</strong>:</p>
<ul>
<li>There's a <strong>big</strong> difference between <strong><em>FIPS</em> working</strong> and <strong><em>FIPS</em> validated</strong>, as I'm sure you've read on <a href="https://www.openssl.org/docs/fips/UserGuide-2.0.pdf" rel="nofollow noreferrer">[OpenSSL]: User Guide for the OpenSSL FIPS Object Module v2.0</a></li>
<li><a href="https://askubuntu.com/questions/903127/enable-fips-140-2-in-ubuntu">[AskUbuntu]: Enable FIPS 140-2 in ubuntu</a> might also contain some useful info</li>
</ul>
<p><strong><em>@EDIT0</em></strong>:</p>
<p>It just stroke me, the behavior that you're encountering on <a href="https://stackoverflow.com/questions/49381134/not-able-to-call-fips-mode-set-of-libcrypto-so-with-python-ctypes">[SO]: Not able to call FIPS_mode_set() of libcrypto.so with Python ctypes [duplicate]</a> might also be related to the <strong>wrong <em>libcrypto</em> being loaded</strong> (check the <code>openssl version</code> tests w/wo <em>LD_LIBRARY_PATH</em> from the beginning). <br/>A non <em>FIPS</em> capable <em>OpenSSL</em> will still export the 2 functions, but they both simply return 0.</p>
<blockquote>
<pre><code>[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q049320993]&gt; ./code.py 1
Python 3.5.2 (default, Nov 23 2017, 16:37:01)
[GCC 5.4.0 20160609] on linux

OPENSSL_VERSION: OpenSSL 1.0.2g  1 Mar 2016
FIPS_mode(): 0
FIPS_mode_set(1): 0
FIPS_mode(): 0
SHA1: da39a3ee5e6b4b0d3255bfef95601890afd80709
MD5: d41d8cd98f00b204e9800998ecf8427e
</code></pre>
</blockquote>
<p>So, make sure to <strong>load the correct libraries by specifying <em>LD_LIBRARY_PATH</em></strong> ! (there are other ways, but this is the most straightforward one).</p>
</div>
<span class="comment-copy">Do you have more details, e.g. the <i>OpenSSL</i>, <i>Python</i> versions, whether you built them from sources or just downloaded the binaries, the <i>OS</i> that you're suppose to run on.</span>
<span class="comment-copy">Yup i was expecting such a comment. I actually wasn't sure what details would be required in order to answer this. Question has been updated. Please let me know if any other additional details are required.</span>
<span class="comment-copy">Thank you so much once again for such a detailed answer. This works like a charm! For your Edit0, that the behavior that i was encountering on my other SO question might also be related to the LD_LIBRARY_FlAG, you are correct! i was able to toggle the fips by specifying the flag.</span>
<span class="comment-copy">Glad to be helpful!</span>
<span class="comment-copy">Hi! I'd really appreciate it if you could look into a follow up question that i posted: <a href="https://stackoverflow.com/questions/49493537/how-to-implement-fips-mode-and-fips-mode-set-in-python-3-6s-ssl-module" title="how to implement fips mode and fips mode set in python 3 6s ssl module">stackoverflow.com/questions/49493537/…</a> . Thanks!</span>
<span class="comment-copy">Hi! I'd really appreciate it if you could look. I followed the <a href="https://stackoverflow.com">Stack Overflow</a> <a href="https://stackoverflow.com/questions/49493537/how-to-implement-fips-mode-and-fips-mode-set-in-python-3-6s-ssl-module" title="how to implement fips mode and fips mode set in python 3 6s ssl module">stackoverflow.com/questions/49493537/…</a> on 3.7 python and compilation works fine. But when i run code.py script as below md5 still works fine. Ideally md5 should fails. What could be wrong here? Script and output here <a href="https://pastebin.com/0Sn7qYcs" rel="nofollow noreferrer">pastebin.com/0Sn7qYcs</a></span>
