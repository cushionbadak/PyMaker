<div class="post-text" itemprop="text">
<p>This is more of a curiosity</p>
<p>Say I have the following code</p>
<pre><code>&gt;&gt;&gt; my_immutable = (1, 2)
&gt;&gt;&gt; my_immutable[0] += 1

TypeError: 'tuple' object does not support item assignment
</code></pre>
<p>This is expected, because unlike C, Python does not modify the underlying int, but rather creates a new one (observed in the code below)</p>
<pre><code>&gt;&gt;&gt; x = 1
&gt;&gt;&gt; id(x)
33156200
&gt;&gt;&gt; x += 1
&gt;&gt;&gt; id(x)
33156176
</code></pre>
<p>If I want to modify the underlying integer in the tuple, I can hackly do something like</p>
<pre><code>&gt;&gt;&gt; hacked_immutable = ([1], [2])
&gt;&gt;&gt; hacked_immutable[0][0] += 1
&gt;&gt;&gt; hacked_immutable
([2], [2])
</code></pre>
<p>My question is: is there a nicer way of doing it (ideally performant and ideally already in the standard library)? Some wrapper class around int maybe?</p>
<p>Edit:
I did not have a specific software that had to adhere to this. It was more of a thought exercise of why are things like this. I think the three questions I had were:</p>
<ul>
<li><p>Why are <code>int</code>s immutable? (still not sure)</p></li>
<li><p>Is there a way to force them to be mutable? (wim's answer)</p></li>
<li><p>Is there a nice way to force them to be mutable (like <code>Integer</code> vs <code>int</code> in Java) - I think the answer is NO?</p></li>
</ul>
<p>Thanks a lot for the discussion!</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a list rather than a tuple:</p>
<pre><code>my_container = [1, 2]
</code></pre>
<p><code>tuple</code> is immutable - you can't modify them.</p>
<p><code>int</code> is immutable - you can't modify them.</p>
<p>The closest you can get is using <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">ctypes</a> to monkeypatch the value.  But this is not "nice" by any stretch of the imagination and you will probably segfault your Python runtime if anything else happens to be using that integer.</p>
<pre><code>&gt;&gt;&gt; t = (42, 43)
&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; ctypes.cast(id(42), ctypes.POINTER(ctypes.c_int))[6] = 666
&gt;&gt;&gt; t
(666, 43)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's what it looks like with your small integers:</p>
<pre><code>&gt;&gt;&gt; hacked_immutable = ([1], [2])
&gt;&gt;&gt; hacked_immutable
([1], [2])
&gt;&gt;&gt; id(hacked_immutable)
139813228968072
&gt;&gt;&gt; id(hacked_immutable[0])
139813228055688
&gt;&gt;&gt; id(hacked_immutable[0][0])
139813227530592
&gt;&gt;&gt; id(hacked_immutable[1])
139813228056008
&gt;&gt;&gt; id(hacked_immutable[1][0])
139813227530624
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; hacked_immutable[0][0] += 1
&gt;&gt;&gt; hacked_immutable
([2], [2])
&gt;&gt;&gt; id(hacked_immutable)
139813228968072
&gt;&gt;&gt; id(hacked_immutable[0])
139813228055688
&gt;&gt;&gt; id(hacked_immutable[0][0])
139813227530624
&gt;&gt;&gt; id(hacked_immutable[1])
139813228056008
&gt;&gt;&gt; id(hacked_immutable[1][0])
139813227530624
</code></pre>
<p>Note that there is only one, single <code>2</code> object.  However, let's take a look with not-small integers:</p>
<pre><code>&gt;&gt;&gt; hacked_immutable = ([314159], [314160])
&gt;&gt;&gt; id(hacked_immutable)
139813228056200
&gt;&gt;&gt; id(hacked_immutable[0])
139813228055688
&gt;&gt;&gt; id(hacked_immutable[0][0])
139813228644176
&gt;&gt;&gt; id(hacked_immutable[1])
139813228056008
&gt;&gt;&gt; id(hacked_immutable[1][0])
139813228644528
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; hacked_immutable[0][0] += 1
&gt;&gt;&gt; hacked_immutable
([314160], [314160])
&gt;&gt;&gt; id(hacked_immutable[0])
139813228055688
&gt;&gt;&gt; id(hacked_immutable[0][0])
139813229186864
&gt;&gt;&gt; id(hacked_immutable[1])
139813228056008
&gt;&gt;&gt; id(hacked_immutable[1][0])
139813228644528
</code></pre>
<p>The Python run-time system still creates a new integer object for the first element.  <code>314160</code> exists in two places.  This is from caching small integers, not from any property of the implementation of im/mutable objects.</p>
</div>
<span class="comment-copy">A nicer way of doing what exactly? What are you trying to do? You cannot modify a tuple. You cannot modify an int either. You can modify a list as you did, but why?</span>
<span class="comment-copy">Use a <code>list</code> rather than a <code>tuple</code>. Not a <code>list</code>_in_ a <code>tuple</code>, though. Just an ordinary <code>list</code>.</span>
<span class="comment-copy">That still isn't "modifying the underlying integer".</span>
<span class="comment-copy">What is "it"?  You're <i>still</i> not modifying the integer; you're creating a new one and making the list point to the new value.</span>
<span class="comment-copy">Sorry for being vague. My question is: is there a way of having an int (or some sort of reference to an int) in a tuple and modify its underlying value. How about in a namedtuple?</span>
<span class="comment-copy">This doesn't actually answer the question. He is wondering how to change the value of an int without creating a new int object.</span>
<span class="comment-copy">I wrote - int is immutable, you can't modify them.  Doesn't that answer the question?</span>
<span class="comment-copy">@wim, this isn't a question so much about how to get around some problem, but why the problem happens in the first place. <i>Why</i> is <code>int</code> immutable, when it isn't necessary for it to be - that's the fundamental question at play.</span>
