<div class="post-text" itemprop="text">
<p>I'd like to create a custom sequence of elements. When iterating over it, the length of the sequence is ignored. Here is a minimal code example:</p>
<pre><code>class Test():
    def __init__(self):
        pass

    def __len__(self):
        return 5

    def __getitem__(self, idx):
        return idx

t = Test()
for i, x in enumerate(t):
    print(i, x)
</code></pre>
<p>I'd expect to have only <code>0 0</code> to <code>4 4</code> printed out. In reality, the loop behaves as with an infinitely long sequence and goes on and on and on. <code>len(t)</code> returns <code>5</code> as expected.</p>
<p>What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python expects <code>__getitem__()</code> to raise an <code>IndexError</code> when indexes outside of the possible range are requested, as noted in <a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p><strong>Note</strong> <code>for</code> loops expect that an <code>IndexError</code> will be raised for illegal indexes to allow proper detection of the end of the sequence.</p>
</blockquote>
<p>The advantage to this is that you don't <em>have</em> to implement <code>__len__()</code> which means your index-based iterable can be lazy, meaning unknown lengths or infinite lengths are possible.</p>
<p>This mirrors the way <a href="https://docs.python.org/3/glossary.html#term-iterator" rel="nofollow noreferrer">iterator objects</a> and for loops work in Python - they continue to ask for values until an exception is reached (<code>StopIteration</code> for iterators), which makes the implementation easier - <code>iter()</code> just wraps with a loop incrementing the index until it hits the exception.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to check yourself, if the key is out of bounds. <code>__len__</code> is only used for two purposes. To be able to call len(obj) and it will be used, if no <code>__bool__</code> method exists to determine, if the object evaluates to true in conditions.</p>
</div>
<span class="comment-copy">Your answer doesn't explain how to solve the issue - "you have to check yourself", and then do what with that information?</span>
