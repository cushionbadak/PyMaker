<div class="post-text" itemprop="text">
<p>I've been studying compression algorithms recently, and I'm trying to understand how I can store integers as bits in Python to save space.</p>
<p>So first I save '1' and '0' as strings in Python.</p>
<pre><code>import os
import numpy as np

array= np.random.randint(0, 2, size = 200)
string = [str(i) for i in array]
with open('testing_int.txt', 'w') as f:
    for i in string:
        f.write(i)

print(os.path.getsize('testing_int.txt'))
</code></pre>
<p>I get back <code>200</code> bytes which makes sense, since each each char is represented by one byte in ascii (and utf-8 as well if characters are latin?).</p>
<p>Now if trying to save these ones and zeroes as bits, I should only take up around <code>25 bytes</code> right? </p>
<p><code>200 bits/8 = 25 bytes</code>.</p>
<p>However, when I try the following code below, I get <code>105 bytes</code>.
Am I doing something wrong?</p>
<p>Using the same 'array variable' as above I tried this:</p>
<pre><code>bytes_string = [bytes(i) for i in array]
with open('testing_bytes.txt', 'wb') as f:
    for i in bytes_string:
        f.write(i)
</code></pre>
<p>Then I tried this:</p>
<pre><code>bin_string = [bin(i) for i in array]
with open('testing_bin.txt', 'wb') as f:
    for i in bytes_string:
        f.write(i)
</code></pre>
<p>This also takes up around <code>105 bytes</code>.</p>
<p>So I tried looking at the text files, and I noticed that 
both the 'bytes.txt' and 'bin.txt' are blank.</p>
<p>So I tried to read the 'bytes.txt' file via this code:</p>
<pre><code>with open(r"C:\Users\Moondra\Desktop\testing_bytes\testing_bytes.txt", 'rb') as f:
    x =f.read()
</code></pre>
<p>Now I get get back as this :</p>
<pre><code>b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
</code></pre>
<p>So I tried these commands:</p>
<pre><code>&gt;&gt;&gt; int.from_bytes(x, byteorder='big')
0
&gt;&gt;&gt; int.from_bytes(x, byteorder='little')
0
&gt;&gt;&gt; 
</code></pre>
<p>So apparently I'm doing multiple things incorrectly. 
I can't figure out:</p>
<p>1) Why I am not getting a text file that is 25 bytes
2) Why can I read back the bytes file correctly.</p>
<p>Thank you. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>bytes_string = [bytes(i) for i in array]
</code></pre>
<p>It looks like you expect <code>bytes(x)</code> to give you a one-byte <code>bytes</code> object with the value of <code>x</code>. Follow the <a href="https://docs.python.org/3/library/functions.html#func-bytes" rel="nofollow noreferrer">documentation</a>, and you'll see that <code>bytes()</code> is initialized like <code>bytearray()</code>, and <code>bytearray()</code> says this about its argument:</p>
<blockquote>
<p>If it is an integer, the array will have that size and will be initialized with null bytes.</p>
</blockquote>
<p>So <code>bytes(0)</code> gives you an empty bytes object, and <code>bytes(1)</code> gives you a single byte with the ordinal zero. That's why <code>bytes_string</code> is about half the size of <code>array</code> and is made up completely of zero bytes.</p>
<p>As for why the <code>bin()</code> example didn't work, it looks like a simple case of copy-pasting and forgetting to change <code>bytes_string</code> to <code>bin_string</code> in the <code>for</code> loop.</p>
<p>This all still doesn't accomplish your goal of treating 0 or 1 value integers as bits. Python doesn't really have that sort of functionality built in. There are third-party modules that allow you to work at the bit level, but I can't speak to any of them specifically. Personally I would probably just roll my own specific to the application.</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you're trying to bit shift all the values into a single byte. For example, you expect the integer values <code>[0,1,0,1,0,1,0,1]</code> to be packed into a byte that looks like the following binary number: <code>0b01010101</code>. To do this, you need to use the bitwise shift operator and bitwise or operator along with the struct module to pack the values into an unsigned Char which represents the sequence of int values you have.</p>
<p>The code below takes the array of random integers in range <code>[0,1]</code> and shifts them together to make a binary number that can be packed into a single byte. I used 256 ints for convenience. The expected number of bytes for the file to be is then 32 (256/8). You will see that when it is run this is indeed what you get.</p>
<pre><code>import struct
import numpy as np
import os

a = np.random.randint(0, 2, size = 256)
bool_data = []

bin_vals = []
for i in range(0, len(a), 8):
    bin_val = (a[i] &lt;&lt; 0) | (a[i+1] &lt;&lt; 1) | \
    (a[i+2] &lt;&lt; 2) | (a[i+3] &lt;&lt; 3) | \ 
    (a[i+4] &lt;&lt; 4) | (a[i+5] &lt;&lt; 5) | \
    (a[i+6] &lt;&lt; 6) | (a[i+7] &lt;&lt; 7)
    bin_vals.append(struct.pack('B', bin_val))

with open("output.txt", 'wb') as f:
    for val in bin_vals:
        f.write(val)

print(os.path.getsize('output.txt'))
</code></pre>
<p>Please note, however, that this will only work for values of integers in the range <code>[0,1]</code> since if they are bigger it will shift more non-zeros and wreck the structure of the generated byte. The binary number may also exceed 1 byte in size in this case.</p>
<p>It seems like you're just using python in attempt to generate an array of bits for demonstration purposes, and to that token I would say that python probably isn't best suited for this. I would recommend using a lower level language such as C/C++ which has more direct access to data type than python does.</p>
</div>
<span class="comment-copy">Are you trying to save an integer as the truncated bit representation? ie int 1 = 0b00000001 and you just want the 1? Or just "convert" the int to a "bool"? You might take a look at the <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">struct</a> module.</span>
<span class="comment-copy">@AlexEshoo  Yes (truncated representation).  Thank you.</span>
<span class="comment-copy">Thank you. I swapped the <code>bytes_string</code> with <code>bin_string</code>; it seems <code>bin</code> creates a <code>bin string</code> and not a bytes-like object (Type-Error), so it's probably not what I'm looking for.</span>
