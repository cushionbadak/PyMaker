<div class="post-text" itemprop="text">
<p>I am trying to implement a timer for calling the function for printing the queue after specific time .I am also able to cancel the timer if the queue gets filled before that specified time and print the queue.But after that my timer object behaves abruptly causing timers to overlap for example if the queue gets filled in 2 sec then it prints the queue in 2,8,2,8... time interval instead of 2,10 time interval</p>
<pre><code>connection = pika.BlockingConnection(pika.ConnectionParameters(host='127.0.0.1'))
channel = connection.channel()
channel.queue_declare(queue='final', durable=True)

global msg_queue
global t

msg_queue=queue.Queue(maxsize=6)

def empty_queue():
    print(time.time())
    l=[]
    i=int(msg_queue.qsize())
    while i!=0:
        l.append(msg_queue.get())
        i-=1
    t=threading.Timer(10,empty_queue)
    print(l)
    t.start()



t=threading.Timer(10,empty_queue)
print(time.time())
t.start()

while True:
    if int(msg_queue.qsize())&lt;6:
        consume_generator = channel.consume(queue='final', no_ack=True)
        result=next(consume_generator)
        msg_queue.put(json.loads(result[2].decode("utf-8")))

    else:
        print("more",time.time())
        t.cancel()
        empty_queue()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have solved the issue by cancelling the timer to prevent its own duplicacy</p>
<pre><code>def empty_queue():
    global t
    print(time.time())
    l=[]
    i=int(msg_queue.qsize())
    while i!=0:
        l.append(msg_queue.get())
        i-=1
    if t.isAlive():
       t.cancel()
    t=threading.Timer(10,empty_queue)
    print(l)
    t.start()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could nest a if statement inside the timer that says if queue is full then disable this if statement then let the timer continue until its done without affecting the queue. I don't think it will cause conflict with your program because the timer is probably a closure. </p>
</div>
<span class="comment-copy">What do you mean by "the threads obtained from threading.Timer object after it has done the execution"? A Timer doesn't give you any threads; it uses a thread internally, and that thread exits as soon as the timer callback finishes or it gets canceled. Also, what does "I am also not able to cancel the timer" mean? What happens when you try? Show us a <a href="https://stackoverflow.com/help/mcve">minimal, complete, verifiable example</a>.</span>
<span class="comment-copy">Meanwhile, <code>threading.Timer</code> is meant to be dead simple so you can use it as sample code to build more complicated things. Notice that the top of <a href="https://docs.python.org/3/library/threading.html#timer-objects" rel="nofollow noreferrer">the docs</a> has a link to <a href="https://github.com/python/cpython/blob/3.6/Lib/threading.py#L1158" rel="nofollow noreferrer">the source</a>.</span>
<span class="comment-copy">Finally, there are a bunch of libraries on PyPI, and recipes on ActiveState, with more powerful replacements for <code>Timer</code>. SO isn't a good place to get recommendations, for reasons explained in the help, but you can easily search for yourself.</span>
<span class="comment-copy">I have added the code .I am trying to implement a batch consumer in which 6 messages per 10 seconds are to be sent to the worker function such as mysql,monogdb etc. The part  "I am also not able to cancel the timer" is when the queue in which I am storing the producer data gets filled before 10seconds.The program should immediately send the queue data  to the worker function for processing.I am reffering to the part in fill_queue method in exception for queue.Full. I am new to threading and rabbitmq.</span>
<span class="comment-copy">Is it intentional that the only way to exit fill_queue is by an unspecified unhandled exception, which isn’t handled in the recursive caller or the top level, so the first time you exit it’ll tear up the whole stack and kill your whole program? If so, you really shouldn’t be using recursion like this, just for starters; you’ve written an infinite recursion that just takes a while to hit the stack limit and blow up instead of doing it immediately.</span>
