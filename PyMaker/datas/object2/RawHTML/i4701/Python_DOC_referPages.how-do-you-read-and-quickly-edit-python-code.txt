<div class="post-text" itemprop="text">
<p>I typically work with C++ but off late have to program a lot in Python. Coming from a C++ background, I am finding dynamic typing to be very inconvenient when I have to modify an existing codebase. I know I am missing something very basic and hence turning to the stackoverflow community to understand best practices.</p>
<p>Imagine, there is a class with a number of methods and I need to edit an existing method. Now, in C++, I could explicitly see the datatype of every parameter, check out the .h files of the corresponding class if need be and could quickly understand what's happening. In python on the other hand, all I see are some variable names. I am not sure if it is a list or a dictionary or maybe some custom datastructure with its getters and setters. To figure this out, I need to look at some existing usages of this function or run the code with breakpoints and see what kind of datastructure am I getting. I find either methods to be very time consuming. Is there a faster way to resolve this problem? How should I quickly determine what's the datatype of a particular variable? </p>
<p>The general impression is that code is easier to read/write in Python, but I am not finding it very quick to read python code because of lack of types. What am I missing here?</p>
</div>
<div class="post-text" itemprop="text">
<p>I feel your pain, too! I frequently switch between Python and C++, so paradigm shifting does give me paranoia.</p>
<p>However, I've been readjusting my codes with:</p>
<p><a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">Type Annotations</a></p>
<p>It doesn't improve runtime performance, but it provides sense of comfort when reading through tens of thousands line of codes. Also, you can run your python programs with this to further verify your type annotations:</p>
<p><a href="http://mypy-lang.org/" rel="nofollow noreferrer">mypy</a></p>
</div>
<div class="post-text" itemprop="text">
<p>These are the following things i follow:</p>
<ol>
<li>Comment clearly what is being returned and what is the input in the <code>docstring</code></li>
<li><p>Use a debug(or a Flag) variable, which is by default set to <code>False</code>, and keep a if block as follows.<br/></p>
<pre><code>if debug:
    print(type(variable))
</code></pre></li>
</ol>
<p>So, in that way, you would be sure to see what is the type of the variable.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, you can see the data type of any variable by using</p>
<pre><code>type(variable_name)
</code></pre>
<p>It will show you data type of that variable. Such as int, bool, str, etc.</p>
</div>
<span class="comment-copy">Read the unit tests for the method. They should illustrate the usage.</span>
<span class="comment-copy">Good Python code doesn't neglect documenting a function's parameters just because the language doesn't force you to.</span>
<span class="comment-copy">When does knowing whether something is a dict or a list really tell you anything? If it's expecting a dict mapping user names to connection objects and you pass it a dict mapping file names to file objects, that's no better than passing it a list. You can tell that it wants a map of user names to connections by the function name, the parameter name, the docstring, the comments, the API docs, and the unit tests. Or, if you can't, you'd be just as screwed in C++ as in Python.</span>
<span class="comment-copy">If you really want static type checking, you can run Mypy, and annotate whatever can't be inferred (or, if you can't/don't want to change existing code, write typesheds). Up-to-date IDEs will take advantage of this to statically type-check on the fly, and to show more information in their auto-complete and so on. It's still just going to tell you <code>Dict[str, file]</code>, but if you need that, you can have it.</span>
<span class="comment-copy">One more thing: "some custom datastructure with its getters and setters" rarely exists in Python, and the same for a lot of the cruft that types are there to document in Java (and Java-like C++ designs). Also, types usually to follow standard protocols (even when not implementing an ABC) and idioms whenever reasonable. Unfortunately, this doesn't do you any good until you get a sense for what's "pythonic", but it doesn't take long to get that sense.</span>
<span class="comment-copy">Both is advice for the <i>author</i> of code, not for the <i>reader</i>.</span>
<span class="comment-copy">I think , based on the question, author wants to read the code properly.</span>
<span class="comment-copy">Yes, but you advise him to change the code.</span>
<span class="comment-copy">Well, yes. without changing code , how would he know what is the type of a object.</span>
<span class="comment-copy">That is exactly his question</span>
