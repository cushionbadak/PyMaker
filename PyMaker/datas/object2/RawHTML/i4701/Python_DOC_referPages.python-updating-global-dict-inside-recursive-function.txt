<div class="post-text" itemprop="text">
<p>I am trying to find all permutations of elements in a list and add it to a global dictionary</p>
<p>Code:</p>
<pre><code>outp={}
k=0
def func(i,arr):
    global outp
    global k
    arr=arr.copy()
    for j in range(i,len(list)):
        arr[i],arr[j] = arr[j],arr[i]
        if i!=j or i==0:
            k=k+1
            print("\n\n",arr,k)
            outp[k]=arr
            print("\n",outp)
        func(i+1,arr)

list = [1,2,3,8]
func(0,list)
</code></pre>
<p>Output below:
Till 4th element it updated correctly. During 5th element, it updated both 5th and 3rd element in the dictionary. I don't know why it is happening. Kindly help</p>
<pre><code>[1, 2, 3, 8] 1

 {1: [1, 2, 3, 8]}


 [1, 2, 8, 3] 2

 {1: [1, 2, 3, 8], 2: [1, 2, 8, 3]}


 [1, 3, 2, 8] 3

 {1: [1, 2, 3, 8], 2: [1, 2, 8, 3], 3: [1, 3, 2, 8]}


 [1, 3, 8, 2] 4

 {1: [1, 2, 3, 8], 2: [1, 2, 8, 3], 3: [1, 3, 2, 8], 4: [1, 3, 8, 2]}


 [1, 8, 2, 3] 5

 {1: [1, 2, 3, 8], 2: [1, 2, 8, 3], 3: [1, 8, 2, 3], 4: [1, 3, 8, 2], 5: [1, 8, 2, 3]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to place a copy of the array in the dictionary:</p>
<pre><code>outp[k] = arr.copy()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This would be a better way to copy list to a new list.<br/>
<code>arr=arr[:]</code> .<br/>
<a href="https://repl.it/repls/BronzeYellowConversion" rel="nofollow noreferrer">https://repl.it/repls/BronzeYellowConversion</a></p>
</div>
<span class="comment-copy">When you write <code>outp[k] = arr</code>, you are basically saying : this value is equal to this object in memory. Meaning that when you modify the object, it is "<i>updated</i>" everywhere this data is referenced.</span>
<span class="comment-copy">Wow. That worked. That's a good catch. Thanks...</span>
<span class="comment-copy">How come the already present <code>arr=arr.copy()</code> didn't achieve the required result</span>
<span class="comment-copy">Because the loop changes the copy of <code>arr</code> was made.</span>
<span class="comment-copy">Why would this be a better way to copy a list than the already given answer?</span>
<span class="comment-copy">Slicing is slightly faster. You can search for slicing vs deep copy. or check the comments section of this post <a href="https://stackoverflow.com/questions/184643/what-is-the-best-way-to-copy-a-list" title="what is the best way to copy a list">stackoverflow.com/questions/184643/â€¦</a></span>
<span class="comment-copy">That is correct, but <code>list.copy()</code> is a shallow copy and equivalent to slicing. Therefore slicing is just a less intuitive way to write a copy</span>
<span class="comment-copy">Docs for <code>list.copy()</code>: Return a shallow copy of the list. Equivalent to <code>a[:]</code>]<a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html</a>)</span>
<span class="comment-copy">Fair enough.. by the way, in python2.7, lists don't even have copy method. <a href="https://docs.python.org/2.7/tutorial/datastructures.html" rel="nofollow noreferrer">docs.python.org/2.7/tutorial/datastructures.html</a></span>
