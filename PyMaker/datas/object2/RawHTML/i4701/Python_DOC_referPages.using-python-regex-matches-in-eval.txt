<div class="post-text" itemprop="text">
<p>I would like to utilize user input to match and rearrange strings.
In Perl a simple example would look like the following:</p>
<pre><code>use strict;

my $str = 'abc123def456ghi';
my $user_input1 = '(\d+).+?(\d+)';
my $user_input2 = '$2.$1';
if ($str =~ /$user_input1/) {
  my $newstr = eval($user_input2);
  print $newstr;
}
else {print "No match..."};
</code></pre>
<p>The same works in principle also in Python:</p>
<pre><code>import re

mystr = 'abc123def456ghi'
user_input1 = '(\d+).+?(\d+)'
user_input2 = 'm.group(2) + m.group(1)'
m = re.search(user_input1,mystr)
if m:
    newstr = eval(user_input2)
    print (newstr)
else: print ("No match...")
</code></pre>
<p>Result: 456123</p>
<p>However, the expressions <code>'m.group(1)'</code> and <code>'m.group(2)'</code> are not very user-friendly if you have to type it several times in an entry field.</p>
<p>Therefore, I am wondering if in Python there are similar compact expression like <code>'$1'</code> <code>'$2'</code> in Perl?
I can't get it work in Python with <code>'\1'</code> and <code>'\2'</code>.
Any ideas?</p>
<p>Edit:</p>
<p>Sorry, I try to explain after some comments below:
I was trying <code>eval()</code> since it seems to work with <code>m.group(1)</code> etc.
but apparently for some reason <code>r'\1'</code> etc. is not accepted in <code>eval()</code></p>
<pre><code>import re
mystr = 'abc123def456ghi'
user_input1 = r'(\d+).+?(\d+)'
user_input2 = r'\2\1'
newstr = eval(user_input2)
print (newstr)
</code></pre>
<p>results in</p>
<pre><code>SyntaxError: unexpected character after line continuation character
</code></pre>
<p>About the suggestion to use re.sub()</p>
<p>It should not be a simple substitution of a string but a rearrangement+addition of matches.
If I modify the original regex </p>
<pre><code>user_input1 = r'(.+?)(\d+).+?(\d+)(.+)'
</code></pre>
<p>I can use <code>user_input2 = r'\3\2'</code>
However, e.g. if I want to add '999' inbetween the matches (of course, neither <code>r'\3999\2'</code> or <code>r'\3+"999"+\2'</code> does it) then probably I am back using <code>eval()</code> and <code>m.group(1)</code> etc. although I wanted to keep the user input as short and simple as possible. Maybe, I can use some kind of the suggested substitutions.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need <code>eval</code>. In fact, <a href="https://stackoverflow.com/questions/1832940/why-is-using-eval-a-bad-practice">you want to avoid <code>eval</code> like the plague</a>.</p>
<p>You can achieve the same output with <a href="https://docs.python.org/3/library/re.html#re.match.expand" rel="nofollow noreferrer"><code>match.expand</code></a>:</p>
<pre><code>mystr = 'abc123def456ghi'
user_input1 = r'(\d+).+?(\d+)'
user_input2 = r'\2\1'
match = re.search(user_input1, mystr)
result = match.expand(user_input2)
# result: 456123
</code></pre>
<p>The example about inserting <code>999</code> between the matches is easily solved by using the <code>\g&lt;group_number&gt;</code> syntax:</p>
<pre><code>mystr = 'abc123def456ghi'
user_input1 = r'(.+?)(\d+).+?(\d+)(.+)'
user_input2 = r'\g&lt;3&gt;999\2'
match = re.search(user_input1, mystr)
result = match.expand(user_input2)
# result: 456999123
</code></pre>
<p>As you can see, if all you need to do is move captured text around and insert new text, the regex module has you covered. Only use <code>eval</code> if you <strong><em>really</em></strong> have to execute code.</p>
</div>
<div class="post-text" itemprop="text">
<p>"inspired" by the above comments, I think the following seems to be an answer to my question. (Assuming that you have only <code>\1</code> to <code>\9</code>). At least, this solution was not intuitive and obvious to me (as Python likes to be). More elegant constructs are welcome.</p>
<pre><code>import re

mystr = 'abc123def456ghi'
user_input1 = r'(\d+).+?(\d+)'
user_input2 = r'\2+"999"+\1'
user_input2 = re.sub(r'\\(\d)',r'm.group(\1)',user_input2,flags=re.S)
m = re.search(user_input1,mystr)
if m:
     newstr = eval(user_input2)
     print (newstr)
</code></pre>
</div>
<span class="comment-copy">Why are you using <code>eval</code>?</span>
<span class="comment-copy">You can always write e.g. <code>g = m.group</code> and then do <code>g(1)</code>, <code>g(2)</code> for groups. You can then even do <code>{g(1)}</code> etc. within an f-string. But there's really no reason to. You'll type it once, but you'll read it hundreds of times, so readability is far more important than saving a few keystrokes.</span>
<span class="comment-copy">You shouldn't be using <code>eval</code>. You should be using <a href="https://pastebin.com/5VMBDwPP" rel="nofollow noreferrer">this</a>.</span>
<span class="comment-copy">What does "I can't get it work" mean? Show us the code where you call <code>re.sub</code> or <code>m.expand</code> or whatever and we can probably tell you what you got wrong, but without any idea of what you tried or what happened, all anyone can say is that you must have done something wrong somewhere.</span>
<span class="comment-copy">I'm gonna go out on a limb and say this is a duplicate of <a href="https://stackoverflow.com/questions/20765265/python-re-sub-back-reference-not-back-referencing" title="python re sub back reference not back referencing">stackoverflow.com/questions/20765265/â€¦</a></span>
<span class="comment-copy">ok, I should avoid <code>eval()</code> if possible. However, to make the user_input1 as simple as possible I don't want to force him to always type <code>(.+?)</code> and <code>(.+)</code> at the beginning and end of <code>user_input1</code>, respectively. But using <code>re.sub()</code> will require this since it is a substitution and not a rearrangement of matches what I would like to have. I still don't see a way achieving this with <code>re.sub()</code>. If somebody can show me a way without <code>eval()</code>... fine!</span>
<span class="comment-copy">have you tested your first example at all? The result is:  <code>abc456123ghi</code>, and that's not the result what I want. So, with <code>re.sub()</code> you need <code>(.+?)</code> at the beginng and <code>(.+)</code> at the end for <code>user_input1</code>.Please explain me why you think you don't need it. With <code>eval()</code> I can just newly assemble just the matches <code>\1</code>, <code>\2</code>,... as I like. Please let me know how I could do this with <code>re.sub()</code>.</span>
<span class="comment-copy">@theozh Sorry about the misunderstanding. Answer updated.</span>
<span class="comment-copy">in the original question I wrote what I expect: <code>Result: 456123</code>. I assume that you know what regular expression are. First, I match the expression <code>r'(\d+)(.+?)(\d+)'</code>, in words: several numbers with some characters inbetween and then again several numbers. Second, if there is a match in <code>mystr</code> I want to reuse and assemble just the second group of numbers and the first group of numbers, nothing else. If you tested your suggested code this would be a counterexample, because the result is <code>abc456123ghi</code>. Sorry, for taking your time.</span>
<span class="comment-copy">aaah, <code>expand()</code> does the trick! @abarnert mentioned it above. I couldn't find it in my Python tutorial and since you insisted that it can be done with <code>re.sub()</code> I thought I don't see something which is obvious to others. OK, now I can finally skip evil <code>eval()</code> and everybody is happy. Thank you for the updated answer and your patience.</span>
<span class="comment-copy">although I am told not to use <code>eval()</code>, so far, this is the first solution which is satisfying my requirements.</span>
<span class="comment-copy">@Aran-Fey again, have you tested your code with <code>re.sub()</code>? With my Python3.6 the result is <code>abc456999123ghi</code>. What is your result?</span>
<span class="comment-copy">Oh, I see the problem now. The <code>re.sub</code> in your code tricked me into thinking that you want to substitute text, when in reality you want to <i>extract</i> text. My bad. I'll update my answer.</span>
