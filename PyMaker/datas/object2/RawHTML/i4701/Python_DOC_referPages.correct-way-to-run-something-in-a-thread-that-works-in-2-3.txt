<div class="post-text" itemprop="text">
<p>Every result i've found online has either been really old, specific to either Python 2.7 or 3.x, or is complicated enough that I can't understand it. My use case is very simple, but i'm having a hard time finding a simple solution. My existing code looks like this:</p>
<pre><code>return_val = func_that_makes_a_request(val1, val2)

lots = "of"
other()
code()
foo = some_other_func_that_makes_a_request(val3, val4)

something_else(foo, return_val)
</code></pre>
<p>The top line ends making an HTTP request. The next few lines compute some values that are then used to make another HTTP request in the 2nd to last line. These two sections (top line, everything after that except for the last line) are completely independent of each other. The final line though requires the result of both.</p>
<p>All I really want is to make these two HTTP requests in parallel, since neither needs to wait for the other. What's the simplest way to do this, that works in Python 2.7+?</p>
<p><strong>Edit for future readers</strong>
Went with this solution:</p>
<pre><code>with multiprocessing.dummy.Pool(1) as thread_pool:
    return_async = thread_pool.apply_async(func_that_makes_a_request, (val1, val2))

    lots = "of"
    other()
    code()
    foo = some_other_func_that_makes_a_request(val3, val4)

    return_val = return_async.get()

    something_else(foo, return_val)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The lower-level <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer"><code>threading</code></a> module in the stdlib is the same in 2.6+ and 3.x, at least for the basic stuff you're doing. It's a little clunky, because out of the box it doesn't give any way for threaded tasks to return a value, but you can add that in pretty simply. For example:</p>
<pre><code>class ReturningThread(threading.Thread):
    def run(self):
        try:
            if self._target:
                self._result = self._target(*self._args, **self._kwargs)
        finally:
            del self._target, self._args, self._kwargs
    # I'm breaking the optional timeout parameter to simplify
    def join(self):
        super(threading.Thread, self).join()
        return self._result
</code></pre>
<p>And now:</p>
<pre><code>t1 = ReturningThread(target=func_that_makes_a_request, args=(val1, val2))

lots = "of"
other()
code()
t2 = ReturningThread(target=some_other_func_that_makes_a_request, args=(val3, val4))

return_val = t1.join()
something_else(foo, return_val)
other_return_val_we_dont_need_until_later = t2.join()
</code></pre>
<hr/>
<p>The <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy" rel="nofollow noreferrer"><code>multiprocessing.dummy</code></a> module lets you use higher-level <code>multiprocessing</code>-style <code>Pool</code> and similar constructs on top of threads.</p>
<pre><code>with multiprocessing.dummy.Pool(2) as p:
    return_async = p.apply_async(func_that_makes_a_request, val1, val2)

    lots = "of"
    other()
    code()
    return_async_2 = p.apply_async(some_other_func_that_makes_a_request, val3, val4)

    return_val = return_async.get()
    something_else(foo, return_val)
    other_return_val_we_dont_need_until_later = return_async_2.get()
</code></pre>
<hr/>
<p>The <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer"><code>concurrent.futures</code></a> module is the simplest way to do what you want, but it doesn't exist in 2.7, so you'd need to <code>pip install futures</code> to get the backport for 2.7, and then write something like this at the top of your file:</p>
<pre><code>try:
    from concurrent import futures
except ImportError:
    import futures
</code></pre>
<p>The nice thing about this one is that what you're trying to do matches up with one of the examples in the docs. However, since you're not really using any pool/executor features (like being able to wait on multiple results in parallel, or compose futures), it's going to end up identical to the <code>multiprocessing</code> example but with different naming:</p>
<pre><code>with futures.ThreadPoolExecutor(max_workers=2) as x:
    return_future = x.submit(func_that_makes_a_request, val1, val2)

    lots = "of"
    other()
    code()
    return_fut_2 = x.submit(some_other_func_that_makes_a_request, val3, val4)

    return_val = return_fut.result()
    something_else(foo, return_val)
    other_return_val_we_dont_need_until_later = return_fut_2.result()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>multiprocessing</code> module makes it easy to compute multiple things at the same time, especially with <code>Pool.map</code>. Usually this is for applying one function to different values rather than completely different functions, but we can easily turn that around.</p>
<pre><code>from multiprocessing.dummy import Pool
import time

def func1():
    print('starting 1')
    time.sleep(2)
    return 1

def func2():
    print('starting 2')
    time.sleep(2)
    return 2

def run_in_parallel(*funcs):
    return Pool(len(funcs)).map(lambda f: f(), funcs)

result1, result2 = run_in_parallel(func1, func2)

print(result1 + result2)
</code></pre>
<p>Note that <code>multiprocessing.dummy</code> means that we're using threads. If you want actually separate processes (which you shouldn't need since you're making HTTP requests which are not CPU bound) you would remove the <code>.dummy</code>.</p>
<p>EDIT:</p>
<p>The above is meant as a runnable example, in your case it would be:</p>
<pre><code>def func1():
    return func_that_makes_a_request(val1, val2)

def func2():
    lots = "of"
    other()
    code()
    return some_other_func_that_makes_a_request(val3, val4)

return_val, foo = run_in_parallel(func1, func2)
</code></pre>
</div>
<span class="comment-copy">Can you require a package off PyPI for Python 2.7? If youâ€™re willing to <code>pip install futures</code> you can use that in 2.7 as well as in 3.x.</span>
<span class="comment-copy">I can, but if there's another options that's mostly equivalent that would be preferable.</span>
<span class="comment-copy">Alternatively, the bare <code>threading</code> module, and <code>multiprocessing.dummy</code>, will both work with both versions (maybe with a bit of <code>six</code>-ing, but you probably want to use <code>six</code> or something equivalent for dual-version code anyway).</span>
<span class="comment-copy">As it turns out, <code>threading</code> doesn't need <code>six</code>, because 2.7 has both the old-style and new-style names for everything. But in any serious project, you're going to run into something at once point or another where you want to import ElementTree or need a lazy dict keys iterable or whatever and it's spelled a little differently, and <code>six</code> (or <code>modernize</code>, if you're building around <code>2to3</code>) makes that easier.</span>
<span class="comment-copy">Scratch what I said here, I see you're doing the second task in the main thread so <code>Pool(1)</code> works fine.</span>
<span class="comment-copy">Thanks! Huge help. My real code is obviously more complex than my example, but I edited the OP to give an example of how I applied this to my actual code. Is there any issue with using the thread pool for only one of the functions?</span>
<span class="comment-copy">@user3715648: Nope, no issue; you can use a thread pool for only one task. It's not much of a "pool" in that case, but it does suffice for kicking off a background task and then doing some work in the foreground. That was a common design for 80s/90s software that was mostly single-threaded but had occasional big background jobs, like a word processor compacting and repaginating a file, and if you're doing similar kinds of concurrency, it still works fine.</span>
<span class="comment-copy">It's hard to adapt his problem as stated into <code>map</code>, because he needs to do some computation between submitting the first and second tasks, and then needs to block on the first one without blocking on the second. If he could reorganize his code to <i>not</i> do that, of course, it would probably be cleaner, as well as being easier to <code>map</code>, but if that's not possible, using <code>apply_async</code> directly instead of hacking up the <code>map</code> by using <code>imap</code>/<code>next</code> is probably simpler.</span>
<span class="comment-copy">"because he needs to do some computation between submitting the first and second tasks" I don't see a significant problem with just putting that 'in between' code into the second function. OP's wording suggests he's already bundled the code like that in his mind: "(top line, everything after that except for the last line)". I also don't understand "and then needs to block on the first one without blocking on the second": <code>something_else(foo, return_val)</code> implies he needs the results of both tasks at the same time.</span>
<span class="comment-copy">That <code>return_val</code> comes from running the first function; there's no way it could rely on the results of the second function.</span>
<span class="comment-copy">As for the other part: Yes, he could reorganize his code to do the extra work in the second function. And, as I said, if he reorganized his code to be <code>map</code>-able it would probably be cleaner, too. But it's not always possible or appropriate to do that, even if it probably is for his toy example.</span>
<span class="comment-copy">"That return_val comes from running the first function;" ...and <code>foo</code> is from the second function, and when they are used for the first time, it's together. And it's not reorganizing code, it's just putting two blocks into functions. I wasn't intending for <code>func_that_makes_a_request</code> and <code>some_other_func_that_makes_a_request</code> to be passed directly to <code>run_in_parallel</code> since they require arguments.</span>
