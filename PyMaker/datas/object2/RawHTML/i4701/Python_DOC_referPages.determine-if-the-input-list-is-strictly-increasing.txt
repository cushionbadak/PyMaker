<div class="post-text" itemprop="text">
<p>I am trying to figure out if an input list is a strictly increasing list. Moreover, If removing only one element from the list results in a strictly increasing list, we still consider the list true. Here is my code. It seems to have an index error, but I do not understand why. </p>
<pre><code> def almostIncreasingSequence(sequence):
    n=len(sequence)
    count=0
    if n&lt;=2:
        return True

    for i in range (n-1):
        #test if the i-th element is bigger or equal to the elements after it. If it is, remove that element, and add one to count 
        for j in range (i+1,n):
            if sequence[i]&gt;=sequence[j]:
                sequence.pop(i)
                count+=1
    #if there is more than one element that has to be taken out, it's false           
    if count&gt;1:
        return False

    return True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def almost_increasing_sequence(sequence):
    if len(sequence) &lt; 3:
        return True

    a, b, *sequence = sequence
    skipped = 0
    for c in sequence:
        if a &lt; b &lt; c:  # XXX
            a, b = b, c
            continue
        elif b &lt; c:    # !XX
            a, b = b, c
        elif a &lt; c:    # X!X
            a, b = a, c
        skipped += 1
        if skipped == 2:
            return False
    return a &lt; b


if __name__ == '__main__':
    assert almost_increasing_sequence([]) is True
    assert almost_increasing_sequence([1]) is True
    assert almost_increasing_sequence([1, 2]) is True
    assert almost_increasing_sequence([1, 2, 3]) is True
    assert almost_increasing_sequence([3, 1, 2]) is True
    assert almost_increasing_sequence([1, 2, 3, 0, 4, 5, 6]) is True
    assert almost_increasing_sequence([1, 2, 3, 0]) is True
    assert almost_increasing_sequence([1, 2, 0, 3]) is True
    assert almost_increasing_sequence([10, 1, 2, 3, 4, 5]) is True
    assert almost_increasing_sequence([1, 2, 10, 3, 4]) is True
    assert almost_increasing_sequence([1, 2, 3, 12, 4, 5]) is True

    assert almost_increasing_sequence([3, 2, 1]) is False
    assert almost_increasing_sequence([1, 2, 0, -1]) is False
    assert almost_increasing_sequence([5, 6, 1, 2]) is False
    assert almost_increasing_sequence([1, 2, 3, 0, -1]) is False
    assert almost_increasing_sequence([10, 11, 12, 2, 3, 4, 5]) is False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alright, so it turns out this problem is not <em>that</em> easy. </p>
<p>If you want an efficient solution, I think your best bet may be an algorithm similar to the <a href="https://en.wikipedia.org/wiki/Longest_increasing_subsequence" rel="nofollow noreferrer">longest increasing subsequence problem</a>. </p>
<p>But here, we don't care about the actual longest increasing subsequence - we just need it's length. Also, we can short-circuit when maintaining our ordered list if we have had to perform <code>n</code> insertions already (where <code>n</code> is our restriction on the number of "out of order" elements).</p>
<p>This also generalizes very well to the <code>n</code> element "almost increasing" case, and in the worst case performs <code>n-1</code> binary searches on lists of size <code>M-n-1</code> to <code>M</code>, where <code>M</code> is the size of the list. </p>
<pre><code>import bisect

def almost_increasing(li, n=1):
    if len(li) &lt; 2:
        return True
    ordered_li = [li[0]]
    violator_count = 0
    for ele in li[1:]:
        if ele &lt; ordered_li[0]:
            violator_count += 1
            ordered_li[0] = ele
        elif ele &gt; ordered_li[-1]:
            ordered_li.append(ele)
        else:
            violator_count += 1
            insertion_pos = bisect.bisect_right(ordered_li, ele)
            ordered_li[insertion_pos] = ele
        if violator_count &gt; n: return False
    return True
</code></pre>
<p>The idea behind this algorithm is as follows:</p>
<ul>
<li>We move through the list, and maintain an ordered subsequence of our list all the while. </li>
<li><p>When we reach a new element</p>
<ul>
<li><p>if that element cannot be appended onto our ordered subsequence, it is a "violator" of the increasing property. We subsequently insert it into the ordered subsequence in the correct position, using <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow noreferrer"><code>bisect</code></a> for binary search. </p></li>
<li><p>otherwise, we just append it to our ordered subsequence and continue on.</p></li>
</ul></li>
<li><p>At the end of each iteration, if we have too many violators already we can short-circuit out. Otherwise, after the loop is done we are guaranteed to have an increasing subsequence that has length within <code>n</code> of the length of our original list. </p></li>
</ul>
<hr/>
<p><strong>Demo</strong></p>
<pre><code>&gt;&gt;&gt; almost_increasing([5, 1, 2, 3, 4])
True
&gt;&gt;&gt; almost_increasing([1, 2, 5, 2, 15, 0, 176])
False
&gt;&gt;&gt; almost_increasing([1, 2, 5, 2, 15, 0, 176], 2)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you've written <code>for i in range(len(some_list))</code> in Python, you've probably done the wrong thing. This is indeed why this is failing. <code>n</code> is the length of the sequence as it stands before any processing, but that length can change as you <code>pop</code> items from the list.</p>
<p>Better instead is to compare each mark which indices need to be removed and do them all at once, or better yet -- don't remove them at all!! It's a side-effect that's not well-explained.</p>
<p>You can build this by building a list of all sequences that might be strictly increasing using <code>itertools.combinations</code>, comparing each pair with <code>itertools</code>'s <code>pairwise</code> recipe, then short-circuiting as long as at least one is.</p>
<pre><code>import itertools

def pairwise(iterable):
    (a, b) = itertools.tee(iterable)
    next(b, None)  # advance b
    return zip(a, b)

def almostIncreasingSequence(sequence):
    if not sequence:
        return True
        # in case of empty list
    combos = itertools.combinations(sequence, len(sequence)-1)
    # combos is each ordered combination that's missing one element
    # it is processed as an iterator, so will do no extra work if we can
    # exit early.

    def strictly_increasing(cs):
        return all(a &lt; b for (a, b) in pairwise(cs))

    return any(strictly_increasing(c) for c in combos)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The only thing you need to do is walk the list, counting the number of times <code>sequence[i] &gt; sequence[i+1]</code>. If it happens at most once, your list is almost monotonically increasing.</p>
<pre><code>def almostIncreasingSequence(sequence):
    count = 0
    for i in range(0, len(sequence) - 1):
        if sequence[i] &gt; sequence[i+1]:
            count += 1
    return count &lt; 2
</code></pre>
<p>You can also avoid counting, since the number of exceptions is small. Just return <code>False</code> as soon as you find the second exception, as tracked by the value of a Boolean variable initialized to <code>True</code>.</p>
<pre><code>def almostIncreasingSequence(sequence):
    increasing = True
    for i in range(0, len(sequence) - 1):
        if sequence[i] &gt; sequence[i+1]:
            if increasing:
                increasing = False
            else:
                return False
    return True
</code></pre>
</div>
<span class="comment-copy">I am trying to remove the element that is bigger than the elements after it. I count how many times this has been done. If more than one is removed, the list is not increasing.</span>
<span class="comment-copy">Do you have to (or should you?) actually remove an offending item? A single pass counting the number of <code>i</code> for which <code>sequence[i] &gt; sequence[i+1]</code> would suffice.</span>
<span class="comment-copy">You're getting an IndexError because you're iterating over the list while making it smaller, so <code>for i in range (n-1):</code> isn't going to be valid.</span>
<span class="comment-copy">@chepner When testing a list like [10,1,2,3,4], if I do not remove the first element, the result would be wrong since count is 4, but removing 10 would result True.</span>
<span class="comment-copy">Your function only returns True or False; my question is, is it also a requirement that <code>sequence</code> be <i>made</i> a monotonically increasing sequence as a side effect?</span>
<span class="comment-copy">Have you tested  [10, 1, 2, 3, 4, 5]? The output is False while it is true</span>
<span class="comment-copy">How about <code>[1, 2, 3, 12, 4, 5]</code>.</span>
<span class="comment-copy">@JingLi I've updated with your test case, miradulo's test case and a few more of my own. If this code is correct, it seems to be the most efficient solution since it only needs one pass of sequence and also doesn't use any imports.</span>
<span class="comment-copy">@Delirious Lettuce I am not understanding when the length is greater than 3, what do you set your sequence as? What is d?</span>
<span class="comment-copy">@JingLi It depends on what version of Python you are using. I wrote the code using Python 3.6.4 and in that case, it is unpacking whatever elements that are left in <code>sequence</code> (after taking out the first two) back into a variable named <code>sequence</code>. In Python 2, that would be a <code>SyntaxError</code> but there are a couple different ways to achieve the same effect (one way, using <code>iter</code> shown in the following link). Here is the same example <a href="https://bpaste.net/show/095b860e779e" rel="nofollow noreferrer">in both Python 3.6.4 and Python 2.7.12</a>. More information can <a href="https://www.python.org/dev/peps/pep-3132/" rel="nofollow noreferrer">be found in this PEP</a></span>
<span class="comment-copy">I'll defer to you for the math but wouldn't my answer be <code>O(n)</code> compared to this answer's <code>O(n log(n))</code>?</span>
<span class="comment-copy">@DeliriousLettuce Let me wrap my head around yours, give me a minute :)</span>
<span class="comment-copy">@DeliriousLettuce Yup yours seems correct! It won't extend to the <code>n</code>-off case (which, granted, wasn't part of the question). I'm questioning whether you need <code>a, b, c, d</code> though, can't you just restrict yourself to <code>a, b, c</code>? I also don't think mine is actually <code>O(n log(n))</code>, as the binary search can only occur <code>k</code> times where <code>k</code> is the second parameter. Need to think about it a little more.</span>
<span class="comment-copy">@DeliriousLettuce I doubt <code>n</code>-off can work without maintaining a total ordering like my solution does, but please let me know! I ran some benchmarks and mine seems slightly faster than yours for larger (both crushing Adam's), probably due to just less comparisons. Tricky to benchmark because there is so much variability. This is an interesting problem.</span>
<span class="comment-copy">Thanks again for your insight about the excess variable, it allowed me to simplify my answer quite a bit. It seems less complex and more readable now. I think you are correct about the n-off problem though, my solution just isn't built for it. I forgot to upvote you earlier but +1 and thanks again for your solution and your time!</span>
<span class="comment-copy"><code>almostIncreasingSequence([1,2,3,2,2,2])</code> returns <code>True</code> when it should be <code>False</code>.</span>
<span class="comment-copy">changed now, this algorithm should work (though it is much less performant)</span>
<span class="comment-copy">@JingLi okay, third time's the charm.</span>
<span class="comment-copy">@Adam Smith This works now. Thank you! I have one more question. Is it possible to change my original code, instead of deleting a number in the list, once the sequence[i]&gt;=sequence[j], stop the loop and add one to count, then set i=i+1? Then start the loop again?</span>
<span class="comment-copy">@AdamSmith <code>ValueError: r must be non-negative</code> if sequence is an empty list (OPs code seems to count any sequence shorter than 3 as <code>True</code>)</span>
<span class="comment-copy">I don't think this is a correct algorithm. Pairwise monotonicity cannot guarantee monotonicity of the entire sequence. Take <code>[5, 6, 1, 2]</code>.</span>
<span class="comment-copy">Ah, possible. I interpreted the problem differently.</span>
<span class="comment-copy">@chepner I made the same mistake and had to re-do my algorithm. D'oh!</span>
