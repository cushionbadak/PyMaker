<div class="post-text" itemprop="text">
<p>I am building an application using Django 2.0 and Python 3, but I am having some issues with parsing a file using a custom class</p>
<p>I have created this class:</p>
<pre><code>class MailWareConfiguration:
    _configuration = {}

    def __init__(self, data, *args, **kwargs):
        if self._configuration == {}:
            self._configuration = self.dot(data)

    def accessible(self,key):
        if self.exists(key) and (self._configuration[key] and not self._configuration[key] == ''):
            return True
        else:
            return False

    def dot(self, data, prepend = ''):
        print('MailwareConfiguration.dot started')
        results = {}
        print('RAW: ' + str(data))
        for key,value in data.items():
            print('RAW VAL: '+str(value))
            if isinstance(value, dict):
                print('KEY: ' + str(key) + ' DICT: '+str(value))
                results = results.update(self.dot(value,prepend+key+'.'))
            else:
                print('KEY: ' + str(key) + ' VALUE: '+str(value))
                results[prepend+key] = value
        print('RAW PROCESSED: ' + str(data))
        print('MailwareConfiguration.dot finished')
        return results

    def exists(self, key):
        if key in self._configuration:
            return True
        else:
            return False

    def get(self, key, default):
        if self.accessible(key):
            return self._configuration[key]
        else:
            return default
</code></pre>
<p>The purpose of this class is to process a <code>dict</code> into a flat structure <code>dict</code> where each subsequent level would be seperated by a dot, similar to what the <code>config</code> function does in Laravel PHP.</p>
<p>This is done, so that I can easily provide a readable implementation of a <code>.json</code> file outside of <code>Git</code>, so that sensitive information such as database credentials are not stored in version control, but still have the values assigned to variables in <code>settings.py</code></p>
<p>My example configuration file looks like this:</p>
<pre><code>{
    "debug": true,
    "hosts": [
        "localhost"
    ],
    "database": {
        "name": "mailware",
        "user": "mailware",
        "password": "mailware",
        "host": "localhost",
        "port": "5432",
        "options": {
            "sslmode": "require"
        }
    },
    "language_code": "en-us",
    "time_zone": "UTC",
    "api_only_mode": false,
    "hostconfig": {
        "salearn_bin":"/usr/bin/salearn",
        "sa_bin": "/usr/bin/spamassassin",
        "mailscanner_bin":"/usr/sbin/MailScanner",
        "mailscanner_config_dir": "/etc/MailScanner",
        "mailscanner_share_dir": "/usr/share/MailScanner",
        "mailscanner_lib_dir": "/usr/lib/MailScanner",
        "tmp_dir":"/tmp",
        "sa_rules_dir":"/usr/share/spamassassin",
        "sendmail_bin":"/usr/sbin/sendmail"
    },
    "retention": {
        "records":60,
        "audit":60,
        "quarantine":60
    },
    "mta": "sendmail"
}
</code></pre>
<p>It all runs fine during <code>MailWareConfiguration.dot</code>, but as soon as we are finished processing the <code>database</code> property of the <code>json</code> data, it crashes with <code>File /Code/mailware/src/core/helpers.py", line 22, in dot
    results = results.update(self.dot(value,prepend+key+'.'))
TypeError: 'NoneType' object is not iterable</code> and does not process the rest of the file.</p>
<p>How can I resolve this issue without changing the structure of the file</p>
</div>
<div class="post-text" itemprop="text">
<p>Reiterating my earlier comment:</p>
<p>You receive the error <code>NoneType is not iterable</code> because you assign the output of a void method - <code>dict.update()</code> - to the dictionary. The <a href="https://docs.python.org/3/library/stdtypes.html#dict.update" rel="nofollow noreferrer"><code>dict.update()</code> method</a> reference states:  </p>
<blockquote>
<p>Update the dictionary with the key/value pairs from other, overwriting existing keys. Return <code>None</code>.</p>
</blockquote>
<p>Your code that does this is </p>
<pre><code>for key,value in data.items():
    print('RAW VAL: '+str(value))
    if isinstance(value, dict):
        print('KEY: ' + str(key) + ' DICT: '+str(value))
---&gt;    results = results.update(self.dot(value,prepend+key+'.'))
</code></pre>
<p>The marked line can simply be</p>
<pre><code>results.update(self.dot(value, prepend + key + '.'))
</code></pre>
</div>
<span class="comment-copy"><code>results.update()</code> mutates itself - it does not return a copy of itself with the changes. So <code>results = results.update()</code> assigns <code>Nonetype</code> to <code>results</code>. <a href="https://docs.python.org/2/library/stdtypes.html#dict.update" rel="nofollow noreferrer">docs.python.org/2/library/stdtypes.html#dict.update</a></span>
