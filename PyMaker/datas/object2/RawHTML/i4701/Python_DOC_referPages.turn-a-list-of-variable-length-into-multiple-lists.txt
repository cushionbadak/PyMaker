<div class="post-text" itemprop="text">
<p>I am writing a script that takes user input of however many characters and I want to put each one of the characters into its own list to be then manipulated.</p>
<pre><code>input = AVI
</code></pre>
<p>Output:</p>
<pre><code>A = ['A'] V = ['V'] I = ['I']
</code></pre>
<p>I was able to get it into a single list like this: ['A','V','I'] but that becomes too confusing for what I want to do later.</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider using <code>dict</code> with <code>enumerate</code>. Now you can even retrieve your letters by location.</p>
<pre><code>x = input('Input a string:\n')
# User inputs 'AVI'

d = dict(enumerate(x))
# {0: 'A', 1: 'V', 2: 'I'}
</code></pre>
<p>I struggle to see how you know <em>which</em> letters to access when the user is inputting a string, so it doesn't make sense to name your variables (or, here, keys) after the letters themselves.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really <em>want</em> to have a variable named after itself, Use a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">mapping</a> thus:</p>
<pre><code>&gt;&gt;&gt; s='AVI'
&gt;&gt;&gt; {e:e for e in s}
{'A': 'A', 'I': 'I', 'V': 'V'}
</code></pre>
<p>Then access it like so:</p>
<pre><code>&gt;&gt;&gt; di={e:e for e in s}
&gt;&gt;&gt; di['A']
'A'
</code></pre>
<p>Or, enumerate for an index (thanks jpp):</p>
<pre><code>&gt;&gt;&gt; {n:e for n,e in enumerate(s)}
{0: 'A', 1: 'V', 2: 'I'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you need to use a for loop and in the for write if-else conditions 
and for inserting any character that you want into your lists use appned() method.</p>
</div>
<span class="comment-copy">Too confusing?  How do you expect to know what the variable names are for the lists you are going to create?</span>
<span class="comment-copy">Also, what happens when the user enters a string with duplicate letters?</span>
<span class="comment-copy">As to Stephen's point, if you know which letter you want to access, why not just hard-code that letter in directly instead of accessing a string with its value?</span>
<span class="comment-copy">Or <code>dict(enumerate(s))</code></span>
