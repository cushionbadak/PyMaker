<div class="post-text" itemprop="text">
<p>In C++, I can create a array like...</p>
<pre><code>int* a = new int[10];
</code></pre>
<p>in python,I just know that I can declare a list,than append some items,or like..</p>
<pre><code>l = [1,2,3,4]
l = range(10)
</code></pre>
<p>Can I initialize a list by a given size,like c++,and do not do any assignment?</p>
</div>
<div class="post-text" itemprop="text">
<p>(tl;dr: The exact answer to your question is <code>numpy.empty</code> or <code>numpy.empty_like</code>, but you likely don't care and can get away with using <code>myList = [None]*10000</code>.) </p>
<h1>Simple methods</h1>
<p>You can initialize your list to all the same element. Whether it semantically makes sense to use a non-numeric value (that will give an error later if you use it, which is a good thing) or something like 0 (unusual? maybe useful if you're writing a sparse matrix or the 'default' value should be 0 and you're not worried about bugs) is up to you:</p>
<pre><code>&gt;&gt;&gt; [None for _ in range(10)]
[None, None, None, None, None, None, None, None, None, None]
</code></pre>
<p>(Here <code>_</code> is just a variable name, you could have used <code>i</code>.)</p>
<p>You can also do so like this:</p>
<pre><code>&gt;&gt;&gt; [None]*10
[None, None, None, None, None, None, None, None, None, None]
</code></pre>
<p>You probably don't need to optimize this. You can also append to the array every time you need to:</p>
<pre><code>&gt;&gt;&gt; x = []
&gt;&gt;&gt; for i in range(10):
&gt;&gt;&gt;    x.append(i)
</code></pre>
<hr/>
<h1>Performance comparison of simple methods</h1>
<p>Which is best?</p>
<pre><code>&gt;&gt;&gt; def initAndWrite_test():
...  x = [None]*10000
...  for i in range(10000):
...   x[i] = i
... 
&gt;&gt;&gt; def initAndWrite2_test():
...  x = [None for _ in range(10000)]
...  for i in range(10000):
...   x[i] = i
... 
&gt;&gt;&gt; def appendWrite_test():
...  x = []
...  for i in range(10000):
...   x.append(i)
</code></pre>
<p>Results in python2.7:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; for f in [initAndWrite_test, initAndWrite2_test, appendWrite_test]:
...  print('{} takes {} usec/loop'.format(f.__name__, timeit.timeit(f, number=1000)*1000))
... 
initAndWrite_test takes 714.596033096 usec/loop
initAndWrite2_test takes 981.526136398 usec/loop
appendWrite_test takes 908.597946167 usec/loop
</code></pre>
<p>Results in python 3.2:</p>
<pre><code>initAndWrite_test takes 641.3581371307373 usec/loop
initAndWrite2_test takes 1033.6499214172363 usec/loop
appendWrite_test takes 895.9040641784668 usec/loop
</code></pre>
<p>As we can see, it is likely better to do the idiom <code>[None]*10000</code> in both python2 and python3. However, if one is doing anything more complicated than assignment (such as anything complicated to generate or process every element in the list), then the overhead becomes a meaninglessly small fraction of the cost. That is, such optimization is premature to worry about if you're doing anything reasonable with the elements of your list.</p>
<hr/>
<h1>Uninitialized memory</h1>
<p>These are all however inefficient because they go through memory, writing something in the process. In C this is different: an uninitialized array is filled with random garbage memory (sidenote: that has been reallocated from the system, and can be a <a href="https://stackoverflow.com/q/12095135/711085">security risk</a> when you allocate or fail to mlock and/or fail to delete memory when closing the program). This is a design choice, designed for speedup: the makers of the C language thought that it was better not to automatically initialize memory, and that was the correct choice.</p>
<p>This is not an asymptotic speedup (because it's <code>O(N)</code>), but for example you wouldn't need to first initialize your entire memory block before you overwrite with stuff you actually care about. This, if it were possible, is equivalent to something like (pseudo-code) <code>x = list(size=10000)</code>.</p>
<p>If you want something similar in python, you can use the <code>numpy</code> numerical matrix/N-dimensional-array manipulation package. Specifically, <a href="http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.empty.html" rel="noreferrer"><code>numpy.empty</code></a> or <a href="http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.empty_like.html" rel="noreferrer"><code>numpy.empty_like</code></a></p>
<p>That is the real answer to your question.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use this: <code>[None] * 10</code>. But this won't be "fixed size" you can still append, remove ... This is how lists are made.</p>
<p>You could make it a tuple (<code>tuple([None] * 10)</code>) to fix its width, but again, you won't be able to change it (not in all cases, only if the items stored are mutable).</p>
<p>Another option, closer to your requirement, is not a list, but a <code>collections.deque</code> with a maximum length. It's the maximum size, but it could be smaller.</p>
<pre><code>import collections
max_4_items = collections.deque([None] * 4, maxlen=4)
</code></pre>
<p>But, just use a list, and get used to the "pythonic" way of doing things.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not really the python way to initialize lists like this. Anyway, you can initialize a list like this:</p>
<pre><code>&gt;&gt;&gt; l = [None] * 4
&gt;&gt;&gt; l
[None, None, None, None]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Note also that when you used arrays in C++ you might have had somewhat different needs, which are solved in different ways in Python:</p>
<ol>
<li>You might have needed just a collection of items; Python lists deal with this usecase just perfectly.</li>
<li>You might have needed a proper <strong>array</strong> of homogenous items. Python lists are <strong>not</strong> a good way to store <em>arrays</em>.</li>
</ol>
<p>Python solves the need in arrays by <strong><a href="http://numpy.scipy.org/" rel="nofollow">NumPy</a></strong>, which, among other neat things, has a way to create an <em>array</em> of known size:</p>
<pre><code>from numpy import *

l = zeros(10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has nothing built-in to support this. Do you really need to optimize it so much as I don't think that appending will add <em>that</em> much overhead.</p>
<p>However, you can do something like <code>l = [None] * 1000</code>.</p>
<p>Alternatively, you could use a generator.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>your_list = [None]*size_required
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>fix_array = numpy.empty(n, dtype = object)
</code></pre>
<p>where n is the size of your array</p>
<p>though it works, it may not be the best idea as you have to import a library for this purpose. Hope this helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it using <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer">array</a> module. array module is part of python standard library:</p>
<pre><code>from array import array
from itertools import repeat

a = array("i", repeat(0, 10))
# or
a = array("i", [0]*10)
</code></pre>
<p><a href="https://docs.python.org/3/library/itertools.html?highlight=itertools%20repeat#itertools.repeat" rel="nofollow noreferrer">repeat</a> function repeats 0 value 10 times. It's more memory efficient than [0]*10, since it doesn't allocate memory, but repeats returning the same number x number of times.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is more of a warning than an answer.<br/>
Having seen in the other answers <code>my_list = [None] * 10</code>, I was tempted and set up an array like this <code>speakers = [['','']] * 10</code> and came to regret it immensely as the resulting <code>list</code> did not behave as I thought it should.<br/>
I resorted to:</p>
<pre><code>speakers = []
for i in range(10):
    speakers.append(['',''])
</code></pre>
<p>As <code>[['','']] * 10</code> appears to create an <code>list</code> where subsequent elements are a copy of the first element.<br/>
for example:</p>
<pre><code>&gt;&gt;&gt; n=[['','']]*10
&gt;&gt;&gt; n
[['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', '']]
&gt;&gt;&gt; n[0][0] = "abc"
&gt;&gt;&gt; n
[['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', ''], ['abc', '']]
&gt;&gt;&gt; n[0][1] = "True"
&gt;&gt;&gt; n
[['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True'], ['abc', 'True']]
</code></pre>
<p>Whereas with the <code>.append</code> option:</p>
<pre><code>&gt;&gt;&gt; n=[]
&gt;&gt;&gt; for i in range(10):
...  n.append(['',''])
... 
&gt;&gt;&gt; n
[['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', '']]
&gt;&gt;&gt; n[0][0] = "abc"
&gt;&gt;&gt; n
[['abc', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', '']]
&gt;&gt;&gt; n[0][1] = "True"
&gt;&gt;&gt; n
[['abc', 'True'], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', ''], ['', '']]
</code></pre>
<p>I'm sure that the accepted answer by ninjagecko does attempt to mention this, sadly I was too thick to understand.<br/>
Wrapping up, take care!</p>
</div>
<span class="comment-copy">You <i>do</i> <i>not</i> <i>need</i> to declare a list in Python. Just initialize it when you <i>want</i> <i>to</i> <i>use</i> it.</span>
<span class="comment-copy">Right, why on earth would you need that?</span>
<span class="comment-copy">Pyhton is not C++. you really need to change the way you think about it, there is no need to declare a fixed size in python.</span>
<span class="comment-copy">@WeaselFox: sometimes there is; for example say you wanted to do the Sieve or Eratoshenes.</span>
<span class="comment-copy">Note that <code>range(10)</code> is actually a generator object in python3; you will not be able to mutate it. You will need to do <code>list(range(10))</code></span>
<span class="comment-copy"><code>_</code> is just a "dumb" name for a variable not really needed when iterating a range? I wish just <code>for range(10)</code> could be written sometimes.</span>
<span class="comment-copy"><code>x = [[None]]*10</code> is "wrong". Try <code>x[0].append(1)</code> and see the magic.</span>
<span class="comment-copy">@Death-Stalker: yes, I think that's what I was actually trying to point out and illustrate ("working with mutable objects"). But thank you, I think you've made me realize my answer is horribly worded. Fixed.</span>
<span class="comment-copy">how about xrange?</span>
<span class="comment-copy">Using <code>from numpy import *</code> will hide the python builtins <code>all</code>, <code>abs</code>, <code>min</code>, <code>max</code>, <code>sum</code>, <code>any</code> and <code>round</code> with the numpy equivalents, which might not always be what you want.</span>
<span class="comment-copy">Yes, be careful that <code>numpy</code> module contains quite a lot of names (which are nevertheless convenient to have in your module namespace when you are writing array code). If possible name clashes cause trouble for you, use qualified imports.</span>
<span class="comment-copy">Right,I not very familiar with python's memory management,I will change my mind.Thank you~</span>
