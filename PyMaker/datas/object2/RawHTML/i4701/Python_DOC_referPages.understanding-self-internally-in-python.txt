<div class="post-text" itemprop="text">
<p>I fully understand <strong>what</strong> is being passed to <code>self</code> in this example.  I'm very confused on <strong>how</strong> it is being passed to <code>self</code> internally.  Could someone help me understand?</p>
<pre><code>class Cars:

    def __init__(self, model, engine, doors):

        self.model = model
        self.engine = engine
        self.doors = doors

tesla = Cars('Model S', 'Electric', 'Four door')
ford = Cars('Mustang', 'v8', 'Two door')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are many steps that beginner tutorials do not cover, so I will attempt to be brief but thorough. I will try to be precise in my terminology, so you can look up all the sections you are unclear about.</p>
<p>In general, <a href="https://stackoverflow.com/q/3786881/2988730">methods</a> in Python are functions in the <a href="https://docs.python.org/3/tutorial/classes.html#class-objects" rel="nofollow noreferrer">class object</a>. All functions are <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptors</a>. Part of what being a <a href="https://stackoverflow.com/q/3798835/2988730">descriptor</a> means is that when you access a method through the <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects" rel="nofollow noreferrer">instance</a> of a class, it creates a <a href="https://stackoverflow.com/q/13857/2988730">closure</a> that automatically passes the instance you created it on as the <a href="https://stackoverflow.com/q/2709821/2988730"><code>self</code></a> parameter. For example, if <code>Cars</code> had a <a href="https://docs.python.org/3/tutorial/classes.html#method-objects" rel="nofollow noreferrer">method</a> <code>start(self)</code> in addition to <code>__init__</code>, then <code>tesla.start</code> would be a <a href="https://stackoverflow.com/q/114214/2988730">"bound method"</a>, which is a closure that passes <code>tesla</code> as <code>self</code> to <code>Cars.start</code>. Notice that I did not put parentheses after <code>tesla.start</code>. Putting parentheses would actually invoke the bound method.</p>
<p>Second piece of information: if a class defines a <a href="https://docs.python.org/3/reference/datamodel.html#object.__call__" rel="nofollow noreferrer"><code>__call__</code></a> <a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" rel="nofollow noreferrer">special method</a>, its instances are said to be <a href="https://stackoverflow.com/q/111234/2988730">callable</a>. This means that you can invoke an instance as if it were a function using the <code>()</code> operator. You can see a case of this when you do <code>tesla = Cars(...)</code>. Here <code>Cars</code> is a class object, but you are calling it as if it were a function. We are now getting close to where <code>self</code> actually gets passed in to <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" rel="nofollow noreferrer"><code>__init__</code></a>.</p>
<p>Thirdly, pretty much <a href="https://stackoverflow.com/q/865911/2988730">everything</a> in Python is an <a href="https://docs.python.org/3/reference/datamodel.html#objects-values-and-types" rel="nofollow noreferrer">object</a> and obeys the general rules you know for objects, like being created from a class, etc. This includes <a href="https://stackoverflow.com/q/25292239/2988730">functions</a> and <a href="https://softwareengineering.stackexchange.com/q/245929/254663">classes</a>. A class object is created from another class, which is appropriately named a <a href="https://docs.python.org/3/reference/datamodel.html#metaclasses" rel="nofollow noreferrer">metaclass</a>. Normally <a href="https://blog.ionelmc.ro/2015/02/09/understanding-python-metaclasses/" rel="nofollow noreferrer">metaclasses</a> are a can of worms you don't want to open, so we will scratch just enough of the surface here and no more. The most common <a href="https://stackoverflow.com/q/100003/2988730">metaclass</a> is <code>type</code>: 99%<sup>1</sup> of all class objects you will encounter as a beginner as instances of <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer"><code>type</code></a>. <code>type</code> defines a <a href="https://stackoverflow.com/q/9663562/2988730"><code>__call__</code></a> method, which is what you are invoking when you do <code>Cars(...)</code>, since <code>Cars</code> is an instance of <code>type</code>.</p>
<p><code>type.__call__(Cars, ...)</code> does a couple of things. First it calls <code>Cars.__new__(Cars, ...)</code>. This returns the new instance that you will later end up assigning to <code>tesla</code> or <code>ford</code> or whatever. <a href="https://stackoverflow.com/q/674304/2988730">Then</a>, if the thing that <a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow noreferrer"><code>__new__</code></a> returned is an instance of <code>Cars</code>, it will call <code>Cars.__init__(self, ...)</code>, where <code>self</code> is that new instance it just created.</p>
<p>And that's how <code>self</code> gets passed to <code>__init__</code>. Keep in mind that all the steps can be <a href="https://docs.python.org/3/reference/datamodel.html#metaclass-example" rel="nofollow noreferrer">customized</a> or overridden, so this is really just a basic overview of the simplest case.</p>
<hr/>
<p>The links in this text should get you started in more specific research. All the links are completely distinct, even when they are for the same term. All the links are to Stack Exchange sites (SO with one exception), or the official Python 3 documentation, with one exception.</p>
<hr/>
<p><sup>1</sup> I made up that statistic, but it's probably right anyway.</p>
</div>
<span class="comment-copy">Consider reading a Python <code>Class</code> tutorial. SO is not a tutorial site.</span>
<span class="comment-copy">Yes, I've read a tutorial and that other post.  I just don't quite understand how it is passing the instance to self internally.  Thanks anyway.</span>
<span class="comment-copy">@Ben. I guess you didn't read the right tutorial. Not many really good ones out there to be honest.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ. OP has a valid point here. The other question is not a very good duplicate. OP is not aware of the fact that the syntax is actually equivalent to <code>object.__call__(Cars, ...)</code>, which calls <code>Cars.__new__</code> and passes the result to <code>__init__</code>, and the other question is not really about that.</span>
<span class="comment-copy">@BenHutton. I've added a couple of dozen links in my answer for you to follow. They are to the most reputable sources I could find (SO and Python docs :) Hopefully it makes the process easier and introduces you to the nitty gritty of Python.</span>
<span class="comment-copy">I greatly appreciate you taking the time to discuss that.  That gives me a much better understanding of how everything works together along with something to go off of to do further research.  Thank you</span>
