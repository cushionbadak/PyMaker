<div class="post-text" itemprop="text">
<p>I am trying to make a program that takes a large data file of integers and creates a new csv in a different format, where it takes the <code>x,y,z</code> of 30 lines and merges them into one line.</p>
<p>The large dataset is formatted in (<code>timestamp, x,y,z</code>)</p>
<p>Ex:</p>
<pre><code>0.000, 5, 6, 8,

1.000, -6, 7, 9,

2.000, -15, 25, 23,
</code></pre>
<p>or:</p>
<pre><code>timestamp, x1, y1, z1

timestamp, x2, y2, z2

timestamp, x3, y3, z3
</code></pre>
<p>The new dataset would look like this:</p>
<pre><code>delta timestamp, x1, y1, z1, x2, y2, z2, x3, y3, z3....x30, y30, z30,

delta timestamp, x31, y31, z31, x32, y32, z32, x33,... x60, y60, z60,
</code></pre>
<p>etc.. (each line containing 30 <code>x,y,z</code>'s)</p>
<p>I thought of maybe appending a \n every 30 lines and then replacing each new line with a comma. And my code below doesn't work. It just puts an extra comma to where the new data looks like this:</p>
<pre><code>timestamp, x1, y1, z1,, timestamp, x2, y2, z2,, timestamp... 
</code></pre>
<p>Do you guys have any ideas?</p>
<pre><code>list = []
import csv
i=0
results = []
with open('bikefall.csv', newline='') as inputfile:
    for row in csv.reader(inputfile):
        i+=1
        if i%30==0:
            results.append(row)
            results.append('\n')
        else:
            results.append(row)

print("\n".join([item.replace('\n', ',') for item in 
open('bikefall.csv').read().split('\n\n')]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One approach would be to read your CSV file in blocks of <code>30</code> at a time. Then combine these rows. I have assumed <code>delta</code> is calculated by subtracting the first timestamp from the last timestamp in each block (another possibility would be difference between start of each block, so first would be 0?):</p>
<pre><code>from itertools import zip_longest
import csv

f_input = open('bikefall.csv', newline='')
f_output = open('output.csv', 'w', newline='')

with f_input, f_output:
    csv_input = csv.reader(f_input)
    csv_output = csv.writer(f_output)

    for rows in zip_longest(*[iter(csv_input)] * 30, fillvalue=None):
        rows = [[float(row[0])] + row[1:] for row in rows if row]
        delta = rows[-1][0] - rows[0][0]
        combined = [delta]

        for row in rows:
            combined.extend([row[1], row[2], row[3]])

        csv_output.writerow(combined)
</code></pre>
<p>The grouping is based on the itertools <a href="https://docs.python.org/3.6/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>grouper()</code></a> recipe in the Python documentation.            </p>
</div>
<div class="post-text" itemprop="text">
<p>I didn't know how you calculate your delta so I just put a placeholder function.</p>
<p>Regarding your code you can improve it a little using <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> so you don't have to update <code>i</code> manually.</p>
<p>You can also get the first 4 items of each row in a csv file using the <a href="https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation">slice notation</a>.</p>
<pre><code>import csv

def calculate_delta(timestamps):
    pass

output = ""

with open('bikefall.csv', "r") as inputfile:
    timestamps = []
    results = []
    for i, row in enumerate(csv.reader(inputfile)):
        timestamp, x, y, z = row[:4]
        timestamps.append(timestamp)
        results.extend((x, y, z))
        if len(timestamps) == 30:
            delta = calculate_delta(timestamps)
            str_timestamps = ", ".join(results)
            output += "{}, {}\n".format(delta, str_timestamps)
            timestamps = []
            results = []

print(output)
</code></pre>
<p>This code has a bug though, what happens when you only have 29 rows in your CSV?</p>
<p>Those 29 rows are going to get ignored, so you still need to check if the current row is the last one in the csv file, and process it accordingly.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a perfect job for <code>zip</code>. Here is a solution, much more pythonic than previous answers:</p>
<pre><code>with open('bikefall.csv') as inputfile:
    # version using csv reader
    matrix = [[line[0],','.join(line[1:])] for line in csv.reader(inputfile)]
    # version using standard text file reader
    #matrix = [line.strip().split(',', maxsplit=1) for line in inputfile]

stamps, coords = zip(*matrix) # split matrix into stamps and coords

for n in range(0, len(stamps), 30):
  print(','.join((stamps[n],) + coords[n:n+30]))
</code></pre>
<p>Note: thanks to the slice notation, the last line with possibly less than 30 items, is managed automagically.</p>
</div>
<span class="comment-copy">How is <code>delta timestamp</code> calculated? <code>timestamp30 - timestamp1</code> ?</span>
<span class="comment-copy">Each row contained the same elements and it seemed to be duplicating the previous row and constantly adding on 3 more x, y, z's, getting larger and larger. Am I doing something incorrectly?</span>
<span class="comment-copy">I tried to run your code and it created a csv file 10x as large as my original. It outputted a weird dataset.                                                     Ex: 0.387,-2,-3 0.387,-2,-3,-4,-5,  0.387,-2,-3,-4,-5,-6,-7 0.387,-2,-3,-4,-5,-6,-7,-8,-9 0.387,-2,-3,-4,-5,-6, -7,-8,-9,-10,-11</span>
<span class="comment-copy">Are you sure you copy / pasted the script the same? Make sure the indentation is identical.</span>
<span class="comment-copy">I ran your code and I came up with an error: AttributeError: 'list' object has no attribute 'split'. Am I missing something?</span>
<span class="comment-copy">@aval: it's not you, it's me! I wrote two versions (one using csv reader, and one using text file reader) and messed up when I copy/paste the lines. I've edited the code, including the two versions (the latter commented out) so you may choose which one you prefer</span>
