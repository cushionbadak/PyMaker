<div class="post-text" itemprop="text">
<p>I have written the following python code to remove the duplicates:</p>
<pre><code>lines_seen = set()
outfile = open("out.txt", "w")
for line in open("file.txt", "r"):
    if line not in lines_seen: 
        outfile.write(line)
        lines_seen.add(line)
outfile.close()
</code></pre>
<p>The code above functions correctly and removes the exact same duplicates, but I want to be able to remove duplicates that have 3 or more exact word matches from a line. For instance:</p>
<pre><code>The apple is red
The apple red
The banana is yellow
The apple is red
</code></pre>
<p>The output with the current code is: </p>
<pre><code>The apple is red
The apple red
The banana is yellow
</code></pre>
<p>But I want to remove the phrase 'The apple red' as well because it has 3 matching words in the line. I hope this makes sense. How do I write this in python? </p>
</div>
<div class="post-text" itemprop="text">
<p>A very simple approach that may do what you want is to iterate over a list of the sets of words that have been seen in each line so far:</p>
<pre><code>lines_seen = []
outfile = open("out.txt", "w")
for line in open("file.txt", "r"):
    words = set(line.split())
    for word_set in lines_seen:
        if len(words.intersection(word_set)) &gt;= 3:
            break
    else:
        outfile.write(line)
        lines_seen.append(words)
outfile.close()
</code></pre>
<p>yields</p>
<pre><code>The apple is red
The banana is yellow
</code></pre>
<p>Of course, this ignores some of the subtleties alluded to in the comments to your question. You may be better off with a specialized library such as <a href="https://docs.python.org/3.6/library/difflib.html" rel="nofollow noreferrer"><code>difflib</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at string distance functions:</p>
<ol>
<li>Hamming distance</li>
<li>Levenshtein distance</li>
<li>Jaroâ€“Winkler distance</li>
</ol>
<p>There are also Python packages for <a href="https://github.com/seatgeek/fuzzywuzzy" rel="nofollow noreferrer">fuzzy string matching</a> - I believe this one implements method 2. These aren't going to do the word matching like you mentioned, but the string distance is perhaps a more robust method of achieving your goal.</p>
</div>
<span class="comment-copy">Are the lines always like that? Or do they contain punctuation etc?</span>
<span class="comment-copy">I can think of ways to do this, but what happens is you have lines like: "The apple is red" and "The strawberry is red" - Technically they both have 3 words that match, should these be excluded too?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/difflib.html#difflib.get_close_matches" rel="nofollow noreferrer">difflib.get_close_matches</a>.</span>
<span class="comment-copy">@AntonvBR For starters like me, the lines are always like that with no punctuation.</span>
<span class="comment-copy">What about ["the apple is red", "the apple is", "the apple is yellow"]?</span>
<span class="comment-copy">I agree that the string distance is probably better, but all of these can be done at a word level, e.g. <code>from fuzzywuzzy import fuzz; print(fuzz.ratio("the apple is red".split(), "the apple is".split()))</code>.</span>
