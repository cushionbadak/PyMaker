<div class="post-text" itemprop="text">
<p>I wrote a small program in Python which output depends on the content of a few webpages. I have no control over these webpages and it could change in future. For so I am writing some tests.</p>
<p>I wrote an integration test and I am trying to write a <code>unittest</code> in which I mock the function scrapping the webpages. In my test the function is called twice and returns the content of two different webpages each time. This implies that I need to mock it with a function returning two different things. I am doing it the following way:</p>
<pre><code>def gen():
    yield open("search_content.dat","rb").read()
    yield open("feed_content.dat","rb").read()
content_generator = gen()
def FakeScrapper(*args, **kwargs):
    return next(content_generator)
</code></pre>
<p>and further</p>
<pre><code>@patch( "http.client.HTTPResponse.read", side_effect=FakeScrapper)
def test_mockscrapper(self, *args, **kwargs):
</code></pre>
<p>I am using a function wrapping a generator. It looks quite heavy and ugly to me. Is there a more pythonic way of doing so?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the generator straight away as a generator is an iterator and <a href="https://docs.python.org/3/library/unittest.mock.html#the-mock-class" rel="nofollow noreferrer">side effect accepts an iterator</a>: </p>
<blockquote>
<p>If side_effect is an iterable then each call to the mock will return
  the next value from the iterable</p>
</blockquote>
<p>In your example:</p>
<pre><code>@patch( "http.client.HTTPResponse.read", side_effect=gen())
def test_mockscrapper(self, *args, **kwargs):
</code></pre>
<p>Another simple example:</p>
<pre><code>import os

from mock import patch,Mock

def gen():
    yield 1
    yield 2

class SimpleTest():

    @patch('os.dir', Mock(side_effect=gen()))
    def test_gen(self):
        a = os.dir()
        b = os.dir()
        assert a == 1
        assert b == 2
</code></pre>
</div>
<span class="comment-copy">it should be <code>def test_mockscrapper(self, mock_read)</code> to me under <code>@patch</code> line, as long as you have control over the which file your read, it is great!</span>
<span class="comment-copy">Many thanks. I did not know side_effect could be a generator. Good design flexibility.</span>
