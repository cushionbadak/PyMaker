<div class="post-text" itemprop="text">
<p>I just wanted to know if there is a way to improve this for loop, by skipping those if somehow.</p>
<p>Var <code>String</code> can have more parameters and their order can be casual.<br/>
In order to replace the param with a real value, I need :  </p>
<ol>
<li>To split it </li>
<li>To check what parameter is and in which position </li>
</ol>
<p>Here is a synthetic example on how I thought it:</p>
<pre><code>String = "{FullDate}_{Month}_{Day}_{Year}_{ElementID}_{ElementCD}"
String_split = String.split("_")

for params in range(len(String_split)):

    if "FullDate" in String_split[params]:
        # Do something
    elif "Name" in String_split[params]:
        # Do something
    elif "ElementID" in String_split[params]:
        # Do something
    elif "ElementCD" in String_split[params]:
        # Do something
    elif "Year" in String_split[params]:
        # Do something
    elif "Day" in String_split[params]:
        # Do something
    elif "Month" in String_split[params]:
        # Do something
</code></pre>
<p>UPDATE: That's what i would like to accomplish</p>
<pre><code># Default values
FullDate = now().format("yyyy-MM-dd_HH:mm:ss")
Name = "John"
ElementID = "Apple"
ElementCD = "01Appxz"
Year = now().format("yyyy")
Day = now().format("dd")
Month = now().format("MM")
############################

String = "{FullDate}_{Month}_{Day}_{Year}_{ElementID}_{ElementCD}"
String_split = String.split("_")

for params in range(len(String_split)):

    if "FullDate" in String_split[params]:
        Report_Name = Report_Name + FullDate + "_"
    elif "Name" in String_split[params]:
        Report_Name = Report_Name + Name + "_"
    elif "ElementID" in String_split[params]:
        Report_Name = Report_Name + ElementID + "_"
    elif "ElementCD" in String_split[params]:
        Report_Name = Report_Name + ElementCD + "_"
    elif "Year" in String_split[params]:
        Report_Name = Report_Name + Year + "_"
    elif "Day" in String_split[params]:
        Report_Name = Report_Name + Day + "_"
    elif "Month" in String_split[params]:
        Report_Name = Report_Name + Month + "_"

# Report_Name must return default values, ordered by String variable (eg: FullDate, 1st position; Month 2nd position etc..)
# &gt;&gt; "1999-01-01_10:10:29_01_01_1999_Apple_01Appxz"
# if the String variable changes the params order to
# String = "{Year}_{Month}_{ElementCD}_{FullDate}_{ElementID}_{Day}"
# Report_Name should return
# &gt;&gt; "1999_01_01Appxz_1999-01-01_10:10:29_Apple_01"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<hr/>
<p><strong>Before reading</strong>:<br/>
 - This is a solution that, as you mentionned, don't use dictionary</p>
<hr/>
<p><strong>Solution</strong></p>
<p>With:</p>
<pre><code>#Default values
FullDate = '2010-01-01_00:00:00'
Name = "John"
ElementID = "Apple"
ElementCD = "01Appxz"
Year = '2010'
Day = '01'
Month = '01'
#--

String = "{FullDate}_{Month}_{Day}_{Year}_{ElementID}_{ElementCD}"
</code></pre>
<p>You can do this without <code>for</code> loop, just replacing as required:</p>
<pre><code>Report_Name = '.RName_' + String
if "FullDate" in Report_Name:
    Report_Name = Report_Name.replace('{FullDate}',FullDate)
if "Name" in Report_Name:
    Report_Name = Report_Name.replace('{Name}',Name)
#...
if "ElementCD" in Report_Name:
    Report_Name = Report_Name.replace('{ElementCD}',ElementCD)

print(Report_Name)
.RName_2010-01-01_00:00:00_..._01Appxz
</code></pre>
<hr/>
<p><strong>[Be carefull] Another solution</strong></p>
<p>Or maybe you can use <code>.eval()</code> (see <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer">documentation</a>) to evaluate variable from its name. It requires that <code>parameters</code> and <code>variables</code> name are the same.<br/>
Here is a way to do this:</p>
<pre><code>import re
Parameters = [re.sub('[{-}]+', '', s) for s in String.split('_')]

Report_Name = '.RName_' + String
for p in Parameters:
    Report_Name = Report_Name.replace('{%s}'%p,eval(p))

print(Report_Name)
.RName_2010-01-01_00:00:00_01_01_2010_Apple_01Appxz
</code></pre>
<p>Be aware that you should use <code>.eval()</code> <strong>carefully</strong> - <a href="https://stackoverflow.com/a/1832957/3941704">see Why is using eval a bad practice</a><br/>
Check alternatives to this solution - <a href="https://stackoverflow.com/a/7969953/3941704">using <code>globals/locals/vars</code></a> for instance - if :  </p>
<ul>
<li>You want a similar behaviour</li>
<li>You think it is not safe enough for your problem</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<ul>
<li>Use <code>for name in names</code> to remove all your <code>String_split[params]</code> noise.</li>
<li>Remove the <code>{}</code> from your variables so you can use <code>==</code> rather than <code>in</code>.</li>
<li>Use <code>+=</code>.</li>
</ul>
<p>This gets:</p>
<pre><code>names = "FullDate Month Day Year ElementID ElementCD".split()
for name in names:
    if "FullDate" == name:
        Report_Name += FullDate + "_"
    elif "Name" == name:
        Report_Name += Name + "_"
    elif "ElementID" == name:
        Report_Name += ElementID + "_"
    elif "ElementCD" == name:
        Report_Name += ElementCD + "_"
    elif "Year" == name:
        Report_Name += Year + "_"
    elif "Day" == name:
        Report_Name += Day + "_"
    elif "Month" == name:
        Report_Name += Month + "_"
</code></pre>
<p>You should also learn how to use format strings and the <code>**</code> operator. If you change your <code>FullDate</code> stuff to a dictionary then you can use:</p>
<pre><code>REPORT_FORMAT = '{FullDate}_{Month}_{Day}_{Year}_{ElementID}_{ElementCD}'

report = {
    'FullDate': now().format("yyyy-MM-dd_HH:mm:ss")
    'Name': "John"
    'ElementID': "Apple"
    'ElementCD': "01Appxz"
    'Year': now().format("yyyy")
    'Day': now().format("dd")
    'Month': now().format("MM")
}
report_name = REPORT_FORMAT.format(**report)
</code></pre>
</div>
<span class="comment-copy">In general, your approach is OK (Python doesn't have a <code>switch/case</code> statement, so using  <code>if/elif</code> or <code>if/if</code> chains for this is perfectly pythonic). If your <code>do something</code> statement is very similar (e. g. always the same function with different parameters), then you could use a dictionary to do the switching, but readability would probably suffer.</span>
<span class="comment-copy">I'd say <code>for param in String_split:</code> as a starter. But depending on what "Do something" means there could be much more room for optimization.</span>
<span class="comment-copy">The optimization may be there but your approach is OK.</span>
<span class="comment-copy">Reading the question as a whole leads me to believe that this is an XY problem. What are you actually trying to achieve? If all you are trying to do is format the string with arbitrary variables there are better ways to do so.</span>
<span class="comment-copy">If you have <i>working code</i> that you'd like to improve on topics such as readability, maintainability, compatibility, and/or speedability, ask on <a href="https://codereview.stackexchange.com">Code Review</a>.</span>
