<div class="post-text" itemprop="text">
<p>I have an integer representing a UTC hour and I have a UTC offset of a timezone. How can I get the equivalent hour for that timezone? So for example:</p>
<pre><code>date = "Fri Dec 01 12:06:35 +0000 2017"
utc = "-18000"
ts = datetime.strptime(date, '%a %b %d %H:%M:%S +0000 %Y')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're using a <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer"><code>datetime</code></a> object, this is super easy:</p>
<pre><code>local_datetime_obj = utc_datetime_obj + datetime.timedelta(seconds=offset)
</code></pre>
<p>Or, since your <code>offset</code> is currently a string, use <code>int(offset)</code> there.</p>
<p>The <em>right</em> solution would be to create a timezone-aware local <code>datetime</code> object out of the UTC <code>datetime</code> object and a timezone object. But that can be difficult if you only have a number offset rather than a full timezone name or object (which seems to be the same), or if you don't have a timezone database installed, etc., so I won't get into details here.</p>
<hr/>
<p>If you're using raw timestamps, you need to divide by to convert offset in seconds to offset in hours:</p>
<pre><code>local_hour = (utc_hour + offset/3600) % 24
</code></pre>
<p>But this will cause problems in many cases. For example, what if you're on a half-hour timezone and the time is in the middle of an hour? What if today includes a DST transition? You can solve this by adding in math on minutes and seconds and days as well as hours, and looking up the isdst, and so on… but why do all that work when <code>datetime</code> does it for you (and has been heavily tested)?</p>
<hr/>
<p>If you're using a <code>time.struct_tm</code>, as in an earlier edit of your question, you basically have to pull all the values out and do the same math as the last version, because it doesn't have enough functionality to be useful. Or just don't use <code>struct_tm</code> and use <code>datetime</code> instead (as you noticed, they have equivalent <code>strptime</code> functions, so they're just as easy to create).</p>
</div>
<span class="comment-copy">Do you need to do all your datetime processing manually instead of using a <code>datetime</code> object? Because that would be a lot easier.</span>
<span class="comment-copy">Nope I dont. I thought doing manually would be easier. I actually have the datetime object as well.</span>
<span class="comment-copy">You're using <code>time</code> there, not <code>datetime</code>. The <code>time</code> module is much less powerful; it basically just simulates the C standard library instead of offering an actually useful interface.</span>
<span class="comment-copy">Fixed. Same function though.</span>
<span class="comment-copy">Same API, but it returns a different object with a much weaker interface, which makes a big difference. For example, you can't subtract a <code>timedelta</code> from a <code>struct_time</code>, which is the one-liner (and idiomatic, correct, and efficient) way to solve this.</span>
<span class="comment-copy">I think you mean to put an <code>=</code> there instead of the dash.</span>
<span class="comment-copy">@ninesalt We want to subtract an offset, not throw away the old value and keep nothing but a delta around. I'll edit to make it clearer that we're doing something with the result of that subtraction, though.</span>
<span class="comment-copy">Shouldn't it be added rather that subtraced? The given time is already in UTC, im trying to convert it to the local time, not the other way around.</span>
<span class="comment-copy">@ninesalt Ah, I thought you had a local time and wanted a UTC time; yeah, the other way around is the other way around. I'll edit it.</span>
<span class="comment-copy">Yeah sorry, my wording was a little vague.</span>
