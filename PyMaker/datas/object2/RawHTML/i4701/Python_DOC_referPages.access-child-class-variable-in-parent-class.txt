<div class="post-text" itemprop="text">
<p>Is it correct to access variables from a child class in a parent class? Is this a good OOP approach? I don't need to create instances of Animal class, but if I will, the <code>make_sound</code> method will raise <code>AttributeError</code>, which is bothering me.</p>
<pre><code>class Animal:
    def make_sound(self):
        print(self.sound)

class Cat(Animal):
    sound = 'meow'

class Dog(Animal):
    sound = 'bark'

cat = Cat()
cat.make_sound()

dog = Dog()
dog.make_sound()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's nothing inherently wrong with this approach. It really depends on the scope and significance of this class, and where its being used. Building a parent class to use implicitly defined attributes is quick, and in many cases perfectly OK. But, sometimes those implicit attributes can get out of hand, and you might want to ensure that anyone making new subclasses <em>has</em> to define those attributes.</p>
<p>There are a couple approaches to this. Some of this may not work depending on what version of Python you are using. I believe the usage of ABC like this works in Python 3.4+.</p>
<p>Python (and many OO languages) have the concept of an <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">Abstract Base Class</a>. This is a class that can never be instantiated, and it enforces that any subclasses must implement methods or properties defined as abtract in order to be instantiated. </p>
<p>Here's how you could provide a <code>make_sound</code> method, and still be 100% sure that anyone subclassing Animal is indeed making that sound.</p>
<pre><code>from abc import ABC, abstractmethod


class Animal(ABC):

    def make_sound(self):
        print(self.sound)

    @property
    @abstractmethod
    def sound(self):
        """ return the sound the animal makes """


class Dog(Animal):

    @property
    def sound(self):
        return "bark"


class Cat(Animal):

    sound = "meow"


class Thing(Animal):
    """ Not an animal """

dog = Dog()
dog.make_sound()
cat = Cat()
cat.make_sound()
# thing = Thing()   this will raise a TypeError, complaining that its abstract
# animal = Animal()   as will this
</code></pre>
<p>This shows the many different ways to do this. Using the <code>@property</code> decorator allows you to set instance variables, or more complex logic, that affect it. Setting sound in the class is (somewhat) like setting a static member in a Java class. Since all cats meow, this probably makes sense in this case.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, this is good OOP. You could inherit from the parent, and simply make methods in the parent class that you would call in an instance for the Cat or Dog class, so that you could add nothing to the Cat/Dog class: for example:</p>
<pre><code>class Animal():
    def make_sound(self):
        print(self.sound)

    def make_dog_sound(self):
        print('bark')

    def make_cat_sound(self):
        print('meow')

class Cat(Animal):
      pass

class Dog(Animal):
    pass

cat = Cat()
cat.make_cat_sound()
</code></pre>
<p>But what you did is also correct. </p>
</div>
<span class="comment-copy">This is exactly what you are supposed to do. If a possible AttributeError bothers you, set sound to a default in Animal, even if it's None.</span>
<span class="comment-copy">Great explanation! Thank you</span>
<span class="comment-copy">Please update to remove the deprecated use of @abstractproperty.  <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">docs.python.org/3/library/abc.html</a></span>
<span class="comment-copy">ignore... i have enough points to do this myself now...</span>
<span class="comment-copy">I got your point, but in your example, the cat will be able to bark, which is a little bit weird</span>
<span class="comment-copy">I do this sometimes simply if I have multiple similar methods (like 'sound'). Haha it would be weird for a cat to park. But in order to cut down on confusion, I'll add a lot of methods to the parent class if the methods are similar, in order to cut down on confusion for me personally. The way you did it is fine as well.</span>
