<div class="post-text" itemprop="text">
<p>I would like to put an <code>int</code> into a <code>string</code>. This is what I am doing at the moment:</p>
<pre><code>num = 40
plot.savefig('hanning40.pdf') #problem line
</code></pre>
<p>I have to run the program for several different numbers, so I'd like to do a loop. But inserting the variable like this doesn't work:</p>
<pre><code>plot.savefig('hanning', num, '.pdf')
</code></pre>
<p>How do I insert a variable into a Python string?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>plot.savefig('hanning(%d).pdf' % num)
</code></pre>
<p>The <code>%</code> operator, when following a string, allows you to insert values into that string via format codes (the <code>%d</code> in this case). For more details, see the Python documentation:</p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="noreferrer">https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Oh, the many, many ways...</p>
<p>String concatenation:</p>
<pre><code>plot.savefig('hanning' + str(num) + '.pdf')
</code></pre>
<p>Conversion Specifier:</p>
<pre><code>plot.savefig('hanning%s.pdf' % num)
</code></pre>
<p>Using local variable names:</p>
<pre><code>plot.savefig('hanning%(num)s.pdf' % locals()) # Neat trick
</code></pre>
<p>Using <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="noreferrer"><code>str.format()</code></a>:</p>
<pre><code>plot.savefig('hanning{0}.pdf'.format(num)) # Note: This is the new preferred way
</code></pre>
<p>Using f-strings:</p>
<pre><code>plot.savefig(f'hanning{num}.pdf') # added in Python 3.6
</code></pre>
<p>Using <a href="https://docs.python.org/3/library/string.html#string.Template" rel="noreferrer"><code>string.Template</code></a>:</p>
<pre><code>plot.savefig(string.Template('hanning${num}.pdf').substitute(locals()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="noreferrer">the introduction of formatted string literals</a> ("f-strings" for short) in Python 3.6, it is now possible to write this with a briefer syntax:</p>
<pre><code>&gt;&gt;&gt; name = "Fred"
&gt;&gt;&gt; f"He said his name is {name}."
'He said his name is Fred.'
</code></pre>
<p>With the example given in the question, it would look like this</p>
<pre><code>plot.savefig(f'hanning{num}.pdf')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not sure exactly what all the code you posted does, but to answer the question posed in the title, you can use + as the normal string concat function as well as str().  </p>
<pre><code>"hello " + str(10) + " world" = "hello 10 world"
</code></pre>
<p>Hope that helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>In general, you can create strings using:</p>
<pre><code>stringExample = "someString " + str(someNumber)
print(stringExample)
plot.savefig(stringExample)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had a need for an extended version of this: instead of embedding a single number in a string, I needed to generate a series of file names of the form 'file1.pdf', 'file2.pdf' etc. This is how it worked:</p>
<pre><code>['file' + str(i) + '.pdf' for i in range(1,4)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you would want to put multiple values into the string you could make use of <code>format</code></p>
<pre><code>nums = [1,2,3]
plot.savefig('hanning{0}{1}{2}.pdf'.format(*nums))
</code></pre>
<p>Would result in the string <code>hanning123.pdf</code>. This can be done with any array.</p>
</div>
<span class="comment-copy">Note that the <code>%</code> operator is deprecated as of Python 3.1.  The new preferred way is to make use of the <code>.format()</code> method as discussed in <a href="https://www.python.org/dev/peps/pep-3101/" rel="nofollow noreferrer">PEP 3101</a> and mentioned in Dan McDougall's answer.</span>
<span class="comment-copy">To use the format string operator with multiple arguments, one can use a tuple as operand: <code>'foo %d, bar %d' % (foo, bar)</code>.</span>
<span class="comment-copy">Your neat trick kind of works with the new format syntax too: <code>plot.savefig('hanning{num}s.pdf'.format(**locals()))</code></span>
<span class="comment-copy">With the introduction of f-strings in Python 3.6, this can now be written as <code>plot.savefig(f'hanning{num}.pdf')</code>. I added an answer with this info.</span>
<span class="comment-copy">It appears that <a href="https://stackoverflow.com/a/47023489/3357935">f-strings are compatible with multiline strings</a>.</span>
<span class="comment-copy">While this answer is correct building strings with <code>+</code> should be avoided as its extremely expensive</span>
