<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks">How do you split a list into evenly sized chunks?</a>
<span class="question-originals-answer-count">
                    57 answers
                </span>
</li>
</ul>
</div>
<p>The split method for strings only takes a parameter for the delimiter, but how do I easily split by every (or every other, etc) letter? This method works to split by every letter, but seems clumsy for a simple task.</p>
<pre><code>a=' '.join(string.ascii_lowercase).split()
</code></pre>
<p>I suppose a function could do this:</p>
<pre><code>def split_index(string,index=1):
    split=[]
    while string:
        try:
            sect = string[:index]
            string = string[index:]
            split.append(sect)
        except IndexError:
            split.append(string)
    return split

print(split_index('testing'))   # ['t', 'e', 's', 't', 'i', 'n', 'g']
print(split_index('testing',2)) # ['te', 'st', 'in', 'g']
</code></pre>
<p>I am surprised if no one has wished for this before, or if there is not a simpler built in method. But I have been wrong before. If such a thing is not worth much, or I have missed a detail, the question can be deleted/removed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Strings are iterables of characters, so splitting it into characters is as simple as iterating over it. One way of doing that is just giving it to the <code>list()</code> built-in:</p>
<pre><code>list("testing") # ['t', 'e', 's', 't', 'i', 'n', 'g']
</code></pre>
<p>The docs also provide a recipe for a <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>grouper()</code></a> method that will take an iterable and group it into chunks of the given size, as strings are iterables, this just works on them. This can be very efficient as it is lazy and utilises the fast <code>itertools</code> functions:</p>
<pre><code>import itertools

def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return itertools.zip_longest(*args, fillvalue=fillvalue)
</code></pre>
<p>E.g:</p>
<pre><code>groups = list(grouper("testing", 2)) # [('t', 'e'), ('s', 't'), ('i', 'n'), ('g', None)]]
["".join(char for char in group if char) for group in groups] # ['te', 'st', 'in', 'g']
</code></pre>
<p>Obviously, if you are just iterating over the characters, you don't need to make a list - just iterate straight over the string or the <code>grouper()</code> iterable. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can try doing it this way:</p>
<pre><code>string = "testing"

def splitByN(string,n):
    return [string[i:i+n] for i in range(0,len(string),n)]

print(splitByN(string,2))
</code></pre>
<p>Output:</p>
<pre><code>['te', 'st', 'in', 'g']
</code></pre>
</div>
<span class="comment-copy">@abccd The OP doesn't show a knowledge that strings are iterable, which is required to understand that answer is applicable to this question.</span>
<span class="comment-copy">@abccd You're likely right, in a way. I did not see that question in my searching, because the wording is different. Also, I do not think that I would have realized, by looking at it, that it asks the same thing.</span>
<span class="comment-copy">I introduced the topic of splitting into sections of more than one character, since I thought that would help me find an answer.</span>
<span class="comment-copy">The <code>list()</code> function is what I was looking for. I think I have seen it used that way before, but hadn't registered it well enough. But thank you for the other information as well.</span>
<span class="comment-copy">I realize that I did not think of it that a string is an iterable. This question will be flagged as duplicate of <a href="https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks">this</a></span>
<span class="comment-copy">Thank you, that is much better than the function I suggested.</span>
<span class="comment-copy">@derz00 You're welcome.</span>
