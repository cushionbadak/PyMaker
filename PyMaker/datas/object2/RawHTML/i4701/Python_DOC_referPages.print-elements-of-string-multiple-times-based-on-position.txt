<div class="post-text" itemprop="text">
<p>I'm trying to print each element individually, which is fine but also repeat each element based on position eg. "abcd" = A-Bb-Ccc-Dddd etc</p>
<p>So my problems are making print statements print x times based off their position in the string. I've tried a few combinations using len and range but i often encounter errors because i'm using strings not ints.</p>
<p>Should i be using len and range here? I'd prefer if you guys didn't post finished code, just basically how to go about that specific problem (if possible) so i can still go about figuring it out myself. </p>
<pre><code>user_string = input()

def accum(s):
    for letter in s:
        pos = s[0]
        print(letter.title())
        pos = s[0 + 1]

accum(user_string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can enumerate iterables (lists, strings, ranges, dictkeys, ...) - it provides the index and a value:</p>
<pre><code>text = "abcdef"
for idx,c in enumerate(text):        
    print(idx,c)
</code></pre>
<p>Output:</p>
<pre><code>(0, 'a')
(1, 'b')
(2, 'c')
(3, 'd')
(4, 'e')
(5, 'f')
</code></pre>
<p>You can use that to print something multiple times. The print command takes 2 optional parameters :</p>
<pre><code>print("Bla","blubb", sep=" ---&gt;", end=" Kawumm\n")
</code></pre>
<p>Output:</p>
<pre><code>Bla ---&gt;blubb Kawumm
</code></pre>
<p>that specify what is printed between outputs and on the end of output - you can specify an <code>end=""</code> - so you can continue printing on the same line. </p>
<p>Doku:  </p>
<ul>
<li><a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">Print</a></li>
<li><a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">Enumerate</a></li>
</ul>
<hr/>
<p>Edit:</p>
<pre><code>user_string = input() 

def accum(s):
    t = []  # list to store stuff into
    for count, letter in enumerate(s): 
        total = letter.upper() + letter * (count) # 1st as Upper, rest as is
        t.append(total)  # add to list
    print(*t, sep="-")   # the * "unpacks" the list into its parts

accum(user_string)
</code></pre>
<p>Unpacking:</p>
<pre><code>print( [1,2,3,4,5], sep=" +++ ")  # its just 1 value to print, no sep needed
print(*[1,2,3,4,5], sep=" +++ ")  # 5 values to print, sep needed 
</code></pre>
<p>Output:</p>
<pre><code>[1, 2, 3, 4, 5] 
1 +++ 2 +++ 3 +++ 4 +++ 5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try having a counter that will increase by 1 as the loop traverses through the string. Then, within the loop that you currently have, have another for loop to loop the size of the counter. If you want it to print out the first letter capitalized then you will need to account for that along with the dashes. </p>
</div>
<span class="comment-copy">user_string = input()      def accum(s):         for count, letter in enumerate(s):             total = letter.title() * (count + 1)             print(total.title(), sep="-", end=" ")               accum(user_string) got everything but "sep" to work for some reason, thank you for the help!</span>
<span class="comment-copy">Ahh thank you so much! had no idea about the *t thing</span>
