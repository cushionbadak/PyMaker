<div class="post-text" itemprop="text">
<p>Trying to take an integer and return it from the function as an descending integer.</p>
<p>I did it first like this:</p>
<pre><code>def Descending_Order(num):
    n = str(num)
    return(int(n[::-1]))
</code></pre>
<p>Because the tests only had numbers that were in descending order; kinda cheezy but hey it worked.. Now I want to do a number that is any number and make it return the largest to smallest number.</p>
<p>As you can see i tried to dump the int into a string (n) and manipulate it like an array I suppose.</p>
<p>EG:</p>
<p>1201 would return 2110</p>
<pre><code>def Descending_Order(num):
    n = str(num)
    i = 0
    swap = 0

    while i &lt; len(n):
        if i+1&gt;len(n):
            break
        elif n[i] &lt; n[i+1]:
            swap = n[i]
            n[i]= n[i+1]
            n[i+1]=swap
            i+=1
        else:    
            i+=1
    return(n)

print(Descending_Order(1201))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Strings are iterable so you can pass them into <code>sorted</code> like so:</p>
<pre><code>def largest_number(num):
    num = str(num)
    ordered = ''.join(sorted(num, reverse=True))
    return int(ordered)

largest_number(87491)
&gt;&gt; 98741
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a> returns a list, so <code>sorted('87491', reverse=True)</code> will return:</p>
<pre><code>['9', '8', '7', '4', '1']
</code></pre>
<p>Passing the list into <a href="https://stackoverflow.com/a/1876206/3407256"><code>join</code></a>(link to explanation of the join method) will return:</p>
<pre><code>'98741'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As other answers noted, this is a sorting problem.  You could use the built in sorting function, but that can take a (relatively) long time, and if you are just starting out, it can be good to write your own implementations rather than rely on library magic.  </p>
<p>Because we are only sorting integers between 0 and 9, we can use a faster sorting algorithm than the timsort that python's <code>sorted</code> uses.  </p>
<p>What we do is count the number of occurrences of each digit.  We then construct a number with as many 9s as the we found in the original, then 8s... until 0.  </p>
<pre><code>def Decending_Order(num):
    arr = [0,0,0,0,0,0,0,0,0,0]
    res = []
    for i in str(num):
        arr[int(i)] += 1
    for i in range(0,9):
        while arr[i] &gt; 0:
            res.append(str(i))
            arr[i] -= 1
    return res.reverse()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A nice one-liner (Basically the same as above: turns into a string, reverse sorts it, back into int): </p>
<pre><code>def largest_num (num): return int (sorted (str (num), reverse = True))
</code></pre>
</div>
<span class="comment-copy">You just have to sort the numbers in ascending order and then just reverse it. That way you'll get the largest number that can be formed with the given number.</span>
<span class="comment-copy">b.sort(key=lambda x: int(x), reverse=True)</span>
<span class="comment-copy">Have you timed your function and mine?</span>
<span class="comment-copy">Also python is a high level language so it's probably better to promote library magic.</span>
<span class="comment-copy">Python is a high level language, but we should still be mindful of how our programs scale.  Timsort runs in O(n log n) worst case and average case, while counting sort runs in O(n) worst and average.  I timed the two functions and the built in sort ran faster for inputs up to size 100000.  But the built in sort likely relies on real, fast arrays rather than lists, etc.</span>
<span class="comment-copy">I guess my point is that as someone learns to code, it is more important to learn how to approach a problem correctly and construct a good solution than it is to know how to call the libraries.</span>
<span class="comment-copy">As the OP mentions they are a novice (at least to python) providing a one-liner will not teach them good code writing etiquette, and will make the code unclear to them, especially not without any sort of explanation</span>
<span class="comment-copy">@LeviLesches I recommend you read some <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">python conventions</a> :)</span>
<span class="comment-copy">@GiantsLoveDeathMetal yah I'm not known for readability; My motto is: "EVERYTHING ON ONE LINE!"</span>
