<div class="post-text" itemprop="text">
<p>I'm trying to mock the return value of a MagicMock instance's function, but the result doesn't go as I expected:</p>
<pre><code>&gt;&gt;&gt; f = mock.MagicMock() # =&gt; &lt;MagicMock id='139903823124048'&gt;
&gt;&gt;&gt; g = mock.MagicMock() # =&gt; &lt;MagicMock id='139903823522512'&gt;
&gt;&gt;&gt; f.goo.return_value = g 
&gt;&gt;&gt; g                    # =&gt; &lt;MagicMock name='mock.goo()' id='139903823522512'&gt;
</code></pre>
<p>Instance g hasn't changed but its name changes?
And when I try:</p>
<pre><code>&gt;&gt;&gt; f.goo(1,2)
&gt;&gt;&gt; g.zoo('a')
&gt;&gt;&gt; f.goo(3,4)
&gt;&gt;&gt; f.goo.assert_has_calls([call(1,2), call(3,4)])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/home/lando/.local/lib/python2.7/site-packages/mock/mock.py", line 969, in assert_has_calls
    ), cause)
  File "/home/lando/.local/lib/python2.7/site-packages/six.py", line 737, in raise_from
    raise value
AssertionError: Calls not found.
Expected: [call(1, 2), call(3, 4)]
Actual: [call(1, 2), call().zoo('a'), call(3, 4)]
</code></pre>
<p>Why does g's call become a part of f.goo's call?
Even:</p>
<pre><code>&gt;&gt;&gt; f.goo.call_args_list # =&gt; [call(1, 2), call(3, 4)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This behaviour not very intuitive, but is per expectation.
See-</p>
<p><a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_has_calls" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_has_calls</a>
<a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.mock_calls" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.mock_calls</a></p>
<p>The calls to the returned values are also tracked in the mock_calls.</p>
<p>Use the <code>any_order</code> flag.</p>
</div>
<span class="comment-copy">So mock simply keeps track of all calls to itself as well as its method calls and attributes (according to method_calls), in a recursive way. And the assignment to return_value can be considered as an attachment to one of the "branches" of the hierarchical calls. That's what I understand. For the f.goo, the calls are not sequential so I can hardly use the  any_order flag. Anw, thanks for answering.</span>
