<div class="post-text" itemprop="text">
<p>What's <strong>the shortest</strong> way to call a function asyncronously?</p>
<p>The user should always be able to input a new value; 
But each action() must be queued</p>
<pre><code>def action(i):
   #takes a long time to be achieve

while True:
    i = raw_input("Input your value: ")
    action(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use Multiprocessing module:</p>
<pre><code>from multiprocessing import Pool

def action(i):
   #takes a long time to be achieve

worker_pool = Pool(processes=1)
while True:
    i = raw_input("Input your value: ")
    result = worker_pool.apply_async(action, [i], callback)
</code></pre>
<p>You can also use celery for background tasks:</p>
<pre><code>@celery_app.task(bind=True,max_retries=None)
def action(i):
   #takes a long time to be achieve

while True:
    i = raw_input("Input your value: ")
    action.apply_async(args=[i])
</code></pre>
<ul>
<li><a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing" rel="nofollow noreferrer">https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing</a></li>
<li><a href="http://docs.celeryproject.org/en/latest/" rel="nofollow noreferrer">http://docs.celeryproject.org/en/latest/</a></li>
</ul>
</div>
<span class="comment-copy">That depends on what kind of asynchronous programming model you're thinking about. Probably threading in this case, but there are many other possibilities too, and which one is most appropriate depends on what you need really.</span>
<span class="comment-copy">@deceze the shortest / easiest to understand / fastest to code.</span>
<span class="comment-copy">It depends on what those functions do. Will you have to worry about shared resources and deadlocks? About managing your computer's resources, i.e. only launching as many threads as your CPU can handle in parallel and queue up other functions after that? There is no one easy answer.</span>
<span class="comment-copy">ok, more precisely: the user should always be able to input a new value; But each action() could be queued.</span>
