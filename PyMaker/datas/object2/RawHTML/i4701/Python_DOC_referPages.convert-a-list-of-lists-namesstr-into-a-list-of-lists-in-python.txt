<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1373164/how-do-i-create-a-variable-number-of-variables">How do I create a variable number of variables?</a>
<span class="question-originals-answer-count">
                    16 answers
                </span>
</li>
</ul>
</div>
<p>I am new to python and I have search a lot about this issue. I know there is a way of converting tuples to a list, but somehow it doesn't work for me. Here is my issue.</p>
<p>Say I have:</p>
<pre><code>l_1 = ['a','b','c']
l_2 = ['e','f','g']
l_3 = ['g','h','i']
</code></pre>
<p>Then say I have another list of:</p>
<pre><code>l_all = ['l_1','l_2','l_3']
</code></pre>
<p>How can I convert it(l_all) to a list of </p>
<pre><code>[['a','b','c'],['e','f','g'],['g','h','i']]
</code></pre>
<p>I tried ast package using ast.literal_eval, but I received this error:</p>
<blockquote>
<p>ValueError: malformed node or string: &lt;_ast.Name object at
  0x00000172CA3C5278&gt;</p>
</blockquote>
<p>I also tried to use json package, still no luck.</p>
<p>I tried just output <code>ast.literal_eval('l_1')</code>, not working either.</p>
<p>I'd really appreciate if anyone can help on this.</p>
<p>Thanks a lot!</p>
</div>
<div class="post-text" itemprop="text">
<p>That sounds like a problem that should be fixed upstream</p>
<p><code>ast.literal_eval</code> evaluates <em>literals</em>. <code>eval</code> is just 1) cheating and 2) so dangerous I wouldn't recommend it at all.</p>
<p>Anyway, you could scan global then local variables using global &amp; local dicts in a list comprehension:</p>
<pre><code>l_1 = ['a','b','c']
l_2 = ['e','f','g']
l_3 = ['g','h','i']
l_all = ['l_1','l_2','l_3']

l_all = [globals().get(x,locals().get(x)) for x in l_all]
</code></pre>
<p>result:</p>
<pre><code>[['a', 'b', 'c'], ['e', 'f', 'g'], ['g', 'h', 'i']]
</code></pre>
<p><code>globals().get(x,locals().get(x))</code> is a quick &amp; dirty code to first look in global vars &amp; fallback to local vars if not found. It could be overcomplicated for your needs.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a dictionary to store the list names and each associated list:</p>
<pre><code>d = {'l_2': ['e', 'f', 'g'], 'l_3': ['g', 'h', 'i'], 'l_1': ['a', 'b', 'c']}
l_all = ['l_1','l_2','l_3']
final_results = [d[i] for i in l_all]
</code></pre>
<p>Output:</p>
<pre><code>[['a', 'b', 'c'], ['e', 'f', 'g'], ['g', 'h', 'i']]
</code></pre>
<p>However, to actually access the lists via variable name, you would have to use <code>globals</code>:</p>
<pre><code>l_1 = ['a','b','c']
l_2 = ['e','f','g']
l_3 = ['g','h','i']
l_all = ['l_1','l_2','l_3']
new_l = [globals()[i] for i in l_all]
</code></pre>
<p>Output:</p>
<pre><code>[['a', 'b', 'c'], ['e', 'f', 'g'], ['g', 'h', 'i']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply do:</p>
<pre><code>l_1 = ['a','b','c']
l_2 = ['e','f','g']
l_3 = ['g','h','i']
l_all = ['l_1','l_2','l_3']

print(list(map(lambda x:globals()[x],l_all)))
</code></pre>
<p>output:</p>
<pre><code>[['a', 'b', 'c'], ['e', 'f', 'g'], ['g', 'h', 'i']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Then say I have another list of:</p>
<p><code>l_all = ['l_1','l_2','l_3']</code></p>
</blockquote>
<p>Let's say you don't create this using strings, and use the  list variables directly </p>
<p>You can then get the wanted output</p>
<pre><code>l_all = [l_1,l_2, l_3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer"><code>locals()</code></a></p>
<pre><code>l_1 = ['a','b','c']
l_2 = ['e','f','g']
l_3 = ['g','h','i']

l_all = ['l_1', 'l_2', 'l_3']

all_local_variables = locals()
l_all_values = [all_local_variables[i] for i in l_all]
</code></pre>
<p>And you should be aware that you can get <code>KeyError</code> if no such variable present in current scope, for that you can <code>all_local_variables.get(i)</code>, that will return <code>None</code> if not present or set default as <code>all_local_variables.get(i, 'default')</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way to do this is to evaluate your strings in l_all. Something like this</p>
<pre><code>&gt;&gt;&gt; l_1 = ['a','b','c']
&gt;&gt;&gt; l_2 = ['e','f','g']
&gt;&gt;&gt; l_3 = ['g','h','i']
&gt;&gt;&gt; l_all = ['l_1','l_2','l_3']
&gt;&gt;&gt; [ eval(x) for x in l_all ]
</code></pre>
<p>The output is</p>
<pre><code>[['a', 'b', 'c'], ['e', 'f', 'g'], ['g', 'h', 'i']]
</code></pre>
</div>
<span class="comment-copy">How did you get into this situation?</span>
<span class="comment-copy">Are you asking for <code>ls_all = [ls_1, ls_2, ls_3]</code>?</span>
<span class="comment-copy">I don't see any tuples, what is the relation to your problem?</span>
<span class="comment-copy">BTW you have a typo <code>1_1</code> =&gt; <code>l_1</code>, but you got it right afterwards, so I took the liberty of fixing it.</span>
<span class="comment-copy">@cricket_007 actually it's the opposite. OP doesn't want to create variable, OP wants to <i>evaluate</i> variables.</span>
<span class="comment-copy">omg life savers!!!!! thanks a lot!!!!!</span>
<span class="comment-copy">not my downvote. But your first version doesn't answer the question. OP has data as he posted. And also you copied the typo from OP (that I just fixed). so none of your solutions work.</span>
<span class="comment-copy">can you elaborate why using <code>globals()</code> is not recommended?</span>
<span class="comment-copy">@Jean-FrançoisFabre My understand of <code>globals()</code> is that accessing <code>globals()['something']</code> with new data could produce unintended output if  <code>'something</code> is actually intended to give different result, but when passed to <code>globals()</code> returns something entirely different.</span>
<span class="comment-copy">you mean like <code>1_1 </code>? :)</span>
<span class="comment-copy">Thanks lot!!!!! I tried this one and it works as well. But I decided to use the one from @Jean-FrançoisFabre too keep my code short. Many thanks again!</span>
<span class="comment-copy">oh, cuz i have a lot of those lists and those are defined by users. I want to keep them more organized so I used a loop to create l_all.</span>
<span class="comment-copy">Okay, so something like <code>l_all = [user.get_list() for user in users]</code> would not be possible?</span>
<span class="comment-copy">My point here is that "numbered variables" are a sign that you need a better design. For example, you can use a SQLite database for storing user input rather than just an in-memory list. Then you can query all rows of the database to get a list of all lists</span>
<span class="comment-copy">yeah i totally agree on this. I know its dumb...this project is for my company and theres data control sigh</span>
<span class="comment-copy">Why the downvote? It is the exact answer to the question! Please leave a comment if you downvote.</span>
