<div class="post-text" itemprop="text">
<p>I have two different dataframes populated with different name sets. For example:</p>
<pre><code>t1 = pd.DataFrame(['Abe, John Doe', 'Smith, Brian', 'Lin, Sam', 'Lin, Greg'], columns=['t1'])
t2 = pd.DataFrame(['Abe, John', 'Smith, Brian', 'Lin, Sam', 'Lu, John'], columns=['t2'])
</code></pre>
<p>I need to find the intersection between the two data sets. My solution was to split by comma, and then groupby last name. Then I'll be able to compare last names, and then see if the first names of t2 are contained within t1. ['Lu, John'] is the only one that should be returned in above example.</p>
<p>What I need help on is how to compare values within two different dataframes that are grouped by a common column. Is there a way to intersect the results of a groupby for two different dataframes and then compare the values within each key value pair? I need to extract the names in t2 that are <em>not</em> in t1.</p>
<p>I have an idea that it should look something like this:</p>
<pre><code>for last in t1:
   print(t2.get_group(last)) #BUT run a compare between the two different lists here
</code></pre>
<p>Only problem is if the last name doesn't exist in the second groupby, it throws an error, so I can't even proceed to the next step mentioned by the comment, of comparing the values in the groups (first names).</p>
</div>
<div class="post-text" itemprop="text">
<p>This isn't pandas specific but python has a built in set class with an intersect operation, here's the documentation: <a href="https://docs.python.org/3/library/stdtypes.html?highlight=set#set" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html?highlight=set#set</a></p>
<p>It works like so</p>
<pre><code>set1 = set(my_list_of_elements)
set2 = set(my_other_list_of_elements)
intersecting_elements = set1 &amp; set2
</code></pre>
<p>It's hard to tell if this is what you are looking for though, please update with a minimally, complete, and verifiable example as the comments say for a more accurate answer.</p>
<p>Update - based on comment</p>
<pre><code>for last in t1:
    try:
        t2_last_group = t2.get_group(last)
        # perform compare here
    except:
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I ended up figuring this out. The pandas dataframe seems to look for contains(...).any(), so I included those. The problem of not being able to find a value in the second groupby dataframe, I surrounded the code with a try/exception. Solution is outlined below.</p>
<pre><code>t1final = []
for index, row in t1.iterrows():
    t1lastname = row['last']
    t1firstname = row['first']
    try:
        x = t2groupby.get_group(t1lastname)
        if(~x['first'].str.contains(t1firstname,case=False).any()):
            t1final.append(t1lastname + ', ' + t1firstname)
    except:
        t1final.append(t1lastname + ', ' + t1firstname)
</code></pre>
</div>
<span class="comment-copy">Please post a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a></span>
<span class="comment-copy">@sacul what should I add to complete the question?</span>
<span class="comment-copy">@psak, Many things: <i>at a minimum</i> sample data and desired output. If possible, your existing attempt at a solution, where you got stuck, and briefly what else you've tried.</span>
<span class="comment-copy">I hope this helps clarify the question? Just edited</span>
<span class="comment-copy">I tried creating a set, but that unfortunately doesn't work because the names are not exactly the same. Dataset t1 uses full exact names, and t2 uses nicknames. So finding the intersection of the two sets usually throws a 0 for cases when I want it to return the value.</span>
<span class="comment-copy">Sounds like you need to find a way to map the full names to nicknames then, otherwise how do you plan to compare them?</span>
<span class="comment-copy">Yes agreed. I've grouped each dataset (t1 and t2) by last name, and now I need to compare the first names for each last name. The problem I'm running into is that if a last name exists in t1 and not in t2 (which happens quite often, the names are from completely different sources), then t2group.get_group(last) throws an error. So I'm stuck on how to first find the matching last name and then iterate through the first names associated with each last name. Looking for help on that part.</span>
<span class="comment-copy">While not ideal you could just catch the error and continue processing</span>
<span class="comment-copy">You could also create a set of last names for t1 and t2 then take the intersection of that and then compare the first names for each intersecting last name.</span>
