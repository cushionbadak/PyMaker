<div class="post-text" itemprop="text">
<p>I have a big dataset in a data acquisition system I wrote in python that takes infinitely long to pass over a queue from the child process to the parent. I want to save the data acquired at the end of the acquisition and tried this using the <code>queue</code> function in <code>Multiprocessing</code>. Instead of doing it this way I would prefer it if I could instead pass a message over the <code>queue</code> from the parent to the child to save my data before I kill the child process. Is this possible? An example of what I thought it might look like is:</p>
<pre><code>def acquireData(self, var1, queue):
    import h5py
    # Put my acquisition code here
    queue.get()
    if queue == True:
        f = h5py.File("FileName","w")
        f.create_dataset('Data',data=data)
        f.close()

if __name__ == '__main__': 
    from multiprocessing import Process, Queue
    queue = Queue()
    inter_thread = Process(target=acquireData, args=(var1,queue))
    queue.put(False)
    inter_thread.start()
    while True:
        if not args.automate:
        # Let c++ threads run for given amount of time
            # Wait for stop from OP GUI
        else:
            queue.put(True)
            break
    print("Acquisition finished, cleaning up...")
    sleep(2)
    inter_thread.terminate()
</code></pre>
<p>Is this allowed? If this type of interfacing between processes is allowed then do I have the right notation? For some reference I have on the order of 9e7 data points in the array I'm trying to save and I have 7 arrays which is simply not being passed to my parent process in a timely manner by putting these arrays into the <code>queue</code>. Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, yes, passing a queue to a child is not only legal, but the main use case for queues. See <a href="https://docs.python.org/3/library/multiprocessing.html#exchanging-objects-between-processes" rel="nofollow noreferrer">the first example in the docs</a>, which does exactly that.</p>
<p>However, you've got some problems with your code:</p>
<pre><code>queue.get()
if queue == True:
</code></pre>
<p>First, your <code>queue</code> is never going to be the boolean value <code>True</code>, it's going to be a <code>Queue</code>. You almost never want to check <code>if x == True:</code> in Python; you want to check <code>if x:</code>. For example, <code>if [1, 2]:</code> will pass, while <code>if [1, 2] == True:</code> will not.</p>
<p>Second, your <code>queue</code> isn't even the thing you want to check in the first place. It isn't truthy or falsey (or it isn't relevant whether it is); it's the value the main process put on the queue and you pulled off that's either truthy or falsey. Which you discarded as soon as you retrieved it.</p>
<p>So, do this:</p>
<pre><code>flag = queue.get()
if flag:
</code></pre>
<p>Or, more simply:</p>
<pre><code>if queue.get():
</code></pre>
<hr/>
<p>I'm not sure whether this is exactly what you want or not. That <code>queue.get()</code> will block forever until the main process puts something there. Is that what you wanted? If so, great; you're done with this part of your code. If not, you need to think about what you wanted instead.</p>
<p>As designed, the parent will always wait 2 seconds, even if the child finished long before that. A better solution is to <code>join</code> the child with a timeout of 2 seconds. Then you can <code>terminate</code> it if times out.</p>
<p>Plus, are you sure the termination behavior you've designed is what you want? You're doing a "soft kill request" with the queue, then waiting 2 seconds, then doing a "medium-hard kill request" with <code>terminate</code>, and never doing a "hard kill" with <code>kill</code>. That could be a perfectly reasonable designâ€”but if it's not your design, you've implemented the wrong thing.</p>
</div>
<span class="comment-copy">Thank you for the advice. What do I put in <code>queue.put()</code> for the <code>flag</code> to be raised? Right now I've tried what you suggested and there is no h5 file being created.</span>
<span class="comment-copy">The <code>flag</code> is just whatever you <code>queue.put()</code>. So you <code>put(True)</code> if you want it to generate the file, and you <code>put(False)</code> if you want it to skip generation. But if you terminate the process two seconds after that, and the child hasn't gotten to that point yet, the flag won't matter. And if that two seconds is an actual timeout on how long you're willing to wait, that's the right behavior.</span>
<span class="comment-copy">That works perfectly now. Thank you so much!</span>
