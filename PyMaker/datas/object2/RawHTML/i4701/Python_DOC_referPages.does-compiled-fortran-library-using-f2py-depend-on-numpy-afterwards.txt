<div class="post-text" itemprop="text">
<p>I have a Fortran 95 code that I want to compile to a Python library using f2py. In a matter of fact I've already done it, and it works beautifully. Does the resulting .pyd (.so) depend on numpy after compilation? Could it be used without numpy installation and are they some other options to embed the needed parts inside the final library so it has no dependencies?</p>
<p>I am considering this to be a library accompanying a commercial product and I want the end user to have as little as possible to install on his system, so suggesting to my future customers to install numpy does not suit me. I've searched extensively for an answer, but I cannot seem to find one.</p>
<p>In case it is not possible, could you please refer me to a dependence free way to wrap Fortran code using Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm afraid there is no way of doing this without numpy, as f2py internally produces numpy dependencies. 
Does your code need to be FORTRAN? If it could be C/C++ there might be a chance to get around dependencies, check out chapter 7 of <a href="http://zempirians.com/ebooks/Micha%20Gorelick,%20Ian%20Ozsvald-High%20Performance%20Python_%20Practical%20Performant%20Programming%20for%20Humans-O'Reilly%20Media%20(2014).pdf" rel="nofollow noreferrer">this book</a> for more insights on that.</p>
</div>
<div class="post-text" itemprop="text">
<p>On the website fortran90.org, there are sections dedicated to the Fortran C interface. While it is of course possible to use NumPy, plain C interfacing using <code>iso_c_binding</code> is certainly possible. And it is part of the standard!</p>
<p>See <a href="http://www.fortran90.org/src/best-practices.html#interfacing-with-c" rel="nofollow noreferrer">Interfacing with C</a> and the following sections. The link refers to calling C from Fortran but is directly relevant nonetheless. The next section uses Cython for calling Fortran from Python "Ã  la C" but uses NumPy. The part using ctypes uses no NumPy.</p>
<p>Note: you need a Fortran 2003 compiler. Fortran 95 code is of course legal Fortran 2003 so you can just add the wrapper/interface part to your code.</p>
</div>
<span class="comment-copy">At the web site <a href="http://www.fortran90.org/index.html" rel="nofollow noreferrer">www.fortran90.org</a>, check out the section <a href="http://www.fortran90.org/src/best-practices.html#interfacing-with-c" rel="nofollow noreferrer">Interfacing with C</a>, and the subsequent section <a href="http://www.fortran90.org/src/best-practices.html#interfacing-with-python" rel="nofollow noreferrer">Interfacing with Python</a>.</span>
<span class="comment-copy">One can bind Fortran (not FORTRAN sonce 1990) the very same way as C and C++. No need to to rewrite to C++.</span>
<span class="comment-copy">Thank you for your answer! I was afraid that the answer would be similar. I presume it could be redone using C/C++, but will be a moderate pain. There is a lot of matrix math involved, that could be easily redone using numpy, but the reason that I've headed towards FORTRAN was to avoid numpy in first place... I presume compiling with f2py towards numeric or numarray would create dependace for those two modules...</span>
<span class="comment-copy">Thnak you @VladimirF.  Yes to be precise it is Fortran 95 code. Maybe I should have mentioned that earlier.</span>
<span class="comment-copy">@VassilKateliev I repeat, you can bind Fortran to Python the same way you bind C or C++. There is no need to rewrite your Fortran code. The questiin is whether you need NumPy in your Python code and you may or may not needed for C++ and for Fortran equally once you use the same methonds to call them.</span>
<span class="comment-copy">Thank you! Yes I am aware of fortran90.org guide, but all the examples given use numpy array. As Python does not have a "native" array implementation, I presume that is one way to provide Fortran code with "adequate storage" for its data, but numpy does not suit me. I'll try both Cython and ctypes, hoping that at least Cython's memory view array would do the job... I am open for any suggestions, concerning how (and witch types) can I pass arrays to the Fortran library and back.</span>
<span class="comment-copy">Python has the <a href="https://docs.python.org/3/library/stdtypes.html#memoryview" rel="nofollow noreferrer">memoryview</a> datatype. It is related to <a href="https://www.python.org/dev/peps/pep-3118/" rel="nofollow noreferrer">PEP 3118</a> and the purpose is to make it possible to bind to array-dependent code without NumPy. For C/Fortran extensions, you must do some work (you must manage the data buffer struct yourself) but the possibility is real :-)</span>
