<div class="post-text" itemprop="text">
<p>I have this rather intricate <code>try</code> <code>except</code> block:</p>
<pre><code>try:
  self.sorting = sys.argv[1]
  try:
    test_sorting_var = int(self.sorting)
    if test_sorting_var &lt; 1:
      print "Sorting column number not valid."
      raise ValueError
    else:
      self.sorting = test_sorting_var
  except ValueError:
    print "There's a problem with the sorting value provided"
    print "Either the column doesn't exists or the column number is invalid"
    print "Please try a different sorting value or omit it."
    sys.exit(1)
  except:
    if self.sorting not in self.output_table.column_headers:
      print "Sorting column name not valid."
      raise ValueError
except:
  pass
</code></pre>
<p>Basically I'm checking:</p>
<ol>
<li>If there's a <code>sys.argv[1]</code></li>
<li>If so, try it as <code>int</code>, and see if it's less than 1</li>
<li>If <code>int</code> fails, test it as string</li>
</ol>
<p>In both 2+3, if the tests don't succeed, I'm raising a <code>ValueError</code> that should be caught in the <code>except ValueError</code> block and it does as expected:</p>
<pre><code>Sorting column number not valid.
There's a problem with the sorting value provided
Either the column doesn't exists or the column number is invalid
Please try a different sorting value or omit it.
</code></pre>
<p>BUT! The <code>sys.exit(1)</code> is not invoked and the program just continues.</p>
<p>How can I fix it and even make it more readable?</p>
</div>
<div class="post-text" itemprop="text">
<p>In the last two lines you catch <em>any</em> exception:</p>
<pre><code>except:
  pass
</code></pre>
<p>This includes the exception <code>SystemExit</code>, which is raised by <code>sys.exit</code>.</p>
<p>To fix this, only catch exceptions deriving from <code>Exception</code>, <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" rel="noreferrer">which 
<code>SystemExit</code> does not</a>:</p>
<pre><code>except Exception:
  pass
</code></pre>
<hr/>
<p>In general, it's (almost) never a good idea to do a bare except, always catch <code>Exception</code>, or if possible, something more specific.</p>
</div>
<div class="post-text" itemprop="text">
<p>The builtint <code>sys.exit()</code> raises a <code>SystemExit</code>-Exception. As you are catching any type of exception when you don't define the Exception to catch (<code>except:</code> without an Exception Type) the SystemExit gets also caught. Ultimately the function will run until the last line where you wrote <code>pass</code>.</p>
<p>Best thing to do is to always catch specific Exceptions and never ever catch all Exceptions with an <code>except:</code>.</p>
<p>Furthermore you should put the check if <code>self.sorting</code> is not in <code>self.output_table.column_headers</code> outside the try catch where you check for a valid self.sorting.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/sys.html#sys.exit" rel="nofollow noreferrer">documentation for <code>sys.exit</code></a>:</p>
<blockquote>
<p>Exit from Python. This is implemented by raising the SystemExit exception, so cleanup actions specified by finally clauses of try statements are honored, and it is possible to intercept the exit attempt at an outer level.</p>
</blockquote>
<p>This means that the outer try except loop is catching the <code>SystemExit</code> exception and causing it to pass. You can add this exception to the outer block and call it again.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think I would do something like this:</p>
<pre><code>import sys

def MyClass(object):
    def method(self, argv, ...):
        # ...
        if len(argv) &lt; 2:
          raise RuntimeError("Usage: {} &lt;sorting column&gt;".format(argv[0]))
        sorting = argv[1]
        try:
            self.sorting = int(sorting)
        except ValueError:
            try:
                self.sorting = self.output_table.column_headers.index(sorting)
            except ValueError:
                raise ValueError("Invalid sorting column '{}'.".format(sorting))
        # ...

try:
    # ...
    obj.method(sys.argv, ...)
except Exception as e:
    sys.exit(e.message)
</code></pre>
<ul>
<li>It's okay to <a href="https://www.jefftk.com/p/exceptions-in-programming-asking-forgiveness-instead-of-permission" rel="nofollow noreferrer">ask for forgiveness instead of permission</a> when it makes things easier (for example to parse a number), but if you need to make sure if <code>sys.argv</code> has enough elements just check it, it will make the program flow clearer.</li>
<li>Avoid using <code>sys.exit</code> within regular code, try to use it only in the outermost levels. For the most part, it is generally better to let exceptions bubble up and catch them at top level or let them crash the program if necessary.</li>
<li>Do make use of exception parameters to store error information, you can decide at a later point whether to print the error, log it, show it in a popup, ...</li>
<li>Instead of using <code>sys.argv</code> directly from within a class, you can pass it as an argument to the method/constructor, it will make the code easier to test and more flexible towards the future.</li>
</ul>
</div>
<span class="comment-copy">How is the program implemented? Are you running it from CLI or is it running in some other environment? <code>sys.exit</code> does not always work in every environment.</span>
<span class="comment-copy">@AlexEshoo straight from Linux cmd. <code>./script.py</code></span>
<span class="comment-copy">Yep that helped. Thank you kindly dear stranger.</span>
<span class="comment-copy">Catching <code>Exception</code> is not much better than a bare <code>except</code> clause, the <code>Exception</code> class is still too general. You should always catch specific exceptions.</span>
<span class="comment-copy">Care to elaborate on the tip of getting the check outside of the try catch block? Do you mean after the <code>self.sorting = sys.argv[1]</code>? @igle</span>
<span class="comment-copy">I guess with the first try-catch you just want to do some kind of input validation. (Is my argument a valid value for self.sorting) The second check is checking for something completely different and could go in a seperate statement after you already checked if the value for sorting is a valid one. Furthermore I don't understand why you are catching every exception in the end. Raising exceptions generally got the purpose to inform the user of some error/misbehavior while execution. Where as Exceptions should only be caught if they are allowed to happen and properly handled afterwards.</span>
