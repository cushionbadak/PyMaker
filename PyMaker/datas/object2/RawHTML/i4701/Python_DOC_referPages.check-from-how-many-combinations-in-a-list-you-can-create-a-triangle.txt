<div class="post-text" itemprop="text">
<p>I'm writing a Python program that returns out of how many combinations in a list you can create a triangle.</p>
<p>Example:</p>
<pre><code>--&gt; test([1,1,3])
0 #you cant make a triangle out of 1,1,3 (the only combination in this list)

--&gt; test([2,789,5,3,3237,4])
3 #you can make a triangle out of [2,5,4],[5,3,4] and [2,4,3]
</code></pre>
<p>I only managed to write a function that checks if you can create a triangle out of 3 given edges:</p>
<pre><code>def check(a,b,c):
    n = max((a,b,c))
    x = 0
    y = 0
    for i in [a,b,c]:
        if i != n:
            if x == 0:
                x = i
            elif y == 0:
                y = i 
    return (x+y)&gt;n
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is quite easy with the function to check if any three sides can make a triangle, <code>check</code>, given by you in the comments:</p>
<pre><code>from itertools import combinations

def test(x):
    return sum(check(*comb) for comb in combinations(x, 3))
</code></pre>
<p>This uses the fact that <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a> gives all possible combinations, here of length <code>3</code> of the input, and the fact that bools are integers with <code>True == 1</code> and <code>False == 0</code>, so we can just sum them to get the number of <code>True</code> elements.</p>
<p>Your <code>check</code> function could also be more explicit:</p>
<pre><code>def check(a, b, c):
    a, b, c = sorted([a, b, c])
    return a + b &gt; c
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Firstly, your check function is incorrect. From <a href="https://stackoverflow.com/questions/19835174/how-to-check-if-3-sides-form-a-triangle-in-c">this post</a>, we see that the conditions required are that the sum of each pair of sides is greater than the other side. As <a href="https://stackoverflow.com/users/2685938/david">@david</a> <a href="https://stackoverflow.com/a/19835249/5858851">explained</a>:</p>
<blockquote>
<p>Let's say that a, b, c is the sides of the triangle. Therefore, it
  must be satisfy this criteria:</p>
<ol>
<li>a + b &gt; c</li>
<li>a + c &gt; b</li>
<li>b + c &gt; a</li>
</ol>
</blockquote>
<p>You are only checking to see if the sum of the two smaller sides is greater than the largest. Furthermore, your function would fail for cases where the largest side is duplicated. For example, the values <code>1, 4, 4</code> form a valid triangle but your function <code>check(1, 4, 4)</code> returns <code>False</code>.</p>
<p>That being said, there is very little you can do to avoid checking all combinations of 3 values. </p>
<pre><code>from itertools import combinations
[(x, y, z) for (x, y, z) in combinations(test, 3) 
 if ((x+y) &gt; z) and ((x+z) &gt; y) and ((y+z) &gt; x)]
#[(2, 5, 4), (2, 3, 4), (5, 3, 4)]
</code></pre>
<p>You could make a marginal speed improvement by sorting the list. This helps because the code can short-circuit because the first condition will fail (and you don't have to check the other two).</p>
<p>For example, these are the sorted combinations of 3 sides from your example list:</p>
<pre><code>&gt;&gt;&gt; test = [2,789,5,3,3237,4]
&gt;&gt;&gt; list(combinations(sorted(test), 3))
[(2, 3, 4),
 (2, 3, 5),
 (2, 3, 789),
 (2, 3, 3237),
 (2, 4, 5),
 (2, 4, 789),
 (2, 4, 3237),
 (2, 5, 789),
 (2, 5, 3237),
 (2, 789, 3237),
 (3, 4, 5),
 (3, 4, 789),
 (3, 4, 3237),
 (3, 5, 789),
 (3, 5, 3237),
 (3, 789, 3237),
 (4, 5, 789),
 (4, 5, 3237),
 (4, 789, 3237),
 (5, 789, 3237)]
</code></pre>
<p>In the third example, <code>x = 2</code>, <code>y = 3</code>, and <code>z = 789</code>. The first condition <code>(x+y) &gt; z</code> will fail and you won't have to check the other two. I've included some timing results to show that sorting is <em>slightly</em> faster.</p>
<p><strong>Update</strong> </p>
<p>If you wanted to avoid duplicates, you can use a set comprehension:</p>
<pre><code>{(x, y, z) for (x, y, z) in combinations(sorted(test), 3) if 
 ((x+y) &gt; z) and ((x+z) &gt; y) and ((y+z) &gt; x)}
</code></pre>
<p><strong>Timing Results</strong></p>
<pre><code># make list of random numbers
import numpy as np
N = 100
test = [np.random.randint(0,5000) for i in range(N)]

# without sorting
%%timeit
[(x, y, z) for (x, y, z) in combinations(test, 3) 
 if ((x+y) &gt; z) and ((x+z) &gt; y) and ((y+z) &gt; x)]
#10 loops, best of 3: 76.1 ms per loop

# with sorting
%%timeit
[(x, y, z) for (x, y, z) in combinations(sorted(test), 3) if 
 ((x+y) &gt; z) and ((x+z) &gt; y) and ((y+z) &gt; x)]
#10 loops, best of 3: 65.1 ms per loop
</code></pre>
</div>
<span class="comment-copy">I have tried to make a program that does that, but i failed to . I only managed to write a function that checks if you can create a triangle out of 3 given edges def check(a,b,c):     n = max((a,b,c))          x = 0     y =0      for i in [a,b,c]:         if i != n:             if x == 0:                 x = i             elif y == 0:                 y = i     return (x+y)&gt;n</span>
<span class="comment-copy"><a href="https://stackoverflow.com/a/18201716/5858851">This answer</a> shows how to get all combinations of 3 items from your list.</span>
<span class="comment-copy">You should add that <code>check</code> function in the question. Code is not legible in the comments, especially in python where indentation matters.</span>
<span class="comment-copy">Thank you. By the way, is there a way to do this avoiding itertools?</span>
<span class="comment-copy">@LukeS. Sure, but why would you want to?</span>
<span class="comment-copy">Could you please show me? Itertools.combinations is really slow (when using bigger lists) and I would like to do that optimally.</span>
<span class="comment-copy">@LukeS. I'm sorry, I don't want to reinvent the wheel just for your fun. But you could have a look at the documentation of <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a> I linked in the post. It includes a function to which the actual implementation is roughly equivalent.</span>
<span class="comment-copy">I don't mean 'for fun'. I'm just wondering if there is another way to do that (In the more 'logical' way). But still thank you for the answer.</span>
