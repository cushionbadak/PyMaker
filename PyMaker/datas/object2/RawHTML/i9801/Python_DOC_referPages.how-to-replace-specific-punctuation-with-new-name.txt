<div class="post-text" itemprop="text">
<p>My data sample is:</p>
<pre><code>        comment sarc_majority
0        [?, ?]          sarc
1           [0]      non-sarc
2     [!, !, !]          sarc
3           [0]      non-sarc
4           [?]          sarc
</code></pre>
<p>I want to replace the punctuation with a new name. Such as ? = punct1, ! = punct2, ' = punct3. I tried using read from csv file.</p>
<pre><code>replace_df = pd.read_csv('./final/eng-mly-punct.csv', sep=',', quoting=csv.QUOTE_NONE,
                       names=["punct", "replacer"])
replace_df.head()

    punct   replacer
0   ?       punct1
1   !       punct2
2   '       punct3
</code></pre>
<p>Then I stucked at replacing:</p>
<pre><code>for punct, replacer in replace_df.itertuples(index=False,name=None):
    df.comment = df.comment.str.replace(r'\b{0}\b'.format(punct),replacer)
</code></pre>
<p>The error is: error: nothing to repeat</p>
<p>What have gone wrong? Or is there any possible way to do this? 
The desired output should be just like:</p>
<pre><code>                       comment sarc_majority
0             [punct1, punct1]          sarc
1                          [0]      non-sarc
2     [punct2, punct2, punct2]          sarc
3                          [0]      non-sarc
4                     [punct1]          sarc
</code></pre>
<p>Thanks in advance. Cheers.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.replace.html" rel="nofollow noreferrer"><code>replace</code></a> by dict <code>d</code> - but need escape <code>?</code> to <code>\?</code>:</p>
<pre><code>d = {'\?':'punct1','!':'punct2',"'":'punct3'}
df.comment = df.comment.replace(d, regex=True)
print (df)
                    comment sarc_majority
0          [punct1, punct1]          sarc
1                       [0]      non-sarc
2  [punct2, punct2, punct2]          sarc
3                       [0]      non-sarc
4                  [punct1]          sarc
</code></pre>
<p>Also you can create <code>d</code> from <code>replace_df</code>:</p>
<pre><code>df = pd.DataFrame({'comment': {0: '[?, ?]', 1: '[0]', 2: '[!, !, !]', 3: '[0]', 4: '[?]'}, 'sarc_majority': {0: 'sarc', 1: 'non-sarc', 2: 'sarc', 3: 'non-sarc', 4: 'sarc'}})
print (df)
     comment sarc_majority
0     [?, ?]          sarc
1        [0]      non-sarc
2  [!, !, !]          sarc
3        [0]      non-sarc
4        [?]          sarc

replace_df = pd.DataFrame({'replacer': {0: 'punct1', 1: 'punct2', 2: 'punct3'}, 'punct': {0: '?', 1: '!', 2: "'"}})
print (replace_df)
  punct replacer
0     ?   punct1
1     !   punct2
2     '   punct3
</code></pre>
<pre><code>replace_df.punct = '\\' + replace_df.punct
d = replace_df.set_index('punct')['replacer'].to_dict()
print (d)
{'\\!': 'punct2', "\\'": 'punct3', '\\?': 'punct1'}

df.comment = df.comment.replace(d, regex=True)
print (df)
                    comment sarc_majority
0          [punct1, punct1]          sarc
1                       [0]      non-sarc
2  [punct2, punct2, punct2]          sarc
3                       [0]      non-sarc
4                  [punct1]          sarc
</code></pre>
<p>EDIT by comment:</p>
<pre><code>df = pd.DataFrame({'comment':[['?', '?'],[0], ['!', '!', '!'], [0], ['?']], 'sarc_majority': [ 'sarc','non-sarc', 'sarc', 'non-sarc','sarc']})
print (df)
     comment sarc_majority
0     [?, ?]          sarc
1        [0]      non-sarc
2  [!, !, !]          sarc
3        [0]      non-sarc
4        [?]          sarc

print (type(df.ix[0,'comment']))
&lt;class 'list'&gt;

replace_df = pd.DataFrame({'replacer': {0: 'punct1', 1: 'punct2', 2: 'punct3'}, 'punct': {0: '?', 1: '!', 2: "'"}})
#print (replace_df)

replace_df.punct = '\\' + replace_df.punct.apply(lambda x: x.format())
d = replace_df.set_index('punct')['replacer'].to_dict()
print (d)
{'\\!': 'punct2', "\\'": 'punct3', '\\?': 'punct1'}

df.comment = df.comment.apply(lambda x: pd.Series(x).astype(str).replace(d, regex=True).tolist())
print (df)
                    comment sarc_majority
0          [punct1, punct1]          sarc
1                       [0]      non-sarc
2  [punct2, punct2, punct2]          sarc
3                       [0]      non-sarc
4                  [punct1]          sarc
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Most punctuation characters have a special meaning in regular expressions. Here you end up with, eg: <code>\b?\b</code>, which means an optional boundary followed by a boundary. Not what you meant.</p>
<p>For passing arbitrary strings into a regexp, it must be escaped using <a href="https://docs.python.org/3/library/re.html#re.escape" rel="nofollow noreferrer"><code>re.escape</code></a>:</p>
<pre><code>import re
r'\b{0}\b'.format(re.escape(punct))
</code></pre>
<p>This will be <code>\b\?\b</code>, which means a boundary, followed by a <code>?</code>, followed by another boundary.</p>
</div>
<span class="comment-copy">try using the <code>re</code> package. <code>re.sub(r'\?',punct1,text)</code></span>
<span class="comment-copy">Thanks @RohanAmrute for your respond. That's what I'm thinking at first. But lets try the str.replace.</span>
<span class="comment-copy">what is your pandas version?</span>
<span class="comment-copy">Or maybe you have list in comment column, what return <code>print (type(df.ix[0,'comment']))</code> ?</span>
<span class="comment-copy">Thank you @jezrael for your help. I've tried but it still return the same punctuation symbols, none has been replaced :-( I read the post about re.sub for regex [here] (<a href="http://stackoverflow.com/questions/16720541/python-string-replace-regular-expression" title="python string replace regular expression">stackoverflow.com/questions/16720541/â€¦</a>). Is this related to me now?</span>
<span class="comment-copy">If use pandas, it use another <code>replace</code> function. So I think not.</span>
<span class="comment-copy">What return <code>print (type(df.ix[0,'comment']))</code> ?</span>
<span class="comment-copy"><code>\b</code> is not a blank, it's a boundary between word characters and non-word characters.</span>
<span class="comment-copy">@cco&gt; you're right, what was I thinking. Editing.</span>
<span class="comment-copy">Thanks @spectras. I've tried and return AttributeError: Can only use .str accessor with string values, which use np.object_ dtype in pandas</span>
<span class="comment-copy">@SuhairiSuhaimin&gt; I don't know pandas, I would believe that means one of your comments or one of your punctuation replacement is either empty or not a string in your file. As I don't know pandas, I just focused on the "how to build a valid regexp from a string that has punctuation in it" part, which seemed to be the core of your problem.</span>
<span class="comment-copy">Thank you @spectras for your explanation. The file is not empty. replace_df.head() show the punct and what I try to replace with. Maybe I should try re.sub later.</span>
