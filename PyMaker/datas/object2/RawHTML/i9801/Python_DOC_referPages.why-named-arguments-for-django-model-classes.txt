<div class="post-text" itemprop="text">
<p>I want to know that why do we specify names for parameters for model classes like <code>CharField</code> in django.like this for example.</p>
<pre><code>first_name = models.CharField(max_length=40, blank=True)
</code></pre>
<p>why not </p>
<pre><code>first_name = models.CharField(40, True)
</code></pre>
<p>In java we call <code>new charField(40,true)</code> like this.If they are default arguments we specify these in the definition of constructor (in java).</p>
<p>Why are we writing here.please,explain.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you see in java is called <code>positional arguments</code> where the arguments are always in certain order. Python, however, supports two type of arguments: <a href="https://docs.python.org/3/glossary.html#term-argument" rel="nofollow noreferrer">positional arguments and keyword arguments</a>.</p>
<p>The beauty of keyword arguments being that while using the function you don't have to worry about defining values for all the arguments used within the method (or class constructor).</p>
<p>You can just use an <code>identifier</code> e.g. in your case <code>max_length</code> and <code>blank</code> and leave rest of the arguments as they are.</p>
<p>If you look at the <a href="https://github.com/django/django/blob/master/django/db/models/fields/__init__.py#L141" rel="nofollow noreferrer"><code>__init__</code></a> method of the <a href="https://github.com/django/django/blob/master/django/db/models/fields/__init__.py#L97" rel="nofollow noreferrer"><code>Field</code></a> class (<em>superclass of CharField</em>), you will find a number of keyword arguments defined there:</p>
<pre><code>def __init__(self, verbose_name=None, name=None, primary_key=False,
        max_length=None, unique=False, blank=False, null=False,
        db_index=False, rel=None, default=NOT_PROVIDED, editable=True,
        serialize=True, unique_for_date=None, unique_for_month=None,
        unique_for_year=None, choices=None, help_text='', db_column=None,
        db_tablespace=None, auto_created=False, validators=[],
        error_messages=None):
</code></pre>
<p>Out of these, you just defined <code>max_length</code> and <code>blank</code> because that's what you required.</p>
</div>
<span class="comment-copy">In particular, Python does not have method overloading like Java does, so you can't have multiple versions of the same method with different arguments. Since <code>max_length</code> and <code>blank</code> are not the first two positional arguments, you'd have to use <code>models.CharField(None, None, False, 40, False, True)</code>, having to explicitly match each default value of the preceding positional arguments. You can see why keyword arguments are preferred.</span>
<span class="comment-copy">thanks for the reply.I understood now.</span>
