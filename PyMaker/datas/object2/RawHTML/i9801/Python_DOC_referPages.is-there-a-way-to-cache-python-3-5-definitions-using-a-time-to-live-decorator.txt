<div class="post-text" itemprop="text">
<p>Currently, I use <code>functools</code>' <code>lru_cache</code> to handle my caching for the function. The problem is that the size of the cache never grows large enough to make use of the <code>LRU</code> (due to the fact that the function never takes in a parameter). Instead, the function, when called, opens up a specific URL and return its contents.</p>
<p>Is there a way in which I can specify the 'time to live' cache in which after a certain amount of time/certain amount of calls, it refreshes its cache?</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know of a decorator, but you can keep track of the last time you got the page and update as needed. If this is a single-threaded app, it can be simple</p>
<pre><code>_cached_page = ''
_cached_page_time = 0

def get_page():
    global _cached_page, _cached_page_time
    now = time.time()
    # invalidate in 1 hour
    if not _cached_page or now - _cached_page_time &gt; 60 * 60:
        _cached_page = get_the_page_here()
        _cached_page_time = time.time()
    return _cached_page
</code></pre>
<p>You could also age the page with a timer in the background. You need to control access with a lock, but that makes the cache usable in a multithreaded program too.</p>
<pre><code>_cached_page = ''
_cached_page_lock = threading.Lock()

def _invalidate_page():
    global _cached_page
    with _cached_page_lock:
        _cached_page = ''

def get_page():
    global _cached_page
    with _cached_page_lock:
        if not _cached_page:
            _cached_page = get_the_page_here()
            # invalidate in 1 hour
            threading.Timer(60*60, _invalidate_page)
        return _cached_page
</code></pre>
<p>Finally, the server may include an <code>Expires: ...</code> field in the http header. Depending on how well the service was written, this would be a good reflection of how long the page can be cached.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>functools.lru_cache</code></a> function accepts a <code>maxsize</code> argument which saves the results up to the <code>maxsize</code> most recent calls.</p>
<p>You can check this by calling the <code>cache_info</code> attribute of your decorated function.</p>
<p>If you want to refresh your cache completely you should implement a cash object manually by counting the number of cache calls and resetting the cache whenever it hits the max size.</p>
<pre><code>from functools import wraps


class Mycache(object):
    def __init__(self, maxcount):
        self.count = 0
        self.maxcount = maxcount
        self.cache = {}

    def __call__(self, func):

        @wraps(func)
        def wrapped(*args):
            self.count += 1
            if self.count &gt; self.maxcount:
                self.cache = {}
                self.count = 0
                result = self.cache[args] = func(*args)
            else:
                try:
                    result = self.cache[args]
                except KeyError:
                    result = self.cache[args] = func(*args)
            return result
        return wrapped
</code></pre>
<p>Demo:</p>
<pre><code>@Mycache(3)
def a(arg):
    print("arg is : {}".format(arg))
    return arg ** 2

print(a(4))
print(a(4))
print(a(4))
print(a(4))
print(a(3))
print(a(4))
</code></pre>
<p>output:</p>
<pre><code>arg is : 4
16
16
16
arg is : 4
16
arg is : 3
9
16
</code></pre>
</div>
<span class="comment-copy">I don't understand your caching rules. Does the function just return one thing many times? If there are no parameters to this url, how would you know that a potential return value is locally cached?</span>
<span class="comment-copy">I asked the question because it sounds like you don't want an lru cache at all. It sounds like you want to use the url return value for a set period of time and then refresh it. Can you confirm in some way?</span>
<span class="comment-copy">@tdelaney so the resource I am getting from the URL occasionally updates (as in once per every few hours). I would like the function to cache the return value of the function, but also update it's cache every set few hours in case the webpage updates.</span>
<span class="comment-copy">So, yes - I don't want to use LRU cache. I Agree with what you just said. I just want to cache the return value and update the cache after a set amount time.</span>
<span class="comment-copy">OP says the function doesn't take a parameter.... sounds to me like lru is not what he wants, regardless of its parameterization.</span>
<span class="comment-copy">@tdelaney I'm not sure of that, but I think there might be some other ways by implementing a custom memoizer decorator.</span>
