<div class="post-text" itemprop="text">
<p>I am wondering how I can go about condensing these elif statements into a method of some sorts. I also don't know how to go about storing a chosen coordinate so that I can perform checks of surrounding coordinates. I know my code is nooby, but so am I, I learn better starting with the long way :)</p>
<p>Below is how I'm going about storing a coordinate inside a variable. (Not sure this is even the right way to do it yet...)</p>
<blockquote>
<pre><code>grab = board[x][y]
if(SjumpX == 'A1'):
    grab = [0][0]
elif(SjumpX == 'A2'):
    grab = [0][1]    
elif(SjumpX == 'A3'):
    grab = [0][2]
elif(SjumpX == 'A4'):
    grab = [0][3]
elif(SjumpX == 'B1'):
    grab = [1][0]
elif(SjumpX == 'B2'):
    grab = [1][1]
elif(SjumpX == 'B3'):
    grab = [1][2]
elif(SjumpX == 'B4'):
    grab = [1][3]
elif(SjumpX == 'C1'):
    grab = [2][0]
elif(SjumpX == 'C2'):
    grab = [2][1]
elif(SjumpX == 'C3'):
    grab = [2][2]
elif(SjumpX == 'C4'):
    grab = [2][3]
</code></pre>
</blockquote>
<p>SjumpX is the coordinate of the piece my player wants to grab, and DjumpX is the coordinate of the destination. My logic behind this is if the player enters a coordinate(ie A1 B2 C3...), I can then store that coordinate into the variable 'grab', then use that variable to test if the destination coordinate is empty, also if the coordinate between the two is the an opposing players piece.</p>
<p>Here is the board:</p>
<blockquote>
<pre><code>   1 2 3 4
 A - X O X
 B X O - O
 C O X O X
</code></pre>
</blockquote>
<p>This where I'm checking that the "jumpable" destination coordinates are empty based on the current coordinates of my 'grab' variable. In this case 'A3' &lt;==&gt;  grab = [0][2]</p>
<blockquote>
<pre><code>    if((grab[x][y-2] == '-' or grab[x][y+2] == '-' or grab[x-2][y] == '-' or grab[x+2][y] == '-')and
   (grab[x][y-1] == 'X' or grab[x][y+1] == 'X' or grab[x-1][y] == 'X' or grab[x+1][y] == 'X'):
</code></pre>
</blockquote>
<p>My main Questions Are:</p>
<p>1- How do I condense my huge elif statement list?<br/>
2- What is the correct format/process to store a coordinate to perform checks on surrounding coordinate content?<br/>
3- How can I condense my if statement that checks to see if the destination coordinate is empty('-'). </p>
</div>
<div class="post-text" itemprop="text">
<p>We can make a map
then using it we can initialize the grab</p>
<p>i.e,</p>
<pre><code>field_map = {'A1':(0,0),'A2':(0,0)......}
if SjumpX in field_map.keys():
    x,y = field_map[SjumpX]
    grab = [x][y]
</code></pre>
<p>I think it helps</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you would want to grab the board's position corresponding to <code>SjumpX</code> value, the following would be a simple code for the task.</p>
<pre><code>grab = board[ord(SjumpX[0]) - 65][int(SjumpX[1]) - 1]
</code></pre>
<p>This would mean converting the first letter of <code>SjumpX</code> to its ASCII ordinate value (A, B, C, ...) and converting it to numbers (65, 66, 67, ...). Since the offset is 65, subtracting it from the ordinate should give you the numbers you need (0, 1, 2, ...)</p>
<p>On the other hand you could go for a direct method suggested by @khachik's comment.</p>
<pre><code>grab = board[{'A':0, 'B':1, 'C':2}[SjumpX[0]]][int(SjumpX[1]) - 1]
</code></pre>
<p>This directly maps (A, B, C) to (0, 1, 2), although this statement would grow longer for larger boards (D, E, and so on).</p>
</div>
<div class="post-text" itemprop="text">
<p>I have two suggestions:</p>
<p><strong>First:</strong> Keep an adjacency list for the or a matrix representation (this answer depends on your design, I personally like adjacency lists better)</p>
<pre><code># Adding only some of the values here
map = {'A1': ['A2','B1'], 'A2': ['A1','A3', 'B2'], 'B1': ['A1','B2','C1']}
val_map = {'A1': '-', 'B1': 'X'}
grab = SjumpX
# You can also get the values by iterating over the list from next statement
nearby_ele[grab] = map[grab]
</code></pre>
<p><strong>Second:</strong> Store the mapping of <code>row, col</code> in a <code>dict</code> <code>{'A1': (0,0), 'A2': (0,1)}</code>. Dict is constant time lookup and you can directly get the co-ordinate making things fast. Use a matrix representation as </p>
<pre><code>map = {'A1': (0,0), 'A2': (0,1), 'A3': (0,2), 'A4': (0,3),
       'B1': (1,0), 'B2': (1,1), 'B3': (1,2), 'B4': (1,3),
       'C1': (2,0), 'C2': (2,1), 'C3': (2,2), 'C4': (2,3),
      }
val_map = [['-', 'X', 'O', 'X'], ['X', 'O', '-', 'O'],['O','X','O','X']]
grab = map[SjumpX]
nearby_ele[grab] = [(grab[0]-1,grab[1]), (grab[0]+1,grab[1]),
                    (grab[0],grab[1]-1), (grab[0],grab[1]+1)]
</code></pre>
</div>
<span class="comment-copy">In all the <code>elif</code> statements, I suppose you intend to mean <code>return grab[x1][y1]</code> or <code>grab = board[x1][y1]</code> instead of <code>grab = [x1][y1]</code>. Right? Because, the statements don't seem syntactically right.</span>
<span class="comment-copy">Just for fun, you can condense you elifs into one line (assuming the above comment is correct): <code>grab[{'A':0, 'B':1, 'C':2}[SjumpX[0]]][int(SjumpX[1]) - 1]</code></span>
<span class="comment-copy">When you <i>shadow</i> a python built-in. like <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">map</a>, be aware that you did and any possible consequences.</span>
<span class="comment-copy">@wwii thanks for the good feedback, I have renamed that variable</span>
<span class="comment-copy">The bad part with this approach is that if you add a column, you will need to modify field_map and add another set of values for A,B,C. You could just map A,B,C to indices and for columns use the number you get in coordinates coming for users.</span>
<span class="comment-copy">@Afsai Salim Thank you for this answer, I never knew python had a function like this. Your answer has helped me in more ways than one!</span>
<span class="comment-copy">@khachik you are correct, however in my case I am dealing with a static 3X4 grid. Luckily I don't have to take this issue into consideration :)</span>
