<div class="post-text" itemprop="text">
<p>So I have the following code which iterates over a list and uses the data to populate a dict.</p>
<pre><code>self.data = [["name1.co.uk", "123", "A", "1.2.3.4"],["name2.com", "122", "NS", "ns1.google.com"]]

for each_list in self.data:
            self.terrarecord[each_list[0].replace('.', '')] = {
                "zone_id": self.zone_id,
                "name": each_list[0] + self.url, # not sure if I need to do this
                "type": each_list[2],
                "ttl": each_list[1],
                "records": [each_list[3].replace('\n', '')]
            }
</code></pre>
<p><strong>I realise this probably isn't very Pythonic, so any suggestions on how to do this more eloquently would be appreciated</strong></p>
<p>Anyhoo, what I want to do is add a random value to each key generated as the code loops through the data.</p>
<p>So where it says <code>self.terrarecord[each_list[0].replace('.', '')] = {</code> I want to add a randomly generated number on the end, so the finished result might look something like this:</p>
<pre><code>"key123" { # &lt;-- This is the key that needs a random number
    "id": "id",
    "name": "key.co.uk",
    "type": "SOA",
    "records": ["1234 etc"]

}
</code></pre>
<p>As you can see in the loop it is using the same data in the <code>data</code> list to populate more than one key, and the first one needs to be unique hence why I want to add the integer as I loop through.</p>
<p>I hope this makes sense. It's quite difficult to explain.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>How about something like this:</p>
<pre><code>import random

...
rand_key = random.randint(1, 100)

self.terrarecord[each_list[0].replace('.', '') + str(rand_key)] = {
...
}
</code></pre>
<p>You can adjust the range you want the random number to be chosen from with the arguments to <code>randint()</code>. Not that this will make it difficult to access the values from this <code>dict</code> however.</p>
<p>Also, there is a potential with this method for having data overwritten if <code>each_list[0].replace('.', '')</code> and <code>rand_key</code> happen to have the same value as a previous key. If this is not an issue, then this method should work for you. If it is, you could generate your "random" number with a timestamp:</p>
<pre><code>from datetime import datetime

rand_key = datetime.now().strftime('%Y%m%d%s%f')
</code></pre>
<p>Which should give you a unique key unless the same value for <code>each_list[0].replace('.', '')</code> comes up twice in the same microsecond. See <a href="http://strftime.org/" rel="nofollow noreferrer">http://strftime.org/</a> for an explanation of the format codes passed to <code>strftime()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>So you probably want to use <code>randint</code> to get a random value but you also want to make sure that the random number isn't used before if <code>each_list[0]</code> can be the same (if they aren't idk why you need a random value appended).</p>
<pre><code>from random import randint

data = [["name1.co.uk", "123", "A", "1.2.3.4"],["name2.com", "122", "NS", "ns1.google.com"]]
terrarecord={}

def getRandKey(name,record,key_length=3):
  min=int('1'+'0'*(key_length-1))
  max=int('9'*key_length)
  r=randint(min,max)
  new_name=name+str(r)
  while new_name in record:
    r=randint(min,max)
    new_name=name+str(r)
  return new_name

for each_list in data:
    terrarecord[getRandKey(each_list[0].replace('.', ''),terrarecord)] = {
                "zone_id": 5,
                "name": each_list[0], 
                "type": each_list[2],
                "ttl": each_list[1],
                "records": [each_list[3].replace('\n', '')]
    }
</code></pre>
</div>
<span class="comment-copy">what's in <code>self.data</code>? what is the make up of <code>each_list</code>?</span>
<span class="comment-copy">Sorry, an example is now added.</span>
<span class="comment-copy">One improvement might be to change the 'internal' lists in self.data to instead be <code>namedtuple</code>s. Or even promote them to a full class, and then implement some of the logic in methods of that class.</span>
<span class="comment-copy">Instead of trying to do it all on one line, construct the key on one line and use it in the next.  The <a href="https://docs.python.org/3/library/random.html" rel="nofollow noreferrer">random</a> module should have something you could use to construct the key.</span>
<span class="comment-copy">There are numerous ways to accomplish this. Try constructing the key with something from the random module.  If you run into problems, post another question.   <code>key = each_list[0].replace('.', '') + str(random.random())</code></span>
<span class="comment-copy">This is perfect, thanks!</span>
<span class="comment-copy">Or you could create a random list  - <code>n_s = random.sample(list(range(len(data)*5)), len(data))</code> then use <code>for i, each_list in enumerate(data)</code> when iterating and use the enumeration to index the list - <code>key = each_list[0].replace('.', '') + str(n_s[i])</code></span>
