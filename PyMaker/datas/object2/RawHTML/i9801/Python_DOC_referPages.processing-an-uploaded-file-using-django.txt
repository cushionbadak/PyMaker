<div class="post-text" itemprop="text">
<p>I'm attempting to process an uploaded CSV file using Django. The main logic of how I go about doing this is expressed in both the <code>models.py</code> and <code>views.py</code> scripts. Once I've uploaded the file, I'm unable to process any of the content (in my <code>views.py</code>). Here are the two scripts, but if there's any more information I can provide, I'd be happy to. </p>
<p>In my <code>models.py</code> file, I have two classes, one for the document itself, and the other class for the fields in the file.</p>
<p><strong>models.py:</strong></p>
<pre><code>from django.db import models

import os

class Document(models.Model):
    docfile = models.FileField(upload_to='documents')

class DocumentEntry(models.Model):
    document = models.ForeignKey(Document, on_delete=models.CASCADE)
    field = models.CharField(max_length=250, default="TEST")
</code></pre>
<p>Next, in my <code>views.py</code> I get the file that was uploaded via the <code>request.FILES['docfile']</code> and pass it to the <code>handle_files()</code> function. However, when I try to loop through the reader, I'm unable to access any of the elements in the file that was uploaded. </p>
<p><strong>views.py:</strong></p>
<pre><code>from django.shortcuts import render
from django.conf import settings
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse

import csv

from .models import Document, DocumentEntry
from .forms import UploadFileForm


def process_file(request):
    # Handle file upload
    if request.method == 'POST':
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():

            handle_files(request.FILES['docfile'])

            # Redirect to the document list after POST
            return HttpResponseRedirect(reverse('process_files'))
    else:
        form = UploadFileForm()  # A empty, unbound form

    # Load documents for the list page
    documents = Document.objects.all()

    # Render list page with the documents and the form
    return render(
        request,
        'upload/process_files.html',
        {'documents': documents, 'form': form}
    )


def handle_files(csv_file):

    newdoc = Document(docfile=csv_file)
    newdoc.save()

    reader = csv.DictReader(open(csv_file))
    for row in reader:
        field = row['field']
        entry = DocumentEntry(document=newdoc, field=field)
        entry.save()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Updated</strong></p>
<p>Here is full example of handler function:</p>
<pre><code>def handle_files(csv_file):

   newdoc = Document(docfile=csv_file)
   newdoc.save()

   with open(newdoc.docfile.name) as f:
      reader = csv.DictReader(f)
      for row in reader:
         field = row['field']
         entry = DocumentEntry(document=newdoc, field=field)
         entry.save()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">open()</a> expects the path to the file, not the actual file data, which is contained in <code>request.FILES['docfile']</code>.</p>
<p>Replace:</p>
<pre><code>reader = csv.DictReader(open(csv_file))
</code></pre>
<p>with:</p>
<pre><code>import io
io_file = io.TextIOWrapper(csv_file.file)
reader = csv.DictReader(io_file)
</code></pre>
</div>
<span class="comment-copy">Any ideas on how I would get the name? I can create a helper function in <code>models.py</code> to return the filename, but of course, I wouldn't be able to access that function when creating an object.</span>
<span class="comment-copy">I have updated my answer for example of file name function. Seems we also need to use read() from file object.</span>
<span class="comment-copy">Here is what information you can get from uploaded file: file = request.FILES['filename'] file.name           # Gives name file.content_type   # Gives Content type text/html etc file.size           # Gives file's size in byte file.read()         # Reads file</span>
<span class="comment-copy">Thanks Gagik, what is <code>File</code> in your example where <code>newdoc = Document(docfile=File(csv_file.read(), name=csc_file.name))</code></span>
<span class="comment-copy">Oh sorry, I had to point it. It is: from django.core.files.base import  File</span>
<span class="comment-copy">Thanks Lucas, although this appears to give me the following error: <code>iterator should return strings, not bytes (did you open the file in text mode?)</code></span>
<span class="comment-copy">@VincentRusso True, updated my answer with the proper fix.</span>
<span class="comment-copy">thanks again, but it seems that now the program does not enter the <code>for row in reader:</code> loop. Indeed, when I check <code>print(list(reader))</code>, the list is empty. Any thoughts?</span>
<span class="comment-copy">Check if <code>csv_file.file</code> is empty too. That would be very odd.</span>
<span class="comment-copy">Yeah it is, and I have no idea why that would be the case. It may be because I'm passing the <code>request.FILES['docfile']</code> to the <code>handle_files(csv_file)</code> function. It seems when I just try to do what you suggested directly after <code>if form.is_valid()</code>, I get the error: <code>'charmap' codec can't encode character '\u20ac' in position 12588: character maps to &lt;undefined&gt;</code></span>
