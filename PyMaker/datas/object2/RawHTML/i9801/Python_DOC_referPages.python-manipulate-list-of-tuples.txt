<div class="post-text" itemprop="text">
<p>I have a list of tuples with the pattern <code>"id"</code>, <code>"text"</code>, <code>"language"</code> like this:</p></div>
<div class="post-text" itemprop="text">
<p>Basic solution with yeild and zip:</p>
<pre><code>&gt;&gt;&gt; def get_en_it_words(a):
...     for tup1, tup2 in zip(a[0::2], a[1::2]):
...             yield (tup1[0], tup1[1], tup2[1])
... 
&gt;&gt;&gt; a = [('1', 'hello', 'en'),
...  ('1', 'ciao', 'it'),
...  ('2', 'food', 'en'),
...  ('2', 'cibo', 'it')]
&gt;&gt;&gt; list(get_en_it_words(a))
[('1', 'hello', 'ciao'), ('2', 'food', 'cibo')]
</code></pre>
<p>This should give you all <code>'en'</code> words,</p>
<pre><code>&gt;&gt;&gt; a[0::2]
[('1', 'hello', 'en'), ('2', 'food', 'en')]
</code></pre>
<p>And other one <code>'it'</code> words,</p>
<pre><code>&gt;&gt;&gt; a[1::2]
[('1', 'ciao', 'it'), ('2', 'cibo', 'it')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can group the items using a <a href="http://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">defaultdict</a>:</p>
<pre><code>from collections import defaultdict

a = [('1', 'hello', 'en'), ('1', 'ciao', 'it'),
     ('2', 'food', 'en'), ('2', 'cibo', 'it')]

d = defaultdict(list)

for item in a:
    d[item[0]].append(item[1])
</code></pre>
<p>This can then be converted to a list of tuples like this:</p>
<pre><code>b = sorted((k,) + tuple(v) for k, v in d.items())
</code></pre>
<p>However, you may find the <code>defaultdict</code> useful in its own right, since it allows you to easily look up things by <code>id</code>.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> would probably be a good start.</span>
<span class="comment-copy">I tried the code of JuniorCompressor and it is very useful.</span>
