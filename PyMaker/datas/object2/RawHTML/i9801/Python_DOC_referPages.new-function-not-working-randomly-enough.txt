<div class="post-text" itemprop="text">
<pre><code>import random

####################
def ListRearrange(listx):
    listz = listx[:]
     x = len(listx)
     for y in range(x):
               a = random.choice(range(x))
               b = listx.pop(a)
               listx.append(b)

     return listx
####################
list1 = ["Hello", 5000, "60", "Timmothy", 400, "2", "Okay"]
print list1
for g in (1,2,3,4,5,6,7,8,9):         
     p = ListRearrange(list1)
     print p
</code></pre>
<p>Thanks to whoever looks at this. What I am trying to do is create a randomly jumbled list. However when I run it, it doesn't seem very random at all. It is possible I am overlooking something, or that is just as random as it gets. Please get back to me when you have a chance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your shuffle isn’t a fair one. It moves a random item in the list to the end of the list as many times as there are items in the list, but that means the first item only has a slightly less than 1 − ((n − 1) / n)<sup>n</sup> chance of being moved, where in a fair shuffle it would have a (n − 1) / n chance of being moved. For a list of 7 elements, that’s about a 34% chance for the first element to stay in the same place, compared to about a 14% chance in a fair shuffle.</p>
<p>Use a simple, standard shuffle, like <a href="https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle" rel="nofollow noreferrer">Fisher–Yates</a>:</p>
<pre><code>def ListRearrange(l):
    result = l[:]

    for i in range(len(l) - 1):
        swap = random.randrange(i, len(l))
        result[i], result[swap] = result[swap], result[i]

    return result
</code></pre>
<p>Or the built-in <a href="https://docs.python.org/3/library/random.html#random.shuffle" rel="nofollow noreferrer"><code>random.shuffle</code></a>.</p>
</div>
<span class="comment-copy">My Lord I am an idiot.      random.shuffle Wow. Thank you.</span>
