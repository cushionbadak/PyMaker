<div class="post-text" itemprop="text">
<pre><code> class Test(object):

     def __init__(self, store):
         assert isinstance(store, dict)
         self.store = store

     def __getitem__(self, key):
         return self.store[key]
</code></pre>
<p>I try to iter over this class. It is said in <a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow noreferrer">this doc</a>  that implementing __getitem__ should be enough to iter over my Test class. Indeed, when I try to iter over it, it does not tell me that I can't, but I've got a <em>KeyError</em>:</p>
<pre><code>In [10]: a = Test({1:1,2:2})

In [11]: for i in a: print i
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
&lt;ipython-input-11-8c9c9a8afa41&gt; in &lt;module&gt;()
----&gt; 1 for i in a: print i

&lt;ipython-input-9-17212ae08f42&gt; in __getitem__(self, key)
      4         self.store = store
      5     def __getitem__(self, key):
----&gt; 6         return self.store[key]
      7

KeyError: 0
</code></pre>
<ul>
<li><strong>Do you know where this 0 come from ?</strong> (what's going on under the hood)</li>
</ul>
<p>I know I can solve it by adding an __iter__ function:</p>
<pre><code>def __iter__(self):
    return dict.__iter__(self.store)
</code></pre>
<ul>
<li><strong>Is it the best way to solve this problem ?</strong> (I might also inherit from dict class).</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You missed a crucial wording in the documentation you found:</p>
<blockquote>
<p>For <strong><em>sequence types</em></strong>, the accepted keys should be integers and slice objects. <em>[...]</em> [I]f of a value outside the set of indexes <strong><em>for the sequence</em></strong> (after any special interpretation of negative values), <code>IndexError</code> should be raised.</p>
<p><strong>Note</strong>: <code>for</code> loops expect that an <code>IndexError</code> will be raised for illegal indexes to allow proper detection of the end <strong><em>of the sequence</em></strong>.</p>
</blockquote>
<p>Bold italic emphasis is mine. If you accept <em>keys</em>, not integers, you don't have a sequence.</p>
<p>The Python glossary explains more; see the <a href="https://docs.python.org/3/glossary.html#term-sequence" rel="nofollow noreferrer">definition of <em>sequence</em></a>:</p>
<blockquote>
<p>An iterable which supports efficient element access using <strong><em>integer indices via the <code>__getitem__()</code> special method</em></strong> and defines a <code>__len__()</code> method that returns the length of the sequence. <em>[...]</em> Note that <code>dict</code> also supports <code>__getitem__()</code> and <code>__len__()</code>, but is considered a mapping rather than a sequence because the lookups use arbitrary immutable keys rather than integers.</p>
</blockquote>
<p>So sequences accept integer indices, and that's exactly what <code>for</code> provides when iterating <sup>*</sup>. When given an object to iterate over, if there are no other means but <code>__getitem__</code> available, then a special iterator is constructed that starts at <code>0</code> and keeps increasing the counter until <code>IndexError</code> is raised. In pure Python that'd be:</p>
<pre><code>def getitem_iterator(obj):
    getitem = type(obj).__getitem__  # special method, so on the type
    index = 0
    try:
        while True:
            yield getitem(obj, index)
            index += 1
    except IndexError:
        # iteration complete
        return
</code></pre>
<p>The actual implementation is in C, see the <a href="https://hg.python.org/cpython/file/3.5/Objects/iterobject.c" rel="nofollow noreferrer"><code>PySeqIter_Type</code> definition and functions</a>.</p>
<p>Implement the <a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" rel="nofollow noreferrer"><code>__iter__</code> method</a> instead; it is used when present. Since you wrap a dictionary, you could simply return the iterator for that dictionary (use the <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter()</code> function</a> rather than directly call special methods):</p>
<pre><code>def __iter__(self):
    return iter(self.store)
</code></pre>
<hr/>
<p><sup>*</sup> Technically speaking, <code>for</code> doesn't provide this. <code>for</code> just uses <code>iter(obj)</code> and it is <em>that call</em> that produces the special iterator when no <code>__iter__</code> method is available instead.</p>
</div>
<span class="comment-copy">The best way to solve what problem, what that class should be doing? Class has only <code>dict</code> value?</span>
