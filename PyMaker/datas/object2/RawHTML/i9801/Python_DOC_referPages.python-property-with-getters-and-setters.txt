<div class="post-text" itemprop="text">
<p>I am new to Python. </p>
<p>I want to have a class called "Verbosity". It is intended for controlling the amount of printed output of my new Python program. </p>
<p>The verbosity should be constant while my program is running, thus I was intending to initialize the Verbosity object with the level of the desired verbosity. Lets call an instance of this object "verb". </p>
<p>While my program is running, I frequently want to check the verbosity so that the program knows when to print output or not. Thus I want to call verb.high, verb.low, and so on and get back true or false.</p>
<p>Here is some sample code (based on some code in some package I found), but it doesn't work yet in my program:</p>
<pre><code>VERB_QUIET = 0
VERB_LOW = 1
VERB_MEDIUM = 2
VERB_HIGH = 3
VERB_DEBUG = 4

class Verbosity(object):
    """Class used to determine what to print to standard output.

    Attributes:
       level: Determines what level of output to print.
    """
    value = "low"

    def __init__(self, new_value="low"):

        self.level = new_value

    def __getattr__(self, name):
        """Determines whether a certain verbosity level is
        less than or greater than the stored value.

        Args:
           name: The verbosity level at which the info/warning string
              will be output.
        """

        if name is "quiet":
            return self.level &gt;= VERB_QUIET
        elif name is "low":
            return self.level &gt;= VERB_LOW
        elif name is "medium":
            return self.level &gt;= VERB_MEDIUM
        elif name is "high":
            return self.level &gt;= VERB_HIGH
        elif name is "debug":
            return self.level &gt;= VERB_DEBUG

    def __setattr__(self, name, value):
        """Sets the verbosity level

        Args:
           name: The name of what to set. Should always be 'level'.
           value: The value to set the verbosity to.

        Raises:
           ValueError: Raised if either the name or the level is not
              a valid option.
        """

        if name == "level":
            if value == "quiet":
                level = VERB_QUIET
            elif value == "low":
                level = VERB_LOW
            elif value == "medium":
                level = VERB_MEDIUM
            elif value == "high":
                level = VERB_HIGH
            elif value == "debug":
                level = VERB_DEBUG
            else:
                raise ValueError("Invalid verbosity level " + str(value) + " specified.")
            super(Verbosity, self).__setattr__("level", level)
</code></pre>
<p>If you have a better approach, I would be glad to hear that. Still I would  also be interested on how to get the above approach working.</p>
</div>
<div class="post-text" itemprop="text">
<p>Please see the Python in-built <a href="https://docs.python.org/3/howto/logging.html" rel="nofollow noreferrer">logging</a> module. There's no need to re-invent the wheel.</p>
<p>Here's a sample from the docs:</p>
<blockquote>
<pre><code>import logging
logging.warning('Watch out!')  # will print a message to the console
logging.info('I told you so')  # will not print anything
</code></pre>
</blockquote>
<p>If you want to set the logging level so that INFO + higher priority messages are printed:</p>
<pre><code>logging.getLogger().setLevel(logging.INFO)
</code></pre>
<p>I also recommend sticking with the default logging levels listed here:</p>
<blockquote>
<p><a href="https://i.stack.imgur.com/qolSv.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/qolSv.png"/></a></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>While trying to create a more nice sample code as requested by jonrsharpe, to my surprise I got the code from above working. But I still intend to use the logging module of Python... :-) </p>
<p>The problem was mainly how I tried to use the verbosity class. Here in the code below is now included how to use it. (I don't know what I did before exactly, I changed the code a lot...)</p>
<pre><code>class Simulation(object):

    def __init__(self, verbosity_level="low"):

        self.verbosity = Verbosity(verbosity_level)


VERB_QUIET = 0
VERB_LOW = 1
VERB_MEDIUM = 2
VERB_HIGH = 3
VERB_DEBUG = 4

class Verbosity(object):
    value = "low"

    def __init__(self, verbosity_level="low"):

        self.level = verbosity_level

    def __getattr__(self, name):

        if name == "quiet":
            return self.level &gt;= VERB_QUIET
        elif name == "low":
            return self.level &gt;= VERB_LOW
        elif name == "medium":
            return self.level &gt;= VERB_MEDIUM
        elif name == "high":
            return self.level &gt;= VERB_HIGH
        elif name == "debug":
            return self.level &gt;= VERB_DEBUG

    def __setattr__(self, name, value):

        if name == "level":
            if value == "quiet":
                level = VERB_QUIET
            elif value == "low":
                level = VERB_LOW
            elif value == "medium":
                level = VERB_MEDIUM
            elif value == "high":
                level = VERB_HIGH
            elif value == "debug":
                level = VERB_DEBUG
            else:
                raise ValueError("Invalid verbosity level " + str(value) + " specified.")
            super(Verbosity, self).__setattr__("level", level)


sim = Simulation(verbosity_level = "medium");
if sim.verbosity.high: 
    print "Simulation is starting"
</code></pre>
</div>
<span class="comment-copy"><i>"it doesn't work yet"</i> - could you expand on what that <i>means</i>, exactly? Give a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. Note that you shouldn't be comparing strings by <i>identity</i> (<code>x is y</code>) but <i>equality</i> (<code>x == y</code>).</span>
<span class="comment-copy">Use the <code>logger</code>-module.</span>
<span class="comment-copy">You could write a custom <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor</a> to cut down on boilerplate, but using the tried-and-tested standard library functionality is probably a better idea.</span>
<span class="comment-copy">@jonrsharpe : Yes, I did it, and it actually works to my surprise... (see new answer below). Thanks for your help!</span>
<span class="comment-copy">Thank you very much for the detailed answer. That't great that I don't have to reinvent the wheel... :-)</span>
<span class="comment-copy">This is only a useful answer if you explain what you were doing wrong in the original version, what you changed and how that fixed it. Glad you got it sorted, though!</span>
<span class="comment-copy">Right @ jonrsharpe. I also changed the "is" to "==".</span>
<span class="comment-copy">Still I wonder if this is the best way to do it if one wants to implement it by oneself. E.g. there are also the getattr() and setattr() functions, is it really the nicest way to call super(), ...</span>
<span class="comment-copy">No, as suggested in my comment you should look into descriptors.</span>
<span class="comment-copy">@jonrsharpe : I see, thanks for clarifying that! (from your above comment I was not sure if your suggestion was also a 'better' approach or just a suggestion on how to solve the problem/alternative way)</span>
