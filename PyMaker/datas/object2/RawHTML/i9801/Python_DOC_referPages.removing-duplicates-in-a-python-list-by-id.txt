<div class="post-text" itemprop="text">
<p>I build large lists of high-level objects while parsing a tree. However, after this step, I have to remove duplicates from the list and I found this new step very slow in Python 2 (it was acceptable but still a little slow in Python 3). However I know that distinct objects actually have a distinct <em>id</em>. For this reason, I managed to get a <em>much</em> faster code by following these steps:</p>
<ul>
<li>append all objects to a list while parsing;</li>
<li>sort the list with <code>key=id</code> option;</li>
<li>iterate over the sorted list and remove an element if the previous one has the same id.</li>
</ul>
<p>Thus I have a working code which now runs smoothly, but I wonder whether I can achieve this task more directly in Python.</p>
<p><strong>Example.</strong> Let's build two identical objects having the same value but a different <em>id</em> (for instance I will take a <code>fractions.Fraction</code> in order to rely on the standard library):</p>
<pre><code>from fractions import Fraction
a = Fraction(1,3)
b = Fraction(1,3)
</code></pre>
<p>Now, if I try to achieve what I want to do by using the pythonical <code>list(set(...))</code>, I get the wrong result as <code>{a,b}</code> keeps only one of both values (which are identical but have a different <em>id</em>).</p>
<p>My question now is: what is the most pythonical, reliable, short and fast way for removing duplicates by <em>id</em> rather than duplicates by <em>value</em>? <em>Order of the list doesn't matter if it has to be changed.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>You should override the <a href="https://docs.python.org/3/reference/datamodel.html#object.__eq__" rel="nofollow noreferrer"><code>__eq__</code></a> method so that it depends on the objects <code>id</code> rather than its values. But note that your objects must be hashable as well, so you should define a proper <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer"><code>__hash__</code></a> method too.</p>
<pre><code>class My_obj:
    def __init__(self, val):
        self.val = val

    def __hash__(self):
        return hash(self.val)

    def __eq__(self, arg):
        return id(self) == id(arg)

    def __repr__(self):
        return str(self.val)
</code></pre>
<p>Demo:</p>
<pre><code>a = My_obj(5)
b = My_obj(5)

print({a, b})
{5, 5}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Be, careful because discrimating by <code>id</code> may fail with some basic types where python optimizes storage when possible:</p>
<pre><code>a = "foo"
b = "foo"
print(a is b)
</code></pre>
<p>yields</p>
<pre><code>True
</code></pre>
<p>Anyway, if you want to handle standard objects (even non-hashable ones) you can store them in a dictionary with they <code>id</code> as key.</p>
<p>Example with fractions:</p>
<pre><code>from fractions import Fraction
a = Fraction(1,3)
b = Fraction(1,3)

d = dict()

d[id(a)] = a
d[id(b)] = b

print(d.values())
</code></pre>
<p>result:</p>
<pre><code>dict_values([Fraction(1, 3), Fraction(1, 3)])
</code></pre>
</div>
<span class="comment-copy">figured it out! deleted my comments.</span>
<span class="comment-copy"><code>Fraction</code> is a bad example, because if you're trying to do this with a standard library class you can't. You can't change the rules <code>set</code> uses, you'd have a build a set-like class of your own (perhaps a thin wrapper around a dictionary keyed on ID). However, if you're actually using a class you control, you can implement <code>__eq__</code> as shown below.</span>
<span class="comment-copy">This is a very convenient answer as I use my own class; adding <code>__hash__</code> and <code>__eq__</code> should be very easy; in this specific case, can I make <code>__hash__</code> return the <i>id</i> as a quick way of implementing this method (since my little class is a private one and only exists during the execution of a function and actually is even defined in the body of this function)?</span>
<span class="comment-copy">@ThomasBaruchel Why you want to do that? the <code>hash</code> function is the safest way to go for creating hash values for objects. Because it guarantees  to produce random (in python 3) and different values for different variables.</span>
<span class="comment-copy">I was asking that because <code>__hash__</code> needs to return an integer, and in this step my class (which describes a node in a tree) doesn not embed many usable values but rather lists of other nodes; for that reason I was wondering which significant value I could hash. I tried to make <code>__hash__</code> return the <i>id</i> and it works well (still faster than my previous attempt), now with <code>list(set(...))</code>. Is it the way to go?</span>
<span class="comment-copy">@ThomasBaruchel It will work because you don't need the hash value and it'll depend on the <code>__eq__</code> method, so as far as you use <code>id</code> for comparison there is no problem.</span>
