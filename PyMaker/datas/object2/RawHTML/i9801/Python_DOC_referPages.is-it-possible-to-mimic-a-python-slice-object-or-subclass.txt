<div class="post-text" itemprop="text">
<p>I would like to include some metadata into a python slice object, along with adding variables to indicate the index of each element in the slice. The metadata is used to label each element that the slice is retrieving. I know there are other labelled data structures that can be used, but in my project slices are predefined as a sort of subscript for numpy arrays and is re-used in various places. So, for me it makes sense to find a way to incorporate this.</p>
<p>I was thinking of sub-classing <code>slice</code>, but apparently it cannot be <a href="https://stackoverflow.com/questions/10061752/which-classes-cannot-be-subclassed">subclassed</a> which was explained clearly in the answer of the linked question. Has anything changed since then?</p>
<p>What I'd like to do is create a class that looks like:</p>
<pre><code>class Subscript:
    def __init__(self, start, stop, step=None, labels=None):
        self.labels = labels
        self.slc = slice(start, stop, step)

        for i, l in zip(range(start, stop, step), labels):
            setattr(self, l, i)
</code></pre>
<p>and be able to use it like this:</p>
<pre><code>sub = Subscript(0, 5, labels=['s0', 's1', 's2', 's3', 's4'])

list(range(10))[sub]  # [0, 1, 2, 3, 4]

range(10)[sub.s0]  # 0
</code></pre>
<p>is there a way to do this without having to add a <code>__call__</code> method to return the slice? Somehow I doubt this because the array or list taking in the <code>sub</code> through <code>__getitem__</code> wouldn't know what to do with this. I know that I could probably just monkey-patch this information to <code>slice</code>, but am wondering if this type of thing could be done in a class.</p>
<p>Currently, I am defining the slice and slice elements separately like:</p>
<pre><code>sub = slice(0, 5)

s0, s1, s2, s3, s4 = range(5)
</code></pre>
<p>But this approach makes it much harder to process the output of multidimensional arrays into a dict where keys are subscript element combinations in the case of more than 1 <code>sub</code> and values are 1d arrays.</p>
</div>
<div class="post-text" itemprop="text">
<p>Nope, <code>slice</code> objects still can't be sub-classed. I'm saying this based <a href="https://github.com/python/cpython/blob/c3f29f4ad6ca29b1dcd9e551fcdba43d2f00dcd5/Objects/sliceobject.c#L620" rel="nofollow noreferrer">on the flags</a> defined for <code>PySlice_Type</code> in the default Python (<code>3.7</code>) branch:</p>
<pre><code>Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,    /* tp_flags */
</code></pre>
<p>To allow an object to act as a base class the appropriate <a href="https://docs.python.org/3/c-api/typeobj.html#Py_TPFLAGS_BASETYPE" rel="nofollow noreferrer"><code>Py_TPFLAGS_BASETYPE</code></a> would be <code>or</code>ed in there as they are with types defined allowed to. Taking <a href="https://github.com/python/cpython/blob/c3f29f4ad6ca29b1dcd9e551fcdba43d2f00dcd5/Objects/listobject.c#L2645" rel="nofollow noreferrer">lists</a> as an example, their flags are defined as:</p>
<pre><code>Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC |
    Py_TPFLAGS_BASETYPE | Py_TPFLAGS_LIST_SUBCLASS,         /* tp_flags */
</code></pre>
<p>Ignoring the rest, <code>Py_TPFLAGS_BASETYPE</code> is <code>|</code>'ed in there allowing it to act as a base class.</p>
<p>Judging by the fact that I couldn't find this mentioned somewhere in the docs, I'd say it's an implementation detail whose rationale I'm currently not aware of. The only way I believe you <em>might</em> circumvent it is by dropping to <code>C</code> and making your class there.</p>
</div>
<div class="post-text" itemprop="text">
<p>What I ended up doing is subclassed <code>numpy.ndarray</code> because I was only trying to pass the slices into this type of object (could do the same for list), and then reimplemented <code>__getitem__</code> so that if a <code>Subscript</code> object is passed in then the slice will first be extracted before passing onto the parent method.</p>
<p>Looks like:</p>
<pre><code>import numpy as np

class SubArray(np.ndarray):
    def __new__(cls, input_array, subs=None):
        obj = np.asarray(input_array).view(cls)
        obj.subs = subs
        return obj

    def __getitem__(self, *args):
        args = tuple([a.slc if isinstance(a, SubRange) else a for a in args])
        return super().__getitem__(*args)

    def __array_finalize__(self, obj):
        if obj is None:
            return
        self.subs = getattr(obj, 'subs', None)


class Subscript:
    def __init__(self, labels, bounds=None):
        name, elements = labels

        if bounds:
            start, stop = bounds
        else:
            start, stop = 0, len(elements)

        self.size = stop - start
        self.slc = slice(start, stop)
        self.labels = labels
        self.name = name
        self.elements = elements

        for l, i in zip(labels, range(start, stop)):
            setattr(self, l, i)
</code></pre>
<p>And can use like this:</p>
<pre><code>sub = Subscript(('sub', ['s0', 's1', 's2', 's3', 's4']))

SubArray(np.arange(10), subs=sub)[sub]  # SubArray([0, 1, 2, 3, 4])

SubArray(np.arange(10), subs=sub)[sub.s0]  # 0
</code></pre>
<p>This is much closer to the approach that I was avoiding (i.e. using something like <a href="http://xarray.pydata.org/en/stable/" rel="nofollow noreferrer">xarray</a>), but the result is still basically a numpy array and works for me.</p>
</div>
<span class="comment-copy">Please don't use <code>exec</code> to set the attributes dynamically, <code>setattr</code> is much better suited for this. Also, your <code>__init__</code> doesn't have <code>self</code>.</span>
<span class="comment-copy">Thanks! Forgot about that one</span>
<span class="comment-copy">Thanks for this. Looks like this is trickier than I thought. Even monkey-patching <code>slice</code> doesn't seem to be do-able because of this. I just get an <code>AttributeError</code> instead.</span>
<span class="comment-copy">Yup @pbreach if I remember correctly, <code>list.__getitem__</code> (and the other containers should behave similarly) checks explicitly for a <code>slice</code> type as the argument passed to it or <code>int</code> values (at least, objects that provide an <code>__index__</code> method that returns an appropriate <code>int</code>). The best you'd likely be able to do is actually create a new <code>list</code> subtype that allows for custom objects that behave like <code>slice</code>s (by composition maybe?).</span>
<span class="comment-copy">I ended up doing basically what you suggested except by subclassing <code>numpy.ndarray</code> instead of <code>list</code> and posted it here. Works for me!</span>
