<div class="post-text" itemprop="text">
<p>I have the following problem. I have written a function that takes a list as input and creates a dictionary for each element in the list. I then want to append this dictionary to a new list, so I get a list of dictionaries. I am trying to spawn multiple processes for this. My problem here is that I want the different processes to access the list of dictionaries as it is updated by other processes, for example to print something once the has reached a certain length. 
My example would be like this:</p>
<pre><code>import multiprocessing

list=['A', 'B', 'C', 'D', 'E', 'F']

def do_stuff(element):
    element_dict={}
    element_dict['name']=element
    new_list=[]
    new_list.append(element_dict)
    if len(new_list)&gt;3:
        print 'list &gt; 3'

###Main###
pool=multiprocessing.Pool(processes=6)
pool.map(do_stuff, list)
pool.close()
</code></pre>
<p>Right now my problem is that each process creates its own <code>new_list</code>. Is there a way to share the list between processes, such that all dictionaries are appended to the same list? Or is the only way to define the <code>new_list</code> outside of the function?</p>
</div>
<div class="post-text" itemprop="text">
<p>One way is to use a manager object and create your shared list object from it:</p>
<pre><code>from multiprocessing import Manager, Pool

input_list = ['A', 'B', 'C', 'D', 'E', 'F']

manager = Manager()
shared_list = manager.list()

def do_stuff(element):
    global shared_list
    element_dict = {}
    element_dict['name'] = element
    shared_list.append(element_dict)
    if len(shared_list) &gt; 3:
        print('list &gt; 3')

pool = Pool(processes=6)
pool.map(do_stuff, input_list)
pool.close()
</code></pre>
<p>Remember, unlike threads, processes do not share memory space. (When spawned, each process gets its own copy of the memory footprint of the spawning process, and then runs with it.) So they can only communicate via some form of IPC (interprocess communication). In Python, one such method is <code>multiprocessing.Manager</code> and the data structures it exposes, e.g. <code>list</code> or <code>dict</code>. These are used in code as easily as their built-in equivalents, but under the hood utilize some form of IPC (sockets probably).</p>
</div>
<span class="comment-copy">Use a <a href="https://docs.python.org/3/library/multiprocessing.html#pipes-and-queues" rel="nofollow noreferrer">Queue</a>.</span>
<span class="comment-copy">Or an <a href="https://docs.python.org/3.5/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow noreferrer">Array</a></span>
<span class="comment-copy">Thank you! I tried to put in a manager object already, but did not really get it to work...</span>
