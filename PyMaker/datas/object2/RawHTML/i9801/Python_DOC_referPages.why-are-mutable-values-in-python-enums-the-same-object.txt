<div class="post-text" itemprop="text">
<p>While experimenting with different value types for <code>Enum</code> members, I discovered some odd behavior when the values are mutable.</p>
<p>If I define the values of an <code>Enum</code> as different lists, the members still behave similarly to when the <code>Enum</code> values are typical immutable types like <code>str</code> or <code>int</code>, even though I can change the values of the members in place so that the values of the two <code>Enum</code> members are the same:</p>
<pre><code>&gt;&gt;&gt; class Color(enum.Enum):
        black = [1,2]
        blue = [1,2,3]  

&gt;&gt;&gt; Color.blue is Color.black
False
&gt;&gt;&gt; Color.black == Color.blue
False
&gt;&gt;&gt; Color.black.value.append(3)
&gt;&gt;&gt; Color.black
&lt;Color.black: [1, 2, 3]&gt;
&gt;&gt;&gt; Color.blue
&lt;Color.blue: [1, 2, 3]&gt;
&gt;&gt;&gt; Color.blue == Color.black
False
&gt;&gt;&gt; Color.black.value == Color.blue.value
True
</code></pre>
<p>However, if I define the values to be identical lists, each member's value seems to be the same <strong>object</strong>, and thus any mutation of one member's value affects all members:</p>
<pre><code>&gt;&gt;&gt; class Color(enum.Enum):
        black = [1,2,3]
        blue = [1,2,3]

&gt;&gt;&gt; Color.blue is Color.black
True
&gt;&gt;&gt; Color.black == Color.blue
True
&gt;&gt;&gt; Color.black.value.append(4)
&gt;&gt;&gt; Color.black
&lt;Color.black: [1, 2, 3, 4]&gt;
&gt;&gt;&gt; Color.blue
&lt;Color.black: [1, 2, 3, 4]&gt;
&gt;&gt;&gt; Color.blue == Color.black
True
</code></pre>
<p>Why does <code>Enum</code> behave this way?  Is it the intended behavior or is it a bug?</p>
<p><strong>NOTE:</strong> <em>I'm not planning on actually using Enums this way, I was simply experimenting with using non-standard values for Enum members</em></p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/enum.html#duplicating-enum-members-and-values" rel="noreferrer">docs</a>:</p>
<blockquote>
<p>Given two members A and B with the same value (and A defined first), B is an alias to A. By-value lookup of the value of A and B will return A. By-name lookup of B will also return A:</p>
<pre><code>&gt;&gt;&gt; class Shape(Enum):
...     square = 2
...     diamond = 1
...     circle = 3
...     alias_for_square = 2
...
&gt;&gt;&gt; Shape.square
&lt;Shape.square: 2&gt;
&gt;&gt;&gt; Shape.alias_for_square
&lt;Shape.square: 2&gt;
&gt;&gt;&gt; Shape(2)
&lt;Shape.square: 2&gt;
</code></pre>
</blockquote>
<p>This operates by equality, even when the values are mutable. Since you defined equal values for <code>black</code> and <code>blue</code>, with <code>black</code> first, <code>blue</code> is an alias for <code>black</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To complement <a href="https://stackoverflow.com/a/40641327/4952130">@user2357112's answer</a>, take a look in <code>EnumMeta</code>, the metaclass for all <code>Enum</code> classes; it gets a peek at every class definition that has its type and gets a change to alter it. </p>
<p>Specifically, it takes care to  <a href="https://hg.python.org/cpython/file/3.5/Lib/enum.py#l167" rel="nofollow noreferrer">re-assign members with the same value in its <code>__new__</code> method</a>  via simple assignment:</p>
<pre><code>    # If another member with the same value was already defined, the
    # new member becomes an alias to the existing one.
    for name, canonical_member in enum_class._member_map_.items():
        if canonical_member._value_ == enum_member._value_:
            enum_member = canonical_member
            break
</code></pre>
<p>I didn't opt to check the docs and instead looked in the source. Lesson to take: Always check the docs, and if <code>ExplanationNotFound</code> is raised;  check the source :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 Enum class doesn't enforce uniqueness unless you specifically tell it to via the <a href="https://docs.python.org/3/library/enum.html#ensuring-unique-enumeration-values" rel="nofollow noreferrer">unique decorator</a></p>
<p>See also <a href="https://docs.python.org/3/library/enum.html#duplicating-enum-members-and-values" rel="nofollow noreferrer">duplicate values</a>. since <code>blue</code> is identical to <code>black</code>, it just becomes an alias for <code>black</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/enum.html#how-are-enums-different" rel="nofollow noreferrer">From the Python documentation for Enums</a>:</p>
<blockquote>
<p><strong>By default, enumerations allow multiple names as aliases for the same value</strong>. When this behavior isnâ€™t desired, the following decorator can be used to ensure each value is used only once in the enumeration....</p>
</blockquote>
<p>This means that <code>blue</code> is an alias for <code>black</code>. When either one changes, the other must as well. </p>
<p>You can however, force Python to make each enum value unique, by using the <code>enum.unique</code> decorator. Also from the docs:</p>
<blockquote>
<pre><code>&gt;&gt;&gt; from enum import Enum, unique
&gt;&gt;&gt; @unique
 ... class Mistake(Enum):
 ...     one = 1
 ...     two = 2
 ...     three = 3
 ...     four = 3
 ...
 Traceback (most recent call last):
 ...
 ValueError: duplicate values found in &lt;enum 'Mistake'&gt;: four -&gt; three
</code></pre>
</blockquote>
</div>
<span class="comment-copy">It should have been plainly obvious in the second example when I got <code>&lt;Color.black: [1, 2, 3, 4]&gt;</code> as the <code>repr</code> for <code>Color.blue</code>...thanks!</span>
<span class="comment-copy">Useful comment, but a useful answer, IMO.</span>
