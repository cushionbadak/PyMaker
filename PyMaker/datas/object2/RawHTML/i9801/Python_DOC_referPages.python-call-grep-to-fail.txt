<div class="post-text" itemprop="text">
<p>I want to execute this command in Python</p>
<pre><code>grep keyMessage logFile.log &gt; keyMessageFile.log
</code></pre>
<p>This is what I done now</p>
<pre><code>from subprocess import call

keyMessage= 'keyMessage'
call(["grep", keyMessage,  "logFile.log"])
</code></pre>
<p>but I don't know how to add the <code>&gt; keyMessageFile.log</code> part</p>
<p>By the way, the reason why I use grep is because it's much faster than use read file then compare string then write file</p>
<p><strong>#Update</strong>
There is the slower python code I write</p>
<pre><code>keyMessage= 'keyMessage'

with open('logFile.log') as f:
    for line in f:
        with open(keyMessage+ '.txt', 'a') as newFile:
            if(keyMessage not in line):
                continue
            else:
                newFile.write(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way to do this (reasonably safely too) is:</p>
<pre><code>from subprocess import check_call
from shlex import quote
check_call('grep %s logFile.log &gt; keyMessageFile.log' % quote(keyMessage), shell=True)
</code></pre>
<p>However unless you really need the regex matching capabilities of <code>grep</code>, and you end up reading <code>keyMessageFile.log</code> in your program anyway, I don't think the following would be unreasonably slow:</p>
<pre><code>def read_matching_lines(filename, key):
    with open(filename) as fp:
      for line in fp:
        if key in line:
          yield line

for matching_line in read_matching_lines('logFile.log', keyMessage):
    print(matching_line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow noreferrer"><code>subprocess.call</code></a> has a parameter <code>stdout</code>. Pass an file opened for writing to it.</p>
<pre><code>with open("keyMessageFile.log", "w") as o:
    keyMessage= 'keyMessage'
    call(["grep", keyMessage,  "logFile.log"], stdout=o)
</code></pre>
<p><code>subprocess.call</code> is the old API, you should use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run</code></a> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>For me this works:</p>
<pre><code>    import sys
    os.system('grep %s logFile.log &gt; keyMessageFile.log' % 'looking string')
</code></pre>
</div>
<span class="comment-copy">Why call <code>grep</code> from <code>python</code>?</span>
<span class="comment-copy">@MichaelMao Your updated code opens and closes the output file for each line, which will still be slow.</span>
<span class="comment-copy">"<i>unless you really need the regex matching capabilities of grep</i>" - what's wrong with the regex capabilities of python?</span>
<span class="comment-copy">Sorry, I don't understand the 2nd sample you give. the function is named read_matching_lines or read_matching_files and what is matching_line</span>
<span class="comment-copy">I got it and the 2nd sample is vert faster than my python code. Thank you</span>
