<div class="post-text" itemprop="text">
<p>My code </p>
<pre><code>$ python
Python 3.5.2 |Continuum Analytics, Inc.| (default, Jul  2 2016, 17:53:06) 
[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; a = (1, 2)
&gt;&gt;&gt; '%d %d %d' % (0, *a)
'0 1 2'
&gt;&gt;&gt; '%d %d %d' % (*a, 3)
'1 2 3'
&gt;&gt;&gt; '%d %d' % (*a)
  File "&lt;stdin&gt;", line 1
SyntaxError: can't use starred expression here
&gt;&gt;&gt; 
</code></pre>
<p>My question, why?</p>
<p>In a more serious tone: I'd like an answer, or a reference, that details all the ins and outs of using a starred expression, as it happens that I am sometimes surprised from its behaviours...</p>
<h3>Addendum</h3>
<p>To reflect some of the enlightening comments that
immediately followed my question I add the following code</p>
<pre><code>&gt;&gt;&gt; '%d %d' % (, *a)
  File "&lt;stdin&gt;", line 1
    '%d %d' % (, *a)
               ^
SyntaxError: invalid syntax
&gt;&gt;&gt; '%d %d' % (*a,)
'1 2'
&gt;&gt;&gt; 
</code></pre>
<p>(I had tried the <code>(, a)</code> part before posting the original question but I've omitted it 'cause the error was not related to the starring.)</p>
<p>There is a syntax, in python ≥ 3.5, that "just works" but nevertheless I would like some understanding.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's because this:</p>
<pre><code>(a)
</code></pre>
<p>Is just a value surrounded by parenthesis. It's not a new tuple object. So your expression:</p>
<pre><code>&gt;&gt;&gt; '%d %d' % (*a)
</code></pre>
<p>will get translated to:</p>
<pre><code>&gt;&gt;&gt; '%d %d' % * a
</code></pre>
<p>which is obviously wrong in terms of python syntax.</p>
<p>In order to create a new Tuple, with one expression as an initializer, you need to add a '<code>,</code>' after it:</p>
<pre><code>&gt;&gt;&gt; '%d %d' % (*a,)
</code></pre>
<p><em>Note: unless <code>a</code> is a generator, in this particular situation you could just type:</em></p>
<pre><code>&gt;&gt;&gt; '%d %d' % a
</code></pre>
<p>Also, if I may suggest something: you could start using new-style formating expressions. They are great!</p>
<pre><code>&gt;&gt;&gt; "{} {}".format(*a)
</code></pre>
<p>You can read more about them in those <a href="https://docs.python.org/3/library/string.html#custom-string-formatting" rel="noreferrer" title="Python Documentation: custom string formatting">t</a>w<a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="noreferrer" title="Python Documentation: format string syntax">o</a> paragraphs of python documentation, also there is <a href="https://pyformat.info/" rel="noreferrer">this</a> great website. The line above uses argument unpacking mechanism described below.</p>
<h2>Starred Expressions</h2>
<p>There are many more uses to starred expression than just creating a new list/tuple/dictionary. Most of them are described in <a href="https://www.python.org/dev/peps/pep-3132/" rel="noreferrer" title="PEP 3132">this PEP</a>, and <a href="https://www.python.org/dev/peps/pep-0448/" rel="noreferrer" title="PEP 448">this one</a></p>
<p>All of them come down to two kinds:</p>
<p>RValue unpacking:</p>
<pre><code>&gt;&gt;&gt; a, *b, c = range(5)
# a = 0
# b = [1, 2, 3]
# c = 4
&gt;&gt;&gt; 10, *range(2)
(10, 0, 1)
</code></pre>
<p>Iterable / dictionary object initialization <em>(notice that you can unpack dictionaries inside lists too!)</em>:</p>
<pre><code>&gt;&gt;&gt; [1, 2, *[3, 4], *[5], *(6, 7)]
[1, 2, 3, 4, 5, 6, 7]
&gt;&gt;&gt; (1, *[2, 3], *{"a": 1})
(1, 2, 3, 'a')
&gt;&gt;&gt; {"a": 1, **{"b": 2, "c": 3}, **{"c": "new 3", "d": 4}}
{'a': 1, 'b': 2, 'c': 'new 3', 'd': 4}
</code></pre>
<p>Of course, the most often seen use is arguments unpacking:</p>
<pre><code>positional_arguments = [12, "a string", (1, 2, 3), other_object]
keyword_arguments = {"hostname": "localhost", "port": 8080}
send(*positional_arguments, **keyword_arguments)
</code></pre>
<p>which would translate to this:</p>
<pre><code>send(12, "a string", (1, 2, 3), other_object, hostname="localhost", port=8080)
</code></pre>
<p>This topic was already covered in great extent in another Stack Overflow <a href="https://stackoverflow.com/questions/3394835/args-and-kwargs">question</a>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>My question, why?</p>
</blockquote>
<p>Because your python syntax doesn't allow that. It's defined that way, so there's no real "why".</p>
<p>also, it's unnecessary. </p>
<pre><code>"%d %d" % a
</code></pre>
<p>would work.</p>
<p>So, you'd need to convert your expansion to a tuple – and the right way of doing that would be, as pointed out by Lafexlos, be </p>
<pre><code>"%d %d" % (*a,)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's because:</p>
<pre><code>&gt;&gt;&gt; '%d %d' % (*a)
</code></pre>
<p>Can be just:</p>
<pre><code>&gt;&gt;&gt; '%d %d' %a
</code></pre>
<p>Of course then able to do:</p>
<pre><code>&gt;&gt;&gt; '%d %d' % (*a,)
</code></pre>
<p>But then:</p>
<pre><code>&gt;&gt;&gt; (*a,)==a
True
&gt;&gt;&gt; 
</code></pre>
<p>Or you can do:</p>
<pre><code>&gt;&gt;&gt; '%d %d' % [*a]
</code></pre>
<p>But then:</p>
<pre><code>&gt;&gt;&gt; [*a]
[1, 2]
&gt;&gt;&gt; a
(1, 2)
&gt;&gt;&gt; 
</code></pre>
<p>So:</p>
<pre><code>&gt;&gt;&gt; tuple([*a])==a
True
</code></pre>
</div>
<span class="comment-copy"><code>(*a,)</code> Note the comma at the end to make it tuple.</span>
<span class="comment-copy">@MarcusMüller extending unpacking (for <code>*</code> and <code>**</code> on the RHS)  was 3.5. And the correct syntax is  <code>(*a,)</code>...</span>
<span class="comment-copy">@JonClements <b>I</b> know. That's why I asked gboffi above to clarify the python version she/he uses!!</span>
<span class="comment-copy">Take a look at the "Unpacking Iterables" documentation on SO <a href="https://stackoverflow.com/documentation/python/809/compatibility-between-python-3-and-python-2/2845/unpacking-iterables#t=201611181159516910043">stackoverflow.com/documentation/python/809/…</a></span>
<span class="comment-copy">Interestingly, the <code>format()</code> function does not have this issue, i.e. <code>'{:d} {:d}'.format(*a)</code> --&gt; <code>'1, 2'</code>.  The issue appears related to the <code>%</code> string formatter.</span>
<span class="comment-copy">The interesting part is if you read the specification. I don't it says that you just can drop parentheses like that.</span>
<span class="comment-copy">@skyking Have look at the edit. :)</span>
<span class="comment-copy">Considering the OP was showing successful input/output using <code>*a</code> and was asking about why <code>(*a)</code> specifically didn't work - it's safe to assume they were using 3.5 or else there'd be errors in the original code posted and not just for that specific case.</span>
<span class="comment-copy">@JonClements haaaah you're right. I need to change the answer.</span>
<span class="comment-copy">@skyking just saw that, and tagged the question accordingly. Thanks!</span>
<span class="comment-copy">Re <code>"%d %d" % a</code>, my <i>real</i> use case involves a generator expression…. In the question I wanted to keep things simple and, moreover, I really want to know the details of unpacking</span>
