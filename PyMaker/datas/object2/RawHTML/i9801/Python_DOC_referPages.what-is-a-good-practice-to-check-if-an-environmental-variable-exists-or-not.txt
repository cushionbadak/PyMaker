<div class="post-text" itemprop="text">
<p>I want to check my environment for the existence of a variable, say <code>"FOO"</code>, in Python. For this purpose, I am using the <code>os</code> standard library. After reading the library's documentation, I have figured out 2 ways to achieve my goal:</p>
<p>Method 1:  </p>
<pre><code>if "FOO" in os.environ:
    pass
</code></pre>
<p>Method 2:</p>
<pre><code>if os.getenv("FOO") is not None:
    pass
</code></pre>
<p>I would like to know which method, if either, is a good/preferred conditional and why.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the first; it directly tries to check if something is defined in <code>environ</code>. Though the second form works equally well, it's lacking semantically since you get a value back if it exists and <em>only</em> use it for a comparison. </p>
<p>You're trying to see if something is present <em>in</em> <code>environ</code>, why would you <em>get</em> just to compare it and then <em>toss it away</em>?  </p>
<p>That's exactly what <code>getenv</code> does:</p>
<blockquote>
<p><em>Get an environment variable</em>, return <code>None</code> if it doesn't exist. The
  optional second argument can specify an alternate default.</p>
</blockquote>
<p>(this also means your check could just be <code>if getenv("FOO")</code>)</p>
<p>you don't want to <em>get it</em>, you want to check for it's existence. </p>
<p>Either way, <code>getenv</code> is just a wrapper around <code>environ.get</code> but you don't see people checking for membership in mappings with:</p>
<pre><code>from os import environ
if environ.get('Foo') is not None:
</code></pre>
<p>To summarize, use: </p>
<pre><code>if "FOO" in os.environ:
    pass
</code></pre>
<p>if you <em>just</em> want to check for existence, while, use <code>getenv("FOO")</code> if you actually want to do something with the value you might get.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a case for either solution, depending on what you want to do conditional on the existence of the environment variable.</p>
<h1>Case 1</h1>
<p>When you want to take different actions purely based on the existence of the environment variable, without caring for its value, the first solution is the best practice. It succinctly describes what you test for: is 'FOO' in the list of environment variables.</p>
<pre><code>if 'KITTEN_ALLERGY' in os.environ:
    buy_puppy()
else:
    buy_kitten()
</code></pre>
<h1>Case 2</h1>
<p>When you want to set a default value if the value is not defined in the environment variables the second solution is actually useful, though not in the form you wrote it:</p>
<pre><code>server = os.getenv('MY_CAT_STREAMS', 'youtube.com')
</code></pre>
<p>or perhaps</p>
<pre><code>server = os.environ.get('MY_CAT_STREAMS', 'youtube.com')
</code></pre>
<p>Note that if you have several options for your application you might want to look into <a href="https://docs.python.org/3/library/collections.html#collections.ChainMap" rel="noreferrer"><code>ChainMap</code></a>, which allows to merge multiple dicts based on keys. There is an example of this in the <code>ChainMap</code> documentation:</p>
<pre><code>[...]
combined = ChainMap(command_line_args, os.environ, defaults)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To be on the safe side use</p>
<pre><code>os.getenv('FOO') or 'bar'
</code></pre>
<p>A corner case with the above answers is when the environment variable is set but is empty</p>
<p>For this special case you get</p>
<pre><code>print(os.getenv('FOO', 'bar'))
# prints nothing - though you expected `bar`
</code></pre>
<p>or </p>
<pre><code>if "FOO" in os.environ:
    print("FOO is here")
# prints FOO is here - however its not
</code></pre>
<p>To avoid this just use <strong><code>or</code></strong></p>
<pre><code>os.getenv('FOO') or 'bar'
</code></pre>
<p>Then you get</p>
<pre><code>print(os.getenv('FOO') or 'bar')
# bar
</code></pre>
<p><strong>When do we have empty environment variables?</strong></p>
<p>You forgot to set the value in the <code>.env</code> file</p>
<pre><code># .env
FOO=
</code></pre>
<p>or exported as</p>
<pre><code>$ export FOO=
</code></pre>
<p>or forgot to set it in <code>settings.py</code> </p>
<pre><code># settings.py
os.environ['FOO'] = ''
</code></pre>
</div>
<span class="comment-copy">It is primarily opinion based. Both serve the same purpose. I will prefer method 1 as it is cleaner</span>
<span class="comment-copy">I can't say there's anything in it. Pick one (flip a coin?) and reevaluate later if it turns out not to work. Frankly I think you've spent more time typing this question than you'd save either way!</span>
<span class="comment-copy">@Ayoub: I think you forgot to see question <i>"What is a good practice to check if an <b>environmental variable exists</b> or not in Python?"</i></span>
<span class="comment-copy">Opinion based. Method 1 syntax serves better, since you ask if <code>foo</code> is in the env vars, not if seeking for <code>foo</code> results in <code>None</code> values.</span>
<span class="comment-copy">But that way might not be obvious, unless you're Dutch...</span>
<span class="comment-copy">Thanks for your explanation. I will keep this in mind.</span>
