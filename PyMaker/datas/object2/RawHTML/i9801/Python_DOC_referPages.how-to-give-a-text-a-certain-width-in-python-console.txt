<div class="post-text" itemprop="text">
<p>I have this code (printing the occurrence of the all permutations in  a string)</p>
<pre><code>def splitter(str):
    for i in range(1, len(str)):
        start = str[0:i]
        end = str[i:]
        yield (start, end)
        for split in splitter(end):
            result = [start]
            result.extend(split)
            yield result    

el =[];

string = "abcd"
for b in splitter("abcd"):
    el.extend(b);

unique =  sorted(set(el));

for prefix in unique:
    if prefix != "":
        print "value  " , prefix  , "- num of occurrences =   " , string.count(str(prefix));
</code></pre>
<p>I want to print all the permutation occurrence there is in string varaible.</p>
<p>since the permutation aren't in the same length i want to fix the width and print it in a nice not like this one:</p>
<pre><code>value   a - num of occurrences =    1
value   ab - num of occurrences =    1
value   abc - num of occurrences =    1
value   b - num of occurrences =    1
value   bc - num of occurrences =    1
value   bcd - num of occurrences =    1
value   c - num of occurrences =    1
value   cd - num of occurrences =    1
value   d - num of occurrences =    1
</code></pre>
<p>How can I use <code>format</code> to do it? </p>
<p>I found these posts but it didn't go well with alphanumeric strings:</p>
<p><a href="https://stackoverflow.com/questions/8424474/python-string-formatting-fixed-width">python string formatting fixed width</a></p>
<p><a href="https://stackoverflow.com/questions/5138062/setting-fixed-length-with-python">Setting fixed length with python</a></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>EDIT 2013-12-11</strong> - This answer is very old. It is still valid and correct, but people looking at this should prefer the <a href="https://docs.python.org/2/library/string.html#format-string-syntax" rel="noreferrer">new format syntax</a>.</p>
<p>You can use <a href="http://docs.python.org/library/stdtypes.html#string-formatting" rel="noreferrer">string formatting</a> like this:</p>
<pre><code>&gt;&gt;&gt; print '%5s' % 'aa'
   aa
&gt;&gt;&gt; print '%5s' % 'aaa'
  aaa
&gt;&gt;&gt; print '%5s' % 'aaaa'
 aaaa
&gt;&gt;&gt; print '%5s' % 'aaaaa'
aaaaa
</code></pre>
<p>Basically:</p>
<ul>
<li>the <code>%</code> character informs python it will have to substitute something to a token</li>
<li>the <code>s</code> character informs python the token will be a string</li>
<li>the <code>5</code> (or whatever number you wish) informs python to pad the string with spaces up to 5 characters.</li>
</ul>
<p>In your specific case a possible implementation could look like:</p>
<pre><code>&gt;&gt;&gt; dict_ = {'a': 1, 'ab': 1, 'abc': 1}
&gt;&gt;&gt; for item in dict_.items():
...     print 'value %3s - num of occurances = %d' % item # %d is the token of integers
... 
value   a - num of occurances = 1
value  ab - num of occurances = 1
value abc - num of occurances = 1
</code></pre>
<p><strong>SIDE NOTE:</strong> Just wondered if you are aware of the existence of the <a href="http://docs.python.org/library/itertools.html" rel="noreferrer"><code>itertools</code> module</a>. For example you could obtain a list of all your combinations in one line with:</p>
<pre><code>&gt;&gt;&gt; [''.join(perm) for i in range(1, len(s)) for perm in it.permutations(s, i)]
['a', 'b', 'c', 'd', 'ab', 'ac', 'ad', 'ba', 'bc', 'bd', 'ca', 'cb', 'cd', 'da', 'db', 'dc', 'abc', 'abd', 'acb', 'acd', 'adb', 'adc', 'bac', 'bad', 'bca', 'bcd', 'bda', 'bdc', 'cab', 'cad', 'cba', 'cbd', 'cda', 'cdb', 'dab', 'dac', 'dba', 'dbc', 'dca', 'dcb']
</code></pre>
<p>and you could get the number of occurrences by using <code>combinations</code> in conjunction with <code>count()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I find using <code>str.format</code> much more elegant:</p>
<pre><code>&gt;&gt;&gt; '{0: &lt;5}'.format('ss')
'ss   '
&gt;&gt;&gt; '{0: &lt;5}'.format('sss')
'sss  '
&gt;&gt;&gt; '{0: &lt;5}'.format('ssss')
'ssss '
&gt;&gt;&gt; '{0: &lt;5}'.format('sssss')
'sssss'
</code></pre>
<p>If you like the string to be align to the right use <code>&gt;</code> instead of <code>&lt;</code>:</p>
<pre><code>&gt;&gt;&gt; '{0: &gt;5}'.format('ss')
'   ss'
</code></pre>
<p>Edit:
As mentioned in the comments: the 0 indicates the index of the format argument. </p>
</div>
<div class="post-text" itemprop="text">
<p><em>Originally posted as an edit to @0x90's answer, but it got rejected for deviating from the post's original intent and recommended to post as a comment or answer, so I'm including the short write-up here.</em></p>
<p>In addition to the answer from @0x90, the syntax can be made more flexible, by using a variable for the width (as per @user2763554's comment):</p>
<pre><code>width=10
'{0: &lt;{width}}'.format('sss', width=width)
</code></pre>
<p>Further, you can make this expression briefer, by only using numbers and relying on the order of the arguments passed to <code>format</code>:</p>
<pre><code>width=10
'{0: &lt;{1}}'.format('sss', width)
</code></pre>
<p>Or even leave out all numbers for maximal, potentially non-pythonically implicit, compactness:</p>
<pre><code>width=10
'{: &lt;{}}'.format('sss', width)
</code></pre>
<hr/>
<h3>Update 2017-05-26</h3>
<p>With <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="noreferrer">the introduction of formatted string literals</a> ("f-strings" for short) in Python 3.6, it is now possible to access previously defined variables with a briefer syntax:</p>
<pre><code>&gt;&gt;&gt; name = "Fred"
&gt;&gt;&gt; f"He said his name is {name}."
'He said his name is Fred.'
</code></pre>
<p>This also applies to string formatting</p>
<pre><code>&gt;&gt;&gt; width=10
&gt;&gt;&gt; string = 'sss'
&gt;&gt;&gt; f'{string: &lt;{width}}'
'sss       '
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>format</code> is definitely the most elegant way, but afaik you can't use that with python's <code>logging</code> module, so here's how you can do it using the <code>%</code> formatting:</p>
<pre><code>formatter = logging.Formatter(
    fmt='%(asctime)s | %(name)-20s | %(levelname)-10s | %(message)s',
)
</code></pre>
<p>Here, the <code>-</code> indicates left-alignment, and the number before <code>s</code> indicates the fixed width.</p>
<p>Some sample output:</p>
<pre><code>2017-03-14 14:43:42,581 | this-app             | INFO       | running main
2017-03-14 14:43:42,581 | this-app.aux         | DEBUG      | 5 is an int!
2017-03-14 14:43:42,581 | this-app.aux         | INFO       | hello
2017-03-14 14:43:42,581 | this-app             | ERROR      | failed running main
</code></pre>
<p>More info at the docs here: <a href="https://docs.python.org/2/library/stdtypes.html#string-formatting-operations" rel="noreferrer">https://docs.python.org/2/library/stdtypes.html#string-formatting-operations</a></p>
</div>
<div class="post-text" itemprop="text">
<p>try to use as a pattern following expression</p>
<pre><code>def aaa(i):
return i*10/2

for i in range(5):
    print('{:&gt;50}{:&gt;20}:{:&gt;20.4f}'.format('Value of aaa function for i=',10**i, aaa(10**i)))

                  Value of aaa function for i=                   1:              5.0000
                  Value of aaa function for i=                  10:             50.0000
                  Value of aaa function for i=                 100:            500.0000
                  Value of aaa function for i=                1000:           5000.0000
                  Value of aaa function for i=               10000:          50000.0000
</code></pre>
</div>
<span class="comment-copy">what about print '%10s' % 'mystring'</span>
<span class="comment-copy">Surprised that <code>"\t"</code> is not listed as an option in any solution.</span>
<span class="comment-copy">You should perhaps mention that negative numbers give left-justified padded output; this is hardly intuitive for a beginner.</span>
<span class="comment-copy">+1 for @tripleee, without your negative numbers give left-justified comment I would have been hitting my head longer... thx m8.</span>
<span class="comment-copy">This is far more intuitive and concise than the new str.format. I don't understand why there is this push in python towards convolution</span>
<span class="comment-copy">Is there a way to fill in the blank spaces with a specific character? For example, if we need to print "05" instead of " 5"</span>
<span class="comment-copy">Additionally, the 0 indicates the position of the format argument, so you can do two other things:     <code>'{&lt;5}'.format('ss')</code> <code>'ss   '</code> just like before, but without the 0, does the same thing or     <code>'Second {1: &lt;5} and first {0: &lt;5}'.format('ss', 'sss')</code> <code>'Second sss   and first ss   '</code> so you can reorder or even output the same variable many times in a single output string.</span>
<span class="comment-copy">I can no longer edit the previous comment, which needs it. <code>{&lt;5}</code> does not work, but <code>{: &lt;5}</code> does work without the index value.</span>
<span class="comment-copy">Here's the Python <a href="https://docs.python.org/2/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">Format Specification Mini-Language</a> describing these format strings and additional options. For quick reference, the space in <code>{0: &lt;5}</code> is the <code>[fill]</code>  , the <code>&lt;</code> is <code>[align]</code>, and <code>5</code> is <code>[width]</code></span>
<span class="comment-copy">That 5 can be a variable substitution <code>&gt;&gt;&gt; print width   20   &gt;&gt;&gt; print "{0: &lt;{width}}".format("ssssss", width=width).split('\n')   ['ssssss              ']   &gt;&gt;&gt;</code></span>
<span class="comment-copy">You can also use numbers and just list the variables in order <code>width=10; "{0: &lt;{1}}".format('sss', width)</code>. Or even leave out the numbers <code>'{: &lt;{}}'.format('sss', width)</code></span>
