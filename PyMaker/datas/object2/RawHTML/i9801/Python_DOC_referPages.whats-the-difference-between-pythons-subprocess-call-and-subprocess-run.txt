<div class="post-text" itemprop="text">
<p>I've been trying to understand for a while now what's the difference between <code>subprocess.call</code> and <code>subprocess.run</code>. I know the last one is new on Python 3.5 and both are based on <code>subprocess.Popen</code>, but I'm not able to understand the difference yet.</p>
</div>
<div class="post-text" itemprop="text">
<p>The definition of <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="noreferrer"><code>subprocess.call()</code></a> clearly mentions:</p>
<blockquote>
<p>It is equivalent to:
  <code>run(...).returncode</code>
  (except that the <em>input</em> and <em>check</em> parameters are not supported)</p>
</blockquote>
<p>As the <a href="https://docs.python.org/3/library/subprocess.html#older-high-level-api" rel="noreferrer">Python 3.5's subprocess document</a> says:</p>
<blockquote>
<p>Prior to Python 3.5, these three functions (i.e. <code>.call()</code>, <code>.check_call()</code>, <code>.check_output()</code>) comprised the high level API to subprocess. You can now use <code>run()</code> in many cases, but lots of existing code calls these functions.</p>
</blockquote>
<hr/>
<p>It is a common practice that when some functions are replaced, they are not instantly deprecated but there is a support window for them for some versions. This helps in preventing the breakage of older code when the language version is upgraded. I do not know whether <code>.call()</code> is going to be replaced in the future or not. But based on the document, what I know is that they are pretty much same.</p>
</div>
<span class="comment-copy">just check the documentation: call: This is equivalent to:  run(...).returncode  (except that the input and check parameters are not supported)</span>
