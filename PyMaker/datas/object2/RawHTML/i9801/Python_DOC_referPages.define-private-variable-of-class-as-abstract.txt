<div class="post-text" itemprop="text">
<p>I want to know what is the correct way to make my class's private variables as abstract. Let me summarize the properties of my variable:</p>
<ul>
<li>Class variable</li>
<li>private</li>
<li>abstract</li>
</ul>
<p>Structure of my classes is like:</p>
<pre><code>from abc import ABCMeta

class AbstractClass(ABCMeta):
    __private_abstract_property = None   # Needs this as private abstract class variable
    # ... some functions


class ParentClass(AbstractClass):   # inherits `AbstractClass`
    # .. some more functions


class ChildClass1(ParentClass):    # inherits `ParentClass`
    __private_abstract_property = 'value1'   # value to be initialized here


class ChildClass2(ParentClass):    # inherits `ParentClass`
    __private_abstract_property = 'value2'
</code></pre>
<p>What is the correct way to achieve this? </p>
<p>One way is to use <a href="https://docs.python.org/2/library/abc.html#abc.abstractproperty" rel="nofollow noreferrer"><code>abc.abstractproperty</code></a> decorator as:</p>
<pre><code>class AbstractClass(ABCMeta):
    @abstractproperty
    def __private_abstract_property(self):
        ...
</code></pre>
<p>Or, as mentioned in answers to <a href="https://stackoverflow.com/a/38732834/2063361">Abstract Attributes in Python</a> as:</p>
<pre><code>class AbstractClass(ABCMeta):
    __private_abstract_property = NotImplemented
</code></pre>
<p>I want to know the right way to achieve this (any approach even apart from what I mentioned is welcomed). </p>
<hr/>
<p><strong>Edit:</strong> Here is some description of what I am trying to do:</p>
<ul>
<li><p>I have a manager <code>AbstractClass</code> which has some set operation related to the database. It should be abstract as I do not want any direct object of this class. Also it has some functions with no definition</p></li>
<li><p><code>ParentClass</code> is derived from the <code>AbstractClass</code>. It will have some set of function related to fetching particular items from database. Again this class also don't know about the database it is dealing with.</p></li>
<li><p>The <code>ChildClass</code> will be actually having the database engine with which it should interact with. As there can be different engines holding same kind of information, I will set the connection name here and based on this connection as source, <code>ParentClass</code>'s function will fetch information from database. Also, <code>ChildClass</code> can have additional functions apart from <code>ParentClass</code></p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>There is <em>no privacy model</em> in Python. Double-underscore names are not private in the sense that a Java or C# name is private; such names are <em>class private</em>.</p>
<p>Class private means they are protected (by prefixing their name with the class name) from accidental overriding in a subclass. This means that there is <strong>absolutely no point</strong> in putting double-underscore names in an abstract class; subclasses should never use the exact same name.</p>
<p>See the <a href="https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers" rel="nofollow noreferrer"><em>Reserved classes of identifiers</em> section</a> part of the reference documentation:</p>
<blockquote>
<p><code>__*</code><br/>
  Class-private names. Names in this category, when used within the context of a class definition, are re-written to use a mangled form to help avoid name clashes between “private” attributes of base and derived classes.</p>
</blockquote>
<p>You should not put <em>anything</em> private in a abstract base class anyway. ABCs are akin to interfaces, documenting the <em>public</em> API subclasses should provide.</p>
<p>So, even if you gave names a <em>single</em> leading underscore (signalling, by convention only, that a name is part of the internal implementation and can't be relied upon to remain available in other implementations or future versions), these should not be part of an ABC; it is not the purview of an abstract base class to dictate how subclasses implement the methods and properties proscribed.</p>
</div>
<span class="comment-copy">This sounds like an <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY Problem</a> precipitated by an attempt to write Java in Python. What task are you trying to achieve?</span>
<span class="comment-copy">@TigerhawkT3 Made an edit in the question</span>
<span class="comment-copy">Ok, Let's say if I am okay with going with public variable (by convention), then I should be using <code>@abstractproperty</code> property decorator?</span>
<span class="comment-copy">@MoinuddinQuadri: yes, then you can document that you want an attribute with <code>@abstractproperty</code>. Note that there is no enforcement how things are implemented, only that the name is there, for both <code>@abstractmethod</code> and <code>@abstractproperty</code>.</span>
<span class="comment-copy">But in that case it will be instance variable, but I want it to be class variable. I made an edit in the question at the last. May be it will help you understand what I am trying to do</span>
<span class="comment-copy">@MoinuddinQuadri: no, abstract classes say nothing about instance vs class variables, just that the name needs to exist.</span>
<span class="comment-copy">@MoinuddinQuadri: your <code>ParentClass</code> and <code>ChildClass</code> classes are <i>implementations</i>. If <code>ParentClass</code> needs a certain name to be set on the class, then that's an implementation detail. That's not part of the public interface of the ABC.</span>
