<div class="post-text" itemprop="text">
<p>I'm trying to get my feet wet with pickle, so I write a little sample code like this:</p>
<pre><code>class start(tk.Frame):
    def __init__(self,*args,**kwargs):
        tk.Frame.__init__(self,*args,**kwargs)
        frame = tk.Frame(self,width=600,height=600)
        self.val = 0
        self.plusButton = tk.Button(self,text="plus",command=self.plus)
        self.plusButton.pack()
        self.valLabel = tk.Label(self)
        self.valLabel.pack()
        self.saveButton = tk.Button(self,text="save",command=self.save)
        self.saveButton.pack()
        self.loadButton = tk.Button(self,text="load",command=self.load)
        self.loadButton.pack()
    def load(self):
        self.__dict__ = pickle.load(open( "testtesttest.p", "rb" ))
    def plus(self):
        self.val += 1 
        self.valLabel.config(text="%d"%(self.val))
    def save(self):
        pickle.dump(self.__getstate__, open( "testtesttest.p", "wb" ))

    def __getstate__(self):
        return self.__getstate__


if __name__=='__main__':
   root = tk.Tk()

   start(root).pack()
   root.mainloop()
</code></pre>
<p>So the goal of this app is once I hit the plusbutton, there will be an increasing number on the screen. And if I save it, close the window, reopen it, and hit the load button, I will see the last time the number I increased to. I'm very new to pickle, and the current code gives this back to me:</p>
<pre><code>    Exception in Tkinter callback
Traceback (most recent call last):
File "/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/tkinter/__init__.py", line 1550, in __call__return self.func(*args)
File "/Users/caoanjie/pickleDemotry.py", line 18, in load 
self.__dict__ = pickle.load(open( "testtesttest.p", "rb" ))pickle.
UnpicklingError: state is not a dictionary
</code></pre>
<p>I wonder what the problem is here. Also, I see a lot of tutorials or sample code online that does things like:</p>
<pre><code>with open('save_game.dat', 'wb') as f:
    player= pickle.load
</code></pre>
<p>What does <code>with</code> mean?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem can be simplified to a small class that doesn't use tkinter at all:</p>
<pre><code>&gt;&gt;&gt; class Foo:
...     def __getstate__(self):
...         print('getstate')
...         return self.__getstate__
... 
&gt;&gt;&gt; obj = pickle.loads(pickle.dumps(Foo().__getstate__))
getstate
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
_pickle.UnpicklingError: state is not a dictionary
</code></pre>
<p>You are pickling the <code>__getstate__</code> instance method, not the full state of the <code>start</code> class. Python lets you do that, assuming that you also implement a <code>__setstate__</code> method that knows how to rebuild an object from that information. From the <a href="https://docs.python.org/3/library/pickle.html#object.__setstate__" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>Upon unpickling, if the class defines __setstate__(), it is called with the unpickled state. In that case, there is no requirement for the state object to be a dictionary. Otherwise, the pickled state must be a dictionary and its items are assigned to the new instanceâ€™s dictionary.</p>
</blockquote>
<p>When you unpickle, pickle creates a new instance of <code>state</code> but since the class has no <code>__setstate__</code> method, pickle tries to restore the object's <code>__dict__</code>. That fails because the unpickled object is an instance method, not a <code>dict</code>. And this shows a bigger problem with your approach.</p>
<p><code>pickle</code> recreates entire objects, it doesn't restore into existing objects. In your case, if you pickled the entire <code>start</code> object, it would restore a second <code>start</code> object in addition to the one you created yourself. You could assign that object's <code>__dict__</code> to your <code>__dict__</code>, but that is a very risky proposition. You would loose the entire state of your Frame object in favor of what happened to be in the object you pickled. Its likely impossible to pickle the entire object anyway because tkinter is a C extension module.</p>
<p>Instead, you should separate the data you want to save and restore from the tkinter object you happen to use to interact with the user. This is a common programming rule: separate data from presentation. Here, I have a class holding data and I can save and restore it separate from the tkinter class. </p>
<pre><code>import tkinter as tk
import pickle

class State:
    def __init__(self):
        self.val = 0


class start(tk.Frame):
    def __init__(self,*args,**kwargs):
        tk.Frame.__init__(self,*args,**kwargs)
        frame = tk.Frame(self,width=600,height=600)
        self.state = State()
        self.plusButton = tk.Button(self,text="plus",command=self.plus)
        self.plusButton.pack()
        self.valLabel = tk.Label(self)
        self.valLabel.pack()
        self.saveButton = tk.Button(self,text="save",command=self.save)
        self.saveButton.pack()
        self.loadButton = tk.Button(self,text="load",command=self.load)
        self.loadButton.pack()
    def load(self):
        self.state = pickle.load(open( "testtesttest.p", "rb" ))
        self.valLabel.config(text="%d"%(self.state.val))
    def plus(self):
        self.state.val += 1 
        self.valLabel.config(text="%d"%(self.state.val))
    def save(self):
        pickle.dump(self.state, open( "testtesttest.p", "wb" ), 4)

if __name__=='__main__':
   root = tk.Tk()

   start(root).pack()
   root.mainloop()
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer"><code>with</code> in the docs</a> - when used with a file object, it ensures that the file is closed even if an exception is raised.  There are many references online, this one might help - <a href="http://effbot.org/zone/python-with-statement.htm" rel="nofollow noreferrer">effbot.org/zone/python-with-statement.htm</a>.  Here is an SO Q&amp;A - <a href="http://stackoverflow.com/q/1369526/2823755">stackoverflow.com/q/1369526/2823755</a></span>
<span class="comment-copy">Typically, you should always post the complete Traceback in your questions.</span>
<span class="comment-copy"><code>def __getstate__(self):</code> looks problematic - what does it return if you call it <i>manually</i>?</span>
<span class="comment-copy">While it might not directly solve your problem, this SO Q&amp;A may be worth reading - <a href="http://stackoverflow.com/q/4529815/2823755">stackoverflow.com/q/4529815/2823755</a>.</span>
<span class="comment-copy">You might notice when reading Python code here on SO and elsewhere that class names always start with a capital letter. That is one aspect of the Python style guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">python.org/dev/peps/pep-0008</a>, that seems universally implemented.</span>
<span class="comment-copy">Thank you so much! This is very clear!</span>
<span class="comment-copy">@angieShroom - glad I could help. If this works for you, accept it as the answer so others know.</span>
