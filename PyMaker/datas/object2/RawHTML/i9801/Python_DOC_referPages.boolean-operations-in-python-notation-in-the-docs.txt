<div class="post-text" itemprop="text">
<p>I'm not a novice programmer and I know what booleans are and how to use them. Trouble is, I can't quite understand what is implied in Python's documentation regarding boolean operations:</p>
<pre><code>or_test  ::=  and_test | or_test "or" and_test
and_test ::=  not_test | and_test "and" not_test
not_test ::=  comparison | "not" not_test
</code></pre>
<p>What does all this recursion mean? Why should there be an "and_test" inside of an or_test? 
The same question about "not_test" in the description of and_test
The third line makes even less sense to me. 
Could anyone please guide me through these lines so that I can finally understand this somewhat unnecessarily recursive and tangled notation</p>
</div>
<div class="post-text" itemprop="text">
<p>This is part of the larger <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow noreferrer">language grammar</a> and in essence specifies the <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">operator precedence</a>.</p>
<p>It means that <code>and</code> binds tighter than <code>or</code> does. Note that <code>or_test</code> does not <strong>have</strong> to contain <code>and</code>, it contains the <code>and_test</code> <em>rule</em>, which is constructed from <em>either</em> an <code>not_test</code> rule or <code>and_test "and" not_test</code>. <code>not_test</code> itself constructed in a similar manner, etc.</p>
<p>Also see the <a href="https://docs.python.org/3/reference/introduction.html#notation" rel="nofollow noreferrer"><em>Notation</em> section</a> of the reference documentation.</p>
</div>
<span class="comment-copy">Do I get it right that this EBNF notation doesn't actually indicate the syntax of boolean operations but rather the order in which Python's interpreter evaluates expressions inside of a construction?</span>
<span class="comment-copy">Well, it does <i>both</i>. The syntax for the AND boolean operation is spelled <code>and</code>, for example. Expression grammar rules are generally very simple; compare these with the rules for <a href="https://docs.python.org/3/reference/compound_stmts.html" rel="nofollow noreferrer">compound statements</a>.</span>
<span class="comment-copy">Thank you, Martijn! You helped a lot.</span>
