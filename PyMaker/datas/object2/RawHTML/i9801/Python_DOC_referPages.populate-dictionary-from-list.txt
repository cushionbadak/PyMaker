<div class="post-text" itemprop="text">
<p>I have a list of strings (from a <code>.tt</code> file) that looks like this:</p>
<pre><code>list1 = ['have\tVERB', 'and\tCONJ', ..., 'tree\tNOUN', 'go\tVERB']
</code></pre>
<p>I want to turn it into a dictionary that looks like:</p>
<pre><code>dict1 = { 'have':'VERB', 'and':'CONJ', 'tree':'NOUN', 'go':'VERB' }
</code></pre>
<p>I was thinking of substitution, but it doesn't work that well. Is there a way to tag the tab string <code>'\t'</code> as a divider?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try the following:</p>
<pre><code>dict1 = dict(item.split('\t') for item in list1)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt;&gt;&gt;dict1
{'and': 'CONJ', 'go': 'VERB', 'tree': 'NOUN', 'have': 'VERB'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split</code></a> <em>also</em> splits on <code>'\t'</code> by default (<code>'\t'</code> is considered white space), you could get a functional approach by feeding <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer"><code>dict</code></a> with a <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> that looks quite elegant:</p>
<pre><code>d = dict(map(str.split, list1))
</code></pre>
<p>With the dictionary <code>d</code> now being in the wanted form:</p>
<pre><code>print(d)
{'and': 'CONJ', 'go': 'VERB', 'have': 'VERB', 'tree': 'NOUN'}
</code></pre>
<hr/>
<p>If you need a split <em>only on</em> <code>'\t'</code> (while ignoring <code>' '</code> and <code>'\n'</code>) and still want to use the <code>map</code> approach, you can create a partial object with <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a> that only uses <code>'\t'</code> as the separator:</p>
<pre><code>from functools import partial 

# only splits on '\t' ignoring new-lines, white space e.t.c 
tabsplit = partial(str.split, sep='\t')
d = dict(map(tabsplit, list1)) 
</code></pre>
<p>this, of course, yields the same result for <code>d</code> using the sample list of strings.</p>
</div>
<div class="post-text" itemprop="text">
<p>do that with a simple dict comprehension and a <code>str.split</code> (without arguments <code>strip</code> splits on blanks)</p>
<pre><code>list1 = ['have\tVERB', 'and\tCONJ',  'tree\tNOUN', 'go\tVERB']
dict1 = {x.split()[0]:x.split()[1] for x in list1}
</code></pre>
<p>result:</p>
<pre><code>{'and': 'CONJ', 'go': 'VERB', 'tree': 'NOUN', 'have': 'VERB'}
</code></pre>
<p>EDIT: the <code>x.split()[0]:x.split()[1]</code> does <code>split</code> twice, which is not optimal. Other answers here do it better without dict comprehension.</p>
</div>
<div class="post-text" itemprop="text">
<p>A short way to solve the problem, since split method splits <code>'\t'</code> by default (as pointed out by Jim Fasarakis-Hilliard), could be:</p>
<pre><code>dictionary = dict(item.split() for item in list1)
print dictionary
</code></pre>
<p>I also wrote down a more simple and classic approach.</p>
<p>Not very pythonic but easy to understand for beginners:</p>
<pre><code>list1 = ['have\tVERB', 'and\tCONJ', 'tree\tNOUN', 'go\tVERB']
dictionary1 = {}

for item in list1:
    splitted_item = item.split('\t')
    word = splitted_item[0]
    word_type = splitted_item[1]
    dictionary1[word] = word_type

print dictionary1
</code></pre>
<p>Here I wrote the same code with very verbose comments:</p>
<pre><code># Let's start with our word list, we'll call it 'list1'

list1 = ['have\tVERB', 'and\tCONJ', 'tree\tNOUN', 'go\tVERB']

# Here's an empty dictionary, 'dictionary1'

dictionary1 = {}

# Let's start to iterate using variable 'item' through 'list1'

for item in list1:

# Here I split item in two parts, passing the '\t' character
# to the split function and put the resulting list of two elements
# into 'splitted_item' variable.
# If you want to know more about split function check the link available
# at the end of this answer

    splitted_item = item.split('\t')

# Just to make code more readable here I now put 1st part
# of the splitted item (part 0 because we start counting
# from number 0) in "word" variable

    word = splitted_item[0]

# I use the same apporach to save the 2nd part of the 
# splitted item into 'word_type' variable
# Yes, you're right: we use 1 because we start counting from 0

    word_type = splitted_item[1]

# Finally I add to 'dictionary1', 'word' key with a value of 'word_type' 

    dictionary1[word] = word_type

# After the for loop has been completed I print the now
# complete dictionary1 to check if result is correct

print dictionary1
</code></pre>
<p>Useful links:</p>
<ul>
<li>You can quickly copy and paste this code here to check how it works and tweak it if you like: <a href="http://www.codeskulptor.com" rel="nofollow noreferrer">http://www.codeskulptor.com</a></li>
<li>If you want to learn more about split and string functions in general: <a href="https://docs.python.org/2/library/string.html" rel="nofollow noreferrer">https://docs.python.org/2/library/string.html</a></li>
</ul>
</div>
<span class="comment-copy"><code>'have':'VERB'</code> you mean?</span>
<span class="comment-copy"><code>dict</code> keys should be unique</span>
<span class="comment-copy">&lt;3 Pythonic is the way &lt;3</span>
<span class="comment-copy"><code>[]</code> are redundant, generator expression would work just fine and will use less memory in a process.</span>
<span class="comment-copy">@≈ÅukaszRogalski edited, thanks for the remark :)</span>
<span class="comment-copy">Might be more overtly functional, but this is explicitly not pythonic.</span>
<span class="comment-copy">@lenakmeth If you found my answer useful please upvote it and / or mark it as solution. Thanks :)</span>
