<div class="post-text" itemprop="text">
<p>I wanted to write a class function which takes Signal object as a parameter and returns its copy. Then I wanted to overload this function with an instance function that returns copy of self argument. I have a following code:</p>
<pre><code>@classmethod
def copy(cls, arg):
    if not isinstance(arg, Signal):
        raise ValueError("Argument must be of type Signal")
    result = Signal()
    result.framerate = arg.framerate
    return result

def copy(self):
    return FragmentsSignal.copy(self)
</code></pre>
<p>and</p>
<pre><code>Signal1 = Signal(100)
Signal2 = signal1.copy()
</code></pre>
<p>But after calling the function copy my code goes into infinite recursive loop and throws name of this site as an exception. My questions are:</p>
<ol>
<li><p>Do I properly use python function overloading mechanism?</p></li>
<li><p>How can I pass *this argument to a class function within my class?</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Do I properly use python function overloading mechanism?</p>
</blockquote>
<p>You can't have two functions with the same name; Python does not support overloading based on the types of the arguments. The definition of the second function will override that of the first.</p>
<p>In essence you're calling the non <code>classmethod</code> function <code>copy</code> over and over again. You'll need to rename one of these in order to get it to work effectively. </p>
<blockquote>
<p>How can I pass *this argument to a class function within my class?</p>
</blockquote>
<p>I'm guessing you mean <code>self</code> here; passing <code>self</code> to another function is done as with any other arg (as you did <code>FragmentsSignal.copy(self)</code>). Your issue is that you're getting stumped by the recursion caused by the similar names.</p>
</div>
<span class="comment-copy">Is framerate the only Signal attribute? And do you want it to copy just one attribute (if there would be more in future) or all of them?</span>
<span class="comment-copy">No, it isn't. I simplified code to make the problem clearer.</span>
<span class="comment-copy">That's fair enough. Thank you :)</span>
<span class="comment-copy">Technically you can support overloading via argument type, with <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer"><code>functools.singledsipatch</code></a> (although it takes a little <a href="http://stackoverflow.com/a/24602374">work</a> to persuade it to do something useful with methods). But +1 anyway, since I'm being pedantic and your answer is the one OP needs :-)</span>
