<div class="post-text" itemprop="text">
<p>I have two questions.</p>
<p><strong>First Question:</strong></p>
<p>I would like to know how I can remove each second element and third element from a 2-D list questions, so that if the variable <strong><em>questions</em></strong> initially is as follows:</p>
<pre><code>&gt;&gt;&gt; questions
&gt;&gt;&gt; [['Johny', 'Baby', 'Shaw', '1984'], ['Andrew', 'fJKC', 'cbv bv', '1975'], ['Harry', 'Jack', 'Son', '1993']]
</code></pre>
<p>The resulted outcome becomes:</p>
<pre><code>&gt;&gt;&gt; questions
&gt;&gt;&gt; [['Johny', '1984'], ['Andrew', '1975'], ['Harry', '1993']]
</code></pre>
<p><strong>Second Question:</strong></p>
<p>How can I find a way knowing two values: (minimum value, maximum value), to print whatever of the three lists in the list questions which the last element is in the range (minimum value, max value).</p>
<p>Expected outcome:</p>
<p>If, following obviously the previous outcome, for example, the minimum value is <code>1980</code> and the maximum value is <code>2000</code>. It prints the following:</p>
<pre><code>&gt;&gt;&gt; ['Johny', '1984'], ['Harry', '1993']
</code></pre>
<p>Here's my attempt:</p>
<pre><code>beginning = int(input('Beginning: '))
ending = int(input('Ending: '))
position = []
for anyitem in range((len(questions)-1)):
    position1 = int(questions[anyitem][2][-4:])
        if beginning &lt; position1 &lt; ending:
            print(questions[anyitem][3])
        else:
            pass
</code></pre>
<p>Please, do not use <code>numpy</code> or any functions that need to be imported. Also, please make the solution general, so it can be applied to a 2D list with not only 3 elements (as in my case) but many elements (for everyone).</p>
</div>
<div class="post-text" itemprop="text">
<p>Both can be easily accomplished with list comprehensions. </p>
<p>Removing certain elements:</p>
<pre><code>&gt;&gt;&gt; nquestions = [[i ,j] for i, *_, j in questions]
&gt;&gt;&gt; nquestions
[['Johny', '1984'], ['Andrew', '1975'], ['Harry', '1993']]
</code></pre>
<p>Here we unpack from each sub-list tossing away the middle elements with <code>*_</code> while keeping the first and last in order to create the new list from them.</p>
<p>For filtering, it is best to create a custom <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer"><code>range</code></a> and use another list comprehension to filter out the values that are <code>in</code> that range:</p>
<pre><code>&gt;&gt;&gt; r = range(1980, 2000)
&gt;&gt;&gt; [i for i in nquestions if int(i[1]) in r]
[['Johny', '1984'], ['Harry', '1993']]
</code></pre>
<p><code>int(i[1])</code> required due to the fact that the values are strings. Apart from being <em>very intuitive</em>, membership tests for <code>range</code> objects are quite efficient (See: <a href="https://stackoverflow.com/questions/30081275/why-is-1000000000000000-in-range1000000000000001-so-fast-in-python-3?rq=1">Why is "1000000000000000 in range(1000000000000001)" so fast in Python 3?</a>).</p>
</div>
<div class="post-text" itemprop="text">
<p>both are very easy to do with list comprehensions &amp; conditions:</p>
<pre><code>questions = [['Johny', 'Baby', 'Shaw', '1984'], ['Andrew', 'fJKC', 'cbv bv', '1975'], ['Harry', 'Jack', 'Son', '1993']]

print([x[:1]+x[3:] for x in questions])
</code></pre>
<p>result:</p>
<pre><code>[['Johny', '1984'], ['Andrew', '1975'], ['Harry', '1993']]
</code></pre>
<p>with the filtering on year:</p>
<pre><code>print([x[:1]+x[3:] for x in questions if int(x[-1])&gt;=1980 and int(x[-1])&lt;=2000])
</code></pre>
<p>result:</p>
<pre><code>[['Johny', '1984'], ['Harry', '1993']]
</code></pre>
<p>note that listcomps are not the best when you need a temp variable/side effect (like above: <code>int(x[-1])</code> must be computed twice, in the case of years we could take a shortcut and use string comparison as well, works from year 1000 to 9999:</p>
<pre><code>print([x[:1]+x[3:] for x in questions if x[-1]&gt;="1980" and x[-1]&lt;="2000"])
</code></pre>
<p>When we reach year 10000, I'll edit my answer :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Question 1:</p>
<pre><code>questions = [['Johny', 'Baby', 'Shaw', '1984'], ['Andrew', 'fJKC', 'cbv bv', '1975'], ['Harry', 'Jack', 'Son', '1993']]
new_questions = [[lst[0], lst[3]] for lst in questions]
</code></pre>
<p>Question 2, assuming you want to use the original <code>questions</code> list.:</p>
<pre><code>in_range = [[lst[0], lst[3]] for lst in questions if int(lst[3]) in range(1980, 2001)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Removing the 1st and 2nd index is relatively simple, one way to do this (destructively) is to use slice assignment:</p>
<pre><code>&gt;&gt;&gt; for d in questions:
...     d[1:3] = []
&gt;&gt;&gt; questions
[['Johny', '1984'], ['Andrew', '1975'], ['Harry', '1993']]
</code></pre>
<p>List comprehensions can also achieve this, but do need to construct a new list (and potentially intermediate lists).</p>
<p>The finding <code>min</code> and <code>max</code> just needs the <code>key</code> argument (updated to include the <code>filter</code> requirement):</p>
<pre><code>&gt;&gt;&gt; min(filter(lambda x: int(x[1])&gt;1980, questions), key=lambda x: x[1])
['Johny', '1984']
&gt;&gt;&gt; max(filter(lambda x: int(x[1])&lt;2000, questions), key=lambda x: x[1])
['Harry', '1993']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>For your First question this code should do it just fine</strong></p>
<pre><code>&gt;&gt;&gt; for d in questions:
...     d[1:3] = []
</code></pre>
<p><strong>my answer for your second question is</strong></p>
<pre><code>&gt;&gt;&gt; min(questions, key=lambda x: x[1])
    ['Harry', '1993']

&gt;&gt;&gt; max(questions, key=lambda x: x[1])
['Harry', '1993']
</code></pre>
</div>
<span class="comment-copy">What code do you have thus far? You have only shown desired output.</span>
