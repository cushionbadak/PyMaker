<div class="post-text" itemprop="text">
<p>Simple question if do the following:</p>
<pre><code>import struct
struct.calcsize("6cHcBHIIQ")
</code></pre>
<p>returns 32 when I believe it should be 28.</p>
<p>By doing the following (missing the Q):</p>
<pre><code>import struct
struct.calcsize("6cHcBHII")
</code></pre>
<p>it returns 20, which is what I would expect.</p>
<p>and doing:</p>
<pre><code>import struct
struct.calcsize("Q")
</code></pre>
<p>returns 8, which is correct.</p>
<p>Why does adding the Q onto the top one result in 12 extra bytes being expected instead of 8?</p>
<p>Python 3, windows machine.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Alignment.  See <a href="https://docs.python.org/3/library/struct.html#struct-alignment" rel="nofollow noreferrer">https://docs.python.org/3/library/struct.html#struct-alignment</a> for more details.</p>
<p>Try <code>struct.calcsize("=6cHcBHIIQ")</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also minimize the size by realigning these in a better way:</p>
<pre><code>struct.calcsize("QIIHHB6cc")
</code></pre>
<p>yields <code>28</code>,you should generally expect padding to be the culprit in any struct size issues. See <a href="https://stackoverflow.com/questions/119123/why-isnt-sizeof-for-a-struct-equal-to-the-sum-of-sizeof-of-each-member">Why isn't sizeof for a struct equal to the sum of sizeof of each member?</a> for a good answer on why struct sizes might sometimes be larger than what they seem.</p>
</div>
<span class="comment-copy">Just an update to this question: same behavior can be reproduced on Ubuntu 14.04.</span>
<span class="comment-copy">Thank you, that makes sense!</span>
<span class="comment-copy">Thanks for this. Id I'm unpacking bytes from a file then the format string would need to be in the correct order though would it not?</span>
