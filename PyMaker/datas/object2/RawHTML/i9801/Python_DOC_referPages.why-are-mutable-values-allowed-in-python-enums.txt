<div class="post-text" itemprop="text">
<p>This is somewhat of a follow on to <a href="https://stackoverflow.com/questions/40641213/why-are-mutable-values-in-python-enums-the-same-object">Why are mutable values in Python Enums the same object?</a>.</p>
<p>If the values of an <code>Enum</code> are mutable (e.g. <code>list</code>s, etc.), those values can be changed at any time. I think this poses something of an issue if <code>Enum</code> members are retrieved by value, especially if someone inadvertently changes the value of an <code>Enum</code> he looks up:</p>
<pre><code>&gt;&gt;&gt; from enum import Enum
&gt;&gt;&gt; class Color(Enum):
        black = [1,2]
        blue = [1,2,3]

&gt;&gt;&gt; val_1 = [1,2]
&gt;&gt;&gt; val_2 = [1,2,3]
&gt;&gt;&gt; Color(val_1)
&lt;Color.black: [1, 2]&gt;
&gt;&gt;&gt; Color(val_2)
&lt;Color.blue: [1, 2, 3]&gt;
&gt;&gt;&gt; my_color = Color(val_1)
&gt;&gt;&gt; my_color.value.append(3)
&gt;&gt;&gt; Color(val_2)
&lt;Color.black: [1, 2, 3]&gt;
&gt;&gt;&gt; Color(val_1)
Traceback (most recent call last):
  ...
ValueError: [1, 2] is not a valid Color
</code></pre>
<p>I think given normal Python idioms this is <em>okay</em>, with the implication being that users <em>can</em> use mutables as their <code>Enum</code> values, but just to understand the can of worms they might be opening.</p>
<p>However this brings up a second issue - since you can look up an <code>Enum</code> memeber by value, and the value can be mutable, it must be doing the lookup by a means other than a hashmap/<code>dict</code>, since the mutable cannot be a <code>key</code> in such a <code>dict</code>.</p>
<p>Wouldn't it be more efficient (although, granted, less flexible) to limit <code>Enum</code> values to only mutable types so that lookup-by-value could be implemented with a <code>dict</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>It appears the answer to my second question was hiding in plain sight in the soure code for <code>enum.py</code>.</p>
<p>Each <code>Enum</code> <em>does</em> contain a <code>dict</code> of <code>value-&gt;member</code> pairs for <em>hashable</em> (i.e. immutable) values, and when you look up an <code>Enum</code> by value, it attempts to retrieve the member from that <code>dict</code>.  If the value is not <em>hashable</em>, it then brute-force compares for equality against all existing <code>Enum</code> values, returning the member if finds a match.  The relevant code is in lines 468-476 in <code>enum.py</code>:</p>
<pre><code>try:
    if value in cls._value2member_map_:
        return cls._value2member_map_[value]
except TypeError:
    # not there, now do long search -- O(n) behavior
    for member in cls._member_map_.values():
        if member._value_ == value:
            return member
raise ValueError("%r is not a valid %s" % (value, cls.__name__))
</code></pre>
<p>So it appears as though the designers of <code>enum.py</code> wanted to have a quick lookup when getting <code>Enum</code>s by value, but still wanted to give the flexibility of having mutable values for <code>Enum</code> values (even though I still can't think of a reason <em>why</em> someone would want that in the first place).</p>
</div>
<span class="comment-copy">Here`s a use case for mutability: let`s say the program has multiple exit codes comprising an enum and each of the codes has its own exit message (e.g. <code>CODE = [123, "Exit #123"]</code>). One of the exit cases is when the user calls the script wrong so you need to show the parameter reference. The problem is that the reference is encapsulated in an <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>ArgumentParser</code></a> object. So first you initialize the enum then execute several <code>add_argument()</code>-s, and then do something like that: <code>ExitCode.HELP.value[1] += '\n' + args.format_help()</code>. Voil√†!</span>
<span class="comment-copy">@hidefromkgb As far as I understand your example, it would work with a tuple.</span>
