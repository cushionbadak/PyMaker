<div class="post-text" itemprop="text">
<p>I need to parse <a href="https://tools.ietf.org/html/rfc3339" rel="noreferrer">RFC 3339</a> strings like <code>"2008-09-03T20:56:35.450686Z"</code> into Python's <code>datetime</code> type.</p>
<p>I have found <a href="https://docs.python.org/library/datetime.html#datetime.datetime.strptime" rel="noreferrer"><code>strptime</code></a> in the Python standard library, but it is not very convenient.</p>
<p>What is the best way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <em>python-dateutil</em> package can parse not only RFC 3339 datetime strings like the one in the question, but also other <a href="https://en.wikipedia.org/wiki/ISO_8601" rel="noreferrer">ISO 8601</a> date and time strings  that don't comply with RFC 3339 (such as ones with no UTC offset, or ones that represent only a date).</p>
<pre><code>&gt;&gt;&gt; import dateutil.parser
&gt;&gt;&gt; dateutil.parser.parse('2008-09-03T20:56:35.450686Z') # RFC 3339 format
datetime.datetime(2008, 9, 3, 20, 56, 35, 450686, tzinfo=tzutc())
&gt;&gt;&gt; dateutil.parser.parse('2008-09-03T20:56:35.450686') # ISO 8601 extended format
datetime.datetime(2008, 9, 3, 20, 56, 35, 450686)
&gt;&gt;&gt; dateutil.parser.parse('20080903T205635.450686') # ISO 8601 basic format
datetime.datetime(2008, 9, 3, 20, 56, 35, 450686)
&gt;&gt;&gt; dateutil.parser.parse('20080903') # ISO 8601 basic format, date only
datetime.datetime(2008, 9, 3, 0, 0)
</code></pre>
<hr/>
<p>Be warned that the <code>dateutil.parser</code> is intentionally hacky: it tries to guess the format and makes inevitable assumptions (customizable by hand only) in ambiguous cases. So ONLY use it if you need to parse input of unknown format and are okay to tolerate occasional misreads. (thanks <a href="https://stackoverflow.com/users/648265/ivan-pozdeev">ivan_pozdeev</a>)</p>
<p>The Pypi name is <a href="https://pypi.python.org/pypi/python-dateutil" rel="noreferrer"><code>python-dateutil</code></a>, not <code>dateutil</code> (thanks <a href="https://stackoverflow.com/users/1174169/cod3monk3y">code3monk3y</a>):</p>
<pre><code>pip install python-dateutil
</code></pre>
<p>If you're using Python 3.7, have a look at <a href="https://stackoverflow.com/a/49784038/247696">this answer</a> about <code>datetime.datetime.fromisoformat</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note in Python 2.6+ and Py3K, the %f character catches microseconds.</p>
<pre><code>&gt;&gt;&gt; datetime.datetime.strptime("2008-09-03T20:56:35.450686Z", "%Y-%m-%dT%H:%M:%S.%fZ")
</code></pre>
<p>See issue <a href="http://bugs.python.org/issue1158" rel="noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/127972/1709587">Several</a> <a href="https://stackoverflow.com/a/127825/1709587">answers</a> <a href="https://stackoverflow.com/a/22700869/1709587">here</a> <a href="https://stackoverflow.com/a/28979667/1709587">suggest</a> using <a href="https://docs.python.org/library/datetime.html#datetime.datetime.strptime" rel="noreferrer"><code>datetime.datetime.strptime</code></a> to parse RFC 3339 or ISO 8601 datetimes with timezones, like the one exhibited in the question:</p>
<pre><code>2008-09-03T20:56:35.450686Z
</code></pre>
<p>This is a bad idea.</p>
<p>Assuming that you want to support the full RFC 3339 format, including support for UTC offsets other than zero, then the code these answers suggest does not work. Indeed, it <em>cannot</em> work, because parsing RFC 3339 syntax using <code>strptime</code> is impossible. The format strings used by Python's datetime module are incapable of describing RFC 3339 syntax.</p>
<p>The problem is UTC offsets. The <a href="https://tools.ietf.org/html/rfc3339#section-5.6" rel="noreferrer">RFC 3339 Internet Date/Time Format</a> requires that every date-time includes a UTC offset, and that those offsets can either be <code>Z</code> (short for "Zulu time") or in <code>+HH:MM</code> or <code>-HH:MM</code> format, like <code>+05:00</code> or <code>-10:30</code>.</p>
<p>Consequently, these are all valid RFC 3339 datetimes:</p>
<ul>
<li><code>2008-09-03T20:56:35.450686Z</code></li>
<li><code>2008-09-03T20:56:35.450686+05:00</code></li>
<li><code>2008-09-03T20:56:35.450686-10:30</code></li>
</ul>
<p>Alas, the format strings used by <code>strptime</code> and <code>strftime</code> have no directive that corresponds to UTC offsets in RFC 3339 format. A complete list of the directives they support can be found at <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer">https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior</a>, and the only UTC offset directive included in the list is <code>%z</code>:</p>
<blockquote>
<h3>%z</h3>
<p>UTC offset in the form +HHMM or -HHMM (empty string if the the object is naive).</p>
<p>Example: (empty), +0000, -0400, +1030</p>
</blockquote>
<p>This doesn't match the format of an RFC 3339 offset, and indeed if we try to use <code>%z</code> in the format string and parse an RFC 3339 date, we'll fail:</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; <b><i>from datetime import datetime</i></b>
&gt;&gt;&gt; <b><i>datetime.strptime("2008-09-03T20:56:35.450686Z", "%Y-%m-%dT%H:%M:%S.%f%z")</i></b></code></pre></div>
<div class="post-text" itemprop="text">
<h1>New in Python 3.7+</h1>
<hr/>
<p>The <code>datetime</code> standard library introduced a function for inverting <code>datetime.isoformat()</code>.</p>
<blockquote>
<p><a href="https://docs.python.org/dev/library/datetime.html#datetime.datetime.fromisoformat" rel="noreferrer"><em><code>classmethod</code></em> <strong><code>datetime.fromisoformat(date_string)</code></strong></a>:</p>
<p>Return a <code>datetime</code> corresponding to a <code>date_string</code> in one of the formats
  emitted by <code>date.isoformat()</code> and <code>datetime.isoformat()</code>. </p>
<p>Specifically, this function supports strings in the format(s):</p>
<p><code>YYYY-MM-DD[*HH[:MM[:SS[.mmm[mmm]]]][+HH:MM[:SS[.ffffff]]]]</code></p>
<p>where <code>*</code> can match any single character. </p>
<p><strong>Caution</strong>: This does not support parsing arbitrary ISO 8601 strings - it is only intended as the inverse
  operation of <code>datetime.isoformat()</code>.</p>
</blockquote>
<p>Example of use:</p>
<pre><code>from datetime import datetime

date = datetime.fromisoformat('2017-01-01T12:30:59.000000')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try the <a href="https://bitbucket.org/micktwomey/pyiso8601" rel="noreferrer">iso8601</a> module; it does exactly this.</p>
<p>There are several other options mentioned on the <a href="http://wiki.python.org/moin/WorkingWithTime" rel="noreferrer">WorkingWithTime</a> page on the python.org wiki.</p>
</div>
<div class="post-text" itemprop="text">
<pre>
import re,datetime
s="2008-09-03T20:56:35.450686Z"
d=datetime.datetime(*map(int, re.split('[^\d]', s)[:-1]))
</pre>
</div>
<div class="post-text" itemprop="text">
<p>What is the exact error you get? Is it like the following?</p>
<pre><code>&gt;&gt;&gt; datetime.datetime.strptime("2008-08-12T12:20:30.656234Z", "%Y-%m-%dT%H:%M:%S.Z")
ValueError: time data did not match format:  data=2008-08-12T12:20:30.656234Z  fmt=%Y-%m-%dT%H:%M:%S.Z
</code></pre>
<p>If yes, you can split your input string on ".", and then add the microseconds to the datetime you got.</p>
<p>Try this:</p>
<pre><code>&gt;&gt;&gt; def gt(dt_str):
        dt, _, us= dt_str.partition(".")
        dt= datetime.datetime.strptime(dt, "%Y-%m-%dT%H:%M:%S")
        us= int(us.rstrip("Z"), 10)
        return dt + datetime.timedelta(microseconds=us)

&gt;&gt;&gt; gt("2008-08-12T12:20:30.656234Z")
datetime.datetime(2008, 8, 12, 12, 20, 30, 656234)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Starting from Python 3.7, strptime supports colon delimiters in UTC offsets (<a href="https://github.com/python/cpython/commit/32318930da70ff03320ec50813b843e7db6fbc2e" rel="noreferrer">source</a>). So you can then use:</p>
<pre><code>import datetime
datetime.datetime.strptime('2018-01-31T09:24:31.488670+00:00', '%Y-%m-%dT%H:%M:%S.%f%z')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In these days, <a href="http://arrow.readthedocs.org/" rel="nofollow noreferrer">Arrow</a> also can be used as a third-party solution:</p>
<pre><code>&gt;&gt;&gt; import arrow
&gt;&gt;&gt; date = arrow.get("2008-09-03T20:56:35.450686Z")
&gt;&gt;&gt; date.datetime
datetime.datetime(2008, 9, 3, 20, 56, 35, 450686, tzinfo=tzutc())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to use dateutil, you can try this function:</p>
<pre><code>def from_utc(utcTime,fmt="%Y-%m-%dT%H:%M:%S.%fZ"):
    """
    Convert UTC time string to time.struct_time
    """
    # change datetime.datetime to time, return time.struct_time type
    return datetime.datetime.strptime(utcTime, fmt)
</code></pre>
<p>Test:</p>
<pre><code>from_utc("2007-03-04T21:08:12.123Z")
</code></pre>
<p>Result:</p>
<pre><code>datetime.datetime(2007, 3, 4, 21, 8, 12, 123000)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are working with Django, it provides the <a href="https://docs.djangoproject.com/en/1.8/ref/utils/#module-django.utils.dateparse">dateparse module</a> that accepts a bunch of formats similar to ISO format, including the time zone.</p>
<p>If you are not using Django and you don't want to use one of the other libraries mentioned here, you could probably adapt <a href="https://github.com/django/django/blob/262d4db8c4c849b0fdd84550fb96472446cf90df/django/utils/dateparse.py#L84-L109">the Django source code for dateparse</a> to your project.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use the <code>python-dateutil</code> module:</p>
<pre><code>&gt;&gt;&gt; import dateutil.parser as dp
&gt;&gt;&gt; t = '1984-06-02T19:05:00.000Z'
&gt;&gt;&gt; parsed_t = dp.parse(t)
&gt;&gt;&gt; print(parsed_t)
datetime.datetime(1984, 6, 2, 19, 5, tzinfo=tzutc())
</code></pre>
<p><a href="https://dateutil.readthedocs.io/en/stable/" rel="nofollow noreferrer">Documentation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I have found <a href="https://github.com/closeio/ciso8601" rel="noreferrer">ciso8601</a> to be the fastest way to parse ISO 8601 timestamps. As the name suggests, it is implemented in C.</p>
<pre><code>import ciso8601
ciso8601.parse_datetime('2014-01-09T21:48:00.921000+05:30')
</code></pre>
<p>The <a href="https://github.com/closeio/ciso8601/blob/f9f75de38450996e1ad699d966508a739e2bdfdc/README.rst" rel="noreferrer">GitHub Repo README</a> shows their &gt;10x speedup versus all of the other libraries listed in the other answers.</p>
<p>My personal project involved a lot of ISO 8601 parsing. It was nice to be able to just switch the call and go 10x faster. :)</p>
<p><strong>Edit:</strong> I have since become a maintainer of ciso8601. It's now faster than ever!</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm the author of iso8601 utils. It can be found <a href="https://github.com/silverfernsys/iso8601utils" rel="nofollow noreferrer">on GitHub</a> or on <a href="https://pypi.python.org/pypi/iso8601utils" rel="nofollow noreferrer">PyPI</a>. Here's how you can parse your example:</p>
<pre><code>&gt;&gt;&gt; from iso8601utils import parsers
&gt;&gt;&gt; parsers.datetime('2008-09-03T20:56:35.450686Z')
datetime.datetime(2008, 9, 3, 20, 56, 35, 450686)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One straightforward way to convert an ISO 8601-like date string to a UNIX timestamp or <code>datetime.datetime</code> object in all supported Python versions without installing third-party modules is to use the <a href="https://www.sqlite.org/lang_datefunc.html" rel="noreferrer">date parser of SQLite</a>.</p>
<pre><code>#!/usr/bin/env python
from __future__ import with_statement, division, print_function
import sqlite3
import datetime

testtimes = [
    "2016-08-25T16:01:26.123456Z",
    "2016-08-25T16:01:29",
]
db = sqlite3.connect(":memory:")
c = db.cursor()
for timestring in testtimes:
    c.execute("SELECT strftime('%s', ?)", (timestring,))
    converted = c.fetchone()[0]
    print("%s is %s after epoch" % (timestring, converted))
    dt = datetime.datetime.fromtimestamp(int(converted))
    print("datetime is %s" % dt)
</code></pre>
<p>Output:</p>
<pre><code>2016-08-25T16:01:26.123456Z is 1472140886 after epoch
datetime is 2016-08-25 12:01:26
2016-08-25T16:01:29 is 1472140889 after epoch
datetime is 2016-08-25 12:01:29
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've coded up a parser for the ISO 8601 standard and put it on GitHub: <a href="https://github.com/boxed/iso8601" rel="nofollow noreferrer">https://github.com/boxed/iso8601</a>. This implementation supports everything in the specification except for durations, intervals, periodic intervals, and dates outside the supported date range of Python's datetime module.</p>
<p>Tests are included! :P</p>
</div>
<div class="post-text" itemprop="text">
<p>Django's <strong>parse_datetime</strong>() function supports dates with UTC offsets:</p>
<pre><code>parse_datetime('2016-08-09T15:12:03.65478Z') =
datetime.datetime(2016, 8, 9, 15, 12, 3, 654780, tzinfo=&lt;UTC&gt;)
</code></pre>
<p>So it could be used for parsing ISO 8601 dates in fields within entire project:</p>
<pre><code>from django.utils import formats
from django.forms.fields import DateTimeField
from django.utils.dateparse import parse_datetime

class DateTimeFieldFixed(DateTimeField):
    def strptime(self, value, format):
        if format == 'iso-8601':
            return parse_datetime(value)
        return super().strptime(value, format)

DateTimeField.strptime = DateTimeFieldFixed.strptime
formats.ISO_INPUT_FORMATS['DATETIME_INPUT_FORMATS'].insert(0, 'iso-8601')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because ISO 8601 allows many variations of optional colons and dashes being present, basically <code>CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm]</code>. If you want to use strptime, you need to strip out those variations first.<br/>
<br/>
<strong>The goal is to generate a utc datetime object.</strong>
<hr/>
If you just want a basic case that work for UTC with the Z suffix like <code>2016-06-29T19:36:29.3453Z</code>:</p>
<pre><code>datetime.datetime.strptime(timestamp.translate(None, ':-'), "%Y%m%dT%H%M%S.%fZ")
</code></pre>
<p><hr/>
If you want to handle timezone offsets like <code>2016-06-29T19:36:29.3453-0400</code> or <code>2008-09-03T20:56:35.450686+05:00</code> use the following. These will convert all variations into something without variable delimiters like  <code>20080903T205635.450686+0500</code> making it more consistent/easier to parse.</p>
<pre><code>import re
# this regex removes all colons and all 
# dashes EXCEPT for the dash indicating + or - utc offset for the timezone
conformed_timestamp = re.sub(r"[:]|([-](?!((\d{2}[:]\d{2})|(\d{4}))$))", '', timestamp)
datetime.datetime.strptime(conformed_timestamp, "%Y%m%dT%H%M%S.%f%z" )
</code></pre>
<p><hr/>
If your system does not support the <code>%z</code> strptime directive (you see something like <code>ValueError: 'z' is a bad directive in format '%Y%m%dT%H%M%S.%f%z'</code>) then you need to manually offset the time from <code>Z</code> (UTC). Note <code>%z</code> may not work on your system in python versions &lt; 3 as it depended on the c library support which varies across system/python build type (i.e. Jython, Cython, etc.).</p>
<pre><code>import re
import datetime

# this regex removes all colons and all 
# dashes EXCEPT for the dash indicating + or - utc offset for the timezone
conformed_timestamp = re.sub(r"[:]|([-](?!((\d{2}[:]\d{2})|(\d{4}))$))", '', timestamp)

# split on the offset to remove it. use a capture group to keep the delimiter
split_timestamp = re.split(r"[+|-]",conformed_timestamp)
main_timestamp = split_timestamp[0]
if len(split_timestamp) == 3:
    sign = split_timestamp[1]
    offset = split_timestamp[2]
else:
    sign = None
    offset = None

# generate the datetime object without the offset at UTC time
output_datetime = datetime.datetime.strptime(main_timestamp +"Z", "%Y%m%dT%H%M%S.%fZ" )
if offset:
    # create timedelta based on offset
    offset_delta = datetime.timedelta(hours=int(sign+offset[:-2]), minutes=int(sign+offset[-2:]))
    # offset datetime with timedelta
    output_datetime = output_datetime + offset_delta
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works for stdlib on Python 3.2 onwards (assuming all the timestamps are UTC):</p>
<pre><code>from datetime import datetime, timezone, timedelta
datetime.strptime(timestamp, "%Y-%m-%dT%H:%M:%S.%fZ").replace(
    tzinfo=timezone(timedelta(0)))
</code></pre>
<p>For example,</p>
<pre><code>&gt;&gt;&gt; datetime.utcnow().replace(tzinfo=timezone(timedelta(0)))
... datetime.datetime(2015, 3, 11, 6, 2, 47, 879129, tzinfo=datetime.timezone.utc)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For something that works with the 2.X standard library try:</p>
<pre><code>calendar.timegm(time.strptime(date.split(".")[0]+"UTC", "%Y-%m-%dT%H:%M:%S%Z"))
</code></pre>
<p>calendar.timegm is the missing gm version of time.mktime.</p>
</div>
<div class="post-text" itemprop="text">
<p>The python-dateutil will throw an exception if parsing invalid date strings, so you may want to catch the exception.</p>
<pre><code>from dateutil import parser
ds = '2012-60-31'
try:
  dt = parser.parse(ds)
except ValueError, e:
  print '"%s" is an invalid date' % ds
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Nowadays there's <a href="https://github.com/kennethreitz/maya" rel="nofollow noreferrer">Maya: Datetimes for Humans™</a>, from the author of the popular Requests: HTTP for Humans™ package:</p>
<pre><code>&gt;&gt;&gt; import maya
&gt;&gt;&gt; str = '2008-09-03T20:56:35.450686Z'
&gt;&gt;&gt; maya.MayaDT.from_rfc3339(str).datetime()
datetime.datetime(2008, 9, 3, 20, 56, 35, 450686, tzinfo=&lt;UTC&gt;)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to great <a href="https://stackoverflow.com/a/30696682/719457">Mark Amery's answer</a> I devised function to account for all possible ISO formats of datetime:</p>
<pre><code>class FixedOffset(tzinfo):
    """Fixed offset in minutes: `time = utc_time + utc_offset`."""
    def __init__(self, offset):
        self.__offset = timedelta(minutes=offset)
        hours, minutes = divmod(offset, 60)
        #NOTE: the last part is to remind about deprecated POSIX GMT+h timezones
        #  that have the opposite sign in the name;
        #  the corresponding numeric value is not used e.g., no minutes
        self.__name = '&lt;%+03d%02d&gt;%+d' % (hours, minutes, -hours)
    def utcoffset(self, dt=None):
        return self.__offset
    def tzname(self, dt=None):
        return self.__name
    def dst(self, dt=None):
        return timedelta(0)
    def __repr__(self):
        return 'FixedOffset(%d)' % (self.utcoffset().total_seconds() / 60)
    def __getinitargs__(self):
        return (self.__offset.total_seconds()/60,)

def parse_isoformat_datetime(isodatetime):
    try:
        return datetime.strptime(isodatetime, '%Y-%m-%dT%H:%M:%S.%f')
    except ValueError:
        pass
    try:
        return datetime.strptime(isodatetime, '%Y-%m-%dT%H:%M:%S')
    except ValueError:
        pass
    pat = r'(.*?[+-]\d{2}):(\d{2})'
    temp = re.sub(pat, r'\1\2', isodatetime)
    naive_date_str = temp[:-5]
    offset_str = temp[-5:]
    naive_dt = datetime.strptime(naive_date_str, '%Y-%m-%dT%H:%M:%S.%f')
    offset = int(offset_str[-4:-2])*60 + int(offset_str[-2:])
    if offset_str[0] == "-":
        offset = -offset
    return naive_dt.replace(tzinfo=FixedOffset(offset))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def parseISO8601DateTime(datetimeStr):
    import time
    from datetime import datetime, timedelta

    def log_date_string(when):
        gmt = time.gmtime(when)
        if time.daylight and gmt[8]:
            tz = time.altzone
        else:
            tz = time.timezone
        if tz &gt; 0:
            neg = 1
        else:
            neg = 0
            tz = -tz
        h, rem = divmod(tz, 3600)
        m, rem = divmod(rem, 60)
        if neg:
            offset = '-%02d%02d' % (h, m)
        else:
            offset = '+%02d%02d' % (h, m)

        return time.strftime('%d/%b/%Y:%H:%M:%S ', gmt) + offset

    dt = datetime.strptime(datetimeStr, '%Y-%m-%dT%H:%M:%S.%fZ')
    timestamp = dt.timestamp()
    return dt + timedelta(hours=dt.hour-time.gmtime(timestamp).tm_hour)
</code></pre>
<p>Note that we should look if the string doesn't ends with <code>Z</code>, we could parse using <code>%z</code>.</p>
</div>
<span class="comment-copy">Python bug: <a href="http://bugs.python.org/issue15873" rel="nofollow noreferrer">issue15873: datetime: add ability to parse RFC 3339 dates and times</a></span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/12281975/4279">Convert timestamps with offset to datetime obj using strptime</a></span>
<span class="comment-copy">To be clear: <a href="https://en.wikipedia.org/wiki/ISO_8601" rel="nofollow noreferrer">ISO 8601</a> is the main standard. <a href="https://tools.ietf.org/html/rfc3339" rel="nofollow noreferrer">RFC 3339</a> is a self-proclaimed “profile” of ISO 8601 that makes some <a href="https://en.wikipedia.org/wiki/ISO_8601#Time_offsets_from_UTC" rel="nofollow noreferrer">unwise overrides</a> of ISO 8601 rules.</span>
<span class="comment-copy">Don't miss the python3.7+ solution below for inverting isoformat()</span>
<span class="comment-copy">This question should not be closed as dupe to the linked post. Since this one is asking to <b>parse</b> an ISO 8601 time string (which wasn’t supported natively by python pre to 3.7) and the other is to <b>format</b> a datetime object into an epoch string using an obsolete method.</span>
<span class="comment-copy">For the lazy, it's installed via <code>python-dateutil</code> not <code>dateutil</code>, so: <code>pip install python-dateutil</code>.</span>
<span class="comment-copy">Be warned that the <code>dateutil.parser</code> is intentionally hacky: it tries to guess the format and makes inevitable assumptions (customizable by hand only) in ambiguous cases. So ONLY use it if you need to parse input of unknown format and are okay to tolerate occasional misreads.</span>
<span class="comment-copy">Agreed. An example is passing a "date" of 9999. This will return the same as datetime(9999, current month, current day). Not a valid date in my view.</span>
<span class="comment-copy">@ivan_pozdeev what package would you recommend for non-guessing parsing?</span>
<span class="comment-copy">@bgusach <code>iso8601</code> <a href="https://stackoverflow.com/questions/127803/how-to-parse-an-iso-8601-formatted-date/127934#127934">as another answer suggests</a>.</span>
<span class="comment-copy">Note - if using Naive datetimes - I think you get no TZ at all - Z may not match anything.</span>
<span class="comment-copy">This answer (in its current, edited form) relies upon hard-coding a particular UTC offset (namely "Z", which means +00:00) into the format string. This is a bad idea because it will fail to parse any datetime with a different UTC offset and raise an exception. See <a href="http://stackoverflow.com/a/30696682/1709587">my answer</a> that describes how parsing RFC 3339 with <code>strptime</code> is in fact impossible.</span>
<span class="comment-copy">in my case %f caught microseconds rather than Z, <code>datetime.datetime.strptime(timestamp, '%Y-%m-%dT%H:%M:%S.%f')</code>  so this did the trick</span>
<span class="comment-copy">Does Py3K mean Python 3000?!?</span>
<span class="comment-copy">@Robino IIRC, "Python 3000" is an old name for what is now known as Python 3.</span>
<span class="comment-copy">It's mind bogging why strptime doesn't have a directive for ISO format timezone info, and why it cannot be parsed. Incredible.</span>
<span class="comment-copy">@CsabaToth Entirely agreed - if I have some time to kill, perhaps I'll try to add it into the language. Or you could do so, if you were so inclined - I see you have some C experience, unlike me.</span>
<span class="comment-copy">@CsabaToth - Why incredible? It works good enough for most people, or they found easy enough workaround. If you need the feature, it is opensource and you can add it. Or pay someone to do it for you. Why someone should volunteer his own free time to solve your specific problems? Let source be with you.</span>
<span class="comment-copy">As this basically means you can't reliably parse ISO 8601 dates using pure python (definitely not across python 2 and 3), I ended up using the popular arrow library instead: <a href="http://arrow.readthedocs.io/en/latest/" rel="nofollow noreferrer">arrow.readthedocs.io/en/latest</a></span>
<span class="comment-copy">@PeterMasiar Incredible because usually one discovers that things in python have been implemented thoughtfully and fully. We have been spoilt by this attention to detail and so when we stumble across something in the language that is "unpythonic" we throw our toys out the pram, as I am about to do so right now. Whaaaaaaaaaa Whaa wahaaaaa :-(</span>
<span class="comment-copy">That's weird. Because a <code>datetime</code> may contain a <code>tzinfo</code>, and thus output a timezone, but <code>datetime.fromisoformat()</code> doesn't parse the tzinfo ? seems like a bug ..</span>
<span class="comment-copy">Don't miss that note in the documentation, this doesn't accept <i>all</i> valid ISO 8601 strings, only ones generated by <code>isoformat</code>. It doesn't accept the example in the question <code>"2008-09-03T20:56:35.450686Z"</code> because of the trailing <code>Z</code>, but it does accept <code>"2008-09-03T20:56:35.450686"</code>.</span>
<span class="comment-copy">To properly support the <code>Z</code> the input script can be modified with <code>date_string.replace("Z", "+00:00")</code>.</span>
<span class="comment-copy">Simple as <code>iso8601.parse_date("2008-09-03T20:56:35.450686Z")</code></span>
<span class="comment-copy">The question wasn't "how do I parse ISO 8601 dates", it was "how do I parse this exact date format."</span>
<span class="comment-copy">@tiktak The OP asked "I need to parse strings like X" and my reply to that, having tried both libraries, is to use another one, because iso8601 has important issues still open. My involvement or lack thereof in such a project is completely unrelated to the answer.</span>
<span class="comment-copy">Be aware that the pip version of iso8601 hasn't been updated since 2007 and has some serious bugs that are outstanding.  I recommend applying some critical of the patches yourself or find one of the many github forks that have already done so <a href="https://github.com/keithhackbarth/pyiso8601-strict" rel="nofollow noreferrer">github.com/keithhackbarth/pyiso8601-strict</a></span>
<span class="comment-copy"><a href="https://pypi.python.org/pypi/iso8601/" rel="nofollow noreferrer">iso8601</a>, a.k.a. <i>pyiso8601</i>, has been updated as recently as Feb 2014. The latest version supports a much broader set of ISO 8601 strings. I've been using to good effect in some of my projects.</span>
<span class="comment-copy">I disagree, this is practically unreadable and as far as I can tell does not take into account the Zulu (Z) which makes this datetime naive even though time zone data was provided.</span>
<span class="comment-copy">I find it quite readable. In fact, it's probably the easiest and most performing way to do the conversion without installing additional packages.</span>
<span class="comment-copy">This is equivalent of d=datetime.datetime(*map(int, re.split('\D', s)[:-1])) i suppose.</span>
<span class="comment-copy">a variation: <code>datetime.datetime(*map(int, re.findall('\d+', s))</code></span>
<span class="comment-copy">This results in a naive datetime object without timezone, right? So the UTC bit gets lost in translation?</span>
<span class="comment-copy">You can't just strip .Z because it means timezone and can be different. I need to convert date to the UTC timezone.</span>
<span class="comment-copy">A plain datetime object has no concept of timezone. If all your times are ending in "Z", all the datetimes you get are UTC (Zulu time).</span>
<span class="comment-copy">if the timezone is anything other than <code>""</code> or <code>"Z"</code>, then it must be an offset in hours/minutes, which can be directly added to/subtracted from the datetime object.  you <i>could</i> create a tzinfo subclass to handle it, but that's probably not reccomended.</span>
<span class="comment-copy">Additionally, "%f" is the microsecond specifier, so a (timezone-naive) strptime string looks like: "%Y-%m-%dT%H:%M:%S.%f" .</span>
<span class="comment-copy">This will raise an exception if the given datetime string has a UTC offset other than "Z". It does not support the entire RFC 3339 format and is an inferior answer to others that handle UTC offsets properly.</span>
<span class="comment-copy">But in 3.7, you <i>also</i> have <code>datetime.fromisoformat()</code> which handles strings like your input automatically: <code>datetime.datetime.isoformat('2018-01-31T09:24:31.488670+00:00')</code>.</span>
<span class="comment-copy">Arrow doesn't support ISO8601 properly though: <a href="https://github.com/crsmithdev/arrow/issues/291" rel="nofollow noreferrer">github.com/crsmithdev/arrow/issues/291</a></span>
<span class="comment-copy">Just use python-dateutil - arrow requires python-dateutil.</span>
<span class="comment-copy">This answer relies upon hard-coding a particular UTC offset (namely "Z", which means +00:00) into the format string passed to <code>strptime</code>. This is a bad idea because it will fail to parse any datetime with a different UTC offset and raise an exception. See <a href="http://stackoverflow.com/a/30696682/1709587">my answer</a> that describes how parsing RFC 3339 with strptime is in fact impossible.</span>
<span class="comment-copy">It's hard-coded but its sufficient for case when you need to parse zulu only.</span>
<span class="comment-copy">@alexander yes - which may be the case if, for instance, you know that your date string was generated with JavaScript's <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString" rel="nofollow noreferrer"><code>toISOString</code></a> method. But there's no mention of the limitation to Zulu time dates in this answer, nor did the question indicate that that's all that's needed, and just using <code>dateutil</code> is usually equally convenient and less narrow in what it can parse.</span>
<span class="comment-copy">Django's <code>DateTimeField</code> uses this when you set a string value.</span>
<span class="comment-copy">Isn't this exactly @Flimms answer above?</span>
<span class="comment-copy">Where do you see him parsing in seconds? I found this article by trying to get epoch time so I figured someone else would be as well.</span>
<span class="comment-copy">This <b>not</b> UTC on my system. Rather, the output in seconds is the unix epoch time as if the date was in my local time zone.</span>
<span class="comment-copy">This answer is buggy and should not be accepted. Probably the whole question should be marked as a duplicate of <a href="https://stackoverflow.com/questions/11743019/convert-python-datetime-to-epoch-with-strftime" title="convert python datetime to epoch with strftime">stackoverflow.com/questions/11743019/…</a></span>
<span class="comment-copy">@tripleee Actually I just checked the code and it does appear to return the correct answer: <code>455051100</code> (checked at <a href="https://www.epochconverter.com/" rel="nofollow noreferrer">epochconverter.com</a>),,, unless I'm missing something?</span>
<span class="comment-copy">This looks like a great library!  For those wanting to optimize ISO8601 parsing on Google App Engine, sadly, we can't use it since it's a C library, but your benchmarks were insightful to show that native <code>datetime.strptime()</code> is the next fastest solution.  Thanks for putting all that info together!</span>
<span class="comment-copy">@hamx0r, be aware that <code>datetime.strptime()</code> is not a full ISO 8601 parsing library. If you are on Python 3.7, you can use the <code>datetime.fromisoformat()</code> method, which is a little more flexible. You might be <a href="https://github.com/closeio/ciso8601/blob/benchmarking/README.rst#benchmark" rel="nofollow noreferrer">interested in this more complete list of parsers</a> which should be merged into the ciso8601 README soon.</span>
<span class="comment-copy">ciso8601 works quite nice, but one have to first do "pip install pytz", because one cannot parse a timestamp with time zone information without the pytz dependency. Example would look like: dob = ciso8601.parse_datetime(result['dob']['date'])</span>
<span class="comment-copy">@Dirk, <a href="https://github.com/closeio/ciso8601#dependency-on-pytz-python-2" rel="nofollow noreferrer">only in Python 2</a>. But even that <a href="https://github.com/closeio/ciso8601/pull/58" rel="nofollow noreferrer">should be removed</a> in the next release.</span>
<span class="comment-copy">Thanks. This is disgusting. I love it.</span>
<span class="comment-copy">Generally, links to a tool or library <a href="http://stackoverflow.com/a/251605/584192">should be accompanied by usage notes, a specific explanation of how the linked resource is applicable to the problem, or some sample code</a>, or if possible all of the above.</span>
<span class="comment-copy">This answer relies upon hard-coding a particular UTC offset (namely "Z", which means +00:00) into the format string passed to <code>strptime</code>. This is a bad idea because it will fail to parse any datetime with a different UTC offset and raise an exception. See <a href="http://stackoverflow.com/a/30696682/1709587">my answer</a> that describes how parsing RFC 3339 with strptime is in fact impossible.</span>
<span class="comment-copy">In theory, yes, this fails. In practice, I've never encountered an ISO 8601-formatted date that wasn't in Zulu time. For my very-occasional need, this works great and isn't reliant on some external library.</span>
<span class="comment-copy">you could use <code>timezone.utc</code> instead of <code>timezone(timedelta(0))</code>. Also, the code works in Python 2.6+ (at least) if you <a href="http://stackoverflow.com/a/2331635/4279">supply <code>utc</code> tzinfo object</a></span>
<span class="comment-copy">Doesn't matter if you've encountered it, it doesn't match the spec.</span>
<span class="comment-copy">You can use the <code>%Z</code> for timezone in the most recent versions of Python.</span>
<span class="comment-copy">This just ignores the timezone '2013-01-28T14:01:01.335612-08:00' --&gt; parsed as UTC, not PDT</span>
