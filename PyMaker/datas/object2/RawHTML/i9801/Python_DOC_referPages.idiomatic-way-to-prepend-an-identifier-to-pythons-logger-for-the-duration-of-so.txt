<div class="post-text" itemprop="text">
<p>I have a server used by many clients. In order to make finding log entries easier, I wanted to allow the client to supply a UUID for each request, and then prepend each log message with that UUID for the duration of the request. The benefit to this is that the client can supply the ID to me if they encounter some bug, and I would be able to quickly find it in the logs. I assume this is pretty standard; is there any idiomatic was of accomplishing this task in Python?</p>
<p>I could do this naively by manually prepending the uuid to each log message:</p>
<pre><code>import uuid
import logging
logger = logging.getLogger(__name__)

def request(*args, **kwargs):
    _id = args.get("_id", str(uuid.uuid4()))
    logger.info("{} - {}".format(_id, "Starting request"))
</code></pre>
<p>I could also create a new logger for each request, and change the <code>formatter</code> to take care of prepending for me:</p>
<pre><code>import uuid
import logging

def build_logger(_id):
    logger = logging.getLogger(_id)
    # ...
    formatter = logging.Formatter('%(name)s - %(message)s')
    # ...
    return logger

import uuid
def request(*args, **kwargs):
   _id = args.get("_id", str(uuid.uuid4()))
    logger = build_logger(_id)
</code></pre>
<p>Then I thought that I could perhaps create a proxy class, that would intercept calls to <code>info</code>, <code>debug</code>, <code>exception</code>, and etc, and prepend the uuid. Something like:</p>
<pre><code>import uuid
import logging
logger = logging.getLogger(__name__)

class Logger(object):
    """Naive Proxy class for logger"""
    def __init__(self, _id):
        self._id = _id
    def debug(self, msg):
        logger.debug("{} - {}".format(self._id, msg)
    def info(self, msg):
        logger.info("{} - {}".format(self._id, msg)
    # and etc. for each level and `exception`

def request(*args, **kwargs):
    _id = args.get("_id", str(uuid.uuid4()))
    logger = Logger(_id)
</code></pre>
<p>And why not collapse these using <code>__getattr__</code> and a decorator?</p>
<pre><code>import uuid
import logging
logger = logging.getLogger(__name__)

def loggerator(_id):
    """
    Decorator to intercept `info`, `debug`, etc. and prepend the `_id`
    Used in the Logger Proxy class
    """
    def _loggerator(func):
        def __loggerator(msg):
            return func("{} - {}".format(_id, msg))
        return __loggerator
    return _loggerator

class Logger(object):
    """Proxy class for logger"""
    def __init__(self, _id):
        self._id = _id
    def __getattr__(self, item):
        if item == '_id':
            return object.__getattribute__(self, item)
        if item in ('debug', 'info', 'warn', 'warning', 'error', 'critical', 'fatal', 'exception'):
            return loggerator(self._id)(getattr(logger, item))
        return getattr(logger, item)

def request(*args, **kwargs):
    _id = args.get("_id", str(uuid.uuid4()))
    logger = Logger(_id)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How to do this is documented in the <a href="https://docs.python.org/3/howto/logging-cookbook.html#adding-contextual-information-to-your-logging-output" rel="nofollow noreferrer">Logging Cookbook</a>, which is part of the Python documentation.</p>
</div>
