<div class="post-text" itemprop="text">
<p>Lets say I have: </p>
<pre><code>class Bar:
    pass
A = Bar()

while A:
    print("Foo!")
</code></pre>
<p>What operation is then called on <code>A</code> in order to determine the <code>while</code> loop? </p>
<p>I've tried <code>__eq__</code> but that didn't do much. </p>
</div>
<div class="post-text" itemprop="text">
<p>User-defined objects are truthy, unless you define a custom <code>__bool__</code>:</p>
<pre><code>&gt;&gt;&gt; class A:
...     pass
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; if a: print(1)
...
1
&gt;&gt;&gt; class B:
...     def __bool__(self):
...         return False
...
&gt;&gt;&gt; b = B()
&gt;&gt;&gt; if b: print(1)
...
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/reference/compound_stmts.html#the-while-statement" rel="nofollow noreferrer"><code>while</code> statement</a> is composed of the <code>while</code> keyword followed by an expression.</p>
<p>When an <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">expression is used in a control flow statement</a> the truth value of that expression is evaluated by calling the objects <code>__bool__</code> method:</p>
<blockquote>
<p>In the context of Boolean operations, and <em>also when expressions are used by control flow statements</em>, the following values are interpreted as false: <code>False</code>, <code>None</code>, numeric zero of all types, and empty strings and containers (including strings, tuples, lists, dictionaries, sets and frozensets). <em>All other values are interpreted as true.</em> <em>User-defined objects can customize their truth value by providing a <code>__bool__()</code> method.</em></p>
</blockquote>
<p>In short, the result depends on what the <code>__bool__</code> of your object returns; since you haven't specified one, a default value of <code>True</code> is used.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are different methods, that can be called, to determine, whether an object evaluates to <code>True</code> or <code>False</code>.</p>
<p>If a <code>__bool__</code>-method is defined, this is called, otherwise, if <code>__len__</code> is defined, its result is compared to <code>0</code>.</p>
</div>
<span class="comment-copy">I think A is a reference to an instance of Bar, and therefore not False.</span>
<span class="comment-copy"><code>bool(A)</code> I think ...</span>
<span class="comment-copy">@richard - Failure to understand code is not an appropriate reason to edit it. These "confusing and irrelevent chevrons, elipses" are from an interactive interpreter session.</span>
<span class="comment-copy">I have used ipython, as well. I have also seen my pupils type in the chevrons.</span>
<span class="comment-copy">@richard - The question is explicitly tagged with Python 3, and contains a Python 3-style <code>print()</code> call (which technically works in Python 2, but is much more likely to appear in Python 3).</span>
<span class="comment-copy">@richard - Also, <a href="http://stackoverflow.com/questions/8909932/how-to-overload-pythons-bool-method" title="how to overload pythons bool method">stackoverflow.com/questions/8909932/â€¦</a>.</span>
<span class="comment-copy">There is nothing non python2 about that print call, and I put in the comment to help anyone that comes after me, not to start an argument.</span>
