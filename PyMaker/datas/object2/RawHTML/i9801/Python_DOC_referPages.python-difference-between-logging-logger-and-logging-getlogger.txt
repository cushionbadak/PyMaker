<div class="post-text" itemprop="text">
<p>Yes, I see python doc says: "Loggers are never instantiated directly, but always through the module-level function logging.getLogger(name)", but I have an issue to debug and want to know the root cause.</p>
<p>here is the example:</p>
<pre><code>#!/usr/bin/python
import logging
logger = logging.getLogger("test")

format = "%(asctime)s [%(levelname)-8s] %(message)s"
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter(format, datefmt="%Y-%m-%d %H:%M:%S"))
handler.setLevel(logging.DEBUG)
logger.addHandler(handler)

logger.info("test")
</code></pre>
<p>Using logging.getLogger("test") here, log message will not be printed.</p>
<p>If I change logging.getLogger("test") to logging.Logger("test"), the log message will be printed. </p>
<pre><code>#!/usr/bin/python
import logging
logger = logging.Logger("test")

format = "%(asctime)s [%(levelname)-8s] %(message)s"
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter(format, datefmt="%Y-%m-%d %H:%M:%S"))
handler.setLevel(logging.DEBUG)
logger.addHandler(handler)

logger.info("test")
</code></pre>
<p>Or we can using logging.getLogger("test") <strong>and</strong> set logger level to logging.DEBUG.</p>
<pre><code>#!/usr/bin/python
import logging
logger = logging.getLogger("test")

format = "%(asctime)s [%(levelname)-8s] %(message)s"
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter(format, datefmt="%Y-%m-%d %H:%M:%S"))
handler.setLevel(logging.DEBUG)
logger.addHandler(handler)
logger.setLevel(logging.DEBUG)

logger.info("test")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The method <code>.getLogger("test")</code> is looking for any existing logger configurations for the name <code>"test"</code> while the <code>.Logger("test")</code> is creating a default logger with the name <code>"test"</code> and sets the default log level to 0. If the <code>getLogger</code> method doesn't find a logger class by that name then it will create a basic logger that will have an effective level of 30 (<a href="https://docs.python.org/3/library/logging.html#logging-levels" rel="nofollow noreferrer">https://docs.python.org/3/library/logging.html#logging-levels</a>) which will ignore your DEBUG message. You can check via <code>logger.getEffectiveLevel()</code> to notice the difference.</p>
<p>Ideally you would create loggers and set them based on the proper naming/configurations instead of accepting the default configuration.</p>
</div>
<span class="comment-copy">seems that doesn't explain why the message is printed while using Logger ("test") but not getLogger("test"). Both of them get a logging.Logger object with log level 0.</span>
<span class="comment-copy">See edit, didn't realize a section of it was cut off when I submitted.</span>
<span class="comment-copy">Thanks ioneyed, I see the difference after checking logger.getEffectiveLevel(), .Logger("test") won't inherit from any logger, while .getLogger("test") will inherit from the root logger which has default log level == 30.</span>
