<div class="post-text" itemprop="text">
<p>I need to strip the string off the part that occurs before the character <code>':'</code>, where <code>':'</code> may occur multiple times.
For Example:</p>
<pre><code>input: 'Mark: I am sending the file: abc.txt'
output: 'I am sending the file: abc.txt'
</code></pre>
<p>The function I have is this (Python code)</p>
<pre><code>def process_str(in_str):
    str_list = in_str.split(':')[1:]
    out_str = ''
    for each in str_list:
        out_str += each
    return out_str
</code></pre>
<p>The output I am getting is <code>'I am sending the file abc.txt'</code> without the second <code>':'</code>.
Is there a way to correct this? 
Also can this code be made more efficient in time and space complexity?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>split</code> isn't the best approach for this. You want to use a regular expression.</p>
<pre><code>import re

def process_str(in_str):
  return re.sub('^.*?: ', '', in_str)
</code></pre>
<p>This returns the string without anything up to the first <code>:</code> (colon followed by space). You can read more about Python regular expressions <a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about using <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><strong>split()</strong></a>?</p>
<pre><code>str = 'Mark: I am sending the file: abc.txt'
print(str.split(':', 1)[-1])
</code></pre>
<p><em>Use -1 to account for list index out of bounds if the delimiter is not in the initial string</em> </p>
<p><strong>Output:</strong></p>
<pre><code>I am sending the file: abc.txt'
</code></pre>
<p>Try it out <a href="https://repl.it/repls/AntiquewhiteWatchfulFugu" rel="nofollow noreferrer"><strong>here</strong></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you want is <code>out_str = ':'.join(in_str.split(':')[1:])</code>: since you stripped all <code>':'</code>, you need to re-insert them. </p>
<p>A better way would probably to use <code>out_str = in_str[in_str.find(':')+1:]</code>.
<code>find(':')</code> gives you the index of the first <code>':'</code>.</p>
</div>
<span class="comment-copy">Could you give more examples. I'm not quite sure what your after. Why isn't <code>I am sending the file</code> striped?</span>
<span class="comment-copy">Thank you. This works perfectly. I thought of using regex but I'm not very proficient with it.</span>
<span class="comment-copy">And why this was down voted? Please explain what's wrong with my answer...</span>
