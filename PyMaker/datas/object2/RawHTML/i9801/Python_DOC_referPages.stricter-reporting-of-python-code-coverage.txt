<div class="post-text" itemprop="text">
<p>Suppose I have two Python modules in my project:</p>
<pre><code>/project
  /module1
    __init__.py [Empty]
    class1.py
  /module2
    __init__.py [Empty]
    class2.py
</code></pre>
<p><code>Class1</code> has some functions, but the important one is <code>doEverythingAndGetData()</code>. Let's pretend it gives a number back while executing several internal functions.</p>
<p>Now suppose that <code>Class2</code> uses <code>Class1</code>, and then has further functionality implemented. <code>Class2</code> only has two functions - <code>__init__</code> and <code>foo()</code>.</p>
<pre><code>def foo(self):
    #Create an instance of Class1
    class1 = Class1()

    #Get some information using class1
    data = class1.doEverythingAndGetData()

    #Do some logic on the data, it doesn't matter
    result = (data + 10) * 2

    #Return the result
    return result
</code></pre>
<p>Now I want to write a unit test for Class2 that covers <code>foo()</code>.</p>
<pre><code>def test_Class2_foo():
    #Create the Class2 object
    class2 = Class2()

    #Get the result
    bar = class2.foo()

    #Compare the value
    expectedBar = 1337
    assert expectedBar == bar, "Mismatch! {} != {}".format(expectedBar, bar)
</code></pre>
<p>This unit test is the only one written for the project. We run the unit test and generate a Code Coverage report.</p>
<p>After examining the Code Coverage report, we will see that <code>Class2</code> is well covered, as we have have our unit test and it is doing what it is supposed to. Fantastic!</p>
<p>However, we also note that <code>Class1</code> is also well covered, as the unit test <em>also</em> covered <code>class1.doEverythingAndGetData()</code> and any of it's underlying functions. Our report is showing fantastic coverage for the entire project! Send it to the PO and let's take an early weekend!</p>
<p>This is misleading though. What I really want the report to show is <code>Class2</code> being covered, as we have written a unit test that covers the module reliably. I <strong>don't</strong> want it to show <code>Class1</code> as being covered, as we don't have any unit tests that check it's internal functionality. It simply <em>assumes</em> that <code>Class1</code> works correctly, and if the unit test fails, it's description will not be very helpful nor transparent if <code>Class1</code> is at fault.</p>
<p>So, to simplify:</p>
<ul>
<li><code>Class2</code> is covered appropriately via Unit Testing</li>
<li><code>Class1</code> has <strong>no</strong> direct coverage and puts the project at risk</li>
<li>When Unit Tests are ran and the Code Coverage report is generated, it incorrectly shows <em>both</em> modules as well tested</li>
<li>Instead, I'd like the report to show that <code>Class2</code> is covered, as <code>foo()</code> is explicitly called by the test, and <code>Class1</code> is not covered, as it's functions are called within <code>Class2.foo()</code></li>
</ul>
<p>This leads me to the following questions:</p>
<ol>
<li>Is there a way to prevent this from happening in the coverage report? </li>
<li>What, if any, is the term to use to refer to this type of coverage?</li>
<li>Is there a particular coding pattern that helps prevent this issue?</li>
</ol>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You will need to <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer"><code>mock</code></a> the data coming from <code>class1.doEverythingAndGetData()</code>. In your current implementation, the <em>actual</em> code inside that function is being run whenever you call the unittest for <code>class2</code>. Something like this will help you,</p>
<pre><code>from mock import patch
import class1

@patch('class1.doEverythingAndGetData')
def test_Class2_foo(self, doEverythingAndGetData):
    # Let's assume we are mocking 10 as the return value
    doEverythingAndGetData.return_value = 10

    class2 = Class2()

    # This will take mocked value in its implementation
    bar = class2.foo()

    #Compare the value
    expectedBar = 1337
    assert expectedBar == bar, "Mismatch! {} != {}".format(expectedBar, bar)
</code></pre>
<p>Now you can write a separate <code>unittest</code> for <code>class1.doEverythingAndGetData()</code> and get the correct coverage report!</p>
<p>So answering your 3 questions,</p>
<blockquote>
<p>Is there a way to prevent this from happening in the coverage report?</p>
<p>Is there a particular coding pattern that helps prevent this issue?</p>
</blockquote>
<p>Yes! Use <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer"><code>mock</code></a>.</p>
<blockquote>
<p>What, if any, is the term to use to refer to this type of coverage?</p>
</blockquote>
<p>In some sense, what you've done could refer to <a href="https://en.wikipedia.org/wiki/Integration_testing" rel="nofollow noreferrer">integration</a> tests, where you test a number of functions together against a series of input combinations. In <a href="https://en.wikipedia.org/wiki/Unit_testing" rel="nofollow noreferrer">unit</a> tests on the other hand, you test <em>every</em> function and try to see its working without caring about whether dependent functions work or not.</p>
</div>
<span class="comment-copy">You will need to provide a fake number to <code>class1.doEverythingAndGetData()</code>. As a result, the <code>doEverythingAndGetData()</code> function is never called, it just returns a value. This is called <code>unittest.mock</code></span>
<span class="comment-copy">Hello, thank you for your detailed response. I'll try out this solution and see if it fits what I need, but it looks like it should! However, suppose that <code>class1.doEverythingAndGetData()</code> returns a much more complicated object than simply <code>10</code>. Will this work similarly for that case?</span>
<span class="comment-copy">Yes, you will need to mock data accordingly. Try to have multiple unit tests where you mock different representative data</span>
