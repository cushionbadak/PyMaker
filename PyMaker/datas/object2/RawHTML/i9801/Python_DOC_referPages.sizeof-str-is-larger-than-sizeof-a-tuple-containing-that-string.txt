<div class="post-text" itemprop="text">
<p>The following code produces the given output.</p>
<pre><code>import sys

print('ex1:')
ex1 = 'Hello'
print('\t', ex1.__sizeof__())

print('\nex2:')
ex2 = ('Hello', 53)
print('\t', ex2.__sizeof__())
</code></pre>
<p>Output:</p>
<pre><code>ex1:
     54    
ex2:
     40
</code></pre>
<p>Why does <code>__sizeof__()</code> print a smaller result when a second element is considered? Shouldn't the output be larger? I realize from <a href="https://stackoverflow.com/questions/12477835/python-generator-objects-sizeof">this answer</a> that I should be using <code>sys.getsizeof()</code>, but the behavior seems odd nonetheless. I'm using <code>Python 3.5.2</code>.</p>
<p>Also, as <a href="https://stackoverflow.com/users/4859841/herbert">@Herbert</a> pointed out, <code>'Hello'</code> takes up more memory than <code>('Hello',)</code>, which is a <code>tuple</code>. Why is this?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is due to the fact that <code>tuple</code> objects (and I'm pretty sure all containers except from string) assess their size <strong>not</strong> by including the actual sizes of their respective contents but, rather, by calculating the size of pointers to <code>PyObject</code>s times the elements they contain. That is, they hold pointers to the (generic) <code>PyObject</code>s contained and that's what contributes to its overall size.</p>
<p>This is hinted in the <a href="https://docs.python.org/3/reference/datamodel.html#objects-values-and-types" rel="nofollow noreferrer">Data Model chapter of the Python Reference</a> manual:</p>
<blockquote>
<p>Some objects contain <em>references</em> to other objects; these are called containers. Examples of containers are tuples, lists and dictionaries. The references are part of a containerâ€™s value.</p>
</blockquote>
<p><sup>(I'm emphasizing the word references.)</sup></p>
<p><a href="https://github.com/python/cpython/blob/b9a755188ac742029be50ef047ec0969c6d0e921/Objects/tupleobject.c#L791" rel="nofollow noreferrer">In <code>PyTupleType</code></a>, a struct where the information on the <code>tuple</code> type is contained, we see that the <a href="https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_itemsize" rel="nofollow noreferrer"><code>tp_itemsize</code></a> field has <code>sizeof(PyObject *)</code> as its value:</p>
<pre class="lang-c prettyprint-override"><code>PyTypeObject PyTuple_Type = {
    PyVarObject_HEAD_INIT(&amp;PyType_Type, 0)
    "tuple",
    sizeof(PyTupleObject) - sizeof(PyObject *),
    sizeof(PyObject *),  // &lt;-- sizeof pointer to PyObject's
</code></pre>
<p><sup><code>32</code>bit builds and <code>64</code>bit builds of Python have a <code>sizeof(PyObject *)</code> equal to 8 bytes.</sup></p>
<p>This is the value that is going to be multiplied by the number of items contained in the <code>tuple</code> instance. When we look at <a href="https://github.com/python/cpython/blob/b9a755188ac742029be50ef047ec0969c6d0e921/Objects/typeobject.c#L4422" rel="nofollow noreferrer"><code>object_size</code></a>, the <code>__sizeof__</code> method that <code>tuple</code>s inherit from <code>object</code> (examine <code>object.__sizeof__ is tuple.__sizeof__</code>), we see this clearly:</p>
<pre class="lang-c prettyprint-override"><code>static PyObject *
object_sizeof(PyObject *self, PyObject *args)
{
    Py_ssize_t res, isize;

    res = 0;
    isize = self-&gt;ob_type-&gt;tp_itemsize;
    if (isize &gt; 0)
        res = Py_SIZE(self) * isize;  // &lt;-- num_elements * tp_itemsize
    res += self-&gt;ob_type-&gt;tp_basicsize;

    return PyLong_FromSsize_t(res);
}
</code></pre>
<p>see how <code>isize</code> (obtained from <code>tp_itemsize</code>) is multiplied by <a href="https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Include/object.h#L119" rel="nofollow noreferrer"><code>Py_SIZE(self)</code></a>, which, is another macro that grabs the <code>ob_size</code> value <em>indicating the number of elements</em> inside the <code>tuple</code>.</p>
<p>This is why, even if we create a somewhat large string inside a tuple instance:</p>
<pre><code>t = ("Hello" * 2 ** 10,)
</code></pre>
<p>with the element inside it having a size of:</p>
<pre><code>t[0].__sizeof__()         # 5169
</code></pre>
<p>the size of the tuple instance: </p>
<pre><code>t.__sizeof__()            # 32
</code></pre>
<p>equals that of one with simply <code>"Hello"</code> inside:</p>
<pre><code>t2 = ("Hello",)
t[0].__sizeof__()         # 54
t2.__sizeof__()           # 32 Tuple size stays the same.
</code></pre>
<p>For strings, each individual character increases the value returned from <code>str.__sizeof__</code>. This, along with the fact that <code>tuple</code>s only store pointers, gives a misleading impression that <code>"Hello"</code> has a larger size than the tuple containing it.</p>
<p>Just for completeness, <a href="https://github.com/python/cpython/blob/b9a755188ac742029be50ef047ec0969c6d0e921/Objects/unicodeobject.c#L13737" rel="nofollow noreferrer"><code>unicode__sizeof__</code></a> is the one that computes this. It really just multiplies the length of the string with the character size (which depends on what kind the character is <code>1</code>, <code>2</code> and <code>4</code> byte chars).</p>
<p>The only thing I'm not getting with tuples is why it's basic size (indicated by <code>tb_basicsize</code>) is listed as <code>sizeof(PyTupleObject) - sizeof(PyObject *)</code>. This sheds <code>8</code> bytes from the overall size returned; I haven't found any explanation for this (yet).</p>
</div>
<span class="comment-copy">Your first object is not a tuple, it's a string within parenthesis.</span>
<span class="comment-copy">Another top answer, but I wonder if the cpython tag is being neglected on these python-internals questions</span>
<span class="comment-copy">I've wondered that myself @Chris_Rands. A while ago, after skimming through the tags top Q's, I've come to realize that most people equate <code>python-internals</code> with how <code>CPython</code> works, so I'm just rolling with that sentiment :-)</span>
