<div class="post-text" itemprop="text">
<p>I am writing a script to automate some GIT tasks. I know about GITPython but I prefer not using that. Even tough it may be easier.</p>
<p>I got the following piece of code:</p>
<pre><code>def executeCommand(cmd):
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
    out, error = p.communicate()
    if not error:
        return out.strip()
    else:
        print repr(out)
        print repr(error)
        print "Stopping execution!\r"
        exit(0)
</code></pre>
<p>This piece of code given the command <code>['git', 'checkout', 'master']</code> does indeed checkout the master. BUT it will stop executing, apparently because the error variable is not empty. I tried to print the outputs on error which is the following:</p>
<pre><code>"Your branch is up-to-date with 'origin/master'.\n"
"Switched to branch 'master'\n"
Stopping execution!
</code></pre>
<p>As you can see, it succesfully checked out the master branch (Also verified by <code>git status</code>). But why is the second line filled in the error variable? How to handle this? Or is there no way of correctly handling this? Or should i not do any error checking? What is the best solution/explaination for this?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Its not an error ! its the output on stderr :)</p>
<p>If you are on a linux terminal, you can test this by running the following</p>
<pre><code>git checkout master 2&gt;/dev/null

# You shouldn't see any output. 
# This is because git is writing those messages to stderr.
</code></pre>
<p>According to <a href="https://docs.python.org/2/library/subprocess.html#popen-objects" rel="nofollow noreferrer">subprocess docs</a> </p>
<blockquote>
<p>communicate() returns a tuple (stdoutdata, stderrdata)</p>
</blockquote>
<p>i.e. the output on stdout and stderr. </p>
<p>If you want to check for errors, you should use the <code>returncode</code> attribute.</p>
<p>in your case</p>
<pre><code>stdout, stderr = p.communicate()
if p.returncode == 0:
    return stdout.strip()

else:
    # handle error
    print repr(stdout)
    print repr(stderr)
    print "stopping execution!\r"
    exit(0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>algrebe answer is the right answer for your question, but this might help you.</p>
<p>Idea is to use try-except for execution and poll for checking if error occured.
With some error handling and format of response (git returns string with \n character for new line and that's how it's written in console) you get generic function that handles all git commands.</p>
<pre><code>class GitError(Exception):
    def __init__(self, value):
        self.value = format_rows(value)

    def __str__(self):
        return repr(self.value)


def execute(command, return_response=False):
    with Popen(command, shell=True, stdout=PIPE, stderr=PIPE) as process:
        try:
            response, error = process.communicate()
        except:
            process.kill()
            raise GitError('Fatal: Cannot execute command.')

        if process.poll():
            raise GitError(get_decoded_lines(error))

        if return_response:
            return format_rows(get_decoded_lines(response))


def get_decoded_lines(output):
    return output.decode().splitlines()


def format_rows(formatted_lines):
    return '\n'.join(formatted_lines)
</code></pre>
<ul>
<li>edit for comment: <a href="https://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="nofollow noreferrer">https://docs.python.org/3/library/subprocess.html#frequently-used-arguments</a></li>
</ul>
</div>
<span class="comment-copy">Holy... that was stupid. I think i got confused by all the examples online giving the variable the name "error". Solved my problem. Thank you!</span>
<span class="comment-copy">Thanks, i will maybe test this later. But why does the Popen have <code>shell=True</code>? Does it need to be a shell? As it would be dangerous if i start using user input. It works now without that parameter set. Or is it default set to true? I hope not...</span>
<span class="comment-copy">I use shell=true to enable shell features like pipes, filename wildcards etc. in the same string where git command is. I know that phyton have implemented similar features with popen arguments but I find this simpler to use for my purposes</span>
