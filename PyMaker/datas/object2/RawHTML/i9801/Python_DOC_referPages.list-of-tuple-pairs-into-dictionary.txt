<div class="post-text" itemprop="text">
<p>I am having trouble with dictionaries in Python. I realise the task is very simple, yet I can't figure it out. My task is to write a function, which converts a list of tuples into a dictionary, where the keys of the dictionary represent the people (from the tuples) and the values represent their friends. Per exp:</p>
<pre><code>pairs_of_people = {("Adam", "Brian"), ("Adam", "Gabe"), ("Adam", "Hagan"),
    ("Brian", "Calvin"), ("Brian", "Hagan"),
    ("Calvin", "Dan")}`
</code></pre>
<p>must return:</p>
<pre><code>{"Adam": {"Brian", "Gabe", "Hagan"}, "Brian": {"Adam", "Hagan", "Calvin"}, "Calvin": {"Brian", "Dan"}}
</code></pre>
<p>Any help? Thank you. An if someone has a good intro on dictionaries somewhere, it would be greatly appreciated. I just can't figure them out.</p>
</div>
<div class="post-text" itemprop="text">
<p>A very quick way to brute force this solution is to use a defaultdict.
This will add to our output dictionary the people and their friends if either the "person" or the "friend" is a required key (the first person in the input tuples).</p>
<pre><code>from collections import defaultdict

pairs_of_people = {("Adam", "Brian"), ("Adam", "Gabe"), ("Adam", "Hagan"),
               ("Brian", "Calvin"), ("Brian", "Hagan"),
               ("Calvin", "Dan")}

required_keys = {t[0] for t in pairs_of_people}

out = defaultdict(set)

for person, friend in pairs_of_people:
    if person in required_keys:
        out[person].add(friend)
    if friend in required_keys:
        out[friend].add(person)

print(out)
&gt;&gt; {"Adam": {"Brian", "Gabe", "Hagan"}, "Brian": {"Adam", "Hagan", "Calvin"},
    "Calvin": {"Brian", "Dan"}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is way easier to construct this dict containing <code>sets</code> (apparently) by using a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> with a <code>set</code> as the default factory:</p>
<pre><code>from collections import defaultdict

d = defaultdict(set) 
</code></pre>
<p>Also, use an auxiliary <code>set</code> of <code>names</code> containing the first name from each tuple. That way you can check for membership and, if two pairs are names in the <code>names</code> set they'll be added to each others resulting sets:</p>
<pre><code>names = {i[0] for i in pairs_of_people}

for i, j in pairs_of_people:
    d[i].add(j)
    if j in names:
        d[j].add(i)

d = dict(d)   # if necessarily a dict
</code></pre>
<p>A <code>defaultdict</code> is just a special kind of dict that makes these tasks less tedious. Now, <code>d</code> contains:</p>
<pre><code>print(d)
{'Brian': {'Hagan', 'Adam', 'Calvin'}, 'Adam': {'Hagan', 'Brian', 'Gabe'}, 'Calvin': {'Brian', 'Dan'}}
</code></pre>
<p>Due to the fact that your tuples are contained in a set, you can't have predetermined ordering unless you move them to a list and then sort them. You could also change <code>defaultdict</code> to have a default factory of list with <code>d = defaultdict(list)</code> and use <code>d[i].append(j)</code> and <code>d[j].append(i)</code> instead of <code>.add</code>.</p>
<p>As for an introduction to dictionaries, you could look into the section on Dictionaries of the <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">Python Tutorial</a>.</p>
</div>
<span class="comment-copy">FYI the values in your desired output are sets, not dictionaries. Easy to confuse the two if you are new to dictionaries.</span>
<span class="comment-copy">Thank you for the note! :)</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/40690537/python-construction-of-value-set-dictionary">Python construction of value set dictionary</a></span>
<span class="comment-copy">Yep, this one worked &amp; is actually a bit easier to understand than the first example mentioned above. Thank you. :)</span>
<span class="comment-copy">One more question. How would I do the exact reverse? In other words, how would I transform this new dictionary back into pairs of people?</span>
<span class="comment-copy">@KevinKlarić The reverse is actually easier: <code>friendships = {"Adam": {"Brian", "Gabe", "Hagan"}, "Brian": {"Adam", "Hagan", "Calvin"},     "Calvin": {"Brian", "Dan"}}  ;    li = []   ;  for person, friends in friendships.items():     for friend in friends:         li.append((person, friend))</code></span>
<span class="comment-copy">One more problem. While your solution does work, it returns more than I have to return (for the task at hand). For example, converting this {"A": {"B"}, "B": {"A"}}) to pairs should return only this pair {("A", "B")} and not both A, B and B, A.  Another example: This {A: {B, C}, B: {A, C}, C: {A, B, D}, D: {C}} should return: {(A, B), (A, C), (B, C), (C, D)}</span>
<span class="comment-copy">This is good, but my output has to have the exact same order as the one I wrote above.</span>
<span class="comment-copy">@KevinKlarić sets don't have ordering and neither do dictionaries, the ordering might be different on different runs of Python.</span>
