<div class="post-text" itemprop="text">
<p>I have a multiple instances of a class. I consider two classes equal, when a certain attribute matches.
All instances are in an array <code>list = [a, b, c]</code>. I now create a new instance of said class <code>d</code>. When I do <code>d in list</code> it ofc outputs <code>false</code>.</p>
<p>My question is: How is membership checked when using <code>in</code>? Is it normal comparison (which means I can use <code>__eq__</code> in my class to implement the equality of classes)? If not: How can I achieve that <code>in</code> matches if a certain attribute of a class equals?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>class Foo:
    def __init__(self, x):
        self.x = x
    def __eq__(self, other):
        if isinstance(other, Foo):
            return self.x == other.x

a = [1,2,3,Foo(4),Foo(5)]
Foo(5) in a
&gt;&gt;&gt;True
Foo(3) in a
&gt;&gt;&gt;False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/reference/expressions.html#in" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>For user-defined classes which define the <code>__contains__()</code> method, <code>x in y</code> is true if and only if <code>y.__contains__(x)</code> is true.</p>
<p>For user-defined classes which do not define <code>__contains__()</code> but do define <code>__iter__()</code>, x in y is true if some value z with <code>x == z</code> is produced while iterating over y. If an exception is raised during the iteration, it is as if in raised that exception.</p>
<p>Lastly, the old-style iteration protocol is tried: if a class defines <code>__getitem__()</code>, x in y is true if and only if there is a non-negative integer index i such that <code>x == y[i]</code>, and all lower integer indices do not raise <code>IndexError</code> exception. (If any other exception is raised, it is as if in raised that exception).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Behavior of <code>in</code> is based on the <a href="https://docs.python.org/2/reference/datamodel.html#object.__contains__" rel="nofollow noreferrer"><code>__contains__()</code></a> method. Let us see with an example:</p>
<pre><code>class X():
    def __contains__(self, m):
        print 'Hello'
</code></pre>
<p>Now when you do <code>in</code> on <code>X()</code>m you can see 'Hello' printed</p>
<pre><code>&gt;&gt;&gt; x = X()
&gt;&gt;&gt; 1 in x
Hello
False
</code></pre>
<p>As per the <a href="https://docs.python.org/2/reference/datamodel.html#object.__contains__" rel="nofollow noreferrer"><code>__contains__()</code> document</a>:</p>
<blockquote>
<p>For objects that donâ€™t define <a href="https://docs.python.org/2/reference/datamodel.html#object.__contains__" rel="nofollow noreferrer"><code>__contains__()</code></a>, the membership test first tries iteration via <a href="https://docs.python.org/2/reference/datamodel.html#object.__iter__" rel="nofollow noreferrer"><code>__iter__()</code></a>, then the old sequence iteration protocol via <a href="https://docs.python.org/2/reference/datamodel.html#object.__getitem__" rel="nofollow noreferrer"><code>__getitem__()</code></a>, see <a href="https://docs.python.org/2/reference/expressions.html#membership-test-details" rel="nofollow noreferrer">this section in the language reference</a>.</p>
</blockquote>
</div>
<span class="comment-copy">is there any particular problem you are trying to solve with this, or just general curiosity?</span>
<span class="comment-copy">I try to solve the problem I descriped</span>
<span class="comment-copy">So what you want is, say you have a list of instances of random classes. and then you do 'class' in my_list and it should return True if there is at least one instance of this class? Or do you want to check if any particular instance of the class in the list?</span>
<span class="comment-copy">Your answer is correct so I guess you understand what I meant. The new class is not in the list but may be equal to one class in  a list anyway (duo to attribute check)</span>
<span class="comment-copy">Actually thats what I wanted to know. Thank you!</span>
<span class="comment-copy"><code>contains</code> checks for <code>something in class</code> and not for <code>class in list</code> so this answer does not provide a solution</span>
<span class="comment-copy">No; it is right-associative. <code>x in y</code> ~= <code>y.__contains__(x)</code> just like the answer states. @Fuzzyma</span>
<span class="comment-copy">excatly. My case is <code>class in list</code>. So the <code>__contains__</code> method of <code>list</code> is called. I have no intention of using another thing than the standard list. Its no right  answer after all</span>
<span class="comment-copy">Then override <code>__contains__</code> for your behavior.</span>
<span class="comment-copy"><code>contains</code> checks when I do <code>something in class</code> and not when I do <code>class in list</code></span>
<span class="comment-copy">@Fuzzyma: <code>list</code> also has a contains method defined in it. When you do class in list, <code>__contains__</code> of class is called</span>
<span class="comment-copy">This is only partially true.</span>
<span class="comment-copy">Contains of the list is called and not from the class. As you said yourself: list has a contains method which is used when calling in on it. Contains of the class is only called when you do something in class</span>
