<div class="post-text" itemprop="text">
<p>I want to make a function that takes in a student's test answers and an answer key and return a list that states if they got the answer right or wrong using 1's and 0's.
Here is my code</p>
<pre><code>answerkey='ABCABCDDD'
student11='BBCCBCDDD'
def check_answers(X='student',Y='answer key'):
    result=[]
    for i in range(len(X)):
        for o in range(len(Y)):
            if i==o:
                result.append('1')
            else:
                result.append('0')
        return result
print(check_answers(student11,answerkey))
</code></pre>
<p>My output should give me:</p>
<pre><code> ['0','1','1','0','1','1','1','1','1']
</code></pre>
<p>instead it gives me this:</p>
<pre><code>['1', '0', '0', '0', '0', '0', '0', '0', '0']
</code></pre>
<p>What am i doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>This can all be simplified by using a comprehension and <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a>: </p>
<pre><code>&gt;&gt;&gt; ['1' if x == y else '0' for x, y in zip(answerkey, student11)]
['0', '1', '1', '0', '1', '1', '1', '1', '1']
</code></pre>
<p>However, to address your problem, you actually are doing an unnecessary extra step with that inner loop. It is an extra inefficiency that you don't need. Rely on the fact that your two lists are equal, so iterate over one, and just compare against the other list. Use <code>enumerate</code>, so that in each iteration you have access to the <em>index</em> and <em>value</em>.</p>
<p>Also, you are not using your default keyword arguments properly. You are assigning them as a string by default and not really doing anything with a default case for that kind of assignment, so remove it. </p>
<p>Observe:</p>
<pre><code>answerkey='ABCABCDDD'
student11='BBCCBCDDD'
def check_answers(X, Y):
    result=[]
    for i, v in enumerate(answerkey):
            if v == student11[i]:
                result.append('1')
            else:
                result.append('0')
    return result
print(check_answers(student11,answerkey))
</code></pre>
<p>Output:</p>
<pre><code>['0', '1', '1', '0', '1', '1', '1', '1', '1']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is happening because you <code>o</code> and <code>i</code> are counting through a range i.e. they are counting <code>0,1,2...len(X)</code> and you are also iterating through every value of Y for each value of X instead you should compare variables in the list of the same index </p>
<pre><code>answerkey='ABCABCDDD'
student11='BBCCBCDDD'

def check_answers(X,Y):
    result=[]
    for i in range(len(X)):
        if X[i] == Y[i]:
            result.append('1')
        else:
            result.append('0')

    return result

print(check_answers(student11,answerkey))
</code></pre>
<p>In this algorithm it iterates through the length of X and compares each vallue of the list with the same indices e.g. it checks if <code>X[0] = Y[0]</code></p>
<p>Also in your function you make X='student' and Y='answer key' this is fine because you only have two parameters and it overrides them but if you were to add more later this could cause a problem, if your intention was to just have these as comments I suggest just putting a <code>#X = student and Y = answer key</code> underneath it is cleaner</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to figure out what you're doing wrong, I've strategically put in 2 print statements that will show you what the issue is with your code.</p>
<pre><code>def check_answers(X='student',Y='answer key'):
    result=[]
    print('X: %d, Y: %d' % (len(X), len(Y)))
    for i in range(len(X)):
        for o in range(len(Y)):
            print('i: %d, o: %d' % (i, o))
            if i==o:
                result.append('1')
            else:
                result.append('0')
        return result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just in addition for other answers I'd recommend you use map function</p>
<pre><code>answerkey='ABCABCDDD'
student11='BBCCBCDDD'
def check_answers(X='student',Y='answer key'):
    return map(lambda a,b:a==b and '1' or '0',X,Y)
print(check_answers(answerkey,student11))
</code></pre>
</div>
<span class="comment-copy">I'd go with <code>[str(int(a == b)) for a, b in zip(answerkey, student11)]</code> personally, but horses for courses. +1</span>
<span class="comment-copy">@ZeroPiraeus hmmm, yeah. That's cleaner. I'm genuinely curious if there is a performance gain between the two. I'll check it out.</span>
<span class="comment-copy">@ZeroPiraeus 2.2625668048858643 (mine) vs 5.353425979614258</span>
<span class="comment-copy">Oof! I concede :-)</span>
<span class="comment-copy">@ZeroPiraeus I'm surprised it's that big a difference tbh.</span>
