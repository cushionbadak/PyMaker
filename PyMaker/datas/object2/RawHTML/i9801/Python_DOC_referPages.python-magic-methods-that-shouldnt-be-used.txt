<div class="post-text" itemprop="text">
<p>I've created a class that is a <code>tuple</code> wrapper and tuples doesn't support item mutations.
Should I leave <code>__setitem__</code> and <code>__delitem__</code> implementation or implement those methods like e.g. below (thus fall in kind of Refused Bequest code smell)? Which approach is more pythonic? Aren't custom exceptions better in such case?</p>
<pre><code>def __setitem__(self, key, value):
    """
    :raise: Always.
    :raises: TypeError
    """
    self.data_set[key] = value  # Raise from tuple.

def __delitem__(self, key):
    """
    :raise: Always.
    :raises: TypeError
    """
    raise TypeError("Item deletion is unsupported")  # Custom exceptions thrown.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your class is supposed to be a proper tuple subtype (according to <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle" rel="nofollow noreferrer">Liskov substitution principle</a>), then it should behave the same way as a tuple wrt/ to set/del - which as Guillaume mentions is the default behaviour if you just define neither <code>__setitem__</code> nor <code>__delitem__</code>. I don't see how that would fall into the "Refused Bequest" category.</p>
<p>If your class uses a tuple as part of it's implementation but is NOT supposed to be a proper tuple subtype, then do whatever makes sense - but if you don't want to allow item assignment / deletion then again the simplest thing is to not implement them.</p>
</div>
<div class="post-text" itemprop="text">
<p>Although that is a matter of taste, I think you should not implement them at all. A class that has a <code>__setitem__, __delitem__</code> implements the mutable collection <em>protocol</em> (either implicitly, or even explicitly by using <a href="https://docs.python.org/3/library/collections.abc.html" rel="nofollow noreferrer">collection abstract base classes</a>). Your class just does not support this interface, that's it, and the user has neither reason nor right to assume it does</p>
</div>
<div class="post-text" itemprop="text">
<p>Implement one or the other or both if they make sense for your custom class.</p>
<p>If you implement <code>__setitem__()</code> you will be able to use <code>yourobject[yourindex] = yourvalue</code> syntax in your code (with the semantic that you choose to implement).</p>
<p>If you implement <code>__delitem__()</code> you will be able to use <code>del yourobject[yourindex]</code> </p>
<p>It makes no sense to explictly implement a method just to raise an Exception, Python will do it by default:</p>
<pre><code>class Test(object):
    pass
test = Test()
test['foo'] = 'bar' # will call Test.__setitem__() which is not explicitly defined
</code></pre>
<p>will give <code>TypeError: 'Test' object does not support item assignment</code></p>
</div>
<span class="comment-copy">By Refused Bequest I mean that this class claims to implement <code>__setitem__</code> and <code>__delitem__</code> but it's behaviour shows that it doesn't support those operations.</span>
<span class="comment-copy">AOK. Well actually (as I mentionned) if the goal is to not support item assignment and deletion, then indeed it makes no sense implementing these methods.</span>
