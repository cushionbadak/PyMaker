<div class="post-text" itemprop="text">
<p>Python newbie here. I've been messing around with flow control and have come across a situation I don't quite understand related to exceptions.</p>
<p>In the following code I want the user to enter an integer in a given range and, in the case of non-compliance, keep asking them until they give a valid value:</p>
<pre><code>while True:
    try:
        x = int(raw_input("Pick an integer between 2 and 9. "))
    except ValueError:
        print "Please enter an integer!"
        continue
    else:
        if 2 &lt;= x &lt;= 9:
            print("Your number is {0}.").format(x)
            break
        else:
            print "That's not between 2 and 9!"
            continue
</code></pre>
<p>As far as I can tell, this code works exactly as I want it to. I've thrown every other type of input I can think of at it and it only lets you exit the loop when an integer from 2-9 is entered. <em>Not even floats are accepted.</em></p>
<p>My question is, given that <code>int()</code> can be successfully called on floats,</p>
<pre><code>&gt;&gt;&gt; int(2.1)
2
</code></pre>
<p>why does this try/except construct raise the exception when the input is a <code>float</code>? If I run the code without the try/except statements and enter anything other than an integer, it throws an error and exits.</p>
<p>I'm running python 2.7 from windows powershell.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because <code>raw_input</code> returns a string.</p>
<p>Under the hood, when you call <code>int</code>, it actually calls an objects <code>object.__int__()</code> method. This is different from object to object.<br/>
For a float, this truncates a value (Rounds towards 0).<br/>
On a string, it tries to parse an <code>int</code> according to <a href="https://docs.python.org/3/reference/lexical_analysis.html#integer-literals" rel="nofollow noreferrer">https://docs.python.org/3/reference/lexical_analysis.html#integer-literals</a> (Which can't have a <code>.</code>).  </p>
</div>
<div class="post-text" itemprop="text">
<p>The issue here is that you are calling <code>int()</code> on a string that could potentially contain a period. To fix this I would recommend you change the <code>int()</code> to <code>float()</code>. This should fix your problem</p>
<pre><code>x = float(raw_input("Pick an integer between 2 and 9. "))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not sure what version of Python you are using but if it is Python 3.0 or above you might want to carefully check the print statements in the following clips</p>
<pre><code>except ValueError:
    print "Please enter an integer!"

else:
    print "That's not between 2 and 9!"
</code></pre>
<p>they are not formatted for 3.0  but will probably work ok if you use version 2.x
I think the other answers covered your original problem adequately so I will defer to them.. they know that area better than I.
Good Luck,<br/>
Poe</p>
</div>
<span class="comment-copy">Because you're not calling it on a float.</span>
<span class="comment-copy">what you check ist int("2.1"). That throws an exception. raw_input returns a str.</span>
<span class="comment-copy">Ah thank you! I hadn't considered the fact that <code>int</code> might work differently on the string returned by <code>raw_input</code> than on actual raw input. Cheers for the link, haven't looked into the effects of the lexical anlyzer at all, should be helpful to understand.</span>
<span class="comment-copy">Nono, it works perfectly! I just couldn't understand why it was catching floats when <code>int()</code> usually works just fine on floats. Didn't think about the fact that <code>raw_input()</code> was returning a string. If I used <code>float()</code> then I'd have to add an extra check to make sure that the user had entered an integer and not a float.  edit* which I should probably do anyway so that it can work on values other than those given by <code>raw_input()</code>...  thanks for the response</span>
