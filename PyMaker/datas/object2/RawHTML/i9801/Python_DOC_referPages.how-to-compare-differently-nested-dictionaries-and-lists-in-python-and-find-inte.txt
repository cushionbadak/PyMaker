<div class="post-text" itemprop="text">
<p>I now have two (more or less complex) lists / dictionaries. The first one contains image names and the image pixel colors in hex. So it looks like this: </p>
<pre><code>{
0: {'hex': ['#c3d6db', '#c7ccc0', '#9a8f6a', '#8a8e3e'], 'filename': 'imag0'}, 
1: {'hex': ['#705b3c', '#6a5639', '#442f1e', '#4a3d28'], 'filename': 'img-xyz'},
…
}
</code></pre>
<p>So in this case I would have 2 images 2 x 2 px.<br/>
The second dictionary contains a lot of hex-values as keys and an id as value. It looks like: </p>
<pre><code>{'#b0a7aa': '9976', '#595f5b': '19367', '#9a8f6a': '24095'…}
</code></pre>
<p>Now what I would like to do is to look if there is a color-value from my images (first list) that matches with one of the second list. If so, then I would like to know the filename from the first list and the value, the id,  of the matched key in the second list. </p>
<p>How could I achieve this? </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">dictionary view objects</a> to produce an intersection between your <code>hex</code> lists and the hex-id dictionary:</p>
<pre><code>for entry in images.values():
    for key in hexidmap.keys() &amp; entry['hex']:
        print('{} {} {}'.format(entry['filename'], key, hexidmap[key]))
</code></pre>
<p><code>&amp;</code> produces the intersection between the key set and your list of hex values.</p>
<p>The above assumes you are using Python 3; if you are using Python 2 instead, use <a href="https://docs.python.org/2/library/stdtypes.html#dict.viewkeys" rel="nofollow noreferrer"><code>dict.viewkeys()</code></a> instead of <code>.keys()</code>.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; images = {
... 0: {'hex': ['#c3d6db', '#c7ccc0', '#9a8f6a', '#8a8e3e'], 'filename': 'imag0'},
... 1: {'hex': ['#705b3c', '#6a5639', '#442f1e', '#4a3d28'], 'filename': 'img-xyz'},
... }
&gt;&gt;&gt; hexidmap = {'#b0a7aa': '9976', '#595f5b': '19367', '#9a8f6a': '24095'}
&gt;&gt;&gt; for entry in images.values():
...     for key in hexidmap.keys() &amp; entry['hex']:
...         print('{} {} {}'.format(entry['filename'], key, hexidmap[key]))
...
imag0 #9a8f6a 24095
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for index in d1:
    print [(d1[index]["filename"], d2[i], i) for i in d1[index]["hex"] if i in d2]


&gt;&gt;&gt; [('imag0', '24095', '#9a8f6a')]
[]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>dicta = {
        0: {'hex': ['#c3d6db', '#c7ccc0', '#9a8f6a', '#8a8e3e'], 'filename': 'imag0'}, 
        1: {'hex': ['#705b3c', '#6a5639', '#442f1e', '#4a3d28'], 'filename': 'img-xyz'},
        }
dictb = {'#c3d6db': '9976', '#595f5b': '19367', '#9a8f6a': '24095'}
intersection = {}
for o in dicta.values():
  intersect = list(set(o['hex']) &amp; set(dictb.keys()))
  intersection[o['filename']] = intersect if intersect else "No intersection"
print (intersection)
&gt;&gt;&gt;{'imag0': ['#c3d6db', '#9a8f6a'], 'img-xyz': 'No intersection'}
</code></pre>
</div>
<span class="comment-copy">You are particular about using dict views.  Is this because view return a set of keys/values?</span>
<span class="comment-copy">@pylang exactly; a view can be used as a set. There is no need to convert anything to sets here.</span>
<span class="comment-copy">Elegant approach.</span>
<span class="comment-copy">Sounds very good… but at the moment I have to following error:   <code>for key in hexidmap.keys() &amp; entry['hex']: TypeError: unsupported operand type(s) for &amp;: 'list' and 'list'</code>  what could be wrong?</span>
<span class="comment-copy">@iMax you are using Python 2, so use <code>viewkeys</code> instead. <code>for key in hexidmap.viewkeys() &amp; entry['hex']:</code></span>
<span class="comment-copy">This doesn't print the hex values (just add <code>i</code>), and there is no need to print the key from <code>d1</code>.</span>
<span class="comment-copy">You are not printing the requested info; the file name is missing.</span>
