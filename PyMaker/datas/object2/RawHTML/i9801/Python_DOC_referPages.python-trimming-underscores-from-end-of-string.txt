<div class="post-text" itemprop="text">
<p><strong>Hi everyone!</strong> I am trying to debug someones code and I have found the problem. The program loops through an array of strings and count's certain ends. The problem is that some of these strings end with <code>_</code>, so the counting goes wrong. I would like to use regex, but I am not experienced enough. Could someone help me?</p>
<p>I would like to loop through the array and per string check if it ends with <code>_</code>('s) and trim all of these <code>_</code> off to put them again in the array! </p>
<p><strong>Update</strong></p>
<p>Thanks for the <code>rstrip</code> suggestion! I have tried to write a code that works with my data, but no luck yet... </p>
<pre><code>data_trimmed = []
        for x in data:
            x.rstrip('_')
            data_trimmed.append(x)

        print(data_trimmed)
</code></pre>
<p>But this still returns: <code>['Anna__67_______', 'Dyogo_3__', 'Kiki_P1_', 'BEN_40001__', .... ]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>rstrip('_')</code> to remove trailing underscores:</p>
<pre><code>In [15]:
'__as_das___'.rstrip('_')

Out[15]:
'__as_das'
</code></pre>
<p>So you can see that any leading underscores and any in the middle of the string are unaffected, see the docs: <a href="https://docs.python.org/2/library/string.html#string-functions" rel="nofollow noreferrer">https://docs.python.org/2/library/string.html#string-functions</a></p>
<p>To answer your updated question you can use a list comprehension to update each string in the list:</p>
<pre><code>In [18]:
a = ['Anna__67_______', 'Dyogo_3__', 'Kiki_P1_', 'BEN_40001__']
a = [x.rstrip('_') for x in a]
a

Out[18]:
['Anna__67', 'Dyogo_3', 'Kiki_P1', 'BEN_40001']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use string rstrip method to strip off unwanted <code>_</code></p>
<pre><code>s = 'anything__'
s = s.rstrip('_') # s becomes 'anything'
</code></pre>
<p>regex is a bit overkill for this, it can be done as below</p>
<pre><code>import re
s = 'anything__'
s = re.sub('_+$', '', s)  # s becomes 'anything'
</code></pre>
</div>
<span class="comment-copy">You can do <code>rstrip('_')</code> to remove trailing underscores so <code>some_string.rstrip('_')</code></span>
<span class="comment-copy">Will this remove all <code>_</code>'s in the string or just at the end?</span>
<span class="comment-copy">Just at the end, try it: <code>'__as_das___'.rstrip('_')</code></span>
<span class="comment-copy">What Ed said. There's no need to bother testing for trailing underscores, just call <a href="https://docs.python.org/3/library/stdtypes.html#str.rstrip" rel="nofollow noreferrer"><code>.rstrip</code></a> on every line. It can test for the specified chars at C speed faster than you can do it with an explicit Python test.</span>
<span class="comment-copy"><code>x.rstrip('_')</code> doesn't modify <code>x</code>: Python strings are <i>immutable</i>, so string methods can't modify the original, they have to return a new string. On a related note, please see <a href="http://stackoverflow.com/a/29604031/4014959">this excellent answer</a> by abarnert.</span>
<span class="comment-copy">I have tried this code: <code>data_trimmed = [] for x in data:       x.rstrip('_') data_trimmed.append(x)</code> but it isn't working for me :-(</span>
<span class="comment-copy">it should be s_trimmed.append(x.rstrip('_'))</span>
<span class="comment-copy">@AnnaJeanine You need to reinitialize the value to <code>x</code> as <code>x = x.rstrip('_') </code>. You may also write this entire logic as: <code>data_trimmed = [x.rstrip('_') for x in data]</code></span>
<span class="comment-copy">AWESOME! Thank you very much for your quick and easy answer!</span>
