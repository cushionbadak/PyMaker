<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1186789/what-is-the-best-way-to-call-a-script-from-another-script">What is the best way to call a script from another script?</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>I have tried every thing from</p>
<pre><code>if __name__ == "__main__":
</code></pre>
<p>to</p>
<pre><code>os.system()
</code></pre>
<p>I have looked through all the other similar questions on here and read official Python documentation.</p>
<p>I can't get this</p>
<pre><code>import os

ask1 = raw_input("Create bid? ") 
create = "createbid.py %s" % ()
def questions():
    if ask1 == "yes":
        os.system(create)
    if ask1 == "no":
        quit()

question()
</code></pre>
<p>to run the ceatebid.py file reliably. I got it to work with</p>
<pre><code>if __name__ == "__main__":
</code></pre>
<p>but what if I also want to call another script? </p>
<p>I want to call different scripts based on how the questions are answered.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure exactly what you're trying to do, but in general you should be able to do something like this.</p>
<pre><code>import foo
import bar

ask = raw_input("Do something?")
if ask.lower() in ('yes', 'y'):
    foo.do_something()
else:
    bar.do_other()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The key to using <code>os.system("python createbid.py")</code> is to pass in a shell command in string format.</p>
<p>If you want to communicate with that script you probably want <code>subprocess</code>.
See the answer from this question: <a href="https://stackoverflow.com/questions/4256107/running-bash-commands-in-python">running bash commands in python</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This was probably answered here: <a href="https://stackoverflow.com/questions/1186789/what-is-the-best-way-to-call-a-python-script-from-another-python-script">What is the best way to call a Python script from another Python script?</a></p>
<p>So, you need to define some method in you createbid.py (and other <em>scripts</em>):</p>
<pre><code>def run()
    print 'running'
</code></pre>
<p>then in your main script,</p>
<pre><code>import createbid

def questions():
    if ask1 == "yes":
        createbid.run()
    if ask1 == "no":
        quit()

if __name__ == '__main__':
    questions()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Nowadays, the recommended way to launch other processes is to use the <a href="https://docs.python.org/2/library/subprocess.html#module-subprocess" rel="nofollow noreferrer"><code>subprocess</code></a> module.</p>
<p>It's relatively easy to do. Here's a simple way to apply it to your problem:</p>
<pre><code>import subprocess
import sys

create = [sys.executable, 'createbid.py']

def question(ans):
    if ans == 'yes':
        subprocess.call(create)
    elif ans == 'no':
        quit()

ask1 = raw_input('Create bid? ')
question(ask1)
print('done')
</code></pre>
<p><strong>Note</strong>: When <code>createbid.py</code> (or some other script) is executed this way,<br/>
<code>__name__ == '__main__'</code> <em>will</em> be <code>True</code>, unlike it would be if it had been <code>import</code>ed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Alternatively, you could use <code>exec</code> (statement in Python2, function in Python3).</p>
<p>Suppose your script <code>scriptA</code> is stored in a file named <code>scriptA.py</code>. Then:</p>
<pre><code>scriptContent = open("scriptA.py", 'r').read()
exec(scriptContent)
</code></pre>
<p>The merit of this is that <code>exec</code> allows you to define variables before, and use them inside of the script.</p>
<p>So if you were to define some parameters before running the script, you could still call them in your solution:</p>
<pre><code>#Main script
param1 = 12
param2 = 23
scriptContent = open("scriptA.py", 'r').read()
exec(scriptContent)

#scriptA.py
print(param1 + param2)
</code></pre>
<p>Still, this approach is more like a fun trick, and depending on the situation, there should be several ways to do better.</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks for the help! I combined a few answers to get it working.</p>
<p>This works:</p>
<pre><code>import seebid
import createbid

ask1 = raw_input("Create bid? ")
ask2 = raw_input("View bid? ")
create = createbid
see = seebid

def questions():

    if ask1.lower() in ('yes', 'y'):
        create.createbd()
    elif ask1.lower() in ('no', 'n'):
        ask2

    if ask2.lower() in ('yes', 'y'):
        see.seebd()

if __name__ == "__main__":
    questions()
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/modules.html</a></span>
<span class="comment-copy">have you try <b><i>create = "python createbid.py %s" % ()</i></b> instead of  <b><i>create = "createbid.py %s" % ()</i></b></span>
<span class="comment-copy">I tried that. Both have the same results.</span>
<span class="comment-copy">This worked when I used one other script. How do I choose from multiple other scripts?</span>
<span class="comment-copy">You can import as many modules as you need, exactly how @batman suggests</span>
