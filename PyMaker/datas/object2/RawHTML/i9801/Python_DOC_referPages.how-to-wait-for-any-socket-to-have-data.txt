<div class="post-text" itemprop="text">
<p>I'm implementing a socket-client which opens several sockets at the same time. Any socket may have data at a different time and I want to execute code when any socket has data and is readable.</p>
<p>I'm not sure how to implement this, I was looking at <a href="https://docs.python.org/2/library/select.html#select.select" rel="nofollow noreferrer">select.select</a> but it seems to wait for all the sockets to be readable.</p>
<p>I'd like to avoid using multiprocessing to handle data on the sockets, I would like it to be serial in reading from each socket but read when there is data available.</p>
<p>How do I wait for any socket to be readable?</p>
<pre><code># psudo code

sockets = [sock1, sock2, sock3]

while True:
  if len(sockets) == 0:
    break
  for sock in sockets:
    if sock.has_data():
      do_stuff(sock)
      sockets.remove(sock)
  sleep(0.1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>select.select</code> for your problem:</p>
<pre><code>sockets = [sock1, sock2, sock3]
while sockets:
    rlist, _, _ = select.select(sockets, [], [])
    for sock in rlist:
        do_stuff(sock)
        sockets.remove(sock)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are on POSIX, take a look at <code>select.poll</code>:</p>
<pre><code>import socket
import select
p = select.poll()
s1 = socket.socket()
s2 = socket.socket()
# call connect on sockets here...
p.register(s1, select.POLLIN)
p.register(s2, select.POLLIN)
p.poll()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Python 3.4 or newer there is the <code>selectors</code> module in the standard library. It will use the "best" I/O multiplexing implementation that your system offers (select, poll, kqueue...) There's a simple echo server example at the end of the documentation page <a href="https://docs.python.org/3/library/selectors.html" rel="nofollow noreferrer">https://docs.python.org/3/library/selectors.html</a></p>
<p>There's a <a href="https://pypi.python.org/pypi/selectors34" rel="nofollow noreferrer">backport</a> of this for older Python versions available as well.</p>
</div>
<span class="comment-copy"><code>select</code> does not wait for all sockets to be readable, it returns once one of them is readable.</span>
<span class="comment-copy">Whatever you do, don't forget to set the sockets non-blocking if you don't ever want to block. Every function that you use will be a status reporting function that cannot be used to predict the future. A blocking read <i>can</i> block, no matter what <code>select</code> said.</span>
<span class="comment-copy">Just don't forget to set the sockets non-blocking.</span>
<span class="comment-copy">The OP wants blocking, since he removes the socket after doing stuff.</span>
<span class="comment-copy">True, i do want blocking. Also, thanks Daniel, I think I just made a mistake with my attempt I was able to implement exactly what i wanted with select! :)</span>
<span class="comment-copy">Then why use <code>select</code>? If you want blocking, just call <code>do_stuff</code> on each socket.</span>
<span class="comment-copy">@DavidSchwartz if you do that, your sockets will be dealt with in a strict sequence. Using a selector (select, poll) even with blocking sockets, allows you to react on any of the sockets becoming in readable state</span>
