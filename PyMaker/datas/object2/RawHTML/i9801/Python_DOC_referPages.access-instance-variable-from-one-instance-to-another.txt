<div class="post-text" itemprop="text">
<p>I am learning python. Suppose I have my Class named <code>Dog</code>, and two instances named <code>Fido</code> and <code>Molly</code>. I want to change an attribute of second instance by overloading <code>+</code> operator with <code>__add__</code> so when I type <code>Fido+Molly</code>
the <code>Molly.touched</code> attribute will be set. How is accessing from one instance to another instance's attributes deployed in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you are interested in how the <a href="https://docs.python.org/3/reference/datamodel.html#object.__add__" rel="nofollow noreferrer"><code>__add__</code></a> special method works.  In essence it works as <code>x.__add__(y)</code> where <code>x</code> and <code>y</code> can be instance objects.  See an example of it's implementation <a href="http://www.marinamele.com/2014/04/modifying-add-method-of-python-class.html" rel="nofollow noreferrer">here</a>.</p>
<p>You would need to overload <code>__add__()</code> in <code>Dog</code> to return something that updates the <code>y.touched</code> attribute.  Example:</p>
<pre><code>class Dog(object):

    def __init__(self, touched):
        self.touched = touched

    def __add__(self, other):
        other.touched = other.touched + self.touched 
        #return None                                    # optional, explicit

fido = Dog(1)
molly = Dog(2)

fido + molly
molly.touched
# 3
</code></pre>
</div>
<span class="comment-copy"><code>return None</code> is redundant, by the way.</span>
<span class="comment-copy">Yes, but it is explicit for someone unfamiliar with Python.  I will make a comment</span>
