<div class="post-text" itemprop="text">
<p>In a few <code>__init__</code> of different classes I have to use several times the construct</p>
<pre><code>try:
    self.member_name = kwargs['member_name']
except:
    self.member_name = default_value
</code></pre>
<p>or as suggested by Moses Koledoye</p>
<pre><code>self.member_name = kwargs.get('member_name', default_value)
</code></pre>
<p>I would like to have a method that inputs, say, the string <code>'member_name'</code> and <code>default_value</code> and that the corresponding initialization gets produced. For example, if one inputs <code>'pi_approx'</code> and <code>3.14</code> the resulting code is </p>
<pre><code>self.pi_approx = kwargs.get('pi_approx', 3.14)
</code></pre>
<p>In this way I can replace a long sequence of these initializations by a loop along a list of all the required members and their default values.</p>
<p><a href="https://bytebaker.com/2008/11/03/switch-case-statement-in-python/" rel="nofollow noreferrer">This technique emulate a switch statement</a> is not the same thing but kind of has a similar flavor.</p>
<p>I am not sure how to approach what I want to do.</p>
<hr/>
<p>Assuming that <code>initializer(m_name, default_val)</code> is the construction that gets replaced by </p>
<pre><code>self.m_name = kwargs.get('m_name', default_val)
</code></pre>
<p>I would then used it by having a lists <code>member_names = [m_name1, m_name2, m_name3]</code> and <code>default_values = [def_val1, def_val2, def_val3]</code> and calling</p>
<pre><code>for m_name, d_val in zip(member_names, default_values):
    initializer(m_name, d_val)
</code></pre>
<p>This would replace long list of try's and also make the code a bit more readable.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your <code>try/except</code> was meant to handle <code>KeyError</code>, then you can use the <code>get</code> method of the kwargs dict which allows you to supply a default value:</p>
<pre><code>self.member_name = kwargs.get('member_name', default)
</code></pre>
<p>Which can be extended to your list of attribute names using <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer"><code>setattr</code></a>:</p>
<pre><code>for m_name, d_val in zip(member_names, default_values):
    setattr(self, m_name, kwargs.get(m_name, d_val))
</code></pre>
</div>
