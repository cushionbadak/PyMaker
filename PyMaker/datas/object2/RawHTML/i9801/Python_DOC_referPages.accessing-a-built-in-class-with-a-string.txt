<div class="post-text" itemprop="text">
<p>I would like to retrieve built-in class from Python using a string. By trial/error, I have found a way to achieve it:</p>
<pre><code>&gt;&gt;&gt; __builtins__.__dict__['str']
&lt;class 'str'&gt;
&gt;&gt;&gt; __builtins__.__dict__['int']
&lt;class 'int'&gt;
</code></pre>
<p>Is there a more Pythonic way to do it? Is there a safer way to do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Best to do it through <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow noreferrer"><code>vars()</code></a> and not grab a modules <code>__dict__</code>. Grabbing dunders is generally not the best idea since they are subject to change; that's why built-in functions like <code>vars</code> are around; it goes and grabs the dictionary for the object you provide,</p>
<p>So, instead of:</p>
<pre><code>&gt;&gt;&gt; __builtins__.__dict__['str']
</code></pre>
<p>use:</p>
<pre><code>&gt;&gt;&gt; vars(__builtins__)['str']
</code></pre>
<p>with the same effect while also being safe and more readable.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use Python's built-in <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval()</code></a> function which would avoid referencing anything with a double-underscore name (and be safe since the string is from a trusted source):</p>
<pre class="lang-none prettyprint-override"><code>Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:01:18) [MSC v.1900 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
current directory: "C:\vols\Files\PythonLib\Stack Overflow"
&gt;&gt;&gt; eval('str')
&lt;class 'str'&gt;
&gt;&gt;&gt; eval('int')
&lt;class 'int'&gt;
</code></pre>
</div>
<span class="comment-copy">Is using eval a safe behaviour in programming?</span>
<span class="comment-copy">It depends on the source of the string being evaluated. Regardless, you mitigate what can be done by supplying it with a custom globals dictionary that will to restrict what, if any, built-ins can be used by the expression evaluated.</span>
