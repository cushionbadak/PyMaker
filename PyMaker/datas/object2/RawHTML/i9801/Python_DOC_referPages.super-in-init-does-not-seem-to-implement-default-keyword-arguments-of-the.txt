<div class="post-text" itemprop="text">
<p>I'm trying to implement a data type representing a (periodic) time interval following <a href="https://pypi.python.org/pypi/datetime-interval/0.2" rel="nofollow noreferrer">https://pypi.python.org/pypi/datetime-interval/0.2</a>. I've defined an <code>Interval</code> object, and am trying to make a <code>PeriodicInterval</code> object inherit from it with the additional attribute <code>period</code>:</p>
<pre><code>from datetime import date, timedelta, datetime

class Interval(object):
    """
    An interval represents a duration of time and its location on the
    timeline. It can be any of the following:

    - start and end dates (or datetimes)
    - a start date (or datetime) and a timedelta
    - a timedelta and an end date (or datetime)

    Provides the following operators:
        for a date and an Interval:
            in
    """

    def __init__(self, start=None, duration=None, end=None):
        # Type checking:
        assert isinstance(start, date) or (start is None)
        assert isinstance(duration, timedelta) or (duration is None)
        assert isinstance(end, date) or (end is None)

        # Fill in the missing value:
        if (duration is not None) and (end is not None) and (start is None):
            start = end - duration
        elif (start is not None) and (end is not None) and (duration is None):
            duration = end - start
        elif (start is not None) and (duration is not None) and (end is None):
            end = start + duration

        # Assign the values:
        self.start = start
        self.duration = duration
        self.end = end

    def __contains__(self, time):
        """
        Checks if a date is contained within the Interval, e.g.:

        &gt;&gt;&gt; datetime.now() in Interval(datetime.now(), timedelta(1))
        True
        """
        assert isinstance(time, date), "The argument 'time' should be a date."
        return (self.start &lt;= time) and (time &lt;= self.end)


class PeriodicInterval(Interval):
    def __init__(self, period=None, **kwargs):
        super(PeriodicInterval, self).__init__(kwargs)


if __name__ == "__main__":
    periodic_interval = PeriodicInterval()
</code></pre>
<p>However, this leads to the following <code>AssertionError</code> in the type checking:</p>
<pre><code>Traceback (most recent call last):
  File "/home/kurt/dev/scratch/Furion_scheduler/interval.py", line 67, in &lt;module&gt;
    periodic_interval = PeriodicInterval()
  File "/home/kurt/dev/scratch/Furion_scheduler/interval.py", line 50, in __init__
    super(PeriodicInterval, self).__init__(kwargs)
  File "/home/kurt/dev/scratch/Furion_scheduler/interval.py", line 20, in __init__
    assert isinstance(start, date) or (start is None)
AssertionError
</code></pre>
<p>I don't understand why instantiating a <code>PeriodicInterval</code> in this way leads to an error. If I instantiate an <code>Interval</code> using <code>interval = Interval()</code>, I don't get an error. What is causing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to need to explode dictionary keyword arguments using the <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">double star</a> (**) operator when calling parent constructor:</p>
<pre><code>class PeriodicInterval(Interval):
    def __init__(self, period=None, **kwargs):
        super(PeriodicInterval, self).__init__(**kwargs)
</code></pre>
</div>
<span class="comment-copy">I see. Within the <code>__init__</code> function of <code>PeriodicInterval</code>, <code>kwargs</code> is a dictionary, which needs to be unpacked with <code>**</code> in order to deliver keyword arguments to its <code>super</code>.</span>
<span class="comment-copy">Yep. If you pass only <code>kwargs</code> and not <code>**kwargs</code> you will have the whole dict passed as the <code>start</code> argument of <code>Interval.__init__</code> and thus the very first assertion fails.</span>
