<div class="post-text" itemprop="text">
<p>Starting form a list:</p>
<pre><code>user1 = ['alternative', 'rock', 'pop']
</code></pre>
<p>I can populate a <code>dictionary</code> with the number of appearences of each item. </p>
<pre><code>u1={}
for tag in user1:
    u1[tag]=1
print u1
</code></pre>
<p>and get: <code>{'alternative': 1, 'pop': 1, 'rock': 1}</code></p>
<p>likewise, for:</p>
<pre><code>user2 = ['indie', 'rock', 'chamber pop']
</code></pre>
<p>the same:</p>
<pre><code>    u2={}
    for tag in user2:
        u2[tag]=1
    print u2
</code></pre>
<p>and get: <code>{'indie': 1, 'chamber pop': 1, 'rock': 1}</code>, and so on.</p>
<p>but lets say I want to populate this <code>dict</code> in the same fashion:</p>
<pre><code>users = {
         u1:{}, 
         u2:{},
         u3:{},
         ...
         ...
        }
</code></pre>
<p>how can I do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's say you have users and lists already stored to a dictionary. Then you could iterate over all key value pairs within <a href="https://docs.python.org/3.5/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer"><em>dictionary comprehension</em></a> and use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a> to convert the list to <code>dict</code> with counts:</p>
<pre><code>from collections import Counter

users = {
    'u1': ['alternative', 'rock', 'pop'],
    'u2': ['indie', 'rock', 'chamber pop'],
    'u3': ['indie', 'rock', 'alternative', 'rock']
}

res = {k: Counter(v) for k, v in users.items()}
print(res)
</code></pre>
<p>Output:</p>
<pre><code>{'u1': Counter({'alternative': 1, 'pop': 1, 'rock': 1}), 
 'u3': Counter({'rock': 2, 'indie': 1, 'alternative': 1}), 
 'u2': Counter({'indie': 1, 'chamber pop': 1, 'rock': 1})}
</code></pre>
<p>To break above a bit <code>users.items()</code> returns an iterable of <code>(key, value)</code> tuples:</p>
<pre><code>&gt;&gt;&gt; list(users.items())
[('u2', ['indie', 'rock', 'chamber pop']), ('u1', ['alternative', 'rock', 'pop']), ('u3', ['indie', 'rock', 'alternative', 'rock'])]
</code></pre>
<p>Then dict comprehension turns the list to <code>dict</code> containing the counts:</p>
<pre><code>&gt;&gt;&gt; Counter(['indie', 'rock', 'chamber pop'])
Counter({'rock': 1, 'indie': 1, 'chamber pop': 1})
</code></pre>
<p>Finally for each the user name and resulting <code>Counter</code> are added the to the result <code>dict</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Counter</code> is a good option. But according to this question we can use more simple option. Check this out.</p>
<pre><code>users = {
    'u1': ['alternative', 'rock', 'pop'],
    'u2': ['indie', 'rock', 'chamber pop'],
}

res = {}
for user in users.items():          # return each key:value pair as tuple
    res[user[0]] = {}               # first element of tuple used as key in `res` for each list
    for tag in user[1]:             # return each element of list 
        res[user[0]][tag] = 1       # assign value as 1 of each element.

print res
</code></pre>
<p>Output: </p>
<pre><code>{'u1': {'alternative': 1, 'pop': 1, 'rock': 1}, 'u2': {'indie': 1, 'chamber pop': 1, 'rock': 1}}
</code></pre>
</div>
<span class="comment-copy">You can wrap the <code>Counter(v)</code> with <code>dict</code>: <code>dict(Counter(v))</code> if you must have a plain <code>dict</code> and not a <code>Counter</code>.</span>
<span class="comment-copy">@DanD. Good addition, typically it doesn't matter though since <code>Counter</code> is a <code>dict</code> and in behaves like a one in almost all scenarios.</span>
<span class="comment-copy">thanks. this technique is more useful in the long run.</span>
<span class="comment-copy">simpler indeed. i would just use 'genre' or 'tag' instead of 'list_user', to make it more readable.</span>
<span class="comment-copy">thanks for your feedback</span>
