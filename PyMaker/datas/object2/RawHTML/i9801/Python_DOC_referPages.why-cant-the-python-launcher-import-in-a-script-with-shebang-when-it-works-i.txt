<div class="post-text" itemprop="text">
<p>I'm using the <code>py</code> Python launcher, and something weird is happening with imports. Certain modules can't be imported in scripts - despite being installed with pip and being importable in the interpreter. Here's the kicker, though: it works in scripts without the shebang line.</p>
<p>For example, this script works:</p>
<pre><code>import requests
</code></pre>
<p>But this one doesn't:</p>
<pre><code>#!/usr/bin/env python
import requests
</code></pre>
<p>Why is this? What difference is the shebang making here?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>py</code> launcher actually <a href="https://docs.python.org/3/using/windows.html#shebang-lines" rel="nofollow noreferrer">handles shebang lines even on Windows</a>. This means the Python version a script is run in may differ depending on the shebang line. For example, a shebang line of <code>#!/usr/bin/env python2</code> will always run Python 2, and <code>#!/usr/bin/env python3</code> will always run Python 3. Without a shebang line, <code>py</code> pretends the shebang is <code>!python</code>, which it handles using <a href="https://www.python.org/dev/peps/pep-0397/" rel="nofollow noreferrer">its <strong>built-in rules for selecting a Python version</strong></a> (see the <em>Python Version Qualifiers</em> section). By default, if you have it installed, this will be some version of Python 2.</p>
<p>Here's what's tripping you up, though. If the shebang is specifically <code>!/usr/bin/env python</code>, <strong><code>py</code> instead <a href="https://docs.python.org/3/using/windows.html#shebang-lines" rel="nofollow noreferrer">follows the PATH environment variable</a></strong> to mimic the behavior of Linux's <code>env</code></p></div>
<span class="comment-copy">Of the supported virtual commands, only <code>/usr/bin/env python</code> is defined to search <code>Path</code> -- and only when there's no version spec, i.e.  <code>#! /usr/bin/env python3</code> will not search <code>Path</code> for <code>python3.exe</code> (someone filed a bug about this recently, so it may change in a future release).  As to just <code>python</code>, it's a virtual command that doesn't search <code>Path</code>.</span>
<span class="comment-copy">As to not having <code>python</code> in <code>Path</code>, that's fine and the default behavior of the installer. But <code>python</code> is still the official way to run the interpreter that you'll see in tutorials. Using <code>py</code> at the command line is convenient, but only available on Windows.</span>
<span class="comment-copy">@eryksun Yep, I covered that in the answer. "If the shebang is <b>specifically</b> <code>!/usr/bin/env python</code>[...]". I'm also well aware that <code>!python</code> is a "virtual command" for <code>py</code> - I've read through the source code. The last paragraph questions why the decision was made, not why the launcher expresses that behavior.  Of course this answer is about the Windows <code>py</code> launcher - the question specifies as much.</span>
<span class="comment-copy">@eryksun When I had this problem, I had just updated Python to 3.5 - turns out the installation was set to adding it to the PATH (guess I checked the box thinking it meant the launcher, maybe).</span>
<span class="comment-copy">You were the one who wondered why <code>!python</code> doesn't search <code>Path</code>. I told you that it's simply not designed this way. There's nothing deep or fundamental to wonder about. In fact, in the first few iterations even <code>/usr/bin/env python</code> didn't search <code>Path</code>. That was added later, even though Vinay had coded the underlying support for it in the first release.</span>
