<div class="post-text" itemprop="text">
<p>I have about 100 processes. Each process contains 10 inputs(logic expressions) and the task of each process is to find the fastest heuristic algorithm for solving each of the logic inputs(I have about 5 heuristic algorithms).<br/>
When I run each process separately the results are different from when I run all of the processes in parallel (using python p1.py &amp; python p2.py &amp;â€¦.. ). For example, when run the processes separately the input 1 (in p1) finds the first heuristic algorithms as the fastest method but when in parallel the same input finds the 5th  heuristic algorithms faster!<br/>
Could the reason be that the CPU will switch between the parallel processes and messes up with the timing so it could not give the right time each heuristic algorithm spends to solve the input? <br/>
What is the solution? Can decreasing the number of processes to half reduce the false result? (I run my program on a server)</p>
</div>
<div class="post-text" itemprop="text">
<p>The operating system has to schedule all your processes on a much smaller amount of CPUs. In order to do so, it runs one process on each CPU for a small amount of time. After that, the operating system schedules the processes out to let the other processes run in order to give process their fair share of running time. Thus each process has to wait for a running slot on a CPU. Those waiting times depend on the amount of other processes waiting to run and almost unpredictable.</p>
<p>If you use clock time for your measurements, the waiting times will pollute your measurements. For a more precise measurement, you could ask the operating system how much CPU time the process used. The function <a href="https://docs.python.org/3/library/time.html#time.process_time" rel="nofollow noreferrer">time.process_time()</a> does that.</p>
<p>Switching between processes costs time. Multiple processes accessing the same resources (file, hard disk, CPU caches, memory, ...) costs time. For CPU bound processes, having orders of magnitude more running processes than CPUs will slow down the execution. You'll get better results by starting slightly less processes than the amount of CPUs. The spare CPUs remain available for work needed by the operating system or some other unrelated programs.</p>
</div>
<span class="comment-copy">any code section, would help</span>
<span class="comment-copy">There is no guarantee that all your 100 processes will run in parallel simultaneously. It completely depends on the underlying Operating System how its going to give the cpu time slices to the 100 different processes.</span>
