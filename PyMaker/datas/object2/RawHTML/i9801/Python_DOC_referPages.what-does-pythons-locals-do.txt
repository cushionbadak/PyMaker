<div class="post-text" itemprop="text">
<p>Python's <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer"><code>locals()</code></a> documentation says:</p>
<blockquote>
<p>Update and return a dictionary representing the current local symbol table. Free variables are returned by <code>locals()</code> when it is called in function blocks, but not in class blocks.</p>
</blockquote>
<ol>
<li><p>What are in the current local symbol table exactly?</p></li>
<li><p>Is the local symbol table guaranteed to be the same as the argument dict if <code>locals()</code> is called at the very beginning of a function?</p>
<p>For example, if we have the following program:</p>
<pre><code>def foo(x, y):
    print(locals() == {'x': 1, 'y': 2})
foo(1, 2)
</code></pre>
<p>Will it always output <code>True</code> no matter what platforms and Python implementations we use?</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What are in the current local symbol table exactly? </p>
</blockquote>
<p>Well, you can take a look yourself. At the very beginging of your Python, program, here is what the symbol table returned by <code>locals()</code> looks like:</p>
<pre><code>print(locals())
</code></pre>
<p>Which outputs:</p>
<pre><code>{'__doc__': None, '__spec__': None, '__package__': None, '__builtins__': 
&lt;module 'builtins' (built-in)&gt;, '__name__': '__main__', '__loader__': 
&lt;class '_frozen_importlib.BuiltinImporter'&gt;, 
'__file__': 'C:\\Users\\$Name$\\Desktop\\script.py'}
</code></pre>
<p>The symbol table consists of a few "magic variables", and some info about your current Python file. Such as the <code>__file__</code> key, which contains the name of your current source file. The description of what locals returns pretty much matches the definition for a symbol table:</p>
<blockquote>
<p>In computer science, a symbol table is a data structure used by a language translator such as a compiler or interpreter, <strong>where each identifier in a program's source code is associated with information relating to its declaration or appearance in the source</strong>. - <a href="https://en.wikipedia.org/wiki/Symbol_table" rel="nofollow noreferrer">Wikipedia: Symbol table</a></p>
</blockquote>
<p><sub>(emphasis mine)</sub></p>
<hr/>
<blockquote>
<p>Is the local symbol table guaranteed to be the same as the argument dict if locals() is called at the very beginning of a function?</p>
</blockquote>
<p>To which the answer would <sup>1</sup><strong>yes</strong>. Functions have their own scope. And, as hinted at by the name, <code>locals()</code> only returns identifiers local to the current scope. So a call to <code>locals()</code> inside of a function, could not be changed by the outer scope of a program. eg.</p>
<pre><code>&gt;&gt;&gt; var = 10 # global variable
&gt;&gt;&gt; locals()['var'] # var is accessible in the current scope
10
&gt;&gt;&gt; def func():
    print(locals()['var']) # but not in this scope. Python will raise an error


&gt;&gt;&gt; func()
Traceback (most recent call last):
  File "&lt;pyshell#17&gt;", line 1, in &lt;module&gt;
    func()
  File "&lt;pyshell#16&gt;", line 2, in func
    print(locals()['var'])
KeyError: 'var'
&gt;&gt;&gt; 
</code></pre>
<hr/>
<p><sup>1</sup><sub>
Its a little hard to fully understand what your asking in your second question, so I apologize if my answer is not related. But I believe your asking: If I call <code>locals()</code> at the beginning of my function, inside of my definition, is the <code>dict()</code> returned by locals guaranteed to stay the same?</sub>. If this isn't the case, update your question and I'll try to re-answer.</p>
</div>
<span class="comment-copy">@idjaw That question doesn't mention <i>symbol table</i> at all.</span>
<span class="comment-copy">@idjaw FYI I want to pass arguments in a function to another function, but I don't want to change the function prototype to <code>(*args, **kwargs)</code> for readability. If <code>locals()</code> are exactly the same as the argument dict at the beginning of a function, then passing arguments will be very easy.</span>
<span class="comment-copy">Re-reading your question I see the specifics of what you are asking about. I'll delete to remove confusion.</span>
<span class="comment-copy">I'm not sure whether there will be some builtin names in a function scope other than the parameters. Can you find any Python implementation reference saying a function scope is clean at its very beginning?</span>
<span class="comment-copy">@Cyker Before I answer, lemme make sure were on the same page. <b>Your asking are there any names in locals at the beginning of your function, besides your parameters</b>?</span>
<span class="comment-copy">Yes, I'm asking whether there aren't <b>any</b> extra names.</span>
<span class="comment-copy">@Cyker Then <b>no</b>. Unfortunately I cannot find any documentation that says this because I' currently preoccupied. But the local namespace of a function is going to be clear.</span>
