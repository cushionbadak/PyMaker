<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/20261517/inheritance-of-private-and-protected-methods-in-python">Inheritance of private and protected methods in Python</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>When inheriting in python, i got following error with private variables:</p>
<blockquote>
<p>AttributeError: 'dog' object has no attribute '_dog__name'</p>
</blockquote>
<p>I searched a lot but didn't understand where my problem is;</p>
<pre><code>class animal(object):
    __name = ""
    __height = ""
    __weight = ""
    __sound = ""

    def __init__(self, name, height, weight, sound):
        self.__name = name
        self.__height = height
        self.__weight = weight
        self.__sound = sound


    def toString(self):
        return "{} is {} cm and {} weight and say {}.".format(self.__name, self.__height, self.__weight, self.__sound)

class dog(animal):
    __owner = ""

    def __init__(self, name, height, weight, sound, owner):
        self.__owner = owner
        super(dog, self).__init__(name, height, weight, sound)

    def toString(self):
        return "{} is {} cm and {} weight and say {} and belongs to {}.".format(self.__name, self.__height,
                                                                                self.__weight, self.__sound,
                                                                                self.__owner)

puppy = dog('puppy', 45, 15, 'bark', 'alex')

puppy.toString()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>when you create var with double underscore, its just a notation use to indicate it as private variable, python do name mangling on the variable name itself to prevent normal way access to it. </p>
<p>However, its still not the real private variable like C/C++. You can still access the so called python "private var" with syntax below</p>
<pre><code>var = __myvar
# access with _&lt;class name&gt;__myvar
</code></pre>
<p>From <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP</a>, </p>
<ul>
<li>_single_leading_underscore : weak "internal use" indicator. E.g. from M import * does not import objects whose name starts with an
underscore.</li>
<li>__double_leading_underscore : when naming a class attribute, invokes name mangling (inside class FooBar, __boo becomes _FooBar__boo</li>
</ul>
<p>For your case, change your dog class toString method to below then it should works</p>
<pre><code>def toString(self):
    return "{} is {} cm and {} weight and say {} and belongs to {}.".format(self._animal__name, self._animal__height,
                                                                                self._animal__weight, self._animal__sound,
                                                                                self.__owner) # __owner remains because its not inherit from class animal
</code></pre>
<p>another option is to change your animal class variable to single underscore <code>_</code> if you don't really need double underscore <code>__</code></p>
</div>
<span class="comment-copy">no, it's about variables, not methods.</span>
<span class="comment-copy">The mechanism is the same. Heck, it even affects local variables and imported modules inside a class statement.</span>
<span class="comment-copy">tnx, is it the same for python 3 and 2?</span>
<span class="comment-copy">I think so, it should be same for python 2 and 3</span>
<span class="comment-copy">cuz in this video, the instructor runs exactly the same code without any error; <a href="https://youtu.be/N4mEzFDjqtA?t=39m44s" rel="nofollow noreferrer">youtu.be/N4mEzFDjqtA?t=39m44s</a></span>
<span class="comment-copy">i have tested with my python3.2, it behave the same with python2, python 3 documentation <code>https://docs.python.org/3/tutorial/classes.html</code> shows the same for name mangling, no idea why it works from the video</span>
