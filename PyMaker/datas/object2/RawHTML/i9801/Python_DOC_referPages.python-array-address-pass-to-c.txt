<div class="post-text" itemprop="text">
<p>I want to pass the address of a python array buffer to another application or to c function, </p>
<pre><code>buf = array("d", range(10))
addr, count = buf.buffer_info()
print "Address of buffer ", addr
</code></pre>
<p>output:</p>
<pre><code>Address of buffer  0x28a3ab0
</code></pre>
<p>Is this address an actual memory address of first element of the <code>buf</code> array?</p>
<p>Is this similar address like in C , address of first element of <code>buf</code>?</p>
<p>If not how can I declare a buffer in python and pass its address to c function and use its value and addressing like arrays of C ? </p>
<p>if this address is actual memory address can i use this address in <code>memcpy()</code> function in C.</p>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://docs.python.org/3/library/array.html#array.array.buffer_info" rel="nofollow noreferrer">the documentation</a> wrote, it's okay to use it as a address. But think of using <a href="https://docs.python.org/3/c-api/buffer.html#bufferobjects" rel="nofollow noreferrer">buffer protocol</a> as per NOTE.</p>
<blockquote>
<p>Return a tuple (address, length) giving the current memory address and
  the length in elements of the buffer used to hold arrayâ€™s contents.
  The size of the memory buffer in bytes can be computed as
  array.buffer_info()<a href="https://docs.python.org/3/library/array.html#array.array.buffer_info" rel="nofollow noreferrer">1</a> * array.itemsize. <strong>This is occasionally useful
  when working with low-level (and inherently unsafe) I/O interfaces
  that require memory addresses, such as certain ioctl() operations. The
  returned numbers are valid as long as the array exists and no
  length-changing operations are applied to it.</strong></p>
<p><strong>Note</strong> When using array objects from code written in C or C++ (the only
  way to effectively make use of this information), it makes more sense
  to use the buffer interface supported by array objects. This method is
  maintained for backward compatibility and should be avoided in new
  code. The buffer interface is documented in <a href="https://docs.python.org/3/c-api/buffer.html#bufferobjects" rel="nofollow noreferrer">Buffer Protocol</a>.</p>
</blockquote>
</div>
