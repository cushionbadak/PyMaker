<div class="post-text" itemprop="text">
<p>Say I have a list with multiple strings.
Take for example:</p>
<pre><code>['dirty room', 'do to i', 'dormitory', 'dry to or i', 'i to rod', 'or to i dry', 'rod to i', 'room i dry', 'root i dry', 'to rod i']
</code></pre>
<p>Is there a way to delete or pop all the items with more than one space in the string? so that the output would be:</p>
<pre><code>['dirty room', 'dormitory']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a list comprehension with filtering:</p>
<pre><code>old = ['dirty room', 'do to i', 'dormitory', 'dry to or i', 'i to rod', 'or to i dry', 'rod to i', 'room i dry', 'root i dry', 'to rod i']
new = [item for item in old if item.count(' ') &lt; 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use filter:</p>
<pre><code>my_list=['dirty room', 'do to i', 'dormitory', 'dry to or i', 'i to rod', 'or to i dry', 'rod to i', 'room i dry', 'root i dry', 'to rod i']
result = list(filter(lambda x: x.count(' ') &lt; 2, my_list))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>result = [l for l in testList if l.count(' ') &lt; 2] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple solution using <code>regex</code> and <code>list comprehension</code> :</p>
<pre><code>given = ['dirty room', 'do to i', 'dormitory', 'dry to or i', 'i to rod', 'or to i dry', 'rod to i', 'room i dry', 'root i dry', 'to rod i']
result = [i for i in given if len(re.findall(" ", i)) &lt; 2]
</code></pre>
<p>Don't forget to <code>import re</code> first.</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple approach to achieve that:</p>
<pre><code>my_list = ['dirty room', 'do to i', 'dormitory', 'dry to or i', 'i to rod', 'or to i dry', 'rod to i', 'room i dry', 'root i dry', 'to rod i']
res = [item for item in my_list if len(item.split(' ')) &lt; 3]
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt;&gt;&gt;res
['dirty room', 'dormitory']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>TL;DR</h3>
<p>Use list comprehensions</p>
<h2>An alternative to <em>list comprehension</em></h2>
<p>If I have to take at face value OP's <strong>"… delete or pop all the items
with …"</strong> I'd proceed like this</p>
<pre><code># INITIALIZATION
n = len(strings)
i_del = 0 # how many items have I deleted till now?

for i in range(n):
    if condition(strings[i-i_del]):
        strings.pop(i-i_del)
        i_del = i_del+1
</code></pre>
<p>or maybe like this, where counting backwards dispenses from our
(simple) bookkeping</p>
<pre><code>n = len(strings)
for i in range(1,n+1):
    if condition(strings[n-i]) : strings.pop(n-i)
</code></pre>
<hr/>
<h3>Humble considerations on looping over a list</h3>
<ol>
<li><p>You can use a <code>for el in my_list: …</code> when you just want to use the
values you've stored into the list.</p></li>
<li><p>You have to use a straightforward cycle on the indices of the list,
<code>for i in range(len(my_list)): …</code> when you want to modify the
values stored into the list, as simple values are immutable.</p></li>
<li><p>You have to loop on the indices and take extra measures (going
backwards, using auxiliary counters etc) when you are going to
modify the list itself, either by removing values or inserting new
values into it.</p></li>
</ol>
<hr/>
<h3>Speed?</h3>
<p>Just for info, the speed is in the same league with the speed of the
list comprehensions proposed elsewhere</p>
<pre><code>In [27]: from random import randint as r

In [28]: test = [''.join(chr(r(65,90)) for _ in range(r(11,20))) for count in range(100)]

In [29]: %timeit new = [i for i in test if i.count('A')&gt;1]
10000 loops, best of 3: 31.3 µs per loop

In [30]: %timeit t2 = test[:]
The slowest run took 5.44 times longer than the fastest. This could mean that an intermediate result is being cached.
1000000 loops, best of 3: 542 ns per loop

In [31]: %%timeit
    ...: t2 = test[:]
    ...: for i in range(1,101):
    ...:     if t2[100-i].count('A')&gt;1 : t2.pop(100-i)
    ...: 
10000 loops, best of 3: 41 µs per loop
</code></pre>
<p>Given that the cost of copying <code>test</code> is negligible, I'd say <code>.pop()</code>
is 30% slower than a list comprehension.</p>
<hr/>
<h3>Beware of speed tests</h3>
<p>Of course if I'd chosen a test with more <code>pop</code>s the bias towards
list comprehension would have been greater, but I choose what to test.
Moral: beware of speed tests...</p>
</div>
<span class="comment-copy">Have you tried anything yourself yet? Please do share your research and attempts, that way you don't get suggestions you already tried, saving us all time and frustration.</span>
<span class="comment-copy">While <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a> is OK, using list comprehension is preferred way.</span>
<span class="comment-copy">corrected it, wrong filter indeed. It should work now</span>
