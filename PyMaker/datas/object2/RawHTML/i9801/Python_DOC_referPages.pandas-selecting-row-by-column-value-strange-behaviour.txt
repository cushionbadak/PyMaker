<div class="post-text" itemprop="text">
<p>Ok, I have a pandas dataframe like this:</p>
<pre><code>         lat      long    level        date    time    value
3341  29.232   -15.652     10.0  20100109.0   700.0      0.5
3342  27.887   -13.668    120.0  20100109.0   700.0      3.2
...
3899  26.345   -11.234      0.0  20100109.0   700.0      5.8
</code></pre>
<p>The reason of the strange number of the index is because it comes from a csv converted to pandas dataframe with some values filtered. Columns <code>level</code>, <code>date</code>, <code>time</code> are not really relevant.</p>
<p>I am trying, in <code>ipython</code>, to see the some rows filtering by latitude, so I do (if the dataframe is <code>c</code>):</p>
<pre><code>c[c['lat'] == 26.345]
</code></pre>
<p>or</p>
<pre><code>c.loc[c['lat'] == 26.345]
</code></pre>
<p>and I can see if the value is present or not, but sometimes it outputs nothing for latitude values that <em>I am seeing</em> in the dataframe !?! (For instance, I can see in the dataframe the value of latitude 27.702 and when I do <code>c[c['lat'] == 27.702]</code> or <code>c.loc[c['lat'] == 27.702]</code> I get an empty dataframe and I am seeing the value for such latitude). What is happening here?</p>
<p>Thank you.   </p>
</div>
<div class="post-text" itemprop="text">
<p>This is probably because you are asking for an exact match against floating point values, which is very, very dangerous. They are approximations, often printed to less precision than actually stored. </p>
<p>It's very easy to see <code>0.735471</code> printed, say, and think that's all there is, when in fact the value is really <code>0.73547122072282867</code>; the display function has simply truncated the result. But when you try a strict equality test on the attractively short value, <strong>boom</strong>. Doesn't work.</p>
<p>Instead of </p>
<pre><code>c[c['lat'] == 26.345]
</code></pre>
<p>Try:</p>
<pre><code>import numpy as np

c[np.isclose(c['lat'], 26.345)]
</code></pre>
<p>Now you'll get values that are within a certain range of the value you specified. You <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.isclose.html" rel="nofollow noreferrer">can set the tolerance</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>It is a bit difficult to give a precise answer, as the question does not contain <a href="https://stackoverflow.com/questions/20109391/how-to-make-good-reproducible-pandas-examples">reproducible example</a>, but let me try. Most probably, this is due <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">floating point issues</a>. It is possible that the number you see (and try to compare with) is not the same number that is stored in the memory due to rounding. For example:</p>
<pre><code>import numpy as np
x = 0.1
arr = np.array([x + x + x])
print(np.array([x + x + x]))
# [ 0.3]
print(arr[arr == 0.3])
# []
print(x + x + x)
# 0.30000000000000004
# in fact 0.1 is not exactly equal to 1/10, 
# so 0.1 + 0.1 + 0.1 is not equal to 0.3
</code></pre>
<p>You can overcome this issue using <code>np.isclose</code> instead of <code>==</code>:</p>
<pre><code>print(np.isclose(arr, 0.3))
# [ True]
print(arr[np.isclose(arr, 0.3)])
# [ 0.3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In addition to the answers addressing comparison on floating point values, some of the values in your <code>lat</code> column may be string type instead of numeric.</p>
<p>EDIT: You indicated that this is not the problem, but I'll leave this response here in case it helps someone else. :)</p>
<p>Use the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_numeric.html" rel="nofollow noreferrer">to_numeric()</a> function from pandas to convert them to numeric.</p>
<pre><code>import pandas as pd

df['lat'] = pd.to_numeric(df['lat'])
# you can adjust the errors parameter as you need
df['lat'] = pd.to_numeric(df['lat'], errors='coerce')
</code></pre>
</div>
<span class="comment-copy">Are all of the <code>lat</code> values numeric? Some of them are probably strings, so when you check equality against a numeric, it won't return anything. Check the type of the column. If it's <code>object</code>, that's what's going on. You can use the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_numeric.html" rel="nofollow noreferrer">to_numeric()</a> function from pandas to convert it.</span>
<span class="comment-copy">No, I am afraid that I have done <code>pd.to_numeric</code> and it's the same...</span>
<span class="comment-copy">@Jonathan The problem was with the float quantity. I have never had a float situation before and it didn't occur to me that the representation of a float could be the key. Thanxs.</span>
<span class="comment-copy">If you want to give a comment to @Jonothan, it is better to comment on his answer, I believe :) (It's on top now.)</span>
<span class="comment-copy">Thanks, Ilya, but in the help section for comments it is written that if you mention @Jonathan and he is in the previous comment he also receives the comment ;)</span>
<span class="comment-copy">Okay :) Actually, never tried to check this :)</span>
