<div class="post-text" itemprop="text">
<p>I am testing memoization code on my computer. I have arrays of range 100000. With the following code.</p>
<pre><code>def fact1(n):
   if n&lt;1:
      return 1
   else:
      fa=1
      for i in range(1, n+1):
          fa*=i
      return fa
</code></pre>
<p>Using memoization technique, the following code would be,</p>
<pre><code>  memolookuptable={1:1, 2:2}
  def fact2(n):
      if n not in memoookuptable.keys():
          for i in range(3,n+1):
              if i not in memoookuptable.keys():
                   memolookuptable[i]=i*memolookuptable[i-1]
</code></pre>
<p>From my understanding of code, the memoization though memory optimized starts running at low speeds. Do I understand memoization correctly as avoiding recalculation by storing calculated values? If that is correct, why do larger calculations slow down in spite of that fact that the calculated values are readily available?</p>
<p>Which is the best way to optimize memory and speed using memoization?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to call <code>.keys()</code> - you can simply use <code>if n not in memolookuptable:</code>. I believe that should be faster, since it uses hashing. <code>.keys()</code> returns a list, for which lookups are slower.</p>
</div>
<span class="comment-copy">Short answer: lists use less RAM than dicts, are faster when they need to be expanded, and if you know the index then a list lookup is faster than a dict lookup. However, if you need to search the list for an item, that's much slower than directly accessing a dict item if you know its key. And if you aren't going to be using all the slots in a list a dict could use <i>less</i> RAM.</span>
<span class="comment-copy">Sorry, I wrote memo.keys(). I realized that after writing code. Thanks !My bad.</span>
<span class="comment-copy"><code>.keys()</code> returns a list in Python 2, but in Python 3 it returns a dynamic <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">Dictionary view object</a>, but it's still very inefficient to create a new one on every loop iteration.</span>
<span class="comment-copy">Interesting. I'll try to remember to either look up 2 vs 3, or note that it is for Python 2 in my answer.</span>
