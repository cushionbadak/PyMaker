<div class="post-text" itemprop="text">
<p>I need to both uncompress and decode a set of gzipped files, and the filehook module (<a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer">https://docs.python.org/3/library/fileinput.html</a>) has hooks to both, but I am unable to apply both:</p>
<p>Is there a syntax to apply both of these hooks onto the same FileInput instance?</p>
<pre><code>fi = fileinput.FileInput(openhook=fileinput.hook_compressed)
fi = fileinput.FileInput(openhook=fileinput.hook_encoded("iso-8859-1"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Looking at <a href="https://hg.python.org/cpython/file/3.5/Lib/fileinput.py#l389" rel="nofollow noreferrer">the source</a> and noting that <a href="https://docs.python.org/3/library/gzip.html#gzip.open" rel="nofollow noreferrer"><code>gzip.open</code></a> and <a href="https://docs.python.org/3.5/library/bz2.html#bz2.open" rel="nofollow noreferrer"><code>bz2.open</code></a> support encoding parameters, it shouldn't be too difficult to roll your own:</p>
<pre><code>def hook_compressed_encoded(encoding):
    def hook_compressed(filename, mode):
        ext = os.path.splitext(filename)[1]
        if ext == '.gz':
            import gzip
            return gzip.open(filename, mode, encoding=encoding)
        elif ext == '.bz2':
            import bz2
            return bz2.open(filename, mode, encoding=encoding)
        else:
            return open(filename, mode, encoding=encoding)
    return hook_compressed

fi = fileinput.FileInput(openhook=hook_compressed_encoded('iso-8859-1'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, there's no way to combine these. You cannot even use <code>hook_compressed</code> with the default <code>utf8</code> by passing text mode, because <code>FileInput</code> refuses to accept <code>rt</code> on the assumption that <code>r</code> always means text.</p>
<p>The only solution is to write your own.</p>
<pre><code>def hook_compressed_encoded(encoding):
    def hook(filename, mode):
        ext = os.path.splitext(filename)[1]
        if ext == '.gz':
            import gzip
            return gzip.open(filename, 'rt', encoding=encoding)
        elif ext == '.bz2':
            import bz2
            return bz2.open(filename, 'rt', encoding=encoding)
        else:
            return open(filename, 'rt', encoding=encoding)
    return hook

fi = fileinput.FileInput(openhook=hook_compressed_encoded('iso-8859-1'))
</code></pre>
</div>
<span class="comment-copy">ValueError: Argument 'encoding' not supported in binary mode</span>
