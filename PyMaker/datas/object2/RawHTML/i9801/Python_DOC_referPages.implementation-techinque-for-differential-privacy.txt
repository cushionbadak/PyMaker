<div class="post-text" itemprop="text">
<p>I am currently doing an experiment on a dataset using differential privacy concepts. So, I am trying to implement one of the mechanisms of differential privacy namely Laplace mechanisms using a sample dataset from  <a href="http://archive.ics.uci.edu/ml/datasets/Adult" rel="nofollow noreferrer">UCI Machine Repository</a> and python programming language.<br/>
Let's assume that we have simple counting query where we want to know the number of people who earns '&lt;=50k' which are grouped by their 'occupation' </p>
<pre><code>SELECT 
   adult.occupation, COUNT(adult.salary_group) As NumofPeople 
FROM 
   adult
WHERE 
   adult.salary_group = '&lt;=50K'
GROUP BY 
   adult.occupation, adult.salary_group;
</code></pre>
<p>and this is the Laplace function I am trying to use </p>
<pre><code>import numpy as np

def laplaceMechanism(x, epsilon):
    x +=  np.random.laplace(0, epsilon, 1)[0]
return x
</code></pre>
<p>So, my question is how could I apply the function against the the data I got if we take <code>epsilon=2</code>, I know that Laplace Mechanism works by adding a random noise from the la place distribution to the true answer we get from the query. A bit of insight would be appreciated...</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you have already loaded the csv from the link into a database to conduct the sql query, you can apply your Laplacian function by first loading the results of the query into a pandas dataframe using <a href="http://pandas.pydata.org/pandas-docs/version/0.20/generated/pandas.read_sql.html" rel="nofollow noreferrer"><code>pandas.readsql()</code></a>:</p>
<pre><code>import pandas as pd

query =  '''SELECT 
   adult.occupation, COUNT(adult.salary_group) As NumofPeople 
FROM 
   adult
WHERE 
   adult.salary_group = '&lt;=50K'
GROUP BY 
   adult.occupation, adult.salary_group;'''

df = pd.read_sql(query, '&lt;database-connection-string&gt;')
</code></pre>
<p>Then you can apply your function using <a href="http://pandas.pydata.org/pandas-docs/version/0.20/generated/pandas.read_sql.html" rel="nofollow noreferrer"><code>pandas.Series.apply()</code></a> using <code>args</code> to pass in your epsilon:</p>
<pre><code>df['NumOfPeople]' = df['NumOfPeople'].apply(laplaceMechanism, args=(2,))
</code></pre>
<p>The above would obviously replace the <code>NumOfPeople</code> column with the adjusted values, you could choose to keep the new series separate, attach them to the dataframe as a new column with a different name, or clone the dataframe first to keep the old dataframe around too.</p>
</div>
<span class="comment-copy">Not clear what you are asking. You could iterate over the query results and apply the function to each row.  You could put the query results in a <a href="http://pandas.pydata.org/talks.html#pycon-us-2015" rel="nofollow noreferrer">Pandas DataFrame</a> then apply the function - the DataFrame will make it easy to work with your data - I recommend watching the video from the link.  It does depend, somewhat, on the type of data structure you put the query result in.</span>
<span class="comment-copy">Have you worked your way through <a href="https://docs.python.org/3/tutorial/index.html#the-python-tutorial" rel="nofollow noreferrer">The Python Tutorial</a> in the docs?  You might get some ideas.</span>
<span class="comment-copy">@wwii If it is just a matter of iterating through the query results I think thats manageable  and yes I have tried to do the tutorial using Pandas DataFrame but thanks for the recommendation</span>
<span class="comment-copy">If you come up with a working solution and would like a critique/feedback you could post it over at <a href="http://codereview.stackexchange.com/questions/tagged/python">CodeReview</a>, or if there are some sticky points in your solution, ask here and try to be specific.  If you haven't already, you may want to peruse <a href="http://stackoverflow.com/help/asking">stackoverflow.com/help/asking</a> , specifically <a href="http://stackoverflow.com/help/mcve">stackoverflow.com/help/mcve</a>.  And it helps to state your intentions/goals - sometimes there is an altogether better way to accomplish something than what you tried.</span>
<span class="comment-copy">Note that if you <i>don't</i> actually have it in a database, you can used <code>pandas.read_csv</code> and pandas's <code>groupby</code> and <code>count</code> functions to do everything in pandas without having to involve sql and/or databases.</span>
