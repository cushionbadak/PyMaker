<div class="post-text" itemprop="text">
<p>I'm writing an exception clause at the top level of a script, and I just want it to log whatever errors occur. Annoyingly, PyCharm complains if I just catch <code>Exception</code>.</p>
<pre><code>import logging

logging.basicConfig()

try:
    raise RuntimeError('Bad stuff happened.')
except Exception:  # &lt;= causes warning: Too broad exception clause
    logging.error('Failed.', exc_info=True)
</code></pre>
<p>Is there something wrong with this handler? If not, how can I tell PyCharm to shut up about it?</p>
</div>
<div class="post-text" itemprop="text">
<p>From a comment by <a href="https://stackoverflow.com/a/40775710/4794#comment68775868_40775710">Joran</a>: you can use <code># noinspection PyBroadException</code> to tell PyCharm that you're OK with this exception clause. This is what I was originally looking for, but I missed the option to <a href="https://www.jetbrains.com/help/pycharm/2016.1/suppressing-inspections.html" rel="noreferrer">suppress the inspection</a> in the suggestions menu.</p>
<pre><code>import logging

logging.basicConfig()

# noinspection PyBroadException
try:
    raise RuntimeError('Bad stuff happened.')
except Exception:
    logging.error('Failed.', exc_info=True)
</code></pre>
<p>If you don't even want to log the exception, and you just want to suppress it without PyCharm complaining, there's a new feature in Python 3.4: <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress" rel="noreferrer"><code>contextlib.suppress()</code></a>.</p>
<pre><code>import contextlib

with contextlib.suppress(Exception):
    raise RuntimeError('Bad stuff happened.')
</code></pre>
<p>That's equivalent to this:</p>
<pre><code>try:
    raise RuntimeError('Bad stuff happened.')
except Exception:
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found a hint in this closed <a href="https://youtrack.jetbrains.com/issue/PY-2698" rel="nofollow noreferrer">feature request</a> for PyCharm:</p>
<blockquote>
<p>I suggest you to mark this inspection as 'okay' if the except  block makes use of exception instance <code>e</code> somehow.</p>
</blockquote>
<p>Because I'm logging with <code>exc_info=True</code>, I'm implicitly using the current exception object, but PyCharm doesn't know that. To make it explicit, I can do something a bit hacky: <code>exc_info</code> can use any truthy value to include a stack trace in the log. An exception object should be truthy, because it isn't <code>None</code>.</p>
<pre><code>import logging

logging.basicConfig()

try:
    raise RuntimeError('Bad stuff happened.')
except Exception as e:
    logging.error('Failed.', exc_info=e)
</code></pre>
</div>
<span class="comment-copy">If you're looking to turn warnings off they can be found in the settings.  I believe you can search for the exact errors you are looking to change.</span>
<span class="comment-copy">Thanks, @AugustWilliams, but I just want to tell PyCharm that this try/except block is good. I still want it to complain about other blocks, in case they aren't logging or dealing with the exception properly.</span>
<span class="comment-copy">I remember seeing somewhere about ignore this occurrence or something like that. Can't remember where this button was though, apologies.</span>
<span class="comment-copy">That's going to be horribly misleading to anyone reading this code later.</span>
<span class="comment-copy">you could also add <code># noinspection PyBroadException</code> to right above the <code>try:</code> this would tell pycharm (and probably other IDE's that you know its too broad and you are ok with it)</span>
