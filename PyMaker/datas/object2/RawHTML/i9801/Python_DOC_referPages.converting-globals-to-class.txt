<div class="post-text" itemprop="text">
<p>I have been using global variables for a little text game in python and have come across a lot of articles saying that global variables are a no no in python. I have been trying to understand how to get what I have below (just a health variable and being able to change it and print it) working using classes but I am confused how I can converted something like this in a class. Any help, example, point in the right direction would be great.</p>
<p>Here is an example of me using variables.</p>
<pre><code>import sys
import time

health = 100
b = 1

def intro():
    print("You will die after two moves")


def exittro():
    time.sleep(1)
    print("Thanks for playing!")
    sys.exit()


def move():
    global health
    global b
    health -= 50

    if health &lt;= 51 and b &gt;0:
        print("almost dead")
        b = b - 1


def death():
    if health == 0 or health &lt;= 0:
        print("...")
        time.sleep(1)
        print("You died\n")
        time.sleep(2)
        print("Dont worry, this game sucks anyway\n")
        exittro()

intro()

a = 1

while a == 1:
    input("Press Enter to move")
    move()
    death()
</code></pre>
<p>Thank you</p>
<p>Edit: this is the kind of thing I have been trying to do...</p>
<pre><code>class Test:
def __init__(self):
    number = 100

def __call__(self):
    return number

def reduceNum(self):
    number -=10

def printNum(self):
    print(number)

a = 1
while a == 1:
    input("Enter")
    Test.self.reduceNum()
    Test.self.printNum()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would avoid classes for this, as classes are generally slower. You could make the function return the new value for the <code>health</code> variable.</p>
<p>I would also suggest making a main controller function to take the return value and apply it to other functions. This prevents global variables outside of a function's scope.</p>
<pre><code>import time

def intro():
    print("You will die after two moves")


def outro():
    time.sleep(1)
    print("Thanks for playing!")
    # sys.exit() # You can avoid this now by just stopping the program normally


def move(health):
    health -= 50

    if health &lt;= 51:
        print("almost dead")
    return health  # Return the new health to be stored in a variable


def death(health):
    if health &lt;= 0:
        print("...")
        time.sleep(1)
        print("You died\n")
        time.sleep(2)
        print("Dont worry, this game sucks anyway\n")
        return True  # Died
    return False  # Didn't die

def main():
    health = 100  # You start with 100 health
    intro()
    while not death(health):
        # While the death function doesn't return `True` (i.e., you didn't die) ...
        input("Press enter to move")
        health = move(health)  # `health` is the new health value
    outro()
</code></pre>
<p>If you want to use classes, you need to actually instantiate the class (Make a new object from it) by doing <code>instance = Test()</code>. You also need to store variables as attributes of self (so <code>self.number = number</code>) as any local variables are different from each other.</p>
<pre><code>class Test:
    def __init__(self):
        self.number = 100

    def __call__(self):
        return self.number

    def reduceNum(self):
        self.number -= 10

    def printNum(self):
        print(self.number)

a = 1
game = Test()
while a == 1:
    input("Enter")
    game.reduceNum()
    game.printNum()
    # Or:
    print(game())
    # As you've changed `__call__` to return the number as well.
</code></pre>
</div>
<span class="comment-copy">What have you tried? Are you getting an error? Show us what you've got so far.</span>
<span class="comment-copy">Something like this, many adapted variations of it <code>class Test:     def __init__(self):         number = 100      def __call__(self):         return number      def reduceNum(self):         number -=10      def printNum(self):         print(number)  a = 1 while a == 1:     input("Enter")     Test.self.reduceNum()     Test.self.printNum()</code></span>
<span class="comment-copy">Anthony, add the code to the original question.</span>
<span class="comment-copy">Have a class for the player and class variables (e.g. <code>self.whatever</code>) for the player's stats maybe? Honestly, if your code isn't going to be too much more complex than your example, then globals are fine. Also methods for those functions</span>
<span class="comment-copy">If you aren't familiar with classes, you could always read up on them <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">Great thank you that is what I was after, much appreciated</span>
<span class="comment-copy">Why are classes generally slower?</span>
<span class="comment-copy">@nycynik Python built-ins, like <code>dict</code>s and <code>set</code>s are implemented natively (So for the regular Python that you download from python.org, in C), and have a ton of optimizations. Classes can't have nearly as many optimizations, as they can be anything so Python can't speed them up</span>
