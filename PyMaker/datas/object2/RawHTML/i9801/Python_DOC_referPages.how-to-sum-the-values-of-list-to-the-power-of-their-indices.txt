<div class="post-text" itemprop="text">
<p>How do I sum the values of list to the power of their indices in <code>Python 3</code>?</p>
<p>Example:</p>
<pre><code>[3, 0, 2] = 3^1 + 0^2 + 2^3 = 11
</code></pre>
<p>The idea is to create a unique index for any possible combination of non-negative numbers in the list. This way, I can use the list to compute an index of <em>something</em>.</p>
<hr/>
<p>Edit: while the question has been answered, I just realized that the method does not create a unique index for any combination of non-negative integers in the list. To do so, assuming <code>a</code> is the number of possible integers, and based in the accepted answer,</p>
<pre><code>sum(a ** i * j for i,j in enumerate(l, 0))
</code></pre>
<p>The idea is that each number will increase the index by an amount exponentially proportional to its position in the list. Assuming <code>a=4</code> (from <code>0</code> to <code>3</code>), the above example becomes</p>
<pre><code>[3, 0, 2] = 4^0*3 + 4^1*0 + 4^2^2 = 35
</code></pre>
<p>Where the indices would range from <code>0</code> to <code>4^3-1=63</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> to get the index and supply that to <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a>:</p>
<pre><code>sum(j ** i for i,j in enumerate(l, 1))
</code></pre>
<p>Specifying the <code>start</code> argument to <code>enumerate</code> as <code>1</code> assures indices will start from <code>1</code> (as you want) and not from <code>0</code> (the default which you get with a plain <code>enumerate</code>):</p>
<pre><code>&gt;&gt;&gt; l = [3, 0, 2]    
&gt;&gt;&gt; sum(j ** i for i,j in enumerate(l, 1))
11
</code></pre>
<p>In a functional spirit, you could also utilize <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> with <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>count</code></a> from <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools</a> passing in <a href="https://docs.python.org/3/library/functions.html#pow" rel="nofollow noreferrer"><code>pow</code></a> as the function to be mapped:</p>
<pre><code>&gt;&gt;&gt; from itertools import count
&gt;&gt;&gt; sum(map(pow, l, count(1)))
11
</code></pre>
<p>These pretty much execute in approximately the same time; the generator expression to <code>sum</code> though offers a slight advantage of flexibility.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this with numpy, which is often faster than iterating through lists:</p>
<pre><code>In [1]: import numpy as np

In [2]: l = [0, 3, 4, 1]

In [3]: np.array(l) ** np.arange(len(l))
Out[3]: array([ 1,  3, 16,  1])

In [4]: np.array(l) ** np.arange(1, len(l) + 1)
Out[4]: array([ 0,  9, 64,  1])
</code></pre>
</div>
<span class="comment-copy">Hm, the edit might confuse more that it helps (regarding the original question and answer). Also, <code>enumerate(list, 0)</code> isn't needed :-) <code>enumerate(list)</code> by default starts indices from <code>0</code>.</span>
