<div class="post-text" itemprop="text">
<p>I have a piece of I/O-bound code that is basically doing some web scraping for a research project of mine.</p>
<p>The code started imperative, then became list-comprehensions which now mostly turned into generators:</p>
<pre><code>if __name__ == '__main__':
    while True:
        with suppress(Exception):
            page = requests.get(baseUrl).content
        urls = (baseUrl + link['href'] for link in BeautifulSoup(page,'html.parser').select('.tournament a'))
        resources = (scrape_host(url) for url in urls)
        keywords = ((keywords_for_resource(referer, site_id), rid) for
                          referer, site_id, rid in resources)
        output = (scrape(years, animals) for years, animals in keywords)
        responses = (post_data_with_exception_handling(list(data)) for data in output)
        for response in responses:
            print(response.status_code)
</code></pre>
<p>This kind of code really fits well into my head, and since it's based on generators, without storing much state, I figured I could pretty easily turn this into <code>asyncio</code> based code:</p>
<pre><code>async def fetch(session, url):
    with async_timeout.timeout(10):
        async with session.get(url) as response:
            return await response.text()             
async def main(loop):
    async with aiohttp.ClientSession(loop=loop) as session: 
        page = await fetch(session,baseUrl)
        urls = (baseUrl + link['href'] for link in BeautifulSoup(page,'html.parser').select('.tournament a'))
        subpages = (await fetch(session,url) for url in urls)
</code></pre>
<p>However in Python 3.5 this just returns a <code>Syntax error</code> since the <code>await</code> expression is not allowed inside comprehensions.</p>
<p>Python 3.6 promises to implement <a href="https://docs.python.org/3.6/whatsnew/3.6.html#whatsnew36-pep530" rel="nofollow noreferrer">asynchronous generators in pep 530</a>.</p>
<p>Will this feature enable me to convert generator based code to <code>asyncio</code> code easily, or does it also need a complete rewrite?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed" rel="nofollow noreferrer"><code>asyncio.as_completed()</code></a> might be a better solution here:</p>
<pre><code># pip install beautifulsoup4 aiohttp
import asyncio
from urllib.parse import urljoin

import aiohttp
import async_timeout
from bs4 import BeautifulSoup

BASE_URL = "http://www.thewebsiteyouarescraping.com/"
SELECTOR = ".tournament a"

async def fetch(session, url):
    with async_timeout.timeout(10):
        async with session.get(url) as response:
            return url, await response.text()


async def main(base_url, selector, loop):
    async with aiohttp.ClientSession(loop=loop) as session:
        _, page = await fetch(session, base_url)
        urls = (urljoin(base_url, link['href']) for link in
                BeautifulSoup(page, 'html.parser').select(selector))
        tasks = {fetch(session, url): url for url in urls}
        for fut in asyncio.as_completed(tasks, loop=loop):
            process(*await fut)
        # Compare with:
        # for fut in tasks:
        #     process(*await fut)


def process(url, page):
    print(url, len(page))


loop = asyncio.get_event_loop()
loop.run_until_complete(main(BASE_URL, SELECTOR, loop))
loop.close()
</code></pre>
</div>
<span class="comment-copy">python 3.6 was released :-)</span>
