<div class="post-text" itemprop="text">
<p>In my Django App, I have 2 models. One called Post and one called Categories. When a user clicks on a category, I want only the posts that are in that category to appear in the category detail view. For example if a user clicks on the medical category, I only want the posts in the medical category to appear.</p>
<p>Models:</p>
<pre><code>class Category(models.Model):
    title = models.CharField(max_length=200)
    colorcode = models.CharField(max_length=20, blank=True, null=True)
    description = models.TextField()
    image = models.ImageField(blank=True, null=True)
    slug = models.SlugField(unique=True)

class Post(models.Model):
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    text = models.TextField()
    sub_description = models.TextField(blank=True, null=True)
    created_date = models.DateTimeField(default=timezone.now)
    published_date = models.DateTimeField(blank=True, null=True)
    category = models.ForeignKey(Category, on_delete=models.CASCADE, blank=True, null=True)
    image = models.ImageField(blank=True, null=True)
    live = models.BooleanField(default=False)
    slug = models.SlugField(unique=True)
</code></pre>
<p>Views:</p>
<pre><code>class CategoryDetailView(DetailView):
model = Category

def get_context_data(self, **kwargs):
    context = super(CategoryDetailView, self).get_context_data(**kwargs)
    context['category_posts'] = Post.objects.filter(live=True)
    return context
</code></pre>
<p>Template:</p>
<pre><code>{% for post in category_posts %}
    &lt;div class="post"&gt;
        &lt;div class="post-title"&gt;
            {{ post.title }}
        &lt;/div&gt;
        &lt;div class="post-author"&gt;
            {{ post.author }}
        &lt;/div&gt;
    &lt;/div&gt;
{% endfor %}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In a <code>DetailView</code>, you have access to the actual object being rendered (in your case the <code>Category</code> instance) through <code>self.object</code>.</p>
<p>So in your <code>get_context_data</code> method you can do:</p>
<pre><code>context['category_posts'] = Post.objects.filter(live=True, category=self.object)
</code></pre>
<p>Note that <code>self.object</code> might be <code>None</code> so you may want to deal with that case.</p>
</div>
<span class="comment-copy">Worked perfectly! Will award you the answer when possible.</span>
