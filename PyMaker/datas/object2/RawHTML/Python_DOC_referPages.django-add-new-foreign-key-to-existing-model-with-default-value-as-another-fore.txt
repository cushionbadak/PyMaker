<div class="post-text" itemprop="text">
<p>I recently started using Django, so please be patient. I have a model with 2 foreign keys </p>
<p><code>class Application(models.Model):
    assessment_owner = models.ForeignKey(User, related_name='assessment_owner')
    creator = models.ForeignKey(User, related_name='creator')</code></p>
<p>I am trying to add new foreign key called tech_lead to the same model, and default value for tech_lead should be assessment_owner. Later on, I can update the value for tech_lead using data load, but initially it should be assessment owner. </p>
<p>With following code snippet, Django asks for a default value while making migrations and assigns the same tech_lead everywhere. I would like to define default value for tech_lead through code, and simple default attribute doesn't work. I have tried using signals pre_save and post_save with no luck.</p>
<pre><code>class Application(models.Model):
    assessment_owner = models.ForeignKey(User, related_name='assessment_owner')
    creator = models.ForeignKey(User, related_name='creator')
    tech_lead = models.ForeignKey(User, related_name='tech_lead')
</code></pre>
<p>I am using Django 1.11.3 and postgreSQL. </p>
<p>Migration was successful with one-off default value.</p>
<p>Error Stack -</p>
<p><a href="https://i.stack.imgur.com/rL9So.png" rel="nofollow noreferrer">Env details</a></p>
<p><a href="https://i.stack.imgur.com/qpVyQ.png" rel="nofollow noreferrer">error</a></p>
<p><a href="https://i.stack.imgur.com/u20hP.png" rel="nofollow noreferrer">error</a></p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>tech_lead = models.ForeignKey(User, related_name='tech_lead')</code></p>
<p>breaks integrity because your database is already populated with <code>Application</code> instances. If you want to add a not nullable FK to your scheme, you should specify default value. Otherwise, if you can't provide default value, you should consider allowing <code>tech_lead</code> to be NULL, i.e:</p>
<p><code>tech_lead = models.ForeignKey(User, related_name='tech_lead', null=True)</code></p>
<p>then using <a href="https://docs.djangoproject.com/en/2.1/topics/migrations/#data-migrations" rel="nofollow noreferrer">data migration</a> to populate field with values you want:</p>
<pre><code>from django.db import migrations

def populate_tech_lead(apps, schema_editor):
    Application = apps.get_model('yourappname', 'Application')
    for application in Application.objects.all():
        application.tech_lead = application.assessment_owner
        application.save()

class Migration(migrations.Migration):

    dependencies = [
        ('yourappname', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(populate_tech_lead),
    ]
</code></pre>
<p>and then removing <code>null=True</code> from the field:</p>
<p><code>tech_lead = models.ForeignKey(User, related_name='tech_lead')</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Step 1. add <strong><code>null=True</code></strong> to the <strong>tech_lead</strong> field as</p>
<pre><code>class Application(models.Model):
    assessment_owner = models.ForeignKey(User, related_name='assessment_owner')
    creator = models.ForeignKey(User, related_name='creator')
    tech_lead = models.ForeignKey(User, related_name='tech_lead', <b>null=True</b>)</code></pre>
<p>Step 2. create migration file by <strong><code>python manage.py makemigrations</code></strong><br/><br/>
Step 3. migrate the db <strong><code>python manage.py migrate</code></strong><br/><br/>
Step 4. open django shell, <strong><code>python manage.py shell</code></strong><br/><br/>
Step 5. run the following script</p>
<pre><code>from your_app.models import Application
from django.db.models.expressions import F

Application.objects.filter(tech_lead__isnull=True).update(tech_lead=F('assessment_owner'))</code></pre>
</div>
<span class="comment-copy">can you show us the trace log?</span>
<span class="comment-copy">instead of assigning three different users why not add these roles to user model instead? and why not make it <code>ManyToMany</code>?</span>
<span class="comment-copy">@aarif This application has been built by someone else and that's how it is designed. I am simply adding new feature to the existing application.</span>
<span class="comment-copy">Agree, but I don't want to hard code default value, this way all the applications will have same tech_lead. I want to assign default same as that of assessment_owner.</span>
<span class="comment-copy">you can do it in 3 migrations. Create nullable field =&gt; create <a href="https://docs.djangoproject.com/en/2.1/topics/migrations/#data-migrations" rel="nofollow noreferrer">data migration</a> to update  field value =&gt; make field not nullable</span>
<span class="comment-copy">@ Kyryl Havrylenko Tried your solution. 1. Added null=True , 2. ran makemigrations  3. Updated migration file to assign assessment owner to tech_lead. 4. Removed null=True 5. Ran makemigrations. and chose option 2 that is - Ignore for now as I have added RunPython . 6. migrate failed with same error - ProgrammingError tech_lead_id does not exist. Please guide.</span>
<span class="comment-copy">add <code>null=True</code>, run <code>makemigrations</code>; run <code>makemigrations --empty appname</code> and add <code>RunPython</code> inside; remove <code>null=True</code>, run <code>makemigrations</code>; run <code>migrate</code></span>
<span class="comment-copy">Tried this solution, but I still see ProgrammingError application.tech_lead_id does not exist while running python ./manage.py migrate  :(</span>
<span class="comment-copy">Didn't work for me. Throws ProgrammingError tech_lead_id does not exists.</span>
<span class="comment-copy">This solution may work now as migration history is correct but this solution requires manually running query to update value. We deploy our application manually and it's not in my control, I will have to instruct deployment team to follow this extra step while deploying it, which doesn't seem like a good idea. Thank you for your solution. I learned something new :)</span>
