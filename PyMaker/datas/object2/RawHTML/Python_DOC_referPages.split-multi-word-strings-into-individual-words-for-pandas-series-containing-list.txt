<div class="post-text" itemprop="text">
<p>I have a Pandas Dataframe that has the column values as list of strings. Each list may have one or more than one string. For strings that have more than one word, I'd like to split them into individual words, so that each list contains only individual words. In the following Dataframe, only the <code>sent_tags</code> column has lists which contain strings of variable length.</p>
<p><strong>DataFrame</strong>:</p>
<pre><code>import pandas as pd    
pd.set_option('display.max_colwidth', -1)
df = pd.DataFrame({"fruit_tags": [["'apples'", "'oranges'", "'pears'"], ["'melons'", "'peaches'", "'kiwis'"]], "sent_tags":[["'apples'", "'sweeter than oranges'", "'pears sweeter than apples'"], ["'melons'", "'sweeter than peaches'", "'kiwis sweeter than melons'"]]})
print(df)  

    fruit_tags                        sent_tags
0   ['apples', 'oranges', 'pears']  ['apples', 'sweeter than oranges', 'pears sweeter than apples']
1   ['melons', 'peaches', 'kiwis']  ['melons', 'sweeter than peaches', 'kiwis sweeter than melons']
</code></pre>
<p><strong>My attempt</strong>:</p>
<p>I decided to use <code>word_tokenize</code> from the NLTK library to break such strings into individual words. I do get the tokenized words for a particular selection inside the list but cannot club them together into each list for each row:</p>
<pre><code>from nltk.tokenize import word_tokenize
df['sent_tags'].str[1].str.strip("'").apply(lambda x:word_tokenize(x.lower()))
#Output
0    [sweeter, than, oranges]
1    [sweeter, than, peaches]
Name: sent_tags, dtype: object
</code></pre>
<p><strong>Desired result</strong>:</p>
<pre><code>    fruit_tags                        sent_tags
0   ['apples', 'oranges', 'pears']  ['apples', 'sweeter', 'than', 'oranges', 'pears', 'sweeter', 'than', 'apples']
1   ['melons', 'peaches', 'kiwis']  ['melons', 'sweeter', 'than', 'peaches', 'kiwis', 'sweeter', 'than', 'melons']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use list comprehension with flatenning with all text functions - <code>strip</code>, <code>lower</code> and <code>split</code>:</p>
<pre><code>s = df['sent_tags'].apply(lambda x: [z for y in x for z in y.strip("'").lower().split()])
</code></pre>
<p>Or:</p>
<pre><code>s = [[z for y in x for z in y.strip("'").lower().split()] for x in df['sent_tags']]
</code></pre>
<hr/>
<pre><code>df['sent_tags'] = s

print(df) 
                       fruit_tags  \
0  ['apples', 'oranges', 'pears']   
1  ['melons', 'peaches', 'kiwis']   

                                                        sent_tags  
0  [apples, sweeter, than, oranges, pears, sweeter, than, apples]  
1  [melons, sweeter, than, peaches, kiwis, sweeter, than, melons]  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another possible method could be:</p>
<pre><code>df['sent_tags'].apply(lambda x: [item for elem in [y.split() for y in x] for item in elem])
</code></pre>
</div>
<span class="comment-copy">Brilliant!. Thank you very much!</span>
<span class="comment-copy">not me <a href="https://snag.gy/unGEHM.jpg" rel="nofollow noreferrer">snag.gy/unGEHM.jpg</a></span>
