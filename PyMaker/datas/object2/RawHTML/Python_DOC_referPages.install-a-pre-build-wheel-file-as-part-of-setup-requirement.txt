<div class="post-text" itemprop="text">
<p>I have a python project where I am using the <code>maskrcnn-benchmark</code> project from Facebook Research. The problem is that the <code>setup</code> file for the facebook project depends on <code>pytorch</code> i.e. the setup file has an import line like:</p>
<pre><code>import torch
</code></pre>
<p>So, I need to have <code>pytorch</code> pre-installed and this is causing me some problems. For me, the cleanest solution would be if I could prebuild the <code>maskrcnn-benchmark</code> project as a <code>wheel</code> with all its dependencies like <code>pytorch</code> and then add this wheel as a requirement in my <code>setup.py</code> file.</p>
<p>However, I could not find an easy way to do so. Is there someway to adsd a wheel file as an <code>install_requires</code> step in the setup file of a python project.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>maskrcnn-benchmark</code> project should have <code>torch==1.0.1</code> (or whichever version) in <code>install_requirements=</code> (along with any other requirements).</p>
<p>Then, you can use </p>
<pre><code>pip wheel . --wheel-dir /tmp/deps
</code></pre>
<p>to have <code>pip</code> gather up the wheels (for your current architecture!) in <code>/tmp/deps</code>. Then, to install the dependencies from the wheel dir,</p>
<pre><code>pip install --find-links=/tmp/deps -e .
</code></pre>
<p>This technique works for other target types too, like <code>-r requirements.txt</code>.</p>
<p>EDIT: If you also want to build a wheel for the project itself, that'd be <code>python setup.py bdist_wheel</code>, but that won't look for dependencies.</p>
</div>
<span class="comment-copy">As I am unfamiliar with how <code>torch</code> is used inside your <code>setup.py</code>, what you need to do is not import it directly but create a wrapper function that imports that package at the point where it will be used, and the dependency should be declared as a <code>setup_requires</code> rather than a <code>install_requires</code>. For packages that import and make use of Cython <a href="https://stackoverflow.com/questions/37471313/setup-requires-with-cython">this thread</a> covers a similar issue.</span>
<span class="comment-copy">This import is not in my setup file but in the maskrcnn-benchmark i.e. Facebook project</span>
<span class="comment-copy">Thank you for the answer. Is it then possible to add this generated wheel in your first step for the maskrcnn-project as a requiremnt in the setup.py filee. The reason I ask is that this setup file gets picked up by another project and gets installed. So having the requirements in there would make me do these changees without disturbing the client.</span>
<span class="comment-copy">These aren't generated wheels, they're wheels downloaded from PyPI. (I added an edit about how to build a wheel for the project itself.) In general, <code>pip</code> will happily download wheels for all dependencies as long as they're listed. My answer caters more for an offline/reproducible installation scenario.</span>
<span class="comment-copy">yes, my issue is that for the maskrcnn-benchmark project the <code>setup.py</code> itself refers to torch i.e. there is an <code>import torch</code> line in setup.py file. So, what I was thinking was prebuilding maskrcnn as a wheel and then installing it from within my setup. So, I am guessing that cannot really be done.</span>
<span class="comment-copy">Well, in that case you could have a "wrapper" project that depends on torch and maskrcnn-benchmark, so torch gets installed before maskrcnn-benchmark's setup.py is called, but it gets fiddly. Another option would be to edit that <a href="https://github.com/facebookresearch/maskrcnn-benchmark/blob/b3d1de0088ad84b7a1cdee62c08418c7b9095acc/setup.py" rel="nofollow noreferrer">github.com/facebookresearch/maskrcnn-benchmark/blob/â€¦</a> in a way that makes the torch import optional.</span>
