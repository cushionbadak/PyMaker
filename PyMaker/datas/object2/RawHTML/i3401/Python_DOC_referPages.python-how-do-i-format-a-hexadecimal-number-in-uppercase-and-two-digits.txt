<div class="post-text" itemprop="text">
<p>I needed to do a hexadecimal counter.</p>
<p>I tried to do it this way:</p>
<pre><code>x = 0

while(x != 10):
    print('Number '+'{0:x}'.format(int(x)))
    x = x + 1
</code></pre>
<p>The counter is working. The only problem is that the output looks like this</p>
<pre><code> 0    5    a    f   14   19
 1    6    b   10   15   1a
 2    7    c   11   16   1b
 3    8    d   12   17   1c
 4    9    e   13   18   1d
</code></pre>
<p>and I would like it to look like this</p>
<pre><code>00   05   0A   0F   14   19
01   06   0B   10   15   1A
02   07   0C   11   16   1B
03   08   0D   12   17   1C
04   09   0E   13   18   1D
</code></pre>
<p>How could I do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is explained in the <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">Format specification Mini-Language</a>.</p>
<p>To get uppercase letters:</p>
<blockquote>
<p>'x'   Hex format. Outputs the number in base 16, using lowercase letters for the digits above 9.</p>
<p>'X'   Hex format. Outputs the number in base 16, using uppercase letters for the digits above 9.</p>
</blockquote>
<p>To get 2 digits:</p>
<blockquote>
<p><em>width</em> is a decimal integer defining the minimum field width. If not specified, then the field width will be determined by the content.</p>
<p>When no explicit alignment is given, preceding the width field by a zero (<code>'0'</code>) character enables sign-aware zero-padding for numeric types. This is equivalent to a <em>fill</em> character of <code>'0'</code> with an <em>alignment</em> type of <code>'='</code>.</p>
</blockquote>
<p>So, you either need to set the <code>width</code> to 2, the <code>fill</code> to <code>0</code>, and the <code>alignment</code> to <code>=</code>, or, more simply, just use the special <code>0</code> prefix before the <code>width</code>.</p>
<p>So:</p>
<pre><code>print('Number '+'{0:02X}'.format(int(x)))
</code></pre>
<hr/>
<p>While we're at it, this is pretty silly code. </p>
<p>First, <code>x</code> is already an <code>int</code>, so why call <code>int</code> on it?</p>
<pre><code>print('Number '+'{0:02X}'.format(x))
</code></pre>
<p>Meanwhile, if the only thing you're putting in a <code>format</code> string is a single format specifier, you don't need <code>str.format</code>, just <code>format</code>:</p>
<pre><code>print('Number ' + format(x, '02X'))
</code></pre>
<p>Or, alternatively, the whole point of <code>str.format</code> is that you can throw multiple things into one format string:</p>
<pre><code>print('Number {:02X}'.format(x))
</code></pre>
<p>Or, if you're using Python 3.6 or later:</p>
<pre><code>print(f'Number {x:02x}')
</code></pre>
</div>
