<div class="post-text" itemprop="text">
<p>I am trying to take a string input in my python code to be converted and implemented into a URL to search the string on the website. The website I am using is songbpm.com and what I want is to search a song and I receive the speed of the song. Finding the relevant information within the HTML is not the problem, I have already finished this and my url creation is working, which is here:</p>
<pre><code>import urllib.request
import urllib.parse

song = input("")
fin = ""
for i in song:
    if i == "(":
        tempone = song
        song = tempone.split("(")[0] + tempone.split(") ")[1]

previous = ""
for i in song:
    if i.isalpha():
        temp = fin
        fin = temp + i
    else:
        if previous.isalpha():
            temp = fin
            fin = temp + "-"
    previous = i


songencoded = urllib.parse.quote(song, safe='')
print('https://songbpm.com/'+ fin.lower() + '?q=' + songencoded)

response = urllib.request.urlopen('https://songbpm.com/'+ fin.lower() + '?q=' + songencoded)
text = str(response.read()).split('\\n')
</code></pre>
<p>The urls, which are returned are identical to the url when I manually enter the search input on the website, however, when I run this code, it always reads the html data for the no results redirect. </p>
<p>Also, if I paste the computer-generated URL into the browser, it redirects to the no results page, however, after searching the same string by hand in the browser, the computer-generated url works as well (when retrying).</p>
<p>What I have also observed is that after manually opening a certain URL, I can run the code with the same search query and it works - it seems as if searches are cached for a certain amount of time if a user, not a code opens it.</p>
<p>How do I tackle this issue of the code, although generating the exact URL, not being able to open webpages similar to the user. </p>
</div>
<div class="post-text" itemprop="text">
<p>The site has a few extra requirements to make a suitable request. Firstly it uses cookies, so a <a href="https://docs.python.org/3/library/http.cookiejar.html?highlight=cookiejar#module-http.cookiejar" rel="nofollow noreferrer"><code>cookiejar</code></a> is needed. This can be loaded by first requesting the homepage without making a search. This also then gives you the value for <code>_csrf</code> which is needed when submitting the request form. Lastly, the POST request can be generated from your input search by using <a href="https://docs.python.org/3/library/urllib.parse.html?highlight=urlencode#urllib.parse.urlencode" rel="nofollow noreferrer"><code>urlencode()</code></a> to build <code>q</code> correctly:</p>
<pre><code>from operator import itemgetter
from bs4 import BeautifulSoup
import http.cookiejar
import urllib.request
import urllib.parse


song = input('Enter song: ')

cookie_jar = http.cookiejar.CookieJar()
cookie_processor = urllib.request.HTTPCookieProcessor(cookie_jar)
opener = urllib.request.build_opener(cookie_processor)

with opener.open('https://songbpm.com') as response:
    html_1 = response.read().decode('utf-8')

soup_1 = BeautifulSoup(html_1, 'html.parser')    
data = urllib.parse.urlencode({'q' : song, '_csrf' : soup_1.input['value']}).encode('ascii')

with opener.open('https://songbpm.com/searches', data) as response:
    html_2 = response.read().decode('utf-8')

soup_2 = BeautifulSoup(html_2, 'html.parser')

for a in soup_2.find_all('a', {'class' : 'media'}):
    print(', '.join(itemgetter(0, 1, 4)([p.get_text(strip=True) for p in a.find_all('p')])))
</code></pre>
<p>Which would give you the following results:</p>
<pre class="lang-none prettyprint-override"><code>Enter song: clean bandit - solo
Clean Bandit, Solo (feat. Demi Lovato), 105
Clean Bandit, Solo (feat. Demi Lovato) - Acoustic, 0
Clean Bandit, Solo (feat. Demi Lovato) - Ofenbach Remix, 121
Clean Bandit, Solo (feat. Demi Lovato) - Sofi Tukker Remix, 127
Clean Bandit, Solo (feat. Demi Lovato) - Wideboys Remix, 122
</code></pre>
<p>Using <code>beautifulsoup</code> makes it easy to extract all the details. <code>itemgetter()</code> is just a quick way to get certain items from a given list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Okay,  I don't know what kind of magic is driving this website, but you can use a headless browser and instead of looking for the song in the url you can type the name of the song that you are looking for in the search-box, and it will work! sorry I didn't get your question right</p>
<p>Here is a 100% working code :) have fun </p>
<pre><code>import bs4
import time
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

options =webdriver.ChromeOptions()
options.add_argument('headless') 
driver = webdriver.Chrome(chrome_options = options)
url = ('https://songbpm.com/')

while True:
    driver.get(url)
    inputElement = driver.find_element_by_id("search-field")
    inputElement.send_keys(str(input("Enter name of a song: \n&gt;")))
    inputElement.send_keys(Keys.ENTER)
    html = driver.page_source
    soup= bs4.BeautifulSoup(html, "html.parser")

    for node in soup.findAll("a", {"class": "media"}):
        print("ARTIST:",node.find("p", {"class":"artist-name"}).text.strip())
        print("SONG:",node.find("p", {"class": "track-name"}).text.strip())
        print("*"*20)
</code></pre>
</div>
<span class="comment-copy">Add a user agent</span>
<span class="comment-copy">Do you get a response other than the "No Results" page if you try <code>urlopen()</code> on an explicit string?  My guess is that you're issue is with the fact the site is redirecting your <code>urllib.request()</code> ask to the "No Results" page due to your headers indicating you are asking from a Python script.</span>
<span class="comment-copy">I don't understand what those <code>for</code> loops are supposed to do. But they seem to have no relevance to your question. Please include just a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. Remove code that isn't required to reproduce the bug.</span>
<span class="comment-copy">add a referrer in the headers?</span>
<span class="comment-copy">@ᴡʜᴀᴄᴋᴀᴍᴀᴅᴏᴏᴅʟᴇ3000 This was a good idea, which I have tried, but I noticed that it is not only about the website recognising the difference between between an algorithm and a physical user, even if I TYPE the URL into the browser, I also get redirected - the search button on the website seems to pass another argument to allow the next page to verify the user to be entering the appropriate way.</span>
<span class="comment-copy">Good explanation man and its fast :)</span>
<span class="comment-copy">Unfortunately, my issue is not parsing the received data, it is reaching the right webpage without getting redirected. Still many thanks for the support.</span>
<span class="comment-copy">okay mate :) 100% working now :) check the update :)</span>
