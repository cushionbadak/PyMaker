<div class="post-text" itemprop="text">
<p>My code produces satisfied result in <strong>hacker rank</strong> compiler window for eleven out of fifteen test input in a certain problem. However, when i make subtle change in my code, all the the test inputs are run as OK.</p>
<p>This is a snippet of my previous code which shows error (terminated due to timeout).</p>
<pre><code>for ind, letter in enumerate(string):
    if letter in vowels:
        kevin += len(string[ind:])
    else:
        stuart += len(string[ind:])
</code></pre>
<p>When i changed the above code as below all inputs are run successfully.</p>
<pre><code>for ind, letter in enumerate(string):
    if letter in vowels:
        kevin += len(string) - ind
    else:
        stuart += len(string) - ind
</code></pre>
<p>Aren't these two codes equivalent?</p>
</div>
<div class="post-text" itemprop="text">
<p>These code snippets are entirely equivalent apart from two things:</p>
<ol>
<li>Second one is more optimized - There are no multiple subset creations of <code>string</code>.</li>
<li>Second one works for any <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Collection" rel="nofollow noreferrer">collection</a> - can work on dict, list, tuple, string and anything that implements both <code>__len__</code> and <code>__iter__</code>.</li>
</ol>
<hr/>
<p>As you've added the error, saying it's a timeout error, I'm leaning towards issue #1 which is the string creation.</p>
<p>If you're creating a subset of a very long string you do the following operations for each iteration:</p>
<ol>
<li>Allocate n-1 bytes of space. (<em>Slowish</em>)</li>
<li>Set all that space to zero (done internally, probably using <code>calloc()</code>)</li>
<li>Copy n-1 bytes from the original string to that new space. (<em>Slow</em>)</li>
<li>Find out the length (<em>A very fast operation</em>)</li>
<li>Deallocate the space. (<em>Fast as well</em>)</li>
</ol>
<p>For long strings, this whole sequence can be a heavy operation, especially done for every iteration.</p>
<p>Second algortithm does this:</p>
<ol>
<li>Get length (<em>fast operation</em>)</li>
<li>Substract integer (<em>fast operation</em>)</li>
<li>???</li>
<li>Profit.</li>
</ol>
</div>
<span class="comment-copy"><code>ind</code> is an integer correct? I really don't know what you're trying to do here.</span>
<span class="comment-copy">enumerate function gives the first value as integer i think.</span>
<span class="comment-copy">hacker rank the minion game problem.</span>
<span class="comment-copy">What is the error?</span>
<span class="comment-copy">You probably want to be more careful. Your question first reads like you want to know about a real "compiler error". But in essence, you are asking about the differences of two code snippets that do the same, but not exactly the same ;-)</span>
<span class="comment-copy">indeed, adding <code>assert len(string) - ind == len(string[ind:])</code> demonstrates the equivalence.</span>
