<div class="post-text" itemprop="text">
<p>My Python script <code>app.py</code> has this function for example:</p>
<pre><code>def testmethod(x):
    return {"steps":["hello","world"]}
</code></pre>
<p>I am using Python C-API in Objective-C as follows:</p>
<pre><code>Py_Initialize();
PyObject *pName = PyUnicode_DecodeFSDefault("app");
PyObject* pModule = PyImport_Import(pName);
Py_DECREF(pName);

PyObject* myFunction = PyObject_GetAttrString(pModule,(char*)"testmethod");
PyObject* args = PyTuple_Pack(1,PyFloat_FromDouble(223.22));
PyObject* myResult = PyObject_CallObject(myFunction, args);
NSLog(@"Check for dict: %d",PyDict_Check(myResult)); // Prints true!!!!!!!!!!!! So definitely a dictionary
</code></pre>
<p>After this, I am not really sure how I can convert the <code>myResult</code> to retrieve my dictionary. For doubles and strings, we usually use the <code>PyFloat_AsDouble</code> and <code>PyUnicode_AsUTF8String</code>, <code>PyBytes_AsString</code> functions but I can't seem to find a <code>PyBLAHBLAH_AsDict</code> or equivalent method. </p>
<pre><code>double result = PyFloat_AsDouble(myResult);
NSLog(@"Result: %f",result);*/

PyObject* pStrObj = PyUnicode_AsUTF8String(myResult);
char* zStr = PyBytes_AsString(pStrObj);
NSLog(@"String: %@",[NSString stringWithUTF8String:zStr]);
</code></pre>
<p>I don't have much experience with Objective-C so maybe I am not looking at the right place.</p>
<p>Can someone help me figure out how I can convert the <code>PyObject</code> to a NSDictionary?</p>
<p>I am basically looking for a C way of accessing the dictionary first (a map for example) which I can then use Objective-C methods to convert to NSDictionary. Similar to how I used PyUnicode_AsUTF8String, PyBytes_AsString and stringWithUTF8String all combined together to get a NSString out of the Python String. Looking for something similar for dictionaries. </p>
<p>I have figured out a way to achieve this but I don't know if this is the best possible way of doing this. I modified my python script to use <code>json.dumps</code> to return a string representation of the dictionary. Then in myObjective C- code, I first get the string, then use <code>JSONObjectWithData</code> to convert the json string to a NSDictionary. This works for now but I am curious if there is a better way of doing this without having to return string instead of dictionary from Python. This seems more like a workaround solution to me. Here's what I have now:</p>
<p><strong>app.py:</strong></p>
<pre><code>import json
def testmethod(x):
    return json.dumps({"steps":["hello","world"]})
</code></pre>
<p><strong>Objective-C:</strong></p>
<pre><code>Py_Initialize();
PyObject *pName = PyUnicode_DecodeFSDefault("app");
PyObject* pModule = PyImport_Import(pName);
Py_DECREF(pName);

PyObject* myFunction = PyObject_GetAttrString(pModule,(char*)"testmethod");
PyObject* args = PyTuple_Pack(1,PyFloat_FromDouble(223.22));
PyObject* myResult = PyObject_CallObject(myFunction, args);

PyObject* pStrObj = PyUnicode_AsUTF8String(myResult);
char* zStr = PyBytes_AsString(pStrObj);
NSString *jsonStr = [NSString stringWithUTF8String:zStr];
NSLog(@"String: %@",jsonStr);

NSError *error;
NSData *data = [jsonStr dataUsingEncoding:NSUTF8StringEncoding];
NSDictionary *dictionary = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&amp;error];

NSLog(@"Dictionary: %@",dictionary);
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/c-api/dict.html#c.PyDict_Next" rel="nofollow noreferrer"><code>PyDict_Next</code></a> to iterate over key / value pairs of the dictionary.</p>
<p>You should also provide the Python hash and equality functions if you are still going to be using <code>PyObject*</code>s. Otherwise, you should try and coerce them all into native types.</p>
<p>(This is in pseudo code since I don't really know Objective-C, but have used the C-Api and Python)</p>
<pre><code>NSObject* convert_py_object(PyObject* obj) {
    if (PyDict_Check(obj)) return convert_py_dict(obj);
    if (PyLong_Check(obj)) return convert_py_int(obj);
    if (PyUnicode_Check(obj)) return convert_py_str(obj);
    if (PyBytes_Check(obj)) return convert_py_bytes(obj);
    if (PyList_Check(obj) || PyTuple_Check(obj) || PyIter_Check(obj)) return convert_py_list(obj);
    throw error;
}

NSDictionary* convert_py_dict(PyObject* dict) {
    if (!PyDict_Check(dict)) throw error;
    NSDictionary* native_dict;
    PyObject *key;
    PyObject *value;
    Py_ssize_t pos = 0;

    while (PyDict_Next(self-&gt;dict, &amp;pos, &amp;key, &amp;value)) {
        native_dict[convert_py_object(key)] = convert_py_object(value);
    }
    return native_dict;
}
</code></pre>
<p>Another alternative would be to just use the Python API to access values of a dictionary. So iterate over all the values with <code>PyDict_Next</code>, <code>PyDict_GetItemString</code> to access string items with simple <code>char *</code>s, and <code>PyDict_GetItem</code> to access an arbitrary Python value.</p>
</div>
<span class="comment-copy">Objective-C is not C or C++. The Python C API is a C API, not an Objective-C API; it doesn't come with functions to convert Python objects into Objective-C data structures.</span>
<span class="comment-copy">@user2357112 Yes I understand that. I am basically looking for a C way of accessing the dictionary first (a map for example) which I can then use objective C methods to convert to NSDictionary. Similar to how I used <code>PyUnicode_AsUTF8String</code>, <code>PyBytes_AsString</code> and <code>stringWithUTF8String</code> all combined together to get a NSString out of the Python String. Looking for something similar for dictionaries.</span>
<span class="comment-copy">Not a direct answer, but have you looked at PyObjC ? <a href="https://pythonhosted.org/pyobjc/" rel="nofollow noreferrer">pythonhosted.org/pyobjc</a></span>
