<div class="post-text" itemprop="text">
<p>I have a block of code that should remove every letter from that a string whose index is divisible by 3:</p>
<pre><code>s = input()

len = len(s)

for i in range(0, len):
    if i % 3 == 0:
        s = s.replace(s[i], ' ')

s = s.replace(' ', '')
print(s)
</code></pre>
<p>The string "Python" for example produces "yton" as expected. I have tested this with a dozen or so strings with the correct output, <em>except</em> for one curious case:</p>
<p>The string "Hello" produces "eo" instead of "elo". Upon closer inspection, python is removing double-occurences, such as "ll". Why would this be?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>replace</code></a> does:</p>
<blockquote>
<p>Return a copy of the string with <strong>all occurrences of substring <em>old</em> replaced by <em>new</em>.</strong> If the optional argument <em>count</em> is given, only the first <em>count</em> occurrences are replaced.</p>
</blockquote>
<p>You're actually relying on exactly that behavior in your <code>replace(' ', '')</code> call.</p>
<p>When you don't want that, don't use <code>replace</code>. (In fact, almost <em>any</em> use of <code>s.replace(s[i], …)</code> has exactly this problem, so watch out whenever you find yourself writing that.)</p>
<p>For example, you can just use slicing:</p>
<pre><code>s = s[:i] + ' ' + s[i+1:]
</code></pre>
<hr/>
<p>Or, maybe even better, just build up a list of characters and <code>join</code> them at the end:</p>
<pre><code>s = input()
lst = []
for i in range(len(s)):
    if i % 3:
        lst.append(s[i])
s = ''.join(lst)
</code></pre>
<p>… which you can even condense into a one-liner:</p>
<pre><code>s = ''.join(c for i, c in enumerate(s) if i % 3)
</code></pre>
<hr/>
<p>If you're really not allowed to use <code>join</code>, you can do the same logic—just less efficient and idiomatic—with string concatenation:</p>
<pre><code>s = input()
t = ''
for i in range(len(s)):
    if i % 3:
        t += s[i]
s = t
</code></pre>
<p>Or, just for fun, put all the complexity in the ranges and slicing so you don't even need the <code>%</code>:</p>
<pre><code>s = input()
t = ''
for i in range(1, len(s), 3):
    t += s[i:i+2]
s = t
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is because the <code>replace</code> method replaces every occurrence of the string with the replacement string. When you replace <code>l</code>, the third character of <code>Hello</code>, it also replaces the other <code>l</code> with <code>''</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>By calling <code>s.replace</code> you are invoking replace on the entire string <code>s</code>, which replaces all occurrences of <code>s[i]</code>, unless you pass a third parameter to <code>replace()</code> to limit the number of times the replacement happens.</p>
<p>Try this in stead:</p>
<pre><code>s = input()

len = len(s)

for i in range(0, len):
    if i % 3 == 0:
        s = s.replace(s[i], ' ', 1)

s = s.replace(' ', '')
print(s)
</code></pre>
<p>I think you could also just skip using replace and more precisely change that one character, changing the code under your <code>if</code> to:</p>
<pre><code>t = list(s)
t[i] = ' '
s = "".join(t)
</code></pre>
</div>
<span class="comment-copy">Because <code>replace</code> always replaces every occurrence of a substring...</span>
<span class="comment-copy">...unless you pass it a third parameter which is a count of the number of times to perform the replacement.</span>
<span class="comment-copy">As a side note, <code>len = len(s)</code> is a really bad idea. Once you do that, you can never call the <code>len</code> function again, because now you're trying to call the number 40 (or whatever).</span>
<span class="comment-copy">@abarnert since this seems to be a pedantic comments section, you could just do <code>del len</code> :)</span>
<span class="comment-copy">@juanpa.arrivillaga Sure, or you could even do <code>globals()[codecs.decode('ary', 'rot13')[::-1] = lambda x: __import__('builtins').len(x)</code>.</span>
<span class="comment-copy">Fool am I! I even made note of this recently. I mistakenly misread my own code, thinking <code>s[i]</code> would only replace the occurrence on the index. Lesson learned!</span>
<span class="comment-copy">Good call on using <code>join</code>, however I'm doing the exercises off snakify.org, which has forbidden the use (at this stage) of anything beyond <code>if</code> and <code>for</code> statements, as well as basic string and arithmetic functions.</span>
<span class="comment-copy">@devgeist But if you're allowed to use the <code>replace</code> method on strings, how could you not be allowed to use the <code>join</code> method on strings? I can understand not being allowed to write generator expressions or use <code>enumerate</code>, I guess, but the explicit statement version shouldn't be doing anything forbidden.</span>
<span class="comment-copy">The exercises are based on what is taught in the lessons, and <code>join</code> hasn't yet been introduced. I agree it might as well have been mentioned, as I don't think it's really "cheating" to use it.</span>
<span class="comment-copy">@devgeist I think the world would be a better place if Python tutorials/classes/etc. didn't teach <code>str.replace</code> so early, because <i>everyone</i> makes exactly the same mistake you did, and then struggles to find workarounds that seem to work but don't (like the one in QA Collective's answer), and only <i>then</i> learns the right way to do it. It's more of an attractive nuisance than a useful feature in the early days.</span>
<span class="comment-copy">No, this is still wrong. What if letter 6 is a <code>j</code>, and letter 2 is also a <code>j</code>? When you do <code>s.replace(s[6], ' ', 1)</code>, what happens?</span>
<span class="comment-copy">In fact, you'll even run into this with the example string <code>Hello</code>, but it isn't exactly visible there (it doesn't matter that you remove the wrong <code>l</code> after the second <code>replace</code>, since they're next to each other); try <code>Pythony</code> instead, and the problem is clearer: you get <code>tony</code> instead of <code>yton</code>.</span>
<span class="comment-copy">You're right - I too read your code incorrectly as you did.  The honest truth is that if I were trying to do what you are doing, I wouldn't use replace at all.  I'd step through each of the characters and either modify the existing string or construct a new one.</span>
<span class="comment-copy">Yes, that's my point: you <i>can't</i> use <code>replace</code> for this problem. Adding <code>count=1</code> doesn't help; any solution with <code>replace</code> is wrong. (Unless you do something incredibly silly, like scan for characters that don't exist in <code>s</code> and <code>replace</code> every single character with a unique unused one so you can <code>replace</code> them back later.)</span>
