<div class="post-text" itemprop="text">
<p>I am implementing part of a C program in Python. This program uses <a href="https://linux.die.net/man/3/glob" rel="nofollow noreferrer">glob(3)</a> to find pathnames matching a pattern. This is a C function corresponding to the <a href="https://linux.die.net/man/7/glob" rel="nofollow noreferrer">glob(7)</a> shell builtin. They are specified in POSIX.2.</p>
<p><strong>What is the equivalent of the POSIX <code>glob(3)</code> in Python?</strong></p>
<p>I looked into the <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer">glob</a> standard module but I am worried by the documentation: it does not mention POSIX anywhere, uses the fuzzy term "shell-like" and has some non-standard extensions such as wildstar <code>**</code> patterns for recursive expansion.</p>
<p>Is it safe to use the <code>glob.glob</code> function if I do not use the <code>recursive</code> flag?</p>
<p>My requirements are:</p>
<ul>
<li>Should match the results of <code>glob(3)</code>, error handling can differ</li>
<li>Should work on both Python 2 and Python 3</li>
<li>Only Linux support is required</li>
<li>Answers mentioning PyPi packages are fine, I prefer smaller packages that can be audited and vendored.</li>
<li>I can use ctypes but I am looking for a Pythonic solution</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Looking at how glob is implemented, it does not rely on <code>glob(3)</code> so it may, but is not guaranteed to yield identical results. Similar goes for POSIX compliance (apart form obviously extended functionality). There might be an overlap, but there is no guaranteed and it was apparently not the intention behind the module.</p>
<p>You can basically rephrase the question asking yourself. What features/behavior do I really need and does <code>glob.glob()</code> do what I specifically need? Chances are, it does.</p>
<p>Or am I rather looking for a compliance statement (certification even) because for instance the project/customer/our company (for reasons only they know (or do not)) requires it. For which you are out of luck with <code>glob.glob()</code>, unless you do the auditing/paperwork yourself or hire someone to do it (note, the code for <code>glob</code> is not that large). You can also (even though you said you did not want to) load <code>glob(3)</code> from <code>libc.so</code> with <code>ctypes</code>. Or re-implement it in Python from scratch (or based on <code>glob</code> for that matter) with the compatibility requirement in mind. As for the point on possible already existing alternatives, I'd defer that to further research and/or recommendations of others.</p>
</div>
<span class="comment-copy">I think the burden is on you to determine whether or not <code>glob.glob</code> is sufficient. Python is open-source, you can audit it yourself to determine whether or not it meets your requirements.</span>
<span class="comment-copy">Thanks for the reply. I ended up using ctypes but opened a ticket to review <code>glob.glob</code> and eventually switch to it.</span>
<span class="comment-copy">Thank you for your reply. I ended up using ctypes. Even if it is less convenient, I am more confident about the compatibility with the C code.</span>
