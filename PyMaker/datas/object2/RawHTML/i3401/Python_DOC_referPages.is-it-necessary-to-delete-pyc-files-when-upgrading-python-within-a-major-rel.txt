<div class="post-text" itemprop="text">
<p><strong>TL;DR</strong></p>
<p>If you switch back-and-forth between 3.6.6 and 3.7.0 before you adopt 3.7.0, there is no concern, the two sets of pyc files will cohabit and you'll be ok.</p>
<p>What if you switch back-and-forth between 3.6.4 and 3.6.6? Do you need to delete pyc files?</p>
<p><strong>Long version</strong></p>
<p>I see that the pyc files are specific for major releases only. For example I have:</p>
<pre><code>__init__.cpython-36.pyc
__init__.cpython-37.pyc
</code></pre>
<p>which is presumably the result of <a href="https://www.python.org/dev/peps/pep-3147/" rel="nofollow noreferrer">PEP 3147</a>.</p>
<p>And so it's clear enough. If I move back-and-forth during development between virtual environments in, say, 3.6.6 and 3.7.0, there is no concern. The two versions will cohabit in the <code>__pycache__</code> directory because they are identified by the major version number.</p>
<p><strong>Question</strong>: <em>What about switching back-and-forth between, say, 3.6.4 and 3.6.6, do I indeed need to delete pyc files when switching from one version and another within the same major release?</em></p>
<p><strong>Motivation for the question</strong></p>
<p>The reason that I needed to switch virtual environments is that I thought that my code runs fine with some versions of Python 3, but not others. I was getting a multitude of</p>
<pre><code>ImportError: No module named XYZ
</code></pre>
<p>errors.</p>
<p>But when I wipe out all pyc files and install one <a href="https://www.python.org/downloads/release/python-366/" rel="nofollow noreferrer">version</a> of Python or another, set up a virtual environment</p>
<pre><code>~/venv-362
~/venv-364
~/venv-366
~/venv-370
</code></pre>
<p>then all is well and the code runs fine.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>.pyc</code> machinery is designed to be completely transparent to the user. In particular, as per <a href="https://stackoverflow.com/questions/2263356/are-python-2-5-pyc-files-compatible-with-python-2-6-pyc-files">Are Python 2.5 .pyc files compatible with Python 2.6 .pyc files?</a>, a <code>.pyc</code> contains the Python version that was used to compile it.</p>
<p>So, though you can clean the old files so that you don't have obsolete data that won't be used anyway, they shouldn't affect execution is any way.</p>
<p>In particular, they shouldn't cause any import errors. <a href="https://stackoverflow.com/questions/38809686/keras-import-error-nadam">You must be having a problem with your import path instead</a>.</p>
<hr/>
<p>This doesn't mean you shouldn't <em>regenerate</em> them when updating -- as per <a href="https://stackoverflow.com/questions/22449524/python-bytecode-compatibility">python bytecode compatibility</a> , Python makes no guarantees about bytecode compatibility between releases, <a href="https://bugs.python.org/issue29514" rel="nofollow noreferrer">even micro releases</a>. Normally, they will be regenerated on demand, but if you don't have write access to the corresponding dir, you should do that during installation, or afterwards with e.g. <a href="https://docs.python.org/3/library/compileall.html" rel="nofollow noreferrer"><code>compileall</code></a>.</p>
</div>
<span class="comment-copy">Old <code>.pyc</code>s shouldn't cause "No module named XYZ". You should construct an MCVE on that problem and ask a separate question.</span>
<span class="comment-copy">So you <i>are</i> saying "no, you do not need to delete pyc files if you move, say, from 3.6.4 to 3.6.6"; is that right?</span>
<span class="comment-copy">Yes, I do. See update.</span>
