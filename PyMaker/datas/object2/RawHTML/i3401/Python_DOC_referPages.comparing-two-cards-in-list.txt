<div class="post-text" itemprop="text">
<p>I'm trying to write Russian Schnapsen (Thousand Schnapsen) but I'm stuck at comparing two cards on the table (table is list with only two cards). Here's not entire code, because entire is not necessery and I would have to translate all my variables from native language to english. </p>
<pre><code>import random

class Cards:    
    def __init__(self,rank,suit):
        self.rank = rank
        self.suit = suit

    def show(self):
        if self.rank == 10:
            rank = 'J'
        elif self.rank == 11:
            rank = 'Q'
        elif self.rank == 12:
            rank = 'K'
        elif self.rank == 13:
            rank = '10'
        elif self.rank == 14:
            rank = 'A'
        else:
            rank = self.rank
        print(rank,self.suit)

class Deck:
    def __init__(self):
        self.cards = []
        self.build()
        self.shuffle()

    def build(self):

        for suit in ['Spades', 'Clubs', 'Diamonds', 'Hearts']:
            for rank in range(9,15):
                self.cards.append(Cards(rank, suit))

    def shuffle(self):
        random.shuffle(self.cards)
</code></pre>
<p>And there is class <code>Game</code> with not working function check (list table is filled with two cards earlier)</p>
<pre><code>class Game:
    def __init__(self):
        self.table = []    

    def check(self):
        x = self.table[0]
        for card in self.table:
            if card &gt; x:
                # (rest of the code...)
</code></pre>
<p>The error I get is:</p>
<pre><code>TypeError: '&gt;' not supported between instances of 'Cards' and 'Cards'
</code></pre>
<p>My main and only question is how could I compare two cards in list (or maybe there is better solution than doing it in list) by their rank. </p>
</div>
<div class="post-text" itemprop="text">
<p>Python objects don't automatically support comparisons. <code>card &gt; x</code> requires that your <code>Card</code> class <em>at the very least</em> supports <em>greater than</em> comparisons.</p>
<p>You can bypass that by just comparing the attributes of the cards directly. As you state in your question, the test should see which card has the higher <em>rank</em>, so you can just use the <code>.rank</code> attribute here:</p>
<pre><code>if card.rank &gt; x.rank:
</code></pre>
<p>The <code>.rank</code> attribute is an integer value, and integers <em>do</em> support comparisons.</p>
<p>If <strong>all</strong> comparisons between cards should be done by rank (so the <em>suit</em> of a card is never considered in the rules of the game), then you could implement <a href="https://docs.python.org/3/reference/datamodel.html#object.__lt__" rel="nofollow noreferrer"><em>rich comparison methods</em></a>; these are called on the objects being compared (first the left object is tried, but the object on the right can also be consulted, see the linked documentation for details on that). For <code>&gt;</code> the <code>__gt__</code> method would be called on <code>card</code>, passing in <code>x</code>, and should return <code>True</code> or <code>False</code>; to compare ranks that can be as simple as:</p>
<pre><code>def __gt__(self, other):
    if not isinstance(other, Card):
        # not a card, can't say if this is greater than the other object
        return NotImplemented
    # This card is greater than the other if the rank of this card is greater
    # than the rank of the other
    return self.rank &gt; other.rank
</code></pre>
<p>If <code>&lt;</code> and <code>&gt;=</code> and <code>&lt;=</code> all should be based on the same attribute comparison, then you can keep things simple by implementing just one such rich comparison method and apply the  <a href="https://docs.python.org/3/library/functools.html#functools.total_ordering" rel="nofollow noreferrer"><code>@functools.total_ordering</code> class decorator</a> to your <code>Card</code> class. <strong>However</strong>, that decorator also requires that you implement a <a href="https://docs.python.org/3/reference/datamodel.html#object.__eq__" rel="nofollow noreferrer"><code>__eq__</code> equality test method</a>, which means that all <code>card1 == card2</code> equality tests would return <code>True</code> <em>just because their <code>rank</code> attribute is true</em>, so ignoring the suit of the card. You probably would need to implement all rich comparison methods separately if that should not be true.</p>
<p>From a quick reading of the <a href="https://en.wikipedia.org/wiki/Russian_Schnapsen" rel="nofollow noreferrer">Wikipedia article on Russian Schnapsen</a>, I can see that the suit of a card does have significance in this game:</p>
<blockquote>
<p><em>[...]</em> Russian Schnapsen features "marriages" (pairs of a King and Queen of the same suit) which are worth extra points.</p>
</blockquote>
<p>and</p>
<blockquote>
<p>In the beginning of every round there is no trump suit, all suits are equal. The player who has at least one trick taken and still has a marriage in his hand can declare a suit of the Marriage to be a trump suit by making a move with either King or Queen card from available marriage and declaring it out loud by saying that suit X (X corresponds to the marriage suit) becomes a trump, or saying number of scores he gets by declaring a marriage suit a trump. The suit that just became a trump stays a trump until a new suit becomes appointed to be trump or until game round ends.</p>
</blockquote>
<p>Because of this significance, I'd not implement rich comparison methods here but just use <code>card.rank</code> and <code>card.suit</code> attributes directly in your implementation.</p>
</div>
<div class="post-text" itemprop="text">
<p>Overwrite the <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer"><code>__gt__()</code></a> function for greater than comparison. See <a href="https://jcalderone.livejournal.com/32837.html" rel="nofollow noreferrer">this</a> for more info on overwriting comparison operators in Python. </p>
</div>
<span class="comment-copy">check <code>__compare__</code> function</span>
<span class="comment-copy">@atayenel: there is no such method in Python's datamodel.</span>
<span class="comment-copy">So what should <code>card &gt; x</code> return if both are cards? Are their ranks compared, their suits? You need to use those attributes instead, <i>or</i> implement the <a href="https://docs.python.org/3/reference/datamodel.html#object.__lt__" rel="nofollow noreferrer">rich comparison methods</a>, perhaps with the help of <a href="https://docs.python.org/3/library/functools.html#functools.total_ordering" rel="nofollow noreferrer"><code>functools.total_ordering()</code></a>.</span>
<span class="comment-copy">@MartijnPieters there is a <code>__cmp__</code> function but I see that it is not included in python3.</span>
<span class="comment-copy">@atayenel: That's Python 2 only, and you should really use rich comparison methods there too anyway.</span>
<span class="comment-copy">This would only apply if <i>all</i> such comparisons should use the same attributes. That's not always the case with card games.</span>
<span class="comment-copy">Not per se. You could simply use a condition for when to compare with one attribute and when to compare with another. Of course that wouldn't work if one comparison is by no way connected to the other one though. Then you have to either use the attributes outside the class, or create 2 functions that don't overwrite the basic operators. In this case you know you need the suit when the card is either a Queen or a King, so you can check for that first, and then compare by suits.</span>
<span class="comment-copy">Since the context for the <code>&gt;</code> operation is not available you’d have to resort to storing context for the comparison elsewhere. That makes for very ugly code indeed. And since this is a simple comparison between a known attribute of the two card objects, not worth the complexity and cognitive cost. And if the comparison was sufficiently complex it’d still be better to use proxy comparisor objects to handle the encapsulation (e.g. <code>one.by_rank &lt; two.by_rank</code> where the <code>by_rank</code> attribute is a proxy competitor object). That’s definitely out of scope for this question however.</span>
