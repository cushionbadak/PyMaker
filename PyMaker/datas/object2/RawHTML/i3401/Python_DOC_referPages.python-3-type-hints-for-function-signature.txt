<div class="post-text" itemprop="text">
<p>Is there a way to declare the signature of a function object with Python (3.5+) type hints? Specifically, is there a way to declare what type of function object a function can accept or a variable can reference. </p>
<p>I'm sure it could get quite messy (as it can with C++11 lambda types for example), but is there at least some way to check function types?</p>
<p>For example:</p>
<pre><code>def func1(x: int) -&gt; int:
    return x

def func2(x: int, y: int) -&gt; int:
    return x + y

# 'TwoArgFn' is a 'function type' that accepts two ints and returns an int
def takes_two(f: TwoArgFn) -&gt; int:
    return f(123, 456)
</code></pre>
<p>Passing <code>func1</code> as an argument to <code>takes_two</code> should be an error, whereas passing <code>func2</code> is fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>For that purpose, use the <code>typing.Callable</code> type (see <a href="https://docs.python.org/3/library/typing.html#callable" rel="nofollow noreferrer">here</a>):</p>
<pre><code>from typing import Callable

def takes_two(f: Callable[[int, int], int]) -&gt; int:
    return f(123, 456)
</code></pre>
<p>The first argument to <code>Callable</code> is a list of types for the arguments of the function, while the second argument is the return type.</p>
<p>Of course, python itself does not check types at all. For this, you should use additional tools such as <em>mypy</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Short answer: there is no built-in way to <em>enforce</em> type declaration and checking.</p>
<p>As the name suggests, these are type <em>hints</em>, which can help the programmer know what is passed as arguments and what is returned from functions (this can be specially useful when reading/reviewing large code files). However, as can be seen <a href="https://www.python.org/dev/peps/pep-0484/?utm_source=recordnotfound.com" rel="nofollow noreferrer">here</a> in this post from Guido, Jukka and Lukasz:</p>
<blockquote>
<p>It should also be emphasized that Python will remain a dynamically typed language, and the authors have no desire to ever make type hints mandatory, even by convention.</p>
</blockquote>
<p>So if you expect statically-typed arguments which would raise errors if passed objects do not have the required type, then you should not be using python in the first place.</p>
<p>However, you may have some options: e.g. IDEs, like pycharm or Atom, have plug-ins that will check types for you.</p>
<hr/>
<p><em>However, if your point is to just have a type hint for callable with no enforcing, error-raising or automatic checking, then check @dseuss' answer :)</em></p>
</div>
<div class="post-text" itemprop="text">
<p>You can tell the signature of a user defined function using function annotations. But actually it's just a meta information. It does not enforce any type checking rules. </p>
<p>You can use a separate line type checker in modern editors like pycharm etc. These type checker acts as powerfull linter.</p>
<p>Typically, Python will remain a dynamically typed language, and the authors have no desire to ever make type hints mandatory, even by convention. Refer- <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">type hints</a></p>
</div>
<span class="comment-copy">Thanks, good point. I should have clarified I was just after hinting for tools like mypy, not actual run-time type checking too. I've saved tens of hours of debugging already thanks to type hints however.</span>
