<div class="post-text" itemprop="text">
<p>In python I can use a template with </p>
<pre><code>from string import Template
templ = Template('hello ${name}')
print templ.substitute(name='world')
</code></pre>
<p>how can I define a default value in the template?
And call the template without any value.</p>
<pre><code>print templ.substitute()
</code></pre>

Edit

<p>And when I call without parameters get the default value, example</p>
<pre><code> print templ.substitute()
 &gt;&gt; hello name
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>Template.substitute</code> method takes a <a href="https://docs.python.org/3.4/library/string.html#string.Template.substitute" rel="nofollow noreferrer"><code>mapping</code> argument in addition to keyword arguments</a>. The keyword arguments override the arguments provided by the <code>mapping</code> positional argument, which makes <code>mapping</code> a natural way to implement defaults without needing to subclass:</p>
<pre><code>from string import Template
defaults = { "name": "default" }
templ = Template('hello ${name}')
print templ.substitute(defaults)               # prints hello default
print templ.substitute(defaults, name="world") # prints hello world
</code></pre>
<p>This will also work for <code>safe_substitute</code>:</p>
<pre><code>print templ.safe_substitute()                       # prints hello ${name}
print templ.safe_substitute(defaults)               # prints hello default
print templ.safe_substitute(defaults, name="world") # prints hello world
</code></pre>
<p>If you are absolutely insistent on passing no arguments to <code>substitute</code> you could subclass Template:</p>
<pre><code>class DefaultTemplate(Template):
    def __init__(self, template, default):
        self.default = default
        super(DefaultTemplate, self).__init__(template)

    def mapping(self, mapping):
        default_mapping = self.default.copy()
        default_mapping.update(mapping)
        return default_mapping

    def substitute(self, mapping=None, **kws):
        return super(DefaultTemplate, self).substitute(self.mapping(mapping or {}), **kws)

    def substitute(self, mapping=None, **kws):
        return super(DefaultTemplate, self).safe_substitute(self.mapping(mapping or {}), **kws)
</code></pre>
<p>And then use it like this:</p>
<pre><code>DefaultTemplate({ "name": "default" }).substitute()
</code></pre>
<p>Although I find this to be less explicit and less readable than just passing a <code>mapping</code> with defaults to <code>substitute</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create your proxy to Template class and store substitutes there.</p>
<pre><code>from string import Template
from copy import copy


class TemplateWithDefaults(Template):

    def __init__(self, template, **defaults):
        self.defaults = defaults or {}
        super(TemplateWithDefaults, self).__init__(template)

    def build_mapping(self, *args, **kwargs):
        mapping = copy(self.defaults)
        if len(args) == 1:
            mapping.update(args[0])
        mapping.update(kwargs)
        return mapping

    def substitute(*args, **kwargs):
        self, args = args[0], args[1:]
        mapping = self.build_mapping(*args, **kwargs)
        return super(TemplateWithDefaults, self).substitute(mapping, **kwargs)

    def safe_substitute(*args, **kwargs):
        self, args = args[0], args[1:]
        mapping = self.build_mapping(*args, **kwargs)
        return super(TemplateWithDefaults, self).safe_substitute(mapping, **kwargs)

template = TemplateWithDefaults("$wow", wow=1)

print template.substitute() # outputs 1
print template.substitute(wow=2) # outputs 2
print template.substitute({"wow": 2}) # outputs 2
print template.substitute() # outputs 1 (means no side effects)
</code></pre>
<p>UPD: edited code to handle dict as first argument. Original api compatibility.</p>
</div>
<div class="post-text" itemprop="text">
<p>If the default value is the variable name (like in the question), the missing data could be added automatically:</p>
<pre><code>class MyTemplate(Template):
    def substitute(self, *args, **kwds):
        try:
            return super().substitute(*args, **kwds)
        except KeyError as err:
            key = str(err.args[0])
            kwds[key] = key 
            return self.substitute(*args, **kwds)
</code></pre>
</div>
<span class="comment-copy">Sorry, i didnt understand the question at hand so i deleted my answer. I thought the question was related to creating default values for a class.</span>
<span class="comment-copy"><code>substitute</code> takes a mapping and kwargs, and the kwargs override the mapping ... which makes the mapping argument a natural way to pass defaults:  <code>defaults = { "foo": "bar" }; Template("hello ${foo}").substitute(defaults, foo="baz")</code></span>
<span class="comment-copy">@MatthewStory I think that's the best answer here. I would encourage you to write it up as such.</span>
<span class="comment-copy">@AdamSmith done.</span>
<span class="comment-copy">This isn't quite right. <code>substitute</code> takes a <code>mapping</code> <i>and</i> kwargs ... and the kwargs override the mapping. <code>Template("${foo}").substitute({ "foo": "bar" }, foo="baz")</code> &lt;- returns "baz". Based on how you're updating kwargs, your defaults will override a passed mapping. e.g. <code>template.substitute({ "wow": 2})</code> would output <code>1</code> not <code>2</code>. So really you want to do: <code>mapping = copy(self.defaults); mapping.update(args[0] if args or {}); super(...).substitute(mapping, **kwargs)</code></span>
<span class="comment-copy">It was really hard to match signatures of oldschool class, especially when self word is omitted. I don't see incompatibilities in that behaviour and seriously doubt that Template api will ever dramatically change. Seems good enough.</span>
<span class="comment-copy">The <code>self, args = args[0], args[1:]</code> is not really something you see in python. <code>def substitute(self, *args, **kwargs):</code> is far more common. Beyond that you know you only have 1 positional argument, so there's no need for variable args (which complicates <code>build_mapping</code>). I've read and know the actual implementation of <code>string.Template</code> uses a similar Idiom to the one you are using here, but I would offer them the same criticism to them.</span>
<span class="comment-copy">mapping is not a required arg, so your signature is wrong. Also replacing the variable name with the variable name was not the request of the OP.</span>
<span class="comment-copy">@MatthewStory It is documented that way, see <a href="https://docs.python.org/3/library/string.html#string.Template.substitute" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a>  However it appears the mappings optional indeed, I will edit my answer.</span>
<span class="comment-copy">@MatthewStory In the example added to the question, the default for <code>${name}</code> when <code>name</code> is not provided is <code>"name"</code>.</span>
