<div class="post-text" itemprop="text">
<p>I'm very confused with python's eval():</p>
<p>I tried <code>eval('"\x27"') == eval('"\\x27"')</code> and it evaluates to <code>True</code>. Can somebody explain why this is the case? Both expressions evaluate to <code>"'"</code>. I understand why <code>eval('"\x27"')</code> does (the string evaluated has a single character, which is an escaped hexadecimal representing an apostrophe), but shouldn't <code>eval('"\\x27"')</code> be equal to <code>"\\x27"</code>?</p>
<p>Secondly, adding to the confusion, if I set the following variables,</p>
<pre><code>s = "\x27"
t = "\\x27"
</code></pre>
<p>then <code>eval('s')</code> is again <code>"'"</code>, but <code>eval('t')</code> is <code>"\\x27"</code>. Why is that?</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the docs, <code>eval</code> "parses and evaluates the argument as a python expression". In other words, it's applying the same processing that is applied if you write <code>x = "foobar \n"</code> inside a program or the IDLE. In this example, <code>\n</code> gets turned into a newline-character (which, note, is not identical to the literal <code>\n</code>).</p>
<p>If you typed <code>x = "\x27"</code> into the IDLE, you'd get <code>x == "'"</code>. The <code>x27</code> is <em>escaped</em> because of the backslash and thus <em>changed</em> during <em>evaluation</em>. If you <em>escape the backslash</em>, then <code>x27</code> is <em>not</em> changed during evaluation. Instead, you simply get a string with a backslash followed by <code>x27</code>.</p>
<p>Now if you evaluated that string <em>again</em>, you only have one backslash left - seemingly escaping <code>x27</code>. Thus, it is changed to <code>'</code>. </p>
<p>Another way to look at this: <code>eval("\x27")</code> evaluates the argument <em>twice</em>, but it is only changed the first time, to <code>"'"</code>. <code>eval("\\x27")</code> also evaluates the argument twice, first to <code>\x27</code>, then to <code>"'"</code>. </p>
<hr/>
<p>Here's an easier example to demonstrate how this works: </p>
<pre><code>&gt;&gt;&gt; x = "\"foobar\""
&gt;&gt;&gt; x == "foobar"
False
&gt;&gt;&gt; x == "\"foobar\""
True
&gt;&gt;&gt; x = eval(x) # changes value of x from "foobar" to just foobar. Still string though, thus still ""
&gt;&gt;&gt; x == "foobar"
True
&gt;&gt;&gt; x == "\"foobar\""
False
</code></pre>
<p>Look at it like this: The right hand side of <code>y = "2"</code> contains two components: the information that <code>y</code> should be of type string, expressed using the two <code>"</code>, and the <em>value</em> of that string, expressed by the character <code>2</code>. The separation of these two aspects is done during <em>evaluation</em> of the code you write. The string object itself never sees the <code>"</code> during initialization.</p>
<p>So in the above example, after the first line, we have <code>x</code> of type <code>str</code> with value <code>"foobar"</code>. If you evaluate that <em>again</em>, the <code>"</code> are interpreted this time not as part of the <em>value</em> of <code>x</code> but as the <em>type</em> of <code>x</code>. So <code>eval("\"foobar\"")</code> basically transforms the <em>string</em> <code>"foobar"</code> to <code>foobar</code>, which, if you want to use that using the language Python, you have to write as <code>"\"foobar\""</code> and <code>"foobar"</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>For <code>'"\x27"'</code> the backslash escape is expanded during parsing, so this is literally
<code>'"\'"'</code>. <code>'"\\x27"'</code> only strips the backslash, i.e. it is equal to <code>r'"\x27"'</code>.</p>
<p>A direct <code>eval()</code> on the string literals adds another iteration of special character expansion: In the first case, <code>\'</code> is a <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">valid escape sequence</a> yielding <code>'</code>. The second case is the same as above. </p>
<p>When you use variable names, only one round of unescaping is performed when you assign the values. <code>eval('s')</code> simply expands to the value of <code>s</code> without further unescaping. If you want an emulation of the first case, you need to <code>eval(s)</code>, i.e. evaluate the value of the string referenced by <code>s</code>.</p>
</div>
<span class="comment-copy">Reason #5 to avoid using <code>eval</code>: Even simple string literals become hard to read.</span>
<span class="comment-copy"><code>eval('"\\\\x27"') equals "\\x27"</code> you need to double escape the backslash</span>
<span class="comment-copy">One turns into eval("'") and the other turns into eval("\x27").  Eval itself will do a level of unescaping, so they will be equal.</span>
<span class="comment-copy">What is <code>y</code> in the code above? Or it doesn't matter?</span>
<span class="comment-copy">Ups, sorry. Should be <code>x</code> too. Fixed.</span>
<span class="comment-copy">@titiree I've updated the answer with more explaination.</span>
<span class="comment-copy">When you say 'another way to look at this': <code>eval("\\x27")</code> will raise an error. Do you mean that <code>eval('"\\x27"')</code> first parses the string <code>"\\x27"</code>, then this gives <code>"\x27"</code> as a raw string and this is then evaluated?</span>
