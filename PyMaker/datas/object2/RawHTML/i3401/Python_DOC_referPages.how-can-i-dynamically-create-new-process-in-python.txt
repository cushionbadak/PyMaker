<div class="post-text" itemprop="text">
<p>This is my main function. If I receive new offer, I need to check the payment. I have HandleNewOffer() function on that. But the problem with this code happens if there are 2(or more) offers at the same time. One of the buyers will have to wait until the closing of the transaction. So is this possible to generate new process with HandleNewOffer() function and kill it when it`s done to make several transactions at the same time? Thank you in advance.  </p>
<pre><code>def handler():
    try:
        conn = k.call('GET', '/api/').json() #connect
        response = conn.call('GET', '/api/notifications/').json() 
        notifications = response['data']
        for notification in notifications:
            if notification['contact']:
                HandleNewOffer(notification) # need to dynamically start new process if notification

    except Exception as err:
        error= ('Error')
        Send(error)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd recommend to use the Pool of workers pattern here to limit the amount of concurrent calls to <code>HandleNewOffer</code>.</p>
<p>The <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer"><code>concurrent.futures</code></a> module offers ready-made implementations  of the above mentioned pattern.</p>
<pre><code>from concurrent.futures import ProcessPoolExecutor

def handler():
    with ProcessPoolExecutor() as pool:
        try:
            conn = k.call('GET', '/api/').json() #connect
            response = conn.call('GET', '/api/notifications/').json() 

            # collect notifications to process into a list
            notifications = [n for n in response['data'] if n['contact']]

            # send the list of notifications to the concurrent workers
            results = pool.map(HandleNewOffer, notifications)

            # iterate over the list of results from every HandleNewOffer call
            for result in results:
                print(result)
        except Exception as err:
            error= ('Error')
            Send(error)
</code></pre>
<p>This logic will handle as many offers in parallel as many CPU cores you computer has. </p>
</div>
<span class="comment-copy">probably you would like to use a <b>thread</b> not a process, or use asynchronous programming here</span>
