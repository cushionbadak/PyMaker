<div class="post-text" itemprop="text">
<p>I have been trying to read python files and print its variables for a while now. Is it possible to <em>view and print</em> the variables of another file without importing or running it? Everything I have already searched only explains how to import or use execfile, etc... (disclaimer, I am probably dumb)</p>
<p>This is what I have so far:</p>
<pre><code>for vars in dir():
   print(vars)
</code></pre>
<p>Now, this works perfectly fine for the file it is being run from, but when I try this code:</p>
<pre><code>for vars in file:
   print(vars)
</code></pre>
<p>(file is simply path.read())</p>
<p>Well, it gives me every character of the file on a new line. I have no idea if my loop is correct at all. Will I have to write something that will manually find each variable, then add it into a list?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>ast.parse</code> to parse the code, recursively traverse the nodes by iterating through those with a <code>body</code> attribute (which are code blocks), look for <code>Assign</code> objects and get their <code>targets</code> (which are the variables being assigned with values, which are what you're looking for) and get their <code>id</code> attribute if they are <code>Name</code> objects.</p>
<p>Try the following code after replacing <code>file.py</code> with the file name of the python script you want to parse.</p>
<pre><code>import ast
import _ast

def get_variables(node):
    variables = set()
    if hasattr(node, 'body'):
        for subnode in node.body:
            variables |= get_variables(subnode)
    elif isinstance(node, _ast.Assign):
        for name in node.targets:
            if isinstance(name, _ast.Name):
                variables.add(name.id)
    return variables

print(get_variables(ast.parse(open('file.py').read())))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No ... and yes.</p>
<p>The question is whether the "variables" are constants or true variables.</p>
<p>Python runs a garbage collector. It will create the variables when you run/import a module. These variables will have scope based on how they are used. Once they are no longer in use, the garbage collector will remove the objects from memory.</p>
<p>If the variable is assigned a fixed value (e.g. <code>i = 1</code>) then you can simply read the file in as if it is a text file - since it is a text file. If you want to change those variables, you can simply write it out as a text file. It will be incumbent on you to trace the variables in the text, exactly as with any text matching.</p>
<p>If the variables are generated as part of the code, then no (e.g. it generates a list of file in a directory and assigns to a variable). You would need to either import the module, or change the module so that it exports the outputs to a separate file - e.g. csv - and then you can read the data file.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all you are not dumb, its just not many people need to do this. 
Also, I cant think of a way without moving the variables to a septate json or pickle file then loading it in later in both programs using <code>json.load(filename)</code> or something like that. But that only works if it isn't being changed while the other program is assessing it. </p>
</div>
<span class="comment-copy">You can take some inspiration from Python source file parsers: <a href="https://stackoverflow.com/questions/768634/parse-a-py-file-read-the-ast-modify-it-then-write-back-the-modified-source-c" title="parse a py file read the ast modify it then write back the modified source c">stackoverflow.com/questions/768634/â€¦</a></span>
<span class="comment-copy">what do you mean by "variable"?</span>
<span class="comment-copy">please, provide an example of module you want to read "variables" from and desired output</span>
<span class="comment-copy">I mean something simple like variable = "hello"</span>
<span class="comment-copy">You could compile it and then disassemble it. See <a href="https://docs.python.org/3/library/py_compile.html#py_compile.compile" rel="nofollow noreferrer"><b><code>compile</code></b></a> and <a href="https://docs.python.org/3/library/dis.html" rel="nofollow noreferrer"><b><code>dis</code></b></a></span>
<span class="comment-copy">Thanks, it works great! The docs are really confusing. Can you explain a little more what this does?</span>
<span class="comment-copy">Glad to be of help. Yeah the docs of <code>ast</code> and <code>compile</code> aren't very thorough at all. I had to dump these node objects myself to learn their data structures. I think I've already explained my logic above the code though. Is there a specific part of the code that you can't see what it's doing? Basically the idea is, since you are only looking for variable assignments, I only look for <code>Assign</code> nodes within the code blocks, and put the assignment targets into a set as the returning value.</span>
<span class="comment-copy">Nothing very specific, just wanted clarification on what <code>node</code> does</span>
