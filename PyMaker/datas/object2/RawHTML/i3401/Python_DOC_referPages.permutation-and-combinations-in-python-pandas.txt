<div class="post-text" itemprop="text">
<p>I will like to find the most optimized way of doing search on Pandas DataFrame</p>
<p>For example</p>
<p>I will like to search for value </p>
<pre><code>aaa = 9 in the dataframe df
</code></pre>
<h2>df</h2>
<pre><code>  index Column  value
   1     aaa      1
   2     aaa      3
   3     aaa      5
   4     aaa     -3 
   5     aaa      3
   6     aaa      0
</code></pre>
<p>It should result in the following</p>
<pre><code>Answer: Combinations of Index locations (1,2,3), (1,2,3,4,5),(1,2,3,6),(1,2,3,4,5,6), (1,3,5), (1,3,5,6) 
</code></pre>
<p>as they all sum upto <strong>9</strong></p>
<p>I am avoiding to run permutation loop for n^n times for all combinations.
Any short cuts will be highly appreciated</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's the brute-force method using <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a>. You can optimize by using a generator and stop summing when values exceed a total of 9.</p>
<pre><code>from itertools import combinations

d = df.set_index('index')['value'].to_dict()

n = len(d)
res = [i for j in range(n) for i in combinations(d, j) if sum(map(d.get, i)) == 9]

print(res)

[(1, 2, 3), (1, 3, 5), (1, 2, 3, 6), (1, 3, 5, 6), (1, 2, 3, 4, 5)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adapted jpp's answer:  </p>
<pre><code>import pandas as pd
import itertools
df = pd.DataFrame([['aaa', 1],['aaa',3], ['aaa',5], ['aaa',-3], ['aaa', 3], ['aaa',0]], columns=['A', 'B'],index=[1,2,3,4,5,6])
res = [i for j in range(1,df.index.size+1) for i in itertools.combinations(df.index,j) if df.loc[i, 'B'].sum() == 9]
print res
[(1, 2, 3), (1, 3, 5), (1, 2, 3, 6), (1, 3, 5, 6), (1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6)]
</code></pre>
</div>
<span class="comment-copy">Potentially useful: <a href="https://en.wikipedia.org/wiki/Subset_sum_problem" rel="nofollow noreferrer">en.wikipedia.org/wiki/Subset_sum_problem</a>.</span>
<span class="comment-copy">Can you clarify your question? You want to find indices where the corresponding column is equal to <code>aaa</code> AND the sum of values is 9?</span>
<span class="comment-copy">Yes that is correct.</span>
<span class="comment-copy">Instead of <code>sum(df.loc[list(i)]['B'])</code>, would <code>df.loc[i, 'B'].sum()</code> not work? Chained indexing, built-ins with Pandas, list conversion when not necessary all expensive / ambiguous.</span>
<span class="comment-copy">Yes, it works, even more clear.</span>
<span class="comment-copy">Indeed, do feel free to <a href="https://stackoverflow.com/posts/51157164/edit">edit</a> your answer.</span>
