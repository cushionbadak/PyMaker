<div class="post-text" itemprop="text">
<p>What data structure is used to build a concatenation of lists of strings with different size? </p>
<p>E.g., </p>
<pre><code>a_list = ['h','i']
b_list = ['t','h','e','r','e']
c_list = ['fr', 'ie','nd']
</code></pre>
<p>desired structure: </p>
<pre><code>my_structure = [ ['h','i'],
                 ['t','h','e','r','e'],
                 ['fr', 'ie','nd']
               ]
</code></pre>
<p>and then fill it in with 'null' strings to get the same size in every list: </p>
<pre><code> my_structure = [    ['h','i','null','null','null'],
                     ['t','h','e','r','e'],
                     ['fr', 'ie','nd','null', 'null']
                   ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest</code></a>:</p>
<pre><code>import itertools

np.array(list(itertools.zip_longest(a_list, b_list, c_list, fillvalue='null'))).T

array([['h', 'i', 'null', 'null', 'null'],
      ['t', 'h', 'e', 'r', 'e'],
      ['fr', 'ie', 'nd', 'null', 'null']],
  dtype='&lt;U4')
</code></pre>
<p><strong>Edit</strong>: As per your comment that you want to add new lists to your array, it is probably more straightforward to create a list of the lists you want to use, and you can append to that list somewhat dynamically:</p>
<pre><code>a_list = ['h','i']
b_list = ['t','h','e','r','e']
c_list = ['fr', 'ie','nd']

my_list = [a_list, b_list, c_list]

my_arr = np.array(list(itertools.zip_longest(*my_list, fillvalue='null'))).T

&gt;&gt;&gt; my_arr
array([['h', 'i', 'null', 'null', 'null'],
       ['t', 'h', 'e', 'r', 'e'],
       ['fr', 'ie', 'nd', 'null', 'null']],
      dtype='&lt;U4')
</code></pre>
<p>Then you can add a new list to <code>my_list</code>:</p>
<pre><code>d_list = ['x']

my_list.append(d_list)

my_arr = np.array(list(itertools.zip_longest(*my_list, fillvalue='null'))).T

&gt;&gt;&gt; my_arr
array([['h', 'i', 'null', 'null', 'null'],
       ['t', 'h', 'e', 'r', 'e'],
       ['fr', 'ie', 'nd', 'null', 'null'],
       ['x', 'null', 'null', 'null', 'null']],
      dtype='&lt;U4')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's one way using a list comprehension. It involves calculating the maximum length of your lists as an initial step:</p>
<pre><code>L = (a_list, b_list, c_list)
maxlen = max(map(len, L))

res = [i+['null']*(maxlen-len(i)) for i in L]

print(res)

[['h', 'i', 'null', 'null', 'null'],
 ['t', 'h', 'e', 'r', 'e'],
 ['fr', 'ie', 'nd', 'null', 'null']]
</code></pre>
</div>
<span class="comment-copy">Do you want the string 'null', or do you want the null string?</span>
<span class="comment-copy">does not matter, a random string, it is just to get every list with the same length!</span>
<span class="comment-copy">I think that would work. I got a question: if a need to add a new list to that array (let's say list_d) to that already built structure. How could I do it?</span>
<span class="comment-copy">I think the most straightforward way would be to re-make your array: add <code>list_d</code> to your <code>zip_longest</code>. An alternative would be to pad <code>list_d</code> with <code>null</code> strings so that it is the same length as the longest element, and then use <code>np.vstack</code> or something like that, but it seems complicated, and wouldn't actually save you much performance.</span>
<span class="comment-copy">the thing is that I have to concatenate the lists on the go in a loop since the lists are stored in different files. So I cannot really (a_list, b_list, c_list,....zzz_list) do that, I will have to append it one by one.. @sacul</span>
<span class="comment-copy">See my edit, does that help?</span>
<span class="comment-copy">yes, thanks! @sacul</span>
