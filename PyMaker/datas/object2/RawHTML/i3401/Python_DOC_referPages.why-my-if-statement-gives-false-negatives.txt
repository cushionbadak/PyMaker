<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1207406/how-to-remove-items-from-a-list-while-iterating">How to remove items from a list while iterating?</a>
<span class="question-originals-answer-count">
                    23 answers
                </span>
</li>
</ul>
</div>
<p>I want to iterate over a list of files in Python 3. They are CSV files containing matrices. I want to do the same with all of them so I wanted to create a list with their names, remove all other files in the folder from the list and do my transformation with the relevants.</p>
<p>My target files all end with "2m.csv" (e.g.: 14-17_CCK_all_2m.csv) and my results at the end of the process will end with "1m.csv". Still when I run the following script in Jupyter notebook, the result contains some files ending with "1m.csv" (they remained there from an earlier cycle of the development)</p>
<pre><code>import os
myfiles = os.listdir()

for item in myfiles:
    if item[-6:] != "2m.csv":
        myfiles.remove(item)
</code></pre>
<p>Interestingly, if I test one of the false negatives in a separate lines, I get a True answer, so the if statement should have eliminated it from my list in the script above - which it did with some of them, but not with some others:</p>
<pre><code>myfiles[1][-6:] != "2m.csv"
&gt;&gt;&gt; True
</code></pre>
<p>All the files in question have very similar name structure. Thanks for your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem seems in your <code>for</code> loop. You are iterating through and modify <code>myfiles</code> at the same time.</p>
<p>The solution is to filter out wrong file names inline.</p>
<pre><code>import os
myfiles = [ item for item in os.listdir() if item[-6:] == "2m.cvs" ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To <code>filter</code> the list in Python, like you would want, don't use <code>for</code> loop to iterate over it. It's better to use <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a></p>
<p>So it would look like this:</p>
<pre><code>import os
myfiles = [f for f in os.listdir() if f[-6:] == "2m.csv"]
</code></pre>
<p>It's more clean, its usually faster on benchmarks, and it does the job you want it to do (and it's also a lot cleaner than <code>map/filter</code> - but that's my subjective opinion)</p>
</div>
<div class="post-text" itemprop="text">
<p>Better use list comprehensions:</p>
<pre><code>myfiles = [x for x in os.listdir() if x[-6:] == '2m.csv']
</code></pre>
<p>And I prefer to use <code>endswith()</code> method, not slices:</p>
<pre><code>myfiles = [x for x in os.listdir() if x.endswith('2m.csv')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>modifying a collection/list --  iterating it is always likely to produce this sort of discrepancy. If you add a <code>print</code> statement before your <code>if</code> statement, you'll probably see that <code>"2m.csv"</code> doesn't print. THe reason being that as you're removing from the list, the list is re-indexed, and the iteration effectively skips over the item.</p>
<p>The solution as given in the linked duplicate is to use list comprehension:</p>
<pre><code>myfiles = [item for item in myfiles if item[-6:] == "2m.csv"]
</code></pre>
<p>Alternatively, if you prefer to use a <code>for</code> loop, you need to iterate backwards, so that the removal of items (and subsequent re-indexing) doesn't affect the remaining items.</p>
<pre><code>for i in range(len(myfiles)-1,-1,-1):
    if myfiles[i][-6:] != "2m.csv":
        myfiles.remove(i)
</code></pre>
<p>But the list comprehension method would be more concise and more pythonic.</p>
</div>
<span class="comment-copy">Unsure this is the cause, but in other languages, modifying a list that you're iterating over is either disallowed or can produce inaccurate results. You could try copying the items to a second list, and iterate over one of them while modifying the other.</span>
<span class="comment-copy">Have you looked at the exact output of one of these false positives? Can you post a filename where the if check consistently behaves unexpectedly?</span>
<span class="comment-copy">modifying a collection/list --  iterating it is always likely to produce this sort of discrepancy. If you add a <code>print</code> statement before your <code>if</code> statement, you'll probably see that <code>"2m.csv"</code> doesn't print. THe reason being that as you're removing from the list, the list is re-indexed, and the iteration effectively skips over the item.</span>
<span class="comment-copy"><code>myfiles = [item for item in myfiles if item[-6:] == '2m.csv']</code> is what you need.</span>
<span class="comment-copy">the first command in your answer has a bug. Should be "==", otherwise it will be a collection of not 2m.csv files ;)</span>
