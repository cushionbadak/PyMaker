<div class="post-text" itemprop="text">
<p>I have some fairly hairy unicode strings with numbers in them that I'd like to test the value of.  Normally, I'd just use <code>str.isnumeric</code> to test for whether it could be converted via <code>int()</code> but I'm encountering cases where <code>isnumeric</code> returns <code>True</code> but <code>int()</code> raises an exception.</p>
<p>Here's an example program:</p>
<pre><code>&gt;&gt;&gt; s = '⒍'
&gt;&gt;&gt; s.isnumeric()
True
&gt;&gt;&gt; int(s)
Traceback (most recent call last):
   File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: '⒍' 
</code></pre>
<p>Unicode is always full of surprises, so I'm happy to just be robust to this case and use a try/except block to catch unusual numbers.  However, I'd be happier if I could still convert them to integers.  Is there a consistent way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to test if a string can be passed to <code>int</code>, use <code>str.isdecimal</code>. Both <code>str.isnumeric</code> and <code>str.isdigit</code> include decimal-like characters that aren't compatible with <code>int</code>.</p>
<p>And as @abarnert has mentioned in the comments, the most guaranteed way to test if a string can be passed to <code>int</code> is to simply do it in a <code>try</code> block.</p>
<p>On the other hand, '⒍' can be converted to an actual digit with the help of the <code>unicodedata</code> module, e.g.</p>
<pre><code>print(unicodedata.digit('⒍'))
</code></pre>
<p>would output <code>6</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know how much luck you'll have, but unicodedata may handle some cases (python 3 code):</p>
<pre><code>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.normalize('NFKC', '⒍')
'6.'
</code></pre>
<p>Slightly better. As to testing, if you want an int you could just int() it and catch the exception.</p>
</div>
<div class="post-text" itemprop="text">
<p>The best way to find out if a string can be converted to int is to just <code>try</code> it:</p>
<pre><code>s = '⒍'
try:
    num = int(s)
except ValueError:
    # handle it
</code></pre>
<p>Sure, you can try to figure out the right way to test the string in advance, but why? If the rule you want is "whatever <code>int</code> accepts", just use <code>int</code>.</p>
<hr/>
<p>If you want to convert something that is a digit, but isn't a decimal, use the <a href="https://docs.python.org/3/library/unicodedata.html#unicodedata.decimal" rel="nofollow noreferrer"><code>unicodedata</code></a> module:</p>
<pre><code>s = '⒍'
num = unicodedata.digit(s) # 6
num = unicodedata.numeric(s) # 6.0
num = unicodedata.decimal(s) # ValueError: not a decimal
</code></pre>
<p>The <a href="http://www.fileformat.info/info/unicode/char/248d/index.htm" rel="nofollow noreferrer"><code>DIGIT SIX FULL STOP</code></a> character's entry in the database has Digit and Numeric values, despite being a <code>Number, Other</code> rather than a <code>Number, Decimal Digit</code> (and therefore not being compatible with <code>int</code>).</p>
</div>
<span class="comment-copy">This helps a lot, but any idea how to convert <code>⒍</code> to a integer or even a float?</span>
<span class="comment-copy">Use <code>unicodedata</code>. <code>print(unicodedata.digit('⒍'))</code> outputs <code>6</code>.</span>
<span class="comment-copy">@blhsing You should add that comment to the answer. But also, the <i>best</i> way to test if a string can be passed to <code>int</code> is to just pass it to <code>int</code> in a <code>try:</code> block.</span>
<span class="comment-copy">@abarnert Indeed. I've edited the answer as suggested. Thanks.</span>
<span class="comment-copy">This works, because <code>⒍</code> (<code>DIGIT SIX FULL STOP</code>) decomposes into <code>6</code> (<code>DIGIT SIX</code>) and <code>.</code> (<code>FULL STOP</code>), which can somewhat coincidentally be interpreted as a <code>float</code>, but it's not a general solution for all numeric/digit characters that aren't decimals.</span>
