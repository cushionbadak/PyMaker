<div class="post-text" itemprop="text">
<p>Here is an example dictionary, <code>colors</code>:</p>
<pre><code>{
    "Red" : {
        "members" : {
            "153950039532134112" : {
                "rank" : 1,
                "score" : 43,
                "time" : 1530513303
            }
        },
        "rank" : 2,
        "score" : 43
    },
    "Blue" : {
        "members" : {
            "273493248051539968" : {
                "rank" : 1,
                "score" : 849,
                "time" : 1530514923
            },
            "277645262486011904" : {
                "rank" : 2,
                "score" : 312,
                "time" : 1530513964
            },
            "281784064714487810" : {
                "rank" : 3,
                "score" : 235,
                "time" : 1530514147
            }
        },
        "rank" : 1,
        "score" : 1396
    }
}
</code></pre>
<p>For the sake of this example, let's assume that there are many more color-named keys in this dictionary. Now, assume I am looking for a particular member ID.</p>
<pre><code>for key, value in colors.items():
    if member_id in value['members']:
        return True
</code></pre>
<p>Is there a simpler, possibly one-line way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is another one-liner that uses <a href="https://docs.python.org/2/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a> coupled with a 
<a href="https://medium.freecodecamp.org/python-list-comprehensions-vs-generator-expressions-cef70ccb49db" rel="nofollow noreferrer">generator expression</a>:</p>
<pre><code>return any(member_id in color['members'] for color in colors.values())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a one-line way of doing this:</p>
<pre><code>member_id="273493248051539968"

[k for k, v in colors.items() if member_id in v['members']]
</code></pre>
<p>Output:</p>
<pre><code>['Blue']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>next((k for k, v in colors.items() if member_id in v['members']), None)
</code></pre>
<p>Evaluates to the first color key with that <code>member_id</code>, like <code>'Blue'</code> (or <code>None</code> if not found).</p>
<p>Generator expressions are lazy, so it will stop searching as soon as it finds a match.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> which is just a concise way to do your for loop and conditional statement. </p>
<p>The list comprehension below will return a color value when the <code>member_id</code> is present. If you check that the returned list has at least one value, you know the <code>member_id</code> was present in at least one color dict. If you make two lines and assign the output you could also have the color dict handy, in case you need to modify or read any of its state.</p>
<p><code>any([color for color in colorDict if member_id in colorDict[color]['members']])</code></p>
<p>I would say this is more pythonic than the example in your question, but sometimes list comprehensions can be unclear when there is more complexity involved. For example, if you needed two loops and two conditions then a list comprehension may not be the best choice. Overall they're an extremely useful tool, but it's up to you to decide when to use them.</p>
</div>
<span class="comment-copy">are you expecting a single result? or a list of colors where the member_id is present?</span>
<span class="comment-copy">Then you don't need <code>colors[key]</code> because this is just <code>value</code> so it is equivalent to <code>if member_id in value['members']</code>. But this is a minor thing as indexing into a <code>dict</code> is an <code>O(1)</code> operation.</span>
<span class="comment-copy">@MichaelR Do not edit this post again. All of your edits have been rolled back by the author.</span>
<span class="comment-copy">@MichaelR that's no list comprehension, it's a generator expression. Stop adding incorrect information.</span>
<span class="comment-copy">@skrx TIL the difference between list comprehensions and generator expressions. <a href="https://medium.freecodecamp.org/python-list-comprehensions-vs-generator-expressions-cef70ccb49db" rel="nofollow noreferrer">This link</a> would be helpful in explaining the one-line iteration in the answer. I was not deliberately adding incorrect information. Given the amount of approvals, I thought it was a good edit.</span>
<span class="comment-copy">@MichaelR No offence taken mate, I rolled it back because it's just <i>not</i> a list comprehension. Edited my answer to include your link about generator expressions to make it more useful.</span>
<span class="comment-copy">@MichaelR Also I think you should undelete your answer as it demonstrated a slightly different method of doing it.</span>
<span class="comment-copy">This seems unnecessarily complicated as you know it is in the <code>['members']</code> of the <code>v</code>, so <code>[k for k, v in colors.items() if member_id in v['members']]</code> would do the same, assuming the OP is not simply looking for a <code>True</code> / <code>False</code> return.</span>
<span class="comment-copy">This will output a list of <i>all</i> of the keys containing that member_id. It's good if that's what you want, but that also means it has to search the whole dict and won't shortcut, unlike the long solution in the question, which is bad since <code>colors</code> is supposed to be a big dict, and the extra work is useless if member IDs only appear once each.</span>
<span class="comment-copy">This is a weird formulation that is not very pythonic at all. It is also no more efficient than <code>any</code> with a generator, which is an existing answer.</span>
<span class="comment-copy">@MatthewStory No it won't, try them. The <code>next</code> function takes an additional default argument, which suppresses the <code>StopIteration</code> behavior. And unlike <code>any</code> this can find the first key.</span>
<span class="comment-copy">Oh neat, I didn't know that about next's extra arg. Still very weird and no more efficient than <code>any</code> with a generator.</span>
<span class="comment-copy">I don't think this would work. Maybe you meant <code>... in colorDict[color]['members']</code>? Also your square brackets are not balanced.</span>
<span class="comment-copy">Thanks. You are correct. I've editted my answer.</span>
