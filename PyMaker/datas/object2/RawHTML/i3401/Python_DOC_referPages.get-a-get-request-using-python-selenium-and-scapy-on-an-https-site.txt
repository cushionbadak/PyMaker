<div class="post-text" itemprop="text">
<p>This is my first time around. I'm trying to create a tool to validate the implementation of a tagging solution in Python.</p>
<p>Right now I'm using Selenium + webdriver to interact with the web and scapy to sniff the traffic. On HTTP sites I'm able to see the information on the packet payload using this:</p>
<pre><code> str(bytes(packet[TCP].payload)))
Output:
b'GET /b/ss/xxdeprod/1/JS-2.2.0-D7QN/s5173447115256?AQB=1&amp;ndh=1&amp;pf=1&amp;t=2%2F6%2F2018%2011%3A14%3A41%201%20-120&amp;sdid=699ADD6A6B7CA749-5E0105ECF41B83A5&amp;D=D%3D&amp;mid=16848006205106756570809327525945601030&amp;aamlh=6&amp;ce=UTF-8&amp;ns=xx&amp;pageName=home.html&amp;g=http%3A%2F%2Fwww.xx.de%2F&amp;cc=EUR&amp;ch=home&amp;server=www.xx.de&amp;events=event61%2Cevent4%2Cevent89%3D3%2Cevent233&amp;products=Cars%3BPage%20not%20identified%20with%20any%20car%3B1%3B%3B%3BeVar73%3DPage%20not%20identified%20with%20any%20car%7CeVar56%3DSpecial&amp;aamb=RKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y&amp;h1=home&amp;v11=home.html&amp;v12=home&amp;c13=New&amp;c21=Page%20not%20identified%20with%20any%20car&amp;c22=Page%20not%20identified%20with%20any%20car&amp;c26=No%20informed&amp;v26=No%20informed&amp;c31=horitzontal&amp;v31=D%3Dv0&amp;c34=N%2FA%20or%20Landing%7CN%2FA%20or%20Landing%7CN%2FA%20or%20Landing&amp;v34=11%3A14%3A41%7CMonday%7C2%2F7%2F2018%7CWeekday&amp;c38=Entire%20Site&amp;c39=Direct&amp;c49=3&amp;c50=http%3A%2F%2Fwww.xx.de%2F&amp;v61=D%3Dmid&amp;v63=Direct&amp;s=1920x1080&amp;c=24&amp;j=1.6&amp;v=N&amp;k=Y&amp;bw=1920&amp;bh=925&amp;mcorgid=F050097853468AB40A490D4C%40AdobeOrg&amp;AQE=1 HTTP/1.1\r\nHost: xx.d3.sc.omtrdc.net\r\nConnection: keep-alive\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36\r\nDNT: 1\r\nAccept: image/webp,image/apng,image/*,*/*;q=0.8\r\nReferer: http://www.xx.xx/\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: es,en-US;q=0.9,en;q=0.8\r\n\r\n'
</code></pre>
<p>But on HTTPS sites all I see is bytes, eg:</p>
<pre><code>str(bytes(packet[TCP].payload)))
Output:
b'\x16\x03\x01\x02\x08\x01\x00\x02\x04\x03\x03%\xe5H\xcb\xe1:\x92\x8a%W\xe7\xc7\x9a\x8f\xa1\x19\x98&gt;\xa5m\xe0\xf7/\x9a\xfd\xad\xd2P(\xa4\x84V \x02\xa6\xf0\n\x8b\xa5\x03\x00C\x7fb\xd3\xac\xcf\xe7t\xa3\te\xb5\xc0\xb6\x15^\xf83|\x85\xc3&gt;\xcbg\x00"\x9a\x9a\x13\x01\x13\x02\x13\x03\xc0+\xc0/\xc0,\xc00\xcc\xa9\xcc\xa8\xc0\x13\xc0\x14\x00\x9c\x00\x9d\x00/\x005\x00\n\x01\x00\x01\x99ZZ\x00\x00\xff\x01\x00\x01\x00\x00\x00\x00\x1c\x00\x1a\x00\x00\x17endesa.d3.sc.omtrdc.net\x00\x17\x00\x00\x00#\x00\xd0ec1d1752-2540-4\x00\x06S\x14\x8a(\xd3\xeb\xab\xcc:\xac\xd0+\xa5\x86[N\x0e\x82\x89\xde\x05\xe4\x98\\/\x0e6\xfd\xc9m_b\x8b*\xdf\xdc\xaf\x83,\xd3\xc1\xf3\xa4@y-\xb9H\x9a\xa2\'7\xfc\x15\x9d4\xd7\xc3|\x15Te\x0bZ\x1c\xd2\x82\x05\xc1\xfc\xc8\xa8\xe5\xf0K\xe7\x91\x92*\xcd\x04\xacG\x97n\x8aT\xf0\xf8\x97gk\xee\x86aQ&amp;\t\xc5Sr\x8eg\x8c\xe3{\xaa\x84\xbe\x82\n\xbdG\xb8d=\xeeN\x94\x87 2\xc1(:0\xa3\xccU:\xec9\x11\xf9r\x87+\xed\xf0z!\xea\x17K`\x98\x1a:\xa6t.^l;^gE\x82\xef&amp;\xe6\xfe\x057\xae\x9ca\x0c&amp;h\xa8\xc7&lt;x\x87z\x80\x06\xea\x1cDw1\x9f6\xd5\xf0S\xeeM\xf9\x00\r\x00\x14\x00\x12\x04\x03\x08\x04\x04\x01\x05\x03\x08\x05\x05\x01\x08\x06\x06\x01\x02\x01\x00\x05\x00\x05\x01\x00\x00\x00\x00\x00\x12\x00\x00\x00\x10\x00\x0e\x00\x0c\x02h2\x08http/1.1uP\x00\x00\x00\x0b\x00\x02\x01\x00\x003\x00+\x00)jj\x00\x01\x00\x00\x1d\x00 f\x8a\x90\x8f0\x9d\xa0\xa4\x06\xb9\xba\x8a\x85&lt;\xff\xa8\xeab6Du\x0bf\x01\xde|hB\x9ct\x80&gt;\x00-\x00\x02\x01\x01\x00+\x00\x0b\n\x1a\x1a\x7f\x17\x03\x03\x03\x02\x03\x01\x00\n\x00\n\x00\x08jj\x00\x1d\x00\x17\x00\x18\xaa\xaa\x00\x01\x00'
</code></pre>
<p>I've tried the binascii library, with the method</p>
<p><a href="https://docs.python.org/3/library/binascii.html" rel="nofollow noreferrer"><code>binascii.b2a_uu(data)</code></a></p>
<p>But without a successfull result. Is there a way to decode this payload from HTTPS sites? maybe I'm going in the wrong direction? Is there a way to get this request without the encoding? What I'm trying to achive is to get the info the way it is shown in the developer tool in the browser.</p>
<p><img alt="Network URL Rquest" src="https://i.stack.imgur.com/7EOEq.jpg"/></p>
</div>
<div class="post-text" itemprop="text">
<p>You won’t be able to decode the https payload, due to its encryption, without having the private keys. That’s the whole point of HTTPS: making the content not seeable by others</p>
<p>Apart from that, if you want to see the HTTPS TLS exchange, you can import the tls module in scapy using
<code>load_layer("tls")</code></p>
<p>You can’t get any more data that that, as everything else is encrypted. If you have the server private keys (it’s your own server) then you will be able to decode its content using any RSA/ECDSA API, but otherwise you won’t.</p>
</div>
