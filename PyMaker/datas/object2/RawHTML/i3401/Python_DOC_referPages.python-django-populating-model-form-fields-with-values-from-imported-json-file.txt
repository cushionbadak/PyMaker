<div class="post-text" itemprop="text">
<p>I have a model form that saves all form field inputs to the backend database as one entry. I also have a JSON file that contains multiple JSON objects whose fields corresponds to the model form field. This JSON file is being uploaded via FileField in the model. Ultimately, I want to be able to upload a JSON file with the multiple JSON objects into my model form and populate the fields with the corresponding values from the uploaded JSON file. Each JSON object will be a single entry to my database and they can have null values for at least one field. Ideally, I would like to be able to choose which JSON object (from the uploaded JSON file) gets loaded to my model form fields to eventually be saved in my database. How would I go about implementing this? </p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the django rest framework. It will provide a post function and serializers.</p>
<p>You'll wind up with some stuff like this:</p>
<pre><code># the model
class Book(Model):
    title = TextField()
    author = TextField()

# the serializer
class BookSerializer(serializers.ModelSerializer):
    class Meta:
        model = Book
        fields = '__all__'

# the view
class BookView(generics.ListCreateApiView):
    queryset = Book.objects.all()
    serializer_class = BookSerializer
</code></pre>
<p>see the tutorial for more details:
<a href="http://www.django-rest-framework.org/tutorial/1-serialization/#tutorial-1-serialization" rel="nofollow noreferrer">http://www.django-rest-framework.org/tutorial/1-serialization/#tutorial-1-serialization</a></p>
<p>Then you can post your data to the database</p>
<pre><code>data = [{'title': 'Moby Dick', 'author': 'Herman Melville'},
    {'title': 'A Game of Thrones', 'author': 'George R. R. Martin'}]
for d in data:
    r = requests.post('django_api_url/book/', d)
    r.raise_for_status()
    # the new record is returned if successful
    print(r.json())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To unpack a JSON string into a Django model, you can use the Python Standard Library <code>json</code> package to convert it into a <code>dict</code> and then unpack it into the object as keyword arguments using <code>**</code>:</p>
<pre><code>&gt;&gt;&gt; from user.models import User
&gt;&gt;&gt; import json
&gt;&gt;&gt; some_json = '{"username": "cole","password": "testing123"}'
&gt;&gt;&gt; User(**json.loads(some_json))
&lt;User: cole&gt;
&gt;&gt;&gt; User(**json.loads(some_json)).username
'cole'
&gt;&gt;&gt; User(**json.loads(some_json)).password
'testing123'
</code></pre>
<p>By the way, there's a nice StackOverflow answer about <code>**</code> <a href="https://stackoverflow.com/a/36908/5971137">here</a>.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
