<div class="post-text" itemprop="text">
<p>tricky name and unclear name...</p>
<p>My issue is the following:</p>
<pre><code>import itertools

t0 = 0
tf = 1000000
# inputs_to_compute = list-like of size 2 to 6 of objects

results = [[] for i in range(len(inputs_to_compute))]

for subset in itertools.combinations(inputs_to_compute, 2):
    r1, r2 = compute(subset[0], subset[1], t0, tf)
    results[inputs_to_compute.index(subset[0])] += list(r1)
    results[inputs_to_compute.index(subset[1])] += list(r2)
</code></pre>
<p>This code is creating as many results lists as there is an input. Each input is actually associated to a list. Then the computation is performed 2 by 2 (on each subset) and the result is added to the corresponding list.</p>
<p>It works well as long as there is no repetition in the inputs because the method <code>index</code> returns the first occurrence of the element. How could I implement this differently (and efficiently, performance is one of the main issue I have) in a way that manage duplicates?</p>
<p><strong><em>Dummy example:</em></strong></p>
<pre><code>import itertools

def compute(x, y):
    return (x + y, x - y)

inputs_to_compute = [1, 1, 3]

results = [[] for i in range(len(inputs_to_compute))]

for subset in itertools.combinations(inputs_to_compute, 2):
    r1, r2 = compute(subset[0], subset[1])
    results[inputs_to_compute.index(subset[0])].append(r1)
    results[inputs_to_compute.index(subset[1])].append(r2)
</code></pre>
<p>Output:</p>
<pre><code>[[2, 0, 4, 4], [], [-2, -2]]
</code></pre>
<p>Expected output:</p>
<pre><code># Iteration (1, 1): r1 = 2, r2 = 0
results = [[2], [0], []]
# Iteration (1, 3): r1 = 4, r2 = -2
results = [[2, 4], [0], [-2]]
# Iteration (1, 3): r1 = 4, r2 = -2
results = [[2, 4], [0, 4], [-2, -2]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for subset_with_indices in itertools.combinations(enumerate(inputs_to_compute), 2):
    i1,x1 = subset_with_indices[0]
    i2,x2 = subset_with_indices[1]
    r1, r2 = compute(x1, x2)
    results[i1].append(r1)
    results[i2].append(r2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understood this correctly, then you want to cycle between the repeated <code>1</code>s every time they are returned as part of <code>subset</code>.</p>
<p>One way to do this is to create a dictionary with the item as key and its indices stored in a list. Once we have this dict we can apply <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a> to the list and then use <code>next()</code> to cycle between an items's indices:</p>
<pre><code>import itertools


def compute(x, y):
    return (x + y, x - y)

inputs_to_compute = [1, 1, 3]

indices = {}
for ind, item in enumerate(inputs_to_compute):
    indices.setdefault(item, []).append(ind)

for k, v in indices.items():
    indices[k] = itertools.cycle(v)

results = [[] for i in range(len(inputs_to_compute))]

for subset in itertools.combinations(inputs_to_compute, 2):
    r1, r2 = compute(subset[0], subset[1])
    results[next(indices[subset[0]])].append(r1)
    results[next(indices[subset[1]])].append(r2)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>&gt;&gt;&gt; %run so.py

&gt;&gt;&gt; results
[[2, 4], [0, 4], [-2, -2]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>in the docs you have a recipe for combinations that uses permutations[1]. you just modify it to return indices</p>
<pre><code>import itertools

def compute(x, y):
    return (x + y, x - y)

def combinations(iterable, r):
    pool = tuple(iterable)
    n = len(pool)
    for indices in itertools.permutations(range(n), r):
        if sorted(indices) == list(indices):
            yield tuple(indices)

inputs_to_compute = [1, 1, 3]

results = [[] for i in range(len(inputs_to_compute))]
for i1, i2 in combinations(inputs_to_compute, 2):
    r1, r2 = compute(inputs_to_compute[i1], inputs_to_compute[i2])
    results[i1].append(r1)
    results[i2].append(r2)

print(results)
</code></pre>
<p>[1] <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">https://docs.python.org/3/library/itertools.html#itertools.combinations</a></p>
</div>
<span class="comment-copy">Going to look into this one a bit more, the way cycly works intrigues me. Thanks.</span>
<span class="comment-copy">@Mathieu Note that the selected answer and this do different things, they just happen to have same output for the above input. You might wanna compare with something like <code>inputs_to_compute = [1, 1, 1, 3]</code> for example.</span>
<span class="comment-copy">Your answer is slightly more complicated. I've figure out something simple and working on the indices based on the accepted answer.</span>
<span class="comment-copy">And I will compare :)</span>
