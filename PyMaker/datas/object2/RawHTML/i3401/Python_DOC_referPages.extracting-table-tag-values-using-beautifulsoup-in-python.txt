<div class="post-text" itemprop="text">
<p>I'm trying to write a Python script to extract some tag values from within a table located on this page: <a href="https://azure.microsoft.com/en-us/pricing/details/virtual-machines/windows/" rel="nofollow noreferrer">https://azure.microsoft.com/en-us/pricing/details/virtual-machines/windows/</a> </p>
<p>I've included a screenshot of the HTML source code, however I can't figure out how to extract the price data for columns 6,7,8 and 9. Below is the code I've already written. </p>
<p><div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>import requests
import pandas as pd
from bs4 import BeautifulSoup

url = 'https://azure.microsoft.com/en-us/pricing/details/virtual-machines/windows/'

response = requests.get(url)

soup = BeautifulSoup(response.content, 'html.parser')

table1 = soup.find_all('table', class_= 'sd-table')

#writing the first few columns to text file

with open('examplefile.txt', 'w') as r:
    for row in table1.find_all('tr'):
        for cell in row.find_all('td'):
            r.write(cell.text.ljust(5))
        r.write('\n')</code></pre>
</div>
</div>
</p>
<p>I'm ultimately trying to extract out all of the values for each row and save it into a Pandas DataFrame, or a CSV. Thanks.
<a href="https://i.stack.imgur.com/6QbAI.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/6QbAI.jpg"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>The table values seem to be embedded in a JSON string that can be gotten with <a href="https://docs.python.org/3/library/json.html#json.loads" rel="nofollow noreferrer">json.loads</a>. Then we can get the value by indicating a <code>"regional"</code> key of country's region. </p>
<p>It's a bit more complicated but at least it gets the values that we put into a dataframe as follows:</p>
<pre><code>import requests
from bs4 import BeautifulSoup
import json
import pandas as pd
import os
import numpy as np

# force maximum dataframe column width
pd.set_option('display.max_colwidth', 0)

url = 'https://azure.microsoft.com/en-us/pricing/details/virtual-machines/windows/'

response = requests.get(url)
soup = BeautifulSoup(response.content, 'html.parser')
tables = soup.find_all('div', {'class': 'row row-size3 column'})

region = 'us-west-2' # Adjust your region here

def parse_table_as_dataframe(table):
    data = []
    header = []
    c5 = c6 = c7 = c8 = []

    rows = []
    columns = []

    name = table.h3.text

    try:
        # This part gets the first word in each column header so the table
        # fits reasonably in the display, adjust to your preference 
        header = [h.text.split()[0].strip() for h in table.thead.find_all('th')][1::]
    except AttributeError:
        return 'N/A'

    for row in table.tbody.find_all('tr'):
        for c in row.find_all('td')[1::]:
            if c.text.strip() not in (u'', u'$-') :
                if 'dash' in c.text.strip():
                    columns.append('-') # replace "&amp;dash; &amp;dash:" with a `-`
                else:
                    columns.append(c.text.strip())  
            else:
                try:
                    data_text = c.span['data-amount']
                    # data = json.loads(data_text)['regional']['asia-pacific-southeast']
                    data = json.loads(data_text)['regional'][region]
                    columns.append(data)
                except (KeyError, TypeError):
                    columns.append('N/A')



    num_rows = len(table.tbody.find_all('tr'))
    num_columns = len(header)

    # For debugging
    # print(len(columns), columns)
    # print(num_rows, num_columns)

    df = pd.DataFrame(np.array(columns).reshape(num_rows, num_columns), columns=header)
    return df

for n, table in enumerate(tables):
    print(n, table.h3.text)
    print(parse_table_as_dataframe(table))
</code></pre>
<p>gets 24 dataframes, one for each table from the page:</p>
<pre><code>0 B-series
  Instance Core        RAM Temporary    Pay      One    Three        3
0  B1S      1    1.00 GiB   2 GiB     0.017  0.01074  0.00838  0.00438
1  B2S      2    4.00 GiB   8 GiB     0.065  0.03483  0.02543  0.01743
2  B1MS     1    2.00 GiB   4 GiB     0.032  0.01747  0.01271  0.00871
3  B2MS     2    8.00 GiB   16 GiB    0.122  0.06165  0.04289  0.03489
4  B4MS     4    16.00 GiB  32 GiB    0.229  0.12331  0.08579  0.06979
5  B8MS     8    32.00 GiB  64 GiB    0.438  0.24661  0.17157  0.13957

...

...

23 H-series
  Instance Core         RAM  Temporary    Pay      One    Three        3
0  H8       8    56.00 GiB   1,000 GiB  1.129  0.90579  0.72101  0.35301
1  H16      16   112.00 GiB  2,000 GiB  2.258  1.81168  1.44205  0.70605
2  H8m      8    112.00 GiB  1,000 GiB  1.399  1.08866  0.84106  0.47306
3  H16m     16   224.00 GiB  2,000 GiB  2.799  2.17744  1.68212  0.94612
4  H16mr    16   224.00 GiB  2,000 GiB  3.012  2.32162  1.77675  1.04075
5  H16r     16   112.00 GiB  2,000 GiB  2.417  1.91933  1.51267  0.77667
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Pandas can likely handle this on its own with <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_html.html" rel="nofollow noreferrer">read_html</a>. You can then cleanup data types, etc. within the resulting frame. Returns an array of matches - here's the general idea:</p>
<pre><code>import pandas as pd

url = 'https://azure.microsoft.com/en-us/pricing/details/virtual-machines/windows/'

dfs = pd.read_html(url, attrs={'class':'sd-table'})

print dfs[0]
</code></pre>
<p>Hope that helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>soup = find_all ('table', {'class':'sd-table'})</p>
</div>
<span class="comment-copy">Thanks for your help!</span>
<span class="comment-copy">sorry about that error, i used the wrong print syntax, try again with the updated code</span>
<span class="comment-copy">oh i noticed you wanted 4 columns, but I only got 3 columns... i will need to fix that too!</span>
<span class="comment-copy">In my Jupyter notebook, the values aren't displayed as the table you posted above. On mine, it shows the three headings and then all of the values underneath, rather than as a table. any thoughts? Thanks a bunch for your help again!  Pay as you go One year reserved Three year reserved  and then all of the values underneath</span>
<span class="comment-copy">sorry, I am struggling to write the answer in python3 syntax, but i've only got python2. will update</span>
<span class="comment-copy">Hello, thanks for your help. I ran that code, and unfortunately all of the prices still show up blank...is there any way I can extract those values?</span>
