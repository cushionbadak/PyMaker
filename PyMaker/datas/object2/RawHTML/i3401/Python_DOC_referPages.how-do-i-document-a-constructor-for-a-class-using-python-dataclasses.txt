<div class="post-text" itemprop="text">
<p>I have some existing Python 3.6 code that I'd like to move to Python 3.7 dataclasses. I have <code>__init__</code> methods with nice docstring documentation, specifying the attributes the constructors take and their types.</p>
<p>However, if I change these classes to use the new Python dataclasses in 3.7, the constructor is implicit. How do I provide constructor documentation in this case? I like the idea of dataclasses, but not if I have to forego clear documentation to use them.</p>
<p><em>edited to clarify I'm using docstrings presently</em></p>
</div>
<div class="post-text" itemprop="text">
<p>The napoleon-style docstrings as they are described in <a href="https://www.sphinx-doc.org/en/1.6/ext/example_google.html" rel="nofollow noreferrer">the sphinx docs</a> (see the <code>ExampleError</code> class for their take on it) explicitly touch on your case:</p>
<blockquote>
<p>The __init__ method may be documented in either the class level docstring, or as a docstring on the __init__ method itself.</p>
</blockquote>
<p>Meaning you can just paste your constructor info into the body of the class docstring.</p>
<hr/>
<p>In case you build documents from your docstrings, these are the granularities that can be achieved:</p>
<p><strong>1) The bare minimum:</strong></p>
<pre><code>@dataclass
class TestClass:
    """This is a test class for dataclasses.

    This is the body of the docstring description.
    """
    var_int: int
    var_str: str
</code></pre>
<p><a href="https://i.stack.imgur.com/14K5s.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/14K5s.png"/></a></p>
<p><strong>2) Additional constructor parameter description:</strong></p>
<pre><code>@dataclass
class TestClass:
    """This is a test class for dataclasses.

    This is the body of the docstring description.

    Args:
        var_int (int): An integer.
        var_str (str): A string.

    """
    var_int: int
    var_str: str
</code></pre>
<p><a href="https://i.stack.imgur.com/Kq0CH.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/Kq0CH.png"/></a></p>
<p><strong>3) Additional attribute description:</strong></p>
<pre><code>@dataclass
class TestClass:
    """This is a test class for dataclasses.

    This is the body of the docstring description.

    Attributes:
        var_int (int): An integer.
        var_str (str): A string.

    """
    var_int: int
    var_str: str
</code></pre>
<p><a href="https://i.stack.imgur.com/CrUJ1.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/CrUJ1.png"/></a></p>
<hr/>
<p>Parameter and attribute descriptions can of course be combined as well, but since dataclasses should be straight forward mappings I don't see a reason to do so. </p>
<p>In my opinion, <strong>1)</strong> would do for small or simple dataclasses -- it already includes the constructor signature with their respective types, which is plenty for a dataclass. If you want to say more about each attribute, <strong>3)</strong> would serve best. </p>
</div>
<div class="post-text" itemprop="text">
<p>A major advantage of dataclasses is that they are self-documenting. Assuming the reader of your code knows how dataclasses work (and your attributes are appropriately named), the type-annotated class attributes should be excellent documentation of the constructor. See this example from the official <a href="https://docs.python.org/3/library/dataclasses.html" rel="nofollow noreferrer">dataclass docs</a>:</p>
<pre class="lang-py prettyprint-override"><code>@dataclass
class InventoryItem:
    '''Class for keeping track of an item in inventory.'''
    name: str
    unit_price: float
    quantity_on_hand: int = 0

    def total_cost(self) -&gt; float:
        return self.unit_price * self.quantity_on_hand
</code></pre>
<p>If you don't expect that readers of your code would know how dataclasses work then you might want to reconsider using them or adding an explanation or link to the docs in an inline comment after the <code>@dataclass</code> decorator. If you really need a docstring for a dataclass, I'd recommend putting the constructor docstring within the class docstring. For the example above:</p>
<pre class="lang-py prettyprint-override"><code>'''Class for keeping track of an item in inventory.

Constructor arguments:
:param name: name of the item
:param unit_price: price in USD per unit of the item
:param quantity_on_hand: number of units currently available
'''
</code></pre>
</div>
<span class="comment-copy">It seems dataclasses automatically generate a docstring for the class that include the type hints from the class definition, for example <code>'C(name: str, number: int)'</code>, but the docstring for the automatically generated <code>__init__</code> method is <code>None</code>.  So I suppose you could manually assign the <code>__init__</code> docstring after the class definition.  A bit clunky though.</span>
<span class="comment-copy">This autogenerated docstring doesn't show up if I already have a docstring on the class, which is fine, because a human-supplied docstring is (usually!) much better than an autogenerated one. Manually assigning the docstring is definitely clunky and something I'd like to avoid if possible, hence this question.</span>
<span class="comment-copy">True on both points.  Also, a manually assigned docstring will work for runtime tools like <code>help</code>, but perhaps not for documentation generators like Sphinx.</span>
<span class="comment-copy">This is delightfully in-depth, thank you! I especially appreciate the reference to the Sphinx docs that cover precisely this case.</span>
<span class="comment-copy">Glad it helps you =)</span>
<span class="comment-copy">Hmmm. This places a greater emphasis on the importance of naming your attributes if they're truly going to be self-documenting. Thank you for the suggestions!</span>
