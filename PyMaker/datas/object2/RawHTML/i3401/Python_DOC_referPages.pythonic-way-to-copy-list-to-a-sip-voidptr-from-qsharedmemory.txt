<div class="post-text" itemprop="text">
<p>I am using PyQT5 and the QSharedMemory class. I am creating a shared memory which can hold up 6 1-byte elements. To copy these elments in the shared memory array I am looping over the elments from the python list like the following snippet:</p>
<pre><code>f = shared_mem.data()
k = f.asarray()
memtocopy = [0,1,2,3,4,5]
for i in range(0,len(memtocopy)):
    k[i]  = memtocopy[i]
shared_mem.unlock()
</code></pre>
<p>Which seems very unpythonic and boilerplate-code like. I am wondering if there is a more suitable way of achieving the same result?</p>
<p>When using</p>
<pre><code>k[:] = memtocopy
</code></pre>
<p>or:</p>
<pre><code>k[:] = np.asarray(memtocopy,np.uint8)
</code></pre>
<p>It will fail with the error message:</p>
<pre><code>TypeError: can only assign another array of unsigned char to the slice
</code></pre>
<p>The whole test code for reproducing looks like the following:</p>
<pre><code>from PyQt5 import QtCore 

# Create shared memory and attach it
shared_mem = QtCore.QSharedMemory()
shared_mem.setNativeKey("test")
shared_mem.create(4*6)
shared_mem.attach()


# Fill in 
shared_mem.lock()
f = shared_mem.data()
k = f.asarray()

memtocopy = [0,1,2,3,4,5]

# Loop in question
for i in range(0,len(memtocopy)):
    k[i]  = memtocopy[i]

shared_mem.unlock()



# Read out
shared_mem.lock()
f1 = shared_mem.data()
k1 = f1.asarray()
shared_mem.unlock()

# Test results
if k1[0] == memtocopy[0]:
    print("success!")
else:
    print("fail!")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a simpler approach using <a href="https://docs.python.org/3/library/struct.html#module-struct" rel="nofollow noreferrer">struct</a> and <a href="https://docs.python.org/3/library/stdtypes.html#memoryview" rel="nofollow noreferrer">memoryview</a> that reads and writes the data with a couple of one-liners
:</p>
<pre><code>import struct
from PyQt5 import QtCore

shared_mem = QtCore.QSharedMemory()
shared_mem.setNativeKey("test")
shared_mem.create(4*6)
shared_mem.attach()

memtocopy = [0,1,2,3,4,5]

try:

    # Fill in 
    shared_mem.lock()
    shared_mem.data()[:] = memoryview(struct.pack('=6i', *memtocopy))
    shared_mem.unlock()

    # Read out
    shared_mem.lock()
    # python3
    k = memoryview(shared_mem.data()).cast('i')
    # python2
    # k = struct.unpack('=6i', memoryview(shared_mem.data()))
    shared_mem.unlock()

    if k[3] == memtocopy[3]:
        print("success!")
    else:
        print("fail!")

finally:

    shared_mem.detach()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After a bit of fiddling about, I managed to produce one combination that functioned for me:</p>
<pre><code>a = array.array('i', range(6))
f[:] = buffer(a)
b = array.array('i')
b.fromstring(buffer(f))
</code></pre>
<p>This relies on the buffer protocol for reading both ways. It is likely you can use the array directly with your <code>k</code>, and <code>fromstring</code> has been renamed to <code>frombytes</code> in later versions. </p>
<p>In Python 3.4, this worked:</p>
<pre><code>a = array.array('i', range(6))
f[:] = memoryview(a).cast('B')
b = array.array('i')
b.frombytes(memoryview(f))
</code></pre>
<p><a href="https://docs.python.org/3/library/stdtypes.html#memoryview" rel="nofollow noreferrer"><code>memoryview</code></a> replaced <code>buffer</code>, but knew the elements were 4 bytes large, so it required an additional cast. </p>
</div>
<span class="comment-copy">Why not <code>k[:] = memtocopy</code>?</span>
<span class="comment-copy">This will result in TypeError: can only assign another array of unsigned char to the slice, I have edited the question to show this case, too</span>
<span class="comment-copy">Then it might be a matter of figuring out what array type it wants. I'd guess <code>ctypes</code>, but perhaps it supports the buffer protocol. <a href="http://pyqt.sourceforge.net/Docs/PyQt5/api/QtCore/qsharedmemory.html#PyQt5-QtCore-QSharedMemory" rel="nofollow noreferrer">PyQt's documentation</a> was no help.</span>
<span class="comment-copy"><a href="http://pyqt.sourceforge.net/Docs/sip4/python_api.html#sip.voidptr.asarray" rel="nofollow noreferrer"><code>sip.voidptr.asarray</code></a> is new from version 4.16.5, which explains why I didn't have it in Debian Jessie. So the array type is <a href="http://pyqt.sourceforge.net/Docs/sip4/python_api.html#sip.array" rel="nofollow noreferrer"><code>sip.array</code></a>, which again happens to be documented only as far as existing.</span>
<span class="comment-copy">sip <a href="http://pyqt.sourceforge.net/Docs/sip4/using.html#support-for-python-s-buffer-interface" rel="nofollow noreferrer">should support the buffer protocol</a>, so using a Python <code>array.array</code> or <code>bytearray</code> should really work. Lists of ints won't.</span>
<span class="comment-copy">I am assumg '=6i' is for copying 6 integers?</span>
<span class="comment-copy">@Kev1n91. Yes - the format is explained <a href="https://docs.python.org/3/library/struct.html#struct-format-strings" rel="nofollow noreferrer">here</a>. The <code>=</code> should ensure the memoryview cast works the same way on all platforms. Of course, if you're only targeting one platform, you can just use <code>6i</code>.</span>
<span class="comment-copy">I am getting the error "memorieveiw" object has no attribute cast</span>
<span class="comment-copy">@Kev1n91. That's because you've changed to python2. Obviously my answer uses python3, because that is what your original question uses. Anyway, I've added a python2 one-liner to my answer.</span>
<span class="comment-copy">I haven't noticed that, I am on a docker container which is not handled by me. Sorry about that mess up</span>
<span class="comment-copy">This won't work in python3 (which the OP seems to be using), because there is no <code>buffer</code> function (and you cannot simply replace it with <code>memoryview</code>).</span>
<span class="comment-copy">I almost could - one cast was required.</span>
<span class="comment-copy">what would happen if one uses integersr? frombytes wouldn't be usable at this point ?</span>
<span class="comment-copy">This does use integers (<code>'i'</code> type in array). <code>frombytes</code> simply tells it to load from memory.</span>
