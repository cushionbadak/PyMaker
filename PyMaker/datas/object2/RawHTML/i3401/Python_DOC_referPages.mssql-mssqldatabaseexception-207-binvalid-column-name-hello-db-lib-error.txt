<div class="post-text" itemprop="text">
<p>I want to insert the data of notepad into the database,but there is an error:</p>
<blockquote>
<p>Traceback (most recent call last):   File "src\pymssql.pyx", line 448,
  in pymssql.Cursor.execute   File "src_mssql.pyx", line 1061, in
  _mssql.MSSQLConnection.execute_query   File "src_mssql.pyx", line 1092, in _mssql.MSSQLConnection.execute_query   File "src_mssql.pyx",
  line 1225, in _mssql.MSSQLConnection.format_and_run_query   File
  "src_mssql.pyx", line 1636, in _mssql.check_cancel_and_raise   File
  "src_mssql.pyx", line 1680, in
  _mssql.maybe_raise_MSSQLDatabaseException
  _mssql.MSSQLDatabaseException: (207, b"Invalid column name 'Hello'.DB-Lib error message 20018, severity 16:\nGeneral SQL Server
  error: Check messages from the SQL Server\n"</p>
</blockquote>
<p>My python code:</p>
<pre><code># -*- coding: UTF-8 -*-
import pandas as pd
import pymssql
def insert_report_pn_dictionary(server, user, password, database):
    pn_df = pd.read_csv(r'D:/20180605_dict.txt', \
                        sep=':',
                        encoding='utf-8',
                        names=('Word', 'Reading', 'POS', 'PN')
                        )
    word_list = list(pn_df['Word'])
    pn_list = list(pn_df['PN'])
    pn_dict = dict(zip(word_list, pn_list))
    dict_list = []
    for key,value in  pn_dict.items():
        dict_list.append([key,value])
    try:
        conn = pymssql.connect(server, user, password, database)
        cur = conn.cursor()
        for item in dict_list:
            sql = ' insert into report_pn_dictionary (dict_keyword, dict_pn) ' \
                  ' values(%s, %s) ' % (item[0], item[1])
            cur.execute(sql)
            conn.commit()
    except pymssql.Error as ex:
        raise ex
    except Exception as ex:
        raise ex
    finally:
        conn.close()

if __name__=="__main__":
    server = '10.10.2.20'
    user = 'test'
    password = 'test'
    database = 'DBAL'
    insert_report_pn_dictionary(server, user, password, database)
</code></pre>
<p>The contents of a 20180605_dict.txt：</p>
<blockquote>
<p>Hello:a1:a1:0.999979</p>
<p>Big:a2:a2:0.999645</p>
<p>Apple:a3:a3:0.999486</p>
</blockquote>
<p>The structure of the table report_pn_dictionary：</p>
<pre><code>CREATE TABLE [dbo].[report_pn_dictionary](
    [dict_keyword] [nvarchar](50) NOT NULL,
    [dict_pn] [decimal](18, 10) NULL,
    [registered] [datetime] NULL,
    [modified] [datetime] NULL
)
</code></pre>
<p>Where is wrong?How to fix it?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>I do not know where is wrong,but now I use "executemany",then there's no error.</strong></p>
<p>Modified code：</p>
<pre><code># -*- coding: UTF-8 -*-
import pandas as pd
import pymssql

def insert_report_pn_dictionary(server, user, password, database):
    pn_df = pd.read_csv(r'D:/20180605_dict.txt', \
                        sep=':',
                        encoding='utf-8',
                        names=('Word', 'Reading', 'POS', 'PN')
                        )
    word_list = list(pn_df['Word'])
    pn_list = list(pn_df['PN'])
    pn_dict = dict(zip(word_list, pn_list))
    dict_list = []
    for key,value in  pn_dict.items():
        dict_list.append((key,value))
    try:
        conn = pymssql.connect(server, user, password, database)
        cur = conn.cursor()
        sql = ' insert into report_pn_dictionary (dict_keyword,dict_pn) ' \
              ' values(%s, %s) '
        cur.executemany(sql, dict_list)
        conn.commit()
    except pymssql.Error as ex:
        raise ex
    except Exception as ex:
        raise ex
    finally:
        conn.close()


if __name__=="__main__":
    server = '10.10.2.20'
    user = 'test'
    password = 'test'
    database = 'DBAL'
    insert_report_pn_dictionary(server, user, password, database)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You were converting the CSV data table in an odd way. The most important bug being the SQL query quotations around values (hence the 'Hello' is an invalid column error). I re-coded the snippet so you could see each change, comment, and update; I hope I helped. Good luck!</p>
<p>I simplified converting data with <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> to combine two instances of <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer"><code>List</code></a> (of same length) created from <code>csv_data</code> column and row.</p>
<p>Coded in <code>Python 3.6.4</code></p>
<h3>Fixed Query Output</h3>
<pre><code>    INSERT INTO report_pn_dictionary (dict_keyword, dict_pn)  
        VALUES("Hello", "0.9999790000000001") 
</code></pre>
<h3>SQL Insert w/ CSV DataTable</h3>
<pre><code>import pandas as pd
import pymysql as sql  # using my sql module of choice


def insert_report(file: str, server: str, user: str, password: str, database: str):
    csv_data = pd.read_csv(
            filepath_or_buffer = file,  # changed to filepath_or_buffer
            sep = ':',
            encoding = 'utf-8',
            names = ('Word', 'Reading', 'POS', 'PN')
    )

    # convert columns to 2D array w/ zip &amp; list
    # format [ ["Hello", "0.999979"], ["Another Value", "0.33431"] ]
    values = zip(
            list(csv_data['Word']),
            list(csv_data['PN'])
    )

    try:
        conn = sql.connect(server, user, password, database)
        cur = conn.cursor()
        # for loop to get values (zero based)
        for entry in values:
            query = 'INSERT INTO report_pn_dictionary (dict_keyword, dict_pn)' + \
                    ' VALUES("%s", "%s") ' % (entry[0], entry[1])  # added quotes around %s placeholders
            # execute query
            cur.execute(query)
            # push (commit) changes as if using the batch command 'GO'
            conn.commit()
    except sql.Error as ex:  # Bad &gt;:[
        raise ex
    except Exception as ex:  # Bad. &gt;:[
        raise ex
    finally:  # Meh. :l
        conn.close()


if __name__ == "__main__":
    insert_report(
            file = r'C:\test.csv',
            server = '127.0.0.1',
            user = 'test',
            password = 'test',
            database = 'DBAL'
    )
</code></pre>
</div>
<span class="comment-copy">If it works, it works, but there are neater and more compact methods of converting the csv data, data tables, and lists. Also! With the <code>executemany()</code> method, it is <b>not</b> possible to specify multiple statements to execute in the operation argument.</span>
