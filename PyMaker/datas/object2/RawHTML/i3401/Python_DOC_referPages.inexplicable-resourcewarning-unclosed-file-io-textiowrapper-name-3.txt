<div class="post-text" itemprop="text">
<p>I am finalising moving my code from python2.7 to python3.5 and turned on <code>warnings</code> to check another module.<br/>
When using <code>os.popen()</code> I am getting the following error.</p>
<pre><code>ResourceWarning: unclosed file &lt;_io.TextIOWrapper name=3 encoding='UTF-8'&gt;
</code></pre>
<p>The number in the above example "name=3" will change, depending on the code but it is always a integer.<br/>
This code snippet produces the error and yet no file has been opened, which is in complete conflict with the error message <code>unclosed file</code>.<br/>
My environment is Linux using python 3.5.2</p>
<pre><code>#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
import warnings
import os
warnings.simplefilter('default')
sink_list = os.popen('pacmd list-sinks | grep "name:" | cut --delimiter=: -f2').readlines()
print (sink_list)
sink = os.popen('pacmd list | grep "Default sink name" | cut --delimiter=: -f2').readline()
print(sink)
</code></pre>
<p>Results in the following:    </p>
<pre><code>test.py:6: ResourceWarning: unclosed file &lt;_io.TextIOWrapper name=3 encoding='UTF-8'&gt;
  sink_list = os.popen('pacmd list-sinks | grep "name:" | cut --delimiter=: -f2').readlines()
[' &lt;alsa_output.pci-0000_00_1b.0.analog-stereo&gt;\n', ' &lt;fs2-Equaliser&gt;\n', ' &lt;fs2-bs2b&gt;\n']
test.py:8: ResourceWarning: unclosed file &lt;_io.TextIOWrapper name=3 encoding='UTF-8'&gt;
  sink = os.popen('pacmd list | grep "Default sink name" | cut --delimiter=: -f2').readline()
 fs2-Equaliser
</code></pre>
<p>Does anyone know why this warning is issued, especially in this circumstance, where no file has been opened?</p>
</div>
<div class="post-text" itemprop="text">
<p>The integer is a <em>file descriptor</em>, the integer number the OS uses to talk about file handles assigned to a process. <code>0</code>, <code>1</code> and <code>2</code> are <code>stdin</code>, <code>stdout</code> and <code>stderr</code>, 3 and up are further file descriptors used.</p>
<p>You get the resource warning because you open the file handle, but never close it explicitly. You instead just call <code>.readlines()</code> or <code>.readline()</code> on the Python file object wrapper:</p>
<pre><code>sink_list = os.popen('pacmd list-sinks | grep "name:" | cut --delimiter=: -f2').readlines()
</code></pre>
<p>This leaves the file object to be closed by the garbage collector, and you get the warning. You can use the open object as a context manager to have it closed for you:</p>
<pre><code> with os.popen('pacmd list-sinks | grep "name:" | cut --delimiter=: -f2') as list_sinks:
    sink_list = list_sinks.readlines()
</code></pre>
<p>Personally, I'd use the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code> module</a> to handle external processes, and use Python to do the line selection. This lets you avoid spinning up a separate <code>sh</code> process and generally has much nicer exception handling:</p>
<pre><code>import subprocess

# read list of sinks
result = suprocess.run(['pacmd', 'list-sinks'], stdout=subprocess.STDOUT, encoding='UTF-8')
sink_list = [l.split(':', 2) for l in result.stdout if 'name:' in l]

# read default sink
result = suprocess.run(['pacmd', 'list'], stdout=subprocess.STDOUT, encoding='UTF-8')
default_sink = next((l.split(':', 2) for l in result.stdout if 'Default sink name' in l), None)
</code></pre>
</div>
<span class="comment-copy">Brilliant, it was staring me in the face! Regards.</span>
