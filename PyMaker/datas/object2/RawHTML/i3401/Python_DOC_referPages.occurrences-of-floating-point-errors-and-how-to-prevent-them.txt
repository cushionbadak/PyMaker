<div class="post-text" itemprop="text">
<p>I have this program which calculates the total for all the values entered by the user:</p>
<pre><code>result = 0
for i in range(3):
    n = float(input("Enter a value: "))
    result = result + n
print(result)
</code></pre>
<p>If I entered in the values, 1.2, 1.3, 1.3, the output will be correct and print a result of 3.8. However, it seems when I enter in three floating point values which are all the same, I will get a floating point error. For example, 1.2, 1.2, 1.2 will print out 3.5999999999999996. </p>
<p>Why does this seem to happen? Is there a way that I can prevent it? </p>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't work because <code>float</code> does a lot more decimal numbers, for more information check this: <a href="https://stackoverflow.com/questions/588004/is-floating-point-math-broken">link</a>, so you should do the below:</p>
<pre><code>result = 0
for i in range(3):
    n = float(input("Enter a value: "))
    result = result + n
print('{0:.1f}'.format(result))
</code></pre>
<p>Output:</p>
<pre><code>Enter a value: 1.2
Enter a value: 1.2
Enter a value: 1.2
3.6
</code></pre>
<p>Or:</p>
<pre><code>result = 0
for i in range(3):
    n = float(input("Enter a value: "))
    result = result + n
print('%.1f'%result)
</code></pre>
<p>Output:</p>
<pre><code>Enter a value: 1.1
Enter a value: 1.1
Enter a value: 1.1
3.3
</code></pre>
<h1><code>decimal</code> module:</h1>
<p>Try this:</p>
<pre><code>from decimal import Decimal
result = 0
for i in range(3):
    n = Decimal(input("Enter a value: "))
    result = result + n
print(result)
</code></pre>
<p>Output:</p>
<pre><code>Enter a value: 2.1
Enter a value: 2.1
Enter a value: 2.1
6.3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That happens because the floating point numbers does not have an exact representation, for more information check <a href="https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="nofollow noreferrer">this</a>.</p>
<p>If precision is critical for you, you can use python <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>decimal</code></a>.</p>
</div>
<span class="comment-copy">Basically, if you need precise arithmetic don't use <code>float</code>s.  Instead, use something like the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>decimal</code></a> module.</span>
<span class="comment-copy">@PatrickHaugh: <code>decimal</code> isn't exact either, though. Mostly, it's just decimal, so its imprecision lines up better with human intuition. (It also offers configurable precision and a bunch of other advanced options, but none of them make the problem of rounding go away.)</span>
<span class="comment-copy">The term <i>floating point error</i> usually means an exception like divide by zero or arccosine of too large a number.  What you are describing is not that sort of error, but an unexpected result which comes from misunderstanding what a float is.  The fundamental issue is that <code>0.1</code> cannot be exactly expressed in a <code>float</code> or <code>double</code> just like <code>1/3</code> cannot be exactly expressed with decimal notation.</span>
