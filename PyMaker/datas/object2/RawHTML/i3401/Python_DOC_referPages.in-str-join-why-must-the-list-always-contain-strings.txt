<div class="post-text" itemprop="text">
<pre><code>l=[8,2,3,0,7]
def _sum(given_list) :
   s="+".join(given_list)
   return s
print(_sum(l))
</code></pre>
<p>This produces an error </p>
</div>
<div class="post-text" itemprop="text">
<p>read the docs: <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">str.join</a></p>
<blockquote>
<p>Return a string which is the concatenation of the strings in iterable. A <strong>TypeError</strong> will be raised <strong>if there are any non-string values</strong> in iterable, including bytes objects. The separator between elements is the string providing this method.</p>
</blockquote>
<p>And read the good comment from @UltraInstinct <a href="https://stackoverflow.com/questions/51167254/in-str-join-why-must-the-list-always-contain-strings/51167332#comment89317694_51167254">need <code>__str__</code></a></p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>str.join</code> method joins a list of strings, and you're passing to it a list of integers.</p>
<p>You should convert them to a list of strings before passing them to <code>str.join</code>.</p>
<pre><code>l=[8,2,3,0,7]
def _sum(given_list) :
   s="+".join(map(str, given_list))
   return s
print(_sum(l))
</code></pre>
<p>This outputs:</p>
<pre><code>8+2+3+0+7
</code></pre>
</div>
<span class="comment-copy">Because if that is the case, why would you want to stop there? You could extend it to objects of any type. You could perhaps argue that the API should invoke <code>__str__</code>, on every element. But then explicit is better than implicit. :)</span>
<span class="comment-copy">I didn't downvote. Perhaps the OP is looking for the 'why' beyond what the docs say. But in any case, please consider using generators instead of map, it's slightly more pythonic.</span>
