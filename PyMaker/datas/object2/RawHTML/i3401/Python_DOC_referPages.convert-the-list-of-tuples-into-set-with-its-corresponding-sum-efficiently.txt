<div class="post-text" itemprop="text">
<p>I have list like this:</p>
<pre><code>x = [(('abc', 'def'), 1), (('foo', 'bar'), 0), (('def', 'abc'), 3)]
</code></pre>
<p>I want to make a list which contains unique elements with its corresponding sum in which the order should not matter.I want list like this:</p>
<pre><code>[(('abc', 'def'), 4),  (('foo', 'bar'), 0)]
</code></pre>
<p>What is the efficient way to do this in python?</p>
<p>It is different from <a href="https://stackoverflow.com/questions/18194712/how-do-i-sum-tuples-in-a-list-where-the-first-value-is-the-same">this</a> as I am asking about tuple of tuple in which the first parameter is unordered.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> for this</p>
<pre><code>from collections import Counter

c = Counter()
for k,v in x:
    c[tuple(sorted(k))] += v

print(c)
# Counter({('abc', 'def'): 4, ('bar', 'foo'): 0})

print (list(c.items()))
# [(('abc', 'def'), 4), (('bar', 'foo'), 0)]
</code></pre>
</div>
<span class="comment-copy">Duplicate of <a href="https://stackoverflow.com/q/18194712/2301450">stackoverflow.com/q/18194712/2301450</a></span>
<span class="comment-copy">@Aran-Fey Please read the question again. I have made the necessary changes. The question is actually different. In my question, the tuple's order should not matter.</span>
<span class="comment-copy">I mean, that's a minor difference. All you need to do is to sort the tuples first or convert them to frozensets. I think it'll suffice to add a 2nd question to the dupe list.</span>
<span class="comment-copy">Use the default dict from <a href="https://stackoverflow.com/q/18194712/2301450">stackoverflow.com/q/18194712/2301450</a> and use a <code>frozenset</code> as the key: <code>defaultdict_[frozenset(tuple_)] += value</code></span>
<span class="comment-copy">I've reopened the question. I had better see a good answer down there soon, or I'm going to regret this decision.</span>
<span class="comment-copy">use <code>c[k] + v</code> instead of <code>.update</code>. Don't use <code>.update</code> for a single key-value pair. Note, this (very inefficiently) creates a useless dictionary.</span>
<span class="comment-copy">@juanpa.arrivillaga Can you explain it more or if possible can you please write the answer.</span>
<span class="comment-copy">@juanpa.arrivillaga. Thanks for your suggestion. Modified accordingly.</span>
