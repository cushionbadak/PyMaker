<div class="post-text" itemprop="text">
<p>When using asyncio with Python 3.6, if one function deep in the callstack is async, do I need to make the whole stack async and put await at every call?<br/>
For example I have:  </p>
<pre><code>class FileDataSource:  
    def getData(self):  
        return pd.read_csv('/some/file')

class SocketDataSource:
    def __init__(self, host, port):
        self.reader, self.writer = yield from asyncio.open_connection(host, port)

    async def getData(self):
        data = await self.reader.readuntil(b'\n\n')
        return data

def func1(datasource):
    func2(datasource)

def func2(datasource):
    func3(datasource)

def func3(datasource):
    datasource.getData()

def main(host, port):
    if host is None:
        func1(FileDataSource())
    else:
        loop = asyncio.get_event_loop()
        for timeout in range(1, 60):
            loop.call_later(timeout, func1(SocketDataSource(host, port)))
        loop.run_forever()
</code></pre>
<ol>
<li><p>In the above example, do I need to make the whole call stack of func1 / 2 / 3 as async and await on all of them? (I am afraid answer is yes)</p></li>
<li><p>Can I interchangeably pass FileDataSource and SocketDataSource to func1 or do I need to change the whole call hierarchy based on async vs non-async calls?</p></li>
<li><p>What would be the best way to design something like this which can run as a server or a batch?</p></li>
</ol>
<p>Thanks a lot in advance for all help!</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>if one function deep in the callstack is async, do I need to make the whole stack async and put await at every call?</p>
</blockquote>
<p>The answer depends on what exactly the functions in the call stack do, but most likely yes. <code>await</code> affects requires the async function to communicate with its caller - either the awaiter or the event loop driver - in order to ensure suspension/resumption of its execution.</p>
<p>A non-async function can participate in the call stack without awaiting, but then it can only be used to transmit the coroutine object and it cannot examine the data. For example, <code>func3</code> could be implemented as either:</p>
<pre><code>async def func3(datasource):
    return await datasource.getData()
</code></pre>
<p>or:</p>
<pre><code>def func3(datasource):
    return datasource.getData()
</code></pre>
<p>But the first function could examine (or log, etc.) the data returned by <code>getData</code>, whereas the second one exits immediately and returns the coroutine object which someone else must await.</p>
<blockquote>
<p>Can I interchangeably pass <code>FileDataSource</code> and <code>SocketDataSource</code> to <code>func1</code> or do I need to change the whole call hierarchy based on async vs non-async calls?</p>
</blockquote>
<p>Once you make all the functions in the call stack async, you won't be able to pass <code>FileDataSource</code>, but that doesn't mean you have to have two separate call hierarchies. Just implement <code>FileDataSource</code> as trivially "async" by changing <code>def getData()</code> to <code>async def getData()</code> (and otherwise leaving the implementation unchanged), and it will work for async usage, provided it doesn't actually block.</p>
</div>
<span class="comment-copy">Have you tried running the code and gotten an error?</span>
<span class="comment-copy">Yes - it runs when I make func[123] async and await on all of them. I am curious if there is a way not to do it - i.e. make getData() interface the same whether it is reading a file or socket.</span>
<span class="comment-copy">I'm curious if my answer helped resolve your issue?</span>
<span class="comment-copy">I am on vacation at the moment but going to try it out once back in the office. I will post a comment to conclude the thread. Thanks for your help!!</span>
<span class="comment-copy">Thanks for your detailed reply. I realized that making func[123] async works. However, the whole idea was to hide how the data is received and getData should return actual data whether it comes from file or socket. I am wondering if there is a way to make 'await' actually wait on result and resume execution when socket read is complete.</span>
<span class="comment-copy">@DGandhi <i>the whole idea was to hide how the data is received and getData should return actual data whether it comes from file or socket</i> - and you can easily do that, just make <code>getData</code> async and in the file case return from it immediately, and in the socket case await from the appropriate stream.</span>
<span class="comment-copy">@DGandhi <i>I am wondering if there is a way to make 'await' actually wait on result and resume execution when socket read is complete</i> Of course, that's precisely what it's for! An async <code>getData</code> can await <a href="https://docs.python.org/3/library/asyncio-stream.html#asyncio.open_connection" rel="nofollow noreferrer"><code>asyncio.open_connection</code></a> to obtain a pair of streams. It can get data by awaiting the streams' <code>read</code> method (or <code>readline</code> etc.) as appropriate.</span>
