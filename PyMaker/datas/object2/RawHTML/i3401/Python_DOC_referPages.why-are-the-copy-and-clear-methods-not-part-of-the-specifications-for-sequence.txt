<div class="post-text" itemprop="text">
<p>EDIT: could it be that this is just an oversight that has not been addressed? The standard types documentation includes <code>.copy()</code> and <code>.clear()</code> in <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer">the table of methods for mutable sequence types</a>. </p>
<p>I noticed something a little curious this morning: the <code>list</code> object in Python &gt;3.3  includes a <code>.copy()</code> method, and also a <code>.clear()</code> method. However the <code>collections.abc</code> <code>Sequence</code> and <code>MutableSequence</code> abstract base classes <a href="https://docs.python.org/3/library/collections.abc.html" rel="nofollow noreferrer">do not include these methods</a> are part of their spec (<code>.clear()</code> would only make sense as part of the MS spec, of course).</p>
<pre><code>&gt;&gt;&gt; x = [1,2,3]
&gt;&gt;&gt; x.copy()
[1, 2, 3]
&gt;&gt;&gt; x.clear()
&gt;&gt;&gt; x
[]
</code></pre>
<p>My understanding is that part of the reason to use <code>MutableSequence</code> is <a href="https://stackoverflow.com/questions/3570796/why-use-abstract-base-classes-in-python/19328146#19328146">to signal to the universe</a> you <a href="https://stackoverflow.com/questions/5359679/python-class-accessible-by-iterator-and-index/27803404#27803404">want your object to "act like a <code>list</code>"</a> (unless clearly stated otherwise):</p>
<pre><code>from typing import Sequence

class S(Sequence):
    x = [1, 2, 3]
    def __getitem__(self, item):
        return self.x[item]
    def __len__(self):
        return len(self.x)
</code></pre>
<p>Yet a fully defined S type cannot be copied (and a MS cannot be cleared) like a <code>list</code>:</p>
<pre><code>&gt;&gt;&gt; s = S()
&gt;&gt;&gt; s.copy()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'S' object has no attribute 'copy'
</code></pre>
<p>This seems weird and as with most things like this, there's probably a good reason for it. What is it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Found an answer- at least with regards to <code>copy()</code>- after posting the question: it seems this issue <a href="https://bugs.python.org/issue22101" rel="nofollow noreferrer">was discussed</a> quite a while ago in the bug tracker. A couple quotes:</p>
<blockquote>
<p>I don't think this is needed nor do I think that it is a good idea to
  have a copy() method in the ABCs because they know so little about
  their concrete underlying class (perhaps the backing store in the
  filesystem or a database).</p>
</blockquote>
<p>and:</p>
<blockquote>
<p>The return type of copy() for ABCs feels problematic.  MutableMapping
  doesn't have it either.</p>
</blockquote>
<p>As I expected, this was discussed and there seem to be sound reasons behind it. </p>
<p>This little tidbit from GVR is also worth including:</p>
<blockquote>
<p>I personally despise almost all uses of "copying" (including the
  entire copy module, both deep and shallow copy functionality).</p>
</blockquote>
</div>
<span class="comment-copy">That discussion isn't about lists/mutable sequences: it's title is "collections.**abc.Set** doesn't provide copy() method" (emphasis mine).</span>
<span class="comment-copy">@martineau Yeah but if you read the discussion they talk about sequences, too.</span>
<span class="comment-copy">@martineau or i should say: it turns into a general dicussion about all ABCs, at least with regards to <code>copy()</code>. doesn't explain why <code>clear()</code> is left out though.</span>
<span class="comment-copy">Regardless of why, couldn't you just derive or even create your own ABC with the desired methods?</span>
<span class="comment-copy">Obviously its not an oversight. The "tidbit" you added mentioning the very end of the discussion by Guido is all the answer you'll ever get (since he's the one who closed the issue): <b>Status: closed, Resolution: rejected</b>.</span>
