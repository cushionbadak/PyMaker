<div class="post-text" itemprop="text">
<p>I was trying to solve a homework question that involves processing an order based on a list of tuples which contain the name of item, quantity, and price per item. </p>
<p>The total is calculated by taking the 1st and 2nd indices of each tuple in the list after the item is removed and then summing the products for each tuple in the list remaining. </p>
<p>I have to do these things within the process_order() function, but I keep on running into issues when I'm trying to remove one tuple from the list because the while loop keeps running and deletes all the elements always making the total equal to 0. </p>
<p>The starting code is like this:</p>
<pre><code>total = 0 

def process_order(x_list):

x = [("oranges", 4, 3.22),("gummy bears",1,1.99),("sour bites", 3, 2.33), ("antacid", 1, 5.33)]
while(len(x)&gt;0):
  process_order(x)
print("total price: ", total)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here it is,</p>
<pre><code>total = 0
x = [("oranges", 4, 3.22),
     ("gummy bears", 1, 1.99),
     ("sour bites", 3, 2.33),
     ("antacid", 1, 5.33)]

def process_order(x_list):
    # calculate the cost of the first element and remove it
    cost = x_list[0][1] * x_list[0][2]
    del x_list[0]
    return cost

while x:
    total += process_order(x)

print(total)
# 27.19
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I decided to add a second answer in response to this comment under BcK's answer:</p>
<blockquote>
<p>Also, I'm not allowed to change any of the code below the process_order() function.</p>
</blockquote>
<p>This... is technically doable, but the question is subsequently kind of strange to me. In order for the code <em>below</em> the definition of <code>process_order</code> to work without modification, you have to make a change to how you define <code>total</code>. I find this strange because changing <code>total</code> is only permissible due to the fact that it's "<em>technically</em> <strong>above</strong> the definition of <code>process_order</code>" which seems like a pretty weak excuse to me.</p>
<p>The crux of the problem with <code>total</code> is the <em>intuitive answer</em> would be:</p>
<pre><code>def process_order(x_list):
    {do stuff}
    total += quantity * cost
</code></pre>
<p>The reason this solution doesn't work is because assigning a variable within a <a href="https://docs.python.org/3/reference/executionmodel.html#resolution-of-names" rel="nofollow noreferrer">scope</a> (in this example, the <code>total =</code> segment of <code>total +=</code>) creates a reference that supersedes the reference of any "higher" scopes. This means that <code>total</code> either cannot be <em>assigned</em> within the scope of <code>process_order</code> (technically achievable given the current restrictions, but requiring a bit of hackery), or a reference to the <code>total</code> variable that exists in the outer scope needs to make its way into the inner scope.</p>
<p>The simplest way to achieve the latter is to use the <a href="https://docs.python.org/3/reference/simple_stmts.html#global" rel="nofollow noreferrer">global</a> keyword. I <em>really, really</em> don't like the <code>global</code> keyword (<a href="https://stackoverflow.com/questions/19158339/why-are-global-variables-evil">and there are people who agree with me</a>), but for whatever reason it keeps popping up, so here's how you would use it (as well as an alternative way of writing <code>process_order</code> for your learning pleasure).</p>
<pre><code>## Declare total as global variable
global total
## Set total
total = 0

def process_order(x_list):
    """ Remove an an order item (as a tuple (name, quantity, cost) ) from x_list and add it to the global total"""

    ## Let the interpreter know that you plan on using total in this scope
    global total

    ## List.pop is a good way to incrementally destroy a list
    ## (you can use an index as an argument: the default is -1)
    item = x_list.pop()

    ## This takes advantage of sequence unpacking and multiple assignment
    (name,quantity,price) = item

    ## You can now assign to total because it has been declared as a global variable
    total += quantity * price


## The rest is unchanged
x = [("oranges", 4, 3.22),("gummy bears",1,1.99),("sour bites", 3, 2.33), ("antacid", 1, 5.33)]
while(len(x)&gt;0):
  process_order(x)
print("total price: ", total)
## Outputs: &gt;&gt; total price:  27.19
</code></pre>
<p>All that being said, I would sooner assume that there was some miscommunication in the assignmet; changing the <code>while</code> loop to match BcK's example would make significantly more sense, in my opinion.</p>
</div>
<span class="comment-copy">Hi BcK, this is an interesting approach. How would I go about doing reverse deletion if I wanted to remove any random index within the length of the list?</span>
<span class="comment-copy">I realized that there is no need to delete from the end. You can delete from anywhere in the list. Just give a random index within the range of the list.</span>
<span class="comment-copy">Also, I'm not allowed to change any of the code below the process_order() function.</span>
