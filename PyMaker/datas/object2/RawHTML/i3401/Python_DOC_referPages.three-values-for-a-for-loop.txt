<div class="post-text" itemprop="text">
<p>I would like to have three values increment at different speeds. My overall goal is to emulate this pattern:</p>
<pre><code>0,0,   0
0,1,   1
0,2,   2
1,0,   3
1,1,   4
1,2,   5
2,0,   6
2,1,   7
2,2,   8
</code></pre>
<p>The first two numbers are easy. I would solve it like this:</p>
<pre><code>for x in range(3):
    for y in range(3):
        print(x, y)
&gt;&gt;&gt; 0 0
&gt;&gt;&gt; 0 1
&gt;&gt;&gt; 0 2
&gt;&gt;&gt; 1 0
&gt;&gt;&gt; 1 1
&gt;&gt;&gt; 1 2
&gt;&gt;&gt; 2 0
&gt;&gt;&gt; 2 1
&gt;&gt;&gt; 2 2
</code></pre>
<p>This is the pattern that I want.</p>
<p>The question is how do I increment the third number by one each time, while still having the first two numbers increment in the way that they are?</p>
<p>Basically, how can I make the third number increment by one each time the for loop goes?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since we have all these answers, I will post the most straightforward one</p>
<pre><code>count = 0
for x in range(3):
    for y in range(3):
        print(x, y, count)
        count += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need nested loops for this. You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> to get your first two numbers, and <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> to get your last one.</p>
<pre><code>from itertools import product

for i, (u, v) in enumerate(product(range(3), repeat=2)):
    print(u, v, i)
</code></pre>
<p><strong>output</strong></p>
<pre><code>0 0 0
0 1 1
0 2 2
1 0 3
1 1 4
1 2 5
2 0 6
2 1 7
2 2 8
</code></pre>
<hr/>
<p><code>itertools.product</code> is a very handy function. It basically performs nested loops efficiently, but its main benefit is that they don't <em>look</em> nested, so you don't end up with massively indented code. However, its real strength comes when you don't know how many nested loops you need until runtime.</p>
<p><code>enumerate</code> is probably even more useful: it lets you iterate over a sequence or any iterable and returns the iterable's items as well as an index number. So whenever you need to loop over a list but you need the list items and their indices as well, it's more efficient to use <code>enumerate</code> to get them both at once, rather than having a loop that uses <code>range</code> to produce the index and then using the index to fetch the list item.</p>
</div>
<div class="post-text" itemprop="text">
<p>The third number counts how many total iterations you had so far. For each increment in X it gains the total size of Y's loop, and to that you need to add the value of Y:</p>
<pre><code>X_SIZE = 3
Y_SIZE = 3
for x in range(X_SIZE):
    for y in range(Y_SIZE):
        print(x, y, x * Y_SIZE + y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>single variable. single loop.</p>
<pre><code>for i in range(9):
  print(i // 3, i % 3, i)
</code></pre>
<p><code>//</code> is floor division and <code>%</code> is modulus (the remainder, in most cases)</p>
<p>Personally, I like this solution because it plainly explains the underlying pattern, and can therefore be easily altered or extended to other patterns.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>for x in range(3):
    for y in range(3):
        print(x, y, x * 3 + y) # Python 3.x
        print x, y, x * 3 + y # Python 2.x
</code></pre>
<p>Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use simply a count variable for this</p>
<pre><code>count = 0
for x in range(3):
    for y in range(3):
        print(x, y, ' ' ,count) # use ' ' for making exact look what OP asked..lol
        count = count + 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This looks more natural to me :)  </p>
<pre><code>x_range = 3  
y_range = 3  
for x in range( x_range*y_range ):  
    print(x // x_range, x % x_range, x)  
</code></pre>
<p>Similar to what cwharris wrote.</p>
</div>
<span class="comment-copy">Why not keep track of the count in a variable <code>count</code>?</span>
<span class="comment-copy">initialize <code>n</code> to 0, then <code>n = n+1</code> in the inner loop. Not the only way, but why complicate things when a simple counter will do just as nicely?</span>
<span class="comment-copy">@BryanOakley how could I make a counter?</span>
<span class="comment-copy">@MattX you can assign <code>count = 0</code> at the beginning of your code and update this value wherever you need.</span>
<span class="comment-copy">You may want to print the count.</span>
<span class="comment-copy">@JohnY oops :) Ty</span>
<span class="comment-copy">I am getting <code>IndexError: list index out of range</code></span>
<span class="comment-copy">@MattX you probably have a typo somewhere. There is no access to any index here, so this error is not even possible in this code</span>
<span class="comment-copy">Oh okay I tried implementing this into my code and I see where I made the mistake @RafaelC</span>
<span class="comment-copy">While this is a great example of some fancy python features, for a beginner I think this is a much less readable solution than a simple counter.</span>
<span class="comment-copy">@BryanOakley Fair point. I agree that <code>product</code> might be a little bit advanced for a beginner. That's why I felt it was appropriate to add the links to the docs &amp; some explanation about it to my answer. OTOH, it's never too early to learn about <code>enumerate</code>, IMHO.</span>
<span class="comment-copy">True, but I mentioned using a counter in a comment, and the OP response was "how could I make a counter?", so this is a <i>very</i> inexperienced programmer.</span>
<span class="comment-copy">This is not the right answer because it doesn't work on every range and every step.</span>
<span class="comment-copy">This works but only if your <code>range</code> starts at 0 and has no steps</span>
<span class="comment-copy">BTW, you can (&amp; should) use the <code>print</code> function in Python 2.6+, you just need  <code>from __future__ import print_function</code> at the top of your script, before other <code>import</code> statements. That makes it easier to migrate to Python 3. However, the Python 2.6 version doesn't support all the latest <code>print</code> function features.</span>
<span class="comment-copy">@RafaelC I'm sorry, but when I posted my answer then I saw you already gave something like that and also noticed that you didn't print the count and then edited.  I hope it's clear to you now.</span>
<span class="comment-copy">@RafaelC Again you might already posted your answer while I'm typing. I upvote your answer too like others. :)</span>
