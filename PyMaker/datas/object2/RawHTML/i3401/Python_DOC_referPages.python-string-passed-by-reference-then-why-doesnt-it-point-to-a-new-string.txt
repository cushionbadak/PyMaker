<div class="post-text" itemprop="text">
<p>I have the following piece of code:</p>
<pre><code>class test:

def __init__(self):
    self.variable = 'Old'
    self.change(self.variable)

def change(self, var):
    var = 'New'


obj = test()
print(obj.variable)
</code></pre>
<p>The output is <code>Old</code> but I don't understand - the method <code>change</code> gets a REFERENCE to the class variable <code>variable</code> then why doesn't <code>self.variable</code> change to <code>New</code> if I assigned a new string to the pointer inside the class ?</p>
<p>I know the string itself is immutable but doesn't it change the value of the pointer represented by <code>self.variable</code> ?</p>
<p>Wouldn't it be the same as:  <code>*var = 'New'</code>   in C ?</p>
</div>
<div class="post-text" itemprop="text">
<p>@roganjosh already pointed you to the right blog post. It comes down to Python does not pass the variables by reference or by value but by assignment. You can reference these posts for further elaboration:</p>
<ol>
<li><a href="https://stackoverflow.com/questions/13299427/python-functions-call-by-reference">Python functions call by reference</a></li>
<li><a href="https://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference">How do I pass a variable by reference?</a></li>
<li><a href="https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference" rel="nofollow noreferrer">https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference</a></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in the comments by Kasaramvd and the link provided by roganjosh above, var is just a local name which refers to an immutable object. All the change() function can do is create a name var in its local namespace and bind it to a the different immutable object 'New'.</p>
<p>Works when using self.variable instead of var:</p>
<pre><code>def __init__(self):
    self.variable = 'Old'
    self.change()

def change(self):
    self.variable = 'New'
</code></pre>
</div>
<span class="comment-copy"><code>var</code> is a local variable inside the function and it has nothing to do with <code>self.variable</code> even their names are not the same which even if they were you should've used <code>self</code> reference to access to it.</span>
<span class="comment-copy"><a href="https://jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/" rel="nofollow noreferrer">This</a> might be helpful</span>
<span class="comment-copy">But why doesn't "var" evaluate to the pointer of "variable" ?</span>
<span class="comment-copy">You should read the link I gave. It isn't a pointer.</span>
<span class="comment-copy">Thanks, it's more clear now.</span>
