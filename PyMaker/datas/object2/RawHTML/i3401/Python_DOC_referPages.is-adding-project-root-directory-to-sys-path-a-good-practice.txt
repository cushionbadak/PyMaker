<div class="post-text" itemprop="text">
<p>I have a question about adding project path to python, for facilitating <code>import</code> effort.  </p>
<h1>Situation</h1>
<p>When I write code in Python, I usually add necessary path to <code>sys.path</code> by using  </p>
<pre><code>import sys
sys.path.append("/path/to/dir/") # almost every `.py` need this
</code></pre>
<p>Sometimes, when my project gets bigger with many levels of directories, this approach seems bulky and error-prone (especially when I re-organize my files)  </p>
<p>Recently, I start using a bash script (located at project root directory) that adding the <code>sys.path.append</code> with project root argument to <code>.py</code> file in the project. With this approach, I hardly have to manually care about importing a module.  </p>
<h1>Question</h1>
<p>My question is: Is that a good practice? I find it convenient for myself, compared to my old method, but since the bash script is a separated file, I need 2 command to run any script in my project (one for the bash and one for the <code>.py</code>). I can include the command calling <code>.py</code> to the bash, but it far less flexible than directly call it from terminal.  </p>
<p>Really want to hear some advices! Thanks in advance. Any suggestion will be gratefully appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>It is generally not good practice to use manipulate <code>sys.path</code> within a python library or program. You should add the relevant paths to the <a href="https://docs.python.org/2/using/cmdline.html#envvar-PYTHONPATH" rel="nofollow noreferrer"><code>PYTHONPATH</code></a> in the calling environment for your python program:</p>
<pre><code>PYTHONPATH="/path/to/other/projects/directory:$PYTHONPATH" python ...
</code></pre>
<p>or</p>
<pre><code>export PYTHONPATH="/path/to/other/projects/directory:$PYTHONPATH"
python ...
</code></pre>
<p>This allows you to easily manipulate the paths that your program or library will search for dependencies easily without modifying your code.</p>
<p>It is also very easy to manage this in your personal development environment by modifying your <a href="https://unix.stackexchange.com/questions/129143/what-is-the-purpose-of-bashrc-and-how-does-it-work"><code>bashrc</code></a> or in your production environments in your <code>init</code> script (or other wrapper script) and provides you with one place to update each time you add or modify your project paths.</p>
<p>Given that you mention that you have almost one directory per <code>.py</code> file, you should also consider how your code might be organized into <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">packages</a> to further simplify your setup.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not a particularly good practice, though you could get away with it. Better to look into virtualenv though (or pipenv) for a smoother workflow.</p>
</div>
<span class="comment-copy">This is generally <i>not</i> good practice. It's generally not necessary, because the path to the script is already added to <code>sys.path</code> automatically. But meanwhile, for distribution/deployment, you almost always want to create a <code>pip install</code>-able package with <code>setuptools</code>, a distributable virtualenv, an installer package via PyInstaller/etc., a Docker image with your app pre-installed, or something else, while for local development, if you don't want to install <code>--inplace</code>, you probably want a virtualenv with a path set up.</span>
<span class="comment-copy">Also, you usually shouldn't have scripts scattered all over the projectâ€”definitely not inside packages, but usually even if they aren't. If you need a ton of scripts, you should look at creating either <code>-m</code>-runnable modules, or <code>setuptools</code>-generated entry-point scripts.</span>
<span class="comment-copy">Thanks for your answer. It seems you misunderstood my question. What I am asking is instead of adding multiple different <code>sys.path.append</code> to different <code>.py</code>, I can add the <b>project root</b> to <code>sys.path</code> to almost every <code>.py</code> and do importing modules correspond to that added <b>project root</b>. Note that I'm not familiar with distribution/deployment a package, so maybe I am the one who misunderstand here :D</span>
<span class="comment-copy">If almost every <code>.py</code> file needs this, then you're probably doing something wrong. (Possibly something <i>very</i> wrong, like putting scripts in the middle of packages, but possibly not.) The best answer is usually to rearrange your project so you don't need that. That's not <i>always</i> true, but without any specifics, it's impossible to know whether you're facing an exception to that general rule.</span>
<span class="comment-copy">Actually, my <code>bash</code> way that I've mentioned above is (kind of) an <code>init</code> script. I usually <code>export</code> and <code>source</code> the <code>bashrc</code> before calling a <code>python</code> process (I'm developing via a ssh connection to a server, which cant be turned off as my wish). By this time, while everyone say that this is not good practice (and I do feel so, not sure why, so I bring it up here for a clarification), but I still can't see any bad effects for my project. Although, since I didn't mention <code>bashrc</code> and this is actually a very simple and effective way, your answer worth being accepted :D Thank you very much</span>
<span class="comment-copy">I do use virtualenv for every projects of mine, what I mean here is not <code>import</code> a pypi package, but my own package from other directory (but same project) of mine.</span>
<span class="comment-copy">It's the same whether you're using a package from pypi, or your own package. Install them properly (and if they're not packages, they should be!).</span>
