<div class="post-text" itemprop="text">
<p>I can't seem to wrap my head around the output of this function:</p>
<pre><code>def is_integer(num1, num2):
        if isinstance(num1 and num2, int):
            return 'Yes'
        else:
            return 'No'

print(is_integer(1.4, 2))
</code></pre>
<p>This will output 'Yes', but it shouldn't as 1.4 and 2 are not both integers.
Any help?</p>
</div>
<div class="post-text" itemprop="text">
<p>The way the <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow noreferrer"><code>and</code></a> operator works in Python is:</p>
<blockquote>
<p>The expression <code>x and y</code> first evaluates <code>x</code>; if <code>x</code> is false, its value is returned; otherwise, <code>y</code> is evaluated and the resulting value is returned.</p>
</blockquote>
<p>In Python, <code>None</code>, <code>False</code>, numeric zeros, and empty collections are false; almost everything else is true.<sup>1</sup></p>
<p>So, <code>1.4 and 2</code> means <code>2</code>, because <code>1.4</code> is not zero. </p>
<p>So, <code>isinstance(1.4 and 2, int)</code> means <code>isinstance(2, int)</code>.</p>
<p>And <code>2</code> is an <code>int</code>.</p>
<hr/>
<p>What you probably wanted here is:</p>
<pre><code>if isinstance(num1, int) and isinstance(num2, int):
</code></pre>
<p>â€¦ or:</p>
<pre><code>if all(isinstance(num, int) for num in (num1, num2)):
</code></pre>
<hr/>
<p><sub>1. To avoid confusion between the specific <code>True</code> and <code>False</code> values and the more abstract idea of true and false values, most Python developers refer to <code>None</code>/<code>False</code>/zero/empty as "falsey" rather than "false", and everything else as "truthy" rather than "true". But the documentation avoids this cutesiness, and I'm quoting from the docs here.</sub></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>isinstance(num1 and num2, int)
</code></pre>
<p>Is the same as </p>
<pre><code>t1 = num1 and num2
if isinstance(t1, int)
</code></pre>
<p>The result of an and between two numbers returns the first Falsey value if there are any, else returns the last value in the expression.</p>
<p>Some examples:</p>
<pre><code>In [24]: 1.4 and 2
Out[24]: 2

In [25]: 1.4 and 2 and 3
Out[25]: 3

In [26]: 1.4 and 0 and 2
Out[26]: 0
</code></pre>
<p>For more information, see <a href="https://stackoverflow.com/questions/47007680/strange-use-of-pythons-and-or-operator/47007761#47007761">Strange use of python's and / or operator</a>.</p>
<hr/>
<p>If you want to test both, you have to do them separately:</p>
<pre><code>def is_integer(num1, num2):
    if isinstance(num1, int) and isinstance(num2, int):
        return 'Yes'        
    return 'No'
</code></pre>
<p>Which is a more wieldy way of writing</p>
<pre><code>def is_integer(num1, num2):
    if all(isinstance(n, int) for n in (num1, num2)):
        return 'Yes'        
    return 'No'
</code></pre>
<p>...with the <code>all</code> function which generalises to more than 2 arguments.</p>
<p>Better still, have your function accept a variable number of arguments:</p>
<pre><code>def is_integer(*args):
    if all(isinstance(n, int) for n in args):
        return 'Yes'
    return 'No'
</code></pre>
<p>Better still, return a boolean result:</p>
<pre><code>def is_integer(*args):
    return all(isinstance(n, int) for n in args)
</code></pre>
</div>
<span class="comment-copy"><code>num1 and num2</code> means <code>num1</code> if it's falsey (<code>False</code>, <code>None</code>, zero, or empty), otherwise <code>num2</code>. That probably isn't what you wanted to check.</span>
<span class="comment-copy">Wow, I had no idea there was a difference between the specific <code>True</code> and <code>False</code> values and the abstract ideas. Thanks a lot abarnert.</span>
<span class="comment-copy">Downvoter, please let me know what it is you don't like about this answer so I can fix it. Thanks!</span>
<span class="comment-copy">"As long as both numbers != 0, t1 == True" - no, <code>and</code> in Python returns one of its arguments. If neither of its arguments is a boolean, the result won't be a boolean.</span>
<span class="comment-copy">@user2357112 ugh, sorry. Fixed.</span>
