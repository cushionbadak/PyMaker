<div class="post-text" itemprop="text">
<p>I was trying out the new <code>dataclasses</code> in Python 3.7</p>
<p>The <code>dataclass</code> decorator can be passed arguments to control the dunder functions that are added to the class.</p>
<p>For some reason, the decorator does not seem to raise <code>TypeError</code> for <code>eq=False</code> argument.</p>
<p>As per the docs:</p>
<pre><code>eq: If true (the default), an __eq__ method will be generated. 
This method compares the class as if it were a tuple of its fields, in order. 
Both instances in the comparison must be of the identical type
</code></pre>
<p>If I understand correctly, if i pass <code>eq = False</code>, <code>__eq__</code> function will not be added, and a <code>TypeError</code> should be thrown when comparing two instances of the same class. Instead, the <code>eq</code> parameter seems to have no effect.</p>
<pre><code>@dataclass(eq = False)
class Number:
    val: int

a = Number(1)
b = Number(2)
c = Number(1)

a == b
False

a == c
False
</code></pre>
<p>The above does not raise <code>TypeError</code> and always evaluates to <code>False</code>.</p>
<pre><code>@dataclass()
class Number:
    val: int

a = Number(1)
b = Number(2)
c = Number(1)

a
Number(val = 1)

a == b
False

a == c
True
</code></pre>
<p>The other arguments(eg: <code>order</code>, <code>repr</code>) seem to behave as expected</p>
<pre><code>@dataclass(order = False, repr = False)
class Number:
    val:int

a = Number(1)
b = Number(2)
c = Number(1)

a
&lt;__main__.Number object at 0x7fe1036c8b38&gt;

a &lt; b
Traceback (most recent call last):                                                                                                          
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;                                                                                                       
TypeError: '&lt;' not supported between instances of 'Number' and 'Number' 
</code></pre>
<p>Is there some gap in my understanding?</p>
<p>I am using docker image <code>python/rc-stretch</code></p>
</div>
<div class="post-text" itemprop="text">
<p>In python3.7, given the following dataclass definition</p>
<pre><code>@dataclass(eq=False)
class Number:
    val: int
</code></pre>
<p>the expected result for <code>Number(1) == Number(1)</code> is <code>False</code>. This is correct since setting <code>eq = True</code> only overrides <a href="https://docs.python.org/3/reference/expressions.html#value-comparisons" rel="noreferrer">the default python-object equality function</a>, which just checks for identical references (the same as <code>is</code>) in this case.</p>
<hr/>
<p>The <a href="https://www.python.org/dev/peps/pep-0557/#id7" rel="noreferrer">dataclass specification</a> is a bit lacking here. It explains the <code>eq</code> parameter with</p>
<blockquote>
<p>eq: If true (the default), an __eq__ method will be generated. This method compares the class as if it were a tuple of its fields, in order. [...]</p>
</blockquote>
<p>but in order to understand the issue you ran into, you also need to know that the basic python object already offers an <code>__eq__</code> function:</p>
<pre><code>&gt;&gt;&gt; class A: pass
...
&gt;&gt;&gt; dir(A())
['__class__', '__delattr__', ... '__eq__', ...]  # has __eq__ already
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you don't define <code>__eq__</code>, <code>__eq__</code> will resolve to <code>object.__eq__</code>.  That is what's happening when you create a dataclass with <code>eq=False</code>.</p>
<p><code>object.__eq__(self, other)</code> is False unless <code>self is other</code>, i.e. unless the two are the same object.</p>
</div>
<span class="comment-copy">Have you tried <code>@dataclass(eq = False, order = False)</code>  to check the first case?</span>
<span class="comment-copy">@RedEyed Just tried. Was still able to do equality check. <code>TypeError</code> on &lt; or &gt;.</span>
<span class="comment-copy">Can't reproduce on <code>python3.7</code> in so far as once I set <code>eq = False</code>, any comparison using <code>==</code> always returns <code>False</code>. I'll check the docu wether that is the expected behauviour.</span>
<span class="comment-copy">@Arne You're correct. I need to edit the question.</span>
<span class="comment-copy">Can you attach a link for the above expected behaviour?</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/reference/expressions.html#value-comparisons" rel="nofollow noreferrer">Value comparisons</a> in the documentation: "The default behavior for equality comparison (<code>==</code> and <code>!=</code>) is based on the identity of the objects."</span>
<span class="comment-copy">@PatrickHaugh Good find, I searched for something like that but couldn't quite get it =)</span>
