<div class="post-text" itemprop="text">
<p>I want to have my tests in a separate folder from my package code, such that from the top level directory of my project I can run <code>python sample/run.py</code> or <code>python tests/test_run.py</code>, and have both of them resolve all the imports properly.</p>
<p>My directory structure looks like this:</p>
<pre><code>sample/
   __init__.py
   helper.py
   run.py
tests/
   context.py
   test_run.py
</code></pre>
<p>I know there are supposedly many ways to achieve this, as discussed here: <a href="https://stackoverflow.com/questions/6670275/python-imports-for-tests-using-nose-what-is-best-practice-for-imports-of-modul">Python imports for tests using nose - what is best practice for imports of modules above current package</a></p>
<p>However, when I try to run <code>python tests/test_run.py</code>, I get a <em>ModuleNotFoundError</em> for 'helper', because 'sample/run.py' imports 'sample/helper.py'.</p>
<p>In particular, I am trying to follow the convention (suggested in the <a href="http://docs.python-guide.org/en/latest/writing/structure/#test-suite" rel="nofollow noreferrer">Hitchhiker's Guide to Python</a>) of explicitly modifying the path using:</p>
<pre><code>import os, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
</code></pre>
<p>As a result, I have a blank <code>sample/__init__.py</code>, along with the following code files.</p>
<p>sample/run.py:</p>
<pre><code>from helper import helper_fn
def run():
    helper_fn(5)
    return 'foo'
if __name__ == '__main__':
    run()
</code></pre>
<p>sample/helper.py:</p>
<pre><code>def helper_fn(N):
    print(list(range(N)))
</code></pre>
<p>tests/context.py:</p>
<pre><code>import os, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import sample
</code></pre>
<p>tests/test_run.py:</p>
<pre><code>from context import sample
from sample import run

assert run.run() == 'foo'
</code></pre>
<p>So I have two questions:</p>
<ol>
<li>Why is Python unable to find the 'helper' module?</li>
<li>How do I fix things so that I can run <em>both</em> <code>sample/run.py</code> and <code>tests/test_run.py</code> from the top-level directory?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Edited:</p>
<p>To make both <code>sample/run.py</code> and <code>tests/test_run.py</code> work, you should add the path of <code>sample</code> directory into python path. So, your <code>tests/context.py</code> should be </p>
<pre><code>import os, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../sample')))


import sample
</code></pre>
<p>This change will let Python know the path of <code>helper</code> module.</p>
<hr/>
<p><s><code>sample/run.py</code> should be:</s></p>
<pre><code>  from .helper import helper_fn
  def run():
     helper_fn(5)
     return 'foo'
  if __name__ == '__main__':
     run()
</code></pre>
<p>Implicit relative imports within packages are not available in Python 3. Please check below:</p>
<blockquote>
<p>The import system has been updated to fully implement the second phase of PEP 302. There is no longer any implicit import machinery - the full import system is exposed through sys.meta_path. In addition, native namespace package support has been implemented (see PEP 420). <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">link</a></p>
</blockquote>
<p>This <a href="https://docs.python.org/3/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">documentation</a> might be helpful to understand Intra-Package-References.</p></div>
<span class="comment-copy">Python 2 or Python 3?  The way that imports are looked up is slightly different in both.</span>
<span class="comment-copy">Python 3, thanks for clarifying</span>
<span class="comment-copy">This fixes the import error when running <code>tests/test_run.py</code>, but it leads to <code>ModuleNotFoundError: No module named '__main__.helper'; '__main__' is not a package</code> when running <code>sample/run.py</code>.</span>
<span class="comment-copy">The linked documentation says it's not possible to use relative imports in a module intended for use as the main module, so I tried abstracting the <code>if __name__ == 'main': run()</code> into a new file called <code>sample/main.py</code> (along with <code>from run import run</code>). When using the relative import suggested above (<code>from .helper ...</code>), it works for <code>tests/test_run.py</code> and fails for <code>sample/main.py</code>. With the original import (<code>from helper ...</code>), it works for <code>sample/main.py</code> but not <code>tests/test_run.py</code>.</span>
<span class="comment-copy">The relative import suggested above <i>does</i> work if you run <code>python -m sample.run</code>, as mentioned here: <a href="https://stackoverflow.com/a/23542795/">stackoverflow.com/a/23542795</a>. I still find this pretty unsatisfying though, since now there are two ways you need to invoke python, depending on whether it's a test script or a project script. Is there any way where I can still call both scripts as specified at the beginning of the question?</span>
<span class="comment-copy">@camall3n I edited my solution. This change will make both codes work and can answer your first question.</span>
<span class="comment-copy">This still seems kind of ugly, but I'll admit that it does what I asked for. I'm accepting this answer unless someone can think of a cleaner solution.</span>
