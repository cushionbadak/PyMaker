<div class="post-text" itemprop="text">
<p>I get csv files containing share price data. A sample is as below.  </p>
<pre><code>'dttm','open','high','low','close'
"2014/01/01 09:16:00",6365.2001953125,6369.89990234375,6355,6355,0
"2014/01/01 09:17:00",6355.64990234375,6359.9501953125,6355.5498046875,6359.5498046875,0
"2014/01/01 09:18:00",6359.5,6359.7998046875,6358,6359,0
"2014/01/01 09:19:00",6358.9501953125,6359.4501953125,6357.5498046875,6359,0
"2014/01/01 09:20:00",6359,6359,6355.64990234375,6356.5,0
.....likewise till "2014/01/01 15:30:30"  (and for further dates ahead)
</code></pre>
<p>Every row contains data for a minute.  </p>
<p>Problem:-<br/>
Sometimes, a minute data is skipped. e.g. row for "2014/01/01 09:18:00" would not be present.<br/>
This hampers my program logic ahead.  </p>
<p>What I require:-<br/>
is to validate the csv file whether rows for every 1 minute are present between 09:15:15 to 15:30:30 for every date.  If not, copy previous row and insert for that minute (which is not present).</p>
<p>Can anybody pl. help?<br/>
Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is sample code you can use:</p>
<pre><code>from dateutil.parser import parse
from datetime import datetime, timedelta


data = [
    ("2014/01/01 09:16:00",6365.2001953125,6369.89990234375,6355,6355,0),
    ("2014/01/01 09:17:00",6355.64990234375,6359.9501953125,6355.5498046875,6359.5498046875,0),
    ("2014/01/01 09:20:00",6359,6359,6355.64990234375,6356.5,0),
]


def insert_into_db(date, open, high, low, close, zero):
    print('inserting {} {} {} {} {} {}'.format(date, open, high, low, close, zero))

prev_date = None
for date, open, high, low, close, zero in data:
    date = parse(date)

    if prev_date is not None and date - prev_date &gt; timedelta(minutes=1):
        for i in reversed(range((date - prev_date).seconds // 60 - 1)):
            date_between = date - timedelta(minutes=1 * i + 1)
            insert_into_db(date_between, open, high, low, close, zero)

    insert_into_db(date, open, high, low, close, zero)
    prev_date = date
</code></pre>
<p>The output is:</p>
<pre><code>inserting 2014-01-01 09:16:00 6365.2001953125 6369.89990234375 6355 6355 0
inserting 2014-01-01 09:17:00 6355.64990234375 6359.9501953125 6355.5498046875 6359.5498046875 0
inserting 2014-01-01 09:18:00 6358.9501953125 6359.4501953125 6357.5498046875 6359 0
inserting 2014-01-01 09:19:00 6358.9501953125 6359.4501953125 6357.5498046875 6359 0
inserting 2014-01-01 09:20:00 6359 6359 6355.64990234375 6356.5 0
</code></pre>
<p>But you should make sure start and end minutes present (or adapt the code).</p>
<p><strong>Update:</strong> fixed case if multiple minutes missing</p>
</div>
<div class="post-text" itemprop="text">
<p>you could basically read two consecutive lines and get time delta. If it is not 1 minute, means you're missing a line. Just write to the csv with a new line character at the end! you could also write everything to a new CSV file.</p>
<pre><code>import csv
import datetime
f = open("your_file.csv", "w+")
ff = csv.reader(f)    
pre_line = ff.next()
while(True):
    try:
        cur_line = ff.next()
        if cur_line - pre_line != # 1 minute difference:
            f.write(pre_line)
            f.write('/n')
    except:
        break
</code></pre>
</div>
<span class="comment-copy">Can you show us what you have so far!</span>
<span class="comment-copy">I am quite new to python. So out of ideas in it. Help appreciated. Thanks.</span>
<span class="comment-copy">You could start by looking at the csv module, iterating over rows and parsing the datetime strings in each row. <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">docs.python.org/3/library/csv.html</a></span>
<span class="comment-copy">Have a look at <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">docs.python.org/3/library/datetime.html</a> for parsing dates</span>
<span class="comment-copy">I think the for loop should be nested.   In the code "for date, open, high, low, close, zero in data:",   'data' is a list of tuples which would require further processing.</span>
<span class="comment-copy">What do you mean? In each iteration for loop receives a tuple of <code>data</code> and unpacks it into <code>date, open, high, low, close, zero</code>, isn't it?</span>
<span class="comment-copy">Oh. Sorry. I thought i need to do it in two shots. First 'for loop' to get tuples and another 'for loop' to parse its items. But clarified my concept now. Thanks.</span>
<span class="comment-copy">Another point:- this code deals with data for one date (not talking about datetime, but data for one day). There would be data for multiple days in same file.  When the code encounters next day, it would insert hundreds of rows because of the time difference. How do I avoid it?</span>
<span class="comment-copy">You can set a threshold to avoid tons of insertions: change if condition to <code>prev_date is not None and date - prev_date &gt; timedelta(minutes=1) and date - prev_date &lt; timedelta(...)</code>. Or you can compare days: <code>prev_date is not None and date - prev_date &gt; timedelta(minutes=1) and date.day == prev_date.day</code></span>
<span class="comment-copy">whether f.write(pre_line) would write line at that particular location or at the end of file?</span>
<span class="comment-copy">@Vineet Good point. This should help you. <a href="https://stackoverflow.com/questions/10507230/insert-line-at-middle-of-file-with-python" title="insert line at middle of file with python">stackoverflow.com/questions/10507230/â€¦</a></span>
<span class="comment-copy">Thank you for your valuable input and time.</span>
