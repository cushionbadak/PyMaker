<div class="post-text" itemprop="text">
<p>I am writing a scrapy code, which takes the url, the tags where my data to be scraped is stored from a csv file. That tag I am assigning to a temporary variable like z(having h1), av(having title), an(having td) etc. When I am using that variable in xpath , it does not extract anything out of that tag. Can anyone help me
?</p>
<pre class="lang-py prettyprint-override"><code>import pandas as pd
import requests
from scrapy.http import TextResponse

x=pd.read_csv(r'C:\Users\ndewan\Desktop\pattern-swage.csv', encoding="utf-8")
x=x.replace('&lt;','',regex=True).replace('&gt;','',regex=True)

url=str(x.iloc[0,0]) 
r = requests.get(url)
response = TextResponse(r.url, body=r.text, encoding='utf-8')
z=x.iloc[0,1]
s=x.iloc[0,2]
an=x.iloc[0,3]
av=x.iloc[0,4]
part=response.xpath('//av//text()').extract()
print(part)
print(url)
print(z)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you're using variables, you should denote them with <code>$</code> and supply their value as a keyword argument <a href="https://doc.scrapy.org/en/latest/topics/selectors.html?highlight=xpath#variables-in-xpath-expressions" rel="nofollow noreferrer">per the docs</a>.</p>
<pre><code>part=response.xpath('//$av//text()', av = av).extract()
</code></pre>
<p>Alternatively, if you prefer, use string formatting.</p>
<pre><code>part=response.xpath(f'//{av}//text()').extract()
</code></pre>
</div>
<span class="comment-copy">thanks a lot, it works!!</span>
<span class="comment-copy">can we use multiple variables here,like: de=response.xpath('//{[@{}]}//text()'.format(str(av[0],av(s[1])).extract()</span>
<span class="comment-copy">Glad that it works :) To answer your second question, you absolutely can use multiple variables, but what you have written there <i>looks</i> a little jumbled to me. At the very least, I believe you should have multiple placeholders (braces) in the string. <a href="https://docs.python.org/3/library/string.html#format-examples" rel="nofollow noreferrer">Here's examples from the Python Docs</a>, and you can always look up more tutorials if you need further explanation.</span>
<span class="comment-copy">thanks Reid Ballard</span>
