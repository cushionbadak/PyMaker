<div class="post-text" itemprop="text">
<p>I am attempting to update a Slack App for my company that will query our API, perform a few calculations, and spit out a nice report. The problem is that the report takes about 7-10 seconds to run and Slack only allows a 3000ms timeout on a slash command.</p>
<p>This isn't a huge problem though, because you can respond immediately with a message acknowledging the command and then when the report completes respond again.</p>
<p>The rest of our Slack app is written with a Flask backend and hosted on an Ubuntu 16.04 server, so we run Python 3.5. </p>
<p>The code I've <a href="https://renzo.lucioni.xyz/serverless-slash-commands-with-python/" rel="nofollow noreferrer">found</a> that demonstrates how to do what I want uses the Zappa library, which looks like it's for AWS's lamdba, uses a <code>@task</code> decorator to force a function to be asynchronous. Unfortunately, it doesn't run on less than Python 3.6.</p>
<p>Example code from the tutorial:</p>
<pre><code>@task
def hello_there_task(response_url):
    sleep(5)

    data = {
        'response_type': 'in_channel',
        'text': 'You _are_ a bold one.',
    }

    requests.post(response_url, json=data)


@app.route('/hello-there', methods=['POST'])
def hello_there():
    if not is_request_valid(request):
        abort(400)

    hello_there_task(request.form['response_url'])

    return jsonify(
        response_type='in_channel',
        text='&lt;https://youtu.be/frszEJb0aOo|General Kenobi!&gt;',
    )
</code></pre>
<p>My question: How can I make the <code>hello_there_task</code> asynchronous in Python 3.5? It doesn't have to be a decorator, though it wouldn't hurt for future use. </p>
</div>
<div class="post-text" itemprop="text">
<p>As I've understood from brief look at Zappa, a <code>@task</code> decorator doesn't make a function async, but is just an interface to Zappa's executor. In pure Python, <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor" rel="nofollow noreferrer">ThreadPoolExecutor</a> and <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor" rel="nofollow noreferrer">ProcessPoolExecutor</a> seem very similar to it.</p>
</div>
