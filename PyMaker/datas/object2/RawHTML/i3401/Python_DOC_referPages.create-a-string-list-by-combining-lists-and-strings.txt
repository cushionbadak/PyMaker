<div class="post-text" itemprop="text">
<p>I'm trying to create a list that is combining two lists and some strings:</p>
<pre><code>string = "test"
list1 = ["1","2","3"]
list2 = ["a","b","c"]

result = ["test.1.a","test.2.b","test.3.b"]
</code></pre>
<p>I tried messing around with .join and zip functions to no avail.</p>
</div>
<div class="post-text" itemprop="text">
<p>I <em>believe</em> that a pythonic way could be the following, using <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> and <code>list comprehension</code>:</p>
<pre><code>output = ["%s.%s.%s" % (string, a, b) for a, b in zip(list1, list2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works:</p>
<pre><code>['.'.join((string,)+i) for i in zip(list1, list2)]
</code></pre>
<p>Output:</p>
<pre><code>['test.1.a', 'test.2.b', 'test.3.c']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>string = "test"
list1 = ["1","2","3"]
list2 = ["a","b","c"]

lst = ['{}.{}.{}'.format(string, list1[x], list2[x]) for x in range(len(list1))]

print(lst)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['test.1.a', 'test.2.b', 'test.3.c']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply use <code>concatenation</code> trick:</p>
<pre><code>string1 = "test"
list1 = ["1","2","3"]
list2 = ["a","b","c"]

result = [(string1+"."+list1[i]+"."+list2[i]) for i in range(len(list1))]
print(result)
</code></pre>
<p>Output:</p>
<pre><code>['test.1.a', 'test.2.b', 'test.3.c']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>List Comprehension:</p>
<pre><code>string = "test"
list(map(lambda x,y: string+"."+x+"."+y, list1,list2))
</code></pre>
<p><strong>Output:</strong>
</p>
<pre><code>['test.1.a', 'test.2.b', 'test.3.c']
</code></pre>
</div>
<span class="comment-copy">Multiple string concatenations are less efficient and less readable than using <code>%</code> or <code>format</code>.</span>
<span class="comment-copy">Others have mentioned about using <code>%</code>, That's why I have avoided it</span>
<span class="comment-copy">That's not really a good reason to use <code>+</code>.</span>
<span class="comment-copy"><code>list(map(lambda ...))</code> is <i>not</i> a list comprehension.</span>
<span class="comment-copy">What is the problem in my answer and why it is not a list comprehension?  According to me, List comprehensions provide a concise way to create lists. Please correct me if I am wrong.</span>
<span class="comment-copy">Because that's not a list comprehension. See <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a>: <i>A list comprehension consists of brackets containing an expression followed by a <code>for</code> clause, then zero or more <code>for</code> or <code>if</code> clauses.</i>.</span>
<span class="comment-copy">Note that it's not a good idea to use a lot of string concatenation either. Use string formatting instead.</span>
<span class="comment-copy">In your given doc one list comprehension example is given:  squares = list(map(lambda x: x**2, range(10)))  But in my case, you are saying this is not a list comprehension.  can you please explain why?</span>
