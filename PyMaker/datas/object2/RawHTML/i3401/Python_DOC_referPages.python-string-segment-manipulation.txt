<div class="post-text" itemprop="text">
<p>I have this code so far</p>
<pre><code>data = ['fx_name_v002.1001.exr  fx_name_v002.1016.exr'
'fx_name_v002.1002.exr  fx_name_v002.1018.exr']
 data.sort()

frames = []

def string_split(data):
    for i in data:
        print(i.split('.'))
</code></pre>
<p>I need to split the list like I have. Once the list is split I need to add the 1002, 1001, of the split ends into the empty list frames</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub()</code></a> to substitute patterns in strings.</p>
<pre><code>string = ['''file_name_name_v3002.1001.extension
             file_name_name_v3002.1002.extension
             file_name_name_v3002.1003.extension 
             file_name_name_v3002.1004.extension''']

import re
re.sub(r'\.\d{4}\.', '.%%%%.', string[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>re.sub</code> with a callable will allow to handle numbers of different sizes.</p>
<pre><code>import re

s = '''file_name_name_v3002.1001.extension
file_name_name_v3002.1002.extension
file_name_name_v3002.1003.extension 
file_name_name_v3002.1004.extension'''

new_s = re.sub('(?&lt;=\.)\d+', lambda m: '%' * len(m.group()), s)

print(new_s)
</code></pre>
<h2>Output</h2>
<pre><code>file_name_name_v3002.%%%%.extension
file_name_name_v3002.%%%%.extension
file_name_name_v3002.%%%%.extension 
file_name_name_v3002.%%%%.extension
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is what regular expressions are made for.</p>
<pre><code>import re

expr = re.compile(r'''
  [\w\d_]+                  # one or more a-z, A-Z, 0-9, or underscores (_)
  \.                        # a literal period
  (\d{4})                   # capture four digits
  \.                        # another literal period
  .*$                       # whatever through the end of the string''', re.X)
</code></pre>
<p>You can use <code>expr.match(some_string)</code> to match the value, or reverse the capturing groups to use it as part of re.sub</p>
<pre><code>subexpr = re.compile(r"([\w\d_]+\.)\d{4}(\..*)$"
subexpr.sub("\1%%%%\2", some_string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>string = '''file_name_name_v3002.1001.extension
             file_name_name_v3002.1002.extension
             file_name_name_v3002.1003.extension 
             file_name_name_v3002.1004.extension'''.split("\n")
'\n'.join(''.join(x if not x.startswith("1") else "$$$$" for x in e.split(".")) for e in string)
</code></pre>
<p>You could try a list comprehension</p>
</div>
<span class="comment-copy"><code>print(string(string.index('.')))</code> ?</span>
<span class="comment-copy">I get this error while trying to do that                                ^ SyntaxError: unexpected EOF while parsing</span>
<span class="comment-copy">What specifically is the output you want? You can use <code>re.sub()</code> here.</span>
<span class="comment-copy">the output I want is file_name_name_v3002.$$$$.extension</span>
<span class="comment-copy">You want the second number to be replaced by '$'? If so, please add that expected output to the question</span>
