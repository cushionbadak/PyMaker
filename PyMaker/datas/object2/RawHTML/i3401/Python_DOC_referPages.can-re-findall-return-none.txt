<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/2/library/re.html#re.findall" rel="nofollow noreferrer">documentation</a> only says that is returns "a list". I would assume that when it finds no matches it returns an empty list (but not <code>None</code>) and it never returns a <code>None</code>. But I'm not sure. Can anyone confirm?</p>
<p>Also, is there a way for me to check that in the future on my own for other functions (e.g. <code>ElementTree.findall()</code>)? Can I just assume that whenever the docs say "a list" it will behave the same way?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "hello"
&gt;&gt;&gt; re.findall("a", s)
[]
</code></pre>
<p>For these sorts of question, open your python shell and run it: as per the documentation, it always returns a list, but there is nothing to find, so its an empty list.</p>
<p>For the inner question: </p>
<blockquote>
<p>"I just want the documentation to say "it doesn't return None" or "it always returns a list"." </p>
</blockquote>
<p>I think that you need to understand the style of the Python documentation. The first line is </p>
<blockquote>
<p>"Return all non-overlapping matches of pattern in string, as a list of strings". </p>
</blockquote>
<p>If it returned anything else, it would state this. e.g: on the same page, for sub: </p>
<blockquote>
<p>"Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl. If the pattern isn’t found, string is returned unchanged" </p>
</blockquote>
<p>this states the edge case </p>
<p>You can't assume that <em>all functions</em> written by <em>anyone</em> in <em>any library</em> will have as good documentation as the python core. But for core functions in Python, yes, they generally nearly always do as the docs say. (Core functions are anything inside the sub-pages of: <a href="https://docs.python.org/2/contents.html" rel="nofollow noreferrer">https://docs.python.org/2/contents.html</a> or <a href="https://docs.python.org/3/contents.html" rel="nofollow noreferrer">https://docs.python.org/3/contents.html</a></p>
<p>If you go grab a random library from pypi, the docs might be less then perfect. </p>
<p>One of the "bad" things about python is that its documentation suffers for things like exceptions. Languages like Java, where exceptions are part of the definition of a function/method, and the return types are stricter. Basically, try to remember the Zen of Python and just flow with it. python.org/dev/peps/pep-0020</p>
</div>
<div class="post-text" itemprop="text">
<p>I agree with the existing answers/comments that you can trust builtin functions to return only what the documentation says they return, and that a bit of quick self-testing should give you confidence in the behavior of common corner cases. But for the sake of completeness, let's look a little deeper. CPython's source code for findall can be found <a href="https://github.com/python/cpython/blob/fbb490fd2f38bd817d99c20c05121ad0168a38ee/Modules/_sre.c#L742" rel="nofollow noreferrer">here</a>. We're really only interested in the return statements, which are:</p>
<pre><code>if (!state_init(&amp;state, self, string, pos, endpos))
    return NULL;

list = PyList_New(0);
if (!list) {
    state_fini(&amp;state);
    return NULL;
}

//...

state_fini(&amp;state);
return list;

error:
Py_DECREF(list);
state_fini(&amp;state);
return NULL;
</code></pre>
<p>So this function can return two possible values: a list, or NULL.</p>
<p>Returning <code>NULL</code> here signals to the interpreter that the function <a href="https://docs.python.org/3.6/extending/extending.html#intermezzo-errors-and-exceptions" rel="nofollow noreferrer">will raise an exception</a>. If the function wanted to return None, it would do <a href="https://docs.python.org/3.6/c-api/none.html#c.Py_RETURN_NONE" rel="nofollow noreferrer"><code>Py_RETURN_NONE</code></a>. It doesn't do that here, so we can reasonably assume that <code>findall</code> will always return a list, as long as it doesn't crash.</p>
</div>
<span class="comment-copy">"is there a way for me to check that in the future on my own", <code>print(ElementTree.findall('lets_check_the_output_for_non_existing_tag'))</code></span>
<span class="comment-copy">It costs very little to try yourself with a simple python interpreter. It's like 2 lines to type: one for import and one for the result.</span>
<span class="comment-copy">I actually didn't think of that. But I don't think that makes my question deserve to be downvoted. Especially, since this doesn't give me the full information (what happens in <b>any</b> case).</span>
<span class="comment-copy">@NPS Unless you can check the function against <b>any</b> input in the world (hint: you can't, i.e <i>the halting problem</i>), you can't know what happens in <b>any</b> single case. Like I already wrote, you'll have to trust the documentation, and if you don't, you can always check if the output is <code>None</code></span>
<span class="comment-copy">"Does <code>findall</code> return None if it doesn't match anything?" is easy to answer with one test. "Does <code>findall</code> ever return None under any circumstances, including but not limited to situations where it doesn't match anything?" can't be answered with any number of tests, and would require either source-diving or strong trust in the documentation. I think the latter question is something worth asking.</span>
<span class="comment-copy">Thanks, I actually didn't think of that. But now that I do, it only answers my question partially. It shows me what happens when it has no matches. But it doesn't guarantee that it will never return <code>None</code> in <b>any</b> case.</span>
<span class="comment-copy">As for "core functions in Python" - the problem is the documentation isn't explicit in that regard.</span>
<span class="comment-copy">@NPS It also doesn't guarantee that it doesn't ever return the integer <code>100</code>. You'll have to trust the documentation (and its source code)</span>
<span class="comment-copy">If you're asking for the formal proof of a library function, you might want to reword. I don't believe there is a formal proof of the python re library, but there is extensive unit tests you could look for: or you would have to trawl the source of the RE module to make sure it never returned a <code>None</code>. I suspect both of these are way beyond any practical help that the above shows?</span>
<span class="comment-copy">@NPS when you say "I just want the documentation to say "it doesn't return None" or "it always returns a list"." - I think that you need to understand the style of the Python documentation. The first line is "Return all non-overlapping matches of pattern in string, as a list of strings". If it returned anything else, it would state this. e.g: on the same page, for sub: "Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl. If the pattern isn’t found, string is returned unchanged" - this states the edge case</span>
