<div class="post-text" itemprop="text">
<p>I'm looking for a better way to handle optional <code>None</code> value (missing value) in a statement like this:</p>
<pre><code>logger.info("temp1 = %.1f, temp2 = %.1f, position = %.2f", t1, t2, pos)
</code></pre>
<p>in order to prevent: <pre>TypeError: must be real number, not NoneType</pre></p>
<p>This is what I'm doing now:</p>
<pre><code>logger.info(
    "temp1 = %s, temp2 = %s, position = %s",
    "null" if t1 is None else format(t1, '.1f'),
    "null" if t2 is None else format(t2, '.1f'),
    "null" if pos is None else format(pos, '.2f'))
    # any placeholder like "null", "None", "---", or "N/A" is fine
</code></pre>
<p>and I don't like it. Is there a better way? A solution for this small problem using <code>str.format</code> or <code>f-strings</code> would help too.</p>
</div>
<div class="post-text" itemprop="text">
<p>Create a wrapper that checks itself when <code>__format__</code> is called.</p>
<pre><code>class AnyOrNone(object):  # The wrapper is not type-specific
    def __init__(self, value):
        self.value = value

    def __format__(self, *args, **kwargs):
        if self.value is None:
            return "None"
        else:
            return self.value.__format__(*args, **kwargs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way would be to write a simple function for this, e.g.:</p>
<pre><code>def fin(obj): return "null" if obj is None else format(obj, '.1f')

logging.info("temp1 = %s, temp2 = %s, position = %s", fin(t1), fin(t2), fin(pos))
# INFO:root:temp1 = null, temp2 = 0.2, position = 6.8
</code></pre>
<p>Or you could write a function that would accept and format multiple arguments:</p>
<pre><code>def fins(*objs):
    return ("null" if obj is None else format(obj, '.1f') for obj in objs)

logging.info("temp1 = %s, temp2 = %s, position = %s", *fins(t1, t2, pos))
# INFO:root:temp1 = null, temp2 = 0.2, position = 6.8
</code></pre>
<p><strong>EDIT:</strong> Or, with Python 3.6+ f-strings:</p>
<pre><code>def ff(obj, fmt):
    return "null" if obj is None else format(obj, fmt)

logger.info(f"temp1 = {ff(t1, '.1f')}, temp2 = {ff(t2, '.1f')}, position = {ff(pos, '.2f')}")
# temp1 = None, temp2 = 0.2, position = 6.79
</code></pre>
<p>or, using precision when obj is a float, and str(obj) otherwise:</p>
<pre><code>def ff(obj, p):
    return format(obj, '.%df' % p) if isinstance(obj, float) else str(obj)

logger.info(f"temp1 = {ff(t1, 1)}, temp2 = {ff(t2, 1)}, position = {ff(pos, 2)}")
# temp1 = None, temp2 = 0.2, position = 6.79
</code></pre>
<p>where, in all cases:</p>
<pre><code>t1, t2, pos = None, 0.234, 6.789
</code></pre>
<p>If you wanted to convert <em>all</em> floats passed as <code>logging</code> arguments that way, you could create a <a href="https://docs.python.org/3/library/logging.html#logging.Handler.format" rel="nofollow noreferrer">custom handler</a>, but that seems like overkill and prone to converting things you may not want.</p>
</div>
<span class="comment-copy">Write a helper function to do this.</span>
<span class="comment-copy">@kindall Yes, that would be an improvement, but I would like to have the formatting instructions (e.g. <code>.1f</code>) in the format string - if possible.</span>
<span class="comment-copy">@VPfB what version of Python are you using?  (You could use fstrings to incorporate the <code>.1f</code> "in the format string", loosely).</span>
<span class="comment-copy">@jedwards Python 3.6</span>
<span class="comment-copy">@VPfB added a few more options that use fstrings.</span>
<span class="comment-copy">I'm getting another error: "TypeError: must be real number, not AnyOrNone"</span>
<span class="comment-copy"><code>__format__</code> is only called for new-style format strings. That means no <code>%</code> formatting. Use <code>"temp1 = {:.1f}, temp2 = {:.1f}, position = {:.2f}"</code></span>
<span class="comment-copy">Did not know that (about %). Now it works fine for me.</span>
