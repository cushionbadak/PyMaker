<div class="post-text" itemprop="text">
<p>(I'm sure this has been answered somewhere but I really couldn't find the right question. Perhaps I don't know the correct verb for this exercise?)</p>
<p>I have two lists:</p>
<pre><code>prefix = ['A', 'B', 'C']
suffix = ['a', 'b']
</code></pre>
<p>And I want to get this:</p>
<pre><code>output = ['A a', 'A b', 'B a', 'B b', 'C a', 'C b']
</code></pre>
<p>I am aware of the <code>zip</code> method, which stops at the shortest length among the lists joined:</p>
<pre><code>output_wrong = [p+' '+s for p,s in zip(prefix,suffix)]
</code></pre>
<p>So what's the most Pythonic way of doing this?</p>
<p><strong>EDIT:</strong></p>
<p>While majority of the answers prefer <code>itertools.product</code>, I instead much prefer this:</p>
<pre><code>output = [i + ' ' + j for i in prefix for j in suffix]
</code></pre>
<p>as it doesn't introduce a new package, however basic that package is (ok I don't know which way is faster and this might be a matter of personal preference).</p>
</div>
<div class="post-text" itemprop="text">
<p>Use List Comprehension</p>
<pre><code>prefix = ['A', 'B', 'C']
suffix = ['a', 'b']
result = [val+" "+val2 for val in prefix for val2 in suffix ]
print(result)
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>['A a', 'A b', 'B a', 'B b', 'C a', 'C b']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>itertools.product</code> and list comprehension,</p>
<pre><code>&gt;&gt;&gt; [i + ' ' + j for i, j in product(prefix, suffix)]
# ['A a', 'A b', 'B a', 'B b', 'C a', 'C b']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>:</p>
<pre><code>import itertools

prefix = ['A', 'B', 'C']
suffix = ['a', 'b']

print([f'{x} {y}' for x, y in itertools.product(prefix, suffix)])
# ['A a', 'A b', 'B a', 'B b', 'C a', 'C b']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is called a Cartesian product:</p>
<pre><code>[p + ' ' + s for p, s in itertools.product(prefix, suffix)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>product</code>,</p>
<pre><code>In [33]: from itertools import product

In [34]: map(lambda x:' '.join(x),product(prefix,suffix))
Out[34]: ['A a', 'A b', 'B a', 'B b', 'C a', 'C b']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply use <code>list comprehension</code>:</p>
<pre><code>prefix = ['A', 'B', 'C']
suffix = ['a', 'b']
output = [i+" "+j for i in prefix for j in suffix]
print(output)
</code></pre>
<p>Output:</p>
<pre><code>['A a', 'A b', 'B a', 'B b', 'C a', 'C b']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import product
map(' '.join, product(prefix, suffix))
# ['A a', 'A b', 'B a', 'B b', 'C a', 'C b']
</code></pre>
</div>
<span class="comment-copy">I like how we got 4 answers of roughly the same thing within a minute. :D</span>
<span class="comment-copy">@MateenUlhaq There are hundred similar questions out there, instead of answering this, we should direct OP to one of them, but you know SO.</span>
<span class="comment-copy">@BcK In fairness to myself, I've already hit the rep cap for the day and just wanted to write a <code>itertools</code> answer. ;) ...Though closing as duplicate was probably the more accurate thing to do.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/533905/get-the-cartesian-product-of-a-series-of-lists">Get the cartesian product of a series of lists?</a></span>
<span class="comment-copy">As I said I probably didn't know the right word, in this case "cartesian product". Thank you guys for pointing this out.</span>
<span class="comment-copy">Is there a reason you convert to list?</span>
