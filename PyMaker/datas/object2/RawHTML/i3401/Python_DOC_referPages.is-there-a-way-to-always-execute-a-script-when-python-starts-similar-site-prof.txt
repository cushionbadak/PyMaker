<div class="post-text" itemprop="text">
<p>In the R programming language, there is a site.profile file that defines some code that R processes execute on start up. Is there similar functionality in Python?</p>
<p>Edit: to clarify, this script should be executed if the user calls python from the command line, but also if python is spawned from another process (e.g. if the user's script uses subprocess to spawn another python).</p>
</div>
<div class="post-text" itemprop="text">
<p>If you only want this for interactive sessions (as opposed to also happening every time you run a script with <code>python myscript.py</code> or <code>./myscript</code> or a module with <code>python -m mymodule</code>), what you want is the environment variable <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP" rel="nofollow noreferrer"><code>PYTHONSTARTUP</code></a>:</p>
<blockquote>
<p>If this is the name of a readable file, the Python commands in that file are executed before the first prompt is displayed in interactive mode. The file is executed in the same namespace where interactive commands are executed so that objects defined or imported in it can be used without qualification in the interactive session…</p>
</blockquote>
<p>If you want this to always happen forever, of course, you need to set this environment variable in some appropriate global place—e.g., your shell profile on most *nix platforms, or both your shell profile and your launchd profile on macOS, or the appropriate part of the Control Panel on Windows (the appropriate part changes with almost every new version of Windows, but it usually has "System" in the name).</p>
<p>If you want this to happen for <em>all</em> users, not just the current user… the details for how to set a system-wide environment variable are more platform-specific, but otherwise the idea is the same.</p>
<hr/>
<p>If you want this to happen for <em>every</em> Python session, even when some other program is running a Python script and you didn't even know it was doing that… what you want is either <code>usercustomize</code> or <code>sitecustomize</code>, as documented in the <a href="https://docs.python.org/3/library/site.html" rel="nofollow noreferrer"><code>site</code></a> documentation:</p>
<blockquote>
<p><strong>This module is automatically imported during initialization.</strong> The automatic import can be suppressed using the interpreter’s -S option.</p>
<p>…</p>
<p>After these path manipulations, an attempt is made to import a module named <code>sitecustomize</code>, which can perform arbitrary site-specific customizations. It is typically created by a system administrator in the <code>site-packages</code> directory.</p>
<p>After this, an attempt is made to import a module named <code>usercustomize</code>, which can perform arbitrary user-specific customizations, if <code>ENABLE_USER_SITE</code> is true. This file is intended to be created in the user site-packages directory (see below), which is part of sys.path unless disabled by <code>-s</code>…</p>
</blockquote>
<p>So, you want to find an appropriate place to override this. First try this:</p>
<pre><code>python3 -m site
</code></pre>
<p>Then, if this didn't give you <code>sys.path</code> (probably only on pretty old Python, but just in case…), also do this:</p>
<pre><code>python3 -c 'import sys; print('\n'.join(sys.path))'
</code></pre>
<p>If you want this customization to happen only for the current user, you want to create a <code>usercustomize.py</code> file in the <code>USER_SITE</code> directory listed by <code>python3 -m site</code>. If the directory doesn't exist, create it.</p>
<p>If you want it to happen for all users, you want a <code>sitecustomize.py</code> file in one of the <code>sys.path</code> directories. The problem is that there may already be one. For example, most linux distros' builtin Python packages have their own <code>sitecustomize</code> modules. If there is, <code>python3 -c 'import sitecustomize; print(sitecustomize.__file__)</code> will tell you where it is. Then, you can edit, or you can copy it, edit that copy, and place that copy somewhere that comes earlier in <code>sys.path</code> than the original. As a general rule, <code>/usr/local</code> is probably better than <code>/usr</code>, and <code>site-packages</code> is probably better than <code>dist-packages</code> is probably better than anything else.</p>
</div>
<div class="post-text" itemprop="text">
<p>The Python mechanism is called... <code>site</code>. It is a module that is automatically imported and sets up your environment. If it finds modules <code>sitecustomize.py</code> and <code>usercustomize.py</code>, it will import them as well. So these two are where you would put site-wide and personal customizations that you want to be a permanent part of your Python environment. See the <a href="https://docs.python.org/3.6/library/site.html" rel="nofollow noreferrer"><code>site</code> documentation</a> for more details.</p>
</div>
<div class="post-text" itemprop="text">
<p>File pointed by your environmental variable <code>PYTHONSTARTUP</code> would be run on starting an interactive python session</p>
<p>And <code>USER_SITE/usercustomize.py</code> will be run for non-interactive python session.</p>
<p>Run <code>python -c "import site; print(site.USER_SITE)"</code> to find the <code>USER_SITE</code> dir location</p>
</div>
<span class="comment-copy">Are you looking to do this only for starting an interactive session, or no . matter <i>how</i> Python is started (so every time you run a script or <code>-m</code> a module, it'll happen there as well)?</span>
<span class="comment-copy">Why not alias the python binary and be done with it?</span>
<span class="comment-copy">@zwer But alias it to <i>what</i>? If you write, say, a bash script that runs Python, feeds in a heredoc, and then drops to real stdin, you can't use that as an executable in a shbang line on most platforms.</span>
