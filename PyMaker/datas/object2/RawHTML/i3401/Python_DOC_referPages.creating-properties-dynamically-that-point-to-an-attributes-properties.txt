<div class="post-text" itemprop="text">
<p>I want to make properties from an attribute of my class accessible directly through the instance of the class (without inheriting from it). So basically if I have:</p>
<pre><code>class A:
    @property
    def foo(self):
        print("foo")
    @property
    def bar(self):
        print("bar")

class B:
    def __init__(self):
        self._a = A()
</code></pre>
<p>Instead of doing <code>b._a.bar</code> I want to be able to do <code>b.bar</code>. Based on <a href="https://stackoverflow.com/a/1455009/7051971">this answer here</a>, I tried the following in class B:</p>
<pre><code>class B:
    def __init__(self):
        self._a = A()
        attrs = [attr for attr in dir(self._a) 
                 if not callable(self._a.__getattribute__(attr)) 
                 and not attr.startswith("__")]
        for attr in attrs:
            setattr(self.__class__, attr, 
                    property(lambda s: s._a.__getattribute__(attr)))
</code></pre>
<p>But when instantiating and testing it out, I get one of those weird python moments:</p>
<pre><code>&gt;&gt;&gt; b = B()
foo
bar
&gt;&gt;&gt; b.foo
bar
&gt;&gt;&gt; b.bar
bar
</code></pre>
<ol>
<li>Why are both 'foo' and 'bar' printed out when creating the instance ?</li>
<li>How does the 'foo' property point to the same getter as 'bar' ?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><code>bar</code> and <code>foo</code> are printed when you create the instance because doing <code>_a.__getattribue__("foo")</code> and <code>_a.foo</code> will both call the property object to get a value.</p>
<p>Both of the attributes you set up in <code>B</code> use lambdas to get the correct <code>property</code> from <code>A</code>.  This is a common mistake when calling lambdas.  Because the <code>attr</code> value is inherited from the outside scope, it isn't frozen when the lambda is evaluated.  Instead, it is simply the same <code>attr</code> reference as the enclosing scope's <code>attr</code>, and changes accordingly.  So all of your lambdas will have the same <code>attr</code> value.</p>
<p>You can define a <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer"><code>B.__getattr__</code></a> method instead.  This method is called when ordinary attribute lookup fails.</p>
<pre><code>class B:
    def __init__(self):
        self._a = A()
    def __getattr__(self, name):
        return getattr(self._a, name)

b = B()
b.bar
# bar
b.foo
# foo
</code></pre>
</div>
<span class="comment-copy">Your second question has a more detailed answer here: <a href="https://stackoverflow.com/questions/10452770/python-lambdas-binding-to-local-values" title="python lambdas binding to local values">stackoverflow.com/questions/10452770/â€¦</a></span>
<span class="comment-copy">Thank you for your answer and link to the other question ! I thought of defining <code>__getattr__</code>, but in my mind it would override the standard attribute accessor. It seems logical (and it's convenient to me at least) that it would only be called when the standard accessor fails. It also ends up being way cleaner code than my original attempt. TIL that lambdas are great but can be dangerously misleading...</span>
