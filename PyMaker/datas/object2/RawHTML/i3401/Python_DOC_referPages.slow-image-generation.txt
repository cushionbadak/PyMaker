<div class="post-text" itemprop="text">
<p>I'm relatively new to python an I build a Tower of Hanoi solver which print the solution as an image (<a href="https://en.wikipedia.org/wiki/Tower_of_Hanoi" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Tower_of_Hanoi</a>)</p>
<p>It works as expected but generating the image is extremely slow.</p>
<p>Here is the code:</p>
<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
from PIL import Image


def hanoi(disks, source, helper, target, steps):
    if disks &gt; 0:
        hanoi(disks - 1, source, target, helper, steps)
        target.append(source.pop())
        steps.append([SOURCE[:], HELPER[:], TARGET[:]])
        hanoi(disks - 1, helper, source, target, steps)


def save_image(name):
    print('\nSaving image {}.png'.format(name))
    data = []
    peg = args.disks * 2
    cells = peg * 3 + 40  # 40 is to put some spaces between pegs and the border
    for step in steps:
        for _ in range(5):  # White space
            data.append([1 for _ in range(cells)])

        src = step[0]
        hlp = step[1]
        trg = step[2]
        size = max(len(src), len(hlp), len(trg))
        for _ in range(size - len(src)):
            src.append(0)
        for _ in range(size - len(hlp)):
            hlp.append(0)
        for _ in range(size - len(trg)):
            trg.append(0)
        src.reverse()
        hlp.reverse()
        trg.reverse()

        for s, h, t in zip(src, hlp, trg):
            blanksrc = peg - 2 * s
            blankhlp = peg - 2 * h
            blanktrg = peg - 2 * t
            row = [1 for _ in range(10)]
            row += [1 for _ in range(blanksrc // 2)]
            row += [0 for _ in range(s * 2)]
            row += [1 for _ in range(blanksrc // 2)]
            row += [1 for _ in range(10)]
            row += [1 for _ in range(blankhlp // 2)]
            row += [0 for _ in range(h * 2)]
            row += [1 for _ in range(blankhlp // 2)]
            row += [1 for _ in range(10)]
            row += [1 for _ in range(blanktrg // 2)]
            row += [0 for _ in range(t * 2)]
            row += [1 for _ in range(blanktrg // 2)]
            row += [1 for _ in range(10)]
            data.append(row)

        for _ in range(5):
            data.append([1 for _ in range(cells)])  # White space
        data.append([0 for _ in range(cells)])  # Black line to separate steps

        da = [bit for row in data for bit in row]
        image = Image.new('1', (cells, len(data)))
        image.putdata(da)
        image.save('{}.png'.format(name))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--disks', type=int, default=4,
                        help='Number of disks, default 4')
    parser.add_argument('-f', '--filename', help='Filename', required=True)
    args = parser.parse_args()

    if not args.disks &gt; 0:
        raise ValueError('There must be at least one disk')

    SOURCE = list(reversed(range(1, args.disks + 1)))
    TARGET = []
    HELPER = []
    steps = [[SOURCE[:], HELPER[:], TARGET[:]]]

    hanoi(args.disks, SOURCE, HELPER, TARGET, steps)

    save_image(args.filename)
</code></pre>
<p>As said before, it takes a extremely long time to generate the image.</p>
<p>How can I make it faster and why it is so slow?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>your block for generating the image is in the for loop. unindent it and you divide by 3 the execution time. the rest (.04 second on my old desktop, which is not that long) is PIL import overhead. i think the only way to be faster is using ppm image format (but it gives huge files) and not using PIL. anyway, you should still listen to @PixelEinstein's advice and try codereview</p>
</div>
<span class="comment-copy">Since your code is working correctly, you probably want to take this over to <a href="https://codereview.stackexchange.com/">codereview.stackexchange.com</a>.</span>
<span class="comment-copy">That was that! I will search for ppm images, that may be interesting. Thanks a lot</span>
<span class="comment-copy">By the way, how do you measure the execution time?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/profile.html#module-cProfile" rel="nofollow noreferrer"><code>cProfile</code></a></span>
