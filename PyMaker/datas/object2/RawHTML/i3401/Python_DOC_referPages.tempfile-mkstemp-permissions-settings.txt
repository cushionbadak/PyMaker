<div class="post-text" itemprop="text">
<p>I am using <code>tempfile.mkstemp</code> to generate a random available filename and write some content with <code>os.fdopen</code>. I then pass the filename to a task via <code>celery</code>. </p>
<p>This task opens the file, processes the content, and finally removes the file.
In testing this works fine, however I have realised that this will break in my live environment where the user running the task is not the same as the one which creates the file. </p>
<p>This means that the user cannot open the file because <code>tempfile.mkstemp</code> sets the permissions to <code>600</code>(<code>-rw-------</code>). </p>
<p>I cannot make both processes run by the same user, so is there some way to modify the file permissions set by <code>tempfile.mkstemp</code>? </p>
<p>I am running Python 3.6 on Ubuntu 14.04.</p>
</div>
<div class="post-text" itemprop="text">
<p>Given that you use os.fdopen after you call mkstemp(), you may be better off using tempfile.NamedTemporaryFile(delete=False). It returns a Python file object instead of an <code>fd</code>.</p>
<p>Either way, the returned file will have mode=0600, so you will need to change it. Use <code>os.fchmod(temp_file.fileno(), 0640)</code> or similar (change the mode as per your needs).</p>
</div>
<div class="post-text" itemprop="text">
<p>No, apart from manually modyfing permissions using <code>chmod</code> command, there is no way to modify permissions of file created by <code>tempfile.mkstemp</code>. This function by design creates temporary file <em>in the most secure manner possible</em> so <em>the file is readable and writable only by the creating user ID</em>. See <a href="https://docs.python.org/2/library/tempfile.html#tempfile.mkstemp" rel="nofollow noreferrer">mkstemp documentation</a>.</p>
<p>Create your temporary file using <a href="https://docs.python.org/2/library/tempfile.html#tempfile.TemporaryFile" rel="nofollow noreferrer"><code>tempfile.TemporaryFile</code></a> or <a href="https://docs.python.org/2/library/tempfile.html#tempfile.NamedTemporaryFile" rel="nofollow noreferrer"><code>tempfile.NamedTemporaryFile</code></a> instead.</p>
</div>
<span class="comment-copy">I would encourage you to <a href="https://docs.python.org/3/library/tempfile.html#tempfile.mkstemp" rel="nofollow noreferrer">read the documentation</a> first when you have a question. Then, come to StackOverflow.</span>
<span class="comment-copy">@robobrobro I appreciate your point, but I did read that documentation, and I couldn't see anything explicitly stated regarding the file permissions</span>
<span class="comment-copy">"The file is readable and writable only by the creating user ID. If the platform uses permission bits to indicate whether a file is executable, the file is executable by no one."</span>
<span class="comment-copy">Ah fair enough. Although I don't think it's clear whether that can be altered? Looks like the only way may be <code>os.chmod</code></span>
<span class="comment-copy">I'm accepting this as you've clarified the <code>os.chmod</code> issue for me</span>
<span class="comment-copy">Ok, I thought this may be the case, do you think it is better to use <code>tempfile.NamedTemporaryFile</code> or to use <code>os.fchmod</code> on the <code>mkstemp</code> file?</span>
<span class="comment-copy">I would use <code>NamedTemporaryFile</code>. Looking at your use case you actually don't  need <i>secure</i> temporary file. So there's no point in using <code>tempfile.mkstemp</code></span>
<span class="comment-copy">NamedTemporaryFile is as secure as tempfile.mkstemp - they use the same code internally. Call NamedTemporaryFile(delete=False) to get the mkstemp() behavior, plus a python file object (which you need anyway).</span>
<span class="comment-copy">It does seems as though <code>NamedTemporaryFile</code> also creates files with the <code>0600</code> permissions mode</span>
<span class="comment-copy">You're right. All three <code>mkstemp</code>, <code>TemporaryFile</code>, and <code>NamedTemporaryFile</code> use actually the same internal function for creating files. And <code>006</code> mode is hardcoded there. <a href="https://stackoverflow.com/questions/10541760/can-i-set-the-umask-for-tempfile-namedtemporaryfile-in-python">Here</a> you can find some workarround</span>
