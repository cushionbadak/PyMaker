<div class="post-text" itemprop="text">
<p>I have a list which consists out of two numpy arrays, the first one telling the index of a value and the second containing the belonging value itself. It looks a little like this:</p>
<pre><code>x_glob = [[0, 2], [85, 30]]
</code></pre>
<p>A function is now receiving the following input:</p>
<pre><code>x = [-10, 0, 77, 54]
</code></pre>
<p>My goal is to swap the values of x with the values from x_glob based on the given index array from x_glob. This example should result in something like this:</p>
<pre><code>x_new = [85, 0, 30, 54]
</code></pre>
<p>I do have a solution using a loop. But I am pretty sure there is a way in python to solve this issue more efficient and elegant. </p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.scipy.org/doc/numpy-1.13.0/user/basics.indexing.html#index-arrays" rel="nofollow noreferrer"><strong><code>NumPy</code></strong> arrays may be indexed with other arrays</a>, which makes this replacement trivial.</p>
<p>All you need to do is index your second array with <code>x_glob[0]</code>, and then assign <code>x_glob[1]</code></p>
<pre><code>x[x_glob[0]] = x_glob[1]
</code></pre>
<p>To see <em>how</em> this works, just look at the result of the indexing:</p>
<pre><code>&gt;&gt;&gt; x[x_glob[0]]
array([-10,  77])
</code></pre>
<p>The result is an array containing the two values that we need to replace, which we then replace with another <code>numpy</code> array, <code>x_glob[1]</code>, to achieve the desired result.</p>
<hr/>
<pre><code>&gt;&gt;&gt; x_glob = np.array([[0, 2], [85, 30]])
&gt;&gt;&gt; x = np.array([-10, 0, 77, 54])
&gt;&gt;&gt; x[x_glob[0]] = x_glob[1]
&gt;&gt;&gt; x
array([85,  0, 30, 54])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For a non-<code>numpy</code> solution, you could create a <code>dict</code> mapping the indices from <code>x_glob</code> to the respective values and then use a list comprehension with that dict's <code>get</code> method:</p>
<pre><code>&gt;&gt;&gt; x_glob = [[0, 2], [85, 30]]
&gt;&gt;&gt; x = [-10, 0, 77, 54]
&gt;&gt;&gt; d = dict(zip(*x_glob))
&gt;&gt;&gt; [d.get(i, n) for i, n in enumerate(x)]
[85, 0, 30, 54]
</code></pre>
<p>Or using <code>map</code> with multiple parameter lists (or without <code>zip</code> using <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow noreferrer"><code>itertools.starmap</code></a>):</p>
<pre><code>&gt;&gt;&gt; list(map(d.get, *zip(*enumerate(x))))
[85, 0, 30, 54]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My solution also uses <code>for</code> loop, but it's pretty short and elegant (I think), works in place and is effective as it does not have to iterate through full x array, just through list of globs:</p>
<pre><code>for k,v in zip(*x_glob):
    x[k] = v
</code></pre>
</div>
<span class="comment-copy">How does your loop-solution look like?</span>
<span class="comment-copy">You could also use <code>for k, v in zip(...</code></span>
