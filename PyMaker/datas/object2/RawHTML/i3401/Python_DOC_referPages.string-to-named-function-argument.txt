<div class="post-text" itemprop="text">
<p>I am trying to do the following in python: 
There is this function which takes named arguments.</p>
<pre><code>def functionA(self, input1, argument2='', argument3='',argument4='DefaultVal'):
## do something
</code></pre>
<p>My input string is via command line and should look like this </p>
<pre><code>testcommand test1 argument2=test2 argument3=test3
</code></pre>
<p>This should resolve to the call the above function using the named arguments. What would be the easiest way</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's one way, with limited error checking, but I definitely recommend checking out <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a>:</p>
<pre><code>import sys

# To simulate arguments
sys.argv = ['&lt;script&gt;', 'foo', 'test1', 'arg2=test2', 'arg3=test3']

# An example of a function that you want to call
def foo(input1, arg2='', arg3='', arg4='default'):
    print("foo called:")
    print(input1, arg2, arg3, arg4)

# Add callable functions to a dict
CALLABLES = {'foo': foo}

def call_callable(argv):
    args = []                       # A list for positional arguments
    kwargs = {}                     # A dict for keyword arguments
    func = CALLABLES[argv[0]]       # Get callable by name (may raise KeyError)
    # Parse remaining arguments into either args or kwargs
    for arg in argv[1:]:
        if '=' in arg:
            kwargs.update((arg.split('='),))
        else:
            args.append(arg)

    # Call function, return it's result to the script (if it matters)
    return func(*args, **kwargs)

# Slice argv to ignore the first (script) element
call_callable(sys.argv[1:])
</code></pre>
<p>The argument processing is straightforward, building a list for positional arguments and a dictionary for keyword arguments, then unpacking them into the <code>func()</code> call.</p>
<p>I also created a <code>CALLABLES</code> dict that will allow you to access functions by name in a safer way than going through <code>globals()</code>.</p>
</div>
<span class="comment-copy">I'd probably use the <a href="https://docs.python.org/3/library/argparse.html?highlight=argparse#module-argparse" rel="nofollow noreferrer"><code>argparse</code></a> stdlib module, but you could certainly do it yourself with <code>sys.argv</code></span>
