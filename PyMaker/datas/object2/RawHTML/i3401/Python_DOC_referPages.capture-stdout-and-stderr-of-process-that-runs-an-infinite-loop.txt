<div class="post-text" itemprop="text">
<p>I want to run a process that runs an infinite loop (for example, starting a database server) from a python script and capture stdout and stderr. I tried this, but <code>p.communicate()</code> never returns, apparently because the process needs to finish first.</p>
<pre><code>from subprocess import Popen, PIPE, STDOUT
cmd = "python infinite_loop.py"
p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT)
print("the process is running")
stdout, stderr = p.communicate()
print(stdout)
</code></pre>
<p>I'd like to get the output in some kind of streaming form. For example, I might want to save every 100 characters to a new log file. How can I do it?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Edit:</strong> Something closer to what you already had, as asyncio seems like overkill for a single coroutine:</p>
<pre><code>import sys
from subprocess import Popen, PIPE, STDOUT

args = (sys.executable, '-u', 'test4.py')
cmd = ' '.join(args)
p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=STDOUT, universal_newlines=True)
print("the process is running")

for line in iter(p.stdout.readline,''):
    line = line.rstrip()
    print(line)
</code></pre>
<hr/>
<p><strong>Original:</strong></p>
<p>I threw something together.  The following uses <a href="https://docs.python.org/3/library/asyncio-subprocess.html" rel="nofollow noreferrer"><code>asyncio.subprocess</code></a> to read lines from a subprocess' output, and then do something with them (in this case, just <code>print()</code> them).</p>
<p>The subprocess is specified by <code>args</code>, and in my case is just running another python instance in unbuffered mode with the following script (test4.py):</p>
<pre><code>import time
for _ in range(10):
    print(time.time(), flush=True)
    time.sleep(1)
</code></pre>
<p>I'm sleeping in the <code>for</code> loop so it's clear whether the lines are coming in individually or all at once when the program has finished.  (If you don't believe me, you can change the <code>for</code> loop to <code>while True:</code>, which will never finish).</p>
<p>The "supervisor" script is:</p>
<pre><code>import asyncio.subprocess
import sys


async def get_lines(args):
    proc = await asyncio.create_subprocess_exec(*args, stdout=asyncio.subprocess.PIPE)

    while proc.returncode is None:
        data = await proc.stdout.readline()
        if not data: break
        line = data.decode('ascii').rstrip()
        # Handle line (somehow)
        print(line)


if sys.platform == "win32":
    loop = asyncio.ProactorEventLoop()
    asyncio.set_event_loop(loop)
else:
    loop = asyncio.get_event_loop()

args = (sys.executable, '-u', 'test4.py')
loop.run_until_complete(get_lines(args))
loop.close()
</code></pre>
<p>Note that <code>async def</code> is Python 3.5+, <a href="https://stackoverflow.com/questions/40571786/asyncio-coroutine-vs-async-def">but you could use <code>@asyncio.coroutine</code> in 3.4</a>.</p>
</div>
<span class="comment-copy">I feel like I've done this with <a href="https://docs.python.org/3/library/asyncio-subprocess.html" rel="nofollow noreferrer">asyncio.subprocess</a>, but I unfortunately don't have a code sample for you.  (Following <a href="https://docs.python.org/3/library/asyncio-subprocess.html#subprocess-using-streams" rel="nofollow noreferrer">this example</a> specifically).</span>
