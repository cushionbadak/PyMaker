<div class="post-text" itemprop="text">
<p>In my high_schools.csv file I have this:</p>
<pre><code>high_school,City,State,zipcode,latitude,longitude
EPISCOPAL,BOISE,ID,83701,43.6,-116
</code></pre>
<p>I want to see if a value exists and then return the zip, latitude, and/or longitude</p>
<p>This is what I have so far but it's checking for the entire row instead of just the beginning.</p>
<pre><code>def find_voucher(high_school, city,state,filename):
    with open(filename, 'rU') as f:
        return ("{0},{1},{2}".format(high_school,city,state)) in f
</code></pre>
<p>When I run this it will return as False because it is matching the entire row and not just the first 3 columns.  How could I change it to match the first part and return the entire row or just the zipcode, latitude, longitude?</p>
<pre><code>find_voucher('EPISCOPAL', 'BOISE', 'ID', 'C:/high_schools.csv')    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>csv</code> module.</p>
<p><strong>Demo:</strong></p>
<pre><code>import csv

def find_voucher(high_school, city,state,filename):
    with open(filename, "r") as infile:
        reader = csv.reader(infile)
        next(reader)
        for line in reader:
            if [high_school, city,state] == line[:3]:
                return line[3:] 

print( find_voucher('EPISCOPAL', 'BOISE', 'ID', filename) )
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>['83701', '43.6', '-116']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to write an if statement, to check the values you pass in:</p>
<pre><code>def find_voucher(high_school, city, state, filename):
   with open(filename) as f:
     reader = csv.reader(f, delimiter=',')
     for row in reader:
        if row[0] == high_school and row[1] == city and row[2] == state:
             return row
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer"><code>csv.DictReader()</code></a> to convert your rows into dictionaries, then you can explicitly check the values you pass in with simple lookups.</p>
<p><strong>Code:</strong></p>
<pre><code>from csv import DictReader

def find_voucher(high_school, city, state, filename):
    with open(filename) as csvfile:
        reader = DictReader(csvfile)

        for row in reader:

            # check the arguments against the row
            if (row['high_school'] == high_school and
                row['City'] == city and
                row['State'] == state):

               return dict(row)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>{'high_school': 'EPISCOPAL', 'City': 'BOISE', 'State': 'ID', 'zipcode': '83701', 'latitude': '43.6', 'longitude': '-116'}
</code></pre>
<p>In <strong>Python 3.6</strong>,  <code>DictReader()</code> returns a <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict()</code></a>, so you can just wrap <code>dict()</code> to return a normal dictionary. If this doesn't bother you, you can just leave it as <code>return row</code>, since an <code>OrderedDict()</code> is  just an ordered dictionary. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use pandas module.</p>
<pre><code>import pandas as pd
df = pd.read_csv(filename)
row = df.query('high_school == "EPISCOPAL" &amp; City=="BOISE" &amp; State=="ID"')
</code></pre>
<p>row here is dataframe like this:</p>
<pre><code>  high_school   City State  zipcode  latitude  longitude
0   EPISCOPAL  BOISE    ID    83701      43.6       -116
</code></pre>
<p>You will get the required row and you can return whatever column values you want from it.
Saves you writing all the loops.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code># import pandas as pd
import pandas  

# load 1st row of the csv file into the df
df = pd.read_csv('high_school.csv', nrows = 1)

# lock the slice of the loaded df which matches the condition. the condition is set for the column value being in the list of expected values
df = df.loc[(df['City'].isin(['BOISE']))]

# return the needed columns from sliced dataframe
df = df.iloc[:,[3,4,5]]
</code></pre>
</div>
<span class="comment-copy">Thanks.  Worked great.</span>
<span class="comment-copy">I think I'll actually use your answer as accessing the data from the dict seems to be more intuitive rather than using the order in a list.</span>
<span class="comment-copy">@nonegiven72 No worries. I do find this easier to use, since you only have to do dictionary lookups.</span>
<span class="comment-copy">please add some explanation</span>
<span class="comment-copy">the code is self explanatory. there is more comments than code.</span>
