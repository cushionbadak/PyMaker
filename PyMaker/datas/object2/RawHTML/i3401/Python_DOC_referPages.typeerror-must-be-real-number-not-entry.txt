<div class="post-text" itemprop="text">
<p>I am creating a code to create a calculator but I keep on getting this error: </p>
<pre><code>Traceback (most recent call last):
     File "C:\Users\Monish Shah\AppData\Local\Programs\Python\Python36- 
  32\lib\tkinter\__init__.py", line 1702, in __call__
       return self.func(*args)
     File "C:\Users\Monish Shah\AppData\Local\Programs\Python\Python36- 
 32\monish-play\calc-completed-copy-for-editing-copy2.py", line 40, in click
Label (window, text = str(sqrt(n_textentry)), bg = "white") .grid(row = 13, 
  column = 0, sticky = N)
    TypeError: must be real number, not Entry
</code></pre>
<p>Does anyone know why my code does not work? I don't really understand why it cannot be and entry since I am collecting the user's input? I was researching but I could not figure out how to correctly incorporate the user's input into the code.</p>
<p>Here is my code that I used:</p>
<pre><code>from math import sqrt
from tkinter import *

window = Tk()
window.title("Welcome to Calculator ")
window.configure(background = "white")
Label (window, text = "Calculator", bg = "white") .grid(row = 0, column = 0, 
sticky = N)


#to create the box for the first number and store it
Label (window, text = "Enter the first number", bg = "white") .grid(row = 1, 
column = 0, sticky = N)
n_textentry = Entry(window, width = 10, bg = "white")
n_textentry.grid(row = 2, column = 0, sticky = N)

#to create the box for the second number
Label (window, text = "Enter the second number", bg = "white") .grid(row = 5, 
column = 0, sticky = N)
m_textentry = Entry(window, width = 10, bg = "white")
m_textentry.grid(row = 6, column = 0, sticky = N)


#click function
def click():
    n_textentry.get()

    m_textentry.get()

    operation_textentry.get()

    if operation_textentry == 1:
        result1 = Label (window, text = str(n_textentry + m_textentry), bg = 
"white") .grid(row = 13, column = 0, sticky = N)
    elif operation_textentry == 2:
         Label (window, text = str(n_textentry - m_textentry), bg = "white") 
.grid(row = 13, column = 0, sticky = N)
    elif operation_textentry == 3:
         Label (window, text = str(n_textentry * m_textentry), bg = "white") 
.grid(row = 13, column = 0, sticky = N)
    elif operation_textentry == 4:
         Label (window, text = str(n_textentry / m_textentry), bg = "white") 
.grid(row = 13, column = 0, sticky = N)
    elif operation_textentry == 5:
         Label (window, text = str(n_textentry ** m_textentry), bg = "white") 
.grid(row = 13, column = 0, sticky = N)
    else:
         Label (window, text = str(sqrt(n_textentry)), bg = "white") 
.grid(row = 13, column = 0, sticky = N)


   # operation_textentry == 6:
     #   Label (window, text = str(sqrt(n_textentry)), bg = "white") 
.grid(row = 13, column = 0, sticky = N)
    #else:
     #   print("Invalid Operation ")




#to show list of options
Label (window, text = '''
Enter 1 for addition
Enter 2 for subtraction
Enter 3 for multiplication
Enter 4 for division
Enter 5 for exponentiation
Enter 6 for square root *This will only work for 1st choice*''', bg = 
"white") .grid(row = 9, column = 0, sticky = W)

operation_textentry = Entry(window, width = 10, bg = "white")
operation_textentry.grid(row = 10, column = 0, sticky = N)
Button(window, text = "Submit", width = 6, command=click) .grid(row = 11, 
column = 0, sticky = N)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a number of problems with this code:</p>
<ul>
<li>You need to store the results of those <code>get</code> calls.</li>
<li><a href="https://stackoverflow.com/a/51141082/908494">As suggested by Joel</a>, you need to convert them to <code>float</code> or <code>int</code>.</li>
<li>You should create the results <code>Label</code> once at startup, and <code>config</code> the text in this callback, instead of creating a new <code>Label</code> every time the user hits <code>Submit</code>.</li>
<li>Instead of repeating all of the same code 6 times, just calculate a <code>result</code> in the <code>elif</code> chain, and then use it at the end.</li>
</ul>
<p>I already explained most of this in my answer to your previous question.</p>
<p>The result should look something like this:</p>
<p>result_label = Label(window, text = str(n_textentry ** m_textentry), bg = "white")
result_label.grid(row = 13, column = 0, sticky = N)</p>
<pre><code>def click():
    n = int(n_textentry.get())
    m = int(m_textentry.get())
    operation = int(operation_textentry.get())

    if operation == 1:
        result = n+m
    elif operation == 2:
        result = n-m
    elif operation == 3:
        result = n*m
    elif operation == 4:
        result = n/m
    elif operation == 5:
        result = n**m
    else:
        result = "Invalid Operation"
    result_label.config(text=str(result))
</code></pre>
<p>As I mentioned before, you probably want some error handling for the case where the user leaves one of the entries blank, or inputs text instead of a number, or divides by zero, etc. The simplest way to do this with a <code>try:</code> around the whole <code>click</code> function:</p>
<pre><code>def click():
    try:
        n = int(n_textentry.get())
        # etc.
    except Exception as e:
        result_label.config(text=repr(e))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try converting user input to a <code>float</code> or <code>int</code>. It looks like you're trying to apply a mathematical operation on user input (the <code>Entry</code> object), but mathematical operations are not supported for <code>Entry</code> objects.</p>
</div>
<span class="comment-copy">Ok but I do not really understand what the except case actually does.</span>
<span class="comment-copy">@MonishShah Do you not know about <code>try</code>/<code>except</code>? <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">The official tutorial</a> explains it nicely, but take a look at <a href="https://repl.it/repls/ImperfectScentedArrays" rel="nofollow noreferrer">this example code</a> that should what kinds of text you'd get from different problems with the user input here.</span>
<span class="comment-copy">Ah so the <code>except</code> is kind of a debugging tool to find the error?</span>
<span class="comment-copy">@MonishShah Well, in Python, exceptions are used <i>both</i> for debugging bugs in your code, <i>and</i> for handling user error. For example, if the user types <code>spam</code> instead of <code>12</code> for the first number, you'll get something like <code>ValueError: could not convert string to float: 'spam'</code>. That's not a bug in your code that you can fix; that's a user error that you have to handle by telling the user about it. Ideally your program should have more helpful error messages than the raw Python exceptions, but they work as a decent bare minimum.</span>
<span class="comment-copy">How would I change it to a <code>float</code> or <code>int</code> because you are using the <code>textentry</code> so wouldn't it stay as a <code>entry</code>?</span>
<span class="comment-copy">Using the <code>int()</code> or <code>float()</code> function is my first guess. However, tkinter might have a method to convert <code>Entry</code> objects to numeric types. If <code>int()</code> and <code>float()</code> don't work, you'll need to check out tkinter's documentation.</span>
<span class="comment-copy">Ah ok thanks so much my code finally works.</span>
