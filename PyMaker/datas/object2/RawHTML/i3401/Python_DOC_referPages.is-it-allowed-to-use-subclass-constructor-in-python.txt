<div class="post-text" itemprop="text">
<p>As in the title. In example:</p>
<pre><code>class A:
    def __init__(self,name):
        self.name=name

class B(A):
    def __init__(self,surname):
        self.surname=surname

obj=B('somename','somesurname')
</code></pre>
<p>If it's allowed, in which order shall I pass parameters in object instantiation?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to explicitly call the constructor of the super-class from your derived one:</p>
<pre><code>class A:
    def __init__(self,name):
        self.name=name

class B(A):
    def __init__(self, name, surname):
        super().__init__(name)
        self.surname=surname

obj=B('somename','somesurname')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer"><code>super</code></a> builtin function:</p>
<pre><code>class A:
    def __init__(self, name):
        self.name=name

class B(A):
    def __init__(self, name, surname):
        super().__init__(name)
        self.surname=surname

obj=B('somename','somesurname')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your new constructor should call the parent constructor if the old constructor must be executed. You can call the parents constructor using <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer"><code>super</code></a>:</p>
<pre><code>class A:
    def __init__(self, name):
        self.name = name

class B(A):
    def __init__(self, name, surname):
        super().__init__(name)
        self.surname = surname

obj = B('somename', 'somesurname')
</code></pre>
<p>In python 2, you must specify the current class and self as arguments to <code>super()</code>: <code>super(B, self)</code>, in python 3 it can be called without arguments like as shown above.</p>
</div>
<span class="comment-copy">If you want your <code>B</code> initialiser to take both names as parameters, you need to write an <code>__init__</code> that takes both names as parameters. You can call <code>A</code>'s <code>__init__</code> from inside <code>B</code>'s <code>__init__</code>.</span>
