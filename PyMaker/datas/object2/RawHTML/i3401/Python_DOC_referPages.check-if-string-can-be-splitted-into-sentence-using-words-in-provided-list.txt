<div class="post-text" itemprop="text">
<p>I've recently stumbled upon coding task, and I've struggled to get it right. It goes like this:</p>
<hr/>
<p><strong>Given a non-empty string <code>s</code> and a list <code>word_list</code> containing a list of non-empty words, determine if <code>s</code> can be segmented into a space-separated sequence of one or more dictionary words. You may assume the <code>word_list</code> does not contain duplicates, but each word can be used more than once.</strong></p>
<p>For example, given:</p>
<pre><code>s = 'whataniceday'
word_list = ['a', 'what', 'an', 'nice', 'day']
</code></pre>
<p>Return <code>True</code>, because <code>'whataniceday'</code> can be segmented as <code>'what a nice day'</code>.</p>
<hr/>
<p>I came up with a pretty naive solution, that works for this particular example, but it is not hard to make it fail, for example by adding a word to <code>word_list</code> that other word in the list starts with (i.e. <code>['a', 'wha', 'what', 'an', 'nice', 'day']</code>). There are plenty of other things that can mess up my solution, but anyway here goes:</p>
<pre><code>s = "whataniceday"
word_list = ["h", "a", "what", "an", "nice", "day"]

def can_be_segmented(s, word_list):
    tested_str = s
    buildup_str = ''

    for letter in tested_str:        
        buildup_str += letter

        if buildup_str not in word_list:
            continue

        tested_str = tested_str[len(buildup_str):]
        buildup_str = ''

    return bool(tested_str == '' and buildup_str == '')

print(can_be_segmented(s, word_list))
</code></pre>
<p>Do you guys have an idea of how to fix it? Or maybe there is a better approach to this problem? </p>
</div>
<div class="post-text" itemprop="text">
<p>This is my solution, using a generator expression for brevity, and recursion</p>
<pre><code>s = "whataniceday"
word_list = ["h", "ani", "a", "what", "an", "nice", "day"]

def can_be_segmented(s, word_list):
    return s == "" or any(
        s.startswith(word) and can_be_segmented(s[len(word):], word_list)
        for word in word_list)

assert can_be_segmented(s, word_list)
assert not can_be_segmented("whataniannicday", word_list)
</code></pre>
<p>This code states that the string can be segmented if we can find a word so that the string begins by this word, and the rest of the string can itself be segmented.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'whataniceday'
&gt;&gt;&gt; word_list = ['a', 'what', 'an', 'nice', 'day']
&gt;&gt;&gt; re.match('^(' + '|'.join(f'({s})' for s in word_list) + ')*$', s)
&lt;_sre.SRE_Match object; span=(0, 12), match='whataniceday'&gt;
</code></pre>
<p>As a function:</p>
<pre><code>import re
def can_be_segmented(s, word_list):
    pattern = re.compile('^(' + '|'.join(f'({s})' for s in word_list) + ')*$')
    return pattern.match(s) is not None
</code></pre>
<p>It may be an optimization to make the groups non-capturing (<code>(?:word)</code> rather than <code>(word)</code> so that <code>re.match</code> doesn't have to keep track of matched words, but I'm not going to time it. </p>
<p>If your words aren't all just letters you may want to pass them through <code>re.escape()</code> (as in <code>f'({re.escape(s)})'</code> instead of <code>f'({s})'</code>).</p>
<p>If you are going to have mixed-case and you want those to match pass the <code>re.IGNORECASE</code> or <code>re.I</code> flag (as in <code>pattern.match(s, re.I)</code> instead of <code>pattern.match(s)</code>).</p>
<p>See the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>re</code> documentation</a> for more.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def can_be_segmented(s, word_list):

    # try every word in word_list
    for word in word_list:

        # if s is equal to a word, then success
        if s == word:
            return True

        # otherwise if s starts with a word, call ourselves recursively
        # with the remainder of s
        elif s.startswith(word):
            if can_be_segmented(s[len(word):], word_list):
                return True

    # we tried every possibility, failure
    return False
</code></pre>
</div>
<span class="comment-copy">Another approach is dynamic programming (<a href="https://leetcode.com/problems/word-break/" rel="nofollow noreferrer">leetcode.com/problems/word-break</a>)</span>
<span class="comment-copy">Great! Although this is not the only correct answer, it is the one I like the most! How would you rate time complexity of such recursive approach?</span>
<span class="comment-copy">I think <code>len(s) *len(word_list)</code> in worst case</span>
<span class="comment-copy">I should have known that this might be solved with some wit use of regular expressions. Great answer! By any chance, do you know how to evaluate time complexity of such solution?</span>
