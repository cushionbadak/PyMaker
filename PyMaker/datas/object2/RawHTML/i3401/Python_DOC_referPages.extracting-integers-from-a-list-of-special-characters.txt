<div class="post-text" itemprop="text">
<p>I have the following list in python</p>
<p><code>a = ['[', '1', ',', ' ', '0', ',', ' ', '0', ',', ' ', '0', ',', ' ', '0', ',', ' ', '1', ',', ' ', '0', ',', ' ', '1', ',', ' ', '1', ',', ' ', '0', ']']</code>. </p>
<p>I want to extract integers form this, so that I can get a new list 
 <code>[1,0,0,0,0,1,0,1,1,0]</code>. I am using python 3.x and I have tried the solution given in the link <a href="https://stackoverflow.com/questions/40307848/how-to-extract-numbers-from-a-list-of-stringsover">How to extract numbers from a list of strings?</a> but unfortunately I am getting an empty list <code>[]</code>. Can somebody help me?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer"><strong><code>isdigit</code></strong></a> with a list comprehension:</p>
<pre><code>[int(i) for i in a if i.isdigit()]

# [1, 0, 0, 0, 0, 1, 0, 1, 1, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Someone messed up this data really bad. We have the following:</p>
<pre><code>a = ['[', '1', ',', ' ', '0', ',', ' ', '0', ',', ' ', '0', ',', ' ', '0', ',', ' ', '1', ',', ' ', '0', ',', ' ', '1', ',', ' ', '1', ',', ' ', '0', ']']
</code></pre>
<p>Let's try something</p>
<pre><code>b = ''.join(a)
</code></pre>
<p>Now <code>b</code> is <code>'[1, 0, 0, 0, 0, 1, 0, 1, 1, 0]'</code>. This looks like a task for <a href="https://docs.python.org/3.6/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>literal_eval</code></a>:</p>
<pre><code>import ast
ast.literal_eval(b)
</code></pre>
<p>Et voilà, the list is back: <code>[1, 0, 0, 0, 0, 1, 0, 1, 1, 0]</code>.</p>
<p>To put everything together:</p>
<pre><code>import ast

a = ['[', '1', ',', ' ', '0', ',', ' ', '0', ',', ' ', '0', ',', ' ', '0', ',', ' ', '1', ',', ' ', '0', ',', ' ', '1', ',', ' ', '1', ',', ' ', '0', ']']
result = ast.literal_eval(''.join(a))
</code></pre>
<hr/>
<p>Whoever created this mess of data used a combination of castings to string and list. Check for yourself: <code>print(str(list(str([1, 0, 0, 0, 0, 1, 0, 1, 1, 0]))))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If list comprehensions like </p>
<pre><code>t = [int(x) for x in a if x.isdigit()]
</code></pre>
<p>and</p>
<pre><code>t = [int(g) for g in filter(lambda x: x.isdigit(),a)] 
</code></pre>
<p>are beyond you, you can use a simpler approach.  Iterate through all items in your source list, try to convert it into an integer, add the result to a list.</p>
<p>If errors occure, it is not an integer and you ignore that element and do not add it to the result list:</p>
<pre><code>a = ['[', '1', ',', ' ', '0', ',', ' ', '0', ',', ' ', '0', ',', ' ', '0', ',', ' ', '1', 
     ',', ' ', '0', ',', ' ', '1', ',', ' ', '1', ',', ' ', '0', ']']

rv = []

for text in a:
    try:
        rv.append(int(text))   # appennd if convertable to int,
    except: # catchall 
        pass                   # else pass

print(rv)
</code></pre>
<p>Output:</p>
<pre><code>[1, 0, 0, 0, 0, 1, 0, 1, 1, 0]
</code></pre>
<p>ReadUp:</p>
<ul>
<li><a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">error handling</a></li>
<li><a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">filter(function, iterable)</a> - just for completeness sake if you want to look it up.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>A more efficient solution:</p>
<pre><code>list(map(int, filter(str.isdigit, a)))
</code></pre>
<p>Please read <a href="https://stackoverflow.com/a/1247490/6890912">Python List Comprehension Vs. Map</a>. <code>map</code> is faster than list comprehension when dealing with non-lambda functions.</p>
</div>
<span class="comment-copy"><code>t = [int(x) for x in a if x.isdigit()]</code></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/40307848/how-to-extract-numbers-from-a-list-of-strings">How to extract numbers from a list of strings?</a></span>
<span class="comment-copy">If any of the answers below helped you out, please consider accepting one!</span>
<span class="comment-copy">It worked in my case. Thanks!</span>
<span class="comment-copy">More efficient? This is slower than the list comprehension.</span>
<span class="comment-copy">On a list <code>10000 * a</code>: <code>In [373]: %timeit [int(i) for i in a if i.isdigit()] 35.4 ms ± 259 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></span>
<span class="comment-copy"><code>In [374]: %timeit list(map(int, filter(str.isdigit, a))) 39.7 ms ± 310 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></span>
<span class="comment-copy">@user3483203 Not sure what kind of computer you have, but on my laptop, with the same a * 10000 setup, <code>python -mtimeit "list(map(int, filter(str.isdigit, a)))"</code> yields <code>10 loops, best of 3: 70.7 msec per loop</code>, while <code>python -mtimeit "[int(i) for i in a if i.isdigit()]"</code> yields <code>10 loops, best of 3: 79.4 msec per loop</code>.</span>
<span class="comment-copy">@user3483203 Please read: <a href="https://stackoverflow.com/a/1247490/6890912">stackoverflow.com/a/1247490/6890912</a> <code>map</code> is more efficient than list comprehension when dealing with non-lambda functions.</span>
