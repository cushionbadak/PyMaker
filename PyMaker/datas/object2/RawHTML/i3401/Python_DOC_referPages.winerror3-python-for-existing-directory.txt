<div class="post-text" itemprop="text">
<p>I am getting this error for an existing directory when I try to use </p>
<pre><code>os.scandir()
</code></pre>
<p>The directory does exist as I can copy and paste it into the Windows run prompt and the directory opens.</p>
<pre><code>F:\Storage$\backups\[SCRUBBED DATA]\archive\Google Chrome\Default\Extensions\nenlahapcbofgnanklpelkaejcehkggg\0.1.248.317_0\notifications\pages\Cashback\components\CashBackResolve\components\shared\RewardsActivation\components\CashbackSectionSimple
</code></pre>
<p>Trying to run the same function from a CLI gives the same result.</p>
<pre><code>F:\automation&gt;python
Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 17:00:18) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.scandir(r'F:\Storage$\backups\[SCRUBBED DATA]\archive\Google Chrome\Default\Extensions\nenlahapcbofgnanklpelkaejcehkggg\0.1.248.317_0\notifications\pages\Cashback\components\CashBackResolve\components\shared\RewardsActivation\components\CashbackSectionSimple')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
FileNotFoundError: [WinError 3] The system cannot find the path specified: 'F:\\Storage$\\backups\\[SCRUBBED DATA]\\archive\\Google Chrome\\Default\\Extensions\\nenlahapcbofgnanklpelkaejcehkggg\\0.1.248.317_0\\notifications\\pages\\Cashback\\components\\CashBackResolve\\components\\shared\\RewardsActivation\\components\\CashbackSectionSimple'
&gt;&gt;&gt;
</code></pre>
<p>Running it on an elevated command prompt did not solve this issue. What could be causing this?</p>
<p>The director is not hardcoded, but rather generated within the method:</p>
<pre><code>def getFolderSize(path='.'):
    total = 0
    for entry in os.scandir(path):
        if entry.is_file():
            total += entry.stat().st_size
        elif entry.is_dir():
            total += getFolderSize(entry.path)
        return total   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When I see your error message I can't miss the double backslash "\" in the path.
I would recommend you use os.path.join() when working with directories, as this will make your script cross-platform and it will take care for the proper construction of the path.</p>
<p>Here you can read more about it:<a href="https://docs.python.org/3/library/os.path.html#os.path.join" rel="nofollow noreferrer">Link here</a></p>
<p>Try changing this line <code>os.scandir(r'F:\Storage$\backups\[SCRUBBED DATA]\archive\Google Chrome\Default\Extensions\nenlahapcbofgnanklpelkaejcehkggg\0.1.248.317_0\notifications\pages\Cashback\components\CashBackResolve\components\shared\RewardsActivation\components\CashbackSectionSimple')</code></p>
<p>to </p>
<pre><code>os.scandir(os.path.join('F:\', 'Storage', 'backups', '[SCRUBBED DATA]', 'archive', 'Google Chrome', 'Default', 'Extensions', 'nenlahapcbofgnanklpelkaejcehkggg', '0.1.248.317_0', 'notifications', 'pages', 'Cashback', 'components', 'CashBackResolve', 'components', 'shared', 'RewardsActivation', 'components', 'CashbackSectionSimple'))
</code></pre>
</div>
<span class="comment-copy">This path is 248 characters long. If "[SCRUBBED DATA]" is actually something else that's longer, the path could exceed 255 characters, the maximum DOS path length that can be listed. <code>MAX_PATH</code> is 260, but <code>r"\*.*"</code> gets appended, plus the NUL terminator. You can list longer paths by adding the "\\?\" prefix to a fully-qualified path, or replace the initial "\\" with "\\?\UNC\"  for a UNC path.</span>
<span class="comment-copy">Does appending "\\?\" have the same conventions as the MS-DOS 8.3 file naming?</span>
<span class="comment-copy">"\\?\" is for a native NT fully-qualified device path -- except in NT the prefix is "\??\". A fully-qualified NT path is a Unicode string that can be up to about 32K characters long and uses only backslash as the path separator -- forward slash isn't supported. Unlike DOS paths, the leaf path component doesn't reserve classic DOS device names (e.g. NUL, CON) or strip tailing spaces and dots. DOS-style relative paths aren't supported. A relative NT path is relative to a file handle -- usually for a directory, which is set in the <code>OBJECT_ATTRIBUTES</code>. There isn't a solitary working directory.</span>
<span class="comment-copy">Prefixing with "\\?\" did not resolve the issue. I instead decided to call <code>os.system("rmdir /s /q &lt;dir&gt;")</code> to do the job.</span>
<span class="comment-copy">The job was deleting the directory tree? I thought you were just getting its size on disk. Anyway, unless you're using Windows 10, <code>rmdir /s /q &lt;dir&gt;</code> would also be limited to <code>MAX_PATH</code> if "&lt;dir&gt;" didn't have the "\\?\" prefix. I guess it was something else.</span>
<span class="comment-copy">Python uses double slashes on windows in file paths. This was an automatically generated path using os.scandir() in a recursive function. It is being called on all subdirectories of an original directory, F:\Storage$\backups .</span>
<span class="comment-copy">E: Will add function to question.</span>
