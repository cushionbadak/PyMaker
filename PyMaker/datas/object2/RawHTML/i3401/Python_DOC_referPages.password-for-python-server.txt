<div class="post-text" itemprop="text">
<p>I have the following shell script for a very simple HTTP server:</p>
<pre><code>#!/bin/sh

echo "Serving at http://localhost:3000"
python -m SimpleHTTPServer 3000
</code></pre>
<p>I was wondering how I can enable or add <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing" rel="noreferrer">a CORS header</a> like <code>Access-Control-Allow-Origin: *</code> to this server?</p>
</div>
<div class="post-text" itemprop="text">
<p>Unfortunately, the simple HTTP server is really that simple that it does not allow any customization, especially not for the headers it sends. You can however create a simple HTTP server yourself, using most of <code>SimpleHTTPRequestHandler</code>, and just add that desired header.</p>
<p>For that, simply create a file <code>simple-cors-http-server.py</code> (or whatever) and, depending on the Python version you are using, put one of the following codes inside.</p>
<p>Then you can do <code>python simple-cors-http-server.py</code> and it will launch your modified server which will set the CORS header for every response.</p>
<p>With the <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)" rel="noreferrer">shebang</a> at the top, make the file executable and put it into your PATH, and you can just run it using <code>simple-cors-http-server.py</code> too.</p>
<h2>Python 3 solution</h2>
<p>Python 3 uses <a href="https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler" rel="noreferrer"><code>SimpleHTTPRequestHandler</code></a> and <a href="https://docs.python.org/3/library/http.server.html#http.server.HTTPServer" rel="noreferrer"><code>HTTPServer</code></a> from the <a href="https://docs.python.org/3/library/http.server.html" rel="noreferrer"><code>http.server</code> module</a> to run the server:</p>
<pre><code>#!/usr/bin/env python3
from http.server import HTTPServer, SimpleHTTPRequestHandler, test
import sys

class CORSRequestHandler (SimpleHTTPRequestHandler):
    def end_headers (self):
        self.send_header('Access-Control-Allow-Origin', '*')
        SimpleHTTPRequestHandler.end_headers(self)

if __name__ == '__main__':
    test(CORSRequestHandler, HTTPServer, port=int(sys.argv[1]) if len(sys.argv) &gt; 1 else 8000)
</code></pre>
<h2>Python 2 solution</h2>
<p>Python 2 uses <a href="https://docs.python.org/2/library/simplehttpserver.html#SimpleHTTPServer.SimpleHTTPRequestHandler" rel="noreferrer"><code>SimpleHTTPServer.SimpleHTTPRequestHandler</code></a> and the <a href="https://docs.python.org/2/library/basehttpserver.html" rel="noreferrer"><code>BaseHTTPServer</code> module</a> to run the server.</p>
<pre><code>#!/usr/bin/env python2
from SimpleHTTPServer import SimpleHTTPRequestHandler
import BaseHTTPServer

class CORSRequestHandler (SimpleHTTPRequestHandler):
    def end_headers (self):
        self.send_header('Access-Control-Allow-Origin', '*')
        SimpleHTTPRequestHandler.end_headers(self)

if __name__ == '__main__':
    BaseHTTPServer.test(CORSRequestHandler, BaseHTTPServer.HTTPServer)
</code></pre>
<h2>Python 2 &amp; 3 solution</h2>
<p>If you need compatibility for both Python 3 and Python 2, you could use this polyglot script that works in both versions. It first tries to import from the Python 3 locations, and otherwise falls back to Python 2:</p>
<pre><code>#!/usr/bin/env python
try:
    # Python 3
    from http.server import HTTPServer, SimpleHTTPRequestHandler, test as test_orig
    import sys
    def test (*args):
        test_orig(*args, port=int(sys.argv[1]) if len(sys.argv) &gt; 1 else 8000)
except ImportError: # Python 2
    from BaseHTTPServer import HTTPServer, test
    from SimpleHTTPServer import SimpleHTTPRequestHandler

class CORSRequestHandler (SimpleHTTPRequestHandler):
    def end_headers (self):
        self.send_header('Access-Control-Allow-Origin', '*')
        SimpleHTTPRequestHandler.end_headers(self)

if __name__ == '__main__':
    test(CORSRequestHandler, HTTPServer)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Try an alternative like http-server</strong></p>
<p>As SimpleHTTPServer is not really the kind of server you deploy to production, I'm assuming here that you don't care that much about which tool you use as long as it does the job of exposing your files at <code>http://localhost:3000</code> with CORS headers in a simple command line</p>
<pre><code># install (it requires nodejs/npm)
npm install http-server -g

#run
http-server -p 3000 --cors
</code></pre>
<hr/>
<p><strong>Some related tools you might find useful</strong></p>
<ul>
<li><p><a href="https://ngrok.com" rel="noreferrer">ngrok</a>: when running <code>ngrok http 3000</code>, it creates an url <code>https://$random.ngrok.com</code> that permits anyone to access your <code>http://localhost:3000</code> server. It can expose to the world what runs locally on your computer (including local backends/apis)</p></li>
<li><p><a href="http://localtunnel.me/" rel="noreferrer">localtunnel</a>: almost the same as ngrok</p></li>
<li><p><a href="https://zeit.co/now" rel="noreferrer">now</a>: when running <code>now</code>, it uploads your static assets online and deploy them to <code>https://$random.now.sh</code>. They remain online forever unless you decide otherwise. Deployment is fast (except the first one) thanks to diffing. Now is suitable for production frontend/SPA code deployment It can also deploy Docker and NodeJS apps. It is not really free, but they have a free plan.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I had the same problem and came to this solution:</p>
<pre><code>class Handler(SimpleHTTPRequestHandler):
    def send_response(self, *args, **kwargs):
        SimpleHTTPRequestHandler.send_response(self, *args, **kwargs)
        self.send_header('Access-Control-Allow-Origin', '*')
</code></pre>
<p>I simply created a new class inheriting from SimpleHTTPRequestHandler that only changes the <code>send_response</code> method.</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll need to provide your own instances of do_GET() (and do_HEAD() if choose to support HEAD operations). something like this:</p>
<pre><code>class MyHTTPServer(SimpleHTTPServer):

    allowed_hosts = (('127.0.0.1', 80),)

    def do_GET(self):
        if self.client_address not in allowed_hosts:
            self.send_response(401, 'request not allowed')
        else:
            super(MyHTTPServer, self).do_Get()
</code></pre>
</div>
<span class="comment-copy">I followed the instructions but by executing python simple-cors-http-server.py I get error: python: can't open file 'simple-cors-http-server.py': [Errno 2] No such file or directory logout....any thoughts?</span>
<span class="comment-copy">@poke The server responds with 501 Unsupported method ('OPTIONS'). I'm running OS X 10.10.1 with Python 2.7.6. Any suggestions?      <code>HTTP/1.0 501 Unsupported method ('OPTIONS')     Server: SimpleHTTP/0.6 Python/2.7.6     Date: Wed, 21 Jan 2015 23:16:10 GMT     Content-Type: text/html     Connection: close     Access-Control-Allow-Origin: *</code></span>
<span class="comment-copy">@HairOfTheDog The SimpleHTTPRequestHandler doesnâ€™t support the OPTIONS HTTP method. You could add it if you want (read the Python manual about HTTP servers); or you could just not try to access the server like that.</span>
<span class="comment-copy">@RobertoFranceschini You might be running into <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Preflighted_requests" rel="nofollow noreferrer">preflighted requests</a> which require the <code>OPTIONS</code> method to be implemented properly. As for simple requests, the solution of sending just the <code>Access-Control-Allow-Origin</code> header should still work fine.</span>
<span class="comment-copy">@Tyguy7 That might be a general behavior with the simple HTTP server though. I had varying results regarding performance before. But for simply running a server for a moment, I still consider it the quickest solution.</span>
<span class="comment-copy">for some reason it's not working.</span>
<span class="comment-copy">it does work fine for all my team. explain your problem please</span>
<span class="comment-copy">This solution was much better for me than the python one, which had intermittent lag.</span>
<span class="comment-copy">I'm a simple man. I see a solution that requires installing <code>npm</code> on a machine that is only known to have <code>python</code>, I downvote.</span>
<span class="comment-copy">@ParthianShot: you might want to learn to use the best tool for the job.</span>
<span class="comment-copy">Thanks for your answer, but I have no Python knowledge what so ever, I am just using the shell script mentioned above as a simple http server for my Emberjs apps. Only when collided with the access control problem, I researched to find that I need to enable it in this simple http server. So after some research I added (enable 'CrossOrigin', origins =&gt; '*';) but not-surprisingly it didn't work. If you can please point me to any Python simple http server shell script that include the access control feature that will be highly appreciated</span>
<span class="comment-copy">On a minor note, I am not trying to be lazy here really but start learning python just to add this feature to the simpleHTTP server doesn't sound logical at this point so I was hoping it will be easy to add OR hopefully I can find an alternative / ready made Python script that can do the job so that I can continue with my dev work</span>
<span class="comment-copy">The SimpleHTTPServer has no options to support access controls. Either you'll need to roll your own code -- or switch to another web server that supports access controls. Think about <a href="http://www.lighttpd.net/" rel="nofollow noreferrer">lighttpd.net</a></span>
