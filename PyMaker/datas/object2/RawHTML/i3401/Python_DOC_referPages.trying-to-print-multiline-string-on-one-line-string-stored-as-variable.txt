<div class="post-text" itemprop="text">
<p>I'm working on the MIT intro to computation and programming course and I'm trying to store a multi-line string in a variable that I can use for the program to interact with the user.  </p>
<p>I know about the <code>"""</code> for inputting long lines of code with carriage return inserting a newline character (I think I phrased that somewhat accurately).</p>
<p>What I'm running into is the string being stored look shitty in my code and it looks a lot cleaner to use the triple quote but I still want it to print out on one line.  I am trying to store it in a variable like so:</p>
<pre><code>inputRequest = """
Enter 'h' to indicate the guess is too high.
Enter 'l' to indicate the guess is too low.
Enter 'c' to indicate the guess is correct.
"""
</code></pre>
<p>and I tried to call that variable in my console like this:</p>
<pre><code>print(inputRequest, end=" ")
</code></pre>
<p>but it still prints out on three separate lines.  Is there an efficient way to do this so that my code doesn't look messy?  Storing the string in a variable seems like a good way to cut down on my typing when I need to call that particular output for the user to interact with, but I'm sure there are better ways to do this.  Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can place backslashes at the end of each line to prevent the newline character from printing in your strings.</p>
<pre><code>inputRequest = """\
    Enter 'h' to indicate the guess is too high. \
    Enter 'l' to indicate the guess is too low. \
    Enter 'c' to indicate the guess is correct. \
    """

print(inputRequest)
</code></pre>
<p>If you want, you can also use separate strings for the same purpose.</p>
<pre><code>inputRequest = \
    "Enter 'h' to indicate the guess is too high. " \
    "Enter 'l' to indicate the guess is too low. " \
    "Enter 'c' to indicate the guess is correct. " \

print(inputRequest)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that the string contains intrinsic EOL characters.  The <code>print</code> statement doesn't <em>add</em> any new-lines, but they're already embedded in what you tell it to print.  You need to replace those, such as:</p>
<pre><code>print(inputRequest.replace("\n", "  ")
</code></pre>
<p>Result:</p>
<pre><code>Enter 'h' to indicate the guess is too high.  Enter 'l' to indicate the guess is too low.  Enter 'c' to indicate the guess is correct.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Answers are kind of all over the place here.. Here is a usefull experiment for you. Type the following line into your IDE:</p>
<pre><code>text = "This is string1. This is string2. This is string3"
</code></pre>
<p>Now manually format the string by pressing enter after each punctuation, you will get:</p>
<pre><code>text = "This is string1." \
       "This is string2." \
       "This is string3."
</code></pre>
<p>The above is string concatenation and would provide what your looking for in a "clean" way. The accepted answer is not exactly as "clean" as it could be but since were: "arguing semantics" XD</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a single-lined string over multiple lines:</p>
<pre><code>inputRequest = ("Enter 'h' to indicate the guess is too high. "
                "Enter 'l' to indicate the guess is too low. "
                "Enter 'c' to indicate the guess is correct.")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Following code will help you to achieve what you are trying to do:</p>
<pre><code>print("Enter 'h' to indicate the guess is too high.",
"Enter 'l' to indicate the guess is too low.",
"Enter 'c' to indicate the guess is correct.")
</code></pre>
<p>Or alternatively you can alternate the quotes.First line of the following code illustrates the point:</p>
<pre><code>print('Enter "h" to indicate the guess is too high.',
  "Enter 'l' to indicate the guess is too low.",
  "Enter 'c' to indicate the guess is correct.")
</code></pre>
<p>Hope this is what you were trying to achieve and this helped ;)
Cheers!</p>
</div>
<span class="comment-copy">Why did you <i>write</i> a multi-line string if you don't <i>want</i> it to span multiple lines?</span>
<span class="comment-copy"><code>''.join(inputRequest.splitlines())</code></span>
<span class="comment-copy">Something that might be useful to you in general, although it's very silly for this particular example, is the <a href="https://docs.python.org/3/library/textwrap.html" rel="nofollow noreferrer"><code>textwrap</code></a> module. You could use it here as <code>textwrap.wrap(inputRequest, width=sys.maxsize)[0]</code>—as I said, it's pretty silly to use here, but you can probably imagine where it would be a bit more useful to, say, wrap this nicely onto an 80-column terminal.</span>
<span class="comment-copy">Thanks for the friendly response.  I know that this is a pretty low-level question but I just didn't see a great way to do it. Apparently it's as simple as adding backslashes at the end of each line!</span>
<span class="comment-copy">It's generally considered unpythonic to use backslash continuations. But it's also unpythonic to use lines more than 72 (or 80 or 99, depending on who you ask) characters long in your source. And to use slightly misleading parentheses around strings meant to be concatenated. And those are the only options, short of some kind of postprocessing (like Peter Wood's comment, or <code>textwrap</code> in fancier cases), which isn't always appropriate. So it's a matter of choice which one you do, but all of the choices are messy.</span>
<span class="comment-copy">Those aren't separate strings; after backslash continuation, they're adjacent string literal tokens, so they get concatenated by the compiler into a single string. (That's required Python semantics, not an CPython optimization or anything.)</span>
<span class="comment-copy">I have a habit of being loose with my language... I just meant that a single set of quotes could be used as well.</span>
<span class="comment-copy">Yeah, I know. It's a good answer, but I think it could be better by wording it a little better. (Obviously not the way I worded it in my comment, though, unless the OP is trying to write a Python implementation…)</span>
<span class="comment-copy">Would it be correct to think of this as escaping the newline character?  Similar to how one escapes quotation marks inside a string?</span>
<span class="comment-copy">@Anthony Yes, and that analogy will even help you correctly guess what happens if you, e.g., leave a space between the backslash and the newline. Just remember that it's an analogy and don't take it too far. (When in doubt, you have to come back to how it actually works, as described in the lexer section of the reference docs, but you should rarely if ever be in doubt.)</span>
<span class="comment-copy">There's nothing in this answer but a link to some external image. That's not an answer.</span>
