<div class="post-text" itemprop="text">
<p>Let us say i have a list:</p>
<pre><code>board = [2, 4, 0, 2, 8, 4, 4, 8, 0, 2, 0, 0, 4, 0, 2, 2]
</code></pre>
<p>and i already have some code that will make the list be displayed like this:</p>
<pre><code>2 4 0 2
8 4 4 8
0 2 0 0
4 0 2 2
</code></pre>
<p>So is there a way for me to remove every 0 from each row and add it back in the end(even if there are different values in the list) so that the board now looks like:</p>
<pre><code>2 4 2 0
8 4 4 8
2 0 0 0
4 2 2 0
</code></pre>
<p>I want to do this using a loop and not individually having to write separate code for each row.</p>
<p>Also can you do this without making the initial list to</p>
<pre><code>board = [[2, 4, 0, 2], [8, 4, 4, 8], [0, 2, 0, 0], [4, 0, 2, 2]]
</code></pre>
<p>The code for 1 row would be :</p>
<pre><code>board = [2, 0, 0, 2]
k = len(board)
board[:] = (value for value in board if value != 0)
while len(board) &lt; k:
    board.append(0)
print(board)

Output = [2, 2, 0, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>list.count</code>:</p>
<pre><code>board = [2, 4, 0, 2, 8, 4, 4, 8, 0, 2, 0, 0, 4, 0, 2, 2]
new_board = [board[i:i+4] for i in range(0, len(board), 4)]
final_board = [list(filter(None, i))+([0]*i.count(0)) for i in new_board]
last_board = [i for b in final_board for i in b]
</code></pre>
<p>Output:</p>
<pre><code>[2, 4, 2, 0, 8, 4, 4, 8, 2, 0, 0, 0, 4, 2, 2, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sometimes there is nothing wrong with a simple loop:</p>
<pre><code>board = [2, 4, 0, 2, 8, 4, 4, 8, 0, 2, 0, 0, 4, 0, 2, 2]

x=4
nb=[]
for e in zip(*[iter(board)]*x):
    ne=[se for se in e if se!=0]
    nb.extend(ne+[0]*(x-len(ne)))  #.append if you want to maintain sub lists

&gt;&gt;&gt; nb
[2, 4, 2, 0, 8, 4, 4, 8, 2, 0, 0, 0, 4, 2, 2, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just for fun, here's a one-liner using some of Python's functional tools. The key ingredients are <a href="https://docs.python.org/3.7/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a>, <a href="https://docs.python.org/3.7/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a>, and <a href="https://docs.python.org/3.7/library/operator.html#operator.not_" rel="nofollow noreferrer"><code>operator.not_</code></a>, all of which come from the <a href="https://docs.python.org/3.7/library/functional.html#functional-programming-modules" rel="nofollow noreferrer">Functional Programming Modules</a> section of Python's standard library documentation.</p>
<pre><code>&gt;&gt;&gt; import functools, itertools, operator
&gt;&gt;&gt; board = [2, 4, 0, 2, 8, 4, 4, 8, 0, 2, 0, 0, 4, 0, 2, 2]
&gt;&gt;&gt; list(itertools.chain.from_iterable(map(functools.partial(sorted, key=operator.not_), zip(*[iter(board)]*4))))
[2, 4, 2, 0, 8, 4, 4, 8, 2, 0, 0, 0, 4, 2, 2, 0]
</code></pre>
<p>Most of the work here is in turning the linear representation of the board into a nested list-of-lists representation, and then turning it back again. Here it is step-by-step.</p>
<p>First, turning the flat representation into a nested one:</p>
<pre><code>&gt;&gt;&gt; nested = list(zip(*[iter(board)]*4))
&gt;&gt;&gt; nested
[(2, 4, 0, 2), (8, 4, 4, 8), (0, 2, 0, 0), (4, 0, 2, 2)]
</code></pre>
<p>I've added that extra outer <code>list</code> call just to show the contents of the <code>zip</code> iterable. It's not necessary once all the steps are put together. Now sort each row with a suitable key to move the zeros to the right:</p>
<pre><code>&gt;&gt;&gt; sorted_nested = list(map(functools.partial(sorted, key=operator.not_), nested))
&gt;&gt;&gt; sorted_nested
[[2, 4, 2, 0], [8, 4, 4, 8], [2, 0, 0, 0], [4, 2, 2, 0]]
</code></pre>
<p>Again, the outer list call is unnecessary, and we'll lose it when we put everything together. A key point here is that Python's <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a> function provides a stable sort, so the nonzero elements stay in the same order with respect to each other. Finally, flatten back into a list:</p>
<pre><code>&gt;&gt;&gt; list(itertools.chain.from_iterable(sorted_nested))
[2, 4, 2, 0, 8, 4, 4, 8, 2, 0, 0, 0, 4, 2, 2, 0]
</code></pre>
<p>Putting this all together, and removing the unnecessary inner conversions to list, you get the one liner at the top of this post.</p>
<pre><code>&gt;&gt;&gt; list(itertools.chain.from_iterable(map(functools.partial(sorted, key=operator.not_), zip(*[iter(board)]*4))))
[2, 4, 2, 0, 8, 4, 4, 8, 2, 0, 0, 0, 4, 2, 2, 0]
</code></pre>
</div>
<span class="comment-copy">I don't want the output to have lists inside of lists. That would mess up the rest of my code.</span>
<span class="comment-copy">Then concatenate the lists?</span>
<span class="comment-copy">@J.Doe Please see my recent edit.</span>
<span class="comment-copy">So this is to shift right, is there any way you can make it so that this works on board[0], board[4], board[8], board[12]</span>
<span class="comment-copy">@J.Doe Can you clarify what you mean by shifting, specifically how <code>board[value]</code> factors into the shift?</span>
