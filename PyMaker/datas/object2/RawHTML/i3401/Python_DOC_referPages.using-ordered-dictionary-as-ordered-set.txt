<div class="post-text" itemprop="text">
<p>Now that Python 3.7 makes order-preserving dicts <a href="https://docs.python.org/3/whatsnew/3.7.html" rel="noreferrer">officially part of the language spec</a> instead of an implementation detail, I've been trying to wrap my head around how best to use this property. Today, I've found I needed an order preserving set and think the dictionary might do the trick.</p>
<p>Suppose we have a list of hashable element. We want a list of unique entries and we want to keep the order of these entries based on first appearance. A simple dictionary constructor should do the trick:</p>
<pre><code>ls = "Beautiful is better than ugly. Explicit..."
uniques = list({s:0 for s in ls})

&gt;&gt;&gt; ['B', 'e', 'a', 'u', 't', 'i', 'f', 'l', ' ', 's', 'b', 'r', 'h', 'n', 'g', 'y', '.', 'E', 'x', 'p', 'c']
</code></pre>
<p>This will preserve the ordering by first appearance and get rid of all duplicates.</p>
<p>I'd like to know what the community thinks of this use case and the order preserving feature in general.  </p>
<ul>
<li>Is there any reason this method shouldn't be used?</li>
<li>Are there better ways to solve this problem? </li>
<li>Is this method Pythonic?</li>
</ul>
<p>Reading through the Zen of Python, I am conflicted. The method is simple but relies on implicit ordering.</p>
<p>Please let me know what you think. Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>This approach of using a Python 3.7 dictionary as an order-preserving de-dupe is vetted by a core Python developer <a href="https://stackoverflow.com/a/39835527/674039">here</a>. You can't really get a better recommendation than that.</p>
<blockquote>
<p>Is there any reason this method shouldn't be used?</p>
</blockquote>
<p>No.</p>
<blockquote>
<p>Are there better ways to solve this problem?</p>
</blockquote>
<p>No.</p>
<blockquote>
<p>Is this method Pythonic?</p>
</blockquote>
<p>Yes.</p>
<blockquote>
<p>The method is simple but relies on implicit ordering.</p>
</blockquote>
<p>Your question is tagged python-3.7.  Dictionaries preserving insertion order is guaranteed, so there is not an implicit ordering here.</p>
</div>
<div class="post-text" itemprop="text">
<p>This works great on Python 3.7!.. but Python 3.7 isn't the only Python version around. Relying on dict order preservation is going to be a dangerous habit for quite a while, because if your code ever runs on a Python version before 3.6, it'll stop maintaining order, completely silently.</p>
<p>Relying on, say, <code>dataclasses</code> or <code>contextvars</code> isn't anywhere near as dangerous, because if you try to run code that relies on <code>dataclasses</code> on a Python that doesn't have <code>dataclasses</code>, you get a big, clear <code>ImportError</code>. Dicts losing their order doesn't have the same obviousness to it.</p>
<p>You may have no idea it's stopped maintaining order. You may not remember you relied on dict order. You might forget to document or tell anyone that you relied on it, or you might be the poor coder who inherits code where someone else relied on dict order without documenting the Python 3.7+ requirement. You may have no idea you forgot to update Python on one particular machine, or that you accidentally dropped out of Anaconda or whatever and you're on the system Python 3 that's still using 3.4.</p>
<p>It'll be safe to assume dict order eventually. For now, especially <em>right now</em>, a few days after the release of 3.7, it's a better idea to use <code>OrderedDict</code>, or add a version check:</p>
<pre><code>import collections
import sys

_make_ordered_mapping = (dict.fromkeys if sys.version_info &gt;= (3, 7)
                         else collections.OrderedDict.fromkeys)

def ordered_dedup(items):
    return list(_make_ordered_mapping(items))
</code></pre>
</div>
<span class="comment-copy">Whats your question?</span>
<span class="comment-copy">"Now that dictionaries are order preservingâ€¦" Remember it is a CPython 3.6+ implementation detail, not a language feature.</span>
<span class="comment-copy">@U9-Forward, there are 3 questions each enumerated.</span>
<span class="comment-copy">@KlausD. as of 3.7, this is now part of the spec, so we can rely on it moving forward.</span>
<span class="comment-copy">Thanks @wim.  I didn't see the 3.7 update. that is the best green light out that. re: implicit, I'd like to argue that being part of the spec still doesn't make it explicit.  Explicit would look more like <code>dict.fromkeys("abc", ordered=True)</code>.  There are lots of behaviors that might be default but you wouldn't know it unless you stumbled upon it.</span>
<span class="comment-copy">It's still going to be a very dangerous practice for backward compatibility reasons for quite a while, though.</span>
<span class="comment-copy">@NathanielSaul  Well, if you want it to be more explicit then nothing stops you doing the same thing with <code>collections.OrderedDict.fromkeys(...)</code>. Personally, I prefer to see the dict comprehension, as long as you don't need to support older Python versions.</span>
<span class="comment-copy">It seemed more like Hettinger was recommending that there's no faster way to perform the task, not necessarily recommending to use that as the go-to method on into the future.  Dictionaries are still viewed in the broader computer science world, by definition, as saying nothing about the ordering of keys.  The Python core devs may feel like that doesn't matter for the time being, but what about in 10 years when someone finds a more efficient dict implementation that ignores ordering?</span>
<span class="comment-copy">@DavidSanders  Then I will update this answer in 10 years.</span>
