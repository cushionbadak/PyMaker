<div class="post-text" itemprop="text">
<p>How does one implement custom double star operator (<code>**</code>) for unpacking, similar to how <code>__iter__</code> works with single star operator (<code>*</code>)?</p>
<p>For example:</p>
<pre><code>class PlayerManager(object):

    def __init__(self, players=None):
        self.players = players or []

    # Made up method to support ** operator
    def __dict_iter__(self):
        for player in self.players:
            yield get_steamid(player), player

def print_players(**players):
    print(players)

player_manager = PlayerManager([list, of, players])
print_players(player_manager)
</code></pre>
<p>Output:</p>
<pre><code>{
    'STEAM_0:0:02201': &lt;Player object at 0x0000000000&gt;,
    'STEAM_0:0:10232': &lt;Player object at 0x0000000064&gt;,
    'STEAM_0:0:73602': &lt;Player object at 0x0000000128&gt;
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As @ShadowRanger says, implement Mapping. Here's an example:</p>
<pre><code>from collections.abc import Mapping

class Foo(Mapping):
    def __iter__(self):
        yield "a"
        yield "b"

    def __len__(self):
        return 2

    def __getitem__(self, item):
        return ord(item)

f = Foo()

print(*f)
print(dict(**f))
</code></pre>
<p>The program outputs:</p>
<pre><code>a b
{'a': 97, 'b': 98}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Implement the <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping" rel="noreferrer"><code>Mapping</code> ABC</a>. Technically, the language docs don't specify which <code>Mapping</code> methods are used, so assuming you only need some subset used by the current implementation is a bad idea. <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="noreferrer">All it says is</a>:</p>
<blockquote>
<p>If the syntax **expression appears in the function call, expression must evaluate to a mapping, the contents of which are treated as additional keyword arguments. In the case of a keyword appearing in both expression and as an explicit keyword argument, a TypeError exception is raised.</p>
</blockquote>
<p>So if you implement the <code>Mapping</code> ABC, you definitely have the right interfaces, regardless of whether it relies on <code>.items()</code>, direct iteration and <code>__getitem__</code> calls, etc.</p>
<p>FYI, on checking, the behavior in CPython 3.5 definitely dependent on <em>how</em> you implement <code>Mapping</code> (if you inherit from <code>dict</code>, it uses an optimized path that directly accesses <code>dict</code> internals, if you don't, it iterates <code>.keys()</code> and looks up each key as it goes). So yeah, don't cut corners, implement the whole ABC. Thanks to default implementations inherited from the <code>Mapping</code> ABC and it's parents, this can be done with as little as:</p>
<pre><code>class MyMapping(Mapping):
    def __getitem__(self, key):
        ...
    def __iter__(self):
        ...
    def __len__(self):
        ...
</code></pre>
<p>The default implementations you inherit may be suboptimal in certain cases (e.g. <code>items</code> and <code>values</code> would do semi-evil stuff involving iteration and look up, where direct accessors might be faster depending on internals), so if you're using it for other purposes, I'd suggest overriding those with optimized versions.</p>
</div>
<span class="comment-copy">Excellent. Thank you very much, had never heard of <code>Mapping</code> before!</span>
<span class="comment-copy">Thank you very much, I accepted @codeape's answer as it clearly shows what I need to do to make my class support the <code>**</code>, but I did drop you an upvote!</span>
<span class="comment-copy">@MarkusMeskanen: Strange. I was elaborating when you wrote this, but SO didn't notify me (I still don't have a comment alert for it, and the rep didn't show up for minutes after the votes must have been cast). Eh. Whatever.</span>
<span class="comment-copy">@ShadowRanger: Happen to know which bits of CPython implement this? Looking to add support to <code>**</code> to a C-side class</span>
<span class="comment-copy">Ah, <a href="https://github.com/python/cpython/blob/c22bfaae83ab5436d008ac0d13e7b47cbe776f08/Objects/abstract.c#L2120-L2135" rel="nofollow noreferrer">found it</a></span>
