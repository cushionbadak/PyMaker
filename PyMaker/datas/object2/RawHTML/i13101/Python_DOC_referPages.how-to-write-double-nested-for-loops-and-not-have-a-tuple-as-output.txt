<div class="post-text" itemprop="text">
<p>For optimization purposes and education, I want to know how to write an optimized double nested loop. I tried a couple of options from other questions that looked similar but ran into a brick wall. </p>
<p>So I have an url that I am extracting text from and I am looping through the text to extract only the numbers and then sum them up and return the total.</p>
<p>Code:</p>
<pre><code>import urllib
import re
from itertools import combinations

url = urllib.urlopen('http://pr4e.dr-chuck.com/tsugi/mod/python-data/data/\
regex_sum_185517.txt')

total = 0

numlist = [re.findall('[0-9]+',line.rstrip()) for line in url]

#then I want to iterate through numlist twice to extract the numbers and sum them up.

for numb in numlist:
    for nu in numb:
        total = total + int(nu)

print total
</code></pre>
<p>I tried a couple of ways to optimize nested loops, but none of which gave me the desired output:</p>
<pre><code>for nu in combinations(numlist,2):
    total = total + int(nu)
    print total
</code></pre>
<p>Returned:</p>
<pre><code>TypeError: int() argument must be a string or a number, not 'tuple'
</code></pre>
<p>I also tried:</p>
<pre><code>total = [[total + int(nu) for nu in numb] for numb in numblist]
print total
</code></pre>
<p>which returned the same nested list as in numlist. Thank you for your help in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Standard <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow">flatten a single level of nesting pattern inlined</a>:</p>
<pre><code>from future_builtins import map   # Only on Python 2 to avoid intermediate list
from itertools import chain

total = sum(map(int, chain.from_iterable(numlist)))
</code></pre>
</div>
<span class="comment-copy">is the output of <code>total = [total + int(nu) for numbers in numlist for nu in numbers]</code> what you're looking for?</span>
<span class="comment-copy">the sum of all the numbers extracted from the text</span>
