<div class="post-text" itemprop="text">
<p>I want to implement below logic in c++ using python.</p>
<pre><code>struct hash_string ///
{
    hash_string() {}

    uint32_t operator ()(const std::string &amp;text) const
    {
        //std::cout &lt;&lt; text &lt;&lt; std::endl;
        static const uint32_t primes[16] =
        {
            0x01EE5DB9, 0x491408C3, 0x0465FB69, 0x421F0141,
            0x2E7D036B, 0x2D41C7B9, 0x58C0EF0D, 0x7B15A53B,
            0x7C9D3761, 0x5ABB9B0B, 0x24109367, 0x5A5B741F,
            0x6B9F12E9, 0x71BA7809, 0x081F69CD, 0x4D9B740B,
        };

        //std::cout &lt;&lt; text.size() &lt;&lt; std::endl;
        uint32_t sum = 0;
        for (size_t i = 0; i != text.size(); i ++) {
            sum += primes[i &amp; 15] * (unsigned char)text[i];
            //std::cout &lt;&lt; text[i] &lt;&lt;std::endl;
            // std::cout &lt;&lt; (unsigned char)text[i] &lt;&lt; std::endl;
        }
        return sum;
    }
};
</code></pre>
<p>python version is like this, which is not completed yet, since I haven't found a way to convert text to unsigned char. So, please help!</p>
<pre><code># -*- coding: utf-8 -*-

text = u'连衣裙女韩范'

primes = [0x01EE5DB9, 0x491408C3, 0x0465FB69, 0x421F0141,
                0x2E7D036B, 0x2D41C7B9, 0x58C0EF0D, 0x7B15A53B,
                0x7C9D3761, 0x5ABB9B0B, 0x24109367, 0x5A5B741F,
                0x6B9F12E9, 0x71BA7809, 0x081F69CD, 0x4D9B740B]

//*text[i] does not work (of course), but how to mimic the logic above
rand = [primes[i &amp; 15]***text[i]** for i in range(len(text))]

print rand

sum_agg = sum(rand)

print sum_agg
</code></pre>
<p>Take text=u'连衣裙女韩范' for example, c++ version returns 18 for text.size() and sum is 2422173716, while, in python, I don't know how to make it 18.</p>
<p>The equality of text size is essential, as a start at least.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because you are using unicode, for an exact reproduction you will need to turn <code>text</code> in a series of bytes (chars in c++).</p>
<pre><code>bytes_ = text.encode("utf8") 
# when iterated over this will yield ints (in python 3)
# or single character strings in python 2
</code></pre>
<p>You should use more pythonic idioms for iterating over a pair of sequences</p>
<pre><code>pairs = zip(bytes_, primes)
</code></pre>
<p>What if <code>bytes_</code> is longer than primes? Use <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow"><code>itertools.cycle</code></a></p>
<pre><code>from itertools import cycle
pairs = zip(bytes_, cycle(primes))
</code></pre>
<p>All together:</p>
<pre><code>from itertools import cycle

text = u'连衣裙女韩范'

primes = [0x01EE5DB9, 0x491408C3, 0x0465FB69, 0x421F0141,
                0x2E7D036B, 0x2D41C7B9, 0x58C0EF0D, 0x7B15A53B,
                0x7C9D3761, 0x5ABB9B0B, 0x24109367, 0x5A5B741F,
                0x6B9F12E9, 0x71BA7809, 0x081F69CD, 0x4D9B740B]

# if python 3
rand = [byte * prime for byte, prime in zip(text.encode("utf8"), cycle(primes))]
# else if python 2 (use ord to convert single character string to int)
rand = [ord(byte) * prime for byte, prime in zip(text.encode("utf8"), cycle(primes))]
hash_ = sum(rand)
</code></pre>
</div>
<span class="comment-copy">I think Python already has built-in good-enough hashing of strings. Have you checked that?</span>
<span class="comment-copy">You're probably looking for <a href="https://docs.python.org/2/library/functions.html#ord" rel="nofollow noreferrer"><code>ord</code></a>.</span>
<span class="comment-copy">that's true, it is just that this logic is used universally in our application that I simply need to duplicate it to generate the same hash code. And my code is implemented in python all the way, so I just want to convert it to python for simplicity.</span>
<span class="comment-copy">You can't encrypt text, only bytes. Encode the text first.</span>
<span class="comment-copy">@SanderDeDycker I updated the post, ord doesnot solve it since text.size() in c++ returns 18, while using ord, I cannot get 18.</span>
<span class="comment-copy">it is throwing error and I print the bytes_, it is printing endlessly! could you help debug it?</span>
<span class="comment-copy">Sorry, the answer I posted was intended for python 3. I've made an edit to show what to do in python 2.</span>
