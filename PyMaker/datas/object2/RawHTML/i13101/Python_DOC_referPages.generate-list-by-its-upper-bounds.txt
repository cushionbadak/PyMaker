<div class="post-text" itemprop="text">
<p>I would like to generate the following type of list.</p>
<p>Input <code>2,5</code></p>
<p>Output</p>
<pre><code>[1,1],[1,2]

[2,1],[2,2]

[3,1],[3,2]

[4,1],[4,2]

[5,1],[5,2]
</code></pre>
<p>i.e. let each index run from 1 to its upper bound I can use loops, as</p>
<pre><code>for i in range(1,3)

for j in range (1,6)

....
</code></pre>
<p>But it becomes increasingly awkward when the input becomes <code>[1,2,3,4,5]...</code></p>
<p>E.g.</p>
<p>Input</p>
<pre><code>[2,3,4]
</code></pre>
<p>Output</p>
<pre><code>[1,1,1] [1,1,2] [1,1,3] [1,1,4]

[1,2,1] [1,2,2] [1,2,3] [1,2,4]

[1,3,1] [1,3,2] [1,3,3] [1,3,4]

[2,1,1] [2,1,2] [2,1,3] [2,1,4]

[2,2,1] [2,2,2] [2,2,3] [2,2,4]

[2,3,1] [2,3,2] [2,3,3] [2,3,4]
</code></pre>
<p>Input</p>
<pre><code>[1,2,3]
</code></pre>
<p>Output</p>
<pre><code>[1,1,1] [1,1,2] [1,1,3]

[1,2,1] [1,2,2] [1,2,3]
</code></pre>
<p>Is there any elegant way of doing that? (preferably in python)</p>
</div>
<div class="post-text" itemprop="text">
<p>Convert them all to <code>range</code>s and use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product</code></a>. Star unpacking makes it easy to do:</p>
<pre><code>allranges = (range(1, lim+1) for lim in inputs)
for prod in itertools.product(*allranges):
    print(prod)
</code></pre>
</div>
<span class="comment-copy">Thank you! It's cool!</span>
