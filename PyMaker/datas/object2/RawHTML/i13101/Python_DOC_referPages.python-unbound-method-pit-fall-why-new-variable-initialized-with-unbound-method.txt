<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/13348031/ids-of-bound-and-unbound-method-objects-sometimes-the-same-for-different-o">id()s of bound and unbound method objects â€” sometimes the same for different objects, sometimes different for the same object</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>Please take a look at code, you will get whole message what I am trying to convey.</p>
<pre><code>class Foo:
   def fun(self):
       pass

a = Foo.fun
print "a is Foo.fun: %s" % (a is Foo.fun)

b = a
c = Foo.fun

print "b is c", (b is c)
print "c is Foo.fun", (c is Foo.fun)

def barFun():
   pass

bar = barFun
print "bar is barFun", (bar is barFun)
</code></pre>
<p>OutPut: </p>
<pre><code>a is Foo.fun: False
b is c False
c is Foo.fun False
bar is barFun True
</code></pre>
<p>Here, why the variable a is not referring Foo.fun. As I know variable assignment is like increasing reference count. i.e, new variable will start pointing the object unlike in language c. 
           So, as we are assigning Foo.fun to var a, a and Foo.fun both should point same object in the memory. But results are unexpected. While 
this assignment works well with normal function. </p>
<p>Here is the code id's of objects are different for unbound method assignment.</p>
<pre><code>class Foo:
   def fun(self):
       pass

a = Foo.fun
print "Id of a: %s. Id of Foo.fun: %s" % (id(a), id(Foo.fun))

b = a
c = Foo.fun

print "Id of b: %s. Id of c: %s" % (id(b), id(c))
print "Id of c: %s. Id of  Foo.fun: %s" % (id(c), id(Foo.fun))

def barFun():
   pass

bar = barFun
print "Id of bar: %s. Id of barFun: %s" % (id(bar), id(barFun))
</code></pre>
<p>OutPut:</p>
<pre><code>Id of a: 10155824. Id of Foo.fun: 139916772374320
Id of b: 10155824. Id of c: 139916772374320
Id of c: 139916772374320. Id of  Foo.fun: 10156224
Id of bar: 10741352. Id of barFun: 10741352
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python 2, <code>Foo.fun</code> is what's called an "unbound method." All methods, bound and unbound, are created dynamically every time you call <code>Foo.fun</code> or <code>Foo().fun</code> so a new method object is created on every call.</p>
<p>In python 3 the idea of "unbound methods" is dropped and <code>Foo.fun</code> simply returns a function. In this case, you'll get the behavior you expect. (<code>Foo().fun</code> still returns a method object in python 3.)</p>
</div>
<span class="comment-copy">This is indeed unusual behavior, but it is at least somewhat <a href="https://docs.python.org/3/reference/expressions.html#id19" rel="nofollow noreferrer">documented</a>. My practical recommendation is to not worry about it too much, and write code that doesn't depend heavily on the implementation details of <code>is</code> or <code>id</code>.</span>
<span class="comment-copy">Because when you access <code>ClassName.method_name</code> you get a new unbound method object.</span>
<span class="comment-copy">Recommended reading: <a href="http://stackoverflow.com/q/13348031/953482">python bound and unbound method object</a></span>
