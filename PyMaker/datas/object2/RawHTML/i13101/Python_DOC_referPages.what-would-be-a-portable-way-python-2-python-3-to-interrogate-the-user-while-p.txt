<div class="post-text" itemprop="text">
<p>I want to ask the user a question that has a default answer, for example:</p>
<pre><code>How many apples do you want? [default 40]: 50
You have requested 50 apples.
</code></pre>
<p>How could this be coded in a neat, robust way that would be usable in Python 2 and 3? How could the way the default value is displayed be made to look something like that shown above?</p>
<p>I have the beginnings of an attempt below:</p>
<pre><code>def interrogate_with_default(
    prompt  = None,
    default = None
    ):
    readline.set_startup_hook(lambda: readline.insert_text(default))
    #readline.set_startup_hook(lambda: readline.insert_text(
    #    " [default: {default}]: ".format(
    #        default = default
    #    )
    #))
    try:
        return get_input(prompt)
    finally:
        readline.set_startup_hook()

def get_input(
    prompt = None
    ):
    if sys.version_info &gt;= (3, 0):
        return input(prompt)
    else:
        return raw_input(prompt)


number_of_apples = interrogate_with_default(
    prompt  = "How many apples do you want?",
    default = "40"
)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the focus of the question is compatibility with python 2 and python 3, the answer is: <strong>Don't do it in an ad hoc way</strong>! There are many things to pay attention to. If you can't avoid having to support multiple platforms, choose a library designed for the purpose and use it consistently. I believe <a href="https://pythonhosted.org/six/" rel="nofollow"><code>six</code></a> is the current state of the art:</p>
<pre><code>from __future__ import print_function
import six
</code></pre>
<p>Then use <code>six.moves.input()</code> to read user input. It is bound to <code>raw_input</code> on python 2, and to regular <code>input</code> on python 3. So basically you'll write a python 3 program, with compatibility plumbing at the top of the module.</p>
<p><strong>Alternative:</strong> You could write <code>from six.moves import input</code>, which on python 2 makes <code>input()</code> behave like <code>raw_input()</code>. This allows for more "native" python 3 code, but is confusing if you're reading it with python 2 specs. I suppose it's safe if the code is <strong>consistently</strong> in python 3 style.</p>
<p>For the default-setting part, keep it explicit so you can understand and debug it easily. I like to set the default values in advance. Then I would simply read an answer, and use it if it's non-empty (and valid)</p>
<pre><code>apples = 40
...
response = six.moves.input("How many apples do you want? [%d]: " % apples).strip()
if response:
    apples = int(response)
</code></pre>
<p>Compared to the <code>input("...") or 40</code> trick that was suggested, this set-up has the advantage that you can validate further and ignore negative values, fractional values, keyboard mash, and in general anything that doesn't fit the particular question you are asking (there's more in life than non-negative integers).</p>
<p>In this case, you could use a try-except block to easily discard non-integer values:</p>
<pre><code>if response:
    try:
        apples = int(response)
    except ValueError:
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>or</code> to supply a default for cases where the user inputs nothing (as the result is an empty string, which <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow">evaluates false-y</a>):</p>
<pre><code>&gt;&gt;&gt; 'foo' or 'bar'
'foo'
&gt;&gt;&gt; '' or 'bar'
'bar'
</code></pre>
<p>To integrate that into a function you can actually use (<code>!r</code> is used to invoke <code>__repr__</code>, so that e.g. quotes are included for strings):</p>
<pre><code>try:
    input = raw_input
except NameError:
    pass

def interrogate(prompt, default=None):
    """Ask the user to enter a value (or accept optional default)."""
    if default is None:
        return input('{}: '.format(prompt))
    return input('{} [default {!r}]: '.format(prompt, default)) or default
</code></pre>
<p>Note compliance with <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">the style guide</a> and an <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow"><em>"easier to ask forgiveness than permission"</em></a> approach to working across Pythons 2.x and 3.x. Although this does shadow a built-in function in 2.x (which some people evidently feel is bad practice), it's one you shouldn't really be using anyway (<code>pylint</code> calls it a bad built-in, in fact!) and makes it easier to write 3.x-style code that will continue to run in 2.x. An alternative would be to use an alias in both cases, e.g.:</p>
<pre><code>try:
    get_input = raw_input
except NameError:
    get_input = input
</code></pre>
<p>then use <code>get_input</code> everywhere; this might be more appropriate if you're treating 2.x and 3.x as equally important.</p>
</div>
<div class="post-text" itemprop="text">
<p>Is this okay?</p>
<pre><code>my_input = int(input("How many apples do you want? [default 40]: ") or "40")
</code></pre>
</div>
<span class="comment-copy">...but <code>from six import input</code> <i>also</i> shadows <code>input</code> on 2.x! How is that more or less confusing for the reader than doing it yourself?</span>
<span class="comment-copy">Yes, it does, I agree. I qualified my objection under your answer, since this <i>is</i> part of the OP's goal. But I'm still mulling over my answer; I think using <code>six.input()</code> would be cleaner.</span>
<span class="comment-copy">Anyway if the code is consistently written in python 3 style, with a header that adapts python 2 to it, then there would be less possibility of confusion.</span>
<span class="comment-copy">@jonrsharpe Okay, now the question is become: <i>How can I use one function to get the input data that both works on Python 2 and Python 3?</i> :P</span>
<span class="comment-copy">This seems to have changed recently.  In <code>six</code>1.10.0 I need to use <code>six.moves.input</code> instead of <code>six.input</code>, and similarly <code>from six.moves import input</code>.</span>
<span class="comment-copy">I don't think that <code>input = raw_input</code> is a good idea...(P.S. not my downvote)</span>
<span class="comment-copy">@KevinGuan why not? (I know whose downvote...)</span>
<span class="comment-copy">Isn't it kind of stupidity to blame anyone when you are not sure?</span>
<span class="comment-copy">Because how can I call default <code>input()</code> function again?</span>
<span class="comment-copy">It is a BAD IDEA to make ad hoc changes to the meaning of python built-ins. It confuses others who read the code, and it confuses you when you read the code again. If you are on python 2 and you want raw input, use <code>raw_input()</code>.</span>
