<div class="post-text" itemprop="text">
<p>I am outputting a file, by populating it with values in certain locations. Any of the names inside the [] brackets are being populated with actual values. But since the values are different in length the format is mess up, how can I do this?</p>
<p>Thank you!</p>
<p>Input file</p>
<pre><code> type xga_control_type is record
      [NAME]                     : std_logic;              -- [OFFSET]     : [DESCRIPTOIN]

end record xga_control_type;  
</code></pre>
<p>Python code</p>
<pre><code>input=open("input.txt","r")
output=open("output.txt","w")

for line in input:
    line=input.readlines()
    if '[OFFSET]' in line:
        line=line.replace('[OFFSET]',register[i]['offset'])

    if '[NAME]' in line:
        line=line.replace('[OFFSET]',register[i]['name'])

    if '[DESCRIPTION]' in line:
        line=line.replace('[DESCRIPTION]',register[i]['description'])  

    output.write(line)
</code></pre>
<p>Current output</p>
<pre><code>type xga_control_type is record
      reserved        : std_logic;                      -- 31..27     : 
      force_all_fault_clear        : std_logic;                      -- 26     : Rising edge forces all fault registers to clear
      force_warning        : std_logic;                      -- 25     : Forces AC2 to report a Master Warning
      force_error        : std_logic;                      -- 24     : Forces AC2 to report a Master Error
      reserved        : std_logic;                      -- 23..22     : 
      ref_delay_cnt        : std_logic;                      -- 21..20     : Number of reference commands to delay output by.  Counts in 4us increments

end record xga_control_type;
</code></pre>
<p>Desired output</p>
<pre><code> type xga_control_type is record
      reserved                     : std_logic;                      -- 31..27     : 
      force_all_fault_clear        : std_logic;                      -- 26         : Rising edge forces all fault registers to clear
      force_warning                : std_logic;                      -- 25         : Forces AC2 to report a Master Warning
      force_error                  : std_logic;                      -- 24         : Forces AC2 to report a Master Error
      reserved                     : std_logic;                      -- 23..22     : 
      ref_delay_cnt                : std_logic;                      -- 21..20     : Number of reference commands to delay output by.  Counts in 4us increments     
end record xga_control_type;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have two options for string formatting in Python: the <code>%</code> operator and the (preferred) <code>.format()</code> method.</p>
<p>These will allow you to format the text considering number precision, number and string padding and alignment (which is what you seem to need).</p>
<p>Check out the documentation at: </p>
<p><a href="https://docs.python.org/2/library/string.html" rel="nofollow">https://docs.python.org/2/library/string.html</a> (Python 2)</p>
<p><a href="https://docs.python.org/3/library/string.html" rel="nofollow">https://docs.python.org/3/library/string.html</a> (Python 3)</p>
<p>These examples from those docs are relevant:</p>
<pre><code>&gt;&gt;&gt; '{:&lt;30}'.format('left aligned')
'left aligned                  '
&gt;&gt;&gt; '{:&gt;30}'.format('right aligned')
'                 right aligned'
&gt;&gt;&gt; '{:^30}'.format('centered')
'           centered           '
&gt;&gt;&gt; '{:*^30}'.format('centered')  # use '*' as a fill char
'***********centered***********'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can pad to a certain width:</p>
<pre><code>input=open("input.txt","r")
output=open("output.txt","w")

for line in input:
    line=input.readlines()
    if '[OFFSET]' in line:
        line=line.replace('[OFFSET]',register[i]['offset'] + (' ' * (30 - len(register[i]['offset']))))

    if '[NAME]' in line:
        line=line.replace('[OFFSET]',register[i]['name'] + (' ' * (40 - len(register[i]['name'])))

    if '[DESCRIPTION]' in line:
        line=line.replace('[DESCRIPTION]',register[i]['description'])  

    output.write(line)
</code></pre>
<p>Don't need to pad the last section though.
Feel free to edit the numbers as you see fit.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use the .format() syntax like so:</p>
<pre><code>line=line.replace('[OFFSET]', '{0:&lt;40}'.format(register[i]['offset']))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sounds like you want each column to be the same number of characters (e.g. 20 characters), so you need to pad your string with spaces to make it 20 characters total. The ljust function of a string can do this:</p>
<pre><code>"hello".ljust(20,' ')
&gt;&gt;&gt;'hello               '
</code></pre>
<p>Applied to your code, you can do something like this:</p>
<pre><code>line=line.replace('[OFFSET]',register[i]['offset'].ljust(20,' '))
</code></pre>
</div>
