<div class="post-text" itemprop="text">
<p>I have the following function that is used to execute system commands in Python:</p>
<pre><code>def engage_command(
    command = None
    ):
    #os.system(command)
    return os.popen(command).read()
</code></pre>
<p>I am using the <code>os</code> module instead of the <code>subprocess</code> module because I am dealing with a single environment in which I am interacting with many environment variables etc.</p>
<p>How can I use Bash with this type of function instead of the default <code>sh</code> shell?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>output = subprocess.check_output(command, shell=True, executable='/bin/bash')
</code></pre>
<p><a href="https://github.com/python/cpython/blob/7fae13e4889ca44bbf22b61af277aca6d5dc13b9/Lib/os.py#L978-L1021" rel="nofollow noreferrer"><code>os.popen()</code> is implemented in terms of <code>subprocess</code> module</a>.</p>
<hr/>
<blockquote>
<p>I am dealing with a single environment in which I am interacting with many environment variables etc.</p>
</blockquote>
<ol>
<li><p>each <code>os.popen(cmd)</code> call creates a <strong><em>new</em></strong> <code>/bin/sh</code> process, to run <code>cmd</code> shell command.</p>
<p>Perhaps, it is not obvious from <a href="https://docs.python.org/3/library/os.html#os.popen" rel="nofollow noreferrer">the <code>os.popen()</code> documentation that says</a>: </p>
<blockquote>
<p>Open a pipe to or from command <code>cmd</code></p>
</blockquote>
<p><em>"open a pipe"</em> does not communicate clearly: "start a new shell process with a redirected standard input or output" -- your could <a href="http://bugs.python.org" rel="nofollow noreferrer">report a documentation issue</a>.</p>
<p>If there is any doubt; the <a href="https://github.com/python/cpython/blob/7fae13e4889ca44bbf22b61af277aca6d5dc13b9/Lib/os.py#L978-L1021" rel="nofollow noreferrer">source</a> confirms that each successful <code>os.popen()</code> call creates a new child process</p></li>
<li><p><a href="https://stackoverflow.com/q/205064/4279">the child <strong><em>can't modify</em></strong> its parent process environment (normally)</a>.</p></li>
</ol>
<p>Consider:</p>
<pre><code>import os
#XXX BROKEN: it won't work as you expect
print(os.popen("export VAR=value; echo ==$VAR==").read())
print(os.popen("echo ==$VAR==").read())
</code></pre>
<p>Output:</p>
<pre><code>==value==

====
</code></pre>
<p><code>====</code> means that <code>$VAR</code> is empty in the second command because the second command runs in a different <code>/bin/sh</code> process from the first one.</p>
<p>To run several bash commands inside a single process, put them in a script or pass as a string:</p>
<pre><code>output = check_output("\n".join(commands), shell=True, executable='/bin/bash')
</code></pre>
<p>Example:</p>
<pre><code>#!/usr/bin/env python
from subprocess import check_output

output = check_output("""
    export VAR=value; echo ==$VAR==
    echo ==$VAR==
    """, shell=True, executable='/bin/bash')
print(output.decode())
</code></pre>
<p>Output:</p>
<pre><code>==value==
==value==
</code></pre>
<p>Note: <code>$VAR</code> is not empty here.</p>
<p>If you need to generate new commands dynamically (based on the output from the previous commands); it creates <a href="http://pexpect.readthedocs.org/en/stable/FAQ.html#whynotpipe" rel="nofollow noreferrer">several issues</a> and some of the issues could be fixed using <code>pexpect</code> module: <a href="https://stackoverflow.com/a/23795689/4279">code example</a>.</p>
</div>
<span class="comment-copy">Thanks for your suggestion. As I mentioned in the question, I am interacting with a lot of environment variables and whatnot, so, for my purposes, the <code>os</code> module is what I am trying to use.</span>
<span class="comment-copy">@d3pd: using <code>os</code> module gives your nothing here. Click the link: <code>os.popen()</code> uses <code>subprocess</code> under the hood anyway.</span>
<span class="comment-copy">@JFSebastian Ok, thanks for clarifying that. Do you suppose you could include an example of how you could use this approach to set and use environment variables? -- perhaps something like the following: <code>export MY_DIRECTORY="~/test"</code>, <code>ls "${MY_DIRECTORY}"</code></span>
<span class="comment-copy">@d3pd: I've updated the answer to show how envvars behave in multiple commands.</span>
<span class="comment-copy">@JFSabastian Thank you very very much for those clear and helpful details . Your solution clarifies the subprocess nature of <code>os.popen</code> and shows how to use Bash with subprocessing. (Would you happen to know if there is some way to approach the idea of maintaining the existence of the Bash environment of a subprocess that is created and accessed from Python?)</span>
