<div class="post-text" itemprop="text">
<p>In an application I want to collect messages related to some dedicated part of the processing, and then show these messages later at user request.  I would like to report severity (e.g. info, warning), time of message, etc., so for this I considered to use the Python standard <a href="https://docs.python.org/3.5/library/logging.html#logging.getLogger" rel="nofollow"><code>logging</code></a> module to collect the messages and related information.  However, I don't want these messages to go to a console or file.</p>
<p>Is there a way to create a Python logger, using <code>logging</code>, where the messages are kept internally (in memory) only, until read out by the application.  I would expect start of code like:</p>
<pre><code>log = logging.getLogger('my_logger')
... some config of log for internal only; not to console
log.error('Just some error')
... some code to get/clear messages in log until now
</code></pre>
<p>I have tried to look in <a href="https://docs.python.org/3.5/library/logging.html" rel="nofollow">logging â€” Logging facility for Python</a>, but most example are for immediate output to file or console, so an example for internal logging or reference is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should just use another handler. You could use a <code>StreamHandler</code> over an <code>io.StringIO</code> that would simply log to memory:</p>
<pre><code>log = logging.getLogger('my_logger')
memlog = io.StringIO()
log.addHandler(logging.StreamHandler(memlog))
</code></pre>
<p>All logging sent to <code>log</code> can be found in <code>memlog.getvalue()</code></p>
<p>Of course, this is just a simple Handler that concatenates everything in one single string, even if for versions &gt;= 3.2 each record is terminated, by default with a <code>\n</code>. For more specific requirements, you could have a look at a <code>QueueHandler</code> or implement a dedicated <code>Handler</code>.</p>
<p>References: <a href="https://docs.python.org/3.5/library/logging.handlers.html" rel="nofollow">logging.handlers</a> in the Python Standard Library reference manual.</p>
</div>
<span class="comment-copy">You could write your own <a href="https://docs.python.org/3/library/logging.html#handler-objects" rel="nofollow noreferrer">handler</a> that implements such behaviour.</span>
<span class="comment-copy">@jonrsharpe: But it looks like handlers can only be specified through <code>logging.basicConfig(handlers=...)</code> whereby it applies for logging in general, and not just a dedicated logger.  Is there a way to specify a handler for a logger created by <code>logger.getLogger</code>?</span>
<span class="comment-copy">I'm not sure what you mean by <i>"logging in general"</i> vs. a <i>"dedicated logger"</i>. Could you edit the question to clarify what you're doing?</span>
<span class="comment-copy">@jonrsharpe: I have updated the question with an initial description of the overall purpose... it is right to consider using the Python standard <code>logging</code> module for this?</span>
<span class="comment-copy">Perhaps not, if you want to do something that changes the API</span>
<span class="comment-copy">The use of <code>io.StringIO</code> gives access to all the messages in a single string, but I kind of hoped for individual messages access, so the output could be formatted per message.</span>
<span class="comment-copy">@EquipDev: for versions &gt;=3.2, messages are delimited with `\n'. Pleas see my edit.</span>
<span class="comment-copy">@EquipDev if raw <code>StringIO</code> doesn't suit you -- write a custom handler.</span>
