<div class="post-text" itemprop="text">
<p>If I have a binary string, let say <code>str = "010100011010101001001101100101100110101"</code> which is an encoded by base64 version of some other string how can I decode this string?</p>
</div>
<div class="post-text" itemprop="text">
<p>It would have been great if your example string is actually something meaningful rather than something made up which makes this question rather unclear, but I will try my best here to figure out what you might have meant in the most verbose manner possible.</p>
<p>Assuming your actual input is a <code>str</code> that looks like this:</p>
<pre><code>s = '101100101010011010000100011000001011010010110000100111000110000'
</code></pre>
<p>You can get the hexadecimal form of this by casting it to <code>int</code> using the <code>base</code> keyword argument</p>
<pre><code>&gt;&gt;&gt; i = int(s, base=2)  # 6436561067884170800
</code></pre>
<p>Then turn it back into a string by formatting it like so:</p>
<pre><code>&gt;&gt;&gt; h = '%x' % i  # '595342305a584e30'
</code></pre>
<p>Then use the <a href="https://docs.python.org/3/library/binascii.html#binascii.a2b_hex" rel="nofollow"><code>binascii.a2b_hex</code></a> function on the hexadecimal string to get the raw bytes:</p>
<pre><code>&gt;&gt;&gt; b64 = binascii.a2b_hex(h)  # b'YSB0ZXN0'
</code></pre>
<p>If it is some valid base 64 encoded stream of bytes, you may then use <a href="https://docs.python.org/3/library/base64.html#base64.b64decode" rel="nofollow"><code>base64.b64decode</code></a> on that to get the actual bytes</p>
<pre><code>&gt;&gt;&gt; r = base64.b64decode(b64)  # b'a test'
</code></pre>
<p>To turn that into a string, apply the correct codec to it (i.e. use <code>bytes.encode</code>).</p>
<p>Finally, if you cared to know how I generated that input, this is all the above, reversed into a single one-line function:</p>
<pre><code>&gt;&gt;&gt; '{0:b}'.format(int(binascii.b2a_hex(base64.b64encode(b'a test')), base=16))
'101100101010011010000100011000001011010010110000100111000110000'
</code></pre>
</div>
<span class="comment-copy">convert it to ASCII and use the base64 module from python lib</span>
<span class="comment-copy">It's not clear what you mean; how did you get to that string in the first place? It's certainly not in base 64, and to decode it from binary you will need to know things like how long each character should be in bits and how they map (e.g. ASCII ordinals, as suggested above). It's 39 characters long, which suggests to me that you should start by getting three characters at a time.</span>
<span class="comment-copy">@ssphinx <code>TypeError: Incorrect padding</code>; that <i>isn't</i> in base 64.</span>
<span class="comment-copy">maybe (I dont really think so...) <code>binascii.b2a_base64(str)</code> (str is a bad variable name ...)</span>
<span class="comment-copy">@jonrsharpe yes I know, but the question wasn't clear. <code>strb64 = base64.b64encode(str); base64.b64decode(strb64)</code></span>
<span class="comment-copy">holy cow nice work</span>
<span class="comment-copy">Excellent answer to an unclear question.</span>
<span class="comment-copy">oh I thought that was actually his binary from above ... I see now ... maybe your right I will leave my +1 snce you went way above and beyond</span>
<span class="comment-copy">I don't know, I generally abhor dealing with inputs that do not match the description, so I ignore those and construct a new example input that actually matches what was said on the tin.</span>
