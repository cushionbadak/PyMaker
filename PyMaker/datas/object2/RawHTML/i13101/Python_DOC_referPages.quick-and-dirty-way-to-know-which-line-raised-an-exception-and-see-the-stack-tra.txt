<div class="post-text" itemprop="text">
<p>Let's say I have a really basic program that will throw an exception for sure.  I've added a <strong>pdb.set_trace()</strong> to it and I want be able to look around when an error occurs.</p>
<pre><code>import pdb
from random import randint

def two_possible_errors(input):

    try:
        assert input % 2, "error!"
        assert not input % 2, "error!"
    except Exception, e:
        pdb.set_trace()
        raise

two_possible_errors(randint(0,9))
</code></pre>
<p>My problem is when I catch the exception, I am already at the except clause and I don't really know where the error actually happened.  Typically, I will look around a bit, but if I want to see the stack trace, I need to resume execution and wait till the program crashes.  Is there a better way?</p>
<p>OK, let's start out at the exception.  I could put a message on assert, in this particular case, but that's beside the point.</p>
<pre><code>&gt; /Users/jluc/kds2/wk/explore/explore_pdb_exceptions.py(16)two_possible_errors()
-&gt; raise
(Pdb) e
AssertionError('error!',)
</code></pre>
<p>At this point, I have no idea which of the two lines errored out.</p>
<p>Let's try <strong>where</strong>.  It returns the current location, not where the exception happened.</p>
<pre><code>(Pdb) where
  /Users/jluc/kds2/wk/explore/explore_pdb_exceptions.py(20)&lt;module&gt;()
-&gt; test()
  /Users/jluc/kds2/wk/explore/explore_pdb_exceptions.py(18)test()
-&gt; two_possible_errors(randint(0,9))
&gt; /Users/jluc/kds2/wk/explore/explore_pdb_exceptions.py(16)two_possible_errors()
-&gt; raise
</code></pre>
<p>Let's print line 16, just to be sure:</p>
<pre><code>(Pdb) l 16
 11             try:
 12                 assert input % 2, "error!"
 13                 assert not input % 2, "error!"
 14             except Exception, e:
 15                 pdb.set_trace()
 16  -&gt;             raise
 17
 18         two_possible_errors(randint(0,9))
 19
 20     test()
</code></pre>
<p>In order to actually know where I am, I can let pdb <strong>(c)ontinue</strong> and check out the exit stacktrace.  But now I am out of pdb entirely.  Is there a simple way to get that info from the exception itself instead?  Before continue-ing?</p>
<pre><code>(Pdb) c
Traceback (most recent call last):
  File "explore_pdb_exceptions.py", line 20, in &lt;module&gt;
    test()
  File "explore_pdb_exceptions.py", line 18, in test
    two_possible_errors(randint(0,9))
  File "explore_pdb_exceptions.py", line 13, in two_possible_errors
    assert not input % 2, "error!"
AssertionError: error!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about:</p>
<pre><code>import traceback
traceback.print_exc()
</code></pre>
<p>That should print a traceback for the exception that is currently being handled (the one that triggered the <code>except</code> control block).</p>
<p>If typing the commands in <code>pdb</code>, it will try to interpret the second one as a <code>pdb</code> command. Prevent this by adding a <code>p</code> in front of the command.</p>
<p>For reference, the <a href="https://docs.python.org/3/library/traceback.html" rel="nofollow">traceback</a> module.</p>
</div>
<span class="comment-copy">try <code>list</code> ot <code>ll</code> command in the <code>pdb</code> interactive shell, that should print your the current location</span>
<span class="comment-copy">you mean try <b>list</b> or <b>l</b> in pdb?  That gets me my <i>exception catching</i> location, not where the <i>exception occurrence</i> location.  See my output above.  <i>Let's print line 16, just to be sure</i>.  Note that my line #s are a bit out of whack with my sample program, but it still points at the same actual code, i.e. the line right after the pdb.set_trace().</span>
<span class="comment-copy">Sounded really good, thanks, except that gets me <b>AttributeError: Pdb instance has no attribute 'do_traceback'</b>.</span>
<span class="comment-copy"><code>pdb</code> is trying to interpret the command, if you type it in pdb, you should try with <code>pÂ traceback.print_exc()</code></span>
<span class="comment-copy">gotcha.  It worked.  <b>assert input % 2, "error!"</b>  You rock!  Why do I need the p bit in this case?  I can do other stuff on pdb command line, though I've learned that using short variable names like 's' is not a good ideal.</span>
<span class="comment-copy"><code>p</code> is shorthand for <code>print</code>, which tells pdb to interpret what follows as python (and if it evaluates to not None, print it). Without it, it assumes you want to run the pdb's <code>traceback</code> command, which does not exist.</span>
<span class="comment-copy">that makes sense.  but I can run some functions just fine without the p  <b>(Pdb) int("6")</b> =&gt; <i>6</i>.  or, <b>(Pdb) string.upper("abc")</b> =&gt; <b>ABC</b>.  Anyway, I'll just remember to try using 'p' when pdb starts complaining for some reason.  Txs again.</span>
