<div class="post-text" itemprop="text">
<p>I have a function which accepts a callback. Is there a standard way to document the type of this parameter?</p>
<pre><code>def example(callback):
    """Example function.

    Parameters
    ----------
    callback : type
       Description of `callback`.
    """
    print(callback(3, 14))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Found the answer while formulating the question, but the question itself doesn't give any results on Google.</p>
<p><a href="https://www.python.org/dev/peps/pep-0484/#callable" rel="nofollow">PEP-0484</a> introduces type annotation in python. For example the type of a callback function taking two integers and returning a string is:</p>
<pre><code>from typing import Callable

Callable[[int, int], str]
</code></pre>
</div>
<span class="comment-copy">How do I document that the function accepts optional <code>*args</code> and <code>**kwargs</code> parameters? I have a construct where a callback function can have case specific parameters that get passed through by the caller upon initialization. For instance: I create a Button class instance where the CB gets the button as first argument. The Button <code>__init__</code> however also accepts arbitrary <code>**kwargs</code> that are stored and passed through to the callback on the <code>click</code> event. How would I document that type of a callback?</span>
<span class="comment-copy">From <a href="https://docs.python.org/3/library/typing.html#typing.Callable" rel="nofollow noreferrer">docs.python.org/3/library/typing.html#typing.Callable</a> "There is no syntax to indicate optional or keyword arguments; such function types are rarely used as callback types." Seems like there's no standard way to document those. Perhaps a better option would be to pass the click parameters as a dict in which case it's a fixed parameter.</span>
<span class="comment-copy">Hmm... alternatively I might just say it's a <code>dict</code> type and describe it more thoroughly somewhere in the textual documentation. I was hoping that there was some pythonic way to do that.</span>
<span class="comment-copy">The pythonic way would be to pass **kwargs as the dict itself. This way you're explicitly giving the callback the extra parameters. The problem with what you're trying to do is that you expose the internals of the callback where they shouldn't apparently be needed. Basically the function managing the callback would now need to know what parameters the callback needs/expects, whereas ideally the callback should be a black box that the managing function doesn't care about.</span>
<span class="comment-copy">Oh that's how I do it. The kwargs is passed through to the callback as a dict when it is invoked. The calling function/class doesn't know nor care about what's inside the kwargs.</span>
