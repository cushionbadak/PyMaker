<div class="post-text" itemprop="text">
<p>My professor showed the class some code we can use to display the initials of a name, but she never explained how it works. The textbook doesn’t help much either. I am confused only on the second line. This isn’t for homework; I just want to know what makes it display the first letters in the string.<br/></p>
<pre><code>userName = input("Enter your name: ")
initials = '.'.join(name[0].upper() for name in userName.split())
print(initials)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Say <code>userName = "john paul jones"</code> after the input is run.</p>
<p>Then <code>userName.split()</code> splits the name on whitespace <code>' '</code>, returning an list which consists of the strings `"john", "paul", "jones" (in that order).</p>
<p>The <code>for name in userName.split()</code> part iterates over this -- hence <code>name</code> is successively bound to <code>"john"</code> then <code>"paul"</code> then <code>"jones"</code>. </p>
<p>When <code>name</code> is bound to e.g. <code>"paul"</code> the expression <code>name[0]</code> returns the first character (e.g. <code>'p'</code>) which is then turned to the corresponding upper case (if it isn't already upper case). The net result is that the generator expression</p>
<pre><code>(name[0].upper() for name in userName.split())
</code></pre>
<p>successively returns the strings <code>'J'</code> then <code>'P'</code> then <code>'J'</code> (in our example).</p>
<p>Finally, <code>join</code> takes an iterable of strings and joins them together, using as a delimiter the string that join is called on -- in this case <code>'.'</code> -- think of this delimiter as the glue which holds the strings in the iterable together. When thus joined -- the final result is <code>"J.P.J"</code>.</p>
<p>Your instructor probably should have tacked on a <code>+'.'</code> at the end of the expression to get a final period (<code>"J.P.J."</code>).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>userName = input("Enter your name: ")
</code></pre>
<p>First, userName is a string, for example my name: <code>kevin guan</code>.</p>
<pre><code>'.'.join(name[0].upper() for name in userName.split())
</code></pre>
<p>Now, <code>name[0].upper() for name in userName.split()</code> is a generator comprehension(it gives a generator):</p>
<pre><code>userName.split()
</code></pre>
<p>gives a list like <code>['kevin', 'guan']</code>.</p>
<pre><code>name[0].upper() for name in ['Kevin', 'Guan']
</code></pre>
<p>You'll get <code>['K', 'G']</code>, because <code>name[0]</code> is <code>k</code> in first <code>for</code> loop, then <a href="https://docs.python.org/3/library/stdtypes.html#str.upper" rel="nofollow"><code>.upper()</code></a> covert it to <code>K</code> and save it to a list(actually it's a generator). 
And at the second loop, we got <code>G</code>.</p>
<p>Then, <code>'.'.join</code> gives <code>K.G</code>. For more info, please check the document about <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join()</code></a> and <a href="https://www.python.org/dev/peps/pep-0289/" rel="nofollow"><strong>generator comprehension</strong></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's take it apart:</p>
<pre><code>initials = '.'.join(name[0].upper() for name in userName.split())
</code></pre>
<p>There is an inner loop here, <code>for name in userName.split()</code>.  This is splitting the string in userName into chunks, or <code>name</code>s.  The documentation for <a href="https://docs.python.org/2/library/string.html" rel="nofollow">split()</a> says:</p>
<blockquote>
<p>Return a list of the words of the string s. If the optional second
  argument sep is absent or None, the words are separated by arbitrary
  strings of whitespace characters (space, tab, newline, return,
  formfeed).</p>
</blockquote>
<p>So if the string contains spaces, it will split the string as you would expect.  <code>"my lastname"</code> would be split into a list <code>["my", "lastname"]</code>.  This list becomes the list of names in the <code>for</code> loop.  <code>name</code> would become the values <code>"my"</code> and <code>"lastname"</code> in this case.</p>
<p>Next, we have the cryptic function <code>name[0].upper()</code>.  This is applied to each value of <code>name</code> from the <code>for</code> loop.  The first part, <code>name[0]</code> takes the first character of the string in <code>name</code>.  The second part, <code>.upper()</code> converts that first character (which is actually a one-characters string) into an uppercase character.  This is described in the same documentation as above.</p>
<p>Continuing our example, <code>name[0].upper()</code> takes the two strings <code>"my"</code> and <code>"lastname"</code>, takes the first letter from each one and converts it to uppercase: <code>"M"</code> and <code>"L"</code>.  The resulting list is <code>["M", "L"]</code>.</p>
<p>Finally, the <code>'.'.join()</code> expression takes the list inside of the <code>join()</code> and joins them together using the <code>'.'</code> character.  In this case, the result is <code>"M.L"</code>.</p>
</div>
<span class="comment-copy">The second line contains string indexing, a generator expression, and calls to <code>str.join</code>, <code>str.upper</code>, and <code>str.split</code>.Which of those things are you unfamiliar with?</span>
<span class="comment-copy">This code is buggy; the final initial isn't followed by a period.</span>
<span class="comment-copy">Actually the final result is <code>J.P.J</code> in this case.</span>
<span class="comment-copy">@KevinGuan Thanks.!</span>
