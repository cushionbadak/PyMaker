<div class="post-text" itemprop="text">
<p>Following is a list in python which contains a list of time for a train with each index as a stoppage for the train</p>
<pre><code>Train_arrival_time = ['Source', '09:30 PM', '09:56 PM', '11:23 PM', '12:01 AM', '12:12 AM', '12:44 AM', '01:55 AM', '03:18 AM', '04:58 AM', '06:18 AM', '06:33 AM', '07:23 AM', '08:45 AM', '09:14 AM', '10:17 AM', '10:59 AM', '12:15 PM', '01:30 PM', '01:49 PM', '02:55 PM', '03:16 PM', '03:58 PM', '05:15 PM', '05:38 PM', '06:45 PM', '07:20 PM', '08:07 PM', '08:38 PM', '09:25 PM', '11:28 PM', '12:50 AM', '01:21 AM', '01:53 AM', '02:45 AM', '02:57 AM', '03:45 AM', '05:20 AM', '06:00 AM', '06:30 AM']
</code></pre>
<p>As evident from the list, this train runs for three consecutive days (<code>source</code> is the starting station). I am trying to get the time difference between two stations , and since using <strong>12-hour format</strong> will create chaos i tried using the following script to convert the whole list to <strong>24-hour format</strong></p>
<pre><code>from datetime import *
t12 = '09:35 PM'
t24 =  datetime.strptime(t12, '%I:%M %p')
</code></pre>
<p>which is giving</p>
<pre><code>1900-01-01 21:35:00
</code></pre>
<p>as an output. Is there any way to avoid getting the UTC date?
Additionally, I am stuck on how shall I get the time difference between two stations on different days; viz, <strong>09:30PM (day 1) and 12:15PM (day2)</strong></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I am trying to get the time difference between two stations , and since using 12-hour format will create chaos i tried using the following script to convert the whole list to 24-hour format</p>
</blockquote>
<p>The day doesn't matter if all you need is to find a time difference for adjacent items:</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python
from datetime import datetime, timedelta

ZERO, DAY = timedelta(0), timedelta(days=1)
times = (datetime.strptime(time12h_string, '%I:%M %p')
         for time12h_string in Train_arrival_time[1:])
previous_time = next(times)
time_in_transit = [ZERO]
for time24h in times:
    time24h = datetime.combine(previous_time, time24h.time())
    while time24h &lt; previous_time: # time on the next station should not be ealier
        time24h += DAY
    time_in_transit.append(time24h - previous_time + time_in_transit[-1])
    previous_time = time24h
</code></pre>
<p>Here's <code>time_in_transit</code> is the accumulative time between stations starting with the first station that has the arrival time i.e., <code>time_in_transit[i]</code> is a time in transit  for the <code>i</code>-th station (the time difference between the station and the first station). It is computed as a series of partial sums (like <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow"><code>itertools.accumulate()</code></a>) of time differences between adjacent stations, namely: </p>
<ul>
<li>stations are identified by their index in the <code>Train_arrival_time</code> list (shifted by one compared to the <code>time_in_transit</code> list) and/or their arrival times -- look at the <strong>Station</strong> column in the output below</li>
<li><code>(time24h - previous_time)</code> is the time difference between adjacent stations -- look at the <strong>Adjacent</strong> column in the output below</li>
<li><code>time_in_transit[-1]</code> is the previous item in the series (the last one) -- it is the same as <code>time_in_transit[len(time_in_transit)-1]</code> in Python</li>
<li>the current item is the sum "the current difference + the accumulated sum" -- look at the <strong>Total</strong> column in the output below.</li>
</ul>
<blockquote>
<p>Is there any way to avoid getting the UTC date? </p>
</blockquote>
<p>The result of <code>datetime.strptime()</code> is a naive datetime object that does not correspond to any time zone. There is no point to talk about time zones if you don't know a specific date (year, month, day).</p>
<blockquote>
<p>I am stuck on how shall I get the time difference between two stations on different days; viz, 09:30PM (day 1) and 12:15PM (day2)</p>
</blockquote>
<p>It is easy to find the time between adjacent stations and the total time in transit:</p>
<pre class="lang-py prettyprint-override"><code>print("Station  | Adjacent | Total")
print("\n".join(["{} | {:&gt;8s} | {}".format(time12h, str(curr-prev), str(curr))
                 for time12h, curr, prev in zip(Train_arrival_time[1:],
                                                time_in_transit,
                                                [ZERO]+time_in_transit)]))
</code></pre>
<h3>Output</h3>
<pre class="lang-py prettyprint-override"><code>Station  | Adjacent | Total
09:30 PM |  0:00:00 | 0:00:00
09:56 PM |  0:26:00 | 0:26:00
11:23 PM |  1:27:00 | 1:53:00
12:01 AM |  0:38:00 | 2:31:00
12:12 AM |  0:11:00 | 2:42:00
...
05:20 AM |  1:35:00 | 1 day, 7:50:00
06:00 AM |  0:40:00 | 1 day, 8:30:00
06:30 AM |  0:30:00 | 1 day, 9:00:00
</code></pre>
<p>To find the time difference between <code>i</code>-th and <code>j</code>-th stations:</p>
<pre class="lang-py prettyprint-override"><code>time_difference = time_in_transit[j] - time_in_transit[i]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, convert all the time strings to dates. The day does not matter, but we will need it later.</p>
<pre><code>from datetime import datetime, timedelta
times = [datetime.strptime(x, '%I:%M %p') for x in Train_arrival_time[1:]]
</code></pre>
<p>Now, you can keep a running count of days to add, and add those to all the datetimes in the list. Whenever the current time is smaller than the previous, add another day.</p>
<pre><code>days_to_add = 0
for i in range(1, len(times)):
    times[i] += timedelta(days=days_to_add)
    if times[i] &lt; times[i-1]:
        days_to_add += 1
        times[i] += timedelta(days=1)
</code></pre>
<p>Now, you can get the adjusted times and the total time difference between the first and last time. To get an output list "day 1, time x", just strip the year and month from the output.</p>
<pre><code>for x in times:
    print(x.strftime("Day %d, %H:%M"))
print(times[-1] - times[0])
</code></pre>
<p>Output:</p>
<pre><code>Day 01, 21:30
...
Day 03, 06:30
1 day, 9:00:00
</code></pre>
<p>Of course, if the time difference between two consecutive times is greater than one whole day, then you are out of luck.</p>
</div>
<span class="comment-copy"><code>datetime</code> objects include a date - that's the <code>date</code> in <code>datetime</code>. Besides, why do you want to exclude them if you want to keep track of different days anyway?</span>
<span class="comment-copy">Do you just want to <i>display</i> only the time of those objects? If so, you'll need to use <code>strftime</code> to format the string you want. However, you should keep them as <code>datetime</code> objects if you want to do calculations on them.</span>
<span class="comment-copy">@TigerhawkT3 but the date is the UTC 'S starting date. How can I get it to current UTC date, or much better local time(IST)</span>
<span class="comment-copy">I suggest you Google how to create <code>datetime</code> objects.</span>
<span class="comment-copy"><code>arrival_time = t24.time()</code> . Why do you think, that you get UTC date? You don't provide any time zone information, so datetime object doesn't contain tzinfo</span>
<span class="comment-copy">Thanks for the answer, but I guess i am stuck again. <code>time difference</code> does not work and gives a <code>IndexError: list index out of range</code> error when the difference in transit is big enough.  say, time_in_transit[40] - time_in_transit[2] And i was getting <code>1 day, 4:22:00</code> as an answer for <code>time_in_transit[35] - time_in_transit[2]</code> whereas actual time taken is more than 3 days. :|</span>
<span class="comment-copy">@Jarwin: 1. <code>IndexError</code> issue is trivial (you just need to learn how indexing in Python works -- there are plenty of existing questions on Stack Overflow. I recommend playing with a tiny list (two/three items e.g., <code>L=[10,20,30]</code>) in Python interactive shell: give it various indexes (positive, negative, big, small, zero, integers, floats, strings) and see what happens and what input leads to what errors) 2. The <b><i>total</i></b> difference is only 33 hours for the input in the question that is much less than three days (note: one day == 24 hours).</span>
<span class="comment-copy">Thank you sir, I got it now. And if it's not too much to ask, can you please be so kind as to enlighten me on what you did there with <code>time_in_transit</code> list? Or provide a reference maybe?</span>
