<div class="post-text" itemprop="text">
<p>I am writing a script in which the computer will play a game of war with itself. I need the script to only return the value of the first entry in the list:        </p>
<p>Note: This is only an example</p>
<pre><code>    test = {'hey':1, 'hi':2, 'hello':3, 'greetings':4, 'goodmorning':5,   'night':6}

    for a in test:
        print test[a]

    #this returns
    1
    2
    3
    4
    5
    6
</code></pre>
<p>I would like this script to only return the value of the first entry.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since dictionaries are unordered, and if you are dependent on using a dictionary, but order matters to you, you should consider using an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow">OrderedDict</a> from collections. This will preserve the order of your dictionary based on insertion. So, if you enter <code>a, v, b</code>, it will be in that order.</p>
<p>Demo: </p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; d = OrderedDict()
&gt;&gt;&gt; d['a'] = 1
&gt;&gt;&gt; d['v'] = 1
&gt;&gt;&gt; d['b'] = 1
&gt;&gt;&gt; d
OrderedDict([('a', 1), ('v', 1), ('b', 1)])
</code></pre>
<p>To get the first value based on requirements to get only the first entry: </p>
<pre><code>d.items()[0][1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The built-in Dictionaries are not ordered collections in the sense that you don't access the <em>values</em> by indexed positions (i.e. 1st, 2nd, etc).</p>
<p>Instead, you access them by <em>keys</em> (e.g. <code>test['hey']</code>, <code>test['hi']</code>, etc.). For example:</p>
<pre><code>&gt;&gt;&gt; test = { 'hey':1, 'hi':2, 'hello':3 }
&gt;&gt;&gt; test[0]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 0
&gt;&gt;&gt; test['hi']
2
</code></pre>
<p>You should look at the <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow">Python docs</a> on using dictionaries.</p>
<p>If you want to access elements by <em>position</em> (i.e. an index), then you should consider using a list or a tuple instead.</p>
<p>You might want to look at the <code>OrderedDict</code> class <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow">docs</a> instead if you wish to preserve order while still using a dictionary. </p>
<p>Quoting from the docs:</p>
<blockquote>
<p>An OrderedDict is a dict that remembers the order that keys
  were first inserted. If a new entry overwrites an existing entry, the
  original insertion position is left unchanged. Deleting an entry and
  reinserting it will move it to the end.</p>
</blockquote>
<p>See <a href="https://stackoverflow.com/a/33444597/4594973">idjaw's post</a> for a good example on using the <code>OrderedDict</code>.</p>
</div>
<span class="comment-copy">Dictionaries are not ordered collections in the sense that you don't access the <i>values</i> by position (i.e. 1st, 2nd, etc); you access them by keys (e.g. <code>test['hey']</code>, <code>test['hi']</code>, etc.)</span>
<span class="comment-copy">did you try: <code>print a</code> as well?</span>
<span class="comment-copy">Do you mean to return [1] as per your example ?</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/1867861/python-dictionary-keep-keys-values-in-same-order-as-declared">Python dictionary, keep keys/values in same order as declared</a></span>
<span class="comment-copy">yes, but I need for the only thing to be returned to be the value of the entry. In this particular case, the value is 1.</span>
<span class="comment-copy">@Mezex Yes...look at my answer...the last line of my example gets you that.</span>
<span class="comment-copy">@Mezex -You can simply append it to list like :     list1.append(dict_name.values()[0])</span>
<span class="comment-copy">@Mezex: try <code>d.items()[0][1]</code> for getting the first tuple in the dictionary and then the <i>value</i> instead of the <i>key</i>.</span>
<span class="comment-copy">That's a good point @ray . Easier to follow. I can update my answer with that. Thanks.</span>
