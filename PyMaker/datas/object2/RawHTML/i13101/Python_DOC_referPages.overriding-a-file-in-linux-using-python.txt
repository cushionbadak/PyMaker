<div class="post-text" itemprop="text">
<p>Is it possible to force a rename os.rename to overwrite another file if it already exists?  For example in the code below if the file Tests.csv already exists it would be replaced by the Tests.txt file (that was also renamed to Tests.csv).</p>
<pre><code>os.rename("C:\Users\Test.txt","C:\Users\Tests.csv");
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try <a href="http://docs.python.org/library/shutil.html#shutil.move" rel="noreferrer"><code>shutil.move()</code></a>:</p>
<pre><code>from shutil import move

move('C:\\Users\\Test.txt', 'C:\\Users\\Tests.csv')
</code></pre>
<p>Or <code>os.remove</code> and then <code>shutil.move</code>:</p>
<pre><code>from os import remove
from shutil import move

remove('C:\\Users\\Tests.csv')
move('C:\\Users\\Test.txt', 'C:\\Users\\Tests.csv')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since Python 3.3, there is now a standard cross-platform solution, <a href="https://docs.python.org/3/library/os.html#os.replace" rel="noreferrer"><code>os.replace</code></a>:</p>
<blockquote>
<p>Rename the
  file or directory src to dst. If dst is a directory, <code>OSError</code> will be
  raised. <strong>If dst exists and is a file, it will be replaced silently if
  the user has permission</strong>. The operation may fail if src and dst are on
  different filesystems. If successful, the renaming will be an atomic
  operation (this is a POSIX requirement).</p>
<p><strong>Availability: Unix, Windows.</strong></p>
<p>New in version 3.3.</p>
</blockquote>
<p>However, contrary to the documentation, on Windows it's not guaranteed to be atomic (in Python 3.4.4). That's because <a href="https://hg.python.org/cpython/file/v3.4.4/Modules/posixmodule.c#l4289" rel="noreferrer">internally</a> it uses <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa365240%28v=vs.85%29.aspx" rel="noreferrer"><code>MoveFileEx</code></a> on Windows, which doesn't make such a guarantee.</p>
</div>
<div class="post-text" itemprop="text">
<p>As the <a href="http://docs.python.org/library/os.html" rel="noreferrer">documentation</a> says it's impossible to guarantee an atomic renaming operation on Windows if the file exists so what Python does is asking to do the double step <code>os.remove</code> + <code>os.rename</code> yourself, handling potential errors.</p>
<p>On unix systems <code>rename</code> overwrites the destination if exists (because the operation is guaranteed to be atomic).</p>
<p>Note that on windows it's also possible that deleting the destination file will fail even if you have permission because the file may be in use. This is another essential limitation of the windows file system and you have to handle it yourself in the code.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>On Unix, if dst exists and is a file, it will be replaced silently if the user has permission. The operation may fail on some Unix flavors if src and dst are on different filesystems. If successful, the renaming will be an atomic operation (this is a POSIX requirement). <strong>On Windows, if dst already exists, OSError will be raised even if it is a file; there may be no way to implement an atomic rename when dst names an existing file</strong>.
  <a href="http://docs.python.org/library/os.html#os.rename" rel="noreferrer">http://docs.python.org/library/os.html#os.rename</a></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Funny enough, the documentation for <code>os.rename()</code> says it does replace the target on Unix systems, but on Windows it does not.  They mention something vague about it being impossible to implement atomic renaming if the destination exists on Windows, which IMO is hardly enough reason not to support it.</p>
<p>You should catch OSError (destination exists on Windows) and remove the destination and try again, I suppose.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the Standard Library documentation, “On Windows, if dst already exists, OSError will be raised even if it is a file; there may be no way to implement an atomic rename when dst names an existing file.”</p>
<p><a href="http://docs.python.org/library/os.html#os.rename" rel="nofollow">http://docs.python.org/library/os.html#os.rename</a></p>
<p>So the only solution, unfortunately, would be to change operating systems; Windows simply disallows a <code>rename()</code> atop an existing file.</p>
</div>
<span class="comment-copy">How about first unlinking the target file, catching a potential exception?</span>
<span class="comment-copy">Remember to always escape backslashes in strings (e.g. use <code>"C:\\Users\\Test.txt"</code>)</span>
<span class="comment-copy">... or use <code>r"C:\Users\Test.txt"</code>, but be careful with <code>r"C:\\"</code>.</span>
<span class="comment-copy">@JohnZwinck: nope, this works on Windows while <code>os.rename</code> doesn't. See <a href="http://hg.python.org/cpython/file/9b26fa7f9adf/Lib/shutil.py#l298" rel="nofollow noreferrer"><code>shutil.move</code> source code</a>.</span>
<span class="comment-copy">Well, +1 from me for the current answer, although I suspect this may give rise to a race condition. From the other answers, I gather that this in unavoidable on Windows.</span>
<span class="comment-copy">the question asks "...if exists...", so remove should be wrapped with if or try logic</span>
<span class="comment-copy">How is MoveFileEx not atomic?</span>
<span class="comment-copy">@paulm If you check its MSDN page, it never promises atomicity and even explicitly suggests <code>MoveFileTransacted</code> as an alternative. In practice, <code>MoveFileEx</code> is atomic on local file systems but non-atomic on network file systems (well, actually it depends on the server). But even for local FSes its atomicity is non-contractual.</span>
<span class="comment-copy">another reason Windows should be banished from the earth</span>
<span class="comment-copy">Or not because this is completely wrong, the MoveFile API is atomic</span>
