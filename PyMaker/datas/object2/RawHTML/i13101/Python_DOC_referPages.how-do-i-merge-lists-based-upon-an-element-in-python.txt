<div class="post-text" itemprop="text">
<p>I am new to python so a simplified explanation would be appreciated  :)</p>
<p>I have been assigned a task which requires me to take a csv file, with two columns, the first for a name and the second for a score. With this data i would like to create a single list containing this data for every row in the csv file. so it should look something like this:</p>
<pre><code>list1 = [['Bob Smith', '7'],['Bob Smith', '9'],['Bob Smith', '4'],['James Johnson', '3'],['James Johnson', '6']]
</code></pre>
<p>I have managed to get that far however the task then requires me to group names and scores together and put them into a new list. This is what it should look like:</p>
<pre><code>List2 = [['Bob Smith', '7', '9', '4'],['James Johnson', '3', '6']]
</code></pre>
<p>Essentially it is taking all of the scores from elements that have the same name and grouping them together in a new list.</p>
<p>As i am new to python i am finding this a little difficult to comprehend would someone be able to point me in the direction to the solution for my problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a dictionary <a href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">https://docs.python.org/2/tutorial/datastructures.html#dictionaries</a>) to create a  mapping from names to a <em>list of values</em>. For example:</p>
<pre><code> import collections

 list1 = [
     ['Bob Smith', '7'],
     ['Bob Smith', '9'],
     ['Bob Smith', '4'],
     ['James Johnson', '3'],
     ['James Johnson', '6']]

  names = collections.defaultdict(list)                                                                                                                                                                                                        

  for k, v in list1:
      names[k].append(v)

  print names
</code></pre>
<p>Prints</p>
<pre><code>{'James Johnson': ['3', '6'], 'Bob Smith': ['7', '9', '4']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure how you're reading this file in from CSV, but you could do something like this:</p>
<pre><code>with open(r'c:\debug\file.txt', 'r') as f:
  lines = [l.strip().split(',') for l in f.readlines()]    # convert each line to a python list
  names = { l[0] : [l[0]] for l in lines }  # create a dictionary mapped to each "name" in the CSV
  for l in lines:
    names[l[0]].append(l[1])

list2 = names.values()
</code></pre>
<p>The following result for <code>print list2:</code> </p>
<pre><code>[['James Johnson', '3', '6'], ['Bob Smith', '7', '9', '4']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would do this with a single function:</p>
<ol>
<li>Open your document</li>
<li>Read each line, storing them as a list</li>
<li>Store each of these [name,number] lists in a meta-list</li>
<li>dissect and sort the meta-list into a dictionary</li>
</ol>
<p>If you want to test this code, just do the following:</p>
<ol>
<li>copy/paste this code into a file</li>
<li>Add "print(names)" to the end of the file</li>
<li>run sort('yourFile.csv')</li>
</ol>
<p>.</p>
<pre><code>#Create a function to open and sort through the .csv file
def sort(fileName):
    #Open the file
    with open(fileName) as file:
        #create your first list to hold the information
        lists = []
        #read each line in the list
        for each in file:
            #separate each name from its respective number
            (name,number) = each.strip().split(',')
            #store them both in a second list
            #add each "name and number" to the original list
            list2 = [name,number]
            lists.append(list2)

        #create a dictionary to hold your new datasets
        names = {}
        #checking for the name and numbers previously stated
        for name, number in lists:
            #if the name isn't already in your dictionary, "names"
            #then add it to the dictionary, and its respective number
            if name not in names:
                  names[name] = [number]
            #but if the name IS in the dictionary, add the new number to it.
            else:
                  names[name].append(number)
</code></pre>
</div>
<span class="comment-copy">Store the names as keys in a dictionary then store each score number as a value in the dictionary. Recreate the list structure you need by using the dictionary you just made.</span>
<span class="comment-copy">I understand the concept you are suggesting however i am unsure how i would translate this into code. Could you give me an example of how to use it?</span>
<span class="comment-copy">Mhm, alright, I added a working python code to build the dict...</span>
<span class="comment-copy">You may want to show an additional example or introduce the use of <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> since all the values will be <code>list</code>s.</span>
<span class="comment-copy">@wwii Thanks updated :p</span>
<span class="comment-copy">Please explain why <code>extend</code> was used instead of <code>append</code>.  also it may be more idiomatic to use <i>tuple unpacking</i> in the <code>for</code> statement - <code>for k,v in list1</code>.</span>
