<div class="post-text" itemprop="text">
<p>I would like to create a function with 2 arguments (x,y) ,x and y is a string, and returns true if x is a sub anagram of y. example: "red" is a sub anagram of "reda" but "reda" is not a sub anagram of "red".</p>
<p>So far what I have got:
I have turned x,y into list and then sorted them. That way I can compare the alphabets from each string. </p>
<pre><code>def sub_anagram(str1, str2):
    s1 = list(str1)
    s2 = list(str2)
    s1.sort()
    s2.sort()
    for letters in s2:
        if letters in s1: 
            return True
        else:
            return False
</code></pre>
<p>What I am confused with:
I want to compare the string y to x and if y contains all the characters from x then it returns true otherwise false</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a>.</p>
<pre><code>from collections import Counter
def subanagram(str1, str2):
    str1_counter, str2_counter = Counter(str1), Counter(str2)
    return all(str1_counter[char] &lt;= str2_counter[char]
                 for char in str1_counter)
</code></pre>
<p>In the code above, <code>str1_counter</code> is basically a dictionary with the characters appearing in <code>str1</code> and their frequency as the key, value.  Similarly for <code>str2_counter</code>.</p>
<p>Then the code checks that for all characters in <code>str1</code>, that character appears at least as many times in <code>str2</code> as it does in <code>str1</code>.</p>
<p><strong>Edit:</strong> If a subanagram is defined to be strictly smaller than the original, e.g. you want <code>subanagram("red", "red")</code> to be <code>False</code>, then first compare the two counters for equality.</p>
<pre><code>from collections import Counter
def subanagram(str1, str2):
    str1_counter, str2_counter = Counter(str1), Counter(str2)
    if str1_counter == str2_counter:
        return False
    return all(str1_counter[char] &lt;= str2_counter[char]
                 for char in str1_counter)
</code></pre>
<p>If I were <em>not</em> using <code>Counter</code> for some reason, it would be something along the lines of:</p>
<pre><code>def subanagram(str1, str2):
    if len(str1) == len(str2):
        return False  #Ensures strict subanagram

    s2 = list(str2)
    try:
        for char in str1:
            s2.remove(char)
    except ValueError:
        return False
    return True
</code></pre>
<p>But as you can see, it is longer, less declarative and less efficient than using <code>Counter</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think you can just check for each character in x being present in y, as this does not account for a character being repeated in x.  In other words, 'reeeeed' is not a sub-anagram of 'reda'.</p>
<p>This is one way to do it:</p>
<ol>
<li>make a copy of y</li>
<li>for each character in x, if that character is present in the y-copy, remove it from the y-copy.  if it isn't present, return false.</li>
<li>if you reach the end of the loop and the y-copy is empty, return false.  (x is an anagram, but not a sub-anagram.)</li>
<li>otherwise return true.</li>
</ol>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/28997056/return-true-if-all-characters-in-a-string-are-in-another-string">Return True if all characters in a string are in another string</a></span>
<span class="comment-copy">@ZN13 Not so - think about comparing "reed" and "red", without returning <code>True</code> when evaluating whether "reed" is a subanagram of "red"</span>
<span class="comment-copy">Is a word a subanagram of itself?  Or does a subanagram have to be strictly smaller than the original?</span>
<span class="comment-copy">thank you! it worked but how would i write it without using counter?</span>
<span class="comment-copy">Hmm, probably something like combining <code>try-except ValueError</code> with <code>for char in s1: s2.remove(char)</code> - not the most efficient, and I would always use <code>Counter</code> for something like this personally because it feels more readable.</span>
<span class="comment-copy">How would i make a copy of y? Ive got this so far but i just cant figure out how to check and remove def ana(str1, str2):     s1 = list(str1)     s2 = list(str2)     s1.sort()     s2.sort()     for letters in s2:         if letters in s1:              print (letters, )         else:             return False</span>
<span class="comment-copy"><code>y_copy = list(y)</code></span>
<span class="comment-copy">Hey, i have done that but I would like to know how to do the 2nd and 3rd part of what you said.</span>
<span class="comment-copy">You have to show some effort.  We're not going to write your whole program for you.</span>
<span class="comment-copy">I have been trying to write this for long time. I have edited the post to show what I have got so far but it just doesnt click in my head how to carry on from there.</span>
