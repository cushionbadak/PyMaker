<div class="post-text" itemprop="text">
<p>For example:  </p>
<pre><code>for y,x in zip(range(0,4,1),range(0,8,2)):  
    print(x+y)  
</code></pre>
<p>Returns:  </p>
<pre><code>0  
3  
6  
9  
</code></pre>
<p>What I want is :</p>
<pre><code>['0','3','6','9']
</code></pre>
<p>How can I achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way for your understanding, without using <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list comprehension</a>, is:</p>
<pre><code>mylist = []
for y,x in zip(range(0,4,1),range(0,8,2)):
    mylist.append(str(x+y))
print mylist
</code></pre>
<p>Output:</p>
<pre><code>['0','3','6','9']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this using <a href="https://docs.python.org/3/tutorial/datastructures.html#tut-listcomps" rel="nofollow">list comprehension</a></p>
<pre><code>&gt;&gt;&gt;[x+y for y,x in zip(range(0,4,1),range(0,8,2))]
[0, 3, 6, 9]
&gt;&gt;&gt;[str(x+y) for y,x in zip(range(0,4,1),range(0,8,2))]
['0', '3', '6', '9']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can generate list dynamically:</p>
<pre><code>print [str(x+y) for x, y in zip(range(0,4,1), range(0,8,2))]

['0','3','6','9']
</code></pre>
<p>This technique called <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehensions</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could skip the for loops and use <code>map()</code> and import <code>add</code> from <code>operator</code></p>
<pre><code>from operator import add
l = map(add,range(0,4,1),range(0,8,2))
print l

[0, 3, 6, 9]
</code></pre>
<p>And if you want it as strings you could do</p>
<pre><code>from operator import add
l = map(add,range(0,4,1),range(0,8,2))
print map(str, l)

['0','3', '6', '9'] 
</code></pre>
</div>
<span class="comment-copy"><code>mylist = [(x+y) for x,y in zip(range(0,4,1),range(0,8,2))]</code></span>
<span class="comment-copy">Do you specifically want the answers as strings? If you want to do further arithmetic (including sorting) then it's best to keep them as numbers (they also use less RAM in numeric form); you can easily convert them to strings when outputing them.</span>
<span class="comment-copy">Don't use class name <code>list</code> as variable name.</span>
