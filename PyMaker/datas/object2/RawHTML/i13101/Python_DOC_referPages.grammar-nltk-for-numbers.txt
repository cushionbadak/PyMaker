<div class="post-text" itemprop="text">
<p>I'm coding something in order to analyse a list (or a dictionary/tuple) with elements which are strings or numbers. But i'm having an issue: I can analyse simple numbers (from 0 to 9) but not others.
Here is my code:</p>
<pre><code>grammaire = nltk.CFG.fromstring("""
    L -&gt; OPEN CONTENT CLOSE
    OPEN -&gt; "["
    CLOSE -&gt; "]"
    CONTENT -&gt; Element Seq |   
    Seq -&gt; | S Element Seq
    S -&gt; ","
    Element -&gt; Word | nombre | T | L | D
    T -&gt; "(" BeginTuple ")"
    BeginTuple -&gt; ElementTuple S ElementTuple EndTuple
    EndTuple -&gt; S ElementTuple |  
    ElementTuple -&gt; nombre | T
    D -&gt; "{" BeginDic "}"
    BeginDic -&gt; ElementDic EndDic
    EndDic -&gt; S ElementDic EndDic |
    ElementDic -&gt; Key ":" Value
    Key -&gt; Word
    Value -&gt; nombre | T | L
    Word -&gt; "Bonjour" | "Aurevoir" | "Bye" | "Cya" | "Coucou" | " " | "Hello" | "Hi" 
    nombre -&gt; chiffre | chiffre nombre
    chiffre -&gt;  '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
    """)

sent,res,elmt = "[{Bonjour:1,Hello:(1,2)}]",[],''
c = '()[]{}:,'
for x in sent:
    if x in c:
        if len(elmt) == 0:
            res += [x,]
        else:
            #try: res += [int(elmt),] #si c'est un nombre on le transforme en int
            #except: res += [elmt,]
            res += [elmt,]
            elmt = ""
            res += [x,]
    else:
        elmt += x
print(res)
</code></pre>
<p>The importants lines are in the beginning, with "chiffre" and "nombre". What am I doing wrong? Plus, I need to do the same with strings (so chiffre will be ' "a" | "b" | "c"... ' and nombre will be the same).</p>
<p>I tried to take in my list the numbers as Int and not as Str but it doesn't work... (cf the commented region with the try/except). Ofc then I draw the tree of that.</p>
</div>
<div class="post-text" itemprop="text">
<p>The narrow answer to your question is that your tokenizer groups multi-digit numbers as single tokens. If you tokenize each digit separately, it will work. More generally, you should tackle the task of tokenization more thoroughly; your code is too brittle to support things like treating quote-delimited strings as single tokens, for example. </p>
<p><strong>However:</strong> Why are you trying to parse a string representation of an arbitrary python list? Don't do it. If you're reading data you wrote yourself, write it out in simpler form so that you can read it easily. E.g., does each record consist of a label and a list of numbers? Write each record as one space-delimited row. That's trivial to read in and parse.</p>
<p>For data with more complicated structure,  use <a href="https://docs.python.org/3/library/json.html" rel="nofollow"><code>json</code></a> to write out your file and read it back in. It handles all the parsing for you.</p>
</div>
