<div class="post-text" itemprop="text">
<p>I was given this question to write the code for this magic square.</p>
<blockquote>
<p>A two dimensional integer matrix <code>s</code> is a magic square if </p>
<ol>
<li>The dimensions of s is nxn</li>
<li>Every integer in [1,2,...,n*n] appears in s, exactly once.</li>
<li>The sum of all rows in s is the same as the sum of all columns in s, is the same as the sum of the diagonal elements in s.</li>
</ol>
<p>Example: <code>s=[[8, 3, 4], [1, 5, 9], [6, 7, 2]]</code> represents the
  following integer matrix:</p>
<pre><code>8 3 4
1 5 9
6 7 2
</code></pre>
<p>Note that <code>s</code> above is a two dimensional integer array</p>
<ol>
<li>s is a 3x3 square </li>
<li>All numbers in [1,2,...,9] appear in s exactly once.</li>
<li><p>The sum of all rows is the same as the sum of all columns is the same as the sums along both diagonals.</p>
<ul>
<li>Row  sums: <code>8+3+4 == 1+5+9 == 6+7+2 == 15</code></li>
<li>Col  sums: <code>8+1+6 == 3+5+7 == 4+9+2 == 15</code></li>
<li>Diag sums: <code>8+5+2 == 6+5+4 == 15</code></li>
</ul></li>
</ol>
<p>Example: The following are also magic: <code>[[8, 1, 6], [3, 5, 7], [4, 9,
  2]], [[6, 7, 2], [1, 5, 9], [8, 3, 4]]</code></p>
</blockquote>
<p>I understand how to program and write this code but my question is how to write a type contract for this. I know how to write a program to execute this but when it comes to type contracts for any program, how do you know how many parameters there are going to be, and how do you know how to write examples of what you want it to do for a program like this. Is there a general method to follow when writing a type contract and making examples for a program?</p>
</div>
<div class="post-text" itemprop="text">
<p>If what you mean is how you can solve this generically, then there is no silver bullet to all problems.  </p>
<p>However, In this specific problem, your input is a single list.  The user can give you any such list eg.</p>
<pre><code>[3]
[3, [2, 5]]
[[5, 6]]
['ac']
</code></pre>
<p>As long as you can determine that it is a "syntactically valid" list according to some rules, you can process whether it is magical or not.</p>
<p>You could force the user to enter data individually to guarantee it is nxn and unique integers [1..9] like this:</p>
<pre><code> &gt; Enter n: 3
 &gt; Enter [row, column] [1, 1]: 1
 &gt; Enter [row, column] [1, 2]: 3
 ...
</code></pre>
<p>This would make magic checking easier later on as conditions #1, #2 are already satisfied.
But it is really up to you how you implement it.  You could take the entire list at once etc. but this is a decision agreed upon by the user and you.</p>
</div>
<div class="post-text" itemprop="text">
<p>In terms of checking whether <code>array</code> is what your docstring says it should be, <strong>I wouldn't actually bother</strong>. Use <a href="https://docs.python.org/3/glossary.html#term-duck-typing" rel="nofollow">duck typing</a>; assume that it's the right kind of thing, and leave the caller to deal with any errors that result if they don't pass in what you asked them to. </p>
<p>Your function can't continue if the input is invalid, so there's no point handling the errors at that level, and trying to explicitly use e.g. <code>isinstance</code> only narrows down what the users can pass in further than is necessary (e.g. why shouldn't your function continue to work if the user passes in a tuple of tuples, rather than a list of lists? They're both sequences...).</p>
<hr/>
<p>If your question is really about including examples, as your comment suggests, here's where I'd start:</p>
<pre><code>def is_magic(array):
    """Whether the array is 'magic'.

    Arguments:
      array (sequence of sequences of integers): The array to test.

    Returns:
      bool: Whether the array is 'magic'.

    Notes:
      A 'magic' array is a 3x3 array of integers where each row, column
      and diagonal adds up to the same number

    Examples:

        &gt;&gt;&gt; is_magic([[8, 3, 4], [1, 5, 9], [6, 7, 2]])
        True

    """
    raise NotImplementedError

if __name__ == '__main__':
    import doctest
    doctest.testmod()
</code></pre>
<p>The <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow">docstring</a> documents the function, and can be used by e.g. IDEs and the <code>help</code> function to tell the user what the function does. Note the use of <a href="https://docs.python.org/3/library/doctest.html" rel="nofollow"><code>doctest</code></a> examples, which both show the user how to call the function and what to expect back, and act as tests for your code.</p>
<p>Of course, when you first run it, it'll fail...</p>
<pre><code>**********************************************************************
File "C:\Python27\so.py", line 16, in __main__.is_magic
Failed example:
    is_magic([[8, 3, 4], [1, 5, 9], [6, 7, 2]])
Exception raised:
    Traceback (most recent call last):
      File "C:\Python27\lib\doctest.py", line 1315, in __run
        compileflags, 1) in test.globs
      File "&lt;doctest __main__.is_magic[0]&gt;", line 1, in &lt;module&gt;
        is_magic([[8, 3, 4], [1, 5, 9], [6, 7, 2]])
      File "C:\Python27\so.py", line 20, in is_magic
        raise NotImplementedError
    NotImplementedError
**********************************************************************
1 items had failures:
   1 of   1 in __main__.is_magic
***Test Failed*** 1 failures.
</code></pre>
</div>
<span class="comment-copy"><i>"type contract"</i>? This is <i>Python!</i> Just assume the input is a sequence of sequences, and let the caller deal with any errors if they pass anything else in.</span>
<span class="comment-copy">@jonrsharpe but i would have to input examples like if i put in lets say is_magic(.....) and then put the output of what it is suppose to be.</span>
<span class="comment-copy">If you want to show examples, put them in the docstring as <a href="https://docs.python.org/3/library/doctest.html" rel="nofollow noreferrer"><code>doctest</code>s</a>, then you can actually ensure they run and use them to test your code.</span>
<span class="comment-copy">Also, what I refer to is called <a href="https://docs.python.org/3/glossary.html#term-duck-typing" rel="nofollow noreferrer"><i>"duck typing"</i></a>, if you want to know more.</span>
<span class="comment-copy"><i>"As long as you can determine that it is a "syntactically valid" list according to some rules"</i> - but the easiest way is via duck typing (i.e. try to use it as if it was valid) and the best way to tell the user otherwise is to raise an error, and <i>that happens automatically!</i></span>
<span class="comment-copy">You are assuming 'easiest' means easiest for the programmer.  The user would have to figure out himself what he did wrong.</span>
<span class="comment-copy">And who is the user? If the OP is just writing a Python function, then the <i>"user"</i> will probably be <i>some other Python code</i>, which can check for e.g. the <code>TypeError</code> with a <code>try</code> accordingly. There's no way for <b>this function</b> to continue on invalid input, so it should stop, complain to whoever called it and let <i>them</i> deal with it. It's all about handling errors in the most appropriate place, whether that's the current function (we can continue), the caller (they can continue) or right back to the user (can't continue at all), and the level of reporting is different at each point too.</span>
