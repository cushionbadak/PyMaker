<div class="post-text" itemprop="text">
<p>I've been using PyMySQL for a while now and created my own wrapper that I'm used to to shorthand writing queries.  Nonetheless I've been creating CSV files with OrderedDict because I need to keep the order the same but I realize that if I use PyMySQL for querying the database, I will not get the order the database is giving back.  This is a little annoying for spot checking CSV files if I wanted to just dump stuff rather than hand write the orders.</p>
<p>My question is, how do I use PyMySQL with OrderedDict? Currently my code is as follows:</p>
<pre><code>import pymysql
conn = pymysql.connect(host='localhost', user='root', passwd='', db='test')
cursor = conn.cursor(pymysql.cursors.DictCursor)
</code></pre>
<p>So whenever I query, I'll be getting a dictionary back:</p>
<pre><code>cursor.execute("""SELECT * FROM test""")
for row in cursor:
    pp(row)  # gives me dictionary
</code></pre>
<p>What I want is that when I roll through cursor I'm actually retrieving an OrderedDict of the columns in the order they come in from the database.</p>
<p>Something like:</p>
<pre><code>cursor = conn.cursor(pymysql.cursors.OrderedDict)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>cursors.DictCursorMixin</code> and change its <code>dict_type</code> to <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="noreferrer"><code>collections.OrderedDict</code></a> (the default is <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="noreferrer"><code>dict</code></a>):</p>
<pre><code>from collections import OrderedDict
from pymysql.cursors import DictCursorMixin, Cursor

class OrderedDictCursor(DictCursorMixin, Cursor):
    dict_type = OrderedDict
</code></pre>
<p>Then you can use the new cursor class as shown below</p>
<pre><code>cursor = conn.cursor(OrderedDictCursor)
</code></pre>
</div>
<span class="comment-copy">add another column which holds, source row and order by that when querying?</span>
<span class="comment-copy">@Busturdust - I could write in my wrapper a function say "query_ordered" or something that has the select fields in a list and then can create a generator for yielding ordereddict in replace of the dictionary but it if I can just get at a solution without writing that and that would also play well with my wrapper already, I would rather have that.</span>
<span class="comment-copy">Works exactly as expected.  Just saw that in PyMySQL's github repository as well.  Speedy answer!  Thanks!</span>
<span class="comment-copy">thanks. works great</span>
<span class="comment-copy">This is so god damn sweet! thanks</span>
