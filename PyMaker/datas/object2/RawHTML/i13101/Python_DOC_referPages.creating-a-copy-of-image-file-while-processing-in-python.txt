<div class="post-text" itemprop="text">
<p>I am processing a BMP file and currently I am converting it into a grayscale. I am however, using <code>rb+</code> which writes to the same file and saves the original as processed. How do I process the image file which actually makes a copy of the original and processes it instead of destroying the original? </p>
<p>Here is the code</p>
<pre><code>from io import SEEK_CUR

def main():
    filename = input("Please enter the file name: ")

    # Open as a binary file for reading and writing
    imgFile = open(filename, "rb+")

    # Extract the image information.
    fileSize = readInt(imgFile, 2)
    start = readInt(imgFile, 10)
    width = readInt(imgFile, 18)
    height = readInt(imgFile, 22)

    # Scan lines must occupy multiples of four bytes.
    scanlineSize = width * 3
    if scanlineSize % 4 == 0:
        padding = 0
    else :
        padding = 4 - scanlineSize % 4

    # Make sure this is a valid image.
    if fileSize != (start + (scanlineSize + padding) * height):
        exit("Not a 24-bit true color image file.")

    # Move to the first pixel in the image.
    imgFile.seek(start)# Process the individual pixels.
    for row in range(height): #For each scan line
        for col in range(width): #For each pixel in the line
            processPixel(imgFile)

        # Skip the padding at the end.
        imgFile.seek(padding, SEEK_CUR)

    imgFile.close()## Processes an individual pixel.#@param imgFile the binary file containing the BMP image#

def processPixel(imgFile) :
#  Read the pixel as individual bytes.
    theBytes = imgFile.read(3)
    blue = theBytes[0]
    green = theBytes[1]
    red = theBytes[2] #Read the pixel as individual bytes.
    # Process the pixel
    newBlue = 255 - blue
    newGreen = 255 - green
    newRed = 255 - red
    # Process the pixel.



    # Write the pixel.
    imgFile.seek(-3, SEEK_CUR)# Go back 3 bytes to the start of the pixel.

    imgFile.write(bytes([newBlue, newGreen, newRed]))## Gets an integer from a binary file.#@param imgFile the file#@ param offset the offset at which to read the integer#@
##  Gets an integer from a binary file.
# @param imgFile  the file
# @param offset  the offset at which to read the integer
# @return  the integer starting at the given offset
#

def readInt(imgFile, offset): #Move the file pointer to the given byte within the file.
    imgFile.seek(offset)

    # Read the 4 individual bytes and build an integer.
    theBytes = imgFile.read(4)
    result = 0
    base = 1
    for i in range(4):
        result = result + theBytes[i] * base
        base = base * 256

    return result# Start the program.
main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend making a copy of the file first then writing to that copy.</p>
<p>You can use the <a href="https://docs.python.org/3/library/shutil.html" rel="nofollow"><code>copyfile</code></a> function from the <code>shutil</code> module to copy a file.
Here is a demo of how to copy a file:</p>
<pre><code>import shutil  
shutil.copyfile('/path/to/src/file', '/path/to/dest/file')  
</code></pre>
</div>
<span class="comment-copy">show your code please</span>
<span class="comment-copy">This is a school assignment and I was advised not to post anywhere because of plagiarism. My code works, I just want to make a copy of the image.</span>
<span class="comment-copy">can't you show just the few lines that are problematic: how you open and save your file?</span>
<span class="comment-copy">Ok I have added some code</span>
<span class="comment-copy">just open a new file and copy into it instead of writing over your existing file! Use for example scipy.misc.imsave if you are working with images...</span>
<span class="comment-copy">Thanks. Can you give me some code implementation ?</span>
<span class="comment-copy">Sure, I added that.</span>
<span class="comment-copy">Thank you. Let me try to work on it.</span>
<span class="comment-copy">Sounds good. Please do upvote/mark as solution for the answer if it helps.</span>
<span class="comment-copy">Sure will do!!!!</span>
