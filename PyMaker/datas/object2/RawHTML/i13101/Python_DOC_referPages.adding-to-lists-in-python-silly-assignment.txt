<div class="post-text" itemprop="text">
<p>I am to create a program that fills 3 lists with the following numbers:</p>
<ul>
<li><strong>A</strong> - 1 2 3 4 5 6 7 8 9 10</li>
<li><strong>B</strong> - 0 2 4 6 8 10 12 14 16 18 20</li>
<li><strong>C</strong> - 1 4 9 16 25 36 49 64 81 100</li>
</ul>
<p>This is what I have so far:</p>
<pre><code>def printList(listName):
    print(listName)
    fillerVariableForInput=input("Press any key to continue")

# Main
Alphalist=[]
for i in range(1,11):
    Alphalist.append(i)
print(Alphalist)

Bravolist=[]
for i in range(0,11):
    Bravolist.append(i*2)
print(Bravolist)

Charlielist=[]
for i in range(1,11):
    Charlielist.append(i*i)
print(Charlielist)
</code></pre>
<p>Is there a better or more efficient way to do this? My professor insists that this is "THE" way to do this. </p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, assuming python2:</p>
<pre><code>Alphalist = range(1,11)
Bravolist = range(0,21,2)
Charlielist = [x*x for x in xrange(1,11)]
</code></pre>
<p>for python3 you would have to change the <code>xrange</code> to <code>range</code> and the first two to (these will work in python2 as well):</p>
<pre><code>Alphalist = list(range(1,11))
Bravolist = list(range(0,21,2))
</code></pre>
<p>However reading the "fine print" of the question may require you to insert these numbers to an existing list or append them to the list (as the title actually says). Then you could use the extend method:</p>
<pre><code>Alphalist = []
Alphalist.extend( range(1,11) )
# etc
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The idiomatic way to do it in Python 3:</p>
<pre><code># the variable name is in snake_case and you have a space
# after each comma (see PEP8 for the full
# story about python naming conventions : https://www.python.org/dev/peps/pep-0008/)
alphalist = list(range(1, 11)) # range generate the list without a for loop
print(alphalist)

# the third parameter of range is the "step": here we count 2 by 2
bravolist = list(range(0, 21, 2))
print(bravolist)

# this is a comprehension list, a syntactic shortcut to write for loops
# building lists. It also works on dict, sets and generators.
charlielist = [i * i for i in range(1, 11)]
print(charlielist)
</code></pre>
<p>How ever your teacher may want you to learn the basics of the for loop and the methods of lists, and in that case, the examples he gave you are spot on.</p>
<p>In Python 2, <code>range()</code> returns a <code>list</code>, so you don't need to call list() on it. I do advise you to learn Python 3 though, as the version 2 is going to disappear in 5 years.</p>
</div>
<div class="post-text" itemprop="text">
<p>Firstly, I'd recommend you check <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP 0008 -- Style Guide for Python Code</a>.
More specifically: <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="nofollow">Naming Conventions</a>.</p>
<p>Now to the lists, Python has a really cool thing called: <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">List Comprehensions</a>. Which for your case I would write them as follows.</p>
<pre><code>alpha_list = [i for i in range(1, 11)]
print (alpha_list)

bravo_list = [i*2 for i in range(0, 11)]
print (bravo_list)

charlie_list = [i*i for i in range(1, 11)]
print (charlie_list)
</code></pre>
</div>
<span class="comment-copy">Use <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer"><i>list comprehension</i></a> like <code>Charlielist = [i*i for i in range(1,11)]</code>?</span>
<span class="comment-copy">Well, he's wrong about that: list comprehensions are more concise and, for this sort of thing, more readable.</span>
