<div class="post-text" itemprop="text">
<p>In Python 2.7, I'm getting </p>
<blockquote>
<p>'module' has no attribute</p>
</blockquote>
<p>, and/or</p>
<blockquote>
<p>'name' is not defined</p>
</blockquote>
<p>errors when I try to split up a large python file.</p>
<p>(I have already read similar posts and the Python modules documentation)</p>
<p>Say you have a python file that is structured like this:</p>
<pre><code>&lt;imports&gt;

&lt;50 global variables defined&gt;

&lt;100 lengthy functions that each use most or all of the globals 
 defined above, and also call each other&gt;

&lt;main() that calls some of the functions and uses the globals&gt;
</code></pre>
<p>So I can easily categorize groups of functions together, create a python file for each group, and put them there. The problem is whenever I try to call any of them from the main python file, I get the errors listed above. I think the problem is related to circular dependencies. Since all of the functions rely on the globals, and each other, they are circularly dependent. </p>
<p>If I have main_file.py, group_of_functions_1.py, and group_of_functions_2.py, </p>
<p>main_file.py will have:</p>
<pre><code>import group_of_functions_1.py
import group_of_functions_2.py
</code></pre>
<p>and group_of_functions_1.py will have</p>
<pre><code>import main_file.py
import group_of_functions_2.py
</code></pre>
<p>and group_of_functions_2.py will have</p>
<pre><code>import main_file.py
import group_of_functions_1.py
</code></pre>
<p>Regardless of whether I use "import package_x" or "from package_x import *" the problem remains. </p>
<p>If I take the route of getting rid of the globals, then most of the functions will have 50 parameters they will be passing around which then also need to be returned</p>
<p>What is the right way to clean this up?</p>
<p>(I have already read similar posts and the Python modules documentation)</p>
</div>
<div class="post-text" itemprop="text">
<p>One of the sources of your errors is likely the following:</p>
<pre><code>import group_of_functions_1.py
import group_of_functions_2.py
</code></pre>
<p>When importing, you don't add <code>.py</code> to the end of the module name. Do this instead:</p>
<pre><code>import group_of_functions_1
import group_of_functions_2
</code></pre>
</div>
<span class="comment-copy"><i>"If I take the route of getting rid of the globals"</i> - yes, do. <i>"most of the functions will have 50 parameters they will be passing around which then also need to be returned"</i> - then encapsulate related parameters in an object of some kind, this is a pretty common refactoring pattern (see e.g. <a href="https://sourcemaking.com/refactoring/introduce-parameter-object" rel="nofollow noreferrer">sourcemaking.com/refactoring/introduce-parameter-object</a>)</span>
<span class="comment-copy">I suspect that you aren't using custom <a href="https://docs.python.org/3/tutorial/classes.html#a-first-look-at-classes" rel="nofollow noreferrer">classes</a> in your code. Hopefully, most of your dependency issues will evaporate once you move the bulk of those globals into classes, and turn your main functions into methods of those classes. It may require a bit of thought (and hard work) to rearrange your current design, but it will be worth it in the long run. Your code will become easier to read, understand, maintain and test.</span>
<span class="comment-copy">So taking jonrsharpe's suggestion, I just created a class, Parameters(), which only contains an __init__(self) method, which has all of the 50+ variables set in it. Then in the main_file.py, I first initialize params = Parameters(), and pass that params object all over the place.</span>
<span class="comment-copy">It seems like the right thing to do is further divide Parameter() up and create more classes. That also seems very bad though since it is just creating more fluff code that does nothing and only obfuscates the code. The most readable code IMO is when everything listed in execution order, and only code that is repeatedly used gets put into a method. Otherwise you have to jump all over the place just to follow what's going on. Even worse is when the code is in multiple files. Then, after you've finally figured out where it all starts from, you end up lost 10 mins later, 8 files deep into it.</span>
