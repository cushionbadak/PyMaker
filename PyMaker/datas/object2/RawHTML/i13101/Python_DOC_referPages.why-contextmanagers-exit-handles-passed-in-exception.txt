<div class="post-text" itemprop="text">
<p>When looking at what's new in python 3.5, I found <a href="https://www.python.org/dev/peps/pep-0479/" rel="nofollow">PEP 0479</a>. In its rationale, it presents an example using @contextlib.contextmanager. I looked at this decorator's source, and found that the exception passed in its <strong>exit</strong> method is thrown in it's generator: </p>
<pre><code>self.gen.throw(type, value, traceback)
</code></pre>
<p>I wonder why the exception raised in the with block should be passed in this internal generator. I think the proper way is to close the generator and let the exception propagate.</p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>@contextmanager</code> worked in the fashion you suggest, it would not be reasonably possible to (selectively) suppress exceptions using a context manager written with <code>@contextmanager</code>.  Since <code>@contextmanager</code> is a general-purpose tool, that kind of arbitrary limitation is less useful than allowing the client code to do what it likes.</p>
<p>Now, you may be of the opinion that context managers should not suppress exceptions in the first place, but this is explicitly allowed and <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress" rel="nofollow">even used by the standard library</a>, so it's too late to go around prohibiting it now.</p>
</div>
<span class="comment-copy">Well this is reasonable. But I still think PEP0479's way of changing StopIteration to RuntimeError inside a generator is a little weird. I think I'd better learn more about programming language design.</span>
