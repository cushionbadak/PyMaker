<div class="post-text" itemprop="text">
<p>I need help with the next situation. There is one project, that is requiring two versions of one library. Let this lib be <strong>lib</strong>, and its versions: <strong>libold</strong> and <strong>libnew</strong>. These libs are not accessible via pypi, i.e. they are each in their own folder. Let the paths of these folders be <strong>/path/to/libold</strong> and  <strong>/path/to/libnew</strong>.</p>
<p>In my project I need instances of classes from both these libs, but I can't import them both, but only either old or new lib.<br/>
I tried the next method:</p>
<pre><code>import sys
sys.path.insert(0,'path/to/libold')
import lib as libold
sys.path.pop(0)
sys.path.insert(0,'path/to/libnew')
import lib as libnew
</code></pre>
<p>After performing this commands, libold and libnew represents the same library, libold.</p>
<p>I also tried importlib and imp and got same result.</p>
<p>How can I perform importing 2 versions of a lib?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python adds imported modules to <code>sys.modules</code>. When you write <code>import lib as libnew</code>, <code>sys.modules['lib']</code> already exists, and therefore the new lib is not imported.</p>
<p>To import the new lib, you should delete the old one from <code>sys.modules</code>, like this:</p>
<pre><code>import sys
sys.path.insert(0, 'path/to/libold')
import lib as libold
sys.path.pop(0)
del sys.modules['lib']
sys.path.insert(0, 'path/to/libnew')
import lib as libnew
</code></pre>
<p>However, you may encounter serious problems by doing so. In particular, if the old lib tries to import a submodule (say, e.g. <code>lib.submodule</code>), it will get the new one instead. For this reason, you'd better import all submodules of the old lib before deleting <code>sys.modules['lib']</code> and before importing the new one.</p>
<p>However, that's a dirty hack, not a real solution. In Python, modules and packages are identified by name, not by path. This is how it works and has always worked, and there's nothing you can do about it.</p>
<p>Consider using <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow"><code>multiprocessing</code></a> instead to overcome these "limitations". With <code>multiprocessing</code> you can run two processes: one that uses the old lib and the other that uses the new one. <code>multiprocessing</code> gives you many tools to make interprocess communication easy.</p>
</div>
<span class="comment-copy">why dont you import only the classes that you need?</span>
<span class="comment-copy">By "lib" do you mean a python module or a C extension? Is it a package with many .py files?</span>
<span class="comment-copy">Have you tested that <code>sys.path.insert(0,'path/to/libnew');import lib as libnew</code> actually imports the new version?  No offense intended.  It looks to me like your code should work, so I just want to be sure.</span>
<span class="comment-copy">@RNar classes, that i need have same names in both libs</span>
<span class="comment-copy">This sounds like an xy problem....  Why do you need 2 versions of the same library in the first place? What is the <i>exact</i> problem are you trying to solve by doing so?</span>
