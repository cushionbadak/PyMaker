<div class="post-text" itemprop="text">
<p>I am having a problem understanding why the deamon process never produces the "Starting/Exiting" output. It seems the process is killed the moment I am calling n.start()</p>
<pre><code>import multiprocessing
import time
import sys

def daemon():
    p = multiprocessing.current_process()
    print 'Starting:', p.name, p.pid
    sys.stdout.flush()
    print 'Exiting :', p.name, p.pid
    sys.stdout.flush()

def non_daemon():
    p = multiprocessing.current_process()
    print 'Starting:', p.name, p.pid
    sys.stdout.flush()
    time.sleep(3)
    print 'Exiting :', p.name, p.pid
    sys.stdout.flush()

if __name__ == '__main__':
    d = multiprocessing.Process(name='daemon', target=daemon)
    d.daemon = True

    n = multiprocessing.Process(name='non-daemon', target=non_daemon)
    n.daemon = False

    d.start()
    n.start()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Daemon processes usually disconnected from stdin/stdout/stderr descriptors, because they don't need any interaction with the user. So, I think you need to assign some custom stream (maybe some logger which writes to file) to sys.stdout if you want to log something</p>
<p>UPD:
You can test your code using a <a href="https://docs.python.org/2/library/multiprocessing.html#exchanging-objects-between-processes" rel="nofollow">pipe</a> connected to the parent process. Using this pipe, you can transfer your messages to the parent process, instead of STDOUT.</p>
</div>
<span class="comment-copy">UPDATE: If I add time.sleep(1) between d.start() and n.start() code seems to work just fine.</span>
<span class="comment-copy">Not relevant here. It's using <code>daemon</code> in the thread context (meaning the whole process can exit, terminating the daemons when all non-daemons exit), not the UNIX daemon meaning (independent process that survives the end of the process that spawned it). Yes, it's a stupidly overloaded term.</span>
<span class="comment-copy">But, multiprocessing.Process is about creating a new process, not a thread, isn't it?</span>
<span class="comment-copy">It is, but it's using thread semantics; <code>multiprocessing</code> is more about working around the GIL by simulating threads with processes. Per the <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.daemon" rel="nofollow noreferrer">docs on the <code>daemon</code> flag</a>: "these are not Unix daemons or services, they are normal processes that will be terminated (and not joined) if non-daemonic processes have exited."</span>
<span class="comment-copy">Ok, but it tells nothing about standard descriptors. Do you claim that they are connected to the same terminal, to which parent process connected?</span>
<span class="comment-copy">Remember, it's basically emulating threads with processes. The descriptors are inherited as normal across the <code>fork</code> (though you lose the semi-synchronized behavior of normal standard handles within a single process). The buffers might not be flushed if the <code>daemon</code> is terminated, but the explicit <code>flush</code> calls address that if the <code>flush</code> occurs before termination.</span>
