<div class="post-text" itemprop="text">
<p>To reach a specific node in python I would do something like this <code>nodeZ = xmlDoc.find("X/Y/Z")</code> This works pretty good with me.</p>
<p>However, when I have the <strong>following two lines</strong> at the <em>beginning</em> of the XML file, I'm unable to select or reach nodes anymore. <strong><em>What should I do?</em></strong> </p>
<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE raml SYSTEM 'raml20.dtd'&gt;
</code></pre>
<p>BTW, I'm loading the lxml package</p>
<p><strong>Update: A real exmaple</strong></p>
<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE raml SYSTEM 'raml20.dtd'&gt;
&lt;raml version="2.0" xmlns="raml20.xsd"&gt;
  &lt;cmData type="actual"&gt;
    &lt;header&gt;
      &lt;log dateTime="2015-10-13T15:57:06" action="created" appInfo="ActualExporter"&gt;InternalValues are used&lt;/log&gt;
    &lt;/header&gt;
    &lt;managedObject class="MRBTS" version="XXX" distName="PLMN-PLMN/MRBTS-XXX" id="111"&gt;
    &lt;/managedObject&gt;
  &lt;/cmData&gt;
&lt;/raml&gt;
</code></pre>
<p>And I try to reach the managedObject node by doing:</p>
<pre><code>from lxml import etree
xmlDoc = etree.parse("D:/File.xml")
moNode = xmlDoc.find("cmData/managedObject")
</code></pre>
<p>And as I mentioned above, it only works well if I delete the first two lines.</p>
</div>
<div class="post-text" itemprop="text">
<p>I cannot reproduce the problem. The presence or absence of the first two lines (the XML declaration and the document type declaration) does not matter. The element is simply not found.</p>
<p>What matters is that the XML document is in a namespace. The namespace name (<code>raml20.xsd</code>) is a little unusual, but it is OK. The following prints the wanted element:</p>
<pre><code>from lxml import etree

xmlDoc = etree.parse("File.xml")
moNode = xmlDoc.find("r:cmData/r:managedObject", namespaces={"r": "raml20.xsd"})
print moNode
</code></pre>
<p>In the above code, a prefix (<code>r</code>) is used. An alternative is to use the namespace name (enclosed in curly braces) directly:</p>
<pre><code>moNode = xmlDoc.find("{raml20.xsd}cmData/{raml20.xsd}managedObject")
</code></pre>
<p>A wildcard also works:</p>
<pre><code>moNode = xmlDoc.find("{*}cmData/{*}managedObject")
</code></pre>
<p>In all three cases, the output is this:</p>
<pre><code>&lt;Element {raml20.xsd}managedObject at 0x2787c60&gt;
</code></pre>
<p>More information: <a href="http://lxml.de/tutorial.html#namespaces" rel="nofollow">http://lxml.de/tutorial.html#namespaces</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Try:</strong></p>
<pre><code>from lxml import etree, html

text = """&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE raml SYSTEM 'raml20.dtd'&gt;
&lt;raml version="2.0" xmlns="raml20.xsd"&gt;
  &lt;cmData type="actual"&gt;
    &lt;header&gt;
      &lt;log dateTime="2015-10-13T15:57:06" action="created" appInfo="ActualExporter"&gt;InternalValues are used&lt;/log&gt;
    &lt;/header&gt;
    &lt;managedObject class="MRBTS" version="XXX" distName="PLMN-PLMN/MRBTS-XXX" id="111"&gt;
    &lt;/managedObject&gt;
  &lt;/cmData&gt;
&lt;/raml&gt;"""

html_code = etree.HTML(text)
result = etree.tostring(html_code, pretty_print=True, method="html")
tree = html.fromstring(result)

data = tree.xpath('//raml/cmdata/managedobject')[0]

managed_object_class = data.xpath('@class')[0]
managed_object_version = data.xpath('@version')[0]
managed_object_distname = data.xpath('@distname')[0]
managed_object_id = data.xpath('@id')[0]

print "Id: {}".format(managed_object_id)
print "Class: {}".format(managed_object_class)
print "Version: {}".format(managed_object_version)
print "DistName: {}".format(managed_object_distname)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Id: 111
Class: MRBTS
Version: XXX
DistName: PLMN-PLMN/MRBTS-XXX
</code></pre>
</div>
<span class="comment-copy">Could you paste a real sample of your XML?</span>
<span class="comment-copy">@AndrésPérez-AlbelaH. Please check the update</span>
<span class="comment-copy">You should use an <a href="https://docs.python.org/3/library/xml.etree.elementtree.html" rel="nofollow noreferrer">appropriate library</a> to parse XML,</span>
<span class="comment-copy">@Pynchia, but how do you explain this two lines existence effect? I parse <code>etree.parse("D:/File.xml")</code></span>
<span class="comment-copy">I am sorry. I thought you were using string find...</span>
<span class="comment-copy">Thanks much, buddy. This namespace thing was an enlightenment for me. Danke :)</span>
<span class="comment-copy">You are welcome!</span>
<span class="comment-copy">Thanks for the reply. But could you please clarify why my way works only if remove the two lines.   Also, why did you parse xml data as a text and not as a file?</span>
<span class="comment-copy">Do you want me to create a file and store that XML data inside and read it from my code? That's irrelevant. Regarding why your code works only by removing those two lines, I don't know, maybe it is because you need to use: <b><code>xmlDoc.tostring(etree.parse("D:/File.xml"))</code></b> instead of <b><code>xmlDoc = etree.parse("D:/File.xml")</code></b></span>
