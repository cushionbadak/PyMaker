<div class="post-text" itemprop="text">
<p>First of all, I read as many related questions to subprocess.check_output() as I could find, but still struggle to identify the problem.</p>
<p>If I execute <code>kill -l 1</code> in the shell, I get the corresponding signal name for 1, which is <code>HUP</code>. I need the same behaviour in my python script, so I use:</p>
<pre><code>&gt;&gt;&gt; subprocess.check_output(['kill', '-l', '1'])
b'HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT\nCHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS\n'
</code></pre>
<p>The subprocess seems to ignore the '1' in the argument list and instead executes <code>kill -l</code>.</p>
<p>I tried different versions, the argument as a list or string, with shell optione True and False, but none seem to work.</p>
<p>Any ideas what could be the reason? Using python3.4 on a Ubuntu14.04.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Possible cause: The <code>kill</code> command in your shell is executing a shell built-in (most shells have one, because you need to be able to kill without a process launch when you have runaway fork bombs and the like), whereas <code>check_output</code> (not executing within a shell by default) is running the <code>kill</code> executable found in your <code>PATH</code> (often <code>/bin/kill</code>, but not always, running <code>type -P kill</code> in <code>bash</code> will tell you where that executable is).</p>
<p>Odds are, the built-in supports the switches you're looking for, the executable does not. In <code>bash</code>, try running <code>type -P kill</code>, then explicitly running the <code>/full/path/to/kill -l 1</code> to see if the <code>kill</code> <code>check_output</code> is finding actually supports that invocation. Often there are subtle differences between different implementations of <code>kill</code>.</p>
<p>The best solution to this is probably to avoid expensive and pointless <code>subprocess</code> launches and check the Python definitions for the signals. For example, in Python 3.5, it's trivial to construct a mapping from the signals known by Python to their Python names:</p>
<pre><code>import signal

sigdict = {sig.value: sig.name for sig in signal.Signals}

print(sigdict[1])
CTRL_BREAK_EVENT  # &lt;-- The output on my Windows box. On your machine, it would probably be SIGHUP
</code></pre>
<p>In older Python where the names aren't <code>enum</code>s, you can use similar code using <code>dir</code> of the module, filtering for names whose <code>__module__</code> is <code>signal</code> and whose values are integers to construct the mapping.</p>
</div>
<span class="comment-copy"><code>subprocess.check_output(['kill', '-l', '1'])</code> worked as you expected here on my console .-.</span>
<span class="comment-copy">Just to reinforce, on my linux mint, this is exactly what happens. <code>/bin/kill -l 1</code> gives <code>HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS</code></span>
<span class="comment-copy">@tdelaney: Thanks for the confirmation. My old laptop just died, and I'm on a new one without my normal Linux VMs for testing, so I couldn't confirm, but it seemed likely. <code>kill</code> has some of the largest discrepancies between the shell built-ins and the executable (I'm always tripped up by the executable supporting process group kills by passing <code>-pid</code> where the built-in doesn't support that at all, which is why I suspected this would be the cause).</span>
<span class="comment-copy">Thx, this seems to be the problem. <code>/bin/kill -l 1</code> ignores the 1 flag, while the "built-in" kill gives the desired output. Any suggestions how I can solve the python problem then? <code>type -P kill</code> points to <code>/bin/kill</code>, is the built-in kill a regular program I cand find somewhere?</span>
<span class="comment-copy">@balint: I added an alternative that avoids launching expensive and pointless subprocesses. If you really want to use the built-in, you could do <code>subprocess.check_output('kill -l 1', shell=True)</code> or <code>subprocess.check_output(['bash', '-c', 'kill -l 1'])</code> to explicitly invoke a shell which would then run <code>kill</code> for you. It's not a good idea if the arguments to pass come from the user (source of exploits), though this can be mitigated on Python 3.3+ by using <a href="https://docs.python.org/3/library/shlex.html#shlex.quote" rel="nofollow noreferrer"><code>shlex.quote</code></a> on the user provided values.</span>
<span class="comment-copy">Thank you dear sir, this solved it.</span>
