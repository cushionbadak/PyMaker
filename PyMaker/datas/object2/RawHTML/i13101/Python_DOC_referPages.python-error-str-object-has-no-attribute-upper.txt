<div class="post-text" itemprop="text">
<p>I'm discovering possibilities of string formatting with .format( ) method in Python 3 but i raised an error that i do not understand.</p>
<p>So, why the following line is ok [wich let me think that "0" can be used exactly like the argument passed to format()]:</p>
<pre><code>s = 'First letter of {0} is {0[0]}'.format("hello")  
#gives as expected: 'First letter of hello is h'
</code></pre>
<p>but not this one [applying a method or a function to 0 in {0} doesn't work?]:</p>
<pre><code>s = '{0} becomes {0.upper()} with .upper() method'.format("hello")
</code></pre>
<p>raising the following error:</p>
<pre><code>AttributeError: 'str' object has no attribute 'upper()'
</code></pre>
<p>Why the raised error says i've used upper as an attribute and not as a method?
And is there another way to do it than:</p>
<pre><code>s = '{} becomes {} with .upper() method'.format("hello","hello".upper())
#gives as expected: 'hello becomes HELLO with .upper() method'
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>String formatting uses a <em>limited Python-like syntax</em>. It is using actual Python expressions. Calls are not supported in this syntax, only subscription (indexing by number or by unquoted (!) name), and attribute access is supported.</p>
<p>See the <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow"><em>Format String Syntax</em></a> documentation, which limits the field naming part to:</p>
<pre><code>field_name        ::=  arg_name ("." attribute_name | "[" element_index "]")*
</code></pre>
<p>Python 3.6 will add a new <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow">literal string format</a> that will support full expressions, because those are parsed directly by the interpreter when compiling the Python code. Using such literals you can do:</p>
<pre><code>value = 'hello'
s = f'{value} becomes {value.upper()} with .upper() method'
</code></pre>
</div>
<span class="comment-copy">Because formatting syntax does <i>not</i> use Python expressions. You can do indexes, you can do attributes, you cannot <i>call</i>.</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">documentation</a>.</span>
