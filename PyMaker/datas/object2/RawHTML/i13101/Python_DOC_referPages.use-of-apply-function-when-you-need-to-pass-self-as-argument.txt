<div class="post-text" itemprop="text">
<p>I have a pandas dataframe df where one column is 'keywords' and another column is 'possible keywords', so that the first two rows look as follows:</p>
<pre><code>df['keywords'][0] = 'traveling'
df['possible keywords'][0] = ['traveling', 'fishing','cooking']

df['keywords'][1] = 'fishing'
df['possible keywords'][0] = ['traveling', 'fishing','cooking']
</code></pre>
<p>Let's assume that every element in the df['possible keywords'] series contains the same list, with the same elements(['traveling', 'fishing','cooking']).</p>
<p>I want is to generate a third column where I include the 'possible keywords' that are not in the 'keyword' column, so that the corresponding rows look like this:</p>
<pre><code>df['non keywords'][0] = ['fishing','cooking']
df['non keywords'][1] = ['traveling','cooking']
</code></pre>
<p>I was able to do so with the following piece of code:</p>
<pre><code>def establish(X):
    my_list = ['traveling', 'fishing','cooking']
    for element in my_list:
        if element in X:
            my_list.remove(element)
            return my_list

data['non keywords'] = data['keywords'].apply(establish)
</code></pre>
<p>However, I had to include the value in column 'possible keywords' as 'my_list' in the establish function.</p>
<p>How can I do the same passing the value in 'possible keywords' as an argument to the establish function?</p>
<p>Here is the problem with what I have tried so far:</p>
<p>New version of establish function:</p>
<pre><code>def establish(my_list,X):
    for element in my_list:
        if element in X:
            my_list.remove(element)
            return my_list

my_list = ['traveling', 'fishing','cooking']
data['non keywords'] = data['keywords'].apply(establish(my_list))

Traceback (most recent call last):
  File "C:\Users\xxx\Anaconda3\lib\site-    packages\IPython\core\interactiveshell.py", line 3035, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "&lt;ipython-input-21-859ebaa71600&gt;", line 1, in &lt;module&gt;
    data['non keywords'] = data['keywords'].apply(establish(my_list))
TypeError: establish() missing 1 required positional argument: 'X'
</code></pre>
<p>If I instead try:</p>
<pre><code>data['non keywords'] = data['keywords'].apply(establish(my_list,data['keywords']))
</code></pre>
<p>Here is the problem:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Users\xxx\Anaconda3\lib\site-    packages\IPython\core\interactiveshell.py", line 3035, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "&lt;ipython-input-22-ee891e061f5a&gt;", line 1, in &lt;module&gt;
    data['non keywords'] =     data['original_keyword'].apply(establish(my_list,data['keywords']))
  File "C:\Users\xxxx\Anaconda3\lib\site-packages\pandas\core\series.py", line 2058, in apply
    mapped = lib.map_infer(values, f, convert=convert_dtype)
  File "pandas\src\inference.pyx", line 1046, in pandas.lib.map_infer    (pandas\lib.c:56983)
TypeError: 'NoneType' object is not callable
</code></pre>
<p>Help is much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.apply.html#pandas-dataframe-apply" rel="nofollow"><code>apply()</code></a> method expects as argument a function or other callable, which is exactly what you are passing in your first example when you pass <code>establish</code>. Internally, pandas calls the function you pass with each entry of your specified column in turn as argument.  </p>
<p>Calling <code>establish(my_list)</code> will straight up not work because your function now takes 2 arguments.</p>
<p>Calling <code>establish(my_list,data['keywords'])</code> is a "valid" function call, but will return <code>None</code> and takes the wrong type of argument for its second parameter besides, because <code>establish</code> expects a single entry and not a column.  Once it returns <code>None</code>, that is what is actually passed to the <code>apply()</code> function, which is obviously not callable, and so pandas throws up.</p>
<p>One solution is to create a helper function that "pre-bakes" your first argument and takes the second argument as its only argument and then calls the <code>establish()</code> function with it, and that way you can pass that second function to the <code>apply()</code> method.  One handy way to do this is using <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial</code></a>:</p>
<pre><code>import functools
my_list = ['traveling', 'fishing','cooking']
helper_func = functools.partial(establish, my_list) # note that helper_func is an actual function that you can call
data['non keywords'] = data['keywords'].apply(helper_func)
</code></pre>
</div>
<span class="comment-copy">hi there, thanks a lot for the reply. I tried your approach but the result is that 'None' goes into every entry of data['non keywods']</span>
<span class="comment-copy">hmm.. I just tried it with your example and got ['cooking'] for both rows of 'non keywords'.   The problem there is that your <code>establish()</code> method keeps modifying the same list in place (in your case, that would happen if the establish function is returning <code>None</code> regardless of the input).  Try changing the <code>establish()</code> method to do something like <code>return [elem for elem in my_list if elem != X]</code> or at least make sure to copy <code>my_list</code> instead of editing in-place.  Hope that helps</span>
<span class="comment-copy">hi there, thanks a lot lemonhead, the syntax you suggested worked beautifully:                        def establish(x,my_list):     return [elem for elem in my_list if elem not in x]. Also a note, I could use data['keywords'].apply(establish,args=(my_list,)) - I believe it works in the new pandas version - as an alternative to using functools</span>
