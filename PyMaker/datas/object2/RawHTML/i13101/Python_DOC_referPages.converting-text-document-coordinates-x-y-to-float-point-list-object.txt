<div class="post-text" itemprop="text">
<p>I have a text file containing coordinates I want to put into a python-based graph (graph is from kivy.garden.graph module, which I have working).</p>
<p>The text file, when I use open().read(), looks like this:</p>
<pre><code>(0, 1.836957)
(1, 1.836995)
(2, 1.837073)
(3, 1.837111)
(4, 1.837111)
</code></pre>
<p>And is string type. And I need it to go into the graph module as:</p>
<pre><code>[(0, 1.836957), (1, 1.836995), (2, 1.837073), (3, 1.837111), (4, 1.837111)]
</code></pre>
<p>Note, the text file will be updated in real-time, which the graph module can handle. Or at best, pick the last 10 x,y points created. Also, I can manipulate the text file as I have output it myself from another function outside.</p>
<p>Apologies for the simplicity of this, but I have been scratching my head over converting this now for the last 24 hours. I have only managed to get this:</p>
<p><strong>(space after the comma at the end)</strong></p>
<pre><code>[(0, 1.836957), (1, 1.836995), (2, 1.837073), (3, 1.837111), (4, 1.837111), ]
</code></pre>
<p>Note the extra comma and space, and it's only through string manipulation using replace(), rather than what I need is float type.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>strip</code> and <code>split</code> methods to break each line into the appropriate coordinates.</p>
<pre><code>with open("myfile.txt") as fh:
    coords = []
    for line in fh:
        line = line.strip('()\n')  # Get rid of the newline and  parentheses
        line = line.split(', ')  # Split into two parts
        c = tuple(float(x) for x in line)  # Make the tuple
        coords.append(c)
</code></pre>
<p>The whole thing can be done more efficiently with a list comprehension; the above is more readable.</p>
<pre><code>with open("myfile.txt") as fh:
    coords = [tuple(float(x) for x in line.strip('()\n').split(', ')) for line in fh]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on the input provided and the output you are trying to achieve, you can make use of <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow">literal_eval</a> from <a href="https://docs.python.org/3/library/ast.html#module-ast" rel="nofollow">ast</a>. </p>
<p>Furthermore, for this particular case, it might make it easier to manage the data if you use <a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow">readlines()</a> instead of <code>read()</code>. <code>readlines</code> will give you a list. </p>
<p>Take a look at this: </p>
<pre><code>import ast
x = list(ast.literal_eval(','.join(i.strip() for i in open('some_file').readlines())))
</code></pre>
<p>Input:</p>
<pre><code>(0, 1.836957)
(1, 1.836995)
(2, 1.837073)
(3, 1.837111)
(4, 1.837111)
</code></pre>
<p>Output: (type will be a list)</p>
<pre><code>[(0, 1.836957), (1, 1.836995), (2, 1.837073), (3, 1.837111), (4, 1.837111)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In my experience it will be easier if the data were saved just as:
number1 \t number2 \n
Anyway, one option to do what you want will be:</p>
<pre><code>import json # This library has lost os ways to load and save data
f=open('file.txt','r')
# Remove the \n at the end of each line and replace () for []
# Create the data with all the tuples.
# json only reads list, thats why we have to transforn it into a tuple at the end
data=[tuple(json.loads(l[:-1].replace('(','[').replace(')',']'))) for l in f]
f.close()
</code></pre>
<p>This should work. If the file if updated i think you should open it again at it will work</p>
</div>
<span class="comment-copy">The first solution worked a treat, the second however had apostrophes around each coordinate. I'm very, VERY happy though, thank you so much chepner!</span>
<span class="comment-copy">Oh, I forgot to map <code>float</code> to each of the values.</span>
