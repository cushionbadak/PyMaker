<div class="post-text" itemprop="text">
<p>I am using "import re and sys"</p>
<p>On the terminal, when I type "1.py a.txt"
I want it to read "a.txt", which has these content:</p>
<pre><code>17:18:42.525964 IP 66.185.85.146.80 &gt; 192.168.0.15.34436: Flags [.], seq 1:1449, ack 2555, win 1320, options [nop,nop,TS val 3551057710 ecr 43002332], length 1448
17:18:42.526623 IP 66.185.85.146.80 &gt; 192.168.0.15.34436: Flags [.], seq 1449:2897, ack 2555, win 1320, options [nop,nop,TS val 3551057710 ecr 43002332], length 1448
17:18:42.526900 IP 192.168.0.15.34436 &gt; 66.185.85.146.80: Flags [.], ack 2897, win 1444, options [nop,nop,TS val 43002448 ecr 3551057710], length 0
17:18:42.527694 IP 66.185.85.146.80 &gt; 192.168.0.15.34436: Flags [.], seq 2897:14481, ack 2555, win 1320, options [nop,nop,TS val 3551057710 ecr 43002332], length 11584
17:18:42.527716 IP 192.168.0.15.34436 &gt; 66.185.85.146.80: Flags [.], ack 14481, win 1444, options [nop,nop,TS val 43002448 ecr 3551057710], length 0
17:18:42.528794 IP 66.185.85.146.80 &gt; 192.168.0.15.34436: Flags [.], seq 14481:23169, ack 2555, win 1320, options [nop,nop,TS val 3551057710 ecr 43002332], length 8688
17:18:42.528813 IP 192.168.0.15.34436 &gt; 66.185.85.146.80: Flags [.], ack 23169, win 1444, options [nop,nop,TS val 43002448 ecr 3551057710], length 0
17:18:42.545191 IP 192.168.0.15.60030 &gt; 52.2.63.29.80: Flags [.], seq 4113773418:4113774866, ack 850072640, win 270, options [nop,nop,TS val 43002452 ecr 9849626], length 1448
</code></pre>
<p>then use regex, to remove everything but the ip addresses and the length(total), and print it out as:</p>
<pre><code>source: 66.185.85.146 dest: 192.168.0.15 total:1448
source: 66.185.85.146 dest: 192.168.0.15 total:1448
source: 192.168.0.15 dest: 66.185.85.146 total:0
</code></pre>
<p>but if there are duplicates, then it will read as follows, where it will add the total amounts of the duplicates:</p>
<pre><code>source: 66.185.85.146 dest: 192.168.0.15 total:2896
source: 192.168.0.15 dest: 66.185.85.146 total:0
</code></pre>
<p>Furthermore, if i type "-s" in the terminal like so:</p>
<pre><code>"1.py -s a.txt"
</code></pre>
<p>or</p>
<pre><code>"1.py a.txt -s 192.168.0.15"
</code></pre>
<p>it should sort, for the first -s, it will sort and print the content, and if -s ip, then sort the ips.</p>
<p>currently this is what I have for each item, I want to know how to use them all together.</p>
<pre><code>#!/usr/bin/python3
import re
import sys

file = sys.argv[1]
a = open(file, "r")

for line in a:
   line = line.rstrip()
   c = re.findall(r'^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$',line) #Yes I know its not the best regex for this, but I am testing it out for now
   d = re.findall(r'\b(\d+)$\b',line)

   if len(c) &gt; 0 and len(d) &gt; 0:
      print("source:", c[0],"\t","dest:",c[1],"\t", "total:",d[0])
</code></pre>
<p>That is what I have so far, I do not know how to use the "-s" or how to sort, as well as how to remove the duplicates, and add the totals when duplicates are removed.</p>
</div>
<div class="post-text" itemprop="text">
<p>what you need is <code>ArgumentParser</code> for your <code>-s</code> parameter, so something like:</p>
<pre><code>import argparse
...
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--sort', action='append',
                    help='sort specific IP')
    parser.add_argument('-s2', '--sortall', action='store_true',
                    help='sort all the IPs')

    args = parser.parse_args()
    if args.sortall:
        # store all Ips

    for ip in args.sort:
        # store by ip
if __name__ == '__main__':
    main()
</code></pre>
<p>now you can use the script like:</p>
<pre><code>1.py a.txt -s 192.168.0.15
</code></pre>
<p>or</p>
<pre><code>1.py a.txt -s2
</code></pre>
<p>apart from that, on how to put all together, looks like a homework, so you should read more about python to figure it out.</p>
</div>
<div class="post-text" itemprop="text">
<p>To read the <code>-s</code> you probably want a library to parse the arguments, like the standard <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow"><code>argparse</code></a>. It allows you to specify which arguments your script requires, and their descriptions, and it parses them and ensure their format.</p>
<p>To sort a list there's the <code>sorted(my_list)</code> function.</p>
<p>Finally, to ensure there are no duplicates you can use a <code>set</code>. This loses the list ordering, but since you are sorting it later it shouldn't be a problem.</p>
<p>Alternatively, there's the <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>Counter</code></a> collection made specifically to add grouped values and sort them.</p>
<pre><code>from collections import Counter

results = Counter()

for line in a:
    line = line.rstrip()
    c = re.findall(r'^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$',line) #Yes I know its not the best regex for this, but I am testing it out for now
    d = re.findall(r'\b(\d+)$\b',line)

    if len(c) &gt; 0 and len(d) &gt; 0:
        source, destination, length = c[0], c[1], d[0]
        results[(source, destination)] += int(length)

# Print the sorted items.
for (source, destination), length in results.most_common():
    print("source:", source, "\t", "dest:", destination, "\t", "total:", length)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>ArgumentParser</code> to be added- By the way below code works fine for input file path-</p>
<pre><code>import re
from  collections import defaultdict 

with open(r"C:\ips.txt",'rb') as ip_file:
    txt = ip_file.read()
    ip=re.findall(r'[0-9.]+[\s]+[&gt;][\s0-9.]+',txt)
    ip1 = ['&gt;'.join(re.findall(r'[0-9.]+(?=[.])',i)) for i in ip]
    packs = re.findall(r'(?&lt;=length )[0-9]+',txt)
    data = zip(ip1,packs)
    d = defaultdict(list)
    for k, v in data:
        d[k].append(v)
    for i,j in d.items():
        source,destination = i.split('&gt;')[0],i.split('&gt;')[1]
        print "source: {0} destination: {1} total: {2}".format(source,destination,sum(map(int,j)))
</code></pre>
<p>It prints-</p>
<pre><code>source: 192.168.0.15 destination: 66.185.85.146 total: 0
source: 66.185.85.146 destination: 192.168.0.15 total: 23168
source: 192.168.0.15 destination: 52.2.63.29 total: 1448
</code></pre>
</div>
<span class="comment-copy">please remember to accept an answer if it was helpful to you.</span>
<span class="comment-copy">I get indentation error at "for ip in args.sort:"  @eLRuLL</span>
<span class="comment-copy">Thanks, trying this out</span>
<span class="comment-copy">This won't add up all the lengths.  It will instead add multiple Source/Dest combos with different lengths, and will discard Source/Dest combos with lengths already seen.</span>
<span class="comment-copy">Good catch. Fixing it in a moment.</span>
<span class="comment-copy">I think using <code>Counter</code> is a better fit for the job then. I've updated my answer to reflect that.</span>
<span class="comment-copy">Your assignment line is assigning the wrong values to your variables (or you just like confusing variable names ^_-).  It should be <code>source, destination, length = c[0], c[1], d[0]</code></span>
<span class="comment-copy">I tried it with the no ports, as you have it but i get an error, "IndexError: list index out of range" @SIslam</span>
