<div class="post-text" itemprop="text">
<p>Is it possible to call a Python function from a C <code>dll</code> function?</p>
<p>We consider this C function:</p>
<pre><code> void foo( void (*functionPtr)(int,int) , int a, int b);
</code></pre>
<p>On Python, I would like to call <code>foo</code> and set the callback to a Python function: </p>
<pre><code>def callback(a, b):
    print("foo has finished its job (%d, %d)" % (a.value,b.value))

dll.foo( callback, c_int(a), c_int(b) )
</code></pre>
<p>Unfortunately, the <code>ctypes</code> documentation is pretty light on this topic and the above code does not work. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import ctypes as c

@c.CFUNCTYPE(None, c.c_int, c.c_int)
def callback(a, b):
    print("foo has finished its job (%d, %d)" % (a.value, b.value))

dll.foo(callback, a, b) # assuming a,b are ints
</code></pre>
<p>If you need <code>stdcall</code> calling conventions, <a href="https://docs.python.org/3/library/ctypes.html#ctypes.WINFUNCTYPE" rel="noreferrer">use <code>WINFUNCTYPE</code> instead</a>.</p>
<p>Note: if <code>foo</code> may store the callback to be called at a later time then make sure that Python callback is alive (it is enough if it is defined at the global level using the decorator as shown in the example -- modules are essentially immortal in Python unless you try to remove them explicitly).</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>CFUNCTYPE</code> to create a callback type:</p>
<pre><code>c_callback = CFUNCTYPE(None, c_int, c_int)(callback)
dll.foo(c_callback, a, b)
</code></pre>
</div>
<span class="comment-copy">Ctypes callback documentation: <a href="https://docs.python.org/3.3/library/ctypes.html?highlight=ctypes#callback-functions" rel="nofollow noreferrer">docs.python.org/3.3/library/â€¦</a></span>
<span class="comment-copy">The tutorial is often the de facto reference for ctypes, unfortunately. Mark gave you the tutorial link, but surely it's documented enough in the <a href="https://docs.python.org/3.3/library/ctypes.html?highlight=ctypes#function-prototypes" rel="nofollow noreferrer">reference section 2.4</a> to get beyond what you tried: "Function prototypes created by these factory functions can be instantiated in different ways, depending on the type and number of the parameters in the call ... prototype(callable), Create a C callable function (a callback function) from a Python callable".</span>
<span class="comment-copy">OP was being explicit, so I was too.</span>
