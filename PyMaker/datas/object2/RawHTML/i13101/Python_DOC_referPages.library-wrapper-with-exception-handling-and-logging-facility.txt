<div class="post-text" itemprop="text">
<p>I am writing a wrapper to a C DLL from Python that I wrote as a singleton. </p>
<p>Most of the functions in this library return a negative value in case of error. When an error occurs, I would like to get the error description though the <code>get_error_description</code> function.</p>
<p>This works well but I would like my wrapper to be a bit less boilerplate. For each function I have to rewrite the same thing:</p>
<ul>
<li>Log the debug message</li>
<li>Check the exit status</li>
</ul>
<p>Is there a way to make this implementation better without using <code>eval</code></p>
<pre><code>class Singleton(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]

class MyLibError(Exception):
    def __init__(self, errno):
        lib = MyLib()
        super(MyLibError, self).__init__(lib.get_error_description(errno)) 

class MyLib():
    """Python wrapper to `lib.dll`"""
    __metaclass__ = Singleton

    def __init__(self):
        self._lib = cdll.LoadLibrary('lib.dll')   

    def _configure_logger(self):
        self.logger = logging.getLogger("MyLib")
        self.logger.setLevel(logging.DEBUG)
        ch = logging.StreamHandler(sys.stdout)
        ch.setLevel(logging.DEBUG)
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        ch.setFormatter(formatter)
        self.logger.addHandler(ch)    

    def foo(self, a):
        return_code = self._lib.foo(a)
        self.logger.debug("foo(%d) returned %d" % (a, return_code))
        if return_code &lt; 0: raise MyLibError (return_code)
</code></pre>
<p>The final goal is to auto-generate this wrapper from the library codebase where I will be able to export the docstrings properly. </p>
</div>
<div class="post-text" itemprop="text">
<p>You may want to look at the <a href="https://docs.python.org/3/library/functools.html#module-functools" rel="nofollow"><code>functools</code></a> module for some built-in functions that can help.</p>
<p>In Python, functions are first-class objects and so can be passed around and acted on like other objects.  One step here would be to put the common code into a function.  Something like</p>
<pre><code>def _call_my_lib(self, f, args):
    return_code = f(*args)
    self.logger.debug("%s(%d) returned %d" % (f.__name__, args, return_code))
    if return_code &lt; 0: raise MyLibError (return_code)

def foo(self, *args):
    self._call_my_lib(self._lib.foo, args)
</code></pre>
<p>The <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial</code></a> function can take care of "partially" calling a function at one time, then finish the arguments at a later time.  It might be a little tricky to combine bound methods with functools, but it might be nice and compact.</p>
<pre><code>foo = functools.partial(self._call_my_lib, self._lib.foo)
</code></pre>
<p>A decorator may be useful here, especially if you need to to any other processing in Python before calling into your library.</p>
<pre><code>def mylib(f):
    def _call_my_lib(self, *args):
        return_code = f(*args)
        self.logger.debug("%s(%d) returned %d" % (f.__name__, args, return_code))
        if return_code &lt; 0: raise MyLibError (return_code)
    return _call_my_lib

class MyLib:
    @mylib
    def foo(self, a):
        return self._lib.foo(a)
</code></pre>
<p>Note that I haven't tested any of this code, so it may contain typos or some oversights but should provide some ideas for ways to implement cross-cutting concerns in Python.</p>
</div>
<span class="comment-copy">To autogenerate wrappers, take a look at <a href="http://www.swig.org/" rel="nofollow noreferrer">SWIG</a></span>
<span class="comment-copy">I've already looked at SWIG but it does not work in my case :(</span>
<span class="comment-copy">Okay. I haven't used it, but I know that many projects do.</span>
<span class="comment-copy">And they are right to use it. In my case I have to manually hold different configurations. For instance, some functions works with a handler. It is convenient to hold the handler in the wrapper instance. I am not sure whether SWIG can do this.</span>
