<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1207406/how-to-remove-items-from-a-list-while-iterating">How to remove items from a list while iterating?</a>
<span class="question-originals-answer-count">
                    23 answers
                </span>
</li>
</ul>
</div>
<p><code>isdigit()</code> doesn't work here:</p>
<pre><code>li=["word",'2.134123']
for i in li:
 if i.isdigit():
  li.remove(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>isdigit</code> does not pass the check for floats represented as a string.</p>
<p>The help of <code>isdigit</code> specifies: </p>
<pre><code>Return True if all characters in S are digits
    and there is at least one character in S, False otherwise.
</code></pre>
<p>So, with that, your work around will be to find some other way to determine whether something does in fact pass the "number" check. </p>
<p>What you can do is wrap an attempt to convert each item to a float in a try/except and then append to a new list for every item that falls in to the except:</p>
<pre><code>def remove_numbers(li):
    numberless = []
    for i in li:
        try:
            float(i)
        except:
            numberless.append(i)
    return numberless

res = remove_numbers(["word",'2.134123'])
print(res)
# outputs ['word']
</code></pre>
<p>an alternative can be to modify the function to simply return <code>True</code> or <code>False</code> based on the <code>float</code> test, and make use of <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow">filter</a> to "filter" the list based on the result of the <code>remove_numbers</code> method. (Thanks @Pynchia)</p>
<pre><code>def not_a_float(s):
    try:
        float(s)
        return False
    except:
        return True

res = filter(not_a_float, ["word", '2.134123'])
</code></pre>
<p>In terms of performance, there is no real advantage between the two, probably because the gain in the implementation of <code>filter</code> is spent by the extra frame setup in the call to <code>not_a_float</code></p>
<pre><code>python3 -mtimeit -s'from remove_floats import remove_numbers_loop; from random import randint' -s'l=[str(i) if randint(0,100)&lt; 20 else "abc"+str(i) for i in range(1000000)]' -s 'remove_numbers_loop(l)'
python3 -mtimeit -s'from remove_floats import remove_numbers_filter; from random import randint' -s'l=[str(i) if randint(0,100)&lt; 20 else "abc"+str(i) for i in range(1000000)]' -s 'remove_numbers_filter(l)'

100000000 loops, best of 3: 0.00929 usec per loop
100000000 loops, best of 3: 0.0107 usec per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Isdigit doesnt work if the number have decimals. Return False in this case.</p>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="https://docs.python.org/2/library/stdtypes.html" rel="nofollow">https://docs.python.org/2/library/stdtypes.html</a></p>
<blockquote>
<p><code>str.isdigit()</code></p>
<p>Return <code>True</code> if all characters in the string are digits and
  there is at least one character, <code>False</code> otherwise.</p>
</blockquote>
<p>Your string contains also the decimal dot and that's why the function returns <code>False</code>.</p>
</div>
<span class="comment-copy">You are modifying a list while iterating it, which will cause problems. Also, '.' is not a digit character.</span>
<span class="comment-copy"><code>.isdigit()</code> is intended to be used for <code>int</code>, not <code>float</code>. Look at <a href="http://stackoverflow.com/questions/4138202/python-using-isdigit-for-floats">this question</a> for a workaround. Moreover, you should not modify a mutable object like a list while iterating through it or wou will get unexpected results.</span>
<span class="comment-copy">isdigits does not work with float. See here <a href="http://stackoverflow.com/questions/4138202/python-using-isdigit-for-floats" title="python using isdigit for floats">stackoverflow.com/questions/4138202/â€¦</a></span>
<span class="comment-copy">upvoted. The code could go in a function, say <code>is_not_float</code>. It would return True/False only, no appending. Then simply use <code>filter(is_not_float, li)</code> (transformed to a list, if on py3)</span>
<span class="comment-copy">ahem... given you are creating a new list, my point being <code>filter</code> is faster than appending in a for loop, me thinks. Read my comment again, if you will. The function should only check a value isn't/is a float. Just my thoughts, no compelling reason for changing the code</span>
<span class="comment-copy">@Pynchia +1 you are fantastic. Cheers.</span>
<span class="comment-copy">I took the liberty to edit your code and remove an unnecessary <code>for</code> loop that was left behind</span>
<span class="comment-copy">That's interesting. Look at this too: <a href="http://stackoverflow.com/a/29508145/1832539">stackoverflow.com/a/29508145/1832539</a></span>
