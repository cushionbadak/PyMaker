<div class="post-text" itemprop="text">
<p>How do I obtain this into a sorted list without having count_list return into just 5 returns of nothing, a justified width of 25 to the left and symbols of numbered rank items to = "#"? </p>
<p>after I run the program, it keeps giving me just a list of none's. I'm trying to do a descended list of stars as well as justifying the pibs far from the hashtags at 25 at length.</p>
<p>This is the final output and the further I go into this the further it becomes complex. I also need help on how to attach or append stars to the descending numbers from 5 to 1, I tried doing reverse function but it is not compatible with merely adding the string 'Stars' to it. I believe I may have a solution to assign the stars to the number ranking stars, but I need a solution to check my progress.</p>
<p>Example of printed output:</p>
<pre><code>5 Stars:
|# # # # # # #               | #the vertical lines are pibs
4 Stars:
|# #                         |
3 Stars:
|# # # #                     |
2 Stars:
|# #                         |
1 Stars: 
|# # # #                     |
</code></pre>
<p>This is my own code after some help on it.</p>
<pre><code>def count_ratings(st, count_list):
 for i in st:
  if i == "*":
     count_list[0] = count_list[0] + 1
  elif i == "**":
     count_list[1] = count_list[1] + 1
  elif i == "***":
     count_list[2] = count_list[2] + 1
  elif i == "****":
     count_list[3] = count_list[3] + 1  
  else:
     if i == "*****":
        count_list[4] = count_list[4] + 1
 return count_list

def print_ratings():
 ratings = ["*****", "***", "**", "*****", "****", "**", "*", "***","**","*","**","*","*****","****","*****"]
 count_list = [0,0,0,0,0]
 count_list = count_ratings(ratings, count_list)
 for i in count_list:
   print(count_list.sort())


def main(): # defining the main
  print_ratings()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a> object, which automatically counts each element in your iterable and creates a dictionary. You can then loop over the keys and print an appropriate heading for that star rating, and then the <a href="https://docs.python.org/3/library/string.html#format-examples" rel="nofollow">formatted string</a> representing the number of items with that star rating. The <code>:&lt;23</code> means an aligned string, left-aligned, filled to a width of 23 characters, with the default fill character (space).</p>
<pre><code>from collections import Counter
ratings = ["*****", "***", "**", "*****", "****", "**", "*", "***","**","*","**","*","*****","****","*****"]
c = Counter(ratings)
for k in sorted(c, key=len, reverse=True):
    print(len(k), 'Stars:')
    print('|{:&lt;23}|'.format('# '*c[k]))
</code></pre>
<p>Result:</p>
<pre><code>5 Stars:
|# # # #                |
4 Stars:
|# #                    |
3 Stars:
|# #                    |
2 Stars:
|# # # #                |
1 Stars:
|# # #                  |
</code></pre>
</div>
<span class="comment-copy">Notice how you have an <code>if..elif..else</code> structure where the first branch checks for 1 star and then uses an index of 0, the next branch checks for 2 stars and uses an index of 1, and so on? That's a good indicator that you're violating DRY (Don't Repeat Yourself).</span>
<span class="comment-copy">I don't understand how your example of the output matches the code. In <code>ratings</code>, I see 3 1-star, 4 2-star, 2 3-star, 2 4-star, and 4 5-star, but the output says 4-2-4-2-6.</span>
<span class="comment-copy">that is a different output than before, it is with a different input, but never the less seems correct</span>
