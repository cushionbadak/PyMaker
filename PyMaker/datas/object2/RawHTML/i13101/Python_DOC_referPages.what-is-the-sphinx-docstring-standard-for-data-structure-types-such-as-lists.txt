<div class="post-text" itemprop="text">
<p>Does Sphinx have a supported standard for documenting the arguments or return value types that are not a simple, single object?</p>
<p>For instance, in the following, arg1 is a str, arg2 is a list of str, and arg3 is either a str or int. How can you specify collection or composite types in Sphinx? Or is there no common standard for this?</p>
<pre><code>def function(arg1, arg2, arg3):
    """
    :param arg1: Argument 1
    :type arg1: str
    :param arg2: Argument 2
    :type arg2: list[str]
    :param arg3: Argument 3
    :type arg3: str or int
    """
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Python 3.5 type hints</strong></p>
<p>While not yet supported by Sphinx, will likely make Sphinx type annotations obsolete one day. <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">https://docs.python.org/3/library/typing.html</a></p>
<p>For now, I recommend using the exact same syntax as that module, which will:</p>
<ul>
<li>make porting easier, and possibly automatable, later on</li>
<li>specifies a unique well defined way to do things</li>
</ul>
<p>Example:</p>
<pre><code>def f(list_of_int):
    """
    :type list_of_int: List[int]
    :rtype: int
    """
    return list_of_int[0] + list_of_int[1]
</code></pre>
<p>Then when you have 3.5, you will write just:</p>
<pre><code>def f(list_of_int : List[int]) -&gt; int:
    return list_of_int[0] + list_of_int[1]
</code></pre>
<p>The <code>str or int</code> part can be expressed with <code>Union</code>: <a href="https://stackoverflow.com/questions/34647966/how-to-express-multiple-types-for-a-single-parameter-or-a-return-value-in-docstr/40801906#40801906">How to express multiple types for a single parameter or a return value in docstrings that are processed by Sphinx?</a></p>
</div>
<span class="comment-copy">There is no common standard - here is one suggestion <a href="https://www.jetbrains.com/pycharm/help/type-hinting-in-pycharm.html" rel="nofollow noreferrer">jetbrains.com/pycharm/help/type-hinting-in-pycharm.html</a>, also seemingly used in e.g. <a href="http://sphinxcontrib-napoleon.readthedocs.org/en/latest/example_google.html" rel="nofollow noreferrer">sphinxcontrib-napoleon.readthedocs.org/en/latest/â€¦</a></span>
<span class="comment-copy">It appears that at the very least, :type arg2: collections.Iterable[str] enables type hinting in Pycharm for Python 2.7. Is there a similar Union type in Python that could work for arg3?</span>
<span class="comment-copy">It seems odd to accept <code>str or int</code>, but if that's what it takes that's how I'd write it!</span>
