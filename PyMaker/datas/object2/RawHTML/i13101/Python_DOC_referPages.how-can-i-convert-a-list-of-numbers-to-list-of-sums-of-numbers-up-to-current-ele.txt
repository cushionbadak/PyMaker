<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15889131/how-to-find-the-cumulative-sum-of-numbers-in-a-list">How to find the cumulative sum of numbers in a list?</a>
<span class="question-originals-answer-count">
                    18 answers
                </span>
</li>
</ul>
</div>
<p>To clarify, my original list contains the difference between two consecutive values, starting from zero. I want to convert this list to a list of actual values using a functional style, without having to keep a global state during calculation, without for loops, using map, reduce, etc.</p>
<pre><code>my_list = [0, 1, 0, 3, 2, 0, 0, 2, 1]
result = my_function(my_list)

print(result)

[0, 1, 1, 4, 6, 6, 6, 8, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow"><code>itertools.accumulate</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def my_function(lst):
    return [sum(lst[:i]) for i in range(len(lst))]
</code></pre>
</div>
<span class="comment-copy">wow! this is awesome, thanks.</span>
<span class="comment-copy">is there an inverse of this function that will output my_list given the result list?</span>
<span class="comment-copy">@kureta <code>itertools.starmap(operator.sub, zip(a, [0] + a))</code>, but please, don't use this code anywhere. This is clearly not the pythonic way. Unclear, error-prone, dense.</span>
<span class="comment-copy">how about this?      <code>def differences(seq):</code> <code>iterable, copied = tee(seq)</code> <code>next(copied)</code> <code>for x, y in zip(iterable, copied):</code>         `yield y - x</span>
