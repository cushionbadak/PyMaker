<div class="post-text" itemprop="text">
<p>I'm developing a program for a stadium and <code>time.sleep()</code> pauses the program before the window opens instead of when I want it to. What is the explanation for this behavior?</p>
<pre><code>import Tkinter as tk
import time
import random
root = tk.Tk()

label = tk.Label(root, text="Navigating To Seat")
label.pack(pady=10, padx=10)

rand = random.randint(6, 16)

while rand != 0:
    label2 = tk.Label(root, text="Foward:  " + str(rand) + "m")
    label2.pack()
    rand = rand - 1
    time.sleep(1)
    label2.pack_forget()

root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What <a href="https://docs.python.org/3/library/time.html#time.sleep" rel="noreferrer"><code>time.sleep</code></a> does is suspend the execution of your program. If you do that 6-16 times, for 1 second each time, before ever calling <code>mainloop()</code>, you're asking it to wait for 6-16 seconds before starting up your GUI.</p>
<p>You probably don't understand how event loop programming works. Reading through some Tkinter tutorials should get the idea across nicely. If you want a less Tkinter-focused explanation and more information about the details of what's happening and the different ways to get around it, see <a href="http://stupidpythonideas.blogspot.com/2013/10/why-your-gui-app-freezes.html" rel="noreferrer">Why your GUI app freezes</a>.</p>
<p>At any rate, I think I can guess what you want to do, even though it isn't clear from your question: You want to start the GUI up, and then, every second, replace the <code>Label</code>. To do that, you have to wait <em>while the GUI is running</em>, not before it starts.</p>
<p>But you can't just call <code>sleep</code> while the GUI is running, either. The GUI can't run while your program is asleep (again, that's what <code>sleep</code> means).</p>
<p>The easiest way out of this is to turn your loop into a sequence of function calls, each of which schedules the next one to run a second later, using the <a href="http://effbot.org/tkinterbook/widget.htm#Tkinter.Widget.after-method" rel="noreferrer"><code>after</code></a> method. For example:</p>
<pre><code>import Tkinter as tk
import random
root = tk.Tk()

label = tk.Label(root, text="Navigating To Seat")
label.pack(pady=10, padx=10)

rand = random.randint(6, 16)
label2 = None

def add_label():
    global rand
    global label2
    if not rand:
        root.quit()
    if label2:
        label2.pack_forget()
    label2 = tk.Label(root, text="Foward:  " + str(rand) + "m")
    label2.pack()
    rand = rand - 1
    root.after(1000, add_label)

add_label()
root.mainloop()
</code></pre>
<p>When you first call <code>add_label()</code>, it creates the initial label, asks <code>Tkinter</code> to call <code>add_label()</code> again in 1000 milliseconds, and returns. So, a second after you start the loop, it gets called again, which creates the next label and asks <code>Tkinter</code> to call it again a second later. This keeps going until you decrement <code>rand</code> all the way to <code>0</code>, at which point you call <code>quit</code> instead of <code>after</code>, which ends the main loop, which ends the program.</p>
<p>There are other things you probably want to fix about this program. For example, instead of destroying and creating a new Widget label each time, you can just change its text—or, maybe even more simply, make <code>rand</code> an <a href="http://effbot.org/tkinterbook/variable.htm" rel="noreferrer"><code>IntVar</code></a> connected to the label, so just updating <code>rand</code> automatically changes the text. Also, for anything less trivial than this program, you'd probably want to replace the global variables with something cleaner—most Tkinter tutorials show you how to use a <code>Frame</code> subclass by about the second or third example, which gives you a convenient place to organize both widgets and member variables like <code>rand</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't underatand your question exactly:</p>
<p>1) You could update your wimdow in the loop to draw it to the screen... root.update() after or before time.sleep()</p>
<p>2) If you don't want to hide your window before the mainloop is executed, use root.attributes("-alpha",0.0) to hide and root.attributes("-alpha",1.0) to show the window.</p>
</div>
<span class="comment-copy">Did you try putting your question's title into a Google search?</span>
<span class="comment-copy">What <i>wouldn't</i> it pause the program? That's exactly what <code>sleep</code> is for. If you don't want it to do that, why are you calling it?</span>
<span class="comment-copy">This is a very nice explanation, but it would be also nice if you mention the method <code>after_cancel</code>...</span>
<span class="comment-copy">@Xenomorph: Where would you use <code>after_cancel</code> for this design? The <code>after</code> method doesn't trigger repeatedly, just once, so there's nothing to cancel here.</span>
<span class="comment-copy">Just to mention it in contrast to the <code>after</code> method, I did not say it was needed for the solution.. maybe I am just mad.</span>
<span class="comment-copy">@Xenomorph: I don't think it's really relevant here, and it's already mentioned in the <code>after</code> docs I linked to (as well as being the next section anyway). Can you think of a way to offer an explanation that would give the OP a clue as to what it's useful for without coming up with a more complicated example (e.g., adding a "stop" button)?</span>
<span class="comment-copy">If you have a comment, or a question for a question, kindly comment. Don't use answers for these kinds of things. At 50 reputation, you will be granted the privilege to comment.</span>
