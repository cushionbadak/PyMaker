<div class="post-text" itemprop="text">
<p>I have to create a code(function) that moves elements in a list without using temporary list and the function has to return nothing, I've tried the following but It won't work please help</p>
<pre><code>def move_zeros_v2(lst):
    left = []
    right = []
    left_a = left.append
    right_a = right.append
    for x in lst:
        if x:
            left_a(x)
        else:
            right_a(x)
    left.extend(right)
    i = 0
    while i &lt; len(left):
        lst[i] = left[i]
        i = i + 1

x = [1, 0, 3, 0, 0, 5, 7]
z=move_zeros_v2(x)
print(x, z)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is one way to do it:</p>
<pre><code>def move_zeros(lst):
  n = len(lst)
  lst[:] = filter(None, lst)
  lst.extend([0] * (n - len(lst)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The big "gotcha" here is "no temporary list." This means that the usual approach of iterating over a copy of the list while mutating the real list...</p>
<pre><code>for idx, el in enumerate(lst[:]):
</code></pre>
<p>...violates the rules of the assignment. Instead you'll have to do some jiggery pokery with indexes and etc.</p>
<pre><code>for idx in range(len(lst)):
    el = lst[idx]
    while el == 0:
        # push the zero to the end of the list
        lst.append(lst.pop(idx))
        el = lst[idx]  # check if the next one is a zero as well!
</code></pre>
<p>This is generally a Bad Idea, and definitely code smell in Python. You shouldn't feel bad about using a temporary list if this were Real Code, but I assume it's a homework assignment.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is very easy to do with normal list methods, although this isn't necessarily the prettiest or most efficient way to accomplish your task.</p>
<p>Take some regular list of integers with some zeroes sprinkled in:</p>
<pre><code>test_list = [1, 2, 4, 0, 3, 5, 0, 9, 0, 3, 4, 7]
</code></pre>
<p>Figure out how many zeroes there are. You'll be sticking these on the end later:</p>
<pre><code>zeroes_to_append = test_list._____(0)
</code></pre>
<p>You can remove the original zeroes with a simple loop. This method will cause a (catchable) <code>ValueError</code> when you run out of zeroes to get rid of:</p>
<pre><code>&gt;&gt;&gt; while True:
...   try:
...     test_list.______(0)
...   except ValueError:
...     break
</code></pre>
<p>Then you put the number of zeroes you removed back on the right end:</p>
<pre><code>for i in range(zeroes_to_append):
    test_list.append(0)
</code></pre>
<p>The only thing left for you is to complete your homework by looking up the actual methods I used in order to "fill in the blanks" in this answer. Use <a href="https://docs.python.org/2/tutorial/datastructures.html" rel="nofollow">this page in the Python docs</a> as a reference to help!</p>
</div>
<div class="post-text" itemprop="text">
<p>Not a very efficient solution, but I think, that's the type of solution you need.</p>
<pre><code>x = [1, 0, 3, 0, 0, 5, 7]
for _ in range(len(x)-1):
    for index in range(len(x)-1):
        if x[index]==0:
            x[index+1],x[index]=x[index],x[index+1]

print x
</code></pre>
<p>Output:</p>
<pre><code>[1, 3, 5, 7, 0, 0, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Updated answer with a solution for same list; </p>
<pre><code>lst = filter(lambda x: x!=0, lst) + lst[:]

#which returns [1, -1, 5, 7, 0, 0, 0] for lst = [1, 0,-1, 0, 0, 5, 7]
</code></pre>
<p>You can use a listcomprehension with sorted() and reversed()</p>
<pre><code>x = [1, 0, 3, 0, 0, 5, 7]
sorted_x = [i for i in reversed(sorted(x))]

# will return [7, 5, 3, 1, 0, 0, 0]
</code></pre>
</div>
<span class="comment-copy">Is this homework?</span>
<span class="comment-copy">"It won't work" doesn't tell us much without giving us what it <i>does</i> do. Is there an error? What's the (incorrect) output? For that matter what does the CORRECT output look like?</span>
<span class="comment-copy">Questions seeking debugging help (<b>"why isn't this code working?"</b>) must include the desired behavior, <i>a specific problem or error</i> and <i>the shortest code necessary</i> to reproduce it <b>in the question itself</b>. Questions without <b>a clear problem statement</b> are not useful to other readers. See: <a href="http://stackoverflow.com/help/mcve">How to create a Minimal, Complete, and Verifiable Example</a>.</span>
<span class="comment-copy">your function does not return anything... Other than that, it works.</span>
<span class="comment-copy">so, define <code>It won't work</code></span>
<span class="comment-copy">does <code>filter(None</code> remove zeroes, too? I've only ever used it to drop literal <code>None</code>s from a sequence</span>
<span class="comment-copy">@AdamSmith: It does: <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#filter</a></span>
<span class="comment-copy">Awesome! Pedantically: this actually <i>removes</i> all zeroes, then adds an equal amount to the end of the list, but that's neither here nor there.</span>
<span class="comment-copy">the dreaded pentunder!</span>
<span class="comment-copy">@AdamSmith I don't get it. Is that your nickname for my <code>_____()</code> method? :)</span>
<span class="comment-copy">Right! Like a dunder <code>__method__</code>, but with five underscores!</span>
<span class="comment-copy">nice bubblesort. Since you don't use the <code>i</code> you should name it <code>_</code>, and since it's just <code>else: pass</code> you can omit that entirely.</span>
<span class="comment-copy">Actually, user1749431's answer that involved sorting make me think that I can mimic bubble sort to solve the problem. Thanks for your suggestion.</span>
<span class="comment-copy">That's because, <b>How to move zeros to the end of a list</b> is the title</span>
<span class="comment-copy">Arguments about the contents of the question should be addressed in the comments <i>on the question</i>. This answer is wrong not because the question is unclear, but because it doesn't respect the <i>clear</i> part of the question ("No temporary list")</span>
<span class="comment-copy">the OP never mentioned anything about sorting. Just moving the 0s at the end.</span>
<span class="comment-copy">@user1749431 both <code>sorted</code> and <code>reversed</code> return a <b><i>new</i></b> list, which is why you're getting so much flak. You also don't seem to understand the difference between a list in memory and a reference to that list inside a function. I agree that the assignment is asking them to do something stupid, but at least be forthright that you're failing the assignment to write better code.</span>
<span class="comment-copy">updated with a same list solution that seems to meet the same list condition and negative integers, similar to the above but with a oneliner</span>
