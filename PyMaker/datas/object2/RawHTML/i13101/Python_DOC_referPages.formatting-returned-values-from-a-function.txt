<div class="post-text" itemprop="text">
<p>I have this function containing two lists. One of them has a bunch of strings within it, but the other is filled with integers generated from random numbers. When it is done, I have a for statement that prints out the information in the format I desire. But that's the problem, I can format the information within the function itself. But I need to pass the data over to another function and display it in the same manner</p>
<pre><code>def charAbility():
    pAbility = ['Str', 'Dex', 'Con', 'Int', 'Wis', 'Cha']
    pScore = []
    i = 0
    while i &lt; 6:
        randomNumber = random.randint(7, 18)
        pScore.append(randomNumber)
        i = i + 1
return pAbility, pScore
</code></pre>
<p>To get what I want printed within the function, I have this piece of code:</p>
<pre><code>for score, ability in zip(pAbility, pScore):
    print str(score) + ":\t\t " + str(ability)
</code></pre>
<p>Is there a way I can take the returned values and print it in the same fashion in another function?</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe you are simply looking for this: </p>
<pre><code>param1, param2 = charAbility()
</code></pre>
<h1>Explanation</h1>
<p>Your method is returning two values <code>pAbility, pScore</code>. If you are to do this simply: </p>
<pre><code>param = charAbility()
</code></pre>
<p>You will still have access to both of your returns, however, they are returned as a <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow">tuple</a>:</p>
<p>Simplified example of what is happening:</p>
<pre><code>def charAbility():
    return 1, 2
param = charAbility()
print(param)
(1, 2)
</code></pre>
<p>So, to handle the return in to their own variables, so you can pass it to a new method, you should be using the example I provided above. To re-iterate: </p>
<pre><code>param1, param2 = charAbility()
</code></pre>
<p>Now you can pass <code>param1</code> (which will hold <code>pAbility</code>) and <code>param2</code> (which will be holding <code>pScore</code>) to whatever other method you need to send it to: </p>
<pre><code>some_other_method(param1, param2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should call your existing function and assign the two lists to two different variables, or together they will be returned as a tuple. Then it would be cleanest to use string formatting to print the results:</p>
<pre><code>scorelist, abilitylist = charAbility()

for score,ability in zip(scorelist,abilitylist):
    print "{}:\t\t{}".format(score,ability)
</code></pre>
<p>Alternatively, with one variable:</p>
<pre><code>combinedlists = charAbility()

for pair in zip(*combinedlists):
    print "%s:\t\t%s" % pair
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you are looking for this :-</p>
<pre><code>def charAbility():
    pAbility = ['Str', 'Dex', 'Con', 'Int', 'Wis', 'Cha']
    pScore = []
    i = 0
    while i &lt; 6:
        randomNumber = random.randint(7, 18)
        pScore.append(randomNumber)
        i = i + 1
    return pAbility, pScore

def otherFunc():
    score, ability = charAbility()

    for iscore, strability in zip(ability, pScore):
        print str(iscore) + ":\t\t " + str(strability)

otherFunc() # function in module scope
</code></pre>
</div>
<span class="comment-copy">What do you want, You want two lists as return value and print them in another function ?</span>
<span class="comment-copy">So what's wrong with returning the formatted result in function? <code>return (str(score) + ":\t\t " + str(ability))</code></span>
<span class="comment-copy">This is not quite right. You are mixing up <code>score, ability</code> and <code>pAbility</code> inside the <code>otherFunc()</code></span>
