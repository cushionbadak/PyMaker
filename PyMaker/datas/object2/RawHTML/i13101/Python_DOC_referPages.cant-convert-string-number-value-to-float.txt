<div class="post-text" itemprop="text">
<p>I am working with a CSV file that contains 2 columns, the first a date column with format yyyymmdd, the second a string value that is in the format of a float, 0.0 for example.</p>
<pre><code>import csv
file = open('Precipitation.csv')
date_file = csv.reader(file)

dec = 0.0

for k in date_file:
    full_date = k[0]
    month = full_date[4:-2]
    rain_amount = k[1]
    float(month)

    if month == "12":
         float(rain_amount)
         dec += rain_amount

print(dec)
</code></pre>
<p>I keep checking the type of rain_amount by using type(rain_amount), and it keeps registering as "str." What am I doing wrong? I keep trying to check and do different things but I can't find out the problem. I am definitely doing something wrong, but I have been looking at this too long to figure it out. Help?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>float()</code> doesn't modify a variable in-place, it returns the new typed value. Assign it back:</p>
<pre><code>rain_amount = float(rain_amount)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>float()</code> function does <strong>not</strong> change its argument - it calculates the appropriate floating-point number required and returns that as a new object, so you have to save that somewhere if you want to use it. If you like, you can combine the <code>float()</code> call with the updating step, eg:</p>
<pre><code>dec += float(rain_amount)
</code></pre>
<hr/>
<p>You may be wondering <em>why</em> Python works like that.</p>
<p>As mentioned in the Python <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow">Data model docs</a></p>
<blockquote>
<p>An object’s type determines the operations that the object supports
  (e.g., “does it have a length?”) and also defines the possible values
  for objects of that type. The <code>type()</code> function returns an object’s type
  (which is an object itself). Like its identity, an object’s <em>type</em> is
  also unchangeable.</p>
<p>[Footnote] It <em>is</em> possible in some cases to change an object’s type, under certain
  controlled conditions. It generally isn’t a good idea though, since it
  can lead to some very strange behaviour if it is handled incorrectly.</p>
</blockquote>
<p>So in general it's best to think of the type of an object as unchangeable. We may casually speak of converting a string to a float, but that's really just a sloppy way of saying that we are creating a float object with a numerical value that corresponds to the string object's contents.</p>
<p>Not only can't you change an object's type, for many basic Python object types you can't even change their value! Such objects are called <em>immutable</em>; common immutable types include all numeric types, strings, and tuples. Apart from tuples, most built-in container types (lists, dictionaries and sets (but not frozensets)) are mutable, meaning you <em>can</em> modify their contents.</p>
<p>So if you do</p>
<pre><code>s = 'Sam'
s += 'my'
</code></pre>
<p>You aren't actually changing the string object <code>s</code>: you can't because it's immutable. Instead, a new string object is created that contains <code>'Sammy'</code>, that new object is then bound to the name <code>s</code>, and the old object that contained <code>'Sam'</code> is discarded.</p>
<p>Similarly, if you do</p>
<pre><code>a = 1
a += 1
</code></pre>
<p>a new integer object is created that has the value of <code>a+1</code> and that new object is bound to the name <code>a</code>.</p>
<p>For more info on this topic, please see <a href="http://nedbatchelder.com/text/names.html" rel="nofollow">Facts and myths about Python names and values</a> by SO veteran Ned Batchelder.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are not storing the updated <code>float</code> type. You have to assign it back.</p>
<p>do this:</p>
<pre><code>rain_amount=float(rain_amount)
</code></pre>
</div>
<span class="comment-copy">+1 for: <i>"but that's really just a sloppy way of saying that we are creating a float object with a numerical value that corresponds to the string object's contents"</i></span>
