<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/38987/how-to-merge-two-dictionaries-in-a-single-expression">How to merge two dictionaries in a single expression?</a>
<span class="question-originals-answer-count">
                    44 answers
                </span>
</li>
</ul>
</div>
<p>I was doing django project about processing <code>request.data</code> and <code>from.cleaned_data</code> issues. When user only inputs specify fields, it will send request to my server. Next, the form class process the request, except processing inputed fields and return no inputted fields from form built-in fields.</p>
<p>This is request data:</p>
<pre><code>&lt;QueryDict: {u'is_public': [u'True']}&gt;
</code></pre>
<p>This is cleaned data from from class:</p>
<pre><code>{'name': u'', 'devie_type': u'', 'is_public': True, 'serial_num': u'', 'is_online': False, 'operation_system': u''}
</code></pre>
<p>I know these are dictionary type. I hope getting their union keys of them and values of cleaned data. I expect that it returns:</p>
<pre><code>{u'is_public': True}
</code></pre>
<p>This is my attempt:</p>
<pre><code>a = {}
for k in request.data:
    if k in the_form.cleaned_data:
        a[k] = the_form.cleaned_data[k]
print a
</code></pre>
<p>Is it readable? or is there any built-in functions about processing union dictionary in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use intersection operations (which sounds like what you really want, not union) to efficiently limit iteration to keys common to both <code>dict</code>s, then use a dict comprehension to achieve this fairly efficiently:</p>
<pre><code>a = {k: the_form.cleaned_data[k]
     for k in request.data.viewkeys() &amp; the_form.cleaned_data.viewkeys()}
</code></pre>
<p>So when a key exists in both the request and the cleaned data, you'll have a mapping from that key to the cleaned data. All other keys that appear in only one input <code>dict</code> or the other are dropped. In Python 3, you'd replace <code>.viewkeys()</code> with just <code>.keys()</code> (and this won't work before Python 2.7, which is where <code>.viewkeys()</code> was introduced).</p>
</div>
<div class="post-text" itemprop="text">
<p>There's nothing inherently wrong with what you're doing, all totally fine. However, the more pythonic way to do this would be to use a dictionary comprehension:</p>
<pre><code>a = {
   k: the_form.cleaned_data[k]
   for k in request.data
   if k in the_form.cleaned_data
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>just do: <code>request_data.update(form.cleaned_data)</code></p>
</div>
<span class="comment-copy">Let me edit  my problem. My environment is <code>python-2.7</code></span>
<span class="comment-copy">@BurgerKing: I assumed it was. This will work just fine with <code>.viewkeys()</code> on Python 2.7, I just included the Python 3 differences for completeness.</span>
<span class="comment-copy">list and list can do union? or is it available on python3?</span>
<span class="comment-copy"><code>.viewkeys()</code> is not a <code>list</code>, it's a special "keys view" object, that is set-like live view of the <code>dict</code>'s keys. In Python 3, <code>.keys()</code> is the same as Py 2.7's <code>.viewkeys()</code> (<code>.iterkeys()</code> and the Py2-style <code>.keys()</code> returning <code>list</code> are removed; the views already iterate, and you can just wrap <code>.keys()</code> calls in the <code>list</code> constructor if you need an actual <code>list</code>).</span>
<span class="comment-copy">@BurgerKing: You can see more details at <a href="https://docs.python.org/3/whatsnew/3.0.html#views-and-iterators-instead-of-lists" rel="nofollow noreferrer">What's new in Python 3.0: Views and iterators instead of lists</a>, which describes how many built-ins went from producing <code>list</code>s to producing views or iterator/generator objects, to reduce the creation of unnecessary intermediate data copies.</span>
<span class="comment-copy">Great! It's my wanted.</span>
<span class="comment-copy">This is the same basic concept as my answer, though it won't allow Python to optimize for cases where the request.data dict is large and the cleaned_data is small (because it must loop and check them all, where intersection operations can choose to iterate the smaller input and membership test the larger input, to reduce the work to the lesser of the two inputs' lengths).</span>
<span class="comment-copy">Sorry, the return is not my expect: <code>&lt;QueryDict: {u'name': [u''], u'devie_type': [u''], u'serial_num': [u''], u'opera tion_system': [u''], u'is_online': [False], u'is_public': [u'True', True]}&gt;</code></span>
<span class="comment-copy">i modified my answer a couple of times..which one did you try out?</span>
<span class="comment-copy">Please check your code before posting your answer. My expectation is <code>{u'is_public': True}</code></span>
<span class="comment-copy">your question's title is misleading...my answer correctly posts the union of two dicts with request_data getting the right value of public <b>in addition</b> to contents of cleaned_data - which is what union means...also this question is closed in favor of a question that allows for <b>union</b> of two dicts, not exactly what you want ....</span>
<span class="comment-copy">run this as is and you'll see what i mean :                                        request_data = {u'is_public': [u'True']} cleaned_data = {'name': u'', 'devie_type': u'', 'is_public': True, 'serial_num': u'',                  'is_online': False, 'operation_system': u''}  request_data.update(cleaned_data)  print request_data</span>
