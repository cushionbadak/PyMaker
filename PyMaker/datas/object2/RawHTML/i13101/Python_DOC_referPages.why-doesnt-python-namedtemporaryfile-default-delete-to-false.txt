<div class="post-text" itemprop="text">
<p>I was trying to use <a href="https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile" rel="nofollow">tempfile.NamedTemporaryFile</a> in Python 3. I found that if I wanted to call any other process using <code>subprocess.call</code> or such by passing the new file name, I had to use <code>delete = false</code>, and then later on delete the file manually myself using <code>os.unlink</code>. I presume I have to <code>close()</code> the file before allowing another process to open it (in my case, calling a compiler to compile a source file created from Python), and apparently the file is deleted upon being closed.</p>
<p>I wonder, when Python already provides <code>tempfile.TemporaryFile</code> to produce temporary files which do not have names, of what use is a <em>named</em> temporary file if it is not to enable other processes to access them?</p>
<p>It seems to me that the default should be to <em>not</em> delete the created file upon the file being closed, and putting the responsibility of deleting the temporary file on the user, no? In fact, it seems that the <code>delete</code> argument is itself pointless because of this, since if the file will be deleted anyhow, then why do we need its name, so <code>NamedTemporaryFile</code> should never delete...</p>
</div>
<div class="post-text" itemprop="text">
<p>It's an incorrect presumption that you have to close the file before other processes can access it.  In fact, as you observed, when you call close on the NamedTemporaryFile it deletes the file on disk by default.</p>
<p>With <code>tempfiles</code> as with all of Python, scope and lifetime are all important.  That's one of the great things about object orient languages, objects clean up after themselves when they're no longer needed (either deleted or go out of scope). Upon destruction, the <code>tempfile</code> objects free all resources in memory and named files on disk.</p>
<p>Thus, if you want to use the temporary file on disk by using the file system name, the NamedTemporaryFile should be in scope and unclosed. It's not guaranteed across all platforms, but on Unix/Linux the file should be accessible in the file system by other processes.  However, the NamedTemporaryFile creates the file to readable and writeable only by the owner (unix permission 0600: -rw-------).</p>
<p>If you want/need to do more of this management and cleanup yourself, you might consider using the lower level function <code>tempfile.mkstemp()</code>.  For example, </p>
<pre><code>fd, tempfilename = tempfile.mkstemp()
f = os.fdopen(fd)
</code></pre>
<p>In either case be sure you flush the buffers before giving the filename to another process, file.flush().</p>
</div>
<div class="post-text" itemprop="text">
<p>So that you can use it in the <code>with</code> statement as a context manager and you can get the name of the file via the <code>name</code> property. Consider:</p>
<pre><code>with tempfile.NamedTemporaryFile() as tmp_file:
    subprocess.call(['foo', tmp_file.name])
    do_something_with(tmp_file)
</code></pre>
<p>This will automatically delete the file when the body of the <code>with</code> statement is exited either normally or by exception.</p>
</div>
<div class="post-text" itemprop="text">
<p>1 What makes you say you can't access the temp file. If you code forks and the file was not closed you can still access it.FH "are" in the forked process as well</p>
<p>2 if the responsibility for deleting the file would be on user then I would argue there is no need for module like this. If I want to keep the file then I'll handle it myself, but if I just need to write to a file and not to worry about it then I use temofile module and the module is so nice that it allows me to keep the file if I really need to</p>
</div>
<span class="comment-copy">So in response to my original query are you saying that the reason the default is to delete is because that's the expected behaviour of Python objects and anybody who wants otherwise should specifically ask?</span>
<span class="comment-copy">Partly, I'm saying why they behave that way.</span>
<span class="comment-copy">The <code>QTTemporaryFile</code> which is not written in Python behaves essentially the same way.  This is how most people expect to manage temporary files in an object oriented language.  The whole point of tempfiles is that they are <i>temporary</i>  -- they should <i>go away</i> when no longer needed.  If you're needs or wants differ, yes, you can "specifically ask" that object to do what you want, or you can use any other features of the language to do specifically what you want or need <i>in a different manner</i>.</span>
<span class="comment-copy">And also saying, at least on unix/linux, that other processes can access the <code>NamedTemporaryFile</code> on disk by name either: 1) as long as the <code>NamedTemporaryFile</code> <i>object</i> continues to exist <b>or</b> 2) indefinitely when <code>delete</code> is set to false.</span>
<span class="comment-copy">I was missing .flush() :/</span>
<span class="comment-copy">... Um, I hope I'm not being dense but I don't get your point since I can do that equally well with just <code>TemporaryFile</code>...</span>
<span class="comment-copy">Thanks but this much is obvious and it does not answer the question of why <code>delete</code> doesn't default to <code>False</code>...</span>
<span class="comment-copy"><code>subprocess.call()</code> creates a new process, not a fork.</span>
<span class="comment-copy">I'm sorry but none of these answers seems to address the point of the question, which was why does <code>delete</code> default to <code>false</code>...</span>
<span class="comment-copy">does it default to False for tempfile.NamedTemporaryFile ??  3.5:tempfile.NamedTemporaryFile(mode='w+b', buffering=None, encoding=None, newline=None, suffix='', prefix='tmp', dir=None, delete=True)  3.4: tempfile.NamedTemporaryFile(mode='w+b', buffering=None, encoding=None, newline=None, suffix='', prefix='tmp', dir=None, delete=True)  2.7.10:tempfile.NamedTemporaryFile([mode='w+b'[, bufsize=-1[, suffix=''[, prefix='tmp'[, dir=None[, delete=True]]]]]])</span>
<span class="comment-copy">I'm sorry I meant why it <i>doesn't</i> default to <code>false</code> as asked in the original question...</span>
<span class="comment-copy">That i believe was answered. Because if you want a temp file you don't want to worry about cleaning up. If you want to persist data you dont do it to a temp file. However the tempfile module still allows you to keep the file for a namedtempfile</span>
