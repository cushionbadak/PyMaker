<div class="post-text" itemprop="text">
<p>In python 3, you can add member variables to a custom object after the class declaration:</p>
<pre><code>class a():
    pass

b = a()
b.c = 1 #okay
print(b.c) #outputs 1
</code></pre>
<p>However, doing the same for a list object throws an exception:</p>
<pre><code>d = []
d.e = 1 #throws AttributeError: 'list' object has no attribute 'e'
</code></pre>
<p>Can someone explain why this is happening? </p>
</div>
<div class="post-text" itemprop="text">
<p>Not all objects support arbitrary attribute assignment.</p>
<p>Most built-in types don't, including lists, tuples, strings, bytes, dictionaries, sets, booleans, numeric types, etc. On the other hand, function objects do, as do module objects (you are adding new globals to that module when you do).</p>
<p>In other words, just because custom classes and instances support assignment, doesn't mean other types do too. To support arbitrary attributes these types would need to have a <code>__dict__</code> dictionary per instance, a non-trivial memory cost for very little advantage, especially when a typical Python program creates a <em>lot</em> of instances of these types.</p>
<p>Note that when you use the <a href="https://docs.python.org/3/reference/datamodel.html#slots" rel="nofollow"><code>__slots__</code> feature</a> to save per-instance memory for custom classes, you cannot assign attributes to those instances either:</p>
<pre><code>&gt;&gt;&gt; class Foo:
...     __slots__ = ('spam', 'eggs')
...
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo.ham = "won't work"
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'Foo' object has no attribute 'ham'
</code></pre>
<p>Vice versa, you can <em>subclass</em> the built-in types, at which point the <em>subclass</em> does support arbitrary attribute assignment (as the subclass instances will have a <code>__dict__</code> attribute):</p>
<pre><code>&gt;&gt;&gt; class FooList(list):
...     pass
...
&gt;&gt;&gt; foo_list = FooList()
&gt;&gt;&gt; foo_list.ham = 'This does work'
</code></pre>
<p>That is, unless you use <code>__slots__</code> of course.</p>
</div>
<div class="post-text" itemprop="text">
<p>As Martijn Pieters have said, We can't add attribute to them. But you may inherit them and override <strong>setattribute</strong>() method to accomplish this.</p>
</div>
<span class="comment-copy">Oh that makes sense! Thank you. I'll mark this as the answer.</span>
<span class="comment-copy">There is no <code>__setattribute__</code> method in Python. Maybe you meant <a href="https://docs.python.org/3/reference/datamodel.html#object.__setattr__" rel="nofollow noreferrer"><code>object.__setattr__()</code></a>? You don't need to use that method, subclasses can have arbitrary attributes assigned to them.</span>
