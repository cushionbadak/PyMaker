<div class="post-text" itemprop="text">
<p>I have a function which returns me two lists, symbols and data where the corresponding values are with the same index. For example <code>symbols[i]</code> gives the variable name and <code>data[i]</code> gives the actual value (<code>int</code>).</p>
<p>I would like to use these two lists to dynamically create a class with static values of the following format:</p>
<pre><code>class a:

    symbols[i] = data[i]
    symbols[i+1] = data[i+1]
</code></pre>
<p>and so on so that I could later refer to the values like this:</p>
<pre><code>a.symbols[i]
a.symbols[i+1] 
</code></pre>
<p>where <code>symbols[i]</code> and <code>symbols[i+1]</code> should be replaced with the wanted variable name, like <code>a.var1</code> or <code>a.var2</code></p>
<p>How could this be achieved?</p>
<p>Edit: added detail below</p>
<p>So I have a main program lets say def main() which should read in a list.dat of this style:</p>
<pre><code>dimension1;0.1
dimension2;0.03
dimension3;0.15
</code></pre>
<p>and separate the values to symbols and data lists.</p>
<p>So I don't know how many values there are exactly in these lists. I want to create a class dynamically to be able to refer to the values in the main program and to give the class to sub functions as an argument like def sub1(NewClass, argument1, argument2) etc. At the moment I am using a manually created simple python list (list.py) of the following format:</p>
<pre><code>dimension1 = 0.1
dimension2 = 0.03
dimension3 = 0.15
</code></pre>
<p>and then using from list import * in the main program and also in the sub functions, which causes a SyntaxWarning telling me that import * only allowed at module level. So what I actually want is a smart and consistent way of handling the parameters list and transferring it to another functions</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a class dynamically with <code>type</code>. If I understand what you want to achieve here, your code will look like:</p>
<pre><code>my_classes = []
for i in range(0, len(data), 2):
    my_classes.append(
        type('A%d' % i, (), {'var1': data[i], 'var2': data[i+1]})
    )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suspect what you actually want, re-reading the description, is to use <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow"><code>type</code></a> as follows:</p>
<pre><code>NewClass = type('NewClass', (object,), dict(zip(symbols, data)))
</code></pre>
<p>Given a minimal example:</p>
<pre><code>&gt;&gt;&gt; symbols = 'foo bar baz'.split()
&gt;&gt;&gt; data = range(3)
</code></pre>
<p>The outcome would be:</p>
<pre><code>&gt;&gt;&gt; NewClass.foo
0
&gt;&gt;&gt; NewClass.bar
1
&gt;&gt;&gt; NewClass.baz
2
</code></pre>
<p>Using <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> allows you to easily create a dictionary from a list of keys and a list of associated values, which you can use as the <code>__dict__</code> for your new class.</p>
<p>However, it's not clear why you want this to be a <em>class</em>, specifically.</p>
</div>
<span class="comment-copy">It's not at all clear to me what you're asking. You can dynamically create a class with e.g. <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer"><code>type('NewClass', (object,), {})</code></a>, but why do you want to?</span>
<span class="comment-copy">You wouldn't easily be able to refer to the class and its members. You're fighting the language. What are you trying to achieve?</span>
<span class="comment-copy">It sounds like it might be possible to use the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enum</a> module.</span>
<span class="comment-copy">@NoctisSkytower feasibly! Hard to tell without further input from the OP, though.</span>
<span class="comment-copy">@NoctisSkytower or a <a href="https://docs.python.org/2/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><b><code>namedtuple</code></b></a>: <code>namedtuple('NewClass', symbols)(*data)</code></span>
<span class="comment-copy">Thank you for your reply. I added some more detail to my OP. Sorry for being unclear, I am quite new to programming..</span>
