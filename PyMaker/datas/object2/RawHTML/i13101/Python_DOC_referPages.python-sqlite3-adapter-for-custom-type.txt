<div class="post-text" itemprop="text">
<p>I am using <a href="https://docs.python.org/2/library/sqlite3.html" rel="nofollow">sqlite3</a> for db access in a python module. </p>
<p>I frequently use <a href="https://docs.python.org/3/library/enum.html" rel="nofollow">enums</a> in my python objects. Currently I have to convert my enums into strings before inserting them into the sqlite db. My following attempt to register a generic adapter to make this conversion implicit fails. </p>
<pre><code>def adapt_enum(enum_instance):
    return enum_instance.name

sqlite3.register_adapter(enum.Enum,adapt_enum)
</code></pre>
<p>The above implementation results in the following error.</p>
<pre><code>sqlite3.InterfaceError: Error binding parameter 5 - probably unsupported type.
</code></pre>
<p>Registering an adapter for each enum, as shown below works fine however</p>
<pre><code>class MyEnum(Enum):
    a = 1
    b = 2

def adapt_my_enum(my_enum_instance):
    return my_enum_instance.name

sqlite3.register_adapter(MyEnum,adapt_my_enum)
</code></pre>
<p>The adapter for MyEnum works as expected. But going this way I have to register an adapter for all my enums separately. Is there a way to remove this redundancy?</p>
<p>P.S. I am using python 2.7</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like the easier way is to <a href="https://wingware.com/psupport/python-manual/2.5/lib/node346.html" rel="nofollow">build the adaptation</a> into the <code>Enum</code> itself:</p>
<pre><code>class SqliteEnum(enum.Enum):
    def __conform__(self, protocol):
        if protocol is sqlite3.PrepareProtocol:
            return self.name
</code></pre>
<p>and then use <code>SqliteEnum</code> as the base for your other Enum classes.</p>
</div>
