<div class="post-text" itemprop="text">
<p>I am attempting to append a coordinate-like value into a list. the following is my code so far, but it returns <code>["(0,1),(1,1),(1,2)"]</code> when I need it to return <code>[(0,1),(1,1),(1,2)]</code>. </p>
<pre><code>def read_coords(s):
    coords_s = []
    row = 0
    split_coords = s.split('\n')
    for i in split_coords:
        i = list(i)
        for z in range(len(i)):
            indiv_coord = []
            if i[z] == 'O':
                coords_s.append('('+str(row)+','+str(z)+')')
                row += 1            
    return coords_s
</code></pre>
<p>The test cases I am using are:</p>
<p><code>read_coords("O..\n.OO\n")</code> which should return --&gt; <code>[(0,0), (1,1), (1,2)]</code>
o <code>read_coords("\n\nO..\n.OO\n\n")</code> → `[(0,0),  (1,1),  (1,2)]  </p>
<h1>ignores blank lines.</h1>
<p><code>read_coords(".....\n.....\n")</code> → <code>[]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You aren't creating the data structure you think you are. </p>
<p>This line you have here: </p>
<pre><code>coords_s.append('('+str(row)+','+str(z)+')')
</code></pre>
<p>What you are doing there is actually appending a string to your list as "(row, z)".</p>
<p>The structure you are referring to is called a <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow">tuple</a>.</p>
<p>You should be changing your code to actually append the tuple to your list, and the type-casting to <code>str</code> is most likely unnecessary either. So, you can simply do this:</p>
<pre><code>coords_s.append((row, z))
</code></pre>
</div>
<span class="comment-copy">Can you explain how the input of "0..\n.00\n" returns (0,0), (1,1),(1,2)? (or could you provide a complete input line?)</span>
<span class="comment-copy">@Back2Basics apologies, the input "O..\n.OO\n" is basically creating a 3x3 grid. wherever there is an 'O', a coordinate must be returned corresponding to its position on the grid.</span>
<span class="comment-copy">wouldnt that just return [('0', '0'), ('1', '1'), ('2', '2')] ? could I then use something like ''.join(coords_s) ?</span>
<span class="comment-copy">Correct, the solution I provided would give you an output as: <code>[('0', '0'), ('1', '1'), ('2', '2')]</code>. <code>''.join(coords_s)</code> will create a string out of your list. You don't want that based on the example you provided.</span>
<span class="comment-copy">Why use <code>str</code> at all? Why not just the tuple <code>coords_s.append(row, z)</code>?  Bottom line to all of this, go read up on 'tuples' in the python docs.</span>
<span class="comment-copy">That is true @RobertB . I tried sticking with OP structure as much as possible, but it really looks like it shouldn't be there. I removed it from my solution. Cheers.</span>
<span class="comment-copy">And you did it correctly versus what I typed, oops.</span>
