<div class="post-text" itemprop="text">
<p><a href="https://i.stack.imgur.com/N24V7.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/N24V7.png"/></a>
I saw some code of this format:</p>
<pre><code>from b.c import *
</code></pre>
<p>However there is no <code>__init__.py</code> in <code>b</code> and I do not undersand how it succeeds.</p>
<hr/>
<p>The directory structure looks like this:</p>
<pre><code>a.py
b
    c.py
</code></pre>
<p>Is it possible to <code>from b.c import *</code> in <code>a.py</code> even if there is no <code>__init__.py</code> in folder <code>b</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is not possible in Python 2.7 due to how the <code>PYTHONPATH</code> is constructed. See <a href="https://stackoverflow.com/questions/448271/what-is-init-py-for?lq=1">this question</a> for an excellent explanation.</p>
<hr/>
<p><em>However nothing is impossible in python...</em></p>
<p>Thanks to <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages" rel="nofollow noreferrer"><strong>PEP 420</strong>: Implicit Namespace Packages</a>: this is indeed possible in Python 3.3 and up.</p>
<p><code>__init__.py</code> files are now optional for namespace packages:</p>
<h2><strong>Using Python 3.5 on Windows</strong></h2>
<hr/>
<pre><code>a.py
b/
    c.py
</code></pre>
<p><strong>b/c.py</strong></p>
<pre><code>def hello_world():

    print("Hello World!")
</code></pre>
<p><strong>a.py</strong></p>
<pre><code>from b.c import *

hello_world
</code></pre>
<p>Then:</p>
<pre><code>&gt;&gt;&gt; import a
Hello World!
</code></pre>
<p>More information about the caveats of namespace packages versus regular packages can be found in the <a href="https://www.python.org/dev/peps/pep-0420/" rel="nofollow noreferrer">PEP</a> and in David Beazley's excellent talk
<a href="https://www.youtube.com/watch?v=0oTh1CXRaQ0" rel="nofollow noreferrer"><em>Modules and Packages: Live and Let Die!</em> </a></p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/448271/what-is-init-py-for">What is __init__.py for?</a></span>
<span class="comment-copy">Wouldn't trying it out have been faster than writing the question?</span>
<span class="comment-copy">I saw some code like from a.b.c import * and there is no <b>init</b> in a and b. I don't know how it succeeds.</span>
<span class="comment-copy">Python 2.7.3 (default, Aug  1 2012, 05:14:39)  [GCC 4.6.3] on linux2 Type "help", "copyright", "credits" or "license" for more information. &gt;&gt;&gt; import sys &gt;&gt;&gt; from peak.util.decorators import * &gt;&gt;&gt; sys.modules['peak.util.decorators'] &lt;module 'peak.util.decorators' from '/home/ubuntu/games/local/lib/python2.7/site-packages/peak/util/decorators.pyc'&gt; &gt;&gt;&gt;  (games)ubuntu@i:$ ll /home/ubuntu/games/local/lib/python2.7/site-packages/peak  total 12 drwxrwxr-x  3 ubuntu ubuntu 4096 Jul 18  2013 ./ drwxrwxr-x 75 ubuntu ubuntu 4096 Sep 25 06:15 ../ drwxrwxr-x  2 ubuntu ubuntu 4096 Oct 30 13:51 util/</span>
<span class="comment-copy">Ah now I see what you mean. Can you check peak/__init__.py? Maybe it defines the module directly</span>
<span class="comment-copy">I'll edit my answer later</span>
<span class="comment-copy">Or maybe it directly manipulates <code>sys.path</code></span>
