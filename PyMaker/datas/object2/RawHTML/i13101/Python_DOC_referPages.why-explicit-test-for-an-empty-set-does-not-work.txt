<div class="post-text" itemprop="text">
<p>If empty <code>set()</code> is <code>False</code>, shouldn't the <code>if test == False</code> clause in the following code evaluate to <code>True</code>? </p>
<pre><code>test = set() 

#  empty sets are false
if test == False:
    print("set is empty")
else:
    print("set NOT empty")

if not test:
    print("set is empty")
</code></pre>
<p>ouput:</p>
<pre><code>set NOT empty
set is empty
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In simple terms, the equals operator <code>==</code> will perform an equality comparison between those two objects: A set and a boolean value will never be equal, so the result of the comparison is false. On the other hand, just checking <code>if obj</code> (or <code>if not obj</code>) will check the trueness of the object, something that can be evaluated for every object. In a way, this actually does a type conversion using <code>if bool(obj)</code>. And for empty sets, this is false.</p>
<p>In the <a href="https://docs.python.org/3/reference/datamodel.html">data model</a>, both of these operations invoke different special method names. Comparing two objects using the equality operator will invoke <a href="https://docs.python.org/3/reference/datamodel.html#object.__eq__"><code>__eq__</code></a> while calling <code>bool()</code> on an object will invoke <a href="https://docs.python.org/3/reference/datamodel.html#object.__bool__"><code>__bool__</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The operator <code>==</code> will check the values of 2 object and in this case an empty <code>set()</code> and a False value have not a same value.</p>
<p>And since python evaluates any empty sequence as False and none empty sequences as True, if you want to check the validation of the <code>test</code> object you can simple use <code>if</code>:</p>
<pre><code>if test:
  #do stuff
</code></pre>
<blockquote>
<p><a href="https://docs.python.org/3/library/stdtypes.html#truth" rel="nofollow"><strong>Truth Value Testing</strong></a></p>
<p>Any object can be tested for truth value, for use in an if or while condition or as operand of the Boolean operations below. The following values are considered false:</p>
<ul>
<li><p>List item</p></li>
<li><p>None</p></li>
<li><p>False</p></li>
<li><p>zero of any numeric type, for example, 0, 0.0, 0j.</p></li>
<li><p>any empty sequence, for example, '', (), [].</p></li>
<li><p>any empty mapping, for example, {}.</p></li>
<li><p>instances of user-defined classes, if the class defines a <code>__bool__()</code> or <code>__len__()</code> method, when that method returns the integer zero or bool value False.</p></li>
</ul>
<p>All other values are considered true â€” so objects of many types are always true.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The key point here is, <code>False</code> is not the only value that is considered falsy. An empty set is also interpreted as false in the condition.</p>
<p>However, the explicit equality test <code>test == False</code> is not true because an empty set, as definition, is of type <code>set</code>, which is never equal to a boolean value <code>
False</code>.</p>
<hr/>
<p>See <a href="https://docs.python.org/3/reference/expressions.html#booleans" rel="nofollow">Boolean Operations</a>:</p>
<blockquote>
<p>In the context of Boolean operations, and also when expressions are used by control flow statements, the following values are interpreted as false: <code>False</code>, <code>None</code>, numeric zero of all types, and empty strings and containers (including strings, tuples, lists, dictionaries, sets and frozensets). All other values are interpreted as true. User-defined objects can customize their truth value by providing a <code>__bool__()</code> method.</p>
</blockquote>
</div>
