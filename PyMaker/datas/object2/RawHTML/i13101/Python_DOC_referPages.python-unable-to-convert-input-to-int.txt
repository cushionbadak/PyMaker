<div class="post-text" itemprop="text">
<p>I am trying to convert input() data to int() with the following code:</p>
<pre><code>prompt_text = "Enter a number: "
try:
  user_num = int(input(prompt_text))
except ValueError:
  print("Error")

for i in range(1,10):
  print(i, " times ", user_num, " is ", i*user_num)

even = ((user_num % 2) == 0)

if even:
  print(user_num, " is even")
else:
  print(user_num, " is odd")
</code></pre>
<p>I get the following odd error when I enter <strong>asd2</strong> for example:</p>
<pre><code>Enter a number: asd2 Error 
Traceback (most recent call last):   File "chapter3_ex1.py", line 8, in &lt;module&gt;
    print(i, " times ", user_num, " is ", i*user_num) 
NameError: name 'user_num' is not defined
</code></pre>
<p>What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem that you are facing is that the interpreter raises the error in the <code>try</code> and executes the <code>except</code> block. After that it will start to execute everyline. This will throw the <code>NameError</code></p>
<p>You can overcome that by putting the rest of the  program into the <code>else</code> block. </p>
<pre><code>prompt_text = "Enter a number: "

try:
    user_num = int(input(prompt_text))  

except ValueError:
    print("Error")

else:
    for i in range(1,10):
      print(i, " times ", user_num, " is ", i*user_num)

    even = ((user_num % 2) == 0)

    if even:
      print(user_num, " is even")
    else:
      print(user_num, " is odd")
</code></pre>
<p>Quoting from the <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow">Python tutorial</a> </p>
<blockquote>
<p>The try ... except statement has an <strong><em>optional else clause</em></strong>, which, when
  present, must follow all except clauses. It is useful for code that
  must be <strong><em>executed if the try clause does not raise an exception</em></strong>.</p>
</blockquote>
<p>Another way is to use a <em>sentinel</em> value</p>
<pre><code>prompt_text = "Enter a number: "
user_num = 0 # default value
try:
    user_num = int(input(prompt_text))
except ValueError:
    print("Error")
</code></pre>
<p>This will also work. However the results may not be as expected. </p>
<hr/>
<p>Protip - Use 4 spaces to indent</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem isn't with the conversion to an <code>int</code>. <code>user_num</code> doesn't get a value if an exception is thrown, but it's used later.</p>
<pre><code>prompt_text = "Enter a number: "
try:
  user_num = int(input(prompt_text)) # this fails with `asd2`
except ValueError:
  print("Error") # Prints your error

for i in range(1,10):
  print(i, " times ", user_num, " is ", i*user_num) # user_num wasn't assigned because of the error

even = ((user_num % 2) == 0)

if even:
  print(user_num, " is even")
else:
  print(user_num, " is odd")
</code></pre>
<p>You can fix this by putting the code that uses <code>user_num</code> in the try-block. I'll also add create a function to clean things up.</p>
<pre><code>def is_even(num):
  return num%2 == 0

prompt_text = "Enter a number: "
try:
  user_num = int(input(prompt_text))
  for i in range(1,10):
    print(i, " times ", user_num, " is ", i*user_num)
  if is_even(user_num):
    print(user_num, " is even")
  else:
    print(user_num, " is odd")
except ValueError:
  print("Error")
</code></pre>
<p>See the ideone <a href="https://ideone.com/zZyzez" rel="nofollow">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This may not be the cleanest solution but it addresses the problem, in your code user_num is not initialized unless it is a number.</p>
<pre><code>prompt_text = "Enter a number: "
user_num = "no Input"
try:
  user_num = int(input(prompt_text))
except ValueError:
  print("Error")

if str(user_num).isnumeric():
  for i in range(1,10):
    print(i, " times ", user_num, " is ", i*user_num)

  even = ((user_num % 2) == 0)

  if even:
    print(user_num, " is even")
  else:
    print(user_num, " is odd")
else:
  print("You did not enter a number")
</code></pre>
</div>
<span class="comment-copy">add something like <code>quit()</code> to your <code>except ValueError</code>. right now your program doesn't stop execution on error.</span>
<span class="comment-copy">Not entirely on point but you might want to consider using <code>raw_input()</code> and handling the validation parsing of the supplied value once you've got a string - <a href="https://docs.python.org/2/library/functions.html#raw_input" rel="nofollow noreferrer">docs.python.org/2/library/functions.html#raw_input</a>, <code>input()</code> does an <code>eval</code> of the supplied input, effectively "turning it into code". This is unsafe.</span>
<span class="comment-copy">@Will The OP might be using Python3.</span>
<span class="comment-copy">Ahh, yes, great point :)</span>
<span class="comment-copy">Generally it's nice to give a more informative error message, and to allow the user another chance to enter correct input. See <a href="http://stackoverflow.com/questions/23294658/asking-the-user-for-input-until-they-give-a-valid-response">Asking the user for input until they give a valid response</a> for some excellent examples.</span>
<span class="comment-copy">I wouldn't think that it would be a good idea to again check in an <code>if</code> condition. The other answers have shown the better way AFAIK. It is easier and cleaner to put everything in the <code>try</code> block.</span>
