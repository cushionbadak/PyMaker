<div class="post-text" itemprop="text">
<p>If I do the following:</p>
<pre><code>import subprocess
from cStringIO import StringIO
subprocess.Popen(['grep','f'],stdout=subprocess.PIPE,stdin=StringIO('one\ntwo\nthree\nfour\nfive\nsix\n')).communicate()[0]
</code></pre>
<p>I get:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
  File "/build/toolchain/mac32/python-2.4.3/lib/python2.4/subprocess.py", line 533, in __init__
    (p2cread, p2cwrite,
  File "/build/toolchain/mac32/python-2.4.3/lib/python2.4/subprocess.py", line 830, in _get_handles
    p2cread = stdin.fileno()
AttributeError: 'cStringIO.StringI' object has no attribute 'fileno'
</code></pre>
<p>Apparently a cStringIO.StringIO object doesn't quack close enough to a file duck to suit subprocess.Popen.  How do I work around this?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/subprocess.html?highlight=subprocess#subprocess.Popen.communicate" rel="noreferrer"><code>Popen.communicate()</code></a> documentation:</p>
<blockquote>
<p>Note that if you want to send data to
  the processâ€™s stdin, you need to
  create the Popen object with
  stdin=PIPE. Similarly, to get anything
  other than None in the result tuple,
  you need to give stdout=PIPE and/or
  stderr=PIPE too.</p>
<p><strong>Replacing os.popen*</strong></p>
</blockquote>
<pre><code>    pipe = os.popen(cmd, 'w', bufsize)
    # ==&gt;
    pipe = Popen(cmd, shell=True, bufsize=bufsize, stdin=PIPE).stdin
</code></pre>
<blockquote>
<p><strong>Warning</strong> Use communicate() rather than
  stdin.write(), stdout.read() or
  stderr.read() to avoid deadlocks due
  to any of the other OS pipe buffers
  filling up and blocking the child
  process.</p>
</blockquote>
<p>So your example could be written as follows:</p>
<pre><code>from subprocess import Popen, PIPE, STDOUT

p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)    
grep_stdout = p.communicate(input=b'one\ntwo\nthree\nfour\nfive\nsix\n')[0]
print(grep_stdout.decode())
# -&gt; four
# -&gt; five
# -&gt;
</code></pre>
<hr/>
<p>On the current Python 3 version, you could use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="noreferrer"><code>subprocess.run</code></a>, to pass input as a string to an external command and get its exit status, and its output as a string back in one call:</p>
<pre><code>#!/usr/bin/env python3
from subprocess import run, PIPE

p = run(['grep', 'f'], stdout=PIPE,
        input='one\ntwo\nthree\nfour\nfive\nsix\n', encoding='ascii')
print(p.returncode)
# -&gt; 0
print(p.stdout)
# -&gt; four
# -&gt; five
# -&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I figured out this workaround:</p>
<pre><code>&gt;&gt;&gt; p = subprocess.Popen(['grep','f'],stdout=subprocess.PIPE,stdin=subprocess.PIPE)
&gt;&gt;&gt; p.stdin.write(b'one\ntwo\nthree\nfour\nfive\nsix\n') #expects a bytes type object
&gt;&gt;&gt; p.communicate()[0]
'four\nfive\n'
&gt;&gt;&gt; p.stdin.close()
</code></pre>
<p>Is there a better one?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm a bit surprised nobody suggested creating a pipe, which is in my opinion the far simplest way to pass a string to stdin of a subprocess:</p>
<pre><code>read, write = os.pipe()
os.write(write, "stdin input here")
os.close(write)

subprocess.check_call(['your-command'], stdin=read)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's a beatiful solution if you're using Python 3.4 or better. Use the <code>input</code> argument instead of the <code>stdin</code> argument, which accepts a bytes argument:</p>
<pre><code>output = subprocess.check_output(
    ["sed", "s/foo/bar/"],
    input=b"foo",
)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am using python3 and found out that you need to encode your string before you can pass it into stdin:</p>
<pre><code>p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=PIPE)
out, err = p.communicate(input='one\ntwo\nthree\nfour\nfive\nsix\n'.encode())
print(out)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>"Apparently a cStringIO.StringIO object doesn't quack close enough to a file duck to suit subprocess.Popen"</p>
<p>:-)</p>
<p>I'm afraid not.  The pipe is a low-level OS concept, so it absolutely requires a file object that is represented by an OS-level file descriptor.  Your workaround is the right one.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from subprocess import Popen, PIPE
from tempfile import SpooledTemporaryFile as tempfile
f = tempfile()
f.write('one\ntwo\nthree\nfour\nfive\nsix\n')
f.seek(0)
print Popen(['/bin/grep','f'],stdout=PIPE,stdin=f).stdout.read()
f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>"""
Ex: Dialog (2-way) with a Popen()
"""

p = subprocess.Popen('Your Command Here',
                 stdout=subprocess.PIPE,
                 stderr=subprocess.STDOUT,
                 stdin=PIPE,
                 shell=True,
                 bufsize=0)
p.stdin.write('START\n')
out = p.stdout.readline()
while out:
  line = out
  line = line.rstrip("\n")

  if "WHATEVER1" in line:
      pr = 1
      p.stdin.write('DO 1\n')
      out = p.stdout.readline()
      continue

  if "WHATEVER2" in line:
      pr = 2
      p.stdin.write('DO 2\n')
      out = p.stdout.readline()
      continue
"""
..........
"""

out = p.stdout.readline()

p.wait()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Beware that <code>Popen.communicate(input=s)</code>may give you trouble if<code>s</code>is too big, because apparently the parent process will buffer it <em>before</em> forking the child subprocess, meaning it needs "twice as much" used memory at that point (at least according to the "under the hood" explanation and linked documentation found <a href="https://stackoverflow.com/a/13329386/2426246">here</a>). In my particular case,<code>s</code>was a generator that was first fully expanded and only then written to<code>stdin</code> so the parent process was huge right before the child was spawned, 
and no memory was left to fork it:</p>
<p><code>File "/opt/local/stow/python-2.7.2/lib/python2.7/subprocess.py", line 1130, in _execute_child
    self.pid = os.fork()
OSError: [Errno 12] Cannot allocate memory</code></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)    
p.stdin.write('one\n')
time.sleep(0.5)
p.stdin.write('two\n')
time.sleep(0.5)
p.stdin.write('three\n')
time.sleep(0.5)
testresult = p.communicate()[0]
time.sleep(0.5)
print(testresult)
</code></pre>
</div>
<span class="comment-copy">Instead of disputing my answer with this being deleted, I'm adding it as a comment... Recommended reading: <a href="http://www.doughellmann.com/PyMOTW/subprocess/" rel="nofollow noreferrer">Doug Hellmann's Python Module of the Week blog post on subprocess</a>.</span>
<span class="comment-copy">the blog post contains multiple errors e.g., <a href="http://www.doughellmann.com/PyMOTW/subprocess/" rel="nofollow noreferrer">the very first code example: <code>call(['ls', '-1'], shell=True)</code></a>  is incorrect. I recommend to read <a href="http://stackoverflow.com/tags/subprocess/info">common questions from subprocess' tag description</a> instead. In particular, <a href="http://stackoverflow.com/q/2400878/4279">Why subprocess.Popen doesn't work when args is sequence?</a> explains why <code>call(['ls', '-1'], shell=True)</code> is wrong. I remember leaving comments under  the blog post but I don't see them now for some reason.</span>
<span class="comment-copy">I missed that warning.  I'm glad I asked (even though I thought I had the answer).</span>
<span class="comment-copy">This is NOT a good solution. In particular, you cannot asynchronously process p.stdout.readline output if you do this since you'd have to wait for the entire stdout to arrive. It's is also memory-inefficient.</span>
<span class="comment-copy">@OTZ What's a better solution?</span>
<span class="comment-copy">@Nick T: "<i>better</i>" depends on context. Newton's laws are good for the domain they are applicable but you need special relativity to design GPS. See <a href="http://stackoverflow.com/q/375427">Non-blocking read on a subprocess.PIPE in python</a>.</span>
<span class="comment-copy">But note the NOTE for <a href="http://docs.python.org/2/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow noreferrer">communicate</a>: "do not use this method if the data size is large or unlimited"</span>
<span class="comment-copy">That's not a workaround - that's the correct way to do it!</span>
<span class="comment-copy">@Moe: <code>stdin.write()</code> usage is discouraged, <code>p.communicate()</code> should be used. See my answer.</span>
<span class="comment-copy">Per the subprocess documentation: Warning - Use communicate() rather than .stdin.write, .stdout.read or .stderr.read to avoid deadlocks due to any of the other OS pipe buffers filling up and blocking the child process.</span>
<span class="comment-copy">I think this is good way to do it if you're confident that your stdout/err won't ever fill up (for instance, it's going to a file, or another thread is eating it) and you have an unbounded amount of data to be sent to stdin.</span>
<span class="comment-copy">In particular, doing it this way still ensures that stdin is closed, so that if the subprocesses is one that consumes input forever, the <code>communicate</code> will close the pipe and allow the process to end gracefully.</span>
<span class="comment-copy">The <code>os</code> and the <code>subprocess</code> documentation both agree that you should prefer the latter over the former.  This is a legacy solution which has a (slightly less concise) standard replacement; the accepted answer quotes the pertinent documentation.</span>
<span class="comment-copy">I'm not sure that's correct, tripleee. The quoted documentation says why it is hard to use the pipes created by the process, but in this solution it creates a pipe and passes it in. I believe it avoids the potential deadlock problems of managing the pipes after the process has already started.</span>
<span class="comment-copy">os.popen is deprecated in favour of subprocess</span>
<span class="comment-copy">-1: it leads to the deadlock, it may loose data. This functionality is already provided by the subprocess module. Use it instead of reimplementing it poorly (try to write a value that is larger than an OS pipe buffer)</span>
<span class="comment-copy">does not work for <code>call</code></span>
<span class="comment-copy">@vidstige You're right, that's weird. I would consider filing this as an Python bug, I don't see any good reason in why <code>check_output</code> should have an <code>input</code> argument, but not <code>call</code>.</span>
<span class="comment-copy">This is the best answer for Python 3.4+ (using it in Python 3.6).  It indeed does not work with <code>check_call</code> but it works for <code>run</code>. It also works with input=string as long as you pass an encoding argument too according to the documentation.</span>
<span class="comment-copy">You don't specifically need to encode the input, it just wants a bytes-like object (e.g. <code>b'something'</code>). It will return err and out as bytes also. If you want to avoid this, you can pass <code>universal_newlines=True</code> to <code>Popen</code>. Then it will accept input as str and will return err/out as str also.</span>
<span class="comment-copy">But beware, <code>universal_newlines=True</code> will also convert your newlines to match your system</span>
<span class="comment-copy">If you're using Python 3, see <a href="http://stackoverflow.com/a/41036665/247696">my answer</a> for an even more convenient solution.</span>
<span class="comment-copy">fyi, tempfile.SpooledTemporaryFile.__doc__ says:  Temporary file wrapper, specialized to switch from     StringIO to a real file when it exceeds a certain size or     when a fileno is needed.</span>
<span class="comment-copy">Because <code>shell=True</code> is so commonly used for no good reason, and this is a popular question, let me point out that there are a lot of situations where <code>Popen(['cmd', 'with', 'args'])</code> is decidedly better than <code>Popen('cmd with args', shell=True)</code> and having the shell break the command and arguments into tokens, but not otherwise providing anything useful, while adding a significant amount of complexity and thus also attack surface.</span>
