<div class="post-text" itemprop="text">
<p>Is there anyway to pickup on a previous session when starting a python program?</p>
<p>I've set session as a global variable so that it can be accessed across any method that needs it. However, I'm guessing when I start the program again the session variable is reset. </p>
<p>Is there a way to come back to a previous session when starting the program?</p>
<pre><code>session = requests.Session()

def auth():
    session = self.session
    url = 'this url has auth'
    session.post(url, data=data)
    # Now authentcated so lets grab the data
    call_data(sessions)

def call_data(session)
    url = 'this url has the data'
    session.post(url, data=data)

def check_data()
    url = 'this url does a specific call on data elements'
    self.session.post(url, data=data)
</code></pre>
<p>When I load up my program a second time I will only want to use check_data method, I'd prefer to not require an auth every time I start the program, or perhaps I'm just curious to see if it can be done ;)</p>
<p><strong>EDIT</strong> 
I've updated my solution with the accepted answer.</p>
<pre><code>def auth():
    session = self.session
    session.cookies = LWPCookieJar("cookies.txt")

    url = 'this url has auth'
    session.post(url, data=data)
    # Now authentcated so lets grab the data
    call_data(sessions)

    session.cookies.save() #Save auth cookie

def some_other_method():
    if not cookie:
        session.cookies.load()

    # do stuff now that we're authed
</code></pre>
<p>Code obviously don't show proper accessor for other methods, but the idea works fine. 
Would be interested to know if this is the only way to remain authed. </p>
</div>
<div class="post-text" itemprop="text">
<p>The sessions are tracked in http via cookies. You can save them between program restart by storing in a <a href="https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.LWPCookieJar" rel="nofollow"><code>http.cookiejar.LWPCookieJar</code></a></p>
<p>At the beginning of your program you have to set the <code>cookieJar</code> to this <a href="https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.FileCookieJar" rel="nofollow"><code>FileCookieJar</code></a> and load the existing cookies if any </p>
<pre><code>import requests
from http.cookiejar import LWPCookieJar
session = requests.Session()
session.cookies = LWPCookieJar("storage.jar")
session.cookies.load()
</code></pre>
<p>before closing your program you have to to save them to the file</p>
<pre><code>session.cookies.save()
</code></pre>
<p>Note that by default it has the same behavior than browser that it <strong>doesn't save</strong> session cookies which are not set to persistent to your browser across restart if you want a different behavior, just precise it to <a href="https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.FileCookieJar.save" rel="nofollow"><code>save()</code></a> method by setting <code>ignore_discard</code> argument to <code>False</code> like this</p>
<pre><code>session.cookies.save(ignore_discard=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not clear what kind of session you try to establish. Django? Flask? Something different?
Be aware also that there seems to be a misspelling of call_data(sessions) where only session (without s) is defined.</p>
</div>
<span class="comment-copy">Nice response- that explains it well. I believe this is what I was inadvertently doing when I was using curl instead of requests, as I have a cookies.txt file saved when I auth. This same file would be accessed to auth the next call even if the program was closed. I will try this in the morning and more than likely accept this answer.</span>
<span class="comment-copy">The code listed is quite literally the session I use, I'm not sure on what Django or Flask is in regard to sessions specifically. Also, nice find, however, I wrote this as a bit of a skeleton of my actual code so the spelling mistake you have pointed out is not present in the real thing :)</span>
