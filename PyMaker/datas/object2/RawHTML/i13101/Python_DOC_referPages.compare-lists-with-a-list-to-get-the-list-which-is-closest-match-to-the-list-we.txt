<div class="post-text" itemprop="text">
<p>I have a list <code>a = ["c","o","m","p","a","r","e"]</code>. I have two lists </p>
<p><code>b = ["c","l","o","m","p","a","r","e"]</code> and <code>c=["c","o","m","p","a","e","r"]</code></p>
<p>now i want to compare list 'b' and 'c' with 'a' to see whether the order of elements of 'b' are closer to 'a' or  order of elements of 'c' are closer to and return the list. What I would like to achieve is list 'b' is to be returned when comparing 'b' and 'c' with 'a'. Is there a function to do that?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher" rel="nofollow"><code>difflib.SequenceMatcher</code></a> will find</p>
<blockquote>
<p>the longest contiguous matching subsequence
  that contains no "junk" elements</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher.ratio" rel="nofollow"><code>SequenceMatcher.ratio</code></a> returns the measure of the sequences' similarity. It's a float in the range <em>[0, 1]</em>. Higher ratio indicates higher similarity (the ratio is 1 if given sequences are identical).</p>
<p>The below helper function uses the <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow"><code>max</code></a> function to compare the first argument to the rest of positional arguments:</p>
<pre><code>def closest(seq, *args):
    # Cache information about `seq`.
    # We only really need to change one sequence.
    sm = SequenceMatcher(b=seq)
    def _ratio(x):
        sm.set_seq1(x)
        return sm.ratio()
    return max(args, key=_ratio)
</code></pre>
<p>Example:</p>
<pre><code>In [37]: closest(
   ....:     ['c', 'o', 'm', 'p', 'a', 'r', 'e'], # a
   ....:     ['c', 'l', 'o', 'm', 'p', 'a', 'r', 'e'], # b
   ....:     ['c', 'o', 'm', 'p', 'a', 'e', 'r'] # c
   ....: )
Out[37]: ['c', 'l', 'o', 'm', 'p', 'a', 'r', 'e'] # b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The traditional way of solving this problem is by using <a href="https://en.wikipedia.org/wiki/Levenshtein_distance" rel="nofollow">Levenshtein distance</a>. This basically tallies up all of the additions, deletions and insertions required to move from one string to another.</p>
<p>You can think of each of those operations as "breaking" the pattern of <code>a</code> just a bit.</p>
<p>It's a pretty simple function to implement, but there's a package that has already done it for you <a href="https://pypi.python.org/pypi/python-Levenshtein/0.12.0" rel="nofollow">here</a>. Sample code is below:</p>
<pre><code>&gt;&gt;&gt; from Levenshtein import distance
&gt;&gt;&gt; distance("compare", "clompare")
1
&gt;&gt;&gt; distance("compare", "compaer")
2
</code></pre>
</div>
<span class="comment-copy">How do you define <code>closer</code>?</span>
<span class="comment-copy">@AhsanulHaque its the pattern of elements. I want to check if pattern of elements of a is repeated in b. Even if its partial matching say only pattern of first 3 elements that is enough.</span>
<span class="comment-copy">what if when two lists get similar ratio when comparing those two</span>
<span class="comment-copy">@Harwee then the <code>max</code> function will return the first list.</span>
<span class="comment-copy">This looks great, I will give it a try to see if it works for me</span>
<span class="comment-copy">@Harwee glad to hear that! If not, it looks like <code>vaultah</code>'s solution is also valid for a different definition of similarity.</span>
