<div class="post-text" itemprop="text">
<p>I have just moved on to python3 as a result of its concurrent futures module. I was wondering if I could get it to detect errors. I want to use concurrent futures to parallel program, if there are more efficent modules please let me know. </p>
<p>I do not like multiprocessing as it is too complicated and not much documentation is out. It would be great however if someone could write a Hello World without classes only functions using multiprocessing to parallel compute so that it is easy to understand.</p>
<p>Here is a simple script:</p>
<pre><code>from concurrent.futures import ThreadPoolExecutor

def pri():
    print("Hello World!!!")

def start():
    try:
        while True:
            pri()
    except KeyBoardInterrupt:
        print("YOU PRESSED CTRL+C")


with ThreadPoolExecutor(max_workers=3) as exe:
    exe.submit(start)
</code></pre>
<p>The above code was just a demo, of how CTRL+C will not work to print the satement. </p>
<p>What I want is to be able to call a function is an error is present. This error detection must be from the function itself.</p>
<p>Another example</p>
<pre><code>import socket
from concurrent.futures import ThreadPoolExecutor 
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
def con():
    try:
        s.connect((x,y))
        main()
    except: socket.gaierror
         err()
def err():
    time.sleep(1)
    con()
def main():
    s.send("[+] Hello")
with ThreadPoolExecutor as exe:
    exe.submit(con)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/questions/29177490/how-do-you-kill-futures-once-they-have-started">Here</a>'s a solution. I'm not sure you like it, but I can't think of any other. I've modified your code to make it work.</p>
<pre><code>from concurrent.futures import ThreadPoolExecutor
import time

quit = False

def pri():
    print("Hello World!!!")

def start():
    while quit is not True:
        time.sleep(1)
        pri()

try:
    pool = ThreadPoolExecutor(max_workers=3)
    pool.submit(start)

    while quit is not True:
        print("hei")
        time.sleep(1)
except KeyboardInterrupt:
    quit = True
</code></pre>
<p>Here are the points:</p>
<ol>
<li><p>When you use <code>with ThreadPoolExecutor(max_workers=3) as exe</code>, it waits until all tasks have been done. Have a look at <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.shutdown" rel="nofollow noreferrer">Doc</a></p>
<blockquote>
<p>If <code>wait</code> is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed. If wait is <code>False</code> then this method will return immediately and the resources associated with the executor will be freed when all pending futures are done executing. Regardless of the value of wait, the entire Python program will not exit until all pending futures are done executing.</p>
<p>You can avoid having to call this method explicitly if you use the <code>with</code> statement, which will shutdown the <code>Executor</code> (waiting as if <code>Executor.shutdown()</code> were called with wait set to <code>True</code>)</p>
</blockquote>
<p>It's like calling <code>join()</code> on a thread.<br/>
That's why I replaced it with:  </p>
<pre><code>pool = ThreadPoolExecutor(max_workers=3)
pool.submit(start)
</code></pre></li>
<li><p>Main thread must be doing "work" to be able to catch a Ctrl+C. So you can't just leave main thread there and exit, the simplest way is to run an infinite loop</p></li>
<li><p>Now that you have a loop running in main thread, when you hit <code>CTRL+C</code>, program will enter the <code>except KeyboardInterrupt</code> block and set <code>quit=True</code>. Then your worker thread can exit.</p></li>
</ol>
<p>Strictly speaking, this is only a workaround. It seems to me it's impossible to have another way for this.</p>
<p><strong>Edit</strong><br/>
I'm not sure what's bothering you, but you can catch exception in another thread without problem:</p>
<pre><code>import socket
import time
from concurrent.futures import ThreadPoolExecutor 
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)

def con():
    try:
        raise socket.gaierror
        main()
    except socket.gaierror:
        print("gaierror occurred")
        err()

def err():
    print("err invoked")
    time.sleep(1)
    con()

def main():
    s.send("[+] Hello")

with ThreadPoolExecutor(3) as exe:
    exe.submit(con)
</code></pre>
<p>Output</p>
<pre><code>gaierror occurred
err invoked
gaierror occurred
err invoked
gaierror occurred
err invoked
gaierror occurred
...
</code></pre>
</div>
<span class="comment-copy">So you want to catch <code>KeyBoardInterrupt</code>? Is this what you're asking?</span>
<span class="comment-copy">So what is your question?</span>
<span class="comment-copy">You want to be able to print "YOU PRESSED CTRL+C"?</span>
<span class="comment-copy">Let us <a href="http://chat.stackoverflow.com/rooms/93898/discussion-between-isitha-subasinghe-and-laike9m">continue this discussion in chat</a>.</span>
<span class="comment-copy">related: <a href="https://stackoverflow.com/questions/35711160/detect-failed-tasks-in-concurrent-futures" title="detect failed tasks in concurrent futures">stackoverflow.com/questions/35711160/â€¦</a></span>
<span class="comment-copy">Nah unfortunately, this is not what i neede. I need to catch exceptions from the function itself. But this deserves an upvote. Could python2.7 solve my problem?</span>
<span class="comment-copy">"catch exceptions" != "catch ctrl+c". If you want to catch keyboard interrupt, I'm afraid this is the only way.</span>
<span class="comment-copy">I want to catch a socket gai error</span>
<span class="comment-copy">@IsithaSubasinghe Then just catch it.</span>
<span class="comment-copy">I want to catch it so that it can it can try again so                                            con()                                                                                                                try: s.connect((x,y)) with except: main() .                                                          def main():                                                                                                              print "error", time.sleep(1), con()..............Sorry about the bad formatting, I'll make a new question if you want me to</span>
