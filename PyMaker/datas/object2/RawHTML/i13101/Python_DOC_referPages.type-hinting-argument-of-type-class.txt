<div class="post-text" itemprop="text">
<p>I'm defining a method</p>
<pre><code>def foo_my_class(my_class: ???, bar: str) -&gt; None:
    """ Operate on my_class """
</code></pre>
<p>I wonder, how can I use type hinting feature to specify that class should be passed in the first argument.</p>
<p>Basically, what should I put instead of ??? mark up there? Thanks.</p>
<p>UPD: Here is some more code to be more specific on what I am trying to achieve.</p>
<pre><code>class Base(object):
   """base class"""

class X(Base):
    """some class"""

class Y(Base):
    """some other class"""   

foo_my_class(X, "foo")    
foo_my_class(Y, "bar")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You just use the class itself.</p>
<pre><code>def foo_my_class(my_class: MyClass, bar: str) -&gt; None:
</code></pre>
<p>From <a href="https://www.python.org/dev/peps/pep-0484/#acceptable-type-hints" rel="nofollow">the PEP</a> (emphasis mine):</p>
<blockquote>
<p>Type hints may be built-in classes (including those defined in standard library or third-party extension modules), abstract base classes, types available in the <code>types</code> module, and <strong>user-defined classes</strong> (including those defined in the standard library or third-party modules).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I could be wrong, as I haven't been getting down and dirty in Python 3.5 as yet, but looking at the <a href="https://docs.python.org/3/library/typing.html" rel="nofollow">documentation</a> you should be able to do it with <code>typing.Optional</code>. A brief example.</p>
<pre><code>&gt;&gt;&gt; from typing import Optional
&gt;&gt;&gt; 
&gt;&gt;&gt; class MyClass(object):
&gt;&gt;&gt;     def __init__(self):
&gt;&gt;&gt;         self.a = 1
&gt;&gt;&gt; 
&gt;&gt;&gt; O = Optional[MyClass]
&gt;&gt;&gt; 
&gt;&gt;&gt; def test(x: O) -&gt; int:
&gt;&gt;&gt;     return x.a
&gt;&gt;&gt; 
&gt;&gt;&gt; myclass = MyClass()
&gt;&gt;&gt; print test(myclass)
1
</code></pre>
<p>Hope that helps.</p>
</div>
<span class="comment-copy">I've updated my question. It seems your solution works if I my_class argument is filled is one of the Base subclasses. That's ok in my case. However, if I need to make my_class to accept any class, I need to use <code>type</code> type (my_class: type, ...)</span>
