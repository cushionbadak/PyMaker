<div class="post-text" itemprop="text">
<p>When I'm reading <a href="https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange" rel="nofollow">xrange reference</a>, it says like this..</p>
<blockquote>
<p>Objects of type xrange are similar to buffers in that there is no specific syntax to create them, but they are created using the xrange() function. They donâ€™t support slicing, concatenation or repetition, and using in, not in, min() or max() on them is inefficient.</p>
</blockquote>
<p>However, as long as I have ever seen, all the xrange() that I have used is with in. Like <code>for x in xrange(10): do somethings</code>..</p>
<p>So why it says this way is inefficient? So what is supposed to be the right way to use xrange?</p>
</div>
<div class="post-text" itemprop="text">
<p>Quoting <a href="https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Use_xrange_instead_of_range" rel="nofollow"><em>Perfomance Tips</em></a>:</p>
<blockquote>
<p><code>xrange</code> is a generator object, basically equivalent to the following
  Python 2.3 code:</p>
<pre><code>def xrange(start, stop=None, step=1):
    if stop is None:
        stop = start
        start = 0
    else:
        stop = int(stop)
    start = int(start)
    step = int(step)

    while start &lt; stop:
        yield start
        start += step
</code></pre>
<p>Except that it is implemented in pure C.</p>
</blockquote>
<p>They say that <code>in</code> is inefficient on <code>xrange</code> objects because <code>in</code> tries to iterate over object if the <a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" rel="nofollow"><code>__contains__</code></a> approach failed. From <a href="https://docs.python.org/3/reference/expressions.html#membership-test-details" rel="nofollow"><em>Membership test details</em></a>:</p>
<blockquote>
<p>For classes which do not define <code>__contains__()</code> but do define
  <code>__iter__()</code>, <code>x in y</code> is true if some value <code>z</code> with <code>x == z</code> is
  produced while iterating over <code>y</code>.</p>
</blockquote>
<p><code>xrange</code> does not implement <code>__contains__</code> and in order to "find" element N in <code>xrange(N + 1)</code> <code>in</code> operator has to perform N iterations so</p>
<pre><code>N in xrange(N + 1)
</code></pre>
<p>is logically equivalent to</p>
<pre><code>for n in xrange(N + 1):
    if n == N:
        break
</code></pre>
<p>and it's not efficient.</p>
<p><code>not in</code> is inefficient because <code>in</code> is inefficient.</p>
<p>Note that performance of <code>in</code> operator <em>for containment tests</em> doesn't affect the performance of the <code>for</code> loop. These are 2 different things.</p>
<p>In fact, the <code>"in"</code> in the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow">grammar rule for the <code>for</code> loop</a> (shown below)</p>
<pre><code>for_stmt ::=  "for" target_list "in" expression_list ":" suite
              ["else" ":" suite]
</code></pre>
<p>is fixed and is not an operator.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, what they've actually meant is</p>
<pre><code>&gt;&gt;&gt; 5 in xrange(0, 10)
True
</code></pre>
<p>which is a test for "contains". It is inefficient since it has to travel through all elements in the worst case.</p>
<p>It is not about <code>for</code> loop which is correct and efficient. I suppose that the doc is a bit misleading.</p>
</div>
<span class="comment-copy"><b><code>for</code></b> <code>x in xrange(10):</code> (iterating over) is not quite the same as <b><code>if</code></b> <code>x in xrange(10):</code> (membership testing)...</span>
<span class="comment-copy">It does not say that way is inefficient. It says several methods were not implemented on the internal object instantiated by <code>xrange</code> for various performance reasons, and that others may work but should not be preferred.</span>
<span class="comment-copy">The documentation is not misleading unless you're doing something like mixing up the performance of <code>in</code> within a loop as opposed to a <code>__contains__</code> test, like OP is apparently doing. These points of confusion are adequately addressed by other sections of the documentation. Someone who understands all the terms in the sentence properly would have no problem figuring out what it meant.</span>
<span class="comment-copy">@Two-BitAlchemist <code>The documentation is not misleading</code> False. There is at least one person confused by it. I know that you would like all people to understand everything but then again SO would lose its purpose, wouldn't it?</span>
