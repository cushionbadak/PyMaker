<div class="post-text" itemprop="text">
<p>We had our customer details spread over 4 legacy systems and have subsequently migrated all the data into 1 new system. </p>
<p>Our customers previously had different account numbers in each system and I need to check which account number has been used in the new system, which supports API calls.</p>
<p>I have a text file containing all the possible account numbers, structured like this:</p>
<pre><code>30000001, 30000002, 30000003, 30000004
30010000, 30110000, 30120000, 30130000
34000000, 33000000, 32000000, 31000000
</code></pre>
<p>Where each row represents all the old account numbers for each customer. </p>
<p>I'm not sure if this is the best approach but I want to open the text file and create a nested list:</p>
<pre><code>[['30000001', '30000002', '30000003', '30000004'], ['30010000', '30110000', '30120000', '30130000'], ['34000000', '33000000', '32000000', '31000000']]
</code></pre>
<p>Then I want to iterate over each list but to save on API calls, as soon as I have verified the new account number in a particular list, I want to break out and move onto the next list.</p>
<pre><code>import json
from urllib2 import urlopen

def read_file():
    lines = [line.rstrip('\n') for line in open('customers.txt', 'r')]
    return lines

def verify_account(*customers):
    verified_accounts = []
    for accounts in customers:
        for account in accounts:
            url = api_url + account
            response = json.load(urlopen(url))
            if response['account_status'] == 1:
                verified_accounts.append(account)
                break

    return verified_accounts
</code></pre>
<p>The main issue is when I read from the file it returns the data like below so I can't iterate over the individual accounts. </p>
<pre><code>['30000001, 30000002, 30000003, 30000004', '30010000, 30110000, 30120000, 30130000', '34000000, 33000000, 32000000, 31000000']
</code></pre>
<p>Also, is there a more Pythonic way of using list comprehensions or similar to iterate and check the account numbers. There seems to be too much nesting being used for Python?</p>
<p>The final item to mention is that there are over 255 customers to check, well there is almost 1000. Will I be able to pass more than 255 parameters into a function?</p>
</div>
<div class="post-text" itemprop="text">
<p>How about this? </p>
<pre><code>with open('customers.txt','r') as f:
    final_list=[i.split(",") for i in f.read().replace(" ","").splitlines()]

print final_list
</code></pre>
<p>Output:</p>
<pre><code>[['30000001', '30000002', '30000003', '30000004'], 
 ['30010000', '30110000', '30120000', '30130000'], 
 ['34000000', '33000000', '32000000', '31000000']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about this? Just use <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow"><code>str.split()</code></a>:</p>
<pre><code>l = []
with open('customers.txt', 'r') as f:
    for i in f:
        l.append([s.strip() for s in i.split(',')])
</code></pre>
<p>Output:</p>
<pre><code>[['30000001', '30000002', '30000003', '30000004'],
 ['30010000', '30110000', '30120000', '30130000'], 
 ['34000000', '33000000', '32000000', '31000000']]
</code></pre>
</div>
<span class="comment-copy">use csv parser.</span>
<span class="comment-copy">It's a shame that the people who built your new API couldn't give you a list of the new account numbers... FWIW, once you've gathered the new account numbers you may like to create a <code>dict</code> with the old account numbers as the keys and the new account number as the value. You could save that dict as JSON or as a pickle file.</span>
<span class="comment-copy">@PM2Ring Or use database instead :)</span>
<span class="comment-copy">You can pass upto 255 arguments to a Python function. But you don't need to worry about that here.</span>
<span class="comment-copy">That nearly works. I get this output: ['30000001', ' 30000002', ' 30000003', ' 30000004'] is there a way to remove the leading space?</span>
<span class="comment-copy">@Ron, see the updated answer</span>
<span class="comment-copy">That's much better! It'd be interesting to see if it's faster to read the entire file into RAM and replace all the spaces in one hit like that, or to read it line by line and remove the spaces word by word, as in Kevin's answer.</span>
<span class="comment-copy">Thanks - that works better, it removes the " at the start of the list</span>
<span class="comment-copy">It think its faster, but the downside is also evident, in case the file size is too large.</span>
<span class="comment-copy">split using <code>, </code> (space included)</span>
<span class="comment-copy">@hjpotter92 Thanks, edited :)</span>
<span class="comment-copy">Works perfect, thanks!</span>
<span class="comment-copy">You should edit your Output, since it doesn't have the unwanted spaces any more. FWIW, an alternative is:  <code>x.append([s.strip() for s in i.split(',')])</code>. It's slightly slower but more robust, since it copes with variable amounts of whitespace.</span>
<span class="comment-copy">@PM2Ring So good, thanks for this :)</span>
