<div class="post-text" itemprop="text">
<p>I have a list with the same values as the keys of a dictionary. I want to write a code that does something to the values of the dictionary (e.g. increases them by one) as many times as their key appears in the list.</p>
<p>So e.g. </p>
<pre><code>listy=['dgdg','thth','zuh','zuh','thth','dgdg']
dicty = {'dgdg':1, 'thth':2, 'zuh':5}
</code></pre>
<p>I tried this code:</p>
<pre><code>def functy (listx,dictx):
    for i in range (0, len(listx)):
        for k,v in dictx:
            if listx[i]==k:
                v=v+1
            else:
                pass
functy(listy, dicty)
</code></pre>
<p>But it raises this error:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Python34\8.py", line 12, in &lt;module&gt;
    functy(listy, dicty)
  File "C:\Python34\8.py", line 6, in functy
    for k,v in dictx:
ValueError: too many values to unpack (expected 2)
</code></pre>
<p>Could you tell me why it doesn't work and how I can make it?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>dict.__iter__</code> will by default refer to <code>dict.keys()</code>.</p>
<p>Because you want both the <code>key</code> and its value it should be</p>
<pre><code>for k,v in dictx.items():
</code></pre>
<p>which will yield a list of tuples:</p>
<pre><code>&gt;&gt;&gt; a={1:2,2:3,3:4}
&gt;&gt;&gt; a.items()
[(1, 2), (2, 3), (3, 4)]
</code></pre>
<p><code>iteritems</code> is also available, but yields from a  generator instead of a list:</p>
<pre><code>&gt;&gt;&gt; a.iteritems()
&lt;dictionary-itemiterator object at 0x00000000030115E8&gt;
</code></pre>
<p>However, you should take into consideration directly indexing by key, otherwise your assignment <code>v=v+1</code> will not be persisted to the dict:</p>
<pre><code>def functy (listx,dictx):
    for item in listx:
        if item in dictx:
            dictx[item]+=1

&gt;&gt;&gt; listy=['dgdg','thth','zuh','zuh','thth','dgdg']
&gt;&gt;&gt; dicty = {'dgdg':1, 'thth':2, 'zuh':5}            
&gt;&gt;&gt; print dicty
{'thth': 2, 'zuh': 5, 'dgdg': 1}
&gt;&gt;&gt; functy(listy, dicty)
&gt;&gt;&gt; print dicty
{'thth': 4, 'zuh': 7, 'dgdg': 3}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're missing the point of having a dictionary, which is that you can index it directly by key instead of iterating over it:</p>
<pre><code>def functy(listx, dictx):
    for item in listx:
        if item in dictx:
            dictx[item] += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you're trying to use a dictionary as a counter. If that's the case, why not use the built-in Python <code>Counter</code>?</p>
<pre><code>from collections import Counter
dicty = Counter({'dgdg':1, 'thth':2, 'zuh':5})
dicty += Counter(['dgdg','thth','zuh','zuh','thth','dgdg'])

# dicty is now Counter({'zuh': 7, 'thth': 4, 'dgdg': 3})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suggest you use <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a>, which is a <code>dict</code> subclass for counting hashable objects.</p>
<pre><code>&gt;&gt;&gt; import collections
&gt;&gt;&gt; count_y = collections.Counter(dicty) # convert dicty into a Counter
&gt;&gt;&gt; count_y.update(item for item in listy if item in count_y)
&gt;&gt;&gt; count_y 
Counter({'zuh': 7, 'thth': 4, 'dgdg': 3})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate a dictionary like this:</p>
<pre><code>for k in dictx:
    v = dictx[k]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>dictx.items()</code> instead of <code>dictx</code>. When trying to iterate over <code>dictx</code> you are receiving only keys.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>listy=['dgdg','thth','zuh','zuh','thth','dgdg']
dicty = {'dgdg':1, 'thth':2, 'zuh':5}

# items() missed and also dicty not updated in the original script
def functy (listx,dictx):
    for i in range (0, len(listx)):
        for k,v in dictx.items():
            if listx[i]==k:
                dictx[k] += 1
            else:
                pass
functy(listy, dicty)

print(dicty)

{'dgdg': 3, 'thth': 4, 'zuh': 7}
</code></pre>
</div>
<span class="comment-copy"><code>some_count += Counter(some_iterable)</code> has the same effect as <code>some_count.update(some_iterable)</code>.</span>
<span class="comment-copy">You can see in the error code OP is using <a href="https://docs.python.org/3/whatsnew/3.0.html#views-and-iterators-instead-of-lists" rel="nofollow noreferrer">Python 3.4</a></span>
<span class="comment-copy">Ah, indeed. Thanks for that.</span>
