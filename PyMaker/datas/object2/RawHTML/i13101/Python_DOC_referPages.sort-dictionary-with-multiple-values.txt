<div class="post-text" itemprop="text">
<p>I am trying to sort a dictionary and I have looked at numerous examples but they all show very simple dictionaries. I have looked at orderedDict, itemgetter, lambda etc. but I cannot see how to sort this dictionary either by position, homepoints or awaypoints:</p>
<pre><code>{
    u'SwanseaCityFC': {
        'position': 12,
        'awayPoints': 7,
        'homePoints': 8
    },
    u'TottenhamHotspurFC': {
        'position': 6,
        'awayPoints': 11,
        'homePoints': 9
    },
    u'StokeCityFC': {
        'position': 14,
        'awayPoints': 9,
        'homePoints': 4
    },
    u'AstonVillaFC': {
        'position': 20,
        'awayPoints': 4,
        'homePoints': 1
    },
    u'ManchesterCityFC': {
        'position': 1,
        'awayPoints': 10,
        'homePoints': 12
    },
    u'AFCBournemouth': {
        'position': 17,
        'awayPoints': 5,
        'homePoints': 5
    },
    u'CrystalPalaceFC': {
        'position': 7,
        'awayPoints': 9,
        'homePoints': 6
    },
    u'NewcastleUnitedFC': {
        'position': 19,
        'awayPoints': 3,
        'homePoints': 5
    },
    u'NorwichCityFC': {
        'position': 16,
        'awayPoints': 6,
        'homePoints': 4
    },
    u'WatfordFC': {
        'position': 13,
        'awayPoints': 10,
        'homePoints': 5
    },
    u'ManchesterUnitedFC': {
        'position': 4,
        'awayPoints': 11,
        'homePoints': 11
    },
    u'LeicesterCityFC': {
        'position': 5,
        'awayPoints': 10,
        'homePoints': 10
    },
    u'ChelseaFC': {
        'position': 15,
        'awayPoints': 5,
        'homePoints': 7
    },
    u'WestHamUnitedFC': {
        'position': 3,
        'awayPoints': 14,
        'homePoints': 7
    },
    u'SunderlandAFC': {
        'position': 18,
        'awayPoints': 3,
        'homePoints': 5
    },
    u'SouthamptonFC': {
        'position': 8,
        'awayPoints': 8,
        'homePoints': 7
    },
    u'EvertonFC': {
        'position': 11,
        'awayPoints': 10,
        'homePoints': 5
    },
    u'LiverpoolFC': {
        'position': 9,
        'awayPoints': 8,
        'homePoints': 8
    },
    u'ArsenalFC': {
        'position': 2,
        'awayPoints': 13,
        'homePoints': 10
    },
    u'WestBromwichAlbionFC': {
        'position': 10,
        'awayPoints': 11,
        'homePoints': 4
    }
}
</code></pre>
<p>Any help appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>Go to the <code>collections</code> documentation and you can see the OrderedDict implementation notes <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow">https://docs.python.org/3/library/collections.html#collections.OrderedDict</a></p>
<p>There is an example like below:</p>
<pre><code>&gt;&gt;&gt; # dictionary sorted by value
&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: t[1]))
OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])
</code></pre>
<p>which you can then extend to your own usage:</p>
<pre><code>&gt;&gt;&gt; d = {'banana':{'key':3},'apple':{'key':4}, 'pear': {'key':1}, 'orange': {'key':2}}
&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: t[1]['key']))
OrderedDict([('pear', {'key': 1}), ('orange', {'key': 2}), ('banana', {'key': 3}), ('apple', {'key': 4})])
</code></pre>
</div>
<span class="comment-copy"><code>dict</code>s do not retain any sort, so you need to build a list or use an OrderedDict just to maintain the order of elements. Putting the elements into order requires a key function. I think there are some great examples here: <a href="https://wiki.python.org/moin/HowTo/Sorting" rel="nofollow noreferrer">wiki.python.org/moin/HowTo/Sorting</a></span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/9001509/how-can-i-sort-a-dictionary-by-key">This</a> does not solve your problem?!</span>
<span class="comment-copy">The Python dict data structure has no inherent order. Perhaps you should consider a dataframe (Pandas) type structure.</span>
