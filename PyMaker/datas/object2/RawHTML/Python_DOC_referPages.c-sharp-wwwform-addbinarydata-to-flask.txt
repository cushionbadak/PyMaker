<div class="post-text" itemprop="text">
<p>I want to be able to get the data sent to my Flask app.  I've tried accessing <code>request.data</code> but it is an empty string. How do you access request data?</p>
<pre><code>@app.route('/', methods=['GET', 'POST'])
def parse_request():
    data = request.data  # data is empty
    # need posted data here
</code></pre>
<hr/>
<p>The answer to this question led me to ask <a href="https://stackoverflow.com/q/10999990">Get raw POST body in Python Flask regardless of Content-Type header</a> next, which is about getting the raw data rather than the parsed data.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://flask.pocoo.org/docs/api/#flask.Request" rel="noreferrer">docs</a> describe the attributes available on the request.  In most common cases <code>request.data</code> will be empty because it's used as a fallback:</p>
<blockquote>
<p><code>request.data</code> Contains the incoming request data as string in case it came with a mimetype Flask does not handle.</p>
</blockquote>
<ul>
<li><code>request.args</code>: the key/value pairs in the URL query string</li>
<li><code>request.form</code>: the key/value pairs in the body, from a HTML post form, or JavaScript request that isn't JSON encoded</li>
<li><code>request.files</code>: the files in the body, which Flask keeps separate from <code>form</code>. HTML forms must use <code>enctype=multipart/form-data</code> or files will not be uploaded.</li>
<li><code>request.values</code>: combined <code>args</code> and <code>form</code>, preferring <code>args</code> if keys overlap</li>
</ul>
<p>All of these are <a href="http://werkzeug.pocoo.org/docs/datastructures/#werkzeug.datastructures.MultiDict" rel="noreferrer"><code>MultiDict</code></a> instances. You can access values using:</p>
<ul>
<li><code>request.form['name']</code>: use indexing if you know the key exists</li>
<li><code>request.form.get('name')</code>: use <code>get</code> if the key might not exist</li>
<li><code>request.form.getlist('name')</code>: use <code>getlist</code> if the key is sent multiple times and you want a list of values. <code>get</code> only returns the first value.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<pre><code>from flask import request
request.data
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is simply as follows</p>
<p>For <strong>URL Query parameter</strong>, use <strong>request.args</strong></p>
<pre><code>search = request.args.get("search")
page = request.args.get("page")
</code></pre>
<p>For <strong>Form input</strong>, use <strong>request.form</strong></p>
<pre><code>email = request.form.get('email')
password = request.form.get('password')
</code></pre>
<p>For <strong>data type application/json</strong>, use <strong>request.data</strong></p>
<pre><code># data in string format and you have to parse into dictionary
data = request.data
dataDict = json.loads(data)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I give a full example of <strong>application/json</strong>:</p>
<pre><code>from flask import Flask, abort, request 
import json

app = Flask(__name__)


@app.route('/foo', methods=['POST']) 
def foo():
    if not request.json:
        abort(400)
    print request.json
    return json.dumps(request.json)


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
</code></pre>
<p>use <a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en" rel="noreferrer">Postman</a> for post request:</p>
<p><a href="https://i.stack.imgur.com/2CaoI.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/2CaoI.png"/></a></p>
<p>use <strong>curl</strong> command:</p>
<pre><code>curl -i -H "Content-Type: application/json" -X POST -d '{"userId":"1", "username": "fizz bizz"}' http://localhost:5000/foo
</code></pre>
<p>P.S.
For URL Query parameter example, you can see my answer in <a href="https://stackoverflow.com/questions/15182696/multiple-parameters-in-in-flask-approute/38987737#38987737">Multiple parameters in in Flask approute</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Flask has another shortcut for JSON:</p>
<p>Header: </p>
<pre><code>{Content-Type: application/json}

@app.route("/something", methods=["POST"])
def do_something():
    data = request.get_json()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you want the raw post body regardless of the content type, you should use <code>request.get_data()</code>, because <code>request.form</code> is converted to <code>werkzeug.ImmutableMultiDict</code> format.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>@app.route('/', methods=['POST'])
def process_data():
    req_data = request.get_json(force=True) # force=True will make sure this works even if a client does not specify application/json
    language = req_data['language'] # or whatever key you have in your json

    return '''The language value is: {}'''.format(language)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply speaking, you can get data by the way below:</p>
<pre><code>@app.before_request
def before_request():
    g.data = request.get_json() or request.values
</code></pre>
<p>Now, <code>g.data</code> is an instance of <code>werkzeug.ImmutableMultiDict</code>. Then you can use <code>g.data</code> which can handle most of your requirements. For example, you can use it just like this:</p>
<pre><code>@app.route("/something", methods=["POST"])
def do_something():
    result = handle(g.data)
    return jsonify(data=result)
</code></pre>
<p>Of course, you can use <code>blueprint</code> instead of <code>app</code>~~</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>request.form</code>.</p>
<p>Instead of getting a single form data (<code>request.form["field_name"]</code>), you can obtain all posted data, by parsing the <code>ImmutableDict</code> provided by <code>request.form</code> object, like this:</p>
<p><strong>Flask (Route)</strong></p>
<pre><code>@app.route('/data', methods=['POST'])                                           
def f_data():                                                                   
    if request.method == "POST":
        fields = [k for k in request.form]                                      
        values = [request.form[k] for k in request.form]
        data = dict(zip(fields, values))
    return jsonify(data) 
</code></pre>
<p><strong>Shell</strong></p>
<pre><code>$ curl http://127.0.0.1:5000/data -d "name=ivanleoncz&amp;role=Software Developer"
{
  "name": "ivanleoncz", 
  "role": "Software Developer"
}
</code></pre>
<p>For more details, this <a href="https://gist.github.com/ivanlmj/68d5f2ad587d9bcf3a10209d119f5874" rel="noreferrer">Gist</a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>length = request.headers["Content-Length"]
data=request.stream.read()
</code></pre>
<p>Now, data is the request body</p>
</div>
<div class="post-text" itemprop="text">
<p>If the mime type is recognized, then both <code>request.data</code> and <code>request.get_data()</code> will return empty strings.</p>
<p>To get the full contents regardless, you need to call <code>request.get_data(as_text=True)</code>.</p>
<p>See <a href="http://flask.pocoo.org/docs/1.0/api/#flask.Request.get_data" rel="nofollow noreferrer">http://flask.pocoo.org/docs/1.0/api/#flask.Request.get_data</a></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>In javascript:</strong></p>
<pre><code>var value_data = [1,2,3,4];

$.ajax({
        type: 'POST',
        url: '/',
        data:JSON.stringify(value_data),
        success: function (response) {
            alert("Data added successfully");
         },    
});
</code></pre>
<p><strong>In python:</strong></p>
<pre><code>client_data = request.get_data()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is kind of a dirty hack to get all the request data regardless of how it was sent, but I seriously just use: </p>
<pre><code>def get_request_info():
    args = str(request.args)
    form = str(request.form)
    files = str(request.files)
    maybe_json = request.get_json(silent=True, cache=False)
    if maybe_json:
        thejson = json.dumps(maybe_json)
    else:
        thejson = "no json"
    return # whatever you want 
</code></pre>
<p>and then I just return either a string that concatenates these, or, if I feel fancy, I skip the string calls/json dump and merge all the dicts.  then this can be logged, returned in a view function, whatever and you can actually see the whole request no matter what it includes.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from flask import request

content = request.get_json()
name = content.get('name', '')
</code></pre>
<p>get data if request type json and you can also mention default parameters along with it</p>
<pre><code>from flask import request

content = request.form
name = content.get('name', '')
</code></pre>
<p>get data if request type form</p>
<pre><code>from flask import request

request.args.get("name", "")
</code></pre>
<p>to fetch parameters from url with a GET request</p>
</div>
<div class="post-text" itemprop="text">
<p>For those like me who have forgotten (a bit) about HTML, be sure <code>&lt;input&gt;</code> in your <code>&lt;form&gt;</code> has a <code>name=""</code> attribute!</p>
<pre><code>from flask import Flask, request

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def index():
    print("Posted data : {}".format(request.form))

    return """
&lt;form method="post"&gt;
    &lt;input type="text"&gt;
    &lt;input type="text" id="idtxt2"&gt;
    &lt;input type="text" name="txt3" id="idtxt3"&gt;  
    &lt;input type="submit" Value="Hopla!"&gt;
&lt;/form&gt;
"""

if __name__ == "__main__":
    app.run()
</code></pre>
<p>Result on console :</p>
<pre><code>freezed@machine % python3 run.py
 * Serving Flask app "flaskstuff.views" (lazy loading)
 * Environment: production
   WARNING: Do not use the development server in a production environment.
   Use a production WSGI server instead.
 * Debug mode: on
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 268-634-781
127.0.0.1 - - [20/Aug/2018 16:52:59] "POST / HTTP/1.1" 200 -
Posted data : ImmutableMultiDict([('txt3', 'text 3')])
</code></pre>
<p>No <em>name attribute</em> = <strong>no data</strong> in <code>ImmutableMultiDict([])</code> !</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from flask import Flask, request, jsonify

@app.route('/added', methods=['POST'])
def add():
    data = request.get_json(force=True)
    l = {'name': data['name']}
    lingual.append(l)

    return jsonify({'lang': lingual})
</code></pre>
</div>
<span class="comment-copy"><i>Note:</i> In order to get the payload as JSON you could use <code>request.get_json()</code>.</span>
<span class="comment-copy">Adding on to @albert's comment, <code>request.get_json(force=True)</code> can be used. From the documentation: <code>force – if set to True the mimetype is ignored.</code>, so it won't return <code>None</code> for requests that don't have <code>application/json</code> set in the <code>contentType</code> header.</span>
<span class="comment-copy">@fujianjin6471: see <a href="http://flask.pocoo.org/docs/0.12/api/#flask.Request.get_json" rel="nofollow noreferrer">docs here</a></span>
<span class="comment-copy">Also you can -or should- verify if a key exists before try to get it:  <code>if 'some_value' in request.get_json():     actualValue = request.get_json()['some_value']</code></span>
<span class="comment-copy">This must be the most annoying feature for me in Flask: I just want to get the request body, and that's all. And flask as a web server cannot do this, no, it will put it in the different place with the different format that I have to guess using a lot of <code>if</code></span>
<span class="comment-copy">For docs on this see <a href="http://flask.pocoo.org/docs/quickstart/#accessing-request-data" rel="nofollow noreferrer">flask.pocoo.org/docs/quickstart/#accessing-request-data</a> and <a href="http://flask.pocoo.org/docs/api/#incoming-request-data" rel="nofollow noreferrer">flask.pocoo.org/docs/api/#incoming-request-data</a>.</span>
<span class="comment-copy">this works if you specify the contentType (eg., 'applications/json') in the request</span>
<span class="comment-copy">@clyfish Hi I want to forward complete request object(which includes <b>request.files</b> and request.form) to third party API using http requests.post. Can you please guide me?</span>
<span class="comment-copy">Flask has a shortcut for JSON: <a href="http://flask.pocoo.org/docs/0.10/api/#flask.Request.get_json" rel="nofollow noreferrer">request.get_json()</a></span>
<span class="comment-copy">if data sent via POST you must use request.form.get('')</span>
<span class="comment-copy">update to link in @MarkE.Haase comment: <a href="http://flask.pocoo.org/docs/1.0/api/#flask.Request.get_json" rel="nofollow noreferrer">request.get_json()</a></span>
<span class="comment-copy">Why would you use <code>request.json</code> if you convert it back with <code>json.dumps()</code> anyway?</span>
<span class="comment-copy">@nyuszika7h, not for any practical application, but just for showing the result.</span>
<span class="comment-copy">Just a little note: If the /something end point is called other than json format, get_json() will fail. Do not forget handling the exceptions.</span>
<span class="comment-copy">You're right about the documenting it, I slightly updated my comments. Why is my answer different than the other ones? Simply because it gets straight to the point. I wrote only what the OP asked, and it works without any additional question.</span>
<span class="comment-copy">I love this one !</span>
<span class="comment-copy">Thanks :)! I believe that it is clear enough, with some comprehensions and dynamic, for exposing as a JSON API (depending on your necessity) or having this object for database purposes.</span>
<span class="comment-copy">This answer is fine, but please don't use built in functions as variable names, consider changing <code>len</code> to <code>length</code>.</span>
<span class="comment-copy">Thanks for your suggestion, I have changed it.</span>
<span class="comment-copy">when you get raw data using post method in flask use request.get_json(force= True)</span>
<span class="comment-copy">You should explain your code and how it solves the OP's question.</span>
