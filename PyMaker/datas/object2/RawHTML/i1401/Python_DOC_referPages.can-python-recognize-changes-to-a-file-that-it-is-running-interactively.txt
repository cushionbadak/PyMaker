<div class="post-text" itemprop="text">
<p>I was doing some trouble shooting and I was curious if it is possible to run a python script interactively, change a function defined in the script, save the file, then have the interactive shell recognize the changes. Here is an example of what I am doing currently:</p>
<p>my_script.py:</p>
<pre><code>def dummy_func():
    print('Something')
def main():
    dummy_func()
if __name__ == '__main__':
    main()
</code></pre>
<p>I go to my terminal and run:</p>
<pre><code>&gt;python -i my_script.py
Something
&gt;&gt;&gt;
</code></pre>
<p>If I go back to my_script.py in my editor and make the following change:</p>
<pre><code>def dummy_func():
    print('Something else')
</code></pre>
<p>Then go back to the terminal (which is still open) and re-run the updated function:</p>
<pre><code>&gt;&gt;&gt;dummy_func()
Something
&gt;&gt;&gt;
</code></pre>
<p>Is it possible to do something to instead get the following behavior?:</p>
<pre><code>&gt;&gt;&gt;dummy_func()
Something else
&gt;&gt;&gt;
</code></pre>
<p>I know it is possible to reload modules using importlib and reload but as far as I can tell that does not apply here since I am not importing anything. I am fairly new to stackoverflow so please let me know if I need to provide more details or ask in a different way. Thanks.  </p>
<p>Edit; I think this may be distinct from <a href="https://stackoverflow.com/questions/437589/how-do-i-unload-reload-a-python-module">How do I unload (reload) a Python module?</a>.<br/>
I am asking if there is a way to reload the current file you are running interactively through the python shell, while that question is asking about reloading a module you have imported into another python script. I edited my answer to include a reference to this question.</p>
</div>
<div class="post-text" itemprop="text">
<p>From what I can find, the short answer is:<br/>
<strong>No, normally the Python interpreter does not recognize changes to a file once that file has been parsed, analyzed, and fed into the interpreter.</strong></p>
<p>What you should do instead apparently is use your .py file as a module, import that as a module into another .py file, then run that new file. This allows your first file to be reloaded through the interactive interpreter. Here's an <a href="https://stackoverflow.com/questions/437589/how-do-i-unload-reload-a-python-module">example</a>:</p>
<pre><code>from importlib import reload  # Python 3.4+ only.
import foo

while True:
    # Do some things.
    if is_changed(foo):
        foo = reload(foo)
</code></pre>
<p>I am still a little fuzzy on the details, but maybe someone can help fill those in. As far as I can tell from the sources I linked below, the interpreter basically takes some steps to load your program from the saved python file into memory (glossing over a lot of details). Once this process has been performed, the interpreter does not perform it again unless you explicitly ask it to do so, for example by using the importlib's reload() function to again perform the process.</p>
<p>Sources:</p>
<p><a href="https://stackoverflow.com/questions/437589/how-do-i-unload-reload-a-python-module">How do I unload (reload) a Python module?</a> (quoted above)</p>
<p><a href="http://www.aosabook.org/en/500L/a-python-interpreter-written-in-python.html" rel="nofollow noreferrer">A Python Interpreter Written in Python</a>:<br/>
This link has a lot more information about how the interpreter works, and I found this section particularly helpful:</p>
<blockquote>
<p>Real Python Bytecode<br/>
  At this point, we'll abandon our toy instruction
  sets and switch to real Python bytecode. The structure of bytecode is
  similar to our toy interpreter's verbose instruction sets, except that
  it uses one byte instead of a long name to identify each instruction.
  To understand this structure, we'll walk through the bytecode of a
  short function. Consider the example below:</p>
<pre><code>&gt;&gt;&gt; def cond():  
...     x = 3  
...     if x &lt; 5:  
...         return 'yes'  
...     else:  
...         return 'no'  
...  
</code></pre>
<p>Python exposes a boatload of its internals at run time, and we can access them right
  from the REPL. For the function object cond, cond.<strong>code</strong> is the code
  object associated it, and cond.<strong>code</strong>.co_code is the bytecode.
  There's almost never a good reason to use these attributes directly
  when you're writing Python code, but they do allow us to get up to all
  sorts of mischief—and to look at the internals in order to understand
  them.</p>
<pre><code>&gt;&gt;&gt; cond.__code__.co_code  # the bytecode as raw bytes  
 b'd\x01\x00}\x00\x00|\x00\x00d\x02\x00k\x00\x00r\x16\x00d\x03\x00Sd\x04\x00Sd\x00\x00S'
&gt;&gt;&gt; list(cond.__code__.co_code)  # the bytecode as numbers  
[100, 1, 0, 125, 0, 0, 124, 0, 0, 100, 2, 0, 107, 0, 0, 114, 22, 0, 100, 3, 0, 83,
100, 4, 0, 83, 100, 0, 0, 83]  
</code></pre>
<p>When we just print the bytecode, it
  looks unintelligible—all we can tell is that it's a series of bytes.
  Luckily, there's a powerful tool we can use to understand it: the dis
  module in the Python standard library.</p>
<p>dis is a bytecode disassembler. A disassembler takes low-level code
  that is written for machines, like assembly code or bytecode, and
  prints it in a human-readable way. When we run dis.dis, it outputs an
  explanation of the bytecode it has passed.</p>
<pre><code>&gt;&gt;&gt; dis.dis(cond)   
  2           0 LOAD_CONST               1 (3)
              3 STORE_FAST               0 (x)
  3           6 LOAD_FAST                0 (x)
              9 LOAD_CONST               2 (5)
             12 COMPARE_OP               0 (&lt;)
             15 POP_JUMP_IF_FALSE       22

  4          18 LOAD_CONST               3 ('yes')
             21 RETURN_VALUE

  6     &gt;&gt;   22 LOAD_CONST               4 ('no')
             25 RETURN_VALUE
             26 LOAD_CONST               0 (None)
             29 RETURN_VALUE  
</code></pre>
<p>What does all this mean? Let's look at the first instruction LOAD_CONST as an example. The number in the
  first column (2) shows the line number in our Python source code. The
  second column is an index into the bytecode, telling us that the
  LOAD_CONST instruction appears at position zero. The third column is
  the instruction itself, mapped to its human-readable name. The fourth
  column, when present, is the argument to that instruction. The fifth
  column, when present, is a hint about what the argument means.</p>
</blockquote>
<p><a href="https://softwareengineering.stackexchange.com/questions/313254/how-does-the-python-runtime-actually-work">How does the Python Runtime actually work?</a>:  </p>
<blockquote>
<p>With Python, it uses an interpreter rather than a compiler. An
  interpreter works in exactly the same way as a compiler, with one
  difference: instead of code generation, it loads the output in-memory
  and executes it directly on your system. (The exact details of how
  this happens can vary wildly between different languages and different
  interpreters.)</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer">importlib — The implementation of import</a>:  </p>
<blockquote>
<p>When reload() is executed:</p>
<p>Python module’s code is recompiled and the module-level code
  re-executed, defining a new set of objects which are bound to names in
  the module’s dictionary by reusing the loader which originally loaded
  the module. The init function of extension modules is not called a
  second time.</p>
</blockquote>
<p>Again, please let me know if I need to edit this answer to follow etiquette.</p>
</div>
<span class="comment-copy">What are you trying to accomplish by doing so?</span>
<span class="comment-copy">Mostly I was using this for troubleshooting. Right now, if I make a change to my file I have to quit() from the python shell then re-run from the terminal. Obviously my real code is more complex, so if it would help, I can try to post a more detailed example of what I'm doing. (Don't want to post the actual code as it is fairly long). I'm aware there are different ways to approach this and accomplish the same thing, such as importing the module into another file but I was just curious if there was another way.</span>
<span class="comment-copy">Why not just like, rewrite the function inside of your interpreter for trial/error? Alternatively you can use iPython for this purpose which is what I tend to do sometimes while prototyping a function.</span>
<span class="comment-copy">I'm afraid I may not have done a good job asking my question. I think what I was really trying to say was, "Is it possible to do this in Python?" rather than "How can I solve this specific problem I'm having, given that I've tried it in this way?" The only reason I referenced my code was because that was what led me to ask the question. Having done some more research, I suspect that because of the way the Python interpreter works, it is not possible to change the behavior of a function that has already been parsed, analyzed, and fed into the interpreter.</span>
<span class="comment-copy">The fact that you want to reimport a script, not a module, is a complication, but doesn't really change the problem statement. The easy fix is to turn your script into a module.</span>
<span class="comment-copy">Since I'm a new user, I can't accept the answer immediately but I will do so ASAP.</span>
<span class="comment-copy">Your answer definitely follows etiquette! Linking to proper documentation, quoting the important bits in your answer in case the links die, summarizing the important bits. A+ answering of your own question.</span>
