<div class="post-text" itemprop="text">
<p>Take a look at this code snippet:</p>
<pre><code>class Face():
    pass

class Cube():
    def __init__(self):
        self.faces = {
                'front': Face(1),
                ...
                }

    @property
    def front(self):
        return self.faces['front']

    @front.setter
    def front(self, f):
        pass
</code></pre>
<p>I've created getters and setters for all the faces. Is there any way to make this code more compact, maybe by dynamically creating the getters and setters?</p>
</div>
<div class="post-text" itemprop="text">
<p>The following code assumes that you</p>
<ul>
<li><p>have a reason to have the <code>self.faces</code> dict instead of setting attributes like <code>front</code> directly on the instance</p></li>
<li><p>and/or want to implement some meaningful getter and setter logic for the keys in <code>self.faces</code>.</p></li>
</ul>
<p>Otherwise, this exercise is pretty pointless because as Corentin Limier noted you can simply set <code>self.front = Face(1)</code>, and so on.</p>
<hr/>
<p>You can use descriptors, a class variable holding the face names and a class decorator. Think of descriptors as reusable properties.</p>
<p>In the following sample code I added a <code>num</code> instance variable to <code>Face</code> and the face <code>'side'</code> just for demonstration purposes.</p>
<pre><code>class FaceDescriptor:
    def __get__(self, instance, owner):
        # your custom getter logic

        # dummy implementation
        if instance is not None:                
            return instance.faces[self.face]

    def __set__(self, instance, value):
        # your custom setter logic

        # dummy implementation
        instance.faces[self.face] = value

def set_faces(cls):
     for face in cls._faces:
         desc = FaceDescriptor()
         desc.face = face
         setattr(cls, face, desc)
     return cls

class Face():
    def __init__(self, num):
        self.num = num   

@set_faces
class Cube():
    _faces = ['front', 'side']

    def __init__(self):
        self.faces = {face:Face(i) for i, face in enumerate(self._faces, 1)}
</code></pre>
<p>In action:</p>
<pre><code>&gt;&gt;&gt; c = Cube()                                                                                                                                                                                         
&gt;&gt;&gt; c.front.num                                                                                                                                                                                         
1
&gt;&gt;&gt; c.side.num                                                                                                                                                                                          
2
&gt;&gt;&gt; c.front = 'stuff'                                                                                                                                                                                   
&gt;&gt;&gt; c.front                                                                                                                                                                                             
'stuff'
&gt;&gt;&gt; c.faces                                                                                                                                                                                             
{'front': 'stuff', 'side': &lt;__main__.Face at 0x7fd0978f37f0&gt;}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that's all your class does, you could do something like</p>
<pre><code>class Cube:
   ...

def __getattr__(self, name):
    return self.faces[name]

def __setattr__(self, name, value):
    self.faces[name] = value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you really want to do that you could use <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__getattr__#object.__getattr__" rel="nofollow noreferrer"><code>__getattr__</code></a> and  <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__getattr__#object.__setattr__" rel="nofollow noreferrer"><code>__setattr__</code></a>:</p>
<pre><code>class Cube:

   ...   

   def __getattr__(self, item):
        return self.faces[item]

   def __setattr__(self, item, value):
        self.faces[item] = value
</code></pre>
<p>but as you set <code>front</code> in the <code>__init__</code> methoud you could just as well make it a regular member...</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code is redundant, since instance <em>attributes</em> are already stored in a dictionary which is the <em>__dict__</em> property. I recognize that you are focused on writing your code in fewer lines. It is a good challenge to keep yourself growing, but in the long term you should be focused on the clarity of your code instead.</p>
<p>Here is a simpler way to write your code without using properties:</p>
<pre><code>class Face():
    pass

class Cube():
    def __init__(self):
        self.front = Face()
        self.rear = Face()
</code></pre>
<p>It is a tenet of encapsulation that you should hide your "attributes" behind "properties". Even though this isn't strongly enforced in python, it's not a bad idea to do that. Here's the proper way to do that:</p>
<pre><code>class Face():
    pass

class Cube():
    def __init__(self):
        self._front = Face()

    @property
    def front(self):
        return self._front

    @front.setter
    def front(self, value):
        self._front = value
</code></pre>
<p>To answer your question at the end, yes you can dynamically create properties. 
<a href="https://stackoverflow.com/a/1355444/3368572">https://stackoverflow.com/a/1355444/3368572</a></p>
<p>But keep in mind that writing dynamic code should be reserved for special cases since it will make it more difficult for your IDE to follow the flow of your program. If you use the conventions as they are intended then your code becomes self-explanatory to people and to your IDE.</p>
</div>
<span class="comment-copy">why do you put 'front' inside a dictionary instead of direct attribute of your Cube class ? No need for properties then.</span>
<span class="comment-copy">@CorentinLimier I'm assuming OP is not showing the full setter and getter logic they want for keys just in self.faces.</span>
<span class="comment-copy">Actually it would be loads easier to use this class if I could iterate over the faces. Now I see that implementing <code>__iter__</code> would've solved that problem.</span>
<span class="comment-copy">@saga that's an entirely different question than how to code dynamic properties though.</span>
<span class="comment-copy">I'm assuming OP is not showing the full setter and getter logic they want for keys just in <code>self.faces</code>.</span>
