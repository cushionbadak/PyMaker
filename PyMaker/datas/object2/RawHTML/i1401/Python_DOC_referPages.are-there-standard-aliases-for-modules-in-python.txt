<div class="post-text" itemprop="text">
<p>Following the guidelines proposed in <a href="https://softwareengineering.stackexchange.com/questions/187403/import-module-vs-from-module-import-function/187471">this post</a>, I am changing all the</p>
<pre><code>from module import function
function(agt)
</code></pre>
<p>by:</p>
<pre><code>import module as mdl
mdl.function(agt)
</code></pre>
<p>in my codes. I am trying to use commonly used aliases rather than personal ones. Is there a list of some kind on the internet summing-up all well-used aliases ?</p>
<p>For instance, these appear to be pretty common:</p>
<pre><code>import numpy as np
import math as m
import matplotlib.pyplot as plt
</code></pre>
<p>What about aliases for <code>scipy.linalg</code>, <code>time</code>, <code>scipy.io</code>, <code>cmath</code> and so on ? Which do you use ? Feel free to give other aliases, if no such list exist yet, I am willing to propose one (I will update this post).</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>No, there is no complete list of module acronyms</strong></p>
<p>There is no canonical list, and I wouldn't advise making one here (SO isn't really the place for that IMO). Style guidlines, including naming conventions are defined in PEP8 for python and the section on importing is <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">here</a>. Good and helpful advice, but not an enumerated list of import aliases.</p>
<p>There are a lot of good rules and advice on naming, some of which applies to imported names too. <a href="https://stackoverflow.com/questions/2853531/how-do-you-pep-8-name-a-class-whose-name-is-an-acronym">This post</a>, for example, I think, can get us at the not-so-surprising etymology of "Math Plotting Library" to "mpl". Following the <a href="https://www.python.org/dev/peps/pep-0008/#package-and-module-names" rel="nofollow noreferrer">PEP8 on module names</a> can help us not need acronyms at all.</p>
<p>Note that you've mixed <a href="https://docs.python.org/3/library/" rel="nofollow noreferrer">built-in modules</a> ("<code>time</code>") with standard but third-party libraries ("<code>numpy</code>", which is ubiquitous but <a href="https://en.wikipedia.org/wiki/NumPy" rel="nofollow noreferrer">Guido declined in 2006 to add to the core</a> and must be installed separately) and general third-party libraries ("<code>matplotlib</code>")<sup>6</sup>. You <em>might</em> find a list for built-in and extremely common libraries (or an indirect one through tutorials), but third-party libraries being included seems far less likely; I would advise <em>letting the authors of packages decide their standard abbreviations</em>. Numpy is a good example of a library who's authors use "np" in their own tutorials and have "standardized" their libraries usage syntax.</p>
<p>FWIW, I don't like calling math "m" (or as one commenter suggests, "os as o"); one-name variables are a recipe for disaster for clumsy programmers like me... </p>
<hr/>
<p>I'd also point you to the <a href="https://www.python.org/dev/peps/pep-0221/#rationale" rel="nofollow noreferrer">rationale for including the "as" syntax in the first place</a>, which justifies it by eliminating possible name clashes (if you import <code>cos</code> from <code>scipy</code> and from <code>sympy</code>, you might have a bad time). Using it to abbreviate names that adhere to the PEP naming standard already (are short and readable, to start), doesn't sound like it should be officially endorsed even if convenient.</p>
<p>In an amusing example: <a href="https://github.com/quantifiedcode/python-anti-patterns/issues/96" rel="nofollow noreferrer">here</a>, <code>sympy</code> and <code>scipy</code> both tried to use the same abbreviation for a short while, <a href="https://tvtropes.org/pmwiki/pmwiki.php/Main/SelfFulfillingProphecy" rel="nofollow noreferrer">causing the exact problem we hoped to avoid</a> (although <code>scipy</code> now advises not using an acronym at all, <a href="https://stackoverflow.com/questions/36014733/official-abbreviation-for-import-scipy-as-sp-sc">evidently</a>)</p>
<hr/>
<p><strong>Footnotes</strong></p>
<ol>
<li>Google also has a style guide; <a href="http://google.github.io/styleguide/pyguide.html#22-imports" rel="nofollow noreferrer">they suggest</a> using <code>import...as</code>  "only when [it's] a standard abbreviation (e.g., <code>np</code> for <code>numpy</code>)". Sorry, they defer too :)</li>
<li>Not to nitpick, but your question states "I am changing <strong>all</strong> the... [import statements]" (emphasis mine). To be clear, the question you link says "The choice between one or the other then, should be based on coding style instead." There are times when importing a function or class directly is perfectly unambiguous, imo. For example, the <a href="https://scikit-learn.org/stable/auto_examples/gaussian_process/plot_gpr_noisy.html" rel="nofollow noreferrer"><code>sklearn</code> tutorial</a> example that includes an import of "GaussianProcessRegressor" doesn't need to do any namespacing or abbreviations. Only you can know for your application, but it's safe in most cases to assume that that name is sufficiently unique</li>
<li>This can also be used <a href="https://stackoverflow.com/a/46807230/2329988">as a versioning hack</a>. I sometimes use it this way, but I'm not sure how recommended this strategy is</li>
<li>Some people get technical about conversational <a href="https://stackoverflow.com/a/42459966/2329988">use of the word "alias"</a></li>
<li><a href="https://www.reddit.com/r/learnpython/comments/9f1h9f/is_there_a_list_of_common_package_abbreviations/" rel="nofollow noreferrer">Reddit doesn't have a list either</a></li>
<li>To clarify question from the comments, the line between "third party but standard" and "third party" is very informal and not meant to be sacred</li>
</ol>
</div>
<span class="comment-copy">what about <code>import os as o</code> ? this is a personal coding style. There are no guidelines about <i>that</i></span>
<span class="comment-copy">I've never seen <code>import math as m</code>. I would personally not use it ever. Single-letter module names are.... not good in my opinion.</span>
<span class="comment-copy">The one I find most helpful is <code>import datetime as dt</code> since the module and the class both have the same name. <code>datetime.datetime</code> is too verbose.</span>
<span class="comment-copy">@juanpa.arrivillaga Yes that seemed a bit extreme. Yet it can be too long to keep <code>math</code> when there are a lot of trigonometry for instance. <code>math.sin</code>, <code>math.cos</code> and so on. Would you use <code>mt</code> instead ?</span>
<span class="comment-copy">@jeannej I think the math example is really trying to find the line between "best practice" and personal style, like what JFF was getting at. Personally, I don't think that "math" is too long to write, but I often also just "from math import sin, cos". It's true those two have common collisions, but you just need other good practices in that case - if I'm using numpy arrays, I won't import cos from math, I'd just import it from numpy. IMO, you're trading a little readibility for typing speed if you do "mt" - I would be a tiny bit confused if I saw "mt.cos" somewhere</span>
<span class="comment-copy"><code>import numpy as np</code> abbreviates a PEP compatible short name, but seems to be common anyway.</span>
<span class="comment-copy">@MarkRansom yup, and that one is definitely "standard" in some sense. Should I change some part of the answer to clarify that? I would consider numpy an exceptional (though certainly not unique) case, I wouldn't personally want to start extending that to the "time" module, "os" module, and other PEP-compliant ones, including similar numpy-stack family members like "scipy" and "sympy".</span>
<span class="comment-copy">Okay, added what I think is a clarification in terms of numpy</span>
<span class="comment-copy">@jeannej glad you found it interesting :) Feel free to make a list (certainly don't let <i>me</i> stop you) - I would just recommend not making it on SO, since it doesn't seem like the right place to me (related): <a href="https://meta.stackexchange.com/questions/158809/why-are-shopping-list-questions-bad" title="why are shopping list questions bad">meta.stackexchange.com/questions/158809/â€¦</a>). A personal blog or that reddit post I linked might be more appropriate, but up to you.</span>
<span class="comment-copy">I'll edit for clarity on the third-teir thing when I get some time; I just meant, very informally, not built in and not as canonical as numpy. "third-party" means not part of core python (if you just download python it doesn't come with matplotlib, which is made by someone else. Some python distros, like anaconda, may bundle it). The phrase "can't possibly" was too strong :)</span>
