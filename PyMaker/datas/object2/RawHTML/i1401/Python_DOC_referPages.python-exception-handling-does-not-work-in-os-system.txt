<div class="post-text" itemprop="text">
<pre><code>import webbrowser
import os
try:
    response=os.system('start notepad++.exe')
except OSError:
    webbrowser.open("https://www.rollapp.com/launch/notepad++")
</code></pre>
<p>If notepad++ is installed in system then it should open, otherwise the online notepad++ should launch. </p>
<p>However, <code>try</code> and <code>except</code> are not working in that way.</p>
<p>How does it work?</p>
</div>
<div class="post-text" itemprop="text">
<p>That is because <code>OS</code> doesn't throw exceptions as it is (as expected) very OS dependant, instead it returns an exit code (0) which is clearly described in the <a href="https://docs.python.org/3/library/os.html" rel="nofollow noreferrer">documentation</a>. Instead, you should consider using <code>subprocess.call()</code> which offers a superset around it (<code>popen</code>). For instance the following will work (I'll let you worry about locating the notepad++ installation location, <a href="https://stackoverflow.com/a/7468366/1093485">hint</a>).</p>
<pre><code>import webbrowser
import subprocess
try:
    # NOTE: The hardcoded path
    response=subprocess.call('C:/Program Files (x86)/Notepad++/notepad++.exe')
except OSError:
    webbrowser.open("https://www.rollapp.com/launch/notepad++")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try/except is for cases where your code execution throws some kind of <code>Exception</code> which is not happening in your example. Read more about this <a href="https://stackoverflow.com/questions/12373563/python-try-block-does-not-catch-os-system-exceptions">here</a> </p>
<p>You could look for the value in <code>response</code> to see the exit status of the command you tried to execute.
Normally if it returns 0, the command was executed successfully and otherwise not.
Which means the code would then look like:</p>
<pre><code>response=os.system('start notepad++.exe')
if response != 0:
    webbrowser.open("https://www.rollapp.com/launch/notepad++")
</code></pre>
</div>
<span class="comment-copy">Look at this question <a href="https://stackoverflow.com/questions/6466711/what-is-the-return-value-of-os-system-in-python" title="what is the return value of os system in python">stackoverflow.com/questions/6466711/…</a>. You will see that the <code>os</code> library doesn't have a standardized return (and thus isn't captured by your except clause) as it's OS dependant. Furthermore, i'd be extremely annoyed if your program opens another program of mine (if I have it) or forces me to a website, you should seriously consider another approach.</span>
<span class="comment-copy">See also this question: <a href="https://gis.stackexchange.com/questions/86522/os-system-subprocess-call-error-handling-when-error-in-command-line-function" title="os system subprocess call error handling when error in command line function">gis.stackexchange.com/questions/86522/…</a>. Seems like you can use subprocess.call() instead, which will return an OSError</span>
<span class="comment-copy"><code>subprocess</code> is indeed the way to go, it is based on <code>popen2</code> and offers proper exception support, etc.</span>
<span class="comment-copy"><code>os.system</code> doesn't raise exceptions on failure. Consider consulting the documentation when you think things behave unexpectedly.</span>
<span class="comment-copy">can't pass   "C:/Program Files (x86)/Notepad++/notepad++.exe"  as it is different for different users that's why we have to pass general path "start notepad++.exe"  but in this it is not working</span>
<span class="comment-copy">@RahulChaudhary That is exactly why trying to run another program on someone's computer is something you shouldn't be doing. However, I have linked another question that goes into finding the installation location for a program (as it isn't what you asked).</span>
<span class="comment-copy">actually i am trying to develop user interface of windows10 that's why i have to consider general path</span>
<span class="comment-copy">Don't do this, this makes it very OS dependant</span>
<span class="comment-copy">@BasJansen my bad. Should i delete this or leave it for others to see?</span>
<span class="comment-copy">That is up to you, your answer will work in specific cases so it's not 'wrong' perse but it's not the ideal (imho).</span>
<span class="comment-copy">when os.system('start notepad++.exe')  execute it throws an exception through cmd  then we have to handle it manually after that browser open                     is there any way to handle that exception</span>
<span class="comment-copy">If you need to handle exceptions on execution of the command, you must use @BasJansen 's method. Did you try replacing os.system('start notepad++.exe') call with subprocess.call('start notepad++.exe')? (Validity of that command is another issue)</span>
