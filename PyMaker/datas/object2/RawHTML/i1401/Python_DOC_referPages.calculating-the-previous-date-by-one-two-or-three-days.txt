<div class="post-text" itemprop="text">
<p>I am calculating the previous date either by one, two, or three days. I have a function which does this, but I want to be able to calculate the correct previous date based on the previous JSON file that exists. </p>
<p>I know that I would need some sort of conditional statement, but I'm not sure of how to approach this. This variable will then be used within a for loop to read through the contents on the previous day's file with the current day file to carry out some analysis. If the previous day file is not available it will need to be incremented by one till file is found.</p>
<p>My code is as follows:</p>
<pre><code>def previous_day():
    previous_day = str(datetime.date.today() - datetime.timedelta(1))
    return str(previous_day)


def current_day():
    current_day = str(datetime.datetime.today().strftime('%Y-%m-%d'))
    return str(current_day)


with open(currentday + '.json', 'r') as f, open(previousday + '.json', 'r') as g:
    for cd, pd in zip(f, g):
        data_current = json.loads(cd)
        data_previous = json.loads(pd)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't think you need to bother with the date calculations at all if you are just trying to find the most recent 2 files for comparison since your file names are just ISO date strings. You can just get all the files in the directory, sort them and then compare them in any order you want.</p>
<p>Get all filenames from a directory</p>
<pre><code>import os

files = os.listdir('/home/foo/bar')
# if there are unneeded files or subdirectories, filter the resulting list
</code></pre>
<p>Sort the files by date descending</p>
<pre><code>files = ['2018-11-23.json', '2018-11-29.json', '2018-11-25.json']
files.sort(key=lambda f: f.split('.')[0], reverse=True)
# sort output: ['2018-11-29.json', '2018-11-25.json', '2018-11-23.json']
</code></pre>
<p>Open the most recent and next most recent files for comparison</p>
<pre><code>with open(files[0], 'r') as latest, open(files[1], 'r') as previous:
    # compare files
    pass
</code></pre>
</div>
<span class="comment-copy">Will there always be a <i>today</i> file? Are you saying that you want to open the most current file and the <i>next most</i> current file - relative to <i>today</i>?  Please give a few examples of the filenames you are dealing with ... <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">Read about <a href="https://docs.python.org/3/library/os.path.html#os.path.exists" rel="nofollow noreferrer">os.path.exists</a></span>
<span class="comment-copy">Essentially , for the current date it will be the most up to date file. That i have covered. It is calculating the previous file. For example there might not be a file for 2018-12-02 , so it will try to find the next file 2018-12-01 etc @wwii</span>
<span class="comment-copy">That makes a lot sense to do it that way. However , does a lambda function have to be used in this example @benvc ?</span>
<span class="comment-copy">@arousayasser - You do not have to use a lamda for the key function, you can write/define a regular function and use that. A <i>regular</i> function can be more readable than a lambda if extracting the values to sort on is <i>complicated</i>.</span>
<span class="comment-copy">I get the error saying :  ile "json_compare.py", line 40, in main     with open(files[0], 'r') as f, open(files[1], 'r') as g: IOError: [Errno 2] No such file or directory: '2018-12-01.json'  I did not create a list of files with hardcoded names. I want to be able to store that to a list. @benvc</span>
<span class="comment-copy">@arousayasser - you may need to append a path to the beginning of the filename in your <code>with open(...)</code> statement depending on where you are running the script from.</span>
