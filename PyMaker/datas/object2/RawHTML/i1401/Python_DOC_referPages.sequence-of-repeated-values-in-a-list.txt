<div class="post-text" itemprop="text">
<p>I have problems with a program, I hope someone can help me to fix this. Basically I have a random generated list with 20 values, and I want to place between brackets the values that are repeated (for example if the list is <code>[1,2,2,4,5]</code> it should display <code>1 ( 2 2 ) 4 5 )</code>
Now here's my code that works only if there is no repeated value in the end, because the list index goes out of range. How can I fix this?</p>
<pre><code>from random import randint
lanci = []
for i in range(20):
    x = randint(1,6)
    lanci.append(x)
print(lanci)
i=0
while i &lt; len(lanci)-1):
    if lanci[i] == lanci[i+1]:
        print("(",end=" ")
        print(lanci[i],end=" ")
        while lanci[i]==lanci[i+1]:
            i = i + 1 
            print(lanci[i],end=" ")
    print(")",end=" ")
else:
    print(lanci[i],end=" ")
    i = i + 1  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alternatively to your more manual approach, you could use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> to group equal values in the list and then enclose those in parens:</p>
<pre><code>&gt;&gt;&gt; import random, itertools
&gt;&gt;&gt; lst = [random.randint(1, 5) for _ in range(20)]
&gt;&gt;&gt; tmp = [list(map(str, g)) for k, g in itertools.groupby(lst)]
&gt;&gt;&gt; ' '.join(g[0] if len(g) == 1 else "(" + " ".join(g) + ")" for g in tmp)
'5 4 1 2 1 4 (5 5) 4 5 1 5 4 3 (5 5) 3 (5 5 5)'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not the pretiest but will do it:</p>
<pre><code>from random import randint
from itertools import groupby

lanci = [randint(1,6) for _ in range(20)]

result = [tuple(v) for _, v in groupby(lanci)]

print(*[i[0] if len(i) == 1 else '('+' '.join(map(str, i))+')' for i in result], sep=' ')
#(2 2) 3 5 3 1 5 4 6 2 1 4 6 4 (5 5) 3 6 3 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just check for "last element" before your inner while loop.</p>
<pre><code>from random import randint

lanci = []
for i in range(20):
    x = randint(1,6)
    lanci.append(x)
print(lanci)
i=0
while i &lt; len(lanci)-1):
    if lanci[i] == lanci[i+1]:
        print("(",end=" ")
        print(lanci[i],end=" ")
        while (i+1 &lt; len(lanci)) and (lanci[i]==lanci[i+1]):
            i = i + 1 
            print(lanci[i],end=" ")
    print(")",end=" ")
    else:
        print(lanci[i],end=" ")
        i = i + 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>convert the list of number to a string then you can use this function.
split it if you need the list back again.</p>
<pre><code>def add_brackets(string):
    _character, _index = None, 0
    _return_string = ''
    for i, c in enumerate(string+ ' '):
        if _character is None or _character != c :
            if len(string[_index:i])&gt;1:
                _return_string+='(' + string[_index: i] + ')'
            else:
                _return_string+=string[_index: i]
            _character, _index = c, i
    return _return_string
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is another option using just basic list:</p>
<pre><code>def group_consecutives(lst):
  res, sub, memo = [None], [], None
  lst.append(memo)
  for x in lst:
    if memo == x:
      sub.append(memo)
      if res[-1] != sub: res.append(sub)
    else:
      sub.append(memo)
      if memo and not len(sub) &gt; 1: res.append(memo)
      memo, sub = x, []
  return res[1:]

print(group_consecutives(lanci))
</code></pre>
</div>
<span class="comment-copy">First off, you'll need to fix the syntax errors throughout your provided snippet.  For example:  print(lanci[i],end=" " is not closed with a ).  Same with while i&lt;(len(lanci)-1:  So, what's the purpose of this snippet?  What is your desired end result here?</span>
<span class="comment-copy">Ok thanks I fixed them, though I didn't copy paste, i copied it that's why it had syntax errors. The problem though is that if the last value of the list is in the repeated sequence it gives me that the index i is out of range, but I can't manage to fix it.</span>
<span class="comment-copy">I'd start turning <code>[1, 2, 2, 4, 5]</code> into <code>[1, [2, 2], 4, 5]</code> with the help of <code>itertools.groupby</code>. Then is should be simple exercise to turn integers into strings and sublists into parenthesized sequences. (Like tobias_k did while I was typing this :) )</span>
<span class="comment-copy">What is the required output for <code>[1,2,2,4,5,6]</code>?</span>
<span class="comment-copy"><code>tmp = [g for _, g in itertools.groupby(map(str, lst))]</code>. No need to convert <code>g</code> to a list just yet, since you'll just iterate over them immediately.</span>
<span class="comment-copy">@chepner True, but you can't get the <code>len</code> of a groupy-group, right? (<code>tmp</code> does not have to be a list, could also be a generator, I just wanted to provide an easy way to look at the groups while avoiding the obvious follow-up questions about the generator being exhausted after taking a look at it)</span>
<span class="comment-copy">Funny how we got to almost same thing, +1 for you!</span>
<span class="comment-copy">@zipa Quoting <code>import this</code>: "There should be one-- and preferably only one --obvious way to do it." :-)</span>
<span class="comment-copy">@tobias_k Ah, right, you'd need something like <code>... for g in map(list, tmp)</code> in the generator expression for <code>join</code> in that case.</span>
<span class="comment-copy">Oh my, I didn't know that if you give two false statements it stops at the first one and doesn't check the other one, thanks very much!!!!</span>
<span class="comment-copy">@Tyler99, yes, that's a very handy feature: it can make you have one if statement/block instead of having to nest--more readable, frequently.</span>
<span class="comment-copy">What is the purpose of converting the list to string first? Won't this be difficult with e.g. multi-digit numbers, let alone lists of other stuff (e.g. list of strings)? Also, how would the string input look like? <code>str(lst)</code>, or <code>''.join(lst)</code>, or how?</span>
<span class="comment-copy">because the final output is a string, else instead of _return_string you can have return list... and instead of adding to string you can append/extend the list. For multidigit numbers, will have to deal it as lists only. For converting to string you'd have to map numbers to string the join. But that's only helpful if the numbers are single digit only. In the example the numbers are in between 1-6 only</span>
<span class="comment-copy">That much is clear. Problem is, you write that you expect input as a string, and obviously the format of that string is important, and there are many different ways that string could look (see first comment), but you never say <i>how</i> it should look, or give an example. Without that, this solution is not really testable let alone usable.</span>
<span class="comment-copy">Thanks, You make a good point. I think to make it more generic to the problem specified, it can be modified and should rather accept a list and deal accordingly.</span>
