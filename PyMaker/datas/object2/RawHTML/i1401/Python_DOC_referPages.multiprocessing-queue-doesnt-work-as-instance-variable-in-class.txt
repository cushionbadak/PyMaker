<div class="post-text" itemprop="text">
<p>I want to encapsulate a multiprocessing task into a class. Both control and worker functions are members of the class. The workers are run using <code>Pool.map_async()</code>, so the results can be processed while other workers are still running. The results for processing are stored in <code>multiprocessing.Queue</code>. When the Queue is an instance variable, it doesn't work, whereas global variable or class variable, it works.</p>
<p>Example:</p>
<pre><code>import multiprocessing 
class A():
    # Queue as instance variable
    def __init__(self):
        self.qout = multiprocessing.Queue()
    def worker(self,x):
        self.qout.put(x*x)   
    def process(self):
        values = range(10)
        with multiprocessing.Pool() as pool:
            res = pool.map_async(self.worker,values)        
            while (not self.qout.empty() or
                not res.ready()):
                val = self.qout.get()
                print(val)

qoutB = multiprocessing.Queue()
class B():
    # Queue as global variable
    def __init__(self):
        pass   
    def worker(self,x):
        qoutB.put(x*x)       
    def process(self):
        values = range(10)       
        with multiprocessing.Pool() as pool:
            res = pool.map_async(self.worker,values)           
            while (not qoutB.empty() or
                not res.ready()):
                val = qoutB.get()
                print(val)

class C():
    # Queue as Class variable
    qout = multiprocessing.Queue()
    def __init__(self):
        pass
    def worker(self,x):
        self.qout.put(x*x)   
    def process(self):
        values = range(10)
        with multiprocessing.Pool() as pool:
            res = pool.map_async(self.worker,values)        
            while (not self.qout.empty() or
                not res.ready()):
                val = self.qout.get()
                print(val)  
</code></pre>
<p>Now, when you call class as follows (put it below classes definitions)              </p>
<pre><code>a=A()
a.process()
</code></pre>
<p>does not work (probably stops waiting on <code>self.qout.get()</code>, but</p>
<pre><code>a=B()
a.process()
</code></pre>
<p>and</p>
<pre><code>a=C()
a.process()
</code></pre>
<p>works (prints results). Why?</p>
<p>I haven't found any relevant info in <a href="https://docs.python.org/3.5/library/multiprocessing.html" rel="nofollow noreferrer">Python documentation</a>. I haven't tried to pass the queue as an argument, but it is a feature which should be hidden from the user.</p>
<p>The B option should be out of question, C is not ideal, as the queue would be shared between all instances of the class.</p>
<p><strong>Note</strong>: This is tested on Linux (Debian, Python 3.5 from repository). </p>
</div>
<div class="post-text" itemprop="text">
<p>This <strong>isn't</strong> an answer. I'm posting it because it's complete, runnable,  and shows what I used to come to the conclusion that <em>none</em> of your classes "work"—in fact, class <code>A</code> is the only one whose <code>while</code> loop finishes (without printing anything though), whereas in both class <code>B</code> and <code>C</code> it never ends.</p>
<p>Note also that I know that due to the commonality of these three classes, they could all been subclasses of some base class—but that's not the subject of this question (and that's why there's so much redundant code).</p>
<p>Anyway, something like this is would be considered an acceptable <a href="https://stackoverflow.com/help/mcve">MCVE</a> for your question—if only the results it produced jibed with what you're claiming, that is.</p>
<pre><code>import multiprocessing

TEST_CLASS_NAME = 'B'  # Change as necessary.


if TEST_CLASS_NAME == 'A':

    class A():
        # Queue as instance variable
        def __init__(self):
            self.qout = multiprocessing.Queue()

        def worker(self, x):
            self.qout.put(x*x)

        def process(self):
            values = range(10)
            with multiprocessing.Pool() as pool:
                res = pool.map_async(self.worker, values)
                classname = type(self).__name__
                print(classname, '- while loop starting')
                while not self.qout.empty() or not res.ready():
                    val = self.qout.get()
                    print(val)
                print(classname, '- while loop ended')


elif TEST_CLASS_NAME == 'B':

    qoutB = multiprocessing.Queue()

    class B():
        # Queue as global variable
        def __init__(self):
            self.qout = qoutB

        def worker(self, x):
            self.qout.put(x*x)

        def process(self):
            values = range(10)
            with multiprocessing.Pool() as pool:
                res = pool.map_async(self.worker, values)
                classname = type(self).__name__
                print(classname, '- while loop starting')
                while not self.qout.empty() or not res.ready():
                    val = self.qout.get()
                    print(val)
                print(classname, '- while loop ended')


elif TEST_CLASS_NAME == 'C':

    class C():
        # Queue as Class variable
        qout = multiprocessing.Queue()

        def __init__(self):
            pass

        def worker(self, x):
            self.qout.put(x*x)

        def process(self):
            values = range(10)
            with multiprocessing.Pool() as pool:
                res = pool.map_async(self.worker, values)
                classname = type(self).__name__
                print(classname, '- while loop starting')
                while not self.qout.empty() or not res.ready():
                    val = self.qout.get()
                    print(val)
                print(classname, '- while loop ended')


if __name__ == '__main__':

    print('testing class', TEST_CLASS_NAME)
    Class = globals()[TEST_CLASS_NAME]
    test = Class()
    test.process()

    print('done')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>SO algorithm gave me interesting hints, I couldn't find earlier.</p>
<p>Based on <a href="https://stackoverflow.com/a/45184548/10734135">this answer</a>, queues cannot be passed as an argument to functions, which are opening new processes, because queues cannot be pickled. And this what in general <code>self.function()</code> does: it is equivalent to <code>function(self)</code>. In the case of class <code>A</code>, the queue is attempted to be passed to workers; where as in <code>B</code> and <code>C</code> it is not and lives more or less independent on the process</p>
<p>The same reasoning concludes from <a href="https://stackoverflow.com/questions/3217002/how-do-you-pass-a-queue-reference-to-a-function-managed-by-pool-map-async">this question and answers</a>. Needless to say, that the <code>manager.Queue</code> does not work here either.</p>
<p><strong>Failed testing of MCVE</strong></p>
<p>This is probably due to different default start methods of <code>multiprocessing</code> (<a href="https://docs.python.org/3.5/library/multiprocessing.html#contexts-and-start-methods" rel="nofollow noreferrer">see docs</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Again, this isn't an answer to your question. However I'm posting it because it makes the whole issue moot — because you don't really need to explicitly create and use a <code>multiprocessing.Queue</code> to do something like this. </p>
<p>Instead consider using <a href="https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor" rel="nofollow noreferrer"><code>concurrent.futures.ProcessPoolExecutor</code></a> to accomplish the task. </p>
<p>For example:</p>
<pre><code>import concurrent.futures

class A_Prime():
    def __init__(self):
        pass

    def worker(self, x):
        return x*x

    def process(self):
        with concurrent.futures.ProcessPoolExecutor() as executor:
            classname = type(self).__name__
            print(classname, '- calling executor.map')
            res = [value for value in executor.map(self.worker, range(10))]
            print(classname, '- executor.map finished')
            print('  result:', res)


if __name__ == '__main__':
    test = A_Prime()
    test.process()
    print('done')
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>A_Prime - calling executor.map
A_Prime - executor.map finished
  result: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
done
</code></pre>
</div>
<span class="comment-copy">In class <code>A</code>, the queue is an instance attribute, not a class variable which is something else—so you're using the wrong terminology. You should trying making an actual class variable and see what happens.</span>
<span class="comment-copy">Sorry for the wrong terminology, will fix the question. However, if the queue would be class variable, it wouldd be hsared between all instances, wouldn't it. That is not desired behaviour.</span>
<span class="comment-copy">I understand. If nothing else you should try it just to see if there's the same problem (even if you can't use the technique).</span>
<span class="comment-copy">Ok, so it works, if the queue is class variable...</span>
<span class="comment-copy">Is this on Windows?  Also—as always—what does “does not work” mean?</span>
<span class="comment-copy">Does this work asynchronous? The reason I have tried to fidle with the queue is, that my  actual workers takes some time and be many of them, so I want to do some stuff in the mean time. I must test more <code>multiprocessing.pool.AsyncResult</code></span>
<span class="comment-copy">Hamiltonian: Yes, I believe so. The first line of the linked documentation says "The <code>ProcessPoolExecutor</code> class is an <code>Executor</code> subclass that uses a pool of processes to execute calls <b>asynchronously</b>." (emphasis of last word mine)</span>
<span class="comment-copy">Also note that if either of my answers helped you, even though they didn't directly address your question, you can still up-vote them. See <a href="https://stackoverflow.com/help/someone-answers">What should I do when someone answers my question?</a></span>
<span class="comment-copy">Ok, the Futures are interesting indeed. It is a pitty you won't find it on google search.</span>
<span class="comment-copy">Ok, I will up vote this one, but accept my answer, as it explains reasons I believe. Thanks for the tip anyway.</span>
