<div class="post-text" itemprop="text">
<p>I have a Python script:</p>
<pre><code>if True:
    if False:
        print('foo')
   print('bar')
</code></pre>
<p>However, when I attempt to run my script, Python raises an <code>IndentationError</code>:</p>
<pre><code>  File "script.py", line 4
    print('bar')
               ^
IndentationError: unindent does not match any outer indentation level
</code></pre>
<p>I kept playing around with my program, and I was also able to produce three other errors:</p>
<ul>
<li><code>IndentationError: unexpected indent</code></li>
<li><code>IndentationError: expected an indented block</code></li>
<li><code>TabError: inconsistent use of tabs and spaces in indentation</code></li>
</ul>
<p>What do these errors mean? What am I doing wrong? How can I fix my code?</p>
</div>
<div class="post-text" itemprop="text">
<h2>Why does indentation matter?</h2>
<p>In Python, indentation is used to delimit <a href="https://en.wikipedia.org/wiki/Block_(programming)" rel="noreferrer">blocks of code</a>. This is different from many other languages that use curly braces <code>{}</code> to delimit blocks such as Java, Javascript, and C. Because of this, Python users must pay close attention to when and how they indent their code because whitespace matters.</p>
<p>When Python encounters a problem with the indentation of your program, it either raises an exception called <a href="https://docs.python.org/3/library/exceptions.html#IndentationError" rel="noreferrer"><code>IndentationError</code></a> or <a href="https://docs.python.org/3/library/exceptions.html#TabError" rel="noreferrer"><code>TabError</code></a>.</p>
<p><strong>A little history</strong></p>
<p>The historical reasons for why Python uses indentation vs the arguably more commonly accepted curly braces <code>{}</code> is outlined in <a href="http://python-history.blogspot.com/2009/02/early-language-design-and-development.html" rel="noreferrer">an article of the history of Python by Guido van Rossum</a> - the creator of Python:</p>
<blockquote>
<p>Python’s use of indentation comes directly from ABC, but this idea didn’t originate with ABC--it had already been promoted by Donald Knuth and was a well-known concept of programming style. (The occam programming language also used it.) However, ABC’s authors did invent the use of the colon that separates the lead-in clause from the indented block. After early user testing without the colon, it was discovered that the meaning of the indentation was unclear to beginners being taught the first steps of programming. The addition of the colon clarified it significantly: the colon somehow draws attention to what follows and ties the phrases before and after it together in just the right way.</p>
</blockquote>
<h2>How do I indent my code?</h2>
<p>The basic rule for indenting Python code (considering that you treat the entire program as a "basic block") is: The first statement in a basic block, and each subsequent statement after it must be indented by the same amount.</p>
<p>So technically the following Python program is correct:</p>
<pre><code>def perm(l):
        # Compute the list of all permutations of l
    if len(l) &lt;= 1:
                  return [l]
    r = []
    for i in range(len(l)):
             s = l[:i] + l[i+1:]
             p = perm(s)
             for x in p:
              r.append(l[i:i+1] + x)
    return r
</code></pre>
<p>However, as you can probably tell from above, randomly indenting your code makes is extremely hard to read and follow the flow of the program. It's better to be consistent and follow a style.</p>
<p><a href="https://www.python.org/dev/peps/pep-0008/#indentation" rel="noreferrer">PEP8 - The Python style guide - recommends that four spaces per indentation level</a> should be used:</p>
<blockquote>
<p>Use 4 spaces per indentation level. </p>
</blockquote>
<p>That is, <strong>each statement that is starting a new block and each subsequent statement in the new block, should be indented four spaces from the current indentation level</strong>. Here is the above program indented according to the PEP8 style guide:</p>
<pre><code>def perm(l):
    # Compute the list of all permutations of l
    if len(l) &lt;= 1:
        return [l]
    r = []
    for i in range(len(l)):
        s = l[:i] + l[i+1:]
        p = perm(s)
        for x in p:
            r.append(l[i:i+1] + x)
    return r
</code></pre>
<h2>Can I still use tabs?</h2>
<p>Python realizes that some people still prefer tabs over spaces and that legacy code may use tabs rather than spaces, so it allows the use of tabs as indentation. <a href="https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces" rel="noreferrer">PEP8 touches on this topic</a>:</p>
<blockquote>
<p>Spaces are the preferred indentation method.</p>
<p>Tabs should be used solely to remain consistent with code that is already indented with tabs. </p>
</blockquote>
<p>Note however the one big caveat is <strong>not to use both tabs <em>and</em> spaces for indentation</strong>. Doing so can cause all kinds of strange hard to debug indentation errors. Python expands tabs to the next 8th column, but if your editor is set to a tab size of 4 columns, or you you use spaces as well as tabs, you can easily produce indented code that <em>looks</em> fine  in your editor, but Python will refuse to run. The Python 3 compiler <em>explicitly</em> rejects any program containing an ambiguous mixture of tabs and spaces, usually by raising a <code>TabError</code>. However, by default, mixing tabs and spaces is still allowed in Python 2, but it is highly recommended not to use this "feature". Use the <code>-t</code> and <code>-tt</code> command line flags to force Python 2 to raise a warning or (preferably) an error respectively. <a href="https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces" rel="noreferrer">PEP8 also discusses this topic</a>:</p>
<blockquote>
<p>Python 3 disallows mixing the use of tabs and spaces for indentation.</p>
<p>Python 2 code indented with a mixture of tabs and spaces should be converted to using spaces exclusively.</p>
<p>When invoking the Python 2 command line interpreter with the -t option, it issues warnings about code that illegally mixes tabs and spaces. When using -tt these warnings become errors. These options are highly recommended!</p>
</blockquote>
<h2>What does "IndentationError: unexpected indent" mean?</h2>
<p><strong>Problem</strong></p>
<p>This error occurs when a statement is unnecessarily indented or its indentation does not match the indentation of former statements in the same block. For example, the first statement in the program below is unnecessarily indented:</p>
<pre><code>&gt;&gt;&gt;  print('Hello') # this is indented 
  File "&lt;stdin&gt;", line 1
    print('Hello') # this is indented 
    ^
IndentationError: unexpected indent
</code></pre>
<p>In this example, the <code>can_drive = True</code> line in the <code>if</code> block does not match the indentation of any former statement:</p>
<pre><code>&gt;&gt;&gt; age = 10
&gt;&gt;&gt; can_drive = None
&gt;&gt;&gt; 
&gt;&gt;&gt; if age &gt;= 18:
...     print('You can drive')
...      can_drive = True # incorrectly indented
  File "&lt;stdin&gt;", line 3
    can_drive = True # incorrectly indented
    ^
IndentationError: unexpected indent
</code></pre>
<p><strong>Fix</strong></p>
<p>The fix for this error is to first make sure the problematic line even needs to be indented. For example, the above example using <code>print</code> can be fixed simply be unindenting the line:</p>
<pre><code>&gt;&gt;&gt; print('Hello') # simply unindent the line
Hello
</code></pre>
<p>However, if you are sure the line does need to be indented, the indentation needs to match that of a former statement in the same block. In the second example above using <code>if</code>, we can fix the error by making sure the line with <code>can_drive = True</code> is indented at the same level as the former statements in the <code>if</code> body:</p>
<pre><code>&gt;&gt;&gt; age = 10
&gt;&gt;&gt; can_drive = None
&gt;&gt;&gt; 
&gt;&gt;&gt; if age &gt;= 18:
...     print('You can drive')
...     can_drive = True # indent this line at the same level.
... 
</code></pre>
<h2>What does "IndentationError: expected an indented block" mean?</h2>
<p><strong>Problem</strong></p>
<p>This error occurs when Python sees the 'header' for a compound statement, such as <code>if &lt;condition&gt;:</code> or <code>while &lt;condition&gt;:</code> but the compound statement's body or <strong><em>block</em></strong> is never defined. For example in the code below we began an <code>if</code> statement, but we never define a body for the statement:</p>
<pre><code>&gt;&gt;&gt; if True:
... 
  File "&lt;stdin&gt;", line 2

    ^
IndentationError: expected an indented block
</code></pre>
<p>In this second example, we began writing a <code>for</code> loop, but we forget to indent the <code>for</code> loop body. So Python still expects an indented block for the <code>for</code> loop body:</p>
<pre><code>&gt;&gt;&gt; names = ['sarah', 'lucy', 'michael']
&gt;&gt;&gt; for name in names:
... print(name)
  File "&lt;stdin&gt;", line 2
    print(name)
        ^
IndentationError: expected an indented block
</code></pre>
<p>Comments don't count as bodies:</p>
<pre><code>&gt;&gt;&gt; if True:
...     # TODO
...
  File "&lt;stdin&gt;", line 3

    ^
IndentationError: expected an indented block
</code></pre>
<p><strong>Fix</strong></p>
<p>The fix for this error is to simply include a body for the compound statement.</p>
<p>As shown above, a common mistake by new users is that they forget to indent the body. If this is the case, make sure each statement meant to be included in the compound statement's body is indented at the same level under the compound statement's beginning. Here is the above example fixed:</p>
<pre><code>&gt;&gt;&gt; names = ['sarah', 'lucy', 'michael']
&gt;&gt;&gt; for name in names:
...     print(name) # The for loop body is now correctly indented.
... 
sarah
lucy
michael
</code></pre>
<p>Another common case is that, for some reason, a user may not want to define an actual body for the compound statement, or the body may be commented out. In this case, the <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-pass_stmt" rel="noreferrer"><code>pass</code></a> statement can be used. The <code>pass</code> statement can be used anywhere Python expects one or more statements as a placeholder. <a href="https://docs.python.org/3/reference/simple_stmts.html#the-pass-statement" rel="noreferrer">From the documentation for <code>pass</code></a>:</p>
<blockquote>
<p>pass is a null operation — when it is executed, nothing happens. It is useful as a placeholder when a statement is required syntactically, but no code needs to be executed, for example:</p>
<pre><code>def f(arg): pass    # a function that does nothing (yet)

class C: pass       # a class with no methods (yet)
</code></pre>
</blockquote>
<p>Here is the above example with the <code>if</code> statement fixed by using the <code>pass</code> keyword:</p>
<pre><code>&gt;&gt;&gt; if True:
...     pass # We don't want to define a body.
... 
&gt;&gt;&gt;
</code></pre>
<h2>What does "IndentationError: unindent does not match any outer indentation level" mean?</h2>
<p><strong>Problem</strong></p>
<p>This error occurs when you unindent a statement, but now the indentation level of that statement does not match that of any former statement. For example, in the below code we unindent the second call to <code>print</code>. However, the indentation level does not match that of any former statement:</p>
<pre><code>&gt;&gt;&gt; if True:
...     if True:
...         print('yes')
...    print()
  File "&lt;stdin&gt;", line 4
    print()
          ^
IndentationError: unindent does not match any outer indentation level
</code></pre>
<p>This error is especially hard to catch because even one space will cause your code to fail.</p>
<p><strong>Fix</strong></p>
<p>The fix is to ensure that when you unindent a statement, the indentation level matches that of a former statement. Consider the above example once again. In the example, I want the second call to print to be in the first <code>if</code> statements body. So I need to make sure that that line's indentation level matches that of the former statements in the first <code>if</code> statement's body:</p>
<pre><code>&gt;&gt;&gt; if True:
...     if True:
...         print('yes')
...     print() # indentation level now matches former statement's level.
... 
yes

&gt;&gt;&gt; 
</code></pre>
<h2>I'm still getting an IndentationError but my program appears to be correctly indented. What do I do?</h2>
<p>If your program visually appears to have correct indentation, but your still getting an <code>IndentationError</code> you have most likely <strong>mixed tabs with spaces</strong>. This will sometimes cause Python to raises strange errors. See the subsection <strong><em>Special cases</em></strong> under <strong><em>What does "TabError: inconsistent use of tabs and spaces in indentation" mean?</em></strong> for an more in-depth explanation of the problem.</p>
<h2>What does "TabError: inconsistent use of tabs and spaces in indentation" mean?</h2>
<p><strong>Problem</strong></p>
<p>This error only occurs when you attempt to mix tabs and spaces as indentation characters. As said above, Python will not allow your program to contain a mix of tabs and spaces, and will raise the specific exception <code>TabError</code> if it finds you have. For example, in the program below, a mix of tabs and spaces is used for indentation:</p>
<pre><code>&gt;&gt;&gt; if True:
...     if True:
...         print()
...     print()
...     print()
  File "&lt;stdin&gt;", line 5
    print()
          ^
TabError: inconsistent use of tabs and spaces in indentation
</code></pre>
<p>Here is a picture which visually shows the whitespace in the above program. Gray dots are spaces, and gray arrows are tabs:</p>
<p><a href="https://i.stack.imgur.com/pFV48.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/pFV48.png"/></a></p>
<p>We can see we have indeed mixed spaces and tabs for indentation.</p>
<p><strong>Special cases</strong></p>
<p>Note Python <strong><em>will not</em></strong> <em>always</em> raise a <code>TabError</code> if you mix tabs and spaces into your program. If the program indentation is unambiguous, Python will allow tabs and spaces to be mixed. For example:</p>
<pre><code>&gt;&gt;&gt; if True:
...     if True: # tab
...         pass # tab, then 4 spaces
... 
&gt;&gt;&gt;
</code></pre>
<p>And sometimes Python simply chokes on the mixture of tabs and spaces and erroneously raises an <code>IndentationError</code> exception when a <code>TabError</code> would be more appropriate. Another example:</p>
<pre><code>&gt;&gt;&gt; if True:
...     pass # tab
...     pass # 4 spaces
  File "&lt;stdin&gt;", line 3
    pass # 4 spaces
                ^
IndentationError: unindent does not match any outer indentation level
</code></pre>
<p>As you can see, running your code this way can create mysterious errors. Even though the program <em>visually</em> appears to be fine, Python became confused trying to parse the tabs and spaces used for indention and errored out.</p>
<p>These are excellent examples that demonstrate why to never mix tabs and spaces and make use of the <code>-t</code> and <code>-tt</code> interpreter flags when using Python 2.</p>
<p><strong>Fix</strong></p>
<p>If your program is short, probably the easiest and quickest fix is to simply re-indent the program. Make sure each statement is indented by four spaces per indention level (see <strong><em>How do I indent my code?</em></strong>).</p>
<p>However, if you already have a large program that you've mixed tabs and spaces into, there are automated tools that can be used to convert all of your indentation to just spaces.</p>
<p>Many editors such as <a href="https://www.jetbrains.com/pycharm/" rel="noreferrer">PyCharm</a> and <a href="https://www.sublimetext.com/" rel="noreferrer">SublimeText</a> have options to automatically convert tabs to spaces. There are also several on-line tools such as <a href="http://tabstospaces.com/" rel="noreferrer">Tabs To Spaces</a> or <a href="https://www.browserling.com/tools/tabs-to-spaces" rel="noreferrer">Browserling</a> that allow you to quickly re-indent your code. There are also tools written in Python. <a href="https://github.com/hhatto/autopep8" rel="noreferrer">autopep8</a> for example can automatically re-indent your code and other indentation errors as well.</p>
<p>Even the best tools though will sometimes not be able to fix all of your indentation errors and you'll have to fix them manually. That's why it's important to always properly indent your code from the start.</p>
<h2>A note about "SyntaxError" related indentation problems</h2>
<p>Although not often, sometimes certain <code>SyntaxError</code> exceptions are raised due to incorrect indentation.  For example, look at the code below:</p>
<pre><code>if True:
    pass
pass # oops! this statement should be indented!.
else:
    pass
</code></pre>
<p>When the above code is run, a <code>SyntaxError is raised</code>:</p>
<pre><code>Traceback (most recent call last):
  File "python", line 4
    else:
       ^
SyntaxError: invalid syntax
</code></pre>
<p>Although Python raises a <code>SyntaxError</code>, the <em>real</em> problem with the above code, is that the second <code>pass</code> statement should be indented. Because the second <code>pass</code> isn't indented, Python doesn't realize that the previous <code>if</code> statement and the <code>else</code> statement are meant to be connected.</p>
<p>The fix for this type of error is to simply correctly re-indent your code. To see how to properly indent your code, see the section <em><strong>How do I indent my code?</strong></em>.</p>
<h2>I'm still having a hard time with Python's indentation syntax. What do I do?</h2>
<p>Don't get discouraged if you're still struggling. It can take time to get use to 
Python's whitespace syntax rules. Here are some tips to help:</p>
<ul>
<li>Get an editor that will tell you when you have an indentation error. Some goods ones are as said above are, <a href="https://www.jetbrains.com/pycharm/" rel="noreferrer">PyCharm</a>, <a href="https://www.sublimetext.com/" rel="noreferrer">SublimeText</a>, and <a href="https://github.com/jupyter/notebook" rel="noreferrer">Jupyter Notebook</a>.</li>
<li>When you indent your code, count out loud to yourself how many times you press the space-bar (or tab key). For example, if you needed to indent a line by four spaces, you would say out loud "<em>one</em>, <em>two</em>, <em>three</em>, <em>four</em>" while simultaneously pressing the space-bar each time. It sounds silly, but it helps train your brain to think about how deep you're indenting your code.</li>
<li>If you have an editor, see if it has an option to automatically convert tabs to spaces.</li>
<li>View others' code. Browse <a href="https://github.com/" rel="noreferrer">github</a> or <a href="https://stackoverflow.com/">Stackoverflow</a> and see examples of Python code.</li>
<li>Just write code. That's the single best way to get better. The more you write Python code, the better you'll get.</li>
</ul>
<h2>Resources used</h2>
<ul>
<li><a href="https://en.wikipedia.org/" rel="noreferrer">https://en.wikipedia.org/</a></li>
<li><a href="https://docs.python.org/3/" rel="noreferrer">https://docs.python.org/3/</a></li>
<li><a href="http://python-history.blogspot.com/2009/02/early-language-design-and-development.html" rel="noreferrer">http://python-history.blogspot.com/2009/02/early-language-design-and-development.html</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">https://www.python.org/dev/peps/pep-0008/</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<h1>Sublime Text 3</h1>
<p>If it happens that you code in Sublime Text 3, this could help you with indentations problemes</p>
<p>In Sublime Text, while editing a Python file:</p>
<p><strong><em>Sublime Text menu</em></strong> &gt; <strong><em>Preferences</em></strong> &gt; <strong><em>Settings - Syntax Specific</em></strong> :</p>
<p><strong>Python.sublime-settings</strong></p>
<pre><code>{
    "tab_size": 4,
    "translate_tabs_to_spaces": true
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You see, you have a tiny error.</p>
<pre><code>if True:
    if False:
        print('foo')
   print('bar')
</code></pre>
<p>You were supposed to do:</p>
<pre><code>if True:
    if False:
        print('foo')
    print('bar')
</code></pre>
<p>As you can see your print is only indented 3 spaces, it is supposed to be indented 4 spaces.</p>
</div>
<div class="post-text" itemprop="text">
<p>Quick fix for Sublime users:</p>
<ol>
<li>Press Ctrl-H to access Find and Replace </li>
<li>In Find: Type 4 spaces</li>
<li>In Replace: Copy and paste a tab from somewhere in your code
Click Replace All</li>
</ol>
</div>
<span class="comment-copy">If anyone raises a fuss over this...just post a question on Meta Stack Overflow about it.  That's the <i>best</i> place to handle discussion on whether or not this question is appropriate, and even if it'd be suitable as a dupe target at all.</span>
<span class="comment-copy"><code>"IndentationError: expected an indented block"</code> seems to be missing from the question. Hopefully the Q&amp;A itself will stop a lot of questions even before they're asked, so no closing would be required in the first place (I wish...).</span>
<span class="comment-copy">Alternative perspective: I don't consider most indentation problems to be typos, so I'll continue to dupe-close them, and I may use this as the dupe target.</span>
<span class="comment-copy">Alright @MartijnPieters, added a section that deals with <code>SyntaxError</code> related indentation problems. Feel free to modify it if you think it can be improved.</span>
<span class="comment-copy">Excellent, thanks! I think that works very well.</span>
<span class="comment-copy">@user2357112 Ah, thanks for the edit. I did some test and it always seemed to raise a <code>TabError</code> but I wasn't 100% sure.</span>
<span class="comment-copy"><a href="http://ideone.com/EwXknd" rel="nofollow noreferrer">Here's a demo</a> of not-TabError, and <a href="http://ideone.com/teNDgl" rel="nofollow noreferrer">here's a demo</a> where Python doesn't raise an exception at all for mixed tabs and spaces because it considers the mixing unambiguous.</span>
<span class="comment-copy">Man you rocked this one!</span>
<span class="comment-copy">@blitu12345 Thanks man, I appreciate the kind words!</span>
