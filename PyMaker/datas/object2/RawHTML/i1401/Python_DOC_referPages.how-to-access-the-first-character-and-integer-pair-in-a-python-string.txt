<div class="post-text" itemprop="text">
<p>I have several strings in Python. Let's assume each string is associated with a variable. These strings are only composed of characters and integers:</p>
<pre><code>one = '74A76B217C'
two = '8B7A1742B'
three = '8123A9A8B'
</code></pre>
<p>I would like a conditional in my code which checks these strings if 'A' exists first, and if so, return the integer. </p>
<p>So, in the example above, the first integer and first character is: for <code>one</code>, <code>74</code> and <code>A</code>; for <code>two</code>, <code>8</code> and <code>B</code>; for <code>three</code>, <code>8123</code> and <code>A</code>. </p>
<p>For the function, <code>one</code> would return True, and 74; <code>two</code> would be False, and <code>three</code> would be 8123 and <code>A</code>. </p>
<p>My problem is, I am not sure how to efficiently parse the strings in order to check for the first integer and character. </p>
<p>In Python, there are methods to check whether the character exists in the string, e.g. </p>
<pre><code>if 'A' in one:
    print('contains A')
</code></pre>
<p>But this doesn't take order into account order. What is the most efficient way to access the first character and first integer, or at least check whether the first character to occur in a string is of a certain identity? </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regex</a>: <code>^(\d+)A</code></p>
<pre><code>import re

def check_string(s):
    m_test = re.search("^(\d+)A", s)
    if m_test:
        return m_test.group(1)
</code></pre>
<p>See online regex tester:
<a href="https://regex101.com/r/LmSbly/1" rel="nofollow noreferrer">https://regex101.com/r/LmSbly/1</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Try this as an alternative of regex:</p>
<pre><code>def check(s):
    i = s.find('A')
    if i &gt; 0 and s[:i].isdigit():
        return int(s[:i]), True
    return False

# check(one) (74, True)
# check(two) False
# check(three) (8123, True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try a regular expression.</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search('[0-9]+', '74A76B217C').group(0)
'74'
&gt;&gt;&gt; re.search('[A-z]', '74A76B217C').group(0)
'A'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a regex:</p>
<pre><code>&gt;&gt;&gt; re.match('^([0-9]+)A', string)
</code></pre>
<p>For example:</p>
<pre><code>import re

for s in ['74A76B217C', '8B7A1742B', '8123A9A8B']:
    match = re.match('^([0-9]+)A', s)
    print(match is not None and match.group(1))
</code></pre>
</div>
<span class="comment-copy">What should happen for <code>five = 'A123BCD'</code> and <code>six = 'A1A2A3'</code></span>
<span class="comment-copy">@mtrw The integers always come first.</span>
<span class="comment-copy">This works very well! Thanks for the link!</span>
