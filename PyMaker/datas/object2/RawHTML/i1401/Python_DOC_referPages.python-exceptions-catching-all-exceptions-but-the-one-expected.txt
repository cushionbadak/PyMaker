<div class="post-text" itemprop="text">
<p>I am working on a simple automation script in Python, which could throw exceptions in various spots. In each of them I would like to log a specific message and exit the program. In order to do that, I raise SystemExit after catching the exception and handling it (performing specific logging operations and such).</p>
<p>In the top-level calling of main, I do the following:</p>
<pre><code>if __name__ == "__main__":
    try:
        main()
    except SystemExit:  # handled exception
        sys.exit(1)
    except:  # any unhandled exception
        logging.error('Unexpected error: ', exc_info=True)
        sys.exit(2)
</code></pre>
<p>However, using a bare except is something frowned upon. Is using an "exception tree" where I use a bare except to specify "anything but the exception that I've handled" a nonstandard way? Is there a better way to achieve this? I would still like to log these unhandled exceptions, even if they were not handled.</p>
<p>Edit: SystemExit is raised to note that an exception has been handled - no matter what the exception is in my case, I always want to stop running the scripts as any failure should result in an absolute failure.</p>
<p>The main reason I'm asking this is that PEP8 seems to consider using a bare except as an error, and even though I could use except BaseException, it should be just a syntactic difference. Is one way more standard than the other or is there another standard route of achieving this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Bare exceptions trap things you do not want to trap, such as <code>GeneratorExit</code>. Do it this way:</p>
<pre><code>except Exception as details:
    logging.error('Unexpected error: {0}'.format(details))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The main issue with a bare except is that it can catch things like SystemExit  and KeyboardInterrupt which are not standard 'code' errors and shouldn't usually be handled in the same way as an exception generated by your code. Using the Exception class doesn't cover those cases as they do not inherit from it, so it is more than a syntax difference.</p>
<p><a href="https://docs.python.org/2/howto/doanddont.html#except" rel="nofollow noreferrer">https://docs.python.org/2/howto/doanddont.html#except</a>
<a href="https://docs.python.org/3.1/howto/doanddont.html#except" rel="nofollow noreferrer">https://docs.python.org/3.1/howto/doanddont.html#except</a></p>
<p>If you want to handle those specific cases, then it is better to do so explicitly as you have done for SystemExit.</p>
</div>
<span class="comment-copy">btw i think a better way to stop your code and break out (which i think is what you're using SystemExit for here?) is to define your own error and raise that.</span>
<span class="comment-copy">That is indeed a possible way - wouldn't it be better to use BaseException for this instead of Exception, as I'd be trying to log any unhandled exception?</span>
<span class="comment-copy">No, the whole point of using <code>Exception</code> rather than <code>BaseException</code> is that <code>BaseException</code>s include the ones you don't normally want to trap.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/exceptions.html#SystemExit" rel="nofollow noreferrer"><b><code>SystemExit</code></b></a> and <a href="https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt" rel="nofollow noreferrer"><b><code>KeyboardInterrupt</code></b></a> quite clearly <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" rel="nofollow noreferrer">inherit from <code>BaseException</code></a></span>
<span class="comment-copy">Sorry, I meant the base 'Exception class' rather than 'BaseException' class. Will update,</span>
