<div class="post-text" itemprop="text">
<p>I am reading a file (test.json) that contains JSON objects NOT separated by commas</p>
<pre><code>{
   "ID": "349878",
   "Name": user1
   "object_name": [
        "Vessel",
        "Sherds"]
}
{
   "ID": "349879",
   "Name": user2
}
{
   "ID": "349880",
   "Name": user3
}
</code></pre>
<p>I wish to store each object in separate file  -  where ID is its file name.</p>
<p><strong>Example</strong> : file 349878.json should contain </p>
<pre><code>{
   "ID": "349878",
   "Name": user1
   "object_name": [
        "Vessel",
        "Sherds"]
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming your JSON data is correctly validated like this:</p>
<pre><code>[
    {
       "ID": "349878",
       "Name": "user1",
       "name": [
            "Vessel",
            "Sherds"]
    },
    {
       "ID": "349879",
       "Name": "user2"
    },
    {
       "ID": "349880",
       "Name": "user3"
    }
]
</code></pre>
<p>Which you can verify with <a href="https://jsonformatter.curiousconcept.com/" rel="nofollow noreferrer">JSON Formatter and Validator</a>. </p>
<p>You can extract each JSON object from <a href="https://docs.python.org/3/library/json.html#json.loads" rel="nofollow noreferrer"><code>json.loads()</code></a>, and write each object to a separate file with <a href="https://docs.python.org/3/library/json.html#json.dump" rel="nofollow noreferrer"><code>json.dump()</code></a>:</p>
<pre><code>from json import loads
from json import dump

with open("test.json") as json_file:
    data = loads(json_file.read())

    for obj in data:
        with open(obj["ID"] + ".json", mode="w") as out_file:
            dump(obj, out_file, indent=4)
</code></pre>
<p>Which will produce the following JSON files:</p>
<p><em>349878.json</em>:</p>
<pre><code>{
    "ID": "349878",
    "Name": "user1",
    "name": [
        "Vessel",
        "Sherds"
    ]
}
</code></pre>
<p><em>349879.json</em>:</p>
<pre><code>{
    "ID": "349879",
    "Name": "user2"
}
</code></pre>
<p><em>349880.json</em>:</p>
<pre><code>{
    "ID": "349880",
    "Name": "user3"
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't know why your json is invalid, since you put "NOT" separated comma as requirements, I hope this one can make clear your problem.</p>
<pre><code>import re

regex = r"\{(.*?)\}"

test_str = ("{\n"
            '"ID": "349878",\n'
            '"Name": user1\n'
            '"object_name": [\n'
            '"Vessel",\n'
            '"Sherds"]\n'
            "}\n"
            "{\n"
            '"ID": "349879",\n'
            '"Name": user2\n'
            "}\n"
            "{\n\n"
            '"ID": "349880",\n'
            '"Name": user3\n'
            "}")

matches = re.finditer(regex, test_str, re.MULTILINE | re.DOTALL)

for matchNum, match in enumerate(matches):
    for groupNum in range(0, len(match.groups())):
        with open("{}.txt".format(match.group(1)[7:17].replace(",", "").strip()), 'w') as fout:
            fout.write(match.group(0))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could likely use str.split() and use slices to find the id and create the files. If you didnt remove the whitespace you could just use a different index.</p>
<pre><code>with open('test.json', 'r') as file:
# Get text without whitespace or newlines
text = file.read().replace(' ', '').replace('\n', '')
# Split by '{', discard first entry (will be empty)
objects = text.split('{')[1:]

for object in objects:
    # Add the split delimiter back
    object = '{' + object
    # Get the id relative to the json data
    id = object[ object.find('"ID"') + 6 :
                object.find('"Name"') - 2 ]
    # Add the file extension
    id += '.json'

    # If the file doesnt exist, create it and write the data
    with open(id, 'x') as file:
        file.write(object)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if your json is valid please make sure json is loaded properly. as we can see your json is not properly validated. So before implementing any solution make sure your json file is properly validated.</p>
<p>I assume your file is properly loaded after that you can do some manipulation on it like below.</p>
<p><div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>var str='{"ID": "349878","Name": "user1","object_name":["Vessel","Sherds"]}{"ID": "349879","Name": "user2"}{"ID": "349880","Name": "user3"}'
var indices= [];
var secondIndices=[];
var newString='';
for(var i=0; i&lt;str.length;i++) {
    if (str[i] === "{") indices.push(i);
	if (str[i] === "}") secondIndices.push(i);
}
for(var i=0;i&lt;indices.length;i++)
{
   newString+=(str.substring(indices[i],(secondIndices[i]+1))+",");
}
newString="["+newString.substring(0,newString.lastIndexOf(","))+"]";
var JSONObj=JSON.parse(newString);
console.log(JSONObj);</code></pre>
</div>
</div>
</p>
</div>
<span class="comment-copy">You need to figure out some pattern in your data if it's not in proper format. Try to see if you can convert the objects in a way that, they occupy the same amount of lines. Then you can group them.</span>
<span class="comment-copy">That JSON is just plain invalid. You can check this with <a href="https://jsonformatter.curiousconcept.com/" rel="nofollow noreferrer">JSON Formatter &amp; Validator</a></span>
<span class="comment-copy">There is no such thing as <i>"JSON with missing comma"</i>. That is simply <i>not JSON</i>. If you want to use proprietary formats, you need proprietary parsers. That can be done, but wouldn't it be easier to use proper JSON?</span>
