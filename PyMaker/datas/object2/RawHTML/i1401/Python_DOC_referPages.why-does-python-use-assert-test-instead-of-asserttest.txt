<div class="post-text" itemprop="text">
<p>In python2, it's possible to use <code>print 123</code> and <code>print(123)</code>, and both <code>assert True</code> and <code>assert(True)</code>.</p>
<p>In python3, why can't I use <code>print 123</code> while being able to use <code>assert True</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Short answer: <code>assert</code> is not a function.</p>
<p>Long answer:</p>
<p>When python3 came out, it changed(or, removed) <code>print sth</code> syntax, because <code>print</code> became a builtin <strong>function</strong> so it should be <strong>called</strong>.</p>
<p>Although <code>assert</code> can be used like a function(<code>assert(True)</code>), it isn't a function - it actually is a <strong>syntax</strong> in <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow noreferrer">python3 grammar</a>, like print in python2 <a href="https://docs.python.org/2.7/reference/grammar.html" rel="nofollow noreferrer">was</a>.</p>
<p>Unlike <code>print</code>, of which the type is <code>class 'builtin_function_or_method'</code> when you execute <code>type(print)</code>, when you try to <code>type(assert)</code> or <code>type(if)</code> you'll get this:</p>
<pre><code>SyntaxError: invalid syntax
</code></pre>
<p>So you can't use <code>print 123</code> while using <code>assert True</code> because these two are different.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2, both <code>print</code> and <code>assert</code> are statements (like <code>if</code>, <code>while</code>, <code>def</code>, etc). In this case, the parens are not interpreted as the function call operator but just as plain parens, forcing the evaluation of their content, which in this case is a no-op and is actually considered unpythonic.</p>
<p>In Python 3, <code>print()</code> became a function so you <em>must</em> call it. <code>assert</code> is still a statement so it works just like in Python 2.</p>
</div>
