<div class="post-text" itemprop="text">
<pre><code>def checkandremoveboth():
    dirpath = "C:\Adialapps\CRMV3', 'C:\Adialapps\CRMV2"
if os.path.exists(dirpath) and os.pathisdir(dirpath):
    shutil.rmtree(dirpath)
</code></pre>
<p>This formatting looks correct but not working?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os, shutil

def remove_dirs(dirs):
    for dir in dirs:
        shutil.rmtree(dir, ignore_errors=True) # https://docs.python.org/3/library/shutil.html#shutil.rmtree

dirs = ["C:\Adialapps\CRMV3', 'C:\Adialapps\CRMV2"]
remove_dirs(dirs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A better-way and clean way with loop rather than checking each path manually .</p>
<pre><code>import os

def check_and_remove(pathsList):
    for path in pathsList:
        if os.path.exists(path) and os.path.isdir(path):
            shutil.rmtree(dir,ignore_errors=True)
            print("Deleted")
        else:
            print(path, " directory not found")


dirs_to_delete = [
    'C:\Adialapps\CRMV3',
    'C:\Adialapps\CRMV2'
]

check_and_remove(dirs_to_delete)
</code></pre>
</div>
<span class="comment-copy">What does "not working" mean? What error message or unexpected behavior do you see?</span>
<span class="comment-copy">Also, you have a race condition here. You check that the path exists but there's no reason it can't be removed by a different process after the check, but before the script executes <code>shutil.rmtree</code>. It would be better to use a <code>try</code>/<code>except</code> block to just delete the directories and catch any errors. You can also call it with <code>ignore_errors=true</code> to suppress exceptions if the path doesn't exists, although you do risk hiding other errors, like incorrect permissions.</span>
<span class="comment-copy">Did you mean to keep his mismatched parentheses?</span>
<span class="comment-copy">I couldn't fully understand the the original code, but the problem seemed clear.</span>
