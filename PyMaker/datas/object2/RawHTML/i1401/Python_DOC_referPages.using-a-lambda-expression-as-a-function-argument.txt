<div class="post-text" itemprop="text">
<p>I am having trouble understanding how lambda expressions work when they are used as function arguments. For example:</p>
<pre><code>import re
rep = {"hi": "hello", "ya": "you"}
text = 'hi how are ya'
keys = re.compile('hi|ya')
text = keys.sub(lambda m: rep[m.group(0)], text)
print(text)
</code></pre>
<p>replaces 'hi' and 'ya' with 'hello' and 'you', returning</p>
<blockquote>
<pre><code>"hello how are you"
</code></pre>
</blockquote>
<p>I am confused as to why this works because we never specified what values <code>m</code> takes and how the <code>re.sub()</code> function interprets this when the first argument is supposed to be a string.</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">Python documentation</a>:</p>
<blockquote>
<p>If <em>repl</em> is a function, it is called for every non-overlapping occurrence of <em>pattern</em>. The function takes a single match object argument, and returns the replacement string.</p>
</blockquote>
<p>You can think of lambdas as single-line functions as they're functionally equivalent, so</p>
<pre><code>lambda m: rep[m.group(0)]
</code></pre>
<p>becomes</p>
<pre><code>def unnamed_function(m):
    return rep[m.group(0)]
</code></pre>
<p>and <code>m</code> is assigned as a function argument.</p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to iBug's nice answer, you say why the first argument can work with a non-string object, this is also the case with <code>timeit</code>, and other stuff.</p>
<p>Also, <code>lambda</code>s are equivalent to functions, so basically you're putting a function, even if you manually did a function and put the function name in it, it will work.</p>
<p>Note: there's a non-regex no-module way of doing this thing:</p>
<pre><code>' '.join([rep.get(i,i) for i in text.split()])
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; rep = {"hi": "hello", "ya": "you"}
&gt;&gt;&gt; text = 'hi how are ya'
&gt;&gt;&gt; ' '.join([rep.get(i,i) for i in text.split()])
'hello how are you'
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">A <code>lambda</code> expression is just an anonymous function, any lambda function can be written as a full function definition. Note, in full function definitions, you don't specifiy what values the parameters take either (well, you can use type <i>hints</i> but you are free to ignore those, you get the point). Anyway, <code>regex.sub</code> is written to accept an argument that is a function. that's why it works. You can write your own functions that are suppose to take other functions and do stuff with them. try it</span>
