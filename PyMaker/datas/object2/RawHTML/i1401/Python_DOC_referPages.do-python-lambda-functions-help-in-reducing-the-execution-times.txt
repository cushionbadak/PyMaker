<div class="post-text" itemprop="text">
<p>It is understood that <em>Python</em> <em>lambda</em> <em>functions</em> help in creating anonymous functions.  These can be used in other functions like map(), reduce(), filter() and key() in sorting functions. It can also be used to demonstrate and utilise lexical closures.  </p>
<p>What I would like to specifically know here is, do lambda functions have a specific advantage over regular functions in terms of their execution times, <em>considering all the other factors to be unchanged</em>? </p>
<p>As I am new to Python, I have tried to understand them by analogously comparing them with the inline functions of C++.  Inline functions, as I understand from C++, are useful in saving time as they do not require the necessary "housekeeping tasks" concerned with context switching that occur during function calls and jumps.<br/>
Do Python Lambda functions provide with such similar advantages over regular functions?</p>
<p>Some relevant posts that I found useful but not necessarily helpful for my question:
<a href="https://stackoverflow.com/q/890128/3491050">Why are Python lambdas useful?</a>
<a href="https://stackoverflow.com/q/3259322/3491050">Why use lambda functions?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>No. The function objects generated by <code>lambda</code> behave exactly like those generated by <code>def</code>. They do not execute any faster. (Also, <code>inline</code> in modern C++ is no longer a directive telling the compiler to inline a function, and has very little to do with inlining.)</p>
<p>If you want, you can take a look at the bytecode disassembly for a <code>lambda</code> and an equivalent <code>def</code>:</p>
<pre><code>import dis

dis.dis(lambda x: x + 2)

print()
def f(x): return x + 2

dis.dis(f)
</code></pre>
<p><a href="https://ideone.com/SuKF22" rel="noreferrer">Output</a>:</p>
<pre><code>  3           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (2)
              6 BINARY_ADD
              7 RETURN_VALUE

  6           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (2)
              6 BINARY_ADD
              7 RETURN_VALUE
</code></pre>
<p>No difference. You can also time them:</p>
<pre><code>import timeit

def f(x): return x + 2
g = lambda x: x + 2

print(timeit.timeit('f(3)', globals=globals()))
print(timeit.timeit('g(3)', globals=globals()))
</code></pre>
<p><a href="https://ideone.com/arLh4S" rel="noreferrer">Output</a>:</p>
<pre><code>0.06977041810750961
0.07760106027126312
</code></pre>
<p>The lambda actually took longer in this run. (There seems to be some confusion in the comments about whether we're timing enough work to be meaningful. <code>timeit</code> wraps the timed statement in a <a href="https://docs.python.org/3/library/timeit.html#timeit.timeit" rel="noreferrer">million-iteration loop</a> by default, so yes, we are.)</p>
<p>Before you ask, no, <code>lambda</code> has no performance disadvantage over <code>def</code> either. The winner of the above race is basically up to luck. <code>lambda</code> and <code>def</code> do have a significant disadvantage over avoiding the use of a callback function entirely, though. For example, <code>map</code>-with-<code>lambda</code> has a significant performance penalty relative to list comprehensions:</p>
<pre><code>import timeit

print(timeit.timeit('list(map(lambda x: x*x, range(10)))'))
print(timeit.timeit('[x*x for x in range(10)]'))
</code></pre>
<p><a href="https://ideone.com/sO0O2I" rel="noreferrer">Output</a>:</p>
<pre><code>1.5655903220176697
0.7803761437535286
</code></pre>
<p>Whether <code>lambda</code> or <code>def</code>, Python functions are expensive to call.</p>
</div>
<span class="comment-copy">Yes if you just want to return something from the function you should prefer lambda.</span>
<span class="comment-copy">Currently, accepting user2357112's answer until a better explanation is put forward.  Thanks everyone!</span>
<span class="comment-copy">"map-with-lambda has a significant performance penalty relative to list comprehensions". We don't say that enough</span>
<span class="comment-copy">@user2357112 Thanks for your reply. The bytecode disassembly and timing outputs are revealing.  My current understanding is: lambdas are not particularly advantageous over def functions.  They help to make the code more readable(if not always, at least sometimes).  It is also a legacy of functional programming choices - Thanks!</span>
<span class="comment-copy">@Jean-FrançoisFabre: maybe, although just looking at the two lines of code side-by-side I prefer the list comprehension regardless of performance. So there's normally no need to talk about it!</span>
<span class="comment-copy">ok let me say it again :) <code>list+map+lambda</code> combination is there only for so-called experts to boast over how well they understand python, where list comprehensions are there only because they're easy to understand.</span>
<span class="comment-copy">@Jean-FrançoisFabre: agreed, and specifically I'd say that <code>list+map+lambda</code> is there to prove that there's something else (probably one or more functional languages) that you're more expert in than you are in Python.</span>
