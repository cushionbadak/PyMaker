<div class="post-text" itemprop="text">
<p>How do i make the the program run every time the timestamp in seconds is 45, currently I am using time.sleep, but my run time tends to vary a little bit every time the program is executed and i would like it to execute again if the timestamp is on the 45th second. Currently I have something like this where the run loop commences every 60 seconds, however I would like it to run the loop when the timestamp seconds slot == 45</p>
<pre><code>def run_loop(self):
    while True:
        sys.stdout.write("-----\n")
        sys.stdout.flush()

        start = time.time()
        self.takeProfit()
        self.place_orders()
        end = time.time()
        print("runtime is ", end - start)
        sleep(60)
def run():
    # Try/except just keeps ctrl-c from printing an ugly stacktrace
    ei = ExchangeInterface()
    try:
        ei.run_loop()
    except (KeyboardInterrupt, SystemExit):
        sys.exit()

ExchangeInterface.run()
</code></pre>
<p>My run time at the moment tends to be around 18-20 seconds</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <code>datetime</code> module, and check if <code>datetime.now().second == 45</code>.</p>
<p>E.g.</p>
<pre><code>from datetime import datetime

if datetime.now().second == 45:
    do_stuff()
</code></pre>
<p>In your case you would use some logic to check every X amount of time if we are at the 45th second.</p>
</div>
<div class="post-text" itemprop="text">
<p>So I assume you specifically mean run an event at the 45-th second of the minute?</p>
<p>That sounds like you want to do event scheduling:
<a href="https://docs.python.org/3/library/sched.html" rel="nofollow noreferrer">https://docs.python.org/3/library/sched.html</a></p>
<p>In the example on that page, they only use the <code>enter</code> method of the scheduler and not <code>enterabs</code>, which is what you should be using.</p>
<p>For that, you need to figure out the time that's at 45 seconds from the current minute. Some simple math gives that:</p>
<pre><code>t = time.time()
minute = 60 * (t \\ 60) #Use integer division!
s.enterabs(minute + 45, ...)
s.run()
</code></pre>
<p>The stuff inside the <code>...</code> specifies what you want to run/schedule, just read up on the package doc to figure out the format.</p>
<p>Then just put that scheduling into your loop and it should all be good, and no need for the <code>sleep(60)</code> no more.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to implement scheduler that will call your function each 45 seconds.</p>
<p>We can user python's <a href="https://docs.python.org/3/library/threading.html#timer-objects" rel="nofollow noreferrer">threading.Timer</a> class to implement simple scheduler:</p>
<pre><code>class Scheduler(Timer):
    def __init__(self, func, args=None, kwargs=None, interval=60):
        super().__init__(interval, func, args=args, kwargs=kwargs)

    def run(self):
        while not self.finished.is_set():
           self.finished.wait(self.interval)
           self.function(*self.args, **self.kwargs)

def func(self):
    sys.stdout.write("-----\n")
    sys.stdout.flush()

    start = time.time()
    self.takeProfit()
    self.place_orders()
    end = time.time()
    print("runtime is ", end - start)

def run():
   # Try/except just keeps ctrl-c from printing an ugly stacktrace
   scheduler = Scheduler(func, interval=45)
   scheduler.start()
   try:
      while True:
         sleep(1) # just idle loop to demonstrate that how scheduler working
   except (KeyboardInterrupt, SystemExit):
      scheduler.cancel()
      sys.exit()

ExchangeInterface.run()
</code></pre>
</div>
<span class="comment-copy">I'd recommend posting your current working code, with specifics about what works and what doesn't work.</span>
<span class="comment-copy"><a href="https://apscheduler.readthedocs.io/en/latest/modules/triggers/interval.html#module-apscheduler.triggers.interval" rel="nofollow noreferrer"><code>sched.add_job(job_function, 'interval', minutes=1, start_date='2018-12-5 00:00:45')</code></a>, perhaps?</span>
<span class="comment-copy">Simple: <code>time.sleep(45 - runtime)</code>; more accurate: calculate the next 45s interval end and sleep for the difference to that point.</span>
<span class="comment-copy">How many times will the loop loop in that one second?</span>
<span class="comment-copy">My runtime is 18-20 seconds, so this worked perfect for me. Thank You!!</span>
<span class="comment-copy">@mypetlion I'd avoid putting this check in a <code>while True</code> loop, if that's what you're thinking about.</span>
