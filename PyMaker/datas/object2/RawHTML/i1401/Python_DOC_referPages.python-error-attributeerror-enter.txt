<div class="post-text" itemprop="text">
<p>So, I can't load my json file and I don't know why, can anyone explain what I'm doing wrong?</p>
<pre><code>async def give(msg, arg):
    if arg[0] == prefix + "dailycase":
                with open("commands/databases/cases.json", "r") as d:
                     data = json.load(d)
</code></pre>
<p>For some reason I'm getting this error:</p>
<pre><code>    with open("commands/databases/cases.json", "r") as d:
AttributeError: __enter__
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Most likely, you have reassigned the Python <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">builtin <code>open</code> function</a> to something else in your code (<em>there's almost no other plausible way this exception could be explained</em>).</p>
<p>The <code>with</code> statement will then attempt to use it as a <a href="https://docs.python.org/3/reference/datamodel.html#context-managers" rel="nofollow noreferrer">context manager</a>, and will try to call its <code>__enter__</code> method when first entering the <code>with</code> block. This then leads to the error message you're seeing because your object called <code>open</code>, whatever it is, doesn't have an <code>__enter__</code> method.</p>
<hr/>
<p>Look for places in your Python module where you are re-assigning <code>open</code>. The most obvious ones are:</p>
<ul>
<li>A function in the global scope, like <code>def open(..)</code></li>
<li>Direct reassignment using <code>open =</code></li>
<li>Imports like <code>from foo import open</code> or <code>import something as open</code></li>
</ul>
<p>The <strong>function</strong> is the most likely suspect, because it seems your <code>open</code> is actually a callable.</p>
<p>To aid you finding what object <code>open</code> was accidentally bound to, you can also try to</p>
<pre><code>print('open is assigned to %r' % open)
</code></pre>
<p>immediately before your <code>with</code> statement. If it doesn't say <code>&lt;built-in function open&gt;</code>, you've found your culprit. </p>
</div>
<span class="comment-copy">Do you have the builtin <code>open</code> defined to something else in your code? Either by assignment (<code>open =</code>) or by importing it from somewhere (<code>from place import open</code>)?</span>
<span class="comment-copy">It's not quite a duplicate, but is relevant: <a href="https://stackoverflow.com/questions/1984325/explaining-pythons-enter-and-exit" title="explaining pythons enter and exit">stackoverflow.com/questions/1984325/â€¦</a></span>
<span class="comment-copy">To test @LukasGraf 's theory: <code>print(open.__doc__)</code> ... if you don't see a massive blob of internal python text, starting with "Open file and return a stream", then his theory is correct.</span>
<span class="comment-copy">@JacobIRR: You can confirm if it's the built-in <code>open</code> by just doing <code>import io</code>, and testing <code>open is io.open</code> (on Python 3, the built-in <code>open</code> aliases <code>io.open</code>).</span>
<span class="comment-copy">@RyanHaining: Not necessarily; <code>__enter__</code> isn't looked up until the item in question is fully constructed; odds are the <code>open</code> call succeeded, it just referenced the wrong <code>open</code>, but once it succeeds, that wrong <code>open</code> isn't on the call stack anymore.</span>
<span class="comment-copy">I double checked all my file's script to see what I did wrong, and nope, I haven't ant variable or import named "open", but I did a mistake and I saw I created a function named "open" and I did not realize. Thank you for the support and sorry about that!</span>
<span class="comment-copy">You're welcome, glad I could help - shadowing a builtin name is a gotcha that tripped up most of us at one time or another ;-)</span>
