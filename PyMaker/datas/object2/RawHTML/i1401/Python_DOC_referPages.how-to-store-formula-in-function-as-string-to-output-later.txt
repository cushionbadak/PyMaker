<div class="post-text" itemprop="text">
<p>I am trying to create a function in which I will store formulas for my converter. When X formula will be needed, it will be called from it. When trying it with simple <strong>0:a+b</strong>  it works when returning, but when trying to store it as string <strong>meters_to_foots</strong>, it doesn't work. I need to have that formula stored as something since I need to output it later.Here is a part of the code which I have problems with. <strong>NameError: name 'meters_input' is not defined</strong></p>
<pre><code>def my_formulas(i):
    switcher={
        0:(meters_input/0.3048)
    }

    return switcher.get(i,"Invalid formula")


distance_pick=input("Please pick one of the current convertions : \n \n1.Meters to X \n2.Inches to X \n3.Feets to X ")
    if(distance_pick=="1"):
        cls()
        distance_choice = input ("Please select which converter would you like to use ! : \n \n1.Meter to Foot \n2.Meter to Yard \n3.Meters to Inches ")
        if(distance_choice=="1"):
            meters_input=float(input("Make sure to enter distance in Meters ! : "))
            my_formulas(0)
            print ("\nYou entered", meters_input , "meters, which is equal to",my_formulas(0),"foots.")
            time.sleep (3)
            cls ()
            read_carefully_message()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To create a function in Python use either lambda functions or the regular function definition. Examples are respectively:</p>
<pre><code>def divide(meters_input):
  return meters_input / 0.3048
</code></pre>
<p>or</p>
<pre><code>divide = lambda meters_input: meters_input / 0.3048
</code></pre>
<p>Generally the regular function definition is preferred since it improves readability. You can define your function mapping as follows:</p>
<pre><code>def my_formulas(i):
    switcher={
        0:divide  # do not write divide()
    }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If these will always be simple functions you can use a <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer"><code>lambda</code></a> expression for this:</p>
<pre><code>def my_formulas(i):
    switcher= {
        0:lambda meters_input: meters_input/0.3048
    }

    return switcher.get(i,"Invalid formula")

my_formulas(0)(27) #88.58267716535433
</code></pre>
<p>If your function lookup will always be a number starting with zero you might be better off storing the functions as an array. You could do something like this as well:</p>
<pre><code>def my_formulas(index):
    def meters2Feet(meters):
        return meters/0.3048

    def hours2Minutes(hours):
        return hours * 60

    def invalid(*args):
        return "Invalid formula"

    lookup = [
        meters2Feet,
        meters2Feet
    ]

    if index &gt;= len(lookup):
        return invalid

    return lookup[index]



my_formulas(0)(27) # 88.58267716535433
</code></pre>
<p>It's a little more complicated, but probably easier to read and understand.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try changing your function to this:</p>
<pre><code>def my_formulas(i):
    switcher = (i/0.3048)

    return switcher
</code></pre>
<p>The "i" in the function is a local variable for the function. In your code you are passing 0 into the my_formulas() function. i then becomes 0, but meters_input is out of scope for the function.</p>
</div>
<span class="comment-copy">Thanks for answering, now I keep getting You entered 1.0 meters, which is equal to &lt;function my_formulas.&lt;locals&gt;.&lt;lambda&gt; at 0x0535B420&gt; foots.</span>
<span class="comment-copy">@Renato you need to call the function with something  like: <code>my_formulas(0)(meters)</code> this gets function zero and calls it with the passed in meters.</span>
