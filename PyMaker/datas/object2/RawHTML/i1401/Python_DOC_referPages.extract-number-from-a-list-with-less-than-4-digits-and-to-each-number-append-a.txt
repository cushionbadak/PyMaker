<div class="post-text" itemprop="text">
<p>I have a file that contains several numbers. </p>
<p>If the number is less than 4 digit longs, we need to extract it and append 0 to the beginning, + a suffix and then append to master list.</p>
<p>ex</p>
<p>DF = [ 1, 23, 333, 4444]</p>
<p>should be </p>
<p>DF = [0001.hk, 0023.hk, 0333.hk, 4444.hk]</p>
<p>The below code works, and helps me accomplish the above task.</p>
<pre><code>Master_List = [Here is where all tickers should be store for some further processing]

def prework1():
    file = 'Path/to/document'
    tickers = []
    read = pd.read_csv(file, names =['IB_Symbol', 'Description', 'Symbol', 
    'Currency'])
    tickers = read['Symbol'].tolist()

    ticker_list = []

    for ticker in tickers:
        if len(ticker) == 1:
            ticker_list.append(ticker)

    ticker_list1 = []

    for ticker in ticker_list:
        string = '000'
        string1 = '.hk'
        tickers1 = [string + ticker + string1]
        ticker_list1.append(tickers1)

    ticker_list2 = []

    for sublist in ticker_list1:
        for item in sublist:
            ticker_list2.append(item)

    return ticker_list2



def prework2():
    file = 'Path/to/document'
    tickers = []
    read = pd.read_csv(file, names =['IB_Symbol', 'Description', 'Symbol', 'Currency'])
    tickers = read['Symbol'].tolist()

ticker_list = []

    for ticker in tickers:
        if len(ticker) == 2:
            ticker_list.append(ticker)

    ticker_list1 = []

    for ticker in ticker_list:
        string = '00'
        string1 = '.hk'
        tickers1 = [string + ticker + string1]
        ticker_list1.append(tickers1)

    ticker_list3 = []

    for sublist in ticker_list1:
        for item in sublist:
            ticker_list3.append(item)

    return ticker_list3


def prework3():
    file = 'Path/to/document'
    tickers = []
    read = pd.read_csv(file, names =['IB_Symbol', 'Description', 'Symbol', 
    'Currency'])
    tickers = read['Symbol'].tolist()

    ticker_list = []

    for ticker in tickers:
        if len(ticker) == 3:
            ticker_list.append(ticker)

    ticker_list1 = []

    for ticker in ticker_list:
        string = '0'
        string1 = '.hk'
        tickers1 = [string + ticker + string1]
        ticker_list1.append(tickers1)

    ticker_list4 = []

    for sublist in ticker_list1:
        for item in sublist:
            ticker_list4.append(item)

    return ticker_list4



test1 = prework1()
test2 = prework2()
test3 = prework3()

print(test1)
print(test2)
print(test3)
</code></pre>
<p>There are a couple of issues with the above approach. </p>
<p>With the above code, it will give me 3 lists, but the result should be only 1 list so I can do some further processing / tasks. </p>
<p>Also, I feel it looks weird and repetitive. It will do what is intended, but is there a way to make it a tad nicer ?</p>
<p>Appreciate all the help !!</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://python-reference.readthedocs.io/en/latest/docs/str/zfill.html" rel="nofollow noreferrer">zfill</a> in a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>:</p>
<pre><code>DF = [1, 23, 333, 4444]


def fill(lst, end='.hk'):
    return [s.zfill(4) + end for s in map(str, lst)]


print(fill(DF))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['0001.hk', '0023.hk', '0333.hk', '4444.hk']
</code></pre>
<p>The above list comprehension is <em>equivalent</em> to:</p>
<pre><code>def fill(lst, end='.hk'):
    result = []
    for s in map(str, lst):
        result.append(s.zfill(4) + end)
    return result
</code></pre>
<p>From the documentation, <a href="https://docs.python.org/3/library/stdtypes.html#str.zfill" rel="nofollow noreferrer">zfill</a>:</p>
<blockquote>
<p>Return a copy of the string left filled with ASCII '0' digits to make
  a string of length width.</p>
</blockquote>
<p>So as the code is calling <code>s.zfill(4)</code> it will append <code>'0'</code> at beginning of the string until the string is of length 4.</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way to do this would be:</p>
<pre><code>&gt;&gt;&gt; result = [f'{i:04}.hk' for i in DF]
&gt;&gt;&gt; result
['0001.hk', '0023.hk', '0333.hk', '4444.hk']
</code></pre>
<p>Read more about format strings in the <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">PEP 498</a> document that introduced them.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has a <code>zfill()</code> function that will add zeroes to the front of a string until the string has the length you want, if you have fewer digits:</p>
<pre><code>&gt;&gt;&gt; '23'.zfill(4)
'0023'
&gt;&gt;&gt; '1234'.zfill(4)
'1234'
</code></pre>
<p>So you could just do:</p>
<pre><code>&gt;&gt;&gt; DF = [ 1, 23, 333, 4444]
&gt;&gt;&gt; D = [ str(i).zfill(4) + '.hk' for i in DF ]
&gt;&gt;&gt; D
['0001.hk', '0023.hk', '0333.hk', '4444.hk']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A cool one liner could be:</p>
<p><code>list(map(lambda x: ('000' + str(x) + '.hk')[-7:], ls))</code></p>
<p>What this does is to add a <code>'000'</code> at the begining of each number, and the suffix at the end. Then it just cuts the first part (as the extension is always the same, you know that the amount of chars that the string has is always seven). This would be:</p>
<p><code>333</code> ==&gt; <code>00033.hk</code> ==&gt; <code>0033.hk</code></p>
<p>In case you are not familiar with the <code>map</code> function, what it does is to apply a function to each element in an iterable, so this will apply this function to each number in this list.</p>
<p>Here's a mini example for you to try:</p>
<pre><code>ls = [1, 23, 333, 4444]
print(list(map(lambda x: ('000' + str(x) + '.hk')[-7:], ls)))
</code></pre>
</div>
<span class="comment-copy">@EricArambula added a link to the documentation and a small explanation</span>
