<div class="post-text" itemprop="text">
<p>handling of zero length matches has changed with python 3.7. Consider the following with python 3.6 (and previous):</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; print(re.sub('a*', 'x', 'bac'))
xbxcx
&gt;&gt;&gt; print(re.sub('.*', 'x', 'bac'))
x
</code></pre>
<p>We get the following with python 3.7:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; print(re.sub('a*', 'x', 'bac'))
xbxxcx
&gt;&gt;&gt; print(re.sub('.*', 'x', 'bac'))
xx
</code></pre>
<p>I understand this is the standard behavior of PCRE. Furthermore, re.finditer() seems to have always detected the additional match:</p>
<pre><code>&gt;&gt;&gt; for m in re.finditer('a*', 'bac'):
...     print(m.start(0), m.end(0), m.group(0))
...
0 0
1 2 a
2 2
3 3
</code></pre>
<p>That said, I'm interested in retrieving the behavior of python 3.6 (this is for a hobby project implementing <a href="https://github.com/GillesArcas/PythonSed" rel="nofollow noreferrer">sed in python</a>).</p>
<p>I can come with the following solution:</p>
<pre><code>def sub36(regex, replacement, string):

    compiled = re.compile(regex)

    class Match(object):
        def __init__(self):
            self.prevmatch = None
        def __call__(self, match):
            try:
                if match.group(0) == '' and self.prevmatch and match.start(0) == self.prevmatch.end(0):
                    return ''
                else:
                    return re._expand(compiled, match, replacement)
            finally:
                self.prevmatch = match

    return compiled.sub(Match(), string)
</code></pre>
<p>which gives:</p>
<pre><code>&gt;&gt;&gt; print(re.sub('a*', 'x', 'bac'))
xbxxcx
&gt;&gt;&gt; print(sub36('a*', 'x', 'bac'))
xbxcx
&gt;&gt;&gt; print(re.sub('.*', 'x', 'bac'))
xx
&gt;&gt;&gt; print(sub36('.*', 'x', 'bac'))
x
</code></pre>
<p>However, this seems very crafted for these examples.</p>
<p>What would be the right way to implement python 3.6 behavior for re.sub() zero length matches with python 3.7?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your solution may be in the <a href="https://pypi.org/project/regex/" rel="nofollow noreferrer">regex egg</a>:</p>
<p><strong>Regex Egg Introduction</strong></p>
<blockquote>
<p>This regex implementation is backwards-compatible with the standard
  ‘re’ module, but offers additional functionality.
  The re module’s behaviour with zero-width matches changed in Python
  3.7, and this module will follow that behaviour when compiled for Python 3.7.</p>
</blockquote>
<hr/>
<p><strong>Installation:</strong> </p>
<pre><code>pip install regex
</code></pre>
<hr/>
<p><strong>Usage:</strong> </p>
<p>With <a href="https://pypi.org/project/regex/" rel="nofollow noreferrer"><code>regex</code></a>, you can specify the version (<code>V0</code>, <code>V1</code>) which regex pattern will be compiled with, i.e.:</p>
<pre><code># Python 3.7 and later
import regex
&gt;&gt;&gt; regex.sub('.*', 'x', 'test')
'xx'
&gt;&gt;&gt; regex.sub('.*?', '|', 'test')
'|||||||||'

# Python 3.6 and earlier
import regex
&gt;&gt;&gt; regex.sub('(?V0).*', 'x', 'test')
'x'
&gt;&gt;&gt; regex.sub('(?V1).*', 'x', 'test')
'xx'
&gt;&gt;&gt; regex.sub('(?V0).*?', '|', 'test')
'|t|e|s|t|'
&gt;&gt;&gt; regex.sub('(?V1).*?', '|', 'test')
'|||||||||'
</code></pre>
<hr/>
<p>Note:  </p>
<blockquote>
<p>Version can be indicated by <code>VERSION0</code> or <code>V0</code> flag, or <code>(?V0)</code> in the
  pattern.</p>
</blockquote>
<hr/>
<p>Sources:</p>
<p><a href="https://bugs.python.org/issue2636" rel="nofollow noreferrer">Regex thread - issue2636</a><br/>
<a href="https://pypi.org/project/regex/" rel="nofollow noreferrer">regex 2018.11.22</a></p>
</div>
<div class="post-text" itemprop="text">
<p>According to the 3.7 What's New,</p>
<blockquote>
<p>The previous behavior can be restored by changing the pattern to <code>r'.+'</code>.</p>
</blockquote>
<p>See <a href="https://docs.python.org/3/whatsnew/3.7.html" rel="nofollow noreferrer">https://docs.python.org/3/whatsnew/3.7.html</a> under "Changes in the Python API". It seems that the solution would therefore be to modify such a regex; it doesn't seem like there's a flag you can pass to <code>re</code> to request this behavior.</p>
</div>
<div class="post-text" itemprop="text">
<p>PCRE (including Python 3.7+) that satisfies the original examples would be:</p>
<pre><code>^a*|a+|(?&lt;!a)$
</code></pre>
<p><a href="https://regex101.com/r/zTpV1t/3" rel="nofollow noreferrer">https://regex101.com/r/zTpV1t/3</a></p>
<p>However, <code>bbaacc</code> would get substituted to <code>xbbxccx</code> (instead of the Python 3.6- version of <code>a*</code> which produced <code>xbxbxcxcx</code>) - it might still be good enough for some people.</p>
</div>
<span class="comment-copy">I must say the new 3.7 behavior makes no sense to me.</span>
<span class="comment-copy">Very cool <code>sed</code> project. If you find a magic <code>sed</code> sometimes ya just gotta use it!</span>
<span class="comment-copy">As I understand, V0 means compatibility with the current python version, V1 means extra functionalities brought by regex. In both cases, for 3.7, this does not give back the behavior of 3.6. Thanks for suggestion anyway.</span>
<span class="comment-copy">That only fixes the second example, not the first.</span>
