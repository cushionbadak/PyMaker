<div class="post-text" itemprop="text">
<p>Suppose I have the following custom exception.</p>
<pre><code>class CustomException(TypeError):
    def __init__(message, code):
        super().__init__(f'{code}: message')
        self.code = code
</code></pre>
<p>How does python know when to catch my exception in the following code?</p>
<pre><code>try:
    x = doSomething(a, b, c)
except CustomException:
    raise
</code></pre>
<p>when I implement the <code>doSomething()</code> function, must it explicitly throw a <code>CustomException</code> in order for it to be caught? Like, for built-in exception classes, code can throw an exception like a KeyError and we don't have to explicitly say <code>raise KeyError</code> whenever we do something with a dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>Any code that raises an exception has done so explicitly, including <code>KeyError</code>. No special handling is needed for custom exceptions versus the built-in types. A <code>try...except</code> can only catch an exception if one has been raised by code executed by any statement inside the <code>try</code>. This includes any further function calls, calls chain together into a callstack. </p>
<p>In the following example</p>
<pre><code>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d['foo']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'foo'
</code></pre>
<p>the <code>KeyError</code> doesn't spring out of nothingness, the Python <code>dict</code> implementation raises that exception explicitly. This may not always be obvious because native code (code implemented in C here) doesn't show up in the Python traceback.</p>
<p>For the <code>d[...]</code> subscription operation the <a href="https://github.com/python/cpython/blob/260ec2c36abd73bac51489108409160427979ede/Objects/dictobject.c#L2012-L2048" rel="nofollow noreferrer"><code>dict_subscript()</code> function</a> calls <a href="https://github.com/python/cpython/blob/260ec2c36abd73bac51489108409160427979ede/Python/errors.c#L146-L158" rel="nofollow noreferrer"><code>_PyErr_SetKeyError(key);</code></a>, a helper function that uses <a href="https://docs.python.org/3/c-api/exceptions.html#c.PyErr_SetObject" rel="nofollow noreferrer"><code>PyErr_SetObject()</code></a>, the C equivalent of <code>raise</code> to raise the <code>KeyError(key)</code> exception.</p>
<p>Catching exceptions works the same for all exception types, custom exceptions are not special here. When an exception is raised the normal code flow is interrupted, and the callstack is unwound until an active <code>try</code> statement is encountered, and then any exception handlers are tested, in order of definition in the source code, with <code>isinstance(active_exception, ExceptionClassBeingHandled)</code>.</p>
<p>If nothing catches the exception, Python continues unwinding the callstack until it reaches the last stack frame, at which point Python would exit with a stack trace if nothing caught the exception.</p>
</div>
<span class="comment-copy">Yes, <b>any</b> exception is only caught if actually thrown.</span>
<span class="comment-copy"><i>You</i> don't say <code>raise KeyError</code>, but <code>dict.__getitem__</code> (effectively) does.</span>
<span class="comment-copy">Exceptions percolate up the call stack, until it is caught. "Caught" can mean rising up and out of your code and reaching the interpreter itself, which responds by exiting.</span>
