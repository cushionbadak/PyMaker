<div class="post-text" itemprop="text">
<p>I was wondering if it's possible to write a function to avoid calling a <code>try ... except</code> block each time for risky functions in Python. </p>
<p>I tried following code but it didn't work:</p>
<pre><code>def e(methodtoRun):
    try:
        methodtoRun.call()
    except Exception as inst:
        print(type(inst))    # the exception instance
        print(inst.args)     # arguments stored in .args
        print(inst)          # __str__ allows args to be printed directly,


def divider(a, b):
    return a / b

e(divider(1,0))
</code></pre>
<p>In this code, Python runs <code>divider(1,0)</code> and tries to pass result as an argument to the <code>e</code> function.</p>
<p>What I wanted to do is to pass a function as an argument and run it in the function <code>try ... except</code> block so that, if any error occurs, I will add the error to a log directly.</p>
<p>Is this possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this .. but it does make code not really better to read. </p>
<p>Your example does not work, because you feed the "result" of the function-call <code>divider(1,0)</code> to <code>e</code>. It never comes to handling the exception because you already called the function and the exception already happened.</p>
<p>You need to pass the function itself and any params to <code>e</code>.</p>
<p>Change it to:</p>
<pre><code>def e(methodtoRun, *args):
    try:
        methodtoRun(*args)    # pass arguments along
    except Exception as inst:
        print(type(inst))    # the exception instance
        print(inst.args)     # arguments stored in .args
        print(inst)          # __str__ allows args to be printed directly,


def divider(a, b):
    return a / b

e(divider,1,0)    # give it the function and any params it needs
</code></pre>
<p>To get:</p>
<pre><code>&lt;type 'exceptions.ZeroDivisionError'&gt;
('integer division or modulo by zero',)
integer division or modulo by zero
</code></pre>
<hr/>
<p>In any serious code review you should get your code back to fix this though. I strongly recommend to not do this - you are only capturing the most general exception and making this construct more flexible will make it horrible to use! </p>
<p>Exceptions should be:</p>
<ul>
<li>handled as locally as possible</li>
<li>as specific as possible </li>
</ul>
<p>your code is doing the exact opposit.</p>
<p>Doku:</p>
<ul>
<li><a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">Exception handling</a> - you copied from there, ref is for others</li>
<li><a href="https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow noreferrer">arbitraty argument lists aka *args</a></li>
<li><a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">unpacking lists</a></li>
</ul>
</div>
<span class="comment-copy">Definitely do not do this. Whenever an exception is raised, you are supposed to handle it otherwise your program cannot continue. If you cannot handle it, then it's an uncorrectable exception and the only thing you can do bubble up the exception and hope the caller can handle it. Instead of trying to create your own logger, you might want to use the one from <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">the standard library</a>.</span>
<span class="comment-copy">Hi, as i add below also in comment, i need this only for cases that logging will be enough, no other action is needed. but for other cases that i need to handle the exception, definitely i need separate exception handling to take care the independent case. Thanks for your comment.</span>
<span class="comment-copy">Hi Thanks a lot, I do agree to handle exceptions for each issue independently, but what i needed is for exceptions that i only need to write down to debug.log, and doesn't require any other specific action. only important think it should not break the program and let me know that something happend</span>
