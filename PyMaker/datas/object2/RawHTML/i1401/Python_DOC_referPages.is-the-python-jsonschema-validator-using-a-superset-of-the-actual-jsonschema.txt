<div class="post-text" itemprop="text">
<p>When using Python <a href="https://github.com/Julian/jsonschema/" rel="nofollow noreferrer">jsonschema</a> it is possible to define schemas and instances that cannot be expressed in valid JSON.</p>
<pre><code>&gt;&gt;&gt; import jsonschema
&gt;&gt;&gt; schema = {
...   "type": "object",
...   "properties": {"1": {}, 2:{}},
...   "additionalProperties": False
... }
</code></pre>
<p>Now</p>
<pre><code>&gt;&gt;&gt; jsonschema.validate({"1": "spam", 2: "eggs"}, schema)
</code></pre>
<p>does not raise an exception, while the code below fails:</p>
<pre><code>&gt;&gt;&gt; jsonschema.validate({1: "spam"}, schema)
Traceback (most recent call last):
   ...
jsonschema.exceptions.ValidationError: Additional properties are not allowed (1 was unexpected)

Failed validating 'additionalProperties' in schema:
    {'additionalProperties': False,
     'properties': {2: {}, '1': {}},
     'type': 'object'}

On instance:
    {1: 'spam'}
</code></pre>
<p>I'm a little confused here: the Python mapping <code>{"1": "spam", 2: "eggs"}</code> cannot be serialised in a valid JSON object, and the same applies to the <code>schema</code> mapping above. (In JSON objects are name/value mapping where the name has to be a string, and cannot be an integer or another data type).</p>
<p>Is this intended behaviour, i.e. the jsonschema semantics is extended to include more general python data types, or is the above use of <code>schema</code> invalid and should be flagged as an error by the jsonschema library? I read the <a href="https://python-jsonschema.readthedocs.io/en/v2.6.0/" rel="nofollow noreferrer">docs</a>, but was not able to find a mention to this point.</p>
</div>
<div class="post-text" itemprop="text">
<p>The Python jsonschema library, like most JSON Schema libraries, does not in fact operate on JSON. JSON is text. JSON Schema libraries operate generally on language-level objects, ones that JSON libraries deserialize into.</p>
<p>So yes, there are Python dicts you can construct that could never have come from JSON, like the one you have there.</p>
<p>The type though that <code>jsonschema.validate</code> takes is dict-that-came-from-JSON, so yes, if you gave it one that could never be JSON, you are going to get unexpected results (e.g., a current or future version of jsonschema is free to assume all keys are already strings, and you may see TypeErrors from places trying to perform string operations without converting first).</p>
</div>
<span class="comment-copy">What happens if you try to serialise that into just a JSON string? Sounds like a JSON encoding issue rather than a JSON Schema issue.</span>
<span class="comment-copy">@Relequestual In python <code>json.dumps({0: 0})</code> returns <code>'{"0": 0}'</code> (note the quote around the key) so that the roundtrip <code>json.loads(json.dumps({0: 0})) == {0: 0}</code> evaluates to <code>False</code>. This is expected behaviour, documented in the python docs <a href="https://docs.python.org/3/library/json.html#json.dumps" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">OK. I've pinged the module author (he is formally still part of the JSON Schema team, but doesn't drive much now), but I know he's been pretty busy recently. Sorry I don't know python.</span>
<span class="comment-copy">To be more explicit: if I pass to <code>jsonschema.validate</code> a non-JSON dict (<code>loads(dumps(schema)) != schema</code>) results are undefined? Maybe this could be documented, or at least for trivial cases a <code>TypeError</code> raised. THX for the answer and the library.</span>
<span class="comment-copy">Correct. In cases where there's a way to provide working behavior <i>outside</i> of the spec that doesn't affect the behavior <i>inside</i> of the spec (in this case the JSON spec), in general I've been happy to do so (and tried to do so, which is why e.g. support for specifying new types like <code>decimal.Decimal</code> or <code>YourNewFunType</code> exists), but that's the general answer in any other case.</span>
<span class="comment-copy">I think this has come up a few times, so happy to document it. An issue ticket would be helpful if you don't mind filing it. And you're welcome!</span>
