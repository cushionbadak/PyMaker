<div class="post-text" itemprop="text">
<p>So I am on a problem.
I have this function where I get a list containing dictionaries as an input and the output should be a new dictionary with keys that are all in the input dictionaries and as value a list which contains all the values the keys had.</p>
<p>E.G.</p>
<pre><code>d1 = {1: 10, 2: 20, 3: 30, 4: 40, 5: 50}

d2 = {1: 20, 3: 60, 5: 100}

d3 = {1: 10, 7: 70, 5: 55}

print find_intersection([d1, d2, d3])
# prints {1: [10, 10, 20], 5: [50, 55, 100]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you find the <code>keys()</code> intersection first, you can make the dictionary with a comprehension.</p>
<p>You can reduce() (thanks UltraInstinct) over the dictionaries with <code>__and__</code> to build the intersection of the keys.</p>
<pre><code>import operator
# python 3
# from functools import reduce

dicts = [
   {1: 10, 2: 20, 3: 30, 4: 40, 5: 50},
   {1: 20, 3: 60, 5: 100},
   {1: 10, 7: 70, 5: 55}
]

keys = reduce(operator.__and__, map(set, dicts)

{k: [d[k] for d in [d1, d2, d3]] for k in keys}

# {1: [10, 20, 10], 5: [50, 100, 55]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this in a single for loop. Any key that is not present in every input dictionary will raise a KeyError </p>
<pre><code>def find_intersection(dicts):
    retval = {}
    for key in dicts[0]:
        try:
            retval[key] = [d[key] for d in dicts]
        except KeyError:
            pass
    return retval
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use<a href="https://docs.python.org/2/library/collections.html" rel="nofollow noreferrer"><code>defaultdic</code></a> and append the values to the keys. After that just look for values with length 3 and you have the key intersections.</p>
<pre><code>from collections import defaultdict
d = defaultdict(list)
d1 = {1: 10, 2: 20, 3: 30, 4: 40, 5: 50}
d2 = {1: 20, 3: 60, 5: 100}
d3 = {1: 10, 7: 70, 5: 55}

for dic in [d1,d2,d3]:
    for k,v in dic.iteritems():
        d[k].append(v)
</code></pre>
<p>d outputs:</p>
<pre><code>defaultdict(list,
    {1: [10, 20, 10],
     2: [20],
     3: [30, 60],
     4: [40],
     5: [50, 100, 55],
     7: [70]})
</code></pre>
</div>
<span class="comment-copy">What have you tried so far?</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">collections.defaultdict</a> and its examples and give it a try.</span>
<span class="comment-copy">.. and if there a variable number of input lists: <code>keys = reduce(operator.__and__, map(set, input_lists)</code>.</span>
<span class="comment-copy">yeah! That's what I was looking for @UltraInstinct. Thanks.</span>
<span class="comment-copy">That's pretty cool. I didn't know that dict.keys() supported the <code>&amp;</code>  operator. Does this work in python 2 as well, or do they need to use dict.viewkeys() instead? The question code uses <code>print</code> as a keyword, so I guess they are not using python 3.</span>
<span class="comment-copy">@MarkMeyer  Sure! Actually, seeing as OP is probably using Python2, you might want to update your answer.</span>
<span class="comment-copy">@HÃ¥kenLid: In python3, yes. In Python2, no (<code>{}.keys()</code> returns a list).</span>
