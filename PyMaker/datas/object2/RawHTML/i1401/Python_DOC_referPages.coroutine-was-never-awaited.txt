<div class="post-text" itemprop="text">
<p>I'm using a simple context manager with an asyncio loop inside:</p>
<pre><code>class Runner:
    def __init__(self):
        self.loop = asyncio.get_event_loop()

    def __enter__(self):
        return self

    def __exit__(self, *args):
        self.loop.close()

    def do_work(self):
        ...
        return self.loop.run_until_complete(asyncio.gather(*futures))
</code></pre>
<p>When I use two Runner objects, I get "Coroutine was never awaited" error. </p>
<pre><code>with Runner() as r:
    r.do_work()

with Runner() as r2:
    r2.do_work()
</code></pre>
<p>Because a loop was closed in the first Runner(r). Everything works if I don't close a loop in <strong>exit</strong>, but I don't need to keep it opened. I know that we can have only one loop in a thread, but why it doesn't wait for run_until_complete?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>why it doesn't wait for run_until_complete</p>
</blockquote>
<p>Probably something like this happens:</p>
<pre><code>import asyncio


async def test():
    await asyncio.sleep(0.1)


if __name__ ==  '__main__':
    loop = asyncio.get_event_loop()

    loop.run_until_complete(test())
    loop.close()

    loop.run_until_complete(test())
</code></pre>
<p>Result:</p>
<pre><code>RuntimeError: Event loop is closed
sys:1: RuntimeWarning: coroutine 'test' was never awaited
</code></pre>
<h2>How to solve this issue?</h2>
<p>Since you're using event loop this way, you can just use new <a href="https://docs.python.org/3/library/asyncio-eventloops.html#asyncio.AbstractEventLoopPolicy.new_event_loop" rel="nofollow noreferrer">event loop</a> each time:</p>
<pre><code>class Runner:
    def __init__(self):
        self.loop = asyncio.new_event_loop()  # *new*_event_loop


    def do_work(self):
        # Make sure all futures are created 
        # with relevant event loop been set as current
        asyncio.set_event_loop(self.loop)

        # ...
        return self.loop.run_until_complete(asyncio.gather(*futures))
</code></pre>
</div>
<span class="comment-copy">Have you tried initializing the loop in the <code>__enter__()</code> method? There you can also track if one loop is already running.</span>
<span class="comment-copy">Please edit the answer to include a <i>runnable</i> minimal example that still shows the problem. (E.g. use <code>asyncio.sleep()</code> for a future, and so on.) That will make it much easier to give a correct answer.</span>
