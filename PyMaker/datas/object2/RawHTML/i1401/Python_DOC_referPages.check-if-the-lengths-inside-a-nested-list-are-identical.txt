<div class="post-text" itemprop="text">
<p>I have a list of lists and I want to calculate first the size of each sub-list and then to see whether all those sub-lists have size 2. Therefore,</p>
<pre><code>my_list = [["obj1", "item1"], ["obj2", "item2", "item1"], ["obj3", "item3"], ["obj4", "item4"], ["obj5", "item5"]]
lengths = [len(x) for x in my_list]
</code></pre>
<p>The list <code>lengths</code> contains the size of each sub-list. How can I check whether all my sub-lists have size two or not? In my example it should fail.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>all</code> with a generator expression.</p>
<pre><code>&gt;&gt;&gt; my_list = [[1, 2], [3, 4], [5]]
&gt;&gt;&gt; all(len(sub) == 2 for sub in my_list)
False
&gt;&gt;&gt; 
&gt;&gt;&gt; my_list[-1].append(6)
&gt;&gt;&gt; all(len(sub) == 2 for sub in my_list)
True
</code></pre>
<p>Or if the length does not have to be two specificly:</p>
<pre><code>&gt;&gt;&gt; subs = iter(my_list)
&gt;&gt;&gt; len_ = len(next(subs))
&gt;&gt;&gt; all(len(sub) == len_ for sub in subs)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can identify the number of unique elements in a list by converting it to a <code>set</code>.  If the length of the set is 1, and the only element of the set is 2, then you know that every list had length 2.</p>
<pre><code>my_list = [["obj1", "item1"], ["obj2", "item2", "item1"], ["obj3", "item3"], ["obj4", "item4"], ["obj5", "item5"]]
lengths = [len(x) for x in my_list]

print(set(lengths))
# {2, 3}

len(set(lengths)) == 1 and set(lengths).pop() == 2
# False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer">all()</a> and <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">map()</a>. Mapping <code>len</code> with <code>my_list</code> to find length of the <code>sub-list</code>.</p>
<pre><code>my_list = [["obj1", "item1"], ["obj2", "item2", "item1"], ["obj3", "item3"], ["obj4", "item4"], ["obj5", "item5"]]
all(i == 2 for i in map(len, my_list))
</code></pre>
<p>Output:</p>
<pre><code>False
</code></pre>
<p>If you want to check all the length is identical.</p>
<pre><code>my_list = [["obj1", "item1"], ["obj2", "item2"], ["obj3", "item3"], ["obj4", "item4"], ["obj5", "item5"]]
len(set(list(map(len, my_list)))) &lt;=1 
</code></pre>
<p>Output:</p>
<pre><code>True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do it in one line:</p>
<pre><code>print(all(map(lambda x:len(x)==2, my_list)))
</code></pre>
<p>First I map an on-fly function that check if the length is two. Then I apply all that returns True if all values are True, else False.</p>
<p>In production code, you could use assert</p>
<pre><code>assert all(map(lambda x:len(x)==2, my_list)), 'Not all have length 2'
</code></pre>
<p>Results:
<img alt="enter image description here" src="https://i.stack.imgur.com/uTlp5.jpg"/></p>
</div>
<div class="post-text" itemprop="text">
<p>You can just run through your list of lengths and check what their lengths are. If all the items in <code>lengths</code> are 2, then true otherwise false:</p>
<pre><code>my_list = [["obj1","item1"], ["obj2","item2", "red" ]]
lengths = [len(x) for x in my_lists]

allLensEqual = True
for I in lengths:
    if I != 2:
        allLensEqual = False
        break
</code></pre>
<p>Alternatively, you could just use the <code>any</code> function.</p>
</div>
<span class="comment-copy">Is not that the first statement is enough?  That one: all(len(sub) == 2 for sub in my_list)</span>
<span class="comment-copy">I want just to check if all the sub-lists have size 2 or not.</span>
<span class="comment-copy">@JoseRamon yes, that's what the first code is doing.</span>
<span class="comment-copy">What about that one  my_list[-1].append(6) I do not get it!</span>
<span class="comment-copy">@JoseRamon This was just to demonstrate that the solution works in both cases. In the first example, the outcome is <code>False</code> because the last list has length 1. In the second example, the outcome is <code>True</code> because I appended another element to the last sublist.</span>
<span class="comment-copy">This certainly works, but keep in mind that this would call len a million times for a list of length 1000000 with the first two sublists already having a different length.</span>
