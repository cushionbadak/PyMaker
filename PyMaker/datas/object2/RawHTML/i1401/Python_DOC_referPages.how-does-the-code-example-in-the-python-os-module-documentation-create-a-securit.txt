<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/os.html#os.access" rel="nofollow noreferrer">documentation</a> for the <code>os</code> module makes the following assertion:</p>
<hr/>
<p>Note</p>
<p>Using access() to check if a user is authorized to e.g. open a file before actually doing so using open() creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it. Itâ€™s preferable to use <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a> techniques. For example:</p>
<pre><code>if os.access("myfile", os.R_OK):
    with open("myfile") as fp:
    return fp.read()
return "some default data"`
</code></pre>
<p>is better written as:</p>
<pre><code>try:
    fp = open("myfile")
except PermissionError:
    return "some default data"
else:
    with fp:
        return fp.read()
</code></pre>
<hr/>
<p>I don't understand how a user "might exploit" the interval.  If <code>open</code> was going to raise an exception, I'm not sure how <code>os.access</code> would prevent that exception from being raised.  Likewise, if the user manipulate the file somehow, why not perform the file manipulation prior to the EAFP version's <code>open</code> command?</p>
<p>I do understand that the second version may be more robust, since <code>os.access</code> may fail to correctly recognize a condition that could raise a <code>PermissionError</code>, but I don't see how the <a href="https://docs.python.org/3/glossary.html#term-lbyl" rel="nofollow noreferrer">LBYL</a> version is less <em>secure</em>.  Can someone explain this?</p>
</div>
<div class="post-text" itemprop="text">
<p>While the <code>access</code>-using code is unsafe, the second code snippet doesn't solve the security issues. These docs should be changed.</p>
<p>The purpose of <code>os.access</code> is to test whether the real user id has permission to access a file when the real and effective user ids are different. The danger with the <code>os.access</code> snippet is that the user could place a file <code>access</code> returns <code>True</code> for in the location being tested, then swap it out for a file <code>access</code> would have returned <code>False</code> for, bypassing the check. Since <code>open</code> uses the effective user id, the <code>open</code> call can still work, bypassing the <code>access</code> check.</p>
<p>The second snippet doesn't solve this problem. Now the user doesn't even need to go through the switcheroo. No part of the second snippet checks the real user id.</p>
</div>
<span class="comment-copy">Thanks for the sanity check.  Do you know if there is a recommended way (in python) to mitigate this risk?  (Or is it as seemingly hopeless as <a href="https://stackoverflow.com/questions/9532499/">validating file names</a>?)</span>
<span class="comment-copy">@K.Nielson: I'm not sure. It mostly matters with setuid scripts, which are <a href="https://unix.stackexchange.com/questions/364/allow-setuid-on-shell-scripts/2910#2910">kind of a security/compatibility mess already</a>, and I'm not sure what the best practices are for such scripts even when the OS supports them. I think you're probably supposed to use <a href="https://docs.python.org/3/library/os.html#os.seteuid" rel="nofollow noreferrer"><code>os.seteuid</code></a> to temporarily set the effective user id to the real user id while opening and reading the file, then set it back afterwards. I don't know if that's fully secure, though.</span>
