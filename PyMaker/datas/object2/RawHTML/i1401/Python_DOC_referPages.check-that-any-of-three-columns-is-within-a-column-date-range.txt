<div class="post-text" itemprop="text">
<p>I have a DataFrame containing three datetime columns:</p>
<hr/>
<pre><code>tp.loc[:, ['Arrival1', 'Arrival2', 'Departure']].head()

        Arrival1            Arrival2           Departure
0 2018-11-26 05:45:00 2018-11-26 12:00:00 2018-1-26 08:00:00
1 2018-11-26 22:00:00 2018-11-27 00:00:00 2018-11-26 23:00:00
2 2018-11-26 05:45:00 2018-11-26 08:15:00 2018-11-26 06:45:00
3 2018-11-26 07:30:00 2018-11-26 10:15:00 2018-11-26 08:30:00
4 2018-12-02 07:30:00 2018-12-02 21:30:00 2018-12-02 08:00:00
</code></pre>
<p>I want to get only the rows of tp whose Arrival 1, Arrival 2 or Departure (any of the three) are within the following column ranges (any of the rows):</p>
<pre><code>db.loc[db['country'] == 'AT']

country        banStartDate          banEndDate
102      AT 2018-12-01 14:00:00 2018-12-01 22:59:00
161      AT 2018-12-01 23:00:00 2018-12-02 21:00:00
51       AT 2018-12-07 23:00:00 2018-12-08 22:59:00
</code></pre>
<hr/>
<p>In this example, I want only row #4 to be retrieved from tp since Arrival2 is within the date range of db.</p>
<p>Is there an easy way to do so?</p>
</div>
<div class="post-text" itemprop="text">
<p>After reading in your dataframes with <code>pd.read_csv()</code>, you can use <code>pd.concat()</code> with a boolean mask and list comprehension, followed by <code>drop_duplicates()</code>:</p>
<pre><code>from io import StringIO
import pandas as pd

df1 = StringIO('''
            Arrival1            Arrival2           Departure
0  2018-11-26 05:45:00  2018-11-26 12:00:00  2018-1-26 08:00:00
1  2018-11-26 22:00:00  2018-11-27 00:00:00  2018-11-26 23:00:00
2  2018-11-26 05:45:00  2018-11-26 08:15:00  2018-11-26 06:45:00
3  2018-11-26 07:30:00  2018-11-26 10:15:00  2018-11-26 08:30:00
4  2018-12-02 07:30:00  2018-12-02 21:30:00  2018-12-02 08:00:00
''')

df2 = StringIO('''
    country        banStartDate          banEndDate
102      AT  2018-12-01 14:00:00  2018-12-01 22:59:00
161      AT  2018-12-01 23:00:00  2018-12-02 21:00:00
51       AT  2018-12-07 23:00:00  2018-12-08 22:59:00
''')

tp = pd.read_csv(df1, sep=r'\s{2,}', engine='python', parse_dates=[0,1,2])
db = pd.read_csv(df2, sep=r'\s{2,}', engine='python', parse_dates=[1,2]).reset_index()

pd.concat([tp.loc[((tp&gt;db.loc[i,'banStartDate']) &amp; (tp&lt;db.loc[i,'banEndDate'])).any(axis=1)] for i in range(db.shape[0])]).drop_duplicates()
</code></pre>
<p>Returns:</p>
<pre><code>             Arrival1            Arrival2           Departure
4 2018-12-02 07:30:00 2018-12-02 21:30:00 2018-12-02 08:00:00
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.any.html" rel="nofollow noreferrer">pandas.DataFrame.any</a> with axis = 'row'(or 1) to find where the dates are between start and end. You will need 3 of these or a for loop for however many 'country' column of db there are.</p>
<p>Also, I believe(I could be wrong) you will need to convert those strings into <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="nofollow noreferrer">python datetime</a> variables. The code would look similar to this;</p>
<pre><code>tp[(datetime.strptime(Start_Date, '%Y-%d-%m %H:%M:%S')&gt; tp &gt;datetime.strptime(End_Date, '%Y-%d-%m %H:%M:%S')).any(axis=1)]
</code></pre>
</div>
<span class="comment-copy">it worked fine, thank you!</span>
