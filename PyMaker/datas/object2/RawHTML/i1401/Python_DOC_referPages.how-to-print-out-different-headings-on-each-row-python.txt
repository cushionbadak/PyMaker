<div class="post-text" itemprop="text">
<p>Currently I have some data:</p>
<pre><code>EXAMPLE_DATA = [
    ['time', 'age', 'height', 'width', 'ethnicity', 'religion'],
    ['18:42:11', '61', '153.9615', '0.8', 'Mixed', 'None'],
    ['18:35:00', '34', '116.4253333', '10.17', 'Mixed', 'None']]
</code></pre>
<p>I have a function called 'example_func' that calls EXAMPLE_DATA[1] e.g: the 2nd row of the data</p>
<p>I then used the code:</p>
<pre><code>def display_data( example_func ):

    for row in example_func:
        print(row)
</code></pre>
<p>This gives the following output:</p>
<pre><code>18:42:11
61
153.9615
0.8
Mixed
None
</code></pre>
<p>I want the following output to be:</p>
<pre><code>Time: 18:42:11
Age: 61
Height: 153.9615
Ethnicity: Mixed
</code></pre>
<p>However, I want to set the headings in my code, and don't want to use the headings from the EXAMPLE_DATA.</p>
<p>As you'll have noticed, I also don't want to display 'Width' or 'Religion' in my final output.</p>
<p>If you need any more information please let me know.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a function that does the job:</p>
<pre><code>def display_data(example_func):

    headings = ['Time', 'Age', 'Height', 'Ethnicity']  # Your headings
    rows = [0, 1, 2, 4]  # The corresponding rows

    for heading, row in zip(headings, rows):  # extracts each heading and the corresponding row
        print(heading + ': ' + example_func[row])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not exactly sure I understand all of your question, but here's a guess:</p>
<pre><code>from collections import namedtuple

EXAMPLE_DATA = [
    ['time', 'age', 'height', 'width', 'ethnicity', 'religion'],
    ['18:42:11', '61', '153.9615', '0.8', 'Mixed', 'None'],
    ['18:35:00', '34', '116.4253333', '10.17', 'Mixed', 'None']]

def display_data(example_func):
    Record = namedtuple('Record', example_func[0])

    for row in example_func[1:]:
        print('Time: {time}\n'
              'Age: {age}\n'
              'Height: {height}\n'
              'Ethnicity: {ethnicity}\n'.format(**Record(*row)._asdict()))

display_data(EXAMPLE_DATA)
</code></pre>
<p>You could write it a little more concisely using <a href="https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals" rel="nofollow noreferrer">f-strings</a> in  Python 3.6+.</p>
<pre><code>def display_data(example_func):
    Record = namedtuple('Record', example_func[0])

    for rec in (Record(*row) for row in example_func[1:]):
        print(f'Time: {rec.time}\n'
              f'Age: {rec.age}\n'
              f'Height: {rec.height}\n'
              f'Ethnicity: {rec.ethnicity}\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use Pandas for your problem. Pandas will automatically handle the data as your requested format. you can modify the output as your wish.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Note</strong>: the following only works if you pass the whole table instead of one row. Oversight on my part, sorry. It's significantly more elegant this way. If you <em>really</em> want it to only work on one row, example code is at the end.</p>
<p>You could make a dictionary, mapping the headings you want to the index they have in <code>EXAMPLE_DATA</code>:</p>
<pre><code> HEADINGS = {'Time':0, 'Age':1, 'Height':2, 'Ethnicity':4}
</code></pre>
<p>With this, you can just run through the keys and display the value at the corresponding index.</p>
<pre><code>def display_data( example_func, headings ):
    for row in example_func:
        for key in headings.keys():
            print(key + ": " + row[headings[key]]
</code></pre>
<p>However, if you want absolute efficiency, you can calculate <code>headings.keys()</code> once and just use it several times. It doesn't matter.</p>
<pre><code>def display_data( example_func, headings ):
    keys = headings.keys()
    for row in example_func():
        for key in keys:
            print(key + ": " + row[headings[key]]
</code></pre>
<p><strong>One-row example code:</strong></p>
<pre><code>def display_data( example_func, headings ):
    keys = headings.keys()
    for row in [example_func()]:
        for key in keys:
            print(key + ": " + row[headings[key]]
</code></pre>
</div>
<span class="comment-copy">Thank you! Everything works other than i'd like it only to display 'Time', 'Age', 'Height' and 'Ethnicity', how can i do this?</span>
<span class="comment-copy">OK...give me a minute.</span>
