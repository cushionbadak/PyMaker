<div class="post-text" itemprop="text">
<p>I have a regex which works perfectly in Python 2:</p>
<pre><code>parts = re.split(r'\s*', re.sub(r'^\s+|\s*$', '', expression)) # split expression into 5 parts
</code></pre>
<p>this regex will split an expression into 5 parts, for example,</p>
<pre><code>'a * b   =     c' will be split into ['a', '*', 'b', '=', 'c'],
'11 + 12 = 23' will be split into ['11', '+', '12', '=', '23'],
'ab   - c = d' will be split into ['ab', '-', 'c', '=', 'd'],
</code></pre>
<p>etc.</p>
<p>But in Python 3 this regex works quite differently,</p>
<pre><code>'a * b   =     c' will be split into ['', 'a','', '*', '', 'b','', '=', '',  'c', ''],
'11 + 12 = 23' will be split into ['', '1', '1', '', '+', '', '1', '2', '', '=', '', '2', '3', ''],
'ab   - c = d' will be split into ['', 'a', 'b', '', '-', '', 'c', '', '=', '', 'd', ''],
</code></pre>
<p>In general, in Python 3, each character in a part will be split into a separate part, and removed spaces(including none existing leading and trailing ) will become an empty part('') and will be added into the part list.</p>
<p>I think this Python 3 regex behavior differs QUITE big with Python 2, could anyone tell me the reason why Python 3 will change this much, and what is the correct regex to split an expression into 5 parts as in Python 2?</p>
</div>
<div class="post-text" itemprop="text">
<p>The ability to split on zero-length matches was added to <code>re.split()</code> in Python 3.7. When you change your split pattern to <code>\s+</code> instead of <code>\s*</code>, the behavior will be as expected in 3.7+ (and unchanged in Python &lt; 3.7):</p>
<pre><code>def parts(string)
    return re.split(r'\s+', re.sub(r'^\s+|\s*$', '', string))
</code></pre>
<p>test:</p>
<pre><code>&gt;&gt;&gt; print(parts('a * b   =     c'))
['a', '*', 'b', '=', 'c']
&gt;&gt;&gt; print(parts('ab   - c = d'))
['ab', '-', 'c', '=', 'd']
&gt;&gt;&gt; print(parts('a * b   =     c'))
['a', '*', 'b', '=', 'c']
&gt;&gt;&gt; print(parts('11 + 12 = 23'))
['11', '+', '12', '=', '23']
</code></pre>
<p>The <code>regex</code> module, a drop-in replacement for <code>re</code>, has a "V1" mode that makes existing patterns behave like they did before Python 3.7 (see <a href="https://stackoverflow.com/a/38620885/18771">this answer</a>).</p>
</div>
<span class="comment-copy">Splitting on a potentially-zero-length pattern is wrong regardless. Not sure how Python2 does what you're saying. Use <code>r'\s+'</code> instead.</span>
<span class="comment-copy">it works similar to python2 in version 3.6 though it warns about the non-empty pattern match, but yeah, use split(r'^\s+',</span>
<span class="comment-copy">@o11c Splitting on non-zero-length patterns is not "wrong", it's quite a useful tool. The fact that Python has not supported this was a poor design decision above anything else, which <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer">luckily got revised in Python 3.7</a>.</span>
