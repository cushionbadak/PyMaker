<div class="post-text" itemprop="text">
<p>Sorry for the bad title, but I didn't know how to formulate it better ^^.</p>
<p>What I'm trying to do is iterate over a <strong>list of objects</strong>, and then iterate over a <strong>list</strong> that's a <strong>member</strong> of each object.</p>
<hr/>
<p>So something like this:</p>
<pre><code>class FooObj:
    def __init__(self):
        self.list = [1, "Hello", 3.4] #some list thats unique for each object

objects = [...] # some list of FooObj's

for o in objects:
   for e in o.list:
        # Do something for each list element
</code></pre>
<hr/>
<p>That's the way I would do it 'traditionally'. I'm interested if there's a way to condensate the two for loops into one?</p>
<p>Thanks for your help ^^</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a> if you really don't care from which <code>FooObj</code> the elements come:</p>
<pre><code>from itertools import chain

for e in chain.from_iterable(o.list for o in objects):
    # Do something for each element
    print(e)
</code></pre>
<p>This has the advantage that it is a generator, so it does not create any (potentially big) intermediate list.</p>
</div>
<div class="post-text" itemprop="text">
<p>If what you want is to iterate over the list for all objects at once, try this:</p>
<pre><code>for i in [o.list for o in objects]:
    print(i)
</code></pre>
</div>
<span class="comment-copy">Depends what you are trying to do.  If you are retrieving a <code>list</code> of <code>list</code>, you can consider using <code>list comprehension</code>.   But if you are actually performing certain actions on the sublists you might as well stick with this.  Either way you will have to iterate through the list of objects and the attribute list.</span>
<span class="comment-copy">It depends what you are doing for each list element. It may be that having 2 <code>for</code> loops is the best way. You can combine both <code>for</code> loops using list comprehensions for example but that's only recommended if you are trying to build a list.</span>
<span class="comment-copy">It would help clarify your question if you can illustrate an example of what you are trying to do with the <code>list</code>.  There can be some perhaps dirtier methods to achieve it without even the double loop.</span>
<span class="comment-copy">Thanks, also a solution, but @Akarius solution is shorter and doesn't require additional dependencies. Appreciate the help though!</span>
<span class="comment-copy">@JakobSachs: Note that the two answer give you different things. This gives you the elements of the lists, while the other answer only gives you the list objects over which you still need to iterate. Also <code>itertools</code> is in the standard library, so it should be always available.</span>
<span class="comment-copy">A thanks yes I can see the difference.  Chance has it that in my application it doesn't make a difference.</span>
<span class="comment-copy">@JakobSachs: In that case why not do <code>for o in objects: print(o.list)</code> directly? No list comprehension needed.</span>
<span class="comment-copy">Because my "# Do something for each element" cant happen on a list but on each element</span>
<span class="comment-copy"><code>i</code> is the <code>list</code> object, not an element</span>
<span class="comment-copy">Thanks, this is what I'm looking for.</span>
<span class="comment-copy">@Graiphers solution is actualy closer to what im looking for</span>
<span class="comment-copy">If you want each element, yes, it's a better solution and you should accept it.</span>
