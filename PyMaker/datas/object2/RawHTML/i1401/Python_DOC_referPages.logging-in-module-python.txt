<div class="post-text" itemprop="text">
<p>In MAIN_SETUP.py program I am importing otherMod2</p>
<p>MAIN_SETUP.py </p>
<pre><code>import logging
import otherMod2


# ----------------------------------------------------------------------
def main():
    """
    The main entry point of the application
    """
    logger = logging.getLogger("exampleApp")
    logger.setLevel(logging.INFO)

    # create the logging file handler
    fh = logging.FileHandler("new_snake.log")

    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    fh.setFormatter(formatter)

    # add handler to logger object
    logger.addHandler(fh)

    logger.info("Program started")
    result = otherMod2.add(7, 8)
    logger.info("Done!")


if __name__ == "__main__":
    main()
</code></pre>
<p>otherMod2.py</p>
<pre><code>import logging

module_logger = logging.getLogger("exampleApp.otherMod2")


# ----------------------------------------------------------------------
def add(x, y):
    """"""
    logger = logging.getLogger("exampleApp.otherMod2.add")
    logger.info("added %s and %s to get %s" % (x, y, x + y))
    return x + y
</code></pre>
<p>If I run the program (MAIN_SETUP.py), new_snake.log file is created, following data is written in the file</p>
<pre><code>2018-12-03 16:21:29,772 - exampleApp - INFO - Program started
2018-12-03 16:21:29,772 - exampleApp.otherMod2.add - INFO - added 7 and 8 to get 15
2018-12-03 16:21:29,772 - exampleApp - INFO - Done!
</code></pre>
<p>Question 1 :</p>
<p>In otherMod2.py , we do have below logger, it's just defined and not used . Can we delete it? Will it have any impact if we delete it.</p>
<pre><code>module_logger = logging.getLogger("exampleApp.otherMod2")
</code></pre>
<p>Question 2:</p>
<p>There is no handler defined for below logger in otherMod2.py but still its writing in new_snake.log file, how this is possible</p>
<pre><code>logger = logging.getLogger("exampleApp.otherMod2.add")
logger.info("added %s and %s to get %s" % (x, y, x + y))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To answer both questions:</p>
<p><strong>Question 1</strong></p>
<p>You can delete the module-level logger <code>exampleApp.otherMod2</code>, however, you might want to keep it so that other code within the module can use it. </p>
<p>Creating a module-level logger is the <a href="https://docs.python.org/3/library/logging.html#logger-objects" rel="nofollow noreferrer">recommended approach</a> - typically by calling <code>logger.getLogger(__name__)</code>. That sets up a logger using the same hierarchy as the module's package structure.</p>
<p><strong>Question 2</strong></p>
<p>Python loggers are constructed within a hierarchy which is determined by the dots in the logger's name. By default, events logged lower down the hierarchy are also passed to loggers higher up the heirarchy. </p>
<p>So although your <code>exampleApp.otherMod2.add</code> logger has no handler, the event is passed up to the top level <code>exampleApp</code> logger which outputs it to the log file.</p>
<p>This behavior is controlled by the <a href="https://docs.python.org/3/library/logging.html#logging.Logger.propagate" rel="nofollow noreferrer"><code>propagate</code></a> attribute. You can set this to <code>False</code> so that higher level loggers won't receive the events.</p>
<pre><code>logger = logging.getLogger("exampleApp.otherMod2.add")
logger.propagate = False
logger.info("added %s and %s to get %s" % (x, y, x + y))
</code></pre>
<p>In that case you would need to attach a handler to <code>exampleApp.otherMod2.add</code> if you wanted it to output anything.</p>
</div>
