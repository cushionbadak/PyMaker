<div class="post-text" itemprop="text">
<p>My problem is to design a Python script which requires the user to input a password, and let Python validate the password is suitable for the conditions or not.</p>
<p>Here are conditions for the password input by users:</p>
<ol>
<li>Begin with letters</li>
<li>at least 6 characters</li>
<li>only allowed letters, numbers, - and _ in password</li>
</ol>
<p>If the conditions match, output Yes. Or else, No.</p>
<p>These are what I have tried:</p>
<pre><code>from sys import exit

def check_alpha(input):
   alphas = 0
   alpha_list = "A B C D E F G H I J K L M N I O P Q R S T U V W X Y Z".split()
   for char in input:
    if char in alpha_list:
        alphas += 1
if alphas &gt; 0:
    return True
else:
    return False

def check_number(input):
numbers = 0
number_list = "1 2 3 4 5 6 7 8 9 0".split()
for char in input:
    if char in number_list:
        numbers += 1
    if numbers &gt; 0:
        return True
    else:
        return False

def check_special(input):
specials = 0
special_list = "_-"
for char in input:
    if char in special_list:
        specials += 1
    if specials &gt; 0:
        return True
    else:
        return False

def check_len(input):
    if len(input) &gt;= 6:
        return True
    else:
        return False

def validate_password(input):
check_dict ={
    'alpha':check_alpha(input),
    'number':check_number(input),
    'special':check_special(input),
    'len':check_len(input)

}
    if check_alpha(input) &amp; check_number(input) &amp; check_sprcial(input) &amp; check_len(input)
    return True
else:
    print"No"

    while True:
    password = raw_input("Enter password:")
    print
    if validate_password(password):
        print("Yes")
    else
        print("No")
</code></pre>
<p>or alternatively:</p>
<pre><code>import re

while True:
    user_input = input("Please enter password:")
    is_valid = False

    if(len(user_input)&lt;6):
        print("No")
        continue
    elif not re.search("[a-z]",user_input):
        print("No")
        continue
    elif not re.search("[0-9]",user_input):
        print("No")
        continue
    elif re.search("[~!@#$%^&amp;*`+=|\;:&gt;&lt;,.?/]",user_input):
        print("No")
        continue
    else:
        is_valid = True
        break

    if(is_valid):
    print("Yes")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I enjoy this particular solution because I find validation to be such a good use of decorators.</p>
<pre><code>def require(pred):
    def wrapper(f):
        def wrapped(*args, **kwargs):
            while True:
                result = f(*args, **kwargs)
                ok = pred(result)
                if ok:
                    return result
        return wrapped
    return wrapper

def begin_with_letters(s):
    return s[0].isalpha()

def length_over_six(s):
    return len(s) &gt;= 6

def no_letters_outside_of_whitelist(s):
    WHITELIST = set(string.ascii_letters + string.digits + '-_')
    return all(c in WHITELIST for c in s)

@require(begin_with_letters)
@require(length_over_six)
@require(no_letters_outside_of_whitelist)
def get_password():
    user_pass = input("Enter a password: ")
    return user_pass
</code></pre>
<p>This architecture can be grown by building a <code>Validator</code> class.</p>
<pre><code>class Validator(abc.ABC):
    errormsg = NotImplemented

    def __init__(self, value):
        self.__value = value

    @property
    def value(self):
        return self.__value

    @abc.abstractmethod
    def validate(self) -&gt; bool:
        """Uses self.value and validates it in some way, returning a bool."""

    @staticmethod
    def require(validator)
        def wrapper(f):
            def wrapped(*args, **kwargs):
                while True:
                    result = f(*args, **kwargs)
                    v = validator(result)
                    ok = v.validate()
                    if ok:
                        return result
                    print(v.errormsg)
            return wrapped
        return wrapper

class BeginWithLetters(Validator):
    errormsg = "Your password must begin with letters."

    def validate(self):
        return self.value[0].isalpha()

class LengthOverSix(Validator):
    errormsg = "Your password must be six characters or longer."

    def validate(self):
        return len(self.value) &gt;= 6

class WhiteListCharacters(Validator):
    WHITELIST = set(string.ascii_letters + string.digits + "-_")
    errormsg = "Your password must only contain letters, digits, - and _"

    def validate(self):
        return all(c in self.WHITELIST for c in self.value)

@Validator.require(BeginWithLetters)
@Validator.require(LengthOverSix)
@Validator.require(WhiteListCharacters)
def get_password():
    return input("Enter a password: ")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suggest you have a look at <code>getpass</code> module. To help you get started, take a look at the following links:<a href="https://www.programcreek.com/python/example/330/getpass.getpass" rel="nofollow noreferrer">getpass (examples series 1)</a>  and <a href="https://pymotw.com/3/getpass/" rel="nofollow noreferrer">examples series 2</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can join the 3 conditions in one line, and avoid the variable <code>is_valid</code>. You also missed the condition of the first character:</p>
<pre><code>import re
user_input = raw_input('Please enter password:')
if len(user_input)&gt;=6 and user_input[0].isalpha() and re.match(r"^[\w-]*$", user_input):
    print('Yes')
else:
    print('No')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>import re

pw = raw_input('Type a password: ') # get input from user

if any([not pw[0].isalpha(),            # check if first char is a letter
       len(pw) &lt; 6,                     # check if len is greater than or equal to 6
       not re.match(r'^[\w-]*$', pw)]): # check if all chars are alphanumeric, underscores, or dashes
    print 'No'
else:
    print 'Yes'
</code></pre>
<p>Sample output for a few test cases:</p>
<pre class="lang-none prettyprint-override"><code>Type a password: qwer
No

Type a password: qwerty
Yes

Type a password: 1a2b3c
No

Type a password: ASDF1234!!!!
No

Type a password: a.a.a.a
No
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re

def validate(password):
    if len(password) &lt; 6  or re.search('^[A-Za-z][A-Za-z0-9-_]*$',password) is None:
        print("password not accepted")
    else:
        print("Your password seems fine")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re

user_input = raw_input('Please enter password:')

if len(user_input)&gt;=6 and user_input[0].isalpha() and re.match(r"^[\w-]*$", user_input):
      print('Yes')
else:
      print('No')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ideal solution for your problem is Regular Expression. Try to validate it in the front-end.
Something like javascript.</p>
<p>For your knowledge, Check the following link in Python Docs.
<a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">https://docs.python.org/3/howto/regex.html</a></p>
</div>
<span class="comment-copy">You should start to show what you tried so we can help you in improving your skills and not doing your homework :)</span>
<span class="comment-copy">So, the assignment is supposed to contain three things: 1) make the user input a password, 2) validate it according to the conditions, 3) print the result. Which part are you stuck with?</span>
<span class="comment-copy">We don't object to <i>helping</i> with homework, if you've had a go and are really stuck somewhere. We do object to "do my homework for me", which is what this question seems to be asking.</span>
<span class="comment-copy">@Hann, Did you try <a href="https://stackoverflow.com/questions/41117733/validation-a-password-python">this</a> post?</span>
<span class="comment-copy">Yeah sure I am sorry :)</span>
<span class="comment-copy">For what it's worth, this isn't a <i>bad</i> solution per say but it's DEFINITELY over-engineered for a homework assignment (thus why it's 50 lines long instead of 6). Sometimes it's fun to over-engineer a solution to something simple so it could be used at the Enterprise level (consider that building new validators and validating new functions with this architecture is very easy and straightforward!) but I don't recommend you turn this in to your professor, or even attempt with any great effort to understand the code I've written here.</span>
<span class="comment-copy">Thanks so much! This is such an amazing answer :D</span>
<span class="comment-copy"><code>getpass</code> is to get input without having it show on the command line, but it seems pretty useless for OP's use case. It's homework, and I'm guessing they are mostly having trouble on the validation part, not getting input (which is trivially easy).</span>
<span class="comment-copy">Okay I will read that. Thank you!</span>
<span class="comment-copy">I thought the conditions cant be joined but now I learned :D Thank you!</span>
<span class="comment-copy">You are welcome :) dont forget to accept the answer that you found most useful <a href="https://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work" title="how does accepting an answer work">meta.stackexchange.com/questions/5234/â€¦</a></span>
<span class="comment-copy">Thank you! After read through your suggestion, I found that I have compliacating the question, your suggestion is simple and nice!</span>
<span class="comment-copy">why not get the whole thing in the regex? <code>if re.match(r"[A-Za-z][A-Za-z0-9-_]{5,}$", password) is None: ... </code></span>
<span class="comment-copy">Can I know what difference between regex and validate.....?</span>
<span class="comment-copy">regex stands for <code>regular expressions</code> and uses the library <code>re</code> to work with srings, characters etc(see <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">docs.python.org/3/library/re.html</a>). <code>validate</code> is a function written by the user</span>
<span class="comment-copy">@Hann does your issue resolved?</span>
<span class="comment-copy">Yeah thanks you all for the help</span>
<span class="comment-copy">This answer has no substance at all. "Something like javascript?" What does that mean? Why do we think this is running in a browser? How would you use a regex to solve this problem?</span>
<span class="comment-copy">Okay I will read that. Thanks so much!</span>
