<div class="post-text" itemprop="text">
<p>I know that the last element of a list say <code>li</code> can be accessed by <code>li[-1]</code> but how exactly does it work in the background? Is it same as <code>li[len(li) - 1]</code></p>
<p>Is there any other way of getting the last element of a list without actually knowing the length of the list? I am looking at this question in terms of efficiency so please suggest any other alternate solutions with less complexity if it exists.</p>
</div>
<div class="post-text" itemprop="text">
<p>You probably want to read this:</p>
<p><a href="https://docs.python.org/2/faq/design.html#how-are-lists-implemented-in-cpython" rel="nofollow noreferrer">https://docs.python.org/2/faq/design.html#how-are-lists-implemented-in-cpython</a></p>
<p>It said,</p>
<blockquote>
<p>CPython’s lists are really variable-length arrays, not Lisp-style
  linked lists. The implementation uses a contiguous array of references
  to other objects, and keeps a pointer to this array and the array’s
  length in a list head structure.</p>
</blockquote>
<p>That's why <code>li[-1]</code> is recommended and most efficient.</p>
</div>
<div class="post-text" itemprop="text">
<p>li[-1] is the fastest and more Pythonic way to do it. </p>
<p>You can do li[-n] to get the <em>nth</em> element starting from the end, it is just an access by index and it is in fact faster than li[len(li) - 1].</p>
<p>If you have a list in python the length is given so li[1] works the same way as li[-1].</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/reference/expressions.html#subscriptions" rel="nofollow noreferrer">docs</a></p>
<blockquote>
<p>The formal syntax makes no special provision for negative indices in
  sequences; however, built-in sequences all provide a <strong>getitem</strong>()
  method that interprets negative indices by adding the length of the
  sequence to the index (so that x[-1] selects the last item of x).</p>
</blockquote>
<p>So yes, internally it DOES work as <code>-1 + len(li)</code></p>
<p>However, here is the kicker. len is a <a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">constant time/O(1) operation</a>, and does not depend on the length of the list. So, negative indexing is really efficient, and really IS the right way you should be accessing elements. That is why it is there after all.</p>
</div>
<span class="comment-copy">Yet even <i>more</i> efficient than <code>li[-1]</code>? In terms of speed? Complexity? Number of keystrokes?</span>
<span class="comment-copy">There is no efficiency concern to be had. Just use <code>[-1]</code></span>
<span class="comment-copy">Although now I'm thinking... lists allocate extra space to expand so maybe it isn't so simple as to dismiss the question off-hand? It would only ever be a micro-optimization at best, but still not so clear how it actually works. Presumably a memory allocation has nothing to do with the indexing itself.</span>
<span class="comment-copy">@usr2564301 Hmm I have mentioned in the question that I am looking for anything with less "complexity if it exists" what is this number of keystrokes saved?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/930397/getting-the-last-element-of-a-list-in-python">Getting the last element of a list in Python</a> "<code>some_list[-1]</code> is the shortest and most Pythonic."</span>
