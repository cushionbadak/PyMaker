<div class="post-text" itemprop="text">
<p>To expand. I am interested in what's happening in the last 4 lines of the code below. I've looked at it for hours now and I can't figure out what's going on. Would appreciate some help.</p>
<p>Code goes something like this:</p>
<pre><code>count_response = {}

def parser_function(log_file):

    with open(log_file, 'r') as log:
        reader = csv.reader(log, dialect='excel', delimiter=' ', quotechar='"')
        line_no = 0
        for line in reader:
            line_no += 1
            if line[0].startswith('#'):
                break
            else:
                a = "a"
                b = "b"
                c = "c"
                d = 0 if line[15] is '-' or None else int(line[15])
                if (a, c, b) in count_response:
                    count_response[a, c, b] = ([count_response[a, c, b][0] + 1, count_response[a, c, b][1] + d])
                else:
                    count_response[a, c, b] = [1, d]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>dict[key] = value</code> is syntactic sugar for <code>dict.__setitem__(key, value)</code>. This is <a href="https://docs.python.org/3/reference/datamodel.html#object.__setitem__" rel="nofollow noreferrer">explained in the docs</a>.</p>
<p>Keys must be hashable, e.g. <code>tuple</code>. Values need not be, e.g. <code>list</code>. In your case, the key is a tuple and the value is a list. Parentheses are not required to define a tuple. So the following are all equivalent:</p>
<pre><code>(a, b, c) = (1, 2, 3)
a, b, c = 1, 2, 3
a, b, c = (1, 2, 3)
(a, b, c) = 1, 2, 3
</code></pre>
<p>Your example <code>count_response[a, c, b] = [1, d]</code> is equivalent to the following:</p>
<pre><code>key = a, c, b
value = [1, 3]
count_response.__setitem__(key, value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I sometimes use a complex number as a simple 2d vector as it supports addition.</p>
<p>You could simplify this code by using a default dictionary, with a complex. Instead of:</p>
<pre><code>count_response = {}

if (a, c, b) in count_response:
    count_response[a, c, b] = ([count_response[a, c, b][0] + 1, count_response[a, c, b][1] + d])
else:
    count_response[a, c, b] = [1, d]
</code></pre>
<p>use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><strong><code>defaultdict</code></strong></a>, which will create a default entry if the key doesn't already have a value. Then you want to add your new vector:</p>
<pre><code>from collections import defaultdict

count_response = defaultdict(complex)

count_response[a, b, c] += complex(1, d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thankyou everyone I think I understand now.</p>
<p>So the dict key for Count_response will be unique combination of the a,c,b variables (in the actual code they are unique for each iteration of the loop), the value assigned to that will be the following list value (count of d value, d value)</p>
</div>
<span class="comment-copy"><code>count_response[a, c, b]</code> is the same as <code>count_response[(a, c, b)]</code> meaning the tuple <code>(a, c, b)</code> is the dictionary key for which its value is read, modified or created.</span>
<span class="comment-copy">I do not understand the question: <i>What does <code>=</code> do in assignment?</i> Well, the answer is it does assignment... Can you please clarify where you have problems in understanding? (Try to look at a smaller isolated example.)</span>
<span class="comment-copy">Thankyou I think I understand. So the dict key will be  unique combination of the a,c,b variables (in the actual code they are unique for each iteration of the loop), the value assigned to that will be "d" ?</span>
<span class="comment-copy">any dict can use immutable types such as tuples for the keys. the value being assigned is <code>[1, d]</code>, a 2 length list, if the key does not exist. (the else block). If the key already exists, the first element is incremented by 1, and second element has d added to it.</span>
<span class="comment-copy">The value is a list, either <code>[1, d]</code> or a modified variant where the previous list items are element-wise added to <code>[1, d]</code></span>
