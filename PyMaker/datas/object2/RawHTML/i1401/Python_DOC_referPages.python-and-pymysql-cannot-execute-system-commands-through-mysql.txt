<div class="post-text" itemprop="text">
<p>I have the following code in Python which connects to a local root database in MySQL using the <code>pymysql</code> library:  </p>
<pre><code>#!/usr/bin/python3
import pymysql

db = pymysql.connect("localhost", "root", "redacted", "redacted")

cursor = db.cursor()
query = "INSERT INTO TestTable (text) VALUES ('test');"
cursor.execute(query)
db.commit()
</code></pre>
<p>The above code works just fine, but if I need to execute system commands (according to MySQL CLI syntax) such as: </p>
<pre><code>query = "system ls -lah;" 
query = "INSERT INTO TestTable (text) VALUES ('test'); system ls -lah;" 
query = "\! ls -lah" 
</code></pre>
<p>I get the following confusing error:</p>
<pre><code>Traceback (most recent call last):
  File "./app.py", line 9, in &lt;module&gt;
    cursor.execute(query)
  File "/usr/local/lib/python3.6/dist-packages/pymysql/cursors.py", line 170, in execute                                                       
    result = self._query(query)
  File "/usr/local/lib/python3.6/dist-packages/pymysql/cursors.py", line 328, in _query                                                        
    conn.query(q)
  File "/usr/local/lib/python3.6/dist-packages/pymysql/connections.py", line 516, in query                                                     
    self._affected_rows = self._read_query_result(unbuffered=unbuffered)                                                                       
  File "/usr/local/lib/python3.6/dist-packages/pymysql/connections.py", line 727, in _read_query_result                                        
    result.read()
  File "/usr/local/lib/python3.6/dist-packages/pymysql/connections.py", line 1066, in read                                                     
    first_packet = self.connection._read_packet()
  File "/usr/local/lib/python3.6/dist-packages/pymysql/connections.py", line 683, in _read_packet                                              
    packet.check_error()
  File "/usr/local/lib/python3.6/dist-packages/pymysql/protocol.py", line 220, in check_error                                                  
    err.raise_mysql_exception(self._data)
  File "/usr/local/lib/python3.6/dist-packages/pymysql/err.py", line 109, in raise_mysql_exception                                             
    raise errorclass(errno, errval)
pymysql.err.ProgrammingError: (1064, "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'system ls -lah' at line 1")
</code></pre>
<p>This could be potentially a security issue implemented in the MySQL service (as I got the same error using other database libraries in python), but if so, how can I tune this setting down?</p>
<p>I am using the newest version of Ubuntu Server (18.10) and MySQL (Ver 14.14 Distrib 5.7.24, for Linux (x86_64)).  </p>
<p>Edit: To clarify a bit, I am very well aware of Python's <code>os</code> or <code>subprocess</code> but I wanted to try the above-mentioned technique through MySQL queries. I've also tried different drivers such as <code>MySQLdb</code>, <code>mysql.connector</code> but all of them with same results.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>system</code> command on the MySQL CLI is a convenience feature that allows you to issue commands for execution on your default command interpreter. It does not need or use a DB connection. It is only available on UNIX systems.<br/>
<em>The CLI is a tool for <strong>administrators or users</strong> to work with a DB. It contains a DB driver, but it also contains a system shell escape; it tries to cover all functionality required to manage a DB.</em></p>
<p><code>pymysql</code> (or any other DB API 2.0 compliant driver package) is built to create connections to databases, get cursors from those connections and execute SQL statements on these cursors. It is not concerned about system shells.<br/>
<em>A DB driver is a software package that allows <strong>developers</strong> to implement SQL query functionality in a programm. It does not need to do more than this, because if the developer needs additional functionality in said programm, they will implement it using the appropriate package.</em></p>
<p>If you want to issue system commands from your Python script, <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a> can be considered the standard package for that.</p>
</div>
<span class="comment-copy">I understand you, and I am fully aware of <code>subprocess</code>, but the goal was to execute system commands through SQL queries for a specific, but viable, reason. However, "It is not concerned about system shells." is what I needed for confirmation. Are you saying that there is no other driver available that is not only meant for <b>developers</b>?</span>
<span class="comment-copy">@bashbin I can't claim that I know all the drivers, but I know quite a few, and none of them does what you want. The MySQL CLI is also not executing system commands through SQL queries. If you issue <code>mysql&gt; system \! ls -la</code> it will open, let's say, a bash, execute the command and return the result. I don't see why you can't do that using <code>subprocess</code> or, in the case of the <code>ls</code> even <code>os.listdir</code> or <code>os.walk</code>.</span>
<span class="comment-copy">Well, <code>ls -la</code> was just a random command that went into my mind while posting the question. I develop in Python so I am obviously familiar with <code>os</code>, <code>subprocess</code>, but this was a specific task for a specific project that I wanted to try out. Shame it is not possible as of now though. Thanks for clarifying, anyway. By the way, when using <code>system</code> command, <code>\!</code> is redundant.</span>
