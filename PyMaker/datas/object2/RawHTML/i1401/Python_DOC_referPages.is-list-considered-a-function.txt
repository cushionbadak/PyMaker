<div class="post-text" itemprop="text">
<p><code>list</code> is obviously <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer">a built-in type</a> in Python. I saw a comment under <a href="https://stackoverflow.com/a/53645813/10147399">this</a> question which calls <code>list()</code> a <em>built-in function</em>. And when we check the documentation, it is, indeed, included in <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">Built-in functions list</a> but the documentation again states:</p>
<blockquote>
<p>Rather than being a function, list is actually a mutable sequence type</p>
</blockquote>
<p>Which brings me to my question: Is <code>list()</code> considered a function? Can we refer to it as a <em>built-in function</em>?   </p>
<p>If we were talking about C++, I'd say we are just calling the constructor, but I am not sure if the term <code>constructor</code> applies to Python (never encountered its use in this context).</p>
</div>
<div class="post-text" itemprop="text">
<p><code>list</code> is a <code>type</code>, which means it is defined somewhere as a class, just like <code>int</code> and <code>float</code>.</p>
<pre><code>&gt;&gt; type(list)
&lt;class 'type'&gt;
</code></pre>
<p>If you check its definition in <code>builtins.py</code> (the actual code is implemented in C):</p>
<pre><code>class list(object):
    """
    Built-in mutable sequence.

    If no argument is given, the constructor creates a new empty list.
    The argument must be an iterable if specified.
    """

    ...

    def __init__(self, seq=()): # known special case of list.__init__
        """
        Built-in mutable sequence.

        If no argument is given, the constructor creates a new empty list.
        The argument must be an iterable if specified.
        # (copied from class doc)
        """
        pass
</code></pre>
<p>So, <code>list()</code> is not a function. It is just calling <code>list.__init__()</code> (with some arguments which are irrelevant for this discussion) just like any call to <code>CustomClass()</code> is doing.</p>
<p>Thanks for @jpg for adding in the comments: classes and functions in Python have a common property: they are both considered as <em>callables</em>, which means they are allowed to be invoked with <code>()</code>. There is a built-in function <code>callable</code> that checks if the given argument is callable:</p>
<pre><code>&gt;&gt; callable(1)
False
&gt;&gt; callable(int)
True
&gt;&gt; callable(list)
True
&gt;&gt; callable(callable)
True
</code></pre>
<p><code>callable</code> is also defined in <code>builtins.py</code>:</p>
<pre><code>def callable(i_e_, some_kind_of_function): # real signature unknown; restored from __doc__
    """
    Return whether the object is callable (i.e., some kind of function).

    Note that classes are callable, as are instances of classes with a
    __call__() method.
    """
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you call <code>list()</code>, you're invoking the constructor of the <code>list</code> class (<code>list.__init__</code>).</p>
<p>If you have any doubt about the use of the term "constructor" in Python, this is the exact word that the implementers of <code>list</code> chose to refer to <code>__init__</code>:</p>
<p><a href="https://github.com/python/cpython/blob/master/Objects/listobject.c#L2695" rel="nofollow noreferrer">https://github.com/python/cpython/blob/master/Objects/listobject.c#L2695</a></p>
</div>
<span class="comment-copy">I'd say "constructor" is close enough. After all, if you have any other custom class, say <code>Foo</code>, then <code>Foo</code> is also a <code>type</code>, but also a callable function (the constructor).</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/40173300/why-are-many-python-built-in-standard-library-functions-actually-classes" title="why are many python built in standard library functions actually classes">stackoverflow.com/questions/40173300/â€¦</a></span>
<span class="comment-copy">Conceptually in Python, it's worth noting classes with <code>__init__</code> and functions are both <i>callable</i> objects. They just share a common feature. The built-in <a href="https://docs.python.org/3/library/functions.html#callable" rel="nofollow noreferrer"><code>callable</code></a> lets you test this.</span>
<span class="comment-copy">@jpp Great point, I'll add it</span>
<span class="comment-copy">Now my understanding is: No, it is not a function despite being in the built in functions list, but it's rather a <code>type</code> object which just happens to be <i>callable</i>, and yes <code>__init__</code> is in fact referred as <i>constructor</i> in Python. Is that correct?</span>
<span class="comment-copy">@Ayxan Not <i>per se</i>. I personally don't like to refer to <code>__init__</code> as a constructor (because then how would you refer to <code>__new__</code>?). As the <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" rel="nofollow noreferrer">docs</a> suggests, <code>__init__</code> is called only after the object is created, and <i>initializes</i> its attributes, it does not create it.</span>
<span class="comment-copy">@DeepSpace It's all clear now. Thanks for the in-depth answer</span>
