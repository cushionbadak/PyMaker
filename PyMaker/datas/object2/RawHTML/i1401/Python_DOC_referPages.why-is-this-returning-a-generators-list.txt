<div class="post-text" itemprop="text">
<p>I'm a beginner python user. 
I'm trying to define a function for 'smoothing' a list of floats by averaging the components over a number of neighbours. </p>
<p>Here my code:</p>
<pre><code>import random

random.seed(1)

def moving_window_average(x, n_neighbors=1):
    width = n_neighbors*2 + 1
    y = list()
    for i in range(n):
        y.append(sum(x[i+t])/width for t in range(-n_neighbors,n_neighbors))
    return y


x=[0,10,5,3,1,5]
avg=moving_window_average(x, 1)
print(avg)
</code></pre>
<p>In output I get what appears to be a list of 'generators', something which i don't know ad was not expecting.
In particular:</p>
<pre><code>[&lt;generator object moving_window_average.&lt;locals&gt;.&lt;genexpr&gt; at 0x7f57f992aba0&gt;, &lt;generator object moving_window_average.&lt;locals&gt;.&lt;genexpr&gt; at 0x7f57f992ab48&gt;, &lt;generator object moving_window_average.&lt;locals&gt;.&lt;genexpr&gt; at 0x7f57f992a728&gt;, &lt;generator object moving_window_average.&lt;locals&gt;.&lt;genexpr&gt; at 0x7f57f992aa98&gt;, &lt;generator object moving_window_average.&lt;locals&gt;.&lt;genexpr&gt; at 0x7f57f992aa40&gt;, &lt;generator object moving_window_average.&lt;locals&gt;.&lt;genexpr&gt; at 0x7f57f992a9e8&gt;]
</code></pre>
<p>Can someone point me towards what is happening here?</p>
<p>Thanks you a lot</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that the expression you have for "smoothing" the data is written incorrectly—so it evaluates to something called a <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">generator expression</a>. I think the code below is the right way to express it:</p>
<pre><code>import random

random.seed(1)
n = 3

def moving_window_average(x, n_neighbors=1):
    width = n_neighbors*2 + 1
    y = list()
    for i in range(n):
        y.append(sum(x[i+t] for t in range(-n_neighbors,n_neighbors)) / width)
    return y


x=[0,10,5,3,1,5]
avg=moving_window_average(x, 1)
print(avg)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A generator is an iterable that is exhausted as it is iterated over. This is what you are creating with the statement <code>sum(x[i+t])/width for t in range(-n_neighbors,n_neighbors)</code>. If what you want is a list of lists, the correct statement would be <code>[sum(x[i+t])/width for t in range(-n_neighbors,n_neighbors)]</code>, which is instead a list comprehension. An inline generation of a list, so to say.</p>
<p>An article I found on the topic can be found <a href="https://medium.freecodecamp.org/python-list-comprehensions-vs-generator-expressions-cef70ccb49db" rel="nofollow noreferrer">here</a>. Have a read.</p>
</div>
<div class="post-text" itemprop="text">
<p>you've encountered <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">generator expressions</a>, which are integrated in comprehension list syntax but cause numberous mistake.</p>
<p>as example :</p>
<pre><code>x=[0,10,5,3,1,5]

 (y for y in x) 
Out[19]: &lt;generator object &lt;genexpr&gt; at 0x000000000C02FEB8&gt;

 [y for y in x]
Out[20]: [0, 10, 5, 3, 1, 5]

 print(y for y in x)
&lt;generator object &lt;genexpr&gt; at 0x000000000C02FE60&gt;

 print((y for y in x))
&lt;generator object &lt;genexpr&gt; at 0x000000000BFA1938&gt;

 print(*(y for y in x))
0 10 5 3 1 5

 [(y for y in x)]
Out[24]: [&lt;generator object &lt;genexpr&gt; at 0x000000000BFA1D58&gt;]

 list(y for y in x)
Out[25]: [0, 10, 5, 3, 1, 5]
</code></pre>
<p>In your case, I think you can correct you problem by adding <code>[]</code> aroud your expression:</p>
<pre><code>y.append([sum(x[i+t])/width for t in range(-n_neighbors,n_neighbors)])
</code></pre>
<p><code>[]</code> will force the generator to evaluate the values. Generator are powerful object used to save memory and delay execution. il not your aim here.</p>
</div>
<span class="comment-copy">how do you want to handle the <i>"corners"</i>?</span>
<span class="comment-copy">i'm trying to treat the list as 'circular' using negative indeces</span>
<span class="comment-copy">The code in your question is unrunnable—<code>n</code> is undefined.</span>
<span class="comment-copy">You are right.. I was messing with code for a while and deleted the function line <code>n = len(x)</code></span>
<span class="comment-copy">thanks you a lot my friend, your code is working well and the link from the documentation was really clear, maybe i had to check it first :)</span>
<span class="comment-copy">also, any idea why the following line in function definition for loop would result in a type error? <code>y.append([sum(x[i+t])/width for t in range(-n_neighbors,n_neighbors)])</code> @martineau</span>
<span class="comment-copy">deppep: It could be because one (or more) items in argument <code>x</code> aren't integers.</span>
<span class="comment-copy">I'm unable to test right now but will try asap and come back to you. thanks a lot for your help and the useful link</span>
<span class="comment-copy">Thanks for your answer! I tried this already but get the following type error: <code>y.append([sum(x[i+t])/width for t in range(-n_neighbors,n_neighbors)]); TypeError: 'int' object is not iterable</code></span>
