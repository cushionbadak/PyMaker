<div class="post-text" itemprop="text">
<p>Both the <code>Child</code> and <code>Parent</code> classes inherit from Python dictionary:</p>
<pre><code>import json 

class Child(dict):
    def __init__(self, **kwargs):
        super(Child, self).__init__(**kwargs)

class Parent(dict):
    def __init__(self, **kwargs):
        super(Parent, self).__init__(**kwargs)

parent = Parent(child = Child())

print type(parent['child'])
</code></pre>
<p>prints:</p>
<pre><code>&lt;class '__main__.Child'&gt;
</code></pre>
<p>After performing the serialization and de-serialization using <code>json.dumps</code> and <code>json.loads</code> the <code>Parent['child']</code> becomes a regular dictionary:</p>
<pre><code>dumped = json.dumps(parent)
loaded = json.loads(dumped)
parent_2 = Parent(**loaded)
print type(parent_2['child'])
</code></pre>
<p>prints:</p>
<pre><code>&lt;type 'dict'&gt;
</code></pre>
<p>Question: how to make sure that after the serialization, the <code>parent_2['child']</code> is the instance of the <code>Child</code> and not a regular Python dictionary?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>loads</code> makes a dictionary and that's that. After some trial and error I found it out. (Note: It looks like you are using legacy Python so the syntax may need some tweaking from this solution.)</p>
<pre><code>import json


class Child(dict):
    def __init__(self, **kwargs):
        super(Child, self).__init__(**kwargs)


class Parent(dict):
    def __init__(self, **kwargs):
        super(Parent, self).__init__(**kwargs)


parent = Parent(child=Child())

print(type(parent['child']))

if __name__ == '__main__':
    dumped = json.dumps(parent)
    loaded = json.loads(dumped)
    parent_2 = Parent(child=Child(**loaded)) # Changed how you call Parent
    print(type(parent_2['child']))
</code></pre>
<p>Without calling the args of <code>Parent</code> with a <code>dict</code> initialized as <code>Child</code>, we can have no expectation of detecting the <code>Child</code> type <strong>unless you add additional logic to detect the type.</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <em>pickle</em>. It can be dangerous to unpickle unknown pickled objects(as they can be malicious).</p>
<p>read documentation <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">https://docs.python.org/3/library/pickle.html</a>
as it contains more information.</p>
<pre><code>import pickle
class Foo:
    attr = 'A class attribute'


with open('pickle_class.pk','wb') as f:
         pickle.dump(Foo,f)   

# we open the file for reading
with open('pickle_class.pk','rb') as f:

    Bar = pickle.load(f)

# Test if they are the same.
assert Bar==Foo,'Not the Same'
</code></pre>
<p>You can also compress.</p>
<pre><code>import bz2
import pickle

with bz2.BZ2File('pickled_class', 'wb') as f:
    pickle.dump(Foo, s)
</code></pre>
<p>In some cases, as using multithreading and lambda, <em>dill</em>, third-party module, can be handy as pickle throws</p>
<pre><code>PicklingError: Can't pickle &lt;function &lt;lambda&gt; at 0x111d0a7b8&gt;: attribute lookup &lt;lambda&gt; on __main__ failed
</code></pre>
<p>The flow and danger(unpickling malicious software) are the same:</p>
<pre><code>import dill

class Foo:
    attr = 'A class attribute'

with open('pickle_class.pk','wb') as f:
    dill.dump(Foo,f) 
</code></pre>
<p>Read dill documentation: <a href="https://pypi.org/project/dill/" rel="nofollow noreferrer">https://pypi.org/project/dill/</a></p>
<p><strong>N.B: Never-ever load unknown pickled file</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>There is a package called <a href="http://jsonpickle.github.io/" rel="nofollow noreferrer">jsonpickle</a>. It seems to do the trick; </p>
<pre><code>import json
import jsonpickle

class Child(dict):
    def __init__(self, **kwargs):
        super(Child, self).__init__(**kwargs)

class Parent(dict):
    def __init__(self, **kwargs):
        super(Parent, self).__init__(**kwargs)

if __name__ == '__main__':
    parent = Parent(child=Child())
    dumped = jsonpickle.encode(parent)
    loaded = jsonpickle.decode(dumped)
    parent_2 = Parent(**loaded)
    print(type(parent_2['child']))

&lt;class '__main__.Child'&gt;
</code></pre>
<p>Note; for this to work, the Json will have information about the original object graph so that it can be restored. </p>
<pre><code>('{"py/object": "__main__.Parent", "child": {"py/object": "__main__.Child", '
 '"__dict__": {}}, "__dict__": {}}')
</code></pre>
</div>
<span class="comment-copy">Clean and convenient use of pickle with appropriate warning -- I think this solution is better than mine but I will leave mine up for reference.</span>
