<div class="post-text" itemprop="text">
<p><a href="https://i.stack.imgur.com/g9HEG.png" rel="nofollow noreferrer">The question</a></p>
<p><a href="https://i.stack.imgur.com/g9HEG.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/g9HEG.png"/></a></p>
<p>Can someone please explain the process of the following <code>re.sub()</code> to me. </p>
<p>I am thinking the process is as following:</p>
<p>look for a <code>"."</code> then look for a digit then look for another digit that is between <code>1</code> and <code>9</code>. Now I am lost. What is the question mark for? What does the <code>\d*</code> do? Why do we need to use raw string regex in this case? </p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to understand the process, I can simply explain it to you. I don't know if this regular expression is doing what you want or not..</p>
<ul>
<li>At first, the <code>.</code> is a special character in regex which means any character. But, we here want to use the dot character. In regex, this can be done by using escaping character <code>\</code> like so <code>\.</code>. So, using <code>.</code> means any character and using <code>\.</code> means a dot.</li>
<li>The <code>\d</code> represents any digit and acts exactly like [0-9]</li>
<li>When you used <code>[1-9]</code>, by then you specified to get the numbers from 1 till 9 which means that zero is excluded.</li>
<li>We can use the asterisk <code>*</code> to choose zero or more characters. Unlike + which is used to choose one or more characters. So, using <code>\d*</code> means any consecutive digits from <code>[0-9]</code> or none.</li>
<li>The <code>?</code> is used to indicate using just one character or none. So, using <code>[1-9]?</code> means try to find just one digit between 1 and 9 <strong>IF FOUND</strong>.</li>
<li>The Parenthesis <code>()</code> is used for grouping the whole regular expression in one output.</li>
</ul>
<p>If you want to know more about regular expression, here is an awesome cheat sheet.
<a href="https://i.stack.imgur.com/KiaKd.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/KiaKd.png"/></a></p>
<p><strong>NOTE:</strong></p>
<p>I think the regex you have written in the question is not correct. I think it should be as follows <code>(\d*\.\d\d[1-9]?)</code> to obtain the same result. I will try to explain this regular expression using this number <code>3.141500012</code>. <code>\d*\.</code> means find any number of digits that could be found before the dot which would match the <code>3.</code>. then after that <code>\d\d</code> matches two digits after the dot which are <code>14</code>. Finally, the <code>[1-9]?</code> matches any digit between 1 and 9 if found which matches <code>1</code> in our example.</p>
</div>
<span class="comment-copy"><code>\1</code> denotes group 1</span>
<span class="comment-copy"><a href="https://www.rexegg.com/regex-quickstart.html" rel="nofollow noreferrer">Regex Cheat Sheet</a> ... <a href="https://docs.python.org/3/reference/lexical_analysis.html#literals" rel="nofollow noreferrer">Python String Literals</a> ...</span>
<span class="comment-copy">Thank you so much for the detailed answer. Your code makes sense, however when I tested it it didn't work or maybe I am doing something wrong.                                                                                               prices = ["3.141500002", "12.125", "51.500"]  for p in prices:     print("Before --&gt;", p)     p = re.sub(r"(\d*\.\d\d[1-9]?)", r"\1", p)     print("After --&gt;", p)                                                                                                           It just prints the whole numbers without any modifications, is my implementation wrong?</span>
<span class="comment-copy">Yup, I got it. You are using <code>re.sub</code>,  So, use this regex instead <code>(\d*\.\d\d[1-9]?).*</code></span>
<span class="comment-copy">Thank you, it worked.! I don't understand why though! this (\d*\.\d\d[1-9]?) made sense to me, but this (\d*\.\d\d[1-9]?).* doesn't. I really appreciate your help.</span>
<span class="comment-copy">@MohamedAlmahmood <a href="https://meta.stackexchange.com/a/5235/202811">accepting answer</a></span>
<span class="comment-copy">If you want to use the first regex, you can write something like this: <code>p = re.findall(r"(\d*\.\d\d[1-9]?)", p)[0]</code> instead of ` p = re.sub(r"(\d*\.\d\d[1-9]?)", r"\1", p)`</span>
