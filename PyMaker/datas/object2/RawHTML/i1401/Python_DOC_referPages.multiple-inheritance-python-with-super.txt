<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/25372653/python-multiple-inheritance-constructor-not-called-when-using-super">Python multiple inheritance constructor not called when using super()</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I have a situation where I have to initialize all the base classes</p>
<pre><code>class B:
    def __init__(self):
        print("B.__init__")

class C:
    def __init__(self):
        print("C.__init__")

class D(B,C):
    def __init__(self):
        print("D.__init__")
        super().__init__()

class E(D):
    def __init__(self):
        print("E.__init__")
        super().__init__()

x = E()
</code></pre>
<p>But the above code results in</p>
<pre><code>E.__init__
D.__init__
B.__init__
</code></pre>
<p>My concern is Why wasn't C initialized?</p>
</div>
<div class="post-text" itemprop="text">
<p>When two child classes provide the method (here it's <code>__init__</code>), Python calls the method only once and decides which one to call based on the method resolution order (MRO).</p>
<p>You can inspect the MRO by accessing the <code>__mro__</code> attribute.</p>
<pre><code>&gt;&gt;&gt; D.__mro__
(__main__.D, __main__.B, __main__.C, object)
</code></pre>
<p>When a method is invoked, the first place to look is <code>D</code>, then <code>B</code>, then <code>C</code>, then <code>object</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>super()</code> doesn't automatically call <em>all</em> of the inherited methods, only the next one up in the hierarchy. To ensure that all are called, you should have <code>super().__init__()</code> in the <code>__init__</code> method of <code>B</code> and <code>C</code> as well (in your specific scenario you only need to add it to <code>B</code>.</p>
</div>
<span class="comment-copy">Do you expect <code>super</code> to call both constructors?</span>
<span class="comment-copy">Because <code>B</code> comes before <code>C</code> in the method resolution order, but doesn't contain a call to <code>super</code></span>
<span class="comment-copy"><code>super</code> is a little more complicated than it appears to be.  <a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/" rel="nofollow noreferrer">Here's a good article</a> by one of the Python developers about its uses.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">Associated documentation here.</a></span>
