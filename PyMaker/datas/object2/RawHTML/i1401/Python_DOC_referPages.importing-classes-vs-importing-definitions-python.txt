<div class="post-text" itemprop="text">
<p>I have been using python for a while and there is something that I'm missing.</p>
<p>When importing a module, is there any difference if the module contains a class, or just definitions. For example, i have the following two modules:</p>
<pre><code>def hello():
    print("hello")
</code></pre>
<p>Or</p>
<pre><code>class Hello():
    def hello():
        print("hello")
</code></pre>
<p>And I import it from another module</p>
<pre><code>import module_name

module_name.hello()
</code></pre>
<p>Or</p>
<pre><code>import module_name

Hello = module_name.Hello()
Hello.hello()
</code></pre>
<p>Is there any difference in the code? </p>
<p>What if a want to make parallel execution? Would i have any issue if I just import the definition?</p>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">Python's documentation on Modules</a>:</p>
<blockquote>
<p>A module is a file containing Python definitions and statements.(...)</p>
<p>Each module has its own private symbol table, which is used as the global symbol table by all functions defined in the module.</p>
</blockquote>
<p>Basically when you import a module, a module object instance is created and this private symbol table is allocated and instantiated. This course of action will be the same regardeless of what your module contains.</p>
<p>However, I would not say that both of your example are doing the same thing, because the memory allocation that happens at runtime when you instantiate your class object will be different at a low level than what happens when you simply call your function. This difference shouldn't be noticible. But if you want to know more about low level memory management you can read <a href="https://docs.python.org/2/c-api/memory.html" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is nothing wrong with either of them. I would suggest reading <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/import.html</a> on how the import system work.</p>
</div>
<div class="post-text" itemprop="text">
<p>The practical difference when you create class which holds only static methods (explained below) is that you can't do:</p>
<pre class="lang-py prettyprint-override"><code>from module_name.Hello import hello
</code></pre>
<p>It's because <code>Hello</code> is not a module. On the other hand you can:</p>
<pre class="lang-py prettyprint-override"><code>from module_name import hello
</code></pre>
<p>or:</p>
<pre class="lang-py prettyprint-override"><code>from module_name.Hello import hello
</code></pre>
<p>if you have a file <strong>module_name/Hello.py</strong> which contains module attribute <code>hello</code> (i.e. your function).</p>
<p>Another issue is that in given case you don't really need <code>Hello</code> class object or its instance for <code>Hello.hello</code> to be fully functional. Practically it's a static method. You waste resources to create unnecessary objects. Module with top level function is the best choice here.</p>
<p>I often say that modules in Python are classes which you can't instantiate. All things considered they are <a href="https://en.wikipedia.org/wiki/Singleton_pattern" rel="nofollow noreferrer">Singletons</a>.</p>
<p>Also practically speaking <code>hello</code> function and <code>Hello</code> class are <strong>module attributes</strong> not "definitions". IMO, the word "definitions" is more appropriate when you are talking about syntax constructs.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all I want to point out that doesn't use established Python terminology.</p>
<p>You are talking about function <code>hello</code> in first example and class method <code>Hello.hello()</code> in second example. </p>
<p>If you want them to be the same, but you prefer to use classes to organize your functions I'd recommend to use <code>@staticmethod</code> decorator.</p>
<p>Your code will look like this:</p>
<pre><code>class Hello():
    @staticmethod       
    def hello():
        print("hello")
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="nofollow noreferrer">Built-in @staticmethod</a></p>
</div>
<span class="comment-copy">I don't quite see where you come from; why should there be an issue?</span>
<span class="comment-copy">I can't find an obvious duplicate for "class vs function" in general in <a href="https://stackoverflow.com/questions/tagged/python">python</a>, perhaps because it's very basic.  <a href="https://stackoverflow.com/q/18202818/1256452">Here's one that's <i>not</i> tagged Python, though.</a></span>
<span class="comment-copy">Besides the description of classes use in the link above there is a tiny difference you forgot in your code. The method function receives an object instance as the first parameter, while the function does not. By convention every Python coder cals it <code>self</code>. <code>def hello()</code> method should be <code>def hello(self):</code></span>
<span class="comment-copy">Modules are just namespaces for any Python object. The import machinery doesn't care what's in the module, it is the same.</span>
<span class="comment-copy">there are no real differences. however if ‘print hello’ was just written outside of a class or def, then it would execute at import time right away. sometimes you want that.</span>
<span class="comment-copy">OP's question is not about whether either is wrong, rather whether there's a difference between the two.</span>
