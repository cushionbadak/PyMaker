<div class="post-text" itemprop="text">
<p>I'm struggling with python's imports.</p>
<p>I have my repository for my python projects in which I have a collection of more or less independent programmes and tools. There are a few sub-folders which contain the single scripts and programmes; some can be used as helper routines for others scripts as well. Assume that my folder structure looks like:</p>
<pre><code>root
   __init__.py
   prog1.py
   prog2.py
   imaging
        __init__.py
        filter1.py
        detect_edges.py
   data_tools
        __init__.py
        floating_mean.py
        unify_data_sources.py
        prog3.py
</code></pre>
<p>Now assume that I want to use <code>prog3.py</code> directly but need call <code>filter1.py</code>. How can I import it into <code>prog3.py</code>?</p>
<p>The only way I managed to import it was giving adding to the path which needs modification of <code>sys.path</code>.</p>
<pre><code>import sys
sys.path.append("../imaging/")
from filter1 import filter1
</code></pre>
<p>As I know the relative way the modules are located, is there another way similar to what is described in python's module import guide (<a href="https://docs.python.org/3/tutorial/modules.html#packages-in-multiple-directories" rel="nofollow noreferrer">here</a> and <a href="https://chrisyeh96.github.io/2017/08/08/definitive-guide-python-imports.html#absolute-vs-relative-import" rel="nofollow noreferrer">here</a>) without changing sys.path?</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you need to call filter1.py for importing shared functions or classes, I would use relative imports as described in the python tutorial.</p>
<p><strong>filter1.py</strong></p>
<pre><code>def some_shared_func1():
    pass

def some_shared_func2(): 
    pass
</code></pre>
<p><strong>prog3.py</strong></p>
<pre><code>from ..imaging.filter1 import some_shared_func1, some_shared_func2
# filter1 is reached from prog3 by go two levels up then one level down to `imaging` folder.

if __name__ == "__main__":
    # Do something with some_shared_func1
    # Do something with some_shared_func2
    pass
</code></pre>
<p>I would then run prog3.py with <code>-m</code> argument to resolve relative imports but without extension:</p>
<pre><code>python -m root.data_tools.prog3
</code></pre>
<p>Current directory must be the one containing <code>root</code> (or be defined into PYTHONPATH variable).</p>
<p>I don't modify <code>sys.path</code>. </p>
<p>Is that what you are looking for?</p>
</div>
<span class="comment-copy">Yes and no. The usual way that I call my programmes and scripts is from within Spyder. This solves mostly my problem for the times when I run it from normal command line. Yet Spyder allows to set the current dir which I can set to e.g. root. Yet then it fails to find functions imaging when I execute a file from data_tools.</span>
