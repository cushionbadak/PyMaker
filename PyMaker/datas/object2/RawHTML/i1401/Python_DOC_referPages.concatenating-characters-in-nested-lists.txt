<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/48978771/how-to-join-nested-list-of-strings-and-get-the-result-as-new-list-of-string">How to join nested list of strings and get the result as new list of string?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I'm currently working with a datastructure that presents itself like this:</p>
<pre><code>['t','h','i','s',' ','i','s',' ','q','u','e','r','y',' ','i','t','e','m',' ','1','t','h','i','s',' ','i','s',' ','q','u','e','r','y',' ','i','t','e','m',' ','2', ['t','h','i','s',' ','i','s',' ','a',' ','s','u','b','q','u','e','r','y'], 't','h','i','s',' ','i','s',' ','q','u','e','r','y',' ','i','t','e','m',' ','3']
</code></pre>
<p>I got this dataset from parsing a query string using this answer from SO: <a href="https://stackoverflow.com/a/17141441">https://stackoverflow.com/a/17141441</a></p>
<p>The query I parsed was:</p>
<pre><code>(this is query item 1 this is query item 2(this is a subquery)this is query item 3)
</code></pre>
<p>The problem is that it deals with individual characters which are appended to the list one by one. I need to get back to a structure like:</p>
<pre><code>['this is query item 1 this is query item 2', ['this is a subquery'], 'this is query item 3']
</code></pre>
<p>I'm trying to wrap my head around the parser function to do this or do a post-process step to push the characters back together. Anyone know of a solution for this?</p>
</div>
<div class="post-text" itemprop="text">
<p>As a post-process step you could use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">itertools.groupby</a> in a recursive function:</p>
<pre><code>from itertools import groupby

data = ['t', 'h', 'i', 's', ' ', 'i', 's', ' ', 'q', 'u', 'e', 'r', 'y', ' ', 'i', 't', 'e', 'm', ' ', '1', 't', 'h',
        'i', 's',
        ' ', 'i', 's', ' ', 'q', 'u', 'e', 'r', 'y', ' ', 'i', 't', 'e', 'm', ' ', '2',
        ['t', 'h', 'i', 's', ' ', 'i', 's', ' ', 'a', ' ', 's', 'u', 'b', 'q', 'u', 'e', 'r', 'y'], 't', 'h', 'i', 's',
        ' ', 'i', 's', ' ', 'q', 'u', 'e', 'r', 'y', ' ', 'i', 't', 'e', 'm', ' ', '3']


def join(lst):
    for is_list, group in groupby(lst, key=lambda x: isinstance(x, list)):
        if is_list:
            yield from (list(join(value)) for value in group)
        else:
            yield ''.join(group)


result = list(join(data))
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['this is query item 1this is query item 2', ['this is a subquery'], 'this is query item 3']
</code></pre>
<p>This will create groups for lists and characters, if the group is one of characters use the built-in <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">join</a> function, else call the join function recursively. </p>
</div>
<span class="comment-copy">For some reason this was marked as duplicate but it isn't, the answer you marked as being duplicate doesn't deal with nested lists. The answer given by @daniel-mesejo does which was what I was searching for.</span>
<span class="comment-copy">Instead of doing damage control, I would recommend changing the code to return strings in the first place.</span>
<span class="comment-copy">Perfect, this works exactly as intended and easily understandable code as well. Thank you for this!</span>
<span class="comment-copy">@Yonathan Glad I could help!</span>
