<div class="post-text" itemprop="text">
<p>I'm in trouble about how to end a 'try' loop, which is occurred since I have the 'try', here is the code:</p>
<pre><code>import time

class exe_loc:
    mem = ''
    lib = ''
    main = ''

def wizard():
    while True:
        try:
            temp_me = input('Please specify the full directory of the memory, usually it will be a folder called "mem"&gt; ' )
            if temp_me is True:
                exe_loc.mem = temp_me
                time.sleep(1)
            else:
                print('Error value! Please run this configurator again!')
                sys.exit()
            temp_lib = input('Please specify the full directory of the library, usually it will be a folder called "lib"&gt; ')
            if temp_lib is True:
                exe_loc.lib = temp_lib
                time.sleep(1)
            else:
                print('Invalid value! Please run this configurator again!')
                sys.exit()
            temp_main = input('Please specify the full main executable directory, usually it will be app main directory&gt; ')
            if temp_main is True:
                exe_loc.main = temp_main
                time.sleep(1)
</code></pre>
<p>I tried end it by using <code>break</code>, <code>pass</code>, and I even leaves it empty what I get is <code>Unexpected EOF while parsing</code>, I searched online and they said it is caused when the code blocks were not completed. Please show me if any of my code is wrong, thanks.</p>
<p>Btw, I'm using python 3 and I don't know how to be more specific for this question, kindly ask me if you did not understand. Sorry for my poor english.</p>
<p>EDIT: Solved by removing the <code>try</code> because I'm not using it, but I still wanna know how to end a <code>try</code> loop properly, thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem isn't the <code>break</code>, it's the overall, high-level shape of your <code>try</code> clause.</p>
<p>A <code>try</code> requires either an <code>except</code> or a <code>finally</code> block. You have neither, which means your <code>try</code> clause is never actually complete. So python keeps looking for the next bit until it reaches EOF (End Of File), at which point it complains.</p>
<p>The <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">python docs</a> explain in more detail, but basically you need either:</p>
<pre><code>try:
    do_stuff_here()
finally:
    do_cleanup_here()  # always runs, even if the above raises an exception
</code></pre>
<p>or</p>
<pre><code>try:
    do_stuff_here()
except SomeException:
    handle_exception_here() # if do_stuff_here raised a SomeException
</code></pre>
<p>(You can also have <em>both</em> the <code>except</code> and <code>finally</code>.) If you don't need either the cleanup or the exception handling, that's even easier: just get rid of the <code>try</code> altogether, and have the block go directly under that <code>while True</code>.</p>
<p>Finally, as a terminology thing: <code>try</code> is not a loop. A loop is a bit of code that gets executed multiple times -- it loops. The <code>try</code> gets executed once. It's a "clause," not a "loop."</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to also 'catch' the exception with the <code>except</code> statement, otherwise the try has no use.</p>
<p>So if you do something like:</p>
<pre><code> try:
    # some code here
 except Exception:
    # What to do if specified error is encountered
</code></pre>
<p>This way if anywhere in your try block an exception is raised it will not break your code, but it will be catched by your except.</p>
</div>
<span class="comment-copy">this is not a valid Python syntax &amp; <code>try</code> does not create a loop</span>
<span class="comment-copy">Hi! Thanks for the reply. So did you mean I must specify a <code>except</code> in order to end a <code>try</code> properly?</span>
<span class="comment-copy">@RexLeong, yes indeed. And fyi, it is a try statement, not  a loop</span>
<span class="comment-copy">@SvenHakvoort I'm guessing you spend most of your time in Java or a similar language? :-) In python, I believe the standard terminology is "raising" an exception, not "throwing." (I made the same slip-up, since I mostly program in Java.)</span>
