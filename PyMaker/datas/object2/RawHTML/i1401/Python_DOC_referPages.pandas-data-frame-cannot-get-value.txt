<div class="post-text" itemprop="text">
<p>I have a pandas data frame that has the following structure:</p>
<pre><code>id, @text, values
0, ....., "{'organizations':['sdfsf','sfdsf','sdfs'],'content':'some text'}"
</code></pre>
<p>I am trying to get the value "some text" in 'content'</p>
<pre><code>Expected output is:

"some text"
</code></pre>
<p>I tried the following saving the "{'organizations':['sdfsf','sfdsf','sdfs'],'content':'some text'}" in a json doc but got a 'circular reference error'</p>
<pre><code>import json
json_data = pandas_dataframe.get(["value"][0])
with open('/pddata.json', 'w') as fp:  
    json.dump(json_data, fp)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>ast.literal_eval()</code></p>
<p>Example:</p>
<pre><code>import ast
df = pd.DataFrame([123, 'abc', "{'organizations':['sdfsf','sfdsf','sdfs'],'content':'some text'}"]).T
df.columns = ['id', 'text', 'values']
df
#     id    text    values
# 0  123    abc {'organizations':['sdfsf','sfdsf','sdfs'],'con...

to_fetch = ast.literal_eval(df.iloc[0,2])
type(to_fetch)
# dict

to_fetch['content']
# 'some text'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.map.html" rel="nofollow noreferrer"><code>pd.Series.map</code></a> twice, first with <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a>, then with <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a>:</p>
<pre><code>from ast import literal_eval
from operator import itemgetter

df['content'] = df['values'].map(literal_eval).map(itemgetter('content'))

print(df)

    id text                                             values    content
0  123  abc  {'organizations':['sdfsf','sfdsf','sdfs'],'con...  some text
</code></pre>
<p><code>literal_eval</code> converts the string to a dictionary, <code>itemgetter</code> extracts a value given a key argument. <code>pd.Series.map</code> applies a function to every value in a series.</p>
<p>Or with <code>map</code> + <code>lambda</code>, an anonymous custom function:</p>
<pre><code>df['content'] = df['values'].map(lambda x: literal_eval(x)['content'])
</code></pre>
</div>
<span class="comment-copy">what is your expected output. Can you brief it with example</span>
<span class="comment-copy">Excellent thanks :)</span>
<span class="comment-copy">Looks very pythonic! :)   Can you also add some explanation to the line of code to help us understand better.</span>
<span class="comment-copy">@ParvBanks, Sure, see update.</span>
<span class="comment-copy">Thanks! Appreciate it :)   This should have been the accepted answer (in my opinion) since it applies to multiple rows in a larger dataframe.</span>
