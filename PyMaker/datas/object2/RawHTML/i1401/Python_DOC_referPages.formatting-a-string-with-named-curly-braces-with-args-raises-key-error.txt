<div class="post-text" itemprop="text">
<p>I have this string: <code>my_str='a pi{ece} of t{ext}'</code></p>
<p>and these args: <code>args=['ece', 'ext']</code></p>
<p>When calling: <code>&gt;&gt;&gt; my_str.format(*args)</code></p>
<p>It gives me: <code>KeyError 'ece'</code></p>
<p>Any help?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think what you're looking for is fstring. Fstring was added to python 3.6. </p>
<pre><code>hello = "Hello"
person = "Jimmy"

args = [hello, person]
greeting = f"{args[0]}, {args[1]}"
print(greeting)
</code></pre>
<p>If you really want to use .format()</p>
<pre><code>hello = "Hello"
person = "Jimmy"

args = [hello, person]
greeting = "{}, {}".format(*args)
print(greeting)
</code></pre>
<p>or </p>
<pre><code>hello = "Hello"
person = "Jimmy"

args = [hello, person]
greeting = "{first}, {second}".format(first=args[0], second=args[1])
print(greeting)
</code></pre>
<p>Please google fstring and .format()</p>
<p><em>Fstring is generally faster</em></p>
</div>
<span class="comment-copy">What were you expecting that to do? Why did you use named placeholders and pass positional arguments?</span>
<span class="comment-copy">I'm forced to implement it that way. Both with *args and named placeholders</span>
<span class="comment-copy">Not likely. If we had more context, we might be able to tell you what you should actually do.</span>
<span class="comment-copy">this <code>print( my_str.format(**dict( zip(args,args))) )</code> will print what you want. Have fun figuring out why. the other one is simpler: <code>'a pi{} of t{}.format(*args)'</code>. Maybe this will help: <a href="https://stackoverflow.com/questions/1769403/understanding-kwargs-in-python">understanding-kwargs-in-python</a> .. or this: <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">unpacking-argument-lists</a></span>
<span class="comment-copy">The formatter accesses <code>args['ece']</code>. Try this yourself in the interpreter.</span>
