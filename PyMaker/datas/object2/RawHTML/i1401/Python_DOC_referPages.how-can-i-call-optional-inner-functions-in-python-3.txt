<div class="post-text" itemprop="text">
<p>I am trying to learn Python and while creating my own class, I came across this problem. I want to call an inner function inside my function. The problem is how can I build this type of structure in Python 3?</p>
<pre><code>    def GetAttributes(self):
        def GetName(self):
            return self.name
        def GetSurname(self):
            return self.surname
        def GetAge(self):
            return self.age
        def GetID(self):
            return self.ID
</code></pre>
<p>Basicly I want to be able to do this "GetAttributes().GetName()" which will return self.name or "GetAttributes().GetAge()" which will return self.</p>
<p>Edit: For duplicate of another question. I am trying to call multiple functions not one.</p>
</div>
<div class="post-text" itemprop="text">
<p>@ShivamKotwalia's answer is what you're looking for, but since it seems you are trying to understand why your implementation didn't work, I'll expand a little bit.</p>
<p>Currently your implementation is creating nested functions in <a href="https://docs.python.org/3/reference/executionmodel.html" rel="nofollow noreferrer">the local scope</a>.  In another word, once the code is outside of the function the objects inside the local scope cease to exist unless <code>return</code>ed to the outer scope.  Take for instance a modification of your code:</p>
<pre><code>def GetAttributes(person):
    def GetName(person):
        return person.name
    def GetSurname(person):
        return person.surname
    return GetName, GetSurname
</code></pre>
<p>This allows you to reference back to <code>GetName</code> and <code>GetSurname</code> now because they have been passed back to the outer scope.  Assuming you have a <code>Bob</code> object that has the attribute <code>name</code> and <code>surname</code>:</p>
<pre><code>name = GetAttributes(Bob)
name
# (&lt;function GetAttributes.&lt;locals&gt;.GetName at 0x03E9AB28&gt;, &lt;function GetAttributes.&lt;locals&gt;.GetSurname at 0x03E9AB70&gt;)
</code></pre>
<p>Notice how <code>name</code> has the two inner functions passed in, and that they are <code>&lt;locals&gt;</code>.  Whereas <code>GetAttributes</code> is under the <code>global</code> scope: <code>&lt;function GetAttributes at 0x03E9AA50&gt;</code>.</p>
<p>You can then get the two functions by the index of <code>name</code>:</p>
<pre><code>name[0](Bob)
# Bobby
name[1](Bob)
# Tables
</code></pre>
<p>Notice again how you still require <code>Bob</code> to be passed in, because both functions were defined as requiring the argument <code>person</code>.  You could opt to remove the arguments...:</p>
<pre><code>def GetAttributes(person):
    def GetName():
        return person.name
    def GetSurname():
        return person.surname
    return GetName, GetSurname
</code></pre>
<p>But then you're still faced with a few problems:</p>
<ol>
<li>You first have to assign an object for the function to access the inner functions.  </li>
<li>The <code>GetAttributes</code> function return nothing but its inner functions.  </li>
<li>The access to the local functions are not meaningfully structured.</li>
<li>There's no guarantee that the object you pass in will always have <code>name</code> and <code>surname</code> attributes.</li>
</ol>
<p>That's why the OOP approach (e.g. <code>class</code>) and <a href="https://stackoverflow.com/questions/155609/whats-the-difference-between-a-method-and-a-function"><code>methods</code></a> exist:</p>
<pre><code>class Person:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
    def GetName(self):
        return self.name
    def GetSurname(self):
        return self.surname
</code></pre>
<p>This address all the issues above as you now have:</p>
<ol>
<li>You just need to create an instance of the <code>Person</code> <code>class</code> instead of messy function handling.</li>
<li><code>GetAttributes</code> is not necessary any more.  </li>
<li>Easy and meaningful access to get <code>Person().GetName()</code>.  </li>
<li>The objects using these <code>methods</code> are guaranteed to have <code>name</code> and <code>surname</code> attributes.</li>
</ol>
<p>"But what about the <code>GetAttributes</code> method?" you ask? Why, Python does have a <a href="https://docs.python.org/3/library/functions.html?highlight=getattr#getattr" rel="nofollow noreferrer">built-in <code>getattr()</code> function</a> that will serve your need!</p>
<pre><code>getattr(Bob, 'name')
# Bobby
</code></pre>
<hr/>
<p>Having said all that, there <em>does</em> exist <code>function attributes</code> where you can do something like this:</p>
<pre><code>def GetAttributes(person):
    def GetName():
        return person.name
    def GetSurname():
        return person.surname
    GetAttributes.GetName = GetName
    GetAttributes.GetSurname = GetSurname
    return GetAttributes

GetAttributes(Bob).GetName()
# Bobby
</code></pre>
<p>But you very quickly run into limitations and problems managing all the objects and functions you might pass within the scopes.  Try it and you will see.  Thus, why would you opt to go through this trouble when <code>class</code>, <code>getattr</code> and <code>methods</code> already do everything that you need with the benefits of safeguards in place?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think your solution is simple, apply OOP in Python, and rather than making GetAttributes as function make it as a class. </p>
<pre><code>class GetAttributes(object):
    def __init__(self, name, surname, age, custome_id):
        self.name = name
        self.surname = surname
        self.age = age
        self.ID = custome_id
    def GetName(self):
        return self.name
    def GetSurname(self):
        return self.surname
    def GetAge(self):
        return self.age
    def GetID(self):
        return self.ID
</code></pre>
<h3>Output</h3>
<pre><code>&gt;&gt;&gt; ga = GetAttributes("Shivam", "Kotwalia", 25, "N15T5")
&gt;&gt;&gt; ga.GetName()
    'Shivam'
&gt;&gt;&gt; ga.GetAge()
    25
</code></pre>
<p>I am not very much sure that how are you filling the data, but this is seems to be very pythonic way tto do this :) </p>
<p>Happy Pythoning!</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this might be a little helpful, Try this:</p>
<pre><code>def get_attributes(self, attr_name):
    return {
        'name': self.name,
        'surname': self.surname,
        'age': self.age,
        'ID': self.ID,
    }.get(attr_name)
</code></pre>
<p>and you can use it like <code>get_attributes(name)</code> or <code>get_attributes(age)</code> and so on.
also, note that in the comments our friends are saying method names are better to be lower case in Python.it is one of Python naming conventions.</p>
</div>
<span class="comment-copy">Why do you want to wrap these functions in another one? Not a good style</span>
<span class="comment-copy">In Python it is much preferred to directly access the attributes instead of preemtively creating getters and setters for each. You can always turn a simple attribute into a more complex thing using <code>property</code> later.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/8457669/call-a-function-defined-in-another-function">Call a function defined in another function</a></span>
<span class="comment-copy">Perhaps you would like to stick to Python naming conventions, which have method names in lower case.</span>
<span class="comment-copy">That is why I asked. I wanted to build this structure but I don't know what is wrong and why it is not a good style etc. Lastly I will keep this Python Naming Conventions in my mind.</span>
<span class="comment-copy">That's what they say in Zen - Simple is better than complex. Complex is better than complicated.</span>
<span class="comment-copy">Did not see this "Thus, why would you opt to go through this trouble when  class, getattr and methods already do everything that you need with the benefits of safeguards in place?" at first.  I asked myself these questions: What if I have too much attributes? Can I pass these in one function to get datas from a organized way? Would it be more readable? Thats why I asked if it viable</span>
<span class="comment-copy">It's definitely more readable and organized doing it under the <code>class</code> structure, thus why you don't see a lot of people using function attributes (some might even consider it a hack).  Don't get the intention of my answer wrong - while you can, doesn't mean you should.</span>
<span class="comment-copy">Yes I could have done that but wanted to know if I try my structure and it did not work. Wanted to know why. Thanks for the solution</span>
<span class="comment-copy">So sorry, couldn't retrace your idea.</span>
<span class="comment-copy">The reason your original idea doesn't work is because <code>GetName()</code> and such are defined as a function within the local scope of the main function <code>GetAttributes()</code>.  They are <i>not</i> the attribute of <code>GetAttributes()</code> so you can't reference them by ways of <code>GetAttributes().GetName()</code>.  Seeing as how you are using <code>self</code> as a parameter though you are definitely thinking of using a <code>class</code> structure like @ShivamKotwalia is suggesting.</span>
<span class="comment-copy">So sorry, couldn't retrace your idea. But now I get the idea you can definitely then use -  Regarding the why - because what you are trying to achieve is a "OOP approach" and you are doing  through functions, secondly the function can only return what has been specified to return. More at - <a href="https://docs.python.org/3/howto/functional.html?highlight=functions" rel="nofollow noreferrer">docs.python.org/3/howto/functional.html?highlight=functions</a></span>
