<div class="post-text" itemprop="text">
<p>I get a number and a list. I must find the maximum number of numbers in the list to give me the sum of the given number.</p>
<pre><code>def calc_max_baggage (weights, W):
    if W==0: # if W == 0 or weights == []: is the same.
        return 0
    elif weights==[]:
        return 0
    elif sum(weights)==W:
        return len(weights)
    elif weights[-1]==W:
        return 1
    elif W==0:
        return 1
    option1 = 0+calc_max_baggage(weights[:-1], W)
    option2 = 0+calc_max_baggage(weights[1:], W)
    return max(option2,option1)
print calc_max_baggage([3,1,2,3,2,1],6)
</code></pre>
<p>Expected output: 4 -- the largest is 1 + 2 + 2 + 1</p>
<p>Actual output: 3</p>
</div>
<div class="post-text" itemprop="text">
<p>You can solve this by recursively trying different combinations of elements from the list (Dynamic Programming). like this.</p>
<pre><code>def calc_max_baggage(li, tot, current_bagage=0, max_baggage=0):
    if tot == 0 or len(li)==0: return current_bagage
    if tot &lt; 0: return 0
    for i in range(len(li)):
        temp = calc_max_baggage(li[:i] + li[i+1:], tot-li[i], current_bagage+1)
        if temp &gt; max_baggage:
            max_baggage = temp
    return max_baggage
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is the answer to your question. Please ask someone else to explain why it works because I only understood this to make it work for your answer:</p>
<pre><code>from itertools import chain, combinations


weights = (3, 1, 2, 3, 2, 1)
W = 6
# weights = (3, 1, 2, 3, 2, 1) / w = 6 / Output: 4
# weights = [1, 1, 1] / w = 2 / Output: 2
# weights = (1, 1, 1) / w = 7 / Output: 3
# weights = [4,2,1,3] / w = 5 / Output: 2
# weights = [5] / w =5 / Output: 1

def powerset(iterable):
    """
    :param iterable: the iterable you want to find all combinations for
    :return: each combination of the iterables in this example:
    :example: 
    weights = (3, 1, 2, 3, 2, 1)
    w = len(weights)
    powersets = []
    for x in powerset(weights):
        if sum(x) == w:
            print(x)
            powersets.append(len(x))
    Output &gt;&gt;&gt;
    (3, 3)
    (3, 1, 2)
    (3, 1, 2)
    (3, 2, 1)
    (3, 2, 1)
    (1, 2, 3)
    (1, 3, 2)
    (2, 3, 1)
    (3, 2, 1)
    (1, 2, 2, 1)
    4
    """
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

def calc_max_baggage(weights, W):    
    powersets = []

    # for x in powerset(weights):
    #     if sum(x) &lt;= w:
    #         print(x)
    #         powersets.append(len(x))
    # Because you said no for loops somewhere:
    powersets = [len(x) for x in powerset(weights) if sum(x) &lt;= W]
    print(max(powersets))
calc_max_baggage(weights, W)
</code></pre>
<p>Which was lifted from:</p>
<p><a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">https://docs.python.org/3/library/itertools.html#itertools-recipes</a></p>
<p>Hope this helps :)</p>
<p>Disclaimer: valid python3 code. Unsure if changing print to remove parentheses will work but you can try :)</p>
</div>
<span class="comment-copy">Check your indentation</span>
<span class="comment-copy">Added a couple edits to fix your indentation. I also added a comment to specify how you could use <code>or</code> to cope with your first two if statements. Your expected output is 4, but what is the actually outoutput from running your code?</span>
<span class="comment-copy">the ouyput is 3.</span>
<span class="comment-copy">&gt;&gt;&gt; calc_max_baggage ([5],0)     0     &gt;&gt;&gt; calc_max_baggage ([],5)     0     &gt;&gt;&gt; calc_max_baggage ([5],4)     0     &gt;&gt;&gt; calc_max_baggage ([5],5)     1     &gt;&gt;&gt; calc_max_baggage ([1,1,1],2)     2     &gt;&gt;&gt; calc_max_baggage ([1,1,1],7)     3     &gt;&gt;&gt; calc_max_baggage ([4,2,1,3],5)     2 those are the expected output. ([3,1,2,3,2,1],6): [2+2+1+1]-&gt;4  [3+1+2]-&gt;3 [3+3]-&gt;2</span>
<span class="comment-copy">Can you tell me where you will get 4 from when 4 doesn't exist and you don't actually calculate (change) the numbers at all?</span>
<span class="comment-copy">I need to solve this without loops</span>
<span class="comment-copy">Thx!! But I have to do it without a loops</span>
<span class="comment-copy">There aren't any loops though? That isn't a loop, it's called list comprehension. Why are you unable to use a loop exactly? That seems very backwards</span>
