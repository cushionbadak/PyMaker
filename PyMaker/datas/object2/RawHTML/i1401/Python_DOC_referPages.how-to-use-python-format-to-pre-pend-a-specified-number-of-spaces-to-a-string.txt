<div class="post-text" itemprop="text">
<p>How do I use the string <code>format</code> function to pre-pend a specified number of spaces to a string? Everything I search (e.g. <a href="https://stackoverflow.com/questions/5676646/how-can-i-fill-out-a-python-string-with-spaces">this post</a> and <a href="https://stackoverflow.com/questions/23835810/how-to-add-x-number-of-spaces-to-a-string">this post</a>) tells me to use something like</p>
<pre><code>"{:&gt;15}".format("Hello")
</code></pre>
<p>But that will give me 10 spaces in front. What if I always want to put 4 spaces in front, keeping things left-aligned, when the input strings are of variable length? For example:</p>
<pre><code>    Hello
    Goodbye
</code></pre>
<p>I thought of doing</p>
<pre><code>"{:4}{}".format("", "Hello")
</code></pre>
<p>Which does work, but then I have to pass in this bogus empty string. Is there a cleaner way to achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you have n as your number of spaces required</p>
<pre><code>newString = f'{" "*n}oldstring'
</code></pre>
<p>should add n spaces</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a helper function and define the number of spaces or type of indent you want:</p>
<pre><code>def indent(word, n = 1, style = ' '):
    print(f"{style * n}-&gt;{word}")

indent('hello', n = 10)
&gt;&gt;          -&gt;hello

indent('hello', n = 10, style = '*')
&gt;&gt;**********-&gt;hello
</code></pre>
<p>You can change the default value of the <code>n</code> keyword or <code>style</code> according to your needs so that you won't have to always have to use <code>f-strings</code> or <code>format</code> on every output.</p>
</div>
<div class="post-text" itemprop="text">
<p>This doesn't use format, but <a href="https://docs.python.org/3/library/textwrap.html#textwrap.indent" rel="nofollow noreferrer"><code>textwrap.indent()</code></a> does what you want.</p>
<pre><code> &gt;&gt;&gt; import textwrap
 &gt;&gt;&gt; s = 'hello\n\n \nworld'
 &gt;&gt;&gt; textwrap.indent(s, ' ' * 4)
 '    hello\n\n \n  world'
</code></pre>
<p>Python also allows you to define your own <a href="https://docs.python.org/3/library/string.html#custom-string-formatting" rel="nofollow noreferrer">formatting options</a>. See <a href="https://stackoverflow.com/questions/19864302/add-custom-conversion-types-for-string-formatting/19864463#19864463">this question</a> an example of how to override it. In this case, it might look like:</p>
<pre><code>import string
import re

class Template(string.Formatter):
    def format_field(self, value, spec):
        if re.match('\d+t', spec):
            value = ' ' * int(spec[:-1]) + value
            spec = ''
        return super(Template, self).format_field(value, spec)
</code></pre>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; fmt = Template().format
&gt;&gt;&gt; fmt('{:4t} {}', 'hello', 'world')
    hello world
</code></pre>
<p>Studying the format string language, I do not see a way to do exactly what you want.</p>
</div>
<span class="comment-copy">simply adding 4 spaces in the formatted string does what you want ? <code>____{}".format(foo)</code> ( I had to put underscores as stackoverflow removes multiple spaces)</span>
<span class="comment-copy">@Oniro but what if I wanted 13 spaces. I'm not going to sit there and count out 13 spaces. That is actually precisely what I'm trying to avoid.</span>
<span class="comment-copy">You can try <code>f-strings</code>. Something like <code>f"{'':4}{'Hello'}"</code></span>
<span class="comment-copy">sorry i misunderstood your question, <code>"{}{}".format(" "*n, foo)</code> will give you <code>n</code> spaces.</span>
