<div class="post-text" itemprop="text">
<p>I have a cdef function that has amongst its parameters a function. I am trying to generate a python 'wrapper' function that will call it. I know that defining a function as cpdef() I would be able to get access to a python version of the function. However, if I do this, I will get an error (as expected) that says that python cannot recognize the function definition I provided.  </p>
<p>Any suggestions?</p>
<p>My original function is domain specific and quite long but I think that the following example captures what I am after. I would have the following <strong>cdef()</strong> function defined,</p>
<pre class="lang-py prettyprint-override"><code>ctypedef double (*ftype) (double)

cdef cy_myfunc(int a,..., double x, ftype f):
  ...
  cdef double result
  result = f(x)

  return result
</code></pre>
<p>and I would like to define something like the following so that I can call it in python:</p>
<pre><code>def py_myfunc(a,..., x, f):
    return cy_myfunc(a,...,x,f)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you actually need to this (might think about refactoring so you don't) - you need some kind of <code>PyObject</code> to store the c function pointer.</p>
<p>The <a href="https://docs.python.org/3/c-api/capsule.html" rel="nofollow noreferrer"><code>PyCapsule</code></a> api provides a way of passing opaque pointers around in python space.  Could do something like this, I'm probably missing some safety checks</p>
<pre><code>%%cython
from cpython.pycapsule cimport PyCapsule_New, PyCapsule_GetPointer

ctypedef double (*ftype) (double)

# c function you want to wrapper
cdef double f(double a):
    return a + 22.0

# wrapper capsule
wrapped_f = PyCapsule_New(&lt;void*&gt;f, 'f', NULL)

cdef cy_myfunc(double x, ftype f):
  cdef double result = f(x)
  return result

def py_myfunc(double x, object f_capsule):
    cdef ftype f = &lt;ftype&gt; PyCapsule_GetPointer(f_capsule, 'f')
    return cy_myfunc(x, f)
</code></pre>
<p>Usage</p>
<pre><code>wrapped_f
# Out[90]: &lt;capsule object "f" at 0x0000000015ACFE70&gt;

py_myfunc(2, wrapped_f)
# Out[91]: 24.0
</code></pre>
</div>
<span class="comment-copy">All functions are objects as well. just pass a function if you need to pass one as if it was any other object. However, If your function is "wrapping" a function that is defined in it's own body, then you shouldn't be expecting any parameters for the "wrapper" function. It would be nice if you could write a code snippet to clarify what you are after.</span>
<span class="comment-copy">I amended my question above.</span>
<span class="comment-copy">ok, so, i will admit i haven't worked with cython. But, first a question, why do you need to wrap this function in the first place? can you not just directly call cy_myfunc(a,...,x,f) ?</span>
<span class="comment-copy">If you want to convert a generic Python callable to a function pointer then see <a href="https://stackoverflow.com/questions/34878942/using-function-pointers-to-methods-of-classes-without-the-gil/34900829#34900829">the second half of this answer</a>. This is impossible in pure Cython since it needs to generate code at runtime</span>
<span class="comment-copy">Thanks @chrisb. The code you have above works for an internal function cdef function. What if I wanted to pass a python function to py_myfunc() so that it is typecasted and then executed with the rest of the function.  Essentially, I am trying to create a function that will accept different user functions provided that they accept a double and output a double. Apologies if this was not clear in my initial posting. I am still learning how to make sense of cython and its possibilities.</span>
<span class="comment-copy">@marcos: The problem is that, for a Python function, there is no way to know whether it accepts a double and outputs a double.  That kind of information isn't specified for Python functions.  As has been asked here and on your other question, why don't you just let your Cython function accept an arbitrary object as <code>f</code>, and then try to call it?</span>
