<div class="post-text" itemprop="text">
<p>I have a dictionary</p>
<pre><code>tickers = {'BTC': [200, 149, 98, 44], 'ETH': [200, 320, 405, 460]}
</code></pre>
<p><code>now</code> and <code>prev</code> are elements of lists.</p>
<p>We compare this element and previous element in list.</p>
<p>For example in BTC:          </p>
<blockquote>
<p>149 with 200<br/>
    98 with 149<br/>
    44 with 98              </p>
</blockquote>
<pre><code># check state . describe state
def check_state(now, prev):
    state = None
    if now &gt;= prev:
        if now &lt;= 1.5 * prev:
                state = 0
    if now &gt;= 1.5 * prev:
        state = 1
    if now &lt; prev:
        if now * 1.5 &gt;= prev:
               state = 2
    if now * 1.5 &lt; prev:
        state = 3
    return state
</code></pre>
<p>I want to get new dictionary with tickers and states in every day.
First day no state because first day didn't have previous.</p>
<pre><code>tickers_state = {'BTC': [None, 3, 3, 3], 'ETH': [None, 1, 0, 0]}
</code></pre>
<p>where elements are state in every day of each ticker.</p>
<p>How can i do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you reverse the order of input arguments of <code>check_state</code> from <code>def check_state(now, prev):</code> to <code>def check_state(prev, now):</code> then the problem of applying a function to consecutive pairs of values of your lists becomes quite easy. I came up with the following function:</p>
<pre><code>import itertools


def apply_pairwise(values,
                   function):
    """
    Applies function to consecutive pairs of elements from an input list
    """
    def pairwise(iterable):
        """
        s -&gt; (s0,s1), (s1,s2), (s2,s3), ...
        """
        a, b = itertools.tee(iterable)
        next(b, None)
        return zip(a, b)

    yield from itertools.chain([None],
                               itertools.starmap(function, pairwise(values)))
</code></pre>
<p><strong>Examples of usage:</strong> </p>
<pre><code>&gt;&gt;&gt; btc = [200, 149, 98, 44]
&gt;&gt;&gt; list(apply_pairwise(btc, check_state))
[None, 2, 3, 3]
&gt;&gt;&gt; eth = [200, 320, 405, 460]
&gt;&gt;&gt; list(apply_pairwise(eth, check_state))
[None, 1, 0, 0]
</code></pre>
<hr/>
<p><strong>If you can't reverse the inputs:</strong></p>
<p>If it's impossible to change the order of inputs, we could adopt our function a bit:</p>
<pre><code>import itertools


def apply_pairwise(values,
                   function,
                   *,
                   reverse=False):
    """
    Applies function to consecutive pairs of elements from an input list
    """
    def pairwise(iterable):
        """
        s -&gt; (s0,s1), (s1,s2), (s2,s3), ...
        or -&gt; (s1,s0), (s2,s1), (s3,s2), ... if reverse
        """
        a, b = itertools.tee(iterable)
        next(b, None)

        if reverse:
            return zip(b, a)
        return zip(a, b)

    yield from itertools.chain([None],
                               itertools.starmap(function, pairwise(values)))
</code></pre>
<p>and you could use it like this:</p>
<pre><code>&gt;&gt;&gt; btc = [200, 149, 98, 44]
&gt;&gt;&gt; list(apply_pairwise(btc, check_state, reverse=True))
[None, 2, 3, 3]
&gt;&gt;&gt; eth = [200, 320, 405, 460]
&gt;&gt;&gt; list(apply_pairwise(eth, check_state, reverse=True))
[None, 1, 0, 0]
</code></pre>
<hr/>
<p><strong>Explanation:</strong></p>
<p>In order to get consecutive pairs of elements, we could use a helper function from recipes of <a href="https://docs.python.org/3.7/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools</code></a>:</p>
<pre><code>def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)
</code></pre>
<p>It works like this:</p>
<pre><code>&gt;&gt;&gt; list(pairwise(range(5)))
[(0, 1), (1, 2), (2, 3), (3, 4)]
</code></pre>
<p>Now for each pair of elements we would like to apply your <code>check_state</code> function. Here <a href="https://docs.python.org/3.7/library/itertools.html#itertools.starmap" rel="nofollow noreferrer"><code>itertools.starmap</code></a> can be useful. It works like this:</p>
<pre><code>&gt;&gt;&gt; list(itertools.starmap(pow, [(2, 3), (2, 10), (10, 3), (3, 4)]))
[8, 1024, 1000, 81]
</code></pre>
<p>The only thing left is to prepend the values yielded by <code>starmap</code> by <code>None</code>. As <code>starmap</code> makes an <a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow noreferrer">iterator</a>, we could use <a href="https://docs.python.org/3.7/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a> to combine the first <code>None</code> with the rest of the elements.</p>
<hr/>
<p>P.S.: Applying this to values of your <code>tickers</code> dict should be easy enough. I will leave it to you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could compare each consecutive pair of values in your lists with a function that loops through the list and uses enumerate to enable access to the previous list item for comparison. Then use dict comprehension with your function to produce a mapped version of your original dict with the compared values.</p>
<p>In the example below, it loops through a slice of the list starting with the second list item so the previous element is accessed by the current value of <code>i</code> because the slice has essentially shifted the index values by 1.</p>
<pre><code>tickers = {'BTC': [200, 149, 98, 44], 'ETH': [200, 320, 405, 460]}

def check_states(data):
    states = [None]
    for i, n in enumerate(data[1:]):
        state = None
        p = data[i]
        (low, high) = (p / 1.5, p * 1.5)
        if n &gt;= p:
            state = 0 if n &lt;= high else 1
        else:
            state = 2 if n &gt;= low else 3           
        states.append(state)    
    return states

tickers_state = {k: check_states(v) for k, v in tickers.items()}

print(tickers_state)
# OUTPUT
# {'BTC': [None, 2, 3, 3], 'ETH': [None, 1, 0, 0]}
</code></pre>
</div>
<span class="comment-copy">Questions like "<i>How to do it?</i>" are too broad. What is the exact problem that you are having? If you are having issues with iterating over consecutive list values, take a look here: <a href="https://stackoverflow.com/questions/21303224/iterate-over-all-pairs-of-consecutive-items-in-a-list">Iterate over all pairs of consecutive items in a list</a></span>
<span class="comment-copy">ok.  1) At first, I iterate all elements in ticker dict 2) After i iterate all elements in every list 3) After i try check every item ---------------------------------------- How to igrore first item? What is argument of function?</span>
<span class="comment-copy">@Freedomillusions Your question is not clear. For example you compare 149 with 200, with 4 different <code>if:else</code> conditions in your function and just expect one value as your comparison? Your question should be as clear as possible</span>
