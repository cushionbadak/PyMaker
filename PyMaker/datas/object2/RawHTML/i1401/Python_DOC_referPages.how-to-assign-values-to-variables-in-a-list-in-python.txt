<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4687364/assigning-values-to-variables-in-a-list-using-a-loop">Assigning values to variables in a list using a loop</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I have a list of variables, where I would like to change the values.
I tried this but apparently doesn't work</p>
<pre><code>a,b,c=1,2,3
for i in [a,b,c]:
    i=1
print(a,b,c) #1 2 3
</code></pre>
<p>Actual case: I wanted to make it more concise as they are similar, only node.left and node.right is different. This is a part of a string to binary tree.</p>
<pre><code>temp=array.pop(0)
if not temp=='':
    array, node.left=deserialize(array, Node(temp), False)
temp=array.pop(0)
if not temp=='':
    array, node.right=deserialize(array, Node(temp), False)
if isFirst: return node
return array, node
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can try this</p>
<pre><code>def trial():
  number_list = [1, 2, 3]

  for item, value in enumerate(number_list):
      number_list[item] = 1

  print(number_list)

if __name__ == "__main__":
  trial()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your list of object contains integer objects. In Python a name is mapped (I believe it is the word) to the object. When the FOR loop is executing the name i is mapped to a copy of the integer object that is mapped by a (b and c successively). 
So in fact you are changing a copy and not the original object.
If i am not mistaken....
Another thing, if you do the following you'll notice that x is a list of integers and not a list of variable:</p>
<pre><code>a,b,c=1,2,3
x=[a,b,c]
x
    [1, 2, 3]
a=0
x
    [1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For a variable number of <em>named</em> variables, use a dictionary:</p>
<pre><code>d = dict(zip('abc', range(1, 4)))  # {'a': 1, 'b': 2, 'c': 3}
d = {k: 1 for k in d}              # {'a': 1, 'b': 1, 'c': 1}
</code></pre>
<p>If you only care about the end result, just use <a href="https://docs.python.org/3/library/stdtypes.html#dict.fromkeys" rel="nofollow noreferrer"><code>dict.fromkeys</code></a>:</p>
<pre><code>d = dict.fromkeys('abc', 1)        # {'a': 1, 'b': 1, 'c': 1}
</code></pre>
<p>Then use <code>d['a']</code>, <code>d['b']</code>, etc to retrieve values.</p>
</div>
<div class="post-text" itemprop="text">
<p>I feel like the answers have no really answered your question properly.</p>
<p>Firstly, lists are <strong>mutable</strong>, this means that their contents can be changed at will. Integers are <strong>immutable</strong>, this means their contents cannot be changed. This is a simplification, for further reading on this see <a href="https://stackoverflow.com/questions/24292174/are-python-lists-mutable">this</a>.</p>
<p><code>[a, b, c]</code> - This constructs a list with the instantaneous values of a, b, and c.
When you iterate over this list you can change the contents of the list because the list is <strong>mutable</strong>, however, the integers themselves do not change as they are <strong>immutable</strong>. What Python does here (behind the scenes) is create a new integer object of value 1, and switch the pointer to that new object.</p>
<p>As a result, when you ask for the original values of a, b, and c, they are unchanged - because they <strong>cannot</strong> be changed, only replaced. Here is an example code block that demonstrates this better hopefully:</p>
<pre><code>immutable_int = 1
mutable_list = [immutable_int]
for i in range(len(mutable_list)):
    # mutate the list by changing the pointer of the element
    mutable_list[i] = 2

print(immutable_int)
print(mutable_list)
</code></pre>
<p>This prints the following:</p>
<pre><code>&gt;&gt;&gt; 1
&gt;&gt;&gt; [2] 
</code></pre>
<p>In essence, the list can be changed in place, it is still the same list and still points to the same piece of memory. When we change the integers the previous integers we used are unchanged because integers are <strong>immutable</strong>, and so new integers must be created.</p>
<p>In order to achieve what you desire, you can do a number of things, the first thing I can think of is just initialise them as a list and use them like that, like so:</p>
<pre><code>change_list = [1, 2, 3]

for i in range(len(change_list)):
    change_list[i] = 1

print(change_list)
</code></pre>
<p>Let me know if my answer is incomplete or you are still confused.</p>
</div>
<span class="comment-copy">How close is this example to your actual case? Do you want to initialize all values as 1?</span>
<span class="comment-copy">Why would you want to do this in a such manner? This is because you are creating a list from this variables which is a different object and change the values of it.</span>
<span class="comment-copy">Personally, I would use <code>range(len(number_list))</code> to get the index, seeing as there is no need for <code>value</code>.</span>
<span class="comment-copy">so how to change the original?</span>
<span class="comment-copy">if you want to change a you have to assign it a new integer to the variable but the list x (in my example) is not going to change. Can you explain exactly what you try to achieve? Perhaps as one of the answer states a dictionary might be the answer.</span>
