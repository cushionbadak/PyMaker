<div class="post-text" itemprop="text">
<p>I have a text file with a high-level structure as follows:</p>
<pre><code>CATEG:
DATA1
DATA2
...
DATA_N
CATEG:
DATA1
....
</code></pre>
<p>I wish to open this text file, and parse for every instance of CATEG:, separating the content in between. However, I am having a lot of annoyance with the <code>open</code> method and how it deals with new lines in each line while reading.</p>
<p>i.e. using <code>f = open('mydata.txt', 'r')</code> and then <code>f.readlines()</code> results in a lot of unnecessary new line operators and makes it annoying to split by the data structure above. Does anybody have any tips? Unfortunately, it is the data set that is annoying.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try read().splitlines().</p>
<p>For example:</p>
<pre><code>from io import StringIO

def mkString():
    return StringIO("""CATEG:
        DATA1
        DATA2
        ...
        DATA_N
        CATEG:
        DATA1
        ....""")

mkString().read().splitlines()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try following code:</p>
<pre><code>with open('mydata.txt') as f:
  for line in f:
    line = line.strip(' \t\r\n')  # remove spaces and line endings
    if line.ednswith(';'):
      pass # this is category definition
    else:
      pass # this is data line
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try This:</p>
<pre><code>with open('text.txt') as file:
text = file.read()
text = text.replace('\n', ' ')
s = text.split('CATEG:')
s = [x.strip() for x in s if x != '']
print(s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Write a little wrapper around your sequence that strips all the newlines:</p>
<pre><code>def newline_stripper(seq):
    for s in seq:
        # or change this to just s.rstrip() to remove all trailing whitespace
        yield s.rstrip('\n')
</code></pre>
<p>Then wrap your file object with it when you go to iterate:</p>
<pre><code>with open('text_file.txt') as f:
    for line in newline_stripper(f):
        # do something with your now newline-free lines
</code></pre>
<p>This will preserve your line-at-a-time reading of the file, instead of reading it all in at once, which <code>read().splitlines()</code> will do.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><strong><code>itertools.groupby</code></strong></a>:</p>
<pre><code>from itertools import groupby

with open(filename) a f:
    categs = [list(group) for (key, group) in groupby(f.splitlines(), key='CATEG:')]
</code></pre>
</div>
<span class="comment-copy">You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><b><code>itertools.groupby</code></b></a></span>
