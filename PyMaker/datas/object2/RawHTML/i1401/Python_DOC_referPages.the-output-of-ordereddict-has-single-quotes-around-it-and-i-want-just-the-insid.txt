<div class="post-text" itemprop="text">
<p>So I was trying to use OrderedDict inside json.dumps() and it started off working well. However, when trying to use the output directly inside a payload of an HTTP PUT request, it has these single quotes around it that I believe is screwing with the way the json is being interpreted at the receiving end.</p>
<p>So how do I get around this and have it give me the output without the single quotes?</p>
<p>Example:</p>
<pre><code>out = json.dumps(OrderedDict([("name", 1), ("value", 2)]))
</code></pre>
<p>... gives an output such as:</p>
<pre><code>'{"name": 1, "value": 2}'
</code></pre>
<p>... when I want it to give me the meat, the json, like:</p>
<pre><code>{"name": 1, "value": 2}
</code></pre>
<p>... so that I can put that straight into my</p>
<p><code>r = requests.post(url, data = out)</code></p>
<p>... and be on my merry way.</p>
<p>As an aside: is there something VERY basic about strings and string literals (whatever those are) that I am completely missing? My Python knowledge being self taught I am sure there are some gaps.</p>
<p>EDIT:
<code>print(out)</code></p>
<p>... gives</p>
<p><code>{"name": 1, "value": 2}</code></p>
<p>which is what I believe I want.</p>
<p>EDIT2: <code>json = out</code> as mentioned in the selected answer did the trick thank you! However, since I am just starting out with coding in Python, I would love to know whether you have come across any articles/ documentation that might be handy for me to know so as to avoid similar issues in the future. Thanks once again everyone!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>requests</code> will encode the data for you. You should be able to pass the <code>OrderedDict</code> directly to <code>post</code>:</p>
<pre><code>out = OrderedDict([("name", 1), ("value", 2)])
r = requests.post(url, json=out)
</code></pre>
<p>I hope this helps.</p>
<hr/>
<p>EDIT: I realized there's <a href="https://stackoverflow.com/a/26344315/6118299">another answer</a> that may help you and it suggests using <code>json</code> instead of <code>data</code> when making the <code>post</code> call.</p>
<p>Documentation:</p>
<p><a href="http://docs.python-requests.org/en/master/user/quickstart/#more-complicated-post-requests" rel="nofollow noreferrer">http://docs.python-requests.org/en/master/user/quickstart/#more-complicated-post-requests</a></p>
</div>
<span class="comment-copy">Yeah! I mean the response is bad and everything else has been checked. So it has got to be this.</span>
<span class="comment-copy">The obvious thing you are missing is that <a href="https://docs.python.org/3/library/json.html#json.dump" rel="nofollow noreferrer">json.dump()</a> returns a string. The <code>'{"name": 1, "value": 2}'</code> is how strings are displayed when inspected - the <code>'</code> are just delimiters that are NOT part of the string - the error mus be elsewhere.</span>
<span class="comment-copy">... that is the whole point of JSON - you transfer data as string in a kinda stringent format so it can be parsed on the other end ...</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/9733638/post-json-using-python-requests">Post JSON using Python Requests</a></span>
<span class="comment-copy">Worth noting: the JSON interchange format does not provide any ordering guarantees on key/value pairs. If the order of keys is important, you will need to serialize into JSON using a list of objects rather than just a single object.</span>
<span class="comment-copy">Thank you! I am not 100% sure how (I will make sure to read up about this) but <code>json = out</code> did the trick! Maybe it was about being explicit which is something I know Python likes.</span>
