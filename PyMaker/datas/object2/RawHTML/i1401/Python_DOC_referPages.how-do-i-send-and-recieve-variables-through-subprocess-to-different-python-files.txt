<div class="post-text" itemprop="text">
<p>I am totally new to subprocess and need to be able to send a variable from one python file to another using this library.</p>
<p>I have a little idea of how to send the data from the master file (something like this?):</p>
<pre><code>p = subprocess.Popen(['python', 'slave.py'], stdout=PIPE, stdin=PIPE, stderr=PIPE)
stdout_data = p.communicate(input='string')
</code></pre>
<p>But how do I call that variable in the other file?</p>
<p>Unfortunately, I cannot use any other module because of the nature of my project.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your description is a little vague, but to answer your question as I understand it:</p>
<p>if your <code>slave.py</code> is executed every time you need to pass it a variable, you can pass it as an argument on the cli.</p>
<pre><code>var1='simple data structure such as string, int etc.'
subprocess.call(['python', 'slave.py', var1])`
</code></pre>
<p>In <code>slave.py</code> you can then get this variable from <code>sys.argv</code>:</p>
<pre><code>import sys
name_of_program = sys.argv[0]
var1 = sys.argv[1]
</code></pre>
<p>If your <code>slave.py</code> is running continuously there are several ways to communicate between processes on a same computer system:</p>
<ul>
<li><a href="https://docs.python.org/3/library/xmlrpc.html" rel="nofollow noreferrer">Remote Procedure Calls - RPC</a></li>
<li>Shared Memory - See <a href="https://stackoverflow.com/questions/14124588/shared-memory-in-multiprocessing">this</a> SO thread</li>
<li>Using <code>stdin</code> as suggested in the comments (only for simple data structures like strings, int etc)</li>
</ul>
</div>
<span class="comment-copy">Read it from standard input.</span>
<span class="comment-copy">Ok, so I replaced <code>.call</code> with <code>.Popen</code> and now it passes the variable, while running both programs synchronously - just what I needed to do!</span>
