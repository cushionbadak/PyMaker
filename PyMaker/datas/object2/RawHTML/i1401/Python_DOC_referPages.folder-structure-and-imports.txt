<div class="post-text" itemprop="text">
<p>So I have a small project i'm working on currently but im struggling with imports.
originally I had a struct like so: </p>
<pre><code>root -&gt; python
     -&gt; tests  -&gt; testscripts
</code></pre>
<p>Im running my tests from the python folder and I had a class in that folder called pertest_resources that contained paths to other folders like the root and the script folder. </p>
<pre><code>python_folder = os.path.realpath(os.curdir)
perf_root_folder = os.path.realpath(python_folder + "/../")
test_root_folder = os.path.realpath(python_folder + "/../tests")
script_folder = os.path.realpath(test_root_folder + "/scripts")
network_folder = os.path.realpath(test_root_folder + "/networks")
output_folder = os.path.realpath(test_root_folder + "/output")
input_folder = os.path.realpath(test_root_folder + "/input")
kit_folder = os.path.realpath(perf_root_folder + "/kit")
sys.path.append(python_folder)
sys.path.append(script_folder)
sys.path.append(network_folder)
</code></pre>
<p>Now this worked fine when all the core files were in the python folder, but now its getting a little messy i've been asked to branch off some of the python scripts to a new folder called 'networks' with a structure like:</p>
<pre><code>root -&gt; python -&gt; perftest_resources.py
     -&gt; tests  -&gt; testscripts
               -&gt; networks -&gt; standard_network.py
</code></pre>
<p>Now I want to run a file from the python folder called test that uses the standard_network that in turn imports perftest_resources from the python folder.</p>
<p>I've tried: </p>
<pre><code>sys.path.append('..' + os.sep + '..') 
from python.perftest_resources import PerfTestResources as pr
</code></pre>
<p>but that doesn't work when its all originally run from test.py in the python folder.
Do I need to add init to both folders?</p>
</div>
<div class="post-text" itemprop="text">
<p>Is it a package? If true, you should use <code>intra-package references</code>, like</p>
<pre><code>from . import echo
from .. import formats
from ..filters import equalizer
</code></pre>
<p>If not, turn it into package )</p>
<p>Read more: <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html</a></p>
</div>
<span class="comment-copy">It could be a package really, probably the neatest way to do it really. It was just developed with odd imports inside so means abit of refactoring.</span>
<span class="comment-copy">Anyway if it is not a homework project, you will have to build it into a package/module. You need meta information, automatic requirements management by pip and finally deployment. So, I see no other way but just to proceed with packaging</span>
<span class="comment-copy">Alright thanks! It is just an internal thing currently but I suppose packaging would be the best choice in the long run.</span>
