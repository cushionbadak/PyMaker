<div class="post-text" itemprop="text">
<p>I'm trying to create a python script where using the following command in command line I can run the script: </p>
<pre><code>python3 myprogramname.py –in_file input.fasta –out_file output.fasta –unk_file unknown.fasta –n_mismatch 3 –min_len 150 -forward GTGCCAGCMGCCGCGGTAA -reverse ACAGCCATGCANCACCT
</code></pre>
<p>For this I am trying to set up the arguements such that if the following command is used the help output can aid the user:</p>
<pre><code>python3 myprogramname.py -help
</code></pre>
<p>I have the following script so far but there are errors that I cannot seem to fix: </p>
<pre><code>from sys import argv, exit

import argparse

parser = argparse.ArgumentParser(prog="arg.py", usage="%(arg.py)s [options]")

#Mandatory arguments
parser.add_argument("--in_file", help = "The name of the input FASTA file.")
parser.add_argument("--out_file", help = "The name of the trimmed reads file.")
parser.add_argument("--unk_file", help = "The name of the file containing unprocessed reads.")
parser.add_argument("--n_mismatch", help = "The tolerance for mismatches in the forward or reverse primer sequence.")
parser.add_argument("--min_len", help = "The minimum length a sequence must be in order to be processed")
parser.add_argument("--h", help = "Insert helpful information.")

#Parse arguments
args = parser.parse_args()

parser.print_help()
</code></pre>
<p>Ideally the output of <code>python3 myprogramname.py -help</code> should produce the following: </p>
<pre><code>usage: myprogramname.py -in_file &lt;inputfile&gt; -out_file &lt;outfile&gt; -unk_file &lt;unknownfile&gt; -n_mismatch &lt;mismatchnumber&gt; -min_len &lt;minimumsequencelengthnumber&gt; -forward &lt;forwardprimerstring&gt; -reverse &lt;reverseprimerstring&gt;

required arguments:
--in_file The name of the input FASTA file
--out_file The name of the trimmed reads file
--unk_file The name of the file containing unprocessed reads
--n_mismatch The tolerance for mismatches in the forward or reverse primer sequence
--min_len The minimum length a sequence must be in order for it to be processed
--h The help information for your program
</code></pre>
<p>Error message:</p>
<pre><code>Traceback (most recent call last):
  File "/usr/lib/python3.6/argparse.py", line 1775, in parse_known_args
    namespace, args = self._parse_known_args(args, namespace)
  File "/usr/lib/python3.6/argparse.py", line 1981, in _parse_known_args
    start_index = consume_optional(start_index)
  File "/usr/lib/python3.6/argparse.py", line 1889, in consume_optional
    raise ArgumentError(action, msg % explicit_arg)
argparse.ArgumentError: argument -h/--help: ignored explicit argument 'elp'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "arg.py", line 18, in &lt;module&gt;
    args = parser.parse_args()
  File "/usr/lib/python3.6/argparse.py", line 1743, in parse_args
    args, argv = self.parse_known_args(args, namespace)
  File "/usr/lib/python3.6/argparse.py", line 1782, in parse_known_args
    self.error(str(err))
  File "/usr/lib/python3.6/argparse.py", line 2400, in error
    self.print_usage(_sys.stderr)
  File "/usr/lib/python3.6/argparse.py", line 2370, in print_usage
    self._print_message(self.format_usage(), file)
  File "/usr/lib/python3.6/argparse.py", line 2336, in format_usage
    return formatter.format_help()
  File "/usr/lib/python3.6/argparse.py", line 291, in format_help
    help = self._root_section.format_help()
  File "/usr/lib/python3.6/argparse.py", line 222, in format_help
    item_help = join([func(*args) for func, args in self.items])
  File "/usr/lib/python3.6/argparse.py", line 222, in &lt;listcomp&gt;
    item_help = join([func(*args) for func, args in self.items])
  File "/usr/lib/python3.6/argparse.py", line 308, in _format_usage
    usage = usage % dict(prog=self._prog)
KeyError: 'arg.py'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/argparse.html#usage" rel="nofollow noreferrer"><code>usage</code></a> keyword to <code>ArgumentParser</code> only allows a <code>%(prog)s</code> format specifier.  <code>%(arg.py)s</code> is not a valid format specifier.  Either write <code>usage='arg.py [options]'</code> or write <code>usage='%(prog)s [options]'</code>.</p>
</div>
<span class="comment-copy">How many of those unspecified "errors that [you] cannot seem to fix" go away once you spell "argument" correctly?</span>
<span class="comment-copy">@jwodder i've fixed the spelling, thank you for that I've edited my post. When I try to type in <code>python3 myprogramname.py -help</code> I still get errors like <code>File "arg.py", line 18, in &lt;module&gt;     args = parser.parse_args()   File "/usr/lib/python2.7/argparse.py", line 1701, in parse_args     args, argv = self.parse_known_args(args, namespace)</code> where arg.py is the name of my script.</span>
<span class="comment-copy">Please paste the complete error message into your question.</span>
<span class="comment-copy">Why cannot you instantiate the parser as <code>parser = argparse.ArgumentParser()</code>?</span>
<span class="comment-copy">@dedObed that seems to have worked in solving the errors but I wanted to customize the "usage=" line.</span>
