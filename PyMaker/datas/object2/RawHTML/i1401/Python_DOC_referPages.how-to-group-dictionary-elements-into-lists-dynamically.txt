<div class="post-text" itemprop="text">
<pre><code>I have JSON file as mentioned below,
**test.json**

    {
    "header1" :
       {
           "header1_body1":
              {
               "some_key":"some_value",
                .......................
              },
          "header1_body2":
              {
                "some_key":"some_value",
                 .......................
              }

       },
    "header2":
       {
          "header2_body1":
              {
               "some_key":"some_value",
                .......................
              },
          "header2_body2":
              {
                "some_key":"some_value",
                 .......................
              }
    }
}
</code></pre>
<p>Would like to group the JSON content into lists as below:</p>
<pre><code>header1 = ['header1_body1','header1_body2']
header2 = ['header2_body1','header2_body2']
</code></pre>
<p><code>header1, header2 can be till ....header n</code>. So dynamically lists has to be created containing it's values as shown above.</p>
<p>How can i achieve this ? 
What's the best optimal way to approach ?</p>
<p><strong>SOLUTION:</strong></p>
<pre><code>with open('test.json') as json_data:
      d = json.load(json_data)

for k,v in d.iteritems():
      if k == "header1" or k == "header2":
            globals()['{}'.format(k)] = d[k].keys()
</code></pre>
<p>now, <code>header1</code> and <code>header2</code> can be accessed as list.</p>
<pre><code>for i in header1:
    print i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you read the JSON into a variable <code>d</code> (maybe using <a href="https://docs.python.org/3/library/json.html#json.loads" rel="nofollow noreferrer">json.loads</a>), you could iterate over the keys (sorted?) and build the lists with the keys of current value:</p>
<pre><code>for key in sorted(d.keys()):
    l = [x for x in sorted(d[key].keys())]  # using list comprehension
    print(key + ' = ' + str(l))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Fixing your json structure:</p>
<pre><code>{
"header1" :
   {
       "header1_body1":
          {
           "some_key":"some_value"
          },
      "header1_body2":
          {
            "some_key":"some_value"
          }

   },
"header2":
    {
      "header2_body1":
          {
           "some_key":"some_value"
          },
      "header2_body2":
          {
            "some_key":"some_value"
          }
    }
}
</code></pre>
<p>And then loading and creating lists:</p>
<pre><code>header = []

for key, value in dictdump.items():

    header.append(list(value.keys()))

for header_num in range(0, len(header)):
    print("header{} : {}".format(header_num + 1, header[header_num]))
</code></pre>
<p>Gives:</p>
<pre><code>header1 : ['header1_body1', 'header1_body2']
header2 : ['header2_body1', 'header2_body2']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Once you load your json, you can get the list you want for any key by doing something like the following (<code>headers</code> variable below is a placeholder for your loaded json). You don't need to convert it to a list to work with it as an iterable but wrapped it in <code>list(...)</code> to match the output in your question.</p>
<pre><code>list(headers['header1'].keys())
</code></pre>
<p>If you need to actually store the list of keys for each of your "header" dicts in some sort of accessible format, then you could create another dictionary that contains the lists you want. For example:</p>
<pre><code>import json

data = """{
    "header1" : {
        "header1_body1": {
             "some_key":"some_value"
             },
        "header1_body2": {
            "some_key":"some_value"
            }
        },
    "header2": {
        "header2_body1": {
            "some_key":"some_value"
            },
        "header2_body2": {
            "some_key":"some_value"
            }
        }
    }"""

headers = json.loads(data)

# get the list of keys for a specific header
header = list(headers['header1'].keys())
print(header)
# ['header1_body1', 'header1_body2']

# if you really want to store them in another dict
results = {h[0]: list(h[1].keys()) for h in headers.items()}
print(results)
# OUTPUT
# {'header1': ['header1_body1', 'header1_body2'], 'header2': ['header2_body1', 'header2_body2']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use recursion:</p>
<pre><code>d = {'header1': {'header1_body1': {'some_key': 'some_value'}, 'header1_body2': {'some_key': 'some_value'}}, 'header2': {'header2_body1': {'some_key': 'some_value'}, 'header2_body2': {'some_key': 'some_value'}}}
def flatten(_d):
  for a, b in _d.items():
    yield a
    if isinstance(b, dict):
      yield from flatten(b)

new_results = {a:[i for i in flatten(b) if i.startswith(a)] for a, b in d.items()}
</code></pre>
<p>Output:</p>
<pre><code>{'header1': ['header1_body1', 'header1_body2'], 'header2': ['header2_body1', 'header2_body2']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import json
with open('test.json') as json_data:
          d = json.load(json_data)

for k,v in d.iteritems():
    if k == "header1" or k == "header2":
          globals()['{}'.format(k)] = d[k].keys()

now, `header1` and `header2` can be accessed as list.

    for i in header1:
        print i
</code></pre>
</div>
<span class="comment-copy">First, make sure your json have the right format, because as i see you write a wrong json format, it should be <code>"header1_body2":{ ... } </code></span>
<span class="comment-copy">Read about <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">filter</a> and <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">sorted</a></span>
<span class="comment-copy">@ImamDigmi sorry, that's typo. Thanks for mentioning.</span>
<span class="comment-copy">I think that it's difficult because he want to create a dynamic list and name of variable too, but if he wants value from the dictionary then it's possible to make a 2 dimensional list</span>
<span class="comment-copy">Is using globals() right ? or any other alternative to globals ?</span>
