<div class="post-text" itemprop="text">
<p>I'm doing a project and got stuck in this part. The project consists in a program that matches individuals retrived from two diferent files (two .txts). They match if some atributes are the same between them (for instance, region, hours available, etc).</p>
<p>The thing is, the given files have the individuals ordered by lines and in phrases, splited by commas (name, region, ...). I must convert the informations individually in lists so i can acess their elements. However i cant. To explain myself easily, the given part of the txt with individuals information is organized like this:</p>
<p>function:</p>
<pre><code>...
in_file.readline()
individuals = in_file.readline().strip().replace("\n", "")
return (..., individuals) - (in tuples)
</code></pre>
<p>So far, i could only extract the first individual. I cant do a "loop" for the rest of them to be analyzed. </p>
<p>Any ideas?</p>
<p>Thanks in advance. Hope i could give an idea of what im trying to solve.</p>
</div>
<div class="post-text" itemprop="text">
<p>Firstly, could you please include some sample data. Secondly, why not use for loops?
Thirdly, <code>readline()</code> usually stops at <code>\n</code>, so we can assume, that <code>\n</code> is at the end of your line where <code>strip()</code> will remove it, hence no need for replacing it.</p>
<p>The general strategy I apply in the following two functions is:</p>
<ol>
<li>Read the Textfile into an array of lines</li>
<li>Extract the Atrributes by splitting at predefined characters and put them into a list of dicts.</li>
</ol>
<p>Assuming you are running Python 3 (sorry for my bad exception handling):</p>
<pre><code>def read_inp(file_name: str, *kwds:str) -&gt; list:
#scans an file for Keywords and returns a list of all the lines starting with any of the given kwds
return_lines = []
try:
    with open(file_name, 'r') as f: #open file
        for line in f:
           if line.startswith(*kwds):#check if line starts with one of the keywords
               return_lines.append(
                   line.rstrip() #remove trailing whitespaces, etc.
                   )
    return return_lines    
except Exception as exception:
    pass
</code></pre>
<p>You can replace the <code>"="</code> by any char that is in between your attribute's name and 
 its value</p>
<pre><code>def extract_attributes(lines: list, separator = ',') -&gt; list:
#splits lines into smaller chunks and parses them to their desired data type
out_list = []
for line in lines:
    ldict = {}
    line = line.split(separator)
    for a in line:
        attribute = a.strip()
        chunks = attribute.split('=')
        try:#write chunk
            ldict[chunks[0]] = chunks[1]
        except IndexError:
            pass
    out_list.append(ldict)
return out_list
</code></pre>
<p>PS: I had these functions already lying around, regular expressions might make them much more elegant.  </p>
<p>For more info: </p>
<p><a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#open</a></p>
</div>
