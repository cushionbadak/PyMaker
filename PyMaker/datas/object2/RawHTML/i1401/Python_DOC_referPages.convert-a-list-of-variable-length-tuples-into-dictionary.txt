<div class="post-text" itemprop="text">
<p>I have a list of variable length tuples. How do I convert it to a dictionary?  </p>
<pre><code>tup = [ ("x", 1), ("x", 2, 4), ("x", 3), ("y", 1), ("y", 2), ("z", 1), ("z", 2, 3) ]  
</code></pre>
<p>I am getting below error when using Comprehension  </p>
<pre><code>{key: [i[1:] for i in tup if i[0] == key] for (key, value) in tup}  
</code></pre>
<p>Error:</p>
<pre><code>ValueError
Traceback (most recent call last)
&gt;ipython-input-26-bedcc2e8a704&lt; in module()
----&gt; 1 {key: [i[1] for i in tuplex if i[0] == key] for (key, value) in tuplex}  
&gt;ipython-input-26-bedcc2e8a704&lt; in dictcomp((key, value))
----&gt; 1 {key: [i[1] for i in tuplex if i[0] == key] for (key, value) in tuplex}  
ValueError: too many values to unpack
</code></pre>
<p>Expected output:</p>
<pre><code>{'x': [1, 2, 4, 3], 'y': [1, 2], 'z': [1, 2, 3]} 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This doesn't seem like a task for a list comprehension. You can do this with a simple <code>for</code> loop using the dictionary's <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><code>setdefault</code></a> method to set the default value of a key to an empty list and then <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer"><code>extend</code></a> that list with the values in that tuple:</p>
<pre><code>tup = [ ("x", 1), ("x", 2, 4), ("x", 3), ("y", 1), ("y", 2), ("z", 1), ("z", 2, 3) ]

res = {}
for k, *rest in tup:
    res.setdefault(k, []).extend(rest)

print(res)
# {'y': [1, 2], 'x': [1, 2, 4, 3], 'z': [1, 2, 3]}
</code></pre>
<p>For Python 2.7, I don't think you can unpack a tuple like that, so you can try something like:</p>
<pre><code>for t in tup:
    res.setdefault(t[0], []).extend(t[1:])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>tup = [("x", 1), ("x", 2, 4), ("x", 3), ("y", 1), ("y", 2), ("z", 1), ("z", 2, 3)]
data = {}
for item in tup:
    if item[0] in data:
        data[item[0]] = data[item[0]] + list(item[1:])
    else:
        data[item[0]] = list(item[1:])
print(data)
</code></pre>
</div>
<span class="comment-copy">What's the expected output?</span>
<span class="comment-copy">@schwobaseggl  {'x': [1, 2, 4,3], 'y': [1, 2], 'z': [1, 2,3]}</span>
<span class="comment-copy">Hi @codename47, please make sure to always post important information like expected output into the question itself. Comments aren't exactly temporary, so there not the best place to put information. Thanks!</span>
<span class="comment-copy">Can you suggest a solution for python2.7 ? This works fine for python3.4. Thanks</span>
<span class="comment-copy">@codename47 see updated answer. You'll have to manually access the key in the tuple with the index.</span>
<span class="comment-copy">While this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.</span>
