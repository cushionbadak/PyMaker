<div class="post-text" itemprop="text">
<pre><code>class Deck:

    def __init__(self):
        self.cards=[]
        for suit in range(4):
            for rank in range(1,14):
                card=Card( suit, rank )
                self.cards.append(card)

    def __str__ (self):
        res=[]
        for card in self.cards:
            res.append(str(card))

        return '\n'.join(res)

    def pick_card(self):
        from random import shuffle
        shuffle(self.cards)
        return self.cards.pop()

    def add_card(self,card):
        if isinstance(card, Card): #check if card belongs to card Class!!
            self.cards.append(card)

    def move_cards(self, gen_hand, num):
        for i in range(num):
            gen_hand.add_card(self.pick_card())


class Hand(Deck):

    def __init__(self, label=''):
        self.cards = []
        self.label = label

    def __str__(self):
        return 'The {} is composed by {}'.format(self.label, self.cards)

mazzo_uno = Decks()
hand = Hand('New Hand')
mazzo_uno.move_cards(hand, 5)
print(hand)
</code></pre>
<p>I'm trying to learn objected oriented programming. I have this problem when I try to print the object <strong>hand</strong> from the subclass Hand(). I got printed something like this <em>&lt;<strong>main</strong>.Card object at 0x10bd9f978&gt;</em> instead of the proper string name of the 5 cards in <code>self.cards</code> list :</p>
<pre><code>The New Hand is composed by [&lt;__main__.Card object at 0x10bd9f978&gt;, 
&lt;__main__.Card object at 0x10bd9fd30&gt;, &lt;__main__.Card object at 0x10bd9fe80&gt;, 
&lt;__main__.Card object at 0x10bcce0b8&gt;, &lt;__main__.Card object at 0x10bd9fac8&gt;]
</code></pre>
<p>I tried also to do this to transform self.cards in string but I get <code>"TypeError: sequence item 0: expected str instance, Card found"</code>.</p>
<pre><code>def __str__(self):
    hand_tostr = ', '.join(self.cards)
    return 'The {} is composed by {}'.format(self.label, hand_tostr)
</code></pre>
<p>I read on other answers on this site that I should use <code>__repr__</code> but I didn't understand how to add it in Hand class.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__repr__</code> and <code>__str__</code> serves different purposes but work the same way.</p>
<p>You can read <a href="https://stackoverflow.com/questions/1436703/difference-between-str-and-repr">this</a> to help you chose between the two methods.</p>
<hr/>
<p>You can change the <code>__str__</code> method of the Hand class like this :</p>
<pre><code>class Hand:

    def __str__(self):
        hand_tostr = ', '.join(map(str, self.cards)) # I use map to apply str() to each element of self.cards
        return 'The {} is composed by {}'.format(self.label, hand_tostr) 
</code></pre>
<hr/>
<p>If you want to change the <code>__repr__</code> method of the Card class, you can try something like this (you didn't provide the code for the Card class)</p>
<pre><code>class Card:
    #your code

    def __repr__(self):
        return &lt;some string&gt;
</code></pre>
<p>Now if you do <code>str(&lt;list of Card objects&gt;)</code> it will use the <code>__repr__</code> method on each card instance to display what you want. I am not a big fan of this solution, for your case I would use the first one as you may want to keep the default representation of a card object for other cases.</p>
<hr/>
<p>Be careful with this code : </p>
<pre><code>def add_card(self,card):
    if isinstance(card, Card): #check if card belongs to card Class!!
        self.cards.append(card)
</code></pre>
<p>You don't raise anything if card is not an instance of Card. That means if you use this method with the wrong parameter, error will be hidden and you won't know that the deck has not changed. This is quite dangerous. You can do something like this instead:</p>
<pre><code>def add_card(self,card):
    assert(isinstance(card, Card)), "card parameter of add_card must be an instance of Card class"
    self.cards.append(card)
</code></pre>
<p>In a more pythonic way, you can use <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">typehint</a> to inform the user of your classes that card should be an instance of Card. Then trust the duck-typing style of python, or use tools like <a href="http://mypy-lang.org/" rel="nofollow noreferrer">mypy</a> to verify that the method is correctly used. </p>
</div>
<span class="comment-copy">add <code>__str__</code> for your class <code>Card</code> also, so then you can use str(card) to get string type</span>
