<div class="post-text" itemprop="text">
<p>I'm converting a project (not originally mine) from <code>python2</code> to <code>python3</code>.<br/>
In one of the scripts I've:  </p>
<pre><code>sk = (key.Sub[0]/["point", ["_CM"]]).value
</code></pre>
<p>This works on <code>py2</code>, <strong>but not on</strong> <code>py3</code>, which throws an error:</p>
<pre><code>unsupported operand type(s) for /: 'Primitive' and 'list'  
</code></pre>
<p>Apart from the error, I'm also confused about the original syntax <code>obj/list</code>.<br/>
Can you guys throw a light here?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is due to the different behavior of the division operator between Python 2 and 3.</p>
<pre><code>PS C:\Users\TigerhawkT3&gt; py -2
Python 2.7.9 (default, Dec 10 2014, 12:24:55) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; class A:
...     def __div__(self, other):
...             return 'call div'
...     def __truediv__(self, other):
...             return 'call truediv'
...     def __floordiv__(self, other):
...             return 'call floordiv'
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a/3
'call div'
&gt;&gt;&gt; a//3
'call floordiv'
&gt;&gt;&gt; exit()
PS C:\Users\TigerhawkT3&gt; py
Python 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 08:06:12) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; class A:
...     def __div__(self, other):
...             return 'call div'
...     def __truediv__(self, other):
...             return 'call truediv'
...     def __floordiv__(self, other):
...             return 'call floordiv'
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a/3
'call truediv'
&gt;&gt;&gt; a//3
'call floordiv'
</code></pre>
<p>You'll need to define the <code>__truediv__</code> special method, rather than <code>__div__</code>, for Python 3. See the data models for <a href="https://docs.python.org/2/reference/datamodel.html" rel="nofollow noreferrer">Python 2</a> and <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">Python 3</a> for more info.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is likely that <code>Primitive</code> implements <code>__div__</code> allowing it to be “divided” by another object (a list in this case). In Python 2 the operation <code>x / y</code> will use <code>x.__div__(y)</code> if it exists (and if it does not, then <code>y.__rdiv__(x)</code>.</p>
<p>In Python 3 this behaviour has <strong>changed</strong>.  To implement the <code>/</code> division operator you need to implement <code>__truediv__</code>.  This explains the difference you are observing.</p>
<p>Presumably you have access to the source for <code>Primitive</code>. Simply patch its <code>__div__</code> method to be <code>__truediv__</code></p>
</div>
<span class="comment-copy">This normally only works, given your <code>Primitive</code> class has a <code>__div__</code> method that has support for dividing with lists.</span>
<span class="comment-copy">But why does it work on <code>py2</code> and not on <code>py3</code>, did the syntax change for this kind of operations?</span>
<span class="comment-copy">The <code>/</code> operator behaves differently between Python 2 and 3; that may be the issue.</span>
<span class="comment-copy">@TigerhawkT3 What behavior changed in <code>/</code> from <code>py2</code> to <code>py3</code>? Do you mind to develop that?</span>
<span class="comment-copy">Your example helped me solving the problem. Thank you!</span>
