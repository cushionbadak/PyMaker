<div class="post-text" itemprop="text">
<p>How can I use range in numpy to get the cell in a area? I can use <code>from:to</code> but it is possible for me to use a list to set the row range?</p>
<pre><code>import numpy as np
mx = np.arange(25).reshape(5,5)
print(mx)
print(mx[1:3, 2:4])
k = 1
print(mx[range(k, k+3), range(k+1, k+5)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't think you can use <code>range</code> or <code>arange</code> in that way (though see <a href="https://stackoverflow.com/a/53601568/6671176">@hpaulj's answer</a>), but you could use <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer"><code>slice</code></a>, which uses the same syntax as range (<em>i.e.</em> you give it a start, a stop, and optionally a step argument):</p>
<pre><code>mx[slice(k, k+3), slice(k+1,k+5)]
</code></pre>
<p>This is equivalent to:</p>
<pre><code>mx[k:k+3, k+1:k+5]
</code></pre>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; mx[slice(k, k+3), slice(k+1,k+5)]
array([[ 7,  8,  9],
       [12, 13, 14],
       [17, 18, 19]])

&gt;&gt;&gt; mx[k:k+3, k+1:k+5]
array([[ 7,  8,  9],
       [12, 13, 14],
       [17, 18, 19]])
</code></pre>
<p>For more info see also the <a href="https://docs.python.org/3/glossary.html#term-slice" rel="nofollow noreferrer">glossary entry</a> for <code>slice</code> objects</p>
</div>
<div class="post-text" itemprop="text">
<p>To use a list or array in indexing 2d, you need to think in terms of <code>broadcasting</code>:</p>
<pre><code>In [263]: mx = np.arange(25).reshape(5,5)
In [264]: mx[1:3, 2:4]
Out[264]: 
array([[ 7,  8],
       [12, 13]])
In [265]: mx[np.arange(1,3)[:,None], np.arange(2,4)]
Out[265]: 
array([[ 7,  8],
       [12, 13]])
</code></pre>
<p><code>np.ix_</code> makes that easier:</p>
<pre><code>In [266]: np.ix_(np.arange(1,3), np.arange(2,4))
Out[266]: 
(array([[1],
        [2]]), array([[2, 3]]))
In [267]: mx[np.ix_(np.arange(1,3), np.arange(2,4))]
Out[267]: 
array([[ 7,  8],
       [12, 13]])
</code></pre>
<p>or the same thing with lists:</p>
<pre><code>In [268]: mx[[[1],[2]], [2,3]]
Out[268]: 
array([[ 7,  8],
       [12, 13]])
</code></pre>
<p>This is indexing rows 1 and 2, and columns 2 and 3 - in a cartesian sense, not pairwise.</p>
<pre><code>In [269]: mx[[1,2], [2,3]]     # diagonal of the block
Out[269]: array([ 7, 13])
</code></pre>
</div>
<span class="comment-copy">Actually, <code>mx[1:3,2:4]</code> seems the simplest here.</span>
