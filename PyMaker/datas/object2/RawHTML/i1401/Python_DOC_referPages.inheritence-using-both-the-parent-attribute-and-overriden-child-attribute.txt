<div class="post-text" itemprop="text">
<p>I am using inheritance. In one of my methods I would like to use both the parent attribute and the over-riden child attribute together. Something like;</p>
<pre><code>class Parent(object):
    att = 'parent'

    def my_meth(self):
        return super().att + self.att

class Child(Parent):
    att = 'child'

print(Child().my_meth())
</code></pre>
<p>Which would print;</p>
<blockquote>
<p>parentchild</p>
</blockquote>
<p>However the above code gives the error;</p>
<blockquote>
<p>'super' object has no attribute 'options'</p>
</blockquote>
<p>Is this possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>A way I can think of accessing a static attribute of the parent class that gets overridden by the child is to directly refer to the parent class itself in the method:</p>
<pre><code>class Parent(object):
    att = 'parent'

    def my_meth(self):
        return Parent.att + self.att

class Child(Parent):
    att = 'child'

print(Child().my_meth()) # parentchild
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As per the python <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">document</a> the super keyword Return a proxy object that delegates method calls to a parent or sibling class of type. You can not use this for member variables.</p>
</div>
<span class="comment-copy">Did you tried with <code>return super().__thisclass__.att + self.att</code>?</span>
