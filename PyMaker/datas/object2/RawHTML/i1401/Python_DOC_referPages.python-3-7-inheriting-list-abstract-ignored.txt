<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/37398966/python-abstractmethod-with-another-baseclass-breaks-abstract-functionality">python abstractmethod with another baseclass breaks abstract functionality</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>The following does not raise:</p>
<pre><code>from abc import ABCMeta, abstractmethod
class Test(list, metaclass=ABCMeta):
    @abstractmethod
    def test(self):
        pass
test = Test()
</code></pre>
<p>although this does:</p>
<pre><code>from abc import ABCMeta, abstractmethod
class Test(metaclass=ABCMeta):
    @abstractmethod
    def test(self):
        pass
test = Test()
</code></pre>
<p>Is this a known problem? What can I do to fix it? I need to inherit from something that looks exactly like a list and create an abstract inheritor. Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the issue here is that you should not inherit directly from<code>list</code>. There are some wrapper classes for doing this in <code>collections</code>. In this case <a href="https://docs.python.org/3/library/collections.html#collections.UserList" rel="nofollow noreferrer"><code>UserList</code></a>:</p>
<pre><code>from abc import ABCMeta, abstractmethod
from collections import UserList
class Test(UserList, metaclass=ABCMeta):
    @abstractmethod
    def test(self):
        pass
test = Test()
</code></pre>
<p>Here you have the <a href="https://repl.it/repls/HorribleAuthenticInterface" rel="nofollow noreferrer">live example</a> from:</p>
<pre><code>class Test1(Test):
  def test(self):
    print("foo")

test = Test1()
test.append(10)
test.test()
print(test)
</code></pre>
<p>Results:</p>
<pre><code>foo
[10]
</code></pre>
</div>
<span class="comment-copy">I wanted to post it in Python3.7 issue tracker, but I want to find a better way to write this first. If anyone can come up with an idea...</span>
<span class="comment-copy">It's probably worth raising in the issue tracker; if nothing else, the reason <i>why</i> it doesn't work should probably be more clearly documented. It <i>seems</i> that the restriction is on making subclasses of built-in types abstract; remember that Python-the-language doesn't really have abstract classes; the <code>abc</code> library just simulates them. There may be something about how built-ins are implemented that precludes the library from working with them. (Although it must be more subtle than that, since <i>everything</i> inherits from the built-in class <code>object</code>.)</span>
<span class="comment-copy">I'd never heard of user list before: +1</span>
<span class="comment-copy">There is <b>UserDict</b> and  <b>UserString</b> also, they are the way to subclass from "built-in" objects</span>
