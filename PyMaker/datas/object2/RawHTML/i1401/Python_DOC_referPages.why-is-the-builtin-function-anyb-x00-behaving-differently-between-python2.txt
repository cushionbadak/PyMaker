<div class="post-text" itemprop="text">
<p>The following example returns <code>True</code> in Python 2.x, while it returns <code>False</code> in Python 3.x</p>
<pre><code> python -c "print(any(b'\x00'))"
</code></pre>
<p>I can't find any explanation for the difference. <code>bool(b'\x00')</code> returns <code>True</code> in both Python 2.x and Python 3.x. I will expect the value true as the byte sequence contains an element there evaluates to True.</p>
<p>Which part of the language specification / documentation have I miss? </p>
</div>
<div class="post-text" itemprop="text">
<p>On Python 2.x, when iterating over a byte string such as <code>b'\x00\x00\x00'</code>, its components are yielded by the iterator as sub strings:</p>
<pre><code>&gt;&gt;&gt; list(iter(b'\x00\x00\x00'))
['\x00', '\x00', '\x00']
&gt;&gt;&gt; list(b'\x00\x00\x00')
['\x00', '\x00', '\x00']
</code></pre>
<p>This is because byte strings are just strings in Python 2 and thus show the same behaviour.</p>
<p>OTOH, if we use python 3, a byte string yields its contents as <code>int</code>s:</p>
<pre><code>&gt;&gt;&gt; list(iter(b'\x00\x00\x00'))
[0, 0, 0]
&gt;&gt;&gt; list(b'\x00\x00\x00')
[0, 0, 0]
</code></pre>
<p>And from this difference, everything else is clear: as we already have noted, <code>bool(b'\x00')</code> is <code>True</code> while <code>bool(0)</code> is <code>False</code>.</p>
<p>The same holds true when iterating over one element strings: <code>list(b'\x00')</code> gives <code>['\x00']</code> in Py2 and <code>[0]</code> in Py3, <code>[bool(i) for i in b'\x00']</code> gives <code>[True]</code> in Py2 vs. <code>[False]</code> in Py3, and thus the difference.</p>
<p>Note that </p>
<pre><code>any([bool(i) for i in b'\x00'])
any([i for i in b'\x00'])
any(b'\x00')
</code></pre>
<p>are semantically the same: iterate over the given object, get the truth value of every item and return of any of them is <code>True</code>.</p>
<p>TLDR: <code>b'\x00'[0] == b'\x00'</code> in Python 2 and <code>0</code> in Python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python2, b'\x00' is type <code>str</code>. In Python3, b'\x00' is \type <code>bytes</code>.</p>
<p>In Python3</p>
<blockquote>
<p>While bytes literals and representations are based on ASCII text, bytes objects actually behave like immutable sequences of integers, [...]</p>
</blockquote>
<p>(<a href="https://docs.python.org/3/library/stdtypes.html#binaryseq" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#binaryseq</a>)</p>
<p>Thus, in Python3, your byte string is composed of the integer 0, which is <code>False</code>. In Python2, it is composed of a <code>str</code> "character", which is nonempty, and therefore <code>True</code>.</p>
</div>
