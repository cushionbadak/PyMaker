<div class="post-text" itemprop="text">
<p>I'm working on a text pattern problem. I've the following input - </p>
<pre><code>term = 'CG-14/0,2-L-0_2'
</code></pre>
<p>I need to remove all the possible punctuation (delimiters) from the input term. Basically I need the following output from the input term - </p>
<pre><code>'CG1402L02'
</code></pre>
<p>I also need to store (in any format (object, dict, tuple etc.)) the delimiter and the position of the delimiter before removing the delimiters. </p>
<p>Example of the output (If returned as tuple) - </p>
<pre><code>((-,2), (/,5), (,,7), (-,9), (-,11), (_,13))
</code></pre>
<p>I'm able to get the output using the following python code - </p>
<pre><code>re.sub(r'[^\w]', '', term.replace('_', ''))
</code></pre>
<p>But how do I store the delimiter and delimiter position (in the most efficient way) before removing the delimiters?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply walk once through <code>term</code> and collect all nessessary infos on the way:</p>
<pre><code>from string import ascii_letters,digits

term = 'CG-14/0,2-L-0_2'

# defined set of allowed characters a-zA-Z0-9
# set lookup is O(1) - fast
ok = set(digits +ascii_letters)  

specials = {}
clean = []
for i,c in enumerate(term):
    if c in ok:
        clean.append(c)
    else:
        specials.setdefault(c,[])
        specials[c].append(i)

cleaned = ''.join(clean)

print(clean)
print(cleaned)
print(specials)
</code></pre>
<p>Output:</p>
<pre><code>['C', 'G', '1', '4', '0', '2', 'L', '0', '2']     # list of characters in set ok 
CG1402L02                                         # the ''.join()ed list 

{'-': [2, 9, 11], '/': [5], ',': [7], '_': [13]}  # dict of characters/positions not in ok
</code></pre>
<p>See: </p>
<ul>
<li><a href="https://docs.python.org/3/library/string.html#string.ascii_letters" rel="nofollow noreferrer">string.ascii_letters</a></li>
<li><a href="https://docs.python.org/3/library/string.html#string.digits" rel="nofollow noreferrer">string.digits</a></li>
</ul>
<hr/>
<p>You can use</p>
<pre><code>specials = []
</code></pre>
<p>and inside the iteration:</p>
<pre><code>else:
    specials.append((c,i)) 
</code></pre>
<p>to get a list of tuples instead of the dictionary:</p>
<pre><code>[('-', 2), ('/', 5), (',', 7), ('-', 9), ('-', 11), ('_', 13)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this, adding whatever other delimiters you need to the list <code>delims</code></p>
<pre><code>term = 'CG-14/0,2-L-0_2'   
delims = ['-','/',',','_']
locations = []
pos = 0
for c in term: ##iterate through the characters in the string
    if c in delims:
        locations.append([c,pos]) ##store the character and its original position 
    pos+=1
</code></pre>
<p>And then do you <code>re.sub</code> command to replace them.</p>
</div>
