<div class="post-text" itemprop="text">
<p>The loop goes through list of numbers. I need to use map to accumulate the sum of all element[0] in another list's element[0] , sum of all element[1] in element[1].</p>
<pre><code>result_list = []
sub1 = sub2 = sub3 = 0 #these 3 should be only indexes 0,1,2 of list above
for item in r:        
    l = item.split(';') # originally l = '34;56;78'
    q = list(map(float,l)) # q is the list of  3 elements

    #instead of code below I want to have smth like
    # result_list = list(map( sum( q(item), result_list)
    sub1 += q[0]
    sub2 += q[1]
    sub3 += q[2]
</code></pre>
<p>Input:</p>
<pre><code>l = [['1;2;3'], ['10;20;30'], ['12;34;56']]
</code></pre>
<p>result_list must aggregate the sum of all element[0] in each list to result_list[0].
Output</p>
<pre><code>result_list[0] = 1+ 10 + 12 
result_list[1] = 2 + 20 + 34
result_list[2] = 3 + 30 + 56
</code></pre>
<p>r is this, I omit names and calculate average of each 'column'.</p>
<pre><code>Bawerman;55;79;50
Baldwin;83;62;72
Owen;94;86;65
Watson;92;79;100
Clifford;33;99;47
Murphy;94;87;53
Shorter;83;61;61
Bishop;27;89;41
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is one approach.</p>
<p><strong>Ex:</strong></p>
<pre><code>l = [["1;2;3"], ["10;20;30"], ["12;34;56"]]
result_list = []

l = [list(map(float, j.split(";"))) for i in l for j in i]
for i in zip(*l):
    result_list.append(sum(i))
print(result_list)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[23.0, 56.0, 89.0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this, assuming each element of <code>l</code> is a list of one string:</p>
<pre><code>l = [['1;2;3'], ['10;20;30'], ['12;34;56']]
numbers = (map(float, e.split(';')) for e, in l)
result = [sum(n) for n in zip(*numbers)]
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[23.0, 56.0, 89.0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A oneliner can do the job:</p>
<p>If you need first to parse the strings with the numbers:</p>
<pre><code>l = [[int(i) for i in e[0].split(';')] for e in l] 
</code></pre>
<p>And after that, just:</p>
<pre><code>result = map(sum, zip(*l))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3><a href="https://docs.python.org/3.6/library/csv.html#csv.reader" rel="nofollow noreferrer"><code>csv.reader</code></a> + <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> + <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow noreferrer"><code>statistics.mean</code></a></h3>
<blockquote>
<p>I omit names and calculate average of each 'column'</p>
</blockquote>
<p>You don't need to construct a large list of lists from your data. You can use an iterator and use sequence unpacking with <code>zip</code>. To calculate the mean, you can use <code>statistics.mean</code>:</p>
<pre><code>from io import StringIO
from statistics import mean
import csv

x = StringIO("""Bawerman;55;79;50
Baldwin;83;62;72
Owen;94;86;65
Watson;92;79;100
Clifford;33;99;47
Murphy;94;87;53
Shorter;83;61;61
Bishop;27;89;41""")

# replace x with open('file.csv', 'r')
with x as fin:
    reader = csv.reader(x, delimiter=';')
    zipper = zip(*reader)
    next(zipper)  # ignore labels
    res = [mean(map(float, x)) for x in zipper]

print(res)

# [70.125, 80.25, 61.125]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use list comprehension :
<code>[sum(sub_list) for sub_list in l]</code></p>
</div>
<span class="comment-copy">Please add input, expected output pairs</span>
<span class="comment-copy">can you give some indication as to what <code>r</code> is?</span>
<span class="comment-copy">@DanielMesejo, done sir, pls take a look</span>
<span class="comment-copy">@James, r is 2d array or array of strings, I process each string</span>
<span class="comment-copy">Does the inner elements of l are lists?</span>
<span class="comment-copy">for i in l for j in i - do u need comma after l? i dont understand this piece of code</span>
<span class="comment-copy">No you do not need a comma. It is a nested list comprehension.</span>
<span class="comment-copy">thank u , but there is bug no? or typo? "for e, in l" - do u need comma?</span>
<span class="comment-copy">Yes, to unpack the elements</span>
