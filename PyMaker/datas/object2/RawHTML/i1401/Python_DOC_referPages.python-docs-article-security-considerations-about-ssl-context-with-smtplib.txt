<div class="post-text" itemprop="text">
<h1>1. <code>smtplib.SMTP_SSL</code></h1>
<p>In the Python 3 Docs at <a href="https://docs.python.org/3/library/smtplib.html#smtplib.SMTP_SSL" rel="nofollow noreferrer"><code>smtplib.SMTP_SSL</code></a> it says:</p>
<blockquote>
<p><code>class smtplib.SMTP_SSL(host='', port=0, local_hostname=None, keyfile=None, certfile=None, [timeout, ]context=None, source_address=None)</code></p>
<p>(...) <em>context,</em> also optional, can contain a <a href="https://docs.python.org/3/library/ssl.html#ssl.SSLContext" rel="nofollow noreferrer"><code>SSLContext</code></a> and allows configuring various aspects of the secure connection. Please read <a href="https://docs.python.org/3/library/ssl.html#ssl-security" rel="nofollow noreferrer">Security considerations</a> for best practices.</p>
</blockquote>
<hr/>
<h1>2. Security considerations article</h1>
<p>So read the above mentioned <a href="https://docs.python.org/3/library/ssl.html#ssl-security" rel="nofollow noreferrer">Security considerations</a> where it says:</p>
<blockquote>
<p>(...) it is highly recommended that you use the <code>create_default_context()</code> function to create your SSL context.</p>
</blockquote>
<p>and</p>
<blockquote>
<p>(...) if you create the SSL context by calling the <code>SSLContext</code> constructor yourself, it will not have certificate validation nor hostname checking enabled by default.</p>
</blockquote>
<p>So it seems like I definitively want the former: <code>create_default_context</code> for the SSL context.</p>
<hr/>
<h1>3. <code>smtplib.py</code></h1>
<p>I had a quick look at <a href="https://github.com/python/cpython/blob/3.7/Lib/smtplib.py#L994" rel="nofollow noreferrer"><code>smtplib.py</code></a> to see what happens, if I omit the <code>context</code> argument of <code>smtplib.SMTP_SSL</code>:</p>
<blockquote>
<p><code>if context is None:
      context = ssl._create_stdlib_context(certfile=certfile,
                                            keyfile=keyfile)</code></p>
</blockquote>
<p>So there is a call to <code>ssl._create_stdlib_context</code> which seems different from the recommended <code>ssl.create_default_context</code> from the Security considerations article.</p>
<hr/>
<h1>4. <code>ssl.py</code></h1>
<p>At the function docstring in <a href="https://github.com/python/cpython/blob/3.7/Lib/ssl.py" rel="nofollow noreferrer"><code>ssl.py</code></a> I found:</p>
<blockquote>
<p><code>All Python stdlib modules shall use this function to create SSLContext
  objects in order to keep common settings in one place. The configuration
  is less restrict than create_default_context()'s to increase backward
  compatibility.</code></p>
</blockquote>
<hr/>
<h1>5. Question</h1>
<p>How am I supposed to call <code>smtplib.SMTP_SSL</code> according to the Security considerations article? It seems like I really need to "manually" call <code>create_default_context</code> to create a context each time?</p>
<pre><code>server = smtplib.SMTP_SSL(context=ssl.create_default_context())
</code></pre>
<p>Or is</p>
<pre><code>server = smtplib.SMTP_SSL()
</code></pre>
<p>enough? And why?</p>
<p>Thank you so much :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>The best practice is using <code>server = smtplib.SMTP_SSL(context=ssl.create_default_context())</code>.</p>
<p>Acoording to docstring, <code>_create_stdlib_context</code> is less restrict than <code>create_default_context</code> because of backward compatibility.</p>
<p>ref: <a href="https://github.com/python/cpython/blob/master/Lib/ssl.py#L581" rel="nofollow noreferrer">https://github.com/python/cpython/blob/master/Lib/ssl.py#L581</a></p>
</div>
<span class="comment-copy">From <a href="https://github.com/python/cpython/blob/v3.7.1/Lib/ssl.py#L628" rel="nofollow noreferrer">the code in 3.7.1</a>: <code>_create_stdlib_context = _create_unverified_context</code>. So yes, definitely less secure since the default context is doing certificate validation while <code>_create_stdlib_context</code> obviously not.</span>
<span class="comment-copy">Yes, I found that part of <code>ssl.py</code>, too. So it really looks like the better approach.</span>
<span class="comment-copy">@SteffenUllrich Do I automatically improve security by using <code>context=ssl.create_default_context()</code> or do I have to do something else for certificate validation to work?</span>
<span class="comment-copy">@Jayjayyy: it looks sufficient to just use the default context. This enables proper certificate validation including validation of the target hostname against the certificates subject/SAN.</span>
