<div class="post-text" itemprop="text">
<p>I use a third-party library that's fine but does not handle inexistant files the way I would like. When giving it a non-existant file, instead of raising the good old </p>
<pre><code>FileNotFoundError: [Errno 2] No such file or directory: 'nothing.txt'
</code></pre>
<p>it raises some obscure message:</p>
<pre><code>OSError: Syntax error in file None (line 1)
</code></pre>
<p>I don't want to handle the missing file, don't want to catch nor handle the exception, don't want to raise a custom exception, neither want I to <code>open</code> the file, nor to create it if it does not exist.</p>
<p>I only want to check it exists (<code>os.path.isfile(filename)</code> will do the trick) and if not, then just raise a proper FileNotFoundError.</p>
<p>I tried this:</p>
<pre><code>#!/usr/bin/env python3

import os

if not os.path.isfile("nothing.txt"):
    raise FileNotFoundError
</code></pre>
<p>what only outputs:</p>
<pre><code>Traceback (most recent call last):
  File "./test_script.py", line 6, in &lt;module&gt;
    raise FileNotFoundError
FileNotFoundError
</code></pre>
<p>This is better than a "Syntax error in file None", but how is it possible to raise the "real" python exception with the proper message, without having to reimplement it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Pass in arguments:</p>
<pre><code>import errno
import os

raise FileNotFoundError(
    errno.ENOENT, os.strerror(errno.ENOENT), filename)
</code></pre>
<p><code>FileNotFoundError</code> is a subclass of <a href="https://docs.python.org/3/library/exceptions.html#OSError" rel="noreferrer"><code>OSError</code></a>, which takes several arguments. The first is an error code from the <a href="https://docs.python.org/3/library/errno.html" rel="noreferrer"><code>errno</code> module</a> (file not found is always <code>errno.ENOENT</code>), the second the error message (use <a href="https://docs.python.org/3/library/os.html#os.strerror" rel="noreferrer"><code>os.strerror()</code></a> to obtain this), and pass in the filename as the 3rd.</p>
<p>The final string representation used in a traceback is built from those arguments:</p>
<pre><code>&gt;&gt;&gt; print(FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), 'foobar'))
[Errno 2] No such file or directory: 'foobar'
</code></pre>
</div>
<span class="comment-copy">Perfect! I was so struggling to find the right way of writing this.</span>
<span class="comment-copy">@zezollo: I've updated the answer; I found <code>os.strerror()</code> now (I <i>knew</i> there was a mapping from error number to string message somewhere).</span>
<span class="comment-copy">@chepner: the <code>OSError()</code> class does that mapping; <code>OSError(errno.ENOENT, os.strerror(errno.ENOENT), filename)</code> returns a <code>FileNotFound()</code> instance. But to create such an instance, you still have to pass in those same arguments. If you have the <code>errno</code> constant in a variable <code>e</code>, stick to <code>OSError(e, os.strerror(e), path)</code>. The subclasses all provide the same interface as the base class.</span>
<span class="comment-copy">In Python 2 <code>FileNotFoundError</code> is not defined, so you should either raise <code>IOError</code>/<code>OSError</code>, or define it as a subclass of those (see <a href="https://stackoverflow.com/q/26745283/4614641">this question</a>).</span>
<span class="comment-copy">@PlasmaBinturong: no, which is why this question is tagged with <a href="https://stackoverflow.com/questions/tagged/python-3.x">python-3.x</a> :-)</span>
