<div class="post-text" itemprop="text">
<p>I have three lists:</p>
<pre><code>li1 = ["a", "a", "a", "a", "b", "b", "a", "a", "b"]
li2 = ["a", "a", "a", "b", "a,", "b", "a", "a"]
li3 = ["b", "b", "a", "a", "b"]
</code></pre>
<p>I want to "slice and paste" elements by <code>"b"</code></p>
<p>The result is supposed to look like this:</p>
<pre><code>li1 = ["aaaa", "b", "b", "aa", "b"]
li2 = ["aaa", "b", "a", "b", "aa"]
li3 = ["b", "b", "aa", "b"]
</code></pre>
<p>But I don't know how to approach this... please help me!</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3.7/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>.</p>
<p><strong>If you want to join groups <em>not</em> belonging to a certain key</strong></p>
<pre><code>from itertools import groupby

def join_except_key(iterable, key='b'):
    groups = groupby(iterable)
    for k, group in groups:
        if k != key:
            yield ''.join(group) # more general: ''.join(map(str, group))
        else:
            yield from group
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; li1 = ["a", "a", "a", "a", "b", "b", "a", "a", "b", "c", "c", "b", "c", "c"]
&gt;&gt;&gt; list(join_except_key(li1))
['aaaa', 'b', 'b', 'aa', 'b', 'cc', 'b', 'cc']
</code></pre>
<p><strong>If you want to join groups belonging to a certain key</strong></p>
<pre><code>from itertools import groupby

def join_by_key(iterable, key='a'):
    groups = groupby(iterable)
    for k, group in groups:
        if k == key:
            yield ''.join(group) # more general: ''.join(map(str, group))
        else:
            yield from group
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; li1 = ["a", "a", "a", "a", "b", "b", "a", "a", "b", "c", "c", "b", "c", "c"]
&gt;&gt;&gt; list(join_by_key(li1))
['aaaa', 'b', 'b', 'aa', 'b', 'c', 'c', 'b', 'c', 'c']
</code></pre>
<p><b>Details on what <code>groupby</code> produces</b> (non generator approach for <code>join_except_key</code>)</p>
<pre><code>&gt;&gt;&gt; li1 = ["a", "a", "a", "a", "b", "b", "a", "a", "b", "c", "c", "b", "c", "c"]
&gt;&gt;&gt; groups = [(k, list(group)) for k, group in groupby(li1)]
&gt;&gt;&gt; groups
[('a', ['a', 'a', 'a', 'a']),
 ('b', ['b', 'b']),
 ('a', ['a', 'a']),
 ('b', ['b']),
 ('c', ['c', 'c']),
 ('b', ['b']),
 ('c', ['c', 'c'])]
&gt;&gt;&gt;
&gt;&gt;&gt; result = []
&gt;&gt;&gt; for k, group in groups:
...:    if k != 'b':
...:        result.append(''.join(group))
...:    else:
...:        result.extend(group)
...:
&gt;&gt;&gt; result
['aaaa', 'b', 'b', 'aa', 'b', 'cc', 'b', 'cc']
</code></pre>
<p>The list comprehension <code>groups = [...</code> in the second line was only needed for inspecting the elements of the grouping operation, it works fine with just <code>groups = groupby(li1)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>, dividing logic into 3 parts:</p>
<ol>
<li>Group by equality to your separator string.</li>
<li>Construct an iterable of lists depending on the condition defined in <code>groupby</code> key.</li>
<li>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a> to flatten your iterable of lists.</li>
</ol>
<p>Here's a demonstration.</p>
<pre><code>from itertools import chain, groupby

def sep_by_val(L, k='b'):
    grouper = groupby(L, key=lambda x: x==k)
    gen_of_lst = ([''.join(j)] if not i else list(j) for i, j in grouper)
    return list(chain.from_iterable(gen_of_lst))

sep_by_val(li1)  # ['aaaa', 'b', 'b', 'aa', 'b']
sep_by_val(li2)  # ['aaa', 'b', 'a,', 'b', 'aa']
sep_by_val(li3)  # ['b', 'b', 'aa', 'b']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Itertools and Yield from are great python constructs but challenging to master. Something simpler would go like so involving string shifting and splitting.</p>
<pre><code>result = []

while len(li1) &gt; 0:
    split = ''.join(li1).partition('b')
    before, part, after = split
    if before:
        result.extend( before.split() )
    if part:
        result.append(part)
    li1 = after.split()
print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a function I wrote to perform this:</p>
<pre><code>def Conbine(Li):
    li=[]
    li.append(Li[0])
    Prev=Li[0]
    for i in Li[1:]:
        if not"b"in(i,Prev):li[-1]+=i
        else:
            Prev=i
            li.append(i)
    return li
</code></pre>
<p>Here is the result:</p>
<pre><code>&gt;&gt;&gt; Conbine(["a", "a", "a", "a", "b", "b", "a", "a", "b"])

['aaaa', 'b', 'b', 'aa', 'b']
&gt;&gt;&gt; Conbine(["a", "a", "a", "b", "a,", "b", "a", "a"])

['aaa', 'b', 'a,', 'b', 'aa']
&gt;&gt;&gt; Conbine(["b", "b", "a", "a", "b"])

['b', 'b', 'aa', 'b']
</code></pre>
<p>There are a lot of answers here already, but I hope this helped.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't get why all the answers look complicated for this. Did I miss something ?</p>
<pre><code>li1 = ['a', 'a', 'a', 'b', 'b', 'a', 'a', 'b']
result = []
for e in li1:
    if result and e != 'b' != result[-1]:
        result[-1] += e
    else:
        result.append(e)
print(result)   
</code></pre>
<p>Prints</p>
<pre><code>['aaa', 'b', 'b', 'aa', 'b']
</code></pre>
<p>Keep it simple and stupid. Readability matters.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm late, but this is another option:</p>
<pre><code>def join_in(lst, s):
  res, append = [lst[0]], True
  for i, e in enumerate(lst[1:]):
    if res[-1][0] == s and e == s:
      res[-1] += e
      append = False
    else: append = True
    if append: res.append(e)
  return res
</code></pre>
<p>Calling on the OP lists:</p>
<pre><code>print (join_in(li1, 'a')) #=&gt; ["aaaa", "b", "b", "aa", "b"]
print (join_in(li2, 'a')) #=&gt; ["aaa", "b", "a", "b", "aa"]
print (join_in(li3, 'a')) #=&gt; ["b", "b", "aa", "b"]
</code></pre>
<p>It is possible to call it on <code>'b'</code>:</p>
<pre><code>print (join_in(join_in(li3, 'a'), 'b')) #=&gt; ['bb', 'aa', 'b']
</code></pre>
</div>
<span class="comment-copy">Have you tried anything? Do you have some code snippet to show?</span>
<span class="comment-copy">Hello gukwon, see this link : <a href="https://docs.python.org/3/tutorial/controlflow.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/controlflow.html</a> and try something using <code>if</code> and <code>for</code> statements. You can concatenate strings using the <code>+</code> operator <code>'a' + 'a'</code> returns <code>aa</code>. Edit your message to show us your attempts. Good luck !</span>
<span class="comment-copy">@Corentin apart from concatenate it needs to be shifted as well</span>
<span class="comment-copy">@RishiBansal you still can do it with <code>for</code>, <code>+</code> and <code>if</code>.</span>
<span class="comment-copy">its will be better if you add comments about the code, exactly what it is doing.</span>
<span class="comment-copy">Upvote for the explanation.</span>
<span class="comment-copy">what if another element comes in and 'b' is the only one on which we have to split? I guess he asked this only</span>
<span class="comment-copy">@Shrey good catch, updated answer.</span>
