<div class="post-text" itemprop="text">
<p>I am trying to define condition to class, if my object Does not meet the conditions:</p>
<p>The conditions: all the organs is vectors, the shape of the vectors is the same.</p>
<p>When I try to casting the object the function will return <code>None</code>.</p>
<p>Thats what I tried so far:</p>
<pre><code>class Matrix:
    def __init__(self,m1):
        dic_len = {}
        self.m1 = tuple(m1)
        checking = 0
        for i in self.m1:
            dic_len[len(i)] = 'check'
            if type(i) != Vector:
                self.m1 = None
                checking = 1
        if len(dic_len) != 1:
            self.m1 = None
        if len(dic_len) == 1 and checking == 0:
            self.content = self.m1 = tuple(m1)
            self.shape = (len(m1),len(m1[0]))

    def __repr__(self):
        if self.m1 != None:
            return "(" + ", ".join(str(i) for i in self.m1) + ")"
        else:
            return None
</code></pre>
<p>But I get this error:</p>
<pre><code>&gt;&gt;&gt;v1 = Vector([1,2])
&gt;&gt;&gt;v2 = Vector([4,5,6])
&gt;&gt;&gt;m = Matrix([v1,v2])
&gt;&gt;&gt;print(m)
TypeError: __str__ returned non-string (type NoneType)
</code></pre>
<p>i wish the function will return None.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>return str(None)
</code></pre>
<p>instead of</p>
<pre><code>return None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The CPython <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer">docs</a> state for the <code>__repr__</code> method state that </p>
<blockquote>
<p>The return value <strong>must</strong> be a string object.</p>
</blockquote>
<p>So returning <code>None</code> isn't going to work.</p>
<pre><code>&gt;&gt;&gt; class C:
...     def __repr__(self):
...         return None
... 

&gt;&gt;&gt; c = C()
&gt;&gt;&gt; repr(c)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: __repr__ returned non-string (type NoneType)
</code></pre>
<p>If you're going to share your code with others, it might be better to code <code>__repr__</code> to produce its coventional output:</p>
<blockquote>
<p>...this should look like a valid Python expression that could be used to recreate an object with the same value (given an appropriate environment)...</p>
</blockquote>
<p>And override <code>__str__</code> to produce a representation that indicates the validity of the object instance (though note <code>__str__</code> must also return a string).</p>
</div>
