<div class="post-text" itemprop="text">
<p>Currently I have a list, which represent the student with their test scores
<code>a = [['May', 81], ['Jack', 91], ['Mike', 52], ['Jeremy', 58], ['Mark', 71],['Sam',81],['Brian',61],['Yan',71]]</code></p>
<p>I wish to use selection sort to sort the scores first then the student name in alphabetic order.</p>
<p>I am a beginner and only know how to sort a normal list like </p>
<pre><code>a = [1,64,23,13]
</code></pre>
<p>will give: <code>a = [1,13,23,64]</code></p>
<p>My selection sort code is here:</p>
<pre><code>def sort(a):
    for i in range(len(a)):
        min_item = min(a[i:])
        index = a.index(min_item)
        a[i],a[index] = a[index],a[i]
    print(a)
</code></pre>
<p>How can i sort the scores first then the name?  </p>
</div>
<div class="post-text" itemprop="text">
<p>The function <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer">min</a> can be use in conjunction with a custom key:</p>
<pre><code>def selection_sort(lst):
    for i in range(len(lst)):
        min_item = min(lst[i:], key=lambda x: (x[1], x[0]))
        index = lst.index(min_item)
        lst[i], lst[index] = lst[index], lst[i]
    print(lst)

a = [['Brian', 61], ['Jack', 91], ['Jeremy', 58], ['Mark', 71], ['May', 81], ['Mike', 52], ['Sam', 81], ['Yan', 71]]

selection_sort(a)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[['Mike', 52], ['Jeremy', 58], ['Brian', 61], ['Mark', 71], ['Yan', 71], ['May', 81], ['Sam', 81], ['Jack', 91]]
</code></pre>
<p>The <code>key</code> <em>transforms</em> each element of <code>lst</code> in a tuple where the first element is the score, and the second element is the name. Note that the above solution assumes you want the lowest scores first.</p>
<p><strong>Further</strong></p>
<ol>
<li><a href="https://stackoverflow.com/questions/5292303/how-does-tuple-comparison-work-in-python">How does tuple comparison work in Python?</a></li>
</ol>
<p>As a side note, the complexity of selection sort is <code>O(n^2)</code>, it will be best if you use the built in .sort method, complexity <code>O(nlogn)</code>. Example of usage:</p>
<pre><code>a.sort(key=lambda x: (x[1], x[0]))
print(a)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[['Mike', 52], ['Jeremy', 58], ['Brian', 61], ['Mark', 71], ['Yan', 71], ['May', 81], ['Sam', 81], ['Jack', 91]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>numpy</code>:</p>
<pre><code>import numpy as np
a = [['Brian', 61], ['Jack', 91], ['Jeremy', 58], ['Mark', 71], ['May', 81], ['Mike', 52], ['Sam', 81], ['Yan', 71]]
a = np.array(a)
a[a[:,1].argsort()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to sort by <strong>scores first, names second</strong>, you can using <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer">itemgetter</a> - <a href="https://stackoverflow.com/questions/4233476/sort-a-list-by-multiple-attributes">this will be faster than using <code>lambda</code> and avoids using python function call</a></p>
<pre><code>from operator import itemgetter
sorted(a, key=itemgetter(1,0))
</code></pre>
<p>which will result in:</p>
<pre><code> [['Mike', 52],
 ['Jeremy', 58],
 ['Brian', 61],
 ['Mark', 71],
 ['Yan', 71],
 ['May', 81],
 ['Sam', 81],
 ['Jack', 91]]
</code></pre>
</div>
<span class="comment-copy">What is the result when you use sort on a?</span>
<span class="comment-copy">[['Brian', 61], ['Jack', 91], ['Jeremy', 58], ['Mark', 71], ['May', 81], ['Mike', 52], ['Sam', 81], ['Yan', 71]]</span>
<span class="comment-copy">You want the lowest scores first?</span>
<span class="comment-copy">yes, lowest scores first, if two students got the same marks, then alphabetical with student names</span>
<span class="comment-copy">Мне кажется наши решения гораздо лучше.</span>
