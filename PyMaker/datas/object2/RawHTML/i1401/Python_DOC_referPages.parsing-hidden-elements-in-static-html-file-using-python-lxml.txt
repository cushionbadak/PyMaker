<div class="post-text" itemprop="text">
<p>I have a set of static Html files which I need to parse and fetch some details from.I'm using the Python - lxml module to grab the required details.A sample from the static html file is as shown below:</p>
<pre><code>&lt;div class="top"&gt;
&lt;a data-bind="text"&gt;abc&lt;/a&gt;
&lt;span data-bind="visible:hotel.marca1!='' &amp;amp;&amp;amp; hotel.marca1!='logo_ha', attr:{title:hotel.textoMarca1}" title="Hotusa" style="display: none;"&gt;
    &lt;/span&gt;
&lt;span class="marca" data-bind="visible:hotel.marca1==='' || hotel.marca1==='logo_ha'"&gt;
    &lt;/span&gt;
&lt;span class="star sprite-disponibilidad star1" data-bind="visible:hotel.cat === '1'" style="display: none;"&gt;&lt;/span&gt;
&lt;span class="star sprite-disponibilidad star2" data-bind="visible:hotel.cat === '2'" style="display: none;"&gt;&lt;/span&gt;
&lt;span class="star sprite-disponibilidad star3" data-bind="visible:hotel.cat === '3'" style="display: none;"&gt;&lt;/span&gt;
&lt;span class="star sprite-disponibilidad star4" data-bind="visible:hotel.cat === '4'"&gt;&lt;/span&gt;
&lt;span class="star sprite-disponibilidad star5" data-bind="visible:hotel.cat === '5'" style="display: none;"&gt;&lt;/span&gt;
&lt;div class="adr"&gt;
    &lt;span&gt;&lt;/span&gt;
    &lt;span class="locality" data-bind="text: hotel.pob"&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="top"&gt;
&lt;a data-bind="text"&gt;dfg&lt;/a&gt;
&lt;span data-bind="visible:hotel.marca1!='' &amp;amp;&amp;amp; hotel.marca1!='logo_ha', attr:{title:hotel.textoMarca1}" title="Hotusa" style="display: none;"&gt;
    &lt;/span&gt;
&lt;span class="marca" data-bind="visible:hotel.marca1==='' || hotel.marca1==='logo_ha'"&gt;
    &lt;/span&gt;
&lt;span class="star sprite-disponibilidad star1" data-bind="visible:hotel.cat === '1'" style="display: none;"&gt;&lt;/span&gt;
&lt;span class="star sprite-disponibilidad star2" data-bind="visible:hotel.cat === '2'" style="display: none;"&gt;&lt;/span&gt;
&lt;span class="star sprite-disponibilidad star3" data-bind="visible:hotel.cat === '3'" style="display: none;"&gt;&lt;/span&gt;
&lt;span class="star sprite-disponibilidad star4" data-bind="visible:hotel.cat === '4'" style="display: none;"&gt;&lt;/span&gt;
&lt;span class="star sprite-disponibilidad star5" data-bind="visible:hotel.cat === '5'" style="display: none;"&gt;&lt;/span&gt;
&lt;div class="adr"&gt;
    &lt;span&gt;&lt;/span&gt;
    &lt;span class="locality" data-bind="text: hotel.pob"&gt;&lt;/span&gt;
&lt;/div&gt;
</code></pre>
<p></p>
<p>So Here's the problem I need to get the star rating from the span class = 'star' element which is visible ; for example in the first div[@top] ,the star rating of the span that is visible is '4' while the  second div[@top] doesn't have a visible span[class=star] element so it should return a star rating of '0'. 
However since these elements are hidden I'm having problem to fetch em and also to get the script to return  '0' star ratings on div element that has all span[@class=star] 'hidden'.</p>
<p>This is what i have tried until now:</p>
<pre><code>tree = html.fromstring(page)
for sali in tree.xpath('//div[@class="top"]'):
    for x in sali.xpath('a'):
        for sal in sali.xpath('span[not(contains(@style,"display:none"))]'): 
            print x , sal.attrib['data-bind']
</code></pre>
<p>But this code doesnt help me with the result I want,what mistake am I doing?
<br/>
<br/>
Expected Output:
abc 4
dfg 0</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a few ways to approach the problem and here is one way to go about it: get the "star" rating elements and return the index of the first "visible" element falling down to 0 if none found. We can use <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next()</code></a> and <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate()</code></a> to achieve that:</p>
<pre><code>def is_visible(element):
    """Naive implementation of the element visibility check."""
    return 'display: none;' not in element.attrib.get("style", "")


def get_rating(entry):
    rating_elements = entry.xpath(".//span[contains(@class, 'star')]")
    visibile_rating = (index 
                       for index, element in enumerate(rating_elements, start=1)
                       if is_visible(element))
    return next(visibile_rating, 0)


root = fromstring(html)
for sali in root.xpath('//div[@class="top"]'):
    for x in sali.xpath('a'):
        print(x.text, get_rating(sali))
</code></pre>
<p>Prints:</p>
<pre><code>('abc', 4)
('dfg', 0)
</code></pre>
<hr/>
<p>Beware of the fact that <code>class</code> attribute is a multi-valued attribute and, strictly speaking, <code>contains()</code> is not the best tool for the job to find an element by a class value: </p>
<ul>
<li><a href="https://stackoverflow.com/q/1390568/771848">How can I match on an attribute that contains a certain string?</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You could use lxml via BeautifulSoup. Someone more familiar with Python can probably tidy this up</p>
<pre><code>from bs4 import BeautifulSoup

html = '''
&lt;div class="top"&gt;
&lt;a data-bind="text"&gt;abc&lt;/a&gt;
&lt;span data-bind="visible:hotel.marca1!='' &amp;amp;&amp;amp; hotel.marca1!='logo_ha', attr:{title:hotel.textoMarca1}" title="Hotusa" style="display: none;"&gt;
    &lt;/span&gt;
&lt;span class="marca" data-bind="visible:hotel.marca1==='' || hotel.marca1==='logo_ha'"&gt;
    &lt;/span&gt;
&lt;span class="star sprite-disponibilidad star1" data-bind="visible:hotel.cat === '1'" style="display: none;"&gt;&lt;/span&gt;
&lt;span class="star sprite-disponibilidad star2" data-bind="visible:hotel.cat === '2'" style="display: none;"&gt;&lt;/span&gt;
&lt;span class="star sprite-disponibilidad star3" data-bind="visible:hotel.cat === '3'" style="display: none;"&gt;&lt;/span&gt;
&lt;span class="star sprite-disponibilidad star4" data-bind="visible:hotel.cat === '4'"&gt;&lt;/span&gt;
&lt;span class="star sprite-disponibilidad star5" data-bind="visible:hotel.cat === '5'" style="display: none;"&gt;&lt;/span&gt;
&lt;div class="adr"&gt;
    &lt;span&gt;&lt;/span&gt;
    &lt;span class="locality" data-bind="text: hotel.pob"&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="top"&gt;
&lt;a data-bind="text"&gt;dfg&lt;/a&gt;
&lt;span data-bind="visible:hotel.marca1!='' &amp;amp;&amp;amp; hotel.marca1!='logo_ha', attr:{title:hotel.textoMarca1}" title="Hotusa" style="display: none;"&gt;
    &lt;/span&gt;
&lt;span class="marca" data-bind="visible:hotel.marca1==='' || hotel.marca1==='logo_ha'"&gt;
    &lt;/span&gt;
&lt;span class="star sprite-disponibilidad star1" data-bind="visible:hotel.cat === '1'" style="display: none;"&gt;&lt;/span&gt;
&lt;span class="star sprite-disponibilidad star2" data-bind="visible:hotel.cat === '2'" style="display: none;"&gt;&lt;/span&gt;
&lt;span class="star sprite-disponibilidad star3" data-bind="visible:hotel.cat === '3'" style="display: none;"&gt;&lt;/span&gt;
&lt;span class="star sprite-disponibilidad star4" data-bind="visible:hotel.cat === '4'" style="display: none;"&gt;&lt;/span&gt;
&lt;span class="star sprite-disponibilidad star5" data-bind="visible:hotel.cat === '5'" style="display: none;"&gt;&lt;/span&gt;
&lt;div class="adr"&gt;
    &lt;span&gt;&lt;/span&gt;
    &lt;span class="locality" data-bind="text: hotel.pob"&gt;&lt;/span&gt;
&lt;/div&gt;
'''

soup = BeautifulSoup(html, 'lxml')
ratings = []
for item in soup.select("div.top"):
    hotel = item.select_one('a').text
    found = False
    for item2 in item.select("[data-bind*='visible:hotel.cat']"):
        try:
            style = item2['style']
        except KeyError as e:
            rating = item2['data-bind'].strip("visible:hotel.cat === ").strip("'")
            found = True
            break
    ratings.append([hotel + ' ' + rating if found else hotel + ' 0'])
print(ratings)
</code></pre>
<hr/>
<p>Output:</p>
<p><a href="https://i.stack.imgur.com/jCtyg.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/jCtyg.png"/></a></p>
</div>
<span class="comment-copy">Thanks , instead of 'contains' what if i use tree.cssselect(star.sprite.disponibilidad) ,is it a better way?</span>
<span class="comment-copy">@JustinJoy Yeah, definitely a better option, go for it.</span>
<span class="comment-copy">@JustinJoy I'd say <code>.star</code> is good enough.</span>
<span class="comment-copy">Also by creating two function Am I affecting the overall runtime of the script?</span>
<span class="comment-copy">@JustinJoy in general, function calls have their cost, but unless you have a very high number of calls and you've got through all other bottlenecks (e.g. HTML parsing or tree traversals in XPaths in this case) and the execution time is super super important, then you may need to worry about extra function calls :)</span>
