<div class="post-text" itemprop="text">
<p>I am currently bringing a list down from an api and changing the names based on severity levels</p>
<p>Right now my code to do this is </p>
<pre><code>priname = list((item['fields']['priority']['name']) for item in data['issues'])
priname = [w.replace('Trivial', 'Low')
            .replace('Minor', 'Low')
            .replace('Moderate', 'Medium')
            .replace('Major', 'High')
            .replace('Critical', 'High')
            .replace('Blocker', 'Emergency')for w in priname]
</code></pre>
<p>So I am just replacing strings in the list to keywords that generalize the content. When I do this to larger lists, it takes forever to return the altered list which i realize means this is not an efficient way of doing this at all.</p>
<p>Can anyone point me in a direction where i can streamline this find and replace?</p>
<p>EDIT: </p>
<pre><code>Priname=[
'Critical',
'Moderate',
'Major',
'Moderate',
'Moderate', 
'Critical', 
'Moderate', 
'Moderate', 
'Moderate', 
'Blocker', 
'Critical', 
'Moderate', 
'Moderate', 
'Major', 
'Moderate', 
'Critical'
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionary</a>:</p>
<pre><code>priname = [
    'Critical',
    'Moderate',
    'Major',
    'Moderate',
    'Moderate',
    'Critical',
    'Moderate',
    'Moderate',
    'Moderate',
    'Blocker',
    'Critical',
    'Moderate',
    'Moderate',
    'Major',
    'Moderate',
    'Critical'
]

table = {'Trivial': 'Low',
         'Minor': 'Low',
         'Moderate': 'Medium',
         'Major': 'High',
         'Critical': 'High',
         'Blocker': 'Emergency'}

result = [table[e] for e in priname]
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['High', 'Medium', 'High', 'Medium', 'Medium', 'High', 'Medium', 'Medium', 'Medium', 'Emergency', 'High', 'Medium', 'Medium', 'High', 'Medium', 'High']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One idea that comes to mind is to, rather than using a for loop, convert the list into a numpy array and use the numpy.where function:</p>
<pre><code>    w = numpy.array(w)
    ind = numpy.where(w==list_elements_you_are_looking_for)
    w[ind] = new_value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a dictionary and assign multiple values for each key:</p>
<pre><code>replacements = {'Low': ['Trivial','Minor'], 'Medium': ['Moderate'], 'High': ['Major','Critical'], 'Emergency': ['Blocker']}

Priname=['Critical','Moderate','Major','Moderate','Moderate', 'Critical', 'Moderate', 'Moderate',
'Moderate', 'Blocker', 'Critical', 'Moderate', 'Moderate', 'Major', 'Moderate', 'Critical']

Priname = [k for i in Priname for k, v in replacements.items() if i in v]
</code></pre>
<p>Returns:</p>
<pre><code>['High', 'Medium', 'High', 'Medium', 'Medium', 'High', 'Medium', 'Medium', 'Medium', 'Emergency', 'High', 'Medium', 'Medium', 'High', 'Medium', 'High']
</code></pre>
</div>
<span class="comment-copy">Use list-comp (<code>[... for x in ...]</code>) rather than <code>list()</code> + generator-expression. It's more Pythonic.</span>
<span class="comment-copy">Can you post <code>data</code> or <code>priname</code> so we can see what we're working with?</span>
<span class="comment-copy">I posted priname, i don't think there is a need to post data though? im just trying to change this list, it shouldnt matter where it comes from right? to be clear i am able to change the list with the code i have, just not efficiently</span>
<span class="comment-copy">@Mfreeman can there be a situation where an item in <code>Priname</code> can have two replacements applied to it, or is it strictly one replacment operation (at most) per element?</span>
<span class="comment-copy">I see, yeah there would be only one replacement, the whole api is pretty uniform</span>
<span class="comment-copy">This assumes that there's at most one replacement per element in <code>priname</code> and that the elements match the replacements perfectly. I <i>think</i> we can assume that given the structure of OP's example, so +1</span>
<span class="comment-copy">Also, <code>table.get(e, e)</code> over <code>table[e]</code> would return the original string if there's no replacment.</span>
<span class="comment-copy">This example is definitely cleaner than the code i have, but It seems to be returning in the same amount of time though, i'm not sure anything else will be faster.</span>
