<div class="post-text" itemprop="text">
<p>Say I have an email as <code>sample.eml</code> and I would like to get a list of all the recipients on that email. Let's say it looks like this:</p>
<pre><code>From: wayne@example.com
To: Person Man &lt;person.man@example.com&gt;, Fredrick Douglas &lt;music.man@example.org&gt;
Cc: Guido &lt;bdfl@example.com&gt;, FLUFL &lt;barry@example.com&gt;
Bcc: spanish.inquisition@example.com, The Dude &lt;big.lebowski@example.net&gt;
Subject: Testing email

This isn't a very fancy email, but I'm just trying to prove a point here, OK?
</code></pre>
<p>I can stick this in a Python script and parse the email:</p>
<pre><code>from email.parser import BytesParser
from itertools import chain

msg = b'''
From: wayne@example.com
To: Person Man &lt;person.man@example.com&gt;, Fredrick Douglas &lt;music.man@example.org&gt;
Cc: Guido &lt;bdfl@example.com&gt;, FLUFL &lt;barry@example.com&gt;
Bcc: spanish.inquisition@example.com, The Dude &lt;big.lebowski@example.net&gt;
Subject: Testing email

This isn't a very fancy email, but I'm just trying to prove a point here, OK?
'''.strip()
email = BytesParser().parsebytes(msg)

for recipient in chain(email.get_all('to'), email.get_all('cc'), email.get_all('bcc')):
    print('Recipient is:', repr(recipient))
</code></pre>
<p>I would expect to see something like:</p>
<pre><code>Recipient is: 'Person Man &lt;person.man@example.com&gt;'
Recipient is: 'Fredrick Douglas &lt;music.man@example.org&gt;'
Recipient is: 'Guido &lt;bdfl@example.com&gt;'
Recipient is: 'FLUFL &lt;barry@example.com&gt;'
Recipient is: 'spanish.inquisition@example.com'
Recipient is: 'The Dude &lt;big.lebowski@example.net&gt;'
</code></pre>
<p>Instead, I get this:</p>
<pre><code>Recipient is: 'Person Man &lt;person.man@example.com&gt;, Fredrick Douglas &lt;music.man@example.org&gt;'
Recipient is: 'Guido &lt;bdfl@example.com&gt;, FLUFL &lt;barry@example.com&gt;'
Recipient is: 'spanish.inquisition@example.com, The Dude &lt;big.lebowski@example.net&gt;'
</code></pre>
<p>Is there a better way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The best way I've found so far involves <code>email.utils</code>.</p>
<pre><code>for recipient in getaddresses(
    chain(email.get_all('to', []), email.get_all('cc', []), email.get_all('bcc', []))
):
    print('The recipient is: ', recipient)
</code></pre>
<p>From <a href="https://docs.python.org/3/library/email.utils.html#email.utils.getaddresses" rel="nofollow noreferrer">the docs on getaddresses</a>:</p>
<blockquote>
<p>This method returns a list of 2-tuples of the form returned by
  parseaddr(). fieldvalues is a sequence of header field values as might
  be returned by Message.get_all.</p>
</blockquote>
<p><code>get_all</code> will return <code>None</code> if the header is absent, unless you pass in a default, so <code>get_all('to', [])</code> is a good idea.</p>
<p>This message has the added advantage of properly parsing some very terrible, but entirely valid, email addresses:</p>
<pre><code>msg = b"""
From: wayne@example.com
To: Person Man &lt;person.man@example.com&gt;, Fredrick Douglas &lt;music.man@example.org&gt;
Cc: Guido &lt;bdfl@example.com&gt;, FLUFL &lt;barry@example.com&gt; ,"Abc\@def"@example.com ,"Fred Bloggs"@example.com ,"Joe\\Blow"@example.com ,"Abc@def"@example.com ,customer/department=shipping@example.com ,\$A12345@example.com ,!def!xyz%abc@example.com ,_somename@example.com, much."more\ unusual"@example.com, very.unusual."@".unusual.com@example.com, very."(),:;&lt;&gt;[]".VERY."very@\\"very".unusual@strange.example.com
Subject: Testing email

This isn't a very fancy email, but I'm just trying to prove a point here, OK?
""".strip()
</code></pre>
<p>Just splitting on <code>,</code> wouldn't correctly handle:</p>
<pre><code>very."(),:;&lt;&gt;[]".VERY."very@\\"very".unusual@strange.example.com
</code></pre>
<p>Which is an entirely valid email address.</p>
</div>
