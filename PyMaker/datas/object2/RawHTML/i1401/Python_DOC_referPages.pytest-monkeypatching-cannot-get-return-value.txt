<div class="post-text" itemprop="text">
<p>I am trying to mock a return value for a function that I am calling, with the help of <code>pytest</code> and monkeypatching.</p>
<p>I set up the fixture for my mock class, and I am trying to "overwrite" one of the methods in said class.</p>
<pre><code>from foggycam import FoggyCam
from datetime import datetime

@pytest.fixture
def mock_foggycam():
    return Mock(spec=FoggyCam)

def test_start(mock_foggycam, monkeypatch):
    def get_mock_cookie():
        temp = []
        temp.append(Cookie(None, 'token', '000000000', None, None, 'somehost.com', 
            None, None, '/', None, False, False, 'TestCookie', None, None, None))
        return temp

    monkeypatch.setattr(FoggyCam, 'get_unpickled_cookies', get_mock_cookie)

    cookies = mock_foggycam.get_unpickled_cookies()
    mock_foggycam.get_unpickled_cookies.assert_called_with()

    for pickled_cookie in cookies:
        mock_foggycam.cookie_jar.set_cookie(pickled_cookie)
</code></pre>
<p>However, I might be missing something, because calling <code>assert_called_with</code> throws an error:</p>
<pre><code>________________________________________________________________ test_start ________________________________________________________________

mock_foggycam = &lt;Mock spec='FoggyCam' id='4408272488'&gt;, monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x106c0e5c0&gt;

    def test_start(mock_foggycam, monkeypatch):
        def get_mock_cookie():
            temp = []
            temp.append(Cookie(None, 'token', '000000000', None, None, 'somehost.com',
                None, None, '/', None, False, False, 'TestCookie', None, None, None))
            return temp

        monkeypatch.setattr(mock_foggycam, 'get_unpickled_cookies', get_mock_cookie)

        cookies = mock_foggycam.get_unpickled_cookies()
&gt;       mock_foggycam.get_unpickled_cookies.assert_called_with()
E       AttributeError: 'function' object has no attribute 'assert_called_with'
</code></pre>
<p>Is there something in my monkeypatching logic that I am misplacing?</p>
</div>
<div class="post-text" itemprop="text">
<p>Follow up from my comments. You are basically trying to make a mock that behaves like a mock (so that <code>assert_called_with</code> is available) and also executes your <code>get_mock_cookie</code> (a function).</p>
<p>This is what the <code>wraps</code> argument does. Documented here: <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock</a></p>
<p>You can try something like this:</p>
<pre><code>monkeypatch.setattr(mock_foggycam, "get_unpickled_cookies", Mock(wraps=get_mock_cookie)) 
</code></pre>
<p>The error that you are getting is basically telling you that you were trying to call <code>assert_called_with</code> on a function object (your <code>get_mock_cookie</code>).</p>
</div>
<span class="comment-copy">What version of python and pytest are you using ? I tried to run your code and the only thing that fails is the for loop, but your error happened before that. The for loop error can be solved using MagicMock instead of Mock.</span>
<span class="comment-copy">Oh actually, the code snippet and the error don't match: <code>monkeypatch.setattr(FoggyCam, ...</code> vs <code>monkeypatch.setattr(mock_foggycam, ...</code></span>
<span class="comment-copy">You are trying to make a mock that behaves like a mock (<code>assert_called_with</code>) and also keeps the original behavior of your <code>get_mock_cookie</code> (a function). You can try something like <code>monkeypatch.setattr(mock_foggycam, "get_unpickled_cookies", Mock(wraps=get_mock_cookie)) </code>.</span>
<span class="comment-copy">Thank you! That gets the code to go past the original hurdle, however that also makes the object non-iterable, so the test fails at the for loop. Is there a way to make the mock method return an iterable collection?</span>
<span class="comment-copy">Your <code>get_mock_cookie</code> function returns a list, so that should be iterable. In general you can use <code>MagicMock</code> instead of <code>Mock</code> if you want your mocks to be iterable. <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.MagicMock" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
