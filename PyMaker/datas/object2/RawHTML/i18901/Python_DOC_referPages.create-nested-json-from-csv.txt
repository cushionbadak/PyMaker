<div class="post-text" itemprop="text">
<p>I already read <a href="https://stackoverflow.com/questions/7948709/create-nested-json-from-flat-csv">Create nested JSON from flat csv</a>, but it didn't help in my case.</p>
<p>I have quite a big spreadsheet created with Google Docs consisting of 11 rows and 74 columns (some columns are not occupied).</p>
<p>I created an example on <a href="https://docs.google.com/spreadsheet/ccc?key=0ArAbcN96JXbzdEs4NzVETHVndGdneFZ6NzU4TE5zcWc" rel="nofollow noreferrer">Google Drive</a>. When exported as a <code>CSV</code> it looks like this:</p>
<pre class="lang-none prettyprint-override"><code>id,name,email,phone,picture01,picture02,picture03,status
1,Alice,alice@gmail.com,2131232,"image01_01
[this is an image]",image01_02,image01_03,single
2,Bob,bob@gmail.com,2854839,image02_01,"image02_02
[description to image 2]",,married
3,Frank,frank@gmail.com,987987,image03_01,image03_02,,single
4,Shawn,shawn@gmail.com,,image04_01,,,single
</code></pre>
<p>Now I would like to have a <code>JSON</code> structure, which looks like this:</p>
<pre><code>{
    "persons": [
        {
            "type": "config.profile",
            "id": "1",
            "email": "alice@gmail.com",
            "pictureId": "p01",
            "statusId": "s01"
        },
        {
            "type": "config.pictures",
            "id": "p01",
            "album": [
                {
                    "image": "image01_01",
                    "description": "this is an image"
                },
                {
                    "image": "image_01_02",
                    "description": ""
                },
                {
                    "image": "image_01_03",
                    "description": ""
                }
            ]
        },
        {
            "type": "config.status",
            "id": "s01",
            "status": "single"
        },
        {
            "type": "config.profile",
            "id": "2",
            "email": "bob@gmail.com",
            "pictureId": "p02",
            "statusId": "s02"
        },
        {
            "type": "config.pictures",
            "id": "p02",
            "album": [
                {
                    "image": "image02_01",
                    "description": ""
                },
                {
                    "image": "image_02_02",
                    "description": "description to image 2"
                }
            ]
        },
        {
            "type": "config.status",
            "id": "s02",
            "status": "married"
        }
    ]
}
</code></pre>
<p>And so on for the other lines.</p>
<p>My theoretical approach would be to go through the <code>CSV</code> file per row (here starts the first problem: now every row is equal to one line, but sometimes several, thus I need to count the commas?). Each row is equal to a block of <code>config.profile</code>, including the <code>id</code>, <code>email</code>, <code>pictureId</code>, and <code>statusId</code> (the latter two are being generated depending on the row number).</p>
<p>Then for each row a <code>config.pictures</code> block is generated with the same <code>id</code> as the one inserted in the <code>config.profile</code> block. The <code>album</code> is an array of as many elements as pictures are given.</p>
<p>Lastly each row has a <code>config.status</code> block, which, again, has the same <code>id</code> as the one given in <code>config.profile</code>, and one entry of <code>status</code> with the corresponding status.</p>
<p>I'm entirely clueless how to create the nested and conditional JSON file.</p>
<p>I just got to the point where I convert the <code>CSV</code> to valid <code>JSON</code>, without any nesting and additional info, which are not directly given in the <code>CSV</code>, like the <code>type</code>, <code>pictureId</code>, <code>statusId</code>, and so on.</p>
<p>Any help is appreciated. If it is easier to program this in another script language (like <code>ruby</code>), I would gladly switch to those).</p>
<p>Before someone thinks this is a homework or whatnot. It is not. I just want to automate an otherwise very tiresome copy&amp;paste task.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/3/library/csv.html" rel="noreferrer"><code>csv</code></a> module will handle the CSV reading nicely - including handling line breaks that are within quotes.</p>
<pre><code>import csv
with open('my_csv.csv') as csv_file:
   for row in csv.reader(csv_file):
       # do work
</code></pre>
<p>The <code>csv.reader</code> object is an iterator - you can iterate through the rows in the CSV by using a <code>for</code> loop. Each row is a list, so you can get each field as <code>row[0]</code>, <code>row[1]</code>, etc. Be aware that this will load the first row (which just contains field names in your case).</p>
<p>As we have field names given to us in the first row, we can use <code>csv.DictReader</code> so that fields in each row can be accessed as <code>row['id']</code>, <code>row['name']</code>, etc. This will also skip the first row for us:</p>
<pre><code>import csv
with open('my_csv.csv') as csv_file:
   for row in csv.DictReader(csv_file):
       # do work
</code></pre>
<p>For the JSON export, use the <a href="http://docs.python.org/3/library/json.html" rel="noreferrer"><code>json</code></a> module. <code>json.dumps()</code> will take Python data structures such as lists and dictionaries and return the appropriate JSON string:</p>
<pre><code>import json
my_data = {'id': 123, 'name': 'Test User', 'emails': ['test@example.com', 'test@hotmail.com']}
my_data_json = json.dumps(my_data)
</code></pre>
<p>If you want to generate JSON output exactly as you posted, you'd do something like:</p>
<pre><code>output = {'persons': []}
with open('my_csv.csv') as csv_file:
    for person in csv.DictReader(csv_file):
        output['persons'].append({
            'type': 'config.profile',
            'id': person['id'],
            # ...add other fields (email etc) here...
        })

        # ...do similar for config.pictures, config.status, etc...

output_json = json.dumps(output)
</code></pre>
<p><code>output_json</code> will contain the JSON output that you want.</p>
<p>However, I'd suggest you carefully consider the structure of the JSON output that you're after - at the moment, you're defining an outer dictionary that serves no purpose, and you're adding all your '<code>config</code>' data directly under '<code>persons</code>' - you may want to reconsider this.</p>
</div>
<span class="comment-copy">Take a look at: <a href="http://docs.python.org/2/library/csv.html#module-csv" rel="nofollow noreferrer">docs.python.org/2/library/csv.html#module-csv</a></span>
