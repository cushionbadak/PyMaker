<div class="post-text" itemprop="text">
<pre><code>child = pexpect.spawn('ftp XX.XXX.73.64')
child.logfile = sys.stdout
child.expect ('Name .*:')
child.sendline('admin')
child.expect('Password .*:')
child.sendline('XXXXX')
</code></pre>
<p>Output:
Connected to XX.XXX.73.64.
220 (vsFTPd 2.0.7)
Name (XX.XXX.73.64): admin
admin
331 Please specify the password.
Password:XXXXX</p>
<p>I'm trying to automate FTPing to a switch, but my sendline command for 'admin' seems to be sending 'admin' twice. Thus, my username is incorrect. Any ideas how to fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's going to be very hard to debug your code without a lot more information. Clearly <code>sendline</code> isn't supposed to send the line twice, so something is wrong… but you haven't given us a reproducible test case, or any information beyond those four lines.</p>
<p>But really, things are going to be a lot simpler if you don't try to use <code>pexpect</code> in the first place. If you really do need to script a CLI program that wasn't designed for it, <code>pexpect</code> is a great option. But if you have an API (or a scriptable app, or etc.), it's always going to be easier. Python includes batteries for a reason, and one of those batteries is <a href="http://docs.python.org/3/library/ftplib.html" rel="nofollow"><code>ftplib</code></a>:</p>
<pre><code>ftp = ftplib.FTP('XX.XXX.73.64', 'admin', 'XXXXX')
</code></pre>
<p>You can make the <code>connect</code> and <code>login</code> calls explicit instead of having the constructor do it for you if you need to do anything fancier than the usual… but in this case, you don't, so it's literally a one-liner.</p>
<p><a href="http://www.pythonforbeginners.com/code-snippets-source-code/how-to-use-ftp-in-python/" rel="nofollow">How to use FTP in Python</a> looks like a nice tutorial.</p>
</div>
<span class="comment-copy">Is there a reason you're using <code>pexpect</code> on the <code>ftp</code> command instead of just using <code>ftplib</code>?</span>
<span class="comment-copy">Not an answer, but I agree with abarnert, why aren't you using the std ftplib?  In general, I have found it better to stick with std libs, until there is functionality that I need that is not supplied. Doesn't mean that you don't have a reason, but would be helpful to understand.  Final note: you will almost always get more help and better answers when dealing with std libs.</span>
<span class="comment-copy">@DavidS: Agreed in general… but even if <code>ftplib</code> weren't in the stdlib and <code>pexpect</code> were, I'd still suggest using a nice API over trying to fight with some program's CLI that wasn't intended to be scripted…</span>
<span class="comment-copy">Please see <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">What is the XY problem?</a>. If your goal is "trying to automate FTPing to a switch", ask for help doing that. Showing what you've tried and why it didn't work is always a good idea—but it shouldn't be your whole question.</span>
<span class="comment-copy">I'm sorry, that was not my intent.</span>
<span class="comment-copy">Yeah, I'm trying to script this for a specific CLI. I believe my error was the expect statement cause now I can connect.</span>
<span class="comment-copy">@user2285010: <i>Why</i> are you trying to script this specific CLI? That CLI is just the <code>ftp</code> command. <code>ftplib</code> can do everything it can, and more, much more easily. If your goal is "trying to automate FTPing to a switch", you don't need <code>pexpect</code> for that.</span>
<span class="comment-copy">I'm trying to transfer from certain directories dynamically. I.e. the user chooses which directory to get the file from. The only way i can do this is to be able to change directories via the client side and I couldn't find out how to do that using th FTPlib.</span>
<span class="comment-copy">If you want to change the server-side directory, that's just <a href="http://docs.python.org/3/library/ftplib.html#ftplib.FTP.cwd" rel="nofollow noreferrer"><code>ftp.cwd</code></a>. It's in Example 2 of the tutorial I linked to.</span>
