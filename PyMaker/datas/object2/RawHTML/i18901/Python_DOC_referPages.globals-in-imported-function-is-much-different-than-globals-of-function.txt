<div class="post-text" itemprop="text">
<p>File <strong>a.py</strong>:</p>
<pre><code>def f():
  pass
</code></pre>
<p>File <strong>main.py</strong>:</p>
<pre><code>import a
print("f globals")
print(a.f.__globals__)

def g():
  pass

print("g globals")
print(g.__globals__)
</code></pre>
<p><code>a.f.__globals__</code> have much more elements than <code>g.__globals__</code>. At the first look it seems that built-in functions and types are in <code>a.f.__globals__</code>. Why these two dictionaries are different?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking at the module namespaces. The <code>f()</code> globals differs from <code>g()</code> globals because they both live in different modules.</p>
<p>You'll see the same global namespace if you use <a href="http://docs.python.org/3/library/functions.html#vars" rel="nofollow"><code>vars()</code></a> (for globals in <code>main</code>) and <code>vars(a)</code> (for the globals of module <code>a</code>):</p>
<pre><code>print(sorted(vars(a).keys() - vars()))
# prints ['__initializing__', 'f'], only `a` has `f` defined, the `__initializing__` value is a flag used by the import machinery
print(sorted(vars().keys() - vars(a)))
# prints ['a', 'g'], only `main` has imported `a` and defined function `g`
</code></pre>
<p>Each and every module gets its own namespace, <code>globals()</code> are not interpreter global, they are module global only. Importing a module means you are importing a reference to that namespace, or creating references to names <em>in</em> that namespace.</p>
<p>From the <a href="http://docs.python.org/3/reference/datamodel.html" rel="nofollow">datamodel documentation</a> on module objects:</p>
<blockquote>
<p>A module object has a namespace implemented by a dictionary object (this is the dictionary referenced by the <code>__globals__</code> attribute of functions defined in the module)</p>
</blockquote>
<p>and on function objects:</p>
<blockquote>
<p><code>__globals__</code>: A reference to the dictionary that holds the function’s global variables — the global namespace of the module in which the function was defined.</p>
</blockquote>
<p>The <code>__builtins__</code> key of the main script merely points to the <code>__builtins__</code> module, in imported modules that has been expanded into a dictionary. These are the same thing, really.</p>
</div>
<span class="comment-copy">I don't know if this really answers why an imported function's <code>__globals__</code> should include all of the builtins.</span>
<span class="comment-copy">@Wooble: I showed that there are no more keys in the <code>f()</code> globals as there are in the <code>g()</code> globals, other than what is to be expected.</span>
