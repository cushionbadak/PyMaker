<div class="post-text" itemprop="text">
<p>I am creating a GUI using Jython. I want to program my logic in C. How could I can call a C Function from my Python Code. Sorry if this a newbie question, but I have never worked with linking files except Sparc Assembly from C.</p>
</div>
<div class="post-text" itemprop="text">
<p>Jython cannot use <code>ctypes</code>, or C extension modules (whether built manually, or with Cython, or otherwise).</p>
<p>The way to do this is the same way as in Java: Through a JNI bridge.</p>
<p>First, you write a C++ wrapper that talks to the so, and uses functions from <code>&lt;jni.h&gt;</code> to implement functions like this:</p>
<pre><code>JNIEXPORT void JNICALL _PACKAGE(bar)(JNIEnv *env, jclass cls, jint i) {
    if (bar(i)) {
        throwPyFromErrno(env, OSError);
    }
}
</code></pre>
<p>Next, in Java, you define a <code>public</code> class full of Java wrappers around those C++ wrappers, like this:</p>
<pre><code>public class foo implements InitModule {
    public final static native void bar(int i);
}
</code></pre>
<p>Finally, in Jython, you can just import the class (which acts like a Python module) from its Java module and use it like any other module:</p>
<pre><code>try:
    foo.bar(3)
except OSError as e:
    print "Failed:", e
</code></pre>
<hr/>
<p>Most of this is standard JNI, but you also have to know things like how to create Jython objects. Ideally, you'll use wrappers for that, so you can just write <code>makePyInteger(env, value)</code> or <code>throwPyFromErrno(env, exctype)</code> instead of doing all the <code>FindClass</code>, <code>GetStaticMethodID</code>, etc. stuff manually.</p>
<p>I don't have any tutorials to recommend. But see <a href="http://sourceforge.net/projects/jnios/" rel="nofollow">jnios</a> for a nice-sized example. The O'Reilly book's <a href="http://docstore.mik.ua/orelly/other/python/0596001886_pythonian-chp-25.html" rel="nofollow">Chapter 25. Extending and Embedding Jython</a> seems like it might be a decent primer (although I haven't read it). You'll probably want to read a tutorial on using JNI for Java before trying to tackle Jython.</p>
</div>
<div class="post-text" itemprop="text">
<p>A different way to solve this problem is to break your single program into two pieces.</p>
<p>The GUI program runs in Jython. When it needs to call the C code, it does that by running a worker program.</p>
<p>The worker program runs in CPython or PyPy, so it can use any of the usual techniques for talking to C libraries: <a href="http://docs.python.org/3/library/ctypes.html" rel="nofollow"><code>ctypes</code></a>, <a href="http://cffi.readthedocs.org/en/release-0.6/" rel="nofollow"><code>cffi</code></a>, <a href="http://docs.python.org/3/extending/index.html" rel="nofollow">a custom C extension module</a> (maybe using <a href="http://www.cython.org" rel="nofollow">Cython</a>, <a href="http://www.boost.org/doc/libs/1_53_0/libs/python/doc/index.html" rel="nofollow">Boost.Python</a>, <a href="http://www.swig.org" rel="nofollow">SWIG</a>, <a href="http://riverbankcomputing.co.uk/software/sip/intro" rel="nofollow">SIP</a>, â€¦), <a href="http://docs.scipy.org/doc/scipy/reference/tutorial/weave.html" rel="nofollow">Weave</a>, etc.</p>
<hr/>
<p>For a simple case, where you just need to call one function, pass it a few strings, and get back a string, it's as trivial as this:</p>
<pre><code>import subprocess

def my_function(*args):
    return subprocess.check_output(['python', 
                                    '/path/to/worker/script.py'] + args)
</code></pre>
<p>(Note that there are a few bugs with <code>subprocess</code> in older versions of Jython, especially on OS X and Windows. If you run into a problem, 2.5.4 and 2.7.0, which are currently in RC and beta stages, respectively, have probably fixed it.)</p>
<hr/>
<p>If you need to make lots of calls one at a time throughout the life of your program, you'll probably want to keep the worker script running in the background, and use some form of RPC to talk to it. <a href="http://stupidpythonideas.blogspot.com/2013/06/how-to-split-your-program-in-two.html" rel="nofollow">This blog post</a> shows how to do it using the <code>bjsonrpc</code> library.</p>
</div>
<span class="comment-copy">It's not a dup, because he's using Jython, not CPython.</span>
