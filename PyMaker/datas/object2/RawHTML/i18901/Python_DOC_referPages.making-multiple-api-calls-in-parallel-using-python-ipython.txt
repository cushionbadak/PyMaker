<div class="post-text" itemprop="text">
<p>I am working with Python (IPython &amp; Canopy) and a RESTful content API, on my local machine (Mac).</p>
<p>I have an array of 3000 unique IDs to pull data for from the API and can only call the API with one ID at a time.</p>
<p>I was hoping somehow to make 3 sets of 1000 calls in parallel to speed things up.</p>
<p>What is the best way of doing this?</p>
<p>Thanks in advance for any help!</p>
</div>
<div class="post-text" itemprop="text">
<p>Without more information about what you are doing in particular, it is hard to say for sure, but a simple threaded approach may make sense.</p>
<p>Assuming you have a simple function that processes a single ID:</p>
<pre><code>import requests

url_t = "http://localhost:8000/records/%i"

def process_id(id):
    """process a single ID"""
    # fetch the data
    r = requests.get(url_t % id)
    # parse the JSON reply
    data = r.json()
    # and update some data with PUT
    requests.put(url_t % id, data=data)
    return data
</code></pre>
<p>You can expand that into a simple function that processes a range of IDs:</p>
<pre><code>def process_range(id_range, store=None):
    """process a number of ids, storing the results in a dict"""
    if store is None:
        store = {}
    for id in id_range:
        store[id] = process_id(id)
    return store
</code></pre>
<p>and finally, you can fairly easily map sub-ranges onto threads to allow some number of requests to be concurrent:</p>
<pre><code>from threading import Thread

def threaded_process_range(nthreads, id_range):
    """process the id range in a specified number of threads"""
    store = {}
    threads = []
    # create the threads
    for i in range(nthreads):
        ids = id_range[i::nthreads]
        t = Thread(target=process_range, args=(ids,store))
        threads.append(t)

    # start the threads
    [ t.start() for t in threads ]
    # wait for the threads to finish
    [ t.join() for t in threads ]
    return store
</code></pre>
<p>A full example in an IPython Notebook: <a href="http://nbviewer.ipython.org/5732094" rel="noreferrer">http://nbviewer.ipython.org/5732094</a></p>
<p>If your individual tasks take a more widely varied amount of time, you may want to use a <a href="http://docs.python.org/3/library/concurrent.futures.html?highlight=threadpool#concurrent.futures.ThreadPoolExecutor" rel="noreferrer">ThreadPool</a>, which will assign jobs one at a time (often slower if individual tasks are very small, but guarantees better balance in heterogenous cases).</p>
</div>
<span class="comment-copy">do You consider to use threads  ( separate thread for each request)?</span>
<span class="comment-copy">I am okay with that as long as its the right option - I imagine the whole affair is 'embarrassingly parallelisable'...</span>
<span class="comment-copy">Quick one what does the :: do above? Why not just a single :?</span>
<span class="comment-copy">It means stride. when you specify a slice, there are three numbers: <code>start:stop:stride</code>. So <code>1::3</code> means every third element, starting with 1, i.e. <code>[1,4,7,...]</code>.  This is just a simple way to equally partition a list.</span>
<span class="comment-copy">So the double colon just means the stop is unspecified, and defaults to "the end".</span>
