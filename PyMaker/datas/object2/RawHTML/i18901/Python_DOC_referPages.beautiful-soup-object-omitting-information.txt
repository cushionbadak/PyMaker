<div class="post-text" itemprop="text">
<p>Problem: The beautiful soup object seems to delete valuable information from the HTML.  Why is it doing this, and how can I extract this field? </p>
<p>Example:  The raw HTML I'm interested in expresses this: </p>
<pre><code>&lt;div id="KittyChow"&gt;
            &lt;h4 class="noteText"&gt;foodAmount&lt;/h4&gt;
            &lt;span&gt;&lt; 1 tsp&lt;/span&gt;
        &lt;/div&gt;
</code></pre>
<p>When I create my soup object however, the corresponding lines of HTML become: </p>
<pre><code>&lt;div id="KittyChow"&gt;&lt;h4 class="noteText"&gt;foodAmount&lt;/h4&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;
</code></pre>
<p>My problem and question:   Why has it deleted the information in between span and /span?  Is it because the "less than/ &lt;" sign indicated some HTML so it stripped that? I want to know WHY this happens.  I couldn't seem to find an explanation in the documentation.... Is there ANY WAY to parse this in BeautifulSoup? </p>
<p>Second:  How do I extract this &lt; 1 tsp parameter?   I've tried creating a regex with a left and right endpoint, and that ALMOST works.  I know how to use regex to return text if I specify a "left substring match" and a "right substring match." For instance, the code below will return "cat." </p>
<pre><code>import re

string= "The cat is obese."
left= "The"
right= "is obese."

pattern= re.compile(left + "(.*?)" + right)
answer= pattern.findall(string)[0]

print answer
</code></pre>
<p>The issue is, when I replace the left and right match string with HTML, I get the "index is out of bounds" error, because of the whitespace and indentation implicated with casting HTML into a string.   </p>
<p>So as you can tell... I've done a fair bit of research, and I'm still stuck on extracting &lt; and &gt; signs within fields/ attributes of HTML tags using both BeautifulSoup and Python's regex module.  Please help me? :) </p>
</div>
<div class="post-text" itemprop="text">
<p>Do you have control over your html? It is malformed. Instead of </p>
<pre><code>&lt;div id="KittyChow"&gt;
    &lt;h4 class="noteText"&gt;foodAmount&lt;/h4&gt;
    &lt;span&gt;&lt; 1 tsp&lt;/span&gt;
&lt;/div&gt;
</code></pre>
<p>It should look like</p>
<pre><code>&lt;div id="KittyChow"&gt;
    &lt;h4 class="noteText"&gt;foodAmount&lt;/h4&gt;
    &lt;span&gt;&amp;lt; 1 tsp&lt;/span&gt;
&lt;/div&gt;
</code></pre>
<p><a href="http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references" rel="nofollow noreferrer">http://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references</a></p>
<p>If you are generating the html on the server-side, it should be easy in any language to encode your entities: <a href="http://php.net/manual/en/function.htmlentities.php" rel="nofollow noreferrer">php</a> <a href="http://docs.python.org/3/library/html.html#html.escape" rel="nofollow noreferrer">python</a> <a href="http://htmlentities.rubyforge.org/" rel="nofollow noreferrer">ruby</a></p>
<p><strong>edit</strong>: According to this other answer: <a href="https://stackoverflow.com/a/14171433/1253312">https://stackoverflow.com/a/14171433/1253312</a> You can do this:</p>
<pre><code>BeautifulSoup("&lt;div&gt; &lt; 20 &lt;/div&gt;", "html5lib")
</code></pre>
<p>Which tells BS to use a different parser, which can handle the <code>&lt;</code> character.</p>
</div>
<div class="post-text" itemprop="text">
<p>The HTML is broken. You can't have an unescaped <code>&lt;</code> character in HTML; the parser will get mightily confused. As a workaround, in this particular example you could replace <code>&lt;</code> followed by a space with <code>&amp;lt;</code> followed by a space:</p>
<pre><code>raw_html = raw_html.replace("&lt; ", "&amp;lt; ")
</code></pre>
<p>Although this is not a general solution.</p>
</div>
<span class="comment-copy">Oh! How do I do that?  When I print the raw page_Html it's displayed as the link above.   Would I just have to encode &lt; into &amp;lt after I get the raw page_HTML?</span>
<span class="comment-copy">Unfortunately it is a very difficult problem to fix malformed html. Most browsers only do a "best guess". kindall's solution is very basic, and only handles this one case, and can still break your page.</span>
<span class="comment-copy">Updated answer with reference to another possible solution.</span>
<span class="comment-copy">Oh wow, thanks so much! :)</span>
