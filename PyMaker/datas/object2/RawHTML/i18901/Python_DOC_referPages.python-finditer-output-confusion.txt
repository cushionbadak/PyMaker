<div class="post-text" itemprop="text">
<p>I was trying this code as mentioned in docs.python:</p>
<pre><code>&gt;&gt;&gt; iterator = p.finditer('12 drummers drumming, 11 ... 10 ...')
&gt;&gt;&gt; for match in iterator:
...     print (match.span())
... 
(0, 2)
(22, 24)
(29, 31)
</code></pre>
<p>where <code>p</code> was defined as</p>
<pre><code>p = re.compile('\d+')
</code></pre>
<p>But 12,11 and 10 all are two digit numbers. So why is it showing 0-2, 22-24, 29-31?
Whats the deal with this output. Whats the benefit if any?</p>
</div>
<div class="post-text" itemprop="text">
<p>As stated in the doc too:</p>
<blockquote>
<p>span()    Return a tuple containing the (start, end) positions of the
  match</p>
</blockquote>
<p>Prefer using <code>match.group</code> to display match <em>content</em>:</p>
<pre><code>&gt;&gt;&gt; iterator = p.finditer('12 drummers drumming, 11 ... 10 ...')
&gt;&gt;&gt; for match in iterator:
    print match.group(), match.span()



12 (0, 2)
11 (22, 24)
10 (29, 31)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The span maps nicely onto a slice. ie the end index is not included</p>
<pre><code>&gt;&gt;&gt; ['12 drummers drumming, 11 '[slice(*i)] for i in ((0,2), (22,24))]
['12', '11']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Looking at the documentation of <a href="http://docs.python.org/2/library/re.html#re.MatchObject.span" rel="nofollow"><code>span()</code></a>, <a href="http://docs.python.org/2/library/re.html#re.MatchObject.start" rel="nofollow"><code>start()</code></a>, and <code>end()</code>, <code>span()</code> returns a tuple of the start and end of the match.</p>
<blockquote>
<p>For MatchObject m, return the 2-tuple (m.start(group), m.end(group)). Note that if group did not contribute to the match, this is (-1, -1). group defaults to zero, the entire match.</p>
</blockquote>
<p><code>start()</code> and <code>end()</code> are the indices that indicate where the matched substring exists.</p>
<blockquote>
<p>Return the indices of the start and end of the substring matched by group; group defaults to zero (meaning the whole matched substring).</p>
</blockquote>
<p>So <code>match.span()</code> will return just that tuple. If you want to display the actual match, try <a href="http://docs.python.org/2/library/re.html#re.MatchObject.group" rel="nofollow"><code>match.group()</code></a>.</p>
</div>
<span class="comment-copy">Where did you define <code>p</code>? What is it?</span>
<span class="comment-copy"><code>p = re.compile('\d+')</code>. It's towards the end of <a href="http://docs.python.org/3/howto/regex.html?highlight=drummers%20drumming#performing-matches" rel="nofollow noreferrer">this section</a> of the Regular Expression HOWTO.</span>
<span class="comment-copy">Emmanuel thanks for reply &amp; Im sorry if I didint put it up properly but my question is that, shouldnt the start and end indexes be this -- (0,1); (22,23); (29,30) because the length of digit is only two. whereas (0,2) would mean the digit length is 3.</span>
<span class="comment-copy">Oh sorry, well the start index is <i>included</i>, whereas the end index is <i>excluded</i> - this is the same for slicing notation: <code>t[1:3]</code> only returns 2 characters (at indexes 1 and 2), not 3 !!</span>
