<div class="post-text" itemprop="text">
<p>I am new to python programming,
i like to know how can i enhance the features of builtin functions(<a href="http://en.wikipedia.org/wiki/Monkey_patch" rel="nofollow">Monkeypatch</a>) </p>
<p>for example</p>
<p>i know <a href="http://docs.python.org/release/3.1.5/library/functions.html#sum" rel="nofollow">sum()</a> built in function allowed only on number items  </p>
<pre><code>&gt;&gt;&gt; sum([4,5,6,7]) #22
</code></pre>
<p>i would like to make sum function to be allow list of items as strings as shown below</p>
<p>for example</p>
<pre><code>&gt;&gt;&gt; sum(['s','t','a','c','k']) # 'stack'
</code></pre>
<p>Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>Not monkey patching exactly, just re-defined <code>sum</code> to make it work for strings as well.</p>
<pre><code>&gt;&gt;&gt; import __builtin__
def sum(seq, start = 0):
    if all(isinstance(x,str) for x in seq):
        return "".join(seq)
    else:
        return __builtin__.sum(seq, start)
...     
&gt;&gt;&gt; sum([4,5,6,7])
22
&gt;&gt;&gt; sum(['s','t','a','c','k'])
'stack'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't really "monkeypatch" a function the way you can a class, object, module, etc.</p>
<p>Those other things all ultimately come down to a collection of attributes, so replacing one attribute with a different one, or adding a new one, is both easy and useful. Functions, on the other hand, are basically atomic things.*</p>
<p>You can, of course, monkeypatch the builtins module by replacing the <code>sum</code> function. But I don't think that's what you were asking. (If you were, see below.)</p>
<p>Anyway, you can't patch <code>sum</code>, but you can write a new function, with the same name if you want, (possibly with a wrapper around the original function—which, you'll notice, is exactly what decorators do).</p>
<hr/>
<p>But there is really no way to use <code>sum(['s','t','a','c','k'])</code> to do what you want, because <code>sum</code> by default starts off with 0 and adds things to it. And you can't add a string to 0.**</p>
<p>Of course you can always pass an explicit <code>start</code> instead of using the default, but you'd have to change your calling code to send the appropriate <code>start</code>. In some cases (e.g., where you're sending a literal list display) it's pretty obvious; in other cases (e.g., in a generic function) it may not be. That still won't work here, because <code>sum(['s','t','a','c','k'], '')</code> will just raise a <code>TypeError</code> (try it and read the error to see why), but it will work in other cases.</p>
<p>But there is no way to avoid having to know an appropriate starting value with <code>sum</code>, because that's how <code>sum</code> works.</p>
<p>If you think about it, <code>sum</code> is conceptually equivalent to:</p>
<pre><code>def sum(iterable, start=0):
    reduce(operator.add, iterable, start)
</code></pre>
<p>The only real problem here is that <code>start</code>, right? <code>reduce</code> allows you to leave off the start value, and it will start with the first value in the iterable:</p>
<pre><code>&gt;&gt;&gt; reduce(operator.add, ['s', 't', 'a', 'c', 'k'])
'stack'
</code></pre>
<p>That's something <code>sum</code> can't do. But, if you really want to, you can redefine <code>sum</code> so it <em>can</em>:</p>
<pre><code>&gt;&gt;&gt; def sum(iterable):
...     return reduce(operator.add, iterable)
</code></pre>
<p>… or:</p>
<pre><code>&gt;&gt;&gt; sentinel = object()
&gt;&gt;&gt; def sum(iterable, start=sentinel):
...     if start is sentinel:
...         return reduce(operator.add, iterable)
...     else:
...         return reduce(operator.add, iterable, start)
</code></pre>
<p>But note that this <code>sum</code> will be much slower on integers than the original one, and it will raise a <code>TypeError</code> instead of returning <code>0</code> on an empty sequence, and so on.</p>
<hr/>
<p>If you really do want to monkeypatch the builtins (as opposed to just defining a new function with a new name, or a new function with the same name in your module's <code>globals()</code> that shadows the builtin), here's an example that works for Python 3.1+, as long as your modules are using normal globals dictionaries (which they will be unless you're running in an embedded interpreter or an <code>exec</code> call or similar):</p>
<pre><code>import builtins
builtins.sum = _new_sum
</code></pre>
<p>In other words, same as monkeypatching any other module.</p>
<p>In 2.x, the module is called <code>__builtin__</code>. And the rules for how it's accessed through globals changed somewhere around 2.3 and again in 3.0. See <a href="http://docs.python.org/3/library/builtins.html" rel="nofollow noreferrer"><code>builtins</code></a>/<a href="http://docs.python.org/2/library/__builtin__.html" rel="nofollow noreferrer"><code>__builtin__</code></a> for details.</p>
<hr/>
<p>* Of course that isn't <em>quite</em> true. A function has a name, a list of closure cells, a doc string, etc. on top of its code object. And even the code object is a sequence of bytecodes, and you can use <code>bytecodehacks</code> or hard-coded hackery on that. Except that <code>sum</code> is actually a builtin-function, not a function, so it doesn't even have code accessible from Python… Anyway, it's close enough for most purposes to say that functions are atomic things.</p>
<p>** Sure, you <em>could</em> convert the string to some subclass that knows how to add itself to integers (by ignoring them), but really, you don't want to.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sum</code> already works with anything that defines an <code>__add__</code> function. The second parameter is the starting point, which defaults to 0, but you can replace it with the "nothing" version of whatever you're summing. For example, adding together a list of lists, starting with an empty list:</p>
<pre><code>sum([[1, 2, 3], [4, 5, 6]], [])
</code></pre>
<p>returns:</p>
<pre><code>[1, 2, 3, 4, 5, 6]
</code></pre>
<p>So normally, this would actually work:</p>
<pre><code>sum(['s','t','a','c','k'], '')
</code></pre>
<p>but this raises an exception which specifically tells you to use <code>join</code> for strings. Probably because it performs better.</p>
</div>
<div class="post-text" itemprop="text">
<p>To do what you want, you should use <a href="http://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join</code></a>:</p>
<pre><code>"".join(['s','t','a','c','k'])
</code></pre>
<p>Monkey patching is possible, but frowned upon, in Python, especially for trivial things like this. It will make you code harder to read, because standard library functions will do unexpected things.</p>
<p>But, if you really want to, you can just redefine the function. Python won't stop you:</p>
<pre><code>def sum(l):
    return "".join(l)
</code></pre>
<p>Python will let you do whatever you want to existing modules:</p>
<pre><code>import sys
sys.stdout = open("somefile", "w")
</code></pre>
<p>But again, you shouldn't.</p>
</div>
<div class="post-text" itemprop="text">
<p>Easier to ask forgiveness than permission:</p>
<pre><code>import __builtin__
def sum(seq, start = 0):
    try:
        return "".join(seq)
    except TypeError:
        return __builtin__.sum(seq, start)
...     
&gt;&gt;&gt; sum([4,5,6,7])
22
&gt;&gt;&gt; sum(['s','t','a','c','k'])
'stack'
</code></pre>
<p>Please forgive me if this looks like I just copied most of someone else's answer. :)</p>
<p><strong>But seriously,</strong> you should just use <code>''.join()</code> instead as @nmclean has explained in an under appreciated answer.</p>
</div>
<span class="comment-copy">Is your question how to do monkey patching, or how to write that particular function?</span>
<span class="comment-copy">You should accept abarnert's <a href="http://stackoverflow.com/a/17098594/846892">answer</a>, it is surely better than mine.</span>
<span class="comment-copy">@AshwiniChaudhary: No, abarnerts' answer is flawed.</span>
<span class="comment-copy">@nmclean's answer is the simplest and correct.</span>
<span class="comment-copy">@EthanFurman: It's only flawed because you're misreading it. That may be my fault for not being clear enough; I've rewritten it to explain that better.</span>
<span class="comment-copy">Deserves +10 for the footnotes alone.</span>
<span class="comment-copy">As always, a great answer. :)</span>
<span class="comment-copy"><code>0</code> is a problem?  It's a default argument -- specify something else that's appropriate for whatever you're summing and you'll be fine (except for <code>str</code>, of course, since that is special-cased to fail).</span>
<span class="comment-copy">+1 on behalf of @Burhan Khalid, +9 more to go.</span>
<span class="comment-copy">@EthanFurman: <code>0</code> is a problem because the OP specifically wants to be able to call <code>sum</code> without having to specify a start value, and you can't do that with <code>sum</code>. Which means either he has to use a function that works the way he wants like <code>reduce</code> or <code>''.join</code>, or he has to change what he wants. The former is at least as reasonable as the latter (It handles questions like "How do you write a generic function that uses <code>sum</code> appropriately on any type?" "You don't; you use <code>reduce</code>".). But you're right to point out that the latter is also perfectly reasonable for the OP's case.</span>
<span class="comment-copy">Whoever downvoted this, why?</span>
<span class="comment-copy">I belive this is not the right approach to do enhancement...</span>
<span class="comment-copy">Re-defining the <code>sum</code> function is not monkey patching I guess, your new <code>sum</code> function won't work for numbers.</span>
<span class="comment-copy">@BrendanLong: Hiding <code>builtins.sum</code> with <code>globals().sum</code> isn't really monkeypatching anything, unless defining a local variable with the same name as a global or nonlocal counts as monkeypatching…</span>
<span class="comment-copy">I think the point of this answer is that if you're writing Python, write your code like Python is supposed to be. Don't go messing with the language to fit your paradigm; write code Pythonically!</span>
<span class="comment-copy">@user1559873: About a quarter of the total documentation for <a href="http://docs.python.org/2/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> is about how you shouldn't really use it for strings: "The preferred, fast way to concatenate a sequence of strings is by calling <code>''.join(sequence)</code>." So, once you've decided that you really want <code>sum</code> to work on strings without passing <code>start=''</code>, you're probably already beyond the bounds of a right approach.</span>
