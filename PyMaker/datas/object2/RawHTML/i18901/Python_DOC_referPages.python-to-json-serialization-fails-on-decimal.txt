<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1960516/python-json-serialize-a-decimal-object">Python JSON serialize a Decimal object</a>
<span class="question-originals-answer-count">
                    14 answers
                </span>
</li>
</ul>
</div>
<p>I have a python object which includes some decimals. This is causing the json.dumps() to break.</p>
<p>I got the following solution from SO (e.g. <a href="https://stackoverflow.com/questions/1960516/python-json-serialize-a-decimal-object">Python JSON serialize a Decimal object</a>) but
the recoomended solution still does not work. Python website - has the exact same answer.</p>
<p>Any suggestions how to make this work?</p>
<p>Thanks. Below is my code. It looks like the dumps() doesn't even go into the specialized encoder.</p>
<pre><code>clayton@mserver:~/python&gt; cat test1.py
import json, decimal

class DecimalEncoder(json.JSONEncoder):
        def _iterencode(self, o, markers=None):
                print "here we go o is a == ", type(o)
                if isinstance(o, decimal.Decimal):
                        print "woohoo! got a decimal"
                        return (str(o) for o in [o])
                return super(DecimalEncoder, self)._iterencode(o, markers)

z = json.dumps( {'x': decimal.Decimal('5.5')}, cls=DecimalEncoder )
print z
clayton@mserver:~/python&gt; python test1.py
Traceback (most recent call last):
  File "test1.py", line 11, in &lt;module&gt;
    z = json.dumps( {'x': decimal.Decimal('5.5')}, cls=DecimalEncoder )
  File "/home/clayton/python/Python-2.7.3/lib/python2.7/json/__init__.py", line 238, in dumps
    **kw).encode(obj)
  File "/home/clayton/python/Python-2.7.3/lib/python2.7/json/encoder.py", line 201, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/home/clayton/python/Python-2.7.3/lib/python2.7/json/encoder.py", line 264, in iterencode
    return _iterencode(o, 0)
  File "/home/clayton/python/Python-2.7.3/lib/python2.7/json/encoder.py", line 178, in default
    raise TypeError(repr(o) + " is not JSON serializable")
TypeError: Decimal('5.5') is not JSON serializable
clayton@mserver:~/python&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is not (no longer) recommended you create a subclass; the <code>json.dump()</code> and <code>json.dumps()</code> functions take a <code>default</code> function:</p>
<pre><code>def decimal_default(obj):
    if isinstance(obj, decimal.Decimal):
        return float(obj)
    raise TypeError

json.dumps({'x': decimal.Decimal('5.5')}, default=decimal_default)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; def decimal_default(obj):
...     if isinstance(obj, decimal.Decimal):
...         return float(obj)
...     raise TypeError
... 
&gt;&gt;&gt; json.dumps({'x': decimal.Decimal('5.5')}, default=decimal_default)
'{"x": 5.5}'
</code></pre>
<p>The code you found only worked on Python 2.6 and overrides a private method that is no longer called in later versions.</p>
</div>
<div class="post-text" itemprop="text">
<p>I can't believe that no one here talked about using simplejson, which supports deserialization of Decimal out of the box.</p>
<pre><code>import simplejson
from decimal import Decimal

simplejson.dumps({"salary": Decimal("5000000.00")})
'{"salary": 5000000.00}'

simplejson.dumps({"salary": Decimal("1.1")+Decimal("2.2")-Decimal("3.3")})
'{"salary": 0.0}'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Django. There is a great class for Decimal and date fields:</p>
<p><a href="https://docs.djangoproject.com/en/1.10/topics/serialization/#djangojsonencoder" rel="noreferrer">https://docs.djangoproject.com/en/1.10/topics/serialization/#djangojsonencoder</a></p>
<p>To use it:</p>
<pre><code>import json
from django.core.serializers.json import DjangoJSONEncoder

json.dumps(value, cls=DjangoJSONEncoder)
</code></pre>
</div>
<span class="comment-copy">Both the second answer on the linked page and <a href="http://docs.python.org/2/library/json.html#json.JSONEncoder" rel="nofollow noreferrer">the actual Python docs</a> give the correct answer, which is to override <code>default</code>. It should be obvious that you shouldn't be overriding <code>_iterencode</code>, as the leading underscore implies that that is an internal-only method.</span>
<span class="comment-copy">json doesn't know how to handle <code>Decimal</code> so one should extend JSON encoder for Python data structureshttp://docs.python.org/2/library/json.html#py-to-json-table</span>
<span class="comment-copy">shouldn't your <code>decimal_default' function return </code>float(str(obj))` or something like this?</span>
<span class="comment-copy">@oleg: The OP code sample used str. You can return anything you like as long as it is JSON serializable.</span>
<span class="comment-copy">Why not make a subclass? Isn't it far less DRY to pass an argument on every call in every file (and/or error prone to just try and use it wherever you expect a Decimal might be in the input dict)?</span>
<span class="comment-copy">@KyleBaker: you can still subclass <code>json.JSONEncoder</code> and implement a <a href="https://docs.python.org/3/library/json.html#json.JSONEncoder.default" rel="nofollow noreferrer"><code>default()</code> method</a> on that subclass.</span>
<span class="comment-copy">casting to <code>float</code> will lose accuracy; the duplicate contains approaches that lose none.</span>
<span class="comment-copy">Thanks for the intro to <code>simplejson</code></span>
<span class="comment-copy">It seems simplejson has it's days numbered though, at least as a default part of Django <a href="https://docs.djangoproject.com/en/1.8/internals/deprecation/#deprecation-removed-in-1-7" rel="nofollow noreferrer">docs.djangoproject.com/en/1.8/internals/deprecation/â€¦</a></span>
<span class="comment-copy">Are there any downsides using simplejson like this? Otherwise why so many answers go it the hard way?</span>
