<div class="post-text" itemprop="text">
<p>I'm trying to write a function that finds the first instance of a particular file in the current directory and its subfolders, and returns the relative path as a string.</p>
<pre><code>def findFirstMatch(targetFile):
    try:
        fileMatched = []
        for root, dirnames, filenames in os.walk('.'):
            for filename in fnmatch.filter(filenames, targetFile):
                fileMatched.append(os.path.join(root, filename))
            if len(fileMatched) != 0:
                fileMatched = str(fileMatched)
                return fileMatched
        if len(fileMatched) == 0:
            raise NotFoundError, 'File could not be found.'
    except NotFoundError, error:
        print error
</code></pre>
<p>When I call the function like so:</p>
<pre><code>csvPath = findFirstMatch('bounding_box_limits.csv')
</code></pre>
<p>I get this error message when running in the Python console:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "MassSpringDamperCAD.py", line 121, in &lt;module&gt;
    main()
  File "MassSpringDamperCAD.py", line 90, in main
    with open(csvPath, 'r') as csvFile:
IOError: [Errno 2] No such file or directory: "['.\\\\common\\\\bounding_box_limits.csv']"
</code></pre>
<p>It found the file, but how did all those extra backslashes end up in the file path?</p>
<p>Note: I am using Windows 7, and Python 2.7.3.</p>
</div>
<div class="post-text" itemprop="text">
<p>These <em>backslashes</em> are side effect of the fact that they're <em>backslashes</em>. Gobbledygook :-)</p>
<p>In strings, the backslash to mean backslash is often preceded by backslash in CLI, otherwise in precedes special character synonym, like <code>\n</code> for newline, <code>\t</code> for tab. From my experience the number of these backslashes does not cause problems. You can always try to normalize the path in string by <a href="http://docs.python.org/3/library/os.path.html#os.path.normcase" rel="nofollow"><code>os.path.normpath()</code></a>.</p>
<p>This problem is certainly <strong>Windows</strong> specific.</p>
</div>
<span class="comment-copy">Where's that string coming from?</span>
<span class="comment-copy">Is that really the code, because you keep setting lastFilename to filename in your loop, then overwrite fileMatched with that. I doin't see how os.path.join is involved in that</span>
<span class="comment-copy">@TomTanner That was a mistake, where I was testing alternative outputs to determine the origin of the quadruple backslashes. I have corrected the code to what it actually was.</span>
<span class="comment-copy">@AlexChamberlain I edited the post to contain the full error message and traceback info. The string is returned by <code>fnmatch.filter()</code> when it finds an element of <code>filenames</code> fitting the criteria of the string argument <code>targetFile</code>. I'm sure there's a better way to do this without <code>fnmatch</code>, and I just haven't found it yet.</span>
<span class="comment-copy">Okay, so <code>os.path.normpath()</code> worked! The resulting file path still had brackets and excess single quotes attached, which was interfering with interpretation; this became obvious when I tried returning <code>os.path.abspath(os.path.normpath(filePath))</code>. I applied <code>str.strip('[]\'')</code> to remove them.</span>
<span class="comment-copy">The presence of "[]" in your string returned from function is caused by the fact, that you call <code>str()</code> on the array. Call it on <code>fileMatched[0]</code>, to make sure that you return one filename, otherwise you may face problem that your string looks like ".\common\bounding_box_limits.csv,.\common\bounding_box_limits.2.csv" after you apply <code>str.strip('[]\'')</code>.</span>
<span class="comment-copy">Thanks again! I didn't think I could use that index because I thought it might generate a bunch of empty cells before finding the first file match (I'm still figuring out Python iterator behavior). To compromise, I put <code>if len(fileMatched) != 0</code> and the return within that conditional statement; however, it appears I should have indented it to be inside the <code>for</code> loop if I wanted the function to return after the first result.</span>
