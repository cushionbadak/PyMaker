<div class="post-text" itemprop="text">
<p>The library I'm using has a function that returns an object of type A.</p>
<pre><code>a = the_lib.lib_function()  # returns an object of type A
</code></pre>
<p>I have a class, B, that inherits from A. </p>
<pre><code>class B(A):
    def my_method(self):
        print "This is Travis's class"
</code></pre>
<p>I want the constructor of B to call the library function and wrap the A object that is returned. I saw the answer to a different question that did this:</p>
<pre><code>class B(A):
    def __init__(self):
        a = the_lib.lib_function()
        self.__dict__ = a.__dict__

    def my_method(self):
        print "This is Travis's class"
</code></pre>
<p>Is there a better way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Would just forwarding all attribute accesses that <code>B</code> doesn't provide to <code>A</code> work for your purposes? I.e. like this:</p>
<pre><code>class B(object):

    def __init__(self):
        self.__a = the_lib.lib_function()

    def __getattr__(self, name):
        return getattr(self.__a, name)

    # maybe define __setattr__ too, and other __magic__ methods

    def my_method(self):
        # ...
</code></pre>
<p>That said, this has a few caveats. For one, <code>B</code> can't inherit from <code>A</code>, which would foil instanceof checks. Also, most <code>__magic__</code> methods will require wrapping manually as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of adding functionality by attempting to inherit from <code>A</code>, just <a href="https://stackoverflow.com/a/2982/505154">monkey-patch</a> the instance of <code>A</code> returned by <code>the_lib.lib_function()</code>.  For example:</p>
<pre><code>import types

def my_method(self):
    print "This is Travis's class"

def B():
    a = the_lib.lib_function()
    a.my_method = types.MethodType(my_method, a)
    return a
</code></pre>
<p>This will give you a function that you can use like a class to return instances of <code>A</code> as returned by <code>the_lib.lib_function()</code>, but those instances will also include <code>my_method</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here are some alternatives to what you're trying to do.</p>
<hr/>
<p>If you just need <code>my_method</code> to access attributes of the <code>A</code> instance, you don't need to do anything. Python has no "private attributes"; there is no difference between accessing an attribute via the <code>self</code> argument vs. accessing it via any other argument. So:</p>
<pre><code>def my_method(a):
    a.state.count += 1
    print "This is Travis's class"
a = the_lib.lib_function()
my_method(a)
</code></pre>
<hr/>
<p>If you really want to attach the method to <code>a</code> as a bound method, you can do that without having to monkey about with classes:</p>
<pre><code>a = the_lib.lib_function()
a.my_method = types.MethodType(my_method, a, type(a))
</code></pre>
<hr/>
<p>If you really do need to wrap the A instance, it's often better to do it by delegation than by inheritance. Whether you do this by statically delegating the methods you need, dynamically building the delegation methods right after the class definition, dynamically building them at construction time, or just using <code>__getattr__</code> to do it on the fly depends on your actual needs.</p>
<hr/>
<p>If you want B to act as a subclass of A even though it isn't one, you can use <a href="http://docs.python.org/3/library/abc.html" rel="nofollow">ABCs</a> to fool <code>isinstance</code>, etc.</p>
<hr/>
<p>Or you can even turn the B instance into an A instance (e.g., by changing its <code>__class__</code>)—but keep in mind that this will make it use A's implementations of most dunder methods (including <code>__getattr__</code>).</p>
<hr/>
<p>If you really want B to be a subclass, you can write an <code>__init__</code> constructor (or a classmethod alternate constructor) that copies over the attributes. Again, you can do this with a static set of attributes, or dynamically (just remember that <code>__dict__</code> doesn't handle <code>__slots__</code>, dynamic <code>__getattr__</code> attributes, <code>@property</code> and similar fake attributes, some attributes inherited from builtin/extension classes, etc.).</p>
<hr/>
<p>So, which one is right?</p>
<p>Without knowing what you're actually trying to accomplish, it's impossible to answer that. All of these are right in some cases, although some of them are right far more rarely than others.</p>
</div>
<span class="comment-copy">Does the assignment of <code>__dict__</code> work? If it does, what would make a different way of doing this "better"? (That said, your approach won't work for classes that use <code>__slots__</code>.)</span>
<span class="comment-copy">Good point on <code>__slots__</code>, but that would seem to me to be more of an edge case in general.</span>
<span class="comment-copy">Also: why use inheritance <i>at all</i>? Seems like <code>my_method</code> could just be a function that takes a parameter of type <code>A</code>. Generally speaking, why do you <b>need</b> to do this sort of magic?</span>
<span class="comment-copy">It's not just <code>__slots__</code>; it's anything other than normal <code>__dict__</code> attributes—e.g., dynamic <code>__getattr__</code> attributes. If that's not a problem, that's fine, but you have to make sure it's not a problem.</span>
<span class="comment-copy">@millimoose When I tried it out, the assignment of <b>dict</b> didn't seem to work. In this case, my_method could be a function but in the actual class I'm using, it's a method that modifies the state of the object.</span>
<span class="comment-copy">While I think the proxy approach may be acceptable in some cases, I personally like the <code>self.__dict__ = other.__dict__</code> approach better in general.</span>
<span class="comment-copy">If necessary, you can fake <code>isinstance</code> too—e.g., by using ABCs. The fact that you have to explicitly implement dunder methods instead of relying on <code>__getattr__</code> is a bit of a downside—but you can work around that by just copying all of A's methods to B right after defining B.</span>
<span class="comment-copy">@sberry Honestly, having thought about this more after the answer, my preferred approach would be "not doing this sort of thing at all". It's also hard to provide a "better" way of doing X when the question doesn't say better how.</span>
<span class="comment-copy">An alternate using <code>new</code>, <code>a.my_method = new.instancemethod(my_method, a, a.__class__)</code></span>
<span class="comment-copy">...however <code>new</code> is deprecated.</span>
<span class="comment-copy">… and it does exactly the same thing as <code>types.MethodType</code>, just less readably, so it's not a very useful alternative unless you really need to support Python 2.1 or something…</span>
