<div class="post-text" itemprop="text">
<p>I have two python scripts. The first script calls a table of second scripts in which I need to execute a third party python script. It looks something like this: </p>
<pre><code># the call from the first script. 
cmd = "qsub -sync y -b -cwd -V -q long  -t 1-10 -tc 5 -N 'script_two' ./script2.py"

script2thread = pexpect.spawn(cmd)

# end of script 1 
</code></pre>
<p>So here i am sending 10 jobs out to the queue. In script 2 I have a case statement based on the task_id. In each one I make a similar call to the third party script using different parameters.  </p>
<pre><code>...
elif(task_id == 4)
subprocess.call(./script3)

# or 

os.system(./script3 , shell=True)
</code></pre>
<p>This is where my question lies. Is there a difference/benefit to using one or the other? I know that on windows using one over the other makes a big difference because of support issues but I am on linux and have no intention of running this on windows.  Sometimes I get very weird results from using the subprocess, it cannot find other things on the network that it can when the third script is run independently one at a time. </p>
</div>
<div class="post-text" itemprop="text">
<p>You should use <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a>. Not that it makes any difference, it's just a newer module intended to replace <code>os.system</code> (have a look at <a href="https://docs.python.org/3/library/subprocess.html#replacing-os-system" rel="nofollow noreferrer">this section</a> for a drop-in replacement). It also has more features in case you need them one day.</p>
<p>In short: there is no reason to use <code>os.system</code> (except for compatibility with older versions of Python).</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/89228/calling-an-external-command-in-python">Calling an external command in Python</a></span>
<span class="comment-copy">In case you don't need the new features: Is there a reason to use subprocess? (An advantage of <code>os.system</code> is the easier syntax)</span>
<span class="comment-copy">@MartinThoma No, I don’t think there is one. Well, the documentation mentions that the return value of <code>os.system</code> is OS-specific, so error handling might become less reliable. As a side note, I don’t see how <code>os.system("mycmd" + " myarg")</code> is easier than <code>subprocess.call("mycmd" + " myarg", shell=True)</code>.</span>
<span class="comment-copy">Isn't it necessary for subprocess to split all arguments to a list while you can give a single string to <code>os.system</code> no matter how long your command is?</span>
<span class="comment-copy">@MartinThoma Ah, yes, you are right! But not if you also pass <code>shell=True</code>.</span>
<span class="comment-copy">so what @MartinThoma hinted to - avoiding to pass a list -   translates into: <code>subprocess.Popen("mycmd" + " myarg", shell=True)</code></span>
