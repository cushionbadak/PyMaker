<div class="post-text" itemprop="text">
<p>Difference between create instance of an objects by () and without parentheses?</p>
<p>Assume this is my simple class:</p>
<pre><code>class ilist(list):
    t1 = "Test1"
    t2 = "Test2"
</code></pre>
<p>And making the instances to this two variables:</p>
<pre><code>list1 = ilist()
list2 = ilist
</code></pre>
<p>When print the two instances</p>
<pre><code>&gt;&gt;&gt; list1
[]
&gt;&gt;&gt; list2
&lt;class '__main__.ilist'&gt;
</code></pre>
<p>I can successfully access their attributes</p>
<pre><code>&gt;&gt;&gt; list1.test1
'Test1'
&gt;&gt;&gt; list2.test1
'Test1'
</code></pre>
<p>And it shows error in list2 using a method append</p>
<pre><code>&gt;&gt;&gt; list1.append("Item1")
&gt;&gt;&gt; list2.append("Item1")
Traceback (most recent call last):
File "&lt;pyshell#64&gt;", line 1, in &lt;module&gt;
list2.append("Item1")
TypeError: descriptor 'append' requires a 'list' object but received a 'str'
</code></pre>
<p>What is the difference not only in this simple example?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>list1 = ilist()</code> creates an object of the class. <code>list2 = ilist</code> makes a reference to the class itself. Classes are first-class objects in Python, which means they can be assigned just like any other object.</p>
<p>Because the attributes are part of the class, they're also part of the objects that are created with that class.</p>
</div>
<div class="post-text" itemprop="text">
<p>You aren't creating an instance of an object in your second example. You're just assigning the class <code>ilist</code> to a variable named <code>list2</code>, which is why <code>repr(list)</code> prints out its class name.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you are not calling the class (omitting the <code>()</code>), you are not making instances. You are creating another reference to the <em>class</em>. <code>()</code> calls a class to produce an instance.</p>
<p>Your <code>list2</code> variable is merely a reference to your <code>ilist</code> class object. That class object has both <code>t1</code> and <code>t1</code> attributes, so you can reference those. But only <code>list1</code> is an actual instance, produced by calling the class.</p>
<p>When looking up attributes on an instance, the class is consulted <em>as well</em>. So <code>list1</code> does not have the <code>t1</code> and <code>t2</code> attributes, but its class <em>does</em>.</p>
<p>You may want to consult the <a href="http://docs.python.org/3/tutorial/classes.html" rel="nofollow">Python tutorial on classes</a> again to see what the difference is between classes and instances.</p>
</div>
<div class="post-text" itemprop="text">
<p>To explain the actual error message: The same method is called in the second example, but methods should receive <code>self</code> as their first argument. If you are calling using an instance, it will be passed as the first argument; but here you are using the class, so it should be passed explicitly. </p>
<p>You are passing <code>"Item1"</code> as the first argument, but that's a string, not an <code>ilist</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>(almost) Everything is an object in python, so <code>list1 = ilist()</code> is an object of type <code>ilist</code> and <code>ilist</code> and <code>list2 = ilist</code> are objects of type <code>type</code> </p>
</div>
<span class="comment-copy">Only one of them creates an instance,</span>
