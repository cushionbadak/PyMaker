<div class="post-text" itemprop="text">
<p>Here is my set up - </p>
<pre><code>project/
    __init__.py
    prog.py
    test/
        __init__.py
        test_prog.py
</code></pre>
<p>I would like to be able to run my unit tests by calling a command line option in prog.py, this way when I deploy my project I can deploy the ability to run the unit tests at any time.</p>
<pre><code>python prog.py --unittest
</code></pre>
<p>What do I need in prog.py, or the rest of my project for this to work?</p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps <a href="http://docs.python.org/2/library/unittest.html#load-tests-protocol">this</a> is what you're looking for. Implement a <code>load_tests</code> function in <code>test_prog.py</code> and use the following code in <code>prog.py</code> to load and run the tests: </p>
<pre><code>import unittest
import test.test_prog
suite = unittest.TestLoader().loadTestsFromModule(test.test_prog)
unittest.TextTestRunner().run(suite)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The Python <code>unittest</code> module contains its own <a href="https://docs.python.org/3/library/unittest.html#test-discovery" rel="noreferrer">test discovery</a> function, which you can run from the command line:</p>
<pre><code>$ python -m unittest discover
</code></pre>
<p>To run this command from within your module, you can use the <code>subprocess</code> module:</p>
<pre><code>#!/usr/bin/env python

import sys
import subprocess

# ...
# the rest of your module's code
# ...

if __name__ == '__main__':
    if '--unittest' in sys.argv:
        subprocess.call([sys.executable, '-m', 'unittest', 'discover'])
</code></pre>
<p>If your module has other command-line options you probably want to look into <a href="http://docs.python.org/dev/library/argparse.html" rel="noreferrer"><code>argparse</code></a> for more advanced options.</p>
</div>
<div class="post-text" itemprop="text">
<p>You must make sure that you consistently follow some naming conventions (which you seem to be doing):</p>
<ol>
<li><p>All tests are named with the same prefix (<code>test_</code> is the norm), followed by the name of the module you wish to test.</p>
<p><code>prog.py</code> =&gt; <code>test_prog.py</code></p></li>
<li><p>Tests reside in <code>test/</code> directory.</p></li>
</ol>
<p>Then you can do something like this:</p>
<h2>prog.py</h2>
<pre><code>import sys
...
... do module stuff here...
...

if __name__ == "__main__":

    # Check if we want to run the tests for this file
    if "--unittest" in sys.argv:
        import unittest

        test_filename = 'test_' + __file__
        test_directory = 'test'

        suite = unittest.TestLoader().discover(test_directory, pattern=test_filename)
        unittest.TextTestRunner(verbosity=2).run(suite)
</code></pre>
<hr/>
<p>What we are doing, is:</p>
<ul>
<li><p>Checking the command arguments to see if <code>--unittest</code> is present (since that's the only time you want to run the tests).</p></li>
<li><p>If it is, then we create the <code>test_prog.py</code> - following the naming conventions we have set.</p></li>
<li><p>Then we pass that to the <code>TestLoader().discover</code> function. </p>
<p><a href="http://docs.python.org/2/library/unittest.html#unittest.TestLoader.discover" rel="noreferrer">discover(...)</a> starts at the specified directory and finds all test modules (recursing into subdirectories ) that match the pattern provided.</p>
<p>In our case, it will look inside the <code>test/</code> directory for any module named <code>test_prog.py</code>. When it does, it loads it and creates a TestSuite with the TestCases that we want to run.</p></li>
<li><p>Lastly, we manually test <code>unittest</code> to run the <code>suite</code> obtained in the previous step.</p></li>
</ul>
<hr/>
<p>Normally, <code>unittest</code> will do all of this for us in the background, but since we are trying to run a specific test module, we have to tell exactly how and where to get it from.</p>
<p>Also, note that you will have to do this for <strong>every</strong> file where you want to do this at.</p>
</div>
<span class="comment-copy">@jwg why? Was a requirement for a project, I had no control over it.</span>
