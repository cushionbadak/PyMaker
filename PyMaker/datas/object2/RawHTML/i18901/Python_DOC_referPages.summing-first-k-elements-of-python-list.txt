<div class="post-text" itemprop="text">
<p>How can I sum the first <em>k</em> items in a given list?</p>
<p>For example:</p>
<pre><code>myList = [1,2,5]
</code></pre>
<p>How can I use <em>k</em> to return 1 for <em>k</em> = 1, 3 for <em>k</em> = 2 and 8 for <em>k</em> = 3?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have two options, both using <code>sum()</code>:</p>
<ul>
<li><p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice()</code></a> to efficiently extract those elements:</p>
<pre><code>from itertools import islice
sum(islice(somelist, k))
</code></pre></li>
<li><p>Slice the list to get a copy with just those first elements:</p>
<pre><code>sum(somelist[:k])
</code></pre></li>
</ul>
<p><code>islice()</code> is more memory efficient and can compete with slicing:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; somelist = list(range(10000))
&gt;&gt;&gt; k = 1
&gt;&gt;&gt; timeit.timeit('sum(somelist[:k])', 'from __main__ import somelist, k')
0.23189388398895971
&gt;&gt;&gt; timeit.timeit('sum(islice(somelist, k))', 'from __main__ import somelist, k; from itertools import islice')
0.2557754369918257
&gt;&gt;&gt; k = len(somelist) // 2
&gt;&gt;&gt; timeit.timeit('sum(somelist[:k])', 'from __main__ import somelist, k')
51.454719836998265
&gt;&gt;&gt; timeit.timeit('sum(islice(somelist, k))', 'from __main__ import somelist, k; from itertools import islice')
53.374267254024744
</code></pre>
<p>Even for a large <code>k</code>, the <code>islice()</code> version is within the same ballpark as slicing, but we didn't have to create another list object with <code>k</code> references first.</p>
</div>
<span class="comment-copy">Why I downvoted this question: <a href="http://meta.stackexchange.com/a/149138/133242">meta.stackexchange.com/a/149138/133242</a></span>
<span class="comment-copy">What have you tried so far? We're happy to help when you encounter a specific problem.</span>
<span class="comment-copy">OK, I see and accept it. I first looked for the answer in the tutorial in my language and (my fault) I didn't find immediately an answer. So, I thought that it would have been interesting to ask for a <i>oneliner</i> to accomplish the task, ignoring that the simplest way to do that is already a oneliner. In conclusion, I can understand that sometimes being newbie is considered laziness or, even worse, stupidity but @Matt be patient: sometimes already existing answers are not sufficiently general, or simply asked to be understood by a newbie and this causes them to post duplicates (for experts). Bye</span>
<span class="comment-copy">Thank you very much @Martijn. A little curiosity: how big must be a list to be <i>big</i> enough and justify the use of itertools (order of magnitude, I mean)?</span>
<span class="comment-copy">@Orso: When I tested this, it turned out <code>islice()</code> is always going to beat a direct slice.</span>
<span class="comment-copy">Great, thank you!</span>
<span class="comment-copy">@MartijnPieters "This beats out <code>sum(somelist[:k])</code> for any size" - This statement seems incorrect? I am unable to reproduce these timings on IPython3. Furthermore, <code>islice</code> is much slower for larger values of <code>k</code>. Did you mean something else?</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ: uhm, no, indeed, the data posted here indeed doesn't seem to support that assertion. I'll revisit.</span>
