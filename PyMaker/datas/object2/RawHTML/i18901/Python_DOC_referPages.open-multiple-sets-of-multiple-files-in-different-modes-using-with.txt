<div class="post-text" itemprop="text">
<p>This question is related to this question: <a href="https://stackoverflow.com/questions/4617034/python-open-multiple-files-using-with-open">How can I open multiple files using "with open" in Python?</a></p>
<p>I could have three sets of files: files1, files2 and file3</p>
<p>I can open files1 and files2 for reading and file3 for writing by doing this:</p>
<pre><code>with fileinput.input(files=files1) as f1, fileinput.input(files=files2) as f2, open(file3,'w') as f3:
</code></pre>
<p>In Python 3 (not Python 2), how could I achieve this, if I had hundreds of sets of files?</p>
<p>I had a look at the contextlib module, but I'm not sure, how I would do this in the most Pythonic way.</p>
<p><a href="http://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="nofollow noreferrer">http://docs.python.org/3/library/contextlib.html#contextlib.ExitStack</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I think the <code>contextlib.ExitStack</code> class you linked to is exactly what you want:</p>
<pre><code>with contextlib.ExitStack() as stack:
    inputs = [stack.enter_context(fileinput.input(files=filename))
              for filename in input_filenames]
    outputs = [stack.enter_context(open(filename, "w"))
               for filename in output_filenames]

    # do stuff with inputs and outputs here
</code></pre>
<p>This structure will guarantee that all open files will be closed if there is an exception raised at any point, including during the opening of the later files.</p>
</div>
<span class="comment-copy">Thanks @Blckknght. I wasn't 100% sure this was the right approach. The contextlib module is great. Now I can avoid nested with statements in a beautiful way.</span>
