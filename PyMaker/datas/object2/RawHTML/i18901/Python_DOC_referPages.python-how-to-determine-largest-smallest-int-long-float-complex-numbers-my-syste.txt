<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/7604966/maximum-and-minimum-values-for-ints">Maximum and Minimum values for ints</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p><strong>Specs:</strong> Python 3.3.1</p>
<p><strong>What I was trying to do:</strong> "Using Python, determine the largest and smallest ints, longs, floats, and complex numbers that your system can handle."</p>
<p><strong>What I did:</strong> I went through Python's math modules and all built-in functions relating to math and numbers, but couldn't find a way to do this. I also tried something like <code>max(range(0,))</code> but it returned <code>ValueError: max() arg is an empty sequence</code> error. </p>
<p><strong>Question:</strong> How to determine largest/smallest int/long/float/complex numbers my system can handle using Python? As a total beginner, I know I must have missed something, but I tried and wasn't able to figure it out. I appreciate your help! </p>
</div>
<div class="post-text" itemprop="text">
<p>The python numeric limitations, such as there are any, are available on the <a href="http://docs.python.org/3/library/sys.html" rel="noreferrer"><code>sys</code> module</a>:</p>
<ul>
<li><p><a href="http://docs.python.org/3/library/sys.html" rel="noreferrer"><code>sys.float_info</code></a> is a named tuple with floating point limitations for your platform. Floating point numbers consist of a exponent and a precision; you'd have to be more precise about what you mean by the largest number here; the  number with the largest exponent  and the full precision in use is <code>sys.float_info.max</code>.</p></li>
<li><p><a href="http://docs.python.org/3/library/sys.html#sys.int_info" rel="noreferrer"><code>sys.int_info</code></a>; not so much limitations as the implementation detail; you should be able to estimate the largest integer possible from this. Python integers are only limited by your available memory.</p></li>
<li><p><a href="http://docs.python.org/3/library/sys.html#sys.maxsize" rel="noreferrer"><code>sys.maxsize</code></a>; the platform word size and limit to lists and tuples and the likes.</p></li>
</ul>
<p>So for integers, there basically is a <em>soft</em> limit to the maximum and minimum values. It depends on how much memory your process can use, and how much memory your process is already using for other things. </p>
<p>In Python 3, there no longer is a separate <code>long</code> type, but in Python 2, <code>sys.maxsize + 1</code> would have to be a <code>long</code>, as would <code>-sys.maxsize - 2</code>. Between those two extremes lies the range of possible 'short' integers.</p>
<p>For complex numbers, ordering is a little more.... complex anyway. Complex numbers have a real and imaginary component, both are floats. Guess what? These are python floats and you already have their limit info above:</p>
<pre><code>&gt;&gt;&gt; type(1j)
&lt;type 'complex'&gt;
&gt;&gt;&gt; type(1j.real)
&lt;type 'float'&gt;
&gt;&gt;&gt; type(1j.imag)
&lt;type 'float'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.float_info</code> provides the desired information for floating-point values.</p>
<pre><code>&gt;&gt;&gt; sys.float_info.max
1.7976931348623157e+308
</code></pre>
<p>Python 3 does not have upper or lower limits on integers, and there exists no mathematical definition for ordering arbitrary complex numbers (although the real or imaginary parts of two complex numbers can be ordered separately).</p>
</div>
<span class="comment-copy">There is no largest or smallest integer in Python 3, since arbitrary precision is used. Complex numbers are not fully ordered, so there is no largest or smallest number. (As an example, 1 is neither less than, equal to, nor greater than <i>i</i>.)</span>
<span class="comment-copy">Thanks for point the other thread out! Well since it didn't answer the "long, floats, complex numbers" part of my question (or did it? did I missed something?), I might as well leave this thread here so if anyone asking about long/float/complex might need it?</span>
<span class="comment-copy">@chepner thanks for taking the time! Forgive me for this but I don't fully understand about <code>arbitrary precision</code> you mentioned. Does that mean it depends on the box's memory size? And if so, is there a way to see the result in the interpreter? Thanks!</span>
<span class="comment-copy">Correct. There is no maximum size from Python's point of view. There would simply be a OutOfMemory error at some point.</span>
<span class="comment-copy">@chepner Gotcha. Thank you!</span>
<span class="comment-copy">Very well said. Thank you very much!</span>
<span class="comment-copy">I use Python 2.7.3, and there is no <code>sys.int_info</code>, but <code>sys.long_info</code></span>
<span class="comment-copy">Correct; the question was tagged with <code>python-3.x</code> so I focused on that version. Python 3 removed the distinction between <code>long</code> and <code>int</code> altogether. Since the info documents how Python 2 <code>long</code> is handled the 2.x <code>sys</code> attribute name naturally reflects that.</span>
<span class="comment-copy">Thanks for the answer! Though on my system with Python 3.3.1 it is <code>sys.float_info</code>. But the fact that you pointed this whole path out is very helpful. Thank you!</span>
<span class="comment-copy">Fixed. I got confused, since <code>sys.float_info</code> is an instance of the <code>sys.floatinfo</code> class.</span>
<span class="comment-copy">I don't quite understand what you mean yet. But if it's because I missed something, I sincerely apologize, total beginner to Python!</span>
<span class="comment-copy">Try <code>type(sys.float_info)</code>. The name of the class and the name of the instance of that class are very similar.</span>
