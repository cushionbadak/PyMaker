<div class="post-text" itemprop="text">
<p>I would like to count the occurences of missings of every line in a txt file.</p>
<p><code>foo.txt</code> file:</p>
<pre><code>1 1 1 1 1 NA    # so, Missings: 1
1 1 1 NA 1 1    # so, Missings: 1
1 1 NA 1 1 NA   # so, Missings: 2  
</code></pre>
<p>But I would also like to obtain the amount of elements for the first line (assuming this is equal for all lines).</p>
<pre><code>miss = []
with open("foo.txt") as f:
    for line in f:
        miss.append(line.count("NA"))

&gt;&gt;&gt; miss
[1, 1, 2]         # correct
</code></pre>
<p>The problem is when I try to identify the amount of elements. I did this with the following code:</p>
<pre><code>miss = []
with open("foo.txt") as f:
    first_line = f.readline()
    elements = first_line.count(" ")  # given that values are separated by space
    for line in f:
        miss.append(line.count("NA"))

&gt;&gt;&gt; (elements + 1)
6   # True, this is correct          
&gt;&gt;&gt; miss 
[1,2]  # misses the first item due to readline() removing lines.`
</code></pre>
<p>How can I read the first line once without removing it for the further operation?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try <code>f.seek(0)</code>. This will reset the file handle to the beginning of the file.</p>
<p>Complete example would then be:</p>
<pre><code>miss = []
with open("foo.txt") as f:
    first_line = f.readline()
    elements = first_line.count(" ")  # given that values are separated by space
    f.seek(0)
    for line in f:
        miss.append(line.count("NA"))
</code></pre>
<p>Even better would be to read all lines, even the first line, only once, and checking for number of elements only once:</p>
<pre><code>miss = []
elements = None
with open("foo.txt") as f:
    for line in f:
        if elements is None:
            elements = line.count(" ")  # given that values are separated by space
        miss.append(line.count("NA"))
</code></pre>
<p>BTW: wouldn't the number of elements be <code>line.count(" ") + 1</code>?</p>
<p>I'd recommend using <code>len(line.split())</code>, as this also handles tabs, double spaces, leading/trailing spaces etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>Provided all lines have the number of items you can just count items in the last line:</p>
<pre><code>miss = []
with open("foo.txt") as f:
    for line in f:
        miss.append(line.count("NA")
    elements = len(line.split())
</code></pre>
<p>A better way to count is probably:</p>
<pre><code>elements = len(line.split())  
</code></pre>
<p>because this also counts items separated with multiple spaces or tabs.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also just treat the first line separately</p>
<pre><code>with open("foo.txt") as f:
    first_line = next(f1)
    elements = first_line.count(" ")  # given that values are separated by space
    miss = [first_line.count("NA")]
    for line in f:
        miss.append(line.count("NA")
</code></pre>
</div>
<span class="comment-copy">Premature optimization is the root of all evil. Just calculate the length for <i>each</i> line inside the loop: <code>for line in f: ... elements = len(line.split())</code>.</span>
<span class="comment-copy">This works, thank you very much.</span>
<span class="comment-copy">Note that <code>.count(" ")</code> will be off by 1, so <code>len(split)</code> is the only correct one.</span>
<span class="comment-copy">Thanks. Yes. That is the way I would do it. In addition, often there are  more than one space or tabs in between items. Deleted the OP version.</span>
<span class="comment-copy">What exactly is next then?</span>
<span class="comment-copy">@Dualinity: <a href="http://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#next</a></span>
