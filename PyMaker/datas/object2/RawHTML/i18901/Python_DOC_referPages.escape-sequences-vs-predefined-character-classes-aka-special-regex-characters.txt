<div class="post-text" itemprop="text">
<p>Perl, like Java and Python, has <code>\s</code>, the special regex character that matches whitespace, in addition to other special characters.  </p>
<p>In Perl, the following would not be valid:</p>
<pre class="lang-perl prettyprint-override"><code>my $sentence = "The End";
my $subStr = "\s"; #Does NOT work, needs to be "\\s" or '\s'

if ($sentence =~ /$subStr/)
{
    say "True";
}
</code></pre>
<p>In Java, this would be valid:</p>
<pre class="lang-java prettyprint-override"><code>String s = "The End";

if (s.matches(".*\\s.*")) //same deal as with Perl ("\\s")
{
    System.out.println("True");
}
</code></pre>
<p>In Python, one could use either <code>"\s"</code> or <code>'\s'</code>.</p>
<p>Both Java and Perl seem to treat special regex characters encapsulated by <code>""</code> the same. I looked up <a href="http://docs.oracle.com/javase/tutorial/essential/regex/pre_char_classes.html" rel="nofollow">Predefined Character Classes</a>(Java), and it simply said: <em>"If you are using an escaped construct within a string literal, you must precede the backslash with another backslash for the string to compile."</em> </p>
<p>Why do both Java and Perl treat escape sequences differently than special regex characters (when they're both encapsulated by <code>""</code>), yet, python doesn't?</p>
<p>As in why did the designers make the choice for escape sequences, like <code>\n</code> or <code>\t</code>, to require one backslash, but for predefined character classes, like <code>\s</code>, to require two (while in <code>""</code>)?  </p>
<p>Is this a consequence of something else? Or does it in some way simplify some sort of interaction(s) or what have you?  </p>
<p>I'm going to assume that it wasn't arbitrary.  Python only requires <code>\</code> either way, yet Perl and Java mandate <code>\\</code> when dealing with <code>""</code>.  Besides being a little confusing, it's just messy.  So, I assume that there's a good reason for this decision.  Anyone know why?</p>
</div>
<div class="post-text" itemprop="text">
<p>Java, Perl, and Python all use C-style backslashes for escapes. Regex also uses C-style backslashes for escapes. This leads to problems in all three languages—and, in fact, for many, many other languages.</p>
<p>For example, all three languages will convert <code>'\\'</code> into a single backslash, <code>'\n'</code> into a newline, etc., before they can get to the regex compiler.</p>
<p>The only difference is that in Python, unknown escape sequences like <code>'\s'</code> resolve to themselves, while in Java and Perl they resolve to just <code>'s'</code>. So, in Python, while you need <code>'\\\n'</code>, you don't need <code>'\\s'</code>, while in Java and Perl, you need to escape the backslashes for both.</p>
<p>And there are languages that make the third choice, treating unknown escape sequences as errors.</p>
<hr/>
<p>So, if you have the list of known escapes memorized, you can sometimes get away with not escaping backslashes in Python. But you really shouldn't.</p>
<p>Why not? Because, even if you're absolutely sure you've memorized the escape sequences, do you really want to make that a requirement for anyone who wants to read (or maintain) your code? When I see <code>"abc\\sdef"</code> or <code>r"abc\sdef"</code>, I immediately know exactly what it means. When I see unescaped <code>"abc\sdef"</code>, I <em>think</em> I know, but I may be wrong, and I have to go look it up or try it in the interpreter to find out.</p>
<hr/>
<p>The right thing to do is to escape your backslashes, or use the appropriate raw-string or regex-literal syntax for your language.</p>
<hr/>
<p>If you're wondering why Python made a different design choice for unknown escapes from Perl and Java… As far as I know, that's not covered in the official <a href="http://docs.python.org/3/faq/design.html">Design FAQ</a> and hasn't been directly addressed by Guido. But I can guess. In general, Perl went with maximal compatibility with C (and Java with C++) as a high priority in many areas, where Python put more priority on what made more intuitive sense to a programming teacher. This is probably one of those areas. (I suspect if Python were re-designed from scratch today, or even way back when raw strings were added, it would go with the error.)</p>
</div>
<span class="comment-copy">In Python, you can make the string a raw string: <code>r'\s\r\n'</code>.</span>
<span class="comment-copy">Note that in Java, you can do <code>if (Pattern.compile("\\s").find())</code> -- yeah, <code>.matches()</code> is misnamed</span>
<span class="comment-copy">I don't know the exact reason but I'd say C/Unix is no stranger to that decision... The `\` has always been the escape character for strings in C and for the shell! (even on SO it is, I had to double it to include it in the single quotes)</span>
<span class="comment-copy">Perl has many different quote operators - you would likely not write <code>"\\s"</code> in practice, but rather <code>'\s'</code> or <code>q(\s)</code>, etc.</span>
<span class="comment-copy">@jwd, <code>'\s'</code> is just as unlikely as <code>"\\s"</code>. One would use the quote-regex operator: <code>qr/\s/</code></span>
<span class="comment-copy">"But you really shouldn't."  Why not?</span>
<span class="comment-copy">@SteveP.: Let me edit the answer.</span>
