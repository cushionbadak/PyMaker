<div class="post-text" itemprop="text">
<p>I am asked to implement a recursive function that takes a nonnegative integer n as input and returns turtle instruction encoded with letters L,R and F where L means rotate left 45 degrees, R means rotate right 45 degress and F means go forward.</p>
<p>Additional information i have i: for every nonnegative integer n&gt;0, the Levy curve <code>L(n)</code> can be defined in terms of Levy curve <code>L(n-1)</code>; Levy curve <code>L(0)</code> is just a straight line.</p>
<pre><code>    usage:
    &gt;&gt;&gt; lev(0)
    'F'
    &gt;&gt;&gt; lev(1)
    'LFRRFL'
</code></pre>
<p>I am very new to this and I am not sure how to start:</p>
<p>so far I only got:</p>
<pre><code>    from turtle import Screen, Turtle
    def lev(n):
        # base case
        if n ==0:
           return 'F'
        # recursive case
        else:
            return lev(n-1)
</code></pre>
<p>I need some good pointers here please.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since <a href="https://en.wikipedia.org/wiki/L%C3%A9vy_C_curve" rel="nofollow noreferrer">Levy C</a>'s <a href="http://en.wikipedia.org/wiki/Lindenmayer_system" rel="nofollow noreferrer">L system</a> only has a single rule, it's simple to build the resulting string using a single <a href="http://docs.python.org/3/library/stdtypes.html?highlight=format#str.replace" rel="nofollow noreferrer">replace</a> method.</p>
<pre><code>def lev(n):
    if n == 0:
        return "F"
    else:
        symbols = lev(n-1)
        return symbols.replace("F", "LFRRFL")

for i in range(4):
    print lev(i)
</code></pre>
<p>Result:</p>
<pre><code>F
LFRRFL
LLFRRFLRRLFRRFLL
LLLFRRFLRRLFRRFLLRRLLFRRFLRRLFRRFLLL
</code></pre>
<p>You can visualize this replacement by imagining each straight line in the figure being replaced by two smaller lines connected at a ninety degree angle. Like so:</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/3NeSE.gif"/></p>
</div>
<div class="post-text" itemprop="text">
<p>First, in case this is the problem:  A large Levy curve (recursive case) is constructed by arranging two smaller ones facing each other 'across the room', with two more 'on the floor' facing up, in between.  A small Levy curve (base case) is just a straight line.  So indeed, the base case is:</p>
<pre><code>def lev(n):
    if n == 0:
        return 'F'
    else:
        # Recursive case here
</code></pre>
<p>But for the recursive case, you just have it call lev(n-1).  You are right that you will need to do this, but you will need to do it four times, and rotate in between.  This will create the desired 'two smaller curves facing each other, with two in between'.</p>
<p>Inspecting the curve carefully (here: <a href="https://en.wikipedia.org/wiki/File:Levy_C_construction.png" rel="nofollow">https://en.wikipedia.org/wiki/File:Levy_C_construction.png</a>), we see that we will need to draw one curve, then turn right, then draw another, then turn completely around, then draw a third curve, and finally, turn right and draw the final curve.</p>
<p>This can be done fairly simply:</p>
<pre><code>dev lev(n):
    if n == 0:
        # Base case
        return 'F'
    else:
        # Recursive case
        # Calculate the smaller curve
        smaller = lev(n-1)
        # Add in the turning in between the smaller curves
        final = smaller        # First curve
        if n%2 == 0:           # Even depths require right turns
            final += 'RR'        # Rotate 90 degrees
            final += smaller     # Second curve
            final += 'RRRR'      # Rotate 180 degrees
            final += smaller     # Third curve
            final += 'RR'        # Rotate 90 degrees
            final += smaller     # Final curve
        else:                  # Odd depths require left turns
            final += 'LL'        # Rotate 90 degrees
            final += smaller     # Second curve
                                 # (No full rotation in odd depths)
            final += smaller     # Third curve
            final += 'LL'        # Rotate 90 degrees
            final += smaller     # Final curve
        return final           # Done!
</code></pre>
</div>
<span class="comment-copy">when <code>n</code> is not <code>0</code> you probably want to do something besides just call <code>n-1</code>.  maybe something like <code>return 'L%sRR%sL' % (lev(n-1), lev(n-1))</code></span>
<span class="comment-copy">im sorry, what does this mean? 'L%sRR%sL' - like what is 's' and why do you mod 'L' with 's'</span>
<span class="comment-copy">In addition to modulus, <code>%</code> can also be used to format the contents of a string: see <a href="http://docs.python.org/2/tutorial/inputoutput.html#old-string-formatting" rel="nofollow noreferrer">Old string formatting</a>. But <a href="http://docs.python.org/3/library/stdtypes.html?highlight=format#str.format" rel="nofollow noreferrer">str.format</a> is what all the <i>cool</i> developers use, these days :-)</span>
<span class="comment-copy">Are you committed to using recursion to solve this problem? Because an iterative L system seems easier to implement. Wikipedia has done most of the work for you, by <a href="http://en.wikipedia.org/wiki/L%C3%A9vy_C_curve#L-system_construction" rel="nofollow noreferrer">defining the starting state and replacement rules</a>.</span>
<span class="comment-copy">lev(1) &gt;&gt;&gt; 'LFRRFL'. You got this as data? Or you are assuming it?</span>
<span class="comment-copy">so I am basically replacing F with LFRRFL recursivelly?</span>
<span class="comment-copy">Yep, that is traditionally how the Levy C curve is constructed.</span>
<span class="comment-copy">oh now I see :)  so every straight line transforms according to a fixed pattern?</span>
<span class="comment-copy">+1 for the animation!</span>
<span class="comment-copy">but i will not get any left turns here.  i need to produce results like these:          &gt;&gt;&gt; lev(1)         'LFRRFL'</span>
<span class="comment-copy">@Snarre Oh oops!  I over looked something about the fractal:  some depths require right turns and some require left.  I was only looking at a single depth level.  Lemme fix that...</span>
<span class="comment-copy">@Snarre Done!  Thank you for commenting on the problem instead of simply down-voting my answer and leaving it :)</span>
<span class="comment-copy">no worries, im just trying to learn this...im still confused with what the the actual inputed integer repressents in the curve. Like for example if i put in 5 as n. What does that mean?</span>
<span class="comment-copy">Imagine describing how to run a mile.  You might say "In order to run a mile, you need to run two half-miles"  (Recursive case).  If you just kept saying that forever, you would never actually move.  So somewhere along the line, I need to say "In order to run any less that a foot, just take one step" (Base case).  So a mile is built up out of half-miles, which are made of quarter-miles, etc, all the way down to single steps.  So what the n represents is "How many times do I need to break this down in order to reach the base case?"</span>
