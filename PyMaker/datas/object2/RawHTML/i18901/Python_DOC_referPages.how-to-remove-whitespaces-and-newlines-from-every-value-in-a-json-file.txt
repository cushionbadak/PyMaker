<div class="post-text" itemprop="text">
<p>I have a <code>JSON</code> file that has the following structure:</p>
<pre><code>{
    "name":[
        {
            "someKey": "\n\n   some Value   "
        },
        {
            "someKey": "another value    "
        }
    ],
    "anotherName":[
        {
            "anArray": [
                {
                    "key": "    value\n\n",
                    "anotherKey": "  value"
                },
                {
                    "key": "    value\n",
                    "anotherKey": "value"
                }
            ]
        }
    ]
}
</code></pre>
<p>Now I want to <code>strip</code> off all he whitespaces and newlines for every value in the <code>JSON</code> file. Is there some way to iterate over each element of the dictionary and the nested dictionaries and lists?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Now I want to strip off all he whitespaces and newlines for every value in the JSON file</p>
</blockquote>
<p>Using <code>pkgutil.simplegeneric()</code> to create a helper function <code>get_items()</code>:</p>
<pre><code>import json
import sys
from pkgutil import simplegeneric

@simplegeneric
def get_items(obj):
    while False: # no items, a scalar object
        yield None

@get_items.register(dict)
def _(obj):
    return obj.iteritems() # json object

@get_items.register(list)
def _(obj):
    return enumerate(obj) # json array

def strip_whitespace(json_data):
    for key, value in get_items(json_data):
        if hasattr(value, 'strip'): # json string
            json_data[key] = value.strip()
        else:
            strip_whitespace(value) # recursive call


data = json.load(sys.stdin) # read json data from standard input
strip_whitespace(data)
json.dump(data, sys.stdout, indent=2)
</code></pre>
<p>Note: <a href="http://docs.python.org/3.4/library/functools#functools.singledispatch" rel="noreferrer"><code>functools.singledispatch()</code></a> function (Python 3.4+) would allow to use <code>collections</code>' <a href="http://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes" rel="noreferrer"><code>MutableMapping/MutableSequence</code></a> instead of <code>dict/list</code> here.</p>
<h3><a href="http://ideone.com/Vfc6UW" rel="noreferrer">Output</a></h3>
<pre><code>{
  "anotherName": [
    {
      "anArray": [
        {
          "anotherKey": "value", 
          "key": "value"
        }, 
        {
          "anotherKey": "value", 
          "key": "value"
        }
      ]
    }
  ], 
  "name": [
    {
      "someKey": "some Value"
    }, 
    {
      "someKey": "another value"
    }
  ]
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Parse the file using <a href="http://docs.python.org/2/library/json.html" rel="nofollow">JSON</a>:</p>
<pre><code>import json
file = file.replace('\n', '')    # do your cleanup here
data = json.loads(file)
</code></pre>
<p>then walk through the resulting data structure.</p>
</div>
<div class="post-text" itemprop="text">
<p>This may not be the most efficient process, but it works.  I copied that sample into a file named <code>json.txt</code>, then read it, deserialized it with <code>json.loads()</code>, and used a pair of functions to recursively clean it and everything inside it.</p>
<pre><code>import json

def clean_dict(d):
    for key, value in d.iteritems():
        if isinstance(value, list):
            clean_list(value)
        elif isinstance(value, dict):
            clean_dict(value)
        else:
            newvalue = value.strip()
            d[key] = newvalue

def clean_list(l):
    for index, item in enumerate(l):
        if isinstance(item, dict):
            clean_dict(item)
        elif isinstance(item, list):
            clean_list(item)
        else:
            l[index] = item.strip()

# Read the file and send it to the dict cleaner
with open("json.txt") as f:
    data = json.load(f)

print "before..."
print data, "\n"

clean_dict(data)

print "after..."
print data
</code></pre>
<p>The result...</p>
<pre><code>before...
{u'anotherName': [{u'anArray': [{u'anotherKey': u'  value', u'key': u'    value\n\n'}, {u'anotherKey': u'value', u'key': u'    value\n'}]}], u'name': [{u'someKey': u'\n\n   some Value   '}, {u'someKey': u'another value    '}]} 

after...
{u'anotherName': [{u'anArray': [{u'anotherKey': u'value', u'key': u'value'}, {u'anotherKey': u'value', u'key': u'value'}]}], u'name': [{u'someKey': u'some Value'}, {u'someKey': u'another value'}]}
</code></pre>
</div>
<span class="comment-copy">This won't work: The newlines are actually the characters \ and n, so you need to replace \\n with ''. Also, this won't remove the white space.</span>
<span class="comment-copy">You can customize the "cleanup" line as needed.  My version of Python cleaned up the white space just fine.  You can clean up the values as you walk through 'data'.</span>
<span class="comment-copy">don't use <code>eval()</code> for json text. You could use <code>json.loads()</code> instead</span>
<span class="comment-copy">Thanks for the tip!  Updated code and comments accordingly.</span>
<span class="comment-copy">You probably also want to strip values in a list (<code>else</code> clause is missing in <code>clean_list()</code>). <code>"".join(f.readlines())</code> should be just <code>f.read()</code> or you could pass a file object directly <code>json.load(f)</code>. <code>value.replace("\\n", "")</code> is incorrect: "\n" - newline, "\\n" - two chars; anyway <code>.strip()</code> removes any leading/trailing whitespace including newlines. The copying <code>d.items()</code> and <code>l[:]</code> seems unnecessary.</span>
<span class="comment-copy">Thanks for the additional tips.  I've updated the code again.  FWIW, I originally had an <code>else</code> clause in <code>clean_list()</code> for cleaning individual list items, but as the sample JSON data didn't use it, I took it out before posting my original answer.</span>
<span class="comment-copy">+1: it looks ok now. Note: <code>l[index] == item</code> so you could use <code>item</code> as rvalue instead of <code>l[index]</code>. To close a file automatically, you could use <code>with open(filename) as file: ...</code> it will close the file even if an exception occurs.</span>
