<div class="post-text" itemprop="text">
<p>In a shell executed by <code>python -v</code>, I put in <code>from gi.repository import Peas</code> and it gave me the directory of the module: </p>
<pre><code>/usr/lib/python2.7/dist-packages/gi/repository
</code></pre>
<p>Now I went into this directory expecting to find subdirectoriessuch as <code>Peas</code>, <code>RB</code>, <code>Gtk</code> (which I can import) etc, but what's actually in it are </p>
<pre><code>/usr/lib/python2.7/dist-packages/gi/repository$ ls
__init__.py  __init__.pyc
</code></pre>
<p>That's it. How is Python importing Peas from this module when it has only an <code>__init__.py</code> file? How can I take a look at the code inside the <code>Peas</code> module?</p>
<p>Obviously I'm not understanding all this well. What's the explanation?</p>
<p>EDIT: Okay so this is very related to my earlier problem:
<a href="https://stackoverflow.com/questions/16998369/strange-module-auto-complete-behavior-in-ipython">Strange module auto complete behavior in IPython</a></p>
<p>So gi.repository is generated at import time since it's a dynamic binding. Makes sense.</p>
<p>But if I'm importing Peas from <code>gi.repository</code>, there still should be a way to check out what code is being imported right? Since I want to use PeasActivable interface. </p>
</div>
<div class="post-text" itemprop="text">
<p>Because the <code>repository</code> directory has a <code>__init__.py</code> file, <code>gi.repository</code> is a <a href="http://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow">package</a>. This means that you can import from it and the package “root” will be the <code>__init__</code> file. If you had a file named <code>module.py</code> in the same directory, you could also import from <code>gi.repository.module</code>.</p>
<p>So your names <code>Peas</code>, <code>RB</code> and <code>Gtk</code> should be all defined within the <code>__init__.py</code> file.</p>
</div>
<span class="comment-copy">No they aren't defined in <code>__init__.py</code>. The problem has something to do with the fact that it's a dynamic binding that builds itself by import time.</span>
