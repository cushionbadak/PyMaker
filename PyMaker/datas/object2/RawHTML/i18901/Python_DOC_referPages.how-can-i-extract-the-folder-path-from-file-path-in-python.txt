<div class="post-text" itemprop="text">
<p>I would like to get just the folder path from the full path to a file.</p>
<p>For example <code>T:\Data\DBDesign\DBDesign_93_v141b.mdb</code> and I would like to get just <code>T:\Data\DBDesign</code> (excluding the <code>\DBDesign_93_v141b.mdb</code>).</p>
<p>I have tried something like this:</p>
<pre><code>existGDBPath = r'T:\Data\DBDesign\DBDesign_93_v141b.mdb'
wkspFldr = str(existGDBPath.split('\\')[0:-1])
print wkspFldr 
</code></pre>
<p>but it gave me a result like this:</p>
<pre><code>['T:', 'Data', 'DBDesign']
</code></pre>
<p>which is not the result that I require (being <code>T:\Data\DBDesign</code>).</p>
<p>Any ideas on how I can get the the path to my file?</p>
</div>
<div class="post-text" itemprop="text">
<p>You were almost there with your use of the <code>split</code> function. You just needed to join the strings, like follows.</p>
<pre><code>&gt;&gt;&gt; '\\'.join(existGDBPath.split('\\')[0:-1])
'T:\\Data\\DBDesign'
</code></pre>
<p>Although, I would recommend using the <code>os.path.dirname</code> function to do this, you just need to pass the string, and it'll do the work for you. Since, you seem to be on windows, consider using the <code>abspath</code> function too. An example -</p>
<pre><code>&gt;&gt;&gt; os.path.dirname(os.path.abspath(existGDBPath))
'T:\\Data\\DBDesign'
</code></pre>
<p>If you want both the file name and the directory path after being split, you can use the <code>os.path.split</code> function which returns a tuple, as follows.</p>
<pre><code>&gt;&gt;&gt; os.path.split(os.path.abspath(existGDBPath))
('T:\\Data\\DBDesign', 'DBDesign_93_v141b.mdb')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="http://docs.python.org/2/library/os.path.html">os.path</a> module:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; existGDBPath = r'T:\Data\DBDesign\DBDesign_93_v141b.mdb'
&gt;&gt;&gt; wkspFldr = os.path.dirname(existGDBPath)
&gt;&gt;&gt; print wkspFldr 
'T:\Data\DBDesign'
</code></pre>
<p>You can go ahead and assume that if you need to do some sort of filename manipulation it's already been implemented in <code>os.path</code>.  If not, you'll still probably need to use this module as the building block.</p>
<p><strong>UPDATE</strong></p>
<p>One should consider using <a href="https://docs.python.org/3/library/pathlib.html">pathlib</a> for new development.  It is in the stdlib for Python3.4, but <a href="https://pypi.python.org/pypi/pathlib/">available on PyPI</a> for earlier versions.  This library provides a more object-orented method to manipulate paths <code>&lt;opinion&gt;</code> and is much easier read and program with <code>&lt;/opinion&gt;</code>.</p>
<pre><code>&gt;&gt;&gt; import pathlib
&gt;&gt;&gt; existGDBPath = pathlib.Path(r'T:\Data\DBDesign\DBDesign_93_v141b.mdb')
&gt;&gt;&gt; wkspFldr = existGDBPath.parent
&gt;&gt;&gt; print wkspFldr
Path('T:\Data\DBDesign')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The built-in submodule <a href="http://docs.python.org/2/library/os.path.html" rel="noreferrer">os.path</a> has a function for that very task.</p>
<pre><code>import os
os.path.dirname('T:\Data\DBDesign\DBDesign_93_v141b.mdb')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is the code: </p>
<pre><code>import os
existGDBPath = r'T:\Data\DBDesign\DBDesign_93_v141b.mdb'
wkspFldr = os.path.dirname(existGDBPath)
print wkspFldr # T:\Data\DBDesign
</code></pre>
</div>
