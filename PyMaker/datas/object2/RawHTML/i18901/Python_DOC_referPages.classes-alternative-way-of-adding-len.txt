<div class="post-text" itemprop="text">
<p>I am building a string Class that behaves like a regular string class except that the addition operator returns the sum of the lengths of the two strings instead of concatenating them. And then a multiplication operator returns the products of the length of the two strings. So I was planning on doing </p>
<pre><code>   class myStr(string):
         def __add__(self):
             return len(string) + len (input)
</code></pre>
<p>at least that is what I have for the first part but that is apparently not correct. Can someone help me correct it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to derive from <code>str</code>, and you can use <code>len(self)</code> to get the length of the current instance. You also need to give <code>__add__</code> a parameter for the other operand of the <code>+</code> operator.</p>
<pre><code>class myStr(str):
    def __add__(self, other):
        return len(self) + len(other)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; class myStr(str):
...     def __add__(self, other):
...         return len(self) + len(other)
... 
&gt;&gt;&gt; foo = myStr('foo')
&gt;&gt;&gt; foo
'foo'
&gt;&gt;&gt; foo + 'bar'
6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>string</code> is not a class. It's not anything*. There is no context where <code>len(string)</code> will work  unless you define <code>string</code>. </p>
<p>Secondly, <code>__add__</code> does not have an <code>input</code> parameter.</p>
<p>You need to fix both of these issues.</p>
<p><code>*</code> You could import a module called <code>string</code>, but it's not something that just exists in global scope.</p>
</div>
<span class="comment-copy">Please always post the full error which your code gives you.</span>
<span class="comment-copy">Why do you want to do this? That's a very odd design. An object that <i>has</i> a string, and uses it in various ways, and even delegates some methods straight through to the string… that's not too bad. But an object that <i>is a</i> string, and yet does some of the operations in non-string-like ways, is just going to be confusing.</span>
<span class="comment-copy">Also, note that, once you get this right, <code>myStr('abc') + 'def'</code> will be 6, but <code>'abc' + myStr('def')</code> will be <code>'abcdef'</code>. And, worse, <code>s = myStr('abc'); s += myStr('def')</code> will set <code>s</code> to 6. Is that really what you want?</span>
<span class="comment-copy">@abarnert This is homework. Same user has other homework questions of similar type.</span>
<span class="comment-copy">@Marcin: I'm beginning to suspect that she needs a better professor (or tutorial or whatever). Anyone who would give this assignment is either deliberately trying to confuse his students, or confused as a result of too much LDS^H^H^HLOOPS in the 60s…</span>
<span class="comment-copy">You don't need <code>str.__len__(self)</code> or <code>super</code>; <code>len(self)</code> works just fine. (He hasn't overridden <code>__len__</code>, so <code>myStr.__len__</code> is the exact same method as <code>str.__len__</code>.)</span>
<span class="comment-copy">@abarnert: heh, of course.</span>
<span class="comment-copy"><code>string</code> is <a href="http://docs.python.org/3/library/string.html" rel="nofollow noreferrer">a module in the stdlib</a>.</span>
