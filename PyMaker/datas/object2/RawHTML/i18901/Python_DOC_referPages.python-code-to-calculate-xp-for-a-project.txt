<div class="post-text" itemprop="text">
<p>I'm trying to convert C++ code to python but I'm stuck</p>
<p>original C++ code</p>
<pre><code>int main(void)
{
    int levels = 40;
    int xp_for_first_level = 1000;
    int xp_for_last_level = 1000000;

    double B = log((double)xp_for_last_level / xp_for_first_level) / (levels - 1);
    double A = (double)xp_for_first_level / (exp(B) - 1.0);

    for (int i = 1; i &lt;= levels; i++)
    {
        int old_xp = round(A * exp(B * (i - 1)));
        int new_xp = round(A * exp(B * i));
        std::cout &lt;&lt; i &lt;&lt; " " &lt;&lt; (new_xp - old_xp) &lt;&lt; std::endl;
    }
}
</code></pre>
<p>python code</p>
<pre><code>import math
from math import log
from math import exp

levels = 40
xp_for_first_level = 1000
xp_for_last_level = 1000000

B = log(xp_for_last_level / xp_for_first_level) / (levels - 1)
A = xp_for_first_level / (exp(B) - 1.0)

for i in range(1, levels):
    old_xp = round(A * exp(B * (i - 1)))
    new_xp = round(A * exp(B * i))
    print(i + " " + (new_xp - old_xp))
</code></pre>
<p>Any help is appreciated I can't seem to completely get it to work, when I fix one bug I'm creating another one.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the last line, you can simply use:</p>
<pre><code>print(i, new_xp - old_xp)
</code></pre>
<p>As @pfnuesel commented, you will need to adjust the range of your for loop slightly.</p>
<p>Finally, you don't need <code>import math</code>. You can replace the first 3 lines with:</p>
<pre><code>from math import log, exp
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Change the <code>print</code> line to:</p>
<pre><code>print("%i %i" % (i, new_xp - old_xp))
</code></pre>
<p>Refer to this <a href="http://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow">list of allowed type conversion specifiers</a> for more informations.</p>
<p>Or use the new <a href="http://docs.python.org/3/library/functions.html#format" rel="nofollow">format</a> method.</p>
</div>
<div class="post-text" itemprop="text">
<p>Depending on the version of python you are using, the cast to double in the C++ code</p>
<pre><code>(double)xp_for_last_level / xp_for_first_level
</code></pre>
<p>might need to be taken into account in the python code. In python 3 you will get a float, in older python you can do</p>
<pre><code>from __future__ import division
</code></pre>
<p>then <code>xp_for_last_level / xp_for_first_level</code> will give you a float.</p>
<p>See the <a href="https://stackoverflow.com/questions/1267869/how-can-i-force-division-to-be-floating-point-in-python">discussion here</a></p>
</div>
<span class="comment-copy"><code>for i in range(1,levels)</code> should be <code>for i in range(1,levels+1):</code></span>
<span class="comment-copy">still getting same error: TypeError: unsupported operand type(s) for +: 'int' and 'str'</span>
<span class="comment-copy">also you need to put str(i) on  and in str((new_xp - old_xp))) on the last print</span>
<span class="comment-copy">or better print(i, (new_xp - old_xp)) without the  + " " +</span>
<span class="comment-copy">Please add the error into the question in future, it helps pinpoint the problem.</span>
<span class="comment-copy">Thank you aswell for your input!!</span>
<span class="comment-copy">what does %i do? this fixed it by the way thanks. (got to wait 8 minutes to tag as correct answer).</span>
<span class="comment-copy">It's a placeholder for an integer. You specify the actual value in the in the tuple that follows the percent sign. It works kinda like <code>printf</code> in C.</span>
<span class="comment-copy">so print("%q %q" % (i, 5-2)) would print the value of i and 3?</span>
<span class="comment-copy">I doubt there is a <code>%q</code> though.</span>
<span class="comment-copy">@DekDekku I think <a href="http://docs.python.org/2/library/stdtypes.html#string-formatting" rel="nofollow noreferrer">this link</a> helps.</span>
