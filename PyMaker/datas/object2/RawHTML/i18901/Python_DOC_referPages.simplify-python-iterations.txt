<div class="post-text" itemprop="text">
<p>Everytime I try to solve some math problem such as finding a specific product of certain number of factors I do this in Python</p>
<pre><code>for x in xrange(1,10):
    for y in xrange(1,10):
        for z in xrange(1,10):
           product = x * y * z
           if product == 36:
               print "factors : {0},{1},{2}".format(x,y,z)
</code></pre>
<p>It is very straightforward and gets the job done fast in this example, but I was wondering if you guys know an easier or simpler way to write this. Any ideas on how to do this without using that many for iterations or repeating almost the same code over and over. These is obviously for 3 factors, but the more factors I add the longer and more repetitive the code keeps getting. Any ideas on how to simplify code for this simple type of problem? 
thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Itertool's <a href="http://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.product" rel="nofollow">cartesian product</a> simulates the effect of multiple nested for loops.</p>
<pre><code>import itertools

for x, y, z in itertools.product(range(1,10), range(1,10), range(1,10)):
    product = x * y * z
    if product == 36:
        print "factors : {0},{1},{2}".format(x,y,z)
</code></pre>
<p>Result:</p>
<pre><code>factors : 1,4,9
factors : 1,6,6
factors : 1,9,4
(...etc)
</code></pre>
<p>If the range is always the same for each of x,y, and z, you can specify it just once:</p>
<pre><code>for x, y, z in itertools.product(range(1,10), repeat=3):
</code></pre>
<p>If you're sick of typing a zillion asterisks for the <code>product =</code> line, you can use <code>reduce</code> to multiply together an arbitrary number of arguments:</p>
<pre><code>for factors in itertools.product(range(1,3), repeat=10):
    product = reduce(lambda x, y: x*y, factors)
</code></pre>
<p>Once your format string becomes unwieldy, you can depend on <code>join</code> to string together factors:</p>
<pre><code>if product == 512:
    #use `map` to turn the factors into strings, first
    print "factors: " + ",".join(map(str, factors))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Avoid duplicates by having <code>y</code> start at <code>x</code>.  Calculate <code>z</code> instead of running another loop.</p>
<pre><code>for x in xrange(1,10):
    for y in xrange(x,10):
        z, r = divmod(36, x*y)
        if r == 0:
            print "factors : {0},{1},{2}".format(x,y,z)
</code></pre>
<p>For more factors, I would use a recursive function.</p>
</div>
<span class="comment-copy">Do you mean <code>product == 36</code> (no quotes)?</span>
<span class="comment-copy">if product == "36":  it looks like an error.</span>
<span class="comment-copy">yeah sorry, that is what I meant</span>
<span class="comment-copy">the only problems with <code>itertools.product</code> in this case that It is hard to optimize.</span>
<span class="comment-copy">That looks extremely clean and neat. Thanks man.</span>
