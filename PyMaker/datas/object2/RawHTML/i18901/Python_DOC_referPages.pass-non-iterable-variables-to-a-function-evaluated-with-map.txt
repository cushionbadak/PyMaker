<div class="post-text" itemprop="text">
<p>I am working in python and trying to convert a function with this structure:</p>
<pre><code>def func(g,h,iterable):
 return iterable*(g+h)

for iterable in range(20):
  print func(2,3,iterable)
</code></pre>
<p>Into a mapped function:</p>
<pre><code>def func(g,h,iterable):
 return iterable*(g+h)

print map(func,2,3,range(20)) #does not work...
</code></pre>
<p>The issue I am having is passing constants through the <code>map()</code> function, currently I don't know how to do it. </p>
<p>I want this structure so I can easily use the Ipython parallelism tools.</p>
<p>Assume:</p>
<ul>
<li>The actual function completion over all iterables takes ~1.5hr (thus the desire for using a parallel <code>map()</code> function</li>
<li>The function is complex and cannot use list comprehension</li>
</ul>
<p>Essentially, if it wasn't already obvious I am a MATLAB programmer making the leap to python and looking for a good substitute for the <code>parfor</code> function in matlab. </p>
</div>
<div class="post-text" itemprop="text">
<p>For one thing, if you map your function over a <code>range</code>, no parameter is an iterable. </p>
<p>To your question, you can bind positional parameters (from left to right) to a function using <a href="http://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow">functools.partial</a></p>
<pre><code>def func(g,h,i):
    return i*(g+h)

print map(functools.partial(func, 2,3), range(20))

# [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]
</code></pre>
<p>For binding any positional parameter, use a lambda expression like stated in hkpeprah's answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you know the parameters ahead of time, you can use a lambda like</p>
<pre><code>f = lambda lst: func(2,3,lst)
map(f, range(20))
</code></pre>
<p>Alternatively, if you don't know the parameters, you could wrap a lambda expression</p>
<pre><code>f = lambda x: lambda y: lambda lst: func(x,y,lst)
f = f(2)
f = f(3)
map(f, range(20))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use closures:</p>
<pre><code>def initFunction(g, h):
    def funct(value):
        return g * h * value
    return funct

myFunct = initFunction(g, h)
mapped = map(myFunct, range(20)) 
</code></pre>
<p>PS. I'm guessing you're using python 3.x for this, or else xrange + generator comprehension would be much better than range for large values! (equivalent code in 2.7 btw):</p>
<pre><code>def initFunction(g, h):
    def funct(value):
        return g * h * value
    return funct

myFunct = initFunction(g, h)
mapped = (myFunct(i) for i in xrange(20)) 
</code></pre>
</div>
<span class="comment-copy">Notice that <code>partial</code> cannot be used to specify positional parameters at arbitrary precision. E. g. if you want to always provide the third parameter you either have to use its keyword, or you must use a lambda <code>lambda x,y: func(x,y,const)</code>.</span>
<span class="comment-copy">I've added a note to my answer, thanks for the hint.</span>
<span class="comment-copy">Excellent, Thomas' answer with Bakuriu's refinement works perfectly for what I am trying to do!</span>
