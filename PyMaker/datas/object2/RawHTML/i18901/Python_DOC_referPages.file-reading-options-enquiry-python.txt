<div class="post-text" itemprop="text">
<p>I am a programming student for the semester. In class we have been learning about file opening, reading and writing. </p>
<p>We have used <code>a_reader</code> to achieve such tasks for file opening. I have been reading our associated text/s and I have noticed that there is a CSV reader option which I have been using.</p>
<p>I wanted to know if there were anymore possible ways to open/read a file as I am trying to grow my knowledge base in python and its associated contents. </p>
<p><strong>EDIT:</strong>
I was referring to CSV more specifically as that is the type of files we use at the moment. We have learnt about CSV Reader and a_reader and an example from one of our lectures is shown below. </p>
<pre><code>def main():
 a_reader = open('IDCJAC0016_009225_1800_Data.csv', 'rU')
 file_data = a_reader.read()
 a_reader.close()
 print file_data
main()
</code></pre>
<p>It may seem overly broad but I have no knowledge which is why I am asking is there more than just the 2 ways above. If there is can someone who knows provide the types so I can read up on and research on them. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you're asking about places to store things, the first interfaces you'll meet are files and sockets (pretend a network connection is like a file, see <a href="http://docs.python.org/2/library/socket.html" rel="nofollow">http://docs.python.org/2/library/socket.html</a>).</p>
<p>If you mean file formats (like csv), there are many! Probably you can think of many yourself, but besides csv there are html files, pictures (png, jpg, gif), archive formats (tar, zip), text files (.txt!), python files (.py). The list goes on.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are many ways to read files in different ways.</p>
<p>Just plain <a href="http://docs.python.org/3/library/functions.html#open" rel="nofollow"><code>open</code></a> will take a filename and open it as a sequence of lines. Or, you can just call <code>read()</code> on it, and it will read the whole file at once into one giant string.</p>
<p><a href="http://docs.python.org/3/library/codecs.html#codecs.open" rel="nofollow"><code>codecs.open</code></a> will take a filename and a character set, and decode each line to Unicode automatically. Or, again, you can just call <code>read()</code> on it, and it will read and decode the whole file at once into one giant Unicode string.</p>
<p><a href="http://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow"><code>csv.reader</code></a> will take a file or file-like object, and read it as a sequence of CSV rows. There's no direct equivalent of <code>read()</code>—but you can turn <em>any</em> sequence into a list by just calling <code>list</code> on it, so <code>list(my_reader)</code> will give you a list of rows (each of which is, itself, a list).</p>
<p><a href="http://docs.python.org/3/library/zipfile.html#zipfile-objects" rel="nofollow"><code>zipfile.ZipFile</code></a> will take a filename, or a file or file-like object, and read it as a ZIP archive. This doesn't go line by line, of course, but you can go archived file by archived file. Or you can do fancier things, like search for archived files by name.</p>
<p>There are modules for reading JSON and XML documents, different ways of handling binary files, and so on. Some of them work differently—for example, you can search an XML document as a tree with one module, or go element by element with a different one.</p>
<p>Python has a pretty extensive standard library, and you can find the documentation <a href="http://docs.python.org/3/library/index.html" rel="nofollow">online</a>. Every module that seems like it should be able to work on files, probably can.</p>
<p>And, beyond what comes in the standard library, <a href="https://pypi.python.org/pypi" rel="nofollow">PyPI, the Python Package Index</a> has thousands of additional modules. Looking for a way to read YAML documents? Search PyPI for <code>yaml</code> and you'll find it.</p>
<p>Finally, Python makes it very easy to add things like this on your own. The skeleton of a function like <code>csv.reader</code> is as simple as this:</p>
<pre><code>def reader(fileobj):
    for line in fileobj:
        yield parse_one_csv_line(line)
</code></pre>
<p>You can replace that <code>parse_one_csv_line</code> with anything you want, and you've got a custom reader. For example, here's an uppercase_reader:</p>
<pre><code>def uppercase_reader(fileobj):
    for line in fileobj:
        yield line.upper()
</code></pre>
<p>In fact, you can even write the whole thing in one line:</p>
<pre><code>shouts = (line.upper() for line in fileobj)
</code></pre>
<p>And the best thing is that, as long as your reader only yields one line at a time, your reader is itself a file-like object, so you can pass <code>uppercase_reader(fileobj)</code> to <code>csv.reader</code> and it works just fine.</p>
</div>
<span class="comment-copy">What is <code>a_reader</code>? Can you show some examples?</span>
<span class="comment-copy">Hi @Blender how do I provide examples?</span>
<span class="comment-copy">How do you normally open files?</span>
<span class="comment-copy">This falls under "overly broad". There are dozens of ways to open a file, or to use an open file.</span>
<span class="comment-copy">Sorry @IgnacioVazquez-Abrams I have only limited experience so I was unsure of exactly the question I was trying to ask. Apologies if this has annoyed you or anyone else</span>
<span class="comment-copy">Yes I was referring to CSV as an example. I neglected to show this because I was unsure of exactly the question I wanted to ask but now I have edited the question (see above) to try and be more specific</span>
<span class="comment-copy">When you say modules is that like CSV, Math, Decimal and the like becasue that is what I have learnt to be as modules. Does that also mean that any script I write. I.e script.py is therefore also a module?</span>
<span class="comment-copy">@KristoferWright: Yes—although they're actually called <code>csv</code>, <code>math</code>, and <code>decimal</code> in all lowercase. (On Windows, you can sometimes get away with the wrong capitalization, but on Mac or Linux you usually can't, so don't get into a bad habit.)</span>
<span class="comment-copy">Also, yes, <code>script.py</code> is a module. You can put another file called <code>script2.py</code> next to it, and write <code>import script</code>, and it will work just like <code>csv</code> or <code>math</code>.</span>
<span class="comment-copy">Thanks for the information I have been importing scripts as of late to create a "cleaner" more polished program. Thanks for the help. Finally is there a place I can go to research all these thousands of modules to see what kind of function (possibly wrong word) that they can complete/do.</span>
