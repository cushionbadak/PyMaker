<div class="post-text" itemprop="text">
<p>I'm very new to Python, and I'm using Python 3.3.1.</p>
<pre><code>class Parent: # define parent class 
    parentAttr = 100
    age = 55

    def __init__(self): 
        print ("Calling parent constructor") 

    def setAttr(self, attr): 
        Parent.parentAttr = attr 

class Child(Parent):
    def childMethod(self):
        print ('Calling child method')
</code></pre>
<p>Now I'll create</p>
<pre><code>c=child
c.[here every thing will appear methods and attr (age,setAttr)]
</code></pre>
<p>How can I distinguish between methods and atrributes? I mean, when do I use <code>c.SetAtrr(Argument)</code>, and  <code>c.SetAtrr=value</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Methods are attributes too. They just happen to be callable objects.</p>
<p>You can detect if an object is callable by using the <a href="http://docs.python.org/3/library/functions.html#callable" rel="noreferrer"><code>callable()</code> function</a>:</p>
<pre><code>&gt;&gt;&gt; def foo(): pass
...
&gt;&gt;&gt; callable(foo)
True
&gt;&gt;&gt; callable(1)
False
</code></pre>
<p>When you call a method, you look up the attribute (a <code>getattr()</code> operation) and then call the result:</p>
<pre><code>c.setAttr(newvalue)
</code></pre>
<p>is two steps; finding the attribute (which in this case looks up the attribute on the class, and treats it as a descriptor), then calls the resulting object, a method.</p>
<p>When you <em>assign to</em> an attribute, you rebind that name to a new value:</p>
<pre><code>c.setAttr = 'something else'
</code></pre>
<p>would be a <code>setattr()</code> operation. </p>
<p>If you wanted to intercept getting and setting attributes on instances of your class, you could provide the <a href="http://docs.python.org/3/reference/datamodel.html#customizing-attribute-access" rel="noreferrer">attribute access hooks</a>, <code>__getattr__</code>, <code>__setattr__</code> and <code>__delattr__</code>.</p>
<p>If you wanted to add a method to an <em>instance</em>, you would have to treat the function as a <a href="http://docs.python.org/3/howto/descriptor.html" rel="noreferrer">descriptor object</a>, which produces a method object:</p>
<pre><code>&gt;&gt;&gt; class Foo: pass
... 
&gt;&gt;&gt; foo = Foo()  # instance
&gt;&gt;&gt; def bar(self): pass
... 
&gt;&gt;&gt; bar
&lt;function bar at 0x10b85a320&gt;
&gt;&gt;&gt; bar.__get__(foo, Foo)
&lt;bound method Foo.bar of &lt;__main__.Foo instance at 0x10b85b830&gt;&gt;
</code></pre>
<p>The return value of <code>function.__get__()</code>, when given an instance and a class, is a bound method. Calling that method will call the underlying function with <code>self</code> bound to the instance.</p>
<p>And speaking of descriptors, the <a href="http://docs.python.org/3/library/functions.html#property" rel="noreferrer"><code>property()</code> function</a> returns a descriptor too, making it possible to have functions that <em>behave</em> like attributes; they can intercept the <code>getattr()</code>, <code>setattr()</code> and <code>delattr()</code> operations for just that attribute and turn it into a function call:</p>
<pre><code>&gt;&gt;&gt; class Foo:
...     @property
...     def bar(self):
...         return "Hello World!"
... 
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo.bar
"Hello World!"
</code></pre>
<p>Accessing <code>.bar</code> invoked the <code>bar</code> property get hook, which then calls the original <code>bar</code> method.</p>
<p>In almost all situations, you are not going to need the <code>callable()</code> function; you document your API, and provide methods and attributes and the user of your API will figure it out without testing each and every attribute to see if it is callable. With properties, you have the flexibility of providing attributes that are really callables in any case.</p>
</div>
<span class="comment-copy">The class documentation should tell you which attributes are methods meant to be called and which are attributes whose value you can safely change.</span>
<span class="comment-copy">So .. Can i use c.SetAtrr=value and c.SetAtrr(Value) ,, and they will be the same ??</span>
<span class="comment-copy">@disasterromio: No, one is setting the attribute, the other is calling the function.</span>
<span class="comment-copy">Thank u for ur time thou the best practice is to check if the object is callable or not first ?</span>
<span class="comment-copy">@D007a: but what is your goal here? Generally, that is up to documentation, isn't it? The user of the class learns <i>once</i> what your API is, you usually do not need to detect if something is callable or not.</span>
