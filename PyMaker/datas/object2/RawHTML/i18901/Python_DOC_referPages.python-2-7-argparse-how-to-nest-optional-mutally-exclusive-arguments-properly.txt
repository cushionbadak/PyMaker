<div class="post-text" itemprop="text">
<p>My Program should include the following options, properly parsed by <a href="http://docs.python.org/2/library/argparse.html" rel="nofollow noreferrer">argparse</a>:</p>
<ol>
<li>purely optional: <code>[-h, --help]</code> and <code>[-v, --version]</code></li>
<li>mutually exclusive: <code>[-f FILE, --file FILE]</code> and <code>[-u URL, --url URL]</code></li>
<li>optional if <code>--url</code> was chosen: <code>[-V, --verbose]</code></li>
<li>required if either <code>--file</code> or <code>--url</code> was chosen: <code>[-F, --format FORMAT]</code></li>
</ol>
<p>The desired usage pattern would be:</p>
<pre><code>prog.py [-h] [-v] [-f FILE (-F FORMAT) | -u URL [-V] (-F FORMAT) ]
</code></pre>
<p>with the <code>-F</code> requirement applying to both members of the mutually exclusive group.<br/>
Not sure if it rather be a <a href="https://stackoverflow.com/questions/15857953/how-to-include-one-positional-argument-into-argparse-mutually-exclusive-group">positional</a>.</p>
<p>So it should be possible to run:</p>
<pre><code>prog.py -u "http://foo.bar" -V -F csv
</code></pre>
<p>and the parser screaming in case i forgot the <code>-F</code> (as he's supposed to).</p>
<p>What i've done so far:</p>
<pre><code>parser = ArgumentParser(decription='foo')

group = parser.add_mutually_exclusive_group()    
group.add_argument('-f','--file', nargs=1, type=str, help='')
group.add_argument('-u','--url', nargs=1, type=str, help='')    

parser.add_argument('-V','--verbose', action='store_true', default=False, help='')
parser.add_argument('-F','--format', nargs=1, type=str, help='')
</code></pre>
<p>Since it has a 'vanilla mode' to run without command line arguments, all arguments must be optional.</p>
<p>How can i implement points 3. and 4. into my code?</p>
<p>EDIT:<br/>
I tried <code>-f</code> and <code>-u</code> as subparsers, as described <a href="https://stackoverflow.com/questions/11760578/argparse-arguments-nesting">here</a>, but subcommands seem to be treated like positionals and the parser gives me an <code>error: too few arguments</code> if i run it without arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use of nargs=2 and tuple metavar approximates your goal</p>
<pre><code>parser = argparse.ArgumentParser(prog='PROG')
group = parser.add_mutually_exclusive_group()
group.add_argument('-f','--file', nargs=2, metavar=('FILE','FORMAT'))
group.add_argument('-u','--url', nargs=2, metavar=('URL','FORMAT'))
parser.add_argument('-V','--verbose', action='store_true',help='optional with url')
</code></pre>
<p>which produces:</p>
<pre><code>usage: PROG [-h] [-f FILE FORMAT | -u URL FORMAT] [-V]

optional arguments:
  -h, --help            show this help message and exit
  -f FILE FORMAT, --file FILE FORMAT
  -u URL FORMAT, --url URL FORMAT
  -V, --verbose         optional with url
</code></pre>
<p>This requires the format along with filename or url, it just doesn't require the <code>-F</code>.  As others noted <code>-V</code> can be ignored in the <code>-f</code> case.</p>
<hr/>
<blockquote>
<p>I tried -f and -u as subparsers, as described here, but subcommands seem to be treated like positionals and the parser gives me an error: too few arguments if i run it without arguments.</p>
</blockquote>
<p>In the latest version(s) subcommands are no longer treated as required positionals.  This was, as best I can tell, a side effect of changing the error message to be more informative.  Instead of <code>_parse_known_args</code> doing a:</p>
<pre><code>    if positionals:
        self.error(_('too few arguments'))
</code></pre>
<p>it scans <code>_actions</code> to see which are required, and then lists them by name in the error message.  This is discussed in <a href="http://bugs.python.org/issue9253" rel="noreferrer">http://bugs.python.org/issue9253</a> .  I know this change is in development (3.4), and may also be in 3.3.</p>
<hr/>
</div>
<div class="post-text" itemprop="text">
<p>These points can enforced in <code>optparse</code> using a <a href="http://docs.python.org/2/library/optparse.html#callback-example-6-variable-arguments" rel="nofollow">callback</a> method when a certain option is present.</p>
<p>However, in <code>argparse</code> these are not available.</p>
<p>You can add a  <a href="http://docs.python.org/2/library/argparse.html#argparse.ArgumentParser.add_subparsers" rel="nofollow">subparser</a> for the <code>url</code> and the <code>file</code> sub-option, and parse these seperatly.
from the help:</p>
<blockquote>
<p>Note that the object returned by parse_args() will only contain attributes for
  the main parser and the subparser that was selected by the command line 
  (and not any other subparsers). So in the example above, when the a command 
  is specified, only the foo and bar attributes are present, and when the b command
  is specified, only the foo and baz attributes are present.</p>
</blockquote>
<p>But I would just properly document the usage, and just ignore the arguments that are not 
applicable.</p>
<p>e.g. let these two command lines behave exactly the same:</p>
<pre><code>prog.py -f FILE -V
prog.py -f FILE
</code></pre>
</div>
<span class="comment-copy">have you considered <a href="http://docopt.org/" rel="nofollow noreferrer">docopt</a>? The disadvantage is that it allows option values to start with <code>-</code> <a href="https://gist.github.com/zed/b94e3e9945debe25826d" rel="nofollow noreferrer">e.g., <code>"-f a -F -u"</code> (the format is "-u" here)</a></span>
<span class="comment-copy">Is one of <code>-f</code> and <code>-u</code> required? If so, I'm picturing a solution involving subcommands or positional arguments.</span>
<span class="comment-copy">@chepner: no, they aren't. i want the program to also run without args and options, so it will start a user dialog or even a GUI</span>
<span class="comment-copy">@J.F.Sebastian: <code>docopt</code> looks great, i'll dig into it and report if it suits my needs</span>
<span class="comment-copy"><code>argparse</code> has built-in support for options with a variable number of arguments, as well as custom actions to process the argument(s) of a given option. However, I agree that in this case, it is simplest to just allow <code>-V</code> and ignore it if <code>-f</code> is used.</span>
<span class="comment-copy"><code>optparse</code> is deprecated and <code>argparse</code> is its replacement. See: <a href="https://docs.python.org/3/library/argparse.html#upgrading-optparse-code" rel="nofollow noreferrer">docs.python.org/3/library/argparse.html#upgrading-optparse-code</a></span>
