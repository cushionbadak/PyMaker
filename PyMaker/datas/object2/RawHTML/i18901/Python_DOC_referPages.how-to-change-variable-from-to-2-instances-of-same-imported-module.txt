<div class="post-text" itemprop="text">
<pre><code>frmEnv = __import__(conf)
frmEnv.SCHEMA='abc'

toEnv = __import__(conf)
toEnv.SCHEMA='def'

print(frmEnv.SCHEMA, toEnv.SCHEMA)
</code></pre>
<p>Output:</p>
<pre><code>('def', 'def')
</code></pre>
<p>I want both values to be different.<br/>
Is there a way to make a variable's value non-changable (constant or static)</p>
<p>I don't want frmEnv.SCHEMA value to change ever once a value is assigned to it.</p>
</div>
<div class="post-text" itemprop="text">
<p>what you're trying to do is totally wrong as other people explained. But if I try to read what you got in mind (though I'm rarely good at telepathy), maybe what you want is to have a copy of the first module?</p>
<p>you may then want to use the <a href="http://docs.python.org/3/library/copy.html" rel="nofollow"><code>copy</code></a> module, and change the copy of your object:</p>
<pre><code>frmEnv = __import__(conf)
frmEnv.SCHEMA='abc'

toEnv = copy.deepcopy(frmEnv) # or copy.copy() depending on what are the members of frmEnv...
toEnv.SCHEMA='def'

print(frmEnv.SCHEMA, toEnv.SCHEMA)

Output:

('abc', 'def')
</code></pre>
<p>You may also want to load a module using its file name using the <a href="http://docs.python.org/3/library/imp.html" rel="nofollow"><code>imp</code></a> module, and give it two different names in the current environment so they are actually loaded two times. It should have the same effect as a copy, but would be a lot more dependent on the filesystem placement of files, thus being a lot less elegant (that's why I'm not giving an example). And it'd be a lot harder for the reader to understand why you're doing that.</p>
<p>HTH</p>
</div>
<div class="post-text" itemprop="text">
<p>A python module is only imported once; the second import just returns the already initialized module-- its code is not executed a second time. This means that your <code>frmEnv</code> and <code>toEnv</code> are two references to the same object.</p>
<p>If you explain what (concrete task) you're trying to accomplish, someone can tell you how to do it. This is not the way.</p>
</div>
<span class="comment-copy">This should not be tagged <code>python-2.7</code>. You are using python 3, which I can see by the print statement syntax.</span>
<span class="comment-copy">@foriinrangeawesome print(1) works for Python 2.7 too...</span>
<span class="comment-copy">if you mean brackets then I used them because it's just good practice.</span>
<span class="comment-copy">Really? My bad, I thought that that was new to Python 3</span>
<span class="comment-copy">You can't obtain what you want. By definition python modules are singletons hence they all share the same state. Anyway what you are trying to do is really wrong, and you should probably say more about the context if you want some useful suggestions.</span>
<span class="comment-copy">Awesome. Well according to me you are pretty gud at telepathy. :) thanks a lot man. that's exactly what I wanted. sorry, couldn't give UP. don't have enough repo :(</span>
<span class="comment-copy">ohh. didn't know about that. accepted :)</span>
