<div class="post-text" itemprop="text">
<p>I have multiple data-frames with stock prices that I want to align into a single data-frame that contains only the close prices for all stocks.</p>
<p>I would expect all dates from all data-frames to be present in the date-column(index) and "NA" in case there was no close price for a stock on that date.</p>
<p>Example with two data-frames (df1 and df2):</p>
<pre><code>In [5]: df1
Out[5]:
            Open   High   Low    Close
Date1
2012-01-05  22.00  22.66  23.11  24.04
2012-01-04  24.04  23.80  23.08  22.16
2012-01-03  22.16  21.27  20.42  21.24
2012-01-01  21.24  22.30  22.52  22.30

In [7]: df2
Out[7]:
             Open   High    Low  Close
Date1
2012-01-07  23.00  21.66  25.11  21.04
2012-01-06  22.00  22.66  23.11  24.04
2012-01-04  24.04  23.80  23.08  22.16
2012-01-02  22.16  21.27  20.42  21.24
2012-01-01  21.24  22.30  22.52  22.30
</code></pre>
<p>Now I can do </p>
<pre><code>In [8]: frame=pd.DataFrame({"df1.Close":df1["Close"], "df2.Close":df2["Close"]})
</code></pre>
<p>and the result is as expected:</p>
<pre><code>In [9]: frame
Out[9]:
            df1.Close  df2.Close
Date1
2012-01-01      22.30      22.30
2012-01-02        NaN      21.24
2012-01-03      21.24        NaN
2012-01-04      22.16      22.16
2012-01-05      24.04        NaN
2012-01-06        NaN      24.04
2012-01-07        NaN      21.04
</code></pre>
<p>How would I need to change my code to do the same for a dynamic number of data-frames?
Right now, I have 8 data-frames I need to align this way. Is there any way to loop thru a list of data-frames and align them like above - instead of manually tying the data-frame names (something like df[0] to df[7] figuratively speaking)? </p>
<p>Thanks in advance and kind regards!
Dirk</p>
</div>
<div class="post-text" itemprop="text">
<p>If you have the data-frames in a list (the actual data-frame objects, I mean, not their names) that looks something like this:</p>
<pre><code>dflist = [df1, df2, df3, df4, df5, df6, df7, df8]
</code></pre>
<p>then the following code should do what it seems you're looking for:</p>
<pre><code>frame = {}
for idx, df in enumerate(dflist):
    n = idx+1  # Since lists are 0-indexed
    name = "df{0:d}.Close".format(n)
    close = df["Close"]
    frame[name] = close
</code></pre>
<p>You could do this more compactly with a dict comprehension, but in example code I prefer to spell things out more explicitly for ease of understanding. For reference, the dict comprehension would look something like this:</p>
<pre><code>{"df{0:d}.Close".format(idx+1): df["Close"] for idx, df in enumerate(dflist)}
</code></pre>
</div>
<span class="comment-copy">Very cool, thanks a lot! With that example, I'm half-way there. Now how would I make that "dflist" dynamic? I won't know up-front how many data-frames I'm going to need - so I guess I'm looking for a way to create a number of data-frames dynamically and then use your code. Thanks so much for your help!</span>
<span class="comment-copy">Just use standard list-manipulation methods like <code>append()</code> -- so for example when you get a new data-frame, do something like <code>dflist.append(new_df)</code>.</span>
<span class="comment-copy">I think I'm getting closer. I now loaded the dataframes into a dict where the key is the ticker of the stock and the value is the dataframe with OHLC quotes for the stock. Now I have a dict with 8 key/value pairs. The remaining question is: How do I join the dataframes into one by iterating thru my dict?</span>
<span class="comment-copy">If you iterate through a dict, you get keys: <code>for key in my_dict: print key</code>. But dicts also have an <code>iteritems()</code> method for producing tuples of <code>(key, value)</code>, so you can do <code>for key, val in my_dict.iteritems()</code>. Note that in Python 3, <code>iteritems()</code> gets renamed to just <code>items()</code>, so use the appropriate name depending on whether you're on Python 2.x or 3.x.</span>
<span class="comment-copy">Some of these questions you're asking are covered by the Python tutorial -- have you worked through that yet? If not, it might be of benefit to you. Go to either <a href="http://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/index.html</a> or <a href="http://docs.python.org/2.7/tutorial/index.html" rel="nofollow noreferrer">docs.python.org/2.7/tutorial/index.html</a> depending on whether you have Python 3.x or 2.x.</span>
