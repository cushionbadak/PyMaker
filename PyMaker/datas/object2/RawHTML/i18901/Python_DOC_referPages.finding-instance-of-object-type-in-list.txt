<div class="post-text" itemprop="text">
<p>I have a situation like the code below. I want to find the index of the first instance of the object A. What is the fastest way I can do that?</p>
<p>I know there are a lot of ways to go through the entire list and find it, but is there a way to stop the search once the first one is found?</p>
<pre><code>class A():
    def __init__(self):
        self.a = 0
    def print(self):
        print(self.a)

l = [0, 0, A(), 0, A(), 0]
print(l.index(type(A))) # this does not work
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>class A():
    def __init__(self):
        self.a = 0
    def __eq__(self,other): #this overrides the equality check
        if isinstance(other,A):
           return self.a==other.a
    def print(self):
        print(self.a)

l = [0, 0, A(), 0, A(), 0]
print(l.index(A()))#now this should work
print A() in l

a1 = A()
a2 = A()
a1 == a2 #True
a1.a = 2
a1 == a2 #False
a2.a = 2
a1 == a2 #True
a2.a = 5
a1 &lt; a2 #Error we would need to overload __cmp__ or __lt__ methods for this to work
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to test each object; use a list comprehension and <a href="http://docs.python.org/3/library/functions.html#enumerate" rel="nofollow"><code>enumerate()</code></a> to get all matching indices:</p>
<pre><code>[i for i, ob in enumerate(l) if isinstance(ob, A)]
</code></pre>
<p>or to get the <em>first</em> index, use <code>next()</code> and a generator expression:</p>
<pre><code>next((i for i, ob in enumerate(l) if isinstance(ob, A)), None)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; [i for i, ob in enumerate(l) if isinstance(ob, A)]
[2, 4]
&gt;&gt;&gt; next((i for i, ob in enumerate(l) if isinstance(ob, A)), None)
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The most obvious way:</p>
<pre><code>for index, value in enumerate(l):
    if isinstance(value,A):
        return (index, value)
</code></pre>
</div>
<span class="comment-copy">Do you want to find the first instance or the index of the first instance?</span>
<span class="comment-copy">index of the first instance, I'll clarify that.</span>
<span class="comment-copy">How can you have a <code>def print(self)</code>?</span>
<span class="comment-copy">@SukritKalra, It's Python 3, he can.</span>
<span class="comment-copy">Oh yeah, thanks. :)</span>
<span class="comment-copy">what is cmp(I assume a compare from python2) and how is it relevant to the question?</span>
<span class="comment-copy">ahh yeah I should have just done a check for equality ... i didnt really need cmp ...edited</span>
<span class="comment-copy">So does that mean .index is using the given objects <b>eq</b> against everything in the list?</span>
<span class="comment-copy">yes ... at least I believe so ... until it finds a match at which point it returns the index.  I added some more examples of stuff this lets you do ... (note it does not let you do <code>A() &lt; A()</code>)</span>
<span class="comment-copy">the builtin <code>__eq__</code> does not know how to compare custom classes (or more correctly checks if they are the SAME object(same memory)) ... this <code>__eq__</code> knows how to compare (for equivelency) your <code>A</code> class</span>
<span class="comment-copy">I suppose your answer is a little more detailed than mine was :).  +1 to you sir.</span>
