<div class="post-text" itemprop="text">
<p>I have this format of string</p>
<pre><code> 2013-06-05T11:01:02.955 LASTNAME=Jone FIRSTNAME=Jason PERSONNELID=salalm QID=231412 READER_NAME="CAZ.1 LOBBY LEFT TURNSTYLE OUT" ACCESS_TYPE="Access Granted" EVENT_TIME_UTC=1370480141.000 REGION=UTAH
</code></pre>
<p>some of them looks like this</p>
<pre><code> 2013-06-05T11:15:48.670 LASTNAME=Ga FIRSTNAME="Je " PERSONNELID=jega QID=Q10138202 READER_NAME="CAZ.1 ELEVATOR LOBBY DBL GLASS" ACCESS_TYPE="Access Granted" EVENT_TIME_UTC=1370481333.000 REGION=UTAH
</code></pre>
<p>I want to extract value of PERSONNELID,REGION,ACCESS_TYPE,EVENT_TIME_UTC</p>
<p>I was going to use split(" ") however READER_NAME and ACCESS_TYPE value has bunch of spaces
Can I convert to JSON and search by key</p>
<p>What is the way to extract those strings.</p>
<p>Thank you in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>One hack I've found useful in the past is to use <a href="http://docs.python.org/2/library/shlex.html#shlex.split" rel="nofollow"><code>shlex.split</code></a>:</p>
<pre><code>&gt;&gt;&gt; s = '2013-06-05T11:01:02.955 LASTNAME=Jone FIRSTNAME=Jason PERSONNELID=salalm QID=231412 READER_NAME="CAZ.1 LOBBY LEFT TURNSTYLE OUT" ACCESS_TYPE="Access Granted" EVENT_TIME_UTC=1370480141.000 REGION=UTAH'
&gt;&gt;&gt; split = shlex.split(s)
&gt;&gt;&gt; split
['2013-06-05T11:01:02.955', 'LASTNAME=Jone', 'FIRSTNAME=Jason', 
'PERSONNELID=salalm', 'QID=231412', 'READER_NAME=CAZ.1 LOBBY LEFT TURNSTYLE OUT',
'ACCESS_TYPE=Access Granted', 'EVENT_TIME_UTC=1370480141.000', 'REGION=UTAH']
</code></pre>
<p>And then we can turn this into a dictionary:</p>
<pre><code>&gt;&gt;&gt; parsed = dict(k.split("=", 1) for k in split if '=' in k)
&gt;&gt;&gt; parsed
{'EVENT_TIME_UTC': '1370480141.000', 'FIRSTNAME': 'Jason', 
'LASTNAME': 'Jone', 'REGION': 'UTAH', 'ACCESS_TYPE': 'Access Granted', 
'PERSONNELID': 'salalm', 'QID': '231412', 
'READER_NAME': 'CAZ.1 LOBBY LEFT TURNSTYLE OUT'}
</code></pre>
<p>As @abarnert points out, you can keep more of the information around if you want:</p>
<pre><code>&gt;&gt;&gt; dict(k.partition('=')[::2] for k in split)
{'2013-06-05T11:01:02.955': '', 'EVENT_TIME_UTC': '1370480141.000', 'FIRSTNAME': 'Jason', 'LASTNAME': 'Jone', 'REGION': 'UTAH', 'ACCESS_TYPE': 'Access Granted', 'PERSONNELID': 'salalm', 'QID': '231412', 'READER_NAME': 'CAZ.1 LOBBY LEFT TURNSTYLE OUT'}
</code></pre>
<p>Et cetera.  The key point, as he nicely put it, is that the syntax you've shown looks a lot like minimal shell syntax.  OTOH, if there are violations of the pattern that you've shown elsewhere, you might want to fall back to writing a custom parser.  The <code>shlex</code> approach is handy when it applies but isn't as robust as you might want.</p>
</div>
<div class="post-text" itemprop="text">
<p>Looking for an existing parser is a good idea. If you can find a format that already describes your data, or that you can trivially convert your data into, you win.</p>
<p>In this case, converting to JSON seems like it'll be as much work as parsing in the first place.</p>
<p>But you're just looking to split into simple <code>value</code> and <code>name=value</code> components, where the <code>value</code> part can be quotedâ€¦ those are the same rules as minimal shell syntax. So, <a href="http://docs.python.org/3/library/shlex.html" rel="nofollow"><code>shlex</code></a> will do it for you:</p>
<pre><code>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; shlex.split('2013-06-05T11:01:02.955 LASTNAME=Jone FIRSTNAME=Jason PERSONNELID=salalm QID=231412 READER_NAME="CAZ.1 LOBBY LEFT TURNSTYLE OUT" ACCESS_TYPE="Access Granted" EVENT_TIME_UTC=1370480141.000 REGION=UTAH')
['2013-06-05T11:01:02.955',
 'LASTNAME=Jone',
 'FIRSTNAME=Jason',
 'PERSONNELID=salalm',
 'QID=231412',
 'READER_NAME=CAZ.1 LOBBY LEFT TURNSTYLE OUT',
 'ACCESS_TYPE=Access Granted',
 'EVENT_TIME_UTC=1370480141.000',
 'REGION=UTAH']
</code></pre>
<p>You will still need to separate each <code>name=value</code> pair out into name and value components, but that's just <code>namevalue.split('=', 1)</code>. But it's pretty much implicit that you need to do that separately given that you've got some elements that aren't name-value pairs (<code>2013-06-05T11:01:02.955</code>).</p>
<p>Of course you can always choose to treat them as name-value pairs with empty values:</p>
<pre><code>&gt;&gt;&gt; dict(namevalue.partition('=')[::2] for namevalue in shlex.split(s))
{'2013-06-05T11:01:02.955': '',
 'ACCESS_TYPE': 'Access Granted',
 'EVENT_TIME_UTC': '1370480141.000',
 'FIRSTNAME': 'Jason',
 'LASTNAME': 'Jone',
 'PERSONNELID': 'salalm',
 'QID': '231412',
 'READER_NAME': 'CAZ.1 LOBBY LEFT TURNSTYLE OUT',
 'REGION': 'UTAH'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's analyze the problem: You want to match one of the four identifiers, then an <code>=</code> sign, and then either a quoted string or a sequence of non-whitespace characters.</p>
<p>That's a perfect job for a regular expression:</p>
<pre><code>&gt;&gt;&gt; s= ' 2013-06-05T11:01:02.955 LASTNAME=Jone FIRSTNAME=Jason PERSONNELID=salal
m QID=231412 READER_NAME="CAZ.1 LOBBY LEFT TURNSTYLE OUT" ACCESS_TYPE="Access Gr
anted" EVENT_TIME_UTC=1370480141.000 REGION=UTAH'
&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = re.compile(r"""\b(PERSONNELID|REGION|ACCESS_TYPE|EVENT_TIME_UTC)
...                        =
...                        ("[^"]*"|\S+)""", re.VERBOSE)
&gt;&gt;&gt; result = regex.findall(s)
&gt;&gt;&gt; result
[('PERSONNELID', 'salalm'), ('ACCESS_TYPE', '"Access Granted"'), 
 ('EVENT_TIME_UTC', '1370480141.000'), ('REGION', 'UTAH')]
&gt;&gt;&gt; dict(result)
{'EVENT_TIME_UTC': '1370480141.000', 'PERSONNELID': 'salalm', 
 'ACCESS_TYPE': '"Access Granted"', 'REGION': 'UTAH'}
</code></pre>
<p><strong>Explanation:</strong></p>
<p><code>\b</code> makes sure that the match starts at a <a href="http://www.regular-expressions.info/wordboundaries.html" rel="nofollow">word boundary</a>.</p>
<p><code>"[^"]*"</code> matches a quote, followed by any number of non-quote characters, and another quote.</p>
<p><code>\S+</code> matches one or more non-whitespace characters.</p>
<p>By enclosing the "interesting" parts of the regex in parentheses, building <a href="http://www.regular-expressions.info/brackets.html" rel="nofollow">capturing groups</a>, you get a list of tuples for each part of the match separately.</p>
</div>
<span class="comment-copy">You <i>could</i> convert this to JSON (or to CSV, or to something else that already has a parser), but that's likely to be almost as hard as just parsing it in the first place. If you can't find a parser that works on your data with only a trivial transformation, it's better to write a parser (whether by using regex, a parser generator, explicit string processing with recursive descent, whatever).</span>
<span class="comment-copy">I like this, even though it extracts much more data than the OP asked for.</span>
<span class="comment-copy">Yup - great way of doing it - +1 - my turn to say I should have thought of this trick ;)</span>
<span class="comment-copy">Since you beat me to it, let me suggest the only piece from my answer so you can add it here and I can delete mine. If you use <code>partition</code> instead of <code>split</code>, you don't need the <code>if '=' in k</code> part.</span>
<span class="comment-copy">You could use (something like) <code>[A-Z_]+</code> rather than specifying keys exactly?</span>
<span class="comment-copy">@AndyHayden: Well, he/she said that only four specific keys were of interest.</span>
<span class="comment-copy">wonder how to separate key and value?</span>
<span class="comment-copy">@user1413449: What do you mean, they already are separated... for example <code>[item[1] for item in regex.findall(s)]</code> would give you all the values. Or <code>dict(regex.findall(s))</code> would give you a dictionary with proper key/value pairs.</span>
<span class="comment-copy">what if I only want to get value of PERSONNELID?</span>
