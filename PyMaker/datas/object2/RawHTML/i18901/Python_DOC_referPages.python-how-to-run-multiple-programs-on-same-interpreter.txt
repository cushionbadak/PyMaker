<div class="post-text" itemprop="text">
<p>How to start an always on Python Interpreter on a server?</p>
<p>If bash starts multiple python programs, how can I run it on just one interpreter?</p>
<p>And how can I start a new interpreter after tracking number of bash requests, say after X requests to python programs, a new interpreter should start.</p>
<p>EDIT: Not a copy of <a href="https://stackoverflow.com/questions/16372590/should-i-run-1000-python-scripts-at-once?rq=1">https://stackoverflow.com/questions/16372590/should-i-run-1000-python-scripts-at-once?rq=1</a></p>
<p>Requests may come pouring in sequentially</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot have new Python programs started through bash run on the same interpreter, each program will always have its own.  If you want to limit the number of Python programs running the best approach would be to have a Python daemon process running on your server and instead of creating a new program through bash on each request you would signal the daemon process to create a thread to handle the task.</p>
</div>
<div class="post-text" itemprop="text">
<p>To run a program forever in python:</p>
<pre><code>while True :
     do_work()
</code></pre>
<p>You could look at spawning threads for incoming request. Look at threading.Thread class.</p>
<p>from threading import Thread</p>
<pre><code>task = new Thread(target=do_work, args={})
task.start()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You probably want to take a look at <a href="http://docs.python.org/3/library/threading.html" rel="nofollow">http://docs.python.org/3/library/threading.html</a> and <a href="http://docs.python.org/3/library/multiprocessing.html" rel="nofollow">http://docs.python.org/3/library/multiprocessing.html</a>; <code>threading</code> would be more lightweight but only allows one thread to execute at a time (meaning it won't take advantage of multicore/hyperthreaded systems), while <code>multiprocessing</code> allows for true simultaneous execution but can be a bit less lightweight than <code>threading</code> if you're on a system that doesn't utilize lightweight subprocesses and may not be as necessary if the threads/processes spend lots of time doing I/O requests.</p>
</div>
<span class="comment-copy">how does one start a Python daemon process?</span>
<span class="comment-copy"><a href="http://en.wikipedia.org/wiki/Daemon_%28computing%29" rel="nofollow noreferrer">Daemon</a> is just a fancy name for a background process.  You can start a daemon process manually but you can also have it started automatically by your OS, the method you will use to do this depends a lot on the platform you are using.  Most Linux distributions have some variation of init.d.</span>
<span class="comment-copy">while is known to take up lot of cpu resources. Only when some function call, bash call to a python module is called, the main python program should run. something on that line</span>
<span class="comment-copy">Ah yes maybe add a time.sleep() call.</span>
<span class="comment-copy">what if the request form client side comes while its asleep?? should like some software interrupt based thing and as request is detected, calls the main .py  function to start program in the same interpreter</span>
<span class="comment-copy">If performance is that important than yes it could be an issue. I was thinking sleeping for 1 second or something. I think you can use conditional locks to wake on events, or other advanced locking mechanisms.</span>
<span class="comment-copy">thanks ill look into it</span>
