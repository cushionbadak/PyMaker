<div class="post-text" itemprop="text">
<p>using C or python (python preferred), How would i encode a binary file to audio that is then outputted though the headphone jack, also how would i decode the audio back to binary using input from the microphone jack, so far i have learned how to covert a text file to binary using python, It would be similar to RTTY communication.</p>
<p>This is so that i can record data onto a cassette tape. </p>
<pre><code>import binascii

a = open('/Users/kyle/Desktop/untitled folder/unix commands.txt', 'r')
f = open('/Users/kyle/Desktop/file_test.txt', 'w')
c = a.read()
b = bin(int(binascii.hexlify(c), 16))
f.write(b)
f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From your comments, you want to process the binary data bit by bit, turning each bit into a high or low sound.</p>
<p>You still need to decide exactly what those high and low sounds are, and how long each one sounds for (and whether there's a gap in between, and so on). If you make it slow, like 1/4 of a second per sound, then you're treating them as notes. If you make it very fast, like 1/44100 of a second, you're treating them as samples. The human ear can't hear 44100 different sounds in a second; instead, it hears a single sound at up to 22050Hz.</p>
<p>Once you've made those decisions, there are two parts to your problem.</p>
<p>First, you have to generate a stream of samples—for example, a stream of 44100 16-bit integers for every second. For really simple things, like playing a chunk of a raw PCM file in 44k 16-bit mono format, or generating a square wave, this is trivial. For more complex cases, like playing a chunk of an MP3 file or synthesizing a sound out of sine waves and filters, you'll need some help. The <a href="http://docs.python.org/3/library/audioop.html" rel="noreferrer"><code>audioop</code></a> module, and a few others in the stdlib, can give you the basics; beyond that, you'll need to search PyPI for appropriate modules.</p>
<p>Second, you have to send that sample stream to the headphone jack. There's no built-in support for this in Python. On some platforms, you can do this just by opening a special file and writing to it. But, more generally, you will need to find a third-party library on PyPI.</p>
<p>The simpler modules work for one particular type of audio system. Mac and Windows each have their own standards, and Linux has a half dozen different ones. There are also some Python modules that talk to higher-level wrappers; you may have to install and set up the wrapper, but once you do that, your code will work on any system.</p>
<hr/>
<p>So, let's work through one really simple example. Let's say you've got PortAudio set up on your system, and you've installed <a href="http://people.csail.mit.edu/hubert/pyaudio/" rel="noreferrer">PyAudio</a> to talk to it. This code will play square waves of 441Hz and 220.5Hz (just above middle C and low C) for just under 1/4th of a second (just because that's really easy).</p>
<pre><code>import binascii

a = open('/Users/kyle/Desktop/untitled folder/unix commands.txt', 'r')
c = a.read()
b = bin(int(binascii.hexlify(c), 16))

sample_stream = []
high_note = (b'\xFF'*100 + b'\0'*100) * 50
low_note = (b'\xFF'*50 + b'\0'*50) * 100
for bit in b[2:]:
    if bit == '1':
        sample_stream.extend(high_note)
    else:
        sample_stream.extend(low_note)

sample_buffer = b''.join(sample_stream)

p = pyaudio.PyAudio()
stream = p.open(format=p.get_format_from_width(8),
                channels=1,
                rate=44100,
                output=True)
stream.write(sample_buffer)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So you want to transmit digital information using audio? Basically you want to implement a <a href="http://en.wikipedia.org/wiki/Modem" rel="nofollow">MODEM</a> in software (no matter if it is pure software, it's still called modem). </p>
<blockquote>
<p>A modem (MOdulator-DEModulator) is a device that modulates an analog carrier signal to encode digital information, and also demodulates such a carrier signal to decode the transmitted information. The goal is to produce a signal that can be transmitted easily and decoded to reproduce the original digital data. Modems can be used over any means of transmitting analog signals, from light emitting diodes to radio. [wikipedia]</p>
</blockquote>
<p>There are modems everywhere you need to transmit data over an analog media, be it sound, light or radio waves. Your TV remote probably is an infrared modem. </p>
<p>Modems implemented in pure software are called <strong>soft-modems</strong>. Most soft-modems I see in the wild are using some form of <a href="http://en.wikipedia.org/wiki/Frequency-shift_keying" rel="nofollow">FSK</a> modulation:</p>
<blockquote>
<p>Frequency-shift keying (FSK) is a frequency modulation scheme in which digital information is transmitted through discrete frequency changes of a carrier wave.<a href="http://en.wikipedia.org/wiki/Modem" rel="nofollow">1</a> The simplest FSK is binary FSK (BFSK). BFSK uses a pair of discrete frequencies to transmit binary (0s and 1s) information.<a href="http://en.wikipedia.org/wiki/Frequency-shift_keying" rel="nofollow">2</a> With this scheme, the "1" is called the mark frequency and the "0" is called the space frequency. The time domain of an FSK modulated carrier is illustrated in the figures to the right. [wikipedia]</p>
</blockquote>
<p>There are very interesting applications for data transmission through atmosphere via sound waves - I guess it is what <a href="http://www.shopkick.com/" rel="nofollow">shopkick</a> uses to <a href="http://www.businessinsider.com/heres-shopkicks-special-sauce-a-box-in-every-store-that-verifies-youre-really-there-2010-8" rel="nofollow">verify user presence</a>.</p>
<p>For Python check the <a href="http://gnuradio.org/redmine/projects/gnuradio/wiki/WikiStart" rel="nofollow">GnuRadio</a> project.</p>
<p>For a C library, look at the work of <a href="http://www.soft-switch.org/" rel="nofollow">Steve Underwood</a> (but please don't contact him with silly questions). I used his soft-modem to bootstrap a <a href="http://ultranet.com.br/ultranew2/megafax.cfm?tar=megafax" rel="nofollow">FAX to email gateway</a> for <a href="http://www.asterisk.org/" rel="nofollow">Asterisk</a> (a fax transmission is not much more than a B/W <a href="http://en.wikipedia.org/wiki/Tagged_Image_File_Format" rel="nofollow">TIFF</a> file encoded in audio for transmission over a phone line).</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're looking for a library that does this, I'd recommend <a href="https://github.com/brian-armstrong/quiet" rel="nofollow">libquiet</a>. It uses an existing SDR library to perform its modulation, and it provides binaries that will offer you a pipe at one end and will feed the sound right to your soundcard using PortAudio at the other. It has GMSK for "over the air" low bitrate transmissions and QAM for cable-based higher bitrate.</p>
</div>
<span class="comment-copy">First, what is "a text file containing binary". A "text file" is a file that contains text, instead of binary data; a binary file is a file that contains binary data, instead of text.</span>
<span class="comment-copy">Second, what kind of encoding do you want? Do you want to read each byte, convert it to a decimal integer from 0-255, and synthesize a voice speaking that number? Or use each pair of bytes as a 16-bit mono sample to be played at 44.1k? Or treat the bottom 7 bits of each byte as a MIDI note number to be played at 64 notes/sec? Or what?</span>
<span class="comment-copy">Thanks for the correction, that was confusing.</span>
<span class="comment-copy">I was wanting each bit to be a high or low sound signifying a 1 or a 0</span>
<span class="comment-copy"><a href="http://dabeaz.blogspot.ru/2010/08/using-python-to-encode-cassette.html" rel="nofollow noreferrer">Converting Text into a KCS WAV File in Python</a></span>
<span class="comment-copy">that is some helpful advice i investigate that <code>audioop</code> module thoroughly.</span>
<span class="comment-copy">The decode part is the hard one... :-)</span>
<span class="comment-copy">i was wanting something a bit more simple and cheaper that does not require new hardware other than a cassette recorder.</span>
<span class="comment-copy">@kylek: you can do this with pure software, for example, using your notebook or smartphone to encode/decode the signal. That said, signal processing is not among the easiest topics in CS.</span>
<span class="comment-copy">@kylek: I'm pretty sure what Paulo Scardine is suggesting is that you can build a modem entirely in software. For example, the first popular home computer modems were just BFSK at 300 changes/second. Back then, you needed special hardware to do that fast enough to keep up—but nowadays, just using code pretty close to the sample in my answer, you can do it in a high-level language like Python with only 1% CPU.</span>
<span class="comment-copy">@kylek: Trust me, you don't want to reinvent the wheel, just use BFSK.  You may borrow some Python code from gnuradio.</span>
<span class="comment-copy">where can i learn more about BFSK</span>
