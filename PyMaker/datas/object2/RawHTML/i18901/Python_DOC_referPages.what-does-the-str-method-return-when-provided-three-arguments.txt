<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/2/library/functions.html#str" rel="nofollow">The fine manual</a> does not address what the <code>str()</code> method does when provided three arguments, as I've found in this code from <code>requests/models.py</code>:</p>
<pre><code>content = str(self.content, encoding, errors='replace') 
</code></pre>
<p>Where is this documented? What does it do?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're reading docs for version 2, but looking at code using (or matching) Python 3.</p>
<p><a href="http://docs.python.org/3/library/functions.html#func-str" rel="nofollow">The docs for version 3</a> say:</p>
<blockquote>
<pre><code>str(object='')
str(object=b'', encoding='utf-8', errors='strict')
</code></pre>
<p>Return a str version of object. See str() for details.</p>
</blockquote>
<p>Following the link the following is said about the <code>encoding</code> and <code>errors</code> keyword arguments:</p>
<blockquote>
<p>If at least one of <code>encoding</code> or <code>errors</code> is given, <code>object</code> should be a <code>bytes</code>-like object (e.g. <code>bytes</code> or <code>bytearray</code>). In this case, if <code>object</code> is a <code>bytes</code> (or <code>bytearray</code>) object, then <code>str(bytes, encoding, errors)</code> is equivalent to <code>bytes.decode(encoding, errors)</code>. Otherwise, the <code>bytes</code> object underlying the <code>buffer</code> object is obtained before calling <code>bytes.decode()</code>. </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>That's not the built-in <code>str</code> function. Look at the <a href="https://github.com/kennethreitz/requests/blob/master/requests/models.py#L27" rel="noreferrer">imports at the top</a>:</p>
<pre><code>from .compat import (
    cookielib, urlparse, urlunparse, urlsplit, urlencode, str, bytes, StringIO,
    is_py2, chardet, json, builtin_str, basestring)
</code></pre>
<p>Kenneth has defined his own <code>compat</code> module for compatibility between Python 2 and 3, and he overrides several builtins including <code>str</code>.</p>
<p>As <a href="https://github.com/kennethreitz/requests/blob/master/requests/compat.py" rel="noreferrer">you can see in that module</a>, in Python 2 it aliases <code>unicode</code> to <code>str</code>, so it pretty much works the same as the Python3 <code>str</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To add to daniel-roseman's answer here's the <a href="http://docs.python.org/2/library/functions.html#unicode" rel="nofollow">documentation and what does it do.</a>. Since <code>str</code> in the stated code represents <code>unicode</code>.</p>
</div>
<span class="comment-copy">The inbuilt <code>str</code> functions takes just one argument, may be the class in <code>models.py</code> has it's own <code>str</code> function.</span>
<span class="comment-copy">Thank you. I am running Python 2 code, so I assumed that I would need Python 2 docs. I should have stated that.</span>
<span class="comment-copy">Thank you. I find it rather problematic when people override built-in functions, for this very reason.</span>
<span class="comment-copy">I agree, but I can see why he did it in this case. The alternative approach, taken by eg Django, is to use the <code>six</code> library - but that means calling <code>six.u()</code> etc everywhere.</span>
<span class="comment-copy">Right, so long as the author expects to be the only one to work on the code. In all fairness, I knew that I was in for a world of hurt as soon as I decided "hmm, it might be a good idea to see what <i>this thing</i> is doing". The library itself is throwing Unicode errors in the application that I am writing: <code>File "/usr/lib/python2.7/dist-packages/requests/models.py", line 809, in text     content = str(self.content, encoding, errors='replace') TypeError: unicode() argument 2 must be string, not None</code>.</span>
<span class="comment-copy">Thank you for the link!</span>
