<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4675728/redirect-stdout-to-a-file-in-python">Redirect stdout to a file in Python?</a>
<span class="question-originals-answer-count">
                    11 answers
                </span>
</li>
</ul>
</div>
<p>Just wanted to pick your brains on this.  I have several subprocesses running and I wanted to print the stderr and stdout to a file.  I've done this so far:</p>
<pre><code>def write_to_stderr_log(process):
    stderr= open("stderr.log", "w")
    proc_err = process.communicate()
    print &gt;&gt; stderr, proc_err
    stderr.close()

def write_to_stdout_log(process):
    stdout = open("stdout.log", "w")
    proc_out = process.communicate()
    print &gt;&gt; stdout, proc_out
    stdout.close()

def logger():
    logger = logging.getLogger('error_testing')
    hdlr = logging.FileHandler('error.log')
    formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
    hdlr.setFormatter(formatter)
    logger.addHandler(hdlr)
    logger.setLevel(logging.WARNING)

    logger.error('We have a problem')
    logger.debug('debugging')
    logger.info('some info')

logger()
proc = subprocess.Popen(['FastTree -nt test.fasta'], bufsize=512, stdin = None, stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True) 

write_to_stderr_log(proc)
write_to_stdout_log(proc)
</code></pre>
<p>Is this the best way to do this.  If I have more than one process, I guess its going to re-write the log files, so that could be a problem.  Appreciate some advice here. Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm pretty sure that you can provide your own <code>file</code> instances as keywords to <code>subprocess.Popen</code>.</p>
<pre><code>&gt;&gt;&gt; out = open('stdout.log', 'wb')
&gt;&gt;&gt; err = open('stderr.log', 'wb')
&gt;&gt;&gt; child = subprocess.Popen('FastTree -nt test.fasta', stdin=None, stdout=out,
                             stderr=err)
&gt;&gt;&gt; rc = child.wait()
&gt;&gt;&gt; out.close()
&gt;&gt;&gt; err.close()
</code></pre>
<p>Here's the portion of the <a href="http://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow"><code>subprocess.Popen</code></a> documents that matters:</p>
<blockquote>
<p><em>stdin</em>, <em>stdout</em> and <em>stderr</em> specify the executed program’s standard input, standard output and standard error file handles, respectively. Valid values are <code>PIPE</code>, <code>DEVNULL</code>, an existing file descriptor (a positive integer), an existing <em>file object</em>, and <code>None</code>. <code>PIPE</code> indicates that a new pipe to the child should be created. <code>DEVNULL</code> indicates that the special file <code>os.devnull</code> will be used. With the default settings of <code>None</code>, no redirection will occur; the child’s file handles will be inherited from the parent. Additionally, <code>stderr</code> can be <code>STDOUT</code>, which indicates that the <code>stderr</code> data from the applications should be captured into the same file handle as for <code>stdout</code>.</p>
</blockquote>
</div>
<span class="comment-copy">@nrpeterson this one is about redirecting the output of a child process</span>
<span class="comment-copy">Ah, you have a point.  My apologies!</span>
<span class="comment-copy">That hasnt worked.  If I introduce an error on the 'FastTree' subprocess, nothing is printed to the stderr.log file.</span>
<span class="comment-copy">Try adding <code>shell=True</code> though I doubt that will have any effect.</span>
