<div class="post-text" itemprop="text">
<p>In Python 3.3.1, this works:</p>
<pre><code>i = 76

def A():
    global i
    i += 10

print(i) # 76
A()
print(i) # 86
</code></pre>
<p>This also works:</p>
<pre><code>def enclosing_function():
    i = 76
    def A():
        nonlocal i
        i += 10

    print(i) # 76
    A()
    print(i) # 86

enclosing_function()
</code></pre>
<p>But this doesn't work:</p>
<pre><code>i = 76
def A():
    nonlocal i # "SyntaxError: no binding for nonlocal 'i' found"
    i += 10

print(i)
A()
print(i)
</code></pre>
<p>The documentation for the <code>nonlocal</code> keyword <a href="http://docs.python.org/3/reference/simple_stmts.html#grammar-token-nonlocal_stmt">states</a> (emphasis added):</p>
<blockquote>
<p>The nonlocal statement causes the listed identifiers to refer to
  previously bound variables in the <strong>nearest enclosing scope</strong>. </p>
</blockquote>
<p>In the third example, the "nearest enclosing scope" just happens to be the global scope. So why doesn't it work?</p>
<h2>PLEASE READ THIS BIT</h2>
<p>I do notice that the documentation goes on to state (emphasis added):</p>
<blockquote>
<p>The [<code>nonlocal</code>] statement allows encapsulated code to
  rebind variables outside of the local scope <strong>besides the global
  (module) scope</strong>.</p>
</blockquote>
<p>but, strictly speaking, this doesn't mean that what I'm doing in the third example shouldn't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>The search order for names is LEGB, i.e Local, Enclosing, Global, Builtin.  So the global scope is not an enclosing scope.</p>
<p><strong>EDIT</strong></p>
<p>From the <a href="http://docs.python.org/3/reference/simple_stmts.html#nonlocal" rel="nofollow">docs</a>:   </p>
<blockquote>
<p>The nonlocal statement causes the listed identifiers to refer to
  previously bound variables in the nearest enclosing scope. This is
  important because the default behavior for binding is to search the
  local namespace first. The statement allows encapsulated code to
  rebind variables outside of the local scope besides the global
  (module) scope.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The answer is that the global scope does not enclose anything - it is global to everything. Use the <code>global</code> keyword in such a case.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>why is a module's scope considered global and not an enclosing one? It's still not global to other modules (well, unless you do <code>from module import *</code>), is it?</p>
</blockquote>
<p>If you put some name into <code>module</code>'s namespace; it is visible in any module that uses <code>module</code> i.e., it is global for the whole Python process.</p>
<p>In general, your application should use as few mutable globals as possible. See <a href="http://c2.com/cgi/wiki?GlobalVariablesAreBad" rel="nofollow">Why globals are bad?</a>:</p>
<ul>
<li>Non-locality</li>
<li>No Access Control or Constraint Checking </li>
<li>Implicit coupling</li>
<li>Concurrency issues</li>
<li>Namespace pollution</li>
<li>Testing and Confinement </li>
</ul>
<p>Therefore It would be bad if <code>nonlocal</code> allowed to create globals by accident. If you want to modify a global variable; you could use <code>global</code> keyword directly.</p>
<ul>
<li><code>global</code> is the most destructive: may affect all uses of the module anywhere in the program</li>
<li><code>nonlocal</code> is less destructive: limited by the outer() function scope (the binding is checked at compile time)</li>
<li>no declaration (local variable) is the least destructive option: limited by inner() function scope</li>
</ul>
<p>You can read about history and motivation behind <code>nonlocal</code> in <a href="http://www.python.org/dev/peps/pep-3104/" rel="nofollow">PEP: 3104
Access to Names in Outer Scopes</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It depends upon the Boundary cases: </p>
<p>nonlocals come with some senstivity areas which we need to be aware of. First, unlike the global statement, <strong>nonlocal</strong> names really must have previous been assigned in an enclosing def's scope when a nonlocal is evaluated or else you'll get an error-you cannot create them dynamically by assigning them anew in the enclosing scope. In fact, they are checked at function definition time before either or nested function is called</p>
<pre><code>&gt;&gt;&gt;def tester(start):
      def nested(label):
         nonlocal state   #nonlocals must already exist in enclosing def!
         state = 0
         print(label, state)
      return nested
SyntaxError: no binding for nonlocal 'state' found

&gt;&gt;&gt;def tester(start):
      def nested(label):
          global state   #Globals dont have to exits yet when declared
          state = 0      #This creates the name in the module now
          print(label, state)
      return nested

&gt;&gt;&gt; F = tester(0)
&gt;&gt;&gt; F('abc')
abc 0
&gt;&gt;&gt; state
0
</code></pre>
<p>Second, <strong>nonlocal</strong> restricts the scope lookup to just enclosing defs; nonlocals are not looked up in the enclosing module's global scope or the built-in scope outside all def's, even if they are already there:</p>
<p>for example:-</p>
<pre><code>&gt;&gt;&gt;spam = 99
&gt;&gt;&gt;def tester():
      def nested():
         nonlocal spam  #Must be in a def, not the module!
         print('current=', spam)
         spam += 1
      return nested
SyntaxError: no binding for nonlocal 'spam' found
</code></pre>
<p>These restrictions make sense once you realize that python would not otherwise generally know enclosing scope to create a brand-new name in. In the prior listing, should <strong>spam</strong> be assigned in <strong>tester</strong>, or the module outside? Because this is ambiguous, Python must resolve nonlocals at function <em>creation</em> time, not function call time.</p>
</div>
<span class="comment-copy">Your reasoning is completely understandable.  Unfortunately, sometimes (just as in many languages), some things just are the way they are, either because of backward compatibility concerns or implementation difficulties or community voting or whatever.  In this case, I think that the documentation should state more strongly that <code>nonlocal</code> <i>specifically excludes</i> the global scope.  Then you're free to disagree whether that was a good choice, but at least it would be unambiguous.</span>
<span class="comment-copy">Why not? It encloses everything.</span>
<span class="comment-copy">Because <a href="http://docs.python.org/3/reference/simple_stmts.html#nonlocal" rel="nofollow noreferrer">docs.python.org/3/reference/simple_stmts.html#nonlocal</a> says: "The statement [<code>nonlocal</code>] allows encapsulated code to rebind variables outside of the local scope <b>besides</b> the global (module) scope." (emphasis added)</span>
<span class="comment-copy">+1. Also it might be interesting noting that <code>nonlocal</code> was added to make Python's nested functions work more like canonical ("functional") closures. It's kind of a patch, and not as elegant as Javascript's or Scheme's closure scoping. What I'd like to know is <b>why is a module's scope considered global and not an enclosing one?</b> It's still not <i>global</i> to other modules (well, unless you do <code>from module import *</code>), is it?</span>
<span class="comment-copy">Nadir: yes, that's basically what I was asking as well.</span>
<span class="comment-copy">In my opinion <code>global</code> should not be used at all, except for some very exceptional cases like embedding in C where I used it once. There is always a solutions without <code>global</code> if you only try hard enough and your code will be better. So making <code>nonlocal</code> reaching out to the global scope would have been a mistake in my opinion.</span>
<span class="comment-copy">On one hand it makes sense to limit the behaviour scope of <code>nonlocal</code> not to intersect <code>global</code>'s («There should be one-- and preferably only one --obvious way to do it»). On the other side, this kind of feels inconsistent: «Special cases aren't special enough to break the rules». <code>global</code> seems a special case of <code>nonlocal</code>, to me. Though you could argue it's not, because you can import names from the module scope but not from an "enclosing", function-level scope. Python's great, but the way it handles scoping is tricky, at best.</span>
<span class="comment-copy">@NadiRSampaoli: I don't see how your comment is related to my answer that says: globals are bad therefore it would be bad if nonlocal could create a global by accident.</span>
<span class="comment-copy">It's slightly related. IMO nonlocal's behavior is separated from global because it would be redundant, not because of "globals' evilness". You say «globals are bad therefore it would be bad if nonlocal could create a global by accident». First: how is it <i>by accident</i>? Second: "accident" is disregarded in Python (Guido would say: «we're all consenting adults here»). Third: a more sensible statement would be «globals are bad therefore it would be better if there weren't globals». But this would still go against Guido's «we're all adults», not allowing us to make our choices.</span>
