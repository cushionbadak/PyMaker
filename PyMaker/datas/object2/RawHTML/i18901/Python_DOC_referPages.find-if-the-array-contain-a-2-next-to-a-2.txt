<div class="post-text" itemprop="text">
<p>I am stuck on this problem</p>
<blockquote>
<p>Given an array of ints, return True if the array contains a 2 next to a 2 somewhere.</p>
</blockquote>
<pre><code>has22([1, 2, 2]) → True
has22([1, 2, 1, 2]) → False
has22([2, 1, 2]) → False
</code></pre>
<p>I know the basic idea (there are syntax errors) but I can't implement it. I would also like to know what type of problem this is, eg. graph, search?</p>
<pre><code>def has22(nums):
for x in nums:
    if ( (nums[x] = 2) and (nums[x+1] = 2) )
        return True

return False 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def has22(nums):
    return any(x == y == 2 for x, y in zip(nums, nums[1:]))

&gt;&gt;&gt; has22([1, 2, 2])
True
&gt;&gt;&gt; has22([1, 2, 1, 2])
False
&gt;&gt;&gt; has22([2, 1, 2])
False
</code></pre>
<p>In Python 2 use: <code>from itertools import izip</code> if you want a lazy <code>zip</code></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def has22(nums):
    for x in range(len(nums)-1):
        if (nums[x] == 2) and (nums[x+1] == 2):
            return True
    return False
</code></pre>
<p>I have just corrected your code. It runs in linear time so don't see any reason to work on it further.</p>
<p>Here is the running code on codebunk. <a href="http://codebunk.com/bunk#-Ivk7Xw2blX3cIWavI17" rel="noreferrer">http://codebunk.com/bunk#-Ivk7Xw2blX3cIWavI17</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/2/library/functions.html#iter" rel="nofollow"><code>iter()</code></a>:</p>
<pre><code>&gt;&gt;&gt; def has22(lst):
...     lst = iter(lst)
...     for i in lst:
...             try:
...                 if i == 2 and lst.next() == 2:
...                     return True
...             except StopIteration:
...                     pass
...     return False
... 
&gt;&gt;&gt; has22([1, 2, 2])
True
&gt;&gt;&gt; has22([1, 2, 1, 2])
False
&gt;&gt;&gt; has22([2, 1, 2])
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would do this:</p>
<pre><code>def has22(l):
    return any(l[i]==2 and l[i+1]==2 for i in xrange(len(l)-1))
</code></pre>
<p>This uses a similar idea as the other answers, but works with a generator (as would be preferred in cases like this).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def has22(nums):
    it = iter(nums)
    return any(x == 2 == next(it) for x in it)

&gt;&gt;&gt; has22([1, 2, 2])
True
&gt;&gt;&gt; has22([1, 2, 1, 2])
False
&gt;&gt;&gt; has22([2, 1, 2])
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>enumerate()</code> to get both index as well as item, iterating over list only returns it's elements not index.</p>
<pre><code>def has22(lis):
    for i,x in enumerate(lis[:-1]):
       if x==2 and lis[i+1]==2:
           return True
    return False

&gt;&gt;&gt; has22([1, 2, 2]) 
True
&gt;&gt;&gt; has22([1, 2, 1, 2])
False
&gt;&gt;&gt; has22([2, 1, 2])
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def has22(lst):
  pos = 0 
  while True:
    try:
      next = lst.index(2, pos) + 1
    except ValueError:
      return False
    if next == pos + 1:
      return True
    pos = next    
</code></pre>
<p>This uses the idea that <code>index()</code> might be faster due to being implemented not in Python.  Didn't measure it, though.</p>
<p>Concerning your questions:  Your code suffers from not using <code>range()</code> at the <code>for</code> loop init.  The way you put it, <code>x</code> will not be the indexes but the elements of your list.  And it also suffers from using <code>=</code> for comparison (which actually just is assignment).  Use <code>==</code> for comparison.</p>
<p>This is not a graph problem, it is a simple search issue.  There are quite nifty <code>strstr</code> solutions (besides the straight-forward one) for <a href="http://en.wikipedia.org/wiki/Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm" rel="nofollow">finding strings in strings</a> (what you actually do).</p>
</div>
<div class="post-text" itemprop="text">
<p><code>def has22(nums):
  for i in range(len(nums)-1):
    if nums[i:i+2] == [2,2]:
      return True
  return False</code></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>    def has22(nums):
      if len(nums)==0:
        return False
      for i in range(len(nums)-1):
        #print nums[i:i+2]
        if nums[i:i+2]==[2,2]:
          return True
      return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def has22(nums):
    for i in range(len(nums) - 1):
        if nums[i] == 2 and nums[i + 1] == 2:
            return True
    return False
</code></pre>
<p>This was the simplest solution I came up with. </p>
<p>Using a for loop to check if the iterated number, <code>nums[i] == 2</code> "and" the one very next to it, <code>[i+1] == 2</code> as well.</p>
<p><code>(len(nums)-1)</code>: this line prevents it from going out of the range through the for loop as the <code>i+1</code> on the final loop will check out of the range.</p>
</div>
<div class="post-text" itemprop="text">
<p>Potentially the simplest solution:</p>
<pre><code>def has22(nums):
    return (2, 2) in zip(nums, nums[1:])
</code></pre>
<hr/>
<p>Suppose <code>nums == [1, 2, 2, 3, 4, 5]</code>. It then <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer">follows</a> that <code>nums[1:] == [2, 2, 3, 4, 5]</code>. The <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip()</a> function, when called as <code>zip(nums, nums[1:])</code>, zips them into an iterator of the same tuples as below:</p>
<pre><code>nums      =&gt;  [1,      2,      2,      3,      4,      5]
nums[1:]  =&gt;  [2,      2,      3,      4,      5]
zip()     =&gt;  [(1, 2), (2, 2), (2, 3), (3, 4), (4, 5)]
</code></pre>
<p>And it should be clear how <code>(2, 2) in [(1, 2), (2, 2), (2, 3), (3, 4), (4, 5)]</code> is true. This is the same result as <code>(2, 2) in zip(nums, nums[1:])</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def has22(nums):
    numbers = str(nums)
        if numbers.count('2, 2') &gt;=1:
            return True
        else:
            return False
</code></pre>
</div>
<span class="comment-copy">You have a bit of a logical error in that you can't check whether an element and the next element are both 2 for every element in the list, because the last element doesn't have a next element. It's unclear what the question is here, though. Are you asking how to fix your syntax?</span>
<span class="comment-copy">+1. <code>zip</code> to iterate in overlapping pairs is a better tool here than anything based on index manipulation.</span>
<span class="comment-copy">This is really what <code>any()</code> is for (see the solution by A. R. S.).</span>
<span class="comment-copy">Not bad, but a little hard to read: it takes more time to understand how this solution works (<code>and</code> is lazy and evaluates from the left,…), compared to the <code>zip()</code> and index solutions. Note: <code>pass</code> would be simpler as the more direct  <code>break</code>, here.</span>
<span class="comment-copy">@EOL I agree with you. <code>zip()</code> seems to be the best thing to use</span>
<span class="comment-copy">+1: Clear and simple. I still prefer the index-less <code>zip()</code> version, but this comes as a close second.</span>
<span class="comment-copy">Answered twice?</span>
<span class="comment-copy">@Haidro You are allowed to answer twice, this is a completely different answer so I don't want to mix up people who didn't vote for it :)</span>
<span class="comment-copy">@Haidro meh, some people may not like this one you never know, better keep it separate</span>
<span class="comment-copy">Silly :p. But you're choice :)</span>
<span class="comment-copy">Any reason why you didn't just write <code>x == 2 == next(it)</code> and used the <code>and</code> version instead?</span>
<span class="comment-copy">Please elaborate and improve this answer.</span>
<span class="comment-copy">While this code snippet may solve the question, <a href="//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers">including an explanation</a> really helps to improve the quality of your post. Remember that you are answering the question for readers in the future, and those people might not know the reasons for your code suggestion. Please also try not to crowd your code with explanatory comments, this reduces the readability of both the code and the explanations!</span>
<span class="comment-copy">While this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.</span>
<span class="comment-copy">Hi and welcome to StackOverflow. Consider including a short description of your code and how it solves the posted problem in order to help others understand your solution</span>
<span class="comment-copy">While this might answer the authors question, it lacks some explaining words and links to documentation. Raw code snippets are not very helpful without some phrases around it. You may also find <a href="https://stackoverflow.com/help/how-to-answer">how to write a good answer</a> very helpful. Please edit your answer.</span>
<span class="comment-copy">-1: no explanation (see above comments), invalid syntax (the indent on <code>if</code>), unidiomatic containment check (<code>'2, 2' in numbers</code> rather than <code>numbers.count('2, 2') &gt;= 1</code>), and overwrought boolean check (<code>return '2, 2' in numbers</code> rather than <code>if</code> -&gt; <code>return True</code> -&gt; <code>else</code> -&gt; <code>return False</code>)</span>
