<div class="post-text" itemprop="text">
<p>I'm building a library that will be included by other projects via pip.</p>
<p>I have the following directories ('venv' is a virtualenv):</p>
<pre><code>project
  \- bin
     \- run.py
  \- myproj
     \- __init__.py
     \- logger.py
  \- venv
</code></pre>
<p>I activate the virtualenv.</p>
<p>In bin/run.py I have:</p>
<pre><code>from myproj.logger import LOG
</code></pre>
<p>but I always get </p>
<pre><code>ImportError: No module named myproj.logger
</code></pre>
<p>The following works from the 'project' dir:</p>
<pre><code>python -c "from myproj.logger import LOG"
</code></pre>
<p>It's not correctly adding the 'project' directory to the pythonpath when called from the 'bin' directory. How can I import modules from 'myproj' from scripts in my bin directory?</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest solution is to append the parent folder as a searchable path, above the import.</p>
<pre><code>import sys,os
sys.path.append(os.path.abspath('..'))
from myproj.logger import LOG
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Install <code>myproject</code> into <code>venv</code> virtualenv; then you'll be able to import <code>myproject</code> from any script (including <code>bin/run.py</code>) while the environment is activated without <code>sys.path</code> hacks.</p>
<p>To install, create <a href="https://docs.python.org/3/distutils/setupscript.html" rel="nofollow noreferrer"><code>project/setup.py</code></a> for the <code>myproject</code> package and run from the <code>project</code> directory while the virtualenv is active:</p>
<pre><code>$ pip install -e .
</code></pre>
<p>It will install <code>myproject</code> inplace (the changes in <code>myproject</code> modules are visible immediately without reinstalling <code>myproject</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>Only the current working directory is inside the PYTHONPATH, which is used to resolved dependencies. So, if you are inside bin and execute your script, project is not in the path anymore. You have to use one of the common methods to add project to the PYTHONPATH, either by appending to the environment variable or through editing the sys.path list programmatically, as indicated in the other answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>add the path of project in the PYTHONPATH</p>
</div>
<span class="comment-copy">OK thanks. I hadn't seen that before.</span>
<span class="comment-copy">Given that OP uses virtualenv; <code>sys.path</code> manipulations are <a href="http://stackoverflow.com/a/16816683/4279">unnecessary</a> or even <a href="http://stackoverflow.com/a/14186074/4279">harmful</a>.</span>
<span class="comment-copy">I prefer to use an absolute path from the script so the script can be run from anywhere.  <code>sys.path.append(os.path.join(os.path.dirname(sys.argv[0]), '..'))</code></span>
<span class="comment-copy">Given the OP is using a virtualenv this should be the accepted answer.</span>
