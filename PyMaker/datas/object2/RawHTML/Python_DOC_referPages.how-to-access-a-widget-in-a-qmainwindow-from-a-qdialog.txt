<div class="post-text" itemprop="text">
<p>Before posting my question I searched a lot about it and I found some questions that might be similar but they do not solve my problem. I believe it is quite easy but I don't know how:</p>
<p>below is a minimal example of the problem:</p>
<pre><code>class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        #MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(574, 521)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.firstPushButton = QtWidgets.QPushButton(self.centralwidget)
        self.firstLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.firstPushButton.clicked.connect(self.showDialog)

        # the other stuff related to layout setup is ommited

    def showDialog(self):
        dialog = MyDialog(MainWindow)
        dialog.exec()

class MyDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setFixedSize(400, 200)
        self.myButton = QtWidgets.QPushButton("Write something")
        # When I click the myButton, I want it to change the text of MainWindow lineEdit
        self.myButton.clicked.connect(self.writeHello)

    def writeHello(self):
      # How can I access firstLineEdit from MainWindow? I want to write "Hello" to the firstLineEdit
      pass

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.setWindowTitle("BEM Analysis for propellers")
    MainWindow.show()
    sys.exit(app.exec())
</code></pre>
<p>Could you please tell me how can I implement <code>writeHello()</code> method in order to write something in <code>firstLineEdit</code> in the MainWindow</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all you should not modify the code generated by Qt Designer since it is not a GUI, it is just a class that fills a GUI, and that brings several inconveniences such as not being able to overwrite the methods of the widget, or some you want to use methods of the widget in that class. Instead it inherits from a suitable widget and uses the other class as an interface.</p>
<p>Going to the point you should not mix the classes since there will be a lot of dependency between them and in the future if you modify one class you will have to modify the other which is unbeatable, instead you use the signals to notify any change or action.</p>
<pre><code>from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        #MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(574, 521)
        MainWindow.setWindowIcon(QtGui.QIcon(':/icons/drone.ico'))
        MainWindow.setIconSize(QtCore.QSize(32, 32))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        MainWindow.setCentralWidget(self.centralwidget)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.firstPushButton = QtWidgets.QPushButton(self.centralwidget)
        self.firstLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.verticalLayout_2.addWidget(self.firstPushButton)
        self.verticalLayout_2.addWidget(self.firstLineEdit)

class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.setupUi(self)
        self.firstPushButton.clicked.connect(self.showDialog)

    def showDialog(self):
        dialog = MyDialog()
        dialog.clicked.connect(self.writeHello)
        dialog.exec()

    @QtCore.pyqtSlot()
    def writeHello(self):
        self.firstLineEdit.setText('Hello')

class MyDialog(QtWidgets.QDialog):
    clicked = QtCore.pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setFixedSize(400, 200)
        self.myButton = QtWidgets.QPushButton("Write something")
        # When I click the myButton, I want it to change the text of MainWindow lineEdit
        self.myButton.clicked.connect(self.clicked)
        lay = QtWidgets.QVBoxLayout(self)
        lay.addWidget(self.myButton)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    w = MainWindow()
    w.setWindowTitle("BEM Analysis for propellers")
    w.show()
    sys.exit(app.exec())
</code></pre>
</div>
<span class="comment-copy">Thank you. I decided to move to PyCharm for intellisence and I found a way by getting a reference to the line edit : <code>line_edit = self.parent().centralWidget().children()[index_of_the_line_edit]</code></span>
<span class="comment-copy">@IamNotaMathematician I understand that that is the easy solution now, but in the future it will be a headache, for example if the Ui_MainWindow has several QLineEdits How do you identify which of the QLineEdit will you have to write ?, instead with my method you should not modify anything .</span>
<span class="comment-copy">@IamNotaMathematician For a problem there are many solutions, but there are easy solutions for the moment but not maintainable like the one that you have obtained for yourself, there are solutions that are maintainable in the long term that initially involve a bit more code like mine. IMHO I prefer to implement a bit more code initially than to make modifications in other classes when some class is modified.</span>
<span class="comment-copy">@IamNotaMathematician I recommend you always ask, for example in the comments I have extended to give you a plus to what you asked, generally the most experienced users not only give a solution but we try to give a solution using the best practices.</span>
<span class="comment-copy">@IamNotaMathematician add <code>self.myButton.clicked.connect(self.accept)</code> after <code>self.myButton.clicked.connect(self.clicked)</code></span>
