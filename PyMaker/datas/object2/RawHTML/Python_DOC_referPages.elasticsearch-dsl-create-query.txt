<div class="post-text" itemprop="text">
<p><strong>Hello Everyone:</strong></p>
<p>I have been trying for a long time to replicate this query using ElasticSearch-dsl Search() class but unfortunately i have not been able to get it.</p>
<p>The query i want to replicate is :</p>
<pre><code>{
    "_source": {
            "includes": [ "SendingTime","Symbol","NoMDEntries","*"]
        },
        "from" : 0, "size" : 10000,
  "query": {
    "bool": {
      "must": [
        {
            "range": {
            "SendingTime": {
              "gte": "Oct 3, 2018 08:00:00 AM",
              "lt": "Oct 3, 2018 02:00:59 PM"
            }
          }
        }
      ]
    }
  }
}
</code></pre>
<p>Where datetimes would be replaced by a variable eventually.</p>
<p>So far the only thing i've been able to do is:</p>
<pre><code>search = Search(using=elastic_search, index="bcs-md-bmk-prod")\
    .query("bool", range= {"SendingTime" : {'gte': format_date(datetime.now() - relativedelta(days=1)), 'lt': format_date(datetime.now())}})\
</code></pre>
<p>I know i'm really far away from what i want to get, so i'd appreciate if anyone could help me.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are multiple ways to construct the same query in elasticsearch-dsl, which is for users' convenience but sometime (maybe often) makes new users more confusing.</p>
<p>Firstly, there is a one-to-one match between each raw query and elasticsearch-dsl query. For example, the following are equivalent:</p>
<pre><code># 1
'query': {
    'multi_match': {
        'query': 'whatever you are looking for',
        'fields': ['title', 'content', 'footnote']
    }
}
# 2
from elasticsearch_dsl.query import MultiMatch
MultiMatch(query='whatever you are looking for', fields=['title', 'content', 'footnote'])
</code></pre>
<p>Secondly, these pairs are equivalent in elasticsearh-dsl:</p>
<pre><code># 1 - using a class
from elasticsearch_dsl.query import MultiMatch
MultiMatch(query='whatever you are looking for', fields=['title', 'content', 'footnote'])
# 2 - using Q shortcut
Q('multi_match', query='whatever you are looking for', fields=['title', 'content', 'footnote'])
</code></pre>
<p>and</p>
<pre><code># 1 - using query type + keyword arguments 
Q('multi_match', query='elastic python', fields=['title', 'content', 'footnote'])
# 2 - using dict representation
Q({'multi_match': {'query': 'whatever your are looking for', 'fields': ['title', 'content', 'footnote']}})
</code></pre>
<p>and</p>
<pre><code># 1 - using Q shortcut
q = Q('multi_match', query='whatever your are looking for', fields=['title', 'content', 'footnote'])
s.query(q)
# 2 - using parameters for Q directly
s.query('multi_match', query='whatever your are looking for', fields=['title', 'content', 'footnote'])
</code></pre>
<p>Now, if we recall the structure of a <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html" rel="nofollow noreferrer"><code>bool</code> query</a>, it consists of boolean clauses, each clause with a 'typed occurrence' (must, should, must_not, etc.). Since each clause is also a 'query' (in your case a <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html" rel="nofollow noreferrer"><code>range</code> query</a>), it follows the same pattern as a 'query', which means it can be represented by a Q shortcut.</p>
<p>So, the way I would construct your query is:</p>
<pre><code>search = Search(using=elastic_search, index="bcs-md-bmk-prod")
          .query(Q('bool', must=[Q('range', SendingTime={"gte": "Oct 3, 2018 08:00:00 AM", "lt": "Oct 3, 2018 02:00:59 PM"})]))
          .source(includes=["SendingTime","Symbol","NoMDEntries","*"])
</code></pre>
<p>Note that the first Q can be removed for simplicity, making that line:</p>
<pre><code>.query('bool', must=[Q('range', SendingTime={"gte": "Oct 3, 2018 08:00:00 AM", "lt": "Oct 3, 2018 02:00:59 PM"})])
</code></pre>
<p>but I used it so it's easier to understand. Feel free to trade off between different representations.</p>
<p>Last but not least, you can always fallback to the raw dict representation by using <code>from_dict()</code> method of <code>elasticsearch_dsl.Search</code> class when you have difficult constructing a query in elasticsearch-dsl.</p>
</div>
