<div class="post-text" itemprop="text">
<p>I am learning Javascript and just curious that we can have a variable refer to a function in JS but not in python. Everything in python is an object, and functions in JS are also objects but why do we get an error when a variable refers to a function. </p>
<p>My assumption was that we should be able to assign a function to a variable as in JS because they are objects in both the cases.</p>
<pre><code>**Javascript code**   
var add = function(a,b){
        return a+b
    };

    console.log(add(3,5)) // prints 8 in console.
</code></pre>
<p>whereas in python it gives an error as in the picture below. </p>
<p><a href="https://i.stack.imgur.com/Rwqww.png" rel="nofollow noreferrer"><img alt="error " src="https://i.stack.imgur.com/Rwqww.png"/></a> </p>
</div>
<div class="post-text" itemprop="text">
<p>The other answers are right about the basic facts: Everything, including functions, is an object, and can be assigned to a variable. But <code>def</code> is a statement, not an expression, so it doesn't have the function value, it has no value at all.</p>
<p>But <code>def</code> isn't the only way to define functions in Python. There's also <code>lambda</code>.<sup>1</sup> Which is an expression, and has the function value as a value. Because it's an expression, its body has to be an expression, which can only contain other expressions, and it returns the value of that expression. But in your example, that isn't a limitation; your whole function body is just <code>return</code>ing an expression. So:</p>
<pre><code>add = lambda a, b: a+b
</code></pre>
<p>This is considered bad style in Python. The whole point of lambda is (a) it doesn't give the function a name, and (b) it can be used inside an expression. That's great if you're just writing a throwaway callback for, e.g., a GUI button—but here, the only thing we're doing with it here is using it in an assignment expression to give it a name.</p>
<hr/>
<p>In other words, this is just a less-clear version of:</p>
<pre><code>def add(a, b): return a+b
</code></pre>
<p>That already does exactly what you want: defines a function, and assigns it to the variable name <code>add</code> in the current namespace. Plus, the <code>def</code> version gives you better introspection/reflection capabilities (e.g., <code>add.__name__</code> will be <code>add</code> instead of something useless like <code>__main__.&lt;lambda&gt;</code>). And, because it's a statement, you can put complex statements inside the body.</p>
<hr/>
<p>And, since <code>add</code> is just a normal variable name, and the function is just a normal value, of course you can also do this:</p>
<pre><code>def _add(a, b): return a+b
add = _add
del _add
</code></pre>
<p>… but again, there's no point; it's just a less clear and more verbose version of <code>def add</code> (and with the wrong <code>__name__</code> and possibly other attributes).</p>
<hr/>
<p><sub>1. For completeness, there's also a third way: you can use the <code>types.FunctionType</code> constructor, giving it a code object representing the compiled body, a globals environment, and optionally some other stuff like default values and annotations.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>You can.</p>
<pre><code>def add(x,y):
    return x + y

a = add
</code></pre>
<p>the <code>def</code> keyword is already essentially assigning the function to a variable (in this case, <code>add</code>).</p>
<p>If your question is "Why doesn't python have syntactic sugar to allow me to give a second variable reference to a function on a single line", it's mostly opinion based. You can look at <a href="https://www.python.org/dev/peps/pep-0020/" rel="noreferrer">PEP 20</a> for a thought about that, though:</p>
<blockquote>
<p>There should be one-- and preferably only one --obvious way to do it.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can assign function objects to variables in Python. However, this can not be done in a single statement, at least when using the <code>def</code> keyword. You must first define the function, then you can assign the function object to a variable: </p>
<pre><code>&gt;&gt;&gt; def add(x, y):
...     return x + y
...
&gt;&gt;&gt; a = add
&gt;&gt;&gt; a(1, 2)
3
&gt;&gt;&gt;
</code></pre>
<p>Actually, the above is really unnecessary, since Python allows you to <em>directly</em> bind function objects to variable names, which is what the <code>def</code> word does:</p>
<blockquote>
<p>A function definition is an executable statement. <strong>Its execution binds the function name in the current local namespace to a function object</strong> (a wrapper around the executable code for the function). This function object contains a reference to the current global namespace as the global namespace to be used when the function is called. <sub>(emphasis mine)</sub></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can assign functions in python to variables but not in one line</p>
<pre><code>def doit():
    print('Do something')

obj = {'myfunction': doit }

obj['myfunction']() # Do something
</code></pre>
<p>Or</p>
<pre><code>def doit():
    print('Do something')

ref = doit

ref() # Do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can assign functions to variables in python. Try this example</p>
<pre><code>def x():
    print(20)
y = x
y()
</code></pre>
<p>Output: <code>20</code></p>
</div>
<span class="comment-copy">You can...just not like that.</span>
<span class="comment-copy">You can, you just can't do it in one step. <code>def add(x, y): ...</code>, then <code>a = add</code> is fine. But a <a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">function definition</a> is a <i>statement</i>, not an <i>expression</i>, so you can't assign it to an identifier.</span>
<span class="comment-copy"><code>def add(x, y):</code> assigns a function object to the <code>add</code> variable.</span>
<span class="comment-copy">The Python equivalent to the JS code is <code>add = lambda a, b: a+b</code></span>
<span class="comment-copy">Are you sure this was not a google away?</span>
<span class="comment-copy">Downvoted because your answer adds nothing new and is basically a re-wording of the previous 3 answers.</span>
<span class="comment-copy">Upvoted because your answer adds something new and is an improved re-wording of the previous answers :)</span>
<span class="comment-copy">I didn't see Nathan's answer when I was posting mine @doubleOrt. However, I would argue that my answer does add something of value, namely my quotation from the docs.</span>
<span class="comment-copy">Well, I guess you could argue that too @Aran-Fey ;-)</span>
<span class="comment-copy">It's fine @doubleOrt. You had a reason to down-vote, and did so. I can respect that.</span>
<span class="comment-copy">Why downvote? Can someone dare to give the reason</span>
<span class="comment-copy">It's not my downvote, but I don't get why you're showing an example of storing a function in a dict and why you're using <code>//</code> for comments in python code.</span>
<span class="comment-copy">you are right about this.. I eat too much javascript and forgot to put # there</span>
<span class="comment-copy">@Aran-Fey dict example was just to make it more clear the you can save function reference anywhere</span>
<span class="comment-copy">You also don't need the semicolons.</span>
