<div class="post-text" itemprop="text">
<pre><code>def check():
    if (cond):
        how to return back to explore()
    else:
        return 1 # here return to f2

def cannot_be_modified():
    try:
        check() # inserted
        print("hello from cannot_be_modified")
        return 2
    except Exception as e:
        print(e)

def explore():
    cannot_be_modified()
    print("hello from explore")
    return 0

explore()
</code></pre>
<p>Call stack is: <code>explore() -&gt; cannot_be_modified() --&gt; check()</code></p>
<p>If I meet some conditions in <code>check</code>, I want to quit <code>check</code> and <code>cannot_be_modified</code> and come back to <code>explore</code>.
So how can I achieve this?</p>
<p>I thought about raising a specific type of exception in <code>check</code> function and catch it in <code>explore</code> but that exception can be caught in function <code>cannot_be_modified</code></p>
<p>Does anyone have ideas?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Even if it's not the most elegant solution, you may decide to raise an exception (<a href="https://docs.python.org/3/library/exceptions.html" rel="nofollow noreferrer">built-in</a> or <a href="https://stackoverflow.com/questions/1319615/proper-way-to-declare-custom-exceptions-in-modern-python">custom</a>) in your <code>check</code> function and catch that in the <code>explorer</code> function. Be sure that you're catching only your exception.</p>
<pre><code>def check():
  if True:
      raise ValueError("MyError")
  else:
      return 1 # here return to f2

def cannot_be_modified():
    check() # inserted
    print("hello from cannot_be_modified")
    return 2

def explore():
  try:
    cannot_be_modified()
  except ValueError as e:
    print(e)

  print("hello from explore")
  return 0

explore()
</code></pre>
<p>output:</p>
<pre><code>MyError
hello from explore
</code></pre>
</div>
<span class="comment-copy">Could you just return early given some condition in each function?</span>
<span class="comment-copy">This thread may help you: <a href="https://softwareengineering.stackexchange.com/questions/18454/should-i-return-from-a-function-early-or-use-an-if-statement?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa" title="should i return from a function early or use an if statement">softwareengineering.stackexchange.com/questions/18454/…</a></span>
<span class="comment-copy">Do you mean that you cannot modify the code inside <code>cannot_be_modified</code> ?</span>
<span class="comment-copy">Have you thought of using exceptions to do this? <a href="https://stackoverflow.com/questions/2052390/manually-raising-throwing-an-exception-in-python#24065533" title="manually raising throwing an exception in python%2324065533">stackoverflow.com/questions/2052390/…</a> read this first to be aware of the pitfalls in this approach but I think it will work.</span>
<span class="comment-copy">@TCouch: we can only add <code>check</code> to the <code>cannot_be_modified</code> function, cannot modify any other thing.   @ Paula Thomas: I can raise exception in <code>check</code> but it can be caught and handled by  <code>cannot_be_modified</code>  and cannot reach <code>explore</code></span>
<span class="comment-copy">Hi @Gsk: <code>cannot_be_modified</code> here does not have <code>try</code> but  <code>cannot_be_modified</code> is implemented by another party, it may have <code>try</code> and can catch exception from <code>check()</code>. Then <code>explore()</code> cannot catch that exception. I modified the <code>cannot_be_modified</code> for that case.</span>
<span class="comment-copy">have a look at how exceptions works, and try my code! you do not have to do anything with <code>cannot_be_modified</code>: if Exception are handled properly in this third-party function (i.e. there are no <code>try/except</code> catching everything) the exception will raise till your <code>explore</code> function</span>
<span class="comment-copy">if there is not <code>try/except</code> in <code>cannot_be_modified</code> function, your solution is correct but if <code>cannot_be_modified</code> has <code>try/except</code>, then <code>explore</code> cannot catch the exception from <code>check</code>. Because <code>cannot_be_modified</code> cannot be modified and implemented by a third-party, so they can arbitrarily write anything they want.</span>
