<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Question:</strong> How can one get an instance of the class <code>asyncio.subprocess.Process</code>?</p>
</blockquote>
<p>In order to replace synchronous and blocking calls to methods of an instance of <code>subprocess.Popen</code>, I want to use an instance of the <code>asyncio.subprocess.Process</code>.</p>
<p>The <a href="https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec" rel="nofollow noreferrer">documentation</a> for <code>asyncio</code> claims that this is accomplished by the function <code>asyncio.create_subprocess_exec</code>, whose arguments are more or less the same as those to the constructor for <code>subprocess.Popen</code>. In particular, the documentation claims that <code>asyncio.create_subprocess_exec</code> will:</p>
<blockquote>
<p>Return a Process instance.</p>
</blockquote>
<p>This, however, is <em>not</em> true in my experience. Like instances of the <code>subprocess.Popen</code> class, according to its documentation, instances of the <code>asyncio.subprocess.Process</code> class are supposed to have attributes like <code>pid</code> and <code>stderr</code> and methods like <code>communicate</code>.</p>
<p>Here's a complete minimal working example:</p>
<pre><code>import asyncio, subprocess

loop = asyncio.get_event_loop()

args = ['/bin/sh', '-cmd', "echo '$MONEY'"]

async def test2(args):
      proc = await asyncio.create_subprocess_exec(args, 
                                       stdin=asyncio.subprocess.PIPE,
                                       stdout=asyncio.subprocess.PIPE, 
                                       stderr=subprocess.PIPE)
      return proc

proc = test2(args)
print(proc)
type(proc)
</code></pre>
<p>These all indicate that <code>proc</code> is a coroutine. I want an instance of the <code>Process</code> class.</p>
</div>
<div class="post-text" itemprop="text">
<p>I just figured it out; I am posting my MWE here in case it helps anyone in the future, since it took me several hours to figure out. The MWE example in <a href="https://tutorialedge.net/python/concurrency/asyncio-event-loops-tutorial/#getting-started" rel="nofollow noreferrer">this tutorial</a> was helpful, as well as the suggestions in the comments.</p>
<pre><code>import asyncio, subprocess

loop = asyncio.get_event_loop()

args = '/bin/sh'

async def test2(args):
     proc = await asyncio.create_subprocess_exec(args, 
                                      stdin=asyncio.subprocess.PIPE,
                                      stdout=asyncio.subprocess.PIPE, 
                                      stderr=subprocess.PIPE)
     return proc

try:
    proc = loop.run_until_complete(test2(args))
finally:
    loop.close()
# Check that it worked
print(proc)
type(proc)
</code></pre>
</div>
<span class="comment-copy">I still don't understand why this question is so unpopular. It's straightforward and simple, i.e. it obviously has a "clear problem statement". It also gives a MWE, contrary to what the people who closed it claim. It was a genuine question which took me a very long time to figure out by myself, since no one here was willing to help me for some reason. And yet people wonder why this website has a bad reputation. It neither deserves to be closed nor does it deserve the downvotes.</span>
