<div class="post-text" itemprop="text">
<p>So I have the file <code>3D_492.png</code> and I am trying to get rid of everything <strong>but</strong> the numbers after the last underscore. How would I go about this?</p>
<p>I want <code>3D_492.png</code> to become <code>492.png</code></p>
<p>More examples:
<code>Anniversary_1_Purple_710.png</code> to become <code>710.png</code></p>
<p>They are all in the folder <code>\Images</code></p>
<p>Edit: <strong>I'm dumb and forgot to say that I would like to rename the files with the new names.</strong></p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Using split:</p>
<pre><code>filename = "3D_710.png"
# create a list of the parts of the file name separated by "_"
filename_parts = filename.split("_")
# new_file is only the last part
new_file = filename_parts[-1]
print new_file
# 710.png
</code></pre>
<p>Full example including rename, assuming <code>Images</code> is relative to the directory containing our Python script:</p>
<pre><code>from os import listdir, rename
from os.path import isfile, join, realpath, dirname

dir_path = dirname(realpath(__file__))
images_path = join(dir_path, "Images")
only_files = [f for f in listdir(images_path) if isfile(join(images_path, f))]
for file in only_files:
    filename_parts = file.split("_")
    # new_file is only the last part
    new_file = filename_parts[-1]
    rename(join(images_path, file), join(images_path, new_file))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perfect job for <a href="https://docs.python.org/3/library/stdtypes.html#str.rpartition" rel="nofollow noreferrer"><code>str.rpartition</code></a>:</p>
<pre><code>&gt;&gt;&gt; s = "3D_492.png"
&gt;&gt;&gt; start, sep, end = s.rpartition('_')
&gt;&gt;&gt; end
'492.png'
</code></pre>
<p>It is guaranteed to return three elements, which sum to the original string.  This means you can always get the 2nd element for the "tail":</p>
<pre><code>&gt;&gt;&gt; 'Anniversary_1_Purple_710.png'.rpartition('_')[2]
'710.png'
</code></pre>
<p>Putting the pieces together:</p>
<pre><code>import os
os.chdir('\Images')

for old_name in os.listdir('.'):
    new_name = old_name.rpartition('_')[2]
    if not exists(new_name):
        os.rename(old_name, new_name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is one way, using <code>os.path.basename</code> and then <code>str.split</code> to extract characters after the final underscore:</p>
<pre><code>import os

lst = ['3D_492.png', 'Anniversary_1_Purple_710.png']

res = [os.path.basename(i).split('_')[-1] for i in lst]

print(res)

['492.png', '710.png']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sounds like you just want to split on <code>_</code> and ignore everything but the last result.</p>
<pre><code>*_, result = fname.split("_")
# or:
# result = fname.split("_")[-1]
</code></pre>
<p>Renames are done using <code>os.rename</code></p>
<pre><code>for fname in fnames:  # where fnames is the list of the filenames
    *_, new = fname.split("_")
    os.rename(fname, new)
</code></pre>
<p>Note that if you want to do this with an absolute path (e.g. if <code>fnames</code> looks like <code>["C:/users/yourname/somefile_to_process_123.png", ...]</code> this will require more processing with <code>os.path.split</code>)</p>
<pre><code>for fpath in fnames:
    *dir, basename = os.path.split(fpath)
    *_, newname = basename.split("_")
    newpath = os.path.join(dir[0], newname)
    os.rename(fpath, newpath)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a regular expression to search for the digits preceding the extension.</p>
<pre><code>import re

def update_name(name):
    return re.search(r'\d+\..*', name).group()

update_name('3D_492.png') # '492.png'
</code></pre>
</div>
<span class="comment-copy">This worked perfectly thank you!  <i>Thanks to everyone else for answering too.</i></span>
<span class="comment-copy">Since they only want the last result, may want to consider <code>fname.rsplit('_', 1)[1]</code> as I believe it will be slightly faster</span>
<span class="comment-copy">@chrisz could do, but it seems unnecessary (micro-optimizations, and all that). Note that indexing by 1 rather than -1 is slightly less robust (since it fails with an <code>IndexError</code> if the filename has no underscores)</span>
