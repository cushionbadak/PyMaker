<div class="post-text" itemprop="text">
<p>I am extracting text from a webpage and writing the content into a file:</p>
<pre><code>import requests
from inscriptis import get_text
from bs4 import BeautifulSoup

page = requests.get(r'http://www3.asiainsurancereview.com//News/View-NewsLetter-Article/id/42528/Type/eDaily/Technology-First-round-of-the-pre-launch-of-the-Ydentity-ICO-starts-today')
soup = BeautifulSoup(page.text, 'lxml')
html = soup.find(class_='article-wrap')
text = get_text(html.text)
print(text)

articleFile = open('test.txt', 'w')
articleFile.write(text)
articleFile.close()
</code></pre>
<p>It prints the content on screen just fine, but its giving a unicode error when writing the content into a file:</p>
<pre><code>UnicodeEncodeError                        Traceback (most recent call last)
&lt;ipython-input-67-859d4647d5eb&gt; in &lt;module&gt;()
     10 
     11 articleFile = open('test.txt', 'w')
---&gt; 12 articleFile.write(text)
     13 articleFile.close()

UnicodeEncodeError: 'cp950' codec can't encode character '\u2122' in position 51: illegal multibyte sequence
</code></pre>
<p>Upon printing the content to the console, I saw there are some trademark (TM) symbols in the article. So, I tried doing this:</p>
<p><code>text=text.encode("utf-8")</code></p>
<p>but I still get an error, albeit a different one:</p>
<pre><code>TypeError                                 Traceback (most recent call last)
&lt;ipython-input-68-3f30355ab29c&gt; in &lt;module&gt;()
     12 text=text.encode("utf-8")
     13 
---&gt; 14 articleFile.write(text)
     15 
     16 articleFile.close()

TypeError: write() argument must be str, not bytes
</code></pre>
<p>I have tried the following, but to no avail:</p>
<pre><code>text = get_text(html.text)

from unidecode import unidecode
def remove_non_ascii(text):
    return unidecode(str(text, encoding = "utf-8"))

articleFile = open('test.txt', 'w')
articleFile.write(text)
articleFile.close()
</code></pre>
<p>It gives the following error:</p>
<pre><code>TypeError                                 Traceback (most recent call last)
&lt;ipython-input-70-ff7e6a098308&gt; in &lt;module&gt;()
     20 
     21 
---&gt; 22 articleFile.write(remove_non_ascii(text))
     23 
     24 articleFile.close()

&lt;ipython-input-70-ff7e6a098308&gt; in remove_non_ascii(text)
      9 from unidecode import unidecode
     10 def remove_non_ascii(text):
---&gt; 11     return unidecode(str(text, encoding = "utf-8"))
     12 
     13 articleFile = open('test.txt', 'w')

TypeError: decoding str is not supported
</code></pre>
<p>I also tried this:</p>
<pre><code>if isinstance(text, str):
    text = text
else:
    text = text.decode(encoding)
    decoded = True

articleFile.write(text)
articleFile.close()
</code></pre>
<p>and this gives the original error (so, basically, it does nothing):</p>
<pre><code>UnicodeEncodeError                        Traceback (most recent call last)
&lt;ipython-input-71-f0c817f013af&gt; in &lt;module&gt;()
     20 
     21 
---&gt; 22 articleFile.write(text)
     23 
     24 articleFile.close()

UnicodeEncodeError: 'cp950' codec can't encode character '\u2122' in position 51: illegal multibyte sequence
</code></pre>
<p>How do I fix it?</p>
</div>
<div class="post-text" itemprop="text">
<p>I found the solution to be to open the file to write to in binary mode, and then to encode the unicode characters:</p>
<pre><code>articleFile = open('test.txt', 'wb')
text=text.encode("utf-8")
articleFile.write(text)
articleFile.close()
</code></pre>
<p>Apparently, Python can't write encoded unicode text into a file unless the file being written to is opened in binary mode.</p>
</div>
<span class="comment-copy">Exactly, encoded text is of type <code>bytes</code>, which is binary data, so writing it to a binary stream makes sense, doesn't it? But you should have a look at the <code>encoding</code> parameter of the <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer"><code>open()</code> function</a>, so you don't have to encode the strings yourself: <code>with open(filename, 'w', encoding='utf-8') as f: f.write(text)</code>. Less code â€“ less bugs.</span>
