<div class="post-text" itemprop="text">
<p>I'm trying to use <code>ctypes</code>. I'm interested in manipulating C structs containing arrays. Consider the following <code>my_library.c</code></p>
<pre><code>#include &lt;stdio.h&gt;


typedef struct {

    double first_array[10];
    double second_array[10];

} ArrayStruct;


void print_array_struct(ArrayStruct array_struct){

    for (int i = 0; i &lt; 10; i++){
        printf("%f\n",array_struct.first_array[i]);
    }

}
</code></pre>
<p>and suppose I've compiled it in a shared library <code>my_so_object.so</code> From Python I can do something like this</p>
<pre><code>import ctypes
from ctypes import *

myLib = CDLL("c/bin/my_so_object.so")


class ArrayStruct(ctypes.Structure):
    _fields_ = [('first_array', ctypes.c_int * 10), ('second_array', ctypes.c_int * 10)]

    def __repr__(self):
        return 'ciaone'


myLib.print_array_struct.restype = None
myLib.print_array_struct.argtype = ArrayStruct

my_array_type = ctypes.c_int * 10
x1 = my_array_type()
x2 = my_array_type()

a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

x1[0:9] = a[0:9]

a = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

x2[0:9] = a[0:9]

print(my_array_type)
&gt;&gt;&gt; &lt;class '__main__.c_int_Array_10'&gt;

print(x1[2])
&gt;&gt;&gt; 3

print(x2[2])
&gt;&gt;&gt; 13

x = ArrayStruct(x1, x2)

print(x.first_array[0:9])
&gt;&gt;&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>So far so good: I've created the correct types and everything seems working fine. But then:</p>
<pre><code>myLib.print_array_struct(x)
&gt;&gt;&gt; 0.000000
&gt;&gt;&gt; 0.000000 
&gt;&gt;&gt; 0.000000
&gt;&gt;&gt; 0.000000
&gt;&gt;&gt; 0.000000
&gt;&gt;&gt; 0.000000
&gt;&gt;&gt; 0.000000
&gt;&gt;&gt; 0.000000
&gt;&gt;&gt; 0.000000
&gt;&gt;&gt; 0.000000
</code></pre>
<p>I'm clearly missing something. The <code>ArrayStruct</code> type is recognized (otherwise the call <code>myLib.print_array_struct(x)</code> would throw an error) but not correctly initialized.  </p>
</div>
<div class="post-text" itemprop="text">
<p>There were 2 problems with the code (as I stated in the comment):</p>
<ul>
<li><code>print_array_struct.argtype</code> - which is incorrect</li>
<li>In <em>C</em> the arrays are <em>double</em> based, while in <em>Python</em> they are <code>ctypes.c_int</code> (<em>int</em>) based</li>
</ul>
<p>For more details, check <a href="https://docs.python.org/3/library/ctypes.html#module-ctypes" rel="nofollow noreferrer">[Python 3]: ctypes - A foreign function library for Python</a>. <br/>
I modified your <em>Python</em> code, to correct the above mistakes (and some other minor stuff).</p>
<p><em>code.py</em>:</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python3

import sys
import ctypes


DLL_NAME = "./my_so_object.so"

DOUBLE_10 = ctypes.c_double * 10

class ArrayStruct(ctypes.Structure):
    _fields_ = [
        ("first_array", DOUBLE_10),
        ("second_array", DOUBLE_10),
    ]


def main():
    dll_handle = ctypes.CDLL(DLL_NAME)
    print_array_struct_func = dll_handle.print_array_struct
    print_array_struct_func.argtypes = [ArrayStruct]
    print_array_struct_func.restype = None

    x1 = DOUBLE_10()
    x2 = DOUBLE_10()
    x1[:] = range(1, 11)
    x2[:] = range(11, 21)
    print([item for item in x1])
    print([item for item in x2])
    arg = ArrayStruct(x1, x2)
    print_array_struct_func(arg)


if __name__ == "__main__":
    print("Python {:s} on {:s}\n".format(sys.version, sys.platform))
    main()
</code></pre>
<p><strong>Output</strong>:</p>
<blockquote>
<pre><code>[cfati@cfati-ubtu16x64-0:~/Work/Dev/StackOverflow/q050447199]&gt; python3 code.py
Python 3.5.2 (default, Nov 23 2017, 16:37:01)
[GCC 5.4.0 20160609] on linux

[1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]
[11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0]
1.000000
2.000000
3.000000
4.000000
5.000000
6.000000
7.000000
8.000000
9.000000
10.000000
</code></pre>
</blockquote>
</div>
<span class="comment-copy">Note #1: You have <code>double</code> (<i>C</i>) vs <code>int</code> (<i>Python</i>). Also, it's: <code>myLib.print_array_struct.argtypes = [ArrayStruct]</code></span>
<span class="comment-copy">This totally worked! I feel both grateful and ashamed :D you can add it as an answer if you want, I'll vote for it</span>
