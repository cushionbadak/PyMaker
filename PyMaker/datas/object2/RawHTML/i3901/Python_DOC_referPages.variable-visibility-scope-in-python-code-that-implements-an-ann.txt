<div class="post-text" itemprop="text">
<p>I am self-implementing an artificial neural network (ANN) using an example code of [1]. While it is in principle clear to me how the ANN code works (I have done it in other languages before) I have more a problem with the python syntax/logic: 
In line 181 the network is trained in 10 000 interations but how is the progress saved because the function "backpropagate" (line 39) does not return the network and the variable "network" seems also not to be global variable? Also in the function "backpropagate" the variable "network" is not updated but I guess this is because the running variables such as "output_neuron" (line 48) are by reference? But that still does not explain how "network" saves its progress outside of "backpropagate"?</p>
<p>[1] <a href="https://github.com/joelgrus/data-science-from-scratch/blob/master/code-python3/neural_networks.py" rel="nofollow noreferrer">https://github.com/joelgrus/data-science-from-scratch/blob/master/code-python3/neural_networks.py</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You should probably start with more <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">basic code</a>.</p>
<p>This demonstrates what happens</p>
<pre><code>&gt;&gt;&gt; def modify(lst):
...     lst.append('element')
... 
&gt;&gt;&gt; network = []
&gt;&gt;&gt; network
[]
&gt;&gt;&gt; modify(network)
&gt;&gt;&gt; network
['element']
&gt;&gt;&gt; modify(network)
&gt;&gt;&gt; network
['element', 'element']
</code></pre>
<p><code>network</code> is a mutable object and modified in place within <code>backpropagate()</code>. There is no <code>return</code> necessary. You can think of it as pass-by-reference (technically speaking there is no pass-by-value as such in Python - see <a href="https://robertheaton.com/2014/02/09/pythons-pass-by-object-reference-as-explained-by-philip-k-dick/" rel="nofollow noreferrer">this blog post</a>).</p>
</div>
