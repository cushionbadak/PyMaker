<div class="post-text" itemprop="text">
<p>I am trying to investigate threading by looking for primes in lists of random values.  I expected to find that using threading made this faster but the times for threaded and un-threaded are the same. Is this because I have implemented this incorrectly?  How can I demonstrate the benefits of threading using an example like this?</p>
<pre><code>import time
import threading
from math import sqrt
from random import randint

def findPrimes(aList):
    for testValue in aList:
        isPrime = True
        for i in range(2,int(sqrt(testValue)+1)):
            if testValue % i == 0:
                isPrime = False
        if isPrime:
            #print(testValue)
            pass

testValues1 = []
testValues2 = []
for i in range(1000):
    testValues1.append(randint(10,100))
    testValues2.append(randint(10,100))


t = time.process_time()
findPrimes(testValues1)
findPrimes(testValues2)
print('The long way',time.process_time() - t) # runs in 0.006 to 0.007


t = time.process_time()
thread1 = threading.Thread(target=findPrimes(testValues1))
thread2 = threading.Thread(target=findPrimes(testValues2))
thread1.start()
thread2.start()
print('The threading way',time.process_time() - t) # also runs in 0.006 to 0.007
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Threads in Python are only useful for IO-bound operations due to the Global Interpreter Lock (GIL) which essentially forces Python operations to occur in lockstep, never actually concurrently.</p>
<p>(However, threads that do IO, e.g. talk to a remote server or access files, can and usually are faster than no threads.)</p>
<p>See <a href="https://stackoverflow.com/questions/2846653/how-to-use-threading-in-python">How to use threading in Python?</a> for solutions such as using the <code>multiprocessing</code> module instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>Threads aren't run concurrently... The concept of threading is that a particular thread is able to share cpu clock cycle with a number of other threads which can appear to mimic concurrent behaviour but they don't run parallel</p>
</div>
<span class="comment-copy">Why would you expect this to go faster?  That is, what is there about this problem that would benefit from threading?</span>
<span class="comment-copy">The tests are way too short for any sort of statistical meaningfulness between the two. In addition, you need to call <code>thread1.join()</code> and <code>thread2.join()</code> before measuring the time elapsed, or you'll be measuring nothing at all, as the threads will still be running.</span>
<span class="comment-copy">Threading will not speed up your code due to the <a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow noreferrer"><b>dreaded GIL</b></a>. Read more in <a href="https://stackoverflow.com/a/18114882/7553525"><b>this answer</b></a> and see <a href="https://stackoverflow.com/a/44525554/7553525"><b>this answer</b></a> for a speed-up demonstration using <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer"><code>multiprocessing</code></a>.</span>
<span class="comment-copy">"Concurrently" may not mean what you think it means.  Python threads do run <a href="https://en.wikipedia.org/wiki/Concurrent_computing" rel="nofollow noreferrer">concurrently</a>, but the GIL prevents them from running in <i><a href="https://en.wikipedia.org/wiki/Parallel_computing" rel="nofollow noreferrer">parallel</a></i>.</span>
