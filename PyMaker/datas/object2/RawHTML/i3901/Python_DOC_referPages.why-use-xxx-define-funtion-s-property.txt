<div class="post-text" itemprop="text">
<p>I am new python here. I have a question.The code just like this:</p>
<pre><code>def get(path):
    '''
    Define decorator @get('/path')
    '''
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kw):
            return func(*args, **kw)
        wrapper.__method__ = 'GET'
        wrapper.__route__ = path
        return wrapper
    return decorator
</code></pre>
<p>This is a decorator,I don't understand </p>
<p>"</p>
<pre><code>  wrapper.__method__ = 'GET'
     wrapper.__route__ = path
</code></pre>
<p>"<code>__xxx__</code>" generally used to define special methods and properties, why the code define function's property use the style? Isnâ€™t this not advocating?
And can dynamically add attributes to functions as well as dynamically adding attributes to a class?
Thx so much~</p>
</div>
<div class="post-text" itemprop="text">
<p>There are really two questions here: one about assigning arbitrary attributes to functions, and another about assigning special/double underscore (dunder)/magic attributes.</p>
<p>Assigning attributes to functions is perfectly fine. According to the <a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>Functions are first-class objects.</p>
</blockquote>
<p>This does not automatically mean that you can assign attributes to them, but it is a good indication. Functions objects have a <a href="https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy" rel="nofollow noreferrer">writable <code>__dict__</code></a><sup>1</sup>, which is what makes setting attributes possible. This is an intentional and frequently-used feature. The following SO question elaborates on the subject: <a href="https://stackoverflow.com/q/338101/2988730">Python function attributes - uses and abuses</a>.</p>
<p>The issue with the code shown is with the improper use of dunder attributes. Basically, using dunder attributes for anything other than officially documented use is a <a href="https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers" rel="nofollow noreferrer">bad idea</a>:</p>
<blockquote>
<p><em>Any</em> use of <code>__*__</code> names, in any context, that does not follow explicitly documented use, is subject to breakage without warning.</p>
</blockquote>
<p>There are two particular problems here. The main issue is that adding undocumented dunder attributes can potentially conflict with the normal callable attributes setup by <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer"><code>functools.wraps</code></a> (listed in the <a href="https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy" rel="nofollow noreferrer">Data Model</a><sup>1</sup>). The secondary issue is that adding dunder attributes may add undesirable behaviors to the object in certain cirsumstances, since they are used as flags by the interpreter.</p>
<p>There are a number of alternative naming conventions to be aware of, some of which would have been more appropriate than a dunder method:</p>
<ul>
<li>For example, renaming <code>__method__</code> to <code>_method</code> would make it "private by convention", since Python does not really recognize the concept of <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow noreferrer">privacy</a> as such. </li>
<li>A modified version of <code>_method</code> would be <code>_method_</code>. This is a convention that is used by the builtin <a href="https://docs.python.org/3/library/enum.html#supported-sunder-names" rel="nofollow noreferrer"><code>enum</code></a> package exactly to avoid clobbering reserved names.</li>
<li>Using a plain name is of course always fine: <code>method</code> instead of <code>__method__</code>.</li>
<li>A naming scheme that would <strong>not</strong> work would be <code>__method</code>. This triggers <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow noreferrer">name mangling</a> by the interpreter, so the name would be inaccessible as such by the caller. This would be a much worse idea than just using dunder names, which would cause no real problems for any interpreter that I am aware of at the moment.</li>
</ul>
<p><strong>TL;DR</strong></p>
<p>Assigning attributes to a function is quite useful and fully supported. Assigning to dunder attributes, however, is questionable at best.</p>
<hr/>
<p><sup>1</sup> Scroll down to "Callable Types"</p>
</div>
<span class="comment-copy">If you're new to Python, you're looking at entirely the wrong kind of Python code.</span>
<span class="comment-copy">Thank you. I just do not understand why the code add function's property like this style. Double underscore beginning and ending generally used for special variables?Just like <b>name</b> or <b>init</b></span>
<span class="comment-copy">Yes, a function is a first class object with attributes you can set and modify somewhat freely. At the same time, making custom dunder attributes is specifically frowned upon by the language, so whoever wrote this code was counting on no conflicting changes being introduced to Python itself. Don't do stuff like that. But generally adding attributes to functions is perfectly fine.</span>
<span class="comment-copy">@lee. Double underscore (dunder) attributes are all explicitly reserved by the language.</span>
<span class="comment-copy">Got it. Thank you much.You just helped me a lot~ @Mad Physicist</span>
<span class="comment-copy">good work~ @Mad Physicist</span>
<span class="comment-copy">@Lee. Please select the answer if it fulfills your  needs</span>
