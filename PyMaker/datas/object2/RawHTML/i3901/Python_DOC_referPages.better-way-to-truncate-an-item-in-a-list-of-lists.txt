<div class="post-text" itemprop="text">
<p>I have a long list of lists where the first element in a list is a long string and I need to truncate to a shorter string.<br/>
I am currently iterating through the lists twice.  Once to shorted the first element and the second to format for output:</p>
<pre><code>for i in range(len(prefData)):
    temp = prefData[i][0]
    temp = temp[:40]
    prefData[i][0] = temp

for row in prefData:
    print('formatting strings'.format(*row))
</code></pre>
<p>Is there a way to just iterate through the list once and include a truncating step in the second iteration?  I want to change the list elements in place and not just truncate for output.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>row</code> is a list and you can update it without an extra indexing step or temporary variable</p>
<pre><code>for row in prefData:
    row[0] = row[0][:40]
    print('formatting strings {} {} {}'.format(*row))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For loop is quite a slow process. You can truncated each row on a fly, by reformating <code>prefData</code>.</p>
<p>Something like this:</p>
<pre><code>prefData = [ [r[0][:40]]+r[1:] for r in prefData]
</code></pre>
<p>It usually works much faster than for loop.</p>
</div>
<span class="comment-copy">Can't you just assign back to self instead of doing this odd <code>temp</code> dance?</span>
<span class="comment-copy">There's still a for loop in your example...</span>
<span class="comment-copy">@jhpratt I believe it is the <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a>, not a loop :\ Somehow in python they work very differently.</span>
