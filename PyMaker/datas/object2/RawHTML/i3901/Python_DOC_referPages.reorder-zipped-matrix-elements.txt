<div class="post-text" itemprop="text">
<p>I have two matching size matrices in a spreadsheet of variable size, one with data items and another flagging items enabled for processing. After zipping the items they are not in a convenient order to process. How are items zipped so I have item and enable together?</p>
<p>Expecting to just <code>zipper = zip(output, doit)</code> but it failed badly as shown in output. </p>
<p>Expected output and zipped matrices are shown below.</p>
<pre><code>from __future__ import print_function
from openpyxl import Workbook
wb = Workbook()
ws = wb.active

rows = [
    ['Number', 'Batch 1', 'Batch 2'],
    [2, 40, 30],
    [3, 40, 25],
    [4, 50, 30],
    [5, 30, 10],
]
enabled = [
    [0, 0, 0],
    [0, 1, 0],
    [1, 1, 0],
    [0, 0, 1],
    [0, 1, 0],
]

for row in rows:
    ws.append(row)
output = []
for i, row in enumerate(ws['B1:C5']):
    output.append([])
    for cell in row:
        output[i].append(cell.value)

for row in enabled:
    ws.append(row)
doit = []
for i, row in enumerate(ws['A6:B10']):
    doit.append([])
    for cell in row:
        doit[i].append(cell.value)

zipper = zip(output, doit)
print(zipper)

for i in range(len(output[0])):
    print("&gt;&gt;Do column")
    for j in range(len(output)):
        if doit[j][i]:
            print(output[j][i])
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[([u'Batch 1', u'Batch 2'], [0, 0]), ([40, 30], [0, 1]), ([40, 25], [1, 1]), ([50, 30], [0, 0]), ([30, 10], [0, 1])]
&gt;&gt;Do column
40
&gt;&gt;Do column
30
25
10
</code></pre>
<p>I was expecting zipper to look like:</p>
<pre><code>[
[(0, u'Batch 1'), (0, u'Batch 2')]
[(0, 40), (1, 30)]
[(1, 40), (1, 25)]
[(0, 50), (0, 30)]
[(0, 30), (1, 10)]
]
</code></pre>
<p>No success with:</p>
<pre><code># Flatten
zipper = zip(sum(output, []), sum(doit, []))
# Reassemble array
y = zip(*[iter(zipper)]*2)
print(list(y))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this should work</p>
<pre><code>zipper = [[(a, c), (b, d)] for [a, b], [c, d] in zip(output, doit)]
inverse_zipper = [[(c, a), (d, b)] for [a, b], [c, d] in zip(output, doit)]
</code></pre>
<p>as a replacement to your old line</p>
<pre><code>zipper = zip(output, doit)
</code></pre>
<hr/>
<p><strong>standard types</strong></p>
<p><code>[]</code> indicates a <code>list</code> and <code>()</code> a <code>tuple</code>. the docs for python types are <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">here</a>. the main difference is that tuples are immutable. here i just respected you desired output</p>
<hr/>
<p><strong>list comprehension</strong></p>
<pre><code>zipper = [[(a, c), (b, d)] for [a, b], [c, d] in zip(output, doit)]
</code></pre>
<p>is equivalent to</p>
<pre><code>zipper = []
for [a, b], [c, d] in zip(output, doit):
    zipper.append([(a, c), (b, d)])
</code></pre>
<hr/>
<p><strong>unpacking</strong></p>
<p>unpacking is sort of a quick assignment. <code>a, b = [4,7]</code> is equivalent to </p>
<pre><code>some_list = [4,7]
a = some_list[0]
b = some_list[1]
</code></pre>
<p>both assign 4 to a and 7 to b</p>
<p>you know the output of <code>zip(output, doit)</code> is <code>[([u'Batch 1', u'Batch 2'], [0, 0]), ([40, 30], [0, 1]), ([40, 25], [1, 1]), ([50, 30], [0, 0]), ([30, 10], [0, 1])]</code>
so if you do <code>for row in zip(output, doit):</code>, <code>row</code> will be in the form of <code>([40, 30], [0, 1])</code> which can be unpacked as <code>[a, b], [c, d]</code>
you can make that assignment directly in your for statement which gives <code>for [a, b], [c, d] in zip(output, doit)</code></p>
</div>
<span class="comment-copy">Can you reduce your code to what are you trying to <code>zip</code> and what would you like as outcome?</span>
<span class="comment-copy">Updated. This is about the minimum to show the matrices in the spreadsheet and the ineffective zip outcome. Feel free to edit question as long as it allows processing enabled cells.</span>
<span class="comment-copy">Very simple. Can you explain how to implement it? I assume this replaces all of the code after the <code>zipper =</code> but I don't understand how to get the required output and if it generates or requires the expected zipper.</span>
<span class="comment-copy">@flywire is my answer clearer now?</span>
<span class="comment-copy">The solution is nice. I'm old time basic/fortran/pascal/cobol. I've been through a few tutorials and python Lists, Arrays, Tuples and Dictionaries are still bastardised arrays to me. I understand the <code>zipper =</code> and <code>zip(output, doit)</code> part of the line but not the rest. I get the idea it is for each row reorder the zip output. Can you explain how it works? I'm not clear on the difference between [] and () either.</span>
<span class="comment-copy">My example reversed the zip elements and your answer doesn't. I actually need ... <code>zip(doit, output)</code>...</span>
<span class="comment-copy">Very explicit answer which you pulled together at the end and supported with a very useful reference. Thanks for the fishing lesson!</span>
