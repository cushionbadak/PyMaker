<div class="post-text" itemprop="text">
<p>I need to prevent a python script from running more than once. So far I have: </p>
<pre><code>import fcntl
def lockFile(lockfile):
    fp = open(lockfile, 'w')
    try:
        fcntl.flock(fp, fcntl.LOCK_EX | fcntl.LOCK_NB)
    except IOError:
        return False

    return True

if not lockFile("myfile.lock"):
    sys.exit(0)
</code></pre>
<p>Problem is the sys.exit() never gets called even if the file is there. Maybe this is a platform dependent way of doing things? I just need to write a lockfile, check for its existence and if it's not there or stale, create a new one. Ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>Writing a file will create a new file if none exist; you could instead try to read the file first: if there is none, an error is raised and a file a file written; if there is a file, the program exits.</p>
<pre><code>try:
    with open('lockfile.txt', 'r') as f:
        lock = f.readline().strip().split()
        if lock[0] == 'locked':
            print('exiting')
            sys.exit(0)

except FileNotFoundError:
    with open('lockfile.txt', 'w') as f:
        f.write('locked')

    print('file written')


if __name__ == '__main__':

    pass
</code></pre>
<p>If you need something more sophisticated, you could look up the <a href="https://docs.python.org/3/library/atexit.html" rel="nofollow noreferrer">atexit</a> module</p>
</div>
<div class="post-text" itemprop="text">
<p>You can check if you file exists by using <code>os.path.exists</code> (<a href="https://docs.python.org/3/library/os.path.html#os.path.exists" rel="nofollow noreferrer">docs here</a>). If it does, then you can use the <code>sys.exit</code> you mentioned before. If you need something more than <code>sys.exit</code>, try the <code>atexit</code> module <a href="https://stackoverflow.com/a/50421717/5645103">@Reblochon</a> suggested. The script will then assume the file is ready to lock and the method will report its success back to the user via a boolean.</p>
<pre><code>import os
import sys

import fcntl

FILE_NAME = 'myfile.lock'

def lockFile(lockfile):
    fp = open(lockfile, 'w') # create a new one
    try:
        fcntl.flock(fp, fcntl.LOCK_EX | fcntl.LOCK_NB)
        success = True # the file has been locked
    except IOError:
        success = False # an error occurred
    fp.close() # make sure to close your file
    return success

if os.path.exists(FILE_NAME): # exit the script if it exists
    sys.exit(0)

print('success', lockFile(FILE_NAME))
</code></pre>
</div>
<span class="comment-copy">Is there an error message you get when you remove the try-except clauses and just call the lock?</span>
<span class="comment-copy">Nope, no errors. Lock file gets written if it's not there.</span>
<span class="comment-copy">and if it is there, what do you want to do?</span>
<span class="comment-copy">If it's there I don't want the script to run.</span>
