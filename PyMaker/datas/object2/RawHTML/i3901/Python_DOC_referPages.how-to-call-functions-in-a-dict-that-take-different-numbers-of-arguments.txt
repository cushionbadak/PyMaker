<div class="post-text" itemprop="text">
<p>I want to have a <code>dict</code> of functions, but some of the functions take more arguments than others.</p>
<pre><code>"1":func1, # This takes 0 arguments
"2":func2 # This takes 1 argument `
</code></pre>
<p>I don't know how to call the function through the <code>dict</code>. Am I supposed to have an <code>if</code> statment or is there something I am missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming this setup:</p>
<pre><code>def foo():
    print('foo')

def bar(a):
    print('bar %s' % a)

def spam(a, b):
    print('spam %s %s' % (a, b))

functions = dict(foo=foo, bar=bar, spam=spam)
</code></pre>
<p>Here is what you can do:</p>
<pre><code>import inspect

for func in functions.values():
    num_args = len(inspect.signature(func).parameters)
    args = [1, 2, 3]
    func(*args[:num_args])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>You can make all the functions take a list of arguments.</p>
<pre><code>[arg1, arg2] or [] # empty, etc...
</code></pre></li>
<li><p>You could also store the number of arguments in the dict values.</p>
<pre><code>"1": (func1, 0), etc...
</code></pre></li>
</ol>
<p>Then you can call the functions like,</p>
<pre><code>dictionary["1"]([arg1, arg2]) # Or with other implementation style you used.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Store the functions in the dictionary, and call the functions with the correct number of arguments.  Nothing special needs to be done.</p>
<pre><code>def func1():
   print("Function 1 - no args")

def func2(a):
   print("Function 2 got arg", a)

def func3(r, g="green", b="blue"):
   print("Function 3 got %r, %r and %r" % (r,g,b))

d = { "1": func1,
      "2": func2,
      "3": func3 }

d["1"]()
d["2"]("Hello")
</code></pre>
<p>You can even <code>inspect</code> the functions in the dictionary, to get the method's signature (positional arguments and keyword arguments, and default values).</p>
<pre><code>import inspect

f = d["3"]
sig = inspect.signature(f)
ba = sig.bind("red", g="gray")
ba.apply_defaults()
f(*ba.args, **ba.kwargs)
</code></pre>
<p>Output:</p>
<blockquote>
<p>Function 1 - no args<br/>
  Function 2 got arg Hello<br/>
  Function 3 got 'red', 'gray' and 'blue'</p>
</blockquote>
</div>
<span class="comment-copy">it is probably possible by calling exec(), but maybe there is a better way? Can you provide more details about what you are actually trying to achieve?</span>
<span class="comment-copy">You are aware of <code>f(*args)</code> syntax?</span>
<span class="comment-copy">What determines the arguments you want to <i>pass</i> to the various functions when one is called?</span>
<span class="comment-copy">We should combine our answers.  Nice demonstration of retrieving and using the number of parameters.</span>
<span class="comment-copy">Thank you! that really helped me!</span>
<span class="comment-copy">You could just use the <code>*</code> syntax to pass arbitrary numbers of arguments: <code>dictionary["1"](*args)</code>, where <code>args</code> is a list of the arguments.</span>
<span class="comment-copy">@Feodoran Of course, after the correct implementation, both calling methods can be used. It depends on how the programmer stores his/her arguments.</span>
<span class="comment-copy">I think OP's problem is that when they're writing the code, they don't know which function will be called, hence the dictionary. Your answer assumes that the functions are accessed statically, e.g. <code>d["1"]</code> instead of <code>d[some_key]</code>.</span>
<span class="comment-copy">@AlexHall  I didn't think it was much of a stretch to go from <code>d["1"]()</code> to <code>d[func_name]()</code>.  The question of which, and how many arguments to pass really needs clarification from the OP.  But using <code>sig.bind(...)</code>, which returns <a href="https://docs.python.org/3/library/inspect.html#inspect.BoundArguments" rel="nofollow noreferrer"><code>BoundArguments</code></a> allows the function to provide default values for arguments which aren't specified, could simplify the problem some what.</span>
<span class="comment-copy">But <code>d[func_name]()</code> won't work if <code>func_name = "3"</code>. And I don't see how the bound arguments help.</span>
<span class="comment-copy">@AlexHall  But I only called <code>func_name = "3"</code> with 2 arguments ... well, one argument and one keyword argument ... it defaulted the third.</span>
