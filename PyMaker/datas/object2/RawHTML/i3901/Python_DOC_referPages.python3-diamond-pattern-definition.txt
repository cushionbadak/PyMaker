<div class="post-text" itemprop="text">
<p>I write down my code as follow but, my teacher said I have to return the pattern. I used print() and I have no idea for this. Please help me. </p>
<pre><code>def diamond(num):

    a = 1
    b = int((num - 1) / 2)
    c = num - 2
    d = 1
    for i in range(0, int((num - 1) / 2)):
        print( " " * b + a * "*")
        a += 2
        b -= 1
    if num % 2 == 1:
        print("*" * num)
        for i in range(0, int((num - 1) / 2)):
            print( " " * d + c * "*")
            c -= 2
            d += 1
    else:
        print("*" * (num - 1))
        print("*" * (num - 1))
        c = num - 3
        for i in range(0, int((num - 1) / 2)):
            print( " " * d + c * "*")
            c -= 2
            d += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm <em>deliberately</em> not going to write the code for you, but instead giving you pointers as to how you can solve the problem on your own.</p>
<p>Currently, your function uses multiple <code>print()</code> function calls to write lines to the console. Your teacher wants you to return those lines, as a single value, to the caller of the function.</p>
<p>There are two problems you must overcome:</p>
<ol>
<li>you must collect all those lines you are now printing into a single string to return.</li>
<li>you must add the newlines that <code>print()</code> would add, manually.</li>
</ol>
<p>The easiest way to do this is to use a list, to which you append each string you are printing.</p>
<ul>
<li>Put a new variable at the top of your function, assign an empty list. A name like <code>lines</code> would probably be a good idea.</li>
<li>Append each line you are now printing, to that list. The list type has a method to append a value to it, you can trivially replace all the <code>print()</code> calls with that method.</li>
<li>At the end of the function, use a single string method to <em>concatenate</em> all the values in the list into one long string. You specify a string to put between the values, if you use the <code>'\n'</code> string then Python will use a newline character (<code>\...</code> is an escape sequence, <code>\n</code> produces a <em>newline</em> character)</li>
<li>return the resulting single string.</li>
</ul>
<p>You can find the methods needed for this in the <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer"><em>Built-in Types</em> documentation</a>.</p>
<p>You could also use a string variable at the top, then concatenating each string you now print, to that variable, adding a newline each time. But experienced programmers use a list instead, because that's <em>cheaper</em> for a computer program to process. Concatenating a string to another string requires the computer to create a whole new copy for the result, so it has to read all the characters of the old string, all the characters of the concatenated string, and then create a copy of all those characters to put into a new string. You then do the same for the next string you concatenate, but now the result is longer still. You end up making a lot of copies of those initial characters.</p>
<p>Appending a value to a list doesn't have to make a copy, on the other hand, and you then only have to create a copy of all the characters in all the strings in the list <em>once</em> to create the output. In terms of <a href="https://devopedia.org/algorithmic-complexity" rel="nofollow noreferrer"><em>algorithmic complexity</em></a>, repeatedly concatenating a string takes O(n**2) time (for <em>n</em> strings, concatenating takes <em>quadradic</em> time, add one more string and the time doubles), while appending those same strings to a list only takes O(n) time (for <em>n</em> strings, adding one more takes <em>linear</em> time, add one more string and the time grows proportionally).</p>
<p>For a half a dozen strings, the difference is not going to be noticeable, but when your program has to process thousands of lines, things can get out of hand quickly. Concatenating a thousand strings in a loop can take a thousand times more time than adding those same strings to a list first, then joining them together afterwards. It quickly becomes obvious why programmers have to care about these little details.</p>
</div>
<span class="comment-copy">use  <code>yield</code> instead of <code>print</code> and iterate</span>
<span class="comment-copy">What pattern are you trying to produce?</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre: I'm not sure that's a good first technique to learn when you are struggling with print vs return..</span>
<span class="comment-copy">Thanks but I must use "return"...</span>
<span class="comment-copy">spoilsport - now I would feel bad to post my solution :/ +1 to yours.</span>
<span class="comment-copy">another fantastic answer by Martijn-  perhaps another hint would be:  return ''.join(list)</span>
<span class="comment-copy">@TimothyLombard: <i>At the end of the function, use a single string method to concatenate all the values in the list into one long string.</i></span>
<span class="comment-copy">@TimothyLombard: and you want to use a newline character, not an empty string.</span>
<span class="comment-copy">or use something along the lines of <code>print(*diamonds(width), sep = '\n')</code> which decomposes the list into single parameters to print and prints them with a seperator that makes linebreaks between them ....</span>
