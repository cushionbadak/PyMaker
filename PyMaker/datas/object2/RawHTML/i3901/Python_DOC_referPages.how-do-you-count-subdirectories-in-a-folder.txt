<div class="post-text" itemprop="text">
<p>I figured out how to count directories in a folder, but not sure how I could edit my code to recursively count subdirectories. Any help would be appreciated.</p>
<p>This is my code so far.</p>
<pre><code>def nestingLevel(path):
    count = 0
    for item in os.listdir(path):
        if item[0] != '.':
            n = os.path.join(path,item)
            if os.path.isdir(n):
                count += 1 + nestingLevel(n)
    return count
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you may want to use <a href="https://docs.python.org/3/library/os.html#os.walk" rel="noreferrer">os.walk</a>:</p>
<pre><code>import os

def fcount(path):
    count1 = 0
    for root, dirs, files in os.walk(path):
            count1 += len(dirs)

    return count1

path = "/home/"
print fcount(path)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to count them all without the root, this will do it:</p>
<pre><code>len([i for i, j, k in os.walk('.')])-1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a glob here - the <code>**</code> pattern indicates a recursive glob.  The trailing slash matches on directories, excluding other types of files.</p>
<pre><code>from pathlib import Path

def recursive_subdir_count(path):
    dirs = Path(path).glob('**/')
    result = sum(1 for dir in dirs)
    result -= 1  # discount `path` itself
</code></pre>
<p>Using <code>/</code> works on windows, macOS, and Linux, so don't worry about putting <code>os.sep</code> instead.</p>
<p><strong><em>Beware of a weird edge case:</em></strong> shell globs typically exclude hidden directories, i.e. those which begin with a <code>.</code>, but <code>pathlib</code> includes those (it's a feature, not a bug: see <a href="https://bugs.python.org/issue26096" rel="nofollow noreferrer">issue26096</a>). If you care about discounting hidden directories, filter them out in the expression when calling <code>sum</code>. Or, use the older module <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer"><code>glob</code></a> which excludes them by default.</p>
</div>
<span class="comment-copy"><code>count = len([d for d in os.listdir(path) if os.path.isdir(d)])</code>. If you need to go deeper, look into <code>os.walk</code></span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/os.html#os.walk" rel="nofollow noreferrer">Walk the tree</a>, you must: <code>os.walk()</code>.</span>
<span class="comment-copy">Also, unlike some other languages, <code>os.listdir()</code> does not return <code>.</code> or <code>..</code>, so you don't need to check for that.</span>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/os.path.html#os.path.split" rel="nofollow noreferrer"><code>os.path.split()</code></a> and use the length of the sequence it returns to determine the count.</span>
<span class="comment-copy">Any comment from downvoter?</span>
<span class="comment-copy">I didn't downvote but I think I'd lead with pathlib, especially since you say it's more performant, '.' instead of <code>path</code>, and use <code>rglob('')</code> instead of <code>glob('**/')</code>. and you might give an example and print the directories to illustrate that <code>.</code> is an included directory.</span>
<span class="comment-copy">@AaronHall  I've just edited to remove the <code>glob</code> example, since it doesn't really offer any advantage over <code>pathlib</code>. And I'll have to disagree that <code>rglob</code> is preferable here - yielding dirs when using the empty pattern is not obvious at all to me. In contrast, putting a trailing slash for matching dirs is familiar from shells.</span>
