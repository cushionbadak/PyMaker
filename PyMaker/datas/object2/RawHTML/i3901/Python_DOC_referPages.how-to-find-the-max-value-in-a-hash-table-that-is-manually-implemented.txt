<div class="post-text" itemprop="text">
<p>Hi I'm new to Python and I implemented a hash table that counts the number of occurences of a letter in a word.</p>
<p>For example the hash table currently stores this:</p>
<pre><code>{l:1, r:1, t:1, u:1, a:1, c:1, d:2, e:1, }
</code></pre>
<p>I want to find the max value in the hash table, which is 2. I implemented an iterator so I can iterate through the hash table.  I managed to find the max value like this:</p>
<p>EDIT: I implemented a hashtable class with the set item, get item functions.</p>
<pre><code>class HashTableQuadratic:

def __init__(self, size=10):
    self.count = 0
    self.table_size = size
    self.array = build_array(self.table_size)
    self.collision=0
    self.totalProbeLength=0

 //some code here


tempList=[]
for item in hashTable:
if item!=None:
    tempList.append(item[1])
maxNum=max(tempList)
print(maxNum)
</code></pre>
<p>But is there a better way to do it without using a tempList and max built in function?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>hashTable</code> object appears to be an iterable of key-value pairs.</p>
<p>First, not that your four lines of code:</p>
<pre><code>tempList=[]
for item in hashTable:
if item!=None:
    tempList.append(item[1])
</code></pre>
<p>… is equivalent to a one-liner comprehension:</p>
<pre><code>tempList = [item[1] for item in hashTable if item is not None]
</code></pre>
<p>And it's trivial to turn this into a lazy iterator, instead of building a list in memory:</p>
<pre><code>it = (item[1] for item in hashTable if item is not None)
</code></pre>
<p>And you can inline this directly in the <code>max</code> call:</p>
<pre><code>maxNum = max(item[1] for item in hashTable if item is not None)
</code></pre>
<hr/>
<p>As a side note, notice that I used <code>item is not None</code> instead of <code>item != None</code>. You almost <em>never</em> want to compare to <code>None</code> with <code>==</code> or <code>!=</code>. The rule of thumb is:</p>
<ul>
<li>If you want any truthy value, use <code>if item</code>.</li>
<li>If you want any non-<code>None</code> value, use <code>if item is not None</code>.</li>
<li>If you want any non-<code>None</code> value, while specifically allowing other classes to override <code>__eq__</code> and compare as equal to <code>None</code>, use <code>if item != None</code>.</li>
</ul>
<hr/>
<p>However, it's worth noting that if you want to build a custom hash table, you probably want it to act like a dict—or at least like a <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping" rel="nofollow noreferrer"><code>Mapping</code></a>. Implementing the <code>Mapping</code> interface is very easy, and it means your object can duck-type as a dict.</p>
<p>And, if you do that, you can use the same code you'd use with a dict:</p>
<pre><code>maxNum = max(hashTable.values())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming your class is the same as <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>,  you can simply use <code>max</code> this way:</p>
<pre><code>max(hashTable.items(), key=lambda item: item[1])
</code></pre>
<p>This will return <code>('d', 2)</code> with your example. You may simplify it if you're not interested in knowing which key has the max value.</p>
<p>We pass all items as <code>(key, value)</code> pairs, and use the <code>key</code> argument of <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max</code></a> to tell it to compare items by value.</p>
</div>
<span class="comment-copy">You mean you re-implemented python's <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>?</span>
<span class="comment-copy">Showing us the <code>__init__</code> method of your class doesn't really tell us anything useful. Showing us the interface of the class might be useful, on the other hand.</span>
<span class="comment-copy">First, I think the OP's custom class isn't the same as <code>Counter</code>, or even like a dict, or his existing code wouldn't work. It seems to act like an iterable of key-value pairs rather than an iterable of keys, so I assume there's no <code>items()</code> method. But, then again, you don't <i>need</i> the <code>items()</code> method; you can just use <code>hashTable</code> itself.</span>
<span class="comment-copy">Second, he seems to only want the count, not the pair. Which you could do <code>max(hashTable, key=lambda item: item(1))[1]</code>, but I think it's more readable to just do <code>max(item[1] for item in hashTable)</code>.</span>
<span class="comment-copy">@abarnert the interface is somewhat different, but in essence the functionality is exactly that of <code>Counter</code>. Even the stated purpose, at the beginning of his question is <i>“count the number of occurrences of a letter in a word”</i>, and the sample output is exactly what you would get out of <code>Counter('cddelrtua')</code>. I would put the different interface just on the account of not being used to conforming to standard python idioms, not intended design.</span>
<span class="comment-copy">Agreed on the count though. I read that one so much, and it ends in <i>"great I have the count, how do I know which key it was?"</i> so often I just jump to that. Which is incorrect when the count really was it.</span>
