<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/23852480/assigning-value-in-python-dict-copy-vs-reference">assigning value in python dict (copy vs reference)</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I don't understand these cases:</p>
<pre><code>content = {'a': {'v': 1}, 'b': {'v': 2}}
d1 = {'k1': {}}
d2 = {'k2': {}}
d1['k1'].update(content)
print(d1)
content['a']['v'] = 3
content['b']['v'] = 4
d2['k2'].update(content)
print(d2)
print(d1)
&gt;&gt;&gt; {'k1': {'a': {'v': 1}, 'b': {'v': 2}}}
&gt;&gt;&gt; {'k2': {'a': {'v': 3}, 'b': {'v': 4}}}
&gt;&gt;&gt; {'k1': {'a': {'v': 3}, 'b': {'v': 4}}}
</code></pre>
<p>In the case above the content of d1 is changed after the variable <em>content</em> is updated.</p>
<pre><code>content = {'a': 1, 'b': 2}
d1 = {'k1': {}}
d2 = {'k2': {}}
d1['k1'].update(content)
print(d1)
content['a'] = 3
content['b'] = 4
d2['k2'].update(content)
print(d2)
print(d1)
&gt;&gt;&gt; {'k1': {'a': 1, 'b': 2}}
&gt;&gt;&gt; {'k2': {'a': 3, 'b': 4}}
&gt;&gt;&gt; {'k1': {'a': 1, 'b': 2}} 
</code></pre>
<p>However in this case d1 is <strong>not</strong> altered even if the variable <em>content</em> was changed. I don't understand why... any idea?</p>
</div>
<div class="post-text" itemprop="text">
<p>see <a href="https://docs.python.org/3/library/copy.html" rel="noreferrer">shallow vs deep</a> copy.</p>
<p>The copy here is a shallow copy so the first level entries are copies but the nested structures are references.</p>
<blockquote>
<ul>
<li>A <strong>shallow copy</strong> constructs a new compound object and then (to the    extent possible) inserts references into it to the objects
  found in    the original. </li>
<li>A <strong>deep copy</strong> constructs a new compound object and then,    recursively, inserts copies into it of the objects found in the<br/>
  original.</li>
</ul>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The key difference between your two snippets is that <code>content['a']['v'] = 3</code> is a completely different operation than <code>content['a'] = 3</code>. In the first case, you're <em>modifying</em> the inner dictionary by changing its <code>v</code> key. In the latter case, you're <em>replacing</em> the value in the dictionary without <em>modifying</em> it.</p>
<p>It's confusing when everything's a dictionary, so let's replace the dictionaries with variables and instances of a class:</p>
<pre><code>class Person:
    def __init__(self, name):
        self.name = name

# these two variables are represent your `content` dict
a = Person('Andy')  # this variable represents `{'v': 1}`
b = Person('Belle')  # this variable represents `{'v': 2}`

# the equivalent of `d1['k1'].update(content)` is a simple assignment
k1_a = a

# and the equivalent of `content['a']['v'] = 3` is changing a's name
a.name = 'Aaron'

# because k1_a and a are the same Person instance, this is reflected in k1_a:
print(k1_a.name)  # output: Aaron
</code></pre>
<p>The key points to note here are that</p>
<ol>
<li><code>k1_a = a</code> doesn't make a copy of the Person; similar to how <code>d1['k1'].update(content)</code> doesn't make a copy of the <code>{'v': 1}</code> dict.</li>
<li><code>a.name = 'Aaron'</code> <em>modifies</em> the Person; similar to how <code>content['a']['v'] = 3</code> modifies the inner dict.</li>
</ol>
<p>The equivalent of your 2nd snippet looks like this:</p>
<pre><code>a = 'Andy'
b = 'Belle'

k1_a = a

a = 'Aaron'

print(k1_a)  # output: Andy
</code></pre>
<p>This time, no object is ever <em>modified</em>. All we're doing is overwriting the value of the <code>a</code> variable, exactly how <code>content['a'] = 3</code> overwrites the value of the <code>a</code> key in your dict.</p>
<hr/>
<p>If you don't want the changes in the inner dicts to be reflected in other dicts, you have to copy them with <a href="https://docs.python.org/3/library/copy.html#copy.deepcopy" rel="nofollow noreferrer"><code>copy.deepcopy</code></a>:</p>
<pre><code>import copy

content = {'a': {'v': 1}, 'b': {'v': 2}}
d1 = {'k1': {}}
d2 = {'k2': {}}
d1['k1'].update(copy.deepcopy(content))
print(d1)
content['a']['v'] = 3
content['b']['v'] = 4
d2['k2'].update(copy.deepcopy(content))
print(d2)
print(d1)

# output:
# {'k1': {'a': {'v': 1}, 'b': {'v': 2}}}
# {'k2': {'a': {'v': 3}, 'b': {'v': 4}}}
# {'k1': {'a': {'v': 1}, 'b': {'v': 2}}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If we replace the <code>update()</code> with a simple assignment:</p>
<pre><code># d1['k1'].update(content)
d1['k1'] = content
</code></pre>
<p>We get:</p>
<pre><code>{'k1': {'a': 1, 'b': 2}}
{'k2': {'a': 3, 'b': 4}}
{'k1': {'a': 3, 'b': 4}}
</code></pre>
<p>(Which is different from what <code>update</code> does in your example.) This is because <code>update</code> accepts an iterable (e.g. a dictionary) and copies the key value pairs <em>inside</em>. It's equivalent to doing:</p>
<pre><code>d1['k1'] = {k: v for k, v in content.items()}
</code></pre>
<p>And of course, the <code>int</code> values are immutables and so their reassignment does not affect the original.</p>
</div>
<span class="comment-copy">I assume all these upvotes but no comments/answers are because people also think this is strange behavior. :P</span>
<span class="comment-copy">@MateenUlhaq It's not, it has to to with the fact that <code>dict</code> is mutable object and <code>int</code> is immutable. This makes python handle them differently. Similar thing would happen if content was a <code>list</code> (mutable).</span>
<span class="comment-copy">Isn't the second example mutating a dictionary (<code>content</code>) as well?</span>
<span class="comment-copy">@MateenUlhaq No, in first example keys point to <code>dict</code> and in second they point to an <code>int</code>. What makes this confusing is the nested nature of these dictionaries but nonetheless, in the background, everything consists from a bunch of pointers that get resolved once called.</span>
<span class="comment-copy">@MateenUlhaq If I were good at explaining this I'd post an answer :)</span>
<span class="comment-copy">Please don't answer duplicates.</span>
<span class="comment-copy">I voted to close for what its worth.</span>
