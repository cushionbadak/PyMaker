<div class="post-text" itemprop="text">
<p>I have a class that uses a worker thread to offload work into the background. The class inherits threading.Thread so the class itself is the worker thread. It has a number of functions that communicate with the worker thread including shutting it down.</p>
<p>Problem now is that sometimes I get an exception in the main code and the programs exits without ever calling the worker.shutdown() method. Python then ends the main thread and waits for the worker thread to finish, which it never does.</p>
<p>How can I terminate the worker thread when the main thread dies?</p>
</div>
<div class="post-text" itemprop="text">
<p>The arguably cleaner way would be to add exception handling to your main code and call <code>worker.shutdown()</code> if an exception is caught that you consider severe enough to warrant termination of the program.</p>
<p>Another solution is to flag the worker as daemon thread before starting them (see Hannu's answer). Please be aware that this will ungracefully terminate the worker.</p>
<p>From the docs:</p>
<blockquote>
<p>Daemon threads are abruptly stopped at shutdown. Their resources (such
  as open files, database transactions, etc.) may not be released
  properly.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Set the worker thread as daemonic. </p>
<pre><code>f = threading.Thread(.....)
f.daemon = True
f.start()
</code></pre>
<p>Now your threads will be killed if your main program exits for any reason. </p>
</div>
<span class="comment-copy">How does it help you to inherit from <code>threading</code>?</span>
<span class="comment-copy">It doesn't help with anything. It's just one way of using threading.</span>
<span class="comment-copy">Adding exception handling would be difficult to ensure, require extra work for the user of my module. I was hoping more for something like atexit.register but one that works for threads.</span>
<span class="comment-copy">@GoswinvonBrederlow in that case <a href="https://docs.python.org/3/library/sys.html#sys.excepthook" rel="nofollow noreferrer">sys.excepthook</a> might be what you are looking for. Or rather overwriting sys.exceptohook</span>
<span class="comment-copy">Promising. thanks.</span>
<span class="comment-copy">That won't do the necessary cleanup that worker.shutdown() triggers since the threads are abruptly stopped at shutdown.</span>
<span class="comment-copy">At your own risk you can take a look at the OP's answer here: <a href="https://stackoverflow.com/questions/50486083/ending-non-daemon-threads-when-shutting-down-an-interactive-python-session/50487402#50487402" title="ending non daemon threads when shutting down an interactive python session">stackoverflow.com/questions/50486083/â€¦</a>   It does an override of <code>Thread.join()</code> explicitly forbidden by Python documentation, but apparently it seems to work. Maybe this could work for you as well.</span>
