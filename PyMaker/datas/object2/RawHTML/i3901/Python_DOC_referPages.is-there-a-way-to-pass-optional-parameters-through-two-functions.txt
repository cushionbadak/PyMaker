<div class="post-text" itemprop="text">
<p>Question "<a href="https://stackoverflow.com/questions/14017996/is-there-a-way-to-pass-optional-parameters-to-a-function">Is there a way to pass optional parameters to a function?</a>" describes how default keyword parameters are used.</p>
<p>I have two functions, one of which calls the other, and I want to be able to detect if the outer function was called with an optional parameter:</p>
<pre><code>def foo(x1, opt=None):
    bar(opt)

def bar(opt=5):
    print opt

if __name__ == '__main__':
    foo(1)           # Should print 5, actually prints None
    foo(2, opt=3)    # Does print 3
</code></pre>
<p>This prints:</p>
<pre><code>None
3
</code></pre>
<p>Foo() could be written with special logic to detect whether the optional parameter is passed, but is there a pythonic way to pass an optional parameter with its optionality preserved without using extra logic?</p>
<pre><code>def foo2(x1, opt=None):
    if opt is None:
        bar()
    else:
        bar(opt)
</code></pre>
<p>The default has to be defined at the inner function because it could be called directly.  I could also define the same default for inner and outer functions, but that's a bit ugly (violates DRY) when the default is more complex than an integer.</p>
</div>
<div class="post-text" itemprop="text">
<p>One thing that you could do is use the <code>**kwargs</code> syntax to allow for any keyword arguments to be passed through, and then just raise errors if there are any extra keywords that don't mean anything (or alternatively, just cleanly ignore them, though that confuses users in case they make a typo and no error occurs). In the case of cleanly ignoring them:</p>
<pre><code>def foo(x1, **kwargs):
    if "opt" in kwargs:
        bar(kwargs["opt"])
    else:
        bar()
</code></pre>
<p>Basically, the <code>**kwargs</code> lets you pass in any keyword arguments like <code>foo(opt = 3)</code>  and puts them all in a dict. The downside to this is that you cannot call it like <code>foo(3)</code>. If you want to go by placement arguments instead of keyword arguments, you can do <code>*args</code> which gives a tuple of the arguments, but then you are unable to call it with the keyword specified. You cannot do both, unfortunately.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since opt is not specified, it defaults to None as you have seen. This gives a definition to opt, and it does not remember or retain any property that it is a default value, so no, implementing logic here is mandatory for the required result. </p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps just set the default argument in both places:</p>
<pre><code>DEFAULT_OPT = 5

def foo(x1, opt=DEFAULT_OPT):
    bar(opt)

def bar(opt=DEFAULT_OPT):
    print opt 
</code></pre>
<p>Otherwise use <code>kwargs</code> which I tend to avoid for being hard to maintain:</p>
<pre><code>def foo(x1, **kwargs):
    bar(**kwargs)

def bar(opt=5, **_):
    print opt 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In <code>foo</code> you call <code>bar</code> with <code>opt</code>. This overwrites the default value of <code>opt</code> inside <code>bar</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>None is an object in Python (see <a href="https://www.pythoncentral.io/python-null-equivalent-none/" rel="nofollow noreferrer">here</a>) This means that it is a valid argument, when you pass None to bar. That's why it does not trigger the default parameter value 5. I don't know anything else in Python, which may do so.</p>
</div>
<span class="comment-copy">I'm just struggling with the question: do you have a design problem, if you need to define two different default values for inner and outer functions?</span>
<span class="comment-copy">Does this help: <a href="https://docs.python.org/3/faq/programming.html#how-can-i-pass-optional-or-keyword-parameters-from-one-function-to-another" rel="nofollow noreferrer">docs.python.org/3/faq/â€¦</a></span>
<span class="comment-copy">I think it would help if you explain the context by perhaps rephrasing your code to use meaningful function and argument names instead of <code>foo</code>, <code>x1</code>, <code>opt</code> etc. I understand literally what you're asking, but it's hard to offer opinion without understanding the actual problem you're trying to solve.</span>
<span class="comment-copy">@NPE, meaningless names are the simplest way to reproduce the problem.  The actual use case is for the inner function to produce a (very long) string given some arguments, and for the outer function to write a file containing that output given those arguments plus a filename.  To be even more specific, the contents of the string/file is an HTML5 document.</span>
<span class="comment-copy">You don't need to use <code>**kwargs</code>; <code>if opt is None: bar() else bar(opt)</code>.</span>
<span class="comment-copy">@chepner My solution allows for you to call <code>foo(None)</code> and <code>foo()</code> with different meanings.</span>
<span class="comment-copy">I was afraid that was the case, but just wanted to confirm that there was no available magic sauce.  Thanks.</span>
<span class="comment-copy">@Dave Unfortunately, I do not believe you can do reflection in a way that would work for Python.</span>
<span class="comment-copy">Yes, this is what happens. I believe OP knows that and is asking how to get around this...</span>
