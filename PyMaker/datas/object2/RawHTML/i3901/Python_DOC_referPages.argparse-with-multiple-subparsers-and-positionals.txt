<div class="post-text" itemprop="text">
<p>Let's say I have a script, <code>select_libs.py</code>, which enables you to choose which libraries to include in some build process. When running this script I want to be able to specify the library name, branch and version. Here are some use cases.</p>
<ul>
<li><code>select_libs.py</code>
<ul>
<li>Use script defaults when positionals are not defined.</li>
</ul></li>
<li><code>select_libs.py opencv stable 3.4.1</code></li>
<li><code>select_libs.py opencv stable 3.4.1 boost development 1.67.0</code></li>
</ul>
<p>So I imagine something as simple as this:</p>
<pre><code>import argparse

branches = ["legacy", "stable", "development"]

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(help='lib configuration')

opencv_parser = subparsers.add_parser("opencv")
opencv_parser.add_argument("opencv_build", choices=branches)
opencv_parser.add_argument("opencv_version", type=str)

boost_parser = subparsers.add_parser("boost")
boost_parser.add_argument("boost_build", choices=branches)
boost_parser.add_argument("boost_version",type=str)

cmd_options = parser.parse_args()
</code></pre>
<p>The first two use cases both work, but the third:</p>
<pre><code>select_libs.py opencv stable 3.4.1 boost development 1.67.0
</code></pre>
<p>produces this error:</p>
<pre><code>error: unrecognized arguments: boost development 1.67.0
</code></pre>
<p>In my head, this should work since each parser have exactly two positional arguments, so it should know that <code>boost</code> is not an argument to <code>opencv</code> and trigger the <code>boost</code> parser accordingly. Clearly I'm wrong, but what have I missed and how can I make it work as intended (if possible)?</p>
<p>My current Python version is <code>3.5.2</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Argparse is not suited for this kind of thing. <code>add_subparsers</code> assumes that exactly 1 of the sub-commands will be used, so it throws an error if you try to set both <code>opencv</code> and <code>boost</code>. And other than that, argparse has no concept of arguments being associated with other arguments.</p>
<h2>Option 1</h2>
<p>If you don't mind using keyword options instead of positional options, you can use the solution from <a href="https://stackoverflow.com/a/48511483/1222951">this answer</a>:</p>
<pre><code>argv = '-l opencv -b stable -v 3.4.1 -l boost -b development -v 1.67.0'.split()

parser = argparse.ArgumentParser()
parent = parser.add_argument('-l', '--lib', choices=['opencv', 'boost'], action=ParentAction)

parser.add_argument('-b', '--build', action=ChildAction, parent=parent)
parser.add_argument('-v', '--version', action=ChildAction, parent=parent)

args = parser.parse_args(argv)
print(args)
# output:
# Namespace(lib=OrderedDict([('opencv', Namespace(build='stable',
#                                                 version='3.4.1')),
#                            ('boost', Namespace(build='development',
#                                                version='1.67.0'))]))
</code></pre>
<h2>Option 2</h2>
<p>Use the <a href="https://docs.python.org/3/library/argparse.html#nargs" rel="nofollow noreferrer"><code>nargs</code></a> argument to make it a mix of positional and named arguments:</p>
<pre><code>argv = '-l opencv stable 3.4.1 -l boost development 1.67.0'.split()

parser = argparse.ArgumentParser()
parent = parser.add_argument('-l', '--lib', nargs=3, action='append')

args = parser.parse_args(argv)
print(args)
# output:
# Namespace(lib=[['opencv', 'stable', '3.4.1'],
#                ['boost', 'development', '1.67.0']])
</code></pre>
<h2>Option 3</h2>
<p>Parse the arguments manually:</p>
<pre><code>argv = 'opencv stable 3.4.1 boost development 1.67.0'.split()

args = {}
argv_itr = iter(argv)
for lib in argv_itr:
    args[lib] = {'build': next(argv_itr),
                 'version': next(argv_itr)}

print(args)
# output:
# {'opencv': {'build': 'stable',
#             'version': '3.4.1'},
#  'boost': {'build': 'development',
#            'version': '1.67.0'}}
</code></pre>
</div>
<span class="comment-copy">Related (dup?): <a href="//stackoverflow.com/q/48504770">argparse: Associate arguments with another argument</a></span>
<span class="comment-copy">@Aran-Fey I don't see how that is related let alone a dup?</span>
<span class="comment-copy">You can't do it with subparsers. That's why it's related, because it offers an alternative solution.</span>
<span class="comment-copy">Ah, thanks for the clarification</span>
