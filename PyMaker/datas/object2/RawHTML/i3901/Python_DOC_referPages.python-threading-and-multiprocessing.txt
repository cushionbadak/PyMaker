<div class="post-text" itemprop="text">
<p>This is my code:</p>
<pre><code>from threading import Thread
from multiprocessing import Process

def foo(x, y):
    x += 5
    y.append(5)

if __name__ == '__main__':
    x = 0
    y = []

    thread = Thread(target=foo, args=(x, y,))
    thread.start()
    thread.join()

    print 'Value of x is: ' + str(x)
    print 'Value of y is: ' + str(y)
</code></pre>
<p>When i run this code, the result is:</p>
<pre><code>Value of x is: 0
Value of y is: [5]
</code></pre>
<p>When i change the Thread into Process, the result is:</p>
<pre><code>Value of x is: 0
Value of y is: []
</code></pre>
<p>Why the +5 for x doesn't work while the append for y works?</p>
<p>And, why when i use Process both +5 and append don't work?</p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest you to read <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer" title="tutorial">tutorial</a> before asking basic questions as it will save everyone's time including yours.</p>
<p>In short, when you use <code>Thread</code>, the main thread and launched thread share the same memory space but the <code>x</code> in function <code>foo</code> is another internal <code>x</code> but not the same <code>x</code> outside. So you just change the internal <code>x</code> but not the <code>x</code> outside. Further, actually <code>y</code> is also an internal <code>y</code>, but you are changing what it points to but not itself. You can confirm this by change <code>y.append(5)</code> to <code>y = [0]</code> to see will the outside <code>y</code> change.</p>
<p>And, when you use <code>Process</code>, the main thread and launched process hold totally separate memory space.</p>
</div>
