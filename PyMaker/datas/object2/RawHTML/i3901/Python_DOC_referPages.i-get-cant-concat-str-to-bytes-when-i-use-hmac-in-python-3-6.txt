<div class="post-text" itemprop="text">
<p>I am having a weird issue. I am using Hmac to generate signature as follows:</p>
<pre><code>    data = simplejson.dumps({
    'id': user['id'],
    'username': user['username'],
    'email': user['email'],
})
# encode the data to base64
message = base64.b64encode(data.encode('utf-8'))
# generate a timestamp for signing the message
timestamp = int(time.time())
# generate our hmac signature
sig = hmac.HMAC(str(DISQUS_SECRET_KEY).encode('utf-8'),  message + ' ' + timestamp, hashlib.sha1).hexdigest()
</code></pre>
<p>when I run it I get the following error:</p>
<pre><code>    sig = hmac.HMAC(str(DISQUS_SECRET_KEY).encode('utf-8'),  
    message + ' ' + timestamp, hashlib.sha1).hexdigest()
    TypeError: can't concat str to bytes
</code></pre>
<p>It is noteworthy that the timestamp should not be base 64 encoded and the message should be. Any idea?</p>
<p>Update: </p>
<p>Here is the documentation: help.disqus.com/developer/integrating-single-sign-on please look at The message body (Base64-encoded) and Timestamp (NOT Base-64 encoded). it specfically says timestamp should not be base 64 encoded and message should be. 
Also here is their sample code which they claim it should work: github.com/disqus/DISQUS-API-Recipes/blob/master/sso/python/… but I think this may only work in python 2.x</p>
</div>
<div class="post-text" itemprop="text">
<p>Your issue stems from the fact that you're trying to concatenate types that Python natively doesn't know how to concatenate - in your case <code>bytes</code> (<code>message</code>), <code>str</code> (<code></code>) and an <code>int</code> (<code>timestamp</code>).</p>
<p>You need to convert your data to a common type (string, for example) before attempting to natively concatenate them, or you can let <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format()</code></a> do that for you:</p>
<pre><code>concatenated_payload = "{} {}".format(message, timestamp)
</code></pre>
<p>Mind you, this is still naive converting, it just doesn't inconvenience you to <code>str()</code> every argument you want to concatenate into a string. This could still fail, tho, if your <code>message</code> contains data that cannot be encoded as Unicode on Python 3.x.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the issue here is the the space character is a string, which can't be concatenated to the message which is bytes.  </p>
<p>Getting rid of the space will give you a similar issue about concatenating bytes with an Integer.  You need to get all of this data to byes before concatenating it or else concatenate everything as strings and then encode it to bytes.</p>
</div>
<span class="comment-copy">I'd recommend you to use <code>str.format()</code> and let it coerce your data types into strings, e.g.:<code>"{} {}".format(message, timestamp)</code>. Otherwise you'll have to manually match the types of the data you want to concatenate.</span>
<span class="comment-copy">I think this kind of fixed this issue though I got another issue but I am going to ask it in another thread. Please add your answer and I will accept it</span>
<span class="comment-copy">I get your point but here is the documentation: <a href="https://help.disqus.com/developer/integrating-single-sign-on" rel="nofollow noreferrer">help.disqus.com/developer/integrating-single-sign-on</a> please look at  The message body (Base64-encoded) and Timestamp (NOT Base-64 encoded). it specfically says timestamp should not be base 64 encoded and message should be. so what should I do in this case?</span>
<span class="comment-copy">Also here is their sample code which they claim it should work: <a href="https://github.com/disqus/DISQUS-API-Recipes/blob/master/sso/python/sso.py" rel="nofollow noreferrer">github.com/disqus/DISQUS-API-Recipes/blob/master/sso/python/…</a>  but I think this may only work in python 2.x</span>
<span class="comment-copy">@HamedMinaee The difference between <code>bytes</code> and <code>str</code> has nothing to do with base64 encoding. Notice also that this behaviour changed between Python 2 and Python 3. There was no <code>bytes</code> type in Python 2.</span>
