<div class="post-text" itemprop="text">
<p>I have a txt file which has numbers in pyramid format like:</p>
<pre><code>      5
    10 7
  1  3  12
</code></pre>
<p>I want to put them into a 2 dimensional array (like a regular matrix). I tried <a href="https://stackoverflow.com/questions/23839928/python-read-data-into-2-dimensional-array">the post</a>. but I want to add 0 (zero) to all missing positions. like:</p>
<pre><code>5,0,0
10,7,0
1,3,12
</code></pre>
<p>In order to do that i must know the length of the last line to create suitable 2D array.</p>
<p>How can i achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're going to be reading the file to create the 2D array, you should incorporate finding the length of the last line into creating the array so that you don't have to read the file twice.</p>
<p>I'll assume we don't know beforehand how many lines there are (meaning we don't know how long each side of the matrix is). I'll also assume your file is called <code>file.txt</code>.</p>
<p>What we want is a running list of lists. Once we've read the entire file, we can go back and add the trailing zeros. Python strings' <code>split()</code> method will be useful here, because with no arguments this method uses whitespace as a separator. Here's a simple example with your file:</p>
<pre><code>&gt;&gt;&gt; with open('file.txt') as file:
...     for line in file:
...         print(line.split())
... 
['5']
['10', '7']
['1', '3', '12']
</code></pre>
<p>The following code saves each of these lists as elements of a list called <code>rows</code>:</p>
<pre><code>rows = []
with open('file.txt') as file:
    for line in file:
        rows.append(line.split())
</code></pre>
<p>Now all that's left is to check the length of the last row, add zeros to the end of each list, and print it in the pretty format you wanted. Here's the complete solution:</p>
<pre><code>rows = []
with open('file.txt') as file:
    for line in file:
        rows.append(line.split())
size = len(rows[-1])
for i in range(len(rows)):
    rows[i] = rows[i] + ['0'] * (size - len(rows[i]))
for row in rows:
    print(','.join(row))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's no way to avoid reading the entire file in order to do what you want since the lines can all have different lengths which means you can't calculate the offset where any of them start (except the first, of course):</p>
<pre><code>def last_row_length(filename):
    lastrow = None
    with open(filename, 'r') as f:
        for lastrow in f: pass
    return len(lastrow.split()) if lastrow is not None else 0

lastrowlen = last_row_length('pyramid.txt')
print(lastrowlen)  # -&gt; 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The number of elements of the last line is the number of elements of the first line when you reverse it to read.</p>
<pre><code>line.rstrip()
</code></pre>
<p>Have you ever tried this one?</p>
</div>
<span class="comment-copy">Does the input file have leading space characters in it like you show?</span>
<span class="comment-copy">yes i have. the data is like a pyramid. but i want to convert it to a matrice(right empty spaces filled with zeros)</span>
<span class="comment-copy">thanks man it works and i accepted it. what does size = len(rows[-1]) do? i didnot understand the rows[-1]... why -1?</span>
<span class="comment-copy">If <code>n</code> is an int, <code>rows[n]</code> returns the <code>n</code>th element of <code>rows</code>. This is called <a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow noreferrer">indexing</a>. It also works from the end, using negative numbers. <code>rows[-1]</code> gets the last element of <code>rows</code>. <code>len()</code> then gets the length of that last element of <code>rows</code>.</span>
<span class="comment-copy">thanks again. thumps up for you cheers!</span>
<span class="comment-copy">If you're looking for a complete solution that creates the 2D array, see <a href="https://stackoverflow.com/a/50520595/1938859">my answer</a></span>
