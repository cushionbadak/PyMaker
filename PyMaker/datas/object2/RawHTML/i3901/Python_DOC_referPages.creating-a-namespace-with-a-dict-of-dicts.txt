<div class="post-text" itemprop="text">
<p>Currently I am using <code>json</code> to save a dict to a config file. I load this to turn it into a <code>dict</code> then turn it into a <code>SimpleNamespace</code> because I prefer dot notation to access the settings. To do this, I load it as in this example:</p>
<pre><code>import json
from types import SimpleNamespace
SETTINGS = json.load(open("config.json", 'r'))
SETTINGS = SimpleNamespace(**SETTINGS)
</code></pre>
<p>However, as I am currently loading the <code>dict</code> into a <code>SimpleNamespace</code> it is not loading the sub dicts within the config file. So for example if I do:</p>
<pre><code>SETTINGS.server_info.port
</code></pre>
<p>I get the error:</p>
<pre><code>AttributeError: 'dict' object has no attribute 'port'
</code></pre>
<p>I was wondering how I load all dicts into the namespace as name spaces so that I am able to use dot notation all the way down the dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is not necessarily to recursively apply the transformation to the data returned by <code>json.load</code>.  You can simply ask <code>json.load</code> to return <code>SimpleNamespace</code> instances instead of dictionaries by providing an <code>object_hook</code> method to the <code>json.load</code> call.  This method "will be called with the result of every JSON object decoded and its return value will be used in place of the given <code>dict</code>." (from the <a href="https://docs.python.org/2/library/json.html#encoders-and-decoders" rel="nofollow noreferrer">docs</a>).</p>
<p>The simplest <code>object_hook</code> might look like:</p>
<pre><code>def dict_to_sns(d):
    return SimpleNamespace(**d)
</code></pre>
<p>For example, given the following input:</p>
<pre><code>{
  "settings": {
    "foo": {
      "number": 4,
      "size": "large"
    },
    "bar": {
      "color": "orange",
      "widgets": [
        "gizmo",
        "gadget",
        "thing"
      ]
    }
  }
}
</code></pre>
<p>We can do the following:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; from types import SimpleNamespace
&gt;&gt;&gt; def dict_to_sns(d):
...     return SimpleNamespace(**d)
... 
&gt;&gt;&gt; with open('settings.json') as fd:
...     data = json.load(fd, object_hook=dict_to_sns)
... 
&gt;&gt;&gt; data
namespace(settings=namespace(bar=namespace(color='orange', widgets=['gizmo', 'gadget', 'thing']), foo=namespace(number=4, size='large')))
&gt;&gt;&gt; data.settings.foo
namespace(number=4, size='large')
&gt;&gt;&gt; data.settings.foo.number
4
&gt;&gt;&gt; data.settings.bar.widgets
['gizmo', 'gadget', 'thing']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You'll have to recursively apply the <code>SimpleNamespace</code> class to nested dictionaries; I prefer to use <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer"><code>@functools.singledispatch()</code></a> for such cases:</p>
<pre><code>from functools import singledispatch
from types import SimpleNamespace

@singledispatch
def wrap_namespace(ob):
    return ob

@wrap_namespace.register(dict)
def _wrap_dict(ob):
    return SimpleNamespace(**{k: wrap_namespace(v) for k, v in ob.items()})

@wrap_namespace.register(list)
def _wrap_list(ob):
    return [wrap_namespace(v) for v in ob]
</code></pre>
<p>then use this as:</p>
<pre><code>with open('config.json') as settings_file:
    SETTINGS = wrap_namespace(json.load(settings_file))
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; SETTINGS = wrap_namespace({'foo': 'bar', 'ham': {'spam': 'eggs', 'monty': [{'name': 'Eric Idle'}]}})
&gt;&gt;&gt; SETTINGS.foo
'bar'
&gt;&gt;&gt; SETTINGS.ham.monty[0].name
'Eric Idle'
</code></pre>
</div>
