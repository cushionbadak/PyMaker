<div class="post-text" itemprop="text">
<p>For this function</p>
<pre><code>def eat_dog(name, should_digest=True):
    print "ate dog named %s. Digested, too? %" % (name, str(should_digest))
</code></pre>
<p>I want to, external to the function, read its arguments and any default values attached. So for this specific example, I want to know that <code>name</code> has no default value (i.e. that it is a required argument) and that <code>True</code> is the default value for <code>should_digest</code>.</p>
<p>I'm aware of <code>inspect.getargspec()</code>, which does give me information about arguments and default values, but I see no connection between the two:</p>
<p><code>ArgSpec(args=['name', 'should_digest'], varargs=None, keywords=None, defaults=(True,))</code></p>
<p>From this output how can I tell that <code>True</code> (in the <code>defaults</code> tuple) is the default value for <code>should_digest</code>?</p>
<p>Additionally, I'm aware of the "ask for forgiveness" model of approaching a problem, but unfortunately output from that error won't tell me the name of the missing argument:</p>
<pre><code>&gt;&gt;&gt; eat_dog()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: eat_dog() takes at least 1 argument (0 given)
</code></pre>
<p>To give context (why I want to do this), I'm exposing functions in a module over a JSON API. If the caller omits certain function arguments, I want to return a specific error that names the specific function argument that was omitted. If a client omits an argument, but there's a default provided in the function signature, I want to use that default.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Python3.x</h2>
<p>In a python3.x world, you should probably use a <a href="https://docs.python.org/3/library/inspect.html#inspect.Signature" rel="noreferrer"><code>Signature</code></a> object:</p>
<pre><code>import inspect

def get_default_args(func):
    signature = inspect.signature(func)
    return {
        k: v.default
        for k, v in signature.parameters.items()
        if v.default is not inspect.Parameter.empty
    }
</code></pre>
<h2>Python2.x (old answer)</h2>
<p>The args/defaults can be combined as:</p>
<pre><code>import inspect
a = inspect.getargspec(eat_dog)
zip(a.args[-len(a.defaults):],a.defaults)
</code></pre>
<p>Here <code>a.args[-len(a.defaults):]</code> are the arguments with defaults values and obviously <code>a.defaults</code> are the corresponding default values.</p>
<p>You could even pass the output of <code>zip</code> to the <code>dict</code> constructor and create a mapping suitable for keyword unpacking.</p>
<hr/>
<p>looking at the docs, this solution will only work on python2.6 or newer since I assume that <code>inspect.getargspec</code> returns a <em>named tuple</em>.  Earlier versions returned a <em>regular tuple</em>, but it would be very easy to modify accordingly.  Here's a version which works with older (and newer) versions:</p>
<pre><code>import inspect
def get_default_args(func):
    """
    returns a dictionary of arg_name:default_values for the input function
    """
    args, varargs, keywords, defaults = inspect.getargspec(func)
    return dict(zip(args[-len(defaults):], defaults))
</code></pre>
<p>Come to think of it:</p>
<pre><code>    return dict(zip(reversed(args), reversed(defaults)))
</code></pre>
<p>would also work and may be more intuitive to some people.</p>
<hr/>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>inspect</code> module with its <a href="http://docs.python.org/library/inspect.html#inspect.getargspec" rel="nofollow noreferrer"><code>getargspec</code> function</a>:</p>
<blockquote>
<p><code>inspect.getargspec(func)</code></p>
<p>Get the <strong>names and default values of a Python functionâ€™s arguments</strong>. A <code>tuple</code> of four things is returned: <code>(args, varargs, keywords, defaults)</code>. <strong><code>args</code> is a list of the argument names</strong> (it may contain nested lists). <code>varargs</code> and <code>keywords</code> are the names of the <code>*</code> and <code>**</code> arguments or <code>None</code>. <strong><code>defaults</code> is a tuple of default argument values</strong> or <code>None</code> if there are no default arguments; if this tuple has <code>n</code> elements, they correspond to the last <code>n</code> elements listed in <code>args</code>.</p>
</blockquote>
<p>See <a href="https://stackoverflow.com/a/12627202/548696">mgilson's answer</a> for exact code on how to retrieve argument names and their default values.</p>
</div>
<div class="post-text" itemprop="text">
<p>to take care of keyword-only args (and because defaults and kwonlydefaults can be <code>None</code>):</p>
<pre><code>spec = inspect.getfullargspec(func)
defaults = dict(zip(spec.args[::-1], (spec.defaults or ())[::-1]))
defaults.update(spec.kwonlydefaults or {})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python, all the arguments with default value come after the arguments without default value. So the mapping should start from the end till you exhaust the default value list. Hence the logic:</p>
<pre><code>dict(zip(reversed(args), reversed(defaults)))
</code></pre>
<p>gives the correctly mapped defaults.</p>
</div>
<span class="comment-copy">@Tadeck -- I had to upvote yours.  I was just guessing how those could be combined until I saw your post which confirmed my suspicions.</span>
<span class="comment-copy">@Tadeck could you explain how this works? I'm a bit perplexed at what's going on.</span>
<span class="comment-copy">@skyler -- do you know the <code>zip</code> function?  What part don't you understand.  I'll happily improve the answer if you can tell me what's confusing to you.</span>
<span class="comment-copy">@mgilson I think I get it now. Args with default values cannot be interspersed with args without default values, so mapping the default values to the args list, starting at the last argument and moving backwards, correctly connects the two.</span>
<span class="comment-copy">@skyler -- Precisely.  I couldn't have stated it nicer myself.</span>
<span class="comment-copy">Yep.  +1 for pointing this out.  My original answer was written before python3.x was all that popular.  It turns out there's even a <i>better</i> way to handle this now with Signature objects (which I've added to my original answer)</span>
