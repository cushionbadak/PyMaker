<div class="post-text" itemprop="text">
<pre><code>data = [{'USA': [{'accommodations': '2 BR ','Price': 1245},
                 {'accommodations': '5 BR ','Price': 1045}]},
        {'Dubai': [{'accommodations': '2 BR | Sleeps 6','Price': 966},
                   {'accommodations': '5 BR | Sleeps 6','Price': 800}]}]
</code></pre>
<p>I want to sort above data on the basis of Price.</p>
<p>I know I have to do something like this, but I am confused because of nested dictionary and list.</p>
<pre><code> sorted(data, key=lambda k: k["Price"])
</code></pre>
<p>Also, wants an only first (i.e. minimum) value entry of a sorted list.</p>
<p>Expected output:</p>
<pre><code>data = [{'usa': {'accommodations': '5 BR ','Price': 1045}},
        {'Dubai':{'accommodations': '5 BR | Sleeps 6','Price': 800}}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Due to fairly complex data nature, you could use a <em>dict comprehension</em> (where only the lowest (based on its price) accommodation is kept for each country), inside a <em>list comprehension</em> (that iterates through all the countries):</p>
<blockquote>
<pre><code>&gt;&gt;&gt; [{k: min(v, key=lambda x: x["Price"]) for k, v in item.items()} for item in data]
[{'USA': {'accommodations': '5 BR ', 'Price': 1045}}, {'Dubai': {'accommodations': '5 BR | Sleeps 6', 'Price': 800}}]
</code></pre>
</blockquote>
<p><strong>Resources</strong>:</p>
<ul>
<li><a href="https://www.python.org/dev/peps/pep-0274" rel="nofollow noreferrer">[Python]: PEP 274 -- Dict Comprehensions</a></li>
<li><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">[Python]: List Comprehensions</a></li>
<li><a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer">[Python]: <strong>min</strong>(<em>iterable, *[, key, default]</em>)</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>This is one way using list comprehensions. Since your dictionaries contain one item each, we extract the first key and first value. Alternatively, you could use <code>next(iter(d.keys()))</code> / <code>next(iter(d.values()))</code>.</p>
<pre><code>from operator import itemgetter

# sort increasing by price
res = [{list(item.keys())[0]: sorted(list(item.values())[0], key=itemgetter('Price'))}
       for item in data]

# get lowest price
res = [{list(item.keys())[0]: min(list(item.values())[0], key=itemgetter('Price'))}
       for item in data]

print(res)

[{'USA': {'accommodations': '5 BR ', 'Price': 1045}},
 {'Dubai': {'accommodations': '5 BR | Sleeps 6', 'Price': 800}}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>min</code>:</p>
<pre><code>data = [{'USA': [{'accommodations': '2 BR ','Price': 1245},
             {'accommodations': '5 BR ','Price': 1045}]},
    {'Dubai': [{'accommodations': '2 BR | Sleeps 6','Price': 966},
               {'accommodations': '5 BR | Sleeps 6','Price': 800}]}]
final_data = [{a:min(b, key=lambda x:x['Price']) for a, b in i.items()} for i in data]
</code></pre>
<p>Output:</p>
<pre><code>[{'Usa': {'accommodations': '5 BR ', 'Price': 1045}}, {'Dubai': {'accommodations': '5 BR | Sleeps 6', 'Price': 800}}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this</p>
<pre><code>filteredData = []
for records in data:
    for country, accommodations in records.items():
        accommodations = sorted(accommodations, key=lambda k: k["Price"])
        filteredData.append({country:accommodations[0]})
</code></pre>
</div>
<span class="comment-copy">So, yes, there are <i>two</i> <code>Price</code> for each entry, so what do you want to sort byâ€¦?</span>
<span class="comment-copy">First value entry of sorted list. So you want the minimum?</span>
<span class="comment-copy">Yes, I want the minimum Price value.</span>
<span class="comment-copy">Thanks for the Resources as well...</span>
<span class="comment-copy">You're welcome! :)</span>
