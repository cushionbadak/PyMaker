<div class="post-text" itemprop="text">
<p>I'm trying to understand what's the difference between two examples.</p>
<pre><code>MORSE = [".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.",
             "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--.."]

seen = ["".join(MORSE[ord(c) - ord('a')] for c in word)
            for word in words]
</code></pre>
<p>output: <code>['--...-.', '--...-.', '--...--.', '--...--.']</code></p>
<p>and when I use the dict, it seems like use the function set().</p>
<pre><code>{"".join(MORSE[ord(c) - ord('a')] for c in word)
            for word in words}
</code></pre>
<p>output: <code>{'--...-.', '--...--.'}</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The first expression is surrounded by brackets and is a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> which produces a <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer">list object</a>. The second expression is surrounded by braces and is a <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">set comprehension</a>, which produces a <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">set</a> object containing only unique elements.</p>
<p>The <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dict comprehension</a> syntax can similarly be used to create a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dict</a>:</p>
<pre><code>{x: x+1 for x in [1,2,3]}
# {1: 2, 2: 3, 3: 4}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Curly braces (<code>{</code>, <code>}</code>) are used to create both sets and dicts, depending on whether the contents are a list of single elements or a list of <code>key: value</code> pairs.</p>
<pre><code>&gt;&gt;&gt; type({"foo", "bar"})
&lt;class 'set'&gt;
&gt;&gt;&gt; type({"foo": "bar"})
&lt;class 'dict'&gt;
</code></pre>
<p>Similarly, for comprehensions:</p>
<pre><code>&gt;&gt;&gt; words = ["foo", "bar"]
&gt;&gt;&gt; type({word for word in words})
&lt;class 'set'&gt;
&gt;&gt;&gt; type({word: index for index, word in enumerate(words)})
&lt;class 'dict'&gt;
</code></pre>
</div>
<span class="comment-copy">You have a set at the bottom, not a dict.  There is such a thing as a set comprehension</span>
<span class="comment-copy">it's behaving like a set because you are using the set comprehension syntax</span>
<span class="comment-copy">Just google... <a href="http://sthurlow.com/python/lesson06/" rel="nofollow noreferrer">sthurlow.com/python/lesson06</a></span>
