<div class="post-text" itemprop="text">
<p>I tried to use the autodocumentation of Sphinx-doc. I want to fix the following problem. At the moment, no solutions from StackOverflow worked.
Is it due to the structure of my project or the way I chose to import my modules ?</p>
<p>Given structure of files :</p>
<pre><code>project
 |_ src
 |   |_ pre_processing
 |   |     |_ fileInfo.py
 |   |
 |   |_ utils
 |         |_ folder.py
 |_ test
 |      
 |_ doc
 |   |_ doc_user
 |        |_ build
 |        |_ source
 |             |_config.py
</code></pre>
<p>Following config sys.path :</p>
<pre><code>import os
import sys
sys.path.insert(0, os.path.abspath('../../../src/'))
</code></pre>
<p>I've got some relative imports in fileInfo.py as :</p>
<pre><code>from ..utils.folder import get_files_directory
</code></pre>
<p>Terminal error</p>
<pre><code>WARNING: autodoc: failed to import module 'pre_processing.fileInfo'; the following exception was raised:
Traceback (most recent call last):

File "/home/florian-stage/miniconda/envs/gd/lib/python3.5/site-packages/sphinx/ext/autodoc/importer.py", line 140, in import_module
__import__(modname)

File "/home/florian-stage/Projet-2018/pg_georef_data-master/arbo propre/src/pre_processing/fileInfo.py", line 12, in &lt;module&gt;
from ..utils.folder import get_files_directory
ValueError: attempted relative import beyond top-level package
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems your issue has to do with the structure of your project. As <a href="https://stackoverflow.com/users/4788546/cristifati">CristiFati</a> suggested, you should have <code>__init__.py</code> files in each of your folders, including <code>project</code>. <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">The docs on packages</a> deem this necessary:</p>
<blockquote>
<p>The <strong>init</strong>.py files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path.</p>
</blockquote>
<p>For testing your code you'll need to run from some <code>main.py</code> file, since imports will be relative to the top-level folder (<code>project</code> in this case). Here's how the file structure should look:</p>
<pre><code>project
 |  __init__.py
 |  main.py
 |_ src
 |   |  __init__.py
 |   |_ pre_processing
 |   |     |  __init__.py
 |   |     |  fileInfo.py
 |   |
 |   |_ utils
 |         |  __init__.py
 |         |  folder.py
 |_ test
 |   |  __init__.py
 |      
 |_ doc
 |   |  __init__.py
 |   |_ doc_user
 |        |  __init__.py
 |        |_ build
 |             |  __init__.py
 |        |_ source
 |             |  __init__.py
 |             |  config.py
</code></pre>
<p>Then in <code>main.py</code> you should have:</p>
<pre><code>from src.pre_processing import fileInfo
</code></pre>
<p>Running <code>main.py</code> should now produce error-free output.</p>
</div>
<span class="comment-copy">Relative imports work in packages. You don't seem to have any package there (no <i>__init__.py(c)</i> file present).</span>
<span class="comment-copy">I thought with Python 3.*  we don't need it ?</span>
<span class="comment-copy">Do you name your Sphinx configuration file <code>config.py</code>? Normally the name is <code>conf.py</code>. See <a href="http://www.sphinx-doc.org/en/master/usage/configuration.html" rel="nofollow noreferrer">sphinx-doc.org/en/master/usage/configuration.html</a>.</span>
<span class="comment-copy">There is no point in adding <code>__init__.py</code> files in the doc directory, assuming that it contains a Sphinx project. A Sphinx project has a conf.py file but does not need any <code>__init__.py</code> files.</span>
