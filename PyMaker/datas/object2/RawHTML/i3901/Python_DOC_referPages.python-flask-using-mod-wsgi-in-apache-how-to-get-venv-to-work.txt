<div class="post-text" itemprop="text">
<p>I've been trying to get this to work, and have searched everywhere and read page up and page down, but doesn't seem to find an answer.</p>
<p>I have Apache with mod_wsgi and a simple test Flask application.</p>
<p>I got it working using this:
<a href="https://www.jakowicz.com/flask-apache-wsgi/" rel="nofollow noreferrer">https://www.jakowicz.com/flask-apache-wsgi/</a></p>
<p>Then I somehow found that Apache mod_wsgi used the system python and I want to use venv (<a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">https://docs.python.org/3/library/venv.html</a>).</p>
<p>My application is in a directory with the normal directory structure of the venv, but how do I get my application to use that?</p>
<p>I found this:
<a href="http://blog.dscpl.com.au/2014/09/using-python-virtual-environments-with.html" rel="nofollow noreferrer">http://blog.dscpl.com.au/2014/09/using-python-virtual-environments-with.html</a></p>
<p>But if I put in python-home my application fails.</p>
<p>A couple of questions:
How do I find the Python version that my app is using?
How do I find my mod_wsgi version?
How do I get my app to use my venv?</p>
<p>I'm new to Python and WSGI, I have mostly worked with PHP.</p>
<p>Hope someone can explain to me what to do...</p>
<p>--
Ronni</p>
</div>
<div class="post-text" itemprop="text">
<p>Continuing the discussion in the comment section of your question: </p>
<p>Assume the following directory with a virtual environment created in the folder <code>/venv</code>: </p>
<pre><code>- main.py
- /static
  - /js
  - /html
  - /css
- /venv
  - /bin
    - activate
</code></pre>
<p>To activate the virtual environment, thus using the local copy of Python (as opposed to your global copy), the following command must be used:</p>
<p><code>. /venv/bin/activate</code></p>
<p>the <code>.</code> essentially tells the terminal window that the <code>activate</code> file, located at <code>/venv/bin</code> (assuming we're in the top level of the above directory), must be executed. You'll know that the command is successful when you see the string <code>(venv)</code> at the start of a new line in your terminal window.</p>
<p>Now, the <code>which</code> command will confirm that you're now using the local copy of Python:</p>
<p><code>which python</code></p>
<p>Now your virtual environment is activated, you can use pip to install any module you wish locally to this virtual environment. You can specify to install a certain version of a module if you wish, or just grab the latest. The version of Flask or Apache that you install depends on what <em>you</em> specify when installing.</p>
<p>Lastly, the command <code>python --version</code> will tell you the version of this copy of Python 2. <code>python3 --version</code> will do the same for Python 3. Whenever you execute a script using this local copy of Python, it will be using this Python version. </p>
<p>To get Python version from within a script: </p>
<pre><code>from sys import version_info   
print version_info
</code></pre>
<p>Output (will depend on your version, but will look something like this):</p>
<pre><code>sys.version_info(major=2, minor=7, micro=13, releaselevel='final', serial=0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>How do I find the Python version that my app is using?</strong></p>
<p>See the documentation:</p>
<ul>
<li><a href="http://modwsgi.readthedocs.io/en/develop/user-guides/checking-your-installation.html#python-installation-in-use" rel="nofollow noreferrer">http://modwsgi.readthedocs.io/en/develop/user-guides/checking-your-installation.html#python-installation-in-use</a></li>
</ul>
<p>it provides you a test you can use.</p>
<p><strong>How do I find my mod_wsgi version?</strong></p>
<p>Use the <code>mod_wsgi.version</code> key from the WSGI <code>environ</code> dictionary. See reference to this in:</p>
<ul>
<li><a href="http://modwsgi.readthedocs.io/en/develop/user-guides/assorted-tips-and-tricks.html#determining-if-running-under-mod-wsgi" rel="nofollow noreferrer">http://modwsgi.readthedocs.io/en/develop/user-guides/assorted-tips-and-tricks.html#determining-if-running-under-mod-wsgi</a></li>
</ul>
<p>You can also use:</p>
<pre><code>import mod_wsgi
print(mod_wsgi.version)
</code></pre>
<p><strong>How do I get my app to use my venv?</strong></p>
<p>Documentation on using virtual environments can be found at:</p>
<ul>
<li><a href="http://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html" rel="nofollow noreferrer">http://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html</a></li>
</ul>
<p>As it states, if your mod_wsgi uses system Python and you want to use a different Python installation or version, you cannot force it to use that other installation or version. The mod_wsgi binary must be compiled against the specific Python version you want to use.</p>
<p>Because system mod_wsgi packages are usually ancient and not for the version of Python you want to use, you should uninstall the system mod_wsgi package and install mod_wsgi from source code against the Python version you want to use. For that the easiest install method is using <code>pip install mod_wsgi</code>. See:</p>
<ul>
<li><a href="https://pypi.org/project/mod_wsgi/" rel="nofollow noreferrer">https://pypi.org/project/mod_wsgi/</a></li>
</ul>
</div>
<span class="comment-copy">Current Python version is attained by <code>which python</code>. As for mod_wsgi version, I'm insure. Lastly, information on virtual environments is here: <a href="https://virtualenv.pypa.io/en/stable/" rel="nofollow noreferrer">virtualenv.pypa.io/en/stable</a> . You can use pip to install virtualenv: <code>pip install virtualenv</code>. When installed, you can simply create a virtual environment with the following command: <code>virtualenv venv</code> will create a virtual environment folder named 'venv'. When the venv is created you need to activate it: <code>. /venv/bin/activate</code>. Now, if you enter <code>which python</code> you'll notice that it's a local copy!</span>
<span class="comment-copy">Hi Adam, I've already installed and configured Python venv and have a virtuel environment, but I don't know how to use it with Apache and mod_wsgi. Also it's how I see the Python version that Apache, mod_wsgi uses, how do I execute a command to show the Python version on a webpage that Apache, mod_wsgi and Flask creates; the venv I know is 3.5</span>
<span class="comment-copy">I've posted a more detailed answer</span>
<span class="comment-copy">Thank you that helped me to get python 3.x working and confirming it.</span>
<span class="comment-copy">That seemed to be a lot of work just to use the newest version. I found that proxying the request through Apache to the Flask application was a bit easier; mostly because it just worked the first time. Are there any advantages/disadvantages doing it one way or the other?</span>
<span class="comment-copy">You could also just <code>pip install mod_wsgi</code> then run <code>mod_wsgi-express start-server</code> with your Flask app and proxy it to it. So don't run it in your main Apache. The Flask builtin development server should not be used for production sites.</span>
