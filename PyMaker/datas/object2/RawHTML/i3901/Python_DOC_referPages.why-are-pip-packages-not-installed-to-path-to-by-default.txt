<div class="post-text" itemprop="text">
<p>Typically when using <code>rubygems</code> in the <code>ruby</code> ecosystem or <code>npm</code>/<code>yarn</code> in the JavaScript ecosystem packages are installed somewhere on the <code>$PATH</code> or at least you are instructed to add the package install location to your path <code>$PATH</code>.</p>
<p>It seems like with <code>pip</code> in the <code>python</code> ecosystem there is never an emphasis on this. Instead, you are encouraged to run modules via <code>python -m &lt;name&gt;</code>, etc.</p>
<p>Seems a bit odd to me, was this just a design decision? Is it good practice to put <code>site-packages</code> or whatever location <code>pip</code> is using into <code>$PATH</code>? Sometimes a binary is added to <code>/usr/local/bin</code> (and sometimes with a different name than the package itself e.g <code>django-admin</code> instead of <code>django</code> with <code>pip install Django</code> whereas the binary is usually the same as the package name in <code>ruby</code>/JavaScript ecosystems), for example, I see, but is that all of the time?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're confusing <code>$PATH</code> and <code>$PYTHONPATH</code>. <code>site-packages</code> is for <strong>libraries</strong>,  <code>$PATH</code> is for <strong>programs</strong> (binaries and scripts). <code>pip</code> installs libraries into its <code>site-packages</code> and scripts to the corresponding <code>bin/</code> directory; e.g. if <code>site-packages</code> is <code>/usr/local/lib/pythonX.Y/site-packages</code> scripts are installed into <code>/usr/local/bin/</code>.</p>
<p><code>pip</code> doesn't check if <code>/usr/local/bin/</code>is in <code>$PATH</code>. Well, I agree with you — it should check and remind user to add <code>bin/</code> directory to <code>$PATH</code> if it's not already there.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>site-packages</code> directory for a particular python installation is automatically added to <code>sys.path</code> when you run the binary for the installation.  When that binary executes <code>import modname</code>, it looks in the directories on sys.path.  So when you run <code>pip install</code> with a particular python binary, <code>pip</code>, by default, puts the package in the <code>site-packages</code> for that binary so that binary can import the package.  Advanced used can do more complicated things.</p>
</div>
<span class="comment-copy">"it should check and remind user to add bin/ directory to $PATH if it's not already there." - well, that is the same directory where your <code>python</code> executable is located, so if it is not in $path then your directory structure is very weird. I don't think pip (in fact, distutils) should check this</span>
<span class="comment-copy"><i>that is the same directory where your python executable is located</i> — not necessary: I can run <code>/usr/local/bin/pip install</code> and <code>pip</code> script has <code>#!/usr/local/bin/python</code> shebang so <code>/usr/local/bin/</code> could be absent from the <code>$PATH</code>.</span>
<span class="comment-copy">@phd how does pip know how to place binaries in <code>/bin</code> and the rest of the packages and modules in <code>/site-packages/</code>? So for instance if I create a python package, add it to PyPi and it has one entry point, like a binary, which would import the rest of the modules and do some stuff when fed with a file... like <code>flake8</code> for instance.. you do <code>flake8 filename</code> which is an executable. How does pip know to place that <code>flake8</code> in bin and the rest of the <code>packages</code> and <code>modules</code> in <code>/site-packages/</code>? or if you could point me in the direction where I could read about this, ty in advance :)</span>
<span class="comment-copy"><a href="https://docs.python.org/3/install/index.html#how-installation-works" rel="nofollow noreferrer">docs.python.org/3/install/index.html#how-installation-works</a></span>
