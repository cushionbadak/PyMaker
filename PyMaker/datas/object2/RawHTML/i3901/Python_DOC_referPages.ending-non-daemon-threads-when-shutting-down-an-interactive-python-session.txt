<div class="post-text" itemprop="text">
<p>Please consider the code below:</p>
<pre><code>#! /usr/bin/env python3

import threading
import time

class MyThread(threading.Thread):
    def __init__(self):
        super().__init__()
        self._quit_flag = False
    def run(self):
        while not self._quit_flag:
            print("Thread is alive!")
            time.sleep(0.500)
    def request_quit(self):
        self._quit_flag = True

mt = MyThread()
mt.start()
</code></pre>
<p>After saving this as 'test.py' and running 'python3 -i test.py', I get an interactive session, where the thread regularly prints the "Thread is alive!" message.</p>
<p>When I press control-D or run exit(), the python3 process does not terminate because the thread is still running. I want to fix that.</p>
<p>However, <em>I do not want to make the thread a daemon thread</em> -- I want to be able to end / join the thread properly, because in the real-life case I'm solving, I want to terminate a network connection nicely.</p>
<p>Is there a way to do this? For example, is some hook available that is executed after the REPL loop terminates, just prior to the exit of the main thread?</p>
</div>
<div class="post-text" itemprop="text">
<p>Okay I found a way to do this myself.</p>
<p>Looking at the Python source-code, it turns out that at shutdown, Python attempts to join() all non-daemonic threads before completing the shutdown of the process. Which sort-of makes sense, except that this would be much more useful if there were a documented way to signal those threads. Which there isn't.</p>
<p>However, it <em>is</em> possible to re-implement the join() method of one's own class derived from Thread, which can that serve as a way to notify the subthread that it is supposed to shut itself down:</p>
<pre><code>class MyThread(threading.Thread):
    def __init__(self):
        super().__init__()
        self._quit_flag = False
    def __del__(self):
        print("Bye bye!")
    def run(self):
        while not self._quit_flag:
            print("Thread is alive!",  threading.active_count(), threading.main_thread().is_alive())
            for t in threading.enumerate():
                print(t.is_alive())
            time.sleep(0.500)
    def request_quit(self):
        self._quit_flag = True

    def join(self):
        self.request_quit()
        super().join()
</code></pre>
<p>However, this way of addressing the issue is a pretty much a hack, and it ignores the following passage from the 'threading' module docs (<a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">https://docs.python.org/3/library/threading.html</a>):</p>
<blockquote>
<p>The Thread class represents an activity that is run in a separate
  thread of control. There are two ways to specify the activity: by
  passing a callable object to the constructor, or by overriding the
  run() method in a subclass. <strong>No other methods (except for the
  constructor) should be overridden in a subclass. In other words, only
  override the __init__() and run() methods of this class</strong>.</p>
</blockquote>
<p>It does, however, work beautifully.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure if this would be acceptable, but the only way I can see around your problem is to start the interactive console from your script instead of with <code>-i</code> flag. Then you would be able to carry on with your program to do the exit, after you terminate your interactive session:</p>
<pre><code>import threading
import time
from code import InteractiveConsole

def exit_gracefully():
    print("exiting gracefully now")
    global mt
    mt.request_quit()
    mt.join()


class MyThread(threading.Thread):
    def __init__(self):
        super().__init__()
        self._quit_flag = False
    def run(self):
        while not self._quit_flag:
            print("Thread is alive!")
            time.sleep(0.500)
    def request_quit(self):
        self._quit_flag = True

mt = MyThread()
mt.start()
InteractiveConsole(locals=locals()).interact()
exit_gracefully()
</code></pre>
<p>This you would execute without <code>-i</code> flag, only as </p>
<pre><code>python3 test.py
</code></pre>
<p>It would still give you the interactive console as with <code>python -i</code>, but now the script executes <code>exit_gracefully()</code> after the interactive shell exits. </p>
</div>
<div class="post-text" itemprop="text">
<p>I think the way you can do this is to register a cleanup function using <code>atexit</code> and set your thread as a daemon, eg:</p>
<pre><code>#! /usr/bin/env python3

import threading
import time
import atexit

class MyThread(threading.Thread):
    def __init__(self):
        super().__init__()

        # this ensures that atexit gets called.
        self.daemon = True
        self._quit_flag = False

    def run(self):
        while not self._quit_flag:
            print("Thread is alive!")
            time.sleep(0.500)
        print("cleanup can also go here")

    def request_quit(self):
        print("cleanup can go here")
        self._quit_flag = True


mt = MyThread()
def cleanup():
    mt.request_quit()
    mt.join()
    print("even more cleanup here, so many options!")

atexit.register(cleanup)
mt.start()
</code></pre>
</div>
<span class="comment-copy">Are you aware of <code>atexit</code>?</span>
<span class="comment-copy">This is actually quite useful. It probably should be avoided, but if the program is about to exit anyway, it would not matter even if it broke something.</span>
<span class="comment-copy">Could we submit this to the python developers for consideration? Allowing join to be overwritten sounds like a useful feature unless that would break something we aren't seeing (like on windows?)</span>
<span class="comment-copy">I appreciate your proposed workaround, but unfortunately in my real-life case this will not work; I need a solution that doesn't involve starting a dedicated interpreter.</span>
<span class="comment-copy">I found an alternative solution, see my own response.</span>
<span class="comment-copy">I was afraid of some kind of a limitation there, thought to offer the solution anyway. Glad you were able to sort out the problem.</span>
<span class="comment-copy">No that doesn't work. The atexit routines are called after the Python shutdown procedure attempts to join all living non-daemonic threads, which blocks if they don't terminate.</span>
<span class="comment-copy">@reddish That's why you set your thread to be a <code>daemon</code>.</span>
<span class="comment-copy">I was quite explicit that I didn't want to do that in my question.</span>
<span class="comment-copy">I believe you said "I want to be able to end / join the thread properly, because in the real-life case I'm solving, I want to terminate a network connection nicely." ...  You have so many options for terminating your network connection ... making this thread a daemon doesn't prevent you from join it ...</span>
<span class="comment-copy">I appreciate your suggestion, but it quite literally doesn't answer my question, which is: "Ending non-daemon threads when shutting down an interactive python session".</span>
