<div class="post-text" itemprop="text">
<p>I have a package (a folder) named <code>models</code> containing
<code>__init__.py</code>, <code>model_a.py</code>, <code>model_b.py</code>.</p>
<p>my <code>__init__.py</code> contains:</p>
<pre><code>from models.model_a import ModelA
from models.model_b import ModelB
</code></pre>
<p>In my <code>main.py</code> I do</p>
<pre><code>import models

model = get_model(config.use_model) #config.use_model == "ModelA"

def get_model(model):
    # This should be equivalent to models.ModelA(**config.ModelA.structure)
    return models[model](**config[model].structure)
</code></pre>
<p>Which throws the error <code>TypeError: 'module' object is not subscriptable</code></p>
<p>Basically what I want to do is elegantly load the model which is set in the config. Accessing the config like this works fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're trying to do programmatic attribute access, so you need to use the <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a> function:</p>
<pre><code>return getattr(models, model)(**config[model].structure)
</code></pre>
<p>Subscripting (with square brackets, like <code>foo[1]</code>) is not the same as attribute access (with a dot, like <code>foo.bar</code>), in exactly the same way that <code>foo[2]</code> means something different to <code>foo(2)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>i don't know is it write but you can try this,</p>
<pre><code>import models
import sys

def get_model(model):
    return getattr(models, model)


model = get_model('ModelA')
print(model())  
</code></pre>
</div>
<span class="comment-copy">I dont think you can that.. if you still want to go ahead with this approach then you can just declare your own dict <code>models_d = {'ModuleA': models.ModuleA, 'ModuleB': models.ModuleB}</code></span>
<span class="comment-copy">@HamzaHaider is there another elegant way to return a class based on a string?</span>
<span class="comment-copy">if you import <code>ModuleA</code> and <code>ModuleB</code> like the following <code>from models import ModuleA, ModuleB</code> then you can just use <code>eval('ModuleA')(..)</code> Although both examples arent really elegant</span>
<span class="comment-copy">What exactly is <code>config</code>?</span>
<span class="comment-copy">@martineau it is a parsed json config (Munch object). The properties can be accessed with either square brackets or dot notation.</span>
