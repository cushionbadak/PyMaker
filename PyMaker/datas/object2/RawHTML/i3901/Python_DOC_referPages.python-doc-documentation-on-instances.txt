<div class="post-text" itemprop="text">
<p>I'd like to provide documentation (within my program) on certain dynamically created objects, but still fall back to using their class documentation. Setting <code>__doc__</code> seems a suitable way to do so. However, I can't find many details in the Python help in this regard, are there any technical problems with providing documentation on an <em>instance</em>? For example:</p>
<pre><code>class MyClass:
    """
    A description of the class goes here.
    """

a = MyClass()
a.__doc__ = "A description of the object"

print( MyClass.__doc__ )
print( a.__doc__ )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>__doc__</code> is documented as a writable attribute for <em>functions</em>, but not for instances of user defined classes.  <a href="https://docs.python.org/3/library/pydoc.html" rel="nofollow noreferrer"><code>pydoc.help(a)</code></a>, for example, will only consider the <code>__doc__</code> defined on the type.</p>
<p>Other protocols (including future use-cases) may reasonably bypass the special attributes defined in the instance dict, too. See <a href="https://docs.python.org/3/reference/datamodel.html#special-method-lookup" rel="nofollow noreferrer">Special method lookup</a> section of the datamodel documentation, specifically:</p>
<blockquote>
<p>For custom classes, implicit invocations of special methods are only guaranteed to work correctly if defined on an object’s type, not in the object’s instance dictionary. </p>
</blockquote>
<p>So, depending on the consumer of the attribute, what you intend to do may not be reliable. <strong>Avoid.</strong></p>
<p>A safe and simple alternative is just to use a different attribute name of your own choosing for your own use-case, preferably not using the <code>__dunder__</code> syntax convention which usually indicates a special name reserved for some specific use by the implementation and/or the stdlib.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are some pretty obvious technical problems; the question is whether or not they matter for your use case.</p>
<p>Here are some major uses for docstrings that your idiom will not help with:</p>
<ul>
<li><strong><code>help(a)</code></strong>: Type <code>help(a)</code> in an interactive terminal, and you get the docstring for <code>MyClass</code>, not the docstring for <code>a</code>.</li>
<li><strong>Auto-generated documentation</strong>: Unless you write your own documentation generator, it's not going to understand that you've done anything special with your <code>a</code> value. Many doc generators <em>do</em> have some way to specify help for module and class constants, but I'm not aware of any that will recognize your idiom.</li>
<li><strong>IDE help</strong>: Many IDEs will not only auto-complete an expression, but show the relevant docstring in a tooltip. They all do this statically, and without some special-case code designed around your idiom (which they're unlikely to have, given that it's an unusual idiom), they're almost certain to fetch the docstring for the class, not the object.</li>
</ul>
<p>Here are some where it might help:</p>
<ul>
<li><strong>Source readability</strong>: As a human reading your source, I can tell the intent from the <code>a.__doc__ = …</code> right near the construction of <code>a</code>. Then again, I could tell the same intent just as easily from a Sphinx comment on the constant.</li>
<li><strong>Debugging</strong>: <code>pdb</code> doesn't really do much with docstrings, but some GUI debuggers wrapped around it do, and most of them are probably going to show <code>a.__doc__</code>.</li>
<li><strong>Custom dynamic use of docstrings</strong>: Obviously any code that you write that does something with <code>a.__doc__</code> is going to get the instance docstring if you want it to, and therefore can do whatever it wants with it. <strong><em>However, keep in mind that if you want to define your own "protocol", you should use your own name, not one reserved for the implementation.</em></strong></li>
</ul>
<hr/>
<p>Notice that most of the same is true for using a descriptor for the docstring:</p>
<pre><code>&gt;&gt;&gt; class C:
...     @property
...     def __doc__(self):
...         return('C doc')
&gt;&gt;&gt; c = C()
</code></pre>
<p>If you type <code>c.__doc__</code>, you'll get <code>'C doc'</code>, but <code>help(c)</code> will treat it as an object with no docstring.</p>
<hr/>
<p>It's worth noting that making <code>help</code> work is <em>one</em> of the reasons some dynamic proxy libraries generate new classes on the fly—that is, a proxy to underlying type <code>Spam</code> has some new type like <code>_SpamProxy</code>, instead of the same <code>GenericProxy</code> type used for proxies to <code>Ham</code>s and <code>Eggs</code>eses. The former allows <code>help(myspam)</code> to show dynamically-generated information about <code>Spam</code>. But I don't know how <em>important</em> a reason it is; often you already need dynamic classes to, e.g., make special method lookup work, at which point adding dynamic docstrings comes for free.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think it's preferred to keep it under the class via your doc string as it will also aid any developer that works on the code. However if you are doing something dynamic that requires this setup then I don't see any reason why not. Just understand that it adds a level of indirection that makes things less clear to others.</p>
<p>Remember to K.I.S.S. where applicable :)</p>
</div>
<span class="comment-copy">Are you planning on dynamically creating documentation to certain modules?</span>
<span class="comment-copy">I'm planning on certain dynamically created objects having documentation.</span>
<span class="comment-copy">I see. I guess you should add this detail to the question, cause that is the only scenario I can think of that will actually make sense.</span>
<span class="comment-copy">Who is the expected audience for the dynamically created docstrings?</span>
<span class="comment-copy">Also have a look at this : <a href="https://stackoverflow.com/questions/2693883/dynamic-function-docstring/2694358" title="dynamic function docstring">stackoverflow.com/questions/2693883/dynamic-function-docstring/…</a></span>
