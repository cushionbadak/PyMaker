<div class="post-text" itemprop="text">
<p>Is there a way to use <code>map()</code> function with a string instead of a list? Or the <code>map()</code> function is meant only to work with lists?</p>
<p>For instance, ignoring the content of the lambda function, this code returns a map object and not a string:</p>
<pre><code>def rot_13(string):
    alph = 'abcdefghijklmnopqrstuwxyz'
    return str(map(lambda i: alph[(alph.find(i)+13) % len(alph)], string))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using list/generator comprehensions is preferable (more Pythonic) to <code>map()</code>:</p>
<pre><code>def rot_13(string):
    alph = 'abcdefghijklmnopqrstuwxyz'
    return ''.join(alph[(alph.find(i)+13) % len(alph)] for i in string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>python3 <code>map</code> returns a generator, so you have to consume it, using <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> is the easiest way:</p>
<pre><code>"".join(map(lambda i: alph[(alph.find(i)+13) % len(alph)], string))
</code></pre>
<p>It is similar to this code:</p>
<pre><code>my_string = ""
for l in map(lambda i: alph[(alph.find(i)+13) % len(alph)], string):
    my_string += l
</code></pre>
</div>
<span class="comment-copy"><code>map</code> returns a generator in Python3, try: <code>return "".join(list(map(lambda i: alph[(alph.find(i)+13) % len(alph)], string)))</code></span>
<span class="comment-copy">You can turn a string into a list with something like <code>a_list = list(a_string)</code>.</span>
<span class="comment-copy">@MauriceMeyer map returns a map object, not a generator</span>
<span class="comment-copy">Yes. <code>map</code> <b>always</b> returns a map object. No matter the iterable you are napping over. It is meant to work with any iterable.</span>
<span class="comment-copy">Thanks, I think it's the best way</span>
<span class="comment-copy"><code>map</code> does not return a generator, it returns a map-object, which is an iterator but not a generator.</span>
