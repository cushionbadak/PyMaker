<div class="post-text" itemprop="text">
<p>My XML file looks something like this:</p>
<pre><code>&lt;SCAN_LIST_OUTPUT&gt;
  &lt;RESPONSE&gt;
    &lt;DATETIME&gt;2018-05-21T11:29:05Z&lt;/DATETIME&gt;
    &lt;SCAN_LIST&gt;
      &lt;SCAN&gt;
        &lt;REF&gt;scan/1526727908.25005&lt;/REF&gt;
        &lt;TITLE&gt;&lt;![CDATA[ACRS_Scan]]&gt;&lt;/TITLE&gt;
        &lt;LAUNCH_DATETIME&gt;2018-05-19T11:05:08Z&lt;/LAUNCH_DATETIME&gt;
      &lt;/SCAN&gt;
      &lt;SCAN&gt;
        &lt;REF&gt;scan/1526549903.07613&lt;/REF&gt;
        &lt;TITLE&gt;&lt;![CDATA[testScan]]&gt;&lt;/TITLE&gt;
        &lt;LAUNCH_DATETIME&gt;2018-05-17T09:38:23Z&lt;/LAUNCH_DATETIME&gt;
      &lt;/SCAN&gt;
    &lt;/SCAN_LIST&gt;
  &lt;/RESPONSE&gt;
&lt;/SCAN_LIST_OUTPUT&gt;
</code></pre>
<p>Now when I try to find the REF element of the first element using an absolute path where I know the LAUNCH_DATETIME it gives me an error saying invalid predicate.
Here is my code:</p>
<pre><code>import xml.etree.ElementTree as ET

tree = ET.ElementTree(ET.fromstring(response))
groot = tree.getroot()
path = './/REF[../LAUNCH_DATETIME="2018-05-19T11:05:08Z"]'
scan_id = tree.find(path)
</code></pre>
<p>Here is the following traceback call:</p>
<pre><code>KeyError: ('.//REF[../LAUNCH_DATETIME="2018-05-19T11:05:08Z"]', None)

During handling of the above exception, another exception occurred:
Traceback (most recent call last):
  File "/home/doomsday/PycharmProjects/untitled/venv/ScanList.py", line 44, in &lt;module&gt;
    scan_id = tree.find(path)
  File "/usr/lib/python3.5/xml/etree/ElementTree.py", line 651, in find
    return self._root.find(path, namespaces)
  File "/usr/lib/python3.5/xml/etree/ElementPath.py", line 298, in find
    return next(iterfind(elem, path, namespaces), None)
  File "/usr/lib/python3.5/xml/etree/ElementPath.py", line 277, in iterfind
    selector.append(ops[token[0]](next, token))
  File "/usr/lib/python3.5/xml/etree/ElementPath.py", line 233, in prepare_predicate
    raise SyntaxError("invalid predicate")
SyntaxError: invalid predicate
</code></pre>
<p>When I use the same absolute path on an online xpath evaluator, it gives me the desired output. But when I try the same in my code, it fails. If anyone could tell what the problem is and how it can be resolved, would be great.</p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>ElementTree's <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xpath-support" rel="nofollow noreferrer">xpath support</a> is limited. Instead of trying to go back up the tree with <code>..</code> in a predicate on <code>REF</code>, add the predicate to <code>SCAN</code>.</p>
<p>Example...</p>
<pre><code>path = './/SCAN[LAUNCH_DATETIME="2018-05-19T11:05:08Z"]/REF'
</code></pre>
</div>
<span class="comment-copy">What are you actually trying to achieve?</span>
<span class="comment-copy">@zipa I am trying to locate the &lt;REF&gt; child of the first &lt;SCAN&gt; element using the absolute path I provided above with the &lt;LAUNCH_DATETIME&gt; child value known to me....</span>
<span class="comment-copy">@DevanshuMisra i don't think that is possible. I would retrieve the full &lt;scan&gt; element and then handle and evaluate the child values</span>
<span class="comment-copy">@DevanshuMisra maybe this is what you are looking for <a href="https://stackoverflow.com/questions/47304991/python-xml-print-particular-child-node-based-on-sub-element-text">link</a></span>
<span class="comment-copy">@Bonzay Yes sir, it isnt. As i read the answer provided below, I had to retrieve the &lt;SCAN&gt; element for working around it and then fetch the required element.</span>
<span class="comment-copy">Thank you sir, this totally worked. Now I understand how the predicate mattered, Moreover, I really did not know about the xpath support provided by ElementTree. Thanks again for helping me out</span>
<span class="comment-copy">@DevanshuMisra - youâ€™re very welcome. If you need to use more complicated xpaths, consider using lxml instead.</span>
<span class="comment-copy">Sure sir. But as far as my understanding goes, Elementtree comes in stdlib but lxml can be an external dependency. And this code is just a snippet of an application that i'm writing which will then be sent on different machines. And(I'm not too sure about this), external dependencies should be kept to a bare minimum I suppose</span>
