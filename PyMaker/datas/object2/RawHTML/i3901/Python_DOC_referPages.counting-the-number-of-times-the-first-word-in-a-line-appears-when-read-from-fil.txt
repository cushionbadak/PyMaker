<div class="post-text" itemprop="text">
<p>Using a dummy file (streamt.txt) with the following contents:</p>
<pre><code>andrew I hate mondays.
fred Python is cool.
fred Ko Ko Bop Ko Ko Bop Ko Ko Bop for ever
andrew @fred no it isn't, what do you think @john???
judy @fred enough with the k-pop
judy RT @fred Python is cool.
andrew RT @judy @fred enough with the k pop
george RT @fred Python is cool.
andrew DM @john Oops
john DM @andrew Who are you go away! Do you know him, @judy?
</code></pre>
<p>The first word of each line represents a user and the rest of the line is a message, similar to twitter. I need to print a list of the top <em>n</em> (entered by user) original posting users (most messages) next to the number of messages they sent.</p>
<p>This doesn't include any message with 'RT' at the start. Formatted in justified columns in lexicographic order in the case of ties.</p>
<p>As it stands, my code only finds the most used words in the messages and it doesn't exclude RT and DM messages or account for n:</p>
<pre><code>file=open('streamt.txt')

counts=dict()
for line in file:
    words=line.split()
    for word in words:
    counts[word]=counts.get(word, 0)+1

lst=list()
for key,value in counts.items():
    new=(value, key)
    lst.append(new)

lst=sorted (lst, reverse=True)

for value, key in lst[:10]:
    print(value,key)
</code></pre>
<p>This is my output:</p>
<pre><code>6 Ko
5 @fred
4 andrew
3 you
3 is
3 cool.
3 RT
3 Python
3 Bop
2 with
</code></pre>
<p>The actual output should be:</p>
<pre><code>Enter n: 10
3 andrew
2 fred
1 john judy
</code></pre>
<p>Any ideas as to how I should do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Count as follows:</p>
<pre><code>#!/usr/bin/env python3.6
from collections import Counter, defaultdict
from pathlib import Path

def main():
    n = input('Enter n: ')
    try:
        n = int(n)
    except:
        print('Invalid input.')
        return
    ss = Path('streamt.txt').read_text().strip().split('\n')
    c = Counter([
        i.strip().split(' ', 1)[0] for i in ss
        if i.strip().split(' ', 2)[1] not in ('RT',)
    ])
    d = defaultdict(list)
    for k, v in c.most_common():
        d[v].append(k)
    print('\n'.join([f'{k} {" ".join(v)}' for k, v in list(d.items())[:n]]))

if __name__ == '__main__':
    main()
</code></pre>
<p>Output:</p>
<pre><code>Enter n: 10
3 andrew
2 fred
1 judy john
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a> :</p>
<pre><code>from collections import Counter

with open(filename, "r") as f:
    for line in f:
        if 'DM' not in line and 'RT' not in line:
            words = line.split()
            lst.append(words[0])

for k, v in Counter(lst).items():
    print(v, k)

# 2 andrew
# 2 fred                                                     
# 1 judy                                                  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <strong>collections</strong> Module.</p>
<p><strong>Demo:</strong></p>
<pre><code>import collections
d = collections.defaultdict(int)
with open(filename, "r") as infile:
    for line in infile:
        if 'RT' not in line and 'DM' not in line:
            d[line.strip().split()[0]] += 1

d = sorted(d.items(), key=lambda x: x[1], reverse=True)
for k,v in d:
    print(v, k)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>2 andrew
2 fred
1 judy
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a complete solution using only <code>defaultdict</code> as imported class. Note that it takes into account the fact that several users may have the same number of messages:  </p>
<pre><code>from collections import defaultdict

n = int(input("Enter n: "))

# Build dictionary with key = name / value = number of messages
d = defaultdict(int)
with open('file.txt') as file:
    for line in file:
        words = line.split()
        if words[1] not in ["RT"]:
            d[words[0]] += 1

# Build dictionary with key = number of messages / value = list of names
d_new = defaultdict(list)
for k,v in d.items():
    d_new[v].append(k)

# Keep only the top n items in dictionary sorted by number of messages
listOfNbAndNames = sorted(d_new.items(), reverse = True)[:n]
for nb,names in listOfNbAndNames:
    print(nb, " ".join(names))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can be done efficiently by recovering username of an author with <code>str.split</code> and keeping count with <code>collections.Counter</code>.</p>
<pre><code>from collections import Counter

with open('streamt.txt', 'r') as file:
    count = Counter(line.split()[0] for line in file)

print(count) # Counter({'andrew': 4, 'fred': 2, 'judy': 2, 'george': 1, 'john': 1})
</code></pre>
<p>If you want the users sorted by number of message, your can then use <code>Counter.most_common</code>. You optionally pass as argument the number of items you want returned.</p>
<pre><code>print(count.most_common())
# prints:  [('andrew', 4), ('fred', 2), ('judy', 2), ('george', 1), ('john', 1)]

print(count.most_common(2))
# prints:  [('andrew', 4), ('fred', 2)]
</code></pre>
</div>
<span class="comment-copy">Is your text file consistent with your actual output ? Shouldn't <b>andrew</b> be 2 per your instructions ?</span>
<span class="comment-copy">Yeah I noticed that earlier. That is the output solution I was given, but I imagine it should actually be 2</span>
<span class="comment-copy">The output solution you were given ? It appears that you are not even checking if the output is matching with the instructions.</span>
<span class="comment-copy">Turns out it was only RT that needed to be excluded</span>
<span class="comment-copy">It gives the correct answer but it isn't formatted correctly</span>
<span class="comment-copy"><code>for k,v in d.items():     print(v, k)</code> ?</span>
<span class="comment-copy">Any idea how to have ties next to one another and for it to be printed descending order?</span>
<span class="comment-copy">Updated snippet.</span>
<span class="comment-copy">where would you place the n variable in this?</span>
