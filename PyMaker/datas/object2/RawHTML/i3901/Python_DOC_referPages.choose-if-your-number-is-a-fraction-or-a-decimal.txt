<div class="post-text" itemprop="text">
<p>I'm trying to make it so if the denominator of the fraction is over 2, it prints the decimal. Else, it prints the fraction </p>
<pre><code>from fractions import Fraction
z = float(input())
frac = (Fraction(z))
s = str(z)
x = s.find("/")
x1 = x + 1
segment = z[x1:]
print(segment)

if len(segment) &lt;= 3:
    print(frac)
else:
    print(z)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are making it way harder than it needs to be. Use the <a href="https://docs.python.org/3/library/fractions.html#fractions.Fraction.denominator" rel="nofollow noreferrer"><code>denominator</code> attribute</a> of the <code>Fraction</code> instance:</p>
<pre><code>frac = Fraction(z)
if frac.denominator &gt; 2:
    print(z)
else:
    print(frac)
</code></pre>
<p>You may want to use the <a href="https://docs.python.org/3/library/fractions.html#fractions.Fraction.limit_denominator" rel="nofollow noreferrer"><code>Fraction.limit_denominator()</code> method</a> to account for the imprecise nature of floats:</p>
<pre><code>frac = Fraction(z).limit_denominator()
if frac.denominator &gt; 2:
    print(z)
else:
    print(frac)
</code></pre>
<p><code>Fraction.limit_denominator()</code> finds the closest fraction to the original where the denominator is limited be below 1 million:</p>
<pre><code>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; 2/3
0.6666666666666666
&gt;&gt;&gt; Fraction(2/3)
Fraction(6004799503160661, 9007199254740992)
&gt;&gt;&gt; Fraction(2/3).limit_denominator()
Fraction(2, 3)
</code></pre>
<p>Another alternative is to pass the user input straight to <code>Fraction()</code>; the constructor accepts both valid values for <code>float()</code> <em>and</em> strings in the form of <em>numerator / denominator</em> (with optional sign). This would let your users input exact fractions such as <em>'2 / 3'</em>:</p>
<pre><code>z = Fraction(input()).limit_denominator()
if frac.denominator &gt; 2:
    print(float(z))
else:
    print(frac)
</code></pre>
</div>
<span class="comment-copy">I'd also not convert the input to a float before giving it to Fraction. That'd avoid the kind of things floats cause issues with and would enable input such as "7 / 2" as well.</span>
<span class="comment-copy">@JonClements: perhaps, but using <code>limit_denominator()</code> also can compensate for that.</span>
<span class="comment-copy">I'm not sure I understand what the <code>Fraction.limit_denominator</code> does @MartijnPieters</span>
<span class="comment-copy">@EliasFiz: it returns a new <code>Fraction()</code> object that is as close as possible to the absolute value of the original but with the denominator limited to a given value (the default is 1 million). This usually makes for a much better representation. Compare <code>Fraction(2/3)</code> with <code>Fraction(2/3).limit_denominator()</code>. The first produces <code>Fraction(6004799503160661, 9007199254740992)</code>, while the latter gives you <code>Fraction(2, 3)</code>, a much more "human" representation of the <code>0.6666666666666666</code> float value.</span>
