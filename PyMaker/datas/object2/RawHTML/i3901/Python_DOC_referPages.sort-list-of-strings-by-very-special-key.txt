<div class="post-text" itemprop="text">
<p>I must implement sorting the list of strings in a way which is much similar to <code>sorted</code> function, but with one important distinction. As you know, the <code>sorted</code> function accounts space character prior digits character, so <code>sorted(['1 ', ' 9'])</code> will give us <code>[' 9', '1 ']</code>. I need <code>sorted</code> that accounts digit character prior space chars, so in our example the result will be <code>['1 ', ' 9']</code>.</p>
<h2>Update</h2>
<p>As I understand, by default the <code>sorted</code> behaviour relies on the order of chars in ascii 'alphabet' (i.e. <code>''.join([chr(i) for i in range(59, 127)])</code>), so I decided to implement my own ascii 'alphabet' in the <code>my_ord</code> function. </p>
<p>I planned to use this function in junction with simple <code>my_sort</code> function as a key for <code>sorted</code>,</p>
<pre><code>def my_ord(c):
    punctuation1 = ''.join([chr(i) for i in range(32, 48)])
    other_stuff = ''.join([chr(i) for i in range(59, 127)])
    my_alphabet = string.digits + punctuation1 + other_stuff
    return my_alphabet.find(c)

def my_sort(w):
    return sorted(w, key=my_ord)
</code></pre>
<p>like this: <code>sorted([' 1 ', 'abc', ' zz zz', '9 '], key=my_sort)</code>.</p>
<p>What I'm expecting in this case, is <code>['9 ', ' 1 ', ' zz zz', 'abc']</code>. Unfortunately, the result not only doesn't match the expected - moreover, it differs from time to time.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code>import string
MY_ALPHABET = (
        string.digits
        + ''.join([chr(i) for i in range(32, 127) if chr(i) not in string.digits])
)
inp = [' 1 ', 'abc', ' zz zz', '9 ', 'a 1', 'a ']
print(inp, '--&gt;', sorted(inp, key=lambda w: [MY_ALPHABET.index(c) for c in w]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>lstrip</code> as the key function to ignore the whitespace on the left, front of the string.</p>
<pre><code>r = sorted(['1 ', ' 9' , ' 4', '2 '], key=str.lstrip)
# r == ['1 ', '2 ', ' 4', ' 9']
</code></pre>
<blockquote>
<p><code>key</code> specifies a function of one argument that is used to extract a comparison key from each list element, <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">doc</a>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You want a combination of lexical and numerical sorting. You can do that by chopping up the string into a tuple and converting the digits to <code>int</code>.  Now the tuple compare will consider each element by its own comparison rules.</p>
<p>I've used regex to split the string into (beginning text, white space, the digits, everything else) created an <code>int</code> and used that for the key. if the string didn't match the pattern, it just returns the original string in a tuple so that it can be used for comparison also.</p>
<p>I moved the whitespace before the digit (group(2)) after the digit  but it may make more sense to leave it out of the comparison completely.</p>
<pre><code>import re

test = ['1  ', ' 9']
wanted = ['1  ', ' 9']

def sort_key(val):
    """Return tuple of (text, int, spaces, remainder) or just
    (text) suitable for sorting text lexagraphically but embedded
    number numerically"""
    m = re.match(r"(.*?)(\s*)(\d+)(.*)", val)
    if m:
        return (m.group(1), int(m.group(3)), m.group(2), m.group(4))
    else:
        return (val,)

result = sorted(test, key=sort_key)
print(test, '--&gt;', result)
assert result == wanted, "results compare"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For completeness and maybe efficiency in extreme cases, here is a solution using numpy argsort:</p>
<pre><code>import numpy as np
lst = ['1 ', ' 9' , ' 4', '2 ']
order = np.argsort(np.array([s.lstrip() for s in lst]))
result = list(np.array(lst)[order])
</code></pre>
<p>Overall, I think that using sorted(..., key=...) is generally superior and this solution makes more sense if the input is already a numpy array. On the other hand, it uses strip() only once per item and makes use of numpy, so it is possible that for large enough lists, it could be faster. Additionally, it produces order, whitch shows where each sorted element was in the original list.</p>
<p>As a last comment, from the code you provide, but not the example you give, I am not sure if you just want to strip the leading white spaces, or do more, e.g. <a href="https://stackoverflow.com/questions/265960/best-way-to-strip-punctuation-from-a-string-in-python">best-way-to-strip-punctuation-from-a-string-in-python</a>, or first order on the string without punctuatation and then if they are equal, order on the rest (solution by tdelaney) In any case it might not be a bad idea to compile a pattern, e.g.</p>
<pre><code>import numpy as np
import re
pattern = re.compile(r'[^\w]')
lst = ['1 ', ' 9' , ' 4', '2 ']
order = np.argsort(np.array([pattern.sub('',s) for s in lst]))
result = list(np.array(lst)[order])
</code></pre>
<p>or:</p>
<pre><code>import re
pattern = re.compile(r'[^\w]')
r = sorted(['1 ', ' 9' , ' 4', '2 '], key= lambda s: pattern.sub('',s))
</code></pre>
</div>
<span class="comment-copy">The key changes how elements are compared, but it won't change the values in the result. If the input contains <code>' 9'</code> you can't get <code>'9 '</code> in the result.</span>
<span class="comment-copy">In addition to changing sort order in your example, you also moved spaces to the end. Was that intentional? If that is a requirement, it would be best to point that out.</span>
<span class="comment-copy">Can the numbers be multiple digits? If so, how are they sorted? Should <code>5</code> precede <code>11</code> (lexical sort) or the other way around (numerical sort)?</span>
<span class="comment-copy">stackoverflow sent me this suggesting closing, chose to edit it to better shape... I took the liberty of also supposing that moving the spaces to end was a mistake, if not, the answer would be the same, only instead of the strip function, you would need to define your own, slightly modified strip...</span>
<span class="comment-copy">I rolled back @ntg's changes. We encourage people to show how they've attempted to solve the problem and we certainly shouldn't change the author's expected result without confirmation from the author first.</span>
<span class="comment-copy">this won't help in this case: <code>['1 a', '11a']</code>. The output will be <code>['1 a', '11a']</code>. According to description (i.e. digits must be prior to spaces), the result must be <code>['11a', '1 a', ]</code></span>
<span class="comment-copy">Let's try it on the following input: <code>test = [' 1 ', 'abc', ' zz zz', '9 ']</code>. The <code>wanted</code>, in this case, will be the <code>['9 ', ' 1 ', ' zz zz', 'abc']</code>. But alas, the <code>result</code> is <code>[' 1 ', '9 ', ' zz zz', 'abc']</code> which is not the expected result :(</span>
<span class="comment-copy">Please read what you wrote, you have a copy paste error.... But furthermore, can you explain why ' zz zz' should be before  'abc'  based on your description?</span>
<span class="comment-copy">Thanks for your effort, but the desired result won't be reached. For example, sorted <code>[' 1 ', 'abc', ' zz zz', '9 ']</code>, according description, must be <code>['9 ', ' 1 ', ' zz zz', 'abc']</code>, but the provided solution will give <code>[' 1 ', '9 ', 'abc', ' zz zz']</code>. Anyway, thanks for your time</span>
