<div class="post-text" itemprop="text">
<p>I have a space delimited text file (temp.txt) as follows:</p>
<pre><code>a susan python
b rick java
c bella scala
</code></pre>
<p>I want to read this into a set, as follows:</p>
<pre><code>{'susan python', 'rick java', 'bella scala'}
</code></pre>
<p>I've tried the following code, but it only returns <code>{'bella scala'}</code></p>
<pre><code>temp_List = [];

with open('temp.txt', 'r') as f:
    for line in f:
        splitLine = line.split();
        master_set = [" ".join(splitLine[1:])];

temp_Set = set(temp_List);
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For this you can simply use array <strong>append</strong> function and remove <em>temp_Set = set(temp_List)</em></p>
<pre><code>temp_List = []
with open('temp.txt', 'r') as f:
    for line in f:
        splitLine = line.split()
        master_set = [" ".join(splitLine[1:])]
        temp_List.append(master_set[0])
print temp_List
</code></pre>
<p>Here we simply append elements and we get output:</p>
<pre><code>['susan python', 'rick java', 'bella scala']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is one of those cases where the function <a href="https://docs.python.org/3/library/stdtypes.html#str.partition" rel="nofollow noreferrer">String.partition</a> works really well.</p>
<pre><code>temp_set = set()
with open('temp.txt', 'r') as f:
    for line in f:
        _, _, name = line.partition(' ')
        temp_set.add(name)
</code></pre>
<p>it is also possible to replace </p>
<pre><code>_, _, name = line.partition(' ')
</code></pre>
<p>with </p>
<pre><code>_, name = line.split(' ', 1) # where the 1 specifies the maximum number of splits
</code></pre>
<h3>Why your code did not work:</h3>
<ol>
<li>nothing is appended to <code>temp_List</code>, so <code>temp_Set</code> is also empty</li>
<li><code>master_set</code> is overwritten in every iteration, and in the last iteration is assigned <code>['bella scala']</code> through this assignment <code>= [" ".join(splitLine[1:])]</code></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Your code does not work because you are not appending results to <code>temp_List</code>.</p>
<p>For this problem, you can use <code>csv</code> module with a dictionary comprehension. <code>csv.reader</code> returns an iterator which then feeds the comprehension.</p>
<pre><code>from io import StringIO
import csv

mystr = StringIO("""a susan python
b rick java
c bella scala""")

# replace mystr with open('temp.txt', 'r')
with mystr as f:
    reader = csv.reader(f, delimiter=' ')
    res = {' '.join(i[1:]) for i in reader}

print(res)

{'susan python', 'rick java', 'bella scala'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>@TanviP</strong>, you can try the below code.</p>
<blockquote>
<p><strong>Note:</strong> <code>set()</code> does not preserve the order of elements like <code>lists</code>. So, it's better to use list if the order matters otherwise you will need to go for 3rd party libraries to use OrderedDict() etc.</p>
<p>I have used  <strong>list</strong> and <strong>set</strong> both to show you the difference. Add more data lines to <strong>temp.txt</strong> and run code to see the differences in the order of items (sometimes you'll find <strong>set</strong>'s elements in different order than that of the corresponding <strong>list</strong>).</p>
</blockquote>
<pre><code>temp_ordered_list = []

with open("temp.txt") as f:
    for line in f.readlines():
        data_list = line.strip().split()
        temp_ordered_list.append(" ".join(data_list[1:]))

temp_unordered_set = set(temp_ordered_list)
print(temp_ordered_list);  # ['susan python', 'rick java', 'bella scala'}
print(temp_unordered_set);  # {'susan python', 'rick java', 'bella scala'}
</code></pre>
<p>Thanks.</p>
</div>
