<div class="post-text" itemprop="text">
<p>I am trying to make a game on my own and this is my first one. In it I'm trying to add features as time goes on and one day I came up with an idea to add color to certain key words. This is what I have:</p>
<pre><code>print("The Text Based Game v0.1.0.0")
import time
import sys

time.sleep(1.5)
name = input("What is your name? ")
print("%s, are you a Warlock, Titan, or Hunter? Type 'list' if you would like a discription of each class." % (name))

playerclass = input()

if playerclass == ("list"):
  print ("\nWarlocks are powerful guardians. They hit hard but can't take in much in return. \n\nTitans are tanks. In the front of the line taking in bullets for others.\n\nHunters are the middle man. They are fast but besides that they don't have much else to bring to the table.\n")
  time.sleep(2)
  print ("Will you chose to be a Warlock, Titan, or Hunter?")

  playerclass = input()
</code></pre>
<p>Now when the code asks you what class you would like to be, I want the words "Warlock," "Titan," and "Hunter to show up in different colors. This is what I tried to do:</p>
<pre><code>print("The Text Based Game v0.2.0.0")
import time
import sys
from colorama import Fore, Back, Style

print (Style.RESET_ALL)

Warlock = (Fore.BLUE + "Warlock" + Style.RESET_ALL)
Titan = (Fore.RED + "Titan" + Style.RESET_ALL)
Hunter = (Fore.GREEN + "Hunter" + Style.RESET_ALL)

time.sleep(1.5)
name = input("What is your name? ")
print ("%s, are you a " +str(Warlock)+ ", " +str(Titan)+", or" +str(Hunter)+ "? Type 'list' if you would like a discription of each class." % (name))

playerclass = input()

if playerclass == ("list"):
  print ("\nWarlocks are powerful guardians. They hit hard but can't take in much in return. \n\nTitans are tanks. In the front of the line taking in bullets for others.\n\nHunters are the middle man. They are fast but besides that they don't have much else to bring to the table.\n")
  time.sleep(2)
  print ("Will you chose to be a Warlock, Titan, or Hunter?")

  playerclass = input()
</code></pre>
<p>It pulls up an error that says:</p>
<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):
  File "python", line 14, in &lt;module&gt;
TypeError: not all arguments converted during string formatting
</code></pre>
<p>I don't want to write "Fore.BLUE + "Warlock" + Style.RESET_ALL" everytime inside the quote, instead I want to have the system to call back to "Fore.BLUE + "Warlock" + Style.RESET_ALL" when I write Warlock. I think what I'm thinking should work but I'm executing it wrong...</p>
<p>Do take note that I'm writing all of this in Repl.it online in python 3.6.1 Here is the link for the code in Repl.it: <a href="https://repl.it/@Woah_its_boobe/Error" rel="nofollow noreferrer">https://repl.it/@Woah_its_boobe/Error</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This problem isn't because of Colorama. The problem here is that the <code>%</code> operator has higher precedence than <code>+</code>, so Python is trying to add the name here:</p>
<pre><code>"? Type 'list' if you would like a discription of each class." % (name)
</code></pre>
<p>before it combines all those strings using <code>+</code>. The simple solution is to wrap the entire string expression in parentheses:</p>
<pre><code>Warlock = "Warlock"
Titan = "Titan"
Hunter = "Hunter"

name = "Bode"

print(("%s, are you a " +str(Warlock)+ ", " +str(Titan)+", or" +str(Hunter)+ "? Type 'list' if you would like a discription of each class.") % name)
</code></pre>
<p><strong>output</strong></p>
<pre><code>Bode, are you a Warlock, Titan, orHunter? Type 'list' if you would like a discription of each class.
</code></pre>
<hr/>
<p>However, it would be easier to read if you don't add strings together manually, and use the <code>format</code> method instead of <code>%</code>.</p>
<pre><code>Warlock = "Warlock"
Titan = "Titan"
Hunter = "Hunter"

name = "Bode"

print("{}, are you a {}, {}. or {}?".format(name, Warlock, Titan, Hunter), end=" ")
print("Type 'list' if you would like a description of each class.")
</code></pre>
<p><strong>output</strong></p>
<pre><code>Bode, are you a Warlock, Titan. or Hunter? Type 'list' if you would like a description of each class.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that string formatting can't jump past the <code>+</code> concatenation of strings.  It is solved by using:</p>
<pre><code>Warlock = Fore.BLUE + "Warlock" + Style.RESET_ALL
Titan = Fore.RED + "Titan" + Style.RESET_ALL
Hunter = Fore.GREEN + "Hunter" + Style.RESET_ALL

time.sleep(1.5)
name = input("What is your name? ")
print ("%s, are you a " % (name) +Warlock+ ", " +Titan+", or" +Hunter+ "? Type 'list' if you would like a discription of each class.")
</code></pre>
<p>You have to attach the <code>% (name)</code> right next to the <code>%s, are you a</code> string.  I also removed a bunch of unnecessary parentheses and stuff.</p>
</div>
<span class="comment-copy">BTW, it's best not to put any other executable statements before your <code>imports</code>. The only thing that should before imports is a docstring, and (on Linux) a "shebang" line at the very top, possibly followed by a coding directive, so the interpreter knows what encoding your editor used on the source file.</span>
<span class="comment-copy">not that i'm arguing with you but why shouldn't you put the imports statements whenever it is needed? why should you only put it in the beginning of the code? Thank you for helping me</span>
<span class="comment-copy">Putting all of the imports at the start of the script is mainly a style convention (the details are in <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">PEP-0008</a>). Doing so makes it clear to readers which modules the script uses, and they know where to look to find all of your imports. And it makes it obvious that the whole script is running under the conditions that your imports set up. If you break this convention readers will assume that you are doing so on purpose, so you need to have a good reason to do that.</span>
<span class="comment-copy">(cont) There are some justifications for putting imports in non-standard places, as discussed in <a href="https://stackoverflow.com/questions/128478/should-import-statements-always-be-at-the-top-of-a-module">Should import statements always be at the top of a module?</a>, but bear in mind that some of the answers there are a little controversial.</span>
<span class="comment-copy">with the format method do you still have to have the str function? i.e. str(warlock) or (warlock)</span>
<span class="comment-copy">No. And in fact those <code>str()</code> calls are redundant because <code>warlock</code> is already a string. But anyway, all of Python's formatting techniques know how to convert an object to a string, so there's never a good reason to use <code>str()</code> manually when you want to format something. Converting a bunch of stuff to strings and manually concatenating them with <code>+</code> is less efficient, and bad style.</span>
<span class="comment-copy">FWIW, Python's built-in types have a special <a href="https://docs.python.org/3/reference/datamodel.html#object.__format__" rel="nofollow noreferrer"><code>__format__</code></a> method. This method gets called by the <code>.format</code> method (or <code>format</code> function) when it formats an object. Your custom classes can also define a <code>__format__</code> method if they want to be formatted in a special way.</span>
