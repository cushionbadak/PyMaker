<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/7564899/python-equivalent-to-c-strtod">Python equivalent to C strtod</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to write a function that splits a string containing a floating-point number and some units. The string may or may not have spaces between the number and the units.</p>
<p>In C, the function <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/strtod.html" rel="nofollow noreferrer"><code>strtod</code></a> has a very handy parameter, named <code>endptr</code> that allows you to parse-out the initial part of a string, and get a pointer to the remainder. Since this is exactly what I need for this scenario, I was wondering if there is a similar functionality buried somewhere in Python.</p>
<p>Since <code>float</code> itself does not currently offer this functionality, I am using a regex solution based on <a href="https://stackoverflow.com/a/4703508/2988730">https://stackoverflow.com/a/4703508/2988730</a>:</p>
<pre><code>float_pattern = re.compile(r'[+-]?(?:(?:\d+\.?)|(?:\d*.\d+))(?:[Ee][+-]?\d+)')
def split_units(string):
    match = float_pattern.match(string)
    if match is None: raise ValueError('not a float')
    num = float(match.group())
    units = string[match.end():].strip()
    return num, units
</code></pre>
<p>This is not completely adequate for two reasons. The first is that it reinvents the wheel. The second is that it is not properly locale-aware without adding additional complexity (which is why I don't want to reinvent the wheel in the first place).</p>
<p>For the record, the tail of the string can not contain any characters that a number would contain. The only real issue is that I am not requiring units to be separated from numbers by a space, so doing a simple <code>string.split(maxsplit=1)</code> won't work.</p>
<p>Is there a better way to get a floating point number out of the beginning of the string, so I can process the rest as something else?</p>
</div>
<div class="post-text" itemprop="text">
<p>I know this is a stupid solution, but how about this:</p>
<pre><code>def float_and_more(something):
    orig = something
    rest = ''
    while something:
        try:
            return float(something), rest                  
        except ValueError:
            rest = something[-1] + rest                    
            something = something[:-1]                     
    raise ValueError('Invalid value: {}'.format(orig))
</code></pre>
<p>And you could use it like this:</p>
<pre><code>&gt;&gt;&gt; float_and_more('2.5 meters')
(2.5, 'meters')
</code></pre>
<p>If you would want to use this for real, you'd probably use <code>io.StringIO</code> instead of constantly recreating the strings.</p>
</div>
<span class="comment-copy"><code>locale.atof</code>? I've never used it and don't know how comprehensive ti is.</span>
<span class="comment-copy"><code>float</code> itself isn't locale-aware. If you want locale-awareness, you want something like <a href="https://docs.python.org/3/library/locale.html" rel="nofollow noreferrer"><code>locale.atof</code></a>, which is going to reject some things that <code>float</code> accepts.</span>
<span class="comment-copy">Yup. It's a dupe. Too bad there aren't any decent answers there...</span>
<span class="comment-copy">I closed the question, it's an exact duplicate. I'm afraid you're stuck with regexes. The dupe link proposes to reimplement the function from the C source of float parsing... yeah, why not?</span>
<span class="comment-copy">@Jean-FrançoisFabre. Probably. I'll post an answer to the other question if I find anything better...</span>
<span class="comment-copy">hey same idea :)</span>
<span class="comment-copy">@Jean-FrançoisFabre. And same comment. Binary search going to work better for long strings, and honestly, this does not sound like a good way to do it at all.</span>
