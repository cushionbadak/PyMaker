<div class="post-text" itemprop="text">
<p>I am on Windows 10, 64 bit, using CPython, Release 3.6.5.</p>
<p>The above quoted documentation states in section <a href="https://docs.python.org/3/library/ctypes.html#surprises" rel="nofollow noreferrer"><em>Surprises</em></a> that <code>s.value is s.value</code> returns <code>False</code>. But on my machine it returns <code>True</code>:</p>
<pre><code>Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 17:00:18) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; s = c_char_p
&gt;&gt;&gt; s.value = 'abc def ghi'
&gt;&gt;&gt; s.value
'abc def ghi'
&gt;&gt;&gt; s.value is s.value
True
&gt;&gt;&gt;
</code></pre>
<p>Is the relevant documentation outdated or am I missing something?</p>
<p>My original post has a crucial bug. I am missing the trailing parentheses in <code>s = c_char_p</code>.
Here is the corrected version, also taking into account the difference between byte strings and Unicode strings.</p>
<pre><code>from ctypes import *

s = c_char_p()              # bytes string
# s = c_wchar_p()           # Unicode string                 
s.value = b'abc def ghi'    # if bytes string
# s.value = 'abc def ghi'   # if Unicode string
# print(s.value)
print(s.value is s.value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is my own answer to my own question as a bottom line to this discussion:</p>
<p>No, <em>The Python Library Reference, Release 3.6.5, paragraph 16.16 ctypes â€” A foreign function library for Python</em> is not partially outdated. But it is afflicted with at least 2 editorial slips.</p>
<p>Although this question was caused by a silly mistake of mine, the comments and answers--some deleted by that time--have revealed that Python's transition from byte strings to Unicode strings has not been fully followed:</p>
<p>The code snippets in <em>Incomplete Types</em> use a <code>c_char_p</code> but assign Unicode strings to it, resulting in a <code>TypeError</code>. The same pertains to the last code snippet in <em>Surprises</em>.</p>
<p>These minor flaws are indeed worth mentioning. To quote <em>Davis King</em>, the creator of the <em>Dlib C++ Library</em>, which, BTW, offers a Python API:
<em>I consider the documentation to be the most important part of the library. So if you find anything that isn't documented, isn't clear, or has out of date documentation, tell me and I will fix it.</em> (<a href="http://dlib.net/" rel="nofollow noreferrer">http://dlib.net/</a>)</p>
<p>(Yes, I have sent an e-mail to "docs@python.org".)</p>
</div>
<span class="comment-copy">Typo: You forgot to <i>call</i> <code>c_char_p</code>. The code in the docs is <code>s = c_char_p()</code>.</span>
<span class="comment-copy">@Aran-Fey: You are right, of course. Apologies! BTW, on my machine either the type has to be <i>c_wchar_p</i> or the string must read <i>b'abc def ghi'</i>.</span>
<span class="comment-copy">@Werner Wenzel please edit your question to fix the typo because it looks from these comments like you just forgot the function call, but actually this doesn't solve the problem and the result is still <code>True</code> (in my tests anyway).</span>
<span class="comment-copy">I couldn't reproduce it with <i>Python3.6.2</i> (or older). Also, assigning a string to <code>s.value</code> raised a <code>TypeError</code> (because in <i>Python3</i>, chars are wider than 8bit), so I had to use either <code>.encode()</code> or a bytes literal.</span>
<span class="comment-copy">@WernerWenzel You should delete the question then.</span>
