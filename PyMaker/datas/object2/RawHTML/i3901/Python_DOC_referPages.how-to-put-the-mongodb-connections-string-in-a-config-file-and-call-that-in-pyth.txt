<div class="post-text" itemprop="text">
<p>I have a command line script that I run with a lot of arguments. I have now come to a point where I have too many arguments, and I want to have some arguments in dictionary form too.</p>
<p>So in order to simplify things I would like to run the script with a settings file instead. I don't really know what libraries to use for the parsing of the file. What's the best practice for doing this? I could of course hammer something out myself, but if there is some library for this, I'm all ears.</p>
<p>A few 'demands':</p>
<ul>
<li>Rather than using <code>pickle</code> I would like it to be a straight forward text file that can easily be read and edited.</li>
<li>I want to be able to add dictionary-like data in it, i.e., some form of nesting should be supported.</li>
</ul>
<p>A simplified pseudo example file:</p>
<pre><code>truck:
    color: blue
    brand: ford
city: new york
cabriolet:
    color: black
    engine:
        cylinders: 8
        placement: mid
    doors: 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can have a regular Python module, say config.py, like this:</p>
<pre><code>truck = dict(
    color = 'blue',
    brand = 'ford',
)
city = 'new york'
cabriolet = dict(
    color = 'black',
    engine = dict(
        cylinders = 8,
        placement = 'mid',
    ),
    doors = 2,
)
</code></pre>
<p>and use it like this:</p>
<pre><code>import config
print config.truck['color']  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The sample config you provided is actually valid <a href="http://yaml.org" rel="noreferrer">YAML</a>.  In fact, YAML meets all of your demands, is implemented in a large number of languages, and is extremely human friendly.  I would highly recommend you use it.  The <a href="http://pyyaml.org/wiki/PyYAMLDocumentation" rel="noreferrer">PyYAML project</a> provides a nice python module, that implements YAML.  </p>
<p>To use the yaml module is extremely simple: </p>
<pre><code>import yaml
config = yaml.safe_load(open("path/to/config.yml"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I Found this the most useful and easy to use
<a href="https://wiki.python.org/moin/ConfigParserExamples">https://wiki.python.org/moin/ConfigParserExamples</a></p>
<p>You just create a "myfile.ini" like:</p>
<pre><code>[SectionOne]
Status: Single
Name: Derek
Value: Yes
Age: 30
Single: True

[SectionTwo]
FavoriteColor=Green
[SectionThree]
FamilyName: Johnson

[Others]
Route: 66
</code></pre>
<p>And retrieve the data like:</p>
<pre><code>&gt;&gt;&gt; import ConfigParser
&gt;&gt;&gt; Config = ConfigParser.ConfigParser()
&gt;&gt;&gt; Config
&lt;ConfigParser.ConfigParser instance at 0x00BA9B20&gt;
&gt;&gt;&gt; Config.read("myfile.ini")
['c:\\tomorrow.ini']
&gt;&gt;&gt; Config.sections()
['Others', 'SectionThree', 'SectionOne', 'SectionTwo']
&gt;&gt;&gt; Config.options('SectionOne')
['Status', 'Name', 'Value', 'Age', 'Single']
&gt;&gt;&gt; Config.get('SectionOne', 'Status')
'Single'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yaml and Json are the simplest and most commonly used file formats to store settings/config. PyYaml can be used to parse yaml. Json is already part of python from 2.5. Yaml is a superset of Json. Json will solve most uses cases except multi line strings where escaping is required. Yaml takes care of these cases too.</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; config = {'handler' : 'adminhandler.py', 'timeoutsec' : 5 }
&gt;&gt;&gt; json.dump(config, open('/tmp/config.json', 'w'))
&gt;&gt;&gt; json.load(open('/tmp/config.json'))   
{u'handler': u'adminhandler.py', u'timeoutsec': 5}
</code></pre>
</div>
<span class="comment-copy">The particular syntax of this example file is actually YAML, check Benson's answer.</span>
<span class="comment-copy">This is a pretty bad idea as if you want to allow low-privileged users to be able to change configuration files only, this way you're essentially allowing them to sneak in privileged code.</span>
<span class="comment-copy">Allowing "low-privileged" users to change config for a more privileged program is probably a questionable setup anyway.</span>
<span class="comment-copy">You may also run into issues packaging your project for deployment using a tool such as py2app.  The user may not be able to edit the configuration file once it's distributed since it would invalidate the app's signature.</span>
<span class="comment-copy">The main disadvantage with this (otherwise very convenient option) is that <code>.py</code> files are executable, so any kind of code could be run while trying to load the configuration through <code>import</code>. That's unacceptable from a security standpoint.</span>
<span class="comment-copy">Can't a version of this be done safely with <code>ast.literal_eval</code>? <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">docs.python.org/3/library/ast.html#ast.literal_eval</a></span>
<span class="comment-copy">yaml is always something I turn to; the format can be from dead simple to supporting embedded python code, and the standard library does the heavy lifting of parsing and sanitation for you.</span>
<span class="comment-copy">Agreed. For you or users writing YAML, <a href="http://camel.readthedocs.org/en/latest/yamlref.html" rel="nofollow noreferrer">here is the best YAML reference that I know of</a>. The <a href="http://yaml.org/" rel="nofollow noreferrer">official documentation</a> is unfortunately a spec aimed at implementers, and nothing else, but Eevee's guide is fantastic.</span>
<span class="comment-copy">For us uninitiated, that's <code>pip3 install pyyaml</code> to get it ready to import into python scripts.</span>
<span class="comment-copy">For Python 3 use the <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">configparser</a> module instead (all lowercase)</span>
<span class="comment-copy">This is the fastest, clearest and easiest to implement solution, since there is no implementation, just usage. :)  Thank You!</span>
<span class="comment-copy">While more or less equivalent, json isn't nearly as human readable as yaml.  Since his sample config is actually valid yaml, I'd stress that instead of json.</span>
<span class="comment-copy">Using "json.dump(config, fp, sort_keys=True, indent=4)" improves readability.</span>
<span class="comment-copy"><a href="https://gist.github.com/nadya-p/b25519cf3a74d1bed86ed9b1d8c71692" rel="nofollow noreferrer">A simple python class loading its data members from a JSON file in RAII manner</a></span>
