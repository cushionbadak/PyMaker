<div class="post-text" itemprop="text">
<p>I've just started in python and with threading module. I used forks in C and the behaviour is that when fork is executed both threads keep on the same line of code. I was wondering how can I do that since I'm not able to do it. If I do not specify a target program does nothing on thread.start(). Is there any way to do that?. My code line is in main I have actually this code:</p>
<pre><code>t = threading.Thread()
b = threading.Thread()
t.start()
b.start()
print(threading.current_thread())
</code></pre>
<p>Since Thread has no target they do not run but I don't know how to set target to that line of code that I'm currently executing</p>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="https://docs.python.org/2/library/threading.html#thread-objects" rel="nofollow noreferrer">Thread Objects</a> </p>
<pre><code>import threading


def my_target():
    print "target runing:", threading.current_thread()

t = threading.Thread(target=my_target)
t.start()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Forking doesn't create another thread. It creates another child process, with its own pid, this is also the case in C. You can reproduce C's fork behavior using <code>os.fork()</code> (<a href="https://docs.python.org/2/library/os.html#os.fork" rel="nofollow noreferrer">link to the doc</a>). It will fork your process return the pid which will allow you to run different code depending on the process.</p>
<p>If you want to use threads, using the <code>threading</code> module, I strongly suggest you start by thoroughly reading the <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">documentation</a>. You will see that you need to give a target function to execute to your <code>Thread</code> objects.</p>
</div>
<span class="comment-copy">Why would you want the fork behaviour from 'C'? Just define some functions and pass their names to different <code>Thread</code> objects.</span>
<span class="comment-copy">With that, target is defined to a funcion not the same line of code where thread is called as i would like (same as it would be with fork() in unix)</span>
<span class="comment-copy">@muniategui: It can't be done. A line of code is not an object that can be referred to.</span>
<span class="comment-copy">@muniategui You can't refer to a line of code in python.</span>
<span class="comment-copy">The problem is that i'm on windows. Should i use multiprocessing module instead of threading?</span>
<span class="comment-copy">The multiprocessing module has the same kind of interface as threading. The difference is that the functions are executed in a different process rather that a different thread, which implies that some inter-process communication take place. This won't give you access to the kind of developing patterns you are looking for and that resemble C's forks. Maybe you should rethink the design of your program to fit the Threading/multiprocessing patterns.</span>
