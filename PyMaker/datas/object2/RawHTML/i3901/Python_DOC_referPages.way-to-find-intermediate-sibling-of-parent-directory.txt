<div class="post-text" itemprop="text">
<p>I have this directory tree:</p>
<p><code>C:\A\B\C\D\E\F\myfile.py</code></p>
<p>I want to insert a directory for my packages like this:</p>
<pre><code>import sys
local_package_dir = 'C:\A\B\C\PythonPackages'
sys.path.insert(0, local_package_dir)
</code></pre>
<p>My problem is that many people are using various drive names (D:, E:, etc.)</p>
<p>How can I dynamically traverse up directories and get to <code>A\B\C</code> without caring what the root level drive is called?</p>
<p>I'm aware of <code>__file__</code>, but which combination of <code>os</code> functions will help me go up to the right level?</p>
</div>
<div class="post-text" itemprop="text">
<p>Look at pathlib. Its the new better replacement of <code>os.path</code></p>
<p>You can use paths as objects. .parts would have what you need.</p>
<pre><code>import pathlib
p = pathlib.PureWindowsPath('c:/Program Files/PSF')
&gt;&gt;&gt; p.parts
('c:\\', 'Program Files', 'PSF')

p = pathlib.PureWindowsPath('c:/A/B/C/D').parts[1:]
&gt;&gt;&gt; -p.parts
('A', 'B', 'C', 'D')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/os.html" rel="nofollow noreferrer"><code>os.path.pardir</code></a> as a reference to the parent dir (essentially <code>..</code>) and then use <a href="https://docs.python.org/3/library/os.path.html#os.path.join" rel="nofollow noreferrer"><code>os.path.join()</code></a> to move up your path in a relative manner, and finally <a href="https://docs.python.org/3/library/os.path.html#os.path.normpath" rel="nofollow noreferrer"><code>os.path.normpath()</code></a> to normalize your path e.g. from <code>C:\\A\\B\\C\\D\\E\\F\\myfile.py</code> to get to <code>C:\\A\\B\\C</code> you can do something like:</p>
<pre><code>current_file = "C:\\A\\B\\C\\D\\E\\F\\myfile.py"  # or __file__ if running from myfile.py
path = os.path.dirname(current_file)  # get the file's directory
c_dir = os.path.normpath(os.path.join(path, os.path.pardir, os.path.pardir, os.path.pardir))
# C:\A\B\C
</code></pre>
<p>On Python 3.4+ you can also use <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> to make these mundane path operations more bearable.</p>
</div>
<span class="comment-copy">Are you looking for <a href="https://docs.python.org/3/library/os.path.html?highlight=splitdrive#os.path.splitdrive" rel="nofollow noreferrer"><code>os.path.splitdrive</code></a>?</span>
<span class="comment-copy">The problem exists earlier: <b>do not do <code>sys.path.insert(...)</code></b>.  Install your packages normally, with pip, so they go to site-packages dir.</span>
<span class="comment-copy">pip on the remote machine where this code runs fails horribly and I'm in DLL hell, so I have to put the packages in from our source control directories</span>
<span class="comment-copy">So fix the pip installation first, it's not rocket science. You will only dig yourself deeper into a pit this way..</span>
<span class="comment-copy">I spent 16 hours fiddling with pip and package versions/dependencies and gave up. I'm not a sys admin, I just need code that runs.</span>
<span class="comment-copy">combining this with <a href="https://docs.python.org/3/library/pathlib.html?highlight=pathlib#pathlib.PurePath.parents" rel="nofollow noreferrer"><code>PurePath.parents</code></a> is probably perfect</span>
<span class="comment-copy">This worked great, thanks</span>
