<div class="post-text" itemprop="text">
<p>I want to download files from remote server using Paramiko with multithreading.</p>
<p>There are two solution came into my mind, but I'm not sure which is right (or better).</p>
<p><strong>Solution 1:</strong>
Assuming that the <code>SFTPClient.get</code> is thread safe (But I can't find any document mentioned that), a simple one would as:</p>
<pre><code>from paramiko import SSHClient, AutoAddPolicy, SFTPClient
from concurrent.futures import ThreadPoolExecutor
from typing import List

client = SSHClient()
ciient.set_missing_host_key_policy(AutoAddPolicy())
client.connect( ... )
sftp = client.open_sftp()

files_to_download: List[str] = ...

with ThreadPoolExecutor(10) as pool:
    pool.map(lambda fn: sftp.get(fn, fn), files_to_download)
</code></pre>
<p><strong>Solution 2:</strong> There are two questions in <strong>Solution 1</strong></p>
<ol>
<li>Is the Paramiko's API really thread-safe?</li>
<li>Is it efficient to download multi-files via a single connection?</li>
</ol>
<p>So here is my second solution:</p>
<pre><code>from paramiko import SSHClient, AutoAddPolicy, SFTPClient
from concurrent.futures import ThreadPoolExecutor
from threading import Lock, local
from typing import List

client = SSHClient()
ciient.set_missing_host_key_policy(AutoAddPolicy())
client.connect( ... )
thread_local = local()
thread_lock  = Lock()

files_to_download: List[str] = ...

def download(fn: str) -&gt; None:
    """
    thread-safe and each thread has its own SFTPClient
    """
    if not hasattr(thread_local, 'sftp'):
        with thread_lock:
            thread_local.sftp = client.open_sftp()
    thread_local.sftp.get(fn, fn)

with ThreadPoolExecutor(10) as pool:
    pool.map(download, files_to_download)
</code></pre>
<p>Which solution is better?</p>
</div>
<div class="post-text" itemprop="text">
<p>Paramiko is not thread safe. </p>
<p>Using multiple threads over one connection would not give you any performance benefit anyway. </p>
<p>You have to open a separate connection per thread. </p>
</div>
<span class="comment-copy">You have to make as many connection as the number of threads, I think.</span>
<span class="comment-copy">Found a similar question here : <a href="https://stackoverflow.com/questions/48434552/multithreading-for-paramiko" title="multithreading for paramiko">stackoverflow.com/questions/48434552/â€¦</a></span>
<span class="comment-copy">Note: you can use <a href="https://docs.python.org/3/library/contextlib.html#utilities" rel="nofollow noreferrer">contextlib.closing</a> to close your connections.</span>
<span class="comment-copy">Thanks @LaurentLAPORTE, but the question you mentioned is not the same with mine. My task is to download files from <b>the same server</b>, you mentioned question is to connect many servers.</span>
<span class="comment-copy">Is my second solution ok enough? Do I have to create a separate SSHClient per thread (rather than just open a separate SFTPClient with a common SSHClient)?</span>
<span class="comment-copy">Separete SSH client is needed, imo.</span>
