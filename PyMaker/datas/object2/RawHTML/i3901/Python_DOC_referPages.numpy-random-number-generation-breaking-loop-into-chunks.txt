<div class="post-text" itemprop="text">
<p>A question regarding the generation of random numbers in Numpy.</p>
<p>I have a code which does the following:</p>
<pre><code>import numpy as np

for i in range(very_big_number):

    np.random.randn(5)

    # other stuff that uses the generated random numbers
</code></pre>
<p>since unfortunately <code>very_big_number</code> can really be a very large number, I wanted to break this loop into chunks, say e.g. call <code>10 times</code> the same </p>
<pre><code>for i in range(very_big_number/10):

    np.random.randn(5)

    # other stuff that uses the generated random numbers
</code></pre>
<p>and then collate all the output together. However, I want to make sure that this division into blocks preserves the randomness of my generated numbers.</p>
<p>My question is:reading the numpy docuemntation or equivalently 
<a href="https://stackoverflow.com/questions/21494489/what-does-numpy-random-seed0-do">this</a> question on StackOverflow, I would be tempted to think that it is enough to just divide the loops and run the subloops on e.g. ten different cores at the same time. However I would like to know if that is correct or if I should set some random number seed and if so, how.</p>
</div>
<div class="post-text" itemprop="text">
<p>Dividing the loop.... the randomness is questionable....</p>
<p>Instead go for parallel processing....</p>
<p>Try below said "Joblib" library or any other library if you know for parallel processing....</p>
<p><a href="https://pythonhosted.org/joblib/parallel.html" rel="nofollow noreferrer">https://pythonhosted.org/joblib/parallel.html</a></p>
<blockquote>
<p>Joblib provides a simple helper class to write parallel for loops
  using multiprocessing</p>
</blockquote>
</div>
<span class="comment-copy">If you are going to use multiple different processes then you need to call <code>np.random.seed</code>, or otherwise the generated numbers will be the same (since the seed is copied to the new processes). You can create a random array of numbers in the parent process and pass the values to the children to use as seed. There are several questions about it in SO.</span>
<span class="comment-copy">would <code>np.random.seed()</code> called at the beginning of each "subloop" work?</span>
<span class="comment-copy">If by "subloop" you mean a function that is offloaded to another process (e.g. using <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer"><code>multiprocessing</code></a> or <a href="https://pythonhosted.org/joblib/" rel="nofollow noreferrer">Joblib</a>) then yes, that's right.</span>
<span class="comment-copy">@jdehesa I mean that yes, or even physically run it on another computer</span>
<span class="comment-copy">That's indeed what I want to use, but dividing the loop. Say I divide <code>100</code> into <code>10</code> times <code>10</code> and launch each time on a core, using joblib. Do you know if I should add any seed?</span>
<span class="comment-copy">If you specify seed, you will notice a repeated set.... if you want that you can..</span>
<span class="comment-copy">and more over, if you want to use seed....do not go with joblib as the documentation says seed is not thread safe</span>
