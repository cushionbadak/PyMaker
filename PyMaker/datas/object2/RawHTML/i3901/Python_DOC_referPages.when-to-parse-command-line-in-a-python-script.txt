<div class="post-text" itemprop="text">
<p>Should sys.argv for checking command line arguments be done in the beginning of a script, after the import statements? </p>
<p>Is it acceptable to check for a command line argument anywhere but the start of a script? I couldn't find it in PEP8.</p>
</div>
<div class="post-text" itemprop="text">
<p>PEP8 is about <em>code style</em>, not the algorithms that code implements. It's completely up to you.</p>
<p>More often that not, a program needs the result of its command line parsing early so that it knows what to do. If the command line includes logging options, you probably need it ASAP 'cuz you need to set up logging ASAP to, like, log <em>any unhandled exceptions</em> that can occur anywhere -- or you won't know about them <s>if</s>when they happen!<br/>
That's the sole reason why command line is usually parsed early.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes <strong>@ovunctuzel</strong>, it is totally up to you to decide the point/location of use of <strong>sys.argv</strong> in your code/script.</p>
<blockquote>
<p>Always perform <strong>input checks</strong> and <strong>validations</strong> at the beginning i.e. have validated inputs before <strong>moving forward/continue</strong> with the execution of latter parts of code. It will reduce the chance of <strong>crash</strong>.</p>
</blockquote>
<p><strong>sys.argv</strong> is a list containing the <strong>command line arguments</strong>.</p>
<p><strong>sys.argv[0]</strong> is name of the python source  file, the first <strong>command line argument</strong> (required).</p>
<blockquote>
<p>If your script deals with <strong>command line arguments</strong> and is based on these arguments then it's better to write the code at the beginning of script.</p>
</blockquote>
<p>Have a look at the below great links about the use of <strong>sys</strong> module, <strong>sys.argv</strong> list etc. You can make great applications based on this concept in addition with exception handling. It's super.</p>
<blockquote>
<p><strong>References</strong>: <a href="http://www.pythonforbeginners.com/system/python-sys-argv" rel="nofollow noreferrer">http://www.pythonforbeginners.com/system/python-sys-argv</a></p>
<p><a href="http://www.pythonforbeginners.com/argv/more-fun-with-sys-argv" rel="nofollow noreferrer">http://www.pythonforbeginners.com/argv/more-fun-with-sys-argv</a></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>As a general rule of thumb, you want to <em>parse</em> all of the arguments up front. But <em>parsing</em> them immediately doesn't necessarily mean <em>processing</em> them immediately, or even <em>validating</em> them.</p>
<p>When you're just using a bunch of strings out of <code>sys.argv</code> there <em>is</em> no parsing, so this doesn't come up. But non-trivial programs often have flags, or numeric arguments, or named sub-commands, etc. If you're not using a third-party library like <a href="https://github.com/pallets/click" rel="nofollow noreferrer"><code>click</code></a> or <a href="https://cmd2.readthedocs.io/en/latest/" rel="nofollow noreferrer"><code>cmd2</code></a>, you probably want to use <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a>. And then the distinction is pretty clear.</p>
<p>So, when do you <em>use</em> the argumetn? As <a href="https://stackoverflow.com/a/50430863/908494">ivan_pozdeev explains</a>, you pretty much need to handle a log-level flag as soon as possible. But that doesn't apply to everything. Consider a typical Unix command-line tool like <code>cat</code>:</p>
<pre><code>$ cat file1 nonexistentfile file2
contents of file1
cat: nonexistentfile: No such file or directory
contents of file2
</code></pre>
<p>It didn't validate all three files and give me an error; it tried the three files one by one, giving me errors on the ones that failed (to <code>stderr</code>), and output on the ones that didn't (to <code>stdout</code>). This is often a lot more useful than validating all the files up front. <code>cat -q</code>, on the other hand, would fail up-front for an unknown flag.</p>
<p>In Python, that would look like:</p>
<pre><code>import argparse
import sys

def cat(file, number):
    with open(file) as f:
        for num, line in enumerate(file):
            if number: print(f'{num}', end=' ')
            print(line)

if __name__ == '__main__'
    parser = argparse.ArgumentParser()
    parser.add_argument('filenames', metavar='file', nargs='+',
                        help='files to concatenate')
    parser.add_argument('-n', '--number', action='store_true',
                        help='number the output lines')
    for arg in args.filenames:
        try:
            cat(arg, args.number)
        except Exception as e:
            print(f'{prog}: {arg}: {e}', file=sys.std.stdout)
</code></pre>
<p>This is a pretty typical organizationâ€”but it's just "rule of thumb":</p>
<ul>
<li>This is <em>usually</em> the order you <em>want</em> to do things in.</li>
<li>The textual layout of your program will <em>often</em> follow the sequencing order of what it does.</li>
<li>Therefore, you'll frequently end up writing things this way.</li>
</ul>
<p>If you have a good reason to do things in a different order, maybe that should raise a minor flag to make you double-check your reasons. But once you've thought it through, definitely violate the rule of thumb. If you have some processing that's always worth doing before even looking at the arguments, that will have been valid even if you bail out with a <code>usage</code> message, then do it. Python won't stop you.</p>
<p>And as for readability: If you're doing something a little unusual, the fact that your code organization is a tiny bit unusual is, if anything, a useful signal to the reader.</p>
</div>
<span class="comment-copy">This is not something pep8 will prescribe.  Do it where you need to do it.</span>
<span class="comment-copy">As a rule of thumb, the earlier you know that there is something wrong with your command line, the better. Knowing that a critical command line argument is missing will let you avoid doing unnecessary, potentially costly computations whose results will be discarded in the future, anyway.</span>
<span class="comment-copy">Sometimes you don't want to check all of the arguments in advance. For example, a Unix command-line tool like <code>cat</code> will concatenate the first three files, then show you an error on the fourth file, then concatenate the last one, rather than immediately giving you the error on the fourth file and exiting.</span>
<span class="comment-copy">But nevertheless, consider <a href="https://gist.github.com/abarnert/c0aa91888e49daa2c9713546855b97d3" rel="nofollow noreferrer">this</a>: It still does all the argument <i>parsing</i> immediately, but it doesn't go through all of the files and options immediately; it iterates over the files one by one, the same way the standard command-line tool does. This is a pretty typical design.</span>
