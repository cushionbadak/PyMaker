<div class="post-text" itemprop="text">
<p>I have an abstract base class <code>Bicycle</code>:</p>
<pre><code>from abc import ABC, abstractmethod

class Bicycle(ABC):

    def __init__(self, cadence = 10, gear = 10, speed = 10):
        self._cadence = cadence
        self._gear = gear         
        self._speed = speed

    @abstractmethod
    def ride(self):
        pass

    def __str__(self):
        return  "Cadence: {0}  Gear: {1}  Speed: {2}".format(self._cadence, 
                                                             self._gear, self._speed)
</code></pre>
<p>and a subclass <code>MountainBike</code>:</p>
<pre><code>from Bicycle import Bicycle

class MountainBike(Bicycle):

    def __init__(self):
        super().__init__(self)


    def ride(self):
        return "Riding my Bike"
</code></pre>
<p>The following code will cause a <a href="https://stackoverflow.com/questions/21392135/python-maximum-recursion-depth-exceeded-when-printing-custom-exception">recursion error</a>, but if I remove <code>self</code> from the <code>super().__init__(self)</code>, the call to <code>__str__(self):</code> works.</p>
<p><strong>Question:</strong></p>
<ol>
<li><p>I only discovered this error when I implemented the <code>__str__(self):</code> </p>
<p>In Python 3.x when calling the parent constructor from the child with no arguments, is passing <code>self</code>, necessary?</p></li>
<li><p>Suppose <code>MountainBike</code> now sets the <code>cadence</code>, <code>gear</code>, <code>speed</code> this means in my subclass the constructor will look like this:</p>
<pre><code>class MountainBike(Bicycle):

    def __init__(self, cadence, gear, speed):
        super().__init__(cadence,gear,speed)
</code></pre></li>
</ol>
<p>notice, <code>self</code> isn't being passed in the <code>super</code> because to my knowledge, it can throw the variable assignments off. Is this assumption correct?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>self</code> is passed implicitly to the super call, so adding it explicitly sends it twice:</p>
<pre><code>def __init__(self):
    super().__init__(self)
</code></pre>
<p>That ends up calling <code>Bicycle(self, self)</code>, which is the same as <code>Bicycle(self, cadence=self)</code>.</p>
<p>Later on, you have probably tried convert your instance to <code>str</code> (e.g. to print it), so this was called:</p>
<pre><code>def __str__(self):
    return  "Cadence: {0}  Gear: {1}  Speed: {2}".format(self._cadence, 
                                                         self._gear, self._speed)
</code></pre>
<p>That code tried to convert <code>self._cadence</code> to a string and <code>self._cadence</code> is <code>self</code> because of the previous error, so it continues in an endless recursion (until the recursion exception).</p>
<hr/>
<p>Note that <code>super()</code> takes two forms: with arguments and without arguments, so there are two correct ways to fix the code.</p>
<p>The Python 3 way (without arguments):</p>
<pre><code>def __init__(self):
    super().__init__()
</code></pre>
<p>The old Python 2 way, which is more explicit:</p>
<pre><code>def __init__(self):
    super(MountainBike, self).__init__()
</code></pre>
<p>Both do the same, i.e. they give you the bound <code>__init__</code> method which already has the implicit <code>self</code>.</p>
<p>See also here: <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#super</a></p>
</div>
<span class="comment-copy">In python 3 the <code>self</code> is not needed as I believe that <code>super</code> does that for you, so: <code>super().__init__()</code> is sufficient (plus <code>cadence,gear,speed</code> as needed in your case).</span>
<span class="comment-copy">So, either way, with or without arguments, passing <code>self</code> isn't necessary, correct?</span>
<span class="comment-copy">That's correct.</span>
<span class="comment-copy">According to the official documentation, it is listed as mandatory. <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#object.__init__</a></span>
<span class="comment-copy">Right. It is mandatory in the first <code>__init__</code> but should be omitted in the <code>super().__init__()</code> because it is already implicitly passed there.</span>
<span class="comment-copy">So, either way, with or without arguments, passing <code>self</code> isn't necessary, correct?</span>
<span class="comment-copy">@Sveta Exactly. Don't pass <code>self</code>.</span>
