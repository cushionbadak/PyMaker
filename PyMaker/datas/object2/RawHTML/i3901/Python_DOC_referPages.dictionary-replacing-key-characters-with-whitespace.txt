<div class="post-text" itemprop="text">
<p><strong>I have a dictionary that looks like this:</strong></p>
<pre><code>result =  {'Mars': 1358996659, 'Snickers': 26100257, 'Ben%and%Jerry's': 102656, 'Tootsie%roll': 3825986}
</code></pre>
<p>I want to remove the <strong>'%'</strong> and replace it with a whitespace instead. </p>
<p><strong>I've tried iterating over the list like so:</strong></p>
<pre><code>for key in result:
if "%" in key:
    key.replace("%"," ")
    print(key)
</code></pre>
<p>But it didn't work. I've also experimented with other loops, but nothing seems to work for me.</p>
<p><strong>I would like to end up with a dictionary that looks like this:</strong></p>
<pre><code>result =  {'Mars': 1358996659, 'Snickers': 26100257, 'Ben and Jerry's': 102656, 'Tootsie roll': 3825986}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionary comprehension</a> to build a new dictionary, so you can replace the keys in one go:</p>
<pre><code>result = {key.replace('%', ' '): value for key, value in result.items()}
</code></pre>
<p>The comprehension consists of:</p>
<ul>
<li>an expression to generate a key, the part before the <code>:</code></li>
<li>an expression to generate a value, the part after <code>:</code> but before the <code>for</code></li>
<li>a <code>for</code> loop; you'll get as many <code>key-value</code> pairs as the <code>for</code> loop iterates (unless you add more <code>for</code> loops or <code>if</code> filters).</li>
</ul>
<p>Your own solution didn't work, because <code>str.replace()</code> creates a <em>new</em> string object and returns that. The old string is never changed, because strings are <em>immutable</em>; they can't be altered in-place. If you wanted to do the work in a loop, you'd have to:</p>
<ul>
<li>store the result of the <code>str.replace()</code> operation.</li>
<li>remove the old key (storing the value that it referenced temporarily)</li>
<li>add the new key to the dictionary, making it point to the value for the old key.</li>
</ul>
<p>However, looping over a dictionary <em>while mutating it</em> (deleting and adding keys is mutating), is not safe and thus not supported. You'd have to loop over a copy of the keys; create one with <code>list(result)</code>:</p>
<pre><code>for key in list(result):
    if '%' in key:
        new_key = key.replace('%', ' ')
        value = result.pop(key)  # remove the old key, store the value
        result[new_key] = value
</code></pre>
<p>Re-generating the dictionary with a dictionary comprehension is just easier, at this point.</p>
<p>Note that in <em>both approaches</em>, you can end up with fewer keys if replacing <code>'%'</code> with <code>' '</code> leads to collisions! Which <em>value</em> remains after processing depends on which now-duplicate key was processed last.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>You can't change dictionary keys in place. You have to create a new dictionary, at least temporarily.</li>
<li>This: <code>key.replace("%"," ")</code> doesn't do what you think it does. It doesn't change <code>key</code>, it returns a <em>new</em> value.</li>
</ol>
<p>I had to fix your data, like this:</p>
<pre><code>&gt;&gt;&gt; result =  {'Mars': 1358996659, 'Snickers': 26100257, "Ben%and%Jerry's": 102656, 'Tootsie%roll': 3825986}
</code></pre>
<p>Then:</p>
<pre><code>&gt;&gt;&gt; result2 = {}
&gt;&gt;&gt; for key, value in result.items():
        result2[key.replace("%"," ")] = value
&gt;&gt;&gt; result2
{'Tootsie roll': 3825986, "Ben and Jerry's": 102656, 'Snickers': 26100257, 'Mars': 1358996659}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The code below will store the replaced key in a variable and you can add it to the dictionary, while removing the old key and value from the dictionary. The following code should give you the output that you are looking for: </p>
<pre><code>result =  {'Mars': 1358996659, 'Snickers': 26100257, "Ben%and%Jerry's": 102656, 'Tootsie%roll': 3825986}

for key, value in result.items():
    if '%' in key:
       new_key = key.replace('%', ' ')
       del result[key]
       result[new_key] = value
print(result)
</code></pre>
<p>And here is your output:</p>
<pre><code>{'Mars': 1358996659, 'Snickers': 26100257, "Ben and Jerry's": 102656, 'Tootsie roll': 3825986}
</code></pre>
</div>
<span class="comment-copy">You have several good answers. But for future reference, remember that Python strings are immutable, thus string methods like <code>.replace</code> return a new string since they cannot affect the original. Also, there's no need to do the <code>if "%" in key</code> since <code>.replace</code> will do that test internally, and more efficiently.</span>
<span class="comment-copy">Thank you so much! I really appreciate the help, man :)</span>
<span class="comment-copy">You do not <i>have</i> to create a new dictionary. You can update the dictionary in-place, provided you create a copy of keys first.</span>
<span class="comment-copy">And isn't that at least a partial copy of the dictionary? And what about collisions?</span>
<span class="comment-copy">It's a list with references to the keys, so <i>technically</i>, perhaps yes, but it is <i>not a new dictionary</i>.</span>
<span class="comment-copy">Collisions are not an issue. You get fewer keys in the end.</span>
<span class="comment-copy">Umm, see if you can explain that in 4 lines of code to a novice who doesn't know how <code>str.replace()</code> works.</span>
