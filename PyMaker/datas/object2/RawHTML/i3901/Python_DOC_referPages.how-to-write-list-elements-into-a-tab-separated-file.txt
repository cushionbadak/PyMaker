<div class="post-text" itemprop="text">
<p>I have searched the web but I haven't found the answer for my problem:</p>
<p>I have a a dictionary with lists as elements and every list has a different length. For example like that:</p>
<pre><code>dict_with_lists[value1] = [word1, word2, word3, word4]
dict_with_lists[value2] = [word1, word2, word3]
</code></pre>
<p>My main problem is, that I want to write the list elements in to a file which should be tab-separated and if the list is finished it should write the new list in a new line.</p>
<p>I found a solution like that:</p>
<pre><code>with open('fname', 'w') as file:
   file.writelines('\t'.join(i) + '\n' for i in nested_list)
</code></pre>
<p>But it doesn't only separate the words with tabs but also the characters.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you're doing a list comprehension over the list inside of the dictionary. An alternative solution would be </p>
<pre><code>with open('fname', 'w') as file:
    for nested_list in dict_with_lists.values():
        for word in nested_list:
             file.write(word + '\t')
         file.write('\n')
</code></pre>
<p>\I'm just looping over the values of the dictionaries, which are lists in this case and joining them using a tab and writing a newline at the end of each list. I haven't tested it but theoretically I think it should work. </p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>nested_list</code> is one of your dictionary values, then you are applying <code>'\t'.join()</code> to the individual words. You'd want to join <em>the whole list</em>:</p>
<pre><code>file.write('\t'.join(nested_list) + '\n')
</code></pre>
<p>or, if you were to loop over the values of the dictionary:</p>
<pre><code>file.writelines(
    '\t'.join(nested_list) + '\n'
    for nested_list in dict_with_lists.values())
</code></pre>
<p>The above uses the <a href="https://docs.python.org/3/library/io.html#io.IOBase.writelines" rel="nofollow noreferrer"><code>file.writelines()</code> method</a> correctly; passing in an <em>iterable of strings to write</em>. If you were to pass in a single string, then you are only causing Python extra work as it loops over all the individual characters of that string to write those separately, after which the underlying buffer has to assemble those back into bigger strings again.</p>
<p>However, there is no need to re-invent the character-separated-values writing wheel here. Use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code> module</a>, setting the delimiter to <code>'\t'</code>:</p>
<pre><code>import csv

with open('fname', 'w', newline='') as file:
    writer = csv.writer(file, delimiter='\t')
    writer.writerows(dict_with_lists.values())
</code></pre>
<p>The above writes <em>all lists</em> in the <code>dict_with_lists</code> dictionary to a file. The <code>csv.writer()</code> object doesn't mind if your lists are of differing lengths.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to turn each <code>list</code> value in the dictionary into a string of tab-separated values that also have a <code>'\n'</code> newline character at the end of each one of them:</p>
<pre><code>value1, value2 = 'key1', 'key2'
dict_with_lists = {}
dict_with_lists[value1] = ['word1', 'word2', 'word3', 'word4']
dict_with_lists[value2] = ['word1', 'word2', 'word3']

fname = 'dict_list_values.tsv'

with open(fname, 'w') as file:
    file.writelines(
        '\t'.join(values)+'\n' for values in dict_with_lists.values()
    )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of jumping on an answering your question I'm going to give you a hint on how to tackle your actual problem.</p>
<p>There is another way to store data like that (dictionaries of non-tabular form) and it is by saving it in the JSON-string format.</p>
<pre><code>import json
with open('fname','w') as f:
    json.dump(dict_with_lists, f)
</code></pre>
<p>And then the code to load it would be:</p>
<pre><code>import json
with open('fname') as f:
    dict_with_lists = json.load(f)
</code></pre>
</div>
<span class="comment-copy">How is <code>dict_with_lists</code> related to <code>nested_list</code>?</span>
<span class="comment-copy">Also, in <i>what order</i> should those dictionary values be written? Is the key involved anywhere at all?</span>
<span class="comment-copy">"But it doesn't only separate the words with tabs but also the characters" This is a really terse sentence. Please rewrite this. Also, the issue with the <code>file.writelines</code> above is that <code>i</code> will necessarily be the key of your dictionary, not the list.</span>
<span class="comment-copy">Well it should work unless order of list is the concern</span>
<span class="comment-copy">Agreed, but I don't think he listed order as a concern so I just went with the most straightforward way that's also similar to what he already had.</span>
<span class="comment-copy">Thank you for the fast answer, it worked!! :D</span>
<span class="comment-copy">I just read that the order isn't contained, is it possible to keep it?  Also I noticed that I need to add the value for each list also to the beginning of the line, how should I change the code to also work for that case? The value is triple like (v1,v2,v3). I'm sorry I didn't clearify that earlier! @King</span>
<span class="comment-copy">It works, thank you again! :D  But now I'm not sure how to access the value of the dictionary and I tried out some options myself but it didn't kinda work... Sorry again for another question!</span>
<span class="comment-copy">Sure, but it's not clear if the OP wants the whole dictionary retained anyway.</span>
