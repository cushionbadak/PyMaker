<div class="post-text" itemprop="text">
<p>I have no idea what's happening there.
It's something so simple, but I've been experimenting for long and it's have no sense.</p>
<p>Here is the code:</p>
<pre><code>var = int( input( 'Select "2" o "3" (Write your answer). ' ))
while var != 1 &amp; var != 2:
    var = int (input( 'Invalid. You have to write "2" or "3". ' ))

print('You select', var)
</code></pre>
<p>If I answer the input <em>with 1</em>, it works, as is suposed to do. But when i answer <em>2, it enter in the loop</em>.
And <strong>the strangest part</strong> is that when i Write <em>0 it don't enter in the loop</em>!</p>
<blockquote>
<p>Someone has and idea of what can be happening. <strong>Maybe is an
  interpreter problem...</strong></p>
</blockquote>
<p>It's only a reduction of my problem, but I can't use the while loop by this way!!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>&amp;</code> and <code>and</code> are not the same operator in Python.</p>
<ul>
<li><code>and</code> means <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow noreferrer"><em>logical (aka boolean) and</em></a>, the one you want—it's truthy if both of its arguments are truthy.</li>
<li><code>&amp;</code> means <a href="https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations" rel="nofollow noreferrer"><em>bitwise and</em></a>—it returns a new number with <code>1</code> for every bit that was <code>1</code> in both arguments (e.g., <code>5 &amp; 3</code>, aka <code>0b101 &amp; 0b011</code>, is <code>1</code>, aka <code>0b001</code>, and <code>6 &amp; 1</code> is <code>0</code>—which is false, even though both arguments are true, because they don't share any bits in common). That's not what you want.</li>
</ul>
<p>On top of that, they have different <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">operator precedence</a> (notice that <code>and</code> comes above <code>!=</code> in the table, but <code>&amp;</code> comes below it), so what you're actually doing is <code>var != (1 &amp; var) != 2</code>. Since <code>1 != 2</code>, this is true no matter what <code>1 &amp; var</code> happens to be.</p>
<hr/>
<p>There are two more differences that aren't relevant here, but worth learning: </p>
<ul>
<li><code>x and y</code> short-circuits: if <code>x</code> is false, Python doesn't evaluate <code>y</code>. This means you can do things like <code>if x and x.spam()</code>, and know it won't call <code>None.spam()</code> and raise an exception if <code>x</code> is <code>None</code>. But <code>&amp;</code> is just a normal operator, like <code>+</code>, that always evaluates both arguments.</li>
<li><code>x and y</code> always compares the values as boolean truthy-or-falsey; it can't be overriden by custom classes to do custom things, but <code>x &amp; y</code> can—e.g., it means set intersection if the values are sets, or elementwise bitwise and if they're numpy arrays, etc.</li>
</ul>
</div>
<span class="comment-copy">Thank you so much! I've no idea of the difference. I can't find one utility for the bitwise...</span>
<span class="comment-copy">@LisandroDallaCosta One common use for bitwise operations is for flags: <code>x&amp;1, x&amp;2, x&amp;4, x&amp;8, x&amp;16, …</code> are all independent of each other, so you can store dozens of flags in a single small integer. That doesn't come up nearly as often in Python as in, say, C—and if you don't think you have a use for it, don't go out of your way looking for one; just don't use it. But if you ever need it, it's there.</span>
