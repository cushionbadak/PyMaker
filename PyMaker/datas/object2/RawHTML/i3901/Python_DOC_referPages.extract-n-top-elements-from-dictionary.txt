<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/7197315/5-maximum-values-in-a-python-dictionary">5 maximum values in a python dictionary</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I have created a <code>dictionary</code> in python. I have sorted the dictionary with the following instruction.</p>
<pre><code>dict = {}

dict[identifier] = dst
sorted_dict = sorted(dict.items(), key=operator.itemgetter(1))
print sorted_dict
</code></pre>
<p>Here <code>identifier</code> is <code>key</code> and <code>dst</code> is a <code>value</code></p>
<p>I want to retrieve first <code>N</code> elements from the dictionary. How I can do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>slicing</code> to extract <code>n</code> elements of the list</p>
<pre><code>&gt;&gt;&gt; print(sorted_dict[:n])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collectons.Counter</code></a> It's the way to go:</p>
<pre><code>from collections import Counter
count_dict = Counter(the_dict)
print(count_dict.most_common(n))
</code></pre>
<p>Here you have a <a href="https://repl.it/repls/CyanHandsomeMonads" rel="nofollow noreferrer">live example</a></p>
</div>
<span class="comment-copy"><code>print(sorted_dict[:N])</code>?</span>
<span class="comment-copy">wouldnt it be easier to use <code>Counter</code>?</span>
<span class="comment-copy">@Netwave it would, which is why I'm disappointed the answer below parroting Aran-Fey's comment has 2 upvotes and no one's offered a Counter-based solution yet.</span>
<span class="comment-copy">@cswah we optimise for pearls, not sand.</span>
<span class="comment-copy">Some people (not me) downvote common duplicate questions that are easy to find with a simple search, because it shows that you didn't do much research before posting your question.</span>
<span class="comment-copy">don't be angry, it was just a working example. @coldspeed</span>
<span class="comment-copy">sorry about that @coldspeed OP asked in python 2, that's why I answered in python 2, I will take care of this next time :(</span>
<span class="comment-copy">@cswah Umm, that comment applies to you too, please see <a href="https://pythonclock.org" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">This should be the accepted answer. Also note that the Counter works best with numeric values, and you only need to create once instead of sorting repeatedly.</span>
<span class="comment-copy">@coldspeed, yes, actually, does it works on O(n) right?</span>
<span class="comment-copy">Yes, for any k &lt; n, it should return elements from a heap in O(k) time.</span>
