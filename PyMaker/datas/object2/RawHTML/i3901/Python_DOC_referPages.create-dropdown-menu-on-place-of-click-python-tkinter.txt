<div class="post-text" itemprop="text">
<p>I have a python-tkinter gui app that I've been trying to find some way to add in some functionality. I was hoping there would be a way to right-click on an item in the app's listbox area and bring up a context menu.  Is tkinter able to accomplish this? Would I be better off looking into gtk or some other gui-toolkit?</p>
</div>
<div class="post-text" itemprop="text">
<p>You would create a <a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/menu.html" rel="noreferrer">Menu</a> instance and write a function that calls<br/>
its <a href="http://effbot.org/tkinterbook/menu.htm" rel="noreferrer"><code>post()</code></a> or <a href="https://www.tcl.tk/man/tcl8.7/TkCmd/popup.htm" rel="noreferrer"><code>tk_popup()</code></a> method.  </p>
<p>The <a href="https://docs.python.org/3/library/tkinter.html" rel="noreferrer">tkinter documentation</a> doesn't currently have any information about <code>tk_popup()</code>.<br/>
Read the <a href="https://www.tcl.tk/man/tcl8.7/TkCmd/contents.htm" rel="noreferrer">Tk documentation</a> for a description, or the source:</p>
<p><a href="http://core.tcl.tk/tk/artifact/6b33a1452c19b104" rel="noreferrer"><code>library/menu.tcl</code> in the Tcl/Tk source</a>:</p>
<pre>
::tk_popup --
This procedure pops up a menu and sets things up for traversing
the menu and its submenus.

Arguments:
menu  - Name of the menu to be popped up.
x, y  - Root coordinates at which to pop up the menu.  
entry - Index of a menu entry to center over (x,y).  
        If omitted or specified as {}, then menu's  
        upper-left corner goes at (x,y).  
</pre>
<p><a href="https://github.com/python/cpython/blob/master/Lib/tkinter/__init__.py" rel="noreferrer"><code>tkinter/__init__.py</code> in the Python source</a>:</p>
<pre><code>def tk_popup(self, x, y, entry=""):
    """Post the menu at position X,Y with entry ENTRY."""
    self.tk.call('tk_popup', self._w, x, y, entry)
</code></pre>
<p>You associate your function with right-click via:<br/>
<a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/binding-levels.html" rel="noreferrer"><code>the_widget_clicked_on.bind("&lt;Button-3&gt;", your_function)</code></a>.</p>
<p>However, the number associated with right-click is not the same on every platform.</p>
<p><a href="http://core.tcl.tk/tk/artifact/4ff6154cc3cca965" rel="noreferrer"><code>library/tk.tcl</code> in the Tcl/Tk source</a>:</p>
<pre>
On Darwin/Aqua, buttons from left to right are 1,3,2.  
On Darwin/X11 with recent XQuartz as the X server, they are 1,2,3; 
other X servers may differ.
</pre>
<p>Here is an example I wrote that adds a context menu to a Listbox:</p>
<pre><code>import tkinter # Tkinter -&gt; tkinter in Python 3

class FancyListbox(tkinter.Listbox):

    def __init__(self, parent, *args, **kwargs):
        tkinter.Listbox.__init__(self, parent, *args, **kwargs)

        self.popup_menu = tkinter.Menu(self, tearoff=0)
        self.popup_menu.add_command(label="Delete",
                                    command=self.delete_selected)
        self.popup_menu.add_command(label="Select All",
                                    command=self.select_all)

        self.bind("&lt;Button-3&gt;", self.popup) # Button-2 on Aqua

    def popup(self, event):
        try:
            self.popup_menu.tk_popup(event.x_root, event.y_root, 0)
        finally:
            self.popup_menu.grab_release()

    def delete_selected(self):
        for i in self.curselection()[::-1]:
            self.delete(i)

    def select_all(self):
        self.selection_set(0, 'end')


root = tkinter.Tk()
flb = FancyListbox(root, selectmode='multiple')
for n in range(10):
    flb.insert('end', n)
flb.pack()
root.mainloop()
</code></pre>
<p>The use of <code>grab_release()</code> was observed in <a href="http://effbot.org/zone/tkinter-popup-menu.htm" rel="noreferrer">an example on effbot</a>.<br/>
Its effect might not be the same on all systems.</p>
</div>
<div class="post-text" itemprop="text">
<p>I made some changes to the conext menu code above in order to adjust my demand and I think it would be useful to share:</p>
<p><strong>Version 1:</strong></p>
<pre><code>import tkinter as tk
from tkinter import ttk

class Main(tk.Frame):
    def __init__(self, master):
        tk.Frame.__init__(self, master)
        master.geometry('500x350')
        self.master = master
        self.tree = ttk.Treeview(self.master, height=15)
        self.tree.pack(fill='x')
        self.btn = tk.Button(master, text='click', command=self.clickbtn)
        self.btn.pack()
        self.aMenu = tk.Menu(master, tearoff=0)
        self.aMenu.add_command(label='Delete', command=self.delete)
        self.aMenu.add_command(label='Say Hello', command=self.hello)

        # attach popup to treeview widget
        self.tree.bind("&lt;Button-3&gt;", self.popup)

    def clickbtn(self):
        text = 'Hello ' + str(self.num)
        self.tree.insert('', 'end', text=text)
        self.num += 1

    def delete(self):
        print(self.tree.focus())
        if self.iid:
            self.tree.delete(self.iid)

    def hello(self):
        print ('hello!')

    def popup(self, event):
        self.iid = self.tree.identify_row(event.y)
        if self.iid:
            # mouse pointer over item
            self.tree.selection_set(self.iid)
            self.aMenu.post(event.x_root, event.y_root)            
        else:
            pass
</code></pre>
<p><strong>Version 2:</strong> </p>
<pre><code>import tkinter as tk
from tkinter import ttk

class Main(tk.Frame):
    def __init__(self, master):
        master.geometry('500x350')
        self.master = master
        tk.Frame.__init__(self, master)
        self.tree = ttk.Treeview(self.master, height=15)
        self.tree.pack(fill='x')
        self.btn = tk.Button(master, text='click', command=self.clickbtn)
        self.btn.pack()
        self.rclick = RightClick(self.master)
        self.num = 0

        # attach popup to treeview widget
        self.tree.bind('&lt;Button-3&gt;', self.rclick.popup)
    def clickbtn(self):
        text = 'Hello ' + str(self.num)
        self.tree.insert('', 'end', text=text)
        self.num += 1

class RightClick:
    def __init__(self, master):

        # create a popup menu
        self.aMenu = tk.Menu(master, tearoff=0)
        self.aMenu.add_command(label='Delete', command=self.delete)
        self.aMenu.add_command(label='Say Hello', command=self.hello)

        self.tree_item = ''

    def delete(self):
        if self.tree_item:
            app.tree.delete(self.tree_item)

    def hello(self):
        print ('hello!')

    def popup(self, event):
        self.aMenu.post(event.x_root, event.y_root)
        self.tree_item = app.tree.focus()

root = tk.Tk()
app=Main(root)
root.mainloop()
</code></pre>
</div>
<span class="comment-copy">thanks this was real helpful!  I had to do something odd/different to get the popup menu to appear though.  I ended up binding to the <code>Tk</code>.</span>
<span class="comment-copy">@tijko You can use the <a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/events.html#binding-levels" rel="nofollow noreferrer">New Mexico Tech Reference</a> as an additional source of information.</span>
<span class="comment-copy">I've come across this link while learning about Tkinter a few times and it has some good tutorials on there too.  I'm starting to re-think how I'm going about this.  I was thinking at first if I were to make a context menu on right click in Tkinter I could use some sort of copy and paste function that would carry over to my system and a browser/notepad whatever.</span>
<span class="comment-copy">On Ubuntu 16.10 running Python 3.5.2, tkinter 8.6 the statement self.aMenu.post(event.x_root, event.y_root) leaves the menu open if the user does not choose a menu item. I found that replacing it with self.aMenu.tk_popup(event.x_root, event.y_root) solves the problem: pressing ESC or clicking somewhere else automatically removes it as expected.</span>
