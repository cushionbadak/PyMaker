<div class="post-text" itemprop="text">
<p>I don't know what's wrong with my code. It would just not execute. Nothing happens, no errors occur. I can't figure it out. 
If someone can tell me what I have done wrong, please do so and I will be grateful.</p>
<pre><code>class Money (object):
    def __init__ (self, euro, cent):
      self.euro = euro
      self.cent = cent

    def __str__ (self):
        if self.cent &gt;= 100:
            r = self.cent / 100
            self.cent = self.cent % 100
            self.euro = self.euro + r
            return ("%d EUR &amp; %d cents") % (self.euro, self.cent)
        else:
            return ("%d EUR &amp; %d cents") % (self.euro, self.cent)

    def changeCent (self):
        #100 c = 1 E
        cents = self.euro * 100
        self.cent = self.cent + cents
        return self.cent

    def changeSum (self, euros):
        #1 E = 100 c
        euros = self.cent / 100
        self.euro = self.euro + euros
        return self.euro

    def debt (self, years, rate):
        value = Money()
        multiply = rate * years * 12 / 100
        value.euro = self.euro * multiply
        value.cent = self.cent * multiply
        if value.cent &gt; 100:
            euro_ = value.cent / 100
            value.cent = value.cent - 100
            value.euro = value.euro + euro_
        return value

def main():
    x = Money()
    x.euro = int(input("Type in your EURO ammount: \n"))
    x.cent = int(input("Type in your CENT ammount: \n"))
    print (x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You defined the main function, but you never call it.</p>
<p>add <code>main()</code> to the end of your code.</p>
<p>It then runs but there are errors, to fix the errors, change your <code>main()</code> function to </p>
<pre><code>def main()
    euro = int(input("Type in your EURO ammount: \n"))
    cent = int(input("Type in your CENT ammount: \n"))
    x = Money(euro, cent)
    print (x)
</code></pre>
<p>Full working code:</p>
<pre><code>class Money (object):
    def __init__ (self, euro, cent):
      self.euro = euro
      self.cent = cent

    def __str__ (self):
        if self.cent &gt;= 100:
            r = self.cent / 100
            self.cent = self.cent % 100
            self.euro = self.euro + r
            return ("%d EUR &amp; %d cents") % (self.euro, self.cent)
        else:
            return ("%d EUR &amp; %d cents") % (self.euro, self.cent)

    def changeCent (self):
        #100 c = 1 E
        cents = self.euro * 100
        self.cent = self.cent + cents
        return self.cent

    def changeSum (self, euros):
        #1 E = 100 c
        euros = self.cent / 100
        self.euro = self.euro + euros
        return self.euro

    def debt (self, years, rate):
        value = Money()
        multiply = rate * years * 12 / 100
        value.euro = self.euro * multiply
        value.cent = self.cent * multiply
        if value.cent &gt; 100:
            euro_ = value.cent / 100
            value.cent = value.cent - 100
            value.euro = value.euro + euro_
        return value

def main():
    euro = int(input("Type in your EURO ammount: \n"))
    cent = int(input("Type in your CENT ammount: \n"))
    x = Money(euro, cent)
    print (x)

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python, <code>main</code> is not a special function (unlike C, for example).</p>
<p>You need to explicitly call <code>main()</code> in your script.</p>
<p>A common idiom is to only do this if your file is run as a script (as opposed to being imported):</p>
<pre><code>if __name__ == "__main__":
    main()
</code></pre>
<p>See <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">the documentation</a> for how this works</p>
</div>
<div class="post-text" itemprop="text">
<p>The pythonic way of getting a result here would be to add following lines to the file:</p>
<pre><code>if __name__=='__main__':
    main()
</code></pre>
<p>It checks, whether you are calling the script as the main script.
Currently you only define the function main, but you never call it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should run the function main()</p>
</div>
<div class="post-text" itemprop="text">
<p>To execute the function type <code>main()</code> at the bottom. You did almost everything except calling the function.</p>
<p>One more mistake</p>
<p>your constructor 
 <code>def __init__ (self, euro, cent):</code>expects two parameters. You are not  passing any value to it.</p>
<p>To fix that change to:</p>
<pre><code>def __init__ (self, euro=0, cent=0):     
</code></pre>
<p>which assigns default value of 0 to both <code>euro</code> and <code>cent</code></p>
</div>
<span class="comment-copy">You've defined a class and a <code>main</code> function. Are you running the function?</span>
<span class="comment-copy">You should have started with a <code>Hello World</code> program and extended it from there.</span>
<span class="comment-copy">Uhm, I dunno. I thought 'def main()' was to create a border between the class and its methods/functions and the main program itself.</span>
<span class="comment-copy">Are you thinking of <code>main</code> from <code>C/C++</code>?</span>
<span class="comment-copy">@AngelDraghici A class is something that helps organize/encapsulate logic inside of a script - same with methods (like <code>main()</code>).  But for the script to run, you have to call some method, or class property.  Otherwise, you've written a function library - not a script that does anything on its own.</span>
<span class="comment-copy">Learnt a thing or two, thank you!</span>
<span class="comment-copy">@AngelDraghici No problem! :)</span>
<span class="comment-copy">@AngelDraghici If my answer solved your problem, please accept my answer with the green tick mark near the upvote and downvote buttons. Thank you! :D</span>
<span class="comment-copy">3 minutes and done.</span>
<span class="comment-copy">Thank you, misunderstanding the <code>main()</code> method with the main from C/C++.</span>
<span class="comment-copy">Adding the <code>euro=0, cent=0</code> Is not the right solution</span>
