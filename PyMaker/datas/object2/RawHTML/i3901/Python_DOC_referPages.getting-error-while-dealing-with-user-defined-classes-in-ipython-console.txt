<div class="post-text" itemprop="text">
<p>First I should say that I am using Python 3.5.2.
I think something is wrong with <strong>ipython</strong> when I define my own classes.
So, when I run following code in standard python console, I get no error:</p>
<pre><code>class A(dict):
    def __getattribute__(self, item):
        return self[item]
a = A({'x' : 1})
a['x']
</code></pre>
<p>But when I run the above code in <strong>ipython</strong> console, I get the following error:</p>
<pre><code>KeyError                                  Traceback (most recent call last)
/usr/local/lib/python3.5/dist-packages/IPython/core/prefilter.py in prefilter_lines(self, lines, continue_prompt)
    333                              for lnum, line in enumerate(llines) ])
    334         else:
--&gt; 335             out = self.prefilter_line(llines[0], continue_prompt)
    336 
    337         return out

/usr/local/lib/python3.5/dist-packages/IPython/core/prefilter.py in prefilter_line(self, line, continue_prompt)
    308             return normal_handler.handle(line_info)
    309 
--&gt; 310         prefiltered = self.prefilter_line_info(line_info)
    311         # print "prefiltered line: %r" % prefiltered
    312         return prefiltered

/usr/local/lib/python3.5/dist-packages/IPython/core/prefilter.py in prefilter_line_info(self, line_info)
    250         """
    251         # print "prefilter_line_info: ", line_info
--&gt; 252         handler = self.find_handler(line_info)
    253         return handler.handle(line_info)
    254 

/usr/local/lib/python3.5/dist-packages/IPython/core/prefilter.py in find_handler(self, line_info)
    257         for checker in self.checkers:
    258             if checker.enabled:
--&gt; 259                 handler = checker.check(line_info)
    260                 if handler:
    261                     return handler

/usr/local/lib/python3.5/dist-packages/IPython/core/prefilter.py in check(self, line_info)
    414     def check(self, line_info):
    415         obj = self.shell.user_ns.get(line_info.ifun)
--&gt; 416         if isinstance(obj, Macro):
    417             return self.prefilter_manager.get_handler_by_name('macro')
    418         else:

&lt;ipython-input-1-cb6806333b6b&gt; in __getattribute__(self, item)
      1 class A(dict):
      2     def __getattribute__(self, item):
----&gt; 3         return self[item]
      4 

KeyError: '__class__'
</code></pre>
<p>Please help if you have any idea about this problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like IPython is trying to access <code>a.__class__</code>, and failing. It's probably doing this as some kind of standard sweep of objects for diagnostic purposes. You'd get the same error in the regular Python console if you tried <code>print(a.__class__)</code>.</p>
<p>Your <code>__getattribute__</code> should have a fallback in case there's no entry in the dictionary matching the key. <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattribute__" rel="nofollow noreferrer">the documentation</a> recommends invoking the base class' <code>__getattribute__</code> method if you need to access an actual attribute. Something like:</p>
<pre><code>class A(dict):
    def __getattribute__(self, item):
        if item in self:
            return self[item]
        else:
            return object.__getattribute__(self, item)
            #or possibly:
            #return super().__getattribute__(item)
            #... Depending on one's interpretation of "base class"

a = A({'x' : 1})
a['x']
print(a.__class__)
</code></pre>
<p>It might also make sense to override <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer"><code>__getattr__</code></a> instead of <code>__getattribute__</code>. That way, it is still possible to access all of the attributes of the object, without having to do any explicit checks for them in the function.</p>
<pre><code>class A(dict):
    def __getattr__(self, item):
        if item in self:
            return self[item]
        else:
            raise AttributeError

a = A({'x' : 1})
a['x']
print(a.__class__)
</code></pre>
</div>
