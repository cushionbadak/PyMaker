<div class="post-text" itemprop="text">
<p>I have code like this in JavaScript:</p>
<pre><code>function func(param1, param2) {}

console.log(func.length); // 2

var getParamNames = require('get-parameter-names');
console.log(getParamNames(func)); // ['param1', 'param2']
</code></pre>
<p>How would you write this in Python, to which I am new?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, you could get a similar output with <a href="https://docs.python.org/3/library/inspect.html#inspect.Signature" rel="nofollow noreferrer">inspect.signature().parameters</a>.</p>
<pre><code>from inspect import signature

def func(param1, param2):
    pass

print(len(signature(func).parameters.keys()))
# 2

def get_param_names(yourfunc):
    return list(signature(yourfunc).parameters.keys())

print(get_param_names(func))
# ['param1', 'param2']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With <code>your_function.__code__.co_varnames</code> you get a tuple of parameters names.</p>
<p>Example:</p>
<pre><code>def count_params(func):
    return len(func.__code__.co_varnames)

def test(param1, param2):
    pass

print(count_params(test)) # 2
</code></pre>
</div>
<span class="comment-copy">It’s worth reading the docs on the stdlib <code>inspect</code> module (linked in srig’s answer). While everything it does can be done more directly, it makes 95% of the reflection anyone will ever need a whole lot simpler (as well as taking care of edge cases, working across different Python versions/implementations, etc.). And its documentation is often the best place to find out how to do things directly even when you for some reason don’t want to use it.</span>
<span class="comment-copy">It’s definitely worth knowing how to do this, but it’s much better to use <code>inspect</code> in most cases. That way, it works with introspectable builtins, and in other Python implementations, and it makes it easier to distinguish <code>*args</code> from individual parameters, and so on.</span>
