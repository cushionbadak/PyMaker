<div class="post-text" itemprop="text">
<p>I am learning python and am having trouble with sorting. I feel like the key (for sorting) is too limiting and difficult to use once sorting algorithm begins getting more complicated. Here is the list I want to sort:</p>
<pre><code>['A1', 'AA1', 'B3', 'B2', 'BB1', 'AZ15']
</code></pre>
<p>where each value is like an excel column (ie. <code>'BB1' &gt; 'AZ15' &gt; 'AA1' &gt; 'B3' &gt; 'B2' &gt; 'A1'</code>).</p>
<p>Here is the solution I came up with after reading the following <a href="https://docs.python.org/3/howto/sorting.html" rel="nofollow noreferrer">guide</a>.</p>
<pre><code>def cmp_cell_ids(name1, name2):
    def split(name):
        letter = ''
        number = ''
        for ch in name:
            if ch in '1234567890':
                number += ch
            else:
                letter += ch
        return letter, int(number)
    ltr1, num1 = split(name1)
    ltr2, num2 = split(name2)
    if len(ltr1) == len(ltr2):
        if ltr1 == ltr2:
            return num1 &gt; num2
        else:
            return ltr1 &gt; ltr2
    return len(ltr1) &gt; len(ltr2)

def cmp_to_key(mycmp):
    class K:
        def __init__(self, obj, *args):
            self.obj = obj
        def __lt__(self, other):
            return not mycmp(self.obj, other.obj)
        def __gt__(self, other):
            return mycmp(self.obj, other.obj)
        def __eq__(self, other):
            return self.obj == other.obj
        def __le__(self, other):
            if self.__eq__(other):
                return True
            return self.__lt__(other)
        def __ge__(self, other):
            if self.__eq__(other):
                return True
            return self.__gt__(other)
        def __ne__(self, other):
            return self.obj != other.obj
    return K

key_cell_ids_cmp = cmp_to_key(cmp_cell_ids)
cell_ids = ['A1','AA1','B3','B2','BB1','AZ15']
cell_ids.sort(key=key_cell_ids_cmp)
print(cell_ids)
</code></pre>
<p>Which gives the desired output </p>
<pre><code>['A1', 'B2', 'B3', 'AA1', 'AZ15', 'BB1']
</code></pre>
<p>I am wondering if there is any easier/more pythonic implementation to this (in particular, I would love if I could get rid of that wrapper class).</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, writing (or copy-pasting) a <code>cmp_to_key</code> function is unnecessary. Just use the one in <code>itertools</code>.</p>
<p>In this case, though, it would be a lot more natural to use a key! Just split each element into a tuple of row name length (so <code>B</code> is before <code>AA</code>), a string row, and an integer column, and rely on the natural lexicographic ordering of tuples.</p>
<p>Viz:</p>
<pre><code>import re

def cell_key(cell):
    m = re.match("([A-Z]+)(\\d+)", cell)
    return (len(m.group(1)), m.group(1), int(m.group(2)))

cells = ['A1', 'AA1', 'B3', 'B2', 'BB1', 'AZ15']

print(sorted(cells, key=cell_key))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Very similar solution to @Sneftel's, but I approached the problem by finding the index of the first numeric character.</p>
<pre><code>import re

A = ['A1', 'AA1', 'B3', 'B2', 'BB1', 'AZ15']

def sorter(x):
    n = re.search('\d', x).start()
    return (len(x[:n]), x[:n], int(x[n:]))

res = sorted(A, key=sorter)

print(res)

['A1', 'B2', 'B3', 'AA1', 'AZ15', 'BB1']
</code></pre>
</div>
<span class="comment-copy">What kind of a Python-3 version you're using? because not the <code>m[1]</code> which is indexing a match object, nor sorting heterogeneous data is possible in Python-3.</span>
<span class="comment-copy">@Kasramvd 3.6, since you asked, which was when <code>Match</code> got a <code>__getitem__</code> method. As for "sorting heterogeneous data", I'm not sure what you mean. All keys are <code>int,str,int</code> tuples, being compared in the normal way.</span>
<span class="comment-copy">@Kasramvd If you'd like to see how tuple comparison works, try doing <code>('A', 2) &lt; ('B', 1)</code>. (That should work in any version of python, not just 3.6 or later.)</span>
<span class="comment-copy">Instead of <code>(len(m[1]), m[1], int(m[2]))</code>, you could also use <code>(int(m[1], 36), int(m[2]))</code>, i.e. treat the first part as a number base 36 (digits 0-9 are not used, but that does not hurt sorting).</span>
<span class="comment-copy">@Kasramvd Yeah, as I said you'll need python 3.6 for the getitem method. Or just change <code>m[1]</code> to <code>m.group(1)</code> and similarly for <code>m[2]</code>.</span>
