<div class="post-text" itemprop="text">
<p>Edited:
Hi guys, I have been looking for a solution to my problem for some days without an answer
I am trying to make a two-dimensional table with data obtained from the same model.
The idea is to list the students in rows, the data in columns and the status in their respective cells, a two dimensional table.</p>
<pre><code>class DailyAttendanceStudent(models.Model):
    ATTENDANCE_CHOICES = (
        (None,''),
        (True,'Presente'),
        (False, 'Ausente')
        )
    date = models.DateField(default=datetime.datetime.now)
    status = models.NullBooleanField(choices=ATTENDANCE_CHOICES)
    student = models.ForeignKey('perfiles.Student')
</code></pre>
<p>These are my table:</p>
<pre><code>class StudentAttendanceTable(tables.Table):
    nombres = tables.Column('nombres', accessor='Student.first_name')
    apellidos = tables.Column('apellidos', accessor='Student.last_name')
    date = tables.Column('fecha', accessor='date')#LinkColumn
    status = tables.Column('status', accessor='status')
    class Meta:
        model = DailyAttendanceStudent
        fields = ('nombres', 'apellidos', 'date', 'status')
</code></pre>
<p>graphically this is what I want to do:</p>
<p><img alt="I want to do this" src="https://i.stack.imgur.com/jCaIH.jpg"/></p>
</div>
<div class="post-text" itemprop="text">
<p>I think I would do something like this:</p>
<ul>
<li>Filter the <code>DailyAttendanceStudent</code> queryset like desired, and pass it to your table.</li>
<li>Implement a custom constructor for your table, doing something like this:

<ul>
<li>Loop over the queryset, transforming it to a <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a> with the user id as key. For any new date you should add a new column to the instance, and add a key for that date to the OrderedDict.</li>
<li>The new column can be a <code>table.Column</code>, or something specialized to suit your needs.</li>
<li>The custom constructor should call the constructor of the parent class, passing the items of the OrderedDict as data and the date columns as <code>extra_columns</code>.</li>
</ul></li>
</ul>
<p>In code, it could look like this:</p>
<pre><code>from collections import OrderedDict
import django_tables2 as tables

class StudentAttendanceTable(tables.Table):
    nombres = tables.Column('nombres', accessor='student.first_name')
    apellidos = tables.Column('apellidos', accessor='student.last_name')

    def __init__(self, data, *args, **kwargs):
        rows = OrderedDict()
        extra_columns = {}
        for row in data:
            if row.student.id not in rows:
                rows[row.student.id] = {'student': row.student}
            rows[row.student.id][row.date] = row.status
            extra_columns[row.date.isoformat()] = tables.Column()  # use more specialized column if you get this to work
        super(StudentAttendanceTable, self).__init__(data=rows.values(), extra_columns=extra_columns.items(), *args, **kwargs)
</code></pre>
<p>You might want to sort the value you pass to <code>extra_columns</code>, as the order retrieved from the database might not be the desired order for presentation.</p>
</div>
<span class="comment-copy">I was very helpful your comment, but to be honest, I could not populate the table with the status. It would be useful to have a tutorial on django tables2 on two-dimensional tables or pivot tables. I found more questions than answers on the web. Your answer was the one that helped me the most, the problem is that I need to study more about django :D</span>
