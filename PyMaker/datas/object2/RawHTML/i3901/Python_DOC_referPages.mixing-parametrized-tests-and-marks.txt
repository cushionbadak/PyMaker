<div class="post-text" itemprop="text">
<p>Ok, I'm struggling with something that is literally blowing my mind. </p>
<p>Although my actual code is different, this basically nails down the issue. Assume this sample code:</p>
<pre><code>import pytest

@pytest.mark.parametrize('type',(
    pytest.param('stability', marks=pytest.mark.stability),
    pytest.param('integration', marks=pytest.mark.integration),
))
@pytest.mark.integration
@pytest.mark.stability
def test_meh(type):
    assert type == 'integration'
</code></pre>
<p>And the following is the output of running that test. </p>
<pre><code>$pytest -m integration test_meeh.py
========================================================= test session starts =========================================================
platform darwin -- Python 3.6.4, pytest-3.1.2, py-1.5.2, pluggy-0.4.0
rootdir: /Users/yzT/Desktop, inifile:
collected 2 items

test_meeh.py F

============================================================== FAILURES ===============================================================
_________________________________________________________ test_meh[stability] _________________________________________________________

type = 'stability'

    @pytest.mark.parametrize('type',(
        pytest.param('stability', marks=pytest.mark.stability),
        pytest.param('integration', marks=pytest.mark.integration),
    ))
    @pytest.mark.integration
    @pytest.mark.stability
    def test_meh(type):
&gt;       assert type == 'integration'
E       AssertionError: assert 'stability' == 'integration'
E         - stability
E         + integration

test_meeh.py:10: AssertionError
========================================================= 1 tests deselected ==========================================================
=============================================== 1 failed, 1 deselected in 0.07 seconds ================================================


$ pytest -m stability test_meeh.py
========================================================= test session starts =========================================================
platform darwin -- Python 3.6.4, pytest-3.1.2, py-1.5.2, pluggy-0.4.0
rootdir: /Users/yzT/Desktop, inifile:
collected 2 items

test_meeh.py .

========================================================= 1 tests deselected ==========================================================
=============================================== 1 passed, 1 deselected in 0.02 seconds ================================================
</code></pre>
<p>What is going on here? Why when I use <code>-m integration</code> it uses <code>stability</code> and when I use <code>-m stability</code> it uses <code>integration</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like there are two issues with the code sample that you provided.</p>
<p>First, you shouldn't mark both individual parametrized tests <strong>and</strong> the test function. As soon as the <code>-m</code> option you provided matches the mark decorator on the function, the test will be selected.</p>
<p>Here's a minimal comparison. With both the marks on the function and individual parametrized tests:</p>
<pre><code># parametrized_tests.py
import pytest
@pytest.mark.parametrize('smiley', [
    pytest.param(':)', marks=[pytest.mark.happy]),
    pytest.param(':(', marks=[pytest.mark.unhappy]),
])
@pytest.mark.happy
@pytest.mark.unhappy
def test_meh(smiley):
    assert smiley == ':)'
</code></pre>
<p>You will have two tests collected and selected:</p>
<pre><code>$ pytest -m happy --collect-only parametrized_tests.py
========================================================================================== test session starts ===========================================================================================
platform darwin -- Python 3.6.5, pytest-3.5.1, py-1.5.3, pluggy-0.6.0
rootdir: [redacted], inifile:
collected 2 items
&lt;Module 'params-individual-tests.py'&gt;
  &lt;Function 'test_smiley[:)]'&gt;
  &lt;Function 'test_smiley[:(]'&gt;

====================================================================================== no tests ran in 0.01 seconds ======================================================================================
</code></pre>
<p>But if only the parametrized tests are marked:</p>
<pre><code># parametrized_tests.py
import pytest

@pytest.mark.parametrize('smiley', [
    pytest.param(':)', marks=[pytest.mark.happy]),
    pytest.param(':(', marks=[pytest.mark.unhappy]),
])
def test_smiley(smiley):
    assert smiley == ':)'
</code></pre>
<p>You will get two tests collected, but only one selected, as you expect:</p>
<pre><code>$ pytest -m happy --collect-only parametrized_tests.py
========================================================================================== test session starts ===========================================================================================
platform darwin -- Python 3.6.5, pytest-3.5.1, py-1.5.3, pluggy-0.6.0
rootdir: [redacted], inifile:
collected 2 items / 1 deselected
&lt;Module 'params-individual-tests.py'&gt;
  &lt;Function 'test_smiley[:)]'&gt;

====================================================================================== 1 deselected in 0.01 seconds ======================================================================================
</code></pre>
<p>Second, there seems to be a puzzling bug (or undocumented "feature") in <a href="https://docs.pytest.org/en/latest/example/parametrize.html#set-marks-or-test-id-for-individual-parametrized-test" rel="nofollow noreferrer">pytest.param</a>, where using the exact name of the mark as the parameter value makes the test not selected.</p>
<p>From your (slightly modified) code:</p>
<pre><code># mark_name.py
import pytest

@pytest.mark.parametrize('type_', [
    pytest.param('integration', marks=[pytest.mark.integration]),
    pytest.param('stability', marks=[pytest.mark.stability]),
])
def test_meh(type_):
    assert type_ == 'integration'
</code></pre>
<p>If I try to run the <code>integration</code> tests only, it won't select any:</p>
<pre><code>$ pytest -m integration mark_name.py
========================================================================================== test session starts ===========================================================================================
platform darwin -- Python 3.6.5, pytest-3.5.1, py-1.5.3, pluggy-0.6.0
rootdir: [redacted], inifile:
collected 2 items / 2 deselected
</code></pre>
<p>But simply modifying the value (in this case I only made it uppercase) makes everything work as expected:</p>
<pre><code># mark_name.py
import pytest

@pytest.mark.parametrize('type_', [
    pytest.param('INTEGRATION', marks=[pytest.mark.integration]),
    pytest.param('STABILITY', marks=[pytest.mark.stability]),
])
def test_meh(type_):
    assert type_ == 'INTEGRATION'
</code></pre>
<p>And now I can select the tests properly:</p>
<pre><code>$ pytest -m integration mark_name.py
========================================================================================== test session starts ===========================================================================================
platform darwin -- Python 3.6.5, pytest-3.5.1, py-1.5.3, pluggy-0.6.0
rootdir: [redacted], inifile:
collected 2 items / 1 deselected

mark_name.py .                                                                                                                                                                                     [100%]

================================================================================= 1 passed, 1 deselected in 0.01 seconds =================================================================================
$ pytest -m stability mark_name.py
========================================================================================== test session starts ===========================================================================================
platform darwin -- Python 3.6.5, pytest-3.5.1, py-1.5.3, pluggy-0.6.0
rootdir: [redacted], inifile:
collected 2 items / 1 deselected

mark_name.py F                                                                                                                                                                                     [100%]

================================================================================================ FAILURES ================================================================================================
__________________________________________________________________________________________ test_meh[STABILITY] ___________________________________________________________________________________________

type_ = 'STABILITY'

    @pytest.mark.parametrize('type_', [
        pytest.param('INTEGRATION', marks=[pytest.mark.integration]),
        pytest.param('STABILITY', marks=[pytest.mark.stability]),
    ])
    def test_meh(type_):
&gt;       assert type_ == 'INTEGRATION'
E       AssertionError: assert 'STABILITY' == 'INTEGRATION'
E         - STABILITY
E         + INTEGRATION

mark_name.py:9: AssertionError
================================================================================= 1 failed, 1 deselected in 0.08 seconds =================================================================================
</code></pre>
<p>I suspect that's related to the string value being used as the ID of the test, but would suggest opening a <a href="https://github.com/pytest-dev/pytest/issues" rel="nofollow noreferrer">GitHub issue</a> if that's something you don't want to work around.</p>
<hr/>
<p>Also, totally unrelated, but it's better not to define the argument as <code>type</code>, because you are shadowing the builtin function <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer"><code>type</code></a>. <a href="https://www.python.org/dev/peps/pep-0008/#function-and-method-arguments" rel="nofollow noreferrer">PEP-8</a> suggests using a trailing underscore to prevent a name clash.</p>
</div>
<span class="comment-copy">I'm curious, how did you find out about the caps thing? It doesn't make any sense, but indeed, it's the only way to make it work</span>
<span class="comment-copy">@yzT I couldn't understand why the selection wasn't working, so I took the example from the <a href="https://docs.pytest.org/en/latest/example/parametrize.html#set-marks-or-test-id-for-individual-parametrized-test" rel="nofollow noreferrer"><code>param()</code> docs</a>, and iteratively modified it to match your example. It worked all the way up to changing the string value to match the mark name. Note that any modification works, not just uppercasing!</span>
<span class="comment-copy">I ended up reporting the issue in GitHub, and this issue was part of a series of bugs related to marks that will be solved with the next release ;)</span>
<span class="comment-copy"><a href="https://github.com/pytest-dev/pytest/issues/3494" rel="nofollow noreferrer">github.com/pytest-dev/pytest/issues/3494</a></span>
<span class="comment-copy">pytest 3.6.0 is already released fixing this issue.</span>
