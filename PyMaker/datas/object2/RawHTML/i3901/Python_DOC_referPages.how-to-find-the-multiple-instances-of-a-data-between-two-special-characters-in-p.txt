<div class="post-text" itemprop="text">
<p>I am a beginner in Python so please excuse me if my question is two simple. I want to find the multiple instances of data between two special characters in a string and also count the number of instances. Until now I have the following code.</p>
<pre><code>import re
count=0
myString="abcde(fghi)defggdfsidf(ijkl)gfders(gkjh)hgstfvd"
startString = '('
endString = ')'
for item in myString:
 portString=myString[myString.find(startString)+len(startString):myString.find(endString)]
 print(portString)
 count=count+1
</code></pre>
<p>My desired output is </p>
<pre><code>fghi
ijkl
gkjh
</code></pre>
<p>But my code always start the loop from the start and produces fghi. Can any one tell me what is the problem? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use non greedy regexes:</p>
<pre><code>count=0
myString="abcde(fghi)defggdfsidf(ijkl)gfders(gkjh)hgstfvd"
rx = re.compile(r'\((.*?)\)')   # non greedy version inside parens
pos = 0
while True:
    m = rx.search(myString[pos:])   # search starting at pos (initially 0)
    if m is None: break
    count += 1
    print(m.group(1))
    pos += m.end()                  # next search will start past last ')'
</code></pre>
<hr/>
<p>Above solution only makes sense if parentheses are correctly balanced or if you want to start on first opening one and end of first closing next.</p>
<p>If you want to select text parenthesed text containing no opening or closing parentheses, you have to specify it in the regex:</p>
<pre><code>myString="abcde(fghi)defg(gdfsidf(ijkl)g(fders(gkjh)hgstfvd"
rx = re.compile(r'\(([^()]*)\)')
pos = 0
while True:
    m = rx.search(myString[pos:])   # search starting at pos (initially 0)
    if m is None: break
    count += 1
    print(m.group(1))
    pos += m.end()                  # next search will start past last ')'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As an alternative to regex if you'd prefer to keep the loop, note that <code>String.find()</code> can take an optional parameter to tell it where to start looking. Just keep track of the where the closing parenthesis is and start again from just after that. </p>
<p>Unfortunately it's not quite so simple as the loop condition will have to change too, so that it stops after hitting the last set of parentheses.</p>
<p>Something like this should do the trick:</p>
<pre><code>count=0
myString="abcde(fghi)defggdfsidf(ijkl)gfders(gkjh)hgstfvd"
startString = '('
endString = ')'
endStringIndex = 0
while True:
    startStringIndex = myString.find(startString, endStringIndex+1)
    endStringIndex = myString.find(endString, endStringIndex+1)
    if (startStringIndex == -1):
      break
    portString=myString[startStringIndex+len(startString):endStringIndex]
    print(portString)
    count+=1
</code></pre>
<p>Output:</p>
<pre><code>fghi
ijkl
gkjh
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer"><code>re.findall</code></a>:</p>
<pre><code>&gt;&gt;&gt; myString = "abcde(fghi)defggdfsidf(ijkl)gfders(gkjh)hgstfvd"
&gt;&gt;&gt; matches = re.findall(r'\((\w+)\)', myString)
&gt;&gt;&gt; count = len(matches)
&gt;&gt;&gt; print('\n'.join(matches))
fghi
ijkl
gkjh
&gt;&gt;&gt; print(count)
3
</code></pre>
</div>
<span class="comment-copy">Use spaces in your code and try to spread long lines over multiple lines to make your code more readable. And use 4 space tabs instead of 1 space tabs.</span>
<span class="comment-copy">Thanks a lot for the reply. I needed a non greedy version and hence your solution works in some situation. However if the input string slightly differs like myString="abcde(fghi)defg(gdfsidf(ijkl)g(fders(gkjh)hgstfvd" in such case the output is changed which I do not want. Can you also suggest some change to cater for such a situation. Thanks once again.</span>
<span class="comment-copy">@H.K: see my edit...</span>
