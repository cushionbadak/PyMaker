<div class="post-text" itemprop="text">
<p>How do I use asyncio and run the function forever. I know that there's <code>run_until_complete(function_name)</code> but how do I use <code>run_forever</code> how do I call the async function?</p>
<pre><code>async def someFunction():
    async with something as some_variable:
        # do something
</code></pre>
<p>I'm not sure how to start the function.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>run_forever</code> doesn't mean that an async function will magically run forever, it means that the <em>loop</em> will run forever, or at least until someone calls <code>loop.stop()</code>. To literally run an async function forever, you need to create an async function that does that. For example:</p>
<pre><code>async def some_function():
    async with something as some_variable:
        # do something

async def forever():
    while True:
        await some_function()

loop = asyncio.get_event_loop()
loop.run_until_complete(forever())
</code></pre>
<p>This is why <code>run_forever()</code> doesn't accept an argument, it doesn't care about any particular coroutine. The typical pattern is to add some coroutines using <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.create_task" rel="nofollow noreferrer"><code>loop.create_task</code></a> or equivalent before invoking <code>run_forever()</code>. But even an event loop that runs no tasks whatsoever and sits idly can be useful since another thread can call <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.run_coroutine_threadsafe" rel="nofollow noreferrer"><code>asyncio.run_coroutine_threadsafe</code></a> and give it work.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm unsure as to exactly what you mean when you say <em>I'm not sure how to start the function</em>. If you're asking the question in the literal sense: </p>
<pre><code>loop = asyncio.get_event_loop()
loop.run_forever()
</code></pre>
<p>If you wish to add a function to the loop before initialising the loop then the following line prior to <code>loop.run_forever()</code> will suffice:</p>
<pre><code>asyncio.async(function())
</code></pre>
<p>To add a function to a loop that is already running you'll need <code>ensure_future</code>:</p>
<pre><code>asyncio.ensure_future(function(), loop=loop)
</code></pre>
<p>In both cases the function you intend to call must be designated in some way as asynchronous, i.e. using the <code>async</code> function prefix or the <code>@asyncio.coroutine</code> decorator. </p>
</div>
<span class="comment-copy">You know there's <code>run_until_complete(function_name)</code>, could you provide the documentation to it ?</span>
<span class="comment-copy">Sorry for the late response, an example can be found here in the docs: <a href="https://docs.python.org/3/library/asyncio-task.html#example-future-with-run-until-complete" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">But this doesn't start the function, it never calls the function.</span>
<span class="comment-copy">You need to add the task containing the function to the loop.</span>
<span class="comment-copy">I don't understand. How do I call the function "async def someFunction()" and make it loop forever?</span>
<span class="comment-copy">I've added extra detail to my answer</span>
<span class="comment-copy">I literally still don't understand. If I use <code>asyncio.async(function())</code> at the end of my script the script just ends, as if it's not looping. If I add <code>loop.run_forever()</code> after it still doesn't work. I really don't understand, how do I start a function that runs forever...</span>
