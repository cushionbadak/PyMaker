<div class="post-text" itemprop="text">
<p>When using argparse, passing <code>--help</code> to the program generates help text. Unfortunately, it's hard to read because there are no blank lines between options. Here's an excerpt to illustrate:</p>
<pre><code>optional arguments:
  -h, --help            show this help message and exit
  -u FILENAME, --up-sound FILENAME
                        The sound to play when the network comes up. Default:
                        "/path/to/some/sound/file.wav"
  -d FILENAME, --down-sound FILENAME
                        The sound to play when the network goes down. Default:
                        "/path/to/some/other/sound/file.wav"
  -p EXECUTABLE, --player EXECUTABLE
                        The program to use to play sounds. Default: "play"
  -s, --silent          If specified, network_monitor.py will not play any
                        sounds.
  -c, --no-clear-screen
                        If specified, screen will not be cleared (nor extra
                        blank lines added) before network_monitor.py runs.
  --version             show program's version number and exit
</code></pre>
<p>Notice that in some cases, such as between <code>-p</code> and <code>-s</code> or between <code>-c</code> and <code>--version</code>, it is difficult to tell at a glance which help text applies to which option. There should be a blank line between entries. For example:</p>
<pre><code>  -p EXECUTABLE, --player EXECUTABLE
                        The program to use to play sounds. Default: "play"

  -s, --silent          If specified, network_monitor.py will not play any
                        sounds.
</code></pre>
<p>How can I accomplish this? <a href="https://stackoverflow.com/q/3853722/713735">Several</a> <a href="https://stackoverflow.com/q/15530575/713735">other</a> questions recommend using <code>argparse.RawTextHelpFormatter</code>. The problem with that is that if I use it, I have to write my own logic to wrap the help text as the raw text help formatter does no formatting. The obvious answer would be to append <code>'\n\n'</code> to the end of the help text and use the default formatter. But inexplicably, newlines get stripped.</p>
<p>What's the way forward here? I'm using Python 3.4.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create your own help text formatter that does this. Note that this requires you to be very specific to the implementation detail of the <code>argparse.HelpFormatter</code>. So consider this warning that is included in every help formatter type description:</p>
<blockquote>
<p>Only the name of this class is considered a public API. All the methods provided by the class are considered an implementation detail.</p>
</blockquote>
<p>Once we ignore that, creating our own help formatter that adds a blank line between the entries is very simple:</p>
<pre><code>class BlankLinesHelpFormatter (argparse.HelpFormatter):
    def _split_lines(self, text, width):
        return super()._split_lines(text, width) + ['']
</code></pre>
<p>And that’s it. Now when you create the <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser"><code>ArgumentParser</code></a> object while passing <code>
formatter_class=BlankLinesHelpFormatter</code> to the constructor, blank lines will appear between each argument in the help text.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>poke's</code> approach is good.  Note that <code>RawTextHelpFormatter</code> also modifies this method, simplifying it to:</p>
<pre><code>def _split_lines(self, text, width):
    return text.splitlines()
</code></pre>
<p><code>poke's</code> method could be tweaked to give you more control</p>
<pre><code>class BlankLinesHelpFormatter (argparse.HelpFormatter):
    # add empty line if help ends with \n
    def _split_lines(self, text, width):
        lines = super()._split_lines(text, width)
        if text.endswith('\n'):
            lines += ['']
        return lines
</code></pre>
<p>With this:</p>
<pre><code>parser = argparse.ArgumentParser(description='A description',
    formatter_class=BlankLinesHelpFormatter,
    epilog='Epilog line',
    )
parser.add_argument('-u', '--up-sound', metavar='FILENAME',
    help='The sound to play when the network comes up. Default:"%(default)s"\n',
    default="/path/to/some/sound/file.wav")
# note \n in above help
parser.add_argument('-d', '--down-sound', metavar='FILENAME',
    help='The sound to play when the network goes down. Default:"%(default)s"',
    default="/path/to/some/other/sound/file.wav")
parser.add_argument('-s','--silent', action='store_true',
    help='If specified, network_monitor.py will not play any sounds.')
parser.add_argument('positional', nargs='*', help='positional argument')
parser.print_help()
</code></pre>
<p>displays:</p>
<pre><code>usage: stack29484443.py [-h] [-u FILENAME] [-d FILENAME] [-s]
                        [positional [positional ...]]

A description

positional arguments:
  positional            positional argument

optional arguments:
  -h, --help            show this help message and exit
  -u FILENAME, --up-sound FILENAME
                        The sound to play when the network comes up.
                        Default:"/path/to/some/sound/file.wav"

  -d FILENAME, --down-sound FILENAME
                        The sound to play when the network goes down.
                        Default:"/path/to/some/other/sound/file.wav"
  -s, --silent          If specified, network_monitor.py will not play any
                        sounds.

Epilog line
</code></pre>
<p>For reference, the default <code>_split_lines</code> is:</p>
<pre><code>def _split_lines(self, text, width):
    text = self._whitespace_matcher.sub(' ', text).strip()
    return _textwrap.wrap(text, width)
    # self._whitespace_matcher = _re.compile(r'\s+')
</code></pre>
<p>This removes final \n and reduces all interior whitespace to one blank.</p>
</div>
<span class="comment-copy">Just what I was looking for. Thanks. What do you suppose are the odds of this breaking in the future?</span>
<span class="comment-copy">The <a href="https://hg.python.org/cpython/log/default/Lib/argparse.py" rel="nofollow noreferrer">source file</a> hasn’t been touched that often in the past, and most of those changes had no impact on the interface. So despite the warning, I would say you are pretty fine for quite a while. Plus, by just calling the base method, my solution doesn’t depend on much and doesn’t reinvents any of the logic that may break in the future.</span>
