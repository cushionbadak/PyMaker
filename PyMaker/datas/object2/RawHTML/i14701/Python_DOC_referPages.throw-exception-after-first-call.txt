<div class="post-text" itemprop="text">
<p>I have a loop where I handle adding records to a zip file. I have mocked my zipfile object and I want to raise a exception to verify that my logic for handling large zipfiles will work correctly.</p>
<p>is there a way with MagicMocks or plain mocks to accept the first call, but raise an exception on the second?</p>
</div>
<div class="post-text" itemprop="text">
<p>with a generator and Mock side_effect</p>
<pre><code>from unittest.mock import Mock

def sample_generator():
    yield 1
    yield 2
    raise Exception()

gen = sample_generator()

def sideeffect():
    global gen
    for x in gen:
        return x


m = Mock(side_effect=sideeffect)
m() #1
m() #2
m() #3
</code></pre>
<p>you can get:</p>
<pre><code>File "test.py", line 22, in &lt;module&gt;
   m() #3
   ....
   raise Exception()
Exception
</code></pre>
<p>I'm sure you can make it slightly cleaner with some effort, but it should solve your basic problem </p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way is to use <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock" rel="noreferrer"><code>side_effect</code></a> that accept either iterable, callable or Exception (class or instance)</p>
<blockquote>
<p>Alternatively <code>side_effect</code> can be an exception class or instance. In this case the exception will be raised when the mock is called.</p>
</blockquote>
<p>As showed in <a href="https://docs.python.org/3/library/unittest.mock.html#quick-guide" rel="noreferrer">Quick Guide</a> you can use <code>side_effect</code> to raise an exception simply by </p>
<blockquote>
<pre><code>&gt;&gt;&gt; mock = Mock(side_effect=KeyError('foo'))
&gt;&gt;&gt; mock()
Traceback (most recent call last):
 ...
KeyError: 'foo'
</code></pre>
</blockquote>
<p>Moreover you can use list and Exception together in <code>side_effect</code> assignment. So the simplest way to do what you need is something like this:</p>
<pre><code>&gt;&gt;&gt; m = Mock(side_effect=[1, KeyError("bar"), 3])
&gt;&gt;&gt; m("a")
1
&gt;&gt;&gt; m("b")
 ...
KeyError: 'bar'
&gt;&gt;&gt; m("c")
3
</code></pre>
<p>An other way to do it can be use a callable to write the logic of how your mock should react. In this case you are free to chose if it based on arguments or your test's state.</p>
</div>
<span class="comment-copy">you are a god send, thank you!</span>
<span class="comment-copy">shoot, this works to allow the first call, and throw on the second, but what if I want to allow a third call to be successful?</span>
<span class="comment-copy">@NathanTregillus take a look to my answer it cover your comment too.</span>
<span class="comment-copy">I didn't edit you answer to cover the OP request just because I should change it too much. I did it in the past <a href="http://stackoverflow.com/a/28924186/4101725">stackoverflow.com/a/28924186/4101725</a> . So filled a new answer.</span>
<span class="comment-copy">@Micheled'Amico feel free to edit in your points, it's simpler anyway and does cover both cases required by the OP. btw - down-vote is not work of mine...</span>
<span class="comment-copy">Who donwvote should leave at least a comment!</span>
<span class="comment-copy">seriously. I hate when people do that! I like your answer! this KeyError, is this a special method? I want this to throw a specific exception, is there a way to do that?</span>
<span class="comment-copy">@NathanTregillus I used <code>KeyError</code> just as example. You can use every kind of <code>Exception</code> you want.</span>
<span class="comment-copy">Does this work with a method on a mocked object ?</span>
<span class="comment-copy">@maazza yes of course... <code>m</code> is a mocked object. Even if you mean a <i>patched</i> object the answer is yes again: <code>patch</code> patch an object with a <code>Mock</code> instance.</span>
