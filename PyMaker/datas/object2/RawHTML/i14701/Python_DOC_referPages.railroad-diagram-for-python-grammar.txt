<div class="post-text" itemprop="text">
<p>I am looking for a way to get better grasp on the Python grammar.
My experience is that a <a href="http://en.wikipedia.org/wiki/Syntax_diagram" rel="noreferrer">railroad diagram</a> for the grammar may be helpful.</p>
<p>Python documentation contains the grammar in a text form:</p>
<pre><code>https://docs.python.org/3/reference/grammar.html
</code></pre>
<p>But that is not very easy to digest for someone who is just starting with software engineering.</p>
<p>Anybody has a good beginners material?</p>
<p>There is a <a href="http://bottlecaps.de/rr/ui" rel="noreferrer">Railroad Diagram Generator</a> that I might be able to use, but I was not able to find an EBNF syntax for the Python grammar, that would be accepted by that generator.
A link to such a grammar would be very helpful as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>To convert the Python grammar found at, e.g., <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow">https://docs.python.org/3/reference/grammar.html</a>, to EBNF, you basically need to do three things:</p>
<ol>
<li>Replace all <code>#...</code> comments with <code>/*...*/</code> (or just delete them)</li>
<li>Use <code>::=</code> instead of <code>:</code> for defining production rules</li>
<li>Use <code>(...)?</code> to indicate optional elements instead of <code>[...]</code>.</li>
</ol>
<p>For example, instead of</p>
<pre><code># The function statement
funcdef: 'def' NAME parameters ['-&gt;' test] ':' suite
</code></pre>
<p>you would use</p>
<pre><code>/* The function statement */
funcdef ::= 'def' NAME parameters ('-&gt;' test)? ':' suite
</code></pre>
</div>
<span class="comment-copy">This looks like a XY problem. You shouldn't try to understand Python's syntax by learning its formal structure as a formal grammar. If you want to look up some specialty, by all means, look at the grammar. But otherwise, you could probably better learn by using the language, or even by learning about the syntax of statements, or about the ideas behind the languages. The definition of the language's syntax as a formal grammar is a very abstract thing. That's just its nature. You <i>definitely shouldn't</i> need an EBNF diagram to learn Python.</span>
<span class="comment-copy">Out of interest, I had a quick go at this <a href="http://pastebin.com/raw.php?i=6CWk4dch" rel="nofollow noreferrer">pastebin.com/raw.php?i=6CWk4dch</a> -- it works with the railroad diagram generator. (But may not be a perfect translation.)</span>
<span class="comment-copy">@Stuart I had a go at the same thing. Looks good, although you want to replace things like <code>[arglist]</code> with <code>(arglist)?</code>, not <code>(arglist)*</code>. Generally, the only 3 things you need to change are 1) <code>:</code> to <code>::=</code> for the production rules, 2) <code>[...]</code> to <code>(...)?</code> for optional elements and 3) <code>#...</code> to <code>/*...*/</code> for comments.</span>
<span class="comment-copy">@Carsten Agreed, to some extent. The OP says they want a better grasp of the Python grammar, not just Python, so it's a legitimate (albeit off-topic, asking for a link to a resource) question.</span>
<span class="comment-copy">@chepner Thanks yes, here it is again <a href="http://pastebin.com/raw.php?i=GvVPCJw8" rel="nofollow noreferrer">pastebin.com/raw.php?i=GvVPCJw8</a></span>
