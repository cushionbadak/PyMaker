<div class="post-text" itemprop="text">
<p>I'm using Enum4 library to create an enum class as follows:</p>
<pre><code>class Color(Enum):
    RED = 1
    BLUE = 2
</code></pre>
<p>I want to print <code>[1, 2]</code> as a list somewhere. How can I achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/enum.html#intenum" rel="noreferrer">IntEnum</a>:</p>
<pre><code>from enum import IntEnum

class Color(IntEnum):
   RED = 1
   BLUE = 2


print(int(Color.RED))   # prints 1
</code></pre>
<p>To get list of the ints:</p>
<pre><code>enum_list = list(map(int, Color))
print(enum_list) # prints [1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do the following:</p>
<pre><code>[e.value for e in Color]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To use Enum with any type of value, try this:<br/>
Updated with some improvements... Thanks @Jeff, by your tip!</p>
<pre><code>from enum import Enum

class Color(Enum):
    RED = 1
    GREEN = 'GREEN'
    BLUE = ('blue', '#0000ff')

    @staticmethod
    def list():
        return list(map(lambda c: c.value, Color))

print(Color.list())
</code></pre>
<p>As result:</p>
<pre><code>[1, 'GREEN', ('blue', '#0000ff')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So the <code>Enum</code> has a <code>__members__</code> dict. 
The solution that @ozgur proposed is really the best, but you can do this, which does the same thing, with more work</p>
<p><code>[color.value for color_name, color in Color.__members__.items()]</code></p>
<p>The <code>__members__</code> dictionary could come in handy if you wanted to insert stuff dynamically in it... in some crazy situation.</p>
<p><strong>[EDIT]</strong>
Apparently <code>__members__</code> is not a dictionary, but a map proxy. Which means you can't easily add items to it.</p>
<p>You can however do weird stuff like <code>MyEnum.__dict__['_member_map_']['new_key'] = 'new_value'</code>, and then you can use the new key like <code>MyEnum.new_key</code>.... but this is just an implementation detail, and should not be played with. Black magic is payed for with huge maintenance costs.</p>
</div>
<div class="post-text" itemprop="text">
<p>class <code>enum.Enum</code> is a class that solves all your enumeration needs, so you just need to inherit from it, and add your own fields. Then from then on, all you need to do is to just call it's attributes: <code>name</code> &amp; <code>value</code>:</p>
<pre><code>from enum import Enum

class Letter(Enum):
   A = 1
   B = 2
   C = 3

print({i.name: i.value for i in Letter})
# prints {'A': 1, 'B': 2, 'C': 3}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on the answer by @Jeff, refactored to use a <code>classmethod</code> so that you can reuse the same code for any of your enums:</p>
<pre><code>from enum import Enum

class ExtendedEnum(Enum):

    @classmethod
    def list(cls):
        return list(map(lambda c: c.value, cls))

class OperationType(ExtendedEnum):
    CREATE = 'CREATE'
    STATUS = 'STATUS'
    EXPAND = 'EXPAND'
    DELETE = 'DELETE'

print(OperationType.list())
</code></pre>
<p>Produces:</p>
<pre><code>['CREATE', 'STATUS', 'EXPAND', 'DELETE']
</code></pre>
</div>
<span class="comment-copy"><a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer">pypi.python.org/pypi/enum34</a> This is the one which i'm using now.</span>
<span class="comment-copy">You use third party one. But it also says it has intenum</span>
<span class="comment-copy">How do i print like  [(1,'RED'), (2, 'BLUE')]</span>
<span class="comment-copy">How about this: <code>[(color.value, color.name) for color in Color]</code></span>
<span class="comment-copy">@vlad-ardelean's comment is the best and most pythonic. That's idiomatic usage of the Enum type, elegant, and eminently readable</span>
<span class="comment-copy">I would use  @classmethod instead of @ staticmethod</span>
<span class="comment-copy">@ISONecroMAn I guess <code>@classmethod</code> would require to create instance of <code>Color</code> class. That's why <code>staticmethod</code> seems to be correct choice here.</span>
<span class="comment-copy">@LeonidDashko not at all. See my answer.</span>
<span class="comment-copy">Just a sidebar: can items be added to <code>__members__</code>? It would an interesting way to allow <i>extensions</i> thereby creating new <code>Enum</code> members. ... btw, upvoted for bringing a new (<i>to me</i>) attribute to the table.</span>
<span class="comment-copy">@IAbstract: No, that is disallowed.  If someone does figure out a way to add/subtract members after the Enum is created they will probably break that Enum.</span>
<span class="comment-copy">@IAbstract: Add new members after the fact is not usually a good idea.  If you really want to, check out <a href="http://stackoverflow.com/a/35899963/208880">this answer</a>.</span>
