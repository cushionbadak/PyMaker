<div class="post-text" itemprop="text">
<p>Is it possible to define a callback for <code>functools.lru_cache</code> when an item is evicted? In the callback the cached value should also be present. </p>
<p>If not, maybe someone knows a light-weight dict-like cache that supports eviction and callbacks?</p>
</div>
<div class="post-text" itemprop="text">
<p>I will post the solution I used for future reference. I used a package called cachetools (<a href="https://github.com/tkem/cachetools" rel="nofollow">https://github.com/tkem/cachetools</a>). You can install by simply <code>$ pip install cachetools</code>. </p>
<p>It also has decorators similar to the Python 3 <code>functools.lru_cache</code> (<a href="https://docs.python.org/3/library/functools.html" rel="nofollow">https://docs.python.org/3/library/functools.html</a>). </p>
<p>The different caches all derive from <code>cachetools.cache.Cache</code> which calls the <code>popitem()</code> function from <code>MutableMapping</code> when evicting an item. This function returns the key and the value of the "popped" item. </p>
<p>To inject an eviction callback one simply has to derive from the wanted cache and override the <code>popitem()</code> function. For example:</p>
<pre><code>class LRUCache2(LRUCache):
    def __init__(self, maxsize, missing=None, getsizeof=None, evict=None):
        LRUCache.__init__(self, maxsize, missing, getsizeof)
        self.__evict = evict

    def popitem(self):
        key, val = LRUCache.popitem(self)
        evict = self.__evict
        if evict:
            evict(key, val)
        return key, val
</code></pre>
</div>
