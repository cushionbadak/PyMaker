<div class="post-text" itemprop="text">
<p>For example in a Python class can I have two different add methods that can detect whether I am adding an object to an integer, or an object to another object, or an object and a string, etc?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can use <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow"><strong><code>isinstance</code></strong></a> to check if an object is of a particular type.</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at the <a href="https://pypi.python.org/pypi/multipledispatch" rel="nofollow">multipledispatch</a> module.</p>
<p>Here is a rough but simple example of its use. You can see that it can dispatch to different methods depending on the argument types. It can also handle different numbers of arguments.</p>
<pre><code>from multipledispatch import dispatch

class Adder(object):
    @dispatch(object, int)
    def add(o, i):
        print 'add(object, int):'
        return int(o) + i

    @dispatch(object, basestring)
    def add(o, s):
        print 'add(object, string):'
        return str(o) + s

    @dispatch(int, int)
    def pow(a, b):
        print 'pow(int, int):'
        return a**b

    @dispatch(int, int, int)
    def pow(a, b, c):
        print 'pow(int, int, int):'
        return a**b**c

&gt;&gt;&gt; a = Adder()
&gt;&gt;&gt; a.add(1, ' one')
add(object, string):
'1 one'
&gt;&gt;&gt; a.add(100, 1)
add(object, int):
101
&gt;&gt;&gt; a.pow(2, 2)
pow(int, int):
4
&gt;&gt;&gt; a.pow(2, 2, 2)
pow(int, int, int):
16
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python objects have special methods. Special methods are just methods that come packaged with a <code>type</code>. For example an <code>int</code> type has an <code>__add__()</code> special method that takes one argument. <code>int.__add__(5)</code> which will add 5 to that <code>int</code> (an actual number is a bad example for an object, but <code>int</code> is an object type which can work for this example). You often see this in code like this:</p>
<pre><code>a = 10 + 5
</code></pre>
<p>which is kind of like </p>
<pre><code>a = 10.__add__(5)
</code></pre>
<p>Not the best example, I know.</p>
<p>You can create your own class with a method </p>
<pre><code>__add__(self, value)
</code></pre>
<p>and in that method you can check against what <code>type</code> <code>value</code> is, usually with <code>isinstance()</code>. If you check for all sorts of types in your <code>__add__()</code> method you are kind of doing polymorphism. Polymorphism like this is typically frowned upon in Python world. Why?</p>
<p>Well if you have a class called <code>Car</code> and an instance of that class called <code>car</code>, what does <code>car = car + 5</code> mean? And if we add <code>car + 'Sammy drives'</code>, what should <code>print(car)</code> print?</p>
<p>If you need to apply data of one type to an object and data of another type to the same object, then usually if is more clear to apply each data type to a specific attribute of that object. Like so:</p>
<pre><code>car.speed = car.speed + 5
car.driver = 'Sammy'
</code></pre>
<p>Also I'd recommend getting to know about ducktyping. If you are good at it, checking for object types in your code kind of goes away.</p>
</div>
<span class="comment-copy">You mean with the <code>type()</code> built-in function?</span>
<span class="comment-copy">@DoubleBass <code>isinstance()</code> is better for type-checking than <code>type()</code>, but given that Python is duck-typed, I would generally try to avoid type-checking at all.</span>
<span class="comment-copy">Can this be used to overload pow()? pow(a,b) versus pow(a,b,c)? They are both pow() but one has two, the other three arguments, but same name __ pow __</span>
<span class="comment-copy">@DoubleBass That's a simpler case—you can simply provide a default value for <code>c</code>, effectively making it optional.</span>
<span class="comment-copy">To use <code>ininstance()</code> for this purpose is somewhat more complicated than this answer suggests. You might want to look at <a href="http://stackoverflow.com/questions/25336481/overloading-or-alternatives-in-python-api-design" title="overloading or alternatives in python api design">stackoverflow.com/questions/25336481/…</a> - a few different strategies are suggested in the answers.</span>
<span class="comment-copy"><code>__add__()</code> does not add to that object; it returns a different object that is the sum of the original and the argument. <code>__iadd__()</code> adds to the original for mutable objects (e.g. it will concatenate its argument to a <code>list</code>), but as <code>int</code> is immutable, it returns a different object.</span>
