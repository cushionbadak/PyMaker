<div class="post-text" itemprop="text">
<p>I have a key value pair that I want to export from the bash script which the following python is embedded in.
Excerpt from bash script:</p>
<pre><code>output_test="ip:192.168.1.150,status:up"
export output_test
</code></pre>
<p>Embedded python within above bash script</p>
<pre><code>python -c "$(cat &lt;&lt; 'EOF'
import socket
import os
import json
bash_output=string(os.environ["output_test"])
sd = dict(u.split(":") for u in output_test.split(","))
print json.dumps(sd)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('127.0.0.1', 15000))
s.send(bytes(json.dumps(s)))
result = json.loads(s.recv(1024))
print result
s.close()
EOF
)"
</code></pre>
<p>I'm quite new to Python I will admit I've hashed this together after intense speed research, and it's all I am going to need it to do in my scripts. Send name value pairs to a socket as a json array. Also, will the name I give the JSON object in the python, sd in the example above, become the name of the JSON array? - I will want to give it a meaningful name in the final version.</p>
<p>The error I'm getting is string not defined, which I think it means the string bash_output</p>
</div>
<div class="post-text" itemprop="text">
<p>I agree with @achampion, output_test seems to be mixed up with bash_output. A quick fix would probably be:</p>
<pre><code>bash_output=os.environ["output_test"]
sd = dict(u.split(":") for u in bash_output.split(","))
</code></pre>
<p>You may also consider just not using environment variable this way:</p>
<pre><code>$ output_test="ip:192.168.1.150,status:up"
$ python -c "$(cat &lt;&lt; 'EOF'
import socket
import os
import json
import sys
bash_output = sys.argv[1]
sd = dict(u.split(":") for u in bash_output.split(","))
print json.dumps(sd)
EOF
)" $output_test
{"status": "up", "ip": "192.168.1.150"}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You get <code>NameError: name 'string' is not defined</code> because, well, <code>string</code> is not defined. There's no Python builtin called <code>string</code>. <code>os.environ["whatever"]</code> already has type <code>str</code>, so you don't need any conversion.</p>
<p>Of course that's not the only problem. You assigned the env var to <code>bash_output</code> but later try to use the variable name <code>output_test</code>. Presumably that's a typo, so you also have to change that.</p>
<p>Everything corrected:</p>
<pre><code>#!/usr/bin/env bash
output_test="ip:192.168.1.150,status:up"
export output_test
python -c "$(cat &lt;&lt;'EOF'
import socket
import os
import json
print(os.environ)
bash_output = os.environ['output_test']
sd = dict(u.split(":") for u in bash_output.split(","))
print json.dumps(sd)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('127.0.0.1', 15000))
s.send(bytes(json.dumps(s)))
result = json.loads(s.recv(1024))
print result
s.close()
EOF
)"
</code></pre>
<p>Then I don't really know what your socket does (unless you provide more info), so you have to make sure that part is correct.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is the final code I have which is working, using @user1556814 solution:</p>
<pre><code>output_test="ip:192.168.1.150,status:up"


python -c "$(cat &lt;&lt; 'EOF'
import socket
import os
import json
import sys 
bash_output = sys.argv[1]
sd = dict(u.split(":") for u in bash_output.split(","))
print json.dumps(sd)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('127.0.0.1', 15000))
s.send(bytes(json.dumps(sd)))
s.close()
EOF
)" $output_test
</code></pre>
<p>My question, forgive me, is it safe? It's going to be sending packets of data, perhaps up to 30, between programmes on a local machine. They will almost identical as the above, so very small, simple json objects, likely every 10 seconds. Just the one bash script running each time and outputting the above from the command it has run (with some awk in there too).
As I don't know the language very well, I hope I haven't missed any gotchas? This code really simplifies what I want to do, and if it works, well, I can deepen my python knowledge later, when I have more time and less panic :)</p>
</div>
<span class="comment-copy">There is no module called <code>dictionary</code> in standard python. You never assign a value to <code>output_test</code>, presumably you are missing <code>output_test = os.environ['output_test']</code>. No the name you assign the json will have no affect on the json ouput.</span>
<span class="comment-copy">Unfortunately there's no builtin <code>string</code> in Python, so that quick fix is wrong.</span>
<span class="comment-copy">Yep, sorry, forgot to remove the string(...) which is wrong too</span>
<span class="comment-copy">Can anyone tell me why the following string is converting the commas to spaces and how I can correct it? Bash is doing this <code>output="Name:plugin,Timestamp:${timestamp},UUID:b4238ca2-cb8d-11e4-8731-1681e6b88ec1,RecDays:${NC_recDays}</code> I'm trying to use in a different plugin</span>
<span class="comment-copy">Maybe there are some problematic characters in ${timestamp} or ${NC_recDays} that involve such a behavior, but it is difficult to answer without the expanded value of $output. Could you add an <code>echo $output</code> in your script and post the result please ?</span>
<span class="comment-copy">Now I see that @achampion's fix is essentially the same, though they didn't point out what the error message means.</span>
<span class="comment-copy">FYI there <i>is</i> a <a href="https://docs.python.org/3.4/library/string.html" rel="nofollow noreferrer">string</a> module, but it does something else entirely :)</span>
<span class="comment-copy">@Joost Note that I said there's no Python <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer"><b>builtin</b></a> called <code>string</code>.</span>
<span class="comment-copy">Thank you everyone. Really appreciated and I've gained some extra understanding of Python from you all too!</span>
<span class="comment-copy">@user1556814 you're alternative feeding as an argument works fine.</span>
<span class="comment-copy">If that's your use case, then yes, you should use <code>argv</code> instead of env var. And I would put the python code into a separate python script rather than putting it in a Bash script within an evil <code>cat heredoc</code> construct. And what do you mean by "safe"? For safety you should really quote <code>$output_test</code> (i.e., <code>"$output_test"</code>). And you might need better parsing than <code>dict(u.split(":") for u in bash_output.split(","))</code>, depending on the format of your strings. Other than that, it's safe as long as you can make sure there's no unwanted malicious access.</span>
<span class="comment-copy">@4ae1e1 Yes I don't mean safe in the secure sense, but rather in the unwanted side effects sense. Or In the sense of not personally knowing much of what is going under the hood. Thanks for you tips. I will post up those other errors later when I have sec</span>
