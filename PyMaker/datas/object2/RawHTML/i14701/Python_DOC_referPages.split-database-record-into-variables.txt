<div class="post-text" itemprop="text">
<p>I have a function to search for a line in a database where id code/name matches and then loads the record </p>
<p>e.g. [(1, 'John', 'Smith', 30)]</p>
<p>I am using python and how can I split this list into individual varaibles</p>
<p>e.g.</p>
<pre><code>ID = 1
Firstname = John
Surname = Smith
Age = 30
</code></pre>
<p>Sorry I am new to this and this is probably very simple to implement. </p>
<p>This is what I have so far:</p>
<pre><code>def find():
   cursor = db.cursor()

   searchname = str(input('Enter name of product: '))
   sql = "SELECT * FROM items WHERE name = '%s';" % searchname.strip()
   cursor.execute(sql)
   a = cursor.fetchall()


   print(a)
   row = a 
</code></pre>
<p>Thanks for your time in helping :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you're using <code>sqlite3</code>, it has <a href="https://docs.python.org/3/library/sqlite3.html#row-objects" rel="nofollow">a nifty row factory</a> built in that lets you access the rows as if they were dictionaries, with the column names as keys:</p>
<pre><code># right after connect
db.row_factory = sqlite3.Row

def find():
    cursor = db.cursor()
    searchname = str(input('Enter name of product: '))
    sql = "SELECT * FROM items WHERE name = '%s';" % searchname.strip()
    cursor.execute(sql)
    a = cursor.fetchall()
    for row in a:
        print(row['ID'])
</code></pre>
<p>I know this isn't exactly what you asked for, but it's usually what you actually <em>want</em>. <a href="http://stupidpythonideas.blogspot.com/2013/05/why-you-dont-want-to-dynamically-create.html" rel="nofollow">Creating variables dynamically is a bad idea</a>. If you really want to, though, the answer is the same as dumping any mapping into the local scope, which you can search for if you must.</p>
<hr/>
<p>If you'd prefer attribute-style access (like <code>a.ID</code>) to dict-style access (like <code>a['ID']</code>), that's pretty simple. (But remember that not every valid SQL column name is a valid Python identifier!)</p>
<p>The most efficient way to do this is probably to create a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow"><code>namedtuple</code></a> out of the <code>description</code>:</p>
<pre><code>row_type = namedtuple('row', [col.name for col in cursor.description])
for row in map(row_type._make, a):
    print(row.ID)
</code></pre>
<hr/>
<p>If you're using MySQL, I don't know if any of the MySQL libraries provide the equivalent of <code>Row</code>, but it's not hard to build yourself by using the <code>description</code> property of a cursor, the same way we build a <code>namedtuple</code> out of it. For example:</p>
<pre><code>for row in a:
    drow = {cursor.description[i].name: row[i] for i in range(len(row))}
    print(row['ID'])
</code></pre>
<p>Unlike the special <code>Row</code> factory, which is specific to <code>sqlite3</code>, <code>Cursor.description</code> is required by <a href="https://www.python.org/dev/peps/pep-0249/" rel="nofollow">the DB-API 2.0 spec</a>.</p>
</div>
<span class="comment-copy">You've tagged this both <code>mysql</code> and <code>sqlite3</code>. Which one are you using? And, if it's <code>mysql</code>, which of the various different Python interfaces for it are you using?</span>
<span class="comment-copy">Ah yeah sorry, its with sqlite3</span>
<span class="comment-copy">Thankyou, this completely solves what I wanted and is so simple. A much better idea doing it this way than what I thought. Thanks :)</span>
