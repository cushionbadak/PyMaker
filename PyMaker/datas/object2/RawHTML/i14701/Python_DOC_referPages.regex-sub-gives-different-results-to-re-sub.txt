<div class="post-text" itemprop="text">
<p>I work with <a href="http://en.wikipedia.org/wiki/Czechs" rel="nofollow noreferrer">Czech</a> accented text in Python 3.4.</p>
<p>Calling <a href="https://docs.python.org/3.4/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub()</code></a> to perform substitution by regex on an accented sentence works well, but using a regex compiled with <a href="https://docs.python.org/3.4/library/re.html#re.compile" rel="nofollow noreferrer"><code>re.compile()</code></a> and then calling <a href="https://docs.python.org/3.4/library/re.html#re.regex.sub" rel="nofollow noreferrer"><code>regex.sub()</code></a> fails.</p>
<p>Here is the case, where I use the same arguments for <a href="https://docs.python.org/3.4/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub()</code></a> and <a href="https://docs.python.org/3.4/library/re.html#re.regex.sub" rel="nofollow noreferrer"><code>regex.sub()</code></a></p>
<pre><code>import re

pattern = r'(?&lt;!\*)(Poplatn[ií]\w+ da[nň]\w+)'
flags = re.I|re.L
compiled = re.compile(pattern, flags)
text = 'Poplatníkem daně z pozemků je vlastník pozemku'
mark = r'**\1**' # wrap 1st matching group in double stars

print(re.sub(pattern, mark, text, flags))
# outputs: **Poplatníkem daně** z pozemků je vlastník pozemku
# substitution works

print(compiled.sub(mark, text))
# outputs: Poplatníkem daně z pozemků je vlastník pozemku
# substitution fails
</code></pre>
<p>I believe that the reason is accents, because for a non-accented sentence <a href="https://docs.python.org/3.4/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub()</code></a> and <a href="https://docs.python.org/3.4/library/re.html#re.regex.sub" rel="nofollow noreferrer"><code>regex.sub()</code></a> work identically. </p>
<p>But it seems to me like a bug, because passing the same arguments returns different results, which should not happen. This topic is complicated by different platforms and locales, so it may not be reproducible on your system. Here is screenshot of my console.</p>
<p><img alt="Python console" src="https://i.stack.imgur.com/xndZo.png"/></p>
<p>Do  you see any fault in my code, or should I report it as a bug?</p>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://stackoverflow.com/a/29602850/908494">Padraic Cunningham figured out</a>, this is not actually a bug.</p>
<p>However, it is <em>related</em> to a bug which you didn't run into, and to you using a flag you probably shouldn't be using, so I'll leave my earlier answer below, even though his is the right answer to your problem.</p>
<hr/>
<p>There's a recent-ish change (somewhere between 3.4.1 and 3.4.3, and between 2.7.3 and 2.7.8) that affects this. Before that change, you can't even <em>compile</em> that pattern without raising an <code>OverflowError</code>.</p>
<p>More importantly, why are you using <code>re.L</code>? The <code>re.L</code> mechanism does not mean "use the Unicode rules for my locale", it means "use some unspecified non-Unicode rules that only really make sense for Latin-1-derived locales and may not work right on Windows". Or, as <a href="https://docs.python.org/3/library/re.html#re.L" rel="nofollow noreferrer">the docs</a> put it:</p>
<blockquote>
<p>Make <code>\w</code>, <code>\W</code>, <code>\b</code>, <code>\B</code>, <code>\s</code> and <code>\S</code> dependent on the current locale. <strong>The use of this flag is discouraged as the locale mechanism is very unreliable</strong>, and it only handles one “culture” at a time anyway; you should use Unicode matching instead, which is the default in Python 3 for Unicode (str) patterns.</p>
</blockquote>
<p>See <a href="http://bugs.python.org/issue22407" rel="nofollow noreferrer">bug #22407</a> and the linked python-dev thread for some recent discussion of this.</p>
<p>And if I remove the <code>re.L</code> flag, the code now compiles just fine on 3.4.1. (I also get the "right" results on both 3.4.1 and 3.4.3, but that's just a coincidence; I'm now intentionally not passing the screwy flag and screwing it up in the first version, and still accidentally not passing the screwy flag and screwing it up in the second, so they match…)</p>
<p>So, even if this were a bug, there's a good chance it would be closed WONTFIX. The resolution for #22407 was to deprecate <code>re.L</code> for non-<code>bytes</code> patterns in 3.5 and remove it in 3.6, so I doubt anyone's going to care about fixing bugs with it now. (Not to mention that <code>re</code> itself is theoretically going away in favor of <a href="https://pypi.python.org/pypi/regex" rel="nofollow noreferrer"><code>regex</code></a> one of these decades… and IIRC, <code>regex</code> also deprecated the <code>L</code> flag unless you're using a <code>bytes</code> pattern and <code>re</code>-compatible mode.)</p>
</div>
<div class="post-text" itemprop="text">
<p>The last argument in the compile is <code>flags</code>, if you  actually use <code>flags=flags</code> in the <code>re.sub</code> you will see the same behaviour:</p>
<pre><code>compiled = re.compile(pattern, flags)
print(compiled)
text = 'Poplatníkem daně z pozemků je vlastník pozemku'
mark = r'**\1**' # wrap 1st matching group in double stars

r = re.sub(pattern, mark, text, flags=flags)
</code></pre>
<p>The fourth arg to <code>re.sub</code> is <code>count</code> so that is why you see the difference.</p>
<p><strong>re.sub(pattern, repl, string, count=0, flags=0)</strong></p>
<p><strong>re.compile(pattern, flags=0)</strong></p>
</div>
<span class="comment-copy">That is feasibly a bug - I can replicate it on IDLE 3.4.1 on Windows 7, and would expect the same output for the two forms.</span>
<span class="comment-copy">When I try this on a 3.4.1 built by Homebrew, I get <code>OverflowError: regular expression code size limit exceeded</code> in the <code>re.compile</code> line. The same with 3.3.2 from python.org, and (after adding a <code>u</code> prefix) 2.7.3 from MacPorts. But local builds of the 3.5alpha trunk and 3.4 tree, and 2.7.6 from Apple, all work fine. That implies that there was a pretty recent bugfix in something involved with this pattern, which makes it seem more likely that there's still a bug lurking there… (I'd suggest searching for that recent bugfix so you can link to it in your new bug.)</span>
<span class="comment-copy">does changing the order of <code>.sub()</code> calls changes anything?</span>
<span class="comment-copy">@user3012759 good question! But no, it doesn't.</span>
<span class="comment-copy">Hold on… why are you using <code>re.L</code> in the first place? For Unicode patterns, what it does is not really defined beyond "you shouldn't use this", but is implemented (in CPython) as some funky Latin-1-specific rules that you almost never want, especially not in Eastern European text. And from a quick test, if you remove that flag, it fixes the exception in 3.4.1, and the incorrect results in 3.4.3.</span>
<span class="comment-copy">Thank you for your help. Wrong arguments order in <code>re.sub()</code> caused different results between <code>re.sub()</code> and <code>regex.sub()</code> and controversial <code>re.L</code> flag caused the pattern being not matched. This bad coincidence confused me and your explanation treat my headache.</span>
<span class="comment-copy">Great catch! But the description is a bit confusing. He already knows the large argument in <code>compile</code> is <code>flags</code>; the problem is that the fourth argument to <code>sub</code> is <i>not</i> <code>flags</code>, it's <code>count</code>. So, he's effectively passing <code>count=6, flags=0</code>. (And this is why you should always use keyword arguments when there's more than a handful of them.)</span>
<span class="comment-copy">@abarnert, yep forgot to add that part. Cheers.</span>
<span class="comment-copy">The funny thing is, he's actually got two bugs canceling each other out. It's the first one, where he accidentally passes <code>flags</code> as <code>count</code>, that returns the result he wants, because that prevents the <code>re.L</code> flag from breaking things…</span>
<span class="comment-copy">Ouch, how did I not spot that! Ordering the parameters like that does seem a little foolish, though, for exactly this reason.</span>
<span class="comment-copy">@jonrsharpe: IIRC, <code>flags</code> wasn't there in the original <code>(s)re</code> module. When it was added in 2.3 or so, the only reasonable thing to do was add it to each function after all of the existing arguments. (Well, the <i>real</i> reasonable thing to do is to make it a keyword-only parameter, but nobody thought that way back then.)</span>
