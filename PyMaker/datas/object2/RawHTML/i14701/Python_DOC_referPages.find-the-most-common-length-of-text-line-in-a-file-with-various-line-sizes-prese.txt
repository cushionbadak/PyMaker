<div class="post-text" itemprop="text">
<p>So I am bit stuck thinking over this - </p>
<p>I have a file which contains many character lines - one after the other. They are not in paragraph but rather in this form - </p>
<pre><code>xxxxxxx
xxx
xxxxxxxxxxxx
xxx
xxxxxxx
xxxx
xxxxxxxx
xxx
xxxxxx
xxxx
xxx
</code></pre>
<p>The idea is to find the number of lines which has the most common size (or number of characters). In the above example - 4 lines would be the answer </p>
<p>I am trying to do this in python, since the rest of the code is written in it.
Any help would be greatly appreciated. </p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/collections.html?highlight=counter" rel="nofollow"><code>collections</code></a> module has a dictionary subclass named <a href="https://docs.python.org/3/library/collections.html?highlight=counter#collections.Counter" rel="nofollow"><code>Counter</code></a> that will could be used to keep track of the length of each line encountered. </p>
<p>This make solving the problem very easy. If the files aren't humongous, you could use it like this:</p>
<pre><code>from collections import Counter

def most_common_line_len(filename):
    with open('somefile.txt') as f:
        return Counter(map(len, f.read().splitlines())).most_common(1)[0][0]

print(most_common_line_len('somefile.txt'))  # --&gt; 3 for your sample data
</code></pre>
<p>Otherwise you could avoid reading it all into memory at once by using a <a href="https://docs.python.org/3/reference/expressions.html?highlight=generator%20expression#generator-expressions" rel="nofollow">generator expression</a> in conjunction with a <a href="https://docs.python.org/3/reference/expressions.html?highlight=lambdas#lambda" rel="nofollow"><code>lambda</code></a> function:</p>
<pre><code>def most_common_line_len(filename):
    with open('somefile.txt') as f:
        return Counter(map(lambda line: len(line.rstrip()),
                           (line for line in f))).most_common(1)[0][0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a list of lines lengths, then maximize the number of occurances:</p>
<pre><code>with open('file.txt') as data:
    length = [len(i) for i in data] # line length
    common = max(length.count(i) for i in length)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a way to get the most common length:</p>
<pre><code>with open('file.txt', 'rb') as fin:
    lst = [len(line.strip()) for line in fin]

print max(set(lst), key=lst.count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a counter and then use counter's <code>most_common</code> method:</p>
<pre><code>from collections import Counter
with open("a.txt") as f:
    c = Counter(len(line.rstrip("\n")) for line in f)
print(c.most_common(1))
</code></pre>
<p>Result:</p>
<pre><code>[(3, 4)]
</code></pre>
<p>meaning length 3 is the most common with 4 occurences.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, starting from reading the lines, there are a few approaches which you could take:</p>
<pre><code>myFile = open(path)
for line in file:
    #do something with 'line'
</code></pre>
<p>or maybe</p>
<pre><code>lines = file.readlines()
for i in range(lines.length):
     #do something
</code></pre>
<p>Then, you'd need to somehow store each line length</p>
<pre><code>lengths.append(line.length)
</code></pre>
<p>Now, you only need to find the most recurrent length</p>
<pre><code>frequencies = {}
for length in lengths:
    if length in frequencies: #Check if we already had this length before
        frequencies[length] += 1 #Increment it
    else:
        frequencies[length] = 1 #Add to the list
</code></pre>
<p>Finding the greatest value from a set should be trivial, but just in case:</p>
<pre><code>maximum = 0
for i in frequencies:
    if frequencies[i] &gt; maximum:
        maximum = frequencies[i]
#after this completes, no entry on frequencies is greater than maximum
</code></pre>
</div>
<span class="comment-copy">What's the problem with your code? Please add it to your question.</span>
<span class="comment-copy">sorry I don't have any real code at the moment for this part of the code. My main issue is that the file is being opened somewhere else, and a function is running on each line of the file - then I had to somehow store the length of the line, and find the most common size.</span>
<span class="comment-copy">My files are huge to be honest, this is related to biological datasets so the minimum size of a file is about 4gb ...</span>
<span class="comment-copy">So use the second version then, or you could make the function smart and have it decide which technique to use by checking the file size first. The can be done using <code>st_size</code> in the <code>stat_result</code> the <a href="https://docs.python.org/3/library/os.html?highlight=stat#os.stat" rel="nofollow noreferrer"><code>os.stat()</code></a> function returns.</span>
<span class="comment-copy">thank you - i'll just modify the second bit and use it my case - I know for sure the files will be quite large.</span>
<span class="comment-copy">Actually, if your files are <i>that</i> big, it may not be worth the time it takes to read the whole thing once ahead of time — whether it's all saved in memory at once or not — only to determine the most common line-length.</span>
<span class="comment-copy">For serious work you might want to consider using the <a href="http://pandas.pydata.org" rel="nofollow noreferrer">pandas</a> (Python Data Analysis Library) which I've heard is very good as well as fast, and, of course, there's also <a href="http://www.numpy.org" rel="nofollow noreferrer">numpy</a>.</span>
<span class="comment-copy">Using a key is much better idea, good work.</span>
