<div class="post-text" itemprop="text">
<p>I'm looking for a way to test whether or not a given string repeats itself for the entire string or not.</p>
<p>Examples:</p>
<pre><code>[
    '0045662100456621004566210045662100456621',             # '00456621'
    '0072992700729927007299270072992700729927',             # '00729927'
    '001443001443001443001443001443001443001443',           # '001443'
    '037037037037037037037037037037037037037037037',        # '037'
    '047619047619047619047619047619047619047619',           # '047619'
    '002457002457002457002457002457002457002457',           # '002457'
    '001221001221001221001221001221001221001221',           # '001221'
    '001230012300123001230012300123001230012300123',        # '00123'
    '0013947001394700139470013947001394700139470013947',    # '0013947'
    '001001001001001001001001001001001001001001001001001',  # '001'
    '001406469760900140646976090014064697609',              # '0014064697609'
]
</code></pre>
<p>are strings which repeat themselves, and</p>
<pre><code>[
    '004608294930875576036866359447',
    '00469483568075117370892018779342723',
    '004739336492890995260663507109',
    '001508295625942684766214177978883861236802413273',
    '007518796992481203',
    '0071942446043165467625899280575539568345323741',
    '0434782608695652173913',
    '0344827586206896551724137931',
    '002481389578163771712158808933',
    '002932551319648093841642228739',
    '0035587188612099644128113879',
    '003484320557491289198606271777',
    '00115074798619102416570771',
]
</code></pre>
<p>are examples of ones that do not.</p>
<p>The repeating sections of the strings I'm given can be quite long, and the strings themselves can be 500 or more characters, so looping through each character trying to build a pattern then checking the pattern vs the rest of the string seems awful slow. Multiply that by potentially hundreds of strings and I can't see any intuitive solution.</p>
<p>I've looked into regexes a bit and they seem good for when you know what you're looking for, or at least the length of the pattern you're looking for. Unfortunately, I know neither.</p>
<p>How can I tell if a string is repeating itself and if it is, what the shortest repeating subsequence is?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a concise solution which avoids regular expressions and slow in-Python loops:</p>
<pre><code>def principal_period(s):
    i = (s+s).find(s, 1, -1)
    return None if i == -1 else s[:i]
</code></pre>
<p>See the <a href="https://stackoverflow.com/a/29482936/2447250">Community Wiki answer</a> started by @davidism for benchmark results. In summary,</p>
<blockquote>
<p>David Zhang's solution is the clear winner, outperforming all others by at least 5x for the large example set.</p>
</blockquote>
<p>(That answer's words, not mine.)</p>
<p>This is based on the observation that a string is periodic if and only if it is equal to a nontrivial rotation of itself. Kudos to @AleksiTorhamo for realizing that we can then recover the principal period from the index of the first occurrence of <code>s</code> in <code>(s+s)[1:-1]</code>, and for informing me of the optional <code>start</code> and <code>end</code> arguments of Python's <code>string.find</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a solution using regular expressions.</p>
<pre><code>import re

REPEATER = re.compile(r"(.+?)\1+$")

def repeated(s):
    match = REPEATER.match(s)
    return match.group(1) if match else None
</code></pre>
<p>Iterating over the examples in the question:</p>
<pre><code>examples = [
    '0045662100456621004566210045662100456621',
    '0072992700729927007299270072992700729927',
    '001443001443001443001443001443001443001443',
    '037037037037037037037037037037037037037037037',
    '047619047619047619047619047619047619047619',
    '002457002457002457002457002457002457002457',
    '001221001221001221001221001221001221001221',
    '001230012300123001230012300123001230012300123',
    '0013947001394700139470013947001394700139470013947',
    '001001001001001001001001001001001001001001001001001',
    '001406469760900140646976090014064697609',
    '004608294930875576036866359447',
    '00469483568075117370892018779342723',
    '004739336492890995260663507109',
    '001508295625942684766214177978883861236802413273',
    '007518796992481203',
    '0071942446043165467625899280575539568345323741',
    '0434782608695652173913',
    '0344827586206896551724137931',
    '002481389578163771712158808933',
    '002932551319648093841642228739',
    '0035587188612099644128113879',
    '003484320557491289198606271777',
    '00115074798619102416570771',
]

for e in examples:
    sub = repeated(e)
    if sub:
        print("%r: %r" % (e, sub))
    else:
        print("%r does not repeat." % e)
</code></pre>
<p>... produces this output:</p>
<pre><code>'0045662100456621004566210045662100456621': '00456621'
'0072992700729927007299270072992700729927': '00729927'
'001443001443001443001443001443001443001443': '001443'
'037037037037037037037037037037037037037037037': '037'
'047619047619047619047619047619047619047619': '047619'
'002457002457002457002457002457002457002457': '002457'
'001221001221001221001221001221001221001221': '001221'
'001230012300123001230012300123001230012300123': '00123'
'0013947001394700139470013947001394700139470013947': '0013947'
'001001001001001001001001001001001001001001001001001': '001'
'001406469760900140646976090014064697609': '0014064697609'
'004608294930875576036866359447' does not repeat.
'00469483568075117370892018779342723' does not repeat.
'004739336492890995260663507109' does not repeat.
'001508295625942684766214177978883861236802413273' does not repeat.
'007518796992481203' does not repeat.
'0071942446043165467625899280575539568345323741' does not repeat.
'0434782608695652173913' does not repeat.
'0344827586206896551724137931' does not repeat.
'002481389578163771712158808933' does not repeat.
'002932551319648093841642228739' does not repeat.
'0035587188612099644128113879' does not repeat.
'003484320557491289198606271777' does not repeat.
'00115074798619102416570771' does not repeat.
</code></pre>
<p>The regular expression <code>(.+?)\1+$</code> is divided into three parts:</p>
<ol>
<li><p><code>(.+?)</code> is a matching group containing at least one (but as few as possible) of any character (because <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="noreferrer"><code>+?</code> is non-greedy</a>).</p></li>
<li><p><code>\1+</code> checks for at least one repetition of the matching group in the first part.</p></li>
<li><p><code>$</code> checks for the end of the string, to ensure that there's no extra, non-repeating content after the repeated substrings (and using <a href="https://docs.python.org/3/library/re.html#re.match" rel="noreferrer"><code>re.match()</code></a> ensures that there's no non-repeating text <em>before</em> the repeated substrings).</p></li>
</ol>
<p>In Python 3.4 and later, you could drop the <code>$</code> and use <a href="https://docs.python.org/3/library/re.html#re.fullmatch" rel="noreferrer"><code>re.fullmatch()</code></a> instead, or (in any Python at least as far back as 2.3) go the other way and use <a href="https://docs.python.org/3/library/re.html#re.search" rel="noreferrer"><code>re.search()</code></a> with the regex <code>^(.+?)\1+$</code>, all of which are more down to personal taste than anything else.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can make the observation that for a string to be considered repeating, its length must be divisible by the length of its repeated sequence. Given that, here is a solution that generates divisors of the length from <code>1</code> to <code>n / 2</code> inclusive, divides the original string into substrings with the length of the divisors, and tests the equality of the result set:</p>
<pre><code>from math import sqrt, floor

def divquot(n):
    if n &gt; 1:
        yield 1, n
    swapped = []
    for d in range(2, int(floor(sqrt(n))) + 1):
        q, r = divmod(n, d)
        if r == 0:
            yield d, q
            swapped.append((q, d))
    while swapped:
        yield swapped.pop()

def repeats(s):
    n = len(s)
    for d, q in divquot(n):
        sl = s[0:d]
        if sl * q == s:
            return sl
    return None
</code></pre>
<p><strong>EDIT:</strong> In Python 3, the <code>/</code> operator has changed to do float division by default. To get the <code>int</code> division from Python 2, you can use the <code>//</code> operator instead. Thank you to @TigerhawkT3 for bringing this to my attention.</p>
<p>The <code>//</code> operator performs integer division in both Python 2 and Python 3, so I've updated the answer to support both versions. The part where we test to see if all the substrings are equal is now a short-circuiting operation using <code>all</code> and a generator expression.</p>
<p><strong>UPDATE:</strong> In response to a change in the original question, the code has now been updated to return the smallest repeating substring if it exists and <code>None</code> if it does not. @godlygeek has suggested using <code>divmod</code> to reduce the number of iterations on the <code>divisors</code> generator, and the code has been updated to match that as well. It now returns all positive divisors of <code>n</code> in ascending order, exclusive of <code>n</code> itself.</p>
<p><strong>Further update for high performance:</strong> After multiple tests, I've come to the conclusion that  simply testing for string equality has the best performance out of any slicing or iterator solution in Python. Thus, I've taken a leaf out of @TigerhawkT3 's book and updated my solution. It's now over 6x as fast as before, noticably faster than Tigerhawk's solution but slower than David's.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here are some benchmarks for the various answers to this question. There were some surprising results, including wildly different performance depending on the string being tested.</p>
<p>Some functions were modified to work with Python 3 (mainly by replacing <code>/</code> with <code>//</code> to ensure integer division). If you see something wrong, want to add your function, or want to add another test string, ping @ZeroPiraeus in the <a href="http://chat.stackoverflow.com/rooms/6/python">Python chatroom</a>.</p>
<p>In summary: there's about a 50x difference between the best- and worst-performing solutions for the large set of example data supplied by OP <a href="http://paste.ubuntu.com/10765231/" rel="nofollow noreferrer">here</a> (via <a href="https://stackoverflow.com/questions/29481088/how-can-i-tell-if-a-string-repeats-itself-in-python#comment47156601_29481088">this</a> comment). <a href="https://stackoverflow.com/a/29489919">David Zhang's solution</a> is the clear winner, outperforming all others by around 5x for the large example set.</p>
<p>A couple of the answers are <em>very</em> slow in extremely large "no match" cases. Otherwise, the functions seem to be equally matched or clear winners depending on the test.</p>
<p>Here are the results, including plots made using matplotlib and seaborn to show the different distributions:</p>
<hr/>
<p><strong>Corpus 1 (supplied examples - small set)</strong></p>
<pre><code>mean performance:
 0.0003  david_zhang
 0.0009  zero
 0.0013  antti
 0.0013  tigerhawk_2
 0.0015  carpetpython
 0.0029  tigerhawk_1
 0.0031  davidism
 0.0035  saksham
 0.0046  shashank
 0.0052  riad
 0.0056  piotr

median performance:
 0.0003  david_zhang
 0.0008  zero
 0.0013  antti
 0.0013  tigerhawk_2
 0.0014  carpetpython
 0.0027  tigerhawk_1
 0.0031  davidism
 0.0038  saksham
 0.0044  shashank
 0.0054  riad
 0.0058  piotr
</code></pre>
<p><a href="https://i.stack.imgur.com/Xx34F.png" rel="nofollow noreferrer"><img alt="Corpus 1 graph" src="https://i.stack.imgur.com/Xx34F.png"/></a></p>
<hr/>
<p><strong>Corpus 2 (supplied examples - large set)</strong></p>
<pre><code>mean performance:
 0.0006  david_zhang
 0.0036  tigerhawk_2
 0.0036  antti
 0.0037  zero
 0.0039  carpetpython
 0.0052  shashank
 0.0056  piotr
 0.0066  davidism
 0.0120  tigerhawk_1
 0.0177  riad
 0.0283  saksham

median performance:
 0.0004  david_zhang
 0.0018  zero
 0.0022  tigerhawk_2
 0.0022  antti
 0.0024  carpetpython
 0.0043  davidism
 0.0049  shashank
 0.0055  piotr
 0.0061  tigerhawk_1
 0.0077  riad
 0.0109  saksham
</code></pre>
<p><a href="https://i.stack.imgur.com/KZgxr.png" rel="nofollow noreferrer"><img alt="Corpus 1 graph" src="https://i.stack.imgur.com/KZgxr.png"/></a></p>
<hr/>
<p><strong>Corpus 3 (edge cases)</strong></p>
<pre><code>mean performance:
 0.0123  shashank
 0.0375  david_zhang
 0.0376  piotr
 0.0394  carpetpython
 0.0479  antti
 0.0488  tigerhawk_2
 0.2269  tigerhawk_1
 0.2336  davidism
 0.7239  saksham
 3.6265  zero
 6.0111  riad

median performance:
 0.0107  tigerhawk_2
 0.0108  antti
 0.0109  carpetpython
 0.0135  david_zhang
 0.0137  tigerhawk_1
 0.0150  shashank
 0.0229  saksham
 0.0255  piotr
 0.0721  davidism
 0.1080  zero
 1.8539  riad
</code></pre>
<p><a href="https://i.stack.imgur.com/w0qqT.png" rel="nofollow noreferrer"><img alt="Corpus 3 graph" src="https://i.stack.imgur.com/w0qqT.png"/></a></p>
<hr/>
<p>The tests and raw results are available <a href="https://bitbucket.org/snippets/schesis/nMnR/benchmarking-answers-to-http" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Non-regex solution:</p>
<pre><code>def repeat(string):
    for i in range(1, len(string)//2+1):
        if not len(string)%len(string[0:i]) and string[0:i]*(len(string)//len(string[0:i])) == string:
            return string[0:i]
</code></pre>
<p>Faster non-regex solution, thanks to @ThatWeirdo (see comments):</p>
<pre><code>def repeat(string):
    l = len(string)
    for i in range(1, len(string)//2+1):
        if l%i: continue
        s = string[0:i]
        if s*(l//i) == string:
            return s
</code></pre>
<p>The above solution is very rarely slower than the original by a few percent, but it's usually a good bit faster - sometimes a whole lot faster. It's still not faster than davidism's for longer strings, and zero's regex solution is superior for short strings. It comes out to the fastest (according to davidism's test on github - see his answer) with strings of about 1000-1500 characters. Regardless, it's reliably second-fastest (or better) in all cases I tested. Thanks, ThatWeirdo.</p>
<p>Test:</p>
<pre><code>print(repeat('009009009'))
print(repeat('254725472547'))
print(repeat('abcdeabcdeabcdeabcde'))
print(repeat('abcdefg'))
print(repeat('09099099909999'))
print(repeat('02589675192'))
</code></pre>
<p>Results:</p>
<pre><code>009
2547
abcde
None
None
None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, halve the string as long as it's a "2 part" duplicate.  This reduces the search space if there are an even number of repeats.  Then, working forwards to find the smallest repeating string, check if splitting the full string by increasingly larger sub-string results in only empty values.  Only sub-strings up to <code>length // 2</code> need to be tested since anything over that would have no repeats.</p>
<pre><code>def shortest_repeat(orig_value):
    if not orig_value:
        return None

    value = orig_value

    while True:
        len_half = len(value) // 2
        first_half = value[:len_half]

        if first_half != value[len_half:]:
            break

        value = first_half

    len_value = len(value)
    split = value.split

    for i in (i for i in range(1, len_value // 2) if len_value % i == 0):
        if not any(split(value[:i])):
            return value[:i]

    return value if value != orig_value else None
</code></pre>
<p>This returns the shortest match or None if there is no match.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem may also be solved in <code>O(n)</code> in worst case with prefix function.</p>
<p>Note, it may be slower in general case(UPD: and is much slower) than other solutions which depend on number of divisors of <code>n</code>, but usually find fails sooner, I think one of bad cases for them will be <code>aaa....aab</code>, where there are <code>n - 1 = 2 * 3 * 5 * 7 ... *p_n - 1</code> <code>a</code>'s</p>
<p>First of all you need to calculate prefix function</p>
<pre><code>def prefix_function(s):
    n = len(s)
    pi = [0] * n
    for i in xrange(1, n):
        j = pi[i - 1]
        while(j &gt; 0 and s[i] != s[j]):
            j = pi[j - 1]
        if (s[i] == s[j]):
            j += 1
        pi[i] = j;
    return pi
</code></pre>
<p>then either there's no answer or the shortest period is</p>
<pre><code>k = len(s) - prefix_function(s[-1])
</code></pre>
<p>and you just have to check if <code>k != n and n % k == 0</code> (if <code>k != n and n % k == 0</code> then answer is <code>s[:k]</code>, else there's no answer</p>
<p>You may check the proof <a href="http://e-maxx.ru/algo/prefix_function#header_12">here</a> (in Russian, but online translator will probably do the trick)</p>
<pre><code>def riad(s):
    n = len(s)
    pi = [0] * n
    for i in xrange(1, n):
        j = pi[i - 1]
        while(j &gt; 0 and s[i] != s[j]):
            j = pi[j - 1]
        if (s[i] == s[j]):
            j += 1
        pi[i] = j;
    k = n - pi[-1]
    return s[:k] if (n != k and n % k == 0) else None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This version tries only those candidate sequence lengths that are factors of the string length; and uses the <code>*</code> operator to build a full-length string from the candidate sequence:</p>
<pre><code>def get_shortest_repeat(string):
    length = len(string)
    for i in range(1, length // 2 + 1):
        if length % i:  # skip non-factors early
            continue

        candidate = string[:i]
        if string == candidate * (length // i):
            return candidate

    return None
</code></pre>
<p>Thanks to TigerhawkT3 for noticing that <code>length // 2</code> without <code>+ 1</code> would fail to match the <code>abab</code> case.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a straight forward solution, without regexes. </p>
<p>For substrings of <code>s</code> starting from zeroth index, of lengths 1 through <code>len(s)</code>, check if that substring, <code>substr</code> is the repeated pattern. This check can be performed by concatenating <code>substr</code> with itself <code>ratio</code> times, such that the length of the string thus formed is equal to the length of <code>s</code>. Hence <code>ratio=len(s)/len(substr)</code>. </p>
<p>Return when first such substring is found. This would provide the smallest possible substring, if one exists.</p>
<pre><code>def check_repeat(s):
    for i in range(1, len(s)):
        substr = s[:i]
        ratio = len(s)/len(substr)
        if substr * ratio == s:
            print 'Repeating on "%s"' % substr
            return
    print 'Non repeating'

&gt;&gt;&gt; check_repeat('254725472547')
Repeating on "2547"
&gt;&gt;&gt; check_repeat('abcdeabcdeabcdeabcde')
Repeating on "abcde"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I started with more than eight solutions to this problem. Some were bases on regex (match, findall, split), some of string slicing and testing, and some with string methods (find, count, split). Each had benefits in code clarity, code size, speed and memory consumption. I was going to post my answer here when I noticed that execution speed was ranked as important, so I did more testing and improvement to arrive at this:</p>
<pre class="lang-python prettyprint-override"><code>def repeating(s):
    size = len(s)
    incr = size % 2 + 1
    for n in xrange(1, size//2+1, incr):
        if size % n == 0:
            if s[:n] * (size//n) == s:
                return s[:n]
</code></pre>
<p>This answer seems similar to a few other answers here, but it has a few speed optimisations others have not used:</p>
<ul>
<li><code>xrange</code> is a little faster in this application,</li>
<li>if an input string is an odd length, do not check any even length substrings,</li>
<li>by using <code>s[:n]</code> directly, we avoid creating a variable in each loop.</li>
</ul>
<p>I would be interested to see how this performs in the standard tests with common hardware. I believe it will be well short of David Zhang's excellent algorithm in most tests, but should be quite fast otherwise.</p>
<p>I found this problem to be very counter-intuitive. The solutions I thought would be fast were slow. The solutions that looked slow were fast! It seems that Python's string creation with the multiply operator and string comparisons are highly optimised.</p>
</div>
<div class="post-text" itemprop="text">
<p>This function runs very quickly (tested and it's over 3 times faster than fastest solution here on strings with over 100k characters and the difference gets bigger the longer the repeating pattern is). It tries to minimise the number of comparisons needed to get the answer:</p>
<pre><code>def repeats(string):
    n = len(string)
    tried = set([])
    best = None
    nums = [i for i in  xrange(2, int(n**0.5) + 1) if n % i == 0]
    nums = [n/i for i in nums if n/i!=i] + list(reversed(nums)) + [1]
    for s in nums:
        if all(t%s for t in tried):
            print 'Trying repeating string of length:', s
            if string[:s]*(n/s)==string:
                best = s
            else:
                tried.add(s)
    if best:
        return string[:best]
</code></pre>
<p>Note that for example for string of length 8 it checks only fragment of size 4 and it does not have to test further because pattern of length 1 or 2 would result in repeating pattern of length 4:</p>
<pre><code>&gt;&gt;&gt; repeats('12345678')
Trying repeating string of length: 4
None

# for this one we need only 2 checks 
&gt;&gt;&gt; repeats('1234567812345678')
Trying repeating string of length: 8
Trying repeating string of length: 4
'12345678'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In David Zhang's answer if we have some sort of circular buffer this will not work: <code>principal_period('6210045662100456621004566210045662100456621')</code> due to the starting <code>621</code>, where I would have liked it to spit out: <code>00456621</code>.</p>
<p>Extending his solution we can use the following: </p>
<pre><code>def principal_period(s):
    for j in range(int(len(s)/2)):
        idx = (s[j:]+s[j:]).find(s[j:], 1, -1)
        if idx != -1:
            # Make sure that the first substring is part of pattern
            if s[:j] == s[j:][:idx][-j:]:
                break

    return None if idx == -1 else s[j:][:idx]

principal_period('6210045662100456621004566210045662100456621')
&gt;&gt;&gt; '00456621'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>Here is the code in python that checks for repetition of sub string in the main string given by the user</em>.</p>
<pre><code>print "Enter a string...."
#mainstring = String given by user
mainstring=raw_input("&gt;")
if(mainstring==''):
    print "Invalid string"
    exit()
#charlist = Character list of mainstring
charlist=list(mainstring)
strarr=''
print "Length of your string :",len(mainstring)
for i in range(0,len(mainstring)):
    strarr=strarr+charlist[i]
    splitlist=mainstring.split(strarr)
    count = 0
    for j in splitlist:
        if j =='':
            count+=1
    if count == len(splitlist):
        break
if count == len(splitlist):
    if count == 2:
        print "No repeating Sub-String found in string %r"%(mainstring)

    else:
        print "Sub-String %r repeats in string %r"%(strarr,mainstring)
else :
    print "No repeating Sub-String found in string %r"%(mainstring)
</code></pre>
<p><em>Input</em>:  </p>
<blockquote>
<p>0045662100456621004566210045662100456621  </p>
</blockquote>
<p><em>Output</em> :</p>
<blockquote>
<p>Length of your string : 40    </p>
<p>Sub-String '00456621' repeats in string '0045662100456621004566210045662100456621' </p>
</blockquote>
<p><em>Input</em> :</p>
<blockquote>
<p>004608294930875576036866359447</p>
</blockquote>
<p><em>Output</em>:  </p>
<blockquote>
<p>Length of your string : 30</p>
<p>No repeating Sub-String found in string '004608294930875576036866359447'</p>
</blockquote>
</div>
<span class="comment-copy"><i>looping through each character trying to build a pattern then checking the pattern vs the rest of the string <b>seems</b> awful slow</i> - but is it?</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/17793962/writing-a-regex-to-detect-repeat-characters">Writing a regex to detect repeat-characters</a></span>
<span class="comment-copy">@AvinashRaj That's only matching part of a string, not the full thing.</span>
<span class="comment-copy">@AvinashRaj The OP is asking about all possible solutions. The question you link to only accepts <i>regex</i> solution. Note that regex may be able to solve the problem but in <i>much</i> more time than necessary. For example an optimal solution (i.e. linear time) would use the suffix tree of the text. You just have to find the longest repeated substring and do some checks on the lengths.</span>
<span class="comment-copy">@TigerhawkT3 The real dataset is far too large and unwieldy, but the examples in the question are part of it, and if you wish, <a href="http://paste.ubuntu.com/10765231/" rel="nofollow noreferrer">here's some more</a>.</span>
<span class="comment-copy">You can extend this to find the shortest repeating subsequence by using <code>.find()</code> or <code>.index()</code> instead of <code>in</code>, eg. <code>(s+s).find(s, 1, -1)</code>.</span>
<span class="comment-copy">Also, I think <code>(s+s).find(s, 1, -1)</code> will be (very slightly) faster than <code>(s+s)[1:-1].find(s)</code>, at least for larger strings, since the slicing means you have to create another copy of (nearly) the entire string.</span>
<span class="comment-copy">It's like if you take a sin or cos wave from a <a href="http://en.wikipedia.org/wiki/Periodic_function" rel="nofollow noreferrer">periodic function</a> and shift it to the right. Since it's fully periodic, the waves will eventually match up perfectly...The math parallels to this solution are just phenomenal. :) I wish I could give you +∞ upvotes.</span>
<span class="comment-copy">Guido's <a href="https://mail.python.org/pipermail/python-dev/2015-April/139054.html" rel="nofollow noreferrer">recent update</a> to <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> is relevant here: "Be consistent in return statements. Either all return statements in a function should return an expression, or none of them should. <b>If any return statement returns an expression,</b> any return statements where no value is returned should explicitly state this as return None, and <b>an explicit return statement should be present at the end of the function</b> (if reachable)."</span>
<span class="comment-copy">@WayneConrad Take a string, say, <code>"abcd"</code>, pop off the character on the right, and stick it back on to the left to obtain <code>"dabc"</code>. This procedure is called <i>rotating a string to the right by 1 character</i>. Repeat <code>n</code> times to rotate a string to the right by <code>n</code> characters. Now observe that if we have a string of <code>k</code> characters, rotating to the right by any multiple of <code>k</code> leaves the string unchanged. A <i>nontrivial</i> rotation of a string is one whose character number is not a multiple of the string's length.</span>
<span class="comment-copy">I have no idea why this concise two liner is not the highest-voted answer. The other answers are not bad, but this one is far better. (It may use the frequently denigrated <i>regular expression</i>, but I can inspect this far easier than the other much longer answers, which are full of nested blocks, potential typos, off-by-one errors, etc.) Ah well, worse is better I suppose.</span>
<span class="comment-copy">I think there are two main reasons for that: 1) some programmers like math more than they like regexes, and 2) since varying the length and nature of the input strings makes different answers pull ahead on performance, the super-long edge case strings (which may not even appear in the real data) make this solution appear suboptimal.</span>
<span class="comment-copy">sometimes you encounter great prejudice towards regular expressions. Ive had 2 managers that forbade the use of regular expressions because they had heard regular expressons are the wrong tool for the job. Except offcourse then they proceeded by asking me to implement an regexp engine</span>
<span class="comment-copy">@PaulDraper: Guess what regex is doing behind the scene? it is parsing the string and stores each element until a posible reapeatition match occurs. Thats the same what OP statet as too slow. so just because it is a 2 liner there isn't any performance win.</span>
<span class="comment-copy">@Zaibis, I'd normally agree, but this is both the shortest and fastest solution (<a href="http://stackoverflow.com/a/29482936/1212596)....Except">stackoverflow.com/a/29482936/1212596)....Except</a> for David's, which was posted after I made that comment. I actually like David's approach more (clever!).</span>
<span class="comment-copy">This solution is amazing.  You could change the divisors method to follow the produce-consumer pattern. So that it yield's results as they are found.  Will be a shame if this isn't the highest answer. Everything else is brute force.</span>
<span class="comment-copy">@JustinDanielson It returns a generator object created from a generator expression, which is an implicit producer :) It will lazy-evaluate the divisors.</span>
<span class="comment-copy">Ohh. I didn't know that. Well, even better then. :D I understand why you want to avoid sqrt, but you could use n/2 as the upper bound for the divisor range.</span>
<span class="comment-copy">@JustinDanielson Thanks for the suggestion, the range upper bound is now <code>(n/2)</code> inclusive.</span>
<span class="comment-copy">Should <code>n / 2</code> in <code>divisors()</code> be <code>n // 2</code>?</span>
<span class="comment-copy">Isn't this a brute force solution?</span>
<span class="comment-copy">@JustinDanielson Yes. But a solution none the less.</span>
<span class="comment-copy">I'm seeing about 1e-5 to 3e-5 seconds for short strings, 3e-5 to 4e-5 seconds for successful long (1000-character) strings, and a little bit under a millisecond for unsuccessful long strings (worst case). So a thousand 1000-character strings would take about a second. Compared to the math answer, this finds matches 10 times faster, but takes 3 times longer to fail.</span>
<span class="comment-copy"><code>repeat('aa')</code> returns <code>None</code></span>
<span class="comment-copy"><code>len(string[0:i])</code> is always equal to <code>i</code> (in this case at least). Replacing these, and also saving <code>len(string)</code> and <code>string[0:i]</code> in variables might speed things up. Also IMO this is a great solution, awesome ;)</span>
<span class="comment-copy">Your <code>prefix_function()</code> is not valid Python: you have missing colons on your <code>while</code> and <code>if</code> statements, and <code>&amp;&amp;</code> instead of <code>and</code>. After fixing those, it fails with <code>UnboundLocalError: local variable 'i' referenced before assignment</code> because of the line <code>for i in range(i, n):</code>.</span>
<span class="comment-copy">Zero, thanks, fixed these mistakes</span>
<span class="comment-copy">Thanks :-) If you can put together a function that uses your <code>prefix_function()</code> to return similar results to the other answers – either the shortest substring or <code>None</code> – I'll include it in a revised benchmark I'm putting together.</span>
<span class="comment-copy">@ZeroPiraeus, added</span>
<span class="comment-copy">Sorry, it doesn't work right now, I'll check</span>
<span class="comment-copy">This solution is indeed virtually identical to my optimized one. I see that you have a <code>range</code> limit of <code>length//2</code>, just like I did - you have to change that to <code>length//2+1</code> if you want to catch strings that are exactly doubled (e.g. <code>'aabaab'</code>).</span>
<span class="comment-copy">Ooops, you're correct :D</span>
<span class="comment-copy">And now they're identical! \o/ I need to pay more attention to optimization in the future, but I'm glad the algorithm itself was sound.</span>
<span class="comment-copy">@TigerhawkT3 yeah, but David Zhang beat us both with cleverness :D</span>
<span class="comment-copy">Now that I look at this one carefully, it seems to be nearly identical to my originally posted (before any edits) solution, with the only differences being saving the length and the substring. I guess I had a pretty good algorithm. :P</span>
<span class="comment-copy">@TigerhawkT3 Yeah indeed! :)</span>
<span class="comment-copy"><a href="http://stackoverflow.com/a/29482936">Not bad at all :-)</a> The benchmark runs on Python 3.4 (partly because OP doesn't specify a version and that's what everyone <i>should</i> be using, and partly because it uses the new <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow noreferrer"><code>statistics</code></a> module), so I had to change your <code>/</code>s to <code>//</code>s and replace <code>xrange()</code> with <code>range()</code> (which behaves like 2.x's <code>xrange()</code> in 3.x).</span>
<span class="comment-copy">Here are the <a href="https://bitbucket.org/snippets/schesis/nMnR/revisions/" rel="nofollow noreferrer">revisions</a> to the benchmark, so you can review my changes, by the way.</span>
<span class="comment-copy">Thanks Zero. That was fast. The results were slightly down on my predictions. I suspect the techniques I used for speed in Python 2.7 are not very effective in Python 3.4. Oh, well - a fun and educational exercise.</span>
<span class="comment-copy"><code>//</code> in 3.x is integer division (just like the 2.x behaviour of <code>/</code>), while 3.x's <code>/</code> is float division (which I'm sure would be much slower even if it didn't break your solution by causing an attempt to use a float as an index). As mentioned, 3.x's <code>range()</code> is the same thing as 2.x's <code>xrange()</code>; no equivalent of 2.x's <code>range()</code> exists in 3.x. So I don't think that's the cause of any discrepancy between the benchmark and any timings you made. It's probably just that 3.x is slower overall than 2.x (or maybe your machine is faster than mine).</span>
<span class="comment-copy">When I get some time, I shall have a close look at the run-time differences between Python 2 and Python 3.</span>
<span class="comment-copy">I've updated the benchmark answer to include your solution.</span>
<span class="comment-copy">Thank you :) I did not optimise it much though. I just wanted to present different approach because other answers are focusing on finding the the pattern and my approach focuses on proving that there is no pattern :) Therefore for random strings my algorithm should run much faster.</span>
