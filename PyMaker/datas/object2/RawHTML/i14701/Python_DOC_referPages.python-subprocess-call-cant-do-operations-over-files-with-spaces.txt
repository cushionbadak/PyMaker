<div class="post-text" itemprop="text">
<p>I have a list of files inside a directory on Linux:</p>
<pre><code>files 1.pdf
files 2.pdf
files.pdf
files 3.pdf
</code></pre>
<p>I have assigned all inside a list:</p>
<pre><code>&gt;&gt;&gt; files_destino = [f for f in os.listdir("./espacio/")]
</code></pre>
<p>when I do for-loop it does list the files even though it has spaces.</p>
<pre><code>   &gt;&gt;&gt; for i in files_destino:
...     print i
... 
files 1.pdf
files 2.pdf
files.pdf
files 3.pdf
</code></pre>
<p>But when I'm trying to do a "cp" or "rsync" or any other command over them it appears as though they don't exist except for the ones with NO spaces.</p>
<pre><code>    &gt;&gt;&gt; for i in files_destino:
...     subprocess.call(["cp","-v",i,"/tmp/"])
... 
cp: files 1.pdf: No such file or directory
1
cp: files 2.pdf: No such file or directory
1
files.pdf -&gt; /tmp/files.pdf
0
cp: files 3.pdf: No such file or directory
1
</code></pre>
<p>Any reason of this behaviour?</p>
<p>Thanks</p>
<hr/>
<p>Here are the output from the suggestions.</p>
<pre><code>   &gt;&gt;&gt; subprocess.call(["cp","-v",'"'+i+'"',"/tmp/"])
cp: "files 1.pdf": No such file or directory
1
&gt;&gt;&gt; subprocess.call(["cp","-v",'"{}"'.format(i),"/tmp/"])
cp: "files 1.pdf": No such file or directory
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>cp: files 1.pdf: No such file or directory
</code></pre>
<p>The file <code>files 1.pdf</code> isn't inside the current directory. It's inside the directory you listed, <code>./espacio/</code>. If <code>files.pdf</code> worked, it's only because by coincidence there was also a <code>files.pdf</code> inside the currect directory.</p>
<pre><code>parent_path = './espacio/'
for file_name in os.listdir(parent_path):
    file_path = os.path.join(parent_path, file_name)
    subprocess.call(["cp", "-v", file_path ,"/tmp/"])
</code></pre>
<p>However, as @Colonel Thirty Two commented, it's generally a better idea to do the copying inside Python rather than using a shell command when you can.</p>
</div>
<div class="post-text" itemprop="text">
<p>With your solution @bobince now can do it as wanted also with MD5.</p>
<pre><code>def onepath(archivo):
    logging.basicConfig(filename=salida,filemode="w", format='%(message)s', level=logging.DEBUG)
    for file_name in os.listdir(archivo):
            #se obtiene la ruta relativa de todos los archivos que estan dentro de esa carpeta
            file_path = os.path.join(archivo, file_name)
            print file_path
            with open(file_path) as checkfile:
                    logging.info("MD5" + "(%s) = " % file_name + hashlib.md5(checkfile.read()).hexdigest())
</code></pre>
</div>
<span class="comment-copy">have you tried adding quotes around the file name? <code>'"'+i+'"'</code></span>
<span class="comment-copy">Better yet, use <a href="https://docs.python.org/3/library/shutil.html" rel="nofollow noreferrer"><code>shutil.copyfile</code></a></span>
<span class="comment-copy">works for me. which OS do you use?</span>
<span class="comment-copy">This kinda surprises me.  Is <code>cp</code> an alias?  I wonder if its passing the variables is what's causing the space expansion.  If you us <code>/bin/cp</code> instead of <code>cp</code> does it work as expected?</span>
<span class="comment-copy">Mac Os X 10.10, Python 2.7.6</span>
<span class="comment-copy">What about if instead "cp" I want to use "rsync" command or "md5" command?</span>
<span class="comment-copy">@x1c70r: You do the same thing: just path the file <i>path</i> e.g. <code>espacio/files 1.pdf</code>, not just the file name e.g. <code>files 1.pdf</code> and you'll be fine.</span>
<span class="comment-copy">@x1c70r first, don't edit the answer to respond to it. Second, the answer said "<i>when you can.</i>" Python includes an <a href="https://docs.python.org/2/library/md5.html" rel="nofollow noreferrer"><code>md5</code></a> module, and there are 3rd-party modules for <code>rsync</code>, although you can certainly call the command-line version if you wish. Get to know the std lib, use <a href="https://pypi.python.org" rel="nofollow noreferrer">PyPI</a>, and google everything.</span>
<span class="comment-copy">To calculate MD5 hash, <code>import hashlib</code> and <code>hashlib.md5(open(filename, 'rb').read()).hexdigest()</code>. Rsync isn't built into the standard library, so to avoid the command line for that you'd have to use a third-party module.</span>
<span class="comment-copy">Thank you all you guys! Let me figure it out.</span>
