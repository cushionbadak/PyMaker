<div class="post-text" itemprop="text">
<p>They produce the same results.</p>
<pre><code>&gt;&gt;&gt; for i in range(10, -1, -1):
...     print(i)
... 
10
9
8
7
6
5
4
3
2
1
0
</code></pre>
<p>contrasted with:</p>
<pre><code>&gt;&gt;&gt; for i in reversed(range(0, 10 + 1):
...     print(i)
... 
10
9
8
7
6
5
4
3
2
1
0
</code></pre>
<p>From what I understand, Python3's <code>range</code> creates a generator rather than storing the whole range in memory. <code>reversed</code> likewise generates its values one at a time, I think. Is there any reason to use one over the other?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>reversed()</code> function in Python has a special case for when you pass it a <code>range()</code>.  The only real difference between <code>reversed(range(...))</code> and <code>range(...)</code> is that you can iterate over a <code>range()</code> more than once, but <code>reversed()</code> returns an iterator, so it can only be used once.</p>
<pre><code>&gt;&gt;&gt; iter(range(0, 10))
&lt;range_iterator object at 0x7f735f5badb0&gt;
&gt;&gt;&gt; reversed(range(0, 10))
&lt;range_iterator object at 0x7f735f5baf30&gt;
</code></pre>
<p>You can see that in both cases, the iterator type is <code>range_iterator</code>.  So, the performance of the loop itself will be identical in both cases.</p>
<p>Since the only overhead to <code>reversed()</code> is one extra function call, I always prefer <code>reversed(range(10))</code> over <code>range(9, -1, -1)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is the results from using <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow"><code>timeit</code></a> on the two modules</p>
<pre><code>bhargav@bhargav:~$ python -m timeit "for i in range(10, -1, -1):(i)"
1000000 loops, best of 3: 0.466 usec per loop
bhargav@bhargav:~$ python -m timeit "for i in reversed(range(0, 10 + 1)):(i)"
1000000 loops, best of 3: 0.531 usec per loop
</code></pre>
<p>As you can see, the second way is slower that is because it has an additional call to the function <a href="https://docs.python.org/2/library/functions.html#reversed" rel="nofollow"><code>reversed</code></a>. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>reversed</code> makes it an iterator so depending on how you  use it there are differences:</p>
<pre><code>In [1]: r =  reversed(range(0, 10 + 1))

In [2]: next(r)
Out[2]: 10

In [3]: r = range(10, -1, -1)

In [4]: next(r)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-4-0b5056469c9c&gt; in &lt;module&gt;()
----&gt; 1 next(r)

TypeError: 'range' object is not an iterator
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The only real difference between <code>range(-n+1, -1, -1)</code> and <code>reversed(range(n))</code> is that <code>range()</code> returns a range object that can be further used/manipulated before iterating over it. Whereas <code>reversed()</code> returns an iterator -- all you can do is iterate over it.</p>
<p>Examples of using a range object, which cannot be done with an iterator.</p>
<pre><code>rng = range(20, 40, 2)
length = len(rng)
element = rng[0]
index_of_element = rng.index(element)
membership_test = 0 in rng
new_rng_from_slice = rng[2:5]
</code></pre>
<p>Since range objects can be sliced this also opens up the possibility of reversing them in another way:</p>
<pre><code>assert range(n)[::-1] == range(-n+1, -1, -1)
</code></pre>
<p>However, unless additional functionality of a range object is needed, then <code>reversed(range(n))</code> is vastly preferable as it is easier to understand.</p>
</div>
<span class="comment-copy">I guess <code>range()</code> would be preferred over <code>reverse()</code> as the latter one leads a bit more of overhead , But the correct analysis can only be done by logging the execution time of both</span>
<span class="comment-copy">I always though that reversed would not produce a generator but actually make a list.  According to the Python 3 docs, it makes an iterator but I doubt it's a generator. <a href="https://docs.python.org/3/library/functions.html?highlight=reversed#reversed" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">Most of the time, the choice is actually between <code>range(n-1, -1, -1)</code> and <code>reversed(range(n))</code>. The second option is the clear winner in readability, and it's much less error-prone. Given that the timing difference is minor, and that the loop body will nearly always dominate, I would nearly always go for <code>reversed</code>.</span>
<span class="comment-copy">@DovGrobgeld that is wrong. Python has a couple of ways in which <code>reversed</code> can avoid having to cache the whole sequence in memory. If the object has a <code>__reversed__</code> method then <code>reversed</code> delegates to that function. Or, it the object has both <code>__len__</code> and <code>__getitem__</code> methods then a smart reverse iterator is generated from those methods. Only when neither of these two options are available does <code>reversed</code> fall back on caching the whole sequence in memory.</span>
<span class="comment-copy">@Dunes: Actually, it never falls back on that. Try <code>reversed(reversed(range(10)))</code>, and you'll see that rather than trying to store all output to reverse it, the outer <code>reversed</code> call just throws an error.</span>
<span class="comment-copy">"Also noted here that generators are 3 times faster than iterators." - that is not what the link is saying at all. Also, <code>range</code> does not produce a generator, and generators are a kind of iterator.</span>
<span class="comment-copy">@user2357112 Noted that! I read the answer just yesterday. Perhaps I misinterpreted that!. I will gladly remove the misleading words. Thanks again</span>
<span class="comment-copy">I guess I better leave the two links that I deleted here. 1. <a href="http://stackoverflow.com/questions/4402858/pythons-generator-expression-at-least-3x-faster-than-listgenerator-expres">Speed comparison between iterator and Generator</a> 2. <a href="http://stackoverflow.com/questions/2776829/difference-between-pythons-generators-and-iterators">General Difference between Iterator and Generator</a></span>
