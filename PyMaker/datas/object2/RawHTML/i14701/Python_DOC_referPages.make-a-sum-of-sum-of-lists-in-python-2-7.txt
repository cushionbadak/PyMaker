<div class="post-text" itemprop="text">
<p>This is my whole code for a work in progress:</p>
<pre><code> nList = [[[0,0,4287320],[10423234600,0,63248900]],\
[],\
[[132447000,10432900,134820]],\
[[0,0,0],[3002340,4324000,303420],[3003420,40023420,720424],[0,0,102432420]],\
[[132432450,0,0],[10034220,0,36432230], [400432240,40243200,6432260],[4000423, 40243200, 964234240],[12342400,0,132342420]]]
</code></pre>
<p>Decoding the list:
nList has multiple traces with trace1 having two points, trace2 having no points, trace3 having 1 point and so one. each point in the trace is made up of three elements [x co-ordinate, y co-ordinate, time.</p>
<p>At the end of this whole code, I need to print the <code>sum(sum(lengthList))</code>, and this formula obviously doesn't work. Problem is, I have also tried <code>print map(sum(sum, lengthList))</code>, <code>print sum(sum(lengthList))</code> and none of them have worked. It also has to be a function and not just a print as the nList needs to work for multiple lists of a similar nature. Thanks for the help!</p>
</div>
<div class="post-text" itemprop="text">
<p>I've made two modifications.Change length_list outside the function.</p>
<pre><code>length_list=[]
def lengths(trace):

sum_of_all_lengths=[]
for i in range(0,len(trace)-1):
    length=calculateLength(trace[i][0], trace[i][1], trace[i+1][0], trace[i+1][1])
    length_list.append(length)
return length_list
</code></pre>
<p>at the end you can have this</p>
<pre><code>print sum(length_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should help you from the "float object not iterable" error ! </p>
<p><strong>Edit:</strong></p>
<p>Declare the below, above the forloop  </p>
<blockquote>
<p>lengthList=[]</p>
</blockquote>
<p>and in the last else part of the for loop  </p>
<blockquote>
<p>lengthList.append(sum(float(x) for x in lengths(trace)))</p>
</blockquote>
<p>Out side the for loop  </p>
<blockquote>
<p>print [sum(float(x) for x in lengthList)]</p>
</blockquote>
<p>Good Luck!</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <a href="https://docs.python.org/2/tutorial/datastructures.html" rel="nofollow">list comprehension</a>:</p>
<pre><code>sum([sum(x) for x in lengthList])
</code></pre>
<p>This would sum the points values in lengthList, and then return the sum of those sums. </p>
<p>Or as @soon pointed out, a <a href="https://wiki.python.org/moin/Generators" rel="nofollow">generator</a>:</p>
<pre><code>sum(sum(x) for x in lengthList)
</code></pre>
<p>Although if you want to use any list methods, you should use the list comprehension.</p>
</div>
<div class="post-text" itemprop="text">
<p>just take a list <code>lengthList = []</code> and enter element by  <a href="http://www.tutorialspoint.com/python/list_extend.htm" rel="nofollow">extend</a></p>
<p>you can change simple in your code in last <code>for loop</code></p>
<pre><code>lengthList = []
for i in range(len(traceList)):
    trace=traceList[i]
    if len(trace)==0:
        print "Trace {0} has no points!".format(i)
    elif len(trace)==1:
        print "Trace {0} consists of a single point.".format(i)
    else:
        #lengthList=lengths(trace)            
        lengthList.extend(lengths(trace))

print sum(lengthList)
</code></pre>
<p>Output</p>
<pre><code>Trace 1 has no points!
Trace 2 consists of a single point.
22436.5910894
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to calculate the total length of all traces, you should firstly calculate the lengths of all traces:</p>
<pre><code>In [9]: lengths_of_all_traces = map(lengths, (trace for trace in traceList if len(trace) &gt; 1))

In [10]: lengths_of_all_traces
Out[10]: [[1000.0], [5000.0, 0.0, 5000.0], [850.0, 5000.0, 0.0, 5586.591089385369]]
</code></pre>
<p>As you can see, we skip traces with zero or one points.</p>
<p>The next step is calculating the total length. You could just pass generator expression to <code>sum</code> function:</p>
<pre><code>In [11]: total_length = sum(sum(t) for t in lengths_of_all_traces)

In [12]: total_length
Out[12]: 22436.59108938537
</code></pre>
<p>Actually, you could remove the condition <code>if len(trace) &gt; 1</code>, since <code>sum</code> works with empty lists pretty well:</p>
<pre><code>In [13]: lengths_of_all_traces = map(lengths, traceList)

In [14]: lengths_of_all_traces
Out[14]: 
[[1000.0],
 [],
 [],
 [5000.0, 0.0, 5000.0],
 [850.0, 5000.0, 0.0, 5586.591089385369]]

In [15]: total_length = sum(sum(t) for t in lengths_of_all_traces)

In [16]: total_length
Out[16]: 22436.59108938537
</code></pre>
<p>You could also use <a href="https://docs.python.org/2/library/itertools.html#itertools.imap" rel="nofollow"><code>imap</code></a> function (which returns iterator) instead of <code>map</code> (which returns <code>list</code>) for saving memory.</p>
</div>
<span class="comment-copy">This should help you from the "float object not iterable" error !        <code>sum([sum(float(x) for x in lengthList)])</code>  Good Luck!</span>
<span class="comment-copy">Hey,     I've tried this &amp; it works!  Regards.  p.s.: You can work it out on the idle &amp; report back if it throws an error. For me, it worked just fine.</span>
<span class="comment-copy">Hi @AlekhyaVemavarapu. I tried this and it gave me sum(lengthLists) outputs. Not sum of the sum(lengthLists).</span>
<span class="comment-copy">May I know what you exactly require ? Cuz I did not really get your question, So worked on the error that u've mentioned.  Regards.</span>
<span class="comment-copy">I need the output that soon produced: 22436.59108938537. The sum(sum(lengthList)).</span>
<span class="comment-copy">Check my edit !</span>
<span class="comment-copy">No reason for list comprehension - just use generator like this <code>sum(sum(x) for x in [[1, 2, 3], [4, 5, 6]])</code> or <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> function.</span>
<span class="comment-copy">@Tui Popenoe I keep getting the error 'float' object is not iterable. Thanks for your help though.</span>
<span class="comment-copy">Are all your points in lengthList defined as lists/tuples? Or are single values represented with floats (what sounds like is going on)</span>
<span class="comment-copy">Why would you need list methods? Sum would return an int/float.</span>
<span class="comment-copy">If you wanted to modify a sublist before summing the sublists.</span>
<span class="comment-copy">I need the lengths stored in the form I have because I use individual trace lengths for much more complex functions later on. Unfortunately, I can't change the composition of my current code without jeopardizing the rest. I strongly simplified my original code to only show part I was stuck on.</span>
