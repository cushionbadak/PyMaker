<div class="post-text" itemprop="text">
<p>For example how can I define the properties of a class object in Python? How can I define what happens when I add two objects? Or multiply them? Or divide them? Or print them? Or if I call one with a number of arguments? </p>
<p>I see things like <code>__mul__</code> and <code>__add__</code> but what are these called and what are the rest?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is called operator overloading.</p>
<pre><code>class Human(object):
    def __init__(self, name):
        self.name = name

    def __add__(self, other):
        return '{0} {1}'.format(self.name, other.name)

    def __mul__(self, other):
        return self.name * len(other.name)

    def __str__(self):
        return self.name

bob = Human('Bob')
sam = Human('Sam')

print sam + bob # calls __add__
print sam * bob # calls __mul__

print bob # calls __str__
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>__mul__</code> and <code>__add__</code> are methods you call within your class that affect how you multiply and add two instances of your class, respectively. These <a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" rel="nofollow">special method names</a> are used to control how instances operate.</p>
</div>
<div class="post-text" itemprop="text">
<p>To know what special name methods that are a part of the object, type <code>dir(object_name)</code></p>
<p>For example, to see what methods are a part of strings:</p>
<pre><code>&gt;&gt;&gt; dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__',
'__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__'
, '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_e
x__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__',
 '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'enco
de', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower',
 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind'
, 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip',
'swapcase', 'title', 'translate', 'upper', 'zfill']
</code></pre>
<p>Just be careful with these special methods. </p>
<p>Instead of this:</p>
<pre><code>&gt;&gt;&gt; "a".__add__("b")
'ab'
</code></pre>
<p>Do this:</p>
<pre><code>&gt;&gt;&gt; "a" + "b"
'ab'
</code></pre>
<p>Here's an example of how to do matrix addition, with your own custom matrix class.</p>
<pre><code>class Matrix():
    def __init__(self, a):
        self.a = a
    def __add__(self, b):
        i = j = 0
        c = []
        while i &lt; len(self.a):
            c.append([])
            while j &lt; len(self.a[0]):
                c[i].append(self.a[i][j] + b[i][j])
                j += 1
            j = 0
            i+= 1

        return Matrix(c)

    def __getitem__(self, i):
        return self.a[i]

    def __str__(self):
        return "\n".join([str(i) for i in self.a])

a = Matrix( [[1,2,3], [4,5,6], [7,8,9]] )
b = Matrix( [[1,2,3], [4,5,6], [7,8,9]] )

print a
print "+"
print b
print "="
print a + b
</code></pre>
</div>
<span class="comment-copy">So why not __ add instead?</span>
<span class="comment-copy">What do you mean? These are special methods derived from the base object class.</span>
<span class="comment-copy">I see online various examples of when people use methods that only have one half of those underscores present (__ add instead of __ add __ )</span>
<span class="comment-copy">That's just a convention for private methods, which don't really exist in Python. <code>__add</code> won't have any significance.</span>
<span class="comment-copy">Thanks, was really confused by that</span>
<span class="comment-copy">What is the difference between "__ add" and "__ add __"? (spaces added to prevent bold)</span>
<span class="comment-copy">The first will not affect how you add the instances, it will just operate as any other method will.</span>
<span class="comment-copy">Is there some difference with the second?</span>
<span class="comment-copy">Yes, the second <b>will</b>, upon completion, contain the code necessary to add the two instances.</span>
<span class="comment-copy">I think I will need __ add __ though to overload operators</span>
<span class="comment-copy">If you're trying to implement your own <code>__add__</code> for a custom class, then that's fine. Every time you call A + B then it will call your <code>__add__</code> method.</span>
<span class="comment-copy">I added an example with matrices if you're still interested.</span>
