<div class="post-text" itemprop="text">
<p>Sample code that works without issue:</p>
<pre><code>from multiprocessing import *
import time
import random

def myfunc(d):
    a = random.randint(0,1000)
    d[a] = a
    print("Process; %s" % a)

print("Starting mass threads")

man = Manager()
d = man.dict()
p = Pool(processes=8)

for i in range(0,100):
    p.apply_async(myfunc, [d])

p.close()
p.join()

print(d)

print("Ending multiprocessing")
</code></pre>
<p>If you change <code>p.apply_async(myfunc, [d])</code> to <code>p.apply_async(myfunc, (d))</code> or <code>p.apply_async(myfunc, d)</code> then the pool will not work at all. If you add another arg to <code>myfunc</code> and then just pass in a <code>None</code> it'll work like this <code>p.apply_async(myfunc, (None, d))</code> â€” but why?</p>
</div>
<div class="post-text" itemprop="text">
<p>The documentation for <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.apply" rel="nofollow"><code>apply_async</code></a> says the following:</p>
<blockquote>
<p><code>apply(func[, args[, kwds]])</code></p>
<p>Call <code>func</code> with arguments <code>args</code> and keyword arguments <code>kwds</code>. It blocks until the result is ready. Given this blocks, <code>apply_async()</code> is better suited for performing work in parallel. Additionally, <code>func</code> is only executed in one of the workers of the pool.</p>
</blockquote>
<p>Thus instead of taking star and double star arguments, it takes positional arguments and keyword arguments to be passed to the target function as the 2nd and 3rd arguments to the function; the second must be an <em>iterable</em> and the 3rd one a <em>mapping</em>, respectively.</p>
<hr/>
<p>Notice that since the apply works asynchronously, you won't see any exceptions, unless you <code>.wait</code> and <code>.get</code> them from the results; </p>
<p>You can try simply:</p>
<pre><code>for i in range(0,100):
    result = p.apply_async(myfunc, d)

print(result.get())
</code></pre>
<p>In the code above, the <code>result.get()</code> waits for the completion of the 100th thread and returns its returned value - or tries as it will fail, because the managed dictionary cannot be used as the positional arguments:</p>
<pre><code>Traceback (most recent call last):
  File "test.py", line 21, in &lt;module&gt;
    print(result.get())
  File "/usr/lib/pythonN.N/multiprocessing/pool.py", line 558, in get
    raise self._value
KeyError: 0
</code></pre>
<hr/>
<p>Thus, looking at your original question: do note that <code>[d]</code> is a list of length 1; <code>(d)</code> is the same as <code>d</code>; to have a <em>tuple</em> of length 1 you need to type <code>(d,)</code>. From the <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow">Python 3 tutorial section 5.3</a>:</p>
<blockquote>
<p>A special problem is the construction of tuples containing 0 or 1
  items: the syntax has some extra quirks to accommodate these. Empty
  tuples are constructed by an empty pair of parentheses; a tuple with
  one item is constructed by following a value with a comma (it is not
  sufficient to enclose a single value in parentheses). Ugly, but
  effective. For example:</p>
<pre><code>&gt;&gt;&gt; empty = ()
&gt;&gt;&gt; singleton = 'hello',    # &lt;-- note trailing comma
&gt;&gt;&gt; len(empty)
0
&gt;&gt;&gt; len(singleton) 
1
&gt;&gt;&gt; singleton 
('hello',)
</code></pre>
</blockquote>
<p><code>(d,)</code>, <code>[d]</code>, <code>{d}</code>, or even <code>iter(frozenset(d))</code> or <code>{d: True}</code> would work just nicely as your positional arguments; all these as <code>args</code> would result in an Iterable whose iterator yields exactly 1 value - that of <code>d</code>. On the other hand, if you had passed almost any other kind of value than that unfortunate <em>managed dictionary</em>, you would have gotten a much more usable error; say if the value was <code>42</code>, you'd have got:</p>
<pre><code>TypeError: myfunc() argument after * must be a sequence, not int
</code></pre>
</div>
<span class="comment-copy">ah fascinating behaviour indeed now that I test it :P</span>
<span class="comment-copy">Documented in Python tutorial 5.3; maybe a good read</span>
<span class="comment-copy">@josten tuples are made by commas, not parentheses. Parentheses are just used to group things together (e.g. the difference between <code>datetime.now() - start_time.total_seconds()</code> and <code>(now - start_time).total_seconds()</code>. The former fails since it tries to subtract an int from a datetime object, the second succeeds since it subtracts two datetime objects, yields a timedelta object, and runs the <code>total_seconds</code> method on the timedelta object. The comma is the important bit!!</span>
