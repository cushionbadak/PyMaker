<div class="post-text" itemprop="text">
<p>I'm new to Python and trying to write a simple poker playing game. If I have five cards, <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>e</code> and want to check if any of them match (are a pair), then I think I could write a line like:</p>
<pre><code>if a==b or b==c or a==c or ...  # ad nauseam
</code></pre>
<p>But I think there is a tool whereby you can effectively ask </p>
<blockquote>
<p>if any of <code>(a,b,c,d,e)</code> match, then...</p>
</blockquote>
<p>However I don't know how to write it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="nofollow"><code>itertools.combinations</code></a> to get all the pairs of cards within the hand. To use a simple example:</p>
<pre><code>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; cards = (1, 2, 3, 4, 1)
&gt;&gt;&gt; list(combinations(cards, 2))
[(1, 2), (1, 3), (1, 4), (1, 1), (2, 3), (2, 4), (2, 1), (3, 4), (3, 1), (4, 1)]
</code></pre>
<p>Then you can use <a href="https://docs.python.org/2/library/functions.html#any" rel="nofollow"><code>any</code></a> to see if any of these pairs are a match to each other:</p>
<pre><code>&gt;&gt;&gt; any(card1 == card2 for card1, card2 in combinations(cards, 2))
True
</code></pre>
<p>You should be able to adapt this to your representation relatively easily; if you have <code>Card</code> objects, for instance, this will call <code>Card.__eq__(card1, card2)</code>. </p>
<p>Note that I've used a sequence (tuple, or a list would also work) of five <em>"cards"</em>, rather than five separate identifiers (<code>a</code>, <code>b</code>, etc.); this makes the code more readable and flexible (the size of the hand is now irrelevant, so you can easily add <a href="http://en.wikipedia.org/wiki/Seven-card_stud" rel="nofollow">seven-card stud</a> to your poker game).</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a generator expression to pass into the <code>any</code> built-in: </p>
<pre><code>if any(cards.count(i) &gt;= 2 for i in cards): # cards is the tuple of number
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd use the fact that <code>set</code> does not contain multiple same elements, for example:</p>
<pre><code>a=[1,1,2,2,3,3]
b=set(a)
print (b) # {1, 2, 3}
print len(a) == len(b) # False
</code></pre>
</div>
<span class="comment-copy">How did you model your "card" (and "hand") entities ? And what exact result do you expect ?</span>
<span class="comment-copy">You can use <a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a> to get the pairs of items.</span>
<span class="comment-copy">@jonrsharpe the OP is trying to find out if his "set" (whatever he actually means by "set") actually contains any pair, not to generate pairs from the "set"</span>
<span class="comment-copy">@brunodesthuilliers yes, and you can use <code>combinations</code> to get all combinations of two different items from the "set"; as you commented, without knowing how the objects are represented, it's hard to say exactly how this would be implemented (perhaps something like <code>any(c1 == c2 for c1, c2 in combinations(cards, 2))</code>), hence the comment.</span>
<span class="comment-copy">Another possibility might be to represent the hand as a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> dictionary.</span>
<span class="comment-copy">Or you could count if a number appears twice.</span>
<span class="comment-copy">@MalikBrahimi yes, but note that that would be <code>O(N**2)</code> in the worst case, whereas this is (slightly) more efficient at <code>O((N*(N+1))/2)</code></span>
<span class="comment-copy">Note that if all you want to know is whether a number appears more than once in a list of numbers then it's easy as <code>len(yourlist) &gt; len(set(yourlist))</code></span>
