<div class="post-text" itemprop="text">
<p>I am implementing a linked list in Python 3. I am trying to get output such as <code>"1  2  3"</code> with two spaces in between. My current code prints out <code>"1  2  3  "</code> instead:</p>
<pre><code>  def __str__ (self):
    current = self.first
    if (current == None):
      return None
    while (current.next != None):
      for i in range(1,10):
        if current != None or current != '':
          print(current.data,'  ',end='')
          current = current.next
</code></pre>
<p>How do I get rid of the last two spaces?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python you would typically use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join()</code></a> to build a string from a collection of items with some constant separator. This takes care of the problem of having an extra separator at one or the other end of your string.</p>
<p>But you need to give <code>str.join()</code> an iterable. Judging by what you've shown of your code, you should be able to make this class iterable by defining the <code>__iter__</code> method as something like:</p>
<pre><code>def __iter__(self):
    current = self.first
    while current is not None:
        yield current
        current = current.next
</code></pre>
<p>For more details about the <code>yield</code> keyword and iterables, I recommend reading <a href="https://stackoverflow.com/q/231767/2359271">What does the "yield" keyword do in Python?</a>.</p>
<p>Note also that <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">PEP 8 recommends using <code>is not None</code> rather than <code>!= None</code>:</a></p>
<blockquote>
<p>Comparisons to singletons like <code>None</code> should always be done with <code>is</code> or
  <code>is not</code>, never the equality operators</p>
</blockquote>
<p>Once the linked list is iterable, your string representation is as easy as:</p>
<pre><code>def __str__(self):
    return '  '.join(str(o) for o in self)  # two spaces between each item
</code></pre>
<p>Keep in mind when writing <code>__str__</code> methods that <a href="https://stackoverflow.com/q/13394046/2359271">you should <em>return</em> a string object, not print one in the body of the method.</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Just a blind guess:</p>
<pre><code>def __str__ (self):
    current = self.first
    def get_data():
        current = current.next
        return current.data
    return " ".join([self.first.data] + list(iter(get_data,None)))
</code></pre>
<p>Would you mind sharing your linked list implementation?</p>
</div>
<span class="comment-copy"><code>current.rstrip(' ')</code> should remove trailing spaces.</span>
<span class="comment-copy">What's <code>for i in range(1,10):</code> doing here?</span>
<span class="comment-copy">Note that <code>print()</code> inserts a single space. between the things it prints, by default. In this case, you're printing two things, <code>current.data</code>, and <code>'  '</code>. Not only will <code>rstrip()</code> not help here, as the extra spaces have already been printed, there will be THREE spaces after each item.</span>
<span class="comment-copy">The iterable passed to <code>str.join()</code> must yield strings, too: <code>return '  '.join(str(item) for item in self)</code></span>
<span class="comment-copy">@BlacklightShining Good catch. I neglected to test whether <code>join</code> would implicitly use the <code>__str__</code> of the iterable's elements.</span>
