<div class="post-text" itemprop="text">
<p>Hi I am trying to understand how the string formatting works with float:</p>
<p>I have tried</p>
<pre><code>&gt;&gt;&gt; print("%s %s %s %s %-9.10f"%("this","is","monday","morning",56.3648))
</code></pre>
<p>it gives output of</p>
<pre><code>this is monday morning 56.3648000000
</code></pre>
<p>however this,</p>
<pre><code>&gt;&gt;&gt; print("%s %s %s %s %10f"%("this","is","monday","morning",56.3648))
</code></pre>
<p>gives output of</p>
<pre><code>this is monday morning  56.364800
</code></pre>
<p>what is causing the difference?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow">The way the pattern strings are parsed</a>. <code>%9.10f</code> sets the (minimum) field width to 9 and the precision to 10, while <code>%10f</code> only sets the <em>width</em> to 10. I think you meant to write <code>%.10f</code> instead:</p>
<pre><code>In [4]: '%10f' % 56.3648 # width
Out[4]: ' 56.364800'

In [5]: '%.10f' % 56.3648 # precision
Out[5]: '56.3648000000'
</code></pre>
<p>Also, consider using <a href="https://docs.python.org/3/library/string.html?highlight=formatting#format-specification-mini-language" rel="nofollow">the newer <code>str.format</code> formatting style</a>. Your first example would turn into</p>
<pre><code>In [6]: '{} {} {} {} {:&lt;9.10f}'.format('this', 'is', 'monday', 'morning', 56.3648)
Out[6]: 'this is monday morning 56.3648000000'
</code></pre>
</div>
