<div class="post-text" itemprop="text">
<p>I have a dictionary:</p>
<pre><code>XY_dict = {1: [(12, 55),(13, 55)],
2: [(14, 55),(15, 57)],
3: [(14, 55),(15, 58)],
4: [(14, 55),(16, 55)]}
</code></pre>
<p>I want to find out which keys have values tuples of which are unique (don't present in any other key's value). From the sample dictionary, key 1 is unique because neither <code>(12, 55)</code> nor <code>(13, 55)</code> is present in any other dictionary's key. By getting the list of keys with shared values, I can invert the result later on and get the keys that are unique.</p>
<p>I am using a list comprehension for getting keys with shared values:</p>
<pre><code>keys_shared_values = [k1 for k1,v1 in XY_dict.iteritems()
                       for k,v in XY_dict.iteritems()
                       for XY_pair in v
                       if XY_pair in v1 and k != k1 and k1 not in keys_shared_values]
</code></pre>
<p>As a result, I am getting <code>[2, 2, 3, 3, 4, 4]</code> yet I expect duplicates not to be inserted (since I am evaluating whether the key value is in the result list). I can fix that by running the <code>list(set(shared_values))</code>, but would like to understand what is wrong with my code.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that <code>keys_shared_values</code> is empty until you complete the comprehension, so your <code>k1 not in keys_shared_values</code> will always return <code>True</code>. You cannot refer to the current comprehension. Your best bet is to convert to <code>set</code> as you already suggested.</p>
<p>You should change your code to a loop if you want that functionality:</p>
<pre><code>keys_shared_values = []
for k, v in XY_dict.iteritems():
    for k1, v1 in XY_dict.iteritems():
        for XY_pair in v:
            if XY_pair in v1 and k != k1 and k1 not in keys_shared_values:
                keys_shared_values.append(k1)
print keys_shared_values
</code></pre>
<p>result:</p>
<pre><code>[3, 4, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Others have already explained what's the problem with your list comprehension. Here's an alternative approach, using a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>Counter</code></a> dictionary to count how often the different <code>xy</code> pairs occur and using that to filter the unique entries from the dictionary.</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter(xy for v in XY_dict.values() for xy in v)
&gt;&gt;&gt; {k: v for k, v in XY_dict.iteritems() if all(c[xy] == 1 for xy in v)}
{1: [(12, 55), (13, 55)]}
</code></pre>
<p>Or to get the keys with shared values:</p>
<pre><code>&gt;&gt;&gt; [k for k, v in XY_dict.iteritems() if any(c[xy] &gt; 1 for xy in v)]
[2, 3, 4]
</code></pre>
<p>Note that this is also more efficient, as you compare each <em>combination of two items</em> from the dictionary, giving you quadratic complexity, while this approach has linear complexity.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code cannot work because <code>key_shared_values</code> is not defined. If you clean up your environment you will see that if you try to run your example you will get a <code>NameError: name 'key_shared_values' is not defined</code> error.</p>
<p>This is because <code>keys_shared_values</code> is not really defined until the comprehension statement runs, you cannot really reference it within the comprehension because it doesn't already exist.</p>
<p>If you were to predefine it, for example as <code>keys_shared_values = []</code> then this would still not work, because every time you would reference it in the comprehension it would reference the original empty list value. When the comprehension is executed it doesn't dynamically change the value of <code>keys_shared_values</code>, instead it creates the list in memory and then assigns it to <code>keys_shared_values</code>.</p>
</div>
<span class="comment-copy">What is <code>key_shared_values</code>, in <code>if XY_pair in v1 and k != k1 and k1 not in key_shared_values</code>?</span>
<span class="comment-copy">@thefourtheye, thanks for commenting. I expect this to be <code>[2,3,4]</code>.</span>
<span class="comment-copy">You can always use a set comprehension, like <code>key_shared_values = list({k1 for k1,v1 in XY_dict.iteritems() for k,v in XY_dict.iteritems() for XY_pair in v})</code> if you still want to use a comprehension.</span>
<span class="comment-copy">thanks for pointing this out. Working this out with the for loop is what I've been doing ealier, but wanted to make it a list comprehension. Now I know what the problem is.</span>
<span class="comment-copy">thanks very much. This is definitely much faster; the Counter seems to be really cool feature I could use more.</span>
