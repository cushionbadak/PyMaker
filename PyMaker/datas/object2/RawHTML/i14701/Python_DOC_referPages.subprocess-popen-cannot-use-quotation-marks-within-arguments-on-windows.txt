<div class="post-text" itemprop="text">
<p>I went through post after post on SO looking for a method to use quotation marks inside of arguments using subprocess.popen and I cannot seem to find a way. </p>
<p>This works fine from the commandline</p>
<pre><code>runme.bat --include="check|check2"
</code></pre>
<p>Python</p>
<pre><code>#!/usr/bin/python
import sys
import subprocess
import shlex

#command_line = "./runme.sh --include=\"check|check2\""
command_line = "runme.bat --include=\"check|check2\""

arg = shlex.shlex(command_line)
arg.quotes = '"'
arg.whitespace_split = True
arg.commenters = ''
command_line_args = list(arg)
print command_line_args

command_line_process = subprocess.Popen(
    command_line_args,
    universal_newlines=True,
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE
)

line = ""
while True:
    line = command_line_process.stdout.readline()
    if line:
        print line
        break
</code></pre>
<p>runme.bat</p>
<pre><code>echo %* &gt;&gt; someargs.txt
</code></pre>
<p>runme.sh</p>
<pre><code>#!/bin/bash
echo $@
</code></pre>
<p>I heard that subprocess.call() is a way around this but I'd like to be able to iterate line by line through the subprocess' output <strong>while the program is running</strong>.</p>
<p><strong>Edit:</strong></p>
<p>This seems to be a bug in Python because running runme.bat in cmd works correctly, running runme.py in linux works correctly, it's only when running runme.py on Windows where it doesn't work correctly. I created a ticket <a href="http://bugs.python.org/issue23862" rel="nofollow">here</a>.</p>
<p><strong>Edit2:</strong></p>
<p>It's not a python bug apparently lol. Look at chosen answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>On Windows, a string is a native API. To avoid unnecessary conversions, pass the command as a string:</p>
<pre><code>#!/usr/bin/env python
from __future__ import print_function
import subprocess

command = 'runme.bat --include="check|check2"'
process = subprocess.Popen(command,
    stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
    universal_newlines=True, bufsize=1)
for line in iter(process.stdout.readline, ''):
    print(line, end='')
</code></pre>
<p><code>stderr=subprocess.STDOUT</code> merges stderr into stdout. If you set <code>stderr=PIPE</code> then you should read from <code>process.stderr</code> in <em>parallel</em> with reading from <code>process.stdout</code> otherwise your program may deadlock.</p>
<p><code>Popen()</code> passes the string to <code>CreateProcess()</code> Windows function. If the child process is actually a batch-file; you should probably pass <code>shell=True</code> explicitly to make it clear that the command is interpreted using <code>cmd.exe</code> rules (<code>^</code>, <code>|</code>, etc are meta-characters, for more details <a href="https://stackoverflow.com/a/27867015/4279">read the links in this answer</a>).</p>
<p>If you want to pass the argument using <code>%1</code> instead of <code>%*</code> so that it includes<br/>
the whole <code>--include="check|check2"</code> (not only <code>--include</code>) then you could use additional quotes around the argument as <a href="https://stackoverflow.com/questions/29434969/subprocess-popen-cannot-use-quotation-marks-within-arguments-on-windows/29456740#comment47091632_29456740">@eryksun suggested in the comments</a>:</p>
<pre><code>command = '"runme.bat" "--include="check^^^|check2""'
</code></pre>
<p>Notice: triple <code>^</code> to escape <code>|</code> here.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should <strong>not</strong> use <code>shell=True</code> to run a <code>bat</code> file. Use it <em>only</em> if you have to run some built-in shell command. In other words the use your are making is useless and the only effect is to increase security vulnerability of your program.</p>
<p>Also, note that the <a href="https://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="nofollow noreferrer">documentation</a> clearly states that, when using <code>shell=True</code> it's recommended to pass the command line as a string:</p>
<blockquote>
<p>If <em>shell</em> is <code>True</code>, it is recommended to pass <em>args</em> as a string rather
  than as a sequence.</p>
</blockquote>
<p>So you should do:</p>
<pre><code>subprocess.check_output('runme.bat --include="check|check2"', shell=True)
</code></pre>
<p>The <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer"><code>check_output</code></a> function should be used if you only care for the output. It's way simper than creating a <code>Popen</code> object and then reading the output manually.</p>
<p>See also <a href="https://stackoverflow.com/questions/21029154/understanding-python-subprocess-check-outputs-first-argument-and-shell-true/21029310#21029310">my answer</a> regarding how <code>shell=True</code> changes the meaning of the arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another way to get the output is <code>subprocess.check_output()</code>:</p>
<pre><code>import subprocess

command_line = "runme.bat --include=\"check|check2\""
output = subprocess.check_output(
    command_line,
    shell=True
)
lines = output.splitlines(True)
print lines
</code></pre>
<p>To view the process's output in real time, see: <a href="https://stackoverflow.com/questions/803265/getting-realtime-output-using-subprocess">Getting realtime output using subprocess</a>.</p>
<p><strong>Edit:</strong> here's code with Popen to handle double quotes:</p>
<pre><code>from subprocess import Popen, PIPE, STDOUT

command_line = 'ls -la | grep "wheel"'
p = Popen(command_line, stdout=PIPE, stderr=STDOUT, shell=True)
while True:
    line = p.stdout.readline()
    if not line:
        break
    else:
        print line
</code></pre>
</div>
<span class="comment-copy">The documentation is a bit unclear, but it looks as if using a string (rather than a sequence) for <code>args</code> might resolve the problem.  Have you tried that already?  If that doesn't work either, you might want to try filing <i>that</i> as a bug.  Python should give you <i>some</i> way of passing an arbitrary command string without it trying to second-guess you.</span>
<span class="comment-copy">(1) the command in the answer has no <code>shell=True</code> i.e., it is already assumes that <code>Popen()</code> (via <code>CreateProcess()</code>) can run <code>.bat</code> files. The command line is interpreted <i>differently</i> if it is eventually given to <code>cmd.exe</code> that is why I said to include <code>shell=True</code> for <i>documentation</i> purposes (it makes no difference otherwise as far as I can tell in this case). (2) I don't see any point to include quotes around <code>runme.bat</code> or to include <code>^^^</code> here (<code>^</code> is not special inside quotes). I'm sure there are many quirks accumulated over the years in batch-file syntax but the example works as is.</span>
<span class="comment-copy">(1) "doesn't work" is not informative. I've used <code>py -c "import sys; print(sys.argv)" %1 %*</code> (in <code>runme.bat</code>) for testing and it works as expected. I'm sure; it may fail for other examples but I expect it to work for the case in the question. (2) It documents <b>the syntax</b> of the command line (<code>cmd.exe</code> rules) e.g., <code>shell=True</code> tells you whether <code>^</code> may be a meta-character.</span>
<span class="comment-copy">@eryksun: I've included your more general command in the answer. Thank you for your comments. They are insightful as usual.</span>
<span class="comment-copy">@Sebastian, brilliant!</span>
<span class="comment-copy">Thanks for the response. I just want to see the output line by line from the program while it's running which is possible with popen just not with arguments in double quotes. I removed the shell=True from the code above. You never mentioned the acknowledged the quotation issue in your answer... ?</span>
<span class="comment-copy">@Some note that using <code>shell=True</code> is also much slower than not using it, because it had to spawn a whole new shell and then execute the program. I don't get what your are saying about acknowledgements and I don't see any issue with that. I did disclose that I'm the author of the links answer.</span>
<span class="comment-copy">Thank you for your response but I'm looking for a way to run a command and capture output in realtime. I can do this with Popen but I also need to be able to use double quotes for a parameter...</span>
<span class="comment-copy">I've added a link to an answer about getting real time ouput.</span>
<span class="comment-copy">The answer you linked uses Popen with real time output (which is what I'm using above) and does not use double quotes in their arguments. The answer you gave uses check_output with double quotes but doesn't output line by line in real time. Unless I misread the link?</span>
<span class="comment-copy">To handle the double quotes, you can wrap the command in single quotes, like this: <code>command_line = 'runme.bat --include="check|check2"'</code>.</span>
<span class="comment-copy">I appreciate your suggestions but that does not work either. Please try the code I supplied above and you'll see why I posted about it. :)</span>
