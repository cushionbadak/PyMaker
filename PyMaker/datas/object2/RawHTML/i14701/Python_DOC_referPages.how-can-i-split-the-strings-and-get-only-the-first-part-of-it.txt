<div class="post-text" itemprop="text">
<p>I have a list in python like so:</p>
<pre><code>l=['1:a', '2:b' '1:c', '3:d', '4:d' ]
</code></pre>
<p>I want to remove duplicates from list.. but not whole index. I want to remove duplicates from first parameter of each index:</p>
<pre><code>list(set(l)).split(':')[0]
</code></pre>
<p>But I know this is not correct. I want the following result:</p>
<pre><code>&gt;&gt;&gt; ['1', '2', '3', '4']
</code></pre>
<p>I have <code>1:a</code> and <code>1:c</code> so I want to capture just <code>1</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want only unique values and you are worried about the Order, then you can use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>collections.OrderedDict</code></a>, like this</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; l = ['1:a', '2:b' '1:c', '3:d', '4:d']
&gt;&gt;&gt; list(OrderedDict.fromkeys(item.split(':')[0] for item in l).keys())
['1', '2', '3', '4']
</code></pre>
<p>If you are not worried about the Order, then you can use <code>set</code> like this</p>
<pre><code>&gt;&gt;&gt; set(item.split(':')[0] for item in l)
{'1', '3', '4', '2'}
</code></pre>
<p>If you want the results to be in the sorted order, then you can use <code>sorted</code> function, like this</p>
<pre><code>&gt;&gt;&gt; sorted(set(item.split(':')[0] for item in l), key=int)
['1', '2', '3', '4']
</code></pre>
<p>It converts the individual items to integers when it compares them during the sorting.</p>
<p>You can also use set comprehension here, like this</p>
<pre><code>&gt;&gt;&gt; sorted({item.split(':')[0] for item in l}, key=int)
['1', '2', '3', '4']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First you should probably make a new list taking the number from the string</p>
<pre><code>numbers = [i.split(":")[0] for i in l]
</code></pre>
<p>This is list comprehension, but you could use a for loop.</p>
<p>Then, use a set to remove duplicates</p>
<pre><code>no_duplicates = list(set(numbers))
</code></pre>
<p>If you are worried about the order of the list, sort it like so:</p>
<pre><code>no_duplicates.sort(key=int)
</code></pre>
</div>
<span class="comment-copy">You can't declare a list using this syntax: l=[1:a, 2:b 1:c, 3:d, 4:d ]. This syntax is reserved for dictionaries</span>
<span class="comment-copy">You all collapsing me??? I corrected the question !!!</span>
<span class="comment-copy">We are human... All of us can make an error undesired... !!!</span>
<span class="comment-copy">Thank you very much :)</span>
<span class="comment-copy">As a note, you can do a set comprehension instead of a <code>set()</code> call with a generator expression, i.e.: <code>sorted({item.split(':')[0] for item in l}, key=int)</code>.</span>
<span class="comment-copy">@Lattyware Oh yeah, I totally forgot about that. Thanks :-)</span>
<span class="comment-copy">using sort is not going to order the list as it were originally, if it does it will be by chance</span>
<span class="comment-copy">@PadraicCunningham It won't but the ordereddict method was in the accepted answer, and I couldn't think of another simpler way</span>
