<div class="post-text" itemprop="text">
<p>I often use Python's <code>print</code> statement to display data. Yes, I know about the <code>'%s %d' % ('abc', 123)</code> method, and the <code>'{} {}'.format('abc', 123)</code> method, and the <code>' '.join(('abc', str(123)))</code> method. I also know that the splat operator (<code>*</code>) can be used to expand an iterable into function arguments. However, I can't seem to do that with the <code>print</code> statement. Using a list:</p>
<pre><code>&gt;&gt;&gt; l = [1, 2, 3]
&gt;&gt;&gt; l
[1, 2, 3]
&gt;&gt;&gt; print l
[1, 2, 3]
&gt;&gt;&gt; '{} {} {}'.format(*l)
'1 2 3'
&gt;&gt;&gt; print *l
  File "&lt;stdin&gt;", line 1
    print *l
          ^
SyntaxError: invalid syntax
</code></pre>
<p>Using a tuple:</p>
<pre><code>&gt;&gt;&gt; t = (4, 5, 6)
&gt;&gt;&gt; t
(4, 5, 6)
&gt;&gt;&gt; print t
(4, 5, 6)
&gt;&gt;&gt; '%d %d %d' % t
'4 5 6'
&gt;&gt;&gt; '{} {} {}'.format(*t)
'4 5 6'
&gt;&gt;&gt; print *t
  File "&lt;stdin&gt;", line 1
    print *t
          ^
SyntaxError: invalid syntax
</code></pre>
<p>Am I missing something? Is this simply not possible? What exactly are the things that follow <code>print</code>? The <a href="https://docs.python.org/2/reference/simple_stmts.html#the-print-statement" rel="noreferrer">documentation</a> says that a comma-separated list of expressions follow the <code>print</code> keyword, but I am guessing this is not the same as a list data type. I did a lot of digging in SO and on the web and did not find a clear explanation for this.</p>
<p>I am using Python 2.7.6.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>print</code> is a statement in Python 2.x and does not support the <code>*</code> syntax.  You can see this from the grammar for <code>print</code> listed in the <a href="https://docs.python.org/2/reference/simple_stmts.html#grammar-token-print_stmt" rel="noreferrer">documentation</a>:</p>
<pre>
print_stmt ::=  "print" ([expression ("," expression)* [","]]
                | "&gt;&gt;" expression [("," expression)+ [","]])
</pre>
<p>Notice how there is no option for using <code>*</code> after the <code>print</code> keyword.</p>
<hr/>
<p>However, the <code>*</code> syntax <em>is</em> supported inside function calls and it just so happens that <a href="https://docs.python.org/3/library/functions.html#print" rel="noreferrer"><code>print</code> is a function in Python 3.x</a>.  This means that you could import it from <a href="https://docs.python.org/2/library/__future__.html" rel="noreferrer"><code>__future__</code></a>:</p>
<pre><code>from __future__ import print_function
</code></pre>
<p>and then use:</p>
<pre><code>print(*l)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; # Python 2.x interpreter
&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; l = [1, 2, 3]
&gt;&gt;&gt; print(*l)
1 2 3
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">OK, so it looks like it is simply not permitted by the language definition. I was hoping I was missing something, that somehow the <code>*</code> operator would be applied as part of evaluating <code>print</code>'s expressions, and that the result would somehow be compatible with <code>print</code>. In other words, I was hoping that <code>*iterable</code> would be interpreted by <code>print</code> as a comma-separated list of expressions, where each expression was an element of the iterable. I guess this would imply that each of those expressions would itself be evaluated, which might lead to code injection, or worse. Perhaps that is the reason.</span>
<span class="comment-copy">The <code>*</code> syntax is actually a part of the <a href="https://docs.python.org/2/reference/expressions.html#calls" rel="nofollow noreferrer">function call syntax</a>; it is not an independent operator.  <code>print</code> does not support it simply because the language designers didn't decide to make it that way.  There was a proposal recently to expand the <code>*</code> syntax to more areas of Python, but it has yet to be implemented.</span>
<span class="comment-copy">Ah. That explains things much further. Thanks. +1.</span>
