<div class="post-text" itemprop="text">
<p>In Python Pandas, what's the best way to check whether a DataFrame has one (or more) NaN values?</p>
<p>I know about the function <code>pd.isnan</code>, but this returns a DataFrame of booleans for each element. <a href="https://stackoverflow.com/questions/27754891/python-nan-value-in-pandas">This post</a> right here doesn't exactly answer my question either.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/users/1567452/jwilner">jwilner</a>'s response is spot on. I was exploring to see if there's a faster option, since in my experience, summing flat arrays is (strangely) faster than counting. This code seems faster:</p>
<pre><code>df.isnull().values.any()
</code></pre>
<p>For example:</p>
<pre><code>In [2]: df = pd.DataFrame(np.random.randn(1000,1000))

In [3]: df[df &gt; 0.9] = pd.np.nan

In [4]: %timeit df.isnull().any().any()
100 loops, best of 3: 14.7 ms per loop

In [5]: %timeit df.isnull().values.sum()
100 loops, best of 3: 2.15 ms per loop

In [6]: %timeit df.isnull().sum().sum()
100 loops, best of 3: 18 ms per loop

In [7]: %timeit df.isnull().values.any()
1000 loops, best of 3: 948 Âµs per loop
</code></pre>
<p><code>df.isnull().sum().sum()</code> is a bit slower, but of course, has additional information -- the number of <code>NaNs</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a couple of options. </p>
<pre><code>import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randn(10,6))
# Make a few areas have NaN values
df.iloc[1:3,1] = np.nan
df.iloc[5,3] = np.nan
df.iloc[7:9,5] = np.nan
</code></pre>
<p>Now the data frame looks something like this:</p>
<pre><code>          0         1         2         3         4         5
0  0.520113  0.884000  1.260966 -0.236597  0.312972 -0.196281
1 -0.837552       NaN  0.143017  0.862355  0.346550  0.842952
2 -0.452595       NaN -0.420790  0.456215  1.203459  0.527425
3  0.317503 -0.917042  1.780938 -1.584102  0.432745  0.389797
4 -0.722852  1.704820 -0.113821 -1.466458  0.083002  0.011722
5 -0.622851 -0.251935 -1.498837       NaN  1.098323  0.273814
6  0.329585  0.075312 -0.690209 -3.807924  0.489317 -0.841368
7 -1.123433 -1.187496  1.868894 -2.046456 -0.949718       NaN
8  1.133880 -0.110447  0.050385 -1.158387  0.188222       NaN
9 -0.513741  1.196259  0.704537  0.982395 -0.585040 -1.693810
</code></pre>
<ul>
<li><strong>Option 1</strong>: <code>df.isnull().any().any()</code> - This returns a boolean value</li>
</ul>
<p>You know of the <code>isnull()</code> which would return a dataframe like this:</p>
<pre><code>       0      1      2      3      4      5
0  False  False  False  False  False  False
1  False   True  False  False  False  False
2  False   True  False  False  False  False
3  False  False  False  False  False  False
4  False  False  False  False  False  False
5  False  False  False   True  False  False
6  False  False  False  False  False  False
7  False  False  False  False  False   True
8  False  False  False  False  False   True
9  False  False  False  False  False  False
</code></pre>
<p>If you make it <code>df.isnull().any()</code>, you can find just the columns that have <code>NaN</code> values:</p>
<pre><code>0    False
1     True
2    False
3     True
4    False
5     True
dtype: bool
</code></pre>
<p>One more <code>.any()</code> will tell you if any of the above are <code>True</code></p>
<pre><code>&gt; df.isnull().any().any()
True
</code></pre>
<ul>
<li><strong>Option 2</strong>: <code>df.isnull().sum().sum()</code> - This returns an integer of the total number of <code>NaN</code> values:</li>
</ul>
<p>This operates the same way as the <code>.any().any()</code> does, by first giving a summation of the number of <code>NaN</code> values in a column, then the summation of those values:</p>
<pre><code>df.isnull().sum()
0    0
1    2
2    0
3    1
4    0
5    2
dtype: int64
</code></pre>
<p>Finally, to get the total number of NaN values in the DataFrame:</p>
<pre><code>df.isnull().sum().sum()
5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To find out which rows have NaNs in a specific column:</p>
<pre><code>nan_rows = df[df['name column'].isnull()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you need to know how many rows there are with "one or more <code>NaN</code>s":</p>
<pre><code>df.isnull().T.any().T.sum()
</code></pre>
<p>Or if you need to pull out these rows and examine them:</p>
<pre><code>nan_rows = df[df.isnull().T.any().T]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>df.isnull().any().any()</code> should do it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding to Hobs brilliant answer, I am very new to Python and Pandas so please point out if I am wrong.</p>
<p>To find out which rows have NaNs:</p>
<pre><code>nan_rows = df[df.isnull().any(1)]
</code></pre>
<p>would perform the same operation without the need for transposing by specifying the axis of any() as 1 to check if 'True' is present in rows. </p>
</div>
<div class="post-text" itemprop="text">
<p>Since none have mentioned, there is just another variable called <code>hasnans</code>. </p>
<p><code>df[i].hasnans</code> will output to <code>True</code> if one or more of the values in the pandas Series is NaN, <code>False</code> if not. Note that its not a function.</p>
<p>pandas version '0.19.2' and '0.20.2'</p>
</div>
<div class="post-text" itemprop="text">
<p>Since <code>pandas</code> has to find this out for <code>DataFrame.dropna()</code>, I took a look to see how they implement it and discovered that they made use of <code>DataFrame.count()</code>, which counts all non-null values in the <code>DataFrame</code>. Cf. <a href="https://github.com/pydata/pandas/blob/master/pandas/core/frame.py#L3013" rel="noreferrer">pandas source code</a>. I haven't benchmarked this technique, but I figure the authors of the library are likely to have made a wise choice for how to do it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just using
<a href="https://docs.python.org/3/library/math.html#math.isnan" rel="nofollow noreferrer">math.isnan(x)</a>, Return True if x is a NaN (not a number), and False otherwise.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is another interesting way of finding null and replacing with a calculated value</p>
<pre><code>    #Creating the DataFrame

    testdf = pd.DataFrame({'Tenure':[1,2,3,4,5],'Monthly':[10,20,30,40,50],'Yearly':[10,40,np.nan,np.nan,250]})
    &gt;&gt;&gt; testdf2
       Monthly  Tenure  Yearly
    0       10       1    10.0
    1       20       2    40.0
    2       30       3     NaN
    3       40       4     NaN
    4       50       5   250.0

    #Identifying the rows with empty columns
    nan_rows = testdf2[testdf2['Yearly'].isnull()]
    &gt;&gt;&gt; nan_rows
       Monthly  Tenure  Yearly
    2       30       3     NaN
    3       40       4     NaN

    #Getting the rows# into a list
    &gt;&gt;&gt; index = list(nan_rows.index)
    &gt;&gt;&gt; index
    [2, 3]

    # Replacing null values with calculated value
    &gt;&gt;&gt; for i in index:
        testdf2['Yearly'][i] = testdf2['Monthly'][i] * testdf2['Tenure'][i]
    &gt;&gt;&gt; testdf2
       Monthly  Tenure  Yearly
    0       10       1    10.0
    1       20       2    40.0
    2       30       3    90.0
    3       40       4   160.0
    4       50       5   250.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://pandas.pydata.org/pandas-docs/version/0.23.4/whatsnew.html#logical-reductions-over-entire-dataframe" rel="nofollow noreferrer">Starting from v0.23.2</a>, you can use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.isna.html" rel="nofollow noreferrer"><code>DataFrame.isna</code></a> + <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.any.html" rel="nofollow noreferrer"><code>DataFrame.any(axis=None)</code></a> where <code>axis=None</code> specifies logical reduction over the entire DataFrame.</p>
<p></p>
<pre><code># Setup
df = pd.DataFrame({'A': [1, 2, np.nan], 'B' : [np.nan, 4, 5]})
df
     A    B
0  1.0  NaN
1  2.0  4.0
2  NaN  5.0
</code></pre>
<p></p>
<pre><code>df.isna()

       A      B
0  False   True
1  False  False
2   True  False

df.isna().any(axis=None)
# True
</code></pre>
<hr/>
<p>Another performant option you can use is <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.isnan.html" rel="nofollow noreferrer"><code>numpy.isnan</code></a>:</p>
<pre><code>np.isnan(df.values)

array([[False,  True],
       [False, False],
       [ True, False]])

np.isnan(df.values).any()
# True
</code></pre>
<p>Alternatively, check the sum:</p>
<pre><code>np.isnan(df.values).sum()
# 2

np.isnan(df.values).sum() &gt; 0
# True
</code></pre>
<hr/>
<p>You can also iteratively call <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.hasnans.html#pandas-series-hasnans" rel="nofollow noreferrer"><code>Series.hasnans</code></a>. For example, to check if a single column has NaNs, </p>
<pre><code>df['A'].hasnans
# True
</code></pre>
<p>And to check if <em>any</em> column has NaNs, you can use a comprehension with <code>any</code> (which is a short-circuiting operation).</p>
<pre><code>any(df[c].hasnans for c in df)
# True
</code></pre>
<p>This is actually <em>very</em> fast.</p>
</div>
<div class="post-text" itemprop="text">
<p>Or you can use <code>.info()</code> on the <code>DF</code> such as :</p>
<p><code>df.info(null_counts=True)</code> which returns the number of non_null rows in a columns such as:</p>
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 3276314 entries, 0 to 3276313
Data columns (total 10 columns):
n_matches                          3276314 non-null int64
avg_pic_distance                   3276314 non-null float64
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>df.apply(axis=0, func=lambda x : any(pd.isnull(x)))
</code></pre>
<p>Will check for each column if it contains Nan or not.</p>
</div>
<div class="post-text" itemprop="text">
<p>Depending on the type of data you're dealing with, you could also just get the value counts of each column while performing your EDA by setting dropna to False. </p>
<pre><code>for col in df:
   print df[col].value_counts(dropna=False)
</code></pre>
<p>Works well for categorical variables, not so much when you have many unique values.</p>
</div>
<span class="comment-copy">check out <a href="http://stackoverflow.com/questions/22257527/how-do-i-get-a-summary-of-the-counts-of-missing-data-in-pandas">summary of the counts of missing data in pandas</a></span>
<span class="comment-copy">Recent versions of pandas (v0.23.2) allow users to perform logical reduction over both axes without 2 any calls (<code>any().any()</code>). See <a href="https://stackoverflow.com/a/53862445/4909087">this answer</a> for details.</span>
<span class="comment-copy">Thank you for the time benchmarks. It's surprising that <code>pandas</code> doesn't have a built in function for this. It's true from @JGreenwell's post that <code>df.describe()</code> can do this, but no direct function.</span>
<span class="comment-copy">I just timed <code>df.describe()</code> (without finding <code>NaN</code>s). With a 1000 x 1000 array, a single call takes 1.15 seconds.</span>
<span class="comment-copy">:1, Also, <code>df.isnull().values.sum()</code> is a bit faster than <code>df.isnull().values.flatten().sum()</code></span>
<span class="comment-copy">You didn't try <code>df.isnull().values.any()</code>, for me it is faster than the others.</span>
<span class="comment-copy">Thanks @CK1 -- I've updated the benchmarks</span>
<span class="comment-copy">To find out which rows do not have NaNs in a specific column: <code>non_nan_rows = df[df['name column'].notnull()]</code>.</span>
<span class="comment-copy">AttributeError: 'numpy.float64' object has no attribute 'isnull'</span>
<span class="comment-copy">I think we do not need the 2nd T</span>
<span class="comment-copy">This is slick. Very cool.</span>
<span class="comment-copy">This gets rid of <b>two</b> transposes! Love your concise <code>any(axis=1)</code> simplification.</span>
<span class="comment-copy">This answer is incorrect. Pandas Series have this attribute but DataFrames do not. If <code>df = DataFrame([1,None], columns=['foo'])</code>, then <code>df.hasnans</code> will throw an <code>AttributeError</code>, but <code>df.foo.hasnans</code> will return <code>True</code>.</span>
<span class="comment-copy">I don't think <code>math.isnan(x)</code> is going to work when <code>x</code> is a DataFrame. You get a TypeError instead.</span>
