<div class="post-text" itemprop="text">
<p>I want to be able to change the CSV data as we can do in javascript for JSON. Just code and object manipulation, like -</p>
<pre><code>var obj = JSON.parse(jsonStr);
obj.name = 'foo bar';
var modifiedJSON = JSON.stringify(obj)
</code></pre>
<p>how can I do like this but for CSV files and in python ?
Something like -</p>
<pre><code>csvObject = parseCSV(csvStr)
csvObject.age = 10
csvObject.name = csvObject.firstName + csvObject.lastName

csvStr = toCSV(csvObject)
</code></pre>
<p>I have a csv file customers.csv</p>
<p>ID,Name,Item,Date these are the columns. eg of the csv file -</p>
<pre><code>ID,LastName,FirstName,Item,Date
11231249015,Derik,Smith,Televisionx1,1391212800000
24156246254,Doe,John,FooBar,1438732800000
</code></pre>
<p>I know very well that the python csv library can handle it but can it be treated as an object as whole and then manipulate ?</p>
<p>I basically want to combine the firstname and lastname, and perform some math with the IDs, but in the way javascript handles JSON</p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure but maybe you want to use <a href="https://github.com/samarjeet27/CSV-Mapper" rel="nofollow">https://github.com/samarjeet27/CSV-Mapper</a></p>
<p>Install using <code>pip install csvmapper</code></p>
<pre><code>import csvmapper

# create parser instance
parser = csvmapper.CSVParser('customers.csv', hasHeader=True)
# create object
customers = parser.buildDict() # buildObject() if you want object

# perform manipulation
for customer in customers:
    customer['Name'] = customer['FirstName'] + ' ' + customer['LastName']
    # remove last name and firstname
    # maybe this was what you wanted ?
    customer.pop('LastName', None)
    customer.pop('FirstName', None)

print customers
</code></pre>
<h2>Output</h2>
<pre><code>[{'Name': 'Smith Derik', 'Item': 'Televisionx1', 'Date': '1391212800000', 'ID': '11231249015'}, {'Name': 'John Doe', 'Item': 'FooBar', 'Date': '1438732800000', 'ID': '24156246254'}]
</code></pre>
<p>This combines the firstName and lastName by <strong>accessing</strong> it as a dict, as maybe you want to remove the last name and firstname I think, replacing it with just a 'name' property. You can use <code>parser.buildObject()</code> if you want to access it <em>as in javascript</em></p>
<h3>Edit</h3>
<p>You can save it back to CSV too.</p>
<pre><code>writer = csvmapper.CSVWriter(customers) # modified customers from the above code
writer.write('customers-final.csv')
</code></pre>
<p>And regarding being able to perform math, you could use a custom mapper file like </p>
<pre><code>mapper = csvmapper.DictMapper(x = [
    [
        { 'name':'ID' ,'type':'long'},
        { 'name':'LastName' },
        { 'name':'FirstName' },
        { 'name':'Item' },
        { 'name':'Date', 'type':'int' }
    ]
]

parser = csvmapper.CSVParser('customers.csv', mapper)
</code></pre>
<p>And specify the type(s)</p>
</div>
<div class="post-text" itemprop="text">
<p>JSON can, by design, <a href="http://json.org" rel="nofollow">represent various kinds of data in various kinds of arrangements</a> (objects, arrays...) and you can nest these if you wish. This means that its relatively easy to serialise and deserialise complex objects.</p>
<p>On the other-hand, CSV is just rows and columns of data. No structured objects, arrays, nesting, etc. So you basically have to know ahead of time what you're dealing with, and then manually map these to corresponding objects.</p>
<p>That said, Python's CSV module does have <a href="https://docs.python.org/3.4/library/csv.html#" rel="nofollow">dict reader</a> functionality, which will let you open a CSV file as a python dictionary consisting of the CSV's rows. It automatically maps the first / header row to field-names, but you can also pass-in the field-names to the constructor. You can therefore reference a property from a row by using the corresponding column header / fieldname.  It also has a corresponding dict writer class. If you don't need any fancy nesting or complex data structures, then these may be all you really need?</p>
<p>This example is directly from the python module documentation:</p>
<pre><code>import csv
with open('names.csv') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        print(row['first_name'], row['last_name'])
</code></pre>
</div>
<span class="comment-copy">You are aware that Python has <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">a module that parses json strings and data files</a> as well? Your javascript would have to be modified only marginally to get the same effect. 3 lines of code.</span>
<span class="comment-copy">I want to do it for csv files, not for JSON that's just a example of how I would like to be able to do it</span>
<span class="comment-copy">Maybe it's just me, but I need to see a string and the desired output before I can begin to design a solution. I am able to interpret several questions out of your post, and I don't know which of those you are trying to ask. <b>Translation</b>: please edit your post to include sample inputs and the expected output</span>
<span class="comment-copy">What would this mean in a CVS file:  <code>csvObject.age</code>? CVS is quite different format then JSON. Examples, please!</span>
<span class="comment-copy"><i>Hello, I would like to know how I can fly a plane the same way I can drive a car?</i> well.. well.. first stop taking drugs, and then there's a very neat library called <a href="https://docs.python.org/3.5/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> that does just that in python: handle csv files. <code>import csv</code>, try it out, RTFM and come back with a real question! ;-)</span>
<span class="comment-copy">That works great ! but, how do I make it back to CSV ?</span>
