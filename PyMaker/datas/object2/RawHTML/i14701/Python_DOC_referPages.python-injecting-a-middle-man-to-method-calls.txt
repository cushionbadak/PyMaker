<div class="post-text" itemprop="text">
<p>I would like to listen in on some calls to 3rd party library methods. Notably, I'd like to attach some sort of feedback method on these methods I am listening to. For instance, whenever logging.info(msg, *args, **kwargs) is called, I'd like to have a separate method with same parameter list fired off as well.</p>
<p>The closest I can find is the <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow">mock module</a>'s side_effect feature. But correct me if I am wrong, this feature will completely override the original behaviour of the function instead of tagging a function along.</p>
<p>Is there a module out there that can suit my needs or do I have to unceremonously hijack the functions I need?</p>
<p>Edit: Clarified title. </p>
</div>
<div class="post-text" itemprop="text">
<p>Hijacking isn't too hard, using decorator style methods:</p>
<pre><code>def hijack(obj, func_name):
    orig_func = getattr(obj, func_name)
    def wrapped_func(*args, **kwargs):
        print(orig_func, args, **kwargs)
        return orig_func(*args, **kwargs)
    setattr(obj, func_name, wrapped_func)
</code></pre>
<p>With this, you can patch a class like (this would work for modules, etc. as well):</p>
<pre><code>class A:
    def f(self):
        pass
</code></pre>
<p>You can hijack the <code>A.f</code> method like:</p>
<pre><code>hijack(A, "f")
</code></pre>
<p>Resulting in this:</p>
<pre><code>a = A()
a.f()
</code></pre>
<p>Producing:</p>
<pre><code>&lt;function A.f at 0x7fc56b034620&gt; (&lt;__main__.A object at 0x7fc56b01df28&gt;,)
</code></pre>
<p>For <code>logging</code>:</p>
<pre><code>import logging
hijack(logging, "warning")

logging.warning("hi")
</code></pre>
<p>Produces:</p>
<pre><code>&lt;function warning at 0x7f83355c8a60&gt; ('hi',)
WARNING:root:hi
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe “unceremonously”, but I think it does what you want…</p>
<pre><code>def hook(*args, **kwargs):
  # do stuff with args and kwargs
  hook.original(*args, **kwargs)
hook.original = logging.info
logging.info = hook
</code></pre>
<p>Unless you also want to listen to calls made by 3rd party libraries too, unfortunately.</p>
</div>
<span class="comment-copy">I don't know of any python package doing such a thing, but you could be able to roll your own using monkeypatching and a couple decorators...</span>
<span class="comment-copy">I would advice to wrap it if at all possible. Mock will be able to do the job one way or another but it will be tricky to understand and get a clean implementation</span>
