<div class="post-text" itemprop="text">
<p>I have a list called records that contains a mw value in records[1]. I then test these mw values with four <code>if</code> statements, and I change the output result based on the value of mw as seen below.</p>
<pre><code>mw = records[1]
if mw &lt;= 100:
  output1 =(records[1],"valueA", records[4], "moreItems")
if 100&lt; mw &lt;= 300:
  output2 =("records[1]","valueB", records[4], "moreItems")
if 300&lt; mw &lt;= 600:
 output3 =("records[1]","valueC", records[4], "moreItems")
if mw &gt; 600:
  output4 =("records[1]","valueD", records[4] , "moreItems")
</code></pre>
<p>The main idea behind the <code>if</code> statements is that I need to change some list values based on the mw value. This means that the output1 variable will be slightly different from output2.</p>
<p>How can I combine these four outputs? Ideally, I would want all the results for output 1 first then 2 then 3 and so as seen below.</p>
<pre><code>98.7,valueA,False,moreItems  #from output1
50,valueA,False,moreItems    #from output1
210,valueB,True,moreItems    #From output2
400,valueC,True,moreItems    #From output3
498,valueC,True,moreItems    #From output3
580,valueC,True,moreItems    #From output3
800,valueD,False,moreItems   #From output4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't see how you're getting all that output with only 4 variables.  Or to put it another way, using lots of numbered "sibling" variables will just give you headaches --- you need a function that you can call over and over.  Something like:</p>
<pre><code>def process_record(record):
    mw = record[1]
    if mw &lt;= 100:
        output = (record[1], "valueA", record[4], "moreItems")
    elif 100 &lt; mw &lt;= 300:
        output = (record[1], "valueB", record[4], "moreItems")
    elif 300 &lt; mw &lt;= 600:
        output = (record[1], "valueC", record[4], "moreItems")
    elif 600 &lt; mw:
        output = (record[1], "valueD", record[4], "moreItems")
    else:
        raise ValueError("Illegal record: %s" % repr(record))
    return output
</code></pre>
<p>This returns the same tuples you were assigning to <code>output1</code>, <code>output2</code>, and so on, but can be used as many times as you like.  (Note that since it operates on only one record at a time, I changed its name and its parameter to the singular "record".  And I changed the separate <code>if</code> statements to a series <code>elif</code> statements with a default case.)</p>
<p>Your output tuples start with a number... and in Python tuples automatically sort by their first element, then their second, etc.  So you can just <strong>use the built-in <a href="http://docs.python.org/3/library/functions.html#sorted" rel="nofollow"><code>sorted</code></a> function</strong> to produce the output you want:</p>
<pre><code>def main():
    records = [
      # You know how you're acquiring these records; I don't.
      ]
    processed_records = [process_record(record) for record in records]
    for record in sorted(processed_records):
        print(",".join(str(dat) for dat in record))
    return
</code></pre>
<p>If, in your real code, you don't have the numbers fortuitously located at the beginning of the tuple, or if your value category strings (<code>"valueA"</code> and so on) don't happen to sort alphabetically into the same order the numbers do, you can still use <code>sorted</code>, but you'll have to provide it a key function to produce the sorting you want.</p>
<p>A <strong>key function</strong> gets applied automatically to each element of the list to be sorted, converting it into something easier to sort, often something simple like an integer or string.  You could just return the <code>"valueA"</code>-or-whatever string, if you didn't care about the numerical order.  My example below sorts on that string, then the number, then everything else, since I can't tell if those other fields are significant or not.</p>
<pre><code>def processed_record_key(record):
    int_val, value_category, unknown_boolean, unknown_string = record
    return value_category, int_val, unknown_boolean, unknown_string
</code></pre>
<p>Now, you just have to use it:</p>
<pre><code>    for record in sorted(processed_records, key=processed_record_key):
        # Same as before...
</code></pre>
<p>Check the <a href="https://wiki.python.org/moin/HowTo/Sorting/" rel="nofollow">Sorted HowTo</a> for more sorting tricks.</p>
<p>Finally, I suggest you consider using a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow">namedtuple</a> for your data records --- it would make your tuples (and the code that uses them) much more self-descriptive and easier to work with.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you want the outputs in order, I don't think it'll be easy to do this in one loop -- it's probably best to have four separate loops. This might be a nice place for <a href="http://www.pythonforbeginners.com/lists/list-comprehensions-in-python/" rel="nofollow">list comprehensions</a>. We can generate four lists, one for each of the output formats, then glue them together and return the composite list. Assuming that you have a list of records that you're reading from:</p>
<pre><code>#records_list is a list of records defined somewhere above

output1_list = [(records[1],"valueA", records[4], "moreItems") for records in records_list if records[1] &lt;= 100]
output2_list = [(records[1],"valueB", records[4], "moreItems") for records in records_list if 100 &lt; records[1] &lt;= 300]
output3_list = [(records[1],"valueC", records[4], "moreItems") for records in records_list if 300 &lt; records[1] &lt;= 600]
output4_list = [(records[1],"valueD", records[4], "moreItems") for records in records_list if 600 &lt; records[1]]

final_output = output1_list + output2_list + output3_list + output4_list

# Later on, print all the results
for output in final_output:
    print output
</code></pre>
</div>
<span class="comment-copy">Some comments on your code snippet: It looks like <code>record</code> on line 1 should be <code>records</code>, you're missing an <code>if</code> on line 2, and I think the string literals <code>"records[4]"</code> should be variable references like <code>records[4]</code></span>
<span class="comment-copy">Thanks!  I made the changes.</span>
<span class="comment-copy">Indeed! Another question: is this function supposed to print out the results as it finds them or return a list of the results?</span>
<span class="comment-copy">@Dan  I would like a list if possible bu not a must.</span>
<span class="comment-copy">You are implementing this inside any loop?</span>
