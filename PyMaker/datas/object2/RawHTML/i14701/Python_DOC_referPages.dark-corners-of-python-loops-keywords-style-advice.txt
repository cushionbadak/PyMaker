<div class="post-text" itemprop="text">
<p>Learning python, found this code snippet. It reads text from stdin and prints "Done" when it finishes. I've never seen an <code>else</code> for a <code>while</code> loop anywhere else in any other language. The comments on the site where I found this said this was a pythonic way to do similar to a <code>finally</code> but for a while loop.  </p>
<pre><code>import sys
while True:
    line = sys.stdin.readline()
    if not line:
        break
else:
    print("Done");
</code></pre>
<p>The question is, is this pythonic? The place I work has a pretty strict pep-8 compliance policy, so I need to know if this is okay.</p>
</div>
<div class="post-text" itemprop="text">
<p>The basic idea of using <code>while</code>/<code>else</code> is certainly Pythonic—it wouldn't be in the language otherwise.</p>
<p>However, there are two bugs in your code that each mean that your <code>else</code> code never runs. It's probably not Pythonic to include code that never executes and is only there to mislead the reader. :) More importantly, it's probably not what you wanted.</p>
<hr/>
<p>First, there's no way for you to ever exit the loop (except by exception). <code>readline</code> returns an empty string at EOF, so that's probably what you want to check for:</p>
<pre><code>while True:
    line = sys.stdin.readline()
    if line:
        print(line)
    else:
        break
else:
    print("Done")
</code></pre>
<p>But next, I'm not sure <code>while</code>/<code>else</code> does what you think it does. I think you're expecting it to run the <code>else</code> however you exit the loop. But as <a href="https://docs.python.org/3/reference/compound_stmts.html#the-while-statement" rel="nofollow">the docs</a> explain:</p>
<blockquote>
<p>A <code>break</code> statement executed in the first suite terminates the loop without executing the <code>else</code> clause’s suite.</p>
</blockquote>
<p>In other words, the <code>else</code> part only runs if you exit <em>normally</em>, by the condition becoming false. Obviously <code>while True</code> never becomes false.</p>
<p>And that's the whole point: sometimes you need to distinguish between the loop finishing normally vs. exiting with an <code>if something: break</code>; that's when you use <code>else:</code>. If you want to do the same thing either way, just do it:</p>
<pre><code>while True:
    line = sys.stdin.readline()
    if line:
        print(line)
    else:
        break
print("Done")
</code></pre>
<hr/>
<p>If you wanted something "similar to a <code>finally</code>" because you may have exceptions, the answer is simple: use a <code>finally</code>:</p>
<pre><code>try:
    while True:
        line = sys.stdin.readline()
        if line:
            print(line)
        else:
            break
finally:
    print("Done")
</code></pre>
<hr/>
<p>As a side note, looping over <code>readline</code> with a <code>while</code> and <code>break</code> is almost never necessary; a file-like object like <code>sys.stdin</code> is an iterable of lines, the same lines that <code>readline</code> will return, so you can just do:</p>
<pre><code>for line in sys.stdin:
    print(line)
print("Done")
</code></pre>
<hr/>
<p>As a side note, it's generally <em>not</em> considered Pythonic to use unnecessary parentheses and semicolons in your code—especially when it makes your code look misleadingly like C or Java or something. While <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP 8</a> is only meant as a standard for the Python stdlib, many people use it as a guide for their own Python software, and it's a good idea to follow its recommendations unless you have a good reason not to. You can use tools like <a href="https://pypi.python.org/pypi/pep8" rel="nofollow"><code>pep8</code></a> to check whether you're following the guidelines. This only catches the simple stuff, like your <code>while(True):</code> instead of <code>while True</code> and <code>print("Done");</code> instead of <code>print("Done")</code>, but violating that simple stuff distracts readers from noticing the possible higher-level violations that you're asking about.</p>
</div>
<div class="post-text" itemprop="text">
<p>Indeed, this is a pythonic way to accomplish the goal of your code snippet.  It is known as the else-for-last-iteration-of-loop (EFLIOL) idiom.</p>
</div>
<span class="comment-copy">I don't think while-else works that way. See <a href="http://stackoverflow.com/questions/3295938/else-clause-on-python-while-statement" title="else clause on python while statement">stackoverflow.com/questions/3295938/…</a></span>
<span class="comment-copy">Well, using unnecessary parens like <code>while(True)</code> isn't Pythonic. If you really want to know about using Pythonic style, you may want to consider running a checker like <a href="https://pypi.python.org/pypi/pep8" rel="nofollow noreferrer"><code>pep8</code></a> to catch all the simple stuff like that, so people can look for the higher-level issues without being distracted.</span>
<span class="comment-copy">Another side note: You almost never need/want to loop over <code>readline</code>; just use the file as an iterator. That gives you exactly the behavior you're trying to get with the <code>while</code> loop, but without the confusion, and with one line instead of 4-5 lines.</span>
<span class="comment-copy">Yep—and the <code>while</code> and <code>for</code> statements wouldn't <i>have</i> an <code>else</code> if it were never Pythonic to use them, would they? :)</span>
<span class="comment-copy">Google returns zero results for "else-for-last-iteration-of-loop". Got a citation? (or is this a joke going over my head?)</span>
<span class="comment-copy">The problem with this answer, is that the loop in the OP's question is infinite, and contains no <code>break</code> statement.  So <code>else</code> will <b>never</b> be reached.  Although in general, I agree (for the reasons listed in the link in Kevin's comment).</span>
