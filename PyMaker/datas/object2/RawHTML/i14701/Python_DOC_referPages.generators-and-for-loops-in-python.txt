<div class="post-text" itemprop="text">
<p>So I have a generator function, that looks like this.</p>
<pre><code>def generator():
    while True:
        for x in range(3):
            for j in range(5):
                yield x
</code></pre>
<p>After I load up this function and call "next" a bunch of times, I'd expect it to yield values</p>
<p><code>0 0 0 0 0 1 1 1 1 1 2 2 2 2 2 0 0 0 0 0 ...</code></p>
<p>But instead it just yields 0 all the time.  Why is that?</p>
<pre><code>&gt;&gt;&gt; execfile("test.py")
&gt;&gt;&gt; generator
&lt;function generator at 0x10b6121b8&gt;
&gt;&gt;&gt; generator().next()
0
&gt;&gt;&gt; generator().next()
0
&gt;&gt;&gt; generator().next()
0
&gt;&gt;&gt; generator().next()
0
&gt;&gt;&gt; generator().next()
0
&gt;&gt;&gt; generator().next()
0
&gt;&gt;&gt; generator().next()
0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>generator()</code> initializes new generator object:</p>
<pre><code>In [4]: generator() is generator() # Creating 2 separate objects
Out[4]: False
</code></pre>
<p>Then <code>generator().next()</code> gets the first value from the newly created generator object (<em>0</em> in your case).</p>
<p>You should call <code>generator</code> once:</p>
<pre><code>In [5]: gen = generator() # Storing new generator object, will reuse it

In [6]: [gen.next() for _ in range(6)] # Get first 6 values for demonstration purposes
Out[6]: [0, 0, 0, 0, 0, 1]
</code></pre>
<p><em>Note</em>: <a href="https://docs.python.org/2/reference/expressions.html#generator.next" rel="nofollow noreferrer"><code>generator.next</code></a> was removed from Python 3 (<a href="https://www.python.org/dev/peps/pep-3114/" rel="nofollow noreferrer">PEP 3114</a>) - use the <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next</code> function</a> instead:</p>
<pre><code>In [7]: next(gen)
Out[7]: 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With each call of <code>generator</code> you are creating a new generator object:</p>
<pre><code>generator().next() # 1st item in 1st generator 
generator().next() # 1st item in 2nd generator
</code></pre>
<p>Create one generator, and then call the <code>next</code> for subsequent items:</p>
<pre><code>g = generator()

g.next() # 1st item in 1st generator
g.next() # 2nd item in 1st generator
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I posted it in the comment, I think if you look at this in parallel with the question you see the mistake:</p>
<pre><code>with open('my_file.txt', 'r') as f: 
    print(f.readline())               # `readline` simply reads a single line

with open('my_file.txt', 'r') as f: 
    print(f.readline())

with open('my_file.txt', 'r') as f: 
    print(f.readline())

with open('my_file.txt', 'r') as f: 
    print(f.readline())    
</code></pre>
<p>Instead of making a new generator object each time, you have to make it once and then use it until it has been depleted:</p>
<pre><code>mygen = generator()
mygen.next()
mygen.next()
...
etc
</code></pre>
</div>
<span class="comment-copy">I fail to see why this is so special. If you'd reinstantiate some class, no one would be surprised when some kind of initial value does not get updated! E.g. loading in a file 10 times and doing <code>next()</code> and <code>print</code> would certainly not be so spectacular to need 14 upvotes and 2 favorites...</span>
<span class="comment-copy">Short answer, each <code>generator()</code> call returns a new generator object which starts at its beginning. Try <code>gen = generator()</code>, then <code>gen.next()</code>, <code>gen.next()</code>, etc.</span>
<span class="comment-copy">.. but <code>generator.__next__</code> was added. Still, you should use the <code>next()</code> function anyway.</span>
<span class="comment-copy">A new generator <b>object</b>, surely?</span>
<span class="comment-copy">@immibis Sorry, terminology corrected.</span>
