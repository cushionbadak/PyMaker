<div class="post-text" itemprop="text">
<p>I have a project structured as such:</p>
<pre><code>folder1
       |
       folder2
             |
             tests
</code></pre>
<p>I have __init__.py in each folder. When I am in the parent directory of folder1, I run iPython and do</p>
<pre><code>from folder1.folder2.tests.test1 import main
main()
</code></pre>
<p>everything works fine. However when I run </p>
<pre><code>python folder1/folder2/tests/test1.py
</code></pre>
<p>I get ImportError: No module named folder1.folder2.file1, where my import statement in test1 is </p>
<pre><code>from folder1.folder2.file1 import class1
</code></pre>
<p>Confused about this - I am guessing it is a path issue but I don't understand what is wrong with my code (many similar setups in other folders) and why it still works in iPython and not python run as a script.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/2/tutorial/modules.html#the-module-search-path" rel="noreferrer">module search path</a> (<a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path" rel="noreferrer">python 3 docu</a>) is different with and without a script file:</p>
<h1>interactive python interpreter</h1>
<p>(goes for both <code>python</code> and <code>ipython</code>)</p>
<pre><code>$ python
Python 2.7.3 (default, Dec 18 2014, 19:10:20) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; print(sys.path)
['', '/usr/lib/python2.7', '/usr/lib/python2.7/plat-linux2', '/usr/lib/python2.7/lib-tk', '/usr/lib/python2.7/lib-old', '/usr/lib/python2.7/lib-dynload', '/usr/local/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages/PIL', '/usr/lib/pymodules/python2.7/gtk-2.0', '/usr/lib/python2.7/dist-packages/gst-0.10', '/usr/lib/python2.7/dist-packages/gtk-2.0', '/usr/lib/pymodules/python2.7', '/usr/lib/python2.7/dist-packages/ubuntu-sso-client', '/usr/lib/python2.7/dist-packages/ubuntuone-client', '/usr/lib/python2.7/dist-packages/ubuntuone-control-panel', '/usr/lib/python2.7/dist-packages/ubuntuone-couch', '/usr/lib/python2.7/dist-packages/ubuntuone-installer', '/usr/lib/python2.7/dist-packages/ubuntuone-storage-protocol']
&gt;&gt;&gt;
</code></pre>
<p>Note the first entry being an empty string. An empty string is a relative path equivalent to <code>.</code>. Relative paths in the module search path are relative to the current working dir of the interpreter process, so this is just the current working dir where you invoked the interpreter. (Which in your case happened to be the root of your project.)</p>
<h1>executing a script file</h1>
<pre class="lang-sh prettyprint-override"><code>$ echo 'import sys' &gt; /tmp/pathtest.py
$ echo 'print(sys.path)' &gt;&gt; /tmp/pathtest.py 
$ python /tmp/pathtest.py 
['/tmp', '/usr/lib/python2.7', '/usr/lib/python2.7/plat-linux2', '/usr/lib/python2.7/lib-tk', '/usr/lib/python2.7/lib-old', '/usr/lib/python2.7/lib-dynload', '/usr/local/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages/PIL', '/usr/lib/pymodules/python2.7/gtk-2.0', '/usr/lib/python2.7/dist-packages/gst-0.10', '/usr/lib/python2.7/dist-packages/gtk-2.0', '/usr/lib/pymodules/python2.7', '/usr/lib/python2.7/dist-packages/ubuntu-sso-client', '/usr/lib/python2.7/dist-packages/ubuntuone-client', '/usr/lib/python2.7/dist-packages/ubuntuone-control-panel', '/usr/lib/python2.7/dist-packages/ubuntuone-couch', '/usr/lib/python2.7/dist-packages/ubuntuone-installer', '/usr/lib/python2.7/dist-packages/ubuntuone-storage-protocol']
</code></pre>
<p>Note that here, the first entry is the absolute path of the directory containing the script file we passed as an argument.</p>
</div>
<div class="post-text" itemprop="text">
<p>I faced a similar issue while importing numpy or any library depending on numpy. The problem was that I had a file name random.py in my project folder.</p>
<p>Numpy has random.py in it for its random functions, but importing it was taking the random.py of my project folder.</p>
<p>The best solution is to not to name any file with the standard module names of any library.</p>
<p>Enjoy.. :)</p>
</div>
<span class="comment-copy">so basically add <code>import sys; sys.path = [''] + sys.path</code> to your script</span>
<span class="comment-copy">also, don't be tempted to use <code>sys.path.extend([''])</code> (as I did), since the order does make a difference.</span>
<span class="comment-copy">oh my God... Thanks you a lot! I used name "redmine" and tried to import redmine module...</span>
