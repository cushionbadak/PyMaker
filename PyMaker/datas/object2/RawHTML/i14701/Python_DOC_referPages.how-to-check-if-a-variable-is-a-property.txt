<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/17735520/determine-if-given-class-attribute-is-a-property-or-not-python-object">Determine if given class attribute is a property or not, Python object</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>Suppose there is a class with a <code>@property</code> defined:</p>
<pre><code>class MyClass:
   ...
   @property
   def this_is_a_property(self):
       return self.some_thing
   ...
   def this_is_a_function(self, x):
       ...
       return other_thing
</code></pre>
<p>Normally, to check whether an attribute is a function, I can use <code>isfunction</code> from the <code>inspect</code> module.</p>
<pre><code> import inspect
 if inspect.isfunction(MyClass.__dict__['this_is_a_function']):
    print('this_is_a_function',' is a function')
</code></pre>
<p>How can I check a <code>property</code>? There appears to be no <code>inspect.isproperty</code> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply check the type against the <code>property</code> object:</p>
<pre><code>if isinstance(MyClass.this_is_a_property, property):
</code></pre>
<p>You don't really have to retrieve it from the class dictionary here; looking up a property on the class as an attribute also returns the <code>property</code> instance.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/inspect.html#inspect.isdatadescriptor" rel="nofollow"><code>inspect.isdatadescriptor</code></a>:</p>
<blockquote>
<p>Return true if the object is a data descriptor. ... Examples are
  properties (defined in Python), getsets, and members.</p>
<p>...</p>
<p><strong>CPython implementation detail:</strong> getsets are attributes defined in extension modules via PyGetSetDef structures.</p>
<p>...</p>
<p><strong>CPython implementation detail:</strong> Member descriptors are attributes defined in extension modules via PyMemberDef structures</p>
</blockquote>
<p>Data descriptors are just types that have certain methods. See <a href="https://docs.python.org/3/reference/datamodel.html#implementing-descriptors" rel="nofollow">3.3.2.1. Implementing Descriptors</a>:</p>
<blockquote>
<p>If the descriptor defines <code>__set__()</code> and/or <code>__delete__()</code>, it is a data
  descriptor; if it defines neither, it is a non-data descriptor.</p>
</blockquote>
<p>Non-data descriptors include <a href="https://docs.python.org/3/library/functions.html#classmethod" rel="nofollow"><code>classmethod</code></a> and <a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="nofollow"><code>staticmethod</code></a> (that is, they're not functions, they're <em>types</em>). For example, <code>inspect.isdatadescriptor(MyClass.this_is_a_classmethod)</code> would return <code>False</code>.</p>
<p>On the other hand, <code>property</code> <em>is</em> a data descriptor:</p>
<pre><code>In [6]: inspect.isdatadescriptor(MyClass.this_is_a_property)
Out[6]: True
</code></pre>
<p>The downside of using this function is that it may return <code>True</code> if <code>isinstance(mystery, property)</code> is <code>False</code>.</p>
<p>A better way is to check for object type directly:</p>
<pre><code>In [7]: isinstance(MyClass.this_is_a_property, property)
Out[7]: True
</code></pre>
</div>
<span class="comment-copy">yes, though this is not a certain way to test this; the actual instance could be <i>another</i> descriptor that just returns a <code>property</code> when looked up on a class ;) (far-fetched yes)</span>
<span class="comment-copy"><code>property</code> is a <i>type</i> of data descriptor; any object with both <code>__get__</code>  and <code>__set__</code> methods would qualify; this includes attributes defined with <code>__slots__</code>.</span>
<span class="comment-copy">@MartijnPieters thanks, I updated my answer.</span>
