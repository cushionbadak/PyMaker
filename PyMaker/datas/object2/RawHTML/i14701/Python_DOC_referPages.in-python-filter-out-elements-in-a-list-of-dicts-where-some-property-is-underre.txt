<div class="post-text" itemprop="text">
<p>I have a list of dictionaries</p>
<pre><code>[   {'x': 1, 'cat': 1},
    {'x': 1, 'cat': 1},
    {'x': 1, 'cat': 2},
    {'x': 1, 'cat': 1},
    {'x': 1, 'cat': 2},
    {'x': 1, 'cat': 1},
    {'x': 1, 'cat': 2},
    {'x': 1, 'cat': 3}]
</code></pre>
<p>I need to filter out elements who's 'cat' value is present too few times
if I set the minimum number of instances to two, in the list above, the instance containing 'cat': 3 should be filtered out because 'cat':3 is present only once in the list, there are enough instances of 'cat': 1 and 'cat': 2</p>
<p>the output should be</p>
<pre><code>[   {'x': 1, 'cat': 1},
    {'x': 1, 'cat': 1},
    {'x': 1, 'cat': 2},
    {'x': 1, 'cat': 1},
    {'x': 1, 'cat': 2},
    {'x': 1, 'cat': 1},
    {'x': 1, 'cat': 2}]
</code></pre>
<p>I don't care about the order, I need to keep original dictionaries</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow">collections.Counter</a> to check the frequency of categories and build a set from the ones that are frequent enough:</p>
<pre><code>import collections
source = [{'x': 1, 'cat': 1},
          {'x': 1, 'cat': 1},
          {'x': 1, 'cat': 2},
          {'x': 1, 'cat': 1},
          {'x': 1, 'cat': 2},
          {'x': 1, 'cat': 1},
          {'x': 1, 'cat': 2},
          {'x': 1, 'cat': 3}]
minimum_count = 2

category_counts = collections.Counter(item['cat'] for item in source)
# category_counts == {1: 4, 2: 3, 3: 1}

frequent_categories = {
    category for category, count in category_counts.items()
    if count &gt; minimum_count
}
# frequent_categories == {1, 2}

result = [item for item in source if item['cat'] in frequent_categories]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can try this code:</p>
<pre><code>l = [ 

{'x': 1, 'cat': 1},

{'x': 1, 'cat': 1},

{'x': 1, 'cat': 2},

{'x': 1, 'cat': 1},

{'x': 1, 'cat': 2},

{'x': 1, 'cat': 1},

{'x': 1, 'cat': 2},

{'x': 1, 'cat': 3}

]

from collections import Counter

def select(l, times):

    counters = Counter(map(lambda x : x['cat'], l)).most_common(times)

    return filter(lambda item: item['cat']  in dict(counters) , l)

print select(l, 2)
</code></pre>
</div>
<span class="comment-copy">what is the criteria for deciding whether a category is underrepresented? If it's present only once? If it's present at most n times? It it's the least represented in the list?</span>
<span class="comment-copy">the category should be present at least n times</span>
<span class="comment-copy">this was my first attempt, wondering if existed some different approach</span>
<span class="comment-copy">@JackNova is there anything in particular you don't like about this solution?</span>
<span class="comment-copy">it's fine, just wondering</span>
<span class="comment-copy">@JackNova no, I mean, there are different approaches, if you can tell me what you don't like in this one, I (or someone) can surely come up with one that fits your needs better.</span>
<span class="comment-copy">@JackNove â€¦or if you're really not interested in other answers anymore, would you mind marking this answer as accepted? Thanks!</span>
