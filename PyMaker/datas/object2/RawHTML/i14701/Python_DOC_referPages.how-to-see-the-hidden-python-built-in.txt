<div class="post-text" itemprop="text">
<p>Some python built-in method (e.g. vars) are "hidden" by some identical local variable names. How to call the "hidden" built-in method?</p>
<p>I was in debug mode using <code>python -m pdb XXX.py</code>, and can't see the hidden built-in method (<code>vars</code>) in the <code>__builtins__</code> dictionary:
<code>
(Pdb) dir(__builtins__)
['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values', 'viewitems', 'viewkeys', 'viewvalues']
</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the special <code>__builtins__</code> module:</p>
<pre><code>&gt;&gt;&gt; __builtins__.vars
&lt;built-in function vars&gt;

&gt;&gt;&gt; __builtins__.vars()
..ouput snipped..
</code></pre>
<p>If you're using the Python debugger (<code>python -m pdb script.py</code>), <code>__builtins__</code> seems to appear as <code>dict</code>, so use:</p>
<pre><code>(Pdb) __builtins__['vars']
&lt;built-in function vars&gt;
</code></pre>
<p>Note that this is a <em>hack</em>, the 2 leading &amp; trailing underscores are Python conventions for <em>"used internally, do not use in a script"</em>. Python gives you access to this anyway, but with this great power comes great responsibility, as it gives you the ability to do both very smart, <em>and</em> very stupid things!</p>
<hr/>
<p>Remember that in Python functions are like any other variables, so another way would be to save the previous <code>vars</code> function:</p>
<pre><code># No parens! We don't want to call the function, just assign it
&gt;&gt;&gt; builtin_vars = vars
&gt;&gt;&gt; vars = 'a string'
&gt;&gt;&gt; builtin_vars
&lt;built-in function vars&gt;
&gt;&gt;&gt; vars
'a string'
</code></pre>
<hr/>
<p>However, by far the best solution is to not overwrite these variables ;-) Most editors should highlight these, so you can easily recognize the most commonly overwritten ones (<code>vars</code>, <code>str</code>, <code>list</code>). Experience tells me that sooner or later you <strong>will</strong> be confused, and <strong>will</strong> cause hard-to-debug bugs, so just say "NO" ;-)</p>
<p>You can get a complete list of all these built-ins with the <code>dir()</code> function:</p>
<pre><code>&gt;&gt;&gt; dir(__builtins__)
</code></pre>
</div>
<span class="comment-copy">I'd say <a href="https://docs.python.org/3/library/builtins.html" rel="nofollow noreferrer"><code>builtins</code></a> is a better idea because it's <code>useful in modules that provide objects with the same name as a built-in value, but in which the built-in of that name is also needed</code></span>
