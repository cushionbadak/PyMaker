<div class="post-text" itemprop="text">
<pre><code>import module
from x import X

class A:
   def method(): 
       return module.something(arg=X())
</code></pre>
<p>I created the following to unit test: </p>
<pre><code>with patch('filename.module.something') as something_mock:
   with patch('filename.X'): as x_mock:
       a.method()
something_mock.assert_called_once_with(arg=x_mock.return_value)
x_mock.assert_called_once_with()
</code></pre>
<p>Someone mentioned that there is no need to mock <code>filenme.X</code> without an explanation. Is there other way to verify the call to <code>something</code> without mocking <code>filename.X</code>? How would I change the following assertion to verify the call?</p>
<pre><code>something_mock.assert_called_once_with(arg=_____) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If create <code>X</code> is not a issue (i.e. db connection or network access) you can do your test without mock it. </p>
<p>You have follow alternatives:</p>
<ol>
<li>Use <code>mock</code>'s <code>called</code> attribute if you are not interested to check how your method call <code>something_mock</code></li>
<li>Use <a href="https://docs.python.org/3/library/unittest.mock.html#any" rel="nofollow"><code>mock.ANY</code></a> if you would like to check that <code>something_mock</code> has called by <code>arg</code> keyword arg but you are not interested about what is the value</li>
<li>Use <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.call_args" rel="nofollow"><code>call_args</code></a> to extract <code>something_mock</code> call arguments and by <a href="https://docs.python.org/3/library/unittest.mock.html#calls-as-tuples" rel="nofollow"><em>calls as tuple</em></a> extract <code>arg</code> value</li>
</ol>
<p>The first one is</p>
<pre><code>assert something_mock.called
</code></pre>
<p>The second one is</p>
<pre><code>something_mock.assert_called_once_with(arg=mock.ANY)
</code></pre>
<p>Finally the third one is</p>
<pre><code>args, kwargs = something_mock.call_args
assert isinstance(kwarg['arg'], x.X)
</code></pre>
<p>Last option is quite the same to mock <code>X</code> but I wrote it just to show all possibilities.</p>
</div>
<span class="comment-copy">If your code really looks like the example given, what's the point of unit testing it all all? There's nothing happening at this level of the code -- no logical, algorithmic, or data complexity at all. FWIW, with each passing year I find myself mocking less and less, writing fewer unit tests, and writing more (and more interesting) integration or end-to-end tests that exercise larger components of the system.</span>
<span class="comment-copy">@FMc The code is simplified for clarity</span>
<span class="comment-copy">This answer might help: <a href="http://stackoverflow.com/questions/8658043/how-to-mock-an-import">stackoverflow.com/questions/8658043/how-to-mock-an-import</a></span>
<span class="comment-copy">@FMc ... interesting... I did exactly the reverse path :). IMHO integration tests are less useful without good and extensive unit tests: when an integration test fail unit test give to you a very solid base on what you can trust and where you can have some holes in your code/design.</span>
