<div class="post-text" itemprop="text">
<p>I have a word occurrence dictionary, and a synonym dictionary.</p>
<p>Word occurrence dictionary example:</p>
<pre><code>word_count = {'grizzly': 2, 'panda': 4, 'beer': 3, 'ale': 5}
</code></pre>
<p>Synonym dictionary example:</p>
<pre><code>synonyms = {
            'bear': ['grizzly', 'bear', 'panda', 'kodiak'],
            'beer': ['beer', 'ale', 'lager']
           }
</code></pre>
<p>I would like to comibine/rename aggregate the word count dictionary as</p>
<pre><code>new_word_count = {'bear': 6, 'beer': 8}
</code></pre>
<p>I thought I would try this:</p>
<pre><code>new_dict = {}
for word_key, word_value in word_count.items():           # Loop through word count dict
    for syn_key, syn_value in synonyms.items():           # Loop through synonym dict
        if word_key in [x for y in syn_value for x in y]: # Check if word in synonyms
            if syn_key in new_dict:                       # If so:
                new_dict[syn_key] += word_value           #   Increment count
            else:                                         # If not:
                new_dict[syn_key] = word_value            #   Create key
</code></pre>
<p>But this isn't working, new_dict ends up empty.  Also, is there an easier way to do this?  Maybe using dictionary comprehension?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using dict comprehension, <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow"><code>sum</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow"><code>dict.get</code></a>:</p>
<pre><code>In [11]: {w: sum(word_count.get(x, 0) for x in ws) for w, ws in synonyms.items()}
Out[11]: {'bear': 6, 'beer': 8}
</code></pre>
<p>Using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow"><code>dict.get</code></a>:</p>
<pre><code>from collections import Counter
ec = Counter()
for x, vs in synonyms.items():
    for v in vs:
        ec[x] += word_count.get(v, 0)
print(ec) # Counter({'bear': 6, 'beer': 8})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's change your synonym dictionary a little. Instead of mapping from a word to a list of all its synonyms, let's map from a word to its parent synonym (i.e. <code>ale</code> to <code>beer</code>). This should speed up lookups</p>
<pre><code>synonyms = {
            'bear': ['grizzly', 'bear', 'panda', 'kodiak'],
            'beer': ['beer', 'ale', 'lager']
           }
synonyms = {syn:word for word,syns in synonyms.items() for syn in syns}
</code></pre>
<p>Now, let's make your aggregate dictionary:</p>
<pre><code>word_count = {'grizzly': 2, 'panda': 4, 'beer': 3, 'ale': 5}
new_word_count = {}
for word,count in word_count:
    word = synonyms[word]
    if word not in new_word_count:
        new_word_count[word] = 0
    new_word_count[word] += count
</code></pre>
</div>
<span class="comment-copy">Thank you.  This helped me find the bug in my original code.  I went with the prior answer's dictionary comprehension for the brevity.</span>
