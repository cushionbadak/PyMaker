<div class="post-text" itemprop="text">
<p>I need to prepare a logging config file in json which rotate it by time, size and compress de file rotated for all modules in my app (I'm stuck now). I want to do it using a sigle json config file, this is my current file, however this configuration only rotate by time:</p>
<pre><code>{
    "version": 1,
    "disable_existing_loggers": false,
    "formatters": {
        "simple": {
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S"
        }
    },

    "handlers": {
        "my_rotate": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "formatter": "simple",
            "when": "D",
            "interval": 1,
            "backupCount": 5,
            "filename": "/var/log/test.log",
            "encoding": "utf8"
        }
    },

    "loggers": {
        "my_module": {
            "level": "DEBUG",
            "handlers": ["my_rotate"]
        }
    },

    "root": {
        "level": "DEBUG",
        "handlers": ["my_rotate"],
        "propagate": false
    }
}
</code></pre>
<p>If I add other handler in handlers section (logging.handlers.RotateFileHandler) to rotate by size the result log file duplicate al messages.</p>
<p>My main program get logger properties using:</p>
<pre><code>config_json_file = open(os.path.join(os.path.dirname(os.path.realpath(__file__)), "logging.json"))
logging_data = json.load(config_json_file)
logging.config.dictConfig(logging_data)
</code></pre>
<p>My modules call the logger like:</p>
<pre><code>class StoreData(object):
    def __init__(self):
        self.logger = logging.getLogger(__name__)
</code></pre>
<p>How could I mix my three requirements (rotate by size and time, and compress rotated file) in this file?</p>
<p>Thaks a lot!</p>
<p><strong>UPDATE 1</strong></p>
<p>As suggested @Bakuriu I've created a new class to override needed methods to be able to compress rotated files:</p>
<pre><code>class MyRotatingFileHandler(logging.handlers.TimedRotatingFileHandler):
    """ My rotating file hander to compress rotated file """

    def __init__(self, **kwargs):
        logging.handlers.TimedRotatingFileHandler.__init__(self, **kwargs)

    def rotate(self, source, dest):
        """ Compress rotated log file """
        os.rename(source, dest)
        f_in = open(dest, 'rb')
        f_out = gzip.open("%s.gz" % dest, 'wb')
        f_out.writelines(f_in)
        f_out.close()
        f_in.close()
        os.remove(dest)
</code></pre>
<p>So that "new" class is called fron logging config file where I added a new handler:</p>
<pre><code>"handlers": {
    "my_rotate": {
        "level": "DEBUG",
        "class": "myMainPackage.MyRotatingFileHandler",
        "formatter": "simple",
        "when": "D",
        "interval": 1,
        "backupCount": 5,
        "filename": "/var/log/test.log",
        "encoding": "utf8"
}
</code></pre>
<p>In the next update I'll add a method to override the needed method(s), and be able to mix time and file size rotation together.</p>
<p><strong>UPDATE 2</strong></p>
<p>Well, I've overrided "shouldRollover" method, thus I've mix the time and file size for rotation.</p>
<pre><code>class MyRotatingFileHandler(logging.handlers.TimedRotatingFileHandler):
        """ My rotating file hander to compress rotated file """
        def __init__(self, filename, mode='a', maxBytes=0, backupCount=0, encoding=None,
                     delay=0, when='h', interval=1, utc=False):
            if maxBytes &gt; 0:
                mode = 'a'
            logging.handlers.TimedRotatingFileHandler.__init__(
                self, filename, when, interval, backupCount, encoding, delay, utc)
            self.maxBytes = maxBytes
            self.backupCount = backupCount

        def shouldRollover(self, record):
            """ Determine if rollover should occur. """
            # Check rollover by size
            if self.stream is None:                 # delay was set...
                self.stream = self._open()
            if self.maxBytes &gt; 0:                   # are we rolling over?
                msg = "%s\n" % self.format(record)
                self.stream.seek(0, 2)  #due to non-posix-compliant Windows feature
                if self.stream.tell() + len(msg) &gt;= self.maxBytes:
                    return 1
            # Check rollover by time
            t = int(time.time())
            if t &gt;= self.rolloverAt:
                return 1
            return 0

        def rotate(self, source, dest):
            """ Compress rotated log file """
            os.rename(source, dest)
            f_in = open(dest, 'rb')
            f_out = gzip.open("%s.gz" % dest, 'wb')
            f_out.writelines(f_in)
            f_out.close()
            f_in.close()
            os.remove(dest)
</code></pre>
<p>And modify my logging config file in json to rotate time by day but check in seconds... it means <em>86400s</em> (seconds in a day) and a size limit of <em>5Mb</em>:</p>
<pre><code>"handlers": {
        "my_rotate_timed": {
            "level": "DEBUG",
            "class": "myMainPackage.MyRotatingFileHandler",
            "formatter": "simple",
            "when": "S",
            "interval": 86400,
            "backupCount": 5,
            "maxBytes": 5242880,
            "filename": "/var/log/test.log",
            "encoding": "utf8"
    }
</code></pre>
<p>This way reuses the others methods from TimedRotationFileHandler and if rotation is called by <em>maxBytes</em>, then it uses suffix in seconds inherited from <em><strong>init</strong></em> TimedRotationFileHandler method, which format is: "%Y-%m-%d_%H-%M-%S" . This is the reason I've used "{when="S", interval=86400}" and not "{when="D", interval=1}"</p>
</div>
<div class="post-text" itemprop="text">
<p>This is to be expected. If you <em>add</em> a handler this handler either wont produce messages (due to filtering) and so nothing will change or it will write those messages (thus duplicating them).</p>
<p>The <code>TimedRotatingFileHandler</code> and the <code>RotatingFileHandler</code> only support, respectively, rotating by time and by size. Not both at the same time.</p>
<p>AFAIK <strong>there is no built-in way to achieve what you want</strong>, so using only the configuration file you wont be able to achieve what you want, you <em>have</em> to code something to put together the functionality.</p>
<p>Consider reading how to create a new rotating handler in the <a href="https://docs.python.org/3/howto/logging-cookbook.html#cookbook-rotator-namer" rel="nofollow">Logging Cookbook</a>. If you save this handler class in a file <code>mypackage.myrotatinghandler</code> you can then specify:</p>
<pre><code>class: 'mypackage.myrotatinghandler.MyHandler'
</code></pre>
<p>in the configuration file.</p>
<p>Note that, to add compression when saving a file it is sufficient to set the <code>rotator</code> attribute of the rotating handler with a function that saves a compressed file. Taken from the link above:</p>
<pre><code>def namer(name):
    return name + ".gz"

def rotator(source, dest):
    with open(source, "rb") as sf:
        data = sf.read()
        compressed = zlib.compress(data, 9)
        with open(dest, "wb") as df:
            df.write(compressed)
    os.remove(source)

rh = logging.handlers.RotatingFileHandler(...)
rh.rotator = rotator
rh.namer = namer
</code></pre>
<p>The <code>rh</code> handler will behave as a normal <code>RotatingFileHandler</code> but also compress the logs.</p>
<p>However setting the conditions to do a rotation require that you re-write parts of the handler. You may read the sources for the <a href="https://hg.python.org/cpython/file/ffbbd43d7342/Lib/logging/handlers.py" rel="nofollow"><code>logging.handlers</code></a> module to see how the built-in handlers are implemented.</p>
</div>
<span class="comment-copy">thanks for sharing, I'll test it. btw the "mode" parameter in <b>init</b> is not used</span>
<span class="comment-copy">the rotation by size is improperly working I think. In this case, the backupCount is always 1 even if it's configured otherwise. I'll try to fix it</span>
<span class="comment-copy">That's perfect @Bakuriu. I've already created a new class to override specific methods to add rotate log compress (Updated question). I'll override another class to mix time and size rotation when I hace time. Thanks for the answer</span>
