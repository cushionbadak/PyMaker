<div class="post-text" itemprop="text">
<p>for example <code>def f(n):</code></p>
<p>and I wanna check whether the sum of the numbers within <code>n</code> equal to 100 whether it is in 1s, 2s, 3,s 4s, 5s and so on, depending on the length of <code>n</code>.</p>
<pre><code>f(5050)
&gt;&gt;&gt; True
</code></pre>
<p>This tests whether <code>5 + 0 + 5 + 0 == 100</code> and whether <code>50 + 50 ==100</code> and if any are true, it returns <code>True</code>.</p>
<p>Whether it tests in 1s, 2s 3s 4s and so on, depends on the length of the number. For example a number with a length of 5 can only be tested in 1s. </p>
<pre><code>f(12345)
&gt;&gt;&gt; False
</code></pre>
<p>This tests whether <code>1 + 2 + 3 + 4 + 5 == 100</code> and only that.</p>
<p>If the length of <code>n</code> was 15, it would test the digits in 1s, 3s and 5s.</p>
<p>and finally one more example:</p>
<pre><code>f(25252525)
&gt;&gt;&gt; True
</code></pre>
<p>This would test whether <code>2+5+2+5+2+5+2+5 == 100</code> and <code>25+25+25+25==100</code> and whether <code>2525+2525==100</code>
So <code>n</code>, which has a length of 8 would be tested in 1s , 2s , and 4s. It cannot be tested with 3s and 5s because the length of all the digits within the number being summed up must be the same. </p>
<p>I hope I was able to explain what I'm after. Usually I would post what I've tried but I have no idea how to iterate over the digits of a number in such a way </p>
</div>
<div class="post-text" itemprop="text">
<p>I <em>think</em> this does the trick. Not sure though:</p>
<pre><code>def f(n):
    s = str(n)
    l = len(s)
    for n in (n for n in range(1, l + 1) if l % n == 0):
        ints = [int(''.join(x)) for x in zip(*[iter(s)]*n)]
        if sum(ints) == 100:
            return True
    return False
</code></pre>
<p>The <code>zip</code> thing comes from <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow">here</a>. It's a little weird but it allows me to split the string up into n-length segments and then join it back together so I can apply an <code>int</code> mapping and then a <code>sum</code> reduction.</p>
<p>The generator just gets all positive divisors of <code>l</code> from <code>1</code> to <code>l</code>, both inclusive. There may be faster ways of doing it for large <code>n</code> using <code>math.sqrt</code> and <code>divmod</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The below approach uses generator to split the integer, and no <code>integer &lt;-&gt; string</code> conversion.</p>
<p>This will likely be the most efficient approach of the ones currently listed.</p>
<pre><code>import math

# Define a generator that will split the integer v into chunks of length cl
# Note: This will return the chunks in "reversed" order.
#   split(1234, 2) =&gt; [34, 12]
def split(v, cl):
    while v:
        (v,c) = divmod(v, 10**cl)
        yield c


def f(v):
    # Determine the number of digits in v
    n = int(math.log10(v)) + 1
    m = int(math.sqrt(v))
    # Check all chunk lengths in [1, sqrt(v)]
    for cl in range(m):
        # Skip the chunk lengths that would result in unequal chunk sizes 
        if n % (cl+1): continue
        # Create a generator, to split the value v into chunks of length cl
        chunks = split(v, cl+1)
        # If the sum of the chunks is 100, print a message and return True
        if sum(chunks) == 100:
            print("sum = 100 with chunklength: %d" % cl)
            return True
    # If we get here, none of the chunk lengths result in a sum of 100, return False
    return False

print(f(5050))      # True (cl=2)
print("---")
print(f(12345))     # False
print("---")
print(f(25252525))  # True (cl=2)
print("---")
</code></pre>
<p>Output:</p>
<pre>
sum = 100 with chunklength: 2
True
---
False
---
sum = 100 with chunklength: 2
True
---
</pre>
<p>Without comments and debugging <code>print</code>:</p>
<pre><code>import math

def split(v, cl):
    while v:
        (v,c) = divmod(v, 10**cl)
        yield c

def f(v):
    n = int(math.log10(v)) + 1
    m = int(math.sqrt(v))
    for cl in range(m):
        if n % (cl+1): continue
        if sum(split(v, cl+1)) == 100: return True
    return False

print(f(5050))      # True
print(f(12345))     # False
print(f(25252525))  # True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that the numbers are always positive integers, you can just <code>divmod()</code> them by <code>10</code> until you get to zero:</p>
<pre><code>def int_iter(number):
    while number &gt; 0:
        number, last_digit = divmod(number, 10)
        yield last_digit
</code></pre>
<p>Note that gives you the digits in reverse order. That doesn't matter if you're just adding them together, though.</p>
<p>You can pass this around or use it in a <code>for</code> loop, like any other iterable:</p>
<pre><code>digit_sum = sum(int_iter(number))
</code></pre>
<p>If you really need a sequence, just pass it to <code>list()</code>:</p>
<pre><code>digit_list = list(int_iter(number))
</code></pre>
<p>And if you need them in most-significant-first order, pass it to <code>reversed()</code>:</p>
<pre><code>digits_msf = reversed(list(int_iter(number)))
</code></pre>
<hr/>
<p><strong>EDIT:</strong></p>
<p>Whoops, I missed…about half of the question. Things are rather more complicated. You'll need a function to get all the factors of a number—I'm sure there are plenty, so I'll leave that as an excercise for you. Let's assume there's a function <code>factors(number)</code> that returns an iterable of all a number's factors (including nonprimes and 1, but not <code>number</code> itself). We'll also use the <code>int_iter()</code> from my original answer, an <code>int_from_digits()</code> that takes a list of digits and returns a single integer (sort of like the inverse of <code>int_iter()</code>), and something called <code>grouper()</code> from <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow">the <code>itertools</code> recipes</a>.</p>
<pre><code>from itertools import zip_longest

def int_from_digits(digits):
    "Generate an integer from an iterable of single decimal digits"
    # int_from_digits([4, 0, 2, 8, 9]) --&gt; 40289
    # int_from_digits([]) --&gt; 0
    number = 0
    for digit in digits:
        number *= 10
        number += digit
    return number

def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)

def digit_subsequences(number):
    digits = list(reversed(list(int_iter(number))))
    for factor in factors(number):
        for digit_grouping in grouper(digits, factor):
            yield int_from_digits(digit_grouping)
</code></pre>
<p>Finally, armed with all these tools (or rather, one tool and its dependencies), we can perform your check with a simple comprehension and a call to <code>any()</code>:</p>
<pre><code>any(digit_subsequence == 100 for digit_subsequence in digit_subsequences(number))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One possible way, separated into functions for each logical step :</p>
<ol>
<li><a href="https://stackoverflow.com/questions/6800193/what-is-the-most-efficient-way-of-finding-all-the-factors-of-a-number-in-python">Get factors of <code>n</code></a> :</li>
</ol>
<hr/>
<pre><code>def get_factors(n):    
    return set(reduce(list.__add__, 
                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))
</code></pre>
<ol start="2">
<li>For each <code>l</code> factor of <code>n</code>, <a href="https://stackoverflow.com/questions/13673060/split-string-into-strings-by-length">split <code>str(n)</code> into chunks of length <code>l</code></a> :</li>
</ol>
<hr/>
<pre><code>def get_chunks(str_n, chunk_size):
    total_size = len(str_n)
    return [int(str_n[i:i+chunk_size]) for i in range(0, total_size, chunk_size)]
</code></pre>
<ol start="3">
<li>Check if sum of chunks in step 2 equals 100.</li>
</ol>
<hr/>
<pre><code>def f(n):
    factors = get_factors(n)
    for l in factors:
        if sum(get_chunks(str(n), l)) == 100:
            return True
    return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def factors(num):
    yield 1
    for i in range(2, num - 1):
        if num % i == 0:
            yield i


def pieces(string, sz):
    for i in range(0, len(string), sz):
        yield string[i:i+sz]


def check_sum(string):
    for f in factors(len(string)):
        pcs = pieces(string, f)
        if sum([int(x) for x in pcs]) == 100:
            print 'True'
            return
    print 'False'

&gt;&gt;&gt; check_sum('5050')
True
&gt;&gt;&gt; check_sum('25252525')
True
&gt;&gt;&gt; check_sum('12345')
False
</code></pre>
</div>
<span class="comment-copy">hint: <code>x = str(my_number)</code>, and now you can inspect the individual digits of <code>my_number</code> by indexing <code>x</code>.</span>
<span class="comment-copy">But I thought indexing wouldn't work because n can be any number with any length</span>
<span class="comment-copy">so what is <code>f(343)</code>? Or is your function only supposed to handle positive integers with an even number of digits?</span>
<span class="comment-copy">Strings can be any length too. I don't see a problem there.</span>
<span class="comment-copy">it would be False. 3 + 4 + 3 = 10 and not 100</span>
<span class="comment-copy">Thanks for the awesome reply. This code seems to be working really well. Just one more thing, is there a way to have the digits, which are being added separately, squared separately? For example it checks for f(5050) checks for 50^2 + 50^2 instead of 50+50</span>
<span class="comment-copy">@Roger Sure. Just do <code>map(lambda x: x**2, ints)</code> to get a a list (or iterable in Python 3) of all the squared values. Then cast <code>sum()</code> on that expression. :) Alternatively you can do <code>[x**2 for x in ints]</code> That's a list comprehension and basically it does the same thing as <code>map</code> (except its a bit faster and easier to read).</span>
<span class="comment-copy">Your names should really be longer and more descriptive, and I disagree with onelining those <code>if</code> statements and checking against <code>100</code> within <code>f()</code> (seems like something that should go outside)… That said, your answer is the simplest currently on here and requires only the standard <code>math</code> module. Nice job. +1</span>
<span class="comment-copy">@BlacklightShining I understand that it may be confusing, but the variables names weren't really arbitrary letters as they may seem.  <code>f()</code> was taken from the OP's code, <code>v</code> is the <b>v</b>alue, <code>c</code> is the <b>c</b>hunk, <code>cl</code> is the <b>c</b>hunk <b>l</b>ength, <code>n</code> is the <b>n</b>umber of digits, <code>m</code> is the <b>m</b>ax value of the for loop.  As for in-lining, I have mixed feelings about it in general.  My reaction to them fall somewhere on a "this makes perfect sense" to "this is crazy" spectrum.  In the case of simple blocks (<code>continue</code>, <code>return True</code>), it usually falls in the "this isn't unreasonable" range.</span>
<span class="comment-copy">How does this help find whether the sum of any consecutive combinations of equal-length digits is equal to 100?</span>
<span class="comment-copy">Yeah, I started to answer this question, but then I noticed the part about combinations...</span>
