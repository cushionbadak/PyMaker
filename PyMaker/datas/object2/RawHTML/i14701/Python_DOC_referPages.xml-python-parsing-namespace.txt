<div class="post-text" itemprop="text">
<p>I have the following XML which I want to parse using Python's <code>ElementTree</code>:</p>
<pre class="lang-xml prettyprint-override"><code>&lt;rdf:RDF xml:base="http://dbpedia.org/ontology/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:owl="http://www.w3.org/2002/07/owl#"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
    xmlns="http://dbpedia.org/ontology/"&gt;

    &lt;owl:Class rdf:about="http://dbpedia.org/ontology/BasketballLeague"&gt;
        &lt;rdfs:label xml:lang="en"&gt;basketball league&lt;/rdfs:label&gt;
        &lt;rdfs:comment xml:lang="en"&gt;
          a group of sports teams that compete against each other
          in Basketball
        &lt;/rdfs:comment&gt;
    &lt;/owl:Class&gt;

&lt;/rdf:RDF&gt;
</code></pre>
<p>I want to find all <code>owl:Class</code> tags and then extract the value of all <code>rdfs:label</code> instances inside them. I am using the following code:</p>
<pre class="lang-py prettyprint-override"><code>tree = ET.parse("filename")
root = tree.getroot()
root.findall('owl:Class')
</code></pre>
<p>Because of the namespace, I am getting the following error.</p>
<pre class="lang-py prettyprint-override"><code>SyntaxError: prefix 'owl' not found in prefix map
</code></pre>
<p>I tried reading the document at <a href="http://effbot.org/zone/element-namespaces.htm">http://effbot.org/zone/element-namespaces.htm</a> but I am still not able to get this working since the above XML has multiple nested namespaces.</p>
<p>Kindly let me know how to change the code to find all the <code>owl:Class</code> tags.</p>
</div>
<div class="post-text" itemprop="text">
<p>ElementTree is not too smart about namespaces. You need to give the <code>.find()</code>, <code>findall()</code> and <code>iterfind()</code> methods an explicit namespace dictionary. This is not documented very well:</p>
<pre><code>namespaces = {'owl': 'http://www.w3.org/2002/07/owl#'} # add more as needed

root.findall('owl:Class', namespaces)
</code></pre>
<p>Prefixes are <em>only</em> looked up in the <code>namespaces</code> parameter you pass in. This means you can use any namespace prefix you like; the API splits off the <code>owl:</code> part, looks up the corresponding namespace URL in the <code>namespaces</code> dictionary, then changes the search to look for the XPath expression <code>{http://www.w3.org/2002/07/owl}Class</code> instead. You can use the same syntax yourself too of course:</p>
<pre><code>root.findall('{http://www.w3.org/2002/07/owl#}Class')
</code></pre>
<p>If you can switch to the <a href="http://lxml.de/" rel="noreferrer"><code>lxml</code> library</a> things are better; that library supports the same ElementTree API, but collects namespaces for you in a <code>.nsmap</code> attribute on elements.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's how to do this with lxml without having to hard-code the namespaces or scan the text for them (as Martijn Pieters mentions):</p>
<pre><code>from lxml import etree
tree = etree.parse("filename")
root = tree.getroot()
root.findall('owl:Class', root.nsmap)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong><em>Note</em></strong>: This is an answer useful for Python's ElementTree standard library without using hardcoded namespaces.</p></div>
<div class="post-text" itemprop="text">
<p>I've been using similar code to this and have found it's always worth reading the documentation... as usual!</p>
<p>findall() will only find elements which are <b>direct children of the current tag</b>. So, not really ALL.</p>
<p>It might be worth your while trying to get your code working with the following, especially if you're dealing with big and complex xml files so that that sub-sub-elements (etc.) are also included.
If you know yourself where elements are in your xml, then I suppose it'll be fine! Just thought this was worth remembering.</p>
<pre><code>root.iter()
</code></pre>
<p>ref: <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#finding-interesting-elements" rel="noreferrer">https://docs.python.org/3/library/xml.etree.elementtree.html#finding-interesting-elements</a>
"Element.findall() finds only elements with a tag which are direct children of the current element. Element.find() finds the first child with a particular tag, and Element.text accesses the element’s text content. Element.get() accesses the element’s attributes:"</p>
</div>
<div class="post-text" itemprop="text">
<p>To get the namespace in its namespace format, e.g. <code>{myNameSpace}</code>, you can do the following:</p>
<pre><code>root = tree.getroot()
ns = re.match(r'{.*}', root.tag).group(0)
</code></pre>
<p>This way, you can use it later on in your code to find nodes, e.g using string interpolation (Python 3).</p>
<pre><code>link = root.find(f'{ns}link')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I know I am a few years late, but I just created a package that will handle converting a dictionary to valid XML with namespaces. The package is hosted on PyPi @ <a href="https://pypi.python.org/pypi/xmler" rel="nofollow">https://pypi.python.org/pypi/xmler</a>.</p>
<p>Using this package you can take a dictionary that looks like this:</p>
<pre><code>myDict = {
    "RootTag": {                        # The root tag. Will not necessarily be root. (see #customRoot)
        "@ns": "soapenv",           # The namespace for the RootTag. The RootTag will appear as &lt;soapenv:RootTag ...&gt;
        "@attrs": {                     # @attrs takes a dictionary. each key-value pair will become an attribute
            { "xmlns:soapenv": "http://schemas.xmlsoap.org/soap/envelope/" }
        },
        "childTag": {
            "@attrs": {
                "someAttribute": "colors are nice"
            },
            "grandchild": "This is a text tag"
        }
    }
}
</code></pre>
<p>and get XML output that looks like this:</p>
<pre><code>&lt;soapenv:RootTag xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;
    &lt;childTag someAttribute="colors are nice"&gt;
        &lt;grandchild&gt;This is a text tag&lt;/grandchild&gt;
    &lt;/childTag&gt;
&lt;/soapenv:RootTag&gt;
</code></pre>
<p>Hope this is useful for people in the future</p>
</div>
<span class="comment-copy">Thank you. Any idea how can I get the namespace directly from XML, without hard-coding it? Or how can I ignore it? I've tried findall('{*}Class') but it wont work in my case.</span>
<span class="comment-copy">You'd have to scan the tree for <code>xmlns</code> attributes yourself; as stated in the answer, <code>lxml</code> does this for you, the <code>xml.etree.ElementTree</code> module does not. But if you are trying to match a specific (already hardcoded) element, then you are also trying to match a specific element in a specific namespace. That namespace is not going to change between documents any more than the element name is. You may as well hardcode that with the element name.</span>
<span class="comment-copy">Why doesn't <code>register_namespace</code> work?</span>
<span class="comment-copy">@Jon: <code>register_namespace</code> only influences serialisation, not search.</span>
<span class="comment-copy">Small addition that may be useful: when using <code>cElementTree</code> instead of <code>ElementTree</code>, <code>findall</code> will not take namespaces as a keyword argument, but rather simply as a normal argument, i.e. use <code>ctree.findall('owl:Class', namespaces)</code>.</span>
<span class="comment-copy">this works just fine.</span>
<span class="comment-copy">The full namespace URL <i>is</i> the namespace identifier you're supposed to hard-code. The local prefix (<code>owl</code>) can change from file to file. Therefore doing what this answer suggests is a really bad idea.</span>
<span class="comment-copy">@MattiVirkkunen exactly if the owl definition can change from file to file, shouldn't we use the definition defined in each files instead of hardcoding it?</span>
<span class="comment-copy">@LoïcFaure-Lacroix: Usually XML libraries will let you abstract that part out. You don't need to even know or care about the prefix used in the file itself, you just define your own prefix for the purpose of parsing or just use the full namespace name.</span>
<span class="comment-copy">This is useful for those of us without access to lxml and without wanting to hardcode namespace.</span>
<span class="comment-copy">I got the error:<code>ValueError: write to closed</code> for this line <code>filemy_namespaces = dict([node for _, node in ET.iterparse(StringIO(my_schema), events=['start-ns'])])</code>. Any idea wants wrong?</span>
<span class="comment-copy">Probably the error is related with the class io.StringIO, that refuses ASCII strings. I had tested my recipe with Python3. Adding the unicode string prefix 'u' to the sample string it works also with Python 2 (2.7).</span>
<span class="comment-copy">Instead of <code>dict([...])</code> you can also use dict comprehension.</span>
<span class="comment-copy">Instead of <code>StringIO(my_schema)</code> you can also put the filename of the XML file.</span>
