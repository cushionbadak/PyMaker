<div class="post-text" itemprop="text">
<p>I'd like to count the number of leading spaces in a string.What's the most Pythonic way of doing this?</p>
<pre><code>&gt;&gt;&gt;F(' ' * 5 + 'a')
5
</code></pre>
<p>(update) Here are timings of several of the answers:</p>
<pre><code>import timeit
&gt;&gt;&gt; timeit.timeit("s.index(re.search(r'\S',s).group())", number=10000, setup="import re;s='     a'")
0.027384042739868164
&gt;&gt;&gt; timeit.timeit("len([i for i in itertools.takewhile(str.isspace,s)])", number=10000, setup="import itertools;s='     a'")
0.025166034698486328
&gt;&gt;&gt; timeit.timeit("next(idx for idx,val in enumerate(s) if val != ' ')", number=10000, setup="s='     a'")
0.028306961059570312
&gt;&gt;&gt; timeit.timeit("F('     a')", number=10000, setup="def F(s): return len(s)-len(s.lstrip(' '))")
0.0051808357238769531
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; F = lambda x:len(x)-len(x.lstrip(' '))
&gt;&gt;&gt; F(' ' * 5 + 'a')
5
</code></pre>
<p>If you need to find length of leading whitespaces, you can just remove ' ' from lstrip, which is now limited to spaces only</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/2/howto/regex.html"><code>re</code> module</a></p>
<pre><code>&gt;&gt;&gt; s
'     a'
&gt;&gt;&gt; import re
&gt;&gt;&gt; s.index(re.search(r'\S',s).group())
5
</code></pre>
<p>Using <a href="https://docs.python.org/2/library/itertools.html#itertools.takewhile"><code>itertools</code></a></p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; len([i for i in itertools.takewhile(str.isspace,s)])
5
</code></pre>
<p>The brute force way</p>
<pre><code>&gt;&gt;&gt; def F(s):
...     for i in s:
...          if i!=' ':
...               return s.index(i)
... 
&gt;&gt;&gt; F(s)
5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>enumerate</code> to iterate through the string <code>s</code>. As soon as you hit a non <code>' '</code> item in <code>s</code>, print that index, which is what you are looking for.</p>
<pre><code>&gt;&gt;&gt; for i, val in enumerate(s):
...    if val != ' ':  
...       print i  
...       break
...
5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def f(string):
    try:
        return [c == ' ' for c in string].index(False)
    except ValueError:
        return -1
</code></pre>
<p>looks for the first character that doesn't match <code>' '</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Through <code>re</code> module. and using <code>len</code> function.</p>
<pre><code>&gt;&gt;&gt; s = '     a'
&gt;&gt;&gt; len(re.sub(r'\S.*', '',s))
5
</code></pre>
<p>This would remove all the chars from the first non-space character upto the last. Then the len function applies on the resultant string giving you the length of leading spaces.</p>
<p><strong>OR</strong></p>
<pre><code>&gt;&gt;&gt; s = '     a'
&gt;&gt;&gt; len(re.match(r'\s*', s).group())
5
&gt;&gt;&gt; s = 'a'
&gt;&gt;&gt; len(re.match(r'\s*', s).group())
0
</code></pre>
<p>This would match only zero or more leading spaces. </p>
<p><strong>OR</strong></p>
<p>Use re.match function's <a href="https://docs.python.org/2/library/re.html#re.MatchObject.end" rel="nofollow"><code>end()</code></a> attribute. </p>
<pre><code>&gt;&gt;&gt; s = '     a'
&gt;&gt;&gt; re.match(r'\s*', s).end()
5
&gt;&gt;&gt; re.match(r'\s*', 'd').end()
0
</code></pre>
<p><a href="http://chat.stackoverflow.com/transcript/message/22634901#22634901">Thanks to Adam</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Ooh one more that no one has posted yet.</p>
<pre><code>def leading_spaces(s):
    return next(idx for idx,val in enumerate(s) if val != " ")
</code></pre>
<p>This is almost certainly the fastest way to do it</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple map and then sum:</p>
<pre><code>&gt;&gt;&gt; sum(map(bool, takewhile(str.isspace, '    a  ')))
4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Code:</p>
<pre><code>&gt;&gt;&gt; i = 0
&gt;&gt;&gt; while i &lt; len(s):
...     if s[i] != ' ':
...       print i
...       break  
...     i += 1

5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Strip the string on the left side using the first character:</p>
<pre><code>&gt;&gt;&gt; s = 'aaaaabaca'
&gt;&gt;&gt; len(s) - len(s.lstrip(s[0]))
5
</code></pre>
<p>If you want to make it work for empty strings, simply add a check:</p>
<pre><code>&gt;&gt;&gt; s = ''
&gt;&gt;&gt; len(s) - len(s.lstrip(s[0])) if s else 0
0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>sorry for not being explicit enough....initialize a counter...you just iterate through the string and set a condition to check if each variable in the list a whitespace and the counter increment by 1...</p>
<pre><code>counter = 0

sstring = " " * 5 + "a"

for x in sstring:

    if x == " ":
        counter += 1
    else:
        continue

print(counter)
</code></pre>
<p>i am sincerely sorry i dont know why my script keeps showing in this lousy format..i am kind of new here</p>
</div>
<span class="comment-copy">@AvinashRaj He is counting the leading spaces</span>
<span class="comment-copy">I think YOU's answer is the most Pythonic, with Saksham Varma's coming a close second; YMMV. I guess it'd be nice to run some timeit tests on the various alternatives proposed... BTW, using an upper-case letter like<code>F</code> for a function name is definitely <i>not</i> Pythonic. :)</span>
<span class="comment-copy">Didn't use the lamba, but as shown above the difference of the two lengths  seems to yield the fastest results.</span>
<span class="comment-copy">Nice. <code>except ValueError:</code> is much better than using an unnamed except clause. From <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">docs.python.org/3/tutorial/errors.html#handling-exceptions</a> "The last except clause may omit the exception name(s), to serve as a wildcard. Use this with extreme caution, since it is easy to mask a real programming error in this way!". Also see <a href="http://stackoverflow.com/questions/14797375/should-i-always-specify-an-exception-type-in-except-statements" title="should i always specify an exception type in except statements">stackoverflow.com/questions/14797375/…</a></span>
<span class="comment-copy">@PM2Ring Good points, updated the answer.</span>
<span class="comment-copy">Why an answer starting with <i>Ooh one more</i></span>
<span class="comment-copy">@martineau fixed it.</span>
<span class="comment-copy">Could you please add some more details to your answer?</span>
<span class="comment-copy">i hope that is good enuf..</span>
<span class="comment-copy">@samlexxy you will need to break in the else block. Try running this for a string like <code>f = " " * 5 + "a " + " b"</code>, and you will see.</span>
<span class="comment-copy">This code doesn't work. You should be testing <code>if x == " ":</code>, <b>not</b> <code>f  == " "</code>. But even then it counts <i>all</i> spaces in <code>f</code>, not just <i>leading</i> spaces. And to fix that you need to change <code>continue</code> to <code>break</code>, as mu 無 explained.</span>
<span class="comment-copy">Your code doesn't find the leading whitespace in a string, it finds the total number of whitespace in a string, which is easier to do as <code>sum(ch.isspace() for ch in s)</code>.</span>
