<div class="post-text" itemprop="text">
<p>I have a string variable res which I have derived from a pyodbc cursor as shown in the bottom.
The table <code>test</code> has a single row with data <code>ä</code> whose unicode codepoint is <code>u'\xe4'</code>.</p>
<p>The Result I get is </p>
<pre><code>&gt;&gt;&gt; res,type(res)
('\xe4', &lt;type 'str'&gt;)
</code></pre>
<p>Whereas the result I should have got is.</p>
<pre><code>&gt;&gt;&gt; res,type(res)
(u'\xe4', &lt;type 'unicode'&gt;)
</code></pre>
<p>I tried adding charset as utf-8 to my pyodbc connect string as shown below.
The result was now correctly set as a unicode but the codepoint was for someother string <code>꓃</code> which could be due to a possible bug in the pyodbc driver.</p>
<pre><code>conn = pyodbc.connect(DSN='datbase;charset=utf8',ansi=True,autocommit=True)
&gt;&gt;&gt; res,type(res)
(u'\ua4c3', &lt;type 'unicode'&gt;)
</code></pre>
<p>Actual code</p>
<pre><code>import pyodbc
pyodbc.pooling=False
conn = pyodbc.connect(DSN='datbase',ansi=True,autocommit=True)
cursor = conn.cursor()
cur = cursor.execute('SELECT col1 from test')
res = cur.fetchall()[0][0]
print(res)
</code></pre>
<p>Additional details
Database: Teradata
pyodbc version: 2.7</p>
<p>So How do I now either</p>
<p>1) cast <code>('\xe4', &lt;type 'str'&gt;)</code> to <code>(u'\xe4', &lt;type 'unicode'&gt;)</code> (is it possible to do this without unintentional side-effects?)</p>
<p>2) resolve the pyodbc/unixodbc issue</p>
</div>
<div class="post-text" itemprop="text">
<p>This is something I think is best handled with Python, instead of fiddling with <a href="https://code.google.com/p/pyodbc/wiki/Module" rel="nofollow">pyodbc.connect</a> arguments and driver-specific connection string attributes.</p>
<p><code>'\xe4'</code> is a <a href="https://en.wikipedia.org/wiki/Latin-1_Supplement_%28Unicode_block%29" rel="nofollow">Latin-1</a> encoded string representing the unicode <a href="http://www.codetable.net/decimal/228" rel="nofollow">ä</a> character.</p>
<p>To explicitly decode the pyodbc result in Python 2.7:</p>
<pre><code>&gt;&gt;&gt; res = '\xe4'
&gt;&gt;&gt; res.decode('latin1'), type(res.decode('latin1'))
(u'\xe4', &lt;type 'unicode'&gt;)
&gt;&gt;&gt; print res.decode('latin1')
ä
</code></pre>
<p>Python 3.x does this for you (the <a href="https://docs.python.org/3/howto/unicode.html#the-string-type" rel="nofollow"><code>str</code> type includes unicode characters</a>):</p>
<pre><code>&gt;&gt;&gt; res = '\xe4'
&gt;&gt;&gt; res, type(res)
('ä', &lt;class 'str'&gt;)
&gt;&gt;&gt; print(res)
ä
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3, try this:</p>
<p>After <code>conn = pyodbc.connect(DSN='datbase',ansi=True,autocommit=True)</code> </p>
<p>Place this:</p>
<p><code>conn.setdecoding(pyodbc.SQL_CHAR, encoding='utf8')
conn.setdecoding(pyodbc.SQL_WCHAR, encoding='utf8')
conn.setencoding(encoding='utf8')</code></p>
<p>or</p>
<p><code>conn.setdecoding(pyodbc.SQL_CHAR, encoding='iso-8859-1')
conn.setdecoding(pyodbc.SQL_WCHAR, encoding='iso-8859-1')
conn.setencoding(encoding='iso-8859-1')</code></p>
<p>etc...</p>
<p>Python 2:</p>
<p><code>cnxn.setdecoding(pyodbc.SQL_CHAR, encoding='utf-8')
cnxn.setdecoding(pyodbc.SQL_WCHAR, encoding='utf-8')
cnxn.setencoding(str, encoding='utf-8')
cnxn.setencoding(unicode, encoding='utf-8')</code></p>
<p>etc...</p>
<p><code>cnxn.setdecoding(pyodbc.SQL_CHAR, encoding='encode-foo-bar')
cnxn.setdecoding(pyodbc.SQL_WCHAR, encoding='encode-foo-bar')
cnxn.setencoding(str, encoding='encode-foo-bar')
cnxn.setencoding(unicode, encoding='encode-foo-bar')</code></p>
</div>
<span class="comment-copy">Thanks @Bryan I will try this out today.</span>
<span class="comment-copy">Thanks it works as expected. however our requirement is to support Asian characters too, so I am going with JayDeBeApi which uses JDBC via jpype.</span>
<span class="comment-copy">Thanks for posting an update relevant to current versions of pyodbc (4.x and up). More details are available at the <a href="https://github.com/mkleehammer/pyodbc/wiki/Unicode#teradata" rel="nofollow noreferrer">pyodbc Wiki</a>.</span>
