<div class="post-text" itemprop="text">
<p>I have this code:</p>
<pre><code>def __executeCommand(self, command: str, input: str = None) -&gt; str:
    p = sub.Popen(command, stdout=sub.PIPE, stderr=sub.PIPE, stdin=sub.PIPE, universal_newlines=True)
    p.stdin.write(input)
    output, error = p.communicate()
    if (len(errors) &gt; 0):
        raise EnvironmentError("Could not generate the key: " + error)
    elif (p.returncode != 0):
        raise EnvironmentError("Could not generate the key. Return Value: " + p.returncode)
    return output
</code></pre>
<p>And I get an UnicodeDecodeError in the line <code>output, error = p.communicate()</code>:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Python34\lib\threading.py", line 921, in _bootstrap_inner
    self.run()
  File "C:\Python34\lib\threading.py", line 869, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Python34\lib\subprocess.py", line 1170, in _readerthread
    buffer.append(fh.read())
  File "C:\Python34\lib\encodings\cp1252.py", line 23, in decode
    return codecs.charmap_decode(input,self.errors,decoding_table)[0]
UnicodeDecodeError: 'charmap' codec can't decode byte 0x81 in position 27: character maps to &lt;undefined&gt;
</code></pre>
<p>How can I fix this? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>univeral_newlines=True</code> enables text mode. The subprocess output (bytes) is decoded using <code>locale.getpreferredencoding(False)</code> character encoding as <a href="https://stackoverflow.com/a/29548914/4279">@cdosborn mentioned</a>.</p>
<p>If it doesn't work, provide the actual <code>encoding</code> that is used by <code>command</code>. And/or specify the error handler such as <a href="https://docs.python.org/3/library/codecs.html#error-handlers" rel="nofollow noreferrer"><code>'ignore'</code>,<code>'surrogateescape'</code>, etc</a>  as <code>errors</code> parameter:</p>
<pre><code>from subprocess import Popen, PIPE

def __executeCommand(self, command: str, input: str = None, 
                     encoding=None, errors='strict') -&gt; str:
    text_mode = (encoding is None)
    with Popen(command, stdout=PIPE, stderr=PIPE, stdin=PIPE,
               universal_newlines=text_mode) as p:
        if input is not None and not text_mode:
            input = input.encode(encoding, errors) # convert to bytes
        output, err = p.communicate(input)
    if err or p.returncode != 0: 
        raise EnvironmentError("Could not generate the key. "
                               "Error: {}, Return Value: {}".format(
                                   ascii(err), p.returncode))
    return output if text_mode else output.decode(encoding, errors)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>universal_newlines=true</code> setting results in an additional encoding that is the source of your error.</p>
<pre><code>def __executeCommand(self, command: str, input: str = None) -&gt; str:
    p = sub.Popen(command, stdout=sub.PIPE, stderr=sub.PIPE, stdin=sub.PIPE)
    output, error = p.communicate(input)
    if (len(errors) &gt; 0):
        raise EnvironmentError("Could not generate the key: " + error)
    elif (p.returncode != 0):
        raise EnvironmentError("Could not generate the key. Return Value: " + p.returncode)
    return output
</code></pre>
<p><code>universal_newlines=true</code> results in an encoding based on the output of:</p>
<p><code>python -c 'import locale; print locale.getpreferredencoding()'</code> </p>
<p>Python threw an error when it expected your input to match the encoding above, but instead processed a byte clearly in a different encoding.</p>
<p>More info about python 3.4 <code>universal_newlines</code> <a href="https://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="nofollow">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Python 3.6 or later, you can fix the error by changing this line:</p>
<pre><code>p = sub.Popen(command, stdout=sub.PIPE, stderr=sub.PIPE, stdin=sub.PIPE, universal_newlines=True)
</code></pre>
<p>to this:</p>
<pre><code>p = sub.Popen(command, stdout=sub.PIPE, stderr=sub.PIPE, stdin=sub.PIPE, encoding="utf-8", universal_newlines=True)
</code></pre>
<p>I used UTF-8 above, but you can substitute it with whatever encoding you need.</p>
</div>
<span class="comment-copy">unrelated: you don't need <code>p.stdin.write(input)</code>; use <code>... = p.communicate(input)</code> instead.</span>
<span class="comment-copy">I didn't find the right encoding... but as only the error messages contained special characters <code>output.decode(encoding, errors='replace')</code> did it for me.</span>
<span class="comment-copy">Python is supposed to be a scripting language... this feels like the worst of C...</span>
<span class="comment-copy">@ChristopherOezbek : how would you implement  the same functionality  in <i>any</i> language of your choosing? (There could be a question about how reasonable it is to pack the functionality into a single function but it is unrelated to Python: you can write FORTRAN in any language)</span>
<span class="comment-copy">@J.F. Sebastian: Sorry about my frustration, I just have never worked with a scripting language that lets me worry about so many things (encoding, newlines), when I just want plain and simple backtick operator behavior: Run a command, get stdout and stderr as strings for printing to stdout again.</span>
<span class="comment-copy">@ChristopherOezbek: if you need "backtick"; use <code>output = subprocess.check_output(command)</code>. I don't see how it is related to the question or Python in general: if you are working with text; you should know about encodings (<a href="http://blog.codinghorror.com/there-aint-no-such-thing-as-plain-text/" rel="nofollow noreferrer">There Ain't No Such Thing as Plain Text</a>).</span>
<span class="comment-copy">notice: <code>-&gt; str</code> in the function signature. If you remove <code>universal_newlines=True</code> then <code>subprocess</code> works in binary mode i.e., the result is <code>bytes</code>, not <code>str</code>. You have to decode manually (you need to know the character encoding used by <code>command</code>, to decode its output). And you have to encode <code>input</code> too.</span>
<span class="comment-copy">I think that must be assumed a layer above. There is no way to know in advance what the encoding of each <code>command</code> takes as input or returns as output. From what I know there is no distinction between type bytes and type str. Optionally the output could be wrapped as <code>str(output, locale.getpreferredencoding())</code>.</span>
<span class="comment-copy">Wrapping as I mentioned would also likely raise the error mentioned above.</span>
<span class="comment-copy">notice that OP uses Python 3: <code>str </code>(Unicode text) is very different from <code>bytes</code> type (binary type).</span>
<span class="comment-copy">wrapping <i>using <code>locale</code> encoding</i> won't help, otherwise universal_newlines would have worked. OP should provide a correct encoding and/or use <code>errors</code> handler (<code>bytestring.decode(encoding, errors)</code> or via <code>io.TextIOWrapper(p.stdout, encoding, errors)</code>)</span>
