<div class="post-text" itemprop="text">
<p>I am a beginner in Python. </p>
<p>My task was to write an interactive text base program which has three functions to work with:</p>
<ol>
<li><p>Ask user to enter the name of the data/file (.text) they want to use</p>
<p>Then ask them to input their command(s):</p>
<p>i. <code>sd yyyymmdd yyyymmdd --&gt; command 1</code> </p>
<p><strong>Where sd = internet load of all servers during those day (in between) but I
have 2 text files, note all values must be return/ print as a column</strong></p>
<p>ii. <code>dl server1 server 2 --&gt; command 2</code> </p>
<p><strong>Where dd = difference in the load between server 1 and server 2</strong></p></li>
<li><p>From the selected file, they can see the average server load using this command:</p>
<p>iii. <code>yearly YYYY yyyy ---&gt; command 3</code> </p>
<p><strong>Shows general load/ average load for first_year (YYYY) to end_year (yyyy).</strong></p></li>
<li><p>When user input = (q) , the program exits, otherwise it will print (Bad/unknown).</p></li>
</ol>
<hr/>
<p><strong>Problem #1</strong>: </p>
<p>Should I use <code>s.spilt()</code>, tuple or what and how should it look?</p>
<p><strong>Problem #2:</strong></p>
<p>Would using the <code>bool</code> function (True, False, ) be OK or not?</p>
</div>
<div class="post-text" itemprop="text">
<p>The part you're trying to build is a <em>command parser</em>.</p>
<p>If your command language is really simple, then yes, you can use <code>split</code>. This will work if and only if:</p>
<ul>
<li>A command line is always exactly one line.</li>
<li>Commands and arguments are split by any whitespace (and the specific whitespace is not significant).</li>
<li>There is no possibility of whitespace (not even quoted or escaped) within any command name or argument.</li>
</ul>
<p>If all of that is true, then your parser is as simple as:</p>
<pre><code>cmd, *args = line.strip().split()
</code></pre>
<p>If the input is <code>'sd yyyymmdd yyyymmdd\n'</code>, then what you'll end up with is <code>cmd = 'sd'</code> and <code>args = ['yyyymmdd', 'yyyymmdd']</code>, which (I think) is what you want. Then, if you have, say, a dict mapping command names to functions that handle those commands, you can do something like:</p>
<pre><code>handlers[cmd](*args)
</code></pre>
<p>In this case, if your <code>handlers</code> was <code>{'sd': handle_sd, 'q': handle_quit}</code>, then this would call <code>handle_sd('yyyymmdd', 'yyyymmdd')</code>, which (again, I think) is what you want. (Of course in real life you'll want some error handling, in case the user types some command name that isn't in your dict, or gives the wrong number of arguments, but this is just meant as a simple example.)</p>
<p>If you need something a <em>little</em> more complicated—e.g., a way to include quoted or escaped whitespace in arguments, similar to the way your <code>bash</code> or <code>cmd.exe</code> shell does—then you may be able to get away with the <code>csv</code> module (or maybe the <code>shlex</code> module).</p>
<p>If you need something more complicated, you need to build your own parser, using something like <code>pyparsing</code>.</p>
<p>You may also want to look at using the <a href="https://docs.python.org/3/library/cmd.html" rel="nofollow"><code>cmd</code></a> module, instead of writing your own loop around <code>input</code>, looking up the <code>cmd</code> string in a map, etc. See the example at the bottom of the docs page. There are also a number of more powerful alternatives on PyPI you can search for.</p>
</div>
<span class="comment-copy">If you realize your question is incomprehensible, don't add a comment explaining how to read it, just edit the question so it can be read in the first place.</span>
<span class="comment-copy">Sorry about the miserable writing. I do not know how to edit the writing in stackoverflow cause it enters a 'comment' whenever you press 'enter' key.</span>
<span class="comment-copy">Apologizing isn't necessary—nor is it helpful. Again, <i>edit the question</i>.</span>
<span class="comment-copy">I hope this helps now. (note that I was given the datas of different servers as .text files and I donot know should Import them before writing or not)</span>
<span class="comment-copy">I still don't really get it. Is the <code>i.</code> part of the command? Or the <code>--&gt; command 1</code>? Maybe show us a fake transcript of what actual user input would look like?</span>
<span class="comment-copy">Thank you for the guide, however, what should I do if I donot want to use global variables??</span>
<span class="comment-copy">@WhomICan: You mean you don't want the command map to be a global variable? Then wrap the whole command processor in a class, and make the command map an instance variable. Even if you don't want to use the <code>cmd</code> module, you should take a look at how it's implemented. And some of its third-party alternatives. Also look at some RPC service processors, like maybe <code>bjsonrpc</code>, which have a similar design, even if the guts are very different.</span>
<span class="comment-copy">@WhomICan It's worth noting that just sticking a literal at the top of a Python source file isn't nearly as bad (maybe not bad at all?) as some of the hacks you can do with global variables in C which would be more in line with the “global variables are bad” mantra.</span>
<span class="comment-copy">@BlacklightShining: Good explanation. And of course in Python, every function and class defined at the top level is a global variable (because, unlike in C and its relatives, they're first-class objects, stored in variables the same way as any other values)…</span>
