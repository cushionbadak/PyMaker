<div class="post-text" itemprop="text">
<p>I am trying to write a function eliminate that takes a string and 2 optional arguments. The first optional argument (bad_characters) takes a letter and the third argument (case_sensitive) takes a Boolean value. The function should take a string s and remove all instances of bad_characters. If case_sensitive is true, then the function should act case sensitive. If false, then it does not need to. This is what I have so far.</p>
<pre><code>def eliminate(s,bad_characters = [],case_sensitive = True or False):
    ''' Takes a string s and returns the string with all bad_characters
    removed. If case_sensitive is True, then the function will only
    remove uppercase letters if there are uppercase letters in
    bad_characters.
    String --&gt; String'''
    while True:
        if case_sensitive = False:
            for character in s:
                if bad_characters == character:
                    newlist = s.replace(bad_characters,'')
                    return newlist
        break
</code></pre>
<p>I am having a hard time figuring out how to make the function remove upper case letters if needed. The function should also work if bad_characters is a list, tuple, or string.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is miss understanding about <code>str.replace</code> because it just replace one character so you need to loop over <code>bad_characters</code> and remove them one by one.</p>
<p>SO instead of using <code>==</code> you can just use <code>in</code> operand,for check the membership, and then remove <code>character</code> from your string :</p>
<pre><code>def eliminate(s,bad_characters = '',case_sensitive = False):
    ''' Takes a string s and returns the string with all bad_characters
        removed. If case_sensitive is True, then the function will only
        remove uppercase letters if there are uppercase letters in
        bad_characters.
        String --&gt; String'''
    if case_sensitive == False:
        for character in s:
            if  character in bad_characters:
                s = s.replace(character,'')
        return s
</code></pre>
<p>And as a more pythonic way for remove a special characters from string you can use <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow"><em>str.translate</em></a> method :</p>
<pre><code>s.translate(None,bad_characters)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a very handy <code>str.swapcase</code> function here. Please note that the below code overrides <code>bad_characters</code> for clarity, but you can easily modify it to keep it unchanged.</p>
<pre><code>def eliminate(s, bad_characters, case_sensitive):    
    if not case_sensitive:
        bad_characters += map(str.swapcase, bad_characters)
    return ''.join([c for c in list(s) if c not in bad_characters])

print eliminate('AaBb', ['a'], False)    
print eliminate('AaBb', ['a'], True)    
print eliminate('AaBb', ['A'], True) 

Bb
ABb
aBb
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = 'AbCdEfG'
print(''.join([x[0] for x in zip(a, a.upper()) if x[0] != x[1]]))
# bdf
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use the <code>string.translate</code>(python2). </p>
<blockquote>
<p>string.translate(s, table[, deletechars])</p>
<p>Delete all characters from s that are in deletechars (if present), and then translate the characters using table, which must be a 256-character string giving the translation for each character value, indexed by its ordinal. If table is None, then only the character deletion step is performed.</p>
</blockquote>
<p>Other mistakes in the code:</p>
<ul>
<li>Initialize <code>case_sensitive</code> only with <code>True</code>. <code>True or False</code> is <code>True</code>.</li>
<li><code>While True</code> then <code>break</code> adds nothing. Remove it.</li>
<li><code>if case_sensitive = False:</code> is an assignment while you need a comparison <code>==</code>.  <code>case_sensitive</code> is a boolean, so just use it is <code>if case_sensitive</code> or <code>if not case_sensitive</code>.</li>
<li><code>bad_characters == character</code> is wrong. You cant compare a list to a character. use <code>character in bad_characters</code> instead.</li>
</ul>
<p>Here is the whole solution with corrections:</p>
<pre><code>def eliminate(s, bad_characters = [], case_sensitive = True):
    if case_sensitive: #True
        return s.translate(None, "".join(bad_characters))
    else: 
        s = s.translate(None, "".join(bad_characters).lower()) 
        s = s.translate(None, "".join(bad_characters).upper())
        return s
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def eliminate(s, bad_characters = [], case_sensitive=True):
    for character in bad_characters:
        if not case_sensitive:
            s = s.replace(character.lower(),'')
            s = s.replace(character.upper(),'')
        else:
            s = s.replace(character,'')
    return s
</code></pre>
</div>
<span class="comment-copy"><code>True or False</code> == <code>True</code>. Is this your intention?</span>
<span class="comment-copy">Why does <code>case_sensitive</code> remove only uppercase letters? this is odd. Perhaps name it <code>uppercase_only</code>?</span>
<span class="comment-copy">Also, try in the python console the following: <code>'A' == 'a'</code>.</span>
<span class="comment-copy">Slightly off-topic, but never put an empty array <code>[]</code> as a default value in a python function or method. Instead use <code>bad_characters = None; ... if bad_characters is None: bad_characters=[]</code>. See: <a href="http://stackoverflow.com/questions/1132941/least-astonishment-in-python-the-mutable-default-argument" title="least astonishment in python the mutable default argument">stackoverflow.com/questions/1132941/â€¦</a></span>
<span class="comment-copy">@DovGrobgeld you can do <code>bad_characters = bad_characters or []</code> since the arguments are not expected to be mutated anyway (so empty list passed in can be overrided by a different empty list).</span>
<span class="comment-copy">The translate method is <i>the</i> Pythonic way to do this. +1 for mentioning it, while also addressing the OP's problem. Although I would've corrected the "True or False" parameter and improved the <code>bad_characters=''</code>, especially when we discuss the "Pythonic" way.</span>
<span class="comment-copy">@OliverW. Pythonic way us not about the OP's solution any way thanks, for reminding fixed!;)</span>
<span class="comment-copy">@Kasra IndentationError!</span>
<span class="comment-copy">This is not readable, probably hard to maintain if changes will be needed, and it doesn't relate to the argument pass in (<code>case_sensitive</code>).</span>
