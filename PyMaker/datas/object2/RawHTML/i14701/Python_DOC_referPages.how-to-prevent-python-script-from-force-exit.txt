<div class="post-text" itemprop="text">
<p>I am running a python script and trying to prevent from force exiting or print an error message or log that into the log file.</p>
<p>I am already using <code>logging.info("")</code> for logging.. or just <code>print</code> for printing something..</p>
<p>but what or how do I create a method or function that can either do print or log when it force exit? </p>
<p>For example, if my test.py is running and I press <kbd>Ctrl + C</kbd> to exit out.. I want to log that or print out.. </p>
<pre><code>signal.signal(signal.SIGUSR1, handler)
logging.info("Checked for signal to stop")
if stop:
        logging.info("Inside of main if loop for stop signal")
        logging.info("Stop signal captured. Exiting the program")
        smtpObj.sendmail(sender, receivers, message + "Stop signal captured. Exiting the program")
        sys.exit("EXIT SIGNAL CAPTURED: EXITING")
</code></pre>
<p>I am using above coding for logging for when I want to exit the program.
But this doesn't deal with something like <code>ctrl + c</code> I want to also log just in case program exit by accident or something</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>UPDATED</strong></p>
<p>Use try and except:</p>
<pre><code>try:
    signal.signal(signal.SIGUSR1, handler)
    logging.info("Checked for signal to stop")
    if stop:
        logging.info("Inside of main if loop for stop signal")
        logging.info("Stop signal captured. Exiting the program")
        smtpObj.sendmail(sender, receivers, message + "Stop signal captured.     Exiting the program")
        sys.exit("EXIT SIGNAL CAPTURED: EXITING")
except KeyboardInterrupt as kbe:
    log.info(str(kbe))
</code></pre>
<p>You could also leverage the <code>atexit</code> module to execute a function when the script exits.</p>
<pre><code>import atexit

def alldone():
    log.warning('Something went wrong')

# your code here...
</code></pre>
<p><a href="https://docs.python.org/2/library/atexit.html" rel="nofollow">https://docs.python.org/2/library/atexit.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You should likely take a look at <a href="https://docs.python.org/2/library/signal.html" rel="nofollow">Python Signal Handlers</a> (specifically signal.CTRL_C_EVENT).</p>
<p>Here is a more-complete answer... NOTE: You can make your processes fairly unkillable by using such things.</p>
<pre><code>#!/usr/bin/env python

import signal, os
import time

def handler( signum, frame ):
  print "Signal handler caught", signum, "@", time.ctime()
  if signum == 2:
    raise "Caught Signal 2 - Exiting"

#
# Windows Supported Values
#
#signal.signal( signal.SIGABRT, handler )
#signal.signal( signal.SIGFPE, handler )
#signal.signal( signal.SIGILL, handler )
#signal.signal( signal.SIGINT, handler )
#signal.signal( signal.SIGSEGV, handler )
#signal.signal( signal.SIGTERM, handler )

#
# UNIX Supported Values (YMMV)
#
signal.signal( signal.SIGABRT, handler )
signal.signal( signal.SIGALRM, handler )
signal.signal( signal.SIGBUS, handler )
signal.signal( signal.SIGCHLD, handler )
signal.signal( signal.SIGCLD, handler )
signal.signal( signal.SIGCONT, handler )
signal.signal( signal.SIGFPE, handler )
signal.signal( signal.SIGHUP, handler )
signal.signal( signal.SIGILL, handler )
signal.signal( signal.SIGINT, handler )
signal.signal( signal.SIGIO, handler )
signal.signal( signal.SIGIOT, handler )
#signal.signal( signal.SIGKILL, handler )
signal.signal( signal.SIGPIPE, handler )
signal.signal( signal.SIGPOLL, handler )
signal.signal( signal.SIGPROF, handler )
signal.signal( signal.SIGPWR, handler )
signal.signal( signal.SIGQUIT, handler )
signal.signal( signal.SIGRTMAX, handler )
signal.signal( signal.SIGRTMIN, handler )
signal.signal( signal.SIGSEGV, handler )
#signal.signal( signal.SIGSTOP, handler )
signal.signal( signal.SIGSYS, handler )
signal.signal( signal.SIGTERM, handler )
signal.signal( signal.SIGTRAP, handler )
signal.signal( signal.SIGTSTP, handler )
signal.signal( signal.SIGTTIN, handler )
signal.signal( signal.SIGTTOU, handler )
signal.signal( signal.SIGURG, handler )
signal.signal( signal.SIGUSR1, handler )
signal.signal( signal.SIGUSR2, handler )
signal.signal( signal.SIGVTALRM, handler )
signal.signal( signal.SIGWINCH, handler )
signal.signal( signal.SIGXCPU, handler )
signal.signal( signal.SIGXFSZ, handler )
#signal.signal( signal.SIG_DFL, handler )
signal.signal( signal.SIG_IGN, handler )


print time.ctime(), " - Started"

while True:
  time.sleep( 1 )
  print " Tick:", time.ctime()
</code></pre>
</div>
<span class="comment-copy">Are you wanting to log other exits, or just when <code>ctrl + c</code> is used?</span>
<span class="comment-copy">You want to read about python exception handling.  <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/errors.html</a></span>
<span class="comment-copy">It would be more helpful if you told us why your code is "force exiting"</span>
<span class="comment-copy">@lsowen I edited the question</span>
<span class="comment-copy">@notorious I edited the question</span>
<span class="comment-copy">I edited the question. I was using something similar but does this catch all exiting? such as ctrl + c ?</span>
<span class="comment-copy">You should try running the script and test to see what happens when you send different signals... it's just an indefinite loop that prints the time once a second - and calls the handler for pretty much any signal it receives. In the case of UN*X, for example, a CTRL-C sends signal 2 (signal.SIGINT). In the case of your rephrased question, you likely just want to set SIGINT to be handled by a function like "stop" (which should be a def, not an if, which accepts two arguments).</span>
