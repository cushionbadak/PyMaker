<div class="post-text" itemprop="text">
<p>I wrote some code in Python 2.7.2 and now I may need to switch to 3.4.3, but my code breaks (simply <code>print</code> statements right now, but who knows what else). Is it possible to write the syntax in such a way that it will be compliant with both 2.7.2 and 3.4.3?</p>
<p>I am just starting out with Python and don't want to build habits with one flavor and then have to relearn things with another version later.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, but depending on your code. You have lot of options:</p>
<ul>
<li>Use <a href="https://docs.python.org/2/library/__future__.html" rel="nofollow"><code>from __future__ import ...</code></a> (making your code work with Python 2 &amp; 3 - see e.g. <a href="http://nedbatchelder.com/blog/200910/running_the_same_code_on_python_2x_and_3x.html" rel="nofollow">this</a> and <a href="http://www.dwheeler.com/essays/python3-in-python2.html" rel="nofollow">this</a>)</li>
<li>Use <a href="https://pypi.python.org/pypi/modernize" rel="nofollow"><code>modernize</code></a></li>
<li>Use <a href="http://pythonhosted.org/six/" rel="nofollow"><code>six</code></a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Yes, Python code can be compatible with both Python 2 and 3.</p>
<p>There are 3 options how to do it:</p>
<ul>
<li><p>keep the <strong>source code itself compatible with</strong> both <strong>Python 2 and 3</strong>; this is the most used way</p></li>
<li><p>use <strong>separate code</strong> for Python 2 and 3; generally not very useful, but maybe acceptable for some low-level code. For example <a href="https://github.com/cherrypy/cherrypy/tree/master/cherrypy/wsgiserver" rel="nofollow">CherryPy wsgiserver</a> (notice the files <code>wsgiserver2.py</code> and <code>wsgiserver3.py</code>).</p></li>
<li><p>write code in either Python 2 or Python 3 and use automatic tool like 2to3 or 3to2 for <strong>translation</strong> to the other version.</p></li>
</ul>
<p>When Python 3 was first released the 2to3 way was the preferred one. You can find this in <a href="https://docs.python.org/3/whatsnew/3.0.html#porting-to-python-3-0" rel="nofollow">Whatâ€™s New In Python 3.0</a>: <em>"It is not recommended to try to write source code that runs unchanged under both Python 2.6 and 3.0."</em> But times have changed since then. Some things were introduced that made writing code for both Python 2 and 3 much easier - for example the <code>u""</code> syntax in Python 3.3. Also the tool 3to2 did not get much updates since 2010...</p>
<p>When writing code that works unchanged on both Python 2 and 3 some <strong>compatibility code</strong> with few simple <code>if</code>s may be needed; look for example at <a href="https://github.com/mitsuhiko/flask/blob/master/flask/_compat.py" rel="nofollow">flask/_compat.py</a>. If this isn't sufficient then use <a href="http://pythonhosted.org/six/" rel="nofollow">six</a>.</p>
<p>Some resources how to write code working on both Python 2 and 3:</p>
<ul>
<li><p><a href="http://lucumr.pocoo.org/2011/1/22/forwards-compatible-python/" rel="nofollow">http://lucumr.pocoo.org/2011/1/22/forwards-compatible-python/</a></p></li>
<li><p><a href="http://python-future.org/compatible_idioms.html#essential-syntax-differences" rel="nofollow">http://python-future.org/compatible_idioms.html#essential-syntax-differences</a></p></li>
<li><p><a href="http://python3porting.com/noconv.html" rel="nofollow">http://python3porting.com/noconv.html</a></p></li>
<li><p><a href="https://docs.python.org/3/howto/pyporting.html" rel="nofollow">https://docs.python.org/3/howto/pyporting.html</a></p></li>
</ul>
<p>The Python 2/3 problem applies mostly for libraries, shared code and Python 2 projects that are being upgraded to Python 3. If you are starting a project that is not a library then just go with <strong>Python 3</strong> if possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are already some great answers above. A quick fix for your print problems would be to make use of the <strong>future</strong> module which backports some Python 3 features to Python 2.</p>
<p>I'd recommend as a minimum writing you're Python 2.7 code with the new print function. To do this import the new print function from <strong>future</strong>. i.e.</p>
<p><code>from __future__ import print_function</code></p>
<p>You will now get syntax errors in Python 2 using print as:</p>
<p><code>print x</code></p>
<p>and will now have to do:</p>
<p><code>print(x)</code></p>
<p>Other solutions like 2to3 and six exist, but these might be a bit complicated at the moment, especially as you are learning Python. </p>
</div>
<span class="comment-copy">Short answer: yes</span>
<span class="comment-copy">There are tools like <a href="https://docs.python.org/2/library/2to3.html" rel="nofollow noreferrer">2to3</a> or <a href="https://pypi.python.org/pypi/six" rel="nofollow noreferrer">six</a>.</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/howto/pyporting.html" rel="nofollow noreferrer">docs.python.org/3/howto/pyporting.html</a>. <i>"and who knows what else"</i> - see <a href="https://docs.python.org/3/whatsnew/3.0.html" rel="nofollow noreferrer">docs.python.org/3/whatsnew/3.0.html</a>. Unless you have some good reason otherwise (e.g. a library you <i>must have</i> that's not 3.x compliant), just use 3.x.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/11372190/python-2-and-python-3-dual-development">Python 2 and Python 3 dual development</a></span>
<span class="comment-copy">So as I understand it, there are tools I can use to change one form of the code to another form automatically ... but I was originally asking if I could adopt a style of programming for which it will always be both 2.7.x and 3.4.x compliant.</span>
<span class="comment-copy">No, please read all the info we gave you, including also the link @jonrsharpe gave. It's not only about tools, is all about what you want to do: works with both versions, drop python2, etc.</span>
