<div class="post-text" itemprop="text">
<p>I'm looking to break down the reverse() function and write it out in code for practice. I eventually figured out how to do it (step thru the original list backwards and append to the new 'reversed' list) but wondering why this doesn't work.</p>
<pre><code>def reverse(list):
    newlist = []
    index = 0
    while index &lt; len(list):
        newlist[index] = list[(len(list)) - 1 - index]
        index = index + 1
    return newlist

list = [1, 2, 3, 4, 5]
print(reverse(list))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python, you cannot access/update an element of a list, if the index is not in the range of 0 and length of the list - 1.</p>
<p>In your case, you are trying to assign to element at 0, but the list is empty. So, it doesn't have index 0. That is why it fails with the error,</p>
<blockquote>
<p>IndexError: list assignment index out of range</p>
</blockquote>
<p>Instead, you can use <code>append</code> function, like this</p>
<pre><code>    newlist.append(list[(len(list)) - 1 - index])
</code></pre>
<p>Apart from that, you can use <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer"><code>range</code></a> function to count backwards like this</p>
<pre><code>for index in range(len(list) - 1, -1, -1):
    newlist.append(list[index])
</code></pre>
<p>you don't even have to increment the <code>index</code> yourself, <code>for</code> loop takes care of it.</p>
<hr/>
<p>As suggested by @abarnert, you can actually iterate the list and add the elements at the beginning every time, like this</p>
<pre><code>&gt;&gt;&gt; def reverse(mylist):
...     result = []
...     for item in mylist:
...         result.insert(0, item)
...     return result
... 
&gt;&gt;&gt; reverse([1, 2, 3, 4, 5])
[5, 4, 3, 2, 1]
</code></pre>
<hr/>
<p>If you want to create a new reversed list, you may not have to write a function on your own, instead you can use the <a href="https://stackoverflow.com/q/509211/1903116">slicing notation</a> to create a new reversed list, like this</p>
<pre><code>&gt;&gt;&gt; mylist = [1, 2, 3, 4, 5]
&gt;&gt;&gt; mylist[::-1]
[5, 4, 3, 2, 1]
</code></pre>
<p>but this doesn't change the original object.</p>
<pre><code>&gt;&gt;&gt; mylist = [1, 2, 3, 4, 5]
&gt;&gt;&gt; mylist[::-1]
[5, 4, 3, 2, 1]
&gt;&gt;&gt; mylist
[1, 2, 3, 4, 5]
</code></pre>
<p>if you want to change the original object, just assign the slice back to the slice of the original object, like this</p>
<pre><code>&gt;&gt;&gt; mylist
[1, 2, 3, 4, 5]
&gt;&gt;&gt; mylist[:] = mylist[::-1]
&gt;&gt;&gt; mylist
[5, 4, 3, 2, 1]
</code></pre>
<hr/>
<p><strong>Note:</strong> <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow noreferrer"><code>reversed</code></a> actually returns a reverse iterator object, not a list. So, it doesn't build the entire list reversed. Instead it returns elements one by one when iterated with <a href="https://docs.python.org/3/reference/expressions.html#generator.__next__" rel="nofollow noreferrer"><code>next</code></a> protocol.</p>
<pre><code>&gt;&gt;&gt; reversed([1, 2, 3, 4, 5])
&lt;list_reverseiterator object at 0x7fdc118ba978&gt;
&gt;&gt;&gt; for item in reversed([1, 2, 3, 4, 5]):
...     print(item)
...     
... 
5
4
3
2
1
</code></pre>
<p>So, you might want to make it a <a href="https://docs.python.org/3/reference/expressions.html#yieldexpr" rel="nofollow noreferrer">generator function</a>, like this</p>
<pre><code>&gt;&gt;&gt; def reverse(mylist):
...     for index in range(len(mylist) - 1, -1, -1):
...         yield mylist[index]
...     
... 
&gt;&gt;&gt; reverse([1, 2, 3, 4, 5])
&lt;generator object reverse at 0x7fdc118f99d8&gt;
</code></pre>
<p>So the <code>reverse</code> function returns a generator object. If you want a list, then you can create one with <code>list</code> function, like this</p>
<pre><code>&gt;&gt;&gt; list(reverse([1, 2, 3, 4, 5]))
[5, 4, 3, 2, 1]
</code></pre>
<p>if you are just going to process it one by one, then iterate it with a <code>for</code> loop, like this</p>
<pre><code>&gt;&gt;&gt; for i in reverse([1, 2, 3, 4, 5]):
...     print(i)
...     
... 
5
4
3
2
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First off don't override build-ins (<code>list</code> in your case) second <code>newlist</code> has a <code>len</code> of 0 therefore cannot be accessed by index.</p>
<pre><code>def reverse(mylist):
    newlist = [0] * len(mylist)
    index = 0
    while index &lt; len(mylist):
        newlist[index] = mylist[(len(mylist)) - 1 - index]
        index = index + 1
    return newlist

mylist = [1, 2, 3, 4, 5]
print(reverse(mylist))
</code></pre>
<p>you can create a list with values of the same lenght as your input list like so</p>
<pre><code>newlist = [0] * len(mylist)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to use <code>list.append</code>. <code>newlist[0]</code> is a valid operation, if the list has atleast one element in it, but <code>newlist</code> is empty in this very  first iteration. Also, <code>list</code> is not a good name for a variable, as there is a python builtin container with the same name:</p>
<pre><code>def reverse(lst):
    newlist = []
    index = 0
    while index &lt; len(lst):
        newlist.append(lst[(len(list)) - 1 - index])
        index += 1
    return newlist

list = [1, 2, 3, 4, 5]
print(reverse(list))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't assign to an arbitrary index for a 0-length list. Doing so raises an IndexError. Since you're assigning the elements in order, you can just do an append instead of an assignment to an index:</p>
<pre><code>newlist.append(l[(len(l)) - 1 - index])
</code></pre>
<p>Append modifies the list and increases its length automatically.</p>
<p>Another way to get your original code to work would be to change the initialization of <code>newlist</code> so that it has sufficient length to support your index operations:</p>
<pre><code>newlist = [None for _ in range(len(l))]
</code></pre>
<p>I would also like to note that it's not a good idea to name things after built-in types and functions. Doing so shadows the functionality of the built-ins.</p>
</div>
<div class="post-text" itemprop="text">
<p>To write the function you're trying to write, see <a href="https://stackoverflow.com/a/29597259/908494">thefourtheye's answer</a>.</p>
<p>But that isn't how <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer"><code>reverse</code></a> works, or what it does. Instead of creating a new list, it modifies the existing list in-place.</p>
<p>If you think about it, that's pretty easy: just go through half the indices, for each index N, swap the Nth from the left and the Nth from the right.*</p>
<p>So, sticking with your existing framework:</p>
<pre><code>def reverse(lst):
    index = 0
    while index &lt; len(lst)/2:
        lst[index], lst[len(lst) - 1 - index] = lst[len(lst) - 1 - index], lst[index]
        index = index + 1
</code></pre>
<hr/>
<p>As a side note, using <code>while</code> loops like this is almost always a bad idea. If you want to loop over a range of numbers, just use <code>for index in range(len(lst)):</code>. Besides reducing three lines of code to one and making it more obvious what you're doing, it removes multiple places where you could make a simple but painful-to-debug mistake.</p>
<p>Also, note that in most cases, in Python, it's easier to use a negative index to mean "from the right edge" than to do the math yourself, and again it will usually remove a possible place you could easily make a painful mistake. But in this particular case, it might not actually be any less error-prone…</p>
<hr/>
<p><sub>* You do have to make sure you think through the edge cases. It doesn't matter whether for odd lists you swap the middle element with itself or not, but just make sure you don't round the wrong way and go one element too far or too short. Which is a great opportunity to learn about how to write good unit tests…</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>probably check this out:</p>
<pre><code>def reverse(lst):
     newList = []
     countList = len(lst) - 1
     for x in range(countList,-1,-1):

         newList.append(lst[x])
     return newList

def main():
    lst = [9,8,7,6,5,4,2]
    print(reverse(lst))

main()
</code></pre>
</div>
<span class="comment-copy"><code>wondering why this doesn't work</code> - Please explain the problem clearly.</span>
<span class="comment-copy"><code>list</code> is a reserved keyword in python - <b>do not</b> use it as a variable!</span>
<span class="comment-copy">Note that the built-in <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer"><code>reverse</code></a> isn't a function, it's a method of <code>list</code>, and it modifies the list in-place, rather than building a new one. If you're thinking of the function <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow noreferrer"><code>reversed</code></a>, that's more interesting—but it doesn't build a new list either; it just returns a reverse-iterator over the existing list.</span>
<span class="comment-copy">Some great ideas on how to rethink his code instead of just mechanically fix it. One other suggestion you might want to make is <code>for value in mylist: newlist.insert(0, value)</code>, to show how you can often simplify things by turning them around (no need to calculate <code>len(lst) - index - 1</code> if you just insert in reverse order instead of iterating in reverse order).</span>
<span class="comment-copy">@abarnert Ah, thanks :-) Its a nice suggestion. I edited to include it. Please check :-)</span>
<span class="comment-copy">@thefourtheye thanks!!!! this is awesome!!!</span>
