<div class="post-text" itemprop="text">
<p>Reading the definition of the bin() function in Python, the officicial documentation (3.4) says, that the binary string returned by bin() is a valid Python expression.</p>
<p>This has made me wonder: can a function return an invalid Python expression ? And what exactly is the definition of an valid/invalid Python expression ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Functions do <strong>not</strong> return expressions. They return <em>values</em>. What the documentation says is that <em>the value</em> returned by <code>bin</code> is a <em>string</em> that <em>represents</em> a valid python expression. In fact the returned value represents a binary literal.</p>
<p>You can check whether a string is a valid expression by evaluating it using <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow"><code>eval</code></a>:</p>
<pre><code>eval(text)
</code></pre>
<p><strong>Warning:</strong> never call <code>eval</code> on contents that you don't control (e.g. user provided strings) and avoid using it in general. It's a security hazard.</p>
<p><strong>Note:</strong>  There's also a <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval</code></a> that is safer (i.e. when executed it will not anything bad so you can use it on user-provded text etc.) but only works for literal expressions (i.e. expressions without variables/method or function calls. Only literals and operators)</p>
<p>A better way to check it is by parsing it using the <a href="https://docs.python.org/3/library/ast.html#ast.parse" rel="nofollow"><code>ast.parse</code></a> function:</p>
<pre><code>ast.parse(text, mode='eval')
</code></pre>
<p>The <code>mode='eval'</code> specifies to parse the content as an expression.</p>
<p>This is better because it avoids to execute the expression. If the function raises an exception is because the syntax isn't valid. If it succeeds then the text represents a valid python expression:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.parse('1+', mode='eval')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python3.4/ast.py", line 35, in parse
    return compile(source, filename, mode, PyCF_ONLY_AST)
  File "&lt;unknown&gt;", line 1
    1+
     ^
SyntaxError: unexpected EOF while parsing
&gt;&gt;&gt; ast.parse('1+1', mode='eval')
&lt;_ast.Expression object at 0x7f10376c4e10&gt;
</code></pre>
<p>So you could use something like the following:</p>
<pre><code>def is_valid_expr(expr):
    try:
        ast.parse(expr, mode='eval')
    except SyntaxError:
        return False
    else:
        return True
</code></pre>
<p>as in:</p>
<pre><code>if is_valid_expr(some_text):
    print("It's valid!")
else:
    print("It's invalid!")
</code></pre>
<hr/>
<p>Formally a valid expression is defined by the <a href="https://docs.python.org/3/library/ast.html#abstract-grammar" rel="nofollow">python grammar</a> (see the <code>expr</code> non terminal). The <code>ast.parse</code> function uses that grammar to parse its input.</p>
<hr/>
<p><strong>Note:</strong> using <code>ast.parse</code> you can check whether a string is valid python <em>statement</em> or generic code. Just use <code>mode='single'</code> for a single statement and <code>mode='exec'</code> for generic code.</p>
</div>
<div class="post-text" itemprop="text">
<p>A "valid expression" is a string that can be <a href="https://docs.python.org/2/library/functions.html#eval" rel="nofollow"><code>eval()</code></a>'d -- or <a href="https://docs.python.org/2/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval()</code></a> (for literals).</p>
<hr/>
<pre><code>&gt;&gt;&gt; bin(20)
'0b10100'
</code></pre>
<p><code>0b10100</code> is a valid literal:</p>
<pre><code>&gt;&gt;&gt; ast.literal_eval(bin(20))
20
&gt;&gt;&gt; ast.literal_eval(bin(20)) == 20
True
</code></pre>
<p>OTOH, <code>b10100</code> isn't:</p>
<pre><code>&gt;&gt;&gt; ast.literal_eval("b10100") == 20
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/home/sylvain/local/lib/python3.3/ast.py", line 86, in literal_eval
    return _convert(node_or_string)
  File "/home/sylvain/local/lib/python3.3/ast.py", line 85, in _convert
    raise ValueError('malformed node or string: ' + repr(node))
ValueError: malformed node or string: &lt;_ast.Name object at 0x7fdcefd9b9d0&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It means the result can be evaluated either through <code>eval</code> or if entered directly. For example:</p>
<pre><code>&gt;&gt; bin(20)
'0b10100'

&gt;&gt;&gt; 0b10100
20

&gt;&gt;&gt; eval('0b10100')
20
</code></pre>
<p>In general a valid expression in programming languages is something that returns a result, without having syntax errors. In python <code>eval</code> accepts a string containing a expression according to the definition:</p>
<blockquote>
<p>eval(expression[, globals[, locals]])</p>
</blockquote>
<p>If the expression is invalid, a <code>SyntaxError</code> is thrown:</p>
<pre><code>&gt;&gt;&gt; eval('1+')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1
    1+
SyntaxError: unexpected EOF while parsing
</code></pre>
<p>We have to pay attention, that some expressions may have illegal values but are still considered valid, like <code>1 / 0</code>:</p>
<pre><code>&gt;&gt;&gt; eval('1/0')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1, in &lt;module&gt;
ZeroDivisionError: integer division or modulo by zero
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>here you see in this example:</p>
<pre><code>&gt;&gt;&gt; bin(4)
'0b100'
&gt;&gt;&gt;
</code></pre>
<p>The binary is prefixed with <code>0b</code> that represent a valid python Expression for Binary Number in python</p>
</div>
<div class="post-text" itemprop="text">
<p>For more info on what an expression is see <a href="https://stackoverflow.com/questions/4782590/what-is-an-expression-in-python">What is an expression in Python?</a> but it just mean's its a valid string representation of a binary number in python.</p>
</div>
<span class="comment-copy">What it means is that the contents of the string are valid python code. If you return a string from a function with the contents <code>"forty two"</code>, that is not a valid python expression. If you return a string with the contents <code>"0b101010"</code>, then that is a valid python expression, because you can write <code>x=0b101010</code> in python and it will run.</span>
<span class="comment-copy">So a string in itself is a valid Python expression, since it is a value. But in this case, the contents of the string represent a valid Python expression ?</span>
<span class="comment-copy">@NicolasLykkeIversen A string is <b>not</b> an expression. A string is a value, period. You are confusing the <i>syntax</i> of a program with its <i>semantic</i>. The term expression <i>only</i> refers to the <i>syntax</i>. However when a function is executed it <i>only</i> handles <i>values</i>, not expressions.  It so happens the content of a string value can represent a valid <i>syntactic</i> term. You could define a graphical representation for python programs, in which case images would be expressions and things that return image values could return image values whose contents are valid expressions.</span>
<span class="comment-copy">What exactly is the definition of an expression then ? I've read that an expression is anything that represents a value in Python, so a value is an expression...". Thank you for your help.</span>
<span class="comment-copy">@NicolasLykkeIversen Do you understand when I say the term <i>syntax</i>? The word expression refers to a <i>syntactic</i> term in a given language. A syntactic term is defined by a <i>grammar</i> (see the link I've put in the answer). If you cannot understand this you should read something about <i>formal languages</i> and <i>parsing</i>. Then you'll probably have a clearer understand of the distinction between expressions and values.</span>
<span class="comment-copy">Thank you, I will look into this. Could you recommend a good book ?</span>
<span class="comment-copy">Thank you. How do you know this ? Googling "What is a valid Python expression" doesn't bring much useful ?</span>
