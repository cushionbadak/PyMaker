<div class="post-text" itemprop="text">
<p>I want to test appendRole which is called getFileAsJson to read file with open.
My problem is that I don't know which open will be next. There are many if/elif.</p>
<pre><code>def appendRole(self, hosts=None, _newrole=None, newSubroles=None, undoRole=False, config_path=None):
    """ Same as changeRole but keeps subroles """

    if hosts is None:
        hosts = ["127.0.0.1"]
    if newSubroles is None:
        newSubroles = {}
    if config_path is None:
        config_path = self.config_path


    with self._lock:
        default = {}
        data = self.getFileAsJson(config_path, default)
        ...................
        ...................
        ...................
        ...................   

        data1 = self.getFileAsJson(self.config_path_all, {"some"})
        data2 = self.getFileAsJson(self.config_path_core, {"something"})
        ...................   
        ...................   
        ...................   

def getFileAsJson(self, config_path, init_value):
    """ 
        read file and return json data
        if it wasn't create. Will created.
    """
    self.createFile(config_path, init_value)
    try:
        with open(config_path, "r") as json_data:
            data = json.load(json_data)
        return data
    except Exception as e:
        self.logAndRaiseValueError(
            "Can't read data from %s because %s" % (config_path, e))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Even you can find an answer to your question at <a href="https://stackoverflow.com/a/26830397/4101725">Python mock builtin 'open' in a class using two different files</a> I would like encourage you to change your approach to write tests for <code>getFileAsJson()</code> and then trust it. </p>
<p>To test <code>appendRole()</code> use <a href="https://docs.python.org/3/library/unittest.mock.html#patch" rel="nofollow noreferrer"><code>mock.patch</code></a> to patch <code>getFileAsJson()</code>, then by <code>side_effect</code> attribute you can instruct the mock to return exactly what you need for your test.  </p>
<p>So, after some test on <code>getFileAsJson()</code> where you can use <a href="https://docs.python.org/3/library/unittest.mock.html#mock-open" rel="nofollow noreferrer"><code>mock_open()</code></a> to mock <code>open</code> builtin (maybe you need to patch <code>createFile()</code> too). Your <code>appendRole()</code>'s test looks like something like this:</p>
<pre><code>@mock.patch('mymodule.getFileAsJson', autospec=True)
def test_appendRole(self, mock_getFileAsJson)
    mock_getFileAsJson.side_effect = [m_data, m_data1,m_data2,...]
    # where m_data, m_data1,m_data2, ... is what is supposed 
    # getFileAsJson return in your test
    # Invoke appendRole() to test it 
    appendRole(bla, bla)
    # Now you can use mock_getFileAsJson.assert* family methods to
    # check how your appendRole call it.
    # Moreover add what you need to test in appendRole()
</code></pre>
</div>
