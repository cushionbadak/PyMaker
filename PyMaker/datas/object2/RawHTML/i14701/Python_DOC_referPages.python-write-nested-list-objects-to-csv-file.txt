<div class="post-text" itemprop="text">
<p>I'm trying to write data from a list of lists to a csv file. This is a simplified version of what I have</p>
<pre><code>class Point(object): 
    def __init__(self, weight, height):
        self.weight = weight
        self.height = height
    def get_BMI(self):
        return (self.weight * self.height) / 42  # this is not how you calculate BMI but let's say

myList = [[Point(30, 183)],[Point(63, 153)]]
</code></pre>
<p>Because of the way the data is set up, I store the points in a nested loop. If I wanted to access the first point objectâ€™s BMI, I would type</p>
<pre><code>myList[0][0].get_BMI()
</code></pre>
<p>I want to write each point's BMI to a CSV (delimited by a comma). How do I do that?</p>
<p>Here's how I thought but it isn't exactly straight forward:</p>
<pre><code>import csv
with open('output.csv', 'w') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerows(myList)
</code></pre>
<p>It doesn't return any error however it doesn't actually create the CSV file either. Also I want to write the values in <code>myList[i][j].get_BMI()</code> to file. I don't have a problem with permissions because I use Spyder (python IDE) as root. Right now I'm just running the script through the Spyder console but it should still work and output the CSV file.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/csv.html#writer-objects" rel="nofollow"><code>writerows</code></a> expects a list of list of strings or numbers. You should start by creating a list with the BMI values so that they can get written into your <code>csv</code> file: </p>
<pre><code>import csv
BMIs = [[point.get_BMI() for point in points] for points in myList]
with open('output.csv', 'w') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerows(BMIs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are three issues:</p>
<ol>
<li><p>The nested lists must be flattened.  To accomplish this, use <a href="http://1.%20https://docs.python.org/2/library/itertools.html#itertool-functions">itertools.chain.from_iterable</a>. </p></li>
<li><p>The row data for the CSV must be customized.  To accomplish this, use <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehensions</a>.</p></li>
<li><p>output.csv is not being created.  I suspect that the output.csv is being created but being placed in an unexpected location.  You could try hardcoding a full path for testing to see if this is the case.  </p></li>
</ol>
<p>Here is code that demonstrates #1 and #2:</p>
<pre><code>import csv
from itertools import chain

with open('output.csv', 'w') as csvfile:
    writer = csv.writer(csvfile)
    flattenedList = chain.from_iterable(myList)

    writer.writerows((pt.weight, pt.height, pt.get_BMI()) for pt in flattenedList)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this with <code>writerows</code>, as it expects a list of <code>rows</code> - each <code>row</code> should be formatted as per the <code>dialect</code> parameter to <code>csv.writer</code>, which can be ignored in this case without fear of any backfiring.</p>
<p>So <code>writerows</code> can take a structure that looks like <code>myList</code>. The problem is that you need to access all the points and grab their BMIs (this can be done in a list comprehension)</p>
<p>To illustrate how writerows can be used (and to add a number to each point, so that all your rows don't have just one entry (which would be frustrating), I added the call to enumerate.</p>
<p>Therefore, you no longer need complex loops or any such. Enjoy:</p>
<pre><code>myList = [[Point(30, 183)],[Point(63, 153)]]

with open('output.csv', 'w') as outfile:
    writer = csv.writer(outfile)
    writer.writerows(enumerate(p.get_BMI() for p in itertools.chain.from_iterable(myList)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>myList = [[Point(30, 183)],[Point(63, 153)]]

with open('output.csv', 'w') as outfile:
    writer = csv.writer(outfile,delimiter=',')
    for i in myList:
         writer.writerow([i]) 
</code></pre>
</div>
<span class="comment-copy">thanks. your solution worked.</span>
<span class="comment-copy">For point 3, I believe that <code>csv</code> is silently ignoring object that are neither a string nor a number and then decided to not write anything.</span>
<span class="comment-copy">@FrancisColas The <code>open</code> call just by itself will create an empty file and the objects will have a string representation such as <code>&lt;__main__.Point object at 0x022E02D0&gt;</code> that <code>csv</code> will use by default (via the equivalent of the <code>str</code> operator).</span>
