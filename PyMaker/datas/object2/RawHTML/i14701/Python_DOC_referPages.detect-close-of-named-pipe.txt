<div class="post-text" itemprop="text">
<p>I have a C program that writes data to a named pipe and a Python program that reads data from the named pipe, like this:</p>
<pre><code>p = open('/path/to/named/pipe', 'r')
...
data = p.read(size)
</code></pre>
<p>When the C program exits, it closes the pipe.</p>
<p>How can I detect this from the Python side?  I've tried installing a handler for SIGPIPE, but it seems that SIGPIPE only happens when attempting to write to a closed pipe, not read from it.  I also expected that <code>p.read(size)</code> might return a length-zero string because of the EOF at the other end, but actually it just hangs waiting for data.</p>
<p>How can I detect this situation and handle it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/select.html" rel="nofollow noreferrer">the <code>select</code> module</a> to monitor the state of your pipe. On Linux (where <a href="https://docs.python.org/3/library/select.html#select.poll" rel="nofollow noreferrer"><code>select.poll()</code></a> is available, the following code will detect the presence of a closed pipe:</p>
<pre><code>import select

# ...

poller = select.poll()
# Register the "hangup" event on p
poller.register(p, select.POLLHUP)

# Call poller.poll with 0s as timeout
for descriptor, mask in poller.poll(0):
    # Can contain at most one element, but still:
    if descriptor == p.fileno() and mask &amp; select.POLLHUP:
        print('The pipe is closed on the other end.')
        p.close()
</code></pre>
<p>Analogous methods exist for other OS as well that can detect such situations.</p>
<p>The reason why it hangs when calling <code>read</code>, is because the IO is blocking. You can turn it into non-blocking (and have <code>read</code> return an empty string) by using <a href="https://docs.python.org/3/library/os.html#os.set_blocking" rel="nofollow noreferrer"><code>os.set_blocking</code></a>, but this would still not allow you to detect when the pipe on the other end is closed.</p>
</div>
<span class="comment-copy">If the Python is hanging around, it almost certainly means some process, possibly itself, still has the pipe open for writing.  If all the writers close the pipe, all the readers (normally, 'all' is just one reader) will get EOF on their next attempt to read.  Note that if the Python opens the pipe for read and write, it is a writer and will never get EOF.</span>
<span class="comment-copy">You can place <code>nonblock</code> for that file descriptor.</span>
<span class="comment-copy">I think the problem here is that using <code>open(...,'r')</code> doesn't do the right thing; it's necessary to use <code>os.open(..., os.O_RDONLY)</code>.</span>
