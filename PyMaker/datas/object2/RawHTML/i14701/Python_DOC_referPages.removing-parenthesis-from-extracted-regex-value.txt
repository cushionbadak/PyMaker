<div class="post-text" itemprop="text">
<p>Here is my input and result for regex:</p>
<pre><code>temp2 = '(LEFT-WALL)(who)(is.v)(the)(di(rect)or.n)(of)(Inceptio)(RIGHT-WALL)'
print regex.findall(r'\([^\)\(]*+(?:(?R)[^\)\(]*)*+\)', temp2)
</code></pre>
<p>result :</p>
<pre><code>  ['(LEFT-WALL)', '(who)', '(is.v)', '(the)', '(di(rect)or.n)', '(of)', '(Inceptio)', '(RIGHT-WALL)']
</code></pre>
<p>I want this sort of result:;</p>
<pre><code> ['LEFT-WALL', 'who', 'is.v', 'the', 'di(rect)or.n', 'of', 'Inceptio', 'RIGHT-WALL']
</code></pre>
<p>any change in regex?</p>
</div>
<div class="post-text" itemprop="text">
<p>As an alternative without using regex you can do the job just with <code>str.split()</code> and <code>str.strip()</code> methods :</p>
<pre><code>&gt;&gt;&gt; [i.strip('()') for i in temp2.split(')(')]
['LEFT-WALL', 'who', 'is.v', 'the', 'di(rect)or.n', 'of', 'Inceptio', 'RIGHT-WALL']
</code></pre>
<p>Or with regex you can use <a href="http://www.regular-expressions.info/lookaround.html" rel="nofollow"><em>look-around</em></a> in your regex :</p>
<pre><code>&gt;&gt;&gt; re.findall(r'(?&lt;=\()(.*?)(?=\)\(|\)$)', temp2)
['LEFT-WALL', 'who', 'is.v', 'the', 'di(rect)or.n', 'of', 'Inceptio', 'RIGHT-WALL']
</code></pre>
<p><em>Note</em> that the logic is simple you just need to match the string that is between open parenthesis <code>(</code> and a close parenthesis that followed by an open bracket <code>)(</code> .</p>
</div>
<div class="post-text" itemprop="text">
<p>I feel you do not need any regex for the sample string you provided:</p>
<pre><code>temp2 = '(LEFT-WALL)(who)(is.v)(the)(di(rect)or.n)(of)(Inceptio)(RIGHT-WALL)'
if temp2[0:1] == "(" and temp2[-1:] == ")":
    print temp2[1:-1].split(")(")
</code></pre>
<p>Output of the <a href="http://goo.gl/xzA6hi" rel="nofollow">sample program</a>:</p>
<pre><code>['LEFT-WALL', 'who', 'is.v', 'the', 'di(rect)or.n', 'of', 'Inceptio', 'RIGHT-WALL'] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to match either strings that are between <code>(</code> and <code>)(</code>, or between <code>)(</code> and <code>)</code>. That way you avoid matching strings like <code>'(rect)'</code> in <code>'(di(rect)or.n)'</code>. You can do that by using <a href="https://docs.python.org/3/library/re.html#lookahead%20assertion" rel="nofollow">lookaround assertions</a> since they don't consume the string searched. </p>
<p><strong>Lookahead assertion</strong>: </p>
<blockquote>
<p><code>(?=...)</code>
      Matches if <code>...</code> matches next, but doesn’t consume any of the string. 
  This is called a lookahead assertion. For example, <code>Isaac (?=Asimov)</code> will match <code>'Isaac '</code> only if it’s followed by <code>'Asimov'</code>.</p>
</blockquote>
<p><strong>Positive lookbehind assertion</strong>:</p>
<blockquote>
<p><code>(?&lt;=...)</code>
      Matches if the current position in the string is preceded by a match for ... that ends at the current position. This is called a
  positive lookbehind assertion. <code>(?&lt;=abc)def</code> will find a match in
  <code>abcdef</code>, since the lookbehind will back up 3 characters and check if
  the contained pattern matches.</p>
</blockquote>
<p>In the code below i use <code>re.VERBOSE</code> flag to make it more readable.</p>
<pre><code>pattern = re.compile(r"""

(?&lt;=  \(  )   .+?  (?=  \)\(  )   # Matches string after a '(' and before a ')('

|                                 # or...

(?&lt;=  \)\(  )   .+?  (?=  \)  )   # Matches string after a ')(' and before a ')'    

""", re.VERBOSE)


print (re.findall(pattern, temp2))
</code></pre>
</div>
