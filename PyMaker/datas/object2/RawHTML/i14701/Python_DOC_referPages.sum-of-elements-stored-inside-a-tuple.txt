<div class="post-text" itemprop="text">
<p>Given a tuple containing a bunch of integer elements, how can one find the sum of all the elements?</p>
<p>For example, if I have a list of tuples:</p>
<pre><code>li = [(1, 2), (1, 3), (2, 3)]
</code></pre>
<p>How can I get something like this:</p>
<pre><code>[3, 4, 5]
</code></pre>
<p>where 3, 4 and 5 is the total sum of each of the three tuples respectively?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/functions.html#map"><code>map</code></a> and <a href="https://docs.python.org/2/library/functions.html#sum"><code>sum</code></a> function like this</p>
<pre><code>&gt;&gt;&gt; li = [(1, 2), (1, 3), (2, 3)]
&gt;&gt;&gt; map(sum, li)
[3, 4, 5]
</code></pre>
<p>Alternatively you can use <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions">list comprehension</a>, like this</p>
<pre><code>&gt;&gt;&gt; [sum(tup) for tup in li]
[3, 4, 5]
</code></pre>
<p><strong>Note:</strong> I personally prefer the list comprehension version, because <a href="https://docs.python.org/3/library/functions.html#map"><code>map</code></a> function in Python 3.x will return an iterable <code>map</code> object, which needs to be explicitly converted to a list, like this <code>list(map(sum, li))</code>.</p>
<pre><code>&gt;&gt;&gt; li = [(1, 2), (1, 3), (2, 3)]
&gt;&gt;&gt; map(sum, li)
&lt;map object at 0x7f3dc25bb0f0&gt;
&gt;&gt;&gt; type(map(sum, li))
&lt;class 'map'&gt;
&gt;&gt;&gt; list(map(sum, li))
[3, 4, 5]
</code></pre>
<p>But list comprehension will give a list in both Python 2.x and Python 3.x.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>.</p>
<pre><code>&gt;&gt;&gt; li = [(1, 2), (1, 3), (2, 3)]
&gt;&gt;&gt; [x+y for (x,y) in li]
[3, 4, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For beginner:</p>
<ol>
<li>Create result variable which type is list.</li>
<li>Iterate every item from the give list by <code>for</code> loop.</li>
<li>As every item is tuple so again iterate item from the step 2 and set sum of item to 0.</li>
<li>Add sum.</li>
<li>Append sum to result variable.</li>
</ol>
<p>Demo: </p>
<pre><code>&gt;&gt;&gt; li = [(1, 2), (1, 3), (2, 3)]   # Given Input
&gt;&gt;&gt; result = []                     # Step 1
&gt;&gt;&gt; for i in li:                    # Step 2
...     tmp_sum = 0                 # Step 3  
...     for j in i:                 # Step 3
...         tmp_sum += j            # Step 4 
...     result.append(tmp_sum)      # Step 5 
... 
&gt;&gt;&gt; print result
[3, 4, 5]
</code></pre>
<hr/>
</div>
<div class="post-text" itemprop="text">
<pre><code>ls= [(1,2), (3,4)]
finallist = []
for tuple in ls:
     listt = list(tuple)
     summ = 0
     for m in listt:
         summ+=m
     finallist.append(summ)
print(finallist) #[3,7]
</code></pre>
</div>
<span class="comment-copy">How would you approach this? Is there any code you can show us that shows us <i>your</i> attempt?</span>
<span class="comment-copy">This is the error I encounter when I use the 'map' and 'sum' function together: TypeError: 'int' object is not callable</span>
<span class="comment-copy">@ManasChaturvedi Please edit the actual code you tried and the traceback will also help debug the problem.</span>
<span class="comment-copy">Yes, the code works just fine now. Thanks !</span>
<span class="comment-copy">I tried 2 pandas shapes (2 item tuples) to sum but error is  TypeError: 'list' object is not callable</span>
<span class="comment-copy">While this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.</span>
