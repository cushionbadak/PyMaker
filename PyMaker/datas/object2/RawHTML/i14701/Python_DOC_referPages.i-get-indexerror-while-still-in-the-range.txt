<div class="post-text" itemprop="text">
<p>I am trying to read the rows of a csv file. My file looks like this</p>
<pre><code>Col 1, Col 2, Col3
row11, row12, row13
row21, row22, row23
row31, row32, row33
...
</code></pre>
<p>I use the following command to read the rows</p>
<pre><code>with open('~/data.csv') as f:
    r = csv.DictReader(f)
    for i in range(5):
        print(list(r)[i])
</code></pre>
<p>The output prints the first row, but then it give the out of index error right after.</p>
<pre><code>IndexError                                Traceback (most recent call last)
&lt;ipython-input-15-efcc4f8c760d&gt; in &lt;module&gt;()
      2     r = csv.DictReader(f)
      3     for i in range(5):
----&gt; 4         print(list(r)[i])

IndexError: list index out of range
</code></pre>
<p>I'm guessing I'm making a silly mistake somewhere, but can't spot it. Any ideas on what I am doing wrong and how to fix it?</p>
<p><strong>EDIT:</strong> This is the output of <code>print(list(r))</code>:</p>
<pre><code>[{'Col 1': 'row11', ' Col3': ' row13', ' Col 2': ' row12'}, {'Col 1': 'row21', ' Col3': ' row23', ' Col 2': ' row22'}, {'Col 1': 'row31', ' Col3': ' row33', ' Col 2': ' row32'}, {'Col 1': 'row41', ' Col3': ' row43', ' Col 2': ' row42'}, {'Col 1': 'row51', ' Col3': ' row53', ' Col 2': ' row52'}, {'Col 1': 'row61', ' Col3': ' row63', ' Col 2': ' row62'}, {'Col 1': 'row71', ' Col3': ' row73', ' Col 2': ' row72'}, {'Col 1': 'row81', ' Col3': ' row83', ' Col 2': ' row82'}, {'Col 1': 'row91', ' Col3': ' row93', ' Col 2': ' row92'}, {'Col 1': 'row101', ' Col3': ' row103', ' Col 2': ' row102'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>DictReader(f)</code> just gives you a one time look at your file -- you can only call <code>list</code> on it once, but you call it multiple times because it's within the loop. Later calls return an empty <code>list</code>. Just call <code>list</code> on it outside of the loop and save it in a variable, and you'll be golden.</p>
<p>That is:</p>
<pre><code>r = csv.DictReader(f)
rows = list(r)
for i in range(5):
    print(rows[i])
</code></pre>
<p>Or, don't pull the whole thing into memory at any point:</p>
<pre><code>for row in csv.DictReader(f):
    print row
</code></pre>
<p>If you'd like to keep the index around for other purposes:</p>
<pre><code> for i, row in enumerate(csv.DictReader(f)):
     print i, row
</code></pre>
<p>If you want to get specific rows from an <code>iterator</code> (which <code>csv.DictReader</code> is a special case of) without pulling the whole thing into memory, check out <code>itertools.islice</code> at <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow">https://docs.python.org/3/library/itertools.html</a>. It basically allows <code>list</code>-style slicing on an <code>iterator</code>.</p>
<pre><code>  # prints first five rows
  for row in itertools.islice(csv.DictReader(f), 5):
       print row
</code></pre>
<p>For more sporadic rows: </p>
<pre><code>  needed_row_indices = {2, 5, 20}
  for i, row in enumerate(csv.DictReader(f)):
      if i in needed_row_indices:
          print row
</code></pre>
</div>
<span class="comment-copy">What does <code>print(list(r))</code> look like?</span>
<span class="comment-copy">Thank you very much, while that works for a small example, my problem is that I am working with a big data set, about 10Gb. Any idea on how to avoid loading the whole thing?</span>
<span class="comment-copy">Updated to show how you can avoid pulling the whole thing into memory. @Keivan</span>
<span class="comment-copy">Thank you again. Would you happen to have some idea on how to read several specific rows of the file this way? That was originally my question and I was trying to simplify it, so I got to this point. This solve my question asked above though.</span>
<span class="comment-copy">@Keivan check out <code>itertools</code>, which I explain a little in the post.</span>
<span class="comment-copy">@Keivan, if the rows you need are more sporadically distributed like that, I would suggest you a) build a set of the rows you need -- for example, <code>needed_rows = {2, 5, 20}</code> -- and then b) use the above example with <code>enumerate</code> but only act on the row when <code>i in needed_rows</code></span>
