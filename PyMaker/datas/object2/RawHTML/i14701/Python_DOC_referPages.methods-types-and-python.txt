<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/17493159/should-i-force-python-type-checking">Should I force Python type checking?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>In Python methods are a bit strange, at least compared to other languages. A function, say in C++, goes something like so:</p>
<pre><code>void foo(int i){
    cout &lt;&lt; i*2 &lt;&lt; "\n";
}
</code></pre>
<p>This ensures that the object passed into that function is in fact an integer. However in Python the same function looks like this:</p>
<pre><code>def foo(i):
    print i*2
</code></pre>
<p>This function doesn't require <code>i</code> to be an integer, let alone a number. You could even pass in a string. So my question is: what is the general approach for handling this when writing code? Generally speaking, is it better to check the type and throw an error message if used incorrectly or is it preferred to no check at all and assume the correct type has been passed?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is subjective. The easiest way to ensure that your arguments are of the proper type is with an <code>assert</code> statement -- in your example, something like <code>assert isinstance(i, int), "foo expects an int!"</code> But this isn't strictly necessary -- if it won't run with the erroneous arguments, it'll throw an error all the same.</p>
<p>In short, do what helps you to debug best.</p>
</div>
<div class="post-text" itemprop="text">
<p>With Python, you want to handle this situation by verifying the input with:</p>
<pre><code>try:
   val = int(userInput)
except ValueError:
   print("That's not an int!")
</code></pre>
<p>This is trying to convert the user input to an integer, and if it's unable to be converted, it throws a ValueError.</p>
</div>
<span class="comment-copy">Have you read e.g. <a href="https://docs.python.org/3/glossary.html#term-duck-typing" rel="nofollow noreferrer">docs.python.org/3/glossary.html#term-duck-typing</a>? There are plenty of related questions on SO, too: <a href="http://stackoverflow.com/q/11328920/3001761">stackoverflow.com/q/11328920/3001761</a> is a start.</span>
<span class="comment-copy">Also, checking the type and throwing an error is quite pointless, since it will throw an error anyway if the type is not compatible.</span>
<span class="comment-copy">Seems like you have never heard of a dynamically-typed language. Python is hardly the only one: Javascript and Ruby are two others you may come across, but there are many many more.</span>
<span class="comment-copy">Don't even check the type - just do the calculation. If you think it might fail (due to taking user input, for example), <a href="https://docs.python.org/3.4/tutorial/errors.html" rel="nofollow noreferrer"><code>try</code></a> it and catch the error if it fails, because it's easier to ask for forgiveness than permission.</span>
<span class="comment-copy">To the users suggesting "just let it fail naturally if the input is bad", it's possible that bad input will produce unusual output instead of crashing. For instance, <code>foo("42")</code> will print "4242" rather than raising a TypeError or anything.</span>
<span class="comment-copy">just to add, if you prefer more speed than <code>assert</code> or <code>isinstance</code>, use <code>type(object)</code> for readability or <code>object.__class__</code> for performance.</span>
<span class="comment-copy">What's wrong with this answer?</span>
<span class="comment-copy">you can check the error like this in python, because in c++ and other static languages it will still throw an exception if the value passed into the function is not an integer</span>
<span class="comment-copy">It seems like you're answering the question "how can I tell if a string can successfully be turned into an integer?" when the OP is asking "how do I tell if a variable is the type I think it is?". "int(x) doesn't crash" does not imply "x is an int".</span>
<span class="comment-copy">I think the idea may have been to check whether something is sufficiently close to an <code>int</code> to be passed to <code>foo()</code> for the expected result.</span>
<span class="comment-copy">Actually, this <i>suppresses</i> the <code>ValueError</code>; so what happens when <code>val</code> is used afterwards as if it was an <code>int</code>?</span>
