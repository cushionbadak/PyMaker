<div class="post-text" itemprop="text">
<p>I'm sending a POST request with JSON body to a Django server (fairly standard). On the server I need to decode this using <code>json.loads()</code>.</p>
<p>The problem is how do I get the body of the request in a string format?</p>
<p>I have the following code currently:</p>
<pre><code>body_data = {}
if request.META.get('CONTENT_TYPE', '').lower() == 'application/json' and len(request.body) &gt; 0:
    try:
        body_data = json.loads(request.body)
    except Exception as e:
        return HttpResponseBadRequest(json.dumps({'error': 'Invalid request: {0}'.format(str(e))}), content_type="application/json")
</code></pre>
<p>However, this gives an error <code>the JSON object must be str, not 'bytes'</code>.</p>
<p>How do I retrieve the body of the request as a string, with the correct encoding applied?</p>
</div>
<div class="post-text" itemprop="text">
<p>The request body, <code>request.body</code>, is a byte string. In Python 3, <code>json.loads()</code> will only accept a unicode string, so you must decode <code>request.body</code> before passing it to <code>json.loads()</code>.</p>
<pre><code>body_unicode = request.body.decode('utf-8')
body_data = json.loads(body_unicode)
</code></pre>
<p>In Python 2, <code>json.loads</code> will accept a unicode string or a byte sting, so the decode step is not necessary.</p>
<p>When decoding the string, I think you're safe to assume 'utf-8' - I can't find a definitive source for this, but see the quote below from the <a href="http://api.jquery.com/jquery.ajax/" rel="noreferrer">jQuery docs</a>:</p>
<blockquote>
<p>Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding.</p>
</blockquote>
<p>In Python 3.6, <a href="https://docs.python.org/3/library/json.html#json.loads" rel="noreferrer"><code>json.loads()</code> accepts bytes or bytearrays</a>. Therefore you shouldn't need to decode <code>request.body</code> (assuming it's encoded in UTF-8).</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe that the other end from where you receive this request does not convert the data to JSON before sending the request. Either you have to convert the data to JSON before you send, or just try accessing request.body in your view.</p>
</div>
<span class="comment-copy">Does <code>request.read()</code> do the job?</span>
<span class="comment-copy">@dhke, no, it gives the same, which surprised me actually. <code>request.body.decode('utf-8')</code> seems to work, but I'm not sure if this is the best way to do this?</span>
<span class="comment-copy"><code>utf-8</code> is also the default value of the first argument of the <code>decode()</code> method (check <code>help(bytes.decode)</code>)</span>
<span class="comment-copy">In Python &gt;= 3.6, <code>json.loads</code> can accept a <code>bytes</code> argument too, and it assumes it's encoded in UTF-8, UTF-16 or UTF-32. <a href="https://docs.python.org/3/library/json.html#json.loads" rel="nofollow noreferrer">docs.python.org/3/library/json.html#json.loads</a></span>
<span class="comment-copy">Thanks for the answer. I think it's valid json though - if I use <code>request.body.decode('utf-8') </code> then it works. Is there a reason not to do this would you say?</span>
