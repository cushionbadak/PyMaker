<div class="post-text" itemprop="text">
<p>I have a list of lists like so </p>
<pre><code>[[name1, 10.10], [name2, 12.12], [name1, 9.90], [name3, 22.20], [name3, 7.70]]
</code></pre>
<p>I want to search through the bigger list for the individual lists with the same first element, then average the second element, then append the new average value to a new list like so:</p>
<pre><code>[[name1, 10.00], [name2, 12.12], [name3, 14.95]]
</code></pre>
<p>The problem is I don't know how to search through the lists to do so. I'm very new to python, can someone help?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a simple function to loop over the items:</p>
<pre><code>def averageItems(items):
    averages = {}
    for name, data in items:
        averages.setdefault(name, []).append(data)
    for name, data in averages.items():
        averages[name] = sum(data) / len(data)
    return averages
</code></pre>
<p>Then use your list:</p>
<pre><code>data = [[name1, 10.10], [name2, 12.12], [name1, 9.90], [name3, 22.20], [name3, 7.70]]
dataAverages = averageItems(data) # {name3: 14.95, name2: 12.12, name1: 10.0}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a dictionary to store every name with corresponding values : </p>
<pre><code>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; l=[['name1', 10.1], ['name2', 12.12], ['name1', 9.9], ['name3', 22.2], ['name3', 7.70]]
&gt;&gt;&gt; d={}
&gt;&gt;&gt; for i in l:
...     d.setdefault(i[0],[]).extend(i[1:])
... 
&gt;&gt;&gt; d
{'name2': [12.12], 'name3': [22.2, 7.7], 'name1': [10.1, 9.9]}
&gt;&gt;&gt; [[i,sum(j)/len(j)] for i,j in d.items()]
[['name2', 12.12], ['name3', 14.95], ['name1', 10.0]]
</code></pre>
<p><code>Note</code> that this answer works if you have more that 1 number in your sub lists!!</p>
<p>But for this case as i write before edit you can just do :</p>
<pre><code>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; l=[['name1', 10.1], ['name2', 12.12], ['name1', 9.9], ['name3', 22.2], ['name3', 7.70]]
&gt;&gt;&gt; d={}
&gt;&gt;&gt; for i,j in l:
...     d.setdefault(i,[]).append(j)
... 
&gt;&gt;&gt; d
{'name2': [12.12], 'name3': [22.2, 7.7], 'name1': [10.1, 9.9]}
&gt;&gt;&gt; [[i,sum(j)/len(j)] for i,j in d.items()]
[['name2', 12.12], ['name3', 14.95], ['name1', 10.0]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3.4/library/collections.html#collections.defaultdict" rel="nofollow">collections.defaultdict</a> to store all the scores for each name in a single list and  then use <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow">statistics.mean</a> if you have python &gt;= 3.4 to calculate the average:</p>
<pre><code>from collections import defaultdict
from statistics import mean

l = [['name1', 10.10], ['name2', 12.12], ['name1', 9.90], ['name3', 22.20], ['name3', 7.70]]


details = defaultdict(list)

for name, score in l:
    details[name].append(score)
</code></pre>
<p>If you want to keep the dict structure just update the values:</p>
<pre><code>for name, scores in details.items():
    details[name] = mean(scores)

print(details)
defaultdict(&lt;class 'list'&gt;, {'name3': 14.95, 'name1': 10.0, 'name2': 12.12})
</code></pre>
<p>Or create a list using a list comprehension:</p>
<pre><code>print([[name ,mean(scores)] for name,scores in details.items()])
[['name1', 10.0], ['name3', 14.95], ['name2', 12.12]]
</code></pre>
<p>Obviously without using mean you can simple calcualte it yourself:</p>
<pre><code>print([[name , sum(scores)/len(scores)] for name,scores in details.items()])
</code></pre>
<p>If the order matters then use a <a href="https://docs.python.org/3.4/library/collections.html#collections.OrderedDict" rel="nofollow">collections.OrderedDict</a>:</p>
<pre><code>from collections import OrderedDict
details = OrderedDict()

for name, score in l:
    details.setdefault(name,[])
    details[name].append(score)

print([[name , sum(scores)/len(scores)] for name,scores in details.items()])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import defaultdict
from operator import add

d = defaultdict(list)
pairs = [[name1, 10.10], [name2, 12.12], [name1, 9.90], [name3, 22.20], [name3, 7.70]]

for name, val in pairs: 
    d[name].append(val)
print [(name, reduce(add, vals)/len(vals)) for name, vals in d.items()]
</code></pre>
<p>I think this should work, and it's fairly clean too. We create a defaultdict and append each value for each name to a list, then reduce those down by adding, and then divide by length to get an average. </p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Build a dictionary whose values are lists of numbers, using the <a href="https://docs.python.org/2/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><code>.setdefault()</code></a> method of dictionaries.</li>
<li>Build a list using the builtins <a href="https://docs.python.org/2/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> and <a href="https://docs.python.org/2/library/functions.html#len" rel="nofollow noreferrer"><code>len</code></a> to compute the mean.</li>
</ol>
<p>Using the <a href="http://ipython.org" rel="nofollow noreferrer"><code>ipython</code></a> interpreter</p>
<pre><code>In [1]: l = [['name1', 10.10], ['name2', 12.12], ['name1', 9.90], ['name3', 22.20], ['name3', 7.70]]
In [2]: d = {}
In [3]: for k, v in l: d[k]=d.setdefault(k,[])+[v]
In [4]: [[k,sum(d[k])/len(d[k])] for k in d]
Out[4]: [['name2', 12.12], ['name3', 14.95], ['name1', 10.0]]
In [5]: del d
In [6]: 
</code></pre>
<hr/>
<p>Prompted by <a href="https://stackoverflow.com/questions/29480288/python-averaging-items-in-a-list-of-lists#comment47122058_29480288">Kevin's comment to the OP</a> about the eventual requirement of conserving the order  of  labels in the original list, I'd suggest using an <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a> from the <a href="https://docs.python.org/2/library/collections.html" rel="nofollow noreferrer"><code>collections</code></a> module</p>
<pre><code>In [19]: from collections import OrderedDict
In [20]: d = OrderedDict()
In [21]: for k, v in l: d[k]=d.setdefault(k,[])+[v]
In [22]: [[k,sum(d[k])/len(d[k])] for k in d]
Out[22]: [['name1', 10.0], ['name2', 12.12], ['name3', 14.95]]
</code></pre>
</div>
<span class="comment-copy">Why were three elements removed?</span>
<span class="comment-copy">You want to have each name appear only once in your final list, correct? if so, you do not want to use a list for your final structure, you want a dictionary.</span>
<span class="comment-copy">Your last score is <code>7,70</code> or <code>7.70</code>?</span>
<span class="comment-copy">Isn't this names strings?</span>
<span class="comment-copy">Edit: I'll just submit an answer, formatting in comments sucks.</span>
<span class="comment-copy">Your example doesn't works. You forgot to quote strings.</span>
<span class="comment-copy">I edited the question according to the post. The post does not have quotations, indicating that they are variables. @MauroBaraldi</span>
<span class="comment-copy">But you paste the example as you have ran in shell. Certainly it did not work as you paste.</span>
<span class="comment-copy">There is no need for .keys</span>
<span class="comment-copy">Thank you. Defining functions isn't a strong point for me yet, but I think I can follow your example in constructing my own</span>
<span class="comment-copy">The average for <code>name3</code> is not 17.3666.</span>
<span class="comment-copy">@zachgates7 i thought that its a typo by OP, thanks for reminding , fixed!</span>
<span class="comment-copy">It isn't <code>33.066</code> either; notice how in the question the average is <code>14.95</code>. The <code>7,70</code> in the question is a typo.</span>
<span class="comment-copy">@zachgates7 yeah i got it, the problem is because of <code>division</code>, fixed!</span>
<span class="comment-copy"><b>Down voters pls attention to the edit! and remove your down votes!</b></span>
<span class="comment-copy">Using <code>mean</code> is great if you've over 3.x. If not, you'll have to sum and divide manually (the horror~)</span>
<span class="comment-copy">@ap. I  have already stated that you need python 3.4 or greater. This actually works and gives the correct result, I am sure the OP can figure out how to average without using mean.</span>
<span class="comment-copy">You're right, I just missed it at first (didn't read your preamble). Wasn't bashing, just pointing it out.</span>
<span class="comment-copy">Your last line should be <code>print([[name, reduce(add, vals)/len(vals)] for name, vals in d.items()])</code></span>
<span class="comment-copy">Thanks for mentioning the <code>.items()</code> part.</span>
<span class="comment-copy">So whats the difference with my answer? :)</span>
<span class="comment-copy">I don't know, I haven't read your answer.</span>
