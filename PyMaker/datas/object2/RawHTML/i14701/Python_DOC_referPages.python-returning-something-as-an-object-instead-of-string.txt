<div class="post-text" itemprop="text">
<p>I have to make a Date class and two of the methods we have to implement are nextday() and prevday(). This is my code:</p>
<pre><code>class Date:
"""
A class for establishing a date.
"""
min_year = 1800

def __init__(self, month = 1, day = 1, year = min_year):
    """
    Checks to see if the date is real.
    """
    self.themonth = month
    self.theday = day
    self.theyear = year

def nextday(self):
    """
    Returns the date of the day after given date.
    """
    m = Date(self.themonth, self.theday, self.theyear)
    monthdays = [31, 29 if m.year_is_leap() else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    maxdays = monthdays[self.themonth]

    if self.theday != maxdays:
        return '{0}/{1}/{2}'.format(self.themonth, self.theday+1, self.theyear)
    elif self.theday == maxdays and self.themonth == 12:
        return '{0}/{1}/{2}'.format(1,1,self.theyear+1)
    elif self.theday == maxdays and self.themonth != 12:
        return '{0}/{1}/{2}'.format(self.themonth+1, 1, self.theyear)

def prevday(self):
    """
    Returns the date of the day before given date.
    """
    m = Date(self.themonth, self.theday, self.theyear)
    monthdays = [31, 29 if m.year_is_leap() else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    if self.theday == 1 and self.themonth == 1:
        return Date(12, monthdays[11], self.theyear-1)
    elif self.theday == 1 and self.themonth != 1:
        return Date(self.themonth -1, monthdays[self.themonth-1], self.theyear)
    elif self.theday != 1:
        return Date(self.themonth, self.theday - 1, self.theyear)
</code></pre>
<p>As you can see, nextday returns the next day corretly, but it's a string object. Prevday, however, just returns something that looks like this: &lt;<strong>main</strong>.Date object at 0x039E3270&gt;
How can I make these functions return another date object?</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok try,</p>
<pre><code>class Date:
"""
A class for establishing a date.
"""
min_year = 1800

def __init__(self, month = 1, day = 1, year = min_year):
    """
    Checks to see if the date is real.
    """
    self.themonth = month
    self.theday = day
    self.theyear = year

def nextday(self):
    """
    Returns the date of the day after given date.
    """
    m = Date(self.themonth, self.theday, self.theyear)
    monthdays = [31, 29 if m.year_is_leap() else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    maxdays = monthdays[self.themonth]

    if self.theday != maxdays:
        return Date(self.themonth, self.theday+1, self.theyear)
    elif self.theday == maxdays and self.themonth == 12:
        return Date(1,1,self.theyear+1)
    elif self.theday == maxdays and self.themonth != 12:
        return Date(self.themonth+1, 1, self.theyear)

def prevday(self):
    """
    Returns the date of the day before given date.
    """
    m = Date(self.themonth, self.theday, self.theyear)
    monthdays = [31, 29 if m.year_is_leap() else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    if self.theday == 1 and self.themonth == 1:
        return Date(12, monthdays[11], self.theyear-1)
    elif self.theday == 1 and self.themonth != 1:
        return Date(self.themonth -1, monthdays[self.themonth-1], self.theyear)
    elif self.theday != 1:
        return Date(self.themonth, self.theday - 1, self.theyear)
def year_is_leap(self):
    return True
def __repr__(self):
    return 'Date(%s,%s,%s)' % (self.themonth,self.theday,self.theyear)
</code></pre>
<p>Of course you have to implement year_is_leap().</p>
<pre><code>&gt;&gt;&gt; Date(1,1,1990).nextday()
 Date(1,2,1990)
&gt;&gt;&gt; Date(1,1,1990).prevday()
Date(12,31,1989)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>prevday is returning a new Date object, though it looks rather odd because you haven't implemented <code>__repr__()</code>.  Just change nextday to use the same <code>Date(...)</code> syntax.</p>
</div>
<span class="comment-copy">Consider just using the existing <code>datetime</code> module.</span>
<span class="comment-copy">I'm 99% sure this is homework and OP isn't allowed to use <code>datetime</code>.</span>
<span class="comment-copy">Can you explain how I should be implementing __repr__()?</span>
<span class="comment-copy">@flarp: <code>__repr__()</code> should return a string that looks like <code>Date(month, day, year)</code>, using <code>str.format()</code>.</span>
<span class="comment-copy">I don't want to return a string, I want to return another date object</span>
<span class="comment-copy"><code>__repr__()</code> is <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer">a standard method</a>.  It <i>must</i> return a string.</span>
