<div class="post-text" itemprop="text">
<p>I have a process sends messages between threads using Queues.</p>
<pre><code># receiver.py
class Receiver(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.daemon = True
        self.inbox = Queue.Queue()

    def run(self):
        while True:
            if not self.inbox.empty():
                msg = self.inbox.get()
                # do other stuff


# main.py
def main():
    R1 = Receiver()
    R2 = Receiver()
    R1.start()
    R2.start()

    # spin up child threads that can also stuff messages into Receiver() inboxes

    while True:
        msg = "You're hogging processor time"
        R1.inbox.put(msg)
        R2.inbox.put(msg)
        # do a whole bunch more fancy stuff

if __name__ == '__main__':
    main()
</code></pre>
<p>When I look at the processor time % alloted to this process, it's usually pinned at &gt; 90%.</p>
<p>Is there a better paradigm besides a while-True-check-inbox? I've tried sleeps, but the threads need to respond immediately.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/queue.html#queue.Queue.get" rel="nofollow"><code>Queue.get</code></a> will wait (block) until there's something in the queue. During this wait, the thread will sleep, allowing other threads (and processes) to run.</p>
<p>So just remove your check for <code>self.inbox.empty()</code>:</p>
<pre><code>def run(self):
    while True:
        msg = self.inbox.get()
        # do other stuff
</code></pre>
</div>
<span class="comment-copy">you can sleep within your 'while' cycle, this should not affect the threads.</span>
<span class="comment-copy">That is great news, I didn't realize that. Thank you! I'll try that out on the next build and report back as soon as I can. :)</span>
<span class="comment-copy">Reading through the docs again, I noticed that the get() method also accepts a timeout. This will likely come in handy as well since we're dealing with asynchronicity.</span>
<span class="comment-copy">Yup. After instituting the get() method with a timeout, our cpu usage plummeted from &gt; 90% to around 12 - 15 % avg. Thanks for the awesome suggestion. It seems obvious now, but its never obvious until someone points it out :)</span>
