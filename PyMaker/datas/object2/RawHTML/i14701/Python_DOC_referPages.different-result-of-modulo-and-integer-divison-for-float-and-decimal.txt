<div class="post-text" itemprop="text">
<p>I am quite confused with the behaviour as shown below:</p>
<pre><code>&gt;&gt;&gt; (-7) % 3 
2
&gt;&gt;&gt; Decimal('-7') % Decimal('3') 
Decimal('-1')
&gt;&gt;&gt; 

&gt;&gt;&gt; (-7) // 3
-3
&gt;&gt;&gt; Decimal('-7') // Decimal('3') 
Decimal('-2')
&gt;&gt;&gt;
</code></pre>
<p>Can someone please explain?</p>
</div>
<div class="post-text" itemprop="text">
<p>Quoting the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow"><code>decimal</code> documentation</a>:</p>
<blockquote>
<p>There are some small differences between arithmetic on Decimal objects
  and arithmetic on integers and floats. When the remainder operator <em>%</em>
  is applied to Decimal objects, the sign of the result is the sign of
  the dividend rather than the sign of the divisor:</p>
<pre><code>&gt;&gt;&gt; (-7) % 4
1
&gt;&gt;&gt; Decimal(-7) % Decimal(4)
Decimal('-3')
</code></pre>
<p>The integer division operator <em>//</em> behaves analogously, returning the
  integer part of the true quotient (truncating towards zero) rather
  than its floor, so as to preserve the usual identity <em>x == (x // y) * y
  + x % y</em>:</p>
<pre><code>&gt;&gt;&gt; -7 // 4
-2
&gt;&gt;&gt; Decimal(-7) // Decimal(4)
Decimal('-1')
</code></pre>
</blockquote>
</div>
<span class="comment-copy">Related:  <a href="http://bugs.python.org/issue12005" rel="nofollow noreferrer">this bug report.</a></span>
<span class="comment-copy">Both are correct, but are based on different definitions of the ambiguous modulus operation when applied to negative numbers - <code>3*-3+2 == -7</code>, and <code>3*-2-1 == -7</code>. A particular language/library/implementation usually picks one definition, so the fact that native integers and <code>Decimal</code> behave differently in this version of Python certainly could be considered a bug - it's at least a surprising inconsistency, as you noted. It's possibly an intentional decision, though, too, but I have no idea what the rationale might be if it is...</span>
<span class="comment-copy">@twalberg: Python's decimal module directly follows the IBM decimal standard, which specifies a remainder operator with the semantics shown.  So when the decimal module was introduced, we had to follow those semantics rather than the already existing ones for the <code>float</code> type.  That's the rationale for the difference.  We <i>could</i> have chosen not to override <code>%</code> at all for Decimal objects, and just make the specified remainder operation available as a method, but it's more convenient to have the <code>%</code> spelling available. (Practicality beats purity, and all that.)</span>
<span class="comment-copy">@Makoto: Good find!  I'd completely forgotten about that bug report.</span>
