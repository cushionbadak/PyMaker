<div class="post-text" itemprop="text">
<p>Write a function that helps answer questions like '"Today is Wednesday. I leave on holiday in 19 days time. What day will that be?"' ...So the function must take a day name and a delta argument — the number of days to add — and should return the resulting day name:</p>
<pre><code>def day_add(day, number):
    if number == "0":
        return day
    else:
        return

result = day_add("Thursday", "0")
print(result)

assert "Friday" == day_add("Monday", "4"), "gives you back the day it will be if you add a certain number of days"
assert "Tuesday" == day_add("Tuesday", "0"), "gives back the day you put in"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Clearly you need to translate the day name into a number, e.g with a global list:</p>
<pre><code>DAYS = ['Sunday', 'Monday', ... , 'Saturday']
</code></pre>
<p>(replace the <code>...</code> with the other day names:-).</p>
<p>To translate the day name into an index in the list (a number from 0 to 6 included), use the list method <code>index</code>:</p>
<pre><code>daynum = DAYS.index(dayname)
</code></pre>
<p>that raises a <code>ValueError</code> if <code>dayname</code> is not a valid weekday name, which I'm guessing is OK or else you would have <strong>told</strong> us your specifications for such a user error!  (I'm assuming <code>dayname</code> is the name of the argument your function accepts).</p>
<p>Next, you add <code>number</code> to the <code>daynum</code> and take it modulo 7 so it's again a number between 0 and 6 included:</p>
<pre><code>result_day = (daynum + number) % 7
</code></pre>
<p>finally, you use this to index the list and return the result:</p>
<pre><code>return DAYS[result_day]
</code></pre>
<p>I hope you can put these together into the function you need so you get <strong>at least</strong> a little learning out of the exercise (as opposed to none if we gave you the needed function ready to copy and paste!-)</p>
<p>Edit: I see the <code>number</code> you're passing is actually a <strong>string</strong> -- any reason for this very peculiar choice...?  If it's part of a really, truly, very remarkably strange specification, you'll also need to make into a number, of course -- i.e, at the very start,</p>
<pre><code>number = int(number)
</code></pre>
<p>A suggestion to preserve the sanity of anybody reading your code: do <strong>not</strong> name <code>number</code> a variable that is <strong>not</strong> a number -- like the well-known psychological test where you have a bunch of color names each printed in a color <strong>different</strong> from the one it's naming, this kind of thing really throws people's brains for a loop!-)</p>
</div>
<div class="post-text" itemprop="text">
<p>You could make an index of the days in a dictionary:</p>
<pre><code>&gt;&gt;&gt; dow={day:i for i, day in enumerate(['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'])}
</code></pre>
<p>And an inverse of that:</p>
<pre><code>&gt;&gt;&gt; idow={i:day for day, i in dow.items()}
</code></pre>
<p>So now you have:</p>
<pre><code>&gt;&gt;&gt; dow
{'Monday': 1, 'Tuesday': 2, 'Friday': 5, 'Wednesday': 3, 'Thursday': 4, 'Sunday': 0, 'Saturday': 6}
&gt;&gt;&gt; idow
{0: 'Sunday', 1: 'Monday', 2: 'Tuesday', 3: 'Wednesday', 4: 'Thursday', 5: 'Friday', 6: 'Saturday'}
</code></pre>
<p>Then you can get one from the other:</p>
<pre><code>&gt;&gt;&gt; idow[(dow['Wednesday']+19)%7]
Monday
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Start with the list of days:</p>
<pre><code>DAYS=['Sunday', 'Monday', ..., 'Saturday']
</code></pre>
<p>You can use the index method of a list to find out the array index location for a provided day:</p>
<pre><code>&gt;&gt;&gt; print DAYS.index('Sunday')
0
&gt;&gt;&gt; print DAYS.index('Monday')
1
</code></pre>
<p>Add to that the number of days from now and you will get the day at that index position in the DAYS list:</p>
<pre><code>&gt;&gt;&gt; todays_index=DAYS.index('Sunday')
&gt;&gt;&gt; days_from_now=3
&gt;&gt;&gt; print DAYS[todays_index+days_from_now]
Wednesday
</code></pre>
<p>This will, however, work for up to 6 days from Sunday.  Setting days_from_now to 7 will obviously break things and cause an IndexError.  However, if you calculate the modulus 7 of days_from_now, you can ensure that you'll never exceed 6:</p>
<pre><code># DAYS[0] == 'Sunday'
# 7 days from now: DAYS[0+(7%7)] == DAYS[0+0] == DAYS[0] == 'Sunday'
# 8 days from now: DAYS[0+(8%7)] == DAYS[0+1] == DAYS[1] == 'Monday'
# 14 days from now: DAYS[0+(14%7)] == DAYS[0+0] == DAYS[0] == 'Saturday'
# DAYS[1] == 'Monday'
# 14 days from now: DAYS[1+(14%7)] == DAYS[1+0] == DAYS[1] == 'Monday'
# 17 days from now: DAYS[1+(17%7)] == DAYS[1+3] == DAYS[4] == 'Thursday'
</code></pre>
<p>The resulting function would look like:</p>
<pre><code>def day_add(day, days_from_now):
    DAYS=['Sunday', 'Monday', ..., 'Saturday']
    if days_from_now == 0:
        return day
    else:
        todays_index = DAYS.index(day)
        return DAYS[todays_index+(days_from_now%7)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code># Write the function day_name which is given a number, and returns its 
# name:

def day_name(number):
    if number == 0:
        return ('Sunday')
    elif number == 1:
        return ('Monday')
    elif number == 2:
        return ('Tuesday')
    elif number == 3:
        return ('Wednesday')
    elif number == 4:
        return ('Thursday')
    elif number == 5:
        return ('Friday')
    elif number == 6:
        return ('Saturday')
    else:
        return None

# Write the inverse function day_num which is given a day name, and returns its    # number:


def day_num(day_name):  
    if day_name == 'Sunday':
        return (0)
    elif day_name == 'Monday':
        return (1)
    elif day_name == 'Tuesday':
        return (2)
    elif day_name == 'Wednesday':
        return (3)
    elif day_name == 'Thursday':
        return (4)
    elif day_name == 'Friday':
        return (5)
    elif day_name == 'Saturday':
        return (6)
    else:
        return None

# Use composition to write the last function
# If Sunday i'm leaving for 10 days, i will stay 1 week and 3 days. So the day 
# i'll be back will be 3 days from Sunday (Wednesday). 
# In code: day_back = (10 % 7) + (0)

def day_add(today, stay):
    today = day_num(today)
    day_back = (stay % 7) + today
    result = day_name(day_back)
    return (result)
</code></pre>
</div>
<span class="comment-copy">Please show what you have tried so far.</span>
<span class="comment-copy">Have you tried using <code>datetime</code> and <code>timedelta</code> from the <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">datetime</a> module?</span>
<span class="comment-copy">I haven't learned either of those yet - I'm in an intro to python class. This is what I have so far:  def day_add(day, number):     if number == "0":         return day     else:         return  result = day_add("Thursday", "0") print(result)  assert "Friday" == day_add("Monday", "4"), "gives you back the day it will be if you add a certain number of days" assert "Tuesday" == day_add("Tuesday", "0"), "gives back the day you put in"</span>
<span class="comment-copy">Can you edit your original question and put the code in there? Just copy-paste it in and then highlight it and press control+K or press the button that looks like <code>{ }</code>.</span>
<span class="comment-copy">@Nora, code in comments is unreadable due to no formatting -- <b>please</b> copy that code into an edit of your question (and format it appropriately by highlighting it and clicking the <code>{}</code> icon!-)</span>
<span class="comment-copy">am trying to go through this now!</span>
<span class="comment-copy">@Shashank oops, you're right, thanks, editing to fix the "mental typo":-).</span>
<span class="comment-copy">still not working... any way I could modify my code up top (I know it's missing some bits) and make it work? sorry I am very new to python and struggling a lot!</span>
<span class="comment-copy">@Nora, have you tried with the current version (using <code>index</code> as Shashank suggested, though it seems his comment's gone, instead of <code>find</code>)?</span>
<span class="comment-copy">Yes I tried that and it wasn't working for me!</span>
