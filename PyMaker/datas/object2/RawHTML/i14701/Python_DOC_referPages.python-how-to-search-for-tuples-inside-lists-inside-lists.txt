<div class="post-text" itemprop="text">
<p>I've been searching for hours, and I can't seem to find an answer that goes deep enough; Everyone stops at, eg, a list inside a list.  When I try to extrapolate what I think I need, I get an error that says "TypeError: 'int' object is not subscriptable".  I'm very much a noob, so if you could explain what I'm doing wrong, and how to fix it I would very much appreciate it.</p>
<p>So...  I have 5 items I want to place on a grid, without them overlapping.  For each item I create a list of tuples that represent the coordinates the item will cover.  For each of those lists, I want to compare all the coordinates to the coordinates of all the other items I have placed.  If any coordinate is duplicated, I toss out the list and generate a new one.  Otherwise I add the new list to the "master" list.  So, I end up with a list of lists of tuples, like so:</p>
<pre><code>usedCoords =  [[(5, 18), (5, 19)], [(2, 4), (3, 4), (4, 4)], [(8, 17),  (9, 17), (10, 17), (11, 17)], [(6, 3), (6, 4), (6, 5), (6, 6), (6, 7)], [(15, 12), (15, 13), (15, 14), (15, 15), (15, 16), (15, 17)]]
</code></pre>
<p>I then generate another list, like this:</p>
<pre><code>checkC =  [(15, 12), (15, 13), (15, 14), (15, 15), (15, 16), (15, 17)]
</code></pre>
<p>The question is, how do I compare the two and make sure none of the tuples match?  This is where I'm at, but it doesn't seem to be working. (check() is the function that creates the list of tuples)</p>
<pre><code>check()  
for i in checkC:
    if i[1][1] in usedCoords:
        tf = True
        print('used')
    else: 
        tf = False
if tf == False:
    usedCoords.append(checkC)
    tf = True
print('usedCoords = ',usedCoords)
print('checkC = ', checkC)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>checkC</code> is a list of tuples—not a list of lists of tuples, as you claim: So, when you do <code>for i in checkC:</code>, each <code>i</code> is just a tuple, like <code>(15, 12)</code>.</p>
<p>So, <code>i[1]</code> is perfectly valid—it's the second element of <code>(15, 12)</code>, which is <code>12</code>. But <code>i[1][1]</code> is not—it's be the second element of the second element of <code>(15, 12)</code>, which is the second element of <code>12</code>, which is meaningless, because <code>12</code> is an int and has no elements. Hence the error.</p>
<p>But I don't know why you're trying to index <code>i</code> at all. You want to look up the tuple <code>(15, 12)</code>, as a single value; you don't want to look up 15 and 12 separately. So just use <code>i</code>, not <code>i[anything]</code>.</p>
<hr/>
<p>That will get rid of your actual error, because <code>if i in userCoords</code> is <em>legal</em>—but it's still useless. There's no way that a tuple like <code>(15, 12)</code> can be in <code>usedCoords</code>, because <code>usedCoords</code> only holds lists of tuples, not tuples.</p>
<p>What you want to ask is whether <code>i</code> is in any of the sublists that are in <code>usedCoords</code>:</p>
<pre><code>if any(i in sublist for sublist in usedCoords):
    print('Used')
</code></pre>
<p>If you don't understand the <code>any</code> function and generator expressions or other comprehensions, you should read through the official tutorial, starting with <a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow">Iterators</a>; it explains it much nicer than any spur-of-the-moment StackOverflow answer can. But until then, you can always write the loop and check explicitly instead:</p>
<pre><code>for sublist in usedCoords:
    if i in sublist:
        print('Used')
        break
else:
    print('Not used')
</code></pre>
<hr/>
<p>Meanwhile, your loop has a problem as well. For each member of <code>checkC</code>, you set <code>tf</code> to <code>True</code> if it's found, <code>False</code> if it's not. So, at the end of the loop, <code>tf</code> will only tell you whether the last member was found. If you want to know whether <em>any</em> of the members are found, you can't keep resetting <code>tf = False</code>; once it's <code>True</code>, it has to stay <code>True</code> forever. So, the whole thing becomes:</p>
<pre><code>tf = False
for i in checkC:
    if any(i in sublist for sublist in usedCoords):
        tf = True
        print('used')
        break
if tf == False:
    usedCoords.append(checkC)
    tf = True
</code></pre>
<p>Which can be simplified to:</p>
<pre><code>for i in checkC:
    if any(i in sublist for sublist in usedCoords):
        print('used')
        break
else:
    usedCoords.append(checkC)
tf = True
</code></pre>
<p>And, even further, to:</p>
<pre><code>if any(i in sublist for i in checkC for sublist in usedCoords):
    print('used')
else:
    usedCoords.append(checkC)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just check if any of your coords exist in the other list, like this:</p>
<pre><code>&gt;&gt;&gt; any(c for c in checkC for i in usedCoords if c in i)
True
</code></pre>
<p>True here means that at least one match. In your sample data, the last list in usedCoords contains tuples from checkC.</p>
</div>
<div class="post-text" itemprop="text">
<p>Didn't get what you are trying to achieve.
I think 
this</p>
<pre><code>for i in checkC:
    if i[1][1] in usedCoords:
        tf = True
        print('used')
</code></pre>
<p>should become this </p>
<pre><code>for i in range(len(checkC)) :
    if checkC[i] in usedCoords :
        tf = True
        print('used')
</code></pre>
</div>
<span class="comment-copy">When you run into problems like this, it really helps to look at what's actually in your variables. Add a <code>print(i)</code> statement right in the <code>for i in checkC:</code>, or run it in the debugger and put a breakpoint there, and you'll quickly see what the <code>i</code> values are, instead of having to guess at them.</span>
<span class="comment-copy">Thank you for this in-depth explanation.</span>
<span class="comment-copy">This is relying on the fact that none of his values happen to be falsey. While that works here, it's not a good idea; better to do <code>any(c in i for c in checkC for i in usedCoords)</code>, as in my answer. That tells you whether there are any matches, instead whether any of the matches are truthy.</span>
<span class="comment-copy">If he's doing <code>for i in checkC</code>, and <code>checkC</code> is a list of tuples, then <code>i</code> is not an int, it's a tuple.</span>
<span class="comment-copy">Thanks  and i have just edited. hope that works.</span>
<span class="comment-copy">O.K.  That makes sense.  But wouldn't it be looking for the tuple in usedCoords, but only finding lists?  How would I tell it to look inside those lists?  Or is that necessary?</span>
<span class="comment-copy">Your answer still says "<code>i</code> is an int variable not a list", which is still not true. And changing your code so that <code>i</code> <i>is</i> an int, and replacing the Pythonic <code>for … in</code> loop with a loop over indexes, doesn't improve anything.</span>
<span class="comment-copy">@Gned it is looking inside those lists. Please check using the sample inputs.</span>
