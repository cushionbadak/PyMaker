<div class="post-text" itemprop="text">
<p>so I need to turn a list of str into a list of list of str.</p>
<p>EX:</p>
<pre><code>thing = [' a b c', 'e f g']
</code></pre>
<p>into:</p>
<pre><code>[['a', 'b', 'c'], ['e', 'f', 'g']]
</code></pre>
<p>My code keeps returning a mistake:</p>
<pre><code>coolthing = []   
abc = []
for line in thing:
    abc = coolthing.append(line.split())
return abc
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>list.append</code> operates in-place and always returns <code>None</code>.  So, <code>abc</code> will be <code>None</code> when you return it.</p>
<p>To do what you want, you can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>:</p>
<pre><code>return [x.split() for x in thing]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; thing = [' a b c', 'e f g']
&gt;&gt;&gt; [x.split() for x in thing]
[['a', 'b', 'c'], ['e', 'f', 'g']]
</code></pre>
</div>
<span class="comment-copy"><code>return map(str.split,thing)</code> for a functional apporach</span>
<span class="comment-copy">@PadraicCunningham - +1.  I actually thought about doing that initially, but then you'd have to do <code>return list(map(str.split,thing))</code> if the OP was using Python 3.x.  Nice thing about the list comp. is it works the same in both versions.</span>
<span class="comment-copy">Your way is probably better for the OP, just thought I would throw it in there.</span>
<span class="comment-copy">Based on <a href="http://pastebin.com/Me2k407q" rel="nofollow noreferrer">my rudimentary testing</a> with timeit, the functional approach is nominally faster.</span>
<span class="comment-copy">@pzp1997 - True.  In Python 2.x, the <code>map</code> approach will be faster because most of the work (i.e. the looping) is being done in C and not Python.  Note however that in Python 3.x, the list comp. outperforms <code>list(map(str.split,thing))</code>.  Mainly though, I used the list comp. for portability.  It also seems slightly more readable to me.</span>
