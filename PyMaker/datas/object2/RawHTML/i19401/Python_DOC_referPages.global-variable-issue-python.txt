<div class="post-text" itemprop="text">
<p>I don't if I am being stupid tonight, but for some reason this wont work in Python. I am trying to set variables in functions within python and whenever I print them I get a 'function + name of function + Hex values instead of string', can anyone give me some advice with this please.</p>
<pre><code>import sys


def serverAdd():
    global serverAdd
    if len(sys.argv) &lt;2:
        serverAdd = input('Please enter server address:')
    else:
        serverAdd = sys.argv[1]

def serverPort():
    global portNumber
    if len(sys.argv) &lt;3:
        portNumber = input('Please enter port number for server:')
    else:
        portNumber = sys.argv[2]


def serverPassword():
    global serverPassword
    if len(sys.argv)&lt; 4:
        password = input('Please enter server password:')
    else:
        password = sys.argv[3]




serverAdd()
print(serverAdd)
serverPort()
print(serverPort)
serverPassword()
print(serverPassword)``
</code></pre>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Declare globalness inside the function:</p>
<pre><code>def inputPass():
    global passNumber
    passNumber = input('Please enter pass number')
</code></pre>
<p><em>Personally</em> I prefer to avoid globals and would instead write:</p>
<pre><code>def inputPass():
    return input('Please enter pass number')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your code, you're not printing the result of whatever you did in the function, you're printing the reference to the function itself (which is the name and I'm presuming the location of the function in memory). </p>
<p>In addition to fixing the globals as discussed in the other answers, you also need to print the variable names, not the function references.</p>
</div>
<div class="post-text" itemprop="text">
<h3>Problem 1</h3>
<p><code>global serverAdd</code> will write over your <code>serverAdd</code> function.  If you call <code>serverAdd</code> a second time it won't be a function anymore.</p>
<h3>Problem 2</h3>
<p>The global in <code>serverPort</code> is <code>portNumber</code>, but you print <code>serverPort</code> which is a function.</p>
<h3>Problem 3</h3>
<p>The global in <code>serverPassword</code> is <code>password</code> but you print <code>serverPassword</code> which is a function.</p>
<h3>Solution</h3>
<p>Make your globals different from your function names, and print the right ones.</p>
<h3>OR</h3>
<p>Use a Python library to parse your parameters (<a href="http://docs.python.org/3/library/argparse.html" rel="nofollow">argparse</a>, <a href="http://docs.python.org/3/howto/argparse.html" rel="nofollow">tutorial</a>):</p>
<pre><code>#!python3
import argparse
parser = argparse.ArgumentParser()
parser.add_argument('-s','--server')
parser.add_argument('-p','--port')
parser.add_argument('-w','--password')
args = parser.parse_args()

if args.server is None:
    args.server = input('server? ')
if args.port is None:
    args.port = input('port? ')
if args.password is None:
    args.password = input('pass? ')

print(args.server,args.port,args.password)
</code></pre>
<h3>Example Usage</h3>
<pre><code>C:\&gt;example
server? Server
port? 123
pass? Password
Server 123 Password

C:\&gt;example -s Server
port? 123
pass? Pass
Server 123 Pass

C:\&gt;example -s Server -w pass
port? 123
Server 123 pass

C:\&gt;example -s Server -w pass --port 123
Server 123 pass
</code></pre>
<p>You even get help!</p>
<pre><code>C:\&gt;example -h
usage: example.py [-h] [-s SERVER] [-p PORT] [-w PASSWORD]

optional arguments:
  -h, --help            show this help message and exit
  -s SERVER, --server SERVER
  -p PORT, --port PORT
  -w PASSWORD, --password PASSWORD
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem with the current code is that your declaring global variables with the same name as the function! Functions in python are variables - and as such, they share the same namespace! So when you access the variable name <code>serverAddress</code> Python has to determine which <code>serverAddress</code> you're referring to - the global variable or the local variable (the function). As a matter of how the scope works, it references local variable first. That's why when you print it, it prints out the functions information, and not the global variable.</p>
<p>Working code is below:</p>
<pre><code>import sys

def serverAdd():
  global serverAddress
  if len(sys.argv) &lt;2:
    serverAddress = input('Please enter server address:')
  else:
    serverAddress = sys.argv[1]

def serverPort():
  global portNumber
  if len(sys.argv) &lt;3:
    portNumber = input('Please enter port number for server:')
  else:
    portNumber = sys.argv[2]

def serverPassword():
  global password
  if len(sys.argv)&lt; 4:
    password = input('Please enter server password:')
  else:
    password = sys.argv[3]


serverAdd()
print(serverAddress)

serverPort()
print(portNumber)

serverPassword()
print(password)
</code></pre>
</div>
<span class="comment-copy"><code>global passNumber</code> needs to be in the function body, or it generates a local variable instead. If you didn't have to do this, then the presence of a global could screw up completely unrelated loaded functions later on :)</span>
<span class="comment-copy">You should learn about <a href="http://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer">scopes</a></span>
<span class="comment-copy">Yes but I need to check for command line arguments too</span>
<span class="comment-copy">That's not an excuse for making a variable global.  You can check <code>sys.argv</code> within any function, whether inside an object or not.</span>
<span class="comment-copy">The first <code>global</code> on line 1 is unnecessary, it is only needed inside the function.</span>
<span class="comment-copy">If I use multiple functions, this seems to only work on the first one and then the rest return the error as mentioned above.</span>
