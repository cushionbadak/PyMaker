<div class="post-text" itemprop="text">
<p>I have this simple project to do. This is the code I have so far, it works perfectly fine. But if someone types in a letter or an unknown symbol, the program crashes. How can I make this error proof and display or print a message if the wrong thing is entered?</p>
<pre><code>def excercise5():

    print("Programming Excercise 5")
    print("This program calculates the cost of an order.")
    pound = eval(input("Enter the weight in pounds: "))
    shippingCost = (0.86 * pound) + 1.50
    coffee = (10.50 * pound) + shippingCost
    if pound == 1:
        print(pound,"pound of coffee costs $", coffee)
    else:
        print(pound,"pounds of coffee costs $", coffee)
    print()

excercise5()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd advise against using <code>eval</code>. It is not good from the security point of view.  Just do an explicit conversion to the desired type:</p>
<pre><code>pound = float(input("Enter the weight in pounds: "))
</code></pre>
<p>To process invalid input:</p>
<pre><code>try:
    pound = float(input("Enter the weight in pounds: "))
except ValueError:
    print('Invalid input.')
    return
# the rest of the code
</code></pre>
<p>Or:</p>
<pre><code>try:
    pound = float(input("Enter the weight in pounds: "))
except ValueError:
    print('Invalid input.')
else:
    # the rest of the code
</code></pre>
<p>You can also wrap the input in an infinite loop that would terminate on successful conversion:</p>
<pre><code>while True:
    try:
        pound = float(input("Enter the weight in pounds: "))
    except ValueError:
        print('Invalid input. Try again.')
    else:
        break
# do the rest with `pound`
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/3/tutorial/errors.html" rel="nofollow">exception handling</a>.</p>
<p>Python doesn't crash when someone gives you invalid input, it throws an exception instead. You can catch such exceptions and handle them instead of letting python exit the program.</p>
<p>In this case, since you only want a <em>floating point number</em> you really should not be using <code>eval()</code>; that will take a lot of different inputs and will throw a lot of different exceptions.</p>
<p>Use the <code>float()</code> function instead, it will only throw a <code>ValueError</code> if you give it incorrect input. Then catch that and display an error message:</p>
<pre><code>try:
    pound = float(input("Enter the weight in pounds: "))
except ValueError:
    print('Not a valid number!')
    return
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Surround  the statement witha  try/except</p>
<pre><code>def excercise5():
    print("Programming Excercise 5")
    print("This program calculates the cost of an order.")
    pound = eval(input("Enter the weight in pounds: "))
    try:
        shippingCost = (0.86 * pound) + 1.50
        coffee = (10.50 * pound) + shippingCost
        if pound == 1:
            print(pound,"pound of coffee costs $", coffee)
        else:
            print(pound,"pounds of coffee costs $", coffee)
    except ValueError:
        print("Please Enter a valid number")
    print()
</code></pre>
<p>I should note: There is no way to "Error Proof" something, much like bullet proofing is impossible, a big enough bullet will penetrate anything, same with coding.  All you can do is write good code.  Nothing is absolute in coding.</p>
</div>
<div class="post-text" itemprop="text">
<p>Could you not use ascii. eg turn the string into a numerical value then ignore results which aren't within your numerical window eg 'if (c &lt;= 47  and c &gt;= 57):'. This should stop it crashing.
I think:P</p>
</div>
<div class="post-text" itemprop="text">
<p>Exceptions are the way to comfortably route and handle errors in non-trivial programs. But a clear concept is helpful to not make a random hack out of that when programs grow.<br/>
(E.g. catching builtin <code>ValueError</code> far away or <code>return</code>ing / continuing by chance would quickly become hairy.)</p>
<p>There is the main difference between errors caused </p>
<ul>
<li>by invalid / odd user input</li>
<li>by bugs</li>
<li>by dynamic system / environment limits.</li>
</ul>
<p>A reasonable way of separating, routing and handling these errors is:</p>
<ul>
<li><p>(A) Catch or compare for user input errors very early near the point of potential happening. React immediately for simple recoveries / repetitions. Otherwise (for breaking out) <strong>convert to an enriched exception</strong> which can be catched and distinguished further down or at the bottom of the call stack (or by the default handler <code>sys.excepthook</code>)</p></li>
<li><p>(B) Let crash down bug exceptions to the bottom of the call stack - unhandled; or possibly initiate comfortable bug presentation and feedback action.</p></li>
<li><p>(C) For system environment errors choose an approach between (A) and (B) depending on how much context, detail &amp; comfort info you want to be present at the current stage of development.</p></li>
</ul>
<p>This way this could become a scalable pattern for user oriented error handling in your example:</p>
<pre><code># Shows scalable user oriented error handling

import sys, traceback

DEBUG = 0

class UserInputError(Exception):
    pass

def excercise5():

    print("Programming Excercise 5")
    print("This program calculates the cost of an order.")

    # NOTE: eval() and input() was dangerous
    s = input("Enter the weight in pounds: ")
    try:        
        pound = float(s) 
    except ValueError as ev:
        raise UserInputError("Number required for weight, not %r" % s, ev)
    if pound &lt; 0:
        raise UserInputError("Positive weight required, not %r" % pound)

    shippingCost = (0.86 * pound) + 1.50
    coffee = (10.50 * pound) + shippingCost
    if pound == 1:
        print(pound,"pound of coffee costs $", coffee)
    else:
        print(pound,"pounds of coffee costs $", coffee)
    print()

if __name__ == '__main__':
    try:
        excercise5()
    except UserInputError as ev:
        print("User input error (please retry):")
        print(" ", ev.args[0])
        if DEBUG and len(ev.args) &gt; 1:
            print("  EXC:", ev.args[1], file=sys.stderr)
    except (EnvironmentError, KeyboardInterrupt) as ev:
        print("Execution error happend:")
        print(" ", traceback.format_exception_only(ev.__class__, ev)[0])
    except Exception:
        print("Please report this bug:")
        traceback.print_exc()
</code></pre>
</div>
<span class="comment-copy">You must use try/catch. Take a look on <a href="http://stackoverflow.com/questions/5424716/python-how-to-check-if-input-is-a-number-given-that-input-always-returns-stri" title="python how to check if input is a number given that input always returns stri">stackoverflow.com/questions/5424716/â€¦</a></span>
<span class="comment-copy">Don't answer unless you're fairly sure your answer is correct. Also, include more details, where that <code>if</code> goes for example and what to do if it's true.</span>
