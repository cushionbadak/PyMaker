<div class="post-text" itemprop="text">
<p>I have this file structure (where the dot is my working directory):</p>
<pre><code>.
+-- testpack
     +-- __init__.py
     +-- testmod.py
</code></pre>
<p>If I load the <code>testmod</code> module with the <code>import</code> statement, I can call a function that is declared within:</p>
<pre><code>&gt;&gt;&gt; import testpack.testmod
&gt;&gt;&gt; testpack.testmod.testfun()
hello
</code></pre>
<p>but if I try to do the same using the <code>__import__()</code> function, it doesn't work:</p>
<pre><code>&gt;&gt;&gt; __import__("testpack.testmod").testfun()

Traceback (most recent call last):
  File "&lt;pyshell#7&gt;", line 1, in &lt;module&gt;
    __import__("testpack.testmod").testfun()
AttributeError: 'module' object has no attribute 'testfun'
</code></pre>
<p>indeed, it returns the package <code>testpack</code> instead of the module <code>testmod</code>:</p>
<pre><code>&gt;&gt;&gt; __import__("testpack.testmod").testmod.testfun()
hello
</code></pre>
<p>How come?</p>
</div>
<div class="post-text" itemprop="text">
<p>This behaviour is given in <a href="http://docs.python.org/2/library/functions.html#__import__" rel="nofollow">the docs</a>:</p>
<blockquote>
<p>When the name variable is of the form package.module, normally, the
  top-level package (the name up till the first dot) is returned, not
  the module named by name. However, when a non-empty fromlist argument
  is given, the module named by name is returned.</p>
</blockquote>
<p>...</p>
<blockquote>
<p>The statement import spam.ham results in this call:</p>
<p><code>spam = __import__('spam.ham', globals(), locals(), [], -1)</code></p>
<p>Note how <code>__import__()</code> returns the toplevel module here because this is
  the object that is bound to a name by the import statement.</p>
</blockquote>
<p>Also note the warning at the top: </p>
<blockquote>
<p>This is an advanced function that is not needed in everyday Python
  programming, unlike <code>importlib.import_module()</code>.</p>
</blockquote>
<p>And then later:</p>
<blockquote>
<p>If you simply want to import a module (potentially within a package)
  by name, use <code>importlib.import_module()</code>.</p>
</blockquote>
<p>So the solution here is to use <a href="http://docs.python.org/2/library/importlib.html#importlib.import_module" rel="nofollow"><code>importlib.import_module()</code></a>.</p>
<p>It's worth noting that the double underscores either side of a name in Python imply that the object at hand isn't meant to be used directly most of the time. Just as you should generally use <code>len(x)</code> over <code>x.__len__()</code> or <code>vars(x)</code>/<code>dir(x)</code> over <code>x.__dict__</code>. Unless you know why you need to use it, it's generally a sign something is wrong.</p>
</div>
<span class="comment-copy">This doesn't answer your question, but note that Python 3.1+ has better ways to do dynamic imports: <a href="http://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer">importlib</a>.</span>
<span class="comment-copy">@delnan: it's available in 2.7 too.</span>
