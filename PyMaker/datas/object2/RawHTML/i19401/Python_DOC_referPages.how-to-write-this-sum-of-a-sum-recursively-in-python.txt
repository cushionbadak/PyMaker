<div class="post-text" itemprop="text">
<p>How would I write this function: <a href="https://math.stackexchange.com/questions/309015/rolling-5-6-sided-dice-where-top-3-equal-15-how-many-rolls-how-in-recursion">My Question</a> (the first answer), in python recursively? This is what I have so far:</p>
<pre><code>def f(n, p, k, t):
    sum(for p in xrange(1, 7):
        sum(for i in xrange(1,7):
                if n == 3: return 1
                if k == 1: return 0
                return (1/36) * f(n-1,p,k-1,t-max(p,i))
            )
        )

print sum([f(5,j,3,15) for j in xrange(1, 7)])
</code></pre>
<p>Any help appreciated, Thank you! :D</p>
<p><strong>Edit:</strong> The question from the link is this: </p>
<p>"Let's say that I have 5 (n), 6-sided (d) normal dice. How would I figure out how many possible rolls there are, where the top 3 (k) numbers rolled, equal 15 (t)? How would I do this using recursion such as
f(n,d,k,t)=∑i=1jf(something,with,n,d,k,t...)
where the base cases are something else. How would I figure this out? Please help. Thank you."</p>
<p>The Answer I got was:</p>
<p>Going off of my comment, if we add a parameter p being the top die not in the current top k (and discard the d, because all the dice are 6-sided anyways), then I believe we get to the following:
f(n,p,k,t)=∑p′=16∑i=16136⋅f(n−1,p′,k−1,t−(max(p′,i)))
The variable i represents the result of next die being thrown.</p>
<p>I do not know if this is correct. I was just facinated with the question and wanted to have a go at it. This is what I came up with.</p>
<p>The final probability of sum 15 would then be
∑p=16f(5,p,3,15)
with recursion base cases at n=3,k=1.</p>
<p>The general idea behind coming up with recursions like this is the following: You want to know the probability of reaching a state A. Then you look at all cases from which A is immedately reachable and multiply the probability of reaching those states with the probability of reaching A from that 'pre-state'. Then you sum this up over all pre-states.</p>
<p>The reason I did'nt copy it over, is because the sigma notations and LaTeX bits and pieces don't show up in stackoverflow.</p>
</div>
<div class="post-text" itemprop="text">
<p>You just have some of the bits mixed around.</p>
<h2>For loops versus generator expressions</h2>
<p>For loop:</p>
<pre><code>for p in range(1, 7):
    statement()
</code></pre>
<p>Generator expression:</p>
<pre><code>expression() for p in range(1, 7)
</code></pre>
<p>Note that there is no colon and the value goes before the <code>for</code>.</p>
<h2>If statements versus conditional expressions</h2>
<p>If statement:</p>
<pre><code>if predicate():
    true_stmt()
else:
    false_stmt()
</code></pre>
<p>If expression:</p>
<pre><code>true_expr() if predicate() else false_expr()
</code></pre>
<h2>Putting it together</h2>
<pre><code>def f(n, p, k, t):
    return sum(sum(1 if n == 3 else
                   (0 if k == 1 else
                    (1/36) * f(n-1, p, k-1, t-max(p,i))))
                   for i in range(1, 7))
               for p in range(1, 7))
</code></pre>
</div>
<span class="comment-copy">And the question is?...</span>
<span class="comment-copy">I thought recursion was generally a bad idea in Python?</span>
<span class="comment-copy">@BenDundee: Stop listening to whoever told you that.</span>
<span class="comment-copy">@Deitrich Epp: Maybe I'm thinking about tail recursion? Does your opinion change then?</span>
<span class="comment-copy">@BenDundee Python does not do LCO. And tail-recursion is generally "better" than non-tail-recursion.</span>
<span class="comment-copy">If you're looking for more info, the <code>&lt;value1&gt; if &lt;cond&gt; else &lt;value2&gt;</code> syntax, it's also called the <a href="http://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">ternary operator</a>.</span>
<span class="comment-copy">Thank you so much! This explains the for loops inside of sums better than anything I could find. :D</span>
<span class="comment-copy">Now I'm getting an error around the print part. A syntax error around <code>print sum(f(5,j,3,15) for j in xrange(1, 7))</code> at the print</span>
<span class="comment-copy">That's probably because you copied and pasted my code without reading it first.  My code has imbalanced parentheses, you will have to fix them.</span>
