<div class="post-text" itemprop="text">
<p>Suppose i have the any iterable</p>
<p><code>var = "ABCDEF"</code></p>
<p>I get the iterable like this</p>
<p><code>it = itertools.combinations(var,2)</code></p>
<p>is there any single function to print all values of iterables like</p>
<p><code>printall(it)</code></p>
<p>rather than using the for loop</p>
</div>
<div class="post-text" itemprop="text">
<p>This rather depends what you want, if you want to print out all the values, you need to compute them - an iterable doesn't guarantee the values are computed until after they are all requested, so the easiest way to achieve this is to <a href="http://docs.python.org/3/library/functions.html#func-list">make a list</a>:</p>
<pre><code>print(list(iterable))
</code></pre>
<p>This will print out the items in the normal list format, which may be suitable. If you want each item on a new line, the best option is, as you mentioned, a simple for loop:</p>
<pre><code>for item in iterable:
    print(item)
</code></pre>
<p>If you don't need the data in a specific format, but just need it to be readable (not all on one line, for example), you may want to check out <a href="http://docs.python.org/3/library/pprint.html">the <code>pprint</code> module</a>.</p>
<p>A final option, which I don't really feel is optimal, but mention for completeness, is possible in 3.x, where <a href="http://docs.python.org/3/library/functions.html#print">the <code>print()</code> function</a> is very flexible:</p>
<pre><code>print(*iterable, sep="\n")
</code></pre>
<p>Here we <a href="http://docs.python.org/2/tutorial/controlflow.html#unpacking-argument-lists">unpack the iterable</a> as the arguments to <code>print()</code> and then make the separator a newline (as opposed to the usual space).</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <code>str.join</code> method and join each element of the iterable on a new line.</p>
<pre><code>print('\n'.join(it))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use format which will allow each element to be formated as you please:</p>
<pre><code>&gt;&gt;&gt; print '\n'.join('{:&gt;10}'.format(e) for e in iter([1,2,'1','2',{1:'1'}]))
         1
         2
         1
         2
  {1: '1'}
</code></pre>
<p>Each element does not need to be a string necessarily, but must have a <code>__repr__</code> method if it is not a string. </p>
<p>You can then easily write the function you desire:</p>
<pre><code>&gt;&gt;&gt; def printall(it,w): print '\n'.join('{:&gt;{w}}'.format(e,w=w) for e in it)
&gt;&gt;&gt; printall([1,2,'3','4',{5:'6'}],10)
         1
         2
         3
         4
  {5: '6'}
</code></pre>
<p>I am using a list, but any iterable would do.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer">chain()</a> function from itertools to create iterator for var data and then just unpack using * operator of iterator</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; var = 'ABCDEF'
&gt;&gt;&gt; print(*chain(var))
A B C D E F
&gt;&gt;&gt; print(*chain(var), sep='\n')
A
B
C
D
E
F
</code></pre>
<p>If you just need to iterate over existing data and print it out again you can use star operator * for this</p>
<pre><code>&gt;&gt;&gt; print(*var)
A B C D E F
&gt;&gt;&gt; print(*var, sep='\n')
A
B
C
D
E
F
</code></pre>
</div>
<span class="comment-copy">Why is a <code>for</code> loop a problem?</span>
<span class="comment-copy">I don't believe so, but I may be wrong...</span>
<span class="comment-copy">Wait... you could make your own module with a custom function and install it using distilus.</span>
<span class="comment-copy">you can convert your iterator to a list, list(it)</span>
<span class="comment-copy">Also, it may be worth pointing out that once an iterator has been iterated through, it's consumed.</span>
<span class="comment-copy">@JoelCornett Indeed. Although if you have produced a list, you can then iterate over that instead.</span>
<span class="comment-copy">for print(*iterable) is a winner.</span>
<span class="comment-copy">+1, but it's worth noting this presumes the elements are strings. If not, <a href="http://www.youtube.com/watch?v=pShL9DCSIUw" rel="nofollow noreferrer">a generator expression or list comprehension</a> will be needed.</span>
