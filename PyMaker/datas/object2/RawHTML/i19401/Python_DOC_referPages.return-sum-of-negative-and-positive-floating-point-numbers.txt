<div class="post-text" itemprop="text">
<p>I'm trying to create a function that takes a list of floating points and returns a list of two numbers, which is equal to the sum of all positive and all negative floating points. For example:</p>
<pre><code>statement([30.95, -15.67, 45.56, -55.00, 43.78])
returns [-70.67, 120.29]
</code></pre>
<p>Here's what 've been able to do so far:</p>
<pre><code>res= []
for i in range(len(l)-1):
    for j in range(i,len(l)):
        if l[i]&gt;=l[i+1]:
            res = 
return res
</code></pre>
<p>But I'm kind of stuck. Can anyone help me understand this a little better?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd filter them into two lists:</p>
<pre><code>positives = [n for n in numbers if n &lt; 0]
negatives = [n for n in numbers if n &gt; 0]
</code></pre>
<p>And then use <code>sum()</code>:</p>
<pre><code>return sum(negatives), sum(positives)
</code></pre>
<p>Or if you want to make your instructor mad:</p>
<pre><code>statement = lambda n: map(sum, zip(*map(lambda x: (x, 0)[::cmp(0, x)], n)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def sum_negpos(numbers):
    return [sum(n for n in numbers if n &lt; 0), # sum of negative numbers
            sum(n for n in numbers if n &gt; 0)] # sum of positive numbers
</code></pre>
<p>The solution uses generator expressions <code>(x for x in it if cond(x))</code> that use the same syntax as <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list comprehensions</a> <code>[x for x in it if cond(x)]</code> but yuild one value at a time instead of creating a whole list at once.</p>
<p>In a single pass:</p>
<pre><code>def sum_negpos(numbers):
    sums = [0, 0] # negative, positive sum
    for n in numbers:
        sums[n &gt; 0] += n
    return sums
</code></pre>
<p>This solution exploits the fact that <code>True == 1</code> and <code>False == 0</code> in Python therefore <code>sums[n &gt; 0]</code> is <code>sums[1]</code> if <code>n &gt; 0</code> and it is <code>sums[0]</code> otherwise.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yet another solution:</p>
<pre><code>def statement(l):
    return reduce(lambda (n, p), x: (x &lt; 0) and (n + x, p) \
        or (n, p + x), l, (0, 0))

statement([30.95, -15.67, 45.56, -55.00, 43.78])
(-70.67, 120.29)
</code></pre>
</div>
<span class="comment-copy">the conditions are reversed</span>
<span class="comment-copy">Thank You! Can you explain how you arrived at the solution?</span>
<span class="comment-copy">@user2101463: I've added an explanation</span>
<span class="comment-copy">to support Python 3: <a href="http://ideone.com/q4JCiM" rel="nofollow noreferrer"><code>functools.reduce(lambda s, n: (s[0] + n, s[1]) if n &lt; 0 else (s[0] , s[1] + n) , L, (0, 0)) if L else (0, 0)</code></a></span>
