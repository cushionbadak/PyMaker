<div class="post-text" itemprop="text">
<blockquote>
<p>Design a logical expression equivalent to the following statement:</p>
<p><code>x</code> is a list of three or five elements, the second element of which is
  the string <code>'Hip'</code> and the first of which is not a number or Boolean.</p>
</blockquote>
<p>What I have: </p>
<pre><code>x = ['Head', 'Hip', 10]
print x[1] is 'Hip'
</code></pre>
<p>My question: How do you check for whether or not it is a Boolean or a number?</p>
</div>
<div class="post-text" itemprop="text">
<p>To answer the specific question:</p>
<pre><code>isinstance(x[0], (int, float))
</code></pre>
<p>This checks if <code>x[0]</code> is an instance of any of the types in the tuple <code>(int, float)</code>.</p>
<p>You can add <code>bool</code> in there, too, but it's not necessary, because <code>bool</code> is itself a subclass of <code>int</code>.</p>
<p>Doc reference: </p>
<ul>
<li><a href="http://docs.python.org/2/library/functions.html#isinstance"><code>isinstance()</code></a></li>
<li><a href="http://docs.python.org/2/library/stdtypes.html#numeric-types-int-float-long-complex">built-in numeric types</a></li>
</ul>
<hr/>
<p>To comment on your current code, you shouldn't rely on <a href="http://en.wikipedia.org/wiki/String_interning">interning of short strings</a>. You are supposed to compare strings with the <code>==</code> operator:</p>
<pre><code>x[1] == 'Hip'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Easiest i would say:</p>
<pre><code>type(x) == type(True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python3 this would be: <code>type(x)==bool</code> see <a href="http://www.diveintopython3.net/porting-code-to-python-3-with-2to3.html" rel="noreferrer">example</a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import types
type(x) == types.BooleanType
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should compare the type of <code>x</code> to the <code>bool</code> class:</p>
<pre><code>type(x) == bool
</code></pre>
<p>or:</p>
<pre><code>type(x) == type(True)
</code></pre>
<p>Here is more on the <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer">type method</a></p>
<p>From <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">Data model docs</a>:</p>
<blockquote>
<p>Booleans (bool)</p>
<p>These represent the truth values False and True. The two objects representing the values False and True are the only Boolean objects. The Boolean type is a subtype of the integer type, and Boolean values behave like the values 0 and 1, respectively, in almost all contexts, the exception being that when converted to a string, the strings "False" or "True" are returned, respectively.</p>
</blockquote>
</div>
<span class="comment-copy">A little bit hacky but no imports, so +1</span>
<span class="comment-copy">Maybe directly <code>type(x) is bool</code>?</span>
<span class="comment-copy">Mine works in both. The logic is mostly language indepent as well.</span>
<span class="comment-copy"><code>types.BooleanType</code> was removed from Python 3.  <code>bool</code> is used instead.  Source: <a href="http://www.diveintopython3.net/porting-code-to-python-3-with-2to3.html#types" rel="nofollow noreferrer">diveintopython3.net/â€¦</a></span>
