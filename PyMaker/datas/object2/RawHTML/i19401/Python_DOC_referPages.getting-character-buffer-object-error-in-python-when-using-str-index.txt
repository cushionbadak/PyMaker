<div class="post-text" itemprop="text">
<p>I am attempting to search through two strings looking for matching elements. If the strings have two elements in common that are in different positions, I want to make that element in the 'guess' string a COW. If the strings have two elements in the same position, the element is a BULL. </p>
<p>Here is what I have:</p>
<pre><code>        if index(number,i) in guess and not index(guess,i) == index(guess,i):
            replace(index(guess,i),'COW')

        if index(guess,i) == index(number,i):
            replace(index(guess,i),'BULL')
</code></pre>
<p>I'm not sure if I'm using index correctly.</p>
</div>
<div class="post-text" itemprop="text">
<p>First off, you need to be using <code>index()</code> and <code>replace()</code> as string methods, like Martijn said in a comment.</p>
<p>This would be like so: <code>guess.index(i)</code> to find the index of <code>i</code> in the string <code>guess</code>.</p>
<p>You might want to check out <a href="http://docs.python.org/3/library/stdtypes.html?highlight=index#str.find" rel="nofollow">find()</a> which will do the same as <code>index()</code> but won't raise an exception when the substring is not found.</p>
<p>Also note that you are seeing if the result of <code>index()</code> is in the string <code>guess</code>.  That is an error, since an integer cannot be in a string!  <code>index()</code> returns an integer!</p>
<p>Then consider that you are stating <code>... and not guess.index(i) == guess.index(i):</code> (I fixed the <code>index</code> code) which makes no sense, since of course they are equal! They are the same thing!</p>
<p>Lastly, you are using <code>replace</code> incorrectly.
From <a href="http://docs.python.org/3/library/stdtypes.html?highlight=index#str.replace" rel="nofollow">the documentation</a>, <code>replace</code> takes a string as the first argument - not an index!  Try using it like so: <code>guess = guess.replace(i, 'BULL')</code>. That will change <code>guess</code> to have <em>all</em> occurrences of <code>i</code> replaced by the string <code>'BULL'</code>.</p>
<p>I wasn't concerned with you actual algorithm here, but just your basic errors.</p>
</div>
<div class="post-text" itemprop="text">
<p>I wouldn't use the <code>index()</code> method. Instead, I would turn the string's elements into a list, then say: </p>
<pre><code>listOne = [hello,goodbye,adios, shalom]
listTwo = [hello,adios,arrivaderci]

def cowbull(L1, L2):
    for i in range(len(L1)):
        if L1[i] in L2:
            if L1[i] == L2[i]:
                L1[i] = 'BULL'
                L2[i] = 'BULL'
            else:
                L1[i] = 'COW'
                L2[L1[i]] = 'COW'
</code></pre>
<p>This is just how I would do it, but using the way you and William's code may work well also. I am just used to doing it this way, and it may very well be not as efficient as his, but it usually works very well.</p>
</div>
<span class="comment-copy"><code>index()</code> and <code>replace()</code> are methods <i>on</i> the string, not functions.</span>
<span class="comment-copy">I'm not sure what you mean by string elements.</span>
<span class="comment-copy">Giving examples of your input strings would help, presumably it's like "I have a house in red" and "what house is that" where "house" would be mangled.?</span>
