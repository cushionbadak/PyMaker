<div class="post-text" itemprop="text">
<p>I am trying to write a program to convert a message inta a secret code. I m trying to create a basic code to work up from. here is the problem.</p>
<pre><code>data = input('statement')
for line in data:
    code = ('l' == '1',
            'a' == '2'
            'r' == '3',
            'y' == '4')
    line = line.replace(data, code, [data])
print(line)    
</code></pre>
<p>this point of the above progam is so when i input my name:</p>
<pre><code>larry
</code></pre>
<p>the output should be</p>
<pre><code>12334
</code></pre>
<p>but I continue to recieve this message</p>
<pre><code>TypeError: 'list' object cannot be interpreted as an integer
</code></pre>
<p>so i assumed this meant that my code variable must be an integer to be used in replace()
is there a way to convert that string into an integer or is there another way to fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason why your original code gave you the error is because of <code>line.replace(data, code, [data])</code>. The <code>str.replace</code> method can take <a href="http://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow">3 arguments</a>. The first is the string you want to replace, the second is the replacement string, and the third, optional argument is how many instances of the string you want to replace - an integer. You were passing a list as the third argument.</p>
<p>However, there are other problems to your code as well.</p>
<p><code>code</code> is currently <code>(False, False, False, False)</code>. What you need is a <em>dictionary</em>. You might also want to assign it outside of the loop, so you don't evaluate it every iteration.</p>
<pre><code>code = {'l': '1', 'a': '2', 'r': '3', 'y': '4'}
</code></pre>
<p>Then, change your loop to this:</p>
<pre><code>data = ''.join(code[i] for i in data)
</code></pre>
<p><code>print(data)</code> gives you the desired output.</p>
<p>Note however that if a letter in the input isn't in the dictionary, you'll get an error. You can use the <code>dict.get</code> method to supply a default value if the key isn't in the dictionary.</p>
<pre><code>data = ''.join(code.get(i, ' ') for i in data)
</code></pre>
<p>Where the second argument to <code>code.get</code> specifies the default value.</p>
<p>So your code should look like this:</p>
<pre><code>code = {'l': '1', 'a': '2', 'r': '3', 'y': '4'}

data = input()
data = ''.join(code.get(i, ' ') for i in data)

print(data)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just to sum up:</p>
<p>% cat ./test.py</p>
<pre><code>#!/usr/bin/env python
data = raw_input()
code = {'l': '1', 'a': '2',
        'r': '3', 'y': '4'}

out = ''.join(code[i] for i in data)
print (out)
</code></pre>
<p>% python ./test.py</p>
<pre><code>larry
12334
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/3.3/library/stdtypes.html#str.translate" rel="nofollow">translate</a>:</p>
<pre><code>&gt;&gt;&gt; print("Larry".lower().translate(str.maketrans('lary', '1234')))
12334
</code></pre>
<p>(assuming Python 3)</p>
</div>
<div class="post-text" itemprop="text">
<p>The previous comments should give you a good explanation on your error message,
so I will just give you another way to make the translation from <code>data</code> to <code>code</code>.
We can make use of Python's <code>translate</code> method.<br/>
<br/></p>
<pre><code># We will use the "maketrans" function, which is not included in Python's standard Namespace, so we need to import it.
from string import maketrans

data = raw_input('statement')
    # I recommend using raw_input when dealing with strings, this way
    # we won't need to write the string in quotes.

# Now, we create a translation table
# (it defines the mapping between letters and digits similarly to the dict)
trans_table = maketrans('lary', '1234')

# And we translate the guy based on the trans_table
secret_data = data.translate(trans_table)

# secret_data is now a string, but according to the post title you want integer. So we convert the string into an integer.
secret_data = int(secret_data)

print secret_data
</code></pre>
<p><br/>Just for the record, if you are interested in encoding data, you should check for 
<strong>hashing</strong>.<br/>
Hashing is a widely used method for generating secret data format.<br/>
<br/>
A simple example of hashing in Python (using the so-called sha256 hashing method):<br/></p>
<pre><code>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; data = raw_input('statement: ')
statement: larry
&gt;&gt;&gt; secret_data = hashlib.sha256(data)
&gt;&gt;&gt;print secret_data.hexdigest()
0d098b1c0162939e05719f059f0f844ed989472e9e6a53283a00fe92127ac27f
</code></pre>
</div>
<span class="comment-copy">Side note: Since <code>data</code> is actually just a one-line string, it would be misleading to use <code>for char in data:</code>, instead of <code>for line in data:</code>.</span>
<span class="comment-copy">I just noticed you are using Python-3.x.. The code I wrote works in Python-2.7, I guess basically it should be the same in 3.x, but note that there might be some slight differences.</span>
