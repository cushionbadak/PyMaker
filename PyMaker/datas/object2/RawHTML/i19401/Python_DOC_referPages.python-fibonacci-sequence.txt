<div class="post-text" itemprop="text">
<p>I'm just trying to improve my programming skill by making some basic functions.</p>
<p>I want to fill a list with fibonacci values, but I think my code gives the sum of all the numbers put together and prints that instead..</p>
<pre><code>numberlist = []
i = 0
for i in range(20):
    numberlist.append(i)

print numberlist

fibonaccinumbers = []

for n in numberlist:
    def fib(n):
        a, b = 0, 1
        for i in range(n):
            a, b = b, a + b
        return a
    a = fib(n)
    fibonaccinumbers.append(a)


print a
</code></pre>
<p>Where have I gone wrong?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>print a
</code></pre>
<p>Well, you print the final value.</p>
<hr/>
<p>Also some more comments on your code:</p>
<pre><code>numberlist = []
i = 0
for i in range(20):
    numberlist.append(i)
</code></pre>
<p>You don’t need to initialize <code>i</code> there, the for loop does that for you. Also, you can simplify the whole block by just doing this:</p>
<pre><code>numberlist = list(range(20))
</code></pre>
<p>And given that you don’t actually need that to be a list, you don’t need to construct that at all but you can just run <code>for n in range(20)</code> later.</p>
<p>Then you are redefinining your <code>fib</code> function inside the loop over and over again. You should define it outside of it and just reuse it.</p>
<p>Also, when you know you want to create a list of multiple fibonacci numbers, it helps to just store all the numbers you calculate in between. That way you don’t have to do the same things over and over again. You can also use a generator function to make that all easier:</p>
<pre><code>def fibGenerator():
    a, b = 0, 1
    yield 0
    while True:
        a, b = b, a + b
        yield a

fibonaccinumbers = []
fib = fibGenerator()
for n in range(20):
    fibonaccinumbers.append(next(fib))
</code></pre>
<p>Instead of iterating over a range and calling <code>next</code> on the generator manually, you then can also just use the <a href="http://docs.python.org/3/library/itertools.html#itertools-recipes" rel="noreferrer"><code>take</code>-recipe</a> from itertools to do it just like this:</p>
<pre><code>fibonaccinumbers = take(20, fibGenerator())
</code></pre>
<h2>On generators</h2>
<blockquote>
<p>Still not too sure what the generator does however.</p>
</blockquote>
<p>A generator is a Python function which generates a sequence of return values. The values are generated lazily, that means when you <em>request</em> it. You create a generator by simply using <code>yield</code> instead of <code>return</code>. A <code>yield</code> will “return” a value and <em>pause</em> the generator. The next time you request a value, the generator will continue where it left off.</p>
<p>Using a generator allows you to create an endless sequence. As you see in the definition of <code>fibGenerator</code> above, there is a endless while-loop which has a <code>yield</code> inside. As the generator stops, it won’t hang up despite that loop.</p>
<p>Here is a quick self-explanationary example:</p>
<pre><code>&gt;&gt;&gt; def example():
    print('begin')
    i = 0
    while True:
        print('Calculating next value')
        yield i
        i += 1

&gt;&gt;&gt; g = example()
&gt;&gt;&gt; next(g)
begin
Calculating next value
0
&gt;&gt;&gt; next(g)
Calculating next value
1
&gt;&gt;&gt; next(g)
Calculating next value
2
&gt;&gt;&gt; next(g)
Calculating next value
3
&gt;&gt;&gt; next(g)
Calculating next value
4
</code></pre>
<p>The <code>next</code> function is the built-in function that requests the next value from the <em>iterable</em>. An iterable is anything you can iterate (e.g. <code>for x in iterable: ...</code>); and any generator is also an iterable.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sorry I'm being an idiot.  I was printing 'a' which is the last iterated calculation of fibonacci..</p>
<p>I should have been printing my list instead.</p>
<p>Damn...</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is on the last line. A distraction, I'm sure: you should be printing the list, not <code>a</code>.</p>
<p>Some other tips:</p>
<p><strong>1:</strong> This whole block is just recreating the list returned by <code>range</code>:</p>
<pre><code>numberlist = []
i = 0
for i in range(20):
    numberlist.append(i)
</code></pre>
<p>Assigning <code>i = 0</code> is also moot. Instead, try:</p>
<pre><code>numberlist = range(20)
</code></pre>
<p>In python 3, call <code>list(range(20))</code>, since <code>range</code> doesn't create a full-fledged list.</p>
<p><strong>2:</strong> redefining the <code>fib</code> function on every pass of the loop won't create problems, but is surely not necessary. Move the definition outside :)</p>
</div>
<div class="post-text" itemprop="text">
<p>In the spirit of improving programming skills: you could use <a href="https://stackoverflow.com/questions/102535/what-can-you-use-python-generator-functions-for">a generator</a> and <a href="http://docs.python.org/2/library/itertools.html#itertools.islice" rel="nofollow noreferrer">itertools.islice()</a> to get the list of the first <code>n</code> fibonacci numbers:</p>
<pre><code>from itertools import islice

def fib(a=0, b=1):
    yield a
    while True:
        yield b
        a, b = b, a + b

fibonacci_numbers = list(islice(fib(), 20))
print(fibonacci_numbers)
</code></pre>
<h3>Output</h3>
<pre><code>[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thought I would share some pyLove:</p>
<pre><code>def fib(n, a = 0, b = 1):
    seq = [a,b]
    while len(seq) &lt; n:
        seq += [seq[len(seq)-1] + seq[len(seq)-2]]
    return seq

print(fib(13))
</code></pre>
<p><strong>output is:</strong></p>
<pre><code>[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]
</code></pre>
<p><strong>or:</strong></p>
<pre><code>#or if you want to make up your own
print(fib(13, 1597, 2584))
</code></pre>
<p><strong>output is:</strong></p>
<pre><code>[1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I condensed it and took on board the fact that 'range' or at least list(range()) creates its own list:</p>
<pre><code>numberlist = list(range(20))

def fib(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return a

fibonaccinumbers = [fib(n) for n in numberlist]

print fibonaccinumbers
</code></pre>
<p>It seems to work, printing every fibonacci value up to the 20th iteration.  How is it that I can call 'fib(n)' outside of the def without doing some weirdness such as:</p>
<pre><code>a = fib(n)
</code></pre>
<p>That was the style I was used to before.  In any case, does the program look good now?</p>
</div>
<div class="post-text" itemprop="text">
<p>nth term in fibonacci series is:</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/kVGbZ.png"/>
where
<img alt="enter image description here" src="https://i.stack.imgur.com/1K8mT.png"/>
and
<img alt="enter image description here" src="https://i.stack.imgur.com/CKjV5.png"/></p>
<p>Using the above identity in, the series can be generated using list comprehension:</p>
<pre><code>[int(((((1 + math.sqrt(5)) / 2) ** x) - (((1 - math.sqrt(5)) / 2) ** (x))) / math.sqrt(5)) for x in range(n)] //where n is the number of terms in the series
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since each fibonacci number is generated from all prior ones, it doesn't make sense to calculate each one from scratch.  It is better to use the list you are collecting Fibonacci numbers in to calculate each subsequent one:</p>
<pre><code>def FibList(n):
    rc = []
    for i in xrange(n):
        if i &lt; 2:
            rc.append(1)
        else:
            rc.append(rc[i-2] + rc[i-1])

    return rc

print FibList(20)
</code></pre>
<p>If you really want to be spiffy, you can create a generator  function that calculates a Fibonacci value, and use that to build your list:</p>
<pre><code>def Fib(n):
    n1 = 1
    n2 = 1

    for i in xrange(n):
        if i &lt; 2:
            yield 1
        else:
            n3 = n1 + n2
            n1 = n2
            n2 = n3
            yield n3

fiblist = [x for x in Fib(20)]
print fiblist
</code></pre>
<p>In a generator function, the 'yield' keyword returns each value of the list.  The line where <code>fiblist</code> uses something called a "list comprehension` to build a list using a generator.  You could also use your generator in a for loop:</p>
<pre><code>for fnum in Fib(20):
    print fnum
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I just used the formula and plugged in values:</p>
<pre><code>import math 

def Fibs(n):

 for i in range (n):

     Fn=int(((((1+math.sqrt(5))**i) - ((1-math.sqrt(5)) **i))/(2**i) * (math.sqrt(5)))/5)
     print (Fn)

Fibs(int(input())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def fibonacci(number):
        numbers = [0, 1]
        while len(numbers) &lt; number:
            numbers[len(numbers):len(numbers)] = [numbers[len(numbers)-2] + numbers[len(numbers)-1]]
        return numbers
</code></pre>
<p>The two last values in the list gets added up every time the loop runs.
A new position in the list is created with the every new fibonacci value while iterating to the length of input.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not use a list comprehension? Here is how I would solve the problem. I would define a function to calculate the <strong>n</strong> th ter om of the fibonacci sequence as follows.</p>
<pre><code>def fibo(n):
    if n&lt;=2:
        return 1
    else:
        res = fibo(n-1) + fibo(n-2)
    return res
</code></pre>
<p>Then I would use list comprehension to get the sequence that I want.</p>
<pre><code>fib_sequence = [fibo(i) for i in range(n+1)]
</code></pre>
</div>
<span class="comment-copy">+1 Any question that begins with "I've been trying to improve my skills" deserves an upvote and immediate attention</span>
<span class="comment-copy">But its true, I was just writing this to be more competent at programming..</span>
<span class="comment-copy">@georgesl: <code>a, b = b, a + b</code> is perfectly fine in Python.</span>
<span class="comment-copy">@georgesl and once you get used to it you will wonder why other languages can't handle something so clean as multiple return values</span>
<span class="comment-copy">@DaBx I was being perfectly honest! Improving is the noblest goal of a programmer</span>
<span class="comment-copy">Get out of my mind :O (see my answer haha)</span>
<span class="comment-copy">@uʍopǝpısdn Hah, first! :P ^^</span>
<span class="comment-copy">Best explanation of the yield statement I've seen. It fit right in with my experiments on Fibonacci numbers. Thank you!</span>
<span class="comment-copy">It's still good you posted though.  Suggestions: 1) Pull your function definition outside of the loop.  2) Range returns a list, so you can just say <code>for n in range(20)</code> instead of <code>for n in numberlist</code> and doing all that work in the beginning.  3) I recommend looking into list comprehensions, the second loop could look something like: <code>fibonaccinumbers = [fib(n) for n in range(20)]</code></span>
<span class="comment-copy">Whoops sorry guys, only just saw the last comments!  I'll get right on it.</span>
<span class="comment-copy">If you change it as @J.F. Sebastian recommends, it will run much faster.  (Because it only runs through the loop in <code>fib</code> once.)</span>
<span class="comment-copy">Gotcha, I'll see if I can do that.</span>
<span class="comment-copy">You might want to look at all the answers… Also please do not answer your own question just to add further questions but edit your question instead. See also <a href="http://stackoverflow.com/faq#howtoask">the FAQ</a>.</span>
<span class="comment-copy">Ok sorry, thank you for all your help though.  Still not too sure what the generator does however.  I read the tip (<a href="http://stackoverflow.com/questions/102535/what-can-you-use-python-generator-functions-for" title="what can you use python generator functions for">stackoverflow.com/questions/102535/…</a>)</span>
<span class="comment-copy">@DaBx See my updated answer.</span>
