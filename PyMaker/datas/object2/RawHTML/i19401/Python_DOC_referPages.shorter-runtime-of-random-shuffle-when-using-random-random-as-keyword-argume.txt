<div class="post-text" itemprop="text">
<p>I just observed that when using Python3 the shuffling of a list with <code>random.shuffle</code> needs approximately half the runtime when explicitly submitting the function <code>random.random</code> for the <code>random</code> keyword argument. I checked whether Python2 has the same problem but found that it only occurs with Python3.</p>
<p>I use the following code to measure the runtime of the two versions:</p>
<pre><code>from timeit import Timer
t1 = Timer("random.shuffle(l)", "import random; l = list(range(100000))")
t2 = Timer("random.shuffle(l, random = random.random)", "import random; l = list(range(100000))")
print("With default rand: %s" % t1.repeat(10,1))
print("With custom rand: %s" % t2.repeat(10,1))
</code></pre>
<p>I made a <a href="http://ideone.com/VdP5dh" rel="noreferrer">testcase at ideone</a> for you to see with Python3 and the same code with <a href="http://ideone.com/pfoHcg" rel="noreferrer">Python2</a>.</p>
<p>According to the <a href="http://docs.python.org/3/library/random.html#random.shuffle" rel="noreferrer">documentation for shuffle</a> the same function <code>random.random</code> is used in the default case when I omit the optional keyword argument <code>random</code>, so there should be no difference when I give it the same function to generate the random number as in the default case.</p>
<p>I checked the respective sources (Python2 vs. Python3) for the <code>shuffle</code> function in the <code>Lib/random.py</code> folders and found that they behave the same way <em>if</em> I explicitly call the Python3 version with a function for the <code>random</code> keyword. If I omit this argument, Python3 uses the helper function <code>_randbelow</code> so there should be the root for my problem. I can't see why Python3 uses <code>_randbelow</code> because it slows <code>shuffle</code> down. As far as I understand it, its benefit lies in generating arbitrary large random numbers, but it should not slow down my shuffling of a list that has way fewer than 2^32 elements (100000 in my case).</p>
<p>Can anyone explain to me why I'm seeing such a difference in the runtimes although they should be closer together when I use Python3?</p>
<p>P.S.: Please note that I'm not interested why runtime with Python2 is better than with Python3, but the difference in runtime when using the argument <code>rand=rand.rand</code> argument in Python3 versus not using it in Python3 only.</p>
</div>
<div class="post-text" itemprop="text">
<p>The docstring in the function <code>random.shuffle</code> contradicts the code.
In python 2.7.2+ the docstring is correct:</p>
<pre><code>    def shuffle(self, x, random=None, int=int):
    """x, random=random.random -&gt; shuffle list x in place; return None.

    Optional arg random is a 0-argument function returning a random
    float in [0.0, 1.0); by default, the standard random.random.
    """

    if random is None:
        random = self.random
    for i in reversed(xrange(1, len(x))):
        # pick an element in x[:i+1] with which to exchange x[i]
        j = int(random() * (i+1))
        x[i], x[j] = x[j], x[i]
</code></pre>
<p>But in Python 3.2 we find:</p>
<pre><code>def shuffle(self, x, random=None, int=int):
    """x, random=random.random -&gt; shuffle list x in place; return None.

    Optional arg random is a 0-argument function returning a random
    float in [0.0, 1.0); by default, the standard random.random.
    """

    randbelow = self._randbelow
    for i in reversed(range(1, len(x))):
        # pick an element in x[:i+1] with which to exchange x[i]
        j = randbelow(i+1) if random is None else int(random() * (i+1))
        x[i], x[j] = x[j], x[i]
</code></pre>
<p>So the docstring still tells the old story, but now the default function used is random.randbelow</p>
</div>
