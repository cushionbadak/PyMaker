<div class="post-text" itemprop="text">
<p>I would like to use argparse to parse boolean command-line arguments written as "--foo True" or "--foo False". For example:</p>
<pre><code>my_program --my_boolean_flag False
</code></pre>
<p>However, the following test code does not do what I would like:</p>
<pre><code>import argparse
parser = argparse.ArgumentParser(description="My parser")
parser.add_argument("--my_bool", type=bool)
cmd_line = ["--my_bool", "False"]
parsed_args = parser.parse(cmd_line)
</code></pre>
<p>Sadly, <code>parsed_args.my_bool</code> evaluates to <code>True</code>. This is the case even when I change <code>cmd_line</code> to be <code>["--my_bool", ""]</code>, which is surprising, since <code>bool("")</code> evalutates to <code>False</code>.</p>
<p>How can I get argparse to parse <code>"False"</code>, <code>"F"</code>, and their lower-case variants to be <code>False</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yet another solution using the previous suggestions, but with the "correct" parse error from <code>argparse</code>:</p>
<pre><code>def str2bool(v):
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')
</code></pre>
<p>This is very useful to make switches with default values; for instance</p>
<pre><code>parser.add_argument("--nice", type=str2bool, nargs='?',
                        const=True, default=NICE,
                        help="Activate nice mode.")
</code></pre>
<p>allows me to use:</p>
<pre><code>script --nice
script --nice &lt;bool&gt;
</code></pre>
<p>and still use a default value (specific to the user settings). One (indirectly related) downside with that approach is that the 'nargs' might catch a positional argument -- see <a href="https://stackoverflow.com/questions/26985650/argparse-do-not-catch-positional-arguments-with-nargs">this related question</a> and <a href="http://bugs.python.org/issue9338" rel="noreferrer">this argparse bug report</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think a more canonical way to do this is via:</p>
<pre><code>command --feature
</code></pre>
<p>and</p>
<pre><code>command --no-feature
</code></pre>
<p><code>argparse</code> supports this version nicely:</p>
<pre><code>parser.add_argument('--feature', dest='feature', action='store_true')
parser.add_argument('--no-feature', dest='feature', action='store_false')
parser.set_defaults(feature=True)
</code></pre>
<hr/>
<p>Of course, if you really want the <code>--arg &lt;True|False&gt;</code> version, you could pass <code>ast.literal_eval</code> as the "type", or a user defined function ...</p>
<pre><code>def t_or_f(arg):
    ua = str(arg).upper()
    if 'TRUE'.startswith(ua):
       return True
    elif 'FALSE'.startswith(ua):
       return False
    else:
       pass  #error condition maybe?
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I recommend mgilson's answer but  with a mutually exclusive group<br/>
so that you cannot use <code>--feature</code> and <code>--no-feature</code> at the same time.</p>
<pre><code>command --feature
</code></pre>
<p>and</p>
<pre><code>command --no-feature
</code></pre>
<p>but not</p>
<pre><code>command --feature --no-feature
</code></pre>
<p>Script:</p>
<pre><code>feature_parser = parser.add_mutually_exclusive_group(required=False)
feature_parser.add_argument('--feature', dest='feature', action='store_true')
feature_parser.add_argument('--no-feature', dest='feature', action='store_false')
parser.set_defaults(feature=True)
</code></pre>
<p>You can then use this helper if you are going to set many of them:</p>
<pre><code>def add_bool_arg(parser, name, default=False):
    group = parser.add_mutually_exclusive_group(required=False)
    group.add_argument('--' + name, dest=name, action='store_true')
    group.add_argument('--no-' + name, dest=name, action='store_false')
    parser.set_defaults(**{name:default})

add_bool_arg(parser, 'useful-feature')
add_bool_arg(parser, 'even-more-useful-feature')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There seems to be some confusion as to what <code>type=bool</code> and <code>type='bool'</code> might mean.  Should one (or both) mean 'run the function <code>bool()</code>, or 'return a boolean'?  As it stands <code>type='bool'</code> means nothing.  <code>add_argument</code> gives a <code>'bool' is not callable</code> error, same as if you used <code>type='foobar'</code>, or <code>type='int'</code>.</p>
<p>But <code>argparse</code> does have registry that lets you define keywords like this.  It is mostly used for <code>action</code>, e.g. `action='store_true'.  You can see the registered keywords with:</p>
<pre><code>parser._registries
</code></pre>
<p>which displays a dictionary</p>
<pre><code>{'action': {None: argparse._StoreAction,
  'append': argparse._AppendAction,
  'append_const': argparse._AppendConstAction,
...
 'type': {None: &lt;function argparse.identity&gt;}}
</code></pre>
<p>There are lots of actions defined, but only one type, the default one, <code>argparse.identity</code>.</p>
<p>This code defines a 'bool' keyword:</p>
<pre><code>def str2bool(v):
  #susendberg's function
  return v.lower() in ("yes", "true", "t", "1")
p = argparse.ArgumentParser()
p.register('type','bool',str2bool) # add type keyword to registries
p.add_argument('-b',type='bool')  # do not use 'type=bool'
# p.add_argument('-b',type=str2bool) # works just as well
p.parse_args('-b false'.split())
Namespace(b=False)
</code></pre>
<p><code>parser.register()</code> is not documented, but also not hidden.  For the most part the programmer does not need to know about it because <code>type</code> and <code>action</code> take function and class values.  There are lots of stackoverflow examples of defining custom values for both.</p>
<hr/>
<p>In case it isn't obvious from the previous discussion, <code>bool()</code> does not mean 'parse a string'.  From the Python documentation: </p>
<blockquote>
<p>bool(x): Convert a value to a Boolean, using the standard truth testing procedure. </p>
</blockquote>
<p>Contrast this with </p>
<blockquote>
<p>int(x): Convert a number or string x to an integer.  </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>oneliner:</p>
<pre><code>parser.add_argument('--is_debug', default=False, type=lambda x: (str(x).lower() == 'true'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another variation without extra row/s to set default values. The bool always have a value assigned so that it can be used in logical statements without pre-checks.</p>
<pre><code>import argparse
parser = argparse.ArgumentParser(description="Parse bool")
parser.add_argument("--do-something", default=False, action="store_true" , help="Flag to do something")
args = parser.parse_args()

if args.do_something == True:
     print("Do something")
else:
     print("Don't do something")
print("Check that args.do_something=" + str(args.do_something) + " is always a bool")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I was looking for the same issue, and imho the pretty solution is :</p>
<pre><code>def str2bool(v):
  return v.lower() in ("yes", "true", "t", "1")
</code></pre>
<p>and using that to parse the string to boolean as suggested above.</p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to what @mgilson said, it should be noted that there's also a <a href="http://docs.python.org/dev/library/argparse.html#mutual-exclusion"><code>ArgumentParser.add_mutually_exclusive_group(required=False)</code></a> method that would make it trivial to enforce that <code>--flag</code> and <code>--no-flag</code> aren't used at the same time.</p>
</div>
<div class="post-text" itemprop="text">
<p>This works for everything I expect it to:</p>
<pre><code>add_boolean_argument(parser, 'foo', default=True)
parser.parse_args([])                   # Whatever the default was
parser.parse_args(['--foo'])            # True
parser.parse_args(['--nofoo'])          # False
parser.parse_args(['--foo=true'])       # True
parser.parse_args(['--foo=false'])      # False
parser.parse_args(['--foo', '--nofoo']) # Error
</code></pre>
<p>The code:</p>
<pre><code>def _str_to_bool(s):
    """Convert string to bool (in argparse context)."""
    if s.lower() not in ['true', 'false']:
        raise ValueError('Need bool; got %r' % s)
    return {'true': True, 'false': False}[s.lower()]

def add_boolean_argument(parser, name, default=False):                                                                                               
    """Add a boolean argument to an ArgumentParser instance."""
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        '--' + name, nargs='?', default=default, const=True, type=_str_to_bool)
    group.add_argument('--no' + name, dest=name, action='store_false')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simpler way would be to use as below.</p>
<pre><code>parser.add_argument('--feature', type=lambda s: s.lower() in ['true', 't', 'yes', '1'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A quite similar way is to use:</p>
<pre><code>feature.add_argument('--feature',action='store_true')
</code></pre>
<p>and if you set the argument --feature in your command </p>
<pre><code> command --feature
</code></pre>
<p>the argument will be True, if you do not set type --feature the arguments default is always False! </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>class FlagAction(argparse.Action):
    # From http://bugs.python.org/issue8538

    def __init__(self, option_strings, dest, default=None,
                 required=False, help=None, metavar=None,
                 positive_prefixes=['--'], negative_prefixes=['--no-']):
        self.positive_strings = set()
        self.negative_strings = set()
        for string in option_strings:
            assert re.match(r'--[A-z]+', string)
            suffix = string[2:]
            for positive_prefix in positive_prefixes:
                self.positive_strings.add(positive_prefix + suffix)
            for negative_prefix in negative_prefixes:
                self.negative_strings.add(negative_prefix + suffix)
        strings = list(self.positive_strings | self.negative_strings)
        super(FlagAction, self).__init__(option_strings=strings, dest=dest,
                                         nargs=0, const=None, default=default, type=bool, choices=None,
                                         required=required, help=help, metavar=metavar)

    def __call__(self, parser, namespace, values, option_string=None):
        if option_string in self.positive_strings:
            setattr(namespace, self.dest, True)
        else:
            setattr(namespace, self.dest, False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the most canonical way will be:</p>
<pre><code>parser.add_argument('--ensure', nargs='*', default=None)

ENSURE = config.ensure is None
</code></pre>
</div>
<span class="comment-copy">Here is a one-liner interpretation of <a href="http://stackoverflow.com/a/15008806/52074">@mgilson's answer</a> <code>parser.add_argument('--feature', dest='feature', default=False, action='store_true')</code>. This solution will gurantee you always get a <code>bool</code> type with value <code>True</code> or <code>False</code>. (This solution has a constraint: your option must have a default value.)</span>
<span class="comment-copy">Here is a one-liner interpretation of <a href="http://stackoverflow.com/a/43357954/52074">@Maxim's answer</a> <code>parser.add_argument('--feature', dest='feature', type=lambda x:bool(distutils.util.strtobool(x)))</code>. When the option is used, this solution will ensure a <code>bool</code> type with value of <code>True</code> or <code>False</code>. When the option is not used you will get <code>None</code>. (<a href="http://stackoverflow.com/a/18472142/52074"><code>distutils.util.strtobool(x)</code> is from another stackoverflow question</a>)</span>
<span class="comment-copy">how about something like <code>parser.add_argument('--my_bool', action='store_true', default=False)</code></span>
<span class="comment-copy">What is the need to specify nargs, the OP is asking for just one argument. Please mention if I am missing something. :)</span>
<span class="comment-copy">nargs='?' means zero or one argument. <a href="https://docs.python.org/3/library/argparse.html#nargs" rel="nofollow noreferrer">docs.python.org/3/library/argparse.html#nargs</a></span>
<span class="comment-copy">I love this, but my equivalent of default=NICE is giving me an error, so I must need to do something else.</span>
<span class="comment-copy">@MarcelloRomani str2bool is not a type in the Python sense, it is the function defined above, you need to include it somewhere.</span>
<span class="comment-copy">Maybe it is worth mentioning that with this way you cannot check if argument is set with <code>if args.nice:</code> beacuse if the argument is set to False, it will never pass the condition. If this is right then maybe it is better to return list from <code>str2bool</code> function and set list as <code>const</code> parameter, like this <code>[True]</code>, <code>[False]</code>. Correct me if I am wrong</span>
<span class="comment-copy">I still think <code>type=bool</code> should work out of the box (consider positional arguments!). Even when you additionally specify <code>choices=[False,True]</code>, you end up with both "False" and "True" considered True (due to a cast from string to bool?).  <a href="http://bugs.python.org/issue14392" rel="nofollow noreferrer">Maybe related issue</a></span>
<span class="comment-copy">Right, I just think there is no justification for this not working as expected. And this is extremely misleading, as there are no safety checks nor error messages.</span>
<span class="comment-copy">@mgilson -- What I find misleading is that you <b>can</b> set type=bool, you get no error message, and yet, for both "False" and "True" string arguments, you get True in your supposedly boolean variable (due to how type casting works in python). So either type=bool should be clearly unsupported (emit some warning, error, etc.), or it should work in a way that is useful and intuitively expected.</span>
<span class="comment-copy">@dolphin -- respectively, I disagree.  I think that the behavior is exactly the way it should be and is consistent with the zen of python "Special cases aren't special enough to break the rules".  However, if you feel this strongly about it, why not bring it up on one of the various python <a href="https://mail.python.org/mailman/listinfo" rel="nofollow noreferrer">mailing lists</a>?  There, you might have a chance at convincing someone who has the power to <i>do</i> something about this issue.  Even if you were able to convince me, you will have only succeeded in convincing me and the behavior still won't change since I'm not a dev:)</span>
<span class="comment-copy">Are we arguing about what the Python <code>bool()</code> function should do, or what argparse should accept in <code>type=fn</code>?  All <code>argparse</code> checks is that <code>fn</code> is callable.  It expects <code>fn</code> to take one string argument, and return a value.  The behavior of <code>fn</code> is the programer's responsibility, not <code>argparse's</code>.</span>
<span class="comment-copy">@CharlieParker <code>add_argument</code> is called with <code>dest='feature'</code>. <code>set_defaults</code> is called with <code>feature=True</code>. Understand?</span>
<span class="comment-copy">This or mgilson's answer should have been the accepted answer - even though the OP wanted <code>--flag False</code>, part of SO answers should be about WHAT they're trying to solve, not just about HOW. There should be absolutely no reason to do <code>--flag False</code> or <code>--other-flag True</code> and then use some custom parser to convert the string to a boolean.. <code>action='store_true'</code> and <code>action='store_false'</code> are the best ways to use boolean flags</span>
<span class="comment-copy">@kevlarr, While it's often very helpful to extrapolate about what the asker is trying to solve, SO is ultimately about answering the question as stated.  (This has occasionally been a source of frustration for me on SO: not getting an answer to a simple question because all answerers were making assumptions about what I was trying to solve).  That said, I do like this answer.</span>
<span class="comment-copy">@cowlinator Why is SO ultimately about answering "questions as stated"? According to <a href="https://stackoverflow.com/help/how-to-answer">its own guidelines</a>, an anwer <code>... can be “don’t do that”, but it should also include “try this instead”</code> which (at least to me) implies answers should go deeper when appropriate. There are definitely times when some of us posting questions can benefit from guidance on better/best practices, etc.. Answering "as stated" often doesn't do that. That being said, your frustration with answers often assuming too much (or incorrectly) is completely valid.</span>
<span class="comment-copy">If one wants to have a third value for when the user has not specified feature explicitly, he needs to replace the last line with the <code>parser.set_defaults(feature=None)</code></span>
<span class="comment-copy">+1 for <code>parser.register</code>.</span>
<span class="comment-copy">Or use:  parser.register('type', 'bool', (lambda x: x.lower() in ("yes", "true", "t", "1")))</span>
<span class="comment-copy">I think it is a very nice solution. lambda is god!</span>
<span class="comment-copy">good for oneliner fan, also it could be improved a bit: <code>type=lambda x: (str(x).lower() in ['true','1', 'yes'])</code></span>
<span class="comment-copy">This answer is underrated, but wonderful in its simplicity. Don't try to set <code>required=True</code> or else you'll always get a True arg.</span>
<span class="comment-copy">Please <i>NEVER</i> use equality operator on things like bool or nonetype. You should use <i>IS</i>  instead</span>
<span class="comment-copy">If you're going to go this route, might I suggest <code>distutils.util.strtobool(v)</code>.</span>
<span class="comment-copy">Excellent! I'm going with this answer. I tweaked my <code>_str_to_bool(s)</code> to convert <code>s = s.lower()</code> once, then test <code>if s not in {'true', 'false', '1', '0'}</code>, and finally <code>return s in {'true', '1'}</code>.</span>
<span class="comment-copy">Why is this not the accepted solution? It's so simple!</span>
