<div class="post-text" itemprop="text">
<p>I am trying to print out just the dict values inside a list in python.</p>
<pre><code>car_object = {}
    cursor = self._db.execute('SELECT IDENT, MAKE, MODEL, DISPLACEMENT, POWER, LUXURY FROM CARS')
    for row in cursor:
       objectname = 'Car_Object_'+str(row['IDENT'])
       # print (objectname)
       car_object[objectname] = Cars(ident = row['IDENT'], make = row['MAKE'], model = row['MODEL'], disp = row['DISPLACEMENT'], power = row['POWER'], luxury = row['LUXURY'])
       print(objectname, car_object[objectname])
        #print(row['IDENT'], row['MAKE'], row['MODEL'], row['DISPLACEMENT'], row['POWER'], row['LUXURY'])

       yield dict(row)
</code></pre>
<p>So it is printing: </p>
<pre><code>Car_Object_meA160 {'power': 55, 'ident': 'meA160', 'model': 'A160 CDI', 'disp': 1.7, 'make': 'mercedes', 'luxury': 'N'}
Car_Object_meA190 {'power': 92, 'ident': 'meA190', 'model': 'A190', 'disp': 1.7, 'make': 'mercedes', 'luxury': 'Y'}
Car_Object_meA210 {'power': 103, 'ident': 'meA210', 'model': 'A210 EVO', 'disp': 1.7, 'make': 'mercedes', 'luxury': 'Y'}
</code></pre>
<p>...and so on
I want to be able to print it like so:</p>
<pre><code>                      IDENT         MAKE         MODEL        DISP       POWER     LUX
Car_Object_meA160     meA160       mercedes      A160 CDI     1.7          55      N
Car_Object_meA190     meA190       mercedes      A190         1.7          92      Y
Car_Object_meA210     meA210       mercedes      A210 EVO     1.7          103     Y
</code></pre>
<p>So i want to be able to print just the values....with the headers ordered a certain way. Is it possible to do this? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>The tricky part is aligning the several table entries and the table headers. For this, we first have to find out how long the longest entry in each column is. <code>pad</code> then can be used to add a number of padding spaces to the given string.</p>
<pre><code>fields = ["ident", "make", "model", "disp", "power", "luxury"]
max_len = {"name": max(map(len, car_objects)) + 1}
for f in fields:
    max_len[f] = max(map(len, [f] + [str(car[f]) for car in car_objects.values()]))
pad = lambda s, f: str(s).ljust(max_len[f])
</code></pre>
<p>Now, we can print the headers and the several entries in <code>car_objects</code> using the <code>pad</code> function defined above.</p>
<pre><code>print pad("", "name") + " ".join(pad(f.upper(), f) for f in fields)
for name, car in car_objects.items():
    print pad(name, "name") + " ".join(pad(car[f], f) for f in fields)
</code></pre>
<p>This should work, assuming that the elements of <code>car_objects</code> are Python dictionaries. If not, try to replace <code>car[f]</code> with <code>getattr(c, f)</code> in the above code.</p>
<p><strong>Update:</strong> Of course, perfectly aligning the columns of the table only works if you know all the rows before actually printing them. If you have to print them <em>while still reading entries from the database</em>, you have to 'guess' by how many spaces to pad the strings so they are nicely aligned in a table. This makes everything <em>much</em> simpler. Just put this line before your <code>for</code> loop for printing the table headers:</p>
<pre><code>print (" " * 20) + " ".join(f.upper().ljust(10) for f in fields)
</code></pre>
<p>And this line inside your loop, before the <code>yield</code>:</p>
<pre><code>print name.ljust(20) + " ".join(str(getattr(car, f)).ljust(10) for f in fields)
</code></pre>
<p><code>str.ljust(n)</code> is a standard string function that return the string aligned to the left within a total width of <code>n</code> characters. There are similar functions for aligning right and center alignment: <code>rjust</code> and <code>center</code>. And since your cars seem to be instances of some class, you can use the builtin function <code>getattr(&lt;object&gt;, &lt;attribute name&gt;)</code> to retrieve the individual attributes of the cars (similar to your <code>getVariable</code> method).</p>
<p>For more on string formatting, take a look a this <a href="http://docs.python.org/3/tutorial/inputoutput.html#fancier-output-formatting" rel="nofollow">Python documentation page</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this: </p>
<pre><code>#print your header labels first                                                                                                                       
d = {'power': 55, 'ident': 'meA160', 'model': 'A160 CDI', 'disp': 1.7, 'make': 'mercedes', 'luxury': 'N'}
# this is for each car                                                                                                                                
headers = ['ident', 'make', 'model', 'disp', 'power', 'luxury'] # change this order if you   want different order                                       
values = [d[h] for h in headers]
print("{0:12}{1:12}{2:12}{3:12}{4:12}{5:12}".format(values[0], values[1], values[2], values[3], values[4], values[5]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try the following... I tested it with dictionaries so I access the attributes you have as <code>car_object[obj][key.lower()]</code>. I can't say without looking at your Cars class, but you should probably replace it with something like <code>car_obj[obj].__getattribute__(key.lower())</code></p>
<pre><code>car_object = {}
car_object['Car_Object_meA160'] = {'power': 55, 'ident': 'meA160', 'model': 'A160 CDI', 'disp': 1.7, 'make': 'mercedes', 'luxury': 'N'}
car_object['Car_Object_meA190'] = {'power': 92, 'ident': 'meA190', 'model': 'A190', 'disp': 1.7, 'make': 'mercedes', 'luxury': 'Y'}
car_object['Car_Object_meA210'] = {'power': 103, 'ident': 'meA210', 'model': 'A210 EVO', 'disp': 1.7, 'make': 'mercedes', 'luxury': 'Y'}

keys = ['IDENT', 'MAKE', 'MODEL', 'DISP', 'POWER', 'LUXURY']
fmt ='{:&gt;10}' * (len(keys) + 1)
print ' '*len('Car_Object_meA160'), fmt.format('', *keys)

for obj in car_object:
    print obj, fmt.format('', *([car_object[obj][key.lower()] for key in keys]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes. Here's a quick function that takes a list and prints out what you want.</p>
<pre><code>def output(cars):
    print "          IDENT        MAKE        MODEL        DISP        POWER"
    for i in cars:
        print type(i),"    ",i[ident],"   ",i[make],"   ",i[model],"   ",i[disp],"   ",i[power]
</code></pre>
<p>It should print out as many cars that you put it.  although i am not positive about the spacing.</p>
</div>
<span class="comment-copy">If you don't know how to do this, then you should learn python first. There are tonnes of resources on the internet on how to format print. Python makes it ridiculously easy to "printf".</span>
<span class="comment-copy">I have scoured the internet on how to do this, and can't figure it out.</span>
<span class="comment-copy">Since you are "getting only one row" with all the answers provided here, how many rows do you get if you simply put a <code>print</code> statement in your <code>for</code> loop? You are using a generator function. Are you sure you read all the values from the generator, or only the first one? And why are you using a generator in the first place?</span>
<span class="comment-copy">@tobias_k: I get all rows when I do this: <code>print(objectname, car_object[objectname])</code> .  I'm using a generator, because that's what we're required to use for the project...I know not the best thing, but someone wants it this way.</span>
<span class="comment-copy">Figured it out at last.  I made a get_Variable function in the Cars class and am calling <code>car_object[objectname].getVariable('model'), car_object[objectname].getVariable('make') </code>.....etc. This works and is a much simpler solution. Thank you.</span>
<span class="comment-copy">only brings back 1 row <code>for row in cursor:            objectname = 'Car_Object_'+str(row['IDENT']) car_object[objectname] = Cars(ident = row['IDENT'], make = row['MAKE'], model = row['MODEL'], disp = row['DISPLACEMENT'], power = row['POWER'], luxury = row['LUXURY'])            fields = ["ident", "make", "model", "disp", "power", "luxury"]            max_len = {"name": max(map(len, car_object)) + 1}         for f in fields:             max_len[f] = max(map(len, [f] + [getattr(car,f) for car in car_object.values()]))             pad = lambda s, f: s + (" " * (max_len[f] - len(s)))</code></span>
<span class="comment-copy">@user2096860 Well, you have to insert the code after all the cars have been added to <code>car_objects</code>, i.e. after the <code>for</code> loop; otherwise how to align the rows?</span>
<span class="comment-copy">@zz3599...this throws an error     'values = [d[h] for h in headers] TypeError: 'Cars' object is not subscriptable'</span>
<span class="comment-copy">that means the Cars object is not a dictionary. You should be using what I gave you for each row, not the entire list.</span>
<span class="comment-copy">yes, if I only put a single row of data in d it works...how to make it more generic for all the rows I'm printing though? I have 30+ of these?</span>
<span class="comment-copy"><code>headers</code> list should only be declared once. You put the rest inside the for loop, which will only process one row at a time.</span>
<span class="comment-copy">I have this now: <code>def __iter__(self):         headers = ['ident', 'make', 'model', 'disp', 'power', 'luxury']         car_object = {}         cursor = self._db.execute('SELECT IDENT, MAKE, MODEL, DISPLACEMENT, POWER, LUXURY FROM CARS')         for row in cursor:            objectname = 'Car_Object_'+str(row['IDENT'])</code></span>
<span class="comment-copy">I am only getting 1 row with this....The above is just an example...I have about 30 some rows generated from reading the data from the db.</span>
<span class="comment-copy">the for loop over car_object should find all the "rows". Does running car_object.keys() output all 30 keys?</span>
<span class="comment-copy">is there a way for you to retype the method, please?...i think i'm definitely missing something simple in here...since it is correctly bringing back 1 row.</span>
<span class="comment-copy">Does running car_object.keys() output all 30 keys? YES.</span>
