<div class="post-text" itemprop="text">
<p>I'm writing a translator from a Markdown-like markup to HTML. I have completed the script, except for ordered/unordered list translation. I want to format lists based on significant whitespace (aka off-side rule). Example valid input is like this:</p>
<pre><code>:: List item 
   top level
 :: List item level 2
 :: List item level 2
    :: List item level 3
      :: List item level 4
 :: List item level 2

:: List item top level
</code></pre>
<p><code>::</code> denotes a list item. Indentation levels might be arbitary. Tabs are not significant. I have been working on solutions on paper, but I couldn't figure out a way to implement. How should I go about this?</p>
<p>P.S: As long as it is more than one, any arbitary amout of spaces denotes a new level, like in python.</p>
<p>I'm using python to implement this, but I'm not looking for code. I want explanation of how to do. And preferably I want to implement the complete thing myself, without any libraries. I'm going to use this markup for my jekyll blog, but this is more than a little tool for me, I want to learn as much as I can about regular expressions and parsing from this project. Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>@delnan's link to the <a href="http://docs.python.org/3/reference/lexical_analysis.html#indentation" rel="nofollow">Python reference</a> provides a good approach, but (as the reference itself suggests) Python allows correct indentation that is also confusing to read and (if you try to take advantage of its full liberality) potentially tricky to debug.</p>
<p>For your application, it might be less confusing for the user if you required each unique number of indenting spaces to indicate a different list level. For those semantics, you can find the levels for the list in no more than four lines of Python 3. You didn't want to see a solution in code (though I'd be happy to post it if you'd like) so my approach was roughly as follows:</p>
<ol>
<li>count the number of spaces at the start of each line of the list (which doesn't need a regular expression).</li>
<li>create a set and sort it to give a list of the number of indenting spaces used for each level of this list, ordered from least to most.</li>
<li>create a dictionary that relates the number of indenting spaces used in each case to a list level.</li>
<li>refer to that dictionary using the number of spaces at the start of each line of the list, which gives the list level for each line.</li>
</ol>
<p>(EDITED to include the code and to handle multi-line list items)</p>
<p>Given:</p>
<pre><code>:: List item
   (this is the second line of the first list item)
 :: List item level 2
 :: List item level 2
    :: List item level 3
      :: List item level 4
 :: List item level 2
:: List item top leve
</code></pre>
<p>... the function below produces the list:</p>
<pre><code>:: List item (this is the second line of the first list item)
 :: List item level 2
 :: List item level 2
  :: List item level 3
   :: List item level 4
 :: List item level 2
:: List item top level
</code></pre>
<p>... which I think was the intended result for this test case.</p>
<p>Here's the code, written to accept the list from standard input:</p>
<pre><code>import sys

def findIndent (lst):
    # given a list of text strings, returns a list containing the
    # indentation levels for each string
    spcCount = [len(s)-len(s.lstrip(' ')) for s in lst]
    indent = sorted(set(spcCount))
    levelRef = {indent[i]:i for i in range(len(indent))}
    return [levelRef[i]+1 for i in spcCount]

lst = []
for li in sys.stdin:
    if li.lstrip(' ').find('::') == 0:
        lst.append(li.rstrip())
    else:
        lst[-1] = lst[-1].rstrip() + ' ' + li.lstrip(' ').rstrip()

for i,li in zip(findIndent(lst),lst):
    print (' '*i + li.lstrip())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not an answer, but I need block formatting.</p>
<p>What levels of list should this parse to?</p>
<pre><code>:: List item level 
  :: List item level ?
 :: List item level ?
    :: List item level ?
 :: List item level ?
   :: List item level ?
</code></pre>
<p>I think you're trying to cope with corner cases that don't make any sense in a list, when really you should just tell the user to write something more valid.</p>
</div>
<span class="comment-copy">I'd argue that your first <code>List item level 4</code> is an invalid use of a nested list, and so should cause a parse error of some kind.</span>
<span class="comment-copy">@Eric I concur with your critique. I've modified the question, removing the first level 4. Thanks :)</span>
<span class="comment-copy">There are <code>1</code> blank for level 2, <code>4</code> (+3) blanks for level 3, <code>6</code> (+2) blanks for level 4 . Is this normal ?</span>
<span class="comment-copy">@eyquem Indent levels need not necessarily increase by a fixed interval in python. I want to decide the level of list items by indentation like python interpreter decides the belonging of code blocks.</span>
<span class="comment-copy">@eyquem OP's right, Python is rather liberal about that (though you <i>should</i> be consistent for other reasons). See <a href="http://docs.python.org/3/reference/lexical_analysis.html#indentation" rel="nofollow noreferrer">docs.python.org/3/reference/lexical_analysis.html#indentation</a></span>
<span class="comment-copy">Thanks Simon! You can post code if you want, I meant I did not require code in my question. I'll try your answer today. And I wonder how would you go about porsing multi-line list items, like the <code>:: List item\n\s\s\stop level</code>, like the list on my question.</span>
<span class="comment-copy">I've edited my answer to deal with multi-line list items by pre-processing the list lines to concatenate multi-line items into single-line items first.</span>
<span class="comment-copy">Thanks for help @Simon. Although I have deferred this project due to time problems, you've been helpful.</span>
<span class="comment-copy">As I have changed my spec and question upon your comment, this input invalid.</span>
