<div class="post-text" itemprop="text">
<p>I am working on a project which has a python wrapper around java code.
So, there is a communication between python and java code. (I am aware of jython, but we wanted to keep each implementation separate.)</p>
<p>To talk from python to java, we pass a string like  </p>
<pre><code>{
    "1-1": {
        "Max Capacity (MB)": "393216",
        "Current Capacity (MB)": "24576",
        "Max Devices": "12",
        "Populated": "12"
    },
    "1-3": {
        "Max Capacity (MB)": "262144",
        "Current Capacity (MB)": "8192",
        "Max Devices": "32",
        "Populated": "2"
    },
    "1-2": {
        "Max Capacity (MB)": "393216",
        "Current Capacity (MB)": "4096",
        "Max Devices": "12",
        "Populated": "1"
    }
}
</code></pre>
<p>which is  a dict in python and we pass as a string to java code.</p>
<p>Is there I library in java which does parsing a python dict like string to a java hash-map or equivalent for easy traversal?</p>
<p><strong>Solution:</strong></p>
<p>The json solution worked. Used simplejson in python to convert the dict to json format 
and java gson library. Here is the java part:</p>
<pre><code>import java.util.Map;
import java.lang.reflect.Type;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class ReadFromJson {
    public static void main(String args[]) {
        Type mapOfStringObjectType = new TypeToken&lt;Map&lt;String, Map&lt;String,String&gt;&gt;&gt;() {}.getType();
        Gson gson = new Gson();
        Map&lt;String, Map&lt;String,String&gt;&gt; obj = gson.fromJson(jsonStringToBeRead, mapOfStringObjectType);
        System.out.println(obj);
    }
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I tried that but I am doing something like <code>java -dname="TheAboveString"</code> and retriving it by System.getProperty("name"), so not able to pass a well formed json.. â€“ kmad 15 mins ago</p>
</blockquote>
<p>...and why are you passing it as a system property? </p>
<p>Just pipe in the JSON <code>echo "TheAboveString" | java</code> and dump it from stdin to a JSON parser. This should be a little easier and <em>much</em> safer using the <a href="http://docs.python.org/3/library/subprocess.html" rel="nofollow">subprocess</a> module. </p>
</div>
<span class="comment-copy">Maybe you should communicate via JSON?</span>
<span class="comment-copy">I tried that but I am doing something like java -dname="TheAboveString" and retriving it by System.getProperty("name"), so not able to pass a well formed json..</span>
<span class="comment-copy">its because I need to run a junit test with the "TheAboveString" argument. There was no other way to pass an argument to a single junit test.</span>
<span class="comment-copy">@kmad Well, I suppose you could swap <code>System.in</code> with another <code>InputStream</code> that sends fake data. Maybe you should refactor your code so that the decoding method takes an <code>InputStream</code> as an argument so that it is easy to inject test data. Anyway, I don't think you should avoid JSON because you can't send strings into the application.</span>
