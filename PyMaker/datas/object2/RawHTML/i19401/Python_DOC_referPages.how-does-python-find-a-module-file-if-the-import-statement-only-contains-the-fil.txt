<div class="post-text" itemprop="text">
<p>Everywhere I see Python code importing modules using <code>import sys</code> or <code>import mymodule</code></p>
<p>How does the interpreter find the correct file if no directory or path is provided?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/tutorial/modules.html#the-module-search-path" rel="noreferrer">http://docs.python.org/3/tutorial/modules.html#the-module-search-path</a></p>
<blockquote>
<p>6.1.2. The Module Search Path</p>
<p>When a module named <code>spam</code> is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named <code>spam.py</code> in a list of directories given by the variable <code>sys.path</code>. <code>sys.path</code> is initialized from these locations:</p>
<ul>
<li>The directory containing the input script (or the current directory when no file is specified).</li>
<li><code>PYTHONPATH</code> (a list of directory names, with the same syntax as the shell variable <code>PATH</code>).</li>
<li>The installation-dependent default.</li>
</ul>
<blockquote>
<p>Note: On file systems which support symlinks, the directory containing the input script is calculated after the symlink is followed. In other words the directory containing the symlink is not added to the module search path.</p>
</blockquote>
<p>After initialization, Python programs can modify <code>sys.path</code>. The directory containing the script being run is placed at the beginning of the search path, ahead of the standard library path. This means that scripts in that directory will be loaded instead of modules of the same name in the library directory. This is an error unless the replacement is intended. See section Standard Modules for more information.</p>
</blockquote>
<p>For information on the "installation-specific default", see documentation on <a href="https://docs.python.org/3/library/site.html#module-site" rel="noreferrer">the <code>site</code> module</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Also, you can see what the current path is by using the <code>sys</code> module</p>
<pre><code>import sys
print(sys.path)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It uses the <a href="http://docs.python.org/2/using/cmdline.html#envvar-PYTHONPATH" rel="noreferrer">PYTHONPATH</a>, set as an environment variable, to find packages (folders containing <code>__init__.py</code> files) and modules (or, if already loaded once, retrieves the module object from <code>sys.modules</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has a path variable just like the one you have inside your terminal. Python looks for modules in folders inside that path, or in the folder where your program is located.</p>
</div>
<span class="comment-copy">Type <code>help("import")</code> at the console and enjoy.</span>
<span class="comment-copy"><a href="http://effbot.org/zone/import-confusion.htm" rel="nofollow noreferrer">effbot.org/zone/import-confusion.htm</a></span>
<span class="comment-copy"><a href="http://docs.python.org/2/reference/simple_stmts.html#the-import-statement" rel="nofollow noreferrer"><code>import</code> statement</a></span>
<span class="comment-copy">Note that everything presented here is a simplified model. The import mechanism is rather more complex, though it rarely matters for pure Python code. And since at least one version, the import machinery can be customized way more radically (for example, there's a small module which makes <code>import</code> download the latest version from Github and installs it!) which in turns makes the full story more complex.</span>
<span class="comment-copy">@DSM - Cool! I knew the <code>help()</code> command could be used to get help on modules, classes, and functions, but I never realized that it could give you help with keywords, too!</span>
<span class="comment-copy">The <code>site</code> module was the droid I was looking for. I've always wondered how a particular Python instance "knows" where things should be (aside from CWD files and whatever you append to <code>sys.path</code>. I love pulling back the curtain on things like this. Thank you!</span>
<span class="comment-copy">Thanks! By the way, is it in principle allowed to use absolute or relative paths? I'll accept in 10 minutes</span>
<span class="comment-copy">You can use either, but generally, absolute are preferred for clarity of code.</span>
<span class="comment-copy">Not really correct.  <code>PYTHONPATH</code> just augments the <code>sys.path</code>, and in most normal situations (modules imported from site-packages dirs) that env var needn't even exist.</span>
