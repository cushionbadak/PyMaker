<div class="post-text" itemprop="text">
<p>I'm working on an application that sends and receives data to another instance of itself via sockets, and I'm curious as to the most efficient way to encapsulate the data with an "END" tag. For instance, here are two functions used to read and write across the socket connection:</p>
<pre><code>def sockWrite(conn, data):
    data = data + ":::END"
    conn.write(data)

def sockRead(conn):
    data = ""
    recvdata = conn.read()
    while recvdata:
        data = data + recvdata
        if data.endswith(':::END'):
            data = data[:len(data)-6]
            break
        recvdata = conn.read()
    if data == "":
        print 'SOCKR: No data')
    else:
        print 'SOCKR: %s', data)
    return data
</code></pre>
<p>I'm basically tacking an ":::END" onto the write, because multiple reads could occur for this single write. Thus, the read loops until it hits the ":::END".</p>
<p>This of course causes a problem if the data variable contains the string ":::END" which happens to come at the end of one of the reads.</p>
<p>Is there a proper way to encapsulate the data with as minimum of bandwidth addition as possible? I had thought about pickle or json, but worried that will add a significant amount of bandwidth since I believe they will convert the binary data to ASCII. Am I correct with that?</p>
<p>Thanks,
Ben</p>
</div>
<div class="post-text" itemprop="text">
<p>Zeroth: Do you <em>really</em> need to optimize this?</p>
<p>Usually you send relatively small messages. Shaving 60 bytes off a 512-byte message is usually silly when you look at how much ethernet, IP, and TCP overhead you're ignoring, and the RTT that swamps the bandwidth.</p>
<p>On the other hand, when you <em>are</em> sending huge messages, there's often no need to send multiple messages on the same connection.</p>
<p>Look at common internet protocols like HTTP, IMAP, etc. Most of them use line-delimited, human-readable, easily-debuggable plain text. HTTP can send "the rest of the message" in binary, but then you close the socket after you finish sending.</p>
<p>99% of the time, this is good enough. If you don't think it's good enough in your case, I'd <em>still</em> write the text version of your protocol, and then add an optional binary version once you've got everything debugged and working (and then test to see whether it really makes a difference).</p>
<hr/>
<p>Meanwhile, there are two problems with your code.</p>
<p>First, as you recognize, if you're using <code>":::END"</code> as a delimiter, and your messages can include that string in their data, you have an ambiguity. The usual way to solve this problem is some form of escaping or quoting. For a really simple example:</p>
<pre><code>def sockWrite(conn, data):
    data = data.replace(':', r'\:') + ":::END"
    conn.write(data)
</code></pre>
<p>Now on the read side, you just pull off the delimiter, and then <code>replace('r\:', ':')</code> on the message. (Of course it's wasteful to escape every colon just to use a 6-byte <code>':::END'</code> delimiter—you might as well just use an unescaped colon as a delimiter, or write a more complex escaping mechanism.)</p>
<p>Second, you're right that "multiple reads could occur for this single write"—but it's also true that multiple writes could occur for this single read. You could read half of this message, plus half of the next. This means you can't just use <code>endswith</code>; you have to use something like <code>partition</code> or <code>split</code>, and write code that can handle multiple messages, and also write code that can store partial messages until the next time through the <code>read</code> loop.</p>
<hr/>
<p>Meanwhile, to your specific questions:</p>
<blockquote>
<p>Is there a proper way to encapsulate the data with as minimum of bandwidth addition as possible?</p>
</blockquote>
<p>Sure, there are at least three proper ways: Delimiters, prefixes, or self-delimiting formats.</p>
<p>You've already found the first. And the problem with it: unless there's some string that can never possibly appear in your data (e.g., <code>'\0'</code> in human-readable UTF-8 text), there is no delimiter you can pick that won't require escaping.</p>
<p>A self-delimiting format like JSON is the easiest solution. When the last opened brace/bracket closes, the message is over, and it's time for the next one.</p>
<p>Alternatively, you can prefix each message with a header that includes the length. This is what many lower-level protocols (like TCP) do. One of the simplest formats for this is <a href="http://en.wikipedia.org/wiki/Netstring" rel="nofollow">netstring</a>, where the header is just the length in bytes as an integer represented as a normal base-10 string, followed by a colon. The netstring protocol <em>also</em> uses a comma as a delimiter, which adds some error checking.</p>
<hr/>
<blockquote>
<p>I had thought about pickle or json, but worried that will add a significant amount of bandwidth since I believe they will convert the binary data to ASCII</p>
</blockquote>
<p><code>pickle</code> has both binary and text formats. As <a href="http://docs.python.org/3/library/pickle.html#data-stream-format" rel="nofollow">the documentation</a> explains, if you use protocol <code>2</code>, <code>3</code>, or <code>HIGHEST_PROTOCOL</code>, you will get a reasonably efficient binary format.  </p>
<p>JSON, on the other hand, only handles strings, numbers, arrays, and dictionaries. You have to manually render any binary data into a string (or an array of strings or numbers, or whatever) before you can JSON-encode it, and then reverse things on the other side. Two common ways to do this is are base-64 and hex, which add 25% and 100% respectively to the size of your data, but there are more efficient ways to do it if you really need to. </p>
<p>And of course the JSON protocol itself uses a few more characters than strictly necessary, what with all those quotes and commas and so on, and whatever names you give to any fields are sent as uncompressed UTF-8. You can always replace JSON with <a href="http://bsonspec.org" rel="nofollow">BSON</a>, <a href="http://code.google.com/p/protobuf/" rel="nofollow">Protocol Buffers</a>, <a href="http://en.wikipedia.org/wiki/External_Data_Representation" rel="nofollow">XDR</a>, or other serialization formats that are less "wasteful" if it's really an issue.</p>
<p>Meanwhile, <code>pickle</code> isn't self-delimiting. You have to first split the messages apart, before you can unpickle them. JSON <em>is</em> self-delimiting, but you can't just use <code>json.loads</code> unless you first split the messages apart; you'll have to write something more complicated. The simplest thing that works is to repeatedly call <a href="http://docs.python.org/3/library/json.html#json.JSONDecoder.raw_decode" rel="nofollow"><code>raw_decode</code></a> on the buffer until you get an object.</p>
</div>
