<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/12330522/reading-a-file-without-newlines">Reading a file without newlines</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>I have a .txt file with values in it.</p>
<p>The values are listed like so:</p>
<pre class="lang-none prettyprint-override"><code>Value1
Value2
Value3
Value4
</code></pre>
<p>My goal is to put the values in a list. When I do so, the list looks like this:</p>
<p><code>['Value1\n', 'Value2\n', ...]</code></p>
<p>The <code>\n</code> is not needed.</p>
<p>Here is my code:</p>
<pre><code>t = open('filename.txt', 'r+w')
contents = t.readline()

alist = []

for i in contents:
    alist.append(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should do what you want (file contents in a list, by line, without \n)</p>
<pre><code>with open(filename) as f:
    mylist = f.read().splitlines() 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd do this:</p>
<pre><code>alist = [line.rstrip() for line in open('filename.txt')]
</code></pre>
<p>or:</p>
<pre><code>with open('filename.txt') as f:
    alist = [line.rstrip() for line in f]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#str.rstrip" rel="noreferrer"><code>.rstrip('\n')</code></a> to <em>only</em> remove newlines from the end of the string:</p>
<pre><code>for i in contents:
    alist.append(i.rstrip('\n'))
</code></pre>
<p>This leaves all other whitespace intact. If you don't care about whitespace at the start and end of your lines, then the big heavy hammer is called <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="noreferrer"><code>.strip()</code></a>.</p>
<p>However, since you are reading from a file and are pulling everything into memory <em>anyway</em>, better to use the <a href="https://docs.python.org/3/library/stdtypes.html#str.splitlines" rel="noreferrer"><code>str.splitlines()</code> method</a>; this splits one string on line separators and returns a list of lines without those separators; use this on the <code>file.read()</code> result and don't use <code>file.readlines()</code> at all:</p>
<pre><code>alist = t.read().splitlines()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>for each string in your list, use <code>.strip()</code> which removes whitespace from the beginning or end of the string:</p>
<pre><code>for i in contents:
    alist.append(i.strip())
</code></pre>
<p>But depending on your use case, you might be better off using something like <code>numpy.loadtxt</code> or even <code>numpy.genfromtxt</code> if you need a nice array of the data you're reading from the file.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from string import rstrip

with open('bvc.txt') as f:
    alist = map(rstrip, f)
</code></pre>
<p>Nota Bene: <code>rstrip()</code> removes the whitespaces, that is to say : <code>\f</code> ,  <code>\n</code> , <code>\r</code> , <code>\t</code> , <code>\v</code> , <code>\x</code> and blank <code></code> ,<br/>
but I suppose you're only interested to keep the significant characters in the lines.  Then, mere <code>map(strip, f)</code> will fit better, removing the heading whitespaces too.</p>
<hr/>
<p>If you really want to eliminate only the NL <code>\n</code> and RF <code>\r</code> symbols, do:</p>
<pre><code>with open('bvc.txt') as f:
    alist = f.read().splitlines()
</code></pre>
<p>splitlines() without argument passed doesn't keep the NL and RF symbols (Windows records the files with NLRF at the end of lines, at least on my machine) but keeps the other whitespaces, notably the blanks and tabs.</p>
<p>.</p>
<pre><code>with open('bvc.txt') as f:
    alist = f.read().splitlines(True)
</code></pre>
<p>has the same effect as </p>
<pre><code>with open('bvc.txt') as f:
    alist = f.readlines()
</code></pre>
<p>that is to say the NL and RF are kept</p>
</div>
<div class="post-text" itemprop="text">
<p>After opening the file, list comprehension can do this in one line:</p>
<pre><code>fh=open('filename')
newlist = [line.rstrip() for line in fh.readlines()]
fh.close()
</code></pre>
<p>Just remember to close your file afterwards.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had the same problem and i found the following solution to be very efficient. I hope that it will help you or everyone else who wants to do the same thing.</p>
<p>First of all, i would start with a "with" statement as it ensures the proper open/close of the file.</p>
<p>It should look something like this:</p>
<pre><code>with open("filename.txt", "r+") as f:
    contents = [x.strip() for x in f.readlines()]
</code></pre>
<p>If you want to convert those strings (every item in the contents list is a string) in integer or float you can do the following:</p>
<pre><code>contents = [float(contents[i]) for i in range(len(contents))]
</code></pre>
<p>Use <code>int</code> instead of <code>float</code> if you want to convert to integer.</p>
<p>It's my first answer in SO, so sorry if it's not in the proper formatting.</p>
</div>
<div class="post-text" itemprop="text">
<p>I used the strip function to get rid of newline character as split lines was throwing memory errors on 4 gb File.</p>
<p>Sample Code:</p>
<pre><code>with open('C:\\aapl.csv','r') as apple:
    for apps in apple.readlines():
        print(apps.strip())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I recently used this to read all the lines from a file:</p>
<pre><code>alist = open('maze.txt').read().split()
</code></pre>
<p>or you can use this for that little bit of extra added safety:</p>
<pre><code>with f as open('maze.txt'):
    alist = f.read().split()
</code></pre>
<p>It doesn't work with whitespace in-between text in a single line, but it looks like your example file might not have whitespace splitting the values. It is a simple solution and it returns an accurate list of values, and does not add an empty string: <code>''</code> for every empty line, such as a newline at the end of the file.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>with open('D:\\file.txt', 'r') as f1:
    lines = f1.readlines()
lines = [s[:-1] for s in lines]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way to do this is to write <code>file.readline()[0:-1]</code>
This will read everything except the last character, which is the newline.</p>
</div>
<span class="comment-copy">use Matrix[i][j] = map(int,sys.stdin.readline().split())</span>
<span class="comment-copy">Generally you do <b>not</b> want to read in all the lines first, store in a buffer, then strip newlines/ <code>splitlines()</code> - that needlessly wastes 2x memory if the file is large. You want to <code>rstrip()</code> each line's newline as you read it and iterate.</span>
<span class="comment-copy">This <a href="http://axialcorps.com/2013/09/27/dont-slurp-how-to-read-files-in-python/" rel="nofollow noreferrer">isn't very memory efficient</a>. Hence the "for line in [file object]" answer.</span>
<span class="comment-copy">mylist  = [i for i in mylist  if i != '']</span>
<span class="comment-copy">The url proposed from @bfrederix is broken. Here an archive.org copy <a href="https://web.archive.org/web/20160215030807/http://axialcorps.com/2013/09/27/dont-slurp-how-to-read-files-in-python/" rel="nofollow noreferrer">web.archive.org/web/20160215030807/http://axialcorps.com/2013/…</a></span>
<span class="comment-copy"><a href="https://www.hakkalabs.co/articles/how-to-read-files-in-python" rel="nofollow noreferrer">Don’t Slurp: How to Read Files in Python</a> on Hakka Labs. This was referenced by @bfrederix</span>
<span class="comment-copy">This can strip more than just <code>\n</code>.</span>
<span class="comment-copy">Trailing whitespace (space, tab, CR, LF, etc.) is never desirable, in my experience. There is no data or computer language I have dealt with in over twenty years that wanted trailing whitespace. So, yes, it strips more than \n. Chances are, you won't miss it.</span>
<span class="comment-copy">One situation where this could hurt would be right-stripping a tab-separated value file in which some rows had multiple empty values in their right-most cells. Those rows would have length shorter than the others if one were to split on \t ...</span>
<span class="comment-copy">@duhaime You are kind of switching context. If someone were asking, "How can I read in a file of CR-separated rows with tab-separated fields?" I would definitely recommend the use of python's CSV module. I would not be giving tips that are applicable to a purely text file with CR-separated lines of data. So tab-separated values is a circumstance where that would be bad and if stated that way, this answer would never be my recommendation.</span>
<span class="comment-copy">@hughdbrown amen, just wanted to flag this as a potential example of gronostaj's comment as this is the first Google result for stripping \n with readlines. Your point is understood though!</span>
<span class="comment-copy"><code>f.read().splitlines()</code> will be more efficient, I guess. And for int or float conversion, <code>map(int, f.read().splitlines())</code> might be better.</span>
<span class="comment-copy">The last character isn't always a  newline. It possible to create a text file that doesn't end in a newline (although most editors do include one).</span>
