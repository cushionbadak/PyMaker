<div class="post-text" itemprop="text">
<p>I have been having problems trying to run an external program from a python program that was generated from  a trigger in  a postgres 9.2 database.    The trigger works.  It writes to a file.  I had tried just running the external program but the permissions would not allow it to run.  I was able to create a folder (using os.system(“mkdir”)  ).  The owner of the folder is NETWORK SERVICE.    </p>
<p>I need to run a program called sdktest.  When I try to run it no response happens so I think that means that the   python program does not have enough permissions (with an owner of  NETWORK SERVICE)  to run it.</p>
<p>I have been having my program copy files that it needs into that directory so they would  have the correct permissions and that has worked to some degree but the program that I need to run is the last one and it is not running because it does not have enough permissions.</p>
<p>My python program runs a C++ program called  PG_QB_Connector which calls sdktest.  </p>
<p>Is there any way I can change the owner of the process to be a “normal” owner?    Is there a better way to do this?  Basically I just need to have this C++ program have eniough perms to run correctly.</p>
<p>BTW, when I  run the C++ program by hand, the line that runs the sdktest  program runs correctly, however, when I run it from the postgres/python it does not do anything...</p>
<p>I have Windows 7, python 3.2. The other 2 questions that I asked about this are located   <a href="https://stackoverflow.com/questions/14278109/python-not-calling-external-program">here</a>          and     <a href="https://stackoverflow.com/questions/14364928/python-not-calling-an-external-program-part-2">here</a></p>
<p>The python program:</p>
<pre><code>CREATE or replace FUNCTION scalesmyone (thename text)
RETURNS int
AS $$
a=5
f = open('C:\\JUNK\\frompython.txt','w')
f.write(thename)
f.close()
import os
os.system('"mkdir C:\\TEMPWITHOWNER"')
os.system('"mkdir C:\\TEMPWITHOWNER\\addcustomer"')
os.system('"copy  C:\\JUNK\\junk.txt C:\\TEMPWITHOWNER\\addcustomer"')
os.system('"copy  C:\\BATfiles\\junk6.txt   C:\\TEMPWITHOWNER\\addcustomer"')
os.system('"copy  C:\\BATfiles\\run_addcust.bat   C:\\TEMPWITHOWNER\\addcustomer"')
os.system('"copy  C:\\Workfiles\\PG_QB_Connector.exe  C:\\TEMPWITHOWNER\\addcustomer"')
os.system('"copy  C:\\Workfiles\\sdktest.exe  C:\\TEMPWITHOWNER\\addcustomer"')
import subprocess
return_code = subprocess.call(["C:\\TEMPWITHOWNER\\addcustomer\\PG_QB_Connector.exe", '"hello"'])
$$ LANGUAGE plpython3u;
</code></pre>
<p>The C++ program that is called from the python program and calls sdktest.exe is below</p>
<pre><code>command = "copy C:\\Workfiles\\AddCustomerFROMWEB.xml C:\\TEMPWITHOWNER\\addcustomer\\AddCustomerFROMWEB.xml";
system(command.c_str());


//everything  except for the qb file is in my local folder
command = "C:\\TEMPWITHOWNER\\addcustomer\\sdktest.exe  \"C:\\Users\\Public\\Documents\\Intuit\\QuickBooks\\Company Files\\Shain Software.qbw\"  C:\\TEMPWITHOWNER\\addcustomer\\AddCustomerFROMWEB.xml C:\\TEMPWITHOWNER\\addcustomer\\outputfromsdktestofaddcust.xml";
system(command.c_str());
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you want to invoke a command-line program from within a PostgreSQL trigger or function.</p>
<p>A usually-better alternative is to have the trigger send a <code>NOTIFY</code> and have a process with a PostgreSQL connection <code>LISTEN</code>ing for notifications. When a notification comes in, the process can start your program. This is the approach I would recommend; it's a lot cleaner and it means your program doesn't have to run under PostgreSQL's user ID. See <a href="http://www.postgresql.org/docs/current/static/sql-notify.html" rel="nofollow"><code>NOTIFY</code></a> and <a href="http://www.postgresql.org/docs/current/static/sql-listen.html" rel="nofollow"><code>LISTEN</code></a>.</p>
<p>If you really need to run commands from inside Pg:</p>
<p>You can use <a href="http://www.postgresql.org/docs/current/static/plpython.html" rel="nofollow"><code>PL/Pythonu</code></a> with <code>os.system</code> or <code>subprocess.check_call</code>; <a href="http://www.postgresql.org/docs/current/static/plperl.html" rel="nofollow"><code>PL/Perlu</code></a> with <code>system()</code>; etc. All these can  run commands from inside Pg if you need to. You can't invoke programs directly from PostgreSQL, you need to use one of the 'untrusted' (meaning fully privileged, not sandboxed) procedural languages to invoke external executables. PL/TCL can probably do it too.</p>
<p><strong>Update</strong>:</p>
<p>Your Python code as shown above has several problems:</p>
<ul>
<li>Using <code>os.system</code> in Python to copy files is just wrong. Use the <code>shutil</code> library: <a href="http://docs.python.org/3/library/shutil.html" rel="nofollow">http://docs.python.org/3/library/shutil.html</a> to copy files, and the simple <code>os.mkdir</code> command to create directories. </li>
<li>The double-layered quoting looks wrong; didn't you mean to quote only each argument not the whole command? You should be using <code>subprocess.call</code> instead of <code>os.system</code> anyway. </li>
<li>Your final <code>subprocess.call</code> invocation appears OK, but fails to check the error code so you'll never know if it went wrong; you should use <code>subprocess.check_call</code> instead.</li>
</ul>
<p>The C++ code also appears to fail to check for errors from the <code>system()</code> invocations so you'll never know if the command it runs fails.</p>
<p>Like the Python code, copying files in C++ by using the <code>copy</code> shell command is generally wrong. Microsoft Windows provides the <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa363851%28v=vs.85%29.aspx" rel="nofollow"><code>CopyFile</code></a> function for this; equivalents or alternatives exist on other platforms and you can use portable-but-less-efficient stream copying too.</p>
</div>
<span class="comment-copy">Do I understand correctly that a PostgreSQL trigger is generating a Python program and writing it to a file that you then want to invoke from a C++ program? This design seems extremely weird at best; I suspect that rather than making the current design work a change in approach may be warranted. Are you aware of PL/Python? Have you considered embedding the Python interpreter in your C++ program, fetching the program text from Pg over a libpq connection and executing it in the embedded Python interpreter?</span>
<span class="comment-copy">@CraigRinger,  No, that is not what I want to do.  In the most basic form I want the trigger from postgres to run the C++ program that I created called PG_QB_Connector. That program will do some processsing and call  sdktest.   I do not even care about python as part of postgres. I just need some way to have the postgres trigger  run the program.  As for your  suggestion, I do not think your libq connection would help that, will it?  Am I right in thhinking that I need a connection coming out of PG and not going in?</span>
<span class="comment-copy">Yeah, you're trying to do something different to what I thought you were. Adding answer now.</span>
<span class="comment-copy">You also need to check for errors and clean up how you invoke commands and perform tasks like copying files and making directories so you use the languages' tools rather than trying to invoke shell commands. +1 for linking to your earlier questions.</span>
<span class="comment-copy">I have vbeen using plpython3u.  I chose it because it is "untrusted". The os.system is what I have been running and that is what I have been having problems with....  I am looking at the NOTIFY and LISTEN and will get back to you with questions.    Thanks!!</span>
<span class="comment-copy">@Jim Added notes on your Python code. You're not getting an error because you're not asking for an exception to be thrown when the subprocess gets an error, and you're not checking the return code.</span>
<span class="comment-copy">The copying of files and folders was not the goal of the project.  That was just there for testing purposes.  The goal is to get the exe to run.  Everything else was just there for testing purposes to see if I could get the EXE  to run.    I do not see how NOTIFY/LISTEN will help...  I think they just work on internal objects.  Can you give me a sample where it works the way you think it would?  Thanks,</span>
<span class="comment-copy">An example that  especially shows setting it up to run a C++ program.  Thanks.</span>
<span class="comment-copy">@Jim No, I've spent about as much time as I can, I <i>really</i> can't implement a demo of your design. Listen and notify will help because you can use any PostgreSQL client to invoke the program you want to <i>under any user account</i>; you don't have to worry about running things under <code>NETWORKSERVICE</code> or (older versions) the <code>postgres</code> user account. It's easier to debug and trace with fewer confusing permissions issues. Anyway, my point regarding failure to check for errors in <code>subprocess.call</code> in my edited answer stands. You should use <code>check_call</code> or <code>check_output</code>.</span>
