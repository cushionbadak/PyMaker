<div class="post-text" itemprop="text">
<p>How can I encode the non-ascii(ascii &gt; 127) characters like (ö,ä,ü etc) of the string in UTF-16,so that “é” becomes “\u00e9” and “Ř” becomes “\u0158”. What I did is converted the char into hex and replaced the first two char with \u00 (for UTF-16). But this is not working ...giving me garbage values. Please help me with a right algorithm. </p>
<p>Here is what I wrote but it doesn't convert correctly:</p>
<pre><code>f = open ("input.txt","r")
data = f.read()
x=list(data) 
i=0

for element in x:
    if ord(element)&gt;127:
        y=hex(ord(x[i]))
        y=y[2:]
        y='\u00'+y
        x[i]=y
    i=i+1

data=''.join(x)
t= open("output.txt","w")
t.write(data)

f.close()
t.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/users/65696/tokenmacguy">@TokenMacGuy</a> had posted this answer to <a href="https://stackoverflow.com/questions/15275196/how-to-encode-characters-whoes-ascii-is-more-then-128-into-utf-16">the old question which you've deleted</a>. Since users with enough reputation can <em>still see</em> the deleted question, I'm copy-pasting it here for you:</p>
<hr/>
<p>So you're trying to convert from unicode to an ascii representation where non ascii codepoints are 'escaped'?  If so, how about:</p>
<pre><code>&gt;&gt;&gt; sample = u'some stuff: éŘ'
&gt;&gt;&gt; ''.join(c if 0 &lt; ord(c) &lt;= 127 else '\\u{:04x}'.format(ord(c)) for c in sample)
u'some stuff: \\u00e9\\u0158'
&gt;&gt;&gt; print ''.join(c if 0 &lt; ord(c) &lt;= 127 else '\\u{:04x}'.format(ord(c)) for c in sample)
some stuff: \u00e9\u0158
</code></pre>
<p>by the way, this algorithm is <em>NOT</em> utf-16; please don't call it that;, it's ASCII!  UTF-16 looks like this:</p>
<pre><code>&gt;&gt;&gt; sample.encode('utf-16')
'\xff\xfes\x00o\x00m\x00e\x00 \x00s\x00t\x00u\x00f\x00f\x00:\x00 \x00\xe9\x00X\x01'
</code></pre>
<p><sub>Note: you don't specify so this example is in python2.7, not python3; if you need that, please add it to your question </sub></p>
<hr/>
<p>I'm not sure if that would help you. Or maybe <a href="https://stackoverflow.com/users/65696/tokenmacguy">@TokenMacGuy</a> himself will edit this answer to make it more helpful. </p>
</div>
<div class="post-text" itemprop="text">
<p>open the file in binary mode</p>
<pre><code>with open(filename,"rb") as f:
     print f.read()
</code></pre>
<p>if that doesnt work try the codecs builtin</p>
<pre><code>import codecs

with codecs.open(filename,"rb",encoding="utf8") as f:
     print f.read()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the built-in <a href="http://docs.python.org/3/library/stdtypes.html#str.encode" rel="nofollow"><code>encode</code> method of strings</a>:</p>
<pre><code># A string with a single, non-ascii character.
s = '\u00e9'

# UTF-16 encoding beginning with a byte-order-mark to identify its endianness.
s.encode('utf-16')      # b'\xff\xfe\xe9\x00'

# UTF-16 big-endian, no byte-order-mark.
s.encode('utf-16-be')   # b'\x00\xe9'

# UTF-16 little-endian, no byte-order-mark.
s.encode('utf-16-le')   # b'\xe9\x00'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not clear from the question whether you want the characters as the literal string <code>'\u00xx'</code> or whether you want a Unicode string with the proper character in it.</p>
<p>To get the characters converted directly to Unicode, you must determine what code page they were originally created in and use it with <code>decode</code>. I'm guessing code page 852 here since it's the first one I could find that contains <code>Ř</code>.</p>
<pre><code>&gt;&gt;&gt; data = '\x82\xfc'
&gt;&gt;&gt; x = data.decode('cp852')
&gt;&gt;&gt; x
u'\xe9\u0158'
&gt;&gt;&gt; print x
éŘ
</code></pre>
<p>If you want to quickly convert it to a string that contains only ASCII with the non-ASCII characters replaced with an escape sequence, use the <code>unicode-escape</code> coding.</p>
<pre><code>&gt;&gt;&gt; y = x.encode('unicode-escape')
&gt;&gt;&gt; y
'\\xe9\\u0158'
&gt;&gt;&gt; print y
\xe9\u0158
</code></pre>
<p>The <a href="http://msdn.microsoft.com/en-us/goglobal/cc305143.aspx" rel="nofollow">Windows 1250 code page</a> also contains <code>Ř</code> but at a different value. The same technique works there too.</p>
<pre><code>&gt;&gt;&gt; data2 = '\xe9\xd8'
&gt;&gt;&gt; data2.decode('windows-1250')
u'\xe9\u0158'
</code></pre>
</div>
<span class="comment-copy">You asked this question before, but deleted it. I'll explain again: learn about Unicode and encodings <i>first</i>. UTF-16 comes in two flavours: little endian and big endian. <i>All</i> characters in UTF-16 are encoded to two bytes, only handling non-ASCII characters is <i>useless</i>.</span>
<span class="comment-copy">` open ("input.txt","rb")`  you need to open it to read binary ... then just try and print it</span>
<span class="comment-copy">Have you seen <a href="http://pymotw.com/2/codecs/" rel="nofollow noreferrer">pymotw.com/2/codecs</a> ?</span>
<span class="comment-copy">Would replacing <code>\u00</code> with <code>\\u00</code> fix it?</span>
