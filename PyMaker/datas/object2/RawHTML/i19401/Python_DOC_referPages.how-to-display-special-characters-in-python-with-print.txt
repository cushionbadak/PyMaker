<div class="post-text" itemprop="text">
<p>In a Python program that I am writing, I need to print the © (copyright) symbol. Is there an easy way to do this? Or is it not supported in Python? Here's an example.</p>
<pre><code>print ("\(copyright symbol here\)") 
</code></pre>
<p>Just a very simple problem. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, you can put Unicode characters inside strings in three ways. (If you're using 2.x instead of 3.x, it's simpler to use a Unicode string—as in <code>u"…"</code> instead of <code>"…"</code>—and you have to use <code>unichr</code> instead of <code>chr</code>, but otherwise everything is the same.)</p>
<ul>
<li>'©': Type it directly. 

<ul>
<li>This means you will probably have to pick a character encoding for your source code—e.g., explicitly save the file as UTF-8, and put an encoding header at the top of it. (For 3.3, UTF-8 is the default, so you don't need the encoding header if that's what you use.)</li>
<li>Under Mac OS X, in most languages' default keyboard setup, this is opt-G.</li>
<li>Under Windows, I believe you can use the alt-numeric-keypad trick with 0169 to enter it, although that doesn't seem very easy.</li>
<li>If you don't know how to type '©' with your keyboard, copy and paste it from elsewhere (google "copyright sign" and you should find a page you can copy it from—or, for that matter, right from here).</li>
<li>Or, your computer probably has a Character Viewer or something similar that lets you point and click at special characters.</li>
</ul></li>
<li>'\u00a9': Use the Unicode numeric escape sequence.

<ul>
<li>Google for "unicode copyright sign", and you'll quickly see that it's U+00A9. In Python, that's `'\u00a9'.</li>
<li>For anything outside the Basic Multilingual Plane—that is, more than 4 hex digits, use a capital <code>U</code> and 8 digits.</li>
</ul></li>
<li><code>'\N{COPYRIGHT SIGN}'</code>: Use a Unicode entity name escape sequence.

<ul>
<li>Again, you'll probably need to google to find the right name for the entity.</li>
<li>It isn't entirely documented what names you can and can't use. But it generally works when you expect it to, and <code>COPYRIGHT SIGN</code> is obviously more readable than <code>00a9</code>.</li>
</ul></li>
</ul>
<p>You can also do things indirectly—e.g., <code>unicodedata.lookup('COPYRIGHT SIGN')</code> or <code>chr(0xa9)</code> will return the same string as the literals above. But there's really no reason not to use a literal.</p>
<p>The <a href="http://docs.python.org/3/howto/unicode.html" rel="noreferrer">Unicode HOWTO</a> in the Python docs has a lot more detail on this—if you're not willing to read the whole thing, <a href="http://docs.python.org/3/howto/unicode.html#the-string-type" rel="noreferrer">The String Type</a> describes the different kinds of escape sequences (and the issues with encoding/decoding between unicode and bytes strings, which are especially important in 2.x), and <a href="http://docs.python.org/3/howto/unicode.html#unicode-literals-in-python-source-code" rel="noreferrer">Unicode Literals in Python Source Code</a> describes how to specify a coding declaration.</p>
<p>If you want an official list of all characters you can use, instead of just googling for them, look at the <a href="http://docs.python.org/3/library/unicodedata.html" rel="noreferrer"><code>unicodedata</code></a> docs for your version of Python, which contains links to the appropriate version of the Unicode Character Database. (For example, it's 6.1.0 in 3.3.0, 5.2.0 in 2.7.3, etc.) You'll have to navigate through a few links to get to the actual list, but this is the only way you'll get something that's guaranteed to be exactly what's compiled into Python. (And, if you don't care about that, you might as well just google it, or use Wikipedia or your computer's character viewer.)</p>
</div>
<div class="post-text" itemprop="text">
<p>In python 2:</p>
<pre><code>&gt;&gt;&gt; print u"\u00a9"
©
&gt;&gt;&gt; print u"\N{COPYRIGHT SIGN}"
©
</code></pre>
<p>In python 3:</p>
<pre><code>&gt;&gt;&gt; print("\u00a9")
©
&gt;&gt;&gt; print("\N{COPYRIGHT SIGN}")
©
</code></pre>
<p>In python 2 you must prefix the string with a u (<code>u"..."</code>) to tell python its a unicode string.  However, in python 3 all strings are unicode strings, so you don't have to (and actually aren't allowed to in 3.0-3.2) prefix the string with the u.</p>
<p>you can view a list of characters and their names / unicode values here: <a href="http://www.fileformat.info/info/charset/UTF-16/list.htm" rel="noreferrer">http://www.fileformat.info/info/charset/UTF-16/list.htm</a>
and use them the same way you are seeing the copyright symbol used here</p>
</div>
<div class="post-text" itemprop="text">
<p>Sure! Type the copyright symbol:</p>
<pre><code>print("©")
</code></pre>
<p>(There aren’t character entities in Python like there are in, say, HTML.)</p>
</div>
<div class="post-text" itemprop="text">
<p>The copyright sign is a unicode character. 
If your terminal supports a character encoding (such as utf-8 or cp1252) that includes this character, then you can print it:</p>
<p>This relies on Python detecting the terminal's character encoding:</p>
<pre><code>In [64]: print(u'\N{COPYRIGHT SIGN}')
©
</code></pre>
<p>This uses an explicit encoding (which happens to work since my terminal is set to use the utf-8 character encoding):</p>
<pre><code>In [65]: print(u'\N{COPYRIGHT SIGN}'.encode('utf-8'))
©
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>print u"\u00A9"
</code></pre>
<p>where "<a href="http://www.fileformat.info/info/unicode/char/a9/index.htm" rel="nofollow">\u00A9</a>" is the unicode character of the copyright symbol.</p>
</div>
<span class="comment-copy">As a side note: Do you really want those backslashes there? If so, it's better to either explicitly double them, or use a raw string, rather than relying on the fact that <code>\(</code> and <code>\)</code> happen not to be escape sequences.</span>
<span class="comment-copy">Hmm... Using just one backslash has always worked for me to print quotes and parentheses. Thanks for the advice though.</span>
<span class="comment-copy">Very helpful. Thanks!</span>
<span class="comment-copy">@LastTigerEyes: Don't post new questions as comments on existing answers. If you have a new question, create a new question. You can link back to this question or answer by using <code>share</code> to get a URL that you can paste into the new question. But please search for this one first; the problem printing Unicode output to the Windows <code>cmd.exe</code> terminal has been asked and answered dozens of times on this site, if not hundreds.</span>
<span class="comment-copy">Will do--thanks.</span>
<span class="comment-copy">Actually, you <i>are</i> allowed to prefix strings with <code>u</code> in Python 3.2 and later. (Of course it has no effect—but it's very handy for writing code that works with both 2.6-2.7 and 3.2+.)</span>
<span class="comment-copy">it was put back in for 3.3, but yes I should note that, thanks</span>
<span class="comment-copy">I'll point out that depending on your location, the copyright symbol is not exactly commonplace on keyboards...</span>
<span class="comment-copy">@Quirliom: Is it anywhere? I typed it using Compose, O, C, but otherwise, Character Maps could be the way to go.</span>
<span class="comment-copy">you could type this: <code>print("\xa9")</code> (in python3.2)</span>
<span class="comment-copy">@cIph3r: No, in Python 3, <code>chr(169)</code> (or, probably better, <code>chr(0xa9)</code> is not UTF-8, it's Unicode character #169. (And I assume you're using 3.x, given your previous comment and the fact that you're using <code>print</code> as a function, you're referring to 3.x.)</span>
<span class="comment-copy">@cIph3r: 1. But <code>chr(169)</code> does not return a UTF-8 string. It returns a Unicode string, whose underlying encoding is either explicitly UTF-16 or -32 (3.0-3.2), or an unspecified implementation detail (3.3), not UTF-8. 2. Hex is probably better because any reference, help page, etc. that gives you the number for the <code>©</code> character will give it to you in hex, e.g., as U+00A9. So you (and your readers) will not have to convert back and forth. 3. Did you not read the parenthesized comment, where I explicitly said I assume you're using 3.x because you said 3.2 in the previous comment?</span>
