<div class="post-text" itemprop="text">
<p>I want to install python using homebrew and I noticed there are 2 different formulas for it, one for python 2.x and another for 3.x. The first symlinks "python" and the other uses "python3". so I ran <code>brew install python3</code>. </p>
<p>I really only care about using python 3 so I would like the default command to be "python" instead of having to type "python3" every time. Is there a way to do this?  I tried <code>brew switch python 3.3</code> but I get a "python is not found in the Cellar" error.</p>
</div>
<div class="post-text" itemprop="text">
<p>You definitely do <em>not</em> want to do this! You may only care about Python 3, but many people write code that expects <code>python</code> to symlink to Python 2. Changing this can seriously mess your system up.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are absolutely sure that you will never want to install / use Python 2, I think you can just create additional symlinks in /usr/local/bin.
Check for everything that links to something in </p>
<pre><code>../Cellar/python3/3.3.0/
</code></pre>
<p>and create a link without the 3 at the end, like</p>
<pre><code>python -&gt; ../Cellar/python3/3.3.0/bin/python3
</code></pre>
<p>Think twice though, why give up the advantages of having two Pythons side-by-side? Maybe just use the homebrew Python as intended, and create your Python 3 environments with virtualenv.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're doing this for personal use, don't change the symlink for <code>python</code>. Many of your system programs depend on <code>python</code> pointing to Python 2.6, and you'll break them if you change the symlink. </p>
<p>Instead, pick a shorter name like <code>py</code> and write an alias for it in <code>~/.bashrc</code>, like <code>alias py=python3</code>.</p>
<p>For example, with testing:</p>
<pre><code>$ echo "alias py=python3" &gt;&gt; ~/.bashrc
$ bash
$ py
&gt;&gt;&gt; 3+3
6
</code></pre>
<p>This will give you the convenience without effecting the system or other users.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, far better to use [virtual environments] (<a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">https://docs.python.org/3/library/venv.html</a>) for python 3 than mess with the system default</p>
<pre><code>pyvenv /path/to/new/virtual/environment
</code></pre>
<p>which will setup python 3 as the default <code>python</code> and also isolate <code>pip</code> installs to that environment which is what you want to do on any project.</p>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned this is not the best idea. However, the simplest thing to do when necessary is run python3 in terminal. If you need to run something for python3 then run python3 </p>
</div>
<span class="comment-copy">If you really want to do this, don't. Instead use virtualenv.</span>
<span class="comment-copy">If you do it in <code>/usr/local/bin</code> or some such, you probably won't screw up any system programs which should be explicitly using <code>/usr/bin</code>.  But, I agree that most distributions and users still assume <code>python</code> means <code>python2</code>.  That will change eventually. And you certainly could choose to be on the cutting edge for your own system.  There is already at least one exception: I believe Arch Linux ships with <code>python</code> linked to <code>python3</code>.</span>
<span class="comment-copy">Of course. However, with Arch, devs are <i>expecting</i> Py3. If you give a program Py3 when it expects Py2, you will probably toast the program. There are exceptions, with Cross Python Compatibility (which is something I strive for), but in most cases, you are going to hit a <code>print xxx</code> or a <code>x = y / 3 # int expected</code> and end up in a train wreck.</span>
<span class="comment-copy">True but presumably the OP is setting up his Mac for himself (Homebrew is Mac only).  User beware.</span>
<span class="comment-copy">If they want their hashbangs (or whatever) to refer to <code>python2</code>, just write <code>python2</code>. It seems somewhat irresponsible to just rely on <code>python</code>, unless your code will run on both. This is such a trivial thing I don't understand why it would be a problem.</span>
<span class="comment-copy">@Kevin Because, way long ago, before anyone used Python 3, everyone was told to use <code>/bin/env python</code>. The milk has been spilled now. We can stand around and complain, or we can just live compatible. You'll note that the OP was asking a question about reducing what he typed by one character. Hey, that's what Python 2 programmers have been doing for the last however many years. Python 2 <i>was</i> Python.</span>
