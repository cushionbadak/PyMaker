<div class="post-text" itemprop="text">
<p><a href="http://highline.rubyforge.org" rel="nofollow">HighLine</a> is a Ruby library for easing console input and output. It provides methods that lets you request input and validate it. Is there something that provides functionality similar to it in Python?</p>
<p>To show what HighLine does see the following example:</p>
<pre class="lang-ruby prettyprint-override"><code>require 'highline/import'

input = ask("Yes or no? ") do |q|
  q.responses[:not_valid] = "Answer y or n for yes or no"
  q.default = 'y'
  q.validate = /\A[yn]\Z/i
end
</code></pre>
<p>It asks "Yes or no? " and lets the user input something. As long as the user does not input y or n (case-insensitive) it prints "Answer y or n for yes or no" and lets the user type an answer again. Also if the user press Enter it defaults to y. Finally, when it is done the input is stored in <code>input</code>. Here is an example result where the user first input "EH???" and then "y":</p>
<pre>
Yes or no? |y| EH???
Answer y or n for yes or no
?  y
</pre>
<p>Is there similarly simple way to do the same in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the Python 3 module <a href="https://github.com/Sleft/cliask" rel="nofollow noreferrer"><strong>cliask</strong></a>. The module is inspired by <a href="https://stackoverflow.com/a/14963929/789593">the answer of IT Ninja</a>, fixes <a href="https://stackoverflow.com/questions/14962930/is-there-a-python-equivalent-to-highline#comment21030520_14963929">some deficiencies in it</a> and allows validation via a regex, a predicate, a tuple or a list.</p>
<p>The easiest way to get the module is to install it via <a href="https://pypi.python.org/pypi/pip" rel="nofollow noreferrer">pip</a> (see the <a href="https://github.com/Sleft/cliask/blob/master/README.org" rel="nofollow noreferrer">readme</a> for other ways of installing):</p>
<pre><code>sudo pip install cliask
</code></pre>
<p>You can then use the module by importing like in the following example:</p>
<pre class="lang-python prettyprint-override"><code>import cliask

yn = cliask.agree('Yes or no? ',
                  default='y')
animal = cliask.ask('Cow or cat? ',
                    validator=('cow', 'cat'),
                    invalid_response='You must say cow or cat')

print(yn)
print(animal)
</code></pre>
<p>And here is how a session might look when running the example:</p>
<pre>
Yes or no? |y| EH???
Please enter "yes" or "no"
Yes or no? |y| y
Cow or cat? rabbit
You must say cow or cat
Cow or cat? cat
True
cat
</pre>
</div>
<div class="post-text" itemprop="text">
<p>The following <em>should</em> work similarly for you, although it will not be exactly the same style of asking as it is in Ruby.</p>
<pre class="lang-python prettyprint-override"><code>class ValidInput(object):
    def __init__(self,prompt,default="",regex_validate="",
             invalid_response="",correct_response=""):
        self.prompt=prompt
        self.default=default
        self.regex_validate=regex_validate
        self.invalid_response=invalid_response
        self.correct_response=correct_response
    def ask(self):
        fin=""
        while True:
            v_in=raw_input(self.prompt)
            if re.match(v_in,self.regex_validate):
                fin=v_in
                print self.correct_response
                break
            else:
                print self.invalid_response
                if self.default=="break":
                      break
                continue
        return fin
</code></pre>
<p>And you would use it like:</p>
<pre class="lang-python prettyprint-override"><code>my_input=ValidInput("My prompt (Y/N): ",regex_validate="your regex matching string here",
                    invalid_response="The response to be printed when it does not match the regex",
                    correct_response="The response to be printed when it is matched to the regex.")

my_input.ask()
</code></pre>
</div>
<span class="comment-copy">It doesn't look so difficult to implement. It's just a regex. See the <a href="http://docs.python.org/2/library/re.html" rel="nofollow noreferrer"><code>re</code></a> module.</span>
<span class="comment-copy">Your exact example in Python is available on <a href="https://github.com/cris/ruby-quiz-in-python/blob/master/src/highline.py" rel="nofollow noreferrer">Sergii Boiko's github</a></span>
<span class="comment-copy">@BurhanKhalid If it answers the question you might want to elaborate it into answer.</span>
<span class="comment-copy">A similar approach is described in <a href="http://stackoverflow.com/a/2827094/789593">stackoverflow.com/a/2827094/789593</a></span>
<span class="comment-copy">Nice! I highly suggest this one over mine, I was more or less just providing a basic example of how you might impliment this.</span>
<span class="comment-copy">You seem to have forgot <code>import re</code>. Is the <code>continue</code> necessary? Why have you got <code>print self.invalid_response</code> before <code>if self.default=="break": \ break</code>? Any particular reason you did not use Python 3?</span>
<span class="comment-copy">Why do you use <code>re.match</code> and not <code>re.search</code> (the former <a href="http://docs.python.org/3/library/re.html#search-vs-match" rel="nofollow noreferrer">only match the first character of a string</a>)? Also you seem to have placed the parameters in <code>re.match</code> in the wrong order. Also, I do not think it is warranted to make a class when a module will do. Especially when a module will make the semantics of it simpler. Also, the default mechanism does not work for your implementation. Also, correct_response is not needed. To fix all this I have posted <a href="http://stackoverflow.com/a/14977144/789593">an answer</a>.</span>
