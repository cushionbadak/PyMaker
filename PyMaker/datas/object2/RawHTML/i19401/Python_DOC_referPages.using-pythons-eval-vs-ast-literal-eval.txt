<div class="post-text" itemprop="text">
<p>I have a situation with some code where <code>eval()</code> came up as a possible solution.  Now I have never had
to use <code>eval()</code> before but, I have come across plenty of information about the potential
danger it can cause.  That said, I'm very wary about using it.</p>
<p>My situation is that I have input being given by a user:</p>
<pre><code>datamap = raw_input('Provide some data here: ')
</code></pre>
<p>Where <code>datamap</code> needs to be a dictionary.  I searched around and found that <code>eval()</code> could work this out.
I thought that I might be able to check the type of the input before trying to use the data and that
would be a viable security precaution.</p>
<pre><code>datamap = eval(raw_input('Provide some data here: ')
if not isinstance(datamap, dict):
    return
</code></pre>
<p>I read through the docs and I am still unclear if this would be safe or not.  Does eval evaluate the data as soon as its entered or after the <code>datamap</code> variable is called?</p>
<p>Is the <code>ast</code> module's <code>.literal_eval()</code> the only safe option?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>datamap = eval(raw_input('Provide some data here: '))</code> means that you actually evaluate the code <em>before</em> you deem it to be unsafe or not. It evaluates the code as soon as the function is called. See also <a href="http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="noreferrer">the dangers of <code>eval</code></a>.</p>
<p><code>ast.literal_eval</code> raises an exception if the input isn't a valid Python datatype, so the code won't be executed if it's not.</p>
<p>Use <code>ast.literal_eval</code> whenever you need <code>eval</code>. You shouldn't usually evaluate literal Python statements.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>ast.literal_eval()</code> only considers a small subset of Python's syntax to be valid:</p>
<blockquote>
<p>The string or node provided may only consist of the following Python literal structures: strings, numbers, tuples, lists, dicts, booleans, and None.</p>
</blockquote>
<p>Passing <code>__import__('os').system('rm -rf /a-path-you-really-care-about')</code> into <code>ast.literal_eval()</code> will raise an error, but <code>eval()</code> will happily wipe your drive.</p>
<p>Since it looks like you're only letting the user input a plain dictionary, use <code>ast.literal_eval()</code>. It safely does what you want and nothing more.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python's <em>eager</em> in its evaluation, so <code>eval(raw_input(...))</code> will evaluate the user's input as soon as it hits the <code>eval</code>, regardless of what you do with the data afterwards. Therefore, <strong>this is not safe</strong>, especially when you <code>eval</code> user input.</p>
<p>Use <code>ast.literal_eval</code>.</p>
<hr/>
<p>As an example, entering this at the prompt will be very, very bad for you:</p>
<pre><code>__import__('os').system('rm -rf /a-path-you-really-care-about')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>eval:</strong>
This is very powerful, but is also very dangerous if you accept strings to evaluate from untrusted input. Suppose the string being evaluated is "os.system('rm -rf /')" ? It will really start deleting all the files on your computer.<br/><br/>
<strong>ast.literal_eval:</strong>
Safely evaluate an expression node or a string containing a Python literal or container display. The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, None, bytes and sets.<br/><br/>
<strong>Syntax:</strong></p>
<pre><code>eval(expression, globals=None, locals=None)
import ast
ast.literal_eval(node_or_string)
</code></pre>
<p><strong>Example:</strong></p>
<pre><code># python 2.x - doesn't accepts operators in the string 
import ast
ast.literal_eval('[1, 2, 3]')  # output: [1, 2, 3]
ast.literal_eval('1+1') # output: ValueError: malformed string


# python 3.0 -3.6
import ast
ast.literal_eval("1+1") # output : 2
ast.literal_eval("{'a': 2, 'b': 3, 3:'xyz'}") # output : {'a': 2, 'b': 3, 3:'xyz'}
# type dictionary
ast.literal_eval("",{}) # output : Syntax Error required only one parameter
ast.literal_eval("__import__('os').system('rm -rf /')") # output : error

eval("__import__('os').system('rm -rf /')") 
# output : start deleting all the files on your computer.
# restricting using global and local variables
eval("__import__('os').system('rm -rf /')",{'__builtins__':{}},{})
# output : Error due to blocked imports by passing  '__builtins__':{} in global

# But still eval is not safe. we can access and break the code as given below
s = """
(lambda fc=(
lambda n: [
    c for c in 
        ().__class__.__bases__[0].__subclasses__() 
        if c.__name__ == n
    ][0]
):
fc("function")(
    fc("code")(
        0,0,0,0,"KABOOM",(),(),(),"","",0,""
    ),{}
)()
)()
"""
eval(s, {'__builtins__':{}})
</code></pre>
<p>In the above code <code>().__class__.__bases__[0]</code> nothing but object itself. 
Now we instantiated all the <strong>subclasses</strong>, here our main <code>enter code here</code>objective is to find one class named <strong>n</strong> from it.</p>
<p>We need to <code>code</code> object and <code>function</code> object from instantiated subclasses. This is an alternative way from <code>CPython</code> to access subclasses of object and attach the system.</p>
<p>From python 3.7 ast.literal_eval() is now stricter. Addition and subtraction of arbitrary numbers are no longer allowed. <a href="https://docs.python.org/3/whatsnew/3.7.html?highlight=ast%20literal_eval" rel="nofollow noreferrer">link</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If all you need is a user provided dictionary, possible better solution is <code>json.loads</code>.  The main limitation is that json dicts requires string keys.  Also you can only provide literal data, but that is also the case for <code>literal_eval</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I was stuck with <code>ast.literal_eval()</code>. I was trying it in IntelliJ IDEA debugger, and it kept returning <code>None</code> on debugger output.</p>
<p>But later when I assigned its output to a variable and printed it in code. It worked fine. Sharing code example:</p>
<pre><code>import ast
sample_string = '[{"id":"XYZ_GTTC_TYR", "name":"Suction"}]'
output_value = ast.literal_eval(sample_string)
print(output_value)
</code></pre>
<p>Its python version 3.6.</p>
</div>
<span class="comment-copy">This isn't 100% correct advice since any bitwise operators (or overloaded operators) will fail. Eg. <code>ast.literal_eval("1 &amp; 1")</code> will throw an error but <code>eval("1 &amp; 1")</code> will not.</span>
<span class="comment-copy">Just curious. Shouldn't we use expression parsers or something if we're expecting something like "1 &amp; 1" ?</span>
<span class="comment-copy">@thelinuxer you still should, yes; you just wouldn't be able to use <code>ast.literal_eval</code> for something like that (e.g. you could implement a parser manually).</span>
<span class="comment-copy">supports byte-strings (class bytes) as well. Eg. b'Hello World'</span>
<span class="comment-copy"><code>ast.literal_eval("1+1") </code> giving me an error.</span>
<span class="comment-copy">In which Python version you are getting error ??</span>
<span class="comment-copy">i am using python 2.7 and i just checked its working fine on python 3.x. My bad i kept trying it on python 2.7</span>
<span class="comment-copy"><code>ast.literal_eval("1+1")</code> does not work in python 3.7 and as said before, literal_eval should be limited to literals of those few data structures. It should not be able to parse a binary operation.</span>
<span class="comment-copy">Could you explain your <code>KABOOM</code> code, please? Found it here: <a href="https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow noreferrer"><code>KABOOM</code></a></span>
