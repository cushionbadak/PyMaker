<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2673651/inheritance-from-str-or-int">inheritance from str or int</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I'd like to know how inheritance works for <code>int</code>, <code>list</code>, <code>string</code> and other immutable types.</p>
<p>Basically I'd just inherit a class like this:</p>
<pre><code>class MyInt(int):
    def __init__(self, value):
        ?!?!?
</code></pre>
<p>I can't seem to figure out, how do I set the value like it's set for <code>int</code>? If I do <code>self.value = value</code> then my class will be used like this:</p>
<pre><code>mi = MyInt(5)
print(mi.value) # prints 5
</code></pre>
<p>Whereas I want to use it like this:</p>
<pre><code>mi = MyInt(5)
print(mi) # prints 5
</code></pre>
<p>How do I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can subclass <code>int</code>, but because it is <em>immutable</em> you need to provide a <a href="http://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow"><code>.__new__()</code> constructor hook</a>:</p>
<pre><code>class MyInt(int):
    def __new__(cls, value):
        new_myint = super(MyInt, cls).__new__(cls, value)
        return new_myint
</code></pre>
<p>You do need to call the base <code>__new__</code> constructor to get your subclass properly created.</p>
<p>In Python 3, you can omit the arguments to <code>super()</code> altogether:</p>
<pre><code>class MyInt(int):
    def __new__(cls, value):
        new_myint = super().__new__(cls, value)
        return new_myint
</code></pre>
<p>Of course, this assumes you wanted to manipulate <code>value</code> before passing in to <code>super().__new__()</code> or manipulate <code>new_myint</code> some more before returning; otherwise you may as well remove the whole <code>__new__</code> method and just implement this as <code>class MyInt(int): pass</code>.</p>
</div>
<span class="comment-copy">Alright, that's more complicated than I thought. But I do understand what it does tho. For python 3, can't I just use <code>super()</code> instead of <code>super(MyInt, cls)</code>? Also can I still create methods and/or other attributes for this?</span>
<span class="comment-copy">That inner <code>__new__</code> call should be <code>__new__(cls, value)</code>.</span>
<span class="comment-copy">Oh btw., I think this is worth noting, you <i>only</i> need to override the class constructor <code>__new__</code>, if you actually want to do something special on construction (like initializing other properties etc.). But if you donâ€™t, you can just leave it out and it will work. So <code>class MyInt(int): pass</code> would be a perfect subtype.</span>
<span class="comment-copy">@monkut As far as I understand, when you call <code>__new__</code> the object is not constructed yet, so there is no such thing as <code>self</code> (the object doesn't exist). <code>cls</code> means the class itself, so we're constructing a new instance of that class.</span>
<span class="comment-copy">@monkut That is just a convention to make it clear that it is <i>not</i> an instance method. The value that is passed in is actually the type, i.e. a reference to <code>MyInt</code>, while <code>self</code> would represent an actual object of said type. The object is only being created during the <code>__new__</code>.</span>
