<div class="post-text" itemprop="text">
<p>How do I replicate the following batch command using python subprocess module?</p>
<pre><code>myprogram &lt; myinput.in &gt; myoutput.out
</code></pre>
<p>In other words, how do I run <code>myprogram</code> using the contents of <code>myinput.in</code> as the standard input and <code>myoutput.out</code> as standard output?</p>
</div>
<div class="post-text" itemprop="text">
<p>The following should work:</p>
<pre><code>myinput = open('myinput.in')
myoutput = open('myoutput.out', 'w')
p = subprocess.Popen('myprogram.exe', stdin=myinput, stdout=myoutput)
p.wait()
myoutput.flush()
</code></pre>
</div>
<span class="comment-copy">This looks close to what I need. How do I detect if errors occurred?</span>
<span class="comment-copy">Nevermind. stderr=subprocess.PIPE, then, if stderr: print error</span>
<span class="comment-copy">In the line <code>myoutput = open('myoutput.out'. 'w')</code> parameters should be separated by a <code>,</code>, not a <code>.</code></span>
<span class="comment-copy">While this answer remains correct, note that <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run()</code></a>, added in Python 3.5, is a nicer API for the majority of <code>subprocess</code> use cases. It similarly takes <code>stdin</code> and <code>stdout</code> keyword arguments.</span>
