<div class="post-text" itemprop="text">
<p>So I'm trying to work to create a program which can take two inputs such as</p>
<pre><code>encrypt('12345','12')
</code></pre>
<p>and it will return</p>
<pre><code>'33557'
</code></pre>
<p>where the code ('12345') and been incremented by the key ('12'), working from right to left.</p>
<p>I have already created one which will work for when the code and key are both 8 long, but I cannot work out how to do this should the code be allowed to be any size, possibly with nested for statments?</p>
<p>Here is the one i did early so you can see better what i am trying to do</p>
<pre><code>def code_block(char,charBlock):
    if len(char) == 8 and len(charBlock) == 8:    #Check to make sure both are 8 didgets.
        c = char
        cB = charBlock
        line = ""
        for i in range(0,8):
            getDidget = code_char2(front(c),front(cB))
            c = last(c)
            cB = str(last(cB))
            line =line + getDidget
        print(line)
    else:
        print("Make sure two inputs are 8 didgets long")

def front(word):
    return word[:+1]

def last(word):
    return word[+1:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Some code tested on Python 3.2:</p>
<pre><code>from decimal import Decimal
import itertools

def encrypt(numbers_as_text, code):
    key = itertools.cycle(code[::-1])

    num = Decimal(numbers_as_text)

    power = 1
    for _ in numbers_as_text:
        num += power * int(next(key))
        power *= Decimal(10)

    return num



if __name__ == "__main__":
    print(encrypt('12345','12'))
</code></pre>
<p>Some explanation:</p>
<ul>
<li><code>code[::-1]</code> is a cool way to reverse a string. <a href="https://stackoverflow.com/a/12336158/923794">Stolen from here</a></li>
<li><a href="http://docs.python.org/3.2/library/itertools.html" rel="nofollow noreferrer"><code>itertools.cycle</code> endlessly repeats your key</a>. So the variable <code>key</code> now contains a generator which yields <code>2</code>, <code>1</code>, <code>2</code>, <code>1</code>, <code>2</code>, <code>1</code>, etc</li>
<li><a href="http://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>Decimal</code> is a datatype which can handle arbitrary precision numbers</a>. Actually Python 3's integer numbers would be sufficient because they can handle integer numbers with arbitrary number of digits. Calling the type name as a function <code>Decimal()</code>, calls the <a href="https://stackoverflow.com/a/8986413/923794">constructor</a> of the type and as such creates a new object of that type. The <code>Decimal()</code> constructor can handle one argument which is then converted into a Decimal object. In the example, the <code>numbers_as_text</code> string and the integer <code>10</code> are both converted into the type <a href="http://docs.python.org/3/library/decimal.html#decimal-objects" rel="nofollow noreferrer"><code>Decimal</code> with its constructor</a>.</li>
<li><code>power</code> is a variable that starts with <code>1</code> is multiplied by <code>10</code> for every digit that we have worked on (counting from the right). It's basically a pointer to where we need to modify <code>num</code> in the current loop iteration</li>
<li>The <code>for</code> loop header ensures we're doing one iteration for each digit in the given input text. We could also use something like <code>for index in range(len(numbers_as_text))</code> but that's unnecessarily complex</li>
</ul>
<p>Of course if you want to encode text, this approach does not work. But since that wasn't in your question's spec, this is a function focused on dealing with integers.</p>
</div>
<span class="comment-copy">Why are you rolling your own encryption? That can be rather dangerous...</span>
<span class="comment-copy">It could also be more fun!</span>
<span class="comment-copy">Whats itertools.cycle(code[::-1] doing? thanks</span>
<span class="comment-copy">@jack: If you consider an answer useful, upvote it. If an answer solves your problem, accept it (click the check mark next to it). You should also do this for your other open questions. If you never do this, people will stop looking at your questions. It's also always good to provide feedback :-)</span>
<span class="comment-copy">@jack: My fault about the upvoting, accepting answer should work though and will give you +2 (iirc) reputation as well. Of course, only accept if it reasonably works for you - not for the sake of the +2 rep ;-)</span>
<span class="comment-copy">Why? It works for me! <code>print(encrypt('19349','12'))</code> at the end prints out <code>40561</code>. Which Python version are you using? What exactly are you doing and what's the output?</span>
<span class="comment-copy">@jack: Added some text to the bullet about the <code>Decimal()</code> constructor.</span>
