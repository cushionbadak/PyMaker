<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/434597/open-document-with-default-application-in-python">Open document with default application in Python</a>
<span class="question-originals-answer-count">
                    13 answers
                </span>
</li>
</ul>
</div>
<p>I'm wondering how to open files in programs such as Notepad and Picture Viewer depending on the extension the file has. I'm using Python 3.3 on Windows.</p>
<p>I've done some research and people have mentioned a module named <code>Image</code>, but when I try and import this module I get an ImportError.</p>
<p>Here's what I have so far:</p>
<pre><code>def openFile():
    fileName = listbox_1.get(ACTIVE)
    if fileName.endswith(".jpg"):
        fileName.open()
</code></pre>
<p>I will also have HTML and JSON files that I will need to open in Notepad.</p>
</div>
<div class="post-text" itemprop="text">
<p>On Windows you could use <a href="http://docs.python.org/3/library/os.html#os.startfile"><code>os.startfile()</code></a> to open a file using default application:</p>
<pre><code>import os
os.startfile(filename)
</code></pre>
<p>There is no <a href="http://bugs.python.org/issue3177"><code>shutil.open()</code></a> that would do it cross-platform. The close approximation is <a href="http://docs.python.org/3/library/webbrowser#webbrowser.open"><code>webbrowser.open()</code></a>:</p>
<pre><code>import webbrowser
webbrowser.open(filename)
</code></pre>
<p>that might use automatically <code>open</code> command on OS X, <code>os.startfile()</code> on Windows, <code>xdg-open</code> or similar on Linux.</p>
<p>If you want to run a specific application then you could use <a href="http://docs.python.org/3/library/subprocess"><code>subprocess</code> module</a> e.g., <code>Popen()</code> allows to start a program without waiting for it to complete:</p>
<pre><code>import subprocess

p = subprocess.Popen(["notepad.exe", fileName])
# ... do other things while notepad is running
returncode = p.wait() # wait for notepad to exit
</code></pre>
<p>There are many ways to use the <code>subprocess</code> module to run programs e.g., <a href="http://docs.python.org/3/library/subprocess#subprocess.check_call"><code>subprocess.check_call(command)</code></a> blocks until the command finishes and raises an exception if the command finishes with a nonzero exit code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use this to open any file with the default program:</p>
<pre><code>import os
def openFile():
    fileName = listbox_1.get(ACTIVE)
    os.system("start " + fileName)
</code></pre>
<p>If you really want to use a certain program, such as notepad, you can do it like this:</p>
<pre><code>import os
def openFile():
    fileName = listbox_1.get(ACTIVE)
    os.system("notepad.exe " + fileName)
</code></pre>
<p>Also if you need some if checks before opening the file, feel free to add them. This only shows you how to open the file.</p>
</div>
<div class="post-text" itemprop="text">
<p>Expanding on FatalError's suggestion with an example. </p>
<p>One additional benefit of using <code>subprocessing</code> rather than <code>os.system</code> is that it uses the same syntax cross-platform (<code>os.system</code> on Windows requires a "start" at the beginning, whereas OS X requires and "open". Not a huge deal, but one less thing to remember). </p>
<h2>Opening a file with <code>subprocess.call</code>.</h2>
<p>All you need to do to launch a program is call <code>subprocess.call()</code> and lass in a <code>list</code> of arguments where the first is the path to the program, and the rest are additional arguments that you want to supply to the program you're launching. </p>
<p>For instance, to launch Notepad.exe</p>
<pre><code>import subprocess
import os


path_to_notepad = 'C:\\Windows\\System32\\notepad.exe'
path_to_file = 'C:\\Users\\Desktop\\hello.txt'

subprocess.call([path_to_notepad, path_to_file])
</code></pre>
<p>Passing multiple arguments and paths is equally as simple. Just add additional items to the list. </p>
<hr/>
<h3>Launching with multiple arguments</h3>
<p>This, for example, launches a JAR file using a specific copy of the Java runtime environment. </p>
<pre><code>import subprocess
import os

current_path = os.getcwd()
subprocess.call([current_path + '/contents/home/bin/java', # Param 1
                    '-jar', #Param2
                    current_path + '/Whoo.jar']) #param3
</code></pre>
<p>Argument 1 targets the program I want to launch. Argument2 supplies an argument <em>to</em> that program telling it that it's going to run a JAR, and finally Argument3 tells the target program where to find the file to open. </p>
</div>
<span class="comment-copy">You should probably mention what platform you're using.</span>
<span class="comment-copy">thanks interjay, there was an answer to that question i can use</span>
<span class="comment-copy">only problem is that json files don't have a default application so that box would appear asking the user what program to open it in</span>
<span class="comment-copy">@LWH91: I've added subprocess-based solution to run a program explicitly.</span>
<span class="comment-copy"><code>os.system()</code> will block the calling thread. Something out of the <code>subprocess</code> module might be more appropriate.</span>
<span class="comment-copy">I thin ill need to add the program name because files such as json that don't have a specific program to open will cause problems</span>
<span class="comment-copy">@LWH91 I'd recommend adding a check if the file ends with <code>.json</code>, if it does, open the file with a custom program. Else use "start".</span>
<span class="comment-copy">yeah was going to put in a double check for json and html then use else to open the rest</span>
<span class="comment-copy">This appears to be windows only</span>
