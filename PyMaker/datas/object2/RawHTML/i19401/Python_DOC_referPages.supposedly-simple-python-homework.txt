<div class="post-text" itemprop="text">
<p>I have a CompSci problem (optional), don't worry, you are not doing my homework :) I am having a rather impossible time understanding this question, as this is all I have to go on. It is in regards to a rather elementary understanding of python. </p>
<p>I have to create a function that satisfies this requirement. I have no idea why there is a 6 in the problem or what it signifies. </p>
<p>"Returns a pair of integers 'root' and 'pwr' s.t. 0 &lt; pwr &lt; 6 and root**pwr = user input.
If no pairs of integers satisfy these conditions, the function will notify the user."</p>
<p>Like I said, it's optional, so rather than just get the answer I am hoping for an explanation. Thanks you guys!</p>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for a value, given a specific root, and a power between 0 and 6 exclusive, that is equivalent to a user's input.  An example of that would be an input of 4 == 2**2, hence you'd probably output <code>(2, 2)</code>.</p>
<p>There doesn't appear to be any bounds on <code>root</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is how I read it:</p>
<ol>
<li><p>Create a function that accepts a number as an argument (I'm assuming an integer, but that's not clear)</p></li>
<li><p>find the nth root of that number, where n is one of 1,2,3,4 or 5. Return n and the root.</p></li>
<li><p>if you can't find a suitable root, display an error.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>To get you started: </p>
<pre><code>0 &lt; pwr &lt; 6
</code></pre>
<p>… is equivalent to:</p>
<pre><code>(0 &lt; pwr) and (pwr &lt; 6)
</code></pre>
<p>This <code>0 &lt; pwr &lt; 6</code> notation is pretty common in mathematics, and in a few programming languages (including Python). See <a href="http://en.wikipedia.org/wiki/Inequality_%28mathematics%29#Chained_notation" rel="nofollow">Chained notation</a> at Wikipedia for details.</p>
<p>So, for each such power, try to find a <code>root</code> such that <code>root**pwr</code> is the user's input value.</p>
<p>There's a quick way to do this using <a href="http://docs.python.org/3/library/math.html#math.log" rel="nofollow"><code>math.log</code></a>, but if you don't know what logarithms are, don't worry about that. Instead, you can just try every possible <code>root</code>. If any <code>root</code> is too big, then all larger <code>root</code>s will also be too big.</p>
<p>Except for one problem: What if <code>user_input</code> is negative? So, you'll need to find a way to count all positive <em>and negative</em> numbers, until you find one where the <em>absolute value</em> is too big.</p>
<p>So, a brief sketch in pseudocode:</p>
<pre><code>def find_root_pwr(user_input):
    for every pwr such that 0 &lt; pwr &lt; 6:
        for every possible root:
            test_value = root**pwr
            if it's a match:
                return root, pwr
            elif abs(test_value) is too big:
                break # don't need to check larger roots
    else:
        # We tried all 5 powers, and no match
        raise ValueError('No answer for {}'.format(user_input))
</code></pre>
<p>And to test it:</p>
<pre><code>user_input = int(input()) # raw_input if you're on Python 2.x
root, pwr = find_root_pwr(user_input)
print('{} ** {} = {}'.format(root, pwr, user_input))
</code></pre>
<p>See <a href="http://docs.python.org/3/library/functions.html#func-range" rel="nofollow"><code>range</code></a> and <a href="http://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow"><code>itertools.count</code></a> for hints on how to write the loops. You should be able to fill in the details from here, or at least get far enough to have a more specific followup question.</p>
</div>
<div class="post-text" itemprop="text">
<p>Other answers provided the explanation for the problem description. Here's a possible solution for positive input:</p>
<pre><code>def find_root_power(n, minpower, maxpower):
    for pwr in range(minpower, maxpower + 1):  # minpower &lt;= pwr &lt;= maxpower
        # find root such that root**pwr == n
        f = n ** (1. / pwr)  # float
        root = int(f + 0.5)  # int (per problem statement)
        if root**pwr == n:
           yield root, pwr # multiple solutions are possible

n = int(raw_input("Input a number:"))
for root, pwr in find_root_power(n, minpower=1, maxpower=5):
    print("root: %d pwr: %d" % (root, pwr))
</code></pre>
<p>For example, <a href="http://ideone.com/queIPl" rel="nofollow">if the user input is <code>81</code>; the output is</a>:</p>
<pre><code>root: 81 pwr: 1
root: 9 pwr: 2
root: 3 pwr: 4
</code></pre>
<p>Note: <code>root=n</code>, <code>pwr=1</code> is always a solution if <code>n</code> is an integer. If user input is not an integer then the code raises <code>ValueError</code> (given  the problem description; <code>root**pwr</code> may only be an integer so no solution exists for non-integer input).</p>
<p>Note: if <code>root ** pwr == n</code> then also <code>(-root) ** pwr == n</code> for even <code>pwr</code>. You could add:</p>
<pre><code>  if root**pwr == n:
      yield root, pwr # multiple solutions are possible
      if pwr % 2 == 0: # even
          yield -root, pwr
</code></pre>
<p>to include negative root as a solution.</p>
</div>
<span class="comment-copy">"such that 0 is less than pwr and pwr is less than 6 ..."</span>
<span class="comment-copy">The assignment is to write a small program that takes user input and returns two numbers, <code>a</code> and <code>b</code>. <code>a</code> must be larger than zero and less than six, and <code>b</code> raised to the power of <code>a</code> should be exactly equal to the value provided by the user.</span>
<span class="comment-copy">If you know how exponentiation works, you can always just <code>return user_input, 1</code> for any integral <code>user_input</code>. I don't think this is what you teacher wants, but if you can explain why it works, and prove it, he'll probably be embarrassed enough that he didn't realize this to give you your extra credit. :)</span>
<span class="comment-copy">Of course <code>4 == 4**1</code> and <code>4 == -2**2</code> as well. Fortunately, the question seems to say any valid answer will be acceptable, not a particular one, or all of them.</span>
<span class="comment-copy">Good point on #1. If the user enters a non-integral float obviously there will never be a match (because if <code>root</code> and <code>pwr</code> are integers, and <code>pwr</code> is positive, <code>root**pwr</code> is an integer), but maybe it should try and fail instead of raising a <code>ValueError</code>…</span>
