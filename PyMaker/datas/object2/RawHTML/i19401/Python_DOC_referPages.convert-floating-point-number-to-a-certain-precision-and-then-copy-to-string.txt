<div class="post-text" itemprop="text">
<p>I have a floating point number, say <code>135.12345678910</code>. I want to concatenate that value to a string, but only want <code>135.123456789</code>. With print, I can easily do this by doing something like:</p>
<pre><code>print "%.9f" % numvar
</code></pre>
<p>with <code>numvar</code> being my original number. Is there an easy way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>With Python &lt; 3 (e.g. 2.6 [see comments] or 2.7), there are two ways to do so.</p>
<pre><code># Option one
older_method_string = "%.9f" % numvar

# Option two
newer_method_string = "{:.9f}".format(numvar)
</code></pre>
<p>But note that for Python versions above 3 (e.g. 3.2 or 3.3), option two is <a href="http://docs.python.org/2/library/stdtypes.html#str.format" rel="nofollow noreferrer">preferred</a>.</p>
<p>For more information on option two, I suggest <a href="http://docs.python.org/2/library/string.html#formatstrings" rel="nofollow noreferrer">this link on string formatting from the Python documentation</a>.</p>
<p>And for more information on option one, <a href="http://docs.python.org/2/library/stdtypes.html#string-formatting" rel="nofollow noreferrer">this link will suffice and has info on the various flags</a>.</p>
<p>Python 3.6 (officially released in December of 2016), added the <code>f</code> string literal, <a href="https://docs.python.org/3.6/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">see more information here</a>, which extends the <code>str.format</code> method (use of curly braces such that <code>f"{numvar:.9f}"</code> solves the original problem), that is,</p>
<pre><code># Option 3 (versions 3.6 and higher)
newest_method_string = f"{numvar:.9f}"
</code></pre>
<p>solves the problem. Check out @Or-Duan's answer for more info, but this method is <em>fast</em>.</p>
</div>
<div class="post-text" itemprop="text">
<h1>Python 3.6 | 2017</h1>
<p>Just to make it clear, you can use <a href="https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals" rel="noreferrer">f-string</a> formatting. This has almost the same syntax as the <code>format</code> method, but make it a bit nicer.</p>
<p>Example:</p>
<pre><code>print(f'{numvar:.9f}')
</code></pre>
<p>More reading about the new f string:</p>
<ul>
<li><em><a href="https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals" rel="noreferrer">What's new in Python 3.6</a></em> (same link as above)</li>
<li><em><a href="https://www.python.org/dev/peps/pep-0498/" rel="noreferrer">PEP official documentation</a></em></li>
<li><em><a href="https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals" rel="noreferrer">Python official documentation</a></em></li>
<li><em><a href="https://cito.github.io/blog/f-strings/" rel="noreferrer">Really good blog post - talks about performance too</a></em></li>
</ul>
<p><a href="https://i.stack.imgur.com/azP5N.png" rel="noreferrer"><img alt="Enter image description here" src="https://i.stack.imgur.com/azP5N.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>round</code>:</p>
<pre><code>&gt;&gt;&gt; numvar = 135.12345678910
&gt;&gt;&gt; str(round(numvar, 9))
'135.123456789'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not print that does the formatting, It's a property of strings, so you can just use</p>
<pre><code>newstring = "%.9f" % numvar
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case the precision is not known until runtime, this other formatting option is useful:</p>
<pre><code>&gt;&gt;&gt; n = 9
&gt;&gt;&gt; '%.*f' % (n, numvar)
'135.123456789'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To set precision with 9 digits, get:</p>
<pre><code>print "%.9f" % numvar
</code></pre>
<p>Return precision with 2 digits:</p>
<pre><code>print "%.2f" % numvar 
</code></pre>
<p>Return precision with 2 digits and float converted value:</p>
<pre><code>numvar = 4.2345
print float("%.2f" % numvar) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>str</code> function has a bug. Please try the following. You will see '0,196553' but the right output is '0,196554'. Because the <code>str</code> function's default value is ROUND_HALF_UP.</p>
<pre><code>&gt;&gt;&gt; value=0.196553500000 
&gt;&gt;&gt; str("%f" % value).replace(".", ",")
</code></pre>
</div>
<span class="comment-copy">% exactly does that - % is not part of the print function but of string - see <a href="http://docs.python.org/2/library/stdtypes.html#string-formatting-operations" rel="nofollow noreferrer">Python docs</a></span>
<span class="comment-copy">old style formatting still works in 3.2</span>
<span class="comment-copy">option two should be <code>newer_method_string = "{:.9f}".format(numvar)</code> - note the required <code>:</code> to separate the field and the formatting. I have tested this on 2.7.5 anyway.</span>
<span class="comment-copy">For python 2.6 option two should be <code>newer_method_string = "{0:.9f}".format(numvar)</code> -- note the required 0 for the field_name for this older version.</span>
<span class="comment-copy">Or use the new style formatting.  valueString ="{:.9f}".format(number)</span>
<span class="comment-copy">If you'd prefer to use <code>.format</code>-method, note that this can also be done by nesting arguments like so: <code>'{:.{n}f}'.format(numvar,n=n)</code>.</span>
<span class="comment-copy">What is up with <code>.</code> vs. <code>,</code>? And how is it relevant for pauliwago's question?</span>
