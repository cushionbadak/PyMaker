<div class="post-text" itemprop="text">
<p>I have some Python code that is far, far slower than it really ought to be.</p>
<pre><code>#Generate planets
for t in range(stars*3): #There are 3 planets for every star, but not every star will have 3 planets
    theplanet=Planet()

    if random.randint(0,100) &lt;= 25: #25% of planets have life
        theplanet.tl=random.randint(1,9)    #With a random tech level
    else:
        theplanet.tl=0  #The rest don't

    theplanet.star=stardict[random.choice(list(stardict.keys()))]     #Choose a random star
    theplanet.star.planets+=(theplanet,)    #Append the new planet to the star's list of planets
    theplanet.name=theplanet.star.name+"-"+str(len(theplanet.star.planets)) #Name the planet Starname-X, where X is the length of the star's planets tuple. Since this increases every time a planet is added, it will be 1 for the first planet, 2 for the next, etc...

    if math.floor((t/(stars*3))*100)==(t/(stars*3))*100: print("Generating planets: "+str((t/(stars*3))*100)+"% done.")
</code></pre>
<p>I'm pretty sure the bottleneck is in the <code>star=stardict[random.choice(list(</code> etc... line. I'm guessing here, but I assume dicts work by searching through every entry in the dict and seeing which one has the right key. Lists, I assume again, would just read off the information at a memory location derived from the entry number, and for extremely large (200,000 entries, to be exact) lists/dicts be much faster.</p>
<p>Would converting the dict's entries to a list make this code faster? How would I do this (I thought I saw a function for it, reviewing the docs now...)? Are there any other ways anyone notices to make this faster?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're creating a list every time through the loop, but that list is unchanging. Move it outside of the loop.</p>
<pre><code>starlist=list(stardict.keys())
...
    theplanet.star=stardict[random.choice(starlist)]     #Choose a random star
</code></pre>
<p>The problem almost certainly isn't in the dict lookup. They're based on hash tables which are quite fast.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>Move the list generation <code>list(stardict.keys())</code> outside the loop</p></li>
<li><p>Try to profile your code (<a href="http://docs.python.org/2/library/profile.html" rel="nofollow">documentation</a>)</p></li>
<li><p>Assuming you are running CPython, check if your code could run with <a href="http://pypy.org/" rel="nofollow">Pypy</a>. This could lead to better performances due to its optimised JIT</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You only use the key as in intermediate value to select a random item in stardict. You can use the dictionary's value list directly instead: </p>
<pre><code>#Generate planets
starlist = stardict.values()
for t in range(stars*3): #There are 3 planets for every star, but not every star will have 3 planets
    theplanet=Planet()

    if random.randint(0,100) &lt;= 25: #25% of planets have life
        theplanet.tl=random.randint(1,9)    #With a random tech level
    else:
        theplanet.tl=0  #The rest don't

    theplanet.star=random.choice(starlist)     #Choose a random star
    theplanet.star.planets+=(theplanet,)    #Append the new planet to the star's list of planets
    theplanet.name=theplanet.star.name+"-"+str(len(theplanet.star.planets)) #Name the planet Starname-X, where X is the length of the star's planets tuple. Since this increases every time a planet is added, it will be 1 for the first planet, 2 for the next, etc...

    if math.floor((t/(stars*3))*100)==(t/(stars*3))*100: print("Generating planets: "+str((t/(stars*3))*100)+"% done.")
</code></pre>
</div>
<span class="comment-copy">You're understanding of dictionary lookup doesn't appear to be correct.  dicts are hash tables -- so the lookup takes (on average) O(1) operations -- No search is needed.</span>
<span class="comment-copy">You assume wrong. Dicts are based on hash tables which are just about the most efficient way to look things up.</span>
<span class="comment-copy">@MarkRansom: While the OP is misinformed about dict lookup, putting it in a list would technically probably increase it even more. (It would get rid of the hashing step and any possibility of collision). The improvement is likely to be very marginal, though.</span>
<span class="comment-copy">Ahhhh, I thought it might be a hash lookup, but then I wondered what you would do with all the memory space between the hash values...</span>
<span class="comment-copy">...and stardict.keys() is already a list, so you don't need the outer list()</span>
<span class="comment-copy">@tdelaney No it isn't (the OP is using Python 3, in which it is a <a href="http://docs.python.org/3/library/stdtypes.html#dict-views" rel="nofollow noreferrer">view</a>).</span>
<span class="comment-copy">@tdelaney, even if it is it doesn't hurt to force it, and I was just copying the original code.</span>
<span class="comment-copy">@ katrielalex - I didn't notice that this is python 3. I may be a bit behind the times.</span>
<span class="comment-copy">Should have caught that- though wouldn't it be even better to have starlist=list(stardict.values()) and skip the extra lookup? :P</span>
