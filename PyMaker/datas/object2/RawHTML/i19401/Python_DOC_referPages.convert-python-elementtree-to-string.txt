<div class="post-text" itemprop="text">
<p>Whenever I call <code>ElementTree.tostring(e)</code>, I get the following error message:</p>
<pre><code>AttributeError: 'Element' object has no attribute 'getroot'
</code></pre>
<p>Is there any other way to convert an ElementTree object into an XML string?</p>
<p>TraceBack:</p>
<pre><code>Traceback (most recent call last):
  File "Development/Python/REObjectSort/REObjectResolver.py", line 145, in &lt;module&gt;
    cm = integrateDataWithCsv(cm, csvm)
  File "Development/Python/REObjectSort/REObjectResolver.py", line 137, in integrateDataWithCsv
    xmlstr = ElementTree.tostring(et.getroot(),encoding='utf8',method='xml')
AttributeError: 'Element' object has no attribute 'getroot'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>Element</code> objects have no <code>.getroot()</code> method. Drop that call, and the <a href="https://docs.python.org/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring" rel="noreferrer"><code>.tostring()</code></a> call works:</p>
<pre><code>xmlstr = ElementTree.tostring(et, encoding='utf8', method='xml')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>How do I convert <code>ElementTree.Element</code> to a String?</h3>
<p>For a solution that works in both Python 2 &amp; 3, use <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring" rel="noreferrer"><code>.tostring()</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="noreferrer"><code>.decode()</code></a>.</p>
<pre><code>xml_str = ElementTree.tostring(xml).decode()
</code></pre>
<hr/>
<h3>Example usage</h3>
<pre><code>from xml.etree import ElementTree

xml = ElementTree.Element("Person", Name="John")
xml_str = ElementTree.tostring(xml).decode()
print(xml_str)
</code></pre>
<p>Output:</p>
<pre><code>&lt;Person Name="John" /&gt;
</code></pre>
<hr/>
<h3>Explanation</h3>
<p>Despite what the name implies, <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring" rel="noreferrer"><code>ElementTree.tostring()</code></a> <strong>doesn't return a string by default</strong>. The default behavior is to <a href="http://makble.com/python-why-lxml-etree-tostring-method-returns-bytes" rel="noreferrer">generate a bytestring</a>. While this wasn't an issue in Python 2, the two types were made more distinct in Python 3.</p>
<blockquote>
<p><strong>In Python 2 you could use the <code>str</code> type for both text and binary data</strong>.
  Unfortunately this confluence of two different concepts could lead to
  brittle code which sometimes worked for either kind of data, sometimes
  not. [...]</p>
<p>To make the distinction between text and binary data clearer and more pronounced, <strong>Python 3 [...] made text and binary data distinct types that cannot blindly be mixed together</strong>.</p>
</blockquote>
<p><sup>Source: <a href="https://docs.python.org/3/howto/pyporting.html#text-versus-binary-data" rel="noreferrer"><em>Porting Python 2 Code to Python 3</em></a></sup></p>
<p>We can resolve this ambiguity by using <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="noreferrer"><code>decode()</code></a> to explicitly convert our bytestring into regular text. This ensures compatibility with both Python 2 and Python 3.</p>
<ul>
<li>For Python 2 &amp; 3 compatibility: <code>ElementTree.tostring(xml).decode()</code></li>
<li>For Python 3 compatibility: <code>ElementTree.tostring(xml, encoding='unicode', method='xml')</code></li>
</ul>
<p>For reference, I've included a comparison of <code>.tostring()</code> results between Python 2 and Python 3. </p>
<pre><code>ElementTree.tostring(xml).decode()
# Python 3: &lt;Person Name="John" /&gt;
# Python 2: &lt;Person Name="John" /&gt;

ElementTree.tostring(xml, encoding='unicode', method='xml')
# Python 3: &lt;Person Name="John" /&gt;
# Python 2: LookupError: unknown encoding: unicode

ElementTree.tostring(xml, encoding='utf-8', method='xml')
# Python 3: b'&lt;Person Name="John" /&gt;'
# Python 2: &lt;Person Name="John" /&gt;

ElementTree.tostring(xml, encoding='utf8', method='xml')
# Python 3: b'&lt;?xml version=\'1.0\' encoding=\'utf8\'?&gt;\n&lt;Person Name="John" /&gt;'
# Python 2: &lt;?xml version='1.0' encoding='utf8'?&gt;
#           &lt;Person Name="John" /&gt;
</code></pre>
<p>Thanks to <a href="https://stackoverflow.com/questions/15304229/convert-python-elementtree-to-string/48671499?noredirect=1#comment84342152_48671499">Martijn Peters</a> for pointing out that the <code>str</code> datatype changed between Python 2 and 3.</p>
<hr/>
<h3>Why not use str()?</h3>
<p>In most scenarios, using <a href="https://docs.python.org/3/library/stdtypes.html#str" rel="noreferrer"><code>str()</code></a> would be the "<a href="https://stackoverflow.com/a/3205525/3357935">cannonical</a>" way to convert an object to a string. Unfortunately, using this with <code>Element</code> returns the object's location in memory as a hexstring, rather than a string representation of the object's data.</p>
<pre><code>from xml.etree import ElementTree

xml = ElementTree.Element("Person", Name="John")
print(str(xml))  # &lt;Element 'Person' at 0x00497A80&gt;
</code></pre>
</div>
<span class="comment-copy">The edit history is pretty funny. For others, the original exception in stack trace was <code>AttributeError: 'str' object has no attribute 'iter'</code></span>
<span class="comment-copy">For late comers from search engine:  when the encoding is 'utf8' it prepends the <code>&lt;?xml version='1.0' encoding='utf8'?&gt;</code> header.   When it's <code>utf-8</code> the header is not included.  Also if <code>et</code> was an ElementTree, you have to pass <code>et.getroot()</code>.</span>
<span class="comment-copy">In Python 3, <code>encoding='utf8'</code> returns a bytestring instead of a string. <a href="https://stackoverflow.com/a/48671499/3357935">I recommend using <code>tostring(xml, encoding="unicode")</code> instead</a>.</span>
<span class="comment-copy">@StevenVascellaro: XML is a really a <i>binary format</i>, in that the data format consists of bytes in a given encoding (specified in the XML declaration at the top, defaulting to UTF-8 if missing). In Python 2, <code>str</code> is the same kind of object as <code>bytes</code> Python 3. Outputting bytes is entirely correct, using <code>unicode</code> as the output is essentially an addition that lets you avoid having to decode if you needed a Unicode string instead for your specific use case.</span>
<span class="comment-copy">According to the <code>help</code>, only <code>encoding="unicode"</code> will return a string.</span>
<span class="comment-copy">In Python 2 <code>ElementTree.tostring()</code> also generates a bytestring. The <code>str</code> type <i>is a bytestring</i> in Python 2 (Python 3's <code>str</code> type is called <code>unicode</code> in Python 2).</span>
<span class="comment-copy">That feature was only added to the Python 3 version, and not backported to Python 2. If it was, you'd get a <code>unicode</code> string back.</span>
