<div class="post-text" itemprop="text">
<p>I've seen this question asked here, but the answers given did not work in my case and was marked duplicate.</p>
<ul>
<li><a href="https://stackoverflow.com/a/6033936/1440740"><code>python -u</code> does not work for <code>stdin</code> in Python 3.</a></li>
<li><code>sys.stdin = sys.stdin.detach()</code> throws a <code>ValueError: underlying buffer has been detached</code>.</li>
<li>None of these work for non-<code>stdin</code> inputs and other files being used as stream.</li>
<li><a href="https://stackoverflow.com/a/6033885/1440740">Adding a hook does not work: <code>FileInput(openhook=hook_nobuf)</code> and using <code>open(buffering=0)</code> in the hook.</a></li>
</ul>
<p>I dug in the source code (<a href="http://hg.python.org/cpython/file/3.2/Lib/fileinput.py" rel="nofollow noreferrer"><code>/usr/lib/python3.2/fileinput.py</code></a>) and saw that <code>readlines(bufsize)</code> was being used internally to load a buffer. No shell or other piping shenanigans.</p>
</div>
<div class="post-text" itemprop="text">
<p>What worked for me was simply setting <code>FileInput(bufsize=1)</code>. The <code>file.readlines()</code> documentation does state "The optional size argument, if given, is an approximate bound on the total number of bytes in the lines returned." In practice, I get exactly one new line every time rather than having to fill a buffer.</p>
<pre><code>with fileinput.input(bufsize=1) as f:
    for line in f:
        print("One line in, one line out!")
</code></pre>
</div>
<span class="comment-copy">Actually, I think you may want <code>python -u</code> on top of whatever else you need. You want to remove any underlying Python-and/or-stdio buffering on <code>stdin</code>, and <i>also</i> remove any higher-level line-reading buffer, right?</span>
<span class="comment-copy">It seems like this is actually guaranteed to work, as long as <code>fileinput</code> uses <code>readlines(self._bufsize)</code>. Unfortunately, that in itself isn't documented to be true, but if you only care about CPython 3.2 you can be sure it is, and it seems pretty likely to be safe pretty widely beyond that, so if that's good enough, great.</span>
<span class="comment-copy">And if you read through <code>IOBase.readlines</code> (<a href="http://hg.python.org/cpython/file/3.2/Lib/_pyio.py#l497" rel="nofollow noreferrer">pure Python</a> and <a href="http://hg.python.org/cpython/file/3.2/Modules/_io" rel="nofollow noreferrer">C</a> implementations), it will call <code>readline</code>, which will call <code>read</code> 1 byte at a time if there's no buffer or <code>peek</code>. So, I think that cinches it, and you should accept your own answer.</span>
<span class="comment-copy">Also, you might want to file a documentation bug on the fact that <a href="http://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer"><code>fileinput.input</code></a> doesn't mention what <code>bufsize</code> does at all, and that the language reference should have enough information to guarantee that <code>bufsize=1</code> (together with unbuffered <code>stdin</code>, when reading from <code>stdin</code>) means unbuffered <code>fileinput</code>.</span>
<span class="comment-copy">@abarnert Where is the best place to file a python documentation bug?</span>
<span class="comment-copy">I believe docs bugs go to the same issue tracker (<a href="http://bugs.python.org" rel="nofollow noreferrer">bugs.python.org</a>) as code bugs, although you probably want to read the <a href="http://docs.python.org/devguide/" rel="nofollow noreferrer">Python Developer's Guide</a> to make sure I'm remembering right. Also, if you're not <i>sure</i> whether something is a bug, it may be better to bring it up on one of the mailing lists and get wider feedback first.</span>
