<div class="post-text" itemprop="text">
<p>Given the following example:</p>
<pre><code>class A:
    def __init__(self, num: int):
        self.num = num

    def bar(self, eggs: int):
        if eggs == self.num:
            raise ValueError


def foo(spam: bool) -&gt; B:
    class B(A):
        def bar(self, eggs: int):
            try:
                super().bar(eggs)
            except ValueError as e:
                if not spam:
                    raise e
    return B
</code></pre>
<p>The base class <code>A</code> has a method named <code>bar</code> that raises a <code>ValueError</code> if <code>eggs</code> equals to <code>self.num</code>. I also have a function named <code>foo</code> that accepts an argument <code>spam</code>, it returns a subclass of <code>A</code> and overrides the <code>bar</code> method so that no <code>ValueError</code> will be raised if <code>spam</code> is non Falsey. </p>
<p>I'm trying to type hint the return value for the <code>foo</code> function. If I do <code>-&gt; B</code>, <code>B</code> is undefined. If I do <code>-&gt; A</code>, type <code>B</code> isn't exactly <code>A</code>. If I do <code>-&gt; "B"</code>, using future hinting, <code>B</code> is still not defined since it's in a local scope. </p>
<p>Is there anyway to type hint this? If not, is there a better way to rewrite my code?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's what I could think of from a quick scan of the docs. This isn't a good solution at all (I think), but it should do the job for you.</p>
<p>There's something called <code>typing.TypeVar</code> (<a href="https://docs.python.org/3/library/typing.html#typing.TypeVar" rel="nofollow noreferrer">docs</a>). Its basically a generic type. So what you could possibly do is:</p>
<p>At the global level (after defining class A) define:</p>
<pre><code>from typing import TypeVar
B = TypeVar('B', bound=A)
</code></pre>
<p>Now in the function signature of <code>def foo</code> you can say:</p>
<pre><code>def foo(spam: bool) -&gt; B:
</code></pre>
<p>Then inside the function you can continue to create a new class with the name B and return it.</p>
<p>I'm not even sure if this would work properly in all cases. If you find any problems with it, definitely correct me and post here.</p>
</div>
<span class="comment-copy">Neither <code>bar</code> function has a <code>self</code> argument. Shouldn't you declare them <code>@classmethod</code>s?</span>
<span class="comment-copy">@DyZ My mistake. It's just an example and I forgot to add it, I will now add a <code>self</code> argument.</span>
<span class="comment-copy">Show an example of how do you want to use function <code>foo</code></span>
<span class="comment-copy">@Waket There is another module/function that takes in a class constructor as an argument with the default being <code>A</code>. The argument class should be a subclass of <code>A</code>. I would like to dynamically create subclasses of <code>A</code> with dynamic traits (<code>spam</code>) when overriding the method <code>bar</code>. Anyways, I don't think the above information is necessary to answer my question since I'm solely trying to find out how you would type hint the return value of <code>foo</code>. But I guess it wouldn't hurt to add more details.</span>
