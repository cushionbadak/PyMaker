<div class="post-text" itemprop="text">
<p>I am looking for a way to create a Python function from a string containing the source code at runtime, in such a way that the source code is available by inspection.</p>
<p>My current method looks like:</p>
<pre><code>src = 'def foo(x, y):' + '\n\t' + 'return x / y'
g = {numpy: numpy, ...}  # Modules and such required for function
l = {}
exec(src, g, l)
func = l['foo']
</code></pre>
<p>Which works perfectly fine, but the function has no source code/file associated with it. This makes debugging difficult (note the line the error occurs on in foo() isn't shown):</p>
<pre><code>&gt;&gt;&gt; foo(1, 0)
ZeroDivisionError                         Traceback (most recent call last)
&lt;ipython-input-85-9df128c5d862&gt; in &lt;module&gt;()
----&gt; 1 myfunc(3, 0)

&lt;string&gt; in foo(x, y)

ZeroDivisionError: division by zero
</code></pre>
<p>If I define a function in the IPython interpreter, I can get the source using <code>inspect.getsource</code> and it will be printed in tracebacks. <code>inspect.getsourcefile</code> returns something like <code>'&lt;ipython-input-19-8efed6025c6f&gt;'</code> for these types of functions, which of course isn't a real file. Is there a way to do something similar in a non-interactive environment?</p>
</div>
<div class="post-text" itemprop="text">
<p>So I was able to partially figure this out by digging into the IPython source code. It makes use of the builtin module <a href="https://docs.python.org/3/library/linecache.html" rel="nofollow noreferrer">linecache</a>, which contains functions for reading source code from files and caching the results. The <code>inspect</code> and <code>traceback</code> modules both use this module to get the source of a function.</p>
<p>The solution is to create the function the same way as in the question, but using <code>compile</code> with a made-up and unique file name:</p>
<pre><code>source = 'def foo(x, y):' + '\n\t' + 'return x / y'

filename = '&lt;dynamic-123456&gt;'  # Angle brackets may be required?
code = compile(source, filename, 'exec')

g = {numpy: numpy, ...}  # Modules and such required for function
l = {}
exec(src, g, l)
func = l['foo']
</code></pre>
<p><code>linecache</code> contains a variable <code>cache</code> which is a dictionary mapping file names to <code>(size, mtime, lines, fullname)</code> tuples. You can simply add an entry for the fake file name:</p>
<pre><code>lines = [line + '\n' for line in source.splitlines()]

import linecache
linecache.cache[filename] = (len(source), None, lines, filename)
</code></pre>
<p>The function will then work with <code>inspect.getsource()</code>, IPython's <code>?</code>/<code>??</code> syntax, and in IPython tracebacks. However, it still doesn't seem to work in built-in tracebacks. This is mostly sufficient for me because I almost always work in IPython.</p>
<p>EDIT: see user2357112's comment below for how to get this working with traceback printing in the builtin interpreter.</p>
</div>
<span class="comment-copy"><code>inspect.getsource</code> does not work for functions defined in a standard interactive session. If it seemed to work when you tried it, you may have been running IPython without realizing it.</span>
<span class="comment-copy">shouldn't You use <code>compile</code> ? . With compile You can first store the compiled code and then exec it when needed. where exec and eval makes evaluation in place without returning objects</span>
<span class="comment-copy">@user2357112 you're correct, I did it in IPython and incorrectly assumed it also worked in the standard interactive interpreter.</span>
<span class="comment-copy">If you want this to take effect in a regular (non-IPython) interactive session, <a href="https://stackoverflow.com/questions/50515651/why-does-the-python-linecache-affect-the-traceback-module-but-not-regular-traceb/50515847#50515847">installing <code>traceback.print_exception</code> as the traceback printer in place of the default <code>sys.excepthook</code></a> should do it.</span>
