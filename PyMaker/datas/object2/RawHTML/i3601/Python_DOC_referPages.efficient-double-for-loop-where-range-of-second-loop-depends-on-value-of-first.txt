<div class="post-text" itemprop="text">
<p>Is there a quicker way (perhaps using <code>itertools</code>) to implement the code below?</p>
<pre><code>for i in range(0,10):
    for j in range(0,i+1):
        do stuff
    do stuff
</code></pre>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are generating <em>combinations with replacement</em>, so <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement" rel="nofollow noreferrer"><code>itertools.combinations_with_replacement()</code></a> can generate these for you, albeit with <code>j</code> and <code>i</code> reversed:</p>
<pre><code>from itertools import combinations_with_replacement

for j, i in combinations_with_replacement(range(10), 2):
    # ...
</code></pre>
<p>Note the inversion of <code>j</code> and <code>i</code>; this produces the same <em>pairs of values</em> as your nested loop, just in a different order:</p>
<pre><code>&gt;&gt;&gt; sorted(combinations_with_replacement(range(10), 2)) == sorted((j, i) for i in range(10) for j in range(i + 1))
True
</code></pre>
</div>
<span class="comment-copy">Do you need to iterate through two lists at once and verify each list value on same position?</span>
<span class="comment-copy">I don't really understand either of the above questions. Sorry. But I want to be able to do stuff in the first loop separate to the j loop, if that makes sense. I'll update the question.</span>
<span class="comment-copy">You can't optimise this code much if you need all of the iterations.</span>
<span class="comment-copy">I just noticed that you modified the question so that you need to do stuff in the outer loop as well as in the inner loop. And in that case, there's no point trying to do anything clever with itertools: any slight savings would be offset by having to do an <code>if</code> test on <i>every</i> iteration.</span>
<span class="comment-copy">Otherwise, you could have done this: <code>for i, j in combinations(range(4, -1, -1), 2): print(i-1, j)</code></span>
<span class="comment-copy">Thank you so much for this. Really appreciate your help.</span>
<span class="comment-copy">Note that the OP now has to do stuff in both the inner loop and the outer loop.</span>
<span class="comment-copy">@PM2Ring: it depends on what the OP wants to do for each distinct <code>i</code> value though, if that matters. You can always use different means to track if your <code>i</code> value has already been seen (such as sets or dictionaries).</span>
<span class="comment-copy">Well, sure, but you still have to do that test on every iteration. And IMHO merely reversing the output order isn't as drastic as the funky order that <code>combinations_with_replacement</code> yields. :) But I guess it depends on the application.</span>
<span class="comment-copy">@Jack In the mean time, you can simply do the <code>i</code> loop and the <code>i,j</code> loops separately, using a simple <code>for</code> loop  for the <code>i</code> stuff, and either Martijn's or my solution for the <code>i,j</code> loop. That way you don't need to do the testing I was talking about earlier. But it's probably easier just to use the loops you posted in the question. :)</span>
