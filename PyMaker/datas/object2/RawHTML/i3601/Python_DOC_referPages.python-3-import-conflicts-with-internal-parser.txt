<div class="post-text" itemprop="text">
<pre><code>.
├── gen.py
├── lexer
│   ├── engine.py
|   └── ...
└── parser
    ├── engine.py
    └── ...
</code></pre>
<p>I'm writing my compiler project, but now i'm stuck with python import conflicts. In gen.py, I want to import some function for code generation, like </p>
<pre><code>import lexer.engine   # OK
import parser.engine  # ModuleNotFoundError: No module named 'parser.engine'; 'parser' is not a package
</code></pre>
<p>After some investigation, I've learned that "parser" is reserved for python internal parser. But I cannot change the directory name "parser",  since it has been used everywhere. </p>
<p>How can I solve the problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>To be accepted as a Python package, a directory must have an <code>__init__.py</code> file.<br/>
Variables declared in this file can be access as if the package is a regular module. It can also be empty.  </p>
<p>tl;dr: Add an empty <code>__init__.py</code> file to the directory and it should work.</p>
</div>
<div class="post-text" itemprop="text">
<p>python have a module <a href="https://docs.python.org/3/library/parser.html#module-parser" rel="nofollow noreferrer">parser</a> , and you want to import <code>engine</code> that it doesn't have, if you wiil try to </p>
<pre><code>import parser
print(dir(parser))
print(parser.__file__)
</code></pre>
<p>and you will see that <code>parser</code> module is not your <code>parser</code> module.</p>
<p>Simple rename your <code>parser</code> folder and every thing will be all right</p>
<p><strong>Update</strong></p>
<p>can you try to import with <code>from</code> for example:</p>
<pre><code>from parser import engine
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming your project is actually contained in a project directory like so, ...   </p>
<pre><code>my_package
| 
├── gen.py
├── lexer
│   ├── __init__.py
│   ├── engine.py
|   └── ...
├── parser
|   ├── __init__.py
|   ├── engine.py
|   └── ...
├── tests  
|   ├── test_thingy.py
</code></pre>
<p>in gen.py:</p>
<pre><code>import my_package.lexer.engine
import my_package.parser.engine
</code></pre>
<p>in the parent directory of my_package,you can run <code>python -m my_package.gen</code>.  This should run exactly as expected without the name conflicts.  With similar import statements in your tests, if you run your test modules in the same way, it should work just fine.  </p>
<p>I tested this with the following. In <code>E/work/temp/</code> I have a directory called <code>my_package</code>.  It has the following structure.</p>
<pre><code>my_package
    | 
    ├── __init__.py  # needed in python 2, but not 3
    ├── import_test_b.py
    ├── parser
    |   ├── __init__.py
    |   └── import_test_a.py
    └── tests  
        ├── __init__.py  # needed in python 2 but not python 3
        └── test_imports.py
</code></pre>
<p>import_test_a:</p>
<pre><code>def test(num):
    return num+3
</code></pre>
<p>import_test_b:</p>
<pre><code>from my_package.parser.import_test_a import tst

print(tst(4))
</code></pre>
<p>test_imports.py:</p>
<pre><code>from my_package.parser.import_test_a import tst

import unittest

class TestTst(unittest.TestCase):
    def test_one(self):
        self.assertEqual(tst(4), 7)

if __name__ == '__main__':
    unittest.main()
</code></pre>
<p>in <code>E/work/temp</code>:</p>
<p>run: <code>python -m my_package.import_test_b</code> - output = <code>7</code></p>
<p>run: <code>python -m my_package.tests.test_imports</code>
output:
.</p>
<pre><code>----------------------------------------------------------------------
Ran 1 test in 0.000s

OK
</code></pre>
</div>
<span class="comment-copy">Do you have an <code>__init__.py</code> file in the <code>parser</code> directory?</span>
<span class="comment-copy">you should be able to change your name easily in either an IDE (like pycharm or other.  they should have some sort of function allowing renaming of folders in your project) or using <code>sed</code> in linux or a linux-like environment (on windows, if you download git, it comes with a simulated bash shell)</span>
<span class="comment-copy">@e.s. "parser" is used not only in C++ files, but also many hard-code python generator and even CMakeLists. And I hate the idea to change the folder name.</span>
<span class="comment-copy">@Neo not yet, I'm not an expert in python.</span>
<span class="comment-copy">As @Neo says, create an empty <code>parser/__init__.py</code> file (that's two underscores before, and two underscores after <code>init</code>!). This way your <code>parser</code> will be recognized as a module, and <code>import parser</code> will be loading it.</span>
<span class="comment-copy">Renaming is not an option for me, since it will break many dependencies.</span>
<span class="comment-copy">@MikeDog try to import with <code>from</code> i update my answer</span>
<span class="comment-copy">no use... you may try it before updating your answer.</span>
<span class="comment-copy">i did't it like in your example, and for me work <code>from parser import engine</code>, i create folders and files that you have</span>
