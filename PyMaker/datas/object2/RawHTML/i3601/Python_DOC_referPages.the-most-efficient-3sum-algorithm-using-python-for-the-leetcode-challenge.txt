<div class="post-text" itemprop="text">
<p>I am not able to pass the time limit test in leetcode for the 3sum problem using Python. Has anyone been able to do that? Thanks!</p>
<p>My existing code:</p>
<pre><code>class Solution:
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """

        solution=[]

        for i in range(len(nums)):
            tmp={}
            for j in range(1+i,len(nums)):
                if -(nums[j]+nums[i]) in tmp:
                    solution.append(tuple(sorted((nums[j],nums[i],-(nums[j]+nums[i])))))
                else:
                    tmp[nums[j]]=j

        return list(set(solution))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No idea whats wrong with your solution. I think the trick is to treat the result objects as <a href="https://en.wikipedia.org/wiki/Multiset" rel="nofollow noreferrer">multisets</a> which are called <code>collections.Counter</code> in python. We can also use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a> to do all the getting all combinations of 3 from the input.</p>
<pre><code>import itertools
import collections

class Solution:
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """

        res = []
        for t in itertools.combinations(nums, 3):
            if sum(t) == 0:
                c = collections.Counter(t)
                if c not in res:
                    res.append(c)
        return [list(t.elements()) for t in res]
</code></pre>
<hr/>
<p>Testing:</p>
<pre><code>Solution().threeSum([-1, 0, 1, 2, -1, -4])
# --&gt; [[-1, 0, 1], [-1, -1, 2]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>May not be the efficient one, yet it's simple.</p>
<pre><code>arr = [1,2,3,4,5,6]
val = 9

class ThreeSum:
    def solve(self, arr, val):
        res = []
        for i, v1 in enumerate(arr):
            for j, v2 in enumerate(arr):
                for k, v3 in enumerate(arr):
                    if i != j  != k != i:
                        if v1+v2+v3 == val:
                            res.append([v1, v2, v3])
        return res

print(ThreeSum().solve(arr, val))
# (1, 2, 6)
</code></pre>
<p>Glad it helps!
Comment if there's any doubt.</p>
</div>
<span class="comment-copy">describe what the 3sums problem is, <i>we aren't psychic</i></span>
<span class="comment-copy">I googled 3sum. I regret it...</span>
<span class="comment-copy"><a href="https://leetcode.com/problems/3sum/description/" rel="nofollow noreferrer">leetcode.com/problems/3sum/description</a></span>
<span class="comment-copy">@FHTMitchell oh my god, this is NSFW lol</span>
<span class="comment-copy">I have a solution which is accepted but it's so kludgy that I don't want to show it. But since leetcode is so accomodating that it shows you the latest input when it fails, you have something to work with locally, don't you?</span>
<span class="comment-copy">Thanks! I have tried collections as well, but it hit the time limit error at a test case with 128 len :(</span>
<span class="comment-copy">Shouldn't it produce (2, 3, 4) too? And it's probably even slower than the asker's code.</span>
<span class="comment-copy">Thanks. The 3 loops can work, but it runs slower than using the 2 loops and a dictionary.</span>
