<div class="post-text" itemprop="text">
<p>From <a href="https://en.wikipedia.org/wiki/Foreign_function_interface" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Foreign_function_interface</a></p>
<blockquote>
<p>the ctypes module can load C functions from shared libraries/DLLs
  on-the-fly and translate simple data types automatically between
  Python and C semantics as follows:</p>
<pre><code>import ctypes
libc = ctypes.CDLL( '/lib/libc.so.6' )   # under Linux/Unix
t = libc.time(None)                      # equivalent C code: t = time(NULL)
print t
</code></pre>
</blockquote>
<p>On Lubuntu 18.04</p>
<pre><code>$ whereis libc
libc: /usr/lib/x86_64-linux-gnu/libc.a /usr/lib/x86_64-linux-gnu/libc.so /usr/share/man/man7/libc.7.gz

$ locate libc.so
/lib/i386-linux-gnu/libc.so.6
/lib/x86_64-linux-gnu/libc.so.6
/usr/lib/x86_64-linux-gnu/libc.so

$ ls -l /usr/lib/x86_64-linux-gnu/libc.so
-rw-r--r-- 1 root root 298 Apr 16 16:14 /usr/lib/x86_64-linux-gnu/libc.so
</code></pre>
<p>I was wondering why loading the libc shared library  has "'LibraryLoader' object is not callable" error?</p>
<pre><code>$ python3 --version
Python 3.6.5

$ python3

&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; libc=ctypes.cdll("/usr/lib/x86_64-linux-gnu/libc.so")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'LibraryLoader' object is not callable


&gt;&gt;&gt; libc=ctypes.cdll("/lib/x86_64-linux-gnu/libc.so.6")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'LibraryLoader' object is not callable


&gt;&gt;&gt; libc=ctypes.cdll("/lib/i386-linux-gnu/libc.so.6")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'LibraryLoader' object is not callable
</code></pre>
<p>See also <a href="https://unix.stackexchange.com/questions/449107/what-differences-and-relations-are-between-the-various-libc-so">https://unix.stackexchange.com/questions/449107/what-differences-and-relations-are-between-the-various-libc-so</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You're confusing lower case <code>cdll</code> (which is a <a href="https://docs.python.org/3/library/ctypes.html#ctypes.LibraryLoader" rel="nofollow noreferrer"><code>LibraryLoader</code></a>) with upper case <a href="https://docs.python.org/3/library/ctypes.html#ctypes.CDLL" rel="nofollow noreferrer"><code>CDLL</code></a>, which is the constructor for shared libraries.</p>
<p>This code will work as expected:</p>
<pre><code>libc = ctypes.CDLL("/lib/x86_64-linux-gnu/libc.so.6")
</code></pre>
</div>
<span class="comment-copy">Wouldnâ€™t it be better to load <code>/lib/x86_64-linux-gnu/libc.so.6</code>? Otherwise the Python script will need the C library development packages at run-time...</span>
<span class="comment-copy">@StephenKitt I think that's outside of the scope of the question. It's about how to load a library correctly, not which one is the best.</span>
<span class="comment-copy">Agreed; I was just trying to reduce the risk of copy-pasta ;-) (and it would make the answer correspond to the example which started all this).</span>
<span class="comment-copy">Thanks. What is the difference between  a LibraryLoader (e.g. <code>cdll</code>) and the constructor for shared libraries (e.g. <code>CDLL</code>)? Can they both   do the same thing?</span>
<span class="comment-copy">@Tim I'm not sure what to say to that. It's all explained in the documentation, so I can really only repeat the information from there: A LibraryLoader is an object that lets you load libraries through attribute access. <code>CDLL</code> (along with <code>WinDLL</code> and the others) is the class of those loaded libraries. Basically, <code>cdll.foo == CDLL('foo')</code>, <code>windll.foo == WinDLL('foo')</code>, etc.</span>
