<div class="post-text" itemprop="text">
<p>I used the Visitor example given <a href="http://python-3-patterns-idioms-test.readthedocs.io/en/latest/Visitor.html" rel="nofollow noreferrer">here</a> Where we have this: </p>
<pre><code>.------------------------.
|        Flower          |
+------------------------+ 
| +accept(visitor)       |
| +pollinate(pollinator) |
| +eat(eater)            |
'------------------------'
</code></pre>
<p>We also have a <code>Bug</code> and a <code>Bee</code> that can <code>pollinate</code> a <code>Flower</code>, and a <code>Predator</code> that can <code>eat</code> a flower. </p>
<p>Using the vistor pattern I can write this: </p>
<pre><code>bee = Bee()
fly = Fly()
worm = Worm()

# Using the visitor pattern:
for flower in flowerGen(10):    
    for object in [bee, fly, worm]:
        flower.accept(object)
</code></pre>
<p>But the code is as readable and funcitonal without the visitor: </p>
<pre><code># Without visitor pattern 
for flower in flowerGen(10):
    for object in [bee, fly, worm]:
        object.visit(flower)
</code></pre>
<p>The question is, what advantages provide the Visitor Pattern in this example?</p>
</div>
<div class="post-text" itemprop="text">
<p>The article you link to is pretty clear as to why you'd want to use a visitor pattern: when you <em>can't alter the objects because they come from a third party</em>:</p>
<blockquote>
<p>The assumption is that you have a primary class hierarchy that is fixed; perhaps it’s from another vendor and you can’t make changes to that hierarchy. However, your intent is that you’d like to add new polymorphic methods to that hierarchy, which means that normally you’d have to add something to the base class interface. So the dilemma is that you need to add methods to the base class, but you can’t touch the base class. How do you get around this?</p>
</blockquote>
<p>Sure, if you can just add a <code>visit</code> method to bees, flies and worms, then that's fine. But <em>when you can't</em>, using the visitor pattern is the next best option.</p>
<p>Note that in the article the relationship is reversed; you can't alter the <code>Flower</code> hierarchy:</p>
<blockquote>
<pre><code># The Flower hierarchy cannot be changed:
</code></pre>
</blockquote>
<p>but the class <em>does</em> support the visitor dispatch pattern via the <code>visit</code> method:</p>
<pre><code>class Flower(object):
    def accept(self, visitor):
        visitor.visit(self)
</code></pre>
<p>That implementation could be much more complex; the example has been simplified down to a simple <code>visitor.visit()</code> call <em>here</em>, but in practice a real visitor pattern can and does do much more at this stage.</p>
<p>For example, there could be <em>composite</em> classes, which contain multiple subcomponents. The <code>accept()</code> method would then delegate further down to those sub-elements to then call <code>accept</code> on them all, as needed. Keeping with the flower theme, perhaps there's a <a href="https://www.quora.com/What-is-composite-flower" rel="nofollow noreferrer">Chrysanthemum or Dahlia class</a>, where some visitors would eat the ray components, while others would like to visit the components in the eye to pollinate. It's up to the composite object to direct each visitor to those parts individually.</p>
<p>If you are looking for specific examples, take a look at the <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer"><code>ast</code> module</a>, which offers a <a href="https://docs.python.org/3/library/ast.html#ast.NodeVisitor" rel="nofollow noreferrer"><code>NodeVisitor</code> class</a> which should be subclassed to add methods to let you customise how the AST tree passed in is being processed. I've used the specific <a href="https://docs.python.org/3/library/ast.html#ast.NodeTransformer" rel="nofollow noreferrer"><code>NodeTransformer</code> subclass</a> to alter how Python code works on <a href="https://stackoverflow.com/questions/49895178/how-can-i-check-command-running-result/49895599#49895599">several</a> <a href="https://stackoverflow.com/questions/48771051/use-ast-module-to-mutate-and-delete-assignment-function-calls/48771194#48771194">occasions</a>. Here the visitor pattern is used to effectively filter out certain types in a larger hierarchy, greatly simplifying AST-handling code without having to alter any of the AST node classes themselves.</p>
</div>
<span class="comment-copy">How in my counter-example I alter the flower hierarchy?</span>
<span class="comment-copy">@nowox: you don't, but you are assuming that the <code>accept()</code> method is always going to be a simple dispatch. Updated.</span>
<span class="comment-copy">Ok so this example is not the best to understand this pattern. I need to think about an example where no counter-example exists</span>
<span class="comment-copy">@nowox: I added a composite example for you.</span>
