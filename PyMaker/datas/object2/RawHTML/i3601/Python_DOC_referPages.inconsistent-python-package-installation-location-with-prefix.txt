<div class="post-text" itemprop="text">
<p>I am installing python package with prefix, and getting a following error.</p>
<pre><code>$ python3 setup.py install --prefix=$HOME/some_prefix
running install

You are attempting to install a package to a directory that is not
on PYTHONPATH and which Python does not read ".pth" files from.  The
installation directory you specified (via --install-dir, --prefix, or
the distutils default setting) was:

    /home/user/some_prefix/lib64/python3.4/site-packages/

and your PYTHONPATH environment variable currently contains:

    ''
</code></pre>
<p>Surely i can <code>export PYTHONPATH=/home/user/some_prefix/lib64/python3.4/site-packages:$PYTHONPATH</code>. But given that the path has python version, I found a fancy way from <a href="https://stackoverflow.com/questions/122327/how-do-i-find-the-location-of-my-python-site-packages-directory">How do I find the location of my Python site-packages directory?</a></p>
<pre><code>$ python3 -c "import distutils.sysconfig as sc; print(sc.get_python_lib(prefix=\"$HOME/some_prefix\"));"
/home/user/some_prefix/lib/python3.4/site-packages
</code></pre>
<p>Unfortunately, they mismatch on <code>lib</code> part, apart from negligible trailing <code>/</code>. So it still fails.</p>
<pre><code>$ python3 setup.py install --prefix=$HOME/some_prefix
running install

You are attempting to install a package to a directory that is not
on PYTHONPATH and which Python does not read ".pth" files from.  The
installation directory you specified (via --install-dir, --prefix, or
the distutils default setting) was:

    /home/user/some_prefix/lib64/python3.4/site-packages/

and your PYTHONPATH environment variable currently contains:

    '/home/user/some_prefix/lib/python3.4/site-packages'
</code></pre>
<p>Now, how can I properly match it? </p>
<p>I checked the documentation, but I don't think there is a relevant arguments.</p>
<p><a href="https://docs.python.org/3/distutils/apiref.html#module-distutils.sysconfig" rel="nofollow noreferrer">https://docs.python.org/3/distutils/apiref.html#module-distutils.sysconfig</a>
distutils.sysconfig.get_python_lib([plat_specific[, standard_lib[, prefix]]])Â¶</p>
<pre><code>$ python3 -c "import distutils.sysconfig as sc; print(sc.get_python_lib(\"A\", \"B\", \"C\"));"
C/lib64/python3.4
</code></pre>
<p>Also, which one is right? is lib or lib64? I see more packages in <code>/usr/lib</code>.</p>
<pre><code>$ ll /usr/lib/python3.4/site-packages/ | wc
     70     554    5408
$ ll /usr/lib64/python3.4/site-packages/ | wc
     11      82     764
</code></pre>
<p>I am using standard python comes from centos 7.</p>
<pre><code>$ uname -a
Linux localhost 3.10.0-514.el7.x86_64 #1 SMP Tue Nov 22 16:42:41 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
$ cat /etc/os-release 
NAME="CentOS Linux"
VERSION="7 (Core)"
$ which python3
/usr/bin/python3
$ python3 --version
Python 3.4.8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Fedora / CentOS <a href="https://src.fedoraproject.org/cgit/rpms/python3.git/plain/00102-lib64.patch" rel="nofollow noreferrer">patches various Python module</a> to alter the installation locations, see <a href="https://serverfault.com/questions/60619/fedora-usr-lib-vs-usr-lib64">this ServerFault post on the difference between <code>/usr/lib</code> and <code>/usr/lib64</code></a>.</p>
<p>Note that the <code>/usr/lib64</code> path is only used for <em>platform specific code</em>, not for pure-python libraries. So the correct method to use is to set the <a href="https://docs.python.org/3/distutils/apiref.html#distutils.sysconfig.get_python_lib" rel="nofollow noreferrer"><code>plat_specific</code> argument to <code>get_python_lib()</code></a> (the first one) to <code>True</code>:</p>
<pre><code>$ python3 -c "import distutils.sysconfig as sc; print(sc.get_python_lib(True, prefix=\"$HOME/some_prefix\"))"
</code></pre>
<p>However, if your target prefix directory is for a <em>separate Python installation without the Fedora / CentOS patches</em>, then you should really use the Python binary <em>installed in that prefix</em> to handle the installation:</p>
<pre><code>$HOME/some_prefix/bin/python3 setup.py install
</code></pre>
<p>It'll come with all the right system configuration, including an unpatched <code>distutils</code> and a <code>sysconfig</code> module with the right local <code>$PREFIX</code> value, and no <code>PYTHONPATH</code> warning will be issued. </p>
<p>And if you wanted to isolate packages from the system installation, use a <a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/" rel="nofollow noreferrer">virtualenv</a> and install with the environment-specific Python binary:</p>
<pre><code>$ virtualenv name_of_virtualenv_directory
$ name_of_virtualenv_directory/bin/python setup.py install
</code></pre>
</div>
<span class="comment-copy">So why not use <code>/home/user/some_prefix/bin/python3</code> instead to install your package? You are using the wrong Python binary here.</span>
<span class="comment-copy">You exactly pinpointed my question. Thank you.</span>
