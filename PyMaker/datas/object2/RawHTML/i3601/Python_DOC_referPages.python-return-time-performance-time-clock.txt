<div class="post-text" itemprop="text">
<p>I have the following code where I want to measure time performance.  </p>
<pre><code>import time

def fibonacci(n):
    t0 = time.clock()
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = fibonacci(n-1)
        b = fibonacci(n-2)
    return a + b, time.clock()  
</code></pre>
<p>When I run it returns <code>Type error: can only concatenate tuple (not "int") to tuple</code><br/>
How can I return result of the function together with time performance please? What am I missing here?</p>
</div>
<div class="post-text" itemprop="text">
<p>if you want the function itself to return the time, you have to remember that this is a recursive function that calls itself, so you have to account for (and probably discard) the inner calls timing results. Also you have to edit <strong>all</strong> <code>return</code> statements:</p>
<pre><code>def fibonacci(n):
    t0 = time.clock()
    if n == 0:
        return 0, time.clock() - t0
    elif n == 1:
        return 1, time.clock() - t0
    else:
        a, _ign = fibonacci(n-1)
        b, _ign = fibonacci(n-2)
    return a + b, time.clock() - t0 
</code></pre>
<p>Another approach would be to measure the time <strong>outside</strong> the function, that way you don't have to modify the function at all:</p>
<pre><code> t0 = time.clock()
 fibonacci(some_number) # call the original function without timing
 time_taken = time.clock() - t0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>a</code> and <code>b</code> are results of your function, you're returning a tuple... Just time the main fibonacci call from <em>outside</em> the function, in a function wrapper for instance:</p>
<pre><code>def time_fibonacci(n):
    start = time.clock()
    result = fibonacci(n)
    # return a tuple: result + cpu time
    return result, time.clock() - start  
</code></pre>
<p>and fixed fibonacci itself (without the clocking):</p>
<pre><code>def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = fibonacci(n-1)
        b = fibonacci(n-2)
    return a + b
</code></pre>
</div>
<span class="comment-copy"><code>a</code> and <code>b</code> are results of your function, you're returning a tuple... Just time the main fibonacci call from <i>outside</i> the function.</span>
<span class="comment-copy">You should not use <code>time.clock</code>. From the <a href="https://docs.python.org/3/library/time.html#time.clock" rel="nofollow noreferrer">docs</a>: "time.clock() ... Deprecated since version 3.3: .... use perf_counter() or process_time() instead, depending on your requirements"</span>
<span class="comment-copy">On windows, the first call to <code>time.clock()</code> starts the timer counting from 0 so the <code>- t0</code> isn't necessary (although it would be bad style to omit as functionality would change if you moved to another O.S.)</span>
