<div class="post-text" itemprop="text">
<p>I was able to capture the data I need with selenium python, but I'm wondering how to recursively go through the almost-consistently structured text to create new objects. To get right to the point, selenium output this to a .txt file. Names have been changed to protect the innocent.</p>
<pre><code>  (001) DOLE, BOB &amp; ELIZABETH - 1345641
17.23 92.55 22.05 07/24/2007
   (002) FRANKLIN, BENJAMIN - 4005648
88.38 1102.83 1118.32 11/02/2008
(002) CLINTON, WILLIAM &amp; HILLARY - 768568
0.00 288.23 56.00 01/01/1989
    (005) JEFFERSON, THOMAS &amp; MARTHA - 5487784
9230.02 23813.11 555.23 01/04/1780
</code></pre>
<p>A few hundred lines of that, ranging from 0 to 4 spaces before the (00#). The goal is to result in taking each one and creating a new object with attributes through the django orm. Presumably if I can group every two lines, then I could just run a for loop. I don't need the number in parenthesis so the spaces wouldn't matter, I'd just look for the last name to start one space after the (###).</p>
<p>Any recommendations on how to run through these? The ideal result for every pair of lines would be as follows:</p>
<pre><code>entry = Politician.create(
    id = 1345641,
    last_name = 'Dole',
    first_name = 'Bob',
    secondary_first_name = 'Elizabeth',
    amount_one = 17.23,
    amount_two = 92.55,
    amount_three = 22.05,
    favorite_date = parse(07/24/2007)
entry.save()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As you suggested I would read two lines at a time:</p>
<pre><code>import itertools

with open(fn) as f:
    for two_lines in itertools.zip_longest(f, f, fillvalue=''):
        print(' '.join(two_lines))
</code></pre>
<p>Output:</p>
<pre><code>  (001) DOLE, BOB &amp; ELIZABETH - 1345641 17.23 92.55 22.05 07/24/2007
   (002) FRANKLIN, BENJAMIN - 4005648 88.38 1102.83 1118.32 11/02/2008
(002) CLINTON, WILLIAM &amp; HILLARY - 768568 0.00 288.23 56.00 01/01/1989
    (005) JEFFERSON, THOMAS &amp; MARTHA - 5487784 9230.02 23813.11 555.23 01/04/1780
</code></pre>
<p>and then regex my way through this...</p>
<p>edit: 
actually I think regex wouldn't even be necessary.</p>
<p>it should be enough to just split up the data like</p>
<pre><code>line = ' '.join(two_lines)
line = line.strip()[5:] # remove whitespace and (001)
name, numbers = line.split('-')
id, amount_one, amount_two, amount_three, favorite_date = numbers.split()
</code></pre>
</div>
<span class="comment-copy">Thank you for the reply! So if I skip the writing-to-.txt step and just dump the data into a variable, I could just do <code>def parse_data(data.text):</code> and jump straight to the for loop, and in each loop instead of printing, use <code>joined_lines = (' '.join(two_lines)</code>, and dump that into <code>def store_object(joined_lines):</code> using the code in your last bit there?</span>
<span class="comment-copy">Yeah, that should work... You might want to have a look at the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">Grouper Recipe</a>, a variation of that is what I used to get two lines at a time...</span>
