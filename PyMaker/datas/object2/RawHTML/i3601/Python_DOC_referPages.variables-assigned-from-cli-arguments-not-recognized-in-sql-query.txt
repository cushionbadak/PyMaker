<div class="post-text" itemprop="text">
<p>I'm trying to write code where after giving name and email input in the command prompt it should update the data in the Postgres database. English is not my first language, but I'll try my best to describe my situation.</p>
<p>So basically when typing in the cmd:</p>
<pre><code> python myProgram.py jacob8 jacob8@company.com
</code></pre>
<p>It should update the jacob8 in the username column and jacob8@company.com in the email column.</p>
<p>So my code is like this:</p>
<pre><code>import sys
import psycopg2

conn = psycopg2.connect("user=nana password=nana dbname=nana host=localhost")
cur = conn.cursor()

userName = str(sys.argv[1])
eMail = str(sys.argv[2])
cur.execute('UPDATE "table" SET "user_name" = userName WHERE "address"=%s', (mac,))
cur.execute('UPDATE "table" SET "user_email" = eMail WHERE "address"=%s', (mac,))
conn.commit()
</code></pre>
<p>...but for some reason <code>userName</code> that Im using where I'm trying to SET, doesn't recognize the userName that I assigned as <code>sys.argv[1]</code> and the same goes about <code>eMail</code>. When I'm adding them inside single quotation marks, it's recognized, but it messes up (makes the rest of the line green) the rest of the line starting with WHERE.</p>
<p>I also tried to put <code>sys.argv[1]</code> and <code>sys.argv[2]</code> straight into SET line (like <code>UPDATE "table" SET "user_name" = sys.argv[1] WHERE</code>) but it gives me the same kind of problem - it wont recognize the <code>import sys</code> anymore.</p>
<p>What am I missing here? It's clearly something to do with how to add quotation marks but I can't find the correct way..</p>
</div>
<div class="post-text" itemprop="text">
<p>You need placeholders for <em>all</em> locations where you want to substitute parameterized data -- so not just <code>mac</code>, but also <code>userName</code> and <code>eMail</code>.</p>
<p>Personally, for readability's sake, I'd write this as just one query doing both updates, as follows:</p>
<pre><code>query = '
UPDATE table
SET user_name = %(name)s, user_email = %(email)s
WHERE address = %(mac)s
'
cur.execute(query, {'name': userName, 'email': eMail, 'mac': mac})
</code></pre>
<hr/>
<p>That said, the shortest possible change is just:</p>
<pre><code>cur.execute('UPDATE "table" SET "user_name" = %s WHERE "address"=%s', (userName, mac,))
cur.execute('UPDATE "table" SET "user_email" = %s WHERE "address"=%s', (eMail, mac,))
</code></pre>
</div>
<span class="comment-copy">Providing the exact error you got rather than just saying "doesn't recognize" and leaving it to the reader to understand what you meant (ie. that you were <i>expecting</i> strings in the query to be matched against local variables) would have made this easier to answer.</span>
<span class="comment-copy">better if you separate the two problems: managing command line arguments and constructing your query, @Charles Duffy has answer for the latter</span>
<span class="comment-copy">@EvgenyPogrebnyak, ...the OP isn't using good practices for managing command-line arguments, but their code isn't actually <i>buggy</i> on that count; it's just missing a bunch of features that <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a> would give them for free.</span>
<span class="comment-copy">@Charles Duffy, not buggy, but neither too canonical. if the question was rounded as MVCE the command line should not be there at all, that was my point</span>
<span class="comment-copy">Quite right on that count -- if they'd tested <code>userName='foo'; eMail='bar'</code> instead of using <code>sys.argv</code>, they could have satisfied themselves that sys.argv had nothing to do with the problem before asking the question.</span>
<span class="comment-copy">Thanks alot for a quick answer!</span>
