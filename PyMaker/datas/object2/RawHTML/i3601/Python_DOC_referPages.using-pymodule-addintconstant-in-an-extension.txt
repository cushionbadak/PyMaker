<div class="post-text" itemprop="text">
<p>I have seen <a href="https://stackoverflow.com/questions/23788140/adding-symbolic-constants-with-hex-values-to-python-extension-module">Adding symbolic constants with hex values to Python extension module</a> and I am trying to reproduce this effect:</p>
<pre><code>#include &lt;Python.h&gt;
#include &lt;Windows.h&gt;

static PyObject * sys_shutdown(PyObject *self, PyObject *args) {
    int val;

    if (!PyArg_ParseTuple(args, "i", &amp;val))
        val = SHTDN_REASON_MINOR_OTHER; // Provide failsafe

    ExitWindowsEx(EWX_POWEROFF, val); // Shutdown
    return Py_BuildValue("");
}

static PyObject * sys_restart(PyObject *self, PyObject *args) {
    int val;

    if (!PyArg_ParseTuple(args, "i", &amp;val))
        val = SHTDN_REASON_MINOR_OTHER; // Provide failsafe
    ExitWindowsEx(EWX_REBOOT, val); // Restart
    return Py_BuildValue("");
}

static PyObject * sys_log_out(PyObject *self, PyObject *args) {
    int val;

    if (!PyArg_ParseTuple(args, "i", &amp;val))
        val = SHTDN_REASON_MINOR_OTHER; // Provide failsafe

    ExitWindowsEx(EWX_LOGOFF, val); // Log out
    return Py_BuildValue("");
}

static PyMethodDef localMethods[] = {
    {"shutdown", (PyCFunction)sys_shutdown, METH_VARARGS, "..."},
    {"restart", (PyCFunction)sys_restart, METH_VARARGS, "..."},
    {"log_out", (PyCFunction)sys_log_out, METH_VARARGS, "..."},
    {NULL, NULL, 0, NULL}
};

static struct PyModuleDef func = {
    PyModuleDef_HEAD_INIT,
    "utilities",
    "...",
    -1,
    localMethods,
};

PyMODINIT_FUNC PyInit_utilities(void) {
    PyObject *value;

    value = PyModule_New(&amp;func);

    PyModule_AddIntConstant(value, "DEFINED", AF_INET);

    return PyModule_Create(&amp;func);
}
</code></pre>
<p>Setup Script:</p>
<pre><code>from distutils.core import setup, Extension

module = Extension(
    "utilities", 
    sources = ["main.c"],
        libraries = ["user32"]
)

setup (
    name = "Utilities",
    version = "1.0",
    ext_modules = [module])
</code></pre>
<p>Everything builds as expected, however I cannot use <code>DEFINED</code> in my extension:</p>
<pre><code>import utilities
for i in utilities.__dict__: print(i)
utilities.DEFINED # AttributeError: module 'utilities' has no attribute 'DEFINED'
</code></pre>
<p>Returns:</p>
<pre><code>__name__
__doc__
__package__
__loader__
__spec__
shutdown
restart
log_out
__file__
</code></pre>
<p>I thought of returning <code>value</code> like so:</p>
<pre><code>return PyModule_Create(&amp;value);
</code></pre>
<p>But that returns:</p>
<blockquote>
<p>LINK : fatal error LNK1104: cannot open file 'build\lib.win32-3.6\WinUtils.cp36-win32.pyd'
  error: command 'C:\Program Files (x86)\Microsoft Visual Studio\2017\WDExpress\VC\Tools\MSVC\14.14.26428\bin\HostX86\x86\link.exe' failed with exit status 1104</p>
</blockquote>
<p>How can I add the <code>DEFINED</code> value to my extension (so that I can run <code>utilities.DEFINED</code>)?</p>
<p><strong>Edit:</strong></p>
<p>As mentioned in the answer below closing everything and trying again builds the extension successfully, however using <code>return PyModule_Create(&amp;value);</code> still crashes.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>PyModule_AddIntConstant(value, "DEFINED", DEFINED_VALUE);</code> is correct (assuming that <code>DEFINED_VALUE</code> is a (<em>C</em>) <code>long</code>).</p>
<p>That, combined with the linker error at the end (and with the fact that you're writing code then testing, and so on ...) tells me that the linker is not able to write the new <em>.pyd</em> file (that contains the latest changes - including <code>DEFINED</code> variable), because it's in use by a previously started <em>python.exe</em> process that imported your module.</p>
<ul>
<li>Close <strong>every</strong> running interpreter that imported your module (to "unlock" <em>WinUtils.cp36-win32.pyd</em>)</li>
<li>Build (this time, the linker will be able to overwrite the file)</li>
<li>Test (run your <em>Python</em> code)</li>
</ul>
<p>Note: you could check the function return value (<a href="https://docs.python.org/3.5/c-api/module.html#c.PyModule_AddIntConstant" rel="nofollow noreferrer">[Python]: int <strong>PyModule_AddIntConstant</strong>(<em>PyObject *module, const char *name, long value</em>)</a>).</p>
<p><strong><em>@EDIT0</em></strong> (regarding the 2<sup>nd</sup> problem):</p>
<p>As I pecified in my one of my comments, use <code>PyModule_Create</code> (as according to <a href="https://docs.python.org/3/c-api/module.html#c.PyModule_New" rel="nofollow noreferrer">[Python]: PyObject* <strong>PyModule_New</strong>(<em>const char *name</em>)</a>, you're getting <em>Undefined Behavior</em>):</p>
<pre><code>PyMODINIT_FUNC PyInit_utilities() {
    PyObject *mod = PyModule_Create(&amp;func);
    PyModule_AddIntConstant(mod, "DEFINED", AF_INET);
    return mod;
}
</code></pre>
</div>
<span class="comment-copy">You were correct, it builds the code, but the Interpreter still crashes.  I will edit my post to make it  a little more reproducible.</span>
<span class="comment-copy">By "<i>crashes</i>" you mean <code>NameError</code>?</span>
<span class="comment-copy">No.   I mean the interpreter opens momentarily and closes (I added an <code>input()</code> so I know something is wrong).  If I run it from the IDLE <code>Shell</code> comes up.  There are no errors unfortunately.</span>
<span class="comment-copy">And only when you access <code>DEFINED</code> ? Try other members (<code>restart</code>) as well. Anyway <code>PyModule_New</code>  and <code>PyModule_Create</code> doesn;t seem right to me. Try <code>return value;</code> (and initialize it <code>value = PyModule_Create(&amp;func);</code>).</span>
<span class="comment-copy">That should be the way. Watch out for <b>U</b>tilities vs <b>u</b>tilities (including in your <i>setup.py</i>). All should match. Also <code>spammethods</code> should end in <code>{NULL, NULL, 0, NULL}</code>. But anyway I'm confused, in the question there is some code that's working. Don't change it after posting the question (or if you do adapt the question accordingly).</span>
