<div class="post-text" itemprop="text">
<p>I would like to display my result without the tag ARRAY before which array in a list</p>
<p>My result is this:</p>
<pre><code>[array([202.632   , 565.74    , 177.258   ,   0.01627 ,   0.00008 ,
     0.00919 ,   0.00963 ,   0.02756 ,   0.0717  ,   0.833   ,
     0.03515 ,   0.04265 ,   0.0646  ,   0.10546 ,   0.07889 ,
    14.989   ,   0.427627,   0.775708,  -4.892495,   0.262281,
     2.910213,   0.270173,   1.      ]), array([116.879   , 131.897   , 108.153   ,   0.00788 ,   0.00007 ,
     0.00334 ,   0.00493 ,   0.01003 ,   0.02645 ,   0.265   ,
     0.01394 ,   0.01625 ,   0.02137 ,   0.04183 ,   0.00786 ,
    22.603   ,   0.540049,   0.813432,  -4.476755,   0.262633,
     1.827012,   0.326197,   1.      ]), array([169.774   , 191.759   , 151.451   ,   0.01568 ,   0.00009 ,
     0.00863 ,   0.00946 ,   0.02589 ,   0.08143 ,   0.821   ,
     0.03804 ,   0.05426 ,   0.08808 ,   0.11411 ,   0.0753  ,
    12.359   ,   0.56161 ,   0.793509,  -3.297668,   0.414758,
     3.413649,   0.457533,   1.      ])]
</code></pre>
<p>And I want my result like this:</p>
<pre><code>[[202.632   , 565.74    , 177.258   ,   0.01627 ,   0.00008 ,
     0.00919 ,   0.00963 ,   0.02756 ,   0.0717  ,   0.833   ,
     0.03515 ,   0.04265 ,   0.0646  ,   0.10546 ,   0.07889 ,
    14.989   ,   0.427627,   0.775708,  -4.892495,   0.262281,
     2.910213,   0.270173,   1.      ], [116.879   , 131.897   , 108.153   ,   0.00788 ,   0.00007 ,
     0.00334 ,   0.00493 ,   0.01003 ,   0.02645 ,   0.265   ,
     0.01394 ,   0.01625 ,   0.02137 ,   0.04183 ,   0.00786 ,
    22.603   ,   0.540049,   0.813432,  -4.476755,   0.262633,
     1.827012,   0.326197,   1.      ], [169.774   , 191.759   , 151.451   ,   0.01568 ,   0.00009 ,
     0.00863 ,   0.00946 ,   0.02589 ,   0.08143 ,   0.821   ,
     0.03804 ,   0.05426 ,   0.08808 ,   0.11411 ,   0.0753  ,
    12.359   ,   0.56161 ,   0.793509,  -3.297668,   0.414758,
     3.413649,   0.457533,   1.      ]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3.5/library/reprlib.html#subclassing-repr-objects" rel="nofollow noreferrer"><code>reprlib</code></a> and <a href="https://docs.python.org/3/library/sys.html#sys.displayhook" rel="nofollow noreferrer"><code>sys.displayhook</code></a>.</p>
<p>The following code very closely follows code snippets from the linked Python docs:</p>
<pre><code>import sys
import reprlib
import builtins

class MyRepr(reprlib.Repr):

    def repr_ndarray(self, obj, level):
        return repr(obj).replace('array(', '')[:-1]

myrepr = MyRepr()

def mydisplayhook(value):
    if value is None:
        return
    # Set '_' to None to avoid recursion
    builtins._ = None
    text = myrepr.repr(value)
    try:
        sys.stdout.write(text)
    except UnicodeEncodeError:
        bytes = text.encode(sys.stdout.encoding, 'backslashreplace')
        if hasattr(sys.stdout, 'buffer'):
            sys.stdout.buffer.write(bytes)
        else:
            text = bytes.decode(sys.stdout.encoding, 'strict')
            sys.stdout.write(text)
    sys.stdout.write("\n")
    builtins._ = value

sys.displayhook = mydisplayhook
</code></pre>
<p>And now for example:</p>
<pre><code>[np.arange(5)]
# [[0, 1, 2, 3, 4]]
</code></pre>
<p>Note: this might also affect the display of other types. (I think <code>reprlib.Repr</code> by default shortens things.) To prevent this have a look at the <a href="https://docs.python.org/3.5/library/reprlib.html#repr-objects" rel="nofollow noreferrer">docs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like a list with an array element (or maybe more than one):</p>
<pre><code>In [11]: alist = [np.array([1,2,3])]
In [12]: alist
Out[12]: [array([1, 2, 3])]
In [13]: print(alist)
[array([1, 2, 3])]
</code></pre>
<p>We could iterate through the list and turn each array into it's list equivalent:</p>
<pre><code>In [14]: [x.tolist() for x in alist]
Out[14]: [[1, 2, 3]]
</code></pre>
<p>That's a nested list.  Or we could turn it into an array:</p>
<pre><code>In [15]: arr = np.stack(alist)
In [16]: arr
Out[16]: array([[1, 2, 3]])
In [17]: print(arr)
[[1 2 3]]
</code></pre>
<p>The <code>str</code> display of a array doesn't include the <code>array</code> word.  This <code>stack</code> though only works if the constituent lists are all the same shape.</p>
<p>One way or other we have to convert the list of arrays into something else - an array or nested lists.  We can't just change how the list is displayed.</p>
<hr/>
<p>When I copy-n-paste your list (with <code>array=np.array</code>), I a list that displays as:</p>
<pre><code>In [35]: yrlist
Out[35]: 
[array([ 2.026320e+02,  5.657400e+02,  1.772580e+02,  1.627000e-02,
         8.000000e-05,  9.190000e-03,  9.630000e-03,  2.756000e-02,
         7.170000e-02,  8.330000e-01,  3.515000e-02,  4.265000e-02,
         6.460000e-02,  1.054600e-01,  7.889000e-02,  1.498900e+01,
         4.276270e-01,  7.757080e-01, -4.892495e+00,  2.622810e-01,
         2.910213e+00,  2.701730e-01,  1.000000e+00]),
 array([ 1.168790e+02,  1.318970e+02,  1.081530e+02,  7.880000e-03,
         7.000000e-05,  3.340000e-03,  4.930000e-03,  1.003000e-02,
          ....
         3.413649e+00,  4.575330e-01,  1.000000e+00])]
</code></pre>
<p>Note that the arrays not only show 'array' tag, but the display all elements with with same format, scientific notation being the best for this range of values.</p>
<p>If I specify a <code>dtype=object</code> for each array</p>
<pre><code>In [37]: olist
Out[37]: 
[array([202.632, 565.74, 177.258, 0.01627, 8e-05, 0.00919, 0.00963,
        0.02756, 0.0717, 0.833, 0.03515, 0.04265, 0.0646, 0.10546, 0.07889,
        14.989, 0.427627, 0.775708, -4.892495, 0.262281, 2.910213,
        0.270173, 1.0], dtype=object),
         ....
        0.0753, 12.359, 0.56161, 0.793509, -3.297668, 0.414758, 3.413649,
        0.457533, 1.0], dtype=object)]
</code></pre>
<p>each array element displays much as it is entered.  But there is also the <code>dtype</code> notation.</p>
<p>For this list of longer arrays, the <code>tolist</code> approach displays as:</p>
<pre><code>In [42]: print(str([a.tolist() for a in yrlist]))
[[202.632, 565.74, 177.258, 0.01627, 8e-05, 0.00919, 0.00963, 0.02756, 0.0717, 0.833, 0.03515, 0.04265, 0.0646, 0.10546, 0.07889, 14.989, 0.427627, 0.775708, -4.892495, 0.262281, 2.910213, 0.270173, 1.0], [116.879, 131.897, 108.153, 0.00788, 7e-05, 0.00334, 0.00493, 0.01003, 0.02645, 0.265, 0.01394, 0.01625, 0.02137, 0.04183, 0.00786, 22.603, 0.540049, 0.813432, -4.476755, 0.262633, 1.827012, 0.326197, 1.0], [169.774, 191.759, 151.451, 0.01568, 9e-05, 0.00863, 0.00946, 0.02589, 0.08143, 0.821, 0.03804, 0.05426, 0.08808, 0.11411, 0.0753, 12.359, 0.56161, 0.793509, -3.297668, 0.414758, 3.413649, 0.457533, 1.0]]
</code></pre>
<p>Without any of the line wrapping that <code>np.array</code> display produces.</p>
<p>Doing an independent print for each array in the list:</p>
<pre><code>In [46]: for a in yrlist:
    ...:     print(a)
    ...:     
[ 2.026320e+02  5.657400e+02  1.772580e+02  1.627000e-02  8.000000e-05
  9.190000e-03  9.630000e-03  2.756000e-02  7.170000e-02  8.330000e-01
  3.515000e-02  4.265000e-02  6.460000e-02  1.054600e-01  7.889000e-02
  1.498900e+01  4.276270e-01  7.757080e-01 -4.892495e+00  2.622810e-01
  2.910213e+00  2.701730e-01  1.000000e+00]
[ 1.168790e+02  1.318970e+02  1.081530e+02  7.880000e-03  7.000000e-05
  3.340000e-03  4.930000e-03  1.003000e-02  2.645000e-02  2.650000e-01
  1.394000e-02  1.625000e-02  2.137000e-02  4.183000e-02  7.860000e-03
  2.260300e+01  5.400490e-01  8.134320e-01 -4.476755e+00  2.626330e-01
  1.827012e+00  3.261970e-01  1.000000e+00]
[ 1.697740e+02  1.917590e+02  1.514510e+02  1.568000e-02  9.000000e-05
  8.630000e-03  9.460000e-03  2.589000e-02  8.143000e-02  8.210000e-01
  3.804000e-02  5.426000e-02  8.808000e-02  1.141100e-01  7.530000e-02
  1.235900e+01  5.616100e-01  7.935090e-01 -3.297668e+00  4.147580e-01
  3.413649e+00  4.575330e-01  1.000000e+00]
</code></pre>
<p>Turning the whole thing into an array</p>
<pre><code>In [48]: print(np.array(yrlist))
[[ 2.026320e+02  5.657400e+02  1.772580e+02  1.627000e-02  8.000000e-05
   9.190000e-03  9.630000e-03  2.756000e-02  7.170000e-02  8.330000e-01
   3.515000e-02  4.265000e-02  6.460000e-02  1.054600e-01  7.889000e-02
   1.498900e+01  4.276270e-01  7.757080e-01 -4.892495e+00  2.622810e-01
   2.910213e+00  2.701730e-01  1.000000e+00]
 [ 1.168790e+02  1.318970e+02  1.081530e+02  7.880000e-03  7.000000e-05
   3.340000e-03  4.930000e-03  1.003000e-02  2.645000e-02  2.650000e-01
   1.394000e-02  1.625000e-02  2.137000e-02  4.183000e-02  7.860000e-03
   2.260300e+01  5.400490e-01  8.134320e-01 -4.476755e+00  2.626330e-01
   1.827012e+00  3.261970e-01  1.000000e+00]
 [ 1.697740e+02  1.917590e+02  1.514510e+02  1.568000e-02  9.000000e-05
   8.630000e-03  9.460000e-03  2.589000e-02  8.143000e-02  8.210000e-01
   3.804000e-02  5.426000e-02  8.808000e-02  1.141100e-01  7.530000e-02
   1.235900e+01  5.616100e-01  7.935090e-01 -3.297668e+00  4.147580e-01
   3.413649e+00  4.575330e-01  1.000000e+00]]
</code></pre>
</div>
<span class="comment-copy">May be <code>list(map(list, arr))</code>?</span>
<span class="comment-copy">Please include your attempts.</span>
<span class="comment-copy">Please have a look at <a href="https://stackoverflow.com/help/how-to-ask">How to ask a good question</a> and adjust your question accordingly. Thanks!</span>
<span class="comment-copy">I should add a qualification - I'm working with <code>ipython</code> which does its own pretty-printing, especially of lists.</span>
