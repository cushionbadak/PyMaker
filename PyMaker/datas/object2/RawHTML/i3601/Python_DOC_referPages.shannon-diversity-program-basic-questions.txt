<div class="post-text" itemprop="text">
<p>I am a biology student trying to get into programming and have some issue with a basic index calculator I am trying to write for a research project. I need a program that will prompt the user to input data points one at a time, perform the proper calculation (<code>-1*(x*ln(x))</code>) on each data point, and enter that new calculated value into an array. Once the user inputs <code>'done'</code>, I would like the program to sum the array values and return that index value.</p>
<p>This is what I have. I am very new so apologies for any blaring mistakes. Any points in the right direction are very appreciated.</p>
<pre><code>import math

print('This program calculates a Shannon Diversity '
      'Index value for a set of data points entered by the user.'
      ' when prompted enter a species number value,then press enter. '
      'COntinue until all data points have been entered. '
      'Upon completion, enter the word done.')

def Shannonindex():

    index = []
    entries = 1,000,000
    endKey = 'done'

    for i in range(entries):
        index = [input("Enter a value: ")]

        if index != endKey:
        entry = p
        p = -1*(x*ln(x))
        index.append(p)
        else Sindex = sum(index)

        return Sindex

print('Your Shannon Diversity Value is: ", Sindex)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a huge number of problms here.</p>
<ul>
<li>You need to get your variables straight.

<ul>
<li>You're trying to use <code>index</code> to mean both the list of values, and the input string. It can't mean both things at once.</li>
<li>You're trying to use <code>x</code> without defining it anywhere. Presumably it's supposed to be the float value of the input string? If so, you have to say that.</li>
<li>You're trying to use <code>p</code> to define <code>entry</code> before <code>p</code> even exists. But it's not clear what <code>entry</code> is even useful for, since you never use it.</li>
</ul></li>
<li>You also need to get your control flow straight.

<ul>
<li>What code is supposed to run in that <code>else</code> case? Either it has to include the <code>return</code>, or you need some other way to break out of the loop.</li>
</ul></li>
<li>You also need to get your types straight. <code>[input(â€¦)]</code> is going to give you a list with one element, the input string. It's hard to imagine what that would be useful for. You can't compare that list to <code>'done'</code>, or convert it to a float. What you want is just the input string itself.</li>
<li>You can't just guess at what functions might exist. There's no function named <code>ln</code>. Look at the docs for <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">Built-in Functions</a>, the <a href="https://docs.python.org/3/library/math.html" rel="nofollow noreferrer"><code>math</code></a> module, and anything else that looks like it might be relevant to find the function you need.</li>
<li><code>1,000,000</code> is not a number, but a tuple of three numbers.

<ul>
<li>You can write <code>1_000_000</code>, or just <code>1000000</code>.</li>
<li>But it's not clear why you need a limit in the first place. Why not just loop forever until the enter <code>done</code>?</li>
</ul></li>
<li>You've defined a function, but you never call it, so it doesn't do any good.</li>
</ul>
<p>So, let's sort out these problems:</p>
<pre><code>import math

def Shannonindex():    
    index = []
    endKey = 'done'    
    while True:
        value = input("Enter a value: ")
        if value != endKey:
            x = float(value)
            p = -1 * (x * math.log(x))
            index.append(p)
        else:
            Sindex = sum(index)
            return Sindex

Sindex = Shannonindex()
print('Your Shannon Diversity Value is: ", Sindex)
</code></pre>
<hr/>
<p>There are still many ways you could improve this:</p>
<ul>
<li>Add some error handling, so if the user typos <code>13.2.4</code> or <code>1O</code>, it tells them to try again instead of bailing out on the whole thing.</li>
<li>You don't actually need to build a list, just keep a running total.</li>
<li>If you reverse the sense of the <code>if</code>/<code>else</code> it will probably be more readable.</li>
<li>You're not actually calculating the Shannon diversity index. That's not the sum of <code>-x ln x</code>, it's the sum of <code>-p ln p</code> where each <code>p</code> is the <em>proportion</em> of <code>x / sum(all x)</code>. To handle that, you need to keep all the raw <code>x</code> values in a list, so you can convert that to a list of <code>p</code> values, so you can sum those.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<pre><code>import math
index = []

for i in range(1,100000):
    val = input("Enter a value: ")

    if val =='done':
        break
    else:
        x = int(val)
        p = -1*(x*math.log(x))
        index.append(p)

print ("The value of index is %s:"%index)
</code></pre>
<p>=================================================</p>
<p>This is the simplified form of your code, since you are new to python. 
This might help you get the values stored in a list and calculate it until you type done.  </p>
</div>
<span class="comment-copy">Beat me to it, and with a much more comprehensive answer, too! Nice one</span>
<span class="comment-copy">Thank you, I appreciate the help. Its all a bit overwhelming. I can see several things I did wrong up front, some of the rest are a bit hard to wrap my brain around. I can see where I was messing up the actual calculation. I toyed with it some more and it runs, but I know it is incorrect, and I know I am not having it use the values I want when I want them. I tried to comment out my thought process, Ill update the question</span>
