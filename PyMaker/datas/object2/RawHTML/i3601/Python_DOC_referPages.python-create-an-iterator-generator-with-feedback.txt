<div class="post-text" itemprop="text">
<p>Is it possible to create a iterator/generator which will decide on the next value based on some <strong>result</strong> on the previous iteration?</p>
<p>i.e.</p>
<pre><code>y = None
for x in some_iterator(ll, y):
  y = some_calculation_on(x)
</code></pre>
<p>I would like the logic of choosing the next <code>x</code> to depend on the calculation result allowing different logic for different results, much like in a search problem.</p>
<p>I also want to keep the how to choose the next <code>x</code> and the calculation on <code>x</code> as separate as possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>Did you that you can send to a generator using <a href="https://docs.python.org/3/reference/expressions.html#generator.send" rel="nofollow noreferrer"><code>generator.send</code></a>? So yes, you can have a generator to change its behaviour based on feedback from the outside world. From the doc:</p>
<blockquote>
<p><code>generator</code>.<strong>send</strong>(<em>value</em>)</p>
<p>Resumes the execution and “sends” a value into the generator function.
  The value argument becomes the result of the current yield expression.
  The <code>send()</code> method returns the next value yielded by the generator
  [...]</p>
</blockquote>
<h2>Example</h2>
<p>Here is a counter that will increment only if told to do so.</p>
<pre><code>def conditionalCounter(start=0):
    while True:
        should_increment = yield start
        if should_increment:
            start += 1
</code></pre>
<h3>Usage</h3>
<p>Since iteration with a for-loop does not allow to use <code>generator.send</code>, you have to use a  while-loop.</p>
<pre><code>import random

def some_calculation_on(value):
    return random.choice([True, False])

g = conditionalCounter()

last_value = next(g)

while last_value &lt; 5:
    last_value = g.send(some_calculation_on(last_value))
    print(last_value)
</code></pre>
<h3>Output</h3>
<pre><code>0
0
1
2
3
3
4
4
5
</code></pre>
<h2>Make it work in a for-loop</h2>
<p>You can make the above work in a for-loop by crafting a <code>YieldReceive</code> class.</p>
<pre><code>class YieldReceive:
    stop_iteration = object()

    def __init__(self, gen):
        self.gen = gen
        self.next = next(gen, self.stop_iteration)

    def __iter__(self):
        return self

    def __next__(self):
        if self.next is self.stop_iteration:
            raise StopIteration
        else:
            return self.next

    def send(self, value):
        try:
            self.next = self.gen.send(value)
        except StopIteration:
            self.next = self.stop_iteration
</code></pre>
<h3>Usage</h3>
<pre><code>it = YieldReceive(...)
for x in it:
    # Do stuff
    it.send(some_result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's <em>possible</em> but confusing. If you want to keep the <em>sequence</em> of <code>x</code> values and the calculations on <code>x</code> separate, you should do this explicitly by not involving <code>x</code> with an iterator.</p>
<pre><code>def next_value(x):
    """Custom iterator"""
    # Bunch of code defining a new x
    yield new_x


x = None
while True:
    x = next_value(x)
    x = some_calculation_on(x)
    # Break when you're done
    if finished and done:
        break
</code></pre>
<p>If you want the loop to execute exactly <code>i</code> times, then use a <code>for</code> loop:</p>
<pre><code>for step in range(i):
    x = next_value(x)
    x = some_calculation_on(x)
    # No break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def conditional_iterator(y):
    # stuff to create new values
    yield x if (expression involving y) else another_x

for x in conditional_iterator(y):
    y = some_computation(x)
</code></pre>
</div>
<span class="comment-copy">I'm not fully clear on what your question is, but I think the <code>yield</code> keyword might be helpful: <a href="https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do" title="what does the yield keyword do">stackoverflow.com/questions/231767/…</a></span>
<span class="comment-copy">Can you show more code to illustrate your problem?</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/32128412/python-yield-and-yield-assignment">Related</a></span>
<span class="comment-copy">@andrew, might be tricky to understand at first but I think this is a nice way to do what OP wants.</span>
