<div class="post-text" itemprop="text">
<p>how to do this list/dict comprehension 
turn this <code>[("a", 1), ("b", 2), ("a", 3)]</code></p>
<p>into  this</p>
<pre><code>{
  "a": [1, 3],
  "b": [2]
}
</code></pre>
<p>I know how to do it in a for loop, can I use just one line to do the work?</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple approach is to use a simple <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict()</code></a> of lists:</p>
<pre><code>from collections import defaultdict

lst = [("a", 1), ("b", 2), ("a", 3)]

items = defaultdict(list)
for k, v in lst:
    items[k].append(v)

print(items)
</code></pre>
<p>Which creates:</p>
<pre><code>defaultdict(&lt;class 'list'&gt;, {'a': [1, 3], 'b': [2]})
</code></pre>
<p><strong>Note:</strong> If you want the final result to be a normal dictionary, you can just wrap <code>dict()</code>. </p>
<p>If you really want a one liner, you could use <a href="https://docs.python.org/3.6/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a> in a dict comprehension:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; lst = [("a", 1), ("b", 2), ("a", 3)]
&gt;&gt;&gt; {k: list(map(itemgetter(1), g)) for k, g in groupby(sorted(lst, key=itemgetter(0)), key=itemgetter(0))}
{'a': [1, 3], 'b': [2]}
</code></pre>
<p>Which can also be written more cleanly as:</p>
<pre><code>{k: [x[1] for x in g] for k, g in groupby(sorted(lst, key=itemgetter(0)), key=itemgetter(0))}
</code></pre>
<p>The above solution has <code>O(NlogN)</code> complexity due to sorting, a requirement if you want to group similar items together. This is less efficient than  The first <code>defaultdict</code> solution, which is <code>O(N)</code>, since you only need to iterate the list once. The first solution would be more preferable, since its easier to read, efficient and maintainable. </p>
</div>
<div class="post-text" itemprop="text">
<p>Personally, I think using a loop is a simple option here, but for the sake of demonstration, you can define a custom class here that inherits from <strong><code>collections.MutableMapping</code></strong> to accomplish your goal.</p>
<pre><code>import collections

class AutoListDict(collections.MutableMapping):

  def __init__(self, values=()):            
      self.inner = collections.defaultdict(list)
      for k, v in values:
          self[k].append(v)

  def __setitem__(self, k, v): self.inner[k] = v
  def __getitem__(self, k):return self.inner[k]
  def __delitem__(self, k_): del self.inner[k]
  def __iter__(self): return iter(self.inner)
  def __len__(self): return len(self.inner)
  def __repr__(self): return str(dict(self.inner))
</code></pre>
<p>This initializes a <strong><code>defaultdict</code></strong> from your input values, so instead of overwriting a key it appends to it.  In action, you can simply call the class constructor on your array of tuples:</p>
<pre><code>&gt;&gt;&gt; arr = [('a', 1), ('b', 2), ('a', 3)]
&gt;&gt;&gt; AutoListDict(arr)
{'a': [1, 3], 'b': [2]}
</code></pre>
<p>Or if you want something more similar to a dictionary comprehension:</p>
<pre><code>&gt;&gt;&gt; dct = AutoListDict((k, v) for k, v in arr)
&gt;&gt;&gt; dct
{'a': [1, 3], 'b': [2]}
</code></pre>
</div>
<span class="comment-copy">There is nothing wrong with using a simple <code>defaultdict(list)</code> and a loop here.  It's fast, it's readable</span>
<span class="comment-copy">Do you believe that the single line will be easier to maintain than the for loop?</span>
