<div class="post-text" itemprop="text">
<p>For some reasons, in this example <code>consumer</code> seems to be blocked (because it's waiting for EOF?). But the writing end of the pipe should have been closed.</p>
<pre><code>import os, subprocess, threading
(r, w) = os.pipe()

def producer():
    print '--producer started'
    subprocess.Popen(['echo', '123'], stdout=w).wait()
    print '--producer finished'
    os.close(w)
    print '--write pipe closed'

def consumer():
    print '--receiver started'
    subprocess.Popen(['cat'], stdin=r).wait()
    print '--receiver finished'
    os.close(r)
    print '--read pipe closed'

threading.Thread(target=producer).start()
threading.Thread(target=consumer).start()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is that all processes inherit all open file descriptors, and that there will only be an EOF on the read end of the pipe when the write end has been closed in <strong>all</strong> processes. Because the <code>cat</code> process itself keeps the write end open calling <code>os.close(w)</code> in your main process is not enough.</p>
<p>For this case <a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer"><code>Popen()</code></a> has the <code>close_fds</code> argument, which when set to <code>True</code> will cause all open file descriptors except those used for stdin, stderr and stout to be closed immediately after creating the subprocess. If you do that the your example should work as expected.</p>
<p>On python2 <code>close_fds=False</code> is the default, in python3 this was changed to <code>close_fds=True</code>, and additionally since python3.4 file desciptors that should be inherited need to be <a href="https://docs.python.org/3/library/os.html#inheritance-of-file-descriptors" rel="nofollow noreferrer">marked as inheritable</a> explicitly using <code>os.set_inheritable()</code>. That reduces this kind of problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason your program never exits is that you're waiting on cat, except cat is waiting for an EOF that never comes.</p>
<p>when you call <code>subprocess.Popen(['cat'], stdin=r).wait()</code>, it reads from the file descriptor and prints it to stdout because you didn't redirect stdout.
This is why you still see '123' on the screen.</p>
<p>Consider either of these options instead:
Use a queue:</p>
<pre><code>import threading
from Queue import Queue
q= Queue()

def producer():
    print '--producer started'
    q.put('123')
    print '--producer finished'

def consumer():
    print '--receiver started'
    print q.get()
    print '--receiver finished'

threading.Thread(target=producer).start()
threading.Thread(target=consumer).start()
</code></pre>
<p>or use <code>os.pipe</code> but use <code>read</code> and <code>write</code> instead</p>
<pre><code>import os, subprocess, threading
(r, w) = os.pipe()

def producer():
    print '--producer started'
    os.write(w, '123')
    print '--producer finished'
    os.close(w)
    print '--write pipe closed'

def consumer():
    print '--receiver started'
    print os.read(r, 3)
    print '--receiver finished'
    os.close(r)
    print '--read pipe closed'

threading.Thread(target=producer).start()
threading.Thread(target=consumer).start()
</code></pre>
</div>
