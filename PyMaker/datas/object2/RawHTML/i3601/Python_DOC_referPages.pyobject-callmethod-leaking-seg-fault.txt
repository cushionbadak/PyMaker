<div class="post-text" itemprop="text">
<p>I call a Python method from C and it leak / seg fault on PyObject_CallMethod after 10 hours.</p>
<p>Can you review my code? Where is my error? Missing somethings?</p>
<p>The C code:</p>
<pre><code>PyObject *pFrameAsList = PyList_New(0);
...
for (int k=0; k&lt;m_nbImages; ++k)
{
   PyObject *pFrameAsArray = toNDArray(frame);
   ...
   PyList_Append(pFrameAsList, pFrameAsArray);
   Py_DECREF(pFrameAsArray);
}
PyObject *pValue = PyObject_CallMethod(pInstance, "analyseFrame", "(O)", pFrameAsList);
...
Py_INCREF(pValue);
...
for (int k=0 ; k&lt;max; k++ )
{
    PyObject *ptemp = PyList_GetItem(pValue,k);
}
Py_DECREF(pFrameAsList);
Py_DECREF(pValue);
</code></pre>
<p>And the Python code:</p>
<pre><code>def analyseFrame(self, frame):
   results = self.model.analyse(np.asarray(frame))
   return list(results)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe that the problem is that you shouldn't have the following line:</p>
<pre><code>Py_INCREF(pValue)
</code></pre>
<p>The reason is that <code>PyObject_CallMethod</code> has already incremented the reference count for you.  If you do the extra <code>Py_INCREF</code> call the reference count for the given <code>PyObject</code> will never go to 0.</p>
<p>According to the documentation, <a href="https://docs.python.org/3/c-api/object.html" rel="nofollow noreferrer"><code>PyObject_CallMethod</code> returns a new reference</a>.</p>
<p>To understand the meaning of <em>"new reference"</em>, as opposed to <em>"borrowed reference"</em> look at the first paragraph of the <a href="https://docs.python.org/3/c-api/intro.html#reference-count-details" rel="nofollow noreferrer">Reference Count Details</a> section of the documentation:</p>
</div>
<span class="comment-copy">You're missing <b>error checks everywhere</b>! They're not "optional" with C-API...</span>
<span class="comment-copy">I.e. you <b>must</b> check the return value of <code>PyList_New</code>, <code>toNDArray</code>, <code>PyList_Append</code>, <code>PyObject_CallMethod</code> and those <code>max</code> times of <code>PyList_GetItem</code>; in that case it might have been that your code didn't crash but would nicely exit with a MemoryError.</span>
<span class="comment-copy">You are all right, check the return value/code est the best practice and it's done in our code but I remove the checks here to reduce the code.</span>
<span class="comment-copy">how can we verify that these error checks are correct when you're not showing them!</span>
<span class="comment-copy">If I remove the <i>Py_INCREF(pValue)</i>, I seg fault directly. Thanks for the link, I will read it.</span>
<span class="comment-copy">I did a review according new / borrowed references according your comment and link. I remove the Py_INCREF on all method returning borrowed references. I'am testing...</span>
<span class="comment-copy">It doesn't seem correct to me, based on the documentation, that the caller would have to do a Py_INCREF on the return value from PyObject_CallMethod because that returned reference is considered "new", rather than "borrowed".   Perhaps you are passing pValue as an argument to some function that is "stealing" the reference?  The notion of "stealing" a reference is documented at that same reference-count-details link I posted in the answer.</span>
<span class="comment-copy">As suggested in <a href="https://stackoverflow.com/questions/510406/is-there-a-way-to-get-the-current-ref-count-of-an-object-in-python/510411" title="is there a way to get the current ref count of an object in python">stackoverflow.com/questions/510406/â€¦</a> you could also use sys.getrefcount(pValue) at various points in your code to see what the current reference count is at various places in your code.</span>
