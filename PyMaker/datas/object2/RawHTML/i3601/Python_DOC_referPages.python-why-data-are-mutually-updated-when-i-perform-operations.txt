<div class="post-text" itemprop="text">
<p>I am new to Python. I wanted to try some simple function operations on dataframe but I encountered the following problem. My code is:</p>
<pre><code>&gt;&gt;&gt; df.head(3)
   PercChange
0    0.000000
1   -7.400653
2    2.176843
&gt;&gt;&gt; def switch(array):
...     for i in range(len(array)):
...         if array[i]&lt;0:
...             array[i]=0
...     return array
... 
&gt;&gt;&gt; a=df.PercChange
&gt;&gt;&gt; a=switch(a)
&gt;&gt;&gt; df['PosPercChange']=a
&gt;&gt;&gt; df.head(3)
   PercChange  PosPercChange
0    0.000000       0.000000
1    0.000000       0.000000
2    2.176843       2.176843
</code></pre>
<p>Why did my 'PercChange' column change as well? I already created a new variable for the operations separately. How can I avoid not changing my 'PercChange' column? Thanks a lot.</p>
<p>[Solved]</p>
<p>So it is the problem of the data structure. In Python, '=' assignment doesn't copy value from one to another, but instead it name the same sequence with different name so changing one also changes the other. Thanks for the help.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you assign a value to a variable in Python, it doesn't copy the value; the variable just becomes a new name for the same value. </p>
<p>So, <code>a</code> and <code>df.PercChange</code> are just different names for the exact same <code>Series</code>. The same way a change to "Star Wars V" affects "The Empire Strikes Back" or a change to "Former President George W. Bush" affects "President Bush 42", a change to <code>a</code> affects <code>df.PercChange</code>.</p>
<p>And calling a function is just assignment again: the parameter inside the function becomes another name for the same value as the argument in the function call, so <code>array</code> is the same object as <code>a</code> and <code>df.PercChange</code>.</p>
<p>If you want to make <code>a</code> into a name for a <em>copy</em> of the <em>same data</em> as <code>df.PercChange</code>, instead of a name for the same object, you have to ask for that copy explicitly.</p>
<hr/>
<p>With Pandas, this is usually just the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.copy.html" rel="nofollow noreferrer"><code>copy</code></a> method:</p>
<pre><code>a = df.PercChange.copy()    
</code></pre>
<p>But Pandas (and the NumPy library that underlies it) allows for all kinds of complicated things, so there are other complicated ways to copy things.</p>
<hr/>
<p>More generally, Python has the <a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer"><code>copy</code></a> module, with <code>copy</code> and <code>deepcopy</code> functions that can make shallow or deep copies of almost anything, not just Pandas Series.</p>
<hr/>
<p>But you're also halfway to a different solution. Your <code>switch</code> function does a <code>return array</code> at the end, and your caller does <code>a = switch(a)</code>. </p>
<p>If <code>switch</code> returned a <em>different</em> object, <code>a</code> would now be a name for that different object. But, because it instead just returns its parameter, after modifying it in-place, all that <code>a = switch(a)</code> is doing is re-asserting <code>a</code> as a name for the same value it's already a name for.</p>
<p>So, another way to fix things is to do the copying inside <code>switch</code>:</p>
<pre><code>def switch(array):
    array = array.copy()
    for i in range(len(array)):
        if array[i]&lt;0:
            array[i]=0
    return array
</code></pre>
<p>â€¦ or to build up a whole new array or Series and return that:</p>
<pre><code>def switch(array):
    return array.apply(lambda: 0 if x&lt;0 else x)
</code></pre>
</div>
<span class="comment-copy">When you assign a value to a variable in Python, it doesn't copy the value; the variable just becomes a new name for the same value. So, <code>a</code> and <code>df.PercChange</code> are the exact same <code>Series</code>., and a change to one affects the other. If you want to make a copy, you have to say so explicitly. Pandas, Numpy, and other libraries have specific ways to do different kinds of copying, while the <code>copy</code> module in the stdlib has the general functions <code>copy.copy</code> and <code>copy.deepcopy</code>; you have to decide what exactly you want in each case.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/845110/emulating-pass-by-value-behaviour-in-python">Emulating pass-by-value behaviour in python</a></span>
<span class="comment-copy">You created a new <i>name</i> that is a pointer to the same object. So now you have two "variables" (names) referring to the same underlying object in memory. A change to one of them changes "both" variables, because they both point to the same <i>thing</i>.</span>
