<div class="post-text" itemprop="text">
<p>I have a class having list of floats x (and y, generated from x, so if x is equivalent, y is also equivalent). Once initialized, the instance does not change. I would like to make a set of the instances (to use <code>.add()</code>), so I tried to make the class hashable:</p>
<pre><code>class X:
    def __init__(self,x,y):
        self.x = x
        self.y = y
    def __hash__(self):
        return hash(tuple(self.x))
    def __eq__(self,other):
        return (
            self.__class__ == other.__class__ and
            self.x == other.x
            )
</code></pre>
<p>But because of the floating point inaccuracy, the set will recognize two very close instances as different. I would like to set the <code>__eq__</code> to be something like </p>
<pre><code>    def __eq__(self,other):
        diff = np.max(np.asarray(self.x)-np.asarray(other.x))
        if diff&lt;1e-6:
            return True
        else:
            return False
</code></pre>
<p>but this does not solve the floating point problem.
I could use a tuple <code>(x,y)</code> for this problem, but I do not need to compare <code>y</code>, and the real class I work on is a little more complicated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>math.isclose</code> from the <a href="https://docs.python.org/3/library/math.html" rel="nofollow noreferrer">math module</a> in the standard library to compare floats, and, perhaps, round (or truncate) the value used to produce the hash to the number of decimals used by default by <code>isclose</code>. (this last value could be parametrized) </p>
<pre><code>class X:
    def __init__(self,x,y):
        self.x = x
        self.y = y
    def __hash__(self):
        return hash(tuple(round(self.x, 9))  # round the value hashed to match the default of math.isclose

    def __eq__(self,other):
        return (
            self.__class__ == other.__class__ and
            math.isclose(self.x, other.x)
            )
</code></pre>
</div>
<span class="comment-copy">the inputs are not human generated so I don't think decimal module would be effective. For a more simple example, how does one deal with adding lists like [-185.49374999999998, -8.163433962088037] and [-185.49374999999998, -8.163433962088044] to a set?</span>
<span class="comment-copy">Distinguishing numbers based on them being close together is problematic, because it is not transitive. Suppose you try and put three numbers in a set, and each is <i>close to</i> the previous, but the last is not close to the first. What is the expected behaviour?</span>
<span class="comment-copy">If all are within the tolerance level, I expect all to be considered the "same". Certainly, as Rebelchon commented, the tolerance level must be user specified. And looking at the data, it looks like 1e-9 is a bit too strict.</span>
<span class="comment-copy">No, what I was asking was, what if A and B are within tolerance of each other, and B and C are within tolerance of each other, and A and C are <i>not</i> within tolerance of each other. What is the expected behaviour of your set?</span>
<span class="comment-copy">That is a good point. I could assume that the input is separated enough that it rarely happens; the problem being the numerical instability. Or just accept the result arising from the random order - it will only have a minor effect on the quality and performance.</span>
<span class="comment-copy">But then your hash is not consistent with equality. Two instances that claim to be equal could have different hashes.</span>
<span class="comment-copy">Good point: perhaps truncate the values used in the hash to match the absolute tolerance of 10^-9 default of <code>isclose</code>?</span>
<span class="comment-copy">I can imagine truncation working as long as the hash and equals are written  <i>consistently</i> . Using <code>math.isclose</code> for equality is not even transitive.</span>
<span class="comment-copy">Yes, once you start comparing floats for equality, the chain of compromises to make gets longer. The OP must decide what is suitable for his use cases.</span>
