<div class="post-text" itemprop="text">
<p>is there a way to insert a specific value into a List into a specific index. List should be completly empty</p>
<pre><code>L = []
L.insert(2,177)
print(L)
</code></pre>
<p>L should give out the values of L [ , ,2]</p>
</div>
<div class="post-text" itemprop="text">
<p>That is not possible. Lists cannot have "holes"; every slot in the list must contain a value.</p>
<p>You have two options:</p>
<ol>
<li><p>Fill the list with dummy values:</p>
<pre><code>L = [None] * 3
L[2] = 177
# L: [None, None, 177]
</code></pre></li>
<li><p>Use a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dict</a> rather than a list:</p>
<pre><code>L = {}
L[2] = 177
# L: {2: 177}
</code></pre>
<p>A dict is a mapping between arbitrary values, so it can handle "holes" with no problem.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>iterables in Python must have objects inside. You can fill the list with <code>None</code> up to the place you want your actual value </p>
<pre><code>l = [None for _ in range(200)]
l[2] = 2
l[177] = 177
</code></pre>
<blockquote>
<p>None</p>
<p>The sole value of <code>types.NoneType. None</code> is frequently used to represent the absence of a value, as when default arguments are not passed to a function.</p>
</blockquote>
</div>
<span class="comment-copy">Lists can't have holes. You have to put <i>something</i> into the first two slots.</span>
<span class="comment-copy">Why would you want to do this? Maybe a dictionary with the desired position as the index is more appropriate for your problem.</span>
<span class="comment-copy">Maybe : <code>L.append((2,177))</code> :D</span>
<span class="comment-copy">This provides a solution fitting the OPs requirement using a list, but also provides a better solution using a dictionary instead. +1.</span>
<span class="comment-copy">My opinion: The Python user does not store values of <code>None</code>. @Mr. T comment are good.</span>
<span class="comment-copy">It is indeed a good idea, but it gives a dict</span>
