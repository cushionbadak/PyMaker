<div class="post-text" itemprop="text">
<p>How does input() work as a parameter to range() in Python? </p>
<p>For example:</p>
<p>Say the user inputs multiple numbers 10 and 2 or more literally type "10 2" </p>
<pre><code>for i in range(int(input())):
   try:
       a,b=map(int,input().split())
       print(a//b)
   except Exception as e:
       print("Error Code:",e)
</code></pre>
<p>What range does the for loop use then? Is it (0,10), (0,2) or something else? Or, said differently, which number does the range use for the upper limit if the user inputs multiple numbers? More generally, I am trying to understand the purpose of the for loop here and why the code can't just be:</p>
<pre><code>try:
    a,b=map(int,input().split())
    print(a//b)
except Exception as e:
    print("Error Code:",e)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This pattern is used when you want to read <code>n</code> lines from the input, for example the input is:</p>
<pre><code>3
1 2
3 4 
5 6
</code></pre>
<p>The first input will determine how many times the <code>for</code> loop needs to be run to read all the lines.</p>
<p>For a single line of input like "10 2" you don't need to use a loop.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>input()</code> values will be stored as <code>str</code>. </p>
<p>It all comes down to what the user inputs. The piece of code you provided is very bad, because the user has to guess <em>what</em> to input and <em>when</em>. But the logic works as follows:</p>
<p>If you type in a single value, then <code>int(input())</code> will convert that value to integer. For example, if you input <code>2</code>, then <code>input()</code> will hold the string <code>"2"</code> and <code>int("2")</code> will yield integer <code>2</code>.</p>
<p>If you have multiple values, then you cannot convert to <code>int</code> right away, because what the hell does <code>int("2 10")</code> mean? That is why you have to use <code>.split()</code>, to separate these multiple values in many singular values. For example, if you run <code>x = input()</code> and type in <code>2 10</code>, then <code>x</code> will hold the string <code>"2 10"</code>. Now, <code>"2 10".split()</code> yields the <em>list of strings</em> <code>["2", "10"]</code>. </p>
<p>The piece of code <code>map(int,input().split())</code> comes in to convert this list of strings to a list of integers. It <em>maps</em> each value to a new value using the function <code>int</code> to transform it.</p>
<hr/>
<p>Now that this is established, it becomes easier to understand how this works in a <code>for</code> loop using <code>range</code>. </p>
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow noreferrer"><code>range</code></a> type, as per docs, may have one parameter <em>stop</em> or three arguments (start, stop [, step]) in its constructor. These arguments are all integers.</p>
<p>Thus, the values from <code>input()</code> have to fit this structure. If you type in <code>2 10</code> in input, and try to do <code>range("2 10")</code>, you'll receive an error. Because you are passing <em>one</em> argument of type <code>str</code>. That is why you have to convert to <code>integer</code> first. But you cannot convert <code>"2 10"</code> to integer right away, as we just discussed. That is why you have to <code>split</code> first, and then convert <em>each</em> value to <code>int</code>, and just then pass these as arguments to <code>range()</code>.</p>
<p>So, to summarize, given <code>x = input()</code> and you type in <code>2 10</code>, here is what <strong>does not</strong> work:</p>
<pre><code>&gt;&gt;&gt; int(x)
&gt;&gt;&gt; range(x)
</code></pre>
<p>what <strong>does</strong> work:</p>
<pre><code>&gt;&gt;&gt; a,b=map(int,input().split())
&gt;&gt;&gt; range(a, b)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ul>
<li>The first <code>input()</code> will determine the stop condition of the for loop</li>
<li>Which means the first <code>input()</code> determines the number of time your for loop will be executed</li>
<li>Other input() will assign the values to <code>a</code> and <code>b</code> as string </li>
<li><p>The above is equivalent to:  </p>
<pre><code>stop = input()
stop = int(stop)
for i in range(stop):
   try:
       a,b=map(int,input().split())
       print(a//b)
   except Exception as e:
       print("Error Code:",e)
</code></pre></li>
<li><p>But if the first <code>input()</code> is given as <code>"10 10"</code> then the code will throw you an error something like the string can not be converted to int</p></li>
<li>The <code>a,b=map(int,input().split())</code> means you are expecting an input of two numbers separated by spaces and these inputs will be given exactly <code>stop</code> number of times</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>To begin with, a good thing to know is that, in python, functions are evaluated "from the inside out". That means that if your code is  <code>function1(function2(0))</code> then python will first try to  compute <code>function2(0)</code> and then give the result to <code>function1</code>. 
In your case it means python will evaluate first <code>input</code> then <code>int</code> using what came out of <code>input</code> then <code>range</code> with what came out of <code>int</code>.</p>
<p>So <code>input</code> doesn't behave any different than usual in that range function. Whatever the user types will be passed as a string to the <code>int</code> function. That means that if the user types "10 2" <code>int</code> will raise a <code>value error</code> as "10 2" can't be converted to an integer and the code will stop there.</p>
<p>The only way for the code to proceed is for the user to type something that can be converted to an int and then range will work as you expect.</p>
</div>
