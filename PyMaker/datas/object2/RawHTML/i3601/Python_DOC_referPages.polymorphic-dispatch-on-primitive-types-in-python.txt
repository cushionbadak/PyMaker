<div class="post-text" itemprop="text">
<p>In perl I usually implement polymorphic input like so: </p>
<pre><code>sub inputanything {
   return undef unless (length($_[0])) ;
   return(&amp;handlehash(@_)) if (ref($_[0]) eq 'HASH');
   return(&amp;handlearray(@_)) if (ref($_[0]) eq 'ARRAY');
   return(&amp;handlescalar(@_)) if (ref($_[0]) eq 'SCALAR');
   return(&amp;handleobject(@_)) if (ref($_[0]) eq 'Foo') ;
   return undef ; 
} 
</code></pre>
<p>Which says approximately: "The passed value must have length regardless of type, run the respective type handler based on the detected type, return nothing if we are passed nothing or if we are passed a type we don't recognize."   </p>
<p>I'm trying to do something similar a in python object that can recieve None, string, integer, float, and decimal types. Is there a python method for universally detecting the existence of <strong>any</strong> data in a value with unknown type? If not, is there a cononical way of dispatching based on primitive types  in python, and can you refer me to an example?</p>
<p>python 3.5.3
Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>It's even simpler in python.</p>
<blockquote>
<p>"The passed value must have length regardless of type, run the respective type handler based on the detected type, return nothing if we are passed nothing or if we are passed a type we don't recognize."</p>
</blockquote>
<p>If I understood correctly you want to recognize "regardless of type": empty strings, arrays, hashmaps, everything. </p>
<p>You already can do:</p>
<pre><code>if your_variable:
    .. code for non-empty data
</code></pre>
<p>It will work for almost all builtin- and library-defined- types.</p>
<p><strong>How does it works and how you can extend it for your types?</strong></p>
<p>Read <a href="https://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="nofollow noreferrer">https://docs.python.org/3/reference/datamodel.html#object.<strong>bool</strong></a></p>
<p>Yes. It's that simple. </p>
<p>Just define __bool__ method for your type.</p>
<p>( Rejoice! Python is correct choice after perl! I know it myself ) </p>
</div>
<span class="comment-copy">There is the <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer"><code>functools.singledispatch</code></a> decorator, that allows you define a single-dispatch generic function.</span>
<span class="comment-copy">Consider whether you really should define a single function that needs to differentiate its arguments by type in the first place. <code>None</code> is usually checked for explicitly, as it signals an implementation-defined default (e.g. <code>if x is None: x = MY_DEFAULT</code>). The rest of your function sounds like it just needs a <i>number</i>, or a string that can be parsed as a number, in which case it's cleaner to make the <i>caller</i> convert the string to a number first and pass the result to your function....</span>
<span class="comment-copy">...Does your function do <i>wildly</i> different things depending on whether it gets an <code>int</code>, <code>float</code>, or <code>Decimal</code>? If so, it should probably be multiple functions instead.</span>
<span class="comment-copy">I say that most of what OP asking in question is already baked in python.</span>
<span class="comment-copy">I want to recognize non-empty values of any type, then run functions to process the specific type that has been provided.</span>
<span class="comment-copy">You will get non-empty checks for free for almost everything except direct descendants from <code>object</code> and such. In case if length is enough - you can test <code>\__len__</code> of your types. Read <code>Data Model</code>.</span>
<span class="comment-copy">@Ingaz The OP is asking about detecting the type of an arbitrary argument, and branching on the result. There's no one type where <code>__bool__</code> would be defined. The empty/non-empty distinction was just the first pass: return undef it value is "empty" for its given type, but do something type-specific for all non-empty values.</span>
<span class="comment-copy">Your right.  if &lt;value&gt;:  is all that is needed to prune empty data and None types. Then isinstance() after that can be used to handle the remainder of the dispatch. Thanks so much!</span>
<span class="comment-copy">@chepner Forget for a moment about "single-dispatch" and look carefully what OP says: "The passed value must have <b>length</b> regardless of type ..." In fact, python "Data Model" provides already baked in single-dispatch for "magic"-methods. Recipes such as <code>functools.singledispatch</code> needed for general cases.</span>
