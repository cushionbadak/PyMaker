<div class="post-text" itemprop="text">
<p>From some of the answers on Stackoverflow, I came to know that from -5 to 256 same memory location is referenced thus we get true for:</p>
<pre><code>&gt;&gt;&gt; a = 256
&gt;&gt;&gt; a is 256
True
</code></pre>
<p>Now comes the twist (see this line before marking duplicate):</p>
<pre><code>&gt;&gt;&gt; a = 257
&gt;&gt;&gt; a is 257 
False 
</code></pre>
<p>This is completely understood, but now if I do:</p>
<pre><code>&gt;&gt;&gt; a = 257; a is 257
True
&gt;&gt;&gt; a = 12345; a is 12345
True
</code></pre>
<p>Why?</p>
</div>
<div class="post-text" itemprop="text">
<p>What you're seeing is an optimization in the compiler in CPython (which compiles your source code into the bytecode that the interpreter runs). Whenever the same immutable constant value is used in several different places within the a chunk of code that is being compiled in one step, the compiler will try to use a reference to same object for each place.</p>
<p>So if you do multiple assignments on the same line in an interactive session, you'll get two references to the same object, but you won't if you use two separate lines:</p>
<pre><code>&gt;&gt;&gt; x = 257; y = 257  # multiple statements on the same line are compiled in one step
&gt;&gt;&gt; print(x is y)     # prints True
&gt;&gt;&gt; x = 257
&gt;&gt;&gt; y = 257
&gt;&gt;&gt; print(x is y)     # prints False this time, since the assignments were compiled separately
</code></pre>
<p>Another place this optimization comes up is in the body of a function. The whole function body will be compiled together, so any constants used anywhere in the function can be combined, even if they're on separate lines:</p>
<pre><code>def foo():
    x = 257
    y = 257
    return x is y  # this will always return True
</code></pre>
<p>While it's interesting to investigate optimizations like this one, you should never rely upon this behavior in your normal code. Different Python interpreters, and even different versions of CPython may do these optimizations differently or not at all. If your code depends on a specific optimization, it may be completely broken for somebody else who tries to run it on their own system.</p>
<p>As an example, the two assignments on the same line I show in my first code block above doesn't result in two references to the same object when I do it in the interactive shell inside Spyder (my preferred IDE). I have no idea why that specific situation doesn't work the same way it does in a conventional interactive shell, but the different behavior is my fault, since my code relies upon implementation-specific behavior.</p>
</div>
<div class="post-text" itemprop="text">
<p>From python2 docs:</p>
<blockquote>
<p>The operators is and is not test for object identity: x is y is true
  if and only if x and y are the same object. x is not y yields the
  inverse truth value. [6]</p>
</blockquote>
<p>From python3 docs:</p>
<blockquote>
<p>The operators is and is not test for object identity: x is y is true
  if and only if x and y are the same object. Object identity is
  determined using the id() function. x is not y yields the inverse
  truth value. [4]</p>
</blockquote>
<p>So basically the key to understand those tests you've run on the repl console is by using
accordingly the <code>id()</code> function, here's an example that will show you what's going on behind the curtains:</p>
<pre><code>&gt;&gt;&gt; a=256
&gt;&gt;&gt; id(a);id(256);a is 256
2012996640
2012996640
True
&gt;&gt;&gt; a=257
&gt;&gt;&gt; id(a);id(257);a is 257
36163472
36162032
False
&gt;&gt;&gt; a=257;id(a);id(257);a is 257
36162496
36162496
True
&gt;&gt;&gt; a=12345;id(a);id(12345);a is 12345
36162240
36162240
True
</code></pre>
<p>That said, usually a good way to understand what's going on behind the curtains with these type of snippets is by using either <a href="https://docs.python.org/3/library/dis.html#dis.dis" rel="nofollow noreferrer">dis.dis</a> or <a href="https://docs.python.org/3/library/dis.html#dis.dis" rel="nofollow noreferrer">dis.disco</a>, let's take a look for instance what this snippet would look like:</p>
<pre><code>import dis
import textwrap

dis.disco(compile(textwrap.dedent("""\
    a=256
    a is 256
    a=257
    a is 257
    a=257;a is 257
    a=12345;a is 12345\
"""), '', 'exec'))
</code></pre>
<p>the output would be:</p>
<pre><code>  1           0 LOAD_CONST               0 (256)
              2 STORE_NAME               0 (a)

  2           4 LOAD_NAME                0 (a)
              6 LOAD_CONST               0 (256)
              8 COMPARE_OP               8 (is)
             10 POP_TOP

  3          12 LOAD_CONST               1 (257)
             14 STORE_NAME               0 (a)

  4          16 LOAD_NAME                0 (a)
             18 LOAD_CONST               1 (257)
             20 COMPARE_OP               8 (is)
             22 POP_TOP

  5          24 LOAD_CONST               1 (257)
             26 STORE_NAME               0 (a)
             28 LOAD_NAME                0 (a)
             30 LOAD_CONST               1 (257)
             32 COMPARE_OP               8 (is)
             34 POP_TOP

  6          36 LOAD_CONST               2 (12345)
             38 STORE_NAME               0 (a)
             40 LOAD_NAME                0 (a)
             42 LOAD_CONST               2 (12345)
             44 COMPARE_OP               8 (is)
             46 POP_TOP
             48 LOAD_CONST               3 (None)
             50 RETURN_VALUE
</code></pre>
<p>As we can see in this case the asm output doesn't tell us very much, we can see than lines 3-4 are basically the "same" instructions than line 5. So my recommendation would be once again to use <code>id()</code> smartly so you'll know what's <code>is</code> will compare. In case you want to know exactly the type of optimizations cpython is doing I'm afraid you'd need to dig out in its <a href="https://github.com/python/cpython" rel="nofollow noreferrer">source code</a></p>
</div>
<div class="post-text" itemprop="text">
<p>After discussion and testing in various versions, the final conclusions can be drawn.</p>
<p>Python will interpret and compile instructions in blocks. Depending on the syntax used, Python version, Operating System, distribution, different results may be achieved depending on what instructions Python takes in one block.</p>
<p>The general rules are:</p>
<p>(from <a href="https://docs.python.org/2/c-api/int.html" rel="nofollow noreferrer">official documentation</a>)</p>
<blockquote>
<p>The current implementation keeps an array of integer objects for all
  integers between -5 and 256</p>
</blockquote>
<p>Therefore:</p>
<pre><code>a = 256
id(a)
Out[2]: 1997190544
id(256)
Out[3]: 1997190544 # int actually stored once within Python

a = 257
id(a)
Out[5]: 2365489141456
id(257)
Out[6]: 2365489140880 #literal, temporary. as you see the ids differ
id(257)
Out[7]: 2365489142192 # literal, temporary. as you see it gets a new id everytime
                      # since it is not pre-stored
</code></pre>
<p>The part below returns False in <strong>Python 3.6.3 |Anaconda custom (64-bit)| (default, Oct 17 2017, 23:26:12) [MSC v.1900 64 bit (AMD64)]</strong></p>
<pre><code>a = 257; a is 257
Out[8]: False
</code></pre>
<p>But</p>
<pre><code>a=257; print(a is 257) ; a=258; print(a is 257)
&gt;&gt;&gt;True
&gt;&gt;&gt;False
</code></pre>
<p>As it is evident, whatever Python takes in "one block" is non deterministic and can be swayed depending on how it is written, single line or not, as well as the version, operating system and distribution used.</p>
</div>
<div class="post-text" itemprop="text">
<p>Generally speaking, numbers outside the range -5 to 256 will not necessarily have the optimization applied to numbers within that range. However, Python is free to apply other optimizations as appropriate. In your cause, you're seeing that the same literal value used multiple times on one line is stored in a single memory location no matter how many times it's used on that line. Here are some other examples of this behavior:</p>
<pre><code>&gt;&gt;&gt; s = 'a'; s is 'a'
True
&gt;&gt;&gt; s = 'asdfghjklzxcvbnmsdhasjkdhskdja'; s is 'asdfghjklzxcvbnmsdhasjkdhskdja'
True
&gt;&gt;&gt; x = 3.14159; x is 3.14159
True
&gt;&gt;&gt; t = 'a' + 'b'; t is 'a' + 'b'
True
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">I bet because the interpreter can "see" and analyze <i>both</i> statements at the same time, Python is able to do some optimizations to eliminate the variables altogether and do stuff like <code>12345 is 12345</code>.</span>
<span class="comment-copy">...or not: <code>import dis; dis.disco(compile('a=P;a is P', '', 'exec'))</code> returns similar assembly for both 256 and 12345...</span>
<span class="comment-copy">Not "interpreter", but rather "compiler".</span>
<span class="comment-copy">This question is epic. we have hit really good conclusions. Thanks for asking it!</span>
<span class="comment-copy">I am new to Stackoverflow and I am really thankful to this community.</span>
<span class="comment-copy">The question is, <i>why</i> do the IDs behave like this? Why executing the two statements separately gives different IDs, but executing them as the same line produces equal IDs?</span>
<span class="comment-copy">Something you might want to look into: <code>a = 257; a is 257</code> in 3.6.4 returns True when I run it on Windows, but False when run in a Jupyter notebook</span>
<span class="comment-copy">@bphi That's interesting and I guess the generated asm in a Jupyter notebook will be the same than posted on my answer, right?</span>
<span class="comment-copy">@bphi yes exactly...</span>
<span class="comment-copy">@BPL dis.disco gives the same output, but 3rd and 4th examples return False instead of True</span>
<span class="comment-copy">I get True for <code>a = x; a is x</code> for any x on 3.6, any idea what the difference is between that and splitting it on two lines?</span>
<span class="comment-copy">Can't confirm your last result with Python 3.6.1</span>
<span class="comment-copy">I am using Python 3.6.3 and seriously, can you install the latest version and verify please? We might have come across a difference in implementation</span>
<span class="comment-copy">Thanks. It means that in the newest version, Python adopts a by-line buffering to avoid redeclaring identical symbols and make duplicates in memory</span>
<span class="comment-copy">It's not actually line by line. It's whatever gets compiled in one go. A function's body, for instance, will be usually be compiled all in one step, so <code>def foo():x=1000;y=1000;return x is y</code> (with newlines and appropriate indentation) will use the same constant integer object for both <code>x</code> and <code>y</code>, and so return <code>True</code>.</span>
