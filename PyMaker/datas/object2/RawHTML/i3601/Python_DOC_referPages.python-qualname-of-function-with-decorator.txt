<div class="post-text" itemprop="text">
<p>I'm using a Decorator (class) in an Instance method of another class, like this:</p>
<pre><code>class decorator_with_arguments(object):

    def __init__(self, arg1=0, arg2=0, arg3=0):
        self.arg1 = arg1
        self.arg2 = arg2
        self.arg3 = arg3

    def __call__(self, f):
        print("Inside __call__()")
        def wrapped_f(*args):
            print(f.__qualname__)
            f(*args)
        return wrapped_f

class Lol:
    @decorator_with_arguments("hello")
    def sayHello(self,a1, a2, a3, a4):
        print(self.sayHello.__qualname__)
</code></pre>
<p>Now, when I print out <code>self.sayHello.__qualname__</code> it prints <code>decorator_with_arguments.__call__.&lt;locals&gt;.wrapped_f</code></p>
<p>Is there any way to override this? I want to see <code>Lol.sayHello</code> (<strong>qualname</strong> of my original function) in here.</p>
<p>I tried overriding the <code>@property</code> <code>__qualname__</code> of <code>__call__</code> (with a static string); didn't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply copy the <code>__qualname__</code> attribute across to your <em><code>wrapped_f</code> wrapper function</em>; it is this function that is returned when the decorator is applied, after all.</p>
<p>You could use the <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer"><code>@functools.wraps()</code> decorator</a> to do this for you, together with other attributes of note:</p>
<pre><code>from functools import wraps

class decorator_with_arguments(object): 
    def __init__(self, arg1=0, arg2=0, arg3=0):
        self.arg1 = arg1
        self.arg2 = arg2
        self.arg3 = arg3

    def __call__(self, f):
        print("Inside __call__()")
        @wraps(f)
        def wrapped_f(*args):
            print(f.__qualname__)
            f(*args)
        return wrapped_f
</code></pre>
<p>The <code>@wraps(f)</code> decorator there copies the relevant attributes from <code>f</code> onto <code>wrapped_f</code>, including <code>__qualname__</code>:</p>
<pre><code>&gt;&gt;&gt; Lol.sayHello.__qualname__
'Lol.sayHello'
</code></pre>
</div>
