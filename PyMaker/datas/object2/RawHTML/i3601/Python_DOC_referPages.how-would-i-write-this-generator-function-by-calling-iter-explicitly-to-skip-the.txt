<div class="post-text" itemprop="text">
<p><strong>So I am trying to write this generator function and this is how I am trying to write it but it is not working and i'm not too sure how to call 'iter' explicitly. Any help would be appreciated!</strong></p>
<p>Write a generator named skip_until that takes as arguments a predicate and any iterable; it skips
producing the initial values produced by the iterable for which the predicate returns False, and then
produces the first value for which the predicate evaluates to True and produces all others after that one
whether or not they satisfy the predicate. For example, iterating over:</p>
<pre><code>skip_until(lambda x: len(x) &gt; 1, ['x', 'y', 'abc', 'a', 'xyz']) 
</code></pre>
<p>would skip producing 'x' and 'y' (because their lengths are not &gt; 1) but
then produces the values 'abc', 'a', and then 'xyz' (because 'abc' is the first value whose length is &gt; 1,
so it and all subsequent values are produced. Call iter explicitly.
'''</p>
<pre><code>def skip_until(p,iterable)
    for i in range(iterable):
      if p(i) == True:
        for x in range(i,len(iterable)):
           print(x)
      else: 
        pass
</code></pre>
<p>How can i call iter explicitly to get the proper results?</p>
</div>
<div class="post-text" itemprop="text">
<p>First, no reason to re-invent the wheel.  Look at <a href="https://docs.python.org/3/library/itertools.html#itertools.dropwhile" rel="nofollow noreferrer"><code>itertools.dropwhile</code></a>, and just invert your predicate.</p>
<p>Second, if you're going to deal with iterators, then you can't assume that they're sliceable, or that you can get their lengths.  Basically the only things you can do to get values are <code>for</code> loops, <code>next</code>, and <code>yield from</code>.</p>
<p>Also, and I don't want to sound condescending here, all you have to do to call <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter</code></a> explicitly is <code>iter(iterable)</code>.  That returns an <a href="https://docs.python.org/3/glossary.html#term-iterator" rel="nofollow noreferrer">iterator</a> over your <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow noreferrer">iterable</a>.</p>
<pre><code>def skip_until(p,iterable):
    try:
        it = iter(iterable)
        curr = next(it)
        while not p(curr):
          curr = next(it)
        yield curr
        yield from it
    except StopIteration:
        return 

print(list(skip_until(lambda x: len(x) &gt; 1, ['x', 'y', 'abc', 'a', 'xyz'])))
# ['abc', 'a', 'xyz']
</code></pre>
</div>
<span class="comment-copy"><code>skip_until</code> is not a generator. It does not <code>yield</code> anything. It does not even <code>return</code> anything. Hint: get rid of <code>print</code>. Also, <code>range(iterable)</code> is illegal, and even if it were legal, you would apply the predicate to the index, not to the item.</span>
<span class="comment-copy">def skip_until(p,iterable)     for i in range(iterable):       if p(i) == True:         for x in range([i:iterable]):            yield(x)       else:          pass</span>
<span class="comment-copy">would that work?? :o</span>
<span class="comment-copy">Why do you ask if you can try?</span>
<span class="comment-copy"><code>def skip_until(p, iterable): 	for i, j in enumerate(iterable): 		if p(j): 			return iterable[i:]</code></span>
<span class="comment-copy">what does "yield from it" do? what is it</span>
<span class="comment-copy">@generation_coding <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380-syntax-for-delegating-to-a-subgenerator" rel="nofollow noreferrer">It's syntax introduced in Python 3.3 for delegating to subgenerators</a>.  Here, it's basically the same as <code>for x in it: yield x</code></span>
