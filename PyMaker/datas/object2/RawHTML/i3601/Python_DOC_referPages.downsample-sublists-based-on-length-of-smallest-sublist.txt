<div class="post-text" itemprop="text">
<p>I have a list of lists like the following, and the number and length of sublists can be variable:</p>
<pre><code>test = [[1, 5, 4, 3, 5, 2], [4, 2], [5, 2, 4, 3, 5], [5, 3, 1]]
</code></pre>
<p>I want to downsample all sublists to the length of the shortest sublist - this case 2. That means I want to randomly select 2 elements from all sublists as an output.</p>
<p>For a much larger list of around 100 sublists, each greater than 100000 items, what would the most efficient way be?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using a <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">generator expression</a> and <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> with <a href="https://docs.python.org/3.5/library/random.html#random.sample" rel="nofollow noreferrer"><code>random.sample()</code></a> like:</p>
<h3>Code:</h3>
<pre><code>min_len = min(len(x) for x in data)
[random.sample(x, min_len) for x in data]
</code></pre>
<h3>Test Code:</h3>
<pre><code>import random

data = [[1, 5, 4, 3, 5, 2], [4, 2], [5, 2, 4, 3, 5], [5, 3, 1]]
min_len = min(len(x) for x in data)
print([random.sample(x, min_len) for x in data])
</code></pre>
<h3>Results:</h3>
<pre><code>[[5, 4], [4, 2], [4, 5], [5, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using only the standard library:</p>
<pre><code>import random

test = [[1, 5, 4, 3, 5, 2], [4, 2], [5, 2, 4, 3, 5], [5, 3, 1]]

min_size = float("inf")

for sublist in test:
    length = len(sublist)
    if length &lt; min_size:
        min_size = length

new_list = [random.sample(sublist, min_size) for sublist in test]

# [[5, 4], [2, 4], [5, 3], [1, 5]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another Way to do it:</p>
<pre><code>import random
test = [[1, 5, 4, 3, 5, 2], [4, 2], [5, 2, 4, 3, 5], [5, 3, 1]]
minlen = min(list(map(lambda x: len(x),test)))
print([random.sample(i,minlen) for i in test])
</code></pre>
<p>Output:</p>
<pre><code>[[3, 5], [4, 2], [5, 3], [1, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Short and sweet one-liner using list comprehension:</p>
<pre><code>from random import sample

[sample(l, len(min(test, key=len))) for l in test]
</code></pre>
</div>
<span class="comment-copy">what is a lesser efficient way?</span>
<span class="comment-copy">Does it need to be random? How "random"?</span>
<span class="comment-copy">If by "downsample" you mean "truncate long lists to the length of the shortest", then look at <a href="https://docs.python.org/3.6/library/functions.html#zip" rel="nofollow noreferrer">docs.python.org/3.6/library/functions.html#zip</a>.  If randonmess is desired, then you'll have to devise a more clever approach.</span>
