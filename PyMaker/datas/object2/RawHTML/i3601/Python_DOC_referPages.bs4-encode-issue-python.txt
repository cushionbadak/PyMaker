<div class="post-text" itemprop="text">
<p>I'm trying to work with the website of Central Bank of Brazil. </p>
<p>My thing is getting the data from the notification section when is it related to the "swap" (central bank selling US$ in the local market to control the depreciation of the national money).</p>
<p>I've been having a lot of trouble dealing with the API and encoding. 
This is the part of the site where we can find all the reports: <a href="http://www.bcb.gov.br/pre/normativos/busca/buscaNormativo.asp?tema=&amp;startRow=0&amp;refinadorTipo=&amp;refinadorRevogado=&amp;tipo=P&amp;tipoDocumento=0&amp;numero=&amp;conteudo=&amp;dataInicioBusca=13%2F6%2F2018&amp;dataFimBusca=16%2F6%2F2018" rel="nofollow noreferrer">http://www.bcb.gov.br/pre/normativos/busca/buscaNormativo.asp?tema=&amp;startRow=0&amp;refinadorTipo=&amp;refinadorRevogado=&amp;tipo=P&amp;tipoDocumento=0&amp;numero=&amp;conteudo=&amp;dataInicioBusca=13%2F6%2F2018&amp;dataFimBusca=16%2F6%2F2018</a></p>
<p>When I try to get the html from the main page I got this: </p>
<blockquote>
<p>Divulga as condi\u00e7\u00f5es de oferta p\u00fablica para a realiza\u00e7\u00e3o de opera\u00e7\u00f5es de swap </p>
</blockquote>
<p>but it should be:</p>
<blockquote>
<p>Divulga as condições de oferta pública para a realização de operações de swap.</p>
</blockquote>
<p>I've tried this fallowing code:</p>
<pre><code>import requests 
from bs4 import BeautifulSoup as bs
url = 'http://www.bcb.gov.br/pre/normativos/busca/buscaSharePoint.asp?conteudo=swap&amp;startRow=0'

data = requests.get(url)
bsObj = bs(data.content, 'lxml')
bsObj.find("div") #returned the example, with the wrong encode
</code></pre>
<h1>#</h1>
<pre><code>bsObj = bs(data.content, 'lxml', from_encoding='latin-1')
bsObj.find("div") #the same

bsObj = bs(data.content, 'lxml', from_encoding='utf-8')
bsObj.find("div") #the same
</code></pre>
<p>Does anyone understand what is going on?</p>
</div>
<div class="post-text" itemprop="text">
<p>The character <code>ç</code> is U+00e7, and <code>õ</code> is U+00F5, and so on. These are just two different representations of the same string. So, while I'm just taking a guess at your problem given incomplete information, I think it's an educated guess…</p>
<p>If you <code>print</code> the string, you will see the human-readable version, with <code>condições</code> and so on (unless your Python and console aren't configured to talk to each other properly—but if you're using Python 3.6 or later and a reasonable modern version of Linux, macOS, or Windows, this is unlikely to be a problem).</p>
<p>But if you just evaluate the string at the interactive interpreter, you get the programmer-friendly representation, rather than the human-friendly one.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; s = 'Divulga as condições de oferta pública para a realização de operações de swap.'
&gt;&gt;&gt; print(s)
Divulga as condições de oferta pública para a realização de operações de swap.
&gt;&gt;&gt; s
'Divulga as condi\u00e7\u00f5es de oferta p\u00fablica para a realiza\u00e7\u00e3o de opera\u00e7\u00f5es de swap'
</code></pre>
<p>The latter is nice because you can copy and paste it into your source code as a string literal, and because it'll work even on a badly-configured terminal, but it's not so nice for reading.</p>
<p>The technical difference is that <code>print</code> calls <a href="https://docs.python.org/3/library/functions.html#func-str" rel="nofollow noreferrer"><code>str</code></a>, while evaluating a string at the interactive interpreter without <code>print</code> calls <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer"><code>repr</code></a>.</p>
<hr/>
<p>Meanwhile: most websites specify their encoding (in at least one of three different ways…), in which case <code>requests</code> can automatically decode things correctly if you use <code>text</code> instead of <code>content</code>:</p>
<pre><code>bsObj = bs(data.text, 'lxml')
</code></pre>
<p>The only reason to do anything other than this is if the website is broken and confuses <code>requests</code>.</p>
<p>If you just use <code>data.content</code>, BeautifulSoup uses a library called <code>unicodedammit</code> to heuristically try to guess the right encoding.</p>
<p>If you use <code>data.content</code> and <code>from_encoding</code>, you have to know the right encoding so you can pass it in. This is useful as a last resort, but shouldn't be the first thing you turn to.</p>
<p>I suspect <code>from_encoding=Latin-1</code> and <code>from_encoding=UTF-8</code> don't actually do the same thing. They certainly <em>shouldn't</em>. More likely, the former gave you a different, incorrect encoding, but you just didn't notice it was different. Maybe something like this:</p>
<pre><code>'Divulga as condi\u00c3\u00a7\u00c3\u00b5es de oferta p\u00c3\u00bablica para a realiza\u00c3\u00a7\u00c3\u00a3o de opera\u00c3\u00a7\u00c3\u00b5es de swap.'
</code></pre>
<p>That may not look much different if you don't know the 100000-character Unicode table by heart, in hex, but if you <code>print</code> it, you can see that it's quite different:</p>
<pre><code>Divulga as condiÃ§Ãµes de oferta pÃºblica para a realizaÃ§Ã£o de operaÃ§Ãµes de swap.
</code></pre>
</div>
<span class="comment-copy">Thanks,  But I didn't understand one part. When I search for bsObj.find("div"), it returns the bs obj with the wrong encode. But when I print it, I returns the same. I've seem this answer at a different post, but I coudn't understand</span>
<span class="comment-copy">For me, the result with the .content and .text was the same. Did you get the text without this encode problem?</span>
