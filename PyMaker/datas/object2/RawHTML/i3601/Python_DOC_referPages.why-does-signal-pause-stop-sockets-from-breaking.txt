<div class="post-text" itemprop="text">
<p>I am working with sockets using Python 3.5 and the <code>multiprocessing</code> module and running into an unexpected behavior. My program is essentially a couple of threads running until a certain message is received by the client telling it to stop.</p>
<p>If I execute it like this, I get a <code>BrokenPipeError</code> that breaks the program, despite the <code>while True</code> loop and the <code>except</code> block.</p>
<pre><code>#!/usr/bin/env python3
import signal
import traceback
from multiprocessing.dummy import Pool
from process import Process

def main():
    while True:
        try:
            # a Process has a couple threads
            process = Process()
            listener_pool = Pool(processes=1)
            sender_pool = Pool(processes=1)

            # blocking socket client that runs forever
            listener_pool.apply_async(process.listener_thread.run, ())

            # blocking socket server that runs forever
            sender_pool.apply_async(process.sender_thread.run, ())

            return 0

        except BrokenPipeError:
            traceback.print_exc()

            # closing connections
            process.emitter_thread.socket.close()
            process.listener_thread.socket.close()

if __name__ == '__main__':
    main()
</code></pre>
<p>However, when I added a <code>signal.pause()</code> right before returning, not only the code runs as intended, but also no <code>BrokenPipeError</code> is raised at any time. </p>
<pre><code>#!/usr/bin/env python3
import signal
import traceback
from multiprocessing.dummy import Pool
from process import Process

def main():
    while True:
        try:
            # a Process has a couple threads
            process = Process()
            listener_pool = Pool(processes=1)
            sender_pool = Pool(processes=1)

            # blocking socket client that runs forever
            listener_pool.apply_async(process.listener_thread.run, ())

            # blocking socket server that runs forever
            sender_pool.apply_async(process.sender_thread.run, ())
            signal.pause()
            return 0

        except BrokenPipeError:
            traceback.print_exc()

            # closing connections
            process.emitter_thread.socket.close()
            process.listener_thread.socket.close()


if __name__ == '__main__':
    main()
</code></pre>
<p>According to the <a href="https://docs.python.org/3.4/library/signal.html#signals-and-threads" rel="nofollow noreferrer">docs</a>, signals can only be handled by the main thread, but both sockets are being handled by secondary threads. What does <code>signal.pause()</code> do to prevent the sockets from breaking, when they are not even being called in the same context?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.apply_async" rel="nofollow noreferrer"><code>apply_async</code></a>, as its name suggests returns immediately. Therefore in the first version of your program, the main thread exits right as it starts the child threads (dummy processes are just <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy" rel="nofollow noreferrer">threads using the multiprocessing api</a>).</p>
<p>Therefore the main thread has exited the <code>try</code> block long before the exception happens.</p>
<p>In the second case, <code>signal.pause()</code> forces the main thread to wait in the <code>try</code> block, where it will catch the exception.</p>
<p>Do note this is a fragile solution though, as receiving <em>any</em> signal will make <code>signal.pause()</code> resume and the main thread exit.</p>
</div>
<span class="comment-copy">By the way it's your design decision, but if you work with python3.5+, going asynchronous is much more convenient than python threads (be it through thread or multiprocessing api).</span>
<span class="comment-copy">Thanks for the answer. But, then, wouldn't <code>traceback.print_exc()</code> warn me that a socket was broken instead of failing silently? I took away some code to make it easier to read, but both threads would at least write critical exceptions to a log file. I even moved <code>signal.pause();return 0</code> below the <code>except</code> block and I still don't get any <code>BrokenPipeError</code>. Does it mean no sockets are failing?</span>
<span class="comment-copy">It probably means they are not failing yes. To be sure, you can try to make one fail on purpose, you should see the exception.</span>
<span class="comment-copy">Just tried. They are not failing, indeed. I played around with replacing <code>signal.pause() with </code>time.sleep()` and I believe the main thread, upon exiting, was closing all connections (perhaps as part of garbage collection). Thank you for your help, now I understand what needs to be fixed here.</span>
