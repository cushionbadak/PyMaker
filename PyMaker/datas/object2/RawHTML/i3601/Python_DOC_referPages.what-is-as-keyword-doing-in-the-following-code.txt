<div class="post-text" itemprop="text">
<p>I am learning 'Exceptions' in Python.<br/>
Consider the following code :</p>
<pre><code>def fancy_divide():
    try:
        print(5/0)
    except Exception:
        print(Exception)
</code></pre>
<p>If I run the above code, ie</p>
<blockquote>
<p>fancy_divide()    </p>
</blockquote>
<p>it prints out <code>&lt;class 'Exception'&gt;</code>.
But if I modify the code :</p>
<pre><code>def fancy_divide():
    try:
        print(5/0)
    except Exception as ex:
        print(ex)
</code></pre>
<p>It prints out 'division by zero' on calling the function <code>fancy_divide()</code>.<br/>
Why this difference?<br/>
I thought that the 'as' keyword is just to rename objects.</p>
</div>
<div class="post-text" itemprop="text">
<p>It says that for scope following <code>as</code> there will be a variable called <code>ex</code> that was created from <code>Exception</code>.</p>
<p>In your case the difference is that in example one you are printing out the class Exception, in example two you are printing an object of type Exception.</p>
<pre><code>&gt;&gt;&gt; print(int)
&lt;class 'int'&gt;
&gt;&gt;&gt; print(int(1))
1
&gt;&gt;&gt; 
</code></pre>
<p>I often see and use it when opening a file:</p>
<pre><code>with open(filename) as f:
    f.read()
</code></pre>
<p>In python <a href="https://docs.python.org/3/tutorial/errors.html#raising-exceptions" rel="nofollow noreferrer">documentation</a> it has the following example:</p>
<pre><code>&gt;&gt;&gt; try:
...     raise NameError('HiThere')
... except NameError:
...     print('An exception flew by!')
...     raise
...
An exception flew by!
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
NameError: HiThere
</code></pre>
<p>Notice that the Code doesn't do anything with the class <code>NameError</code>.  Because they are in that block they know that it's a <code>NameError</code>.   If they wanted to do something with the error object that was thrown then they would have to rewrite the code with <code>as</code>:</p>
<pre><code>&gt;&gt;&gt; try:
...     raise NameError('HiThere')
... except NameError as e:
...     print(e)
...     print('An exception flew by!')
...     raise
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On the last line of your first <code>fancy_divide</code> function, you printed the <code>Exeption</code> class itself, not an <em>instance</em> of the <code>Exception</code> class. On the third line of your updated code, where you used the <code>as</code> keyword, you were trying to catch an <em>instance</em> of the <code>Exception</code> class or its subclasses and assign it to the variable <code>ex</code> if you got an error. Note: an instance is different from the <em>actual</em> class (well, I hope you already know this)</p>
<p>You can see this when you compare the contents of <code>ex</code> to <code>Exception</code>:</p>
<pre><code>def fancy_divide_return():
    try:
        print(5/0)
    except Exception as ex:
        return Exception, ex



&gt;&gt;&gt; the_class, the_instance = fancy_divide_return()
&gt;&gt;&gt; the_class
&lt;class 'Exception'&gt;
&gt;&gt;&gt; the_instance
ZeroDivisionError('division by zero',)
&gt;&gt;&gt; type(the_class)
&lt;class 'type'&gt;
&gt;&gt;&gt; type(the_instance)
&lt;class 'ZeroDivisionError'&gt;
</code></pre>
</div>
<span class="comment-copy"><code>Exception</code> is a class, <code>ex</code> is an object. <code>print(Exception)</code> will print <code>&lt;class 'Exception'&gt;</code> anywhere (as long as you dont declare a variable with this name), but <code>ex</code> will only exist inside its except scope</span>
<span class="comment-copy">@Aran-Fey How were you able to write &lt;class 'Exception'&gt;??</span>
<span class="comment-copy">@idpd15 I wrapped it in `backticks`</span>
<span class="comment-copy">@RafaelC: I feel like you should write an answer to that effect.</span>
