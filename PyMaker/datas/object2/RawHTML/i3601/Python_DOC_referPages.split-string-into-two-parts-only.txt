<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/30636248/split-a-string-only-by-first-space-in-python">Split a string only by first space in python</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I have a string </p>
<pre><code>s = 'abcd qwrre qwedsasd zxcwsacds'
</code></pre>
<p>I want to split any string in only two parts at the first occurrence of a whitespace. <em>i.e</em>. <code>a='abcd'</code> and <code>b='qwrre qwedsasd zxcwsacds'</code></p>
<p>If I use <code>a, b=split(' ')</code> it gives me an error because there are too many values to unpack.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>a,b = split(' ', 1)</code>.</p>
<p>The second argument <code>1</code> is the maximum number of splits that would be done.</p>
<pre><code>s = 'abcd efgh hijk'
a,b = s.split(' ', 1)
print(a) #abcd
print(b) #efgh hijk
</code></pre>
<p>For more information on the string split function, see <a href="https://docs.python.org/2/library/stdtypes.html#str.split" rel="noreferrer"><code>str.split</code> in the manual</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="noreferrer">Python docs</a></p>
<blockquote>
<p><strong>str.split(sep=None, maxsplit=-1)</strong></p>
<p>Return a list of the words in the string, using sep as the delimiter
  string. If maxsplit is given, at most maxsplit splits are done (thus,
  the list will have at most maxsplit+1 elements). If maxsplit is not
  specified or -1, then there is no limit on the number of splits (all
  possible splits are made).</p>
</blockquote>
<pre><code>'1 2 3'.split(maxsplit=1)
# ['1', '2 3']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a standard string method <code>partition</code> which searches for a given separator and returns a 3-tuple consisting of string part before it, the separator itself, and the part after it.</p>
<pre><code>&gt;&gt;&gt; s = 'abcd qwrre qwedsasd zxcwsacds'
&gt;&gt;&gt; s.partition(' ')
('abcd', ' ', 'qwrre qwedsasd zxcwsacds')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're missing one more parameter in your split, the number of occurrences, try this;</p>
<pre><code>s='abcd qwrre qwedsasd zxcwsacds'
&gt;&gt;&gt; a, b = s.split(' ', 1)
&gt;&gt;&gt; print(a, b)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can solve this problem by using python "star expression". </p>
<pre><code>s='abcd qwrre qwedsasd zxcwsacds'
a = s.split()
first, *second = a
second = " ".join(second)
</code></pre>
<p>"first" takes the first element of the list and " *second" takes the remaining elements. </p>
<pre><code>&gt;&gt;&gt; first
'abcd'
&gt;&gt;&gt; second
'qwrre', 'qwedsasd', 'zxcwsacds'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>s = 'abcd qwrre qwedsasd zxcwsacds'
s1 = s.split()[0]
s2 = ' '.join(s.split()[1:])
print(s1)
print(s2)
</code></pre>
<p>Output:</p>
<pre><code>abcd
qwrre qwedsasd zxcwsacds
</code></pre>
<p>Or:</p>
<pre><code>new_s = ''.join([' s ' if i.isspace() else i for i in s])
a,b = new_s.replace(' s','',1).split(' s ')
print(a)
print(b)
</code></pre>
<p>Output:</p>
<pre><code>abcd
qwrre qwedsasd zxcwsacds
</code></pre>
<p>Or even better split also for tabs and newlines:</p>
<pre><code>a,b = s.split(None,1)
print(a)
print(b)
</code></pre>
<p>Output:</p>
<pre><code>abcd
qwrre qwedsasd zxcwsacds
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So, there's a second parameter you can pass as many have pointed out:</p>
<pre><code>&gt;&gt;&gt; a, b = "foo bar".split(' ', 1)
</code></pre>
<p>but nobody's pointing this out:</p>
<pre><code>&gt;&gt;&gt; a, b = "foobar".split(' ', 1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: need more than 1 value to unpack
</code></pre>
<p>You don't want to be using this because it's unsafe unless you're guaranteed to have a string that has only the one space in it. It's better to split it and then check for how many splits you've got and then unpack them:</p>
<pre><code>&gt;&gt;&gt; parts = "foo bar".split(' ', 1)
&gt;&gt;&gt; if len(parts) == 2:
&gt;&gt;&gt;    a, b = parts 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>1.You can split the string like this.</p>
<pre><code>a = temp.substring(0, s.indexOf(' '));
b = temp.substring(s.indexOf(' ') + 1);
</code></pre>
<p>2.or you can do:</p>
<pre><code>a = s[0: s.find(' ')]
b = s[s.find(' ') + 1: ]
</code></pre>
<p>3.  </p>
<pre><code>a,b = s.split(' ', 1)
print(a)
print(b) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>#!python2

s='abcd qwrre qwedsasd zxcwsacds'

s1 = s[0: s.find(' ')]
s2 = s[s.find(' ') + 1: ]

print s1
print s2
'''
abcd
qwrre qwedsasd zxcwsacds
'''
</code></pre>
</div>
<span class="comment-copy">Use the <code>maxsplit</code> parameter: <code>a, b = s.split(maxsplit=1)</code>.</span>
<span class="comment-copy">nice one - is there also a minsplit or something to make this work from reverse?</span>
<span class="comment-copy">I tried testing negative values but that didn't yield that kind of result... I guess it would be running the risk of not being able to split a string a minimum of x ways.</span>
<span class="comment-copy">@sudonym I'm not sure what <code>minsplit</code> would do. What is the expected result of <code>"something".split(minsplit=2)</code>?</span>
<span class="comment-copy">the operation in reverse, i.e. just split after the first/second last occurrence? I will check the docs.</span>
<span class="comment-copy">@sudonym that's <code>str.rsplit</code> -- split from the right, not the left.</span>
<span class="comment-copy">although this works, I'm not sure how it's better than using <code>maxsplit</code> in <code>str.split</code></span>
<span class="comment-copy">@AdamSmith if there is no space in <code>s</code> this is a bit more convenient because it will still return a <code>3-tuple</code>.</span>
