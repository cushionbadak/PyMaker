<div class="post-text" itemprop="text">
<p>So I am trying to create two functions (the use of additional functions is allowed). One that creates an entire right triangle by calling a recursive function, and then the recursive function itself is suppose to be able to grab the last X amount of lines of the complete right triangle and display them. The only thing is, the first function (triangle()) cannot be changed.</p>
<p>Here are the two functions (at least this is what I have so far for the recursive function):</p>
<pre><code>def triangle(n):
    return recursive_triangle(n, n)


def recursive_triangle(k, n):
    if k &gt; 0:
        print(k*'*')
        recursive_triangle(k-1, n)
</code></pre>
<p>So for example, when working properly:</p>
<pre><code>triangle(6)
</code></pre>
<p>would give</p>
<pre><code>******
 *****
  ****
   ***
    **
     *
</code></pre>
<p>and </p>
<pre><code>recursive_triangle(3,6)
</code></pre>
<p>would give me the last 3 lines of a right triangle of base and height 6 (above triangle) like so:</p>
<pre><code>***
 **
  *
</code></pre>
<p>I'm not sure how to use the relationship between n and k in a recursive method to implement the proper spacing required.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand you correctly, <code>triangle(6)</code> should show a 6-lines tall triangle. This, I presume, also means that <code>triangle(3)</code> should show a 3-lines tall triangle, just as you presented in your example so there is no need to change anything (in the setup), you just need to write the <code>recursive_triangle()</code> function properly to subtract <code>k</code> from <code>n</code> before sending it to another function to do the actual printing.</p>
<p>However, what I think you want is to still consider the 'whole' triangle, but just not print the higher lines, i.e. instead of:</p>
<pre>
***
 **
  *</pre>
<p>you want:</p>
<pre>
   ***
    **
     *</pre>
<p>Notice the extra indentation as if the 'triangle' was printed but was missing the first 3 lines. In that case, you can use <a href="https://docs.python.org/3/library/stdtypes.html#str.rjust" rel="nofollow noreferrer"><code>str.rjust()</code></a> to do the justification for you, e.g.:</p>
<pre><code>def recursive_triangle(k, n):
    if k &gt; 0:
        print(("*" * k).rjust(n))
        recursive_triangle(k-1, n)
</code></pre>
<p>Now if you call <code>recursive_triangle(3, 6)</code> you'll get exactly what you're after (and it will also properly print deferred calls from <code>triangle()</code>).</p>
<p><strong>UPDATE</strong>: If you want to return a string instead of printing, store the results in a <code>list</code> and then concatenate with new lines, i.e.:</p>
<pre><code>def recursive_triangle_builder(k, n):
    result = []
    if k &gt; 0:
        result.append(("*" * k).rjust(n))
        result += recursive_triangle_builder(k-1, n)
    return result

def recursive_triangle(k, n):
    return "\n".join(recursive_triangle_builder(k, n))

print(recursive_triangle(3, 6))  # or store the result instead of printing
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this is what you want.</p>
<pre><code>print( (n-k) * ' ' + k * "*")
</code></pre>
</div>
<span class="comment-copy">can you use two calls of recursive_triangle(), where it only takes 1 parameter? <code>recursive_triangle(3)</code> and <code>recursive_triangle(6)</code>. The last x lines of a any triangle is just a triangle with x height</span>
<span class="comment-copy">Wouldn't it just be the same as calling <code>triangle(3)</code>? If that's the case, all you need is to subtract <code>k</code> from <code>n</code> to get the final length of the triangle. Now, it's a whole different issue on how you print it and why would you want to use recursion in the first place?</span>
<span class="comment-copy">@zwer Wouldn't what be the same as calling triangle(3)? Also, using recursion here since I was told to use recursion as part of the question.</span>
<span class="comment-copy">@MJames28 - <code>recursive_triangle(3, 6)</code> should show exactly what <code>trangle(3)</code> should show, right?</span>
<span class="comment-copy">@zwer That's right! So you're suggesting I should subtract k from n where exactly?</span>
<span class="comment-copy">Say I wanted to return the desired result rather than print, how would I go about doing this? Since if you replace print with return, recursive_triangle() isn't called since the function is left after the return statement. So for example it would be something like '****\n ***\n  **\n   *\n' when returned and if I printed the function call it would show the triangle.</span>
<span class="comment-copy">@MJames28 - Check the update above.</span>
<span class="comment-copy">I believe the question wants it so that when, for example, triangle(4) is called, what is obtained is ''****\n ***\n  **\n   *\n'' and when print(triangle(4)) is called, it shows the actual triangle. Would this change the design of the function though? I appreciate the explanations.</span>
<span class="comment-copy">@MJames28 - Then create a separate function to build the triangle lines and defer the call to <code>recursive_triangle()</code> to it. Check the update again.</span>
<span class="comment-copy">This would result in a syntax error wouldn't it?</span>
<span class="comment-copy">I know. This site misprinted my copy paste and now won't let me edit. It should be print( (n-k) * ' ' + k * "*")</span>
