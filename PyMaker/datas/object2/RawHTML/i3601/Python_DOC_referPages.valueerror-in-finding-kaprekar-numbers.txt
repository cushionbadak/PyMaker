<div class="post-text" itemprop="text">
<blockquote>
<p>In mathematics, a Kaprekar number for a given base is a non-negative integer,  the representation of whose square in that base can be split into two parts that add up to the original number again. For instance, 45 is a Kaprekar number, because 45Â² = 2025 and 20+25 = 45.<br/>
  I want to print all Kaprekar numbers between two integers p and q </p>
</blockquote>
<pre><code>def kaprekarNumbers(p, q):
    for i in range(int(p),int(q)):
        square = str(i ** 2)
        if len(square) % 2 == 0:
            p1 , p2 = square[:len(square)/2] , square[len(square)/2:]
        else:
            p1 , p2 = square[:int(len(square)/2)] , square[int(len(square)/2) :]
        if int(p1) + int(p2) == int(i):
            print(i , end = '')
</code></pre>
<p>Error:
Compiler message :</p>
<pre><code>Runtime Error
Error(stderr) : 
Traceback (most recent call last):
File "solution.py", line 26, in &lt;module&gt;
    kaprekarNumbers(p, q)
  File "solution.py", line 17, in kaprekarNumbers
    if int(p1) + int(p2) == int(i):
ValueError: invalid literal for int() with base 10: ''
</code></pre>
<p>Any help is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>p</code> is an integer in the range [0,3], so that its square is a single-digit integer, then your split of the squares string version will produce an empty string for <code>p1</code>.  int('') is an error.  You have to check that value before you attempt to convert:</p>
<pre><code>if len(square) &gt;= 2:
    # Put your existing code here;
    # If square is only a single digit, there's no use splitting the result.
</code></pre>
<p>Better yet, cover the single-digit case, so you pick up <code>1</code> as a valid number:</p>
<pre><code>    if p1 == '':
        p1 = '0'       # Force a leading zero.
    if int(p1) + int(p2) == int(i):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a more advanced implementation (for when you will be more familiarized with <em>Python</em>).</p>
<p><em>code.py</em>:</p>
<pre><code>import sys


def kaprekar(n, base=10):
    #if i &lt;= 0:
    #    return False
    square = n ** 2
    splitter = base
    while True:
        div, mod = divmod(square, splitter)
        if mod and div + mod == n:
            return True
        if splitter &gt;= square:
            return False
        splitter *= base
    return False


def print_kaprekars(p, q, base=10):
    for i in range(p, q):
        if kaprekar(i, base=base):
            print(i)


def main():
    lo = 0
    hi = 1000
    base = 10
    print("Printing Kaprekar numbers (!!! base 10 representation !!!) between {:d} and {:d} in base {:d}".format(lo, hi, base))
    print_kaprekars(lo, hi, base=base)


if __name__ == "__main__":
    print("Python {:s} on {:s}\n".format(sys.version, sys.platform))
    main()
</code></pre>
<p><strong>Notes</strong>:</p>
<ul>
<li><code>kaprekar</code> function:

<ul>
<li>Tests whether a number satisfies <em>Kaprekar</em> conditions</li>
<li>Supports bases other than 10 (default)</li>
<li>Does everything mathematically (no string conversions or parsing - this way you <strong>wouldn't encounter current error</strong>, and also waaay faster)

<ul>
<li>The "position" in the squared number "held" by <code>splitter</code> (going right -&gt; left) and the 2 parts are computed using <a href="https://docs.python.org/3/library/functions.html#divmod" rel="nofollow noreferrer">[Python]: <strong>divmod</strong>(<em>a, b</em>)</a></li>
</ul></li>
</ul></li>
<li>The rest are just wrappers</li>
</ul>
<p><strong>Output</strong>:</p>
<blockquote>
<pre><code>(py35x64_test) e:\Work\Dev\StackOverflow\q050846444&gt;"e:\Work\Dev\VEnvs\py35x64_test\Scripts\python.exe" code.py
Python 3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)] on win32

Printing Kaprekar numbers (!!! base 10 representation !!!) between 0 and 1000 in base 10
1
9
45
55
99
297
703
999
</code></pre>
</blockquote>
</div>
<span class="comment-copy">What error are you getting?</span>
<span class="comment-copy">This code doesn't even attempt to convert any strings to floats. Please post a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> and the complete, exact stack trace.</span>
<span class="comment-copy">Welcome to StackOverflow.  Please read and follow the posting guidelines in the help documentation, as suggested when you created this account.  <a href="http://stackoverflow.com/help/mcve">Minimal, complete, verifiable example</a> applies here.  We cannot effectively help you until you post your MCVE code and accurately describe the problem. We should be able to paste your posted code into a text file and reproduce the problem you described.</span>
<span class="comment-copy">Edited ! Added error into body .</span>
<span class="comment-copy">please edit the error into the body of your question as text</span>
<span class="comment-copy">Even though I've rectified this error , I'm getting yet another error&lt;br&gt;  <code>Traceback (most recent call last):   File "solution.py", line 26, in &lt;module&gt;     kaprekarNumbers(p, q)   File "solution.py", line 14, in kaprekarNumbers     p1 , p2 = square[:len(square)/2] , square[len(square)/2:] TypeError: slice indices must be integers or None or have an __index__ method</code>&lt;br&gt;  Can you please suggest some improvements in the code . Thanks :D</span>
<span class="comment-copy">Shouldn't it be "<i>range [1:3]</i>"?</span>
<span class="comment-copy">Actually, 0 is allowable according to the formal definition.</span>
