<div class="post-text" itemprop="text">
<p>I have a bunch of float values, for example:</p>
<p>x1 = 1.11111111</p>
<p>x2 = 2.22222222</p>
<p>I want to write these values to a file:</p>
<pre><code>f = open("a.dat", "w+")
f.write("This is x1: ",x1)
f.write("\n")              #I want to separate the 2 lines
f.write("This is x2: ",x2)
</code></pre>
<p>At this point I got an error on the second line:</p>
<pre><code>write() takes exactly one argument (2 given)
</code></pre>
<p>How do I write to file such that when I open it, I see this format:</p>
<pre><code>This is x1: 1,1111111
This is x2: 2,2222222
</code></pre>
<p>And yes, the file has to be ***.dat</p>
<p>It's not .txt</p>
</div>
<div class="post-text" itemprop="text">
<p>the way you are writing to the file looks like you are giving two arguments to write function. So you need to only pass one argument. try converting x1 and x2 into string and then write to the file.</p>
<pre><code>f.write("This is x1 " + str(x1))
f.write("This is x2 " + str(x2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/io.html#io.TextIOBase.write" rel="nofollow noreferrer"><code>write</code></a> function takes a single string. You're trying to use it like <code>print</code>, which takes any number of arguments.</p>
<hr/>
<p>You can, in fact, just use <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer"><code>print</code></a>. Its output only goes to your program's output (<a href="https://docs.python.org/3/library/sys.html#sys.stdout" rel="nofollow noreferrer"><code>stdout</code></a>) by default, by passing it a <code>file</code> argument, you can send it to a text file instead:</p>
<pre><code>print("This is x1: ", x1, file=f)
</code></pre>
<hr/>
<p>If you want to use <code>write</code>, you need to format your output into a single string. The easiest way to do that is to use f-strings:</p>
<pre><code>f.write(f"This is x1: {x1}\n")
</code></pre>
<p>Notice that I had to include a <code>\n</code> on the end. The <code>print</code> function adds its <code>end</code> parameter to the end of what it prints, which defaults to <code>\n</code>. The <code>write</code> method does not.</p>
<hr/>
<p>Both for backward compatibility and because occasionally they're more convenient, Python has other ways of doing the same thing, including explicit <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer">string formatting</a>:</p>
<pre><code>f.write("This is x1: {}\n".format(x1))
</code></pre>
<p>… <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer"><code>printf</code>-style formatting</a>:</p>
<pre><code>f.write("This is x1: %s\n" % (x1,))
</code></pre>
<p>… <a href="https://docs.python.org/3/library/string.html#template-strings" rel="nofollow noreferrer">template strings</a>:</p>
<pre><code>f.write(string.Template("This is $x1\n").substitute(x1=x1))
</code></pre>
<p>… and string concatenation:</p>
<pre><code>f.write("This is x1: " + str(x1) + "\n")
</code></pre>
<hr/>
<p>All but the last of these automatically converts <code>x1</code> to a string in the same way as <code>str(x1)</code>, but also allows other options, like:</p>
<pre><code>f.write(f"This is {x1:.8f}\n")
</code></pre>
<p>This converts <code>x1</code> to a <code>float</code>, then formats it with 8-decimal precision.  So, in addition to printing out <code>1.11111111</code> and <code>2.22222222</code> with 8 decimals, it'll also print <code>1.1</code> as <code>1.10000000</code> and <code>1.23456789012345</code> as <code>1.23456789</code>.</p>
<p>The same format strings work for f-strings, <code>str.format</code>, and the <code>format</code> functions:</p>
<pre><code>print("This is x1: ", format(x1, '.8f'), file=f)
f.write("This is x1: {:.8f}\n".format(x1))
f.write("This is x1: " + format(x1, '.8f') + "\n")
</code></pre>
<p>… and the other two methods have similar, but not quite as powerful, formatting languages of their own:</p>
<pre><code>f.write("This is x1: %.8f\n" % (x1,))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>f.write('This is x1: %f'%x1)
f.write('This is x2: %f'%x2) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First have a look at the below code sample. I have used repetition operator <code>*</code> to repeat strings 2 times which can used to generate a multiline string in single statement(in case, if you have a set of variables).</p>
<pre><code>x1 = 1.11111111
x2 = 2.22222222

lines = "This is x%s: %s\n"*2 % (1, x1, 2, x2)
print(lines)
</code></pre>
<p>» Output</p>
<pre><code>This is x1: 1.11111111
This is x2: 2.22222222
</code></pre>
<p>Finally you can use the below 3 lines of code to accomplish your goal.</p>
<pre><code>x1, x2 = 1.11111111, 2.22222222
with open("a.dat", "w+") as f:
    f.write("This is x%s: %s\n"*2 % (1, x1, 2, x2));
</code></pre>
<p>Do not need to close file. It will be closed automatically once program control comes out from <strong>with</strong> statement's block.</p>
</div>
<span class="comment-copy">Shouldn't it be <code>f.write("\n")</code>? With quotes.</span>
<span class="comment-copy">oh yes, I fixed that too. But the program still won't compile, as its stop right at the 2nd line</span>
<span class="comment-copy"><code>write</code> doesn't behave like print, it will only take a single argument, you are passing more than one. The error is pretty self-explanatory here.</span>
<span class="comment-copy">@user3483203 that explains it. Can you post a comment with links that help me formatting it? So I can pick your  comment as an answer and close this thread.</span>
<span class="comment-copy">@AdrianTran Note that this code writes everything on one line. And using <code>str</code> to convert floats doesn't give you any format control, you just get the default number of decimal places.</span>
<span class="comment-copy">I'm afraid I haven't learn anything about stdout yet. I'll try write this down and use it next time.</span>
<span class="comment-copy">@AdrianTran <code>stdout</code> is just the name for the special file that represents your program's output. You don't hav to worry about what it means; just that you can use a normal file that you got back from <code>open</code> with the <code>print</code> function.</span>
<span class="comment-copy">@AdrianTran <code>stdout</code> is just the place where normal <code>print</code> output goes. That usually means your terminal (console) window.</span>
<span class="comment-copy">tks! btw can you find any website that can show me how to format correctly when write to file?</span>
<span class="comment-copy">There is nothing better than python docs.</span>
<span class="comment-copy">@AdrianTran <a href="https://www.python.org/doc/" rel="nofollow noreferrer">python.org/doc</a></span>
