<div class="post-text" itemprop="text">
<p>I tested using Python to translate a curl to get some data.</p>
<pre><code>import requests
import json

username="abc"
password="123"
headers = {
    'Content-Type': 'application/json',
}
params = (
    ('version', '2017-05-01'),
)

data = '{"text":["This is message one."], "id":"en-es"}'
response = requests.post('https://somegateway.service/api/abc', headers=headers, params=params, data=data, auth=(username, password))
print(response.text)
</code></pre>
<p>The above works fine. It returns json data.
It seems ["This is message one."] is a list. I want to use a variable that loads a file to replace this list.
I tried:</p>
<pre><code>with open(f,"r",encoding='utf-8') as fp:
    file_in_list=fp.read().splitlines()
    toStr=str(file_in_list)
    data = '{"text":'+toStr+', "id":"en-es"}'
    response = requests.post('https://somegateway.service/api/abc', headers=headers, params=params, data=data, auth=(username, password))
    print(response.text)
</code></pre>
<p>But it returned error below.</p>
<pre><code>{
  "code" : 400,
  "error" : "Mapping error, invalid JSON"
}
</code></pre>
<p>Can you help? How can I have valid response.text?</p>
<p>Thanks.</p>
<p><strong>update:</strong></p>
<p>The content of f contains only five lines below:</p>
<pre><code>This is message one.
this is 2.
this is three.
this is four.
this is five.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason your existing code fails is that <code>str</code> applied to a list of strings will only rarely give you valid JSON. They're not intended to do the same thing. JSON only allows double-quoted strings; Python allows both single- and double-quoted strings. And, unless your strings all happen to include <code>'</code> characters, Python will render them with single quotes:</p>
<pre><code>&gt;&gt;&gt; print(["abc'def"]) # gives you valid JSON, but only by accident
["abc'def"]
&gt;&gt;&gt; print(["abc"]) # does not give you valid JSON
['abc']
</code></pre>
<p>If you want to get the valid JSON encoding of a list of strings, don't try to trick <code>str</code> into giving you valid JSON by accident, just use the <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer"><code>json</code></a> module:</p>
<pre><code>toStr = json.dumps(file_in_list)
</code></pre>
<hr/>
<p>But, even more simply, you shouldn't be trying to figure out how to construct JSON strings in the first place. Just create a dict and <code>json.dumps</code> the whole thing:</p>
<pre><code>data = {"text": file_in_list, "id": "en-es"}
data_str = json.dumps(data)
</code></pre>
<p>Being able to do this is pretty much the whole point of JSON: it's a simple way to automatically serialize all of the types that are common to all the major scripting languages.</p>
<hr/>
<p>Or, even better, let <code>requests</code> do it for you by passing a <code>json</code> argument instead of a <code>data</code> argument:</p>
<pre><code>data = {"text": file_in_list, "id": "en-es"}
response = requests.post('https://somegateway.service/api/abc', headers=headers, params=params, json=data, auth=(username, password))
</code></pre>
<p>This also automatically takes care of setting the <code>Content-Type</code> header to <code>application/json</code> for you. You weren't doing thatâ€”and, while many servers will accept your input without it, it's illegal, and some servers will not allow it.</p>
<hr/>
<p>For more details, see the section <a href="http://docs.python-requests.org/en/master/user/quickstart/#more-complicated-post-requests" rel="nofollow noreferrer">More complicated POST requests</a> in the <code>requests</code> docs. But there really aren't many more details. </p>
</div>
<div class="post-text" itemprop="text">
<h1>tldr;</h1>
<p><code>toStr = json.dumps(file_in_list)</code></p>
<h1>Explanation</h1>
<p>Assuming your file contains something like 
<code>
String_A
String_B
</code></p>
<p>You need to ensure that toStr is:</p>
<ol>
<li>Enclosed by <code>[</code> and <code>]</code></li>
<li>Every String in the list is enclosed by quotation marks. </li>
</ol>
<p>So your raw json (as a String) is equal to <code>'{"text":["String_A", "String_B"], "id":"en-es"}'</code></p>
</div>
<span class="comment-copy">Instead of trying to figure out how to format a JSON string, why not just create a dict and JSON-encode it? For example: <code>data = {"text": file_in_list, "id": "en-us"}</code>, then you can either post <code>json.dumps(encode)</code>, or use a method that does the JSON encoding for you.</span>
<span class="comment-copy">Use <code>[toStr]</code> instead of just <code>toStr</code> when you read the file content?</span>
<span class="comment-copy">@SudheeshSinganamalla That doesn't make any sense. You can't concatenate a list to a string. Even if you could, why would you expect it to help? He's already got the string representation of a list of strings; why would a list of the string representation of a list be useful?</span>
<span class="comment-copy">As a side note, consider <code>list(fp)</code> (or <code>fp.readlines()</code>) instead of <code>fp.read().splitlines()</code>. The way you've written it works, but only by reading the whole file into one giant string, then splitting that string into separate lines. But if you don't call <code>read()</code>, the file is already an iterable of lines, so Python can read it in a line at a time and build up the list without wasting that time and memory.</span>
<span class="comment-copy">@abarnert Sorry, it looks like I did oversee <code>.splitlines()</code>, I was under the impression that the OP's server side API needs a <code>list</code> but is instead sending just a <code>str</code> instead of a <code>list of strings</code>.</span>
<span class="comment-copy">thanks, yes, but how to write toStr?</span>
<span class="comment-copy">if I remove toStr=str(file_in_list) and change to  data = '{"text":'+file_in_list+', "id":"en-es"}',   it returned another error  data = '{"text":'+file_in_list+', "id":"en-es"}' TypeError: must be str, not list</span>
<span class="comment-copy">refer to my edit - use json.dumps(file_in_list)</span>
<span class="comment-copy">json.dumps yes. thanks</span>
