<div class="post-text" itemprop="text">
<p>I am trying to iterate over a multiprocess query to website using python 3.  I used a modified version of the example code from <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">https://docs.python.org/3/library/concurrent.futures.html</a> example 17.4.2.1. ThreadPoolExecutor Example</p>
<pre><code>    with concurrent.futures.ProcessPoolExecutor(max_workers=self.load) as executor:
        futureThreadVer = {executor.submit(self.get_code(), 60):x for x in range(self.load)}
        for future in concurrent.futures.as_completed(futureThreadVer):
            threadVer = futureThreadVer[future]
            try:
                data=future.result()
            except Exception as exc:
                print("%r generated an exception : %s" %(threadVer, exc))
            else:
                print("%r page data %r" % (self.page, data))
</code></pre>
<p>It is a modification of the example code from <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">https://docs.python.org/3/library/concurrent.futures.html</a> example 17.4.2.1. ThreadPoolExecutor Example</p>
<p>Instead of mapping to thread to url, I want to have a process number attached because I am querying the same the url in different processes.</p>
<p>I get the following error:</p>
<pre><code>3 generated an exception : 'int' object is not callable
1 generated an exception : 'int' object is not callable
0 generated an exception : 'int' object is not callable
2 generated an exception : 'int' object is not callable
4 generated an exception : 'int' object is not callable
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your second line:</p>
<p><code>futureThreadVer = {executor.submit(self.get_code(), 60):x for x in range(self.load)}</code> </p>
<p>The call to <code>executor.submit</code> contains a function call. It should instead be a reference to the function. So, whats happening is instead of calling the function inside the executor, the function gets called in the main thread and <code>self.get_code</code> probably returns an integer which actually gets passed to the executor. The executor then tries to call that integer thinking its a function. This happens because python supports duck typing and the executor expects the first argument to be a function object.</p>
<p>So change your second line to:</p>
<pre><code>futureThreadVer = {executor.submit(self.get_code, 60):x for x in range(self.load)}
</code></pre>
</div>
<span class="comment-copy">Try <code>executor.submit(self.get_code, 60)</code>, or just <code>executor.submit(self.get_code)</code> if <code>get_code</code> doesn't accept arguments.</span>
<span class="comment-copy">I had to get rid of timeout value for this, which could cause a problem later on... so instead the line looks like submit()self.get_code): .... The problem it throws up is "get_code() takes 1 positional argument but 2 were given"....Edit, it appears i got rid of the timeout from my code vs the example code that I was using as basis.</span>
