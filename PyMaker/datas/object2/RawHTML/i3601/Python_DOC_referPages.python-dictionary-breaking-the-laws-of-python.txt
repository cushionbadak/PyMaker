<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/44185741/boolean-keys-with-other-data-types-in-dictionary">Boolean keys with other data types in dictionary</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>When I do:</p>
<pre><code>&gt;&gt;&gt; d={True:'yes',1:'no',1.0:'maybe'}
&gt;&gt;&gt; d
</code></pre>
<p>I receive an output of:</p>
<pre><code>&gt;&gt;&gt; {True:'maybe'}
</code></pre>
<p>It's not only that some of my keys are deleted but also the value it was holding changed. </p>
<p>Why is True given priority over another bool keys?</p>
</div>
<div class="post-text" itemprop="text">
<p>The three keys True, 1 and 1.0 compare equal to each other and all have the same <a href="https://docs.python.org/3/library/functions.html?highlight=hash#hash" rel="nofollow noreferrer">hash</a> (try <code>hash(True)</code>, <code>hash(1)</code> and <code>hash(1.0)</code> in the Python REPL), so they all correspond to the same slot in the dictionary. The last value to be set wins - 'maybe' in this case.</p>
<p>Note that if the keys weren't equal, they would be stored separately even if they hashed to the same slot in the dictionary.</p>
</div>
<span class="comment-copy">Interesting or not, it's a duplicate</span>
<span class="comment-copy">Why was my comment deleted?</span>
<span class="comment-copy">May be they should be hashing the type too</span>
<span class="comment-copy">@sureshvv: That would add overhead, and break the equality relationship seen outside of <code>dict</code>. Making a special case for <code>dict</code> would be confusing. The OP could always make the <code>dict</code> with a <code>tuple</code> key, where the first element is the value and the second the type if they really need that.</span>
<span class="comment-copy">I don't think that would be desirable in general.</span>
<span class="comment-copy">Equal values will always have the same hash. It's more important that these values are equal than that their hashes are equal. The root of the surprising behavior here is that <code>True == 1</code></span>
<span class="comment-copy">It's essentially doing <code>d = {}; d[True] = 'yes'; d[1] = 'no'; d[1.0] = 'maybe'</code>. So it's keeping the first key (because they're all equal), but always doing the assignment, so you get the last value.</span>
