<div class="post-text" itemprop="text">
<p>I want to count the number of calls of the function <code>f</code> inside of <code>inc</code>. How should I modify the function <code>main</code> to do it?</p>
<p>I have this code:</p>
<pre><code>def inc(f):
    f()
    f()

def main():
    a = 0
    def f():
        a += 1
    inc(f)
    print(a)  # should print 2

main()
</code></pre>
<p>But it leads to the error:</p>
<pre><code>Traceback (most recent call last):
  File "main.py", line 11, in &lt;module&gt;
    main()
  File "main.py", line 9, in main
    inc(f)
  File "main.py", line 2, in inc
    f()
  File "main.py", line 8, in f
    a += 1
UnboundLocalError: local variable 'a' referenced before assignment
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def inc(f):
    f()
    f()

def main():
    a = 0
    def f():
        nonlocal a
        a += 1
    inc(f)
    print(a)  # should print 2

main()
</code></pre>
<p>Make <strong>a</strong> nonlocal in f()</p>
</div>
<div class="post-text" itemprop="text">
<p>The usual way is to create an attribute <code>func.invocations</code> for your function <code>func</code>, like</p>
<pre><code>def func(a):
    func.invocations += 1
    return a + 1

func.invocations = 0
</code></pre>
<p>and use it like</p>
<pre><code>func(1)    # 2
func(10)   # 11
func.invocations  # 2
</code></pre>
<p>To make the whole thing more reusable and readable you can also create a decorator <code>counter</code> that allows you to count the number of calls on any function you like:</p>
<pre><code>import functools

def counter(fn):
    @functools.wraps(fn)
    def helper(*args, **kargs):
        helper.invocations += 1
        return fn(*args, **kargs)
    helper.invocations = 0
    return helper
</code></pre>
<p>and then use it like</p>
<pre><code>@counter
def func(a):
    return a + 1

func(1)    # 2
func(10)   # 11
func.invocations # 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are looking for a simple solution, a <em>global</em> variable would do the trick.</p>
<pre><code>reps = 0

def f():
    global reps 
    reps  += 1
    # do your func stuff here

f()
f()
f()
f()  # called f() 4 times
print(reps)  # -&gt; 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You try this: </p>
<pre><code>def inc(f):    
    f()    
    f() 


def main():    
    a = 0     
    def f():     
        f.counter += 1    
    f.counter =0    
    inc(f)     
    print(f.counter) 


main()
</code></pre>
<p>How functions are objects in python you can create an attribute to count the number of call to that function </p>
</div>
<span class="comment-copy">just declare <code>a</code> nonlocal (inside <code>f</code>).</span>
<span class="comment-copy">@PaulPanzer Please, provide it as a full answer.</span>
<span class="comment-copy">one hacky way would be use the default mutable arg, like <code>def inc(a=itertools.count()): print(a)</code></span>
<span class="comment-copy">relevant <a href="https://stackoverflow.com/questions/48673304/make-a-function-behave-differently-between-first-and-subsequent-calls" title="make a function behave differently between first and subsequent calls">stackoverflow.com/questions/48673304/â€¦</a></span>
<span class="comment-copy">@Fomalhaut seems someone else has done it for me - which is fine. Btw., depending on what exactly you want you also could remove <code>a</code> completely and <code>cProfile.run('main()')</code></span>
<span class="comment-copy">this is overly complicated for no reason. Take a look at my answer.</span>
<span class="comment-copy">Please do not advise to use <code>global</code> when a <code>nonlocal</code> would be enough. Or at least edit your answer to explain that <code>nonlocal</code> could be used here.</span>
<span class="comment-copy">@SergeBallesta Thankyou.I have made the changes. Can you please state the difference between what I did earlier and now?</span>
<span class="comment-copy">@NegiBabu: it doen't change much in that code. But in a larger script a global is directly accessible to the whole program while a nonlocal is still constraint in the enclosing block. Making something global is generally or good immediate solution that later makes evolutions harder. Best practices recommend to avoid it if you can.</span>
<span class="comment-copy">Using nonlocal or global variables is not a nice solution that may turn around and bite you if your code gets more complicated than this simple example.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer">functools.wraps</a> makes the wrapped function a little more recognizable.</span>
<span class="comment-copy">I have added <code>functools.wraps</code> to the code example.</span>
<span class="comment-copy">Youre just re-iterating what is already contained in another answer.</span>
