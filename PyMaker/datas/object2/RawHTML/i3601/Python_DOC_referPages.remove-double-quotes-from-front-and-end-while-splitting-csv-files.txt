<div class="post-text" itemprop="text">
<p>I work with large CSV files. I was able to put up a code which splits the files into small chunks: </p>
<pre><code>import csv

divisor = 500000

outfileno = 1
outfile = None

with open('testM.txt', 'r') as infile:
    infile_iter = csv.reader(infile)
    header = next(infile_iter)
    for index, row in enumerate(infile_iter):
        if index % divisor == 0:
            if outfile is not None:
                outfile.close()
            outfilename = 'big-{}.csv'.format(outfileno)
            outfile = open(outfilename, 'w')
            outfileno += 1
            writer = csv.writer(outfile)
            writer.writerow(header)
        writer.writerow(row)

    if outfile is not None:
        outfile.close()
</code></pre>
<p>The problem I'm facing is that the first csv which is getting generated after the split has double quotes in the beginning and end for all its lines. Rest of the CSV files are not having this double quote issue. Also, the original file does not have any double quotes.</p>
<blockquote>
<p>Example, the first csv file looks something like below:<br/>
  "abc,ghhh,123,fgfg"<br/>
  "hjfhj,12312,adfa,6765"</p>
</blockquote>
<p>This causes an issue as I have to run few more tests over them and the first file is causing the issue while rest are just fine. It would be helpful if someone can help me modify this code to resolve my issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>A quick go through the CSV module will have answer to your question.</p>
<blockquote>
<p><a href="https://docs.python.org/3/library/csv.html#csv.QUOTE_NONE" rel="nofollow noreferrer">https://docs.python.org/3/library/csv.html#csv.QUOTE_NONE</a></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can fix the input and make the logic much simpler using Pandas.</p>
<pre><code>import csv
import pandas as pd

filename='big-'
for count, chunk in enumerate(pd.read_csv(filename, delimiter=",", quoting=csv.QUOTE_NONE, encoding='utf-8', iterator=True, chunksize=50000)):
    #fix the 1 and N columns to remove the doublequotes char
    chunk[chunk.columns[0]]=chunk[chunk.columns[0]].str[1:]
    chunk[chunk.columns[-1]]=chunk[chunk.columns[-1]].str[:-1]
    #change these columns datatypes if necessary/useful
    #put in the rest of your logic here (saving files etc..)
    chunk.to_csv(file_name+'{}'.format(count))
</code></pre>
<p>*Warning I haven't tested the whole solution.  So your mileage may vary.</p>
<p>Thanks to @code-mocker for the Quote_None piece.</p>
</div>
<span class="comment-copy">Please format your questions appropriately.</span>
<span class="comment-copy">It looks like the reader can not parse the fields in the CSV and handles a whole line as one field. What is your input data? Can you inspect the value of <code>row</code> in every iteration?</span>
<span class="comment-copy">This will only mask an underlying problem and fail when the data requires quoting.</span>
