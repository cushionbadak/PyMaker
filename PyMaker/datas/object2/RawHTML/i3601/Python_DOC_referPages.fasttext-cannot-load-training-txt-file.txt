<div class="post-text" itemprop="text">
<p>I am trying to train a fasttext classifier in windows using fasttext python package. I have a utf8 file with lines like </p>
<pre><code>__label__type1 sample sentence 1
__label__type2 sample sentence 2
__label__type1 sample sentence 3 
</code></pre>
<p>When I run</p>
<p><code>fasttext.supervised('data.train.txt','model', label_prefix='__label__', dim=300, epoch=50, min_count=1, ws=3, minn=4, pretrained_vectors='wiki.simple.vec')</code></p>
<p>I got the following error</p>
<pre><code>File "fasttext\fasttext.pyx", line 256, in fasttext.fasttext.supervised (fasttext/fasttext.cpp:7265)
  File "fasttext\fasttext.pyx", line 182, in fasttext.fasttext.train_wrapper (fasttext/fasttext.cpp:5279)
ValueError: fastText: cannot load data.train.txt
</code></pre>
<p>And when I check the file types in my directory, I got</p>
<pre><code>__pycache__:     directory
data.train.txt:  UTF-8 Unicode text, with very long lines, with CRLF line terminators
train.py:        Python script, ASCII text executable, with CRLF line terminators
wiki.simple.vec: UTF-8 Unicode text, with very long lines, with CRLF line terminators
</code></pre>
<p>Also, when I try to train the same the classifier with the same training file in MacOs it works fine. I am trying to understand why that txt file cannot be read.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>TL;DR: <strong>Use the <a href="https://docs.python.org/2/library/os.path.html" rel="nofollow noreferrer">os module</a> to safely construct paths, especially in Python 2</strong></p>
<p>The error indicated that the file can't be loaded. Since the only difference between your environments is the operating system, then the clue is that you're not properly locating the file, because each OS handles paths differently. I feel this is a mistake most python programmers make at least once, because it's unexpected. </p>
<p>You can hardcode paths, but then you'll have a problem down the road if you ever use things cross platform. In my case, sometimes I develop something quickly in Windows, but then deploy large scale on a *nix platform.</p>
<p>I suggest instead getting used to using the os module, because it will work across platforms. said in a comment that they had a path of "myfolder\nfolder\tfolder"; by trying to construct their own strings for a path instead of using the os module.. on windows even if the folder's didn't start with the newline \n and the tab \t it still wouldn't have worked, because windows paths need to escape the slash (\). Use os, and you don't have to know that. </p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getcwd()
'C:\\Python27'
&gt;&gt;&gt; os.path.abspath(os.sep)
'C:\\'
&gt;&gt;&gt; os.chdir(os.path.join(os.path.abspath(os.sep, "Users", "Jeff"))
&gt;&gt;&gt; os.getcwd()
'C:\\Users\\Jeff'
</code></pre>
<p>Usually, you'll be using relative paths from your project root, not absolute paths. Those are easier, the root of the current OS is what's a little trickier (you can find that answer <a href="https://stackoverflow.com/questions/12041525/a-system-independent-way-using-python-to-get-the-root-directory-drive-on-which-p">here</a>)</p>
<p>(I'm providing the full answer as we figured out from the comments)</p>
<p>Edit: Maybe python 3 has something <a href="https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f" rel="nofollow noreferrer">this link</a> says is better than os, <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">pathlib</a>. I've never used python 3 so I can't say. </p>
</div>
<div class="post-text" itemprop="text">
<p>It took me a little time to create an environment to test your code. But what I did and worked for me in Windows was installing fastText in Cygwin. I hope this answer, somehow be useful for someone with a similar issue.</p>
<blockquote>
<p>Environment</p>
</blockquote>
<ul>
<li><p>Winwdows 10</p></li>
<li><p>CYGWIN_NT-10.0 DESKTOP-RR909JI 2.10.0(0.325/5/3) 2018-02-02 15:16 x86_64 </p></li>
<li><p>gcc-g++: 7.3 | gcc-core 7.3 </p></li>
<li><p>Python 2.7 | Python2-Cython  0.25.2 | python2pip | Python2-devel</p></li>
<li><p>pip install fastText</p></li>
</ul>
<blockquote>
<p>Files</p>
</blockquote>
<pre><code>user@DESKTOP-RR909JI ~/projects
$ file *
data.txt:         ASCII text
data.train.txt:   Big-endian UTF-16 Unicode text
fasttext_ie.py:   Python script, ASCII text executable
model.bin:        data
wiki.simple.vec:  UTF-8 Unicode text, with very long lines 
</code></pre>
<blockquote>
<p>fastest_ie.py</p>
</blockquote>
<pre><code>#!/usr/bin/python
import fasttext

fasttext.supervised('data.txt','model', label_prefix='__label__', dim=300, epoch=50, min_count=1, ws=3, minn=4, pretrained_vectors='wiki.simple.vec')
</code></pre>
<p>I've downloaded the pre-trained word vectors (wiki.simple.vec) <a href="https://github.com/facebookresearch/fastText/blob/master/pretrained-vectors.md" rel="nofollow noreferrer">from here</a>.
I've copied your input example in <code>data.txt</code> and made a version with UTF-16 <code>data.train.txt</code> </p>
<p>After executing your code snippet, it took a while but a file was generated, but it only happened with the ASCII text file:</p>
<pre><code>user@DESKTOP-RR909JI ~/projects
$ ls -ltrh model.bin
-rw-r--r-- 1 user user 129M jun. 28 00:56 model.bin
</code></pre>
<p>it has lots of strings:</p>
<pre><code>qateel
olympiques
lesothosaurus
delillo
satrapi
conferencing
numan
echinodermata
haast
tangerines
duat
vesey
rotaviruses
velox
chepstow
capitale
rock/pop
belasco
sardanapalus
jadis
macintyre
</code></pre>
<blockquote>
<p>When trying with UTF-16</p>
</blockquote>
<p>It didn't generate the file, but also didn't finished the process, it just kept running without finalization.</p>
<p>So we can say, it failed.</p>
<p>Despite fastText says <a href="https://github.com/facebookresearch/fastText/blob/master/README.md" rel="nofollow noreferrer">UTF-8 it's supported</a>:</p>
<blockquote>
<p>where data.txt is a training file containing UTF-8 encoded text. By
  default the word vectors will take into account character n-grams from
  3 to 6 characters. At the end of optimization the program will save
  two files: model.bin and model.vec. model.vec is a text file
  containing the word vectors, one per line. model.bin is a binary file
  containing the parameters of the model along with the dictionary and
  all hyper parameters. The binary file can be used later to compute
  word vectors or to restart the optimization.</p>
</blockquote>
<p>It could happend that version I'm installing through Cygwin is somehow, different.</p>
<p>And also after reading <a href="https://stackoverflow.com/questions/11303405/force-encode-from-us-ascii-to-utf-8-iconv">this question</a> in stackoverflow I would like to ask: Have you tried changing the file to ASCII and test what happen?</p>
<p>All my files were in the same root directory.</p>
<p>I don't know fastText but I wanted to execute your code, which works. I had issues with the gcc libraries, I had to install same version for g++ and core.</p>
</div>
<span class="comment-copy">Not sure what maybe causing this behavior but fasttext was only built for Linux/MacOS. It requires good C++ support. Check the official <a href="https://github.com/facebookresearch/fastText#requirements" rel="nofollow noreferrer">github repo</a>. You can also check out this <a href="https://stackoverflow.com/questions/38817753/make-error-2-on-windows-when-building-fasttext">answer</a></span>
<span class="comment-copy">Can you add more code and examples (amybe upload your files as well)? I've tried it with wiki.simple.vec and a sample of data.train.txt and it works perfectly: &gt;&gt;&gt; fasttext.supervised('data.train.txt','model', label_prefix='<b>label</b>', dim=300, epoch=50, min_count=1, ws=3, minn=4, pretrained_vectors='wiki.simple.vec') &lt;fasttext.model.SupervisedModel object at 0x05CE63D0&gt;</span>
<span class="comment-copy">Also, if you're not used to Windows, are you sure the cwd is pointing to the correct place? You could try using os.path.join() and constructing a full, absolute path to your .txt file and see if that's still the problem. Python isn't natively a part of Windows the way it is modern MacOS, so it might behave differently than you are used to.  <a href="https://techibee.com/python/get-current-directory-using-python/2790" rel="nofollow noreferrer">techibee.com/python/get-current-directory-using-python/2790</a></span>
<span class="comment-copy">@user8212173, thank you, I know it is not supported officially, took the wheel from <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="nofollow noreferrer">lfd.uci.edu/~gohlke/pythonlibs</a> .it successfully built in my windows machine</span>
<span class="comment-copy">If you need to use a windows path that includes \n and \t (or \b or \a, or a few others), here are two ways to do it: Either double the backslashes (<code>"myfolder\\nfolder\\tfolder"</code>) or use a "raw" string with an "r" in front of the string constant (<code>r"myfolder\nfolder\tfolder"</code>)</span>
<span class="comment-copy">Seems reasonable. But we don't know the environment of the user. I've created something similar with Cygwin and it works without absolute paths.</span>
<span class="comment-copy">@Miguel Your comment makes no sense. I never said he should use absolute paths. My answer says you usually shouldn't. My answer is completely independent of the user environment, that's the point of the os module. The original poster specifically said in a comment that they had a path of "myfolder\nfolder\tfolder"; On windows this fails not because the folders start with the newline \n and the tab \t they fail because windows paths need to escape the slash (\). Use os, and you don't have to know that. I'll add this example to my answer.</span>
<span class="comment-copy">Well, actually I was trying to say, that you do not define the path if the file is in the root folder, that is O.S independent.</span>
