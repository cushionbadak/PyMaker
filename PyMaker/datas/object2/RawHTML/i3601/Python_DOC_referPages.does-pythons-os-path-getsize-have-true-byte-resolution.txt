<div class="post-text" itemprop="text">
<p>File systems rarely allow files to be arbitrary numbers of bytes long, instead preferring to pad them to fit in a certain number of blocks. Python's os.path.getsize() is documented to return a size in units of bytes, but I am not sure whether or not it is rounded by the OS (linux, in my case) or filesystem, to a block size. For my application it is necessary that I know the exact number of bytes that I will be able to read out of a large file (~1GB). What guarantees are made about this? </p>
</div>
<div class="post-text" itemprop="text">
<p>No guarantees are made by Python. The <code>os.path.getsize()</code> function returns the  <a href="https://docs.python.org/3/library/os.html#os.stat" rel="nofollow noreferrer"><code>st_size</code> field of a <code>os.stat()</code> call</a>. This is a direct call to the <a href="https://en.wikipedia.org/wiki/Stat_(system_call)" rel="nofollow noreferrer"><code>stat</code> system call</a>.</p>
<p>All the documentation for <code>stat</code> simply names <code>st_size</code> as the file size, in bytes.</p>
<p>On my Debian test system <code>stat</code> gives true filesizes:</p>
<pre><code>$ stat -fc %s .   # fs block size
4096
$ head -c 2048 &lt; /dev/urandom &gt; 2kb
$ head -c 6168 &lt; /dev/urandom &gt; 6kb
$ head -c 12345 &lt; /dev/urandom &gt; 12andabitkb
$ ls --block-size=1 -s *kb     # block use in bytes
16384 12andabitkb   4096 2kb   8192 6kb
$ ls --block-size=4K -s *kb    # block count per file
4 12andabitkb  1 2kb  2 6kb
$ python3 -c 'import os, glob; print(*("{:&lt;11} {}".format(f, os.path.getsize(f)) for f in glob.glob("*kb")), sep="\n")'
2kb         2048
12andabitkb 12345
6kb         6168
</code></pre>
</div>
<span class="comment-copy">This depends on your filesystem. Some filesystems (like procfs and sysfs) don't return a nonzero size in stat data at all. If you want complete certainty, open the file, <code>seek()</code> to the end, and use <code>tell()</code> to give you the current offset. That said, for a regular file on commonly-available filesystems used for regular (not generated, not virtual, not socket, not block device) files, <code>os.path.getsize()</code> will return what you're looking for.</span>
