<div class="post-text" itemprop="text">
<p>Why does running this code in the interactive console print output?</p>
<pre><code>&gt;&gt;&gt; def a():
...   return 1
...
&gt;&gt;&gt; for i in range(3):
...   a()
...
1
1
1
&gt;&gt;&gt;
</code></pre>
<p>I would expect no output. Where is this behaviour documented?</p>
</div>
<div class="post-text" itemprop="text">
<p>In interactive mode, the result of any expression-statement is <em>printed</em> if it is not <code>None</code>. As stated in the <a href="https://docs.python.org/2/reference/simple_stmts.html#expression-statements" rel="nofollow noreferrer">doc</a>.</p>
<blockquote>
<p>Expression statements are used (mostly interactively) to compute and write a value [...]</p>
<p>In interactive mode, if the value is not <code>None</code>, it is converted to a
  string using the built-in <code>repr()</code> function and the resulting string is
  written to standard output</p>
</blockquote>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; 1 + 1
2
&gt;&gt;&gt; a()
1
&gt;&gt;&gt; None # This expression is not printed
&gt;&gt;&gt;
</code></pre>
<p>This is true for a expression statement in a loop as well.</p>
<pre><code>&gt;&gt;&gt; for i in range(3):
&gt;&gt;&gt;     a()
1
1
1
</code></pre>
<p>Although, this is specific to the interactive shell. If you run you code as a script, nothing will be printed.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you use the console/interactive prompt/IDLE/shell/Python shell/potato, the values returned would be printed, and no <code>print()</code> required. This is why you can do <code>&gt;&gt;&gt; 1+1</code> in the shell and it will say <code>2</code>, even though if you create a program with <code>1+1</code> it will run with no errors or output.</p>
<p>And a little detail: the value is not printed, its <code>repr</code> is. This is why in the shell this happens:</p>
<pre><code>&gt;&gt;&gt; print("something")
something
&gt;&gt;&gt; "something"
"something"
&gt;&gt;&gt; 'a string with "quotes"'
'a string with "quotes"'
</code></pre>
<p>You can do a quick test of this:</p>
<pre><code>&gt;&gt;&gt; class Test:
...     def __str__(self): return "str"
...     def __repr__(self): return "repr"

&gt;&gt;&gt; test_instance = Test()
&gt;&gt;&gt; test_instance
repr
&gt;&gt;&gt; print(test_instance)
str
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This behaviour is documented <a href="https://docs.python.org/3/tutorial/appendix.html#tut-interac" rel="nofollow noreferrer">here</a>; you are running the Python shell in interactive mode.</p>
<p>Note, quoted below for posterity:</p>
<blockquote>
<p>All error messages are written to the standard error stream; <strong>normal output from executed commands is written to standard output</strong>.</p>
</blockquote>
</div>
<span class="comment-copy">What are you confused about? The fact that you get output to the console? It should not do so without <code>print</code> statements</span>
<span class="comment-copy">i ran your script, and it is giving me no output.</span>
<span class="comment-copy">why would you expect something different. you are running the same function 3 times</span>
<span class="comment-copy">Just to confirm, by "console" you mean "interactive prompt", right? The thing with the "&gt;&gt;&gt;" prefix?</span>
<span class="comment-copy">Well, you would get no output if the return value from a() is assigned to some variable or used in any other way ...</span>
<span class="comment-copy">I found this as well, but I would take "normal output" to mean <i>output</i>, not the results of expressions.</span>
<span class="comment-copy">It's awkwardly worded, sure - I think I'd interpret returning as an output to the calling function, which here is the Python shell, but it's definitely ambiguous</span>
