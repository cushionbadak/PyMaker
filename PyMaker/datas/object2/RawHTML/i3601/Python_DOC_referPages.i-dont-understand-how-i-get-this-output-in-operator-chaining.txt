<div class="post-text" itemprop="text">
<p>As far as I know the in operator in python can't be chained or at least I couldn't find any info on it, here is my problem</p>
<p>Here is the code</p>
<pre><code>arr = [1, True, 'a', 2]
print('a' in arr in arr) // prints False
print(('a' in arr) in arr) // prints True
</code></pre>
<p>What I don't understand is the first print, I know in the second the first in returns True and then it check if True is in arr, but what about the first one? Does it check if 'a' is in arr and then if arr is in arr?</p>
</div>
<div class="post-text" itemprop="text">
<p>The premise is false; the <code>in</code> operator <em>can</em> be chained. See <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">Comparisons</a> in the docs:</p>
<pre><code>comp_operator ::=  "&lt;" | "&gt;" | "==" | "&gt;=" | "&lt;=" | "!="
                   | "is" ["not"] | ["not"] "in"
</code></pre>
<p>So, just as with any other chained comparison, <code>a in b in c</code> is equivalent to <code>(a in b) and (b in c)</code> (except that <code>b</code> is only evaluated once.</p>
<p>The reason <code>'a' in arr in arr</code> is false is that <code>arr in arr</code> is false. The only time <code>x in x</code> is true is if x is type that does substring comparisons for <code>__contains__</code> (like <code>str</code> or <code>bytes</code>), or if it's a container that actually contains itself (like <code>lst = []; lst.append(lst)</code>).</p>
</div>
<span class="comment-copy">Yes, the <code>in</code> operator <i>can indeed be chained</i>, see the <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">docs</a>. This is definitely a duplicate then...</span>
<span class="comment-copy"><code>a in b in c</code> is equivalent to <code>(a in b) and (b in c)</code>, just like any other operator chaining.</span>
<span class="comment-copy">Not worth to create an answer for this one, the docs explain it quite clearly "Formally, if a, b, c, …, y, z are expressions and op1, op2, …, opN are comparison operators, then a op1 b op2 c ... y opN z is equivalent to a op1 b and b op2 c and ... y opN z, except that each expression is evaluated at most once."</span>
<span class="comment-copy">I knew about chaining comparison operator but I don't know why I didn't think the operator in was one of them, but now it all makes sense, thank you very much</span>
<span class="comment-copy">@AntonKahwaji Well, it’s not exactly something you’d naturally reach for… in fact, I don’t even think it was added intentionally; it just comes for free if you’re going to make <code>x &lt;= y &lt; z</code> work unless you go out of your way to make it illegal. (And that would make the implementation and the rules for humans to learn slightly more complicated. They didn’t even ban <code>x &lt; y &gt; z</code>, which is more useless and confusing than <code>x in y in z</code>.)</span>
