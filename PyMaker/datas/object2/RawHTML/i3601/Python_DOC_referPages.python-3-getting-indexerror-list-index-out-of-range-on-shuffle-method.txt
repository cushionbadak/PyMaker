<div class="post-text" itemprop="text">
<p>I'm building a blackjack command line game and I've run into a snag. The shuffle feature on my deck class object keeps coming up with IndexError: list index out of range on line 29.  It is a sporadic bug, id say about 50% of the time it comes up. 
Here is the code:</p>
<pre><code>import random

#class constructor for cards
class card:
    def __init__(self, suit, card_name, card_value):
        self.suit = suit
        self.card_name = card_name
        self.card_value = card_value

#class constructor for the deck
class deck:
    def __init__(self):
        self.current_deck = []
        self.suits = ['hearts', 'diamonds','spades','clubs']
        self.cards = ['ace','2','3','4','5','6','7','8','9','10','jack','queen','king']
    def initialize(self):
        for i in range(len(self.suits)):
            for j in range(len(self.cards)):
                if (self.cards[j]=='2' or self.cards[j]=='3' or self.cards[j]=='4' or self.cards[j]=='5' or self.cards[j]=='6' or self.cards[j]=='7' or self.cards[j]=='8' or self.cards[j]=='9'):
                    self.current_deck.append(card(self.suits[i], self.cards[j], int(self.cards[j])))
                elif (self.cards[j]=='10' or self.cards[j]=='jack' or self.cards[j]=='queen' or self.cards[j]=='king'):   
                    self.current_deck.append(card(self.suits[i], self.cards[j], 10))
                else:
                    self.current_deck.append(card(self.suits[i], self.cards[j], 11))
    def shuffle(self):
        for card in self.current_deck:
            j = random.randint(0, len(playing_deck.current_deck))
            temp = card
            card = self.current_deck[j]
            self.current_deck[j] = temp

class dealer:
    def __init__(self):
        self.money = 10000
        self.hand = []
    def hit(self, deck_):
        self.hand.append(deck_.pop())
    def deal(self, deck_, player_):
        self.hand.append(deck_.pop())

class player: 
    def __init__(self, name):
        self.name = name
        self.money = 200
        self.hand = []
    def hit(self, deck_):
        self.hand.append(deck_.pop())

josh = player('josh')

playing_deck = deck()

playing_deck.initialize()
playing_deck.shuffle()

josh.hit(playing_deck.current_deck)


for i in range(len(playing_deck.current_deck)):
    print(vars(playing_deck.current_deck[i]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're calling <a href="https://docs.python.org/3/library/random.html#random.randint" rel="nofollow noreferrer"><code>randint</code></a>:</p>
<blockquote>
<p>Return a random integer <em>N</em> such that <code>a &lt;= N &lt;= b</code>. Alias for <code>randrange(a, b+1)</code>.</p>
</blockquote>
<p>If it's not obvious why this is a problem, let's use a much smaller example:</p>
<pre><code>&gt;&gt;&gt; a = ['x', 'y']
&gt;&gt;&gt; len(a)
2
&gt;&gt;&gt; a[0]
'x'
&gt;&gt;&gt; a[1]
'y'
&gt;&gt;&gt; a[2]
IndexError: list index out of range
&gt;&gt;&gt; randint(0, 2)
1
&gt;&gt;&gt; randint(0, 2)
2 # oops
</code></pre>
<hr/>
<p>This is why Python usually uses half-open ranges, where <code>a &lt;= N &lt; b</code>, instead of <code>a &lt;= N &lt;= b</code>. And why you normally want to use <a href="https://docs.python.org/3/library/random.html#random.randrange" rel="nofollow noreferrer"><code>randrange</code></a> instead of <code>randint</code>.</p>
<hr/>
<p>Or, even more often, when you find yourself reaching for <code>randint</code> or <code>randrange</code>, there's a good chance you wanted <code>shuffle</code> (which will randomly reorder the whole list in one go), or <code>choice</code> (which will pick a value out of a list, without needing to first pick an index), etc., so skim through the docs to see if what you want is already written.</p>
</div>
<span class="comment-copy">Why not use <code>random.shuffle</code>?</span>
<span class="comment-copy">@Aran-Fey Well, <code>random.shuffle</code> actually randomizes the order; his function just swaps each card one time. If you're trying to simulate some physical process, that might make more sense.</span>
<span class="comment-copy">Still learning the ins and outs of python so didn't know about the random.shuffle. I just assumed i had to do a standard Fisher-Yates shuffle.</span>
<span class="comment-copy">thanks that fixed problem.  in the future when working with python i will just use shuffle to make it easier.  I feel kind of dumb now that i asked such an obvious question....lul</span>
