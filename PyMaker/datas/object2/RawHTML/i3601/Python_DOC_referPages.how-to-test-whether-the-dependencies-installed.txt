<div class="post-text" itemprop="text">
<p>I've been learning <code>PyTorch</code> for deep learning recently.
Using <em>anaconda</em> I found some problems when I ran the program.
For example, I encountered the following import error</p>
<blockquote>
<p>"no module named kiwisolver"</p>
</blockquote>
<p>when my program imported <code>matplotlib</code>. It is fixed, but such error is very frustrating. The program runs for a long time.</p>
<p>Is there any way to check whether all the required dependencies are installed?</p>
</div>
<div class="post-text" itemprop="text">
<p>Depending on how your program is structured...</p>
<p>Many Python programs use the <a href="https://stackoverflow.com/q/419163/25507"><code>if __name__ == "__main__":</code> idiom</a> so that they don't immediately execute code.  This lets you import the code without it immediately running.</p>
<p>For example, if you have my_py_torch.py, then if you run <code>python</code> to <a href="https://docs.python.org/3/tutorial/interpreter.html" rel="nofollow noreferrer">launch the Python interpreter in interactive mode</a>, you can import your code:</p>
<pre><code>import my_py_torch
</code></pre>
<p>Importing your code will process any imports, execute any top-level code, and define any functions and classes, but, as long as you use the <code>if __name__ == "__main__":</code> idiom, it won't actually run the (long-running) code.  That's typically enough to let you know if you have major issues like syntax errors, bad imports, or missing dependencies.</p>
<p>Code can still circumvent this: you may have functions or methods that only import modules locally (when they're actually run), or code may wrap imports in <code>try</code> / <code>except</code> blocks to handle missing dependencies then later throw an error if the dependency is used.  So it's not foolproof, but it can be a useful test.</p>
</div>
