<div class="post-text" itemprop="text">
<p>I'm unclear as to what this one paragraph in the python tutorial documentation is saying.</p>
<p>(found here: <a href="https://docs.python.org/3/tutorial/classes.html#method-objects" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/classes.html#method-objects</a>)</p>
<blockquote>
<p>When an instance attribute is referenced that isnâ€™t a data attribute, its class is searched. If the name denotes a valid class attribute that is a function object, a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object. When the method object is called with an argument list, a new argument list is constructed from the instance object and the argument list, and the function object is called with this new argument list.</p>
</blockquote>
<p>From my current understanding, I think what it's saying is that whenever you reference an attribute of an instance of a class like in the 8th line of this little snippet here:</p>
<pre><code>class MyClass():
    attribute = "I am an attribute"

    def func(self):
        return "I am a function"

instance = MyClass()
print(instance.func())
</code></pre>
<p>When python sees</p>
<pre><code>instance.func()
</code></pre>
<p>what it's really doing isn't looking for a method <code>func</code> "owned by" <code>instance</code>, it's looking for a function <code>func</code> owned by <code>MyClass</code>, then calling that function owned by <code>MyClass</code> with <code>instance</code> as the <code>self</code> parameter.</p>
<p>so basically it's the same thing as:</p>
<pre><code>MyClass.func(instance)
</code></pre>
<p>I feel like I'm missing something subtle though. I don't understand what it means by</p>
<blockquote>
<p>... a method object is created by packing (pointers to) the instance object and the function object just found together in an abstract object: this is the method object.</p>
</blockquote>
<p>What is an abstract object?</p>
<p>What does it mean to "pack" a pointer?</p>
<p>What does it mean to "pack" multiple pointers?</p>
<p>Why even have a method object for <code>instance</code> if python is just going to look at <code>MyClass</code>'s function object?</p>
<p>Why doesn't python just make methods be "owned by" their instances? Why even go through the whole process of calling <code>MyClass</code>'s <code>func</code> instead of <code>instance</code>'s <code>func</code>?</p>
<p>Why did the designers of the language decide to make it be this way?</p>
</div>
<div class="post-text" itemprop="text">
<p>"Abstract object" means that there isn't necessarily a real Python object being created, it's just a way of describing what's happening behind the scenes as if there were some object being created.</p>
<p>"packing" means that it's just collecting these things together into this abstract object.</p>
<p>So when you write</p>
<pre><code>instance.func()
</code></pre>
<p>it internally creates something that represents the function combined with the instance. When this is called, the method function is called as you described, with the instance passed as the first argument (conventionally named <code>self</code>).</p>
<p>Why do this? So that you can pass these things around:</p>
<pre><code>foo = instance.func
foo()
</code></pre>
<p>The value of <code>foo</code> contains that abstract object that represents the function combined with the instance.</p>
<p>Methods are owned by classes so that all instances of a class automatically get the same method. This is the essence of OO programming and the basis of inheritance among classes.</p>
</div>
<span class="comment-copy">this is a related if you're interested. It's a functional implemention of class system in python (unanswered) <a href="https://stackoverflow.com/q/50769327/7004463">stackoverflow.com/q/50769327/7004463</a></span>
<span class="comment-copy">From my knowledge, python is written in C, so what would that abstract object look like in C? Does it have a more literal meaning when you're talking about it at a lower level?</span>
