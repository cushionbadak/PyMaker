<div class="post-text" itemprop="text">
<p>I'm trying to figure out how to make iterator, below is an iterator that works fine. </p>
<pre><code>class DoubleIt:

    def __init__(self):
        self.start = 1

    def __iter__(self):
        self.max = 10
        return self

    def __next__(self):
        if self.start &lt; self.max:
            self.start *= 2
            return self.start
        else:
            raise StopIteration

obj = DoubleIt()
i = iter(obj)
print(next(i))
</code></pre>
<p>However, when I try to pass 16 into the second argument in iter() (I expect the iterator will stop when return 16)</p>
<pre><code>i = iter(DoubleIt(), 16)
print(next(i))
</code></pre>
<p>It throws TypeError: iter(v, w): v must be callable
Therefore, I try to do so.</p>
<pre><code>i = iter(DoubleIt, 16)
print(next(i))
</code></pre>
<p>It returns &lt;<strong>main</strong>.DoubleIt object at 0x7f4dcd4459e8&gt;. Which is not I expected.
I checked the website of programiz, <a href="https://www.programiz.com/python-programming/methods/built-in/iter" rel="noreferrer">https://www.programiz.com/python-programming/methods/built-in/iter</a>
Which said that callable object must be passed in the first argument so as to use the second argument, but it doesn't mention can User defined object be passed in it in order to use the second argument.</p>
<p>So my question is, is there a way to do so? Can the second argument be used with the "Self defined Object"?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer">documentation</a> could be a bit clearer on this, it only states</p>
<blockquote>
<p>iter(<em>object</em>[, <em>sentinel</em>])</p>
<p>...</p>
<p>The iterator created in this case will call <em>object</em> with no arguments
  for each call to its <code>__next__()</code> method; if the value returned is equal to sentinel, <code>StopIteration</code> will be raised, otherwise the value will be returned.</p>
</blockquote>
<p>What is maybe not said perfectly clearly is that what the iterator yields is whatever the callable returns. And since your callable is a class (with no arguments), it returns a new instance of the class every iteration.</p>
<p>One way around this is to make your class callable and delegate it to the <code>__next__</code> method:</p>
<pre><code>class DoubleIt:

    def __init__(self):
        self.start = 1

    def __iter__(self):
        return self

    def __next__(self):
        self.start *= 2
        return self.start

    __call__ = __next__

i = iter(DoubleIt(), 16)
print(next(i))
# 2
print(list(i))
# [4, 8]
</code></pre>
<p>This has the dis-/advantage that it is an infinite generator that is only stopped by the sentinel value of <code>iter</code>.</p>
<p>Another way is to make the maximum an argument of the class:</p>
<pre><code>class DoubleIt:

    def __init__(self, max=10):
        self.start = 1
        self.max = max

    def __iter__(self):
        return self

    def __next__(self):
        if self.start &lt; self.max:
            self.start *= 2
            return self.start
        else:
            raise StopIteration

i = iter(DoubleIt(max=16))
print(next(i))
# 2
print(list(i))
# [4, 8, 16]
</code></pre>
<p>One difference to note is that <code>iter</code> stops when it encounters the sentinel value (and does not yield the item), whereas this second way uses <code>&lt;</code>, instead of <code>&lt;=</code> comparison (like your code) and will thus yield the maximum item.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an example of a doubler routine that would work with the two argument mode of <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter</code></a>:</p>
<pre><code>count = 1
def nextcount():
    global count
    count *= 2
    return count

print(list(iter(nextcount, 16)))
# Produces [2, 4, 8]
</code></pre>
<p>This mode involves <code>iter</code> creating the <a href="https://docs.python.org/3/glossary.html#term-iterator" rel="nofollow noreferrer">iterator</a> for us. Note that we need to reset <code>count</code> before it can work again; it only works given a callable (such as a function or bound method) that has side effects (changing the counter), and the iterator will only stop upon encountering <em>exactly</em> the sentinel value. </p>
<p>Your <code>DoubleIt</code> class provided no particular protocol for setting a <code>max</code> value, and <code>iter</code> doesn't expect or use any such protocol either. The alternate mode of <code>iter</code> <em>creates</em> an iterator from a callable and a sentinel value, quite independent of the <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow noreferrer"><em>iterable</em></a> or <a href="https://docs.python.org/3/glossary.html#term-iterator" rel="nofollow noreferrer"><em>iterator</em></a>  protocols. </p>
<p>The behaviour you expected is more akin to what <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow noreferrer">itertools.takewhile</a> or <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer">itertools.islice</a> do, manipulating one iterator to create another. </p>
<p>Another way to make an iterable object is to implement the <a href="https://docs.python.org/3/glossary.html#term-sequence" rel="nofollow noreferrer">sequence</a> protocol:</p>
<pre><code>class DoubleSeq:
    def __init__(self, steps):
        self.steps = steps
    def __len__(self):
        return self.steps
    def __getitem__(self, iteration):
        if iteration &gt;= self.steps:
            raise IndexError()
        return 2**iteration

print(list(iter(DoubleSeq(4))))
# Produces [1, 2, 4, 8]
</code></pre>
<p>Note that <code>DoubleSeq</code> isn't an iterator at all; <code>iter</code> created one for us using the sequence protocol. <code>DoubleSeq</code> doesn't hold the iteration counter, the iterator does. </p>
</div>
<span class="comment-copy">great question! if <a href="https://amir.rachum.com/blog/2013/11/10/python-tips-iterate-with-a-sentinel-value/" rel="nofollow noreferrer">use of sentinel is encouraged</a>, how do I construct one? this may be helpful: <a href="https://stackoverflow.com/questions/40297321/what-is-the-2nd-argument-for-the-iter-function-in-python" title="what is the 2nd argument for the iter function in python">stackoverflow.com/questions/40297321/â€¦</a>. My reading of this is that __iter__ method shoudl have a second optional argument.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/40297321/what-is-the-2nd-argument-for-the-iter-function-in-python">What is the 2nd argument for the iter function in Python?</a></span>
<span class="comment-copy">@quamara: the link you supplied above deals with using <code>iter(x, v)</code>, but hte question is about making an iterable, it is clearly not duplicate.</span>
<span class="comment-copy">My question is not duplicate,  as what I'm asking is can the second argument be used with the "Self defined Object". That's different. @quamrana</span>
<span class="comment-copy"><code>__call__ = __next__</code> is super ingenious!</span>
<span class="comment-copy">Is it more appropriate to say "What is not explicitly said is that what the iterator yields is whatever the OBJECT returns."? As in my very top code, I pass an obj of the class, which is not callable into iter()</span>
<span class="comment-copy">Nice explanation but it might be worth adding a sentence or two pointing out that, generally speaking, objects which support <code>iter</code> typically only support either one form or the other.  Because the two protocols are so different.</span>
<span class="comment-copy">@strubbly Which two protocal are you mentioning? Iterator protocal and ...?</span>
<span class="comment-copy">The documentation does state that non-sentinel values will be returned: "The iterator created in this case will call <code>object</code> with no arguments for each call to its <code>__next__()</code> method; if the value returned is equal to <code>sentinel</code>, <code>StopIteration</code> will be raised, otherwise the value will be returned." The first "returned" refers to the callable (first argument to iter), the second to what is returned by <code>__next__</code>.</span>
