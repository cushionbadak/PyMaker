<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/678236/how-to-get-the-filename-without-the-extension-from-a-path-in-python">How to get the filename without the extension from a path in Python?</a>
<span class="question-originals-answer-count">
                    19 answers
                </span>
</li>
</ul>
</div>
<p>I have the following string : </p>
<pre><code>a = "/home/user/Downloads/repo/test.txt"
</code></pre>
<p>My goal is just to create a string which contains only <code>test</code>, hwo can I do this ?</p>
<p>actually a comes from </p>
<pre><code>f = tkFileDialog.asksaveasfile(mode='w', defaultextension=".txt")
</code></pre>
<p>and a is equal to <code>a = f.name</code></p>
<p>but I realized <code>f.name</code> does not give me just the name of the file.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.4+, you can use the <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer"><code>pathlib</code></a> module (included in Python's standard library):</p>
<pre><code>from pathlib import Path
p = Path("/home/user/Downloads/repo/test.txt")
print(p.stem)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems that you're either looking for <code>os.path.basename</code> or <code>os.path.splitext</code>:</p>
<pre><code>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; os.path.basename("/var/log/err.log")
'err.log'
&gt;&gt;&gt; os.path.splitext(os.path.basename("/var/log/err.log"))
('err', '.log')
&gt;&gt;&gt; os.path.splitext(os.path.basename("/var/log/err.log"))[0]
'err'
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/os.path.html" rel="nofollow noreferrer"><code>os.path</code> module</a> to work with paths; the <a href="https://docs.python.org/3/library/os.path.html#os.path.basename" rel="nofollow noreferrer"><code>os.path.basename()</code> function</a> gives you the last part after the last path separator, and <a href="https://docs.python.org/3/library/os.path.html#os.path.splitext" rel="nofollow noreferrer"><code>os.path.splitext()</code></a> gives you the filename with the extension split off:</p>
<pre><code>import os.path

basename = os.path.splitext(os.path.basename(f.name))[0]
</code></pre>
<p>Using the <code>os.path</code> functions ensures that your code will continue to work correctly on different operating systems, even if the path separators are different.</p>
<p>In Python 3.4 or newer (or as a <a href="https://pypi.org/project/pathlib2/" rel="nofollow noreferrer">separate backport install</a>), you can also use the <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code> library</a>, which offers a more object-oriented approach to path handling. <code>pathlib.Path()</code> objects have a <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.stem" rel="nofollow noreferrer"><code>.stem</code> attribute</a>, which is the final component without the extension suffix:</p>
<pre><code>try:
    import pathlib
except ImportError:
    # older Python version, import the backport instead
    import pathlib2 as pathlib

basename = pathlib.Path(f.name).stem
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; a = "/home/user/Downloads/repo/test.txt"
&gt;&gt;&gt; os.path.basename(a)
'test.txt'
&gt;&gt;&gt; os.path.splitext(os.path.basename(a))
('test', '.txt')
&gt;&gt;&gt; os.path.splitext(os.path.basename(a))[0]
'test'
&gt;&gt;&gt; import pathlib
&gt;&gt;&gt; pathlib.Path(a)
PosixPath('/home/user/Downloads/repo/test.txt')
&gt;&gt;&gt; pathlib.Path(a).stem
'test'
</code></pre>
</div>
<span class="comment-copy">Just to be clear, you want the final part <i>without</i> the extension?</span>
<span class="comment-copy">Hint: look in module <code>os.path</code></span>
<span class="comment-copy"><code>os.path.splitext(os.path.basename(a))[0]</code></span>
<span class="comment-copy">Strictly speaking, Python 3.4 or later.</span>
<span class="comment-copy">@chepner yep thanks, I edited the answer accordingly.</span>
