<div class="post-text" itemprop="text">
<p>In the <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer">Python documentation</a>, special methods are documented differently. For instance, instead of <code>__len__</code>, the documentation reads <code>len(d)</code>. How can I get Sphinx to do the same?</p>
<p>It seems like all I have to do is override the logic producing the method name, but I'm not sure how to do that. The existing autodocs events don't seem to allow it.</p>
</div>
<div class="post-text" itemprop="text">
<p>As DeepSpace points out, this isn't built-in functionality; the Python docs do this manually.</p>
<p>Instead, I wrote a Sphinx transform:</p>
<pre><code>from sphinx.transforms import SphinxTransform
import sphinx.addnodes as SphinxNodes

SPECIAL_METHODS = {
    '__getitem__': '{self}[{0}]',
    '__setitem__': '{self}[{0}] = {1}',
    '__delitem__': 'del {self}[{0}]',
    '__contains__': '{0} in {self}',

    '__lt__': '{self} &lt; {0}',
    '__le__': '{self} &lt;= {0}',
    '__eq__': '{self} == {0}',
    '__ne__': '{self} != {0}',
    '__gt__': '{self} &gt; {0}',
    '__ge__': '{self} &gt;= {0}',

    '__hash__': 'hash({self})',
    '__len__': 'len({self})',

    '__add__': '{self} + {0}',
    '__sub__': '{self} - {0}',
    '__mul__': '{self} * {0}',
    '__matmul__': '{self} @ {0}',
    '__truediv__': '{self} / {0}',
    '__floordiv__': '{self} // {0}',
    '__mod__': '{self} % {0}',
    '__divmod__': 'divmod({self}, {0})',
    '__pow__': '{self} ** {0}',
    '__lshift__': '{self} &lt;&lt; {0}',
    '__rshift__': '{self} &gt;&gt; {0}',
    '__and__': '{self} &amp; {0}',
    '__xor__': '{self} ^ {0}',
    '__or__': '{self} | {0}',

    '__neg__': '-{self}',
    '__pos__': '+{self}',
    '__abs__': 'abs({self})',
    '__invert__': '~{self}',
}

class PrettifySpecialMethods(SphinxTransform):
    default_priority = 800

    def apply(self):
        methods = (
            sig for sig in self.document.traverse(SphinxNodes.desc_signature)
            if 'class' in sig
        )

        for ref in methods:
            name_node = ref.next_node(SphinxNodes.desc_name)
            method_name = name_node.astext()

            if method_name in SPECIAL_METHODS:
                param_names = [ p.astext() for p in ref.traverse(SphinxNodes.desc_parameter) ]

                ref.remove(ref.next_node(SphinxNodes.desc_parameterlist))

                name_node.replace_self(
                    SphinxNodes.desc_name(
                        name_node.source,
                        SPECIAL_METHODS[method_name].format(*param_names, self='d'),
                        **name_node.attributes
                    )
                )
</code></pre>
<p>I haven't thoroughly tested this, and it's missing some features, but it should be a start (and hopefully helpful to someone).</p>
</div>
<span class="comment-copy">I don't think these are auto-generated by Sphinx. For example, the <code>rst</code> source of the document you linked to: <a href="https://github.com/python/cpython/blob/master/Doc/library/stdtypes.rst" rel="nofollow noreferrer">github.com/python/cpython/blob/master/Doc/library/stdtypes.rst</a></span>
