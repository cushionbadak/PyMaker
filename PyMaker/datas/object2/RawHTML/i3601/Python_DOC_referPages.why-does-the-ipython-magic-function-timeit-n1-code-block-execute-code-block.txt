<div class="post-text" itemprop="text">
<p>I am trying to run a particular test multiple times in <code>ipython</code> using the
<code>%timeit</code> magic function. For demonstration purposes, I will just use <code>-n1</code> instead of
<code>-n3</code> here, and use a simple <code>print(1)</code> function. </p>
<p>The <code>%%timeit</code> and the <code>%timeit</code> help says the following: </p>
<pre><code>Options: -n&lt;N&gt;: execute the given statement &lt;N&gt; times in a loop. If this
value is not given, a fitting value is chosen.

-r&lt;R&gt;: repeat the loop iteration &lt;R&gt; times and take the best result.
Default: 3 (the 3 here is a typo in ipython, for which I have submitted a
PR)
</code></pre>
<p>However, if I do the following:</p>
<pre><code>%%timeit -n1
print(1)
</code></pre>
<p>or</p>
<pre><code>%timeit -n1 print(1)
</code></pre>
<p>it actually prints <code>1</code> 7 times in a row as follows</p>
<pre><code>In[1]: %timeit -n1 print(1)
1
1
1
1
1
1
1
32.8 µs ± 38.7 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre>
<p>I was expecting that because of the definition of <code>%%timeit</code>/<code>%timeit</code> it would
run the <code>cell</code> or <code>code</code> just once.</p>
<p>I have read this post: <a href="https://stackoverflow.com/a/45375047/4752883">https://stackoverflow.com/a/45375047/4752883</a>
which gives some examples of how <code>%%timeit</code> runs and the actual source code of <code>ipython</code> magic function <code>%%timeit</code>
here: <a href="https://github.com/ipython/ipython/blob/ec3d1a11bf26a0962cb2cf55ba263b12ac023183/IPython/core/magics/execution.py#L944" rel="nofollow noreferrer">https://github.com/ipython/ipython/blob/ec3d1a11bf26a0962cb2cf55ba263b12ac023183/IPython/core/magics/execution.py#L944</a></p>
<p>where they define 2 types of loops: 1) <code>-n&lt;N&gt;</code> and 2) <code>-r&lt;R&gt;</code>. </p>
<p>If I just use <code>-n1</code>, it seems that it also assumes that I have used <code>-r7</code>, i.e.
<code>-n1</code> defaults to <code>-n1 -r7</code>. This means that even though I want it to run for
exactly 1 run, it will still run the <code>code_block</code> 7 times as per
<a href="https://github.com/ipython/ipython/blob/ec3d1a11bf26a0962cb2cf55ba263b12ac023183/IPython/core/magics/execution.py#L1021" rel="nofollow noreferrer">https://github.com/ipython/ipython/blob/ec3d1a11bf26a0962cb2cf55ba263b12ac023183/IPython/core/magics/execution.py#L1021</a>
unless I also specify <code>-n1 -r1</code>.</p>
<h2>Questions:</h2>
<ol>
<li>Why are there 2 different ways to running the <code>code_block</code> using <code>-n&lt;N&gt;</code> and
<code>-r&lt;R&gt;</code>?</li>
<li>What is the difference between <code>-n&lt;N&gt;</code> and <code>-r&lt;R&gt;</code> and why is this
necessary?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>These parameters are also in the <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">timeit module</a>.</p>
<ul>
<li><code>-n</code> determines how many times you run the function (or block, or whatever) <em>inside</em> the timing window.  So the stopwatch starts, the code is run <code>n</code> times, then the stopwatch ends.  You should run it enough times that the results are meaningful (<code>timeit</code> defaults to powers of 10 until 0.2 seconds have elapsed).</li>
<li><code>-r</code> determines how many of these repetitions (where repetition is "start timer, run n times, stop timer") you should do.  There is always some error due to your CPU scheduling other processes, etc., so usually you want to run it a few times and the best value of these <code>r</code> times is taken.  (<code>timeit</code> defaults to 3, and the comments in the source you link indicate that ipython does the same -- but the actual code may disagree).</li>
</ul>
<p>In pseudo-python, you can see how <code>n</code> and <code>r</code> affect the timing process:</p>
<pre><code>time_hist = []
for _ in range(r):
    t0 = time.now()              # Start stopwatch (.now() is not a real function)
    for _ in range(n):
        # &lt;your code block&gt;
    t1 = time.now()              # Stop stopwatch

    time_hist.append(t1 - t0)    # Append time delta

 return min(time_hist)           # Return the min of the r deltas   
</code></pre>
</div>
<span class="comment-copy">Thanks for replying.. actually I did check the <code>timeit</code> module in <code>python</code> as well before posting.. and did see this.. What I was wondering is why it is necessary to have 2 different options <code>-n</code> and <code>-r</code>, why not just have 1? I will check the code that you mentioned in some more detail to see if there is any difference..</span>
<span class="comment-copy">I played around with the function you mentioned.. A follow up question..When using just <code>-n</code>, the fundamental reason why you might get different values when running the same function/code, is because the underlying system may be behaving slightly differently from 1 run to another. To compensate for that we can use <code>-n</code> such that the total time is ~0.2s or higher. That makes sense.. This also takes care and accounts for the fact that <code>CPU may be scheduling other processes, or there may be network connections or you need to access the hard-disk which may be in use by something else</code></span>
<span class="comment-copy">All these variabilities are accounted for by having a sufficiently large <code>-n</code> &gt;=0.2s. As you mentioned <code>-r</code> determines how many repetitions of <code>-n</code> you are doing and its also taking care of the same variability (<code>CPU scheduling, Network communications, hard-disk access etc</code>). So if we used a sufficiently large <code>-r</code>, with <code>-n1</code>, wouldn't it just be doing the same thing? Because, fundamentally we are trying to make sure that we have sampled enough times, so that the variability in process time due to <code>CPU scheduling, network access, hard disk access</code> are accounted for..</span>
<span class="comment-copy">Because regardless of whether you use <code>-n20 -r1</code>, or <code>-n1 -r20</code>, or just had 1 option which just provided an option to define the number of times the function is run, say <code>-l20</code>, they are all just doing random sampling, and capturing sufficient number of samples to have high signal/noise ratio?</span>
