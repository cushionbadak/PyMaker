<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/39983695/what-is-truthy-and-falsy-in-python-how-is-it-different-from-true-and-false">What is Truthy and Falsy in python? How is it different from True and False?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I have multiple quantity input fields, which only allows positive integer values, on a web page.</p>
<p>My first code looks like this:</p>
<pre><code>quantities = []
for form in forms:
    qty= form.cleaned_data['qty']
    if qty:
        quantities.append(qty)
if not quantities:
    raise forms.ValidationError("You didn't choose any books")
</code></pre>
<p>After reviewing my code, I found a shorter version:</p>
<pre><code>if not any([form.cleaned_data['qty'] for form in forms]):
    raise forms.ValidationError("You didn't choose any books")
</code></pre>
<p>Will this always work? Does every integer evaluate to <code>True</code> except <code>0</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Generally, yes.</p>
<p>Unless specially defined, most objects in python are considered True.</p>
<p>See source &amp; exceptions below:</p>
<blockquote>
<p><a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">4. Built-in Types (Python 3 documentation)</a></p>
<p>4.1. Truth Value Testing</p>
<p>Any object can be tested for truth value, for use in an if or while condition or as operand of the Boolean operations below.</p>
<p><strong><em>By default, an object is considered true</em></strong> unless its class defines either a <strong>bool</strong>() method that returns False or a <strong>len</strong>() method that returns zero, when called with the object. Here are most of the built-in objects considered false:</p>
<p>Constants defined to be false: </p>
<p><strong>None</strong> and <strong>False.</strong></p>
<p>zero of any numeric type: <strong>0</strong>, <strong>0.0</strong>, <strong>0j</strong>, <strong>Decimal(0)</strong>, <strong>Fraction(0, 1)</strong></p>
<p>empty sequences and collections: <strong>''</strong>, <strong>()</strong>, <strong>[]</strong>, <strong>{}</strong>, <strong>set()</strong>, <strong>range(0)</strong></p>
<p>Operations and built-in functions that have a Boolean result always return <strong>0</strong> or <strong>False</strong> for false and <strong>1</strong> or <strong>True</strong> for true, unless otherwise stated. </p>
<p>(Important exception: the Boolean operations or and and always return one of their operands.)</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Given integers (<code>int</code>s) as your domain, the answer is yes. The only <em>falsy</em> integer value in Python is <code>0</code>. All other integers are <code>True</code> when evaluated as a <code>bool</code>.</p>
</div>
<span class="comment-copy">What happened when you tested it?  What did you find when you researched the truth values of numbers?</span>
<span class="comment-copy">It worked after testing it, I've searched for this type of question but I couldn't find a specific answer to my question because this also relates to the any() function of python.</span>
<span class="comment-copy">Specifically see <a href="https://stackoverflow.com/a/39984051/5858851">this answer</a> (the upvoted one, rather than the accepted one).</span>
<span class="comment-copy">Keep in mind that "nonzero" and "positive" are completely different things.</span>
<span class="comment-copy">Although everything you said true, Alex answer is better: a) it directs to documentation, b) it answers "Why the only falsy integer value in Python is 0". And you just state it as Holy Truth</span>
