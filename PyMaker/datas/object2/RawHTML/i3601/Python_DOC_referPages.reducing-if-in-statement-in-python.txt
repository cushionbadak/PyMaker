<div class="post-text" itemprop="text">
<p>I have a list of strings and want to use various different operators to to pick out the string that satisfies my conditions.</p>
<p>The example code below gives me the answer I'm looking for:</p>
<pre><code>strings = ['abc','bcd','cde','dea', 'eab']        
for string in strings:
    if 'a' in string and not 'b' in string and ('ea' not in string or 'd' in string):    
    print(string)
&gt;&gt; dea
</code></pre>
<p>However, this code requires me to write out 'in string' multiple times, which looks messy and takes time when referencing a number of conditions.</p>
<p>I want to know if there's a way to condense the code down to show that everything operator is searching -in string-</p>
<p>I would imagine the syntax looks something like:</p>
<pre><code>strings = ['abc','bcd','cde','dea', 'eab']        
for string in strings:
    if ('a' and not 'b' and ('ea' not or 'd')) in string:    
        print(string)
</code></pre>
<p>but when I try this I get a SyntaxError.</p>
<p>Is there a pythonic way to condense the code?</p>
</div>
<div class="post-text" itemprop="text">
<p>The most Pythonic approach is to make your code as readable and expressive as possible. In your case, I would use two <code>if</code> statements:</p>
<pre><code>for string in strings:
    if 'a' in string and 'b' not in string:
        if 'ea' not in string or 'd' in string:
             print(string)

dea
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer">eval()</a> to evaluate expression like this one:</p>
<pre><code>for string in strings:
    if eval("'a' {0} and not 'b' {0} and ('ea' not {0} or 'd' {0})".format("in string")):
        print(string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use functions to make the if statement more easily read. As long as you keep the function definitions near the if statement readability should be ok. </p>
<pre><code>strings = ['abc','bcd','cde','dea', 'eab']

def ye(c): return c in string
def no(c): return c not in string

for string in strings:
    if ye('a') and no('b') and (no('ea') or ye('d')):    
        print(string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>strings = ['abc','bcd','cde','dea', 'eab']        
for string in strings:
    if 'a' in string and 'b' not in string:
        if 'd' not  in string or 'ea' in string:    
            print(string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use regular expressions, but it is not so readable:</p>
<pre><code>import re

reg=re.compile(r"(?=.*a.*)(?!.*b.*)(?:(?!.*ea.*)|(?=.*d.*))\w+")

for string in strings:
    mo=reg.fullmatch(string)
    if mo:
        print(mo.group())
</code></pre>
</div>
<span class="comment-copy">No warning that eval is evil or should only be used on trusted code?</span>
