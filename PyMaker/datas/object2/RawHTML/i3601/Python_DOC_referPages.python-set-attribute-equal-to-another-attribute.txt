<div class="post-text" itemprop="text">
<p>Is it possible to have a class attribute targeting another attribute from the same object and have a function to update the value of the target?</p>
<pre><code>class MyObject(object):
    def __init__(self):
        self.var_1 = 1
        self.var_2 = 2
        self.var_3 = 3
        self.current_var = self.var_1

    def update_var(self, value):
        self.current_var = ...
</code></pre>
<p>Expected outcome:</p>
<pre><code>&gt;&gt;&gt; x = MyObject()
&gt;&gt;&gt; x.update_var(10)
&gt;&gt;&gt; x.var_1
10
&gt;&gt;&gt; x.current_var = x.var_2
&gt;&gt;&gt; x.update_var(5)
&gt;&gt;&gt; x.var_2
5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suggest making <code>current_var</code> a property that acts as a proxy for a given instance attribute. You can use <code>set_current_var</code> to update the proxy target.</p>
<h2>Code</h2>
<pre><code>class MyObject(object):
    current_var = 1
    def __init__(self):
        self.var_1 = 1
        self.var_2 = 2
        self.var_3 = 3

    def set_current_var(self, name):
        self._current_var = name

    @property
    def current_var(self):
        return getattr(self, self._current_var)

    @current_var.setter
    def current_var(self, value):
        setattr(self, self._current_var, value)
</code></pre>
<h2>Example</h2>
<pre><code>x = MyObject()

print(x.var_1) # 1

x.set_current_var('var_1')

print(x.current_var) # 1

x.current_var = 4

print(x.var_1) # 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the __dict__ of the object or as said by @bla <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer">setattr</a>,<br/>
And Enum so you don't use string to specify the attribute:</p>
<pre><code>from enum import Enum

class MyObject(object):
    def __init__(self):
        self.var_1 = 1
        self.var_2 = 2
        self.var_3 = 3
        self.current_var = None
    def update_var(self, value):
        if self.current_var is None:
            raise Exception('Current var is not set')
        self.__dict__[self.current_var.name] = value
        setattr(self, self.current_var.name, value) # Same result

m = MyObject()

attrs = vars(m)
attrs_enum = Enum("attrs_enum", attrs)


m.var_1 # 1
m.current_var = attrs_enum.var_1
m.update_var(10)
m.var_1 # 10

m.current_var = attrs_enum.var_2
m.var_2 # 2
m.update_var(20)
m.var_2 # 20
</code></pre>
<p>I don't like using a string to specify the attribute, but this is solution</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a wrapper class for your <code>MyObject</code> attribute values. That way, a reference will exist from the contents of <code>current_var</code> to the attribute bound in <code>__dict__</code>:</p>
<pre><code>class _int:
   def __init__(self, _val):
     self.value = _val
   def __repr__(self):
     return str(self.value)

class MyObject(object):
  def __init__(self):
    self.var_1 = _int(1)
    self.var_2 = _int(2)
    self.var_3 = _int(3)
    self.current_var = self.var_1
  def update_var(self, value):
    self.current_var.value = value

x = MyObject()
x.update_var(10)
print(x.var_1)
x.current_var = x.var_2
x.update_var(5)
print(x.var_2)
</code></pre>
<p>Output:</p>
<pre><code>10
5
</code></pre>
</div>
<span class="comment-copy">pass the object to the constructor</span>
<span class="comment-copy">Can you give a more meaningful example, your code will raise an error because you are calling MyObject.update_var without an instance</span>
<span class="comment-copy">If you update <code>var_1</code> or <code>current_var</code>, one update will not change the other, no</span>
<span class="comment-copy">You can do this manually: <code>self.current_var = self.var_1 = value</code></span>
<span class="comment-copy">You should also outline your reasoning why this appears to be necessary in your case. Maybe you are trying to solve the wrong thing. (Also see <a href="https://meta.stackexchange.com/q/66377/18771">XY Problem</a> - you are asking for a way to do something that you think is the solution to an otherwise unexplained problem)</span>
<span class="comment-copy">You could also use <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer"><code>setattr</code></a>.</span>
<span class="comment-copy">How could you specify the attribute other than a string?</span>
<span class="comment-copy">You can use an enum, I will update my answers</span>
