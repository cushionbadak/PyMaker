<div class="post-text" itemprop="text">
<p>I made a file that turns to other files and run their scripts consecutively. Most of these files have a common parameter which is an input. When I import it, it (of course) requests for input. I wish to avoid re-input of something.</p>
<p>Example:</p>
<p>MainFile.py:</p>
<pre><code>import Base_params
import Liner
</code></pre>
<p>Base_params.py:</p>
<pre><code>no_of_slices=int(input('Enter no. of Slices'))
sub_slice=int(input('enter sub slice'))
</code></pre>
<p>Liner.py:</p>
<pre><code>from PIL import Image
import shutil
from Base_params import no_of_slices, sub_slice
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The short answer is that Python handles this for you already exactly the way you want. To understand why, let me give you a little background on the <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">import system</a>.</p>
<p>When a module is imported for the first time, an empty module object is created. Then its code is executed and any names you bind are placed in its dictionary, which is also the global namespace for the module. In your case that would mean running the code of <code>Base_params.py</code> and creating the names <code>no_of_slices</code> and <code>sub_slice</code> based on the user input.</p>
<p>When the same module is imported subsequently, its code is <strong>not</strong> run (which is your concern). Instead, the object reference from <a href="https://docs.python.org/3/library/sys.html#sys.modules" rel="nofollow noreferrer"><code>sys.modules</code></a> is returned. An import statement always checks whether a module is already loaded before attempting to run it again.</p>
<p>The reason that creating the empty module object (and placing it in <code>sys.modules</code> before running the module code is very important is that most modules have recursive imports. Marking the module as already imported ensures that any infinite loops are broken before they happen.</p>
<p>In your case, it is perfectly fine to define a module of constants that asks for user input. The first module that does <code>import Base_params</code> will trigger an execution of the <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer"><code>input</code></a> statements. All further occurrences of <code>import Base_params</code> will just bind <code>sys.modules['Base_params']</code> to whatever the name <code>Base_params</code> in your namespace. There will not be a second query for <code>no_of_slices</code> and <code>sub_slice</code>.</p>
<p>The links to the official documentation I provided throughout will explain anything I missed.</p>
</div>
<span class="comment-copy">Python only runs module code once on import. All following imports will use the entered value.</span>
<span class="comment-copy">Did you actually try doing the thing you said?</span>
<span class="comment-copy">I did, and this is a reduced version in the example above. Thanks for the tips, sorry I didn't follow. Let's ignore the case of a single file that refers as in the reduced example. In a general scenario, I can have a file that will contain multiple files that will refer to a certain input. How can I "convert" it into a fixed value (if that's even a thing)?</span>
<span class="comment-copy">Please state your problem clearly. There is no such thing as "a file that will contain multiple files", nor does "refer to a certain input" make sense. This is about importing modules, execution and variables. If you state your problem in those terms, you might even find the solution directly.</span>
<span class="comment-copy">So you didn't actually do the thing you said. You are worried about what happens when you import your module multiple times, but you only import it once.</span>
