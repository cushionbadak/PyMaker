<div class="post-text" itemprop="text">
<p>What is the difference between a function decorated with <a href="http://docs.python.org/library/functions.html#staticmethod" rel="noreferrer"><code>@staticmethod</code></a> and one decorated with <a href="http://docs.python.org/library/functions.html#classmethod" rel="noreferrer"><code>@classmethod</code></a>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe a bit of example code will help: Notice the difference in the call signatures of <code>foo</code>, <code>class_foo</code> and <code>static_foo</code>:</p>
<pre><code>class A(object):
    def foo(self, x):
        print "executing foo(%s, %s)" % (self, x)

    @classmethod
    def class_foo(cls, x):
        print "executing class_foo(%s, %s)" % (cls, x)

    @staticmethod
    def static_foo(x):
        print "executing static_foo(%s)" % x    

a = A()
</code></pre>
<p>Below is the usual way an object instance calls a method. The object instance, <code>a</code>, is implicitly passed as the first argument.</p>
<pre><code>a.foo(1)
# executing foo(&lt;__main__.A object at 0xb7dbef0c&gt;,1)
</code></pre>
<hr/>
<p><strong>With classmethods</strong>, the class of the object instance is implicitly passed as the first argument instead of <code>self</code>.</p>
<pre><code>a.class_foo(1)
# executing class_foo(&lt;class '__main__.A'&gt;,1)
</code></pre>
<p>You can also call <code>class_foo</code> using the class. In fact, if you define something to be
a classmethod, it is probably because you intend to call it from the class rather than from a class instance. <code>A.foo(1)</code> would have raised a TypeError, but <code>A.class_foo(1)</code> works just fine:</p>
<pre><code>A.class_foo(1)
# executing class_foo(&lt;class '__main__.A'&gt;,1)
</code></pre>
<p>One use people have found for class methods is to create <a href="https://stackoverflow.com/a/1950927/190597">inheritable alternative constructors</a>.</p>
<hr/>
<p><strong>With staticmethods</strong>, neither <code>self</code> (the object instance) nor  <code>cls</code> (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class:</p>
<pre><code>a.static_foo(1)
# executing static_foo(1)

A.static_foo('hi')
# executing static_foo(hi)
</code></pre>
<p>Staticmethods are used to group functions which have some logical connection with a class to the class.</p>
<hr/>
<p><code>foo</code> is just a function, but when you call <code>a.foo</code> you don't just get the function,
you get a "partially applied" version of the function with the object instance <code>a</code> bound as the first argument to the function. <code>foo</code> expects 2 arguments, while <code>a.foo</code> only expects 1 argument.</p>
<p><code>a</code> is bound to <code>foo</code>. That is what is meant by the term "bound" below:</p>
<pre><code>print(a.foo)
# &lt;bound method A.foo of &lt;__main__.A object at 0xb7d52f0c&gt;&gt;
</code></pre>
<p>With <code>a.class_foo</code>, <code>a</code> is not bound to <code>class_foo</code>, rather the class <code>A</code> is bound to <code>class_foo</code>.</p>
<pre><code>print(a.class_foo)
# &lt;bound method type.class_foo of &lt;class '__main__.A'&gt;&gt;
</code></pre>
<p>Here, with a staticmethod, even though it is a method, <code>a.static_foo</code> just returns
a good 'ole function with no arguments bound. <code>static_foo</code> expects 1 argument, and
<code>a.static_foo</code> expects 1 argument too.</p>
<pre><code>print(a.static_foo)
# &lt;function static_foo at 0xb7d479cc&gt;
</code></pre>
<p>And of course the same thing happens when you call <code>static_foo</code> with the class <code>A</code> instead.</p>
<pre><code>print(A.static_foo)
# &lt;function static_foo at 0xb7d479cc&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A <strong>staticmethod</strong> is a method that knows nothing about the class or instance it was called on. It just gets the arguments that were passed, no implicit first argument. It is basically useless in Python -- you can just use a module function instead of a staticmethod.</p>
<p>A <strong>classmethod</strong>, on the other hand, is a method that gets passed the class it was called on, or the class of the instance it was called on, as first argument. This is useful when you want the method to be a factory for the class: since it gets the actual class it was called on as first argument, you can always instantiate the right class, even when subclasses are involved. Observe for instance how <code>dict.fromkeys()</code>, a classmethod, returns an instance of the subclass when called on a subclass:</p>
<pre><code>&gt;&gt;&gt; class DictSubclass(dict):
...     def __repr__(self):
...         return "DictSubclass"
... 
&gt;&gt;&gt; dict.fromkeys("abc")
{'a': None, 'c': None, 'b': None}
&gt;&gt;&gt; DictSubclass.fromkeys("abc")
DictSubclass
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Basically <code>@classmethod</code> makes a method whose first argument is the class it's called from (rather than the class instance), <code>@staticmethod</code> does not have any implicit arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Official python docs:</strong></p>
<p><a href="http://docs.python.org/library/functions.html#classmethod" rel="noreferrer">@classmethod</a></p>
<blockquote>
<p>A class method receives the class as
  implicit first argument, just like an
  instance method receives the instance.
  To declare a class method, use this
  idiom:</p>
<pre><code>class C:
    @classmethod
    def f(cls, arg1, arg2, ...): ... 
</code></pre>
<p>The <code>@classmethod</code> form is a function
  <a href="http://docs.python.org/2/glossary.html#term-decorator" rel="noreferrer"><em>decorator</em></a> – see the description of
  function definitions in <a href="http://docs.python.org/2/reference/compound_stmts.html#function" rel="noreferrer"><em>Function
  definitions</em></a> for details.</p>
<p>It can be called either on the class
  (such as <code>C.f()</code>) or on an instance
  (such as <code>C().f()</code>). The instance is
  ignored except for its class. If a
  class method is called for a derived
  class, the derived class object is
  passed as the implied first argument.</p>
<p>Class methods are different than C++
  or Java static methods. If you want
  those, see <a href="http://docs.python.org/2/library/functions.html#staticmethod" rel="noreferrer"><code>staticmethod()</code></a> in this
  section.</p>
</blockquote>
<p><a href="http://docs.python.org/library/functions.html#staticmethod" rel="noreferrer">@staticmethod</a></p>
<blockquote>
<p>A static method does not receive an
  implicit first argument. To declare a
  static method, use this idiom:</p>
<pre><code>class C:
    @staticmethod
    def f(arg1, arg2, ...): ... 
</code></pre>
<p>The <code>@staticmethod</code> form is a function
  <a href="http://docs.python.org/2/glossary.html#term-decorator" rel="noreferrer"><em>decorator</em></a> – see the description of
  function definitions in <a href="http://docs.python.org/2/reference/compound_stmts.html#function" rel="noreferrer"><em>Function
  definitions</em></a> for details.</p>
<p>It can be called either on the class
  (such as <code>C.f()</code>) or on an instance
  (such as <code>C().f()</code>). The instance is
  ignored except for its class.</p>
<p>Static methods in Python are similar
  to those found in Java or C++. For a
  more advanced concept, see
  <a href="http://docs.python.org/2/library/functions.html#classmethod" rel="noreferrer"><code>classmethod()</code></a> in this section.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://rapd.wordpress.com/2008/07/02/python-staticmethod-vs-classmethod/" rel="noreferrer">Here</a> is a short article on this question</p>
<blockquote>
<p>@staticmethod function is nothing more than a function defined inside a class. It is callable without instantiating the class first. It’s definition is immutable via inheritance.</p>
<p>@classmethod function also callable without instantiating the class, but its definition follows Sub class, not Parent class, via inheritance. That’s because the first argument for @classmethod function must always be cls (class).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>To decide whether to use <a href="https://docs.python.org/3/library/functions.html?highlight=staticmethod#staticmethod" rel="noreferrer">@staticmethod</a> or <a href="https://docs.python.org/3.5/library/functions.html?highlight=classmethod#classmethod" rel="noreferrer">@classmethod</a> you have to look inside your method. <strong>If your method accesses other variables/methods in your class then use @classmethod</strong>. On the other hand, if your method does not touches any other parts of the class then use @staticmethod.</p>
<pre><code>class Apple:

    _counter = 0

    @staticmethod
    def about_apple():
        print('Apple is good for you.')

        # note you can still access other member of the class
        # but you have to use the class instance 
        # which is not very nice, because you have repeat yourself
        # 
        # For example:
        # @staticmethod
        #    print('Number of apples have been juiced: %s' % Apple._counter)
        #
        # @classmethod
        #    print('Number of apples have been juiced: %s' % cls._counter)
        #
        #    @classmethod is especially useful when you move your function to other class,
        #       you don't have to rename the class reference 

    @classmethod
    def make_apple_juice(cls, number_of_apples):
        print('Make juice:')
        for i in range(number_of_apples):
            cls._juice_this(i)

    @classmethod
    def _juice_this(cls, apple):
        print('Juicing %d...' % apple)
        cls._counter += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h2>What is the difference between @staticmethod and @classmethod in Python?</h2>
</blockquote>
<p>You may have seen Python code like this pseudocode, which demonstrates the signatures of the various method types and provides a docstring to explain each:</p>
<pre><code>class Foo(object):

    def a_normal_instance_method(self, arg_1, kwarg_2=None):
        '''
        Return a value that is a function of the instance with its
        attributes, and other arguments such as arg_1 and kwarg2
        '''

    @staticmethod
    def a_static_method(arg_0):
        '''
        Return a value that is a function of arg_0. It does not know the 
        instance or class it is called from.
        '''

    @classmethod
    def a_class_method(cls, arg1):
        '''
        Return a value that is a function of the class and other arguments.
        respects subclassing, it is called with the class it is called from.
        '''
</code></pre>
<h1>The Normal Instance Method</h1>
<p>First I'll explain <code>a_normal_instance_method</code>. This is precisely called an "<strong>instance method</strong>". When an instance method is used, it is used as a partial function (as opposed to a total function, defined for all values when viewed in source code) that is, when used, the first of the arguments is predefined as the instance of the object, with all of its given attributes. It has the instance of the object bound to it, and it must be called from an instance of the object. Typically, it will access various attributes of the instance.</p>
<p>For example, this is an instance of a string:</p>
<pre><code>', '
</code></pre>
<p>if we use the instance method, <code>join</code> on this string, to join another iterable,
it quite obviously is a function of the instance, in addition to being a function of the iterable list, <code>['a', 'b', 'c']</code>:</p>
<pre><code>&gt;&gt;&gt; ', '.join(['a', 'b', 'c'])
'a, b, c'
</code></pre>
<h3>Bound methods</h3>
<p>Instance methods can be bound via a dotted lookup for use later.</p>
<p>For example, this binds the <code>str.join</code> method to the <code>':'</code> instance:</p>
<pre><code>&gt;&gt;&gt; join_with_colons = ':'.join 
</code></pre>
<p>And later we can use this as a function that already has the first argument bound to it. In this way, it works like a partial function on the instance:</p>
<pre><code>&gt;&gt;&gt; join_with_colons('abcde')
'a:b:c:d:e'
&gt;&gt;&gt; join_with_colons(['FF', 'FF', 'FF', 'FF', 'FF', 'FF'])
'FF:FF:FF:FF:FF:FF'
</code></pre>
<h1>Static Method</h1>
<p>The static method does <em>not</em> take the instance as an argument. </p>
<p>It is very similar to a module level function. </p>
<p>However, a module level function must live in the module and be specially imported to other places where it is used. </p>
<p>If it is attached to the object, however, it will follow the object conveniently through importing and inheritance as well.</p>
<p>An example of a static method is <code>str.maketrans</code>, moved from the <code>string</code> module in Python 3.  It makes a translation table suitable for consumption by <code>str.translate</code>. It does seem rather silly when used from an instance of a string, as demonstrated below, but importing the function from the <code>string</code> module is rather clumsy, and it's nice to be able to call it from the class, as in <code>str.maketrans</code></p>
<pre><code># demonstrate same function whether called from instance or not:
&gt;&gt;&gt; ', '.maketrans('ABC', 'abc')
{65: 97, 66: 98, 67: 99}
&gt;&gt;&gt; str.maketrans('ABC', 'abc')
{65: 97, 66: 98, 67: 99}
</code></pre>
<p>In python 2, you have to import this function from the increasingly less useful string module:</p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; 'ABCDEFG'.translate(string.maketrans('ABC', 'abc'))
'abcDEFG'
</code></pre>
<h1>Class Method</h1>
<p>A class method is a similar to an instance method in that it takes an implicit first argument, but instead of taking the instance, it takes the class. Frequently these are used as alternative constructors for better semantic usage and it will support inheritance.</p>
<p>The most canonical example of a builtin classmethod is <code>dict.fromkeys</code>. It is used as an alternative constructor of dict, (well suited for when you know what your keys are and want a default value for them.)</p>
<pre><code>&gt;&gt;&gt; dict.fromkeys(['a', 'b', 'c'])
{'c': None, 'b': None, 'a': None}
</code></pre>
<p>When we subclass dict, we can use the same constructor, which creates an instance of the subclass.</p>
<pre><code>&gt;&gt;&gt; class MyDict(dict): 'A dict subclass, use to demo classmethods'
&gt;&gt;&gt; md = MyDict.fromkeys(['a', 'b', 'c'])
&gt;&gt;&gt; md
{'a': None, 'c': None, 'b': None}
&gt;&gt;&gt; type(md)
&lt;class '__main__.MyDict'&gt;
</code></pre>
<p>See the <a href="https://github.com/pydata/pandas/blob/master/pandas/core/frame.py" rel="noreferrer">pandas source code</a> for other similar examples of alternative constructors, and see also the official Python documentation on <a href="https://docs.python.org/library/functions.html#classmethod" rel="noreferrer"><code>classmethod</code></a> and <a href="https://docs.python.org/library/functions.html#staticmethod" rel="noreferrer"><code>staticmethod</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>@decorators were added in python 2.4 If you're using python &lt; 2.4 you can use the classmethod() and staticmethod() function.</p>
<p>For example, if you want to create a factory method (A function returning an instance of a different implementation of a class depending on what argument it gets) you can do something like:</p>
<pre><code>class Cluster(object):

    def _is_cluster_for(cls, name):
        """
        see if this class is the cluster with this name
        this is a classmethod
        """ 
        return cls.__name__ == name
    _is_cluster_for = classmethod(_is_cluster_for)

    #static method
    def getCluster(name):
        """
        static factory method, should be in Cluster class
        returns a cluster object for the given name
        """
        for cls in Cluster.__subclasses__():
            if cls._is_cluster_for(name):
                return cls()
    getCluster = staticmethod(getCluster)
</code></pre>
<p>Also observe that this is a good example for using a classmethod and a static method,
The static method clearly belongs to the class, since it uses the class Cluster internally.
The classmethod only needs information about the class, and no instance of the object.</p>
<p>Another benefit of making the <code>_is_cluster_for</code> method a classmethod is so a subclass can decide to change it's implementation, maybe because it is pretty generic and can handle more than one type of cluster, so just checking the name of the class would not be enough.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think a better question is "When would you use @classmethod vs @staticmethod?"</p>
<p>@classmethod allows you easy access to private members that are associated to the class definition. this is a great way to do singletons, or factory classes that control the number of instances of the created objects exist.</p>
<p>@staticmethod provides marginal performance gains, but I have yet to see a productive use of a static method within a class that couldn't be achieved as a standalone function outside the class.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Static Methods:</strong></p>
<ul>
<li>Simple functions with no self argument. </li>
<li>Work on class attributes; not on instance attributes.</li>
<li>Can be called through both class and instance.</li>
<li>The built-in function staticmethod()is used to create them.</li>
</ul>
<p><strong>Benefits of Static Methods:</strong></p>
<ul>
<li>It localizes the function name in the classscope</li>
<li>It moves the function code closer to where it is used</li>
<li><p>More convenient to import versus module-level functions since each method does not have to be specially imported</p>
<pre><code>@staticmethod
def some_static_method(*args, **kwds):
    pass
</code></pre></li>
</ul>
<p><strong>Class Methods:</strong></p>
<ul>
<li>Functions that have first argument as classname.</li>
<li>Can be called through both class and instance.</li>
<li><p>These are created with classmethod in-built function.</p>
<pre><code> @classmethod
 def some_class_method(cls, *args, **kwds):
     pass
</code></pre></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><code>@staticmethod</code> just disables the default function as method descriptor.  classmethod wraps your function in a container callable that passes a reference to the owning class as first argument:</p>
<pre><code>&gt;&gt;&gt; class C(object):
...  pass
... 
&gt;&gt;&gt; def f():
...  pass
... 
&gt;&gt;&gt; staticmethod(f).__get__(None, C)
&lt;function f at 0x5c1cf0&gt;
&gt;&gt;&gt; classmethod(f).__get__(None, C)
&lt;bound method type.f of &lt;class '__main__.C'&gt;&gt;
</code></pre>
<p>As a matter of fact, <code>classmethod</code> has a runtime overhead but makes it possible to access the owning class.  Alternatively I recommend using a metaclass and putting the class methods on that metaclass:</p>
<pre><code>&gt;&gt;&gt; class CMeta(type):
...  def foo(cls):
...   print cls
... 
&gt;&gt;&gt; class C(object):
...  __metaclass__ = CMeta
... 
&gt;&gt;&gt; C.foo()
&lt;class '__main__.C'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I started learning programming language with C++ and then Java and then Python and so this question bothered me a lot as well, until I understood the simple usage of each. </p>
<p><strong>Class Method:</strong> Python unlike Java and C++ doesn't have constructor overloading.  And so to achieve this you could use <code>classmethod</code>. Following example will explain this </p>
<p>Let's consider we have a <code>Person</code> class which takes two arguments <code>first_name</code> and <code>last_name</code> and creates the instance of Person. </p>
<pre><code>class Person(object):

    def __init__(self, first_name, last_name):
        self.first_name = first_name
        self.last_name = last_name
</code></pre>
<p>Now, if the requirement comes where you need to create a class using a single name only, just a <code>first_name</code>, you <strong>can't</strong> do something like this in python. </p>
<p>This will give you an error when you will try to create an object (instance).</p>
<pre><code>class Person(object):

    def __init__(self, first_name, last_name):
        self.first_name = first_name
        self.last_name = last_name

    def __init__(self, first_name):
        self.first_name = first_name
</code></pre>
<p>However, you could achieve the same thing using <code>@classmethod</code> as mentioned below </p>
<pre><code>class Person(object):

    def __init__(self, first_name, last_name):
        self.first_name = first_name
        self.last_name = last_name

    @classmethod
    def get_person(cls, first_name):
        return cls(first_name, "")
</code></pre>
<p><strong>Static Method:</strong>: This is rather simple, it's not bound to instance or class and you can simply call that using class name. </p>
<p>So let's say in above example you need a validation that <code>first_name</code> should not exceed 20 characters, you can simply do this. </p>
<pre><code>@staticmethod  
def validate_name(name):
    return len(name) &lt;= 20
</code></pre>
<p>and you could simply call using Class Name </p>
<pre><code>Person.validate_name("Gaurang Shah")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://julien.danjou.info/blog/2013/guide-python-static-class-abstract-methods" rel="noreferrer">The definitive guide on how to use static, class or abstract methods in Python</a> is one good link for this topic, and summary it as following.</p>
<p><strong><code>@staticmethod</code></strong> function is nothing more than a function defined inside a class. It is callable without instantiating the class first. It’s definition is immutable via inheritance.</p>
<ul>
<li>Python does not have to instantiate a bound-method for object.</li>
<li>It eases the readability of the code, and it does not depend on the state of object itself;</li>
</ul>
<p><strong><code>@classmethod</code></strong> function also callable without instantiating the class, but its definition follows Sub class, not Parent class, via inheritance, can be overridden by subclass. That’s because the first argument for <code>@classmethod</code> function must always be <em>cls</em> (class).</p>
<ul>
<li><em>Factory methods</em>, that are used to create an instance for a class using for example some sort of pre-processing.</li>
<li><em>Static methods calling static methods</em>: if you split a static methods in several static methods, you shouldn't hard-code the class name but use class methods</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Let me tell the similarity between a method decorated with @classmethod vs @staticmethod first.</p>
<p><strong>Similarity:</strong> Both of them can be called on the <em>Class</em> itself, rather than just the <em>instance</em> of the class. So, both of them in a sense are <em>Class's methods</em>. </p>
<p><strong>Difference:</strong> A classmethod will receive the class itself as the first argument, while a staticmethod does not.</p>
<p>So a static method is, in a sense, not bound to the Class itself and is just hanging in there just because it may have a related functionality. </p>
<pre><code>&gt;&gt;&gt; class Klaus:
        @classmethod
        def classmthd(*args):
            return args

        @staticmethod
        def staticmthd(*args):
            return args

# 1. Call classmethod without any arg
&gt;&gt;&gt; Klaus.classmthd()  
(__main__.Klaus,)  # the class gets passed as the first argument

# 2. Call classmethod with 1 arg
&gt;&gt;&gt; Klaus.classmthd('chumma')
(__main__.Klaus, 'chumma')

# 3. Call staticmethod without any arg
&gt;&gt;&gt; Klaus.staticmthd()  
()

# 4. Call staticmethod with 1 arg
&gt;&gt;&gt; Klaus.staticmthd('chumma')
('chumma',)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another consideration with respect to staticmethod vs classmethod comes up with inheritance.  Say you have the following class:</p>
<pre><code>class Foo(object):
    @staticmethod
    def bar():
        return "In Foo"
</code></pre>
<p>And you then want to override <code>bar()</code> in a child class:</p>
<pre><code>class Foo2(Foo):
    @staticmethod
    def bar():
        return "In Foo2"
</code></pre>
<p>This works, but note that now the <code>bar()</code> implementation in the child class (<code>Foo2</code>) can no longer take advantage of anything specific to that class.  For example, say <code>Foo2</code> had a method called <code>magic()</code> that you want to use in the <code>Foo2</code> implementation of <code>bar()</code>:</p>
<pre><code>class Foo2(Foo):
    @staticmethod
    def bar():
        return "In Foo2"
    @staticmethod
    def magic():
        return "Something useful you'd like to use in bar, but now can't" 
</code></pre>
<p>The workaround here would be to call <code>Foo2.magic()</code> in <code>bar()</code>, but then you're repeating yourself (if the name of <code>Foo2</code> changes, you'll have to remember to update that <code>bar()</code> method).</p>
<p>To me, this is a slight violation of the <a href="https://en.wikipedia.org/wiki/Open/closed_principle" rel="noreferrer">open/closed principle</a>, since a decision made in <code>Foo</code> is impacting your ability to refactor common code in a derived class (ie it's less open to extension).  If <code>bar()</code> were a <code>classmethod</code> we'd be fine:</p>
<pre><code>class Foo(object):
    @classmethod
    def bar(cls):
        return "In Foo"

class Foo2(Foo):
    @classmethod
    def bar(cls):
        return "In Foo2 " + cls.magic()
    @classmethod
    def magic(cls):
        return "MAGIC"

print Foo2().bar()
</code></pre>
<p>Gives: <code>In Foo2 MAGIC</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I will try to explain the basic difference using an example.</p>
<pre><code>class A(object):
    x = 0

    def say_hi(self):
        pass

    @staticmethod
    def say_hi_static():
        pass

    @classmethod
    def say_hi_class(cls):
        pass

    def run_self(self):
        self.x += 1
        print self.x # outputs 1
        self.say_hi()
        self.say_hi_static()
        self.say_hi_class()

    @staticmethod
    def run_static():
        print A.x  # outputs 0
        # A.say_hi() #  wrong
        A.say_hi_static()
        A.say_hi_class()

    @classmethod
    def run_class(cls):
        print cls.x # outputs 0
        # cls.say_hi() #  wrong
        cls.say_hi_static()
        cls.say_hi_class()
</code></pre>
<p>1 - we can directly call static and classmethods without initializing</p>
<pre><code># A.run_self() #  wrong
A.run_static()
A.run_class()
</code></pre>
<p>2- Static method cannot call self method but can call other static and classmethod</p>
<p>3- Static method belong to class and will not use object at all.</p>
<p>4- Class method are not bound to an object but to a class.</p>
</div>
<div class="post-text" itemprop="text">
<p>@classmethod : can be used to create a shared global access to all the instances created of that class..... like updating a record by multiple users....
I particulary found it use ful when creating singletons as well..:)</p>
<p>@static method:  has nothing to do with the class or instance being associated with ...but for readability can use static method</p>
</div>
<div class="post-text" itemprop="text">
<p>My contribution demonstrates the difference amongst <code>@classmethod</code>, <code>@staticmethod</code>, and instance methods, including how an instance can indirectly call a <code>@staticmethod</code>. But instead of indirectly calling a <code>@staticmethod</code> from an instance, making it private may be more "pythonic." Getting something from a private method isn't demonstrated here but it's basically the same concept.</p>
<pre><code>#!python3

from os import system
system('cls')
# %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %

class DemoClass(object):
    # instance methods need a class instance and
    # can access the instance through 'self'
    def instance_method_1(self):
        return 'called from inside the instance_method_1()'

    def instance_method_2(self):
        # an instance outside the class indirectly calls the static_method
        return self.static_method() + ' via instance_method_2()'

    # class methods don't need a class instance, they can't access the
    # instance (self) but they have access to the class itself via 'cls'
    @classmethod
    def class_method(cls):
        return 'called from inside the class_method()'

    # static methods don't have access to 'cls' or 'self', they work like
    # regular functions but belong to the class' namespace
    @staticmethod
    def static_method():
        return 'called from inside the static_method()'
# %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %

# works even if the class hasn't been instantiated
print(DemoClass.class_method() + '\n')
''' called from inside the class_method() '''

# works even if the class hasn't been instantiated
print(DemoClass.static_method() + '\n')
''' called from inside the static_method() '''
# %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %   %

# &gt;&gt;&gt;&gt;&gt; all methods types can be called on a class instance &lt;&lt;&lt;&lt;&lt;
# instantiate the class
democlassObj = DemoClass()

# call instance_method_1()
print(democlassObj.instance_method_1() + '\n')
''' called from inside the instance_method_1() '''

# # indirectly call static_method through instance_method_2(), there's really no use
# for this since a @staticmethod can be called whether the class has been
# instantiated or not
print(democlassObj.instance_method_2() + '\n')
''' called from inside the static_method() via instance_method_2() '''

# call class_method()
print(democlassObj.class_method() + '\n')
'''  called from inside the class_method() '''

# call static_method()
print(democlassObj.static_method())
''' called from inside the static_method() '''

"""
# whether the class is instantiated or not, this doesn't work
print(DemoClass.instance_method_1() + '\n')
'''
TypeError: TypeError: unbound method instancemethod() must be called with
DemoClass instance as first argument (got nothing instead)
'''
"""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Class methods, as the name suggests, are used to make changes to classes and not the objects. To make changes to classes, they will modify the class attributes(not object attributes), since that is how you update classes.
This is the reason that class methods take the class(conventionally denoted by 'cls') as the first argument.</p>
<pre><code>class A(object):
    m=54

    @classmethod
    def class_method(cls):
        print "m is %d" % cls.m
</code></pre>
<p>Static methods on the other hand, are used to perform functionalities that are not bound to the class i.e. they will not read or write class variables. Hence, static methods do not take classes as arguments. They are used so that classes can perform functionalities that are not directly related to the purpose of the class.</p>
<pre><code>class X(object):
    m=54 #will not be referenced

    @staticmethod
    def static_method():
        print "Referencing/calling a variable or function outside this class. E.g. Some global variable/function."
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Analyze @staticmethod <strong>literally</strong> providing different insights.</p>
<p>A normal method of a class is an implicit <strong>dynamic</strong> method which takes the instance as first argument.<br/>
In contrast, a staticmethod does not take the instance as first argument, so is called <strong>'static'</strong>.</p>
<p>A staticmethod is indeed such a normal function the same as those outside a class definition.<br/>
It is luckily grouped into the class just in order to stand closer where it is applied, or you might scroll around to find it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You might want to consider the difference between:</p>
<pre class="lang-py prettyprint-override"><code>Class A:
    def foo():  # no self parameter, no decorator
        pass
</code></pre>
<p>and</p>
<pre class="lang-py prettyprint-override"><code>Class B:
    @staticmethod
    def foo():  # no self parameter
        pass
</code></pre>
<p>This has changed between python2 and python3:</p>
<p>python2:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; A.foo()
TypeError
&gt;&gt;&gt; A().foo()
TypeError
&gt;&gt;&gt; B.foo()
&gt;&gt;&gt; B().foo()
</code></pre>
<p>python3:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; A.foo()
&gt;&gt;&gt; A().foo()
TypeError
&gt;&gt;&gt; B.foo()
&gt;&gt;&gt; B().foo()
</code></pre>
<p>So using  <code>@staticmethod</code> for methods only called directly from the class has become optional in python3. If you want to call them from both class and instance, you still need to use the <code>@staticmethod</code> decorator.</p>
<p>The other cases have been well covered by unutbus answer.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>#!/usr/bin/python
#coding:utf-8

class Demo(object):
    def __init__(self,x):
        self.x = x

    @classmethod
    def addone(self, x):
        return x+1

    @staticmethod
    def addtwo(x):
        return x+2

    def addthree(self, x):
        return x+3

def main():
    print Demo.addone(2)
    print Demo.addtwo(2)

    #print Demo.addthree(2) #Error
    demo = Demo(2)
    print demo.addthree(2)


if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A quick hack-up ofotherwise identical methods in iPython reveals that <code>@staticmethod</code> yields marginal performance gains (in the nanoseconds), but otherwise it seems to serve no function. Also, any performance gains will probably be wiped out by the additional work of processing the method through <code>staticmethod()</code> during compilation (which happens prior to any code execution when you run a script).</p>
<p>For the sake of code readability I'd avoid <code>@staticmethod</code> unless your method will be used for loads of work, where the nanoseconds count.</p>
</div>
<span class="comment-copy">static methods are sometimes better off as module level functions in python for the sake of cleanliness.  With a module function it is easier to import just the function you need and prevent unnecessary "." syntax (I'm looking at you Objective-C). class methods have more use since they can be used in combination with polymorphism to create "factory pattern" functions.  this is because class methods receive the class as an implicit parameter.</span>
<span class="comment-copy">tl;dr &gt;&gt; when compared to normal methods, the static methods and class methods can also be accessed using the class but unlike class methods, static methods are immutable via inheritance.</span>
<span class="comment-copy">Related talk by Raymond Hettinger on the topic: <a href="https://www.youtube.com/watch?v=HTLu2DFOdTg" rel="nofollow noreferrer">youtube.com/watch?v=HTLu2DFOdTg</a></span>
<span class="comment-copy">I don't understand what's the catch for using staticmethod. we can just use a simple outside-of-class function.</span>
<span class="comment-copy">@Alcott: You might want to move a function into a class because it logically belongs with the class. In the Python source code (e.g. multiprocessing,turtle,dist-packages), it is used to "hide" single-underscore "private" functions from the module namespace. Its use, though, is highly concentrated in just a few modules -- perhaps an indication that it is mainly a stylistic thing. Though I could not find any example of this, <code>@staticmethod</code> might help organize your code by being overridable by subclasses. Without it you'd have variants of the function floating around in the module namespace.</span>
<span class="comment-copy">... along with some explanation on <i>where</i> and <i>why</i> to use either instance, class or static methods. You didn't give a single word about it, but neither did the OP asked about it.</span>
<span class="comment-copy">@Alcott: as unutbu said, static methods are an organization/stylistic feature. Sometimes a module have many classes, and some helper functions are logically tied to a a given class and not to the others, so it makes sense not to "pollute" the module with many "free functions", and it is better to use a static method than relying on the poor style of mixing classes and function defs together in code just to show they are "related"</span>
<span class="comment-copy">One more thing that might be worth adding is what <code>A.foo</code> means, since you've thoroughly explained the other 5 cases (<code>a.foo</code>, <code>a.class_foo</code>, <code>a.static_foo</code>, <code>A.class_foo</code>, and <code>A.static_foo</code>): an "unbound method" (2.x) or a plain-old function (3.x) that expects an <code>A</code> instance as its first argument.</span>
<span class="comment-copy">A staticmethod isn't useless - it's a way of putting a function into a class (because it logically belongs there), while indicating that it does not require access to the class.</span>
<span class="comment-copy">Hence only 'basically' useless. Such organization, as well as dependency injection, are valid uses of staticmethods, but since modules, not classes like in Java, are the basic elements of code organization in Python, their use and usefulness is rare.</span>
<span class="comment-copy">What's logical about defining a method inside a class, when it has nothing to do with either the class or its instances?</span>
<span class="comment-copy">Perhaps for the inheritance sake? Static methods can be inherited and overridden just like instance methods and class methods and the lookup works as expected (unlike in Java). Static methods are not really resolved statically whether called on the class or instance, so the only difference between class and static methods is the implicit first argument.</span>
<span class="comment-copy">They also create a cleaner namespace, and makes it easier to understand the function have something to do with the class.</span>
<span class="comment-copy">So does that mean that by using a staticmethod I am always bound to the Parent class and with the classmethod I am bound the class that I declare the classmethod in (in this case the sub class)?</span>
<span class="comment-copy">No. By using a staticmethod you aren't bound at all; there is no implicit first parameter. By using classmethod, you get as implicit first parameter the class you called the method on (if you called it directly on a class), or the class of the instance you called the method on (if you called it on an instance).</span>
<span class="comment-copy">Could be expanded a bit to show that, by having a class as a first argument, class methods have direct access to other class attributes and methods, while static methods do not (they would need to hardcode MyClass.attr for that)</span>
<span class="comment-copy">Pity that your static method example actually <b>does</b> access a class variable. You could improve your example, maybe.</span>
<span class="comment-copy">What's the problem with a metaclass?</span>
<span class="comment-copy">What are the advantages to using a metaclass for this?</span>
<span class="comment-copy">One possible downside of a metaclass for this that immediately occurs to me is that you can't call the classmethod directly on an instance. <code>c = C(); c.foo()</code> raises AttributeError, you'd have to do <code>type(c).foo()</code>. This might also be considered a feature - I can't think of why you'd want to though.</span>
<span class="comment-copy">Perfect explanation +1 !!!</span>
<span class="comment-copy">Thanks @zangw - the inherited immutability of static function is the key difference it seems</span>
<span class="comment-copy">Perhaps an explanation, or some comments explaining what the code does, would improve this answer.</span>
<span class="comment-copy">"Otherwise seems to serve no function": not strictly true. See above discussion.</span>
