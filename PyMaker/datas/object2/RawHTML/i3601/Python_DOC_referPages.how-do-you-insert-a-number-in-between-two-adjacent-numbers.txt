<div class="post-text" itemprop="text">
<p>How would you <strong>1)</strong> insert 1's between any two adjacent 5's? and then <strong>2)</strong> insert a value into the second list at the same index as the 1 that was inserted into the first list?</p>
<p>For example, </p>
<pre><code>list1 = [  5,   1,   5,   5,   5,   1,  etc.] 
</code></pre>
<p>would become</p>
<pre><code>list1 = [  5,   1,   5,   1,   5,   1,   5,   1,  etc.]
</code></pre>
<p>And,</p>
<pre><code>list2 = [ val, val, val, val, val, val, etc.] 
</code></pre>
<p>would become</p>
<pre><code>list2 = [ val, val, val, Nval, val, Nval, etc.]
</code></pre>
<p>(Nval up above = the added value)</p>
<p>I'm a beginner so help is greatly appreciated :O)</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll want to look at pairs of consecutive values. To do that, let's pair the list with the last item cut off (<code>list[:-1]</code>) with again the list, but with the first item cut off (<code>list[1:]</code>). (The slice notation used here is <a href="https://docs.python.org/tutorial/introduction.html#lists" rel="nofollow noreferrer">being introduced in the official Python tutorial</a> and explained <a href="https://stackoverflow.com/a/509295/674064">in this answer</a>.)</p>
<pre><code>zip(list1[:-1], list1[1:])
</code></pre>
<p>(The <code>zip</code> function turns a pair of sequences into a sequence of pairs and is introduced <a href="https://docs.python.org/tutorial/datastructures.html#looping-techniques" rel="nofollow noreferrer">here in the tutorial</a> and <a href="https://docs.python.org/library/functions.html#zip" rel="nofollow noreferrer">documented here</a>.)</p>
<p>Let's see which these pairs are <code>(5, 5)</code>:</p>
<pre><code>[pair == (5, 5) for pair in zip(list1[:-1], list1[1:])]
</code></pre>
<p>The feature used here is a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>, a way of writing a (new) list by giving a rule to construct it from an existing iterable.</p>
<p>What are the indices of these pairs? Let's number them with <code>enumerate</code>:</p>
<pre><code>[n for (n, pair) in enumerate(zip(list1[:-1], list1[1:])) if pair == (5, 5)]
</code></pre>
<p>This is another list comprehension, this time with a condition for the elements (a "predicate"). Note that <code>enumerate</code> returns pairs of numbers and values (which are our original pairs), and that we use implicit unpacking to get them into the loop variables <code>n</code> and <code>pair</code> respectively.</p>
<p><code>list.insert(i, new_value)</code> takes the index <em>after</em> which the new value shall be inserted. Thus to find the positions where to insert into the original list (and into list2), we need to add <code>1</code> to the pair indices:</p>
<pre><code>idxs = [n + 1 for (n, pair) in enumerate(zip(list1[:-1], list1[1:])) if pair == (5, 5)]

for i in reversed(idxs):
    list1.insert(idxs, 1)
    list2.insert(idxs, 'Nval')
</code></pre>
<p>(We insert in reverse order, so as to not move the pairs between which we have yet to insert.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can recover the insertion indices with a single list comprehension. You are looking for indices <code>i</code> such that <code>5 == list1[i-1] == list1[i]</code>.</p>
<p>You then need to insert in decreasing order of indices.</p>
<pre><code>list1 = [5,   1,   5,   5,   5,   1]
list2 = [val, val, val, val, val, val] 

indices = [i for i in range(1, len(list1)) if 5 == list1[i-1] == list1[i]]

for i in reversed(indices):
    list1.insert(i, 1)
    list2.insert(i, Nval)

print(list1) # [5, 1, 5, 1, 5, 1, 5, 1]
print(list2) # [val, val, val, Nval, val, Nval, val, val]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.groupby</code>:</p>
<pre><code>import itertools
list1 = [5, 1, 5, 5, 5, 1]
copied = iter(['val' for _ in list1])
grouped = [[a, list(b)] for a, b in itertools.groupby(list1)]
new_result = [list(b) if a != 5 else [[5, 1] if c &lt; len(b) - 1 else [5] for c, _ in enumerate(b)] for a, b in grouped]
final_result = [[i] if not isinstance(i, list) else i for b in new_result for i in b]
new_copied = [[next(copied)] if len(i) == 1 else [next(copied), 'Nval'] for i in final_result]
list2, list2_copied = list(itertools.chain(*final_result)), list(itertools.chain(*new_copied))
</code></pre>
<p>Output:</p>
<pre><code>[5, 1, 5, 1, 5, 1, 5, 1]
['val', 'val', 'val', 'Nval', 'val', 'Nval', 'val', 'val']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>list1 = [5,1,5,5,5,1,5,5,1,5,5,5,5]
list2 = []

templist = []

for idx,val in enumerate(list1):
    if (idx+1) &lt;= (len(list1)-1):
        if list1[idx+1] == 5 and list1[idx] == 5:
            templist.append(val)
            templist.append(1)
            list2.append(val)
            list2.append(42)
        else:
            templist.append(val)
            list2.append(val)
</code></pre>
<p>Gives me as output:</p>
<pre><code>templist [5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]
list2 [5, 1, 5, 42, 5, 42, 5, 1, 5, 42, 5, 1, 5, 42, 5, 42, 5, 42]
</code></pre>
<p>And to finish off:
<code>list1 = templist</code></p>
</div>
<div class="post-text" itemprop="text">
<p>One-line solution based on <code>zip</code> and <code>reduce</code>:</p>
<pre><code>from functools import reduce

new_val = 10  # value to use for list2 (Nval)
new_list1 = []
new_list2 = []
reduce(lambda x, y: ((y[0] == 5 and x == 5) and (new_list1.append(1) or new_list2.append(new_val))) or
                     new_list1.append(y[0]) or new_list2.append(y[1]) or y[0],
         zip(list1, list2), (None, new_list1, new_list2))
</code></pre>
</div>
<span class="comment-copy">That sounds like <i>REALLY</i> specific algorithm... You should describe it using pseudo-code and only then implement it carefully, by iterating your original list</span>
<span class="comment-copy">Hopefully I explained this clearly. Just to clarify -- I first need to insert the item based of what would come after/before it, THEN I would need to insert a value into the second list at the same index.</span>
<span class="comment-copy">Then you just need to look into <code>list1[i-1]</code> and <code>list1[i+1]</code>, in order to make a decision</span>
<span class="comment-copy">So you want to insert 1's between any two adjacent 5's?</span>
<span class="comment-copy">@ddog you should restate your problem like that</span>
<span class="comment-copy">Thank you for the links and clear explanation!</span>
<span class="comment-copy">This was helpful, thank you!</span>
