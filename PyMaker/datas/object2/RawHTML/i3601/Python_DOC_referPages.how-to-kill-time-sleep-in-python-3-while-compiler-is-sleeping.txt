<div class="post-text" itemprop="text">
<p>I want to come out of the loop immediately after pressing the stop button. But with this code, i could able to come out only after executing current iteration and next iteration.</p>
<p>It is very important for my application since iam going to use this for automating instruments, where operations have to be stopped immediately after pressing stop button.</p>
<pre><code># -*- coding: utf-8 -*-
"""
Created on Sun Jun 17 17:01:12 2018

@author: Lachu
"""

import time
from tkinter import *
from tkinter import ttk

root=Tk()

def start():

    global stop_button_state

    for i in range(1,20):
        if (stop_button_state==True):
            break
        else:
            print('Iteration started')
            print('Iteration number: ', i)

            root.update()
            time.sleep(10)
            print('Iteration completed \n')          

def stop_fun():
    global stop_button_state
    stop_button_state=True


start=ttk.Button(root, text="Start", command=start).grid(row=0,column=0,padx=10,pady=10)

p=ttk.Button(root, text="Stop", command=stop_fun).grid(row=1,column=0)

stop_button_state=False

root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are probably better off using <code>root.after</code> than threads:</p>
<p>In any events, as other pointed out, using <code>time.sleep</code> is a bad idea in a GUI.</p>
<p>You should also not name your buttons the same as your functions.</p>
<p>calling <code>root.update</code>, is also not necessary here.</p>
<pre><code>from tkinter import *
from tkinter import ttk


def start_process(n=0, times=10):
    n += 1
    if not stop_button_state and n &lt; times:
        print('Iteration started')
        print(f'Iteration number: {n}')
        print('Iteration completed \n')
        root.after(1000, start_process, n)
    else:
        print('stopping everything')


def stop_fun():
    global stop_button_state
    stop_button_state = True


if __name__ == '__main__':

    root = Tk()

    start = ttk.Button(root, text="Start", command=start_process)
    start.grid(row=0, column=0, padx=10, pady=10)
    p = ttk.Button(root, text="Stop", command=stop_fun)
    p.grid(row=1, column=0)

    stop_button_state = False

    root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's generally not a good idea to use <code>time.sleep</code> with GUI programs because it puts <em>everything</em> to sleep, so the GUI can't update itself, or respond to events. Also, it gets messy when you want to interrupt <code>sleep</code>.</p>
<p>I've adapted your code to use a <code>Timer</code> from the <a href="https://docs.python.org/3/library/threading.html#module-threading" rel="nofollow noreferrer"><code>threading</code></a> module. We can easily interrupt this <code>Timer</code> instantly, and it doesn't block the GUI.</p>
<p>To make this work, I moved your counting <code>for</code> loop into a generator.</p>
<p>If you press the Start button while a count is in progress it will tell you that it's already counting. When a count cycle is finished, either by pressing Stop, or by getting to the end of the numbers, you can press Start again to start a new count.</p>
<pre><code>import tkinter as tk
from tkinter import ttk
from threading import Timer

root = tk.Tk()

delay = 2.0    
my_timer = None

# Count up to `hi`, one number at a time
def counter_gen(hi):
    for i in range(1, hi):
        print('Iteration started')
        print('Iteration number: ', i)
        yield
        print('Iteration completed\n')

# Sleep loop using a threading Timer
# The next `counter` step is performed, then we sleep for `delay`
# When we wake up, we call `sleeper` to repeat the cycle
def sleeper(counter):
    global my_timer
    try:
        next(counter)
    except StopIteration:
        print('Finished\n')
        my_timer = None
        return
    my_timer = Timer(delay, sleeper, (counter,))
    my_timer.start()

def start_fun():
    if my_timer is None:
        counter = counter_gen(10)
        sleeper(counter)
    else:
        print('Already counting')

def stop_fun():
    global my_timer
    if my_timer is not None:
        my_timer.cancel()
        print('Stopped\n')
        my_timer = None

ttk.Button(root, text="Start", command=start_fun).grid(row=0, column=0, padx=10, pady=10)
ttk.Button(root, text="Stop", command=stop_fun).grid(row=1,column=0)

root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Without using a separate thread, you could always iterate over the sleep command, which would make the code more responsive.<br/>
e.g. This would reduce your wait between clicking stop and loop exit to 1/10th of a second, whilst retaining a 10 second gap between loops. </p>
<pre><code># -*- coding: utf-8 -*-
"""
Created on Sun Jun 17 17:01:12 2018

@author: Lachu
"""

import time
from tkinter import *
from tkinter import ttk

root=Tk()
stop_button_state=False

def start():

    global stop_button_state
    for i in range(1,20):
        if (stop_button_state==True):
           break
        print('Iteration started')
        print('Iteration number: ', i)
        for i in range(100):
            root.update()
            time.sleep(0.1)
            if (stop_button_state==True):
                break
        print('Iteration completed \n')

def stop_fun():
    global stop_button_state
    stop_button_state=True

ttk.Button(root, text="Start", command=start).grid(row=0,column=0,padx=10,pady=10)
ttk.Button(root, text="Stop", command=stop_fun).grid(row=1,column=0)
root.mainloop()
</code></pre>
</div>
<span class="comment-copy">You have to use thread</span>
<span class="comment-copy">The <code>.grid</code> method returns <code>None</code>, so with <code>start=ttk.Button(root, text="Start", command=start).grid(row=0,column=0,padx=10,pady=10)</code> you set <code>start</code> to <code>None</code>. And you shouldn't try to use <code>start</code> for the name of the button and the name of a function. It doesn't really hurt here, since you never need the function name after you pass it into the button constructor. OTOH, why even bother naming the button, you don't use that name anywhere?</span>
<span class="comment-copy">In this code you can press the Start button again when the  <code>start</code> function is running, so that multiple iterations can happen at the same time. Is that intentional?</span>
<span class="comment-copy">research the tkinter <code>after</code> method which lets you schedule functions to run in the future or by an interval. You should never use <code>sleep</code> in a GUI program because it does exactly what it says: it puts the <i>whole</i> program to sleep.</span>
<span class="comment-copy">@BryanOakley I guess I should have used <code>.after</code>, but I thought it might be fun to do this with <code>threading</code>. ;)</span>
<span class="comment-copy">Yes, that's a bit simpler than my version. But you "cheated" by using <code>n += 1</code> instead of a generator. :D</span>
<span class="comment-copy">Sweet. Just one thing,  formatted string literals prefixed with an 'f' were only introduced in python 3.6</span>
<span class="comment-copy">That's great. It fulfilled half the requirements. It is not coming out of the loop immediately. It comes only after executing the current iteration. Is it possible to come out immediately by slightly changing the code?</span>
<span class="comment-copy">yes, you would need to provide a value for the keyword argument <code>times</code></span>
<span class="comment-copy">It serves the purpose.  Please explain how ''my_timer = Timer(delay, sleeper, (counter,))'' is working here.</span>
<span class="comment-copy">@maheshchaluvadi It creates a Timer which sleeps for <code>delay</code> seconds and then calls the <code>sleeper</code> function, passing it the <code>counter</code> generator as its argument. The Timer runs in its own thread. The <code>.start</code> call starts the Timer, and returns immediately, it doesn't wait like <code>time.sleep</code> does, so the GUI doesn't freeze.</span>
<span class="comment-copy">I understood the functionality after your explanation and working out on the program for some time with multiple changes. Thanks a lot . It completely fulfills my requirement.</span>
<span class="comment-copy">@maheshchaluvadi I'm glad you like it. For this case, Reblochon Masque's solution using <code>.after</code> is a bit simpler, but it's useful to know how to use threading with Tkinter for more complex situations.</span>
<span class="comment-copy">yes, but the problem in that approach is , it doesn't instantly come out of the loop. It has to complete the current iteration. It will come out only after that.</span>
<span class="comment-copy">You shouldn't ever call <code>sleep</code> in the GUI thread because tkinter cannot process any events while the program is sleeping.</span>
<span class="comment-copy">@BryanOakley Given that OP has asked a question specifically using sleep, I elected to provide an answer that fits the question. I don't use tkinter but I thought that <code>root.update()</code> returns control momentarily to the main loop.</span>
<span class="comment-copy">I've probably posted 100 answers showing how to use <code>after</code> on this site, there is probably nothing I could write here that would improve on any of my other answers.</span>
<span class="comment-copy">@BryanOakley Then how about posting an appropriate link to one of those? <a href="https://stackoverflow.com/questions/2400262/how-to-create-a-timer-using-tkinter/2401181#2401181" title="how to create a timer using tkinter">stackoverflow.com/questions/2400262/â€¦</a></span>
