<div class="post-text" itemprop="text">
<p>Referring to the following link as an example (and plenty of other examples exist elsewhere):
<a href="http://www.django-rest-framework.org/api-guide/serializers/#dynamically-modifying-fields" rel="nofollow noreferrer">http://www.django-rest-framework.org/api-guide/serializers/#dynamically-modifying-fields</a></p>
<p>It's understood that Django serializer fields are defined typically using a tuple, which is immutable:</p>
<pre><code>class UserSerializer(DynamicFieldsModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'username', 'email')
</code></pre>
<p>However, the accepted way to dynamically change serializer fields involves using a pop (<code>self.fields.pop(field_name)</code>) </p>
<pre><code>class DynamicFieldsModelSerializer(serializers.ModelSerializer):

    def __init__(self, *args, **kwargs):
        # Don't pass the 'fields' arg up to the superclass
        fields = kwargs.pop('fields', None)

        # Instantiate the superclass normally
        super(DynamicFieldsModelSerializer, self).__init__(*args, **kwargs)

        if fields is not None:
            # Drop any fields that are not specified in the `fields` argument.
            allowed = set(fields)
            existing = set(self.fields)
            for field_name in existing - allowed:
                self.fields.pop(field_name)
</code></pre>
<p>How do fields get defined? Is there a pre-processing step in Django serializers?</p>
</div>
<div class="post-text" itemprop="text">
<p>Look at:</p>
<p><a href="https://github.com/encode/django-rest-framework/blob/3fcc076d9124fc202be1a4379b6b753209c7afbe/rest_framework/serializers.py#L354" rel="nofollow noreferrer">https://github.com/encode/django-rest-framework/blob/3fcc076d9124fc202be1a4379b6b753209c7afbe/rest_framework/serializers.py#L354</a></p>
<pre><code>def fields(self):
    """
    A dictionary of {field_name: field_instance}.
    """
    # `fields` is evaluated lazily. We do this to ensure that we don't
    # have issues importing modules that use ModelSerializers as fields,
    # even if Django's app-loading stage has not yet run.
    if not hasattr(self, '_fields'):
        self._fields = BindingDict(self)
        for key, value in self.get_fields().items():
            self._fields[key] = value
    return self._fields
</code></pre>
<blockquote>
<p>How do fields get defined? </p>
</blockquote>
<p>It must be clear now.</p>
<blockquote>
<p>Is there a pre-processing step in Django serializers?</p>
</blockquote>
<p>Yes. 
This "step" is called <a href="https://docs.python.org/3/reference/datamodel.html#metaclasses" rel="nofollow noreferrer">metaclass</a></p>
<p>And <code>Serializer</code>s, <code>Model</code>s, <code>Forms</code> are metaclasses.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can override the serializer <strong>init</strong> method and set the fields attribute dynamicaly, based on the query params. You can access the request object trouth the context, passed to the serializer.</p>
<p>Here I created a reusable mixin, that does the dynamic fields modification.</p>
<p>from rest_framework import serializers</p>
<p>class DynamicFieldsModelSerializer(serializers.ModelSerializer):
    """
    A ModelSerializer that takes an additional <code>fields</code> argument that
    controls which fields should be displayed.
    """</p>
<pre><code>def __init__(self, *args, **kwargs):
    # Instantiate the superclass normally
    super(DynamicFieldsModelSerializer, self).__init__(*args, **kwargs)

    fields = self.context['request'].QUERY_PARAMS.get('fields')
    if fields:
        fields = fields.split(',')
        # Drop any fields that are not specified in the `fields` argument.
        allowed = set(fields)
        existing = set(self.fields.keys())
        for field_name in existing - allowed:
            self.fields.pop(field_name)


class UserSerializer(DynamicFieldsModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'username', 'email')
</code></pre>
</div>
<span class="comment-copy">Direct read the source code of  it. <code>pipenv install djangorestframework;pipenv shell;pipenv open rest_framework</code></span>
