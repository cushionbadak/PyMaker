<div class="post-text" itemprop="text">
<p>I would like to choose a random month between the current year and 2016.
This is my current, <strong>very</strong> naive, solution</p>
<pre><code>from random import choice
def get_month():
    return choice({'2018-06','2018-05','2018-04','2018-03'})
</code></pre>
<p>It's obvious that this set will get too large in the future so what would be a better way of achieving this? </p>
</div>
<div class="post-text" itemprop="text">
<p>May be you can have two list of month and year since, these will be fixed. Then, you can randomly choose between each and make a date to return. That way I think then no need to generate all different dates and no need to store in large list:</p>
<pre><code>from random import choice
def get_month():
    months = list(range(1, 13)) # 12 months list
    year = list(range(2016, 2019)) # years list here
    val = '{}-{:02d}'.format(choice(year), choice(months))
    return val

get_month()
</code></pre>
<p>Result:</p>
<pre><code>'2017-05'
</code></pre>
<h1>Update</h1>
<p>Just in case if there is limitation on not exceeding current month if the year selected is current year then, you may need <code>if</code> condition for generating list of months as below:</p>
<pre><code>from random import choice
from datetime import datetime

def get_month():

    today = datetime.today() # get current date
    year = list(range(2016, today.year+1)) # list till current date year

    # randomly select year and create list of month based on year
    random_year = choice(year)

    # if current year then do not exceed than current month
    if random_year == today.year:
        months = list(range(1, today.month+1))
    else:
        # if year is not current year then it is less so can create 12 months list
        months = list(range(1, 13)) 

    val = '{}-{:02d}'.format(random_year, choice(months))

    return val
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the library <code>pandas</code> and use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.date_range.html" rel="nofollow noreferrer"><code>date_range</code></a></p>
<pre><code>choice(pd.date_range(start="2016-01-01", end="2018-01-01", freq='M'))
</code></pre>
<p>If you want it until today, you can just substitute the <code>start</code>and <code>end</code> arguments for whatever suitable, e.g.</p>
<pre><code>from dateutil.relativedelta import relativedelta
today = datetime.today()
two_years_ago = today - relativedelta(years=2)
choice(pd.date_range(start=two_years_ago, end=today, freq='M'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You've identified the issue correctly. While the set of discrete items can get unwieldy pretty quickly (actually it won't), selecting a <a href="https://docs.python.org/3/library/random.html#random.randrange" rel="nofollow noreferrer">random integer over an arbitrary range</a> is easy.</p>
<p>You should be able to compute the number of months between your dates of interest easily. That means that you have a trivial 1-to-1 mapping from months to integers. Now you can do</p>
<pre><code>m = random.randrange(N)
</code></pre>
<p>where <code>N</code> is your total number of months (number of current month + 12 * number of whole years). Mapping back to months is easy using Python's <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer"><code>datetime</code> API</a>:</p>
<pre><code>origin = datetime.date(2016, 1, 1)
today = datetime.today()
n = (today.year - origin.year) * 12 + today.month - origin.month

m = random.randrange(n)
x = origin.replace(year=origin.year + m // 12, month=origin.month + m % 12)
</code></pre>
<p>Month delta (<code>n</code>) based on <a href="https://stackoverflow.com/a/4040338/2988730">this answer</a> and month increment (<code>x</code>) based on <a href="https://stackoverflow.com/a/2249988/2988730">this answer</a>. Both computations will become slightly more complicated if you move away from January for the origin.</p>
</div>
<div class="post-text" itemprop="text">
<p>just pick a random 1-24
then apply some date arithmetic to land on your month from the current date. </p>
<pre><code>from datetime import datetime, date
from dateutil.relativedelta import relativedelta
from random import randint

refdate = date.today() #datetime.now() works too!
for i in range(0,10):
    #this will take off at least 1 month and 24 will return 2016-06 from 2018-06
    months = randint(1,24)  
    back = refdate - relativedelta(months=months)
    print ("start:%s - %02d months =&gt; %s" % (refdate, months, back))
</code></pre>
<p>output:</p>
<pre><code>start:2018-06-17 - 24 months =&gt; 2016-06-17
start:2018-06-17 - 22 months =&gt; 2016-08-17
start:2018-06-17 - 21 months =&gt; 2016-09-17
start:2018-06-17 - 08 months =&gt; 2017-10-17
start:2018-06-17 - 16 months =&gt; 2017-02-17
start:2018-06-17 - 06 months =&gt; 2017-12-17
start:2018-06-17 - 07 months =&gt; 2017-11-17
start:2018-06-17 - 14 months =&gt; 2017-04-17
start:2018-06-17 - 07 months =&gt; 2017-11-17
start:2018-06-17 - 07 months =&gt; 2017-11-17
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can do them seperately like take random year and take random month, then put it together</p>
<pre><code>def get_month():
    year = random.choice([2016, 2017, 2018])
    month = random.choice(range(1,13))
    new_date = str(year) + "-" + str(month)
    return new_date
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try using <code>calendar</code>:</p>
<pre><code>from random import choice
import calendar
def get_month():
    l = []
    y = 0
    for i in range(2016,2019):
        l.append(str(i)+'-'+str(calendar.monthrange(i,12)[0]))
    return choice(l)
print(get_month())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think I came with a lighter solution than the one using pandas</p>
<pre><code>current_month = datetime.today().month
current_year = datetime.today().year 
start_year = 2016

#total months between now and the start year
total_months = current_month + (current_year - start_year)*12 

months = []
month_count = 1
year_count = start_year

#iterate through the list, when it reaches 13, increment year_count and reset the month_count to 1
for month in range(total_months):
    if month_count&lt;13:
        months.append(str(year_count) + "-" + str("{0:0=2d}".format(month_count)))
        month_count+=1
    if month_count == 13:
        year_count+=1
        month_count=1
</code></pre>
<p>results</p>
<pre><code>['2016-01', '2016-02', '2016-03', '2016-04', '2016-05', '2016-06', '2016-07', '2016-08', '2016-09', '2016-10', '2016-11', '2016-12', '2017-01', '2017-02', '2017-03', '2017-04', '2017-05', '2017-06', '2017-07', '2017-08', '2017-09','2017-10', '2017-11', '2017-12', '2018-01', '2018-02', '2018-03', '2018-04', '2018-05', '2018-06']
</code></pre>
<p>for some reason, when I replace "if month_count == 13" with "else", it only goes up to 2018-04</p>
<p>I would appreciate some feedback on this solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>I wish my code will give you some inspiration. </p>
<pre><code> import random
 import datetime

 def RandomMonth(st_year, st_month, ed_year, ed_month):
     """st_year, st_month and ed_year/month is int. """
     start_date = datetime.datetime(st_year, st_month, 1)
     end_date = datetime.datetime(ed_year, ed_month, 31)
     d_days = (end_date - start_date).days
     r_days = random.randint(0, ttl_days)
     r_date = start_date + datetime.timedelta(days = r_days)
     return r_date.strftime("%B/%Y")
</code></pre>
</div>
<span class="comment-copy">In what sense do you require randomness? February is shorter than March. Should February have <code>~28.25/365.25</code> probability of being chosen? Or should each month be given a <code>1/12</code> chance of being chosen? What about the current month? Should this month have a <code>16/365.25</code> probability of being chosen?</span>
<span class="comment-copy">Each month should have 1/12 chance of being chosen.</span>
<span class="comment-copy">That's not uniform...</span>
<span class="comment-copy">@MadPhysicist I thought it would not exceed current month and current year. Is there something wrong?</span>
<span class="comment-copy"><i>Some months are bigger than others. Some years' months are bigger than other years' months.</i></span>
<span class="comment-copy">@MateenUlhaq I am not quite sure I understand and I may be missing point on random selection. But does it mean number of days in months? I thought it would have 12 months if year is past or else till current month.</span>
<span class="comment-copy">It depends on what distribution OP really is looking for here. (For what purpose/application?) My point was that for proper uniformity in date, February should have (on average) a <code>~28.25/365.25</code> chance of being chosen. This percentage depends on the year (among possibly other factors).</span>
<span class="comment-copy">thatâ€™s pretty heavy, unless the OP already is on pandas, no?</span>
<span class="comment-copy">Would "today - relativedelta(years=2)" include Jan. 2016 or just the last 24months? Do you think it would be better to hardcode the start date and avoid importing relativedelta?</span>
<span class="comment-copy">It depends on your intentions. If you really want <i>always</i> from jan 2016 til today, I think you can hardcode that. If you always want an exact 2-year time frame, then relative delta is recommended :)</span>
<span class="comment-copy">That's not uniform since current year doesn't have all the months.</span>
