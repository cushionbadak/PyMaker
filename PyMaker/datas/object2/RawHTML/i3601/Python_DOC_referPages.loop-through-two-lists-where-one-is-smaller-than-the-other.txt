<div class="post-text" itemprop="text">
<p>I have two lists where one list is a list of tuples (will call it <code>list2</code>), and another is a list of strings (will call it <code>list1</code>). </p>
<p><code>list1</code> is smaller than <code>list2</code> but I want to be able to loop through them both and compare values from <code>list1</code> in each tuple that is in <code>list2</code>.</p>
<p>So far I have been managing to get results but it does not have the in the correct order.</p>
<p>My code so far is;</p>
<pre><code>list1 = ['2018-24', '2018-23', '2018-22', '2018-21', '2018-20', '2018-19', '2018-18', '2018-17', '2018-16', '2018-15', '2018-14', '2018-13', '2018-12', '2018-11']

list2 = [(27, 'Deutsche Bank', 'Opportunities email 2018-7'), (5, 'Deutsche Bank', 'Opportunities email 2018-2'), (4, 'Deutsche Bank', 'Opportunities email 2018-6'), (3, 'Deutsche Bank', 'Opportunities email 2018-10'), (3, 'Deutsche Bank', 'Opportunities email 2018-14'), (3, 'Deutsche Bank', 'Opportunities email 2017-50'), (3, 'Deutsche Bank', 'Opportunities email 2018-12'), (3, 'Deutsche Bank', 'Opportunities email 2018-4'), (2, 'Deutsche Bank', 'Opportunities email 2018-5'), (2, 'Deutsche Bank', 'Opportunities email 2018-3'), (2, 'Deutsche Bank', 'Opportunities email 2017-51'), (1, 'Deutsche Bank', 'Opportunities email 2018-13'), (1, 'Deutsche Bank', 'Opportunities email 2018-11')]

new_list = []

for x in list2:
    ii = x[2].split(' ')[2]
    if ii not in list1:
        new_list.append(0)
    else:

        print('This is ii ' + ii)
        for y in list1:
            if ii in y:
                new_list.append(x[0]) 
print(new_list)
print(len(new_list))
print(len(list1))
o/p &gt; 
'This is ii 2018-14'
'This is ii 2018-13'
'This is ii 2018-12'
'This is ii 2018-11'
[0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 1, 1]
13
14
</code></pre>
<p>It can be seen above that the len of the <code>new_list</code> and <code>list1</code> are different they should both be the same. But also it can be seen that the order of the <code>new_list</code> does not match up with the <code>list1</code> values so for example the value at index 3 of the <code>new_list</code> should actually be at index 10. I am not sure why it seems to be re-ordering the <code>new_list</code>.</p>
<p>The output I am expecting to get is <code>new_list</code> and <code>list1</code> to be the same lengths, but to also have corresponding values, so for example if <code>ii in y</code> was true and <code>ii</code> was <code>2018-14</code> then when taking into consideration index 10 for both <code>new_list</code> and <code>list1</code> the values respectively should be <code>3</code> and <code>2018-14</code>, another example of the expected output if considering index 0 of both <code>new_list</code> and <code>list1</code> then the values respectively should be <code>0</code> and <code>2018-7</code>.</p>
<p>A full breakdown of expected outputs is listed below;</p>
<pre><code>list1 = ['2018-24', '2018-23', '2018-22', '2018-21', '2018-20', '2018-19', '2018-18', '2018-17', '2018-16', '2018-15', '2018-14', '2018-13', '2018-12', '2018-11']

new_list = [0, 0, 0, 0, 0, 0, 0, 0 , 0, 0, 3, 1, 3, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that there are no repeats in the third elements of <code>list2</code>, I'd be inclined to put them into a dictionary that maps dates to numbers. Then you can iterate through <code>list1</code> and fetch those numbers out of the dictionary, using <code>0</code> as a fallback value if the date doesn't exist.</p>
<pre><code>d = {description.split(' ')[2]: number for number, _, description in list2}
result = [d.get(date, 0) for date in list1]
print(result)
</code></pre>
<p>Result:</p>
<pre><code>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>list1 = ['2018-24', '2018-23', '2018-22', '2018-21', '2018-20', '2018-19', '2018-18', '2018-17', '2018-16', '2018-15', '2018-14', '2018-13', '2018-12', '2018-11']
list2 = [(27, 'Deutsche Bank', 'Opportunities email 2018-7'), (5, 'Deutsche Bank', 'Opportunities email 2018-2'), (4, 'Deutsche Bank', 'Opportunities email 2018-6'), (3, 'Deutsche Bank', 'Opportunities email 2018-10'), (3, 'Deutsche Bank', 'Opportunities email 2018-14'), (3, 'Deutsche Bank', 'Opportunities email 2017-50'), (3, 'Deutsche Bank', 'Opportunities email 2018-12'), (3, 'Deutsche Bank', 'Opportunities email 2018-4'), (2, 'Deutsche Bank', 'Opportunities email 2018-5'), (2, 'Deutsche Bank', 'Opportunities email 2018-3'), (2, 'Deutsche Bank', 'Opportunities email 2017-51'), (1, 'Deutsche Bank', 'Opportunities email 2018-13'), (1, 'Deutsche Bank', 'Opportunities email 2018-11')]
new_list = []

for x in range(len(list1)):
    try:
        ii = list2[x][2].split(' ')[2]
        if ii not in list1:
            new_list.append(0)
        else:

            print('This is ii ' + ii)
            for y in list1:
                if ii in y:
                    new_list.append(list2[x][0])
    except IndexError:
        new_list.append(0)
print(new_list)
print(len(new_list))
print(len(list1))
print(len(list2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>list1 = ['2018-24', '2018-23', '2018-22', '2018-21', '2018-20', '2018-19', '2018-18', '2018-17', '2018-16', '2018-15', '2018-14', '2018-13', '2018-12', '2018-11']

list2 = [(27, 'Deutsche Bank', 'Opportunities email 2018-7'), (5, 'Deutsche Bank', 'Opportunities email 2018-2'), (4, 'Deutsche Bank', 'Opportunities email 2018-6'), (3, 'Deutsche Bank', 'Opportunities email 2018-10'), (3, 'Deutsche Bank', 'Opportunities email 2018-14'), (3, 'Deutsche Bank', 'Opportunities email 2017-50'), (3, 'Deutsche Bank', 'Opportunities email 2018-12'), (3, 'Deutsche Bank', 'Opportunities email 2018-4'), (2, 'Deutsche Bank', 'Opportunities email 2018-5'), (2, 'Deutsche Bank', 'Opportunities email 2018-3'), (2, 'Deutsche Bank', 'Opportunities email 2017-51'), (1, 'Deutsche Bank', 'Opportunities email 2018-13'), (1, 'Deutsche Bank', 'Opportunities email 2018-11')]

new_list = [0]*len(list1)

for x in list2:
    i = x[2].split(' ')[2]
    if i in list1:
        new_list[list1.index(i)] = x[0]

print(new_list) #[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1]
</code></pre>
<p>Try initializing the new_list to be a list of 0 and then looking up the index on where to put it in the <code>new_list</code> using <code>.index(value)</code> with the new value, it's not the most optimized way of doing things but it should get the job done.</p>
<hr/>
<p>Why are you wanting to store it like this. It seems to me like you might want to map the values of <code>new_list</code> back to <code>list1</code> as some sort of look up. If that's the case you might want to consider using a dictionary for key-value pairs look up, it's quicker and better, which is the first line to <a href="https://stackoverflow.com/a/50799519/4099813">Kevin's answer</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>@mp252</strong>, I appreciate the answers of this problem and I've few set of suggestions that I want to share with a simple code example executed on Interactive Python Terminal. Finally, I've answered the question using <code>map()</code> and <code>dictionary comprehension</code>, it's similar to <strong>Kevin</strong>'s answer.</p>
<blockquote>
<p>Try problem online at <a href="http://rextester.com/VODUZ45704" rel="nofollow noreferrer">http://rextester.com/VODUZ45704</a>.</p>
</blockquote>
<p>Â» Don't use <code>spit(' ')</code>, use <code>split()</code> to ignore extra spaces.</p>
<p>Have a look at the below sequence of statements executed on Python Interactive Terminal. </p>
<pre><code>&gt;&gt;&gt; s = 'Opportunities email 2018-7'
&gt;&gt;&gt; s.split();
['Opportunities', 'email', '2018-7']
&gt;&gt;&gt;
&gt;&gt;&gt; s.split(' ');
['Opportunities', 'email', '2018-7']
&gt;&gt;&gt;
&gt;&gt;&gt; s = 'Opportunities           email    2018-7'
&gt;&gt;&gt; s.split();
['Opportunities', 'email', '2018-7']
&gt;&gt;&gt;
&gt;&gt;&gt; s.split(' ');
['Opportunities', '', '', '', '', '', '', '', '', '', '', 'email', '', '', '', '2018-7']
&gt;&gt;&gt;
&gt;&gt;&gt; s = '  Opportunities           email    2018-7  '
&gt;&gt;&gt; s.split();
['Opportunities', 'email', '2018-7']
&gt;&gt;&gt;
&gt;&gt;&gt; s.split(' ');
['', '', 'Opportunities', '', '', '', '', '', '', '', '', '', '', 'email', '', '', '', '2018-7', '', '']
&gt;&gt;&gt;
</code></pre>
<p>Now, you can try the below code to get the <code>new_list</code>.</p>
<blockquote>
<ul>
<li><p>Dictionary is fast as any of its item can be searched in O(1) time and it supports string indexes unlike arrays so we can use it to map <code>'2018-7'</code>=&gt;<code>27</code>, <code>2018-2</code>=&gt;<code>5</code> etc.</p></li>
<li><p>So finally, we can iterate over <code>list</code> by looking for the existence of its item as key inside dictionary. If it presents add the corresponding value to <code>new_list</code> else add 0.</p></li>
</ul>
</blockquote>
<pre><code>list1 = ['2018-24', '2018-23', '2018-22', '2018-21', '2018-20', '2018-19', '2018-18', '2018-17', '2018-16', '2018-15', '2018-14', '2018-13', '2018-12', '2018-11']

list2 = [(27, 'Deutsche Bank', 'Opportunities email 2018-7'), (5, 'Deutsche Bank', 'Opportunities email 2018-2'), (4, 'Deutsche Bank', 'Opportunities email 2018-6'), (3, 'Deutsche Bank', 'Opportunities email 2018-10'), (3, 'Deutsche Bank', 'Opportunities email 2018-14'), (3, 'Deutsche Bank', 'Opportunities email 2017-50'), (3, 'Deutsche Bank', 'Opportunities email 2018-12'), (3, 'Deutsche Bank', 'Opportunities email 2018-4'), (2, 'Deutsche Bank', 'Opportunities email 2018-5'), (2, 'Deutsche Bank', 'Opportunities email 2018-3'), (2, 'Deutsche Bank', 'Opportunities email 2017-51'), (1, 'Deutsche Bank', 'Opportunities email 2018-13'), (1, 'Deutsche Bank', 'Opportunities email 2018-11')]

d = {tup[2].split()[2]:tup[0] for tup in list2};
new_list = list(map(lambda date: d[date] if date in d else 0, list1));

print(new_list);
</code></pre>
<p>Â» Output</p>
<pre><code>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1]
</code></pre>
</div>
<span class="comment-copy">Can you post both of your lists as well?</span>
<span class="comment-copy">@SijanBhandari have amended</span>
<span class="comment-copy">You should probably be using <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a></span>
<span class="comment-copy"><code>if ii not in list</code> - do you mean <code>list1</code>, <code>list2</code>, or <code>new_list</code>?</span>
<span class="comment-copy">You're appending one entry to <code>new_list</code> for each entry in <code>list2</code>. It's unclear why you expect <code>new_list</code> to have the same length as <code>list1</code> instead.</span>
<span class="comment-copy">This produces the correct lengths for both <code>new_list</code> and <code>list1</code> but it does not order the values correctly.</span>
<span class="comment-copy">thank you for your answer, I had done something similar a while back but did not think to set the list to contain all '0's as you mentioned was better to use the dict comprehension, originally I wanted to store it like this because I need two lists that are getting sent to my template for the charts.js library, as they need them as lists, this way I can now extract both easily.</span>
