<div class="post-text" itemprop="text">
<p>I am new to python and I currently have one text file that I sliced into two columns. I am looking for unique one-to-one relationships in the text file to determine new home buyers:</p>
<p><strong>Main File</strong></p>
<p>1234 Address ,  Billy Joel</p>
<p>Joe Martin, 45 Other Address</p>
<p>63 OtherOther Address, Joe Martin</p>
<p>Billy Joel, 1234 Address </p>
<p><strong><em>I am lookng for the unique one-to-one relationship (1234 Address and Billy Joel)</em></strong></p>
<p><strong>Curent Steps/Goals:</strong></p>
<blockquote>
<ol>
<li>sliced text file into two lists based on the ','</li>
</ol>
</blockquote>
<p>Looking to write something like this (I know this is very horribly laid out, but I am stuck on how to implement this):</p>
<pre><code>addressListing= text file that is read

leftLst = addressListing.split(",", 1)[0]
rightLst = addressListing.split(".", 1) [1]    

for (x, y) in (leftLst, rightLst):
        if x in rightLst and y in leftLst:
             return x + y
        else:
             pass
</code></pre>
<p>The text file is not neat where there are only addresses on one side and only names on the other. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>dict1 = {}
dict2 = {}

for line in content:
    line = line.split(",")
    if len(line) == 2:
        left = line[0].strip()
        right = line[1].strip()

        dict1[left] = right
        dict2[right] = left

for k, v in dict1.items():
    if v in dict2 and dict2[v] == k:
        print("Match found: " + k + ", " + v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are not using the adequat data structure for this problem. First off, consider using a <a href="https://docs.python.org/3/library/sqlite3.html#module-sqlite3" rel="nofollow noreferrer">database</a> when items stored in a file are meant to have relationships.</p>
<p>Although, if all you require is a one time parsing of the file, using a <code>dict</code> should be sufficient and yet efficient enough.</p>
<h2>Code</h2>
<pre><code>def find_one_to_one(d):
    for k, v in d.items():
        if v in d and d[v] == k:
            return k, v
    else:
        return None

with open('test_file.txt') as file:
    d = {left.strip(): right.strip() for left, right in [row.split(',') for row in file]}
    print(find_one_to_one(d))
</code></pre>
<h2>Test file content</h2>
<pre><code>1234 Address , Billy Joel
Joe Martin, 45 Other Address
63 OtherOther Address, Joe Martin
Billy Joel, 1234 Address
</code></pre>
<h2>Output</h2>
<pre><code>('1234 Address', 'Billy Joel')
</code></pre>
</div>
<span class="comment-copy">What is the output supposed to be?</span>
<span class="comment-copy">Do you have a way of determining whether something is a name or an address? Once that exists, sets and/or dictionaries are good data structures for a problem like this.</span>
