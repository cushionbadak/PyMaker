<div class="post-text" itemprop="text">
<p>for the following script (python 3.6, windows anaconda), I noticed that the libraries are imported as many as the number of the processors were invoked. And <code>print('Hello')</code> are also executed multiple same amount of times.  </p>
<p>I thought the processors will only be invoked for <code>func1</code> call rather than the whole program. The actual <code>func1</code> is a heavy cpu bounded task which will be executed for millions of times. </p>
<p>Is this the right choice of framework for such task? </p>
<pre><code>import pandas as pd
import numpy as np
from concurrent.futures import ProcessPoolExecutor

print("Hello")

def func1(x):
    return x


if __name__ == '__main__':
    print(datetime.datetime.now())    
    print('test start')

    with ProcessPoolExecutor() as executor:
        results = executor.map(func1, np.arange(1,1000))
        for r in results:
            print(r)

    print('test end')
    print(datetime.datetime.now())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor" rel="nofollow noreferrer"><code>concurrent.futures.ProcessPoolExecutor</code></a> uses the <code>multiprocessing</code> module to do its multiprocessing.</p>
<p>And, as explained in the <a href="https://docs.python.org/3/library/multiprocessing.html#the-spawn-and-forkserver-start-methods" rel="nofollow noreferrer">Programming guidelines</a>, this means you have to protect any top-level code you don't want to run in every process in your <code>__main__</code> block:</p>
<blockquote>
<p>Make sure that the main module can be safely imported by a new Python interpreter without causing unintended side effects (such a starting a new process).</p>
<p>... one should protect the “entry point” of the program by using <code>if __name__ == '__main__':</code>…</p>
</blockquote>
<p>Notice that this is only necessary if using the <code>spawn</code> or <code>forkserver</code> <a href="https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods" rel="nofollow noreferrer">start methods</a>. But if you're on Windows, <code>spawn</code> is the default. And, at any rate, it never <em>hurts</em> to do this, and usually makes the code clearer, so it's worth doing anyway.</p>
<p>You probably <em>don't</em> want to protect your <code>import</code>s this way. After all, the cost of calling <code>import pandas as pd</code> once per core may seem nontrivial, but that only happens at startup, and the cost of running a heavy CPU-bound function millions of times will completely swamp it. (If not, you probably didn't want to use multiprocessing in the first place…) And usually, the same goes for your <code>def</code> and <code>class</code> statements (especially if they're not capturing any closure variables or anything). It's only setup code that's incorrect to run multiple times (like that <code>print('hello')</code> in your example) that needs to be protected.</p>
<hr/>
<p>The examples in the <code>concurrent.futures</code> doc (and in <a href="https://www.python.org/dev/peps/pep-3148/" rel="nofollow noreferrer">PEP 3148</a>) all handle this by using the "main function" idiom:</p>
<pre><code>def main():
    # all of your top-level code goes here

if __name__ == '__main__':
    main()
</code></pre>
<p>This has the added benefit of turning your top-level globals into locals, to make sure you don't accidentally share them (which can especially be a problem with <code>multiprocessing</code>, where they get actually shared with <code>fork</code>, but copied with <code>spawn</code>, so the same code may work when testing on one platform, but then fail when deployed on the other).</p>
<hr/>
<p>If you want to know <em>why</em> this happens:</p>
<p>With the <code>fork</code> start method, <code>multiprocessing</code> creates each new child process by cloning the parent Python interpreter and then just starting the pool-servicing function up right where you (or <code>concurrent.futures</code>) created the pool. So, top-level code doesn't get re-run.</p>
<p>With the <code>spawn</code> start method, <code>multiprocessing</code> creates each new child process by starting a clean new Python interpreter, <code>import</code>ing your code, and then starting the pool-servicing function. So, top-level code gets re-run as part of the <code>import</code>.</p>
</div>
<span class="comment-copy">the last paragraph is exactly i was after. Best lesson on the differences between a exploratory style python programming and production grade style programming. after reading the programming guideline, i painfully realized the arg object needs to the func1 needs to be pickable. It really makes me think the object needs to be a pure data object. without all the object methods.</span>
<span class="comment-copy">@casbby If your object is picklable in principle but not out of the box, and it seems like a pain to write the pickler hooks for it, you should definitely take a look at <a href="https://pypi.org/project/dill/" rel="nofollow noreferrer"><code>dill</code></a> to see if it automatically handles it for you.</span>
<span class="comment-copy">@casbby Also, the docs for <code>multiprocessing</code> are just huge, and the way they're organized is not friendly for first-time readers—there's an great overview, then a more detailed but less readable overview without enough links to the reference, then a bunch of reference info, then programming guidelines after the reference… You really need to sit down and read the whole thing at least once, and it's not fun the first time.</span>
