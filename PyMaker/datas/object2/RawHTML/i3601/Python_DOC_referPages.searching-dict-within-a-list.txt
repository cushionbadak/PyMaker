<div class="post-text" itemprop="text">
<p>If I have the following list of items for a shopping store:</p>
<pre><code>shop_list = [{'item': 'apple', 'amount': 10, 'cost': 5}, 
             {'item': 'banana', 'amount': 12, 'cost': 6}, 
             {'item': 'strawberry', 'amount': 8, 'cost': 9}]
</code></pre>
<p>So I have several dicts within a list. I want to find out how to get the item dict knowing the item. For example:</p>
<pre><code>def x(item)
    #do something to get the dict
    print dict
x('apple')          #print {'item': 'apple', 'amount': 10, 'cost': 5}
x('banana')          #print {'item': 'banana', 'amount': 12, 'cost': 6}
</code></pre>
<p>What's the shortest, most efficient way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you intend to lookup entries by their <code>'item'</code>, then you should consider having a <code>dict</code> which keys are the <code>'item'</code> instead of a <code>list</code> of <code>dict</code>.</p>
<pre><code>shop_list = {
    'apple': {'amount': 10, 'cost': 5},
    'banana': {'amount': 12, 'cost': 6},
    'strawberry': {'amount': 8, 'cost': 9}
}

shop_list['banana'] # {'amount': 10, 'cost': 5}
</code></pre>
<p>In particular, this makes the lookup <em>O(1)</em> instead of the <em>O(n)</em> required for traversing the <code>list</code>.</p>
<p>If you cannot update the code that generated the original <code>shop_list</code>, then you can transform the already existing data with a dict-comprehension.</p>
<pre><code>formatted_shop_list = {product['item']: product for product in shop_list}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def x(shop_list, item): # remove first parameter if you want to use global variable
    for i in shop_list:
        if i['item'] == item:
            return i
</code></pre>
<p>Then, you can call this function as:</p>
<pre><code>&gt;&gt;&gt; todays_shop_list = [{'item': 'apple', 'amount': 10, 'cost': 5}, 
...                     {'item': 'banana', 'amount': 12, 'cost': 6}, 
...                     {'item': 'strawberry', 'amount': 8, 'cost': 9}]

&gt;&gt;&gt; x(todays_shop_list, 'apple')
{'item': 'apple', 'amount': 10, 'cost': 5}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try iterating through the list and just extract the dict that matches your shop item:</p>
<pre><code>def shop_item(shop_list, item):
    return next((x for x in shop_list if x['item'] == item), None)
    # or next(filter(lambda x: x['item'] == item, shop_list), None)
</code></pre>
<p>Which works as follows:</p>
<pre><code>&gt;&gt;&gt; shop_list = [{'item': 'apple', 'amount': 10, 'cost': 5},
...              {'item': 'banana', 'amount': 12, 'cost': 6},
...              {'item': 'strawberry', 'amount': 8, 'cost': 9}]
&gt;&gt;&gt; shop_item(shop_list, 'apple')
{'item': 'apple', 'amount': 10, 'cost': 5}
&gt;&gt;&gt; shop_item(shop_list, 'grape')
None
</code></pre>
<p>The above uses <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next()</code></a> with a generator expression to iterate though the list until the condition is met, and returns <code>None</code> if item is not found. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>def x(item):
    return [elements for elements in shop_list if elements['item'] == item]

x('apple')          #print {'item': 'apple', 'amount': 10, 'cost': 5}
x('banana')          #print {'item': 'banana', 'amount': 12, 'cost': 6}
</code></pre>
<p>This will return the list item if found </p>
<pre><code>[{'amount': 12, 'cost': 6, 'item': 'banana'}]
</code></pre>
<p>and if the result is not found an <code>empty list</code> will be returned.</p>
</div>
<span class="comment-copy">If you are down-voting, please leave a helpful comment. Don't be lazy. Let's be more welcoming to newer members. A mistake/typo doesn't make a question down-vote worthy.</span>
<span class="comment-copy">Can there be more than one "dicts" with the same "item"?</span>
<span class="comment-copy">This is a very sound advice!</span>
