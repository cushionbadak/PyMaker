<div class="post-text" itemprop="text">
<p>How do i join two absolute paths in Python?</p>
<p>e.g.</p>
<pre><code>path1 = 'C:/folder1/folder2/'
path2 = 'D:/directory1/directory2/'
</code></pre>
<p>The desired result is: <code>C:/folder1/folder2/directory1/directory2/</code></p>
<p>I tried <code>os.path.join</code> but it neglects the first path because it detects it's an absolute path. So what's the best way to join paths like this in Python?</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>On Windows, I would use <code>os.path.splitdrive</code> combined with a strip of the separator</p>
<pre><code>import os

path1 = 'C:/folder1/folder2/'
path2 = 'D:/directory1/directory2/'

seps = os.sep+os.altsep if os.altsep else os.sep
path3 = os.path.join(path1,os.path.splitdrive(path2)[1].lstrip(seps))  # handles / and \ as separators on windows

print(path3)
</code></pre>
<p>result:</p>
<pre><code>C:/folder1/folder2/directory1/directory2/
</code></pre>
<p>(if the second path is a relative path, it also works)</p>
<p>The <code>seps = os.sep+os.altsep if os.altsep else os.sep</code> line allows to be compatible with systems with no alternate separators (Linux). This solution works on Windows &amp; Linux, <code>os.splitdrive</code> is a dummy on Linux (returning a tuple with empty first element)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code> module</a> to make the 2nd path relative and join it with the first one:</p>
<pre><code>from pathlib import Path

path1 = Path('C:/folder1/folder2/')
path2 = Path('D:/directory1/directory2/')

path3 = path1 / path2.relative_to(path2.anchor)
# result: C:\folder1\folder2\directory1\directory2
</code></pre>
<hr/>
<p>To visualize what's happening, let's look at some intermediate output.</p>
<p><a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.anchor" rel="nofollow noreferrer"><code>Path.anchor</code></a> gives you the drive letter (or <code>/</code> on linux) of an absolute path. If the path is relative, it returns the empty string:</p>
<pre><code>&gt;&gt;&gt; path2.anchor
'D:\\'
&gt;&gt;&gt; Path('foo').anchor
''
</code></pre>
<p>We can use this with <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.relative_to" rel="nofollow noreferrer"><code>Path.relative_to</code></a> to turn <code>path2</code> into a relative path. If it was already relative, it won't be affected by this operation:</p>
<pre><code>&gt;&gt;&gt; path2.relative_to(path2.anchor)
WindowsPath('directory1/directory2')
&gt;&gt;&gt; Path('foo').relative_to('')
WindowsPath('foo')
</code></pre>
<p>Finally, now that we have a relative path, it can trivially be combined with <code>path1</code> with the <code>/</code> operator.</p>
</div>
<span class="comment-copy">trim the D: and use a + to combine the strings?</span>
<span class="comment-copy">@dfundako eh, i know about that, but i wonder if there is a more pythonic way doing this.</span>
<span class="comment-copy">Joining two absolute paths makes no sense. So there is unlikely to be a standard way to do it.</span>
<span class="comment-copy">@dfundako Congratulations, your code doesn't work on linux.</span>
<span class="comment-copy">@Aran-Fey The joke's on you. The code I write rarely works on any operating system.</span>
<span class="comment-copy">Thanks about this, though i will have to make my code run on both linux and windows. So would you prefer i have two methods, one for windows and one for linux than just call these 2 separately by detecting the OS?</span>
<span class="comment-copy">I've edited for a portable solution.</span>
<span class="comment-copy">Ask yourself if the linux problem is really the same?  The concept of drives is totally different.  You can create symbolic links to create any directory structure you want.</span>
<span class="comment-copy">@Jean-FrançoisFabre Simple, clean and native. Thanks for the answer, this is awesome. (it makes me wonder to rewrite my whole script with your solution in mind)</span>
<span class="comment-copy">this works only in python 3. And if the second directory is relative, it "eats" the root dir. But yes, works. it's also good because you don't have to strip the separators,</span>
<span class="comment-copy">@Jean-FrançoisFabre Code supports relative paths now.</span>
<span class="comment-copy">The joke's on you again :) I had already upvoted :)</span>
<span class="comment-copy">@Aran-Fey a nice solution, thanks, i'll remember this. Though i was avoiding the use of external libraries as i am writing this code for an extension of another software.</span>
<span class="comment-copy"><code>Pathlib</code> isn't an external library. The only limitation is that it doesn't run on python 2. but as Blender answer states, you can get a backport.</span>
