<div class="post-text" itemprop="text">
<p>What's the Python equivalent of this code?</p>
<pre><code>var firstTask = new Task(() =&gt; Foo());
var secondTask = firstTask.ContinueWith((fooResult) =&gt; Bar(fooResult));
firstTask.Start();
</code></pre>
<p>I assume that it'd use the asyncio library.  I know how to create a task in Python, but I can't find a simple example of something that does the same thing as C#'s ContinueWith()</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Future.add_done_callback" rel="nofollow noreferrer"><code>Future.add_done_callback()</code> callback registration function</a> to do the same; echoing the lambda function support would be:</p>
<pre><code>import asyncio

def continue_task_with(task, callback, *, loop=None):
    """When a task completes, schedule a new task.

    The new task is created by calling the callback with the result of
    the first task.

    """
    def done_callback(fut):
        asyncio.ensure_future(callback(fut), loop=loop)
    task.add_done_callback(done_callback)

foo_task = asyncio.ensure_future(foo())
continue_task_with(foo_task, lambda result: bar(result))
asyncio.get_event_loop().run_forever()
</code></pre>
<p>So this:</p>
<ul>
<li>Creates a task for <code>Foo()</code></li>
<li>Registers a callback on this to be called when the task is done.</li>
<li>The callback receives the task object, and passes that task object as the first argument to a lambda that creates a <code>Bar()</code> coroutine from this. The result of the lambda is then scheduled as a new task to be run.</li>
<li>Then schedules the <code>Foo()</code> task; when that task completes the <code>Bar()</code> callback is called to run <code>Bar()</code>.</li>
</ul>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; async def foo():
...     print('Running foo')
...     await asyncio.sleep(1)
...     print('Completing foo')
...     return 42
...
&gt;&gt;&gt; async def bar(foo_task):
...     print('Running bar')
...     if not (foo_task.cancelled() or foo_task.exception()):
...         print('Foo completed successfully, it received', foo_task.result())
...     asyncio.get_event_loop().stop()
...
&gt;&gt;&gt; foo_task = asyncio.ensure_future(foo())
&gt;&gt;&gt; continue_task_with(foo_task, lambda result: bar(result))
&gt;&gt;&gt; asyncio.get_event_loop().run_forever()
Running foo
Completing foo
Running bar
Foo completed successfully, it received 42
</code></pre>
</div>
<span class="comment-copy">It is not recommended to use the Task constructor as the Task.Run method should be used to instantiate and start a task (see <a href="https://msdn.microsoft.com/en-us/library/dd321321(v=vs.110).aspx" rel="nofollow noreferrer">msdn.microsoft.com/en-us/library/dd321321(v=vs.110).aspx</a>).</span>
<span class="comment-copy">Is <code>Bar</code> an async function or a regular one?</span>
<span class="comment-copy">What does “task is done” mean? ContinueWith (without further parameters) not only gets executed if the task completes successfully, but also if the task raises an exception or gets cancelled.</span>
<span class="comment-copy">@ckuri That sounds exactly equivalent to <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Future.add_done_callback" rel="nofollow noreferrer"><code>add_done_callback</code></a>.</span>
<span class="comment-copy">@user4815162342 I see, according to your link "Done means either that a result / exception are available, or that the future was cancelled."</span>
<span class="comment-copy">@ckuri: <code>add_done_callback()</code> is called when the task has <i>ended</i>, which can mean a successful completion, or an exception, or the task is cancelled. Calling <code>.result()</code> on a task that was cancelled or had an exception raised results in an exception, so the callback fails at that point.</span>
<span class="comment-copy">@ckuri: I've updated the function to pass along the task in its entirety, rather than just the <code>.result()</code> return value. I didn't realise that this is what the C# version does anyway (the <code>TResult</code> type had me thrown for a bit).</span>
