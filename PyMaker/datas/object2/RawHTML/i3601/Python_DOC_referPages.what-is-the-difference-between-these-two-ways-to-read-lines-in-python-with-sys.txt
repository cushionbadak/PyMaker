<div class="post-text" itemprop="text">
<p>I don't think I understand the ways to read lines from the input using <code>sys.stdin</code> .</p>
<p>What is the difference between</p>
<pre><code>import sys
while True:
    foo(sys.stdin.readline())
</code></pre>
<p>and</p>
<pre><code>import sys
for line in sys.stdin:
    foo(line)
</code></pre>
<p>and why would I pick one choice over the other?</p>
<p>Also, how would I get the behavior of</p>
<pre><code>import sys
first_line = sys.readline()
foo(first_line)
while True:
    bar(sys.readline())
</code></pre>
<p>by using a for-in loop? Specifically, what would be an elegant way to treat the first line separately from the other lines in the input? Does somethine along the lines of <code>for line in  sys.stdin</code> still work?</p>
</div>
<div class="post-text" itemprop="text">
<p>There's nothing special about <a href="https://docs.python.org/3/library/sys.html#sys.stdin" rel="nofollow noreferrer"><code>sys.stdin</code></a> here; it's just a normal text file object.</p>
<p>Iterating any iterable, including a file object, with <code>for x in iterable:</code>, just calls <code>next</code> on it over and over until it raises a <code>StopIteration</code>.</p>
<p>Notice that this means that if you want to skip over a header line before processing the rest of a file, you can just call <code>next(f)</code> before the loop.</p>
<p>And <a href="https://docs.python.org/3/library/io.html#io.IOBase.readline" rel="nofollow noreferrer"><code>readline</code></a> does the same thing as <code>next</code>, except for the <code>hint</code> parameter (which you're not using), and what happens on various error conditions (which aren't likely to matter here), and what happens at EOF: <code>readline</code> returns an empty string, <code>next</code> raises a <code>StopIteration</code>.</p>
<p>So, there's no <em>general</em> reason to pick one over the other in general; it comes down to which is more readable in your particular case. </p>
<hr/>
<p>If your goal is to loop over all the lines, it's a lot more readable to use a <code>for</code> loop. Compare:</p>
<pre><code>for line in sys.stdin:
    do_stuff(line)

while True:
    line = sys.stdin.readline()
    if not line:
        break
    do_stuff(line)
</code></pre>
<hr/>
<p>If, on the other hand, your loop involves reading variable chunks of stuff with some non-trivial logic, <code>readline</code> is usually going to be clearer:</p>
<pre><code>while True:
    line = sys.stdin.readline()
    if not line:
        break
    while line.rstrip().endswith('\\'):
        line = line.rstrip().rstrip('\\') + sys.stdin.readline()
    do_stuff(line)

logical_line = ''
try:
    for line in sys.stdin:
        if logical_line:
            logical_line += line
        if not line.rstrip().endswith('\\'):
            do_stuff(logical_line)
            logical_line = ''
except StopIteration:
    if logical_line:
        do_stuff(logical_line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>while True:
    foo(sys.stdin.readline())
</code></pre>
<p>This code will loop forever. If there is an EOF on <code>sys.stdin</code> -- for instance, if input was redirected from a file, and the end of that file has been reached -- then it will call <code>foo('')</code> repeatedly. This is probably bad.</p>
<pre><code>for line in sys.stdin:
    foo(line)
</code></pre>
<p>This code will stop looping when an EOF is encountered. This is good.</p>
<p>If you want to handle the first line differently, you can simply call <code>sys.stdin.readline()</code> once before entering the loop:</p>
<pre><code>first_line = sys.readline()
foo(first_line)
for line in sys.stdin:
    bar(line)
</code></pre>
</div>
<span class="comment-copy">there is no technical difference</span>
<span class="comment-copy">They will behave differently when <code>stdin</code> is closed.</span>
<span class="comment-copy">@hop: What do you mean by "no technical difference" exactly?</span>
<span class="comment-copy">One thing I'll point out is that stepping through one can get a solid understanding of what the differences are. For example with <code>pdb</code> the for loop would take twice as many steps as the while loop (eg. "hello" + 3 times).</span>
<span class="comment-copy">@l'L'l Good point. Stepping through a small program is a great way to learn how <i>any</i> part of Python works, so ideally, everyone should learn how to do it early onâ€¦</span>
