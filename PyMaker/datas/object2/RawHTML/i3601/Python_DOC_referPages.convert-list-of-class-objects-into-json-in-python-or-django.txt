<div class="post-text" itemprop="text">
<pre><code>my_objects = []
my_objects.append(Needed("bye",9))
my_objects.append(Needed("tata",8))
my_objects.append(Needed("hi",10))
</code></pre>
<p>i have list of object(example 5 objects in list) like this</p>
<pre><code>class Needed:

   def __init__(self, name, number):
      self.name = name
      self.number = number
</code></pre>
<p>and i need to convert this into json order by count like below</p>
<pre><code>{
   "results":[
               { "name":"hi",
                 "number":"10"
                },
                { "name":"bye",
                 "number":"9"
                },
                { "name":"tata",
                 "number":"8"
                },
                ...........
                ...........
              ]
}
</code></pre>
<p>so how to achieve this in django</p>
</div>
<div class="post-text" itemprop="text">
<p>First you need to make your objects json-serializable. You could provide a <code>default</code> encoder function or write your own <code>JSONEncoder</code> <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">as mentionned in the FineManual</a>, but for a simple one-off case like your example building dicts from your objects is probably the simplest solution:</p>
<pre><code>class Needed(object):

   def __init__(self, name, number):
      self.name = name
      self.number = number

  def to_dict(self):
      return {"name": self.name, "number": self.number}
</code></pre>
<p>Then build a list of dicts from your objects:</p>
<pre><code>results = [obj.to_dict() for obj in my_objects]
</code></pre>
<p>sort it based on <code>number</code>:</p>
<pre><code>results.sort(key=lambda obj: obj["number"])
</code></pre>
<p>and serialize the whole thing:</p>
<pre><code>jsdata = json.dumps({"results": results})
</code></pre>
<p>Note that all this is pretty ordinary Python stuff - building dicts out of objects, making a list of them and sorting the list, really no rocket science here, that's really basic python knowledge, something you shouldn't even have to think about. </p>
</div>
<div class="post-text" itemprop="text">
<p>Beside the fact that this is not django related, here is some Python code that can help you:</p>
<pre><code>from operator import attrgetter

# sort objects by attribute number in reverse order
result = {'results': [obj.__dict__ for obj in sorted(my_objects, key=attrgetter('number'), reverse=True)]}

# `indent=4` returns a json string "prettyfied"
print(json.dumps(result, indent=4))
</code></pre>
<p>Which prints:</p>
<pre><code>{
    "results": [
        {
            "name": "hi",
            "number": 10
        },
        {
            "name": "bye",
            "number": 9
        },
        {
            "name": "tata",
            "number": 8
        }
        ...
    ]
}
</code></pre>
<p>Hope it helps.</p>
</div>
<span class="comment-copy">This is not Django-related in any way.</span>
<span class="comment-copy">@bruno desthuilliers in django i do not have model and serializer so i have to like this only or otherwise i need to write my own annotate function to return number of count based on big logic, so i prefer this the way, can you give the some solution please</span>
<span class="comment-copy">This is still not Django-related in any way - you have plain Python objects, the fact it's part of a Django project is totally irrelevant here.</span>
<span class="comment-copy">I would not use <code>obj.__dict__</code> - it's ok for the given toy example but in real life it might expose attributes you don't want to be part of the result (and / or that might not be JSON-serializable).</span>
<span class="comment-copy">Yeah, It was just for this purpose. You are absolutely right, though.  There should be a method that grabs the internal attributes dictionary and just returns the ones of interest.</span>
