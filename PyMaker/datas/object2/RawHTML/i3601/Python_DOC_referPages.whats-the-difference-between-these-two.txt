<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15974787/difference-between-import-tkinter-as-tk-and-from-tkinter-import">Difference between import tkinter as tk and from tkinter import</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/2349991/how-to-import-other-python-files">How to import other Python files?</a>
<span class="question-originals-answer-count">
                    14 answers
                </span>
</li>
</ul>
</div>
<p>Can someone please explain the difference between</p>
<pre><code>import tkinter as tk
</code></pre>
<p>and</p>
<pre><code>from tkinter import *
</code></pre>
<p>It would be so great if someone could give and example where the same task is
achieved (or an object is created) by using these two statements seperately</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply saying, the import tkinter as tk will initiate a tk instance of tkinter in your file which can call it's functions by writing something like</p>
<pre><code>tk.Entry()
</code></pre>
<p>Which will save you from typing the long name.</p>
<p>while from tkinter import * will import all the names defined under the <code>__all__</code> variable, so you can call the same function as</p>
<pre><code>Entry()
</code></pre>
<p>You should read <a href="https://docs.python.org/3/reference/simple_stmts.html#the-import-statement" rel="nofollow noreferrer">This</a> to understand more</p>
</div>
<div class="post-text" itemprop="text">
<p>Both are importing the same package. The primary difference is that your first line is importing the package tkinter and then referring to it with "tk", which would allow you to call its functions using that different name. I don't have any experience with tkinter, but a good example I can give would be with numpy or pandas. A lot of functions in numpy, like numpy.random.randn() could instead be written with a shorthand name using "import as", like so:</p>
<pre><code>import numpy as np
np.random.randn()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The differences seams little at first however <code>import tkinter as tk</code> is actually a much better option for one big reason.</p>
<p>By importing as something specific you make all the methods from that import required a prifix. This prevents methods from overriding or being overwritten accidentally.</p>
<p>For example if I have a library that contains a <code>time()</code> method and say lest call this library <code>custom_timer</code> and then say I need to import the built in <code>time</code> method also.</p>
<p>If use <code>*</code> for my import we have a problem.</p>
<pre><code>from custom_timer import * # importing all modules including time() form this library.
import time # importing built in time().
</code></pre>
<p>What will end up happening is the 2nd import will override the time method from the first import. To prevent accidents like this we can simple <code>import as your_prefix_here</code>.</p>
<p>Take this example.</p>
<pre><code>import custom_timer as ct # importing this library as ct.
import time # importing built in time().
</code></pre>
<p>In this case we will have 2 distinctive imports for time that do not override each other.</p>
<p>One is <code>ct.time()</code> and the other is <code>time()</code></p>
<p>Because libraries like tkinter contain many methods it is safer to use <code>import as</code> verses <code>import *</code> for the above reason.</p>
<p>All that said if you are in a hurry and just want to throw something together to test an idea or answer a question using <code>from tkinter import *</code> is fine for much smaller applications. Personally I try to use <code>import tkinter as tk</code> for everything I do for good practice.</p>
<p>As for your request for 2 examples see below.</p>
<p>With <code>tk</code> import:</p>
<pre><code>import tkinter as tk

root = tk.Tk()

tk.Label(root, text="I am a label made using tk prefix.")

root.mainloop()
</code></pre>
<p>With <code>*</code> import:</p>
<pre><code>from tkinter import *

root = Tk()

Label(root, text="I am a label made in tkinter with the * import.")

root.mainloop()
</code></pre>
</div>
<span class="comment-copy">@ndmeiri My duplicate is also about tkinter :)</span>
<span class="comment-copy">The man thing you should take from this is that <code>import tkinter as tk</code> is the prefered method. This way you prevent your imports from being overridden or overriding other methods in the namespace.</span>
