<div class="post-text" itemprop="text">
<p>Is there an analogy to <code>myStr.find(subStr, startInd)</code> in order to get the index of the first occurrence of <code>subStr</code> <strong>before</strong> my <code>startInd</code>. Like taking step -1 instead of 1 from <code>startInd</code>?</p>
<p><strong>Edit</strong></p>
<p>Here an example:</p>
<pre><code>myStr = "(I am a (cool) str)"

startInd = 9  # print(myStr[startInd]) -&gt; "c"

print(myStr.find(")", startInd))  # -&gt; 13
print(myStr.findBefore("(", startInd))  # -&gt; 8
</code></pre>
<p><strong>Edit II</strong></p>
<p>The following code solves my problem but it is not really convenient. Wanted to ask if there is a simple method to fullfill that task</p>
<pre><code>startInd = 9

myStr = "(I am a (cool) str)"

print(myStr.find(")", startInd))  # -&gt; 13
print(len(myStr[::-1]) - myStr[::-1].find("(", len(myStr[::-1]) - startInd - 1) - 1)  # -&gt; 8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.find" rel="nofollow noreferrer"><code>str.find</code></a> takes an optional <code>end</code> parameter:</p>
<blockquote>
<p><strong>str.find(sub[, start[, end]])</strong></p>
<p>Return the lowest index in the string where substring sub is found within the slice s[start:end]. Optional arguments start and end are
  interpreted as in slice notation.</p>
</blockquote>
<p>So, if you want <code>subStr</code> to <em>end</em> before <code>endIndex</code>, you can use <code>myStr.find(subStr, 0, endIndex)</code>:</p>
<pre><code>&gt;&gt;&gt; 'hello world'.find('ello', 0, 5)
1
&gt;&gt;&gt; 'hello world'.find('ello', 0, 4)  # "ello" ends at index 5, so it's not found
-1
&gt;&gt;&gt; 'hello world'[0:4]
'hell'
</code></pre>
<p>If you want <code>subStr</code> to <em>start</em> anywhere before <code>endIndex</code>, you have to use <code>myStr.find(subStr, 0, endIndex + len(subStr))</code> instead:</p>
<pre><code>&gt;&gt;&gt; 'hello world'.find('ello', 0, 1 + len('ello'))
1
&gt;&gt;&gt; 'hello world'.find('ello', 0, 0 + len('ello'))  # it starts at index 1, so it's not found
-1
</code></pre>
</div>
<span class="comment-copy">Are you just looking for <a href="https://docs.python.org/3/library/stdtypes.html#str.rfind" rel="nofollow noreferrer"><code>rfind</code></a>?</span>
<span class="comment-copy">@abarnert no not quite. I have added an example to my question to make it more clear what I mean.</span>
