<div class="post-text" itemprop="text">
<p>I am trying to creating a python array and have problems with the following code</p>
<pre><code>def __init__(self, size):
    assert size&gt;0, "Array size must be &gt; 0"
    self._size = size
    # Create the array structure using the ctypes module.

    arraytype = ctypes.py_object * size
    self._elements = arraytype()
</code></pre>
<p>In the initialization, it uses ctypes to create an array and I don't really understand the last two columns. I tried to change them into one line</p>
<pre><code>self._elements = ctypes.py_object() * size
</code></pre>
<p>But it doesn't work and gives me the error</p>
<pre><code>TypeError: unsupported operand type(s) for *: 'py_object' and 'int'
</code></pre>
<p>Could anyone explain it for me?</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><code>ctypes.py_object</code> is a type</li>
<li><code>ctypes.py_object * size</code> is a type</li>
<li><code>ctypes.py_object()</code> is an instance of a type</li>
</ul>
<p>What you want to do is take the <code>ctypes.py_object() * size</code> <em>type</em> first, and then <em>instantiate</em> it:</p>
<pre><code>self._elements = (ctypes.py_object() * size)()
</code></pre>
<p>Although you probably want to go with a Python list, I'm not sure you need a ctypes array. Example:</p>
<pre><code>self._elements = [None] * size
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you want to mutiple with <code>()</code> simple remove parentheses and it will work</p>
<pre><code>self._elements = ctypes.py_object * size
</code></pre>
</div>
<span class="comment-copy">To combine those two lines into one you'd do <code>self._elements = (ctypes.py_object * size)()</code>. But why are you using <code>ctypes</code> to create an array?</span>
<span class="comment-copy">BTW, you normally raise <code>ValueError</code> when a function or method is passed invalid args. <code>assert</code> shouldn't be used to detect bad data, it should only be used to detect faulty logic in your program. That is, if <code>AssertionError</code> is raised that means the program is broken and needs to be fixed. But I guess that may be what it <i>is</i> doing in this particular case.</span>
<span class="comment-copy">Another option is an <a href="https://docs.python.org/3/library/array.html#module-array" rel="nofollow noreferrer"><code>array.array</code></a>, although they are restriceted to simple numeric types &amp; strings. And it looks like the OP wants an array of generic <code>py_object</code>s; perhaps they're interacting with some Python-aware C interface...</span>
<span class="comment-copy">I am wondering what why we can multiply some type with an integer. What does it mean?</span>
<span class="comment-copy">@Charlotte: multiplying a ctype with an integer is declaring an array. <code>ctypes.c_int * 4</code> is an array of 4 integers</span>
<span class="comment-copy">Thanks. It helps a lot. So can I say this kind of operation only works for ctype because I try to multiply an integer with other types(eg.list,int,etc) but it will deliver the error "unsupported operand type(s) for :"?</span>
<span class="comment-copy">@Charlotte: yes, it only works with ctypes. Builtin types (int, str, list, tuple, ...) don't support multiplication. Of course there might be other libraries that supports this feature, but this is not the case for builtin types.</span>
