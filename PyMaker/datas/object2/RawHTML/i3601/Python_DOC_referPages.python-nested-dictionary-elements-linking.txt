<div class="post-text" itemprop="text">
<p>I am trying to input marks of n students and find the average of a particular student. I am using nested dictionary items and trying to take input in a single line of code. The marks range from 0 to 100 only and i need to do this before linking to keys of dictionary. Below is my code,I am failing the condition of range (0 to 100). Please help.</p>
<pre><code>if __name__ == '__main__':
n = int(input())
if n in range(2,11):
    student_marks = {}
    for _ in range(n):
        line = input().split()
        name = line[0]
        scores =  line[1:]
        scores = list(map(float, scores))

        truth,x,y = 0,0,0
        y = len(scores)
        for x in scores:
            if 0&lt;=x&lt;=100:
                truth = truth+1

        if(truth == y):
            student_marks[name] = scores
        else:
            print("Marks out of range")

    query_name = input()

    add = 0
    m=0
    for s in student_marks[query_name]:
        m = m+1
    if x in student_marks:
        if x == query_name :
            for y in student_marks[query_name]:
                add = add + y
            average = float(add/m)
        else:
            print("Name doesnt exist.Enter correct name and start again")
    else:
         print("The person not ideally linked,since incorrect marks entered,Enter properly and try again")

    print("%.2f" % average)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of <code>if x in range(0,101)</code>, you should use <code>if x &gt;= 0 and x &lt;= 100</code> or as @mata suggested you could use <code>if 0 &lt;= x &lt;= 100</code>.</p>
<p><code>x in range(0, 101)</code> returns <code>True</code> only when <code>x</code> is an integer and lies between 0 and 100 (inclusive).   </p>
</div>
<div class="post-text" itemprop="text">
<p><strong>@Mahantesh</strong>, as I read and understood from your code, I've tried to implement your problem in my way. I have taken varible names same as you've taken. </p>
<blockquote>
<p>I've also used <code>json</code> module for pretty printing the dictionary.</p>
</blockquote>
<p>Please check the below code and let me know if you need any changes.</p>
<blockquote>
<p>Don't forget to check the output.</p>
</blockquote>
<pre><code>import json 

def get_averages():
    student_marks = {};
    successful_trials = 0; # IT IS NOT REQUIRED, JUST TO MAKE PROGRAM USER FRIENDLY

    while True:
        try:
            # CREATE A LIST 
            # ['Rishikesh', '90', '95', '90', '80', '85', '70']
            line = input('\n('+ str(successful_trials + 1) + ') ENTER NAME SEPARATED BY 1 OR MORE SCORES SPACE SEPARATED (TYPE exit TO STOP) &gt;&gt;&gt; ').split(); 
            if len(line) &gt; 0: 
                # NAME OF STUDENT  =&gt; 'Rishikesh'
                name = line[0]; 

                if name.lower() == 'exit': # IF USER ENTERS ANYTHING STARTING WITH exit (stop iteration)
                    break

                # SCORES OF A STUDENT (INTEGERS) =&gt; [90, 95, 90, 80, 85, 70]
                scores = [int(number) if (int(number) &gt;= 0 and int(number) &lt;= 100) else -1 for number in line[1:]] 

                if not scores:
                    print("\nERROR: INPUT SHOULD HAVE  AT LEAST 1 OR MORE SCORES (SPACE SEPARATED)")
                    continue    
            else:
                print("\nERROR: INPUT SHOULD HAVE NAME FOLLOWED BY AT LEAST 1 OR MORE SCORES (SPACE SEPARATED)")
                continue

            if -1 not in scores: # SCORES ARE IN RANGE MEANS IT IS NOT LIKE [90, -1, 90, -1, 85, 70]
                student_marks[name] = {
                    "scores": scores,
                    "average": sum(scores) / len(scores) # AVERAGE
                }
            else:
                print("\nERROR: ENTERED SCORES ARE NOT IN RANGE")
                continue    

            successful_trials += 1; # IF EVERYTHING PASSED
        except Exception as error:
            print('\nERROR OCCURED: ', error)
            print("\nPLEASE ENTER CORRECT VALUE")
            continue

    return student_marks; # DICTIONARY OF DICTIONARIES

if __name__ == "__main__":
    # CALL TO get_averages()
    student_marks = get_averages();

    # PRETTY PRINTING DICTIONARY USING json MODULE
    print(json.dumps(student_marks, indent=4));
</code></pre>
<h3>» Output1</h3>
<pre><code>(py3.6) H:\RishikeshAgrawani\Projects\Sof\EntrySof&gt;python EntrySof.py

(1) ENTER NAME SEPARATED BY 1 OR MORE SCORES SPACE SEPARATED (TYPE exit TO STOP) &gt;&gt;&gt; student1 56 67 35 45

(2) ENTER NAME SEPARATED BY 1 OR MORE SCORES SPACE SEPARATED (TYPE exit TO STOP) &gt;&gt;&gt; student2 67 45  35 24

(3) ENTER NAME SEPARATED BY 1 OR MORE SCORES SPACE SEPARATED (TYPE exit TO STOP) &gt;&gt;&gt; student3 101 56

ERROR: ENTERED SCORES ARE NOT IN RANGE

(3) ENTER NAME SEPARATED BY 1 OR MORE SCORES SPACE SEPARATED (TYPE exit TO STOP) &gt;&gt;&gt; student3 100 0 90

(4) ENTER NAME SEPARATED BY 1 OR MORE SCORES SPACE SEPARATED (TYPE exit TO STOP) &gt;&gt;&gt; student4 ok new

ERROR OCCURED:  invalid literal for int() with base 10: 'ok'

PLEASE ENTER CORRECT VALUE

(4) ENTER NAME SEPARATED BY 1 OR MORE SCORES SPACE SEPARATED (TYPE exit TO STOP) &gt;&gt;&gt; student4 70 40 50 70

(5) ENTER NAME SEPARATED BY 1 OR MORE SCORES SPACE SEPARATED (TYPE exit TO STOP) &gt;&gt;&gt; exit
{
    "student1": {
        "scores": [
            56,
            67,
            35,
            45
        ],
        "average": 50.75
    },
    "student2": {
        "scores": [
            67,
            45,
            35,
            24
        ],
        "average": 42.75
    },
    "student3": {
        "scores": [
            100,
            0,
            90
        ],
        "average": 63.333333333333336
    },
    "student4": {
        "scores": [
            70,
            40,
            50,
            70
        ],
        "average": 57.5
    }
}
</code></pre>
<h3>» Output2</h3>
<pre><code>(py3.6) H:\RishikeshAgrawani\Projects\Sof\EntrySof&gt;python EntrySof.py

(1) ENTER NAME SEPARATED BY 1 OR MORE SCORES SPACE SEPARATED (TYPE exit TO STOP) &gt;&gt;&gt; hygull 50 60 70

(2) ENTER NAME SEPARATED BY 1 OR MORE SCORES SPACE SEPARATED (TYPE exit TO STOP) &gt;&gt;&gt; gurudev 78 22 50 55 45

(3) ENTER NAME SEPARATED BY 1 OR MORE SCORES SPACE SEPARATED (TYPE exit TO STOP) &gt;&gt;&gt; user1 60 -5 9

ERROR: ENTERED SCORES ARE NOT IN RANGE

(3) ENTER NAME SEPARATED BY 1 OR MORE SCORES SPACE SEPARATED (TYPE exit TO STOP) &gt;&gt;&gt; user2 100 40 kite

ERROR OCCURED:  invalid literal for int() with base 10: 'kite'

PLEASE ENTER CORRECT VALUE

(3) ENTER NAME SEPARATED BY 1 OR MORE SCORES SPACE SEPARATED (TYPE exit TO STOP) &gt;&gt;&gt; user3 90 90 100 50

(4) ENTER NAME SEPARATED BY 1 OR MORE SCORES SPACE SEPARATED (TYPE exit TO STOP) &gt;&gt;&gt; exit
{
    "hygull": {
        "scores": [
            50,
            60,
            70
        ],
        "average": 60.0
    },
    "gurudev": {
        "scores": [
            78,
            22,
            50,
            55,
            45
        ],
        "average": 50.0
    },
    "user3": {
        "scores": [
            90,
            90,
            100,
            50
        ],
        "average": 82.5
    }
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Below is my code and it worked perfectly fine.</p>
<pre><code>if __name__ == '__main__':
    n = int(input())
    if n in range(2,11):
        student_marks = {}
        for _ in range(n):
            line = raw_input().split()
            name = line[0]
            scores =  line[1:]
            scores = list(map(float, scores))

            truth,x,y = 0,0,0
            y = len(scores)
            for x in scores:
                if 0&lt;=x&lt;=100:
                    truth = truth+1

            if(truth == y):
                student_marks[name] = scores
            else:
                print("Marks out of range")

        query_name = raw_input()

        add = 0
        m=0
        """for s in student_marks[query_name]:
            m = m+1"""
        #if x in student_marks:
        for x in student_marks:
            if x == query_name:
                y = len(student_marks[query_name])
                for g in (student_marks[query_name]):
                    add = add + g
                average = float(add/y)
                print("%.2f" % average)
</code></pre>
</div>
<span class="comment-copy">It's ok <code>n</code> is number of students.Can you please explain, each students has how many subjects?</span>
<span class="comment-copy">any number of subjects</span>
<span class="comment-copy">Okay so number of students is also not fixed (any number of students)?</span>
<span class="comment-copy">Better: <code>0 &lt;= x &lt;= 100</code></span>
<span class="comment-copy">Edited! Here is how this works: <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-comp_operator" rel="nofollow noreferrer">docs.python.org/3/reference/…</a></span>
<span class="comment-copy">I didnt exactly get the logic. Can you please explain giving example? X is always an integer.</span>
<span class="comment-copy"><code>x</code> is not always an integer, you can casted it into float here - <code>scores = list(map(float, scores))</code></span>
<span class="comment-copy">ok thanks. Is it possible to raise an error after the values are input through input().split() if it doesnt meet our condition ? Suppose I enter 103 and the program before linking should through error "Marks out of range " and ask me to input correct value at that position . Is it possible ?</span>
<span class="comment-copy">Thank you very much.Even I successfully implemented my same code.</span>
<span class="comment-copy">Okay <b>@Mahantesh</b>, it's excellent.</span>
