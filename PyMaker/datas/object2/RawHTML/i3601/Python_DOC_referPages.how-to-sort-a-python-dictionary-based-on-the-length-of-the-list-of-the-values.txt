<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/19729928/python-sort-a-list-by-length-of-value-in-tuple">Python sort a List by length of value in tuple</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>As a contrived example, I have a dictionary that's set up something like this:</p>
<pre><code>{
  'a': ['a', 'b'],
  'b': ['a', 'b', 'c'],
  'c': ['a', 'b', 'c', 'd']
}
</code></pre>
<p>I would like to sort the dictionary by the length of the list (which is the value of each entry) in descending order, so the result should be this:</p>
<pre><code>{
  'c': ['a', 'b', 'c', 'd'],
  'b': ['a', 'b', 'c'],
  'a': ['a', 'b']
}
</code></pre>
<p>I've tried to do something like this:</p>
<pre><code>sorted_functions = sorted(
  functions.items(),      # Sort the actual items of the dictionary
  key=len(                # Sort on the length of
    operator.itemgetter(  #   the value of the entry, which is
      slice(0, None)      #   a list slice of the whole list
    )
  ),
  reverse=True            # Sort the values in descending order
)
</code></pre>
<p>However, I get this error:</p>
<pre><code>TypeError: object of type 'operator.itemgetter' has no len()
</code></pre>
<p>In the REPL, I tried the following:</p>
<pre><code>&gt;&gt;&gt; d = { 'a': ['a'], 'b': ['a', 'b'] }
&gt;&gt;&gt; itemgetter(slice(0, None))(d['a'])
['a']
&gt;&gt;&gt; len(itemgetter(slice(0, None))(d['a']))
1
&gt;&gt;&gt; itemgetter(slice(0, None))(d['b'])
['a', 'b']
&gt;&gt;&gt; len(itemgetter(slice(0, None))(d['b']))
2
</code></pre>
<p>...so I'm able to get the length of the list, but in the <code>sorted()</code> function, it doesn't work.</p>
<p>What do I need to do differently to get the <code>sorted()</code> function to sort the way I want it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>sorted</code> with <code>key</code>.</p>
<p><strong>Ex:</strong></p>
<pre><code>d = {
  'a': ['a', 'b'],
  'b': ['a', 'b', 'c'],
  'c': ['a', 'b', 'c', 'd']
}

print( sorted(d.items(), key= lambda x: len(x[1]), reverse=True) )
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[('c', ['a', 'b', 'c', 'd']), ('b', ['a', 'b', 'c']), ('a', ['a', 'b'])]
</code></pre>
<p><em>If want to maintain the order.</em></p>
<pre><code>import collections
d = collections.OrderedDict(sorted(d.items(), key= lambda x: len(x[1]), reverse=True))
print( d )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Use an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a></h1>
<p>If you want you <code>dict</code> to be ordered, you should use an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a>. You can sort the items from the first <code>dict</code> with a <code>key</code>.</p>
<h2>Code</h2>
<pre><code>from collections import OrderedDict

d = {
  'a': ['a', 'b'],
  'b': ['a', 'b', 'c'],
  'c': ['a', 'b', 'c', 'd']
}

ordered_d = OrderedDict(sorted(d.items(), key=lambda i: -len(i[1])))

print(ordered_d)
</code></pre>
<h2>Output</h2>
<pre><code>OrderedDict([('c', ['a', 'b', 'c', 'd']), ('b', ['a', 'b', 'c']), ('a', ['a', 'b'])])
</code></pre>
<h1>Python 3.6+ <code>dict</code> are ordered</h1>
<p>Although, if using Python 3.6+, insertion ordered is preserved for <code>dict</code>. This is specific to the CPython implementation and will only be an <a href="https://docs.python.org/3.7/whatsnew/3.7.html" rel="nofollow noreferrer">official language feature starting at version 3.7</a>.</p>
<h2>Code</h2>
<pre><code>d = {
  'a': ['a', 'b'],
  'b': ['a', 'b', 'c'],
  'c': ['a', 'b', 'c', 'd']
}

ordered_d = dict(sorted(d.items(), key=lambda i: -len(i[1])))

print(ordered_d)
</code></pre>
<h2>Output</h2>
<pre><code>{'c': ['a', 'b', 'c', 'd'], 'b': ['a', 'b', 'c'], 'a': ['a', 'b']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>lambda</code>. Like : </p>
<pre><code>my_dict = {
  'a': ['a', 'b'],
  'b': ['a', 'b', 'c'],
  'c': ['a', 'b', 'c', 'd']
}
sorted_list = sorted(my_dict.items(), key= lambda value: len(value[1]), reverse=True) #you will get a sorted list,reverse=True will bring longer lists to appear first
print(sorted_list)
sorted_dict = {x[0]:x[1] for x in sorted_list} #convert your sorted list into dictionary
print(sorted_dict)
</code></pre>
<p>Or you can make it without using dict comprehension as Aran-Fey said: </p>
<pre><code>sorted_dict = dict(sorted_list)
</code></pre>
</div>
<span class="comment-copy">Dictionaries are unordered.</span>
<span class="comment-copy">What type of dictionary do you have, that you're expecting it to retain a sorted order?  A Python <code>dict</code> is unsorted by definition.  You can sort the elements with a specified key <code>len(value)</code>, but you'll have to put the result in a list, SortedDict, or other structure.</span>
<span class="comment-copy">I understand that dictionaries are unordered, but the goal is to write it to a file in an ordered fashion.</span>
<span class="comment-copy">{k: v for k, v in sorted(d.items(), key= lambda x: len(x[1]), reverse=True)}</span>
<span class="comment-copy">Note also that in your final line your call len on the whole expression - ie on the <i>result</i> of itemgetter - whereas in your original code you call len on itemgetter itself.</span>
<span class="comment-copy">Ah, I was wondering how to access the entire list but still reference a function instead of a value, and I thought about using lambdas but wasn't sure how to go about it in Python, but this definitely makes sense. Thanks!</span>
<span class="comment-copy">@homersimpson You don’t need to “use lambdas” if that confuses you. A lambda just defines a function, just like a def. Sp if you know what you want your key function to do, you can write <code>def len_key(item): return len(item[1])</code>, and then use it like <code>sorted(d.items(), key=len_key)</code>.</span>
<span class="comment-copy">Note: <code>OrderedDict</code> not necessary with Python 3.6+. The dict in these versions keep insertion order by default.</span>
<span class="comment-copy">@dawg while technically true, the fact that this is implementation-specific means that it shouldn't be relied upon.  Safer to use OrderedDict until 3.7, at which time your comment will become universally accurate.</span>
<span class="comment-copy">You can replace the dict comprehension with <code>dict(sorted_list)</code> (or better <code>OrderedDict(sorted_list)</code>).</span>
<span class="comment-copy">I have updated my answer. Thanks for your notice.</span>
