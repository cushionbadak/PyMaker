<div class="post-text" itemprop="text">
<p>I am experimenting with <a href="https://docs.python.org/3.4/library/multiprocessing.html?highlight=process" rel="nofollow noreferrer">multiprocessing in Python</a>, however, I am having trouble with creating some <a href="https://docs.python.org/2/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow noreferrer">shared memory</a>. Take the following example that illustrates my problem:</p>
<p>In reference to <a href="https://research.wmz.ninja/articles/2018/03/on-sharing-large-arrays-when-using-pythons-multiprocessing.html" rel="nofollow noreferrer">the following</a> (slightly different as he uses a matrix full of floats, but same principle), I want to convert a numpy matrix of strings into a <a href="https://docs.python.org/2/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow noreferrer">shared memory</a> space for processes to use. I have the following:</p>
<pre><code>from ctypes import c_wchar_p
import numpy as np
from multiprocessing.sharedctypes import Array

input_array = np.array([['Red', 'Green', 'Blue', 'Yellow'],
                        ['Purple', 'Orange', 'Cyan', 'Pink']]).T

shared_memory = Array(c_wchar_p, input_array.size, lock=False) # Equivalent to just using a RawArray
np_wrapper = np.frombuffer(shared_memory, dtype='&lt;U1').reshape(input_array.shape)
np.copyto(np_wrapper, input_array)
print(np_wrapper)
</code></pre>
<p>However, the <code>np_wrapper</code> only has the first character of each string:</p>
<pre><code>[['R' 'P']
 ['G' 'O']
 ['B' 'C']
 ['Y' 'P']]
</code></pre>
<p>Things I have tried to rectify the problem:</p>
<ol>
<li>I tried changing the <code>dtype</code> of the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.frombuffer.html" rel="nofollow noreferrer"><code>frombuffer</code></a> function from <code>&lt;U1</code> to <code>&lt;U6</code>, which is the <code>dtype</code> of the <code>input_array</code>. However, it throws the following exception:</li>
</ol>
<blockquote>
<p>ValueError: buffer size must be a multiple of element size</p>
</blockquote>
<ol start="2">
<li>I tried using a <code>dtype</code> of <a href="https://docs.scipy.org/doc/numpy/user/basics.types.html" rel="nofollow noreferrer"><code>int64</code></a> with the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.frombuffer.html" rel="nofollow noreferrer"><code>frombuffer</code></a> function because my <code>shared_memory</code> array is of type <a href="https://docs.python.org/3/library/ctypes.html#fundamental-data-types" rel="nofollow noreferrer"><code>c_wchar_p</code></a> (i.e. string pointers) and I am on a 64-bit Windows 10 system. However, it throws the following exception:</li>
</ol>
<blockquote>
<p>ValueError: cannot reshape array of size 4 into shape (4,2)</p>
</blockquote>
<p>I am extremely confused why my typing is wrong here. <strong>Does anyone have any insight on how to fix this problem?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>It may help to understand what this array of strings contains:</p>
<pre><code>In [643]: input_array = np.array([['Red', 'Green', 'Blue', 'Yellow'],
     ...:                         ['Purple', 'Orange', 'Cyan', 'Pink']]).T
     ...: 
     ...:                         
In [644]: input_array.size
Out[644]: 8
In [645]: input_array.itemsize
Out[645]: 24
In [646]: input_array.nbytes
Out[646]: 192
</code></pre>
<p>Because it is a transpose, the shape and strides differ from the input array, but the strings are in the original order.</p>
<pre><code>In [647]: input_array.__array_interface__
Out[647]: 
{'data': (139792902236880, False),
 'strides': (24, 96),
 'descr': [('', '&lt;U6')],
 'typestr': '&lt;U6',
 'shape': (4, 2),
 'version': 3}
</code></pre>
<p>My guess is that <code>Array</code> should be defined with <code>nbytes</code> rather than <code>size</code>.</p>
</div>
<div class="post-text" itemprop="text">
<h1>Preface</h1>
<p><strong>Before I detail my solution</strong>, I want to preface my answer with some helpful information. The function <code>memoryview()</code> in python proved to be extremely useful in getting the full picture. For example, run the following after specify the dtype of <code>input_array</code> as <code>dtype='S6'</code> (b/c less bytes to examine):</p>
<pre><code>print(bytes(memoryview(input_array)))
</code></pre>
<p>Then following results are yielded:</p>
<pre><code>b'Red\x00\x00\x00PurpleGreen\x00OrangeBlue\x00\x00Cyan\x00\x00YellowPink\x00\x00'
</code></pre>
<p>We can see by the following output that each entry in the <code>input_array</code> has a length of 6 bytes and is laid out in a contiguous block of memory. This tells us that our Numpy array is not just 8 pointers to strings out in memory.</p>
<p>Turning back to when the <code>dtype</code> was <strong>not</strong> specified, @hpaulj additionally provided even more helpful insight. With having read the <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/arrays.dtypes.html" rel="nofollow noreferrer">dtype documentation</a>, our array has type <code>&lt;U6</code>, which translates to as follows:</p>
<pre><code>&lt;  -- Little-Endian (b/c I am on an Intel-based system)
U  -- Unicode String (Remember with 4 bytes per Unicode String)
6  -- 24 bytes per entry in the array.
</code></pre>
<hr/>
<h1>Solution</h1>
<h3>TLDR; Here is the solution:</h3>
<pre><code>from ctypes import c_char
import numpy as np
from multiprocessing.sharedctypes import Array

input_array = np.array([['Red', 'Green', 'Blue', 'Yellow'],
                        ['Purple', 'Orange', 'Cyan', 'Pink']]).T

shared_memory = Array(c_char, input_array.size * input_array.itemsize, lock=False)
np_wrapper = np.frombuffer(shared_memory, dtype=input_array.dtype).reshape(input_array.shape)
np.copyto(np_wrapper, input_array)

print(shared_memory[:])
print(np_wrapper)
</code></pre>
<h3>Solution Explanation:</h3>
<p>The first incorrect aspect of the initial code was the typing information for the initial <code>shared_memory</code> array. Our Numpy array is not an array of pointers, but rather 8 strings compacted contiguously next to each other (with some padding dictated by the longest element). Therefore, using the type <code>c_wchar_p</code> (i.e. a string pointer) was <strong>not</strong> correct. I chose <code>c_char</code> over <code>c_wchar</code> because <code>c_char</code> is guaranteed to be one byte, where as <code>c_wchar</code> is not (<a href="https://docs.python.org/3/library/ctypes.html#fundamental-data-types" rel="nofollow noreferrer">see documentation for further details</a>).</p>
<p>Next, one needs to specify the entire size of the shared memory. Because I chose <code>c_char</code> as my type, I will be specifying the number of bytes. The length is given by the following: </p>
<blockquote>
<p>There are 8 elements (<code>input_array.size</code>) with each element contain 24 bytes (<code>input_array.itemsize</code>). Therefore, there are 8 * 24 = 192 bytes total in our shared memory.</p>
</blockquote>
<p>Finally, when using the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.frombuffer.html" rel="nofollow noreferrer"><code>frombuffer</code></a> function in Numpy, be sure to specify the <strong>correct</strong> <code>dtype</code> because this is how Numpy will be dividing up and interpreting the arbitrary bytes coming in. Just simply use the same <code>dtype</code> of the <code>input_array</code> to complete the translation. </p>
<p>And finally, once the <code>copyto</code> has commenced, the <code>shared_memory</code> will have been successfully configured!</p>
</div>
<span class="comment-copy">In <code>input_array</code>, the strings are represented as <code>U6</code> (24 bytes) items, all packed in the array's <code>data_buffer</code>.  They don't reference strings elsewhere in memory, as they would in a list (or object dtype array).  Check the <code>input_array.itemsize</code>.</span>
<span class="comment-copy">Yeah, I already figured out the solution, give me a second to post my solution (literally typing it as we speak)</span>
