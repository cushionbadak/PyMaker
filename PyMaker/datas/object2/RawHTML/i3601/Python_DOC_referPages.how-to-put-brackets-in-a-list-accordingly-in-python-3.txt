<div class="post-text" itemprop="text">
<p>I am trying to put brackets in a list. This is the code:</p>
<pre><code>list_1 = [1,2,2]
list_2 = [1,2,3,4,5]
</code></pre>
<p>I want to use the numbers in 'list_1' to put brackets on 'list_2'. Like this:</p>
<pre><code>[[1],[2,3],[4,5]]
</code></pre>
<p>How can i achieve this using Python 3?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an approach that uses an <a href="https://anandology.com/python-practice-book/iterators.html" rel="nofollow noreferrer"><code>iter</code>ator</a> for a change.</p>
<pre><code>list_1 = [1,2,2]
list_2 = [1,2,3,4,5]

it = iter(list_2)
res = []
for take in list_1:
  res.append([next(it) for _ in range(take)])
print(res)  # -&gt; [[1], [2, 3], [4, 5]]
</code></pre>
<p>Of course, a list-comprehension version of that exists as well<sup>1</sup>:.</p>
<pre><code>it = iter(list_2)
res = [[next(it) for _ in range(take)] for take in list_1]
</code></pre>
<hr/>
<p>Finally, as @Chris_Rands notes in the comments below, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>islice</code></a> from the extremely useful <a href="https://docs.python.org/3/library/itertools.html#module-itertools" rel="nofollow noreferrer"><code>itertools</code></a> module. It takes care of the iterator-creating part of the code above and is this thus more compact.</p>
<pre><code>import itertools


res = [list(itertools.islice(list_2, take)) for take in list_1]
print(res)  # -&gt; [[1], [2, 3], [4, 5]]
</code></pre>
<p>==========================================================================</p>
<p><sup>1</sup> <em>Just remember to re-create the iterator!</em></p>
</div>
<div class="post-text" itemprop="text">
<p>This is one approach.</p>
<pre><code>list_1 = [1,2,2]
list_2 = [1,2,3,4,5]
c = 0
res = []
for i in list_1:
    res.append( list_2[c:c+i] )
    c += i
print(res)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[[1], [2, 3], [4, 5]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>pos = 0
result = []
for amount in list_1:
    result.append(list_2[pos:pos+amount])
    pos += amount
result
# =&gt; [[1], [2, 3], [4, 5]]
</code></pre>
<p>The key is to track the position using cumulative sum of the amounts.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <em>list comprehension.</em> in combination with <em>enumerate</em> function.</p>
<pre><code>list_1 = [1,2,2]
list_2 = [1,2,3,4,5]
flist = [list_2[sum(list_1[0:i]) : sum(list_1[0:i]) + val] for i, val in enumerate(list_1)]
</code></pre>
<p>Output</p>
<pre><code>[[1], [2, 3], [4, 5]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just another simple option:</p>
<pre><code>import numpy as np
cum = np.cumsum([0] + list_1)
[ list_2[i:j] for i,j in zip(cum, cum[1:]) ]

#output
[[1], [2, 3], [4, 5]]
</code></pre>
</div>
<span class="comment-copy">With what "grouping" logic?</span>
<span class="comment-copy">@Attersson <code>list_1</code> contains the lengths of the small, to-be-created sublists.</span>
<span class="comment-copy">Please show what you have tried, and we will be happy to help you fix any problems with your attempt.</span>
<span class="comment-copy">I don't think there's any shorthand logic that can be done for this purpose. For your requirement it has to be done programmatically.</span>
<span class="comment-copy">"brackets in a list"- this semantics concerns me, do you understand that these are lists within the list?</span>
<span class="comment-copy">@Chris_Rands I must admit that I have never felt comfortable using <code>islice</code> because I don't understand it yet.. Feel free to edit the answer to add your version.</span>
<span class="comment-copy">@Chris_Rands Wasn't too hard to understand afterall. Thanks! :)</span>
<span class="comment-copy">Great! Yah conceptually it's very similar to regular (positive) slicing really once you remember the iterator is exhausted of course, anyway I'll clear up my comments above</span>
<span class="comment-copy">Giving him teh codez? <i>Really?</i></span>
<span class="comment-copy">It was fun, and he didn't say "gimme".</span>
<span class="comment-copy">One line: <code>np.split(list_2, np.cumsum(list_1)[:-1])</code></span>
