<div class="post-text" itemprop="text">
<p>I'm trying to create a dictionary that looks something like this (a partial example):</p>
<pre><code>{(1, 1): 'Residential', (2, 1): 'Residential', (3, 1): 'Residential', (1, 2): 'Crafts', (2, 2): 'Crafts', (3, 2): 'Crafts', (4, 1): 'Law, Government', (5, 1): 'Law, Government', (4, 2): 'Public Space', (5, 2): 'Public Space', (6, 1): 'Vice', (6, 2): 'Entertainment'}
</code></pre>
<p>The critical logic that seems to be a problem for some cleverer solutions is that one set of values are spread across 3 keys, another set is spread across 2 keys, and a third set has one key each.</p>
<p>Instead of writing the duplicates multiple times, I'd rather create it programmatically with some kind of comprehension. </p>
<pre><code>USE = dict([(n, 1), "Residential"] for n in range(1, 4))
</code></pre>
<p>This works great, for example, to create the first part of it. I could do:</p>
<pre><code>USE2 = dict([(n, 2), "Crafts"] for n in range(1, 4))
USE.update(USE2)
</code></pre>
<p>This is messy, inelegant, and poor style for constants.</p>
<p>I'm at a loss for any other strategy. </p>
<p>I've tried some forms of serial comprehension:</p>
<pre><code>USE = dict([(n, 1), "Residential"] for n in range(1, 4),
           [(n, 2), "Crafts"] for n in range(1, 4),...
</code></pre>
<p>But this fails because dict() doesn't take more than one argument. </p>
<p>I can't do <a href="https://www.python.org/dev/peps/pep-0448/" rel="nofollow noreferrer">Python 3 unpacking generalizations</a>:</p>
<pre><code>USE = dict(**dict([(n, 1), "Residential"] for n in range(1, 4)),
           **dict([(n, 2), "Crafts"] for n in range(1, 4)),...
</code></pre>
<p>Because that style is restricted to strings for reasons I don't understand. Using strings would require later conversion of the random numbers that will be used to reference the dict, and seems like more of a headache (although, I suppose that depends on if there's an elegant solution at all).</p>
<p>And a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dict comprehension</a> doesn't seem robust enough (full data here: where the first 6 are 3 times as common as the last 6):</p>
<pre><code>space = ["Residential", "Crafts", "Labor", "Shops", "Trade", "Hospitality",
     "Law, Government", "Public Space", "Power", "Manufacture", "Transportation", "Leisure",
     "Vice", "Entertainment", "Storage", "Cultivation", "Academic", "Artists"]
TRY = {(y, x+1): s for x, s in enumerate(space) for y in range(1, 7)}
</code></pre>
<p>This ends up leaving my 6x6 bounds due to the list size. If I modulo x, it ends up overwriting entries. It seems like I'd have to write a specialized function in order to cover the quirky 3/2/1 repetition, which seems unnecessary for what should be possible via some kind of comprehension.</p>
<p>Is there some way to declare a dictionary with this complexity in a single line? If not, what's the proper style to declare this kind of constant?</p>
</div>
<div class="post-text" itemprop="text">
<p>As the saying goes:</p>
<blockquote>
<p>Don't write programs, write programs that write programs.</p>
</blockquote>
<p>What I would suggest is to start an interactive session (or IPython), create the partial dicts and use <code>update</code> to merge them.</p>
<p>Then print out the combined <code>dict</code> and paste it into your source code.</p>
</div>
<div class="post-text" itemprop="text">
<p>The 2D structure you are describing is actually a good fit for numpy arrays:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; 
&gt;&gt;&gt; space = ["Residential", "Crafts", "Labor", "Shops", "Trade", "Hospitality",
...      "Law, Government", "Public Space", "Power", "Manufacture", "Transportation", "Leisure",
...      "Vice", "Entertainment", "Storage", "Cultivation", "Academic", "Artists"]
&gt;&gt;&gt; 
&gt;&gt;&gt; sparr = np.array(space, dtype=object).reshape(3,6).repeat((3,2,1), axis=0)
</code></pre>
<p>Please note how natural this line reads: make an array, reshape to 3 rows, 6 columns each, repeat vertically (axis 0) the first element 3 times, the second twice and the last once.</p>
<p>Result:</p>
<pre><code>&gt;&gt;&gt; sparr
array([['Residential', 'Crafts', 'Labor', 'Shops', 'Trade', 'Hospitality'],
       ['Residential', 'Crafts', 'Labor', 'Shops', 'Trade', 'Hospitality'],
       ['Residential', 'Crafts', 'Labor', 'Shops', 'Trade', 'Hospitality'],
       ['Law, Government', 'Public Space', 'Power', 'Manufacture', 'Transportation', 'Leisure'],
       ['Law, Government', 'Public Space', 'Power', 'Manufacture', 'Transportation', 'Leisure'],
       ['Vice', 'Entertainment', 'Storage', 'Cultivation', 'Academic', 'Artists']], dtype=object)
</code></pre>
<p>This is almost correct, only indexing is zero-based, so we need to add one dummy column and one dummy row:</p>
<pre><code>result = np.full((7, 7), None, dtype=object)
&gt;&gt;&gt; result[1:, 1:] = sparr
&gt;&gt;&gt; 
&gt;&gt;&gt; result
array([[None, None, None, None, None, None, None],
       [None, 'Residential', 'Crafts', 'Labor', 'Shops', 'Trade', 'Hospitality'],
       [None, 'Residential', 'Crafts', 'Labor', 'Shops', 'Trade', 'Hospitality'],
       [None, 'Residential', 'Crafts', 'Labor', 'Shops', 'Trade', 'Hospitality'],
       [None, 'Law, Government', 'Public Space', 'Power', 'Manufacture', 'Transportation', 'Leisure'],
       [None, 'Law, Government', 'Public Space', 'Power', 'Manufacture', 'Transportation', 'Leisure'],
       [None, 'Vice', 'Entertainment', 'Storage', 'Cultivation', 'Academic', 'Artists']], dtype=object)
</code></pre>
<p>Now, this is "duck"-equivalent to your dictionary, lookup-wise. For example:</p>
<pre><code>&gt;&gt;&gt; result[2,1]  # result[(2,1)] also works
'Residential'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're looking for a one-liner comprehension, how about something like this?</p>
<pre><code>a = (3,'Residential',3,'Crafts',2,'Law, Government',2,'Public Space',1,'Vice',1,'Entertainment')
use = dict()
use.update(dict([(n / 2 + 1, s), a[n+1]] for s in range(1, 4) for n in range(0, len(a), 2) ))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That key scheme is a bit arcane. Here's one way to condense it a little. Let (n0, n1) be a key for a given category name. For each name, n1 is constant, but n0 covers a contiguous range, so we can just store the first and last items of that range. Then we use a dict comprehension with a double <code>for</code> loop to expand the condensed version into the dict that you actually want.</p>
<pre><code># Condensed key table.
# Each name in the full table has a 2-tuple key (n0, n1)
# The tuples in `table` are (first_n0, last_n0, n1)
table = {
    'Residential': (1, 3, 1),
    'Crafts': (1, 3, 2),
    'Law, Government': (4, 5, 1),
    'Public Space': (4, 5, 2),
    'Vice': (6, 6, 1),
    'Entertainment': (6, 6, 2),
}

out = {(n0, n1): name for name, (first, last, n1) in table.items()
    for n0 in range(first, last + 1)
}

for k, v in out.items():
    print(f'{k}: {v!r},')
</code></pre>
<p><strong>out</strong></p>
<pre><code>(1, 1): 'Residential',
(2, 1): 'Residential',
(3, 1): 'Residential',
(1, 2): 'Crafts',
(2, 2): 'Crafts',
(3, 2): 'Crafts',
(4, 1): 'Law, Government',
(5, 1): 'Law, Government',
(4, 2): 'Public Space',
(5, 2): 'Public Space',
(6, 1): 'Vice',
(6, 2): 'Entertainment',
</code></pre>
<p>Here's the equivalent of that dict comp using traditional <code>for</code> loops. You may find this version a little more readable.</p>
<pre><code>out = {}
for name, (first, last, n1) in table.items():
    for n0 in range(first, last + 1):
        out[n0, n1] = name
</code></pre>
</div>
<span class="comment-copy">What is wrong with <code>TRY</code>? Is it not the output you're expecting?</span>
<span class="comment-copy">Is a dictionary really the right data structure for this? Have you considered a 2D ragged list instead?</span>
<span class="comment-copy">@Austin in the example above, TRY ends up with: <code>{(1, 1): 'Residential', (2, 1): 'Residential', (3, 1): 'Residential', (4, 1): 'Residential', (5, 1): 'Residential', (6, 1): 'Residential',... (1, 18): 'Artists', (2, 18): 'Artists', (3, 18): 'Artists', (4, 18): 'Artists', (5, 18): 'Artists', (6, 18): 'Artists'}</code> The range I want is (1,1) to (6,6), 18 is right out. Also, "Residential" I want to restrict to (1,1)...(3,1) and this loops everything through 6 iterations.</span>
<span class="comment-copy">@Code-Apprentice I'm not familiar with a 2D ragged list. I may check it out.</span>
<span class="comment-copy">@Zim Often 2D lists are used when every row has the same number of elements. If this isn't the case, the 2D list is called "ragged". For your purposes, this is probably not an important detail, but can give you a potentially relevant search term.</span>
<span class="comment-copy">I think the main reason I dismissed this was due to maintainability -- which isn't even much of a real concern if I really think about it. Even if it were, I could include the construction process in comments if I ever want to make changes that a simple find/replace couldn't suffice for.</span>
<span class="comment-copy">I will definitely play with this, as I enjoy the power of numpy even more than I am intimidated by it.</span>
<span class="comment-copy">Yes, it is! It's a table from <a href="https://bladesinthedark.com/" rel="nofollow noreferrer">an RPG</a> that uses d6 rolls - and this table uses a range of results (1-3, 4-5, 6) for the y-axis.</span>
<span class="comment-copy">@Zim If the ranges are always (1-3, 4-5, 6) then my condensed table can be simplified since it doesn't need to store last_n0.</span>
