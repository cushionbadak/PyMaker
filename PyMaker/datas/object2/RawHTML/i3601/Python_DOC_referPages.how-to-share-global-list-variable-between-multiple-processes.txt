<div class="post-text" itemprop="text">
<p>When I share a global List variable between processes, I find that the variable IDs are the same (Not like string variable, the ID is different). I'm curious if the ID are the same, how each process can set the value separately? When the child process sets the value to <code>['main', 'beijing']</code>, how can the parent process still keep the value <code>['main']</code> unchanged? </p>
<pre><code>#!/usr/bin/python
# -*- coding: utf-8 -*-

from multiprocessing import Pool

oTag = []
print id(oTag)
print oTag

def worker(city):
    global oTag
    oTag.append(city)
    print id(oTag)
    print oTag

def main():
    global oTag
    oTag.append("main")
    print id(oTag)
    print oTag

    cities=["beijing", "shanghai", "guangzhou", "shenzhen"]
    pool = Pool(5)
    pool.map(worker, cities)

    print id(oTag)
    print oTag

if __name__ == "__main__":
    main()
</code></pre>
<p>Here is the output:</p>
<pre><code>4405903088
[]  
4405903088
['main']
4405903088
['main', 'beijing']
4405903088
['main', 'shanghai']
4405903088
['main', 'guangzhou']
4405903088
['main', 'shenzhen']
4405903088
['main']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply because they are different processes!</p>
<p>C Python says that the id of a variable is the address where the variable is located (but even this is an <em>implementation detail</em>). But modern systems use virtual memory: the OS gives memory pages to each process and uses a mapping between <em>virtual addresses</em> used by the processes and the physical memory addresses. As all your processes are <em>clones</em> of each other (I assume fork on Linux or other Unix-like) the virtual memory addresses are the same for all the processes while each point to a distinct set of physical pages.</p>
<p>So every process sees its own copy of the list at the same (virtual) address but they are still different copies stored at different <em>physical</em> addresses.</p>
<p>If you want to share state between different processes using the <code>multiprocessing</code> module, you can use shared memory with <code>multiprocessing.Value</code> or <code>multiprocessing.Array</code>, or a <code>multiprocessing.Manager</code> to hold a list and <code>multiprocessing.Proxy</code> to access it. More details in the <a href="https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow noreferrer">reference doc.</a></p>
</div>
