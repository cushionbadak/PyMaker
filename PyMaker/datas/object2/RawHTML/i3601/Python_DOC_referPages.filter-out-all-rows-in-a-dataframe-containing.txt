<div class="post-text" itemprop="text">
<p>I am trying to filter out all rows in a DataFrame that contain the substring <code>'**'</code>.</p>
<p>I have tried doing this with </p>
<pre><code>df = df[~df['title'].str.contains('**')]
</code></pre>
<p>However I keep getting an error </p>
<blockquote>
<p>error: nothing to repeat at position 0</p>
</blockquote>
<p>and can't figure out why. </p>
</div>
<div class="post-text" itemprop="text">
<p>You have to escape the <code>*</code> character using <code>\</code>, as it is being read as the special regex character <code>*</code> (meaning zero or more). In your case:</p>
<pre><code>df[~df['title'].str.contains('\*\*')]
</code></pre>
<p><strong>Example</strong>:</p>
<pre><code>&gt;&gt;&gt; df
   title
0    xyz
1  x**yz
2     **
3     x*

df[~df['title'].str.contains('\*\*')]

  title
0   xyz
3    x*
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By default <a href="http://pandas.pydata.org/pandas-docs/version/0.22/generated/pandas.Series.str.contains.html" rel="nofollow noreferrer"><code>str.contains</code></a> uses <a href="https://docs.python.org/3/library/re.html#re.search" rel="nofollow noreferrer"><code>re.search</code></a>, which considers <code>*</code> to be a special character (matching 0 or more characters). You want to call with <code>contains('**', regex=False)</code> to avoid using <code>re.search</code> - and instead use the Python <code>in</code> operator. </p>
</div>
<span class="comment-copy">Perhaps the error <i>message</i> might give you, or us, a clue?</span>
<span class="comment-copy">Yeah, error messages usually tell you exactly what's wrong, so we usually don't ignore them.</span>
<span class="comment-copy">Do all your dataframe's rows has a 'column' named <i>title</i>? Anytway: please post  the error and a portion of your dataframe that produces that error</span>
<span class="comment-copy">You probably need to pass <code>regex=False</code> to <code>str.contains</code>.</span>
<span class="comment-copy">thanks @miradulo this solution also worked</span>
<span class="comment-copy">@iceokoli No worries. If performance is a concern in your case, it is worth noting that this method (not using regex) is more than twice as fast for me on large DataFrames.</span>
