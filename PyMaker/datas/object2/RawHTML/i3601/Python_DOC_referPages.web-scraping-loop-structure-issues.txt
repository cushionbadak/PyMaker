<div class="post-text" itemprop="text">
<p>I'm currently writing some code to web scrape from AutoTrader as a practice project. I'm having trouble printing the results I need.</p>
<p>The desired output should be:</p>
<pre><code>Car 1
Specs Car 1
</code></pre>
<p>Instead, it's </p>
<pre><code>Car 1
Specs Car 1
Specs Car 2
Specs Car X

car 2
</code></pre>
<p>Where in my looping structure am I going wrong?</p>
<pre><code>from bs4 import BeautifulSoup 
import requests

page_link = ("https://www.autotrader.co.uk/car-search?sort=price-asc&amp;radius=1500&amp;postcode=lu15jq&amp;onesearchad=Used&amp;onesearchad=Nearly%20New&amp;onesearchad=New&amp;make=AUDI&amp;model=A5&amp;price-to=8500&amp;year-from=2008&amp;maximum-mileage=90000&amp;transmission=Automatic&amp;exclude-writeoff-categories=on")
LN = 0
r = requests.get(page_link)
c = r.content
soup = BeautifulSoup(c,"html.parser")

all = soup.find_all("h2",{"class":"listing-title title-wrap"})
all2 = soup.find_all('ul',{"class" :'listing-key-specs '})
</code></pre>
<p>The above block of code is fine. The below block prints the outputs.</p>
<pre><code>LN = -1
ListTotal = len(all)
for item in all:
    if LN &lt;= ListTotal:
        LN += 1
        print(item.find("a", {"class": "js-click-handler listing-fpa-link"}).text)
        for carspecs in all2:
            print (carspecs.text)
    else:
        break
</code></pre>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Because you're printing every <code>carspec in all2</code> every time</p>
<pre><code>all = ...
all2 = ...

for item in all:
    ...
    for carspecs in all2:  
            # will print everything in all2 on each iteration of all
            print (carspecs.text)
</code></pre>
<p>I suspect you want</p>
<pre><code>for item, specs in zip(all, all2):
    ...
    print(specs.text)
</code></pre>
<hr/>
<p>Just FYI I cleaned up you code with better logic and names, got rid of superfluous stuff and made it obey the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">python style guide</a></p>
<pre><code>import requests
from bs4 import BeautifulSoup

page_link = ("https://www.autotrader.co.uk/car-search?sort=price-asc&amp;"
             "radius=1500&amp;postcode=lu15jq&amp;onesearchad=Used&amp;"
             "onesearchad=Nearly%20New&amp;onesearchad=New&amp;make=AUDI&amp;model=A5"
             "&amp;price-to=8500&amp;year-from=2008&amp;maximum-mileage=90000"
             "&amp;transmission=Automatic&amp;exclude-writeoff-categories=on")

request = requests.get(page_link)
conn = request.content
soup = BeautifulSoup(conn, "html.parser")

# don't overload the inbuilt `all`
cars = soup.find_all("h2", {"class":"listing-title title-wrap"})
cars_specs = soup.find_all('ul', {"class" :'listing-key-specs '})

for car, specs in zip(cars, cars_specs):
    # your logic with regards to the `LN` variable did absolutely nothing
    print(car.find("a", {"class": "js-click-handler listing-fpa-link"}))
    print(specs.text)
</code></pre>
</div>
<span class="comment-copy">Thanks a bunch. I just wanted to ask what you mean when you say overload the inbuilt all. What is the consequence of overloading?</span>
<span class="comment-copy">@M.Ustun Python has a built-in <a href="https://docs.python.org/3.3/library/functions.html#all" rel="nofollow noreferrer"><code>all()</code></a> function. If you use <code>all</code> as a variable, you are redefining the function and changing it into a simple variable.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#all</a>  - if you overload it (really reassign in python jargon), you can no longer access this useful function</span>
