<div class="post-text" itemprop="text">
<p>I wanted to define a class that returns <code>None</code> for unknown attributes with <code>__getattr__</code> method.</p>
<p>After doing that, I am trying to dump an object of that class to a Pickle.</p>
<p>However, I got the error</p>
<pre><code>Traceback (most recent call last):
  File "c:\SVN\Scripts\Rally\examples\t_pickle_None.py", line 14, in &lt;module&gt;
    pickle.dump(toto, f, pickle.HIGHEST_PROTOCOL)
TypeError: 'NoneType' object is not callable
</code></pre>
<p>Without defining <code>__getattr__</code>, it works fine, but I would like to keep this function.</p>
<p>Here is my code: how to make it work with <code>__getattr__</code>?</p>
<p>Thanks</p>
<pre><code>import pickle
from typing import Any

class Toto:
    def __init__(self, name:str) -&gt; None:
        self.name = name

    def __getattr__(self, _: str) -&gt; Any:
        """Return None for all unknown attributes"""
        return None

toto = Toto("Toto")
with open('toto.pkl', 'wb') as f:
    pickle.dump(toto, f, pickle.HIGHEST_PROTOCOL)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that pickle tries to check if your object has a <a href="https://docs.python.org/3/library/pickle.html#object.__getstate__" rel="nofollow noreferrer"><code>__getstate__</code></a> method, which can be used to customize how objects are pickled. Because your class doesn't define a <code>__getstate__</code> method, your <code>__getattr__</code> method ends up being called and it returns <code>None</code>. Pickle tries to call this <code>None</code> value and that produces the exception you got.</p>
<p>There are two ways to fix this:</p>
<ol>
<li><p>Define a <code>__getstate__</code> and corresponding <code>__setstate__</code> method in your class:</p>
<pre><code>def __getstate__(self):
    return vars(self)

def __setstate__(self, state):
    vars(self).update(state)
</code></pre></li>
<li><p>Rewrite your <code>__getattr__</code> method to handle dunder-attributes better (i.e. throwing an AttributeError instead of returning a nonsense value):</p>
<pre><code>def __getattr__(self, attr: str) -&gt; Any:
    """Return None for all unknown attributes"""
    if attr.startswith('__') and attr.endswith('__'):
        raise AttributeError
    return None
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>If you override <code>__getattr__</code>, you have tell how exactly your object can be pickled by implementing the <code>__getstate__</code> and <code>__setstate__</code> methods</p>
<p>Have a look at <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">here</a> for more info</p>
<pre><code>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; class Toto:
...     def __init__(self, name:str):
...         self.name = name
...     def __getattr__(self, _: str):
...         """Return None for all unknown attributes"""
...         return None
...     def __getstate__(self): return self.__dict__
...     def __setstate__(self, d): self.__dict__.update(d)
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; t=Toto()
&gt;&gt;&gt; pickle.dumps(t)
b'\x80\x03c__main__\nToto\nq\x00)\x81q\x01}q\x02X\x04\x00\x00\x00nameq\x03X\x03\x00\x00\x00abcq\x04sb.'
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">You need to be careful pickling objects that define a <code>__getattr__</code>. I wrote something about it <a href="https://stackoverflow.com/a/50158865/4014959">here</a>. Does it help?</span>
<span class="comment-copy">Also see <a href="https://stackoverflow.com/questions/49380224/how-to-make-classes-with-getattr-pickable" title="how to make classes with getattr pickable">stackoverflow.com/questions/49380224/â€¦</a> and the links there.</span>
<span class="comment-copy">@PM2Ring Interseting share, although the answer of Aran-Fey appared much clearer (especially at midnight when eyes are half closed :) Thanks</span>
<span class="comment-copy">I agree that Aran-Fey's answer is good, in fact I already upvoted it. :) But I figured that those links had good relevant info, even if they didn't exactly answer your question. If they <i>did</i> answer your question then I would have closed it as a duplicate. :)</span>
<span class="comment-copy">Indeed. I like your idea of <code>UserDict</code>. I tried to make it work for my other problem of <code>mypy</code> complaining about dynamically created outputs but <code>mypy</code> complains also about your code :) ... but this is a topic for another day (or more specifically another question).</span>
