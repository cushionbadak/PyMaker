<div class="post-text" itemprop="text">
<p>Normally I would use sum(dict['A'].values()) in order to sum all the values in a dictionary with the key "A". However in this case it is not all the  values of the "main" key I want to sum, but rather all the values where the "secondary/sub-key" has a specific name. Let me show a simplified example below:</p>
<pre><code>dict = {'A':{'val1':3,'val2':5},'B':{'val1':2,'val2':6}}
sum1 = dict['A']['val1']+dict['B']['val1']
sum2 = dict['A']['val2']+dict['B']['val2']
</code></pre>
<p>The example above is fairly easy since it's only a 2*2 dimension, and thus I can fairly easily add the values directly. But this method is not practical when the dictionary gets larger. So I wonder what is the most efficient solution.</p>
<p>Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>To sum values for a single subkey you could use <code>sum()</code> with a generator expression:</p>
<pre><code>&gt;&gt;&gt; d = {'A': {'val1': 3,'val2': 5}, 'B': {'val1': 2, 'val2': 6}}
&gt;&gt;&gt; sum(x['val1'] for x in d.values())
5
</code></pre>
<p>To sum values for <em>all</em> subkeys you can use <a href="https://docs.python.org/3.6/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; counter = sum(map(Counter, d.values()), Counter())
&gt;&gt;&gt; dict(counter)
{'val2': 11, 'val1': 5}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate through the keys of your dict and retrieve the values to add them to a variable.</p>
<p>So you would start by declaring the <code>sum</code> variables where you will store the sums, and iterate through every key in your dict to add the corresponding values to the <code>sum</code> variables. You could also easily add more values in the future by adding <code>val3</code> and <code>sum3</code>, <code>val4</code> and <code>sum4</code>, etc. Here is an example:</p>
<pre><code>my_dict = {'A':{'val1':3,'val2':5},'B':{'val1':2,'val2':6}}

# initiate variables to store the sums
sum1, sum2 = (0,) * 2

# iterate through the keys of your dict and increment the sum variables
for key in my_dict:
    sum1 += my_dict[key]['val1']
    sum2 += my_dict[key]['val2']

print(sum1)
print(sum2)
</code></pre>
<p>This prints:</p>
<pre><code>5
11
</code></pre>
<p>Also, as @jpp mentioned, never name a variable after a class, so don't name your dictionnary <code>dict</code> e.g. you can name it <code>my_dict</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can store sum of the every element inside the dict in a new dictionary</p>
<pre><code>dict = {'A':{'val1':3,'val2':5},'B':{'val1':2,'val2':7}}
sums = {}
sum = 0
for element in dict:
    for key in dict[element]:
        sum += dict[element][key]
    sums[element] = sum
    sum = 0
print(sums['A']) # 8
print(sums['B']) # 9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; d = {'A':{'val1':3,'val2':5},'B':{'val1':2,'val2':6}}
&gt;&gt;&gt; sum((Counter(d[x]) for x in d), Counter())
Counter({'val2': 11, 'val1': 5})
</code></pre>
<p>Also note that you shouldn't name your dictionary as <code>dict</code>. It shadows the built-in <a href="https://docs.python.org/3.3/library/functions.html#func-dict" rel="nofollow noreferrer"><code>dict</code></a> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest you this easily readable and understandable solution, which iterates over each key/value pair to update a new dictionary with the sum of values, whatever the size of input dictionaries. I also renamed the input dictionary into <code>d</code> instead of <code>dict</code> because <code>dict</code> is the name of the Python built-in class:  </p>
<pre><code>from collections import defaultdict

d = {'A':{'val1':3,'val2':5},'B':{'val1':2,'val2':6}}

sumDict = defaultdict(int)

for v1 in d.values():
    for k2,v2 in v1.items():
        sumDict[k2] += v2

print(dict(sumDict))    # {'val1': 5, 'val2': 11}
print(sumDict['val1'])  # 5
print(sumDict['val2'])  # 11
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can find the union of relevant keys. Then use a dictionary comprehension to construct a dictionary mapping these keys to their sums:</p>
<pre><code>d = {'A':{'val1':3,'val2':5},'B':{'val1':2,'val2':6}}

sum_keys = set().union(*d.values())
sums = {k: sum(d[i].get(k, 0) for i in d) for k in sum_keys}

print(sums)

{'val1': 5, 'val2': 11}
</code></pre>
</div>
<span class="comment-copy">what should be the result for this dict <code>{'A':{'val5': 1,'val1':3,'val2':5},'B':{'val3':2,'val2':6, 'val1': 10}}</code> ?</span>
<span class="comment-copy">Do you want to print only the values under dict['A'] or the sum of all the values of the dictionary ?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/28345539/sum-nested-key-values-of-dict">Sum nested key values of dict</a></span>
<span class="comment-copy">Two points. <b>Never</b> name your dictionary after a class, e.g. use <code>my_dict</code> instead of <code>dict</code>. Second point, why not iterate <code>for key in my_dict: ... </code> ? <code>iterkeys</code> is not required to iterate keys.</span>
<span class="comment-copy">@jpp I am aware of the naming convention, I simply copied the code in the question. But I do agree with your second point, thank you for pointing it out.</span>
