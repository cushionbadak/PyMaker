<div class="post-text" itemprop="text">
<p>I have a dataframe <code>df</code> which i need to groupby multiple column based on a condition.</p>
<p>df</p>
<pre><code>user_id       area_id         group_id key year value     new
10835          48299            1      5   2011   0        ?
10835           48299           1      2   2010   0
10835           48299           2     102  2013   13100
10835           48299           2      5   2016   0
10836           48299           1      78  2017   67100
10836           48299           1      1   2012   54000
10836           48299           1      12  2018   0
10836           48752           1      7   2014   0
10836           48752           2     103  2015   5000
10837           48752           2     102  2016   5000
10837           48752           1      3   2017   0
10837           48752           1     103  2017   0
10837           49226           1      2   2011   4000
10837           49226           1     83   2011   4000
10838           49226           2     16   2011   0
10838           49226           1     75   2012   0
10838           49226           1      2   2012   4000
10838           49226           1      12  2013   1000
10839           49226           1      3   2015   6500
10839           49226           1     102  2016   7900
10839           49226           1     16   2017   0
10839           49226           2     6    2017   5500
22489           49226           2     89   2017   5000
22489           49226           1     102  2017   5000
</code></pre>
<p>my goal is to create a new column <code>df['new']</code>
Current solution:</p>
<pre><code>df['new'] =df['user_id'].map(df[df['key'].eq(102)].groupby(['user_id', 'area_id', 'group_id', 'year'])['value'].sum())
</code></pre>
<p>I get <code>NaN</code> for all <code>df['new']</code> values. I'm guessing is not possible to use the the <code>map function</code> to grouped multiple columns this way. Is there a proper way to accomplish this? Thanks in advance for tip to the right direction.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can add <code>as_index=False</code> for new <code>DataFrame</code>:</p>
<pre><code>df1 = (df[df['key'].eq(102)]
             .groupby(['user_id', 'area_id', 'group_id', 'year'], as_index=False)['value']
             .sum())
print (df1)
   user_id  area_id  group_id  year  value
0    10835    48299         2  2013  13100
1    10837    48752         2  2016   5000
2    10839    49226         1  2016   7900
3    22489    49226         1  2017   5000
</code></pre>
<p>Then if possible duplicated <code>user_id</code> first get unique rows by <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.drop_duplicates.html" rel="nofollow noreferrer"><code>DataFrame.drop_duplicates</code></a>, create <code>Series</code> by <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.set_index.html" rel="nofollow noreferrer"><code>DataFrame.set_index</code></a> and <code>map</code>:</p>
<pre><code>df['new'] = df['user_id'].map(df1.drop_duplicates('user_id').set_index('user_id')['value'])
#if never duplicates
#df['new'] = df['user_id'].map(df1.set_index('user_id')['value'])
print (df)
    user_id  area_id  group_id  key  year  value      new
0     10835    48299         1    5  2011      0  13100.0
1     10835    48299         1    2  2010      0  13100.0
2     10835    48299         2  102  2013  13100  13100.0
3     10835    48299         2    5  2016      0  13100.0
4     10836    48299         1   78  2017  67100      NaN
5     10836    48299         1    1  2012  54000      NaN
6     10836    48299         1   12  2018      0      NaN
7     10836    48752         1    7  2014      0      NaN
8     10836    48752         2  103  2015   5000      NaN
9     10837    48752         2  102  2016   5000   5000.0
10    10837    48752         1    3  2017      0   5000.0
11    10837    48752         1  103  2017      0   5000.0
12    10837    49226         1    2  2011   4000   5000.0
13    10837    49226         1   83  2011   4000   5000.0
14    10838    49226         2   16  2011      0      NaN
15    10838    49226         1   75  2012      0      NaN
16    10838    49226         1    2  2012   4000      NaN
17    10838    49226         1   12  2013   1000      NaN
18    10839    49226         1    3  2015   6500   7900.0
19    10839    49226         1  102  2016   7900   7900.0
20    10839    49226         1   16  2017      0   7900.0
21    10839    49226         2    6  2017   5500   7900.0
22    22489    49226         2   89  2017   5000   5000.0
23    22489    49226         1  102  2017   5000   5000.0
</code></pre>
</div>
<span class="comment-copy">what should be the value of the <code>new</code> column ?</span>
<span class="comment-copy">thank you very much, it works! Like always I learn a lot from you solutions.</span>
