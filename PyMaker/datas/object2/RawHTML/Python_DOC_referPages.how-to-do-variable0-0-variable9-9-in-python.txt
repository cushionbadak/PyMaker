<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1373164/how-do-i-create-a-variable-number-of-variables">How do I create a variable number of variables?</a>
<span class="question-originals-answer-count">
                    16 answers
                </span>
</li>
</ul>
</div>
<p>I have a simple question of beginner.</p>
<p>How to make this code work :</p>
<pre><code>variable0 = 0

...
variable9 = 9
</code></pre>
<p>I tried :</p>
<pre><code>for j in range(9):
    variable"{}".format(j) = j
</code></pre>
<p>and others similar things with eval() and exec() functions.</p>
<p>Thanks a lot !</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not use a list instead, together with list comprehension:</p>
<pre><code>variable = [i for i in range(10)]
</code></pre>
<p>Then you could use <code>variable[0]</code> for your "variable0", etc.</p>
<hr/>
<p>Or, as mentioned in a few comments</p>
<pre><code>variable = list(range(10))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really want to do this you can do:</p>
<pre><code>for j in range(9):
    exec("variable{} = j".format(j))
</code></pre>
<p>But as others have said, you probably shouldn't.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using numbers, use a list:</p>
<pre><code>items = [1, 2, 3, 4, ...]
</code></pre>
<p>or</p>
<pre><code>items = range(10)
</code></pre>
<p>then you can look up <code>items[0]</code>, <code>items[2]</code>, etc</p>
<p>If you want to use something else to identify items, use a dictionary:</p>
<pre><code>items = {
    1: 1,
    2: 2,
    'foo': 'bar'
    ...
}
</code></pre>
<p>You can look up with <code>items[0]</code>, <code>items['foo']</code>, etc</p>
<p>You can also use list comprehension or dictionary comprehension to define your data structures, e.g.</p>
<pre><code>items = {i: i for i in range(10)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the use of a dictionary is better suited for this task:</p>
<pre><code>d = {"variable{}".format(i): i for i in range(10)}

print(d['variable0']) # ==&gt; 0
print(d['variable5']) # ==&gt; 5
print(d['variable9']) # ==&gt; 9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really, really need this specific behaviour (changing variable names on the fly) there is a way to acomplish it. I don't recommend this solution, since there are more intuitive ones and this approach is not a very good design. Here it is: </p>
<pre><code>l = locals()
counter = 0;
for i in range(9):
   l["variable" + str(counter)] = i
   counter += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using a list:</p>
<pre><code>variable = list(range(10))

print(variable[0])   # 0
print(variable[9])   # 9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I wouldn't really recommend this but you could assign the globals() or locals() dictionaries depending on whether you're doing this at the module level or within a function.</p>
<pre><code>for i in range(10): globals()[f'variable{i}'] = 0

def myfunc():
    for i in range(10): locals()[f'variable{i}'] = 0
</code></pre>
</div>
<span class="comment-copy">You don't <i>want</i> lots of similarly named variables like this; use a list instead: <code>variable = list(range(10))</code>.</span>
<span class="comment-copy">Why do you need this? Please checkout <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">what is an XY question</a> - it seems unlikely this is your needed solution.</span>
<span class="comment-copy">Dynamically creating variables is indeed possible in Python, but you probably do not want that. The good question here is <i>why should we use dynamic variables instead of lists, arrays or dictionaries</i>. Unless you can give an acceptable answer to that question, I will only say here: stick to a Python container.</span>
<span class="comment-copy">To be honest this is the actual answer, though unlikely what OP really needs.</span>
<span class="comment-copy">You definitely shouldn't! @DirtyBit SO isn't about just giving the exact answer OP wants, it's also about guiding them to what the <i>should</i> do.</span>
<span class="comment-copy">@FHTMitchell Of course it is about guiding them to the right approach, but sometimes people need specific behaviour. For example changing variable names dynmically if he/she needs 10 different variables while assigning values and it is impossible to do it with the list approach. I think it is better to give the exact answer if possible but to <b>advise</b> to read or try some different approach or to tell that this approach is not correct.</span>
